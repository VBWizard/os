
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 cb 3d 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000008:	05 3c 60 00 00       	add    eax,0x603c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 93 3d 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000040:	05 04 60 00 00       	add    eax,0x6004
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 59 3d 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f00007a:	05 ca 5f 00 00       	add    eax,0x5fca
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 04 3d 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0000cf:	05 75 5f 00 00       	add    eax,0x5f75
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 da 3c 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 1e 5f 00 00    	add    ebx,0x5f1e
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 50 00 00 00    	mov    DWORD PTR [ebx+0x50],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 50 00 00 00    	mov    DWORD PTR [ebx+0x50],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    
9f0001b3:	90                   	nop

9f0001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f0001b4:	55                   	push   ebp
9f0001b5:	89 e5                	mov    ebp,esp
9f0001b7:	53                   	push   ebx
9f0001b8:	83 ec 14             	sub    esp,0x14
9f0001bb:	e8 13 3c 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0001c0:	05 84 5e 00 00       	add    eax,0x5e84
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f0001cc:	83 ec 0c             	sub    esp,0xc
9f0001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0001d2:	89 c3                	mov    ebx,eax
9f0001d4:	e8 63 26 00 00       	call   9f00283c <strlenI>
9f0001d9:	83 c4 10             	add    esp,0x10
9f0001dc:	83 e8 01             	sub    eax,0x1
9f0001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0001e2:	eb 39                	jmp    9f00021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f0001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001ea:	01 d0                	add    eax,edx
9f0001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f0001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001f8:	01 c2                	add    edx,eax
9f0001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000200:	01 c8                	add    eax,ecx
9f000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00020d:	01 c2                	add    edx,eax
9f00020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f00021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f000223:	7c bf                	jl     9f0001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f000225:	90                   	nop
9f000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000229:	c9                   	leave  
9f00022a:	c3                   	ret    

9f00022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f00022b:	55                   	push   ebp
9f00022c:	89 e5                	mov    ebp,esp
9f00022e:	53                   	push   ebx
9f00022f:	83 ec 14             	sub    esp,0x14
9f000232:	e8 9c 3b 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000237:	05 0d 5e 00 00       	add    eax,0x5e0d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000246:	79 03                	jns    9f00024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f00024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000255:	8d 50 01             	lea    edx,[eax+0x1]
9f000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00025b:	89 c2                	mov    edx,eax
9f00025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000266:	ba 67 66 66 66       	mov    edx,0x66666667
9f00026b:	89 c8                	mov    eax,ecx
9f00026d:	f7 ea                	imul   edx
9f00026f:	c1 fa 02             	sar    edx,0x2
9f000272:	89 c8                	mov    eax,ecx
9f000274:	c1 f8 1f             	sar    eax,0x1f
9f000277:	29 c2                	sub    edx,eax
9f000279:	89 d0                	mov    eax,edx
9f00027b:	c1 e0 02             	shl    eax,0x2
9f00027e:	01 d0                	add    eax,edx
9f000280:	01 c0                	add    eax,eax
9f000282:	29 c1                	sub    ecx,eax
9f000284:	89 ca                	mov    edx,ecx
9f000286:	89 d0                	mov    eax,edx
9f000288:	83 c0 30             	add    eax,0x30
9f00028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f00028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000290:	ba 67 66 66 66       	mov    edx,0x66666667
9f000295:	89 c8                	mov    eax,ecx
9f000297:	f7 ea                	imul   edx
9f000299:	c1 fa 02             	sar    edx,0x2
9f00029c:	89 c8                	mov    eax,ecx
9f00029e:	c1 f8 1f             	sar    eax,0x1f
9f0002a1:	29 c2                	sub    edx,eax
9f0002a3:	89 d0                	mov    eax,edx
9f0002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0002ac:	7f a4                	jg     9f000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f0002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002b2:	79 13                	jns    9f0002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f0002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002bd:	89 c2                	mov    edx,eax
9f0002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002c2:	01 d0                	add    eax,edx
9f0002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f0002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002cd:	01 d0                	add    eax,edx
9f0002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f0002d2:	83 ec 0c             	sub    esp,0xc
9f0002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0002d8:	e8 d7 fe ff ff       	call   9f0001b4 <reverseI>
9f0002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f0002e0:	90                   	nop
9f0002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002e4:	c9                   	leave  
9f0002e5:	c3                   	ret    

9f0002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f0002e6:	55                   	push   ebp
9f0002e7:	89 e5                	mov    ebp,esp
9f0002e9:	53                   	push   ebx
9f0002ea:	83 ec 14             	sub    esp,0x14
9f0002ed:	e8 e1 3a 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0002f2:	05 52 5d 00 00       	add    eax,0x5d52
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000301:	79 03                	jns    9f000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f00030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000310:	8d 50 01             	lea    edx,[eax+0x1]
9f000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000316:	89 c2                	mov    edx,eax
9f000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f00031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000321:	ba 67 66 66 66       	mov    edx,0x66666667
9f000326:	89 c8                	mov    eax,ecx
9f000328:	f7 ea                	imul   edx
9f00032a:	c1 fa 02             	sar    edx,0x2
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	c1 f8 1f             	sar    eax,0x1f
9f000332:	29 c2                	sub    edx,eax
9f000334:	89 d0                	mov    eax,edx
9f000336:	c1 e0 02             	shl    eax,0x2
9f000339:	01 d0                	add    eax,edx
9f00033b:	01 c0                	add    eax,eax
9f00033d:	29 c1                	sub    ecx,eax
9f00033f:	89 ca                	mov    edx,ecx
9f000341:	89 d0                	mov    eax,edx
9f000343:	83 c0 30             	add    eax,0x30
9f000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00034b:	ba 67 66 66 66       	mov    edx,0x66666667
9f000350:	89 c8                	mov    eax,ecx
9f000352:	f7 ea                	imul   edx
9f000354:	c1 fa 02             	sar    edx,0x2
9f000357:	89 c8                	mov    eax,ecx
9f000359:	c1 f8 1f             	sar    eax,0x1f
9f00035c:	29 c2                	sub    edx,eax
9f00035e:	89 d0                	mov    eax,edx
9f000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000367:	7f a4                	jg     9f00030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00036d:	79 13                	jns    9f000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f00036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000372:	8d 50 01             	lea    edx,[eax+0x1]
9f000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000378:	89 c2                	mov    edx,eax
9f00037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00037d:	01 d0                	add    eax,edx
9f00037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000388:	01 d0                	add    eax,edx
9f00038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f00038d:	83 ec 0c             	sub    esp,0xc
9f000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000393:	e8 1c fe ff ff       	call   9f0001b4 <reverseI>
9f000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f00039b:	90                   	nop
9f00039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00039f:	c9                   	leave  
9f0003a0:	c3                   	ret    

9f0003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f0003a1:	55                   	push   ebp
9f0003a2:	89 e5                	mov    ebp,esp
9f0003a4:	83 ec 10             	sub    esp,0x10
9f0003a7:	e8 27 3a 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0003ac:	05 98 5c 00 00       	add    eax,0x5c98
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f0003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f0003bf:	eb 28                	jmp    9f0003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f0003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0003c4:	89 d0                	mov    eax,edx
9f0003c6:	c1 e0 02             	shl    eax,0x2
9f0003c9:	01 d0                	add    eax,edx
9f0003cb:	01 c0                	add    eax,eax
9f0003cd:	89 c1                	mov    ecx,eax
9f0003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003d5:	01 d0                	add    eax,edx
9f0003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003da:	0f be c0             	movsx  eax,al
9f0003dd:	01 c8                	add    eax,ecx
9f0003df:	83 e8 30             	sub    eax,0x30
9f0003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f0003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003ef:	01 d0                	add    eax,edx
9f0003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003f4:	84 c0                	test   al,al
9f0003f6:	75 c9                	jne    9f0003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f0003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f0003fb:	c9                   	leave  
9f0003fc:	c3                   	ret    
9f0003fd:	66 90                	xchg   ax,ax
9f0003ff:	90                   	nop

9f000400 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:14
#include "console.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f000400:	55                   	push   ebp
9f000401:	89 e5                	mov    ebp,esp
9f000403:	53                   	push   ebx
9f000404:	83 ec 14             	sub    esp,0x14
9f000407:	e8 f4 39 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f00040c:	81 c3 38 5c 00 00    	add    ebx,0x5c38
/home/yogi/src/os/aproj/libChrisOS/src/console.c:18
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f000412:	83 ec 08             	sub    esp,0x8
9f000415:	8d 83 5c f9 ff ff    	lea    eax,[ebx-0x6a4]
9f00041b:	50                   	push   eax
9f00041c:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00041f:	50                   	push   eax
9f000420:	e8 03 23 00 00       	call   9f002728 <strcpyI>
9f000425:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:19
    itoaI(x,xstr);
9f000428:	83 ec 08             	sub    esp,0x8
9f00042b:	8d 45 eb             	lea    eax,[ebp-0x15]
9f00042e:	50                   	push   eax
9f00042f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000432:	e8 af fe ff ff       	call   9f0002e6 <itoaI>
9f000437:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    strcatI(cmd,xstr);
9f00043a:	83 ec 08             	sub    esp,0x8
9f00043d:	8d 45 eb             	lea    eax,[ebp-0x15]
9f000440:	50                   	push   eax
9f000441:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000444:	50                   	push   eax
9f000445:	e8 90 21 00 00       	call   9f0025da <strcatI>
9f00044a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    strcatI(cmd,";");
9f00044d:	83 ec 08             	sub    esp,0x8
9f000450:	8d 83 5f f9 ff ff    	lea    eax,[ebx-0x6a1]
9f000456:	50                   	push   eax
9f000457:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00045a:	50                   	push   eax
9f00045b:	e8 7a 21 00 00       	call   9f0025da <strcatI>
9f000460:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    itoaI(y,ystr);
9f000463:	83 ec 08             	sub    esp,0x8
9f000466:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000469:	50                   	push   eax
9f00046a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00046d:	e8 74 fe ff ff       	call   9f0002e6 <itoaI>
9f000472:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,ystr);
9f000475:	83 ec 08             	sub    esp,0x8
9f000478:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00047b:	50                   	push   eax
9f00047c:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00047f:	50                   	push   eax
9f000480:	e8 55 21 00 00       	call   9f0025da <strcatI>
9f000485:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    strcatI(cmd,"H");
9f000488:	83 ec 08             	sub    esp,0x8
9f00048b:	8d 83 61 f9 ff ff    	lea    eax,[ebx-0x69f]
9f000491:	50                   	push   eax
9f000492:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000495:	50                   	push   eax
9f000496:	e8 3f 21 00 00       	call   9f0025da <strcatI>
9f00049b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f00049e:	83 ec 08             	sub    esp,0x8
9f0004a1:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004a4:	50                   	push   eax
9f0004a5:	8d 83 63 f9 ff ff    	lea    eax,[ebx-0x69d]
9f0004ab:	50                   	push   eax
9f0004ac:	e8 ac 08 00 00       	call   9f000d5d <printfI>
9f0004b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:27
}
9f0004b4:	90                   	nop
9f0004b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0004b8:	c9                   	leave  
9f0004b9:	c3                   	ret    

9f0004ba <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:30

VISIBLE void saveCursorPosition()
{
9f0004ba:	55                   	push   ebp
9f0004bb:	89 e5                	mov    ebp,esp
9f0004bd:	53                   	push   ebx
9f0004be:	83 ec 14             	sub    esp,0x14
9f0004c1:	e8 3a 39 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f0004c6:	81 c3 7e 5b 00 00    	add    ebx,0x5b7e
/home/yogi/src/os/aproj/libChrisOS/src/console.c:33
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0004cc:	83 ec 08             	sub    esp,0x8
9f0004cf:	8d 83 5c f9 ff ff    	lea    eax,[ebx-0x6a4]
9f0004d5:	50                   	push   eax
9f0004d6:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004d9:	50                   	push   eax
9f0004da:	e8 49 22 00 00       	call   9f002728 <strcpyI>
9f0004df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:34
    strcatI(cmd,"s");
9f0004e2:	83 ec 08             	sub    esp,0x8
9f0004e5:	8d 83 66 f9 ff ff    	lea    eax,[ebx-0x69a]
9f0004eb:	50                   	push   eax
9f0004ec:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004ef:	50                   	push   eax
9f0004f0:	e8 e5 20 00 00       	call   9f0025da <strcatI>
9f0004f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0004f8:	83 ec 08             	sub    esp,0x8
9f0004fb:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004fe:	50                   	push   eax
9f0004ff:	8d 83 63 f9 ff ff    	lea    eax,[ebx-0x69d]
9f000505:	50                   	push   eax
9f000506:	e8 52 08 00 00       	call   9f000d5d <printfI>
9f00050b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:37
}
9f00050e:	90                   	nop
9f00050f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000512:	c9                   	leave  
9f000513:	c3                   	ret    

9f000514 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:40

VISIBLE void restoreCursorPosition()
{
9f000514:	55                   	push   ebp
9f000515:	89 e5                	mov    ebp,esp
9f000517:	53                   	push   ebx
9f000518:	83 ec 14             	sub    esp,0x14
9f00051b:	e8 e0 38 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000520:	81 c3 24 5b 00 00    	add    ebx,0x5b24
/home/yogi/src/os/aproj/libChrisOS/src/console.c:43
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000526:	83 ec 08             	sub    esp,0x8
9f000529:	8d 83 5c f9 ff ff    	lea    eax,[ebx-0x6a4]
9f00052f:	50                   	push   eax
9f000530:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000533:	50                   	push   eax
9f000534:	e8 ef 21 00 00       	call   9f002728 <strcpyI>
9f000539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:44
    strcatI(cmd,"u");
9f00053c:	83 ec 08             	sub    esp,0x8
9f00053f:	8d 83 68 f9 ff ff    	lea    eax,[ebx-0x698]
9f000545:	50                   	push   eax
9f000546:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000549:	50                   	push   eax
9f00054a:	e8 8b 20 00 00       	call   9f0025da <strcatI>
9f00054f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000552:	83 ec 08             	sub    esp,0x8
9f000555:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000558:	50                   	push   eax
9f000559:	8d 83 63 f9 ff ff    	lea    eax,[ebx-0x69d]
9f00055f:	50                   	push   eax
9f000560:	e8 f8 07 00 00       	call   9f000d5d <printfI>
9f000565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:47
}
9f000568:	90                   	nop
9f000569:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00056c:	c9                   	leave  
9f00056d:	c3                   	ret    
9f00056e:	66 90                	xchg   ax,ax

9f000570 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
9f000570:	55                   	push   ebp
9f000571:	89 e5                	mov    ebp,esp
9f000573:	53                   	push   ebx
9f000574:	83 ec 14             	sub    esp,0x14
9f000577:	e8 84 38 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f00057c:	81 c3 c8 5a 00 00    	add    ebx,0x5ac8
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000582:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000589:	eb 7b                	jmp    9f000606 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00058b:	83 ec 0c             	sub    esp,0xc
9f00058e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000591:	e8 a6 22 00 00       	call   9f00283c <strlenI>
9f000596:	83 c4 10             	add    esp,0x10
9f000599:	89 c1                	mov    ecx,eax
9f00059b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0005a1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005a3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005a6:	c1 e2 02             	shl    edx,0x2
9f0005a9:	01 d0                	add    eax,edx
9f0005ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005ad:	83 ec 04             	sub    esp,0x4
9f0005b0:	51                   	push   ecx
9f0005b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0005b4:	50                   	push   eax
9f0005b5:	e8 8d 23 00 00       	call   9f002947 <strncmpI>
9f0005ba:	83 c4 10             	add    esp,0x10
9f0005bd:	85 c0                	test   eax,eax
9f0005bf:	75 41                	jne    9f000602 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f0005c1:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0005c7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005cc:	c1 e2 02             	shl    edx,0x2
9f0005cf:	01 d0                	add    eax,edx
9f0005d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005d3:	83 ec 08             	sub    esp,0x8
9f0005d6:	8d 93 6a f9 ff ff    	lea    edx,[ebx-0x696]
9f0005dc:	52                   	push   edx
9f0005dd:	50                   	push   eax
9f0005de:	e8 4b 2a 00 00       	call   9f00302e <strstrI>
9f0005e3:	83 c4 10             	add    esp,0x10
9f0005e6:	83 c0 01             	add    eax,0x1
9f0005e9:	83 ec 04             	sub    esp,0x4
9f0005ec:	6a 32                	push   0x32
9f0005ee:	50                   	push   eax
9f0005ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0005f2:	e8 b9 23 00 00       	call   9f0029b0 <strncpyI>
9f0005f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f0005fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0005fd:	83 c0 01             	add    eax,0x1
9f000600:	eb 13                	jmp    9f000615 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f000602:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f000606:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f00060a:	0f 8e 7b ff ff ff    	jle    9f00058b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f000610:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f000615:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000618:	c9                   	leave  
9f000619:	c3                   	ret    

9f00061a <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
9f00061a:	55                   	push   ebp
9f00061b:	89 e5                	mov    ebp,esp
9f00061d:	53                   	push   ebx
9f00061e:	83 ec 14             	sub    esp,0x14
9f000621:	e8 da 37 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000626:	81 c3 1e 5a 00 00    	add    ebx,0x5a1e
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
9f00062c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
9f000633:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f00063a:	e9 d5 00 00 00       	jmp    9f000714 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
9f00063f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000645:	8b 00                	mov    eax,DWORD PTR [eax]
9f000647:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00064a:	c1 e2 02             	shl    edx,0x2
9f00064d:	01 d0                	add    eax,edx
9f00064f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000651:	85 c0                	test   eax,eax
9f000653:	0f 84 b7 00 00 00    	je     9f000710 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000659:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000664:	c1 e2 02             	shl    edx,0x2
9f000667:	01 d0                	add    eax,edx
9f000669:	8b 00                	mov    eax,DWORD PTR [eax]
9f00066b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00066e:	83 ec 0c             	sub    esp,0xc
9f000671:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000674:	e8 c3 21 00 00       	call   9f00283c <strlenI>
9f000679:	83 c4 10             	add    esp,0x10
9f00067c:	89 c1                	mov    ecx,eax
9f00067e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000684:	8b 00                	mov    eax,DWORD PTR [eax]
9f000686:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000689:	c1 e2 02             	shl    edx,0x2
9f00068c:	01 d0                	add    eax,edx
9f00068e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000690:	83 ec 04             	sub    esp,0x4
9f000693:	51                   	push   ecx
9f000694:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000697:	50                   	push   eax
9f000698:	e8 aa 22 00 00       	call   9f002947 <strncmpI>
9f00069d:	83 c4 10             	add    esp,0x10
9f0006a0:	85 c0                	test   eax,eax
9f0006a2:	75 6c                	jne    9f000710 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
9f0006a4:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006ac:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006af:	c1 e2 02             	shl    edx,0x2
9f0006b2:	01 d0                	add    eax,edx
9f0006b4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006b6:	83 ec 08             	sub    esp,0x8
9f0006b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006bc:	50                   	push   eax
9f0006bd:	e8 66 20 00 00       	call   9f002728 <strcpyI>
9f0006c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
9f0006c5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006cb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006cd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006d0:	c1 e2 02             	shl    edx,0x2
9f0006d3:	01 d0                	add    eax,edx
9f0006d5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006d7:	83 ec 08             	sub    esp,0x8
9f0006da:	8d 93 6a f9 ff ff    	lea    edx,[ebx-0x696]
9f0006e0:	52                   	push   edx
9f0006e1:	50                   	push   eax
9f0006e2:	e8 f3 1e 00 00       	call   9f0025da <strcatI>
9f0006e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
9f0006ea:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006f0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006f2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006f5:	c1 e2 02             	shl    edx,0x2
9f0006f8:	01 d0                	add    eax,edx
9f0006fa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006fc:	83 ec 08             	sub    esp,0x8
9f0006ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000702:	50                   	push   eax
9f000703:	e8 d2 1e 00 00       	call   9f0025da <strcatI>
9f000708:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
9f00070b:	e9 c6 00 00 00       	jmp    9f0007d6 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f000710:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
9f000714:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f000718:	0f 8e 21 ff ff ff    	jle    9f00063f <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f00071e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f000725:	e9 a2 00 00 00       	jmp    9f0007cc <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
9f00072a:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000730:	8b 00                	mov    eax,DWORD PTR [eax]
9f000732:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000735:	c1 e2 02             	shl    edx,0x2
9f000738:	01 d0                	add    eax,edx
9f00073a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00073c:	85 c0                	test   eax,eax
9f00073e:	0f 85 84 00 00 00    	jne    9f0007c8 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f000744:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00074a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00074c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00074f:	c1 e2 02             	shl    edx,0x2
9f000752:	01 d0                	add    eax,edx
9f000754:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000757:	81 c2 00 02 00 00    	add    edx,0x200
9f00075d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
9f00075f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00076a:	c1 e2 02             	shl    edx,0x2
9f00076d:	01 d0                	add    eax,edx
9f00076f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000771:	83 ec 08             	sub    esp,0x8
9f000774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000777:	50                   	push   eax
9f000778:	e8 ab 1f 00 00       	call   9f002728 <strcpyI>
9f00077d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
9f000780:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000786:	8b 00                	mov    eax,DWORD PTR [eax]
9f000788:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00078b:	c1 e2 02             	shl    edx,0x2
9f00078e:	01 d0                	add    eax,edx
9f000790:	8b 00                	mov    eax,DWORD PTR [eax]
9f000792:	83 ec 08             	sub    esp,0x8
9f000795:	8d 93 6a f9 ff ff    	lea    edx,[ebx-0x696]
9f00079b:	52                   	push   edx
9f00079c:	50                   	push   eax
9f00079d:	e8 38 1e 00 00       	call   9f0025da <strcatI>
9f0007a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
9f0007a5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0007ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0007b0:	c1 e2 02             	shl    edx,0x2
9f0007b3:	01 d0                	add    eax,edx
9f0007b5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007b7:	83 ec 08             	sub    esp,0x8
9f0007ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007bd:	50                   	push   eax
9f0007be:	e8 17 1e 00 00       	call   9f0025da <strcatI>
9f0007c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
9f0007c6:	eb 0e                	jmp    9f0007d6 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007c8:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
9f0007cc:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f0007d0:	0f 8e 54 ff ff ff    	jle    9f00072a <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f0007d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0007d9:	c9                   	leave  
9f0007da:	c3                   	ret    
9f0007db:	90                   	nop

9f0007dc <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11

#include "libChrisOS.h"
#include "file.h"

VISIBLE int getdir(char* path, char *buffer, int buflen)
{
9f0007dc:	55                   	push   ebp
9f0007dd:	89 e5                	mov    ebp,esp
9f0007df:	53                   	push   ebx
9f0007e0:	83 ec 04             	sub    esp,0x4
9f0007e3:	e8 eb 35 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0007e8:	05 5c 58 00 00       	add    eax,0x585c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, buflen);
9f0007ed:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0007f0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0007f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0007f6:	53                   	push   ebx
9f0007f7:	51                   	push   ecx
9f0007f8:	52                   	push   edx
9f0007f9:	68 04 03 00 00       	push   0x304
9f0007fe:	89 c3                	mov    ebx,eax
9f000800:	e8 d1 02 00 00       	call   9f000ad6 <do_syscall3>
9f000805:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:13
}
9f000808:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00080b:	c9                   	leave  
9f00080c:	c3                   	ret    

9f00080d <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16

VISIBLE void* open(char* path, const char* mode)
{
9f00080d:	55                   	push   ebp
9f00080e:	89 e5                	mov    ebp,esp
9f000810:	53                   	push   ebx
9f000811:	83 ec 04             	sub    esp,0x4
9f000814:	e8 ba 35 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000819:	05 2b 58 00 00       	add    eax,0x582b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
9f00081e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000821:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000824:	83 ec 04             	sub    esp,0x4
9f000827:	51                   	push   ecx
9f000828:	52                   	push   edx
9f000829:	6a 02                	push   0x2
9f00082b:	89 c3                	mov    ebx,eax
9f00082d:	e8 e0 02 00 00       	call   9f000b12 <do_syscall2>
9f000832:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:18
}
9f000835:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000838:	c9                   	leave  
9f000839:	c3                   	ret    

9f00083a <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21

VISIBLE void close(void* handle)
{
9f00083a:	55                   	push   ebp
9f00083b:	89 e5                	mov    ebp,esp
9f00083d:	53                   	push   ebx
9f00083e:	83 ec 04             	sub    esp,0x4
9f000841:	e8 8d 35 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000846:	05 fe 57 00 00       	add    eax,0x57fe
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f00084b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00084e:	83 ec 08             	sub    esp,0x8
9f000851:	52                   	push   edx
9f000852:	6a 03                	push   0x3
9f000854:	89 c3                	mov    ebx,eax
9f000856:	e8 f5 02 00 00       	call   9f000b50 <do_syscall1>
9f00085b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:23
}
9f00085e:	90                   	nop
9f00085f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000862:	c9                   	leave  
9f000863:	c3                   	ret    

9f000864 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000864:	55                   	push   ebp
9f000865:	89 e5                	mov    ebp,esp
9f000867:	56                   	push   esi
9f000868:	53                   	push   ebx
9f000869:	e8 65 35 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f00086e:	05 d6 57 00 00       	add    eax,0x57d6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000873:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000876:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000879:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00087c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00087f:	83 ec 0c             	sub    esp,0xc
9f000882:	56                   	push   esi
9f000883:	53                   	push   ebx
9f000884:	51                   	push   ecx
9f000885:	52                   	push   edx
9f000886:	6a 04                	push   0x4
9f000888:	89 c3                	mov    ebx,eax
9f00088a:	e8 0d 02 00 00       	call   9f000a9c <do_syscall4>
9f00088f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:28
}
9f000892:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000895:	5b                   	pop    ebx
9f000896:	5e                   	pop    esi
9f000897:	5d                   	pop    ebp
9f000898:	c3                   	ret    

9f000899 <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31

int writeI(void* handle, void *buffer, int size, int length)
{
9f000899:	55                   	push   ebp
9f00089a:	89 e5                	mov    ebp,esp
9f00089c:	56                   	push   esi
9f00089d:	53                   	push   ebx
9f00089e:	e8 30 35 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0008a3:	05 a1 57 00 00       	add    eax,0x57a1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f0008a8:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f0008ab:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0008ae:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0008b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008b4:	83 ec 0c             	sub    esp,0xc
9f0008b7:	56                   	push   esi
9f0008b8:	53                   	push   ebx
9f0008b9:	51                   	push   ecx
9f0008ba:	52                   	push   edx
9f0008bb:	6a 05                	push   0x5
9f0008bd:	89 c3                	mov    ebx,eax
9f0008bf:	e8 d8 01 00 00       	call   9f000a9c <do_syscall4>
9f0008c4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
9f0008c7:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0008ca:	5b                   	pop    ebx
9f0008cb:	5e                   	pop    esi
9f0008cc:	5d                   	pop    ebp
9f0008cd:	c3                   	ret    

9f0008ce <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f0008ce:	55                   	push   ebp
9f0008cf:	89 e5                	mov    ebp,esp
9f0008d1:	83 ec 08             	sub    esp,0x8
9f0008d4:	e8 fa 34 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0008d9:	05 6b 57 00 00       	add    eax,0x576b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
    return writeI(handle, buffer, size, length);
9f0008de:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f0008e1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0008e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008ea:	e8 aa ff ff ff       	call   9f000899 <writeI>
9f0008ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:38
}
9f0008f2:	c9                   	leave  
9f0008f3:	c3                   	ret    

9f0008f4 <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41

VISIBLE int seek(void* handle, long position, int whence)
{
9f0008f4:	55                   	push   ebp
9f0008f5:	89 e5                	mov    ebp,esp
9f0008f7:	53                   	push   ebx
9f0008f8:	83 ec 04             	sub    esp,0x4
9f0008fb:	e8 d3 34 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000900:	05 44 57 00 00       	add    eax,0x5744
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000905:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000908:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00090b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00090e:	53                   	push   ebx
9f00090f:	51                   	push   ecx
9f000910:	52                   	push   edx
9f000911:	6a 09                	push   0x9
9f000913:	89 c3                	mov    ebx,eax
9f000915:	e8 bc 01 00 00       	call   9f000ad6 <do_syscall3>
9f00091a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
}
9f00091d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000920:	c9                   	leave  
9f000921:	c3                   	ret    

9f000922 <fgets>:
fgets():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:46

VISIBLE char *fgets(char *str, int n, void *stream)
{
9f000922:	55                   	push   ebp
9f000923:	89 e5                	mov    ebp,esp
9f000925:	e8 a9 34 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f00092a:	05 1a 57 00 00       	add    eax,0x571a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    
9f00092f:	90                   	nop
9f000930:	5d                   	pop    ebp
9f000931:	c3                   	ret    
9f000932:	66 90                	xchg   ax,ax

9f000934 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f000934:	55                   	push   ebp
9f000935:	89 e5                	mov    ebp,esp
9f000937:	53                   	push   ebx
9f000938:	e8 96 34 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f00093d:	05 07 57 00 00       	add    eax,0x5707
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f000942:	b8 05 00 00 00       	mov    eax,0x5
9f000947:	bb 01 00 00 00       	mov    ebx,0x1
9f00094c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00094f:	89 d1                	mov    ecx,edx
9f000951:	e8 fc ff ff ff       	call   9f000952 <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f000956:	90                   	nop
9f000957:	5b                   	pop    ebx
9f000958:	5d                   	pop    ebp
9f000959:	c3                   	ret    

9f00095a <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f00095a:	55                   	push   ebp
9f00095b:	89 e5                	mov    ebp,esp
9f00095d:	53                   	push   ebx
9f00095e:	83 ec 14             	sub    esp,0x14
9f000961:	e8 6d 34 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000966:	05 de 56 00 00       	add    eax,0x56de
9f00096b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00096e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f000971:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f000977:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f00097b:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f00097e:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f000982:	b8 05 00 00 00       	mov    eax,0x5
9f000987:	bb 01 00 00 00       	mov    ebx,0x1
9f00098c:	8d 55 fa             	lea    edx,[ebp-0x6]
9f00098f:	89 d1                	mov    ecx,edx
9f000991:	e8 fc ff ff ff       	call   9f000992 <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f000996:	90                   	nop
9f000997:	83 c4 14             	add    esp,0x14
9f00099a:	5b                   	pop    ebx
9f00099b:	5d                   	pop    ebp
9f00099c:	c3                   	ret    

9f00099d <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f00099d:	55                   	push   ebp
9f00099e:	89 e5                	mov    ebp,esp
9f0009a0:	53                   	push   ebx
9f0009a1:	83 ec 10             	sub    esp,0x10
9f0009a4:	e8 2a 34 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0009a9:	05 9b 56 00 00       	add    eax,0x569b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f0009ae:	b8 04 00 00 00       	mov    eax,0x4
9f0009b3:	ba 00 00 00 00       	mov    edx,0x0
9f0009b8:	89 d3                	mov    ebx,edx
9f0009ba:	e8 fc ff ff ff       	call   9f0009bb <getchar+0x1e>
9f0009bf:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f0009c2:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f0009c6:	74 06                	je     9f0009ce <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f0009c8:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f0009cc:	eb 0c                	jmp    9f0009da <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0009ce:	b8 02 03 00 00       	mov    eax,0x302
9f0009d3:	e8 fc ff ff ff       	call   9f0009d4 <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f0009d8:	eb d4                	jmp    9f0009ae <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f0009da:	83 c4 10             	add    esp,0x10
9f0009dd:	5b                   	pop    ebx
9f0009de:	5d                   	pop    ebp
9f0009df:	c3                   	ret    

9f0009e0 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f0009e0:	55                   	push   ebp
9f0009e1:	89 e5                	mov    ebp,esp
9f0009e3:	53                   	push   ebx
9f0009e4:	83 ec 14             	sub    esp,0x14
9f0009e7:	e8 e7 33 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0009ec:	05 58 56 00 00       	add    eax,0x5658
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f0009f1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:49
    char lbuf[2]={0,0};
9f0009f8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
9f0009fc:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    
    if (stream!=1)
9f000a00:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f000a04:	74 19                	je     9f000a1f <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:53
    {
        printI("Stream %u not implemented\n",stream);
9f000a06:	83 ec 08             	sub    esp,0x8
9f000a09:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000a0c:	8d 90 6c f9 ff ff    	lea    edx,[eax-0x694]
9f000a12:	52                   	push   edx
9f000a13:	89 c3                	mov    ebx,eax
9f000a15:	e8 97 03 00 00       	call   9f000db1 <printI>
9f000a1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54 (discriminator 1)
        getsError: goto getsError;
9f000a1d:	eb fe                	jmp    9f000a1d <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f000a1f:	b8 04 00 00 00       	mov    eax,0x4
9f000a24:	ba 00 00 00 00       	mov    edx,0x0
9f000a29:	89 d3                	mov    ebx,edx
9f000a2b:	e8 fc ff ff ff       	call   9f000a2c <gets+0x4c>
9f000a30:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
        if (inchar=='\b' && len>0)
9f000a33:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f000a37:	75 17                	jne    9f000a50 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60 (discriminator 1)
9f000a39:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000a3d:	7e 11                	jle    9f000a50 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:62
        {
            buffer[len]=0;
9f000a3f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a45:	01 d0                	add    eax,edx
9f000a47:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            len--;
9f000a4a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f000a4e:	eb 43                	jmp    9f000a93 <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
        }
        else if (inchar!=0)
9f000a50:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f000a54:	74 33                	je     9f000a89 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:67
        {
            lbuf[0]=inchar;
9f000a56:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000a5a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:69
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f000a5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a60:	8d 50 01             	lea    edx,[eax+0x1]
9f000a63:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000a66:	89 c2                	mov    edx,eax
9f000a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a6b:	01 c2                	add    edx,eax
9f000a6d:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000a71:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f000a73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a76:	83 c0 01             	add    eax,0x1
9f000a79:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f000a7c:	7d 06                	jge    9f000a84 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71 (discriminator 1)
9f000a7e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f000a82:	75 9b                	jne    9f000a1f <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:73
            
                return len;
9f000a84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a87:	eb 0c                	jmp    9f000a95 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:76
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f000a89:	b8 02 03 00 00       	mov    eax,0x302
9f000a8e:	e8 fc ff ff ff       	call   9f000a8f <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:81 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f000a93:	eb 8a                	jmp    9f000a1f <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82
}
9f000a95:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a98:	c9                   	leave  
9f000a99:	c3                   	ret    
9f000a9a:	66 90                	xchg   ax,ax

9f000a9c <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f000a9c:	55                   	push   ebp
9f000a9d:	89 e5                	mov    ebp,esp
9f000a9f:	56                   	push   esi
9f000aa0:	53                   	push   ebx
9f000aa1:	83 ec 10             	sub    esp,0x10
9f000aa4:	e8 2a 33 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000aa9:	05 9b 55 00 00       	add    eax,0x559b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f000aae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f000ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000ab8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000abb:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000abe:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000ac1:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f000ac4:	e8 fc ff ff ff       	call   9f000ac5 <do_syscall4+0x29>
9f000ac9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f000acc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f000acf:	83 c4 10             	add    esp,0x10
9f000ad2:	5b                   	pop    ebx
9f000ad3:	5e                   	pop    esi
9f000ad4:	5d                   	pop    ebp
9f000ad5:	c3                   	ret    

9f000ad6 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f000ad6:	55                   	push   ebp
9f000ad7:	89 e5                	mov    ebp,esp
9f000ad9:	56                   	push   esi
9f000ada:	53                   	push   ebx
9f000adb:	83 ec 10             	sub    esp,0x10
9f000ade:	e8 f0 32 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000ae3:	05 61 55 00 00       	add    eax,0x5561
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f000ae8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f000aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000af2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000af5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000af8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000afb:	be 00 00 00 00       	mov    esi,0x0
9f000b00:	e8 fc ff ff ff       	call   9f000b01 <do_syscall3+0x2b>
9f000b05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f000b08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f000b0b:	83 c4 10             	add    esp,0x10
9f000b0e:	5b                   	pop    ebx
9f000b0f:	5e                   	pop    esi
9f000b10:	5d                   	pop    ebp
9f000b11:	c3                   	ret    

9f000b12 <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f000b12:	55                   	push   ebp
9f000b13:	89 e5                	mov    ebp,esp
9f000b15:	56                   	push   esi
9f000b16:	53                   	push   ebx
9f000b17:	83 ec 10             	sub    esp,0x10
9f000b1a:	e8 b4 32 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000b1f:	05 25 55 00 00       	add    eax,0x5525
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f000b24:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f000b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b2e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000b31:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000b34:	ba 00 00 00 00       	mov    edx,0x0
9f000b39:	be 00 00 00 00       	mov    esi,0x0
9f000b3e:	e8 fc ff ff ff       	call   9f000b3f <do_syscall2+0x2d>
9f000b43:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f000b46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f000b49:	83 c4 10             	add    esp,0x10
9f000b4c:	5b                   	pop    ebx
9f000b4d:	5e                   	pop    esi
9f000b4e:	5d                   	pop    ebp
9f000b4f:	c3                   	ret    

9f000b50 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f000b50:	55                   	push   ebp
9f000b51:	89 e5                	mov    ebp,esp
9f000b53:	56                   	push   esi
9f000b54:	53                   	push   ebx
9f000b55:	83 ec 10             	sub    esp,0x10
9f000b58:	e8 76 32 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000b5d:	05 e7 54 00 00       	add    eax,0x54e7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f000b62:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f000b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b6c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000b6f:	b9 00 00 00 00       	mov    ecx,0x0
9f000b74:	ba 00 00 00 00       	mov    edx,0x0
9f000b79:	be 00 00 00 00       	mov    esi,0x0
9f000b7e:	e8 fc ff ff ff       	call   9f000b7f <do_syscall1+0x2f>
9f000b83:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f000b86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f000b89:	83 c4 10             	add    esp,0x10
9f000b8c:	5b                   	pop    ebx
9f000b8d:	5e                   	pop    esi
9f000b8e:	5d                   	pop    ebp
9f000b8f:	c3                   	ret    

9f000b90 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f000b90:	55                   	push   ebp
9f000b91:	89 e5                	mov    ebp,esp
9f000b93:	56                   	push   esi
9f000b94:	53                   	push   ebx
9f000b95:	83 ec 10             	sub    esp,0x10
9f000b98:	e8 36 32 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000b9d:	05 a7 54 00 00       	add    eax,0x54a7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f000ba2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f000ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000bac:	bb 00 00 00 00       	mov    ebx,0x0
9f000bb1:	b9 00 00 00 00       	mov    ecx,0x0
9f000bb6:	ba 00 00 00 00       	mov    edx,0x0
9f000bbb:	be 00 00 00 00       	mov    esi,0x0
9f000bc0:	e8 fc ff ff ff       	call   9f000bc1 <do_syscall0+0x31>
9f000bc5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f000bc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f000bcb:	83 c4 10             	add    esp,0x10
9f000bce:	5b                   	pop    ebx
9f000bcf:	5e                   	pop    esi
9f000bd0:	5d                   	pop    ebp
9f000bd1:	c3                   	ret    

9f000bd2 <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f000bd2:	55                   	push   ebp
9f000bd3:	89 e5                	mov    ebp,esp
9f000bd5:	53                   	push   ebx
9f000bd6:	83 ec 04             	sub    esp,0x4
9f000bd9:	e8 22 32 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000bde:	81 c3 66 54 00 00    	add    ebx,0x5466
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f000be4:	83 ec 08             	sub    esp,0x8
9f000be7:	8d 83 88 f9 ff ff    	lea    eax,[ebx-0x678]
9f000bed:	50                   	push   eax
9f000bee:	68 00 00 00 02       	push   0x2000000
9f000bf3:	e8 ed 01 00 00       	call   9f000de5 <printdI>
9f000bf8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f000bfb:	0f b6 83 54 00 00 00 	movzx  eax,BYTE PTR [ebx+0x54]
9f000c02:	83 f0 01             	xor    eax,0x1
9f000c05:	84 c0                	test   al,al
9f000c07:	74 70                	je     9f000c79 <libc_init+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f000c09:	e8 ee 0a 00 00       	call   9f0016fc <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f000c0e:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f000c11:	89 c2                	mov    edx,eax
9f000c13:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c19:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall0(SYSCALL_INVALID);
9f000c1b:	83 ec 0c             	sub    esp,0xc
9f000c1e:	6a 00                	push   0x0
9f000c20:	e8 6b ff ff ff       	call   9f000b90 <do_syscall0>
9f000c25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f000c28:	8d 83 4d ac ff ff    	lea    eax,[ebx-0x53b3]
9f000c2e:	83 ec 08             	sub    esp,0x8
9f000c31:	50                   	push   eax
9f000c32:	68 63 01 00 00       	push   0x163
9f000c37:	e8 14 ff ff ff       	call   9f000b50 <do_syscall1>
9f000c3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        libcInitialized = true;
9f000c3f:	c6 83 54 00 00 00 01 	mov    BYTE PTR [ebx+0x54],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        printBuffer = mallocI(0x1000);
9f000c46:	83 ec 0c             	sub    esp,0xc
9f000c49:	68 00 10 00 00       	push   0x1000
9f000c4e:	e8 f3 0b 00 00       	call   9f001846 <mallocI>
9f000c53:	83 c4 10             	add    esp,0x10
9f000c56:	89 c2                	mov    edx,eax
9f000c58:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000c5e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f000c60:	83 ec 08             	sub    esp,0x8
9f000c63:	8d 83 a0 f9 ff ff    	lea    eax,[ebx-0x660]
9f000c69:	50                   	push   eax
9f000c6a:	68 00 00 00 02       	push   0x2000000
9f000c6f:	e8 71 01 00 00       	call   9f000de5 <printdI>
9f000c74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f000c77:	eb 12                	jmp    9f000c8b <libc_init+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f000c79:	83 ec 0c             	sub    esp,0xc
9f000c7c:	8d 83 b8 f9 ff ff    	lea    eax,[ebx-0x648]
9f000c82:	50                   	push   eax
9f000c83:	e8 29 01 00 00       	call   9f000db1 <printI>
9f000c88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68
}
9f000c8b:	90                   	nop
9f000c8c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c8f:	c9                   	leave  
9f000c90:	c3                   	ret    

9f000c91 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71

void __attribute__((destructor)) libc_cleanup(void)
{
9f000c91:	55                   	push   ebp
9f000c92:	89 e5                	mov    ebp,esp
9f000c94:	53                   	push   ebx
9f000c95:	83 ec 04             	sub    esp,0x4
9f000c98:	e8 36 31 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000c9d:	05 a7 53 00 00       	add    eax,0x53a7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:72
    malloc_cleanup();
9f000ca2:	89 c3                	mov    ebx,eax
9f000ca4:	e8 54 0e 00 00       	call   9f001afd <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73
}
9f000ca9:	90                   	nop
9f000caa:	83 c4 04             	add    esp,0x4
9f000cad:	5b                   	pop    ebx
9f000cae:	5d                   	pop    ebp
9f000caf:	c3                   	ret    

9f000cb0 <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76

VISIBLE int print(const char *format, ...)
{
9f000cb0:	55                   	push   ebp
9f000cb1:	89 e5                	mov    ebp,esp
9f000cb3:	53                   	push   ebx
9f000cb4:	83 ec 14             	sub    esp,0x14
9f000cb7:	e8 44 31 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000cbc:	81 c3 88 53 00 00    	add    ebx,0x5388
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    va_list args;
    va_start( args, format );
9f000cc2:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000cc5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:80
    
    int size = vsprintf(printBuffer, format, args);
9f000cc8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000ccb:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000cd1:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cd3:	83 ec 04             	sub    esp,0x4
9f000cd6:	52                   	push   edx
9f000cd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cda:	50                   	push   eax
9f000cdb:	e8 bd 13 00 00       	call   9f00209d <vsprintf>
9f000ce0:	83 c4 10             	add    esp,0x10
9f000ce3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000ce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000ce9:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000cef:	8b 12                	mov    edx,DWORD PTR [edx]
9f000cf1:	50                   	push   eax
9f000cf2:	52                   	push   edx
9f000cf3:	6a 01                	push   0x1
9f000cf5:	6a 05                	push   0x5
9f000cf7:	e8 da fd ff ff       	call   9f000ad6 <do_syscall3>
9f000cfc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82
    return 0;
9f000cff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
}
9f000d04:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d07:	c9                   	leave  
9f000d08:	c3                   	ret    

9f000d09 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86

VISIBLE int printf(const char *format, ...)
{
9f000d09:	55                   	push   ebp
9f000d0a:	89 e5                	mov    ebp,esp
9f000d0c:	53                   	push   ebx
9f000d0d:	83 ec 14             	sub    esp,0x14
9f000d10:	e8 eb 30 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000d15:	81 c3 2f 53 00 00    	add    ebx,0x532f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:88
    va_list args;
    va_start( args, format );
9f000d1b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000d1e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90
    
    int size = vsprintf(printBuffer, format, args);
9f000d21:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000d24:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000d2a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d2c:	83 ec 04             	sub    esp,0x4
9f000d2f:	52                   	push   edx
9f000d30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d33:	50                   	push   eax
9f000d34:	e8 64 13 00 00       	call   9f00209d <vsprintf>
9f000d39:	83 c4 10             	add    esp,0x10
9f000d3c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000d3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000d42:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000d48:	8b 12                	mov    edx,DWORD PTR [edx]
9f000d4a:	50                   	push   eax
9f000d4b:	52                   	push   edx
9f000d4c:	6a 01                	push   0x1
9f000d4e:	6a 05                	push   0x5
9f000d50:	e8 81 fd ff ff       	call   9f000ad6 <do_syscall3>
9f000d55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
}
9f000d58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d5b:	c9                   	leave  
9f000d5c:	c3                   	ret    

9f000d5d <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95

int printfI(const char *format, ...)
{
9f000d5d:	55                   	push   ebp
9f000d5e:	89 e5                	mov    ebp,esp
9f000d60:	53                   	push   ebx
9f000d61:	83 ec 14             	sub    esp,0x14
9f000d64:	e8 97 30 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000d69:	81 c3 db 52 00 00    	add    ebx,0x52db
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97
    va_list args;
    va_start( args, format );
9f000d6f:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000d72:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:99
    
    int size = vsprintf(printBuffer, format, args);
9f000d75:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000d78:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000d7e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d80:	83 ec 04             	sub    esp,0x4
9f000d83:	52                   	push   edx
9f000d84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d87:	50                   	push   eax
9f000d88:	e8 10 13 00 00       	call   9f00209d <vsprintf>
9f000d8d:	83 c4 10             	add    esp,0x10
9f000d90:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000d93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000d96:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000d9c:	8b 12                	mov    edx,DWORD PTR [edx]
9f000d9e:	50                   	push   eax
9f000d9f:	52                   	push   edx
9f000da0:	6a 01                	push   0x1
9f000da2:	6a 05                	push   0x5
9f000da4:	e8 2d fd ff ff       	call   9f000ad6 <do_syscall3>
9f000da9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
}
9f000dac:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000daf:	c9                   	leave  
9f000db0:	c3                   	ret    

9f000db1 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104

int printI(const char *format, ...)
{
9f000db1:	55                   	push   ebp
9f000db2:	89 e5                	mov    ebp,esp
9f000db4:	83 ec 10             	sub    esp,0x10
9f000db7:	e8 17 30 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000dbc:	05 88 52 00 00       	add    eax,0x5288
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106
    va_list args;
    va_start( args, format );
9f000dc1:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000dc4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f000dc7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000dca:	89 c2                	mov    edx,eax
9f000dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000dcf:	52                   	push   edx
9f000dd0:	50                   	push   eax
9f000dd1:	68 00 03 00 00       	push   0x300
9f000dd6:	e8 37 fd ff ff       	call   9f000b12 <do_syscall2>
9f000ddb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
    return 0;
9f000dde:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
}
9f000de3:	c9                   	leave  
9f000de4:	c3                   	ret    

9f000de5 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f000de5:	55                   	push   ebp
9f000de6:	89 e5                	mov    ebp,esp
9f000de8:	83 ec 10             	sub    esp,0x10
9f000deb:	e8 e3 2f 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000df0:	05 54 52 00 00       	add    eax,0x5254
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:114
    va_list args;
    va_start( args, format );
9f000df5:	8d 45 10             	lea    eax,[ebp+0x10]
9f000df8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f000dfb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000dfe:	89 c2                	mov    edx,eax
9f000e00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000e03:	52                   	push   edx
9f000e04:	50                   	push   eax
9f000e05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e08:	68 01 03 00 00       	push   0x301
9f000e0d:	e8 c4 fc ff ff       	call   9f000ad6 <do_syscall3>
9f000e12:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    return 0;
9f000e15:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    va_end(args);
}
9f000e1a:	c9                   	leave  
9f000e1b:	c3                   	ret    

9f000e1c <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f000e1c:	55                   	push   ebp
9f000e1d:	89 e5                	mov    ebp,esp
9f000e1f:	56                   	push   esi
9f000e20:	53                   	push   ebx
9f000e21:	83 ec 10             	sub    esp,0x10
9f000e24:	e8 aa 2f 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000e29:	05 1b 52 00 00       	add    eax,0x521b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:123
    SLEEP_SECONDS(__seconds)
9f000e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000e31:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000e34:	b8 70 01 00 00       	mov    eax,0x170
9f000e39:	bb 00 00 00 00       	mov    ebx,0x0
9f000e3e:	b9 00 00 00 00       	mov    ecx,0x0
9f000e43:	ba 00 00 00 00       	mov    edx,0x0
9f000e48:	be 00 00 00 00       	mov    esi,0x0
9f000e4d:	e8 fc ff ff ff       	call   9f000e4e <sleep+0x32>
9f000e52:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000e58:	6b d0 64             	imul   edx,eax,0x64
9f000e5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000e5e:	01 d0                	add    eax,edx
9f000e60:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000e63:	b8 66 01 00 00       	mov    eax,0x166
9f000e68:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000e6b:	b9 00 00 00 00       	mov    ecx,0x0
9f000e70:	ba 00 00 00 00       	mov    edx,0x0
9f000e75:	be 00 00 00 00       	mov    esi,0x0
9f000e7a:	e8 fc ff ff ff       	call   9f000e7b <sleep+0x5f>
9f000e7f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
    return 0;
9f000e82:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
}
9f000e87:	83 c4 10             	add    esp,0x10
9f000e8a:	5b                   	pop    ebx
9f000e8b:	5e                   	pop    esi
9f000e8c:	5d                   	pop    ebp
9f000e8d:	c3                   	ret    

9f000e8e <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128

void stop()
{
9f000e8e:	55                   	push   ebp
9f000e8f:	89 e5                	mov    ebp,esp
9f000e91:	e8 3d 2f 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000e96:	05 ae 51 00 00       	add    eax,0x51ae
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    do_syscall0(SYSCALL_STOP);
9f000e9b:	68 68 01 00 00       	push   0x168
9f000ea0:	e8 eb fc ff ff       	call   9f000b90 <do_syscall0>
9f000ea5:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
}
9f000ea8:	90                   	nop
9f000ea9:	c9                   	leave  
9f000eaa:	c3                   	ret    

9f000eab <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f000eab:	55                   	push   ebp
9f000eac:	89 e5                	mov    ebp,esp
9f000eae:	e8 20 2f 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000eb3:	05 91 51 00 00       	add    eax,0x5191
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f000eb8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000ebb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000ec1:	51                   	push   ecx
9f000ec2:	52                   	push   edx
9f000ec3:	50                   	push   eax
9f000ec4:	68 67 01 00 00       	push   0x167
9f000ec9:	e8 08 fc ff ff       	call   9f000ad6 <do_syscall3>
9f000ece:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
}
9f000ed1:	90                   	nop
9f000ed2:	c9                   	leave  
9f000ed3:	c3                   	ret    

9f000ed4 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138

VISIBLE int fork()
{
9f000ed4:	55                   	push   ebp
9f000ed5:	89 e5                	mov    ebp,esp
9f000ed7:	83 ec 10             	sub    esp,0x10
9f000eda:	e8 f4 2e 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000edf:	05 65 51 00 00       	add    eax,0x5165
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139
    uint32_t retVal = 0;
9f000ee4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f000eeb:	b8 06 00 00 00       	mov    eax,0x6
9f000ef0:	e8 fc ff ff ff       	call   9f000ef1 <fork+0x1d>
9f000ef5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return retVal;
9f000ef8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f000efb:	c9                   	leave  
9f000efc:	c3                   	ret    

9f000efd <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE int exec(char* path, int argc, char** argv)
{
9f000efd:	55                   	push   ebp
9f000efe:	89 e5                	mov    ebp,esp
9f000f00:	83 ec 10             	sub    esp,0x10
9f000f03:	e8 cb 2e 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f000f08:	05 3c 51 00 00       	add    eax,0x513c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    int pid=0;
9f000f0d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f000f14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f17:	8d 80 de f9 ff ff    	lea    eax,[eax-0x622]
9f000f1d:	50                   	push   eax
9f000f1e:	68 00 00 00 02       	push   0x2000000
9f000f23:	e8 bd fe ff ff       	call   9f000de5 <printdI>
9f000f28:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f000f2b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000f2e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f34:	51                   	push   ecx
9f000f35:	52                   	push   edx
9f000f36:	50                   	push   eax
9f000f37:	6a 59                	push   0x59
9f000f39:	e8 98 fb ff ff       	call   9f000ad6 <do_syscall3>
9f000f3e:	83 c4 10             	add    esp,0x10
9f000f41:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:150
    return pid;
9f000f44:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
}
9f000f47:	c9                   	leave  
9f000f48:	c3                   	ret    

9f000f49 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154

VISIBLE int execb(char* path)
{
9f000f49:	55                   	push   ebp
9f000f4a:	89 e5                	mov    ebp,esp
9f000f4c:	53                   	push   ebx
9f000f4d:	83 ec 24             	sub    esp,0x24
9f000f50:	e8 ab 2e 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f000f55:	81 c3 ef 50 00 00    	add    ebx,0x50ef
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:155
    int pid=0, argc=0;
9f000f5b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f000f62:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f000f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f6c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f72:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
    char* program;
    program=mallocI(512);
9f000f75:	83 ec 0c             	sub    esp,0xc
9f000f78:	68 00 02 00 00       	push   0x200
9f000f7d:	e8 c4 08 00 00       	call   9f001846 <mallocI>
9f000f82:	83 c4 10             	add    esp,0x10
9f000f85:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f000f88:	83 ec 08             	sub    esp,0x8
9f000f8b:	8d 83 f1 f9 ff ff    	lea    eax,[ebx-0x60f]
9f000f91:	50                   	push   eax
9f000f92:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f000f95:	e8 94 20 00 00       	call   9f00302e <strstrI>
9f000f9a:	83 c4 10             	add    esp,0x10
9f000f9d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
        if (argc==0)
9f000fa0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000fa4:	75 44                	jne    9f000fea <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
        {
            if (spacePtr==0)
9f000fa6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000faa:	75 22                	jne    9f000fce <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
                strncpyI(program, path, strlenI(path));
9f000fac:	83 ec 0c             	sub    esp,0xc
9f000faf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fb2:	e8 85 18 00 00       	call   9f00283c <strlenI>
9f000fb7:	83 c4 10             	add    esp,0x10
9f000fba:	83 ec 04             	sub    esp,0x4
9f000fbd:	50                   	push   eax
9f000fbe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fc1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000fc4:	e8 e7 19 00 00       	call   9f0029b0 <strncpyI>
9f000fc9:	83 c4 10             	add    esp,0x10
9f000fcc:	eb 1c                	jmp    9f000fea <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
            else
                strncpyI(program, path, spacePtr-path);
9f000fce:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fd4:	29 c2                	sub    edx,eax
9f000fd6:	89 d0                	mov    eax,edx
9f000fd8:	83 ec 04             	sub    esp,0x4
9f000fdb:	50                   	push   eax
9f000fdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fdf:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000fe2:	e8 c9 19 00 00       	call   9f0029b0 <strncpyI>
9f000fe7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170
        }
        argc++;
9f000fea:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
            
    } while (spacePtr++);
9f000fee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000ff1:	8d 50 01             	lea    edx,[eax+0x1]
9f000ff4:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f000ff7:	85 c0                	test   eax,eax
9f000ff9:	75 8d                	jne    9f000f88 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
    
    argv=mallocI((argc*50)+(argc*4));
9f000ffb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000ffe:	6b c0 36             	imul   eax,eax,0x36
9f001001:	83 ec 0c             	sub    esp,0xc
9f001004:	50                   	push   eax
9f001005:	e8 3c 08 00 00       	call   9f001846 <mallocI>
9f00100a:	83 c4 10             	add    esp,0x10
9f00100d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    int argvPtr=4*argc;
9f001010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001013:	c1 e0 02             	shl    eax,0x2
9f001016:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
    spacePtr=path;
9f001019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00101c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    for (int cnt=0;cnt<argc; cnt++)
9f00101f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001026:	e9 c8 00 00 00       	jmp    9f0010f3 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179
    {
        argv[cnt]=(char*)argv+argvPtr;
9f00102b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00102e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001035:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001038:	01 d0                	add    eax,edx
9f00103a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f00103d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001040:	01 ca                	add    edx,ecx
9f001042:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
        spacePtr=strstrI(spacePtr," ");
9f001044:	83 ec 08             	sub    esp,0x8
9f001047:	8d 83 f1 f9 ff ff    	lea    eax,[ebx-0x60f]
9f00104d:	50                   	push   eax
9f00104e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001051:	e8 d8 1f 00 00       	call   9f00302e <strstrI>
9f001056:	83 c4 10             	add    esp,0x10
9f001059:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
        if (spacePtr)
9f00105c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001060:	74 2f                	je     9f001091 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001062:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001065:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001068:	29 c2                	sub    edx,eax
9f00106a:	89 d0                	mov    eax,edx
9f00106c:	89 c1                	mov    ecx,eax
9f00106e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001071:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001078:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00107b:	01 d0                	add    eax,edx
9f00107d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00107f:	83 ec 04             	sub    esp,0x4
9f001082:	51                   	push   ecx
9f001083:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001086:	50                   	push   eax
9f001087:	e8 24 19 00 00       	call   9f0029b0 <strncpyI>
9f00108c:	83 c4 10             	add    esp,0x10
9f00108f:	eb 31                	jmp    9f0010c2 <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001091:	83 ec 0c             	sub    esp,0xc
9f001094:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001097:	e8 a0 17 00 00       	call   9f00283c <strlenI>
9f00109c:	83 c4 10             	add    esp,0x10
9f00109f:	89 c2                	mov    edx,eax
9f0010a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010a4:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f0010ab:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0010ae:	01 c8                	add    eax,ecx
9f0010b0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010b2:	83 ec 04             	sub    esp,0x4
9f0010b5:	52                   	push   edx
9f0010b6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0010b9:	50                   	push   eax
9f0010ba:	e8 f1 18 00 00       	call   9f0029b0 <strncpyI>
9f0010bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185 (discriminator 2)
        strtrimI(argv[cnt]);
9f0010c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010c5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0010cc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0010cf:	01 d0                	add    eax,edx
9f0010d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010d3:	83 ec 0c             	sub    esp,0xc
9f0010d6:	50                   	push   eax
9f0010d7:	e8 90 1c 00 00       	call   9f002d6c <strtrimI>
9f0010dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f0010df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010e2:	8d 50 01             	lea    edx,[eax+0x1]
9f0010e5:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0010e8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187 (discriminator 2)
        argvPtr+=50;
9f0010eb:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f0010ef:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177 (discriminator 1)
9f0010f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010f6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0010f9:	0f 8c 2c ff ff ff    	jl     9f00102b <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f0010ff:	83 ec 04             	sub    esp,0x4
9f001102:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001105:	8d 83 f3 f9 ff ff    	lea    eax,[ebx-0x60d]
9f00110b:	50                   	push   eax
9f00110c:	68 00 00 00 02       	push   0x2000000
9f001111:	e8 cf fc ff ff       	call   9f000de5 <printdI>
9f001116:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001119:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f00111c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00111f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001122:	51                   	push   ecx
9f001123:	52                   	push   edx
9f001124:	50                   	push   eax
9f001125:	68 05 03 00 00       	push   0x305
9f00112a:	e8 a7 f9 ff ff       	call   9f000ad6 <do_syscall3>
9f00112f:	83 c4 10             	add    esp,0x10
9f001132:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001135:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
    freeI(argv);
    freeI(program);
}
9f001138:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00113b:	c9                   	leave  
9f00113c:	c3                   	ret    

9f00113d <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200

VISIBLE int execa(char* path, int argc, char** argv)
{
9f00113d:	55                   	push   ebp
9f00113e:	89 e5                	mov    ebp,esp
9f001140:	83 ec 10             	sub    esp,0x10
9f001143:	e8 8b 2c 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001148:	05 fc 4e 00 00       	add    eax,0x4efc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    int pid=0;
9f00114d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001154:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001157:	8d 80 07 fa ff ff    	lea    eax,[eax-0x5f9]
9f00115d:	50                   	push   eax
9f00115e:	68 00 00 00 02       	push   0x2000000
9f001163:	e8 7d fc ff ff       	call   9f000de5 <printdI>
9f001168:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:203
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f00116b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00116e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001174:	51                   	push   ecx
9f001175:	52                   	push   edx
9f001176:	50                   	push   eax
9f001177:	68 05 03 00 00       	push   0x305
9f00117c:	e8 55 f9 ff ff       	call   9f000ad6 <do_syscall3>
9f001181:	83 c4 10             	add    esp,0x10
9f001184:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
    return pid;
9f001187:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
}
9f00118a:	c9                   	leave  
9f00118b:	c3                   	ret    

9f00118c <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208

VISIBLE int waitpid(uint32_t pid)
{
9f00118c:	55                   	push   ebp
9f00118d:	89 e5                	mov    ebp,esp
9f00118f:	e8 3f 2c 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001194:	05 b0 4e 00 00       	add    eax,0x4eb0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001199:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00119c:	6a 61                	push   0x61
9f00119e:	e8 ad f9 ff ff       	call   9f000b50 <do_syscall1>
9f0011a3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210
}
9f0011a6:	c9                   	leave  
9f0011a7:	c3                   	ret    

9f0011a8 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214


VISIBLE void exit (int status)
{
9f0011a8:	55                   	push   ebp
9f0011a9:	89 e5                	mov    ebp,esp
9f0011ab:	e8 23 2c 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0011b0:	05 94 4e 00 00       	add    eax,0x4e94
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f0011b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011b8:	50                   	push   eax
9f0011b9:	6a 00                	push   0x0
9f0011bb:	6a 01                	push   0x1
9f0011bd:	e8 50 f9 ff ff       	call   9f000b12 <do_syscall2>
9f0011c2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:216
}
9f0011c5:	90                   	nop
9f0011c6:	c9                   	leave  
9f0011c7:	c3                   	ret    

9f0011c8 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:220


VISIBLE char* getcwd(char* buf, size_t size)
{
9f0011c8:	55                   	push   ebp
9f0011c9:	89 e5                	mov    ebp,esp
9f0011cb:	e8 03 2c 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0011d0:	05 74 4e 00 00       	add    eax,0x4e74
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0011d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011d8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0011db:	50                   	push   eax
9f0011dc:	6a 4f                	push   0x4f
9f0011de:	e8 2f f9 ff ff       	call   9f000b12 <do_syscall2>
9f0011e3:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
}
9f0011e6:	c9                   	leave  
9f0011e7:	c3                   	ret    

9f0011e8 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226


size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f0011e8:	55                   	push   ebp
9f0011e9:	89 e5                	mov    ebp,esp
9f0011eb:	83 ec 20             	sub    esp,0x20
9f0011ee:	e8 e0 2b 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0011f3:	05 51 4e 00 00       	add    eax,0x4e51
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:229
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f0011f8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230
    size_t argc = 0;
9f0011ff:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001209:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f00120c:	e9 d8 00 00 00       	jmp    9f0012e9 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
        c = (unsigned char) *p;
9f001211:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001214:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001217:	0f b6 c0             	movzx  eax,al
9f00121a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
        switch (state) {
9f00121d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001220:	83 f8 01             	cmp    eax,0x1
9f001223:	74 7e                	je     9f0012a3 <splitI+0xbb>
9f001225:	83 f8 01             	cmp    eax,0x1
9f001228:	72 0a                	jb     9f001234 <splitI+0x4c>
9f00122a:	83 f8 02             	cmp    eax,0x2
9f00122d:	74 45                	je     9f001274 <splitI+0x8c>
9f00122f:	e9 b1 00 00 00       	jmp    9f0012e5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:236
        case DULL:
            if (ISSPACE(c)) {
9f001234:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001238:	0f 94 c0             	sete   al
9f00123b:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f00123e:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001242:	84 c0                	test   al,al
9f001244:	0f 85 94 00 00 00    	jne    9f0012de <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
                continue;
            }

            if (c == '"') {
9f00124a:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f00124e:	75 15                	jne    9f001265 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:241
                state = IN_STRING;
9f001250:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242
                start_of_word = p + 1; 
9f001257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00125a:	83 c0 01             	add    eax,0x1
9f00125d:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:243
                continue;
9f001260:	e9 80 00 00 00       	jmp    9f0012e5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
            }
            state = IN_WORD;
9f001265:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
            start_of_word = p;
9f00126c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00126f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:247
            continue;
9f001272:	eb 71                	jmp    9f0012e5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250

        case IN_STRING:
            if (c == '"') {
9f001274:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001278:	75 67                	jne    9f0012e1 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251
                *p = 0;
9f00127a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00127d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
                argv[argc++] = start_of_word;
9f001280:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001283:	8d 50 01             	lea    edx,[eax+0x1]
9f001286:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001289:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001290:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001293:	01 c2                	add    edx,eax
9f001295:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001298:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
                state = DULL;
9f00129a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            }
            continue;
9f0012a1:	eb 3e                	jmp    9f0012e1 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258

        case IN_WORD:
            if (ISSPACE(c)) {
9f0012a3:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f0012a7:	0f 94 c0             	sete   al
9f0012aa:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f0012ad:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f0012b1:	84 c0                	test   al,al
9f0012b3:	74 2f                	je     9f0012e4 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
                *p = 0;
9f0012b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0012b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
                argv[argc++] = start_of_word;
9f0012bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0012be:	8d 50 01             	lea    edx,[eax+0x1]
9f0012c1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0012c4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0012cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0012ce:	01 c2                	add    edx,eax
9f0012d0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0012d3:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
                state = DULL;
9f0012d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
            }
            continue;
9f0012dc:	eb 06                	jmp    9f0012e4 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f0012de:	90                   	nop
9f0012df:	eb 04                	jmp    9f0012e5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0012e1:	90                   	nop
9f0012e2:	eb 01                	jmp    9f0012e5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0012e4:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f0012e5:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232 (discriminator 1)
9f0012e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0012ec:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0012ef:	73 0e                	jae    9f0012ff <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232 (discriminator 3)
9f0012f1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0012f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0012f7:	84 c0                	test   al,al
9f0012f9:	0f 85 12 ff ff ff    	jne    9f001211 <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f0012ff:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001303:	74 22                	je     9f001327 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267 (discriminator 1)
9f001305:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001308:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f00130b:	73 1a                	jae    9f001327 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
        argv[argc++] = start_of_word;
9f00130d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001310:	8d 50 01             	lea    edx,[eax+0x1]
9f001313:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001316:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00131d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001320:	01 c2                	add    edx,eax
9f001322:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001325:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:270

    return argc;
9f001327:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
}
9f00132a:	c9                   	leave  
9f00132b:	c3                   	ret    

9f00132c <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f00132c:	55                   	push   ebp
9f00132d:	89 e5                	mov    ebp,esp
9f00132f:	e8 9f 2a 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001334:	05 10 4d 00 00       	add    eax,0x4d10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
    return splitI(buffer, argv, argv_size);
9f001339:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00133c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00133f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001342:	e8 a1 fe ff ff       	call   9f0011e8 <splitI>
9f001347:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
}
9f00134a:	c9                   	leave  
9f00134b:	c3                   	ret    

9f00134c <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f00134c:	55                   	push   ebp
9f00134d:	89 e5                	mov    ebp,esp
9f00134f:	56                   	push   esi
9f001350:	53                   	push   ebx
9f001351:	81 ec 30 04 00 00    	sub    esp,0x430
9f001357:	e8 a4 2a 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f00135c:	81 c3 e8 4c 00 00    	add    ebx,0x4ce8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001362:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001368:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00136b:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001371:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001374:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f00137a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
    char dblquote[2] = {'"',0};
9f00137d:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001384:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
    *argc = 0;
9f00138b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00138e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
    
    strncpyI(cmd,cmdline,1024);
9f001394:	83 ec 04             	sub    esp,0x4
9f001397:	68 00 04 00 00       	push   0x400
9f00139c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00139f:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f0013a5:	50                   	push   eax
9f0013a6:	e8 05 16 00 00       	call   9f0029b0 <strncpyI>
9f0013ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
    strtrimI(cmd);
9f0013ae:	83 ec 0c             	sub    esp,0xc
9f0013b1:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f0013b7:	50                   	push   eax
9f0013b8:	e8 af 19 00 00       	call   9f002d6c <strtrimI>
9f0013bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f0013c0:	83 ec 04             	sub    esp,0x4
9f0013c3:	68 a0 0f 00 00       	push   0xfa0
9f0013c8:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f0013ce:	50                   	push   eax
9f0013cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0013d2:	e8 b9 1b 00 00       	call   9f002f90 <strnstrI>
9f0013d7:	83 c4 10             	add    esp,0x10
9f0013da:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
        spacePtr=strstrI(spacePtr," ");
9f0013dd:	83 ec 08             	sub    esp,0x8
9f0013e0:	8d 83 f1 f9 ff ff    	lea    eax,[ebx-0x60f]
9f0013e6:	50                   	push   eax
9f0013e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0013ea:	e8 3f 1c 00 00       	call   9f00302e <strstrI>
9f0013ef:	83 c4 10             	add    esp,0x10
9f0013f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f0013f5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0013f9:	74 48                	je     9f001443 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292 (discriminator 1)
9f0013fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0013fe:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001401:	77 40                	ja     9f001443 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:294
        {
            char *temp = spacePtr;
9f001403:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001406:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001409:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00140c:	8d 50 01             	lea    edx,[eax+0x1]
9f00140f:	83 ec 04             	sub    esp,0x4
9f001412:	68 a0 0f 00 00       	push   0xfa0
9f001417:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f00141d:	50                   	push   eax
9f00141e:	52                   	push   edx
9f00141f:	e8 6c 1b 00 00       	call   9f002f90 <strnstrI>
9f001424:	83 c4 10             	add    esp,0x10
9f001427:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296
            if (spacePtr>=quotePtr+4000)
9f00142a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00142d:	05 a0 0f 00 00       	add    eax,0xfa0
9f001432:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001435:	77 08                	ja     9f00143f <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001437:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f00143a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00143d:	eb 04                	jmp    9f001443 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
            else
                spacePtr += 1;                              //Skip the closing quote
9f00143f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:301
        }
        *argc+=1;
9f001443:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001446:	8b 00                	mov    eax,DWORD PTR [eax]
9f001448:	8d 50 01             	lea    edx,[eax+0x1]
9f00144b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00144e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
        if (spacePtr!=0 && *spacePtr)
9f001450:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001454:	74 0e                	je     9f001464 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302 (discriminator 1)
9f001456:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001459:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00145c:	84 c0                	test   al,al
9f00145e:	74 04                	je     9f001464 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
            spacePtr++;
9f001460:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305
    
    } while (spacePtr!=0 && *spacePtr);
9f001464:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001468:	74 0e                	je     9f001478 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305 (discriminator 1)
9f00146a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00146d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001470:	84 c0                	test   al,al
9f001472:	0f 85 48 ff ff ff    	jne    9f0013c0 <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001478:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00147b:	8b 10                	mov    edx,DWORD PTR [eax]
9f00147d:	89 d0                	mov    eax,edx
9f00147f:	c1 e0 08             	shl    eax,0x8
9f001482:	29 d0                	sub    eax,edx
9f001484:	89 c2                	mov    edx,eax
9f001486:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001489:	8b 00                	mov    eax,DWORD PTR [eax]
9f00148b:	c1 e0 02             	shl    eax,0x2
9f00148e:	01 d0                	add    eax,edx
9f001490:	83 ec 0c             	sub    esp,0xc
9f001493:	50                   	push   eax
9f001494:	e8 ad 03 00 00       	call   9f001846 <mallocI>
9f001499:	83 c4 10             	add    esp,0x10
9f00149c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308
    int argvPtr=4* *argc;
9f00149f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0014a2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0014a4:	c1 e0 02             	shl    eax,0x2
9f0014a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:309
    spacePtr=cmd;
9f0014aa:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f0014b0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
    for (int cnt=0;cnt<*argc; cnt++)
9f0014b3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f0014ba:	e9 72 01 00 00       	jmp    9f001631 <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
    {
        argv[cnt]=(char*)argv+argvPtr;
9f0014bf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0014c2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0014c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0014cc:	01 d0                	add    eax,edx
9f0014ce:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f0014d1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f0014d4:	01 ca                	add    edx,ecx
9f0014d6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f0014d8:	83 ec 04             	sub    esp,0x4
9f0014db:	68 a0 0f 00 00       	push   0xfa0
9f0014e0:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f0014e6:	50                   	push   eax
9f0014e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0014ea:	e8 a1 1a 00 00       	call   9f002f90 <strnstrI>
9f0014ef:	83 c4 10             	add    esp,0x10
9f0014f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f0014f5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0014f9:	0f 84 80 00 00 00    	je     9f00157f <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314 (discriminator 1)
9f0014ff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001502:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001505:	77 78                	ja     9f00157f <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:316
        {
            char *temp = spacePtr;
9f001507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00150a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f00150d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001510:	8d 50 01             	lea    edx,[eax+0x1]
9f001513:	83 ec 04             	sub    esp,0x4
9f001516:	68 a0 0f 00 00       	push   0xfa0
9f00151b:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001521:	50                   	push   eax
9f001522:	52                   	push   edx
9f001523:	e8 68 1a 00 00       	call   9f002f90 <strnstrI>
9f001528:	83 c4 10             	add    esp,0x10
9f00152b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
            if (spacePtr>=quotePtr+4000)
9f00152e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001531:	05 a0 0f 00 00       	add    eax,0xfa0
9f001536:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001539:	77 0b                	ja     9f001546 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f00153b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00153e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001541:	e9 d4 00 00 00       	jmp    9f00161a <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:322
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001546:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001549:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00154c:	29 c2                	sub    edx,eax
9f00154e:	89 d0                	mov    eax,edx
9f001550:	83 e8 02             	sub    eax,0x2
9f001553:	89 c6                	mov    esi,eax
9f001555:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001558:	8d 50 01             	lea    edx,[eax+0x1]
9f00155b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00155e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001565:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001568:	01 c8                	add    eax,ecx
9f00156a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00156c:	83 ec 04             	sub    esp,0x4
9f00156f:	56                   	push   esi
9f001570:	52                   	push   edx
9f001571:	50                   	push   eax
9f001572:	e8 39 14 00 00       	call   9f0029b0 <strncpyI>
9f001577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f00157a:	e9 9b 00 00 00       	jmp    9f00161a <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:327
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f00157f:	83 ec 08             	sub    esp,0x8
9f001582:	8d 83 f1 f9 ff ff    	lea    eax,[ebx-0x60f]
9f001588:	50                   	push   eax
9f001589:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00158c:	e8 9d 1a 00 00       	call   9f00302e <strstrI>
9f001591:	83 c4 10             	add    esp,0x10
9f001594:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
            if (spacePtr)
9f001597:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00159b:	74 2f                	je     9f0015cc <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f00159d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0015a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0015a3:	29 c2                	sub    edx,eax
9f0015a5:	89 d0                	mov    eax,edx
9f0015a7:	89 c1                	mov    ecx,eax
9f0015a9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0015ac:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0015b3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0015b6:	01 d0                	add    eax,edx
9f0015b8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015ba:	83 ec 04             	sub    esp,0x4
9f0015bd:	51                   	push   ecx
9f0015be:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0015c1:	50                   	push   eax
9f0015c2:	e8 e9 13 00 00       	call   9f0029b0 <strncpyI>
9f0015c7:	83 c4 10             	add    esp,0x10
9f0015ca:	eb 31                	jmp    9f0015fd <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f0015cc:	83 ec 0c             	sub    esp,0xc
9f0015cf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0015d2:	e8 65 12 00 00       	call   9f00283c <strlenI>
9f0015d7:	83 c4 10             	add    esp,0x10
9f0015da:	89 c2                	mov    edx,eax
9f0015dc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0015df:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f0015e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0015e9:	01 c8                	add    eax,ecx
9f0015eb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015ed:	83 ec 04             	sub    esp,0x4
9f0015f0:	52                   	push   edx
9f0015f1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0015f4:	50                   	push   eax
9f0015f5:	e8 b6 13 00 00       	call   9f0029b0 <strncpyI>
9f0015fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
            strtrimI(argv[cnt]);
9f0015fd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001600:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001607:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00160a:	01 d0                	add    eax,edx
9f00160c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00160e:	83 ec 0c             	sub    esp,0xc
9f001611:	50                   	push   eax
9f001612:	e8 55 17 00 00       	call   9f002d6c <strtrimI>
9f001617:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:334 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f00161a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00161d:	8d 50 01             	lea    edx,[eax+0x1]
9f001620:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001623:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001626:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f00162d:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310 (discriminator 1)
9f001631:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001634:	8b 00                	mov    eax,DWORD PTR [eax]
9f001636:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001639:	0f 8f 80 fe ff ff    	jg     9f0014bf <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f00163f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
}
9f001642:	8d 65 f8             	lea    esp,[ebp-0x8]
9f001645:	5b                   	pop    ebx
9f001646:	5e                   	pop    esi
9f001647:	5d                   	pop    ebp
9f001648:	c3                   	ret    

9f001649 <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:341

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f001649:	55                   	push   ebp
9f00164a:	89 e5                	mov    ebp,esp
9f00164c:	83 ec 08             	sub    esp,0x8
9f00164f:	e8 7f 27 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001654:	05 f0 49 00 00       	add    eax,0x49f0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342
    return cmdlineToArgvI(cmdline, argc);
9f001659:	83 ec 08             	sub    esp,0x8
9f00165c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00165f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001662:	e8 e5 fc ff ff       	call   9f00134c <cmdlineToArgvI>
9f001667:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
}
9f00166a:	c9                   	leave  
9f00166b:	c3                   	ret    

9f00166c <test>:
test():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:346

VISIBLE int test()
{
9f00166c:	55                   	push   ebp
9f00166d:	89 e5                	mov    ebp,esp
9f00166f:	e8 5f 27 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001674:	05 d0 49 00 00       	add    eax,0x49d0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347
    return do_syscall0(0);
9f001679:	6a 00                	push   0x0
9f00167b:	e8 10 f5 ff ff       	call   9f000b90 <do_syscall0>
9f001680:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:348
9f001683:	c9                   	leave  
9f001684:	c3                   	ret    
9f001685:	66 90                	xchg   ax,ax
9f001687:	90                   	nop

9f001688 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f001688:	55                   	push   ebp
9f001689:	89 e5                	mov    ebp,esp
9f00168b:	53                   	push   ebx
9f00168c:	83 ec 04             	sub    esp,0x4
9f00168f:	e8 3f 27 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001694:	05 b0 49 00 00       	add    eax,0x49b0
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f001699:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f00169f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0016a2:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f0016a4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0016a7:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016ad:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f0016b0:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016b6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0016b9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f0016bc:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f0016c5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f0016c8:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016ce:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f0016d1:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f0016d4:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016da:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f0016dd:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f0016e0:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016e6:	83 ec 08             	sub    esp,0x8
9f0016e9:	52                   	push   edx
9f0016ea:	6a 08                	push   0x8
9f0016ec:	89 c3                	mov    ebx,eax
9f0016ee:	e8 5d f4 ff ff       	call   9f000b50 <do_syscall1>
9f0016f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f0016f6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0016f9:	c9                   	leave  
9f0016fa:	c3                   	ret    
9f0016fb:	90                   	nop

9f0016fc <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
#include "config.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
9f0016fc:	55                   	push   ebp
9f0016fd:	89 e5                	mov    ebp,esp
9f0016ff:	53                   	push   ebx
9f001700:	83 ec 04             	sub    esp,0x4
9f001703:	e8 f8 26 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f001708:	81 c3 3c 49 00 00    	add    ebx,0x493c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f00170e:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001714:	8b 00                	mov    eax,DWORD PTR [eax]
9f001716:	50                   	push   eax
9f001717:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00171d:	50                   	push   eax
9f00171e:	8d 83 1c fa ff ff    	lea    eax,[ebx-0x5e4]
9f001724:	50                   	push   eax
9f001725:	68 00 00 00 01       	push   0x1000000
9f00172a:	e8 b6 f6 ff ff       	call   9f000de5 <printdI>
9f00172f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapBase=0;
9f001732:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001738:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapCurr=0;
9f00173e:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001744:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    heapEnd=0;
9f00174a:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001750:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:19
    libcTZ=-5;
9f001756:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00175c:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:21

}
9f001762:	90                   	nop
9f001763:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001766:	c9                   	leave  
9f001767:	c3                   	ret    

9f001768 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001768:	55                   	push   ebp
9f001769:	89 e5                	mov    ebp,esp
9f00176b:	83 ec 10             	sub    esp,0x10
9f00176e:	e8 60 26 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001773:	05 d1 48 00 00       	add    eax,0x48d1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:27
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f001778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00177b:	83 c2 20             	add    edx,0x20
9f00177e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:29
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f001781:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f001787:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f001789:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00178c:	01 d1                	add    ecx,edx
9f00178e:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f001794:	8b 12                	mov    edx,DWORD PTR [edx]
9f001796:	39 d1                	cmp    ecx,edx
9f001798:	76 4e                	jbe    9f0017e8 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f00179a:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f0017a0:	8b 12                	mov    edx,DWORD PTR [edx]
9f0017a2:	8b 80 e4 ff ff ff    	mov    eax,DWORD PTR [eax-0x1c]
9f0017a8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0017aa:	29 c2                	sub    edx,eax
9f0017ac:	89 d0                	mov    eax,edx
9f0017ae:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33
        if (newSize== 0 || newSize%PAGE_SIZE)
9f0017b1:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f0017b5:	74 0c                	je     9f0017c3 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33 (discriminator 1)
9f0017b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017ba:	25 ff 0f 00 00       	and    eax,0xfff
9f0017bf:	85 c0                	test   eax,eax
9f0017c1:	74 10                	je     9f0017d3 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0017c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017c6:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0017cb:	05 00 10 00 00       	add    eax,0x1000
9f0017d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f0017d3:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
9f0017da:	77 07                	ja     9f0017e3 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
            return ALLOC_REQUEST_SIZE;
9f0017dc:	b8 00 20 03 00       	mov    eax,0x32000
9f0017e1:	eb 0a                	jmp    9f0017ed <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:41
        else
            return newSize;
9f0017e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017e6:	eb 05                	jmp    9f0017ed <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
    }
    else
        return 0;
9f0017e8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
}
9f0017ed:	c9                   	leave  
9f0017ee:	c3                   	ret    

9f0017ef <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48

void freeI(void* fpointer)
{
9f0017ef:	55                   	push   ebp
9f0017f0:	89 e5                	mov    ebp,esp
9f0017f2:	83 ec 10             	sub    esp,0x10
9f0017f5:	e8 d9 25 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0017fa:	05 4a 48 00 00       	add    eax,0x484a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer < heapBase || fpointer > heapCurr)
9f0017ff:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
9f001805:	8b 12                	mov    edx,DWORD PTR [edx]
9f001807:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
9f00180a:	72 31                	jb     9f00183d <freeI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51 (discriminator 1)
9f00180c:	8b 80 f0 ff ff ff    	mov    eax,DWORD PTR [eax-0x10]
9f001812:	8b 00                	mov    eax,DWORD PTR [eax]
9f001814:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
9f001817:	77 24                	ja     9f00183d <freeI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:54
        return;
    
    if (fpointer==NULL)
9f001819:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f00181d:	74 21                	je     9f001840 <freeI+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:56
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f00181f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001822:	83 e8 10             	sub    eax,0x10
9f001825:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f001828:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00182b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00182d:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
9f001832:	75 0f                	jne    9f001843 <freeI+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:64
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
    }
    mp->inUse=false;
9f001834:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001837:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f00183b:	eb 07                	jmp    9f001844 <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer < heapBase || fpointer > heapCurr)
        return;
9f00183d:	90                   	nop
9f00183e:	eb 04                	jmp    9f001844 <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f001840:	90                   	nop
9f001841:	eb 01                	jmp    9f001844 <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
9f001843:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65
    }
    mp->inUse=false;
}
9f001844:	c9                   	leave  
9f001845:	c3                   	ret    

9f001846 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68

void*  mallocI(size_t size)
{
9f001846:	55                   	push   ebp
9f001847:	89 e5                	mov    ebp,esp
9f001849:	53                   	push   ebx
9f00184a:	83 ec 24             	sub    esp,0x24
9f00184d:	e8 ae 25 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f001852:	81 c3 f2 47 00 00    	add    ebx,0x47f2
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
9f001858:	83 ec 04             	sub    esp,0x4
9f00185b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00185e:	8d 83 3f fa ff ff    	lea    eax,[ebx-0x5c1]
9f001864:	50                   	push   eax
9f001865:	68 00 00 00 01       	push   0x1000000
9f00186a:	e8 76 f5 ff ff       	call   9f000de5 <printdI>
9f00186f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
    needed = newHeapRequiredToFulfillRequest(size);
9f001872:	83 ec 0c             	sub    esp,0xc
9f001875:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001878:	e8 eb fe ff ff       	call   9f001768 <newHeapRequiredToFulfillRequest>
9f00187d:	83 c4 10             	add    esp,0x10
9f001880:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f001883:	83 ec 04             	sub    esp,0x4
9f001886:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001889:	8d 83 4f fa ff ff    	lea    eax,[ebx-0x5b1]
9f00188f:	50                   	push   eax
9f001890:	68 00 00 00 01       	push   0x1000000
9f001895:	e8 4b f5 ff ff       	call   9f000de5 <printdI>
9f00189a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
    if (needed!=0)      //New heap required
9f00189d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0018a1:	0f 84 ae 00 00 00    	je     9f001955 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
9f0018a7:	83 ec 08             	sub    esp,0x8
9f0018aa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0018ad:	68 65 01 00 00       	push   0x165
9f0018b2:	e8 99 f2 ff ff       	call   9f000b50 <do_syscall1>
9f0018b7:	83 c4 10             	add    esp,0x10
9f0018ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0018bd:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0018c3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0018c5:	83 ec 04             	sub    esp,0x4
9f0018c8:	50                   	push   eax
9f0018c9:	8d 83 6b fa ff ff    	lea    eax,[ebx-0x595]
9f0018cf:	50                   	push   eax
9f0018d0:	68 00 00 00 01       	push   0x1000000
9f0018d5:	e8 0b f5 ff ff       	call   9f000de5 <printdI>
9f0018da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
        heapEnd=allocatedPtr+needed;
9f0018dd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0018e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0018e3:	01 c2                	add    edx,eax
9f0018e5:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0018eb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0018ed:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0018f3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0018f5:	83 ec 0c             	sub    esp,0xc
9f0018f8:	50                   	push   eax
9f0018f9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0018fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0018ff:	8d 83 88 fa ff ff    	lea    eax,[ebx-0x578]
9f001905:	50                   	push   eax
9f001906:	68 00 00 00 01       	push   0x1000000
9f00190b:	e8 d5 f4 ff ff       	call   9f000de5 <printdI>
9f001910:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
        if (heapBase==0)    //Hasn't been initialized yet!
9f001913:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001919:	8b 00                	mov    eax,DWORD PTR [eax]
9f00191b:	85 c0                	test   eax,eax
9f00191d:	75 36                	jne    9f001955 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:87
        {
            heapCurr=allocatedPtr;
9f00191f:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001925:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001928:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:88
            heapBase=allocatedPtr;
9f00192a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001930:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001933:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f001935:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00193b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00193d:	83 ec 04             	sub    esp,0x4
9f001940:	50                   	push   eax
9f001941:	8d 83 c8 fa ff ff    	lea    eax,[ebx-0x538]
9f001947:	50                   	push   eax
9f001948:	68 00 00 00 01       	push   0x1000000
9f00194d:	e8 93 f4 ff ff       	call   9f000de5 <printdI>
9f001952:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f001955:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00195b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00195d:	83 ec 04             	sub    esp,0x4
9f001960:	50                   	push   eax
9f001961:	8d 83 04 fb ff ff    	lea    eax,[ebx-0x4fc]
9f001967:	50                   	push   eax
9f001968:	68 00 00 00 01       	push   0x1000000
9f00196d:	e8 73 f4 ff ff       	call   9f000de5 <printdI>
9f001972:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr = (heaprec_t*)heapCurr;
9f001975:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00197b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00197d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f001980:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001983:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    heapPtr->len=size;
9f001989:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00198c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00198f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    heapPtr->inUse=true;
9f001992:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001995:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
9f001999:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00199f:	8b 00                	mov    eax,DWORD PTR [eax]
9f0019a1:	6a 10                	push   0x10
9f0019a3:	50                   	push   eax
9f0019a4:	8d 83 2c fb ff ff    	lea    eax,[ebx-0x4d4]
9f0019aa:	50                   	push   eax
9f0019ab:	68 00 00 00 01       	push   0x1000000
9f0019b0:	e8 30 f4 ff ff       	call   9f000de5 <printdI>
9f0019b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
9f0019b8:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0019be:	8b 00                	mov    eax,DWORD PTR [eax]
9f0019c0:	83 c0 10             	add    eax,0x10
9f0019c3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
9f0019c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0019c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0019cc:	8d 50 10             	lea    edx,[eax+0x10]
9f0019cf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0019d2:	01 d0                	add    eax,edx
9f0019d4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
9f0019d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0019da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0019dd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
    heapCurr+=size+(sizeof(heaprec_t));
9f0019e0:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0019e6:	8b 10                	mov    edx,DWORD PTR [eax]
9f0019e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019eb:	01 d0                	add    eax,edx
9f0019ed:	8d 50 10             	lea    edx,[eax+0x10]
9f0019f0:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0019f6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f0019f8:	83 ec 04             	sub    esp,0x4
9f0019fb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0019fe:	8d 83 64 fb ff ff    	lea    eax,[ebx-0x49c]
9f001a04:	50                   	push   eax
9f001a05:	68 00 00 00 01       	push   0x1000000
9f001a0a:	e8 d6 f3 ff ff       	call   9f000de5 <printdI>
9f001a0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:103
    return retVal;
9f001a12:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104
}
9f001a15:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001a18:	c9                   	leave  
9f001a19:	c3                   	ret    

9f001a1a <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f001a1a:	55                   	push   ebp
9f001a1b:	89 e5                	mov    ebp,esp
9f001a1d:	83 ec 08             	sub    esp,0x8
9f001a20:	e8 ae 23 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001a25:	05 1f 46 00 00       	add    eax,0x461f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
    return mallocI(size);
9f001a2a:	83 ec 0c             	sub    esp,0xc
9f001a2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a30:	e8 11 fe ff ff       	call   9f001846 <mallocI>
9f001a35:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109
}
9f001a38:	c9                   	leave  
9f001a39:	c3                   	ret    

9f001a3a <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112

void* reallocI(void *foldptr, uint32_t newlen)
{
9f001a3a:	55                   	push   ebp
9f001a3b:	89 e5                	mov    ebp,esp
9f001a3d:	53                   	push   ebx
9f001a3e:	83 ec 14             	sub    esp,0x14
9f001a41:	e8 ba 23 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f001a46:	81 c3 fe 45 00 00    	add    ebx,0x45fe
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(newlen);
9f001a4c:	83 ec 0c             	sub    esp,0xc
9f001a4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001a52:	e8 ef fd ff ff       	call   9f001846 <mallocI>
9f001a57:	83 c4 10             	add    esp,0x10
9f001a5a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:119
   
    //Get old heap pointer
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f001a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a60:	83 e8 10             	sub    eax,0x10
9f001a63:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:122
    
    //Copy from old pointer to new memory using the old pointer's length
    memsetI(fnewptr+mp->len,0,newlen);
9f001a66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f001a6c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001a73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001a76:	01 d0                	add    eax,edx
9f001a78:	83 ec 04             	sub    esp,0x4
9f001a7b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001a7e:	6a 00                	push   0x0
9f001a80:	50                   	push   eax
9f001a81:	e8 66 02 00 00       	call   9f001cec <memsetI>
9f001a86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
    memcpyI(fnewptr, foldptr, mp->len>newlen?newlen:mp->len);
9f001a89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f001a8f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001a92:	39 c2                	cmp    edx,eax
9f001a94:	0f 46 c2             	cmovbe eax,edx
9f001a97:	83 ec 04             	sub    esp,0x4
9f001a9a:	50                   	push   eax
9f001a9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001aa1:	e8 8a 00 00 00       	call   9f001b30 <memcpyI>
9f001aa6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:126
    
   //free old pointer
    freeI(foldptr);
9f001aa9:	83 ec 0c             	sub    esp,0xc
9f001aac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001aaf:	e8 3b fd ff ff       	call   9f0017ef <freeI>
9f001ab4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
    return fnewptr;
9f001ab7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
}
9f001aba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001abd:	c9                   	leave  
9f001abe:	c3                   	ret    

9f001abf <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:131

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f001abf:	55                   	push   ebp
9f001ac0:	89 e5                	mov    ebp,esp
9f001ac2:	83 ec 08             	sub    esp,0x8
9f001ac5:	e8 09 23 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001aca:	05 7a 45 00 00       	add    eax,0x457a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
    return reallocI(foldptr, newlen);
9f001acf:	83 ec 08             	sub    esp,0x8
9f001ad2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ad5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ad8:	e8 5d ff ff ff       	call   9f001a3a <reallocI>
9f001add:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133
}
9f001ae0:	c9                   	leave  
9f001ae1:	c3                   	ret    

9f001ae2 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f001ae2:	55                   	push   ebp
9f001ae3:	89 e5                	mov    ebp,esp
9f001ae5:	e8 e9 22 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001aea:	05 5a 45 00 00       	add    eax,0x455a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
    freeI(fpointer);
9f001aef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001af2:	e8 f8 fc ff ff       	call   9f0017ef <freeI>
9f001af7:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
}
9f001afa:	90                   	nop
9f001afb:	c9                   	leave  
9f001afc:	c3                   	ret    

9f001afd <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:141

void malloc_cleanup()
{
9f001afd:	55                   	push   ebp
9f001afe:	89 e5                	mov    ebp,esp
9f001b00:	53                   	push   ebx
9f001b01:	83 ec 04             	sub    esp,0x4
9f001b04:	e8 ca 22 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001b09:	05 3b 45 00 00       	add    eax,0x453b
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
    do_syscall1(SYSCALL_FREE, heapBase);
9f001b0e:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
9f001b14:	8b 12                	mov    edx,DWORD PTR [edx]
9f001b16:	83 ec 08             	sub    esp,0x8
9f001b19:	52                   	push   edx
9f001b1a:	68 64 01 00 00       	push   0x164
9f001b1f:	89 c3                	mov    ebx,eax
9f001b21:	e8 2a f0 ff ff       	call   9f000b50 <do_syscall1>
9f001b26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
9f001b29:	90                   	nop
9f001b2a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001b2d:	c9                   	leave  
9f001b2e:	c3                   	ret    
9f001b2f:	90                   	nop

9f001b30 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f001b30:	55                   	push   ebp
9f001b31:	89 e5                	mov    ebp,esp
9f001b33:	83 ec 20             	sub    esp,0x20
9f001b36:	e8 98 22 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001b3b:	05 09 45 00 00       	add    eax,0x4509
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f001b40:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b43:	83 e0 03             	and    eax,0x3
9f001b46:	85 c0                	test   eax,eax
9f001b48:	0f 94 c0             	sete   al
9f001b4b:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f001b4e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b51:	83 e0 01             	and    eax,0x1
9f001b54:	85 c0                	test   eax,eax
9f001b56:	0f 94 c0             	sete   al
9f001b59:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f001b5c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f001b60:	74 7d                	je     9f001bdf <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f001b62:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b65:	c1 e8 02             	shr    eax,0x2
9f001b68:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f001b6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b6e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f001b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b74:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f001b77:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b7a:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f001b7d:	73 4b                	jae    9f001bca <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f001b7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b82:	c1 e0 02             	shl    eax,0x2
9f001b85:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f001b88:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b8b:	c1 e0 02             	shl    eax,0x2
9f001b8e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f001b91:	eb 12                	jmp    9f001ba5 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f001b93:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f001b97:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f001b9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b9e:	8b 10                	mov    edx,DWORD PTR [eax]
9f001ba0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001ba3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f001ba5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001ba8:	8d 50 ff             	lea    edx,[eax-0x1]
9f001bab:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001bae:	85 c0                	test   eax,eax
9f001bb0:	75 e1                	jne    9f001b93 <memcpyI+0x63>
9f001bb2:	eb 23                	jmp    9f001bd7 <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f001bb4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001bb7:	8d 50 04             	lea    edx,[eax+0x4]
9f001bba:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001bbd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001bc0:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001bc3:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f001bc6:	8b 12                	mov    edx,DWORD PTR [edx]
9f001bc8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001bca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001bcd:	8d 50 ff             	lea    edx,[eax-0x1]
9f001bd0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001bd3:	85 c0                	test   eax,eax
9f001bd5:	75 dd                	jne    9f001bb4 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f001bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bda:	e9 ea 00 00 00       	jmp    9f001cc9 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f001bdf:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f001be3:	74 79                	je     9f001c5e <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f001be5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001be8:	d1 e8                	shr    eax,1
9f001bea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f001bed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001bf0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f001bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bf6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f001bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001bfc:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f001bff:	73 4b                	jae    9f001c4c <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f001c01:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c04:	c1 e0 02             	shl    eax,0x2
9f001c07:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f001c0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c0d:	c1 e0 02             	shl    eax,0x2
9f001c10:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f001c13:	eb 12                	jmp    9f001c27 <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f001c15:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f001c19:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f001c1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001c20:	8b 10                	mov    edx,DWORD PTR [eax]
9f001c22:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c25:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f001c27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c2a:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c2d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c30:	85 c0                	test   eax,eax
9f001c32:	75 e1                	jne    9f001c15 <memcpyI+0xe5>
9f001c34:	eb 23                	jmp    9f001c59 <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f001c36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c39:	8d 50 04             	lea    edx,[eax+0x4]
9f001c3c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c3f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001c42:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001c45:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f001c48:	8b 12                	mov    edx,DWORD PTR [edx]
9f001c4a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001c4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c4f:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c52:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c55:	85 c0                	test   eax,eax
9f001c57:	75 dd                	jne    9f001c36 <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f001c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c5c:	eb 6b                	jmp    9f001cc9 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f001c5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f001c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c67:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f001c6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001c6d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001c70:	73 47                	jae    9f001cb9 <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f001c72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c75:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f001c78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c7b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f001c7e:	eb 13                	jmp    9f001c93 <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f001c80:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f001c84:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f001c88:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001c8b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f001c8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001c91:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f001c93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c96:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c99:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c9c:	85 c0                	test   eax,eax
9f001c9e:	75 e0                	jne    9f001c80 <memcpyI+0x150>
9f001ca0:	eb 24                	jmp    9f001cc6 <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f001ca2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001ca5:	8d 50 01             	lea    edx,[eax+0x1]
9f001ca8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f001cab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001cae:	8d 4a 01             	lea    ecx,[edx+0x1]
9f001cb1:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f001cb4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001cb7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f001cb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001cbc:	8d 50 ff             	lea    edx,[eax-0x1]
9f001cbf:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001cc2:	85 c0                	test   eax,eax
9f001cc4:	75 dc                	jne    9f001ca2 <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f001cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f001cc9:	c9                   	leave  
9f001cca:	c3                   	ret    

9f001ccb <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f001ccb:	55                   	push   ebp
9f001ccc:	89 e5                	mov    ebp,esp
9f001cce:	e8 00 21 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001cd3:	05 71 43 00 00       	add    eax,0x4371
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f001cd8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001cdb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001cde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ce1:	e8 4a fe ff ff       	call   9f001b30 <memcpyI>
9f001ce6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f001ce9:	c9                   	leave  
9f001cea:	c3                   	ret    
9f001ceb:	90                   	nop

9f001cec <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f001cec:	55                   	push   ebp
9f001ced:	89 e5                	mov    ebp,esp
9f001cef:	83 ec 20             	sub    esp,0x20
9f001cf2:	e8 dc 20 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001cf7:	05 4d 43 00 00       	add    eax,0x434d
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f001cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001cff:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f001d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d05:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f001d08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d0b:	c1 e0 10             	shl    eax,0x10
9f001d0e:	89 c2                	mov    edx,eax
9f001d10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d13:	c1 e0 08             	shl    eax,0x8
9f001d16:	09 c2                	or     edx,eax
9f001d18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d1b:	09 d0                	or     eax,edx
9f001d1d:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f001d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d24:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f001d27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d2a:	c1 e0 18             	shl    eax,0x18
9f001d2d:	89 c2                	mov    edx,eax
9f001d2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d32:	c1 e0 10             	shl    eax,0x10
9f001d35:	09 c2                	or     edx,eax
9f001d37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d3a:	c1 e0 08             	shl    eax,0x8
9f001d3d:	09 d0                	or     eax,edx
9f001d3f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f001d42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f001d45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d48:	83 e0 03             	and    eax,0x3
9f001d4b:	85 c0                	test   eax,eax
9f001d4d:	75 1c                	jne    9f001d6b <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f001d4f:	eb 0e                	jmp    9f001d5f <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f001d51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d54:	8d 50 04             	lea    edx,[eax+0x4]
9f001d57:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001d5a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001d5d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f001d5f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f001d63:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f001d67:	75 e8                	jne    9f001d51 <memsetI+0x65>
9f001d69:	eb 43                	jmp    9f001dae <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f001d6b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d6e:	83 e0 01             	and    eax,0x1
9f001d71:	85 c0                	test   eax,eax
9f001d73:	75 2c                	jne    9f001da1 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f001d75:	eb 10                	jmp    9f001d87 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f001d77:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001d7a:	8d 50 02             	lea    edx,[eax+0x2]
9f001d7d:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001d80:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f001d84:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f001d87:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f001d8b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f001d8f:	75 e6                	jne    9f001d77 <memsetI+0x8b>
9f001d91:	eb 1b                	jmp    9f001dae <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f001d93:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d96:	8d 50 01             	lea    edx,[eax+0x1]
9f001d99:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f001d9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001d9f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f001da1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001da4:	8d 50 ff             	lea    edx,[eax-0x1]
9f001da7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001daa:	85 c0                	test   eax,eax
9f001dac:	75 e5                	jne    9f001d93 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f001dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f001db1:	c9                   	leave  
9f001db2:	c3                   	ret    

9f001db3 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f001db3:	55                   	push   ebp
9f001db4:	89 e5                	mov    ebp,esp
9f001db6:	e8 18 20 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001dbb:	05 89 42 00 00       	add    eax,0x4289
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f001dc0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001dc3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001dc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001dc9:	e8 1e ff ff ff       	call   9f001cec <memsetI>
9f001dce:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f001dd1:	c9                   	leave  
9f001dd2:	c3                   	ret    
9f001dd3:	90                   	nop

9f001dd4 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f001dd4:	55                   	push   ebp
9f001dd5:	89 e5                	mov    ebp,esp
9f001dd7:	53                   	push   ebx
9f001dd8:	83 ec 04             	sub    esp,0x4
9f001ddb:	e8 f3 1f 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001de0:	05 64 42 00 00       	add    eax,0x4264
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f001de5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001de8:	83 ec 08             	sub    esp,0x8
9f001deb:	52                   	push   edx
9f001dec:	6a 07                	push   0x7
9f001dee:	89 c3                	mov    ebx,eax
9f001df0:	e8 5b ed ff ff       	call   9f000b50 <do_syscall1>
9f001df5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
9f001df8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001dfb:	c9                   	leave  
9f001dfc:	c3                   	ret    
9f001dfd:	66 90                	xchg   ax,ax
9f001dff:	90                   	nop

9f001e00 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f001e00:	55                   	push   ebp
9f001e01:	89 e5                	mov    ebp,esp
9f001e03:	53                   	push   ebx
9f001e04:	83 ec 10             	sub    esp,0x10
9f001e07:	e8 c7 1f 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f001e0c:	05 38 42 00 00       	add    eax,0x4238
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f001e11:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f001e18:	eb 29                	jmp    9f001e43 <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f001e1a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f001e1d:	89 d0                	mov    eax,edx
9f001e1f:	c1 e0 02             	shl    eax,0x2
9f001e22:	01 d0                	add    eax,edx
9f001e24:	01 c0                	add    eax,eax
9f001e26:	89 c3                	mov    ebx,eax
9f001e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001e2b:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e2d:	8d 48 01             	lea    ecx,[eax+0x1]
9f001e30:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001e33:	89 0a                	mov    DWORD PTR [edx],ecx
9f001e35:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e38:	0f be c0             	movsx  eax,al
9f001e3b:	01 d8                	add    eax,ebx
9f001e3d:	83 e8 30             	sub    eax,0x30
9f001e40:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f001e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001e46:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e48:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e4b:	0f be c0             	movsx  eax,al
9f001e4e:	83 e8 30             	sub    eax,0x30
9f001e51:	83 f8 09             	cmp    eax,0x9
9f001e54:	76 c4                	jbe    9f001e1a <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f001e56:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f001e59:	83 c4 10             	add    esp,0x10
9f001e5c:	5b                   	pop    ebx
9f001e5d:	5d                   	pop    ebp
9f001e5e:	c3                   	ret    

9f001e5f <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f001e5f:	55                   	push   ebp
9f001e60:	89 e5                	mov    ebp,esp
9f001e62:	56                   	push   esi
9f001e63:	53                   	push   ebx
9f001e64:	83 ec 60             	sub    esp,0x60
9f001e67:	e8 94 1f 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f001e6c:	81 c3 d8 41 00 00    	add    ebx,0x41d8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f001e72:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001e75:	83 e0 20             	and    eax,0x20
9f001e78:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f001e7b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001e7e:	83 e0 10             	and    eax,0x10
9f001e81:	85 c0                	test   eax,eax
9f001e83:	74 04                	je     9f001e89 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f001e85:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f001e89:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f001e8d:	7e 06                	jle    9f001e95 <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f001e8f:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001e93:	7e 0a                	jle    9f001e9f <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f001e95:	b8 00 00 00 00       	mov    eax,0x0
9f001e9a:	e9 f7 01 00 00       	jmp    9f002096 <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f001e9f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001ea2:	83 e0 01             	and    eax,0x1
9f001ea5:	85 c0                	test   eax,eax
9f001ea7:	74 07                	je     9f001eb0 <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f001ea9:	b8 30 00 00 00       	mov    eax,0x30
9f001eae:	eb 05                	jmp    9f001eb5 <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f001eb0:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f001eb5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f001eb8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f001ebc:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001ebf:	83 e0 02             	and    eax,0x2
9f001ec2:	85 c0                	test   eax,eax
9f001ec4:	74 39                	je     9f001eff <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f001ec6:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001eca:	79 0d                	jns    9f001ed9 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f001ecc:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f001ed0:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f001ed3:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001ed7:	eb 26                	jmp    9f001eff <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f001ed9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001edc:	83 e0 04             	and    eax,0x4
9f001edf:	85 c0                	test   eax,eax
9f001ee1:	74 0a                	je     9f001eed <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f001ee3:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f001ee7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001eeb:	eb 12                	jmp    9f001eff <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f001eed:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001ef0:	83 e0 08             	and    eax,0x8
9f001ef3:	85 c0                	test   eax,eax
9f001ef5:	74 08                	je     9f001eff <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f001ef7:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f001efb:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f001eff:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001f02:	83 e0 40             	and    eax,0x40
9f001f05:	85 c0                	test   eax,eax
9f001f07:	74 16                	je     9f001f1f <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f001f09:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001f0d:	75 06                	jne    9f001f15 <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f001f0f:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f001f13:	eb 0a                	jmp    9f001f1f <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f001f15:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001f19:	75 04                	jne    9f001f1f <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f001f1b:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f001f1f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f001f26:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001f2a:	75 4d                	jne    9f001f79 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f001f2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f2f:	8d 50 01             	lea    edx,[eax+0x1]
9f001f32:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001f35:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f001f3a:	eb 43                	jmp    9f001f7f <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f001f3c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f001f3f:	8d 41 01             	lea    eax,[ecx+0x1]
9f001f42:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001f45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f48:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001f4b:	ba 00 00 00 00       	mov    edx,0x0
9f001f50:	f7 f6                	div    esi
9f001f52:	89 d0                	mov    eax,edx
9f001f54:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f001f57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f5a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001f5d:	ba 00 00 00 00       	mov    edx,0x0
9f001f62:	f7 f6                	div    esi
9f001f64:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f001f67:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001f6a:	0f b6 84 03 14 fd ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x2ec]
9f001f71:	ff 
9f001f72:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f001f75:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f001f79:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001f7d:	75 bd                	jne    9f001f3c <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f001f7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f82:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f001f85:	7e 06                	jle    9f001f8d <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f001f87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f8a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f001f8d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f001f90:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f001f93:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001f96:	83 e0 11             	and    eax,0x11
9f001f99:	85 c0                	test   eax,eax
9f001f9b:	75 1b                	jne    9f001fb8 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f001f9d:	eb 0c                	jmp    9f001fab <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f001f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001fa2:	8d 50 01             	lea    edx,[eax+0x1]
9f001fa5:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001fa8:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f001fab:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001fae:	8d 50 ff             	lea    edx,[eax-0x1]
9f001fb1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001fb4:	85 c0                	test   eax,eax
9f001fb6:	7f e7                	jg     9f001f9f <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f001fb8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f001fbc:	74 0f                	je     9f001fcd <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f001fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001fc1:	8d 50 01             	lea    edx,[eax+0x1]
9f001fc4:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001fc7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f001fcb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f001fcd:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001fd0:	83 e0 40             	and    eax,0x40
9f001fd3:	85 c0                	test   eax,eax
9f001fd5:	74 38                	je     9f00200f <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f001fd7:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001fdb:	75 0e                	jne    9f001feb <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f001fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001fe0:	8d 50 01             	lea    edx,[eax+0x1]
9f001fe3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001fe6:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f001fe9:	eb 24                	jmp    9f00200f <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f001feb:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001fef:	75 1e                	jne    9f00200f <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f001ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ff4:	8d 50 01             	lea    edx,[eax+0x1]
9f001ff7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001ffa:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f001ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002000:	8d 50 01             	lea    edx,[eax+0x1]
9f002003:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002006:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f00200a:	83 ca 58             	or     edx,0x58
9f00200d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f00200f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002012:	83 e0 10             	and    eax,0x10
9f002015:	85 c0                	test   eax,eax
9f002017:	75 2c                	jne    9f002045 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f002019:	eb 0f                	jmp    9f00202a <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f00201b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00201e:	8d 50 01             	lea    edx,[eax+0x1]
9f002021:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002024:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f002028:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f00202a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00202d:	8d 50 ff             	lea    edx,[eax-0x1]
9f002030:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002033:	85 c0                	test   eax,eax
9f002035:	7f e4                	jg     9f00201b <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f002037:	eb 0c                	jmp    9f002045 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f002039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00203c:	8d 50 01             	lea    edx,[eax+0x1]
9f00203f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002042:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f002045:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f002048:	8d 50 ff             	lea    edx,[eax-0x1]
9f00204b:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f00204e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002051:	7f e6                	jg     9f002039 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f002053:	eb 16                	jmp    9f00206b <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f002055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002058:	8d 50 01             	lea    edx,[eax+0x1]
9f00205b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00205e:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f002061:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002064:	01 ca                	add    edx,ecx
9f002066:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002069:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f00206b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00206e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002071:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002074:	85 c0                	test   eax,eax
9f002076:	7f dd                	jg     9f002055 <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f002078:	eb 0c                	jmp    9f002086 <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f00207a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00207d:	8d 50 01             	lea    edx,[eax+0x1]
9f002080:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002083:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f002086:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002089:	8d 50 ff             	lea    edx,[eax-0x1]
9f00208c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00208f:	85 c0                	test   eax,eax
9f002091:	7f e7                	jg     9f00207a <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f002093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f002096:	83 c4 60             	add    esp,0x60
9f002099:	5b                   	pop    ebx
9f00209a:	5e                   	pop    esi
9f00209b:	5d                   	pop    ebp
9f00209c:	c3                   	ret    

9f00209d <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f00209d:	55                   	push   ebp
9f00209e:	89 e5                	mov    ebp,esp
9f0020a0:	53                   	push   ebx
9f0020a1:	83 ec 34             	sub    esp,0x34
9f0020a4:	e8 57 1d 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f0020a9:	81 c3 9b 3f 00 00    	add    ebx,0x3f9b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f0020af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0020b2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f0020b5:	e9 08 04 00 00       	jmp    9f0024c2 <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f0020ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0020bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0020c0:	3c 25                	cmp    al,0x25
9f0020c2:	74 16                	je     9f0020da <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f0020c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0020c7:	8d 50 01             	lea    edx,[eax+0x1]
9f0020ca:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0020cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0020d0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0020d3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f0020d5:	e9 df 03 00 00       	jmp    9f0024b9 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f0020da:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f0020e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0020e4:	83 c0 01             	add    eax,0x1
9f0020e7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f0020ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0020ed:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0020f0:	0f be c0             	movsx  eax,al
9f0020f3:	83 e8 20             	sub    eax,0x20
9f0020f6:	83 f8 10             	cmp    eax,0x10
9f0020f9:	77 2c                	ja     9f002127 <.L43>
9f0020fb:	c1 e0 02             	shl    eax,0x2
9f0020fe:	8b 84 18 80 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x480]
9f002105:	01 d8                	add    eax,ebx
9f002107:	ff e0                	jmp    eax

9f002109 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f002109:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f00210d:	eb d2                	jmp    9f0020e1 <vsprintf+0x44>

9f00210f <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f00210f:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f002113:	eb cc                	jmp    9f0020e1 <vsprintf+0x44>

9f002115 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f002115:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f002119:	eb c6                	jmp    9f0020e1 <vsprintf+0x44>

9f00211b <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f00211b:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f00211f:	eb c0                	jmp    9f0020e1 <vsprintf+0x44>

9f002121 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f002121:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f002125:	eb ba                	jmp    9f0020e1 <vsprintf+0x44>

9f002127 <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f002127:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f00212e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002131:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002134:	0f be c0             	movsx  eax,al
9f002137:	83 e8 30             	sub    eax,0x30
9f00213a:	83 f8 09             	cmp    eax,0x9
9f00213d:	77 11                	ja     9f002150 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f00213f:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002142:	50                   	push   eax
9f002143:	e8 b8 fc ff ff       	call   9f001e00 <skip_atoi>
9f002148:	83 c4 04             	add    esp,0x4
9f00214b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f00214e:	eb 2e                	jmp    9f00217e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f002150:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002153:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002156:	3c 2a                	cmp    al,0x2a
9f002158:	75 24                	jne    9f00217e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f00215a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00215d:	83 c0 01             	add    eax,0x1
9f002160:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f002163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002166:	8d 50 04             	lea    edx,[eax+0x4]
9f002169:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00216c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00216e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f002171:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002175:	79 07                	jns    9f00217e <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f002177:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f00217a:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f00217e:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f002185:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002188:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00218b:	3c 2e                	cmp    al,0x2e
9f00218d:	75 59                	jne    9f0021e8 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f00218f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002192:	83 c0 01             	add    eax,0x1
9f002195:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f002198:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00219b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00219e:	0f be c0             	movsx  eax,al
9f0021a1:	83 e8 30             	sub    eax,0x30
9f0021a4:	83 f8 09             	cmp    eax,0x9
9f0021a7:	77 11                	ja     9f0021ba <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f0021a9:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0021ac:	50                   	push   eax
9f0021ad:	e8 4e fc ff ff       	call   9f001e00 <skip_atoi>
9f0021b2:	83 c4 04             	add    esp,0x4
9f0021b5:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f0021b8:	eb 21                	jmp    9f0021db <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f0021ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021c0:	3c 2a                	cmp    al,0x2a
9f0021c2:	75 17                	jne    9f0021db <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f0021c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021c7:	83 c0 01             	add    eax,0x1
9f0021ca:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f0021cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0021d0:	8d 50 04             	lea    edx,[eax+0x4]
9f0021d3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0021d6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0021d8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f0021db:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f0021df:	79 07                	jns    9f0021e8 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f0021e1:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f0021e8:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f0021ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021f5:	3c 68                	cmp    al,0x68
9f0021f7:	74 14                	je     9f00220d <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f0021f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021fc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021ff:	3c 6c                	cmp    al,0x6c
9f002201:	74 0a                	je     9f00220d <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f002203:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002206:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002209:	3c 4c                	cmp    al,0x4c
9f00220b:	75 15                	jne    9f002222 <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f00220d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002210:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002213:	0f be c0             	movsx  eax,al
9f002216:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f002219:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00221c:	83 c0 01             	add    eax,0x1
9f00221f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f002222:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f002229:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00222c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00222f:	0f be c0             	movsx  eax,al
9f002232:	83 e8 25             	sub    eax,0x25
9f002235:	83 f8 53             	cmp    eax,0x53
9f002238:	0f 87 b5 01 00 00    	ja     9f0023f3 <.L57>
9f00223e:	c1 e0 02             	shl    eax,0x2
9f002241:	8b 84 18 c4 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x43c]
9f002248:	01 d8                	add    eax,ebx
9f00224a:	ff e0                	jmp    eax

9f00224c <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f00224c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00224f:	83 e0 10             	and    eax,0x10
9f002252:	85 c0                	test   eax,eax
9f002254:	75 18                	jne    9f00226e <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f002256:	eb 0c                	jmp    9f002264 <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f002258:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00225b:	8d 50 01             	lea    edx,[eax+0x1]
9f00225e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002261:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f002264:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002268:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f00226c:	7f ea                	jg     9f002258 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f00226e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002271:	8d 50 01             	lea    edx,[eax+0x1]
9f002274:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002277:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f00227a:	8d 4a 04             	lea    ecx,[edx+0x4]
9f00227d:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f002280:	8b 12                	mov    edx,DWORD PTR [edx]
9f002282:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f002284:	eb 0c                	jmp    9f002292 <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f002286:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002289:	8d 50 01             	lea    edx,[eax+0x1]
9f00228c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00228f:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f002292:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002296:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f00229a:	7f ea                	jg     9f002286 <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f00229c:	e9 18 02 00 00       	jmp    9f0024b9 <.L96+0x8c>

9f0022a1 <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f0022a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0022a4:	8d 50 04             	lea    edx,[eax+0x4]
9f0022a7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0022aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022ac:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f0022af:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f0022b3:	74 13                	je     9f0022c8 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f0022b5:	83 ec 0c             	sub    esp,0xc
9f0022b8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f0022bb:	e8 7c 05 00 00       	call   9f00283c <strlenI>
9f0022c0:	83 c4 10             	add    esp,0x10
9f0022c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0022c6:	eb 07                	jmp    9f0022cf <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f0022c8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f0022cf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0022d2:	83 e0 10             	and    eax,0x10
9f0022d5:	85 c0                	test   eax,eax
9f0022d7:	75 1c                	jne    9f0022f5 <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f0022d9:	eb 0c                	jmp    9f0022e7 <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f0022db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0022de:	8d 50 01             	lea    edx,[eax+0x1]
9f0022e1:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0022e4:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f0022e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0022ea:	8d 50 ff             	lea    edx,[eax-0x1]
9f0022ed:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f0022f0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0022f3:	7f e6                	jg     9f0022db <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f0022f5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0022fc:	eb 1b                	jmp    9f002319 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f0022fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002301:	8d 50 01             	lea    edx,[eax+0x1]
9f002304:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002307:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f00230a:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00230d:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f002310:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002313:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002315:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f002319:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00231c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00231f:	7c dd                	jl     9f0022fe <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f002321:	eb 0c                	jmp    9f00232f <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f002323:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002326:	8d 50 01             	lea    edx,[eax+0x1]
9f002329:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00232c:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f00232f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002332:	8d 50 ff             	lea    edx,[eax-0x1]
9f002335:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002338:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00233b:	7f e6                	jg     9f002323 <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f00233d:	e9 77 01 00 00       	jmp    9f0024b9 <.L96+0x8c>

9f002342 <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f002342:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f002346:	75 0b                	jne    9f002353 <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f002348:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f00234f:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f002353:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002356:	8d 50 04             	lea    edx,[eax+0x4]
9f002359:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00235c:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f00235e:	83 ec 08             	sub    esp,0x8
9f002361:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002364:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002367:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00236a:	6a 10                	push   0x10
9f00236c:	50                   	push   eax
9f00236d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002370:	e8 ea fa ff ff       	call   9f001e5f <number>
9f002375:	83 c4 20             	add    esp,0x20
9f002378:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f00237b:	e9 39 01 00 00       	jmp    9f0024b9 <.L96+0x8c>

9f002380 <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f002380:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002384:	75 20                	jne    9f0023a6 <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f002386:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002389:	8d 50 04             	lea    edx,[eax+0x4]
9f00238c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00238f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002391:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f002394:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00239a:	29 c2                	sub    edx,eax
9f00239c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f00239f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f0023a1:	e9 13 01 00 00       	jmp    9f0024b9 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f0023a6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0023a9:	8d 50 04             	lea    edx,[eax+0x4]
9f0023ac:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0023af:	8b 00                	mov    eax,DWORD PTR [eax]
9f0023b1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f0023b4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0023b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0023ba:	29 c2                	sub    edx,eax
9f0023bc:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0023bf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f0023c1:	e9 f3 00 00 00       	jmp    9f0024b9 <.L96+0x8c>

9f0023c6 <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f0023c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0023c9:	8d 50 01             	lea    edx,[eax+0x1]
9f0023cc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0023cf:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f0023d2:	e9 e2 00 00 00       	jmp    9f0024b9 <.L96+0x8c>

9f0023d7 <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f0023d7:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f0023de:	eb 4e                	jmp    9f00242e <.L96+0x1>

9f0023e0 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f0023e0:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f0023e4 <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f0023e4:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f0023eb:	eb 41                	jmp    9f00242e <.L96+0x1>

9f0023ed <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f0023ed:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f0023f1:	eb 3a                	jmp    9f00242d <.L96>

9f0023f3 <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f0023f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0023f6:	8d 50 01             	lea    edx,[eax+0x1]
9f0023f9:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0023fc:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f0023ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002402:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002405:	84 c0                	test   al,al
9f002407:	74 16                	je     9f00241f <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f002409:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00240c:	8d 50 01             	lea    edx,[eax+0x1]
9f00240f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002412:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002415:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002418:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f00241a:	e9 9a 00 00 00       	jmp    9f0024b9 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f00241f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002422:	83 e8 01             	sub    eax,0x1
9f002425:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f002428:	e9 8c 00 00 00       	jmp    9f0024b9 <.L96+0x8c>

9f00242d <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f00242d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f00242e:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002432:	75 10                	jne    9f002444 <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f002434:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002437:	8d 50 04             	lea    edx,[eax+0x4]
9f00243a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00243d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00243f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002442:	eb 54                	jmp    9f002498 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f002444:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f002448:	75 26                	jne    9f002470 <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f00244a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00244d:	8d 50 04             	lea    edx,[eax+0x4]
9f002450:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002453:	8b 00                	mov    eax,DWORD PTR [eax]
9f002455:	25 ff ff 00 00       	and    eax,0xffff
9f00245a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f00245d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002460:	83 e0 02             	and    eax,0x2
9f002463:	85 c0                	test   eax,eax
9f002465:	74 31                	je     9f002498 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f002467:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00246a:	98                   	cwde   
9f00246b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00246e:	eb 28                	jmp    9f002498 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f002470:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002473:	83 e0 02             	and    eax,0x2
9f002476:	85 c0                	test   eax,eax
9f002478:	74 10                	je     9f00248a <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f00247a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00247d:	8d 50 04             	lea    edx,[eax+0x4]
9f002480:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002483:	8b 00                	mov    eax,DWORD PTR [eax]
9f002485:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002488:	eb 0e                	jmp    9f002498 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f00248a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00248d:	8d 50 04             	lea    edx,[eax+0x4]
9f002490:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002493:	8b 00                	mov    eax,DWORD PTR [eax]
9f002495:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f002498:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00249b:	83 ec 08             	sub    esp,0x8
9f00249e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0024a1:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f0024a4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f0024a7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0024aa:	50                   	push   eax
9f0024ab:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0024ae:	e8 ac f9 ff ff       	call   9f001e5f <number>
9f0024b3:	83 c4 20             	add    esp,0x20
9f0024b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f0024b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0024bc:	83 c0 01             	add    eax,0x1
9f0024bf:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f0024c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0024c5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0024c8:	84 c0                	test   al,al
9f0024ca:	0f 85 ea fb ff ff    	jne    9f0020ba <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f0024d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0024d3:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f0024d6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0024d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0024dc:	29 c2                	sub    edx,eax
9f0024de:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f0024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0024e3:	c9                   	leave  
9f0024e4:	c3                   	ret    

9f0024e5 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

int sprintf(char *buf, const char *fmt, ...)
{
9f0024e5:	55                   	push   ebp
9f0024e6:	89 e5                	mov    ebp,esp
9f0024e8:	83 ec 18             	sub    esp,0x18
9f0024eb:	e8 e3 18 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0024f0:	05 54 3b 00 00       	add    eax,0x3b54
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f0024f5:	8d 45 10             	lea    eax,[ebp+0x10]
9f0024f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f0024fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024fe:	83 ec 04             	sub    esp,0x4
9f002501:	50                   	push   eax
9f002502:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002505:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002508:	e8 90 fb ff ff       	call   9f00209d <vsprintf>
9f00250d:	83 c4 10             	add    esp,0x10
9f002510:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f002513:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f002516:	c9                   	leave  
9f002517:	c3                   	ret    

9f002518 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:17
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f002518:	55                   	push   ebp
9f002519:	89 e5                	mov    ebp,esp
9f00251b:	53                   	push   ebx
9f00251c:	83 ec 14             	sub    esp,0x14
9f00251f:	e8 dc 18 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f002524:	81 c3 20 3b 00 00    	add    ebx,0x3b20
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
    char buff[5];
    int buffPtr=0;
9f00252a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21

    memsetI(buff,0,10);
9f002531:	83 ec 04             	sub    esp,0x4
9f002534:	6a 0a                	push   0xa
9f002536:	6a 00                	push   0x0
9f002538:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00253b:	50                   	push   eax
9f00253c:	e8 ab f7 ff ff       	call   9f001cec <memsetI>
9f002541:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f002544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002547:	8d 50 01             	lea    edx,[eax+0x1]
9f00254a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00254d:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    buff[buffPtr++] = '[';
9f002552:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002555:	8d 50 01             	lea    edx,[eax+0x1]
9f002558:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00255b:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '0';
9f002560:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002563:	8d 50 01             	lea    edx,[eax+0x1]
9f002566:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002569:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = 'K';
9f00256e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002571:	8d 50 01             	lea    edx,[eax+0x1]
9f002574:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002577:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr] = '\0';
9f00257c:	8d 55 ef             	lea    edx,[ebp-0x11]
9f00257f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002582:	01 d0                	add    eax,edx
9f002584:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    printI(buff);
9f002587:	83 ec 0c             	sub    esp,0xc
9f00258a:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00258d:	50                   	push   eax
9f00258e:	e8 1e e8 ff ff       	call   9f000db1 <printI>
9f002593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:31
    
    return;
9f002596:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
}
9f002597:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00259a:	c9                   	leave  
9f00259b:	c3                   	ret    

9f00259c <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f00259c:	55                   	push   ebp
9f00259d:	89 e5                	mov    ebp,esp
9f00259f:	53                   	push   ebx
9f0025a0:	83 ec 04             	sub    esp,0x4
9f0025a3:	e8 58 18 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f0025a8:	81 c3 9c 3a 00 00    	add    ebx,0x3a9c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f0025ae:	83 ec 0c             	sub    esp,0xc
9f0025b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0025b4:	e8 83 02 00 00       	call   9f00283c <strlenI>
9f0025b9:	83 c4 10             	add    esp,0x10
9f0025bc:	89 c2                	mov    edx,eax
9f0025be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0025c1:	01 d0                	add    eax,edx
9f0025c3:	83 ec 08             	sub    esp,0x8
9f0025c6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0025c9:	50                   	push   eax
9f0025ca:	e8 59 01 00 00       	call   9f002728 <strcpyI>
9f0025cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f0025d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f0025d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0025d8:	c9                   	leave  
9f0025d9:	c3                   	ret    

9f0025da <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f0025da:	55                   	push   ebp
9f0025db:	89 e5                	mov    ebp,esp
9f0025dd:	53                   	push   ebx
9f0025de:	83 ec 04             	sub    esp,0x4
9f0025e1:	e8 1a 18 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f0025e6:	81 c3 5e 3a 00 00    	add    ebx,0x3a5e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f0025ec:	83 ec 0c             	sub    esp,0xc
9f0025ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0025f2:	e8 45 02 00 00       	call   9f00283c <strlenI>
9f0025f7:	83 c4 10             	add    esp,0x10
9f0025fa:	89 c2                	mov    edx,eax
9f0025fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0025ff:	01 d0                	add    eax,edx
9f002601:	83 ec 08             	sub    esp,0x8
9f002604:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002607:	50                   	push   eax
9f002608:	e8 1b 01 00 00       	call   9f002728 <strcpyI>
9f00260d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f002610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f002613:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002616:	c9                   	leave  
9f002617:	c3                   	ret    

9f002618 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
9f002618:	55                   	push   ebp
9f002619:	89 e5                	mov    ebp,esp
9f00261b:	83 ec 10             	sub    esp,0x10
9f00261e:	e8 b0 17 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002623:	05 21 3a 00 00       	add    eax,0x3a21
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
9f002628:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
9f00262f:	eb 04                	jmp    9f002635 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
9f002631:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
9f002635:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00263b:	01 d0                	add    eax,edx
9f00263d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002640:	84 c0                	test   al,al
9f002642:	75 ed                	jne    9f002631 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
9f002644:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
9f00264b:	eb 1d                	jmp    9f00266a <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
9f00264d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002653:	01 c2                	add    edx,eax
9f002655:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f002658:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00265b:	01 c8                	add    eax,ecx
9f00265d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002660:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
9f002662:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
9f002666:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
9f00266a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00266d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002670:	01 d0                	add    eax,edx
9f002672:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002675:	84 c0                	test   al,al
9f002677:	75 d4                	jne    9f00264d <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
9f002679:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00267c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00267f:	01 d0                	add    eax,edx
9f002681:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f002684:	90                   	nop
9f002685:	c9                   	leave  
9f002686:	c3                   	ret    
9f002687:	90                   	nop

9f002688 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
9f002688:	55                   	push   ebp
9f002689:	89 e5                	mov    ebp,esp
9f00268b:	56                   	push   esi
9f00268c:	53                   	push   ebx
9f00268d:	83 ec 10             	sub    esp,0x10
9f002690:	e8 3e 17 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002695:	05 af 39 00 00       	add    eax,0x39af
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
9f00269a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
9f00269d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f0026a0:	89 d8                	mov    eax,ebx
9f0026a2:	8d 58 01             	lea    ebx,[eax+0x1]
9f0026a5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0026a8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
9f0026ab:	89 f0                	mov    eax,esi
9f0026ad:	8d 70 01             	lea    esi,[eax+0x1]
9f0026b0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0026b3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
9f0026b6:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f0026ba:	75 0e                	jne    9f0026ca <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
9f0026bc:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0026c0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0026c4:	29 c2                	sub    edx,eax
9f0026c6:	89 d0                	mov    eax,edx
9f0026c8:	eb 15                	jmp    9f0026df <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
9f0026ca:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f0026ce:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f0026d1:	74 cd                	je     9f0026a0 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
9f0026d3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0026d7:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0026db:	29 c2                	sub    edx,eax
9f0026dd:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
9f0026df:	83 c4 10             	add    esp,0x10
9f0026e2:	5b                   	pop    ebx
9f0026e3:	5e                   	pop    esi
9f0026e4:	5d                   	pop    ebp
9f0026e5:	c3                   	ret    
9f0026e6:	66 90                	xchg   ax,ax

9f0026e8 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f0026e8:	55                   	push   ebp
9f0026e9:	89 e5                	mov    ebp,esp
9f0026eb:	83 ec 10             	sub    esp,0x10
9f0026ee:	e8 e0 16 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0026f3:	05 51 39 00 00       	add    eax,0x3951
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f0026f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f0026fe:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f0026ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002702:	8d 50 01             	lea    edx,[eax+0x1]
9f002705:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002708:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00270b:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00270e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002711:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002714:	88 10                	mov    BYTE PTR [eax],dl
9f002716:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002719:	84 c0                	test   al,al
9f00271b:	75 e2                	jne    9f0026ff <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f00271d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002720:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f002723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f002726:	c9                   	leave  
9f002727:	c3                   	ret    

9f002728 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f002728:	55                   	push   ebp
9f002729:	89 e5                	mov    ebp,esp
9f00272b:	83 ec 10             	sub    esp,0x10
9f00272e:	e8 a0 16 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002733:	05 11 39 00 00       	add    eax,0x3911
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f002738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00273b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f00273e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f00273f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002742:	8d 50 01             	lea    edx,[eax+0x1]
9f002745:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002748:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00274b:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00274e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002751:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002754:	88 10                	mov    BYTE PTR [eax],dl
9f002756:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002759:	84 c0                	test   al,al
9f00275b:	75 e2                	jne    9f00273f <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f00275d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002760:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f002763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f002766:	c9                   	leave  
9f002767:	c3                   	ret    

9f002768 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f002768:	55                   	push   ebp
9f002769:	89 e5                	mov    ebp,esp
9f00276b:	83 ec 10             	sub    esp,0x10
9f00276e:	e8 60 16 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002773:	05 d1 38 00 00       	add    eax,0x38d1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f002778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00277b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f00277e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f00277f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002782:	8d 50 01             	lea    edx,[eax+0x1]
9f002785:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002788:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00278b:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00278e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002791:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002794:	88 10                	mov    BYTE PTR [eax],dl
9f002796:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002799:	84 c0                	test   al,al
9f00279b:	74 0d                	je     9f0027aa <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f00279d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027a0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0027a3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0027a6:	85 c0                	test   eax,eax
9f0027a8:	75 d5                	jne    9f00277f <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f0027aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f0027ad:	c9                   	leave  
9f0027ae:	c3                   	ret    
9f0027af:	90                   	nop

9f0027b0 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f0027b0:	55                   	push   ebp
9f0027b1:	89 e5                	mov    ebp,esp
9f0027b3:	83 ec 04             	sub    esp,0x4
9f0027b6:	e8 18 16 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0027bb:	05 89 38 00 00       	add    eax,0x3889
9f0027c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027c3:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f0027c6:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f0027ca:	7e 0d                	jle    9f0027d9 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f0027cc:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f0027d0:	7f 07                	jg     9f0027d9 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f0027d2:	b8 01 00 00 00       	mov    eax,0x1
9f0027d7:	eb 05                	jmp    9f0027de <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f0027d9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f0027de:	c9                   	leave  
9f0027df:	c3                   	ret    

9f0027e0 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f0027e0:	55                   	push   ebp
9f0027e1:	89 e5                	mov    ebp,esp
9f0027e3:	83 ec 10             	sub    esp,0x10
9f0027e6:	e8 e8 15 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0027eb:	05 59 38 00 00       	add    eax,0x3859
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f0027f0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f0027f7:	eb 27                	jmp    9f002820 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f0027f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027fc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0027ff:	89 c2                	mov    edx,eax
9f002801:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002804:	01 d0                	add    eax,edx
9f002806:	0f be c0             	movsx  eax,al
9f002809:	50                   	push   eax
9f00280a:	e8 a1 ff ff ff       	call   9f0027b0 <check_digit>
9f00280f:	83 c4 04             	add    esp,0x4
9f002812:	83 f0 01             	xor    eax,0x1
9f002815:	84 c0                	test   al,al
9f002817:	74 07                	je     9f002820 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f002819:	b8 00 00 00 00       	mov    eax,0x0
9f00281e:	eb 17                	jmp    9f002837 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f002820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002823:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002826:	0f be d0             	movsx  edx,al
9f002829:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00282c:	01 d0                	add    eax,edx
9f00282e:	85 c0                	test   eax,eax
9f002830:	75 c7                	jne    9f0027f9 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f002832:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f002837:	c9                   	leave  
9f002838:	c3                   	ret    
9f002839:	66 90                	xchg   ax,ax
9f00283b:	90                   	nop

9f00283c <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f00283c:	55                   	push   ebp
9f00283d:	89 e5                	mov    ebp,esp
9f00283f:	83 ec 10             	sub    esp,0x10
9f002842:	e8 8c 15 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002847:	05 fd 37 00 00       	add    eax,0x37fd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f00284c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f002853:	eb 04                	jmp    9f002859 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f002855:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f002859:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00285c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00285f:	01 d0                	add    eax,edx
9f002861:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002864:	84 c0                	test   al,al
9f002866:	75 ed                	jne    9f002855 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f002868:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f00286b:	c9                   	leave  
9f00286c:	c3                   	ret    

9f00286d <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f00286d:	55                   	push   ebp
9f00286e:	89 e5                	mov    ebp,esp
9f002870:	e8 5e 15 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002875:	05 cf 37 00 00       	add    eax,0x37cf
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f00287a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00287d:	e8 ba ff ff ff       	call   9f00283c <strlenI>
9f002882:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f002885:	c9                   	leave  
9f002886:	c3                   	ret    

9f002887 <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f002887:	55                   	push   ebp
9f002888:	89 e5                	mov    ebp,esp
9f00288a:	83 ec 10             	sub    esp,0x10
9f00288d:	e8 41 15 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002892:	05 b2 37 00 00       	add    eax,0x37b2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f002897:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f00289e:	eb 04                	jmp    9f0028a4 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f0028a0:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f0028a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0028a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0028aa:	01 d0                	add    eax,edx
9f0028ac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028af:	84 c0                	test   al,al
9f0028b1:	74 08                	je     9f0028bb <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f0028b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0028b6:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f0028b9:	72 e5                	jb     9f0028a0 <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f0028bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f0028be:	c9                   	leave  
9f0028bf:	c3                   	ret    

9f0028c0 <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f0028c0:	55                   	push   ebp
9f0028c1:	89 e5                	mov    ebp,esp
9f0028c3:	e8 0b 15 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0028c8:	05 7c 37 00 00       	add    eax,0x377c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f0028cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0028d0:	50                   	push   eax
9f0028d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0028d4:	e8 ae ff ff ff       	call   9f002887 <strnlenI>
9f0028d9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f0028dc:	c9                   	leave  
9f0028dd:	c3                   	ret    
9f0028de:	66 90                	xchg   ax,ax

9f0028e0 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f0028e0:	55                   	push   ebp
9f0028e1:	89 e5                	mov    ebp,esp
9f0028e3:	e8 eb 14 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0028e8:	05 5c 37 00 00       	add    eax,0x375c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f0028ed:	eb 4b                	jmp    9f00293a <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f0028ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028f2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0028f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0028f8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028fb:	38 c2                	cmp    dl,al
9f0028fd:	74 1e                	je     9f00291d <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f0028ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002902:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002905:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002908:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00290b:	38 c2                	cmp    dl,al
9f00290d:	73 07                	jae    9f002916 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f00290f:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002914:	eb 2f                	jmp    9f002945 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f002916:	b8 01 00 00 00       	mov    eax,0x1
9f00291b:	eb 28                	jmp    9f002945 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f00291d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002920:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002923:	84 c0                	test   al,al
9f002925:	75 07                	jne    9f00292e <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f002927:	b8 00 00 00 00       	mov    eax,0x0
9f00292c:	eb 17                	jmp    9f002945 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f00292e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f002932:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f002936:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f00293a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00293e:	75 af                	jne    9f0028ef <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f002940:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f002945:	5d                   	pop    ebp
9f002946:	c3                   	ret    

9f002947 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f002947:	55                   	push   ebp
9f002948:	89 e5                	mov    ebp,esp
9f00294a:	e8 84 14 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f00294f:	05 f5 36 00 00       	add    eax,0x36f5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f002954:	eb 4b                	jmp    9f0029a1 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f002956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002959:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00295c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00295f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002962:	38 c2                	cmp    dl,al
9f002964:	74 1e                	je     9f002984 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f002966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002969:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00296c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00296f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002972:	38 c2                	cmp    dl,al
9f002974:	73 07                	jae    9f00297d <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f002976:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f00297b:	eb 2f                	jmp    9f0029ac <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f00297d:	b8 01 00 00 00       	mov    eax,0x1
9f002982:	eb 28                	jmp    9f0029ac <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f002984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002987:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00298a:	84 c0                	test   al,al
9f00298c:	75 07                	jne    9f002995 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f00298e:	b8 00 00 00 00       	mov    eax,0x0
9f002993:	eb 17                	jmp    9f0029ac <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f002995:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f002999:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f00299d:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f0029a1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0029a5:	75 af                	jne    9f002956 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f0029a7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f0029ac:	5d                   	pop    ebp
9f0029ad:	c3                   	ret    
9f0029ae:	66 90                	xchg   ax,ax

9f0029b0 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f0029b0:	55                   	push   ebp
9f0029b1:	89 e5                	mov    ebp,esp
9f0029b3:	83 ec 10             	sub    esp,0x10
9f0029b6:	e8 18 14 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0029bb:	05 89 36 00 00       	add    eax,0x3689
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f0029c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f0029c6:	eb 1b                	jmp    9f0029e3 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f0029c8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0029cb:	8d 50 01             	lea    edx,[eax+0x1]
9f0029ce:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0029d1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0029d4:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0029d7:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0029da:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0029dd:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f0029df:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f0029e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0029e7:	74 1c                	je     9f002a05 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f0029e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0029ef:	84 c0                	test   al,al
9f0029f1:	75 d5                	jne    9f0029c8 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0029f3:	eb 10                	jmp    9f002a05 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f0029f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0029f8:	8d 50 01             	lea    edx,[eax+0x1]
9f0029fb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0029fe:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f002a01:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f002a05:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002a09:	75 ea                	jne    9f0029f5 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
9f002a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
9f002a0e:	c9                   	leave  
9f002a0f:	c3                   	ret    

9f002a10 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f002a10:	55                   	push   ebp
9f002a11:	89 e5                	mov    ebp,esp
9f002a13:	e8 bb 13 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002a18:	05 2c 36 00 00       	add    eax,0x362c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
9f002a1d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002a20:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002a23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002a26:	e8 85 ff ff ff       	call   9f0029b0 <strncpyI>
9f002a2b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
9f002a2e:	c9                   	leave  
9f002a2f:	c3                   	ret    

9f002a30 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f002a30:	55                   	push   ebp
9f002a31:	89 e5                	mov    ebp,esp
9f002a33:	57                   	push   edi
9f002a34:	56                   	push   esi
9f002a35:	53                   	push   ebx
9f002a36:	83 ec 08             	sub    esp,0x8
9f002a39:	e8 95 13 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002a3e:	05 06 36 00 00       	add    eax,0x3606
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f002a43:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f002a46:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f002a4d:	89 f0                	mov    eax,esi
9f002a4f:	8d 70 01             	lea    esi,[eax+0x1]
9f002a52:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a55:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f002a58:	83 fb 20             	cmp    ebx,0x20
9f002a5b:	74 f0                	je     9f002a4d <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f002a5d:	83 fb 2d             	cmp    ebx,0x2d
9f002a60:	75 14                	jne    9f002a76 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f002a62:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f002a69:	89 f0                	mov    eax,esi
9f002a6b:	8d 70 01             	lea    esi,[eax+0x1]
9f002a6e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a71:	0f be d8             	movsx  ebx,al
9f002a74:	eb 10                	jmp    9f002a86 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f002a76:	83 fb 2b             	cmp    ebx,0x2b
9f002a79:	75 0b                	jne    9f002a86 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f002a7b:	89 f0                	mov    eax,esi
9f002a7d:	8d 70 01             	lea    esi,[eax+0x1]
9f002a80:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a83:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f002a86:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002a8a:	74 06                	je     9f002a92 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f002a8c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002a90:	75 26                	jne    9f002ab8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f002a92:	83 fb 30             	cmp    ebx,0x30
9f002a95:	75 21                	jne    9f002ab8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f002a97:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002a9a:	3c 78                	cmp    al,0x78
9f002a9c:	74 07                	je     9f002aa5 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f002a9e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002aa1:	3c 58                	cmp    al,0x58
9f002aa3:	75 13                	jne    9f002ab8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f002aa5:	8d 46 01             	lea    eax,[esi+0x1]
9f002aa8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002aab:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f002aae:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f002ab1:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f002ab8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002abc:	75 14                	jne    9f002ad2 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f002abe:	83 fb 30             	cmp    ebx,0x30
9f002ac1:	75 07                	jne    9f002aca <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f002ac3:	b8 08 00 00 00       	mov    eax,0x8
9f002ac8:	eb 05                	jmp    9f002acf <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f002aca:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f002acf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f002ad2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002ad5:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002ada:	ba 00 00 00 00       	mov    edx,0x0
9f002adf:	f7 f1                	div    ecx
9f002ae1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f002ae4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002ae7:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002aec:	ba 00 00 00 00       	mov    edx,0x0
9f002af1:	f7 f1                	div    ecx
9f002af3:	89 d0                	mov    eax,edx
9f002af5:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f002af7:	bf 00 00 00 00       	mov    edi,0x0
9f002afc:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f002b01:	8d 43 d0             	lea    eax,[ebx-0x30]
9f002b04:	83 f8 09             	cmp    eax,0x9
9f002b07:	77 05                	ja     9f002b0e <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f002b09:	83 eb 30             	sub    ebx,0x30
9f002b0c:	eb 25                	jmp    9f002b33 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f002b0e:	89 d8                	mov    eax,ebx
9f002b10:	83 c8 20             	or     eax,0x20
9f002b13:	83 e8 61             	sub    eax,0x61
9f002b16:	83 f8 19             	cmp    eax,0x19
9f002b19:	77 56                	ja     9f002b71 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f002b1b:	83 fb 40             	cmp    ebx,0x40
9f002b1e:	7e 0c                	jle    9f002b2c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f002b20:	83 fb 5a             	cmp    ebx,0x5a
9f002b23:	7f 07                	jg     9f002b2c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f002b25:	b8 37 00 00 00       	mov    eax,0x37
9f002b2a:	eb 05                	jmp    9f002b31 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f002b2c:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f002b31:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f002b33:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f002b36:	7d 3c                	jge    9f002b74 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f002b38:	89 c8                	mov    eax,ecx
9f002b3a:	85 c0                	test   eax,eax
9f002b3c:	78 10                	js     9f002b4e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f002b3e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002b41:	77 0b                	ja     9f002b4e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f002b43:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002b46:	75 0d                	jne    9f002b55 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f002b48:	89 d0                	mov    eax,edx
9f002b4a:	39 c3                	cmp    ebx,eax
9f002b4c:	7e 07                	jle    9f002b55 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f002b4e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f002b53:	eb 0f                	jmp    9f002b64 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f002b55:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f002b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002b5d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f002b60:	89 d8                	mov    eax,ebx
9f002b62:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f002b64:	89 f0                	mov    eax,esi
9f002b66:	8d 70 01             	lea    esi,[eax+0x1]
9f002b69:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b6c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002b6f:	eb 90                	jmp    9f002b01 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002b71:	90                   	nop
9f002b72:	eb 01                	jmp    9f002b75 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f002b74:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002b75:	89 c8                	mov    eax,ecx
9f002b77:	85 c0                	test   eax,eax
9f002b79:	79 07                	jns    9f002b82 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f002b7b:	bf ff ff ff ff       	mov    edi,0xffffffff
9f002b80:	eb 08                	jmp    9f002b8a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f002b82:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002b86:	74 02                	je     9f002b8a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f002b88:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f002b8a:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002b8e:	74 13                	je     9f002ba3 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f002b90:	89 c8                	mov    eax,ecx
9f002b92:	85 c0                	test   eax,eax
9f002b94:	74 05                	je     9f002b9b <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f002b96:	8d 46 ff             	lea    eax,[esi-0x1]
9f002b99:	eb 03                	jmp    9f002b9e <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f002b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f002b9e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002ba1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f002ba3:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f002ba5:	83 c4 08             	add    esp,0x8
9f002ba8:	5b                   	pop    ebx
9f002ba9:	5e                   	pop    esi
9f002baa:	5f                   	pop    edi
9f002bab:	5d                   	pop    ebp
9f002bac:	c3                   	ret    
9f002bad:	66 90                	xchg   ax,ax
9f002baf:	90                   	nop

9f002bb0 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f002bb0:	55                   	push   ebp
9f002bb1:	89 e5                	mov    ebp,esp
9f002bb3:	e8 1b 12 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002bb8:	05 8c 34 00 00       	add    eax,0x348c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f002bbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002bc3:	01 d0                	add    eax,edx
9f002bc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f002bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f002bcb:	5d                   	pop    ebp
9f002bcc:	c3                   	ret    
9f002bcd:	66 90                	xchg   ax,ax
9f002bcf:	90                   	nop

9f002bd0 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f002bd0:	55                   	push   ebp
9f002bd1:	89 e5                	mov    ebp,esp
9f002bd3:	57                   	push   edi
9f002bd4:	56                   	push   esi
9f002bd5:	53                   	push   ebx
9f002bd6:	83 ec 0c             	sub    esp,0xc
9f002bd9:	e8 f5 11 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002bde:	05 66 34 00 00       	add    eax,0x3466
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f002be3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f002be6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f002bed:	89 f0                	mov    eax,esi
9f002bef:	8d 70 01             	lea    esi,[eax+0x1]
9f002bf2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bf5:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f002bf8:	83 fb 20             	cmp    ebx,0x20
9f002bfb:	74 f0                	je     9f002bed <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f002bfd:	83 fb 2d             	cmp    ebx,0x2d
9f002c00:	75 14                	jne    9f002c16 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f002c02:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f002c09:	89 f0                	mov    eax,esi
9f002c0b:	8d 70 01             	lea    esi,[eax+0x1]
9f002c0e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c11:	0f be d8             	movsx  ebx,al
9f002c14:	eb 10                	jmp    9f002c26 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f002c16:	83 fb 2b             	cmp    ebx,0x2b
9f002c19:	75 0b                	jne    9f002c26 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f002c1b:	89 f0                	mov    eax,esi
9f002c1d:	8d 70 01             	lea    esi,[eax+0x1]
9f002c20:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c23:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f002c26:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002c2a:	74 06                	je     9f002c32 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f002c2c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002c30:	75 26                	jne    9f002c58 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f002c32:	83 fb 30             	cmp    ebx,0x30
9f002c35:	75 21                	jne    9f002c58 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f002c37:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002c3a:	3c 78                	cmp    al,0x78
9f002c3c:	74 07                	je     9f002c45 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f002c3e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002c41:	3c 58                	cmp    al,0x58
9f002c43:	75 13                	jne    9f002c58 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f002c45:	8d 46 01             	lea    eax,[esi+0x1]
9f002c48:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c4b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f002c4e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f002c51:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f002c58:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002c5c:	75 14                	jne    9f002c72 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f002c5e:	83 fb 30             	cmp    ebx,0x30
9f002c61:	75 07                	jne    9f002c6a <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f002c63:	b8 08 00 00 00       	mov    eax,0x8
9f002c68:	eb 05                	jmp    9f002c6f <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f002c6a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f002c6f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f002c72:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002c76:	74 07                	je     9f002c7f <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f002c78:	b8 00 00 00 80       	mov    eax,0x80000000
9f002c7d:	eb 05                	jmp    9f002c84 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f002c7f:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f002c84:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002c87:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002c8a:	ba 00 00 00 00       	mov    edx,0x0
9f002c8f:	f7 f1                	div    ecx
9f002c91:	89 d1                	mov    ecx,edx
9f002c93:	89 c8                	mov    eax,ecx
9f002c95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f002c98:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f002c9b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002c9e:	ba 00 00 00 00       	mov    edx,0x0
9f002ca3:	f7 f7                	div    edi
9f002ca5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f002ca8:	bf 00 00 00 00       	mov    edi,0x0
9f002cad:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f002cb2:	8d 43 d0             	lea    eax,[ebx-0x30]
9f002cb5:	83 f8 09             	cmp    eax,0x9
9f002cb8:	77 05                	ja     9f002cbf <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f002cba:	83 eb 30             	sub    ebx,0x30
9f002cbd:	eb 25                	jmp    9f002ce4 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f002cbf:	89 d8                	mov    eax,ebx
9f002cc1:	83 c8 20             	or     eax,0x20
9f002cc4:	83 e8 61             	sub    eax,0x61
9f002cc7:	83 f8 19             	cmp    eax,0x19
9f002cca:	77 55                	ja     9f002d21 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f002ccc:	83 fb 40             	cmp    ebx,0x40
9f002ccf:	7e 0c                	jle    9f002cdd <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f002cd1:	83 fb 5a             	cmp    ebx,0x5a
9f002cd4:	7f 07                	jg     9f002cdd <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f002cd6:	b8 37 00 00 00       	mov    eax,0x37
9f002cdb:	eb 05                	jmp    9f002ce2 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f002cdd:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f002ce2:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f002ce4:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f002ce7:	7d 3b                	jge    9f002d24 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f002ce9:	89 c8                	mov    eax,ecx
9f002ceb:	85 c0                	test   eax,eax
9f002ced:	78 0f                	js     9f002cfe <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f002cef:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002cf2:	77 0a                	ja     9f002cfe <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f002cf4:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002cf7:	75 0c                	jne    9f002d05 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f002cf9:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f002cfc:	7e 07                	jle    9f002d05 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f002cfe:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f002d03:	eb 0f                	jmp    9f002d14 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f002d05:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f002d0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002d0d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f002d10:	89 d8                	mov    eax,ebx
9f002d12:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f002d14:	89 f0                	mov    eax,esi
9f002d16:	8d 70 01             	lea    esi,[eax+0x1]
9f002d19:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002d1c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002d1f:	eb 91                	jmp    9f002cb2 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002d21:	90                   	nop
9f002d22:	eb 01                	jmp    9f002d25 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f002d24:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002d25:	89 c8                	mov    eax,ecx
9f002d27:	85 c0                	test   eax,eax
9f002d29:	79 16                	jns    9f002d41 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f002d2b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002d2f:	74 07                	je     9f002d38 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f002d31:	b8 00 00 00 80       	mov    eax,0x80000000
9f002d36:	eb 05                	jmp    9f002d3d <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f002d38:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f002d3d:	89 c7                	mov    edi,eax
9f002d3f:	eb 08                	jmp    9f002d49 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f002d41:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002d45:	74 02                	je     9f002d49 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f002d47:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f002d49:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002d4d:	74 13                	je     9f002d62 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f002d4f:	89 c8                	mov    eax,ecx
9f002d51:	85 c0                	test   eax,eax
9f002d53:	74 05                	je     9f002d5a <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f002d55:	8d 46 ff             	lea    eax,[esi-0x1]
9f002d58:	eb 03                	jmp    9f002d5d <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f002d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f002d5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002d60:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f002d62:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f002d64:	83 c4 0c             	add    esp,0xc
9f002d67:	5b                   	pop    ebx
9f002d68:	5e                   	pop    esi
9f002d69:	5f                   	pop    edi
9f002d6a:	5d                   	pop    ebp
9f002d6b:	c3                   	ret    

9f002d6c <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f002d6c:	55                   	push   ebp
9f002d6d:	89 e5                	mov    ebp,esp
9f002d6f:	53                   	push   ebx
9f002d70:	83 ec 14             	sub    esp,0x14
9f002d73:	e8 5b 10 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002d78:	05 cc 32 00 00       	add    eax,0x32cc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f002d7d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d80:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002d83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d86:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002d89:	eb 04                	jmp    9f002d8f <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f002d8b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002d8f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002d92:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002d95:	80 fa 20             	cmp    dl,0x20
9f002d98:	74 f1                	je     9f002d8b <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f002d9a:	83 ec 0c             	sub    esp,0xc
9f002d9d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002da0:	89 c3                	mov    ebx,eax
9f002da2:	e8 95 fa ff ff       	call   9f00283c <strlenI>
9f002da7:	83 c4 10             	add    esp,0x10
9f002daa:	8d 50 ff             	lea    edx,[eax-0x1]
9f002dad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002db0:	01 d0                	add    eax,edx
9f002db2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f002db5:	eb 0c                	jmp    9f002dc3 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f002db7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002dba:	8d 50 ff             	lea    edx,[eax-0x1]
9f002dbd:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f002dc0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f002dc3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002dc6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002dc9:	76 0a                	jbe    9f002dd5 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f002dcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002dce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002dd1:	3c 20                	cmp    al,0x20
9f002dd3:	74 e2                	je     9f002db7 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f002dd5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002dd8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002ddb:	74 1f                	je     9f002dfc <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f002ddd:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f002dde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002de1:	8d 50 01             	lea    edx,[eax+0x1]
9f002de4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002de7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002dea:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002ded:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f002df0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002df3:	88 10                	mov    BYTE PTR [eax],dl
9f002df5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002df8:	84 c0                	test   al,al
9f002dfa:	75 e2                	jne    9f002dde <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f002dfc:	90                   	nop
9f002dfd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002e00:	c9                   	leave  
9f002e01:	c3                   	ret    

9f002e02 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f002e02:	55                   	push   ebp
9f002e03:	89 e5                	mov    ebp,esp
9f002e05:	83 ec 08             	sub    esp,0x8
9f002e08:	e8 c6 0f 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002e0d:	05 37 32 00 00       	add    eax,0x3237
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f002e12:	83 ec 0c             	sub    esp,0xc
9f002e15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002e18:	e8 4f ff ff ff       	call   9f002d6c <strtrimI>
9f002e1d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f002e20:	c9                   	leave  
9f002e21:	c3                   	ret    
9f002e22:	66 90                	xchg   ax,ax

9f002e24 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:11
#include "strings.h"
#include "libChrisOS.h"

///NOTE: Output pointer has to be freed!!!
static char *strreplaceI(const char *in, const char *pattern, const char *by)
{
9f002e24:	55                   	push   ebp
9f002e25:	89 e5                	mov    ebp,esp
9f002e27:	56                   	push   esi
9f002e28:	53                   	push   ebx
9f002e29:	83 ec 10             	sub    esp,0x10
9f002e2c:	e8 cf 0f 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f002e31:	81 c3 13 32 00 00    	add    ebx,0x3213
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:12
    size_t outsize = strlenI(in) + 1;
9f002e37:	83 ec 0c             	sub    esp,0xc
9f002e3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002e3d:	e8 fa f9 ff ff       	call   9f00283c <strlenI>
9f002e42:	83 c4 10             	add    esp,0x10
9f002e45:	83 c0 01             	add    eax,0x1
9f002e48:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    char *res = mallocI(outsize);
9f002e4b:	83 ec 0c             	sub    esp,0xc
9f002e4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002e51:	e8 f0 e9 ff ff       	call   9f001846 <mallocI>
9f002e56:	83 c4 10             	add    esp,0x10
9f002e59:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:16
    // use this to iterate over the output
    size_t resoffset = 0;
9f002e5c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f002e63:	e9 c0 00 00 00       	jmp    9f002f28 <strreplaceI+0x104>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:21
        // copy everything up to the pattern
        memcpyI(res + resoffset, in, needle - in);
9f002e68:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e6e:	29 c2                	sub    edx,eax
9f002e70:	89 d0                	mov    eax,edx
9f002e72:	89 c1                	mov    ecx,eax
9f002e74:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002e77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002e7a:	01 d0                	add    eax,edx
9f002e7c:	83 ec 04             	sub    esp,0x4
9f002e7f:	51                   	push   ecx
9f002e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002e83:	50                   	push   eax
9f002e84:	e8 a7 ec ff ff       	call   9f001b30 <memcpyI>
9f002e89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        resoffset += needle - in;
9f002e8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e92:	29 c2                	sub    edx,eax
9f002e94:	89 d0                	mov    eax,edx
9f002e96:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:25

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f002e99:	83 ec 0c             	sub    esp,0xc
9f002e9c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002e9f:	e8 98 f9 ff ff       	call   9f00283c <strlenI>
9f002ea4:	83 c4 10             	add    esp,0x10
9f002ea7:	89 c2                	mov    edx,eax
9f002ea9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002eac:	01 d0                	add    eax,edx
9f002eae:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:28

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f002eb1:	83 ec 0c             	sub    esp,0xc
9f002eb4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002eb7:	e8 80 f9 ff ff       	call   9f00283c <strlenI>
9f002ebc:	83 c4 10             	add    esp,0x10
9f002ebf:	89 c2                	mov    edx,eax
9f002ec1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002ec4:	29 d0                	sub    eax,edx
9f002ec6:	89 c6                	mov    esi,eax
9f002ec8:	83 ec 0c             	sub    esp,0xc
9f002ecb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002ece:	e8 69 f9 ff ff       	call   9f00283c <strlenI>
9f002ed3:	83 c4 10             	add    esp,0x10
9f002ed6:	01 f0                	add    eax,esi
9f002ed8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29
        res = reallocI(res, outsize);
9f002edb:	83 ec 08             	sub    esp,0x8
9f002ede:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002ee1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002ee4:	e8 51 eb ff ff       	call   9f001a3a <reallocI>
9f002ee9:	83 c4 10             	add    esp,0x10
9f002eec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(res + resoffset, by, strlenI(by));
9f002eef:	83 ec 0c             	sub    esp,0xc
9f002ef2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002ef5:	e8 42 f9 ff ff       	call   9f00283c <strlenI>
9f002efa:	83 c4 10             	add    esp,0x10
9f002efd:	89 c1                	mov    ecx,eax
9f002eff:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002f02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002f05:	01 d0                	add    eax,edx
9f002f07:	83 ec 04             	sub    esp,0x4
9f002f0a:	51                   	push   ecx
9f002f0b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002f0e:	50                   	push   eax
9f002f0f:	e8 1c ec ff ff       	call   9f001b30 <memcpyI>
9f002f14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f002f17:	83 ec 0c             	sub    esp,0xc
9f002f1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002f1d:	e8 1a f9 ff ff       	call   9f00283c <strlenI>
9f002f22:	83 c4 10             	add    esp,0x10
9f002f25:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19
    char *res = mallocI(outsize);
    // use this to iterate over the output
    size_t resoffset = 0;

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f002f28:	83 ec 08             	sub    esp,0x8
9f002f2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f31:	e8 f8 00 00 00       	call   9f00302e <strstrI>
9f002f36:	83 c4 10             	add    esp,0x10
9f002f39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f002f3c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f002f40:	0f 85 22 ff ff ff    	jne    9f002e68 <strreplaceI+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(res + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(res + resoffset, in);
9f002f46:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002f49:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002f4c:	01 d0                	add    eax,edx
9f002f4e:	83 ec 08             	sub    esp,0x8
9f002f51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f54:	50                   	push   eax
9f002f55:	e8 ce f7 ff ff       	call   9f002728 <strcpyI>
9f002f5a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return res;
9f002f5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f002f60:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002f63:	5b                   	pop    ebx
9f002f64:	5e                   	pop    esi
9f002f65:	5d                   	pop    ebp
9f002f66:	c3                   	ret    

9f002f67 <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by)
{
9f002f67:	55                   	push   ebp
9f002f68:	89 e5                	mov    ebp,esp
9f002f6a:	83 ec 08             	sub    esp,0x8
9f002f6d:	e8 61 0e 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002f72:	05 d2 30 00 00       	add    eax,0x30d2
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by);
9f002f77:	83 ec 04             	sub    esp,0x4
9f002f7a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002f7d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f83:	e8 9c fe ff ff       	call   9f002e24 <strreplaceI>
9f002f88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f002f8b:	c9                   	leave  
9f002f8c:	c3                   	ret    
9f002f8d:	66 90                	xchg   ax,ax
9f002f8f:	90                   	nop

9f002f90 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strnstrI(char* string, char* substring, int length)
{
9f002f90:	55                   	push   ebp
9f002f91:	89 e5                	mov    ebp,esp
9f002f93:	56                   	push   esi
9f002f94:	53                   	push   ebx
9f002f95:	83 ec 10             	sub    esp,0x10
9f002f98:	e8 36 0e 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f002f9d:	05 a7 30 00 00       	add    eax,0x30a7
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:59

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f002fa2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002fa5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    
    b = substring;
9f002fa8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    if (*b == 0) {
9f002fab:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002fae:	84 c0                	test   al,al
9f002fb0:	75 66                	jne    9f003018 <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
	return string;
9f002fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fb5:	eb 70                	jmp    9f003027 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f002fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fba:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002fbd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002fc0:	38 c2                	cmp    dl,al
9f002fc2:	74 12                	je     9f002fd6 <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
            if (len--<=0)
9f002fc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fc7:	8d 50 ff             	lea    edx,[eax-0x1]
9f002fca:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fcd:	85 c0                	test   eax,eax
9f002fcf:	7f 42                	jg     9f003013 <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
                return string;
9f002fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fd4:	eb 51                	jmp    9f003027 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
	    continue;
	}
	a = string;
9f002fd6:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	while (1) {
	    if (*b == 0) {
9f002fd9:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002fdc:	84 c0                	test   al,al
9f002fde:	75 05                	jne    9f002fe5 <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
		return string;
9f002fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fe3:	eb 42                	jmp    9f003027 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
	    }
            if (len--<=0)
9f002fe5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fe8:	8d 50 ff             	lea    edx,[eax-0x1]
9f002feb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fee:	85 c0                	test   eax,eax
9f002ff0:	7f 05                	jg     9f002ff7 <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
                return string;
9f002ff2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ff5:	eb 30                	jmp    9f003027 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
	    if (*a++ != *b++) {
9f002ff7:	89 f0                	mov    eax,esi
9f002ff9:	8d 70 01             	lea    esi,[eax+0x1]
9f002ffc:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002fff:	89 d8                	mov    eax,ebx
9f003001:	8d 58 01             	lea    ebx,[eax+0x1]
9f003004:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003007:	38 c2                	cmp    dl,al
9f003009:	75 02                	jne    9f00300d <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:81
		break;
	    }
	}
9f00300b:	eb cc                	jmp    9f002fd9 <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f00300d:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
	    }
	}
	b = substring;
9f00300e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003011:	eb 01                	jmp    9f003014 <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f003013:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003014:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65 (discriminator 1)
9f003018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00301b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00301e:	84 c0                	test   al,al
9f003020:	75 95                	jne    9f002fb7 <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003022:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f003027:	83 c4 10             	add    esp,0x10
9f00302a:	5b                   	pop    ebx
9f00302b:	5e                   	pop    esi
9f00302c:	5d                   	pop    ebp
9f00302d:	c3                   	ret    

9f00302e <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:88

char* strstrI(const char* string, const char* substring)
{
9f00302e:	55                   	push   ebp
9f00302f:	89 e5                	mov    ebp,esp
9f003031:	56                   	push   esi
9f003032:	53                   	push   ebx
9f003033:	e8 9b 0d 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f003038:	05 0c 30 00 00       	add    eax,0x300c
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:96
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f00303d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    if (*b == 0) {
9f003040:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003043:	84 c0                	test   al,al
9f003045:	75 42                	jne    9f003089 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
	return string;
9f003047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00304a:	eb 4c                	jmp    9f003098 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f00304c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00304f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003052:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003055:	38 c2                	cmp    dl,al
9f003057:	75 2b                	jne    9f003084 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:104
	    continue;
	}
	a = string;
9f003059:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:106
	while (1) {
	    if (*b == 0) {
9f00305c:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00305f:	84 c0                	test   al,al
9f003061:	75 05                	jne    9f003068 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
		return string;
9f003063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003066:	eb 30                	jmp    9f003098 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:109
	    }
	    if (*a++ != *b++) {
9f003068:	89 f0                	mov    eax,esi
9f00306a:	8d 70 01             	lea    esi,[eax+0x1]
9f00306d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003070:	89 d8                	mov    eax,ebx
9f003072:	8d 58 01             	lea    ebx,[eax+0x1]
9f003075:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003078:	38 c2                	cmp    dl,al
9f00307a:	75 02                	jne    9f00307e <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:112
		break;
	    }
	}
9f00307c:	eb de                	jmp    9f00305c <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f00307e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
	    }
	}
	b = substring;
9f00307f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003082:	eb 01                	jmp    9f003085 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f003084:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003085:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100 (discriminator 1)
9f003089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00308c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00308f:	84 c0                	test   al,al
9f003091:	75 b9                	jne    9f00304c <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:115
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003093:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
}
9f003098:	5b                   	pop    ebx
9f003099:	5e                   	pop    esi
9f00309a:	5d                   	pop    ebp
9f00309b:	c3                   	ret    

9f00309c <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:119

VISIBLE char* strstr(const char* string, const char* substring)
{
9f00309c:	55                   	push   ebp
9f00309d:	89 e5                	mov    ebp,esp
9f00309f:	e8 2f 0d 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0030a4:	05 a0 2f 00 00       	add    eax,0x2fa0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120
    return strstrI(string, substring);
9f0030a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0030ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0030af:	e8 7a ff ff ff       	call   9f00302e <strstrI>
9f0030b4:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
}
9f0030b7:	c9                   	leave  
9f0030b8:	c3                   	ret    
9f0030b9:	66 90                	xchg   ax,ax
9f0030bb:	90                   	nop

9f0030bc <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f0030bc:	55                   	push   ebp
9f0030bd:	89 e5                	mov    ebp,esp
9f0030bf:	56                   	push   esi
9f0030c0:	53                   	push   ebx
9f0030c1:	83 ec 10             	sub    esp,0x10
9f0030c4:	e8 0a 0d 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0030c9:	05 7b 2f 00 00       	add    eax,0x2f7b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    uint32_t retVal=0;
9f0030ce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    GET_TICKS(retVal);
9f0030d5:	b8 70 01 00 00       	mov    eax,0x170
9f0030da:	bb 00 00 00 00       	mov    ebx,0x0
9f0030df:	b9 00 00 00 00       	mov    ecx,0x0
9f0030e4:	ba 00 00 00 00       	mov    edx,0x0
9f0030e9:	be 00 00 00 00       	mov    esi,0x0
9f0030ee:	e8 fc ff ff ff       	call   9f0030ef <getticks+0x33>
9f0030f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
    return (time_t)retVal;
9f0030f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
}
9f0030f9:	83 c4 10             	add    esp,0x10
9f0030fc:	5b                   	pop    ebx
9f0030fd:	5e                   	pop    esi
9f0030fe:	5d                   	pop    ebp
9f0030ff:	c3                   	ret    

9f003100 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003100:	55                   	push   ebp
9f003101:	89 e5                	mov    ebp,esp
9f003103:	53                   	push   ebx
9f003104:	83 ec 10             	sub    esp,0x10
9f003107:	e8 f4 0c 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f00310c:	81 c3 38 2f 00 00    	add    ebx,0x2f38
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  time_t time = *timer;
9f003112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003115:	8b 00                	mov    eax,DWORD PTR [eax]
9f003117:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f00311a:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37

  dayclock = (unsigned long) time % SECS_DAY;
9f003121:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f003124:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003129:	89 c8                	mov    eax,ecx
9f00312b:	f7 e2                	mul    edx
9f00312d:	89 d0                	mov    eax,edx
9f00312f:	c1 e8 10             	shr    eax,0x10
9f003132:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003135:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003138:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f00313e:	29 c1                	sub    ecx,eax
9f003140:	89 c8                	mov    eax,ecx
9f003142:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  dayno = (unsigned long) time / SECS_DAY;
9f003145:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003148:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f00314d:	f7 e2                	mul    edx
9f00314f:	89 d0                	mov    eax,edx
9f003151:	c1 e8 10             	shr    eax,0x10
9f003154:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  tmbuf->tm_sec = dayclock % 60;
9f003157:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f00315a:	ba 89 88 88 88       	mov    edx,0x88888889
9f00315f:	89 c8                	mov    eax,ecx
9f003161:	f7 e2                	mul    edx
9f003163:	89 d0                	mov    eax,edx
9f003165:	c1 e8 05             	shr    eax,0x5
9f003168:	89 c2                	mov    edx,eax
9f00316a:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003171:	89 c2                	mov    edx,eax
9f003173:	89 d0                	mov    eax,edx
9f003175:	c1 e0 04             	shl    eax,0x4
9f003178:	29 d0                	sub    eax,edx
9f00317a:	29 c1                	sub    ecx,eax
9f00317c:	89 c8                	mov    eax,ecx
9f00317e:	89 c2                	mov    edx,eax
9f003180:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003183:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f003185:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003188:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f00318d:	89 c8                	mov    eax,ecx
9f00318f:	f7 e2                	mul    edx
9f003191:	89 d0                	mov    eax,edx
9f003193:	c1 e8 0b             	shr    eax,0xb
9f003196:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f00319c:	29 c1                	sub    ecx,eax
9f00319e:	89 c8                	mov    eax,ecx
9f0031a0:	ba 89 88 88 88       	mov    edx,0x88888889
9f0031a5:	f7 e2                	mul    edx
9f0031a7:	89 d0                	mov    eax,edx
9f0031a9:	c1 e8 05             	shr    eax,0x5
9f0031ac:	89 c2                	mov    edx,eax
9f0031ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0031b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_hour = dayclock / 3600;
9f0031b4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0031b7:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f0031bc:	f7 e2                	mul    edx
9f0031be:	89 d0                	mov    eax,edx
9f0031c0:	c1 e8 0b             	shr    eax,0xb
9f0031c3:	89 c2                	mov    edx,eax
9f0031c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0031c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f0031cb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0031ce:	8d 48 04             	lea    ecx,[eax+0x4]
9f0031d1:	ba 25 49 92 24       	mov    edx,0x24924925
9f0031d6:	89 c8                	mov    eax,ecx
9f0031d8:	f7 e2                	mul    edx
9f0031da:	89 c8                	mov    eax,ecx
9f0031dc:	29 d0                	sub    eax,edx
9f0031de:	d1 e8                	shr    eax,1
9f0031e0:	01 d0                	add    eax,edx
9f0031e2:	c1 e8 02             	shr    eax,0x2
9f0031e5:	89 c2                	mov    edx,eax
9f0031e7:	c1 e2 03             	shl    edx,0x3
9f0031ea:	29 c2                	sub    edx,eax
9f0031ec:	89 c8                	mov    eax,ecx
9f0031ee:	29 d0                	sub    eax,edx
9f0031f0:	89 c2                	mov    edx,eax
9f0031f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0031f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f0031f8:	eb 66                	jmp    9f003260 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
    dayno -= YEARSIZE(year);
9f0031fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0031fd:	83 e0 03             	and    eax,0x3
9f003200:	85 c0                	test   eax,eax
9f003202:	75 50                	jne    9f003254 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 1)
9f003204:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003207:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00320c:	89 c8                	mov    eax,ecx
9f00320e:	f7 ea                	imul   edx
9f003210:	c1 fa 05             	sar    edx,0x5
9f003213:	89 c8                	mov    eax,ecx
9f003215:	c1 f8 1f             	sar    eax,0x1f
9f003218:	29 c2                	sub    edx,eax
9f00321a:	89 d0                	mov    eax,edx
9f00321c:	6b c0 64             	imul   eax,eax,0x64
9f00321f:	29 c1                	sub    ecx,eax
9f003221:	89 c8                	mov    eax,ecx
9f003223:	85 c0                	test   eax,eax
9f003225:	75 26                	jne    9f00324d <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 4)
9f003227:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00322a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00322f:	89 c8                	mov    eax,ecx
9f003231:	f7 ea                	imul   edx
9f003233:	c1 fa 07             	sar    edx,0x7
9f003236:	89 c8                	mov    eax,ecx
9f003238:	c1 f8 1f             	sar    eax,0x1f
9f00323b:	29 c2                	sub    edx,eax
9f00323d:	89 d0                	mov    eax,edx
9f00323f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003245:	29 c1                	sub    ecx,eax
9f003247:	89 c8                	mov    eax,ecx
9f003249:	85 c0                	test   eax,eax
9f00324b:	75 07                	jne    9f003254 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 5)
9f00324d:	b8 6e 01 00 00       	mov    eax,0x16e
9f003252:	eb 05                	jmp    9f003259 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 6)
9f003254:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
9f003259:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46 (discriminator 8)
    year++;
9f00325c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f003260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003263:	83 e0 03             	and    eax,0x3
9f003266:	85 c0                	test   eax,eax
9f003268:	75 50                	jne    9f0032ba <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f00326a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00326d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003272:	89 c8                	mov    eax,ecx
9f003274:	f7 ea                	imul   edx
9f003276:	c1 fa 05             	sar    edx,0x5
9f003279:	89 c8                	mov    eax,ecx
9f00327b:	c1 f8 1f             	sar    eax,0x1f
9f00327e:	29 c2                	sub    edx,eax
9f003280:	89 d0                	mov    eax,edx
9f003282:	6b c0 64             	imul   eax,eax,0x64
9f003285:	29 c1                	sub    ecx,eax
9f003287:	89 c8                	mov    eax,ecx
9f003289:	85 c0                	test   eax,eax
9f00328b:	75 26                	jne    9f0032b3 <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f00328d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003290:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003295:	89 c8                	mov    eax,ecx
9f003297:	f7 ea                	imul   edx
9f003299:	c1 fa 07             	sar    edx,0x7
9f00329c:	89 c8                	mov    eax,ecx
9f00329e:	c1 f8 1f             	sar    eax,0x1f
9f0032a1:	29 c2                	sub    edx,eax
9f0032a3:	89 d0                	mov    eax,edx
9f0032a5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0032ab:	29 c1                	sub    ecx,eax
9f0032ad:	89 c8                	mov    eax,ecx
9f0032af:	85 c0                	test   eax,eax
9f0032b1:	75 07                	jne    9f0032ba <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f0032b3:	b8 6e 01 00 00       	mov    eax,0x16e
9f0032b8:	eb 05                	jmp    9f0032bf <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f0032ba:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f0032bf:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0032c2:	0f 86 32 ff ff ff    	jbe    9f0031fa <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f0032c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0032cb:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f0032d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032d4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_yday = dayno;
9f0032d7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0032da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032dd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  tmbuf->tm_mon = 0;
9f0032e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032e3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f0032ea:	e9 89 00 00 00       	jmp    9f003378 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f0032ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0032f2:	83 e0 03             	and    eax,0x3
9f0032f5:	85 c0                	test   eax,eax
9f0032f7:	75 50                	jne    9f003349 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 1)
9f0032f9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0032fc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003301:	89 c8                	mov    eax,ecx
9f003303:	f7 ea                	imul   edx
9f003305:	c1 fa 05             	sar    edx,0x5
9f003308:	89 c8                	mov    eax,ecx
9f00330a:	c1 f8 1f             	sar    eax,0x1f
9f00330d:	29 c2                	sub    edx,eax
9f00330f:	89 d0                	mov    eax,edx
9f003311:	6b c0 64             	imul   eax,eax,0x64
9f003314:	29 c1                	sub    ecx,eax
9f003316:	89 c8                	mov    eax,ecx
9f003318:	85 c0                	test   eax,eax
9f00331a:	75 26                	jne    9f003342 <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 4)
9f00331c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00331f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003324:	89 c8                	mov    eax,ecx
9f003326:	f7 ea                	imul   edx
9f003328:	c1 fa 07             	sar    edx,0x7
9f00332b:	89 c8                	mov    eax,ecx
9f00332d:	c1 f8 1f             	sar    eax,0x1f
9f003330:	29 c2                	sub    edx,eax
9f003332:	89 d0                	mov    eax,edx
9f003334:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00333a:	29 c1                	sub    ecx,eax
9f00333c:	89 c8                	mov    eax,ecx
9f00333e:	85 c0                	test   eax,eax
9f003340:	75 07                	jne    9f003349 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 5)
9f003342:	ba 01 00 00 00       	mov    edx,0x1
9f003347:	eb 05                	jmp    9f00334e <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 6)
9f003349:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
9f00334e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003351:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003354:	89 d0                	mov    eax,edx
9f003356:	01 c0                	add    eax,eax
9f003358:	01 d0                	add    eax,edx
9f00335a:	c1 e0 02             	shl    eax,0x2
9f00335d:	01 c8                	add    eax,ecx
9f00335f:	8b 84 83 5c fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2a4]
9f003366:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53 (discriminator 8)
    tmbuf->tm_mon++;
9f003369:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00336c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00336f:	8d 50 01             	lea    edx,[eax+0x1]
9f003372:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003375:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00337b:	83 e0 03             	and    eax,0x3
9f00337e:	85 c0                	test   eax,eax
9f003380:	75 50                	jne    9f0033d2 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f003382:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003385:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00338a:	89 c8                	mov    eax,ecx
9f00338c:	f7 ea                	imul   edx
9f00338e:	c1 fa 05             	sar    edx,0x5
9f003391:	89 c8                	mov    eax,ecx
9f003393:	c1 f8 1f             	sar    eax,0x1f
9f003396:	29 c2                	sub    edx,eax
9f003398:	89 d0                	mov    eax,edx
9f00339a:	6b c0 64             	imul   eax,eax,0x64
9f00339d:	29 c1                	sub    ecx,eax
9f00339f:	89 c8                	mov    eax,ecx
9f0033a1:	85 c0                	test   eax,eax
9f0033a3:	75 26                	jne    9f0033cb <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f0033a5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0033a8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0033ad:	89 c8                	mov    eax,ecx
9f0033af:	f7 ea                	imul   edx
9f0033b1:	c1 fa 07             	sar    edx,0x7
9f0033b4:	89 c8                	mov    eax,ecx
9f0033b6:	c1 f8 1f             	sar    eax,0x1f
9f0033b9:	29 c2                	sub    edx,eax
9f0033bb:	89 d0                	mov    eax,edx
9f0033bd:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0033c3:	29 c1                	sub    ecx,eax
9f0033c5:	89 c8                	mov    eax,ecx
9f0033c7:	85 c0                	test   eax,eax
9f0033c9:	75 07                	jne    9f0033d2 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f0033cb:	ba 01 00 00 00       	mov    edx,0x1
9f0033d0:	eb 05                	jmp    9f0033d7 <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f0033d2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f0033d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033da:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f0033dd:	89 d0                	mov    eax,edx
9f0033df:	01 c0                	add    eax,eax
9f0033e1:	01 d0                	add    eax,edx
9f0033e3:	c1 e0 02             	shl    eax,0x2
9f0033e6:	01 c8                	add    eax,ecx
9f0033e8:	8b 84 83 5c fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2a4]
9f0033ef:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0033f2:	0f 86 f7 fe ff ff    	jbe    9f0032ef <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f0033f8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0033fb:	83 c0 01             	add    eax,0x1
9f0033fe:	89 c2                	mov    edx,eax
9f003400:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003403:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  tmbuf->tm_isdst = 0;
9f003406:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003409:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
  return tmbuf;
9f003410:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
}
9f003413:	83 c4 10             	add    esp,0x10
9f003416:	5b                   	pop    ebx
9f003417:	5d                   	pop    ebp
9f003418:	c3                   	ret    

9f003419 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f003419:	55                   	push   ebp
9f00341a:	89 e5                	mov    ebp,esp
9f00341c:	e8 b2 09 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f003421:	05 23 2c 00 00       	add    eax,0x2c23
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
    return gmtime_rI(timer, tmbuf);
9f003426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003429:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00342c:	e8 cf fc ff ff       	call   9f003100 <gmtime_rI>
9f003431:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
}
9f003434:	c9                   	leave  
9f003435:	c3                   	ret    

9f003436 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65

VISIBLE struct tm *localtime(const time_t *timer) {
9f003436:	55                   	push   ebp
9f003437:	89 e5                	mov    ebp,esp
9f003439:	53                   	push   ebx
9f00343a:	83 ec 14             	sub    esp,0x14
9f00343d:	e8 91 09 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f003442:	05 02 2c 00 00       	add    eax,0x2c02
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f003447:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00344a:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00344c:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f003452:	8b 12                	mov    edx,DWORD PTR [edx]
9f003454:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f00345a:	01 ca                	add    edx,ecx
9f00345c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
9f00345f:	83 ec 08             	sub    esp,0x8
9f003462:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
9f003468:	52                   	push   edx
9f003469:	8d 55 f4             	lea    edx,[ebp-0xc]
9f00346c:	52                   	push   edx
9f00346d:	89 c3                	mov    ebx,eax
9f00346f:	e8 7c 09 00 00       	call   9f003df0 <__x86.get_pc_thunk.ax+0x1d>
9f003474:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f003477:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00347a:	c9                   	leave  
9f00347b:	c3                   	ret    

9f00347c <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f00347c:	55                   	push   ebp
9f00347d:	89 e5                	mov    ebp,esp
9f00347f:	83 ec 10             	sub    esp,0x10
9f003482:	e8 4c 09 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f003487:	05 bd 2b 00 00       	add    eax,0x2bbd
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f00348c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00348f:	8b 12                	mov    edx,DWORD PTR [edx]
9f003491:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f003497:	8b 00                	mov    eax,DWORD PTR [eax]
9f003499:	29 c2                	sub    edx,eax
9f00349b:	89 d0                	mov    eax,edx
9f00349d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f0034a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0034a3:	8d 45 fc             	lea    eax,[ebp-0x4]
9f0034a6:	50                   	push   eax
9f0034a7:	e8 54 fc ff ff       	call   9f003100 <gmtime_rI>
9f0034ac:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f0034af:	c9                   	leave  
9f0034b0:	c3                   	ret    

9f0034b1 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f0034b1:	55                   	push   ebp
9f0034b2:	89 e5                	mov    ebp,esp
9f0034b4:	e8 1a 09 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f0034b9:	05 8b 2b 00 00       	add    eax,0x2b8b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f0034be:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0034c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0034c4:	e8 b3 ff ff ff       	call   9f00347c <localtime_rI>
9f0034c9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f0034cc:	c9                   	leave  
9f0034cd:	c3                   	ret    

9f0034ce <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f0034ce:	55                   	push   ebp
9f0034cf:	89 e5                	mov    ebp,esp
9f0034d1:	57                   	push   edi
9f0034d2:	56                   	push   esi
9f0034d3:	53                   	push   ebx
9f0034d4:	83 ec 20             	sub    esp,0x20
9f0034d7:	e8 28 09 00 00       	call   9f003e04 <__x86.get_pc_thunk.cx>
9f0034dc:	81 c1 68 2b 00 00    	add    ecx,0x2b68
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f0034e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034e5:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f0034e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034eb:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0034ed:	ba 89 88 88 88       	mov    edx,0x88888889
9f0034f2:	89 d8                	mov    eax,ebx
9f0034f4:	f7 ea                	imul   edx
9f0034f6:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0034f9:	c1 f8 05             	sar    eax,0x5
9f0034fc:	89 c2                	mov    edx,eax
9f0034fe:	89 d8                	mov    eax,ebx
9f003500:	c1 f8 1f             	sar    eax,0x1f
9f003503:	29 c2                	sub    edx,eax
9f003505:	89 d0                	mov    eax,edx
9f003507:	8d 14 06             	lea    edx,[esi+eax*1]
9f00350a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00350d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f003510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003513:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003515:	ba 89 88 88 88       	mov    edx,0x88888889
9f00351a:	89 d8                	mov    eax,ebx
9f00351c:	f7 ea                	imul   edx
9f00351e:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003521:	c1 f8 05             	sar    eax,0x5
9f003524:	89 c2                	mov    edx,eax
9f003526:	89 d8                	mov    eax,ebx
9f003528:	c1 f8 1f             	sar    eax,0x1f
9f00352b:	29 c2                	sub    edx,eax
9f00352d:	89 d0                	mov    eax,edx
9f00352f:	89 c2                	mov    edx,eax
9f003531:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003538:	89 c2                	mov    edx,eax
9f00353a:	89 d0                	mov    eax,edx
9f00353c:	c1 e0 04             	shl    eax,0x4
9f00353f:	29 d0                	sub    eax,edx
9f003541:	29 c3                	sub    ebx,eax
9f003543:	89 d8                	mov    eax,ebx
9f003545:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003548:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f00354a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00354d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00354f:	85 c0                	test   eax,eax
9f003551:	79 1c                	jns    9f00356f <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f003553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003556:	8b 00                	mov    eax,DWORD PTR [eax]
9f003558:	8d 50 3c             	lea    edx,[eax+0x3c]
9f00355b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00355e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f003560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003563:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003566:	8d 50 ff             	lea    edx,[eax-0x1]
9f003569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00356c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f00356f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003572:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f003575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003578:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00357b:	ba 89 88 88 88       	mov    edx,0x88888889
9f003580:	89 d8                	mov    eax,ebx
9f003582:	f7 ea                	imul   edx
9f003584:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003587:	c1 f8 05             	sar    eax,0x5
9f00358a:	89 c2                	mov    edx,eax
9f00358c:	89 d8                	mov    eax,ebx
9f00358e:	c1 f8 1f             	sar    eax,0x1f
9f003591:	29 c2                	sub    edx,eax
9f003593:	89 d0                	mov    eax,edx
9f003595:	8d 14 06             	lea    edx,[esi+eax*1]
9f003598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00359b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f00359e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035a1:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f0035a4:	ba 89 88 88 88       	mov    edx,0x88888889
9f0035a9:	89 d8                	mov    eax,ebx
9f0035ab:	f7 ea                	imul   edx
9f0035ad:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0035b0:	c1 f8 05             	sar    eax,0x5
9f0035b3:	89 c2                	mov    edx,eax
9f0035b5:	89 d8                	mov    eax,ebx
9f0035b7:	c1 f8 1f             	sar    eax,0x1f
9f0035ba:	29 c2                	sub    edx,eax
9f0035bc:	89 d0                	mov    eax,edx
9f0035be:	89 c2                	mov    edx,eax
9f0035c0:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0035c7:	89 c2                	mov    edx,eax
9f0035c9:	89 d0                	mov    eax,edx
9f0035cb:	c1 e0 04             	shl    eax,0x4
9f0035ce:	29 d0                	sub    eax,edx
9f0035d0:	29 c3                	sub    ebx,eax
9f0035d2:	89 d8                	mov    eax,ebx
9f0035d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0035d7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f0035da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0035e0:	85 c0                	test   eax,eax
9f0035e2:	79 1e                	jns    9f003602 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f0035e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0035ea:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0035ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f0035f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0035f9:	8d 50 ff             	lea    edx,[eax-0x1]
9f0035fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f003602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003605:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f003608:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00360d:	89 d8                	mov    eax,ebx
9f00360f:	f7 ea                	imul   edx
9f003611:	c1 fa 02             	sar    edx,0x2
9f003614:	89 d8                	mov    eax,ebx
9f003616:	c1 f8 1f             	sar    eax,0x1f
9f003619:	29 c2                	sub    edx,eax
9f00361b:	89 d0                	mov    eax,edx
9f00361d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f003620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003623:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f003626:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00362b:	89 d8                	mov    eax,ebx
9f00362d:	f7 ea                	imul   edx
9f00362f:	c1 fa 02             	sar    edx,0x2
9f003632:	89 d8                	mov    eax,ebx
9f003634:	c1 f8 1f             	sar    eax,0x1f
9f003637:	29 c2                	sub    edx,eax
9f003639:	89 d0                	mov    eax,edx
9f00363b:	01 c0                	add    eax,eax
9f00363d:	01 d0                	add    eax,edx
9f00363f:	c1 e0 03             	shl    eax,0x3
9f003642:	29 c3                	sub    ebx,eax
9f003644:	89 da                	mov    edx,ebx
9f003646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003649:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f00364c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00364f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f003652:	85 c0                	test   eax,eax
9f003654:	79 13                	jns    9f003669 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f003656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003659:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f00365c:	8d 50 18             	lea    edx,[eax+0x18]
9f00365f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f003665:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f003669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00366c:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f00366f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003672:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003675:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00367a:	89 d8                	mov    eax,ebx
9f00367c:	f7 ea                	imul   edx
9f00367e:	d1 fa                	sar    edx,1
9f003680:	89 d8                	mov    eax,ebx
9f003682:	c1 f8 1f             	sar    eax,0x1f
9f003685:	29 c2                	sub    edx,eax
9f003687:	89 d0                	mov    eax,edx
9f003689:	8d 14 06             	lea    edx,[esi+eax*1]
9f00368c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00368f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f003692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003695:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003698:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00369d:	89 d8                	mov    eax,ebx
9f00369f:	f7 ea                	imul   edx
9f0036a1:	d1 fa                	sar    edx,1
9f0036a3:	89 d8                	mov    eax,ebx
9f0036a5:	c1 f8 1f             	sar    eax,0x1f
9f0036a8:	29 c2                	sub    edx,eax
9f0036aa:	89 d0                	mov    eax,edx
9f0036ac:	01 c0                	add    eax,eax
9f0036ae:	01 d0                	add    eax,edx
9f0036b0:	c1 e0 02             	shl    eax,0x2
9f0036b3:	29 c3                	sub    ebx,eax
9f0036b5:	89 da                	mov    edx,ebx
9f0036b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036ba:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f0036bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0036c3:	85 c0                	test   eax,eax
9f0036c5:	79 1e                	jns    9f0036e5 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f0036c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0036cd:	8d 50 0c             	lea    edx,[eax+0xc]
9f0036d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f0036d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036d9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0036dc:	8d 50 ff             	lea    edx,[eax-0x1]
9f0036df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036e2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f0036e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0036eb:	83 e8 01             	sub    eax,0x1
9f0036ee:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f0036f1:	e9 c1 00 00 00       	jmp    9f0037b7 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f0036f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0036fc:	8d 50 ff             	lea    edx,[eax-0x1]
9f0036ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003702:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f003705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003708:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00370b:	85 c0                	test   eax,eax
9f00370d:	79 19                	jns    9f003728 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f00370f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003712:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003715:	8d 50 ff             	lea    edx,[eax-0x1]
9f003718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00371b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f00371e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003721:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f003728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00372b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00372e:	83 e0 03             	and    eax,0x3
9f003731:	85 c0                	test   eax,eax
9f003733:	75 62                	jne    9f003797 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f003735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003738:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00373b:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003741:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003746:	89 d8                	mov    eax,ebx
9f003748:	f7 ea                	imul   edx
9f00374a:	c1 fa 05             	sar    edx,0x5
9f00374d:	89 d8                	mov    eax,ebx
9f00374f:	c1 f8 1f             	sar    eax,0x1f
9f003752:	29 c2                	sub    edx,eax
9f003754:	89 d0                	mov    eax,edx
9f003756:	6b c0 64             	imul   eax,eax,0x64
9f003759:	29 c3                	sub    ebx,eax
9f00375b:	89 d8                	mov    eax,ebx
9f00375d:	85 c0                	test   eax,eax
9f00375f:	75 2f                	jne    9f003790 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f003761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003764:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003767:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00376d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003772:	89 d8                	mov    eax,ebx
9f003774:	f7 ea                	imul   edx
9f003776:	c1 fa 07             	sar    edx,0x7
9f003779:	89 d8                	mov    eax,ebx
9f00377b:	c1 f8 1f             	sar    eax,0x1f
9f00377e:	29 c2                	sub    edx,eax
9f003780:	89 d0                	mov    eax,edx
9f003782:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003788:	29 c3                	sub    ebx,eax
9f00378a:	89 d8                	mov    eax,ebx
9f00378c:	85 c0                	test   eax,eax
9f00378e:	75 07                	jne    9f003797 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f003790:	ba 01 00 00 00       	mov    edx,0x1
9f003795:	eb 05                	jmp    9f00379c <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f003797:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f00379c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00379f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0037a2:	89 d0                	mov    eax,edx
9f0037a4:	01 c0                	add    eax,eax
9f0037a6:	01 d0                	add    eax,edx
9f0037a8:	c1 e0 02             	shl    eax,0x2
9f0037ab:	01 d8                	add    eax,ebx
9f0037ad:	8b 84 81 5c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2a4]
9f0037b4:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f0037b7:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0037bb:	0f 88 35 ff ff ff    	js     9f0036f6 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f0037c1:	e9 c2 00 00 00       	jmp    9f003888 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0037c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037c9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0037cc:	83 e0 03             	and    eax,0x3
9f0037cf:	85 c0                	test   eax,eax
9f0037d1:	75 62                	jne    9f003835 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f0037d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0037d9:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0037df:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0037e4:	89 d8                	mov    eax,ebx
9f0037e6:	f7 ea                	imul   edx
9f0037e8:	c1 fa 05             	sar    edx,0x5
9f0037eb:	89 d8                	mov    eax,ebx
9f0037ed:	c1 f8 1f             	sar    eax,0x1f
9f0037f0:	29 c2                	sub    edx,eax
9f0037f2:	89 d0                	mov    eax,edx
9f0037f4:	6b c0 64             	imul   eax,eax,0x64
9f0037f7:	29 c3                	sub    ebx,eax
9f0037f9:	89 d8                	mov    eax,ebx
9f0037fb:	85 c0                	test   eax,eax
9f0037fd:	75 2f                	jne    9f00382e <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f0037ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003802:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003805:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00380b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003810:	89 d8                	mov    eax,ebx
9f003812:	f7 ea                	imul   edx
9f003814:	c1 fa 07             	sar    edx,0x7
9f003817:	89 d8                	mov    eax,ebx
9f003819:	c1 f8 1f             	sar    eax,0x1f
9f00381c:	29 c2                	sub    edx,eax
9f00381e:	89 d0                	mov    eax,edx
9f003820:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003826:	29 c3                	sub    ebx,eax
9f003828:	89 d8                	mov    eax,ebx
9f00382a:	85 c0                	test   eax,eax
9f00382c:	75 07                	jne    9f003835 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f00382e:	ba 01 00 00 00       	mov    edx,0x1
9f003833:	eb 05                	jmp    9f00383a <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f003835:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f00383a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00383d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003840:	89 d0                	mov    eax,edx
9f003842:	01 c0                	add    eax,eax
9f003844:	01 d0                	add    eax,edx
9f003846:	c1 e0 02             	shl    eax,0x2
9f003849:	01 d8                	add    eax,ebx
9f00384b:	8b 84 81 5c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2a4]
9f003852:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f003855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003858:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00385b:	8d 50 01             	lea    edx,[eax+0x1]
9f00385e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003861:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f003864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003867:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00386a:	83 f8 0c             	cmp    eax,0xc
9f00386d:	75 19                	jne    9f003888 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f00386f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003872:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f003879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00387c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00387f:	8d 50 01             	lea    edx,[eax+0x1]
9f003882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f003888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00388b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00388e:	83 e0 03             	and    eax,0x3
9f003891:	85 c0                	test   eax,eax
9f003893:	75 62                	jne    9f0038f7 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f003895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003898:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00389b:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0038a1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0038a6:	89 d8                	mov    eax,ebx
9f0038a8:	f7 ea                	imul   edx
9f0038aa:	c1 fa 05             	sar    edx,0x5
9f0038ad:	89 d8                	mov    eax,ebx
9f0038af:	c1 f8 1f             	sar    eax,0x1f
9f0038b2:	29 c2                	sub    edx,eax
9f0038b4:	89 d0                	mov    eax,edx
9f0038b6:	6b c0 64             	imul   eax,eax,0x64
9f0038b9:	29 c3                	sub    ebx,eax
9f0038bb:	89 d8                	mov    eax,ebx
9f0038bd:	85 c0                	test   eax,eax
9f0038bf:	75 2f                	jne    9f0038f0 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f0038c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0038c7:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0038cd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0038d2:	89 d8                	mov    eax,ebx
9f0038d4:	f7 ea                	imul   edx
9f0038d6:	c1 fa 07             	sar    edx,0x7
9f0038d9:	89 d8                	mov    eax,ebx
9f0038db:	c1 f8 1f             	sar    eax,0x1f
9f0038de:	29 c2                	sub    edx,eax
9f0038e0:	89 d0                	mov    eax,edx
9f0038e2:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0038e8:	29 c3                	sub    ebx,eax
9f0038ea:	89 d8                	mov    eax,ebx
9f0038ec:	85 c0                	test   eax,eax
9f0038ee:	75 07                	jne    9f0038f7 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f0038f0:	ba 01 00 00 00       	mov    edx,0x1
9f0038f5:	eb 05                	jmp    9f0038fc <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f0038f7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f0038fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038ff:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003902:	89 d0                	mov    eax,edx
9f003904:	01 c0                	add    eax,eax
9f003906:	01 d0                	add    eax,edx
9f003908:	c1 e0 02             	shl    eax,0x2
9f00390b:	01 d8                	add    eax,ebx
9f00390d:	8b 84 81 5c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2a4]
9f003914:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003917:	0f 8e a9 fe ff ff    	jle    9f0037c6 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f00391d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003920:	8d 50 01             	lea    edx,[eax+0x1]
9f003923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003926:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f003929:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f003930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003933:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003936:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f003939:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f00393f:	39 d0                	cmp    eax,edx
9f003941:	7d 0a                	jge    9f00394d <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f003943:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f003948:	e9 d0 03 00 00       	jmp    9f003d1d <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f00394d:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f003954:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f00395b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f003962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003965:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003968:	05 6c 07 00 00       	add    eax,0x76c
9f00396d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f003970:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003973:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003976:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f00397b:	7e 07                	jle    9f003984 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f00397d:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f003984:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003987:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00398a:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f003990:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f003993:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f003998:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f00399b:	89 c2                	mov    edx,eax
9f00399d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0039a0:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0039a3:	8d 58 03             	lea    ebx,[eax+0x3]
9f0039a6:	85 c0                	test   eax,eax
9f0039a8:	0f 48 c3             	cmovs  eax,ebx
9f0039ab:	c1 f8 02             	sar    eax,0x2
9f0039ae:	83 c0 01             	add    eax,0x1
9f0039b1:	39 c2                	cmp    edx,eax
9f0039b3:	7d 04                	jge    9f0039b9 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f0039b5:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f0039b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0039bc:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0039bf:	8d 50 03             	lea    edx,[eax+0x3]
9f0039c2:	85 c0                	test   eax,eax
9f0039c4:	0f 48 c2             	cmovs  eax,edx
9f0039c7:	c1 f8 02             	sar    eax,0x2
9f0039ca:	89 c3                	mov    ebx,eax
9f0039cc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0039cf:	83 e0 03             	and    eax,0x3
9f0039d2:	85 c0                	test   eax,eax
9f0039d4:	74 29                	je     9f0039ff <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f0039d6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0039d9:	99                   	cdq    
9f0039da:	c1 ea 1e             	shr    edx,0x1e
9f0039dd:	01 d0                	add    eax,edx
9f0039df:	83 e0 03             	and    eax,0x3
9f0039e2:	29 d0                	sub    eax,edx
9f0039e4:	89 c6                	mov    esi,eax
9f0039e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0039e9:	99                   	cdq    
9f0039ea:	c1 ea 1e             	shr    edx,0x1e
9f0039ed:	01 d0                	add    eax,edx
9f0039ef:	83 e0 03             	and    eax,0x3
9f0039f2:	29 d0                	sub    eax,edx
9f0039f4:	39 c6                	cmp    esi,eax
9f0039f6:	7d 07                	jge    9f0039ff <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f0039f8:	b8 01 00 00 00       	mov    eax,0x1
9f0039fd:	eb 05                	jmp    9f003a04 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f0039ff:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f003a04:	01 d8                	add    eax,ebx
9f003a06:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f003a09:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003a0c:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003a0f:	89 c3                	mov    ebx,eax
9f003a11:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a16:	89 d8                	mov    eax,ebx
9f003a18:	f7 ea                	imul   edx
9f003a1a:	c1 fa 05             	sar    edx,0x5
9f003a1d:	89 d8                	mov    eax,ebx
9f003a1f:	c1 f8 1f             	sar    eax,0x1f
9f003a22:	89 d7                	mov    edi,edx
9f003a24:	29 c7                	sub    edi,eax
9f003a26:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003a29:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a2e:	89 d8                	mov    eax,ebx
9f003a30:	f7 ea                	imul   edx
9f003a32:	c1 fa 05             	sar    edx,0x5
9f003a35:	89 d8                	mov    eax,ebx
9f003a37:	c1 f8 1f             	sar    eax,0x1f
9f003a3a:	29 c2                	sub    edx,eax
9f003a3c:	89 d0                	mov    eax,edx
9f003a3e:	6b c0 64             	imul   eax,eax,0x64
9f003a41:	29 c3                	sub    ebx,eax
9f003a43:	89 d8                	mov    eax,ebx
9f003a45:	85 c0                	test   eax,eax
9f003a47:	74 49                	je     9f003a92 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f003a49:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003a4c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a51:	89 d8                	mov    eax,ebx
9f003a53:	f7 ea                	imul   edx
9f003a55:	c1 fa 05             	sar    edx,0x5
9f003a58:	89 d8                	mov    eax,ebx
9f003a5a:	c1 f8 1f             	sar    eax,0x1f
9f003a5d:	89 d6                	mov    esi,edx
9f003a5f:	29 c6                	sub    esi,eax
9f003a61:	6b c6 64             	imul   eax,esi,0x64
9f003a64:	89 de                	mov    esi,ebx
9f003a66:	29 c6                	sub    esi,eax
9f003a68:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f003a6b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a70:	89 d8                	mov    eax,ebx
9f003a72:	f7 ea                	imul   edx
9f003a74:	c1 fa 05             	sar    edx,0x5
9f003a77:	89 d8                	mov    eax,ebx
9f003a79:	c1 f8 1f             	sar    eax,0x1f
9f003a7c:	29 c2                	sub    edx,eax
9f003a7e:	89 d0                	mov    eax,edx
9f003a80:	6b c0 64             	imul   eax,eax,0x64
9f003a83:	29 c3                	sub    ebx,eax
9f003a85:	89 d8                	mov    eax,ebx
9f003a87:	39 c6                	cmp    esi,eax
9f003a89:	7d 07                	jge    9f003a92 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f003a8b:	b8 01 00 00 00       	mov    eax,0x1
9f003a90:	eb 05                	jmp    9f003a97 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f003a92:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f003a97:	01 f8                	add    eax,edi
9f003a99:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f003a9c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003a9f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003aa2:	89 c3                	mov    ebx,eax
9f003aa4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003aa9:	89 d8                	mov    eax,ebx
9f003aab:	f7 ea                	imul   edx
9f003aad:	c1 fa 07             	sar    edx,0x7
9f003ab0:	89 d8                	mov    eax,ebx
9f003ab2:	c1 f8 1f             	sar    eax,0x1f
9f003ab5:	89 d7                	mov    edi,edx
9f003ab7:	29 c7                	sub    edi,eax
9f003ab9:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003abc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003ac1:	89 d8                	mov    eax,ebx
9f003ac3:	f7 ea                	imul   edx
9f003ac5:	c1 fa 07             	sar    edx,0x7
9f003ac8:	89 d8                	mov    eax,ebx
9f003aca:	c1 f8 1f             	sar    eax,0x1f
9f003acd:	29 c2                	sub    edx,eax
9f003acf:	89 d0                	mov    eax,edx
9f003ad1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003ad7:	29 c3                	sub    ebx,eax
9f003ad9:	89 d8                	mov    eax,ebx
9f003adb:	85 c0                	test   eax,eax
9f003add:	74 4f                	je     9f003b2e <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f003adf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003ae2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003ae7:	89 d8                	mov    eax,ebx
9f003ae9:	f7 ea                	imul   edx
9f003aeb:	c1 fa 07             	sar    edx,0x7
9f003aee:	89 d8                	mov    eax,ebx
9f003af0:	c1 f8 1f             	sar    eax,0x1f
9f003af3:	89 d6                	mov    esi,edx
9f003af5:	29 c6                	sub    esi,eax
9f003af7:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f003afd:	89 de                	mov    esi,ebx
9f003aff:	29 c6                	sub    esi,eax
9f003b01:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f003b04:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b09:	89 d8                	mov    eax,ebx
9f003b0b:	f7 ea                	imul   edx
9f003b0d:	c1 fa 07             	sar    edx,0x7
9f003b10:	89 d8                	mov    eax,ebx
9f003b12:	c1 f8 1f             	sar    eax,0x1f
9f003b15:	29 c2                	sub    edx,eax
9f003b17:	89 d0                	mov    eax,edx
9f003b19:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003b1f:	29 c3                	sub    ebx,eax
9f003b21:	89 d8                	mov    eax,ebx
9f003b23:	39 c6                	cmp    esi,eax
9f003b25:	7d 07                	jge    9f003b2e <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f003b27:	b8 01 00 00 00       	mov    eax,0x1
9f003b2c:	eb 05                	jmp    9f003b33 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f003b2e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f003b33:	01 f8                	add    eax,edi
9f003b35:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f003b38:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f003b3f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003b42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f003b45:	eb 7b                	jmp    9f003bc2 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f003b47:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003b4a:	83 e0 03             	and    eax,0x3
9f003b4d:	85 c0                	test   eax,eax
9f003b4f:	75 50                	jne    9f003ba1 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f003b51:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003b54:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b59:	89 d8                	mov    eax,ebx
9f003b5b:	f7 ea                	imul   edx
9f003b5d:	c1 fa 05             	sar    edx,0x5
9f003b60:	89 d8                	mov    eax,ebx
9f003b62:	c1 f8 1f             	sar    eax,0x1f
9f003b65:	29 c2                	sub    edx,eax
9f003b67:	89 d0                	mov    eax,edx
9f003b69:	6b c0 64             	imul   eax,eax,0x64
9f003b6c:	29 c3                	sub    ebx,eax
9f003b6e:	89 d8                	mov    eax,ebx
9f003b70:	85 c0                	test   eax,eax
9f003b72:	75 26                	jne    9f003b9a <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f003b74:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003b77:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b7c:	89 d8                	mov    eax,ebx
9f003b7e:	f7 ea                	imul   edx
9f003b80:	c1 fa 07             	sar    edx,0x7
9f003b83:	89 d8                	mov    eax,ebx
9f003b85:	c1 f8 1f             	sar    eax,0x1f
9f003b88:	29 c2                	sub    edx,eax
9f003b8a:	89 d0                	mov    eax,edx
9f003b8c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003b92:	29 c3                	sub    ebx,eax
9f003b94:	89 d8                	mov    eax,ebx
9f003b96:	85 c0                	test   eax,eax
9f003b98:	75 07                	jne    9f003ba1 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f003b9a:	ba 01 00 00 00       	mov    edx,0x1
9f003b9f:	eb 05                	jmp    9f003ba6 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f003ba1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f003ba6:	89 d0                	mov    eax,edx
9f003ba8:	01 c0                	add    eax,eax
9f003baa:	01 d0                	add    eax,edx
9f003bac:	c1 e0 02             	shl    eax,0x2
9f003baf:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f003bb2:	01 d0                	add    eax,edx
9f003bb4:	8b 84 81 5c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2a4]
9f003bbb:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f003bbe:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f003bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bc5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003bc8:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003bcb:	0f 8f 76 ff ff ff    	jg     9f003b47 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f003bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f003bd7:	83 e8 01             	sub    eax,0x1
9f003bda:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f003bdd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003be0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003be3:	01 d0                	add    eax,edx
9f003be5:	85 c0                	test   eax,eax
9f003be7:	79 04                	jns    9f003bed <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f003be9:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f003bed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003bf0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f003bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bf6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003bf9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f003bfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003bff:	8d 58 04             	lea    ebx,[eax+0x4]
9f003c02:	ba 93 24 49 92       	mov    edx,0x92492493
9f003c07:	89 d8                	mov    eax,ebx
9f003c09:	f7 ea                	imul   edx
9f003c0b:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003c0e:	c1 f8 02             	sar    eax,0x2
9f003c11:	89 c2                	mov    edx,eax
9f003c13:	89 d8                	mov    eax,ebx
9f003c15:	c1 f8 1f             	sar    eax,0x1f
9f003c18:	29 c2                	sub    edx,eax
9f003c1a:	89 d0                	mov    eax,edx
9f003c1c:	89 c2                	mov    edx,eax
9f003c1e:	c1 e2 03             	shl    edx,0x3
9f003c21:	29 c2                	sub    edx,eax
9f003c23:	89 d8                	mov    eax,ebx
9f003c25:	29 d0                	sub    eax,edx
9f003c27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003c2a:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f003c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c30:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f003c33:	c1 e0 02             	shl    eax,0x2
9f003c36:	89 c2                	mov    edx,eax
9f003c38:	c1 e2 04             	shl    edx,0x4
9f003c3b:	29 c2                	sub    edx,eax
9f003c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003c43:	01 d0                	add    eax,edx
9f003c45:	c1 e0 02             	shl    eax,0x2
9f003c48:	89 c2                	mov    edx,eax
9f003c4a:	c1 e2 04             	shl    edx,0x4
9f003c4d:	29 c2                	sub    edx,eax
9f003c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c52:	8b 00                	mov    eax,DWORD PTR [eax]
9f003c54:	01 d0                	add    eax,edx
9f003c56:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f003c59:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f003c5e:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f003c61:	89 c3                	mov    ebx,eax
9f003c63:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003c68:	89 d8                	mov    eax,ebx
9f003c6a:	f7 ea                	imul   edx
9f003c6c:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003c6f:	c1 f8 10             	sar    eax,0x10
9f003c72:	89 c2                	mov    edx,eax
9f003c74:	89 d8                	mov    eax,ebx
9f003c76:	c1 f8 1f             	sar    eax,0x1f
9f003c79:	29 c2                	sub    edx,eax
9f003c7b:	89 d0                	mov    eax,edx
9f003c7d:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003c80:	7d 04                	jge    9f003c86 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f003c82:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f003c86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003c89:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003c8f:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003c92:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003c98:	8b 00                	mov    eax,DWORD PTR [eax]
9f003c9a:	85 c0                	test   eax,eax
9f003c9c:	7e 16                	jle    9f003cb4 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f003c9e:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003ca4:	8b 00                	mov    eax,DWORD PTR [eax]
9f003ca6:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f003cab:	29 c2                	sub    edx,eax
9f003cad:	89 d0                	mov    eax,edx
9f003caf:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003cb2:	7c 1b                	jl     9f003ccf <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003cb4:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003cba:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003cbc:	85 c0                	test   eax,eax
9f003cbe:	79 13                	jns    9f003cd3 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003cc0:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003cc6:	8b 00                	mov    eax,DWORD PTR [eax]
9f003cc8:	f7 d8                	neg    eax
9f003cca:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003ccd:	7e 04                	jle    9f003cd3 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f003ccf:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f003cd3:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003cd9:	8b 00                	mov    eax,DWORD PTR [eax]
9f003cdb:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f003cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ce1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f003ce4:	85 c0                	test   eax,eax
9f003ce6:	74 0b                	je     9f003cf3 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f003ce8:	8b 81 74 00 00 00    	mov    eax,DWORD PTR [ecx+0x74]
9f003cee:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f003cf1:	eb 07                	jmp    9f003cfa <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f003cf3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f003cfa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003cfd:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003d00:	7e 04                	jle    9f003d06 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f003d02:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f003d06:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003d09:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f003d0c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f003d10:	74 08                	je     9f003d1a <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f003d12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003d15:	83 e8 02             	sub    eax,0x2
9f003d18:	eb 03                	jmp    9f003d1d <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f003d1a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f003d1d:	83 c4 20             	add    esp,0x20
9f003d20:	5b                   	pop    ebx
9f003d21:	5e                   	pop    esi
9f003d22:	5f                   	pop    edi
9f003d23:	5d                   	pop    ebp
9f003d24:	c3                   	ret    

9f003d25 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f003d25:	55                   	push   ebp
9f003d26:	89 e5                	mov    ebp,esp
9f003d28:	56                   	push   esi
9f003d29:	53                   	push   ebx
9f003d2a:	83 ec 14             	sub    esp,0x14
9f003d2d:	e8 a1 00 00 00       	call   9f003dd3 <__x86.get_pc_thunk.ax>
9f003d32:	05 12 23 00 00       	add    eax,0x2312
9f003d37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d3a:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f003d3d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f003d44:	b8 71 01 00 00       	mov    eax,0x171
9f003d49:	bb 00 00 00 00       	mov    ebx,0x0
9f003d4e:	b9 00 00 00 00       	mov    ecx,0x0
9f003d53:	ba 00 00 00 00       	mov    edx,0x0
9f003d58:	be 00 00 00 00       	mov    esi,0x0
9f003d5d:	e8 fc ff ff ff       	call   9f003d5e <gettime+0x39>
9f003d62:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f003d65:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f003d69:	74 11                	je     9f003d7c <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f003d6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003d6e:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003d71:	50                   	push   eax
9f003d72:	e8 05 f7 ff ff       	call   9f00347c <localtime_rI>
9f003d77:	83 c4 08             	add    esp,0x8
9f003d7a:	eb 0f                	jmp    9f003d8b <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f003d7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003d7f:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003d82:	50                   	push   eax
9f003d83:	e8 78 f3 ff ff       	call   9f003100 <gmtime_rI>
9f003d88:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f003d8b:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003d8e:	5b                   	pop    ebx
9f003d8f:	5e                   	pop    esi
9f003d90:	5d                   	pop    ebp
9f003d91:	c3                   	ret    

9f003d92 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203

VISIBLE time_t time (time_t *result)
{
9f003d92:	55                   	push   ebp
9f003d93:	89 e5                	mov    ebp,esp
9f003d95:	53                   	push   ebx
9f003d96:	83 ec 14             	sub    esp,0x14
9f003d99:	e8 62 00 00 00       	call   9f003e00 <__x86.get_pc_thunk.bx>
9f003d9e:	81 c3 a6 22 00 00    	add    ebx,0x22a6
/home/yogi/src/os/aproj/libChrisOS/src/time.c:204
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f003da4:	83 ec 0c             	sub    esp,0xc
9f003da7:	68 71 01 00 00       	push   0x171
9f003dac:	e8 df cd ff ff       	call   9f000b90 <do_syscall0>
9f003db1:	83 c4 10             	add    esp,0x10
9f003db4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:205
    memcpyI(result, &ticks, 4);
9f003db7:	83 ec 04             	sub    esp,0x4
9f003dba:	6a 04                	push   0x4
9f003dbc:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003dbf:	50                   	push   eax
9f003dc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003dc3:	e8 68 dd ff ff       	call   9f001b30 <memcpyI>
9f003dc8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206
    return ticks;
9f003dcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
9f003dce:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003dd1:	c9                   	leave  
9f003dd2:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f003dd3 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f003dd3:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f003dd6:	c3                   	ret    

Disassembly of section .plt:

9f003de0 <.plt>:
9f003de0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f003de6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f003dec:	00 00                	add    BYTE PTR [eax],al
9f003dee:	00 00                	add    BYTE PTR [eax],al
9f003df0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f003df6:	68 00 00 00 00       	push   0x0
9f003dfb:	e9 e0 ff ff ff       	jmp    9f003de0 <__x86.get_pc_thunk.ax+0xd>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f003e00 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f003e00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f003e03:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f003e04 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f003e04:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f003e07:	c3                   	ret    

Disassembly of section .eh_frame:

9f003e08 <.eh_frame>:
9f003e08:	14 00                	adc    al,0x0
9f003e0a:	00 00                	add    BYTE PTR [eax],al
9f003e0c:	00 00                	add    BYTE PTR [eax],al
9f003e0e:	00 00                	add    BYTE PTR [eax],al
9f003e10:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f003e13:	00 01                	add    BYTE PTR [ecx],al
9f003e15:	7c 08                	jl     9f003e1f <__x86.get_pc_thunk.cx+0x1b>
9f003e17:	01 1b                	add    DWORD PTR [ebx],ebx
9f003e19:	0c 04                	or     al,0x4
9f003e1b:	04 88                	add    al,0x88
9f003e1d:	01 00                	add    DWORD PTR [eax],eax
9f003e1f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003e22:	00 00                	add    BYTE PTR [eax],al
9f003e24:	1c 00                	sbb    al,0x0
9f003e26:	00 00                	add    BYTE PTR [eax],al
9f003e28:	d8 c1                	fadd   st,st(1)
9f003e2a:	ff                   	(bad)  
9f003e2b:	ff                   	(bad)  
9f003e2c:	38 00                	cmp    BYTE PTR [eax],al
9f003e2e:	00 00                	add    BYTE PTR [eax],al
9f003e30:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003e33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e39:	74 c5                	je     9f003e00 <__x86.get_pc_thunk.bx>
9f003e3b:	0c 04                	or     al,0x4
9f003e3d:	04 00                	add    al,0x0
9f003e3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003e42:	00 00                	add    BYTE PTR [eax],al
9f003e44:	3c 00                	cmp    al,0x0
9f003e46:	00 00                	add    BYTE PTR [eax],al
9f003e48:	f0 c1 ff ff          	lock sar edi,0xff
9f003e4c:	38 00                	cmp    BYTE PTR [eax],al
9f003e4e:	00 00                	add    BYTE PTR [eax],al
9f003e50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003e53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e59:	74 c5                	je     9f003e20 <__x86.get_pc_thunk.cx+0x1c>
9f003e5b:	0c 04                	or     al,0x4
9f003e5d:	04 00                	add    al,0x0
9f003e5f:	00 10                	add    BYTE PTR [eax],dl
9f003e61:	00 00                	add    BYTE PTR [eax],al
9f003e63:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f003e67:	00 6b ff             	add    BYTE PTR [ebx-0x1],ch
9f003e6a:	ff                   	(bad)  
9f003e6b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f003e6e:	00 00                	add    BYTE PTR [eax],al
9f003e70:	00 00                	add    BYTE PTR [eax],al
9f003e72:	00 00                	add    BYTE PTR [eax],al
9f003e74:	24 00                	and    al,0x0
9f003e76:	00 00                	add    BYTE PTR [eax],al
9f003e78:	70 00                	jo     9f003e7a <__x86.get_pc_thunk.cx+0x76>
9f003e7a:	00 00                	add    BYTE PTR [eax],al
9f003e7c:	f4                   	hlt    
9f003e7d:	c1 ff ff             	sar    edi,0xff
9f003e80:	55                   	push   ebp
9f003e81:	00 00                	add    BYTE PTR [eax],al
9f003e83:	00 00                	add    BYTE PTR [eax],al
9f003e85:	41                   	inc    ecx
9f003e86:	0e                   	push   cs
9f003e87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e8d:	42                   	inc    edx
9f003e8e:	86 03                	xchg   BYTE PTR [ebx],al
9f003e90:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003e94:	c3                   	ret    
9f003e95:	41                   	inc    ecx
9f003e96:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003e9a:	04 04                	add    al,0x4
9f003e9c:	24 00                	and    al,0x0
9f003e9e:	00 00                	add    BYTE PTR [eax],al
9f003ea0:	98                   	cwde   
9f003ea1:	00 00                	add    BYTE PTR [eax],al
9f003ea3:	00 21                	add    BYTE PTR [ecx],ah
9f003ea5:	c2 ff ff             	ret    0xffff
9f003ea8:	55                   	push   ebp
9f003ea9:	00 00                	add    BYTE PTR [eax],al
9f003eab:	00 00                	add    BYTE PTR [eax],al
9f003ead:	41                   	inc    ecx
9f003eae:	0e                   	push   cs
9f003eaf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003eb5:	42                   	inc    edx
9f003eb6:	86 03                	xchg   BYTE PTR [ebx],al
9f003eb8:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003ebc:	c3                   	ret    
9f003ebd:	41                   	inc    ecx
9f003ebe:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003ec2:	04 04                	add    al,0x4
9f003ec4:	24 00                	and    al,0x0
9f003ec6:	00 00                	add    BYTE PTR [eax],al
9f003ec8:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f003ecb:	00 50 c2             	add    BYTE PTR [eax-0x3e],dl
9f003ece:	ff                   	(bad)  
9f003ecf:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f003ed5:	41                   	inc    ecx
9f003ed6:	0e                   	push   cs
9f003ed7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003edd:	42                   	inc    edx
9f003ede:	86 03                	xchg   BYTE PTR [ebx],al
9f003ee0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f003ee4:	c3                   	ret    
9f003ee5:	41                   	inc    ecx
9f003ee6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003eea:	04 04                	add    al,0x4
9f003eec:	10 00                	adc    BYTE PTR [eax],al
9f003eee:	00 00                	add    BYTE PTR [eax],al
9f003ef0:	e8 00 00 00 0c       	call   ab003ef5 <tmbuf+0xbffde15>
9f003ef5:	ff                   	(bad)  
9f003ef6:	ff                   	(bad)  
9f003ef7:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f003efa:	00 00                	add    BYTE PTR [eax],al
9f003efc:	00 00                	add    BYTE PTR [eax],al
9f003efe:	00 00                	add    BYTE PTR [eax],al
9f003f00:	20 00                	and    BYTE PTR [eax],al
9f003f02:	00 00                	add    BYTE PTR [eax],al
9f003f04:	fc                   	cld    
9f003f05:	00 00                	add    BYTE PTR [eax],al
9f003f07:	00 ac c2 ff ff 77 00 	add    BYTE PTR [edx+eax*8+0x77ffff],ch
9f003f0e:	00 00                	add    BYTE PTR [eax],al
9f003f10:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003f13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f19:	44                   	inc    esp
9f003f1a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f1d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f003f1e:	c5 c3 0c             	(bad)  
9f003f21:	04 04                	add    al,0x4
9f003f23:	00 20                	add    BYTE PTR [eax],ah
9f003f25:	00 00                	add    BYTE PTR [eax],al
9f003f27:	00 20                	add    BYTE PTR [eax],ah
9f003f29:	01 00                	add    DWORD PTR [eax],eax
9f003f2b:	00 ff                	add    bh,bh
9f003f2d:	c2 ff ff             	ret    0xffff
9f003f30:	bb 00 00 00 00       	mov    ebx,0x0
9f003f35:	41                   	inc    ecx
9f003f36:	0e                   	push   cs
9f003f37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f3d:	44                   	inc    esp
9f003f3e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f41:	b3 c5                	mov    bl,0xc5
9f003f43:	c3                   	ret    
9f003f44:	0c 04                	or     al,0x4
9f003f46:	04 00                	add    al,0x0
9f003f48:	20 00                	and    BYTE PTR [eax],al
9f003f4a:	00 00                	add    BYTE PTR [eax],al
9f003f4c:	44                   	inc    esp
9f003f4d:	01 00                	add    DWORD PTR [eax],eax
9f003f4f:	00 96 c3 ff ff bb    	add    BYTE PTR [esi-0x4400003d],dl
9f003f55:	00 00                	add    BYTE PTR [eax],al
9f003f57:	00 00                	add    BYTE PTR [eax],al
9f003f59:	41                   	inc    ecx
9f003f5a:	0e                   	push   cs
9f003f5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f61:	44                   	inc    esp
9f003f62:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f65:	b3 c5                	mov    bl,0xc5
9f003f67:	c3                   	ret    
9f003f68:	0c 04                	or     al,0x4
9f003f6a:	04 00                	add    al,0x0
9f003f6c:	1c 00                	sbb    al,0x0
9f003f6e:	00 00                	add    BYTE PTR [eax],al
9f003f70:	68 01 00 00 2d       	push   0x2d000001
9f003f75:	c4                   	(bad)  
9f003f76:	ff                   	(bad)  
9f003f77:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
9f003f7b:	00 00                	add    BYTE PTR [eax],al
9f003f7d:	41                   	inc    ecx
9f003f7e:	0e                   	push   cs
9f003f7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f85:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f003f88:	0c 04                	or     al,0x4
9f003f8a:	04 00                	add    al,0x0
9f003f8c:	20 00                	and    BYTE PTR [eax],al
9f003f8e:	00 00                	add    BYTE PTR [eax],al
9f003f90:	88 01                	mov    BYTE PTR [ecx],al
9f003f92:	00 00                	add    BYTE PTR [eax],al
9f003f94:	6c                   	ins    BYTE PTR es:[edi],dx
9f003f95:	c4                   	(bad)  
9f003f96:	ff                   	(bad)  
9f003f97:	ff                   	(bad)  
9f003f98:	ba 00 00 00 00       	mov    edx,0x0
9f003f9d:	41                   	inc    ecx
9f003f9e:	0e                   	push   cs
9f003f9f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fa5:	44                   	inc    esp
9f003fa6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003fa9:	b2 c5                	mov    dl,0xc5
9f003fab:	c3                   	ret    
9f003fac:	0c 04                	or     al,0x4
9f003fae:	04 00                	add    al,0x0
9f003fb0:	20 00                	and    BYTE PTR [eax],al
9f003fb2:	00 00                	add    BYTE PTR [eax],al
9f003fb4:	ac                   	lods   al,BYTE PTR ds:[esi]
9f003fb5:	01 00                	add    DWORD PTR [eax],eax
9f003fb7:	00 02                	add    BYTE PTR [edx],al
9f003fb9:	c5 ff ff             	(bad)  
9f003fbc:	5a                   	pop    edx
9f003fbd:	00 00                	add    BYTE PTR [eax],al
9f003fbf:	00 00                	add    BYTE PTR [eax],al
9f003fc1:	41                   	inc    ecx
9f003fc2:	0e                   	push   cs
9f003fc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fc9:	44                   	inc    esp
9f003fca:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003fcd:	52                   	push   edx
9f003fce:	c5 c3 0c             	(bad)  
9f003fd1:	04 04                	add    al,0x4
9f003fd3:	00 20                	add    BYTE PTR [eax],ah
9f003fd5:	00 00                	add    BYTE PTR [eax],al
9f003fd7:	00 d0                	add    al,dl
9f003fd9:	01 00                	add    DWORD PTR [eax],eax
9f003fdb:	00 38                	add    BYTE PTR [eax],bh
9f003fdd:	c5 ff ff             	(bad)  
9f003fe0:	5a                   	pop    edx
9f003fe1:	00 00                	add    BYTE PTR [eax],al
9f003fe3:	00 00                	add    BYTE PTR [eax],al
9f003fe5:	41                   	inc    ecx
9f003fe6:	0e                   	push   cs
9f003fe7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fed:	44                   	inc    esp
9f003fee:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003ff1:	52                   	push   edx
9f003ff2:	c5 c3 0c             	(bad)  
9f003ff5:	04 04                	add    al,0x4
9f003ff7:	00 20                	add    BYTE PTR [eax],ah
9f003ff9:	00 00                	add    BYTE PTR [eax],al
9f003ffb:	00 f4                	add    ah,dh
9f003ffd:	01 00                	add    DWORD PTR [eax],eax
9f003fff:	00 70 c5             	add    BYTE PTR [eax-0x3b],dh
9f004002:	ff                   	(bad)  
9f004003:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
9f004009:	41                   	inc    ecx
9f00400a:	0e                   	push   cs
9f00400b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004011:	44                   	inc    esp
9f004012:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004015:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f00401a:	04 00                	add    al,0x0
9f00401c:	20 00                	and    BYTE PTR [eax],al
9f00401e:	00 00                	add    BYTE PTR [eax],al
9f004020:	18 02                	sbb    BYTE PTR [edx],al
9f004022:	00 00                	add    BYTE PTR [eax],al
9f004024:	f6 c5 ff             	test   ch,0xff
9f004027:	ff c1                	inc    ecx
9f004029:	01 00                	add    DWORD PTR [eax],eax
9f00402b:	00 00                	add    BYTE PTR [eax],al
9f00402d:	41                   	inc    ecx
9f00402e:	0e                   	push   cs
9f00402f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004035:	44                   	inc    esp
9f004036:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004039:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f00403e:	04 04                	add    al,0x4
9f004040:	20 00                	and    BYTE PTR [eax],al
9f004042:	00 00                	add    BYTE PTR [eax],al
9f004044:	3c 02                	cmp    al,0x2
9f004046:	00 00                	add    BYTE PTR [eax],al
9f004048:	94                   	xchg   esp,eax
9f004049:	c7                   	(bad)  
9f00404a:	ff                   	(bad)  
9f00404b:	ff 31                	push   DWORD PTR [ecx]
9f00404d:	00 00                	add    BYTE PTR [eax],al
9f00404f:	00 00                	add    BYTE PTR [eax],al
9f004051:	41                   	inc    ecx
9f004052:	0e                   	push   cs
9f004053:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004059:	44                   	inc    esp
9f00405a:	83 03 69             	add    DWORD PTR [ebx],0x69
9f00405d:	c5 c3 0c             	(bad)  
9f004060:	04 04                	add    al,0x4
9f004062:	00 00                	add    BYTE PTR [eax],al
9f004064:	20 00                	and    BYTE PTR [eax],al
9f004066:	00 00                	add    BYTE PTR [eax],al
9f004068:	60                   	pusha  
9f004069:	02 00                	add    al,BYTE PTR [eax]
9f00406b:	00 a1 c7 ff ff 2d    	add    BYTE PTR [ecx+0x2dffffc7],ah
9f004071:	00 00                	add    BYTE PTR [eax],al
9f004073:	00 00                	add    BYTE PTR [eax],al
9f004075:	41                   	inc    ecx
9f004076:	0e                   	push   cs
9f004077:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00407d:	44                   	inc    esp
9f00407e:	83 03 65             	add    DWORD PTR [ebx],0x65
9f004081:	c5 c3 0c             	(bad)  
9f004084:	04 04                	add    al,0x4
9f004086:	00 00                	add    BYTE PTR [eax],al
9f004088:	20 00                	and    BYTE PTR [eax],al
9f00408a:	00 00                	add    BYTE PTR [eax],al
9f00408c:	84 02                	test   BYTE PTR [edx],al
9f00408e:	00 00                	add    BYTE PTR [eax],al
9f004090:	aa                   	stos   BYTE PTR es:[edi],al
9f004091:	c7                   	(bad)  
9f004092:	ff                   	(bad)  
9f004093:	ff 2a                	jmp    FWORD PTR [edx]
9f004095:	00 00                	add    BYTE PTR [eax],al
9f004097:	00 00                	add    BYTE PTR [eax],al
9f004099:	41                   	inc    ecx
9f00409a:	0e                   	push   cs
9f00409b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040a1:	44                   	inc    esp
9f0040a2:	83 03 62             	add    DWORD PTR [ebx],0x62
9f0040a5:	c5 c3 0c             	(bad)  
9f0040a8:	04 04                	add    al,0x4
9f0040aa:	00 00                	add    BYTE PTR [eax],al
9f0040ac:	24 00                	and    al,0x0
9f0040ae:	00 00                	add    BYTE PTR [eax],al
9f0040b0:	a8 02                	test   al,0x2
9f0040b2:	00 00                	add    BYTE PTR [eax],al
9f0040b4:	b0 c7                	mov    al,0xc7
9f0040b6:	ff                   	(bad)  
9f0040b7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0040bd:	41                   	inc    ecx
9f0040be:	0e                   	push   cs
9f0040bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040c5:	42                   	inc    edx
9f0040c6:	86 03                	xchg   BYTE PTR [ebx],al
9f0040c8:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f0040cf:	c5 
9f0040d0:	0c 04                	or     al,0x4
9f0040d2:	04 00                	add    al,0x0
9f0040d4:	24 00                	and    al,0x0
9f0040d6:	00 00                	add    BYTE PTR [eax],al
9f0040d8:	d0 02                	rol    BYTE PTR [edx],1
9f0040da:	00 00                	add    BYTE PTR [eax],al
9f0040dc:	bd c7 ff ff 35       	mov    ebp,0x35ffffc7
9f0040e1:	00 00                	add    BYTE PTR [eax],al
9f0040e3:	00 00                	add    BYTE PTR [eax],al
9f0040e5:	41                   	inc    ecx
9f0040e6:	0e                   	push   cs
9f0040e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040ed:	42                   	inc    edx
9f0040ee:	86 03                	xchg   BYTE PTR [ebx],al
9f0040f0:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f0040f7:	c5 
9f0040f8:	0c 04                	or     al,0x4
9f0040fa:	04 00                	add    al,0x0
9f0040fc:	1c 00                	sbb    al,0x0
9f0040fe:	00 00                	add    BYTE PTR [eax],al
9f004100:	f8                   	clc    
9f004101:	02 00                	add    al,BYTE PTR [eax]
9f004103:	00 ca                	add    dl,cl
9f004105:	c7                   	(bad)  
9f004106:	ff                   	(bad)  
9f004107:	ff 26                	jmp    DWORD PTR [esi]
9f004109:	00 00                	add    BYTE PTR [eax],al
9f00410b:	00 00                	add    BYTE PTR [eax],al
9f00410d:	41                   	inc    ecx
9f00410e:	0e                   	push   cs
9f00410f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004115:	62                   	(bad)  
9f004116:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004119:	04 00                	add    al,0x0
9f00411b:	00 20                	add    BYTE PTR [eax],ah
9f00411d:	00 00                	add    BYTE PTR [eax],al
9f00411f:	00 18                	add    BYTE PTR [eax],bl
9f004121:	03 00                	add    eax,DWORD PTR [eax]
9f004123:	00 d0                	add    al,dl
9f004125:	c7                   	(bad)  
9f004126:	ff                   	(bad)  
9f004127:	ff 2e                	jmp    FWORD PTR [esi]
9f004129:	00 00                	add    BYTE PTR [eax],al
9f00412b:	00 00                	add    BYTE PTR [eax],al
9f00412d:	41                   	inc    ecx
9f00412e:	0e                   	push   cs
9f00412f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004135:	44                   	inc    esp
9f004136:	83 03 66             	add    DWORD PTR [ebx],0x66
9f004139:	c5 c3 0c             	(bad)  
9f00413c:	04 04                	add    al,0x4
9f00413e:	00 00                	add    BYTE PTR [eax],al
9f004140:	1c 00                	sbb    al,0x0
9f004142:	00 00                	add    BYTE PTR [eax],al
9f004144:	3c 03                	cmp    al,0x3
9f004146:	00 00                	add    BYTE PTR [eax],al
9f004148:	da c7                	fcmovb st,st(7)
9f00414a:	ff                   	(bad)  
9f00414b:	ff 10                	call   DWORD PTR [eax]
9f00414d:	00 00                	add    BYTE PTR [eax],al
9f00414f:	00 00                	add    BYTE PTR [eax],al
9f004151:	41                   	inc    ecx
9f004152:	0e                   	push   cs
9f004153:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004159:	4c                   	dec    esp
9f00415a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00415d:	04 00                	add    al,0x0
9f00415f:	00 20                	add    BYTE PTR [eax],ah
9f004161:	00 00                	add    BYTE PTR [eax],al
9f004163:	00 5c 03 00          	add    BYTE PTR [ebx+eax*1+0x0],bl
9f004167:	00 cc                	add    ah,cl
9f004169:	c7                   	(bad)  
9f00416a:	ff                   	(bad)  
9f00416b:	ff 26                	jmp    DWORD PTR [esi]
9f00416d:	00 00                	add    BYTE PTR [eax],al
9f00416f:	00 00                	add    BYTE PTR [eax],al
9f004171:	41                   	inc    ecx
9f004172:	0e                   	push   cs
9f004173:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004179:	41                   	inc    ecx
9f00417a:	83 03 60             	add    DWORD PTR [ebx],0x60
9f00417d:	c3                   	ret    
9f00417e:	41                   	inc    ecx
9f00417f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004182:	04 00                	add    al,0x0
9f004184:	20 00                	and    BYTE PTR [eax],al
9f004186:	00 00                	add    BYTE PTR [eax],al
9f004188:	80 03 00             	add    BYTE PTR [ebx],0x0
9f00418b:	00 ce                	add    dh,cl
9f00418d:	c7                   	(bad)  
9f00418e:	ff                   	(bad)  
9f00418f:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f004192:	00 00                	add    BYTE PTR [eax],al
9f004194:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00419d:	44                   	inc    esp
9f00419e:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f0041a1:	c3                   	ret    
9f0041a2:	41                   	inc    ecx
9f0041a3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0041a6:	04 00                	add    al,0x0
9f0041a8:	20 00                	and    BYTE PTR [eax],al
9f0041aa:	00 00                	add    BYTE PTR [eax],al
9f0041ac:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0041ad:	03 00                	add    eax,DWORD PTR [eax]
9f0041af:	00 ed                	add    ch,ch
9f0041b1:	c7                   	(bad)  
9f0041b2:	ff                   	(bad)  
9f0041b3:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f0041b6:	00 00                	add    BYTE PTR [eax],al
9f0041b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0041bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041c1:	44                   	inc    esp
9f0041c2:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f0041c5:	c3                   	ret    
9f0041c6:	41                   	inc    ecx
9f0041c7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0041ca:	04 00                	add    al,0x0
9f0041cc:	20 00                	and    BYTE PTR [eax],al
9f0041ce:	00 00                	add    BYTE PTR [eax],al
9f0041d0:	c8 03 00 00          	enter  0x3,0x0
9f0041d4:	0c c8                	or     al,0xc8
9f0041d6:	ff                   	(bad)  
9f0041d7:	ff                   	(bad)  
9f0041d8:	ba 00 00 00 00       	mov    edx,0x0
9f0041dd:	41                   	inc    ecx
9f0041de:	0e                   	push   cs
9f0041df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041e5:	44                   	inc    esp
9f0041e6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0041e9:	b2 c5                	mov    dl,0xc5
9f0041eb:	c3                   	ret    
9f0041ec:	0c 04                	or     al,0x4
9f0041ee:	04 00                	add    al,0x0
9f0041f0:	24 00                	and    al,0x0
9f0041f2:	00 00                	add    BYTE PTR [eax],al
9f0041f4:	ec                   	in     al,dx
9f0041f5:	03 00                	add    eax,DWORD PTR [eax]
9f0041f7:	00 a4 c8 ff ff 3a 00 	add    BYTE PTR [eax+ecx*8+0x3affff],ah
9f0041fe:	00 00                	add    BYTE PTR [eax],al
9f004200:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004203:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004209:	45                   	inc    ebp
9f00420a:	86 03                	xchg   BYTE PTR [ebx],al
9f00420c:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f004210:	41                   	inc    ecx
9f004211:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004215:	04 04                	add    al,0x4
9f004217:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00421a:	00 00                	add    BYTE PTR [eax],al
9f00421c:	14 04                	adc    al,0x4
9f00421e:	00 00                	add    BYTE PTR [eax],al
9f004220:	b6 c8                	mov    dh,0xc8
9f004222:	ff                   	(bad)  
9f004223:	ff                   	(bad)  
9f004224:	3c 00                	cmp    al,0x0
9f004226:	00 00                	add    BYTE PTR [eax],al
9f004228:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00422b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004231:	45                   	inc    ebp
9f004232:	86 03                	xchg   BYTE PTR [ebx],al
9f004234:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f004238:	41                   	inc    ecx
9f004239:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00423d:	04 04                	add    al,0x4
9f00423f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004242:	00 00                	add    BYTE PTR [eax],al
9f004244:	3c 04                	cmp    al,0x4
9f004246:	00 00                	add    BYTE PTR [eax],al
9f004248:	ca c8 ff             	retf   0xffc8
9f00424b:	ff                   	(bad)  
9f00424c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f00424f:	00 00                	add    BYTE PTR [eax],al
9f004251:	41                   	inc    ecx
9f004252:	0e                   	push   cs
9f004253:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004259:	45                   	inc    ebp
9f00425a:	86 03                	xchg   BYTE PTR [ebx],al
9f00425c:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f004260:	41                   	inc    ecx
9f004261:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004265:	04 04                	add    al,0x4
9f004267:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00426a:	00 00                	add    BYTE PTR [eax],al
9f00426c:	64                   	fs
9f00426d:	04 00                	add    al,0x0
9f00426f:	00 e0                	add    al,ah
9f004271:	c8 ff ff 40          	enter  0xffff,0x40
9f004275:	00 00                	add    BYTE PTR [eax],al
9f004277:	00 00                	add    BYTE PTR [eax],al
9f004279:	41                   	inc    ecx
9f00427a:	0e                   	push   cs
9f00427b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004281:	45                   	inc    ebp
9f004282:	86 03                	xchg   BYTE PTR [ebx],al
9f004284:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f00428b:	c5 
9f00428c:	0c 04                	or     al,0x4
9f00428e:	04 00                	add    al,0x0
9f004290:	24 00                	and    al,0x0
9f004292:	00 00                	add    BYTE PTR [eax],al
9f004294:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
9f004297:	00 f8                	add    al,bh
9f004299:	c8 ff ff 42          	enter  0xffff,0x42
9f00429d:	00 00                	add    BYTE PTR [eax],al
9f00429f:	00 00                	add    BYTE PTR [eax],al
9f0042a1:	41                   	inc    ecx
9f0042a2:	0e                   	push   cs
9f0042a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042a9:	45                   	inc    ebp
9f0042aa:	86 03                	xchg   BYTE PTR [ebx],al
9f0042ac:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f0042b0:	41                   	inc    ecx
9f0042b1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0042b5:	04 04                	add    al,0x4
9f0042b7:	00 20                	add    BYTE PTR [eax],ah
9f0042b9:	00 00                	add    BYTE PTR [eax],al
9f0042bb:	00 b4 04 00 00 12 c9 	add    BYTE PTR [esp+eax*1-0x36ee0000],dh
9f0042c2:	ff                   	(bad)  
9f0042c3:	ff                   	(bad)  
9f0042c4:	bf 00 00 00 00       	mov    edi,0x0
9f0042c9:	41                   	inc    ecx
9f0042ca:	0e                   	push   cs
9f0042cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042d1:	44                   	inc    esp
9f0042d2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0042d5:	b7 c5                	mov    bh,0xc5
9f0042d7:	c3                   	ret    
9f0042d8:	0c 04                	or     al,0x4
9f0042da:	04 00                	add    al,0x0
9f0042dc:	20 00                	and    BYTE PTR [eax],al
9f0042de:	00 00                	add    BYTE PTR [eax],al
9f0042e0:	d8 04 00             	fadd   DWORD PTR [eax+eax*1]
9f0042e3:	00 ad c9 ff ff 1f    	add    BYTE PTR [ebp+0x1fffffc9],ch
9f0042e9:	00 00                	add    BYTE PTR [eax],al
9f0042eb:	00 00                	add    BYTE PTR [eax],al
9f0042ed:	41                   	inc    ecx
9f0042ee:	0e                   	push   cs
9f0042ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042f5:	44                   	inc    esp
9f0042f6:	83 03 56             	add    DWORD PTR [ebx],0x56
9f0042f9:	c3                   	ret    
9f0042fa:	41                   	inc    ecx
9f0042fb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0042fe:	04 00                	add    al,0x0
9f004300:	20 00                	and    BYTE PTR [eax],al
9f004302:	00 00                	add    BYTE PTR [eax],al
9f004304:	fc                   	cld    
9f004305:	04 00                	add    al,0x0
9f004307:	00 a8 c9 ff ff 59    	add    BYTE PTR [eax+0x59ffffc9],ch
9f00430d:	00 00                	add    BYTE PTR [eax],al
9f00430f:	00 00                	add    BYTE PTR [eax],al
9f004311:	41                   	inc    ecx
9f004312:	0e                   	push   cs
9f004313:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004319:	44                   	inc    esp
9f00431a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00431d:	51                   	push   ecx
9f00431e:	c5 c3 0c             	(bad)  
9f004321:	04 04                	add    al,0x4
9f004323:	00 20                	add    BYTE PTR [eax],ah
9f004325:	00 00                	add    BYTE PTR [eax],al
9f004327:	00 20                	add    BYTE PTR [eax],ah
9f004329:	05 00 00 dd c9       	add    eax,0xc9dd0000
9f00432e:	ff                   	(bad)  
9f00432f:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f004333:	00 00                	add    BYTE PTR [eax],al
9f004335:	41                   	inc    ecx
9f004336:	0e                   	push   cs
9f004337:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00433d:	44                   	inc    esp
9f00433e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004341:	4c                   	dec    esp
9f004342:	c5 c3 0c             	(bad)  
9f004345:	04 04                	add    al,0x4
9f004347:	00 20                	add    BYTE PTR [eax],ah
9f004349:	00 00                	add    BYTE PTR [eax],al
9f00434b:	00 44 05 00          	add    BYTE PTR [ebp+eax*1+0x0],al
9f00434f:	00 0d ca ff ff 54    	add    BYTE PTR ds:0x54ffffca,cl
9f004355:	00 00                	add    BYTE PTR [eax],al
9f004357:	00 00                	add    BYTE PTR [eax],al
9f004359:	41                   	inc    ecx
9f00435a:	0e                   	push   cs
9f00435b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004361:	44                   	inc    esp
9f004362:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004365:	4c                   	dec    esp
9f004366:	c5 c3 0c             	(bad)  
9f004369:	04 04                	add    al,0x4
9f00436b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00436e:	00 00                	add    BYTE PTR [eax],al
9f004370:	68 05 00 00 3d       	push   0x3d000005
9f004375:	ca ff ff             	retf   0xffff
9f004378:	34 00                	xor    al,0x0
9f00437a:	00 00                	add    BYTE PTR [eax],al
9f00437c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00437f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004385:	70 c5                	jo     9f00434c <__x86.get_pc_thunk.cx+0x548>
9f004387:	0c 04                	or     al,0x4
9f004389:	04 00                	add    al,0x0
9f00438b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00438e:	00 00                	add    BYTE PTR [eax],al
9f004390:	88 05 00 00 51 ca    	mov    BYTE PTR ds:0xca510000,al
9f004396:	ff                   	(bad)  
9f004397:	ff 37                	push   DWORD PTR [edi]
9f004399:	00 00                	add    BYTE PTR [eax],al
9f00439b:	00 00                	add    BYTE PTR [eax],al
9f00439d:	41                   	inc    ecx
9f00439e:	0e                   	push   cs
9f00439f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0043a5:	73 c5                	jae    9f00436c <__x86.get_pc_thunk.cx+0x568>
9f0043a7:	0c 04                	or     al,0x4
9f0043a9:	04 00                	add    al,0x0
9f0043ab:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0043ae:	00 00                	add    BYTE PTR [eax],al
9f0043b0:	a8 05                	test   al,0x5
9f0043b2:	00 00                	add    BYTE PTR [eax],al
9f0043b4:	68 ca ff ff 72       	push   0x72ffffca
9f0043b9:	00 00                	add    BYTE PTR [eax],al
9f0043bb:	00 00                	add    BYTE PTR [eax],al
9f0043bd:	41                   	inc    ecx
9f0043be:	0e                   	push   cs
9f0043bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0043c5:	45                   	inc    ebp
9f0043c6:	86 03                	xchg   BYTE PTR [ebx],al
9f0043c8:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
9f0043cc:	c3                   	ret    
9f0043cd:	41                   	inc    ecx
9f0043ce:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0043d2:	04 04                	add    al,0x4
9f0043d4:	1c 00                	sbb    al,0x0
9f0043d6:	00 00                	add    BYTE PTR [eax],al
9f0043d8:	d0 05 00 00 b2 ca    	rol    BYTE PTR ds:0xcab20000,1
9f0043de:	ff                   	(bad)  
9f0043df:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0043e5:	41                   	inc    ecx
9f0043e6:	0e                   	push   cs
9f0043e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0043ed:	59                   	pop    ecx
9f0043ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0043f1:	04 00                	add    al,0x0
9f0043f3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0043f6:	00 00                	add    BYTE PTR [eax],al
9f0043f8:	f0 05 00 00 af ca    	lock add eax,0xcaaf0000
9f0043fe:	ff                   	(bad)  
9f0043ff:	ff 29                	jmp    FWORD PTR [ecx]
9f004401:	00 00                	add    BYTE PTR [eax],al
9f004403:	00 00                	add    BYTE PTR [eax],al
9f004405:	41                   	inc    ecx
9f004406:	0e                   	push   cs
9f004407:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00440d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f004411:	04 00                	add    al,0x0
9f004413:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004416:	00 00                	add    BYTE PTR [eax],al
9f004418:	10 06                	adc    BYTE PTR [esi],al
9f00441a:	00 00                	add    BYTE PTR [eax],al
9f00441c:	b8 ca ff ff 29       	mov    eax,0x29ffffca
9f004421:	00 00                	add    BYTE PTR [eax],al
9f004423:	00 00                	add    BYTE PTR [eax],al
9f004425:	41                   	inc    ecx
9f004426:	0e                   	push   cs
9f004427:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00442d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f004431:	04 00                	add    al,0x0
9f004433:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004436:	00 00                	add    BYTE PTR [eax],al
9f004438:	30 06                	xor    BYTE PTR [esi],al
9f00443a:	00 00                	add    BYTE PTR [eax],al
9f00443c:	c1 ca ff             	ror    edx,0xff
9f00443f:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f004443:	00 00                	add    BYTE PTR [eax],al
9f004445:	41                   	inc    ecx
9f004446:	0e                   	push   cs
9f004447:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00444d:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f004450:	0c 04                	or     al,0x4
9f004452:	04 00                	add    al,0x0
9f004454:	20 00                	and    BYTE PTR [eax],al
9f004456:	00 00                	add    BYTE PTR [eax],al
9f004458:	50                   	push   eax
9f004459:	06                   	push   es
9f00445a:	00 00                	add    BYTE PTR [eax],al
9f00445c:	ed                   	in     eax,dx
9f00445d:	ca ff ff             	retf   0xffff
9f004460:	f4                   	hlt    
9f004461:	01 00                	add    DWORD PTR [eax],eax
9f004463:	00 00                	add    BYTE PTR [eax],al
9f004465:	41                   	inc    ecx
9f004466:	0e                   	push   cs
9f004467:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00446d:	44                   	inc    esp
9f00446e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004471:	ec                   	in     al,dx
9f004472:	01 c5                	add    ebp,eax
9f004474:	c3                   	ret    
9f004475:	0c 04                	or     al,0x4
9f004477:	04 1c                	add    al,0x1c
9f004479:	00 00                	add    BYTE PTR [eax],al
9f00447b:	00 74 06 00          	add    BYTE PTR [esi+eax*1+0x0],dh
9f00447f:	00 bd cc ff ff 4f    	add    BYTE PTR [ebp+0x4fffffcc],bh
9f004485:	00 00                	add    BYTE PTR [eax],al
9f004487:	00 00                	add    BYTE PTR [eax],al
9f004489:	41                   	inc    ecx
9f00448a:	0e                   	push   cs
9f00448b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004491:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f004494:	0c 04                	or     al,0x4
9f004496:	04 00                	add    al,0x0
9f004498:	1c 00                	sbb    al,0x0
9f00449a:	00 00                	add    BYTE PTR [eax],al
9f00449c:	94                   	xchg   esp,eax
9f00449d:	06                   	push   es
9f00449e:	00 00                	add    BYTE PTR [eax],al
9f0044a0:	ec                   	in     al,dx
9f0044a1:	cc                   	int3   
9f0044a2:	ff                   	(bad)  
9f0044a3:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f0044a6:	00 00                	add    BYTE PTR [eax],al
9f0044a8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0044ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044b1:	58                   	pop    eax
9f0044b2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0044b5:	04 00                	add    al,0x0
9f0044b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0044ba:	00 00                	add    BYTE PTR [eax],al
9f0044bc:	b4 06                	mov    ah,0x6
9f0044be:	00 00                	add    BYTE PTR [eax],al
9f0044c0:	e8 cc ff ff 20       	call   c0004491 <tmbuf+0x20ffe3b1>
9f0044c5:	00 00                	add    BYTE PTR [eax],al
9f0044c7:	00 00                	add    BYTE PTR [eax],al
9f0044c9:	41                   	inc    ecx
9f0044ca:	0e                   	push   cs
9f0044cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044d1:	5c                   	pop    esp
9f0044d2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0044d5:	04 00                	add    al,0x0
9f0044d7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0044da:	00 00                	add    BYTE PTR [eax],al
9f0044dc:	d4 06                	aam    0x6
9f0044de:	00 00                	add    BYTE PTR [eax],al
9f0044e0:	e8 cc ff ff 20       	call   c00044b1 <tmbuf+0x20ffe3d1>
9f0044e5:	00 00                	add    BYTE PTR [eax],al
9f0044e7:	00 00                	add    BYTE PTR [eax],al
9f0044e9:	41                   	inc    ecx
9f0044ea:	0e                   	push   cs
9f0044eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044f1:	5c                   	pop    esp
9f0044f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0044f5:	04 00                	add    al,0x0
9f0044f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0044fa:	00 00                	add    BYTE PTR [eax],al
9f0044fc:	f4                   	hlt    
9f0044fd:	06                   	push   es
9f0044fe:	00 00                	add    BYTE PTR [eax],al
9f004500:	e8 cc ff ff 44       	call   e40044d1 <tmbuf+0x44ffe3f1>
9f004505:	01 00                	add    DWORD PTR [eax],eax
9f004507:	00 00                	add    BYTE PTR [eax],al
9f004509:	41                   	inc    ecx
9f00450a:	0e                   	push   cs
9f00450b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004511:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f004514:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004517:	04 1c                	add    al,0x1c
9f004519:	00 00                	add    BYTE PTR [eax],al
9f00451b:	00 14 07             	add    BYTE PTR [edi+eax*1],dl
9f00451e:	00 00                	add    BYTE PTR [eax],al
9f004520:	0c ce                	or     al,0xce
9f004522:	ff                   	(bad)  
9f004523:	ff 20                	jmp    DWORD PTR [eax]
9f004525:	00 00                	add    BYTE PTR [eax],al
9f004527:	00 00                	add    BYTE PTR [eax],al
9f004529:	41                   	inc    ecx
9f00452a:	0e                   	push   cs
9f00452b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004531:	5c                   	pop    esp
9f004532:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004535:	04 00                	add    al,0x0
9f004537:	00 28                	add    BYTE PTR [eax],ch
9f004539:	00 00                	add    BYTE PTR [eax],al
9f00453b:	00 34 07             	add    BYTE PTR [edi+eax*1],dh
9f00453e:	00 00                	add    BYTE PTR [eax],al
9f004540:	0c ce                	or     al,0xce
9f004542:	ff                   	(bad)  
9f004543:	ff                   	(bad)  
9f004544:	fd                   	std    
9f004545:	02 00                	add    al,BYTE PTR [eax]
9f004547:	00 00                	add    BYTE PTR [eax],al
9f004549:	41                   	inc    ecx
9f00454a:	0e                   	push   cs
9f00454b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004551:	48                   	dec    eax
9f004552:	86 03                	xchg   BYTE PTR [ebx],al
9f004554:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f004558:	02 c3                	add    al,bl
9f00455a:	41                   	inc    ecx
9f00455b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00455f:	04 04                	add    al,0x4
9f004561:	00 00                	add    BYTE PTR [eax],al
9f004563:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004566:	00 00                	add    BYTE PTR [eax],al
9f004568:	60                   	pusha  
9f004569:	07                   	pop    es
9f00456a:	00 00                	add    BYTE PTR [eax],al
9f00456c:	dd d0                	fst    st(0)
9f00456e:	ff                   	(bad)  
9f00456f:	ff 23                	jmp    DWORD PTR [ebx]
9f004571:	00 00                	add    BYTE PTR [eax],al
9f004573:	00 00                	add    BYTE PTR [eax],al
9f004575:	41                   	inc    ecx
9f004576:	0e                   	push   cs
9f004577:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00457d:	5f                   	pop    edi
9f00457e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004581:	04 00                	add    al,0x0
9f004583:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004586:	00 00                	add    BYTE PTR [eax],al
9f004588:	80 07 00             	add    BYTE PTR [edi],0x0
9f00458b:	00 e0                	add    al,ah
9f00458d:	d0 ff                	sar    bh,1
9f00458f:	ff 19                	call   FWORD PTR [ecx]
9f004591:	00 00                	add    BYTE PTR [eax],al
9f004593:	00 00                	add    BYTE PTR [eax],al
9f004595:	41                   	inc    ecx
9f004596:	0e                   	push   cs
9f004597:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00459d:	55                   	push   ebp
9f00459e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0045a1:	04 00                	add    al,0x0
9f0045a3:	00 20                	add    BYTE PTR [eax],ah
9f0045a5:	00 00                	add    BYTE PTR [eax],al
9f0045a7:	00 a0 07 00 00 dc    	add    BYTE PTR [eax-0x23fffff9],ah
9f0045ad:	d0 ff                	sar    bh,1
9f0045af:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f0045b2:	00 00                	add    BYTE PTR [eax],al
9f0045b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0045b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045bd:	44                   	inc    esp
9f0045be:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0045c1:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f0045c4:	0c 04                	or     al,0x4
9f0045c6:	04 00                	add    al,0x0
9f0045c8:	20 00                	and    BYTE PTR [eax],al
9f0045ca:	00 00                	add    BYTE PTR [eax],al
9f0045cc:	c4 07                	les    eax,FWORD PTR [edi]
9f0045ce:	00 00                	add    BYTE PTR [eax],al
9f0045d0:	2c d1                	sub    al,0xd1
9f0045d2:	ff                   	(bad)  
9f0045d3:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f0045d7:	00 00                	add    BYTE PTR [eax],al
9f0045d9:	41                   	inc    ecx
9f0045da:	0e                   	push   cs
9f0045db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045e1:	44                   	inc    esp
9f0045e2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0045e5:	64                   	fs
9f0045e6:	c5 c3 0c             	(bad)  
9f0045e9:	04 04                	add    al,0x4
9f0045eb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0045ee:	00 00                	add    BYTE PTR [eax],al
9f0045f0:	e8 07 00 00 74       	call   130045fc <sysEnter_Vector+0x12ed45fc>
9f0045f5:	d1 ff                	sar    edi,1
9f0045f7:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f0045fd:	41                   	inc    ecx
9f0045fe:	0e                   	push   cs
9f0045ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004605:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f00460b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00460e:	00 00                	add    BYTE PTR [eax],al
9f004610:	08 08                	or     BYTE PTR [eax],cl
9f004612:	00 00                	add    BYTE PTR [eax],al
9f004614:	db d1                	fcmovnbe st,st(1)
9f004616:	ff                   	(bad)  
9f004617:	ff 57 00             	call   DWORD PTR [edi+0x0]
9f00461a:	00 00                	add    BYTE PTR [eax],al
9f00461c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00461f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004625:	02 53 c5             	add    dl,BYTE PTR [ebx-0x3b]
9f004628:	0c 04                	or     al,0x4
9f00462a:	04 00                	add    al,0x0
9f00462c:	20 00                	and    BYTE PTR [eax],al
9f00462e:	00 00                	add    BYTE PTR [eax],al
9f004630:	28 08                	sub    BYTE PTR [eax],cl
9f004632:	00 00                	add    BYTE PTR [eax],al
9f004634:	12 d2                	adc    dl,dl
9f004636:	ff                   	(bad)  
9f004637:	ff d4                	call   esp
9f004639:	01 00                	add    DWORD PTR [eax],eax
9f00463b:	00 00                	add    BYTE PTR [eax],al
9f00463d:	41                   	inc    ecx
9f00463e:	0e                   	push   cs
9f00463f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004645:	44                   	inc    esp
9f004646:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004649:	cc                   	int3   
9f00464a:	01 c5                	add    ebp,eax
9f00464c:	c3                   	ret    
9f00464d:	0c 04                	or     al,0x4
9f00464f:	04 1c                	add    al,0x1c
9f004651:	00 00                	add    BYTE PTR [eax],al
9f004653:	00 4c 08 00          	add    BYTE PTR [eax+ecx*1+0x0],cl
9f004657:	00 c2                	add    dl,al
9f004659:	d3 ff                	sar    edi,cl
9f00465b:	ff 20                	jmp    DWORD PTR [eax]
9f00465d:	00 00                	add    BYTE PTR [eax],al
9f00465f:	00 00                	add    BYTE PTR [eax],al
9f004661:	41                   	inc    ecx
9f004662:	0e                   	push   cs
9f004663:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004669:	5c                   	pop    esp
9f00466a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00466d:	04 00                	add    al,0x0
9f00466f:	00 20                	add    BYTE PTR [eax],ah
9f004671:	00 00                	add    BYTE PTR [eax],al
9f004673:	00 6c 08 00          	add    BYTE PTR [eax+ecx*1+0x0],ch
9f004677:	00 c2                	add    dl,al
9f004679:	d3 ff                	sar    edi,cl
9f00467b:	ff 85 00 00 00 00    	inc    DWORD PTR [ebp+0x0]
9f004681:	41                   	inc    ecx
9f004682:	0e                   	push   cs
9f004683:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004689:	44                   	inc    esp
9f00468a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00468d:	7d c5                	jge    9f004654 <__x86.get_pc_thunk.cx+0x850>
9f00468f:	c3                   	ret    
9f004690:	0c 04                	or     al,0x4
9f004692:	04 00                	add    al,0x0
9f004694:	1c 00                	sbb    al,0x0
9f004696:	00 00                	add    BYTE PTR [eax],al
9f004698:	90                   	nop
9f004699:	08 00                	or     BYTE PTR [eax],al
9f00469b:	00 23                	add    BYTE PTR [ebx],ah
9f00469d:	d4 ff                	aam    0xff
9f00469f:	ff 23                	jmp    DWORD PTR [ebx]
9f0046a1:	00 00                	add    BYTE PTR [eax],al
9f0046a3:	00 00                	add    BYTE PTR [eax],al
9f0046a5:	41                   	inc    ecx
9f0046a6:	0e                   	push   cs
9f0046a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046ad:	5f                   	pop    edi
9f0046ae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0046b1:	04 00                	add    al,0x0
9f0046b3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0046b6:	00 00                	add    BYTE PTR [eax],al
9f0046b8:	b0 08                	mov    al,0x8
9f0046ba:	00 00                	add    BYTE PTR [eax],al
9f0046bc:	26                   	es
9f0046bd:	d4 ff                	aam    0xff
9f0046bf:	ff 1b                	call   FWORD PTR [ebx]
9f0046c1:	00 00                	add    BYTE PTR [eax],al
9f0046c3:	00 00                	add    BYTE PTR [eax],al
9f0046c5:	41                   	inc    ecx
9f0046c6:	0e                   	push   cs
9f0046c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046cd:	57                   	push   edi
9f0046ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0046d1:	04 00                	add    al,0x0
9f0046d3:	00 20                	add    BYTE PTR [eax],ah
9f0046d5:	00 00                	add    BYTE PTR [eax],al
9f0046d7:	00 d0                	add    al,dl
9f0046d9:	08 00                	or     BYTE PTR [eax],al
9f0046db:	00 21                	add    BYTE PTR [ecx],ah
9f0046dd:	d4 ff                	aam    0xff
9f0046df:	ff 32                	push   DWORD PTR [edx]
9f0046e1:	00 00                	add    BYTE PTR [eax],al
9f0046e3:	00 00                	add    BYTE PTR [eax],al
9f0046e5:	41                   	inc    ecx
9f0046e6:	0e                   	push   cs
9f0046e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046ed:	44                   	inc    esp
9f0046ee:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f0046f1:	c5 c3 0c             	(bad)  
9f0046f4:	04 04                	add    al,0x4
9f0046f6:	00 00                	add    BYTE PTR [eax],al
9f0046f8:	1c 00                	sbb    al,0x0
9f0046fa:	00 00                	add    BYTE PTR [eax],al
9f0046fc:	f4                   	hlt    
9f0046fd:	08 00                	or     BYTE PTR [eax],al
9f0046ff:	00 30                	add    BYTE PTR [eax],dh
9f004701:	d4 ff                	aam    0xff
9f004703:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
9f004709:	41                   	inc    ecx
9f00470a:	0e                   	push   cs
9f00470b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004711:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f004717:	04 1c                	add    al,0x1c
9f004719:	00 00                	add    BYTE PTR [eax],al
9f00471b:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
9f00471e:	00 00                	add    BYTE PTR [eax],al
9f004720:	ab                   	stos   DWORD PTR es:[edi],eax
9f004721:	d5 ff                	aad    0xff
9f004723:	ff 20                	jmp    DWORD PTR [eax]
9f004725:	00 00                	add    BYTE PTR [eax],al
9f004727:	00 00                	add    BYTE PTR [eax],al
9f004729:	41                   	inc    ecx
9f00472a:	0e                   	push   cs
9f00472b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004731:	5c                   	pop    esp
9f004732:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004735:	04 00                	add    al,0x0
9f004737:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00473a:	00 00                	add    BYTE PTR [eax],al
9f00473c:	34 09                	xor    al,0x9
9f00473e:	00 00                	add    BYTE PTR [eax],al
9f004740:	ac                   	lods   al,BYTE PTR ds:[esi]
9f004741:	d5 ff                	aad    0xff
9f004743:	ff c7                	inc    edi
9f004745:	00 00                	add    BYTE PTR [eax],al
9f004747:	00 00                	add    BYTE PTR [eax],al
9f004749:	41                   	inc    ecx
9f00474a:	0e                   	push   cs
9f00474b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004751:	02 c3                	add    al,bl
9f004753:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004756:	04 00                	add    al,0x0
9f004758:	1c 00                	sbb    al,0x0
9f00475a:	00 00                	add    BYTE PTR [eax],al
9f00475c:	54                   	push   esp
9f00475d:	09 00                	or     DWORD PTR [eax],eax
9f00475f:	00 53 d6             	add    BYTE PTR [ebx-0x2a],dl
9f004762:	ff                   	(bad)  
9f004763:	ff 20                	jmp    DWORD PTR [eax]
9f004765:	00 00                	add    BYTE PTR [eax],al
9f004767:	00 00                	add    BYTE PTR [eax],al
9f004769:	41                   	inc    ecx
9f00476a:	0e                   	push   cs
9f00476b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004771:	5c                   	pop    esp
9f004772:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004775:	04 00                	add    al,0x0
9f004777:	00 20                	add    BYTE PTR [eax],ah
9f004779:	00 00                	add    BYTE PTR [eax],al
9f00477b:	00 74 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],dh
9f00477f:	00 54 d6 ff          	add    BYTE PTR [esi+edx*8-0x1],dl
9f004783:	ff 29                	jmp    FWORD PTR [ecx]
9f004785:	00 00                	add    BYTE PTR [eax],al
9f004787:	00 00                	add    BYTE PTR [eax],al
9f004789:	41                   	inc    ecx
9f00478a:	0e                   	push   cs
9f00478b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004791:	44                   	inc    esp
9f004792:	83 03 61             	add    DWORD PTR [ebx],0x61
9f004795:	c5 c3 0c             	(bad)  
9f004798:	04 04                	add    al,0x4
9f00479a:	00 00                	add    BYTE PTR [eax],al
9f00479c:	20 00                	and    BYTE PTR [eax],al
9f00479e:	00 00                	add    BYTE PTR [eax],al
9f0047a0:	98                   	cwde   
9f0047a1:	09 00                	or     DWORD PTR [eax],eax
9f0047a3:	00 5c d6 ff          	add    BYTE PTR [esi+edx*8-0x1],bl
9f0047a7:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f0047aa:	00 00                	add    BYTE PTR [eax],al
9f0047ac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0047af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0047b5:	44                   	inc    esp
9f0047b6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0047b9:	56                   	push   esi
9f0047ba:	c3                   	ret    
9f0047bb:	41                   	inc    ecx
9f0047bc:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0047bf:	04 28                	add    al,0x28
9f0047c1:	00 00                	add    BYTE PTR [eax],al
9f0047c3:	00 bc 09 00 00 97 d6 	add    BYTE PTR [ecx+ecx*1-0x29690000],bh
9f0047ca:	ff                   	(bad)  
9f0047cb:	ff                   	(bad)  
9f0047cc:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f0047cf:	00 00                	add    BYTE PTR [eax],al
9f0047d1:	41                   	inc    ecx
9f0047d2:	0e                   	push   cs
9f0047d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0047d9:	45                   	inc    ebp
9f0047da:	86 03                	xchg   BYTE PTR [ebx],al
9f0047dc:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f0047e0:	02 c3                	add    al,bl
9f0047e2:	41                   	inc    ecx
9f0047e3:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0047e7:	04 04                	add    al,0x4
9f0047e9:	00 00                	add    BYTE PTR [eax],al
9f0047eb:	00 20                	add    BYTE PTR [eax],ah
9f0047ed:	00 00                	add    BYTE PTR [eax],al
9f0047ef:	00 e8                	add    al,ch
9f0047f1:	09 00                	or     DWORD PTR [eax],eax
9f0047f3:	00 a9 d8 ff ff 48    	add    BYTE PTR [ecx+0x48ffffd8],ch
9f0047f9:	04 00                	add    al,0x0
9f0047fb:	00 00                	add    BYTE PTR [eax],al
9f0047fd:	41                   	inc    ecx
9f0047fe:	0e                   	push   cs
9f0047ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004805:	44                   	inc    esp
9f004806:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004809:	40                   	inc    eax
9f00480a:	04 c5                	add    al,0xc5
9f00480c:	c3                   	ret    
9f00480d:	0c 04                	or     al,0x4
9f00480f:	04 1c                	add    al,0x1c
9f004811:	00 00                	add    BYTE PTR [eax],al
9f004813:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
9f004816:	00 00                	add    BYTE PTR [eax],al
9f004818:	cd dc                	int    0xdc
9f00481a:	ff                   	(bad)  
9f00481b:	ff 33                	push   DWORD PTR [ebx]
9f00481d:	00 00                	add    BYTE PTR [eax],al
9f00481f:	00 00                	add    BYTE PTR [eax],al
9f004821:	41                   	inc    ecx
9f004822:	0e                   	push   cs
9f004823:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004829:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00482a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00482d:	04 00                	add    al,0x0
9f00482f:	00 20                	add    BYTE PTR [eax],ah
9f004831:	00 00                	add    BYTE PTR [eax],al
9f004833:	00 2c 0a             	add    BYTE PTR [edx+ecx*1],ch
9f004836:	00 00                	add    BYTE PTR [eax],al
9f004838:	e0 dc                	loopne 9f004816 <__x86.get_pc_thunk.cx+0xa12>
9f00483a:	ff                   	(bad)  
9f00483b:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f004842:	0e                   	push   cs
9f004843:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004849:	44                   	inc    esp
9f00484a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00484d:	7c c5                	jl     9f004814 <__x86.get_pc_thunk.cx+0xa10>
9f00484f:	c3                   	ret    
9f004850:	0c 04                	or     al,0x4
9f004852:	04 00                	add    al,0x0
9f004854:	20 00                	and    BYTE PTR [eax],al
9f004856:	00 00                	add    BYTE PTR [eax],al
9f004858:	50                   	push   eax
9f004859:	0a 00                	or     al,BYTE PTR [eax]
9f00485b:	00 40 dd             	add    BYTE PTR [eax-0x23],al
9f00485e:	ff                   	(bad)  
9f00485f:	ff                   	(bad)  
9f004860:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f004863:	00 00                	add    BYTE PTR [eax],al
9f004865:	41                   	inc    ecx
9f004866:	0e                   	push   cs
9f004867:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00486d:	44                   	inc    esp
9f00486e:	83 03 76             	add    DWORD PTR [ebx],0x76
9f004871:	c5 c3 0c             	(bad)  
9f004874:	04 04                	add    al,0x4
9f004876:	00 00                	add    BYTE PTR [eax],al
9f004878:	20 00                	and    BYTE PTR [eax],al
9f00487a:	00 00                	add    BYTE PTR [eax],al
9f00487c:	74 0a                	je     9f004888 <__x86.get_pc_thunk.cx+0xa84>
9f00487e:	00 00                	add    BYTE PTR [eax],al
9f004880:	5a                   	pop    edx
9f004881:	dd ff                	(bad)  
9f004883:	ff                   	(bad)  
9f004884:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f004887:	00 00                	add    BYTE PTR [eax],al
9f004889:	41                   	inc    ecx
9f00488a:	0e                   	push   cs
9f00488b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004891:	44                   	inc    esp
9f004892:	83 03 76             	add    DWORD PTR [ebx],0x76
9f004895:	c5 c3 0c             	(bad)  
9f004898:	04 04                	add    al,0x4
9f00489a:	00 00                	add    BYTE PTR [eax],al
9f00489c:	1c 00                	sbb    al,0x0
9f00489e:	00 00                	add    BYTE PTR [eax],al
9f0048a0:	98                   	cwde   
9f0048a1:	0a 00                	or     al,BYTE PTR [eax]
9f0048a3:	00 74 dd ff          	add    BYTE PTR [ebp+ebx*8-0x1],dh
9f0048a7:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f0048aa:	00 00                	add    BYTE PTR [eax],al
9f0048ac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048b5:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
9f0048b8:	0c 04                	or     al,0x4
9f0048ba:	04 00                	add    al,0x0
9f0048bc:	24 00                	and    al,0x0
9f0048be:	00 00                	add    BYTE PTR [eax],al
9f0048c0:	b8 0a 00 00 c4       	mov    eax,0xc400000a
9f0048c5:	dd ff                	(bad)  
9f0048c7:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f0048ca:	00 00                	add    BYTE PTR [eax],al
9f0048cc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048d5:	45                   	inc    ebp
9f0048d6:	86 03                	xchg   BYTE PTR [ebx],al
9f0048d8:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f0048dc:	c3                   	ret    
9f0048dd:	41                   	inc    ecx
9f0048de:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0048e2:	04 04                	add    al,0x4
9f0048e4:	1c 00                	sbb    al,0x0
9f0048e6:	00 00                	add    BYTE PTR [eax],al
9f0048e8:	e0 0a                	loopne 9f0048f4 <__x86.get_pc_thunk.cx+0xaf0>
9f0048ea:	00 00                	add    BYTE PTR [eax],al
9f0048ec:	fc                   	cld    
9f0048ed:	dd ff                	(bad)  
9f0048ef:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0048f2:	00 00                	add    BYTE PTR [eax],al
9f0048f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048fd:	7c c5                	jl     9f0048c4 <__x86.get_pc_thunk.cx+0xac0>
9f0048ff:	0c 04                	or     al,0x4
9f004901:	04 00                	add    al,0x0
9f004903:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004906:	00 00                	add    BYTE PTR [eax],al
9f004908:	00 0b                	add    BYTE PTR [ebx],cl
9f00490a:	00 00                	add    BYTE PTR [eax],al
9f00490c:	1c de                	sbb    al,0xde
9f00490e:	ff                   	(bad)  
9f00490f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004912:	00 00                	add    BYTE PTR [eax],al
9f004914:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004917:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00491d:	7c c5                	jl     9f0048e4 <__x86.get_pc_thunk.cx+0xae0>
9f00491f:	0c 04                	or     al,0x4
9f004921:	04 00                	add    al,0x0
9f004923:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004926:	00 00                	add    BYTE PTR [eax],al
9f004928:	20 0b                	and    BYTE PTR [ebx],cl
9f00492a:	00 00                	add    BYTE PTR [eax],al
9f00492c:	3c de                	cmp    al,0xde
9f00492e:	ff                   	(bad)  
9f00492f:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f004932:	00 00                	add    BYTE PTR [eax],al
9f004934:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004937:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00493d:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f004940:	0c 04                	or     al,0x4
9f004942:	04 00                	add    al,0x0
9f004944:	1c 00                	sbb    al,0x0
9f004946:	00 00                	add    BYTE PTR [eax],al
9f004948:	40                   	inc    eax
9f004949:	0b 00                	or     eax,DWORD PTR [eax]
9f00494b:	00 64 de ff          	add    BYTE PTR [esi+ebx*8-0x1],ah
9f00494f:	ff 30                	push   DWORD PTR [eax]
9f004951:	00 00                	add    BYTE PTR [eax],al
9f004953:	00 00                	add    BYTE PTR [eax],al
9f004955:	41                   	inc    ecx
9f004956:	0e                   	push   cs
9f004957:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00495d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00495e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004961:	04 00                	add    al,0x0
9f004963:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004966:	00 00                	add    BYTE PTR [eax],al
9f004968:	60                   	pusha  
9f004969:	0b 00                	or     eax,DWORD PTR [eax]
9f00496b:	00 74 de ff          	add    BYTE PTR [esi+ebx*8-0x1],dh
9f00496f:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f004972:	00 00                	add    BYTE PTR [eax],al
9f004974:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004977:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00497d:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f004980:	0c 04                	or     al,0x4
9f004982:	04 00                	add    al,0x0
9f004984:	1c 00                	sbb    al,0x0
9f004986:	00 00                	add    BYTE PTR [eax],al
9f004988:	80 0b 00             	or     BYTE PTR [ebx],0x0
9f00498b:	00 b0 de ff ff 31    	add    BYTE PTR [eax+0x31ffffde],dh
9f004991:	00 00                	add    BYTE PTR [eax],al
9f004993:	00 00                	add    BYTE PTR [eax],al
9f004995:	41                   	inc    ecx
9f004996:	0e                   	push   cs
9f004997:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00499d:	6d                   	ins    DWORD PTR es:[edi],dx
9f00499e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0049a1:	04 00                	add    al,0x0
9f0049a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0049a6:	00 00                	add    BYTE PTR [eax],al
9f0049a8:	a0 0b 00 00 c1       	mov    al,ds:0xc100000b
9f0049ad:	de ff                	fdivp  st(7),st
9f0049af:	ff 1a                	call   FWORD PTR [edx]
9f0049b1:	00 00                	add    BYTE PTR [eax],al
9f0049b3:	00 00                	add    BYTE PTR [eax],al
9f0049b5:	41                   	inc    ecx
9f0049b6:	0e                   	push   cs
9f0049b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049bd:	56                   	push   esi
9f0049be:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0049c1:	04 00                	add    al,0x0
9f0049c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0049c6:	00 00                	add    BYTE PTR [eax],al
9f0049c8:	c0 0b 00             	ror    BYTE PTR [ebx],0x0
9f0049cb:	00 bb de ff ff 39    	add    BYTE PTR [ebx+0x39ffffde],bh
9f0049d1:	00 00                	add    BYTE PTR [eax],al
9f0049d3:	00 00                	add    BYTE PTR [eax],al
9f0049d5:	41                   	inc    ecx
9f0049d6:	0e                   	push   cs
9f0049d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049dd:	75 c5                	jne    9f0049a4 <__x86.get_pc_thunk.cx+0xba0>
9f0049df:	0c 04                	or     al,0x4
9f0049e1:	04 00                	add    al,0x0
9f0049e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0049e6:	00 00                	add    BYTE PTR [eax],al
9f0049e8:	e0 0b                	loopne 9f0049f5 <__x86.get_pc_thunk.cx+0xbf1>
9f0049ea:	00 00                	add    BYTE PTR [eax],al
9f0049ec:	d4 de                	aam    0xde
9f0049ee:	ff                   	(bad)  
9f0049ef:	ff 1e                	call   FWORD PTR [esi]
9f0049f1:	00 00                	add    BYTE PTR [eax],al
9f0049f3:	00 00                	add    BYTE PTR [eax],al
9f0049f5:	41                   	inc    ecx
9f0049f6:	0e                   	push   cs
9f0049f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049fd:	5a                   	pop    edx
9f0049fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004a01:	04 00                	add    al,0x0
9f004a03:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004a06:	00 00                	add    BYTE PTR [eax],al
9f004a08:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f004a0b:	00 d4                	add    ah,dl
9f004a0d:	de ff                	fdivp  st(7),st
9f004a0f:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f004a12:	00 00                	add    BYTE PTR [eax],al
9f004a14:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a1d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f004a20:	0c 04                	or     al,0x4
9f004a22:	04 00                	add    al,0x0
9f004a24:	1c 00                	sbb    al,0x0
9f004a26:	00 00                	add    BYTE PTR [eax],al
9f004a28:	20 0c 00             	and    BYTE PTR [eax+eax*1],cl
9f004a2b:	00 1b                	add    BYTE PTR [ebx],bl
9f004a2d:	df ff                	(bad)  
9f004a2f:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f004a32:	00 00                	add    BYTE PTR [eax],al
9f004a34:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a3d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f004a40:	0c 04                	or     al,0x4
9f004a42:	04 00                	add    al,0x0
9f004a44:	1c 00                	sbb    al,0x0
9f004a46:	00 00                	add    BYTE PTR [eax],al
9f004a48:	40                   	inc    eax
9f004a49:	0c 00                	or     al,0x0
9f004a4b:	00 64 df ff          	add    BYTE PTR [edi+ebx*8-0x1],ah
9f004a4f:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
9f004a52:	00 00                	add    BYTE PTR [eax],al
9f004a54:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a5d:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
9f004a61:	04 04                	add    al,0x4
9f004a63:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004a66:	00 00                	add    BYTE PTR [eax],al
9f004a68:	60                   	pusha  
9f004a69:	0c 00                	or     al,0x0
9f004a6b:	00 a4 df ff ff 20 00 	add    BYTE PTR [edi+ebx*8+0x20ffff],ah
9f004a72:	00 00                	add    BYTE PTR [eax],al
9f004a74:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a7d:	5c                   	pop    esp
9f004a7e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004a81:	04 00                	add    al,0x0
9f004a83:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004a86:	00 00                	add    BYTE PTR [eax],al
9f004a88:	80 0c 00 00          	or     BYTE PTR [eax+eax*1],0x0
9f004a8c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f004a8d:	df ff                	(bad)  
9f004a8f:	ff                   	(bad)  
9f004a90:	7d 01                	jge    9f004a93 <__x86.get_pc_thunk.cx+0xc8f>
9f004a92:	00 00                	add    BYTE PTR [eax],al
9f004a94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a9d:	46                   	inc    esi
9f004a9e:	87 03                	xchg   DWORD PTR [ebx],eax
9f004aa0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004aa3:	05 03 70 01 c3       	add    eax,0xc3017003
9f004aa8:	41                   	inc    ecx
9f004aa9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004aad:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004ab0:	04 00                	add    al,0x0
9f004ab2:	00 00                	add    BYTE PTR [eax],al
9f004ab4:	1c 00                	sbb    al,0x0
9f004ab6:	00 00                	add    BYTE PTR [eax],al
9f004ab8:	b0 0c                	mov    al,0xc
9f004aba:	00 00                	add    BYTE PTR [eax],al
9f004abc:	f4                   	hlt    
9f004abd:	e0 ff                	loopne 9f004abe <__x86.get_pc_thunk.cx+0xcba>
9f004abf:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004ac5:	41                   	inc    ecx
9f004ac6:	0e                   	push   cs
9f004ac7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004acd:	59                   	pop    ecx
9f004ace:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004ad1:	04 00                	add    al,0x0
9f004ad3:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004ad6:	00 00                	add    BYTE PTR [eax],al
9f004ad8:	d0 0c 00             	ror    BYTE PTR [eax+eax*1],1
9f004adb:	00 f4                	add    ah,dh
9f004add:	e0 ff                	loopne 9f004ade <__x86.get_pc_thunk.cx+0xcda>
9f004adf:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f004ae6:	0e                   	push   cs
9f004ae7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004aed:	46                   	inc    esi
9f004aee:	87 03                	xchg   DWORD PTR [ebx],eax
9f004af0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004af3:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f004af8:	41                   	inc    ecx
9f004af9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004afd:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b00:	04 00                	add    al,0x0
9f004b02:	00 00                	add    BYTE PTR [eax],al
9f004b04:	20 00                	and    BYTE PTR [eax],al
9f004b06:	00 00                	add    BYTE PTR [eax],al
9f004b08:	00 0d 00 00 60 e2    	add    BYTE PTR ds:0xe2600000,cl
9f004b0e:	ff                   	(bad)  
9f004b0f:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f004b15:	41                   	inc    ecx
9f004b16:	0e                   	push   cs
9f004b17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b1d:	44                   	inc    esp
9f004b1e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004b21:	8e c5                	mov    es,ebp
9f004b23:	c3                   	ret    
9f004b24:	0c 04                	or     al,0x4
9f004b26:	04 00                	add    al,0x0
9f004b28:	1c 00                	sbb    al,0x0
9f004b2a:	00 00                	add    BYTE PTR [eax],al
9f004b2c:	24 0d                	and    al,0xd
9f004b2e:	00 00                	add    BYTE PTR [eax],al
9f004b30:	d2 e2                	shl    dl,cl
9f004b32:	ff                   	(bad)  
9f004b33:	ff 20                	jmp    DWORD PTR [eax]
9f004b35:	00 00                	add    BYTE PTR [eax],al
9f004b37:	00 00                	add    BYTE PTR [eax],al
9f004b39:	41                   	inc    ecx
9f004b3a:	0e                   	push   cs
9f004b3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b41:	5c                   	pop    esp
9f004b42:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b45:	04 00                	add    al,0x0
9f004b47:	00 28                	add    BYTE PTR [eax],ch
9f004b49:	00 00                	add    BYTE PTR [eax],al
9f004b4b:	00 44 0d 00          	add    BYTE PTR [ebp+ecx*1+0x0],al
9f004b4f:	00 d4                	add    ah,dl
9f004b51:	e2 ff                	loop   9f004b52 <__x86.get_pc_thunk.cx+0xd4e>
9f004b53:	ff 43 01             	inc    DWORD PTR [ebx+0x1]
9f004b56:	00 00                	add    BYTE PTR [eax],al
9f004b58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b61:	45                   	inc    ebp
9f004b62:	86 03                	xchg   BYTE PTR [ebx],al
9f004b64:	83 04 03 38          	add    DWORD PTR [ebx+eax*1],0x38
9f004b68:	01 c3                	add    ebx,eax
9f004b6a:	41                   	inc    ecx
9f004b6b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004b6f:	04 04                	add    al,0x4
9f004b71:	00 00                	add    BYTE PTR [eax],al
9f004b73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004b76:	00 00                	add    BYTE PTR [eax],al
9f004b78:	70 0d                	jo     9f004b87 <__x86.get_pc_thunk.cx+0xd83>
9f004b7a:	00 00                	add    BYTE PTR [eax],al
9f004b7c:	eb e3                	jmp    9f004b61 <__x86.get_pc_thunk.cx+0xd5d>
9f004b7e:	ff                   	(bad)  
9f004b7f:	ff 26                	jmp    DWORD PTR [esi]
9f004b81:	00 00                	add    BYTE PTR [eax],al
9f004b83:	00 00                	add    BYTE PTR [eax],al
9f004b85:	41                   	inc    ecx
9f004b86:	0e                   	push   cs
9f004b87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b8d:	62                   	(bad)  
9f004b8e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b91:	04 00                	add    al,0x0
9f004b93:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004b96:	00 00                	add    BYTE PTR [eax],al
9f004b98:	90                   	nop
9f004b99:	0d 00 00 f4 e3       	or     eax,0xe3f40000
9f004b9e:	ff                   	(bad)  
9f004b9f:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f004ba5:	41                   	inc    ecx
9f004ba6:	0e                   	push   cs
9f004ba7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bad:	45                   	inc    ebp
9f004bae:	86 03                	xchg   BYTE PTR [ebx],al
9f004bb0:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f004bb4:	c3                   	ret    
9f004bb5:	41                   	inc    ecx
9f004bb6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004bba:	04 04                	add    al,0x4
9f004bbc:	24 00                	and    al,0x0
9f004bbe:	00 00                	add    BYTE PTR [eax],al
9f004bc0:	b8 0d 00 00 6a       	mov    eax,0x6a00000d
9f004bc5:	e4 ff                	in     al,0xff
9f004bc7:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f004bca:	00 00                	add    BYTE PTR [eax],al
9f004bcc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bcf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bd5:	42                   	inc    edx
9f004bd6:	86 03                	xchg   BYTE PTR [ebx],al
9f004bd8:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f004bdc:	c3                   	ret    
9f004bdd:	41                   	inc    ecx
9f004bde:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004be2:	04 04                	add    al,0x4
9f004be4:	1c 00                	sbb    al,0x0
9f004be6:	00 00                	add    BYTE PTR [eax],al
9f004be8:	e0 0d                	loopne 9f004bf7 <__x86.get_pc_thunk.cx+0xdf3>
9f004bea:	00 00                	add    BYTE PTR [eax],al
9f004bec:	b0 e4                	mov    al,0xe4
9f004bee:	ff                   	(bad)  
9f004bef:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004bf5:	41                   	inc    ecx
9f004bf6:	0e                   	push   cs
9f004bf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bfd:	59                   	pop    ecx
9f004bfe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c01:	04 00                	add    al,0x0
9f004c03:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004c06:	00 00                	add    BYTE PTR [eax],al
9f004c08:	00 0e                	add    BYTE PTR [esi],cl
9f004c0a:	00 00                	add    BYTE PTR [eax],al
9f004c0c:	b0 e4                	mov    al,0xe4
9f004c0e:	ff                   	(bad)  
9f004c0f:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f004c13:	00 00                	add    BYTE PTR [eax],al
9f004c15:	41                   	inc    ecx
9f004c16:	0e                   	push   cs
9f004c17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c1d:	45                   	inc    ebp
9f004c1e:	86 03                	xchg   BYTE PTR [ebx],al
9f004c20:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f004c24:	41                   	inc    ecx
9f004c25:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004c29:	04 04                	add    al,0x4
9f004c2b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004c2e:	00 00                	add    BYTE PTR [eax],al
9f004c30:	28 0e                	sub    BYTE PTR [esi],cl
9f004c32:	00 00                	add    BYTE PTR [eax],al
9f004c34:	cc                   	int3   
9f004c35:	e4 ff                	in     al,0xff
9f004c37:	ff 19                	call   FWORD PTR [ecx]
9f004c39:	03 00                	add    eax,DWORD PTR [eax]
9f004c3b:	00 00                	add    BYTE PTR [eax],al
9f004c3d:	41                   	inc    ecx
9f004c3e:	0e                   	push   cs
9f004c3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c45:	44                   	inc    esp
9f004c46:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004c49:	10 03                	adc    BYTE PTR [ebx],al
9f004c4b:	c3                   	ret    
9f004c4c:	41                   	inc    ecx
9f004c4d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c50:	04 00                	add    al,0x0
9f004c52:	00 00                	add    BYTE PTR [eax],al
9f004c54:	1c 00                	sbb    al,0x0
9f004c56:	00 00                	add    BYTE PTR [eax],al
9f004c58:	50                   	push   eax
9f004c59:	0e                   	push   cs
9f004c5a:	00 00                	add    BYTE PTR [eax],al
9f004c5c:	bd e7 ff ff 1d       	mov    ebp,0x1dffffe7
9f004c61:	00 00                	add    BYTE PTR [eax],al
9f004c63:	00 00                	add    BYTE PTR [eax],al
9f004c65:	41                   	inc    ecx
9f004c66:	0e                   	push   cs
9f004c67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c6d:	59                   	pop    ecx
9f004c6e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c71:	04 00                	add    al,0x0
9f004c73:	00 20                	add    BYTE PTR [eax],ah
9f004c75:	00 00                	add    BYTE PTR [eax],al
9f004c77:	00 70 0e             	add    BYTE PTR [eax+0xe],dh
9f004c7a:	00 00                	add    BYTE PTR [eax],al
9f004c7c:	ba e7 ff ff 46       	mov    edx,0x46ffffe7
9f004c81:	00 00                	add    BYTE PTR [eax],al
9f004c83:	00 00                	add    BYTE PTR [eax],al
9f004c85:	41                   	inc    ecx
9f004c86:	0e                   	push   cs
9f004c87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c8d:	44                   	inc    esp
9f004c8e:	83 03 7e             	add    DWORD PTR [ebx],0x7e
9f004c91:	c5 c3 0c             	(bad)  
9f004c94:	04 04                	add    al,0x4
9f004c96:	00 00                	add    BYTE PTR [eax],al
9f004c98:	1c 00                	sbb    al,0x0
9f004c9a:	00 00                	add    BYTE PTR [eax],al
9f004c9c:	94                   	xchg   esp,eax
9f004c9d:	0e                   	push   cs
9f004c9e:	00 00                	add    BYTE PTR [eax],al
9f004ca0:	dc e7                	fsubr  st(7),st
9f004ca2:	ff                   	(bad)  
9f004ca3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f004ca9:	41                   	inc    ecx
9f004caa:	0e                   	push   cs
9f004cab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cb1:	71 c5                	jno    9f004c78 <__x86.get_pc_thunk.cx+0xe74>
9f004cb3:	0c 04                	or     al,0x4
9f004cb5:	04 00                	add    al,0x0
9f004cb7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004cba:	00 00                	add    BYTE PTR [eax],al
9f004cbc:	b4 0e                	mov    ah,0xe
9f004cbe:	00 00                	add    BYTE PTR [eax],al
9f004cc0:	f1                   	icebp  
9f004cc1:	e7 ff                	out    0xff,eax
9f004cc3:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004cc9:	41                   	inc    ecx
9f004cca:	0e                   	push   cs
9f004ccb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cd1:	59                   	pop    ecx
9f004cd2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004cd5:	04 00                	add    al,0x0
9f004cd7:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004cda:	00 00                	add    BYTE PTR [eax],al
9f004cdc:	d4 0e                	aam    0xe
9f004cde:	00 00                	add    BYTE PTR [eax],al
9f004ce0:	ee                   	out    dx,al
9f004ce1:	e7 ff                	out    0xff,eax
9f004ce3:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f004ce6:	00 00                	add    BYTE PTR [eax],al
9f004ce8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ceb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cf1:	46                   	inc    esi
9f004cf2:	87 03                	xchg   DWORD PTR [ebx],eax
9f004cf4:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004cf7:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f004cfc:	41                   	inc    ecx
9f004cfd:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004d01:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d04:	04 00                	add    al,0x0
9f004d06:	00 00                	add    BYTE PTR [eax],al
9f004d08:	24 00                	and    al,0x0
9f004d0a:	00 00                	add    BYTE PTR [eax],al
9f004d0c:	04 0f                	add    al,0xf
9f004d0e:	00 00                	add    BYTE PTR [eax],al
9f004d10:	15 f0 ff ff 6d       	adc    eax,0x6dfffff0
9f004d15:	00 00                	add    BYTE PTR [eax],al
9f004d17:	00 00                	add    BYTE PTR [eax],al
9f004d19:	41                   	inc    ecx
9f004d1a:	0e                   	push   cs
9f004d1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d21:	45                   	inc    ebp
9f004d22:	86 03                	xchg   BYTE PTR [ebx],al
9f004d24:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f004d28:	c3                   	ret    
9f004d29:	41                   	inc    ecx
9f004d2a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004d2e:	04 04                	add    al,0x4
9f004d30:	20 00                	and    BYTE PTR [eax],al
9f004d32:	00 00                	add    BYTE PTR [eax],al
9f004d34:	2c 0f                	sub    al,0xf
9f004d36:	00 00                	add    BYTE PTR [eax],al
9f004d38:	5a                   	pop    edx
9f004d39:	f0 ff                	lock (bad) 
9f004d3b:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f004d3e:	00 00                	add    BYTE PTR [eax],al
9f004d40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d49:	44                   	inc    esp
9f004d4a:	83 03 79             	add    DWORD PTR [ebx],0x79
9f004d4d:	c5 c3 0c             	(bad)  
9f004d50:	04 04                	add    al,0x4
9f004d52:	00 00                	add    BYTE PTR [eax],al
9f004d54:	10 00                	adc    BYTE PTR [eax],al
9f004d56:	00 00                	add    BYTE PTR [eax],al
9f004d58:	50                   	push   eax
9f004d59:	0f 00 00             	sldt   WORD PTR [eax]
9f004d5c:	a8 f0                	test   al,0xf0
9f004d5e:	ff                   	(bad)  
9f004d5f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f004d62:	00 00                	add    BYTE PTR [eax],al
9f004d64:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f004d68 <.dynsym>:
	...
9f004d78:	5b                   	pop    ebx
9f004d79:	01 00                	add    DWORD PTR [eax],eax
9f004d7b:	00 e8                	add    al,ch
9f004d7d:	26 00 9f 40 00 00 00 	add    BYTE PTR es:[edi+0x40],bl
9f004d84:	12 00                	adc    al,BYTE PTR [eax]
9f004d86:	01 00                	add    DWORD PTR [eax],eax
9f004d88:	eb 00                	jmp    9f004d8a <__x86.get_pc_thunk.cx+0xf86>
9f004d8a:	00 00                	add    BYTE PTR [eax],al
9f004d8c:	8c 11                	mov    WORD PTR [ecx],ss
9f004d8e:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f004d94:	12 00                	adc    al,BYTE PTR [eax]
9f004d96:	01 00                	add    DWORD PTR [eax],eax
9f004d98:	b5 00                	mov    ch,0x0
9f004d9a:	00 00                	add    BYTE PTR [eax],al
9f004d9c:	b0 0c                	mov    al,0xc
9f004d9e:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f004da4:	12 00                	adc    al,BYTE PTR [eax]
9f004da6:	01 00                	add    DWORD PTR [eax],eax
9f004da8:	bb 00 00 00 09       	mov    ebx,0x9000000
9f004dad:	0d 00 9f 54 00       	or     eax,0x549f00
9f004db2:	00 00                	add    BYTE PTR [eax],al
9f004db4:	12 00                	adc    al,BYTE PTR [eax]
9f004db6:	01 00                	add    DWORD PTR [eax],eax
9f004db8:	3d 00 00 00 14       	cmp    eax,0x14000000
9f004dbd:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f004dc2:	00 00                	add    BYTE PTR [eax],al
9f004dc4:	12 00                	adc    al,BYTE PTR [eax]
9f004dc6:	01 00                	add    DWORD PTR [eax],eax
9f004dc8:	6a 01                	push   0x1
9f004dca:	00 00                	add    BYTE PTR [eax],al
9f004dcc:	e0 27                	loopne 9f004df5 <__x86.get_pc_thunk.cx+0xff1>
9f004dce:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f004dd4:	12 00                	adc    al,BYTE PTR [eax]
9f004dd6:	01 00                	add    DWORD PTR [eax],eax
9f004dd8:	44                   	inc    esp
9f004dd9:	01 00                	add    DWORD PTR [eax],eax
9f004ddb:	00 18                	add    BYTE PTR [eax],bl
9f004ddd:	25 00 9f 84 00       	and    eax,0x849f00
9f004de2:	00 00                	add    BYTE PTR [eax],al
9f004de4:	12 00                	adc    al,BYTE PTR [eax]
9f004de6:	01 00                	add    DWORD PTR [eax],eax
9f004de8:	53                   	push   ebx
9f004de9:	00 00                	add    BYTE PTR [eax],al
9f004deb:	00 70 05             	add    BYTE PTR [eax+0x5],dh
9f004dee:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
9f004df4:	12 00                	adc    al,BYTE PTR [eax]
9f004df6:	01 00                	add    DWORD PTR [eax],eax
9f004df8:	84 00                	test   BYTE PTR [eax],al
9f004dfa:	00 00                	add    BYTE PTR [eax],al
9f004dfc:	e0 09                	loopne 9f004e07 <__x86.get_pc_thunk.cx+0x1003>
9f004dfe:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
9f004e04:	12 00                	adc    al,BYTE PTR [eax]
9f004e06:	01 00                	add    DWORD PTR [eax],eax
9f004e08:	83 00 00             	add    DWORD PTR [eax],0x0
9f004e0b:	00 22                	add    BYTE PTR [edx],ah
9f004e0d:	09 00                	or     DWORD PTR [eax],eax
9f004e0f:	9f                   	lahf   
9f004e10:	10 00                	adc    BYTE PTR [eax],al
9f004e12:	00 00                	add    BYTE PTR [eax],al
9f004e14:	12 00                	adc    al,BYTE PTR [eax]
9f004e16:	01 00                	add    DWORD PTR [eax],eax
9f004e18:	31 01                	xor    DWORD PTR [ecx],eax
9f004e1a:	00 00                	add    BYTE PTR [eax],al
9f004e1c:	cb                   	retf   
9f004e1d:	1c 00                	sbb    al,0x0
9f004e1f:	9f                   	lahf   
9f004e20:	20 00                	and    BYTE PTR [eax],al
9f004e22:	00 00                	add    BYTE PTR [eax],al
9f004e24:	12 00                	adc    al,BYTE PTR [eax]
9f004e26:	01 00                	add    DWORD PTR [eax],eax
9f004e28:	ff 00                	inc    DWORD PTR [eax]
9f004e2a:	00 00                	add    BYTE PTR [eax],al
9f004e2c:	2c 13                	sub    al,0x13
9f004e2e:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f004e34:	12 00                	adc    al,BYTE PTR [eax]
9f004e36:	01 00                	add    DWORD PTR [eax],eax
9f004e38:	89 00                	mov    DWORD PTR [eax],eax
9f004e3a:	00 00                	add    BYTE PTR [eax],al
9f004e3c:	34 09                	xor    al,0x9
9f004e3e:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f004e44:	12 00                	adc    al,BYTE PTR [eax]
9f004e46:	01 00                	add    DWORD PTR [eax],eax
9f004e48:	1d 01 00 00 1a       	sbb    eax,0x1a000001
9f004e4d:	1a 00                	sbb    al,BYTE PTR [eax]
9f004e4f:	9f                   	lahf   
9f004e50:	20 00                	and    BYTE PTR [eax],al
9f004e52:	00 00                	add    BYTE PTR [eax],al
9f004e54:	12 00                	adc    al,BYTE PTR [eax]
9f004e56:	01 00                	add    DWORD PTR [eax],eax
9f004e58:	c2 00 00             	ret    0x0
9f004e5b:	00 1c 0e             	add    BYTE PTR [esi+ecx*1],bl
9f004e5e:	00 9f 72 00 00 00    	add    BYTE PTR [edi+0x72],bl
9f004e64:	12 00                	adc    al,BYTE PTR [eax]
9f004e66:	01 00                	add    DWORD PTR [eax],eax
9f004e68:	05 01 00 00 49       	add    eax,0x49000001
9f004e6d:	16                   	push   ss
9f004e6e:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f004e74:	12 00                	adc    al,BYTE PTR [eax]
9f004e76:	01 00                	add    DWORD PTR [eax],eax
9f004e78:	92                   	xchg   edx,eax
9f004e79:	01 00                	add    DWORD PTR [eax],eax
9f004e7b:	00 30                	add    BYTE PTR [eax],dh
9f004e7d:	2a 00                	sub    al,BYTE PTR [eax]
9f004e7f:	9f                   	lahf   
9f004e80:	7d 01                	jge    9f004e83 <__x86.get_pc_thunk.cx+0x107f>
9f004e82:	00 00                	add    BYTE PTR [eax],al
9f004e84:	12 00                	adc    al,BYTE PTR [eax]
9f004e86:	01 00                	add    DWORD PTR [eax],eax
9f004e88:	17                   	pop    ss
9f004e89:	00 00                	add    BYTE PTR [eax],al
9f004e8b:	00 2b                	add    BYTE PTR [ebx],ch
9f004e8d:	02 00                	add    al,BYTE PTR [eax]
9f004e8f:	9f                   	lahf   
9f004e90:	bb 00 00 00 12       	mov    ebx,0x12000000
9f004e95:	00 01                	add    BYTE PTR [ecx],al
9f004e97:	00 18                	add    BYTE PTR [eax],bl
9f004e99:	01 00                	add    DWORD PTR [eax],eax
9f004e9b:	00 88 16 00 9f 73    	add    BYTE PTR [eax+0x739f0016],cl
9f004ea1:	00 00                	add    BYTE PTR [eax],al
9f004ea3:	00 12                	add    BYTE PTR [edx],dl
9f004ea5:	00 01                	add    BYTE PTR [ecx],al
9f004ea7:	00 cc                	add    ah,cl
9f004ea9:	01 00                	add    DWORD PTR [eax],eax
9f004eab:	00 19                	add    BYTE PTR [ecx],bl
9f004ead:	34 00                	xor    al,0x0
9f004eaf:	9f                   	lahf   
9f004eb0:	1d 00 00 00 12       	sbb    eax,0x12000000
9f004eb5:	00 01                	add    BYTE PTR [ecx],al
9f004eb7:	00 a2 01 00 00 d0    	add    BYTE PTR [edx-0x2fffffff],ah
9f004ebd:	2b 00                	sub    eax,DWORD PTR [eax]
9f004ebf:	9f                   	lahf   
9f004ec0:	9c                   	pushf  
9f004ec1:	01 00                	add    DWORD PTR [eax],eax
9f004ec3:	00 12                	add    BYTE PTR [edx],dl
9f004ec5:	00 01                	add    BYTE PTR [ecx],al
9f004ec7:	00 ab 00 00 00 d2    	add    BYTE PTR [ebx-0x2e000000],ch
9f004ecd:	0b 00                	or     eax,DWORD PTR [eax]
9f004ecf:	9f                   	lahf   
9f004ed0:	bf 00 00 00 12       	mov    edi,0x12000000
9f004ed5:	00 01                	add    BYTE PTR [ecx],al
9f004ed7:	00 3f                	add    BYTE PTR [edi],bh
9f004ed9:	01 00                	add    DWORD PTR [eax],eax
9f004edb:	00 d4                	add    ah,dl
9f004edd:	1d 00 9f 29 00       	sbb    eax,0x299f00
9f004ee2:	00 00                	add    BYTE PTR [eax],al
9f004ee4:	12 00                	adc    al,BYTE PTR [eax]
9f004ee6:	01 00                	add    DWORD PTR [eax],eax
9f004ee8:	7a 01                	jp     9f004eeb <__x86.get_pc_thunk.cx+0x10e7>
9f004eea:	00 00                	add    BYTE PTR [eax],al
9f004eec:	c0 28 00             	shr    BYTE PTR [eax],0x0
9f004eef:	9f                   	lahf   
9f004ef0:	1e                   	push   ds
9f004ef1:	00 00                	add    BYTE PTR [eax],al
9f004ef3:	00 12                	add    BYTE PTR [edx],dl
9f004ef5:	00 01                	add    BYTE PTR [ecx],al
9f004ef7:	00 df                	add    bh,bl
9f004ef9:	00 00                	add    BYTE PTR [eax],al
9f004efb:	00 49 0f             	add    BYTE PTR [ecx+0xf],cl
9f004efe:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
9f004f04:	12 00                	adc    al,BYTE PTR [eax]
9f004f06:	01 00                	add    DWORD PTR [eax],eax
9f004f08:	78 00                	js     9f004f0a <__x86.get_pc_thunk.cx+0x1106>
9f004f0a:	00 00                	add    BYTE PTR [eax],al
9f004f0c:	ce                   	into   
9f004f0d:	08 00                	or     BYTE PTR [eax],al
9f004f0f:	9f                   	lahf   
9f004f10:	26 00 00             	add    BYTE PTR es:[eax],al
9f004f13:	00 12                	add    BYTE PTR [edx],dl
9f004f15:	00 01                	add    BYTE PTR [ecx],al
9f004f17:	00 4d 01             	add    BYTE PTR [ebp+0x1],cl
9f004f1a:	00 00                	add    BYTE PTR [eax],al
9f004f1c:	9c                   	pushf  
9f004f1d:	25 00 9f 3e 00       	and    eax,0x3e9f00
9f004f22:	00 00                	add    BYTE PTR [eax],al
9f004f24:	12 00                	adc    al,BYTE PTR [eax]
9f004f26:	01 00                	add    DWORD PTR [eax],eax
9f004f28:	c3                   	ret    
9f004f29:	01 00                	add    DWORD PTR [eax],eax
9f004f2b:	00 bc 30 00 9f 44 00 	add    BYTE PTR [eax+esi*1+0x449f00],bh
9f004f32:	00 00                	add    BYTE PTR [eax],al
9f004f34:	12 00                	adc    al,BYTE PTR [eax]
9f004f36:	01 00                	add    DWORD PTR [eax],eax
9f004f38:	da 00                	fiadd  DWORD PTR [eax]
9f004f3a:	00 00                	add    BYTE PTR [eax],al
9f004f3c:	fd                   	std    
9f004f3d:	0e                   	push   cs
9f004f3e:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
9f004f44:	12 00                	adc    al,BYTE PTR [eax]
9f004f46:	01 00                	add    DWORD PTR [eax],eax
9f004f48:	13 01                	adc    eax,DWORD PTR [ecx]
9f004f4a:	00 00                	add    BYTE PTR [eax],al
9f004f4c:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f4d:	16                   	push   ss
9f004f4e:	00 9f 19 00 00 00    	add    BYTE PTR [edi+0x19],bl
9f004f54:	12 00                	adc    al,BYTE PTR [eax]
9f004f56:	01 00                	add    DWORD PTR [eax],eax
9f004f58:	61                   	popa   
9f004f59:	00 00                	add    BYTE PTR [eax],al
9f004f5b:	00 dc                	add    ah,bl
9f004f5d:	07                   	pop    es
9f004f5e:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
9f004f64:	12 00                	adc    al,BYTE PTR [eax]
9f004f66:	01 00                	add    DWORD PTR [eax],eax
9f004f68:	eb 01                	jmp    9f004f6b <__x86.get_pc_thunk.cx+0x1167>
9f004f6a:	00 00                	add    BYTE PTR [eax],al
9f004f6c:	ce                   	into   
9f004f6d:	34 00                	xor    al,0x0
9f004f6f:	9f                   	lahf   
9f004f70:	57                   	push   edi
9f004f71:	08 00                	or     BYTE PTR [eax],al
9f004f73:	00 12                	add    BYTE PTR [edx],dl
9f004f75:	00 01                	add    BYTE PTR [ecx],al
9f004f77:	00 bc 01 00 00 9c 30 	add    BYTE PTR [ecx+eax*1+0x309c0000],bh
9f004f7e:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f004f84:	12 00                	adc    al,BYTE PTR [eax]
9f004f86:	01 00                	add    DWORD PTR [eax],eax
9f004f88:	73 00                	jae    9f004f8a <__x86.get_pc_thunk.cx+0x1186>
9f004f8a:	00 00                	add    BYTE PTR [eax],al
9f004f8c:	64 08 00             	or     BYTE PTR fs:[eax],al
9f004f8f:	9f                   	lahf   
9f004f90:	35 00 00 00 12       	xor    eax,0x12000000
9f004f95:	00 01                	add    BYTE PTR [ecx],al
9f004f97:	00 82 01 00 00 e0    	add    BYTE PTR [edx-0x1fffffff],al
9f004f9d:	28 00                	sub    BYTE PTR [eax],al
9f004f9f:	9f                   	lahf   
9f004fa0:	67 00 00             	add    BYTE PTR [bx+si],al
9f004fa3:	00 12                	add    BYTE PTR [edx],dl
9f004fa5:	00 01                	add    BYTE PTR [ecx],al
9f004fa7:	00 8a 01 00 00 10    	add    BYTE PTR [edx+0x10000001],cl
9f004fad:	2a 00                	sub    al,BYTE PTR [eax]
9f004faf:	9f                   	lahf   
9f004fb0:	20 00                	and    BYTE PTR [eax],al
9f004fb2:	00 00                	add    BYTE PTR [eax],al
9f004fb4:	12 00                	adc    al,BYTE PTR [eax]
9f004fb6:	01 00                	add    DWORD PTR [eax],eax
9f004fb8:	5a                   	pop    edx
9f004fb9:	00 00                	add    BYTE PTR [eax],al
9f004fbb:	00 1a                	add    BYTE PTR [edx],bl
9f004fbd:	06                   	push   es
9f004fbe:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f004fc4:	12 00                	adc    al,BYTE PTR [eax]
9f004fc6:	01 00                	add    DWORD PTR [eax],eax
9f004fc8:	24 01                	and    al,0x1
9f004fca:	00 00                	add    BYTE PTR [eax],al
9f004fcc:	bf 1a 00 9f 23       	mov    edi,0x239f001a
9f004fd1:	00 00                	add    BYTE PTR [eax],al
9f004fd3:	00 12                	add    BYTE PTR [edx],dl
9f004fd5:	00 01                	add    BYTE PTR [ecx],al
9f004fd7:	00 10                	add    BYTE PTR [eax],dl
9f004fd9:	00 00                	add    BYTE PTR [eax],al
9f004fdb:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
9f004fde:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f004fe4:	12 00                	adc    al,BYTE PTR [eax]
9f004fe6:	01 00                	add    DWORD PTR [eax],eax
9f004fe8:	d5 00                	aad    0x0
9f004fea:	00 00                	add    BYTE PTR [eax],al
9f004fec:	d4 0e                	aam    0xe
9f004fee:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f004ff4:	12 00                	adc    al,BYTE PTR [eax]
9f004ff6:	01 00                	add    DWORD PTR [eax],eax
9f004ff8:	8e 00                	mov    es,WORD PTR [eax]
9f004ffa:	00 00                	add    BYTE PTR [eax],al
9f004ffc:	00 00                	add    BYTE PTR [eax],al
9f004ffe:	13 00                	adc    eax,DWORD PTR [eax]
9f005000:	00 00                	add    BYTE PTR [eax],al
9f005002:	00 00                	add    BYTE PTR [eax],al
9f005004:	10 00                	adc    BYTE PTR [eax],al
9f005006:	01 00                	add    DWORD PTR [eax],eax
9f005008:	d5 01                	aad    0x1
9f00500a:	00 00                	add    BYTE PTR [eax],al
9f00500c:	36                   	ss
9f00500d:	34 00                	xor    al,0x0
9f00500f:	9f                   	lahf   
9f005010:	46                   	inc    esi
9f005011:	00 00                	add    BYTE PTR [eax],al
9f005013:	00 12                	add    BYTE PTR [edx],dl
9f005015:	00 01                	add    BYTE PTR [ecx],al
9f005017:	00 38                	add    BYTE PTR [eax],bh
9f005019:	01 00                	add    DWORD PTR [eax],eax
9f00501b:	00 b3 1d 00 9f 20    	add    BYTE PTR [ebx+0x209f001d],dh
9f005021:	00 00                	add    BYTE PTR [eax],al
9f005023:	00 12                	add    BYTE PTR [edx],dl
9f005025:	00 01                	add    BYTE PTR [ecx],al
9f005027:	00 a9 01 00 00 02    	add    BYTE PTR [ecx+0x2000001],ch
9f00502d:	2e 00 9f 20 00 00 00 	add    BYTE PTR cs:[edi+0x20],bl
9f005034:	12 00                	adc    al,BYTE PTR [eax]
9f005036:	01 00                	add    DWORD PTR [eax],eax
9f005038:	a3 00 00 00 9d       	mov    ds:0x9d000000,eax
9f00503d:	09 00                	or     DWORD PTR [eax],eax
9f00503f:	9f                   	lahf   
9f005040:	43                   	inc    ebx
9f005041:	00 00                	add    BYTE PTR [eax],al
9f005043:	00 12                	add    BYTE PTR [edx],dl
9f005045:	00 01                	add    BYTE PTR [ecx],al
9f005047:	00 ed                	add    ch,ch
9f005049:	01 00                	add    DWORD PTR [eax],eax
9f00504b:	00 92 3d 00 9f 41    	add    BYTE PTR [edx+0x419f003d],dl
9f005051:	00 00                	add    BYTE PTR [eax],al
9f005053:	00 12                	add    BYTE PTR [edx],dl
9f005055:	00 01                	add    BYTE PTR [ecx],al
9f005057:	00 7e 00             	add    BYTE PTR [esi+0x0],bh
9f00505a:	00 00                	add    BYTE PTR [eax],al
9f00505c:	f4                   	hlt    
9f00505d:	08 00                	or     BYTE PTR [eax],al
9f00505f:	9f                   	lahf   
9f005060:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f005063:	00 12                	add    BYTE PTR [edx],dl
9f005065:	00 01                	add    BYTE PTR [ecx],al
9f005067:	00 9e 00 00 00 5a    	add    BYTE PTR [esi+0x5a000000],bl
9f00506d:	09 00                	or     DWORD PTR [eax],eax
9f00506f:	9f                   	lahf   
9f005070:	43                   	inc    ebx
9f005071:	00 00                	add    BYTE PTR [eax],al
9f005073:	00 12                	add    BYTE PTR [edx],dl
9f005075:	00 01                	add    BYTE PTR [ecx],al
9f005077:	00 54 01 00          	add    BYTE PTR [ecx+eax*1+0x0],dl
9f00507b:	00 88 26 00 9f 5e    	add    BYTE PTR [eax+0x5e9f0026],cl
9f005081:	00 00                	add    BYTE PTR [eax],al
9f005083:	00 12                	add    BYTE PTR [edx],dl
9f005085:	00 01                	add    BYTE PTR [ecx],al
9f005087:	00 f8                	add    al,bh
9f005089:	00 00                	add    BYTE PTR [eax],al
9f00508b:	00 c8                	add    al,cl
9f00508d:	11 00                	adc    DWORD PTR [eax],eax
9f00508f:	9f                   	lahf   
9f005090:	20 00                	and    BYTE PTR [eax],al
9f005092:	00 00                	add    BYTE PTR [eax],al
9f005094:	12 00                	adc    al,BYTE PTR [eax]
9f005096:	01 00                	add    DWORD PTR [eax],eax
9f005098:	08 00                	or     BYTE PTR [eax],al
9f00509a:	00 00                	add    BYTE PTR [eax],al
9f00509c:	70 00                	jo     9f00509e <__x86.get_pc_thunk.cx+0x129a>
9f00509e:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f0050a4:	12 00                	adc    al,BYTE PTR [eax]
9f0050a6:	01 00                	add    DWORD PTR [eax],eax
9f0050a8:	62 01                	bound  eax,QWORD PTR [ecx]
9f0050aa:	00 00                	add    BYTE PTR [eax],al
9f0050ac:	68 27 00 9f 47       	push   0x479f0027
9f0050b1:	00 00                	add    BYTE PTR [eax],al
9f0050b3:	00 12                	add    BYTE PTR [edx],dl
9f0050b5:	00 01                	add    BYTE PTR [ecx],al
9f0050b7:	00 c8                	add    al,cl
9f0050b9:	00 00                	add    BYTE PTR [eax],al
9f0050bb:	00 ab 0e 00 9f 29    	add    BYTE PTR [ebx+0x299f000e],ch
9f0050c1:	00 00                	add    BYTE PTR [eax],al
9f0050c3:	00 12                	add    BYTE PTR [edx],dl
9f0050c5:	00 01                	add    BYTE PTR [ecx],al
9f0050c7:	00 df                	add    bh,bl
9f0050c9:	01 00                	add    DWORD PTR [eax],eax
9f0050cb:	00 b1 34 00 9f 1d    	add    BYTE PTR [ecx+0x1d9f0034],dh
9f0050d1:	00 00                	add    BYTE PTR [eax],al
9f0050d3:	00 12                	add    BYTE PTR [edx],dl
9f0050d5:	00 01                	add    BYTE PTR [ecx],al
9f0050d7:	00 f2                	add    dl,dh
9f0050d9:	01 00                	add    DWORD PTR [eax],eax
9f0050db:	00 25 3d 00 9f 6d    	add    BYTE PTR ds:0x6d9f003d,ah
9f0050e1:	00 00                	add    BYTE PTR [eax],al
9f0050e3:	00 12                	add    BYTE PTR [edx],dl
9f0050e5:	00 01                	add    BYTE PTR [ecx],al
9f0050e7:	00 f3                	add    bl,dh
9f0050e9:	00 00                	add    BYTE PTR [eax],al
9f0050eb:	00 a8 11 00 9f 20    	add    BYTE PTR [eax+0x209f0011],ch
9f0050f1:	00 00                	add    BYTE PTR [eax],al
9f0050f3:	00 12                	add    BYTE PTR [edx],dl
9f0050f5:	00 01                	add    BYTE PTR [ecx],al
9f0050f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0050fa:	00 00                	add    BYTE PTR [eax],al
9f0050fc:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
9f005101:	00 00                	add    BYTE PTR [eax],al
9f005103:	00 12                	add    BYTE PTR [edx],dl
9f005105:	00 01                	add    BYTE PTR [ecx],al
9f005107:	00 73 01             	add    BYTE PTR [ebx+0x1],dh
9f00510a:	00 00                	add    BYTE PTR [eax],al
9f00510c:	6d                   	ins    DWORD PTR es:[edi],dx
9f00510d:	28 00                	sub    BYTE PTR [eax],al
9f00510f:	9f                   	lahf   
9f005110:	1a 00                	sbb    al,BYTE PTR [eax]
9f005112:	00 00                	add    BYTE PTR [eax],al
9f005114:	12 00                	adc    al,BYTE PTR [eax]
9f005116:	01 00                	add    DWORD PTR [eax],eax
9f005118:	68 00 00 00 0d       	push   0xd000000
9f00511d:	08 00                	or     BYTE PTR [eax],al
9f00511f:	9f                   	lahf   
9f005120:	2d 00 00 00 12       	sub    eax,0x12000000
9f005125:	00 01                	add    BYTE PTR [ecx],al
9f005127:	00 2a                	add    BYTE PTR [edx],ch
9f005129:	00 00                	add    BYTE PTR [eax],al
9f00512b:	00 ba 04 00 9f 5a    	add    BYTE PTR [edx+0x5a9f0004],bh
9f005131:	00 00                	add    BYTE PTR [eax],al
9f005133:	00 12                	add    BYTE PTR [edx],dl
9f005135:	00 01                	add    BYTE PTR [ecx],al
9f005137:	00 e5                	add    ch,ah
9f005139:	00 00                	add    BYTE PTR [eax],al
9f00513b:	00 3d 11 00 9f 4f    	add    BYTE PTR ds:0x4f9f0011,bh
9f005141:	00 00                	add    BYTE PTR [eax],al
9f005143:	00 12                	add    BYTE PTR [edx],dl
9f005145:	00 01                	add    BYTE PTR [ecx],al
9f005147:	00 01                	add    BYTE PTR [ecx],al
9f005149:	00 00                	add    BYTE PTR [eax],al
9f00514b:	00 00                	add    BYTE PTR [eax],al
9f00514d:	00 00                	add    BYTE PTR [eax],al
9f00514f:	9f                   	lahf   
9f005150:	38 00                	cmp    BYTE PTR [eax],al
9f005152:	00 00                	add    BYTE PTR [eax],al
9f005154:	12 00                	adc    al,BYTE PTR [eax]
9f005156:	01 00                	add    DWORD PTR [eax],eax
9f005158:	9a 01 00 00 b0 2b 00 	call   0x2b:0xb0000001
9f00515f:	9f                   	lahf   
9f005160:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005165:	00 01                	add    BYTE PTR [ecx],al
9f005167:	00 b1 01 00 00 67    	add    BYTE PTR [ecx+0x67000001],dh
9f00516d:	2f                   	das    
9f00516e:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f005174:	12 00                	adc    al,BYTE PTR [eax]
9f005176:	01 00                	add    DWORD PTR [eax],eax
9f005178:	6d                   	ins    DWORD PTR es:[edi],dx
9f005179:	00 00                	add    BYTE PTR [eax],al
9f00517b:	00 3a                	add    BYTE PTR [edx],bh
9f00517d:	08 00                	or     BYTE PTR [eax],al
9f00517f:	9f                   	lahf   
9f005180:	2a 00                	sub    al,BYTE PTR [eax]
9f005182:	00 00                	add    BYTE PTR [eax],al
9f005184:	12 00                	adc    al,BYTE PTR [eax]
9f005186:	01 00                	add    DWORD PTR [eax],eax
9f005188:	21 00                	and    DWORD PTR [eax],eax
9f00518a:	00 00                	add    BYTE PTR [eax],al
9f00518c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f00518f:	9f                   	lahf   
9f005190:	ba 00 00 00 12       	mov    edx,0x12000000
9f005195:	00 01                	add    BYTE PTR [ecx],al
9f005197:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
9f00519a:	00 00                	add    BYTE PTR [eax],al
9f00519c:	e2 1a                	loop   9f0051b8 <__x86.get_pc_thunk.cx+0x13b4>
9f00519e:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f0051a4:	12 00                	adc    al,BYTE PTR [eax]
9f0051a6:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f0051a8 <.dynstr>:
9f0051a8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0051ab:	72 63                	jb     9f005210 <__x86.get_pc_thunk.cx+0x140c>
9f0051ad:	68 72 00 73 74       	push   0x74730072
9f0051b2:	72 63                	jb     9f005217 <__x86.get_pc_thunk.cx+0x1413>
9f0051b4:	73 70                	jae    9f005226 <__x86.get_pc_thunk.cx+0x1422>
9f0051b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0051b7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0051ba:	72 74                	jb     9f005230 <__x86.get_pc_thunk.cx+0x142c>
9f0051bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051bd:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f0051c0:	74 6f                	je     9f005231 <__x86.get_pc_thunk.cx+0x142d>
9f0051c2:	61                   	popa   
9f0051c3:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f0051c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051c7:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f0051cd:	54                   	push   esp
9f0051ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051cf:	58                   	pop    eax
9f0051d0:	59                   	pop    ecx
9f0051d1:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f0051d4:	76 65                	jbe    9f00523b <__x86.get_pc_thunk.cx+0x1437>
9f0051d6:	43                   	inc    ebx
9f0051d7:	75 72                	jne    9f00524b <__x86.get_pc_thunk.cx+0x1447>
9f0051d9:	73 6f                	jae    9f00524a <__x86.get_pc_thunk.cx+0x1446>
9f0051db:	72 50                	jb     9f00522d <__x86.get_pc_thunk.cx+0x1429>
9f0051dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051de:	73 69                	jae    9f005249 <__x86.get_pc_thunk.cx+0x1445>
9f0051e0:	74 69                	je     9f00524b <__x86.get_pc_thunk.cx+0x1447>
9f0051e2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051e3:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0051e4:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f0051e7:	73 74                	jae    9f00525d <__x86.get_pc_thunk.cx+0x1459>
9f0051e9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051ea:	72 65                	jb     9f005251 <__x86.get_pc_thunk.cx+0x144d>
9f0051ec:	43                   	inc    ebx
9f0051ed:	75 72                	jne    9f005261 <__x86.get_pc_thunk.cx+0x145d>
9f0051ef:	73 6f                	jae    9f005260 <__x86.get_pc_thunk.cx+0x145c>
9f0051f1:	72 50                	jb     9f005243 <__x86.get_pc_thunk.cx+0x143f>
9f0051f3:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051f4:	73 69                	jae    9f00525f <__x86.get_pc_thunk.cx+0x145b>
9f0051f6:	74 69                	je     9f005261 <__x86.get_pc_thunk.cx+0x145d>
9f0051f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051f9:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0051fa:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0051fd:	74 65                	je     9f005264 <__x86.get_pc_thunk.cx+0x1460>
9f0051ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005200:	76 00                	jbe    9f005202 <__x86.get_pc_thunk.cx+0x13fe>
9f005202:	73 65                	jae    9f005269 <__x86.get_pc_thunk.cx+0x1465>
9f005204:	74 65                	je     9f00526b <__x86.get_pc_thunk.cx+0x1467>
9f005206:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005207:	76 00                	jbe    9f005209 <__x86.get_pc_thunk.cx+0x1405>
9f005209:	67                   	addr16
9f00520a:	65                   	gs
9f00520b:	74 64                	je     9f005271 <__x86.get_pc_thunk.cx+0x146d>
9f00520d:	69 72 00 6f 70 65 6e 	imul   esi,DWORD PTR [edx+0x0],0x6e65706f
9f005214:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f005217:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005218:	73 65                	jae    9f00527f <__x86.get_pc_thunk.cx+0x147b>
9f00521a:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00521d:	61                   	popa   
9f00521e:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f005222:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f005229:	6b 
9f00522a:	00 66 67             	add    BYTE PTR [esi+0x67],ah
9f00522d:	65                   	gs
9f00522e:	74 73                	je     9f0052a3 <__x86.get_pc_thunk.cx+0x149f>
9f005230:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f005233:	74 73                	je     9f0052a8 <__x86.get_pc_thunk.cx+0x14a4>
9f005235:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
9f005238:	73 45                	jae    9f00527f <__x86.get_pc_thunk.cx+0x147b>
9f00523a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00523b:	74 65                	je     9f0052a2 <__x86.get_pc_thunk.cx+0x149e>
9f00523d:	72 5f                	jb     9f00529e <__x86.get_pc_thunk.cx+0x149a>
9f00523f:	56                   	push   esi
9f005240:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f005245:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f005248:	74 63                	je     9f0052ad <__x86.get_pc_thunk.cx+0x14a9>
9f00524a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00524d:	74 63                	je     9f0052b2 <__x86.get_pc_thunk.cx+0x14ae>
9f00524f:	68 61 72 00 6c       	push   0x6c007261
9f005254:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00525b:	74 00                	je     9f00525d <__x86.get_pc_thunk.cx+0x1459>
9f00525d:	70 72                	jo     9f0052d1 <__x86.get_pc_thunk.cx+0x14cd>
9f00525f:	69 6e 74 00 70 72 69 	imul   ebp,DWORD PTR [esi+0x74],0x69727000
9f005266:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005267:	74 66                	je     9f0052cf <__x86.get_pc_thunk.cx+0x14cb>
9f005269:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
9f00526c:	65                   	gs
9f00526d:	65                   	gs
9f00526e:	70 00                	jo     9f005270 <__x86.get_pc_thunk.cx+0x146c>
9f005270:	6d                   	ins    DWORD PTR es:[edi],dx
9f005271:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005272:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f005279:	6e 
9f00527a:	61                   	popa   
9f00527b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00527c:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f00527f:	72 6b                	jb     9f0052ec <__x86.get_pc_thunk.cx+0x14e8>
9f005281:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f005284:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f005287:	65                   	gs
9f005288:	78 65                	js     9f0052ef <__x86.get_pc_thunk.cx+0x14eb>
9f00528a:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f00528d:	65                   	gs
9f00528e:	78 65                	js     9f0052f5 <__x86.get_pc_thunk.cx+0x14f1>
9f005290:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f005293:	77 61                	ja     9f0052f6 <__x86.get_pc_thunk.cx+0x14f2>
9f005295:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f00529c:	78 
9f00529d:	69 74 00 67 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x67],0x77637465
9f0052a4:	77 
9f0052a5:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f0052a9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0052aa:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f0052b1:	69 
9f0052b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0052b3:	65                   	gs
9f0052b4:	54                   	push   esp
9f0052b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0052b6:	41                   	inc    ecx
9f0052b7:	72 67                	jb     9f005320 <__x86.get_pc_thunk.cx+0x151c>
9f0052b9:	76 00                	jbe    9f0052bb <__x86.get_pc_thunk.cx+0x14b7>
9f0052bb:	74 65                	je     9f005322 <__x86.get_pc_thunk.cx+0x151e>
9f0052bd:	73 74                	jae    9f005333 <__x86.get_pc_thunk.cx+0x152f>
9f0052bf:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f0052c2:	61                   	popa   
9f0052c3:	70 00                	jo     9f0052c5 <__x86.get_pc_thunk.cx+0x14c1>
9f0052c5:	6d                   	ins    DWORD PTR es:[edi],dx
9f0052c6:	61                   	popa   
9f0052c7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0052c8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0052c9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0052ca:	63 00                	arpl   WORD PTR [eax],ax
9f0052cc:	72 65                	jb     9f005333 <__x86.get_pc_thunk.cx+0x152f>
9f0052ce:	61                   	popa   
9f0052cf:	6c                   	ins    BYTE PTR es:[edi],dx
9f0052d0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0052d1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0052d2:	63 00                	arpl   WORD PTR [eax],ax
9f0052d4:	66                   	data16
9f0052d5:	72 65                	jb     9f00533c <__x86.get_pc_thunk.cx+0x1538>
9f0052d7:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f0052db:	6d                   	ins    DWORD PTR es:[edi],dx
9f0052dc:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f0052df:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f0052e2:	6d                   	ins    DWORD PTR es:[edi],dx
9f0052e3:	73 65                	jae    9f00534a <__x86.get_pc_thunk.cx+0x1546>
9f0052e5:	74 00                	je     9f0052e7 <__x86.get_pc_thunk.cx+0x14e3>
9f0052e7:	70 69                	jo     9f005352 <__x86.get_pc_thunk.cx+0x154e>
9f0052e9:	70 65                	jo     9f005350 <__x86.get_pc_thunk.cx+0x154c>
9f0052eb:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f0052ee:	73 65                	jae    9f005355 <__x86.get_pc_thunk.cx+0x1551>
9f0052f0:	74 52                	je     9f005344 <__x86.get_pc_thunk.cx+0x1540>
9f0052f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0052f3:	77 00                	ja     9f0052f5 <__x86.get_pc_thunk.cx+0x14f1>
9f0052f5:	73 74                	jae    9f00536b <__x86.get_pc_thunk.cx+0x1567>
9f0052f7:	72 63                	jb     9f00535c <__x86.get_pc_thunk.cx+0x1558>
9f0052f9:	61                   	popa   
9f0052fa:	74 00                	je     9f0052fc <__x86.get_pc_thunk.cx+0x14f8>
9f0052fc:	73 74                	jae    9f005372 <__x86.get_pc_thunk.cx+0x156e>
9f0052fe:	72 63                	jb     9f005363 <__x86.get_pc_thunk.cx+0x155f>
9f005300:	6d                   	ins    DWORD PTR es:[edi],dx
9f005301:	70 00                	jo     9f005303 <__x86.get_pc_thunk.cx+0x14ff>
9f005303:	73 74                	jae    9f005379 <__x86.get_pc_thunk.cx+0x1575>
9f005305:	72 63                	jb     9f00536a <__x86.get_pc_thunk.cx+0x1566>
9f005307:	70 79                	jo     9f005382 <__x86.get_pc_thunk.cx+0x157e>
9f005309:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00530c:	72 63                	jb     9f005371 <__x86.get_pc_thunk.cx+0x156d>
9f00530e:	70 79                	jo     9f005389 <__x86.get_pc_thunk.cx+0x1585>
9f005310:	63 00                	arpl   WORD PTR [eax],ax
9f005312:	73 74                	jae    9f005388 <__x86.get_pc_thunk.cx+0x1584>
9f005314:	72 69                	jb     9f00537f <__x86.get_pc_thunk.cx+0x157b>
9f005316:	73 6e                	jae    9f005386 <__x86.get_pc_thunk.cx+0x1582>
9f005318:	75 6d                	jne    9f005387 <__x86.get_pc_thunk.cx+0x1583>
9f00531a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00531d:	72 6c                	jb     9f00538b <__x86.get_pc_thunk.cx+0x1587>
9f00531f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f005321:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005324:	72 6e                	jb     9f005394 <__x86.get_pc_thunk.cx+0x1590>
9f005326:	6c                   	ins    BYTE PTR es:[edi],dx
9f005327:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f005329:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00532c:	72 6e                	jb     9f00539c <__x86.get_pc_thunk.cx+0x1598>
9f00532e:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f005331:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005334:	72 6e                	jb     9f0053a4 <__x86.get_pc_thunk.cx+0x15a0>
9f005336:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f005339:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00533c:	72 74                	jb     9f0053b2 <__x86.get_pc_thunk.cx+0x15ae>
9f00533e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00533f:	75 6c                	jne    9f0053ad <__x86.get_pc_thunk.cx+0x15a9>
9f005341:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005344:	72 6c                	jb     9f0053b2 <__x86.get_pc_thunk.cx+0x15ae>
9f005346:	65                   	gs
9f005347:	66                   	data16
9f005348:	74 00                	je     9f00534a <__x86.get_pc_thunk.cx+0x1546>
9f00534a:	73 74                	jae    9f0053c0 <__x86.get_pc_thunk.cx+0x15bc>
9f00534c:	72 74                	jb     9f0053c2 <__x86.get_pc_thunk.cx+0x15be>
9f00534e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00534f:	6c                   	ins    BYTE PTR es:[edi],dx
9f005350:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005353:	72 74                	jb     9f0053c9 <__x86.get_pc_thunk.cx+0x15c5>
9f005355:	72 69                	jb     9f0053c0 <__x86.get_pc_thunk.cx+0x15bc>
9f005357:	6d                   	ins    DWORD PTR es:[edi],dx
9f005358:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00535b:	72 72                	jb     9f0053cf <__x86.get_pc_thunk.cx+0x15cb>
9f00535d:	65                   	gs
9f00535e:	70 6c                	jo     9f0053cc <__x86.get_pc_thunk.cx+0x15c8>
9f005360:	61                   	popa   
9f005361:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f005364:	73 74                	jae    9f0053da <__x86.get_pc_thunk.cx+0x15d6>
9f005366:	72 73                	jb     9f0053db <__x86.get_pc_thunk.cx+0x15d7>
9f005368:	74 72                	je     9f0053dc <__x86.get_pc_thunk.cx+0x15d8>
9f00536a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00536d:	74 74                	je     9f0053e3 <__x86.get_pc_thunk.cx+0x15df>
9f00536f:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f005376:	74 69                	je     9f0053e1 <__x86.get_pc_thunk.cx+0x15dd>
9f005378:	6d                   	ins    DWORD PTR es:[edi],dx
9f005379:	65                   	gs
9f00537a:	5f                   	pop    edi
9f00537b:	72 00                	jb     9f00537d <__x86.get_pc_thunk.cx+0x1579>
9f00537d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00537e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00537f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f005382:	74 69                	je     9f0053ed <__x86.get_pc_thunk.cx+0x15e9>
9f005384:	6d                   	ins    DWORD PTR es:[edi],dx
9f005385:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f00538a:	61                   	popa   
9f00538b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00538c:	74 69                	je     9f0053f7 <__x86.get_pc_thunk.cx+0x15f3>
9f00538e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00538f:	65                   	gs
9f005390:	5f                   	pop    edi
9f005391:	72 00                	jb     9f005393 <__x86.get_pc_thunk.cx+0x158f>
9f005393:	6d                   	ins    DWORD PTR es:[edi],dx
9f005394:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f005399:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00539c:	74 74                	je     9f005412 <__x86.get_pc_thunk.cx+0x160e>
9f00539e:	69                   	.byte 0x69
9f00539f:	6d                   	ins    DWORD PTR es:[edi],dx
9f0053a0:	65                   	gs
	...

Disassembly of section .hash:

9f0053a4 <.hash>:
9f0053a4:	43                   	inc    ebx
9f0053a5:	00 00                	add    BYTE PTR [eax],al
9f0053a7:	00 44 00 00          	add    BYTE PTR [eax+eax*1+0x0],al
	...
9f0053b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0053ba:	00 00                	add    BYTE PTR [eax],al
9f0053bc:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0053bf:	00 36                	add    BYTE PTR [esi],dh
9f0053c1:	00 00                	add    BYTE PTR [eax],al
9f0053c3:	00 35 00 00 00 04    	add    BYTE PTR ds:0x4000000,dh
9f0053c9:	00 00                	add    BYTE PTR [eax],al
9f0053cb:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f0053ce:	00 00                	add    BYTE PTR [eax],al
9f0053d0:	00 00                	add    BYTE PTR [eax],al
9f0053d2:	00 00                	add    BYTE PTR [eax],al
9f0053d4:	11 00                	adc    DWORD PTR [eax],eax
9f0053d6:	00 00                	add    BYTE PTR [eax],al
9f0053d8:	23 00                	and    eax,DWORD PTR [eax]
9f0053da:	00 00                	add    BYTE PTR [eax],al
9f0053dc:	00 00                	add    BYTE PTR [eax],al
9f0053de:	00 00                	add    BYTE PTR [eax],al
9f0053e0:	3d 00 00 00 19       	cmp    eax,0x19000000
9f0053e5:	00 00                	add    BYTE PTR [eax],al
9f0053e7:	00 31                	add    BYTE PTR [ecx],dh
	...
9f0053f1:	00 00                	add    BYTE PTR [eax],al
9f0053f3:	00 30                	add    BYTE PTR [eax],dh
9f0053f5:	00 00                	add    BYTE PTR [eax],al
9f0053f7:	00 12                	add    BYTE PTR [edx],dl
9f0053f9:	00 00                	add    BYTE PTR [eax],al
9f0053fb:	00 00                	add    BYTE PTR [eax],al
9f0053fd:	00 00                	add    BYTE PTR [eax],al
9f0053ff:	00 2e                	add    BYTE PTR [esi],ch
9f005401:	00 00                	add    BYTE PTR [eax],al
9f005403:	00 39                	add    BYTE PTR [ecx],bh
9f005405:	00 00                	add    BYTE PTR [eax],al
9f005407:	00 00                	add    BYTE PTR [eax],al
9f005409:	00 00                	add    BYTE PTR [eax],al
9f00540b:	00 2a                	add    BYTE PTR [edx],ch
9f00540d:	00 00                	add    BYTE PTR [eax],al
9f00540f:	00 41 00             	add    BYTE PTR [ecx+0x0],al
9f005412:	00 00                	add    BYTE PTR [eax],al
9f005414:	0a 00                	or     al,BYTE PTR [eax]
9f005416:	00 00                	add    BYTE PTR [eax],al
9f005418:	00 00                	add    BYTE PTR [eax],al
9f00541a:	00 00                	add    BYTE PTR [eax],al
9f00541c:	1b 00                	sbb    eax,DWORD PTR [eax]
9f00541e:	00 00                	add    BYTE PTR [eax],al
9f005420:	00 00                	add    BYTE PTR [eax],al
9f005422:	00 00                	add    BYTE PTR [eax],al
9f005424:	3f                   	aas    
9f005425:	00 00                	add    BYTE PTR [eax],al
9f005427:	00 00                	add    BYTE PTR [eax],al
9f005429:	00 00                	add    BYTE PTR [eax],al
9f00542b:	00 1a                	add    BYTE PTR [edx],bl
9f00542d:	00 00                	add    BYTE PTR [eax],al
9f00542f:	00 1f                	add    BYTE PTR [edi],bl
9f005431:	00 00                	add    BYTE PTR [eax],al
9f005433:	00 16                	add    BYTE PTR [esi],dl
9f005435:	00 00                	add    BYTE PTR [eax],al
9f005437:	00 29                	add    BYTE PTR [ecx],ch
9f005439:	00 00                	add    BYTE PTR [eax],al
9f00543b:	00 00                	add    BYTE PTR [eax],al
9f00543d:	00 00                	add    BYTE PTR [eax],al
9f00543f:	00 33                	add    BYTE PTR [ebx],dh
9f005441:	00 00                	add    BYTE PTR [eax],al
9f005443:	00 08                	add    BYTE PTR [eax],cl
9f005445:	00 00                	add    BYTE PTR [eax],al
9f005447:	00 27                	add    BYTE PTR [edi],ah
9f005449:	00 00                	add    BYTE PTR [eax],al
9f00544b:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
9f00544e:	00 00                	add    BYTE PTR [eax],al
9f005450:	3b 00                	cmp    eax,DWORD PTR [eax]
9f005452:	00 00                	add    BYTE PTR [eax],al
9f005454:	42                   	inc    edx
9f005455:	00 00                	add    BYTE PTR [eax],al
9f005457:	00 28                	add    BYTE PTR [eax],ch
9f005459:	00 00                	add    BYTE PTR [eax],al
9f00545b:	00 3c 00             	add    BYTE PTR [eax+eax*1],bh
9f00545e:	00 00                	add    BYTE PTR [eax],al
9f005460:	3a 00                	cmp    al,BYTE PTR [eax]
9f005462:	00 00                	add    BYTE PTR [eax],al
9f005464:	1e                   	push   ds
	...
9f005475:	00 00                	add    BYTE PTR [eax],al
9f005477:	00 37                	add    BYTE PTR [edi],dh
	...
9f005481:	00 00                	add    BYTE PTR [eax],al
9f005483:	00 32                	add    BYTE PTR [edx],dh
9f005485:	00 00                	add    BYTE PTR [eax],al
9f005487:	00 00                	add    BYTE PTR [eax],al
9f005489:	00 00                	add    BYTE PTR [eax],al
9f00548b:	00 0b                	add    BYTE PTR [ebx],cl
9f00548d:	00 00                	add    BYTE PTR [eax],al
9f00548f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005492:	00 00                	add    BYTE PTR [eax],al
9f005494:	00 00                	add    BYTE PTR [eax],al
9f005496:	00 00                	add    BYTE PTR [eax],al
9f005498:	38 00                	cmp    BYTE PTR [eax],al
9f00549a:	00 00                	add    BYTE PTR [eax],al
9f00549c:	00 00                	add    BYTE PTR [eax],al
9f00549e:	00 00                	add    BYTE PTR [eax],al
9f0054a0:	43                   	inc    ebx
9f0054a1:	00 00                	add    BYTE PTR [eax],al
9f0054a3:	00 0e                	add    BYTE PTR [esi],cl
9f0054a5:	00 00                	add    BYTE PTR [eax],al
9f0054a7:	00 2d 00 00 00 13    	add    BYTE PTR ds:0x13000000,ch
	...
9f0054f5:	00 00                	add    BYTE PTR [eax],al
9f0054f7:	00 01                	add    BYTE PTR [ecx],al
	...
9f00550d:	00 00                	add    BYTE PTR [eax],al
9f00550f:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
9f005515:	00 00                	add    BYTE PTR [eax],al
9f005517:	00 00                	add    BYTE PTR [eax],al
9f005519:	00 00                	add    BYTE PTR [eax],al
9f00551b:	00 06                	add    BYTE PTR [esi],al
	...
9f005525:	00 00                	add    BYTE PTR [eax],al
9f005527:	00 05 00 00 00 0c    	add    BYTE PTR ds:0xc000000,al
9f00552d:	00 00                	add    BYTE PTR [eax],al
9f00552f:	00 00                	add    BYTE PTR [eax],al
9f005531:	00 00                	add    BYTE PTR [eax],al
9f005533:	00 17                	add    BYTE PTR [edi],dl
9f005535:	00 00                	add    BYTE PTR [eax],al
9f005537:	00 07                	add    BYTE PTR [edi],al
	...
9f005541:	00 00                	add    BYTE PTR [eax],al
9f005543:	00 09                	add    BYTE PTR [ecx],cl
9f005545:	00 00                	add    BYTE PTR [eax],al
9f005547:	00 20                	add    BYTE PTR [eax],ah
9f005549:	00 00                	add    BYTE PTR [eax],al
9f00554b:	00 03                	add    BYTE PTR [ebx],al
9f00554d:	00 00                	add    BYTE PTR [eax],al
9f00554f:	00 00                	add    BYTE PTR [eax],al
9f005551:	00 00                	add    BYTE PTR [eax],al
9f005553:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005556:	00 00                	add    BYTE PTR [eax],al
9f005558:	00 00                	add    BYTE PTR [eax],al
9f00555a:	00 00                	add    BYTE PTR [eax],al
9f00555c:	26 00 00             	add    BYTE PTR es:[eax],al
	...
9f005573:	00 10                	add    BYTE PTR [eax],dl
9f005575:	00 00                	add    BYTE PTR [eax],al
9f005577:	00 2b                	add    BYTE PTR [ebx],ch
9f005579:	00 00                	add    BYTE PTR [eax],al
9f00557b:	00 25 00 00 00 00    	add    BYTE PTR ds:0x0,ah
9f005581:	00 00                	add    BYTE PTR [eax],al
9f005583:	00 00                	add    BYTE PTR [eax],al
9f005585:	00 00                	add    BYTE PTR [eax],al
9f005587:	00 15 00 00 00 18    	add    BYTE PTR ds:0x18000000,dl
9f00558d:	00 00                	add    BYTE PTR [eax],al
9f00558f:	00 2f                	add    BYTE PTR [edi],ch
9f005591:	00 00                	add    BYTE PTR [eax],al
9f005593:	00 00                	add    BYTE PTR [eax],al
9f005595:	00 00                	add    BYTE PTR [eax],al
9f005597:	00 22                	add    BYTE PTR [edx],ah
9f005599:	00 00                	add    BYTE PTR [eax],al
9f00559b:	00 00                	add    BYTE PTR [eax],al
9f00559d:	00 00                	add    BYTE PTR [eax],al
9f00559f:	00 1d 00 00 00 00    	add    BYTE PTR ds:0x0,bl
9f0055a5:	00 00                	add    BYTE PTR [eax],al
9f0055a7:	00 00                	add    BYTE PTR [eax],al
9f0055a9:	00 00                	add    BYTE PTR [eax],al
9f0055ab:	00 02                	add    BYTE PTR [edx],al
9f0055ad:	00 00                	add    BYTE PTR [eax],al
9f0055af:	00 21                	add    BYTE PTR [ecx],ah
	...
9f0055b9:	00 00                	add    BYTE PTR [eax],al
9f0055bb:	00 0f                	add    BYTE PTR [edi],cl
9f0055bd:	00 00                	add    BYTE PTR [eax],al
9f0055bf:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f0055c2:	00 00                	add    BYTE PTR [eax],al
9f0055c4:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f0055c8 <.eh_frame>:
9f0055c8:	14 00                	adc    al,0x0
9f0055ca:	00 00                	add    BYTE PTR [eax],al
9f0055cc:	00 00                	add    BYTE PTR [eax],al
9f0055ce:	00 00                	add    BYTE PTR [eax],al
9f0055d0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0055d3:	00 01                	add    BYTE PTR [ecx],al
9f0055d5:	7c 08                	jl     9f0055df <__x86.get_pc_thunk.cx+0x17db>
9f0055d7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0055d9:	0c 04                	or     al,0x4
9f0055db:	04 88                	add    al,0x88
9f0055dd:	01 00                	add    DWORD PTR [eax],eax
9f0055df:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0055e2:	00 00                	add    BYTE PTR [eax],al
9f0055e4:	1c 00                	sbb    al,0x0
9f0055e6:	00 00                	add    BYTE PTR [eax],al
9f0055e8:	f8                   	clc    
9f0055e9:	e7 ff                	out    0xff,eax
9f0055eb:	ff 20                	jmp    DWORD PTR [eax]
9f0055ed:	00 00                	add    BYTE PTR [eax],al
9f0055ef:	00 00                	add    BYTE PTR [eax],al
9f0055f1:	0e                   	push   cs
9f0055f2:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f0055f5:	0c 4a                	or     al,0x4a
9f0055f7:	0f 0b                	ud2    
9f0055f9:	74 04                	je     9f0055ff <__x86.get_pc_thunk.cx+0x17fb>
9f0055fb:	78 00                	js     9f0055fd <__x86.get_pc_thunk.cx+0x17f9>
9f0055fd:	3f                   	aas    
9f0055fe:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f005600:	2a 32                	sub    dh,BYTE PTR [edx]
9f005602:	24 22                	and    al,0x22
9f005604:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f005608 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f005608:	01 1b                	add    DWORD PTR [ebx],ebx
9f00560a:	03 3b                	add    edi,DWORD PTR [ebx]
9f00560c:	fc                   	cld    
9f00560d:	e7 ff                	out    0xff,eax
9f00560f:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f005612:	00 00                	add    BYTE PTR [eax],al
9f005614:	f8                   	clc    
9f005615:	a9 ff ff 18 e8       	test   eax,0xe818ffff
9f00561a:	ff                   	(bad)  
9f00561b:	ff 30                	push   DWORD PTR [eax]
9f00561d:	aa                   	stos   BYTE PTR es:[edi],al
9f00561e:	ff                   	(bad)  
9f00561f:	ff                   	(bad)  
9f005620:	38 e8                	cmp    al,ch
9f005622:	ff                   	(bad)  
9f005623:	ff 68 aa             	jmp    FWORD PTR [eax-0x56]
9f005626:	ff                   	(bad)  
9f005627:	ff 6c e8 ff          	jmp    FWORD PTR [eax+ebp*8-0x1]
9f00562b:	ff                   	(bad)  
9f00562c:	bd aa ff ff 94       	mov    ebp,0x94ffffaa
9f005631:	e8 ff ff 14 ab       	call   4a155635 <sysEnter_Vector+0x4a025635>
9f005636:	ff                   	(bad)  
9f005637:	ff                   	(bad)  
9f005638:	bc e8 ff ff ac       	mov    esp,0xacffffe8
9f00563d:	ab                   	stos   DWORD PTR es:[edi],eax
9f00563e:	ff                   	(bad)  
9f00563f:	ff                   	(bad)  
9f005640:	f8                   	clc    
9f005641:	e8 ff ff 23 ac       	call   4b245645 <sysEnter_Vector+0x4b115645>
9f005646:	ff                   	(bad)  
9f005647:	ff 1c e9             	call   FWORD PTR [ecx+ebp*8]
9f00564a:	ff                   	(bad)  
9f00564b:	ff de                	call   <internal disassembler error>
9f00564d:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00564e:	ff                   	(bad)  
9f00564f:	ff 40 e9             	inc    DWORD PTR [eax-0x17]
9f005652:	ff                   	(bad)  
9f005653:	ff 99 ad ff ff 64    	call   FWORD PTR [ecx+0x64ffffad]
9f005659:	e9 ff ff f8 ad       	jmp    4cf9565d <sysEnter_Vector+0x4ce6565d>
9f00565e:	ff                   	(bad)  
9f00565f:	ff 84 e9 ff ff b2 ae 	inc    DWORD PTR [ecx+ebp*8-0x514d0001]
9f005666:	ff                   	(bad)  
9f005667:	ff a8 e9 ff ff 0c    	jmp    FWORD PTR [eax+0xcffffe9]
9f00566d:	af                   	scas   eax,DWORD PTR es:[edi]
9f00566e:	ff                   	(bad)  
9f00566f:	ff cc                	dec    esp
9f005671:	e9 ff ff 68 af       	jmp    4e695675 <sysEnter_Vector+0x4e565675>
9f005676:	ff                   	(bad)  
9f005677:	ff f0                	push   eax
9f005679:	e9 ff ff 12 b0       	jmp    4f13567d <sysEnter_Vector+0x4f00567d>
9f00567e:	ff                   	(bad)  
9f00567f:	ff 14 ea             	call   DWORD PTR [edx+ebp*8]
9f005682:	ff                   	(bad)  
9f005683:	ff d4                	call   esp
9f005685:	b1 ff                	mov    cl,0xff
9f005687:	ff                   	(bad)  
9f005688:	38 ea                	cmp    dl,ch
9f00568a:	ff                   	(bad)  
9f00568b:	ff 05 b2 ff ff 5c    	inc    DWORD PTR ds:0x5cffffb2
9f005691:	ea ff ff 32 b2 ff ff 	jmp    0xffff:0xb232ffff
9f005698:	80 ea ff             	sub    dl,0xff
9f00569b:	ff 5c b2 ff          	call   FWORD PTR [edx+esi*4-0x1]
9f00569f:	ff a4 ea ff ff 91 b2 	jmp    DWORD PTR [edx+ebp*8-0x4d6e0001]
9f0056a6:	ff                   	(bad)  
9f0056a7:	ff cc                	dec    esp
9f0056a9:	ea ff ff c6 b2 ff ff 	jmp    0xffff:0xb2c6ffff
9f0056b0:	f4                   	hlt    
9f0056b1:	ea ff ff ec b2 ff ff 	jmp    0xffff:0xb2ecffff
9f0056b8:	14 eb                	adc    al,0xeb
9f0056ba:	ff                   	(bad)  
9f0056bb:	ff 1a                	call   FWORD PTR [edx]
9f0056bd:	b3 ff                	mov    bl,0xff
9f0056bf:	ff                   	(bad)  
9f0056c0:	38 eb                	cmp    bl,ch
9f0056c2:	ff                   	(bad)  
9f0056c3:	ff 2c b3             	jmp    FWORD PTR [ebx+esi*4]
9f0056c6:	ff                   	(bad)  
9f0056c7:	ff 58 eb             	call   FWORD PTR [eax-0x15]
9f0056ca:	ff                   	(bad)  
9f0056cb:	ff 52 b3             	call   DWORD PTR [edx-0x4d]
9f0056ce:	ff                   	(bad)  
9f0056cf:	ff                   	(bad)  
9f0056d0:	7c eb                	jl     9f0056bd <__GNU_EH_FRAME_HDR+0xb5>
9f0056d2:	ff                   	(bad)  
9f0056d3:	ff 95 b3 ff ff a0    	call   DWORD PTR [ebp-0x5f00004d]
9f0056d9:	eb ff                	jmp    9f0056da <__GNU_EH_FRAME_HDR+0xd2>
9f0056db:	ff d8                	call   <internal disassembler error>
9f0056dd:	b3 ff                	mov    bl,0xff
9f0056df:	ff c4                	inc    esp
9f0056e1:	eb ff                	jmp    9f0056e2 <__GNU_EH_FRAME_HDR+0xda>
9f0056e3:	ff 94 b4 ff ff e8 eb 	call   DWORD PTR [esp+esi*4-0x14170001]
9f0056ea:	ff                   	(bad)  
9f0056eb:	ff ce                	dec    esi
9f0056ed:	b4 ff                	mov    ah,0xff
9f0056ef:	ff 10                	call   DWORD PTR [eax]
9f0056f1:	ec                   	in     al,dx
9f0056f2:	ff                   	(bad)  
9f0056f3:	ff 0a                	dec    DWORD PTR [edx]
9f0056f5:	b5 ff                	mov    ch,0xff
9f0056f7:	ff                   	(bad)  
9f0056f8:	38 ec                	cmp    ah,ch
9f0056fa:	ff                   	(bad)  
9f0056fb:	ff 48 b5             	dec    DWORD PTR [eax-0x4b]
9f0056fe:	ff                   	(bad)  
9f0056ff:	ff 60 ec             	jmp    DWORD PTR [eax-0x14]
9f005702:	ff                   	(bad)  
9f005703:	ff 88 b5 ff ff 88    	dec    DWORD PTR [eax-0x7700004b]
9f005709:	ec                   	in     al,dx
9f00570a:	ff                   	(bad)  
9f00570b:	ff ca                	dec    edx
9f00570d:	b5 ff                	mov    ch,0xff
9f00570f:	ff b0 ec ff ff 89    	push   DWORD PTR [eax-0x76000014]
9f005715:	b6 ff                	mov    dh,0xff
9f005717:	ff d4                	call   esp
9f005719:	ec                   	in     al,dx
9f00571a:	ff                   	(bad)  
9f00571b:	ff a8 b6 ff ff f8    	jmp    FWORD PTR [eax-0x700004a]
9f005721:	ec                   	in     al,dx
9f005722:	ff                   	(bad)  
9f005723:	ff 01                	inc    DWORD PTR [ecx]
9f005725:	b7 ff                	mov    bh,0xff
9f005727:	ff 1c ed ff ff 55 b7 	call   FWORD PTR [ebp*8-0x48aa0001]
9f00572e:	ff                   	(bad)  
9f00572f:	ff 40 ed             	inc    DWORD PTR [eax-0x13]
9f005732:	ff                   	(bad)  
9f005733:	ff a9 b7 ff ff 64    	jmp    FWORD PTR [ecx+0x64ffffb7]
9f005739:	ed                   	in     eax,dx
9f00573a:	ff                   	(bad)  
9f00573b:	ff dd                	call   <internal disassembler error>
9f00573d:	b7 ff                	mov    bh,0xff
9f00573f:	ff 84 ed ff ff 14 b8 	inc    DWORD PTR [ebp+ebp*8-0x47eb0001]
9f005746:	ff                   	(bad)  
9f005747:	ff a4 ed ff ff 86 b8 	jmp    DWORD PTR [ebp+ebp*8-0x47790001]
9f00574e:	ff                   	(bad)  
9f00574f:	ff cc                	dec    esp
9f005751:	ed                   	in     eax,dx
9f005752:	ff                   	(bad)  
9f005753:	ff a3 b8 ff ff ec    	jmp    DWORD PTR [ebx-0x13000048]
9f005759:	ed                   	in     eax,dx
9f00575a:	ff                   	(bad)  
9f00575b:	ff cc                	dec    esp
9f00575d:	b8 ff ff 0c ee       	mov    eax,0xee0cffff
9f005762:	ff                   	(bad)  
9f005763:	ff f5                	push   ebp
9f005765:	b8 ff ff 2c ee       	mov    eax,0xee2cffff
9f00576a:	ff                   	(bad)  
9f00576b:	ff 41 b9             	inc    DWORD PTR [ecx-0x47]
9f00576e:	ff                   	(bad)  
9f00576f:	ff 4c ee ff          	dec    DWORD PTR [esi+ebp*8-0x1]
9f005773:	ff 35 bb ff ff 70    	push   DWORD PTR ds:0x70ffffbb
9f005779:	ee                   	out    dx,al
9f00577a:	ff                   	(bad)  
9f00577b:	ff 84 bb ff ff 90 ee 	inc    DWORD PTR [ebx+edi*4-0x116f0001]
9f005782:	ff                   	(bad)  
9f005783:	ff a0 bb ff ff b0    	jmp    DWORD PTR [eax-0x4f000045]
9f005789:	ee                   	out    dx,al
9f00578a:	ff                   	(bad)  
9f00578b:	ff c0                	inc    eax
9f00578d:	bb ff ff d0 ee       	mov    ebx,0xeed0ffff
9f005792:	ff                   	(bad)  
9f005793:	ff e0                	jmp    eax
9f005795:	bb ff ff f0 ee       	mov    ebx,0xeef0ffff
9f00579a:	ff                   	(bad)  
9f00579b:	ff 24 bd ff ff 10 ef 	jmp    DWORD PTR [edi*4-0x10ef0001]
9f0057a2:	ff                   	(bad)  
9f0057a3:	ff 44 bd ff          	inc    DWORD PTR [ebp+edi*4-0x1]
9f0057a7:	ff 30                	push   DWORD PTR [eax]
9f0057a9:	ef                   	out    dx,eax
9f0057aa:	ff                   	(bad)  
9f0057ab:	ff 41 c0             	inc    DWORD PTR [ecx-0x40]
9f0057ae:	ff                   	(bad)  
9f0057af:	ff 5c ef ff          	call   FWORD PTR [edi+ebp*8-0x1]
9f0057b3:	ff 64 c0 ff          	jmp    DWORD PTR [eax+eax*8-0x1]
9f0057b7:	ff                   	(bad)  
9f0057b8:	7c ef                	jl     9f0057a9 <__GNU_EH_FRAME_HDR+0x1a1>
9f0057ba:	ff                   	(bad)  
9f0057bb:	ff 80 c0 ff ff 9c    	inc    DWORD PTR [eax-0x63000040]
9f0057c1:	ef                   	out    dx,eax
9f0057c2:	ff                   	(bad)  
9f0057c3:	ff f4                	push   esp
9f0057c5:	c0 ff ff             	sar    bh,0xff
9f0057c8:	c0 ef ff             	shr    bh,0xff
9f0057cb:	ff 60 c1             	jmp    DWORD PTR [eax-0x3f]
9f0057ce:	ff                   	(bad)  
9f0057cf:	ff e4                	jmp    esp
9f0057d1:	ef                   	out    dx,eax
9f0057d2:	ff                   	(bad)  
9f0057d3:	ff e7                	jmp    edi
9f0057d5:	c1 ff ff             	sar    edi,0xff
9f0057d8:	04 f0                	add    al,0xf0
9f0057da:	ff                   	(bad)  
9f0057db:	ff                   	(bad)  
9f0057dc:	3e                   	ds
9f0057dd:	c2 ff ff             	ret    0xffff
9f0057e0:	24 f0                	and    al,0xf0
9f0057e2:	ff                   	(bad)  
9f0057e3:	ff 12                	call   DWORD PTR [edx]
9f0057e5:	c4                   	(bad)  
9f0057e6:	ff                   	(bad)  
9f0057e7:	ff 48 f0             	dec    DWORD PTR [eax-0x10]
9f0057ea:	ff                   	(bad)  
9f0057eb:	ff 32                	push   DWORD PTR [edx]
9f0057ed:	c4                   	(bad)  
9f0057ee:	ff                   	(bad)  
9f0057ef:	ff 68 f0             	jmp    FWORD PTR [eax-0x10]
9f0057f2:	ff                   	(bad)  
9f0057f3:	ff b7 c4 ff ff 8c    	push   DWORD PTR [edi-0x7300003c]
9f0057f9:	f0 ff                	lock (bad) 
9f0057fb:	ff da                	call   <internal disassembler error>
9f0057fd:	c4                   	(bad)  
9f0057fe:	ff                   	(bad)  
9f0057ff:	ff ac f0 ff ff f5 c4 	jmp    FWORD PTR [eax+esi*8-0x3b0a0001]
9f005806:	ff                   	(bad)  
9f005807:	ff cc                	dec    esp
9f005809:	f0 ff                	lock (bad) 
9f00580b:	ff 28                	jmp    FWORD PTR [eax]
9f00580d:	c5 ff ff             	(bad)  
9f005810:	f0 f0 ff             	lock lock (bad) 
9f005813:	ff c3                	inc    ebx
9f005815:	c6                   	(bad)  
9f005816:	ff                   	(bad)  
9f005817:	ff 10                	call   DWORD PTR [eax]
9f005819:	f1                   	icebp  
9f00581a:	ff                   	(bad)  
9f00581b:	ff e4                	jmp    esp
9f00581d:	c6                   	(bad)  
9f00581e:	ff                   	(bad)  
9f00581f:	ff 30                	push   DWORD PTR [eax]
9f005821:	f1                   	icebp  
9f005822:	ff                   	(bad)  
9f005823:	ff ab c7 ff ff 50    	jmp    FWORD PTR [ebx+0x50ffffc7]
9f005829:	f1                   	icebp  
9f00582a:	ff                   	(bad)  
9f00582b:	ff cc                	dec    esp
9f00582d:	c7                   	(bad)  
9f00582e:	ff                   	(bad)  
9f00582f:	ff 70 f1             	push   DWORD PTR [eax-0xf]
9f005832:	ff                   	(bad)  
9f005833:	ff                   	(bad)  
9f005834:	f8                   	clc    
9f005835:	c7                   	(bad)  
9f005836:	ff                   	(bad)  
9f005837:	ff 94 f1 ff ff 57 c8 	call   DWORD PTR [ecx+esi*8-0x37a80001]
9f00583e:	ff                   	(bad)  
9f00583f:	ff                   	(bad)  
9f005840:	b8 f1 ff ff 95       	mov    eax,0x95fffff1
9f005845:	ca ff ff             	retf   0xffff
9f005848:	e4 f1                	in     al,0xf1
9f00584a:	ff                   	(bad)  
9f00584b:	ff dd                	call   <internal disassembler error>
9f00584d:	ce                   	into   
9f00584e:	ff                   	(bad)  
9f00584f:	ff 08                	dec    DWORD PTR [eax]
9f005851:	f2 ff                	repnz (bad) 
9f005853:	ff 10                	call   DWORD PTR [eax]
9f005855:	cf                   	iret   
9f005856:	ff                   	(bad)  
9f005857:	ff 28                	jmp    FWORD PTR [eax]
9f005859:	f2 ff                	repnz (bad) 
9f00585b:	ff 94 cf ff ff 4c f2 	call   DWORD PTR [edi+ecx*8-0xdb30001]
9f005862:	ff                   	(bad)  
9f005863:	ff d2                	call   edx
9f005865:	cf                   	iret   
9f005866:	ff                   	(bad)  
9f005867:	ff 70 f2             	push   DWORD PTR [eax-0xe]
9f00586a:	ff                   	(bad)  
9f00586b:	ff 10                	call   DWORD PTR [eax]
9f00586d:	d0 ff                	sar    bh,1
9f00586f:	ff 94 f2 ff ff 80 d0 	call   DWORD PTR [edx+esi*8-0x2f7f0001]
9f005876:	ff                   	(bad)  
9f005877:	ff b4 f2 ff ff e0 d0 	push   DWORD PTR [edx+esi*8-0x2f1f0001]
9f00587e:	ff                   	(bad)  
9f00587f:	ff dc                	call   <internal disassembler error>
9f005881:	f2 ff                	repnz (bad) 
9f005883:	ff 20                	jmp    DWORD PTR [eax]
9f005885:	d1 ff                	sar    edi,1
9f005887:	ff                   	(bad)  
9f005888:	fc                   	cld    
9f005889:	f2 ff                	repnz (bad) 
9f00588b:	ff 60 d1             	jmp    DWORD PTR [eax-0x2f]
9f00588e:	ff                   	(bad)  
9f00588f:	ff 1c f3             	call   FWORD PTR [ebx+esi*8]
9f005892:	ff                   	(bad)  
9f005893:	ff a8 d1 ff ff 3c    	jmp    FWORD PTR [eax+0x3cffffd1]
9f005899:	f3 ff                	repz (bad) 
9f00589b:	ff d8                	call   <internal disassembler error>
9f00589d:	d1 ff                	sar    edi,1
9f00589f:	ff 5c f3 ff          	call   FWORD PTR [ebx+esi*8-0x1]
9f0058a3:	ff 34 d2             	push   DWORD PTR [edx+edx*8]
9f0058a6:	ff                   	(bad)  
9f0058a7:	ff                   	(bad)  
9f0058a8:	7c f3                	jl     9f00589d <__GNU_EH_FRAME_HDR+0x295>
9f0058aa:	ff                   	(bad)  
9f0058ab:	ff 65 d2             	jmp    DWORD PTR [ebp-0x2e]
9f0058ae:	ff                   	(bad)  
9f0058af:	ff 9c f3 ff ff 7f d2 	call   FWORD PTR [ebx+esi*8-0x2d800001]
9f0058b6:	ff                   	(bad)  
9f0058b7:	ff                   	(bad)  
9f0058b8:	bc f3 ff ff b8       	mov    esp,0xb8fffff3
9f0058bd:	d2 ff                	sar    bh,cl
9f0058bf:	ff dc                	call   <internal disassembler error>
9f0058c1:	f3 ff                	repz (bad) 
9f0058c3:	ff d8                	call   <internal disassembler error>
9f0058c5:	d2 ff                	sar    bh,cl
9f0058c7:	ff                   	(bad)  
9f0058c8:	fc                   	cld    
9f0058c9:	f3 ff                	repz (bad) 
9f0058cb:	ff                   	(bad)  
9f0058cc:	3f                   	aas    
9f0058cd:	d3 ff                	sar    edi,cl
9f0058cf:	ff 1c f4             	call   FWORD PTR [esp+esi*8]
9f0058d2:	ff                   	(bad)  
9f0058d3:	ff a8 d3 ff ff 3c    	jmp    FWORD PTR [eax+0x3cffffd3]
9f0058d9:	f4                   	hlt    
9f0058da:	ff                   	(bad)  
9f0058db:	ff 08                	dec    DWORD PTR [eax]
9f0058dd:	d4 ff                	aam    0xff
9f0058df:	ff 5c f4 ff          	call   FWORD PTR [esp+esi*8-0x1]
9f0058e3:	ff 28                	jmp    FWORD PTR [eax]
9f0058e5:	d4 ff                	aam    0xff
9f0058e7:	ff                   	(bad)  
9f0058e8:	7c f4                	jl     9f0058de <__GNU_EH_FRAME_HDR+0x2d6>
9f0058ea:	ff                   	(bad)  
9f0058eb:	ff a8 d5 ff ff ac    	jmp    FWORD PTR [eax-0x5300002b]
9f0058f1:	f4                   	hlt    
9f0058f2:	ff                   	(bad)  
9f0058f3:	ff c8                	dec    eax
9f0058f5:	d5 ff                	aad    0xff
9f0058f7:	ff cc                	dec    esp
9f0058f9:	f4                   	hlt    
9f0058fa:	ff                   	(bad)  
9f0058fb:	ff 64 d7 ff          	jmp    DWORD PTR [edi+edx*8-0x1]
9f0058ff:	ff                   	(bad)  
9f005900:	fc                   	cld    
9f005901:	f4                   	hlt    
9f005902:	ff                   	(bad)  
9f005903:	ff                   	(bad)  
9f005904:	fa                   	cli    
9f005905:	d7                   	xlat   BYTE PTR ds:[ebx]
9f005906:	ff                   	(bad)  
9f005907:	ff 20                	jmp    DWORD PTR [eax]
9f005909:	f5                   	cmc    
9f00590a:	ff                   	(bad)  
9f00590b:	ff 1c d8             	call   FWORD PTR [eax+ebx*8]
9f00590e:	ff                   	(bad)  
9f00590f:	ff 40 f5             	inc    DWORD PTR [eax-0xb]
9f005912:	ff                   	(bad)  
9f005913:	ff 5f d9             	call   FWORD PTR [edi-0x27]
9f005916:	ff                   	(bad)  
9f005917:	ff 6c f5 ff          	jmp    FWORD PTR [ebp+esi*8-0x1]
9f00591b:	ff 88 d9 ff ff 8c    	dec    DWORD PTR [eax-0x73000027]
9f005921:	f5                   	cmc    
9f005922:	ff                   	(bad)  
9f005923:	ff 26                	jmp    DWORD PTR [esi]
9f005925:	da ff                	(bad)  
9f005927:	ff b4 f5 ff ff 94 da 	push   DWORD PTR [ebp+esi*8-0x256b0001]
9f00592e:	ff                   	(bad)  
9f00592f:	ff dc                	call   <internal disassembler error>
9f005931:	f5                   	cmc    
9f005932:	ff                   	(bad)  
9f005933:	ff b4 da ff ff fc f5 	push   DWORD PTR [edx+ebx*8-0xa030001]
9f00593a:	ff                   	(bad)  
9f00593b:	ff                   	(bad)  
9f00593c:	f8                   	clc    
9f00593d:	da ff                	(bad)  
9f00593f:	ff 24 f6             	jmp    DWORD PTR [esi+esi*8]
9f005942:	ff                   	(bad)  
9f005943:	ff 11                	call   DWORD PTR [ecx]
9f005945:	de ff                	fdivp  st(7),st
9f005947:	ff 4c f6 ff          	dec    DWORD PTR [esi+esi*8-0x1]
9f00594b:	ff 2e                	jmp    FWORD PTR [esi]
9f00594d:	de ff                	fdivp  st(7),st
9f00594f:	ff 6c f6 ff          	jmp    FWORD PTR [esi+esi*8-0x1]
9f005953:	ff 74 de ff          	push   DWORD PTR [esi+ebx*8-0x1]
9f005957:	ff 90 f6 ff ff a9    	call   DWORD PTR [eax-0x5600000a]
9f00595d:	de ff                	fdivp  st(7),st
9f00595f:	ff b0 f6 ff ff c6    	push   DWORD PTR [eax-0x3900000a]
9f005965:	de ff                	fdivp  st(7),st
9f005967:	ff d0                	call   eax
9f005969:	f6 ff                	idiv   bh
9f00596b:	ff 1d e7 ff ff 00    	call   FWORD PTR ds:0xffffe7
9f005971:	f7 ff                	idiv   edi
9f005973:	ff 8a e7 ff ff 28    	dec    DWORD PTR [edx+0x28ffffe7]
9f005979:	f7 ff                	idiv   edi
9f00597b:	ff cb                	dec    ebx
9f00597d:	e7 ff                	out    0xff,eax
9f00597f:	ff 58 e8             	call   FWORD PTR [eax-0x18]
9f005982:	ff                   	(bad)  
9f005983:	ff                   	(bad)  
9f005984:	f8                   	clc    
9f005985:	e7 ff                	out    0xff,eax
9f005987:	ff e4                	jmp    esp
9f005989:	e8 ff ff fc e7       	call   86fd598d <sysEnter_Vector+0x86ea598d>
9f00598e:	ff                   	(bad)  
9f00598f:	ff 4c f7 ff          	dec    DWORD PTR [edi+esi*8-0x1]
9f005993:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f0059a0 <ansiEscSeq>:
9f0059a0:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f0059a3:	3b 00                	cmp    eax,DWORD PTR [eax]
9f0059a5:	48                   	dec    eax
9f0059a6:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f0059ac:	75 00                	jne    9f0059ae <ansiEscSeq+0xe>
9f0059ae:	3d 00 53 74 72       	cmp    eax,0x72745300
9f0059b3:	65                   	gs
9f0059b4:	61                   	popa   
9f0059b5:	6d                   	ins    DWORD PTR es:[edi],dx
9f0059b6:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f0059bc:	74 20                	je     9f0059de <ansiEscSeq+0x3e>
9f0059be:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f0059c5:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0059c6:	74 65                	je     9f005a2d <ansiEscSeq+0x8d>
9f0059c8:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f0059cb:	00 2a                	add    BYTE PTR [edx],ch
9f0059cd:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0059cf:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059d0:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f0059d7:	74 20                	je     9f0059f9 <ansiEscSeq+0x59>
9f0059d9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f0059dc:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059dd:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
9f0059e1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0059e3:	00 2a                	add    BYTE PTR [edx],ch
9f0059e5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0059e7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059e8:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f0059ef:	74 20                	je     9f005a11 <ansiEscSeq+0x71>
9f0059f1:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f0059f4:	70 6c                	jo     9f005a62 <ansiEscSeq+0xc2>
9f0059f6:	65                   	gs
9f0059f7:	74 65                	je     9f005a5e <ansiEscSeq+0xbe>
9f0059f9:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f0059fc:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059fd:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f005a04:	74 20                	je     9f005a26 <ansiEscSeq+0x86>
9f005a06:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f005a09:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a0a:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f005a0f:	65                   	gs
9f005a10:	76 69                	jbe    9f005a7b <ansiEscSeq+0xdb>
9f005a12:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005a13:	75 73                	jne    9f005a88 <ansiEscSeq+0xe8>
9f005a15:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a16:	79 2c                	jns    9f005a44 <ansiEscSeq+0xa4>
9f005a18:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f005a1b:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f005a22:	6c 
9f005a23:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f005a2a:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f005a2d:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005a2f:	72 20                	jb     9f005a51 <ansiEscSeq+0xb1>
9f005a31:	25 73 0a 00 20       	and    eax,0x20000a73
9f005a36:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005a3a:	63 3a                	arpl   WORD PTR [edx],di
9f005a3c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f005a3f:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f005a43:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005a45:	72 20                	jb     9f005a67 <ansiEscSeq+0xc7>
9f005a47:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f005a4c:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f005a53:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f005a57:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005a59:	72 20                	jb     9f005a7b <ansiEscSeq+0xdb>
9f005a5b:	25 73 0a 00 00       	and    eax,0xa73
9f005a60:	68 65 61 70 42       	push   0x42706165
9f005a65:	61                   	popa   
9f005a66:	73 65                	jae    9f005acd <ansiEscSeq+0x12d>
9f005a68:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f005a6b:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f005a6e:	30 38                	xor    BYTE PTR [eax],bh
9f005a70:	58                   	pop    eax
9f005a71:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f005a77:	30 38                	xor    BYTE PTR [eax],bh
9f005a79:	58                   	pop    eax
9f005a7a:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f005a7d:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005a7f:	72 65                	jb     9f005ae6 <ansiEscSeq+0x146>
9f005a81:	0a 00                	or     al,BYTE PTR [eax]
9f005a83:	6d                   	ins    DWORD PTR es:[edi],dx
9f005a84:	61                   	popa   
9f005a85:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a86:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a87:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005a88:	63 28                	arpl   WORD PTR [eax],bp
9f005a8a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005a8d:	30 38                	xor    BYTE PTR [eax],bh
9f005a8f:	58                   	pop    eax
9f005a90:	29 0a                	sub    DWORD PTR [edx],ecx
9f005a92:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005a96:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f005a99:	61                   	popa   
9f005a9a:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a9b:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a9c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005a9d:	63 3a                	arpl   WORD PTR [edx],di
9f005a9f:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f005aa2:	65                   	gs
9f005aa3:	64                   	fs
9f005aa4:	65                   	gs
9f005aa5:	64                   	fs
9f005aa6:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005aab:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005aae:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005ab2:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f005ab5:	61                   	popa   
9f005ab6:	6c                   	ins    BYTE PTR es:[edi],dx
9f005ab7:	6c                   	ins    BYTE PTR es:[edi],dx
9f005ab8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005ab9:	63 3a                	arpl   WORD PTR [edx],di
9f005abb:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f005abe:	61                   	popa   
9f005abf:	45                   	inc    ebp
9f005ac0:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005ac1:	64                   	fs
9f005ac2:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005ac7:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005aca:	00 00                	add    BYTE PTR [eax],al
9f005acc:	6c                   	ins    BYTE PTR es:[edi],dx
9f005acd:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005ad4:	6c                   	ins    BYTE PTR es:[edi],dx
9f005ad5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005ad6:	63 3a                	arpl   WORD PTR [edx],di
9f005ad8:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f005adb:	71 20                	jno    9f005afd <ansiEscSeq+0x15d>
9f005add:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005ae0:	30 38                	xor    BYTE PTR [eax],bh
9f005ae2:	58                   	pop    eax
9f005ae3:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f005ae6:	74 65                	je     9f005b4d <ansiEscSeq+0x1ad>
9f005ae8:	73 2c                	jae    9f005b16 <ansiEscSeq+0x176>
9f005aea:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f005aed:	74 20                	je     9f005b0f <ansiEscSeq+0x16f>
9f005aef:	77 61                	ja     9f005b52 <ansiEscSeq+0x1b2>
9f005af1:	73 20                	jae    9f005b13 <ansiEscSeq+0x173>
9f005af3:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005af6:	30 38                	xor    BYTE PTR [eax],bh
9f005af8:	58                   	pop    eax
9f005af9:	2c 20                	sub    al,0x20
9f005afb:	68 65 61 70 45       	push   0x45706165
9f005b00:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005b01:	64                   	fs
9f005b02:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005b07:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005b0a:	00 00                	add    BYTE PTR [eax],al
9f005b0c:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b0d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005b14:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b15:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005b16:	63 3a                	arpl   WORD PTR [edx],di
9f005b18:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f005b1b:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f005b22:	65 
9f005b23:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f005b27:	61                   	popa   
9f005b28:	70 43                	jo     9f005b6d <ansiEscSeq+0x1cd>
9f005b2a:	75 72                	jne    9f005b9e <ansiEscSeq+0x1fe>
9f005b2c:	72 20                	jb     9f005b4e <ansiEscSeq+0x1ae>
9f005b2e:	61                   	popa   
9f005b2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005b30:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f005b34:	61                   	popa   
9f005b35:	70 42                	jo     9f005b79 <ansiEscSeq+0x1d9>
9f005b37:	61                   	popa   
9f005b38:	73 65                	jae    9f005b9f <ansiEscSeq+0x1ff>
9f005b3a:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f005b3e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005b41:	30 38                	xor    BYTE PTR [eax],bh
9f005b43:	58                   	pop    eax
9f005b44:	0a 00                	or     al,BYTE PTR [eax]
9f005b46:	00 00                	add    BYTE PTR [eax],al
9f005b48:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b49:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005b50:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b51:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005b52:	63 3a                	arpl   WORD PTR [edx],di
9f005b54:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f005b57:	61                   	popa   
9f005b58:	74 69                	je     9f005bc3 <ansiEscSeq+0x223>
9f005b5a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005b5b:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f005b5f:	61                   	popa   
9f005b60:	70 20                	jo     9f005b82 <ansiEscSeq+0x1e2>
9f005b62:	72 65                	jb     9f005bc9 <ansiEscSeq+0x229>
9f005b64:	63 20                	arpl   WORD PTR [eax],sp
9f005b66:	40                   	inc    eax
9f005b67:	20 30                	and    BYTE PTR [eax],dh
9f005b69:	78 25                	js     9f005b90 <ansiEscSeq+0x1f0>
9f005b6b:	30 38                	xor    BYTE PTR [eax],bh
9f005b6d:	58                   	pop    eax
9f005b6e:	0a 00                	or     al,BYTE PTR [eax]
9f005b70:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b71:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005b78:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b79:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005b7a:	63 3a                	arpl   WORD PTR [edx],di
9f005b7c:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f005b7f:	61                   	popa   
9f005b80:	70 43                	jo     9f005bc5 <ansiEscSeq+0x225>
9f005b82:	75 72                	jne    9f005bf6 <ansiEscSeq+0x256>
9f005b84:	72 3d                	jb     9f005bc3 <ansiEscSeq+0x223>
9f005b86:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005b89:	30 38                	xor    BYTE PTR [eax],bh
9f005b8b:	58                   	pop    eax
9f005b8c:	2c 20                	sub    al,0x20
9f005b8e:	73 69                	jae    9f005bf9 <ansiEscSeq+0x259>
9f005b90:	7a 65                	jp     9f005bf7 <ansiEscSeq+0x257>
9f005b92:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005b93:	66                   	data16
9f005b94:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
9f005b97:	61                   	popa   
9f005b98:	70 72                	jo     9f005c0c <ansiEscSeq+0x26c>
9f005b9a:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
9f005b9e:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
9f005ba4:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005ba7:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f005baa:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bab:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bac:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005bad:	63 3a                	arpl   WORD PTR [edx],di
9f005baf:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f005bb2:	74 75                	je     9f005c29 <ansiEscSeq+0x289>
9f005bb4:	72 6e                	jb     9f005c24 <ansiEscSeq+0x284>
9f005bb6:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f005bbd:	30 38                	xor    BYTE PTR [eax],bh
9f005bbf:	58                   	pop    eax
9f005bc0:	0a 00                	or     al,BYTE PTR [eax]
9f005bc2:	00 00                	add    BYTE PTR [eax],al
9f005bc4:	d1 c0                	rol    eax,1
9f005bc6:	ff                   	(bad)  
9f005bc7:	ff e3                	jmp    ebx
9f005bc9:	c0 ff ff             	sar    bh,0xff
9f005bcc:	e3 c0                	jecxz  9f005b8e <ansiEscSeq+0x1ee>
9f005bce:	ff                   	(bad)  
9f005bcf:	ff d7                	call   edi
9f005bd1:	c0 ff ff             	sar    bh,0xff
9f005bd4:	e3 c0                	jecxz  9f005b96 <ansiEscSeq+0x1f6>
9f005bd6:	ff                   	(bad)  
9f005bd7:	ff e3                	jmp    ebx
9f005bd9:	c0 ff ff             	sar    bh,0xff
9f005bdc:	e3 c0                	jecxz  9f005b9e <ansiEscSeq+0x1fe>
9f005bde:	ff                   	(bad)  
9f005bdf:	ff e3                	jmp    ebx
9f005be1:	c0 ff ff             	sar    bh,0xff
9f005be4:	e3 c0                	jecxz  9f005ba6 <ansiEscSeq+0x206>
9f005be6:	ff                   	(bad)  
9f005be7:	ff e3                	jmp    ebx
9f005be9:	c0 ff ff             	sar    bh,0xff
9f005bec:	e3 c0                	jecxz  9f005bae <ansiEscSeq+0x20e>
9f005bee:	ff                   	(bad)  
9f005bef:	ff cb                	dec    ebx
9f005bf1:	c0 ff ff             	sar    bh,0xff
9f005bf4:	e3 c0                	jecxz  9f005bb6 <ansiEscSeq+0x216>
9f005bf6:	ff                   	(bad)  
9f005bf7:	ff c5                	inc    ebp
9f005bf9:	c0 ff ff             	sar    bh,0xff
9f005bfc:	e3 c0                	jecxz  9f005bbe <ansiEscSeq+0x21e>
9f005bfe:	ff                   	(bad)  
9f005bff:	ff e3                	jmp    ebx
9f005c01:	c0 ff ff             	sar    bh,0xff
9f005c04:	dd c0                	ffree  st(0)
9f005c06:	ff                   	(bad)  
9f005c07:	ff 82 c3 ff ff af    	inc    DWORD PTR [edx-0x5000003d]
9f005c0d:	c3                   	ret    
9f005c0e:	ff                   	(bad)  
9f005c0f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c15:	c3                   	ret    
9f005c16:	ff                   	(bad)  
9f005c17:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c1d:	c3                   	ret    
9f005c1e:	ff                   	(bad)  
9f005c1f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c25:	c3                   	ret    
9f005c26:	ff                   	(bad)  
9f005c27:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c2d:	c3                   	ret    
9f005c2e:	ff                   	(bad)  
9f005c2f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c35:	c3                   	ret    
9f005c36:	ff                   	(bad)  
9f005c37:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c3d:	c3                   	ret    
9f005c3e:	ff                   	(bad)  
9f005c3f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c45:	c3                   	ret    
9f005c46:	ff                   	(bad)  
9f005c47:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c4d:	c3                   	ret    
9f005c4e:	ff                   	(bad)  
9f005c4f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c55:	c3                   	ret    
9f005c56:	ff                   	(bad)  
9f005c57:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c5d:	c3                   	ret    
9f005c5e:	ff                   	(bad)  
9f005c5f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c65:	c3                   	ret    
9f005c66:	ff                   	(bad)  
9f005c67:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c6d:	c3                   	ret    
9f005c6e:	ff                   	(bad)  
9f005c6f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c75:	c3                   	ret    
9f005c76:	ff                   	(bad)  
9f005c77:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c7d:	c3                   	ret    
9f005c7e:	ff                   	(bad)  
9f005c7f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c85:	c3                   	ret    
9f005c86:	ff                   	(bad)  
9f005c87:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c8d:	c3                   	ret    
9f005c8e:	ff                   	(bad)  
9f005c8f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c95:	c3                   	ret    
9f005c96:	ff                   	(bad)  
9f005c97:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005c9d:	c3                   	ret    
9f005c9e:	ff                   	(bad)  
9f005c9f:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005ca5:	c3                   	ret    
9f005ca6:	ff                   	(bad)  
9f005ca7:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005cad:	c3                   	ret    
9f005cae:	ff                   	(bad)  
9f005caf:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005cb5:	c3                   	ret    
9f005cb6:	ff                   	(bad)  
9f005cb7:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005cbd:	c3                   	ret    
9f005cbe:	ff                   	(bad)  
9f005cbf:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005cc5:	c3                   	ret    
9f005cc6:	ff                   	(bad)  
9f005cc7:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005ccd:	c3                   	ret    
9f005cce:	ff                   	(bad)  
9f005ccf:	ff af c3 ff ff a0    	jmp    FWORD PTR [edi-0x5f00003d]
9f005cd5:	c3                   	ret    
9f005cd6:	ff                   	(bad)  
9f005cd7:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005cdd:	c3                   	ret    
9f005cde:	ff                   	(bad)  
9f005cdf:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005ce5:	c3                   	ret    
9f005ce6:	ff                   	(bad)  
9f005ce7:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005ced:	c3                   	ret    
9f005cee:	ff                   	(bad)  
9f005cef:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005cf5:	c3                   	ret    
9f005cf6:	ff                   	(bad)  
9f005cf7:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005cfd:	c3                   	ret    
9f005cfe:	ff                   	(bad)  
9f005cff:	ff 08                	dec    DWORD PTR [eax]
9f005d01:	c2 ff ff             	ret    0xffff
9f005d04:	a9 c3 ff ff af       	test   eax,0xafffffc3
9f005d09:	c3                   	ret    
9f005d0a:	ff                   	(bad)  
9f005d0b:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005d11:	c3                   	ret    
9f005d12:	ff                   	(bad)  
9f005d13:	ff af c3 ff ff a9    	jmp    FWORD PTR [edi-0x5600003d]
9f005d19:	c3                   	ret    
9f005d1a:	ff                   	(bad)  
9f005d1b:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005d21:	c3                   	ret    
9f005d22:	ff                   	(bad)  
9f005d23:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005d29:	c3                   	ret    
9f005d2a:	ff                   	(bad)  
9f005d2b:	ff                   	(bad)  
9f005d2c:	3c c3                	cmp    al,0xc3
9f005d2e:	ff                   	(bad)  
9f005d2f:	ff 93 c3 ff ff fe    	call   DWORD PTR [ebx-0x100003d]
9f005d35:	c2 ff ff             	ret    0xffff
9f005d38:	af                   	scas   eax,DWORD PTR es:[edi]
9f005d39:	c3                   	ret    
9f005d3a:	ff                   	(bad)  
9f005d3b:	ff af c3 ff ff 5d    	jmp    FWORD PTR [edi+0x5dffffc3]
9f005d41:	c2 ff ff             	ret    0xffff
9f005d44:	af                   	scas   eax,DWORD PTR es:[edi]
9f005d45:	c3                   	ret    
9f005d46:	ff                   	(bad)  
9f005d47:	ff e9                	jmp    <internal disassembler error>
9f005d49:	c3                   	ret    
9f005d4a:	ff                   	(bad)  
9f005d4b:	ff af c3 ff ff af    	jmp    FWORD PTR [edi-0x5000003d]
9f005d51:	c3                   	ret    
9f005d52:	ff                   	(bad)  
9f005d53:	ff 9c c3 ff ff 30 31 	call   FWORD PTR [ebx+eax*8+0x3130ffff]

9f005d58 <digits.1469>:
9f005d58:	30 31                	xor    BYTE PTR [ecx],dh
9f005d5a:	32 33                	xor    dh,BYTE PTR [ebx]
9f005d5c:	34 35                	xor    al,0x35
9f005d5e:	36                   	ss
9f005d5f:	37                   	aaa    
9f005d60:	38 39                	cmp    BYTE PTR [ecx],bh
9f005d62:	41                   	inc    ecx
9f005d63:	42                   	inc    edx
9f005d64:	43                   	inc    ebx
9f005d65:	44                   	inc    esp
9f005d66:	45                   	inc    ebp
9f005d67:	46                   	inc    esi
	...
9f005d80:	47                   	inc    edi
9f005d81:	4d                   	dec    ebp
9f005d82:	54                   	push   esp
	...

9f005da0 <_ytab>:
9f005da0:	1f                   	pop    ds
9f005da1:	00 00                	add    BYTE PTR [eax],al
9f005da3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005da6:	00 00                	add    BYTE PTR [eax],al
9f005da8:	1f                   	pop    ds
9f005da9:	00 00                	add    BYTE PTR [eax],al
9f005dab:	00 1e                	add    BYTE PTR [esi],bl
9f005dad:	00 00                	add    BYTE PTR [eax],al
9f005daf:	00 1f                	add    BYTE PTR [edi],bl
9f005db1:	00 00                	add    BYTE PTR [eax],al
9f005db3:	00 1e                	add    BYTE PTR [esi],bl
9f005db5:	00 00                	add    BYTE PTR [eax],al
9f005db7:	00 1f                	add    BYTE PTR [edi],bl
9f005db9:	00 00                	add    BYTE PTR [eax],al
9f005dbb:	00 1f                	add    BYTE PTR [edi],bl
9f005dbd:	00 00                	add    BYTE PTR [eax],al
9f005dbf:	00 1e                	add    BYTE PTR [esi],bl
9f005dc1:	00 00                	add    BYTE PTR [eax],al
9f005dc3:	00 1f                	add    BYTE PTR [edi],bl
9f005dc5:	00 00                	add    BYTE PTR [eax],al
9f005dc7:	00 1e                	add    BYTE PTR [esi],bl
9f005dc9:	00 00                	add    BYTE PTR [eax],al
9f005dcb:	00 1f                	add    BYTE PTR [edi],bl
9f005dcd:	00 00                	add    BYTE PTR [eax],al
9f005dcf:	00 1f                	add    BYTE PTR [edi],bl
9f005dd1:	00 00                	add    BYTE PTR [eax],al
9f005dd3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f005dd9:	00 00                	add    BYTE PTR [eax],al
9f005ddb:	00 1e                	add    BYTE PTR [esi],bl
9f005ddd:	00 00                	add    BYTE PTR [eax],al
9f005ddf:	00 1f                	add    BYTE PTR [edi],bl
9f005de1:	00 00                	add    BYTE PTR [eax],al
9f005de3:	00 1e                	add    BYTE PTR [esi],bl
9f005de5:	00 00                	add    BYTE PTR [eax],al
9f005de7:	00 1f                	add    BYTE PTR [edi],bl
9f005de9:	00 00                	add    BYTE PTR [eax],al
9f005deb:	00 1f                	add    BYTE PTR [edi],bl
9f005ded:	00 00                	add    BYTE PTR [eax],al
9f005def:	00 1e                	add    BYTE PTR [esi],bl
9f005df1:	00 00                	add    BYTE PTR [eax],al
9f005df3:	00 1f                	add    BYTE PTR [edi],bl
9f005df5:	00 00                	add    BYTE PTR [eax],al
9f005df7:	00 1e                	add    BYTE PTR [esi],bl
9f005df9:	00 00                	add    BYTE PTR [eax],al
9f005dfb:	00 1f                	add    BYTE PTR [edi],bl
9f005dfd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f005e00 <.rel.dyn>:
9f005e00:	24 60                	and    al,0x60
9f005e02:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e08:	28 60 00             	sub    BYTE PTR [eax+0x0],ah
9f005e0b:	9f                   	lahf   
9f005e0c:	08 00                	or     BYTE PTR [eax],al
9f005e0e:	00 00                	add    BYTE PTR [eax],al
9f005e10:	2c 60                	sub    al,0x60
9f005e12:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e18:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
9f005e1b:	9f                   	lahf   
9f005e1c:	08 00                	or     BYTE PTR [eax],al
9f005e1e:	00 00                	add    BYTE PTR [eax],al
9f005e20:	34 60                	xor    al,0x60
9f005e22:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e28:	38 60 00             	cmp    BYTE PTR [eax+0x0],ah
9f005e2b:	9f                   	lahf   
9f005e2c:	08 00                	or     BYTE PTR [eax],al
9f005e2e:	00 00                	add    BYTE PTR [eax],al
9f005e30:	3c 60                	cmp    al,0x60
9f005e32:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e38:	40                   	inc    eax
9f005e39:	60                   	pusha  
9f005e3a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e40:	58                   	pop    eax
9f005e41:	60                   	pusha  
9f005e42:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e48:	5c                   	pop    esp
9f005e49:	60                   	pusha  
9f005e4a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e50:	60                   	pusha  
9f005e51:	60                   	pusha  
9f005e52:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005e58:	52                   	push   edx
9f005e59:	09 00                	or     DWORD PTR [eax],eax
9f005e5b:	9f                   	lahf   
9f005e5c:	02 29                	add    ch,BYTE PTR [ecx]
9f005e5e:	00 00                	add    BYTE PTR [eax],al
9f005e60:	92                   	xchg   edx,eax
9f005e61:	09 00                	or     DWORD PTR [eax],eax
9f005e63:	9f                   	lahf   
9f005e64:	02 29                	add    ch,BYTE PTR [ecx]
9f005e66:	00 00                	add    BYTE PTR [eax],al
9f005e68:	bb 09 00 9f 02       	mov    ebx,0x29f0009
9f005e6d:	29 00                	sub    DWORD PTR [eax],eax
9f005e6f:	00 d4                	add    ah,dl
9f005e71:	09 00                	or     DWORD PTR [eax],eax
9f005e73:	9f                   	lahf   
9f005e74:	02 29                	add    ch,BYTE PTR [ecx]
9f005e76:	00 00                	add    BYTE PTR [eax],al
9f005e78:	2c 0a                	sub    al,0xa
9f005e7a:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005e80:	8f 0a                	(bad)  
9f005e82:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005e88:	c5 0a                	lds    ecx,FWORD PTR [edx]
9f005e8a:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005e90:	01 0b                	add    DWORD PTR [ebx],ecx
9f005e92:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005e98:	3f                   	aas    
9f005e99:	0b 00                	or     eax,DWORD PTR [eax]
9f005e9b:	9f                   	lahf   
9f005e9c:	02 29                	add    ch,BYTE PTR [ecx]
9f005e9e:	00 00                	add    BYTE PTR [eax],al
9f005ea0:	7f 0b                	jg     9f005ead <_ytab+0x10d>
9f005ea2:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005ea8:	c1 0b 00             	ror    DWORD PTR [ebx],0x0
9f005eab:	9f                   	lahf   
9f005eac:	02 29                	add    ch,BYTE PTR [ecx]
9f005eae:	00 00                	add    BYTE PTR [eax],al
9f005eb0:	4e                   	dec    esi
9f005eb1:	0e                   	push   cs
9f005eb2:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005eb8:	7b 0e                	jnp    9f005ec8 <_ytab+0x128>
9f005eba:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005ec0:	f1                   	icebp  
9f005ec1:	0e                   	push   cs
9f005ec2:	00 9f 02 29 00 00    	add    BYTE PTR [edi+0x2902],bl
9f005ec8:	ef                   	out    dx,eax
9f005ec9:	30 00                	xor    BYTE PTR [eax],al
9f005ecb:	9f                   	lahf   
9f005ecc:	02 29                	add    ch,BYTE PTR [ecx]
9f005ece:	00 00                	add    BYTE PTR [eax],al
9f005ed0:	5e                   	pop    esi
9f005ed1:	3d 00 9f 02 29       	cmp    eax,0x29029f00
9f005ed6:	00 00                	add    BYTE PTR [eax],al
9f005ed8:	54                   	push   esp
9f005ed9:	60                   	pusha  
9f005eda:	00 9f 01 16 00 00    	add    BYTE PTR [edi+0x1601],bl
9f005ee0:	50                   	push   eax
9f005ee1:	60                   	pusha  
9f005ee2:	00 9f 07 14 00 00    	add    BYTE PTR [edi+0x1407],bl

Disassembly of section .data:

9f005f00 <rcsid>:
9f005f00:	24 48                	and    al,0x48
9f005f02:	65                   	gs
9f005f03:	61                   	popa   
9f005f04:	64                   	fs
9f005f05:	65                   	gs
9f005f06:	72 3a                	jb     9f005f42 <rcsid+0x42>
9f005f08:	20 2f                	and    BYTE PTR [edi],ch
9f005f0a:	75 73                	jne    9f005f7f <_DYNAMIC+0x13>
9f005f0c:	65                   	gs
9f005f0d:	72 36                	jb     9f005f45 <rcsid+0x45>
9f005f0f:	2f                   	das    
9f005f10:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005f11:	75 73                	jne    9f005f86 <_DYNAMIC+0x1a>
9f005f13:	74 65                	je     9f005f7a <_DYNAMIC+0xe>
9f005f15:	72 2f                	jb     9f005f46 <rcsid+0x46>
9f005f17:	74 63                	je     9f005f7c <_DYNAMIC+0x10>
9f005f19:	6c                   	ins    BYTE PTR es:[edi],dx
9f005f1a:	2f                   	das    
9f005f1b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f005f1e:	70 61                	jo     9f005f81 <_DYNAMIC+0x15>
9f005f20:	74 2f                	je     9f005f51 <rcsid+0x51>
9f005f22:	52                   	push   edx
9f005f23:	43                   	inc    ebx
9f005f24:	53                   	push   ebx
9f005f25:	2f                   	das    
9f005f26:	73 74                	jae    9f005f9c <_DYNAMIC+0x30>
9f005f28:	72 73                	jb     9f005f9d <_DYNAMIC+0x31>
9f005f2a:	74 72                	je     9f005f9e <_DYNAMIC+0x32>
9f005f2c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f005f30:	20 31                	and    BYTE PTR [ecx],dh
9f005f32:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f005f35:	39 33                	cmp    DWORD PTR [ebx],esi
9f005f37:	2f                   	das    
9f005f38:	30 33                	xor    BYTE PTR [ebx],dh
9f005f3a:	2f                   	das    
9f005f3b:	31 39                	xor    DWORD PTR [ecx],edi
9f005f3d:	20 31                	and    BYTE PTR [ecx],dh
9f005f3f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f005f44:	34 30                	xor    al,0x30
9f005f46:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f005f49:	73 74                	jae    9f005fbf <_DYNAMIC+0x53>
9f005f4b:	65                   	gs
9f005f4c:	72 20                	jb     9f005f6e <_DYNAMIC+0x2>
9f005f4e:	45                   	inc    ebp
9f005f4f:	78 70                	js     9f005fc1 <_DYNAMIC+0x55>
9f005f51:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f005f54:	53                   	push   ebx
9f005f55:	50                   	push   eax
9f005f56:	52                   	push   edx
9f005f57:	49                   	dec    ecx
9f005f58:	54                   	push   esp
9f005f59:	45                   	inc    ebp
9f005f5a:	20 28                	and    BYTE PTR [eax],ch
9f005f5c:	42                   	inc    edx
9f005f5d:	65                   	gs
9f005f5e:	72 6b                	jb     9f005fcb <_DYNAMIC+0x5f>
9f005f60:	65                   	gs
9f005f61:	6c                   	ins    BYTE PTR es:[edi],dx
9f005f62:	65                   	gs
9f005f63:	79 29                	jns    9f005f8e <_DYNAMIC+0x22>
9f005f65:	00 00                	add    BYTE PTR [eax],al
	...

9f005f68 <_daylight>:
9f005f68:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f005f6c <_DYNAMIC>:
9f005f6c:	19 00                	sbb    DWORD PTR [eax],eax
9f005f6e:	00 00                	add    BYTE PTR [eax],al
9f005f70:	54                   	push   esp
9f005f71:	60                   	pusha  
9f005f72:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f005f78:	04 00                	add    al,0x0
9f005f7a:	00 00                	add    BYTE PTR [eax],al
9f005f7c:	1a 00                	sbb    al,BYTE PTR [eax]
9f005f7e:	00 00                	add    BYTE PTR [eax],al
9f005f80:	58                   	pop    eax
9f005f81:	60                   	pusha  
9f005f82:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f005f88:	04 00                	add    al,0x0
9f005f8a:	00 00                	add    BYTE PTR [eax],al
9f005f8c:	04 00                	add    al,0x0
9f005f8e:	00 00                	add    BYTE PTR [eax],al
9f005f90:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005f91:	53                   	push   ebx
9f005f92:	00 9f 05 00 00 00    	add    BYTE PTR [edi+0x5],bl
9f005f98:	a8 51                	test   al,0x51
9f005f9a:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f005fa0:	68 4d 00 9f 0a       	push   0xa9f004d
9f005fa5:	00 00                	add    BYTE PTR [eax],al
9f005fa7:	00 fa                	add    dl,bh
9f005fa9:	01 00                	add    DWORD PTR [eax],eax
9f005fab:	00 0b                	add    BYTE PTR [ebx],cl
9f005fad:	00 00                	add    BYTE PTR [eax],al
9f005faf:	00 10                	add    BYTE PTR [eax],dl
9f005fb1:	00 00                	add    BYTE PTR [eax],al
9f005fb3:	00 03                	add    BYTE PTR [ebx],al
9f005fb5:	00 00                	add    BYTE PTR [eax],al
9f005fb7:	00 44 60 00          	add    BYTE PTR [eax+eiz*2+0x0],al
9f005fbb:	9f                   	lahf   
9f005fbc:	02 00                	add    al,BYTE PTR [eax]
9f005fbe:	00 00                	add    BYTE PTR [eax],al
9f005fc0:	08 00                	or     BYTE PTR [eax],al
9f005fc2:	00 00                	add    BYTE PTR [eax],al
9f005fc4:	14 00                	adc    al,0x0
9f005fc6:	00 00                	add    BYTE PTR [eax],al
9f005fc8:	11 00                	adc    DWORD PTR [eax],eax
9f005fca:	00 00                	add    BYTE PTR [eax],al
9f005fcc:	17                   	pop    ss
9f005fcd:	00 00                	add    BYTE PTR [eax],al
9f005fcf:	00 e0                	add    al,ah
9f005fd1:	5e                   	pop    esi
9f005fd2:	00 9f 11 00 00 00    	add    BYTE PTR [edi+0x11],bl
9f005fd8:	00 5e 00             	add    BYTE PTR [esi+0x0],bl
9f005fdb:	9f                   	lahf   
9f005fdc:	12 00                	adc    al,BYTE PTR [eax]
9f005fde:	00 00                	add    BYTE PTR [eax],al
9f005fe0:	e0 00                	loopne 9f005fe2 <_DYNAMIC+0x76>
9f005fe2:	00 00                	add    BYTE PTR [eax],al
9f005fe4:	13 00                	adc    eax,DWORD PTR [eax]
9f005fe6:	00 00                	add    BYTE PTR [eax],al
9f005fe8:	08 00                	or     BYTE PTR [eax],al
9f005fea:	00 00                	add    BYTE PTR [eax],al
9f005fec:	16                   	push   ss
9f005fed:	00 00                	add    BYTE PTR [eax],al
9f005fef:	00 00                	add    BYTE PTR [eax],al
9f005ff1:	00 00                	add    BYTE PTR [eax],al
9f005ff3:	00 fa                	add    dl,bh
9f005ff5:	ff                   	(bad)  
9f005ff6:	ff 6f 0b             	jmp    FWORD PTR [edi+0xb]
	...

Disassembly of section .got:

9f006024 <.got>:
9f006024:	a0 60 00 9f 80       	mov    al,ds:0x809f0060
9f006029:	60                   	pusha  
9f00602a:	00 9f 9c 60 00 9f    	add    BYTE PTR [edi-0x60ff9f64],bl
9f006030:	84 60 00             	test   BYTE PTR [eax+0x0],ah
9f006033:	9f                   	lahf   
9f006034:	88 60 00             	mov    BYTE PTR [eax+0x0],ah
9f006037:	9f                   	lahf   
9f006038:	8c 60 00             	mov    WORD PTR [eax+0x0],fs
9f00603b:	9f                   	lahf   
9f00603c:	90                   	nop
9f00603d:	60                   	pusha  
9f00603e:	00 9f e0 60 00 9f    	add    BYTE PTR [edi-0x60ff9f20],bl

Disassembly of section .got.plt:

9f006044 <_GLOBAL_OFFSET_TABLE_>:
9f006044:	6c                   	ins    BYTE PTR es:[edi],dx
9f006045:	5f                   	pop    edi
9f006046:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f00604c:	00 00                	add    BYTE PTR [eax],al
9f00604e:	00 00                	add    BYTE PTR [eax],al
9f006050:	f6                   	.byte 0xf6
9f006051:	3d                   	.byte 0x3d
9f006052:	00                   	.byte 0x0
9f006053:	9f                   	lahf   

Disassembly of section .init_array:

9f006054 <.init_array>:
9f006054:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f006058 <.fini_array>:
9f006058:	91                   	xchg   ecx,eax
9f006059:	0c 00                	or     al,0x0
9f00605b:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f00605c <_tzname>:
9f00605c:	80 5d 00 9f          	sbb    BYTE PTR [ebp+0x0],0x9f
9f006060:	80 5d 00 9f          	sbb    BYTE PTR [ebp+0x0],0x9f

Disassembly of section .bss:

9f006080 <heapEnd>:
9f006080:	00 00                	add    BYTE PTR [eax],al
	...

9f006084 <heapBase>:
9f006084:	00 00                	add    BYTE PTR [eax],al
	...

9f006088 <heapCurr>:
9f006088:	00 00                	add    BYTE PTR [eax],al
	...

9f00608c <processEnvp>:
9f00608c:	00 00                	add    BYTE PTR [eax],al
	...

9f006090 <libcTZ>:
9f006090:	00 00                	add    BYTE PTR [eax],al
	...

9f006094 <lasts.1464>:
9f006094:	00 00                	add    BYTE PTR [eax],al
	...

9f006098 <libcInitialized>:
9f006098:	00 00                	add    BYTE PTR [eax],al
	...

9f00609c <printBuffer>:
9f00609c:	00 00                	add    BYTE PTR [eax],al
	...

9f0060a0 <params>:
	...

9f0060b8 <_dstbias>:
	...

9f0060c0 <ticksToWait>:
	...

9f0060e0 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	83 00 00             	add    DWORD PTR [eax],0x0
       f:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
      12:	01 00                	add    DWORD PTR [eax],eax
      14:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
      1a:	00 00                	add    BYTE PTR [eax],al
      1c:	9f                   	lahf   
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	75 00                	jne    2a <sysEnter_Vector-0x12ffd6>
      2a:	00 00                	add    BYTE PTR [eax],al
      2c:	02 01                	add    al,BYTE PTR [ecx]
      2e:	06                   	push   es
      2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
      4e:	00 02                	add    BYTE PTR [edx],al
      50:	02 07                	add    al,BYTE PTR [edi]
      52:	f0 00 00             	lock add BYTE PTR [eax],al
      55:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	4e                   	dec    esi
      65:	00 00                	add    BYTE PTR [eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	44                   	inc    esp
      6c:	00 00                	add    BYTE PTR [eax],al
      6e:	00 02                	add    BYTE PTR [edx],al
      70:	04 05                	add    al,0x5
      72:	05 00 00 00 02       	add    eax,0x2000000
      77:	0c 04                	or     al,0x4
      79:	3d 01 00 00 05       	cmp    eax,0x5000001
      7e:	04 83                	add    al,0x83
      80:	00 00                	add    BYTE PTR [eax],al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
      92:	5a                   	pop    edx
      93:	01 00                	add    DWORD PTR [eax],eax
      95:	00 02                	add    BYTE PTR [edx],al
      97:	04 07                	add    al,0x7
      99:	49                   	dec    ecx
      9a:	00 00                	add    BYTE PTR [eax],al
      9c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	0e                   	push   cs
      a5:	00 00                	add    BYTE PTR [eax],al
      a7:	00 01                	add    BYTE PTR [ecx],al
      a9:	08 9d 00 00 00 00    	or     BYTE PTR [ebp+0x0],bl
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	9f                   	lahf   
      b2:	38 00                	cmp    BYTE PTR [eax],al
      b4:	00 00                	add    BYTE PTR [eax],al
      b6:	01 9c d5 00 00 00 08 	add    DWORD PTR [ebp+edx*8+0x8000000],ebx
      bd:	73 00                	jae    bf <sysEnter_Vector-0x12ff41>
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 03    	add    dl,BYTE PTR [ecx+0x3070004]
      d7:	01 00                	add    DWORD PTR [eax],eax
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	9f                   	lahf   
      e4:	38 00                	cmp    BYTE PTR [eax],al
      e6:	00 00                	add    BYTE PTR [eax],al
      e8:	01 9c 07 01 00 00 08 	add    DWORD PTR [edi+eax*1+0x8000001],ebx
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 5b    	add    dl,BYTE PTR [ecx+0x5b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
     117:	9f                   	lahf   
     118:	09 0b                	or     DWORD PTR [ebx],ecx
     11a:	01 00                	add    DWORD PTR [eax],eax
     11c:	00 02                	add    BYTE PTR [edx],al
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 88 60 00       	add    eax,0x608803
     128:	9f                   	lahf   
     129:	09 64 00 00          	or     DWORD PTR [eax+eax*1+0x0],esp
     12d:	00 02                	add    BYTE PTR [edx],al
     12f:	36                   	ss
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
     139:	9f                   	lahf   
     13a:	09 53 01             	or     DWORD PTR [ebx+0x1],edx
     13d:	00 00                	add    BYTE PTR [eax],al
     13f:	02 37                	add    dh,BYTE PTR [edi]
     141:	6f                   	outs   dx,DWORD PTR ds:[esi]
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
     14a:	9f                   	lahf   
     14b:	09 38                	or     DWORD PTR [eax],edi
     14d:	00 00                	add    BYTE PTR [eax],al
     14f:	00 03                	add    BYTE PTR [ebx],al
     151:	53                   	push   ebx
     152:	5c                   	pop    esp
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
     15b:	9f                   	lahf   
     15c:	05 04 9d 00 00       	add    eax,0x9d04
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	83 00 00             	add    DWORD PTR [eax],0x0
     172:	00 0c 63             	add    BYTE PTR [ebx+eiz*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 15 00 00 00 70    	add    BYTE PTR ds:0x70000000,dl
     17d:	00 00                	add    BYTE PTR [eax],al
     17f:	9f                   	lahf   
     180:	aa                   	stos   BYTE PTR es:[edi],al
     181:	00 00                	add    BYTE PTR [eax],al
     183:	00 d4                	add    ah,dl
     185:	00 00                	add    BYTE PTR [eax],al
     187:	00 02                	add    BYTE PTR [edx],al
     189:	01 06                	add    DWORD PTR [esi],eax
     18b:	75 00                	jne    18d <sysEnter_Vector-0x12fe73>
     18d:	00 00                	add    BYTE PTR [eax],al
     18f:	02 01                	add    al,BYTE PTR [ecx]
     191:	06                   	push   es
     192:	6e                   	outs   dx,BYTE PTR ds:[esi]
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     1b1:	00 02                	add    BYTE PTR [edx],al
     1b3:	02 07                	add    al,BYTE PTR [edi]
     1b5:	f0 00 00             	lock add BYTE PTR [eax],al
     1b8:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	4e                   	dec    esi
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	44                   	inc    esp
     1cf:	00 00                	add    BYTE PTR [eax],al
     1d1:	00 02                	add    BYTE PTR [edx],al
     1d3:	04 05                	add    al,0x5
     1d5:	05 00 00 00 02       	add    eax,0x2000000
     1da:	0c 04                	or     al,0x4
     1dc:	3d 01 00 00 02       	cmp    eax,0x2000001
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     1ea:	5a                   	pop    edx
     1eb:	01 00                	add    DWORD PTR [eax],eax
     1ed:	00 02                	add    BYTE PTR [edx],al
     1ef:	04 07                	add    al,0x7
     1f1:	49                   	dec    ecx
     1f2:	00 00                	add    BYTE PTR [eax],al
     1f4:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	9c                   	pushf  
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     20e:	01 9c ef 00 00 00 07 	add    DWORD PTR [edi+ebp*8+0x7000000],ebx
     215:	b3 0b                	mov    bl,0xb
     217:	00 00                	add    BYTE PTR [eax],al
     219:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     21f:	02 91 00 07 8d 01    	add    dl,BYTE PTR [ecx+0x18d0700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	93                   	xchg   ebx,eax
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	9f                   	lahf   
     261:	55                   	push   ebp
     262:	00 00                	add    BYTE PTR [eax],al
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	9c                   	pushf  
     267:	46                   	inc    esi
     268:	01 00                	add    DWORD PTR [eax],eax
     26a:	00 07                	add    BYTE PTR [edi],al
     26c:	b3 0b                	mov    bl,0xb
     26e:	00 00                	add    BYTE PTR [eax],al
     270:	01 33                	add    DWORD PTR [ebx],esi
     272:	92                   	xchg   edx,eax
     273:	00 00                	add    BYTE PTR [eax],al
     275:	00 02                	add    BYTE PTR [edx],al
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	8d 01                	lea    eax,[ecx]
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 5b 00             	or     DWORD PTR [ebx+0x0],ebx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
     2b9:	9f                   	lahf   
     2ba:	09 0b                	or     DWORD PTR [ebx],ecx
     2bc:	01 00                	add    DWORD PTR [eax],eax
     2be:	00 02                	add    BYTE PTR [edx],al
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 88 60 00       	add    eax,0x608803
     2ca:	9f                   	lahf   
     2cb:	09 64 00 00          	or     DWORD PTR [eax+eax*1+0x0],esp
     2cf:	00 02                	add    BYTE PTR [edx],al
     2d1:	36                   	ss
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
     2db:	9f                   	lahf   
     2dc:	09 53 01             	or     DWORD PTR [ebx+0x1],edx
     2df:	00 00                	add    BYTE PTR [eax],al
     2e1:	02 37                	add    dh,BYTE PTR [edi]
     2e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
     2ec:	9f                   	lahf   
     2ed:	09 38                	or     DWORD PTR [eax],edi
     2ef:	00 00                	add    BYTE PTR [eax],al
     2f1:	00 03                	add    BYTE PTR [ebx],al
     2f3:	53                   	push   ebx
     2f4:	9b                   	fwait
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
     2fd:	9f                   	lahf   
     2fe:	05 04 92 00 00       	add    eax,0x9204
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	83 00 00             	add    DWORD PTR [eax],0x0
     314:	00 0c b0             	add    BYTE PTR [eax+esi*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 15 00 00 00 1c    	add    BYTE PTR ds:0x1c000000,dl
     31f:	01 00                	add    DWORD PTR [eax],eax
     321:	9f                   	lahf   
     322:	97                   	xchg   edi,eax
     323:	00 00                	add    BYTE PTR [eax],al
     325:	00 db                	add    bl,bl
     327:	01 00                	add    DWORD PTR [eax],eax
     329:	00 02                	add    BYTE PTR [edx],al
     32b:	01 06                	add    DWORD PTR [esi],eax
     32d:	75 00                	jne    32f <sysEnter_Vector-0x12fcd1>
     32f:	00 00                	add    BYTE PTR [eax],al
     331:	02 01                	add    al,BYTE PTR [ecx]
     333:	06                   	push   es
     334:	6e                   	outs   dx,BYTE PTR ds:[esi]
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     353:	00 02                	add    BYTE PTR [edx],al
     355:	02 07                	add    al,BYTE PTR [edi]
     357:	f0 00 00             	lock add BYTE PTR [eax],al
     35a:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	4e                   	dec    esi
     36a:	00 00                	add    BYTE PTR [eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	44                   	inc    esp
     371:	00 00                	add    BYTE PTR [eax],al
     373:	00 02                	add    BYTE PTR [edx],al
     375:	04 05                	add    al,0x5
     377:	05 00 00 00 02       	add    eax,0x2000000
     37c:	0c 04                	or     al,0x4
     37e:	3d 01 00 00 02       	cmp    eax,0x2000001
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     38c:	5a                   	pop    edx
     38d:	01 00                	add    DWORD PTR [eax],eax
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	04 07                	add    al,0x7
     393:	49                   	dec    ecx
     394:	00 00                	add    BYTE PTR [eax],al
     396:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     3b0:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	aa                   	stos   BYTE PTR es:[edi],al
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3d2:	01 00                	add    DWORD PTR [eax],eax
     3d4:	00 01                	add    BYTE PTR [ecx],al
     3d6:	2a 92 00 00 00 05    	sub    dl,BYTE PTR [edx+0x5000000]
     3dc:	03 94 60 00 9f 0a 63 	add    edx,DWORD PTR [eax+eiz*2+0x630a9f00]
     3e3:	68 00 01 2b 3a       	push   0x3a2b0100
     3e8:	00 00                	add    BYTE PTR [eax],al
     3ea:	00 01                	add    BYTE PTR [ecx],al
     3ec:	56                   	push   esi
     3ed:	00 0b                	add    BYTE PTR [ebx],cl
     3ef:	5b                   	pop    ebx
     3f0:	00 00                	add    BYTE PTR [eax],al
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	34 56                	xor    al,0x56
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
     3fe:	9f                   	lahf   
     3ff:	0b 0b                	or     ecx,DWORD PTR [ebx]
     401:	01 00                	add    DWORD PTR [eax],eax
     403:	00 02                	add    BYTE PTR [edx],al
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 88 60 00       	add    eax,0x608803
     40f:	9f                   	lahf   
     410:	0b 64 00 00          	or     esp,DWORD PTR [eax+eax*1+0x0]
     414:	00 02                	add    BYTE PTR [edx],al
     416:	36                   	ss
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
     420:	9f                   	lahf   
     421:	0b 53 01             	or     edx,DWORD PTR [ebx+0x1]
     424:	00 00                	add    BYTE PTR [eax],al
     426:	02 37                	add    dh,BYTE PTR [edi]
     428:	6f                   	outs   dx,DWORD PTR ds:[esi]
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
     431:	9f                   	lahf   
     432:	0b 38                	or     edi,DWORD PTR [eax]
     434:	00 00                	add    BYTE PTR [eax],al
     436:	00 03                	add    BYTE PTR [ebx],al
     438:	53                   	push   ebx
     439:	3e 01 00             	add    DWORD PTR ds:[eax],eax
     43c:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
     442:	9f                   	lahf   
     443:	05 04 92 00 00       	add    eax,0x9204
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	83 00 00             	add    DWORD PTR [eax],0x0
     459:	00 0c e0             	add    BYTE PTR [eax+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 15 00 00 00 b4    	add    BYTE PTR ds:0xb4000000,dl
     464:	01 00                	add    DWORD PTR [eax],eax
     466:	9f                   	lahf   
     467:	49                   	dec    ecx
     468:	02 00                	add    al,BYTE PTR [eax]
     46a:	00 b3 02 00 00 02    	add    BYTE PTR [ebx+0x2000002],dh
     470:	01 06                	add    DWORD PTR [esi],eax
     472:	75 00                	jne    474 <sysEnter_Vector-0x12fb8c>
     474:	00 00                	add    BYTE PTR [eax],al
     476:	02 01                	add    al,BYTE PTR [ecx]
     478:	06                   	push   es
     479:	6e                   	outs   dx,BYTE PTR ds:[esi]
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     498:	00 02                	add    BYTE PTR [edx],al
     49a:	02 07                	add    al,BYTE PTR [edi]
     49c:	f0 00 00             	lock add BYTE PTR [eax],al
     49f:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	4e                   	dec    esi
     4af:	00 00                	add    BYTE PTR [eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	44                   	inc    esp
     4b6:	00 00                	add    BYTE PTR [eax],al
     4b8:	00 02                	add    BYTE PTR [edx],al
     4ba:	04 05                	add    al,0x5
     4bc:	05 00 00 00 02       	add    eax,0x2000000
     4c1:	0c 04                	or     al,0x4
     4c3:	3d 01 00 00 02       	cmp    eax,0x2000001
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     4d1:	5a                   	pop    edx
     4d2:	01 00                	add    DWORD PTR [eax],eax
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	04 07                	add    al,0x7
     4d8:	49                   	dec    ecx
     4d9:	00 00                	add    BYTE PTR [eax],al
     4db:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	f7 01 00 00 01 09    	test   DWORD PTR [ecx],0x9010000
     4e9:	b4 01                	mov    ah,0x1
     4eb:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 9f    	add    DWORD PTR ds:0x9f00022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 ec    	add    dl,BYTE PTR [ecx-0x13f9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 9f       	and    eax,0x9f0002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a f2    	add    dl,BYTE PTR [ecx-0xdf5ff98]
     5ba:	08 00                	or     BYTE PTR [eax],al
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     5f6:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     5f9:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     5fc:	00 00                	add    BYTE PTR [eax],al
     5fe:	00 02                	add    BYTE PTR [edx],al
     600:	91                   	xchg   ecx,eax
     601:	70 00                	jo     603 <sysEnter_Vector-0x12f9fd>
     603:	00 0c 5b             	add    BYTE PTR [ebx+ebx*2],cl
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
     614:	9f                   	lahf   
     615:	0c 0b                	or     al,0xb
     617:	01 00                	add    DWORD PTR [eax],eax
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 88 60 00       	add    eax,0x608803
     625:	9f                   	lahf   
     626:	0c 64                	or     al,0x64
     628:	00 00                	add    BYTE PTR [eax],al
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
     636:	9f                   	lahf   
     637:	0c 53                	or     al,0x53
     639:	01 00                	add    DWORD PTR [eax],eax
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
     647:	9f                   	lahf   
     648:	0c 38                	or     al,0x38
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	53                   	push   ebx
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
     658:	9f                   	lahf   
     659:	05 04 92 00 00       	add    eax,0x9204
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	c6 01 00             	mov    BYTE PTR [ecx],0x0
     663:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	83 00 00             	add    DWORD PTR [eax],0x0
     66f:	00 0c 05 02 00 00 15 	add    BYTE PTR [eax*1+0x15000002],cl
     676:	00 00                	add    BYTE PTR [eax],al
     678:	00 00                	add    BYTE PTR [eax],al
     67a:	04 00                	add    al,0x0
     67c:	9f                   	lahf   
     67d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     67e:	01 00                	add    DWORD PTR [eax],eax
     680:	00 c7                	add    bh,al
     682:	03 00                	add    eax,DWORD PTR [eax]
     684:	00 02                	add    BYTE PTR [edx],al
     686:	01 06                	add    DWORD PTR [esi],eax
     688:	6e                   	outs   dx,BYTE PTR ds:[esi]
     689:	00 00                	add    BYTE PTR [eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     693:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     69a:	02 08                	add    cl,BYTE PTR [eax]
     69c:	05 00 00 00 00       	add    eax,0x0
     6a1:	02 01                	add    al,BYTE PTR [ecx]
     6a3:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     6a7:	00 02                	add    BYTE PTR [edx],al
     6a9:	02 07                	add    al,BYTE PTR [edi]
     6ab:	f0 00 00             	lock add BYTE PTR [eax],al
     6ae:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     6b1:	00 00                	add    BYTE PTR [eax],al
     6b3:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6b6:	5a                   	pop    edx
     6b7:	00 00                	add    BYTE PTR [eax],al
     6b9:	00 02                	add    BYTE PTR [edx],al
     6bb:	04 07                	add    al,0x7
     6bd:	4e                   	dec    esi
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	08 07                	or     BYTE PTR [edi],al
     6c4:	44                   	inc    esp
     6c5:	00 00                	add    BYTE PTR [eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	04 07                	add    al,0x7
     6cb:	5a                   	pop    edx
     6cc:	01 00                	add    DWORD PTR [eax],eax
     6ce:	00 02                	add    BYTE PTR [edx],al
     6d0:	01 06                	add    DWORD PTR [esi],eax
     6d2:	75 00                	jne    6d4 <sysEnter_Vector-0x12f92c>
     6d4:	00 00                	add    BYTE PTR [eax],al
     6d6:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6dd:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6e0:	3d 01 00 00 02       	cmp    eax,0x2000001
     6e5:	01 02                	add    DWORD PTR [edx],eax
     6e7:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     6ee:	49                   	dec    ecx
     6ef:	00 00                	add    BYTE PTR [eax],al
     6f1:	00 05 04 6f 00 00    	add    BYTE PTR ds:0x6f04,al
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	13 02                	adc    eax,DWORD PTR [edx]
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	01 0d 00 04 00 9f    	add    DWORD PTR ds:0x9f000400,ecx
     703:	ba 00 00 00 01       	mov    edx,0x1000000
     708:	9c                   	pushf  
     709:	f0 00 00             	lock add BYTE PTR [eax],al
     70c:	00 07                	add    BYTE PTR [edi],al
     70e:	78 00                	js     710 <sysEnter_Vector-0x12f8f0>
     710:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     716:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     71c:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     722:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     728:	64 00 01             	add    BYTE PTR fs:[ecx],al
     72b:	0f f0                	(bad)  
     72d:	00 00                	add    BYTE PTR [eax],al
     72f:	00 02                	add    BYTE PTR [edx],al
     731:	91                   	xchg   ecx,eax
     732:	66 09 45 02          	or     WORD PTR [ebp+0x2],ax
     736:	00 00                	add    BYTE PTR [eax],al
     738:	01 10                	add    DWORD PTR [eax],edx
     73a:	00 01                	add    BYTE PTR [ecx],al
     73c:	00 00                	add    BYTE PTR [eax],al
     73e:	02 91 63 09 55 02    	add    dl,BYTE PTR [ecx+0x2550963]
     744:	00 00                	add    BYTE PTR [eax],al
     746:	01 10                	add    DWORD PTR [eax],edx
     748:	00 01                	add    BYTE PTR [ecx],al
     74a:	00 00                	add    BYTE PTR [eax],al
     74c:	02 91 60 00 0a 6f    	add    dl,BYTE PTR [ecx+0x6f0a0060]
     752:	00 00                	add    BYTE PTR [eax],al
     754:	00 00                	add    BYTE PTR [eax],al
     756:	01 00                	add    DWORD PTR [eax],eax
     758:	00 0b                	add    BYTE PTR [ebx],cl
     75a:	68 00 00 00 09       	push   0x9000000
     75f:	00 0a                	add    BYTE PTR [edx],cl
     761:	6f                   	outs   dx,DWORD PTR ds:[esi]
     762:	00 00                	add    BYTE PTR [eax],al
     764:	00 10                	add    BYTE PTR [eax],dl
     766:	01 00                	add    DWORD PTR [eax],eax
     768:	00 0b                	add    BYTE PTR [ebx],cl
     76a:	68 00 00 00 02       	push   0x2000000
     76f:	00 0c 1c             	add    BYTE PTR [esp+ebx*1],cl
     772:	02 00                	add    al,BYTE PTR [eax]
     774:	00 01                	add    BYTE PTR [ecx],al
     776:	1d ba 04 00 9f       	sbb    eax,0x9f0004ba
     77b:	5a                   	pop    edx
     77c:	00 00                	add    BYTE PTR [eax],al
     77e:	00 01                	add    BYTE PTR [ecx],al
     780:	9c                   	pushf  
     781:	34 01                	xor    al,0x1
     783:	00 00                	add    BYTE PTR [eax],al
     785:	08 63 6d             	or     BYTE PTR [ebx+0x6d],ah
     788:	64 00 01             	add    BYTE PTR fs:[ecx],al
     78b:	1f                   	pop    ds
     78c:	f0 00 00             	lock add BYTE PTR [eax],al
     78f:	00 02                	add    BYTE PTR [edx],al
     791:	91                   	xchg   ecx,eax
     792:	66                   	data16
     793:	00 0c 2f             	add    BYTE PTR [edi+ebp*1],cl
     796:	02 00                	add    al,BYTE PTR [eax]
     798:	00 01                	add    BYTE PTR [ecx],al
     79a:	27                   	daa    
     79b:	14 05                	adc    al,0x5
     79d:	00 9f 5a 00 00 00    	add    BYTE PTR [edi+0x5a],bl
     7a3:	01 9c 58 01 00 00 08 	add    DWORD PTR [eax+ebx*2+0x8000001],ebx
     7aa:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     7ad:	00 01                	add    BYTE PTR [ecx],al
     7af:	29 f0                	sub    eax,esi
     7b1:	00 00                	add    BYTE PTR [eax],al
     7b3:	00 02                	add    BYTE PTR [edx],al
     7b5:	91                   	xchg   ecx,eax
     7b6:	66                   	data16
     7b7:	00 0d 5b 00 00 00    	add    BYTE PTR ds:0x5b,cl
     7bd:	02 34 4f             	add    dh,BYTE PTR [edi+ecx*2]
     7c0:	00 00                	add    BYTE PTR [eax],al
     7c2:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
     7c8:	9f                   	lahf   
     7c9:	0d 0b 01 00 00       	or     eax,0x10b
     7ce:	02 35 4f 00 00 00    	add    dh,BYTE PTR ds:0x4f
     7d4:	05 03 88 60 00       	add    eax,0x608803
     7d9:	9f                   	lahf   
     7da:	0d 64 00 00 00       	or     eax,0x64
     7df:	02 36                	add    dh,BYTE PTR [esi]
     7e1:	4f                   	dec    edi
     7e2:	00 00                	add    BYTE PTR [eax],al
     7e4:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
     7ea:	9f                   	lahf   
     7eb:	0d 53 01 00 00       	or     eax,0x153
     7f0:	02 37                	add    dh,BYTE PTR [edi]
     7f2:	76 00                	jbe    7f4 <sysEnter_Vector-0x12f80c>
     7f4:	00 00                	add    BYTE PTR [eax],al
     7f6:	05 03 90 60 00       	add    eax,0x609003
     7fb:	9f                   	lahf   
     7fc:	0d 38 00 00 00       	or     eax,0x38
     801:	03 53 ad             	add    edx,DWORD PTR [ebx-0x53]
     804:	01 00                	add    DWORD PTR [eax],eax
     806:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
     80c:	9f                   	lahf   
     80d:	05 04 92 00 00       	add    eax,0x9204
     812:	00 0d 4a 02 00 00    	add    BYTE PTR ds:0x24a,cl
     818:	01 0b                	add    DWORD PTR [ebx],ecx
     81a:	c4 01                	les    eax,FWORD PTR [ecx]
     81c:	00 00                	add    BYTE PTR [eax],al
     81e:	05 03 a0 59 00       	add    eax,0x59a003
     823:	9f                   	lahf   
     824:	0e                   	push   cs
     825:	00 01                	add    BYTE PTR [ecx],al
     827:	00 00                	add    BYTE PTR [eax],al
     829:	00 b2 01 00 00 04    	add    BYTE PTR [edx+0x4000001],dh
     82f:	00 3d 03 00 00 04    	add    BYTE PTR ds:0x4000003,bh
     835:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
     83b:	76 02                	jbe    83f <sysEnter_Vector-0x12f7c1>
     83d:	00 00                	add    BYTE PTR [eax],al
     83f:	15 00 00 00 70       	adc    eax,0x70000000
     844:	05 00 9f 6b 02       	add    eax,0x26b9f00
     849:	00 00                	add    BYTE PTR [eax],al
     84b:	99                   	cdq    
     84c:	04 00                	add    al,0x0
     84e:	00 02                	add    BYTE PTR [edx],al
     850:	01 06                	add    DWORD PTR [esi],eax
     852:	75 00                	jne    854 <sysEnter_Vector-0x12f7ac>
     854:	00 00                	add    BYTE PTR [eax],al
     856:	02 01                	add    al,BYTE PTR [ecx]
     858:	06                   	push   es
     859:	6e                   	outs   dx,BYTE PTR ds:[esi]
     85a:	00 00                	add    BYTE PTR [eax],al
     85c:	00 02                	add    BYTE PTR [edx],al
     85e:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     864:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     86b:	02 08                	add    cl,BYTE PTR [eax]
     86d:	05 00 00 00 00       	add    eax,0x0
     872:	02 01                	add    al,BYTE PTR [ecx]
     874:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     878:	00 02                	add    BYTE PTR [edx],al
     87a:	02 07                	add    al,BYTE PTR [edi]
     87c:	f0 00 00             	lock add BYTE PTR [eax],al
     87f:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     882:	00 00                	add    BYTE PTR [eax],al
     884:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     887:	61                   	popa   
     888:	00 00                	add    BYTE PTR [eax],al
     88a:	00 02                	add    BYTE PTR [edx],al
     88c:	04 07                	add    al,0x7
     88e:	4e                   	dec    esi
     88f:	00 00                	add    BYTE PTR [eax],al
     891:	00 02                	add    BYTE PTR [edx],al
     893:	08 07                	or     BYTE PTR [edi],al
     895:	44                   	inc    esp
     896:	00 00                	add    BYTE PTR [eax],al
     898:	00 02                	add    BYTE PTR [edx],al
     89a:	04 05                	add    al,0x5
     89c:	05 00 00 00 02       	add    eax,0x2000000
     8a1:	0c 04                	or     al,0x4
     8a3:	3d 01 00 00 02       	cmp    eax,0x2000001
     8a8:	01 02                	add    DWORD PTR [edx],eax
     8aa:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     8b1:	5a                   	pop    edx
     8b2:	01 00                	add    DWORD PTR [eax],eax
     8b4:	00 02                	add    BYTE PTR [edx],al
     8b6:	04 07                	add    al,0x7
     8b8:	49                   	dec    ecx
     8b9:	00 00                	add    BYTE PTR [eax],al
     8bb:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     8c1:	00 06                	add    BYTE PTR [esi],al
     8c3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8c4:	02 00                	add    al,BYTE PTR [eax]
     8c6:	00 01                	add    BYTE PTR [ecx],al
     8c8:	09 3a                	or     DWORD PTR [edx],edi
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	00 70 05             	add    BYTE PTR [eax+0x5],dh
     8cf:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     8d5:	01 9c e6 00 00 00 07 	add    DWORD PTR [esi+eiz*8+0x7000000],ebx
     8dc:	88 02                	mov    BYTE PTR [edx],al
     8de:	00 00                	add    BYTE PTR [eax],al
     8e0:	01 09                	add    DWORD PTR [ecx],ecx
     8e2:	92                   	xchg   edx,eax
     8e3:	00 00                	add    BYTE PTR [eax],al
     8e5:	00 02                	add    BYTE PTR [edx],al
     8e7:	91                   	xchg   ecx,eax
     8e8:	00 07                	add    BYTE PTR [edi],al
     8ea:	90                   	nop
     8eb:	02 00                	add    al,BYTE PTR [eax]
     8ed:	00 01                	add    BYTE PTR [ecx],al
     8ef:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     8f5:	91                   	xchg   ecx,eax
     8f6:	04 08                	add    al,0x8
     8f8:	82                   	(bad)  
     8f9:	05 00 9f 8e 00       	add    eax,0x8e9f00
     8fe:	00 00                	add    BYTE PTR [eax],al
     900:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     903:	74 00                	je     905 <sysEnter_Vector-0x12f6fb>
     905:	01 0b                	add    DWORD PTR [ebx],ecx
     907:	3a 00                	cmp    al,BYTE PTR [eax]
     909:	00 00                	add    BYTE PTR [eax],al
     90b:	02 91 6c 00 00 0a    	add    dl,BYTE PTR [ecx+0xa00006c]
     911:	68 02 00 00 01       	push   0x1000002
     916:	14 1a                	adc    al,0x1a
     918:	06                   	push   es
     919:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     91f:	01 9c 5a 01 00 00 07 	add    DWORD PTR [edx+ebx*2+0x7000001],ebx
     926:	88 02                	mov    BYTE PTR [edx],al
     928:	00 00                	add    BYTE PTR [eax],al
     92a:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     92d:	00 00                	add    BYTE PTR [eax],al
     92f:	00 02                	add    BYTE PTR [edx],al
     931:	91                   	xchg   ecx,eax
     932:	00 07                	add    BYTE PTR [edi],al
     934:	90                   	nop
     935:	02 00                	add    al,BYTE PTR [eax]
     937:	00 01                	add    BYTE PTR [ecx],al
     939:	14 92                	adc    al,0x92
     93b:	00 00                	add    BYTE PTR [eax],al
     93d:	00 02                	add    BYTE PTR [edx],al
     93f:	91                   	xchg   ecx,eax
     940:	04 0b                	add    al,0xb
     942:	5a                   	pop    edx
     943:	02 00                	add    al,BYTE PTR [eax]
     945:	00 01                	add    BYTE PTR [ecx],al
     947:	16                   	push   ss
     948:	56                   	push   esi
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	00 02                	add    BYTE PTR [edx],al
     94d:	91                   	xchg   ecx,eax
     94e:	6c                   	ins    BYTE PTR es:[edi],dx
     94f:	0c 33                	or     al,0x33
     951:	06                   	push   es
     952:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     958:	41                   	inc    ecx
     959:	01 00                	add    DWORD PTR [eax],eax
     95b:	00 09                	add    BYTE PTR [ecx],cl
     95d:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     960:	00 01                	add    BYTE PTR [ecx],al
     962:	18 3a                	sbb    BYTE PTR [edx],bh
     964:	00 00                	add    BYTE PTR [eax],al
     966:	00 02                	add    BYTE PTR [edx],al
     968:	91                   	xchg   ecx,eax
     969:	68 00 08 1e 07       	push   0x71e0800
     96e:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     974:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     977:	74 00                	je     979 <sysEnter_Vector-0x12f687>
     979:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     97c:	00 00                	add    BYTE PTR [eax],al
     97e:	00 02                	add    BYTE PTR [edx],al
     980:	91                   	xchg   ecx,eax
     981:	64 00 00             	add    BYTE PTR fs:[eax],al
     984:	0d 5b 00 00 00       	or     eax,0x5b
     989:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     98c:	00 00                	add    BYTE PTR [eax],al
     98e:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
     994:	9f                   	lahf   
     995:	0d 0b 01 00 00       	or     eax,0x10b
     99a:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     9a0:	05 03 88 60 00       	add    eax,0x608803
     9a5:	9f                   	lahf   
     9a6:	0d 64 00 00 00       	or     eax,0x64
     9ab:	02 36                	add    dh,BYTE PTR [esi]
     9ad:	56                   	push   esi
     9ae:	00 00                	add    BYTE PTR [eax],al
     9b0:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
     9b6:	9f                   	lahf   
     9b7:	0d 53 01 00 00       	or     eax,0x153
     9bc:	02 37                	add    dh,BYTE PTR [edi]
     9be:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9bf:	00 00                	add    BYTE PTR [eax],al
     9c1:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
     9c7:	9f                   	lahf   
     9c8:	0d 38 00 00 00       	or     eax,0x38
     9cd:	03 53 af             	add    edx,DWORD PTR [ebx-0x51]
     9d0:	01 00                	add    DWORD PTR [eax],eax
     9d2:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
     9d8:	9f                   	lahf   
     9d9:	05 04 92 00 00       	add    eax,0x9204
     9de:	00 00                	add    BYTE PTR [eax],al
     9e0:	e5 03                	in     eax,0x3
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	04 00                	add    al,0x0
     9e6:	05 04 00 00 04       	add    eax,0x4000004
     9eb:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
     9f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9f2:	04 00                	add    al,0x0
     9f4:	00 15 00 00 00 dc    	add    BYTE PTR ds:0xdc000000,dl
     9fa:	07                   	pop    es
     9fb:	00 9f 56 01 00 00    	add    BYTE PTR [edi+0x156],bl
     a01:	a3 05 00 00 02       	mov    ds:0x2000005,eax
     a06:	01 06                	add    DWORD PTR [esi],eax
     a08:	75 00                	jne    a0a <sysEnter_Vector-0x12f5f6>
     a0a:	00 00                	add    BYTE PTR [eax],al
     a0c:	02 01                	add    al,BYTE PTR [ecx]
     a0e:	06                   	push   es
     a0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a10:	00 00                	add    BYTE PTR [eax],al
     a12:	00 02                	add    BYTE PTR [edx],al
     a14:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     a1a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     a21:	02 08                	add    cl,BYTE PTR [eax]
     a23:	05 00 00 00 00       	add    eax,0x0
     a28:	02 01                	add    al,BYTE PTR [ecx]
     a2a:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     a2e:	00 02                	add    BYTE PTR [edx],al
     a30:	02 07                	add    al,BYTE PTR [edi]
     a32:	f0 00 00             	lock add BYTE PTR [eax],al
     a35:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     a38:	00 00                	add    BYTE PTR [eax],al
     a3a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     a3d:	61                   	popa   
     a3e:	00 00                	add    BYTE PTR [eax],al
     a40:	00 02                	add    BYTE PTR [edx],al
     a42:	04 07                	add    al,0x7
     a44:	4e                   	dec    esi
     a45:	00 00                	add    BYTE PTR [eax],al
     a47:	00 02                	add    BYTE PTR [edx],al
     a49:	08 07                	or     BYTE PTR [edi],al
     a4b:	44                   	inc    esp
     a4c:	00 00                	add    BYTE PTR [eax],al
     a4e:	00 02                	add    BYTE PTR [edx],al
     a50:	04 05                	add    al,0x5
     a52:	05 00 00 00 02       	add    eax,0x2000000
     a57:	0c 04                	or     al,0x4
     a59:	3d 01 00 00 05       	cmp    eax,0x5000001
     a5e:	04 83                	add    al,0x83
     a60:	00 00                	add    BYTE PTR [eax],al
     a62:	00 06                	add    BYTE PTR [esi],al
     a64:	25 00 00 00 02       	and    eax,0x2000000
     a69:	01 02                	add    DWORD PTR [edx],eax
     a6b:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     a72:	5a                   	pop    edx
     a73:	01 00                	add    DWORD PTR [eax],eax
     a75:	00 07                	add    BYTE PTR [edi],al
     a77:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     a78:	03 00                	add    eax,DWORD PTR [eax]
     a7a:	00 04 61             	add    BYTE PTR [ecx+eiz*2],al
     a7d:	00 00                	add    BYTE PTR [eax],al
     a7f:	00 05 15 64 01 00    	add    BYTE PTR ds:0x16415,al
     a85:	00 08                	add    BYTE PTR [eax],cl
     a87:	5d                   	pop    ebp
     a88:	03 00                	add    eax,DWORD PTR [eax]
     a8a:	00 00                	add    BYTE PTR [eax],al
     a8c:	08 aa 04 00 00 01    	or     BYTE PTR [edx+0x1000004],ch
     a92:	08 ce                	or     dh,cl
     a94:	02 00                	add    al,BYTE PTR [eax]
     a96:	00 02                	add    BYTE PTR [edx],al
     a98:	08 9c 04 00 00 03 08 	or     BYTE PTR [esp+eax*1+0x8030000],bl
     a9f:	05 03 00 00 04       	add    eax,0x4000003
     aa4:	08 f7                	or     bh,dh
     aa6:	02 00                	add    al,BYTE PTR [eax]
     aa8:	00 05 08 7a 04 00    	add    BYTE PTR ds:0x47a08,al
     aae:	00 06                	add    BYTE PTR [esi],al
     ab0:	08 ed                	or     ch,ch
     ab2:	03 00                	add    eax,DWORD PTR [eax]
     ab4:	00 07                	add    BYTE PTR [edi],al
     ab6:	08 34 03             	or     BYTE PTR [ebx+eax*1],dh
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	08 08                	or     BYTE PTR [eax],cl
     abd:	e0 03                	loopne ac2 <sysEnter_Vector-0x12f53e>
     abf:	00 00                	add    BYTE PTR [eax],al
     ac1:	09 08                	or     DWORD PTR [eax],ecx
     ac3:	fa                   	cli    
     ac4:	03 00                	add    eax,DWORD PTR [eax]
     ac6:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     ac9:	25 04 00 00 59       	and    eax,0x59000004
     ace:	08 96 02 00 00 61    	or     BYTE PTR [esi+0x61000002],dl
     ad4:	08 bb 03 00 00 97    	or     BYTE PTR [ebx-0x68fffffd],bh
     ada:	09 7d 03             	or     DWORD PTR [ebp+0x3],edi
     add:	00 00                	add    BYTE PTR [eax],al
     adf:	63 01                	arpl   WORD PTR [ecx],ax
     ae1:	09 18                	or     DWORD PTR [eax],ebx
     ae3:	04 00                	add    al,0x0
     ae5:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
     ae9:	49                   	dec    ecx
     aea:	04 00                	add    al,0x0
     aec:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     aef:	09 ba 02 00 00 66    	or     DWORD PTR [edx+0x66000002],edi
     af5:	01 09                	add    DWORD PTR [ecx],ecx
     af7:	1f                   	pop    ds
     af8:	03 00                	add    eax,DWORD PTR [eax]
     afa:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     afd:	09 12                	or     DWORD PTR [edx],edx
     aff:	03 00                	add    eax,DWORD PTR [eax]
     b01:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     b04:	09 bd 04 00 00 69    	or     DWORD PTR [ebp+0x69000004],edi
     b0a:	01 09                	add    DWORD PTR [ecx],ecx
     b0c:	a9 02 00 00 70       	test   eax,0x70000002
     b11:	01 09                	add    DWORD PTR [ecx],ecx
     b13:	e7 02                	out    0x2,eax
     b15:	00 00                	add    BYTE PTR [eax],al
     b17:	71 01                	jno    b1a <sysEnter_Vector-0x12f4e6>
     b19:	09 8e 04 00 00 00    	or     DWORD PTR [esi+0x4],ecx
     b1f:	03 09                	add    ecx,DWORD PTR [ecx]
     b21:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
     b24:	00 01                	add    BYTE PTR [ecx],al
     b26:	03 09                	add    ecx,DWORD PTR [ecx]
     b28:	94                   	xchg   esp,eax
     b29:	03 00                	add    eax,DWORD PTR [eax]
     b2b:	00 02                	add    BYTE PTR [edx],al
     b2d:	03 09                	add    ecx,DWORD PTR [ecx]
     b2f:	6d                   	ins    DWORD PTR es:[edi],dx
     b30:	03 00                	add    eax,DWORD PTR [eax]
     b32:	00 03                	add    BYTE PTR [ebx],al
     b34:	03 09                	add    ecx,DWORD PTR [ecx]
     b36:	cf                   	iret   
     b37:	03 00                	add    eax,DWORD PTR [eax]
     b39:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     b3c:	09 39                	or     DWORD PTR [ecx],edi
     b3e:	04 00                	add    al,0x0
     b40:	00 05 03 00 0a 04    	add    BYTE PTR ds:0x40a0003,al
     b46:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     b49:	49                   	dec    ecx
     b4a:	00 00                	add    BYTE PTR [eax],al
     b4c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     b52:	00 0b                	add    BYTE PTR [ebx],cl
     b54:	cc                   	int3   
     b55:	04 00                	add    al,0x0
     b57:	00 01                	add    BYTE PTR [ecx],al
     b59:	0a 3a                	or     bh,BYTE PTR [edx]
     b5b:	00 00                	add    BYTE PTR [eax],al
     b5d:	00 dc                	add    ah,bl
     b5f:	07                   	pop    es
     b60:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
     b66:	01 9c b7 01 00 00 0c 	add    DWORD PTR [edi+esi*4+0xc000001],ebx
     b6d:	e2 02                	loop   b71 <sysEnter_Vector-0x12f48f>
     b6f:	00 00                	add    BYTE PTR [eax],al
     b71:	01 0a                	add    DWORD PTR [edx],ecx
     b73:	6d                   	ins    DWORD PTR es:[edi],dx
     b74:	01 00                	add    DWORD PTR [eax],eax
     b76:	00 02                	add    BYTE PTR [edx],al
     b78:	91                   	xchg   ecx,eax
     b79:	00 0c 68             	add    BYTE PTR [eax+ebp*2],cl
     b7c:	04 00                	add    al,0x0
     b7e:	00 01                	add    BYTE PTR [ecx],al
     b80:	0a 6d 01             	or     ch,BYTE PTR [ebp+0x1]
     b83:	00 00                	add    BYTE PTR [eax],al
     b85:	02 91 04 0c 32 04    	add    dl,BYTE PTR [ecx+0x4320c04]
     b8b:	00 00                	add    BYTE PTR [eax],al
     b8d:	01 0a                	add    DWORD PTR [edx],ecx
     b8f:	3a 00                	cmp    al,BYTE PTR [eax]
     b91:	00 00                	add    BYTE PTR [eax],al
     b93:	02 91 08 00 0b b6    	add    dl,BYTE PTR [ecx-0x49f4fff8]
     b99:	03 00                	add    eax,DWORD PTR [eax]
     b9b:	00 01                	add    BYTE PTR [ecx],al
     b9d:	0f 64 01             	pcmpgtb mm0,QWORD PTR [ecx]
     ba0:	00 00                	add    BYTE PTR [eax],al
     ba2:	0d 08 00 9f 2d       	or     eax,0x2d9f0008
     ba7:	00 00                	add    BYTE PTR [eax],al
     ba9:	00 01                	add    BYTE PTR [ecx],al
     bab:	9c                   	pushf  
     bac:	ed                   	in     eax,dx
     bad:	01 00                	add    DWORD PTR [eax],eax
     baf:	00 0c e2             	add    BYTE PTR [edx+eiz*8],cl
     bb2:	02 00                	add    al,BYTE PTR [eax]
     bb4:	00 01                	add    BYTE PTR [ecx],al
     bb6:	0f 6d                	(bad)  
     bb8:	01 00                	add    DWORD PTR [eax],eax
     bba:	00 02                	add    BYTE PTR [edx],al
     bbc:	91                   	xchg   ecx,eax
     bbd:	00 0c 63             	add    BYTE PTR [ebx+eiz*2],cl
     bc0:	04 00                	add    al,0x0
     bc2:	00 01                	add    BYTE PTR [ecx],al
     bc4:	0f 7d                	(bad)  
     bc6:	00 00                	add    BYTE PTR [eax],al
     bc8:	00 02                	add    BYTE PTR [edx],al
     bca:	91                   	xchg   ecx,eax
     bcb:	04 00                	add    al,0x0
     bcd:	0d c8 02 00 00       	or     eax,0x2c8
     bd2:	01 14 3a             	add    DWORD PTR [edx+edi*1],edx
     bd5:	08 00                	or     BYTE PTR [eax],al
     bd7:	9f                   	lahf   
     bd8:	2a 00                	sub    al,BYTE PTR [eax]
     bda:	00 00                	add    BYTE PTR [eax],al
     bdc:	01 9c 11 02 00 00 0c 	add    DWORD PTR [ecx+edx*1+0xc000002],ebx
     be3:	87 04 00             	xchg   DWORD PTR [eax+eax*1],eax
     be6:	00 01                	add    BYTE PTR [ecx],al
     be8:	14 64                	adc    al,0x64
     bea:	01 00                	add    DWORD PTR [eax],eax
     bec:	00 02                	add    BYTE PTR [edx],al
     bee:	91                   	xchg   ecx,eax
     bef:	00 00                	add    BYTE PTR [eax],al
     bf1:	0b 5e 04             	or     ebx,DWORD PTR [esi+0x4]
     bf4:	00 00                	add    BYTE PTR [eax],al
     bf6:	01 19                	add    DWORD PTR [ecx],ebx
     bf8:	3a 00                	cmp    al,BYTE PTR [eax]
     bfa:	00 00                	add    BYTE PTR [eax],al
     bfc:	64 08 00             	or     BYTE PTR fs:[eax],al
     bff:	9f                   	lahf   
     c00:	35 00 00 00 01       	xor    eax,0x1000000
     c05:	9c                   	pushf  
     c06:	63 02                	arpl   WORD PTR [edx],ax
     c08:	00 00                	add    BYTE PTR [eax],al
     c0a:	0c 87                	or     al,0x87
     c0c:	04 00                	add    al,0x0
     c0e:	00 01                	add    BYTE PTR [ecx],al
     c10:	19 64 01 00          	sbb    DWORD PTR [ecx+eax*1+0x0],esp
     c14:	00 02                	add    BYTE PTR [edx],al
     c16:	91                   	xchg   ecx,eax
     c17:	00 0c 68             	add    BYTE PTR [eax+ebp*2],cl
     c1a:	04 00                	add    al,0x0
     c1c:	00 01                	add    BYTE PTR [ecx],al
     c1e:	19 64 01 00          	sbb    DWORD PTR [ecx+eax*1+0x0],esp
     c22:	00 02                	add    BYTE PTR [edx],al
     c24:	91                   	xchg   ecx,eax
     c25:	04 0c                	add    al,0xc
     c27:	3e                   	ds
     c28:	06                   	push   es
     c29:	00 00                	add    BYTE PTR [eax],al
     c2b:	01 19                	add    DWORD PTR [ecx],ebx
     c2d:	3a 00                	cmp    al,BYTE PTR [eax]
     c2f:	00 00                	add    BYTE PTR [eax],al
     c31:	02 91 08 0c 57 04    	add    dl,BYTE PTR [ecx+0x4570c08]
     c37:	00 00                	add    BYTE PTR [eax],al
     c39:	01 19                	add    DWORD PTR [ecx],ebx
     c3b:	3a 00                	cmp    al,BYTE PTR [eax]
     c3d:	00 00                	add    BYTE PTR [eax],al
     c3f:	02 91 0c 00 0b 4a    	add    dl,BYTE PTR [ecx+0x4a0b000c]
     c45:	03 00                	add    eax,DWORD PTR [eax]
     c47:	00 01                	add    BYTE PTR [ecx],al
     c49:	1e                   	push   ds
     c4a:	3a 00                	cmp    al,BYTE PTR [eax]
     c4c:	00 00                	add    BYTE PTR [eax],al
     c4e:	99                   	cdq    
     c4f:	08 00                	or     BYTE PTR [eax],al
     c51:	9f                   	lahf   
     c52:	35 00 00 00 01       	xor    eax,0x1000000
     c57:	9c                   	pushf  
     c58:	b5 02                	mov    ch,0x2
     c5a:	00 00                	add    BYTE PTR [eax],al
     c5c:	0c 87                	or     al,0x87
     c5e:	04 00                	add    al,0x0
     c60:	00 01                	add    BYTE PTR [ecx],al
     c62:	1e                   	push   ds
     c63:	64 01 00             	add    DWORD PTR fs:[eax],eax
     c66:	00 02                	add    BYTE PTR [edx],al
     c68:	91                   	xchg   ecx,eax
     c69:	00 0c 68             	add    BYTE PTR [eax+ebp*2],cl
     c6c:	04 00                	add    al,0x0
     c6e:	00 01                	add    BYTE PTR [ecx],al
     c70:	1e                   	push   ds
     c71:	64 01 00             	add    DWORD PTR fs:[eax],eax
     c74:	00 02                	add    BYTE PTR [edx],al
     c76:	91                   	xchg   ecx,eax
     c77:	04 0c                	add    al,0xc
     c79:	3e                   	ds
     c7a:	06                   	push   es
     c7b:	00 00                	add    BYTE PTR [eax],al
     c7d:	01 1e                	add    DWORD PTR [esi],ebx
     c7f:	3a 00                	cmp    al,BYTE PTR [eax]
     c81:	00 00                	add    BYTE PTR [eax],al
     c83:	02 91 08 0c 57 04    	add    dl,BYTE PTR [ecx+0x4570c08]
     c89:	00 00                	add    BYTE PTR [eax],al
     c8b:	01 1e                	add    DWORD PTR [esi],ebx
     c8d:	3a 00                	cmp    al,BYTE PTR [eax]
     c8f:	00 00                	add    BYTE PTR [eax],al
     c91:	02 91 0c 00 0b b0    	add    dl,BYTE PTR [ecx-0x4ff4fff4]
     c97:	03 00                	add    eax,DWORD PTR [eax]
     c99:	00 01                	add    BYTE PTR [ecx],al
     c9b:	23 3a                	and    edi,DWORD PTR [edx]
     c9d:	00 00                	add    BYTE PTR [eax],al
     c9f:	00 ce                	add    dh,cl
     ca1:	08 00                	or     BYTE PTR [eax],al
     ca3:	9f                   	lahf   
     ca4:	26 00 00             	add    BYTE PTR es:[eax],al
     ca7:	00 01                	add    BYTE PTR [ecx],al
     ca9:	9c                   	pushf  
     caa:	07                   	pop    es
     cab:	03 00                	add    eax,DWORD PTR [eax]
     cad:	00 0c 87             	add    BYTE PTR [edi+eax*4],cl
     cb0:	04 00                	add    al,0x0
     cb2:	00 01                	add    BYTE PTR [ecx],al
     cb4:	23 64 01 00          	and    esp,DWORD PTR [ecx+eax*1+0x0]
     cb8:	00 02                	add    BYTE PTR [edx],al
     cba:	91                   	xchg   ecx,eax
     cbb:	00 0c 68             	add    BYTE PTR [eax+ebp*2],cl
     cbe:	04 00                	add    al,0x0
     cc0:	00 01                	add    BYTE PTR [ecx],al
     cc2:	23 64 01 00          	and    esp,DWORD PTR [ecx+eax*1+0x0]
     cc6:	00 02                	add    BYTE PTR [edx],al
     cc8:	91                   	xchg   ecx,eax
     cc9:	04 0c                	add    al,0xc
     ccb:	3e                   	ds
     ccc:	06                   	push   es
     ccd:	00 00                	add    BYTE PTR [eax],al
     ccf:	01 23                	add    DWORD PTR [ebx],esp
     cd1:	3a 00                	cmp    al,BYTE PTR [eax]
     cd3:	00 00                	add    BYTE PTR [eax],al
     cd5:	02 91 08 0c 57 04    	add    dl,BYTE PTR [ecx+0x4570c08]
     cdb:	00 00                	add    BYTE PTR [eax],al
     cdd:	01 23                	add    DWORD PTR [ebx],esp
     cdf:	3a 00                	cmp    al,BYTE PTR [eax]
     ce1:	00 00                	add    BYTE PTR [eax],al
     ce3:	02 91 0c 00 0b 51    	add    dl,BYTE PTR [ecx+0x510b000c]
     ce9:	03 00                	add    eax,DWORD PTR [eax]
     ceb:	00 01                	add    BYTE PTR [ecx],al
     ced:	28 3a                	sub    BYTE PTR [edx],bh
     cef:	00 00                	add    BYTE PTR [eax],al
     cf1:	00 f4                	add    ah,dh
     cf3:	08 00                	or     BYTE PTR [eax],al
     cf5:	9f                   	lahf   
     cf6:	2e 00 00             	add    BYTE PTR cs:[eax],al
     cf9:	00 01                	add    BYTE PTR [ecx],al
     cfb:	9c                   	pushf  
     cfc:	4b                   	dec    ebx
     cfd:	03 00                	add    eax,DWORD PTR [eax]
     cff:	00 0c 87             	add    BYTE PTR [edi+eax*4],cl
     d02:	04 00                	add    al,0x0
     d04:	00 01                	add    BYTE PTR [ecx],al
     d06:	28 64 01 00          	sub    BYTE PTR [ecx+eax*1+0x0],ah
     d0a:	00 02                	add    BYTE PTR [edx],al
     d0c:	91                   	xchg   ecx,eax
     d0d:	00 0c 41             	add    BYTE PTR [ecx+eax*2],cl
     d10:	03 00                	add    eax,DWORD PTR [eax]
     d12:	00 01                	add    BYTE PTR [ecx],al
     d14:	28 6f 00             	sub    BYTE PTR [edi+0x0],ch
     d17:	00 00                	add    BYTE PTR [eax],al
     d19:	02 91 04 0c 56 03    	add    dl,BYTE PTR [ecx+0x3560c04]
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	01 28                	add    DWORD PTR [eax],ebp
     d23:	3a 00                	cmp    al,BYTE PTR [eax]
     d25:	00 00                	add    BYTE PTR [eax],al
     d27:	02 91 08 00 0e a0    	add    dl,BYTE PTR [ecx-0x5ff1fff8]
     d2d:	03 00                	add    eax,DWORD PTR [eax]
     d2f:	00 01                	add    BYTE PTR [ecx],al
     d31:	2d 6d 01 00 00       	sub    eax,0x16d
     d36:	22 09                	and    cl,BYTE PTR [ecx]
     d38:	00 9f 10 00 00 00    	add    BYTE PTR [edi+0x10],bl
     d3e:	01 9c 8d 03 00 00 0f 	add    DWORD PTR [ebp+ecx*4+0xf000003],ebx
     d45:	73 74                	jae    dbb <sysEnter_Vector-0x12f245>
     d47:	72 00                	jb     d49 <sysEnter_Vector-0x12f2b7>
     d49:	01 2d 6d 01 00 00    	add    DWORD PTR ds:0x16d,ebp
     d4f:	02 91 00 0f 6e 00    	add    dl,BYTE PTR [ecx+0x6e0f00]
     d55:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     d5b:	02 91 04 0c db 02    	add    dl,BYTE PTR [ecx+0x2db0c04]
     d61:	00 00                	add    BYTE PTR [eax],al
     d63:	01 2d 64 01 00 00    	add    DWORD PTR ds:0x164,ebp
     d69:	02 91 08 00 10 5b    	add    dl,BYTE PTR [ecx+0x5b100008]
     d6f:	00 00                	add    BYTE PTR [eax],al
     d71:	00 02                	add    BYTE PTR [edx],al
     d73:	34 56                	xor    al,0x56
     d75:	00 00                	add    BYTE PTR [eax],al
     d77:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
     d7d:	9f                   	lahf   
     d7e:	10 0b                	adc    BYTE PTR [ebx],cl
     d80:	01 00                	add    DWORD PTR [eax],eax
     d82:	00 02                	add    BYTE PTR [edx],al
     d84:	35 56 00 00 00       	xor    eax,0x56
     d89:	05 03 88 60 00       	add    eax,0x608803
     d8e:	9f                   	lahf   
     d8f:	10 64 00 00          	adc    BYTE PTR [eax+eax*1+0x0],ah
     d93:	00 02                	add    BYTE PTR [edx],al
     d95:	36                   	ss
     d96:	56                   	push   esi
     d97:	00 00                	add    BYTE PTR [eax],al
     d99:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
     d9f:	9f                   	lahf   
     da0:	10 53 01             	adc    BYTE PTR [ebx+0x1],dl
     da3:	00 00                	add    BYTE PTR [eax],al
     da5:	02 37                	add    dh,BYTE PTR [edi]
     da7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     da8:	00 00                	add    BYTE PTR [eax],al
     daa:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
     db0:	9f                   	lahf   
     db1:	10 38                	adc    BYTE PTR [eax],bh
     db3:	00 00                	add    BYTE PTR [eax],al
     db5:	00 03                	add    BYTE PTR [ebx],al
     db7:	53                   	push   ebx
     db8:	e2 03                	loop   dbd <sysEnter_Vector-0x12f243>
     dba:	00 00                	add    BYTE PTR [eax],al
     dbc:	05 03 8c 60 00       	add    eax,0x608c03
     dc1:	9f                   	lahf   
     dc2:	05 04 6d 01 00       	add    eax,0x16d04
     dc7:	00 00                	add    BYTE PTR [eax],al
     dc9:	c1 02 00             	rol    DWORD PTR [edx],0x0
     dcc:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     dcf:	f7 04 00 00 04 01 83 	test   DWORD PTR [eax+eax*1],0x83010400
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	00 0c d3             	add    BYTE PTR [ebx+edx*8],cl
     ddb:	04 00                	add    al,0x0
     ddd:	00 15 00 00 00 34    	add    BYTE PTR ds:0x34000000,dl
     de3:	09 00                	or     DWORD PTR [eax],eax
     de5:	9f                   	lahf   
     de6:	66 01 00             	add    WORD PTR [eax],ax
     de9:	00 aa 06 00 00 02    	add    BYTE PTR [edx+0x2000006],ch
     def:	01 06                	add    DWORD PTR [esi],eax
     df1:	75 00                	jne    df3 <sysEnter_Vector-0x12f20d>
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	02 01                	add    al,BYTE PTR [ecx]
     df7:	06                   	push   es
     df8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     df9:	00 00                	add    BYTE PTR [eax],al
     dfb:	00 02                	add    BYTE PTR [edx],al
     dfd:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     e03:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     e0a:	02 08                	add    cl,BYTE PTR [eax]
     e0c:	05 00 00 00 00       	add    eax,0x0
     e11:	02 01                	add    al,BYTE PTR [ecx]
     e13:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     e17:	00 02                	add    BYTE PTR [edx],al
     e19:	02 07                	add    al,BYTE PTR [edi]
     e1b:	f0 00 00             	lock add BYTE PTR [eax],al
     e1e:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     e21:	00 00                	add    BYTE PTR [eax],al
     e23:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     e26:	61                   	popa   
     e27:	00 00                	add    BYTE PTR [eax],al
     e29:	00 02                	add    BYTE PTR [edx],al
     e2b:	04 07                	add    al,0x7
     e2d:	4e                   	dec    esi
     e2e:	00 00                	add    BYTE PTR [eax],al
     e30:	00 02                	add    BYTE PTR [edx],al
     e32:	08 07                	or     BYTE PTR [edi],al
     e34:	44                   	inc    esp
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	00 02                	add    BYTE PTR [edx],al
     e39:	04 05                	add    al,0x5
     e3b:	05 00 00 00 02       	add    eax,0x2000000
     e40:	0c 04                	or     al,0x4
     e42:	3d 01 00 00 02       	cmp    eax,0x2000001
     e47:	01 02                	add    DWORD PTR [edx],eax
     e49:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     e50:	5a                   	pop    edx
     e51:	01 00                	add    DWORD PTR [eax],eax
     e53:	00 05 a6 03 00 00    	add    BYTE PTR ds:0x3a6,al
     e59:	04 61                	add    al,0x61
     e5b:	00 00                	add    BYTE PTR [eax],al
     e5d:	00 05 15 59 01 00    	add    BYTE PTR ds:0x15915,al
     e63:	00 06                	add    BYTE PTR [esi],al
     e65:	5d                   	pop    ebp
     e66:	03 00                	add    eax,DWORD PTR [eax]
     e68:	00 00                	add    BYTE PTR [eax],al
     e6a:	06                   	push   es
     e6b:	aa                   	stos   BYTE PTR es:[edi],al
     e6c:	04 00                	add    al,0x0
     e6e:	00 01                	add    BYTE PTR [ecx],al
     e70:	06                   	push   es
     e71:	ce                   	into   
     e72:	02 00                	add    al,BYTE PTR [eax]
     e74:	00 02                	add    BYTE PTR [edx],al
     e76:	06                   	push   es
     e77:	9c                   	pushf  
     e78:	04 00                	add    al,0x0
     e7a:	00 03                	add    BYTE PTR [ebx],al
     e7c:	06                   	push   es
     e7d:	05 03 00 00 04       	add    eax,0x4000003
     e82:	06                   	push   es
     e83:	f7 02 00 00 05 06    	test   DWORD PTR [edx],0x6050000
     e89:	7a 04                	jp     e8f <sysEnter_Vector-0x12f171>
     e8b:	00 00                	add    BYTE PTR [eax],al
     e8d:	06                   	push   es
     e8e:	06                   	push   es
     e8f:	ed                   	in     eax,dx
     e90:	03 00                	add    eax,DWORD PTR [eax]
     e92:	00 07                	add    BYTE PTR [edi],al
     e94:	06                   	push   es
     e95:	34 03                	xor    al,0x3
     e97:	00 00                	add    BYTE PTR [eax],al
     e99:	08 06                	or     BYTE PTR [esi],al
     e9b:	e0 03                	loopne ea0 <sysEnter_Vector-0x12f160>
     e9d:	00 00                	add    BYTE PTR [eax],al
     e9f:	09 06                	or     DWORD PTR [esi],eax
     ea1:	fa                   	cli    
     ea2:	03 00                	add    eax,DWORD PTR [eax]
     ea4:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     ea7:	25 04 00 00 59       	and    eax,0x59000004
     eac:	06                   	push   es
     ead:	96                   	xchg   esi,eax
     eae:	02 00                	add    al,BYTE PTR [eax]
     eb0:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     eb3:	bb 03 00 00 97       	mov    ebx,0x97000003
     eb8:	07                   	pop    es
     eb9:	7d 03                	jge    ebe <sysEnter_Vector-0x12f142>
     ebb:	00 00                	add    BYTE PTR [eax],al
     ebd:	63 01                	arpl   WORD PTR [ecx],ax
     ebf:	07                   	pop    es
     ec0:	18 04 00             	sbb    BYTE PTR [eax+eax*1],al
     ec3:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
     ec7:	49                   	dec    ecx
     ec8:	04 00                	add    al,0x0
     eca:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     ecd:	07                   	pop    es
     ece:	ba 02 00 00 66       	mov    edx,0x66000002
     ed3:	01 07                	add    DWORD PTR [edi],eax
     ed5:	1f                   	pop    ds
     ed6:	03 00                	add    eax,DWORD PTR [eax]
     ed8:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     edb:	07                   	pop    es
     edc:	12 03                	adc    al,BYTE PTR [ebx]
     ede:	00 00                	add    BYTE PTR [eax],al
     ee0:	68 01 07 bd 04       	push   0x4bd0701
     ee5:	00 00                	add    BYTE PTR [eax],al
     ee7:	69 01 07 a9 02 00    	imul   eax,DWORD PTR [ecx],0x2a907
     eed:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     ef0:	07                   	pop    es
     ef1:	e7 02                	out    0x2,eax
     ef3:	00 00                	add    BYTE PTR [eax],al
     ef5:	71 01                	jno    ef8 <sysEnter_Vector-0x12f108>
     ef7:	07                   	pop    es
     ef8:	8e 04 00             	mov    es,WORD PTR [eax+eax*1]
     efb:	00 00                	add    BYTE PTR [eax],al
     efd:	03 07                	add    eax,DWORD PTR [edi]
     eff:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
     f02:	00 01                	add    BYTE PTR [ecx],al
     f04:	03 07                	add    eax,DWORD PTR [edi]
     f06:	94                   	xchg   esp,eax
     f07:	03 00                	add    eax,DWORD PTR [eax]
     f09:	00 02                	add    BYTE PTR [edx],al
     f0b:	03 07                	add    eax,DWORD PTR [edi]
     f0d:	6d                   	ins    DWORD PTR es:[edi],dx
     f0e:	03 00                	add    eax,DWORD PTR [eax]
     f10:	00 03                	add    BYTE PTR [ebx],al
     f12:	03 07                	add    eax,DWORD PTR [edi]
     f14:	cf                   	iret   
     f15:	03 00                	add    eax,DWORD PTR [eax]
     f17:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f1a:	07                   	pop    es
     f1b:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
     f1e:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     f24:	07                   	pop    es
     f25:	49                   	dec    ecx
     f26:	00 00                	add    BYTE PTR [eax],al
     f28:	00 08                	add    BYTE PTR [eax],cl
     f2a:	04 25                	add    al,0x25
     f2c:	00 00                	add    BYTE PTR [eax],al
     f2e:	00 09                	add    BYTE PTR [ecx],cl
     f30:	07                   	pop    es
     f31:	05 00 00 01 0f       	add    eax,0xf010000
     f36:	34 09                	xor    al,0x9
     f38:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
     f3e:	01 9c 8a 01 00 00 0a 	add    DWORD PTR [edx+ecx*4+0xa000001],ebx
     f45:	68 04 00 00 01       	push   0x1000004
     f4a:	0f 60 01             	punpcklbw mm0,DWORD PTR [ecx]
     f4d:	00 00                	add    BYTE PTR [eax],al
     f4f:	02 91 00 00 09 fd    	add    dl,BYTE PTR [ecx-0x2f70000]
     f55:	04 00                	add    al,0x0
     f57:	00 01                	add    BYTE PTR [ecx],al
     f59:	14 5a                	adc    al,0x5a
     f5b:	09 00                	or     DWORD PTR [eax],eax
     f5d:	9f                   	lahf   
     f5e:	43                   	inc    ebx
     f5f:	00 00                	add    BYTE PTR [eax],al
     f61:	00 01                	add    BYTE PTR [ecx],al
     f63:	9c                   	pushf  
     f64:	ba 01 00 00 0b       	mov    edx,0xb000001
     f69:	63 00                	arpl   WORD PTR [eax],ax
     f6b:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     f72:	91                   	xchg   ecx,eax
     f73:	60                   	pusha  
     f74:	0c 68                	or     al,0x68
     f76:	04 00                	add    al,0x0
     f78:	00 01                	add    BYTE PTR [ecx],al
     f7a:	16                   	push   ss
     f7b:	ba 01 00 00 02       	mov    edx,0x2000001
     f80:	91                   	xchg   ecx,eax
     f81:	72 00                	jb     f83 <sysEnter_Vector-0x12f07d>
     f83:	0d 25 00 00 00       	or     eax,0x25
     f88:	ca 01 00             	retf   0x1
     f8b:	00 0e                	add    BYTE PTR [esi],cl
     f8d:	84 00                	test   BYTE PTR [eax],al
     f8f:	00 00                	add    BYTE PTR [eax],al
     f91:	01 00                	add    DWORD PTR [eax],eax
     f93:	0f 0c                	(bad)  
     f95:	05 00 00 01 1f       	add    eax,0x1f010000
     f9a:	25 00 00 00 9d       	and    eax,0x9d000000
     f9f:	09 00                	or     DWORD PTR [eax],eax
     fa1:	9f                   	lahf   
     fa2:	43                   	inc    ebx
     fa3:	00 00                	add    BYTE PTR [eax],al
     fa5:	00 01                	add    BYTE PTR [ecx],al
     fa7:	9c                   	pushf  
     fa8:	f0 01 00             	lock add DWORD PTR [eax],eax
     fab:	00 10                	add    BYTE PTR [eax],dl
     fad:	63 00                	arpl   WORD PTR [eax],ax
     faf:	01 21                	add    DWORD PTR [ecx],esp
     fb1:	25 00 00 00 02       	and    eax,0x2000000
     fb6:	91                   	xchg   ecx,eax
     fb7:	73 00                	jae    fb9 <sysEnter_Vector-0x12f047>
     fb9:	11 a1 03 00 00 01    	adc    DWORD PTR [ecx+0x1000003],esp
     fbf:	2d 3a 00 00 00       	sub    eax,0x3a
     fc4:	e0 09                	loopne fcf <sysEnter_Vector-0x12f031>
     fc6:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
     fcc:	01 9c 69 02 00 00 0a 	add    DWORD PTR [ecx+ebp*2+0xa000002],ebx
     fd3:	68 04 00 00 01       	push   0x1000004
     fd8:	2d 60 01 00 00       	sub    eax,0x160
     fdd:	02 91 00 0a ec 04    	add    dl,BYTE PTR [ecx+0x4ec0a00]
     fe3:	00 00                	add    BYTE PTR [eax],al
     fe5:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     feb:	02 91 04 0a db 02    	add    dl,BYTE PTR [ecx+0x2db0a04]
     ff1:	00 00                	add    BYTE PTR [eax],al
     ff3:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     ff9:	02 91 08 0c e5 04    	add    dl,BYTE PTR [ecx+0x4e50c08]
     fff:	00 00                	add    BYTE PTR [eax],al
    1001:	01 2f                	add    DWORD PTR [edi],ebp
    1003:	25 00 00 00 02       	and    eax,0x2000000
    1008:	91                   	xchg   ecx,eax
    1009:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
    100c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    100e:	00 01                	add    BYTE PTR [ecx],al
    1010:	30 3a                	xor    BYTE PTR [edx],bh
    1012:	00 00                	add    BYTE PTR [eax],al
    1014:	00 02                	add    BYTE PTR [edx],al
    1016:	91                   	xchg   ecx,eax
    1017:	6c                   	ins    BYTE PTR es:[edi],dx
    1018:	0c 02                	or     al,0x2
    101a:	05 00 00 01 31       	add    eax,0x31010000
    101f:	ba 01 00 00 02       	mov    edx,0x2000001
    1024:	91                   	xchg   ecx,eax
    1025:	69 12 f3 04 00 00    	imul   edx,DWORD PTR [edx],0x4f3
    102b:	01 36                	add    DWORD PTR [esi],esi
    102d:	1d 0a 00 9f 00       	sbb    eax,0x9f000a
    1032:	13 5b 00             	adc    ebx,DWORD PTR [ebx+0x0]
    1035:	00 00                	add    BYTE PTR [eax],al
    1037:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    103a:	00 00                	add    BYTE PTR [eax],al
    103c:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    1042:	9f                   	lahf   
    1043:	13 0b                	adc    ecx,DWORD PTR [ebx]
    1045:	01 00                	add    DWORD PTR [eax],eax
    1047:	00 02                	add    BYTE PTR [edx],al
    1049:	35 56 00 00 00       	xor    eax,0x56
    104e:	05 03 88 60 00       	add    eax,0x608803
    1053:	9f                   	lahf   
    1054:	13 64 00 00          	adc    esp,DWORD PTR [eax+eax*1+0x0]
    1058:	00 02                	add    BYTE PTR [edx],al
    105a:	36                   	ss
    105b:	56                   	push   esi
    105c:	00 00                	add    BYTE PTR [eax],al
    105e:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    1064:	9f                   	lahf   
    1065:	13 53 01             	adc    edx,DWORD PTR [ebx+0x1]
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	02 37                	add    dh,BYTE PTR [edi]
    106c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    106d:	00 00                	add    BYTE PTR [eax],al
    106f:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    1075:	9f                   	lahf   
    1076:	13 38                	adc    edi,DWORD PTR [eax]
    1078:	00 00                	add    BYTE PTR [eax],al
    107a:	00 03                	add    BYTE PTR [ebx],al
    107c:	53                   	push   ebx
    107d:	be 02 00 00 05       	mov    esi,0x5000002
    1082:	03 8c 60 00 9f 08 04 	add    ecx,DWORD PTR [eax+eiz*2+0x4089f00]
    1089:	60                   	pusha  
    108a:	01 00                	add    DWORD PTR [eax],eax
    108c:	00 00                	add    BYTE PTR [eax],al
    108e:	42                   	inc    edx
    108f:	0a 00                	or     al,BYTE PTR [eax]
    1091:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1094:	16                   	push   ss
    1095:	06                   	push   es
    1096:	00 00                	add    BYTE PTR [eax],al
    1098:	04 01                	add    al,0x1
    109a:	83 00 00             	add    DWORD PTR [eax],0x0
    109d:	00 0c d9             	add    BYTE PTR [ecx+ebx*8],cl
    10a0:	06                   	push   es
    10a1:	00 00                	add    BYTE PTR [eax],al
    10a3:	15 00 00 00 9c       	adc    eax,0x9c000000
    10a8:	0a 00                	or     al,BYTE PTR [eax]
    10aa:	9f                   	lahf   
    10ab:	e9 0b 00 00 d7       	jmp    d70010bb <tmbuf+0x37ffafdb>
    10b0:	07                   	pop    es
    10b1:	00 00                	add    BYTE PTR [eax],al
    10b3:	02 5b 06             	add    bl,BYTE PTR [ebx+0x6]
    10b6:	00 00                	add    BYTE PTR [eax],al
    10b8:	02 28                	add    ch,BYTE PTR [eax]
    10ba:	30 00                	xor    BYTE PTR [eax],al
    10bc:	00 00                	add    BYTE PTR [eax],al
    10be:	03 04 83             	add    eax,DWORD PTR [ebx+eax*4]
    10c1:	05 00 00 3a 00       	add    eax,0x3a0000
    10c6:	00 00                	add    BYTE PTR [eax],al
    10c8:	04 01                	add    al,0x1
    10ca:	06                   	push   es
    10cb:	75 00                	jne    10cd <sysEnter_Vector-0x12ef33>
    10cd:	00 00                	add    BYTE PTR [eax],al
    10cf:	02 62 06             	add    ah,BYTE PTR [edx+0x6]
    10d2:	00 00                	add    BYTE PTR [eax],al
    10d4:	02 62 25             	add    ah,BYTE PTR [edx+0x25]
    10d7:	00 00                	add    BYTE PTR [eax],al
    10d9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    10dc:	06                   	push   es
    10dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10de:	00 00                	add    BYTE PTR [eax],al
    10e0:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    10e3:	05 49 01 00 00       	add    eax,0x149
    10e8:	05 04 05 69 6e       	add    eax,0x6e690504
    10ed:	74 00                	je     10ef <sysEnter_Vector-0x12ef11>
    10ef:	04 08                	add    al,0x8
    10f1:	05 00 00 00 00       	add    eax,0x0
    10f6:	04 01                	add    al,0x1
    10f8:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    10fc:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    10ff:	07                   	pop    es
    1100:	f0 00 00             	lock add BYTE PTR [eax],al
    1103:	00 02                	add    BYTE PTR [edx],al
    1105:	7a 00                	jp     1107 <sysEnter_Vector-0x12eef9>
    1107:	00 00                	add    BYTE PTR [eax],al
    1109:	03 34 81             	add    esi,DWORD PTR [ecx+eax*4]
    110c:	00 00                	add    BYTE PTR [eax],al
    110e:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    1111:	07                   	pop    es
    1112:	4e                   	dec    esi
    1113:	00 00                	add    BYTE PTR [eax],al
    1115:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    1118:	07                   	pop    es
    1119:	44                   	inc    esp
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	00 02                	add    BYTE PTR [edx],al
    111e:	35 05 00 00 03       	xor    eax,0x3000005
    1123:	56                   	push   esi
    1124:	81 00 00 00 02 2e    	add    DWORD PTR [eax],0x2e020000
    112a:	05 00 00 04 d8       	add    eax,0xd8040000
    112f:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    1135:	05 05 00 00 00       	add    eax,0x5
    113a:	04 0c                	add    al,0xc
    113c:	04 3d                	add    al,0x3d
    113e:	01 00                	add    DWORD PTR [eax],eax
    1140:	00 06                	add    BYTE PTR [esi],al
    1142:	04 b9                	add    al,0xb9
    1144:	00 00                	add    BYTE PTR [eax],al
    1146:	00 07                	add    BYTE PTR [edi],al
    1148:	3a 00                	cmp    al,BYTE PTR [eax]
    114a:	00 00                	add    BYTE PTR [eax],al
    114c:	04 01                	add    al,0x1
    114e:	02 ea                	add    ch,dl
    1150:	00 00                	add    BYTE PTR [eax],al
    1152:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    1155:	07                   	pop    es
    1156:	5a                   	pop    edx
    1157:	01 00                	add    DWORD PTR [eax],eax
    1159:	00 08                	add    BYTE PTR [eax],cl
    115b:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    115c:	03 00                	add    eax,DWORD PTR [eax]
    115e:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
    1161:	00 00                	add    BYTE PTR [eax],al
    1163:	00 05 15 9a 01 00    	add    BYTE PTR ds:0x19a15,al
    1169:	00 09                	add    BYTE PTR [ecx],cl
    116b:	5d                   	pop    ebp
    116c:	03 00                	add    eax,DWORD PTR [eax]
    116e:	00 00                	add    BYTE PTR [eax],al
    1170:	09 aa 04 00 00 01    	or     DWORD PTR [edx+0x1000004],ebp
    1176:	09 ce                	or     esi,ecx
    1178:	02 00                	add    al,BYTE PTR [eax]
    117a:	00 02                	add    BYTE PTR [edx],al
    117c:	09 9c 04 00 00 03 09 	or     DWORD PTR [esp+eax*1+0x9030000],ebx
    1183:	05 03 00 00 04       	add    eax,0x4000003
    1188:	09 f7                	or     edi,esi
    118a:	02 00                	add    al,BYTE PTR [eax]
    118c:	00 05 09 7a 04 00    	add    BYTE PTR ds:0x47a09,al
    1192:	00 06                	add    BYTE PTR [esi],al
    1194:	09 ed                	or     ebp,ebp
    1196:	03 00                	add    eax,DWORD PTR [eax]
    1198:	00 07                	add    BYTE PTR [edi],al
    119a:	09 34 03             	or     DWORD PTR [ebx+eax*1],esi
    119d:	00 00                	add    BYTE PTR [eax],al
    119f:	08 09                	or     BYTE PTR [ecx],cl
    11a1:	e0 03                	loopne 11a6 <sysEnter_Vector-0x12ee5a>
    11a3:	00 00                	add    BYTE PTR [eax],al
    11a5:	09 09                	or     DWORD PTR [ecx],ecx
    11a7:	fa                   	cli    
    11a8:	03 00                	add    eax,DWORD PTR [eax]
    11aa:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
    11ad:	25 04 00 00 59       	and    eax,0x59000004
    11b2:	09 96 02 00 00 61    	or     DWORD PTR [esi+0x61000002],edx
    11b8:	09 bb 03 00 00 97    	or     DWORD PTR [ebx-0x68fffffd],edi
    11be:	0a 7d 03             	or     bh,BYTE PTR [ebp+0x3]
    11c1:	00 00                	add    BYTE PTR [eax],al
    11c3:	63 01                	arpl   WORD PTR [ecx],ax
    11c5:	0a 18                	or     bl,BYTE PTR [eax]
    11c7:	04 00                	add    al,0x0
    11c9:	00 64 01 0a          	add    BYTE PTR [ecx+eax*1+0xa],ah
    11cd:	49                   	dec    ecx
    11ce:	04 00                	add    al,0x0
    11d0:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    11d3:	0a ba 02 00 00 66    	or     bh,BYTE PTR [edx+0x66000002]
    11d9:	01 0a                	add    DWORD PTR [edx],ecx
    11db:	1f                   	pop    ds
    11dc:	03 00                	add    eax,DWORD PTR [eax]
    11de:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    11e1:	0a 12                	or     dl,BYTE PTR [edx]
    11e3:	03 00                	add    eax,DWORD PTR [eax]
    11e5:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    11e8:	0a bd 04 00 00 69    	or     bh,BYTE PTR [ebp+0x69000004]
    11ee:	01 0a                	add    DWORD PTR [edx],ecx
    11f0:	a9 02 00 00 70       	test   eax,0x70000002
    11f5:	01 0a                	add    DWORD PTR [edx],ecx
    11f7:	e7 02                	out    0x2,eax
    11f9:	00 00                	add    BYTE PTR [eax],al
    11fb:	71 01                	jno    11fe <sysEnter_Vector-0x12ee02>
    11fd:	0a 8e 04 00 00 00    	or     cl,BYTE PTR [esi+0x4]
    1203:	03 0a                	add    ecx,DWORD PTR [edx]
    1205:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
    1208:	00 01                	add    BYTE PTR [ecx],al
    120a:	03 0a                	add    ecx,DWORD PTR [edx]
    120c:	94                   	xchg   esp,eax
    120d:	03 00                	add    eax,DWORD PTR [eax]
    120f:	00 02                	add    BYTE PTR [edx],al
    1211:	03 0a                	add    ecx,DWORD PTR [edx]
    1213:	6d                   	ins    DWORD PTR es:[edi],dx
    1214:	03 00                	add    eax,DWORD PTR [eax]
    1216:	00 03                	add    BYTE PTR [ebx],al
    1218:	03 0a                	add    ecx,DWORD PTR [edx]
    121a:	cf                   	iret   
    121b:	03 00                	add    eax,DWORD PTR [eax]
    121d:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1220:	0a 39                	or     bh,BYTE PTR [ecx]
    1222:	04 00                	add    al,0x0
    1224:	00 05 03 00 0b 04    	add    BYTE PTR ds:0x40b0003,al
    122a:	04 04                	add    al,0x4
    122c:	07                   	pop    es
    122d:	49                   	dec    ecx
    122e:	00 00                	add    BYTE PTR [eax],al
    1230:	00 06                	add    BYTE PTR [esi],al
    1232:	04 3a                	add    al,0x3a
    1234:	00 00                	add    BYTE PTR [eax],al
    1236:	00 0c 25 06 00 00 01 	add    BYTE PTR [eiz*1+0x1000006],cl
    123d:	11 5a 00             	adc    DWORD PTR [edx+0x0],ebx
    1240:	00 00                	add    BYTE PTR [eax],al
    1242:	9c                   	pushf  
    1243:	0a 00                	or     al,BYTE PTR [eax]
    1245:	9f                   	lahf   
    1246:	3a 00                	cmp    al,BYTE PTR [eax]
    1248:	00 00                	add    BYTE PTR [eax],al
    124a:	01 9c 17 02 00 00 0d 	add    DWORD PTR [edi+edx*1+0xd000002],ebx
    1251:	cf                   	iret   
    1252:	05 00 00 01 11       	add    eax,0x11010000
    1257:	5a                   	pop    edx
    1258:	00 00                	add    BYTE PTR [eax],al
    125a:	00 02                	add    BYTE PTR [edx],al
    125c:	91                   	xchg   ecx,eax
    125d:	00 0d 72 06 00 00    	add    BYTE PTR ds:0x672,cl
    1263:	01 11                	add    DWORD PTR [ecx],edx
    1265:	76 00                	jbe    1267 <sysEnter_Vector-0x12ed99>
    1267:	00 00                	add    BYTE PTR [eax],al
    1269:	02 91 04 0d 79 06    	add    dl,BYTE PTR [ecx+0x6790d04]
    126f:	00 00                	add    BYTE PTR [eax],al
    1271:	01 11                	add    DWORD PTR [ecx],edx
    1273:	76 00                	jbe    1275 <sysEnter_Vector-0x12ed8b>
    1275:	00 00                	add    BYTE PTR [eax],al
    1277:	02 91 08 0d 80 06    	add    dl,BYTE PTR [ecx+0x6800d08]
    127d:	00 00                	add    BYTE PTR [eax],al
    127f:	01 11                	add    DWORD PTR [ecx],edx
    1281:	76 00                	jbe    1283 <sysEnter_Vector-0x12ed7d>
    1283:	00 00                	add    BYTE PTR [eax],al
    1285:	02 91 0c 0d 87 06    	add    dl,BYTE PTR [ecx+0x6870d0c]
    128b:	00 00                	add    BYTE PTR [eax],al
    128d:	01 11                	add    DWORD PTR [ecx],edx
    128f:	76 00                	jbe    1291 <sysEnter_Vector-0x12ed6f>
    1291:	00 00                	add    BYTE PTR [eax],al
    1293:	02 91 10 0e 14 05    	add    dl,BYTE PTR [ecx+0x5140e10]
    1299:	00 00                	add    BYTE PTR [eax],al
    129b:	01 13                	add    DWORD PTR [ebx],edx
    129d:	5a                   	pop    edx
    129e:	00 00                	add    BYTE PTR [eax],al
    12a0:	00 02                	add    BYTE PTR [edx],al
    12a2:	91                   	xchg   ecx,eax
    12a3:	6c                   	ins    BYTE PTR es:[edi],dx
    12a4:	00 0c 19             	add    BYTE PTR [ecx+ebx*1],cl
    12a7:	06                   	push   es
    12a8:	00 00                	add    BYTE PTR [eax],al
    12aa:	01 18                	add    DWORD PTR [eax],ebx
    12ac:	5a                   	pop    edx
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	00 d6                	add    dh,dl
    12b1:	0a 00                	or     al,BYTE PTR [eax]
    12b3:	9f                   	lahf   
    12b4:	3c 00                	cmp    al,0x0
    12b6:	00 00                	add    BYTE PTR [eax],al
    12b8:	01 9c 77 02 00 00 0d 	add    DWORD PTR [edi+esi*2+0xd000002],ebx
    12bf:	cf                   	iret   
    12c0:	05 00 00 01 18       	add    eax,0x18010000
    12c5:	5a                   	pop    edx
    12c6:	00 00                	add    BYTE PTR [eax],al
    12c8:	00 02                	add    BYTE PTR [edx],al
    12ca:	91                   	xchg   ecx,eax
    12cb:	00 0d 72 06 00 00    	add    BYTE PTR ds:0x672,cl
    12d1:	01 18                	add    DWORD PTR [eax],ebx
    12d3:	76 00                	jbe    12d5 <sysEnter_Vector-0x12ed2b>
    12d5:	00 00                	add    BYTE PTR [eax],al
    12d7:	02 91 04 0d 79 06    	add    dl,BYTE PTR [ecx+0x6790d04]
    12dd:	00 00                	add    BYTE PTR [eax],al
    12df:	01 18                	add    DWORD PTR [eax],ebx
    12e1:	76 00                	jbe    12e3 <sysEnter_Vector-0x12ed1d>
    12e3:	00 00                	add    BYTE PTR [eax],al
    12e5:	02 91 08 0d 80 06    	add    dl,BYTE PTR [ecx+0x6800d08]
    12eb:	00 00                	add    BYTE PTR [eax],al
    12ed:	01 18                	add    DWORD PTR [eax],ebx
    12ef:	76 00                	jbe    12f1 <sysEnter_Vector-0x12ed0f>
    12f1:	00 00                	add    BYTE PTR [eax],al
    12f3:	02 91 0c 0e 14 05    	add    dl,BYTE PTR [ecx+0x5140e0c]
    12f9:	00 00                	add    BYTE PTR [eax],al
    12fb:	01 1a                	add    DWORD PTR [edx],ebx
    12fd:	5a                   	pop    edx
    12fe:	00 00                	add    BYTE PTR [eax],al
    1300:	00 02                	add    BYTE PTR [edx],al
    1302:	91                   	xchg   ecx,eax
    1303:	6c                   	ins    BYTE PTR es:[edi],dx
    1304:	00 0c 0d 06 00 00 01 	add    BYTE PTR [ecx*1+0x1000006],cl
    130b:	1f                   	pop    ds
    130c:	5a                   	pop    edx
    130d:	00 00                	add    BYTE PTR [eax],al
    130f:	00 12                	add    BYTE PTR [edx],dl
    1311:	0b 00                	or     eax,DWORD PTR [eax]
    1313:	9f                   	lahf   
    1314:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1317:	00 01                	add    BYTE PTR [ecx],al
    1319:	9c                   	pushf  
    131a:	c9                   	leave  
    131b:	02 00                	add    al,BYTE PTR [eax]
    131d:	00 0d cf 05 00 00    	add    BYTE PTR ds:0x5cf,cl
    1323:	01 1f                	add    DWORD PTR [edi],ebx
    1325:	5a                   	pop    edx
    1326:	00 00                	add    BYTE PTR [eax],al
    1328:	00 02                	add    BYTE PTR [edx],al
    132a:	91                   	xchg   ecx,eax
    132b:	00 0d 72 06 00 00    	add    BYTE PTR ds:0x672,cl
    1331:	01 1f                	add    DWORD PTR [edi],ebx
    1333:	76 00                	jbe    1335 <sysEnter_Vector-0x12eccb>
    1335:	00 00                	add    BYTE PTR [eax],al
    1337:	02 91 04 0d 79 06    	add    dl,BYTE PTR [ecx+0x6790d04]
    133d:	00 00                	add    BYTE PTR [eax],al
    133f:	01 1f                	add    DWORD PTR [edi],ebx
    1341:	76 00                	jbe    1343 <sysEnter_Vector-0x12ecbd>
    1343:	00 00                	add    BYTE PTR [eax],al
    1345:	02 91 08 0e 14 05    	add    dl,BYTE PTR [ecx+0x5140e08]
    134b:	00 00                	add    BYTE PTR [eax],al
    134d:	01 21                	add    DWORD PTR [ecx],esp
    134f:	5a                   	pop    edx
    1350:	00 00                	add    BYTE PTR [eax],al
    1352:	00 02                	add    BYTE PTR [edx],al
    1354:	91                   	xchg   ecx,eax
    1355:	6c                   	ins    BYTE PTR es:[edi],dx
    1356:	00 0c 01             	add    BYTE PTR [ecx+eax*1],cl
    1359:	06                   	push   es
    135a:	00 00                	add    BYTE PTR [eax],al
    135c:	01 26                	add    DWORD PTR [esi],esp
    135e:	5a                   	pop    edx
    135f:	00 00                	add    BYTE PTR [eax],al
    1361:	00 50 0b             	add    BYTE PTR [eax+0xb],dl
    1364:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    136a:	01 9c 0d 03 00 00 0d 	add    DWORD PTR [ebp+ecx*1+0xd000003],ebx
    1371:	cf                   	iret   
    1372:	05 00 00 01 26       	add    eax,0x26010000
    1377:	5a                   	pop    edx
    1378:	00 00                	add    BYTE PTR [eax],al
    137a:	00 02                	add    BYTE PTR [edx],al
    137c:	91                   	xchg   ecx,eax
    137d:	00 0d 72 06 00 00    	add    BYTE PTR ds:0x672,cl
    1383:	01 26                	add    DWORD PTR [esi],esp
    1385:	76 00                	jbe    1387 <sysEnter_Vector-0x12ec79>
    1387:	00 00                	add    BYTE PTR [eax],al
    1389:	02 91 04 0e 14 05    	add    dl,BYTE PTR [ecx+0x5140e04]
    138f:	00 00                	add    BYTE PTR [eax],al
    1391:	01 28                	add    DWORD PTR [eax],ebp
    1393:	5a                   	pop    edx
    1394:	00 00                	add    BYTE PTR [eax],al
    1396:	00 02                	add    BYTE PTR [edx],al
    1398:	91                   	xchg   ecx,eax
    1399:	6c                   	ins    BYTE PTR es:[edi],dx
    139a:	00 0c f5 05 00 00 01 	add    BYTE PTR [esi*8+0x1000005],cl
    13a1:	2d 5a 00 00 00       	sub    eax,0x5a
    13a6:	90                   	nop
    13a7:	0b 00                	or     eax,DWORD PTR [eax]
    13a9:	9f                   	lahf   
    13aa:	42                   	inc    edx
    13ab:	00 00                	add    BYTE PTR [eax],al
    13ad:	00 01                	add    BYTE PTR [ecx],al
    13af:	9c                   	pushf  
    13b0:	43                   	inc    ebx
    13b1:	03 00                	add    eax,DWORD PTR [eax]
    13b3:	00 0d cf 05 00 00    	add    BYTE PTR ds:0x5cf,cl
    13b9:	01 2d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebp
    13bf:	02 91 00 0e 14 05    	add    dl,BYTE PTR [ecx+0x5140e00]
    13c5:	00 00                	add    BYTE PTR [eax],al
    13c7:	01 2f                	add    DWORD PTR [edi],ebp
    13c9:	5a                   	pop    edx
    13ca:	00 00                	add    BYTE PTR [eax],al
    13cc:	00 02                	add    BYTE PTR [edx],al
    13ce:	91                   	xchg   ecx,eax
    13cf:	6c                   	ins    BYTE PTR es:[edi],dx
    13d0:	00 0f                	add    BYTE PTR [edi],cl
    13d2:	73 05                	jae    13d9 <sysEnter_Vector-0x12ec27>
    13d4:	00 00                	add    BYTE PTR [eax],al
    13d6:	01 34 d2             	add    DWORD PTR [edx+edx*8],esi
    13d9:	0b 00                	or     eax,DWORD PTR [eax]
    13db:	9f                   	lahf   
    13dc:	bf 00 00 00 01       	mov    edi,0x1000000
    13e1:	9c                   	pushf  
    13e2:	10 06                	adc    BYTE PTR [esi],al
    13e4:	07                   	pop    es
    13e5:	00 00                	add    BYTE PTR [eax],al
    13e7:	01 46 91             	add    DWORD PTR [esi-0x6f],eax
    13ea:	0c 00                	or     al,0x0
    13ec:	9f                   	lahf   
    13ed:	1f                   	pop    ds
    13ee:	00 00                	add    BYTE PTR [eax],al
    13f0:	00 01                	add    BYTE PTR [ecx],al
    13f2:	9c                   	pushf  
    13f3:	11 1b                	adc    DWORD PTR [ebx],ebx
    13f5:	05 00 00 01 4b       	add    eax,0x4b010000
    13fa:	5a                   	pop    edx
    13fb:	00 00                	add    BYTE PTR [eax],al
    13fd:	00 b0 0c 00 9f 59    	add    BYTE PTR [eax+0x599f000c],dh
    1403:	00 00                	add    BYTE PTR [eax],al
    1405:	00 01                	add    BYTE PTR [ecx],al
    1407:	9c                   	pushf  
    1408:	aa                   	stos   BYTE PTR es:[edi],al
    1409:	03 00                	add    eax,DWORD PTR [eax]
    140b:	00 0d 9a 06 00 00    	add    BYTE PTR ds:0x69a,cl
    1411:	01 4b b3             	add    DWORD PTR [ebx-0x4d],ecx
    1414:	00 00                	add    BYTE PTR [eax],al
    1416:	00 02                	add    BYTE PTR [edx],al
    1418:	91                   	xchg   ecx,eax
    1419:	00 12                	add    BYTE PTR [edx],dl
    141b:	0e                   	push   cs
    141c:	3c 07                	cmp    al,0x7
    141e:	00 00                	add    BYTE PTR [eax],al
    1420:	01 4d 41             	add    DWORD PTR [ebp+0x41],ecx
    1423:	00 00                	add    BYTE PTR [eax],al
    1425:	00 02                	add    BYTE PTR [edx],al
    1427:	91                   	xchg   ecx,eax
    1428:	68 0e 3e 06 00       	push   0x63e0e
    142d:	00 01                	add    BYTE PTR [ecx],al
    142f:	50                   	push   eax
    1430:	5a                   	pop    edx
    1431:	00 00                	add    BYTE PTR [eax],al
    1433:	00 02                	add    BYTE PTR [edx],al
    1435:	91                   	xchg   ecx,eax
    1436:	6c                   	ins    BYTE PTR es:[edi],dx
    1437:	00 11                	add    BYTE PTR [ecx],dl
    1439:	4e                   	dec    esi
    143a:	09 00                	or     DWORD PTR [eax],eax
    143c:	00 01                	add    BYTE PTR [ecx],al
    143e:	55                   	push   ebp
    143f:	5a                   	pop    edx
    1440:	00 00                	add    BYTE PTR [eax],al
    1442:	00 09                	add    BYTE PTR [ecx],cl
    1444:	0d 00 9f 54 00       	or     eax,0x549f00
    1449:	00 00                	add    BYTE PTR [eax],al
    144b:	01 9c ef 03 00 00 0d 	add    DWORD PTR [edi+ebp*8+0xd000003],ebx
    1452:	9a 06 00 00 01 55 b3 	call   0xb355:0x1000006
    1459:	00 00                	add    BYTE PTR [eax],al
    145b:	00 02                	add    BYTE PTR [edx],al
    145d:	91                   	xchg   ecx,eax
    145e:	00 12                	add    BYTE PTR [edx],dl
    1460:	0e                   	push   cs
    1461:	3c 07                	cmp    al,0x7
    1463:	00 00                	add    BYTE PTR [eax],al
    1465:	01 57 41             	add    DWORD PTR [edi+0x41],edx
    1468:	00 00                	add    BYTE PTR [eax],al
    146a:	00 02                	add    BYTE PTR [edx],al
    146c:	91                   	xchg   ecx,eax
    146d:	68 0e 3e 06 00       	push   0x63e0e
    1472:	00 01                	add    BYTE PTR [ecx],al
    1474:	5a                   	pop    edx
    1475:	5a                   	pop    edx
    1476:	00 00                	add    BYTE PTR [eax],al
    1478:	00 02                	add    BYTE PTR [edx],al
    147a:	91                   	xchg   ecx,eax
    147b:	6c                   	ins    BYTE PTR es:[edi],dx
    147c:	00 11                	add    BYTE PTR [ecx],dl
    147e:	fe 06                	inc    BYTE PTR [esi]
    1480:	00 00                	add    BYTE PTR [eax],al
    1482:	01 5e 5a             	add    DWORD PTR [esi+0x5a],ebx
    1485:	00 00                	add    BYTE PTR [eax],al
    1487:	00 5d 0d             	add    BYTE PTR [ebp+0xd],bl
    148a:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    1490:	01 9c 34 04 00 00 0d 	add    DWORD PTR [esp+esi*1+0xd000004],ebx
    1497:	9a 06 00 00 01 5e b3 	call   0xb35e:0x1000006
    149e:	00 00                	add    BYTE PTR [eax],al
    14a0:	00 02                	add    BYTE PTR [edx],al
    14a2:	91                   	xchg   ecx,eax
    14a3:	00 12                	add    BYTE PTR [edx],dl
    14a5:	0e                   	push   cs
    14a6:	3c 07                	cmp    al,0x7
    14a8:	00 00                	add    BYTE PTR [eax],al
    14aa:	01 60 41             	add    DWORD PTR [eax+0x41],esp
    14ad:	00 00                	add    BYTE PTR [eax],al
    14af:	00 02                	add    BYTE PTR [edx],al
    14b1:	91                   	xchg   ecx,eax
    14b2:	68 0e 3e 06 00       	push   0x63e0e
    14b7:	00 01                	add    BYTE PTR [ecx],al
    14b9:	63 5a 00             	arpl   WORD PTR [edx+0x0],bx
    14bc:	00 00                	add    BYTE PTR [eax],al
    14be:	02 91 6c 00 11 41    	add    dl,BYTE PTR [ecx+0x4111006c]
    14c4:	07                   	pop    es
    14c5:	00 00                	add    BYTE PTR [eax],al
    14c7:	01 67 5a             	add    DWORD PTR [edi+0x5a],esp
    14ca:	00 00                	add    BYTE PTR [eax],al
    14cc:	00 b1 0d 00 9f 34    	add    BYTE PTR [ecx+0x349f000d],dh
    14d2:	00 00                	add    BYTE PTR [eax],al
    14d4:	00 01                	add    BYTE PTR [ecx],al
    14d6:	9c                   	pushf  
    14d7:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    14db:	0d 9a 06 00 00       	or     eax,0x69a
    14e0:	01 67 b3             	add    DWORD PTR [edi-0x4d],esp
    14e3:	00 00                	add    BYTE PTR [eax],al
    14e5:	00 02                	add    BYTE PTR [edx],al
    14e7:	91                   	xchg   ecx,eax
    14e8:	00 12                	add    BYTE PTR [edx],dl
    14ea:	0e                   	push   cs
    14eb:	3c 07                	cmp    al,0x7
    14ed:	00 00                	add    BYTE PTR [eax],al
    14ef:	01 69 41             	add    DWORD PTR [ecx+0x41],ebp
    14f2:	00 00                	add    BYTE PTR [eax],al
    14f4:	00 02                	add    BYTE PTR [edx],al
    14f6:	91                   	xchg   ecx,eax
    14f7:	74 00                	je     14f9 <sysEnter_Vector-0x12eb07>
    14f9:	11 6a 06             	adc    DWORD PTR [edx+0x6],ebp
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	01 6f 5a             	add    DWORD PTR [edi+0x5a],ebp
    1501:	00 00                	add    BYTE PTR [eax],al
    1503:	00 e5                	add    ch,ah
    1505:	0d 00 9f 37 00       	or     eax,0x379f00
    150a:	00 00                	add    BYTE PTR [eax],al
    150c:	01 9c b0 04 00 00 0d 	add    DWORD PTR [eax+esi*4+0xd000004],ebx
    1513:	c4 05 00 00 01 6f    	les    eax,FWORD PTR ds:0x6f010000
    1519:	76 00                	jbe    151b <sysEnter_Vector-0x12eae5>
    151b:	00 00                	add    BYTE PTR [eax],al
    151d:	02 91 00 0d 9a 06    	add    dl,BYTE PTR [ecx+0x69a0d00]
    1523:	00 00                	add    BYTE PTR [eax],al
    1525:	01 6f b3             	add    DWORD PTR [edi-0x4d],ebp
    1528:	00 00                	add    BYTE PTR [eax],al
    152a:	00 02                	add    BYTE PTR [edx],al
    152c:	91                   	xchg   ecx,eax
    152d:	04 12                	add    al,0x12
    152f:	0e                   	push   cs
    1530:	3c 07                	cmp    al,0x7
    1532:	00 00                	add    BYTE PTR [eax],al
    1534:	01 71 41             	add    DWORD PTR [ecx+0x41],esi
    1537:	00 00                	add    BYTE PTR [eax],al
    1539:	00 02                	add    BYTE PTR [edx],al
    153b:	91                   	xchg   ecx,eax
    153c:	74 00                	je     153e <sysEnter_Vector-0x12eac2>
    153e:	0c e0                	or     al,0xe0
    1540:	05 00 00 01 79       	add    eax,0x79010000
    1545:	81 00 00 00 1c 0e    	add    DWORD PTR [eax],0xe1c0000
    154b:	00 9f 72 00 00 00    	add    BYTE PTR [edi+0x72],bl
    1551:	01 9c fc 04 00 00 0d 	add    DWORD PTR [esp+edi*8+0xd000004],ebx
    1558:	b9 06 00 00 01       	mov    ecx,0x1000006
    155d:	79 81                	jns    14e0 <sysEnter_Vector-0x12eb20>
    155f:	00 00                	add    BYTE PTR [eax],al
    1561:	00 02                	add    BYTE PTR [edx],al
    1563:	91                   	xchg   ecx,eax
    1564:	00 13                	add    BYTE PTR [ebx],dl
    1566:	2e                   	cs
    1567:	0e                   	push   cs
    1568:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    156e:	14 73                	adc    al,0x73
    1570:	32 00                	xor    al,BYTE PTR [eax]
    1572:	01 7b 76             	add    DWORD PTR [ebx+0x76],edi
    1575:	00 00                	add    BYTE PTR [eax],al
    1577:	00 02                	add    BYTE PTR [edx],al
    1579:	91                   	xchg   ecx,eax
    157a:	6c                   	ins    BYTE PTR es:[edi],dx
    157b:	14 63                	adc    al,0x63
    157d:	74 00                	je     157f <sysEnter_Vector-0x12ea81>
    157f:	01 7b 76             	add    DWORD PTR [ebx+0x76],edi
    1582:	00 00                	add    BYTE PTR [eax],al
    1584:	00 02                	add    BYTE PTR [edx],al
    1586:	91                   	xchg   ecx,eax
    1587:	68 00 00 0f 48       	push   0x480f0000
    158c:	07                   	pop    es
    158d:	00 00                	add    BYTE PTR [eax],al
    158f:	01 7f 8e             	add    DWORD PTR [edi-0x72],edi
    1592:	0e                   	push   cs
    1593:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    1599:	01 9c 15 2f 07 00 00 	add    DWORD PTR [ebp+edx*1+0x72f],ebx
    15a0:	01 84 ab 0e 00 9f 29 	add    DWORD PTR [ebx+ebp*4+0x299f000e],eax
    15a7:	00 00                	add    BYTE PTR [eax],al
    15a9:	00 01                	add    BYTE PTR [ecx],al
    15ab:	9c                   	pushf  
    15ac:	4d                   	dec    ebp
    15ad:	05 00 00 0d ad       	add    eax,0xad0d0000
    15b2:	06                   	push   es
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	01 84 5a 00 00 00 02 	add    DWORD PTR [edx+ebx*2+0x2000000],eax
    15bc:	91                   	xchg   ecx,eax
    15bd:	00 0d 24 07 00 00    	add    BYTE PTR ds:0x724,cl
    15c3:	01 84 9a 01 00 00 02 	add    DWORD PTR [edx+ebx*4+0x2000001],eax
    15ca:	91                   	xchg   ecx,eax
    15cb:	04 0d                	add    al,0xd
    15cd:	3f                   	aas    
    15ce:	05 00 00 01 84       	add    eax,0x84010000
    15d3:	5a                   	pop    edx
    15d4:	00 00                	add    BYTE PTR [eax],al
    15d6:	00 02                	add    BYTE PTR [edx],al
    15d8:	91                   	xchg   ecx,eax
    15d9:	08 00                	or     BYTE PTR [eax],al
    15db:	16                   	push   ss
    15dc:	9b                   	fwait
    15dd:	05 00 00 01 89       	add    eax,0x89010000
    15e2:	5a                   	pop    edx
    15e3:	00 00                	add    BYTE PTR [eax],al
    15e5:	00 d4                	add    ah,dl
    15e7:	0e                   	push   cs
    15e8:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    15ee:	01 9c 75 05 00 00 0e 	add    DWORD PTR [ebp+esi*2+0xe000005],ebx
    15f5:	14 05                	adc    al,0x5
    15f7:	00 00                	add    BYTE PTR [eax],al
    15f9:	01 8b 76 00 00 00    	add    DWORD PTR [ebx+0x76],ecx
    15ff:	02 91 74 00 11 b4    	add    dl,BYTE PTR [ecx-0x4beeff8c]
    1605:	06                   	push   es
    1606:	00 00                	add    BYTE PTR [eax],al
    1608:	01 91 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],edx
    160e:	fd                   	std    
    160f:	0e                   	push   cs
    1610:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
    1616:	01 9c c7 05 00 00 0d 	add    DWORD PTR [edi+eax*8+0xd000005],ebx
    161d:	e2 02                	loop   1621 <sysEnter_Vector-0x12e9df>
    161f:	00 00                	add    BYTE PTR [eax],al
    1621:	01 91 a3 01 00 00    	add    DWORD PTR [ecx+0x1a3],edx
    1627:	02 91 00 0d ea 06    	add    dl,BYTE PTR [ecx+0x6ea0d00]
    162d:	00 00                	add    BYTE PTR [eax],al
    162f:	01 91 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],edx
    1635:	02 91 04 0d 13 07    	add    dl,BYTE PTR [ecx+0x7130d04]
    163b:	00 00                	add    BYTE PTR [eax],al
    163d:	01 91 c7 05 00 00    	add    DWORD PTR [ecx+0x5c7],edx
    1643:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1649:	64 00 01             	add    BYTE PTR fs:[ecx],al
    164c:	93                   	xchg   ebx,eax
    164d:	5a                   	pop    edx
    164e:	00 00                	add    BYTE PTR [eax],al
    1650:	00 02                	add    BYTE PTR [edx],al
    1652:	91                   	xchg   ecx,eax
    1653:	74 00                	je     1655 <sysEnter_Vector-0x12e9ab>
    1655:	06                   	push   es
    1656:	04 a3                	add    al,0xa3
    1658:	01 00                	add    DWORD PTR [eax],eax
    165a:	00 11                	add    BYTE PTR [ecx],dl
    165c:	94                   	xchg   esp,eax
    165d:	06                   	push   es
    165e:	00 00                	add    BYTE PTR [eax],al
    1660:	01 99 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ebx
    1666:	49                   	dec    ecx
    1667:	0f 00 9f f4 01 00 00 	ltr    WORD PTR [edi+0x1f4]
    166e:	01 9c 6f 06 00 00 0d 	add    DWORD PTR [edi+ebp*2+0xd000006],ebx
    1675:	e2 02                	loop   1679 <sysEnter_Vector-0x12e987>
    1677:	00 00                	add    BYTE PTR [eax],al
    1679:	01 99 a3 01 00 00    	add    DWORD PTR [ecx+0x1a3],ebx
    167f:	02 91 00 14 70 69    	add    dl,BYTE PTR [ecx+0x69701400]
    1685:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1688:	9b                   	fwait
    1689:	5a                   	pop    edx
    168a:	00 00                	add    BYTE PTR [eax],al
    168c:	00 02                	add    BYTE PTR [edx],al
    168e:	91                   	xchg   ecx,eax
    168f:	58                   	pop    eax
    1690:	0e                   	push   cs
    1691:	ea 06 00 00 01 9b 5a 	jmp    0x5a9b:0x1000006
    1698:	00 00                	add    BYTE PTR [eax],al
    169a:	00 02                	add    BYTE PTR [edx],al
    169c:	91                   	xchg   ecx,eax
    169d:	6c                   	ins    BYTE PTR es:[edi],dx
    169e:	0e                   	push   cs
    169f:	13 07                	adc    eax,DWORD PTR [edi]
    16a1:	00 00                	add    BYTE PTR [eax],al
    16a3:	01 9c c7 05 00 00 02 	add    DWORD PTR [edi+eax*8+0x2000005],ebx
    16aa:	91                   	xchg   ecx,eax
    16ab:	50                   	push   eax
    16ac:	0e                   	push   cs
    16ad:	a0 05 00 00 01       	mov    al,ds:0x1000005
    16b2:	9d                   	popf   
    16b3:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    16b8:	91                   	xchg   ecx,eax
    16b9:	68 0e 21 05 00       	push   0x5210e
    16be:	00 01                	add    BYTE PTR [ecx],al
    16c0:	9d                   	popf   
    16c1:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    16c6:	91                   	xchg   ecx,eax
    16c7:	64                   	fs
    16c8:	0e                   	push   cs
    16c9:	66 05 00 00          	add    ax,0x0
    16cd:	01 9e a3 01 00 00    	add    DWORD PTR [esi+0x1a3],ebx
    16d3:	02 91 54 0e 50 05    	add    dl,BYTE PTR [ecx+0x5500e54]
    16d9:	00 00                	add    BYTE PTR [eax],al
    16db:	01 af 5a 00 00 00    	add    DWORD PTR [edi+0x5a],ebp
    16e1:	02 91 60 13 1f 10    	add    dl,BYTE PTR [ecx+0x101f1360]
    16e7:	00 9f e0 00 00 00    	add    BYTE PTR [edi+0xe0],bl
    16ed:	14 63                	adc    al,0x63
    16ef:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16f0:	74 00                	je     16f2 <sysEnter_Vector-0x12e90e>
    16f2:	01 b1 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],esi
    16f8:	02 91 5c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100005c]
    16fe:	8e 06                	mov    es,WORD PTR [esi]
    1700:	00 00                	add    BYTE PTR [eax],al
    1702:	01 c7                	add    edi,eax
    1704:	5a                   	pop    edx
    1705:	00 00                	add    BYTE PTR [eax],al
    1707:	00 3d 11 00 9f 4f    	add    BYTE PTR ds:0x4f9f0011,bh
    170d:	00 00                	add    BYTE PTR [eax],al
    170f:	00 01                	add    BYTE PTR [ecx],al
    1711:	9c                   	pushf  
    1712:	c1 06 00             	rol    DWORD PTR [esi],0x0
    1715:	00 0d e2 02 00 00    	add    BYTE PTR ds:0x2e2,cl
    171b:	01 c7                	add    edi,eax
    171d:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1722:	91                   	xchg   ecx,eax
    1723:	00 0d ea 06 00 00    	add    BYTE PTR ds:0x6ea,cl
    1729:	01 c7                	add    edi,eax
    172b:	5a                   	pop    edx
    172c:	00 00                	add    BYTE PTR [eax],al
    172e:	00 02                	add    BYTE PTR [edx],al
    1730:	91                   	xchg   ecx,eax
    1731:	04 0d                	add    al,0xd
    1733:	13 07                	adc    eax,DWORD PTR [edi]
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	01 c7                	add    edi,eax
    1739:	c7 05 00 00 02 91 08 	mov    DWORD PTR ds:0x91020000,0x69701408
    1740:	14 70 69 
    1743:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1746:	c9                   	leave  
    1747:	5a                   	pop    edx
    1748:	00 00                	add    BYTE PTR [eax],al
    174a:	00 02                	add    BYTE PTR [edx],al
    174c:	91                   	xchg   ecx,eax
    174d:	74 00                	je     174f <sysEnter_Vector-0x12e8b1>
    174f:	11 bc 05 00 00 01 cf 	adc    DWORD PTR [ebp+eax*1-0x30ff0000],edi
    1756:	5a                   	pop    edx
    1757:	00 00                	add    BYTE PTR [eax],al
    1759:	00 8c 11 00 9f 1c 00 	add    BYTE PTR [ecx+edx*1+0x1c9f00],cl
    1760:	00 00                	add    BYTE PTR [eax],al
    1762:	01 9c e9 06 00 00 17 	add    DWORD PTR [ecx+ebp*8+0x17000006],ebx
    1769:	70 69                	jo     17d4 <sysEnter_Vector-0x12e82c>
    176b:	64 00 01             	add    BYTE PTR fs:[ecx],al
    176e:	cf                   	iret   
    176f:	76 00                	jbe    1771 <sysEnter_Vector-0x12e88f>
    1771:	00 00                	add    BYTE PTR [eax],al
    1773:	02 91 00 00 15 18    	add    dl,BYTE PTR [ecx+0x18150000]
    1779:	07                   	pop    es
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	01 d5                	add    ebp,edx
    177e:	a8 11                	test   al,0x11
    1780:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    1786:	01 9c 0d 07 00 00 0d 	add    DWORD PTR [ebp+ecx*1+0xd000007],ebx
    178d:	1d 07 00 00 01       	sbb    eax,0x1000007
    1792:	d5 5a                	aad    0x5a
    1794:	00 00                	add    BYTE PTR [eax],al
    1796:	00 02                	add    BYTE PTR [edx],al
    1798:	91                   	xchg   ecx,eax
    1799:	00 00                	add    BYTE PTR [eax],al
    179b:	11 4d 07             	adc    DWORD PTR [ebp+0x7],ecx
    179e:	00 00                	add    BYTE PTR [eax],al
    17a0:	01 db                	add    ebx,ebx
    17a2:	a3 01 00 00 c8       	mov    ds:0xc8000001,eax
    17a7:	11 00                	adc    DWORD PTR [eax],eax
    17a9:	9f                   	lahf   
    17aa:	20 00                	and    BYTE PTR [eax],al
    17ac:	00 00                	add    BYTE PTR [eax],al
    17ae:	01 9c 43 07 00 00 17 	add    DWORD PTR [ebx+eax*2+0x17000007],ebx
    17b5:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    17b8:	00 01                	add    BYTE PTR [ecx],al
    17ba:	db a3 01 00 00 02    	(bad)  [ebx+0x2000001]
    17c0:	91                   	xchg   ecx,eax
    17c1:	00 0d 3e 06 00 00    	add    BYTE PTR ds:0x63e,cl
    17c7:	01 db                	add    ebx,ebx
    17c9:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    17d0:	00 0c f7             	add    BYTE PTR [edi+esi*8],cl
    17d3:	06                   	push   es
    17d4:	00 00                	add    BYTE PTR [eax],al
    17d6:	01 e1                	add    ecx,esp
    17d8:	9a 00 00 00 e8 11 00 	call   0x11:0xe8000000
    17df:	9f                   	lahf   
    17e0:	44                   	inc    esp
    17e1:	01 00                	add    DWORD PTR [eax],eax
    17e3:	00 01                	add    BYTE PTR [ecx],al
    17e5:	9c                   	pushf  
    17e6:	21 08                	and    DWORD PTR [eax],ecx
    17e8:	00 00                	add    BYTE PTR [eax],al
    17ea:	0d 68 04 00 00       	or     eax,0x468
    17ef:	01 e1                	add    ecx,esp
    17f1:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    17f6:	91                   	xchg   ecx,eax
    17f7:	00 0d 13 07 00 00    	add    BYTE PTR ds:0x713,cl
    17fd:	01 e1                	add    ecx,esp
    17ff:	c7 05 00 00 02 91 04 	mov    DWORD PTR ds:0x91020000,0x6390d04
    1806:	0d 39 06 
    1809:	00 00                	add    BYTE PTR [eax],al
    180b:	01 e1                	add    ecx,esp
    180d:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    1814:	14 70                	adc    al,0x70
    1816:	00 01                	add    BYTE PTR [ecx],al
    1818:	e3 a3                	jecxz  17bd <sysEnter_Vector-0x12e843>
    181a:	01 00                	add    DWORD PTR [eax],eax
    181c:	00 02                	add    BYTE PTR [edx],al
    181e:	91                   	xchg   ecx,eax
    181f:	74 0e                	je     182f <sysEnter_Vector-0x12e7d1>
    1821:	58                   	pop    eax
    1822:	05 00 00 01 e3       	add    eax,0xe3010000
    1827:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    182c:	91                   	xchg   ecx,eax
    182d:	70 14                	jo     1843 <sysEnter_Vector-0x12e7bd>
    182f:	63 00                	arpl   WORD PTR [eax],ax
    1831:	01 e4                	add    esp,esp
    1833:	5a                   	pop    edx
    1834:	00 00                	add    BYTE PTR [eax],al
    1836:	00 02                	add    BYTE PTR [edx],al
    1838:	91                   	xchg   ecx,eax
    1839:	64                   	fs
    183a:	08 c8                	or     al,cl
    183c:	06                   	push   es
    183d:	00 00                	add    BYTE PTR [eax],al
    183f:	04 81                	add    al,0x81
    1841:	00 00                	add    BYTE PTR [eax],al
    1843:	00 01                	add    BYTE PTR [ecx],al
    1845:	e5 cf                	in     eax,0xcf
    1847:	07                   	pop    es
    1848:	00 00                	add    BYTE PTR [eax],al
    184a:	09 c3                	or     ebx,eax
    184c:	06                   	push   es
    184d:	00 00                	add    BYTE PTR [eax],al
    184f:	00 09                	add    BYTE PTR [ecx],cl
    1851:	31 06                	xor    DWORD PTR [esi],eax
    1853:	00 00                	add    BYTE PTR [eax],al
    1855:	01 09                	add    DWORD PTR [ecx],ecx
    1857:	cf                   	iret   
    1858:	06                   	push   es
    1859:	00 00                	add    BYTE PTR [eax],al
    185b:	02 00                	add    al,BYTE PTR [eax]
    185d:	0e                   	push   cs
    185e:	7d 05                	jge    1865 <sysEnter_Vector-0x12e79b>
    1860:	00 00                	add    BYTE PTR [eax],al
    1862:	01 e5                	add    ebp,esp
    1864:	ac                   	lods   al,BYTE PTR ds:[esi]
    1865:	07                   	pop    es
    1866:	00 00                	add    BYTE PTR [eax],al
    1868:	02 91 6c 0e ea 06    	add    dl,BYTE PTR [ecx+0x6ea0e6c]
    186e:	00 00                	add    BYTE PTR [eax],al
    1870:	01 e6                	add    esi,esp
    1872:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    1879:	18 34 12             	sbb    BYTE PTR [edx+edx*1],dh
    187c:	00 9f 0e 00 00 00    	add    BYTE PTR [edi+0xe],bl
    1882:	07                   	pop    es
    1883:	08 00                	or     BYTE PTR [eax],al
    1885:	00 0e                	add    BYTE PTR [esi],cl
    1887:	53                   	push   ebx
    1888:	06                   	push   es
    1889:	00 00                	add    BYTE PTR [eax],al
    188b:	01 ec                	add    esp,ebp
    188d:	be 00 00 00 02       	mov    esi,0x2000000
    1892:	91                   	xchg   ecx,eax
    1893:	63 00                	arpl   WORD PTR [eax],ax
    1895:	13 a3 12 00 9f 0e    	adc    esp,DWORD PTR [ebx+0xe9f0012]
    189b:	00 00                	add    BYTE PTR [eax],al
    189d:	00 19                	add    BYTE PTR [ecx],bl
    189f:	53                   	push   ebx
    18a0:	06                   	push   es
    18a1:	00 00                	add    BYTE PTR [eax],al
    18a3:	01 02                	add    DWORD PTR [edx],eax
    18a5:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    18ab:	91                   	xchg   ecx,eax
    18ac:	62 00                	bound  eax,QWORD PTR [eax]
    18ae:	00 1a                	add    BYTE PTR [edx],bl
    18b0:	95                   	xchg   ebp,eax
    18b1:	05 00 00 01 11       	add    eax,0x11010000
    18b6:	01 9a 00 00 00 2c    	add    DWORD PTR [edx+0x2c000000],ebx
    18bc:	13 00                	adc    eax,DWORD PTR [eax]
    18be:	9f                   	lahf   
    18bf:	20 00                	and    BYTE PTR [eax],al
    18c1:	00 00                	add    BYTE PTR [eax],al
    18c3:	01 9c 69 08 00 00 1b 	add    DWORD PTR [ecx+ebp*2+0x1b000008],ebx
    18ca:	68 04 00 00 01       	push   0x1000004
    18cf:	11 01                	adc    DWORD PTR [ecx],eax
    18d1:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    18d6:	91                   	xchg   ecx,eax
    18d7:	00 1b                	add    BYTE PTR [ebx],bl
    18d9:	13 07                	adc    eax,DWORD PTR [edi]
    18db:	00 00                	add    BYTE PTR [eax],al
    18dd:	01 11                	add    DWORD PTR [ecx],edx
    18df:	01 c7                	add    edi,eax
    18e1:	05 00 00 02 91       	add    eax,0x91020000
    18e6:	04 1b                	add    al,0x1b
    18e8:	39 06                	cmp    DWORD PTR [esi],eax
    18ea:	00 00                	add    BYTE PTR [eax],al
    18ec:	01 11                	add    DWORD PTR [ecx],edx
    18ee:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    18f4:	91                   	xchg   ecx,eax
    18f5:	08 00                	or     BYTE PTR [eax],al
    18f7:	1a e6                	sbb    ah,dh
    18f9:	05 00 00 01 16       	add    eax,0x16010000
    18fe:	01 c7                	add    edi,eax
    1900:	05 00 00 4c 13       	add    eax,0x134c0000
    1905:	00 9f fd 02 00 00    	add    BYTE PTR [edi+0x2fd],bl
    190b:	01 9c 58 09 00 00 1b 	add    DWORD PTR [eax+ebx*2+0x1b000009],ebx
    1912:	ef                   	out    dx,eax
    1913:	06                   	push   es
    1914:	00 00                	add    BYTE PTR [eax],al
    1916:	01 16                	add    DWORD PTR [esi],edx
    1918:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    191e:	91                   	xchg   ecx,eax
    191f:	00 1b                	add    BYTE PTR [ebx],bl
    1921:	ea 06 00 00 01 16 01 	jmp    0x116:0x1000006
    1928:	58                   	pop    eax
    1929:	09 00                	or     DWORD PTR [eax],eax
    192b:	00 02                	add    BYTE PTR [edx],al
    192d:	91                   	xchg   ecx,eax
    192e:	04 19                	add    al,0x19
    1930:	13 07                	adc    eax,DWORD PTR [edi]
    1932:	00 00                	add    BYTE PTR [eax],al
    1934:	01 18                	add    DWORD PTR [eax],ebx
    1936:	01 c7                	add    edi,eax
    1938:	05 00 00 02 91       	add    eax,0x91020000
    193d:	54                   	push   esp
    193e:	1c 63                	sbb    al,0x63
    1940:	6d                   	ins    DWORD PTR es:[edi],dx
    1941:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1944:	19 01                	sbb    DWORD PTR [ecx],eax
    1946:	5e                   	pop    esi
    1947:	09 00                	or     DWORD PTR [eax],eax
    1949:	00 03                	add    BYTE PTR [ebx],al
    194b:	91                   	xchg   ecx,eax
    194c:	d0                   	(bad)  
    194d:	77 19                	ja     1968 <sysEnter_Vector-0x12e698>
    194f:	a0 05 00 00 01       	mov    al,ds:0x1000005
    1954:	1a 01                	sbb    al,BYTE PTR [ecx]
    1956:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    195b:	91                   	xchg   ecx,eax
    195c:	6c                   	ins    BYTE PTR es:[edi],dx
    195d:	19 21                	sbb    DWORD PTR [ecx],esp
    195f:	05 00 00 01 1a       	add    eax,0x1a010000
    1964:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    196a:	91                   	xchg   ecx,eax
    196b:	68 19 47 05 00       	push   0x54719
    1970:	00 01                	add    BYTE PTR [ecx],al
    1972:	1a 01                	sbb    al,BYTE PTR [ecx]
    1974:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1979:	91                   	xchg   ecx,eax
    197a:	5c                   	pop    esp
    197b:	19 d7                	sbb    edi,edx
    197d:	05 00 00 01 1b       	add    eax,0x1b010000
    1982:	01 6f 09             	add    DWORD PTR [edi+0x9],ebp
    1985:	00 00                	add    BYTE PTR [eax],al
    1987:	03 91 ce 77 19 50    	add    edx,DWORD PTR [ecx+0x501977ce]
    198d:	05 00 00 01 34       	add    eax,0x34010000
    1992:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1995:	00 00                	add    BYTE PTR [eax],al
    1997:	02 91 64 18 03 14    	add    dl,BYTE PTR [ecx+0x14031864]
    199d:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    19a3:	29 09                	sub    DWORD PTR [ecx],ecx
    19a5:	00 00                	add    BYTE PTR [eax],al
    19a7:	19 a9 05 00 00 01    	sbb    DWORD PTR [ecx+0x1000005],ebp
    19ad:	26 01 a3 01 00 00 02 	add    DWORD PTR es:[ebx+0x2000001],esp
    19b4:	91                   	xchg   ecx,eax
    19b5:	58                   	pop    eax
    19b6:	00 13                	add    BYTE PTR [ebx],dl
    19b8:	b3 14                	mov    bl,0x14
    19ba:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    19c0:	1c 63                	sbb    al,0x63
    19c2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    19c3:	74 00                	je     19c5 <sysEnter_Vector-0x12e63b>
    19c5:	01 36                	add    DWORD PTR [esi],esi
    19c7:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    19ca:	00 00                	add    BYTE PTR [eax],al
    19cc:	02 91 60 1d 00 00    	add    dl,BYTE PTR [ecx+0x1d60]
    19d2:	00 00                	add    BYTE PTR [eax],al
    19d4:	19 a9 05 00 00 01    	sbb    DWORD PTR [ecx+0x1000005],ebp
    19da:	3c 01                	cmp    al,0x1
    19dc:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    19e1:	91                   	xchg   ecx,eax
    19e2:	50                   	push   eax
    19e3:	00 00                	add    BYTE PTR [eax],al
    19e5:	00 06                	add    BYTE PTR [esi],al
    19e7:	04 5a                	add    al,0x5a
    19e9:	00 00                	add    BYTE PTR [eax],al
    19eb:	00 1e                	add    BYTE PTR [esi],bl
    19ed:	3a 00                	cmp    al,BYTE PTR [eax]
    19ef:	00 00                	add    BYTE PTR [eax],al
    19f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    19f2:	09 00                	or     DWORD PTR [eax],eax
    19f4:	00 1f                	add    BYTE PTR [edi],bl
    19f6:	c5 00                	lds    eax,FWORD PTR [eax]
    19f8:	00 00                	add    BYTE PTR [eax],al
    19fa:	ff 03                	inc    DWORD PTR [ebx]
    19fc:	00 1e                	add    BYTE PTR [esi],bl
    19fe:	3a 00                	cmp    al,BYTE PTR [eax]
    1a00:	00 00                	add    BYTE PTR [eax],al
    1a02:	7f 09                	jg     1a0d <sysEnter_Vector-0x12e5f3>
    1a04:	00 00                	add    BYTE PTR [eax],al
    1a06:	20 c5                	and    ch,al
    1a08:	00 00                	add    BYTE PTR [eax],al
    1a0a:	00 01                	add    BYTE PTR [ecx],al
    1a0c:	00 1a                	add    BYTE PTR [edx],bl
    1a0e:	ae                   	scas   al,BYTE PTR es:[edi]
    1a0f:	05 00 00 01 54       	add    eax,0x54010000
    1a14:	01 c7                	add    edi,eax
    1a16:	05 00 00 49 16       	add    eax,0x16490000
    1a1b:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    1a21:	01 9c b8 09 00 00 1b 	add    DWORD PTR [eax+edi*4+0x1b000009],ebx
    1a28:	ef                   	out    dx,eax
    1a29:	06                   	push   es
    1a2a:	00 00                	add    BYTE PTR [eax],al
    1a2c:	01 54 01 a3          	add    DWORD PTR [ecx+eax*1-0x5d],edx
    1a30:	01 00                	add    DWORD PTR [eax],eax
    1a32:	00 02                	add    BYTE PTR [edx],al
    1a34:	91                   	xchg   ecx,eax
    1a35:	00 1b                	add    BYTE PTR [ebx],bl
    1a37:	ea 06 00 00 01 54 01 	jmp    0x154:0x1000006
    1a3e:	58                   	pop    eax
    1a3f:	09 00                	or     DWORD PTR [eax],eax
    1a41:	00 02                	add    BYTE PTR [edx],al
    1a43:	91                   	xchg   ecx,eax
    1a44:	04 00                	add    al,0x0
    1a46:	21 6e 05             	and    DWORD PTR [esi+0x5],ebp
    1a49:	00 00                	add    BYTE PTR [eax],al
    1a4b:	01 59 01             	add    DWORD PTR [ecx+0x1],ebx
    1a4e:	5a                   	pop    edx
    1a4f:	00 00                	add    BYTE PTR [eax],al
    1a51:	00 6c 16 00          	add    BYTE PTR [esi+edx*1+0x0],ch
    1a55:	9f                   	lahf   
    1a56:	19 00                	sbb    DWORD PTR [eax],eax
    1a58:	00 00                	add    BYTE PTR [eax],al
    1a5a:	01 9c 22 5b 00 00 00 	add    DWORD PTR [edx+eiz*1+0x5b],ebx
    1a61:	06                   	push   es
    1a62:	34 76                	xor    al,0x76
    1a64:	00 00                	add    BYTE PTR [eax],al
    1a66:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    1a6c:	9f                   	lahf   
    1a6d:	22 0b                	and    cl,BYTE PTR [ebx]
    1a6f:	01 00                	add    DWORD PTR [eax],eax
    1a71:	00 06                	add    BYTE PTR [esi],al
    1a73:	35 76 00 00 00       	xor    eax,0x76
    1a78:	05 03 88 60 00       	add    eax,0x608803
    1a7d:	9f                   	lahf   
    1a7e:	22 64 00 00          	and    ah,BYTE PTR [eax+eax*1+0x0]
    1a82:	00 06                	add    BYTE PTR [esi],al
    1a84:	36                   	ss
    1a85:	76 00                	jbe    1a87 <sysEnter_Vector-0x12e579>
    1a87:	00 00                	add    BYTE PTR [eax],al
    1a89:	05 03 80 60 00       	add    eax,0x608003
    1a8e:	9f                   	lahf   
    1a8f:	22 53 01             	and    dl,BYTE PTR [ebx+0x1]
    1a92:	00 00                	add    BYTE PTR [eax],al
    1a94:	06                   	push   es
    1a95:	37                   	aaa    
    1a96:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1a97:	00 00                	add    BYTE PTR [eax],al
    1a99:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    1a9f:	9f                   	lahf   
    1aa0:	22 38                	and    bh,BYTE PTR [eax]
    1aa2:	00 00                	add    BYTE PTR [eax],al
    1aa4:	00 07                	add    BYTE PTR [edi],al
    1aa6:	53                   	push   ebx
    1aa7:	c7 05 00 00 05 03 8c 	mov    DWORD PTR ds:0x3050000,0x9f00608c
    1aae:	60 00 9f 
    1ab1:	22 43 06             	and    al,BYTE PTR [ebx+0x6]
    1ab4:	00 00                	add    BYTE PTR [eax],al
    1ab6:	01 0d be 00 00 00    	add    DWORD PTR ds:0xbe,ecx
    1abc:	05 03 98 60 00       	add    eax,0x609803
    1ac1:	9f                   	lahf   
    1ac2:	22 a1 06 00 00 01    	and    ah,BYTE PTR [ecx+0x1000006]
    1ac8:	0e                   	push   cs
    1ac9:	a3 01 00 00 05       	mov    ds:0x5000001,eax
    1ace:	03 9c 60 00 9f 00 b3 	add    ebx,DWORD PTR [eax+eiz*2-0x4cff6100]
    1ad5:	02 00                	add    al,BYTE PTR [eax]
    1ad7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1ada:	15 08 00 00 04       	adc    eax,0x4000008
    1adf:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    1ae5:	7d 07                	jge    1aee <sysEnter_Vector-0x12e512>
    1ae7:	00 00                	add    BYTE PTR [eax],al
    1ae9:	15 00 00 00 88       	adc    eax,0x88000000
    1aee:	16                   	push   ss
    1aef:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    1af5:	72 0a                	jb     1b01 <sysEnter_Vector-0x12e4ff>
    1af7:	00 00                	add    BYTE PTR [eax],al
    1af9:	02 01                	add    al,BYTE PTR [ecx]
    1afb:	06                   	push   es
    1afc:	75 00                	jne    1afe <sysEnter_Vector-0x12e502>
    1afe:	00 00                	add    BYTE PTR [eax],al
    1b00:	02 01                	add    al,BYTE PTR [ecx]
    1b02:	06                   	push   es
    1b03:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b04:	00 00                	add    BYTE PTR [eax],al
    1b06:	00 02                	add    BYTE PTR [edx],al
    1b08:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    1b0e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1b15:	02 08                	add    cl,BYTE PTR [eax]
    1b17:	05 00 00 00 00       	add    eax,0x0
    1b1c:	02 01                	add    al,BYTE PTR [ecx]
    1b1e:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    1b22:	00 02                	add    BYTE PTR [edx],al
    1b24:	02 07                	add    al,BYTE PTR [edi]
    1b26:	f0 00 00             	lock add BYTE PTR [eax],al
    1b29:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    1b2c:	00 00                	add    BYTE PTR [eax],al
    1b2e:	00 02                	add    BYTE PTR [edx],al
    1b30:	34 61                	xor    al,0x61
    1b32:	00 00                	add    BYTE PTR [eax],al
    1b34:	00 02                	add    BYTE PTR [edx],al
    1b36:	04 07                	add    al,0x7
    1b38:	4e                   	dec    esi
    1b39:	00 00                	add    BYTE PTR [eax],al
    1b3b:	00 02                	add    BYTE PTR [edx],al
    1b3d:	08 07                	or     BYTE PTR [edi],al
    1b3f:	44                   	inc    esp
    1b40:	00 00                	add    BYTE PTR [eax],al
    1b42:	00 04 2e             	add    BYTE PTR [esi+ebp*1],al
    1b45:	05 00 00 03 d8       	add    eax,0xd8030000
    1b4a:	61                   	popa   
    1b4b:	00 00                	add    BYTE PTR [eax],al
    1b4d:	00 02                	add    BYTE PTR [edx],al
    1b4f:	04 05                	add    al,0x5
    1b51:	05 00 00 00 02       	add    eax,0x2000000
    1b56:	0c 04                	or     al,0x4
    1b58:	3d 01 00 00 02       	cmp    eax,0x2000001
    1b5d:	01 02                	add    DWORD PTR [edx],eax
    1b5f:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    1b66:	5a                   	pop    edx
    1b67:	01 00                	add    DWORD PTR [eax],eax
    1b69:	00 04 59             	add    BYTE PTR [ecx+ebx*2],al
    1b6c:	07                   	pop    es
    1b6d:	00 00                	add    BYTE PTR [eax],al
    1b6f:	04 15                	add    al,0x15
    1b71:	7a 00                	jp     1b73 <sysEnter_Vector-0x12e48d>
    1b73:	00 00                	add    BYTE PTR [eax],al
    1b75:	05 a6 03 00 00       	add    eax,0x3a6
    1b7a:	04 61                	add    al,0x61
    1b7c:	00 00                	add    BYTE PTR [eax],al
    1b7e:	00 05 15 6f 01 00    	add    BYTE PTR ds:0x16f15,al
    1b84:	00 06                	add    BYTE PTR [esi],al
    1b86:	5d                   	pop    ebp
    1b87:	03 00                	add    eax,DWORD PTR [eax]
    1b89:	00 00                	add    BYTE PTR [eax],al
    1b8b:	06                   	push   es
    1b8c:	aa                   	stos   BYTE PTR es:[edi],al
    1b8d:	04 00                	add    al,0x0
    1b8f:	00 01                	add    BYTE PTR [ecx],al
    1b91:	06                   	push   es
    1b92:	ce                   	into   
    1b93:	02 00                	add    al,BYTE PTR [eax]
    1b95:	00 02                	add    BYTE PTR [edx],al
    1b97:	06                   	push   es
    1b98:	9c                   	pushf  
    1b99:	04 00                	add    al,0x0
    1b9b:	00 03                	add    BYTE PTR [ebx],al
    1b9d:	06                   	push   es
    1b9e:	05 03 00 00 04       	add    eax,0x4000003
    1ba3:	06                   	push   es
    1ba4:	f7 02 00 00 05 06    	test   DWORD PTR [edx],0x6050000
    1baa:	7a 04                	jp     1bb0 <sysEnter_Vector-0x12e450>
    1bac:	00 00                	add    BYTE PTR [eax],al
    1bae:	06                   	push   es
    1baf:	06                   	push   es
    1bb0:	ed                   	in     eax,dx
    1bb1:	03 00                	add    eax,DWORD PTR [eax]
    1bb3:	00 07                	add    BYTE PTR [edi],al
    1bb5:	06                   	push   es
    1bb6:	34 03                	xor    al,0x3
    1bb8:	00 00                	add    BYTE PTR [eax],al
    1bba:	08 06                	or     BYTE PTR [esi],al
    1bbc:	e0 03                	loopne 1bc1 <sysEnter_Vector-0x12e43f>
    1bbe:	00 00                	add    BYTE PTR [eax],al
    1bc0:	09 06                	or     DWORD PTR [esi],eax
    1bc2:	fa                   	cli    
    1bc3:	03 00                	add    eax,DWORD PTR [eax]
    1bc5:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    1bc8:	25 04 00 00 59       	and    eax,0x59000004
    1bcd:	06                   	push   es
    1bce:	96                   	xchg   esi,eax
    1bcf:	02 00                	add    al,BYTE PTR [eax]
    1bd1:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    1bd4:	bb 03 00 00 97       	mov    ebx,0x97000003
    1bd9:	07                   	pop    es
    1bda:	7d 03                	jge    1bdf <sysEnter_Vector-0x12e421>
    1bdc:	00 00                	add    BYTE PTR [eax],al
    1bde:	63 01                	arpl   WORD PTR [ecx],ax
    1be0:	07                   	pop    es
    1be1:	18 04 00             	sbb    BYTE PTR [eax+eax*1],al
    1be4:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1be8:	49                   	dec    ecx
    1be9:	04 00                	add    al,0x0
    1beb:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1bee:	07                   	pop    es
    1bef:	ba 02 00 00 66       	mov    edx,0x66000002
    1bf4:	01 07                	add    DWORD PTR [edi],eax
    1bf6:	1f                   	pop    ds
    1bf7:	03 00                	add    eax,DWORD PTR [eax]
    1bf9:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1bfc:	07                   	pop    es
    1bfd:	12 03                	adc    al,BYTE PTR [ebx]
    1bff:	00 00                	add    BYTE PTR [eax],al
    1c01:	68 01 07 bd 04       	push   0x4bd0701
    1c06:	00 00                	add    BYTE PTR [eax],al
    1c08:	69 01 07 a9 02 00    	imul   eax,DWORD PTR [ecx],0x2a907
    1c0e:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    1c11:	07                   	pop    es
    1c12:	e7 02                	out    0x2,eax
    1c14:	00 00                	add    BYTE PTR [eax],al
    1c16:	71 01                	jno    1c19 <sysEnter_Vector-0x12e3e7>
    1c18:	07                   	pop    es
    1c19:	8e 04 00             	mov    es,WORD PTR [eax+eax*1]
    1c1c:	00 00                	add    BYTE PTR [eax],al
    1c1e:	03 07                	add    eax,DWORD PTR [edi]
    1c20:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
    1c23:	00 01                	add    BYTE PTR [ecx],al
    1c25:	03 07                	add    eax,DWORD PTR [edi]
    1c27:	94                   	xchg   esp,eax
    1c28:	03 00                	add    eax,DWORD PTR [eax]
    1c2a:	00 02                	add    BYTE PTR [edx],al
    1c2c:	03 07                	add    eax,DWORD PTR [edi]
    1c2e:	6d                   	ins    DWORD PTR es:[edi],dx
    1c2f:	03 00                	add    eax,DWORD PTR [eax]
    1c31:	00 03                	add    BYTE PTR [ebx],al
    1c33:	03 07                	add    eax,DWORD PTR [edi]
    1c35:	cf                   	iret   
    1c36:	03 00                	add    eax,DWORD PTR [eax]
    1c38:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1c3b:	07                   	pop    es
    1c3c:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
    1c3f:	00 05 03 00 08 64    	add    BYTE PTR ds:0x64080003,al
    1c45:	07                   	pop    es
    1c46:	00 00                	add    BYTE PTR [eax],al
    1c48:	18 05 36 c3 01 00    	sbb    BYTE PTR ds:0x1c336,al
    1c4e:	00 09                	add    BYTE PTR [ecx],cl
    1c50:	54                   	push   esp
    1c51:	07                   	pop    es
    1c52:	00 00                	add    BYTE PTR [eax],al
    1c54:	05 38 c3 01 00       	add    eax,0x1c338
    1c59:	00 00                	add    BYTE PTR [eax],al
    1c5b:	0a 6c 65 6e          	or     ch,BYTE PTR [ebp+eiz*2+0x6e]
    1c5f:	00 05 39 3a 00 00    	add    BYTE PTR ds:0x3a39,al
    1c65:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1c68:	5f                   	pop    edi
    1c69:	07                   	pop    es
    1c6a:	00 00                	add    BYTE PTR [eax],al
    1c6c:	05 3a 3a 00 00       	add    eax,0x3a3a
    1c71:	00 08                	add    BYTE PTR [eax],cl
    1c73:	09 8c 07 00 00 05 3b 	or     DWORD PTR [edi+eax*1+0x3b050000],ecx
    1c7a:	3a 00                	cmp    al,BYTE PTR [eax]
    1c7c:	00 00                	add    BYTE PTR [eax],al
    1c7e:	0c 0a                	or     al,0xa
    1c80:	66                   	data16
    1c81:	64 00 05 3c 3a 00 00 	add    BYTE PTR fs:0x3a3c,al
    1c88:	00 10                	add    BYTE PTR [eax],dl
    1c8a:	09 66 0b             	or     DWORD PTR [esi+0xb],esp
    1c8d:	00 00                	add    BYTE PTR [eax],al
    1c8f:	05 3d 3a 00 00       	add    eax,0x3a3d
    1c94:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    1c97:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    1c9a:	92                   	xchg   edx,eax
    1c9b:	07                   	pop    es
    1c9c:	00 00                	add    BYTE PTR [eax],al
    1c9e:	05 3e 6f 01 00       	add    eax,0x16f3e
    1ca3:	00 02                	add    BYTE PTR [edx],al
    1ca5:	04 07                	add    al,0x7
    1ca7:	49                   	dec    ecx
    1ca8:	00 00                	add    BYTE PTR [eax],al
    1caa:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    1cad:	25 00 00 00 0d       	and    eax,0xd000000
    1cb2:	71 07                	jno    1cbb <sysEnter_Vector-0x12e345>
    1cb4:	00 00                	add    BYTE PTR [eax],al
    1cb6:	01 0d c3 01 00 00    	add    DWORD PTR ds:0x1c3,ecx
    1cbc:	88 16                	mov    BYTE PTR [esi],dl
    1cbe:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    1cc4:	01 9c 4a 02 00 00 0e 	add    DWORD PTR [edx+ecx*2+0xe000002],ebx
    1ccb:	54                   	push   esp
    1ccc:	07                   	pop    es
    1ccd:	00 00                	add    BYTE PTR [eax],al
    1ccf:	01 0d c3 01 00 00    	add    DWORD PTR ds:0x1c3,ecx
    1cd5:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    1cdb:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1cdc:	00 01                	add    BYTE PTR [ecx],al
    1cde:	0d 6f 00 00 00       	or     eax,0x6f
    1ce3:	02 91 04 0e 5f 07    	add    dl,BYTE PTR [ecx+0x75f0e04]
    1ce9:	00 00                	add    BYTE PTR [eax],al
    1ceb:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    1cf1:	02 91 08 0e 8c 07    	add    dl,BYTE PTR [ecx+0x78c0e08]
    1cf7:	00 00                	add    BYTE PTR [eax],al
    1cf9:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    1cff:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    1d05:	00 01                	add    BYTE PTR [ecx],al
    1d07:	0d 3a 00 00 00       	or     eax,0x3a
    1d0c:	02 91 10 0e 66 0b    	add    dl,BYTE PTR [ecx+0xb660e10]
    1d12:	00 00                	add    BYTE PTR [eax],al
    1d14:	01 0d 96 00 00 00    	add    DWORD PTR ds:0x96,ecx
    1d1a:	02 91 14 00 10 5b    	add    dl,BYTE PTR [ecx+0x5b100014]
    1d20:	00 00                	add    BYTE PTR [eax],al
    1d22:	00 06                	add    BYTE PTR [esi],al
    1d24:	34 56                	xor    al,0x56
    1d26:	00 00                	add    BYTE PTR [eax],al
    1d28:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    1d2e:	9f                   	lahf   
    1d2f:	10 0b                	adc    BYTE PTR [ebx],cl
    1d31:	01 00                	add    DWORD PTR [eax],eax
    1d33:	00 06                	add    BYTE PTR [esi],al
    1d35:	35 56 00 00 00       	xor    eax,0x56
    1d3a:	05 03 88 60 00       	add    eax,0x608803
    1d3f:	9f                   	lahf   
    1d40:	10 64 00 00          	adc    BYTE PTR [eax+eax*1+0x0],ah
    1d44:	00 06                	add    BYTE PTR [esi],al
    1d46:	36                   	ss
    1d47:	56                   	push   esi
    1d48:	00 00                	add    BYTE PTR [eax],al
    1d4a:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    1d50:	9f                   	lahf   
    1d51:	10 53 01             	adc    BYTE PTR [ebx+0x1],dl
    1d54:	00 00                	add    BYTE PTR [eax],al
    1d56:	06                   	push   es
    1d57:	37                   	aaa    
    1d58:	7a 00                	jp     1d5a <sysEnter_Vector-0x12e2a6>
    1d5a:	00 00                	add    BYTE PTR [eax],al
    1d5c:	05 03 90 60 00       	add    eax,0x609003
    1d61:	9f                   	lahf   
    1d62:	10 38                	adc    BYTE PTR [eax],bh
    1d64:	00 00                	add    BYTE PTR [eax],al
    1d66:	00 07                	add    BYTE PTR [edi],al
    1d68:	53                   	push   ebx
    1d69:	9f                   	lahf   
    1d6a:	02 00                	add    al,BYTE PTR [eax]
    1d6c:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    1d72:	9f                   	lahf   
    1d73:	0c 04                	or     al,0x4
    1d75:	d7                   	xlat   BYTE PTR ds:[ebx]
    1d76:	01 00                	add    DWORD PTR [eax],eax
    1d78:	00 10                	add    BYTE PTR [eax],dl
    1d7a:	76 07                	jbe    1d83 <sysEnter_Vector-0x12e27d>
    1d7c:	00 00                	add    BYTE PTR [eax],al
    1d7e:	01 0b                	add    DWORD PTR [ebx],ecx
    1d80:	c5 01                	lds    eax,FWORD PTR [ecx]
    1d82:	00 00                	add    BYTE PTR [eax],al
    1d84:	05 03 a0 60 00       	add    eax,0x60a003
    1d89:	9f                   	lahf   
    1d8a:	00 0b                	add    BYTE PTR [ebx],cl
    1d8c:	04 00                	add    al,0x0
    1d8e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1d91:	f7                   	(bad)  
    1d92:	08 00                	or     BYTE PTR [eax],al
    1d94:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1d97:	83 00 00             	add    DWORD PTR [eax],0x0
    1d9a:	00 0c 4c             	add    BYTE PTR [esp+ecx*2],cl
    1d9d:	08 00                	or     BYTE PTR [eax],al
    1d9f:	00 15 00 00 00 fc    	add    BYTE PTR ds:0xfc000000,dl
    1da5:	16                   	push   ss
    1da6:	00 9f 33 04 00 00    	add    BYTE PTR [edi+0x433],bl
    1dac:	7d 0b                	jge    1db9 <sysEnter_Vector-0x12e247>
    1dae:	00 00                	add    BYTE PTR [eax],al
    1db0:	02 01                	add    al,BYTE PTR [ecx]
    1db2:	06                   	push   es
    1db3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1db4:	00 00                	add    BYTE PTR [eax],al
    1db6:	00 02                	add    BYTE PTR [edx],al
    1db8:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    1dbe:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1dc5:	02 08                	add    cl,BYTE PTR [eax]
    1dc7:	05 00 00 00 00       	add    eax,0x0
    1dcc:	04 76                	add    al,0x76
    1dce:	08 00                	or     BYTE PTR [eax],al
    1dd0:	00 02                	add    BYTE PTR [edx],al
    1dd2:	2e                   	cs
    1dd3:	4c                   	dec    esp
    1dd4:	00 00                	add    BYTE PTR [eax],al
    1dd6:	00 02                	add    BYTE PTR [edx],al
    1dd8:	01 08                	add    DWORD PTR [eax],ecx
    1dda:	6c                   	ins    BYTE PTR es:[edi],dx
    1ddb:	00 00                	add    BYTE PTR [eax],al
    1ddd:	00 02                	add    BYTE PTR [edx],al
    1ddf:	02 07                	add    al,BYTE PTR [edi]
    1de1:	f0 00 00             	lock add BYTE PTR [eax],al
    1de4:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    1de7:	00 00                	add    BYTE PTR [eax],al
    1de9:	00 02                	add    BYTE PTR [edx],al
    1deb:	34 65                	xor    al,0x65
    1ded:	00 00                	add    BYTE PTR [eax],al
    1def:	00 02                	add    BYTE PTR [edx],al
    1df1:	04 07                	add    al,0x7
    1df3:	4e                   	dec    esi
    1df4:	00 00                	add    BYTE PTR [eax],al
    1df6:	00 02                	add    BYTE PTR [edx],al
    1df8:	08 07                	or     BYTE PTR [edi],al
    1dfa:	44                   	inc    esp
    1dfb:	00 00                	add    BYTE PTR [eax],al
    1dfd:	00 04 35 05 00 00 02 	add    BYTE PTR [esi*1+0x2000005],al
    1e04:	56                   	push   esi
    1e05:	65 00 00             	add    BYTE PTR gs:[eax],al
    1e08:	00 04 2e             	add    BYTE PTR [esi+ebp*1],al
    1e0b:	05 00 00 03 d8       	add    eax,0xd8030000
    1e10:	65 00 00             	add    BYTE PTR gs:[eax],al
    1e13:	00 02                	add    BYTE PTR [edx],al
    1e15:	04 05                	add    al,0x5
    1e17:	05 00 00 00 02       	add    eax,0x2000000
    1e1c:	0c 04                	or     al,0x4
    1e1e:	3d 01 00 00 02       	cmp    eax,0x2000001
    1e23:	01 06                	add    DWORD PTR [esi],eax
    1e25:	75 00                	jne    1e27 <sysEnter_Vector-0x12e1d9>
    1e27:	00 00                	add    BYTE PTR [eax],al
    1e29:	05 f0 07 00 00       	add    eax,0x7f0
    1e2e:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    1e31:	db 00                	fild   DWORD PTR [eax]
    1e33:	00 00                	add    BYTE PTR [eax],al
    1e35:	06                   	push   es
    1e36:	c3                   	ret    
    1e37:	07                   	pop    es
    1e38:	00 00                	add    BYTE PTR [eax],al
    1e3a:	04 2e                	add    al,0x2e
    1e3c:	5a                   	pop    edx
    1e3d:	00 00                	add    BYTE PTR [eax],al
    1e3f:	00 00                	add    BYTE PTR [eax],al
    1e41:	07                   	pop    es
    1e42:	6c                   	ins    BYTE PTR es:[edi],dx
    1e43:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1e45:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    1e48:	5a                   	pop    edx
    1e49:	00 00                	add    BYTE PTR [eax],al
    1e4b:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1e4e:	ea 07 00 00 04 30 db 	jmp    0xdb30:0x4000007
    1e55:	00 00                	add    BYTE PTR [eax],al
    1e57:	00 08                	add    BYTE PTR [eax],cl
    1e59:	06                   	push   es
    1e5a:	a9 07 00 00 04       	test   eax,0x4000007
    1e5f:	31 e2                	xor    edx,esp
    1e61:	00 00                	add    BYTE PTR [eax],al
    1e63:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    1e66:	02 01                	add    al,BYTE PTR [ecx]
    1e68:	02 ea                	add    ch,dl
    1e6a:	00 00                	add    BYTE PTR [eax],al
    1e6c:	00 08                	add    BYTE PTR [eax],cl
    1e6e:	04 9e                	add    al,0x9e
    1e70:	00 00                	add    BYTE PTR [eax],al
    1e72:	00 04 b3             	add    BYTE PTR [ebx+esi*4],al
    1e75:	07                   	pop    es
    1e76:	00 00                	add    BYTE PTR [eax],al
    1e78:	04 32                	add    al,0x32
    1e7a:	9e                   	sahf   
    1e7b:	00 00                	add    BYTE PTR [eax],al
    1e7d:	00 02                	add    BYTE PTR [edx],al
    1e7f:	04 07                	add    al,0x7
    1e81:	5a                   	pop    edx
    1e82:	01 00                	add    DWORD PTR [eax],eax
    1e84:	00 09                	add    BYTE PTR [ecx],cl
    1e86:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1e87:	03 00                	add    eax,DWORD PTR [eax]
    1e89:	00 04 65 00 00 00 06 	add    BYTE PTR [eiz*2+0x6000000],al
    1e90:	15 c8 01 00 00       	adc    eax,0x1c8
    1e95:	0a 5d 03             	or     bl,BYTE PTR [ebp+0x3]
    1e98:	00 00                	add    BYTE PTR [eax],al
    1e9a:	00 0a                	add    BYTE PTR [edx],cl
    1e9c:	aa                   	stos   BYTE PTR es:[edi],al
    1e9d:	04 00                	add    al,0x0
    1e9f:	00 01                	add    BYTE PTR [ecx],al
    1ea1:	0a ce                	or     cl,dh
    1ea3:	02 00                	add    al,BYTE PTR [eax]
    1ea5:	00 02                	add    BYTE PTR [edx],al
    1ea7:	0a 9c 04 00 00 03 0a 	or     bl,BYTE PTR [esp+eax*1+0xa030000]
    1eae:	05 03 00 00 04       	add    eax,0x4000003
    1eb3:	0a f7                	or     dh,bh
    1eb5:	02 00                	add    al,BYTE PTR [eax]
    1eb7:	00 05 0a 7a 04 00    	add    BYTE PTR ds:0x47a0a,al
    1ebd:	00 06                	add    BYTE PTR [esi],al
    1ebf:	0a ed                	or     ch,ch
    1ec1:	03 00                	add    eax,DWORD PTR [eax]
    1ec3:	00 07                	add    BYTE PTR [edi],al
    1ec5:	0a 34 03             	or     dh,BYTE PTR [ebx+eax*1]
    1ec8:	00 00                	add    BYTE PTR [eax],al
    1eca:	08 0a                	or     BYTE PTR [edx],cl
    1ecc:	e0 03                	loopne 1ed1 <sysEnter_Vector-0x12e12f>
    1ece:	00 00                	add    BYTE PTR [eax],al
    1ed0:	09 0a                	or     DWORD PTR [edx],ecx
    1ed2:	fa                   	cli    
    1ed3:	03 00                	add    eax,DWORD PTR [eax]
    1ed5:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    1ed8:	25 04 00 00 59       	and    eax,0x59000004
    1edd:	0a 96 02 00 00 61    	or     dl,BYTE PTR [esi+0x61000002]
    1ee3:	0a bb 03 00 00 97    	or     bh,BYTE PTR [ebx-0x68fffffd]
    1ee9:	0b 7d 03             	or     edi,DWORD PTR [ebp+0x3]
    1eec:	00 00                	add    BYTE PTR [eax],al
    1eee:	63 01                	arpl   WORD PTR [ecx],ax
    1ef0:	0b 18                	or     ebx,DWORD PTR [eax]
    1ef2:	04 00                	add    al,0x0
    1ef4:	00 64 01 0b          	add    BYTE PTR [ecx+eax*1+0xb],ah
    1ef8:	49                   	dec    ecx
    1ef9:	04 00                	add    al,0x0
    1efb:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1efe:	0b ba 02 00 00 66    	or     edi,DWORD PTR [edx+0x66000002]
    1f04:	01 0b                	add    DWORD PTR [ebx],ecx
    1f06:	1f                   	pop    ds
    1f07:	03 00                	add    eax,DWORD PTR [eax]
    1f09:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1f0c:	0b 12                	or     edx,DWORD PTR [edx]
    1f0e:	03 00                	add    eax,DWORD PTR [eax]
    1f10:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1f13:	0b bd 04 00 00 69    	or     edi,DWORD PTR [ebp+0x69000004]
    1f19:	01 0b                	add    DWORD PTR [ebx],ecx
    1f1b:	a9 02 00 00 70       	test   eax,0x70000002
    1f20:	01 0b                	add    DWORD PTR [ebx],ecx
    1f22:	e7 02                	out    0x2,eax
    1f24:	00 00                	add    BYTE PTR [eax],al
    1f26:	71 01                	jno    1f29 <sysEnter_Vector-0x12e0d7>
    1f28:	0b 8e 04 00 00 00    	or     ecx,DWORD PTR [esi+0x4]
    1f2e:	03 0b                	add    ecx,DWORD PTR [ebx]
    1f30:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
    1f33:	00 01                	add    BYTE PTR [ecx],al
    1f35:	03 0b                	add    ecx,DWORD PTR [ebx]
    1f37:	94                   	xchg   esp,eax
    1f38:	03 00                	add    eax,DWORD PTR [eax]
    1f3a:	00 02                	add    BYTE PTR [edx],al
    1f3c:	03 0b                	add    ecx,DWORD PTR [ebx]
    1f3e:	6d                   	ins    DWORD PTR es:[edi],dx
    1f3f:	03 00                	add    eax,DWORD PTR [eax]
    1f41:	00 03                	add    BYTE PTR [ebx],al
    1f43:	03 0b                	add    ecx,DWORD PTR [ebx]
    1f45:	cf                   	iret   
    1f46:	03 00                	add    eax,DWORD PTR [eax]
    1f48:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1f4b:	0b 39                	or     edi,DWORD PTR [ecx]
    1f4d:	04 00                	add    al,0x0
    1f4f:	00 05 03 00 0c 04    	add    BYTE PTR ds:0x40c0003,al
    1f55:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1f58:	49                   	dec    ecx
    1f59:	00 00                	add    BYTE PTR [eax],al
    1f5b:	00 08                	add    BYTE PTR [eax],cl
    1f5d:	04 97                	add    al,0x97
    1f5f:	00 00                	add    BYTE PTR [eax],al
    1f61:	00 0d f6 07 00 00    	add    BYTE PTR ds:0x7f6,cl
    1f67:	01 0d fc 16 00 9f    	add    DWORD PTR ds:0x9f0016fc,ecx
    1f6d:	6c                   	ins    BYTE PTR es:[edi],dx
    1f6e:	00 00                	add    BYTE PTR [eax],al
    1f70:	00 01                	add    BYTE PTR [ecx],al
    1f72:	9c                   	pushf  
    1f73:	0e                   	push   cs
    1f74:	ca 07 00             	retf   0x7
    1f77:	00 01                	add    BYTE PTR [ecx],al
    1f79:	17                   	pop    ss
    1f7a:	5a                   	pop    edx
    1f7b:	00 00                	add    BYTE PTR [eax],al
    1f7d:	00 68 17             	add    BYTE PTR [eax+0x17],ch
    1f80:	00 9f 87 00 00 00    	add    BYTE PTR [edi+0x87],bl
    1f86:	01 9c 1e 02 00 00 0f 	add    DWORD PTR [esi+ebx*1+0xf000002],ebx
    1f8d:	3e                   	ds
    1f8e:	06                   	push   es
    1f8f:	00 00                	add    BYTE PTR [eax],al
    1f91:	01 17                	add    DWORD PTR [edi],edx
    1f93:	7e 00                	jle    1f95 <sysEnter_Vector-0x12e06b>
    1f95:	00 00                	add    BYTE PTR [eax],al
    1f97:	02 91 00 10 2c 08    	add    dl,BYTE PTR [ecx+0x82c1000]
    1f9d:	00 00                	add    BYTE PTR [eax],al
    1f9f:	01 1b                	add    DWORD PTR [ebx],ebx
    1fa1:	5a                   	pop    edx
    1fa2:	00 00                	add    BYTE PTR [eax],al
    1fa4:	00 02                	add    BYTE PTR [edx],al
    1fa6:	91                   	xchg   ecx,eax
    1fa7:	74 00                	je     1fa9 <sysEnter_Vector-0x12e057>
    1fa9:	11 bd 07 00 00 01    	adc    DWORD PTR [ebp+0x1000007],edi
    1faf:	2f                   	das    
    1fb0:	ef                   	out    dx,eax
    1fb1:	17                   	pop    ss
    1fb2:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1fb8:	01 9c 4f 02 00 00 0f 	add    DWORD PTR [edi+ecx*2+0xf000002],ebx
    1fbf:	61                   	popa   
    1fc0:	08 00                	or     BYTE PTR [eax],al
    1fc2:	00 01                	add    BYTE PTR [ecx],al
    1fc4:	2f                   	das    
    1fc5:	c8 01 00 00          	enter  0x1,0x0
    1fc9:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    1fcf:	00 01                	add    BYTE PTR [ecx],al
    1fd1:	31 4f 02             	xor    DWORD PTR [edi+0x2],ecx
    1fd4:	00 00                	add    BYTE PTR [eax],al
    1fd6:	02 91 74 00 08 04    	add    dl,BYTE PTR [ecx+0x4080074]
    1fdc:	e8 00 00 00 13       	call   13001fe1 <sysEnter_Vector+0x12ed1fe1>
    1fe1:	a1 07 00 00 01       	mov    eax,ds:0x1000007
    1fe6:	43                   	inc    ebx
    1fe7:	c8 01 00 00          	enter  0x1,0x0
    1feb:	46                   	inc    esi
    1fec:	18 00                	sbb    BYTE PTR [eax],al
    1fee:	9f                   	lahf   
    1fef:	d4 01                	aam    0x1
    1ff1:	00 00                	add    BYTE PTR [eax],al
    1ff3:	01 9c c3 02 00 00 0f 	add    DWORD PTR [ebx+eax*8+0xf000002],ebx
    1ffa:	3e                   	ds
    1ffb:	06                   	push   es
    1ffc:	00 00                	add    BYTE PTR [eax],al
    1ffe:	01 43 7e             	add    DWORD PTR [ebx+0x7e],eax
    2001:	00 00                	add    BYTE PTR [eax],al
    2003:	00 02                	add    BYTE PTR [edx],al
    2005:	91                   	xchg   ecx,eax
    2006:	00 10                	add    BYTE PTR [eax],dl
    2008:	14 05                	adc    al,0x5
    200a:	00 00                	add    BYTE PTR [eax],al
    200c:	01 45 c8             	add    DWORD PTR [ebp-0x38],eax
    200f:	01 00                	add    DWORD PTR [eax],eax
    2011:	00 02                	add    BYTE PTR [edx],al
    2013:	91                   	xchg   ecx,eax
    2014:	60                   	pusha  
    2015:	10 34 08             	adc    BYTE PTR [eax+ecx*1],dh
    2018:	00 00                	add    BYTE PTR [eax],al
    201a:	01 47 5a             	add    DWORD PTR [edi+0x5a],eax
    201d:	00 00                	add    BYTE PTR [eax],al
    201f:	00 02                	add    BYTE PTR [edx],al
    2021:	91                   	xchg   ecx,eax
    2022:	6c                   	ins    BYTE PTR es:[edi],dx
    2023:	10 18                	adc    BYTE PTR [eax],bl
    2025:	08 00                	or     BYTE PTR [eax],al
    2027:	00 01                	add    BYTE PTR [ecx],al
    2029:	48                   	dec    eax
    202a:	5a                   	pop    edx
    202b:	00 00                	add    BYTE PTR [eax],al
    202d:	00 02                	add    BYTE PTR [edx],al
    202f:	91                   	xchg   ecx,eax
    2030:	68 10 59 08 00       	push   0x85910
    2035:	00 01                	add    BYTE PTR [ecx],al
    2037:	49                   	dec    ecx
    2038:	4f                   	dec    edi
    2039:	02 00                	add    al,BYTE PTR [eax]
    203b:	00 02                	add    BYTE PTR [edx],al
    203d:	91                   	xchg   ecx,eax
    203e:	64 10 6a 08          	adc    BYTE PTR fs:[edx+0x8],ch
    2042:	00 00                	add    BYTE PTR [eax],al
    2044:	01 4a c3             	add    DWORD PTR [edx-0x3d],ecx
    2047:	02 00                	add    al,BYTE PTR [eax]
    2049:	00 02                	add    BYTE PTR [edx],al
    204b:	91                   	xchg   ecx,eax
    204c:	5c                   	pop    esp
    204d:	00 08                	add    BYTE PTR [eax],cl
    204f:	04 41                	add    al,0x41
    2051:	00 00                	add    BYTE PTR [eax],al
    2053:	00 13                	add    BYTE PTR [ebx],dl
    2055:	fa                   	cli    
    2056:	07                   	pop    es
    2057:	00 00                	add    BYTE PTR [eax],al
    2059:	01 6a c8             	add    DWORD PTR [edx-0x38],ebp
    205c:	01 00                	add    DWORD PTR [eax],eax
    205e:	00 1a                	add    BYTE PTR [edx],bl
    2060:	1a 00                	sbb    al,BYTE PTR [eax]
    2062:	9f                   	lahf   
    2063:	20 00                	and    BYTE PTR [eax],al
    2065:	00 00                	add    BYTE PTR [eax],al
    2067:	01 9c f1 02 00 00 0f 	add    DWORD PTR [ecx+esi*8+0xf000002],ebx
    206e:	3e                   	ds
    206f:	06                   	push   es
    2070:	00 00                	add    BYTE PTR [eax],al
    2072:	01 6a 7e             	add    DWORD PTR [edx+0x7e],ebp
    2075:	00 00                	add    BYTE PTR [eax],al
    2077:	00 02                	add    BYTE PTR [edx],al
    2079:	91                   	xchg   ecx,eax
    207a:	00 00                	add    BYTE PTR [eax],al
    207c:	13 3b                	adc    edi,DWORD PTR [ebx]
    207e:	08 00                	or     BYTE PTR [eax],al
    2080:	00 01                	add    BYTE PTR [ecx],al
    2082:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2083:	c8 01 00 00          	enter  0x1,0x0
    2087:	3a 1a                	cmp    bl,BYTE PTR [edx]
    2089:	00 9f 85 00 00 00    	add    BYTE PTR [edi+0x85],bl
    208f:	01 9c 42 03 00 00 0f 	add    DWORD PTR [edx+eax*2+0xf000003],ebx
    2096:	01 08                	add    DWORD PTR [eax],ecx
    2098:	00 00                	add    BYTE PTR [eax],al
    209a:	01 6f c8             	add    DWORD PTR [edi-0x38],ebp
    209d:	01 00                	add    DWORD PTR [eax],eax
    209f:	00 02                	add    BYTE PTR [edx],al
    20a1:	91                   	xchg   ecx,eax
    20a2:	00 0f                	add    BYTE PTR [edi],cl
    20a4:	25 08 00 00 01       	and    eax,0x1000008
    20a9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    20aa:	5a                   	pop    edx
    20ab:	00 00                	add    BYTE PTR [eax],al
    20ad:	00 02                	add    BYTE PTR [edx],al
    20af:	91                   	xchg   ecx,eax
    20b0:	04 10                	add    al,0x10
    20b2:	44                   	inc    esp
    20b3:	08 00                	or     BYTE PTR [eax],al
    20b5:	00 01                	add    BYTE PTR [ecx],al
    20b7:	73 42                	jae    20fb <sysEnter_Vector-0x12df05>
    20b9:	03 00                	add    eax,DWORD PTR [eax]
    20bb:	00 02                	add    BYTE PTR [edx],al
    20bd:	91                   	xchg   ecx,eax
    20be:	6c                   	ins    BYTE PTR es:[edi],dx
    20bf:	12 6d 70             	adc    ch,BYTE PTR [ebp+0x70]
    20c2:	00 01                	add    BYTE PTR [ecx],al
    20c4:	76 4f                	jbe    2115 <sysEnter_Vector-0x12deeb>
    20c6:	02 00                	add    al,BYTE PTR [eax]
    20c8:	00 02                	add    BYTE PTR [edx],al
    20ca:	91                   	xchg   ecx,eax
    20cb:	68 00 08 04 73       	push   0x73040800
    20d0:	00 00                	add    BYTE PTR [eax],al
    20d2:	00 13                	add    BYTE PTR [ebx],dl
    20d4:	7e 08                	jle    20de <sysEnter_Vector-0x12df22>
    20d6:	00 00                	add    BYTE PTR [eax],al
    20d8:	01 82 c8 01 00 00    	add    DWORD PTR [edx+0x1c8],eax
    20de:	bf 1a 00 9f 23       	mov    edi,0x239f001a
    20e3:	00 00                	add    BYTE PTR [eax],al
    20e5:	00 01                	add    BYTE PTR [ecx],al
    20e7:	9c                   	pushf  
    20e8:	7e 03                	jle    20ed <sysEnter_Vector-0x12df13>
    20ea:	00 00                	add    BYTE PTR [eax],al
    20ec:	0f 01 08             	sidtd  [eax]
    20ef:	00 00                	add    BYTE PTR [eax],al
    20f1:	01 82 c8 01 00 00    	add    DWORD PTR [edx+0x1c8],eax
    20f7:	02 91 00 0f 25 08    	add    dl,BYTE PTR [ecx+0x8250f00]
    20fd:	00 00                	add    BYTE PTR [eax],al
    20ff:	01 82 5a 00 00 00    	add    DWORD PTR [edx+0x5a],eax
    2105:	02 91 04 00 14 ae    	add    dl,BYTE PTR [ecx-0x51ebfffc]
    210b:	07                   	pop    es
    210c:	00 00                	add    BYTE PTR [eax],al
    210e:	01 87 e2 1a 00 9f    	add    DWORD PTR [edi-0x60ffe51e],eax
    2114:	1b 00                	sbb    eax,DWORD PTR [eax]
    2116:	00 00                	add    BYTE PTR [eax],al
    2118:	01 9c a2 03 00 00 0f 	add    DWORD PTR [edx+eiz*4+0xf000003],ebx
    211f:	61                   	popa   
    2120:	08 00                	or     BYTE PTR [eax],al
    2122:	00 01                	add    BYTE PTR [ecx],al
    2124:	87 c8                	xchg   eax,ecx
    2126:	01 00                	add    DWORD PTR [eax],eax
    2128:	00 02                	add    BYTE PTR [edx],al
    212a:	91                   	xchg   ecx,eax
    212b:	00 00                	add    BYTE PTR [eax],al
    212d:	0d 09 08 00 00       	or     eax,0x809
    2132:	01 8c fd 1a 00 9f 32 	add    DWORD PTR [ebp+edi*8+0x329f001a],ecx
    2139:	00 00                	add    BYTE PTR [eax],al
    213b:	00 01                	add    BYTE PTR [ecx],al
    213d:	9c                   	pushf  
    213e:	15 5b 00 00 00       	adc    eax,0x5b
    2143:	04 34                	add    al,0x34
    2145:	5a                   	pop    edx
    2146:	00 00                	add    BYTE PTR [eax],al
    2148:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    214e:	9f                   	lahf   
    214f:	15 0b 01 00 00       	adc    eax,0x10b
    2154:	04 35                	add    al,0x35
    2156:	5a                   	pop    edx
    2157:	00 00                	add    BYTE PTR [eax],al
    2159:	00 05 03 88 60 00    	add    BYTE PTR ds:0x608803,al
    215f:	9f                   	lahf   
    2160:	15 64 00 00 00       	adc    eax,0x64
    2165:	04 36                	add    al,0x36
    2167:	5a                   	pop    edx
    2168:	00 00                	add    BYTE PTR [eax],al
    216a:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    2170:	9f                   	lahf   
    2171:	15 53 01 00 00       	adc    eax,0x153
    2176:	04 37                	add    al,0x37
    2178:	89 00                	mov    DWORD PTR [eax],eax
    217a:	00 00                	add    BYTE PTR [eax],al
    217c:	05 03 90 60 00       	add    eax,0x609003
    2181:	9f                   	lahf   
    2182:	15 38 00 00 00       	adc    eax,0x38
    2187:	05 53 08 04 00       	add    eax,0x40853
    218c:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    2192:	9f                   	lahf   
    2193:	08 04 d1             	or     BYTE PTR [ecx+edx*8],al
    2196:	01 00                	add    DWORD PTR [eax],eax
    2198:	00 00                	add    BYTE PTR [eax],al
    219a:	2c 02                	sub    al,0x2
    219c:	00 00                	add    BYTE PTR [eax],al
    219e:	04 00                	add    al,0x0
    21a0:	4e                   	dec    esi
    21a1:	0a 00                	or     al,BYTE PTR [eax]
    21a3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    21a6:	83 00 00             	add    DWORD PTR [eax],0x0
    21a9:	00 0c 86             	add    BYTE PTR [esi+eax*4],cl
    21ac:	08 00                	or     BYTE PTR [eax],al
    21ae:	00 15 00 00 00 30    	add    BYTE PTR ds:0x30000000,dl
    21b4:	1b 00                	sbb    eax,DWORD PTR [eax]
    21b6:	9f                   	lahf   
    21b7:	bb 01 00 00 e5       	mov    ebx,0xe5000001
    21bc:	0c 00                	or     al,0x0
    21be:	00 02                	add    BYTE PTR [edx],al
    21c0:	01 08                	add    DWORD PTR [eax],ecx
    21c2:	6c                   	ins    BYTE PTR es:[edi],dx
    21c3:	00 00                	add    BYTE PTR [eax],al
    21c5:	00 02                	add    BYTE PTR [edx],al
    21c7:	02 07                	add    al,BYTE PTR [edi]
    21c9:	f0 00 00             	lock add BYTE PTR [eax],al
    21cc:	00 02                	add    BYTE PTR [edx],al
    21ce:	04 07                	add    al,0x7
    21d0:	4e                   	dec    esi
    21d1:	00 00                	add    BYTE PTR [eax],al
    21d3:	00 02                	add    BYTE PTR [edx],al
    21d5:	04 07                	add    al,0x7
    21d7:	49                   	dec    ecx
    21d8:	00 00                	add    BYTE PTR [eax],al
    21da:	00 02                	add    BYTE PTR [edx],al
    21dc:	01 06                	add    DWORD PTR [esi],eax
    21de:	6e                   	outs   dx,BYTE PTR ds:[esi]
    21df:	00 00                	add    BYTE PTR [eax],al
    21e1:	00 02                	add    BYTE PTR [edx],al
    21e3:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    21e9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    21f0:	02 08                	add    cl,BYTE PTR [eax]
    21f2:	05 00 00 00 00       	add    eax,0x0
    21f7:	02 08                	add    cl,BYTE PTR [eax]
    21f9:	07                   	pop    es
    21fa:	44                   	inc    esp
    21fb:	00 00                	add    BYTE PTR [eax],al
    21fd:	00 02                	add    BYTE PTR [edx],al
    21ff:	04 05                	add    al,0x5
    2201:	05 00 00 00 02       	add    eax,0x2000000
    2206:	04 07                	add    al,0x7
    2208:	5a                   	pop    edx
    2209:	01 00                	add    DWORD PTR [eax],eax
    220b:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    220e:	05 04 7a 00 00       	add    eax,0x7a04
    2213:	00 02                	add    BYTE PTR [edx],al
    2215:	01 06                	add    DWORD PTR [esi],eax
    2217:	75 00                	jne    2219 <sysEnter_Vector-0x12dde7>
    2219:	00 00                	add    BYTE PTR [eax],al
    221b:	06                   	push   es
    221c:	7a 00                	jp     221e <sysEnter_Vector-0x12dde2>
    221e:	00 00                	add    BYTE PTR [eax],al
    2220:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    2223:	00 00                	add    BYTE PTR [eax],al
    2225:	00 05 04 92 00 00    	add    BYTE PTR ds:0x9204,al
    222b:	00 07                	add    BYTE PTR [edi],al
    222d:	7a 00                	jp     222f <sysEnter_Vector-0x12ddd1>
    222f:	00 00                	add    BYTE PTR [eax],al
    2231:	06                   	push   es
    2232:	2e                   	cs
    2233:	05 00 00 03 d8       	add    eax,0xd8030000
    2238:	33 00                	xor    eax,DWORD PTR [eax]
    223a:	00 00                	add    BYTE PTR [eax],al
    223c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    223f:	3d 01 00 00 02       	cmp    eax,0x2000001
    2244:	01 02                	add    DWORD PTR [edx],eax
    2246:	ea 00 00 00 08 98 08 	jmp    0x898:0x8000000
    224d:	00 00                	add    BYTE PTR [eax],al
    224f:	01 0b                	add    DWORD PTR [ebx],ecx
    2251:	72 00                	jb     2253 <sysEnter_Vector-0x12ddad>
    2253:	00 00                	add    BYTE PTR [eax],al
    2255:	30 1b                	xor    BYTE PTR [ebx],bl
    2257:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    225d:	01 9c 7a 01 00 00 09 	add    DWORD PTR [edx+edi*2+0x9000001],ebx
    2264:	93                   	xchg   ebx,eax
    2265:	08 00                	or     BYTE PTR [eax],al
    2267:	00 01                	add    BYTE PTR [ecx],al
    2269:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    226c:	00 00                	add    BYTE PTR [eax],al
    226e:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2274:	63 00                	arpl   WORD PTR [eax],ax
    2276:	01 0b                	add    DWORD PTR [ebx],ecx
    2278:	7a 01                	jp     227b <sysEnter_Vector-0x12dd85>
    227a:	00 00                	add    BYTE PTR [eax],al
    227c:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2282:	01 0b                	add    DWORD PTR [ebx],ecx
    2284:	97                   	xchg   edi,eax
    2285:	00 00                	add    BYTE PTR [eax],al
    2287:	00 02                	add    BYTE PTR [edx],al
    2289:	91                   	xchg   ecx,eax
    228a:	08 0b                	or     BYTE PTR [ebx],cl
    228c:	64                   	fs
    228d:	77 00                	ja     228f <sysEnter_Vector-0x12dd71>
    228f:	01 0d a9 00 00 00    	add    DWORD PTR ds:0xa9,ecx
    2295:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    229b:	00 01                	add    BYTE PTR [ecx],al
    229d:	0d a9 00 00 00       	or     eax,0xa9
    22a2:	02 91 5f 0c 62 1b    	add    dl,BYTE PTR [ecx+0x1b620c5f]
    22a8:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    22ae:	31 01                	xor    DWORD PTR [ecx],eax
    22b0:	00 00                	add    BYTE PTR [eax],al
    22b2:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    22b5:	01 14 81             	add    DWORD PTR [ecx+eax*4],edx
    22b8:	01 00                	add    DWORD PTR [eax],eax
    22ba:	00 02                	add    BYTE PTR [edx],al
    22bc:	91                   	xchg   ecx,eax
    22bd:	74 0b                	je     22ca <sysEnter_Vector-0x12dd36>
    22bf:	74 00                	je     22c1 <sysEnter_Vector-0x12dd3f>
    22c1:	01 15 8c 01 00 00    	add    DWORD PTR ds:0x18c,edx
    22c7:	02 91 70 00 0c e5    	add    dl,BYTE PTR [ecx-0x1af3ff90]
    22cd:	1b 00                	sbb    eax,DWORD PTR [eax]
    22cf:	9f                   	lahf   
    22d0:	79 00                	jns    22d2 <sysEnter_Vector-0x12dd2e>
    22d2:	00 00                	add    BYTE PTR [eax],al
    22d4:	57                   	push   edi
    22d5:	01 00                	add    DWORD PTR [eax],eax
    22d7:	00 0b                	add    BYTE PTR [ebx],cl
    22d9:	66                   	data16
    22da:	00 01                	add    BYTE PTR [ecx],al
    22dc:	24 81                	and    al,0x81
    22de:	01 00                	add    DWORD PTR [eax],eax
    22e0:	00 02                	add    BYTE PTR [edx],al
    22e2:	91                   	xchg   ecx,eax
    22e3:	6c                   	ins    BYTE PTR es:[edi],dx
    22e4:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    22e8:	25 8c 01 00 00       	and    eax,0x18c
    22ed:	02 91 68 00 0d 5e    	add    dl,BYTE PTR [ecx+0x5e0d0068]
    22f3:	1c 00                	sbb    al,0x0
    22f5:	9f                   	lahf   
    22f6:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    22f9:	00 0b                	add    BYTE PTR [ebx],cl
    22fb:	66                   	data16
    22fc:	00 01                	add    BYTE PTR [ecx],al
    22fe:	33 8c 00 00 00 02 91 	xor    ecx,DWORD PTR [eax+eax*1-0x6efe0000]
    2305:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    230a:	34 74                	xor    al,0x74
    230c:	00 00                	add    BYTE PTR [eax],al
    230e:	00 02                	add    BYTE PTR [edx],al
    2310:	91                   	xchg   ecx,eax
    2311:	60                   	pusha  
    2312:	00 00                	add    BYTE PTR [eax],al
    2314:	05 04 80 01 00       	add    eax,0x18004
    2319:	00 0e                	add    BYTE PTR [esi],cl
    231b:	05 04 87 01 00       	add    eax,0x18704
    2320:	00 07                	add    BYTE PTR [edi],al
    2322:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2328:	81 00 00 00 0f a0    	add    DWORD PTR [eax],0xa00f0000
    232e:	08 00                	or     BYTE PTR [eax],al
    2330:	00 01                	add    BYTE PTR [ecx],al
    2332:	42                   	inc    edx
    2333:	72 00                	jb     2335 <sysEnter_Vector-0x12dccb>
    2335:	00 00                	add    BYTE PTR [eax],al
    2337:	cb                   	retf   
    2338:	1c 00                	sbb    al,0x0
    233a:	9f                   	lahf   
    233b:	20 00                	and    BYTE PTR [eax],al
    233d:	00 00                	add    BYTE PTR [eax],al
    233f:	01 9c d4 01 00 00 09 	add    DWORD PTR [esp+edx*8+0x9000001],ebx
    2346:	93                   	xchg   ebx,eax
    2347:	08 00                	or     BYTE PTR [eax],al
    2349:	00 01                	add    BYTE PTR [ecx],al
    234b:	42                   	inc    edx
    234c:	72 00                	jb     234e <sysEnter_Vector-0x12dcb2>
    234e:	00 00                	add    BYTE PTR [eax],al
    2350:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2356:	63 00                	arpl   WORD PTR [eax],ax
    2358:	01 42 7a             	add    DWORD PTR [edx+0x7a],eax
    235b:	01 00                	add    DWORD PTR [eax],eax
    235d:	00 02                	add    BYTE PTR [edx],al
    235f:	91                   	xchg   ecx,eax
    2360:	04 0a                	add    al,0xa
    2362:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2363:	00 01                	add    BYTE PTR [ecx],al
    2365:	42                   	inc    edx
    2366:	97                   	xchg   edi,eax
    2367:	00 00                	add    BYTE PTR [eax],al
    2369:	00 02                	add    BYTE PTR [edx],al
    236b:	91                   	xchg   ecx,eax
    236c:	08 00                	or     BYTE PTR [eax],al
    236e:	10 5b 00             	adc    BYTE PTR [ebx+0x0],bl
    2371:	00 00                	add    BYTE PTR [eax],al
    2373:	04 34                	add    al,0x34
    2375:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    237b:	84 60 00             	test   BYTE PTR [eax+0x0],ah
    237e:	9f                   	lahf   
    237f:	10 0b                	adc    BYTE PTR [ebx],cl
    2381:	01 00                	add    DWORD PTR [eax],eax
    2383:	00 04 35 81 00 00 00 	add    BYTE PTR [esi*1+0x81],al
    238a:	05 03 88 60 00       	add    eax,0x608803
    238f:	9f                   	lahf   
    2390:	10 64 00 00          	adc    BYTE PTR [eax+eax*1+0x0],ah
    2394:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2397:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    239d:	80 60 00 9f          	and    BYTE PTR [eax+0x0],0x9f
    23a1:	10 53 01             	adc    BYTE PTR [ebx+0x1],dl
    23a4:	00 00                	add    BYTE PTR [eax],al
    23a6:	04 37                	add    al,0x37
    23a8:	64 00 00             	add    BYTE PTR fs:[eax],al
    23ab:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    23b1:	9f                   	lahf   
    23b2:	10 38                	adc    BYTE PTR [eax],bh
    23b4:	00 00                	add    BYTE PTR [eax],al
    23b6:	00 05 53 29 02 00    	add    BYTE PTR ds:0x22953,al
    23bc:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    23c2:	9f                   	lahf   
    23c3:	05 04 74 00 00       	add    eax,0x7404
    23c8:	00 00                	add    BYTE PTR [eax],al
    23ca:	eb 01                	jmp    23cd <sysEnter_Vector-0x12dc33>
    23cc:	00 00                	add    BYTE PTR [eax],al
    23ce:	04 00                	add    al,0x0
    23d0:	2b 0b                	sub    ecx,DWORD PTR [ebx]
    23d2:	00 00                	add    BYTE PTR [eax],al
    23d4:	04 01                	add    al,0x1
    23d6:	83 00 00             	add    DWORD PTR [eax],0x0
    23d9:	00 0c a7             	add    BYTE PTR [edi+eiz*4],cl
    23dc:	08 00                	or     BYTE PTR [eax],al
    23de:	00 15 00 00 00 ec    	add    BYTE PTR ds:0xec000000,dl
    23e4:	1c 00                	sbb    al,0x0
    23e6:	9f                   	lahf   
    23e7:	e7 00                	out    0x0,eax
    23e9:	00 00                	add    BYTE PTR [eax],al
    23eb:	d0 0d 00 00 02 01    	ror    BYTE PTR ds:0x1020000,1
    23f1:	06                   	push   es
    23f2:	75 00                	jne    23f4 <sysEnter_Vector-0x12dc0c>
    23f4:	00 00                	add    BYTE PTR [eax],al
    23f6:	02 01                	add    al,BYTE PTR [ecx]
    23f8:	06                   	push   es
    23f9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    23fa:	00 00                	add    BYTE PTR [eax],al
    23fc:	00 02                	add    BYTE PTR [edx],al
    23fe:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    2404:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    240b:	02 08                	add    cl,BYTE PTR [eax]
    240d:	05 00 00 00 00       	add    eax,0x0
    2412:	04 76                	add    al,0x76
    2414:	08 00                	or     BYTE PTR [eax],al
    2416:	00 02                	add    BYTE PTR [edx],al
    2418:	2e                   	cs
    2419:	53                   	push   ebx
    241a:	00 00                	add    BYTE PTR [eax],al
    241c:	00 02                	add    BYTE PTR [edx],al
    241e:	01 08                	add    DWORD PTR [eax],ecx
    2420:	6c                   	ins    BYTE PTR es:[edi],dx
    2421:	00 00                	add    BYTE PTR [eax],al
    2423:	00 04 c8             	add    BYTE PTR [eax+ecx*8],al
    2426:	08 00                	or     BYTE PTR [eax],al
    2428:	00 02                	add    BYTE PTR [edx],al
    242a:	31 65 00             	xor    DWORD PTR [ebp+0x0],esp
    242d:	00 00                	add    BYTE PTR [eax],al
    242f:	02 02                	add    al,BYTE PTR [edx]
    2431:	07                   	pop    es
    2432:	f0 00 00             	lock add BYTE PTR [eax],al
    2435:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    2438:	00 00                	add    BYTE PTR [eax],al
    243a:	00 02                	add    BYTE PTR [edx],al
    243c:	34 77                	xor    al,0x77
    243e:	00 00                	add    BYTE PTR [eax],al
    2440:	00 02                	add    BYTE PTR [edx],al
    2442:	04 07                	add    al,0x7
    2444:	4e                   	dec    esi
    2445:	00 00                	add    BYTE PTR [eax],al
    2447:	00 02                	add    BYTE PTR [edx],al
    2449:	08 07                	or     BYTE PTR [edi],al
    244b:	44                   	inc    esp
    244c:	00 00                	add    BYTE PTR [eax],al
    244e:	00 04 2e             	add    BYTE PTR [esi+ebp*1],al
    2451:	05 00 00 03 d8       	add    eax,0xd8030000
    2456:	77 00                	ja     2458 <sysEnter_Vector-0x12dba8>
    2458:	00 00                	add    BYTE PTR [eax],al
    245a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2461:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2464:	3d 01 00 00 02       	cmp    eax,0x2000001
    2469:	01 02                	add    DWORD PTR [edx],eax
    246b:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    2472:	5a                   	pop    edx
    2473:	01 00                	add    DWORD PTR [eax],eax
    2475:	00 05 04 02 04 07    	add    BYTE PTR ds:0x7040204,al
    247b:	49                   	dec    ecx
    247c:	00 00                	add    BYTE PTR [eax],al
    247e:	00 06                	add    BYTE PTR [esi],al
    2480:	04 25                	add    al,0x25
    2482:	00 00                	add    BYTE PTR [eax],al
    2484:	00 07                	add    BYTE PTR [edi],al
    2486:	bb 08 00 00 01       	mov    ebx,0x1000008
    248b:	08 ac 00 00 00 ec 1c 	or     BYTE PTR [eax+eax*1+0x1cec0000],ch
    2492:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2498:	01 9c 3e 01 00 00 08 	add    DWORD PTR [esi+edi*1+0x8000001],ebx
    249f:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    24a2:	01 08                	add    DWORD PTR [eax],ecx
    24a4:	ac                   	lods   al,BYTE PTR ds:[esi]
    24a5:	00 00                	add    BYTE PTR [eax],al
    24a7:	00 02                	add    BYTE PTR [edx],al
    24a9:	91                   	xchg   ecx,eax
    24aa:	00 08                	add    BYTE PTR [eax],cl
    24ac:	76 61                	jbe    250f <sysEnter_Vector-0x12daf1>
    24ae:	6c                   	ins    BYTE PTR es:[edi],dx
    24af:	00 01                	add    BYTE PTR [ecx],al
    24b1:	08 3a                	or     BYTE PTR [edx],bh
    24b3:	00 00                	add    BYTE PTR [eax],al
    24b5:	00 02                	add    BYTE PTR [edx],al
    24b7:	91                   	xchg   ecx,eax
    24b8:	04 08                	add    al,0x8
    24ba:	6c                   	ins    BYTE PTR es:[edi],dx
    24bb:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    24bd:	00 01                	add    BYTE PTR [ecx],al
    24bf:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    24c5:	91                   	xchg   ecx,eax
    24c6:	08 09                	or     BYTE PTR [ecx],cl
    24c8:	64 00 01             	add    BYTE PTR fs:[ecx],al
    24cb:	0a 3e                	or     bh,BYTE PTR [esi]
    24cd:	01 00                	add    DWORD PTR [eax],eax
    24cf:	00 02                	add    BYTE PTR [edx],al
    24d1:	91                   	xchg   ecx,eax
    24d2:	74 09                	je     24dd <sysEnter_Vector-0x12db23>
    24d4:	65 00 01             	add    BYTE PTR gs:[ecx],al
    24d7:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    24db:	00 02                	add    BYTE PTR [edx],al
    24dd:	91                   	xchg   ecx,eax
    24de:	70 0a                	jo     24ea <sysEnter_Vector-0x12db16>
    24e0:	c3                   	ret    
    24e1:	08 00                	or     BYTE PTR [eax],al
    24e3:	00 01                	add    BYTE PTR [ecx],al
    24e5:	0c 5a                	or     al,0x5a
    24e7:	00 00                	add    BYTE PTR [eax],al
    24e9:	00 02                	add    BYTE PTR [edx],al
    24eb:	91                   	xchg   ecx,eax
    24ec:	6a 09                	push   0x9
    24ee:	66                   	data16
    24ef:	00 01                	add    BYTE PTR [ecx],al
    24f1:	0d 4a 01 00 00       	or     eax,0x14a
    24f6:	02 91 6c 0a d1 08    	add    dl,BYTE PTR [ecx+0x8d10a6c]
    24fc:	00 00                	add    BYTE PTR [eax],al
    24fe:	01 0e                	add    DWORD PTR [esi],ecx
    2500:	6c                   	ins    BYTE PTR es:[edi],dx
    2501:	00 00                	add    BYTE PTR [eax],al
    2503:	00 02                	add    BYTE PTR [edx],al
    2505:	91                   	xchg   ecx,eax
    2506:	64 00 06             	add    BYTE PTR fs:[esi],al
    2509:	04 48                	add    al,0x48
    250b:	00 00                	add    BYTE PTR [eax],al
    250d:	00 06                	add    BYTE PTR [esi],al
    250f:	04 5a                	add    al,0x5a
    2511:	00 00                	add    BYTE PTR [eax],al
    2513:	00 06                	add    BYTE PTR [esi],al
    2515:	04 6c                	add    al,0x6c
    2517:	00 00                	add    BYTE PTR [eax],al
    2519:	00 0b                	add    BYTE PTR [ebx],cl
    251b:	b4 08                	mov    ah,0x8
    251d:	00 00                	add    BYTE PTR [eax],al
    251f:	01 1f                	add    DWORD PTR [edi],ebx
    2521:	ac                   	lods   al,BYTE PTR ds:[esi]
    2522:	00 00                	add    BYTE PTR [eax],al
    2524:	00 b3 1d 00 9f 20    	add    BYTE PTR [ebx+0x209f001d],dh
    252a:	00 00                	add    BYTE PTR [eax],al
    252c:	00 01                	add    BYTE PTR [ecx],al
    252e:	9c                   	pushf  
    252f:	93                   	xchg   ebx,eax
    2530:	01 00                	add    DWORD PTR [eax],eax
    2532:	00 08                	add    BYTE PTR [eax],cl
    2534:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2537:	01 1f                	add    DWORD PTR [edi],ebx
    2539:	ac                   	lods   al,BYTE PTR ds:[esi]
    253a:	00 00                	add    BYTE PTR [eax],al
    253c:	00 02                	add    BYTE PTR [edx],al
    253e:	91                   	xchg   ecx,eax
    253f:	00 08                	add    BYTE PTR [eax],cl
    2541:	76 61                	jbe    25a4 <sysEnter_Vector-0x12da5c>
    2543:	6c                   	ins    BYTE PTR es:[edi],dx
    2544:	00 01                	add    BYTE PTR [ecx],al
    2546:	1f                   	pop    ds
    2547:	3a 00                	cmp    al,BYTE PTR [eax]
    2549:	00 00                	add    BYTE PTR [eax],al
    254b:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    2551:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2552:	00 01                	add    BYTE PTR [ecx],al
    2554:	1f                   	pop    ds
    2555:	85 00                	test   DWORD PTR [eax],eax
    2557:	00 00                	add    BYTE PTR [eax],al
    2559:	02 91 08 00 0c 5b    	add    dl,BYTE PTR [ecx+0x5b0c0008]
    255f:	00 00                	add    BYTE PTR [eax],al
    2561:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2564:	6c                   	ins    BYTE PTR es:[edi],dx
    2565:	00 00                	add    BYTE PTR [eax],al
    2567:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    256d:	9f                   	lahf   
    256e:	0c 0b                	or     al,0xb
    2570:	01 00                	add    DWORD PTR [eax],eax
    2572:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    2579:	05 03 88 60 00       	add    eax,0x608803
    257e:	9f                   	lahf   
    257f:	0c 64                	or     al,0x64
    2581:	00 00                	add    BYTE PTR [eax],al
    2583:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2586:	6c                   	ins    BYTE PTR es:[edi],dx
    2587:	00 00                	add    BYTE PTR [eax],al
    2589:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    258f:	9f                   	lahf   
    2590:	0c 53                	or     al,0x53
    2592:	01 00                	add    DWORD PTR [eax],eax
    2594:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    2597:	90                   	nop
    2598:	00 00                	add    BYTE PTR [eax],al
    259a:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    25a0:	9f                   	lahf   
    25a1:	0c 38                	or     al,0x38
    25a3:	00 00                	add    BYTE PTR [eax],al
    25a5:	00 05 53 e8 01 00    	add    BYTE PTR ds:0x1e853,al
    25ab:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    25b1:	9f                   	lahf   
    25b2:	06                   	push   es
    25b3:	04 b5                	add    al,0xb5
    25b5:	00 00                	add    BYTE PTR [eax],al
    25b7:	00 00                	add    BYTE PTR [eax],al
    25b9:	f7 01 00 00 04 00    	test   DWORD PTR [ecx],0x40000
    25bf:	e8 0b 00 00 04       	call   40025cf <sysEnter_Vector+0x3ed25cf>
    25c4:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    25ca:	d6                   	(bad)  
    25cb:	08 00                	or     BYTE PTR [eax],al
    25cd:	00 15 00 00 00 d4    	add    BYTE PTR ds:0xd4000000,dl
    25d3:	1d 00 9f 29 00       	sbb    eax,0x299f00
    25d8:	00 00                	add    BYTE PTR [eax],al
    25da:	9e                   	sahf   
    25db:	0e                   	push   cs
    25dc:	00 00                	add    BYTE PTR [eax],al
    25de:	02 01                	add    al,BYTE PTR [ecx]
    25e0:	06                   	push   es
    25e1:	75 00                	jne    25e3 <sysEnter_Vector-0x12da1d>
    25e3:	00 00                	add    BYTE PTR [eax],al
    25e5:	02 01                	add    al,BYTE PTR [ecx]
    25e7:	06                   	push   es
    25e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    25e9:	00 00                	add    BYTE PTR [eax],al
    25eb:	00 02                	add    BYTE PTR [edx],al
    25ed:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    25f3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    25fa:	02 08                	add    cl,BYTE PTR [eax]
    25fc:	05 00 00 00 00       	add    eax,0x0
    2601:	02 01                	add    al,BYTE PTR [ecx]
    2603:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    2607:	00 02                	add    BYTE PTR [edx],al
    2609:	02 07                	add    al,BYTE PTR [edi]
    260b:	f0 00 00             	lock add BYTE PTR [eax],al
    260e:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    2611:	00 00                	add    BYTE PTR [eax],al
    2613:	00 02                	add    BYTE PTR [edx],al
    2615:	34 61                	xor    al,0x61
    2617:	00 00                	add    BYTE PTR [eax],al
    2619:	00 02                	add    BYTE PTR [edx],al
    261b:	04 07                	add    al,0x7
    261d:	4e                   	dec    esi
    261e:	00 00                	add    BYTE PTR [eax],al
    2620:	00 02                	add    BYTE PTR [edx],al
    2622:	08 07                	or     BYTE PTR [edi],al
    2624:	44                   	inc    esp
    2625:	00 00                	add    BYTE PTR [eax],al
    2627:	00 04 35 05 00 00 02 	add    BYTE PTR [esi*1+0x2000005],al
    262e:	56                   	push   esi
    262f:	61                   	popa   
    2630:	00 00                	add    BYTE PTR [eax],al
    2632:	00 02                	add    BYTE PTR [edx],al
    2634:	04 05                	add    al,0x5
    2636:	05 00 00 00 02       	add    eax,0x2000000
    263b:	0c 04                	or     al,0x4
    263d:	3d 01 00 00 02       	cmp    eax,0x2000001
    2642:	01 02                	add    DWORD PTR [edx],eax
    2644:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    264b:	5a                   	pop    edx
    264c:	01 00                	add    DWORD PTR [eax],eax
    264e:	00 05 a6 03 00 00    	add    BYTE PTR ds:0x3a6,al
    2654:	04 61                	add    al,0x61
    2656:	00 00                	add    BYTE PTR [eax],al
    2658:	00 05 15 64 01 00    	add    BYTE PTR ds:0x16415,al
    265e:	00 06                	add    BYTE PTR [esi],al
    2660:	5d                   	pop    ebp
    2661:	03 00                	add    eax,DWORD PTR [eax]
    2663:	00 00                	add    BYTE PTR [eax],al
    2665:	06                   	push   es
    2666:	aa                   	stos   BYTE PTR es:[edi],al
    2667:	04 00                	add    al,0x0
    2669:	00 01                	add    BYTE PTR [ecx],al
    266b:	06                   	push   es
    266c:	ce                   	into   
    266d:	02 00                	add    al,BYTE PTR [eax]
    266f:	00 02                	add    BYTE PTR [edx],al
    2671:	06                   	push   es
    2672:	9c                   	pushf  
    2673:	04 00                	add    al,0x0
    2675:	00 03                	add    BYTE PTR [ebx],al
    2677:	06                   	push   es
    2678:	05 03 00 00 04       	add    eax,0x4000003
    267d:	06                   	push   es
    267e:	f7 02 00 00 05 06    	test   DWORD PTR [edx],0x6050000
    2684:	7a 04                	jp     268a <sysEnter_Vector-0x12d976>
    2686:	00 00                	add    BYTE PTR [eax],al
    2688:	06                   	push   es
    2689:	06                   	push   es
    268a:	ed                   	in     eax,dx
    268b:	03 00                	add    eax,DWORD PTR [eax]
    268d:	00 07                	add    BYTE PTR [edi],al
    268f:	06                   	push   es
    2690:	34 03                	xor    al,0x3
    2692:	00 00                	add    BYTE PTR [eax],al
    2694:	08 06                	or     BYTE PTR [esi],al
    2696:	e0 03                	loopne 269b <sysEnter_Vector-0x12d965>
    2698:	00 00                	add    BYTE PTR [eax],al
    269a:	09 06                	or     DWORD PTR [esi],eax
    269c:	fa                   	cli    
    269d:	03 00                	add    eax,DWORD PTR [eax]
    269f:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    26a2:	25 04 00 00 59       	and    eax,0x59000004
    26a7:	06                   	push   es
    26a8:	96                   	xchg   esi,eax
    26a9:	02 00                	add    al,BYTE PTR [eax]
    26ab:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    26ae:	bb 03 00 00 97       	mov    ebx,0x97000003
    26b3:	07                   	pop    es
    26b4:	7d 03                	jge    26b9 <sysEnter_Vector-0x12d947>
    26b6:	00 00                	add    BYTE PTR [eax],al
    26b8:	63 01                	arpl   WORD PTR [ecx],ax
    26ba:	07                   	pop    es
    26bb:	18 04 00             	sbb    BYTE PTR [eax+eax*1],al
    26be:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    26c2:	49                   	dec    ecx
    26c3:	04 00                	add    al,0x0
    26c5:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    26c8:	07                   	pop    es
    26c9:	ba 02 00 00 66       	mov    edx,0x66000002
    26ce:	01 07                	add    DWORD PTR [edi],eax
    26d0:	1f                   	pop    ds
    26d1:	03 00                	add    eax,DWORD PTR [eax]
    26d3:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    26d6:	07                   	pop    es
    26d7:	12 03                	adc    al,BYTE PTR [ebx]
    26d9:	00 00                	add    BYTE PTR [eax],al
    26db:	68 01 07 bd 04       	push   0x4bd0701
    26e0:	00 00                	add    BYTE PTR [eax],al
    26e2:	69 01 07 a9 02 00    	imul   eax,DWORD PTR [ecx],0x2a907
    26e8:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    26eb:	07                   	pop    es
    26ec:	e7 02                	out    0x2,eax
    26ee:	00 00                	add    BYTE PTR [eax],al
    26f0:	71 01                	jno    26f3 <sysEnter_Vector-0x12d90d>
    26f2:	07                   	pop    es
    26f3:	8e 04 00             	mov    es,WORD PTR [eax+eax*1]
    26f6:	00 00                	add    BYTE PTR [eax],al
    26f8:	03 07                	add    eax,DWORD PTR [edi]
    26fa:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
    26fd:	00 01                	add    BYTE PTR [ecx],al
    26ff:	03 07                	add    eax,DWORD PTR [edi]
    2701:	94                   	xchg   esp,eax
    2702:	03 00                	add    eax,DWORD PTR [eax]
    2704:	00 02                	add    BYTE PTR [edx],al
    2706:	03 07                	add    eax,DWORD PTR [edi]
    2708:	6d                   	ins    DWORD PTR es:[edi],dx
    2709:	03 00                	add    eax,DWORD PTR [eax]
    270b:	00 03                	add    BYTE PTR [ebx],al
    270d:	03 07                	add    eax,DWORD PTR [edi]
    270f:	cf                   	iret   
    2710:	03 00                	add    eax,DWORD PTR [eax]
    2712:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    2715:	07                   	pop    es
    2716:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
    2719:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    271f:	07                   	pop    es
    2720:	49                   	dec    ecx
    2721:	00 00                	add    BYTE PTR [eax],al
    2723:	00 08                	add    BYTE PTR [eax],cl
    2725:	04 25                	add    al,0x25
    2727:	00 00                	add    BYTE PTR [eax],al
    2729:	00 09                	add    BYTE PTR [ecx],cl
    272b:	e1 08                	loope  2735 <sysEnter_Vector-0x12d8cb>
    272d:	00 00                	add    BYTE PTR [eax],al
    272f:	01 0a                	add    DWORD PTR [edx],ecx
    2731:	3a 00                	cmp    al,BYTE PTR [eax]
    2733:	00 00                	add    BYTE PTR [eax],al
    2735:	d4 1d                	aam    0x1d
    2737:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    273d:	01 9c 99 01 00 00 0a 	add    DWORD PTR [ecx+ebx*4+0xa000001],ebx
    2744:	e6 08                	out    0x8,al
    2746:	00 00                	add    BYTE PTR [eax],al
    2748:	01 0a                	add    DWORD PTR [edx],ecx
    274a:	99                   	cdq    
    274b:	01 00                	add    DWORD PTR [eax],eax
    274d:	00 02                	add    BYTE PTR [edx],al
    274f:	91                   	xchg   ecx,eax
    2750:	00 00                	add    BYTE PTR [eax],al
    2752:	08 04 3a             	or     BYTE PTR [edx+edi*1],al
    2755:	00 00                	add    BYTE PTR [eax],al
    2757:	00 0b                	add    BYTE PTR [ebx],cl
    2759:	5b                   	pop    ebx
    275a:	00 00                	add    BYTE PTR [eax],al
    275c:	00 03                	add    BYTE PTR [ebx],al
    275e:	34 56                	xor    al,0x56
    2760:	00 00                	add    BYTE PTR [eax],al
    2762:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    2768:	9f                   	lahf   
    2769:	0b 0b                	or     ecx,DWORD PTR [ebx]
    276b:	01 00                	add    DWORD PTR [eax],eax
    276d:	00 03                	add    BYTE PTR [ebx],al
    276f:	35 56 00 00 00       	xor    eax,0x56
    2774:	05 03 88 60 00       	add    eax,0x608803
    2779:	9f                   	lahf   
    277a:	0b 64 00 00          	or     esp,DWORD PTR [eax+eax*1+0x0]
    277e:	00 03                	add    BYTE PTR [ebx],al
    2780:	36                   	ss
    2781:	56                   	push   esi
    2782:	00 00                	add    BYTE PTR [eax],al
    2784:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    278a:	9f                   	lahf   
    278b:	0b 53 01             	or     edx,DWORD PTR [ebx+0x1]
    278e:	00 00                	add    BYTE PTR [eax],al
    2790:	03 37                	add    esi,DWORD PTR [edi]
    2792:	7a 00                	jp     2794 <sysEnter_Vector-0x12d86c>
    2794:	00 00                	add    BYTE PTR [eax],al
    2796:	05 03 90 60 00       	add    eax,0x609003
    279b:	9f                   	lahf   
    279c:	0b 38                	or     edi,DWORD PTR [eax]
    279e:	00 00                	add    BYTE PTR [eax],al
    27a0:	00 04 53             	add    BYTE PTR [ebx+edx*2],al
    27a3:	f4                   	hlt    
    27a4:	01 00                	add    DWORD PTR [eax],eax
    27a6:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    27ac:	9f                   	lahf   
    27ad:	08 04 6b             	or     BYTE PTR [ebx+ebp*2],al
    27b0:	01 00                	add    DWORD PTR [eax],eax
    27b2:	00 00                	add    BYTE PTR [eax],al
    27b4:	bd 03 00 00 04       	mov    ebp,0x4000003
    27b9:	00 87 0c 00 00 04    	add    BYTE PTR [edi+0x400000c],al
    27bf:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    27c5:	fe 08                	dec    BYTE PTR [eax]
    27c7:	00 00                	add    BYTE PTR [eax],al
    27c9:	15 00 00 00 00       	adc    eax,0x0
    27ce:	1e                   	push   ds
    27cf:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
    27d5:	88 0f                	mov    BYTE PTR [edi],cl
    27d7:	00 00                	add    BYTE PTR [eax],al
    27d9:	02 5b 06             	add    bl,BYTE PTR [ebx+0x6]
    27dc:	00 00                	add    BYTE PTR [eax],al
    27de:	02 28                	add    ch,BYTE PTR [eax]
    27e0:	30 00                	xor    BYTE PTR [eax],al
    27e2:	00 00                	add    BYTE PTR [eax],al
    27e4:	03 04 83             	add    eax,DWORD PTR [ebx+eax*4]
    27e7:	05 00 00 3a 00       	add    eax,0x3a0000
    27ec:	00 00                	add    BYTE PTR [eax],al
    27ee:	04 01                	add    al,0x1
    27f0:	06                   	push   es
    27f1:	75 00                	jne    27f3 <sysEnter_Vector-0x12d80d>
    27f3:	00 00                	add    BYTE PTR [eax],al
    27f5:	02 62 06             	add    ah,BYTE PTR [edx+0x6]
    27f8:	00 00                	add    BYTE PTR [eax],al
    27fa:	02 62 25             	add    ah,BYTE PTR [edx+0x25]
    27fd:	00 00                	add    BYTE PTR [eax],al
    27ff:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2802:	06                   	push   es
    2803:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2804:	00 00                	add    BYTE PTR [eax],al
    2806:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    2809:	05 49 01 00 00       	add    eax,0x149
    280e:	05 04 05 69 6e       	add    eax,0x6e690504
    2813:	74 00                	je     2815 <sysEnter_Vector-0x12d7eb>
    2815:	04 08                	add    al,0x8
    2817:	05 00 00 00 00       	add    eax,0x0
    281c:	04 01                	add    al,0x1
    281e:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    2822:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    2825:	07                   	pop    es
    2826:	f0 00 00             	lock add BYTE PTR [eax],al
    2829:	00 02                	add    BYTE PTR [edx],al
    282b:	7a 00                	jp     282d <sysEnter_Vector-0x12d7d3>
    282d:	00 00                	add    BYTE PTR [eax],al
    282f:	03 34 81             	add    esi,DWORD PTR [ecx+eax*4]
    2832:	00 00                	add    BYTE PTR [eax],al
    2834:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2837:	07                   	pop    es
    2838:	4e                   	dec    esi
    2839:	00 00                	add    BYTE PTR [eax],al
    283b:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    283e:	07                   	pop    es
    283f:	44                   	inc    esp
    2840:	00 00                	add    BYTE PTR [eax],al
    2842:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2845:	05 05 00 00 00       	add    eax,0x5
    284a:	04 0c                	add    al,0xc
    284c:	04 3d                	add    al,0x3d
    284e:	01 00                	add    DWORD PTR [eax],eax
    2850:	00 06                	add    BYTE PTR [esi],al
    2852:	04 a3                	add    al,0xa3
    2854:	00 00                	add    BYTE PTR [eax],al
    2856:	00 07                	add    BYTE PTR [edi],al
    2858:	3a 00                	cmp    al,BYTE PTR [eax]
    285a:	00 00                	add    BYTE PTR [eax],al
    285c:	04 01                	add    al,0x1
    285e:	02 ea                	add    ch,dl
    2860:	00 00                	add    BYTE PTR [eax],al
    2862:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2865:	07                   	pop    es
    2866:	5a                   	pop    edx
    2867:	01 00                	add    DWORD PTR [eax],eax
    2869:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    286c:	07                   	pop    es
    286d:	49                   	dec    ecx
    286e:	00 00                	add    BYTE PTR [eax],al
    2870:	00 06                	add    BYTE PTR [esi],al
    2872:	04 3a                	add    al,0x3a
    2874:	00 00                	add    BYTE PTR [eax],al
    2876:	00 08                	add    BYTE PTR [eax],cl
    2878:	ed                   	in     eax,dx
    2879:	08 00                	or     BYTE PTR [eax],al
    287b:	00 01                	add    BYTE PTR [ecx],al
    287d:	0a 5a 00             	or     bl,BYTE PTR [edx+0x0]
    2880:	00 00                	add    BYTE PTR [eax],al
    2882:	00 1e                	add    BYTE PTR [esi],bl
    2884:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
    288a:	01 9c f5 00 00 00 09 	add    DWORD PTR [ebp+esi*8+0x9000000],ebx
    2891:	73 00                	jae    2893 <sysEnter_Vector-0x12d76d>
    2893:	01 0a                	add    DWORD PTR [edx],ecx
    2895:	f5                   	cmc    
    2896:	00 00                	add    BYTE PTR [eax],al
    2898:	00 02                	add    BYTE PTR [edx],al
    289a:	91                   	xchg   ecx,eax
    289b:	00 0a                	add    BYTE PTR [edx],cl
    289d:	69 00 01 0c 5a 00    	imul   eax,DWORD PTR [eax],0x5a0c01
    28a3:	00 00                	add    BYTE PTR [eax],al
    28a5:	02 91 70 00 06 04    	add    dl,BYTE PTR [ecx+0x4060070]
    28ab:	9d                   	popf   
    28ac:	00 00                	add    BYTE PTR [eax],al
    28ae:	00 08                	add    BYTE PTR [eax],cl
    28b0:	22 09                	and    cl,BYTE PTR [ecx]
    28b2:	00 00                	add    BYTE PTR [eax],al
    28b4:	01 21                	add    DWORD PTR [ecx],esp
    28b6:	bd 00 00 00 5f       	mov    ebp,0x5f000000
    28bb:	1e                   	push   ds
    28bc:	00 9f 3e 02 00 00    	add    BYTE PTR [edi+0x23e],bl
    28c2:	01 9c d5 01 00 00 09 	add    DWORD PTR [ebp+edx*8+0x9000001],ebx
    28c9:	73 74                	jae    293f <sysEnter_Vector-0x12d6c1>
    28cb:	72 00                	jb     28cd <sysEnter_Vector-0x12d733>
    28cd:	01 21                	add    DWORD PTR [ecx],esp
    28cf:	bd 00 00 00 02       	mov    ebp,0x2000000
    28d4:	91                   	xchg   ecx,eax
    28d5:	00 09                	add    BYTE PTR [ecx],cl
    28d7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    28d8:	75 6d                	jne    2947 <sysEnter_Vector-0x12d6b9>
    28da:	00 01                	add    BYTE PTR [ecx],al
    28dc:	21 8f 00 00 00 02    	and    DWORD PTR [edi+0x2000000],ecx
    28e2:	91                   	xchg   ecx,eax
    28e3:	04 0b                	add    al,0xb
    28e5:	0c 09                	or     al,0x9
    28e7:	00 00                	add    BYTE PTR [eax],al
    28e9:	01 21                	add    DWORD PTR [ecx],esp
    28eb:	5a                   	pop    edx
    28ec:	00 00                	add    BYTE PTR [eax],al
    28ee:	00 02                	add    BYTE PTR [edx],al
    28f0:	91                   	xchg   ecx,eax
    28f1:	08 0b                	or     BYTE PTR [ebx],cl
    28f3:	3e                   	ds
    28f4:	06                   	push   es
    28f5:	00 00                	add    BYTE PTR [eax],al
    28f7:	01 21                	add    DWORD PTR [ecx],esp
    28f9:	5a                   	pop    edx
    28fa:	00 00                	add    BYTE PTR [eax],al
    28fc:	00 02                	add    BYTE PTR [edx],al
    28fe:	91                   	xchg   ecx,eax
    28ff:	0c 0b                	or     al,0xb
    2901:	29 09                	sub    DWORD PTR [ecx],ecx
    2903:	00 00                	add    BYTE PTR [eax],al
    2905:	01 21                	add    DWORD PTR [ecx],esp
    2907:	5a                   	pop    edx
    2908:	00 00                	add    BYTE PTR [eax],al
    290a:	00 02                	add    BYTE PTR [edx],al
    290c:	91                   	xchg   ecx,eax
    290d:	10 0b                	adc    BYTE PTR [ebx],cl
    290f:	5e                   	pop    esi
    2910:	01 00                	add    DWORD PTR [eax],eax
    2912:	00 01                	add    BYTE PTR [ecx],al
    2914:	22 5a 00             	and    bl,BYTE PTR [edx+0x0]
    2917:	00 00                	add    BYTE PTR [eax],al
    2919:	02 91 14 0c 33 09    	add    dl,BYTE PTR [ecx+0x9330c14]
    291f:	00 00                	add    BYTE PTR [eax],al
    2921:	01 25 e5 01 00 00    	add    DWORD PTR ds:0x1e5,esp
    2927:	05 03 58 5d 00       	add    eax,0x5d5803
    292c:	9f                   	lahf   
    292d:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    2931:	00 01                	add    BYTE PTR [ecx],al
    2933:	27                   	daa    
    2934:	ea 01 00 00 03 91 9e 	jmp    0x9e91:0x3000001
    293b:	7f 0a                	jg     2947 <sysEnter_Vector-0x12d6b9>
    293d:	63 00                	arpl   WORD PTR [eax],ax
    293f:	01 28                	add    DWORD PTR [eax],ebp
    2941:	3a 00                	cmp    al,BYTE PTR [eax]
    2943:	00 00                	add    BYTE PTR [eax],al
    2945:	02 91 66 0c 00 02    	add    dl,BYTE PTR [ecx+0x2000c66]
    294b:	00 00                	add    BYTE PTR [eax],al
    294d:	01 28                	add    DWORD PTR [eax],ebp
    294f:	3a 00                	cmp    al,BYTE PTR [eax]
    2951:	00 00                	add    BYTE PTR [eax],al
    2953:	02 91 6f 0c f7 08    	add    dl,BYTE PTR [ecx+0x8f70c6f]
    2959:	00 00                	add    BYTE PTR [eax],al
    295b:	01 28                	add    DWORD PTR [eax],ebp
    295d:	3a 00                	cmp    al,BYTE PTR [eax]
    295f:	00 00                	add    BYTE PTR [eax],al
    2961:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    2967:	01 29                	add    DWORD PTR [ecx],ebp
    2969:	5a                   	pop    edx
    296a:	00 00                	add    BYTE PTR [eax],al
    296c:	00 02                	add    BYTE PTR [edx],al
    296e:	91                   	xchg   ecx,eax
    296f:	68 0d 45 1f 00       	push   0x1f450d
    2974:	9f                   	lahf   
    2975:	25 00 00 00 0c       	and    eax,0xc000000
    297a:	46                   	inc    esi
    297b:	09 00                	or     DWORD PTR [eax],eax
    297d:	00 01                	add    BYTE PTR [ecx],al
    297f:	4c                   	dec    esp
    2980:	5a                   	pop    edx
    2981:	00 00                	add    BYTE PTR [eax],al
    2983:	00 02                	add    BYTE PTR [edx],al
    2985:	91                   	xchg   ecx,eax
    2986:	60                   	pusha  
    2987:	00 00                	add    BYTE PTR [eax],al
    2989:	0e                   	push   cs
    298a:	3a 00                	cmp    al,BYTE PTR [eax]
    298c:	00 00                	add    BYTE PTR [eax],al
    298e:	e5 01                	in     eax,0x1
    2990:	00 00                	add    BYTE PTR [eax],al
    2992:	0f af 00             	imul   eax,DWORD PTR [eax]
    2995:	00 00                	add    BYTE PTR [eax],al
    2997:	0f 00 07             	sldt   WORD PTR [edi]
    299a:	d5 01                	aad    0x1
    299c:	00 00                	add    BYTE PTR [eax],al
    299e:	0e                   	push   cs
    299f:	3a 00                	cmp    al,BYTE PTR [eax]
    29a1:	00 00                	add    BYTE PTR [eax],al
    29a3:	fa                   	cli    
    29a4:	01 00                	add    DWORD PTR [eax],eax
    29a6:	00 0f                	add    BYTE PTR [edi],cl
    29a8:	af                   	scas   eax,DWORD PTR es:[edi]
    29a9:	00 00                	add    BYTE PTR [eax],al
    29ab:	00 41 00             	add    BYTE PTR [ecx+0x0],al
    29ae:	10 4c 09 00          	adc    BYTE PTR [ecx+ecx*1+0x0],cl
    29b2:	00 01                	add    BYTE PTR [ecx],al
    29b4:	68 5a 00 00 00       	push   0x5a
    29b9:	9d                   	popf   
    29ba:	20 00                	and    BYTE PTR [eax],al
    29bc:	9f                   	lahf   
    29bd:	48                   	dec    eax
    29be:	04 00                	add    al,0x0
    29c0:	00 01                	add    BYTE PTR [ecx],al
    29c2:	9c                   	pushf  
    29c3:	03 03                	add    eax,DWORD PTR [ebx]
    29c5:	00 00                	add    BYTE PTR [eax],al
    29c7:	09 62 75             	or     DWORD PTR [edx+0x75],esp
    29ca:	66                   	data16
    29cb:	00 01                	add    BYTE PTR [ecx],al
    29cd:	68 bd 00 00 00       	push   0xbd
    29d2:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    29d8:	74 00                	je     29da <sysEnter_Vector-0x12d626>
    29da:	01 68 9d             	add    DWORD PTR [eax-0x63],ebp
    29dd:	00 00                	add    BYTE PTR [eax],al
    29df:	00 02                	add    BYTE PTR [edx],al
    29e1:	91                   	xchg   ecx,eax
    29e2:	04 0b                	add    al,0xb
    29e4:	3c 07                	cmp    al,0x7
    29e6:	00 00                	add    BYTE PTR [eax],al
    29e8:	01 68 41             	add    DWORD PTR [eax+0x41],ebp
    29eb:	00 00                	add    BYTE PTR [eax],al
    29ed:	00 02                	add    BYTE PTR [edx],al
    29ef:	91                   	xchg   ecx,eax
    29f0:	08 0a                	or     BYTE PTR [edx],cl
    29f2:	6c                   	ins    BYTE PTR es:[edi],dx
    29f3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    29f5:	00 01                	add    BYTE PTR [ecx],al
    29f7:	6a 5a                	push   0x5a
    29f9:	00 00                	add    BYTE PTR [eax],al
    29fb:	00 02                	add    BYTE PTR [edx],al
    29fd:	91                   	xchg   ecx,eax
    29fe:	6c                   	ins    BYTE PTR es:[edi],dx
    29ff:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    2a02:	6d                   	ins    DWORD PTR es:[edi],dx
    2a03:	00 01                	add    BYTE PTR [ecx],al
    2a05:	6b b6 00 00 00 02 91 	imul   esi,DWORD PTR [esi+0x2000000],0xffffff91
    2a0c:	68 0a 69 00 01       	push   0x100690a
    2a11:	6c                   	ins    BYTE PTR es:[edi],dx
    2a12:	5a                   	pop    edx
    2a13:	00 00                	add    BYTE PTR [eax],al
    2a15:	00 02                	add    BYTE PTR [edx],al
    2a17:	91                   	xchg   ecx,eax
    2a18:	64                   	fs
    2a19:	0c 0c                	or     al,0xc
    2a1b:	09 00                	or     DWORD PTR [eax],eax
    2a1d:	00 01                	add    BYTE PTR [ecx],al
    2a1f:	6c                   	ins    BYTE PTR es:[edi],dx
    2a20:	5a                   	pop    edx
    2a21:	00 00                	add    BYTE PTR [eax],al
    2a23:	00 02                	add    BYTE PTR [edx],al
    2a25:	91                   	xchg   ecx,eax
    2a26:	60                   	pusha  
    2a27:	0a 73 74             	or     dh,BYTE PTR [ebx+0x74]
    2a2a:	72 00                	jb     2a2c <sysEnter_Vector-0x12d5d4>
    2a2c:	01 6d bd             	add    DWORD PTR [ebp-0x43],ebp
    2a2f:	00 00                	add    BYTE PTR [eax],al
    2a31:	00 02                	add    BYTE PTR [edx],al
    2a33:	91                   	xchg   ecx,eax
    2a34:	5c                   	pop    esp
    2a35:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    2a38:	01 6e 9d             	add    DWORD PTR [esi-0x63],ebp
    2a3b:	00 00                	add    BYTE PTR [eax],al
    2a3d:	00 02                	add    BYTE PTR [edx],al
    2a3f:	91                   	xchg   ecx,eax
    2a40:	58                   	pop    eax
    2a41:	0c 8c                	or     al,0x8c
    2a43:	07                   	pop    es
    2a44:	00 00                	add    BYTE PTR [eax],al
    2a46:	01 70 5a             	add    DWORD PTR [eax+0x5a],esi
    2a49:	00 00                	add    BYTE PTR [eax],al
    2a4b:	00 02                	add    BYTE PTR [edx],al
    2a4d:	91                   	xchg   ecx,eax
    2a4e:	54                   	push   esp
    2a4f:	0c 3a                	or     al,0x3a
    2a51:	09 00                	or     DWORD PTR [eax],eax
    2a53:	00 01                	add    BYTE PTR [ecx],al
    2a55:	72 5a                	jb     2ab1 <sysEnter_Vector-0x12d54f>
    2a57:	00 00                	add    BYTE PTR [eax],al
    2a59:	00 02                	add    BYTE PTR [edx],al
    2a5b:	91                   	xchg   ecx,eax
    2a5c:	50                   	push   eax
    2a5d:	0c 29                	or     al,0x29
    2a5f:	09 00                	or     DWORD PTR [eax],eax
    2a61:	00 01                	add    BYTE PTR [ecx],al
    2a63:	73 5a                	jae    2abf <sysEnter_Vector-0x12d541>
    2a65:	00 00                	add    BYTE PTR [eax],al
    2a67:	00 02                	add    BYTE PTR [edx],al
    2a69:	91                   	xchg   ecx,eax
    2a6a:	4c                   	dec    esp
    2a6b:	0c 11                	or     al,0x11
    2a6d:	09 00                	or     DWORD PTR [eax],eax
    2a6f:	00 01                	add    BYTE PTR [ecx],al
    2a71:	75 5a                	jne    2acd <sysEnter_Vector-0x12d533>
    2a73:	00 00                	add    BYTE PTR [eax],al
    2a75:	00 02                	add    BYTE PTR [edx],al
    2a77:	91                   	xchg   ecx,eax
    2a78:	48                   	dec    eax
    2a79:	11 1b                	adc    DWORD PTR [ebx],ebx
    2a7b:	09 00                	or     DWORD PTR [eax],eax
    2a7d:	00 01                	add    BYTE PTR [ecx],al
    2a7f:	7f e1                	jg     2a62 <sysEnter_Vector-0x12d59e>
    2a81:	20 00                	and    BYTE PTR [eax],al
    2a83:	9f                   	lahf   
    2a84:	12 86 23 00 9f 1b    	adc    al,BYTE PTR [esi+0x1b9f0023]
    2a8a:	00 00                	add    BYTE PTR [eax],al
    2a8c:	00 eb                	add    bl,ch
    2a8e:	02 00                	add    al,BYTE PTR [eax]
    2a90:	00 0a                	add    BYTE PTR [edx],cl
    2a92:	69 70 00 01 e0 03 03 	imul   esi,DWORD PTR [eax+0x0],0x303e001
    2a99:	00 00                	add    BYTE PTR [eax],al
    2a9b:	02 91 44 00 0d a6    	add    dl,BYTE PTR [ecx-0x59f2ffbc]
    2aa1:	23 00                	and    eax,DWORD PTR [eax]
    2aa3:	9f                   	lahf   
    2aa4:	1b 00                	sbb    eax,DWORD PTR [eax]
    2aa6:	00 00                	add    BYTE PTR [eax],al
    2aa8:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    2aab:	00 01                	add    BYTE PTR [ecx],al
    2aad:	e3 09                	jecxz  2ab8 <sysEnter_Vector-0x12d548>
    2aaf:	03 00                	add    eax,DWORD PTR [eax]
    2ab1:	00 02                	add    BYTE PTR [edx],al
    2ab3:	91                   	xchg   ecx,eax
    2ab4:	40                   	inc    eax
    2ab5:	00 00                	add    BYTE PTR [eax],al
    2ab7:	06                   	push   es
    2ab8:	04 8f                	add    al,0x8f
    2aba:	00 00                	add    BYTE PTR [eax],al
    2abc:	00 06                	add    BYTE PTR [esi],al
    2abe:	04 5a                	add    al,0x5a
    2ac0:	00 00                	add    BYTE PTR [eax],al
    2ac2:	00 13                	add    BYTE PTR [ebx],dl
    2ac4:	4d                   	dec    ebp
    2ac5:	09 00                	or     DWORD PTR [eax],eax
    2ac7:	00 01                	add    BYTE PTR [ecx],al
    2ac9:	15 01 5a 00 00       	adc    eax,0x5a01
    2ace:	00 e5                	add    ch,ah
    2ad0:	24 00                	and    al,0x0
    2ad2:	9f                   	lahf   
    2ad3:	33 00                	xor    eax,DWORD PTR [eax]
    2ad5:	00 00                	add    BYTE PTR [eax],al
    2ad7:	01 9c 65 03 00 00 14 	add    DWORD PTR [ebp+eiz*2+0x14000003],ebx
    2ade:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    2ae1:	00 01                	add    BYTE PTR [ecx],al
    2ae3:	15 01 bd 00 00       	adc    eax,0xbd01
    2ae8:	00 02                	add    BYTE PTR [edx],al
    2aea:	91                   	xchg   ecx,eax
    2aeb:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    2aee:	6d                   	ins    DWORD PTR es:[edi],dx
    2aef:	74 00                	je     2af1 <sysEnter_Vector-0x12d50f>
    2af1:	01 15 01 9d 00 00    	add    DWORD PTR ds:0x9d01,edx
    2af7:	00 02                	add    BYTE PTR [edx],al
    2af9:	91                   	xchg   ecx,eax
    2afa:	04 15                	add    al,0x15
    2afc:	16                   	push   ss
    2afd:	3c 07                	cmp    al,0x7
    2aff:	00 00                	add    BYTE PTR [eax],al
    2b01:	01 17                	add    DWORD PTR [edi],edx
    2b03:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    2b06:	00 00                	add    BYTE PTR [eax],al
    2b08:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    2b0e:	01 18                	add    DWORD PTR [eax],ebx
    2b10:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    2b13:	00 00                	add    BYTE PTR [eax],al
    2b15:	02 91 6c 00 18 5b    	add    dl,BYTE PTR [ecx+0x5b18006c]
    2b1b:	00 00                	add    BYTE PTR [eax],al
    2b1d:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2b20:	76 00                	jbe    2b22 <sysEnter_Vector-0x12d4de>
    2b22:	00 00                	add    BYTE PTR [eax],al
    2b24:	05 03 84 60 00       	add    eax,0x608403
    2b29:	9f                   	lahf   
    2b2a:	18 0b                	sbb    BYTE PTR [ebx],cl
    2b2c:	01 00                	add    DWORD PTR [eax],eax
    2b2e:	00 04 35 76 00 00 00 	add    BYTE PTR [esi*1+0x76],al
    2b35:	05 03 88 60 00       	add    eax,0x608803
    2b3a:	9f                   	lahf   
    2b3b:	18 64 00 00          	sbb    BYTE PTR [eax+eax*1+0x0],ah
    2b3f:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2b42:	76 00                	jbe    2b44 <sysEnter_Vector-0x12d4bc>
    2b44:	00 00                	add    BYTE PTR [eax],al
    2b46:	05 03 80 60 00       	add    eax,0x608003
    2b4b:	9f                   	lahf   
    2b4c:	18 53 01             	sbb    BYTE PTR [ebx+0x1],dl
    2b4f:	00 00                	add    BYTE PTR [eax],al
    2b51:	04 37                	add    al,0x37
    2b53:	8f 00                	pop    DWORD PTR [eax]
    2b55:	00 00                	add    BYTE PTR [eax],al
    2b57:	05 03 90 60 00       	add    eax,0x609003
    2b5c:	9f                   	lahf   
    2b5d:	18 38                	sbb    BYTE PTR [eax],bh
    2b5f:	00 00                	add    BYTE PTR [eax],al
    2b61:	00 05 53 ba 03 00    	add    BYTE PTR ds:0x3ba53,al
    2b67:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    2b6d:	9f                   	lahf   
    2b6e:	06                   	push   es
    2b6f:	04 bd                	add    al,0xbd
    2b71:	00 00                	add    BYTE PTR [eax],al
    2b73:	00 00                	add    BYTE PTR [eax],al
    2b75:	32 01                	xor    al,BYTE PTR [ecx]
    2b77:	00 00                	add    BYTE PTR [eax],al
    2b79:	04 00                	add    al,0x0
    2b7b:	dd 0d 00 00 04 01    	fisttp QWORD PTR ds:0x1040000
    2b81:	83 00 00             	add    DWORD PTR [eax],0x0
    2b84:	00 0c 55 09 00 00 15 	add    BYTE PTR [edx*2+0x15000009],cl
    2b8b:	00 00                	add    BYTE PTR [eax],al
    2b8d:	00 18                	add    BYTE PTR [eax],bl
    2b8f:	25 00 9f 84 00       	and    eax,0x849f00
    2b94:	00 00                	add    BYTE PTR [eax],al
    2b96:	6a 11                	push   0x11
    2b98:	00 00                	add    BYTE PTR [eax],al
    2b9a:	02 01                	add    al,BYTE PTR [ecx]
    2b9c:	06                   	push   es
    2b9d:	75 00                	jne    2b9f <sysEnter_Vector-0x12d461>
    2b9f:	00 00                	add    BYTE PTR [eax],al
    2ba1:	02 01                	add    al,BYTE PTR [ecx]
    2ba3:	06                   	push   es
    2ba4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2ba5:	00 00                	add    BYTE PTR [eax],al
    2ba7:	00 02                	add    BYTE PTR [edx],al
    2ba9:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    2baf:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2bb6:	02 08                	add    cl,BYTE PTR [eax]
    2bb8:	05 00 00 00 00       	add    eax,0x0
    2bbd:	02 01                	add    al,BYTE PTR [ecx]
    2bbf:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    2bc3:	00 02                	add    BYTE PTR [edx],al
    2bc5:	02 07                	add    al,BYTE PTR [edi]
    2bc7:	f0 00 00             	lock add BYTE PTR [eax],al
    2bca:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    2bcd:	00 00                	add    BYTE PTR [eax],al
    2bcf:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2bd2:	61                   	popa   
    2bd3:	00 00                	add    BYTE PTR [eax],al
    2bd5:	00 02                	add    BYTE PTR [edx],al
    2bd7:	04 07                	add    al,0x7
    2bd9:	4e                   	dec    esi
    2bda:	00 00                	add    BYTE PTR [eax],al
    2bdc:	00 02                	add    BYTE PTR [edx],al
    2bde:	08 07                	or     BYTE PTR [edi],al
    2be0:	44                   	inc    esp
    2be1:	00 00                	add    BYTE PTR [eax],al
    2be3:	00 02                	add    BYTE PTR [edx],al
    2be5:	04 05                	add    al,0x5
    2be7:	05 00 00 00 02       	add    eax,0x2000000
    2bec:	0c 04                	or     al,0x4
    2bee:	3d 01 00 00 02       	cmp    eax,0x2000001
    2bf3:	01 02                	add    DWORD PTR [edx],eax
    2bf5:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    2bfc:	5a                   	pop    edx
    2bfd:	01 00                	add    DWORD PTR [eax],eax
    2bff:	00 02                	add    BYTE PTR [edx],al
    2c01:	04 07                	add    al,0x7
    2c03:	49                   	dec    ecx
    2c04:	00 00                	add    BYTE PTR [eax],al
    2c06:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    2c0c:	00 06                	add    BYTE PTR [esi],al
    2c0e:	66 09 00             	or     WORD PTR [eax],ax
    2c11:	00 01                	add    BYTE PTR [ecx],al
    2c13:	10 18                	adc    BYTE PTR [eax],bl
    2c15:	25 00 9f 84 00       	and    eax,0x849f00
    2c1a:	00 00                	add    BYTE PTR [eax],al
    2c1c:	01 9c ca 00 00 00 07 	add    DWORD PTR [edx+ecx*8+0x7000000],ebx
    2c23:	61                   	popa   
    2c24:	09 00                	or     DWORD PTR [eax],eax
    2c26:	00 01                	add    BYTE PTR [ecx],al
    2c28:	12 ca                	adc    cl,dl
    2c2a:	00 00                	add    BYTE PTR [eax],al
    2c2c:	00 02                	add    BYTE PTR [edx],al
    2c2e:	91                   	xchg   ecx,eax
    2c2f:	67 07                	addr16 pop es
    2c31:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2c32:	09 00                	or     DWORD PTR [eax],eax
    2c34:	00 01                	add    BYTE PTR [ecx],al
    2c36:	13 3a                	adc    edi,DWORD PTR [edx]
    2c38:	00 00                	add    BYTE PTR [eax],al
    2c3a:	00 02                	add    BYTE PTR [edx],al
    2c3c:	91                   	xchg   ecx,eax
    2c3d:	6c                   	ins    BYTE PTR es:[edi],dx
    2c3e:	00 08                	add    BYTE PTR [eax],cl
    2c40:	25 00 00 00 da       	and    eax,0xda000000
    2c45:	00 00                	add    BYTE PTR [eax],al
    2c47:	00 09                	add    BYTE PTR [ecx],cl
    2c49:	84 00                	test   BYTE PTR [eax],al
    2c4b:	00 00                	add    BYTE PTR [eax],al
    2c4d:	04 00                	add    al,0x0
    2c4f:	0a 5b 00             	or     bl,BYTE PTR [ebx+0x0]
    2c52:	00 00                	add    BYTE PTR [eax],al
    2c54:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2c57:	00 00                	add    BYTE PTR [eax],al
    2c59:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    2c5f:	9f                   	lahf   
    2c60:	0a 0b                	or     cl,BYTE PTR [ebx]
    2c62:	01 00                	add    DWORD PTR [eax],eax
    2c64:	00 02                	add    BYTE PTR [edx],al
    2c66:	35 56 00 00 00       	xor    eax,0x56
    2c6b:	05 03 88 60 00       	add    eax,0x608803
    2c70:	9f                   	lahf   
    2c71:	0a 64 00 00          	or     ah,BYTE PTR [eax+eax*1+0x0]
    2c75:	00 02                	add    BYTE PTR [edx],al
    2c77:	36                   	ss
    2c78:	56                   	push   esi
    2c79:	00 00                	add    BYTE PTR [eax],al
    2c7b:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    2c81:	9f                   	lahf   
    2c82:	0a 53 01             	or     dl,BYTE PTR [ebx+0x1]
    2c85:	00 00                	add    BYTE PTR [eax],al
    2c87:	02 37                	add    dh,BYTE PTR [edi]
    2c89:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2c8a:	00 00                	add    BYTE PTR [eax],al
    2c8c:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    2c92:	9f                   	lahf   
    2c93:	0a 38                	or     bh,BYTE PTR [eax]
    2c95:	00 00                	add    BYTE PTR [eax],al
    2c97:	00 03                	add    BYTE PTR [ebx],al
    2c99:	53                   	push   ebx
    2c9a:	2f                   	das    
    2c9b:	01 00                	add    DWORD PTR [eax],eax
    2c9d:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    2ca3:	9f                   	lahf   
    2ca4:	05 04 92 00 00       	add    eax,0x9204
    2ca9:	00 00                	add    BYTE PTR [eax],al
    2cab:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2cac:	01 00                	add    DWORD PTR [eax],eax
    2cae:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2cb1:	67 0e                	addr16 push cs
    2cb3:	00 00                	add    BYTE PTR [eax],al
    2cb5:	04 01                	add    al,0x1
    2cb7:	83 00 00             	add    DWORD PTR [eax],0x0
    2cba:	00 0c 92             	add    BYTE PTR [edx+edx*4],cl
    2cbd:	09 00                	or     DWORD PTR [eax],eax
    2cbf:	00 15 00 00 00 9c    	add    BYTE PTR ds:0x9c000000,dl
    2cc5:	25 00 9f eb 00       	and    eax,0xeb9f00
    2cca:	00 00                	add    BYTE PTR [eax],al
    2ccc:	22 12                	and    dl,BYTE PTR [edx]
    2cce:	00 00                	add    BYTE PTR [eax],al
    2cd0:	02 01                	add    al,BYTE PTR [ecx]
    2cd2:	06                   	push   es
    2cd3:	75 00                	jne    2cd5 <sysEnter_Vector-0x12d32b>
    2cd5:	00 00                	add    BYTE PTR [eax],al
    2cd7:	02 01                	add    al,BYTE PTR [ecx]
    2cd9:	06                   	push   es
    2cda:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2cdb:	00 00                	add    BYTE PTR [eax],al
    2cdd:	00 02                	add    BYTE PTR [edx],al
    2cdf:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    2ce5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2cec:	02 08                	add    cl,BYTE PTR [eax]
    2cee:	05 00 00 00 00       	add    eax,0x0
    2cf3:	02 01                	add    al,BYTE PTR [ecx]
    2cf5:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    2cf9:	00 02                	add    BYTE PTR [edx],al
    2cfb:	02 07                	add    al,BYTE PTR [edi]
    2cfd:	f0 00 00             	lock add BYTE PTR [eax],al
    2d00:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    2d03:	00 00                	add    BYTE PTR [eax],al
    2d05:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2d08:	61                   	popa   
    2d09:	00 00                	add    BYTE PTR [eax],al
    2d0b:	00 02                	add    BYTE PTR [edx],al
    2d0d:	04 07                	add    al,0x7
    2d0f:	4e                   	dec    esi
    2d10:	00 00                	add    BYTE PTR [eax],al
    2d12:	00 02                	add    BYTE PTR [edx],al
    2d14:	08 07                	or     BYTE PTR [edi],al
    2d16:	44                   	inc    esp
    2d17:	00 00                	add    BYTE PTR [eax],al
    2d19:	00 02                	add    BYTE PTR [edx],al
    2d1b:	04 05                	add    al,0x5
    2d1d:	05 00 00 00 02       	add    eax,0x2000000
    2d22:	0c 04                	or     al,0x4
    2d24:	3d 01 00 00 05       	cmp    eax,0x5000001
    2d29:	04 83                	add    al,0x83
    2d2b:	00 00                	add    BYTE PTR [eax],al
    2d2d:	00 06                	add    BYTE PTR [esi],al
    2d2f:	25 00 00 00 02       	and    eax,0x2000000
    2d34:	01 02                	add    DWORD PTR [edx],eax
    2d36:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    2d3d:	5a                   	pop    edx
    2d3e:	01 00                	add    DWORD PTR [eax],eax
    2d40:	00 02                	add    BYTE PTR [edx],al
    2d42:	04 07                	add    al,0x7
    2d44:	49                   	dec    ecx
    2d45:	00 00                	add    BYTE PTR [eax],al
    2d47:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    2d4d:	00 07                	add    BYTE PTR [edi],al
    2d4f:	7f 09                	jg     2d5a <sysEnter_Vector-0x12d2a6>
    2d51:	00 00                	add    BYTE PTR [eax],al
    2d53:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    2d59:	9c                   	pushf  
    2d5a:	25 00 9f 3e 00       	and    eax,0x3e9f00
    2d5f:	00 00                	add    BYTE PTR [eax],al
    2d61:	01 9c d9 00 00 00 08 	add    DWORD PTR [ecx+ebx*8+0x8000000],ebx
    2d68:	93                   	xchg   ebx,eax
    2d69:	08 00                	or     BYTE PTR [eax],al
    2d6b:	00 01                	add    BYTE PTR [ecx],al
    2d6d:	1d 9d 00 00 00       	sbb    eax,0x9d
    2d72:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    2d78:	63 00                	arpl   WORD PTR [eax],ax
    2d7a:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    2d80:	02 91 04 00 07 77    	add    dl,BYTE PTR [ecx+0x77070004]
    2d86:	09 00                	or     DWORD PTR [eax],eax
    2d88:	00 01                	add    BYTE PTR [ecx],al
    2d8a:	23 9d 00 00 00 da    	and    ebx,DWORD PTR [ebp-0x26000000]
    2d90:	25 00 9f 3e 00       	and    eax,0x3e9f00
    2d95:	00 00                	add    BYTE PTR [eax],al
    2d97:	01 9c 0f 01 00 00 08 	add    DWORD PTR [edi+ecx*1+0x8000001],ebx
    2d9e:	93                   	xchg   ebx,eax
    2d9f:	08 00                	or     BYTE PTR [eax],al
    2da1:	00 01                	add    BYTE PTR [ecx],al
    2da3:	23 9d 00 00 00 02    	and    ebx,DWORD PTR [ebp+0x2000000]
    2da9:	91                   	xchg   ecx,eax
    2daa:	00 09                	add    BYTE PTR [ecx],cl
    2dac:	73 72                	jae    2e20 <sysEnter_Vector-0x12d1e0>
    2dae:	63 00                	arpl   WORD PTR [eax],ax
    2db0:	01 23                	add    DWORD PTR [ebx],esp
    2db2:	7d 00                	jge    2db4 <sysEnter_Vector-0x12d24c>
    2db4:	00 00                	add    BYTE PTR [eax],al
    2db6:	02 91 04 00 0a 86    	add    dl,BYTE PTR [ecx-0x79f5fffc]
    2dbc:	09 00                	or     DWORD PTR [eax],eax
    2dbe:	00 01                	add    BYTE PTR [ecx],al
    2dc0:	29 18                	sub    DWORD PTR [eax],ebx
    2dc2:	26 00 9f 6f 00 00 00 	add    BYTE PTR es:[edi+0x6f],bl
    2dc9:	01 9c 55 01 00 00 09 	add    DWORD PTR [ebp+edx*2+0x9000001],ebx
    2dd0:	70 00                	jo     2dd2 <sysEnter_Vector-0x12d22e>
    2dd2:	01 29                	add    DWORD PTR [ecx],ebp
    2dd4:	9d                   	popf   
    2dd5:	00 00                	add    BYTE PTR [eax],al
    2dd7:	00 02                	add    BYTE PTR [edx],al
    2dd9:	91                   	xchg   ecx,eax
    2dda:	00 09                	add    BYTE PTR [ecx],cl
    2ddc:	71 00                	jno    2dde <sysEnter_Vector-0x12d222>
    2dde:	01 29                	add    DWORD PTR [ecx],ebp
    2de0:	9d                   	popf   
    2de1:	00 00                	add    BYTE PTR [eax],al
    2de3:	00 02                	add    BYTE PTR [edx],al
    2de5:	91                   	xchg   ecx,eax
    2de6:	04 0b                	add    al,0xb
    2de8:	63 00                	arpl   WORD PTR [eax],ax
    2dea:	01 2a                	add    DWORD PTR [edx],ebp
    2dec:	3a 00                	cmp    al,BYTE PTR [eax]
    2dee:	00 00                	add    BYTE PTR [eax],al
    2df0:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2df6:	01 2a                	add    DWORD PTR [edx],ebp
    2df8:	3a 00                	cmp    al,BYTE PTR [eax]
    2dfa:	00 00                	add    BYTE PTR [eax],al
    2dfc:	02 91 70 00 0c 5b    	add    dl,BYTE PTR [ecx+0x5b0c0070]
    2e02:	00 00                	add    BYTE PTR [eax],al
    2e04:	00 02                	add    BYTE PTR [edx],al
    2e06:	34 56                	xor    al,0x56
    2e08:	00 00                	add    BYTE PTR [eax],al
    2e0a:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    2e10:	9f                   	lahf   
    2e11:	0c 0b                	or     al,0xb
    2e13:	01 00                	add    DWORD PTR [eax],eax
    2e15:	00 02                	add    BYTE PTR [edx],al
    2e17:	35 56 00 00 00       	xor    eax,0x56
    2e1c:	05 03 88 60 00       	add    eax,0x608803
    2e21:	9f                   	lahf   
    2e22:	0c 64                	or     al,0x64
    2e24:	00 00                	add    BYTE PTR [eax],al
    2e26:	00 02                	add    BYTE PTR [edx],al
    2e28:	36                   	ss
    2e29:	56                   	push   esi
    2e2a:	00 00                	add    BYTE PTR [eax],al
    2e2c:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    2e32:	9f                   	lahf   
    2e33:	0c 53                	or     al,0x53
    2e35:	01 00                	add    DWORD PTR [eax],eax
    2e37:	00 02                	add    BYTE PTR [edx],al
    2e39:	37                   	aaa    
    2e3a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e3b:	00 00                	add    BYTE PTR [eax],al
    2e3d:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    2e43:	9f                   	lahf   
    2e44:	0c 38                	or     al,0x38
    2e46:	00 00                	add    BYTE PTR [eax],al
    2e48:	00 03                	add    BYTE PTR [ebx],al
    2e4a:	53                   	push   ebx
    2e4b:	aa                   	stos   BYTE PTR es:[edi],al
    2e4c:	01 00                	add    DWORD PTR [eax],eax
    2e4e:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    2e54:	9f                   	lahf   
    2e55:	05 04 9d 00 00       	add    eax,0x9d04
    2e5a:	00 00                	add    BYTE PTR [eax],al
    2e5c:	6c                   	ins    BYTE PTR es:[edi],dx
    2e5d:	01 00                	add    DWORD PTR [eax],eax
    2e5f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2e62:	22 0f                	and    cl,BYTE PTR [edi]
    2e64:	00 00                	add    BYTE PTR [eax],al
    2e66:	04 01                	add    al,0x1
    2e68:	83 00 00             	add    DWORD PTR [eax],0x0
    2e6b:	00 0c ae             	add    BYTE PTR [esi+ebp*4],cl
    2e6e:	09 00                	or     DWORD PTR [eax],eax
    2e70:	00 15 00 00 00 88    	add    BYTE PTR ds:0x88000000,dl
    2e76:	26 00 9f 5e 00 00 00 	add    BYTE PTR es:[edi+0x5e],bl
    2e7d:	f2 12 00             	repnz adc al,BYTE PTR [eax]
    2e80:	00 02                	add    BYTE PTR [edx],al
    2e82:	01 06                	add    DWORD PTR [esi],eax
    2e84:	75 00                	jne    2e86 <sysEnter_Vector-0x12d17a>
    2e86:	00 00                	add    BYTE PTR [eax],al
    2e88:	02 01                	add    al,BYTE PTR [ecx]
    2e8a:	06                   	push   es
    2e8b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e8c:	00 00                	add    BYTE PTR [eax],al
    2e8e:	00 02                	add    BYTE PTR [edx],al
    2e90:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    2e96:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2e9d:	02 08                	add    cl,BYTE PTR [eax]
    2e9f:	05 00 00 00 00       	add    eax,0x0
    2ea4:	02 01                	add    al,BYTE PTR [ecx]
    2ea6:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    2eaa:	00 02                	add    BYTE PTR [edx],al
    2eac:	02 07                	add    al,BYTE PTR [edi]
    2eae:	f0 00 00             	lock add BYTE PTR [eax],al
    2eb1:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    2eb4:	00 00                	add    BYTE PTR [eax],al
    2eb6:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2eb9:	61                   	popa   
    2eba:	00 00                	add    BYTE PTR [eax],al
    2ebc:	00 02                	add    BYTE PTR [edx],al
    2ebe:	04 07                	add    al,0x7
    2ec0:	4e                   	dec    esi
    2ec1:	00 00                	add    BYTE PTR [eax],al
    2ec3:	00 02                	add    BYTE PTR [edx],al
    2ec5:	08 07                	or     BYTE PTR [edi],al
    2ec7:	44                   	inc    esp
    2ec8:	00 00                	add    BYTE PTR [eax],al
    2eca:	00 02                	add    BYTE PTR [edx],al
    2ecc:	04 05                	add    al,0x5
    2ece:	05 00 00 00 02       	add    eax,0x2000000
    2ed3:	0c 04                	or     al,0x4
    2ed5:	3d 01 00 00 05       	cmp    eax,0x5000001
    2eda:	04 83                	add    al,0x83
    2edc:	00 00                	add    BYTE PTR [eax],al
    2ede:	00 06                	add    BYTE PTR [esi],al
    2ee0:	25 00 00 00 02       	and    eax,0x2000000
    2ee5:	01 02                	add    DWORD PTR [edx],eax
    2ee7:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    2eee:	5a                   	pop    edx
    2eef:	01 00                	add    DWORD PTR [eax],eax
    2ef1:	00 02                	add    BYTE PTR [edx],al
    2ef3:	04 07                	add    al,0x7
    2ef5:	49                   	dec    ecx
    2ef6:	00 00                	add    BYTE PTR [eax],al
    2ef8:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    2efe:	00 07                	add    BYTE PTR [edi],al
    2f00:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    2f01:	09 00                	or     DWORD PTR [eax],eax
    2f03:	00 01                	add    BYTE PTR [ecx],al
    2f05:	18 3a                	sbb    BYTE PTR [edx],bh
    2f07:	00 00                	add    BYTE PTR [eax],al
    2f09:	00 88 26 00 9f 5e    	add    BYTE PTR [eax+0x5e9f0026],cl
    2f0f:	00 00                	add    BYTE PTR [eax],al
    2f11:	00 01                	add    BYTE PTR [ecx],al
    2f13:	9c                   	pushf  
    2f14:	09 01                	or     DWORD PTR [ecx],eax
    2f16:	00 00                	add    BYTE PTR [eax],al
    2f18:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    2f1b:	00 01                	add    BYTE PTR [ecx],al
    2f1d:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2f20:	00 00                	add    BYTE PTR [eax],al
    2f22:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    2f28:	00 01                	add    BYTE PTR [ecx],al
    2f2a:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2f2d:	00 00                	add    BYTE PTR [eax],al
    2f2f:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    2f35:	00 01                	add    BYTE PTR [ecx],al
    2f37:	1a 09                	sbb    cl,BYTE PTR [ecx]
    2f39:	01 00                	add    DWORD PTR [eax],eax
    2f3b:	00 01                	add    BYTE PTR [ecx],al
    2f3d:	53                   	push   ebx
    2f3e:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    2f41:	00 01                	add    BYTE PTR [ecx],al
    2f43:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    2f45:	01 00                	add    DWORD PTR [eax],eax
    2f47:	00 01                	add    BYTE PTR [ecx],al
    2f49:	56                   	push   esi
    2f4a:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    2f4d:	00 01                	add    BYTE PTR [ecx],al
    2f4f:	1c 48                	sbb    al,0x48
    2f51:	00 00                	add    BYTE PTR [eax],al
    2f53:	00 02                	add    BYTE PTR [edx],al
    2f55:	91                   	xchg   ecx,eax
    2f56:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2f57:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    2f5a:	00 01                	add    BYTE PTR [ecx],al
    2f5c:	1c 48                	sbb    al,0x48
    2f5e:	00 00                	add    BYTE PTR [eax],al
    2f60:	00 02                	add    BYTE PTR [edx],al
    2f62:	91                   	xchg   ecx,eax
    2f63:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2f64:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    2f6a:	00 06                	add    BYTE PTR [esi],al
    2f6c:	48                   	dec    eax
    2f6d:	00 00                	add    BYTE PTR [eax],al
    2f6f:	00 0a                	add    BYTE PTR [edx],cl
    2f71:	5b                   	pop    ebx
    2f72:	00 00                	add    BYTE PTR [eax],al
    2f74:	00 02                	add    BYTE PTR [edx],al
    2f76:	34 56                	xor    al,0x56
    2f78:	00 00                	add    BYTE PTR [eax],al
    2f7a:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    2f80:	9f                   	lahf   
    2f81:	0a 0b                	or     cl,BYTE PTR [ebx]
    2f83:	01 00                	add    DWORD PTR [eax],eax
    2f85:	00 02                	add    BYTE PTR [edx],al
    2f87:	35 56 00 00 00       	xor    eax,0x56
    2f8c:	05 03 88 60 00       	add    eax,0x608803
    2f91:	9f                   	lahf   
    2f92:	0a 64 00 00          	or     ah,BYTE PTR [eax+eax*1+0x0]
    2f96:	00 02                	add    BYTE PTR [edx],al
    2f98:	36                   	ss
    2f99:	56                   	push   esi
    2f9a:	00 00                	add    BYTE PTR [eax],al
    2f9c:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    2fa2:	9f                   	lahf   
    2fa3:	0a 53 01             	or     dl,BYTE PTR [ebx+0x1]
    2fa6:	00 00                	add    BYTE PTR [eax],al
    2fa8:	02 37                	add    dh,BYTE PTR [edi]
    2faa:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2fab:	00 00                	add    BYTE PTR [eax],al
    2fad:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    2fb3:	9f                   	lahf   
    2fb4:	0a 38                	or     bh,BYTE PTR [eax]
    2fb6:	00 00                	add    BYTE PTR [eax],al
    2fb8:	00 03                	add    BYTE PTR [ebx],al
    2fba:	53                   	push   ebx
    2fbb:	69 01 00 00 05 03    	imul   eax,DWORD PTR [ecx],0x3050000
    2fc1:	8c 60 00             	mov    WORD PTR [eax+0x0],fs
    2fc4:	9f                   	lahf   
    2fc5:	05 04 9d 00 00       	add    eax,0x9d04
    2fca:	00 00                	add    BYTE PTR [eax],al
    2fcc:	c9                   	leave  
    2fcd:	01 00                	add    DWORD PTR [eax],eax
    2fcf:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2fd2:	b4 0f                	mov    ah,0xf
    2fd4:	00 00                	add    BYTE PTR [eax],al
    2fd6:	04 01                	add    al,0x1
    2fd8:	83 00 00             	add    DWORD PTR [eax],0x0
    2fdb:	00 0c e0             	add    BYTE PTR [eax+eiz*8],cl
    2fde:	09 00                	or     DWORD PTR [eax],eax
    2fe0:	00 15 00 00 00 e8    	add    BYTE PTR ds:0xe8000000,dl
    2fe6:	26 00 9f c7 00 00 00 	add    BYTE PTR es:[edi+0xc7],bl
    2fed:	b1 13                	mov    cl,0x13
    2fef:	00 00                	add    BYTE PTR [eax],al
    2ff1:	02 01                	add    al,BYTE PTR [ecx]
    2ff3:	06                   	push   es
    2ff4:	75 00                	jne    2ff6 <sysEnter_Vector-0x12d00a>
    2ff6:	00 00                	add    BYTE PTR [eax],al
    2ff8:	02 01                	add    al,BYTE PTR [ecx]
    2ffa:	06                   	push   es
    2ffb:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2ffc:	00 00                	add    BYTE PTR [eax],al
    2ffe:	00 02                	add    BYTE PTR [edx],al
    3000:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3006:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    300d:	02 08                	add    cl,BYTE PTR [eax]
    300f:	05 00 00 00 00       	add    eax,0x0
    3014:	02 01                	add    al,BYTE PTR [ecx]
    3016:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    301a:	00 02                	add    BYTE PTR [edx],al
    301c:	02 07                	add    al,BYTE PTR [edi]
    301e:	f0 00 00             	lock add BYTE PTR [eax],al
    3021:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3024:	00 00                	add    BYTE PTR [eax],al
    3026:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3029:	61                   	popa   
    302a:	00 00                	add    BYTE PTR [eax],al
    302c:	00 02                	add    BYTE PTR [edx],al
    302e:	04 07                	add    al,0x7
    3030:	4e                   	dec    esi
    3031:	00 00                	add    BYTE PTR [eax],al
    3033:	00 02                	add    BYTE PTR [edx],al
    3035:	08 07                	or     BYTE PTR [edi],al
    3037:	44                   	inc    esp
    3038:	00 00                	add    BYTE PTR [eax],al
    303a:	00 02                	add    BYTE PTR [edx],al
    303c:	04 05                	add    al,0x5
    303e:	05 00 00 00 02       	add    eax,0x2000000
    3043:	0c 04                	or     al,0x4
    3045:	3d 01 00 00 05       	cmp    eax,0x5000001
    304a:	04 83                	add    al,0x83
    304c:	00 00                	add    BYTE PTR [eax],al
    304e:	00 06                	add    BYTE PTR [esi],al
    3050:	25 00 00 00 02       	and    eax,0x2000000
    3055:	01 02                	add    DWORD PTR [edx],eax
    3057:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    305e:	5a                   	pop    edx
    305f:	01 00                	add    DWORD PTR [eax],eax
    3061:	00 02                	add    BYTE PTR [edx],al
    3063:	04 07                	add    al,0x7
    3065:	49                   	dec    ecx
    3066:	00 00                	add    BYTE PTR [eax],al
    3068:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    306e:	00 07                	add    BYTE PTR [edi],al
    3070:	c3                   	ret    
    3071:	09 00                	or     DWORD PTR [eax],eax
    3073:	00 01                	add    BYTE PTR [ecx],al
    3075:	04 9d                	add    al,0x9d
    3077:	00 00                	add    BYTE PTR [eax],al
    3079:	00 e8                	add    al,ch
    307b:	26 00 9f 40 00 00 00 	add    BYTE PTR es:[edi+0x40],bl
    3082:	01 9c e3 00 00 00 08 	add    DWORD PTR [ebx+eiz*8+0x8000000],ebx
    3089:	73 31                	jae    30bc <sysEnter_Vector-0x12cf44>
    308b:	00 01                	add    BYTE PTR [ecx],al
    308d:	04 9d                	add    al,0x9d
    308f:	00 00                	add    BYTE PTR [eax],al
    3091:	00 02                	add    BYTE PTR [edx],al
    3093:	91                   	xchg   ecx,eax
    3094:	00 08                	add    BYTE PTR [eax],cl
    3096:	73 32                	jae    30ca <sysEnter_Vector-0x12cf36>
    3098:	00 01                	add    BYTE PTR [ecx],al
    309a:	04 7d                	add    al,0x7d
    309c:	00 00                	add    BYTE PTR [eax],al
    309e:	00 02                	add    BYTE PTR [edx],al
    30a0:	91                   	xchg   ecx,eax
    30a1:	04 09                	add    al,0x9
    30a3:	73 00                	jae    30a5 <sysEnter_Vector-0x12cf5b>
    30a5:	01 06                	add    DWORD PTR [esi],eax
    30a7:	9d                   	popf   
    30a8:	00 00                	add    BYTE PTR [eax],al
    30aa:	00 02                	add    BYTE PTR [edx],al
    30ac:	91                   	xchg   ecx,eax
    30ad:	74 00                	je     30af <sysEnter_Vector-0x12cf51>
    30af:	07                   	pop    es
    30b0:	ca 09 00             	retf   0x9
    30b3:	00 01                	add    BYTE PTR [ecx],al
    30b5:	0e                   	push   cs
    30b6:	9d                   	popf   
    30b7:	00 00                	add    BYTE PTR [eax],al
    30b9:	00 28                	add    BYTE PTR [eax],ch
    30bb:	27                   	daa    
    30bc:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    30c2:	01 9c 23 01 00 00 08 	add    DWORD PTR [ebx+eiz*1+0x8000001],ebx
    30c9:	73 31                	jae    30fc <sysEnter_Vector-0x12cf04>
    30cb:	00 01                	add    BYTE PTR [ecx],al
    30cd:	0e                   	push   cs
    30ce:	9d                   	popf   
    30cf:	00 00                	add    BYTE PTR [eax],al
    30d1:	00 02                	add    BYTE PTR [edx],al
    30d3:	91                   	xchg   ecx,eax
    30d4:	00 08                	add    BYTE PTR [eax],cl
    30d6:	73 32                	jae    310a <sysEnter_Vector-0x12cef6>
    30d8:	00 01                	add    BYTE PTR [ecx],al
    30da:	0e                   	push   cs
    30db:	7d 00                	jge    30dd <sysEnter_Vector-0x12cf23>
    30dd:	00 00                	add    BYTE PTR [eax],al
    30df:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    30e5:	01 10                	add    DWORD PTR [eax],edx
    30e7:	9d                   	popf   
    30e8:	00 00                	add    BYTE PTR [eax],al
    30ea:	00 02                	add    BYTE PTR [edx],al
    30ec:	91                   	xchg   ecx,eax
    30ed:	74 00                	je     30ef <sysEnter_Vector-0x12cf11>
    30ef:	07                   	pop    es
    30f0:	d8 09                	fmul   DWORD PTR [ecx]
    30f2:	00 00                	add    BYTE PTR [eax],al
    30f4:	01 18                	add    DWORD PTR [eax],ebx
    30f6:	9d                   	popf   
    30f7:	00 00                	add    BYTE PTR [eax],al
    30f9:	00 68 27             	add    BYTE PTR [eax+0x27],ch
    30fc:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
    3102:	01 9c 71 01 00 00 08 	add    DWORD PTR [ecx+esi*2+0x8000001],ebx
    3109:	73 31                	jae    313c <sysEnter_Vector-0x12cec4>
    310b:	00 01                	add    BYTE PTR [ecx],al
    310d:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    3113:	91                   	xchg   ecx,eax
    3114:	00 08                	add    BYTE PTR [eax],cl
    3116:	73 32                	jae    314a <sysEnter_Vector-0x12ceb6>
    3118:	00 01                	add    BYTE PTR [ecx],al
    311a:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    311d:	00 00                	add    BYTE PTR [eax],al
    311f:	02 91 04 0a d2 09    	add    dl,BYTE PTR [ecx+0x9d20a04]
    3125:	00 00                	add    BYTE PTR [eax],al
    3127:	01 18                	add    DWORD PTR [eax],ebx
    3129:	61                   	popa   
    312a:	00 00                	add    BYTE PTR [eax],al
    312c:	00 02                	add    BYTE PTR [edx],al
    312e:	91                   	xchg   ecx,eax
    312f:	08 09                	or     BYTE PTR [ecx],cl
    3131:	73 00                	jae    3133 <sysEnter_Vector-0x12cecd>
    3133:	01 1a                	add    DWORD PTR [edx],ebx
    3135:	9d                   	popf   
    3136:	00 00                	add    BYTE PTR [eax],al
    3138:	00 02                	add    BYTE PTR [edx],al
    313a:	91                   	xchg   ecx,eax
    313b:	74 00                	je     313d <sysEnter_Vector-0x12cec3>
    313d:	0b 5b 00             	or     ebx,DWORD PTR [ebx+0x0]
    3140:	00 00                	add    BYTE PTR [eax],al
    3142:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    3145:	00 00                	add    BYTE PTR [eax],al
    3147:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    314d:	9f                   	lahf   
    314e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    3150:	01 00                	add    DWORD PTR [eax],eax
    3152:	00 02                	add    BYTE PTR [edx],al
    3154:	35 56 00 00 00       	xor    eax,0x56
    3159:	05 03 88 60 00       	add    eax,0x608803
    315e:	9f                   	lahf   
    315f:	0b 64 00 00          	or     esp,DWORD PTR [eax+eax*1+0x0]
    3163:	00 02                	add    BYTE PTR [edx],al
    3165:	36                   	ss
    3166:	56                   	push   esi
    3167:	00 00                	add    BYTE PTR [eax],al
    3169:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    316f:	9f                   	lahf   
    3170:	0b 53 01             	or     edx,DWORD PTR [ebx+0x1]
    3173:	00 00                	add    BYTE PTR [eax],al
    3175:	02 37                	add    dh,BYTE PTR [edi]
    3177:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3178:	00 00                	add    BYTE PTR [eax],al
    317a:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    3180:	9f                   	lahf   
    3181:	0b 38                	or     edi,DWORD PTR [eax]
    3183:	00 00                	add    BYTE PTR [eax],al
    3185:	00 03                	add    BYTE PTR [ebx],al
    3187:	53                   	push   ebx
    3188:	c6 01 00             	mov    BYTE PTR [ecx],0x0
    318b:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    3191:	9f                   	lahf   
    3192:	05 04 9d 00 00       	add    eax,0x9d04
    3197:	00 00                	add    BYTE PTR [eax],al
    3199:	4c                   	dec    esp
    319a:	01 00                	add    DWORD PTR [eax],eax
    319c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    319f:	55                   	push   ebp
    31a0:	10 00                	adc    BYTE PTR [eax],al
    31a2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    31a5:	83 00 00             	add    DWORD PTR [eax],0x0
    31a8:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    31ab:	0a 00                	or     al,BYTE PTR [eax]
    31ad:	00 15 00 00 00 b0    	add    BYTE PTR ds:0xb0000000,dl
    31b3:	27                   	daa    
    31b4:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
    31ba:	91                   	xchg   ecx,eax
    31bb:	14 00                	adc    al,0x0
    31bd:	00 02                	add    BYTE PTR [edx],al
    31bf:	01 06                	add    DWORD PTR [esi],eax
    31c1:	75 00                	jne    31c3 <sysEnter_Vector-0x12ce3d>
    31c3:	00 00                	add    BYTE PTR [eax],al
    31c5:	02 01                	add    al,BYTE PTR [ecx]
    31c7:	06                   	push   es
    31c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    31c9:	00 00                	add    BYTE PTR [eax],al
    31cb:	00 02                	add    BYTE PTR [edx],al
    31cd:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    31d3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    31da:	02 08                	add    cl,BYTE PTR [eax]
    31dc:	05 00 00 00 00       	add    eax,0x0
    31e1:	02 01                	add    al,BYTE PTR [ecx]
    31e3:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    31e7:	00 02                	add    BYTE PTR [edx],al
    31e9:	02 07                	add    al,BYTE PTR [edi]
    31eb:	f0 00 00             	lock add BYTE PTR [eax],al
    31ee:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    31f1:	00 00                	add    BYTE PTR [eax],al
    31f3:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    31f6:	61                   	popa   
    31f7:	00 00                	add    BYTE PTR [eax],al
    31f9:	00 02                	add    BYTE PTR [edx],al
    31fb:	04 07                	add    al,0x7
    31fd:	4e                   	dec    esi
    31fe:	00 00                	add    BYTE PTR [eax],al
    3200:	00 02                	add    BYTE PTR [edx],al
    3202:	08 07                	or     BYTE PTR [edi],al
    3204:	44                   	inc    esp
    3205:	00 00                	add    BYTE PTR [eax],al
    3207:	00 02                	add    BYTE PTR [edx],al
    3209:	04 05                	add    al,0x5
    320b:	05 00 00 00 02       	add    eax,0x2000000
    3210:	0c 04                	or     al,0x4
    3212:	3d 01 00 00 02       	cmp    eax,0x2000001
    3217:	01 02                	add    DWORD PTR [edx],eax
    3219:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3220:	5a                   	pop    edx
    3221:	01 00                	add    DWORD PTR [eax],eax
    3223:	00 02                	add    BYTE PTR [edx],al
    3225:	04 07                	add    al,0x7
    3227:	49                   	dec    ecx
    3228:	00 00                	add    BYTE PTR [eax],al
    322a:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3230:	00 06                	add    BYTE PTR [esi],al
    3232:	f5                   	cmc    
    3233:	09 00                	or     DWORD PTR [eax],eax
    3235:	00 01                	add    BYTE PTR [ecx],al
    3237:	09 7d 00             	or     DWORD PTR [ebp+0x0],edi
    323a:	00 00                	add    BYTE PTR [eax],al
    323c:	b0 27                	mov    al,0x27
    323e:	00 9f 30 00 00 00    	add    BYTE PTR [edi+0x30],bl
    3244:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    324b:	63 00                	arpl   WORD PTR [eax],ax
    324d:	01 09                	add    DWORD PTR [ecx],ecx
    324f:	25 00 00 00 02       	and    eax,0x2000000
    3254:	91                   	xchg   ecx,eax
    3255:	74 00                	je     3257 <sysEnter_Vector-0x12cda9>
    3257:	08 01                	or     BYTE PTR [ecx],al
    3259:	0a 00                	or     al,BYTE PTR [eax]
    325b:	00 01                	add    BYTE PTR [ecx],al
    325d:	0e                   	push   cs
    325e:	7d 00                	jge    3260 <sysEnter_Vector-0x12cda0>
    3260:	00 00                	add    BYTE PTR [eax],al
    3262:	e0 27                	loopne 328b <sysEnter_Vector-0x12cd75>
    3264:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
    326a:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
    3271:	73 74                	jae    32e7 <sysEnter_Vector-0x12cd19>
    3273:	72 00                	jb     3275 <sysEnter_Vector-0x12cd8b>
    3275:	01 0e                	add    DWORD PTR [esi],ecx
    3277:	92                   	xchg   edx,eax
    3278:	00 00                	add    BYTE PTR [eax],al
    327a:	00 02                	add    BYTE PTR [edx],al
    327c:	91                   	xchg   ecx,eax
    327d:	00 09                	add    BYTE PTR [ecx],cl
    327f:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    3282:	00 01                	add    BYTE PTR [ecx],al
    3284:	10 3a                	adc    BYTE PTR [edx],bh
    3286:	00 00                	add    BYTE PTR [eax],al
    3288:	00 02                	add    BYTE PTR [edx],al
    328a:	91                   	xchg   ecx,eax
    328b:	74 00                	je     328d <sysEnter_Vector-0x12cd73>
    328d:	0a 5b 00             	or     bl,BYTE PTR [ebx+0x0]
    3290:	00 00                	add    BYTE PTR [eax],al
    3292:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    3295:	00 00                	add    BYTE PTR [eax],al
    3297:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    329d:	9f                   	lahf   
    329e:	0a 0b                	or     cl,BYTE PTR [ebx]
    32a0:	01 00                	add    DWORD PTR [eax],eax
    32a2:	00 02                	add    BYTE PTR [edx],al
    32a4:	35 56 00 00 00       	xor    eax,0x56
    32a9:	05 03 88 60 00       	add    eax,0x608803
    32ae:	9f                   	lahf   
    32af:	0a 64 00 00          	or     ah,BYTE PTR [eax+eax*1+0x0]
    32b3:	00 02                	add    BYTE PTR [edx],al
    32b5:	36                   	ss
    32b6:	56                   	push   esi
    32b7:	00 00                	add    BYTE PTR [eax],al
    32b9:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    32bf:	9f                   	lahf   
    32c0:	0a 53 01             	or     dl,BYTE PTR [ebx+0x1]
    32c3:	00 00                	add    BYTE PTR [eax],al
    32c5:	02 37                	add    dh,BYTE PTR [edi]
    32c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    32c8:	00 00                	add    BYTE PTR [eax],al
    32ca:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    32d0:	9f                   	lahf   
    32d1:	0a 38                	or     bh,BYTE PTR [eax]
    32d3:	00 00                	add    BYTE PTR [eax],al
    32d5:	00 03                	add    BYTE PTR [ebx],al
    32d7:	53                   	push   ebx
    32d8:	49                   	dec    ecx
    32d9:	01 00                	add    DWORD PTR [eax],eax
    32db:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    32e1:	9f                   	lahf   
    32e2:	05 04 92 00 00       	add    eax,0x9204
    32e7:	00 00                	add    BYTE PTR [eax],al
    32e9:	de 01                	fiadd  WORD PTR [ecx]
    32eb:	00 00                	add    BYTE PTR [eax],al
    32ed:	04 00                	add    al,0x0
    32ef:	fc                   	cld    
    32f0:	10 00                	adc    BYTE PTR [eax],al
    32f2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    32f5:	83 00 00             	add    DWORD PTR [eax],0x0
    32f8:	00 0c 41             	add    BYTE PTR [ecx+eax*2],cl
    32fb:	0a 00                	or     al,BYTE PTR [eax]
    32fd:	00 15 00 00 00 3c    	add    BYTE PTR ds:0x3c000000,dl
    3303:	28 00                	sub    BYTE PTR [eax],al
    3305:	9f                   	lahf   
    3306:	a2 00 00 00 60       	mov    ds:0x60000000,al
    330b:	15 00 00 02 01       	adc    eax,0x1020000
    3310:	06                   	push   es
    3311:	75 00                	jne    3313 <sysEnter_Vector-0x12cced>
    3313:	00 00                	add    BYTE PTR [eax],al
    3315:	02 01                	add    al,BYTE PTR [ecx]
    3317:	06                   	push   es
    3318:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3319:	00 00                	add    BYTE PTR [eax],al
    331b:	00 02                	add    BYTE PTR [edx],al
    331d:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3323:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    332a:	02 08                	add    cl,BYTE PTR [eax]
    332c:	05 00 00 00 00       	add    eax,0x0
    3331:	02 01                	add    al,BYTE PTR [ecx]
    3333:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3337:	00 02                	add    BYTE PTR [edx],al
    3339:	02 07                	add    al,BYTE PTR [edi]
    333b:	f0 00 00             	lock add BYTE PTR [eax],al
    333e:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3341:	00 00                	add    BYTE PTR [eax],al
    3343:	00 02                	add    BYTE PTR [edx],al
    3345:	34 61                	xor    al,0x61
    3347:	00 00                	add    BYTE PTR [eax],al
    3349:	00 02                	add    BYTE PTR [edx],al
    334b:	04 07                	add    al,0x7
    334d:	4e                   	dec    esi
    334e:	00 00                	add    BYTE PTR [eax],al
    3350:	00 02                	add    BYTE PTR [edx],al
    3352:	08 07                	or     BYTE PTR [edi],al
    3354:	44                   	inc    esp
    3355:	00 00                	add    BYTE PTR [eax],al
    3357:	00 04 2e             	add    BYTE PTR [esi+ebp*1],al
    335a:	05 00 00 03 d8       	add    eax,0xd8030000
    335f:	61                   	popa   
    3360:	00 00                	add    BYTE PTR [eax],al
    3362:	00 02                	add    BYTE PTR [edx],al
    3364:	04 05                	add    al,0x5
    3366:	05 00 00 00 02       	add    eax,0x2000000
    336b:	0c 04                	or     al,0x4
    336d:	3d 01 00 00 05       	cmp    eax,0x5000001
    3372:	04 8e                	add    al,0x8e
    3374:	00 00                	add    BYTE PTR [eax],al
    3376:	00 06                	add    BYTE PTR [esi],al
    3378:	25 00 00 00 02       	and    eax,0x2000000
    337d:	01 02                	add    DWORD PTR [edx],eax
    337f:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3386:	5a                   	pop    edx
    3387:	01 00                	add    DWORD PTR [eax],eax
    3389:	00 02                	add    BYTE PTR [edx],al
    338b:	04 07                	add    al,0x7
    338d:	49                   	dec    ecx
    338e:	00 00                	add    BYTE PTR [eax],al
    3390:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3396:	00 07                	add    BYTE PTR [edi],al
    3398:	21 0a                	and    DWORD PTR [edx],ecx
    339a:	00 00                	add    BYTE PTR [eax],al
    339c:	01 04 6f             	add    DWORD PTR [edi+ebp*2],eax
    339f:	00 00                	add    BYTE PTR [eax],al
    33a1:	00 3c 28             	add    BYTE PTR [eax+ebp*1],bh
    33a4:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
    33aa:	01 9c e4 00 00 00 08 	add    DWORD PTR [esp+eiz*8+0x8000000],ebx
    33b1:	73 74                	jae    3427 <sysEnter_Vector-0x12cbd9>
    33b3:	72 00                	jb     33b5 <sysEnter_Vector-0x12cc4b>
    33b5:	01 04 88             	add    DWORD PTR [eax+ecx*4],eax
    33b8:	00 00                	add    BYTE PTR [eax],al
    33ba:	00 02                	add    BYTE PTR [edx],al
    33bc:	91                   	xchg   ecx,eax
    33bd:	00 09                	add    BYTE PTR [ecx],cl
    33bf:	72 65                	jb     3426 <sysEnter_Vector-0x12cbda>
    33c1:	74 00                	je     33c3 <sysEnter_Vector-0x12cc3d>
    33c3:	01 05 6f 00 00 00    	add    DWORD PTR ds:0x6f,eax
    33c9:	02 91 74 00 0a 29    	add    dl,BYTE PTR [ecx+0x290a0074]
    33cf:	0a 00                	or     al,BYTE PTR [eax]
    33d1:	00 01                	add    BYTE PTR [ecx],al
    33d3:	0b 6f 00             	or     ebp,DWORD PTR [edi+0x0]
    33d6:	00 00                	add    BYTE PTR [eax],al
    33d8:	6d                   	ins    DWORD PTR es:[edi],dx
    33d9:	28 00                	sub    BYTE PTR [eax],al
    33db:	9f                   	lahf   
    33dc:	1a 00                	sbb    al,BYTE PTR [eax]
    33de:	00 00                	add    BYTE PTR [eax],al
    33e0:	01 9c 0c 01 00 00 08 	add    DWORD PTR [esp+ecx*1+0x8000001],ebx
    33e7:	73 74                	jae    345d <sysEnter_Vector-0x12cba3>
    33e9:	72 00                	jb     33eb <sysEnter_Vector-0x12cc15>
    33eb:	01 0b                	add    DWORD PTR [ebx],ecx
    33ed:	88 00                	mov    BYTE PTR [eax],al
    33ef:	00 00                	add    BYTE PTR [eax],al
    33f1:	02 91 00 00 07 30    	add    dl,BYTE PTR [ecx+0x30070000]
    33f7:	0a 00                	or     al,BYTE PTR [eax]
    33f9:	00 01                	add    BYTE PTR [ecx],al
    33fb:	10 6f 00             	adc    BYTE PTR [edi+0x0],ch
    33fe:	00 00                	add    BYTE PTR [eax],al
    3400:	87 28                	xchg   DWORD PTR [eax],ebp
    3402:	00 9f 39 00 00 00    	add    BYTE PTR [edi+0x39],bl
    3408:	01 9c 50 01 00 00 08 	add    DWORD PTR [eax+edx*2+0x8000001],ebx
    340f:	73 74                	jae    3485 <sysEnter_Vector-0x12cb7b>
    3411:	72 00                	jb     3413 <sysEnter_Vector-0x12cbed>
    3413:	01 10                	add    DWORD PTR [eax],edx
    3415:	88 00                	mov    BYTE PTR [eax],al
    3417:	00 00                	add    BYTE PTR [eax],al
    3419:	02 91 00 0b ec 04    	add    dl,BYTE PTR [ecx+0x4ec0b00]
    341f:	00 00                	add    BYTE PTR [eax],al
    3421:	01 10                	add    DWORD PTR [eax],edx
    3423:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3424:	00 00                	add    BYTE PTR [eax],al
    3426:	00 02                	add    BYTE PTR [edx],al
    3428:	91                   	xchg   ecx,eax
    3429:	04 09                	add    al,0x9
    342b:	72 65                	jb     3492 <sysEnter_Vector-0x12cb6e>
    342d:	74 00                	je     342f <sysEnter_Vector-0x12cbd1>
    342f:	01 12                	add    DWORD PTR [edx],edx
    3431:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3432:	00 00                	add    BYTE PTR [eax],al
    3434:	00 02                	add    BYTE PTR [edx],al
    3436:	91                   	xchg   ecx,eax
    3437:	74 00                	je     3439 <sysEnter_Vector-0x12cbc7>
    3439:	0a 39                	or     bh,BYTE PTR [ecx]
    343b:	0a 00                	or     al,BYTE PTR [eax]
    343d:	00 01                	add    BYTE PTR [ecx],al
    343f:	18 6f 00             	sbb    BYTE PTR [edi+0x0],ch
    3442:	00 00                	add    BYTE PTR [eax],al
    3444:	c0 28 00             	shr    BYTE PTR [eax],0x0
    3447:	9f                   	lahf   
    3448:	1e                   	push   ds
    3449:	00 00                	add    BYTE PTR [eax],al
    344b:	00 01                	add    BYTE PTR [ecx],al
    344d:	9c                   	pushf  
    344e:	86 01                	xchg   BYTE PTR [ecx],al
    3450:	00 00                	add    BYTE PTR [eax],al
    3452:	08 73 74             	or     BYTE PTR [ebx+0x74],dh
    3455:	72 00                	jb     3457 <sysEnter_Vector-0x12cba9>
    3457:	01 18                	add    DWORD PTR [eax],ebx
    3459:	88 00                	mov    BYTE PTR [eax],al
    345b:	00 00                	add    BYTE PTR [eax],al
    345d:	02 91 00 0b ec 04    	add    dl,BYTE PTR [ecx+0x4ec0b00]
    3463:	00 00                	add    BYTE PTR [eax],al
    3465:	01 18                	add    DWORD PTR [eax],ebx
    3467:	3a 00                	cmp    al,BYTE PTR [eax]
    3469:	00 00                	add    BYTE PTR [eax],al
    346b:	02 91 04 00 0c 5b    	add    dl,BYTE PTR [ecx+0x5b0c0004]
    3471:	00 00                	add    BYTE PTR [eax],al
    3473:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3476:	56                   	push   esi
    3477:	00 00                	add    BYTE PTR [eax],al
    3479:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    347f:	9f                   	lahf   
    3480:	0c 0b                	or     al,0xb
    3482:	01 00                	add    DWORD PTR [eax],eax
    3484:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    348b:	05 03 88 60 00       	add    eax,0x608803
    3490:	9f                   	lahf   
    3491:	0c 64                	or     al,0x64
    3493:	00 00                	add    BYTE PTR [eax],al
    3495:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3498:	56                   	push   esi
    3499:	00 00                	add    BYTE PTR [eax],al
    349b:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    34a1:	9f                   	lahf   
    34a2:	0c 53                	or     al,0x53
    34a4:	01 00                	add    DWORD PTR [eax],eax
    34a6:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    34a9:	7a 00                	jp     34ab <sysEnter_Vector-0x12cb55>
    34ab:	00 00                	add    BYTE PTR [eax],al
    34ad:	05 03 90 60 00       	add    eax,0x609003
    34b2:	9f                   	lahf   
    34b3:	0c 38                	or     al,0x38
    34b5:	00 00                	add    BYTE PTR [eax],al
    34b7:	00 05 53 db 01 00    	add    BYTE PTR ds:0x1db53,al
    34bd:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    34c3:	9f                   	lahf   
    34c4:	05 04 a8 00 00       	add    eax,0xa804
    34c9:	00 00                	add    BYTE PTR [eax],al
    34cb:	de 00                	fiadd  WORD PTR [eax]
    34cd:	00 00                	add    BYTE PTR [eax],al
    34cf:	04 00                	add    al,0x0
    34d1:	b9 11 00 00 04       	mov    ecx,0x4000011
    34d6:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    34dc:	67 0a 00             	or     al,BYTE PTR [bx+si]
    34df:	00 15 00 00 00 e0    	add    BYTE PTR ds:0xe0000000,dl
    34e5:	28 00                	sub    BYTE PTR [eax],al
    34e7:	9f                   	lahf   
    34e8:	ce                   	into   
    34e9:	00 00                	add    BYTE PTR [eax],al
    34eb:	00 39                	add    BYTE PTR [ecx],bh
    34ed:	16                   	push   ss
    34ee:	00 00                	add    BYTE PTR [eax],al
    34f0:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    34f7:	03 2e                	add    ebp,DWORD PTR [esi]
    34f9:	05 00 00 02 d8       	add    eax,0xd8020000
    34fe:	37                   	aaa    
    34ff:	00 00                	add    BYTE PTR [eax],al
    3501:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3504:	07                   	pop    es
    3505:	4e                   	dec    esi
    3506:	00 00                	add    BYTE PTR [eax],al
    3508:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    350b:	05 05 00 00 00       	add    eax,0x5
    3510:	04 08                	add    al,0x8
    3512:	05 00 00 00 00       	add    eax,0x0
    3517:	04 0c                	add    al,0xc
    3519:	04 3d                	add    al,0x3d
    351b:	01 00                	add    DWORD PTR [eax],eax
    351d:	00 05 5f 0a 00 00    	add    BYTE PTR ds:0xa5f,al
    3523:	01 0c 25 00 00 00 e0 	add    DWORD PTR [eiz*1-0x20000000],ecx
    352a:	28 00                	sub    BYTE PTR [eax],al
    352c:	9f                   	lahf   
    352d:	67 00 00             	add    BYTE PTR [bx+si],al
    3530:	00 01                	add    BYTE PTR [ecx],al
    3532:	9c                   	pushf  
    3533:	93                   	xchg   ebx,eax
    3534:	00 00                	add    BYTE PTR [eax],al
    3536:	00 06                	add    BYTE PTR [esi],al
    3538:	73 31                	jae    356b <sysEnter_Vector-0x12ca95>
    353a:	00 01                	add    BYTE PTR [ecx],al
    353c:	0c 93                	or     al,0x93
    353e:	00 00                	add    BYTE PTR [eax],al
    3540:	00 02                	add    BYTE PTR [edx],al
    3542:	91                   	xchg   ecx,eax
    3543:	00 06                	add    BYTE PTR [esi],al
    3545:	73 32                	jae    3579 <sysEnter_Vector-0x12ca87>
    3547:	00 01                	add    BYTE PTR [ecx],al
    3549:	0c 93                	or     al,0x93
    354b:	00 00                	add    BYTE PTR [eax],al
    354d:	00 02                	add    BYTE PTR [edx],al
    354f:	91                   	xchg   ecx,eax
    3550:	04 06                	add    al,0x6
    3552:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3553:	00 01                	add    BYTE PTR [ecx],al
    3555:	0c 2c                	or     al,0x2c
    3557:	00 00                	add    BYTE PTR [eax],al
    3559:	00 02                	add    BYTE PTR [edx],al
    355b:	91                   	xchg   ecx,eax
    355c:	08 00                	or     BYTE PTR [eax],al
    355e:	07                   	pop    es
    355f:	04 a0                	add    al,0xa0
    3561:	00 00                	add    BYTE PTR [eax],al
    3563:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3566:	06                   	push   es
    3567:	75 00                	jne    3569 <sysEnter_Vector-0x12ca97>
    3569:	00 00                	add    BYTE PTR [eax],al
    356b:	08 99 00 00 00 09    	or     BYTE PTR [ecx+0x9000000],bl
    3571:	56                   	push   esi
    3572:	0a 00                	or     al,BYTE PTR [eax]
    3574:	00 01                	add    BYTE PTR [ecx],al
    3576:	16                   	push   ss
    3577:	25 00 00 00 47       	and    eax,0x47000000
    357c:	29 00                	sub    DWORD PTR [eax],eax
    357e:	9f                   	lahf   
    357f:	67 00 00             	add    BYTE PTR [bx+si],al
    3582:	00 01                	add    BYTE PTR [ecx],al
    3584:	9c                   	pushf  
    3585:	06                   	push   es
    3586:	73 31                	jae    35b9 <sysEnter_Vector-0x12ca47>
    3588:	00 01                	add    BYTE PTR [ecx],al
    358a:	16                   	push   ss
    358b:	93                   	xchg   ebx,eax
    358c:	00 00                	add    BYTE PTR [eax],al
    358e:	00 02                	add    BYTE PTR [edx],al
    3590:	91                   	xchg   ecx,eax
    3591:	00 06                	add    BYTE PTR [esi],al
    3593:	73 32                	jae    35c7 <sysEnter_Vector-0x12ca39>
    3595:	00 01                	add    BYTE PTR [ecx],al
    3597:	16                   	push   ss
    3598:	93                   	xchg   ebx,eax
    3599:	00 00                	add    BYTE PTR [eax],al
    359b:	00 02                	add    BYTE PTR [edx],al
    359d:	91                   	xchg   ecx,eax
    359e:	04 06                	add    al,0x6
    35a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    35a1:	00 01                	add    BYTE PTR [ecx],al
    35a3:	16                   	push   ss
    35a4:	2c 00                	sub    al,0x0
    35a6:	00 00                	add    BYTE PTR [eax],al
    35a8:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    35ae:	00 00                	add    BYTE PTR [eax],al
    35b0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    35b3:	45                   	inc    ebp
    35b4:	12 00                	adc    al,BYTE PTR [eax]
    35b6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    35b9:	83 00 00             	add    DWORD PTR [eax],0x0
    35bc:	00 0c 7d 0a 00 00 15 	add    BYTE PTR [edi*2+0x1500000a],cl
    35c3:	00 00                	add    BYTE PTR [eax],al
    35c5:	00 b0 29 00 9f 80    	add    BYTE PTR [eax-0x7f60ffd7],dh
    35cb:	00 00                	add    BYTE PTR [eax],al
    35cd:	00 fe                	add    dh,bh
    35cf:	16                   	push   ss
    35d0:	00 00                	add    BYTE PTR [eax],al
    35d2:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    35d9:	03 2e                	add    ebp,DWORD PTR [esi]
    35db:	05 00 00 02 d8       	add    eax,0xd8020000
    35e0:	37                   	aaa    
    35e1:	00 00                	add    BYTE PTR [eax],al
    35e3:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    35e6:	07                   	pop    es
    35e7:	4e                   	dec    esi
    35e8:	00 00                	add    BYTE PTR [eax],al
    35ea:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    35ed:	05 05 00 00 00       	add    eax,0x5
    35f2:	04 08                	add    al,0x8
    35f4:	05 00 00 00 00       	add    eax,0x0
    35f9:	04 0c                	add    al,0xc
    35fb:	04 3d                	add    al,0x3d
    35fd:	01 00                	add    DWORD PTR [eax],eax
    35ff:	00 05 93 0a 00 00    	add    BYTE PTR ds:0xa93,al
    3605:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    360b:	b0 29                	mov    al,0x29
    360d:	00 9f 60 00 00 00    	add    BYTE PTR [edi+0x60],bl
    3613:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    361a:	73 31                	jae    364d <sysEnter_Vector-0x12c9b3>
    361c:	00 01                	add    BYTE PTR [ecx],al
    361e:	0d 9f 00 00 00       	or     eax,0x9f
    3623:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    3629:	00 01                	add    BYTE PTR [ecx],al
    362b:	0d ac 00 00 00       	or     eax,0xac
    3630:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    3636:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    363c:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    3642:	01 0f                	add    DWORD PTR [edi],ecx
    3644:	9f                   	lahf   
    3645:	00 00                	add    BYTE PTR [eax],al
    3647:	00 02                	add    BYTE PTR [edx],al
    3649:	91                   	xchg   ecx,eax
    364a:	74 00                	je     364c <sysEnter_Vector-0x12c9b4>
    364c:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    3653:	01 06                	add    DWORD PTR [esi],eax
    3655:	75 00                	jne    3657 <sysEnter_Vector-0x12c9a9>
    3657:	00 00                	add    BYTE PTR [eax],al
    3659:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    365c:	00 00                	add    BYTE PTR [eax],al
    365e:	00 09                	add    BYTE PTR [ecx],cl
    3660:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3661:	00 00                	add    BYTE PTR [eax],al
    3663:	00 0a                	add    BYTE PTR [edx],cl
    3665:	9c                   	pushf  
    3666:	0a 00                	or     al,BYTE PTR [eax]
    3668:	00 01                	add    BYTE PTR [ecx],al
    366a:	1b 9f 00 00 00 10    	sbb    ebx,DWORD PTR [edi+0x10000000]
    3670:	2a 00                	sub    al,BYTE PTR [eax]
    3672:	9f                   	lahf   
    3673:	20 00                	and    BYTE PTR [eax],al
    3675:	00 00                	add    BYTE PTR [eax],al
    3677:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    367e:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    3684:	91                   	xchg   ecx,eax
    3685:	00 06                	add    BYTE PTR [esi],al
    3687:	73 32                	jae    36bb <sysEnter_Vector-0x12c945>
    3689:	00 01                	add    BYTE PTR [ecx],al
    368b:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    3692:	04 06                	add    al,0x6
    3694:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3695:	00 01                	add    BYTE PTR [ecx],al
    3697:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    369a:	00 00                	add    BYTE PTR [eax],al
    369c:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    36a2:	01 00                	add    DWORD PTR [eax],eax
    36a4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    36a7:	e0 12                	loopne 36bb <sysEnter_Vector-0x12c945>
    36a9:	00 00                	add    BYTE PTR [eax],al
    36ab:	04 01                	add    al,0x1
    36ad:	83 00 00             	add    DWORD PTR [eax],0x0
    36b0:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
    36b3:	0a 00                	or     al,BYTE PTR [eax]
    36b5:	00 15 00 00 00 30    	add    BYTE PTR ds:0x30000000,dl
    36bb:	2a 00                	sub    al,BYTE PTR [eax]
    36bd:	9f                   	lahf   
    36be:	7d 01                	jge    36c1 <sysEnter_Vector-0x12c93f>
    36c0:	00 00                	add    BYTE PTR [eax],al
    36c2:	a3 17 00 00 02       	mov    ds:0x2000017,eax
    36c7:	01 06                	add    DWORD PTR [esi],eax
    36c9:	75 00                	jne    36cb <sysEnter_Vector-0x12c935>
    36cb:	00 00                	add    BYTE PTR [eax],al
    36cd:	02 01                	add    al,BYTE PTR [ecx]
    36cf:	06                   	push   es
    36d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    36d1:	00 00                	add    BYTE PTR [eax],al
    36d3:	00 02                	add    BYTE PTR [edx],al
    36d5:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    36db:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    36e2:	02 08                	add    cl,BYTE PTR [eax]
    36e4:	05 00 00 00 00       	add    eax,0x0
    36e9:	02 01                	add    al,BYTE PTR [ecx]
    36eb:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    36ef:	00 02                	add    BYTE PTR [edx],al
    36f1:	02 07                	add    al,BYTE PTR [edi]
    36f3:	f0 00 00             	lock add BYTE PTR [eax],al
    36f6:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    36f9:	00 00                	add    BYTE PTR [eax],al
    36fb:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    36fe:	61                   	popa   
    36ff:	00 00                	add    BYTE PTR [eax],al
    3701:	00 02                	add    BYTE PTR [edx],al
    3703:	04 07                	add    al,0x7
    3705:	4e                   	dec    esi
    3706:	00 00                	add    BYTE PTR [eax],al
    3708:	00 02                	add    BYTE PTR [edx],al
    370a:	08 07                	or     BYTE PTR [edi],al
    370c:	44                   	inc    esp
    370d:	00 00                	add    BYTE PTR [eax],al
    370f:	00 02                	add    BYTE PTR [edx],al
    3711:	04 05                	add    al,0x5
    3713:	05 00 00 00 02       	add    eax,0x2000000
    3718:	0c 04                	or     al,0x4
    371a:	3d 01 00 00 05       	cmp    eax,0x5000001
    371f:	04 83                	add    al,0x83
    3721:	00 00                	add    BYTE PTR [eax],al
    3723:	00 06                	add    BYTE PTR [esi],al
    3725:	25 00 00 00 02       	and    eax,0x2000000
    372a:	01 02                	add    DWORD PTR [edx],eax
    372c:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3733:	5a                   	pop    edx
    3734:	01 00                	add    DWORD PTR [eax],eax
    3736:	00 02                	add    BYTE PTR [edx],al
    3738:	04 07                	add    al,0x7
    373a:	49                   	dec    ecx
    373b:	00 00                	add    BYTE PTR [eax],al
    373d:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3743:	00 07                	add    BYTE PTR [edi],al
    3745:	c7                   	(bad)  
    3746:	0a 00                	or     al,BYTE PTR [eax]
    3748:	00 01                	add    BYTE PTR [ecx],al
    374a:	3b 96 00 00 00 30    	cmp    edx,DWORD PTR [esi+0x30000000]
    3750:	2a 00                	sub    al,BYTE PTR [eax]
    3752:	9f                   	lahf   
    3753:	7d 01                	jge    3756 <sysEnter_Vector-0x12c8aa>
    3755:	00 00                	add    BYTE PTR [eax],al
    3757:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    375e:	d6                   	(bad)  
    375f:	0a 00                	or     al,BYTE PTR [eax]
    3761:	00 01                	add    BYTE PTR [ecx],al
    3763:	3b 7d 00             	cmp    edi,DWORD PTR [ebp+0x0]
    3766:	00 00                	add    BYTE PTR [eax],al
    3768:	02 91 00 08 a4 0a    	add    dl,BYTE PTR [ecx+0xaa40800]
    376e:	00 00                	add    BYTE PTR [eax],al
    3770:	01 3b                	add    DWORD PTR [ebx],edi
    3772:	3a 01                	cmp    al,BYTE PTR [ecx]
    3774:	00 00                	add    BYTE PTR [eax],al
    3776:	02 91 04 08 0c 09    	add    dl,BYTE PTR [ecx+0x90c0804]
    377c:	00 00                	add    BYTE PTR [eax],al
    377e:	01 3b                	add    DWORD PTR [ebx],edi
    3780:	3a 00                	cmp    al,BYTE PTR [eax]
    3782:	00 00                	add    BYTE PTR [eax],al
    3784:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    378a:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    3790:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3793:	61                   	popa   
    3794:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    3797:	01 3e                	add    DWORD PTR [esi],edi
    3799:	96                   	xchg   esi,eax
    379a:	00 00                	add    BYTE PTR [eax],al
    379c:	00 01                	add    BYTE PTR [ecx],al
    379e:	57                   	push   edi
    379f:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    37a2:	01 3f                	add    DWORD PTR [edi],edi
    37a4:	3a 00                	cmp    al,BYTE PTR [eax]
    37a6:	00 00                	add    BYTE PTR [eax],al
    37a8:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    37ab:	cf                   	iret   
    37ac:	0a 00                	or     al,BYTE PTR [eax]
    37ae:	00 01                	add    BYTE PTR [ecx],al
    37b0:	40                   	inc    eax
    37b1:	96                   	xchg   esi,eax
    37b2:	00 00                	add    BYTE PTR [eax],al
    37b4:	00 0b                	add    BYTE PTR [ebx],cl
    37b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    37b7:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    37bb:	41                   	inc    ecx
    37bc:	3a 00                	cmp    al,BYTE PTR [eax]
    37be:	00 00                	add    BYTE PTR [eax],al
    37c0:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    37c3:	79 00                	jns    37c5 <sysEnter_Vector-0x12c83b>
    37c5:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    37c8:	00 00                	add    BYTE PTR [eax],al
    37ca:	00 01                	add    BYTE PTR [ecx],al
    37cc:	51                   	push   ecx
    37cd:	0c c0                	or     al,0xc0
    37cf:	0a 00                	or     al,BYTE PTR [eax]
    37d1:	00 01                	add    BYTE PTR [ecx],al
    37d3:	41                   	inc    ecx
    37d4:	3a 00                	cmp    al,BYTE PTR [eax]
    37d6:	00 00                	add    BYTE PTR [eax],al
    37d8:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    37db:	05 04 9d 00 00       	add    eax,0x9d04
    37e0:	00 0d 5b 00 00 00    	add    BYTE PTR ds:0x5b,cl
    37e6:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    37e9:	00 00                	add    BYTE PTR [eax],al
    37eb:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    37f1:	9f                   	lahf   
    37f2:	0d 0b 01 00 00       	or     eax,0x10b
    37f7:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    37fd:	05 03 88 60 00       	add    eax,0x608803
    3802:	9f                   	lahf   
    3803:	0d 64 00 00 00       	or     eax,0x64
    3808:	02 36                	add    dh,BYTE PTR [esi]
    380a:	56                   	push   esi
    380b:	00 00                	add    BYTE PTR [eax],al
    380d:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    3813:	9f                   	lahf   
    3814:	0d 53 01 00 00       	or     eax,0x153
    3819:	02 37                	add    dh,BYTE PTR [edi]
    381b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    381c:	00 00                	add    BYTE PTR [eax],al
    381e:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    3824:	9f                   	lahf   
    3825:	0d 38 00 00 00       	or     eax,0x38
    382a:	03 53 3a             	add    edx,DWORD PTR [ebx+0x3a]
    382d:	01 00                	add    DWORD PTR [eax],eax
    382f:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    3835:	9f                   	lahf   
    3836:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    383a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    383d:	9b                   	fwait
    383e:	13 00                	adc    eax,DWORD PTR [eax]
    3840:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3843:	83 00 00             	add    DWORD PTR [eax],0x0
    3846:	00 0c db             	add    BYTE PTR [ebx+ebx*8],cl
    3849:	0a 00                	or     al,BYTE PTR [eax]
    384b:	00 15 00 00 00 b0    	add    BYTE PTR ds:0xb0000000,dl
    3851:	2b 00                	sub    eax,DWORD PTR [eax]
    3853:	9f                   	lahf   
    3854:	1d 00 00 00 f0       	sbb    eax,0xf0000000
    3859:	18 00                	sbb    BYTE PTR [eax],al
    385b:	00 02                	add    BYTE PTR [edx],al
    385d:	f2 0a 00             	repnz or al,BYTE PTR [eax]
    3860:	00 01                	add    BYTE PTR [ecx],al
    3862:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3865:	00 00                	add    BYTE PTR [eax],al
    3867:	b0 2b                	mov    al,0x2b
    3869:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    386f:	01 9c 5b 00 00 00 03 	add    DWORD PTR [ebx+ebx*2+0x3000000],ebx
    3876:	76 61                	jbe    38d9 <sysEnter_Vector-0x12c727>
    3878:	6c                   	ins    BYTE PTR es:[edi],dx
    3879:	00 01                	add    BYTE PTR [ecx],al
    387b:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    387e:	00 00                	add    BYTE PTR [eax],al
    3880:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    3886:	74 00                	je     3888 <sysEnter_Vector-0x12c778>
    3888:	01 01                	add    DWORD PTR [ecx],eax
    388a:	68 00 00 00 02       	push   0x2000000
    388f:	91                   	xchg   ecx,eax
    3890:	04 00                	add    al,0x0
    3892:	04 04                	add    al,0x4
    3894:	61                   	popa   
    3895:	00 00                	add    BYTE PTR [eax],al
    3897:	00 05 01 06 75 00    	add    BYTE PTR ds:0x750601,al
    389d:	00 00                	add    BYTE PTR [eax],al
    389f:	06                   	push   es
    38a0:	04 05                	add    al,0x5
    38a2:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    38a9:	00 00                	add    BYTE PTR [eax],al
    38ab:	04 00                	add    al,0x0
    38ad:	f9                   	stc    
    38ae:	13 00                	adc    eax,DWORD PTR [eax]
    38b0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    38b3:	83 00 00             	add    DWORD PTR [eax],0x0
    38b6:	00 0c fa             	add    BYTE PTR [edx+edi*8],cl
    38b9:	0a 00                	or     al,BYTE PTR [eax]
    38bb:	00 15 00 00 00 d0    	add    BYTE PTR ds:0xd0000000,dl
    38c1:	2b 00                	sub    eax,DWORD PTR [eax]
    38c3:	9f                   	lahf   
    38c4:	9c                   	pushf  
    38c5:	01 00                	add    DWORD PTR [eax],eax
    38c7:	00 37                	add    BYTE PTR [edi],dh
    38c9:	19 00                	sbb    DWORD PTR [eax],eax
    38cb:	00 02                	add    BYTE PTR [edx],al
    38cd:	01 06                	add    DWORD PTR [esi],eax
    38cf:	75 00                	jne    38d1 <sysEnter_Vector-0x12c72f>
    38d1:	00 00                	add    BYTE PTR [eax],al
    38d3:	02 01                	add    al,BYTE PTR [ecx]
    38d5:	06                   	push   es
    38d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    38d7:	00 00                	add    BYTE PTR [eax],al
    38d9:	00 02                	add    BYTE PTR [edx],al
    38db:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    38e1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    38e8:	02 08                	add    cl,BYTE PTR [eax]
    38ea:	05 00 00 00 00       	add    eax,0x0
    38ef:	02 01                	add    al,BYTE PTR [ecx]
    38f1:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    38f5:	00 02                	add    BYTE PTR [edx],al
    38f7:	02 07                	add    al,BYTE PTR [edi]
    38f9:	f0 00 00             	lock add BYTE PTR [eax],al
    38fc:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    38ff:	00 00                	add    BYTE PTR [eax],al
    3901:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3904:	61                   	popa   
    3905:	00 00                	add    BYTE PTR [eax],al
    3907:	00 02                	add    BYTE PTR [edx],al
    3909:	04 07                	add    al,0x7
    390b:	4e                   	dec    esi
    390c:	00 00                	add    BYTE PTR [eax],al
    390e:	00 02                	add    BYTE PTR [edx],al
    3910:	08 07                	or     BYTE PTR [edi],al
    3912:	44                   	inc    esp
    3913:	00 00                	add    BYTE PTR [eax],al
    3915:	00 02                	add    BYTE PTR [edx],al
    3917:	04 05                	add    al,0x5
    3919:	05 00 00 00 02       	add    eax,0x2000000
    391e:	0c 04                	or     al,0x4
    3920:	3d 01 00 00 05       	cmp    eax,0x5000001
    3925:	04 83                	add    al,0x83
    3927:	00 00                	add    BYTE PTR [eax],al
    3929:	00 06                	add    BYTE PTR [esi],al
    392b:	25 00 00 00 02       	and    eax,0x2000000
    3930:	01 02                	add    DWORD PTR [edx],eax
    3932:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3939:	5a                   	pop    edx
    393a:	01 00                	add    DWORD PTR [eax],eax
    393c:	00 02                	add    BYTE PTR [edx],al
    393e:	04 07                	add    al,0x7
    3940:	49                   	dec    ecx
    3941:	00 00                	add    BYTE PTR [eax],al
    3943:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3949:	00 07                	add    BYTE PTR [edi],al
    394b:	0f 0b                	ud2    
    394d:	00 00                	add    BYTE PTR [eax],al
    394f:	01 57 6f             	add    DWORD PTR [edi+0x6f],edx
    3952:	00 00                	add    BYTE PTR [eax],al
    3954:	00 d0                	add    al,dl
    3956:	2b 00                	sub    eax,DWORD PTR [eax]
    3958:	9f                   	lahf   
    3959:	9c                   	pushf  
    395a:	01 00                	add    DWORD PTR [eax],eax
    395c:	00 01                	add    BYTE PTR [ecx],al
    395e:	9c                   	pushf  
    395f:	38 01                	cmp    BYTE PTR [ecx],al
    3961:	00 00                	add    BYTE PTR [eax],al
    3963:	08 d6                	or     dh,dl
    3965:	0a 00                	or     al,BYTE PTR [eax]
    3967:	00 01                	add    BYTE PTR [ecx],al
    3969:	57                   	push   edi
    396a:	7d 00                	jge    396c <sysEnter_Vector-0x12c694>
    396c:	00 00                	add    BYTE PTR [eax],al
    396e:	02 91 00 08 a4 0a    	add    dl,BYTE PTR [ecx+0xaa40800]
    3974:	00 00                	add    BYTE PTR [eax],al
    3976:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    3979:	01 00                	add    DWORD PTR [eax],eax
    397b:	00 02                	add    BYTE PTR [edx],al
    397d:	91                   	xchg   ecx,eax
    397e:	04 08                	add    al,0x8
    3980:	0c 09                	or     al,0x9
    3982:	00 00                	add    BYTE PTR [eax],al
    3984:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    3987:	00 00                	add    BYTE PTR [eax],al
    3989:	00 02                	add    BYTE PTR [edx],al
    398b:	91                   	xchg   ecx,eax
    398c:	08 09                	or     BYTE PTR [ecx],cl
    398e:	73 00                	jae    3990 <sysEnter_Vector-0x12c670>
    3990:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    3993:	00 00                	add    BYTE PTR [eax],al
    3995:	00 01                	add    BYTE PTR [ecx],al
    3997:	56                   	push   esi
    3998:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    399b:	63 00                	arpl   WORD PTR [eax],ax
    399d:	01 5a 96             	add    DWORD PTR [edx-0x6a],ebx
    39a0:	00 00                	add    BYTE PTR [eax],al
    39a2:	00 01                	add    BYTE PTR [ecx],al
    39a4:	57                   	push   edi
    39a5:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    39a8:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    39ab:	00 00                	add    BYTE PTR [eax],al
    39ad:	00 01                	add    BYTE PTR [ecx],al
    39af:	53                   	push   ebx
    39b0:	0a cf                	or     cl,bh
    39b2:	0a 00                	or     al,BYTE PTR [eax]
    39b4:	00 01                	add    BYTE PTR [ecx],al
    39b6:	5c                   	pop    esp
    39b7:	96                   	xchg   esi,eax
    39b8:	00 00                	add    BYTE PTR [eax],al
    39ba:	00 0b                	add    BYTE PTR [ebx],cl
    39bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    39bd:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    39c1:	5d                   	pop    ebp
    39c2:	3a 00                	cmp    al,BYTE PTR [eax]
    39c4:	00 00                	add    BYTE PTR [eax],al
    39c6:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    39c9:	79 00                	jns    39cb <sysEnter_Vector-0x12c635>
    39cb:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    39ce:	00 00                	add    BYTE PTR [eax],al
    39d0:	00 01                	add    BYTE PTR [ecx],al
    39d2:	51                   	push   ecx
    39d3:	0a c0                	or     al,al
    39d5:	0a 00                	or     al,BYTE PTR [eax]
    39d7:	00 01                	add    BYTE PTR [ecx],al
    39d9:	5d                   	pop    ebp
    39da:	3a 00                	cmp    al,BYTE PTR [eax]
    39dc:	00 00                	add    BYTE PTR [eax],al
    39de:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    39e4:	00 0c 5b             	add    BYTE PTR [ebx+ebx*2],cl
    39e7:	00 00                	add    BYTE PTR [eax],al
    39e9:	00 02                	add    BYTE PTR [edx],al
    39eb:	34 56                	xor    al,0x56
    39ed:	00 00                	add    BYTE PTR [eax],al
    39ef:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    39f5:	9f                   	lahf   
    39f6:	0c 0b                	or     al,0xb
    39f8:	01 00                	add    DWORD PTR [eax],eax
    39fa:	00 02                	add    BYTE PTR [edx],al
    39fc:	35 56 00 00 00       	xor    eax,0x56
    3a01:	05 03 88 60 00       	add    eax,0x608803
    3a06:	9f                   	lahf   
    3a07:	0c 64                	or     al,0x64
    3a09:	00 00                	add    BYTE PTR [eax],al
    3a0b:	00 02                	add    BYTE PTR [edx],al
    3a0d:	36                   	ss
    3a0e:	56                   	push   esi
    3a0f:	00 00                	add    BYTE PTR [eax],al
    3a11:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    3a17:	9f                   	lahf   
    3a18:	0c 53                	or     al,0x53
    3a1a:	01 00                	add    DWORD PTR [eax],eax
    3a1c:	00 02                	add    BYTE PTR [edx],al
    3a1e:	37                   	aaa    
    3a1f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3a20:	00 00                	add    BYTE PTR [eax],al
    3a22:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    3a28:	9f                   	lahf   
    3a29:	0c 38                	or     al,0x38
    3a2b:	00 00                	add    BYTE PTR [eax],al
    3a2d:	00 03                	add    BYTE PTR [ebx],al
    3a2f:	53                   	push   ebx
    3a30:	38 01                	cmp    BYTE PTR [ecx],al
    3a32:	00 00                	add    BYTE PTR [eax],al
    3a34:	05 03 8c 60 00       	add    eax,0x608c03
    3a39:	9f                   	lahf   
    3a3a:	00 62 01             	add    BYTE PTR [edx+0x1],ah
    3a3d:	00 00                	add    BYTE PTR [eax],al
    3a3f:	04 00                	add    al,0x0
    3a41:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3a42:	14 00                	adc    al,0x0
    3a44:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3a47:	83 00 00             	add    DWORD PTR [eax],0x0
    3a4a:	00 0c 16             	add    BYTE PTR [esi+edx*1],cl
    3a4d:	0b 00                	or     eax,DWORD PTR [eax]
    3a4f:	00 15 00 00 00 6c    	add    BYTE PTR ds:0x6c000000,dl
    3a55:	2d 00 9f b6 00       	sub    eax,0xb69f00
    3a5a:	00 00                	add    BYTE PTR [eax],al
    3a5c:	b0 1a                	mov    al,0x1a
    3a5e:	00 00                	add    BYTE PTR [eax],al
    3a60:	02 01                	add    al,BYTE PTR [ecx]
    3a62:	06                   	push   es
    3a63:	75 00                	jne    3a65 <sysEnter_Vector-0x12c59b>
    3a65:	00 00                	add    BYTE PTR [eax],al
    3a67:	02 01                	add    al,BYTE PTR [ecx]
    3a69:	06                   	push   es
    3a6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a6b:	00 00                	add    BYTE PTR [eax],al
    3a6d:	00 02                	add    BYTE PTR [edx],al
    3a6f:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3a75:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3a7c:	02 08                	add    cl,BYTE PTR [eax]
    3a7e:	05 00 00 00 00       	add    eax,0x0
    3a83:	02 01                	add    al,BYTE PTR [ecx]
    3a85:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3a89:	00 02                	add    BYTE PTR [edx],al
    3a8b:	02 07                	add    al,BYTE PTR [edi]
    3a8d:	f0 00 00             	lock add BYTE PTR [eax],al
    3a90:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3a93:	00 00                	add    BYTE PTR [eax],al
    3a95:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3a98:	61                   	popa   
    3a99:	00 00                	add    BYTE PTR [eax],al
    3a9b:	00 02                	add    BYTE PTR [edx],al
    3a9d:	04 07                	add    al,0x7
    3a9f:	4e                   	dec    esi
    3aa0:	00 00                	add    BYTE PTR [eax],al
    3aa2:	00 02                	add    BYTE PTR [edx],al
    3aa4:	08 07                	or     BYTE PTR [edi],al
    3aa6:	44                   	inc    esp
    3aa7:	00 00                	add    BYTE PTR [eax],al
    3aa9:	00 02                	add    BYTE PTR [edx],al
    3aab:	04 05                	add    al,0x5
    3aad:	05 00 00 00 02       	add    eax,0x2000000
    3ab2:	0c 04                	or     al,0x4
    3ab4:	3d 01 00 00 02       	cmp    eax,0x2000001
    3ab9:	01 02                	add    DWORD PTR [edx],eax
    3abb:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3ac2:	5a                   	pop    edx
    3ac3:	01 00                	add    DWORD PTR [eax],eax
    3ac5:	00 02                	add    BYTE PTR [edx],al
    3ac7:	04 07                	add    al,0x7
    3ac9:	49                   	dec    ecx
    3aca:	00 00                	add    BYTE PTR [eax],al
    3acc:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3ad2:	00 06                	add    BYTE PTR [esi],al
    3ad4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    3ad6:	00 00                	add    BYTE PTR [eax],al
    3ad8:	01 03                	add    DWORD PTR [ebx],eax
    3ada:	6c                   	ins    BYTE PTR es:[edi],dx
    3adb:	2d 00 9f 96 00       	sub    eax,0x969f00
    3ae0:	00 00                	add    BYTE PTR [eax],al
    3ae2:	01 9c e6 00 00 00 07 	add    DWORD PTR [esi+eiz*8+0x7000000],ebx
    3ae9:	34 0b                	xor    al,0xb
    3aeb:	00 00                	add    BYTE PTR [eax],al
    3aed:	01 03                	add    DWORD PTR [ebx],eax
    3aef:	92                   	xchg   edx,eax
    3af0:	00 00                	add    BYTE PTR [eax],al
    3af2:	00 02                	add    BYTE PTR [edx],al
    3af4:	91                   	xchg   ecx,eax
    3af5:	00 08                	add    BYTE PTR [eax],cl
    3af7:	64                   	fs
    3af8:	73 74                	jae    3b6e <sysEnter_Vector-0x12c492>
    3afa:	00 01                	add    BYTE PTR [ecx],al
    3afc:	05 92 00 00 00       	add    eax,0x92
    3b01:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    3b07:	63 00                	arpl   WORD PTR [eax],ax
    3b09:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    3b0f:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    3b15:	64 00 01             	add    BYTE PTR fs:[ecx],al
    3b18:	06                   	push   es
    3b19:	92                   	xchg   edx,eax
    3b1a:	00 00                	add    BYTE PTR [eax],al
    3b1c:	00 02                	add    BYTE PTR [edx],al
    3b1e:	91                   	xchg   ecx,eax
    3b1f:	64 00 06             	add    BYTE PTR fs:[esi],al
    3b22:	2c 0b                	sub    al,0xb
    3b24:	00 00                	add    BYTE PTR [eax],al
    3b26:	01 1f                	add    DWORD PTR [edi],ebx
    3b28:	02 2e                	add    ch,BYTE PTR [esi]
    3b2a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    3b30:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    3b37:	34 0b                	xor    al,0xb
    3b39:	00 00                	add    BYTE PTR [eax],al
    3b3b:	01 1f                	add    DWORD PTR [edi],ebx
    3b3d:	92                   	xchg   edx,eax
    3b3e:	00 00                	add    BYTE PTR [eax],al
    3b40:	00 02                	add    BYTE PTR [edx],al
    3b42:	91                   	xchg   ecx,eax
    3b43:	00 00                	add    BYTE PTR [eax],al
    3b45:	09 5b 00             	or     DWORD PTR [ebx+0x0],ebx
    3b48:	00 00                	add    BYTE PTR [eax],al
    3b4a:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    3b4d:	00 00                	add    BYTE PTR [eax],al
    3b4f:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    3b55:	9f                   	lahf   
    3b56:	09 0b                	or     DWORD PTR [ebx],ecx
    3b58:	01 00                	add    DWORD PTR [eax],eax
    3b5a:	00 02                	add    BYTE PTR [edx],al
    3b5c:	35 56 00 00 00       	xor    eax,0x56
    3b61:	05 03 88 60 00       	add    eax,0x608803
    3b66:	9f                   	lahf   
    3b67:	09 64 00 00          	or     DWORD PTR [eax+eax*1+0x0],esp
    3b6b:	00 02                	add    BYTE PTR [edx],al
    3b6d:	36                   	ss
    3b6e:	56                   	push   esi
    3b6f:	00 00                	add    BYTE PTR [eax],al
    3b71:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    3b77:	9f                   	lahf   
    3b78:	09 53 01             	or     DWORD PTR [ebx+0x1],edx
    3b7b:	00 00                	add    BYTE PTR [eax],al
    3b7d:	02 37                	add    dh,BYTE PTR [edi]
    3b7f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3b80:	00 00                	add    BYTE PTR [eax],al
    3b82:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    3b88:	9f                   	lahf   
    3b89:	09 38                	or     DWORD PTR [eax],edi
    3b8b:	00 00                	add    BYTE PTR [eax],al
    3b8d:	00 03                	add    BYTE PTR [ebx],al
    3b8f:	53                   	push   ebx
    3b90:	5f                   	pop    edi
    3b91:	01 00                	add    DWORD PTR [eax],eax
    3b93:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    3b99:	9f                   	lahf   
    3b9a:	05 04 92 00 00       	add    eax,0x9204
    3b9f:	00 00                	add    BYTE PTR [eax],al
    3ba1:	c2 01 00             	ret    0x1
    3ba4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3ba7:	2e                   	cs
    3ba8:	15 00 00 04 01       	adc    eax,0x1040000
    3bad:	83 00 00             	add    DWORD PTR [eax],0x0
    3bb0:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    3bb3:	0b 00                	or     eax,DWORD PTR [eax]
    3bb5:	00 15 00 00 00 24    	add    BYTE PTR ds:0x24000000,dl
    3bbb:	2e 00 9f 69 01 00 00 	add    BYTE PTR cs:[edi+0x169],bl
    3bc2:	83 1b 00             	sbb    DWORD PTR [ebx],0x0
    3bc5:	00 02                	add    BYTE PTR [edx],al
    3bc7:	01 06                	add    DWORD PTR [esi],eax
    3bc9:	75 00                	jne    3bcb <sysEnter_Vector-0x12c435>
    3bcb:	00 00                	add    BYTE PTR [eax],al
    3bcd:	02 01                	add    al,BYTE PTR [ecx]
    3bcf:	06                   	push   es
    3bd0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3bd1:	00 00                	add    BYTE PTR [eax],al
    3bd3:	00 02                	add    BYTE PTR [edx],al
    3bd5:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3bdb:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3be2:	02 08                	add    cl,BYTE PTR [eax]
    3be4:	05 00 00 00 00       	add    eax,0x0
    3be9:	02 01                	add    al,BYTE PTR [ecx]
    3beb:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3bef:	00 02                	add    BYTE PTR [edx],al
    3bf1:	02 07                	add    al,BYTE PTR [edi]
    3bf3:	f0 00 00             	lock add BYTE PTR [eax],al
    3bf6:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3bf9:	00 00                	add    BYTE PTR [eax],al
    3bfb:	00 02                	add    BYTE PTR [edx],al
    3bfd:	34 61                	xor    al,0x61
    3bff:	00 00                	add    BYTE PTR [eax],al
    3c01:	00 02                	add    BYTE PTR [edx],al
    3c03:	04 07                	add    al,0x7
    3c05:	4e                   	dec    esi
    3c06:	00 00                	add    BYTE PTR [eax],al
    3c08:	00 02                	add    BYTE PTR [edx],al
    3c0a:	08 07                	or     BYTE PTR [edi],al
    3c0c:	44                   	inc    esp
    3c0d:	00 00                	add    BYTE PTR [eax],al
    3c0f:	00 04 2e             	add    BYTE PTR [esi+ebp*1],al
    3c12:	05 00 00 03 d8       	add    eax,0xd8030000
    3c17:	61                   	popa   
    3c18:	00 00                	add    BYTE PTR [eax],al
    3c1a:	00 02                	add    BYTE PTR [edx],al
    3c1c:	04 05                	add    al,0x5
    3c1e:	05 00 00 00 02       	add    eax,0x2000000
    3c23:	0c 04                	or     al,0x4
    3c25:	3d 01 00 00 05       	cmp    eax,0x5000001
    3c2a:	04 8e                	add    al,0x8e
    3c2c:	00 00                	add    BYTE PTR [eax],al
    3c2e:	00 06                	add    BYTE PTR [esi],al
    3c30:	25 00 00 00 02       	and    eax,0x2000000
    3c35:	01 02                	add    DWORD PTR [edx],eax
    3c37:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3c3e:	5a                   	pop    edx
    3c3f:	01 00                	add    DWORD PTR [eax],eax
    3c41:	00 02                	add    BYTE PTR [edx],al
    3c43:	04 07                	add    al,0x7
    3c45:	49                   	dec    ecx
    3c46:	00 00                	add    BYTE PTR [eax],al
    3c48:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3c4e:	00 07                	add    BYTE PTR [edi],al
    3c50:	80 0b 00             	or     BYTE PTR [ebx],0x0
    3c53:	00 01                	add    BYTE PTR [ecx],al
    3c55:	0a a8 00 00 00 24    	or     ch,BYTE PTR [eax+0x24000000]
    3c5b:	2e 00 9f 43 01 00 00 	add    BYTE PTR cs:[edi+0x143],bl
    3c62:	01 9c 28 01 00 00 08 	add    DWORD PTR [eax+ebp*1+0x8000001],ebx
    3c69:	69 6e 00 01 0a 88 00 	imul   ebp,DWORD PTR [esi+0x0],0x880a01
    3c70:	00 00                	add    BYTE PTR [eax],al
    3c72:	02 91 00 09 78 0b    	add    dl,BYTE PTR [ecx+0xb780900]
    3c78:	00 00                	add    BYTE PTR [eax],al
    3c7a:	01 0a                	add    DWORD PTR [edx],ecx
    3c7c:	88 00                	mov    BYTE PTR [eax],al
    3c7e:	00 00                	add    BYTE PTR [eax],al
    3c80:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    3c86:	00 01                	add    BYTE PTR [ecx],al
    3c88:	0a 88 00 00 00 02    	or     cl,BYTE PTR [eax+0x2000000]
    3c8e:	91                   	xchg   ecx,eax
    3c8f:	08 0a                	or     BYTE PTR [edx],cl
    3c91:	43                   	inc    ebx
    3c92:	0b 00                	or     eax,DWORD PTR [eax]
    3c94:	00 01                	add    BYTE PTR [ecx],al
    3c96:	0c 6f                	or     al,0x6f
    3c98:	00 00                	add    BYTE PTR [eax],al
    3c9a:	00 02                	add    BYTE PTR [edx],al
    3c9c:	91                   	xchg   ecx,eax
    3c9d:	6c                   	ins    BYTE PTR es:[edi],dx
    3c9e:	0b 72 65             	or     esi,DWORD PTR [edx+0x65]
    3ca1:	73 00                	jae    3ca3 <sysEnter_Vector-0x12c35d>
    3ca3:	01 0e                	add    DWORD PTR [esi],ecx
    3ca5:	a8 00                	test   al,0x0
    3ca7:	00 00                	add    BYTE PTR [eax],al
    3ca9:	02 91 68 0a 63 0b    	add    dl,BYTE PTR [ecx+0xb630a68]
    3caf:	00 00                	add    BYTE PTR [eax],al
    3cb1:	01 10                	add    DWORD PTR [eax],edx
    3cb3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3cb4:	00 00                	add    BYTE PTR [eax],al
    3cb6:	00 02                	add    BYTE PTR [edx],al
    3cb8:	91                   	xchg   ecx,eax
    3cb9:	64 0a 5c 0b 00       	or     bl,BYTE PTR fs:[ebx+ecx*1+0x0]
    3cbe:	00 01                	add    BYTE PTR [ecx],al
    3cc0:	12 a8 00 00 00 02    	adc    ch,BYTE PTR [eax+0x2000000]
    3cc6:	91                   	xchg   ecx,eax
    3cc7:	60                   	pusha  
    3cc8:	00 0c 6d 0b 00 00 01 	add    BYTE PTR [ebp*2+0x100000b],cl
    3ccf:	2a a8 00 00 00 67    	sub    ch,BYTE PTR [eax+0x67000000]
    3cd5:	2f                   	das    
    3cd6:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    3cdc:	01 9c 6a 01 00 00 08 	add    DWORD PTR [edx+ebp*2+0x8000001],ebx
    3ce3:	69 6e 00 01 2a 88 00 	imul   ebp,DWORD PTR [esi+0x0],0x882a01
    3cea:	00 00                	add    BYTE PTR [eax],al
    3cec:	02 91 00 09 78 0b    	add    dl,BYTE PTR [ecx+0xb780900]
    3cf2:	00 00                	add    BYTE PTR [eax],al
    3cf4:	01 2a                	add    DWORD PTR [edx],ebp
    3cf6:	88 00                	mov    BYTE PTR [eax],al
    3cf8:	00 00                	add    BYTE PTR [eax],al
    3cfa:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    3d00:	00 01                	add    BYTE PTR [ecx],al
    3d02:	2a 88 00 00 00 02    	sub    cl,BYTE PTR [eax+0x2000000]
    3d08:	91                   	xchg   ecx,eax
    3d09:	08 00                	or     BYTE PTR [eax],al
    3d0b:	0d 5b 00 00 00       	or     eax,0x5b
    3d10:	04 34                	add    al,0x34
    3d12:	56                   	push   esi
    3d13:	00 00                	add    BYTE PTR [eax],al
    3d15:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    3d1b:	9f                   	lahf   
    3d1c:	0d 0b 01 00 00       	or     eax,0x10b
    3d21:	04 35                	add    al,0x35
    3d23:	56                   	push   esi
    3d24:	00 00                	add    BYTE PTR [eax],al
    3d26:	00 05 03 88 60 00    	add    BYTE PTR ds:0x608803,al
    3d2c:	9f                   	lahf   
    3d2d:	0d 64 00 00 00       	or     eax,0x64
    3d32:	04 36                	add    al,0x36
    3d34:	56                   	push   esi
    3d35:	00 00                	add    BYTE PTR [eax],al
    3d37:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    3d3d:	9f                   	lahf   
    3d3e:	0d 53 01 00 00       	or     eax,0x153
    3d43:	04 37                	add    al,0x37
    3d45:	7a 00                	jp     3d47 <sysEnter_Vector-0x12c2b9>
    3d47:	00 00                	add    BYTE PTR [eax],al
    3d49:	05 03 90 60 00       	add    eax,0x609003
    3d4e:	9f                   	lahf   
    3d4f:	0d 38 00 00 00       	or     eax,0x38
    3d54:	05 53 bf 01 00       	add    eax,0x1bf53
    3d59:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    3d5f:	9f                   	lahf   
    3d60:	05 04 a8 00 00       	add    eax,0xa804
    3d65:	00 00                	add    BYTE PTR [eax],al
    3d67:	06                   	push   es
    3d68:	02 00                	add    al,BYTE PTR [eax]
    3d6a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3d6d:	f8                   	clc    
    3d6e:	15 00 00 04 01       	adc    eax,0x1040000
    3d73:	83 00 00             	add    DWORD PTR [eax],0x0
    3d76:	00 0c 9d 0b 00 00 15 	add    BYTE PTR [ebx*4+0x1500000b],cl
    3d7d:	00 00                	add    BYTE PTR [eax],al
    3d7f:	00 90 2f 00 9f 29    	add    BYTE PTR [eax+0x299f002f],dl
    3d85:	01 00                	add    DWORD PTR [eax],eax
    3d87:	00 65 1c             	add    BYTE PTR [ebp+0x1c],ah
    3d8a:	00 00                	add    BYTE PTR [eax],al
    3d8c:	02 01                	add    al,BYTE PTR [ecx]
    3d8e:	06                   	push   es
    3d8f:	75 00                	jne    3d91 <sysEnter_Vector-0x12c26f>
    3d91:	00 00                	add    BYTE PTR [eax],al
    3d93:	02 01                	add    al,BYTE PTR [ecx]
    3d95:	06                   	push   es
    3d96:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3d97:	00 00                	add    BYTE PTR [eax],al
    3d99:	00 02                	add    BYTE PTR [edx],al
    3d9b:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3da1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3da8:	02 08                	add    cl,BYTE PTR [eax]
    3daa:	05 00 00 00 00       	add    eax,0x0
    3daf:	02 01                	add    al,BYTE PTR [ecx]
    3db1:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3db5:	00 02                	add    BYTE PTR [edx],al
    3db7:	02 07                	add    al,BYTE PTR [edi]
    3db9:	f0 00 00             	lock add BYTE PTR [eax],al
    3dbc:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3dbf:	00 00                	add    BYTE PTR [eax],al
    3dc1:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3dc4:	61                   	popa   
    3dc5:	00 00                	add    BYTE PTR [eax],al
    3dc7:	00 02                	add    BYTE PTR [edx],al
    3dc9:	04 07                	add    al,0x7
    3dcb:	4e                   	dec    esi
    3dcc:	00 00                	add    BYTE PTR [eax],al
    3dce:	00 02                	add    BYTE PTR [edx],al
    3dd0:	08 07                	or     BYTE PTR [edi],al
    3dd2:	44                   	inc    esp
    3dd3:	00 00                	add    BYTE PTR [eax],al
    3dd5:	00 02                	add    BYTE PTR [edx],al
    3dd7:	04 05                	add    al,0x5
    3dd9:	05 00 00 00 02       	add    eax,0x2000000
    3dde:	0c 04                	or     al,0x4
    3de0:	3d 01 00 00 05       	cmp    eax,0x5000001
    3de5:	04 83                	add    al,0x83
    3de7:	00 00                	add    BYTE PTR [eax],al
    3de9:	00 06                	add    BYTE PTR [esi],al
    3deb:	25 00 00 00 02       	and    eax,0x2000000
    3df0:	01 02                	add    DWORD PTR [edx],eax
    3df2:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3df9:	5a                   	pop    edx
    3dfa:	01 00                	add    DWORD PTR [eax],eax
    3dfc:	00 02                	add    BYTE PTR [edx],al
    3dfe:	04 07                	add    al,0x7
    3e00:	49                   	dec    ecx
    3e01:	00 00                	add    BYTE PTR [eax],al
    3e03:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3e09:	00 07                	add    BYTE PTR [edi],al
    3e0b:	94                   	xchg   esp,eax
    3e0c:	0b 00                	or     eax,DWORD PTR [eax]
    3e0e:	00 01                	add    BYTE PTR [ecx],al
    3e10:	33 9d 00 00 00 90    	xor    ebx,DWORD PTR [ebp-0x70000000]
    3e16:	2f                   	das    
    3e17:	00 9f 9e 00 00 00    	add    BYTE PTR [edi+0x9e],bl
    3e1d:	01 9c 0b 01 00 00 08 	add    DWORD PTR [ebx+ecx*1+0x8000001],ebx
    3e24:	b3 0b                	mov    bl,0xb
    3e26:	00 00                	add    BYTE PTR [eax],al
    3e28:	01 33                	add    DWORD PTR [ebx],esi
    3e2a:	9d                   	popf   
    3e2b:	00 00                	add    BYTE PTR [eax],al
    3e2d:	00 02                	add    BYTE PTR [edx],al
    3e2f:	91                   	xchg   ecx,eax
    3e30:	00 08                	add    BYTE PTR [eax],cl
    3e32:	b0 0b                	mov    al,0xb
    3e34:	00 00                	add    BYTE PTR [eax],al
    3e36:	01 33                	add    DWORD PTR [ebx],esi
    3e38:	9d                   	popf   
    3e39:	00 00                	add    BYTE PTR [eax],al
    3e3b:	00 02                	add    BYTE PTR [edx],al
    3e3d:	91                   	xchg   ecx,eax
    3e3e:	04 08                	add    al,0x8
    3e40:	57                   	push   edi
    3e41:	04 00                	add    al,0x0
    3e43:	00 01                	add    BYTE PTR [ecx],al
    3e45:	33 3a                	xor    edi,DWORD PTR [edx]
    3e47:	00 00                	add    BYTE PTR [eax],al
    3e49:	00 02                	add    BYTE PTR [edx],al
    3e4b:	91                   	xchg   ecx,eax
    3e4c:	08 09                	or     BYTE PTR [ecx],cl
    3e4e:	61                   	popa   
    3e4f:	00 01                	add    BYTE PTR [ecx],al
    3e51:	35 9d 00 00 00       	xor    eax,0x9d
    3e56:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3e59:	62 00                	bound  eax,QWORD PTR [eax]
    3e5b:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
    3e61:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    3e64:	6c                   	ins    BYTE PTR es:[edi],dx
    3e65:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    3e67:	00 01                	add    BYTE PTR [ecx],al
    3e69:	3b 3a                	cmp    edi,DWORD PTR [edx]
    3e6b:	00 00                	add    BYTE PTR [eax],al
    3e6d:	00 02                	add    BYTE PTR [edx],al
    3e6f:	91                   	xchg   ecx,eax
    3e70:	6c                   	ins    BYTE PTR es:[edi],dx
    3e71:	00 07                	add    BYTE PTR [edi],al
    3e73:	8c 0b                	mov    WORD PTR [ebx],cs
    3e75:	00 00                	add    BYTE PTR [eax],al
    3e77:	01 57 9d             	add    DWORD PTR [edi-0x63],edx
    3e7a:	00 00                	add    BYTE PTR [eax],al
    3e7c:	00 2e                	add    BYTE PTR [esi],ch
    3e7e:	30 00                	xor    BYTE PTR [eax],al
    3e80:	9f                   	lahf   
    3e81:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3e82:	00 00                	add    BYTE PTR [eax],al
    3e84:	00 01                	add    BYTE PTR [ecx],al
    3e86:	9c                   	pushf  
    3e87:	57                   	push   edi
    3e88:	01 00                	add    DWORD PTR [eax],eax
    3e8a:	00 08                	add    BYTE PTR [eax],cl
    3e8c:	b3 0b                	mov    bl,0xb
    3e8e:	00 00                	add    BYTE PTR [eax],al
    3e90:	01 57 7d             	add    DWORD PTR [edi+0x7d],edx
    3e93:	00 00                	add    BYTE PTR [eax],al
    3e95:	00 02                	add    BYTE PTR [edx],al
    3e97:	91                   	xchg   ecx,eax
    3e98:	00 08                	add    BYTE PTR [eax],cl
    3e9a:	b0 0b                	mov    al,0xb
    3e9c:	00 00                	add    BYTE PTR [eax],al
    3e9e:	01 57 7d             	add    DWORD PTR [edi+0x7d],edx
    3ea1:	00 00                	add    BYTE PTR [eax],al
    3ea3:	00 02                	add    BYTE PTR [edx],al
    3ea5:	91                   	xchg   ecx,eax
    3ea6:	04 09                	add    al,0x9
    3ea8:	61                   	popa   
    3ea9:	00 01                	add    BYTE PTR [ecx],al
    3eab:	59                   	pop    ecx
    3eac:	9d                   	popf   
    3ead:	00 00                	add    BYTE PTR [eax],al
    3eaf:	00 01                	add    BYTE PTR [ecx],al
    3eb1:	56                   	push   esi
    3eb2:	09 62 00             	or     DWORD PTR [edx+0x0],esp
    3eb5:	01 59 9d             	add    DWORD PTR [ecx-0x63],ebx
    3eb8:	00 00                	add    BYTE PTR [eax],al
    3eba:	00 01                	add    BYTE PTR [ecx],al
    3ebc:	53                   	push   ebx
    3ebd:	00 0a                	add    BYTE PTR [edx],cl
    3ebf:	ba 0b 00 00 01       	mov    edx,0x100000b
    3ec4:	76 9d                	jbe    3e63 <sysEnter_Vector-0x12c19d>
    3ec6:	00 00                	add    BYTE PTR [eax],al
    3ec8:	00 9c 30 00 9f 1d 00 	add    BYTE PTR [eax+esi*1+0x1d9f00],bl
    3ecf:	00 00                	add    BYTE PTR [eax],al
    3ed1:	01 9c 8d 01 00 00 08 	add    DWORD PTR [ebp+ecx*4+0x8000001],ebx
    3ed8:	b3 0b                	mov    bl,0xb
    3eda:	00 00                	add    BYTE PTR [eax],al
    3edc:	01 76 7d             	add    DWORD PTR [esi+0x7d],esi
    3edf:	00 00                	add    BYTE PTR [eax],al
    3ee1:	00 02                	add    BYTE PTR [edx],al
    3ee3:	91                   	xchg   ecx,eax
    3ee4:	00 08                	add    BYTE PTR [eax],cl
    3ee6:	b0 0b                	mov    al,0xb
    3ee8:	00 00                	add    BYTE PTR [eax],al
    3eea:	01 76 7d             	add    DWORD PTR [esi+0x7d],esi
    3eed:	00 00                	add    BYTE PTR [eax],al
    3eef:	00 02                	add    BYTE PTR [edx],al
    3ef1:	91                   	xchg   ecx,eax
    3ef2:	04 00                	add    al,0x0
    3ef4:	0b 25 00 00 00 9d    	or     esp,DWORD PTR ds:0x9d000000
    3efa:	01 00                	add    DWORD PTR [eax],eax
    3efc:	00 0c 8f             	add    BYTE PTR [edi+ecx*4],cl
    3eff:	00 00                	add    BYTE PTR [eax],al
    3f01:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    3f04:	0d aa 0b 00 00       	or     eax,0xbaa
    3f09:	01 19                	add    DWORD PTR [ecx],ebx
    3f0b:	8d 01                	lea    eax,[ecx]
    3f0d:	00 00                	add    BYTE PTR [eax],al
    3f0f:	05 03 00 5f 00       	add    eax,0x5f0003
    3f14:	9f                   	lahf   
    3f15:	0e                   	push   cs
    3f16:	5b                   	pop    ebx
    3f17:	00 00                	add    BYTE PTR [eax],al
    3f19:	00 02                	add    BYTE PTR [edx],al
    3f1b:	34 56                	xor    al,0x56
    3f1d:	00 00                	add    BYTE PTR [eax],al
    3f1f:	00 05 03 84 60 00    	add    BYTE PTR ds:0x608403,al
    3f25:	9f                   	lahf   
    3f26:	0e                   	push   cs
    3f27:	0b 01                	or     eax,DWORD PTR [ecx]
    3f29:	00 00                	add    BYTE PTR [eax],al
    3f2b:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    3f31:	05 03 88 60 00       	add    eax,0x608803
    3f36:	9f                   	lahf   
    3f37:	0e                   	push   cs
    3f38:	64 00 00             	add    BYTE PTR fs:[eax],al
    3f3b:	00 02                	add    BYTE PTR [edx],al
    3f3d:	36                   	ss
    3f3e:	56                   	push   esi
    3f3f:	00 00                	add    BYTE PTR [eax],al
    3f41:	00 05 03 80 60 00    	add    BYTE PTR ds:0x608003,al
    3f47:	9f                   	lahf   
    3f48:	0e                   	push   cs
    3f49:	53                   	push   ebx
    3f4a:	01 00                	add    DWORD PTR [eax],eax
    3f4c:	00 02                	add    BYTE PTR [edx],al
    3f4e:	37                   	aaa    
    3f4f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3f50:	00 00                	add    BYTE PTR [eax],al
    3f52:	00 05 03 90 60 00    	add    BYTE PTR ds:0x609003,al
    3f58:	9f                   	lahf   
    3f59:	0e                   	push   cs
    3f5a:	38 00                	cmp    BYTE PTR [eax],al
    3f5c:	00 00                	add    BYTE PTR [eax],al
    3f5e:	03 53 03             	add    edx,DWORD PTR [ebx+0x3]
    3f61:	02 00                	add    al,BYTE PTR [eax]
    3f63:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    3f69:	9f                   	lahf   
    3f6a:	05 04 9d 00 00       	add    eax,0x9d04
    3f6f:	00 00                	add    BYTE PTR [eax],al
    3f71:	96                   	xchg   esi,eax
    3f72:	05 00 00 04 00       	add    eax,0x40000
    3f77:	c7                   	(bad)  
    3f78:	16                   	push   ss
    3f79:	00 00                	add    BYTE PTR [eax],al
    3f7b:	04 01                	add    al,0x1
    3f7d:	83 00 00             	add    DWORD PTR [eax],0x0
    3f80:	00 0c c1             	add    BYTE PTR [ecx+eax*8],cl
    3f83:	0b 00                	or     eax,DWORD PTR [eax]
    3f85:	00 15 00 00 00 bc    	add    BYTE PTR ds:0xbc000000,dl
    3f8b:	30 00                	xor    BYTE PTR [eax],al
    3f8d:	9f                   	lahf   
    3f8e:	17                   	pop    ss
    3f8f:	0d 00 00 52 1d       	or     eax,0x1d520000
    3f94:	00 00                	add    BYTE PTR [eax],al
    3f96:	02 a6 03 00 00 04    	add    ah,BYTE PTR [esi+0x4000003]
    3f9c:	f3 00 00             	repz add BYTE PTR [eax],al
    3f9f:	00 06                	add    BYTE PTR [esi],al
    3fa1:	15 f3 00 00 00       	adc    eax,0xf3
    3fa6:	03 5d 03             	add    ebx,DWORD PTR [ebp+0x3]
    3fa9:	00 00                	add    BYTE PTR [eax],al
    3fab:	00 03                	add    BYTE PTR [ebx],al
    3fad:	aa                   	stos   BYTE PTR es:[edi],al
    3fae:	04 00                	add    al,0x0
    3fb0:	00 01                	add    BYTE PTR [ecx],al
    3fb2:	03 ce                	add    ecx,esi
    3fb4:	02 00                	add    al,BYTE PTR [eax]
    3fb6:	00 02                	add    BYTE PTR [edx],al
    3fb8:	03 9c 04 00 00 03 03 	add    ebx,DWORD PTR [esp+eax*1+0x3030000]
    3fbf:	05 03 00 00 04       	add    eax,0x4000003
    3fc4:	03 f7                	add    esi,edi
    3fc6:	02 00                	add    al,BYTE PTR [eax]
    3fc8:	00 05 03 7a 04 00    	add    BYTE PTR ds:0x47a03,al
    3fce:	00 06                	add    BYTE PTR [esi],al
    3fd0:	03 ed                	add    ebp,ebp
    3fd2:	03 00                	add    eax,DWORD PTR [eax]
    3fd4:	00 07                	add    BYTE PTR [edi],al
    3fd6:	03 34 03             	add    esi,DWORD PTR [ebx+eax*1]
    3fd9:	00 00                	add    BYTE PTR [eax],al
    3fdb:	08 03                	or     BYTE PTR [ebx],al
    3fdd:	e0 03                	loopne 3fe2 <sysEnter_Vector-0x12c01e>
    3fdf:	00 00                	add    BYTE PTR [eax],al
    3fe1:	09 03                	or     DWORD PTR [ebx],eax
    3fe3:	fa                   	cli    
    3fe4:	03 00                	add    eax,DWORD PTR [eax]
    3fe6:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    3fe9:	25 04 00 00 59       	and    eax,0x59000004
    3fee:	03 96 02 00 00 61    	add    edx,DWORD PTR [esi+0x61000002]
    3ff4:	03 bb 03 00 00 97    	add    edi,DWORD PTR [ebx-0x68fffffd]
    3ffa:	04 7d                	add    al,0x7d
    3ffc:	03 00                	add    eax,DWORD PTR [eax]
    3ffe:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    4001:	04 18                	add    al,0x18
    4003:	04 00                	add    al,0x0
    4005:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    4009:	49                   	dec    ecx
    400a:	04 00                	add    al,0x0
    400c:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    400f:	04 ba                	add    al,0xba
    4011:	02 00                	add    al,BYTE PTR [eax]
    4013:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    4016:	04 1f                	add    al,0x1f
    4018:	03 00                	add    eax,DWORD PTR [eax]
    401a:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    401d:	04 12                	add    al,0x12
    401f:	03 00                	add    eax,DWORD PTR [eax]
    4021:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    4024:	04 bd                	add    al,0xbd
    4026:	04 00                	add    al,0x0
    4028:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    402b:	04 a9                	add    al,0xa9
    402d:	02 00                	add    al,BYTE PTR [eax]
    402f:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4032:	04 e7                	add    al,0xe7
    4034:	02 00                	add    al,BYTE PTR [eax]
    4036:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4039:	04 8e                	add    al,0x8e
    403b:	04 00                	add    al,0x0
    403d:	00 00                	add    BYTE PTR [eax],al
    403f:	03 04 09             	add    eax,DWORD PTR [ecx+ecx*1]
    4042:	04 00                	add    al,0x0
    4044:	00 01                	add    BYTE PTR [ecx],al
    4046:	03 04 94             	add    eax,DWORD PTR [esp+edx*4]
    4049:	03 00                	add    eax,DWORD PTR [eax]
    404b:	00 02                	add    BYTE PTR [edx],al
    404d:	03 04 6d 03 00 00 03 	add    eax,DWORD PTR [ebp*2+0x3000003]
    4054:	03 04 cf             	add    eax,DWORD PTR [edi+ecx*8]
    4057:	03 00                	add    eax,DWORD PTR [eax]
    4059:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    405c:	04 39                	add    al,0x39
    405e:	04 00                	add    al,0x0
    4060:	00 05 03 00 05 04    	add    BYTE PTR ds:0x4050003,al
    4066:	07                   	pop    es
    4067:	4e                   	dec    esi
    4068:	00 00                	add    BYTE PTR [eax],al
    406a:	00 06                	add    BYTE PTR [esi],al
    406c:	04 05                	add    al,0x5
    406e:	69 6e 74 00 05 01 06 	imul   ebp,DWORD PTR [esi+0x74],0x6010500
    4075:	75 00                	jne    4077 <sysEnter_Vector-0x12bf89>
    4077:	00 00                	add    BYTE PTR [eax],al
    4079:	05 01 06 6e 00       	add    eax,0x6e0601
    407e:	00 00                	add    BYTE PTR [eax],al
    4080:	05 02 05 49 01       	add    eax,0x1490502
    4085:	00 00                	add    BYTE PTR [eax],al
    4087:	05 08 05 00 00       	add    eax,0x508
    408c:	00 00                	add    BYTE PTR [eax],al
    408e:	05 01 08 6c 00       	add    eax,0x6c0801
    4093:	00 00                	add    BYTE PTR [eax],al
    4095:	05 02 07 f0 00       	add    eax,0xf00702
    409a:	00 00                	add    BYTE PTR [eax],al
    409c:	07                   	pop    es
    409d:	7a 00                	jp     409f <sysEnter_Vector-0x12bf61>
    409f:	00 00                	add    BYTE PTR [eax],al
    40a1:	02 34 f3             	add    dh,BYTE PTR [ebx+esi*8]
    40a4:	00 00                	add    BYTE PTR [eax],al
    40a6:	00 05 08 07 44 00    	add    BYTE PTR ds:0x440708,al
    40ac:	00 00                	add    BYTE PTR [eax],al
    40ae:	05 04 05 05 00       	add    eax,0x50504
    40b3:	00 00                	add    BYTE PTR [eax],al
    40b5:	05 0c 04 3d 01       	add    eax,0x13d040c
    40ba:	00 00                	add    BYTE PTR [eax],al
    40bc:	07                   	pop    es
    40bd:	63 0c 00             	arpl   WORD PTR [eax+eax*1],cx
    40c0:	00 03                	add    BYTE PTR [ebx],al
    40c2:	2a 3d 01 00 00 08    	sub    bh,BYTE PTR ds:0x8000001
    40c8:	74 6d                	je     4137 <sysEnter_Vector-0x12bec9>
    40ca:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    40cd:	2c e6                	sub    al,0xe6
    40cf:	01 00                	add    DWORD PTR [eax],eax
    40d1:	00 09                	add    BYTE PTR [ecx],cl
    40d3:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    40d4:	0c 00                	or     al,0x0
    40d6:	00 03                	add    BYTE PTR [ebx],al
    40d8:	2e                   	cs
    40d9:	fa                   	cli    
    40da:	00 00                	add    BYTE PTR [eax],al
    40dc:	00 00                	add    BYTE PTR [eax],al
    40de:	09 44 0c 00          	or     DWORD PTR [esp+ecx*1+0x0],eax
    40e2:	00 03                	add    BYTE PTR [ebx],al
    40e4:	2f                   	das    
    40e5:	fa                   	cli    
    40e6:	00 00                	add    BYTE PTR [eax],al
    40e8:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    40eb:	d6                   	(bad)  
    40ec:	0b 00                	or     eax,DWORD PTR [eax]
    40ee:	00 03                	add    BYTE PTR [ebx],al
    40f0:	30 fa                	xor    dl,bh
    40f2:	00 00                	add    BYTE PTR [eax],al
    40f4:	00 08                	add    BYTE PTR [eax],cl
    40f6:	09 9e 0c 00 00 03    	or     DWORD PTR [esi+0x300000c],ebx
    40fc:	31 fa                	xor    edx,edi
    40fe:	00 00                	add    BYTE PTR [eax],al
    4100:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    4103:	0e                   	push   cs
    4104:	0c 00                	or     al,0x0
    4106:	00 03                	add    BYTE PTR [ebx],al
    4108:	32 fa                	xor    bh,dl
    410a:	00 00                	add    BYTE PTR [eax],al
    410c:	00 10                	add    BYTE PTR [eax],dl
    410e:	09 15 0c 00 00 03    	or     DWORD PTR ds:0x300000c,edx
    4114:	33 fa                	xor    edi,edx
    4116:	00 00                	add    BYTE PTR [eax],al
    4118:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    411b:	90                   	nop
    411c:	0c 00                	or     al,0x0
    411e:	00 03                	add    BYTE PTR [ebx],al
    4120:	34 fa                	xor    al,0xfa
    4122:	00 00                	add    BYTE PTR [eax],al
    4124:	00 18                	add    BYTE PTR [eax],bl
    4126:	09 4b 0c             	or     DWORD PTR [ebx+0xc],ecx
    4129:	00 00                	add    BYTE PTR [eax],al
    412b:	03 35 fa 00 00 00    	add    esi,DWORD PTR ds:0xfa
    4131:	1c 09                	sbb    al,0x9
    4133:	2b 0c 00             	sub    ecx,DWORD PTR [eax+eax*1]
    4136:	00 03                	add    BYTE PTR [ebx],al
    4138:	36                   	ss
    4139:	fa                   	cli    
    413a:	00 00                	add    BYTE PTR [eax],al
    413c:	00 20                	add    BYTE PTR [eax],ah
    413e:	09 86 0c 00 00 03    	or     DWORD PTR [esi+0x300000c],eax
    4144:	37                   	aaa    
    4145:	3d 01 00 00 24       	cmp    eax,0x24000001
    414a:	09 ad 0c 00 00 03    	or     DWORD PTR [ebp+0x300000c],ebp
    4150:	38 e6                	cmp    dh,ah
    4152:	01 00                	add    DWORD PTR [eax],eax
    4154:	00 28                	add    BYTE PTR [eax],ch
    4156:	00 0a                	add    BYTE PTR [edx],cl
    4158:	04 ec                	add    al,0xec
    415a:	01 00                	add    DWORD PTR [eax],eax
    415c:	00 0b                	add    BYTE PTR [ebx],cl
    415e:	01 01                	add    DWORD PTR [ecx],eax
    4160:	00 00                	add    BYTE PTR [eax],al
    4162:	05 01 02 ea 00       	add    eax,0xea0201
    4167:	00 00                	add    BYTE PTR [eax],al
    4169:	05 04 07 5a 01       	add    eax,0x15a0704
    416e:	00 00                	add    BYTE PTR [eax],al
    4170:	05 04 07 49 00       	add    eax,0x490704
    4175:	00 00                	add    BYTE PTR [eax],al
    4177:	0a 04 01             	or     al,BYTE PTR [ecx+eax*1]
    417a:	01 00                	add    DWORD PTR [eax],eax
    417c:	00 0c de             	add    BYTE PTR [esi+ebx*8],cl
    417f:	0b 00                	or     eax,DWORD PTR [eax]
    4181:	00 01                	add    BYTE PTR [ecx],al
    4183:	17                   	pop    ss
    4184:	4b                   	dec    ebx
    4185:	01 00                	add    DWORD PTR [eax],eax
    4187:	00 bc 30 00 9f 44 00 	add    BYTE PTR [eax+esi*1+0x449f00],bh
    418e:	00 00                	add    BYTE PTR [eax],al
    4190:	01 9c 34 02 00 00 0d 	add    DWORD PTR [esp+esi*1+0xd000002],ebx
    4197:	14 05                	adc    al,0x5
    4199:	00 00                	add    BYTE PTR [eax],al
    419b:	01 19                	add    DWORD PTR [ecx],ebx
    419d:	2b 01                	sub    eax,DWORD PTR [ecx]
    419f:	00 00                	add    BYTE PTR [eax],al
    41a1:	02 91 6c 00 0e 3a    	add    dl,BYTE PTR [ecx+0x3a0e006c]
    41a7:	0c 00                	or     al,0x0
    41a9:	00 01                	add    BYTE PTR [ecx],al
    41ab:	1f                   	pop    ds
    41ac:	a2 02 00 00 00       	mov    ds:0x2,al
    41b1:	31 00                	xor    DWORD PTR [eax],eax
    41b3:	9f                   	lahf   
    41b4:	19 03                	sbb    DWORD PTR [ebx],eax
    41b6:	00 00                	add    BYTE PTR [eax],al
    41b8:	01 9c a2 02 00 00 0f 	add    DWORD PTR [edx+eiz*4+0xf000002],ebx
    41bf:	b5 0c                	mov    ch,0xc
    41c1:	00 00                	add    BYTE PTR [eax],al
    41c3:	01 1f                	add    DWORD PTR [edi],ebx
    41c5:	a8 02                	test   al,0x2
    41c7:	00 00                	add    BYTE PTR [eax],al
    41c9:	02 91 00 0f 5d 0c    	add    dl,BYTE PTR [ecx+0xc5d0f00]
    41cf:	00 00                	add    BYTE PTR [eax],al
    41d1:	01 1f                	add    DWORD PTR [edi],ebx
    41d3:	a2 02 00 00 02       	mov    ds:0x2000002,al
    41d8:	91                   	xchg   ecx,eax
    41d9:	04 0d                	add    al,0xd
    41db:	81 0c 00 00 01 21 4b 	or     DWORD PTR [eax+eax*1],0x4b210100
    41e2:	01 00                	add    DWORD PTR [eax],eax
    41e4:	00 02                	add    BYTE PTR [edx],al
    41e6:	91                   	xchg   ecx,eax
    41e7:	68 0d 76 0c 00       	push   0xc760d
    41ec:	00 01                	add    BYTE PTR [ecx],al
    41ee:	22 ff                	and    bh,bh
    41f0:	01 00                	add    DWORD PTR [eax],eax
    41f2:	00 02                	add    BYTE PTR [edx],al
    41f4:	91                   	xchg   ecx,eax
    41f5:	64                   	fs
    41f6:	0d 34 0c 00 00       	or     eax,0xc34
    41fb:	01 22                	add    DWORD PTR [edx],esp
    41fd:	ff 01                	inc    DWORD PTR [ecx]
    41ff:	00 00                	add    BYTE PTR [eax],al
    4201:	02 91 70 0d 18 0c    	add    dl,BYTE PTR [ecx+0xc180d70]
    4207:	00 00                	add    BYTE PTR [eax],al
    4209:	01 23                	add    DWORD PTR [ebx],esp
    420b:	fa                   	cli    
    420c:	00 00                	add    BYTE PTR [eax],al
    420e:	00 02                	add    BYTE PTR [edx],al
    4210:	91                   	xchg   ecx,eax
    4211:	6c                   	ins    BYTE PTR es:[edi],dx
    4212:	00 0a                	add    BYTE PTR [edx],cl
    4214:	04 56                	add    al,0x56
    4216:	01 00                	add    DWORD PTR [eax],eax
    4218:	00 0a                	add    BYTE PTR [edx],cl
    421a:	04 ae                	add    al,0xae
    421c:	02 00                	add    al,BYTE PTR [eax]
    421e:	00 0b                	add    BYTE PTR [ebx],cl
    4220:	4b                   	dec    ebx
    4221:	01 00                	add    DWORD PTR [eax],eax
    4223:	00 10                	add    BYTE PTR [eax],dl
    4225:	f9                   	stc    
    4226:	0b 00                	or     eax,DWORD PTR [eax]
    4228:	00 01                	add    BYTE PTR [ecx],al
    422a:	3c a2                	cmp    al,0xa2
    422c:	02 00                	add    al,BYTE PTR [eax]
    422e:	00 19                	add    BYTE PTR [ecx],bl
    4230:	34 00                	xor    al,0x0
    4232:	9f                   	lahf   
    4233:	1d 00 00 00 01       	sbb    eax,0x1000000
    4238:	9c                   	pushf  
    4239:	e9 02 00 00 0f       	jmp    f004240 <sysEnter_Vector+0xeed4240>
    423e:	b5 0c                	mov    ch,0xc
    4240:	00 00                	add    BYTE PTR [eax],al
    4242:	01 3c a8             	add    DWORD PTR [eax+ebp*4],edi
    4245:	02 00                	add    al,BYTE PTR [eax]
    4247:	00 02                	add    BYTE PTR [edx],al
    4249:	91                   	xchg   ecx,eax
    424a:	00 0f                	add    BYTE PTR [edi],cl
    424c:	5d                   	pop    ebp
    424d:	0c 00                	or     al,0x0
    424f:	00 01                	add    BYTE PTR [ecx],al
    4251:	3c a2                	cmp    al,0xa2
    4253:	02 00                	add    al,BYTE PTR [eax]
    4255:	00 02                	add    BYTE PTR [edx],al
    4257:	91                   	xchg   ecx,eax
    4258:	04 00                	add    al,0x0
    425a:	10 cc                	adc    ah,cl
    425c:	0b 00                	or     eax,DWORD PTR [eax]
    425e:	00 01                	add    BYTE PTR [ecx],al
    4260:	41                   	inc    ecx
    4261:	a2 02 00 00 36       	mov    ds:0x36000002,al
    4266:	34 00                	xor    al,0x0
    4268:	9f                   	lahf   
    4269:	46                   	inc    esi
    426a:	00 00                	add    BYTE PTR [eax],al
    426c:	00 01                	add    BYTE PTR [ecx],al
    426e:	9c                   	pushf  
    426f:	1d 03 00 00 0f       	sbb    eax,0xf000003
    4274:	b5 0c                	mov    ch,0xc
    4276:	00 00                	add    BYTE PTR [eax],al
    4278:	01 41 a8             	add    DWORD PTR [ecx-0x58],eax
    427b:	02 00                	add    al,BYTE PTR [eax]
    427d:	00 02                	add    BYTE PTR [edx],al
    427f:	91                   	xchg   ecx,eax
    4280:	00 11                	add    BYTE PTR [ecx],dl
    4282:	74 00                	je     4284 <sysEnter_Vector-0x12bd7c>
    4284:	01 42 4b             	add    DWORD PTR [edx+0x4b],eax
    4287:	01 00                	add    DWORD PTR [eax],eax
    4289:	00 02                	add    BYTE PTR [edx],al
    428b:	91                   	xchg   ecx,eax
    428c:	6c                   	ins    BYTE PTR es:[edi],dx
    428d:	00 10                	add    BYTE PTR [eax],dl
    428f:	bb 0c 00 00 01       	mov    ebx,0x100000c
    4294:	48                   	dec    eax
    4295:	a2 02 00 00 7c       	mov    ds:0x7c000002,al
    429a:	34 00                	xor    al,0x0
    429c:	9f                   	lahf   
    429d:	35 00 00 00 01       	xor    eax,0x1000000
    42a2:	9c                   	pushf  
    42a3:	5f                   	pop    edi
    42a4:	03 00                	add    eax,DWORD PTR [eax]
    42a6:	00 0f                	add    BYTE PTR [edi],cl
    42a8:	b5 0c                	mov    ch,0xc
    42aa:	00 00                	add    BYTE PTR [eax],al
    42ac:	01 48 a8             	add    DWORD PTR [eax-0x58],ecx
    42af:	02 00                	add    al,BYTE PTR [eax]
    42b1:	00 02                	add    BYTE PTR [edx],al
    42b3:	91                   	xchg   ecx,eax
    42b4:	00 0f                	add    BYTE PTR [edi],cl
    42b6:	5d                   	pop    ebp
    42b7:	0c 00                	or     al,0x0
    42b9:	00 01                	add    BYTE PTR [ecx],al
    42bb:	48                   	dec    eax
    42bc:	a2 02 00 00 02       	mov    ds:0x2000002,al
    42c1:	91                   	xchg   ecx,eax
    42c2:	04 11                	add    al,0x11
    42c4:	74 00                	je     42c6 <sysEnter_Vector-0x12bd3a>
    42c6:	01 4a 4b             	add    DWORD PTR [edx+0x4b],ecx
    42c9:	01 00                	add    DWORD PTR [eax],eax
    42cb:	00 02                	add    BYTE PTR [edx],al
    42cd:	91                   	xchg   ecx,eax
    42ce:	74 00                	je     42d0 <sysEnter_Vector-0x12bd30>
    42d0:	10 6a 0c             	adc    BYTE PTR [edx+0xc],ch
    42d3:	00 00                	add    BYTE PTR [eax],al
    42d5:	01 50 a2             	add    DWORD PTR [eax-0x5e],edx
    42d8:	02 00                	add    al,BYTE PTR [eax]
    42da:	00 b1 34 00 9f 1d    	add    BYTE PTR [ecx+0x1d9f0034],dh
    42e0:	00 00                	add    BYTE PTR [eax],al
    42e2:	00 01                	add    BYTE PTR [ecx],al
    42e4:	9c                   	pushf  
    42e5:	95                   	xchg   ebp,eax
    42e6:	03 00                	add    eax,DWORD PTR [eax]
    42e8:	00 0f                	add    BYTE PTR [edi],cl
    42ea:	b5 0c                	mov    ch,0xc
    42ec:	00 00                	add    BYTE PTR [eax],al
    42ee:	01 50 a8             	add    DWORD PTR [eax-0x58],edx
    42f1:	02 00                	add    al,BYTE PTR [eax]
    42f3:	00 02                	add    BYTE PTR [edx],al
    42f5:	91                   	xchg   ecx,eax
    42f6:	00 0f                	add    BYTE PTR [edi],cl
    42f8:	5d                   	pop    ebp
    42f9:	0c 00                	or     al,0x0
    42fb:	00 01                	add    BYTE PTR [ecx],al
    42fd:	50                   	push   eax
    42fe:	a2 02 00 00 02       	mov    ds:0x2000002,al
    4303:	91                   	xchg   ecx,eax
    4304:	04 00                	add    al,0x0
    4306:	0e                   	push   cs
    4307:	7f 0c                	jg     4315 <sysEnter_Vector-0x12bceb>
    4309:	00 00                	add    BYTE PTR [eax],al
    430b:	01 54 4b 01          	add    DWORD PTR [ebx+ecx*2+0x1],edx
    430f:	00 00                	add    BYTE PTR [eax],al
    4311:	ce                   	into   
    4312:	34 00                	xor    al,0x0
    4314:	9f                   	lahf   
    4315:	57                   	push   edi
    4316:	08 00                	or     BYTE PTR [eax],al
    4318:	00 01                	add    BYTE PTR [ecx],al
    431a:	9c                   	pushf  
    431b:	2d 04 00 00 0f       	sub    eax,0xf000004
    4320:	5d                   	pop    ebp
    4321:	0c 00                	or     al,0x0
    4323:	00 01                	add    BYTE PTR [ecx],al
    4325:	54                   	push   esp
    4326:	a2 02 00 00 02       	mov    ds:0x2000002,al
    432b:	91                   	xchg   ecx,eax
    432c:	00 11                	add    BYTE PTR [ecx],dl
    432e:	64                   	fs
    432f:	61                   	popa   
    4330:	79 00                	jns    4332 <sysEnter_Vector-0x12bcce>
    4332:	01 55 3d             	add    DWORD PTR [ebp+0x3d],edx
    4335:	01 00                	add    DWORD PTR [eax],eax
    4337:	00 02                	add    BYTE PTR [edx],al
    4339:	91                   	xchg   ecx,eax
    433a:	68 0d 18 0c 00       	push   0xc180d
    433f:	00 01                	add    BYTE PTR [ecx],al
    4341:	55                   	push   ebp
    4342:	3d 01 00 00 02       	cmp    eax,0x2000001
    4347:	91                   	xchg   ecx,eax
    4348:	54                   	push   esp
    4349:	0d 15 0c 00 00       	or     eax,0xc15
    434e:	01 56 fa             	add    DWORD PTR [esi-0x6],edx
    4351:	00 00                	add    BYTE PTR [eax],al
    4353:	00 02                	add    BYTE PTR [edx],al
    4355:	91                   	xchg   ecx,eax
    4356:	4c                   	dec    esp
    4357:	0d 4e 0c 00 00       	or     eax,0xc4e
    435c:	01 57 fa             	add    DWORD PTR [edi-0x6],edx
    435f:	00 00                	add    BYTE PTR [eax],al
    4361:	00 02                	add    BYTE PTR [edx],al
    4363:	91                   	xchg   ecx,eax
    4364:	64                   	fs
    4365:	0d 1d 0c 00 00       	or     eax,0xc1d
    436a:	01 57 fa             	add    DWORD PTR [edi-0x6],edx
    436d:	00 00                	add    BYTE PTR [eax],al
    436f:	00 02                	add    BYTE PTR [edx],al
    4371:	91                   	xchg   ecx,eax
    4372:	60                   	pusha  
    4373:	0d bb 06 00 00       	or     eax,0x6bb
    4378:	01 58 3d             	add    DWORD PTR [eax+0x3d],ebx
    437b:	01 00                	add    DWORD PTR [eax],eax
    437d:	00 02                	add    BYTE PTR [edx],al
    437f:	91                   	xchg   ecx,eax
    4380:	50                   	push   eax
    4381:	0d d8 0c 00 00       	or     eax,0xcd8
    4386:	01 59 fa             	add    DWORD PTR [ecx-0x6],ebx
    4389:	00 00                	add    BYTE PTR [eax],al
    438b:	00 02                	add    BYTE PTR [edx],al
    438d:	91                   	xchg   ecx,eax
    438e:	5c                   	pop    esp
    438f:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    4393:	00 01                	add    BYTE PTR [ecx],al
    4395:	5a                   	pop    edx
    4396:	3d 01 00 00 02       	cmp    eax,0x2000001
    439b:	91                   	xchg   ecx,eax
    439c:	58                   	pop    eax
    439d:	00 10                	add    BYTE PTR [eax],dl
    439f:	23 0c 00             	and    ecx,DWORD PTR [eax+eax*1]
    43a2:	00 01                	add    BYTE PTR [ecx],al
    43a4:	bf a2 02 00 00       	mov    edi,0x2a2
    43a9:	25 3d 00 9f 6d       	and    eax,0x6d9f003d
    43ae:	00 00                	add    BYTE PTR [eax],al
    43b0:	00 01                	add    BYTE PTR [ecx],al
    43b2:	9c                   	pushf  
    43b3:	71 04                	jno    43b9 <sysEnter_Vector-0x12bc47>
    43b5:	00 00                	add    BYTE PTR [eax],al
    43b7:	0f 81 0c 00 00 01    	jno    10043c9 <sysEnter_Vector+0xed43c9>
    43bd:	bf a2 02 00 00       	mov    edi,0x2a2
    43c2:	02 91 00 0f 53 0c    	add    dl,BYTE PTR [ecx+0xc530f00]
    43c8:	00 00                	add    BYTE PTR [eax],al
    43ca:	01 bf f1 01 00 00    	add    DWORD PTR [edi+0x1f1],edi
    43d0:	02 91 5c 0d e1 0b    	add    dl,BYTE PTR [ecx+0xbe10d5c]
    43d6:	00 00                	add    BYTE PTR [eax],al
    43d8:	01 c1                	add    ecx,eax
    43da:	4b                   	dec    ebx
    43db:	01 00                	add    DWORD PTR [eax],eax
    43dd:	00 02                	add    BYTE PTR [edx],al
    43df:	91                   	xchg   ecx,eax
    43e0:	6c                   	ins    BYTE PTR es:[edi],dx
    43e1:	00 10                	add    BYTE PTR [eax],dl
    43e3:	81 0c 00 00 01 ca 4b 	or     DWORD PTR [eax+eax*1],0x4bca0100
    43ea:	01 00                	add    DWORD PTR [eax],eax
    43ec:	00 92 3d 00 9f 41    	add    BYTE PTR [edx+0x419f003d],dl
    43f2:	00 00                	add    BYTE PTR [eax],al
    43f4:	00 01                	add    BYTE PTR [ecx],al
    43f6:	9c                   	pushf  
    43f7:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    43f8:	04 00                	add    al,0x0
    43fa:	00 0f                	add    BYTE PTR [edi],cl
    43fc:	d1 0c 00             	ror    DWORD PTR [eax+eax*1],1
    43ff:	00 01                	add    BYTE PTR [ecx],al
    4401:	ca a7 04             	retf   0x4a7
    4404:	00 00                	add    BYTE PTR [eax],al
    4406:	02 91 00 0d e1 0b    	add    dl,BYTE PTR [ecx+0xbe10d00]
    440c:	00 00                	add    BYTE PTR [eax],al
    440e:	01 cc                	add    esp,ecx
    4410:	2b 01                	sub    eax,DWORD PTR [ecx]
    4412:	00 00                	add    BYTE PTR [eax],al
    4414:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    441a:	4b                   	dec    ebx
    441b:	01 00                	add    DWORD PTR [eax],eax
    441d:	00 12                	add    BYTE PTR [edx],dl
    441f:	5b                   	pop    ebx
    4420:	00 00                	add    BYTE PTR [eax],al
    4422:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    4425:	2b 01                	sub    eax,DWORD PTR [ecx]
    4427:	00 00                	add    BYTE PTR [eax],al
    4429:	05 03 84 60 00       	add    eax,0x608403
    442e:	9f                   	lahf   
    442f:	12 0b                	adc    cl,BYTE PTR [ebx]
    4431:	01 00                	add    DWORD PTR [eax],eax
    4433:	00 04 35 2b 01 00 00 	add    BYTE PTR [esi*1+0x12b],al
    443a:	05 03 88 60 00       	add    eax,0x608803
    443f:	9f                   	lahf   
    4440:	12 64 00 00          	adc    ah,BYTE PTR [eax+eax*1+0x0]
    4444:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    4447:	2b 01                	sub    eax,DWORD PTR [ecx]
    4449:	00 00                	add    BYTE PTR [eax],al
    444b:	05 03 80 60 00       	add    eax,0x608003
    4450:	9f                   	lahf   
    4451:	12 53 01             	adc    dl,BYTE PTR [ebx+0x1]
    4454:	00 00                	add    BYTE PTR [eax],al
    4456:	04 37                	add    al,0x37
    4458:	3d 01 00 00 05       	cmp    eax,0x5000001
    445d:	03 90 60 00 9f 12    	add    edx,DWORD PTR [eax+0x129f0060]
    4463:	38 00                	cmp    BYTE PTR [eax],al
    4465:	00 00                	add    BYTE PTR [eax],al
    4467:	05 53 02 05 00       	add    eax,0x50253
    446c:	00 05 03 8c 60 00    	add    BYTE PTR ds:0x608c03,al
    4472:	9f                   	lahf   
    4473:	0a 04 06             	or     al,BYTE PTR [esi+eax*1]
    4476:	02 00                	add    al,BYTE PTR [eax]
    4478:	00 12                	add    BYTE PTR [edx],dl
    447a:	e7 0b                	out    0xb,eax
    447c:	00 00                	add    BYTE PTR [eax],al
    447e:	01 0c fa             	add    DWORD PTR [edx+edi*8],ecx
    4481:	00 00                	add    BYTE PTR [eax],al
    4483:	00 05 03 68 5f 00    	add    BYTE PTR ds:0x5f6803,al
    4489:	9f                   	lahf   
    448a:	12 c8                	adc    cl,al
    448c:	0c 00                	or     al,0x0
    448e:	00 01                	add    BYTE PTR [ecx],al
    4490:	0d 3d 01 00 00       	or     eax,0x13d
    4495:	05 03 b8 60 00       	add    eax,0x60b803
    449a:	9f                   	lahf   
    449b:	13 06                	adc    eax,DWORD PTR [esi]
    449d:	02 00                	add    al,BYTE PTR [eax]
    449f:	00 3a                	add    BYTE PTR [edx],bh
    44a1:	05 00 00 14 f8       	add    eax,0xf8140000
    44a6:	01 00                	add    DWORD PTR [eax],eax
    44a8:	00 01                	add    BYTE PTR [ecx],al
    44aa:	00 12                	add    BYTE PTR [edx],dl
    44ac:	f1                   	icebp  
    44ad:	0b 00                	or     eax,DWORD PTR [eax]
    44af:	00 01                	add    BYTE PTR [ecx],al
    44b1:	0e                   	push   cs
    44b2:	2a 05 00 00 05 03    	sub    al,BYTE PTR ds:0x3050000
    44b8:	5c                   	pop    esp
    44b9:	60                   	pusha  
    44ba:	00 9f 12 02 0c 00    	add    BYTE PTR [edi+0xc0212],bl
    44c0:	00 01                	add    BYTE PTR [ecx],al
    44c2:	0f fa 00             	psubd  mm0,QWORD PTR [eax]
    44c5:	00 00                	add    BYTE PTR [eax],al
    44c7:	05 03 c0 60 00       	add    eax,0x60c003
    44cc:	9f                   	lahf   
    44cd:	12 5d 0c             	adc    bl,BYTE PTR [ebp+0xc]
    44d0:	00 00                	add    BYTE PTR [eax],al
    44d2:	01 10                	add    DWORD PTR [eax],edx
    44d4:	56                   	push   esi
    44d5:	01 00                	add    DWORD PTR [eax],eax
    44d7:	00 05 03 e0 60 00    	add    BYTE PTR ds:0x60e003,al
    44dd:	9f                   	lahf   
    44de:	13 fa                	adc    edi,edx
    44e0:	00 00                	add    BYTE PTR [eax],al
    44e2:	00 83 05 00 00 14    	add    BYTE PTR [ebx+0x14000005],al
    44e8:	f8                   	clc    
    44e9:	01 00                	add    DWORD PTR [eax],eax
    44eb:	00 01                	add    BYTE PTR [ecx],al
    44ed:	14 f8                	adc    al,0xf8
    44ef:	01 00                	add    DWORD PTR [eax],eax
    44f1:	00 0b                	add    BYTE PTR [ebx],cl
    44f3:	00 12                	add    BYTE PTR [edx],dl
    44f5:	98                   	cwde   
    44f6:	0c 00                	or     al,0x0
    44f8:	00 01                	add    BYTE PTR [ecx],al
    44fa:	12 94 05 00 00 05 03 	adc    dl,BYTE PTR [ebp+eax*1+0x3050000]
    4501:	a0 5d 00 9f 0b       	mov    al,ds:0xb9f005d
    4506:	6d                   	ins    DWORD PTR es:[edi],dx
    4507:	05                   	.byte 0x5
    4508:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 11                	sbb    DWORD PTR [ecx],edx
     2c1:	01 12                	add    DWORD PTR [edx],edx
     2c3:	06                   	push   es
     2c4:	40                   	inc    eax
     2c5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cb:	00 00                	add    BYTE PTR [eax],al
     2cd:	07                   	pop    es
     2ce:	05 00 03 08 3a       	add    eax,0x3a080300
     2d3:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2d8:	02 18                	add    bl,BYTE PTR [eax]
     2da:	00 00                	add    BYTE PTR [eax],al
     2dc:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2df:	03 08                	add    ecx,DWORD PTR [eax]
     2e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2e5:	49                   	dec    ecx
     2e6:	13 02                	adc    eax,DWORD PTR [edx]
     2e8:	18 00                	sbb    BYTE PTR [eax],al
     2ea:	00 09                	add    BYTE PTR [ecx],cl
     2ec:	34 00                	xor    al,0x0
     2ee:	03 0e                	add    ecx,DWORD PTR [esi]
     2f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f4:	49                   	dec    ecx
     2f5:	13 02                	adc    eax,DWORD PTR [edx]
     2f7:	18 00                	sbb    BYTE PTR [eax],al
     2f9:	00 0a                	add    BYTE PTR [edx],cl
     2fb:	01 01                	add    DWORD PTR [ecx],eax
     2fd:	49                   	dec    ecx
     2fe:	13 01                	adc    eax,DWORD PTR [ecx]
     300:	13 00                	adc    eax,DWORD PTR [eax]
     302:	00 0b                	add    BYTE PTR [ebx],cl
     304:	21 00                	and    DWORD PTR [eax],eax
     306:	49                   	dec    ecx
     307:	13 2f                	adc    ebp,DWORD PTR [edi]
     309:	0b 00                	or     eax,DWORD PTR [eax]
     30b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     30e:	01 3f                	add    DWORD PTR [edi],edi
     310:	19 03                	sbb    DWORD PTR [ebx],eax
     312:	0e                   	push   cs
     313:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     315:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     317:	11 01                	adc    DWORD PTR [ecx],eax
     319:	12 06                	adc    al,BYTE PTR [esi]
     31b:	40                   	inc    eax
     31c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	0d 34 00 03 0e       	or     eax,0xe030034
     329:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     32b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     32d:	49                   	dec    ecx
     32e:	13 3f                	adc    edi,DWORD PTR [edi]
     330:	19 02                	sbb    DWORD PTR [edx],eax
     332:	18 00                	sbb    BYTE PTR [eax],al
     334:	00 0e                	add    BYTE PTR [esi],cl
     336:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	00 01                	add    BYTE PTR [ecx],al
     33e:	11 01                	adc    DWORD PTR [ecx],eax
     340:	25 0e 13 0b 03       	and    eax,0x30b130e
     345:	0e                   	push   cs
     346:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     348:	11 01                	adc    DWORD PTR [ecx],eax
     34a:	12 06                	adc    al,BYTE PTR [esi]
     34c:	10 17                	adc    BYTE PTR [edi],dl
     34e:	00 00                	add    BYTE PTR [eax],al
     350:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     353:	0b 0b                	or     ecx,DWORD PTR [ebx]
     355:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     358:	0e                   	push   cs
     359:	00 00                	add    BYTE PTR [eax],al
     35b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     360:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     363:	08 00                	or     BYTE PTR [eax],al
     365:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     368:	00 03                	add    BYTE PTR [ebx],al
     36a:	0e                   	push   cs
     36b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36f:	49                   	dec    ecx
     370:	13 00                	adc    eax,DWORD PTR [eax]
     372:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     378:	49                   	dec    ecx
     379:	13 00                	adc    eax,DWORD PTR [eax]
     37b:	00 06                	add    BYTE PTR [esi],al
     37d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     380:	19 03                	sbb    DWORD PTR [ebx],eax
     382:	0e                   	push   cs
     383:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     385:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     387:	27                   	daa    
     388:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     38b:	11 01                	adc    DWORD PTR [ecx],eax
     38d:	12 06                	adc    al,BYTE PTR [esi]
     38f:	40                   	inc    eax
     390:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     396:	00 00                	add    BYTE PTR [eax],al
     398:	07                   	pop    es
     399:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     39e:	0b 3b                	or     edi,DWORD PTR [ebx]
     3a0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3a3:	02 18                	add    bl,BYTE PTR [eax]
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	08 0b                	or     BYTE PTR [ebx],cl
     3a9:	01 11                	add    DWORD PTR [ecx],edx
     3ab:	01 12                	add    DWORD PTR [edx],edx
     3ad:	06                   	push   es
     3ae:	00 00                	add    BYTE PTR [eax],al
     3b0:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     3b3:	03 08                	add    ecx,DWORD PTR [eax]
     3b5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b9:	49                   	dec    ecx
     3ba:	13 02                	adc    eax,DWORD PTR [edx]
     3bc:	18 00                	sbb    BYTE PTR [eax],al
     3be:	00 0a                	add    BYTE PTR [edx],cl
     3c0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3c3:	19 03                	sbb    DWORD PTR [ebx],eax
     3c5:	0e                   	push   cs
     3c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ca:	27                   	daa    
     3cb:	19 11                	sbb    DWORD PTR [ecx],edx
     3cd:	01 12                	add    DWORD PTR [edx],edx
     3cf:	06                   	push   es
     3d0:	40                   	inc    eax
     3d1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3d7:	00 00                	add    BYTE PTR [eax],al
     3d9:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	49                   	dec    ecx
     3e3:	13 02                	adc    eax,DWORD PTR [edx]
     3e5:	18 00                	sbb    BYTE PTR [eax],al
     3e7:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     3ea:	01 11                	add    DWORD PTR [ecx],edx
     3ec:	01 12                	add    DWORD PTR [edx],edx
     3ee:	06                   	push   es
     3ef:	01 13                	add    DWORD PTR [ebx],edx
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	0d 34 00 03 0e       	or     eax,0xe030034
     3f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fc:	49                   	dec    ecx
     3fd:	13 3f                	adc    edi,DWORD PTR [edi]
     3ff:	19 02                	sbb    DWORD PTR [edx],eax
     401:	18 00                	sbb    BYTE PTR [eax],al
     403:	00 00                	add    BYTE PTR [eax],al
     405:	01 11                	add    DWORD PTR [ecx],edx
     407:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40d:	0e                   	push   cs
     40e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     410:	11 01                	adc    DWORD PTR [ecx],eax
     412:	12 06                	adc    al,BYTE PTR [esi]
     414:	10 17                	adc    BYTE PTR [edi],dl
     416:	00 00                	add    BYTE PTR [eax],al
     418:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     41b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     420:	0e                   	push   cs
     421:	00 00                	add    BYTE PTR [eax],al
     423:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     426:	0b 0b                	or     ecx,DWORD PTR [ebx]
     428:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     42b:	08 00                	or     BYTE PTR [eax],al
     42d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     430:	00 03                	add    BYTE PTR [ebx],al
     432:	0e                   	push   cs
     433:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     435:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     437:	49                   	dec    ecx
     438:	13 00                	adc    eax,DWORD PTR [eax]
     43a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     440:	49                   	dec    ecx
     441:	13 00                	adc    eax,DWORD PTR [eax]
     443:	00 06                	add    BYTE PTR [esi],al
     445:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     449:	00 00                	add    BYTE PTR [eax],al
     44b:	07                   	pop    es
     44c:	04 01                	add    al,0x1
     44e:	03 0e                	add    ecx,DWORD PTR [esi]
     450:	0b 0b                	or     ecx,DWORD PTR [ebx]
     452:	49                   	dec    ecx
     453:	13 3a                	adc    edi,DWORD PTR [edx]
     455:	0b 3b                	or     edi,DWORD PTR [ebx]
     457:	0b 01                	or     eax,DWORD PTR [ecx]
     459:	13 00                	adc    eax,DWORD PTR [eax]
     45b:	00 08                	add    BYTE PTR [eax],cl
     45d:	28 00                	sub    BYTE PTR [eax],al
     45f:	03 0e                	add    ecx,DWORD PTR [esi]
     461:	1c 0b                	sbb    al,0xb
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 28                	or     DWORD PTR [eax],ebp
     467:	00 03                	add    BYTE PTR [ebx],al
     469:	0e                   	push   cs
     46a:	1c 05                	sbb    al,0x5
     46c:	00 00                	add    BYTE PTR [eax],al
     46e:	0a 0f                	or     cl,BYTE PTR [edi]
     470:	00 0b                	add    BYTE PTR [ebx],cl
     472:	0b 00                	or     eax,DWORD PTR [eax]
     474:	00 0b                	add    BYTE PTR [ebx],cl
     476:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     479:	19 03                	sbb    DWORD PTR [ebx],eax
     47b:	0e                   	push   cs
     47c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     47e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     480:	27                   	daa    
     481:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     484:	11 01                	adc    DWORD PTR [ecx],eax
     486:	12 06                	adc    al,BYTE PTR [esi]
     488:	40                   	inc    eax
     489:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     48f:	00 00                	add    BYTE PTR [eax],al
     491:	0c 05                	or     al,0x5
     493:	00 03                	add    BYTE PTR [ebx],al
     495:	0e                   	push   cs
     496:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     498:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     49a:	49                   	dec    ecx
     49b:	13 02                	adc    eax,DWORD PTR [edx]
     49d:	18 00                	sbb    BYTE PTR [eax],al
     49f:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     4a5:	03 0e                	add    ecx,DWORD PTR [esi]
     4a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4ab:	27                   	daa    
     4ac:	19 11                	sbb    DWORD PTR [ecx],edx
     4ae:	01 12                	add    DWORD PTR [edx],edx
     4b0:	06                   	push   es
     4b1:	40                   	inc    eax
     4b2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4b8:	00 00                	add    BYTE PTR [eax],al
     4ba:	0e                   	push   cs
     4bb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4be:	19 03                	sbb    DWORD PTR [ebx],eax
     4c0:	0e                   	push   cs
     4c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c5:	27                   	daa    
     4c6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4c9:	11 01                	adc    DWORD PTR [ecx],eax
     4cb:	12 06                	adc    al,BYTE PTR [esi]
     4cd:	40                   	inc    eax
     4ce:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d4:	00 00                	add    BYTE PTR [eax],al
     4d6:	0f 05                	syscall 
     4d8:	00 03                	add    BYTE PTR [ebx],al
     4da:	08 3a                	or     BYTE PTR [edx],bh
     4dc:	0b 3b                	or     edi,DWORD PTR [ebx]
     4de:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4e1:	02 18                	add    bl,BYTE PTR [eax]
     4e3:	00 00                	add    BYTE PTR [eax],al
     4e5:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4e8:	03 0e                	add    ecx,DWORD PTR [esi]
     4ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4ee:	49                   	dec    ecx
     4ef:	13 3f                	adc    edi,DWORD PTR [edi]
     4f1:	19 02                	sbb    DWORD PTR [edx],eax
     4f3:	18 00                	sbb    BYTE PTR [eax],al
     4f5:	00 00                	add    BYTE PTR [eax],al
     4f7:	01 11                	add    DWORD PTR [ecx],edx
     4f9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     4ff:	0e                   	push   cs
     500:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     502:	11 01                	adc    DWORD PTR [ecx],eax
     504:	12 06                	adc    al,BYTE PTR [esi]
     506:	10 17                	adc    BYTE PTR [edi],dl
     508:	00 00                	add    BYTE PTR [eax],al
     50a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     50d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     50f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     512:	0e                   	push   cs
     513:	00 00                	add    BYTE PTR [eax],al
     515:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     518:	0b 0b                	or     ecx,DWORD PTR [ebx]
     51a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     51d:	08 00                	or     BYTE PTR [eax],al
     51f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     522:	00 03                	add    BYTE PTR [ebx],al
     524:	0e                   	push   cs
     525:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     527:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     529:	49                   	dec    ecx
     52a:	13 00                	adc    eax,DWORD PTR [eax]
     52c:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     532:	0b 0b                	or     ecx,DWORD PTR [ebx]
     534:	49                   	dec    ecx
     535:	13 3a                	adc    edi,DWORD PTR [edx]
     537:	0b 3b                	or     edi,DWORD PTR [ebx]
     539:	0b 01                	or     eax,DWORD PTR [ecx]
     53b:	13 00                	adc    eax,DWORD PTR [eax]
     53d:	00 06                	add    BYTE PTR [esi],al
     53f:	28 00                	sub    BYTE PTR [eax],al
     541:	03 0e                	add    ecx,DWORD PTR [esi]
     543:	1c 0b                	sbb    al,0xb
     545:	00 00                	add    BYTE PTR [eax],al
     547:	07                   	pop    es
     548:	28 00                	sub    BYTE PTR [eax],al
     54a:	03 0e                	add    ecx,DWORD PTR [esi]
     54c:	1c 05                	sbb    al,0x5
     54e:	00 00                	add    BYTE PTR [eax],al
     550:	08 0f                	or     BYTE PTR [edi],cl
     552:	00 0b                	add    BYTE PTR [ebx],cl
     554:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     557:	00 00                	add    BYTE PTR [eax],al
     559:	09 2e                	or     DWORD PTR [esi],ebp
     55b:	01 3f                	add    DWORD PTR [edi],edi
     55d:	19 03                	sbb    DWORD PTR [ebx],eax
     55f:	0e                   	push   cs
     560:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     562:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     564:	27                   	daa    
     565:	19 11                	sbb    DWORD PTR [ecx],edx
     567:	01 12                	add    DWORD PTR [edx],edx
     569:	06                   	push   es
     56a:	40                   	inc    eax
     56b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     579:	0b 3b                	or     edi,DWORD PTR [ebx]
     57b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     57e:	02 18                	add    bl,BYTE PTR [eax]
     580:	00 00                	add    BYTE PTR [eax],al
     582:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     588:	0b 3b                	or     edi,DWORD PTR [ebx]
     58a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     58d:	02 18                	add    bl,BYTE PTR [eax]
     58f:	00 00                	add    BYTE PTR [eax],al
     591:	0c 34                	or     al,0x34
     593:	00 03                	add    BYTE PTR [ebx],al
     595:	0e                   	push   cs
     596:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     598:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     59a:	49                   	dec    ecx
     59b:	13 02                	adc    eax,DWORD PTR [edx]
     59d:	18 00                	sbb    BYTE PTR [eax],al
     59f:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     5a5:	01 13                	add    DWORD PTR [ebx],edx
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	0e                   	push   cs
     5aa:	21 00                	and    DWORD PTR [eax],eax
     5ac:	49                   	dec    ecx
     5ad:	13 2f                	adc    ebp,DWORD PTR [edi]
     5af:	0b 00                	or     eax,DWORD PTR [eax]
     5b1:	00 0f                	add    BYTE PTR [edi],cl
     5b3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5b6:	19 03                	sbb    DWORD PTR [ebx],eax
     5b8:	0e                   	push   cs
     5b9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5bb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5bd:	49                   	dec    ecx
     5be:	13 11                	adc    edx,DWORD PTR [ecx]
     5c0:	01 12                	add    DWORD PTR [edx],edx
     5c2:	06                   	push   es
     5c3:	40                   	inc    eax
     5c4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     5cf:	03 08                	add    ecx,DWORD PTR [eax]
     5d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d5:	49                   	dec    ecx
     5d6:	13 02                	adc    eax,DWORD PTR [edx]
     5d8:	18 00                	sbb    BYTE PTR [eax],al
     5da:	00 11                	add    BYTE PTR [ecx],dl
     5dc:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5df:	19 03                	sbb    DWORD PTR [ebx],eax
     5e1:	0e                   	push   cs
     5e2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e6:	27                   	daa    
     5e7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ea:	11 01                	adc    DWORD PTR [ecx],eax
     5ec:	12 06                	adc    al,BYTE PTR [esi]
     5ee:	40                   	inc    eax
     5ef:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     5f5:	00 00                	add    BYTE PTR [eax],al
     5f7:	12 0a                	adc    cl,BYTE PTR [edx]
     5f9:	00 03                	add    BYTE PTR [ebx],al
     5fb:	0e                   	push   cs
     5fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     600:	11 01                	adc    DWORD PTR [ecx],eax
     602:	00 00                	add    BYTE PTR [eax],al
     604:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     607:	03 0e                	add    ecx,DWORD PTR [esi]
     609:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     60d:	49                   	dec    ecx
     60e:	13 3f                	adc    edi,DWORD PTR [edi]
     610:	19 02                	sbb    DWORD PTR [edx],eax
     612:	18 00                	sbb    BYTE PTR [eax],al
     614:	00 00                	add    BYTE PTR [eax],al
     616:	01 11                	add    DWORD PTR [ecx],edx
     618:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     61e:	0e                   	push   cs
     61f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     621:	11 01                	adc    DWORD PTR [ecx],eax
     623:	12 06                	adc    al,BYTE PTR [esi]
     625:	10 17                	adc    BYTE PTR [edi],dl
     627:	00 00                	add    BYTE PTR [eax],al
     629:	02 16                	add    dl,BYTE PTR [esi]
     62b:	00 03                	add    BYTE PTR [ebx],al
     62d:	0e                   	push   cs
     62e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     630:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     632:	49                   	dec    ecx
     633:	13 00                	adc    eax,DWORD PTR [eax]
     635:	00 03                	add    BYTE PTR [ebx],al
     637:	0f 00 0b             	str    WORD PTR [ebx]
     63a:	0b 03                	or     eax,DWORD PTR [ebx]
     63c:	0e                   	push   cs
     63d:	49                   	dec    ecx
     63e:	13 00                	adc    eax,DWORD PTR [eax]
     640:	00 04 24             	add    BYTE PTR [esp],al
     643:	00 0b                	add    BYTE PTR [ebx],cl
     645:	0b 3e                	or     edi,DWORD PTR [esi]
     647:	0b 03                	or     eax,DWORD PTR [ebx]
     649:	0e                   	push   cs
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	05 24 00 0b 0b       	add    eax,0xb0b0024
     651:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     654:	08 00                	or     BYTE PTR [eax],al
     656:	00 06                	add    BYTE PTR [esi],al
     658:	0f 00 0b             	str    WORD PTR [ebx]
     65b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	07                   	pop    es
     661:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     665:	00 00                	add    BYTE PTR [eax],al
     667:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     66a:	03 0e                	add    ecx,DWORD PTR [esi]
     66c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     66e:	49                   	dec    ecx
     66f:	13 3a                	adc    edi,DWORD PTR [edx]
     671:	0b 3b                	or     edi,DWORD PTR [ebx]
     673:	0b 01                	or     eax,DWORD PTR [ecx]
     675:	13 00                	adc    eax,DWORD PTR [eax]
     677:	00 09                	add    BYTE PTR [ecx],cl
     679:	28 00                	sub    BYTE PTR [eax],al
     67b:	03 0e                	add    ecx,DWORD PTR [esi]
     67d:	1c 0b                	sbb    al,0xb
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	0a 28                	or     ch,BYTE PTR [eax]
     683:	00 03                	add    BYTE PTR [ebx],al
     685:	0e                   	push   cs
     686:	1c 05                	sbb    al,0x5
     688:	00 00                	add    BYTE PTR [eax],al
     68a:	0b 0f                	or     ecx,DWORD PTR [edi]
     68c:	00 0b                	add    BYTE PTR [ebx],cl
     68e:	0b 00                	or     eax,DWORD PTR [eax]
     690:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     693:	01 3f                	add    DWORD PTR [edi],edi
     695:	19 03                	sbb    DWORD PTR [ebx],eax
     697:	0e                   	push   cs
     698:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     69a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     69c:	27                   	daa    
     69d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6a0:	11 01                	adc    DWORD PTR [ecx],eax
     6a2:	12 06                	adc    al,BYTE PTR [esi]
     6a4:	40                   	inc    eax
     6a5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     6ab:	00 00                	add    BYTE PTR [eax],al
     6ad:	0d 05 00 03 0e       	or     eax,0xe030005
     6b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6b6:	49                   	dec    ecx
     6b7:	13 02                	adc    eax,DWORD PTR [edx]
     6b9:	18 00                	sbb    BYTE PTR [eax],al
     6bb:	00 0e                	add    BYTE PTR [esi],cl
     6bd:	34 00                	xor    al,0x0
     6bf:	03 0e                	add    ecx,DWORD PTR [esi]
     6c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c5:	49                   	dec    ecx
     6c6:	13 02                	adc    eax,DWORD PTR [edx]
     6c8:	18 00                	sbb    BYTE PTR [eax],al
     6ca:	00 0f                	add    BYTE PTR [edi],cl
     6cc:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     6cf:	19 03                	sbb    DWORD PTR [ebx],eax
     6d1:	0e                   	push   cs
     6d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6d6:	11 01                	adc    DWORD PTR [ecx],eax
     6d8:	12 06                	adc    al,BYTE PTR [esi]
     6da:	40                   	inc    eax
     6db:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6e1:	10 2e                	adc    BYTE PTR [esi],ch
     6e3:	00 3f                	add    BYTE PTR [edi],bh
     6e5:	19 03                	sbb    DWORD PTR [ebx],eax
     6e7:	0e                   	push   cs
     6e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6ec:	27                   	daa    
     6ed:	19 11                	sbb    DWORD PTR [ecx],edx
     6ef:	01 12                	add    DWORD PTR [edx],edx
     6f1:	06                   	push   es
     6f2:	40                   	inc    eax
     6f3:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6f9:	11 2e                	adc    DWORD PTR [esi],ebp
     6fb:	01 3f                	add    DWORD PTR [edi],edi
     6fd:	19 03                	sbb    DWORD PTR [ebx],eax
     6ff:	0e                   	push   cs
     700:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     702:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     704:	27                   	daa    
     705:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     708:	11 01                	adc    DWORD PTR [ecx],eax
     70a:	12 06                	adc    al,BYTE PTR [esi]
     70c:	40                   	inc    eax
     70d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     713:	00 00                	add    BYTE PTR [eax],al
     715:	12 18                	adc    bl,BYTE PTR [eax]
     717:	00 00                	add    BYTE PTR [eax],al
     719:	00 13                	add    BYTE PTR [ebx],dl
     71b:	0b 01                	or     eax,DWORD PTR [ecx]
     71d:	11 01                	adc    DWORD PTR [ecx],eax
     71f:	12 06                	adc    al,BYTE PTR [esi]
     721:	00 00                	add    BYTE PTR [eax],al
     723:	14 34                	adc    al,0x34
     725:	00 03                	add    BYTE PTR [ebx],al
     727:	08 3a                	or     BYTE PTR [edx],bh
     729:	0b 3b                	or     edi,DWORD PTR [ebx]
     72b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     72e:	02 18                	add    bl,BYTE PTR [eax]
     730:	00 00                	add    BYTE PTR [eax],al
     732:	15 2e 01 3f 19       	adc    eax,0x193f012e
     737:	03 0e                	add    ecx,DWORD PTR [esi]
     739:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     73b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     73d:	27                   	daa    
     73e:	19 11                	sbb    DWORD PTR [ecx],edx
     740:	01 12                	add    DWORD PTR [edx],edx
     742:	06                   	push   es
     743:	40                   	inc    eax
     744:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     74a:	00 00                	add    BYTE PTR [eax],al
     74c:	16                   	push   ss
     74d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     750:	19 03                	sbb    DWORD PTR [ebx],eax
     752:	0e                   	push   cs
     753:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     755:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     757:	49                   	dec    ecx
     758:	13 11                	adc    edx,DWORD PTR [ecx]
     75a:	01 12                	add    DWORD PTR [edx],edx
     75c:	06                   	push   es
     75d:	40                   	inc    eax
     75e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     764:	00 00                	add    BYTE PTR [eax],al
     766:	17                   	pop    ss
     767:	05 00 03 08 3a       	add    eax,0x3a080300
     76c:	0b 3b                	or     edi,DWORD PTR [ebx]
     76e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     771:	02 18                	add    bl,BYTE PTR [eax]
     773:	00 00                	add    BYTE PTR [eax],al
     775:	18 0b                	sbb    BYTE PTR [ebx],cl
     777:	01 11                	add    DWORD PTR [ecx],edx
     779:	01 12                	add    DWORD PTR [edx],edx
     77b:	06                   	push   es
     77c:	01 13                	add    DWORD PTR [ebx],edx
     77e:	00 00                	add    BYTE PTR [eax],al
     780:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     783:	03 0e                	add    ecx,DWORD PTR [esi]
     785:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     787:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     78d:	00 00                	add    BYTE PTR [eax],al
     78f:	1a 2e                	sbb    ch,BYTE PTR [esi]
     791:	01 3f                	add    DWORD PTR [edi],edi
     793:	19 03                	sbb    DWORD PTR [ebx],eax
     795:	0e                   	push   cs
     796:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     798:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     79e:	11 01                	adc    DWORD PTR [ecx],eax
     7a0:	12 06                	adc    al,BYTE PTR [esi]
     7a2:	40                   	inc    eax
     7a3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7a9:	00 00                	add    BYTE PTR [eax],al
     7ab:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     7b1:	0b 3b                	or     edi,DWORD PTR [ebx]
     7b3:	05 49 13 02 18       	add    eax,0x18021349
     7b8:	00 00                	add    BYTE PTR [eax],al
     7ba:	1c 34                	sbb    al,0x34
     7bc:	00 03                	add    BYTE PTR [ebx],al
     7be:	08 3a                	or     BYTE PTR [edx],bh
     7c0:	0b 3b                	or     edi,DWORD PTR [ebx]
     7c2:	05 49 13 02 18       	add    eax,0x18021349
     7c7:	00 00                	add    BYTE PTR [eax],al
     7c9:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     7ce:	00 00                	add    BYTE PTR [eax],al
     7d0:	1e                   	push   ds
     7d1:	01 01                	add    DWORD PTR [ecx],eax
     7d3:	49                   	dec    ecx
     7d4:	13 01                	adc    eax,DWORD PTR [ecx]
     7d6:	13 00                	adc    eax,DWORD PTR [eax]
     7d8:	00 1f                	add    BYTE PTR [edi],bl
     7da:	21 00                	and    DWORD PTR [eax],eax
     7dc:	49                   	dec    ecx
     7dd:	13 2f                	adc    ebp,DWORD PTR [edi]
     7df:	05 00 00 20 21       	add    eax,0x21200000
     7e4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     7e7:	2f                   	das    
     7e8:	0b 00                	or     eax,DWORD PTR [eax]
     7ea:	00 21                	add    BYTE PTR [ecx],ah
     7ec:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     7ef:	19 03                	sbb    DWORD PTR [ebx],eax
     7f1:	0e                   	push   cs
     7f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7f4:	3b 05 49 13 11 01    	cmp    eax,DWORD PTR ds:0x1111349
     7fa:	12 06                	adc    al,BYTE PTR [esi]
     7fc:	40                   	inc    eax
     7fd:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     803:	22 34 00             	and    dh,BYTE PTR [eax+eax*1]
     806:	03 0e                	add    ecx,DWORD PTR [esi]
     808:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     80a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     80c:	49                   	dec    ecx
     80d:	13 3f                	adc    edi,DWORD PTR [edi]
     80f:	19 02                	sbb    DWORD PTR [edx],eax
     811:	18 00                	sbb    BYTE PTR [eax],al
     813:	00 00                	add    BYTE PTR [eax],al
     815:	01 11                	add    DWORD PTR [ecx],edx
     817:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     81d:	0e                   	push   cs
     81e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     820:	11 01                	adc    DWORD PTR [ecx],eax
     822:	12 06                	adc    al,BYTE PTR [esi]
     824:	10 17                	adc    BYTE PTR [edi],dl
     826:	00 00                	add    BYTE PTR [eax],al
     828:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     82b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     82d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     830:	0e                   	push   cs
     831:	00 00                	add    BYTE PTR [eax],al
     833:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     836:	0b 0b                	or     ecx,DWORD PTR [ebx]
     838:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     83b:	08 00                	or     BYTE PTR [eax],al
     83d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     840:	00 03                	add    BYTE PTR [ebx],al
     842:	0e                   	push   cs
     843:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     845:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     847:	49                   	dec    ecx
     848:	13 00                	adc    eax,DWORD PTR [eax]
     84a:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     850:	0b 0b                	or     ecx,DWORD PTR [ebx]
     852:	49                   	dec    ecx
     853:	13 3a                	adc    edi,DWORD PTR [edx]
     855:	0b 3b                	or     edi,DWORD PTR [ebx]
     857:	0b 01                	or     eax,DWORD PTR [ecx]
     859:	13 00                	adc    eax,DWORD PTR [eax]
     85b:	00 06                	add    BYTE PTR [esi],al
     85d:	28 00                	sub    BYTE PTR [eax],al
     85f:	03 0e                	add    ecx,DWORD PTR [esi]
     861:	1c 0b                	sbb    al,0xb
     863:	00 00                	add    BYTE PTR [eax],al
     865:	07                   	pop    es
     866:	28 00                	sub    BYTE PTR [eax],al
     868:	03 0e                	add    ecx,DWORD PTR [esi]
     86a:	1c 05                	sbb    al,0x5
     86c:	00 00                	add    BYTE PTR [eax],al
     86e:	08 13                	or     BYTE PTR [ebx],dl
     870:	01 03                	add    DWORD PTR [ebx],eax
     872:	0e                   	push   cs
     873:	0b 0b                	or     ecx,DWORD PTR [ebx]
     875:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     877:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     879:	01 13                	add    DWORD PTR [ebx],edx
     87b:	00 00                	add    BYTE PTR [eax],al
     87d:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     883:	0b 3b                	or     edi,DWORD PTR [ebx]
     885:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     888:	38 0b                	cmp    BYTE PTR [ebx],cl
     88a:	00 00                	add    BYTE PTR [eax],al
     88c:	0a 0d 00 03 08 3a    	or     cl,BYTE PTR ds:0x3a080300
     892:	0b 3b                	or     edi,DWORD PTR [ebx]
     894:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     897:	38 0b                	cmp    BYTE PTR [ebx],cl
     899:	00 00                	add    BYTE PTR [eax],al
     89b:	0b 0f                	or     ecx,DWORD PTR [edi]
     89d:	00 0b                	add    BYTE PTR [ebx],cl
     89f:	0b 00                	or     eax,DWORD PTR [eax]
     8a1:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
     8a4:	00 0b                	add    BYTE PTR [ebx],cl
     8a6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8a9:	00 00                	add    BYTE PTR [eax],al
     8ab:	0d 2e 01 3f 19       	or     eax,0x193f012e
     8b0:	03 0e                	add    ecx,DWORD PTR [esi]
     8b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b6:	27                   	daa    
     8b7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     8ba:	11 01                	adc    DWORD PTR [ecx],eax
     8bc:	12 06                	adc    al,BYTE PTR [esi]
     8be:	40                   	inc    eax
     8bf:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     8c5:	00 00                	add    BYTE PTR [eax],al
     8c7:	0e                   	push   cs
     8c8:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     8cd:	0b 3b                	or     edi,DWORD PTR [ebx]
     8cf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8d2:	02 18                	add    bl,BYTE PTR [eax]
     8d4:	00 00                	add    BYTE PTR [eax],al
     8d6:	0f 05                	syscall 
     8d8:	00 03                	add    BYTE PTR [ebx],al
     8da:	08 3a                	or     BYTE PTR [edx],bh
     8dc:	0b 3b                	or     edi,DWORD PTR [ebx]
     8de:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8e1:	02 18                	add    bl,BYTE PTR [eax]
     8e3:	00 00                	add    BYTE PTR [eax],al
     8e5:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     8e8:	03 0e                	add    ecx,DWORD PTR [esi]
     8ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8ee:	49                   	dec    ecx
     8ef:	13 3f                	adc    edi,DWORD PTR [edi]
     8f1:	19 02                	sbb    DWORD PTR [edx],eax
     8f3:	18 00                	sbb    BYTE PTR [eax],al
     8f5:	00 00                	add    BYTE PTR [eax],al
     8f7:	01 11                	add    DWORD PTR [ecx],edx
     8f9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8ff:	0e                   	push   cs
     900:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     902:	11 01                	adc    DWORD PTR [ecx],eax
     904:	12 06                	adc    al,BYTE PTR [esi]
     906:	10 17                	adc    BYTE PTR [edi],dl
     908:	00 00                	add    BYTE PTR [eax],al
     90a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     90d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     90f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     912:	0e                   	push   cs
     913:	00 00                	add    BYTE PTR [eax],al
     915:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     918:	0b 0b                	or     ecx,DWORD PTR [ebx]
     91a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     91d:	08 00                	or     BYTE PTR [eax],al
     91f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     922:	00 03                	add    BYTE PTR [ebx],al
     924:	0e                   	push   cs
     925:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     927:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     929:	49                   	dec    ecx
     92a:	13 00                	adc    eax,DWORD PTR [eax]
     92c:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     932:	0b 0b                	or     ecx,DWORD PTR [ebx]
     934:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     936:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     938:	01 13                	add    DWORD PTR [ebx],edx
     93a:	00 00                	add    BYTE PTR [eax],al
     93c:	06                   	push   es
     93d:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     942:	0b 3b                	or     edi,DWORD PTR [ebx]
     944:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     947:	38 0b                	cmp    BYTE PTR [ebx],cl
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	07                   	pop    es
     94c:	0d 00 03 08 3a       	or     eax,0x3a080300
     951:	0b 3b                	or     edi,DWORD PTR [ebx]
     953:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     956:	38 0b                	cmp    BYTE PTR [ebx],cl
     958:	00 00                	add    BYTE PTR [eax],al
     95a:	08 0f                	or     BYTE PTR [edi],cl
     95c:	00 0b                	add    BYTE PTR [ebx],cl
     95e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     961:	00 00                	add    BYTE PTR [eax],al
     963:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     966:	03 0e                	add    ecx,DWORD PTR [esi]
     968:	0b 0b                	or     ecx,DWORD PTR [ebx]
     96a:	49                   	dec    ecx
     96b:	13 3a                	adc    edi,DWORD PTR [edx]
     96d:	0b 3b                	or     edi,DWORD PTR [ebx]
     96f:	0b 01                	or     eax,DWORD PTR [ecx]
     971:	13 00                	adc    eax,DWORD PTR [eax]
     973:	00 0a                	add    BYTE PTR [edx],cl
     975:	28 00                	sub    BYTE PTR [eax],al
     977:	03 0e                	add    ecx,DWORD PTR [esi]
     979:	1c 0b                	sbb    al,0xb
     97b:	00 00                	add    BYTE PTR [eax],al
     97d:	0b 28                	or     ebp,DWORD PTR [eax]
     97f:	00 03                	add    BYTE PTR [ebx],al
     981:	0e                   	push   cs
     982:	1c 05                	sbb    al,0x5
     984:	00 00                	add    BYTE PTR [eax],al
     986:	0c 0f                	or     al,0xf
     988:	00 0b                	add    BYTE PTR [ebx],cl
     98a:	0b 00                	or     eax,DWORD PTR [eax]
     98c:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     992:	03 0e                	add    ecx,DWORD PTR [esi]
     994:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     996:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     998:	11 01                	adc    DWORD PTR [ecx],eax
     99a:	12 06                	adc    al,BYTE PTR [esi]
     99c:	40                   	inc    eax
     99d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     9a3:	0e                   	push   cs
     9a4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9a7:	19 03                	sbb    DWORD PTR [ebx],eax
     9a9:	0e                   	push   cs
     9aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9ae:	27                   	daa    
     9af:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9b2:	11 01                	adc    DWORD PTR [ecx],eax
     9b4:	12 06                	adc    al,BYTE PTR [esi]
     9b6:	40                   	inc    eax
     9b7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9bd:	00 00                	add    BYTE PTR [eax],al
     9bf:	0f 05                	syscall 
     9c1:	00 03                	add    BYTE PTR [ebx],al
     9c3:	0e                   	push   cs
     9c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9c8:	49                   	dec    ecx
     9c9:	13 02                	adc    eax,DWORD PTR [edx]
     9cb:	18 00                	sbb    BYTE PTR [eax],al
     9cd:	00 10                	add    BYTE PTR [eax],dl
     9cf:	34 00                	xor    al,0x0
     9d1:	03 0e                	add    ecx,DWORD PTR [esi]
     9d3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9d5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d7:	49                   	dec    ecx
     9d8:	13 02                	adc    eax,DWORD PTR [edx]
     9da:	18 00                	sbb    BYTE PTR [eax],al
     9dc:	00 11                	add    BYTE PTR [ecx],dl
     9de:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9e1:	19 03                	sbb    DWORD PTR [ebx],eax
     9e3:	0e                   	push   cs
     9e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e8:	27                   	daa    
     9e9:	19 11                	sbb    DWORD PTR [ecx],edx
     9eb:	01 12                	add    DWORD PTR [edx],edx
     9ed:	06                   	push   es
     9ee:	40                   	inc    eax
     9ef:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9f5:	00 00                	add    BYTE PTR [eax],al
     9f7:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     9fa:	03 08                	add    ecx,DWORD PTR [eax]
     9fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a00:	49                   	dec    ecx
     a01:	13 02                	adc    eax,DWORD PTR [edx]
     a03:	18 00                	sbb    BYTE PTR [eax],al
     a05:	00 13                	add    BYTE PTR [ebx],dl
     a07:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a0a:	19 03                	sbb    DWORD PTR [ebx],eax
     a0c:	0e                   	push   cs
     a0d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a0f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a11:	27                   	daa    
     a12:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a15:	11 01                	adc    DWORD PTR [ecx],eax
     a17:	12 06                	adc    al,BYTE PTR [esi]
     a19:	40                   	inc    eax
     a1a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a20:	00 00                	add    BYTE PTR [eax],al
     a22:	14 2e                	adc    al,0x2e
     a24:	01 3f                	add    DWORD PTR [edi],edi
     a26:	19 03                	sbb    DWORD PTR [ebx],eax
     a28:	0e                   	push   cs
     a29:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a2b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a2d:	27                   	daa    
     a2e:	19 11                	sbb    DWORD PTR [ecx],edx
     a30:	01 12                	add    DWORD PTR [edx],edx
     a32:	06                   	push   es
     a33:	40                   	inc    eax
     a34:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a3a:	00 00                	add    BYTE PTR [eax],al
     a3c:	15 34 00 03 0e       	adc    eax,0xe030034
     a41:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a43:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a45:	49                   	dec    ecx
     a46:	13 3f                	adc    edi,DWORD PTR [edi]
     a48:	19 02                	sbb    DWORD PTR [edx],eax
     a4a:	18 00                	sbb    BYTE PTR [eax],al
     a4c:	00 00                	add    BYTE PTR [eax],al
     a4e:	01 11                	add    DWORD PTR [ecx],edx
     a50:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a56:	0e                   	push   cs
     a57:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a59:	11 01                	adc    DWORD PTR [ecx],eax
     a5b:	12 06                	adc    al,BYTE PTR [esi]
     a5d:	10 17                	adc    BYTE PTR [edi],dl
     a5f:	00 00                	add    BYTE PTR [eax],al
     a61:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a64:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a66:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a69:	0e                   	push   cs
     a6a:	00 00                	add    BYTE PTR [eax],al
     a6c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a6f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a71:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a74:	08 00                	or     BYTE PTR [eax],al
     a76:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     a79:	00 0b                	add    BYTE PTR [ebx],cl
     a7b:	0b 00                	or     eax,DWORD PTR [eax]
     a7d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a83:	49                   	dec    ecx
     a84:	13 00                	adc    eax,DWORD PTR [eax]
     a86:	00 06                	add    BYTE PTR [esi],al
     a88:	16                   	push   ss
     a89:	00 03                	add    BYTE PTR [ebx],al
     a8b:	0e                   	push   cs
     a8c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a8e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a90:	49                   	dec    ecx
     a91:	13 00                	adc    eax,DWORD PTR [eax]
     a93:	00 07                	add    BYTE PTR [edi],al
     a95:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     a99:	00 00                	add    BYTE PTR [eax],al
     a9b:	08 2e                	or     BYTE PTR [esi],ch
     a9d:	01 3f                	add    DWORD PTR [edi],edi
     a9f:	19 03                	sbb    DWORD PTR [ebx],eax
     aa1:	0e                   	push   cs
     aa2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa6:	27                   	daa    
     aa7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     aaa:	11 01                	adc    DWORD PTR [ecx],eax
     aac:	12 06                	adc    al,BYTE PTR [esi]
     aae:	40                   	inc    eax
     aaf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ab5:	00 00                	add    BYTE PTR [eax],al
     ab7:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     abd:	0b 3b                	or     edi,DWORD PTR [ebx]
     abf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ac2:	02 18                	add    bl,BYTE PTR [eax]
     ac4:	00 00                	add    BYTE PTR [eax],al
     ac6:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     acc:	0b 3b                	or     edi,DWORD PTR [ebx]
     ace:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ad1:	02 18                	add    bl,BYTE PTR [eax]
     ad3:	00 00                	add    BYTE PTR [eax],al
     ad5:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     ad8:	03 08                	add    ecx,DWORD PTR [eax]
     ada:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     adc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ade:	49                   	dec    ecx
     adf:	13 02                	adc    eax,DWORD PTR [edx]
     ae1:	18 00                	sbb    BYTE PTR [eax],al
     ae3:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     ae6:	01 11                	add    DWORD PTR [ecx],edx
     ae8:	01 12                	add    DWORD PTR [edx],edx
     aea:	06                   	push   es
     aeb:	01 13                	add    DWORD PTR [ebx],edx
     aed:	00 00                	add    BYTE PTR [eax],al
     aef:	0d 0b 01 11 01       	or     eax,0x111010b
     af4:	12 06                	adc    al,BYTE PTR [esi]
     af6:	00 00                	add    BYTE PTR [eax],al
     af8:	0e                   	push   cs
     af9:	26 00 00             	add    BYTE PTR es:[eax],al
     afc:	00 0f                	add    BYTE PTR [edi],cl
     afe:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b01:	19 03                	sbb    DWORD PTR [ebx],eax
     b03:	0e                   	push   cs
     b04:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b06:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b08:	27                   	daa    
     b09:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b0c:	11 01                	adc    DWORD PTR [ecx],eax
     b0e:	12 06                	adc    al,BYTE PTR [esi]
     b10:	40                   	inc    eax
     b11:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b17:	00 00                	add    BYTE PTR [eax],al
     b19:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     b1c:	03 0e                	add    ecx,DWORD PTR [esi]
     b1e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b20:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b22:	49                   	dec    ecx
     b23:	13 3f                	adc    edi,DWORD PTR [edi]
     b25:	19 02                	sbb    DWORD PTR [edx],eax
     b27:	18 00                	sbb    BYTE PTR [eax],al
     b29:	00 00                	add    BYTE PTR [eax],al
     b2b:	01 11                	add    DWORD PTR [ecx],edx
     b2d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b33:	0e                   	push   cs
     b34:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b36:	11 01                	adc    DWORD PTR [ecx],eax
     b38:	12 06                	adc    al,BYTE PTR [esi]
     b3a:	10 17                	adc    BYTE PTR [edi],dl
     b3c:	00 00                	add    BYTE PTR [eax],al
     b3e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b41:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b43:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b46:	0e                   	push   cs
     b47:	00 00                	add    BYTE PTR [eax],al
     b49:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b4c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b4e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b51:	08 00                	or     BYTE PTR [eax],al
     b53:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b56:	00 03                	add    BYTE PTR [ebx],al
     b58:	0e                   	push   cs
     b59:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b5b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b5d:	49                   	dec    ecx
     b5e:	13 00                	adc    eax,DWORD PTR [eax]
     b60:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b66:	00 00                	add    BYTE PTR [eax],al
     b68:	06                   	push   es
     b69:	0f 00 0b             	str    WORD PTR [ebx]
     b6c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b6f:	00 00                	add    BYTE PTR [eax],al
     b71:	07                   	pop    es
     b72:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b75:	19 03                	sbb    DWORD PTR [ebx],eax
     b77:	0e                   	push   cs
     b78:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b7a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b7c:	27                   	daa    
     b7d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b80:	11 01                	adc    DWORD PTR [ecx],eax
     b82:	12 06                	adc    al,BYTE PTR [esi]
     b84:	40                   	inc    eax
     b85:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b8b:	00 00                	add    BYTE PTR [eax],al
     b8d:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     b93:	0b 3b                	or     edi,DWORD PTR [ebx]
     b95:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b98:	02 18                	add    bl,BYTE PTR [eax]
     b9a:	00 00                	add    BYTE PTR [eax],al
     b9c:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     b9f:	03 08                	add    ecx,DWORD PTR [eax]
     ba1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ba3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ba5:	49                   	dec    ecx
     ba6:	13 02                	adc    eax,DWORD PTR [edx]
     ba8:	18 00                	sbb    BYTE PTR [eax],al
     baa:	00 0a                	add    BYTE PTR [edx],cl
     bac:	34 00                	xor    al,0x0
     bae:	03 0e                	add    ecx,DWORD PTR [esi]
     bb0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bb2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bb4:	49                   	dec    ecx
     bb5:	13 02                	adc    eax,DWORD PTR [edx]
     bb7:	18 00                	sbb    BYTE PTR [eax],al
     bb9:	00 0b                	add    BYTE PTR [ebx],cl
     bbb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bbe:	19 03                	sbb    DWORD PTR [ebx],eax
     bc0:	0e                   	push   cs
     bc1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bc3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bc5:	27                   	daa    
     bc6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bc9:	11 01                	adc    DWORD PTR [ecx],eax
     bcb:	12 06                	adc    al,BYTE PTR [esi]
     bcd:	40                   	inc    eax
     bce:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bd4:	00 00                	add    BYTE PTR [eax],al
     bd6:	0c 34                	or     al,0x34
     bd8:	00 03                	add    BYTE PTR [ebx],al
     bda:	0e                   	push   cs
     bdb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bdd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bdf:	49                   	dec    ecx
     be0:	13 3f                	adc    edi,DWORD PTR [edi]
     be2:	19 02                	sbb    DWORD PTR [edx],eax
     be4:	18 00                	sbb    BYTE PTR [eax],al
     be6:	00 00                	add    BYTE PTR [eax],al
     be8:	01 11                	add    DWORD PTR [ecx],edx
     bea:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     bf0:	0e                   	push   cs
     bf1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     bf3:	11 01                	adc    DWORD PTR [ecx],eax
     bf5:	12 06                	adc    al,BYTE PTR [esi]
     bf7:	10 17                	adc    BYTE PTR [edi],dl
     bf9:	00 00                	add    BYTE PTR [eax],al
     bfb:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     bfe:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c00:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c03:	0e                   	push   cs
     c04:	00 00                	add    BYTE PTR [eax],al
     c06:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c09:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c0b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c0e:	08 00                	or     BYTE PTR [eax],al
     c10:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c13:	00 03                	add    BYTE PTR [ebx],al
     c15:	0e                   	push   cs
     c16:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c18:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1a:	49                   	dec    ecx
     c1b:	13 00                	adc    eax,DWORD PTR [eax]
     c1d:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     c23:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c25:	49                   	dec    ecx
     c26:	13 3a                	adc    edi,DWORD PTR [edx]
     c28:	0b 3b                	or     edi,DWORD PTR [ebx]
     c2a:	0b 01                	or     eax,DWORD PTR [ecx]
     c2c:	13 00                	adc    eax,DWORD PTR [eax]
     c2e:	00 06                	add    BYTE PTR [esi],al
     c30:	28 00                	sub    BYTE PTR [eax],al
     c32:	03 0e                	add    ecx,DWORD PTR [esi]
     c34:	1c 0b                	sbb    al,0xb
     c36:	00 00                	add    BYTE PTR [eax],al
     c38:	07                   	pop    es
     c39:	28 00                	sub    BYTE PTR [eax],al
     c3b:	03 0e                	add    ecx,DWORD PTR [esi]
     c3d:	1c 05                	sbb    al,0x5
     c3f:	00 00                	add    BYTE PTR [eax],al
     c41:	08 0f                	or     BYTE PTR [edi],cl
     c43:	00 0b                	add    BYTE PTR [ebx],cl
     c45:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c48:	00 00                	add    BYTE PTR [eax],al
     c4a:	09 2e                	or     DWORD PTR [esi],ebp
     c4c:	01 3f                	add    DWORD PTR [edi],edi
     c4e:	19 03                	sbb    DWORD PTR [ebx],eax
     c50:	0e                   	push   cs
     c51:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c53:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c55:	27                   	daa    
     c56:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c59:	11 01                	adc    DWORD PTR [ecx],eax
     c5b:	12 06                	adc    al,BYTE PTR [esi]
     c5d:	40                   	inc    eax
     c5e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c64:	00 00                	add    BYTE PTR [eax],al
     c66:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     c6c:	0b 3b                	or     edi,DWORD PTR [ebx]
     c6e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c71:	02 18                	add    bl,BYTE PTR [eax]
     c73:	00 00                	add    BYTE PTR [eax],al
     c75:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c78:	03 0e                	add    ecx,DWORD PTR [esi]
     c7a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c7c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c7e:	49                   	dec    ecx
     c7f:	13 3f                	adc    edi,DWORD PTR [edi]
     c81:	19 02                	sbb    DWORD PTR [edx],eax
     c83:	18 00                	sbb    BYTE PTR [eax],al
     c85:	00 00                	add    BYTE PTR [eax],al
     c87:	01 11                	add    DWORD PTR [ecx],edx
     c89:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c8f:	0e                   	push   cs
     c90:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c92:	11 01                	adc    DWORD PTR [ecx],eax
     c94:	12 06                	adc    al,BYTE PTR [esi]
     c96:	10 17                	adc    BYTE PTR [edi],dl
     c98:	00 00                	add    BYTE PTR [eax],al
     c9a:	02 16                	add    dl,BYTE PTR [esi]
     c9c:	00 03                	add    BYTE PTR [ebx],al
     c9e:	0e                   	push   cs
     c9f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ca1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca3:	49                   	dec    ecx
     ca4:	13 00                	adc    eax,DWORD PTR [eax]
     ca6:	00 03                	add    BYTE PTR [ebx],al
     ca8:	0f 00 0b             	str    WORD PTR [ebx]
     cab:	0b 03                	or     eax,DWORD PTR [ebx]
     cad:	0e                   	push   cs
     cae:	49                   	dec    ecx
     caf:	13 00                	adc    eax,DWORD PTR [eax]
     cb1:	00 04 24             	add    BYTE PTR [esp],al
     cb4:	00 0b                	add    BYTE PTR [ebx],cl
     cb6:	0b 3e                	or     edi,DWORD PTR [esi]
     cb8:	0b 03                	or     eax,DWORD PTR [ebx]
     cba:	0e                   	push   cs
     cbb:	00 00                	add    BYTE PTR [eax],al
     cbd:	05 24 00 0b 0b       	add    eax,0xb0b0024
     cc2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cc5:	08 00                	or     BYTE PTR [eax],al
     cc7:	00 06                	add    BYTE PTR [esi],al
     cc9:	0f 00 0b             	str    WORD PTR [ebx]
     ccc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ccf:	00 00                	add    BYTE PTR [eax],al
     cd1:	07                   	pop    es
     cd2:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     cd6:	00 00                	add    BYTE PTR [eax],al
     cd8:	08 2e                	or     BYTE PTR [esi],ch
     cda:	01 03                	add    DWORD PTR [ebx],eax
     cdc:	0e                   	push   cs
     cdd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cdf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ce1:	27                   	daa    
     ce2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ce5:	11 01                	adc    DWORD PTR [ecx],eax
     ce7:	12 06                	adc    al,BYTE PTR [esi]
     ce9:	40                   	inc    eax
     cea:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     cf8:	0b 3b                	or     edi,DWORD PTR [ebx]
     cfa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cfd:	02 18                	add    bl,BYTE PTR [eax]
     cff:	00 00                	add    BYTE PTR [eax],al
     d01:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     d04:	03 08                	add    ecx,DWORD PTR [eax]
     d06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d0a:	49                   	dec    ecx
     d0b:	13 02                	adc    eax,DWORD PTR [edx]
     d0d:	18 00                	sbb    BYTE PTR [eax],al
     d0f:	00 0b                	add    BYTE PTR [ebx],cl
     d11:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d16:	0b 3b                	or     edi,DWORD PTR [ebx]
     d18:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d1b:	02 18                	add    bl,BYTE PTR [eax]
     d1d:	00 00                	add    BYTE PTR [eax],al
     d1f:	0c 34                	or     al,0x34
     d21:	00 03                	add    BYTE PTR [ebx],al
     d23:	0e                   	push   cs
     d24:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d26:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d28:	49                   	dec    ecx
     d29:	13 02                	adc    eax,DWORD PTR [edx]
     d2b:	18 00                	sbb    BYTE PTR [eax],al
     d2d:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     d33:	12 06                	adc    al,BYTE PTR [esi]
     d35:	00 00                	add    BYTE PTR [eax],al
     d37:	0e                   	push   cs
     d38:	01 01                	add    DWORD PTR [ecx],eax
     d3a:	49                   	dec    ecx
     d3b:	13 01                	adc    eax,DWORD PTR [ecx]
     d3d:	13 00                	adc    eax,DWORD PTR [eax]
     d3f:	00 0f                	add    BYTE PTR [edi],cl
     d41:	21 00                	and    DWORD PTR [eax],eax
     d43:	49                   	dec    ecx
     d44:	13 2f                	adc    ebp,DWORD PTR [edi]
     d46:	0b 00                	or     eax,DWORD PTR [eax]
     d48:	00 10                	add    BYTE PTR [eax],dl
     d4a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d4d:	19 03                	sbb    DWORD PTR [ebx],eax
     d4f:	0e                   	push   cs
     d50:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d52:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d54:	27                   	daa    
     d55:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d58:	11 01                	adc    DWORD PTR [ecx],eax
     d5a:	12 06                	adc    al,BYTE PTR [esi]
     d5c:	40                   	inc    eax
     d5d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d63:	00 00                	add    BYTE PTR [eax],al
     d65:	11 0a                	adc    DWORD PTR [edx],ecx
     d67:	00 03                	add    BYTE PTR [ebx],al
     d69:	0e                   	push   cs
     d6a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d6c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d6e:	11 01                	adc    DWORD PTR [ecx],eax
     d70:	00 00                	add    BYTE PTR [eax],al
     d72:	12 0b                	adc    cl,BYTE PTR [ebx]
     d74:	01 11                	add    DWORD PTR [ecx],edx
     d76:	01 12                	add    DWORD PTR [edx],edx
     d78:	06                   	push   es
     d79:	01 13                	add    DWORD PTR [ebx],edx
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	13 2e                	adc    ebp,DWORD PTR [esi]
     d7f:	01 3f                	add    DWORD PTR [edi],edi
     d81:	19 03                	sbb    DWORD PTR [ebx],eax
     d83:	0e                   	push   cs
     d84:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d86:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     d8c:	11 01                	adc    DWORD PTR [ecx],eax
     d8e:	12 06                	adc    al,BYTE PTR [esi]
     d90:	40                   	inc    eax
     d91:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d97:	00 00                	add    BYTE PTR [eax],al
     d99:	14 05                	adc    al,0x5
     d9b:	00 03                	add    BYTE PTR [ebx],al
     d9d:	08 3a                	or     BYTE PTR [edx],bh
     d9f:	0b 3b                	or     edi,DWORD PTR [ebx]
     da1:	05 49 13 02 18       	add    eax,0x18021349
     da6:	00 00                	add    BYTE PTR [eax],al
     da8:	15 18 00 00 00       	adc    eax,0x18
     dad:	16                   	push   ss
     dae:	34 00                	xor    al,0x0
     db0:	03 0e                	add    ecx,DWORD PTR [esi]
     db2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     db4:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     dba:	00 00                	add    BYTE PTR [eax],al
     dbc:	17                   	pop    ss
     dbd:	34 00                	xor    al,0x0
     dbf:	03 08                	add    ecx,DWORD PTR [eax]
     dc1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dc3:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     dc9:	00 00                	add    BYTE PTR [eax],al
     dcb:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     dce:	03 0e                	add    ecx,DWORD PTR [esi]
     dd0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dd2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dd4:	49                   	dec    ecx
     dd5:	13 3f                	adc    edi,DWORD PTR [edi]
     dd7:	19 02                	sbb    DWORD PTR [edx],eax
     dd9:	18 00                	sbb    BYTE PTR [eax],al
     ddb:	00 00                	add    BYTE PTR [eax],al
     ddd:	01 11                	add    DWORD PTR [ecx],edx
     ddf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     de5:	0e                   	push   cs
     de6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     de8:	11 01                	adc    DWORD PTR [ecx],eax
     dea:	12 06                	adc    al,BYTE PTR [esi]
     dec:	10 17                	adc    BYTE PTR [edi],dl
     dee:	00 00                	add    BYTE PTR [eax],al
     df0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     df3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     df5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     df8:	0e                   	push   cs
     df9:	00 00                	add    BYTE PTR [eax],al
     dfb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     dfe:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e00:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e03:	08 00                	or     BYTE PTR [eax],al
     e05:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     e08:	00 03                	add    BYTE PTR [ebx],al
     e0a:	0e                   	push   cs
     e0b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e0d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e0f:	49                   	dec    ecx
     e10:	13 00                	adc    eax,DWORD PTR [eax]
     e12:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     e18:	49                   	dec    ecx
     e19:	13 00                	adc    eax,DWORD PTR [eax]
     e1b:	00 06                	add    BYTE PTR [esi],al
     e1d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e20:	19 03                	sbb    DWORD PTR [ebx],eax
     e22:	0e                   	push   cs
     e23:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e25:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e27:	11 01                	adc    DWORD PTR [ecx],eax
     e29:	12 06                	adc    al,BYTE PTR [esi]
     e2b:	40                   	inc    eax
     e2c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e32:	00 00                	add    BYTE PTR [eax],al
     e34:	07                   	pop    es
     e35:	34 00                	xor    al,0x0
     e37:	03 0e                	add    ecx,DWORD PTR [esi]
     e39:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e3b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e3d:	49                   	dec    ecx
     e3e:	13 02                	adc    eax,DWORD PTR [edx]
     e40:	18 00                	sbb    BYTE PTR [eax],al
     e42:	00 08                	add    BYTE PTR [eax],cl
     e44:	01 01                	add    DWORD PTR [ecx],eax
     e46:	49                   	dec    ecx
     e47:	13 01                	adc    eax,DWORD PTR [ecx]
     e49:	13 00                	adc    eax,DWORD PTR [eax]
     e4b:	00 09                	add    BYTE PTR [ecx],cl
     e4d:	21 00                	and    DWORD PTR [eax],eax
     e4f:	49                   	dec    ecx
     e50:	13 2f                	adc    ebp,DWORD PTR [edi]
     e52:	0b 00                	or     eax,DWORD PTR [eax]
     e54:	00 0a                	add    BYTE PTR [edx],cl
     e56:	34 00                	xor    al,0x0
     e58:	03 0e                	add    ecx,DWORD PTR [esi]
     e5a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e5c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e5e:	49                   	dec    ecx
     e5f:	13 3f                	adc    edi,DWORD PTR [edi]
     e61:	19 02                	sbb    DWORD PTR [edx],eax
     e63:	18 00                	sbb    BYTE PTR [eax],al
     e65:	00 00                	add    BYTE PTR [eax],al
     e67:	01 11                	add    DWORD PTR [ecx],edx
     e69:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e6f:	0e                   	push   cs
     e70:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e72:	11 01                	adc    DWORD PTR [ecx],eax
     e74:	12 06                	adc    al,BYTE PTR [esi]
     e76:	10 17                	adc    BYTE PTR [edi],dl
     e78:	00 00                	add    BYTE PTR [eax],al
     e7a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e7d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e7f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e82:	0e                   	push   cs
     e83:	00 00                	add    BYTE PTR [eax],al
     e85:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     e88:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e8a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e8d:	08 00                	or     BYTE PTR [eax],al
     e8f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     e92:	00 03                	add    BYTE PTR [ebx],al
     e94:	0e                   	push   cs
     e95:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e97:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e99:	49                   	dec    ecx
     e9a:	13 00                	adc    eax,DWORD PTR [eax]
     e9c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ea2:	49                   	dec    ecx
     ea3:	13 00                	adc    eax,DWORD PTR [eax]
     ea5:	00 06                	add    BYTE PTR [esi],al
     ea7:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     eab:	00 00                	add    BYTE PTR [eax],al
     ead:	07                   	pop    es
     eae:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     eb1:	19 03                	sbb    DWORD PTR [ebx],eax
     eb3:	0e                   	push   cs
     eb4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eb6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb8:	27                   	daa    
     eb9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ebc:	11 01                	adc    DWORD PTR [ecx],eax
     ebe:	12 06                	adc    al,BYTE PTR [esi]
     ec0:	40                   	inc    eax
     ec1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ec7:	00 00                	add    BYTE PTR [eax],al
     ec9:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     ecf:	0b 3b                	or     edi,DWORD PTR [ebx]
     ed1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ed4:	02 18                	add    bl,BYTE PTR [eax]
     ed6:	00 00                	add    BYTE PTR [eax],al
     ed8:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     ede:	0b 3b                	or     edi,DWORD PTR [ebx]
     ee0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ee3:	02 18                	add    bl,BYTE PTR [eax]
     ee5:	00 00                	add    BYTE PTR [eax],al
     ee7:	0a 2e                	or     ch,BYTE PTR [esi]
     ee9:	01 3f                	add    DWORD PTR [edi],edi
     eeb:	19 03                	sbb    DWORD PTR [ebx],eax
     eed:	0e                   	push   cs
     eee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ef0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ef2:	27                   	daa    
     ef3:	19 11                	sbb    DWORD PTR [ecx],edx
     ef5:	01 12                	add    DWORD PTR [edx],edx
     ef7:	06                   	push   es
     ef8:	40                   	inc    eax
     ef9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     eff:	00 00                	add    BYTE PTR [eax],al
     f01:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     f04:	03 08                	add    ecx,DWORD PTR [eax]
     f06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f0a:	49                   	dec    ecx
     f0b:	13 02                	adc    eax,DWORD PTR [edx]
     f0d:	18 00                	sbb    BYTE PTR [eax],al
     f0f:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     f12:	00 03                	add    BYTE PTR [ebx],al
     f14:	0e                   	push   cs
     f15:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f17:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f19:	49                   	dec    ecx
     f1a:	13 3f                	adc    edi,DWORD PTR [edi]
     f1c:	19 02                	sbb    DWORD PTR [edx],eax
     f1e:	18 00                	sbb    BYTE PTR [eax],al
     f20:	00 00                	add    BYTE PTR [eax],al
     f22:	01 11                	add    DWORD PTR [ecx],edx
     f24:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f2a:	0e                   	push   cs
     f2b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f2d:	11 01                	adc    DWORD PTR [ecx],eax
     f2f:	12 06                	adc    al,BYTE PTR [esi]
     f31:	10 17                	adc    BYTE PTR [edi],dl
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f38:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f3a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f3d:	0e                   	push   cs
     f3e:	00 00                	add    BYTE PTR [eax],al
     f40:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f43:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f45:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f48:	08 00                	or     BYTE PTR [eax],al
     f4a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f4d:	00 03                	add    BYTE PTR [ebx],al
     f4f:	0e                   	push   cs
     f50:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f52:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f54:	49                   	dec    ecx
     f55:	13 00                	adc    eax,DWORD PTR [eax]
     f57:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f5d:	49                   	dec    ecx
     f5e:	13 00                	adc    eax,DWORD PTR [eax]
     f60:	00 06                	add    BYTE PTR [esi],al
     f62:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f66:	00 00                	add    BYTE PTR [eax],al
     f68:	07                   	pop    es
     f69:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f6c:	19 03                	sbb    DWORD PTR [ebx],eax
     f6e:	0e                   	push   cs
     f6f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f71:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f73:	27                   	daa    
     f74:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f77:	11 01                	adc    DWORD PTR [ecx],eax
     f79:	12 06                	adc    al,BYTE PTR [esi]
     f7b:	40                   	inc    eax
     f7c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f82:	00 00                	add    BYTE PTR [eax],al
     f84:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     f8a:	0b 3b                	or     edi,DWORD PTR [ebx]
     f8c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f8f:	02 18                	add    bl,BYTE PTR [eax]
     f91:	00 00                	add    BYTE PTR [eax],al
     f93:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     f96:	03 08                	add    ecx,DWORD PTR [eax]
     f98:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f9a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f9c:	49                   	dec    ecx
     f9d:	13 02                	adc    eax,DWORD PTR [edx]
     f9f:	18 00                	sbb    BYTE PTR [eax],al
     fa1:	00 0a                	add    BYTE PTR [edx],cl
     fa3:	34 00                	xor    al,0x0
     fa5:	03 0e                	add    ecx,DWORD PTR [esi]
     fa7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fab:	49                   	dec    ecx
     fac:	13 3f                	adc    edi,DWORD PTR [edi]
     fae:	19 02                	sbb    DWORD PTR [edx],eax
     fb0:	18 00                	sbb    BYTE PTR [eax],al
     fb2:	00 00                	add    BYTE PTR [eax],al
     fb4:	01 11                	add    DWORD PTR [ecx],edx
     fb6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     fbc:	0e                   	push   cs
     fbd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fbf:	11 01                	adc    DWORD PTR [ecx],eax
     fc1:	12 06                	adc    al,BYTE PTR [esi]
     fc3:	10 17                	adc    BYTE PTR [edi],dl
     fc5:	00 00                	add    BYTE PTR [eax],al
     fc7:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fca:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fcc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fcf:	0e                   	push   cs
     fd0:	00 00                	add    BYTE PTR [eax],al
     fd2:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fd5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fd7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fda:	08 00                	or     BYTE PTR [eax],al
     fdc:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     fdf:	00 03                	add    BYTE PTR [ebx],al
     fe1:	0e                   	push   cs
     fe2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fe4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fe6:	49                   	dec    ecx
     fe7:	13 00                	adc    eax,DWORD PTR [eax]
     fe9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     fef:	49                   	dec    ecx
     ff0:	13 00                	adc    eax,DWORD PTR [eax]
     ff2:	00 06                	add    BYTE PTR [esi],al
     ff4:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ff8:	00 00                	add    BYTE PTR [eax],al
     ffa:	07                   	pop    es
     ffb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ffe:	19 03                	sbb    DWORD PTR [ebx],eax
    1000:	0e                   	push   cs
    1001:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1003:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1005:	27                   	daa    
    1006:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1009:	11 01                	adc    DWORD PTR [ecx],eax
    100b:	12 06                	adc    al,BYTE PTR [esi]
    100d:	40                   	inc    eax
    100e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1014:	00 00                	add    BYTE PTR [eax],al
    1016:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    101c:	0b 3b                	or     edi,DWORD PTR [ebx]
    101e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1021:	02 18                	add    bl,BYTE PTR [eax]
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1028:	03 08                	add    ecx,DWORD PTR [eax]
    102a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    102c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    102e:	49                   	dec    ecx
    102f:	13 02                	adc    eax,DWORD PTR [edx]
    1031:	18 00                	sbb    BYTE PTR [eax],al
    1033:	00 0a                	add    BYTE PTR [edx],cl
    1035:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    103a:	0b 3b                	or     edi,DWORD PTR [ebx]
    103c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    103f:	02 18                	add    bl,BYTE PTR [eax]
    1041:	00 00                	add    BYTE PTR [eax],al
    1043:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    1046:	03 0e                	add    ecx,DWORD PTR [esi]
    1048:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    104a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    104c:	49                   	dec    ecx
    104d:	13 3f                	adc    edi,DWORD PTR [edi]
    104f:	19 02                	sbb    DWORD PTR [edx],eax
    1051:	18 00                	sbb    BYTE PTR [eax],al
    1053:	00 00                	add    BYTE PTR [eax],al
    1055:	01 11                	add    DWORD PTR [ecx],edx
    1057:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    105d:	0e                   	push   cs
    105e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1060:	11 01                	adc    DWORD PTR [ecx],eax
    1062:	12 06                	adc    al,BYTE PTR [esi]
    1064:	10 17                	adc    BYTE PTR [edi],dl
    1066:	00 00                	add    BYTE PTR [eax],al
    1068:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    106b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    106d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1070:	0e                   	push   cs
    1071:	00 00                	add    BYTE PTR [eax],al
    1073:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1076:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1078:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    107b:	08 00                	or     BYTE PTR [eax],al
    107d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1080:	00 03                	add    BYTE PTR [ebx],al
    1082:	0e                   	push   cs
    1083:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1085:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1087:	49                   	dec    ecx
    1088:	13 00                	adc    eax,DWORD PTR [eax]
    108a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1090:	49                   	dec    ecx
    1091:	13 00                	adc    eax,DWORD PTR [eax]
    1093:	00 06                	add    BYTE PTR [esi],al
    1095:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1098:	19 03                	sbb    DWORD PTR [ebx],eax
    109a:	0e                   	push   cs
    109b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    109d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    109f:	27                   	daa    
    10a0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10a3:	11 01                	adc    DWORD PTR [ecx],eax
    10a5:	12 06                	adc    al,BYTE PTR [esi]
    10a7:	40                   	inc    eax
    10a8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10ae:	00 00                	add    BYTE PTR [eax],al
    10b0:	07                   	pop    es
    10b1:	05 00 03 08 3a       	add    eax,0x3a080300
    10b6:	0b 3b                	or     edi,DWORD PTR [ebx]
    10b8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10bb:	02 18                	add    bl,BYTE PTR [eax]
    10bd:	00 00                	add    BYTE PTR [eax],al
    10bf:	08 2e                	or     BYTE PTR [esi],ch
    10c1:	01 3f                	add    DWORD PTR [edi],edi
    10c3:	19 03                	sbb    DWORD PTR [ebx],eax
    10c5:	0e                   	push   cs
    10c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10ca:	27                   	daa    
    10cb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10ce:	11 01                	adc    DWORD PTR [ecx],eax
    10d0:	12 06                	adc    al,BYTE PTR [esi]
    10d2:	40                   	inc    eax
    10d3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    10d9:	00 00                	add    BYTE PTR [eax],al
    10db:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    10de:	03 08                	add    ecx,DWORD PTR [eax]
    10e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10e4:	49                   	dec    ecx
    10e5:	13 02                	adc    eax,DWORD PTR [edx]
    10e7:	18 00                	sbb    BYTE PTR [eax],al
    10e9:	00 0a                	add    BYTE PTR [edx],cl
    10eb:	34 00                	xor    al,0x0
    10ed:	03 0e                	add    ecx,DWORD PTR [esi]
    10ef:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10f1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10f3:	49                   	dec    ecx
    10f4:	13 3f                	adc    edi,DWORD PTR [edi]
    10f6:	19 02                	sbb    DWORD PTR [edx],eax
    10f8:	18 00                	sbb    BYTE PTR [eax],al
    10fa:	00 00                	add    BYTE PTR [eax],al
    10fc:	01 11                	add    DWORD PTR [ecx],edx
    10fe:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1104:	0e                   	push   cs
    1105:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1107:	11 01                	adc    DWORD PTR [ecx],eax
    1109:	12 06                	adc    al,BYTE PTR [esi]
    110b:	10 17                	adc    BYTE PTR [edi],dl
    110d:	00 00                	add    BYTE PTR [eax],al
    110f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1112:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1114:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1117:	0e                   	push   cs
    1118:	00 00                	add    BYTE PTR [eax],al
    111a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    111d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    111f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1122:	08 00                	or     BYTE PTR [eax],al
    1124:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1127:	00 03                	add    BYTE PTR [ebx],al
    1129:	0e                   	push   cs
    112a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    112c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112e:	49                   	dec    ecx
    112f:	13 00                	adc    eax,DWORD PTR [eax]
    1131:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1137:	49                   	dec    ecx
    1138:	13 00                	adc    eax,DWORD PTR [eax]
    113a:	00 06                	add    BYTE PTR [esi],al
    113c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1140:	00 00                	add    BYTE PTR [eax],al
    1142:	07                   	pop    es
    1143:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1146:	19 03                	sbb    DWORD PTR [ebx],eax
    1148:	0e                   	push   cs
    1149:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    114b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    114d:	27                   	daa    
    114e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1151:	11 01                	adc    DWORD PTR [ecx],eax
    1153:	12 06                	adc    al,BYTE PTR [esi]
    1155:	40                   	inc    eax
    1156:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    115c:	00 00                	add    BYTE PTR [eax],al
    115e:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1164:	0b 3b                	or     edi,DWORD PTR [ebx]
    1166:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1169:	02 18                	add    bl,BYTE PTR [eax]
    116b:	00 00                	add    BYTE PTR [eax],al
    116d:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1170:	03 08                	add    ecx,DWORD PTR [eax]
    1172:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1174:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1176:	49                   	dec    ecx
    1177:	13 02                	adc    eax,DWORD PTR [edx]
    1179:	18 00                	sbb    BYTE PTR [eax],al
    117b:	00 0a                	add    BYTE PTR [edx],cl
    117d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1180:	19 03                	sbb    DWORD PTR [ebx],eax
    1182:	0e                   	push   cs
    1183:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1185:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1187:	27                   	daa    
    1188:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    118b:	11 01                	adc    DWORD PTR [ecx],eax
    118d:	12 06                	adc    al,BYTE PTR [esi]
    118f:	40                   	inc    eax
    1190:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1196:	00 00                	add    BYTE PTR [eax],al
    1198:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    119e:	0b 3b                	or     edi,DWORD PTR [ebx]
    11a0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11a3:	02 18                	add    bl,BYTE PTR [eax]
    11a5:	00 00                	add    BYTE PTR [eax],al
    11a7:	0c 34                	or     al,0x34
    11a9:	00 03                	add    BYTE PTR [ebx],al
    11ab:	0e                   	push   cs
    11ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b0:	49                   	dec    ecx
    11b1:	13 3f                	adc    edi,DWORD PTR [edi]
    11b3:	19 02                	sbb    DWORD PTR [edx],eax
    11b5:	18 00                	sbb    BYTE PTR [eax],al
    11b7:	00 00                	add    BYTE PTR [eax],al
    11b9:	01 11                	add    DWORD PTR [ecx],edx
    11bb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11c1:	0e                   	push   cs
    11c2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11c4:	11 01                	adc    DWORD PTR [ecx],eax
    11c6:	12 06                	adc    al,BYTE PTR [esi]
    11c8:	10 17                	adc    BYTE PTR [edi],dl
    11ca:	00 00                	add    BYTE PTR [eax],al
    11cc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11cf:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11d1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11d4:	08 00                	or     BYTE PTR [eax],al
    11d6:	00 03                	add    BYTE PTR [ebx],al
    11d8:	16                   	push   ss
    11d9:	00 03                	add    BYTE PTR [ebx],al
    11db:	0e                   	push   cs
    11dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11e0:	49                   	dec    ecx
    11e1:	13 00                	adc    eax,DWORD PTR [eax]
    11e3:	00 04 24             	add    BYTE PTR [esp],al
    11e6:	00 0b                	add    BYTE PTR [ebx],cl
    11e8:	0b 3e                	or     edi,DWORD PTR [esi]
    11ea:	0b 03                	or     eax,DWORD PTR [ebx]
    11ec:	0e                   	push   cs
    11ed:	00 00                	add    BYTE PTR [eax],al
    11ef:	05 2e 01 3f 19       	add    eax,0x193f012e
    11f4:	03 0e                	add    ecx,DWORD PTR [esi]
    11f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11fa:	27                   	daa    
    11fb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11fe:	11 01                	adc    DWORD PTR [ecx],eax
    1200:	12 06                	adc    al,BYTE PTR [esi]
    1202:	40                   	inc    eax
    1203:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1209:	00 00                	add    BYTE PTR [eax],al
    120b:	06                   	push   es
    120c:	05 00 03 08 3a       	add    eax,0x3a080300
    1211:	0b 3b                	or     edi,DWORD PTR [ebx]
    1213:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1216:	02 18                	add    bl,BYTE PTR [eax]
    1218:	00 00                	add    BYTE PTR [eax],al
    121a:	07                   	pop    es
    121b:	0f 00 0b             	str    WORD PTR [ebx]
    121e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1221:	00 00                	add    BYTE PTR [eax],al
    1223:	08 26                	or     BYTE PTR [esi],ah
    1225:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1228:	00 00                	add    BYTE PTR [eax],al
    122a:	09 2e                	or     DWORD PTR [esi],ebp
    122c:	01 3f                	add    DWORD PTR [edi],edi
    122e:	19 03                	sbb    DWORD PTR [ebx],eax
    1230:	0e                   	push   cs
    1231:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1233:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1235:	27                   	daa    
    1236:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1239:	11 01                	adc    DWORD PTR [ecx],eax
    123b:	12 06                	adc    al,BYTE PTR [esi]
    123d:	40                   	inc    eax
    123e:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1244:	00 01                	add    BYTE PTR [ecx],al
    1246:	11 01                	adc    DWORD PTR [ecx],eax
    1248:	25 0e 13 0b 03       	and    eax,0x30b130e
    124d:	0e                   	push   cs
    124e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1250:	11 01                	adc    DWORD PTR [ecx],eax
    1252:	12 06                	adc    al,BYTE PTR [esi]
    1254:	10 17                	adc    BYTE PTR [edi],dl
    1256:	00 00                	add    BYTE PTR [eax],al
    1258:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    125b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    125d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1260:	08 00                	or     BYTE PTR [eax],al
    1262:	00 03                	add    BYTE PTR [ebx],al
    1264:	16                   	push   ss
    1265:	00 03                	add    BYTE PTR [ebx],al
    1267:	0e                   	push   cs
    1268:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    126a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    126c:	49                   	dec    ecx
    126d:	13 00                	adc    eax,DWORD PTR [eax]
    126f:	00 04 24             	add    BYTE PTR [esp],al
    1272:	00 0b                	add    BYTE PTR [ebx],cl
    1274:	0b 3e                	or     edi,DWORD PTR [esi]
    1276:	0b 03                	or     eax,DWORD PTR [ebx]
    1278:	0e                   	push   cs
    1279:	00 00                	add    BYTE PTR [eax],al
    127b:	05 2e 01 3f 19       	add    eax,0x193f012e
    1280:	03 0e                	add    ecx,DWORD PTR [esi]
    1282:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1284:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1286:	27                   	daa    
    1287:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    128a:	11 01                	adc    DWORD PTR [ecx],eax
    128c:	12 06                	adc    al,BYTE PTR [esi]
    128e:	40                   	inc    eax
    128f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1295:	00 00                	add    BYTE PTR [eax],al
    1297:	06                   	push   es
    1298:	05 00 03 08 3a       	add    eax,0x3a080300
    129d:	0b 3b                	or     edi,DWORD PTR [ebx]
    129f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12a2:	02 18                	add    bl,BYTE PTR [eax]
    12a4:	00 00                	add    BYTE PTR [eax],al
    12a6:	07                   	pop    es
    12a7:	34 00                	xor    al,0x0
    12a9:	03 08                	add    ecx,DWORD PTR [eax]
    12ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12af:	49                   	dec    ecx
    12b0:	13 02                	adc    eax,DWORD PTR [edx]
    12b2:	18 00                	sbb    BYTE PTR [eax],al
    12b4:	00 08                	add    BYTE PTR [eax],cl
    12b6:	0f 00 0b             	str    WORD PTR [ebx]
    12b9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12bc:	00 00                	add    BYTE PTR [eax],al
    12be:	09 26                	or     DWORD PTR [esi],esp
    12c0:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12c3:	00 00                	add    BYTE PTR [eax],al
    12c5:	0a 2e                	or     ch,BYTE PTR [esi]
    12c7:	01 3f                	add    DWORD PTR [edi],edi
    12c9:	19 03                	sbb    DWORD PTR [ebx],eax
    12cb:	0e                   	push   cs
    12cc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12d0:	27                   	daa    
    12d1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12d4:	11 01                	adc    DWORD PTR [ecx],eax
    12d6:	12 06                	adc    al,BYTE PTR [esi]
    12d8:	40                   	inc    eax
    12d9:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    12df:	00 01                	add    BYTE PTR [ecx],al
    12e1:	11 01                	adc    DWORD PTR [ecx],eax
    12e3:	25 0e 13 0b 03       	and    eax,0x30b130e
    12e8:	0e                   	push   cs
    12e9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12eb:	11 01                	adc    DWORD PTR [ecx],eax
    12ed:	12 06                	adc    al,BYTE PTR [esi]
    12ef:	10 17                	adc    BYTE PTR [edi],dl
    12f1:	00 00                	add    BYTE PTR [eax],al
    12f3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12f6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12f8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12fb:	0e                   	push   cs
    12fc:	00 00                	add    BYTE PTR [eax],al
    12fe:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1301:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1303:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1306:	08 00                	or     BYTE PTR [eax],al
    1308:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    130b:	00 03                	add    BYTE PTR [ebx],al
    130d:	0e                   	push   cs
    130e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1310:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1312:	49                   	dec    ecx
    1313:	13 00                	adc    eax,DWORD PTR [eax]
    1315:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    131b:	49                   	dec    ecx
    131c:	13 00                	adc    eax,DWORD PTR [eax]
    131e:	00 06                	add    BYTE PTR [esi],al
    1320:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1324:	00 00                	add    BYTE PTR [eax],al
    1326:	07                   	pop    es
    1327:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    132a:	19 03                	sbb    DWORD PTR [ebx],eax
    132c:	0e                   	push   cs
    132d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    132f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1331:	27                   	daa    
    1332:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1335:	11 01                	adc    DWORD PTR [ecx],eax
    1337:	12 06                	adc    al,BYTE PTR [esi]
    1339:	40                   	inc    eax
    133a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1340:	00 00                	add    BYTE PTR [eax],al
    1342:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1348:	0b 3b                	or     edi,DWORD PTR [ebx]
    134a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    134d:	02 18                	add    bl,BYTE PTR [eax]
    134f:	00 00                	add    BYTE PTR [eax],al
    1351:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1354:	03 08                	add    ecx,DWORD PTR [eax]
    1356:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1358:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    135a:	49                   	dec    ecx
    135b:	13 02                	adc    eax,DWORD PTR [edx]
    135d:	18 00                	sbb    BYTE PTR [eax],al
    135f:	00 0a                	add    BYTE PTR [edx],cl
    1361:	34 00                	xor    al,0x0
    1363:	03 0e                	add    ecx,DWORD PTR [esi]
    1365:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1367:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1369:	49                   	dec    ecx
    136a:	13 00                	adc    eax,DWORD PTR [eax]
    136c:	00 0b                	add    BYTE PTR [ebx],cl
    136e:	34 00                	xor    al,0x0
    1370:	03 08                	add    ecx,DWORD PTR [eax]
    1372:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1374:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1376:	49                   	dec    ecx
    1377:	13 00                	adc    eax,DWORD PTR [eax]
    1379:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    137c:	00 03                	add    BYTE PTR [ebx],al
    137e:	0e                   	push   cs
    137f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1381:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1383:	49                   	dec    ecx
    1384:	13 02                	adc    eax,DWORD PTR [edx]
    1386:	18 00                	sbb    BYTE PTR [eax],al
    1388:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    138e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1390:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1392:	49                   	dec    ecx
    1393:	13 3f                	adc    edi,DWORD PTR [edi]
    1395:	19 02                	sbb    DWORD PTR [edx],eax
    1397:	18 00                	sbb    BYTE PTR [eax],al
    1399:	00 00                	add    BYTE PTR [eax],al
    139b:	01 11                	add    DWORD PTR [ecx],edx
    139d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    13a3:	0e                   	push   cs
    13a4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13a6:	11 01                	adc    DWORD PTR [ecx],eax
    13a8:	12 06                	adc    al,BYTE PTR [esi]
    13aa:	10 17                	adc    BYTE PTR [edi],dl
    13ac:	00 00                	add    BYTE PTR [eax],al
    13ae:	02 2e                	add    ch,BYTE PTR [esi]
    13b0:	01 3f                	add    DWORD PTR [edi],edi
    13b2:	19 03                	sbb    DWORD PTR [ebx],eax
    13b4:	0e                   	push   cs
    13b5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13b7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b9:	27                   	daa    
    13ba:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13bd:	11 01                	adc    DWORD PTR [ecx],eax
    13bf:	12 06                	adc    al,BYTE PTR [esi]
    13c1:	40                   	inc    eax
    13c2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13c8:	00 00                	add    BYTE PTR [eax],al
    13ca:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    13d0:	0b 3b                	or     edi,DWORD PTR [ebx]
    13d2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13d5:	02 18                	add    bl,BYTE PTR [eax]
    13d7:	00 00                	add    BYTE PTR [eax],al
    13d9:	04 0f                	add    al,0xf
    13db:	00 0b                	add    BYTE PTR [ebx],cl
    13dd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13e0:	00 00                	add    BYTE PTR [eax],al
    13e2:	05 24 00 0b 0b       	add    eax,0xb0b0024
    13e7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13ea:	0e                   	push   cs
    13eb:	00 00                	add    BYTE PTR [eax],al
    13ed:	06                   	push   es
    13ee:	24 00                	and    al,0x0
    13f0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13f2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13f5:	08 00                	or     BYTE PTR [eax],al
    13f7:	00 00                	add    BYTE PTR [eax],al
    13f9:	01 11                	add    DWORD PTR [ecx],edx
    13fb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1401:	0e                   	push   cs
    1402:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1404:	11 01                	adc    DWORD PTR [ecx],eax
    1406:	12 06                	adc    al,BYTE PTR [esi]
    1408:	10 17                	adc    BYTE PTR [edi],dl
    140a:	00 00                	add    BYTE PTR [eax],al
    140c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    140f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1411:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1414:	0e                   	push   cs
    1415:	00 00                	add    BYTE PTR [eax],al
    1417:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    141a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    141c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    141f:	08 00                	or     BYTE PTR [eax],al
    1421:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1424:	00 03                	add    BYTE PTR [ebx],al
    1426:	0e                   	push   cs
    1427:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1429:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    142b:	49                   	dec    ecx
    142c:	13 00                	adc    eax,DWORD PTR [eax]
    142e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1434:	49                   	dec    ecx
    1435:	13 00                	adc    eax,DWORD PTR [eax]
    1437:	00 06                	add    BYTE PTR [esi],al
    1439:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    143d:	00 00                	add    BYTE PTR [eax],al
    143f:	07                   	pop    es
    1440:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1443:	19 03                	sbb    DWORD PTR [ebx],eax
    1445:	0e                   	push   cs
    1446:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1448:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    144a:	27                   	daa    
    144b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    144e:	11 01                	adc    DWORD PTR [ecx],eax
    1450:	12 06                	adc    al,BYTE PTR [esi]
    1452:	40                   	inc    eax
    1453:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1459:	00 00                	add    BYTE PTR [eax],al
    145b:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1461:	0b 3b                	or     edi,DWORD PTR [ebx]
    1463:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1466:	02 18                	add    bl,BYTE PTR [eax]
    1468:	00 00                	add    BYTE PTR [eax],al
    146a:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    146d:	03 08                	add    ecx,DWORD PTR [eax]
    146f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1471:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1473:	49                   	dec    ecx
    1474:	13 02                	adc    eax,DWORD PTR [edx]
    1476:	18 00                	sbb    BYTE PTR [eax],al
    1478:	00 0a                	add    BYTE PTR [edx],cl
    147a:	34 00                	xor    al,0x0
    147c:	03 0e                	add    ecx,DWORD PTR [esi]
    147e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1480:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1482:	49                   	dec    ecx
    1483:	13 00                	adc    eax,DWORD PTR [eax]
    1485:	00 0b                	add    BYTE PTR [ebx],cl
    1487:	34 00                	xor    al,0x0
    1489:	03 08                	add    ecx,DWORD PTR [eax]
    148b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    148d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    148f:	49                   	dec    ecx
    1490:	13 00                	adc    eax,DWORD PTR [eax]
    1492:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1495:	00 03                	add    BYTE PTR [ebx],al
    1497:	0e                   	push   cs
    1498:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    149a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    149c:	49                   	dec    ecx
    149d:	13 3f                	adc    edi,DWORD PTR [edi]
    149f:	19 02                	sbb    DWORD PTR [edx],eax
    14a1:	18 00                	sbb    BYTE PTR [eax],al
    14a3:	00 00                	add    BYTE PTR [eax],al
    14a5:	01 11                	add    DWORD PTR [ecx],edx
    14a7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14ad:	0e                   	push   cs
    14ae:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14b0:	11 01                	adc    DWORD PTR [ecx],eax
    14b2:	12 06                	adc    al,BYTE PTR [esi]
    14b4:	10 17                	adc    BYTE PTR [edi],dl
    14b6:	00 00                	add    BYTE PTR [eax],al
    14b8:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14bb:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14bd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14c0:	0e                   	push   cs
    14c1:	00 00                	add    BYTE PTR [eax],al
    14c3:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    14c6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14c8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14cb:	08 00                	or     BYTE PTR [eax],al
    14cd:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    14d0:	00 03                	add    BYTE PTR [ebx],al
    14d2:	0e                   	push   cs
    14d3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14d5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14d7:	49                   	dec    ecx
    14d8:	13 00                	adc    eax,DWORD PTR [eax]
    14da:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    14e0:	49                   	dec    ecx
    14e1:	13 00                	adc    eax,DWORD PTR [eax]
    14e3:	00 06                	add    BYTE PTR [esi],al
    14e5:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    14e8:	19 03                	sbb    DWORD PTR [ebx],eax
    14ea:	0e                   	push   cs
    14eb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14ed:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14ef:	27                   	daa    
    14f0:	19 11                	sbb    DWORD PTR [ecx],edx
    14f2:	01 12                	add    DWORD PTR [edx],edx
    14f4:	06                   	push   es
    14f5:	40                   	inc    eax
    14f6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	07                   	pop    es
    14ff:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1504:	0b 3b                	or     edi,DWORD PTR [ebx]
    1506:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1509:	02 18                	add    bl,BYTE PTR [eax]
    150b:	00 00                	add    BYTE PTR [eax],al
    150d:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1510:	03 08                	add    ecx,DWORD PTR [eax]
    1512:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1514:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1516:	49                   	dec    ecx
    1517:	13 02                	adc    eax,DWORD PTR [edx]
    1519:	18 00                	sbb    BYTE PTR [eax],al
    151b:	00 09                	add    BYTE PTR [ecx],cl
    151d:	34 00                	xor    al,0x0
    151f:	03 0e                	add    ecx,DWORD PTR [esi]
    1521:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1523:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1525:	49                   	dec    ecx
    1526:	13 3f                	adc    edi,DWORD PTR [edi]
    1528:	19 02                	sbb    DWORD PTR [edx],eax
    152a:	18 00                	sbb    BYTE PTR [eax],al
    152c:	00 00                	add    BYTE PTR [eax],al
    152e:	01 11                	add    DWORD PTR [ecx],edx
    1530:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1536:	0e                   	push   cs
    1537:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1539:	11 01                	adc    DWORD PTR [ecx],eax
    153b:	12 06                	adc    al,BYTE PTR [esi]
    153d:	10 17                	adc    BYTE PTR [edi],dl
    153f:	00 00                	add    BYTE PTR [eax],al
    1541:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1544:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1546:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1549:	0e                   	push   cs
    154a:	00 00                	add    BYTE PTR [eax],al
    154c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    154f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1551:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1554:	08 00                	or     BYTE PTR [eax],al
    1556:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1559:	00 03                	add    BYTE PTR [ebx],al
    155b:	0e                   	push   cs
    155c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    155e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1560:	49                   	dec    ecx
    1561:	13 00                	adc    eax,DWORD PTR [eax]
    1563:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1569:	49                   	dec    ecx
    156a:	13 00                	adc    eax,DWORD PTR [eax]
    156c:	00 06                	add    BYTE PTR [esi],al
    156e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1572:	00 00                	add    BYTE PTR [eax],al
    1574:	07                   	pop    es
    1575:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    1578:	0e                   	push   cs
    1579:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    157b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    157d:	27                   	daa    
    157e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1581:	11 01                	adc    DWORD PTR [ecx],eax
    1583:	12 06                	adc    al,BYTE PTR [esi]
    1585:	40                   	inc    eax
    1586:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    158c:	00 00                	add    BYTE PTR [eax],al
    158e:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1594:	0b 3b                	or     edi,DWORD PTR [ebx]
    1596:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1599:	02 18                	add    bl,BYTE PTR [eax]
    159b:	00 00                	add    BYTE PTR [eax],al
    159d:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    15a3:	0b 3b                	or     edi,DWORD PTR [ebx]
    15a5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15a8:	02 18                	add    bl,BYTE PTR [eax]
    15aa:	00 00                	add    BYTE PTR [eax],al
    15ac:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    15af:	03 0e                	add    ecx,DWORD PTR [esi]
    15b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15b5:	49                   	dec    ecx
    15b6:	13 02                	adc    eax,DWORD PTR [edx]
    15b8:	18 00                	sbb    BYTE PTR [eax],al
    15ba:	00 0b                	add    BYTE PTR [ebx],cl
    15bc:	34 00                	xor    al,0x0
    15be:	03 08                	add    ecx,DWORD PTR [eax]
    15c0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15c2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15c4:	49                   	dec    ecx
    15c5:	13 02                	adc    eax,DWORD PTR [edx]
    15c7:	18 00                	sbb    BYTE PTR [eax],al
    15c9:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
    15cc:	01 3f                	add    DWORD PTR [edi],edi
    15ce:	19 03                	sbb    DWORD PTR [ebx],eax
    15d0:	0e                   	push   cs
    15d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15d5:	27                   	daa    
    15d6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15d9:	11 01                	adc    DWORD PTR [ecx],eax
    15db:	12 06                	adc    al,BYTE PTR [esi]
    15dd:	40                   	inc    eax
    15de:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    15e4:	00 00                	add    BYTE PTR [eax],al
    15e6:	0d 34 00 03 0e       	or     eax,0xe030034
    15eb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15ed:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15ef:	49                   	dec    ecx
    15f0:	13 3f                	adc    edi,DWORD PTR [edi]
    15f2:	19 02                	sbb    DWORD PTR [edx],eax
    15f4:	18 00                	sbb    BYTE PTR [eax],al
    15f6:	00 00                	add    BYTE PTR [eax],al
    15f8:	01 11                	add    DWORD PTR [ecx],edx
    15fa:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1600:	0e                   	push   cs
    1601:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1603:	11 01                	adc    DWORD PTR [ecx],eax
    1605:	12 06                	adc    al,BYTE PTR [esi]
    1607:	10 17                	adc    BYTE PTR [edi],dl
    1609:	00 00                	add    BYTE PTR [eax],al
    160b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    160e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1610:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1613:	0e                   	push   cs
    1614:	00 00                	add    BYTE PTR [eax],al
    1616:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1619:	0b 0b                	or     ecx,DWORD PTR [ebx]
    161b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    161e:	08 00                	or     BYTE PTR [eax],al
    1620:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1623:	00 03                	add    BYTE PTR [ebx],al
    1625:	0e                   	push   cs
    1626:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1628:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    162a:	49                   	dec    ecx
    162b:	13 00                	adc    eax,DWORD PTR [eax]
    162d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1633:	49                   	dec    ecx
    1634:	13 00                	adc    eax,DWORD PTR [eax]
    1636:	00 06                	add    BYTE PTR [esi],al
    1638:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	07                   	pop    es
    163f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1642:	19 03                	sbb    DWORD PTR [ebx],eax
    1644:	0e                   	push   cs
    1645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1649:	27                   	daa    
    164a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    164d:	11 01                	adc    DWORD PTR [ecx],eax
    164f:	12 06                	adc    al,BYTE PTR [esi]
    1651:	40                   	inc    eax
    1652:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1658:	00 00                	add    BYTE PTR [eax],al
    165a:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1660:	0b 3b                	or     edi,DWORD PTR [ebx]
    1662:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1665:	02 18                	add    bl,BYTE PTR [eax]
    1667:	00 00                	add    BYTE PTR [eax],al
    1669:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    166c:	03 08                	add    ecx,DWORD PTR [eax]
    166e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1670:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1672:	49                   	dec    ecx
    1673:	13 02                	adc    eax,DWORD PTR [edx]
    1675:	18 00                	sbb    BYTE PTR [eax],al
    1677:	00 0a                	add    BYTE PTR [edx],cl
    1679:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    167c:	19 03                	sbb    DWORD PTR [ebx],eax
    167e:	0e                   	push   cs
    167f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1681:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1683:	27                   	daa    
    1684:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1687:	11 01                	adc    DWORD PTR [ecx],eax
    1689:	12 06                	adc    al,BYTE PTR [esi]
    168b:	40                   	inc    eax
    168c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1692:	00 00                	add    BYTE PTR [eax],al
    1694:	0b 01                	or     eax,DWORD PTR [ecx]
    1696:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    1699:	01 13                	add    DWORD PTR [ebx],edx
    169b:	00 00                	add    BYTE PTR [eax],al
    169d:	0c 21                	or     al,0x21
    169f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    16a2:	2f                   	das    
    16a3:	0b 00                	or     eax,DWORD PTR [eax]
    16a5:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    16ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16af:	49                   	dec    ecx
    16b0:	13 02                	adc    eax,DWORD PTR [edx]
    16b2:	18 00                	sbb    BYTE PTR [eax],al
    16b4:	00 0e                	add    BYTE PTR [esi],cl
    16b6:	34 00                	xor    al,0x0
    16b8:	03 0e                	add    ecx,DWORD PTR [esi]
    16ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16be:	49                   	dec    ecx
    16bf:	13 3f                	adc    edi,DWORD PTR [edi]
    16c1:	19 02                	sbb    DWORD PTR [edx],eax
    16c3:	18 00                	sbb    BYTE PTR [eax],al
    16c5:	00 00                	add    BYTE PTR [eax],al
    16c7:	01 11                	add    DWORD PTR [ecx],edx
    16c9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    16cf:	0e                   	push   cs
    16d0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16d2:	11 01                	adc    DWORD PTR [ecx],eax
    16d4:	12 06                	adc    al,BYTE PTR [esi]
    16d6:	10 17                	adc    BYTE PTR [edi],dl
    16d8:	00 00                	add    BYTE PTR [eax],al
    16da:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16dd:	03 0e                	add    ecx,DWORD PTR [esi]
    16df:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16e1:	49                   	dec    ecx
    16e2:	13 3a                	adc    edi,DWORD PTR [edx]
    16e4:	0b 3b                	or     edi,DWORD PTR [ebx]
    16e6:	0b 01                	or     eax,DWORD PTR [ecx]
    16e8:	13 00                	adc    eax,DWORD PTR [eax]
    16ea:	00 03                	add    BYTE PTR [ebx],al
    16ec:	28 00                	sub    BYTE PTR [eax],al
    16ee:	03 0e                	add    ecx,DWORD PTR [esi]
    16f0:	1c 0b                	sbb    al,0xb
    16f2:	00 00                	add    BYTE PTR [eax],al
    16f4:	04 28                	add    al,0x28
    16f6:	00 03                	add    BYTE PTR [ebx],al
    16f8:	0e                   	push   cs
    16f9:	1c 05                	sbb    al,0x5
    16fb:	00 00                	add    BYTE PTR [eax],al
    16fd:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1702:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1705:	0e                   	push   cs
    1706:	00 00                	add    BYTE PTR [eax],al
    1708:	06                   	push   es
    1709:	24 00                	and    al,0x0
    170b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    170d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1710:	08 00                	or     BYTE PTR [eax],al
    1712:	00 07                	add    BYTE PTR [edi],al
    1714:	16                   	push   ss
    1715:	00 03                	add    BYTE PTR [ebx],al
    1717:	0e                   	push   cs
    1718:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    171a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    171c:	49                   	dec    ecx
    171d:	13 00                	adc    eax,DWORD PTR [eax]
    171f:	00 08                	add    BYTE PTR [eax],cl
    1721:	13 01                	adc    eax,DWORD PTR [ecx]
    1723:	03 08                	add    ecx,DWORD PTR [eax]
    1725:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1727:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1729:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    172b:	01 13                	add    DWORD PTR [ebx],edx
    172d:	00 00                	add    BYTE PTR [eax],al
    172f:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1735:	0b 3b                	or     edi,DWORD PTR [ebx]
    1737:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    173a:	38 0b                	cmp    BYTE PTR [ebx],cl
    173c:	00 00                	add    BYTE PTR [eax],al
    173e:	0a 0f                	or     cl,BYTE PTR [edi]
    1740:	00 0b                	add    BYTE PTR [ebx],cl
    1742:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1745:	00 00                	add    BYTE PTR [eax],al
    1747:	0b 26                	or     esp,DWORD PTR [esi]
    1749:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    174c:	00 00                	add    BYTE PTR [eax],al
    174e:	0c 2e                	or     al,0x2e
    1750:	01 3f                	add    DWORD PTR [edi],edi
    1752:	19 03                	sbb    DWORD PTR [ebx],eax
    1754:	0e                   	push   cs
    1755:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1757:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1759:	49                   	dec    ecx
    175a:	13 11                	adc    edx,DWORD PTR [ecx]
    175c:	01 12                	add    DWORD PTR [edx],edx
    175e:	06                   	push   es
    175f:	40                   	inc    eax
    1760:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1766:	00 00                	add    BYTE PTR [eax],al
    1768:	0d 34 00 03 0e       	or     eax,0xe030034
    176d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    176f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1771:	49                   	dec    ecx
    1772:	13 02                	adc    eax,DWORD PTR [edx]
    1774:	18 00                	sbb    BYTE PTR [eax],al
    1776:	00 0e                	add    BYTE PTR [esi],cl
    1778:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    177b:	19 03                	sbb    DWORD PTR [ebx],eax
    177d:	0e                   	push   cs
    177e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1780:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1782:	27                   	daa    
    1783:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1786:	11 01                	adc    DWORD PTR [ecx],eax
    1788:	12 06                	adc    al,BYTE PTR [esi]
    178a:	40                   	inc    eax
    178b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1791:	00 00                	add    BYTE PTR [eax],al
    1793:	0f 05                	syscall 
    1795:	00 03                	add    BYTE PTR [ebx],al
    1797:	0e                   	push   cs
    1798:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    179a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    179c:	49                   	dec    ecx
    179d:	13 02                	adc    eax,DWORD PTR [edx]
    179f:	18 00                	sbb    BYTE PTR [eax],al
    17a1:	00 10                	add    BYTE PTR [eax],dl
    17a3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    17a6:	19 03                	sbb    DWORD PTR [ebx],eax
    17a8:	0e                   	push   cs
    17a9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17ab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17ad:	27                   	daa    
    17ae:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    17b1:	11 01                	adc    DWORD PTR [ecx],eax
    17b3:	12 06                	adc    al,BYTE PTR [esi]
    17b5:	40                   	inc    eax
    17b6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    17bc:	00 00                	add    BYTE PTR [eax],al
    17be:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    17c1:	03 08                	add    ecx,DWORD PTR [eax]
    17c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17c7:	49                   	dec    ecx
    17c8:	13 02                	adc    eax,DWORD PTR [edx]
    17ca:	18 00                	sbb    BYTE PTR [eax],al
    17cc:	00 12                	add    BYTE PTR [edx],dl
    17ce:	34 00                	xor    al,0x0
    17d0:	03 0e                	add    ecx,DWORD PTR [esi]
    17d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17d6:	49                   	dec    ecx
    17d7:	13 3f                	adc    edi,DWORD PTR [edi]
    17d9:	19 02                	sbb    DWORD PTR [edx],eax
    17db:	18 00                	sbb    BYTE PTR [eax],al
    17dd:	00 13                	add    BYTE PTR [ebx],dl
    17df:	01 01                	add    DWORD PTR [ecx],eax
    17e1:	49                   	dec    ecx
    17e2:	13 01                	adc    eax,DWORD PTR [ecx]
    17e4:	13 00                	adc    eax,DWORD PTR [eax]
    17e6:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    17e9:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    17ec:	2f                   	das    
    17ed:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 9f 49 02 00 00    	add    BYTE PTR [edi+0x249],bl
	...
  80:	1c 00                	sbb    al,0x0
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	9f                   	lahf   
  94:	6e                   	outs   dx,BYTE PTR ds:[esi]
  95:	01 00                	add    DWORD PTR [eax],eax
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	2a 08                	sub    cl,BYTE PTR [eax]
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	70 05                	jo     b7 <sysEnter_Vector-0x12ff49>
  b2:	00 9f 6b 02 00 00    	add    BYTE PTR [edi+0x26b],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	e0 09                	loopne d1 <sysEnter_Vector-0x12ff2f>
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	dc 07                	fadd   QWORD PTR [edi]
  d2:	00 9f 56 01 00 00    	add    BYTE PTR [edi+0x156],bl
	...
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	c9                   	leave  
  e7:	0d 00 00 04 00       	or     eax,0x40000
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	34 09                	xor    al,0x9
  f2:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	8e 10                	mov    ss,WORD PTR [eax]
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	9c                   	pushf  
 111:	0a 00                	or     al,BYTE PTR [eax]
 113:	9f                   	lahf   
 114:	e9 0b 00 00 00       	jmp    124 <sysEnter_Vector-0x12fedc>
 119:	00 00                	add    BYTE PTR [eax],al
 11b:	00 00                	add    BYTE PTR [eax],al
 11d:	00 00                	add    BYTE PTR [eax],al
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	d4 1a                	aam    0x1a
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	88 16                	mov    BYTE PTR [esi],dl
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	8b 1d 00 00 04 00    	mov    ebx,DWORD PTR ds:0x40000
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	fc                   	cld    
 151:	16                   	push   ss
 152:	00 9f 33 04 00 00    	add    BYTE PTR [edi+0x433],bl
	...
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	9a 21 00 00 04 00 00 	call   0x0:0x4000021
 16d:	00 00                	add    BYTE PTR [eax],al
 16f:	00 30                	add    BYTE PTR [eax],dh
 171:	1b 00                	sbb    eax,DWORD PTR [eax]
 173:	9f                   	lahf   
 174:	bb 01 00 00 00       	mov    ebx,0x1
 179:	00 00                	add    BYTE PTR [eax],al
 17b:	00 00                	add    BYTE PTR [eax],al
 17d:	00 00                	add    BYTE PTR [eax],al
 17f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	ca 23 00             	retf   0x23
 189:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	ec                   	in     al,dx
 191:	1c 00                	sbb    al,0x0
 193:	9f                   	lahf   
 194:	e7 00                	out    0x0,eax
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	b9 25 00 00 04       	mov    ecx,0x4000025
 1ab:	00 00                	add    BYTE PTR [eax],al
 1ad:	00 00                	add    BYTE PTR [eax],al
 1af:	00 d4                	add    ah,dl
 1b1:	1d 00 9f 29 00       	sbb    eax,0x299f00
	...
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	b4 27                	mov    ah,0x27
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	00 1e                	add    BYTE PTR [esi],bl
 1d2:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	75 2b                	jne    213 <sysEnter_Vector-0x12fded>
 1e8:	00 00                	add    BYTE PTR [eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	18 25 00 9f 84 00    	sbb    BYTE PTR ds:0x849f00,ah
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	ab                   	stos   DWORD PTR es:[edi],eax
 207:	2c 00                	sub    al,0x0
 209:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	9c                   	pushf  
 211:	25 00 9f eb 00       	and    eax,0xeb9f00
	...
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	5c                   	pop    esp
 227:	2e 00 00             	add    BYTE PTR cs:[eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	88 26                	mov    BYTE PTR [esi],ah
 232:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
	...
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	cc                   	int3   
 247:	2f                   	das    
 248:	00 00                	add    BYTE PTR [eax],al
 24a:	04 00                	add    al,0x0
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	e8 26 00 9f c7       	call   c79f027b <tmbuf+0x289ea19b>
	...
 25d:	00 00                	add    BYTE PTR [eax],al
 25f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	99                   	cdq    
 267:	31 00                	xor    DWORD PTR [eax],eax
 269:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	b0 27                	mov    al,0x27
 272:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
	...
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	e9 32 00 00 04       	jmp    40002bd <sysEnter_Vector+0x3ed02bd>
 28b:	00 00                	add    BYTE PTR [eax],al
 28d:	00 00                	add    BYTE PTR [eax],al
 28f:	00 3c 28             	add    BYTE PTR [eax+ebp*1],bh
 292:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
	...
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	cb                   	retf   
 2a7:	34 00                	xor    al,0x0
 2a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	e0 28                	loopne 2da <sysEnter_Vector-0x12fd26>
 2b2:	00 9f ce 00 00 00    	add    BYTE PTR [edi+0xce],bl
	...
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	ad                   	lods   eax,DWORD PTR ds:[esi]
 2c7:	35 00 00 04 00       	xor    eax,0x40000
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	b0 29                	mov    al,0x29
 2d2:	00 9f 80 00 00 00    	add    BYTE PTR [edi+0x80],bl
	...
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	a1 36 00 00 04       	mov    eax,ds:0x4000036
 2eb:	00 00                	add    BYTE PTR [eax],al
 2ed:	00 00                	add    BYTE PTR [eax],al
 2ef:	00 30                	add    BYTE PTR [eax],dh
 2f1:	2a 00                	sub    al,BYTE PTR [eax]
 2f3:	9f                   	lahf   
 2f4:	7d 01                	jge    2f7 <sysEnter_Vector-0x12fd09>
	...
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	37                   	aaa    
 307:	38 00                	cmp    BYTE PTR [eax],al
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	b0 2b                	mov    al,0x2b
 312:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
 327:	38 00                	cmp    BYTE PTR [eax],al
 329:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	d0 2b                	shr    BYTE PTR [ebx],1
 332:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
	...
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	3b 3a                	cmp    edi,DWORD PTR [edx]
 348:	00 00                	add    BYTE PTR [eax],al
 34a:	04 00                	add    al,0x0
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	6c                   	ins    BYTE PTR es:[edi],dx
 351:	2d 00 9f b6 00       	sub    eax,0xb69f00
	...
 35e:	00 00                	add    BYTE PTR [eax],al
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	a1 3b 00 00 04       	mov    eax,ds:0x400003b
 36b:	00 00                	add    BYTE PTR [eax],al
 36d:	00 00                	add    BYTE PTR [eax],al
 36f:	00 24 2e             	add    BYTE PTR [esi+ebp*1],ah
 372:	00 9f 69 01 00 00    	add    BYTE PTR [edi+0x169],bl
	...
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	67 3d 00 00 04 00    	addr16 cmp eax,0x40000
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	90                   	nop
 391:	2f                   	das    
 392:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	71 3f                	jno    3e7 <sysEnter_Vector-0x12fc19>
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	bc 30 00 9f 17       	mov    esp,0x179f0030
 3b5:	0d 00 00 00 00       	or     eax,0x0
 3ba:	00 00                	add    BYTE PTR [eax],al
 3bc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	9f                   	lahf   
      c1:	1a c9                	sbb    cl,cl
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	9f                   	lahf   
     196:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	9f                   	lahf   
     29c:	03 28                	add    ebp,DWORD PTR [eax]
     29e:	01 f6                	add    esi,esi
     2a0:	67 92                	addr16 xchg edx,eax
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	9f                   	lahf   
     357:	03 09                	add    ecx,DWORD PTR [ecx]
     359:	01 08                	add    DWORD PTR [eax],ecx
     35b:	16                   	push   ss
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	ce                   	into   
     3c8:	00 00                	add    BYTE PTR [eax],al
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 95 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],dl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     42f:	73 6f                	jae    4a0 <sysEnter_Vector-0x12fb60>
     431:	6c                   	ins    BYTE PTR es:[edi],dx
     432:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     436:	01 00                	add    DWORD PTR [eax],eax
     438:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43b:	6c                   	ins    BYTE PTR es:[edi],dx
     43c:	6c                   	ins    BYTE PTR es:[edi],dx
     43d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     43e:	63 2e                	arpl   WORD PTR [esi],bp
     440:	68 00 02 00 00       	push   0x200
     445:	6c                   	ins    BYTE PTR es:[edi],dx
     446:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     44d:	4f                   	dec    edi
     44e:	53                   	push   ebx
     44f:	2e                   	cs
     450:	68 00 02 00 00       	push   0x200
     455:	73 74                	jae    4cb <sysEnter_Vector-0x12fb35>
     457:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     45e:	63 
     45f:	2e                   	cs
     460:	68 00 03 00 00       	push   0x300
     465:	00 00                	add    BYTE PTR [eax],al
     467:	05 02 00 04 00       	add    eax,0x40002
     46c:	9f                   	lahf   
     46d:	03 0d 01 08 24 08    	add    ecx,DWORD PTR ds:0x8240801
     473:	59                   	pop    ecx
     474:	08 21                	or     BYTE PTR [ecx],ah
     476:	08 2f                	or     BYTE PTR [edi],ch
     478:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     47b:	21 08                	and    DWORD PTR [eax],ecx
     47d:	2f                   	das    
     47e:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     481:	59                   	pop    ecx
     482:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     488:	5a                   	pop    edx
     489:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     48c:	08 23                	or     BYTE PTR [ebx],ah
     48e:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     491:	5a                   	pop    edx
     492:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     495:	06                   	push   es
     496:	00 01                	add    BYTE PTR [ecx],al
     498:	01 06                	add    DWORD PTR [esi],eax
     49a:	01 00                	add    DWORD PTR [eax],eax
     49c:	00 02                	add    BYTE PTR [edx],al
     49e:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     4a4:	01 fb                	add    ebx,edi
     4a6:	0e                   	push   cs
     4a7:	0d 00 01 01 01       	or     eax,0x1010100
     4ac:	01 00                	add    DWORD PTR [eax],eax
     4ae:	00 00                	add    BYTE PTR [eax],al
     4b0:	01 00                	add    DWORD PTR [eax],eax
     4b2:	00 01                	add    BYTE PTR [ecx],al
     4b4:	73 72                	jae    528 <sysEnter_Vector-0x12fad8>
     4b6:	63 00                	arpl   WORD PTR [eax],ax
     4b8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4bf:	00 2f                	add    BYTE PTR [edi],ch
     4c1:	68 6f 6d 65 2f       	push   0x2f656d6f
     4c6:	79 6f                	jns    537 <sysEnter_Vector-0x12fac9>
     4c8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     4cf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     4d2:	73 73                	jae    547 <sysEnter_Vector-0x12fab9>
     4d4:	2f                   	das    
     4d5:	6c                   	ins    BYTE PTR es:[edi],dx
     4d6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     4dd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     4e3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     4e9:	78 2d                	js     518 <sysEnter_Vector-0x12fae8>
     4eb:	67 6e                	outs   dx,BYTE PTR ds:[si]
     4ed:	75 2f                	jne    51e <sysEnter_Vector-0x12fae2>
     4ef:	35 2e 33 2e 30       	xor    eax,0x302e332e
     4f4:	2f                   	das    
     4f5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4fc:	00 00                	add    BYTE PTR [eax],al
     4fe:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     500:	76 69                	jbe    56b <sysEnter_Vector-0x12fa95>
     502:	72 6f                	jb     573 <sysEnter_Vector-0x12fa8d>
     504:	6e                   	outs   dx,BYTE PTR ds:[esi]
     505:	6d                   	ins    DWORD PTR es:[edi],dx
     506:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     508:	74 2e                	je     538 <sysEnter_Vector-0x12fac8>
     50a:	63 00                	arpl   WORD PTR [eax],ax
     50c:	01 00                	add    DWORD PTR [eax],eax
     50e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     511:	6c                   	ins    BYTE PTR es:[edi],dx
     512:	6c                   	ins    BYTE PTR es:[edi],dx
     513:	6f                   	outs   dx,DWORD PTR ds:[esi]
     514:	63 2e                	arpl   WORD PTR [esi],bp
     516:	68 00 02 00 00       	push   0x200
     51b:	6c                   	ins    BYTE PTR es:[edi],dx
     51c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     523:	4f                   	dec    edi
     524:	53                   	push   ebx
     525:	2e                   	cs
     526:	68 00 02 00 00       	push   0x200
     52b:	73 74                	jae    5a1 <sysEnter_Vector-0x12fa5f>
     52d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     534:	63 
     535:	2e                   	cs
     536:	68 00 03 00 00       	push   0x300
     53b:	00 00                	add    BYTE PTR [eax],al
     53d:	05 02 70 05 00       	add    eax,0x57002
     542:	9f                   	lahf   
     543:	03 09                	add    ecx,DWORD PTR [ecx]
     545:	01 08                	add    DWORD PTR [eax],ecx
     547:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     54d:	39 13                	cmp    DWORD PTR [ebx],edx
     54f:	00 02                	add    BYTE PTR [edx],al
     551:	04 02                	add    al,0x2
     553:	7e 00                	jle    555 <sysEnter_Vector-0x12faab>
     555:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     558:	06                   	push   es
     559:	4a                   	dec    edx
     55a:	06                   	push   es
     55b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     55c:	59                   	pop    ecx
     55d:	5b                   	pop    ebx
     55e:	08 21                	or     BYTE PTR [ecx],ah
     560:	76 bb                	jbe    51d <sysEnter_Vector-0x12fae3>
     562:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     568:	14 08                	adc    al,0x8
     56a:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     571:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     574:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     577:	00 02                	add    BYTE PTR [edx],al
     579:	04 01                	add    al,0x1
     57b:	06                   	push   es
     57c:	4a                   	dec    edx
     57d:	06                   	push   es
     57e:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     581:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     586:	08 f3                	or     bl,dh
     588:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     58e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     591:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     594:	00 02                	add    BYTE PTR [edx],al
     596:	04 01                	add    al,0x1
     598:	06                   	push   es
     599:	4a                   	dec    edx
     59a:	06                   	push   es
     59b:	03 0b                	add    ecx,DWORD PTR [ebx]
     59d:	9e                   	sahf   
     59e:	02 05 00 01 01 03    	add    al,BYTE PTR ds:0x3010100
     5a4:	01 00                	add    DWORD PTR [eax],eax
     5a6:	00 02                	add    BYTE PTR [edx],al
     5a8:	00 cd                	add    ch,cl
     5aa:	00 00                	add    BYTE PTR [eax],al
     5ac:	00 01                	add    BYTE PTR [ecx],al
     5ae:	01 fb                	add    ebx,edi
     5b0:	0e                   	push   cs
     5b1:	0d 00 01 01 01       	or     eax,0x1010100
     5b6:	01 00                	add    DWORD PTR [eax],eax
     5b8:	00 00                	add    BYTE PTR [eax],al
     5ba:	01 00                	add    DWORD PTR [eax],eax
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	73 72                	jae    632 <sysEnter_Vector-0x12f9ce>
     5c0:	63 00                	arpl   WORD PTR [eax],ax
     5c2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     5c9:	00 2f                	add    BYTE PTR [edi],ch
     5cb:	68 6f 6d 65 2f       	push   0x2f656d6f
     5d0:	79 6f                	jns    641 <sysEnter_Vector-0x12f9bf>
     5d2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     5d9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     5dc:	73 73                	jae    651 <sysEnter_Vector-0x12f9af>
     5de:	2f                   	das    
     5df:	6c                   	ins    BYTE PTR es:[edi],dx
     5e0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     5e7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     5ed:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     5f3:	78 2d                	js     622 <sysEnter_Vector-0x12f9de>
     5f5:	67 6e                	outs   dx,BYTE PTR ds:[si]
     5f7:	75 2f                	jne    628 <sysEnter_Vector-0x12f9d8>
     5f9:	35 2e 33 2e 30       	xor    eax,0x302e332e
     5fe:	2f                   	das    
     5ff:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     606:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     609:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     60d:	65                   	gs
     60e:	2f                   	das    
     60f:	2e                   	cs
     610:	2e                   	cs
     611:	2f                   	das    
     612:	2e                   	cs
     613:	2e                   	cs
     614:	2f                   	das    
     615:	2e                   	cs
     616:	2e                   	cs
     617:	2f                   	das    
     618:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     61c:	6a 2f                	push   0x2f
     61e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     621:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     628:	6e                   	outs   dx,BYTE PTR ds:[esi]
     629:	65                   	gs
     62a:	6c                   	ins    BYTE PTR es:[edi],dx
     62b:	2f                   	das    
     62c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     633:	00 00                	add    BYTE PTR [eax],al
     635:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     63c:	01 00                	add    DWORD PTR [eax],eax
     63e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     641:	6c                   	ins    BYTE PTR es:[edi],dx
     642:	6c                   	ins    BYTE PTR es:[edi],dx
     643:	6f                   	outs   dx,DWORD PTR ds:[esi]
     644:	63 2e                	arpl   WORD PTR [esi],bp
     646:	68 00 02 00 00       	push   0x200
     64b:	6c                   	ins    BYTE PTR es:[edi],dx
     64c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     653:	4f                   	dec    edi
     654:	53                   	push   ebx
     655:	2e                   	cs
     656:	68 00 02 00 00       	push   0x200
     65b:	73 74                	jae    6d1 <sysEnter_Vector-0x12f92f>
     65d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     664:	63 
     665:	2e                   	cs
     666:	68 00 03 00 00       	push   0x300
     66b:	73 79                	jae    6e6 <sysEnter_Vector-0x12f91a>
     66d:	73 63                	jae    6d2 <sysEnter_Vector-0x12f92e>
     66f:	61                   	popa   
     670:	6c                   	ins    BYTE PTR es:[edi],dx
     671:	6c                   	ins    BYTE PTR es:[edi],dx
     672:	73 2e                	jae    6a2 <sysEnter_Vector-0x12f95e>
     674:	68 00 04 00 00       	push   0x400
     679:	00 00                	add    BYTE PTR [eax],al
     67b:	05 02 dc 07 00       	add    eax,0x7dc02
     680:	9f                   	lahf   
     681:	03 0a                	add    ecx,DWORD PTR [edx]
     683:	01 08                	add    DWORD PTR [eax],ecx
     685:	13 08                	adc    ecx,DWORD PTR [eax]
     687:	9f                   	lahf   
     688:	5b                   	pop    ebx
     689:	08 13                	or     BYTE PTR [ebx],dl
     68b:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     68e:	08 13                	or     BYTE PTR [ebx],dl
     690:	08 2f                	or     BYTE PTR [edi],ch
     692:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     698:	08 d7                	or     bh,dl
     69a:	77 f3                	ja     68f <sysEnter_Vector-0x12f971>
     69c:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     6a2:	75 5b                	jne    6ff <sysEnter_Vector-0x12f901>
     6a4:	ca 02 03             	retf   0x302
     6a7:	00 01                	add    BYTE PTR [ecx],al
     6a9:	01 29                	add    DWORD PTR [ecx],ebp
     6ab:	01 00                	add    DWORD PTR [eax],eax
     6ad:	00 02                	add    BYTE PTR [edx],al
     6af:	00 d4                	add    ah,dl
     6b1:	00 00                	add    BYTE PTR [eax],al
     6b3:	00 01                	add    BYTE PTR [ecx],al
     6b5:	01 fb                	add    ebx,edi
     6b7:	0e                   	push   cs
     6b8:	0d 00 01 01 01       	or     eax,0x1010100
     6bd:	01 00                	add    DWORD PTR [eax],eax
     6bf:	00 00                	add    BYTE PTR [eax],al
     6c1:	01 00                	add    DWORD PTR [eax],eax
     6c3:	00 01                	add    BYTE PTR [ecx],al
     6c5:	73 72                	jae    739 <sysEnter_Vector-0x12f8c7>
     6c7:	63 2f                	arpl   WORD PTR [edi],bp
     6c9:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     6d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6d1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6d5:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     6d8:	68 6f 6d 65 2f       	push   0x2f656d6f
     6dd:	79 6f                	jns    74e <sysEnter_Vector-0x12f8b2>
     6df:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     6e6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     6e9:	73 73                	jae    75e <sysEnter_Vector-0x12f8a2>
     6eb:	2f                   	das    
     6ec:	6c                   	ins    BYTE PTR es:[edi],dx
     6ed:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     6f4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     6fa:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     700:	78 2d                	js     72f <sysEnter_Vector-0x12f8d1>
     702:	67 6e                	outs   dx,BYTE PTR ds:[si]
     704:	75 2f                	jne    735 <sysEnter_Vector-0x12f8cb>
     706:	35 2e 33 2e 30       	xor    eax,0x302e332e
     70b:	2f                   	das    
     70c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     713:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     716:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     71a:	65                   	gs
     71b:	2f                   	das    
     71c:	2e                   	cs
     71d:	2e                   	cs
     71e:	2f                   	das    
     71f:	2e                   	cs
     720:	2e                   	cs
     721:	2f                   	das    
     722:	2e                   	cs
     723:	2e                   	cs
     724:	2f                   	das    
     725:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     729:	6a 2f                	push   0x2f
     72b:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     72e:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     735:	6e                   	outs   dx,BYTE PTR ds:[esi]
     736:	65                   	gs
     737:	6c                   	ins    BYTE PTR es:[edi],dx
     738:	2f                   	das    
     739:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     740:	00 00                	add    BYTE PTR [eax],al
     742:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     749:	00 01                	add    BYTE PTR [ecx],al
     74b:	00 00                	add    BYTE PTR [eax],al
     74d:	6d                   	ins    DWORD PTR es:[edi],dx
     74e:	61                   	popa   
     74f:	6c                   	ins    BYTE PTR es:[edi],dx
     750:	6c                   	ins    BYTE PTR es:[edi],dx
     751:	6f                   	outs   dx,DWORD PTR ds:[esi]
     752:	63 2e                	arpl   WORD PTR [esi],bp
     754:	68 00 02 00 00       	push   0x200
     759:	6c                   	ins    BYTE PTR es:[edi],dx
     75a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     761:	4f                   	dec    edi
     762:	53                   	push   ebx
     763:	2e                   	cs
     764:	68 00 02 00 00       	push   0x200
     769:	73 74                	jae    7df <sysEnter_Vector-0x12f821>
     76b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     772:	63 
     773:	2e                   	cs
     774:	68 00 03 00 00       	push   0x300
     779:	73 79                	jae    7f4 <sysEnter_Vector-0x12f80c>
     77b:	73 63                	jae    7e0 <sysEnter_Vector-0x12f820>
     77d:	61                   	popa   
     77e:	6c                   	ins    BYTE PTR es:[edi],dx
     77f:	6c                   	ins    BYTE PTR es:[edi],dx
     780:	73 2e                	jae    7b0 <sysEnter_Vector-0x12f850>
     782:	68 00 04 00 00       	push   0x400
     787:	00 00                	add    BYTE PTR [eax],al
     789:	05 02 34 09 00       	add    eax,0x93402
     78e:	9f                   	lahf   
     78f:	03 0f                	add    ecx,DWORD PTR [edi]
     791:	01 d7                	add    edi,edx
     793:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     799:	75 4b                	jne    7e6 <sysEnter_Vector-0x12f81a>
     79b:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     7a1:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     7a6:	6a 08                	push   0x8
     7a8:	14 75                	adc    al,0x75
     7aa:	84 68 00             	test   BYTE PTR [eax+0x0],ch
     7ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     7b0:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     7b3:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     7b9:	06                   	push   es
     7ba:	66 06                	pushw  es
     7bc:	68 ad 68 68 76       	push   0x766868ad
     7c1:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     7c4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     7c7:	06                   	push   es
     7c8:	ac                   	lods   al,BYTE PTR ds:[esi]
     7c9:	06                   	push   es
     7ca:	68 5b 00 02 04       	push   0x402005b
     7cf:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     7d5:	01 01                	add    DWORD PTR [ecx],eax
     7d7:	97                   	xchg   edi,eax
     7d8:	02 00                	add    al,BYTE PTR [eax]
     7da:	00 02                	add    BYTE PTR [edx],al
     7dc:	00 eb                	add    bl,ch
     7de:	00 00                	add    BYTE PTR [eax],al
     7e0:	00 01                	add    BYTE PTR [ecx],al
     7e2:	01 fb                	add    ebx,edi
     7e4:	0e                   	push   cs
     7e5:	0d 00 01 01 01       	or     eax,0x1010100
     7ea:	01 00                	add    DWORD PTR [eax],eax
     7ec:	00 00                	add    BYTE PTR [eax],al
     7ee:	01 00                	add    DWORD PTR [eax],eax
     7f0:	00 01                	add    BYTE PTR [ecx],al
     7f2:	73 72                	jae    866 <sysEnter_Vector-0x12f79a>
     7f4:	63 00                	arpl   WORD PTR [eax],ax
     7f6:	2f                   	das    
     7f7:	68 6f 6d 65 2f       	push   0x2f656d6f
     7fc:	79 6f                	jns    86d <sysEnter_Vector-0x12f793>
     7fe:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     805:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     808:	73 73                	jae    87d <sysEnter_Vector-0x12f783>
     80a:	2f                   	das    
     80b:	6c                   	ins    BYTE PTR es:[edi],dx
     80c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     813:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     819:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     81f:	78 2d                	js     84e <sysEnter_Vector-0x12f7b2>
     821:	67 6e                	outs   dx,BYTE PTR ds:[si]
     823:	75 2f                	jne    854 <sysEnter_Vector-0x12f7ac>
     825:	35 2e 33 2e 30       	xor    eax,0x302e332e
     82a:	2f                   	das    
     82b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     832:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     835:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     839:	65                   	gs
     83a:	2f                   	das    
     83b:	2e                   	cs
     83c:	2e                   	cs
     83d:	2f                   	das    
     83e:	2e                   	cs
     83f:	2e                   	cs
     840:	2f                   	das    
     841:	2e                   	cs
     842:	2e                   	cs
     843:	2f                   	das    
     844:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     848:	6a 2f                	push   0x2f
     84a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     84d:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     854:	6e                   	outs   dx,BYTE PTR ds:[esi]
     855:	65                   	gs
     856:	6c                   	ins    BYTE PTR es:[edi],dx
     857:	2f                   	das    
     858:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     85f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     862:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     866:	65 00 00             	add    BYTE PTR gs:[eax],al
     869:	6c                   	ins    BYTE PTR es:[edi],dx
     86a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     871:	4f                   	dec    edi
     872:	53                   	push   ebx
     873:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     876:	01 00                	add    DWORD PTR [eax],eax
     878:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     87b:	64                   	fs
     87c:	61                   	popa   
     87d:	72 67                	jb     8e6 <sysEnter_Vector-0x12f71a>
     87f:	2e                   	cs
     880:	68 00 02 00 00       	push   0x200
     885:	73 74                	jae    8fb <sysEnter_Vector-0x12f705>
     887:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     88e:	63 
     88f:	2e                   	cs
     890:	68 00 02 00 00       	push   0x200
     895:	73 74                	jae    90b <sysEnter_Vector-0x12f6f5>
     897:	64                   	fs
     898:	64                   	fs
     899:	65                   	gs
     89a:	66                   	data16
     89b:	2e                   	cs
     89c:	68 00 02 00 00       	push   0x200
     8a1:	73 79                	jae    91c <sysEnter_Vector-0x12f6e4>
     8a3:	73 63                	jae    908 <sysEnter_Vector-0x12f6f8>
     8a5:	61                   	popa   
     8a6:	6c                   	ins    BYTE PTR es:[edi],dx
     8a7:	6c                   	ins    BYTE PTR es:[edi],dx
     8a8:	73 2e                	jae    8d8 <sysEnter_Vector-0x12f728>
     8aa:	68 00 03 00 00       	push   0x300
     8af:	6d                   	ins    DWORD PTR es:[edi],dx
     8b0:	61                   	popa   
     8b1:	6c                   	ins    BYTE PTR es:[edi],dx
     8b2:	6c                   	ins    BYTE PTR es:[edi],dx
     8b3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8b4:	63 2e                	arpl   WORD PTR [esi],bp
     8b6:	68 00 04 00 00       	push   0x400
     8bb:	6c                   	ins    BYTE PTR es:[edi],dx
     8bc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     8c3:	4f                   	dec    edi
     8c4:	53                   	push   ebx
     8c5:	2e                   	cs
     8c6:	68 00 04 00 00       	push   0x400
     8cb:	00 00                	add    BYTE PTR [eax],al
     8cd:	05 02 9c 0a 00       	add    eax,0xa9c02
     8d2:	9f                   	lahf   
     8d3:	03 11                	add    edx,DWORD PTR [ecx]
     8d5:	01 08                	add    DWORD PTR [eax],ecx
     8d7:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     8da:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     8e0:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     8e6:	75 08                	jne    8f0 <sysEnter_Vector-0x12f710>
     8e8:	9f                   	lahf   
     8e9:	3d 77 08 21 75       	cmp    eax,0x75210877
     8ee:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     8f4:	75 08                	jne    8fe <sysEnter_Vector-0x12f702>
     8f6:	d7                   	xlat   BYTE PTR ds:[ebx]
     8f7:	3d 77 08 21 08       	cmp    eax,0x8210877
     8fc:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     900:	c9                   	leave  
     901:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     904:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     90a:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     90d:	13 75 77             	adc    esi,DWORD PTR [ebp+0x77]
     910:	08 22                	or     BYTE PTR [edx],ah
     912:	68 08 c9 08 83       	push   0x8308c908
     917:	59                   	pop    ecx
     918:	5b                   	pop    ebx
     919:	08 22                	or     BYTE PTR [edx],ah
     91b:	68 08 c9 08 83       	push   0x8308c908
     920:	5b                   	pop    ebx
     921:	08 22                	or     BYTE PTR [edx],ah
     923:	68 08 c9 08 83       	push   0x8308c908
     928:	5b                   	pop    ebx
     929:	f4                   	hlt    
     92a:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     92e:	31 f4                	xor    esp,esi
     930:	68 08 91 5a 31       	push   0x315a9108
     935:	08 21                	or     BYTE PTR [ecx],ah
     937:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     93b:	77 c9                	ja     906 <sysEnter_Vector-0x12f6fa>
     93d:	c9                   	leave  
     93e:	3f                   	aas    
     93f:	c9                   	leave  
     940:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     946:	3d 31 f3 75 08       	cmp    eax,0x875f331
     94b:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     950:	08 21                	or     BYTE PTR [ecx],ah
     952:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     959:	67 02 22             	add    ah,BYTE PTR [bp+si]
     95c:	14 08                	adc    al,0x8
     95e:	ae                   	scas   al,BYTE PTR es:[edi]
     95f:	4c                   	dec    esp
     960:	ca 08 4b             	retf   0x4b08
     963:	91                   	xchg   ecx,eax
     964:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     96a:	67 02 2f             	add    ch,BYTE PTR [bx]
     96d:	14 00                	adc    al,0x0
     96f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     972:	02 31                	add    dh,BYTE PTR [ecx]
     974:	13 00                	adc    eax,DWORD PTR [eax]
     976:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     979:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     97f:	bb 00 02 04 02       	mov    ebx,0x2040200
     984:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     987:	00 02                	add    BYTE PTR [edx],al
     989:	04 01                	add    al,0x1
     98b:	06                   	push   es
     98c:	4a                   	dec    edx
     98d:	06                   	push   es
     98e:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     991:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     997:	f3 75 08             	repz jne 9a2 <sysEnter_Vector-0x12f65e>
     99a:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     99f:	c9                   	leave  
     9a0:	c9                   	leave  
     9a1:	32 c9                	xor    cl,cl
     9a3:	f3 40                	repz inc eax
     9a5:	c9                   	leave  
     9a6:	08 13                	or     BYTE PTR [ebx],dl
     9a8:	32 f5                	xor    dh,ch
     9aa:	75 76                	jne    a22 <sysEnter_Vector-0x12f5de>
     9ac:	ad                   	lods   eax,DWORD PTR ds:[esi]
     9ad:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     9b2:	67 75 91             	addr16 jne 946 <sysEnter_Vector-0x12f6ba>
     9b5:	5a                   	pop    edx
     9b6:	75 67                	jne    a1f <sysEnter_Vector-0x12f5e1>
     9b8:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     9bb:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     9c1:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     9c6:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     9ca:	3c 44                	cmp    al,0x44
     9cc:	00 02                	add    BYTE PTR [edx],al
     9ce:	04 02                	add    al,0x2
     9d0:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     9d3:	00 02                	add    BYTE PTR [edx],al
     9d5:	04 01                	add    al,0x1
     9d7:	06                   	push   es
     9d8:	4a                   	dec    edx
     9d9:	00 02                	add    BYTE PTR [edx],al
     9db:	04 03                	add    al,0x3
     9dd:	82                   	(bad)  
     9de:	06                   	push   es
     9df:	03 23                	add    esp,DWORD PTR [ebx]
     9e1:	d6                   	(bad)  
     9e2:	00 02                	add    BYTE PTR [edx],al
     9e4:	04 01                	add    al,0x1
     9e6:	06                   	push   es
     9e7:	66 06                	pushw  es
     9e9:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     9ec:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     9f1:	31 08                	xor    DWORD PTR [eax],ecx
     9f3:	5b                   	pop    ebx
     9f4:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     9fa:	08 23                	or     BYTE PTR [ebx],ah
     9fc:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     a02:	04 01                	add    al,0x1
     a04:	06                   	push   es
     a05:	66 06                	pushw  es
     a07:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     a0a:	f3 c9                	repz leave 
     a0c:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     a10:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     a13:	06                   	push   es
     a14:	66 06                	pushw  es
     a16:	9f                   	lahf   
     a17:	4c                   	dec    esp
     a18:	00 02                	add    BYTE PTR [edx],al
     a1a:	04 01                	add    al,0x1
     a1c:	06                   	push   es
     a1d:	66 06                	pushw  es
     a1f:	d8 02                	fadd   DWORD PTR [edx]
     a21:	27                   	daa    
     a22:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     a28:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     a2e:	06                   	push   es
     a2f:	9e                   	sahf   
     a30:	06                   	push   es
     a31:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     a34:	f3 c9                	repz leave 
     a36:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     a39:	79 02                	jns    a3d <sysEnter_Vector-0x12f5c3>
     a3b:	34 01                	xor    al,0x1
     a3d:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     a40:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     a43:	02 2f                	add    ch,BYTE PTR [edi]
     a45:	14 02                	adc    al,0x2
     a47:	31 13                	xor    DWORD PTR [ebx],edx
     a49:	00 02                	add    BYTE PTR [edx],al
     a4b:	04 02                	add    al,0x2
     a4d:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     a54:	00 02                	add    BYTE PTR [edx],al
     a56:	04 02                	add    al,0x2
     a58:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     a5b:	00 02                	add    BYTE PTR [edx],al
     a5d:	04 01                	add    al,0x1
     a5f:	06                   	push   es
     a60:	4a                   	dec    edx
     a61:	06                   	push   es
     a62:	03 1b                	add    ebx,DWORD PTR [ebx]
     a64:	d6                   	(bad)  
     a65:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     a6a:	31 c9                	xor    ecx,ecx
     a6c:	9f                   	lahf   
     a6d:	02 02                	add    al,BYTE PTR [edx]
     a6f:	00 01                	add    BYTE PTR [ecx],al
     a71:	01 07                	add    DWORD PTR [edi],eax
     a73:	01 00                	add    DWORD PTR [eax],eax
     a75:	00 02                	add    BYTE PTR [edx],al
     a77:	00 e8                	add    al,ch
     a79:	00 00                	add    BYTE PTR [eax],al
     a7b:	00 01                	add    BYTE PTR [ecx],al
     a7d:	01 fb                	add    ebx,edi
     a7f:	0e                   	push   cs
     a80:	0d 00 01 01 01       	or     eax,0x1010100
     a85:	01 00                	add    DWORD PTR [eax],eax
     a87:	00 00                	add    BYTE PTR [eax],al
     a89:	01 00                	add    DWORD PTR [eax],eax
     a8b:	00 01                	add    BYTE PTR [ecx],al
     a8d:	73 72                	jae    b01 <sysEnter_Vector-0x12f4ff>
     a8f:	63 00                	arpl   WORD PTR [eax],ax
     a91:	2f                   	das    
     a92:	68 6f 6d 65 2f       	push   0x2f656d6f
     a97:	79 6f                	jns    b08 <sysEnter_Vector-0x12f4f8>
     a99:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     aa0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     aa3:	73 73                	jae    b18 <sysEnter_Vector-0x12f4e8>
     aa5:	2f                   	das    
     aa6:	6c                   	ins    BYTE PTR es:[edi],dx
     aa7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     aae:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ab4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     aba:	78 2d                	js     ae9 <sysEnter_Vector-0x12f517>
     abc:	67 6e                	outs   dx,BYTE PTR ds:[si]
     abe:	75 2f                	jne    aef <sysEnter_Vector-0x12f511>
     ac0:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ac5:	2f                   	das    
     ac6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     acd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ad0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ad4:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     ad8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     adc:	65                   	gs
     add:	2f                   	das    
     ade:	2e                   	cs
     adf:	2e                   	cs
     ae0:	2f                   	das    
     ae1:	2e                   	cs
     ae2:	2e                   	cs
     ae3:	2f                   	das    
     ae4:	2e                   	cs
     ae5:	2e                   	cs
     ae6:	2f                   	das    
     ae7:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     aeb:	6a 2f                	push   0x2f
     aed:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     af0:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     af7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     af8:	65                   	gs
     af9:	6c                   	ins    BYTE PTR es:[edi],dx
     afa:	2f                   	das    
     afb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b02:	00 00                	add    BYTE PTR [eax],al
     b04:	6c                   	ins    BYTE PTR es:[edi],dx
     b05:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     b0c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     b0f:	01 00                	add    DWORD PTR [eax],eax
     b11:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b14:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b1b:	63 
     b1c:	2e                   	cs
     b1d:	68 00 02 00 00       	push   0x200
     b22:	73 74                	jae    b98 <sysEnter_Vector-0x12f468>
     b24:	64                   	fs
     b25:	64                   	fs
     b26:	65                   	gs
     b27:	66                   	data16
     b28:	2e                   	cs
     b29:	68 00 02 00 00       	push   0x200
     b2e:	74 79                	je     ba9 <sysEnter_Vector-0x12f457>
     b30:	70 65                	jo     b97 <sysEnter_Vector-0x12f469>
     b32:	73 2e                	jae    b62 <sysEnter_Vector-0x12f49e>
     b34:	68 00 03 00 00       	push   0x300
     b39:	73 79                	jae    bb4 <sysEnter_Vector-0x12f44c>
     b3b:	73 63                	jae    ba0 <sysEnter_Vector-0x12f460>
     b3d:	61                   	popa   
     b3e:	6c                   	ins    BYTE PTR es:[edi],dx
     b3f:	6c                   	ins    BYTE PTR es:[edi],dx
     b40:	73 2e                	jae    b70 <sysEnter_Vector-0x12f490>
     b42:	68 00 04 00 00       	push   0x400
     b47:	6d                   	ins    DWORD PTR es:[edi],dx
     b48:	61                   	popa   
     b49:	6c                   	ins    BYTE PTR es:[edi],dx
     b4a:	6c                   	ins    BYTE PTR es:[edi],dx
     b4b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b4c:	63 2e                	arpl   WORD PTR [esi],bp
     b4e:	68 00 03 00 00       	push   0x300
     b53:	6c                   	ins    BYTE PTR es:[edi],dx
     b54:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b5b:	4f                   	dec    edi
     b5c:	53                   	push   ebx
     b5d:	2e                   	cs
     b5e:	68 00 03 00 00       	push   0x300
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	05 02 88 16 00       	add    eax,0x168802
     b6a:	9f                   	lahf   
     b6b:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     b71:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     b76:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     b79:	05 00 01 01 64       	add    eax,0x64010100
     b7e:	01 00                	add    DWORD PTR [eax],eax
     b80:	00 02                	add    BYTE PTR [edx],al
     b82:	00 db                	add    bl,bl
     b84:	00 00                	add    BYTE PTR [eax],al
     b86:	00 01                	add    BYTE PTR [ecx],al
     b88:	01 fb                	add    ebx,edi
     b8a:	0e                   	push   cs
     b8b:	0d 00 01 01 01       	or     eax,0x1010100
     b90:	01 00                	add    DWORD PTR [eax],eax
     b92:	00 00                	add    BYTE PTR [eax],al
     b94:	01 00                	add    DWORD PTR [eax],eax
     b96:	00 01                	add    BYTE PTR [ecx],al
     b98:	73 72                	jae    c0c <sysEnter_Vector-0x12f3f4>
     b9a:	63 00                	arpl   WORD PTR [eax],ax
     b9c:	2f                   	das    
     b9d:	68 6f 6d 65 2f       	push   0x2f656d6f
     ba2:	79 6f                	jns    c13 <sysEnter_Vector-0x12f3ed>
     ba4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     bab:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     bae:	73 73                	jae    c23 <sysEnter_Vector-0x12f3dd>
     bb0:	2f                   	das    
     bb1:	6c                   	ins    BYTE PTR es:[edi],dx
     bb2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bb9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bbf:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     bc5:	78 2d                	js     bf4 <sysEnter_Vector-0x12f40c>
     bc7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     bc9:	75 2f                	jne    bfa <sysEnter_Vector-0x12f406>
     bcb:	35 2e 33 2e 30       	xor    eax,0x302e332e
     bd0:	2f                   	das    
     bd1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     bd8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     bdb:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     bdf:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     be3:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     be7:	65                   	gs
     be8:	2f                   	das    
     be9:	2e                   	cs
     bea:	2e                   	cs
     beb:	2f                   	das    
     bec:	2e                   	cs
     bed:	2e                   	cs
     bee:	2f                   	das    
     bef:	2e                   	cs
     bf0:	2e                   	cs
     bf1:	2f                   	das    
     bf2:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     bf6:	6a 2f                	push   0x2f
     bf8:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     bfb:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     c02:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c03:	65                   	gs
     c04:	6c                   	ins    BYTE PTR es:[edi],dx
     c05:	2f                   	das    
     c06:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	6d                   	ins    DWORD PTR es:[edi],dx
     c10:	61                   	popa   
     c11:	6c                   	ins    BYTE PTR es:[edi],dx
     c12:	6c                   	ins    BYTE PTR es:[edi],dx
     c13:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c14:	63 2e                	arpl   WORD PTR [esi],bp
     c16:	63 00                	arpl   WORD PTR [eax],ax
     c18:	01 00                	add    DWORD PTR [eax],eax
     c1a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c1d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c24:	63 
     c25:	2e                   	cs
     c26:	68 00 02 00 00       	push   0x200
     c2b:	73 74                	jae    ca1 <sysEnter_Vector-0x12f35f>
     c2d:	64                   	fs
     c2e:	64                   	fs
     c2f:	65                   	gs
     c30:	66                   	data16
     c31:	2e                   	cs
     c32:	68 00 02 00 00       	push   0x200
     c37:	6d                   	ins    DWORD PTR es:[edi],dx
     c38:	61                   	popa   
     c39:	6c                   	ins    BYTE PTR es:[edi],dx
     c3a:	6c                   	ins    BYTE PTR es:[edi],dx
     c3b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c3c:	63 2e                	arpl   WORD PTR [esi],bp
     c3e:	68 00 03 00 00       	push   0x300
     c43:	6c                   	ins    BYTE PTR es:[edi],dx
     c44:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c4b:	4f                   	dec    edi
     c4c:	53                   	push   ebx
     c4d:	2e                   	cs
     c4e:	68 00 03 00 00       	push   0x300
     c53:	73 79                	jae    cce <sysEnter_Vector-0x12f332>
     c55:	73 63                	jae    cba <sysEnter_Vector-0x12f346>
     c57:	61                   	popa   
     c58:	6c                   	ins    BYTE PTR es:[edi],dx
     c59:	6c                   	ins    BYTE PTR es:[edi],dx
     c5a:	73 2e                	jae    c8a <sysEnter_Vector-0x12f376>
     c5c:	68 00 04 00 00       	push   0x400
     c61:	00 00                	add    BYTE PTR [eax],al
     c63:	05 02 fc 16 00       	add    eax,0x16fc02
     c68:	9f                   	lahf   
     c69:	03 0d 01 08 21 02    	add    ecx,DWORD PTR ds:0x2210801
     c6f:	24 13                	and    al,0x13
     c71:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     c76:	f5                   	cmc    
     c77:	92                   	xchg   edx,eax
     c78:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     c7e:	04 01                	add    al,0x1
     c80:	06                   	push   es
     c81:	66 06                	pushw  es
     c83:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     c88:	59                   	pop    ecx
     c89:	31 f5                	xor    ebp,esi
     c8b:	00 02                	add    BYTE PTR [edx],al
     c8d:	04 01                	add    al,0x1
     c8f:	06                   	push   es
     c90:	c8 06 cb 68          	enter  0xcb06,0x68
     c94:	93                   	xchg   ebx,eax
     c95:	bf 03 74 90 3f       	mov    edi,0x3f907403
     c9a:	43                   	inc    ebx
     c9b:	23 31                	and    esi,DWORD PTR [ecx]
     c9d:	08 27                	or     BYTE PTR [edi],ah
     c9f:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     ca5:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     caa:	f3 02 26             	repz add ah,BYTE PTR [esi]
     cad:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     cb4:	e5 ad                	in     eax,0xad
     cb6:	91                   	xchg   ecx,eax
     cb7:	91                   	xchg   ecx,eax
     cb8:	75 08                	jne    cc2 <sysEnter_Vector-0x12f33e>
     cba:	d7                   	xlat   BYTE PTR ds:[ebx]
     cbb:	d7                   	xlat   BYTE PTR ds:[ebx]
     cbc:	08 13                	or     BYTE PTR [ebx],dl
     cbe:	91                   	xchg   ecx,eax
     cbf:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     cc2:	91                   	xchg   ecx,eax
     cc3:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     cc8:	08 23                	or     BYTE PTR [ebx],ah
     cca:	08 16                	or     BYTE PTR [esi],dl
     ccc:	93                   	xchg   ebx,eax
     ccd:	02 23                	add    ah,BYTE PTR [ebx]
     ccf:	13 08                	adc    ecx,DWORD PTR [eax]
     cd1:	e7 d7                	out    0xd7,eax
     cd3:	3d 5b f3 08 13       	cmp    eax,0x1308f35b
     cd8:	31 c9                	xor    ecx,ecx
     cda:	ad                   	lods   eax,DWORD PTR ds:[esi]
     cdb:	3f                   	aas    
     cdc:	08 13                	or     BYTE PTR [ebx],dl
     cde:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     ce4:	01 e7                	add    edi,esp
     ce6:	00 00                	add    BYTE PTR [eax],al
     ce8:	00 02                	add    BYTE PTR [edx],al
     cea:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     cf0:	01 fb                	add    ebx,edi
     cf2:	0e                   	push   cs
     cf3:	0d 00 01 01 01       	or     eax,0x1010100
     cf8:	01 00                	add    DWORD PTR [eax],eax
     cfa:	00 00                	add    BYTE PTR [eax],al
     cfc:	01 00                	add    DWORD PTR [eax],eax
     cfe:	00 01                	add    BYTE PTR [ecx],al
     d00:	73 72                	jae    d74 <sysEnter_Vector-0x12f28c>
     d02:	63 00                	arpl   WORD PTR [eax],ax
     d04:	2f                   	das    
     d05:	68 6f 6d 65 2f       	push   0x2f656d6f
     d0a:	79 6f                	jns    d7b <sysEnter_Vector-0x12f285>
     d0c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d13:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d16:	73 73                	jae    d8b <sysEnter_Vector-0x12f275>
     d18:	2f                   	das    
     d19:	6c                   	ins    BYTE PTR es:[edi],dx
     d1a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d21:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d27:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d2d:	78 2d                	js     d5c <sysEnter_Vector-0x12f2a4>
     d2f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d31:	75 2f                	jne    d62 <sysEnter_Vector-0x12f29e>
     d33:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d38:	2f                   	das    
     d39:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d40:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d43:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d47:	65 00 00             	add    BYTE PTR gs:[eax],al
     d4a:	6d                   	ins    DWORD PTR es:[edi],dx
     d4b:	65                   	gs
     d4c:	6d                   	ins    DWORD PTR es:[edi],dx
     d4d:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     d50:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d53:	01 00                	add    DWORD PTR [eax],eax
     d55:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d58:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d5f:	63 
     d60:	2e                   	cs
     d61:	68 00 02 00 00       	push   0x200
     d66:	73 74                	jae    ddc <sysEnter_Vector-0x12f224>
     d68:	64                   	fs
     d69:	64                   	fs
     d6a:	65                   	gs
     d6b:	66                   	data16
     d6c:	2e                   	cs
     d6d:	68 00 02 00 00       	push   0x200
     d72:	6d                   	ins    DWORD PTR es:[edi],dx
     d73:	61                   	popa   
     d74:	6c                   	ins    BYTE PTR es:[edi],dx
     d75:	6c                   	ins    BYTE PTR es:[edi],dx
     d76:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d77:	63 2e                	arpl   WORD PTR [esi],bp
     d79:	68 00 03 00 00       	push   0x300
     d7e:	6c                   	ins    BYTE PTR es:[edi],dx
     d7f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d86:	4f                   	dec    edi
     d87:	53                   	push   ebx
     d88:	2e                   	cs
     d89:	68 00 03 00 00       	push   0x300
     d8e:	00 00                	add    BYTE PTR [eax],al
     d90:	05 02 30 1b 00       	add    eax,0x1b3002
     d95:	9f                   	lahf   
     d96:	03 0b                	add    ecx,DWORD PTR [ebx]
     d98:	01 f5                	add    ebp,esi
     d9a:	d7                   	xlat   BYTE PTR ds:[ebx]
     d9b:	d7                   	xlat   BYTE PTR ds:[ebx]
     d9c:	68 91 67 68 83       	push   0x83686791
     da1:	91                   	xchg   ecx,eax
     da2:	91                   	xchg   ecx,eax
     da3:	2f                   	das    
     da4:	08 1f                	or     BYTE PTR [edi],bl
     da6:	e8 08 57 ca 84       	call   84ca64b3 <sysEnter_Vector+0x84b764b3>
     dab:	68 83 67 68 83       	push   0x83686783
     db0:	91                   	xchg   ecx,eax
     db1:	91                   	xchg   ecx,eax
     db2:	2f                   	das    
     db3:	08 1f                	or     BYTE PTR [edi],bl
     db5:	e8 08 57 ca 5c       	call   5cca64c2 <sysEnter_Vector+0x5cb764c2>
     dba:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     dc0:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     dc6:	3e                   	ds
     dc7:	31 c9                	xor    ecx,ecx
     dc9:	08 13                	or     BYTE PTR [ebx],dl
     dcb:	02 02                	add    al,BYTE PTR [edx]
     dcd:	00 01                	add    BYTE PTR [ecx],al
     dcf:	01 ca                	add    edx,ecx
     dd1:	00 00                	add    BYTE PTR [eax],al
     dd3:	00 02                	add    BYTE PTR [edx],al
     dd5:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     ddb:	01 fb                	add    ebx,edi
     ddd:	0e                   	push   cs
     dde:	0d 00 01 01 01       	or     eax,0x1010100
     de3:	01 00                	add    DWORD PTR [eax],eax
     de5:	00 00                	add    BYTE PTR [eax],al
     de7:	01 00                	add    DWORD PTR [eax],eax
     de9:	00 01                	add    BYTE PTR [ecx],al
     deb:	73 72                	jae    e5f <sysEnter_Vector-0x12f1a1>
     ded:	63 00                	arpl   WORD PTR [eax],ax
     def:	2f                   	das    
     df0:	68 6f 6d 65 2f       	push   0x2f656d6f
     df5:	79 6f                	jns    e66 <sysEnter_Vector-0x12f19a>
     df7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     dfe:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e01:	73 73                	jae    e76 <sysEnter_Vector-0x12f18a>
     e03:	2f                   	das    
     e04:	6c                   	ins    BYTE PTR es:[edi],dx
     e05:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e0c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e12:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e18:	78 2d                	js     e47 <sysEnter_Vector-0x12f1b9>
     e1a:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e1c:	75 2f                	jne    e4d <sysEnter_Vector-0x12f1b3>
     e1e:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e23:	2f                   	das    
     e24:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e2b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e2e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e32:	65 00 00             	add    BYTE PTR gs:[eax],al
     e35:	6d                   	ins    DWORD PTR es:[edi],dx
     e36:	65                   	gs
     e37:	6d                   	ins    DWORD PTR es:[edi],dx
     e38:	73 65                	jae    e9f <sysEnter_Vector-0x12f161>
     e3a:	74 2e                	je     e6a <sysEnter_Vector-0x12f196>
     e3c:	63 00                	arpl   WORD PTR [eax],ax
     e3e:	01 00                	add    DWORD PTR [eax],eax
     e40:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e43:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e4a:	63 
     e4b:	2e                   	cs
     e4c:	68 00 02 00 00       	push   0x200
     e51:	73 74                	jae    ec7 <sysEnter_Vector-0x12f139>
     e53:	64                   	fs
     e54:	64                   	fs
     e55:	65                   	gs
     e56:	66                   	data16
     e57:	2e                   	cs
     e58:	68 00 02 00 00       	push   0x200
     e5d:	6d                   	ins    DWORD PTR es:[edi],dx
     e5e:	61                   	popa   
     e5f:	6c                   	ins    BYTE PTR es:[edi],dx
     e60:	6c                   	ins    BYTE PTR es:[edi],dx
     e61:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e62:	63 2e                	arpl   WORD PTR [esi],bp
     e64:	68 00 03 00 00       	push   0x300
     e69:	6c                   	ins    BYTE PTR es:[edi],dx
     e6a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e71:	4f                   	dec    edi
     e72:	53                   	push   ebx
     e73:	2e                   	cs
     e74:	68 00 03 00 00       	push   0x300
     e79:	00 00                	add    BYTE PTR [eax],al
     e7b:	05 02 ec 1c 00       	add    eax,0x1cec02
     e80:	9f                   	lahf   
     e81:	1a f3                	sbb    dh,bl
     e83:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     e89:	ca 9f 2f             	retf   0x2f9f
     e8c:	d5 bd                	aad    0xbd
     e8e:	9f                   	lahf   
     e8f:	2f                   	das    
     e90:	f1                   	icebp  
     e91:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     e96:	c9                   	leave  
     e97:	08 13                	or     BYTE PTR [ebx],dl
     e99:	02 02                	add    al,BYTE PTR [edx]
     e9b:	00 01                	add    BYTE PTR [ecx],al
     e9d:	01 e6                	add    esi,esp
     e9f:	00 00                	add    BYTE PTR [eax],al
     ea1:	00 02                	add    BYTE PTR [edx],al
     ea3:	00 cd                	add    ch,cl
     ea5:	00 00                	add    BYTE PTR [eax],al
     ea7:	00 01                	add    BYTE PTR [ecx],al
     ea9:	01 fb                	add    ebx,edi
     eab:	0e                   	push   cs
     eac:	0d 00 01 01 01       	or     eax,0x1010100
     eb1:	01 00                	add    DWORD PTR [eax],eax
     eb3:	00 00                	add    BYTE PTR [eax],al
     eb5:	01 00                	add    DWORD PTR [eax],eax
     eb7:	00 01                	add    BYTE PTR [ecx],al
     eb9:	73 72                	jae    f2d <sysEnter_Vector-0x12f0d3>
     ebb:	63 00                	arpl   WORD PTR [eax],ax
     ebd:	2f                   	das    
     ebe:	68 6f 6d 65 2f       	push   0x2f656d6f
     ec3:	79 6f                	jns    f34 <sysEnter_Vector-0x12f0cc>
     ec5:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ecc:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ecf:	73 73                	jae    f44 <sysEnter_Vector-0x12f0bc>
     ed1:	2f                   	das    
     ed2:	6c                   	ins    BYTE PTR es:[edi],dx
     ed3:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     eda:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ee0:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ee6:	78 2d                	js     f15 <sysEnter_Vector-0x12f0eb>
     ee8:	67 6e                	outs   dx,BYTE PTR ds:[si]
     eea:	75 2f                	jne    f1b <sysEnter_Vector-0x12f0e5>
     eec:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ef1:	2f                   	das    
     ef2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ef9:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     efc:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f00:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     f04:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f08:	65                   	gs
     f09:	2f                   	das    
     f0a:	2e                   	cs
     f0b:	2e                   	cs
     f0c:	2f                   	das    
     f0d:	2e                   	cs
     f0e:	2e                   	cs
     f0f:	2f                   	das    
     f10:	2e                   	cs
     f11:	2e                   	cs
     f12:	2f                   	das    
     f13:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     f17:	6a 2f                	push   0x2f
     f19:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     f1c:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     f23:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f24:	65                   	gs
     f25:	6c                   	ins    BYTE PTR es:[edi],dx
     f26:	2f                   	das    
     f27:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f2e:	00 00                	add    BYTE PTR [eax],al
     f30:	70 69                	jo     f9b <sysEnter_Vector-0x12f065>
     f32:	70 65                	jo     f99 <sysEnter_Vector-0x12f067>
     f34:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f37:	01 00                	add    DWORD PTR [eax],eax
     f39:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f3c:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f43:	63 
     f44:	2e                   	cs
     f45:	68 00 02 00 00       	push   0x200
     f4a:	6d                   	ins    DWORD PTR es:[edi],dx
     f4b:	61                   	popa   
     f4c:	6c                   	ins    BYTE PTR es:[edi],dx
     f4d:	6c                   	ins    BYTE PTR es:[edi],dx
     f4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f4f:	63 2e                	arpl   WORD PTR [esi],bp
     f51:	68 00 03 00 00       	push   0x300
     f56:	6c                   	ins    BYTE PTR es:[edi],dx
     f57:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     f5e:	4f                   	dec    edi
     f5f:	53                   	push   ebx
     f60:	2e                   	cs
     f61:	68 00 03 00 00       	push   0x300
     f66:	73 79                	jae    fe1 <sysEnter_Vector-0x12f01f>
     f68:	73 63                	jae    fcd <sysEnter_Vector-0x12f033>
     f6a:	61                   	popa   
     f6b:	6c                   	ins    BYTE PTR es:[edi],dx
     f6c:	6c                   	ins    BYTE PTR es:[edi],dx
     f6d:	73 2e                	jae    f9d <sysEnter_Vector-0x12f063>
     f6f:	68 00 04 00 00       	push   0x400
     f74:	00 00                	add    BYTE PTR [eax],al
     f76:	05 02 d4 1d 00       	add    eax,0x1dd402
     f7b:	9f                   	lahf   
     f7c:	03 0a                	add    ecx,DWORD PTR [edx]
     f7e:	01 08                	add    DWORD PTR [eax],ecx
     f80:	13 08                	adc    ecx,DWORD PTR [eax]
     f82:	2f                   	das    
     f83:	02 05 00 01 01 de    	add    al,BYTE PTR ds:0xde010100
     f89:	01 00                	add    DWORD PTR [eax],eax
     f8b:	00 02                	add    BYTE PTR [edx],al
     f8d:	00 a1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ah
     f93:	01 fb                	add    ebx,edi
     f95:	0e                   	push   cs
     f96:	0d 00 01 01 01       	or     eax,0x1010100
     f9b:	01 00                	add    DWORD PTR [eax],eax
     f9d:	00 00                	add    BYTE PTR [eax],al
     f9f:	01 00                	add    DWORD PTR [eax],eax
     fa1:	00 01                	add    BYTE PTR [ecx],al
     fa3:	73 72                	jae    1017 <sysEnter_Vector-0x12efe9>
     fa5:	63 00                	arpl   WORD PTR [eax],ax
     fa7:	2f                   	das    
     fa8:	68 6f 6d 65 2f       	push   0x2f656d6f
     fad:	79 6f                	jns    101e <sysEnter_Vector-0x12efe2>
     faf:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fb6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     fb9:	73 73                	jae    102e <sysEnter_Vector-0x12efd2>
     fbb:	2f                   	das    
     fbc:	6c                   	ins    BYTE PTR es:[edi],dx
     fbd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     fc4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     fca:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     fd0:	78 2d                	js     fff <sysEnter_Vector-0x12f001>
     fd2:	67 6e                	outs   dx,BYTE PTR ds:[si]
     fd4:	75 2f                	jne    1005 <sysEnter_Vector-0x12effb>
     fd6:	35 2e 33 2e 30       	xor    eax,0x302e332e
     fdb:	2f                   	das    
     fdc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     fe3:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     fe6:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     fea:	65 00 00             	add    BYTE PTR gs:[eax],al
     fed:	73 70                	jae    105f <sysEnter_Vector-0x12efa1>
     fef:	72 69                	jb     105a <sysEnter_Vector-0x12efa6>
     ff1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ff2:	74 66                	je     105a <sysEnter_Vector-0x12efa6>
     ff4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     ff7:	01 00                	add    DWORD PTR [eax],eax
     ff9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ffc:	64                   	fs
     ffd:	61                   	popa   
     ffe:	72 67                	jb     1067 <sysEnter_Vector-0x12ef99>
    1000:	2e                   	cs
    1001:	68 00 02 00 00       	push   0x200
    1006:	73 74                	jae    107c <sysEnter_Vector-0x12ef84>
    1008:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    100f:	63 
    1010:	2e                   	cs
    1011:	68 00 02 00 00       	push   0x200
    1016:	6d                   	ins    DWORD PTR es:[edi],dx
    1017:	61                   	popa   
    1018:	6c                   	ins    BYTE PTR es:[edi],dx
    1019:	6c                   	ins    BYTE PTR es:[edi],dx
    101a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    101b:	63 2e                	arpl   WORD PTR [esi],bp
    101d:	68 00 03 00 00       	push   0x300
    1022:	6c                   	ins    BYTE PTR es:[edi],dx
    1023:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    102a:	4f                   	dec    edi
    102b:	53                   	push   ebx
    102c:	2e                   	cs
    102d:	68 00 03 00 00       	push   0x300
    1032:	00 00                	add    BYTE PTR [eax],al
    1034:	05 02 00 1e 00       	add    eax,0x1e0002
    1039:	9f                   	lahf   
    103a:	03 0a                	add    ecx,DWORD PTR [edx]
    103c:	01 08                	add    DWORD PTR [eax],ecx
    103e:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    1041:	02 29                	add    ch,BYTE PTR [ecx]
    1043:	11 08                	adc    DWORD PTR [eax],ecx
    1045:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    104b:	0a 08                	or     cl,BYTE PTR [eax]
    104d:	2e                   	cs
    104e:	91                   	xchg   ecx,eax
    104f:	9f                   	lahf   
    1050:	4b                   	dec    ebx
    1051:	00 02                	add    BYTE PTR [edx],al
    1053:	04 01                	add    al,0x1
    1055:	06                   	push   es
    1056:	66 06                	pushw  es
    1058:	67 9f                	addr16 lahf 
    105a:	00 02                	add    BYTE PTR [edx],al
    105c:	04 01                	add    al,0x1
    105e:	06                   	push   es
    105f:	9e                   	sahf   
    1060:	00 02                	add    BYTE PTR [edx],al
    1062:	04 02                	add    al,0x2
    1064:	74 00                	je     1066 <sysEnter_Vector-0x12ef9a>
    1066:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1069:	58                   	pop    eax
    106a:	00 02                	add    BYTE PTR [edx],al
    106c:	04 04                	add    al,0x4
    106e:	06                   	push   es
    106f:	3d 00 02 04 04       	cmp    eax,0x4040200
    1074:	4b                   	dec    ebx
    1075:	9f                   	lahf   
    1076:	67 4b                	addr16 dec ebx
    1078:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    107d:	9f                   	lahf   
    107e:	4b                   	dec    ebx
    107f:	4d                   	dec    ebp
    1080:	9f                   	lahf   
    1081:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    1085:	75 67                	jne    10ee <sysEnter_Vector-0x12ef12>
    1087:	f5                   	cmc    
    1088:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    108e:	67 9f                	addr16 lahf 
    1090:	2f                   	das    
    1091:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    1096:	67 d7                	xlat   BYTE PTR ds:[bx]
    1098:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    109e:	e3 ca                	jecxz  106a <sysEnter_Vector-0x12ef96>
    10a0:	2f                   	das    
    10a1:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    10a6:	ca 2f b9             	retf   0xb92f
    10a9:	ca 00 02             	retf   0x200
    10ac:	04 01                	add    al,0x1
    10ae:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    10b3:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    10b9:	76 91                	jbe    104c <sysEnter_Vector-0x12efb4>
    10bb:	08 d8                	or     al,bl
    10bd:	4b                   	dec    ebx
    10be:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    10c1:	4b                   	dec    ebx
    10c2:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    10c5:	4b                   	dec    ebx
    10c6:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    10c9:	13 08                	adc    ecx,DWORD PTR [eax]
    10cb:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    10d1:	4f                   	dec    edi
    10d2:	75 9f                	jne    1073 <sysEnter_Vector-0x12ef8d>
    10d4:	91                   	xchg   ecx,eax
    10d5:	08 13                	or     BYTE PTR [ebx],dl
    10d7:	08 13                	or     BYTE PTR [ebx],dl
    10d9:	9f                   	lahf   
    10da:	92                   	xchg   edx,eax
    10db:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    10de:	75 00                	jne    10e0 <sysEnter_Vector-0x12ef20>
    10e0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10e3:	06                   	push   es
    10e4:	9e                   	sahf   
    10e5:	00 02                	add    BYTE PTR [edx],al
    10e7:	04 02                	add    al,0x2
    10e9:	9e                   	sahf   
    10ea:	06                   	push   es
    10eb:	9f                   	lahf   
    10ec:	bb 94 76 02 23       	mov    ebx,0x23027694
    10f1:	14 9f                	adc    al,0x9f
    10f3:	2f                   	das    
    10f4:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    10f9:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    10fe:	08 30                	or     BYTE PTR [eax],dh
    1100:	76 9f                	jbe    10a1 <sysEnter_Vector-0x12ef5f>
    1102:	2f                   	das    
    1103:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    1108:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    110e:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    1111:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1114:	06                   	push   es
    1115:	4a                   	dec    edx
    1116:	06                   	push   es
    1117:	84 2f                	test   BYTE PTR [edi],ch
    1119:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    111e:	4d                   	dec    ebp
    111f:	ab                   	stos   DWORD PTR es:[edi],eax
    1120:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    1126:	55                   	push   ebp
    1127:	d7                   	xlat   BYTE PTR ds:[ebx]
    1128:	ca 5b bb             	retf   0xbb5b
    112b:	5c                   	pop    esp
    112c:	75 31                	jne    115f <sysEnter_Vector-0x12eea1>
    112e:	4c                   	dec    esp
    112f:	75 32                	jne    1163 <sysEnter_Vector-0x12ee9d>
    1131:	4c                   	dec    esp
    1132:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    1138:	91                   	xchg   ecx,eax
    1139:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    113c:	03 0a                	add    ecx,DWORD PTR [edx]
    113e:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    1141:	67 08 2f             	or     BYTE PTR [bx],ch
    1144:	9f                   	lahf   
    1145:	91                   	xchg   ecx,eax
    1146:	9f                   	lahf   
    1147:	f4                   	hlt    
    1148:	d7                   	xlat   BYTE PTR ds:[ebx]
    1149:	00 02                	add    BYTE PTR [edx],al
    114b:	04 02                	add    al,0x2
    114d:	03 e8                	add    ebp,eax
    114f:	7e 08                	jle    1159 <sysEnter_Vector-0x12eea7>
    1151:	f2 00 02             	repnz add BYTE PTR [edx],al
    1154:	04 01                	add    al,0x1
    1156:	06                   	push   es
    1157:	90                   	nop
    1158:	06                   	push   es
    1159:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    115f:	5b                   	pop    ebx
    1160:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    1163:	76 3d                	jbe    11a2 <sysEnter_Vector-0x12ee5e>
    1165:	02 02                	add    al,BYTE PTR [edx]
    1167:	00 01                	add    BYTE PTR [ecx],al
    1169:	01 b4 00 00 00 02 00 	add    DWORD PTR [eax+eax*1+0x20000],esi
    1170:	93                   	xchg   ebx,eax
    1171:	00 00                	add    BYTE PTR [eax],al
    1173:	00 01                	add    BYTE PTR [ecx],al
    1175:	01 fb                	add    ebx,edi
    1177:	0e                   	push   cs
    1178:	0d 00 01 01 01       	or     eax,0x1010100
    117d:	01 00                	add    DWORD PTR [eax],eax
    117f:	00 00                	add    BYTE PTR [eax],al
    1181:	01 00                	add    DWORD PTR [eax],eax
    1183:	00 01                	add    BYTE PTR [ecx],al
    1185:	73 72                	jae    11f9 <sysEnter_Vector-0x12ee07>
    1187:	63 00                	arpl   WORD PTR [eax],ax
    1189:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1190:	00 2f                	add    BYTE PTR [edi],ch
    1192:	68 6f 6d 65 2f       	push   0x2f656d6f
    1197:	79 6f                	jns    1208 <sysEnter_Vector-0x12edf8>
    1199:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11a0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11a3:	73 73                	jae    1218 <sysEnter_Vector-0x12ede8>
    11a5:	2f                   	das    
    11a6:	6c                   	ins    BYTE PTR es:[edi],dx
    11a7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11ae:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11b4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11ba:	78 2d                	js     11e9 <sysEnter_Vector-0x12ee17>
    11bc:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11be:	75 2f                	jne    11ef <sysEnter_Vector-0x12ee11>
    11c0:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11c5:	2f                   	das    
    11c6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11cd:	00 00                	add    BYTE PTR [eax],al
    11cf:	73 74                	jae    1245 <sysEnter_Vector-0x12edbb>
    11d1:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    11d8:	00 
    11d9:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    11dc:	6c                   	ins    BYTE PTR es:[edi],dx
    11dd:	6c                   	ins    BYTE PTR es:[edi],dx
    11de:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11df:	63 2e                	arpl   WORD PTR [esi],bp
    11e1:	68 00 02 00 00       	push   0x200
    11e6:	6c                   	ins    BYTE PTR es:[edi],dx
    11e7:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    11ee:	4f                   	dec    edi
    11ef:	53                   	push   ebx
    11f0:	2e                   	cs
    11f1:	68 00 02 00 00       	push   0x200
    11f6:	73 74                	jae    126c <sysEnter_Vector-0x12ed94>
    11f8:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    11ff:	63 
    1200:	2e                   	cs
    1201:	68 00 03 00 00       	push   0x300
    1206:	00 00                	add    BYTE PTR [eax],al
    1208:	05 02 18 25 00       	add    eax,0x251802
    120d:	9f                   	lahf   
    120e:	03 10                	add    edx,DWORD PTR [eax]
    1210:	01 08                	add    DWORD PTR [eax],ecx
    1212:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    1215:	31 d7                	xor    edi,edx
    1217:	d7                   	xlat   BYTE PTR ds:[ebx]
    1218:	d7                   	xlat   BYTE PTR ds:[ebx]
    1219:	d7                   	xlat   BYTE PTR ds:[ebx]
    121a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    121b:	e6 21                	out    0x21,al
    121d:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
    1223:	00 00                	add    BYTE PTR [eax],al
    1225:	00 02                	add    BYTE PTR [edx],al
    1227:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    122e:	fb                   	sti    
    122f:	0e                   	push   cs
    1230:	0d 00 01 01 01       	or     eax,0x1010100
    1235:	01 00                	add    DWORD PTR [eax],eax
    1237:	00 00                	add    BYTE PTR [eax],al
    1239:	01 00                	add    DWORD PTR [eax],eax
    123b:	00 01                	add    BYTE PTR [ecx],al
    123d:	73 72                	jae    12b1 <sysEnter_Vector-0x12ed4f>
    123f:	63 2f                	arpl   WORD PTR [edi],bp
    1241:	73 74                	jae    12b7 <sysEnter_Vector-0x12ed49>
    1243:	72 69                	jb     12ae <sysEnter_Vector-0x12ed52>
    1245:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1246:	67 73 00             	addr16 jae 1249 <sysEnter_Vector-0x12edb7>
    1249:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1250:	00 2f                	add    BYTE PTR [edi],ch
    1252:	68 6f 6d 65 2f       	push   0x2f656d6f
    1257:	79 6f                	jns    12c8 <sysEnter_Vector-0x12ed38>
    1259:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1260:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1263:	73 73                	jae    12d8 <sysEnter_Vector-0x12ed28>
    1265:	2f                   	das    
    1266:	6c                   	ins    BYTE PTR es:[edi],dx
    1267:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    126e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1274:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    127a:	78 2d                	js     12a9 <sysEnter_Vector-0x12ed57>
    127c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    127e:	75 2f                	jne    12af <sysEnter_Vector-0x12ed51>
    1280:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1285:	2f                   	das    
    1286:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    128d:	00 00                	add    BYTE PTR [eax],al
    128f:	73 74                	jae    1305 <sysEnter_Vector-0x12ecfb>
    1291:	72 63                	jb     12f6 <sysEnter_Vector-0x12ed0a>
    1293:	61                   	popa   
    1294:	74 2e                	je     12c4 <sysEnter_Vector-0x12ed3c>
    1296:	63 00                	arpl   WORD PTR [eax],ax
    1298:	01 00                	add    DWORD PTR [eax],eax
    129a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    129d:	6c                   	ins    BYTE PTR es:[edi],dx
    129e:	6c                   	ins    BYTE PTR es:[edi],dx
    129f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12a0:	63 2e                	arpl   WORD PTR [esi],bp
    12a2:	68 00 02 00 00       	push   0x200
    12a7:	6c                   	ins    BYTE PTR es:[edi],dx
    12a8:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    12af:	4f                   	dec    edi
    12b0:	53                   	push   ebx
    12b1:	2e                   	cs
    12b2:	68 00 02 00 00       	push   0x200
    12b7:	73 74                	jae    132d <sysEnter_Vector-0x12ecd3>
    12b9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    12c0:	63 
    12c1:	2e                   	cs
    12c2:	68 00 03 00 00       	push   0x300
    12c7:	00 00                	add    BYTE PTR [eax],al
    12c9:	05 02 9c 25 00       	add    eax,0x259c02
    12ce:	9f                   	lahf   
    12cf:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    12d5:	24 13                	and    al,0x13
    12d7:	3d 5b 08 21 02       	cmp    eax,0x221085b
    12dc:	24 13                	and    al,0x13
    12de:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
    12e3:	49                   	dec    ecx
    12e4:	e8 76 2f 08 4b       	call   4b08425f <sysEnter_Vector+0x4af5425f>
    12e9:	4b                   	dec    ebx
    12ea:	47                   	inc    edi
    12eb:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
    12f2:	bb 00 00 00 02       	mov    ebx,0x2000000
    12f7:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    12fe:	fb                   	sti    
    12ff:	0e                   	push   cs
    1300:	0d 00 01 01 01       	or     eax,0x1010100
    1305:	01 00                	add    DWORD PTR [eax],eax
    1307:	00 00                	add    BYTE PTR [eax],al
    1309:	01 00                	add    DWORD PTR [eax],eax
    130b:	00 01                	add    BYTE PTR [ecx],al
    130d:	73 72                	jae    1381 <sysEnter_Vector-0x12ec7f>
    130f:	63 2f                	arpl   WORD PTR [edi],bp
    1311:	73 74                	jae    1387 <sysEnter_Vector-0x12ec79>
    1313:	72 69                	jb     137e <sysEnter_Vector-0x12ec82>
    1315:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1316:	67 73 00             	addr16 jae 1319 <sysEnter_Vector-0x12ece7>
    1319:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1320:	00 2f                	add    BYTE PTR [edi],ch
    1322:	68 6f 6d 65 2f       	push   0x2f656d6f
    1327:	79 6f                	jns    1398 <sysEnter_Vector-0x12ec68>
    1329:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1330:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1333:	73 73                	jae    13a8 <sysEnter_Vector-0x12ec58>
    1335:	2f                   	das    
    1336:	6c                   	ins    BYTE PTR es:[edi],dx
    1337:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    133e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1344:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    134a:	78 2d                	js     1379 <sysEnter_Vector-0x12ec87>
    134c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    134e:	75 2f                	jne    137f <sysEnter_Vector-0x12ec81>
    1350:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1355:	2f                   	das    
    1356:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    135d:	00 00                	add    BYTE PTR [eax],al
    135f:	73 74                	jae    13d5 <sysEnter_Vector-0x12ec2b>
    1361:	72 63                	jb     13c6 <sysEnter_Vector-0x12ec3a>
    1363:	6d                   	ins    DWORD PTR es:[edi],dx
    1364:	70 2e                	jo     1394 <sysEnter_Vector-0x12ec6c>
    1366:	63 00                	arpl   WORD PTR [eax],ax
    1368:	01 00                	add    DWORD PTR [eax],eax
    136a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    136d:	6c                   	ins    BYTE PTR es:[edi],dx
    136e:	6c                   	ins    BYTE PTR es:[edi],dx
    136f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1370:	63 2e                	arpl   WORD PTR [esi],bp
    1372:	68 00 02 00 00       	push   0x200
    1377:	6c                   	ins    BYTE PTR es:[edi],dx
    1378:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    137f:	4f                   	dec    edi
    1380:	53                   	push   ebx
    1381:	2e                   	cs
    1382:	68 00 02 00 00       	push   0x200
    1387:	73 74                	jae    13fd <sysEnter_Vector-0x12ec03>
    1389:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1390:	63 
    1391:	2e                   	cs
    1392:	68 00 03 00 00       	push   0x300
    1397:	00 00                	add    BYTE PTR [eax],al
    1399:	05 02 88 26 00       	add    eax,0x268802
    139e:	9f                   	lahf   
    139f:	03 18                	add    ebx,DWORD PTR [eax]
    13a1:	01 08                	add    DWORD PTR [eax],ecx
    13a3:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    13a9:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
    13af:	01 01                	add    DWORD PTR [ecx],eax
    13b1:	dc 00                	fadd   QWORD PTR [eax]
    13b3:	00 00                	add    BYTE PTR [eax],al
    13b5:	02 00                	add    al,BYTE PTR [eax]
    13b7:	9c                   	pushf  
    13b8:	00 00                	add    BYTE PTR [eax],al
    13ba:	00 01                	add    BYTE PTR [ecx],al
    13bc:	01 fb                	add    ebx,edi
    13be:	0e                   	push   cs
    13bf:	0d 00 01 01 01       	or     eax,0x1010100
    13c4:	01 00                	add    DWORD PTR [eax],eax
    13c6:	00 00                	add    BYTE PTR [eax],al
    13c8:	01 00                	add    DWORD PTR [eax],eax
    13ca:	00 01                	add    BYTE PTR [ecx],al
    13cc:	73 72                	jae    1440 <sysEnter_Vector-0x12ebc0>
    13ce:	63 2f                	arpl   WORD PTR [edi],bp
    13d0:	73 74                	jae    1446 <sysEnter_Vector-0x12ebba>
    13d2:	72 69                	jb     143d <sysEnter_Vector-0x12ebc3>
    13d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13d5:	67 73 00             	addr16 jae 13d8 <sysEnter_Vector-0x12ec28>
    13d8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13df:	00 2f                	add    BYTE PTR [edi],ch
    13e1:	68 6f 6d 65 2f       	push   0x2f656d6f
    13e6:	79 6f                	jns    1457 <sysEnter_Vector-0x12eba9>
    13e8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13ef:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13f2:	73 73                	jae    1467 <sysEnter_Vector-0x12eb99>
    13f4:	2f                   	das    
    13f5:	6c                   	ins    BYTE PTR es:[edi],dx
    13f6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13fd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1403:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1409:	78 2d                	js     1438 <sysEnter_Vector-0x12ebc8>
    140b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    140d:	75 2f                	jne    143e <sysEnter_Vector-0x12ebc2>
    140f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1414:	2f                   	das    
    1415:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    141c:	00 00                	add    BYTE PTR [eax],al
    141e:	73 74                	jae    1494 <sysEnter_Vector-0x12eb6c>
    1420:	72 63                	jb     1485 <sysEnter_Vector-0x12eb7b>
    1422:	70 79                	jo     149d <sysEnter_Vector-0x12eb63>
    1424:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1427:	01 00                	add    DWORD PTR [eax],eax
    1429:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    142c:	6c                   	ins    BYTE PTR es:[edi],dx
    142d:	6c                   	ins    BYTE PTR es:[edi],dx
    142e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    142f:	63 2e                	arpl   WORD PTR [esi],bp
    1431:	68 00 02 00 00       	push   0x200
    1436:	6c                   	ins    BYTE PTR es:[edi],dx
    1437:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    143e:	4f                   	dec    edi
    143f:	53                   	push   ebx
    1440:	2e                   	cs
    1441:	68 00 02 00 00       	push   0x200
    1446:	73 74                	jae    14bc <sysEnter_Vector-0x12eb44>
    1448:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    144f:	63 
    1450:	2e                   	cs
    1451:	68 00 03 00 00       	push   0x300
    1456:	00 00                	add    BYTE PTR [eax],al
    1458:	05 02 e8 26 00       	add    eax,0x26e802
    145d:	9f                   	lahf   
    145e:	16                   	push   ss
    145f:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1463:	04 01                	add    al,0x1
    1465:	06                   	push   es
    1466:	20 06                	and    BYTE PTR [esi],al
    1468:	08 ca                	or     dl,cl
    146a:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1470:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1473:	06                   	push   es
    1474:	20 06                	and    BYTE PTR [esi],al
    1476:	08 ca                	or     dl,cl
    1478:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    147e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1481:	06                   	push   es
    1482:	20 00                	and    BYTE PTR [eax],al
    1484:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1487:	08 c8                	or     al,cl
    1489:	06                   	push   es
    148a:	ca 3d 02             	retf   0x23d
    148d:	02 00                	add    al,BYTE PTR [eax]
    148f:	01 01                	add    DWORD PTR [ecx],eax
    1491:	cb                   	retf   
    1492:	00 00                	add    BYTE PTR [eax],al
    1494:	00 02                	add    BYTE PTR [edx],al
    1496:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    149c:	01 fb                	add    ebx,edi
    149e:	0e                   	push   cs
    149f:	0d 00 01 01 01       	or     eax,0x1010100
    14a4:	01 00                	add    DWORD PTR [eax],eax
    14a6:	00 00                	add    BYTE PTR [eax],al
    14a8:	01 00                	add    DWORD PTR [eax],eax
    14aa:	00 01                	add    BYTE PTR [ecx],al
    14ac:	73 72                	jae    1520 <sysEnter_Vector-0x12eae0>
    14ae:	63 2f                	arpl   WORD PTR [edi],bp
    14b0:	73 74                	jae    1526 <sysEnter_Vector-0x12eada>
    14b2:	72 69                	jb     151d <sysEnter_Vector-0x12eae3>
    14b4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14b5:	67 73 00             	addr16 jae 14b8 <sysEnter_Vector-0x12eb48>
    14b8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14bf:	00 2f                	add    BYTE PTR [edi],ch
    14c1:	68 6f 6d 65 2f       	push   0x2f656d6f
    14c6:	79 6f                	jns    1537 <sysEnter_Vector-0x12eac9>
    14c8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    14cf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    14d2:	73 73                	jae    1547 <sysEnter_Vector-0x12eab9>
    14d4:	2f                   	das    
    14d5:	6c                   	ins    BYTE PTR es:[edi],dx
    14d6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    14dd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    14e3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    14e9:	78 2d                	js     1518 <sysEnter_Vector-0x12eae8>
    14eb:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14ed:	75 2f                	jne    151e <sysEnter_Vector-0x12eae2>
    14ef:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14f4:	2f                   	das    
    14f5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	73 74                	jae    1574 <sysEnter_Vector-0x12ea8c>
    1500:	72 69                	jb     156b <sysEnter_Vector-0x12ea95>
    1502:	73 6e                	jae    1572 <sysEnter_Vector-0x12ea8e>
    1504:	75 6d                	jne    1573 <sysEnter_Vector-0x12ea8d>
    1506:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1509:	01 00                	add    DWORD PTR [eax],eax
    150b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    150e:	6c                   	ins    BYTE PTR es:[edi],dx
    150f:	6c                   	ins    BYTE PTR es:[edi],dx
    1510:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1511:	63 2e                	arpl   WORD PTR [esi],bp
    1513:	68 00 02 00 00       	push   0x200
    1518:	6c                   	ins    BYTE PTR es:[edi],dx
    1519:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1520:	4f                   	dec    edi
    1521:	53                   	push   ebx
    1522:	2e                   	cs
    1523:	68 00 02 00 00       	push   0x200
    1528:	73 74                	jae    159e <sysEnter_Vector-0x12ea62>
    152a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1531:	63 
    1532:	2e                   	cs
    1533:	68 00 03 00 00       	push   0x300
    1538:	00 00                	add    BYTE PTR [eax],al
    153a:	05 02 b0 27 00       	add    eax,0x27b002
    153f:	9f                   	lahf   
    1540:	1a 08                	sbb    cl,BYTE PTR [eax]
    1542:	59                   	pop    ecx
    1543:	00 02                	add    BYTE PTR [edx],al
    1545:	04 01                	add    al,0x1
    1547:	06                   	push   es
    1548:	66                   	data16
    1549:	00 02                	add    BYTE PTR [edx],al
    154b:	04 02                	add    al,0x2
    154d:	66 06                	pushw  es
    154f:	75 59                	jne    15aa <sysEnter_Vector-0x12ea56>
    1551:	31 f3                	xor    ebx,esi
    1553:	76 2f                	jbe    1584 <sysEnter_Vector-0x12ea7c>
    1555:	08 e5                	or     ch,ah
    1557:	72 08                	jb     1561 <sysEnter_Vector-0x12ea9f>
    1559:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    155c:	02 00                	add    al,BYTE PTR [eax]
    155e:	01 01                	add    DWORD PTR [ecx],eax
    1560:	d5 00                	aad    0x0
    1562:	00 00                	add    BYTE PTR [eax],al
    1564:	02 00                	add    al,BYTE PTR [eax]
    1566:	a8 00                	test   al,0x0
    1568:	00 00                	add    BYTE PTR [eax],al
    156a:	01 01                	add    DWORD PTR [ecx],eax
    156c:	fb                   	sti    
    156d:	0e                   	push   cs
    156e:	0d 00 01 01 01       	or     eax,0x1010100
    1573:	01 00                	add    DWORD PTR [eax],eax
    1575:	00 00                	add    BYTE PTR [eax],al
    1577:	01 00                	add    DWORD PTR [eax],eax
    1579:	00 01                	add    BYTE PTR [ecx],al
    157b:	73 72                	jae    15ef <sysEnter_Vector-0x12ea11>
    157d:	63 2f                	arpl   WORD PTR [edi],bp
    157f:	73 74                	jae    15f5 <sysEnter_Vector-0x12ea0b>
    1581:	72 69                	jb     15ec <sysEnter_Vector-0x12ea14>
    1583:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1584:	67 73 00             	addr16 jae 1587 <sysEnter_Vector-0x12ea79>
    1587:	2f                   	das    
    1588:	68 6f 6d 65 2f       	push   0x2f656d6f
    158d:	79 6f                	jns    15fe <sysEnter_Vector-0x12ea02>
    158f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1596:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1599:	73 73                	jae    160e <sysEnter_Vector-0x12e9f2>
    159b:	2f                   	das    
    159c:	6c                   	ins    BYTE PTR es:[edi],dx
    159d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    15a4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    15aa:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    15b0:	78 2d                	js     15df <sysEnter_Vector-0x12ea21>
    15b2:	67 6e                	outs   dx,BYTE PTR ds:[si]
    15b4:	75 2f                	jne    15e5 <sysEnter_Vector-0x12ea1b>
    15b6:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15bb:	2f                   	das    
    15bc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15c3:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    15c6:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    15ca:	65 00 00             	add    BYTE PTR gs:[eax],al
    15cd:	73 74                	jae    1643 <sysEnter_Vector-0x12e9bd>
    15cf:	72 6c                	jb     163d <sysEnter_Vector-0x12e9c3>
    15d1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    15d3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15d6:	01 00                	add    DWORD PTR [eax],eax
    15d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15db:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15e2:	63 
    15e3:	2e                   	cs
    15e4:	68 00 02 00 00       	push   0x200
    15e9:	73 74                	jae    165f <sysEnter_Vector-0x12e9a1>
    15eb:	64                   	fs
    15ec:	64                   	fs
    15ed:	65                   	gs
    15ee:	66                   	data16
    15ef:	2e                   	cs
    15f0:	68 00 02 00 00       	push   0x200
    15f5:	6d                   	ins    DWORD PTR es:[edi],dx
    15f6:	61                   	popa   
    15f7:	6c                   	ins    BYTE PTR es:[edi],dx
    15f8:	6c                   	ins    BYTE PTR es:[edi],dx
    15f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15fa:	63 2e                	arpl   WORD PTR [esi],bp
    15fc:	68 00 03 00 00       	push   0x300
    1601:	6c                   	ins    BYTE PTR es:[edi],dx
    1602:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1609:	4f                   	dec    edi
    160a:	53                   	push   ebx
    160b:	2e                   	cs
    160c:	68 00 03 00 00       	push   0x300
    1611:	00 00                	add    BYTE PTR [eax],al
    1613:	05 02 3c 28 00       	add    eax,0x283c02
    1618:	9f                   	lahf   
    1619:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    161e:	e6 3d                	out    0x3d,al
    1620:	31 c9                	xor    ecx,ecx
    1622:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1623:	31 f3                	xor    ebx,esi
    1625:	75 2f                	jne    1656 <sysEnter_Vector-0x12e9aa>
    1627:	49                   	dec    ecx
    1628:	00 02                	add    BYTE PTR [edx],al
    162a:	04 01                	add    al,0x1
    162c:	06                   	push   es
    162d:	e4 06                	in     al,0x6
    162f:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    1635:	02 00                	add    al,BYTE PTR [eax]
    1637:	01 01                	add    DWORD PTR [ecx],eax
    1639:	c1 00 00             	rol    DWORD PTR [eax],0x0
    163c:	00 02                	add    BYTE PTR [edx],al
    163e:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1641:	00 00                	add    BYTE PTR [eax],al
    1643:	01 01                	add    DWORD PTR [ecx],eax
    1645:	fb                   	sti    
    1646:	0e                   	push   cs
    1647:	0d 00 01 01 01       	or     eax,0x1010100
    164c:	01 00                	add    DWORD PTR [eax],eax
    164e:	00 00                	add    BYTE PTR [eax],al
    1650:	01 00                	add    DWORD PTR [eax],eax
    1652:	00 01                	add    BYTE PTR [ecx],al
    1654:	73 72                	jae    16c8 <sysEnter_Vector-0x12e938>
    1656:	63 2f                	arpl   WORD PTR [edi],bp
    1658:	73 74                	jae    16ce <sysEnter_Vector-0x12e932>
    165a:	72 69                	jb     16c5 <sysEnter_Vector-0x12e93b>
    165c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    165d:	67 73 00             	addr16 jae 1660 <sysEnter_Vector-0x12e9a0>
    1660:	2f                   	das    
    1661:	68 6f 6d 65 2f       	push   0x2f656d6f
    1666:	79 6f                	jns    16d7 <sysEnter_Vector-0x12e929>
    1668:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    166f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1672:	73 73                	jae    16e7 <sysEnter_Vector-0x12e919>
    1674:	2f                   	das    
    1675:	6c                   	ins    BYTE PTR es:[edi],dx
    1676:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    167d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1683:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1689:	78 2d                	js     16b8 <sysEnter_Vector-0x12e948>
    168b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    168d:	75 2f                	jne    16be <sysEnter_Vector-0x12e942>
    168f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1694:	2f                   	das    
    1695:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    169c:	00 00                	add    BYTE PTR [eax],al
    169e:	73 74                	jae    1714 <sysEnter_Vector-0x12e8ec>
    16a0:	72 6e                	jb     1710 <sysEnter_Vector-0x12e8f0>
    16a2:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    16a5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    16a8:	01 00                	add    DWORD PTR [eax],eax
    16aa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    16ad:	64                   	fs
    16ae:	64                   	fs
    16af:	65                   	gs
    16b0:	66                   	data16
    16b1:	2e                   	cs
    16b2:	68 00 02 00 00       	push   0x200
    16b7:	00 00                	add    BYTE PTR [eax],al
    16b9:	05 02 e0 28 00       	add    eax,0x28e002
    16be:	9f                   	lahf   
    16bf:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    16c2:	c9                   	leave  
    16c3:	2f                   	das    
    16c4:	f3 00 02             	repz add BYTE PTR [edx],al
    16c7:	04 01                	add    al,0x1
    16c9:	06                   	push   es
    16ca:	f2 00 02             	repnz add BYTE PTR [edx],al
    16cd:	04 02                	add    al,0x2
    16cf:	74 06                	je     16d7 <sysEnter_Vector-0x12e929>
    16d1:	75 9f                	jne    1672 <sysEnter_Vector-0x12e98e>
    16d3:	70 00                	jo     16d5 <sysEnter_Vector-0x12e92b>
    16d5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16d8:	06                   	push   es
    16d9:	ba 06 6b 59 31       	mov    edx,0x31596b06
    16de:	c9                   	leave  
    16df:	2f                   	das    
    16e0:	f3 00 02             	repz add BYTE PTR [edx],al
    16e3:	04 01                	add    al,0x1
    16e5:	06                   	push   es
    16e6:	f2 00 02             	repnz add BYTE PTR [edx],al
    16e9:	04 02                	add    al,0x2
    16eb:	74 06                	je     16f3 <sysEnter_Vector-0x12e90d>
    16ed:	75 9f                	jne    168e <sysEnter_Vector-0x12e972>
    16ef:	70 00                	jo     16f1 <sysEnter_Vector-0x12e90f>
    16f1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16f4:	06                   	push   es
    16f5:	ba 06 6b 59 02       	mov    edx,0x2596b06
    16fa:	02 00                	add    al,BYTE PTR [eax]
    16fc:	01 01                	add    DWORD PTR [ecx],eax
    16fe:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1703:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1706:	00 00                	add    BYTE PTR [eax],al
    1708:	01 01                	add    DWORD PTR [ecx],eax
    170a:	fb                   	sti    
    170b:	0e                   	push   cs
    170c:	0d 00 01 01 01       	or     eax,0x1010100
    1711:	01 00                	add    DWORD PTR [eax],eax
    1713:	00 00                	add    BYTE PTR [eax],al
    1715:	01 00                	add    DWORD PTR [eax],eax
    1717:	00 01                	add    BYTE PTR [ecx],al
    1719:	73 72                	jae    178d <sysEnter_Vector-0x12e873>
    171b:	63 2f                	arpl   WORD PTR [edi],bp
    171d:	73 74                	jae    1793 <sysEnter_Vector-0x12e86d>
    171f:	72 69                	jb     178a <sysEnter_Vector-0x12e876>
    1721:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1722:	67 73 00             	addr16 jae 1725 <sysEnter_Vector-0x12e8db>
    1725:	2f                   	das    
    1726:	68 6f 6d 65 2f       	push   0x2f656d6f
    172b:	79 6f                	jns    179c <sysEnter_Vector-0x12e864>
    172d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1734:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1737:	73 73                	jae    17ac <sysEnter_Vector-0x12e854>
    1739:	2f                   	das    
    173a:	6c                   	ins    BYTE PTR es:[edi],dx
    173b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1742:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1748:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    174e:	78 2d                	js     177d <sysEnter_Vector-0x12e883>
    1750:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1752:	75 2f                	jne    1783 <sysEnter_Vector-0x12e87d>
    1754:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1759:	2f                   	das    
    175a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1761:	00 00                	add    BYTE PTR [eax],al
    1763:	73 74                	jae    17d9 <sysEnter_Vector-0x12e827>
    1765:	72 6e                	jb     17d5 <sysEnter_Vector-0x12e82b>
    1767:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    176a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    176d:	01 00                	add    DWORD PTR [eax],eax
    176f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1772:	64                   	fs
    1773:	64                   	fs
    1774:	65                   	gs
    1775:	66                   	data16
    1776:	2e                   	cs
    1777:	68 00 02 00 00       	push   0x200
    177c:	00 00                	add    BYTE PTR [eax],al
    177e:	05 02 b0 29 00       	add    eax,0x29b002
    1783:	9f                   	lahf   
    1784:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    178a:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    178d:	00 02                	add    BYTE PTR [edx],al
    178f:	04 01                	add    al,0x1
    1791:	06                   	push   es
    1792:	66 06                	pushw  es
    1794:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1799:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    179e:	02 02                	add    al,BYTE PTR [edx]
    17a0:	00 01                	add    BYTE PTR [ecx],al
    17a2:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    17a5:	00 00                	add    BYTE PTR [eax],al
    17a7:	02 00                	add    al,BYTE PTR [eax]
    17a9:	9c                   	pushf  
    17aa:	00 00                	add    BYTE PTR [eax],al
    17ac:	00 01                	add    BYTE PTR [ecx],al
    17ae:	01 fb                	add    ebx,edi
    17b0:	0e                   	push   cs
    17b1:	0d 00 01 01 01       	or     eax,0x1010100
    17b6:	01 00                	add    DWORD PTR [eax],eax
    17b8:	00 00                	add    BYTE PTR [eax],al
    17ba:	01 00                	add    DWORD PTR [eax],eax
    17bc:	00 01                	add    BYTE PTR [ecx],al
    17be:	73 72                	jae    1832 <sysEnter_Vector-0x12e7ce>
    17c0:	63 2f                	arpl   WORD PTR [edi],bp
    17c2:	73 74                	jae    1838 <sysEnter_Vector-0x12e7c8>
    17c4:	72 69                	jb     182f <sysEnter_Vector-0x12e7d1>
    17c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17c7:	67 73 00             	addr16 jae 17ca <sysEnter_Vector-0x12e836>
    17ca:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17d1:	00 2f                	add    BYTE PTR [edi],ch
    17d3:	68 6f 6d 65 2f       	push   0x2f656d6f
    17d8:	79 6f                	jns    1849 <sysEnter_Vector-0x12e7b7>
    17da:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17e1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17e4:	73 73                	jae    1859 <sysEnter_Vector-0x12e7a7>
    17e6:	2f                   	das    
    17e7:	6c                   	ins    BYTE PTR es:[edi],dx
    17e8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17ef:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17f5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17fb:	78 2d                	js     182a <sysEnter_Vector-0x12e7d6>
    17fd:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17ff:	75 2f                	jne    1830 <sysEnter_Vector-0x12e7d0>
    1801:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1806:	2f                   	das    
    1807:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    180e:	00 00                	add    BYTE PTR [eax],al
    1810:	73 74                	jae    1886 <sysEnter_Vector-0x12e77a>
    1812:	72 6f                	jb     1883 <sysEnter_Vector-0x12e77d>
    1814:	75 6c                	jne    1882 <sysEnter_Vector-0x12e77e>
    1816:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1819:	01 00                	add    DWORD PTR [eax],eax
    181b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    181e:	6c                   	ins    BYTE PTR es:[edi],dx
    181f:	6c                   	ins    BYTE PTR es:[edi],dx
    1820:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1821:	63 2e                	arpl   WORD PTR [esi],bp
    1823:	68 00 02 00 00       	push   0x200
    1828:	6c                   	ins    BYTE PTR es:[edi],dx
    1829:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1830:	4f                   	dec    edi
    1831:	53                   	push   ebx
    1832:	2e                   	cs
    1833:	68 00 02 00 00       	push   0x200
    1838:	73 74                	jae    18ae <sysEnter_Vector-0x12e752>
    183a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1841:	63 
    1842:	2e                   	cs
    1843:	68 00 03 00 00       	push   0x300
    1848:	00 00                	add    BYTE PTR [eax],al
    184a:	05 02 30 2a 00       	add    eax,0x2a3002
    184f:	9f                   	lahf   
    1850:	03 3b                	add    edi,DWORD PTR [ebx]
    1852:	01 08                	add    DWORD PTR [eax],ecx
    1854:	2f                   	das    
    1855:	40                   	inc    eax
    1856:	00 02                	add    BYTE PTR [edx],al
    1858:	04 01                	add    al,0x1
    185a:	7a 00                	jp     185c <sysEnter_Vector-0x12e7a4>
    185c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    185f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1860:	59                   	pop    ecx
    1861:	59                   	pop    ecx
    1862:	75 c9                	jne    182d <sysEnter_Vector-0x12e7d3>
    1864:	59                   	pop    ecx
    1865:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1866:	00 02                	add    BYTE PTR [edx],al
    1868:	04 02                	add    al,0x2
    186a:	06                   	push   es
    186b:	66                   	data16
    186c:	00 02                	add    BYTE PTR [edx],al
    186e:	04 03                	add    al,0x3
    1870:	66 06                	pushw  es
    1872:	59                   	pop    ecx
    1873:	00 02                	add    BYTE PTR [edx],al
    1875:	04 01                	add    al,0x1
    1877:	06                   	push   es
    1878:	74 06                	je     1880 <sysEnter_Vector-0x12e780>
    187a:	75 91                	jne    180d <sysEnter_Vector-0x12e7f3>
    187c:	3d 76 67 00 02       	cmp    eax,0x2006776
    1881:	04 01                	add    al,0x1
    1883:	06                   	push   es
    1884:	58                   	pop    eax
    1885:	00 02                	add    BYTE PTR [edx],al
    1887:	04 02                	add    al,0x2
    1889:	74 00                	je     188b <sysEnter_Vector-0x12e775>
    188b:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    188e:	58                   	pop    eax
    188f:	06                   	push   es
    1890:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1895:	9f                   	lahf   
    1896:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    189a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    189d:	06                   	push   es
    189e:	58                   	pop    eax
    189f:	00 02                	add    BYTE PTR [edx],al
    18a1:	04 03                	add    al,0x3
    18a3:	58                   	pop    eax
    18a4:	00 02                	add    BYTE PTR [edx],al
    18a6:	04 04                	add    al,0x4
    18a8:	74 00                	je     18aa <sysEnter_Vector-0x12e756>
    18aa:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    18ad:	58                   	pop    eax
    18ae:	06                   	push   es
    18af:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    18b2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18b5:	06                   	push   es
    18b6:	66                   	data16
    18b7:	00 02                	add    BYTE PTR [edx],al
    18b9:	04 02                	add    al,0x2
    18bb:	58                   	pop    eax
    18bc:	00 02                	add    BYTE PTR [edx],al
    18be:	04 03                	add    al,0x3
    18c0:	58                   	pop    eax
    18c1:	06                   	push   es
    18c2:	67 76 59             	addr16 jbe 191e <sysEnter_Vector-0x12e6e2>
    18c5:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    18c9:	03 10                	add    edx,DWORD PTR [eax]
    18cb:	ac                   	lods   al,BYTE PTR ds:[esi]
    18cc:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    18cf:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    18d2:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    18d5:	67 2f                	addr16 das 
    18d7:	67 00 02             	add    BYTE PTR [bp+si],al
    18da:	04 01                	add    al,0x1
    18dc:	06                   	push   es
    18dd:	66                   	data16
    18de:	00 02                	add    BYTE PTR [edx],al
    18e0:	04 02                	add    al,0x2
    18e2:	58                   	pop    eax
    18e3:	00 02                	add    BYTE PTR [edx],al
    18e5:	04 04                	add    al,0x4
    18e7:	3c 06                	cmp    al,0x6
    18e9:	59                   	pop    ecx
    18ea:	2f                   	das    
    18eb:	02 08                	add    cl,BYTE PTR [eax]
    18ed:	00 01                	add    BYTE PTR [ecx],al
    18ef:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    18f2:	00 00                	add    BYTE PTR [eax],al
    18f4:	02 00                	add    al,BYTE PTR [eax]
    18f6:	2d 00 00 00 01       	sub    eax,0x1000000
    18fb:	01 fb                	add    ebx,edi
    18fd:	0e                   	push   cs
    18fe:	0d 00 01 01 01       	or     eax,0x1010100
    1903:	01 00                	add    DWORD PTR [eax],eax
    1905:	00 00                	add    BYTE PTR [eax],al
    1907:	01 00                	add    DWORD PTR [eax],eax
    1909:	00 01                	add    BYTE PTR [ecx],al
    190b:	73 72                	jae    197f <sysEnter_Vector-0x12e681>
    190d:	63 2f                	arpl   WORD PTR [edi],bp
    190f:	73 74                	jae    1985 <sysEnter_Vector-0x12e67b>
    1911:	72 69                	jb     197c <sysEnter_Vector-0x12e684>
    1913:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1914:	67 73 00             	addr16 jae 1917 <sysEnter_Vector-0x12e6e9>
    1917:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    191a:	72 70                	jb     198c <sysEnter_Vector-0x12e674>
    191c:	61                   	popa   
    191d:	72 74                	jb     1993 <sysEnter_Vector-0x12e66d>
    191f:	73 2e                	jae    194f <sysEnter_Vector-0x12e6b1>
    1921:	63 00                	arpl   WORD PTR [eax],ax
    1923:	01 00                	add    DWORD PTR [eax],eax
    1925:	00 00                	add    BYTE PTR [eax],al
    1927:	00 05 02 b0 2b 00    	add    BYTE PTR ds:0x2bb002,al
    192d:	9f                   	lahf   
    192e:	13 c9                	adc    ecx,ecx
    1930:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1931:	3d 02 02 00 01       	cmp    eax,0x1000202
    1936:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    1939:	00 00                	add    BYTE PTR [eax],al
    193b:	02 00                	add    al,BYTE PTR [eax]
    193d:	9c                   	pushf  
    193e:	00 00                	add    BYTE PTR [eax],al
    1940:	00 01                	add    BYTE PTR [ecx],al
    1942:	01 fb                	add    ebx,edi
    1944:	0e                   	push   cs
    1945:	0d 00 01 01 01       	or     eax,0x1010100
    194a:	01 00                	add    DWORD PTR [eax],eax
    194c:	00 00                	add    BYTE PTR [eax],al
    194e:	01 00                	add    DWORD PTR [eax],eax
    1950:	00 01                	add    BYTE PTR [ecx],al
    1952:	73 72                	jae    19c6 <sysEnter_Vector-0x12e63a>
    1954:	63 2f                	arpl   WORD PTR [edi],bp
    1956:	73 74                	jae    19cc <sysEnter_Vector-0x12e634>
    1958:	72 69                	jb     19c3 <sysEnter_Vector-0x12e63d>
    195a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    195b:	67 73 00             	addr16 jae 195e <sysEnter_Vector-0x12e6a2>
    195e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1965:	00 2f                	add    BYTE PTR [edi],ch
    1967:	68 6f 6d 65 2f       	push   0x2f656d6f
    196c:	79 6f                	jns    19dd <sysEnter_Vector-0x12e623>
    196e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1975:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1978:	73 73                	jae    19ed <sysEnter_Vector-0x12e613>
    197a:	2f                   	das    
    197b:	6c                   	ins    BYTE PTR es:[edi],dx
    197c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1983:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1989:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    198f:	78 2d                	js     19be <sysEnter_Vector-0x12e642>
    1991:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1993:	75 2f                	jne    19c4 <sysEnter_Vector-0x12e63c>
    1995:	35 2e 33 2e 30       	xor    eax,0x302e332e
    199a:	2f                   	das    
    199b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    19a2:	00 00                	add    BYTE PTR [eax],al
    19a4:	73 74                	jae    1a1a <sysEnter_Vector-0x12e5e6>
    19a6:	72 74                	jb     1a1c <sysEnter_Vector-0x12e5e4>
    19a8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    19a9:	6c                   	ins    BYTE PTR es:[edi],dx
    19aa:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19ad:	01 00                	add    DWORD PTR [eax],eax
    19af:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    19b2:	6c                   	ins    BYTE PTR es:[edi],dx
    19b3:	6c                   	ins    BYTE PTR es:[edi],dx
    19b4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    19b5:	63 2e                	arpl   WORD PTR [esi],bp
    19b7:	68 00 02 00 00       	push   0x200
    19bc:	6c                   	ins    BYTE PTR es:[edi],dx
    19bd:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    19c4:	4f                   	dec    edi
    19c5:	53                   	push   ebx
    19c6:	2e                   	cs
    19c7:	68 00 02 00 00       	push   0x200
    19cc:	73 74                	jae    1a42 <sysEnter_Vector-0x12e5be>
    19ce:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    19d5:	63 
    19d6:	2e                   	cs
    19d7:	68 00 03 00 00       	push   0x300
    19dc:	00 00                	add    BYTE PTR [eax],al
    19de:	05 02 d0 2b 00       	add    eax,0x2bd002
    19e3:	9f                   	lahf   
    19e4:	03 d7                	add    edx,edi
    19e6:	00 01                	add    BYTE PTR [ecx],al
    19e8:	08 2f                	or     BYTE PTR [edi],ch
    19ea:	40                   	inc    eax
    19eb:	00 02                	add    BYTE PTR [edx],al
    19ed:	04 01                	add    al,0x1
    19ef:	7c 00                	jl     19f1 <sysEnter_Vector-0x12e60f>
    19f1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    19f4:	ad                   	lods   eax,DWORD PTR ds:[esi]
    19f5:	59                   	pop    ecx
    19f6:	59                   	pop    ecx
    19f7:	75 c9                	jne    19c2 <sysEnter_Vector-0x12e63e>
    19f9:	59                   	pop    ecx
    19fa:	ad                   	lods   eax,DWORD PTR ds:[esi]
    19fb:	00 02                	add    BYTE PTR [edx],al
    19fd:	04 02                	add    al,0x2
    19ff:	06                   	push   es
    1a00:	66                   	data16
    1a01:	00 02                	add    BYTE PTR [edx],al
    1a03:	04 03                	add    al,0x3
    1a05:	66 06                	pushw  es
    1a07:	59                   	pop    ecx
    1a08:	00 02                	add    BYTE PTR [edx],al
    1a0a:	04 01                	add    al,0x1
    1a0c:	06                   	push   es
    1a0d:	74 06                	je     1a15 <sysEnter_Vector-0x12e5eb>
    1a0f:	75 91                	jne    19a2 <sysEnter_Vector-0x12e65e>
    1a11:	3d 76 67 00 02       	cmp    eax,0x2006776
    1a16:	04 01                	add    al,0x1
    1a18:	06                   	push   es
    1a19:	58                   	pop    eax
    1a1a:	00 02                	add    BYTE PTR [edx],al
    1a1c:	04 02                	add    al,0x2
    1a1e:	74 00                	je     1a20 <sysEnter_Vector-0x12e5e0>
    1a20:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1a23:	58                   	pop    eax
    1a24:	06                   	push   es
    1a25:	03 13                	add    edx,DWORD PTR [ebx]
    1a27:	3c 00                	cmp    al,0x0
    1a29:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a2c:	06                   	push   es
    1a2d:	66                   	data16
    1a2e:	00 02                	add    BYTE PTR [edx],al
    1a30:	04 02                	add    al,0x2
    1a32:	74 00                	je     1a34 <sysEnter_Vector-0x12e5cc>
    1a34:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1a37:	06                   	push   es
    1a38:	59                   	pop    ecx
    1a39:	00 02                	add    BYTE PTR [edx],al
    1a3b:	04 04                	add    al,0x4
    1a3d:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1a43:	f3 9f                	repz lahf 
    1a45:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1a49:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a4c:	06                   	push   es
    1a4d:	58                   	pop    eax
    1a4e:	00 02                	add    BYTE PTR [edx],al
    1a50:	04 03                	add    al,0x3
    1a52:	58                   	pop    eax
    1a53:	00 02                	add    BYTE PTR [edx],al
    1a55:	04 04                	add    al,0x4
    1a57:	74 00                	je     1a59 <sysEnter_Vector-0x12e5a7>
    1a59:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a5c:	58                   	pop    eax
    1a5d:	06                   	push   es
    1a5e:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1a61:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a64:	06                   	push   es
    1a65:	66                   	data16
    1a66:	00 02                	add    BYTE PTR [edx],al
    1a68:	04 02                	add    al,0x2
    1a6a:	58                   	pop    eax
    1a6b:	00 02                	add    BYTE PTR [edx],al
    1a6d:	04 03                	add    al,0x3
    1a6f:	58                   	pop    eax
    1a70:	06                   	push   es
    1a71:	59                   	pop    ecx
    1a72:	76 59                	jbe    1acd <sysEnter_Vector-0x12e533>
    1a74:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1a78:	03 10                	add    edx,DWORD PTR [eax]
    1a7a:	ac                   	lods   al,BYTE PTR ds:[esi]
    1a7b:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1a7e:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1a81:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1a84:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a87:	06                   	push   es
    1a88:	66                   	data16
    1a89:	00 02                	add    BYTE PTR [edx],al
    1a8b:	04 02                	add    al,0x2
    1a8d:	74 00                	je     1a8f <sysEnter_Vector-0x12e571>
    1a8f:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1a92:	58                   	pop    eax
    1a93:	06                   	push   es
    1a94:	4b                   	dec    ebx
    1a95:	67 2f                	addr16 das 
    1a97:	67 00 02             	add    BYTE PTR [bp+si],al
    1a9a:	04 01                	add    al,0x1
    1a9c:	06                   	push   es
    1a9d:	66                   	data16
    1a9e:	00 02                	add    BYTE PTR [edx],al
    1aa0:	04 02                	add    al,0x2
    1aa2:	58                   	pop    eax
    1aa3:	00 02                	add    BYTE PTR [edx],al
    1aa5:	04 04                	add    al,0x4
    1aa7:	3c 06                	cmp    al,0x6
    1aa9:	59                   	pop    ecx
    1aaa:	2f                   	das    
    1aab:	02 08                	add    cl,BYTE PTR [eax]
    1aad:	00 01                	add    BYTE PTR [ecx],al
    1aaf:	01 cf                	add    edi,ecx
    1ab1:	00 00                	add    BYTE PTR [eax],al
    1ab3:	00 02                	add    BYTE PTR [edx],al
    1ab5:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    1abb:	01 fb                	add    ebx,edi
    1abd:	0e                   	push   cs
    1abe:	0d 00 01 01 01       	or     eax,0x1010100
    1ac3:	01 00                	add    DWORD PTR [eax],eax
    1ac5:	00 00                	add    BYTE PTR [eax],al
    1ac7:	01 00                	add    DWORD PTR [eax],eax
    1ac9:	00 01                	add    BYTE PTR [ecx],al
    1acb:	73 72                	jae    1b3f <sysEnter_Vector-0x12e4c1>
    1acd:	63 2f                	arpl   WORD PTR [edi],bp
    1acf:	73 74                	jae    1b45 <sysEnter_Vector-0x12e4bb>
    1ad1:	72 69                	jb     1b3c <sysEnter_Vector-0x12e4c4>
    1ad3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ad4:	67 73 00             	addr16 jae 1ad7 <sysEnter_Vector-0x12e529>
    1ad7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1ade:	00 2f                	add    BYTE PTR [edi],ch
    1ae0:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ae5:	79 6f                	jns    1b56 <sysEnter_Vector-0x12e4aa>
    1ae7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1aee:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1af1:	73 73                	jae    1b66 <sysEnter_Vector-0x12e49a>
    1af3:	2f                   	das    
    1af4:	6c                   	ins    BYTE PTR es:[edi],dx
    1af5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1afc:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1b02:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1b08:	78 2d                	js     1b37 <sysEnter_Vector-0x12e4c9>
    1b0a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1b0c:	75 2f                	jne    1b3d <sysEnter_Vector-0x12e4c3>
    1b0e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1b13:	2f                   	das    
    1b14:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b1b:	00 00                	add    BYTE PTR [eax],al
    1b1d:	73 74                	jae    1b93 <sysEnter_Vector-0x12e46d>
    1b1f:	72 74                	jb     1b95 <sysEnter_Vector-0x12e46b>
    1b21:	72 69                	jb     1b8c <sysEnter_Vector-0x12e474>
    1b23:	6d                   	ins    DWORD PTR es:[edi],dx
    1b24:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1b27:	01 00                	add    DWORD PTR [eax],eax
    1b29:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1b2c:	6c                   	ins    BYTE PTR es:[edi],dx
    1b2d:	6c                   	ins    BYTE PTR es:[edi],dx
    1b2e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1b2f:	63 2e                	arpl   WORD PTR [esi],bp
    1b31:	68 00 02 00 00       	push   0x200
    1b36:	6c                   	ins    BYTE PTR es:[edi],dx
    1b37:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1b3e:	4f                   	dec    edi
    1b3f:	53                   	push   ebx
    1b40:	2e                   	cs
    1b41:	68 00 02 00 00       	push   0x200
    1b46:	73 74                	jae    1bbc <sysEnter_Vector-0x12e444>
    1b48:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1b4f:	63 
    1b50:	2e                   	cs
    1b51:	68 00 03 00 00       	push   0x300
    1b56:	00 00                	add    BYTE PTR [eax],al
    1b58:	05 02 6c 2d 00       	add    eax,0x2d6c02
    1b5d:	9f                   	lahf   
    1b5e:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1b63:	48                   	dec    eax
    1b64:	b3 08                	mov    bl,0x8
    1b66:	9f                   	lahf   
    1b67:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1b6d:	06                   	push   es
    1b6e:	82                   	(bad)  
    1b6f:	06                   	push   es
    1b70:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1b71:	84 00                	test   BYTE PTR [eax],al
    1b73:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b76:	06                   	push   es
    1b77:	20 06                	and    BYTE PTR [esi],al
    1b79:	08 ca                	or     dl,cl
    1b7b:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1b81:	01 01                	add    DWORD PTR [ecx],eax
    1b83:	de 00                	fiadd  WORD PTR [eax]
    1b85:	00 00                	add    BYTE PTR [eax],al
    1b87:	02 00                	add    al,BYTE PTR [eax]
    1b89:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1b8a:	00 00                	add    BYTE PTR [eax],al
    1b8c:	00 01                	add    BYTE PTR [ecx],al
    1b8e:	01 fb                	add    ebx,edi
    1b90:	0e                   	push   cs
    1b91:	0d 00 01 01 01       	or     eax,0x1010100
    1b96:	01 00                	add    DWORD PTR [eax],eax
    1b98:	00 00                	add    BYTE PTR [eax],al
    1b9a:	01 00                	add    DWORD PTR [eax],eax
    1b9c:	00 01                	add    BYTE PTR [ecx],al
    1b9e:	73 72                	jae    1c12 <sysEnter_Vector-0x12e3ee>
    1ba0:	63 00                	arpl   WORD PTR [eax],ax
    1ba2:	2f                   	das    
    1ba3:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ba8:	79 6f                	jns    1c19 <sysEnter_Vector-0x12e3e7>
    1baa:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1bb1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1bb4:	73 73                	jae    1c29 <sysEnter_Vector-0x12e3d7>
    1bb6:	2f                   	das    
    1bb7:	6c                   	ins    BYTE PTR es:[edi],dx
    1bb8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1bbf:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1bc5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1bcb:	78 2d                	js     1bfa <sysEnter_Vector-0x12e406>
    1bcd:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1bcf:	75 2f                	jne    1c00 <sysEnter_Vector-0x12e400>
    1bd1:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1bd6:	2f                   	das    
    1bd7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1bde:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1be1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1be5:	65 00 00             	add    BYTE PTR gs:[eax],al
    1be8:	73 74                	jae    1c5e <sysEnter_Vector-0x12e3a2>
    1bea:	72 72                	jb     1c5e <sysEnter_Vector-0x12e3a2>
    1bec:	65                   	gs
    1bed:	70 6c                	jo     1c5b <sysEnter_Vector-0x12e3a5>
    1bef:	61                   	popa   
    1bf0:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1bf3:	63 00                	arpl   WORD PTR [eax],ax
    1bf5:	01 00                	add    DWORD PTR [eax],eax
    1bf7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1bfa:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1c01:	63 
    1c02:	2e                   	cs
    1c03:	68 00 02 00 00       	push   0x200
    1c08:	73 74                	jae    1c7e <sysEnter_Vector-0x12e382>
    1c0a:	64                   	fs
    1c0b:	64                   	fs
    1c0c:	65                   	gs
    1c0d:	66                   	data16
    1c0e:	2e                   	cs
    1c0f:	68 00 02 00 00       	push   0x200
    1c14:	6d                   	ins    DWORD PTR es:[edi],dx
    1c15:	61                   	popa   
    1c16:	6c                   	ins    BYTE PTR es:[edi],dx
    1c17:	6c                   	ins    BYTE PTR es:[edi],dx
    1c18:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c19:	63 2e                	arpl   WORD PTR [esi],bp
    1c1b:	68 00 03 00 00       	push   0x300
    1c20:	6c                   	ins    BYTE PTR es:[edi],dx
    1c21:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1c28:	4f                   	dec    edi
    1c29:	53                   	push   ebx
    1c2a:	2e                   	cs
    1c2b:	68 00 03 00 00       	push   0x300
    1c30:	00 00                	add    BYTE PTR [eax],al
    1c32:	05 02 24 2e 00       	add    eax,0x2e2402
    1c37:	9f                   	lahf   
    1c38:	03 0a                	add    ecx,DWORD PTR [edx]
    1c3a:	01 08                	add    DWORD PTR [eax],ecx
    1c3c:	2f                   	das    
    1c3d:	08 3e                	or     BYTE PTR [esi],bh
    1c3f:	08 14 77             	or     BYTE PTR [edi+esi*2],dl
    1c42:	5a                   	pop    edx
    1c43:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1c46:	cb                   	retf   
    1c47:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1c4a:	2a 13                	sub    dl,BYTE PTR [ebx]
    1c4c:	08 3f                	or     BYTE PTR [edi],bh
    1c4e:	02 28                	add    ch,BYTE PTR [eax]
    1c50:	13 03                	adc    eax,DWORD PTR [ebx]
    1c52:	72 08                	jb     1c5c <sysEnter_Vector-0x12e3a4>
    1c54:	12 03                	adc    al,BYTE PTR [ebx]
    1c56:	12 08                	adc    cl,BYTE PTR [eax]
    1c58:	c8 08 68 3d          	enter  0x6808,0x3d
    1c5c:	77 f3                	ja     1c51 <sysEnter_Vector-0x12e3af>
    1c5e:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1c64:	01 e9                	add    ecx,ebp
    1c66:	00 00                	add    BYTE PTR [eax],al
    1c68:	00 02                	add    BYTE PTR [edx],al
    1c6a:	00 94 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],dl
    1c71:	fb                   	sti    
    1c72:	0e                   	push   cs
    1c73:	0d 00 01 01 01       	or     eax,0x1010100
    1c78:	01 00                	add    DWORD PTR [eax],eax
    1c7a:	00 00                	add    BYTE PTR [eax],al
    1c7c:	01 00                	add    DWORD PTR [eax],eax
    1c7e:	00 01                	add    BYTE PTR [ecx],al
    1c80:	73 72                	jae    1cf4 <sysEnter_Vector-0x12e30c>
    1c82:	63 00                	arpl   WORD PTR [eax],ax
    1c84:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1c8b:	00 2f                	add    BYTE PTR [edi],ch
    1c8d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1c92:	79 6f                	jns    1d03 <sysEnter_Vector-0x12e2fd>
    1c94:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1c9b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1c9e:	73 73                	jae    1d13 <sysEnter_Vector-0x12e2ed>
    1ca0:	2f                   	das    
    1ca1:	6c                   	ins    BYTE PTR es:[edi],dx
    1ca2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1ca9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1caf:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1cb5:	78 2d                	js     1ce4 <sysEnter_Vector-0x12e31c>
    1cb7:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1cb9:	75 2f                	jne    1cea <sysEnter_Vector-0x12e316>
    1cbb:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1cc0:	2f                   	das    
    1cc1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1cc8:	00 00                	add    BYTE PTR [eax],al
    1cca:	73 74                	jae    1d40 <sysEnter_Vector-0x12e2c0>
    1ccc:	72 73                	jb     1d41 <sysEnter_Vector-0x12e2bf>
    1cce:	74 72                	je     1d42 <sysEnter_Vector-0x12e2be>
    1cd0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1cd3:	01 00                	add    DWORD PTR [eax],eax
    1cd5:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1cd8:	6c                   	ins    BYTE PTR es:[edi],dx
    1cd9:	6c                   	ins    BYTE PTR es:[edi],dx
    1cda:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1cdb:	63 2e                	arpl   WORD PTR [esi],bp
    1cdd:	68 00 02 00 00       	push   0x200
    1ce2:	6c                   	ins    BYTE PTR es:[edi],dx
    1ce3:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1cea:	4f                   	dec    edi
    1ceb:	53                   	push   ebx
    1cec:	2e                   	cs
    1ced:	68 00 02 00 00       	push   0x200
    1cf2:	73 74                	jae    1d68 <sysEnter_Vector-0x12e298>
    1cf4:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1cfb:	63 
    1cfc:	2e                   	cs
    1cfd:	68 00 03 00 00       	push   0x300
    1d02:	00 00                	add    BYTE PTR [eax],al
    1d04:	05 02 90 2f 00       	add    eax,0x2f9002
    1d09:	9f                   	lahf   
    1d0a:	03 33                	add    esi,DWORD PTR [ebx]
    1d0c:	01 08                	add    DWORD PTR [eax],ecx
    1d0e:	27                   	daa    
    1d0f:	68 3d 75 5b c9       	push   0xc95b753d
    1d14:	c9                   	leave  
    1d15:	5b                   	pop    ebx
    1d16:	3e                   	ds
    1d17:	75 5a                	jne    1d73 <sysEnter_Vector-0x12e28d>
    1d19:	c9                   	leave  
    1d1a:	59                   	pop    ecx
    1d1b:	08 3f                	or     BYTE PTR [edi],bh
    1d1d:	2c 23                	sub    al,0x23
    1d1f:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1d22:	1c 00                	sbb    al,0x0
    1d24:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d27:	06                   	push   es
    1d28:	4a                   	dec    edx
    1d29:	06                   	push   es
    1d2a:	03 13                	add    edx,DWORD PTR [ebx]
    1d2c:	9e                   	sahf   
    1d2d:	59                   	pop    ecx
    1d2e:	77 ec                	ja     1d1c <sysEnter_Vector-0x12e2e4>
    1d30:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1d35:	75 5a                	jne    1d91 <sysEnter_Vector-0x12e26f>
    1d37:	08 3f                	or     BYTE PTR [edi],bh
    1d39:	2c 23                	sub    al,0x23
    1d3b:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1d3e:	1e                   	push   ds
    1d3f:	00 02                	add    BYTE PTR [edx],al
    1d41:	04 01                	add    al,0x1
    1d43:	06                   	push   es
    1d44:	4a                   	dec    edx
    1d45:	06                   	push   es
    1d46:	03 0f                	add    ecx,DWORD PTR [edi]
    1d48:	9e                   	sahf   
    1d49:	59                   	pop    ecx
    1d4a:	4d                   	dec    ebp
    1d4b:	c9                   	leave  
    1d4c:	d7                   	xlat   BYTE PTR ds:[ebx]
    1d4d:	02 02                	add    al,BYTE PTR [edx]
    1d4f:	00 01                	add    BYTE PTR [ecx],al
    1d51:	01 43 03             	add    DWORD PTR [ebx+0x3],eax
    1d54:	00 00                	add    BYTE PTR [eax],al
    1d56:	02 00                	add    al,BYTE PTR [eax]
    1d58:	cc                   	int3   
    1d59:	00 00                	add    BYTE PTR [eax],al
    1d5b:	00 01                	add    BYTE PTR [ecx],al
    1d5d:	01 fb                	add    ebx,edi
    1d5f:	0e                   	push   cs
    1d60:	0d 00 01 01 01       	or     eax,0x1010100
    1d65:	01 00                	add    DWORD PTR [eax],eax
    1d67:	00 00                	add    BYTE PTR [eax],al
    1d69:	01 00                	add    DWORD PTR [eax],eax
    1d6b:	00 01                	add    BYTE PTR [ecx],al
    1d6d:	73 72                	jae    1de1 <sysEnter_Vector-0x12e21f>
    1d6f:	63 00                	arpl   WORD PTR [eax],ax
    1d71:	2f                   	das    
    1d72:	68 6f 6d 65 2f       	push   0x2f656d6f
    1d77:	79 6f                	jns    1de8 <sysEnter_Vector-0x12e218>
    1d79:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1d80:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1d83:	73 73                	jae    1df8 <sysEnter_Vector-0x12e208>
    1d85:	2f                   	das    
    1d86:	6c                   	ins    BYTE PTR es:[edi],dx
    1d87:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1d8e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1d94:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1d9a:	78 2d                	js     1dc9 <sysEnter_Vector-0x12e237>
    1d9c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1d9e:	75 2f                	jne    1dcf <sysEnter_Vector-0x12e231>
    1da0:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1da5:	2f                   	das    
    1da6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1dad:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1db0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1db4:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1db7:	2e                   	cs
    1db8:	2f                   	das    
    1db9:	2e                   	cs
    1dba:	2e                   	cs
    1dbb:	2f                   	das    
    1dbc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1dc0:	6a 2f                	push   0x2f
    1dc2:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1dc5:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1dcc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1dcd:	65                   	gs
    1dce:	6c                   	ins    BYTE PTR es:[edi],dx
    1dcf:	2f                   	das    
    1dd0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1dd7:	00 00                	add    BYTE PTR [eax],al
    1dd9:	74 69                	je     1e44 <sysEnter_Vector-0x12e1bc>
    1ddb:	6d                   	ins    DWORD PTR es:[edi],dx
    1ddc:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1de0:	01 00                	add    DWORD PTR [eax],eax
    1de2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1de5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1dec:	63 
    1ded:	2e                   	cs
    1dee:	68 00 02 00 00       	push   0x200
    1df3:	74 69                	je     1e5e <sysEnter_Vector-0x12e1a2>
    1df5:	6d                   	ins    DWORD PTR es:[edi],dx
    1df6:	65                   	gs
    1df7:	2e                   	cs
    1df8:	68 00 03 00 00       	push   0x300
    1dfd:	6d                   	ins    DWORD PTR es:[edi],dx
    1dfe:	61                   	popa   
    1dff:	6c                   	ins    BYTE PTR es:[edi],dx
    1e00:	6c                   	ins    BYTE PTR es:[edi],dx
    1e01:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1e02:	63 2e                	arpl   WORD PTR [esi],bp
    1e04:	68 00 03 00 00       	push   0x300
    1e09:	6c                   	ins    BYTE PTR es:[edi],dx
    1e0a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1e11:	4f                   	dec    edi
    1e12:	53                   	push   ebx
    1e13:	2e                   	cs
    1e14:	68 00 03 00 00       	push   0x300
    1e19:	73 79                	jae    1e94 <sysEnter_Vector-0x12e16c>
    1e1b:	73 63                	jae    1e80 <sysEnter_Vector-0x12e180>
    1e1d:	61                   	popa   
    1e1e:	6c                   	ins    BYTE PTR es:[edi],dx
    1e1f:	6c                   	ins    BYTE PTR es:[edi],dx
    1e20:	73 2e                	jae    1e50 <sysEnter_Vector-0x12e1b0>
    1e22:	68 00 04 00 00       	push   0x400
    1e27:	00 00                	add    BYTE PTR [eax],al
    1e29:	05 02 bc 30 00       	add    eax,0x30bc02
    1e2e:	9f                   	lahf   
    1e2f:	03 17                	add    edx,DWORD PTR [edi]
    1e31:	01 08                	add    DWORD PTR [eax],ecx
    1e33:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1e36:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1e3c:	76 02                	jbe    1e40 <sysEnter_Vector-0x12e1c0>
    1e3e:	24 13                	and    al,0x13
    1e40:	08 22                	or     BYTE PTR [edx],ah
    1e42:	02 2e                	add    ch,BYTE PTR [esi]
    1e44:	13 02                	adc    eax,DWORD PTR [edx]
    1e46:	2f                   	das    
    1e47:	13 08                	adc    ecx,DWORD PTR [eax]
    1e49:	67 02 2d             	add    ch,BYTE PTR [di]
    1e4c:	13 2f                	adc    ebp,DWORD PTR [edi]
    1e4e:	00 02                	add    BYTE PTR [edx],al
    1e50:	04 01                	add    al,0x1
    1e52:	06                   	push   es
    1e53:	9e                   	sahf   
    1e54:	00 02                	add    BYTE PTR [edx],al
    1e56:	04 04                	add    al,0x4
    1e58:	02 23                	add    ah,BYTE PTR [ebx]
    1e5a:	12 00                	adc    al,BYTE PTR [eax]
    1e5c:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1e63:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e66:	74 00                	je     1e68 <sysEnter_Vector-0x12e198>
    1e68:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1e6b:	58                   	pop    eax
    1e6c:	00 02                	add    BYTE PTR [edx],al
    1e6e:	04 08                	add    al,0x8
    1e70:	06                   	push   es
    1e71:	3d 48 00 02 04       	cmp    eax,0x4020048
    1e76:	01 06                	add    DWORD PTR [esi],eax
    1e78:	9e                   	sahf   
    1e79:	00 02                	add    BYTE PTR [edx],al
    1e7b:	04 04                	add    al,0x4
    1e7d:	02 23                	add    ah,BYTE PTR [ebx]
    1e7f:	12 00                	adc    al,BYTE PTR [eax]
    1e81:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1e88:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e8b:	74 00                	je     1e8d <sysEnter_Vector-0x12e173>
    1e8d:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1e90:	58                   	pop    eax
    1e91:	06                   	push   es
    1e92:	94                   	xchg   esp,eax
    1e93:	e5 91                	in     eax,0x91
    1e95:	9f                   	lahf   
    1e96:	59                   	pop    ecx
    1e97:	00 02                	add    BYTE PTR [edx],al
    1e99:	04 01                	add    al,0x1
    1e9b:	06                   	push   es
    1e9c:	9e                   	sahf   
    1e9d:	00 02                	add    BYTE PTR [edx],al
    1e9f:	04 04                	add    al,0x4
    1ea1:	02 23                	add    ah,BYTE PTR [ebx]
    1ea3:	12 00                	adc    al,BYTE PTR [eax]
    1ea5:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1eac:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1eaf:	74 00                	je     1eb1 <sysEnter_Vector-0x12e14f>
    1eb1:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1eb4:	58                   	pop    eax
    1eb5:	00 02                	add    BYTE PTR [edx],al
    1eb7:	04 08                	add    al,0x8
    1eb9:	06                   	push   es
    1eba:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1ec0:	01 06                	add    DWORD PTR [esi],eax
    1ec2:	9e                   	sahf   
    1ec3:	00 02                	add    BYTE PTR [edx],al
    1ec5:	04 04                	add    al,0x4
    1ec7:	02 23                	add    ah,BYTE PTR [ebx]
    1ec9:	12 00                	adc    al,BYTE PTR [eax]
    1ecb:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1ed2:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ed5:	74 00                	je     1ed7 <sysEnter_Vector-0x12e129>
    1ed7:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1eda:	58                   	pop    eax
    1edb:	06                   	push   es
    1edc:	08 f6                	or     dh,dh
    1ede:	d7                   	xlat   BYTE PTR ds:[ebx]
    1edf:	9f                   	lahf   
    1ee0:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    1ee5:	08 15 08 75 08 75    	or     BYTE PTR ds:0x75087508,dl
    1eeb:	5b                   	pop    ebx
    1eec:	f5                   	cmc    
    1eed:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    1ef3:	30 08                	xor    BYTE PTR [eax],cl
    1ef5:	44                   	inc    esp
    1ef6:	02 2e                	add    ch,BYTE PTR [esi]
    1ef8:	13 02                	adc    eax,DWORD PTR [edx]
    1efa:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1efc:	91                   	xchg   ecx,eax
    1efd:	c9                   	leave  
    1efe:	e6 02                	out    0x2,al
    1f00:	2f                   	das    
    1f01:	13 02                	adc    eax,DWORD PTR [edx]
    1f03:	3c 13                	cmp    al,0x13
    1f05:	9f                   	lahf   
    1f06:	e5 e6                	in     eax,0xe6
    1f08:	08 c9                	or     cl,cl
    1f0a:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1f0d:	9f                   	lahf   
    1f0e:	e5 4c                	in     eax,0x4c
    1f10:	02 29                	add    ch,BYTE PTR [ecx]
    1f12:	13 02                	adc    eax,DWORD PTR [edx]
    1f14:	2b 13                	sub    edx,DWORD PTR [ebx]
    1f16:	9f                   	lahf   
    1f17:	e5 e6                	in     eax,0xe6
    1f19:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1f1e:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1f23:	06                   	push   es
    1f24:	c8 00 02 04          	enter  0x200,0x4
    1f28:	04 02                	add    al,0x2
    1f2a:	2c 12                	sub    al,0x12
    1f2c:	00 02                	add    BYTE PTR [edx],al
    1f2e:	04 05                	add    al,0x5
    1f30:	02 2f                	add    ch,BYTE PTR [edi]
    1f32:	12 00                	adc    al,BYTE PTR [eax]
    1f34:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1f37:	74 00                	je     1f39 <sysEnter_Vector-0x12e0c7>
    1f39:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1f3c:	58                   	pop    eax
    1f3d:	06                   	push   es
    1f3e:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1f44:	04 01                	add    al,0x1
    1f46:	06                   	push   es
    1f47:	c8 00 02 04          	enter  0x200,0x4
    1f4b:	04 02                	add    al,0x2
    1f4d:	2c 12                	sub    al,0x12
    1f4f:	00 02                	add    BYTE PTR [edx],al
    1f51:	04 05                	add    al,0x5
    1f53:	02 2f                	add    ch,BYTE PTR [edi]
    1f55:	12 00                	adc    al,BYTE PTR [eax]
    1f57:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1f5a:	74 00                	je     1f5c <sysEnter_Vector-0x12e0a4>
    1f5c:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1f5f:	58                   	pop    eax
    1f60:	00 02                	add    BYTE PTR [edx],al
    1f62:	04 08                	add    al,0x8
    1f64:	06                   	push   es
    1f65:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1f6b:	00 02                	add    BYTE PTR [edx],al
    1f6d:	04 01                	add    al,0x1
    1f6f:	06                   	push   es
    1f70:	c8 00 02 04          	enter  0x200,0x4
    1f74:	04 02                	add    al,0x2
    1f76:	2c 12                	sub    al,0x12
    1f78:	00 02                	add    BYTE PTR [edx],al
    1f7a:	04 05                	add    al,0x5
    1f7c:	02 2f                	add    ch,BYTE PTR [edi]
    1f7e:	12 00                	adc    al,BYTE PTR [eax]
    1f80:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1f83:	74 00                	je     1f85 <sysEnter_Vector-0x12e07b>
    1f85:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1f88:	58                   	pop    eax
    1f89:	06                   	push   es
    1f8a:	08 f9                	or     cl,bh
    1f8c:	bb 75 00 02 04       	mov    ebx,0x4020075
    1f91:	01 06                	add    DWORD PTR [esi],eax
    1f93:	08 2e                	or     BYTE PTR [esi],ch
    1f95:	06                   	push   es
    1f96:	9f                   	lahf   
    1f97:	75 75                	jne    200e <sysEnter_Vector-0x12dff2>
    1f99:	7b d8                	jnp    1f73 <sysEnter_Vector-0x12e08d>
    1f9b:	00 02                	add    BYTE PTR [edx],al
    1f9d:	04 01                	add    al,0x1
    1f9f:	06                   	push   es
    1fa0:	c8 06 75 e5          	enter  0x7506,0xe5
    1fa4:	00 02                	add    BYTE PTR [edx],al
    1fa6:	04 01                	add    al,0x1
    1fa8:	06                   	push   es
    1fa9:	02 22                	add    ah,BYTE PTR [edx]
    1fab:	12 06                	adc    al,BYTE PTR [esi]
    1fad:	4b                   	dec    ebx
    1fae:	00 02                	add    BYTE PTR [edx],al
    1fb0:	04 01                	add    al,0x1
    1fb2:	06                   	push   es
    1fb3:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1fb9:	02 22                	add    ah,BYTE PTR [edx]
    1fbb:	12 00                	adc    al,BYTE PTR [eax]
    1fbd:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1fc0:	74 00                	je     1fc2 <sysEnter_Vector-0x12e03e>
    1fc2:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1fc5:	58                   	pop    eax
    1fc6:	00 02                	add    BYTE PTR [edx],al
    1fc8:	04 06                	add    al,0x6
    1fca:	06                   	push   es
    1fcb:	59                   	pop    ecx
    1fcc:	00 02                	add    BYTE PTR [edx],al
    1fce:	04 01                	add    al,0x1
    1fd0:	06                   	push   es
    1fd1:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1fd4:	00 02                	add    BYTE PTR [edx],al
    1fd6:	04 03                	add    al,0x3
    1fd8:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1fdb:	00 02                	add    BYTE PTR [edx],al
    1fdd:	04 04                	add    al,0x4
    1fdf:	74 00                	je     1fe1 <sysEnter_Vector-0x12e01f>
    1fe1:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1fe4:	58                   	pop    eax
    1fe5:	00 02                	add    BYTE PTR [edx],al
    1fe7:	04 06                	add    al,0x6
    1fe9:	06                   	push   es
    1fea:	59                   	pop    ecx
    1feb:	00 02                	add    BYTE PTR [edx],al
    1fed:	04 01                	add    al,0x1
    1fef:	06                   	push   es
    1ff0:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1ff3:	00 02                	add    BYTE PTR [edx],al
    1ff5:	04 03                	add    al,0x3
    1ff7:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1ffa:	00 02                	add    BYTE PTR [edx],al
    1ffc:	04 04                	add    al,0x4
    1ffe:	74 00                	je     2000 <sysEnter_Vector-0x12e000>
    2000:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2003:	58                   	pop    eax
    2004:	00 02                	add    BYTE PTR [edx],al
    2006:	04 06                	add    al,0x6
    2008:	06                   	push   es
    2009:	5a                   	pop    edx
    200a:	00 02                	add    BYTE PTR [edx],al
    200c:	04 06                	add    al,0x6
    200e:	c9                   	leave  
    200f:	2f                   	das    
    2010:	00 02                	add    BYTE PTR [edx],al
    2012:	04 01                	add    al,0x1
    2014:	06                   	push   es
    2015:	9e                   	sahf   
    2016:	00 02                	add    BYTE PTR [edx],al
    2018:	04 04                	add    al,0x4
    201a:	02 23                	add    ah,BYTE PTR [ebx]
    201c:	12 00                	adc    al,BYTE PTR [eax]
    201e:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2025:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2028:	74 00                	je     202a <sysEnter_Vector-0x12dfd6>
    202a:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    202d:	58                   	pop    eax
    202e:	00 02                	add    BYTE PTR [edx],al
    2030:	04 08                	add    al,0x8
    2032:	06                   	push   es
    2033:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    2036:	e8 bb 00 02 04       	call   40220f6 <sysEnter_Vector+0x3ef20f6>
    203b:	01 06                	add    DWORD PTR [esi],eax
    203d:	ba 06 4b 68 91       	mov    edx,0x91684b06
    2042:	02 31                	add    dh,BYTE PTR [ecx]
    2044:	14 02                	adc    al,0x2
    2046:	2c 14                	sub    al,0x14
    2048:	00 02                	add    BYTE PTR [edx],al
    204a:	04 01                	add    al,0x1
    204c:	06                   	push   es
    204d:	02 29                	add    ch,BYTE PTR [ecx]
    204f:	12 06                	adc    al,BYTE PTR [esi]
    2051:	4b                   	dec    ebx
    2052:	bd 00 02 04 01       	mov    ebp,0x1040200
    2057:	06                   	push   es
    2058:	ba 00 02 04 03       	mov    edx,0x3040200
    205d:	06                   	push   es
    205e:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    2061:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    2064:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    206b:	77 00                	ja     206d <sysEnter_Vector-0x12df93>
    206d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    2070:	06                   	push   es
    2071:	82                   	(bad)  
    2072:	06                   	push   es
    2073:	4b                   	dec    ebx
    2074:	68 00 02 04 01       	push   0x1040200
    2079:	06                   	push   es
    207a:	66 06                	pushw  es
    207c:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    2082:	08 f3                	or     bl,dh
    2084:	67 08 14             	or     BYTE PTR [si],dl
    2087:	00 02                	add    BYTE PTR [edx],al
    2089:	04 01                	add    al,0x1
    208b:	e5 77                	in     eax,0x77
    208d:	08 21                	or     BYTE PTR [ecx],ah
    208f:	08 2f                	or     BYTE PTR [edi],ch
    2091:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    2097:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 74                	jae    84 <sysEnter_Vector-0x12ff7c>
  10:	72 63                	jb     75 <sysEnter_Vector-0x12ff8b>
  12:	68 72 00 2f 68       	push   0x682f0072
  17:	6f                   	outs   dx,DWORD PTR ds:[esi]
  18:	6d                   	ins    DWORD PTR es:[edi],dx
  19:	65                   	gs
  1a:	2f                   	das    
  1b:	79 6f                	jns    8c <sysEnter_Vector-0x12ff74>
  1d:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  24:	6f                   	outs   dx,DWORD PTR ds:[esi]
  25:	73 2f                	jae    56 <sysEnter_Vector-0x12ffaa>
  27:	61                   	popa   
  28:	70 72                	jo     9c <sysEnter_Vector-0x12ff64>
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	6a 2f                	push   0x2f
  2d:	6c                   	ins    BYTE PTR es:[edi],dx
  2e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  35:	4f                   	dec    edi
  36:	53                   	push   ebx
  37:	00 70 72             	add    BYTE PTR [eax+0x72],dh
  3a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  3b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  3e:	73 45                	jae    85 <sysEnter_Vector-0x12ff7b>
  40:	6e                   	outs   dx,BYTE PTR ds:[esi]
  41:	76 70                	jbe    b3 <sysEnter_Vector-0x12ff4d>
  43:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  47:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  4b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  4c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  50:	73 69                	jae    bb <sysEnter_Vector-0x12ff45>
  52:	67 6e                	outs   dx,BYTE PTR ds:[si]
  54:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  59:	74 00                	je     5b <sysEnter_Vector-0x12ffa5>
  5b:	68 65 61 70 42       	push   0x42706165
  60:	61                   	popa   
  61:	73 65                	jae    c8 <sysEnter_Vector-0x12ff38>
  63:	00 68 65             	add    BYTE PTR [eax+0x65],ch
  66:	61                   	popa   
  67:	70 45                	jo     ae <sysEnter_Vector-0x12ff52>
  69:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6a:	64 00 75 6e          	add    BYTE PTR fs:[ebp+0x6e],dh
  6e:	73 69                	jae    d9 <sysEnter_Vector-0x12ff27>
  70:	67 6e                	outs   dx,BYTE PTR ds:[si]
  72:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  77:	61                   	popa   
  78:	72 00                	jb     7a <sysEnter_Vector-0x12ff86>
  7a:	75 69                	jne    e5 <sysEnter_Vector-0x12ff1b>
  7c:	6e                   	outs   dx,BYTE PTR ds:[esi]
  7d:	74 33                	je     b2 <sysEnter_Vector-0x12ff4e>
  7f:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  82:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
  85:	55                   	push   ebp
  86:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  89:	31 20                	xor    DWORD PTR [eax],esp
  8b:	35 2e 33 2e 30       	xor    eax,0x302e332e
  90:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
  96:	3d 69 6e 74 65       	cmp    eax,0x65746e69
  9b:	6c                   	ins    BYTE PTR es:[edi],dx
  9c:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
  a2:	65                   	gs
  a3:	3d 67 65 6e 65       	cmp    eax,0x656e6567
  a8:	72 69                	jb     113 <sysEnter_Vector-0x12feed>
  aa:	63 20                	arpl   WORD PTR [eax],sp
  ac:	2d 6d 61 72 63       	sub    eax,0x6372616d
  b1:	68 3d 70 65 6e       	push   0x6e65703d
  b6:	74 69                	je     121 <sysEnter_Vector-0x12fedf>
  b8:	75 6d                	jne    127 <sysEnter_Vector-0x12fed9>
  ba:	70 72                	jo     12e <sysEnter_Vector-0x12fed2>
  bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
  bd:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
  c3:	66                   	data16
  c4:	72 65                	jb     12b <sysEnter_Vector-0x12fed5>
  c6:	65                   	gs
  c7:	73 74                	jae    13d <sysEnter_Vector-0x12fec3>
  c9:	61                   	popa   
  ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
  cb:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
  d2:	76 
  d3:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
  da:	74 79                	je     155 <sysEnter_Vector-0x12feab>
  dc:	3d 68 69 64 64       	cmp    eax,0x64646968
  e1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
  e3:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
  e9:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ee:	6c                   	ins    BYTE PTR es:[edi],dx
  ef:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
  f3:	72 74                	jb     169 <sysEnter_Vector-0x12fe97>
  f5:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  f8:	73 69                	jae    163 <sysEnter_Vector-0x12fe9d>
  fa:	67 6e                	outs   dx,BYTE PTR ds:[si]
  fc:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
 101:	74 00                	je     103 <sysEnter_Vector-0x12fefd>
 103:	73 74                	jae    179 <sysEnter_Vector-0x12fe87>
 105:	72 63                	jb     16a <sysEnter_Vector-0x12fe96>
 107:	68 72 49 00 68       	push   0x68004972
 10c:	65                   	gs
 10d:	61                   	popa   
 10e:	70 43                	jo     153 <sysEnter_Vector-0x12fead>
 110:	75 72                	jne    184 <sysEnter_Vector-0x12fe7c>
 112:	72 00                	jb     114 <sysEnter_Vector-0x12feec>
 114:	2e                   	cs
 115:	2e                   	cs
 116:	2f                   	das    
 117:	2e                   	cs
 118:	2e                   	cs
 119:	2f                   	das    
 11a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 11e:	6a 2f                	push   0x2f
 120:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 123:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 12a:	63 2f                	arpl   WORD PTR [edi],bp
 12c:	73 74                	jae    1a2 <sysEnter_Vector-0x12fe5e>
 12e:	72 69                	jb     199 <sysEnter_Vector-0x12fe67>
 130:	6e                   	outs   dx,BYTE PTR ds:[esi]
 131:	67 73 2f             	addr16 jae 163 <sysEnter_Vector-0x12fe9d>
 134:	73 74                	jae    1aa <sysEnter_Vector-0x12fe56>
 136:	72 63                	jb     19b <sysEnter_Vector-0x12fe65>
 138:	68 72 2e 63 00       	push   0x632e72
 13d:	6c                   	ins    BYTE PTR es:[edi],dx
 13e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 13f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 140:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
 144:	75 62                	jne    1a8 <sysEnter_Vector-0x12fe58>
 146:	6c                   	ins    BYTE PTR es:[edi],dx
 147:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
 14b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 14c:	72 74                	jb     1c2 <sysEnter_Vector-0x12fe3e>
 14e:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
 151:	74 00                	je     153 <sysEnter_Vector-0x12fead>
 153:	6c                   	ins    BYTE PTR es:[edi],dx
 154:	69 62 63 54 5a 00 73 	imul   esp,DWORD PTR [edx+0x63],0x73005a54
 15b:	69 7a 65 74 79 70 65 	imul   edi,DWORD PTR [edx+0x65],0x65707974
 162:	00 2e                	add    BYTE PTR [esi],ch
 164:	2e                   	cs
 165:	2f                   	das    
 166:	2e                   	cs
 167:	2e                   	cs
 168:	2f                   	das    
 169:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 16d:	6a 2f                	push   0x2f
 16f:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 172:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 179:	63 2f                	arpl   WORD PTR [edi],bp
 17b:	73 74                	jae    1f1 <sysEnter_Vector-0x12fe0f>
 17d:	72 69                	jb     1e8 <sysEnter_Vector-0x12fe18>
 17f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 180:	67 73 2f             	addr16 jae 1b2 <sysEnter_Vector-0x12fe4e>
 183:	73 74                	jae    1f9 <sysEnter_Vector-0x12fe07>
 185:	72 63                	jb     1ea <sysEnter_Vector-0x12fe16>
 187:	73 70                	jae    1f9 <sysEnter_Vector-0x12fe07>
 189:	6e                   	outs   dx,BYTE PTR ds:[esi]
 18a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 18d:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 190:	72 73                	jb     205 <sysEnter_Vector-0x12fdfb>
 192:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	49                   	dec    ecx
 19b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19e:	72 63                	jb     203 <sysEnter_Vector-0x12fdfd>
 1a0:	73 70                	jae    212 <sysEnter_Vector-0x12fdee>
 1a2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a3:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1a7:	74 73                	je     21c <sysEnter_Vector-0x12fde4>
 1a9:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1ad:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1b4:	2e                   	cs
 1b5:	2f                   	das    
 1b6:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1ba:	6a 2f                	push   0x2f
 1bc:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1bf:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c6:	63 2f                	arpl   WORD PTR [edi],bp
 1c8:	73 74                	jae    23e <sysEnter_Vector-0x12fdc2>
 1ca:	72 69                	jb     235 <sysEnter_Vector-0x12fdcb>
 1cc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1cd:	67 73 2f             	addr16 jae 1ff <sysEnter_Vector-0x12fe01>
 1d0:	73 74                	jae    246 <sysEnter_Vector-0x12fdba>
 1d2:	72 74                	jb     248 <sysEnter_Vector-0x12fdb8>
 1d4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1d5:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 1e1:	72 63                	jb     246 <sysEnter_Vector-0x12fdba>
 1e3:	2f                   	das    
 1e4:	61                   	popa   
 1e5:	73 63                	jae    24a <sysEnter_Vector-0x12fdb6>
 1e7:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1ee:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1ef:	61                   	popa   
 1f0:	49                   	dec    ecx
 1f1:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 1f9:	76 65                	jbe    260 <sysEnter_Vector-0x12fda0>
 1fb:	72 73                	jb     270 <sysEnter_Vector-0x12fd90>
 1fd:	65                   	gs
 1fe:	49                   	dec    ecx
 1ff:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 202:	67 6e                	outs   dx,BYTE PTR ds:[si]
 204:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 207:	63 2f                	arpl   WORD PTR [edi],bp
 209:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 20c:	73 6f                	jae    27d <sysEnter_Vector-0x12fd83>
 20e:	6c                   	ins    BYTE PTR es:[edi],dx
 20f:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 213:	6d                   	ins    DWORD PTR es:[edi],dx
 214:	6f                   	outs   dx,DWORD PTR ds:[esi]
 215:	76 65                	jbe    27c <sysEnter_Vector-0x12fd84>
 217:	54                   	push   esp
 218:	6f                   	outs   dx,DWORD PTR ds:[esi]
 219:	58                   	pop    eax
 21a:	59                   	pop    ecx
 21b:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
 21e:	76 65                	jbe    285 <sysEnter_Vector-0x12fd7b>
 220:	43                   	inc    ebx
 221:	75 72                	jne    295 <sysEnter_Vector-0x12fd6b>
 223:	73 6f                	jae    294 <sysEnter_Vector-0x12fd6c>
 225:	72 50                	jb     277 <sysEnter_Vector-0x12fd89>
 227:	6f                   	outs   dx,DWORD PTR ds:[esi]
 228:	73 69                	jae    293 <sysEnter_Vector-0x12fd6d>
 22a:	74 69                	je     295 <sysEnter_Vector-0x12fd6b>
 22c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 22d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 231:	73 74                	jae    2a7 <sysEnter_Vector-0x12fd59>
 233:	6f                   	outs   dx,DWORD PTR ds:[esi]
 234:	72 65                	jb     29b <sysEnter_Vector-0x12fd65>
 236:	43                   	inc    ebx
 237:	75 72                	jne    2ab <sysEnter_Vector-0x12fd55>
 239:	73 6f                	jae    2aa <sysEnter_Vector-0x12fd56>
 23b:	72 50                	jb     28d <sysEnter_Vector-0x12fd73>
 23d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 23e:	73 69                	jae    2a9 <sysEnter_Vector-0x12fd57>
 240:	74 69                	je     2ab <sysEnter_Vector-0x12fd55>
 242:	6f                   	outs   dx,DWORD PTR ds:[esi]
 243:	6e                   	outs   dx,BYTE PTR ds:[esi]
 244:	00 78 73             	add    BYTE PTR [eax+0x73],bh
 247:	74 72                	je     2bb <sysEnter_Vector-0x12fd45>
 249:	00 61 6e             	add    BYTE PTR [ecx+0x6e],ah
 24c:	73 69                	jae    2b7 <sysEnter_Vector-0x12fd49>
 24e:	45                   	inc    ebp
 24f:	73 63                	jae    2b4 <sysEnter_Vector-0x12fd4c>
 251:	53                   	push   ebx
 252:	65                   	gs
 253:	71 00                	jno    255 <sysEnter_Vector-0x12fdab>
 255:	79 73                	jns    2ca <sysEnter_Vector-0x12fd36>
 257:	74 72                	je     2cb <sysEnter_Vector-0x12fd35>
 259:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 25d:	74 50                	je     2af <sysEnter_Vector-0x12fd51>
 25f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 260:	70 75                	jo     2d7 <sysEnter_Vector-0x12fd29>
 262:	6c                   	ins    BYTE PTR es:[edi],dx
 263:	61                   	popa   
 264:	74 65                	je     2cb <sysEnter_Vector-0x12fd35>
 266:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 26a:	74 65                	je     2d1 <sysEnter_Vector-0x12fd2f>
 26c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 26d:	76 00                	jbe    26f <sysEnter_Vector-0x12fd91>
 26f:	67                   	addr16
 270:	65                   	gs
 271:	74 65                	je     2d8 <sysEnter_Vector-0x12fd28>
 273:	6e                   	outs   dx,BYTE PTR ds:[esi]
 274:	76 00                	jbe    276 <sysEnter_Vector-0x12fd8a>
 276:	73 72                	jae    2ea <sysEnter_Vector-0x12fd16>
 278:	63 2f                	arpl   WORD PTR [edi],bp
 27a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 27c:	76 69                	jbe    2e7 <sysEnter_Vector-0x12fd19>
 27e:	72 6f                	jb     2ef <sysEnter_Vector-0x12fd11>
 280:	6e                   	outs   dx,BYTE PTR ds:[esi]
 281:	6d                   	ins    DWORD PTR es:[edi],dx
 282:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 284:	74 2e                	je     2b4 <sysEnter_Vector-0x12fd4c>
 286:	63 00                	arpl   WORD PTR [eax],ax
 288:	76 61                	jbe    2eb <sysEnter_Vector-0x12fd15>
 28a:	72 6e                	jb     2fa <sysEnter_Vector-0x12fd06>
 28c:	61                   	popa   
 28d:	6d                   	ins    DWORD PTR es:[edi],dx
 28e:	65 00 76 61          	add    BYTE PTR gs:[esi+0x61],dh
 292:	6c                   	ins    BYTE PTR es:[edi],dx
 293:	75 65                	jne    2fa <sysEnter_Vector-0x12fd06>
 295:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 298:	53                   	push   ebx
 299:	43                   	inc    ebx
 29a:	41                   	inc    ecx
 29b:	4c                   	dec    esp
 29c:	4c                   	dec    esp
 29d:	5f                   	pop    edi
 29e:	57                   	push   edi
 29f:	41                   	inc    ecx
 2a0:	49                   	dec    ecx
 2a1:	54                   	push   esp
 2a2:	46                   	inc    esi
 2a3:	4f                   	dec    edi
 2a4:	52                   	push   edx
 2a5:	50                   	push   eax
 2a6:	49                   	dec    ecx
 2a7:	44                   	inc    esp
 2a8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2ab:	53                   	push   ebx
 2ac:	43                   	inc    ebx
 2ad:	41                   	inc    ecx
 2ae:	4c                   	dec    esp
 2af:	4c                   	dec    esp
 2b0:	5f                   	pop    edi
 2b1:	47                   	inc    edi
 2b2:	45                   	inc    ebp
 2b3:	54                   	push   esp
 2b4:	54                   	push   esp
 2b5:	49                   	dec    ecx
 2b6:	43                   	inc    ebx
 2b7:	4b                   	dec    ebx
 2b8:	53                   	push   ebx
 2b9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bc:	53                   	push   ebx
 2bd:	43                   	inc    ebx
 2be:	41                   	inc    ecx
 2bf:	4c                   	dec    esp
 2c0:	4c                   	dec    esp
 2c1:	5f                   	pop    edi
 2c2:	53                   	push   ebx
 2c3:	4c                   	dec    esp
 2c4:	45                   	inc    ebp
 2c5:	45                   	inc    ebp
 2c6:	50                   	push   eax
 2c7:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
 2ca:	6f                   	outs   dx,DWORD PTR ds:[esi]
 2cb:	73 65                	jae    332 <sysEnter_Vector-0x12fcce>
 2cd:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d0:	53                   	push   ebx
 2d1:	43                   	inc    ebx
 2d2:	41                   	inc    ecx
 2d3:	4c                   	dec    esp
 2d4:	4c                   	dec    esp
 2d5:	5f                   	pop    edi
 2d6:	4f                   	dec    edi
 2d7:	50                   	push   eax
 2d8:	45                   	inc    ebp
 2d9:	4e                   	dec    esi
 2da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 2dd:	72 65                	jb     344 <sysEnter_Vector-0x12fcbc>
 2df:	61                   	popa   
 2e0:	6d                   	ins    DWORD PTR es:[edi],dx
 2e1:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 2e4:	74 68                	je     34e <sysEnter_Vector-0x12fcb2>
 2e6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e9:	53                   	push   ebx
 2ea:	43                   	inc    ebx
 2eb:	41                   	inc    ecx
 2ec:	4c                   	dec    esp
 2ed:	4c                   	dec    esp
 2ee:	5f                   	pop    edi
 2ef:	47                   	inc    edi
 2f0:	45                   	inc    ebp
 2f1:	54                   	push   esp
 2f2:	54                   	push   esp
 2f3:	49                   	dec    ecx
 2f4:	4d                   	dec    ebp
 2f5:	45                   	inc    ebp
 2f6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f9:	53                   	push   ebx
 2fa:	43                   	inc    ebx
 2fb:	41                   	inc    ecx
 2fc:	4c                   	dec    esp
 2fd:	4c                   	dec    esp
 2fe:	5f                   	pop    edi
 2ff:	57                   	push   edi
 300:	52                   	push   edx
 301:	49                   	dec    ecx
 302:	54                   	push   esp
 303:	45                   	inc    ebp
 304:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 307:	53                   	push   ebx
 308:	43                   	inc    ebx
 309:	41                   	inc    ecx
 30a:	4c                   	dec    esp
 30b:	4c                   	dec    esp
 30c:	5f                   	pop    edi
 30d:	52                   	push   edx
 30e:	45                   	inc    ebp
 30f:	41                   	inc    ecx
 310:	44                   	inc    esp
 311:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 314:	53                   	push   ebx
 315:	43                   	inc    ebx
 316:	41                   	inc    ecx
 317:	4c                   	dec    esp
 318:	4c                   	dec    esp
 319:	5f                   	pop    edi
 31a:	53                   	push   ebx
 31b:	54                   	push   esp
 31c:	4f                   	dec    edi
 31d:	50                   	push   eax
 31e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 321:	53                   	push   ebx
 322:	43                   	inc    ebx
 323:	41                   	inc    ecx
 324:	4c                   	dec    esp
 325:	4c                   	dec    esp
 326:	5f                   	pop    edi
 327:	53                   	push   ebx
 328:	45                   	inc    ebp
 329:	54                   	push   esp
 32a:	53                   	push   ebx
 32b:	49                   	dec    ecx
 32c:	47                   	inc    edi
 32d:	41                   	inc    ecx
 32e:	43                   	inc    ebx
 32f:	54                   	push   esp
 330:	49                   	dec    ecx
 331:	4f                   	dec    edi
 332:	4e                   	dec    esi
 333:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 336:	53                   	push   ebx
 337:	43                   	inc    ebx
 338:	41                   	inc    ecx
 339:	4c                   	dec    esp
 33a:	4c                   	dec    esp
 33b:	5f                   	pop    edi
 33c:	4d                   	dec    ebp
 33d:	4d                   	dec    ebp
 33e:	41                   	inc    ecx
 33f:	50                   	push   eax
 340:	00 70 6f             	add    BYTE PTR [eax+0x6f],dh
 343:	73 69                	jae    3ae <sysEnter_Vector-0x12fc52>
 345:	74 69                	je     3b0 <sysEnter_Vector-0x12fc50>
 347:	6f                   	outs   dx,DWORD PTR ds:[esi]
 348:	6e                   	outs   dx,BYTE PTR ds:[esi]
 349:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 34c:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
 353:	65 
 354:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
 357:	68 65 6e 63 65       	push   0x65636e65
 35c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 35f:	53                   	push   ebx
 360:	43                   	inc    ebx
 361:	41                   	inc    ecx
 362:	4c                   	dec    esp
 363:	4c                   	dec    esp
 364:	5f                   	pop    edi
 365:	49                   	dec    ecx
 366:	4e                   	dec    esi
 367:	56                   	push   esi
 368:	41                   	inc    ecx
 369:	4c                   	dec    esp
 36a:	49                   	dec    ecx
 36b:	44                   	inc    esp
 36c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36f:	53                   	push   ebx
 370:	43                   	inc    ebx
 371:	41                   	inc    ecx
 372:	4c                   	dec    esp
 373:	4c                   	dec    esp
 374:	5f                   	pop    edi
 375:	4d                   	dec    ebp
 376:	41                   	inc    ecx
 377:	53                   	push   ebx
 378:	4b                   	dec    ebx
 379:	53                   	push   ebx
 37a:	49                   	dec    ecx
 37b:	47                   	inc    edi
 37c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37f:	53                   	push   ebx
 380:	43                   	inc    ebx
 381:	41                   	inc    ecx
 382:	4c                   	dec    esp
 383:	4c                   	dec    esp
 384:	5f                   	pop    edi
 385:	52                   	push   edx
 386:	45                   	inc    ebp
 387:	47                   	inc    edi
 388:	45                   	inc    ebp
 389:	58                   	pop    eax
 38a:	49                   	dec    ecx
 38b:	54                   	push   esp
 38c:	48                   	dec    eax
 38d:	41                   	inc    ecx
 38e:	4e                   	dec    esi
 38f:	44                   	inc    esp
 390:	4c                   	dec    esp
 391:	45                   	inc    ebp
 392:	52                   	push   edx
 393:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 396:	53                   	push   ebx
 397:	43                   	inc    ebx
 398:	41                   	inc    ecx
 399:	4c                   	dec    esp
 39a:	4c                   	dec    esp
 39b:	5f                   	pop    edi
 39c:	48                   	dec    eax
 39d:	4c                   	dec    esp
 39e:	54                   	push   esp
 39f:	00 66 67             	add    BYTE PTR [esi+0x67],ah
 3a2:	65                   	gs
 3a3:	74 73                	je     418 <sysEnter_Vector-0x12fbe8>
 3a5:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 3a8:	79 73                	jns    41d <sysEnter_Vector-0x12fbe3>
 3aa:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 3ad:	6c                   	ins    BYTE PTR es:[edi],dx
 3ae:	73 00                	jae    3b0 <sysEnter_Vector-0x12fc50>
 3b0:	77 72                	ja     424 <sysEnter_Vector-0x12fbdc>
 3b2:	69 74 65 00 6f 70 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6e65706f
 3b9:	6e 
 3ba:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3bd:	53                   	push   ebx
 3be:	43                   	inc    ebx
 3bf:	41                   	inc    ecx
 3c0:	4c                   	dec    esp
 3c1:	4c                   	dec    esp
 3c2:	5f                   	pop    edi
 3c3:	53                   	push   ebx
 3c4:	45                   	inc    ebp
 3c5:	54                   	push   esp
 3c6:	50                   	push   eax
 3c7:	52                   	push   edx
 3c8:	49                   	dec    ecx
 3c9:	4f                   	dec    edi
 3ca:	52                   	push   edx
 3cb:	49                   	dec    ecx
 3cc:	54                   	push   esp
 3cd:	59                   	pop    ecx
 3ce:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3d1:	53                   	push   ebx
 3d2:	43                   	inc    ebx
 3d3:	41                   	inc    ecx
 3d4:	4c                   	dec    esp
 3d5:	4c                   	dec    esp
 3d6:	5f                   	pop    edi
 3d7:	47                   	inc    edi
 3d8:	45                   	inc    ebp
 3d9:	54                   	push   esp
 3da:	44                   	inc    esp
 3db:	45                   	inc    ebp
 3dc:	4e                   	dec    esi
 3dd:	54                   	push   esp
 3de:	53                   	push   ebx
 3df:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3e2:	53                   	push   ebx
 3e3:	43                   	inc    ebx
 3e4:	41                   	inc    ecx
 3e5:	4c                   	dec    esp
 3e6:	4c                   	dec    esp
 3e7:	5f                   	pop    edi
 3e8:	53                   	push   ebx
 3e9:	45                   	inc    ebp
 3ea:	45                   	inc    ebp
 3eb:	4b                   	dec    ebx
 3ec:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3ef:	53                   	push   ebx
 3f0:	43                   	inc    ebx
 3f1:	41                   	inc    ecx
 3f2:	4c                   	dec    esp
 3f3:	4c                   	dec    esp
 3f4:	5f                   	pop    edi
 3f5:	50                   	push   eax
 3f6:	49                   	dec    ecx
 3f7:	50                   	push   eax
 3f8:	45                   	inc    ebp
 3f9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3fc:	53                   	push   ebx
 3fd:	43                   	inc    ebx
 3fe:	41                   	inc    ecx
 3ff:	4c                   	dec    esp
 400:	4c                   	dec    esp
 401:	5f                   	pop    edi
 402:	47                   	inc    edi
 403:	45                   	inc    ebp
 404:	54                   	push   esp
 405:	43                   	inc    ebx
 406:	57                   	push   edi
 407:	44                   	inc    esp
 408:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 40b:	53                   	push   ebx
 40c:	43                   	inc    ebx
 40d:	41                   	inc    ecx
 40e:	4c                   	dec    esp
 40f:	4c                   	dec    esp
 410:	5f                   	pop    edi
 411:	50                   	push   eax
 412:	52                   	push   edx
 413:	49                   	dec    ecx
 414:	4e                   	dec    esi
 415:	54                   	push   esp
 416:	44                   	inc    esp
 417:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 41a:	53                   	push   ebx
 41b:	43                   	inc    ebx
 41c:	41                   	inc    ecx
 41d:	4c                   	dec    esp
 41e:	4c                   	dec    esp
 41f:	5f                   	pop    edi
 420:	46                   	inc    esi
 421:	52                   	push   edx
 422:	45                   	inc    ebp
 423:	45                   	inc    ebp
 424:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 427:	53                   	push   ebx
 428:	43                   	inc    ebx
 429:	41                   	inc    ecx
 42a:	4c                   	dec    esp
 42b:	4c                   	dec    esp
 42c:	5f                   	pop    edi
 42d:	45                   	inc    ebp
 42e:	58                   	pop    eax
 42f:	45                   	inc    ebp
 430:	43                   	inc    ebx
 431:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 434:	66                   	data16
 435:	6c                   	ins    BYTE PTR es:[edi],dx
 436:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 438:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 43b:	53                   	push   ebx
 43c:	43                   	inc    ebx
 43d:	41                   	inc    ecx
 43e:	4c                   	dec    esp
 43f:	4c                   	dec    esp
 440:	5f                   	pop    edi
 441:	45                   	inc    ebp
 442:	58                   	pop    eax
 443:	45                   	inc    ebp
 444:	43                   	inc    ebx
 445:	4e                   	dec    esi
 446:	45                   	inc    ebp
 447:	57                   	push   edi
 448:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 44b:	53                   	push   ebx
 44c:	43                   	inc    ebx
 44d:	41                   	inc    ecx
 44e:	4c                   	dec    esp
 44f:	4c                   	dec    esp
 450:	5f                   	pop    edi
 451:	41                   	inc    ecx
 452:	4c                   	dec    esp
 453:	4c                   	dec    esp
 454:	4f                   	dec    edi
 455:	43                   	inc    ebx
 456:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
 45a:	67 74 68             	addr16 je 4c5 <sysEnter_Vector-0x12fb3b>
 45d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 460:	61                   	popa   
 461:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
 465:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
 46a:	66                   	data16
 46b:	66                   	data16
 46c:	65                   	gs
 46d:	72 00                	jb     46f <sysEnter_Vector-0x12fb91>
 46f:	73 72                	jae    4e3 <sysEnter_Vector-0x12fb1d>
 471:	63 2f                	arpl   WORD PTR [edi],bp
 473:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 47a:	53                   	push   ebx
 47b:	59                   	pop    ecx
 47c:	53                   	push   ebx
 47d:	43                   	inc    ebx
 47e:	41                   	inc    ecx
 47f:	4c                   	dec    esp
 480:	4c                   	dec    esp
 481:	5f                   	pop    edi
 482:	46                   	inc    esi
 483:	4f                   	dec    edi
 484:	52                   	push   edx
 485:	4b                   	dec    ebx
 486:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 489:	6e                   	outs   dx,BYTE PTR ds:[esi]
 48a:	64                   	fs
 48b:	6c                   	ins    BYTE PTR es:[edi],dx
 48c:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 490:	53                   	push   ebx
 491:	43                   	inc    ebx
 492:	41                   	inc    ecx
 493:	4c                   	dec    esp
 494:	4c                   	dec    esp
 495:	5f                   	pop    edi
 496:	50                   	push   eax
 497:	52                   	push   edx
 498:	49                   	dec    ecx
 499:	4e                   	dec    esi
 49a:	54                   	push   esp
 49b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 49e:	53                   	push   ebx
 49f:	43                   	inc    ebx
 4a0:	41                   	inc    ecx
 4a1:	4c                   	dec    esp
 4a2:	4c                   	dec    esp
 4a3:	5f                   	pop    edi
 4a4:	43                   	inc    ebx
 4a5:	4c                   	dec    esp
 4a6:	4f                   	dec    edi
 4a7:	53                   	push   ebx
 4a8:	45                   	inc    ebp
 4a9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4ac:	53                   	push   ebx
 4ad:	43                   	inc    ebx
 4ae:	41                   	inc    ecx
 4af:	4c                   	dec    esp
 4b0:	4c                   	dec    esp
 4b1:	5f                   	pop    edi
 4b2:	45                   	inc    ebp
 4b3:	4e                   	dec    esi
 4b4:	44                   	inc    esp
 4b5:	50                   	push   eax
 4b6:	52                   	push   edx
 4b7:	4f                   	dec    edi
 4b8:	43                   	inc    ebx
 4b9:	45                   	inc    ebp
 4ba:	53                   	push   ebx
 4bb:	53                   	push   ebx
 4bc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4bf:	53                   	push   ebx
 4c0:	43                   	inc    ebx
 4c1:	41                   	inc    ecx
 4c2:	4c                   	dec    esp
 4c3:	4c                   	dec    esp
 4c4:	5f                   	pop    edi
 4c5:	52                   	push   edx
 4c6:	45                   	inc    ebp
 4c7:	42                   	inc    edx
 4c8:	4f                   	dec    edi
 4c9:	4f                   	dec    edi
 4ca:	54                   	push   esp
 4cb:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 4ce:	74 64                	je     534 <sysEnter_Vector-0x12facc>
 4d0:	69 72 00 73 72 63 2f 	imul   esi,DWORD PTR [edx+0x0],0x2f637273
 4d7:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 4de:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4df:	70 75                	jo     556 <sysEnter_Vector-0x12faaa>
 4e1:	74 2e                	je     511 <sysEnter_Vector-0x12faef>
 4e3:	63 00                	arpl   WORD PTR [eax],ax
 4e5:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 4ec:	6d                   	ins    DWORD PTR es:[edi],dx
 4ed:	61                   	popa   
 4ee:	78 6c                	js     55c <sysEnter_Vector-0x12faa4>
 4f0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 4f2:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 4f5:	74 73                	je     56a <sysEnter_Vector-0x12fa96>
 4f7:	45                   	inc    ebp
 4f8:	72 72                	jb     56c <sysEnter_Vector-0x12fa94>
 4fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4fb:	72 00                	jb     4fd <sysEnter_Vector-0x12fb03>
 4fd:	70 75                	jo     574 <sysEnter_Vector-0x12fa8c>
 4ff:	74 63                	je     564 <sysEnter_Vector-0x12fa9c>
 501:	00 6c 62 75          	add    BYTE PTR [edx+eiz*2+0x75],ch
 505:	66                   	data16
 506:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 509:	74 73                	je     57e <sysEnter_Vector-0x12fa82>
 50b:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 50e:	74 63                	je     573 <sysEnter_Vector-0x12fa8d>
 510:	68 61 72 00 72       	push   0x72007261
 515:	65                   	gs
 516:	74 56                	je     56e <sysEnter_Vector-0x12fa92>
 518:	61                   	popa   
 519:	6c                   	ins    BYTE PTR es:[edi],dx
 51a:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 51d:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 524:	74 53                	je     579 <sysEnter_Vector-0x12fa87>
 526:	70 61                	jo     589 <sysEnter_Vector-0x12fa77>
 528:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 52b:	74 72                	je     59f <sysEnter_Vector-0x12fa61>
 52d:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 530:	7a 65                	jp     597 <sysEnter_Vector-0x12fa69>
 532:	5f                   	pop    edi
 533:	74 00                	je     535 <sysEnter_Vector-0x12facb>
 535:	75 69                	jne    5a0 <sysEnter_Vector-0x12fa60>
 537:	6e                   	outs   dx,BYTE PTR ds:[esi]
 538:	74 70                	je     5aa <sysEnter_Vector-0x12fa56>
 53a:	74 72                	je     5ae <sysEnter_Vector-0x12fa52>
 53c:	5f                   	pop    edi
 53d:	74 00                	je     53f <sysEnter_Vector-0x12fac1>
 53f:	73 69                	jae    5aa <sysEnter_Vector-0x12fa56>
 541:	67 44                	addr16 inc esp
 543:	61                   	popa   
 544:	74 61                	je     5a7 <sysEnter_Vector-0x12fa59>
 546:	00 71 75             	add    BYTE PTR [ecx+0x75],dh
 549:	6f                   	outs   dx,DWORD PTR ds:[esi]
 54a:	74 65                	je     5b1 <sysEnter_Vector-0x12fa4f>
 54c:	50                   	push   eax
 54d:	74 72                	je     5c1 <sysEnter_Vector-0x12fa3f>
 54f:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 552:	67 76 50             	addr16 jbe 5a5 <sysEnter_Vector-0x12fa5b>
 555:	74 72                	je     5c9 <sysEnter_Vector-0x12fa37>
 557:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 55a:	61                   	popa   
 55b:	72 74                	jb     5d1 <sysEnter_Vector-0x12fa2f>
 55d:	5f                   	pop    edi
 55e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 55f:	66 5f                	pop    di
 561:	77 6f                	ja     5d2 <sysEnter_Vector-0x12fa2e>
 563:	72 64                	jb     5c9 <sysEnter_Vector-0x12fa37>
 565:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 568:	6f                   	outs   dx,DWORD PTR ds:[esi]
 569:	67 72 61             	addr16 jb 5cd <sysEnter_Vector-0x12fa33>
 56c:	6d                   	ins    DWORD PTR es:[edi],dx
 56d:	00 74 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],dh
 571:	74 00                	je     573 <sysEnter_Vector-0x12fa8d>
 573:	6c                   	ins    BYTE PTR es:[edi],dx
 574:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
 57b:	74 00                	je     57d <sysEnter_Vector-0x12fa83>
 57d:	73 74                	jae    5f3 <sysEnter_Vector-0x12fa0d>
 57f:	61                   	popa   
 580:	74 65                	je     5e7 <sysEnter_Vector-0x12fa19>
 582:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 585:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 588:	6c                   	ins    BYTE PTR es:[edi],dx
 589:	74 69                	je     5f4 <sysEnter_Vector-0x12fa0c>
 58b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 58c:	5f                   	pop    edi
 58d:	76 61                	jbe    5f0 <sysEnter_Vector-0x12fa10>
 58f:	5f                   	pop    edi
 590:	6c                   	ins    BYTE PTR es:[edi],dx
 591:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 598:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 59f:	00 
 5a0:	73 70                	jae    612 <sysEnter_Vector-0x12f9ee>
 5a2:	61                   	popa   
 5a3:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 5a6:	74 72                	je     61a <sysEnter_Vector-0x12f9e6>
 5a8:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
 5ac:	70 00                	jo     5ae <sysEnter_Vector-0x12fa52>
 5ae:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 5b1:	6c                   	ins    BYTE PTR es:[edi],dx
 5b2:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 5b9:	67 76 00             	addr16 jbe 5bc <sysEnter_Vector-0x12fa44>
 5bc:	77 61                	ja     61f <sysEnter_Vector-0x12f9e1>
 5be:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 5c5:	65 
 5c6:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 5c9:	4c                   	dec    esp
 5ca:	65                   	gs
 5cb:	76 65                	jbe    632 <sysEnter_Vector-0x12f9ce>
 5cd:	6c                   	ins    BYTE PTR es:[edi],dx
 5ce:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 5d1:	6c                   	ins    BYTE PTR es:[edi],dx
 5d2:	6c                   	ins    BYTE PTR es:[edi],dx
 5d3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5d4:	75 6d                	jne    643 <sysEnter_Vector-0x12f9bd>
 5d6:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
 5da:	71 75                	jno    651 <sysEnter_Vector-0x12f9af>
 5dc:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5dd:	74 65                	je     644 <sysEnter_Vector-0x12f9bc>
 5df:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 5e2:	65                   	gs
 5e3:	65                   	gs
 5e4:	70 00                	jo     5e6 <sysEnter_Vector-0x12fa1a>
 5e6:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 5e9:	6c                   	ins    BYTE PTR es:[edi],dx
 5ea:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 5f1:	67 76 49             	addr16 jbe 63d <sysEnter_Vector-0x12f9c3>
 5f4:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 5f8:	73 79                	jae    673 <sysEnter_Vector-0x12f98d>
 5fa:	73 63                	jae    65f <sysEnter_Vector-0x12f9a1>
 5fc:	61                   	popa   
 5fd:	6c                   	ins    BYTE PTR es:[edi],dx
 5fe:	6c                   	ins    BYTE PTR es:[edi],dx
 5ff:	30 00                	xor    BYTE PTR [eax],al
 601:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 603:	5f                   	pop    edi
 604:	73 79                	jae    67f <sysEnter_Vector-0x12f981>
 606:	73 63                	jae    66b <sysEnter_Vector-0x12f995>
 608:	61                   	popa   
 609:	6c                   	ins    BYTE PTR es:[edi],dx
 60a:	6c                   	ins    BYTE PTR es:[edi],dx
 60b:	31 00                	xor    DWORD PTR [eax],eax
 60d:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 60f:	5f                   	pop    edi
 610:	73 79                	jae    68b <sysEnter_Vector-0x12f975>
 612:	73 63                	jae    677 <sysEnter_Vector-0x12f989>
 614:	61                   	popa   
 615:	6c                   	ins    BYTE PTR es:[edi],dx
 616:	6c                   	ins    BYTE PTR es:[edi],dx
 617:	32 00                	xor    al,BYTE PTR [eax]
 619:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 61b:	5f                   	pop    edi
 61c:	73 79                	jae    697 <sysEnter_Vector-0x12f969>
 61e:	73 63                	jae    683 <sysEnter_Vector-0x12f97d>
 620:	61                   	popa   
 621:	6c                   	ins    BYTE PTR es:[edi],dx
 622:	6c                   	ins    BYTE PTR es:[edi],dx
 623:	33 00                	xor    eax,DWORD PTR [eax]
 625:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 627:	5f                   	pop    edi
 628:	73 79                	jae    6a3 <sysEnter_Vector-0x12f95d>
 62a:	73 63                	jae    68f <sysEnter_Vector-0x12f971>
 62c:	61                   	popa   
 62d:	6c                   	ins    BYTE PTR es:[edi],dx
 62e:	6c                   	ins    BYTE PTR es:[edi],dx
 62f:	34 00                	xor    al,0x0
 631:	49                   	dec    ecx
 632:	4e                   	dec    esi
 633:	5f                   	pop    edi
 634:	57                   	push   edi
 635:	4f                   	dec    edi
 636:	52                   	push   edx
 637:	44                   	inc    esp
 638:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 63b:	67 76 5f             	addr16 jbe 69d <sysEnter_Vector-0x12f963>
 63e:	73 69                	jae    6a9 <sysEnter_Vector-0x12f957>
 640:	7a 65                	jp     6a7 <sysEnter_Vector-0x12f959>
 642:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 646:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 649:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 650:	65 
 651:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 655:	73 70                	jae    6c7 <sysEnter_Vector-0x12f939>
 657:	61                   	popa   
 658:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 65b:	5f                   	pop    edi
 65c:	5f                   	pop    edi
 65d:	67 6e                	outs   dx,BYTE PTR ds:[si]
 65f:	75 63                	jne    6c4 <sysEnter_Vector-0x12f93c>
 661:	5f                   	pop    edi
 662:	76 61                	jbe    6c5 <sysEnter_Vector-0x12f93b>
 664:	5f                   	pop    edi
 665:	6c                   	ins    BYTE PTR es:[edi],dx
 666:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 66d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 66e:	74 64                	je     6d4 <sysEnter_Vector-0x12f92c>
 670:	49                   	dec    ecx
 671:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 674:	72 61                	jb     6d7 <sysEnter_Vector-0x12f929>
 676:	6d                   	ins    DWORD PTR es:[edi],dx
 677:	31 00                	xor    DWORD PTR [eax],eax
 679:	70 61                	jo     6dc <sysEnter_Vector-0x12f924>
 67b:	72 61                	jb     6de <sysEnter_Vector-0x12f922>
 67d:	6d                   	ins    DWORD PTR es:[edi],dx
 67e:	32 00                	xor    al,BYTE PTR [eax]
 680:	70 61                	jo     6e3 <sysEnter_Vector-0x12f91d>
 682:	72 61                	jb     6e5 <sysEnter_Vector-0x12f91b>
 684:	6d                   	ins    DWORD PTR es:[edi],dx
 685:	33 00                	xor    eax,DWORD PTR [eax]
 687:	70 61                	jo     6ea <sysEnter_Vector-0x12f916>
 689:	72 61                	jb     6ec <sysEnter_Vector-0x12f914>
 68b:	6d                   	ins    DWORD PTR es:[edi],dx
 68c:	34 00                	xor    al,0x0
 68e:	65                   	gs
 68f:	78 65                	js     6f6 <sysEnter_Vector-0x12f90a>
 691:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 694:	65                   	gs
 695:	78 65                	js     6fc <sysEnter_Vector-0x12f904>
 697:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 69a:	66 6f                	outs   dx,WORD PTR ds:[esi]
 69c:	72 6d                	jb     70b <sysEnter_Vector-0x12f8f5>
 69e:	61                   	popa   
 69f:	74 00                	je     6a1 <sysEnter_Vector-0x12f95f>
 6a1:	70 72                	jo     715 <sysEnter_Vector-0x12f8eb>
 6a3:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 6aa:	65                   	gs
 6ab:	72 00                	jb     6ad <sysEnter_Vector-0x12f953>
 6ad:	73 69                	jae    718 <sysEnter_Vector-0x12f8e8>
 6af:	67 6e                	outs   dx,BYTE PTR ds:[si]
 6b1:	61                   	popa   
 6b2:	6c                   	ins    BYTE PTR es:[edi],dx
 6b3:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 6b6:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 6b9:	5f                   	pop    edi
 6ba:	5f                   	pop    edi
 6bb:	73 65                	jae    722 <sysEnter_Vector-0x12f8de>
 6bd:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 6c0:	64                   	fs
 6c1:	73 00                	jae    6c3 <sysEnter_Vector-0x12f93d>
 6c3:	44                   	inc    esp
 6c4:	55                   	push   ebp
 6c5:	4c                   	dec    esp
 6c6:	4c                   	dec    esp
 6c7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 6ca:	61                   	popa   
 6cb:	74 65                	je     732 <sysEnter_Vector-0x12f8ce>
 6cd:	73 00                	jae    6cf <sysEnter_Vector-0x12f931>
 6cf:	49                   	dec    ecx
 6d0:	4e                   	dec    esi
 6d1:	5f                   	pop    edi
 6d2:	53                   	push   ebx
 6d3:	54                   	push   esp
 6d4:	52                   	push   edx
 6d5:	49                   	dec    ecx
 6d6:	4e                   	dec    esi
 6d7:	47                   	inc    edi
 6d8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6db:	63 2f                	arpl   WORD PTR [edi],bp
 6dd:	6c                   	ins    BYTE PTR es:[edi],dx
 6de:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 6e5:	4f                   	dec    edi
 6e6:	53                   	push   ebx
 6e7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 6ea:	61                   	popa   
 6eb:	72 67                	jb     754 <sysEnter_Vector-0x12f8ac>
 6ed:	63 00                	arpl   WORD PTR [eax],ax
 6ef:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 6f2:	6c                   	ins    BYTE PTR es:[edi],dx
 6f3:	69 6e 65 00 73 70 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c707300
 6fa:	69 74 49 00 70 72 69 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6e697270
 701:	6e 
 702:	74 66                	je     76a <sysEnter_Vector-0x12f896>
 704:	49                   	dec    ecx
 705:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 709:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 70c:	6c                   	ins    BYTE PTR es:[edi],dx
 70d:	65                   	gs
 70e:	61                   	popa   
 70f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 710:	75 70                	jne    782 <sysEnter_Vector-0x12f87e>
 712:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 715:	67 76 00             	addr16 jbe 718 <sysEnter_Vector-0x12f8e8>
 718:	65                   	gs
 719:	78 69                	js     784 <sysEnter_Vector-0x12f87c>
 71b:	74 00                	je     71d <sysEnter_Vector-0x12f8e3>
 71d:	73 74                	jae    793 <sysEnter_Vector-0x12f86d>
 71f:	61                   	popa   
 720:	74 75                	je     797 <sysEnter_Vector-0x12f869>
 722:	73 00                	jae    724 <sysEnter_Vector-0x12f8dc>
 724:	73 69                	jae    78f <sysEnter_Vector-0x12f871>
 726:	67 48                	addr16 dec eax
 728:	61                   	popa   
 729:	6e                   	outs   dx,BYTE PTR ds:[esi]
 72a:	64                   	fs
 72b:	6c                   	ins    BYTE PTR es:[edi],dx
 72c:	65                   	gs
 72d:	72 00                	jb     72f <sysEnter_Vector-0x12f8d1>
 72f:	6d                   	ins    DWORD PTR es:[edi],dx
 730:	6f                   	outs   dx,DWORD PTR ds:[esi]
 731:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 738:	6e 
 739:	61                   	popa   
 73a:	6c                   	ins    BYTE PTR es:[edi],dx
 73b:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 73e:	67 73 00             	addr16 jae 741 <sysEnter_Vector-0x12f8bf>
 741:	70 72                	jo     7b5 <sysEnter_Vector-0x12f84b>
 743:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 74a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 74b:	70 00                	jo     74d <sysEnter_Vector-0x12f8b3>
 74d:	67                   	addr16
 74e:	65                   	gs
 74f:	74 63                	je     7b4 <sysEnter_Vector-0x12f84c>
 751:	77 64                	ja     7b7 <sysEnter_Vector-0x12f849>
 753:	00 61 64             	add    BYTE PTR [ecx+0x64],ah
 756:	64                   	fs
 757:	72 00                	jb     759 <sysEnter_Vector-0x12f8a7>
 759:	6f                   	outs   dx,DWORD PTR ds:[esi]
 75a:	66 66 5f             	data32 pop di
 75d:	74 00                	je     75f <sysEnter_Vector-0x12f8a1>
 75f:	70 72                	jo     7d3 <sysEnter_Vector-0x12f82d>
 761:	6f                   	outs   dx,DWORD PTR ds:[esi]
 762:	74 00                	je     764 <sysEnter_Vector-0x12f89c>
 764:	73 4d                	jae    7b3 <sysEnter_Vector-0x12f84d>
 766:	4d                   	dec    ebp
 767:	61                   	popa   
 768:	70 53                	jo     7bd <sysEnter_Vector-0x12f843>
 76a:	79 73                	jns    7df <sysEnter_Vector-0x12f821>
 76c:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 76f:	6c                   	ins    BYTE PTR es:[edi],dx
 770:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
 773:	61                   	popa   
 774:	70 00                	jo     776 <sysEnter_Vector-0x12f88a>
 776:	70 61                	jo     7d9 <sysEnter_Vector-0x12f827>
 778:	72 61                	jb     7db <sysEnter_Vector-0x12f825>
 77a:	6d                   	ins    DWORD PTR es:[edi],dx
 77b:	73 00                	jae    77d <sysEnter_Vector-0x12f883>
 77d:	73 72                	jae    7f1 <sysEnter_Vector-0x12f80f>
 77f:	63 2f                	arpl   WORD PTR [edi],bp
 781:	6c                   	ins    BYTE PTR es:[edi],dx
 782:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
 789:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 78c:	66                   	data16
 78d:	6c                   	ins    BYTE PTR es:[edi],dx
 78e:	61                   	popa   
 78f:	67 73 00             	addr16 jae 792 <sysEnter_Vector-0x12f86e>
 792:	73 79                	jae    80d <sysEnter_Vector-0x12f7f3>
 794:	73 63                	jae    7f9 <sysEnter_Vector-0x12f807>
 796:	61                   	popa   
 797:	6c                   	ins    BYTE PTR es:[edi],dx
 798:	6c                   	ins    BYTE PTR es:[edi],dx
 799:	5f                   	pop    edi
 79a:	6d                   	ins    DWORD PTR es:[edi],dx
 79b:	6d                   	ins    DWORD PTR es:[edi],dx
 79c:	61                   	popa   
 79d:	70 5f                	jo     7fe <sysEnter_Vector-0x12f802>
 79f:	74 00                	je     7a1 <sysEnter_Vector-0x12f85f>
 7a1:	6d                   	ins    DWORD PTR es:[edi],dx
 7a2:	61                   	popa   
 7a3:	6c                   	ins    BYTE PTR es:[edi],dx
 7a4:	6c                   	ins    BYTE PTR es:[edi],dx
 7a5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7a6:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 7a9:	70 72                	jo     81d <sysEnter_Vector-0x12f7e3>
 7ab:	65                   	gs
 7ac:	76 00                	jbe    7ae <sysEnter_Vector-0x12f852>
 7ae:	66                   	data16
 7af:	72 65                	jb     816 <sysEnter_Vector-0x12f7ea>
 7b1:	65 00 68 65          	add    BYTE PTR gs:[eax+0x65],ch
 7b5:	61                   	popa   
 7b6:	70 72                	jo     82a <sysEnter_Vector-0x12f7d6>
 7b8:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 7bc:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 7bf:	65                   	gs
 7c0:	65                   	gs
 7c1:	49                   	dec    ecx
 7c2:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 7c5:	72 6b                	jb     832 <sysEnter_Vector-0x12f7ce>
 7c7:	65                   	gs
 7c8:	72 00                	jb     7ca <sysEnter_Vector-0x12f836>
 7ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7cb:	65                   	gs
 7cc:	77 48                	ja     816 <sysEnter_Vector-0x12f7ea>
 7ce:	65                   	gs
 7cf:	61                   	popa   
 7d0:	70 52                	jo     824 <sysEnter_Vector-0x12f7dc>
 7d2:	65                   	gs
 7d3:	71 75                	jno    84a <sysEnter_Vector-0x12f7b6>
 7d5:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 7dc:	75 6c                	jne    84a <sysEnter_Vector-0x12f7b6>
 7de:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 7e5:	75 65                	jne    84c <sysEnter_Vector-0x12f7b4>
 7e7:	73 74                	jae    85d <sysEnter_Vector-0x12f7a3>
 7e9:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 7ec:	55                   	push   ebp
 7ed:	73 65                	jae    854 <sysEnter_Vector-0x12f7ac>
 7ef:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
 7f2:	65                   	gs
 7f3:	61                   	popa   
 7f4:	70 00                	jo     7f6 <sysEnter_Vector-0x12f80a>
 7f6:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
 7fd:	6c                   	ins    BYTE PTR es:[edi],dx
 7fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7ff:	63 00                	arpl   WORD PTR [eax],ax
 801:	66 6f                	outs   dx,WORD PTR ds:[esi]
 803:	6c                   	ins    BYTE PTR es:[edi],dx
 804:	64                   	fs
 805:	70 74                	jo     87b <sysEnter_Vector-0x12f785>
 807:	72 00                	jb     809 <sysEnter_Vector-0x12f7f7>
 809:	6d                   	ins    DWORD PTR es:[edi],dx
 80a:	61                   	popa   
 80b:	6c                   	ins    BYTE PTR es:[edi],dx
 80c:	6c                   	ins    BYTE PTR es:[edi],dx
 80d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 80e:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 811:	6c                   	ins    BYTE PTR es:[edi],dx
 812:	65                   	gs
 813:	61                   	popa   
 814:	6e                   	outs   dx,BYTE PTR ds:[esi]
 815:	75 70                	jne    887 <sysEnter_Vector-0x12f779>
 817:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 81a:	6c                   	ins    BYTE PTR es:[edi],dx
 81b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 81c:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 81f:	65                   	gs
 820:	64                   	fs
 821:	50                   	push   eax
 822:	74 72                	je     896 <sysEnter_Vector-0x12f76a>
 824:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 827:	77 6c                	ja     895 <sysEnter_Vector-0x12f76b>
 829:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 82b:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 82e:	77 53                	ja     883 <sysEnter_Vector-0x12f77d>
 830:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
 837:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
 83d:	61                   	popa   
 83e:	6c                   	ins    BYTE PTR es:[edi],dx
 83f:	6c                   	ins    BYTE PTR es:[edi],dx
 840:	6f                   	outs   dx,DWORD PTR ds:[esi]
 841:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 844:	66                   	data16
 845:	6e                   	outs   dx,BYTE PTR ds:[esi]
 846:	65                   	gs
 847:	77 70                	ja     8b9 <sysEnter_Vector-0x12f747>
 849:	74 72                	je     8bd <sysEnter_Vector-0x12f743>
 84b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 84e:	63 2f                	arpl   WORD PTR [edi],bp
 850:	6d                   	ins    DWORD PTR es:[edi],dx
 851:	61                   	popa   
 852:	6c                   	ins    BYTE PTR es:[edi],dx
 853:	6c                   	ins    BYTE PTR es:[edi],dx
 854:	6f                   	outs   dx,DWORD PTR ds:[esi]
 855:	63 2e                	arpl   WORD PTR [esi],bp
 857:	63 00                	arpl   WORD PTR [eax],ax
 859:	68 65 61 70 50       	push   0x50706165
 85e:	74 72                	je     8d2 <sysEnter_Vector-0x12f72e>
 860:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 863:	6f                   	outs   dx,DWORD PTR ds:[esi]
 864:	69 6e 74 65 72 00 68 	imul   ebp,DWORD PTR [esi+0x74],0x68007265
 86b:	65                   	gs
 86c:	61                   	popa   
 86d:	70 50                	jo     8bf <sysEnter_Vector-0x12f741>
 86f:	74 72                	je     8e3 <sysEnter_Vector-0x12f71d>
 871:	4e                   	dec    esi
 872:	65                   	gs
 873:	78 74                	js     8e9 <sysEnter_Vector-0x12f717>
 875:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 878:	6e                   	outs   dx,BYTE PTR ds:[esi]
 879:	74 38                	je     8b3 <sysEnter_Vector-0x12f74d>
 87b:	5f                   	pop    edi
 87c:	74 00                	je     87e <sysEnter_Vector-0x12f782>
 87e:	72 65                	jb     8e5 <sysEnter_Vector-0x12f71b>
 880:	61                   	popa   
 881:	6c                   	ins    BYTE PTR es:[edi],dx
 882:	6c                   	ins    BYTE PTR es:[edi],dx
 883:	6f                   	outs   dx,DWORD PTR ds:[esi]
 884:	63 00                	arpl   WORD PTR [eax],ax
 886:	73 72                	jae    8fa <sysEnter_Vector-0x12f706>
 888:	63 2f                	arpl   WORD PTR [edi],bp
 88a:	6d                   	ins    DWORD PTR es:[edi],dx
 88b:	65                   	gs
 88c:	6d                   	ins    DWORD PTR es:[edi],dx
 88d:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 890:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 893:	64                   	fs
 894:	65                   	gs
 895:	73 74                	jae    90b <sysEnter_Vector-0x12f6f5>
 897:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 89a:	6d                   	ins    DWORD PTR es:[edi],dx
 89b:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 89e:	49                   	dec    ecx
 89f:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 8a2:	6d                   	ins    DWORD PTR es:[edi],dx
 8a3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 8a6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8a9:	63 2f                	arpl   WORD PTR [edi],bp
 8ab:	6d                   	ins    DWORD PTR es:[edi],dx
 8ac:	65                   	gs
 8ad:	6d                   	ins    DWORD PTR es:[edi],dx
 8ae:	73 65                	jae    915 <sysEnter_Vector-0x12f6eb>
 8b0:	74 2e                	je     8e0 <sysEnter_Vector-0x12f720>
 8b2:	63 00                	arpl   WORD PTR [eax],ax
 8b4:	6d                   	ins    DWORD PTR es:[edi],dx
 8b5:	65                   	gs
 8b6:	6d                   	ins    DWORD PTR es:[edi],dx
 8b7:	73 65                	jae    91e <sysEnter_Vector-0x12f6e2>
 8b9:	74 00                	je     8bb <sysEnter_Vector-0x12f745>
 8bb:	6d                   	ins    DWORD PTR es:[edi],dx
 8bc:	65                   	gs
 8bd:	6d                   	ins    DWORD PTR es:[edi],dx
 8be:	73 65                	jae    925 <sysEnter_Vector-0x12f6db>
 8c0:	74 49                	je     90b <sysEnter_Vector-0x12f6f5>
 8c2:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 8c5:	61                   	popa   
 8c6:	6c                   	ins    BYTE PTR es:[edi],dx
 8c7:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 8ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8cb:	74 31                	je     8fe <sysEnter_Vector-0x12f702>
 8cd:	36                   	ss
 8ce:	5f                   	pop    edi
 8cf:	74 00                	je     8d1 <sysEnter_Vector-0x12f72f>
 8d1:	66 56                	push   si
 8d3:	61                   	popa   
 8d4:	6c                   	ins    BYTE PTR es:[edi],dx
 8d5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8d8:	63 2f                	arpl   WORD PTR [edi],bp
 8da:	70 69                	jo     945 <sysEnter_Vector-0x12f6bb>
 8dc:	70 65                	jo     943 <sysEnter_Vector-0x12f6bd>
 8de:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 8e1:	70 69                	jo     94c <sysEnter_Vector-0x12f6b4>
 8e3:	70 65                	jo     94a <sysEnter_Vector-0x12f6b6>
 8e5:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 8e8:	70 65                	jo     94f <sysEnter_Vector-0x12f6b1>
 8ea:	66                   	data16
 8eb:	64 00 73 6b          	add    BYTE PTR fs:[ebx+0x6b],dh
 8ef:	69 70 5f 61 74 6f 69 	imul   esi,DWORD PTR [eax+0x5f],0x696f7461
 8f6:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 8fa:	61                   	popa   
 8fb:	73 65                	jae    962 <sysEnter_Vector-0x12f69e>
 8fd:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 900:	63 2f                	arpl   WORD PTR [edi],bp
 902:	73 70                	jae    974 <sysEnter_Vector-0x12f68c>
 904:	72 69                	jb     96f <sysEnter_Vector-0x12f691>
 906:	6e                   	outs   dx,BYTE PTR ds:[esi]
 907:	74 66                	je     96f <sysEnter_Vector-0x12f691>
 909:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 90c:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 90f:	65 00 71 75          	add    BYTE PTR gs:[ecx+0x75],dh
 913:	61                   	popa   
 914:	6c                   	ins    BYTE PTR es:[edi],dx
 915:	69 66 69 65 72 00 72 	imul   esp,DWORD PTR [esi+0x69],0x72007265
 91c:	65                   	gs
 91d:	70 65                	jo     984 <sysEnter_Vector-0x12f67c>
 91f:	61                   	popa   
 920:	74 00                	je     922 <sysEnter_Vector-0x12f6de>
 922:	6e                   	outs   dx,BYTE PTR ds:[esi]
 923:	75 6d                	jne    992 <sysEnter_Vector-0x12f66e>
 925:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
 928:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 92b:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 92f:	69 6f 6e 00 64 69 67 	imul   ebp,DWORD PTR [edi+0x6e],0x67696400
 936:	69 74 73 00 66 69 65 	imul   esi,DWORD PTR [ebx+esi*2+0x0],0x6c656966
 93d:	6c 
 93e:	64                   	fs
 93f:	5f                   	pop    edi
 940:	77 69                	ja     9ab <sysEnter_Vector-0x12f655>
 942:	64                   	fs
 943:	74 68                	je     9ad <sysEnter_Vector-0x12f653>
 945:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 948:	72 65                	jb     9af <sysEnter_Vector-0x12f651>
 94a:	73 00                	jae    94c <sysEnter_Vector-0x12f6b4>
 94c:	76 73                	jbe    9c1 <sysEnter_Vector-0x12f63f>
 94e:	70 72                	jo     9c2 <sysEnter_Vector-0x12f63e>
 950:	69 6e 74 66 00 73 72 	imul   ebp,DWORD PTR [esi+0x74],0x72730066
 957:	63 2f                	arpl   WORD PTR [edi],bp
 959:	73 74                	jae    9cf <sysEnter_Vector-0x12f631>
 95b:	64 69 6f 2e 63 00 62 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x75620063
 962:	75 
 963:	66                   	data16
 964:	66                   	data16
 965:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 968:	73 65                	jae    9cf <sysEnter_Vector-0x12f631>
 96a:	74 52                	je     9be <sysEnter_Vector-0x12f642>
 96c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 96d:	77 00                	ja     96f <sysEnter_Vector-0x12f691>
 96f:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 972:	66 50                	push   ax
 974:	74 72                	je     9e8 <sysEnter_Vector-0x12f618>
 976:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 979:	72 63                	jb     9de <sysEnter_Vector-0x12f622>
 97b:	61                   	popa   
 97c:	74 49                	je     9c7 <sysEnter_Vector-0x12f639>
 97e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 981:	72 63                	jb     9e6 <sysEnter_Vector-0x12f61a>
 983:	61                   	popa   
 984:	74 00                	je     986 <sysEnter_Vector-0x12f67a>
 986:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 989:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 98c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 98e:	61                   	popa   
 98f:	74 65                	je     9f6 <sysEnter_Vector-0x12f60a>
 991:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 994:	63 2f                	arpl   WORD PTR [edi],bp
 996:	73 74                	jae    a0c <sysEnter_Vector-0x12f5f4>
 998:	72 69                	jb     a03 <sysEnter_Vector-0x12f5fd>
 99a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 99b:	67 73 2f             	addr16 jae 9cd <sysEnter_Vector-0x12f633>
 99e:	73 74                	jae    a14 <sysEnter_Vector-0x12f5ec>
 9a0:	72 63                	jb     a05 <sysEnter_Vector-0x12f5fb>
 9a2:	61                   	popa   
 9a3:	74 2e                	je     9d3 <sysEnter_Vector-0x12f62d>
 9a5:	63 00                	arpl   WORD PTR [eax],ax
 9a7:	73 74                	jae    a1d <sysEnter_Vector-0x12f5e3>
 9a9:	72 63                	jb     a0e <sysEnter_Vector-0x12f5f2>
 9ab:	6d                   	ins    DWORD PTR es:[edi],dx
 9ac:	70 00                	jo     9ae <sysEnter_Vector-0x12f652>
 9ae:	73 72                	jae    a22 <sysEnter_Vector-0x12f5de>
 9b0:	63 2f                	arpl   WORD PTR [edi],bp
 9b2:	73 74                	jae    a28 <sysEnter_Vector-0x12f5d8>
 9b4:	72 69                	jb     a1f <sysEnter_Vector-0x12f5e1>
 9b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9b7:	67 73 2f             	addr16 jae 9e9 <sysEnter_Vector-0x12f617>
 9ba:	73 74                	jae    a30 <sysEnter_Vector-0x12f5d0>
 9bc:	72 63                	jb     a21 <sysEnter_Vector-0x12f5df>
 9be:	6d                   	ins    DWORD PTR es:[edi],dx
 9bf:	70 2e                	jo     9ef <sysEnter_Vector-0x12f611>
 9c1:	63 00                	arpl   WORD PTR [eax],ax
 9c3:	73 74                	jae    a39 <sysEnter_Vector-0x12f5c7>
 9c5:	72 63                	jb     a2a <sysEnter_Vector-0x12f5d6>
 9c7:	70 79                	jo     a42 <sysEnter_Vector-0x12f5be>
 9c9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9cc:	72 63                	jb     a31 <sysEnter_Vector-0x12f5cf>
 9ce:	70 79                	jo     a49 <sysEnter_Vector-0x12f5b7>
 9d0:	49                   	dec    ecx
 9d1:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 9d4:	75 6e                	jne    a44 <sysEnter_Vector-0x12f5bc>
 9d6:	74 00                	je     9d8 <sysEnter_Vector-0x12f628>
 9d8:	73 74                	jae    a4e <sysEnter_Vector-0x12f5b2>
 9da:	72 63                	jb     a3f <sysEnter_Vector-0x12f5c1>
 9dc:	70 79                	jo     a57 <sysEnter_Vector-0x12f5a9>
 9de:	63 00                	arpl   WORD PTR [eax],ax
 9e0:	73 72                	jae    a54 <sysEnter_Vector-0x12f5ac>
 9e2:	63 2f                	arpl   WORD PTR [edi],bp
 9e4:	73 74                	jae    a5a <sysEnter_Vector-0x12f5a6>
 9e6:	72 69                	jb     a51 <sysEnter_Vector-0x12f5af>
 9e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e9:	67 73 2f             	addr16 jae a1b <sysEnter_Vector-0x12f5e5>
 9ec:	73 74                	jae    a62 <sysEnter_Vector-0x12f59e>
 9ee:	72 63                	jb     a53 <sysEnter_Vector-0x12f5ad>
 9f0:	70 79                	jo     a6b <sysEnter_Vector-0x12f595>
 9f2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9f5:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 9f8:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 9fb:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 a02:	74 
 a03:	72 69                	jb     a6e <sysEnter_Vector-0x12f592>
 a05:	73 6e                	jae    a75 <sysEnter_Vector-0x12f58b>
 a07:	75 6d                	jne    a76 <sysEnter_Vector-0x12f58a>
 a09:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a0c:	63 2f                	arpl   WORD PTR [edi],bp
 a0e:	73 74                	jae    a84 <sysEnter_Vector-0x12f57c>
 a10:	72 69                	jb     a7b <sysEnter_Vector-0x12f585>
 a12:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a13:	67 73 2f             	addr16 jae a45 <sysEnter_Vector-0x12f5bb>
 a16:	73 74                	jae    a8c <sysEnter_Vector-0x12f574>
 a18:	72 69                	jb     a83 <sysEnter_Vector-0x12f57d>
 a1a:	73 6e                	jae    a8a <sysEnter_Vector-0x12f576>
 a1c:	75 6d                	jne    a8b <sysEnter_Vector-0x12f575>
 a1e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a21:	73 74                	jae    a97 <sysEnter_Vector-0x12f569>
 a23:	72 6c                	jb     a91 <sysEnter_Vector-0x12f56f>
 a25:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a27:	49                   	dec    ecx
 a28:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a2b:	72 6c                	jb     a99 <sysEnter_Vector-0x12f567>
 a2d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a2f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a32:	72 6e                	jb     aa2 <sysEnter_Vector-0x12f55e>
 a34:	6c                   	ins    BYTE PTR es:[edi],dx
 a35:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a37:	49                   	dec    ecx
 a38:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a3b:	72 6e                	jb     aab <sysEnter_Vector-0x12f555>
 a3d:	6c                   	ins    BYTE PTR es:[edi],dx
 a3e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a40:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a43:	63 2f                	arpl   WORD PTR [edi],bp
 a45:	73 74                	jae    abb <sysEnter_Vector-0x12f545>
 a47:	72 69                	jb     ab2 <sysEnter_Vector-0x12f54e>
 a49:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a4a:	67 73 2f             	addr16 jae a7c <sysEnter_Vector-0x12f584>
 a4d:	73 74                	jae    ac3 <sysEnter_Vector-0x12f53d>
 a4f:	72 6c                	jb     abd <sysEnter_Vector-0x12f543>
 a51:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a53:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a56:	73 74                	jae    acc <sysEnter_Vector-0x12f534>
 a58:	72 6e                	jb     ac8 <sysEnter_Vector-0x12f538>
 a5a:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a5d:	49                   	dec    ecx
 a5e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a61:	72 6e                	jb     ad1 <sysEnter_Vector-0x12f52f>
 a63:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a66:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a69:	63 2f                	arpl   WORD PTR [edi],bp
 a6b:	73 74                	jae    ae1 <sysEnter_Vector-0x12f51f>
 a6d:	72 69                	jb     ad8 <sysEnter_Vector-0x12f528>
 a6f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a70:	67 73 2f             	addr16 jae aa2 <sysEnter_Vector-0x12f55e>
 a73:	73 74                	jae    ae9 <sysEnter_Vector-0x12f517>
 a75:	72 6e                	jb     ae5 <sysEnter_Vector-0x12f51b>
 a77:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a7a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a7d:	73 72                	jae    af1 <sysEnter_Vector-0x12f50f>
 a7f:	63 2f                	arpl   WORD PTR [edi],bp
 a81:	73 74                	jae    af7 <sysEnter_Vector-0x12f509>
 a83:	72 69                	jb     aee <sysEnter_Vector-0x12f512>
 a85:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a86:	67 73 2f             	addr16 jae ab8 <sysEnter_Vector-0x12f548>
 a89:	73 74                	jae    aff <sysEnter_Vector-0x12f501>
 a8b:	72 6e                	jb     afb <sysEnter_Vector-0x12f505>
 a8d:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a90:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a93:	73 74                	jae    b09 <sysEnter_Vector-0x12f4f7>
 a95:	72 6e                	jb     b05 <sysEnter_Vector-0x12f4fb>
 a97:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 a9a:	49                   	dec    ecx
 a9b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a9e:	72 6e                	jb     b0e <sysEnter_Vector-0x12f4f2>
 aa0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 aa3:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 aa6:	64                   	fs
 aa7:	70 74                	jo     b1d <sysEnter_Vector-0x12f4e3>
 aa9:	72 00                	jb     aab <sysEnter_Vector-0x12f555>
 aab:	73 72                	jae    b1f <sysEnter_Vector-0x12f4e1>
 aad:	63 2f                	arpl   WORD PTR [edi],bp
 aaf:	73 74                	jae    b25 <sysEnter_Vector-0x12f4db>
 ab1:	72 69                	jb     b1c <sysEnter_Vector-0x12f4e4>
 ab3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ab4:	67 73 2f             	addr16 jae ae6 <sysEnter_Vector-0x12f51a>
 ab7:	73 74                	jae    b2d <sysEnter_Vector-0x12f4d3>
 ab9:	72 6f                	jb     b2a <sysEnter_Vector-0x12f4d6>
 abb:	75 6c                	jne    b29 <sysEnter_Vector-0x12f4d7>
 abd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ac0:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 ac3:	6c                   	ins    BYTE PTR es:[edi],dx
 ac4:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 acb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 acc:	75 6c                	jne    b3a <sysEnter_Vector-0x12f4c6>
 ace:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 ad1:	74 6f                	je     b42 <sysEnter_Vector-0x12f4be>
 ad3:	66                   	data16
 ad4:	66                   	data16
 ad5:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
 ad8:	74 72                	je     b4c <sysEnter_Vector-0x12f4b4>
 ada:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 add:	63 2f                	arpl   WORD PTR [edi],bp
 adf:	73 74                	jae    b55 <sysEnter_Vector-0x12f4ab>
 ae1:	72 69                	jb     b4c <sysEnter_Vector-0x12f4b4>
 ae3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ae4:	67 73 2f             	addr16 jae b16 <sysEnter_Vector-0x12f4ea>
 ae7:	73 74                	jae    b5d <sysEnter_Vector-0x12f4a3>
 ae9:	72 70                	jb     b5b <sysEnter_Vector-0x12f4a5>
 aeb:	61                   	popa   
 aec:	72 74                	jb     b62 <sysEnter_Vector-0x12f49e>
 aee:	73 2e                	jae    b1e <sysEnter_Vector-0x12f4e2>
 af0:	63 00                	arpl   WORD PTR [eax],ax
 af2:	73 74                	jae    b68 <sysEnter_Vector-0x12f498>
 af4:	72 6c                	jb     b62 <sysEnter_Vector-0x12f49e>
 af6:	65                   	gs
 af7:	66                   	data16
 af8:	74 00                	je     afa <sysEnter_Vector-0x12f506>
 afa:	73 72                	jae    b6e <sysEnter_Vector-0x12f492>
 afc:	63 2f                	arpl   WORD PTR [edi],bp
 afe:	73 74                	jae    b74 <sysEnter_Vector-0x12f48c>
 b00:	72 69                	jb     b6b <sysEnter_Vector-0x12f495>
 b02:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b03:	67 73 2f             	addr16 jae b35 <sysEnter_Vector-0x12f4cb>
 b06:	73 74                	jae    b7c <sysEnter_Vector-0x12f484>
 b08:	72 74                	jb     b7e <sysEnter_Vector-0x12f482>
 b0a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b0b:	6c                   	ins    BYTE PTR es:[edi],dx
 b0c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b0f:	73 74                	jae    b85 <sysEnter_Vector-0x12f47b>
 b11:	72 74                	jb     b87 <sysEnter_Vector-0x12f479>
 b13:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b14:	6c                   	ins    BYTE PTR es:[edi],dx
 b15:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b18:	63 2f                	arpl   WORD PTR [edi],bp
 b1a:	73 74                	jae    b90 <sysEnter_Vector-0x12f470>
 b1c:	72 69                	jb     b87 <sysEnter_Vector-0x12f479>
 b1e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b1f:	67 73 2f             	addr16 jae b51 <sysEnter_Vector-0x12f4af>
 b22:	73 74                	jae    b98 <sysEnter_Vector-0x12f468>
 b24:	72 74                	jb     b9a <sysEnter_Vector-0x12f466>
 b26:	72 69                	jb     b91 <sysEnter_Vector-0x12f46f>
 b28:	6d                   	ins    DWORD PTR es:[edi],dx
 b29:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b2c:	73 74                	jae    ba2 <sysEnter_Vector-0x12f45e>
 b2e:	72 74                	jb     ba4 <sysEnter_Vector-0x12f45c>
 b30:	72 69                	jb     b9b <sysEnter_Vector-0x12f465>
 b32:	6d                   	ins    DWORD PTR es:[edi],dx
 b33:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 b36:	70 75                	jo     bad <sysEnter_Vector-0x12f453>
 b38:	74 00                	je     b3a <sysEnter_Vector-0x12f4c6>
 b3a:	73 74                	jae    bb0 <sysEnter_Vector-0x12f450>
 b3c:	72 74                	jb     bb2 <sysEnter_Vector-0x12f44e>
 b3e:	72 69                	jb     ba9 <sysEnter_Vector-0x12f457>
 b40:	6d                   	ins    DWORD PTR es:[edi],dx
 b41:	49                   	dec    ecx
 b42:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 b45:	74 73                	je     bba <sysEnter_Vector-0x12f446>
 b47:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
 b4e:	2f                   	das    
 b4f:	73 74                	jae    bc5 <sysEnter_Vector-0x12f43b>
 b51:	72 72                	jb     bc5 <sysEnter_Vector-0x12f43b>
 b53:	65                   	gs
 b54:	70 6c                	jo     bc2 <sysEnter_Vector-0x12f43e>
 b56:	61                   	popa   
 b57:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
 b5a:	63 00                	arpl   WORD PTR [eax],ax
 b5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b5d:	65                   	gs
 b5e:	65                   	gs
 b5f:	64                   	fs
 b60:	6c                   	ins    BYTE PTR es:[edi],dx
 b61:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 b65:	73 6f                	jae    bd6 <sysEnter_Vector-0x12f42a>
 b67:	66                   	data16
 b68:	66                   	data16
 b69:	73 65                	jae    bd0 <sysEnter_Vector-0x12f430>
 b6b:	74 00                	je     b6d <sysEnter_Vector-0x12f493>
 b6d:	73 74                	jae    be3 <sysEnter_Vector-0x12f41d>
 b6f:	72 72                	jb     be3 <sysEnter_Vector-0x12f41d>
 b71:	65                   	gs
 b72:	70 6c                	jo     be0 <sysEnter_Vector-0x12f420>
 b74:	61                   	popa   
 b75:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 b78:	70 61                	jo     bdb <sysEnter_Vector-0x12f425>
 b7a:	74 74                	je     bf0 <sysEnter_Vector-0x12f410>
 b7c:	65                   	gs
 b7d:	72 6e                	jb     bed <sysEnter_Vector-0x12f413>
 b7f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b82:	72 72                	jb     bf6 <sysEnter_Vector-0x12f40a>
 b84:	65                   	gs
 b85:	70 6c                	jo     bf3 <sysEnter_Vector-0x12f40d>
 b87:	61                   	popa   
 b88:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
 b8b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b8e:	72 73                	jb     c03 <sysEnter_Vector-0x12f3fd>
 b90:	74 72                	je     c04 <sysEnter_Vector-0x12f3fc>
 b92:	49                   	dec    ecx
 b93:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b96:	72 6e                	jb     c06 <sysEnter_Vector-0x12f3fa>
 b98:	73 74                	jae    c0e <sysEnter_Vector-0x12f3f2>
 b9a:	72 49                	jb     be5 <sysEnter_Vector-0x12f41b>
 b9c:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b9f:	63 2f                	arpl   WORD PTR [edi],bp
 ba1:	73 74                	jae    c17 <sysEnter_Vector-0x12f3e9>
 ba3:	72 73                	jb     c18 <sysEnter_Vector-0x12f3e8>
 ba5:	74 72                	je     c19 <sysEnter_Vector-0x12f3e7>
 ba7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 baa:	72 63                	jb     c0f <sysEnter_Vector-0x12f3f1>
 bac:	73 69                	jae    c17 <sysEnter_Vector-0x12f3e9>
 bae:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 bb2:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 bb5:	72 69                	jb     c20 <sysEnter_Vector-0x12f3e0>
 bb7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bb8:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 bbc:	72 73                	jb     c31 <sysEnter_Vector-0x12f3cf>
 bbe:	74 72                	je     c32 <sysEnter_Vector-0x12f3ce>
 bc0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 bc3:	63 2f                	arpl   WORD PTR [edi],bp
 bc5:	74 69                	je     c30 <sysEnter_Vector-0x12f3d0>
 bc7:	6d                   	ins    DWORD PTR es:[edi],dx
 bc8:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 bcc:	6c                   	ins    BYTE PTR es:[edi],dx
 bcd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bce:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 bd1:	74 69                	je     c3c <sysEnter_Vector-0x12f3c4>
 bd3:	6d                   	ins    DWORD PTR es:[edi],dx
 bd4:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 bd9:	68 6f 75 72 00       	push   0x72756f
 bde:	67                   	addr16
 bdf:	65                   	gs
 be0:	74 74                	je     c56 <sysEnter_Vector-0x12f3aa>
 be2:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 be9:	61                   	popa   
 bea:	79 6c                	jns    c58 <sysEnter_Vector-0x12f3a8>
 bec:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 bf3:	7a 6e                	jp     c63 <sysEnter_Vector-0x12f39d>
 bf5:	61                   	popa   
 bf6:	6d                   	ins    DWORD PTR es:[edi],dx
 bf7:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 bfb:	74 69                	je     c66 <sysEnter_Vector-0x12f39a>
 bfd:	6d                   	ins    DWORD PTR es:[edi],dx
 bfe:	65                   	gs
 bff:	5f                   	pop    edi
 c00:	72 00                	jb     c02 <sysEnter_Vector-0x12f3fe>
 c02:	74 69                	je     c6d <sysEnter_Vector-0x12f393>
 c04:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 c07:	54                   	push   esp
 c08:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c09:	57                   	push   edi
 c0a:	61                   	popa   
 c0b:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 c12:	6f 
 c13:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c14:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c18:	79 65                	jns    c7f <sysEnter_Vector-0x12f381>
 c1a:	61                   	popa   
 c1b:	72 00                	jb     c1d <sysEnter_Vector-0x12f3e3>
 c1d:	6d                   	ins    DWORD PTR es:[edi],dx
 c1e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c1f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c20:	74 68                	je     c8a <sysEnter_Vector-0x12f376>
 c22:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 c25:	74 74                	je     c9b <sysEnter_Vector-0x12f365>
 c27:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 c2e:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 c35:	61                   	popa   
 c36:	79 6e                	jns    ca6 <sysEnter_Vector-0x12f35a>
 c38:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c39:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 c3c:	74 69                	je     ca7 <sysEnter_Vector-0x12f359>
 c3e:	6d                   	ins    DWORD PTR es:[edi],dx
 c3f:	65                   	gs
 c40:	5f                   	pop    edi
 c41:	72 49                	jb     c8c <sysEnter_Vector-0x12f374>
 c43:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c47:	6d                   	ins    DWORD PTR es:[edi],dx
 c48:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 c4f:	64                   	fs
 c50:	61                   	popa   
 c51:	79 00                	jns    c53 <sysEnter_Vector-0x12f3ad>
 c53:	6c                   	ins    BYTE PTR es:[edi],dx
 c54:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c55:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c58:	54                   	push   esp
 c59:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 c60:	75 66                	jne    cc8 <sysEnter_Vector-0x12f338>
 c62:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 c66:	65                   	gs
 c67:	5f                   	pop    edi
 c68:	74 00                	je     c6a <sysEnter_Vector-0x12f396>
 c6a:	6c                   	ins    BYTE PTR es:[edi],dx
 c6b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c6c:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c6f:	74 69                	je     cda <sysEnter_Vector-0x12f326>
 c71:	6d                   	ins    DWORD PTR es:[edi],dx
 c72:	65                   	gs
 c73:	5f                   	pop    edi
 c74:	72 00                	jb     c76 <sysEnter_Vector-0x12f38a>
 c76:	64                   	fs
 c77:	61                   	popa   
 c78:	79 63                	jns    cdd <sysEnter_Vector-0x12f323>
 c7a:	6c                   	ins    BYTE PTR es:[edi],dx
 c7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c7c:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 c7f:	6d                   	ins    DWORD PTR es:[edi],dx
 c80:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 c85:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c89:	67 6d                	ins    DWORD PTR es:[di],dx
 c8b:	74 6f                	je     cfc <sysEnter_Vector-0x12f304>
 c8d:	66                   	data16
 c8e:	66                   	data16
 c8f:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c93:	77 64                	ja     cf9 <sysEnter_Vector-0x12f307>
 c95:	61                   	popa   
 c96:	79 00                	jns    c98 <sysEnter_Vector-0x12f368>
 c98:	5f                   	pop    edi
 c99:	79 74                	jns    d0f <sysEnter_Vector-0x12f2f1>
 c9b:	61                   	popa   
 c9c:	62 00                	bound  eax,QWORD PTR [eax]
 c9e:	74 6d                	je     d0d <sysEnter_Vector-0x12f2f3>
 ca0:	5f                   	pop    edi
 ca1:	6d                   	ins    DWORD PTR es:[edi],dx
 ca2:	64                   	fs
 ca3:	61                   	popa   
 ca4:	79 00                	jns    ca6 <sysEnter_Vector-0x12f35a>
 ca6:	74 6d                	je     d15 <sysEnter_Vector-0x12f2eb>
 ca8:	5f                   	pop    edi
 ca9:	73 65                	jae    d10 <sysEnter_Vector-0x12f2f0>
 cab:	63 00                	arpl   WORD PTR [eax],ax
 cad:	74 6d                	je     d1c <sysEnter_Vector-0x12f2e4>
 caf:	5f                   	pop    edi
 cb0:	7a 6f                	jp     d21 <sysEnter_Vector-0x12f2df>
 cb2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cb3:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 cb8:	65                   	gs
 cb9:	72 00                	jb     cbb <sysEnter_Vector-0x12f345>
 cbb:	6c                   	ins    BYTE PTR es:[edi],dx
 cbc:	6f                   	outs   dx,DWORD PTR ds:[esi]
 cbd:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 cc0:	74 69                	je     d2b <sysEnter_Vector-0x12f2d5>
 cc2:	6d                   	ins    DWORD PTR es:[edi],dx
 cc3:	65                   	gs
 cc4:	5f                   	pop    edi
 cc5:	72 49                	jb     d10 <sysEnter_Vector-0x12f2f0>
 cc7:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 cca:	73 74                	jae    d40 <sysEnter_Vector-0x12f2c0>
 ccc:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 ccf:	73 00                	jae    cd1 <sysEnter_Vector-0x12f32f>
 cd1:	72 65                	jb     d38 <sysEnter_Vector-0x12f2c8>
 cd3:	73 75                	jae    d4a <sysEnter_Vector-0x12f2b6>
 cd5:	6c                   	ins    BYTE PTR es:[edi],dx
 cd6:	74 00                	je     cd8 <sysEnter_Vector-0x12f328>
 cd8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 cd9:	76 65                	jbe    d40 <sysEnter_Vector-0x12f2c0>
 cdb:	72 66                	jb     d43 <sysEnter_Vector-0x12f2bd>
 cdd:	6c                   	ins    BYTE PTR es:[edi],dx
 cde:	6f                   	outs   dx,DWORD PTR ds:[esi]
 cdf:	77 00                	ja     ce1 <sysEnter_Vector-0x12f31f>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	6b 0a 00             	imul   ecx,DWORD PTR [edx],0x0
   3:	00 a5 0a 00 00 aa    	add    BYTE PTR [ebp-0x55fffff6],ah
   9:	0a 00                	or     al,BYTE PTR [eax]
   b:	00 de                	add    dh,bl
   d:	0a 00                	or     al,BYTE PTR [eax]
	...
