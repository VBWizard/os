
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 5f 3d 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000008:	05 fc 5e 00 00       	add    eax,0x5efc
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 27 3d 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000040:	05 c4 5e 00 00       	add    eax,0x5ec4
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 ed 3c 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00007a:	05 8a 5e 00 00       	add    eax,0x5e8a
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 98 3c 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0000cf:	05 35 5e 00 00       	add    eax,0x5e35
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 6a 3c 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 de 5d 00 00    	add    ebx,0x5dde
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 50 00 00 00    	mov    DWORD PTR [ebx+0x50],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 50 00 00 00    	mov    DWORD PTR [ebx+0x50],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    
9f0001b3:	90                   	nop

9f0001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f0001b4:	55                   	push   ebp
9f0001b5:	89 e5                	mov    ebp,esp
9f0001b7:	53                   	push   ebx
9f0001b8:	83 ec 14             	sub    esp,0x14
9f0001bb:	e8 a7 3b 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0001c0:	05 44 5d 00 00       	add    eax,0x5d44
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f0001cc:	83 ec 0c             	sub    esp,0xc
9f0001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0001d2:	89 c3                	mov    ebx,eax
9f0001d4:	e8 68 26 00 00       	call   9f002841 <strlenI>
9f0001d9:	83 c4 10             	add    esp,0x10
9f0001dc:	83 e8 01             	sub    eax,0x1
9f0001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0001e2:	eb 39                	jmp    9f00021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f0001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001ea:	01 d0                	add    eax,edx
9f0001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f0001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001f8:	01 c2                	add    edx,eax
9f0001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000200:	01 c8                	add    eax,ecx
9f000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00020d:	01 c2                	add    edx,eax
9f00020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f00021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f000223:	7c bf                	jl     9f0001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f000225:	90                   	nop
9f000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000229:	c9                   	leave  
9f00022a:	c3                   	ret    

9f00022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f00022b:	55                   	push   ebp
9f00022c:	89 e5                	mov    ebp,esp
9f00022e:	53                   	push   ebx
9f00022f:	83 ec 14             	sub    esp,0x14
9f000232:	e8 30 3b 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000237:	05 cd 5c 00 00       	add    eax,0x5ccd
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000246:	79 03                	jns    9f00024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f00024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000255:	8d 50 01             	lea    edx,[eax+0x1]
9f000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00025b:	89 c2                	mov    edx,eax
9f00025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000266:	ba 67 66 66 66       	mov    edx,0x66666667
9f00026b:	89 c8                	mov    eax,ecx
9f00026d:	f7 ea                	imul   edx
9f00026f:	c1 fa 02             	sar    edx,0x2
9f000272:	89 c8                	mov    eax,ecx
9f000274:	c1 f8 1f             	sar    eax,0x1f
9f000277:	29 c2                	sub    edx,eax
9f000279:	89 d0                	mov    eax,edx
9f00027b:	c1 e0 02             	shl    eax,0x2
9f00027e:	01 d0                	add    eax,edx
9f000280:	01 c0                	add    eax,eax
9f000282:	29 c1                	sub    ecx,eax
9f000284:	89 ca                	mov    edx,ecx
9f000286:	89 d0                	mov    eax,edx
9f000288:	83 c0 30             	add    eax,0x30
9f00028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f00028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000290:	ba 67 66 66 66       	mov    edx,0x66666667
9f000295:	89 c8                	mov    eax,ecx
9f000297:	f7 ea                	imul   edx
9f000299:	c1 fa 02             	sar    edx,0x2
9f00029c:	89 c8                	mov    eax,ecx
9f00029e:	c1 f8 1f             	sar    eax,0x1f
9f0002a1:	29 c2                	sub    edx,eax
9f0002a3:	89 d0                	mov    eax,edx
9f0002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0002ac:	7f a4                	jg     9f000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f0002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002b2:	79 13                	jns    9f0002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f0002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002bd:	89 c2                	mov    edx,eax
9f0002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002c2:	01 d0                	add    eax,edx
9f0002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f0002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002cd:	01 d0                	add    eax,edx
9f0002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f0002d2:	83 ec 0c             	sub    esp,0xc
9f0002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0002d8:	e8 d7 fe ff ff       	call   9f0001b4 <reverseI>
9f0002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f0002e0:	90                   	nop
9f0002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002e4:	c9                   	leave  
9f0002e5:	c3                   	ret    

9f0002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f0002e6:	55                   	push   ebp
9f0002e7:	89 e5                	mov    ebp,esp
9f0002e9:	53                   	push   ebx
9f0002ea:	83 ec 14             	sub    esp,0x14
9f0002ed:	e8 75 3a 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0002f2:	05 12 5c 00 00       	add    eax,0x5c12
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000301:	79 03                	jns    9f000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f00030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000310:	8d 50 01             	lea    edx,[eax+0x1]
9f000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000316:	89 c2                	mov    edx,eax
9f000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f00031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000321:	ba 67 66 66 66       	mov    edx,0x66666667
9f000326:	89 c8                	mov    eax,ecx
9f000328:	f7 ea                	imul   edx
9f00032a:	c1 fa 02             	sar    edx,0x2
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	c1 f8 1f             	sar    eax,0x1f
9f000332:	29 c2                	sub    edx,eax
9f000334:	89 d0                	mov    eax,edx
9f000336:	c1 e0 02             	shl    eax,0x2
9f000339:	01 d0                	add    eax,edx
9f00033b:	01 c0                	add    eax,eax
9f00033d:	29 c1                	sub    ecx,eax
9f00033f:	89 ca                	mov    edx,ecx
9f000341:	89 d0                	mov    eax,edx
9f000343:	83 c0 30             	add    eax,0x30
9f000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00034b:	ba 67 66 66 66       	mov    edx,0x66666667
9f000350:	89 c8                	mov    eax,ecx
9f000352:	f7 ea                	imul   edx
9f000354:	c1 fa 02             	sar    edx,0x2
9f000357:	89 c8                	mov    eax,ecx
9f000359:	c1 f8 1f             	sar    eax,0x1f
9f00035c:	29 c2                	sub    edx,eax
9f00035e:	89 d0                	mov    eax,edx
9f000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000367:	7f a4                	jg     9f00030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00036d:	79 13                	jns    9f000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f00036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000372:	8d 50 01             	lea    edx,[eax+0x1]
9f000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000378:	89 c2                	mov    edx,eax
9f00037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00037d:	01 d0                	add    eax,edx
9f00037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000388:	01 d0                	add    eax,edx
9f00038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f00038d:	83 ec 0c             	sub    esp,0xc
9f000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000393:	e8 1c fe ff ff       	call   9f0001b4 <reverseI>
9f000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f00039b:	90                   	nop
9f00039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00039f:	c9                   	leave  
9f0003a0:	c3                   	ret    

9f0003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f0003a1:	55                   	push   ebp
9f0003a2:	89 e5                	mov    ebp,esp
9f0003a4:	83 ec 10             	sub    esp,0x10
9f0003a7:	e8 bb 39 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0003ac:	05 58 5b 00 00       	add    eax,0x5b58
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f0003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f0003bf:	eb 28                	jmp    9f0003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f0003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0003c4:	89 d0                	mov    eax,edx
9f0003c6:	c1 e0 02             	shl    eax,0x2
9f0003c9:	01 d0                	add    eax,edx
9f0003cb:	01 c0                	add    eax,eax
9f0003cd:	89 c1                	mov    ecx,eax
9f0003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003d5:	01 d0                	add    eax,edx
9f0003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003da:	0f be c0             	movsx  eax,al
9f0003dd:	01 c8                	add    eax,ecx
9f0003df:	83 e8 30             	sub    eax,0x30
9f0003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f0003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003ef:	01 d0                	add    eax,edx
9f0003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003f4:	84 c0                	test   al,al
9f0003f6:	75 c9                	jne    9f0003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f0003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f0003fb:	c9                   	leave  
9f0003fc:	c3                   	ret    
9f0003fd:	66 90                	xchg   ax,ax
9f0003ff:	90                   	nop

9f000400 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:14
#include "console.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f000400:	55                   	push   ebp
9f000401:	89 e5                	mov    ebp,esp
9f000403:	53                   	push   ebx
9f000404:	83 ec 14             	sub    esp,0x14
9f000407:	e8 84 39 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f00040c:	81 c3 f8 5a 00 00    	add    ebx,0x5af8
/home/yogi/src/os/aproj/libChrisOS/src/console.c:18
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f000412:	83 ec 08             	sub    esp,0x8
9f000415:	8d 83 1c f9 ff ff    	lea    eax,[ebx-0x6e4]
9f00041b:	50                   	push   eax
9f00041c:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00041f:	50                   	push   eax
9f000420:	e8 d7 22 00 00       	call   9f0026fc <strcpyI>
9f000425:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:19
    itoaI(x,xstr);
9f000428:	83 ec 08             	sub    esp,0x8
9f00042b:	8d 45 eb             	lea    eax,[ebp-0x15]
9f00042e:	50                   	push   eax
9f00042f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000432:	e8 af fe ff ff       	call   9f0002e6 <itoaI>
9f000437:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    strcatI(cmd,xstr);
9f00043a:	83 ec 08             	sub    esp,0x8
9f00043d:	8d 45 eb             	lea    eax,[ebp-0x15]
9f000440:	50                   	push   eax
9f000441:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000444:	50                   	push   eax
9f000445:	e8 64 21 00 00       	call   9f0025ae <strcatI>
9f00044a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    strcatI(cmd,";");
9f00044d:	83 ec 08             	sub    esp,0x8
9f000450:	8d 83 1f f9 ff ff    	lea    eax,[ebx-0x6e1]
9f000456:	50                   	push   eax
9f000457:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00045a:	50                   	push   eax
9f00045b:	e8 4e 21 00 00       	call   9f0025ae <strcatI>
9f000460:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    itoaI(y,ystr);
9f000463:	83 ec 08             	sub    esp,0x8
9f000466:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000469:	50                   	push   eax
9f00046a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00046d:	e8 74 fe ff ff       	call   9f0002e6 <itoaI>
9f000472:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,ystr);
9f000475:	83 ec 08             	sub    esp,0x8
9f000478:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00047b:	50                   	push   eax
9f00047c:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00047f:	50                   	push   eax
9f000480:	e8 29 21 00 00       	call   9f0025ae <strcatI>
9f000485:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    strcatI(cmd,"H");
9f000488:	83 ec 08             	sub    esp,0x8
9f00048b:	8d 83 21 f9 ff ff    	lea    eax,[ebx-0x6df]
9f000491:	50                   	push   eax
9f000492:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000495:	50                   	push   eax
9f000496:	e8 13 21 00 00       	call   9f0025ae <strcatI>
9f00049b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f00049e:	83 ec 08             	sub    esp,0x8
9f0004a1:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004a4:	50                   	push   eax
9f0004a5:	8d 83 23 f9 ff ff    	lea    eax,[ebx-0x6dd]
9f0004ab:	50                   	push   eax
9f0004ac:	e8 9c 08 00 00       	call   9f000d4d <printfI>
9f0004b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:27
}
9f0004b4:	90                   	nop
9f0004b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0004b8:	c9                   	leave  
9f0004b9:	c3                   	ret    

9f0004ba <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:30

VISIBLE void saveCursorPosition()
{
9f0004ba:	55                   	push   ebp
9f0004bb:	89 e5                	mov    ebp,esp
9f0004bd:	53                   	push   ebx
9f0004be:	83 ec 14             	sub    esp,0x14
9f0004c1:	e8 ca 38 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f0004c6:	81 c3 3e 5a 00 00    	add    ebx,0x5a3e
/home/yogi/src/os/aproj/libChrisOS/src/console.c:33
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0004cc:	83 ec 08             	sub    esp,0x8
9f0004cf:	8d 83 1c f9 ff ff    	lea    eax,[ebx-0x6e4]
9f0004d5:	50                   	push   eax
9f0004d6:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004d9:	50                   	push   eax
9f0004da:	e8 1d 22 00 00       	call   9f0026fc <strcpyI>
9f0004df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:34
    strcatI(cmd,"s");
9f0004e2:	83 ec 08             	sub    esp,0x8
9f0004e5:	8d 83 26 f9 ff ff    	lea    eax,[ebx-0x6da]
9f0004eb:	50                   	push   eax
9f0004ec:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004ef:	50                   	push   eax
9f0004f0:	e8 b9 20 00 00       	call   9f0025ae <strcatI>
9f0004f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0004f8:	83 ec 08             	sub    esp,0x8
9f0004fb:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004fe:	50                   	push   eax
9f0004ff:	8d 83 23 f9 ff ff    	lea    eax,[ebx-0x6dd]
9f000505:	50                   	push   eax
9f000506:	e8 42 08 00 00       	call   9f000d4d <printfI>
9f00050b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:37
}
9f00050e:	90                   	nop
9f00050f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000512:	c9                   	leave  
9f000513:	c3                   	ret    

9f000514 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:40

VISIBLE void restoreCursorPosition()
{
9f000514:	55                   	push   ebp
9f000515:	89 e5                	mov    ebp,esp
9f000517:	53                   	push   ebx
9f000518:	83 ec 14             	sub    esp,0x14
9f00051b:	e8 70 38 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000520:	81 c3 e4 59 00 00    	add    ebx,0x59e4
/home/yogi/src/os/aproj/libChrisOS/src/console.c:43
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000526:	83 ec 08             	sub    esp,0x8
9f000529:	8d 83 1c f9 ff ff    	lea    eax,[ebx-0x6e4]
9f00052f:	50                   	push   eax
9f000530:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000533:	50                   	push   eax
9f000534:	e8 c3 21 00 00       	call   9f0026fc <strcpyI>
9f000539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:44
    strcatI(cmd,"u");
9f00053c:	83 ec 08             	sub    esp,0x8
9f00053f:	8d 83 28 f9 ff ff    	lea    eax,[ebx-0x6d8]
9f000545:	50                   	push   eax
9f000546:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000549:	50                   	push   eax
9f00054a:	e8 5f 20 00 00       	call   9f0025ae <strcatI>
9f00054f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000552:	83 ec 08             	sub    esp,0x8
9f000555:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000558:	50                   	push   eax
9f000559:	8d 83 23 f9 ff ff    	lea    eax,[ebx-0x6dd]
9f00055f:	50                   	push   eax
9f000560:	e8 e8 07 00 00       	call   9f000d4d <printfI>
9f000565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:47
}
9f000568:	90                   	nop
9f000569:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00056c:	c9                   	leave  
9f00056d:	c3                   	ret    
9f00056e:	66 90                	xchg   ax,ax

9f000570 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
9f000570:	55                   	push   ebp
9f000571:	89 e5                	mov    ebp,esp
9f000573:	53                   	push   ebx
9f000574:	83 ec 14             	sub    esp,0x14
9f000577:	e8 14 38 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f00057c:	81 c3 88 59 00 00    	add    ebx,0x5988
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000582:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000589:	eb 7b                	jmp    9f000606 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00058b:	83 ec 0c             	sub    esp,0xc
9f00058e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000591:	e8 ab 22 00 00       	call   9f002841 <strlenI>
9f000596:	83 c4 10             	add    esp,0x10
9f000599:	89 c1                	mov    ecx,eax
9f00059b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0005a1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005a3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005a6:	c1 e2 02             	shl    edx,0x2
9f0005a9:	01 d0                	add    eax,edx
9f0005ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005ad:	83 ec 04             	sub    esp,0x4
9f0005b0:	51                   	push   ecx
9f0005b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0005b4:	50                   	push   eax
9f0005b5:	e8 21 23 00 00       	call   9f0028db <strncmpI>
9f0005ba:	83 c4 10             	add    esp,0x10
9f0005bd:	85 c0                	test   eax,eax
9f0005bf:	75 41                	jne    9f000602 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f0005c1:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0005c7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005cc:	c1 e2 02             	shl    edx,0x2
9f0005cf:	01 d0                	add    eax,edx
9f0005d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005d3:	83 ec 08             	sub    esp,0x8
9f0005d6:	8d 93 2a f9 ff ff    	lea    edx,[ebx-0x6d6]
9f0005dc:	52                   	push   edx
9f0005dd:	50                   	push   eax
9f0005de:	e8 df 29 00 00       	call   9f002fc2 <strstrI>
9f0005e3:	83 c4 10             	add    esp,0x10
9f0005e6:	83 c0 01             	add    eax,0x1
9f0005e9:	83 ec 04             	sub    esp,0x4
9f0005ec:	6a 32                	push   0x32
9f0005ee:	50                   	push   eax
9f0005ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0005f2:	e8 4d 23 00 00       	call   9f002944 <strncpyI>
9f0005f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f0005fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0005fd:	83 c0 01             	add    eax,0x1
9f000600:	eb 13                	jmp    9f000615 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f000602:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f000606:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f00060a:	0f 8e 7b ff ff ff    	jle    9f00058b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f000610:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f000615:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000618:	c9                   	leave  
9f000619:	c3                   	ret    

9f00061a <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
9f00061a:	55                   	push   ebp
9f00061b:	89 e5                	mov    ebp,esp
9f00061d:	53                   	push   ebx
9f00061e:	83 ec 14             	sub    esp,0x14
9f000621:	e8 6a 37 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000626:	81 c3 de 58 00 00    	add    ebx,0x58de
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
9f00062c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
9f000633:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f00063a:	e9 d5 00 00 00       	jmp    9f000714 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
9f00063f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000645:	8b 00                	mov    eax,DWORD PTR [eax]
9f000647:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00064a:	c1 e2 02             	shl    edx,0x2
9f00064d:	01 d0                	add    eax,edx
9f00064f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000651:	85 c0                	test   eax,eax
9f000653:	0f 84 b7 00 00 00    	je     9f000710 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000659:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000664:	c1 e2 02             	shl    edx,0x2
9f000667:	01 d0                	add    eax,edx
9f000669:	8b 00                	mov    eax,DWORD PTR [eax]
9f00066b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00066e:	83 ec 0c             	sub    esp,0xc
9f000671:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000674:	e8 c8 21 00 00       	call   9f002841 <strlenI>
9f000679:	83 c4 10             	add    esp,0x10
9f00067c:	89 c1                	mov    ecx,eax
9f00067e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000684:	8b 00                	mov    eax,DWORD PTR [eax]
9f000686:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000689:	c1 e2 02             	shl    edx,0x2
9f00068c:	01 d0                	add    eax,edx
9f00068e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000690:	83 ec 04             	sub    esp,0x4
9f000693:	51                   	push   ecx
9f000694:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000697:	50                   	push   eax
9f000698:	e8 3e 22 00 00       	call   9f0028db <strncmpI>
9f00069d:	83 c4 10             	add    esp,0x10
9f0006a0:	85 c0                	test   eax,eax
9f0006a2:	75 6c                	jne    9f000710 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
9f0006a4:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006ac:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006af:	c1 e2 02             	shl    edx,0x2
9f0006b2:	01 d0                	add    eax,edx
9f0006b4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006b6:	83 ec 08             	sub    esp,0x8
9f0006b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006bc:	50                   	push   eax
9f0006bd:	e8 3a 20 00 00       	call   9f0026fc <strcpyI>
9f0006c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
9f0006c5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006cb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006cd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006d0:	c1 e2 02             	shl    edx,0x2
9f0006d3:	01 d0                	add    eax,edx
9f0006d5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006d7:	83 ec 08             	sub    esp,0x8
9f0006da:	8d 93 2a f9 ff ff    	lea    edx,[ebx-0x6d6]
9f0006e0:	52                   	push   edx
9f0006e1:	50                   	push   eax
9f0006e2:	e8 c7 1e 00 00       	call   9f0025ae <strcatI>
9f0006e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
9f0006ea:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006f0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006f2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006f5:	c1 e2 02             	shl    edx,0x2
9f0006f8:	01 d0                	add    eax,edx
9f0006fa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006fc:	83 ec 08             	sub    esp,0x8
9f0006ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000702:	50                   	push   eax
9f000703:	e8 a6 1e 00 00       	call   9f0025ae <strcatI>
9f000708:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
9f00070b:	e9 c6 00 00 00       	jmp    9f0007d6 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f000710:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
9f000714:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f000718:	0f 8e 21 ff ff ff    	jle    9f00063f <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f00071e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f000725:	e9 a2 00 00 00       	jmp    9f0007cc <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
9f00072a:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000730:	8b 00                	mov    eax,DWORD PTR [eax]
9f000732:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000735:	c1 e2 02             	shl    edx,0x2
9f000738:	01 d0                	add    eax,edx
9f00073a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00073c:	85 c0                	test   eax,eax
9f00073e:	0f 85 84 00 00 00    	jne    9f0007c8 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f000744:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00074a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00074c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00074f:	c1 e2 02             	shl    edx,0x2
9f000752:	01 d0                	add    eax,edx
9f000754:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000757:	81 c2 00 02 00 00    	add    edx,0x200
9f00075d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
9f00075f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00076a:	c1 e2 02             	shl    edx,0x2
9f00076d:	01 d0                	add    eax,edx
9f00076f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000771:	83 ec 08             	sub    esp,0x8
9f000774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000777:	50                   	push   eax
9f000778:	e8 7f 1f 00 00       	call   9f0026fc <strcpyI>
9f00077d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
9f000780:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000786:	8b 00                	mov    eax,DWORD PTR [eax]
9f000788:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00078b:	c1 e2 02             	shl    edx,0x2
9f00078e:	01 d0                	add    eax,edx
9f000790:	8b 00                	mov    eax,DWORD PTR [eax]
9f000792:	83 ec 08             	sub    esp,0x8
9f000795:	8d 93 2a f9 ff ff    	lea    edx,[ebx-0x6d6]
9f00079b:	52                   	push   edx
9f00079c:	50                   	push   eax
9f00079d:	e8 0c 1e 00 00       	call   9f0025ae <strcatI>
9f0007a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
9f0007a5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0007ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0007b0:	c1 e2 02             	shl    edx,0x2
9f0007b3:	01 d0                	add    eax,edx
9f0007b5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007b7:	83 ec 08             	sub    esp,0x8
9f0007ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007bd:	50                   	push   eax
9f0007be:	e8 eb 1d 00 00       	call   9f0025ae <strcatI>
9f0007c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
9f0007c6:	eb 0e                	jmp    9f0007d6 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007c8:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
9f0007cc:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f0007d0:	0f 8e 54 ff ff ff    	jle    9f00072a <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f0007d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0007d9:	c9                   	leave  
9f0007da:	c3                   	ret    
9f0007db:	90                   	nop

9f0007dc <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11

#include "libChrisOS.h"
#include "file.h"

VISIBLE int getdir(char* path, char *buffer, int buflen)
{
9f0007dc:	55                   	push   ebp
9f0007dd:	89 e5                	mov    ebp,esp
9f0007df:	53                   	push   ebx
9f0007e0:	83 ec 04             	sub    esp,0x4
9f0007e3:	e8 7f 35 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0007e8:	05 1c 57 00 00       	add    eax,0x571c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, buflen);
9f0007ed:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0007f0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0007f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0007f6:	53                   	push   ebx
9f0007f7:	51                   	push   ecx
9f0007f8:	52                   	push   edx
9f0007f9:	68 04 03 00 00       	push   0x304
9f0007fe:	89 c3                	mov    ebx,eax
9f000800:	e8 c1 02 00 00       	call   9f000ac6 <do_syscall3>
9f000805:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:13
}
9f000808:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00080b:	c9                   	leave  
9f00080c:	c3                   	ret    

9f00080d <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16

VISIBLE void* open(char* path, const char* mode)
{
9f00080d:	55                   	push   ebp
9f00080e:	89 e5                	mov    ebp,esp
9f000810:	53                   	push   ebx
9f000811:	83 ec 04             	sub    esp,0x4
9f000814:	e8 4e 35 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000819:	05 eb 56 00 00       	add    eax,0x56eb
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
9f00081e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000821:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000824:	83 ec 04             	sub    esp,0x4
9f000827:	51                   	push   ecx
9f000828:	52                   	push   edx
9f000829:	6a 02                	push   0x2
9f00082b:	89 c3                	mov    ebx,eax
9f00082d:	e8 d0 02 00 00       	call   9f000b02 <do_syscall2>
9f000832:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:18
}
9f000835:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000838:	c9                   	leave  
9f000839:	c3                   	ret    

9f00083a <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21

VISIBLE void close(void* handle)
{
9f00083a:	55                   	push   ebp
9f00083b:	89 e5                	mov    ebp,esp
9f00083d:	53                   	push   ebx
9f00083e:	83 ec 04             	sub    esp,0x4
9f000841:	e8 21 35 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000846:	05 be 56 00 00       	add    eax,0x56be
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f00084b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00084e:	83 ec 08             	sub    esp,0x8
9f000851:	52                   	push   edx
9f000852:	6a 03                	push   0x3
9f000854:	89 c3                	mov    ebx,eax
9f000856:	e8 e5 02 00 00       	call   9f000b40 <do_syscall1>
9f00085b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:23
}
9f00085e:	90                   	nop
9f00085f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000862:	c9                   	leave  
9f000863:	c3                   	ret    

9f000864 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000864:	55                   	push   ebp
9f000865:	89 e5                	mov    ebp,esp
9f000867:	56                   	push   esi
9f000868:	53                   	push   ebx
9f000869:	e8 f9 34 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00086e:	05 96 56 00 00       	add    eax,0x5696
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000873:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000876:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000879:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00087c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00087f:	83 ec 0c             	sub    esp,0xc
9f000882:	56                   	push   esi
9f000883:	53                   	push   ebx
9f000884:	51                   	push   ecx
9f000885:	52                   	push   edx
9f000886:	6a 04                	push   0x4
9f000888:	89 c3                	mov    ebx,eax
9f00088a:	e8 fd 01 00 00       	call   9f000a8c <do_syscall4>
9f00088f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:28
}
9f000892:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000895:	5b                   	pop    ebx
9f000896:	5e                   	pop    esi
9f000897:	5d                   	pop    ebp
9f000898:	c3                   	ret    

9f000899 <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31

int writeI(void* handle, void *buffer, int size, int length)
{
9f000899:	55                   	push   ebp
9f00089a:	89 e5                	mov    ebp,esp
9f00089c:	56                   	push   esi
9f00089d:	53                   	push   ebx
9f00089e:	e8 c4 34 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0008a3:	05 61 56 00 00       	add    eax,0x5661
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f0008a8:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f0008ab:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0008ae:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0008b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008b4:	83 ec 0c             	sub    esp,0xc
9f0008b7:	56                   	push   esi
9f0008b8:	53                   	push   ebx
9f0008b9:	51                   	push   ecx
9f0008ba:	52                   	push   edx
9f0008bb:	6a 05                	push   0x5
9f0008bd:	89 c3                	mov    ebx,eax
9f0008bf:	e8 c8 01 00 00       	call   9f000a8c <do_syscall4>
9f0008c4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
9f0008c7:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0008ca:	5b                   	pop    ebx
9f0008cb:	5e                   	pop    esi
9f0008cc:	5d                   	pop    ebp
9f0008cd:	c3                   	ret    

9f0008ce <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f0008ce:	55                   	push   ebp
9f0008cf:	89 e5                	mov    ebp,esp
9f0008d1:	83 ec 08             	sub    esp,0x8
9f0008d4:	e8 8e 34 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0008d9:	05 2b 56 00 00       	add    eax,0x562b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
    return writeI(handle, buffer, size, length);
9f0008de:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f0008e1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0008e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008ea:	e8 aa ff ff ff       	call   9f000899 <writeI>
9f0008ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:38
}
9f0008f2:	c9                   	leave  
9f0008f3:	c3                   	ret    

9f0008f4 <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41

VISIBLE int seek(void* handle, long position, int whence)
{
9f0008f4:	55                   	push   ebp
9f0008f5:	89 e5                	mov    ebp,esp
9f0008f7:	53                   	push   ebx
9f0008f8:	83 ec 04             	sub    esp,0x4
9f0008fb:	e8 67 34 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000900:	05 04 56 00 00       	add    eax,0x5604
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000905:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000908:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00090b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00090e:	53                   	push   ebx
9f00090f:	51                   	push   ecx
9f000910:	52                   	push   edx
9f000911:	6a 09                	push   0x9
9f000913:	89 c3                	mov    ebx,eax
9f000915:	e8 ac 01 00 00       	call   9f000ac6 <do_syscall3>
9f00091a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
}
9f00091d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000920:	c9                   	leave  
9f000921:	c3                   	ret    
9f000922:	66 90                	xchg   ax,ax

9f000924 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f000924:	55                   	push   ebp
9f000925:	89 e5                	mov    ebp,esp
9f000927:	53                   	push   ebx
9f000928:	e8 3a 34 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00092d:	05 d7 55 00 00       	add    eax,0x55d7
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f000932:	b8 05 00 00 00       	mov    eax,0x5
9f000937:	bb 01 00 00 00       	mov    ebx,0x1
9f00093c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00093f:	89 d1                	mov    ecx,edx
9f000941:	e8 fc ff ff ff       	call   9f000942 <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f000946:	90                   	nop
9f000947:	5b                   	pop    ebx
9f000948:	5d                   	pop    ebp
9f000949:	c3                   	ret    

9f00094a <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f00094a:	55                   	push   ebp
9f00094b:	89 e5                	mov    ebp,esp
9f00094d:	53                   	push   ebx
9f00094e:	83 ec 14             	sub    esp,0x14
9f000951:	e8 11 34 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000956:	05 ae 55 00 00       	add    eax,0x55ae
9f00095b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00095e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f000961:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f000967:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f00096b:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f00096e:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f000972:	b8 05 00 00 00       	mov    eax,0x5
9f000977:	bb 01 00 00 00       	mov    ebx,0x1
9f00097c:	8d 55 fa             	lea    edx,[ebp-0x6]
9f00097f:	89 d1                	mov    ecx,edx
9f000981:	e8 fc ff ff ff       	call   9f000982 <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f000986:	90                   	nop
9f000987:	83 c4 14             	add    esp,0x14
9f00098a:	5b                   	pop    ebx
9f00098b:	5d                   	pop    ebp
9f00098c:	c3                   	ret    

9f00098d <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f00098d:	55                   	push   ebp
9f00098e:	89 e5                	mov    ebp,esp
9f000990:	53                   	push   ebx
9f000991:	83 ec 10             	sub    esp,0x10
9f000994:	e8 ce 33 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000999:	05 6b 55 00 00       	add    eax,0x556b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f00099e:	b8 04 00 00 00       	mov    eax,0x4
9f0009a3:	ba 00 00 00 00       	mov    edx,0x0
9f0009a8:	89 d3                	mov    ebx,edx
9f0009aa:	e8 fc ff ff ff       	call   9f0009ab <getchar+0x1e>
9f0009af:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f0009b2:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f0009b6:	74 06                	je     9f0009be <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f0009b8:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f0009bc:	eb 0c                	jmp    9f0009ca <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0009be:	b8 02 03 00 00       	mov    eax,0x302
9f0009c3:	e8 fc ff ff ff       	call   9f0009c4 <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f0009c8:	eb d4                	jmp    9f00099e <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f0009ca:	83 c4 10             	add    esp,0x10
9f0009cd:	5b                   	pop    ebx
9f0009ce:	5d                   	pop    ebp
9f0009cf:	c3                   	ret    

9f0009d0 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f0009d0:	55                   	push   ebp
9f0009d1:	89 e5                	mov    ebp,esp
9f0009d3:	53                   	push   ebx
9f0009d4:	83 ec 14             	sub    esp,0x14
9f0009d7:	e8 8b 33 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0009dc:	05 28 55 00 00       	add    eax,0x5528
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f0009e1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:49
    char lbuf[2]={0,0};
9f0009e8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
9f0009ec:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    
    if (stream!=1)
9f0009f0:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0009f4:	74 19                	je     9f000a0f <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:53
    {
        printI("Stream %u not implemented\n",stream);
9f0009f6:	83 ec 08             	sub    esp,0x8
9f0009f9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0009fc:	8d 90 2c f9 ff ff    	lea    edx,[eax-0x6d4]
9f000a02:	52                   	push   edx
9f000a03:	89 c3                	mov    ebx,eax
9f000a05:	e8 97 03 00 00       	call   9f000da1 <printI>
9f000a0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54 (discriminator 1)
        getsError: goto getsError;
9f000a0d:	eb fe                	jmp    9f000a0d <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f000a0f:	b8 04 00 00 00       	mov    eax,0x4
9f000a14:	ba 00 00 00 00       	mov    edx,0x0
9f000a19:	89 d3                	mov    ebx,edx
9f000a1b:	e8 fc ff ff ff       	call   9f000a1c <gets+0x4c>
9f000a20:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
        if (inchar=='\b' && len>0)
9f000a23:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f000a27:	75 17                	jne    9f000a40 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60 (discriminator 1)
9f000a29:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000a2d:	7e 11                	jle    9f000a40 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:62
        {
            buffer[len]=0;
9f000a2f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a35:	01 d0                	add    eax,edx
9f000a37:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            len--;
9f000a3a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f000a3e:	eb 43                	jmp    9f000a83 <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
        }
        else if (inchar!=0)
9f000a40:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f000a44:	74 33                	je     9f000a79 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:67
        {
            lbuf[0]=inchar;
9f000a46:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000a4a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:69
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f000a4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a50:	8d 50 01             	lea    edx,[eax+0x1]
9f000a53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000a56:	89 c2                	mov    edx,eax
9f000a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a5b:	01 c2                	add    edx,eax
9f000a5d:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000a61:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f000a63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a66:	83 c0 01             	add    eax,0x1
9f000a69:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f000a6c:	7d 06                	jge    9f000a74 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71 (discriminator 1)
9f000a6e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f000a72:	75 9b                	jne    9f000a0f <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:73
            
                return len;
9f000a74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a77:	eb 0c                	jmp    9f000a85 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:76
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f000a79:	b8 02 03 00 00       	mov    eax,0x302
9f000a7e:	e8 fc ff ff ff       	call   9f000a7f <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:81 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f000a83:	eb 8a                	jmp    9f000a0f <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82
}
9f000a85:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a88:	c9                   	leave  
9f000a89:	c3                   	ret    
9f000a8a:	66 90                	xchg   ax,ax

9f000a8c <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f000a8c:	55                   	push   ebp
9f000a8d:	89 e5                	mov    ebp,esp
9f000a8f:	56                   	push   esi
9f000a90:	53                   	push   ebx
9f000a91:	83 ec 10             	sub    esp,0x10
9f000a94:	e8 ce 32 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000a99:	05 6b 54 00 00       	add    eax,0x546b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f000a9e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f000aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000aa8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000aab:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000aae:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000ab1:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f000ab4:	e8 fc ff ff ff       	call   9f000ab5 <do_syscall4+0x29>
9f000ab9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f000abc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f000abf:	83 c4 10             	add    esp,0x10
9f000ac2:	5b                   	pop    ebx
9f000ac3:	5e                   	pop    esi
9f000ac4:	5d                   	pop    ebp
9f000ac5:	c3                   	ret    

9f000ac6 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f000ac6:	55                   	push   ebp
9f000ac7:	89 e5                	mov    ebp,esp
9f000ac9:	56                   	push   esi
9f000aca:	53                   	push   ebx
9f000acb:	83 ec 10             	sub    esp,0x10
9f000ace:	e8 94 32 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000ad3:	05 31 54 00 00       	add    eax,0x5431
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f000ad8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f000adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000ae2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000ae5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000ae8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000aeb:	be 00 00 00 00       	mov    esi,0x0
9f000af0:	e8 fc ff ff ff       	call   9f000af1 <do_syscall3+0x2b>
9f000af5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f000af8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f000afb:	83 c4 10             	add    esp,0x10
9f000afe:	5b                   	pop    ebx
9f000aff:	5e                   	pop    esi
9f000b00:	5d                   	pop    ebp
9f000b01:	c3                   	ret    

9f000b02 <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f000b02:	55                   	push   ebp
9f000b03:	89 e5                	mov    ebp,esp
9f000b05:	56                   	push   esi
9f000b06:	53                   	push   ebx
9f000b07:	83 ec 10             	sub    esp,0x10
9f000b0a:	e8 58 32 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000b0f:	05 f5 53 00 00       	add    eax,0x53f5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f000b14:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f000b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b1e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000b21:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000b24:	ba 00 00 00 00       	mov    edx,0x0
9f000b29:	be 00 00 00 00       	mov    esi,0x0
9f000b2e:	e8 fc ff ff ff       	call   9f000b2f <do_syscall2+0x2d>
9f000b33:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f000b36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f000b39:	83 c4 10             	add    esp,0x10
9f000b3c:	5b                   	pop    ebx
9f000b3d:	5e                   	pop    esi
9f000b3e:	5d                   	pop    ebp
9f000b3f:	c3                   	ret    

9f000b40 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f000b40:	55                   	push   ebp
9f000b41:	89 e5                	mov    ebp,esp
9f000b43:	56                   	push   esi
9f000b44:	53                   	push   ebx
9f000b45:	83 ec 10             	sub    esp,0x10
9f000b48:	e8 1a 32 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000b4d:	05 b7 53 00 00       	add    eax,0x53b7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f000b52:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f000b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b5c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000b5f:	b9 00 00 00 00       	mov    ecx,0x0
9f000b64:	ba 00 00 00 00       	mov    edx,0x0
9f000b69:	be 00 00 00 00       	mov    esi,0x0
9f000b6e:	e8 fc ff ff ff       	call   9f000b6f <do_syscall1+0x2f>
9f000b73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f000b76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f000b79:	83 c4 10             	add    esp,0x10
9f000b7c:	5b                   	pop    ebx
9f000b7d:	5e                   	pop    esi
9f000b7e:	5d                   	pop    ebp
9f000b7f:	c3                   	ret    

9f000b80 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f000b80:	55                   	push   ebp
9f000b81:	89 e5                	mov    ebp,esp
9f000b83:	56                   	push   esi
9f000b84:	53                   	push   ebx
9f000b85:	83 ec 10             	sub    esp,0x10
9f000b88:	e8 da 31 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000b8d:	05 77 53 00 00       	add    eax,0x5377
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f000b92:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f000b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b9c:	bb 00 00 00 00       	mov    ebx,0x0
9f000ba1:	b9 00 00 00 00       	mov    ecx,0x0
9f000ba6:	ba 00 00 00 00       	mov    edx,0x0
9f000bab:	be 00 00 00 00       	mov    esi,0x0
9f000bb0:	e8 fc ff ff ff       	call   9f000bb1 <do_syscall0+0x31>
9f000bb5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f000bb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f000bbb:	83 c4 10             	add    esp,0x10
9f000bbe:	5b                   	pop    ebx
9f000bbf:	5e                   	pop    esi
9f000bc0:	5d                   	pop    ebp
9f000bc1:	c3                   	ret    

9f000bc2 <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f000bc2:	55                   	push   ebp
9f000bc3:	89 e5                	mov    ebp,esp
9f000bc5:	53                   	push   ebx
9f000bc6:	83 ec 04             	sub    esp,0x4
9f000bc9:	e8 c2 31 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000bce:	81 c3 36 53 00 00    	add    ebx,0x5336
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f000bd4:	83 ec 08             	sub    esp,0x8
9f000bd7:	8d 83 48 f9 ff ff    	lea    eax,[ebx-0x6b8]
9f000bdd:	50                   	push   eax
9f000bde:	68 00 00 00 02       	push   0x2000000
9f000be3:	e8 ed 01 00 00       	call   9f000dd5 <printdI>
9f000be8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f000beb:	0f b6 83 54 00 00 00 	movzx  eax,BYTE PTR [ebx+0x54]
9f000bf2:	83 f0 01             	xor    eax,0x1
9f000bf5:	84 c0                	test   al,al
9f000bf7:	74 70                	je     9f000c69 <libc_init+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f000bf9:	e8 ee 0a 00 00       	call   9f0016ec <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f000bfe:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f000c01:	89 c2                	mov    edx,eax
9f000c03:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c09:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall0(SYSCALL_INVALID);
9f000c0b:	83 ec 0c             	sub    esp,0xc
9f000c0e:	6a 00                	push   0x0
9f000c10:	e8 6b ff ff ff       	call   9f000b80 <do_syscall0>
9f000c15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f000c18:	8d 83 7d ad ff ff    	lea    eax,[ebx-0x5283]
9f000c1e:	83 ec 08             	sub    esp,0x8
9f000c21:	50                   	push   eax
9f000c22:	68 63 01 00 00       	push   0x163
9f000c27:	e8 14 ff ff ff       	call   9f000b40 <do_syscall1>
9f000c2c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        libcInitialized = true;
9f000c2f:	c6 83 54 00 00 00 01 	mov    BYTE PTR [ebx+0x54],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        printBuffer = mallocI(0x1000);
9f000c36:	83 ec 0c             	sub    esp,0xc
9f000c39:	68 00 10 00 00       	push   0x1000
9f000c3e:	e8 d6 0b 00 00       	call   9f001819 <mallocI>
9f000c43:	83 c4 10             	add    esp,0x10
9f000c46:	89 c2                	mov    edx,eax
9f000c48:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000c4e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f000c50:	83 ec 08             	sub    esp,0x8
9f000c53:	8d 83 60 f9 ff ff    	lea    eax,[ebx-0x6a0]
9f000c59:	50                   	push   eax
9f000c5a:	68 00 00 00 02       	push   0x2000000
9f000c5f:	e8 71 01 00 00       	call   9f000dd5 <printdI>
9f000c64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f000c67:	eb 12                	jmp    9f000c7b <libc_init+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f000c69:	83 ec 0c             	sub    esp,0xc
9f000c6c:	8d 83 78 f9 ff ff    	lea    eax,[ebx-0x688]
9f000c72:	50                   	push   eax
9f000c73:	e8 29 01 00 00       	call   9f000da1 <printI>
9f000c78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68
}
9f000c7b:	90                   	nop
9f000c7c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c7f:	c9                   	leave  
9f000c80:	c3                   	ret    

9f000c81 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71

void __attribute__((destructor)) libc_cleanup(void)
{
9f000c81:	55                   	push   ebp
9f000c82:	89 e5                	mov    ebp,esp
9f000c84:	53                   	push   ebx
9f000c85:	83 ec 04             	sub    esp,0x4
9f000c88:	e8 da 30 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000c8d:	05 77 52 00 00       	add    eax,0x5277
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:72
    malloc_cleanup();
9f000c92:	89 c3                	mov    ebx,eax
9f000c94:	e8 37 0e 00 00       	call   9f001ad0 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73
}
9f000c99:	90                   	nop
9f000c9a:	83 c4 04             	add    esp,0x4
9f000c9d:	5b                   	pop    ebx
9f000c9e:	5d                   	pop    ebp
9f000c9f:	c3                   	ret    

9f000ca0 <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76

VISIBLE int print(const char *format, ...)
{
9f000ca0:	55                   	push   ebp
9f000ca1:	89 e5                	mov    ebp,esp
9f000ca3:	53                   	push   ebx
9f000ca4:	83 ec 14             	sub    esp,0x14
9f000ca7:	e8 e4 30 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000cac:	81 c3 58 52 00 00    	add    ebx,0x5258
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    va_list args;
    va_start( args, format );
9f000cb2:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000cb5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:80
    
    int size = vsprintf(printBuffer, format, args);
9f000cb8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000cbb:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000cc1:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cc3:	83 ec 04             	sub    esp,0x4
9f000cc6:	52                   	push   edx
9f000cc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cca:	50                   	push   eax
9f000ccb:	e8 a1 13 00 00       	call   9f002071 <vsprintf>
9f000cd0:	83 c4 10             	add    esp,0x10
9f000cd3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000cd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000cd9:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000cdf:	8b 12                	mov    edx,DWORD PTR [edx]
9f000ce1:	50                   	push   eax
9f000ce2:	52                   	push   edx
9f000ce3:	6a 01                	push   0x1
9f000ce5:	6a 05                	push   0x5
9f000ce7:	e8 da fd ff ff       	call   9f000ac6 <do_syscall3>
9f000cec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82
    return 0;
9f000cef:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
}
9f000cf4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000cf7:	c9                   	leave  
9f000cf8:	c3                   	ret    

9f000cf9 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86

VISIBLE int printf(const char *format, ...)
{
9f000cf9:	55                   	push   ebp
9f000cfa:	89 e5                	mov    ebp,esp
9f000cfc:	53                   	push   ebx
9f000cfd:	83 ec 14             	sub    esp,0x14
9f000d00:	e8 8b 30 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000d05:	81 c3 ff 51 00 00    	add    ebx,0x51ff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:88
    va_list args;
    va_start( args, format );
9f000d0b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000d0e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90
    
    int size = vsprintf(printBuffer, format, args);
9f000d11:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000d14:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000d1a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d1c:	83 ec 04             	sub    esp,0x4
9f000d1f:	52                   	push   edx
9f000d20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d23:	50                   	push   eax
9f000d24:	e8 48 13 00 00       	call   9f002071 <vsprintf>
9f000d29:	83 c4 10             	add    esp,0x10
9f000d2c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000d2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000d32:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000d38:	8b 12                	mov    edx,DWORD PTR [edx]
9f000d3a:	50                   	push   eax
9f000d3b:	52                   	push   edx
9f000d3c:	6a 01                	push   0x1
9f000d3e:	6a 05                	push   0x5
9f000d40:	e8 81 fd ff ff       	call   9f000ac6 <do_syscall3>
9f000d45:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
}
9f000d48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d4b:	c9                   	leave  
9f000d4c:	c3                   	ret    

9f000d4d <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95

int printfI(const char *format, ...)
{
9f000d4d:	55                   	push   ebp
9f000d4e:	89 e5                	mov    ebp,esp
9f000d50:	53                   	push   ebx
9f000d51:	83 ec 14             	sub    esp,0x14
9f000d54:	e8 37 30 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000d59:	81 c3 ab 51 00 00    	add    ebx,0x51ab
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97
    va_list args;
    va_start( args, format );
9f000d5f:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000d62:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:99
    
    int size = vsprintf(printBuffer, format, args);
9f000d65:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000d68:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000d6e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d70:	83 ec 04             	sub    esp,0x4
9f000d73:	52                   	push   edx
9f000d74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d77:	50                   	push   eax
9f000d78:	e8 f4 12 00 00       	call   9f002071 <vsprintf>
9f000d7d:	83 c4 10             	add    esp,0x10
9f000d80:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000d83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000d86:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000d8c:	8b 12                	mov    edx,DWORD PTR [edx]
9f000d8e:	50                   	push   eax
9f000d8f:	52                   	push   edx
9f000d90:	6a 01                	push   0x1
9f000d92:	6a 05                	push   0x5
9f000d94:	e8 2d fd ff ff       	call   9f000ac6 <do_syscall3>
9f000d99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
}
9f000d9c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d9f:	c9                   	leave  
9f000da0:	c3                   	ret    

9f000da1 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104

int printI(const char *format, ...)
{
9f000da1:	55                   	push   ebp
9f000da2:	89 e5                	mov    ebp,esp
9f000da4:	83 ec 10             	sub    esp,0x10
9f000da7:	e8 bb 2f 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000dac:	05 58 51 00 00       	add    eax,0x5158
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106
    va_list args;
    va_start( args, format );
9f000db1:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000db4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f000db7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000dba:	89 c2                	mov    edx,eax
9f000dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000dbf:	52                   	push   edx
9f000dc0:	50                   	push   eax
9f000dc1:	68 00 03 00 00       	push   0x300
9f000dc6:	e8 37 fd ff ff       	call   9f000b02 <do_syscall2>
9f000dcb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
    return 0;
9f000dce:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
}
9f000dd3:	c9                   	leave  
9f000dd4:	c3                   	ret    

9f000dd5 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f000dd5:	55                   	push   ebp
9f000dd6:	89 e5                	mov    ebp,esp
9f000dd8:	83 ec 10             	sub    esp,0x10
9f000ddb:	e8 87 2f 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000de0:	05 24 51 00 00       	add    eax,0x5124
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:114
    va_list args;
    va_start( args, format );
9f000de5:	8d 45 10             	lea    eax,[ebp+0x10]
9f000de8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f000deb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000dee:	89 c2                	mov    edx,eax
9f000df0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000df3:	52                   	push   edx
9f000df4:	50                   	push   eax
9f000df5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000df8:	68 01 03 00 00       	push   0x301
9f000dfd:	e8 c4 fc ff ff       	call   9f000ac6 <do_syscall3>
9f000e02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    return 0;
9f000e05:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    va_end(args);
}
9f000e0a:	c9                   	leave  
9f000e0b:	c3                   	ret    

9f000e0c <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f000e0c:	55                   	push   ebp
9f000e0d:	89 e5                	mov    ebp,esp
9f000e0f:	56                   	push   esi
9f000e10:	53                   	push   ebx
9f000e11:	83 ec 10             	sub    esp,0x10
9f000e14:	e8 4e 2f 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000e19:	05 eb 50 00 00       	add    eax,0x50eb
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:123
    SLEEP_SECONDS(__seconds)
9f000e1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000e21:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000e24:	b8 70 01 00 00       	mov    eax,0x170
9f000e29:	bb 00 00 00 00       	mov    ebx,0x0
9f000e2e:	b9 00 00 00 00       	mov    ecx,0x0
9f000e33:	ba 00 00 00 00       	mov    edx,0x0
9f000e38:	be 00 00 00 00       	mov    esi,0x0
9f000e3d:	e8 fc ff ff ff       	call   9f000e3e <sleep+0x32>
9f000e42:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000e45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000e48:	6b d0 64             	imul   edx,eax,0x64
9f000e4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000e4e:	01 d0                	add    eax,edx
9f000e50:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000e53:	b8 66 01 00 00       	mov    eax,0x166
9f000e58:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000e5b:	b9 00 00 00 00       	mov    ecx,0x0
9f000e60:	ba 00 00 00 00       	mov    edx,0x0
9f000e65:	be 00 00 00 00       	mov    esi,0x0
9f000e6a:	e8 fc ff ff ff       	call   9f000e6b <sleep+0x5f>
9f000e6f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
    return 0;
9f000e72:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
}
9f000e77:	83 c4 10             	add    esp,0x10
9f000e7a:	5b                   	pop    ebx
9f000e7b:	5e                   	pop    esi
9f000e7c:	5d                   	pop    ebp
9f000e7d:	c3                   	ret    

9f000e7e <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128

void stop()
{
9f000e7e:	55                   	push   ebp
9f000e7f:	89 e5                	mov    ebp,esp
9f000e81:	e8 e1 2e 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000e86:	05 7e 50 00 00       	add    eax,0x507e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    do_syscall0(SYSCALL_STOP);
9f000e8b:	68 68 01 00 00       	push   0x168
9f000e90:	e8 eb fc ff ff       	call   9f000b80 <do_syscall0>
9f000e95:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
}
9f000e98:	90                   	nop
9f000e99:	c9                   	leave  
9f000e9a:	c3                   	ret    

9f000e9b <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f000e9b:	55                   	push   ebp
9f000e9c:	89 e5                	mov    ebp,esp
9f000e9e:	e8 c4 2e 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000ea3:	05 61 50 00 00       	add    eax,0x5061
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f000ea8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000eab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000eb1:	51                   	push   ecx
9f000eb2:	52                   	push   edx
9f000eb3:	50                   	push   eax
9f000eb4:	68 67 01 00 00       	push   0x167
9f000eb9:	e8 08 fc ff ff       	call   9f000ac6 <do_syscall3>
9f000ebe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
}
9f000ec1:	90                   	nop
9f000ec2:	c9                   	leave  
9f000ec3:	c3                   	ret    

9f000ec4 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138

VISIBLE int fork()
{
9f000ec4:	55                   	push   ebp
9f000ec5:	89 e5                	mov    ebp,esp
9f000ec7:	83 ec 10             	sub    esp,0x10
9f000eca:	e8 98 2e 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000ecf:	05 35 50 00 00       	add    eax,0x5035
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139
    uint32_t retVal = 0;
9f000ed4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f000edb:	b8 06 00 00 00       	mov    eax,0x6
9f000ee0:	e8 fc ff ff ff       	call   9f000ee1 <fork+0x1d>
9f000ee5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return retVal;
9f000ee8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f000eeb:	c9                   	leave  
9f000eec:	c3                   	ret    

9f000eed <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE int exec(char* path, int argc, char** argv)
{
9f000eed:	55                   	push   ebp
9f000eee:	89 e5                	mov    ebp,esp
9f000ef0:	83 ec 10             	sub    esp,0x10
9f000ef3:	e8 6f 2e 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f000ef8:	05 0c 50 00 00       	add    eax,0x500c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    int pid=0;
9f000efd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f000f04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f07:	8d 80 9e f9 ff ff    	lea    eax,[eax-0x662]
9f000f0d:	50                   	push   eax
9f000f0e:	68 00 00 00 02       	push   0x2000000
9f000f13:	e8 bd fe ff ff       	call   9f000dd5 <printdI>
9f000f18:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f000f1b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000f1e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f24:	51                   	push   ecx
9f000f25:	52                   	push   edx
9f000f26:	50                   	push   eax
9f000f27:	6a 59                	push   0x59
9f000f29:	e8 98 fb ff ff       	call   9f000ac6 <do_syscall3>
9f000f2e:	83 c4 10             	add    esp,0x10
9f000f31:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:150
    return pid;
9f000f34:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
}
9f000f37:	c9                   	leave  
9f000f38:	c3                   	ret    

9f000f39 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154

VISIBLE int execb(char* path)
{
9f000f39:	55                   	push   ebp
9f000f3a:	89 e5                	mov    ebp,esp
9f000f3c:	53                   	push   ebx
9f000f3d:	83 ec 24             	sub    esp,0x24
9f000f40:	e8 4b 2e 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f000f45:	81 c3 bf 4f 00 00    	add    ebx,0x4fbf
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:155
    int pid=0, argc=0;
9f000f4b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f000f52:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f000f59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f5c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
    char* program;
    program=mallocI(512);
9f000f65:	83 ec 0c             	sub    esp,0xc
9f000f68:	68 00 02 00 00       	push   0x200
9f000f6d:	e8 a7 08 00 00       	call   9f001819 <mallocI>
9f000f72:	83 c4 10             	add    esp,0x10
9f000f75:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f000f78:	83 ec 08             	sub    esp,0x8
9f000f7b:	8d 83 b1 f9 ff ff    	lea    eax,[ebx-0x64f]
9f000f81:	50                   	push   eax
9f000f82:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f000f85:	e8 38 20 00 00       	call   9f002fc2 <strstrI>
9f000f8a:	83 c4 10             	add    esp,0x10
9f000f8d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
        if (argc==0)
9f000f90:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000f94:	75 44                	jne    9f000fda <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
        {
            if (spacePtr==0)
9f000f96:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000f9a:	75 22                	jne    9f000fbe <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
                strncpyI(program, path, strlenI(path));
9f000f9c:	83 ec 0c             	sub    esp,0xc
9f000f9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fa2:	e8 9a 18 00 00       	call   9f002841 <strlenI>
9f000fa7:	83 c4 10             	add    esp,0x10
9f000faa:	83 ec 04             	sub    esp,0x4
9f000fad:	50                   	push   eax
9f000fae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fb1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000fb4:	e8 8b 19 00 00       	call   9f002944 <strncpyI>
9f000fb9:	83 c4 10             	add    esp,0x10
9f000fbc:	eb 1c                	jmp    9f000fda <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
            else
                strncpyI(program, path, spacePtr-path);
9f000fbe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fc4:	29 c2                	sub    edx,eax
9f000fc6:	89 d0                	mov    eax,edx
9f000fc8:	83 ec 04             	sub    esp,0x4
9f000fcb:	50                   	push   eax
9f000fcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fcf:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000fd2:	e8 6d 19 00 00       	call   9f002944 <strncpyI>
9f000fd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:170
        }
        argc++;
9f000fda:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
            
    } while (spacePtr++);
9f000fde:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000fe1:	8d 50 01             	lea    edx,[eax+0x1]
9f000fe4:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f000fe7:	85 c0                	test   eax,eax
9f000fe9:	75 8d                	jne    9f000f78 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
    
    argv=mallocI((argc*50)+(argc*4));
9f000feb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000fee:	6b c0 36             	imul   eax,eax,0x36
9f000ff1:	83 ec 0c             	sub    esp,0xc
9f000ff4:	50                   	push   eax
9f000ff5:	e8 1f 08 00 00       	call   9f001819 <mallocI>
9f000ffa:	83 c4 10             	add    esp,0x10
9f000ffd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    int argvPtr=4*argc;
9f001000:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001003:	c1 e0 02             	shl    eax,0x2
9f001006:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
    spacePtr=path;
9f001009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00100c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    for (int cnt=0;cnt<argc; cnt++)
9f00100f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001016:	e9 c8 00 00 00       	jmp    9f0010e3 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179
    {
        argv[cnt]=(char*)argv+argvPtr;
9f00101b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00101e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001025:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001028:	01 d0                	add    eax,edx
9f00102a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f00102d:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001030:	01 ca                	add    edx,ecx
9f001032:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
        spacePtr=strstrI(spacePtr," ");
9f001034:	83 ec 08             	sub    esp,0x8
9f001037:	8d 83 b1 f9 ff ff    	lea    eax,[ebx-0x64f]
9f00103d:	50                   	push   eax
9f00103e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001041:	e8 7c 1f 00 00       	call   9f002fc2 <strstrI>
9f001046:	83 c4 10             	add    esp,0x10
9f001049:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
        if (spacePtr)
9f00104c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001050:	74 2f                	je     9f001081 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001052:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001055:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001058:	29 c2                	sub    edx,eax
9f00105a:	89 d0                	mov    eax,edx
9f00105c:	89 c1                	mov    ecx,eax
9f00105e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001061:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001068:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00106b:	01 d0                	add    eax,edx
9f00106d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00106f:	83 ec 04             	sub    esp,0x4
9f001072:	51                   	push   ecx
9f001073:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001076:	50                   	push   eax
9f001077:	e8 c8 18 00 00       	call   9f002944 <strncpyI>
9f00107c:	83 c4 10             	add    esp,0x10
9f00107f:	eb 31                	jmp    9f0010b2 <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001081:	83 ec 0c             	sub    esp,0xc
9f001084:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001087:	e8 b5 17 00 00       	call   9f002841 <strlenI>
9f00108c:	83 c4 10             	add    esp,0x10
9f00108f:	89 c2                	mov    edx,eax
9f001091:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001094:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f00109b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00109e:	01 c8                	add    eax,ecx
9f0010a0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010a2:	83 ec 04             	sub    esp,0x4
9f0010a5:	52                   	push   edx
9f0010a6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0010a9:	50                   	push   eax
9f0010aa:	e8 95 18 00 00       	call   9f002944 <strncpyI>
9f0010af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185 (discriminator 2)
        strtrimI(argv[cnt]);
9f0010b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010b5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0010bc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0010bf:	01 d0                	add    eax,edx
9f0010c1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0010c3:	83 ec 0c             	sub    esp,0xc
9f0010c6:	50                   	push   eax
9f0010c7:	e8 34 1c 00 00       	call   9f002d00 <strtrimI>
9f0010cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f0010cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010d2:	8d 50 01             	lea    edx,[eax+0x1]
9f0010d5:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0010d8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187 (discriminator 2)
        argvPtr+=50;
9f0010db:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f0010df:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177 (discriminator 1)
9f0010e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0010e6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0010e9:	0f 8c 2c ff ff ff    	jl     9f00101b <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f0010ef:	83 ec 04             	sub    esp,0x4
9f0010f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0010f5:	8d 83 b3 f9 ff ff    	lea    eax,[ebx-0x64d]
9f0010fb:	50                   	push   eax
9f0010fc:	68 00 00 00 02       	push   0x2000000
9f001101:	e8 cf fc ff ff       	call   9f000dd5 <printdI>
9f001106:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001109:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f00110c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00110f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001112:	51                   	push   ecx
9f001113:	52                   	push   edx
9f001114:	50                   	push   eax
9f001115:	68 05 03 00 00       	push   0x305
9f00111a:	e8 a7 f9 ff ff       	call   9f000ac6 <do_syscall3>
9f00111f:	83 c4 10             	add    esp,0x10
9f001122:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001125:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
    freeI(argv);
    freeI(program);
}
9f001128:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00112b:	c9                   	leave  
9f00112c:	c3                   	ret    

9f00112d <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200

VISIBLE int execa(char* path, int argc, char** argv)
{
9f00112d:	55                   	push   ebp
9f00112e:	89 e5                	mov    ebp,esp
9f001130:	83 ec 10             	sub    esp,0x10
9f001133:	e8 2f 2c 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001138:	05 cc 4d 00 00       	add    eax,0x4dcc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    int pid=0;
9f00113d:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001144:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001147:	8d 80 c7 f9 ff ff    	lea    eax,[eax-0x639]
9f00114d:	50                   	push   eax
9f00114e:	68 00 00 00 02       	push   0x2000000
9f001153:	e8 7d fc ff ff       	call   9f000dd5 <printdI>
9f001158:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:203
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f00115b:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00115e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001164:	51                   	push   ecx
9f001165:	52                   	push   edx
9f001166:	50                   	push   eax
9f001167:	68 05 03 00 00       	push   0x305
9f00116c:	e8 55 f9 ff ff       	call   9f000ac6 <do_syscall3>
9f001171:	83 c4 10             	add    esp,0x10
9f001174:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
    return pid;
9f001177:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
}
9f00117a:	c9                   	leave  
9f00117b:	c3                   	ret    

9f00117c <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208

VISIBLE int waitpid(uint32_t pid)
{
9f00117c:	55                   	push   ebp
9f00117d:	89 e5                	mov    ebp,esp
9f00117f:	e8 e3 2b 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001184:	05 80 4d 00 00       	add    eax,0x4d80
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001189:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00118c:	6a 61                	push   0x61
9f00118e:	e8 ad f9 ff ff       	call   9f000b40 <do_syscall1>
9f001193:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210
}
9f001196:	c9                   	leave  
9f001197:	c3                   	ret    

9f001198 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214


VISIBLE void exit (int status)
{
9f001198:	55                   	push   ebp
9f001199:	89 e5                	mov    ebp,esp
9f00119b:	e8 c7 2b 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0011a0:	05 64 4d 00 00       	add    eax,0x4d64
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f0011a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011a8:	50                   	push   eax
9f0011a9:	6a 00                	push   0x0
9f0011ab:	6a 01                	push   0x1
9f0011ad:	e8 50 f9 ff ff       	call   9f000b02 <do_syscall2>
9f0011b2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:216
}
9f0011b5:	90                   	nop
9f0011b6:	c9                   	leave  
9f0011b7:	c3                   	ret    

9f0011b8 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:220


VISIBLE char* getcwd(char* buf, size_t size)
{
9f0011b8:	55                   	push   ebp
9f0011b9:	89 e5                	mov    ebp,esp
9f0011bb:	e8 a7 2b 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0011c0:	05 44 4d 00 00       	add    eax,0x4d44
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0011c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0011cb:	50                   	push   eax
9f0011cc:	6a 4f                	push   0x4f
9f0011ce:	e8 2f f9 ff ff       	call   9f000b02 <do_syscall2>
9f0011d3:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
}
9f0011d6:	c9                   	leave  
9f0011d7:	c3                   	ret    

9f0011d8 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226


size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f0011d8:	55                   	push   ebp
9f0011d9:	89 e5                	mov    ebp,esp
9f0011db:	83 ec 20             	sub    esp,0x20
9f0011de:	e8 84 2b 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0011e3:	05 21 4d 00 00       	add    eax,0x4d21
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:229
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f0011e8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230
    size_t argc = 0;
9f0011ef:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f0011f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f0011fc:	e9 d8 00 00 00       	jmp    9f0012d9 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
        c = (unsigned char) *p;
9f001201:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001204:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001207:	0f b6 c0             	movzx  eax,al
9f00120a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
        switch (state) {
9f00120d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001210:	83 f8 01             	cmp    eax,0x1
9f001213:	74 7e                	je     9f001293 <splitI+0xbb>
9f001215:	83 f8 01             	cmp    eax,0x1
9f001218:	72 0a                	jb     9f001224 <splitI+0x4c>
9f00121a:	83 f8 02             	cmp    eax,0x2
9f00121d:	74 45                	je     9f001264 <splitI+0x8c>
9f00121f:	e9 b1 00 00 00       	jmp    9f0012d5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:236
        case DULL:
            if (ISSPACE(c)) {
9f001224:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001228:	0f 94 c0             	sete   al
9f00122b:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f00122e:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001232:	84 c0                	test   al,al
9f001234:	0f 85 94 00 00 00    	jne    9f0012ce <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
                continue;
            }

            if (c == '"') {
9f00123a:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f00123e:	75 15                	jne    9f001255 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:241
                state = IN_STRING;
9f001240:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242
                start_of_word = p + 1; 
9f001247:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00124a:	83 c0 01             	add    eax,0x1
9f00124d:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:243
                continue;
9f001250:	e9 80 00 00 00       	jmp    9f0012d5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
            }
            state = IN_WORD;
9f001255:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
            start_of_word = p;
9f00125c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00125f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:247
            continue;
9f001262:	eb 71                	jmp    9f0012d5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250

        case IN_STRING:
            if (c == '"') {
9f001264:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001268:	75 67                	jne    9f0012d1 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251
                *p = 0;
9f00126a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00126d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
                argv[argc++] = start_of_word;
9f001270:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001273:	8d 50 01             	lea    edx,[eax+0x1]
9f001276:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001279:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001280:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001283:	01 c2                	add    edx,eax
9f001285:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001288:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
                state = DULL;
9f00128a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            }
            continue;
9f001291:	eb 3e                	jmp    9f0012d1 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258

        case IN_WORD:
            if (ISSPACE(c)) {
9f001293:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001297:	0f 94 c0             	sete   al
9f00129a:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f00129d:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f0012a1:	84 c0                	test   al,al
9f0012a3:	74 2f                	je     9f0012d4 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
                *p = 0;
9f0012a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0012a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
                argv[argc++] = start_of_word;
9f0012ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0012ae:	8d 50 01             	lea    edx,[eax+0x1]
9f0012b1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0012b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0012bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0012be:	01 c2                	add    edx,eax
9f0012c0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0012c3:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
                state = DULL;
9f0012c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
            }
            continue;
9f0012cc:	eb 06                	jmp    9f0012d4 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f0012ce:	90                   	nop
9f0012cf:	eb 04                	jmp    9f0012d5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0012d1:	90                   	nop
9f0012d2:	eb 01                	jmp    9f0012d5 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0012d4:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f0012d5:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232 (discriminator 1)
9f0012d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0012dc:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0012df:	73 0e                	jae    9f0012ef <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232 (discriminator 3)
9f0012e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0012e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0012e7:	84 c0                	test   al,al
9f0012e9:	0f 85 12 ff ff ff    	jne    9f001201 <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f0012ef:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0012f3:	74 22                	je     9f001317 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267 (discriminator 1)
9f0012f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0012f8:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0012fb:	73 1a                	jae    9f001317 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
        argv[argc++] = start_of_word;
9f0012fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001300:	8d 50 01             	lea    edx,[eax+0x1]
9f001303:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001306:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00130d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001310:	01 c2                	add    edx,eax
9f001312:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001315:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:270

    return argc;
9f001317:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
}
9f00131a:	c9                   	leave  
9f00131b:	c3                   	ret    

9f00131c <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f00131c:	55                   	push   ebp
9f00131d:	89 e5                	mov    ebp,esp
9f00131f:	e8 43 2a 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001324:	05 e0 4b 00 00       	add    eax,0x4be0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
    return splitI(buffer, argv, argv_size);
9f001329:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00132c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00132f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001332:	e8 a1 fe ff ff       	call   9f0011d8 <splitI>
9f001337:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
}
9f00133a:	c9                   	leave  
9f00133b:	c3                   	ret    

9f00133c <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f00133c:	55                   	push   ebp
9f00133d:	89 e5                	mov    ebp,esp
9f00133f:	56                   	push   esi
9f001340:	53                   	push   ebx
9f001341:	81 ec 30 04 00 00    	sub    esp,0x430
9f001347:	e8 44 2a 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f00134c:	81 c3 b8 4b 00 00    	add    ebx,0x4bb8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001352:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001358:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00135b:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001361:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001364:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f00136a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
    char dblquote[2] = {'"',0};
9f00136d:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001374:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
    *argc = 0;
9f00137b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00137e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
    
    strncpyI(cmd,cmdline,1024);
9f001384:	83 ec 04             	sub    esp,0x4
9f001387:	68 00 04 00 00       	push   0x400
9f00138c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00138f:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001395:	50                   	push   eax
9f001396:	e8 a9 15 00 00       	call   9f002944 <strncpyI>
9f00139b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
    strtrimI(cmd);
9f00139e:	83 ec 0c             	sub    esp,0xc
9f0013a1:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f0013a7:	50                   	push   eax
9f0013a8:	e8 53 19 00 00       	call   9f002d00 <strtrimI>
9f0013ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f0013b0:	83 ec 04             	sub    esp,0x4
9f0013b3:	68 a0 0f 00 00       	push   0xfa0
9f0013b8:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f0013be:	50                   	push   eax
9f0013bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0013c2:	e8 5d 1b 00 00       	call   9f002f24 <strnstrI>
9f0013c7:	83 c4 10             	add    esp,0x10
9f0013ca:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
        spacePtr=strstrI(spacePtr," ");
9f0013cd:	83 ec 08             	sub    esp,0x8
9f0013d0:	8d 83 b1 f9 ff ff    	lea    eax,[ebx-0x64f]
9f0013d6:	50                   	push   eax
9f0013d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0013da:	e8 e3 1b 00 00       	call   9f002fc2 <strstrI>
9f0013df:	83 c4 10             	add    esp,0x10
9f0013e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f0013e5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0013e9:	74 48                	je     9f001433 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292 (discriminator 1)
9f0013eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0013ee:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0013f1:	77 40                	ja     9f001433 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:294
        {
            char *temp = spacePtr;
9f0013f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0013f6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f0013f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0013fc:	8d 50 01             	lea    edx,[eax+0x1]
9f0013ff:	83 ec 04             	sub    esp,0x4
9f001402:	68 a0 0f 00 00       	push   0xfa0
9f001407:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f00140d:	50                   	push   eax
9f00140e:	52                   	push   edx
9f00140f:	e8 10 1b 00 00       	call   9f002f24 <strnstrI>
9f001414:	83 c4 10             	add    esp,0x10
9f001417:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296
            if (spacePtr>=quotePtr+4000)
9f00141a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00141d:	05 a0 0f 00 00       	add    eax,0xfa0
9f001422:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001425:	77 08                	ja     9f00142f <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001427:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f00142a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00142d:	eb 04                	jmp    9f001433 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
            else
                spacePtr += 1;                              //Skip the closing quote
9f00142f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:301
        }
        *argc+=1;
9f001433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001436:	8b 00                	mov    eax,DWORD PTR [eax]
9f001438:	8d 50 01             	lea    edx,[eax+0x1]
9f00143b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00143e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
        if (spacePtr!=0 && *spacePtr)
9f001440:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001444:	74 0e                	je     9f001454 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302 (discriminator 1)
9f001446:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001449:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00144c:	84 c0                	test   al,al
9f00144e:	74 04                	je     9f001454 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
            spacePtr++;
9f001450:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305
    
    } while (spacePtr!=0 && *spacePtr);
9f001454:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001458:	74 0e                	je     9f001468 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305 (discriminator 1)
9f00145a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00145d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001460:	84 c0                	test   al,al
9f001462:	0f 85 48 ff ff ff    	jne    9f0013b0 <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001468:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00146b:	8b 10                	mov    edx,DWORD PTR [eax]
9f00146d:	89 d0                	mov    eax,edx
9f00146f:	c1 e0 08             	shl    eax,0x8
9f001472:	29 d0                	sub    eax,edx
9f001474:	89 c2                	mov    edx,eax
9f001476:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001479:	8b 00                	mov    eax,DWORD PTR [eax]
9f00147b:	c1 e0 02             	shl    eax,0x2
9f00147e:	01 d0                	add    eax,edx
9f001480:	83 ec 0c             	sub    esp,0xc
9f001483:	50                   	push   eax
9f001484:	e8 90 03 00 00       	call   9f001819 <mallocI>
9f001489:	83 c4 10             	add    esp,0x10
9f00148c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308
    int argvPtr=4* *argc;
9f00148f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001492:	8b 00                	mov    eax,DWORD PTR [eax]
9f001494:	c1 e0 02             	shl    eax,0x2
9f001497:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:309
    spacePtr=cmd;
9f00149a:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f0014a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
    for (int cnt=0;cnt<*argc; cnt++)
9f0014a3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f0014aa:	e9 72 01 00 00       	jmp    9f001621 <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
    {
        argv[cnt]=(char*)argv+argvPtr;
9f0014af:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0014b2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0014b9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0014bc:	01 d0                	add    eax,edx
9f0014be:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f0014c1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f0014c4:	01 ca                	add    edx,ecx
9f0014c6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f0014c8:	83 ec 04             	sub    esp,0x4
9f0014cb:	68 a0 0f 00 00       	push   0xfa0
9f0014d0:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f0014d6:	50                   	push   eax
9f0014d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0014da:	e8 45 1a 00 00       	call   9f002f24 <strnstrI>
9f0014df:	83 c4 10             	add    esp,0x10
9f0014e2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f0014e5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0014e9:	0f 84 80 00 00 00    	je     9f00156f <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314 (discriminator 1)
9f0014ef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0014f2:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0014f5:	77 78                	ja     9f00156f <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:316
        {
            char *temp = spacePtr;
9f0014f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014fa:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f0014fd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001500:	8d 50 01             	lea    edx,[eax+0x1]
9f001503:	83 ec 04             	sub    esp,0x4
9f001506:	68 a0 0f 00 00       	push   0xfa0
9f00150b:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001511:	50                   	push   eax
9f001512:	52                   	push   edx
9f001513:	e8 0c 1a 00 00       	call   9f002f24 <strnstrI>
9f001518:	83 c4 10             	add    esp,0x10
9f00151b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
            if (spacePtr>=quotePtr+4000)
9f00151e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001521:	05 a0 0f 00 00       	add    eax,0xfa0
9f001526:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001529:	77 0b                	ja     9f001536 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f00152b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00152e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001531:	e9 d4 00 00 00       	jmp    9f00160a <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:322
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001536:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001539:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00153c:	29 c2                	sub    edx,eax
9f00153e:	89 d0                	mov    eax,edx
9f001540:	83 e8 02             	sub    eax,0x2
9f001543:	89 c6                	mov    esi,eax
9f001545:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001548:	8d 50 01             	lea    edx,[eax+0x1]
9f00154b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00154e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001555:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001558:	01 c8                	add    eax,ecx
9f00155a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00155c:	83 ec 04             	sub    esp,0x4
9f00155f:	56                   	push   esi
9f001560:	52                   	push   edx
9f001561:	50                   	push   eax
9f001562:	e8 dd 13 00 00       	call   9f002944 <strncpyI>
9f001567:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f00156a:	e9 9b 00 00 00       	jmp    9f00160a <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:327
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f00156f:	83 ec 08             	sub    esp,0x8
9f001572:	8d 83 b1 f9 ff ff    	lea    eax,[ebx-0x64f]
9f001578:	50                   	push   eax
9f001579:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00157c:	e8 41 1a 00 00       	call   9f002fc2 <strstrI>
9f001581:	83 c4 10             	add    esp,0x10
9f001584:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
            if (spacePtr)
9f001587:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00158b:	74 2f                	je     9f0015bc <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f00158d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001590:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001593:	29 c2                	sub    edx,eax
9f001595:	89 d0                	mov    eax,edx
9f001597:	89 c1                	mov    ecx,eax
9f001599:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00159c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0015a3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0015a6:	01 d0                	add    eax,edx
9f0015a8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015aa:	83 ec 04             	sub    esp,0x4
9f0015ad:	51                   	push   ecx
9f0015ae:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0015b1:	50                   	push   eax
9f0015b2:	e8 8d 13 00 00       	call   9f002944 <strncpyI>
9f0015b7:	83 c4 10             	add    esp,0x10
9f0015ba:	eb 31                	jmp    9f0015ed <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f0015bc:	83 ec 0c             	sub    esp,0xc
9f0015bf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0015c2:	e8 7a 12 00 00       	call   9f002841 <strlenI>
9f0015c7:	83 c4 10             	add    esp,0x10
9f0015ca:	89 c2                	mov    edx,eax
9f0015cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0015cf:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f0015d6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0015d9:	01 c8                	add    eax,ecx
9f0015db:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015dd:	83 ec 04             	sub    esp,0x4
9f0015e0:	52                   	push   edx
9f0015e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0015e4:	50                   	push   eax
9f0015e5:	e8 5a 13 00 00       	call   9f002944 <strncpyI>
9f0015ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
            strtrimI(argv[cnt]);
9f0015ed:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0015f0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0015f7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0015fa:	01 d0                	add    eax,edx
9f0015fc:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015fe:	83 ec 0c             	sub    esp,0xc
9f001601:	50                   	push   eax
9f001602:	e8 f9 16 00 00       	call   9f002d00 <strtrimI>
9f001607:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:334 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f00160a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00160d:	8d 50 01             	lea    edx,[eax+0x1]
9f001610:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001613:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001616:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f00161d:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310 (discriminator 1)
9f001621:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001624:	8b 00                	mov    eax,DWORD PTR [eax]
9f001626:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001629:	0f 8f 80 fe ff ff    	jg     9f0014af <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f00162f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
}
9f001632:	8d 65 f8             	lea    esp,[ebp-0x8]
9f001635:	5b                   	pop    ebx
9f001636:	5e                   	pop    esi
9f001637:	5d                   	pop    ebp
9f001638:	c3                   	ret    

9f001639 <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:341

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f001639:	55                   	push   ebp
9f00163a:	89 e5                	mov    ebp,esp
9f00163c:	83 ec 08             	sub    esp,0x8
9f00163f:	e8 23 27 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001644:	05 c0 48 00 00       	add    eax,0x48c0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342
    return cmdlineToArgvI(cmdline, argc);
9f001649:	83 ec 08             	sub    esp,0x8
9f00164c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00164f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001652:	e8 e5 fc ff ff       	call   9f00133c <cmdlineToArgvI>
9f001657:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
}
9f00165a:	c9                   	leave  
9f00165b:	c3                   	ret    

9f00165c <test>:
test():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:346

VISIBLE int test()
{
9f00165c:	55                   	push   ebp
9f00165d:	89 e5                	mov    ebp,esp
9f00165f:	e8 03 27 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001664:	05 a0 48 00 00       	add    eax,0x48a0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347
    return do_syscall0(0);
9f001669:	6a 00                	push   0x0
9f00166b:	e8 10 f5 ff ff       	call   9f000b80 <do_syscall0>
9f001670:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:348
9f001673:	c9                   	leave  
9f001674:	c3                   	ret    
9f001675:	66 90                	xchg   ax,ax
9f001677:	90                   	nop

9f001678 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f001678:	55                   	push   ebp
9f001679:	89 e5                	mov    ebp,esp
9f00167b:	53                   	push   ebx
9f00167c:	83 ec 04             	sub    esp,0x4
9f00167f:	e8 e3 26 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001684:	05 80 48 00 00       	add    eax,0x4880
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f001689:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f00168f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f001692:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f001694:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f001697:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f00169d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f0016a0:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016a6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0016a9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f0016ac:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f0016b5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f0016b8:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016be:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f0016c1:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f0016c4:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016ca:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f0016cd:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f0016d0:	8b 90 e0 ff ff ff    	mov    edx,DWORD PTR [eax-0x20]
9f0016d6:	83 ec 08             	sub    esp,0x8
9f0016d9:	52                   	push   edx
9f0016da:	6a 08                	push   0x8
9f0016dc:	89 c3                	mov    ebx,eax
9f0016de:	e8 5d f4 ff ff       	call   9f000b40 <do_syscall1>
9f0016e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f0016e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0016e9:	c9                   	leave  
9f0016ea:	c3                   	ret    
9f0016eb:	90                   	nop

9f0016ec <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
#include "config.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
9f0016ec:	55                   	push   ebp
9f0016ed:	89 e5                	mov    ebp,esp
9f0016ef:	53                   	push   ebx
9f0016f0:	83 ec 04             	sub    esp,0x4
9f0016f3:	e8 98 26 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f0016f8:	81 c3 0c 48 00 00    	add    ebx,0x480c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f0016fe:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001704:	8b 00                	mov    eax,DWORD PTR [eax]
9f001706:	50                   	push   eax
9f001707:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00170d:	50                   	push   eax
9f00170e:	8d 83 dc f9 ff ff    	lea    eax,[ebx-0x624]
9f001714:	50                   	push   eax
9f001715:	68 00 00 00 01       	push   0x1000000
9f00171a:	e8 b6 f6 ff ff       	call   9f000dd5 <printdI>
9f00171f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapBase=0;
9f001722:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001728:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapCurr=0;
9f00172e:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001734:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    heapEnd=0;
9f00173a:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001740:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:19
    libcTZ=-5;
9f001746:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00174c:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:21

}
9f001752:	90                   	nop
9f001753:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001756:	c9                   	leave  
9f001757:	c3                   	ret    

9f001758 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001758:	55                   	push   ebp
9f001759:	89 e5                	mov    ebp,esp
9f00175b:	83 ec 10             	sub    esp,0x10
9f00175e:	e8 04 26 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001763:	05 a1 47 00 00       	add    eax,0x47a1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:27
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f001768:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00176b:	83 c2 20             	add    edx,0x20
9f00176e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:29
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f001771:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f001777:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f001779:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00177c:	01 d1                	add    ecx,edx
9f00177e:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f001784:	8b 12                	mov    edx,DWORD PTR [edx]
9f001786:	39 d1                	cmp    ecx,edx
9f001788:	76 4e                	jbe    9f0017d8 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f00178a:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f001790:	8b 12                	mov    edx,DWORD PTR [edx]
9f001792:	8b 80 e4 ff ff ff    	mov    eax,DWORD PTR [eax-0x1c]
9f001798:	8b 00                	mov    eax,DWORD PTR [eax]
9f00179a:	29 c2                	sub    edx,eax
9f00179c:	89 d0                	mov    eax,edx
9f00179e:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33
        if (newSize== 0 || newSize%PAGE_SIZE)
9f0017a1:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f0017a5:	74 0c                	je     9f0017b3 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33 (discriminator 1)
9f0017a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017aa:	25 ff 0f 00 00       	and    eax,0xfff
9f0017af:	85 c0                	test   eax,eax
9f0017b1:	74 10                	je     9f0017c3 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0017b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017b6:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0017bb:	05 00 10 00 00       	add    eax,0x1000
9f0017c0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f0017c3:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
9f0017ca:	77 07                	ja     9f0017d3 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
            return ALLOC_REQUEST_SIZE;
9f0017cc:	b8 00 20 03 00       	mov    eax,0x32000
9f0017d1:	eb 0a                	jmp    9f0017dd <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:41
        else
            return newSize;
9f0017d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0017d6:	eb 05                	jmp    9f0017dd <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
    }
    else
        return 0;
9f0017d8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
}
9f0017dd:	c9                   	leave  
9f0017de:	c3                   	ret    

9f0017df <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48

void freeI(void* fpointer)
{
9f0017df:	55                   	push   ebp
9f0017e0:	89 e5                	mov    ebp,esp
9f0017e2:	83 ec 10             	sub    esp,0x10
9f0017e5:	e8 7d 25 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0017ea:	05 1a 47 00 00       	add    eax,0x471a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
9f0017ef:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0017f3:	74 1e                	je     9f001813 <freeI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f0017f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017f8:	83 e8 10             	sub    eax,0x10
9f0017fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:56
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f0017fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001801:	8b 00                	mov    eax,DWORD PTR [eax]
9f001803:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
9f001808:	75 0c                	jne    9f001816 <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
    }
    mp->inUse=false;
9f00180a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00180d:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f001811:	eb 04                	jmp    9f001817 <freeI+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f001813:	90                   	nop
9f001814:	eb 01                	jmp    9f001817 <freeI+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
9f001816:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
    }
    mp->inUse=false;
}
9f001817:	c9                   	leave  
9f001818:	c3                   	ret    

9f001819 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
9f001819:	55                   	push   ebp
9f00181a:	89 e5                	mov    ebp,esp
9f00181c:	53                   	push   ebx
9f00181d:	83 ec 24             	sub    esp,0x24
9f001820:	e8 6b 25 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f001825:	81 c3 df 46 00 00    	add    ebx,0x46df
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
9f00182b:	83 ec 04             	sub    esp,0x4
9f00182e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001831:	8d 83 ff f9 ff ff    	lea    eax,[ebx-0x601]
9f001837:	50                   	push   eax
9f001838:	68 00 00 00 01       	push   0x1000000
9f00183d:	e8 93 f5 ff ff       	call   9f000dd5 <printdI>
9f001842:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
9f001845:	83 ec 0c             	sub    esp,0xc
9f001848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00184b:	e8 08 ff ff ff       	call   9f001758 <newHeapRequiredToFulfillRequest>
9f001850:	83 c4 10             	add    esp,0x10
9f001853:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f001856:	83 ec 04             	sub    esp,0x4
9f001859:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00185c:	8d 83 0f fa ff ff    	lea    eax,[ebx-0x5f1]
9f001862:	50                   	push   eax
9f001863:	68 00 00 00 01       	push   0x1000000
9f001868:	e8 68 f5 ff ff       	call   9f000dd5 <printdI>
9f00186d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
9f001870:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001874:	0f 84 ae 00 00 00    	je     9f001928 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
9f00187a:	83 ec 08             	sub    esp,0x8
9f00187d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001880:	68 65 01 00 00       	push   0x165
9f001885:	e8 b6 f2 ff ff       	call   9f000b40 <do_syscall1>
9f00188a:	83 c4 10             	add    esp,0x10
9f00188d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f001890:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001896:	8b 00                	mov    eax,DWORD PTR [eax]
9f001898:	83 ec 04             	sub    esp,0x4
9f00189b:	50                   	push   eax
9f00189c:	8d 83 2b fa ff ff    	lea    eax,[ebx-0x5d5]
9f0018a2:	50                   	push   eax
9f0018a3:	68 00 00 00 01       	push   0x1000000
9f0018a8:	e8 28 f5 ff ff       	call   9f000dd5 <printdI>
9f0018ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
9f0018b0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0018b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0018b6:	01 c2                	add    edx,eax
9f0018b8:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0018be:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0018c0:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0018c6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0018c8:	83 ec 0c             	sub    esp,0xc
9f0018cb:	50                   	push   eax
9f0018cc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0018cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0018d2:	8d 83 48 fa ff ff    	lea    eax,[ebx-0x5b8]
9f0018d8:	50                   	push   eax
9f0018d9:	68 00 00 00 01       	push   0x1000000
9f0018de:	e8 f2 f4 ff ff       	call   9f000dd5 <printdI>
9f0018e3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
9f0018e6:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0018ec:	8b 00                	mov    eax,DWORD PTR [eax]
9f0018ee:	85 c0                	test   eax,eax
9f0018f0:	75 36                	jne    9f001928 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
9f0018f2:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0018f8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0018fb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
9f0018fd:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001903:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001906:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f001908:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00190e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001910:	83 ec 04             	sub    esp,0x4
9f001913:	50                   	push   eax
9f001914:	8d 83 88 fa ff ff    	lea    eax,[ebx-0x578]
9f00191a:	50                   	push   eax
9f00191b:	68 00 00 00 01       	push   0x1000000
9f001920:	e8 b0 f4 ff ff       	call   9f000dd5 <printdI>
9f001925:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f001928:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00192e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001930:	83 ec 04             	sub    esp,0x4
9f001933:	50                   	push   eax
9f001934:	8d 83 c4 fa ff ff    	lea    eax,[ebx-0x53c]
9f00193a:	50                   	push   eax
9f00193b:	68 00 00 00 01       	push   0x1000000
9f001940:	e8 90 f4 ff ff       	call   9f000dd5 <printdI>
9f001945:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
9f001948:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00194e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001950:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f001953:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001956:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
9f00195c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00195f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001962:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
9f001965:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001968:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
9f00196c:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001972:	8b 00                	mov    eax,DWORD PTR [eax]
9f001974:	6a 10                	push   0x10
9f001976:	50                   	push   eax
9f001977:	8d 83 ec fa ff ff    	lea    eax,[ebx-0x514]
9f00197d:	50                   	push   eax
9f00197e:	68 00 00 00 01       	push   0x1000000
9f001983:	e8 4d f4 ff ff       	call   9f000dd5 <printdI>
9f001988:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
9f00198b:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001991:	8b 00                	mov    eax,DWORD PTR [eax]
9f001993:	83 c0 10             	add    eax,0x10
9f001996:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
9f001999:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00199c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00199f:	8d 50 10             	lea    edx,[eax+0x10]
9f0019a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0019a5:	01 d0                	add    eax,edx
9f0019a7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
9f0019aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0019ad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0019b0:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
9f0019b3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0019b9:	8b 10                	mov    edx,DWORD PTR [eax]
9f0019bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019be:	01 d0                	add    eax,edx
9f0019c0:	8d 50 10             	lea    edx,[eax+0x10]
9f0019c3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f0019c9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f0019cb:	83 ec 04             	sub    esp,0x4
9f0019ce:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0019d1:	8d 83 24 fb ff ff    	lea    eax,[ebx-0x4dc]
9f0019d7:	50                   	push   eax
9f0019d8:	68 00 00 00 01       	push   0x1000000
9f0019dd:	e8 f3 f3 ff ff       	call   9f000dd5 <printdI>
9f0019e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
9f0019e5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
9f0019e8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0019eb:	c9                   	leave  
9f0019ec:	c3                   	ret    

9f0019ed <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f0019ed:	55                   	push   ebp
9f0019ee:	89 e5                	mov    ebp,esp
9f0019f0:	83 ec 08             	sub    esp,0x8
9f0019f3:	e8 6f 23 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0019f8:	05 0c 45 00 00       	add    eax,0x450c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
9f0019fd:	83 ec 0c             	sub    esp,0xc
9f001a00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a03:	e8 11 fe ff ff       	call   9f001819 <mallocI>
9f001a08:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
9f001a0b:	c9                   	leave  
9f001a0c:	c3                   	ret    

9f001a0d <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

void* reallocI(void *foldptr, uint32_t newlen)
{
9f001a0d:	55                   	push   ebp
9f001a0e:	89 e5                	mov    ebp,esp
9f001a10:	53                   	push   ebx
9f001a11:	83 ec 14             	sub    esp,0x14
9f001a14:	e8 77 23 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f001a19:	81 c3 eb 44 00 00    	add    ebx,0x44eb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(newlen);
9f001a1f:	83 ec 0c             	sub    esp,0xc
9f001a22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001a25:	e8 ef fd ff ff       	call   9f001819 <mallocI>
9f001a2a:	83 c4 10             	add    esp,0x10
9f001a2d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
   
    //Get old heap pointer
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f001a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a33:	83 e8 10             	sub    eax,0x10
9f001a36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:119
    
    //Copy from old pointer to new memory using the old pointer's length
    memsetI(fnewptr+mp->len,0,newlen);
9f001a39:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f001a3f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001a49:	01 d0                	add    eax,edx
9f001a4b:	83 ec 04             	sub    esp,0x4
9f001a4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001a51:	6a 00                	push   0x0
9f001a53:	50                   	push   eax
9f001a54:	e8 67 02 00 00       	call   9f001cc0 <memsetI>
9f001a59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:120
    memcpyI(fnewptr, foldptr, mp->len>newlen?newlen:mp->len);
9f001a5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a5f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f001a62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001a65:	39 c2                	cmp    edx,eax
9f001a67:	0f 46 c2             	cmovbe eax,edx
9f001a6a:	83 ec 04             	sub    esp,0x4
9f001a6d:	50                   	push   eax
9f001a6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001a74:	e8 8b 00 00 00       	call   9f001b04 <memcpyI>
9f001a79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
    
   //free old pointer
    freeI(foldptr);
9f001a7c:	83 ec 0c             	sub    esp,0xc
9f001a7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001a82:	e8 58 fd ff ff       	call   9f0017df <freeI>
9f001a87:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:124
    return fnewptr;
9f001a8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:125
}
9f001a8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001a90:	c9                   	leave  
9f001a91:	c3                   	ret    

9f001a92 <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f001a92:	55                   	push   ebp
9f001a93:	89 e5                	mov    ebp,esp
9f001a95:	83 ec 08             	sub    esp,0x8
9f001a98:	e8 ca 22 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001a9d:	05 67 44 00 00       	add    eax,0x4467
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:129
    return reallocI(foldptr, newlen);
9f001aa2:	83 ec 08             	sub    esp,0x8
9f001aa5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001aa8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001aab:	e8 5d ff ff ff       	call   9f001a0d <reallocI>
9f001ab0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:130
}
9f001ab3:	c9                   	leave  
9f001ab4:	c3                   	ret    

9f001ab5 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f001ab5:	55                   	push   ebp
9f001ab6:	89 e5                	mov    ebp,esp
9f001ab8:	e8 aa 22 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001abd:	05 47 44 00 00       	add    eax,0x4447
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:134
    freeI(fpointer);
9f001ac2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ac5:	e8 15 fd ff ff       	call   9f0017df <freeI>
9f001aca:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
}
9f001acd:	90                   	nop
9f001ace:	c9                   	leave  
9f001acf:	c3                   	ret    

9f001ad0 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138

void malloc_cleanup()
{
9f001ad0:	55                   	push   ebp
9f001ad1:	89 e5                	mov    ebp,esp
9f001ad3:	53                   	push   ebx
9f001ad4:	83 ec 04             	sub    esp,0x4
9f001ad7:	e8 8b 22 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001adc:	05 28 44 00 00       	add    eax,0x4428
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:139
    do_syscall1(SYSCALL_FREE, heapBase);
9f001ae1:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
9f001ae7:	8b 12                	mov    edx,DWORD PTR [edx]
9f001ae9:	83 ec 08             	sub    esp,0x8
9f001aec:	52                   	push   edx
9f001aed:	68 64 01 00 00       	push   0x164
9f001af2:	89 c3                	mov    ebx,eax
9f001af4:	e8 47 f0 ff ff       	call   9f000b40 <do_syscall1>
9f001af9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:140
9f001afc:	90                   	nop
9f001afd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001b00:	c9                   	leave  
9f001b01:	c3                   	ret    
9f001b02:	66 90                	xchg   ax,ax

9f001b04 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f001b04:	55                   	push   ebp
9f001b05:	89 e5                	mov    ebp,esp
9f001b07:	83 ec 20             	sub    esp,0x20
9f001b0a:	e8 58 22 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001b0f:	05 f5 43 00 00       	add    eax,0x43f5
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f001b14:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b17:	83 e0 03             	and    eax,0x3
9f001b1a:	85 c0                	test   eax,eax
9f001b1c:	0f 94 c0             	sete   al
9f001b1f:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f001b22:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b25:	83 e0 01             	and    eax,0x1
9f001b28:	85 c0                	test   eax,eax
9f001b2a:	0f 94 c0             	sete   al
9f001b2d:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f001b30:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f001b34:	74 7d                	je     9f001bb3 <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f001b36:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b39:	c1 e8 02             	shr    eax,0x2
9f001b3c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f001b3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b42:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f001b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b48:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f001b4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b4e:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f001b51:	73 4b                	jae    9f001b9e <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f001b53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b56:	c1 e0 02             	shl    eax,0x2
9f001b59:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f001b5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b5f:	c1 e0 02             	shl    eax,0x2
9f001b62:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f001b65:	eb 12                	jmp    9f001b79 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f001b67:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f001b6b:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f001b6f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b72:	8b 10                	mov    edx,DWORD PTR [eax]
9f001b74:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b77:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f001b79:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001b7c:	8d 50 ff             	lea    edx,[eax-0x1]
9f001b7f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001b82:	85 c0                	test   eax,eax
9f001b84:	75 e1                	jne    9f001b67 <memcpyI+0x63>
9f001b86:	eb 23                	jmp    9f001bab <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f001b88:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b8b:	8d 50 04             	lea    edx,[eax+0x4]
9f001b8e:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001b91:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001b94:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001b97:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f001b9a:	8b 12                	mov    edx,DWORD PTR [edx]
9f001b9c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001b9e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001ba1:	8d 50 ff             	lea    edx,[eax-0x1]
9f001ba4:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001ba7:	85 c0                	test   eax,eax
9f001ba9:	75 dd                	jne    9f001b88 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f001bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bae:	e9 ea 00 00 00       	jmp    9f001c9d <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f001bb3:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f001bb7:	74 79                	je     9f001c32 <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f001bb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001bbc:	d1 e8                	shr    eax,1
9f001bbe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f001bc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001bc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f001bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f001bcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001bd0:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f001bd3:	73 4b                	jae    9f001c20 <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f001bd5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001bd8:	c1 e0 02             	shl    eax,0x2
9f001bdb:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f001bde:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001be1:	c1 e0 02             	shl    eax,0x2
9f001be4:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f001be7:	eb 12                	jmp    9f001bfb <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f001be9:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f001bed:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f001bf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001bf4:	8b 10                	mov    edx,DWORD PTR [eax]
9f001bf6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001bf9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f001bfb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001bfe:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c01:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c04:	85 c0                	test   eax,eax
9f001c06:	75 e1                	jne    9f001be9 <memcpyI+0xe5>
9f001c08:	eb 23                	jmp    9f001c2d <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f001c0a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c0d:	8d 50 04             	lea    edx,[eax+0x4]
9f001c10:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c13:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001c16:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001c19:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f001c1c:	8b 12                	mov    edx,DWORD PTR [edx]
9f001c1e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001c20:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c23:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c26:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c29:	85 c0                	test   eax,eax
9f001c2b:	75 dd                	jne    9f001c0a <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f001c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c30:	eb 6b                	jmp    9f001c9d <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f001c32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c35:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f001c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c3b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f001c3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001c41:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001c44:	73 47                	jae    9f001c8d <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f001c46:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c49:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f001c4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c4f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f001c52:	eb 13                	jmp    9f001c67 <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f001c54:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f001c58:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f001c5c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001c5f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f001c62:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001c65:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f001c67:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c6a:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c6d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c70:	85 c0                	test   eax,eax
9f001c72:	75 e0                	jne    9f001c54 <memcpyI+0x150>
9f001c74:	eb 24                	jmp    9f001c9a <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f001c76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001c79:	8d 50 01             	lea    edx,[eax+0x1]
9f001c7c:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f001c7f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001c82:	8d 4a 01             	lea    ecx,[edx+0x1]
9f001c85:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f001c88:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001c8b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f001c8d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c90:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c93:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c96:	85 c0                	test   eax,eax
9f001c98:	75 dc                	jne    9f001c76 <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f001c9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f001c9d:	c9                   	leave  
9f001c9e:	c3                   	ret    

9f001c9f <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f001c9f:	55                   	push   ebp
9f001ca0:	89 e5                	mov    ebp,esp
9f001ca2:	e8 c0 20 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001ca7:	05 5d 42 00 00       	add    eax,0x425d
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f001cac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001caf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001cb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001cb5:	e8 4a fe ff ff       	call   9f001b04 <memcpyI>
9f001cba:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f001cbd:	c9                   	leave  
9f001cbe:	c3                   	ret    
9f001cbf:	90                   	nop

9f001cc0 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f001cc0:	55                   	push   ebp
9f001cc1:	89 e5                	mov    ebp,esp
9f001cc3:	83 ec 20             	sub    esp,0x20
9f001cc6:	e8 9c 20 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001ccb:	05 39 42 00 00       	add    eax,0x4239
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f001cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001cd3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f001cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001cd9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f001cdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cdf:	c1 e0 10             	shl    eax,0x10
9f001ce2:	89 c2                	mov    edx,eax
9f001ce4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ce7:	c1 e0 08             	shl    eax,0x8
9f001cea:	09 c2                	or     edx,eax
9f001cec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cef:	09 d0                	or     eax,edx
9f001cf1:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f001cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001cf8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f001cfb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cfe:	c1 e0 18             	shl    eax,0x18
9f001d01:	89 c2                	mov    edx,eax
9f001d03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d06:	c1 e0 10             	shl    eax,0x10
9f001d09:	09 c2                	or     edx,eax
9f001d0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d0e:	c1 e0 08             	shl    eax,0x8
9f001d11:	09 d0                	or     eax,edx
9f001d13:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f001d16:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f001d19:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d1c:	83 e0 03             	and    eax,0x3
9f001d1f:	85 c0                	test   eax,eax
9f001d21:	75 1c                	jne    9f001d3f <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f001d23:	eb 0e                	jmp    9f001d33 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f001d25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d28:	8d 50 04             	lea    edx,[eax+0x4]
9f001d2b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001d2e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001d31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f001d33:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f001d37:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f001d3b:	75 e8                	jne    9f001d25 <memsetI+0x65>
9f001d3d:	eb 43                	jmp    9f001d82 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f001d3f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d42:	83 e0 01             	and    eax,0x1
9f001d45:	85 c0                	test   eax,eax
9f001d47:	75 2c                	jne    9f001d75 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f001d49:	eb 10                	jmp    9f001d5b <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f001d4b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001d4e:	8d 50 02             	lea    edx,[eax+0x2]
9f001d51:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001d54:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f001d58:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f001d5b:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f001d5f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f001d63:	75 e6                	jne    9f001d4b <memsetI+0x8b>
9f001d65:	eb 1b                	jmp    9f001d82 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f001d67:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001d6a:	8d 50 01             	lea    edx,[eax+0x1]
9f001d6d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f001d70:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001d73:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f001d75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d78:	8d 50 ff             	lea    edx,[eax-0x1]
9f001d7b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001d7e:	85 c0                	test   eax,eax
9f001d80:	75 e5                	jne    9f001d67 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f001d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f001d85:	c9                   	leave  
9f001d86:	c3                   	ret    

9f001d87 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f001d87:	55                   	push   ebp
9f001d88:	89 e5                	mov    ebp,esp
9f001d8a:	e8 d8 1f 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001d8f:	05 75 41 00 00       	add    eax,0x4175
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f001d94:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001d97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001d9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001d9d:	e8 1e ff ff ff       	call   9f001cc0 <memsetI>
9f001da2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f001da5:	c9                   	leave  
9f001da6:	c3                   	ret    
9f001da7:	90                   	nop

9f001da8 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f001da8:	55                   	push   ebp
9f001da9:	89 e5                	mov    ebp,esp
9f001dab:	53                   	push   ebx
9f001dac:	83 ec 04             	sub    esp,0x4
9f001daf:	e8 b3 1f 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001db4:	05 50 41 00 00       	add    eax,0x4150
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f001db9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001dbc:	83 ec 08             	sub    esp,0x8
9f001dbf:	52                   	push   edx
9f001dc0:	6a 07                	push   0x7
9f001dc2:	89 c3                	mov    ebx,eax
9f001dc4:	e8 77 ed ff ff       	call   9f000b40 <do_syscall1>
9f001dc9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
9f001dcc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001dcf:	c9                   	leave  
9f001dd0:	c3                   	ret    
9f001dd1:	66 90                	xchg   ax,ax
9f001dd3:	90                   	nop

9f001dd4 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f001dd4:	55                   	push   ebp
9f001dd5:	89 e5                	mov    ebp,esp
9f001dd7:	53                   	push   ebx
9f001dd8:	83 ec 10             	sub    esp,0x10
9f001ddb:	e8 87 1f 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f001de0:	05 24 41 00 00       	add    eax,0x4124
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f001de5:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f001dec:	eb 29                	jmp    9f001e17 <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f001dee:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f001df1:	89 d0                	mov    eax,edx
9f001df3:	c1 e0 02             	shl    eax,0x2
9f001df6:	01 d0                	add    eax,edx
9f001df8:	01 c0                	add    eax,eax
9f001dfa:	89 c3                	mov    ebx,eax
9f001dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001dff:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e01:	8d 48 01             	lea    ecx,[eax+0x1]
9f001e04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001e07:	89 0a                	mov    DWORD PTR [edx],ecx
9f001e09:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e0c:	0f be c0             	movsx  eax,al
9f001e0f:	01 d8                	add    eax,ebx
9f001e11:	83 e8 30             	sub    eax,0x30
9f001e14:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f001e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001e1a:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e1c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e1f:	0f be c0             	movsx  eax,al
9f001e22:	83 e8 30             	sub    eax,0x30
9f001e25:	83 f8 09             	cmp    eax,0x9
9f001e28:	76 c4                	jbe    9f001dee <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f001e2a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f001e2d:	83 c4 10             	add    esp,0x10
9f001e30:	5b                   	pop    ebx
9f001e31:	5d                   	pop    ebp
9f001e32:	c3                   	ret    

9f001e33 <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f001e33:	55                   	push   ebp
9f001e34:	89 e5                	mov    ebp,esp
9f001e36:	56                   	push   esi
9f001e37:	53                   	push   ebx
9f001e38:	83 ec 60             	sub    esp,0x60
9f001e3b:	e8 50 1f 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f001e40:	81 c3 c4 40 00 00    	add    ebx,0x40c4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f001e46:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001e49:	83 e0 20             	and    eax,0x20
9f001e4c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f001e4f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001e52:	83 e0 10             	and    eax,0x10
9f001e55:	85 c0                	test   eax,eax
9f001e57:	74 04                	je     9f001e5d <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f001e59:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f001e5d:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f001e61:	7e 06                	jle    9f001e69 <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f001e63:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001e67:	7e 0a                	jle    9f001e73 <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f001e69:	b8 00 00 00 00       	mov    eax,0x0
9f001e6e:	e9 f7 01 00 00       	jmp    9f00206a <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f001e73:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001e76:	83 e0 01             	and    eax,0x1
9f001e79:	85 c0                	test   eax,eax
9f001e7b:	74 07                	je     9f001e84 <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f001e7d:	b8 30 00 00 00       	mov    eax,0x30
9f001e82:	eb 05                	jmp    9f001e89 <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f001e84:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f001e89:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f001e8c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f001e90:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001e93:	83 e0 02             	and    eax,0x2
9f001e96:	85 c0                	test   eax,eax
9f001e98:	74 39                	je     9f001ed3 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f001e9a:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001e9e:	79 0d                	jns    9f001ead <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f001ea0:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f001ea4:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f001ea7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001eab:	eb 26                	jmp    9f001ed3 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f001ead:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001eb0:	83 e0 04             	and    eax,0x4
9f001eb3:	85 c0                	test   eax,eax
9f001eb5:	74 0a                	je     9f001ec1 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f001eb7:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f001ebb:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001ebf:	eb 12                	jmp    9f001ed3 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f001ec1:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001ec4:	83 e0 08             	and    eax,0x8
9f001ec7:	85 c0                	test   eax,eax
9f001ec9:	74 08                	je     9f001ed3 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f001ecb:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f001ecf:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f001ed3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001ed6:	83 e0 40             	and    eax,0x40
9f001ed9:	85 c0                	test   eax,eax
9f001edb:	74 16                	je     9f001ef3 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f001edd:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001ee1:	75 06                	jne    9f001ee9 <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f001ee3:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f001ee7:	eb 0a                	jmp    9f001ef3 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f001ee9:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001eed:	75 04                	jne    9f001ef3 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f001eef:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f001ef3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f001efa:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001efe:	75 4d                	jne    9f001f4d <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f001f00:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f03:	8d 50 01             	lea    edx,[eax+0x1]
9f001f06:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001f09:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f001f0e:	eb 43                	jmp    9f001f53 <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f001f10:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f001f13:	8d 41 01             	lea    eax,[ecx+0x1]
9f001f16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001f19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f1c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001f1f:	ba 00 00 00 00       	mov    edx,0x0
9f001f24:	f7 f6                	div    esi
9f001f26:	89 d0                	mov    eax,edx
9f001f28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f001f2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f2e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001f31:	ba 00 00 00 00       	mov    edx,0x0
9f001f36:	f7 f6                	div    esi
9f001f38:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f001f3b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001f3e:	0f b6 84 03 d4 fc ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x32c]
9f001f45:	ff 
9f001f46:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f001f49:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f001f4d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001f51:	75 bd                	jne    9f001f10 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f001f53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f56:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f001f59:	7e 06                	jle    9f001f61 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f001f5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f5e:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f001f61:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f001f64:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f001f67:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001f6a:	83 e0 11             	and    eax,0x11
9f001f6d:	85 c0                	test   eax,eax
9f001f6f:	75 1b                	jne    9f001f8c <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f001f71:	eb 0c                	jmp    9f001f7f <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f001f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001f76:	8d 50 01             	lea    edx,[eax+0x1]
9f001f79:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001f7c:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f001f7f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001f82:	8d 50 ff             	lea    edx,[eax-0x1]
9f001f85:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001f88:	85 c0                	test   eax,eax
9f001f8a:	7f e7                	jg     9f001f73 <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f001f8c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f001f90:	74 0f                	je     9f001fa1 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f001f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001f95:	8d 50 01             	lea    edx,[eax+0x1]
9f001f98:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001f9b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f001f9f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f001fa1:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001fa4:	83 e0 40             	and    eax,0x40
9f001fa7:	85 c0                	test   eax,eax
9f001fa9:	74 38                	je     9f001fe3 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f001fab:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001faf:	75 0e                	jne    9f001fbf <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f001fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001fb4:	8d 50 01             	lea    edx,[eax+0x1]
9f001fb7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001fba:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f001fbd:	eb 24                	jmp    9f001fe3 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f001fbf:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001fc3:	75 1e                	jne    9f001fe3 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f001fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001fc8:	8d 50 01             	lea    edx,[eax+0x1]
9f001fcb:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001fce:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f001fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001fd4:	8d 50 01             	lea    edx,[eax+0x1]
9f001fd7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001fda:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f001fde:	83 ca 58             	or     edx,0x58
9f001fe1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f001fe3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001fe6:	83 e0 10             	and    eax,0x10
9f001fe9:	85 c0                	test   eax,eax
9f001feb:	75 2c                	jne    9f002019 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f001fed:	eb 0f                	jmp    9f001ffe <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f001fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ff2:	8d 50 01             	lea    edx,[eax+0x1]
9f001ff5:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001ff8:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f001ffc:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f001ffe:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002001:	8d 50 ff             	lea    edx,[eax-0x1]
9f002004:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002007:	85 c0                	test   eax,eax
9f002009:	7f e4                	jg     9f001fef <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f00200b:	eb 0c                	jmp    9f002019 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f00200d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002010:	8d 50 01             	lea    edx,[eax+0x1]
9f002013:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002016:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f002019:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f00201c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00201f:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f002022:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002025:	7f e6                	jg     9f00200d <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f002027:	eb 16                	jmp    9f00203f <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f002029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00202c:	8d 50 01             	lea    edx,[eax+0x1]
9f00202f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002032:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f002035:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002038:	01 ca                	add    edx,ecx
9f00203a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00203d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f00203f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002042:	8d 50 ff             	lea    edx,[eax-0x1]
9f002045:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002048:	85 c0                	test   eax,eax
9f00204a:	7f dd                	jg     9f002029 <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f00204c:	eb 0c                	jmp    9f00205a <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f00204e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002051:	8d 50 01             	lea    edx,[eax+0x1]
9f002054:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002057:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f00205a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00205d:	8d 50 ff             	lea    edx,[eax-0x1]
9f002060:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002063:	85 c0                	test   eax,eax
9f002065:	7f e7                	jg     9f00204e <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f002067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f00206a:	83 c4 60             	add    esp,0x60
9f00206d:	5b                   	pop    ebx
9f00206e:	5e                   	pop    esi
9f00206f:	5d                   	pop    ebp
9f002070:	c3                   	ret    

9f002071 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f002071:	55                   	push   ebp
9f002072:	89 e5                	mov    ebp,esp
9f002074:	53                   	push   ebx
9f002075:	83 ec 34             	sub    esp,0x34
9f002078:	e8 13 1d 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f00207d:	81 c3 87 3e 00 00    	add    ebx,0x3e87
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002086:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f002089:	e9 08 04 00 00       	jmp    9f002496 <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f00208e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002091:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002094:	3c 25                	cmp    al,0x25
9f002096:	74 16                	je     9f0020ae <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f002098:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00209b:	8d 50 01             	lea    edx,[eax+0x1]
9f00209e:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0020a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0020a4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0020a7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f0020a9:	e9 df 03 00 00       	jmp    9f00248d <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f0020ae:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f0020b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0020b8:	83 c0 01             	add    eax,0x1
9f0020bb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f0020be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0020c1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0020c4:	0f be c0             	movsx  eax,al
9f0020c7:	83 e8 20             	sub    eax,0x20
9f0020ca:	83 f8 10             	cmp    eax,0x10
9f0020cd:	77 2c                	ja     9f0020fb <.L43>
9f0020cf:	c1 e0 02             	shl    eax,0x2
9f0020d2:	8b 84 18 40 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4c0]
9f0020d9:	01 d8                	add    eax,ebx
9f0020db:	ff e0                	jmp    eax

9f0020dd <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f0020dd:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f0020e1:	eb d2                	jmp    9f0020b5 <vsprintf+0x44>

9f0020e3 <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f0020e3:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f0020e7:	eb cc                	jmp    9f0020b5 <vsprintf+0x44>

9f0020e9 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f0020e9:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f0020ed:	eb c6                	jmp    9f0020b5 <vsprintf+0x44>

9f0020ef <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f0020ef:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f0020f3:	eb c0                	jmp    9f0020b5 <vsprintf+0x44>

9f0020f5 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f0020f5:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f0020f9:	eb ba                	jmp    9f0020b5 <vsprintf+0x44>

9f0020fb <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f0020fb:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f002102:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002105:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002108:	0f be c0             	movsx  eax,al
9f00210b:	83 e8 30             	sub    eax,0x30
9f00210e:	83 f8 09             	cmp    eax,0x9
9f002111:	77 11                	ja     9f002124 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f002113:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002116:	50                   	push   eax
9f002117:	e8 b8 fc ff ff       	call   9f001dd4 <skip_atoi>
9f00211c:	83 c4 04             	add    esp,0x4
9f00211f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f002122:	eb 2e                	jmp    9f002152 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f002124:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00212a:	3c 2a                	cmp    al,0x2a
9f00212c:	75 24                	jne    9f002152 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f00212e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002131:	83 c0 01             	add    eax,0x1
9f002134:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f002137:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00213a:	8d 50 04             	lea    edx,[eax+0x4]
9f00213d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002140:	8b 00                	mov    eax,DWORD PTR [eax]
9f002142:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f002145:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002149:	79 07                	jns    9f002152 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f00214b:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f00214e:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f002152:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f002159:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00215c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00215f:	3c 2e                	cmp    al,0x2e
9f002161:	75 59                	jne    9f0021bc <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f002163:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002166:	83 c0 01             	add    eax,0x1
9f002169:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f00216c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00216f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002172:	0f be c0             	movsx  eax,al
9f002175:	83 e8 30             	sub    eax,0x30
9f002178:	83 f8 09             	cmp    eax,0x9
9f00217b:	77 11                	ja     9f00218e <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f00217d:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002180:	50                   	push   eax
9f002181:	e8 4e fc ff ff       	call   9f001dd4 <skip_atoi>
9f002186:	83 c4 04             	add    esp,0x4
9f002189:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f00218c:	eb 21                	jmp    9f0021af <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f00218e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002191:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002194:	3c 2a                	cmp    al,0x2a
9f002196:	75 17                	jne    9f0021af <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f002198:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00219b:	83 c0 01             	add    eax,0x1
9f00219e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f0021a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0021a4:	8d 50 04             	lea    edx,[eax+0x4]
9f0021a7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0021aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0021ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f0021af:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f0021b3:	79 07                	jns    9f0021bc <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f0021b5:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f0021bc:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f0021c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021c9:	3c 68                	cmp    al,0x68
9f0021cb:	74 14                	je     9f0021e1 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f0021cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021d3:	3c 6c                	cmp    al,0x6c
9f0021d5:	74 0a                	je     9f0021e1 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f0021d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021dd:	3c 4c                	cmp    al,0x4c
9f0021df:	75 15                	jne    9f0021f6 <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f0021e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021e7:	0f be c0             	movsx  eax,al
9f0021ea:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f0021ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021f0:	83 c0 01             	add    eax,0x1
9f0021f3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f0021f6:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f0021fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002200:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002203:	0f be c0             	movsx  eax,al
9f002206:	83 e8 25             	sub    eax,0x25
9f002209:	83 f8 53             	cmp    eax,0x53
9f00220c:	0f 87 b5 01 00 00    	ja     9f0023c7 <.L57>
9f002212:	c1 e0 02             	shl    eax,0x2
9f002215:	8b 84 18 84 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x47c]
9f00221c:	01 d8                	add    eax,ebx
9f00221e:	ff e0                	jmp    eax

9f002220 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f002220:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002223:	83 e0 10             	and    eax,0x10
9f002226:	85 c0                	test   eax,eax
9f002228:	75 18                	jne    9f002242 <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f00222a:	eb 0c                	jmp    9f002238 <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f00222c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00222f:	8d 50 01             	lea    edx,[eax+0x1]
9f002232:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002235:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f002238:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f00223c:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002240:	7f ea                	jg     9f00222c <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f002242:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002245:	8d 50 01             	lea    edx,[eax+0x1]
9f002248:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00224b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f00224e:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002251:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f002254:	8b 12                	mov    edx,DWORD PTR [edx]
9f002256:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f002258:	eb 0c                	jmp    9f002266 <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f00225a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00225d:	8d 50 01             	lea    edx,[eax+0x1]
9f002260:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002263:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f002266:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f00226a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f00226e:	7f ea                	jg     9f00225a <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f002270:	e9 18 02 00 00       	jmp    9f00248d <.L96+0x8c>

9f002275 <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f002275:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002278:	8d 50 04             	lea    edx,[eax+0x4]
9f00227b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00227e:	8b 00                	mov    eax,DWORD PTR [eax]
9f002280:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f002283:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f002287:	74 13                	je     9f00229c <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f002289:	83 ec 0c             	sub    esp,0xc
9f00228c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f00228f:	e8 ad 05 00 00       	call   9f002841 <strlenI>
9f002294:	83 c4 10             	add    esp,0x10
9f002297:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00229a:	eb 07                	jmp    9f0022a3 <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f00229c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f0022a3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0022a6:	83 e0 10             	and    eax,0x10
9f0022a9:	85 c0                	test   eax,eax
9f0022ab:	75 1c                	jne    9f0022c9 <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f0022ad:	eb 0c                	jmp    9f0022bb <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f0022af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0022b2:	8d 50 01             	lea    edx,[eax+0x1]
9f0022b5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0022b8:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f0022bb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0022be:	8d 50 ff             	lea    edx,[eax-0x1]
9f0022c1:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f0022c4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0022c7:	7f e6                	jg     9f0022af <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f0022c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0022d0:	eb 1b                	jmp    9f0022ed <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f0022d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0022d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0022d8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0022db:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f0022de:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0022e1:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f0022e4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0022e7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f0022e9:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f0022ed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0022f0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0022f3:	7c dd                	jl     9f0022d2 <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f0022f5:	eb 0c                	jmp    9f002303 <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f0022f7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0022fa:	8d 50 01             	lea    edx,[eax+0x1]
9f0022fd:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002300:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f002303:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002306:	8d 50 ff             	lea    edx,[eax-0x1]
9f002309:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f00230c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00230f:	7f e6                	jg     9f0022f7 <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f002311:	e9 77 01 00 00       	jmp    9f00248d <.L96+0x8c>

9f002316 <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f002316:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f00231a:	75 0b                	jne    9f002327 <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f00231c:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f002323:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f002327:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00232a:	8d 50 04             	lea    edx,[eax+0x4]
9f00232d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002330:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f002332:	83 ec 08             	sub    esp,0x8
9f002335:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002338:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f00233b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00233e:	6a 10                	push   0x10
9f002340:	50                   	push   eax
9f002341:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002344:	e8 ea fa ff ff       	call   9f001e33 <number>
9f002349:	83 c4 20             	add    esp,0x20
9f00234c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f00234f:	e9 39 01 00 00       	jmp    9f00248d <.L96+0x8c>

9f002354 <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f002354:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002358:	75 20                	jne    9f00237a <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f00235a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00235d:	8d 50 04             	lea    edx,[eax+0x4]
9f002360:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002363:	8b 00                	mov    eax,DWORD PTR [eax]
9f002365:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f002368:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00236b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00236e:	29 c2                	sub    edx,eax
9f002370:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f002373:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f002375:	e9 13 01 00 00       	jmp    9f00248d <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f00237a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00237d:	8d 50 04             	lea    edx,[eax+0x4]
9f002380:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002383:	8b 00                	mov    eax,DWORD PTR [eax]
9f002385:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f002388:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00238b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00238e:	29 c2                	sub    edx,eax
9f002390:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f002393:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f002395:	e9 f3 00 00 00       	jmp    9f00248d <.L96+0x8c>

9f00239a <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f00239a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00239d:	8d 50 01             	lea    edx,[eax+0x1]
9f0023a0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0023a3:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f0023a6:	e9 e2 00 00 00       	jmp    9f00248d <.L96+0x8c>

9f0023ab <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f0023ab:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f0023b2:	eb 4e                	jmp    9f002402 <.L96+0x1>

9f0023b4 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f0023b4:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f0023b8 <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f0023b8:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f0023bf:	eb 41                	jmp    9f002402 <.L96+0x1>

9f0023c1 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f0023c1:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f0023c5:	eb 3a                	jmp    9f002401 <.L96>

9f0023c7 <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f0023c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0023ca:	8d 50 01             	lea    edx,[eax+0x1]
9f0023cd:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0023d0:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f0023d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0023d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0023d9:	84 c0                	test   al,al
9f0023db:	74 16                	je     9f0023f3 <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f0023dd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0023e0:	8d 50 01             	lea    edx,[eax+0x1]
9f0023e3:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0023e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0023e9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0023ec:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f0023ee:	e9 9a 00 00 00       	jmp    9f00248d <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f0023f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0023f6:	83 e8 01             	sub    eax,0x1
9f0023f9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f0023fc:	e9 8c 00 00 00       	jmp    9f00248d <.L96+0x8c>

9f002401 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f002401:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f002402:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002406:	75 10                	jne    9f002418 <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f002408:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00240b:	8d 50 04             	lea    edx,[eax+0x4]
9f00240e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002411:	8b 00                	mov    eax,DWORD PTR [eax]
9f002413:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002416:	eb 54                	jmp    9f00246c <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f002418:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f00241c:	75 26                	jne    9f002444 <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f00241e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002421:	8d 50 04             	lea    edx,[eax+0x4]
9f002424:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002427:	8b 00                	mov    eax,DWORD PTR [eax]
9f002429:	25 ff ff 00 00       	and    eax,0xffff
9f00242e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f002431:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002434:	83 e0 02             	and    eax,0x2
9f002437:	85 c0                	test   eax,eax
9f002439:	74 31                	je     9f00246c <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f00243b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00243e:	98                   	cwde   
9f00243f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002442:	eb 28                	jmp    9f00246c <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f002444:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002447:	83 e0 02             	and    eax,0x2
9f00244a:	85 c0                	test   eax,eax
9f00244c:	74 10                	je     9f00245e <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f00244e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002451:	8d 50 04             	lea    edx,[eax+0x4]
9f002454:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002457:	8b 00                	mov    eax,DWORD PTR [eax]
9f002459:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00245c:	eb 0e                	jmp    9f00246c <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f00245e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002461:	8d 50 04             	lea    edx,[eax+0x4]
9f002464:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002467:	8b 00                	mov    eax,DWORD PTR [eax]
9f002469:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f00246c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00246f:	83 ec 08             	sub    esp,0x8
9f002472:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002475:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002478:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00247b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00247e:	50                   	push   eax
9f00247f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002482:	e8 ac f9 ff ff       	call   9f001e33 <number>
9f002487:	83 c4 20             	add    esp,0x20
9f00248a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f00248d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002490:	83 c0 01             	add    eax,0x1
9f002493:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f002496:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002499:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00249c:	84 c0                	test   al,al
9f00249e:	0f 85 ea fb ff ff    	jne    9f00208e <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f0024a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0024a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f0024aa:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0024ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0024b0:	29 c2                	sub    edx,eax
9f0024b2:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f0024b4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0024b7:	c9                   	leave  
9f0024b8:	c3                   	ret    

9f0024b9 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

int sprintf(char *buf, const char *fmt, ...)
{
9f0024b9:	55                   	push   ebp
9f0024ba:	89 e5                	mov    ebp,esp
9f0024bc:	83 ec 18             	sub    esp,0x18
9f0024bf:	e8 a3 18 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0024c4:	05 40 3a 00 00       	add    eax,0x3a40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f0024c9:	8d 45 10             	lea    eax,[ebp+0x10]
9f0024cc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f0024cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024d2:	83 ec 04             	sub    esp,0x4
9f0024d5:	50                   	push   eax
9f0024d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0024d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0024dc:	e8 90 fb ff ff       	call   9f002071 <vsprintf>
9f0024e1:	83 c4 10             	add    esp,0x10
9f0024e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f0024e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f0024ea:	c9                   	leave  
9f0024eb:	c3                   	ret    

9f0024ec <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f0024ec:	55                   	push   ebp
9f0024ed:	89 e5                	mov    ebp,esp
9f0024ef:	53                   	push   ebx
9f0024f0:	83 ec 14             	sub    esp,0x14
9f0024f3:	e8 98 18 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f0024f8:	81 c3 0c 3a 00 00    	add    ebx,0x3a0c
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
9f0024fe:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
9f002505:	83 ec 04             	sub    esp,0x4
9f002508:	6a 0a                	push   0xa
9f00250a:	6a 00                	push   0x0
9f00250c:	8d 45 ef             	lea    eax,[ebp-0x11]
9f00250f:	50                   	push   eax
9f002510:	e8 ab f7 ff ff       	call   9f001cc0 <memsetI>
9f002515:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f002518:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00251b:	8d 50 01             	lea    edx,[eax+0x1]
9f00251e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002521:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
9f002526:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002529:	8d 50 01             	lea    edx,[eax+0x1]
9f00252c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00252f:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
9f002534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002537:	8d 50 01             	lea    edx,[eax+0x1]
9f00253a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00253d:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
9f002542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002545:	8d 50 01             	lea    edx,[eax+0x1]
9f002548:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00254b:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
9f002550:	8d 55 ef             	lea    edx,[ebp-0x11]
9f002553:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002556:	01 d0                	add    eax,edx
9f002558:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
9f00255b:	83 ec 0c             	sub    esp,0xc
9f00255e:	8d 45 ef             	lea    eax,[ebp-0x11]
9f002561:	50                   	push   eax
9f002562:	e8 3a e8 ff ff       	call   9f000da1 <printI>
9f002567:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
9f00256a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
9f00256b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00256e:	c9                   	leave  
9f00256f:	c3                   	ret    

9f002570 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f002570:	55                   	push   ebp
9f002571:	89 e5                	mov    ebp,esp
9f002573:	53                   	push   ebx
9f002574:	83 ec 04             	sub    esp,0x4
9f002577:	e8 14 18 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f00257c:	81 c3 88 39 00 00    	add    ebx,0x3988
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f002582:	83 ec 0c             	sub    esp,0xc
9f002585:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002588:	e8 b4 02 00 00       	call   9f002841 <strlenI>
9f00258d:	83 c4 10             	add    esp,0x10
9f002590:	89 c2                	mov    edx,eax
9f002592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002595:	01 d0                	add    eax,edx
9f002597:	83 ec 08             	sub    esp,0x8
9f00259a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00259d:	50                   	push   eax
9f00259e:	e8 59 01 00 00       	call   9f0026fc <strcpyI>
9f0025a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f0025a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f0025a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0025ac:	c9                   	leave  
9f0025ad:	c3                   	ret    

9f0025ae <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f0025ae:	55                   	push   ebp
9f0025af:	89 e5                	mov    ebp,esp
9f0025b1:	53                   	push   ebx
9f0025b2:	83 ec 04             	sub    esp,0x4
9f0025b5:	e8 d6 17 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f0025ba:	81 c3 4a 39 00 00    	add    ebx,0x394a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f0025c0:	83 ec 0c             	sub    esp,0xc
9f0025c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0025c6:	e8 76 02 00 00       	call   9f002841 <strlenI>
9f0025cb:	83 c4 10             	add    esp,0x10
9f0025ce:	89 c2                	mov    edx,eax
9f0025d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0025d3:	01 d0                	add    eax,edx
9f0025d5:	83 ec 08             	sub    esp,0x8
9f0025d8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0025db:	50                   	push   eax
9f0025dc:	e8 1b 01 00 00       	call   9f0026fc <strcpyI>
9f0025e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f0025e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f0025e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0025ea:	c9                   	leave  
9f0025eb:	c3                   	ret    

9f0025ec <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
9f0025ec:	55                   	push   ebp
9f0025ed:	89 e5                	mov    ebp,esp
9f0025ef:	83 ec 10             	sub    esp,0x10
9f0025f2:	e8 70 17 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0025f7:	05 0d 39 00 00       	add    eax,0x390d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
9f0025fc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
9f002603:	eb 04                	jmp    9f002609 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
9f002605:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
9f002609:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00260c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00260f:	01 d0                	add    eax,edx
9f002611:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002614:	84 c0                	test   al,al
9f002616:	75 ed                	jne    9f002605 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
9f002618:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
9f00261f:	eb 1d                	jmp    9f00263e <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
9f002621:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002627:	01 c2                	add    edx,eax
9f002629:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f00262c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00262f:	01 c8                	add    eax,ecx
9f002631:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002634:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
9f002636:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
9f00263a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
9f00263e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002641:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002644:	01 d0                	add    eax,edx
9f002646:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002649:	84 c0                	test   al,al
9f00264b:	75 d4                	jne    9f002621 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
9f00264d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002653:	01 d0                	add    eax,edx
9f002655:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f002658:	90                   	nop
9f002659:	c9                   	leave  
9f00265a:	c3                   	ret    
9f00265b:	90                   	nop

9f00265c <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
9f00265c:	55                   	push   ebp
9f00265d:	89 e5                	mov    ebp,esp
9f00265f:	56                   	push   esi
9f002660:	53                   	push   ebx
9f002661:	83 ec 10             	sub    esp,0x10
9f002664:	e8 fe 16 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002669:	05 9b 38 00 00       	add    eax,0x389b
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
9f00266e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
9f002671:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f002674:	89 d8                	mov    eax,ebx
9f002676:	8d 58 01             	lea    ebx,[eax+0x1]
9f002679:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00267c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
9f00267f:	89 f0                	mov    eax,esi
9f002681:	8d 70 01             	lea    esi,[eax+0x1]
9f002684:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002687:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
9f00268a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f00268e:	75 0e                	jne    9f00269e <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
9f002690:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f002694:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f002698:	29 c2                	sub    edx,eax
9f00269a:	89 d0                	mov    eax,edx
9f00269c:	eb 15                	jmp    9f0026b3 <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
9f00269e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f0026a2:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f0026a5:	74 cd                	je     9f002674 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
9f0026a7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0026ab:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0026af:	29 c2                	sub    edx,eax
9f0026b1:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
9f0026b3:	83 c4 10             	add    esp,0x10
9f0026b6:	5b                   	pop    ebx
9f0026b7:	5e                   	pop    esi
9f0026b8:	5d                   	pop    ebp
9f0026b9:	c3                   	ret    
9f0026ba:	66 90                	xchg   ax,ax

9f0026bc <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f0026bc:	55                   	push   ebp
9f0026bd:	89 e5                	mov    ebp,esp
9f0026bf:	83 ec 10             	sub    esp,0x10
9f0026c2:	e8 a0 16 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0026c7:	05 3d 38 00 00       	add    eax,0x383d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f0026cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026cf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f0026d2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f0026d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0026d6:	8d 50 01             	lea    edx,[eax+0x1]
9f0026d9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0026dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0026df:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0026e2:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0026e5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0026e8:	88 10                	mov    BYTE PTR [eax],dl
9f0026ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0026ed:	84 c0                	test   al,al
9f0026ef:	75 e2                	jne    9f0026d3 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f0026f1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0026f4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f0026f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f0026fa:	c9                   	leave  
9f0026fb:	c3                   	ret    

9f0026fc <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f0026fc:	55                   	push   ebp
9f0026fd:	89 e5                	mov    ebp,esp
9f0026ff:	83 ec 10             	sub    esp,0x10
9f002702:	e8 60 16 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002707:	05 fd 37 00 00       	add    eax,0x37fd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f00270c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00270f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f002712:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f002713:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002716:	8d 50 01             	lea    edx,[eax+0x1]
9f002719:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00271c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00271f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002722:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002725:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002728:	88 10                	mov    BYTE PTR [eax],dl
9f00272a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00272d:	84 c0                	test   al,al
9f00272f:	75 e2                	jne    9f002713 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f002731:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002734:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f002737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f00273a:	c9                   	leave  
9f00273b:	c3                   	ret    

9f00273c <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f00273c:	55                   	push   ebp
9f00273d:	89 e5                	mov    ebp,esp
9f00273f:	83 ec 10             	sub    esp,0x10
9f002742:	e8 20 16 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002747:	05 bd 37 00 00       	add    eax,0x37bd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f00274c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00274f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f002752:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f002753:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002756:	8d 50 01             	lea    edx,[eax+0x1]
9f002759:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00275c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00275f:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002762:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002765:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002768:	88 10                	mov    BYTE PTR [eax],dl
9f00276a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00276d:	84 c0                	test   al,al
9f00276f:	74 0d                	je     9f00277e <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f002771:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002774:	8d 50 ff             	lea    edx,[eax-0x1]
9f002777:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00277a:	85 c0                	test   eax,eax
9f00277c:	75 d5                	jne    9f002753 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f00277e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f002781:	c9                   	leave  
9f002782:	c3                   	ret    
9f002783:	90                   	nop

9f002784 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f002784:	55                   	push   ebp
9f002785:	89 e5                	mov    ebp,esp
9f002787:	83 ec 04             	sub    esp,0x4
9f00278a:	e8 d8 15 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00278f:	05 75 37 00 00       	add    eax,0x3775
9f002794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002797:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f00279a:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f00279e:	7e 0d                	jle    9f0027ad <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f0027a0:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f0027a4:	7f 07                	jg     9f0027ad <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f0027a6:	b8 01 00 00 00       	mov    eax,0x1
9f0027ab:	eb 05                	jmp    9f0027b2 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f0027ad:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f0027b2:	c9                   	leave  
9f0027b3:	c3                   	ret    

9f0027b4 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f0027b4:	55                   	push   ebp
9f0027b5:	89 e5                	mov    ebp,esp
9f0027b7:	83 ec 10             	sub    esp,0x10
9f0027ba:	e8 a8 15 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0027bf:	05 45 37 00 00       	add    eax,0x3745
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f0027c4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f0027cb:	eb 27                	jmp    9f0027f4 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f0027cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0027d3:	89 c2                	mov    edx,eax
9f0027d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0027d8:	01 d0                	add    eax,edx
9f0027da:	0f be c0             	movsx  eax,al
9f0027dd:	50                   	push   eax
9f0027de:	e8 a1 ff ff ff       	call   9f002784 <check_digit>
9f0027e3:	83 c4 04             	add    esp,0x4
9f0027e6:	83 f0 01             	xor    eax,0x1
9f0027e9:	84 c0                	test   al,al
9f0027eb:	74 07                	je     9f0027f4 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f0027ed:	b8 00 00 00 00       	mov    eax,0x0
9f0027f2:	eb 17                	jmp    9f00280b <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f0027f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027f7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0027fa:	0f be d0             	movsx  edx,al
9f0027fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002800:	01 d0                	add    eax,edx
9f002802:	85 c0                	test   eax,eax
9f002804:	75 c7                	jne    9f0027cd <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f002806:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f00280b:	c9                   	leave  
9f00280c:	c3                   	ret    
9f00280d:	66 90                	xchg   ax,ax
9f00280f:	90                   	nop

9f002810 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
9f002810:	55                   	push   ebp
9f002811:	89 e5                	mov    ebp,esp
9f002813:	83 ec 10             	sub    esp,0x10
9f002816:	e8 4c 15 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00281b:	05 e9 36 00 00       	add    eax,0x36e9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
9f002820:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
9f002827:	eb 04                	jmp    9f00282d <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
9f002829:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f00282d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002830:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002833:	01 d0                	add    eax,edx
9f002835:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002838:	84 c0                	test   al,al
9f00283a:	75 ed                	jne    9f002829 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
9f00283c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
9f00283f:	c9                   	leave  
9f002840:	c3                   	ret    

9f002841 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
9f002841:	55                   	push   ebp
9f002842:	89 e5                	mov    ebp,esp
9f002844:	83 ec 10             	sub    esp,0x10
9f002847:	e8 1b 15 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00284c:	05 b8 36 00 00       	add    eax,0x36b8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
9f002851:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
9f002858:	eb 04                	jmp    9f00285e <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
9f00285a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f00285e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002861:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002864:	01 d0                	add    eax,edx
9f002866:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002869:	84 c0                	test   al,al
9f00286b:	75 ed                	jne    9f00285a <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
9f00286d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
9f002870:	c9                   	leave  
9f002871:	c3                   	ret    
9f002872:	66 90                	xchg   ax,ax

9f002874 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f002874:	55                   	push   ebp
9f002875:	89 e5                	mov    ebp,esp
9f002877:	e8 eb 14 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00287c:	05 88 36 00 00       	add    eax,0x3688
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f002881:	eb 4b                	jmp    9f0028ce <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f002883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002886:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002889:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00288c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00288f:	38 c2                	cmp    dl,al
9f002891:	74 1e                	je     9f0028b1 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f002893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002896:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002899:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00289c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00289f:	38 c2                	cmp    dl,al
9f0028a1:	73 07                	jae    9f0028aa <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f0028a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0028a8:	eb 2f                	jmp    9f0028d9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f0028aa:	b8 01 00 00 00       	mov    eax,0x1
9f0028af:	eb 28                	jmp    9f0028d9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f0028b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028b7:	84 c0                	test   al,al
9f0028b9:	75 07                	jne    9f0028c2 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f0028bb:	b8 00 00 00 00       	mov    eax,0x0
9f0028c0:	eb 17                	jmp    9f0028d9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f0028c2:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f0028c6:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f0028ca:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f0028ce:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0028d2:	75 af                	jne    9f002883 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f0028d4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f0028d9:	5d                   	pop    ebp
9f0028da:	c3                   	ret    

9f0028db <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f0028db:	55                   	push   ebp
9f0028dc:	89 e5                	mov    ebp,esp
9f0028de:	e8 84 14 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0028e3:	05 21 36 00 00       	add    eax,0x3621
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f0028e8:	eb 4b                	jmp    9f002935 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f0028ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028ed:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0028f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0028f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028f6:	38 c2                	cmp    dl,al
9f0028f8:	74 1e                	je     9f002918 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f0028fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028fd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002900:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002903:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002906:	38 c2                	cmp    dl,al
9f002908:	73 07                	jae    9f002911 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f00290a:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f00290f:	eb 2f                	jmp    9f002940 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f002911:	b8 01 00 00 00       	mov    eax,0x1
9f002916:	eb 28                	jmp    9f002940 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f002918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00291b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00291e:	84 c0                	test   al,al
9f002920:	75 07                	jne    9f002929 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f002922:	b8 00 00 00 00       	mov    eax,0x0
9f002927:	eb 17                	jmp    9f002940 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f002929:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f00292d:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f002931:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f002935:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002939:	75 af                	jne    9f0028ea <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f00293b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f002940:	5d                   	pop    ebp
9f002941:	c3                   	ret    
9f002942:	66 90                	xchg   ax,ax

9f002944 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f002944:	55                   	push   ebp
9f002945:	89 e5                	mov    ebp,esp
9f002947:	83 ec 10             	sub    esp,0x10
9f00294a:	e8 18 14 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00294f:	05 b5 35 00 00       	add    eax,0x35b5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f002954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002957:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f00295a:	eb 1b                	jmp    9f002977 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f00295c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00295f:	8d 50 01             	lea    edx,[eax+0x1]
9f002962:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002965:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002968:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00296b:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f00296e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002971:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f002973:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f002977:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00297b:	74 1c                	je     9f002999 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f00297d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002980:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002983:	84 c0                	test   al,al
9f002985:	75 d5                	jne    9f00295c <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f002987:	eb 10                	jmp    9f002999 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f002989:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00298c:	8d 50 01             	lea    edx,[eax+0x1]
9f00298f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002992:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f002995:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f002999:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f00299d:	75 ea                	jne    9f002989 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
9f00299f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
9f0029a2:	c9                   	leave  
9f0029a3:	c3                   	ret    

9f0029a4 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f0029a4:	55                   	push   ebp
9f0029a5:	89 e5                	mov    ebp,esp
9f0029a7:	e8 bb 13 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0029ac:	05 58 35 00 00       	add    eax,0x3558
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
9f0029b1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0029b4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0029b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0029ba:	e8 85 ff ff ff       	call   9f002944 <strncpyI>
9f0029bf:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
9f0029c2:	c9                   	leave  
9f0029c3:	c3                   	ret    

9f0029c4 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f0029c4:	55                   	push   ebp
9f0029c5:	89 e5                	mov    ebp,esp
9f0029c7:	57                   	push   edi
9f0029c8:	56                   	push   esi
9f0029c9:	53                   	push   ebx
9f0029ca:	83 ec 08             	sub    esp,0x8
9f0029cd:	e8 95 13 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0029d2:	05 32 35 00 00       	add    eax,0x3532
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f0029d7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f0029da:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f0029e1:	89 f0                	mov    eax,esi
9f0029e3:	8d 70 01             	lea    esi,[eax+0x1]
9f0029e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0029e9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f0029ec:	83 fb 20             	cmp    ebx,0x20
9f0029ef:	74 f0                	je     9f0029e1 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f0029f1:	83 fb 2d             	cmp    ebx,0x2d
9f0029f4:	75 14                	jne    9f002a0a <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f0029f6:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f0029fd:	89 f0                	mov    eax,esi
9f0029ff:	8d 70 01             	lea    esi,[eax+0x1]
9f002a02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a05:	0f be d8             	movsx  ebx,al
9f002a08:	eb 10                	jmp    9f002a1a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f002a0a:	83 fb 2b             	cmp    ebx,0x2b
9f002a0d:	75 0b                	jne    9f002a1a <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f002a0f:	89 f0                	mov    eax,esi
9f002a11:	8d 70 01             	lea    esi,[eax+0x1]
9f002a14:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a17:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f002a1a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002a1e:	74 06                	je     9f002a26 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f002a20:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002a24:	75 26                	jne    9f002a4c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f002a26:	83 fb 30             	cmp    ebx,0x30
9f002a29:	75 21                	jne    9f002a4c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f002a2b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002a2e:	3c 78                	cmp    al,0x78
9f002a30:	74 07                	je     9f002a39 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f002a32:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002a35:	3c 58                	cmp    al,0x58
9f002a37:	75 13                	jne    9f002a4c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f002a39:	8d 46 01             	lea    eax,[esi+0x1]
9f002a3c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a3f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f002a42:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f002a45:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f002a4c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002a50:	75 14                	jne    9f002a66 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f002a52:	83 fb 30             	cmp    ebx,0x30
9f002a55:	75 07                	jne    9f002a5e <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f002a57:	b8 08 00 00 00       	mov    eax,0x8
9f002a5c:	eb 05                	jmp    9f002a63 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f002a5e:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f002a63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f002a66:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002a69:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002a6e:	ba 00 00 00 00       	mov    edx,0x0
9f002a73:	f7 f1                	div    ecx
9f002a75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f002a78:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002a7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002a80:	ba 00 00 00 00       	mov    edx,0x0
9f002a85:	f7 f1                	div    ecx
9f002a87:	89 d0                	mov    eax,edx
9f002a89:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f002a8b:	bf 00 00 00 00       	mov    edi,0x0
9f002a90:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f002a95:	8d 43 d0             	lea    eax,[ebx-0x30]
9f002a98:	83 f8 09             	cmp    eax,0x9
9f002a9b:	77 05                	ja     9f002aa2 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f002a9d:	83 eb 30             	sub    ebx,0x30
9f002aa0:	eb 25                	jmp    9f002ac7 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f002aa2:	89 d8                	mov    eax,ebx
9f002aa4:	83 c8 20             	or     eax,0x20
9f002aa7:	83 e8 61             	sub    eax,0x61
9f002aaa:	83 f8 19             	cmp    eax,0x19
9f002aad:	77 56                	ja     9f002b05 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f002aaf:	83 fb 40             	cmp    ebx,0x40
9f002ab2:	7e 0c                	jle    9f002ac0 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f002ab4:	83 fb 5a             	cmp    ebx,0x5a
9f002ab7:	7f 07                	jg     9f002ac0 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f002ab9:	b8 37 00 00 00       	mov    eax,0x37
9f002abe:	eb 05                	jmp    9f002ac5 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f002ac0:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f002ac5:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f002ac7:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f002aca:	7d 3c                	jge    9f002b08 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f002acc:	89 c8                	mov    eax,ecx
9f002ace:	85 c0                	test   eax,eax
9f002ad0:	78 10                	js     9f002ae2 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f002ad2:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002ad5:	77 0b                	ja     9f002ae2 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f002ad7:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002ada:	75 0d                	jne    9f002ae9 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f002adc:	89 d0                	mov    eax,edx
9f002ade:	39 c3                	cmp    ebx,eax
9f002ae0:	7e 07                	jle    9f002ae9 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f002ae2:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f002ae7:	eb 0f                	jmp    9f002af8 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f002ae9:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f002aee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002af1:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f002af4:	89 d8                	mov    eax,ebx
9f002af6:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f002af8:	89 f0                	mov    eax,esi
9f002afa:	8d 70 01             	lea    esi,[eax+0x1]
9f002afd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b00:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002b03:	eb 90                	jmp    9f002a95 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002b05:	90                   	nop
9f002b06:	eb 01                	jmp    9f002b09 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f002b08:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002b09:	89 c8                	mov    eax,ecx
9f002b0b:	85 c0                	test   eax,eax
9f002b0d:	79 07                	jns    9f002b16 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f002b0f:	bf ff ff ff ff       	mov    edi,0xffffffff
9f002b14:	eb 08                	jmp    9f002b1e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f002b16:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002b1a:	74 02                	je     9f002b1e <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f002b1c:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f002b1e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002b22:	74 13                	je     9f002b37 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f002b24:	89 c8                	mov    eax,ecx
9f002b26:	85 c0                	test   eax,eax
9f002b28:	74 05                	je     9f002b2f <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f002b2a:	8d 46 ff             	lea    eax,[esi-0x1]
9f002b2d:	eb 03                	jmp    9f002b32 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f002b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f002b32:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002b35:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f002b37:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f002b39:	83 c4 08             	add    esp,0x8
9f002b3c:	5b                   	pop    ebx
9f002b3d:	5e                   	pop    esi
9f002b3e:	5f                   	pop    edi
9f002b3f:	5d                   	pop    ebp
9f002b40:	c3                   	ret    
9f002b41:	66 90                	xchg   ax,ax
9f002b43:	90                   	nop

9f002b44 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f002b44:	55                   	push   ebp
9f002b45:	89 e5                	mov    ebp,esp
9f002b47:	e8 1b 12 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002b4c:	05 b8 33 00 00       	add    eax,0x33b8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f002b51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b57:	01 d0                	add    eax,edx
9f002b59:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f002b5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f002b5f:	5d                   	pop    ebp
9f002b60:	c3                   	ret    
9f002b61:	66 90                	xchg   ax,ax
9f002b63:	90                   	nop

9f002b64 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f002b64:	55                   	push   ebp
9f002b65:	89 e5                	mov    ebp,esp
9f002b67:	57                   	push   edi
9f002b68:	56                   	push   esi
9f002b69:	53                   	push   ebx
9f002b6a:	83 ec 0c             	sub    esp,0xc
9f002b6d:	e8 f5 11 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002b72:	05 92 33 00 00       	add    eax,0x3392
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f002b77:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f002b7a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f002b81:	89 f0                	mov    eax,esi
9f002b83:	8d 70 01             	lea    esi,[eax+0x1]
9f002b86:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b89:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f002b8c:	83 fb 20             	cmp    ebx,0x20
9f002b8f:	74 f0                	je     9f002b81 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f002b91:	83 fb 2d             	cmp    ebx,0x2d
9f002b94:	75 14                	jne    9f002baa <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f002b96:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f002b9d:	89 f0                	mov    eax,esi
9f002b9f:	8d 70 01             	lea    esi,[eax+0x1]
9f002ba2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ba5:	0f be d8             	movsx  ebx,al
9f002ba8:	eb 10                	jmp    9f002bba <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f002baa:	83 fb 2b             	cmp    ebx,0x2b
9f002bad:	75 0b                	jne    9f002bba <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f002baf:	89 f0                	mov    eax,esi
9f002bb1:	8d 70 01             	lea    esi,[eax+0x1]
9f002bb4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bb7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f002bba:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002bbe:	74 06                	je     9f002bc6 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f002bc0:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002bc4:	75 26                	jne    9f002bec <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f002bc6:	83 fb 30             	cmp    ebx,0x30
9f002bc9:	75 21                	jne    9f002bec <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f002bcb:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002bce:	3c 78                	cmp    al,0x78
9f002bd0:	74 07                	je     9f002bd9 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f002bd2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002bd5:	3c 58                	cmp    al,0x58
9f002bd7:	75 13                	jne    9f002bec <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f002bd9:	8d 46 01             	lea    eax,[esi+0x1]
9f002bdc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bdf:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f002be2:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f002be5:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f002bec:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002bf0:	75 14                	jne    9f002c06 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f002bf2:	83 fb 30             	cmp    ebx,0x30
9f002bf5:	75 07                	jne    9f002bfe <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f002bf7:	b8 08 00 00 00       	mov    eax,0x8
9f002bfc:	eb 05                	jmp    9f002c03 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f002bfe:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f002c03:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f002c06:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002c0a:	74 07                	je     9f002c13 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f002c0c:	b8 00 00 00 80       	mov    eax,0x80000000
9f002c11:	eb 05                	jmp    9f002c18 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f002c13:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f002c18:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002c1b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002c1e:	ba 00 00 00 00       	mov    edx,0x0
9f002c23:	f7 f1                	div    ecx
9f002c25:	89 d1                	mov    ecx,edx
9f002c27:	89 c8                	mov    eax,ecx
9f002c29:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f002c2c:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f002c2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002c32:	ba 00 00 00 00       	mov    edx,0x0
9f002c37:	f7 f7                	div    edi
9f002c39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f002c3c:	bf 00 00 00 00       	mov    edi,0x0
9f002c41:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f002c46:	8d 43 d0             	lea    eax,[ebx-0x30]
9f002c49:	83 f8 09             	cmp    eax,0x9
9f002c4c:	77 05                	ja     9f002c53 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f002c4e:	83 eb 30             	sub    ebx,0x30
9f002c51:	eb 25                	jmp    9f002c78 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f002c53:	89 d8                	mov    eax,ebx
9f002c55:	83 c8 20             	or     eax,0x20
9f002c58:	83 e8 61             	sub    eax,0x61
9f002c5b:	83 f8 19             	cmp    eax,0x19
9f002c5e:	77 55                	ja     9f002cb5 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f002c60:	83 fb 40             	cmp    ebx,0x40
9f002c63:	7e 0c                	jle    9f002c71 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f002c65:	83 fb 5a             	cmp    ebx,0x5a
9f002c68:	7f 07                	jg     9f002c71 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f002c6a:	b8 37 00 00 00       	mov    eax,0x37
9f002c6f:	eb 05                	jmp    9f002c76 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f002c71:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f002c76:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f002c78:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f002c7b:	7d 3b                	jge    9f002cb8 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f002c7d:	89 c8                	mov    eax,ecx
9f002c7f:	85 c0                	test   eax,eax
9f002c81:	78 0f                	js     9f002c92 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f002c83:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002c86:	77 0a                	ja     9f002c92 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f002c88:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002c8b:	75 0c                	jne    9f002c99 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f002c8d:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f002c90:	7e 07                	jle    9f002c99 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f002c92:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f002c97:	eb 0f                	jmp    9f002ca8 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f002c99:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f002c9e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ca1:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f002ca4:	89 d8                	mov    eax,ebx
9f002ca6:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f002ca8:	89 f0                	mov    eax,esi
9f002caa:	8d 70 01             	lea    esi,[eax+0x1]
9f002cad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002cb0:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002cb3:	eb 91                	jmp    9f002c46 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002cb5:	90                   	nop
9f002cb6:	eb 01                	jmp    9f002cb9 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f002cb8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002cb9:	89 c8                	mov    eax,ecx
9f002cbb:	85 c0                	test   eax,eax
9f002cbd:	79 16                	jns    9f002cd5 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f002cbf:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002cc3:	74 07                	je     9f002ccc <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f002cc5:	b8 00 00 00 80       	mov    eax,0x80000000
9f002cca:	eb 05                	jmp    9f002cd1 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f002ccc:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f002cd1:	89 c7                	mov    edi,eax
9f002cd3:	eb 08                	jmp    9f002cdd <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f002cd5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002cd9:	74 02                	je     9f002cdd <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f002cdb:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f002cdd:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002ce1:	74 13                	je     9f002cf6 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f002ce3:	89 c8                	mov    eax,ecx
9f002ce5:	85 c0                	test   eax,eax
9f002ce7:	74 05                	je     9f002cee <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f002ce9:	8d 46 ff             	lea    eax,[esi-0x1]
9f002cec:	eb 03                	jmp    9f002cf1 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f002cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f002cf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002cf4:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f002cf6:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f002cf8:	83 c4 0c             	add    esp,0xc
9f002cfb:	5b                   	pop    ebx
9f002cfc:	5e                   	pop    esi
9f002cfd:	5f                   	pop    edi
9f002cfe:	5d                   	pop    ebp
9f002cff:	c3                   	ret    

9f002d00 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f002d00:	55                   	push   ebp
9f002d01:	89 e5                	mov    ebp,esp
9f002d03:	53                   	push   ebx
9f002d04:	83 ec 14             	sub    esp,0x14
9f002d07:	e8 5b 10 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002d0c:	05 f8 31 00 00       	add    eax,0x31f8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f002d11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d14:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002d17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d1a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002d1d:	eb 04                	jmp    9f002d23 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f002d1f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002d23:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002d26:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002d29:	80 fa 20             	cmp    dl,0x20
9f002d2c:	74 f1                	je     9f002d1f <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f002d2e:	83 ec 0c             	sub    esp,0xc
9f002d31:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002d34:	89 c3                	mov    ebx,eax
9f002d36:	e8 06 fb ff ff       	call   9f002841 <strlenI>
9f002d3b:	83 c4 10             	add    esp,0x10
9f002d3e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002d41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002d44:	01 d0                	add    eax,edx
9f002d46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f002d49:	eb 0c                	jmp    9f002d57 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f002d4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002d4e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002d51:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f002d54:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f002d57:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002d5a:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002d5d:	76 0a                	jbe    9f002d69 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f002d5f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002d62:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002d65:	3c 20                	cmp    al,0x20
9f002d67:	74 e2                	je     9f002d4b <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f002d69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002d6c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002d6f:	74 1f                	je     9f002d90 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f002d71:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f002d72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002d75:	8d 50 01             	lea    edx,[eax+0x1]
9f002d78:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002d7b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002d7e:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002d81:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f002d84:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002d87:	88 10                	mov    BYTE PTR [eax],dl
9f002d89:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002d8c:	84 c0                	test   al,al
9f002d8e:	75 e2                	jne    9f002d72 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f002d90:	90                   	nop
9f002d91:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002d94:	c9                   	leave  
9f002d95:	c3                   	ret    

9f002d96 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f002d96:	55                   	push   ebp
9f002d97:	89 e5                	mov    ebp,esp
9f002d99:	83 ec 08             	sub    esp,0x8
9f002d9c:	e8 c6 0f 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002da1:	05 63 31 00 00       	add    eax,0x3163
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f002da6:	83 ec 0c             	sub    esp,0xc
9f002da9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002dac:	e8 4f ff ff ff       	call   9f002d00 <strtrimI>
9f002db1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f002db4:	c9                   	leave  
9f002db5:	c3                   	ret    
9f002db6:	66 90                	xchg   ax,ax

9f002db8 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:11
#include "strings.h"
#include "libChrisOS.h"

///NOTE: Output pointer has to be freed!!!
static char *strreplaceI(const char *in, const char *pattern, const char *by)
{
9f002db8:	55                   	push   ebp
9f002db9:	89 e5                	mov    ebp,esp
9f002dbb:	56                   	push   esi
9f002dbc:	53                   	push   ebx
9f002dbd:	83 ec 10             	sub    esp,0x10
9f002dc0:	e8 cb 0f 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f002dc5:	81 c3 3f 31 00 00    	add    ebx,0x313f
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:12
    size_t outsize = strlenI(in) + 1;
9f002dcb:	83 ec 0c             	sub    esp,0xc
9f002dce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002dd1:	e8 6b fa ff ff       	call   9f002841 <strlenI>
9f002dd6:	83 c4 10             	add    esp,0x10
9f002dd9:	83 c0 01             	add    eax,0x1
9f002ddc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    char *res = mallocI(outsize);
9f002ddf:	83 ec 0c             	sub    esp,0xc
9f002de2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002de5:	e8 2f ea ff ff       	call   9f001819 <mallocI>
9f002dea:	83 c4 10             	add    esp,0x10
9f002ded:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:16
    // use this to iterate over the output
    size_t resoffset = 0;
9f002df0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f002df7:	e9 c0 00 00 00       	jmp    9f002ebc <strreplaceI+0x104>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:21
        // copy everything up to the pattern
        memcpyI(res + resoffset, in, needle - in);
9f002dfc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e02:	29 c2                	sub    edx,eax
9f002e04:	89 d0                	mov    eax,edx
9f002e06:	89 c1                	mov    ecx,eax
9f002e08:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002e0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002e0e:	01 d0                	add    eax,edx
9f002e10:	83 ec 04             	sub    esp,0x4
9f002e13:	51                   	push   ecx
9f002e14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002e17:	50                   	push   eax
9f002e18:	e8 e7 ec ff ff       	call   9f001b04 <memcpyI>
9f002e1d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        resoffset += needle - in;
9f002e20:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e26:	29 c2                	sub    edx,eax
9f002e28:	89 d0                	mov    eax,edx
9f002e2a:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:25

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f002e2d:	83 ec 0c             	sub    esp,0xc
9f002e30:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002e33:	e8 09 fa ff ff       	call   9f002841 <strlenI>
9f002e38:	83 c4 10             	add    esp,0x10
9f002e3b:	89 c2                	mov    edx,eax
9f002e3d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002e40:	01 d0                	add    eax,edx
9f002e42:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:28

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f002e45:	83 ec 0c             	sub    esp,0xc
9f002e48:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002e4b:	e8 f1 f9 ff ff       	call   9f002841 <strlenI>
9f002e50:	83 c4 10             	add    esp,0x10
9f002e53:	89 c2                	mov    edx,eax
9f002e55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002e58:	29 d0                	sub    eax,edx
9f002e5a:	89 c6                	mov    esi,eax
9f002e5c:	83 ec 0c             	sub    esp,0xc
9f002e5f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002e62:	e8 da f9 ff ff       	call   9f002841 <strlenI>
9f002e67:	83 c4 10             	add    esp,0x10
9f002e6a:	01 f0                	add    eax,esi
9f002e6c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29
        res = reallocI(res, outsize);
9f002e6f:	83 ec 08             	sub    esp,0x8
9f002e72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002e75:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002e78:	e8 90 eb ff ff       	call   9f001a0d <reallocI>
9f002e7d:	83 c4 10             	add    esp,0x10
9f002e80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(res + resoffset, by, strlenI(by));
9f002e83:	83 ec 0c             	sub    esp,0xc
9f002e86:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002e89:	e8 b3 f9 ff ff       	call   9f002841 <strlenI>
9f002e8e:	83 c4 10             	add    esp,0x10
9f002e91:	89 c1                	mov    ecx,eax
9f002e93:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002e96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002e99:	01 d0                	add    eax,edx
9f002e9b:	83 ec 04             	sub    esp,0x4
9f002e9e:	51                   	push   ecx
9f002e9f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002ea2:	50                   	push   eax
9f002ea3:	e8 5c ec ff ff       	call   9f001b04 <memcpyI>
9f002ea8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f002eab:	83 ec 0c             	sub    esp,0xc
9f002eae:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002eb1:	e8 8b f9 ff ff       	call   9f002841 <strlenI>
9f002eb6:	83 c4 10             	add    esp,0x10
9f002eb9:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19
    char *res = mallocI(outsize);
    // use this to iterate over the output
    size_t resoffset = 0;

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f002ebc:	83 ec 08             	sub    esp,0x8
9f002ebf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002ec2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002ec5:	e8 f8 00 00 00       	call   9f002fc2 <strstrI>
9f002eca:	83 c4 10             	add    esp,0x10
9f002ecd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f002ed0:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f002ed4:	0f 85 22 ff ff ff    	jne    9f002dfc <strreplaceI+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(res + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(res + resoffset, in);
9f002eda:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002edd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002ee0:	01 d0                	add    eax,edx
9f002ee2:	83 ec 08             	sub    esp,0x8
9f002ee5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002ee8:	50                   	push   eax
9f002ee9:	e8 0e f8 ff ff       	call   9f0026fc <strcpyI>
9f002eee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return res;
9f002ef1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f002ef4:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002ef7:	5b                   	pop    ebx
9f002ef8:	5e                   	pop    esi
9f002ef9:	5d                   	pop    ebp
9f002efa:	c3                   	ret    

9f002efb <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by)
{
9f002efb:	55                   	push   ebp
9f002efc:	89 e5                	mov    ebp,esp
9f002efe:	83 ec 08             	sub    esp,0x8
9f002f01:	e8 61 0e 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002f06:	05 fe 2f 00 00       	add    eax,0x2ffe
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by);
9f002f0b:	83 ec 04             	sub    esp,0x4
9f002f0e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002f11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f17:	e8 9c fe ff ff       	call   9f002db8 <strreplaceI>
9f002f1c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f002f1f:	c9                   	leave  
9f002f20:	c3                   	ret    
9f002f21:	66 90                	xchg   ax,ax
9f002f23:	90                   	nop

9f002f24 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strnstrI(char* string, char* substring, int length)
{
9f002f24:	55                   	push   ebp
9f002f25:	89 e5                	mov    ebp,esp
9f002f27:	56                   	push   esi
9f002f28:	53                   	push   ebx
9f002f29:	83 ec 10             	sub    esp,0x10
9f002f2c:	e8 36 0e 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002f31:	05 d3 2f 00 00       	add    eax,0x2fd3
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:59

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f002f36:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002f39:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    
    b = substring;
9f002f3c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    if (*b == 0) {
9f002f3f:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002f42:	84 c0                	test   al,al
9f002f44:	75 66                	jne    9f002fac <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
	return string;
9f002f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f49:	eb 70                	jmp    9f002fbb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f002f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f4e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002f51:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002f54:	38 c2                	cmp    dl,al
9f002f56:	74 12                	je     9f002f6a <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
            if (len--<=0)
9f002f58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002f5b:	8d 50 ff             	lea    edx,[eax-0x1]
9f002f5e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002f61:	85 c0                	test   eax,eax
9f002f63:	7f 42                	jg     9f002fa7 <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
                return string;
9f002f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f68:	eb 51                	jmp    9f002fbb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
	    continue;
	}
	a = string;
9f002f6a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	while (1) {
	    if (*b == 0) {
9f002f6d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002f70:	84 c0                	test   al,al
9f002f72:	75 05                	jne    9f002f79 <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
		return string;
9f002f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f77:	eb 42                	jmp    9f002fbb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
	    }
            if (len--<=0)
9f002f79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002f7c:	8d 50 ff             	lea    edx,[eax-0x1]
9f002f7f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002f82:	85 c0                	test   eax,eax
9f002f84:	7f 05                	jg     9f002f8b <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
                return string;
9f002f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f89:	eb 30                	jmp    9f002fbb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
	    if (*a++ != *b++) {
9f002f8b:	89 f0                	mov    eax,esi
9f002f8d:	8d 70 01             	lea    esi,[eax+0x1]
9f002f90:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002f93:	89 d8                	mov    eax,ebx
9f002f95:	8d 58 01             	lea    ebx,[eax+0x1]
9f002f98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002f9b:	38 c2                	cmp    dl,al
9f002f9d:	75 02                	jne    9f002fa1 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:81
		break;
	    }
	}
9f002f9f:	eb cc                	jmp    9f002f6d <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f002fa1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
	    }
	}
	b = substring;
9f002fa2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f002fa5:	eb 01                	jmp    9f002fa8 <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f002fa7:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f002fa8:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65 (discriminator 1)
9f002fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002faf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002fb2:	84 c0                	test   al,al
9f002fb4:	75 95                	jne    9f002f4b <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f002fb6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f002fbb:	83 c4 10             	add    esp,0x10
9f002fbe:	5b                   	pop    ebx
9f002fbf:	5e                   	pop    esi
9f002fc0:	5d                   	pop    ebp
9f002fc1:	c3                   	ret    

9f002fc2 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:88

char* strstrI(const char* string, const char* substring)
{
9f002fc2:	55                   	push   ebp
9f002fc3:	89 e5                	mov    ebp,esp
9f002fc5:	56                   	push   esi
9f002fc6:	53                   	push   ebx
9f002fc7:	e8 9b 0d 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f002fcc:	05 38 2f 00 00       	add    eax,0x2f38
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:96
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f002fd1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    if (*b == 0) {
9f002fd4:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002fd7:	84 c0                	test   al,al
9f002fd9:	75 42                	jne    9f00301d <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
	return string;
9f002fdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fde:	eb 4c                	jmp    9f00302c <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f002fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fe3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002fe6:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002fe9:	38 c2                	cmp    dl,al
9f002feb:	75 2b                	jne    9f003018 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:104
	    continue;
	}
	a = string;
9f002fed:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:106
	while (1) {
	    if (*b == 0) {
9f002ff0:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002ff3:	84 c0                	test   al,al
9f002ff5:	75 05                	jne    9f002ffc <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
		return string;
9f002ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ffa:	eb 30                	jmp    9f00302c <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:109
	    }
	    if (*a++ != *b++) {
9f002ffc:	89 f0                	mov    eax,esi
9f002ffe:	8d 70 01             	lea    esi,[eax+0x1]
9f003001:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003004:	89 d8                	mov    eax,ebx
9f003006:	8d 58 01             	lea    ebx,[eax+0x1]
9f003009:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00300c:	38 c2                	cmp    dl,al
9f00300e:	75 02                	jne    9f003012 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:112
		break;
	    }
	}
9f003010:	eb de                	jmp    9f002ff0 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f003012:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
	    }
	}
	b = substring;
9f003013:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003016:	eb 01                	jmp    9f003019 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f003018:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003019:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100 (discriminator 1)
9f00301d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003020:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003023:	84 c0                	test   al,al
9f003025:	75 b9                	jne    9f002fe0 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:115
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003027:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
}
9f00302c:	5b                   	pop    ebx
9f00302d:	5e                   	pop    esi
9f00302e:	5d                   	pop    ebp
9f00302f:	c3                   	ret    

9f003030 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:119

VISIBLE char* strstr(const char* string, const char* substring)
{
9f003030:	55                   	push   ebp
9f003031:	89 e5                	mov    ebp,esp
9f003033:	e8 2f 0d 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f003038:	05 cc 2e 00 00       	add    eax,0x2ecc
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120
    return strstrI(string, substring);
9f00303d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003040:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003043:	e8 7a ff ff ff       	call   9f002fc2 <strstrI>
9f003048:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
}
9f00304b:	c9                   	leave  
9f00304c:	c3                   	ret    
9f00304d:	66 90                	xchg   ax,ax
9f00304f:	90                   	nop

9f003050 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f003050:	55                   	push   ebp
9f003051:	89 e5                	mov    ebp,esp
9f003053:	56                   	push   esi
9f003054:	53                   	push   ebx
9f003055:	83 ec 10             	sub    esp,0x10
9f003058:	e8 0a 0d 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00305d:	05 a7 2e 00 00       	add    eax,0x2ea7
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    uint32_t retVal=0;
9f003062:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    GET_TICKS(retVal);
9f003069:	b8 70 01 00 00       	mov    eax,0x170
9f00306e:	bb 00 00 00 00       	mov    ebx,0x0
9f003073:	b9 00 00 00 00       	mov    ecx,0x0
9f003078:	ba 00 00 00 00       	mov    edx,0x0
9f00307d:	be 00 00 00 00       	mov    esi,0x0
9f003082:	e8 fc ff ff ff       	call   9f003083 <getticks+0x33>
9f003087:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
    return (time_t)retVal;
9f00308a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
}
9f00308d:	83 c4 10             	add    esp,0x10
9f003090:	5b                   	pop    ebx
9f003091:	5e                   	pop    esi
9f003092:	5d                   	pop    ebp
9f003093:	c3                   	ret    

9f003094 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003094:	55                   	push   ebp
9f003095:	89 e5                	mov    ebp,esp
9f003097:	53                   	push   ebx
9f003098:	83 ec 10             	sub    esp,0x10
9f00309b:	e8 f0 0c 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f0030a0:	81 c3 64 2e 00 00    	add    ebx,0x2e64
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  time_t time = *timer;
9f0030a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030a9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0030ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f0030ae:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37

  dayclock = (unsigned long) time % SECS_DAY;
9f0030b5:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0030b8:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f0030bd:	89 c8                	mov    eax,ecx
9f0030bf:	f7 e2                	mul    edx
9f0030c1:	89 d0                	mov    eax,edx
9f0030c3:	c1 e8 10             	shr    eax,0x10
9f0030c6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0030c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0030cc:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f0030d2:	29 c1                	sub    ecx,eax
9f0030d4:	89 c8                	mov    eax,ecx
9f0030d6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  dayno = (unsigned long) time / SECS_DAY;
9f0030d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0030dc:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f0030e1:	f7 e2                	mul    edx
9f0030e3:	89 d0                	mov    eax,edx
9f0030e5:	c1 e8 10             	shr    eax,0x10
9f0030e8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  tmbuf->tm_sec = dayclock % 60;
9f0030eb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f0030ee:	ba 89 88 88 88       	mov    edx,0x88888889
9f0030f3:	89 c8                	mov    eax,ecx
9f0030f5:	f7 e2                	mul    edx
9f0030f7:	89 d0                	mov    eax,edx
9f0030f9:	c1 e8 05             	shr    eax,0x5
9f0030fc:	89 c2                	mov    edx,eax
9f0030fe:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003105:	89 c2                	mov    edx,eax
9f003107:	89 d0                	mov    eax,edx
9f003109:	c1 e0 04             	shl    eax,0x4
9f00310c:	29 d0                	sub    eax,edx
9f00310e:	29 c1                	sub    ecx,eax
9f003110:	89 c8                	mov    eax,ecx
9f003112:	89 c2                	mov    edx,eax
9f003114:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003117:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f003119:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f00311c:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003121:	89 c8                	mov    eax,ecx
9f003123:	f7 e2                	mul    edx
9f003125:	89 d0                	mov    eax,edx
9f003127:	c1 e8 0b             	shr    eax,0xb
9f00312a:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f003130:	29 c1                	sub    ecx,eax
9f003132:	89 c8                	mov    eax,ecx
9f003134:	ba 89 88 88 88       	mov    edx,0x88888889
9f003139:	f7 e2                	mul    edx
9f00313b:	89 d0                	mov    eax,edx
9f00313d:	c1 e8 05             	shr    eax,0x5
9f003140:	89 c2                	mov    edx,eax
9f003142:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003145:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_hour = dayclock / 3600;
9f003148:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00314b:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003150:	f7 e2                	mul    edx
9f003152:	89 d0                	mov    eax,edx
9f003154:	c1 e8 0b             	shr    eax,0xb
9f003157:	89 c2                	mov    edx,eax
9f003159:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00315c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f00315f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003162:	8d 48 04             	lea    ecx,[eax+0x4]
9f003165:	ba 25 49 92 24       	mov    edx,0x24924925
9f00316a:	89 c8                	mov    eax,ecx
9f00316c:	f7 e2                	mul    edx
9f00316e:	89 c8                	mov    eax,ecx
9f003170:	29 d0                	sub    eax,edx
9f003172:	d1 e8                	shr    eax,1
9f003174:	01 d0                	add    eax,edx
9f003176:	c1 e8 02             	shr    eax,0x2
9f003179:	89 c2                	mov    edx,eax
9f00317b:	c1 e2 03             	shl    edx,0x3
9f00317e:	29 c2                	sub    edx,eax
9f003180:	89 c8                	mov    eax,ecx
9f003182:	29 d0                	sub    eax,edx
9f003184:	89 c2                	mov    edx,eax
9f003186:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003189:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f00318c:	eb 66                	jmp    9f0031f4 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
    dayno -= YEARSIZE(year);
9f00318e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003191:	83 e0 03             	and    eax,0x3
9f003194:	85 c0                	test   eax,eax
9f003196:	75 50                	jne    9f0031e8 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 1)
9f003198:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00319b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0031a0:	89 c8                	mov    eax,ecx
9f0031a2:	f7 ea                	imul   edx
9f0031a4:	c1 fa 05             	sar    edx,0x5
9f0031a7:	89 c8                	mov    eax,ecx
9f0031a9:	c1 f8 1f             	sar    eax,0x1f
9f0031ac:	29 c2                	sub    edx,eax
9f0031ae:	89 d0                	mov    eax,edx
9f0031b0:	6b c0 64             	imul   eax,eax,0x64
9f0031b3:	29 c1                	sub    ecx,eax
9f0031b5:	89 c8                	mov    eax,ecx
9f0031b7:	85 c0                	test   eax,eax
9f0031b9:	75 26                	jne    9f0031e1 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 4)
9f0031bb:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0031be:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0031c3:	89 c8                	mov    eax,ecx
9f0031c5:	f7 ea                	imul   edx
9f0031c7:	c1 fa 07             	sar    edx,0x7
9f0031ca:	89 c8                	mov    eax,ecx
9f0031cc:	c1 f8 1f             	sar    eax,0x1f
9f0031cf:	29 c2                	sub    edx,eax
9f0031d1:	89 d0                	mov    eax,edx
9f0031d3:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0031d9:	29 c1                	sub    ecx,eax
9f0031db:	89 c8                	mov    eax,ecx
9f0031dd:	85 c0                	test   eax,eax
9f0031df:	75 07                	jne    9f0031e8 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 5)
9f0031e1:	b8 6e 01 00 00       	mov    eax,0x16e
9f0031e6:	eb 05                	jmp    9f0031ed <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 6)
9f0031e8:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
9f0031ed:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46 (discriminator 8)
    year++;
9f0031f0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f0031f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0031f7:	83 e0 03             	and    eax,0x3
9f0031fa:	85 c0                	test   eax,eax
9f0031fc:	75 50                	jne    9f00324e <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f0031fe:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003201:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003206:	89 c8                	mov    eax,ecx
9f003208:	f7 ea                	imul   edx
9f00320a:	c1 fa 05             	sar    edx,0x5
9f00320d:	89 c8                	mov    eax,ecx
9f00320f:	c1 f8 1f             	sar    eax,0x1f
9f003212:	29 c2                	sub    edx,eax
9f003214:	89 d0                	mov    eax,edx
9f003216:	6b c0 64             	imul   eax,eax,0x64
9f003219:	29 c1                	sub    ecx,eax
9f00321b:	89 c8                	mov    eax,ecx
9f00321d:	85 c0                	test   eax,eax
9f00321f:	75 26                	jne    9f003247 <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f003221:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003224:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003229:	89 c8                	mov    eax,ecx
9f00322b:	f7 ea                	imul   edx
9f00322d:	c1 fa 07             	sar    edx,0x7
9f003230:	89 c8                	mov    eax,ecx
9f003232:	c1 f8 1f             	sar    eax,0x1f
9f003235:	29 c2                	sub    edx,eax
9f003237:	89 d0                	mov    eax,edx
9f003239:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00323f:	29 c1                	sub    ecx,eax
9f003241:	89 c8                	mov    eax,ecx
9f003243:	85 c0                	test   eax,eax
9f003245:	75 07                	jne    9f00324e <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f003247:	b8 6e 01 00 00       	mov    eax,0x16e
9f00324c:	eb 05                	jmp    9f003253 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f00324e:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f003253:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003256:	0f 86 32 ff ff ff    	jbe    9f00318e <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f00325c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00325f:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f003265:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003268:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_yday = dayno;
9f00326b:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00326e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003271:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  tmbuf->tm_mon = 0;
9f003274:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003277:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f00327e:	e9 89 00 00 00       	jmp    9f00330c <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f003283:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003286:	83 e0 03             	and    eax,0x3
9f003289:	85 c0                	test   eax,eax
9f00328b:	75 50                	jne    9f0032dd <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 1)
9f00328d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003290:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003295:	89 c8                	mov    eax,ecx
9f003297:	f7 ea                	imul   edx
9f003299:	c1 fa 05             	sar    edx,0x5
9f00329c:	89 c8                	mov    eax,ecx
9f00329e:	c1 f8 1f             	sar    eax,0x1f
9f0032a1:	29 c2                	sub    edx,eax
9f0032a3:	89 d0                	mov    eax,edx
9f0032a5:	6b c0 64             	imul   eax,eax,0x64
9f0032a8:	29 c1                	sub    ecx,eax
9f0032aa:	89 c8                	mov    eax,ecx
9f0032ac:	85 c0                	test   eax,eax
9f0032ae:	75 26                	jne    9f0032d6 <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 4)
9f0032b0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0032b3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0032b8:	89 c8                	mov    eax,ecx
9f0032ba:	f7 ea                	imul   edx
9f0032bc:	c1 fa 07             	sar    edx,0x7
9f0032bf:	89 c8                	mov    eax,ecx
9f0032c1:	c1 f8 1f             	sar    eax,0x1f
9f0032c4:	29 c2                	sub    edx,eax
9f0032c6:	89 d0                	mov    eax,edx
9f0032c8:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0032ce:	29 c1                	sub    ecx,eax
9f0032d0:	89 c8                	mov    eax,ecx
9f0032d2:	85 c0                	test   eax,eax
9f0032d4:	75 07                	jne    9f0032dd <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 5)
9f0032d6:	ba 01 00 00 00       	mov    edx,0x1
9f0032db:	eb 05                	jmp    9f0032e2 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 6)
9f0032dd:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
9f0032e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032e5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f0032e8:	89 d0                	mov    eax,edx
9f0032ea:	01 c0                	add    eax,eax
9f0032ec:	01 d0                	add    eax,edx
9f0032ee:	c1 e0 02             	shl    eax,0x2
9f0032f1:	01 c8                	add    eax,ecx
9f0032f3:	8b 84 83 1c fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2e4]
9f0032fa:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53 (discriminator 8)
    tmbuf->tm_mon++;
9f0032fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003300:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003303:	8d 50 01             	lea    edx,[eax+0x1]
9f003306:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003309:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f00330c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00330f:	83 e0 03             	and    eax,0x3
9f003312:	85 c0                	test   eax,eax
9f003314:	75 50                	jne    9f003366 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f003316:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003319:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00331e:	89 c8                	mov    eax,ecx
9f003320:	f7 ea                	imul   edx
9f003322:	c1 fa 05             	sar    edx,0x5
9f003325:	89 c8                	mov    eax,ecx
9f003327:	c1 f8 1f             	sar    eax,0x1f
9f00332a:	29 c2                	sub    edx,eax
9f00332c:	89 d0                	mov    eax,edx
9f00332e:	6b c0 64             	imul   eax,eax,0x64
9f003331:	29 c1                	sub    ecx,eax
9f003333:	89 c8                	mov    eax,ecx
9f003335:	85 c0                	test   eax,eax
9f003337:	75 26                	jne    9f00335f <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f003339:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00333c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003341:	89 c8                	mov    eax,ecx
9f003343:	f7 ea                	imul   edx
9f003345:	c1 fa 07             	sar    edx,0x7
9f003348:	89 c8                	mov    eax,ecx
9f00334a:	c1 f8 1f             	sar    eax,0x1f
9f00334d:	29 c2                	sub    edx,eax
9f00334f:	89 d0                	mov    eax,edx
9f003351:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003357:	29 c1                	sub    ecx,eax
9f003359:	89 c8                	mov    eax,ecx
9f00335b:	85 c0                	test   eax,eax
9f00335d:	75 07                	jne    9f003366 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f00335f:	ba 01 00 00 00       	mov    edx,0x1
9f003364:	eb 05                	jmp    9f00336b <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f003366:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f00336b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00336e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003371:	89 d0                	mov    eax,edx
9f003373:	01 c0                	add    eax,eax
9f003375:	01 d0                	add    eax,edx
9f003377:	c1 e0 02             	shl    eax,0x2
9f00337a:	01 c8                	add    eax,ecx
9f00337c:	8b 84 83 1c fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2e4]
9f003383:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003386:	0f 86 f7 fe ff ff    	jbe    9f003283 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f00338c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00338f:	83 c0 01             	add    eax,0x1
9f003392:	89 c2                	mov    edx,eax
9f003394:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003397:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  tmbuf->tm_isdst = 0;
9f00339a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00339d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
  return tmbuf;
9f0033a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
}
9f0033a7:	83 c4 10             	add    esp,0x10
9f0033aa:	5b                   	pop    ebx
9f0033ab:	5d                   	pop    ebp
9f0033ac:	c3                   	ret    

9f0033ad <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f0033ad:	55                   	push   ebp
9f0033ae:	89 e5                	mov    ebp,esp
9f0033b0:	e8 b2 09 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0033b5:	05 4f 2b 00 00       	add    eax,0x2b4f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
    return gmtime_rI(timer, tmbuf);
9f0033ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0033bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0033c0:	e8 cf fc ff ff       	call   9f003094 <gmtime_rI>
9f0033c5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
}
9f0033c8:	c9                   	leave  
9f0033c9:	c3                   	ret    

9f0033ca <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65

VISIBLE struct tm *localtime(const time_t *timer) {
9f0033ca:	55                   	push   ebp
9f0033cb:	89 e5                	mov    ebp,esp
9f0033cd:	53                   	push   ebx
9f0033ce:	83 ec 14             	sub    esp,0x14
9f0033d1:	e8 91 09 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f0033d6:	05 2e 2b 00 00       	add    eax,0x2b2e
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f0033db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0033de:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f0033e0:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f0033e6:	8b 12                	mov    edx,DWORD PTR [edx]
9f0033e8:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f0033ee:	01 ca                	add    edx,ecx
9f0033f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
9f0033f3:	83 ec 08             	sub    esp,0x8
9f0033f6:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
9f0033fc:	52                   	push   edx
9f0033fd:	8d 55 f4             	lea    edx,[ebp-0xc]
9f003400:	52                   	push   edx
9f003401:	89 c3                	mov    ebx,eax
9f003403:	e8 78 09 00 00       	call   9f003d80 <__x86.get_pc_thunk.ax+0x19>
9f003408:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f00340b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00340e:	c9                   	leave  
9f00340f:	c3                   	ret    

9f003410 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003410:	55                   	push   ebp
9f003411:	89 e5                	mov    ebp,esp
9f003413:	83 ec 10             	sub    esp,0x10
9f003416:	e8 4c 09 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00341b:	05 e9 2a 00 00       	add    eax,0x2ae9
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f003420:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003423:	8b 12                	mov    edx,DWORD PTR [edx]
9f003425:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f00342b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00342d:	29 c2                	sub    edx,eax
9f00342f:	89 d0                	mov    eax,edx
9f003431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f003434:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003437:	8d 45 fc             	lea    eax,[ebp-0x4]
9f00343a:	50                   	push   eax
9f00343b:	e8 54 fc ff ff       	call   9f003094 <gmtime_rI>
9f003440:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f003443:	c9                   	leave  
9f003444:	c3                   	ret    

9f003445 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f003445:	55                   	push   ebp
9f003446:	89 e5                	mov    ebp,esp
9f003448:	e8 1a 09 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f00344d:	05 b7 2a 00 00       	add    eax,0x2ab7
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f003452:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003455:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003458:	e8 b3 ff ff ff       	call   9f003410 <localtime_rI>
9f00345d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f003460:	c9                   	leave  
9f003461:	c3                   	ret    

9f003462 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f003462:	55                   	push   ebp
9f003463:	89 e5                	mov    ebp,esp
9f003465:	57                   	push   edi
9f003466:	56                   	push   esi
9f003467:	53                   	push   ebx
9f003468:	83 ec 20             	sub    esp,0x20
9f00346b:	e8 24 09 00 00       	call   9f003d94 <__x86.get_pc_thunk.cx>
9f003470:	81 c1 94 2a 00 00    	add    ecx,0x2a94
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f003476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003479:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f00347c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00347f:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003481:	ba 89 88 88 88       	mov    edx,0x88888889
9f003486:	89 d8                	mov    eax,ebx
9f003488:	f7 ea                	imul   edx
9f00348a:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00348d:	c1 f8 05             	sar    eax,0x5
9f003490:	89 c2                	mov    edx,eax
9f003492:	89 d8                	mov    eax,ebx
9f003494:	c1 f8 1f             	sar    eax,0x1f
9f003497:	29 c2                	sub    edx,eax
9f003499:	89 d0                	mov    eax,edx
9f00349b:	8d 14 06             	lea    edx,[esi+eax*1]
9f00349e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f0034a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034a7:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0034a9:	ba 89 88 88 88       	mov    edx,0x88888889
9f0034ae:	89 d8                	mov    eax,ebx
9f0034b0:	f7 ea                	imul   edx
9f0034b2:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0034b5:	c1 f8 05             	sar    eax,0x5
9f0034b8:	89 c2                	mov    edx,eax
9f0034ba:	89 d8                	mov    eax,ebx
9f0034bc:	c1 f8 1f             	sar    eax,0x1f
9f0034bf:	29 c2                	sub    edx,eax
9f0034c1:	89 d0                	mov    eax,edx
9f0034c3:	89 c2                	mov    edx,eax
9f0034c5:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0034cc:	89 c2                	mov    edx,eax
9f0034ce:	89 d0                	mov    eax,edx
9f0034d0:	c1 e0 04             	shl    eax,0x4
9f0034d3:	29 d0                	sub    eax,edx
9f0034d5:	29 c3                	sub    ebx,eax
9f0034d7:	89 d8                	mov    eax,ebx
9f0034d9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0034dc:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f0034de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034e1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0034e3:	85 c0                	test   eax,eax
9f0034e5:	79 1c                	jns    9f003503 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f0034e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034ea:	8b 00                	mov    eax,DWORD PTR [eax]
9f0034ec:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0034ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034f2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f0034f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0034fa:	8d 50 ff             	lea    edx,[eax-0x1]
9f0034fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003500:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f003503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003506:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f003509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00350c:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00350f:	ba 89 88 88 88       	mov    edx,0x88888889
9f003514:	89 d8                	mov    eax,ebx
9f003516:	f7 ea                	imul   edx
9f003518:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00351b:	c1 f8 05             	sar    eax,0x5
9f00351e:	89 c2                	mov    edx,eax
9f003520:	89 d8                	mov    eax,ebx
9f003522:	c1 f8 1f             	sar    eax,0x1f
9f003525:	29 c2                	sub    edx,eax
9f003527:	89 d0                	mov    eax,edx
9f003529:	8d 14 06             	lea    edx,[esi+eax*1]
9f00352c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00352f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f003532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003535:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f003538:	ba 89 88 88 88       	mov    edx,0x88888889
9f00353d:	89 d8                	mov    eax,ebx
9f00353f:	f7 ea                	imul   edx
9f003541:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003544:	c1 f8 05             	sar    eax,0x5
9f003547:	89 c2                	mov    edx,eax
9f003549:	89 d8                	mov    eax,ebx
9f00354b:	c1 f8 1f             	sar    eax,0x1f
9f00354e:	29 c2                	sub    edx,eax
9f003550:	89 d0                	mov    eax,edx
9f003552:	89 c2                	mov    edx,eax
9f003554:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f00355b:	89 c2                	mov    edx,eax
9f00355d:	89 d0                	mov    eax,edx
9f00355f:	c1 e0 04             	shl    eax,0x4
9f003562:	29 d0                	sub    eax,edx
9f003564:	29 c3                	sub    ebx,eax
9f003566:	89 d8                	mov    eax,ebx
9f003568:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00356b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f00356e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003571:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003574:	85 c0                	test   eax,eax
9f003576:	79 1e                	jns    9f003596 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f003578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00357b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00357e:	8d 50 3c             	lea    edx,[eax+0x3c]
9f003581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003584:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f003587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00358a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f00358d:	8d 50 ff             	lea    edx,[eax-0x1]
9f003590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003593:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f003596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003599:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f00359c:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0035a1:	89 d8                	mov    eax,ebx
9f0035a3:	f7 ea                	imul   edx
9f0035a5:	c1 fa 02             	sar    edx,0x2
9f0035a8:	89 d8                	mov    eax,ebx
9f0035aa:	c1 f8 1f             	sar    eax,0x1f
9f0035ad:	29 c2                	sub    edx,eax
9f0035af:	89 d0                	mov    eax,edx
9f0035b1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f0035b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035b7:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0035ba:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0035bf:	89 d8                	mov    eax,ebx
9f0035c1:	f7 ea                	imul   edx
9f0035c3:	c1 fa 02             	sar    edx,0x2
9f0035c6:	89 d8                	mov    eax,ebx
9f0035c8:	c1 f8 1f             	sar    eax,0x1f
9f0035cb:	29 c2                	sub    edx,eax
9f0035cd:	89 d0                	mov    eax,edx
9f0035cf:	01 c0                	add    eax,eax
9f0035d1:	01 d0                	add    eax,edx
9f0035d3:	c1 e0 03             	shl    eax,0x3
9f0035d6:	29 c3                	sub    ebx,eax
9f0035d8:	89 da                	mov    edx,ebx
9f0035da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035dd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f0035e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0035e6:	85 c0                	test   eax,eax
9f0035e8:	79 13                	jns    9f0035fd <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f0035ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0035f0:	8d 50 18             	lea    edx,[eax+0x18]
9f0035f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f0035f9:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f0035fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003600:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f003603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003606:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003609:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00360e:	89 d8                	mov    eax,ebx
9f003610:	f7 ea                	imul   edx
9f003612:	d1 fa                	sar    edx,1
9f003614:	89 d8                	mov    eax,ebx
9f003616:	c1 f8 1f             	sar    eax,0x1f
9f003619:	29 c2                	sub    edx,eax
9f00361b:	89 d0                	mov    eax,edx
9f00361d:	8d 14 06             	lea    edx,[esi+eax*1]
9f003620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003623:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f003626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003629:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f00362c:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f003631:	89 d8                	mov    eax,ebx
9f003633:	f7 ea                	imul   edx
9f003635:	d1 fa                	sar    edx,1
9f003637:	89 d8                	mov    eax,ebx
9f003639:	c1 f8 1f             	sar    eax,0x1f
9f00363c:	29 c2                	sub    edx,eax
9f00363e:	89 d0                	mov    eax,edx
9f003640:	01 c0                	add    eax,eax
9f003642:	01 d0                	add    eax,edx
9f003644:	c1 e0 02             	shl    eax,0x2
9f003647:	29 c3                	sub    ebx,eax
9f003649:	89 da                	mov    edx,ebx
9f00364b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00364e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f003651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003654:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003657:	85 c0                	test   eax,eax
9f003659:	79 1e                	jns    9f003679 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f00365b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00365e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003661:	8d 50 0c             	lea    edx,[eax+0xc]
9f003664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003667:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f00366a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00366d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003670:	8d 50 ff             	lea    edx,[eax-0x1]
9f003673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003676:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f003679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00367c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f00367f:	83 e8 01             	sub    eax,0x1
9f003682:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f003685:	e9 c1 00 00 00       	jmp    9f00374b <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f00368a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00368d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003690:	8d 50 ff             	lea    edx,[eax-0x1]
9f003693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003696:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f003699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00369c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00369f:	85 c0                	test   eax,eax
9f0036a1:	79 19                	jns    9f0036bc <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f0036a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0036a9:	8d 50 ff             	lea    edx,[eax-0x1]
9f0036ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036af:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f0036b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036b5:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0036bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036bf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0036c2:	83 e0 03             	and    eax,0x3
9f0036c5:	85 c0                	test   eax,eax
9f0036c7:	75 62                	jne    9f00372b <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f0036c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0036cf:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0036d5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0036da:	89 d8                	mov    eax,ebx
9f0036dc:	f7 ea                	imul   edx
9f0036de:	c1 fa 05             	sar    edx,0x5
9f0036e1:	89 d8                	mov    eax,ebx
9f0036e3:	c1 f8 1f             	sar    eax,0x1f
9f0036e6:	29 c2                	sub    edx,eax
9f0036e8:	89 d0                	mov    eax,edx
9f0036ea:	6b c0 64             	imul   eax,eax,0x64
9f0036ed:	29 c3                	sub    ebx,eax
9f0036ef:	89 d8                	mov    eax,ebx
9f0036f1:	85 c0                	test   eax,eax
9f0036f3:	75 2f                	jne    9f003724 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f0036f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0036fb:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003701:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003706:	89 d8                	mov    eax,ebx
9f003708:	f7 ea                	imul   edx
9f00370a:	c1 fa 07             	sar    edx,0x7
9f00370d:	89 d8                	mov    eax,ebx
9f00370f:	c1 f8 1f             	sar    eax,0x1f
9f003712:	29 c2                	sub    edx,eax
9f003714:	89 d0                	mov    eax,edx
9f003716:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00371c:	29 c3                	sub    ebx,eax
9f00371e:	89 d8                	mov    eax,ebx
9f003720:	85 c0                	test   eax,eax
9f003722:	75 07                	jne    9f00372b <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f003724:	ba 01 00 00 00       	mov    edx,0x1
9f003729:	eb 05                	jmp    9f003730 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f00372b:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f003730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003733:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003736:	89 d0                	mov    eax,edx
9f003738:	01 c0                	add    eax,eax
9f00373a:	01 d0                	add    eax,edx
9f00373c:	c1 e0 02             	shl    eax,0x2
9f00373f:	01 d8                	add    eax,ebx
9f003741:	8b 84 81 1c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2e4]
9f003748:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f00374b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00374f:	0f 88 35 ff ff ff    	js     9f00368a <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f003755:	e9 c2 00 00 00       	jmp    9f00381c <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f00375a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00375d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003760:	83 e0 03             	and    eax,0x3
9f003763:	85 c0                	test   eax,eax
9f003765:	75 62                	jne    9f0037c9 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f003767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00376a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00376d:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003773:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003778:	89 d8                	mov    eax,ebx
9f00377a:	f7 ea                	imul   edx
9f00377c:	c1 fa 05             	sar    edx,0x5
9f00377f:	89 d8                	mov    eax,ebx
9f003781:	c1 f8 1f             	sar    eax,0x1f
9f003784:	29 c2                	sub    edx,eax
9f003786:	89 d0                	mov    eax,edx
9f003788:	6b c0 64             	imul   eax,eax,0x64
9f00378b:	29 c3                	sub    ebx,eax
9f00378d:	89 d8                	mov    eax,ebx
9f00378f:	85 c0                	test   eax,eax
9f003791:	75 2f                	jne    9f0037c2 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f003793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003796:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003799:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00379f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0037a4:	89 d8                	mov    eax,ebx
9f0037a6:	f7 ea                	imul   edx
9f0037a8:	c1 fa 07             	sar    edx,0x7
9f0037ab:	89 d8                	mov    eax,ebx
9f0037ad:	c1 f8 1f             	sar    eax,0x1f
9f0037b0:	29 c2                	sub    edx,eax
9f0037b2:	89 d0                	mov    eax,edx
9f0037b4:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0037ba:	29 c3                	sub    ebx,eax
9f0037bc:	89 d8                	mov    eax,ebx
9f0037be:	85 c0                	test   eax,eax
9f0037c0:	75 07                	jne    9f0037c9 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f0037c2:	ba 01 00 00 00       	mov    edx,0x1
9f0037c7:	eb 05                	jmp    9f0037ce <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f0037c9:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f0037ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037d1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0037d4:	89 d0                	mov    eax,edx
9f0037d6:	01 c0                	add    eax,eax
9f0037d8:	01 d0                	add    eax,edx
9f0037da:	c1 e0 02             	shl    eax,0x2
9f0037dd:	01 d8                	add    eax,ebx
9f0037df:	8b 84 81 1c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2e4]
9f0037e6:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f0037e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0037ef:	8d 50 01             	lea    edx,[eax+0x1]
9f0037f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037f5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f0037f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0037fe:	83 f8 0c             	cmp    eax,0xc
9f003801:	75 19                	jne    9f00381c <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f003803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003806:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f00380d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003810:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003813:	8d 50 01             	lea    edx,[eax+0x1]
9f003816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003819:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f00381c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00381f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003822:	83 e0 03             	and    eax,0x3
9f003825:	85 c0                	test   eax,eax
9f003827:	75 62                	jne    9f00388b <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f003829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00382c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00382f:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003835:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00383a:	89 d8                	mov    eax,ebx
9f00383c:	f7 ea                	imul   edx
9f00383e:	c1 fa 05             	sar    edx,0x5
9f003841:	89 d8                	mov    eax,ebx
9f003843:	c1 f8 1f             	sar    eax,0x1f
9f003846:	29 c2                	sub    edx,eax
9f003848:	89 d0                	mov    eax,edx
9f00384a:	6b c0 64             	imul   eax,eax,0x64
9f00384d:	29 c3                	sub    ebx,eax
9f00384f:	89 d8                	mov    eax,ebx
9f003851:	85 c0                	test   eax,eax
9f003853:	75 2f                	jne    9f003884 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f003855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003858:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00385b:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003861:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003866:	89 d8                	mov    eax,ebx
9f003868:	f7 ea                	imul   edx
9f00386a:	c1 fa 07             	sar    edx,0x7
9f00386d:	89 d8                	mov    eax,ebx
9f00386f:	c1 f8 1f             	sar    eax,0x1f
9f003872:	29 c2                	sub    edx,eax
9f003874:	89 d0                	mov    eax,edx
9f003876:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00387c:	29 c3                	sub    ebx,eax
9f00387e:	89 d8                	mov    eax,ebx
9f003880:	85 c0                	test   eax,eax
9f003882:	75 07                	jne    9f00388b <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f003884:	ba 01 00 00 00       	mov    edx,0x1
9f003889:	eb 05                	jmp    9f003890 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f00388b:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f003890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003893:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003896:	89 d0                	mov    eax,edx
9f003898:	01 c0                	add    eax,eax
9f00389a:	01 d0                	add    eax,edx
9f00389c:	c1 e0 02             	shl    eax,0x2
9f00389f:	01 d8                	add    eax,ebx
9f0038a1:	8b 84 81 1c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2e4]
9f0038a8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0038ab:	0f 8e a9 fe ff ff    	jle    9f00375a <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f0038b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0038b4:	8d 50 01             	lea    edx,[eax+0x1]
9f0038b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f0038bd:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f0038c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038c7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0038ca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f0038cd:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f0038d3:	39 d0                	cmp    eax,edx
9f0038d5:	7d 0a                	jge    9f0038e1 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f0038d7:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f0038dc:	e9 d0 03 00 00       	jmp    9f003cb1 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f0038e1:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f0038e8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f0038ef:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f0038f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038f9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0038fc:	05 6c 07 00 00       	add    eax,0x76c
9f003901:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f003904:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003907:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00390a:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f00390f:	7e 07                	jle    9f003918 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f003911:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f003918:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00391b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00391e:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f003924:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f003927:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f00392c:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f00392f:	89 c2                	mov    edx,eax
9f003931:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003934:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003937:	8d 58 03             	lea    ebx,[eax+0x3]
9f00393a:	85 c0                	test   eax,eax
9f00393c:	0f 48 c3             	cmovs  eax,ebx
9f00393f:	c1 f8 02             	sar    eax,0x2
9f003942:	83 c0 01             	add    eax,0x1
9f003945:	39 c2                	cmp    edx,eax
9f003947:	7d 04                	jge    9f00394d <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f003949:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f00394d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003950:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003953:	8d 50 03             	lea    edx,[eax+0x3]
9f003956:	85 c0                	test   eax,eax
9f003958:	0f 48 c2             	cmovs  eax,edx
9f00395b:	c1 f8 02             	sar    eax,0x2
9f00395e:	89 c3                	mov    ebx,eax
9f003960:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003963:	83 e0 03             	and    eax,0x3
9f003966:	85 c0                	test   eax,eax
9f003968:	74 29                	je     9f003993 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f00396a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00396d:	99                   	cdq    
9f00396e:	c1 ea 1e             	shr    edx,0x1e
9f003971:	01 d0                	add    eax,edx
9f003973:	83 e0 03             	and    eax,0x3
9f003976:	29 d0                	sub    eax,edx
9f003978:	89 c6                	mov    esi,eax
9f00397a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00397d:	99                   	cdq    
9f00397e:	c1 ea 1e             	shr    edx,0x1e
9f003981:	01 d0                	add    eax,edx
9f003983:	83 e0 03             	and    eax,0x3
9f003986:	29 d0                	sub    eax,edx
9f003988:	39 c6                	cmp    esi,eax
9f00398a:	7d 07                	jge    9f003993 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f00398c:	b8 01 00 00 00       	mov    eax,0x1
9f003991:	eb 05                	jmp    9f003998 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f003993:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f003998:	01 d8                	add    eax,ebx
9f00399a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f00399d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0039a0:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0039a3:	89 c3                	mov    ebx,eax
9f0039a5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039aa:	89 d8                	mov    eax,ebx
9f0039ac:	f7 ea                	imul   edx
9f0039ae:	c1 fa 05             	sar    edx,0x5
9f0039b1:	89 d8                	mov    eax,ebx
9f0039b3:	c1 f8 1f             	sar    eax,0x1f
9f0039b6:	89 d7                	mov    edi,edx
9f0039b8:	29 c7                	sub    edi,eax
9f0039ba:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0039bd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039c2:	89 d8                	mov    eax,ebx
9f0039c4:	f7 ea                	imul   edx
9f0039c6:	c1 fa 05             	sar    edx,0x5
9f0039c9:	89 d8                	mov    eax,ebx
9f0039cb:	c1 f8 1f             	sar    eax,0x1f
9f0039ce:	29 c2                	sub    edx,eax
9f0039d0:	89 d0                	mov    eax,edx
9f0039d2:	6b c0 64             	imul   eax,eax,0x64
9f0039d5:	29 c3                	sub    ebx,eax
9f0039d7:	89 d8                	mov    eax,ebx
9f0039d9:	85 c0                	test   eax,eax
9f0039db:	74 49                	je     9f003a26 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f0039dd:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0039e0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039e5:	89 d8                	mov    eax,ebx
9f0039e7:	f7 ea                	imul   edx
9f0039e9:	c1 fa 05             	sar    edx,0x5
9f0039ec:	89 d8                	mov    eax,ebx
9f0039ee:	c1 f8 1f             	sar    eax,0x1f
9f0039f1:	89 d6                	mov    esi,edx
9f0039f3:	29 c6                	sub    esi,eax
9f0039f5:	6b c6 64             	imul   eax,esi,0x64
9f0039f8:	89 de                	mov    esi,ebx
9f0039fa:	29 c6                	sub    esi,eax
9f0039fc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f0039ff:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a04:	89 d8                	mov    eax,ebx
9f003a06:	f7 ea                	imul   edx
9f003a08:	c1 fa 05             	sar    edx,0x5
9f003a0b:	89 d8                	mov    eax,ebx
9f003a0d:	c1 f8 1f             	sar    eax,0x1f
9f003a10:	29 c2                	sub    edx,eax
9f003a12:	89 d0                	mov    eax,edx
9f003a14:	6b c0 64             	imul   eax,eax,0x64
9f003a17:	29 c3                	sub    ebx,eax
9f003a19:	89 d8                	mov    eax,ebx
9f003a1b:	39 c6                	cmp    esi,eax
9f003a1d:	7d 07                	jge    9f003a26 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f003a1f:	b8 01 00 00 00       	mov    eax,0x1
9f003a24:	eb 05                	jmp    9f003a2b <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f003a26:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f003a2b:	01 f8                	add    eax,edi
9f003a2d:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f003a30:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003a33:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003a36:	89 c3                	mov    ebx,eax
9f003a38:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a3d:	89 d8                	mov    eax,ebx
9f003a3f:	f7 ea                	imul   edx
9f003a41:	c1 fa 07             	sar    edx,0x7
9f003a44:	89 d8                	mov    eax,ebx
9f003a46:	c1 f8 1f             	sar    eax,0x1f
9f003a49:	89 d7                	mov    edi,edx
9f003a4b:	29 c7                	sub    edi,eax
9f003a4d:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003a50:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a55:	89 d8                	mov    eax,ebx
9f003a57:	f7 ea                	imul   edx
9f003a59:	c1 fa 07             	sar    edx,0x7
9f003a5c:	89 d8                	mov    eax,ebx
9f003a5e:	c1 f8 1f             	sar    eax,0x1f
9f003a61:	29 c2                	sub    edx,eax
9f003a63:	89 d0                	mov    eax,edx
9f003a65:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003a6b:	29 c3                	sub    ebx,eax
9f003a6d:	89 d8                	mov    eax,ebx
9f003a6f:	85 c0                	test   eax,eax
9f003a71:	74 4f                	je     9f003ac2 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f003a73:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003a76:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a7b:	89 d8                	mov    eax,ebx
9f003a7d:	f7 ea                	imul   edx
9f003a7f:	c1 fa 07             	sar    edx,0x7
9f003a82:	89 d8                	mov    eax,ebx
9f003a84:	c1 f8 1f             	sar    eax,0x1f
9f003a87:	89 d6                	mov    esi,edx
9f003a89:	29 c6                	sub    esi,eax
9f003a8b:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f003a91:	89 de                	mov    esi,ebx
9f003a93:	29 c6                	sub    esi,eax
9f003a95:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f003a98:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003a9d:	89 d8                	mov    eax,ebx
9f003a9f:	f7 ea                	imul   edx
9f003aa1:	c1 fa 07             	sar    edx,0x7
9f003aa4:	89 d8                	mov    eax,ebx
9f003aa6:	c1 f8 1f             	sar    eax,0x1f
9f003aa9:	29 c2                	sub    edx,eax
9f003aab:	89 d0                	mov    eax,edx
9f003aad:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003ab3:	29 c3                	sub    ebx,eax
9f003ab5:	89 d8                	mov    eax,ebx
9f003ab7:	39 c6                	cmp    esi,eax
9f003ab9:	7d 07                	jge    9f003ac2 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f003abb:	b8 01 00 00 00       	mov    eax,0x1
9f003ac0:	eb 05                	jmp    9f003ac7 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f003ac2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f003ac7:	01 f8                	add    eax,edi
9f003ac9:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f003acc:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f003ad3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003ad6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f003ad9:	eb 7b                	jmp    9f003b56 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f003adb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003ade:	83 e0 03             	and    eax,0x3
9f003ae1:	85 c0                	test   eax,eax
9f003ae3:	75 50                	jne    9f003b35 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f003ae5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003ae8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003aed:	89 d8                	mov    eax,ebx
9f003aef:	f7 ea                	imul   edx
9f003af1:	c1 fa 05             	sar    edx,0x5
9f003af4:	89 d8                	mov    eax,ebx
9f003af6:	c1 f8 1f             	sar    eax,0x1f
9f003af9:	29 c2                	sub    edx,eax
9f003afb:	89 d0                	mov    eax,edx
9f003afd:	6b c0 64             	imul   eax,eax,0x64
9f003b00:	29 c3                	sub    ebx,eax
9f003b02:	89 d8                	mov    eax,ebx
9f003b04:	85 c0                	test   eax,eax
9f003b06:	75 26                	jne    9f003b2e <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f003b08:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003b0b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b10:	89 d8                	mov    eax,ebx
9f003b12:	f7 ea                	imul   edx
9f003b14:	c1 fa 07             	sar    edx,0x7
9f003b17:	89 d8                	mov    eax,ebx
9f003b19:	c1 f8 1f             	sar    eax,0x1f
9f003b1c:	29 c2                	sub    edx,eax
9f003b1e:	89 d0                	mov    eax,edx
9f003b20:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003b26:	29 c3                	sub    ebx,eax
9f003b28:	89 d8                	mov    eax,ebx
9f003b2a:	85 c0                	test   eax,eax
9f003b2c:	75 07                	jne    9f003b35 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f003b2e:	ba 01 00 00 00       	mov    edx,0x1
9f003b33:	eb 05                	jmp    9f003b3a <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f003b35:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f003b3a:	89 d0                	mov    eax,edx
9f003b3c:	01 c0                	add    eax,eax
9f003b3e:	01 d0                	add    eax,edx
9f003b40:	c1 e0 02             	shl    eax,0x2
9f003b43:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f003b46:	01 d0                	add    eax,edx
9f003b48:	8b 84 81 1c fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2e4]
9f003b4f:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f003b52:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f003b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003b5c:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003b5f:	0f 8f 76 ff ff ff    	jg     9f003adb <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f003b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f003b6b:	83 e8 01             	sub    eax,0x1
9f003b6e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f003b71:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003b74:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003b77:	01 d0                	add    eax,edx
9f003b79:	85 c0                	test   eax,eax
9f003b7b:	79 04                	jns    9f003b81 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f003b7d:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f003b81:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003b84:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f003b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b8a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003b8d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f003b90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003b93:	8d 58 04             	lea    ebx,[eax+0x4]
9f003b96:	ba 93 24 49 92       	mov    edx,0x92492493
9f003b9b:	89 d8                	mov    eax,ebx
9f003b9d:	f7 ea                	imul   edx
9f003b9f:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003ba2:	c1 f8 02             	sar    eax,0x2
9f003ba5:	89 c2                	mov    edx,eax
9f003ba7:	89 d8                	mov    eax,ebx
9f003ba9:	c1 f8 1f             	sar    eax,0x1f
9f003bac:	29 c2                	sub    edx,eax
9f003bae:	89 d0                	mov    eax,edx
9f003bb0:	89 c2                	mov    edx,eax
9f003bb2:	c1 e2 03             	shl    edx,0x3
9f003bb5:	29 c2                	sub    edx,eax
9f003bb7:	89 d8                	mov    eax,ebx
9f003bb9:	29 d0                	sub    eax,edx
9f003bbb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003bbe:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f003bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f003bc7:	c1 e0 02             	shl    eax,0x2
9f003bca:	89 c2                	mov    edx,eax
9f003bcc:	c1 e2 04             	shl    edx,0x4
9f003bcf:	29 c2                	sub    edx,eax
9f003bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003bd7:	01 d0                	add    eax,edx
9f003bd9:	c1 e0 02             	shl    eax,0x2
9f003bdc:	89 c2                	mov    edx,eax
9f003bde:	c1 e2 04             	shl    edx,0x4
9f003be1:	29 c2                	sub    edx,eax
9f003be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003be6:	8b 00                	mov    eax,DWORD PTR [eax]
9f003be8:	01 d0                	add    eax,edx
9f003bea:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f003bed:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f003bf2:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f003bf5:	89 c3                	mov    ebx,eax
9f003bf7:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003bfc:	89 d8                	mov    eax,ebx
9f003bfe:	f7 ea                	imul   edx
9f003c00:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003c03:	c1 f8 10             	sar    eax,0x10
9f003c06:	89 c2                	mov    edx,eax
9f003c08:	89 d8                	mov    eax,ebx
9f003c0a:	c1 f8 1f             	sar    eax,0x1f
9f003c0d:	29 c2                	sub    edx,eax
9f003c0f:	89 d0                	mov    eax,edx
9f003c11:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003c14:	7d 04                	jge    9f003c1a <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f003c16:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f003c1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003c1d:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003c23:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003c26:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003c2c:	8b 00                	mov    eax,DWORD PTR [eax]
9f003c2e:	85 c0                	test   eax,eax
9f003c30:	7e 16                	jle    9f003c48 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f003c32:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003c38:	8b 00                	mov    eax,DWORD PTR [eax]
9f003c3a:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f003c3f:	29 c2                	sub    edx,eax
9f003c41:	89 d0                	mov    eax,edx
9f003c43:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003c46:	7c 1b                	jl     9f003c63 <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003c48:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003c4e:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003c50:	85 c0                	test   eax,eax
9f003c52:	79 13                	jns    9f003c67 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003c54:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003c5a:	8b 00                	mov    eax,DWORD PTR [eax]
9f003c5c:	f7 d8                	neg    eax
9f003c5e:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003c61:	7e 04                	jle    9f003c67 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f003c63:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f003c67:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003c6d:	8b 00                	mov    eax,DWORD PTR [eax]
9f003c6f:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f003c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f003c78:	85 c0                	test   eax,eax
9f003c7a:	74 0b                	je     9f003c87 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f003c7c:	8b 81 8c 00 00 00    	mov    eax,DWORD PTR [ecx+0x8c]
9f003c82:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f003c85:	eb 07                	jmp    9f003c8e <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f003c87:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f003c8e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003c91:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003c94:	7e 04                	jle    9f003c9a <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f003c96:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f003c9a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003c9d:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f003ca0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f003ca4:	74 08                	je     9f003cae <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f003ca6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003ca9:	83 e8 02             	sub    eax,0x2
9f003cac:	eb 03                	jmp    9f003cb1 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f003cae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f003cb1:	83 c4 20             	add    esp,0x20
9f003cb4:	5b                   	pop    ebx
9f003cb5:	5e                   	pop    esi
9f003cb6:	5f                   	pop    edi
9f003cb7:	5d                   	pop    ebp
9f003cb8:	c3                   	ret    

9f003cb9 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f003cb9:	55                   	push   ebp
9f003cba:	89 e5                	mov    ebp,esp
9f003cbc:	56                   	push   esi
9f003cbd:	53                   	push   ebx
9f003cbe:	83 ec 14             	sub    esp,0x14
9f003cc1:	e8 a1 00 00 00       	call   9f003d67 <__x86.get_pc_thunk.ax>
9f003cc6:	05 3e 22 00 00       	add    eax,0x223e
9f003ccb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003cce:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f003cd1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f003cd8:	b8 71 01 00 00       	mov    eax,0x171
9f003cdd:	bb 00 00 00 00       	mov    ebx,0x0
9f003ce2:	b9 00 00 00 00       	mov    ecx,0x0
9f003ce7:	ba 00 00 00 00       	mov    edx,0x0
9f003cec:	be 00 00 00 00       	mov    esi,0x0
9f003cf1:	e8 fc ff ff ff       	call   9f003cf2 <gettime+0x39>
9f003cf6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f003cf9:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f003cfd:	74 11                	je     9f003d10 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f003cff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003d02:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003d05:	50                   	push   eax
9f003d06:	e8 05 f7 ff ff       	call   9f003410 <localtime_rI>
9f003d0b:	83 c4 08             	add    esp,0x8
9f003d0e:	eb 0f                	jmp    9f003d1f <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f003d10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003d13:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003d16:	50                   	push   eax
9f003d17:	e8 78 f3 ff ff       	call   9f003094 <gmtime_rI>
9f003d1c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f003d1f:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003d22:	5b                   	pop    ebx
9f003d23:	5e                   	pop    esi
9f003d24:	5d                   	pop    ebp
9f003d25:	c3                   	ret    

9f003d26 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203

VISIBLE time_t time (time_t *result)
{
9f003d26:	55                   	push   ebp
9f003d27:	89 e5                	mov    ebp,esp
9f003d29:	53                   	push   ebx
9f003d2a:	83 ec 14             	sub    esp,0x14
9f003d2d:	e8 5e 00 00 00       	call   9f003d90 <__x86.get_pc_thunk.bx>
9f003d32:	81 c3 d2 21 00 00    	add    ebx,0x21d2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:204
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f003d38:	83 ec 0c             	sub    esp,0xc
9f003d3b:	68 71 01 00 00       	push   0x171
9f003d40:	e8 3b ce ff ff       	call   9f000b80 <do_syscall0>
9f003d45:	83 c4 10             	add    esp,0x10
9f003d48:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:205
    memcpyI(result, &ticks, 4);
9f003d4b:	83 ec 04             	sub    esp,0x4
9f003d4e:	6a 04                	push   0x4
9f003d50:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003d53:	50                   	push   eax
9f003d54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003d57:	e8 a8 dd ff ff       	call   9f001b04 <memcpyI>
9f003d5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206
    return ticks;
9f003d5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
9f003d62:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003d65:	c9                   	leave  
9f003d66:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f003d67 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f003d67:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f003d6a:	c3                   	ret    

Disassembly of section .plt:

9f003d70 <.plt>:
9f003d70:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f003d76:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f003d7c:	00 00                	add    BYTE PTR [eax],al
9f003d7e:	00 00                	add    BYTE PTR [eax],al
9f003d80:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f003d86:	68 00 00 00 00       	push   0x0
9f003d8b:	e9 e0 ff ff ff       	jmp    9f003d70 <__x86.get_pc_thunk.ax+0x9>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f003d90 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f003d90:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f003d93:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f003d94 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f003d94:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f003d97:	c3                   	ret    

Disassembly of section .eh_frame:

9f003d98 <.eh_frame>:
9f003d98:	14 00                	adc    al,0x0
9f003d9a:	00 00                	add    BYTE PTR [eax],al
9f003d9c:	00 00                	add    BYTE PTR [eax],al
9f003d9e:	00 00                	add    BYTE PTR [eax],al
9f003da0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f003da3:	00 01                	add    BYTE PTR [ecx],al
9f003da5:	7c 08                	jl     9f003daf <__x86.get_pc_thunk.cx+0x1b>
9f003da7:	01 1b                	add    DWORD PTR [ebx],ebx
9f003da9:	0c 04                	or     al,0x4
9f003dab:	04 88                	add    al,0x88
9f003dad:	01 00                	add    DWORD PTR [eax],eax
9f003daf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003db2:	00 00                	add    BYTE PTR [eax],al
9f003db4:	1c 00                	sbb    al,0x0
9f003db6:	00 00                	add    BYTE PTR [eax],al
9f003db8:	48                   	dec    eax
9f003db9:	c2 ff ff             	ret    0xffff
9f003dbc:	38 00                	cmp    BYTE PTR [eax],al
9f003dbe:	00 00                	add    BYTE PTR [eax],al
9f003dc0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003dc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003dc9:	74 c5                	je     9f003d90 <__x86.get_pc_thunk.bx>
9f003dcb:	0c 04                	or     al,0x4
9f003dcd:	04 00                	add    al,0x0
9f003dcf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003dd2:	00 00                	add    BYTE PTR [eax],al
9f003dd4:	3c 00                	cmp    al,0x0
9f003dd6:	00 00                	add    BYTE PTR [eax],al
9f003dd8:	60                   	pusha  
9f003dd9:	c2 ff ff             	ret    0xffff
9f003ddc:	38 00                	cmp    BYTE PTR [eax],al
9f003dde:	00 00                	add    BYTE PTR [eax],al
9f003de0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003de3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003de9:	74 c5                	je     9f003db0 <__x86.get_pc_thunk.cx+0x1c>
9f003deb:	0c 04                	or     al,0x4
9f003ded:	04 00                	add    al,0x0
9f003def:	00 10                	add    BYTE PTR [eax],dl
9f003df1:	00 00                	add    BYTE PTR [eax],al
9f003df3:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f003df7:	00 6f ff             	add    BYTE PTR [edi-0x1],ch
9f003dfa:	ff                   	(bad)  
9f003dfb:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f003dfe:	00 00                	add    BYTE PTR [eax],al
9f003e00:	00 00                	add    BYTE PTR [eax],al
9f003e02:	00 00                	add    BYTE PTR [eax],al
9f003e04:	24 00                	and    al,0x0
9f003e06:	00 00                	add    BYTE PTR [eax],al
9f003e08:	70 00                	jo     9f003e0a <__x86.get_pc_thunk.cx+0x76>
9f003e0a:	00 00                	add    BYTE PTR [eax],al
9f003e0c:	64                   	fs
9f003e0d:	c2 ff ff             	ret    0xffff
9f003e10:	55                   	push   ebp
9f003e11:	00 00                	add    BYTE PTR [eax],al
9f003e13:	00 00                	add    BYTE PTR [eax],al
9f003e15:	41                   	inc    ecx
9f003e16:	0e                   	push   cs
9f003e17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e1d:	42                   	inc    edx
9f003e1e:	86 03                	xchg   BYTE PTR [ebx],al
9f003e20:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003e24:	c3                   	ret    
9f003e25:	41                   	inc    ecx
9f003e26:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003e2a:	04 04                	add    al,0x4
9f003e2c:	24 00                	and    al,0x0
9f003e2e:	00 00                	add    BYTE PTR [eax],al
9f003e30:	98                   	cwde   
9f003e31:	00 00                	add    BYTE PTR [eax],al
9f003e33:	00 91 c2 ff ff 55    	add    BYTE PTR [ecx+0x55ffffc2],dl
9f003e39:	00 00                	add    BYTE PTR [eax],al
9f003e3b:	00 00                	add    BYTE PTR [eax],al
9f003e3d:	41                   	inc    ecx
9f003e3e:	0e                   	push   cs
9f003e3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e45:	42                   	inc    edx
9f003e46:	86 03                	xchg   BYTE PTR [ebx],al
9f003e48:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003e4c:	c3                   	ret    
9f003e4d:	41                   	inc    ecx
9f003e4e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003e52:	04 04                	add    al,0x4
9f003e54:	24 00                	and    al,0x0
9f003e56:	00 00                	add    BYTE PTR [eax],al
9f003e58:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f003e5b:	00 c0                	add    al,al
9f003e5d:	c2 ff ff             	ret    0xffff
9f003e60:	97                   	xchg   edi,eax
9f003e61:	00 00                	add    BYTE PTR [eax],al
9f003e63:	00 00                	add    BYTE PTR [eax],al
9f003e65:	41                   	inc    ecx
9f003e66:	0e                   	push   cs
9f003e67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e6d:	42                   	inc    edx
9f003e6e:	86 03                	xchg   BYTE PTR [ebx],al
9f003e70:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f003e74:	c3                   	ret    
9f003e75:	41                   	inc    ecx
9f003e76:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003e7a:	04 04                	add    al,0x4
9f003e7c:	10 00                	adc    BYTE PTR [eax],al
9f003e7e:	00 00                	add    BYTE PTR [eax],al
9f003e80:	e8 00 00 00 0c       	call   ab003e85 <tmbuf+0xbffdec5>
9f003e85:	ff                   	(bad)  
9f003e86:	ff                   	(bad)  
9f003e87:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f003e8a:	00 00                	add    BYTE PTR [eax],al
9f003e8c:	00 00                	add    BYTE PTR [eax],al
9f003e8e:	00 00                	add    BYTE PTR [eax],al
9f003e90:	20 00                	and    BYTE PTR [eax],al
9f003e92:	00 00                	add    BYTE PTR [eax],al
9f003e94:	fc                   	cld    
9f003e95:	00 00                	add    BYTE PTR [eax],al
9f003e97:	00 1c c3             	add    BYTE PTR [ebx+eax*8],bl
9f003e9a:	ff                   	(bad)  
9f003e9b:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f003e9e:	00 00                	add    BYTE PTR [eax],al
9f003ea0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003ea3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ea9:	44                   	inc    esp
9f003eaa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003ead:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f003eae:	c5 c3 0c             	(bad)  
9f003eb1:	04 04                	add    al,0x4
9f003eb3:	00 20                	add    BYTE PTR [eax],ah
9f003eb5:	00 00                	add    BYTE PTR [eax],al
9f003eb7:	00 20                	add    BYTE PTR [eax],ah
9f003eb9:	01 00                	add    DWORD PTR [eax],eax
9f003ebb:	00 6f c3             	add    BYTE PTR [edi-0x3d],ch
9f003ebe:	ff                   	(bad)  
9f003ebf:	ff                   	(bad)  
9f003ec0:	bb 00 00 00 00       	mov    ebx,0x0
9f003ec5:	41                   	inc    ecx
9f003ec6:	0e                   	push   cs
9f003ec7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ecd:	44                   	inc    esp
9f003ece:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003ed1:	b3 c5                	mov    bl,0xc5
9f003ed3:	c3                   	ret    
9f003ed4:	0c 04                	or     al,0x4
9f003ed6:	04 00                	add    al,0x0
9f003ed8:	20 00                	and    BYTE PTR [eax],al
9f003eda:	00 00                	add    BYTE PTR [eax],al
9f003edc:	44                   	inc    esp
9f003edd:	01 00                	add    DWORD PTR [eax],eax
9f003edf:	00 06                	add    BYTE PTR [esi],al
9f003ee1:	c4                   	(bad)  
9f003ee2:	ff                   	(bad)  
9f003ee3:	ff                   	(bad)  
9f003ee4:	bb 00 00 00 00       	mov    ebx,0x0
9f003ee9:	41                   	inc    ecx
9f003eea:	0e                   	push   cs
9f003eeb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ef1:	44                   	inc    esp
9f003ef2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003ef5:	b3 c5                	mov    bl,0xc5
9f003ef7:	c3                   	ret    
9f003ef8:	0c 04                	or     al,0x4
9f003efa:	04 00                	add    al,0x0
9f003efc:	1c 00                	sbb    al,0x0
9f003efe:	00 00                	add    BYTE PTR [eax],al
9f003f00:	68 01 00 00 9d       	push   0x9d000001
9f003f05:	c4                   	(bad)  
9f003f06:	ff                   	(bad)  
9f003f07:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
9f003f0b:	00 00                	add    BYTE PTR [eax],al
9f003f0d:	41                   	inc    ecx
9f003f0e:	0e                   	push   cs
9f003f0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f15:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f003f18:	0c 04                	or     al,0x4
9f003f1a:	04 00                	add    al,0x0
9f003f1c:	20 00                	and    BYTE PTR [eax],al
9f003f1e:	00 00                	add    BYTE PTR [eax],al
9f003f20:	88 01                	mov    BYTE PTR [ecx],al
9f003f22:	00 00                	add    BYTE PTR [eax],al
9f003f24:	dc c4                	fadd   st(4),st
9f003f26:	ff                   	(bad)  
9f003f27:	ff                   	(bad)  
9f003f28:	ba 00 00 00 00       	mov    edx,0x0
9f003f2d:	41                   	inc    ecx
9f003f2e:	0e                   	push   cs
9f003f2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f35:	44                   	inc    esp
9f003f36:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f39:	b2 c5                	mov    dl,0xc5
9f003f3b:	c3                   	ret    
9f003f3c:	0c 04                	or     al,0x4
9f003f3e:	04 00                	add    al,0x0
9f003f40:	20 00                	and    BYTE PTR [eax],al
9f003f42:	00 00                	add    BYTE PTR [eax],al
9f003f44:	ac                   	lods   al,BYTE PTR ds:[esi]
9f003f45:	01 00                	add    DWORD PTR [eax],eax
9f003f47:	00 72 c5             	add    BYTE PTR [edx-0x3b],dh
9f003f4a:	ff                   	(bad)  
9f003f4b:	ff 5a 00             	call   FWORD PTR [edx+0x0]
9f003f4e:	00 00                	add    BYTE PTR [eax],al
9f003f50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003f53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f59:	44                   	inc    esp
9f003f5a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f5d:	52                   	push   edx
9f003f5e:	c5 c3 0c             	(bad)  
9f003f61:	04 04                	add    al,0x4
9f003f63:	00 20                	add    BYTE PTR [eax],ah
9f003f65:	00 00                	add    BYTE PTR [eax],al
9f003f67:	00 d0                	add    al,dl
9f003f69:	01 00                	add    DWORD PTR [eax],eax
9f003f6b:	00 a8 c5 ff ff 5a    	add    BYTE PTR [eax+0x5affffc5],ch
9f003f71:	00 00                	add    BYTE PTR [eax],al
9f003f73:	00 00                	add    BYTE PTR [eax],al
9f003f75:	41                   	inc    ecx
9f003f76:	0e                   	push   cs
9f003f77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f7d:	44                   	inc    esp
9f003f7e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f81:	52                   	push   edx
9f003f82:	c5 c3 0c             	(bad)  
9f003f85:	04 04                	add    al,0x4
9f003f87:	00 20                	add    BYTE PTR [eax],ah
9f003f89:	00 00                	add    BYTE PTR [eax],al
9f003f8b:	00 f4                	add    ah,dh
9f003f8d:	01 00                	add    DWORD PTR [eax],eax
9f003f8f:	00 e0                	add    al,ah
9f003f91:	c5 ff ff             	(bad)  
9f003f94:	aa                   	stos   BYTE PTR es:[edi],al
9f003f95:	00 00                	add    BYTE PTR [eax],al
9f003f97:	00 00                	add    BYTE PTR [eax],al
9f003f99:	41                   	inc    ecx
9f003f9a:	0e                   	push   cs
9f003f9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fa1:	44                   	inc    esp
9f003fa2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003fa5:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f003faa:	04 00                	add    al,0x0
9f003fac:	20 00                	and    BYTE PTR [eax],al
9f003fae:	00 00                	add    BYTE PTR [eax],al
9f003fb0:	18 02                	sbb    BYTE PTR [edx],al
9f003fb2:	00 00                	add    BYTE PTR [eax],al
9f003fb4:	66                   	data16
9f003fb5:	c6                   	(bad)  
9f003fb6:	ff                   	(bad)  
9f003fb7:	ff c1                	inc    ecx
9f003fb9:	01 00                	add    DWORD PTR [eax],eax
9f003fbb:	00 00                	add    BYTE PTR [eax],al
9f003fbd:	41                   	inc    ecx
9f003fbe:	0e                   	push   cs
9f003fbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fc5:	44                   	inc    esp
9f003fc6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003fc9:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f003fce:	04 04                	add    al,0x4
9f003fd0:	20 00                	and    BYTE PTR [eax],al
9f003fd2:	00 00                	add    BYTE PTR [eax],al
9f003fd4:	3c 02                	cmp    al,0x2
9f003fd6:	00 00                	add    BYTE PTR [eax],al
9f003fd8:	04 c8                	add    al,0xc8
9f003fda:	ff                   	(bad)  
9f003fdb:	ff 31                	push   DWORD PTR [ecx]
9f003fdd:	00 00                	add    BYTE PTR [eax],al
9f003fdf:	00 00                	add    BYTE PTR [eax],al
9f003fe1:	41                   	inc    ecx
9f003fe2:	0e                   	push   cs
9f003fe3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fe9:	44                   	inc    esp
9f003fea:	83 03 69             	add    DWORD PTR [ebx],0x69
9f003fed:	c5 c3 0c             	(bad)  
9f003ff0:	04 04                	add    al,0x4
9f003ff2:	00 00                	add    BYTE PTR [eax],al
9f003ff4:	20 00                	and    BYTE PTR [eax],al
9f003ff6:	00 00                	add    BYTE PTR [eax],al
9f003ff8:	60                   	pusha  
9f003ff9:	02 00                	add    al,BYTE PTR [eax]
9f003ffb:	00 11                	add    BYTE PTR [ecx],dl
9f003ffd:	c8 ff ff 2d          	enter  0xffff,0x2d
9f004001:	00 00                	add    BYTE PTR [eax],al
9f004003:	00 00                	add    BYTE PTR [eax],al
9f004005:	41                   	inc    ecx
9f004006:	0e                   	push   cs
9f004007:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00400d:	44                   	inc    esp
9f00400e:	83 03 65             	add    DWORD PTR [ebx],0x65
9f004011:	c5 c3 0c             	(bad)  
9f004014:	04 04                	add    al,0x4
9f004016:	00 00                	add    BYTE PTR [eax],al
9f004018:	20 00                	and    BYTE PTR [eax],al
9f00401a:	00 00                	add    BYTE PTR [eax],al
9f00401c:	84 02                	test   BYTE PTR [edx],al
9f00401e:	00 00                	add    BYTE PTR [eax],al
9f004020:	1a c8                	sbb    cl,al
9f004022:	ff                   	(bad)  
9f004023:	ff 2a                	jmp    FWORD PTR [edx]
9f004025:	00 00                	add    BYTE PTR [eax],al
9f004027:	00 00                	add    BYTE PTR [eax],al
9f004029:	41                   	inc    ecx
9f00402a:	0e                   	push   cs
9f00402b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004031:	44                   	inc    esp
9f004032:	83 03 62             	add    DWORD PTR [ebx],0x62
9f004035:	c5 c3 0c             	(bad)  
9f004038:	04 04                	add    al,0x4
9f00403a:	00 00                	add    BYTE PTR [eax],al
9f00403c:	24 00                	and    al,0x0
9f00403e:	00 00                	add    BYTE PTR [eax],al
9f004040:	a8 02                	test   al,0x2
9f004042:	00 00                	add    BYTE PTR [eax],al
9f004044:	20 c8                	and    al,cl
9f004046:	ff                   	(bad)  
9f004047:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f00404d:	41                   	inc    ecx
9f00404e:	0e                   	push   cs
9f00404f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004055:	42                   	inc    edx
9f004056:	86 03                	xchg   BYTE PTR [ebx],al
9f004058:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f00405f:	c5 
9f004060:	0c 04                	or     al,0x4
9f004062:	04 00                	add    al,0x0
9f004064:	24 00                	and    al,0x0
9f004066:	00 00                	add    BYTE PTR [eax],al
9f004068:	d0 02                	rol    BYTE PTR [edx],1
9f00406a:	00 00                	add    BYTE PTR [eax],al
9f00406c:	2d c8 ff ff 35       	sub    eax,0x35ffffc8
9f004071:	00 00                	add    BYTE PTR [eax],al
9f004073:	00 00                	add    BYTE PTR [eax],al
9f004075:	41                   	inc    ecx
9f004076:	0e                   	push   cs
9f004077:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00407d:	42                   	inc    edx
9f00407e:	86 03                	xchg   BYTE PTR [ebx],al
9f004080:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004087:	c5 
9f004088:	0c 04                	or     al,0x4
9f00408a:	04 00                	add    al,0x0
9f00408c:	1c 00                	sbb    al,0x0
9f00408e:	00 00                	add    BYTE PTR [eax],al
9f004090:	f8                   	clc    
9f004091:	02 00                	add    al,BYTE PTR [eax]
9f004093:	00 3a                	add    BYTE PTR [edx],bh
9f004095:	c8 ff ff 26          	enter  0xffff,0x26
9f004099:	00 00                	add    BYTE PTR [eax],al
9f00409b:	00 00                	add    BYTE PTR [eax],al
9f00409d:	41                   	inc    ecx
9f00409e:	0e                   	push   cs
9f00409f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040a5:	62                   	(bad)  
9f0040a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0040a9:	04 00                	add    al,0x0
9f0040ab:	00 20                	add    BYTE PTR [eax],ah
9f0040ad:	00 00                	add    BYTE PTR [eax],al
9f0040af:	00 18                	add    BYTE PTR [eax],bl
9f0040b1:	03 00                	add    eax,DWORD PTR [eax]
9f0040b3:	00 40 c8             	add    BYTE PTR [eax-0x38],al
9f0040b6:	ff                   	(bad)  
9f0040b7:	ff 2e                	jmp    FWORD PTR [esi]
9f0040b9:	00 00                	add    BYTE PTR [eax],al
9f0040bb:	00 00                	add    BYTE PTR [eax],al
9f0040bd:	41                   	inc    ecx
9f0040be:	0e                   	push   cs
9f0040bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040c5:	44                   	inc    esp
9f0040c6:	83 03 66             	add    DWORD PTR [ebx],0x66
9f0040c9:	c5 c3 0c             	(bad)  
9f0040cc:	04 04                	add    al,0x4
9f0040ce:	00 00                	add    BYTE PTR [eax],al
9f0040d0:	20 00                	and    BYTE PTR [eax],al
9f0040d2:	00 00                	add    BYTE PTR [eax],al
9f0040d4:	3c 03                	cmp    al,0x3
9f0040d6:	00 00                	add    BYTE PTR [eax],al
9f0040d8:	4c                   	dec    esp
9f0040d9:	c8 ff ff 26          	enter  0xffff,0x26
9f0040dd:	00 00                	add    BYTE PTR [eax],al
9f0040df:	00 00                	add    BYTE PTR [eax],al
9f0040e1:	41                   	inc    ecx
9f0040e2:	0e                   	push   cs
9f0040e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040e9:	41                   	inc    ecx
9f0040ea:	83 03 60             	add    DWORD PTR [ebx],0x60
9f0040ed:	c3                   	ret    
9f0040ee:	41                   	inc    ecx
9f0040ef:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0040f2:	04 00                	add    al,0x0
9f0040f4:	20 00                	and    BYTE PTR [eax],al
9f0040f6:	00 00                	add    BYTE PTR [eax],al
9f0040f8:	60                   	pusha  
9f0040f9:	03 00                	add    eax,DWORD PTR [eax]
9f0040fb:	00 4e c8             	add    BYTE PTR [esi-0x38],cl
9f0040fe:	ff                   	(bad)  
9f0040ff:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f004102:	00 00                	add    BYTE PTR [eax],al
9f004104:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004107:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00410d:	44                   	inc    esp
9f00410e:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004111:	c3                   	ret    
9f004112:	41                   	inc    ecx
9f004113:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004116:	04 00                	add    al,0x0
9f004118:	20 00                	and    BYTE PTR [eax],al
9f00411a:	00 00                	add    BYTE PTR [eax],al
9f00411c:	84 03                	test   BYTE PTR [ebx],al
9f00411e:	00 00                	add    BYTE PTR [eax],al
9f004120:	6d                   	ins    DWORD PTR es:[edi],dx
9f004121:	c8 ff ff 43          	enter  0xffff,0x43
9f004125:	00 00                	add    BYTE PTR [eax],al
9f004127:	00 00                	add    BYTE PTR [eax],al
9f004129:	41                   	inc    ecx
9f00412a:	0e                   	push   cs
9f00412b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004131:	44                   	inc    esp
9f004132:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004135:	c3                   	ret    
9f004136:	41                   	inc    ecx
9f004137:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00413a:	04 00                	add    al,0x0
9f00413c:	20 00                	and    BYTE PTR [eax],al
9f00413e:	00 00                	add    BYTE PTR [eax],al
9f004140:	a8 03                	test   al,0x3
9f004142:	00 00                	add    BYTE PTR [eax],al
9f004144:	8c c8                	mov    eax,cs
9f004146:	ff                   	(bad)  
9f004147:	ff                   	(bad)  
9f004148:	ba 00 00 00 00       	mov    edx,0x0
9f00414d:	41                   	inc    ecx
9f00414e:	0e                   	push   cs
9f00414f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004155:	44                   	inc    esp
9f004156:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004159:	b2 c5                	mov    dl,0xc5
9f00415b:	c3                   	ret    
9f00415c:	0c 04                	or     al,0x4
9f00415e:	04 00                	add    al,0x0
9f004160:	24 00                	and    al,0x0
9f004162:	00 00                	add    BYTE PTR [eax],al
9f004164:	cc                   	int3   
9f004165:	03 00                	add    eax,DWORD PTR [eax]
9f004167:	00 24 c9             	add    BYTE PTR [ecx+ecx*8],ah
9f00416a:	ff                   	(bad)  
9f00416b:	ff                   	(bad)  
9f00416c:	3a 00                	cmp    al,BYTE PTR [eax]
9f00416e:	00 00                	add    BYTE PTR [eax],al
9f004170:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004173:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004179:	45                   	inc    ebp
9f00417a:	86 03                	xchg   BYTE PTR [ebx],al
9f00417c:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f004180:	41                   	inc    ecx
9f004181:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004185:	04 04                	add    al,0x4
9f004187:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00418a:	00 00                	add    BYTE PTR [eax],al
9f00418c:	f4                   	hlt    
9f00418d:	03 00                	add    eax,DWORD PTR [eax]
9f00418f:	00 36                	add    BYTE PTR [esi],dh
9f004191:	c9                   	leave  
9f004192:	ff                   	(bad)  
9f004193:	ff                   	(bad)  
9f004194:	3c 00                	cmp    al,0x0
9f004196:	00 00                	add    BYTE PTR [eax],al
9f004198:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00419b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041a1:	45                   	inc    ebp
9f0041a2:	86 03                	xchg   BYTE PTR [ebx],al
9f0041a4:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f0041a8:	41                   	inc    ecx
9f0041a9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0041ad:	04 04                	add    al,0x4
9f0041af:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0041b2:	00 00                	add    BYTE PTR [eax],al
9f0041b4:	1c 04                	sbb    al,0x4
9f0041b6:	00 00                	add    BYTE PTR [eax],al
9f0041b8:	4a                   	dec    edx
9f0041b9:	c9                   	leave  
9f0041ba:	ff                   	(bad)  
9f0041bb:	ff                   	(bad)  
9f0041bc:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0041bf:	00 00                	add    BYTE PTR [eax],al
9f0041c1:	41                   	inc    ecx
9f0041c2:	0e                   	push   cs
9f0041c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041c9:	45                   	inc    ebp
9f0041ca:	86 03                	xchg   BYTE PTR [ebx],al
9f0041cc:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f0041d0:	41                   	inc    ecx
9f0041d1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0041d5:	04 04                	add    al,0x4
9f0041d7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0041da:	00 00                	add    BYTE PTR [eax],al
9f0041dc:	44                   	inc    esp
9f0041dd:	04 00                	add    al,0x0
9f0041df:	00 60 c9             	add    BYTE PTR [eax-0x37],ah
9f0041e2:	ff                   	(bad)  
9f0041e3:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0041e6:	00 00                	add    BYTE PTR [eax],al
9f0041e8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0041eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041f1:	45                   	inc    ebp
9f0041f2:	86 03                	xchg   BYTE PTR [ebx],al
9f0041f4:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f0041fb:	c5 
9f0041fc:	0c 04                	or     al,0x4
9f0041fe:	04 00                	add    al,0x0
9f004200:	24 00                	and    al,0x0
9f004202:	00 00                	add    BYTE PTR [eax],al
9f004204:	6c                   	ins    BYTE PTR es:[edi],dx
9f004205:	04 00                	add    al,0x0
9f004207:	00 78 c9             	add    BYTE PTR [eax-0x37],bh
9f00420a:	ff                   	(bad)  
9f00420b:	ff 42 00             	inc    DWORD PTR [edx+0x0]
9f00420e:	00 00                	add    BYTE PTR [eax],al
9f004210:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004213:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004219:	45                   	inc    ebp
9f00421a:	86 03                	xchg   BYTE PTR [ebx],al
9f00421c:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f004220:	41                   	inc    ecx
9f004221:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004225:	04 04                	add    al,0x4
9f004227:	00 20                	add    BYTE PTR [eax],ah
9f004229:	00 00                	add    BYTE PTR [eax],al
9f00422b:	00 94 04 00 00 92 c9 	add    BYTE PTR [esp+eax*1-0x366e0000],dl
9f004232:	ff                   	(bad)  
9f004233:	ff                   	(bad)  
9f004234:	bf 00 00 00 00       	mov    edi,0x0
9f004239:	41                   	inc    ecx
9f00423a:	0e                   	push   cs
9f00423b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004241:	44                   	inc    esp
9f004242:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004245:	b7 c5                	mov    bh,0xc5
9f004247:	c3                   	ret    
9f004248:	0c 04                	or     al,0x4
9f00424a:	04 00                	add    al,0x0
9f00424c:	20 00                	and    BYTE PTR [eax],al
9f00424e:	00 00                	add    BYTE PTR [eax],al
9f004250:	b8 04 00 00 2d       	mov    eax,0x2d000004
9f004255:	ca ff ff             	retf   0xffff
9f004258:	1f                   	pop    ds
9f004259:	00 00                	add    BYTE PTR [eax],al
9f00425b:	00 00                	add    BYTE PTR [eax],al
9f00425d:	41                   	inc    ecx
9f00425e:	0e                   	push   cs
9f00425f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004265:	44                   	inc    esp
9f004266:	83 03 56             	add    DWORD PTR [ebx],0x56
9f004269:	c3                   	ret    
9f00426a:	41                   	inc    ecx
9f00426b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00426e:	04 00                	add    al,0x0
9f004270:	20 00                	and    BYTE PTR [eax],al
9f004272:	00 00                	add    BYTE PTR [eax],al
9f004274:	dc 04 00             	fadd   QWORD PTR [eax+eax*1]
9f004277:	00 28                	add    BYTE PTR [eax],ch
9f004279:	ca ff ff             	retf   0xffff
9f00427c:	59                   	pop    ecx
9f00427d:	00 00                	add    BYTE PTR [eax],al
9f00427f:	00 00                	add    BYTE PTR [eax],al
9f004281:	41                   	inc    ecx
9f004282:	0e                   	push   cs
9f004283:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004289:	44                   	inc    esp
9f00428a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00428d:	51                   	push   ecx
9f00428e:	c5 c3 0c             	(bad)  
9f004291:	04 04                	add    al,0x4
9f004293:	00 20                	add    BYTE PTR [eax],ah
9f004295:	00 00                	add    BYTE PTR [eax],al
9f004297:	00 00                	add    BYTE PTR [eax],al
9f004299:	05 00 00 5d ca       	add    eax,0xca5d0000
9f00429e:	ff                   	(bad)  
9f00429f:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f0042a3:	00 00                	add    BYTE PTR [eax],al
9f0042a5:	41                   	inc    ecx
9f0042a6:	0e                   	push   cs
9f0042a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042ad:	44                   	inc    esp
9f0042ae:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0042b1:	4c                   	dec    esp
9f0042b2:	c5 c3 0c             	(bad)  
9f0042b5:	04 04                	add    al,0x4
9f0042b7:	00 20                	add    BYTE PTR [eax],ah
9f0042b9:	00 00                	add    BYTE PTR [eax],al
9f0042bb:	00 24 05 00 00 8d ca 	add    BYTE PTR [eax*1-0x35730000],ah
9f0042c2:	ff                   	(bad)  
9f0042c3:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f0042c7:	00 00                	add    BYTE PTR [eax],al
9f0042c9:	41                   	inc    ecx
9f0042ca:	0e                   	push   cs
9f0042cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042d1:	44                   	inc    esp
9f0042d2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0042d5:	4c                   	dec    esp
9f0042d6:	c5 c3 0c             	(bad)  
9f0042d9:	04 04                	add    al,0x4
9f0042db:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0042de:	00 00                	add    BYTE PTR [eax],al
9f0042e0:	48                   	dec    eax
9f0042e1:	05 00 00 bd ca       	add    eax,0xcabd0000
9f0042e6:	ff                   	(bad)  
9f0042e7:	ff 34 00             	push   DWORD PTR [eax+eax*1]
9f0042ea:	00 00                	add    BYTE PTR [eax],al
9f0042ec:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0042ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042f5:	70 c5                	jo     9f0042bc <__x86.get_pc_thunk.cx+0x528>
9f0042f7:	0c 04                	or     al,0x4
9f0042f9:	04 00                	add    al,0x0
9f0042fb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0042fe:	00 00                	add    BYTE PTR [eax],al
9f004300:	68 05 00 00 d1       	push   0xd1000005
9f004305:	ca ff ff             	retf   0xffff
9f004308:	37                   	aaa    
9f004309:	00 00                	add    BYTE PTR [eax],al
9f00430b:	00 00                	add    BYTE PTR [eax],al
9f00430d:	41                   	inc    ecx
9f00430e:	0e                   	push   cs
9f00430f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004315:	73 c5                	jae    9f0042dc <__x86.get_pc_thunk.cx+0x548>
9f004317:	0c 04                	or     al,0x4
9f004319:	04 00                	add    al,0x0
9f00431b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00431e:	00 00                	add    BYTE PTR [eax],al
9f004320:	88 05 00 00 e8 ca    	mov    BYTE PTR ds:0xcae80000,al
9f004326:	ff                   	(bad)  
9f004327:	ff 72 00             	push   DWORD PTR [edx+0x0]
9f00432a:	00 00                	add    BYTE PTR [eax],al
9f00432c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00432f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004335:	45                   	inc    ebp
9f004336:	86 03                	xchg   BYTE PTR [ebx],al
9f004338:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
9f00433c:	c3                   	ret    
9f00433d:	41                   	inc    ecx
9f00433e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004342:	04 04                	add    al,0x4
9f004344:	1c 00                	sbb    al,0x0
9f004346:	00 00                	add    BYTE PTR [eax],al
9f004348:	b0 05                	mov    al,0x5
9f00434a:	00 00                	add    BYTE PTR [eax],al
9f00434c:	32 cb                	xor    cl,bl
9f00434e:	ff                   	(bad)  
9f00434f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004355:	41                   	inc    ecx
9f004356:	0e                   	push   cs
9f004357:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00435d:	59                   	pop    ecx
9f00435e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004361:	04 00                	add    al,0x0
9f004363:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004366:	00 00                	add    BYTE PTR [eax],al
9f004368:	d0 05 00 00 2f cb    	rol    BYTE PTR ds:0xcb2f0000,1
9f00436e:	ff                   	(bad)  
9f00436f:	ff 29                	jmp    FWORD PTR [ecx]
9f004371:	00 00                	add    BYTE PTR [eax],al
9f004373:	00 00                	add    BYTE PTR [eax],al
9f004375:	41                   	inc    ecx
9f004376:	0e                   	push   cs
9f004377:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00437d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f004381:	04 00                	add    al,0x0
9f004383:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004386:	00 00                	add    BYTE PTR [eax],al
9f004388:	f0 05 00 00 38 cb    	lock add eax,0xcb380000
9f00438e:	ff                   	(bad)  
9f00438f:	ff 29                	jmp    FWORD PTR [ecx]
9f004391:	00 00                	add    BYTE PTR [eax],al
9f004393:	00 00                	add    BYTE PTR [eax],al
9f004395:	41                   	inc    ecx
9f004396:	0e                   	push   cs
9f004397:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00439d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f0043a1:	04 00                	add    al,0x0
9f0043a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0043a6:	00 00                	add    BYTE PTR [eax],al
9f0043a8:	10 06                	adc    BYTE PTR [esi],al
9f0043aa:	00 00                	add    BYTE PTR [eax],al
9f0043ac:	41                   	inc    ecx
9f0043ad:	cb                   	retf   
9f0043ae:	ff                   	(bad)  
9f0043af:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f0043b3:	00 00                	add    BYTE PTR [eax],al
9f0043b5:	41                   	inc    ecx
9f0043b6:	0e                   	push   cs
9f0043b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0043bd:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f0043c0:	0c 04                	or     al,0x4
9f0043c2:	04 00                	add    al,0x0
9f0043c4:	20 00                	and    BYTE PTR [eax],al
9f0043c6:	00 00                	add    BYTE PTR [eax],al
9f0043c8:	30 06                	xor    BYTE PTR [esi],al
9f0043ca:	00 00                	add    BYTE PTR [eax],al
9f0043cc:	6d                   	ins    DWORD PTR es:[edi],dx
9f0043cd:	cb                   	retf   
9f0043ce:	ff                   	(bad)  
9f0043cf:	ff f4                	push   esp
9f0043d1:	01 00                	add    DWORD PTR [eax],eax
9f0043d3:	00 00                	add    BYTE PTR [eax],al
9f0043d5:	41                   	inc    ecx
9f0043d6:	0e                   	push   cs
9f0043d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0043dd:	44                   	inc    esp
9f0043de:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0043e1:	ec                   	in     al,dx
9f0043e2:	01 c5                	add    ebp,eax
9f0043e4:	c3                   	ret    
9f0043e5:	0c 04                	or     al,0x4
9f0043e7:	04 1c                	add    al,0x1c
9f0043e9:	00 00                	add    BYTE PTR [eax],al
9f0043eb:	00 54 06 00          	add    BYTE PTR [esi+eax*1+0x0],dl
9f0043ef:	00 3d cd ff ff 4f    	add    BYTE PTR ds:0x4fffffcd,bh
9f0043f5:	00 00                	add    BYTE PTR [eax],al
9f0043f7:	00 00                	add    BYTE PTR [eax],al
9f0043f9:	41                   	inc    ecx
9f0043fa:	0e                   	push   cs
9f0043fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004401:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f004404:	0c 04                	or     al,0x4
9f004406:	04 00                	add    al,0x0
9f004408:	1c 00                	sbb    al,0x0
9f00440a:	00 00                	add    BYTE PTR [eax],al
9f00440c:	74 06                	je     9f004414 <__x86.get_pc_thunk.cx+0x680>
9f00440e:	00 00                	add    BYTE PTR [eax],al
9f004410:	6c                   	ins    BYTE PTR es:[edi],dx
9f004411:	cd ff                	int    0xff
9f004413:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f004416:	00 00                	add    BYTE PTR [eax],al
9f004418:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00441b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004421:	58                   	pop    eax
9f004422:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004425:	04 00                	add    al,0x0
9f004427:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00442a:	00 00                	add    BYTE PTR [eax],al
9f00442c:	94                   	xchg   esp,eax
9f00442d:	06                   	push   es
9f00442e:	00 00                	add    BYTE PTR [eax],al
9f004430:	68 cd ff ff 20       	push   0x20ffffcd
9f004435:	00 00                	add    BYTE PTR [eax],al
9f004437:	00 00                	add    BYTE PTR [eax],al
9f004439:	41                   	inc    ecx
9f00443a:	0e                   	push   cs
9f00443b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004441:	5c                   	pop    esp
9f004442:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004445:	04 00                	add    al,0x0
9f004447:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00444a:	00 00                	add    BYTE PTR [eax],al
9f00444c:	b4 06                	mov    ah,0x6
9f00444e:	00 00                	add    BYTE PTR [eax],al
9f004450:	68 cd ff ff 20       	push   0x20ffffcd
9f004455:	00 00                	add    BYTE PTR [eax],al
9f004457:	00 00                	add    BYTE PTR [eax],al
9f004459:	41                   	inc    ecx
9f00445a:	0e                   	push   cs
9f00445b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004461:	5c                   	pop    esp
9f004462:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004465:	04 00                	add    al,0x0
9f004467:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00446a:	00 00                	add    BYTE PTR [eax],al
9f00446c:	d4 06                	aam    0x6
9f00446e:	00 00                	add    BYTE PTR [eax],al
9f004470:	68 cd ff ff 44       	push   0x44ffffcd
9f004475:	01 00                	add    DWORD PTR [eax],eax
9f004477:	00 00                	add    BYTE PTR [eax],al
9f004479:	41                   	inc    ecx
9f00447a:	0e                   	push   cs
9f00447b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004481:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f004484:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004487:	04 1c                	add    al,0x1c
9f004489:	00 00                	add    BYTE PTR [eax],al
9f00448b:	00 f4                	add    ah,dh
9f00448d:	06                   	push   es
9f00448e:	00 00                	add    BYTE PTR [eax],al
9f004490:	8c ce                	mov    esi,cs
9f004492:	ff                   	(bad)  
9f004493:	ff 20                	jmp    DWORD PTR [eax]
9f004495:	00 00                	add    BYTE PTR [eax],al
9f004497:	00 00                	add    BYTE PTR [eax],al
9f004499:	41                   	inc    ecx
9f00449a:	0e                   	push   cs
9f00449b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044a1:	5c                   	pop    esp
9f0044a2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0044a5:	04 00                	add    al,0x0
9f0044a7:	00 28                	add    BYTE PTR [eax],ch
9f0044a9:	00 00                	add    BYTE PTR [eax],al
9f0044ab:	00 14 07             	add    BYTE PTR [edi+eax*1],dl
9f0044ae:	00 00                	add    BYTE PTR [eax],al
9f0044b0:	8c ce                	mov    esi,cs
9f0044b2:	ff                   	(bad)  
9f0044b3:	ff                   	(bad)  
9f0044b4:	fd                   	std    
9f0044b5:	02 00                	add    al,BYTE PTR [eax]
9f0044b7:	00 00                	add    BYTE PTR [eax],al
9f0044b9:	41                   	inc    ecx
9f0044ba:	0e                   	push   cs
9f0044bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044c1:	48                   	dec    eax
9f0044c2:	86 03                	xchg   BYTE PTR [ebx],al
9f0044c4:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f0044c8:	02 c3                	add    al,bl
9f0044ca:	41                   	inc    ecx
9f0044cb:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0044cf:	04 04                	add    al,0x4
9f0044d1:	00 00                	add    BYTE PTR [eax],al
9f0044d3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0044d6:	00 00                	add    BYTE PTR [eax],al
9f0044d8:	40                   	inc    eax
9f0044d9:	07                   	pop    es
9f0044da:	00 00                	add    BYTE PTR [eax],al
9f0044dc:	5d                   	pop    ebp
9f0044dd:	d1 ff                	sar    edi,1
9f0044df:	ff 23                	jmp    DWORD PTR [ebx]
9f0044e1:	00 00                	add    BYTE PTR [eax],al
9f0044e3:	00 00                	add    BYTE PTR [eax],al
9f0044e5:	41                   	inc    ecx
9f0044e6:	0e                   	push   cs
9f0044e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044ed:	5f                   	pop    edi
9f0044ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0044f1:	04 00                	add    al,0x0
9f0044f3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0044f6:	00 00                	add    BYTE PTR [eax],al
9f0044f8:	60                   	pusha  
9f0044f9:	07                   	pop    es
9f0044fa:	00 00                	add    BYTE PTR [eax],al
9f0044fc:	60                   	pusha  
9f0044fd:	d1 ff                	sar    edi,1
9f0044ff:	ff 19                	call   FWORD PTR [ecx]
9f004501:	00 00                	add    BYTE PTR [eax],al
9f004503:	00 00                	add    BYTE PTR [eax],al
9f004505:	41                   	inc    ecx
9f004506:	0e                   	push   cs
9f004507:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00450d:	55                   	push   ebp
9f00450e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004511:	04 00                	add    al,0x0
9f004513:	00 20                	add    BYTE PTR [eax],ah
9f004515:	00 00                	add    BYTE PTR [eax],al
9f004517:	00 80 07 00 00 5c    	add    BYTE PTR [eax+0x5c000007],al
9f00451d:	d1 ff                	sar    edi,1
9f00451f:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f004522:	00 00                	add    BYTE PTR [eax],al
9f004524:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004527:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00452d:	44                   	inc    esp
9f00452e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004531:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f004534:	0c 04                	or     al,0x4
9f004536:	04 00                	add    al,0x0
9f004538:	20 00                	and    BYTE PTR [eax],al
9f00453a:	00 00                	add    BYTE PTR [eax],al
9f00453c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f00453d:	07                   	pop    es
9f00453e:	00 00                	add    BYTE PTR [eax],al
9f004540:	ac                   	lods   al,BYTE PTR ds:[esi]
9f004541:	d1 ff                	sar    edi,1
9f004543:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f004547:	00 00                	add    BYTE PTR [eax],al
9f004549:	41                   	inc    ecx
9f00454a:	0e                   	push   cs
9f00454b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004551:	44                   	inc    esp
9f004552:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004555:	64                   	fs
9f004556:	c5 c3 0c             	(bad)  
9f004559:	04 04                	add    al,0x4
9f00455b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00455e:	00 00                	add    BYTE PTR [eax],al
9f004560:	c8 07 00 00          	enter  0x7,0x0
9f004564:	f4                   	hlt    
9f004565:	d1 ff                	sar    edi,1
9f004567:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f00456d:	41                   	inc    ecx
9f00456e:	0e                   	push   cs
9f00456f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004575:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f00457b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00457e:	00 00                	add    BYTE PTR [eax],al
9f004580:	e8 07 00 00 5b       	call   fa00458c <tmbuf+0x5affe5cc>
9f004585:	d2 ff                	sar    bh,cl
9f004587:	ff                   	(bad)  
9f004588:	3a 00                	cmp    al,BYTE PTR [eax]
9f00458a:	00 00                	add    BYTE PTR [eax],al
9f00458c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00458f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004595:	76 c5                	jbe    9f00455c <__x86.get_pc_thunk.cx+0x7c8>
9f004597:	0c 04                	or     al,0x4
9f004599:	04 00                	add    al,0x0
9f00459b:	00 20                	add    BYTE PTR [eax],ah
9f00459d:	00 00                	add    BYTE PTR [eax],al
9f00459f:	00 08                	add    BYTE PTR [eax],cl
9f0045a1:	08 00                	or     BYTE PTR [eax],al
9f0045a3:	00 75 d2             	add    BYTE PTR [ebp-0x2e],dh
9f0045a6:	ff                   	(bad)  
9f0045a7:	ff d4                	call   esp
9f0045a9:	01 00                	add    DWORD PTR [eax],eax
9f0045ab:	00 00                	add    BYTE PTR [eax],al
9f0045ad:	41                   	inc    ecx
9f0045ae:	0e                   	push   cs
9f0045af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045b5:	44                   	inc    esp
9f0045b6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0045b9:	cc                   	int3   
9f0045ba:	01 c5                	add    ebp,eax
9f0045bc:	c3                   	ret    
9f0045bd:	0c 04                	or     al,0x4
9f0045bf:	04 1c                	add    al,0x1c
9f0045c1:	00 00                	add    BYTE PTR [eax],al
9f0045c3:	00 2c 08             	add    BYTE PTR [eax+ecx*1],ch
9f0045c6:	00 00                	add    BYTE PTR [eax],al
9f0045c8:	25 d4 ff ff 20       	and    eax,0x20ffffd4
9f0045cd:	00 00                	add    BYTE PTR [eax],al
9f0045cf:	00 00                	add    BYTE PTR [eax],al
9f0045d1:	41                   	inc    ecx
9f0045d2:	0e                   	push   cs
9f0045d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045d9:	5c                   	pop    esp
9f0045da:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0045dd:	04 00                	add    al,0x0
9f0045df:	00 20                	add    BYTE PTR [eax],ah
9f0045e1:	00 00                	add    BYTE PTR [eax],al
9f0045e3:	00 4c 08 00          	add    BYTE PTR [eax+ecx*1+0x0],cl
9f0045e7:	00 25 d4 ff ff 85    	add    BYTE PTR ds:0x85ffffd4,ah
9f0045ed:	00 00                	add    BYTE PTR [eax],al
9f0045ef:	00 00                	add    BYTE PTR [eax],al
9f0045f1:	41                   	inc    ecx
9f0045f2:	0e                   	push   cs
9f0045f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045f9:	44                   	inc    esp
9f0045fa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0045fd:	7d c5                	jge    9f0045c4 <__x86.get_pc_thunk.cx+0x830>
9f0045ff:	c3                   	ret    
9f004600:	0c 04                	or     al,0x4
9f004602:	04 00                	add    al,0x0
9f004604:	1c 00                	sbb    al,0x0
9f004606:	00 00                	add    BYTE PTR [eax],al
9f004608:	70 08                	jo     9f004612 <__x86.get_pc_thunk.cx+0x87e>
9f00460a:	00 00                	add    BYTE PTR [eax],al
9f00460c:	86 d4                	xchg   ah,dl
9f00460e:	ff                   	(bad)  
9f00460f:	ff 23                	jmp    DWORD PTR [ebx]
9f004611:	00 00                	add    BYTE PTR [eax],al
9f004613:	00 00                	add    BYTE PTR [eax],al
9f004615:	41                   	inc    ecx
9f004616:	0e                   	push   cs
9f004617:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00461d:	5f                   	pop    edi
9f00461e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004621:	04 00                	add    al,0x0
9f004623:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004626:	00 00                	add    BYTE PTR [eax],al
9f004628:	90                   	nop
9f004629:	08 00                	or     BYTE PTR [eax],al
9f00462b:	00 89 d4 ff ff 1b    	add    BYTE PTR [ecx+0x1bffffd4],cl
9f004631:	00 00                	add    BYTE PTR [eax],al
9f004633:	00 00                	add    BYTE PTR [eax],al
9f004635:	41                   	inc    ecx
9f004636:	0e                   	push   cs
9f004637:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00463d:	57                   	push   edi
9f00463e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004641:	04 00                	add    al,0x0
9f004643:	00 20                	add    BYTE PTR [eax],ah
9f004645:	00 00                	add    BYTE PTR [eax],al
9f004647:	00 b0 08 00 00 84    	add    BYTE PTR [eax-0x7bfffff8],dh
9f00464d:	d4 ff                	aam    0xff
9f00464f:	ff 32                	push   DWORD PTR [edx]
9f004651:	00 00                	add    BYTE PTR [eax],al
9f004653:	00 00                	add    BYTE PTR [eax],al
9f004655:	41                   	inc    ecx
9f004656:	0e                   	push   cs
9f004657:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00465d:	44                   	inc    esp
9f00465e:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f004661:	c5 c3 0c             	(bad)  
9f004664:	04 04                	add    al,0x4
9f004666:	00 00                	add    BYTE PTR [eax],al
9f004668:	1c 00                	sbb    al,0x0
9f00466a:	00 00                	add    BYTE PTR [eax],al
9f00466c:	d4 08                	aam    0x8
9f00466e:	00 00                	add    BYTE PTR [eax],al
9f004670:	94                   	xchg   esp,eax
9f004671:	d4 ff                	aam    0xff
9f004673:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
9f004679:	41                   	inc    ecx
9f00467a:	0e                   	push   cs
9f00467b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004681:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f004687:	04 1c                	add    al,0x1c
9f004689:	00 00                	add    BYTE PTR [eax],al
9f00468b:	00 f4                	add    ah,dh
9f00468d:	08 00                	or     BYTE PTR [eax],al
9f00468f:	00 0f                	add    BYTE PTR [edi],cl
9f004691:	d6                   	(bad)  
9f004692:	ff                   	(bad)  
9f004693:	ff 20                	jmp    DWORD PTR [eax]
9f004695:	00 00                	add    BYTE PTR [eax],al
9f004697:	00 00                	add    BYTE PTR [eax],al
9f004699:	41                   	inc    ecx
9f00469a:	0e                   	push   cs
9f00469b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046a1:	5c                   	pop    esp
9f0046a2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0046a5:	04 00                	add    al,0x0
9f0046a7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0046aa:	00 00                	add    BYTE PTR [eax],al
9f0046ac:	14 09                	adc    al,0x9
9f0046ae:	00 00                	add    BYTE PTR [eax],al
9f0046b0:	10 d6                	adc    dh,dl
9f0046b2:	ff                   	(bad)  
9f0046b3:	ff c7                	inc    edi
9f0046b5:	00 00                	add    BYTE PTR [eax],al
9f0046b7:	00 00                	add    BYTE PTR [eax],al
9f0046b9:	41                   	inc    ecx
9f0046ba:	0e                   	push   cs
9f0046bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046c1:	02 c3                	add    al,bl
9f0046c3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0046c6:	04 00                	add    al,0x0
9f0046c8:	1c 00                	sbb    al,0x0
9f0046ca:	00 00                	add    BYTE PTR [eax],al
9f0046cc:	34 09                	xor    al,0x9
9f0046ce:	00 00                	add    BYTE PTR [eax],al
9f0046d0:	b7 d6                	mov    bh,0xd6
9f0046d2:	ff                   	(bad)  
9f0046d3:	ff 20                	jmp    DWORD PTR [eax]
9f0046d5:	00 00                	add    BYTE PTR [eax],al
9f0046d7:	00 00                	add    BYTE PTR [eax],al
9f0046d9:	41                   	inc    ecx
9f0046da:	0e                   	push   cs
9f0046db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046e1:	5c                   	pop    esp
9f0046e2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0046e5:	04 00                	add    al,0x0
9f0046e7:	00 20                	add    BYTE PTR [eax],ah
9f0046e9:	00 00                	add    BYTE PTR [eax],al
9f0046eb:	00 54 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],dl
9f0046ef:	00 b8 d6 ff ff 29    	add    BYTE PTR [eax+0x29ffffd6],bh
9f0046f5:	00 00                	add    BYTE PTR [eax],al
9f0046f7:	00 00                	add    BYTE PTR [eax],al
9f0046f9:	41                   	inc    ecx
9f0046fa:	0e                   	push   cs
9f0046fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004701:	44                   	inc    esp
9f004702:	83 03 61             	add    DWORD PTR [ebx],0x61
9f004705:	c5 c3 0c             	(bad)  
9f004708:	04 04                	add    al,0x4
9f00470a:	00 00                	add    BYTE PTR [eax],al
9f00470c:	20 00                	and    BYTE PTR [eax],al
9f00470e:	00 00                	add    BYTE PTR [eax],al
9f004710:	78 09                	js     9f00471b <__x86.get_pc_thunk.cx+0x987>
9f004712:	00 00                	add    BYTE PTR [eax],al
9f004714:	c0 d6 ff             	rcl    dh,0xff
9f004717:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f00471a:	00 00                	add    BYTE PTR [eax],al
9f00471c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00471f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004725:	44                   	inc    esp
9f004726:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004729:	56                   	push   esi
9f00472a:	c3                   	ret    
9f00472b:	41                   	inc    ecx
9f00472c:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00472f:	04 28                	add    al,0x28
9f004731:	00 00                	add    BYTE PTR [eax],al
9f004733:	00 9c 09 00 00 fb d6 	add    BYTE PTR [ecx+ecx*1-0x29050000],bl
9f00473a:	ff                   	(bad)  
9f00473b:	ff                   	(bad)  
9f00473c:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f00473f:	00 00                	add    BYTE PTR [eax],al
9f004741:	41                   	inc    ecx
9f004742:	0e                   	push   cs
9f004743:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004749:	45                   	inc    ebp
9f00474a:	86 03                	xchg   BYTE PTR [ebx],al
9f00474c:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f004750:	02 c3                	add    al,bl
9f004752:	41                   	inc    ecx
9f004753:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004757:	04 04                	add    al,0x4
9f004759:	00 00                	add    BYTE PTR [eax],al
9f00475b:	00 20                	add    BYTE PTR [eax],ah
9f00475d:	00 00                	add    BYTE PTR [eax],al
9f00475f:	00 c8                	add    al,cl
9f004761:	09 00                	or     DWORD PTR [eax],eax
9f004763:	00 0d d9 ff ff 48    	add    BYTE PTR ds:0x48ffffd9,cl
9f004769:	04 00                	add    al,0x0
9f00476b:	00 00                	add    BYTE PTR [eax],al
9f00476d:	41                   	inc    ecx
9f00476e:	0e                   	push   cs
9f00476f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004775:	44                   	inc    esp
9f004776:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004779:	40                   	inc    eax
9f00477a:	04 c5                	add    al,0xc5
9f00477c:	c3                   	ret    
9f00477d:	0c 04                	or     al,0x4
9f00477f:	04 1c                	add    al,0x1c
9f004781:	00 00                	add    BYTE PTR [eax],al
9f004783:	00 ec                	add    ah,ch
9f004785:	09 00                	or     DWORD PTR [eax],eax
9f004787:	00 31                	add    BYTE PTR [ecx],dh
9f004789:	dd ff                	(bad)  
9f00478b:	ff 33                	push   DWORD PTR [ebx]
9f00478d:	00 00                	add    BYTE PTR [eax],al
9f00478f:	00 00                	add    BYTE PTR [eax],al
9f004791:	41                   	inc    ecx
9f004792:	0e                   	push   cs
9f004793:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004799:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00479a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00479d:	04 00                	add    al,0x0
9f00479f:	00 20                	add    BYTE PTR [eax],ah
9f0047a1:	00 00                	add    BYTE PTR [eax],al
9f0047a3:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
9f0047a6:	00 00                	add    BYTE PTR [eax],al
9f0047a8:	44                   	inc    esp
9f0047a9:	dd ff                	(bad)  
9f0047ab:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f0047b2:	0e                   	push   cs
9f0047b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0047b9:	44                   	inc    esp
9f0047ba:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0047bd:	7c c5                	jl     9f004784 <__x86.get_pc_thunk.cx+0x9f0>
9f0047bf:	c3                   	ret    
9f0047c0:	0c 04                	or     al,0x4
9f0047c2:	04 00                	add    al,0x0
9f0047c4:	20 00                	and    BYTE PTR [eax],al
9f0047c6:	00 00                	add    BYTE PTR [eax],al
9f0047c8:	30 0a                	xor    BYTE PTR [edx],cl
9f0047ca:	00 00                	add    BYTE PTR [eax],al
9f0047cc:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0047cd:	dd ff                	(bad)  
9f0047cf:	ff                   	(bad)  
9f0047d0:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0047d3:	00 00                	add    BYTE PTR [eax],al
9f0047d5:	41                   	inc    ecx
9f0047d6:	0e                   	push   cs
9f0047d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0047dd:	44                   	inc    esp
9f0047de:	83 03 76             	add    DWORD PTR [ebx],0x76
9f0047e1:	c5 c3 0c             	(bad)  
9f0047e4:	04 04                	add    al,0x4
9f0047e6:	00 00                	add    BYTE PTR [eax],al
9f0047e8:	20 00                	and    BYTE PTR [eax],al
9f0047ea:	00 00                	add    BYTE PTR [eax],al
9f0047ec:	54                   	push   esp
9f0047ed:	0a 00                	or     al,BYTE PTR [eax]
9f0047ef:	00 be dd ff ff 3e    	add    BYTE PTR [esi+0x3effffdd],bh
9f0047f5:	00 00                	add    BYTE PTR [eax],al
9f0047f7:	00 00                	add    BYTE PTR [eax],al
9f0047f9:	41                   	inc    ecx
9f0047fa:	0e                   	push   cs
9f0047fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004801:	44                   	inc    esp
9f004802:	83 03 76             	add    DWORD PTR [ebx],0x76
9f004805:	c5 c3 0c             	(bad)  
9f004808:	04 04                	add    al,0x4
9f00480a:	00 00                	add    BYTE PTR [eax],al
9f00480c:	1c 00                	sbb    al,0x0
9f00480e:	00 00                	add    BYTE PTR [eax],al
9f004810:	78 0a                	js     9f00481c <__x86.get_pc_thunk.cx+0xa88>
9f004812:	00 00                	add    BYTE PTR [eax],al
9f004814:	d8 dd                	fcomp  st(5)
9f004816:	ff                   	(bad)  
9f004817:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f00481a:	00 00                	add    BYTE PTR [eax],al
9f00481c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00481f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004825:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
9f004828:	0c 04                	or     al,0x4
9f00482a:	04 00                	add    al,0x0
9f00482c:	24 00                	and    al,0x0
9f00482e:	00 00                	add    BYTE PTR [eax],al
9f004830:	98                   	cwde   
9f004831:	0a 00                	or     al,BYTE PTR [eax]
9f004833:	00 28                	add    BYTE PTR [eax],ch
9f004835:	de ff                	fdivp  st(7),st
9f004837:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f00483a:	00 00                	add    BYTE PTR [eax],al
9f00483c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00483f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004845:	45                   	inc    ebp
9f004846:	86 03                	xchg   BYTE PTR [ebx],al
9f004848:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f00484c:	c3                   	ret    
9f00484d:	41                   	inc    ecx
9f00484e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004852:	04 04                	add    al,0x4
9f004854:	1c 00                	sbb    al,0x0
9f004856:	00 00                	add    BYTE PTR [eax],al
9f004858:	c0 0a 00             	ror    BYTE PTR [edx],0x0
9f00485b:	00 60 de             	add    BYTE PTR [eax-0x22],ah
9f00485e:	ff                   	(bad)  
9f00485f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004862:	00 00                	add    BYTE PTR [eax],al
9f004864:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004867:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00486d:	7c c5                	jl     9f004834 <__x86.get_pc_thunk.cx+0xaa0>
9f00486f:	0c 04                	or     al,0x4
9f004871:	04 00                	add    al,0x0
9f004873:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004876:	00 00                	add    BYTE PTR [eax],al
9f004878:	e0 0a                	loopne 9f004884 <__x86.get_pc_thunk.cx+0xaf0>
9f00487a:	00 00                	add    BYTE PTR [eax],al
9f00487c:	80 de ff             	sbb    dh,0xff
9f00487f:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004882:	00 00                	add    BYTE PTR [eax],al
9f004884:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004887:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00488d:	7c c5                	jl     9f004854 <__x86.get_pc_thunk.cx+0xac0>
9f00488f:	0c 04                	or     al,0x4
9f004891:	04 00                	add    al,0x0
9f004893:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004896:	00 00                	add    BYTE PTR [eax],al
9f004898:	00 0b                	add    BYTE PTR [ebx],cl
9f00489a:	00 00                	add    BYTE PTR [eax],al
9f00489c:	a0 de ff ff 47       	mov    al,ds:0x47ffffde
9f0048a1:	00 00                	add    BYTE PTR [eax],al
9f0048a3:	00 00                	add    BYTE PTR [eax],al
9f0048a5:	41                   	inc    ecx
9f0048a6:	0e                   	push   cs
9f0048a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048ad:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f0048b0:	0c 04                	or     al,0x4
9f0048b2:	04 00                	add    al,0x0
9f0048b4:	1c 00                	sbb    al,0x0
9f0048b6:	00 00                	add    BYTE PTR [eax],al
9f0048b8:	20 0b                	and    BYTE PTR [ebx],cl
9f0048ba:	00 00                	add    BYTE PTR [eax],al
9f0048bc:	c8 de ff ff          	enter  0xffde,0xff
9f0048c0:	30 00                	xor    BYTE PTR [eax],al
9f0048c2:	00 00                	add    BYTE PTR [eax],al
9f0048c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048cd:	6c                   	ins    BYTE PTR es:[edi],dx
9f0048ce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0048d1:	04 00                	add    al,0x0
9f0048d3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0048d6:	00 00                	add    BYTE PTR [eax],al
9f0048d8:	40                   	inc    eax
9f0048d9:	0b 00                	or     eax,DWORD PTR [eax]
9f0048db:	00 d8                	add    al,bl
9f0048dd:	de ff                	fdivp  st(7),st
9f0048df:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f0048e2:	00 00                	add    BYTE PTR [eax],al
9f0048e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048ed:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f0048f0:	0c 04                	or     al,0x4
9f0048f2:	04 00                	add    al,0x0
9f0048f4:	1c 00                	sbb    al,0x0
9f0048f6:	00 00                	add    BYTE PTR [eax],al
9f0048f8:	60                   	pusha  
9f0048f9:	0b 00                	or     eax,DWORD PTR [eax]
9f0048fb:	00 14 df             	add    BYTE PTR [edi+ebx*8],dl
9f0048fe:	ff                   	(bad)  
9f0048ff:	ff 31                	push   DWORD PTR [ecx]
9f004901:	00 00                	add    BYTE PTR [eax],al
9f004903:	00 00                	add    BYTE PTR [eax],al
9f004905:	41                   	inc    ecx
9f004906:	0e                   	push   cs
9f004907:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00490d:	6d                   	ins    DWORD PTR es:[edi],dx
9f00490e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004911:	04 00                	add    al,0x0
9f004913:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004916:	00 00                	add    BYTE PTR [eax],al
9f004918:	80 0b 00             	or     BYTE PTR [ebx],0x0
9f00491b:	00 25 df ff ff 31    	add    BYTE PTR ds:0x31ffffdf,ah
9f004921:	00 00                	add    BYTE PTR [eax],al
9f004923:	00 00                	add    BYTE PTR [eax],al
9f004925:	41                   	inc    ecx
9f004926:	0e                   	push   cs
9f004927:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00492d:	6d                   	ins    DWORD PTR es:[edi],dx
9f00492e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004931:	04 00                	add    al,0x0
9f004933:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004936:	00 00                	add    BYTE PTR [eax],al
9f004938:	a0 0b 00 00 38       	mov    al,ds:0x3800000b
9f00493d:	df ff                	(bad)  
9f00493f:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f004942:	00 00                	add    BYTE PTR [eax],al
9f004944:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004947:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00494d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f004950:	0c 04                	or     al,0x4
9f004952:	04 00                	add    al,0x0
9f004954:	1c 00                	sbb    al,0x0
9f004956:	00 00                	add    BYTE PTR [eax],al
9f004958:	c0 0b 00             	ror    BYTE PTR [ebx],0x0
9f00495b:	00 7f df             	add    BYTE PTR [edi-0x21],bh
9f00495e:	ff                   	(bad)  
9f00495f:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f004962:	00 00                	add    BYTE PTR [eax],al
9f004964:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004967:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00496d:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f004970:	0c 04                	or     al,0x4
9f004972:	04 00                	add    al,0x0
9f004974:	1c 00                	sbb    al,0x0
9f004976:	00 00                	add    BYTE PTR [eax],al
9f004978:	e0 0b                	loopne 9f004985 <__x86.get_pc_thunk.cx+0xbf1>
9f00497a:	00 00                	add    BYTE PTR [eax],al
9f00497c:	c8 df ff ff          	enter  0xffdf,0xff
9f004980:	60                   	pusha  
9f004981:	00 00                	add    BYTE PTR [eax],al
9f004983:	00 00                	add    BYTE PTR [eax],al
9f004985:	41                   	inc    ecx
9f004986:	0e                   	push   cs
9f004987:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00498d:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
9f004991:	04 04                	add    al,0x4
9f004993:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004996:	00 00                	add    BYTE PTR [eax],al
9f004998:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f00499b:	00 08                	add    BYTE PTR [eax],cl
9f00499d:	e0 ff                	loopne 9f00499e <__x86.get_pc_thunk.cx+0xc0a>
9f00499f:	ff 20                	jmp    DWORD PTR [eax]
9f0049a1:	00 00                	add    BYTE PTR [eax],al
9f0049a3:	00 00                	add    BYTE PTR [eax],al
9f0049a5:	41                   	inc    ecx
9f0049a6:	0e                   	push   cs
9f0049a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049ad:	5c                   	pop    esp
9f0049ae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0049b1:	04 00                	add    al,0x0
9f0049b3:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0049b6:	00 00                	add    BYTE PTR [eax],al
9f0049b8:	20 0c 00             	and    BYTE PTR [eax+eax*1],cl
9f0049bb:	00 08                	add    BYTE PTR [eax],cl
9f0049bd:	e0 ff                	loopne 9f0049be <__x86.get_pc_thunk.cx+0xc2a>
9f0049bf:	ff                   	(bad)  
9f0049c0:	7d 01                	jge    9f0049c3 <__x86.get_pc_thunk.cx+0xc2f>
9f0049c2:	00 00                	add    BYTE PTR [eax],al
9f0049c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0049c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049cd:	46                   	inc    esi
9f0049ce:	87 03                	xchg   DWORD PTR [ebx],eax
9f0049d0:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0049d3:	05 03 70 01 c3       	add    eax,0xc3017003
9f0049d8:	41                   	inc    ecx
9f0049d9:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0049dd:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0049e0:	04 00                	add    al,0x0
9f0049e2:	00 00                	add    BYTE PTR [eax],al
9f0049e4:	1c 00                	sbb    al,0x0
9f0049e6:	00 00                	add    BYTE PTR [eax],al
9f0049e8:	50                   	push   eax
9f0049e9:	0c 00                	or     al,0x0
9f0049eb:	00 58 e1             	add    BYTE PTR [eax-0x1f],bl
9f0049ee:	ff                   	(bad)  
9f0049ef:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0049f5:	41                   	inc    ecx
9f0049f6:	0e                   	push   cs
9f0049f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049fd:	59                   	pop    ecx
9f0049fe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004a01:	04 00                	add    al,0x0
9f004a03:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004a06:	00 00                	add    BYTE PTR [eax],al
9f004a08:	70 0c                	jo     9f004a16 <__x86.get_pc_thunk.cx+0xc82>
9f004a0a:	00 00                	add    BYTE PTR [eax],al
9f004a0c:	58                   	pop    eax
9f004a0d:	e1 ff                	loope  9f004a0e <__x86.get_pc_thunk.cx+0xc7a>
9f004a0f:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f004a16:	0e                   	push   cs
9f004a17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a1d:	46                   	inc    esi
9f004a1e:	87 03                	xchg   DWORD PTR [ebx],eax
9f004a20:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004a23:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f004a28:	41                   	inc    ecx
9f004a29:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004a2d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004a30:	04 00                	add    al,0x0
9f004a32:	00 00                	add    BYTE PTR [eax],al
9f004a34:	20 00                	and    BYTE PTR [eax],al
9f004a36:	00 00                	add    BYTE PTR [eax],al
9f004a38:	a0 0c 00 00 c4       	mov    al,ds:0xc400000c
9f004a3d:	e2 ff                	loop   9f004a3e <__x86.get_pc_thunk.cx+0xcaa>
9f004a3f:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f004a45:	41                   	inc    ecx
9f004a46:	0e                   	push   cs
9f004a47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a4d:	44                   	inc    esp
9f004a4e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a51:	8e c5                	mov    es,ebp
9f004a53:	c3                   	ret    
9f004a54:	0c 04                	or     al,0x4
9f004a56:	04 00                	add    al,0x0
9f004a58:	1c 00                	sbb    al,0x0
9f004a5a:	00 00                	add    BYTE PTR [eax],al
9f004a5c:	c4 0c 00             	les    ecx,FWORD PTR [eax+eax*1]
9f004a5f:	00 36                	add    BYTE PTR [esi],dh
9f004a61:	e3 ff                	jecxz  9f004a62 <__x86.get_pc_thunk.cx+0xcce>
9f004a63:	ff 20                	jmp    DWORD PTR [eax]
9f004a65:	00 00                	add    BYTE PTR [eax],al
9f004a67:	00 00                	add    BYTE PTR [eax],al
9f004a69:	41                   	inc    ecx
9f004a6a:	0e                   	push   cs
9f004a6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a71:	5c                   	pop    esp
9f004a72:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004a75:	04 00                	add    al,0x0
9f004a77:	00 28                	add    BYTE PTR [eax],ch
9f004a79:	00 00                	add    BYTE PTR [eax],al
9f004a7b:	00 e4                	add    ah,ah
9f004a7d:	0c 00                	or     al,0x0
9f004a7f:	00 38                	add    BYTE PTR [eax],bh
9f004a81:	e3 ff                	jecxz  9f004a82 <__x86.get_pc_thunk.cx+0xcee>
9f004a83:	ff 43 01             	inc    DWORD PTR [ebx+0x1]
9f004a86:	00 00                	add    BYTE PTR [eax],al
9f004a88:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a91:	45                   	inc    ebp
9f004a92:	86 03                	xchg   BYTE PTR [ebx],al
9f004a94:	83 04 03 38          	add    DWORD PTR [ebx+eax*1],0x38
9f004a98:	01 c3                	add    ebx,eax
9f004a9a:	41                   	inc    ecx
9f004a9b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004a9f:	04 04                	add    al,0x4
9f004aa1:	00 00                	add    BYTE PTR [eax],al
9f004aa3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004aa6:	00 00                	add    BYTE PTR [eax],al
9f004aa8:	10 0d 00 00 4f e4    	adc    BYTE PTR ds:0xe44f0000,cl
9f004aae:	ff                   	(bad)  
9f004aaf:	ff 26                	jmp    DWORD PTR [esi]
9f004ab1:	00 00                	add    BYTE PTR [eax],al
9f004ab3:	00 00                	add    BYTE PTR [eax],al
9f004ab5:	41                   	inc    ecx
9f004ab6:	0e                   	push   cs
9f004ab7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004abd:	62                   	(bad)  
9f004abe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004ac1:	04 00                	add    al,0x0
9f004ac3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004ac6:	00 00                	add    BYTE PTR [eax],al
9f004ac8:	30 0d 00 00 58 e4    	xor    BYTE PTR ds:0xe4580000,cl
9f004ace:	ff                   	(bad)  
9f004acf:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f004ad5:	41                   	inc    ecx
9f004ad6:	0e                   	push   cs
9f004ad7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004add:	45                   	inc    ebp
9f004ade:	86 03                	xchg   BYTE PTR [ebx],al
9f004ae0:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f004ae4:	c3                   	ret    
9f004ae5:	41                   	inc    ecx
9f004ae6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004aea:	04 04                	add    al,0x4
9f004aec:	24 00                	and    al,0x0
9f004aee:	00 00                	add    BYTE PTR [eax],al
9f004af0:	58                   	pop    eax
9f004af1:	0d 00 00 ce e4       	or     eax,0xe4ce0000
9f004af6:	ff                   	(bad)  
9f004af7:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f004afa:	00 00                	add    BYTE PTR [eax],al
9f004afc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004aff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b05:	42                   	inc    edx
9f004b06:	86 03                	xchg   BYTE PTR [ebx],al
9f004b08:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f004b0c:	c3                   	ret    
9f004b0d:	41                   	inc    ecx
9f004b0e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004b12:	04 04                	add    al,0x4
9f004b14:	1c 00                	sbb    al,0x0
9f004b16:	00 00                	add    BYTE PTR [eax],al
9f004b18:	80 0d 00 00 14 e5 ff 	or     BYTE PTR ds:0xe5140000,0xff
9f004b1f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004b25:	41                   	inc    ecx
9f004b26:	0e                   	push   cs
9f004b27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b2d:	59                   	pop    ecx
9f004b2e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b31:	04 00                	add    al,0x0
9f004b33:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004b36:	00 00                	add    BYTE PTR [eax],al
9f004b38:	a0 0d 00 00 14       	mov    al,ds:0x1400000d
9f004b3d:	e5 ff                	in     eax,0xff
9f004b3f:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f004b43:	00 00                	add    BYTE PTR [eax],al
9f004b45:	41                   	inc    ecx
9f004b46:	0e                   	push   cs
9f004b47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b4d:	45                   	inc    ebp
9f004b4e:	86 03                	xchg   BYTE PTR [ebx],al
9f004b50:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f004b54:	41                   	inc    ecx
9f004b55:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004b59:	04 04                	add    al,0x4
9f004b5b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004b5e:	00 00                	add    BYTE PTR [eax],al
9f004b60:	c8 0d 00 00          	enter  0xd,0x0
9f004b64:	30 e5                	xor    ch,ah
9f004b66:	ff                   	(bad)  
9f004b67:	ff 19                	call   FWORD PTR [ecx]
9f004b69:	03 00                	add    eax,DWORD PTR [eax]
9f004b6b:	00 00                	add    BYTE PTR [eax],al
9f004b6d:	41                   	inc    ecx
9f004b6e:	0e                   	push   cs
9f004b6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b75:	44                   	inc    esp
9f004b76:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004b79:	10 03                	adc    BYTE PTR [ebx],al
9f004b7b:	c3                   	ret    
9f004b7c:	41                   	inc    ecx
9f004b7d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b80:	04 00                	add    al,0x0
9f004b82:	00 00                	add    BYTE PTR [eax],al
9f004b84:	1c 00                	sbb    al,0x0
9f004b86:	00 00                	add    BYTE PTR [eax],al
9f004b88:	f0 0d 00 00 21 e8    	lock or eax,0xe8210000
9f004b8e:	ff                   	(bad)  
9f004b8f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004b95:	41                   	inc    ecx
9f004b96:	0e                   	push   cs
9f004b97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b9d:	59                   	pop    ecx
9f004b9e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004ba1:	04 00                	add    al,0x0
9f004ba3:	00 20                	add    BYTE PTR [eax],ah
9f004ba5:	00 00                	add    BYTE PTR [eax],al
9f004ba7:	00 10                	add    BYTE PTR [eax],dl
9f004ba9:	0e                   	push   cs
9f004baa:	00 00                	add    BYTE PTR [eax],al
9f004bac:	1e                   	push   ds
9f004bad:	e8 ff ff 46 00       	call   9f474bb1 <tmbuf+0x46ebf1>
9f004bb2:	00 00                	add    BYTE PTR [eax],al
9f004bb4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bbd:	44                   	inc    esp
9f004bbe:	83 03 7e             	add    DWORD PTR [ebx],0x7e
9f004bc1:	c5 c3 0c             	(bad)  
9f004bc4:	04 04                	add    al,0x4
9f004bc6:	00 00                	add    BYTE PTR [eax],al
9f004bc8:	1c 00                	sbb    al,0x0
9f004bca:	00 00                	add    BYTE PTR [eax],al
9f004bcc:	34 0e                	xor    al,0xe
9f004bce:	00 00                	add    BYTE PTR [eax],al
9f004bd0:	40                   	inc    eax
9f004bd1:	e8 ff ff 35 00       	call   9f364bd5 <tmbuf+0x35ec15>
9f004bd6:	00 00                	add    BYTE PTR [eax],al
9f004bd8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bdb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004be1:	71 c5                	jno    9f004ba8 <__x86.get_pc_thunk.cx+0xe14>
9f004be3:	0c 04                	or     al,0x4
9f004be5:	04 00                	add    al,0x0
9f004be7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004bea:	00 00                	add    BYTE PTR [eax],al
9f004bec:	54                   	push   esp
9f004bed:	0e                   	push   cs
9f004bee:	00 00                	add    BYTE PTR [eax],al
9f004bf0:	55                   	push   ebp
9f004bf1:	e8 ff ff 1d 00       	call   9f1e4bf5 <tmbuf+0x1dec35>
9f004bf6:	00 00                	add    BYTE PTR [eax],al
9f004bf8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bfb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c01:	59                   	pop    ecx
9f004c02:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c05:	04 00                	add    al,0x0
9f004c07:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004c0a:	00 00                	add    BYTE PTR [eax],al
9f004c0c:	74 0e                	je     9f004c1c <__x86.get_pc_thunk.cx+0xe88>
9f004c0e:	00 00                	add    BYTE PTR [eax],al
9f004c10:	52                   	push   edx
9f004c11:	e8 ff ff 57 08       	call   a7584c15 <tmbuf+0x857ec55>
9f004c16:	00 00                	add    BYTE PTR [eax],al
9f004c18:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c21:	46                   	inc    esi
9f004c22:	87 03                	xchg   DWORD PTR [ebx],eax
9f004c24:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004c27:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f004c2c:	41                   	inc    ecx
9f004c2d:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004c31:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c34:	04 00                	add    al,0x0
9f004c36:	00 00                	add    BYTE PTR [eax],al
9f004c38:	24 00                	and    al,0x0
9f004c3a:	00 00                	add    BYTE PTR [eax],al
9f004c3c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f004c3d:	0e                   	push   cs
9f004c3e:	00 00                	add    BYTE PTR [eax],al
9f004c40:	79 f0                	jns    9f004c32 <__x86.get_pc_thunk.cx+0xe9e>
9f004c42:	ff                   	(bad)  
9f004c43:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f004c46:	00 00                	add    BYTE PTR [eax],al
9f004c48:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c51:	45                   	inc    ebp
9f004c52:	86 03                	xchg   BYTE PTR [ebx],al
9f004c54:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f004c58:	c3                   	ret    
9f004c59:	41                   	inc    ecx
9f004c5a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004c5e:	04 04                	add    al,0x4
9f004c60:	20 00                	and    BYTE PTR [eax],al
9f004c62:	00 00                	add    BYTE PTR [eax],al
9f004c64:	cc                   	int3   
9f004c65:	0e                   	push   cs
9f004c66:	00 00                	add    BYTE PTR [eax],al
9f004c68:	be f0 ff ff 41       	mov    esi,0x41fffff0
9f004c6d:	00 00                	add    BYTE PTR [eax],al
9f004c6f:	00 00                	add    BYTE PTR [eax],al
9f004c71:	41                   	inc    ecx
9f004c72:	0e                   	push   cs
9f004c73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c79:	44                   	inc    esp
9f004c7a:	83 03 79             	add    DWORD PTR [ebx],0x79
9f004c7d:	c5 c3 0c             	(bad)  
9f004c80:	04 04                	add    al,0x4
9f004c82:	00 00                	add    BYTE PTR [eax],al
9f004c84:	10 00                	adc    BYTE PTR [eax],al
9f004c86:	00 00                	add    BYTE PTR [eax],al
9f004c88:	f0 0e                	lock push cs
9f004c8a:	00 00                	add    BYTE PTR [eax],al
9f004c8c:	08 f1                	or     cl,dh
9f004c8e:	ff                   	(bad)  
9f004c8f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f004c92:	00 00                	add    BYTE PTR [eax],al
9f004c94:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f004c98 <.dynsym>:
	...
9f004ca8:	5a                   	pop    edx
9f004ca9:	01 00                	add    DWORD PTR [eax],eax
9f004cab:	00 bc 26 00 9f 40 00 	add    BYTE PTR [esi+eiz*1+0x409f00],bh
9f004cb2:	00 00                	add    BYTE PTR [eax],al
9f004cb4:	12 00                	adc    al,BYTE PTR [eax]
9f004cb6:	01 00                	add    DWORD PTR [eax],eax
9f004cb8:	ea 00 00 00 7c 11 00 	jmp    0x11:0x7c000000
9f004cbf:	9f                   	lahf   
9f004cc0:	1c 00                	sbb    al,0x0
9f004cc2:	00 00                	add    BYTE PTR [eax],al
9f004cc4:	12 00                	adc    al,BYTE PTR [eax]
9f004cc6:	01 00                	add    DWORD PTR [eax],eax
9f004cc8:	b4 00                	mov    ah,0x0
9f004cca:	00 00                	add    BYTE PTR [eax],al
9f004ccc:	a0 0c 00 9f 59       	mov    al,ds:0x599f000c
9f004cd1:	00 00                	add    BYTE PTR [eax],al
9f004cd3:	00 12                	add    BYTE PTR [edx],dl
9f004cd5:	00 01                	add    BYTE PTR [ecx],al
9f004cd7:	00 ba 00 00 00 f9    	add    BYTE PTR [edx-0x7000000],bh
9f004cdd:	0c 00                	or     al,0x0
9f004cdf:	9f                   	lahf   
9f004ce0:	54                   	push   esp
9f004ce1:	00 00                	add    BYTE PTR [eax],al
9f004ce3:	00 12                	add    BYTE PTR [edx],dl
9f004ce5:	00 01                	add    BYTE PTR [ecx],al
9f004ce7:	00 3d 00 00 00 14    	add    BYTE PTR ds:0x14000000,bh
9f004ced:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f004cf2:	00 00                	add    BYTE PTR [eax],al
9f004cf4:	12 00                	adc    al,BYTE PTR [eax]
9f004cf6:	01 00                	add    DWORD PTR [eax],eax
9f004cf8:	69 01 00 00 b4 27    	imul   eax,DWORD PTR [ecx],0x27b40000
9f004cfe:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f004d04:	12 00                	adc    al,BYTE PTR [eax]
9f004d06:	01 00                	add    DWORD PTR [eax],eax
9f004d08:	43                   	inc    ebx
9f004d09:	01 00                	add    DWORD PTR [eax],eax
9f004d0b:	00 ec                	add    ah,ch
9f004d0d:	24 00                	and    al,0x0
9f004d0f:	9f                   	lahf   
9f004d10:	84 00                	test   BYTE PTR [eax],al
9f004d12:	00 00                	add    BYTE PTR [eax],al
9f004d14:	12 00                	adc    al,BYTE PTR [eax]
9f004d16:	01 00                	add    DWORD PTR [eax],eax
9f004d18:	53                   	push   ebx
9f004d19:	00 00                	add    BYTE PTR [eax],al
9f004d1b:	00 70 05             	add    BYTE PTR [eax+0x5],dh
9f004d1e:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
9f004d24:	12 00                	adc    al,BYTE PTR [eax]
9f004d26:	01 00                	add    DWORD PTR [eax],eax
9f004d28:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f004d29:	00 00                	add    BYTE PTR [eax],al
9f004d2b:	00 d0                	add    al,dl
9f004d2d:	09 00                	or     DWORD PTR [eax],eax
9f004d2f:	9f                   	lahf   
9f004d30:	ba 00 00 00 12       	mov    edx,0x12000000
9f004d35:	00 01                	add    BYTE PTR [ecx],al
9f004d37:	00 30                	add    BYTE PTR [eax],dh
9f004d39:	01 00                	add    DWORD PTR [eax],eax
9f004d3b:	00 9f 1c 00 9f 20    	add    BYTE PTR [edi+0x209f001c],bl
9f004d41:	00 00                	add    BYTE PTR [eax],al
9f004d43:	00 12                	add    BYTE PTR [edx],dl
9f004d45:	00 01                	add    BYTE PTR [ecx],al
9f004d47:	00 fe                	add    dh,bh
9f004d49:	00 00                	add    BYTE PTR [eax],al
9f004d4b:	00 1c 13             	add    BYTE PTR [ebx+edx*1],bl
9f004d4e:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f004d54:	12 00                	adc    al,BYTE PTR [eax]
9f004d56:	01 00                	add    DWORD PTR [eax],eax
9f004d58:	83 00 00             	add    DWORD PTR [eax],0x0
9f004d5b:	00 24 09             	add    BYTE PTR [ecx+ecx*1],ah
9f004d5e:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f004d64:	12 00                	adc    al,BYTE PTR [eax]
9f004d66:	01 00                	add    DWORD PTR [eax],eax
9f004d68:	1c 01                	sbb    al,0x1
9f004d6a:	00 00                	add    BYTE PTR [eax],al
9f004d6c:	ed                   	in     eax,dx
9f004d6d:	19 00                	sbb    DWORD PTR [eax],eax
9f004d6f:	9f                   	lahf   
9f004d70:	20 00                	and    BYTE PTR [eax],al
9f004d72:	00 00                	add    BYTE PTR [eax],al
9f004d74:	12 00                	adc    al,BYTE PTR [eax]
9f004d76:	01 00                	add    DWORD PTR [eax],eax
9f004d78:	c1 00 00             	rol    DWORD PTR [eax],0x0
9f004d7b:	00 0c 0e             	add    BYTE PTR [esi+ecx*1],cl
9f004d7e:	00 9f 72 00 00 00    	add    BYTE PTR [edi+0x72],bl
9f004d84:	12 00                	adc    al,BYTE PTR [eax]
9f004d86:	01 00                	add    DWORD PTR [eax],eax
9f004d88:	04 01                	add    al,0x1
9f004d8a:	00 00                	add    BYTE PTR [eax],al
9f004d8c:	39 16                	cmp    DWORD PTR [esi],edx
9f004d8e:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f004d94:	12 00                	adc    al,BYTE PTR [eax]
9f004d96:	01 00                	add    DWORD PTR [eax],eax
9f004d98:	89 01                	mov    DWORD PTR [ecx],eax
9f004d9a:	00 00                	add    BYTE PTR [eax],al
9f004d9c:	c4 29                	les    ebp,FWORD PTR [ecx]
9f004d9e:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
9f004da4:	12 00                	adc    al,BYTE PTR [eax]
9f004da6:	01 00                	add    DWORD PTR [eax],eax
9f004da8:	17                   	pop    ss
9f004da9:	00 00                	add    BYTE PTR [eax],al
9f004dab:	00 2b                	add    BYTE PTR [ebx],ch
9f004dad:	02 00                	add    al,BYTE PTR [eax]
9f004daf:	9f                   	lahf   
9f004db0:	bb 00 00 00 12       	mov    ebx,0x12000000
9f004db5:	00 01                	add    BYTE PTR [ecx],al
9f004db7:	00 17                	add    BYTE PTR [edi],dl
9f004db9:	01 00                	add    DWORD PTR [eax],eax
9f004dbb:	00 78 16             	add    BYTE PTR [eax+0x16],bh
9f004dbe:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
9f004dc4:	12 00                	adc    al,BYTE PTR [eax]
9f004dc6:	01 00                	add    DWORD PTR [eax],eax
9f004dc8:	c3                   	ret    
9f004dc9:	01 00                	add    DWORD PTR [eax],eax
9f004dcb:	00 ad 33 00 9f 1d    	add    BYTE PTR [ebp+0x1d9f0033],ch
9f004dd1:	00 00                	add    BYTE PTR [eax],al
9f004dd3:	00 12                	add    BYTE PTR [edx],dl
9f004dd5:	00 01                	add    BYTE PTR [ecx],al
9f004dd7:	00 99 01 00 00 64    	add    BYTE PTR [ecx+0x64000001],bl
9f004ddd:	2b 00                	sub    eax,DWORD PTR [eax]
9f004ddf:	9f                   	lahf   
9f004de0:	9c                   	pushf  
9f004de1:	01 00                	add    DWORD PTR [eax],eax
9f004de3:	00 12                	add    BYTE PTR [edx],dl
9f004de5:	00 01                	add    BYTE PTR [ecx],al
9f004de7:	00 aa 00 00 00 c2    	add    BYTE PTR [edx-0x3e000000],ch
9f004ded:	0b 00                	or     eax,DWORD PTR [eax]
9f004def:	9f                   	lahf   
9f004df0:	bf 00 00 00 12       	mov    edi,0x12000000
9f004df5:	00 01                	add    BYTE PTR [ecx],al
9f004df7:	00 3e                	add    BYTE PTR [esi],bh
9f004df9:	01 00                	add    DWORD PTR [eax],eax
9f004dfb:	00 a8 1d 00 9f 29    	add    BYTE PTR [eax+0x299f001d],ch
9f004e01:	00 00                	add    BYTE PTR [eax],al
9f004e03:	00 12                	add    BYTE PTR [edx],dl
9f004e05:	00 01                	add    BYTE PTR [ecx],al
9f004e07:	00 de                	add    dh,bl
9f004e09:	00 00                	add    BYTE PTR [eax],al
9f004e0b:	00 39                	add    BYTE PTR [ecx],bh
9f004e0d:	0f 00 9f f4 01 00 00 	ltr    WORD PTR [edi+0x1f4]
9f004e14:	12 00                	adc    al,BYTE PTR [eax]
9f004e16:	01 00                	add    DWORD PTR [eax],eax
9f004e18:	78 00                	js     9f004e1a <__x86.get_pc_thunk.cx+0x1086>
9f004e1a:	00 00                	add    BYTE PTR [eax],al
9f004e1c:	ce                   	into   
9f004e1d:	08 00                	or     BYTE PTR [eax],al
9f004e1f:	9f                   	lahf   
9f004e20:	26 00 00             	add    BYTE PTR es:[eax],al
9f004e23:	00 12                	add    BYTE PTR [edx],dl
9f004e25:	00 01                	add    BYTE PTR [ecx],al
9f004e27:	00 4c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],cl
9f004e2b:	00 70 25             	add    BYTE PTR [eax+0x25],dh
9f004e2e:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f004e34:	12 00                	adc    al,BYTE PTR [eax]
9f004e36:	01 00                	add    DWORD PTR [eax],eax
9f004e38:	ba 01 00 00 50       	mov    edx,0x50000001
9f004e3d:	30 00                	xor    BYTE PTR [eax],al
9f004e3f:	9f                   	lahf   
9f004e40:	44                   	inc    esp
9f004e41:	00 00                	add    BYTE PTR [eax],al
9f004e43:	00 12                	add    BYTE PTR [edx],dl
9f004e45:	00 01                	add    BYTE PTR [ecx],al
9f004e47:	00 d9                	add    cl,bl
9f004e49:	00 00                	add    BYTE PTR [eax],al
9f004e4b:	00 ed                	add    ch,ch
9f004e4d:	0e                   	push   cs
9f004e4e:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
9f004e54:	12 00                	adc    al,BYTE PTR [eax]
9f004e56:	01 00                	add    DWORD PTR [eax],eax
9f004e58:	12 01                	adc    al,BYTE PTR [ecx]
9f004e5a:	00 00                	add    BYTE PTR [eax],al
9f004e5c:	5c                   	pop    esp
9f004e5d:	16                   	push   ss
9f004e5e:	00 9f 19 00 00 00    	add    BYTE PTR [edi+0x19],bl
9f004e64:	12 00                	adc    al,BYTE PTR [eax]
9f004e66:	01 00                	add    DWORD PTR [eax],eax
9f004e68:	61                   	popa   
9f004e69:	00 00                	add    BYTE PTR [eax],al
9f004e6b:	00 dc                	add    ah,bl
9f004e6d:	07                   	pop    es
9f004e6e:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
9f004e74:	12 00                	adc    al,BYTE PTR [eax]
9f004e76:	01 00                	add    DWORD PTR [eax],eax
9f004e78:	e2 01                	loop   9f004e7b <__x86.get_pc_thunk.cx+0x10e7>
9f004e7a:	00 00                	add    BYTE PTR [eax],al
9f004e7c:	62 34 00             	bound  esi,QWORD PTR [eax+eax*1]
9f004e7f:	9f                   	lahf   
9f004e80:	57                   	push   edi
9f004e81:	08 00                	or     BYTE PTR [eax],al
9f004e83:	00 12                	add    BYTE PTR [edx],dl
9f004e85:	00 01                	add    BYTE PTR [ecx],al
9f004e87:	00 b3 01 00 00 30    	add    BYTE PTR [ebx+0x30000001],dh
9f004e8d:	30 00                	xor    BYTE PTR [eax],al
9f004e8f:	9f                   	lahf   
9f004e90:	1d 00 00 00 12       	sbb    eax,0x12000000
9f004e95:	00 01                	add    BYTE PTR [ecx],al
9f004e97:	00 73 00             	add    BYTE PTR [ebx+0x0],dh
9f004e9a:	00 00                	add    BYTE PTR [eax],al
9f004e9c:	64 08 00             	or     BYTE PTR fs:[eax],al
9f004e9f:	9f                   	lahf   
9f004ea0:	35 00 00 00 12       	xor    eax,0x12000000
9f004ea5:	00 01                	add    BYTE PTR [ecx],al
9f004ea7:	00 79 01             	add    BYTE PTR [ecx+0x1],bh
9f004eaa:	00 00                	add    BYTE PTR [eax],al
9f004eac:	74 28                	je     9f004ed6 <__x86.get_pc_thunk.cx+0x1142>
9f004eae:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
9f004eb4:	12 00                	adc    al,BYTE PTR [eax]
9f004eb6:	01 00                	add    DWORD PTR [eax],eax
9f004eb8:	81 01 00 00 a4 29    	add    DWORD PTR [ecx],0x29a40000
9f004ebe:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f004ec4:	12 00                	adc    al,BYTE PTR [eax]
9f004ec6:	01 00                	add    DWORD PTR [eax],eax
9f004ec8:	5a                   	pop    edx
9f004ec9:	00 00                	add    BYTE PTR [eax],al
9f004ecb:	00 1a                	add    BYTE PTR [edx],bl
9f004ecd:	06                   	push   es
9f004ece:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f004ed4:	12 00                	adc    al,BYTE PTR [eax]
9f004ed6:	01 00                	add    DWORD PTR [eax],eax
9f004ed8:	23 01                	and    eax,DWORD PTR [ecx]
9f004eda:	00 00                	add    BYTE PTR [eax],al
9f004edc:	92                   	xchg   edx,eax
9f004edd:	1a 00                	sbb    al,BYTE PTR [eax]
9f004edf:	9f                   	lahf   
9f004ee0:	23 00                	and    eax,DWORD PTR [eax]
9f004ee2:	00 00                	add    BYTE PTR [eax],al
9f004ee4:	12 00                	adc    al,BYTE PTR [eax]
9f004ee6:	01 00                	add    DWORD PTR [eax],eax
9f004ee8:	10 00                	adc    BYTE PTR [eax],al
9f004eea:	00 00                	add    BYTE PTR [eax],al
9f004eec:	1c 01                	sbb    al,0x1
9f004eee:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f004ef4:	12 00                	adc    al,BYTE PTR [eax]
9f004ef6:	01 00                	add    DWORD PTR [eax],eax
9f004ef8:	d4 00                	aam    0x0
9f004efa:	00 00                	add    BYTE PTR [eax],al
9f004efc:	c4 0e                	les    ecx,FWORD PTR [esi]
9f004efe:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f004f04:	12 00                	adc    al,BYTE PTR [eax]
9f004f06:	01 00                	add    DWORD PTR [eax],eax
9f004f08:	88 00                	mov    BYTE PTR [eax],al
9f004f0a:	00 00                	add    BYTE PTR [eax],al
9f004f0c:	00 00                	add    BYTE PTR [eax],al
9f004f0e:	13 00                	adc    eax,DWORD PTR [eax]
9f004f10:	00 00                	add    BYTE PTR [eax],al
9f004f12:	00 00                	add    BYTE PTR [eax],al
9f004f14:	10 00                	adc    BYTE PTR [eax],al
9f004f16:	01 00                	add    DWORD PTR [eax],eax
9f004f18:	cc                   	int3   
9f004f19:	01 00                	add    DWORD PTR [eax],eax
9f004f1b:	00 ca                	add    dl,cl
9f004f1d:	33 00                	xor    eax,DWORD PTR [eax]
9f004f1f:	9f                   	lahf   
9f004f20:	46                   	inc    esi
9f004f21:	00 00                	add    BYTE PTR [eax],al
9f004f23:	00 12                	add    BYTE PTR [edx],dl
9f004f25:	00 01                	add    BYTE PTR [ecx],al
9f004f27:	00 37                	add    BYTE PTR [edi],dh
9f004f29:	01 00                	add    DWORD PTR [eax],eax
9f004f2b:	00 87 1d 00 9f 20    	add    BYTE PTR [edi+0x209f001d],al
9f004f31:	00 00                	add    BYTE PTR [eax],al
9f004f33:	00 12                	add    BYTE PTR [edx],dl
9f004f35:	00 01                	add    BYTE PTR [ecx],al
9f004f37:	00 a0 01 00 00 96    	add    BYTE PTR [eax-0x69ffffff],ah
9f004f3d:	2d 00 9f 20 00       	sub    eax,0x209f00
9f004f42:	00 00                	add    BYTE PTR [eax],al
9f004f44:	12 00                	adc    al,BYTE PTR [eax]
9f004f46:	01 00                	add    DWORD PTR [eax],eax
9f004f48:	9d                   	popf   
9f004f49:	00 00                	add    BYTE PTR [eax],al
9f004f4b:	00 8d 09 00 9f 43    	add    BYTE PTR [ebp+0x439f0009],cl
9f004f51:	00 00                	add    BYTE PTR [eax],al
9f004f53:	00 12                	add    BYTE PTR [edx],dl
9f004f55:	00 01                	add    BYTE PTR [ecx],al
9f004f57:	00 e4                	add    ah,ah
9f004f59:	01 00                	add    DWORD PTR [eax],eax
9f004f5b:	00 26                	add    BYTE PTR [esi],ah
9f004f5d:	3d 00 9f 41 00       	cmp    eax,0x419f00
9f004f62:	00 00                	add    BYTE PTR [eax],al
9f004f64:	12 00                	adc    al,BYTE PTR [eax]
9f004f66:	01 00                	add    DWORD PTR [eax],eax
9f004f68:	7e 00                	jle    9f004f6a <__x86.get_pc_thunk.cx+0x11d6>
9f004f6a:	00 00                	add    BYTE PTR [eax],al
9f004f6c:	f4                   	hlt    
9f004f6d:	08 00                	or     BYTE PTR [eax],al
9f004f6f:	9f                   	lahf   
9f004f70:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f004f73:	00 12                	add    BYTE PTR [edx],dl
9f004f75:	00 01                	add    BYTE PTR [ecx],al
9f004f77:	00 98 00 00 00 4a    	add    BYTE PTR [eax+0x4a000000],bl
9f004f7d:	09 00                	or     DWORD PTR [eax],eax
9f004f7f:	9f                   	lahf   
9f004f80:	43                   	inc    ebx
9f004f81:	00 00                	add    BYTE PTR [eax],al
9f004f83:	00 12                	add    BYTE PTR [edx],dl
9f004f85:	00 01                	add    BYTE PTR [ecx],al
9f004f87:	00 53 01             	add    BYTE PTR [ebx+0x1],dl
9f004f8a:	00 00                	add    BYTE PTR [eax],al
9f004f8c:	5c                   	pop    esp
9f004f8d:	26 00 9f 5e 00 00 00 	add    BYTE PTR es:[edi+0x5e],bl
9f004f94:	12 00                	adc    al,BYTE PTR [eax]
9f004f96:	01 00                	add    DWORD PTR [eax],eax
9f004f98:	f7 00 00 00 b8 11    	test   DWORD PTR [eax],0x11b80000
9f004f9e:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f004fa4:	12 00                	adc    al,BYTE PTR [eax]
9f004fa6:	01 00                	add    DWORD PTR [eax],eax
9f004fa8:	08 00                	or     BYTE PTR [eax],al
9f004faa:	00 00                	add    BYTE PTR [eax],al
9f004fac:	70 00                	jo     9f004fae <__x86.get_pc_thunk.cx+0x121a>
9f004fae:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f004fb4:	12 00                	adc    al,BYTE PTR [eax]
9f004fb6:	01 00                	add    DWORD PTR [eax],eax
9f004fb8:	61                   	popa   
9f004fb9:	01 00                	add    DWORD PTR [eax],eax
9f004fbb:	00 3c 27             	add    BYTE PTR [edi+eiz*1],bh
9f004fbe:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f004fc4:	12 00                	adc    al,BYTE PTR [eax]
9f004fc6:	01 00                	add    DWORD PTR [eax],eax
9f004fc8:	c7 00 00 00 9b 0e    	mov    DWORD PTR [eax],0xe9b0000
9f004fce:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f004fd4:	12 00                	adc    al,BYTE PTR [eax]
9f004fd6:	01 00                	add    DWORD PTR [eax],eax
9f004fd8:	d6                   	(bad)  
9f004fd9:	01 00                	add    DWORD PTR [eax],eax
9f004fdb:	00 45 34             	add    BYTE PTR [ebp+0x34],al
9f004fde:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f004fe4:	12 00                	adc    al,BYTE PTR [eax]
9f004fe6:	01 00                	add    DWORD PTR [eax],eax
9f004fe8:	e9 01 00 00 b9       	jmp    58004fee <sysEnter_Vector+0x57ed4fee>
9f004fed:	3c 00                	cmp    al,0x0
9f004fef:	9f                   	lahf   
9f004ff0:	6d                   	ins    DWORD PTR es:[edi],dx
9f004ff1:	00 00                	add    BYTE PTR [eax],al
9f004ff3:	00 12                	add    BYTE PTR [edx],dl
9f004ff5:	00 01                	add    BYTE PTR [ecx],al
9f004ff7:	00 f2                	add    dl,dh
9f004ff9:	00 00                	add    BYTE PTR [eax],al
9f004ffb:	00 98 11 00 9f 20    	add    BYTE PTR [eax+0x209f0011],bl
9f005001:	00 00                	add    BYTE PTR [eax],al
9f005003:	00 12                	add    BYTE PTR [edx],dl
9f005005:	00 01                	add    BYTE PTR [ecx],al
9f005007:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00500a:	00 00                	add    BYTE PTR [eax],al
9f00500c:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
9f005011:	00 00                	add    BYTE PTR [eax],al
9f005013:	00 12                	add    BYTE PTR [edx],dl
9f005015:	00 01                	add    BYTE PTR [ecx],al
9f005017:	00 72 01             	add    BYTE PTR [edx+0x1],dh
9f00501a:	00 00                	add    BYTE PTR [eax],al
9f00501c:	10 28                	adc    BYTE PTR [eax],ch
9f00501e:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
9f005024:	12 00                	adc    al,BYTE PTR [eax]
9f005026:	01 00                	add    DWORD PTR [eax],eax
9f005028:	68 00 00 00 0d       	push   0xd000000
9f00502d:	08 00                	or     BYTE PTR [eax],al
9f00502f:	9f                   	lahf   
9f005030:	2d 00 00 00 12       	sub    eax,0x12000000
9f005035:	00 01                	add    BYTE PTR [ecx],al
9f005037:	00 2a                	add    BYTE PTR [edx],ch
9f005039:	00 00                	add    BYTE PTR [eax],al
9f00503b:	00 ba 04 00 9f 5a    	add    BYTE PTR [edx+0x5a9f0004],bh
9f005041:	00 00                	add    BYTE PTR [eax],al
9f005043:	00 12                	add    BYTE PTR [edx],dl
9f005045:	00 01                	add    BYTE PTR [ecx],al
9f005047:	00 e4                	add    ah,ah
9f005049:	00 00                	add    BYTE PTR [eax],al
9f00504b:	00 2d 11 00 9f 4f    	add    BYTE PTR ds:0x4f9f0011,ch
9f005051:	00 00                	add    BYTE PTR [eax],al
9f005053:	00 12                	add    BYTE PTR [edx],dl
9f005055:	00 01                	add    BYTE PTR [ecx],al
9f005057:	00 01                	add    BYTE PTR [ecx],al
9f005059:	00 00                	add    BYTE PTR [eax],al
9f00505b:	00 00                	add    BYTE PTR [eax],al
9f00505d:	00 00                	add    BYTE PTR [eax],al
9f00505f:	9f                   	lahf   
9f005060:	38 00                	cmp    BYTE PTR [eax],al
9f005062:	00 00                	add    BYTE PTR [eax],al
9f005064:	12 00                	adc    al,BYTE PTR [eax]
9f005066:	01 00                	add    DWORD PTR [eax],eax
9f005068:	91                   	xchg   ecx,eax
9f005069:	01 00                	add    DWORD PTR [eax],eax
9f00506b:	00 44 2b 00          	add    BYTE PTR [ebx+ebp*1+0x0],al
9f00506f:	9f                   	lahf   
9f005070:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005075:	00 01                	add    BYTE PTR [ecx],al
9f005077:	00 a8 01 00 00 fb    	add    BYTE PTR [eax-0x4ffffff],ch
9f00507d:	2e 00 9f 26 00 00 00 	add    BYTE PTR cs:[edi+0x26],bl
9f005084:	12 00                	adc    al,BYTE PTR [eax]
9f005086:	01 00                	add    DWORD PTR [eax],eax
9f005088:	6d                   	ins    DWORD PTR es:[edi],dx
9f005089:	00 00                	add    BYTE PTR [eax],al
9f00508b:	00 3a                	add    BYTE PTR [edx],bh
9f00508d:	08 00                	or     BYTE PTR [eax],al
9f00508f:	9f                   	lahf   
9f005090:	2a 00                	sub    al,BYTE PTR [eax]
9f005092:	00 00                	add    BYTE PTR [eax],al
9f005094:	12 00                	adc    al,BYTE PTR [eax]
9f005096:	01 00                	add    DWORD PTR [eax],eax
9f005098:	21 00                	and    DWORD PTR [eax],eax
9f00509a:	00 00                	add    BYTE PTR [eax],al
9f00509c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f00509f:	9f                   	lahf   
9f0050a0:	ba 00 00 00 12       	mov    edx,0x12000000
9f0050a5:	00 01                	add    BYTE PTR [ecx],al
9f0050a7:	00 2b                	add    BYTE PTR [ebx],ch
9f0050a9:	01 00                	add    DWORD PTR [eax],eax
9f0050ab:	00 b5 1a 00 9f 1b    	add    BYTE PTR [ebp+0x1b9f001a],dh
9f0050b1:	00 00                	add    BYTE PTR [eax],al
9f0050b3:	00 12                	add    BYTE PTR [edx],dl
9f0050b5:	00 01                	add    BYTE PTR [ecx],al
	...

Disassembly of section .dynstr:

9f0050b8 <.dynstr>:
9f0050b8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0050bb:	72 63                	jb     9f005120 <__x86.get_pc_thunk.cx+0x138c>
9f0050bd:	68 72 00 73 74       	push   0x74730072
9f0050c2:	72 63                	jb     9f005127 <__x86.get_pc_thunk.cx+0x1393>
9f0050c4:	73 70                	jae    9f005136 <__x86.get_pc_thunk.cx+0x13a2>
9f0050c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0050c7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0050ca:	72 74                	jb     9f005140 <__x86.get_pc_thunk.cx+0x13ac>
9f0050cc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0050cd:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f0050d0:	74 6f                	je     9f005141 <__x86.get_pc_thunk.cx+0x13ad>
9f0050d2:	61                   	popa   
9f0050d3:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f0050d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0050d7:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f0050dd:	54                   	push   esp
9f0050de:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0050df:	58                   	pop    eax
9f0050e0:	59                   	pop    ecx
9f0050e1:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f0050e4:	76 65                	jbe    9f00514b <__x86.get_pc_thunk.cx+0x13b7>
9f0050e6:	43                   	inc    ebx
9f0050e7:	75 72                	jne    9f00515b <__x86.get_pc_thunk.cx+0x13c7>
9f0050e9:	73 6f                	jae    9f00515a <__x86.get_pc_thunk.cx+0x13c6>
9f0050eb:	72 50                	jb     9f00513d <__x86.get_pc_thunk.cx+0x13a9>
9f0050ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0050ee:	73 69                	jae    9f005159 <__x86.get_pc_thunk.cx+0x13c5>
9f0050f0:	74 69                	je     9f00515b <__x86.get_pc_thunk.cx+0x13c7>
9f0050f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0050f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0050f4:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f0050f7:	73 74                	jae    9f00516d <__x86.get_pc_thunk.cx+0x13d9>
9f0050f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0050fa:	72 65                	jb     9f005161 <__x86.get_pc_thunk.cx+0x13cd>
9f0050fc:	43                   	inc    ebx
9f0050fd:	75 72                	jne    9f005171 <__x86.get_pc_thunk.cx+0x13dd>
9f0050ff:	73 6f                	jae    9f005170 <__x86.get_pc_thunk.cx+0x13dc>
9f005101:	72 50                	jb     9f005153 <__x86.get_pc_thunk.cx+0x13bf>
9f005103:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005104:	73 69                	jae    9f00516f <__x86.get_pc_thunk.cx+0x13db>
9f005106:	74 69                	je     9f005171 <__x86.get_pc_thunk.cx+0x13dd>
9f005108:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005109:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00510a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00510d:	74 65                	je     9f005174 <__x86.get_pc_thunk.cx+0x13e0>
9f00510f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005110:	76 00                	jbe    9f005112 <__x86.get_pc_thunk.cx+0x137e>
9f005112:	73 65                	jae    9f005179 <__x86.get_pc_thunk.cx+0x13e5>
9f005114:	74 65                	je     9f00517b <__x86.get_pc_thunk.cx+0x13e7>
9f005116:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005117:	76 00                	jbe    9f005119 <__x86.get_pc_thunk.cx+0x1385>
9f005119:	67                   	addr16
9f00511a:	65                   	gs
9f00511b:	74 64                	je     9f005181 <__x86.get_pc_thunk.cx+0x13ed>
9f00511d:	69 72 00 6f 70 65 6e 	imul   esi,DWORD PTR [edx+0x0],0x6e65706f
9f005124:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f005127:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005128:	73 65                	jae    9f00518f <__x86.get_pc_thunk.cx+0x13fb>
9f00512a:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00512d:	61                   	popa   
9f00512e:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f005132:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f005139:	6b 
9f00513a:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f00513d:	74 73                	je     9f0051b2 <__x86.get_pc_thunk.cx+0x141e>
9f00513f:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
9f005142:	73 45                	jae    9f005189 <__x86.get_pc_thunk.cx+0x13f5>
9f005144:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005145:	74 65                	je     9f0051ac <__x86.get_pc_thunk.cx+0x1418>
9f005147:	72 5f                	jb     9f0051a8 <__x86.get_pc_thunk.cx+0x1414>
9f005149:	56                   	push   esi
9f00514a:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f00514f:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f005152:	74 63                	je     9f0051b7 <__x86.get_pc_thunk.cx+0x1423>
9f005154:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f005157:	74 63                	je     9f0051bc <__x86.get_pc_thunk.cx+0x1428>
9f005159:	68 61 72 00 67       	push   0x67007261
9f00515e:	65                   	gs
9f00515f:	74 73                	je     9f0051d4 <__x86.get_pc_thunk.cx+0x1440>
9f005161:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005165:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f005168:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005169:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f005170:	74 
9f005171:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f005174:	69 6e 74 66 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730066
9f00517b:	65                   	gs
9f00517c:	65                   	gs
9f00517d:	70 00                	jo     9f00517f <__x86.get_pc_thunk.cx+0x13eb>
9f00517f:	6d                   	ins    DWORD PTR es:[edi],dx
9f005180:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005181:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f005188:	6e 
9f005189:	61                   	popa   
9f00518a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00518b:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f00518e:	72 6b                	jb     9f0051fb <__x86.get_pc_thunk.cx+0x1467>
9f005190:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f005193:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f005196:	65                   	gs
9f005197:	78 65                	js     9f0051fe <__x86.get_pc_thunk.cx+0x146a>
9f005199:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f00519c:	65                   	gs
9f00519d:	78 65                	js     9f005204 <__x86.get_pc_thunk.cx+0x1470>
9f00519f:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f0051a2:	77 61                	ja     9f005205 <__x86.get_pc_thunk.cx+0x1471>
9f0051a4:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f0051ab:	78 
9f0051ac:	69 74 00 67 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x67],0x77637465
9f0051b3:	77 
9f0051b4:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f0051b8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0051b9:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f0051c0:	69 
9f0051c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0051c2:	65                   	gs
9f0051c3:	54                   	push   esp
9f0051c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051c5:	41                   	inc    ecx
9f0051c6:	72 67                	jb     9f00522f <__x86.get_pc_thunk.cx+0x149b>
9f0051c8:	76 00                	jbe    9f0051ca <__x86.get_pc_thunk.cx+0x1436>
9f0051ca:	74 65                	je     9f005231 <__x86.get_pc_thunk.cx+0x149d>
9f0051cc:	73 74                	jae    9f005242 <__x86.get_pc_thunk.cx+0x14ae>
9f0051ce:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f0051d1:	61                   	popa   
9f0051d2:	70 00                	jo     9f0051d4 <__x86.get_pc_thunk.cx+0x1440>
9f0051d4:	6d                   	ins    DWORD PTR es:[edi],dx
9f0051d5:	61                   	popa   
9f0051d6:	6c                   	ins    BYTE PTR es:[edi],dx
9f0051d7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0051d8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051d9:	63 00                	arpl   WORD PTR [eax],ax
9f0051db:	72 65                	jb     9f005242 <__x86.get_pc_thunk.cx+0x14ae>
9f0051dd:	61                   	popa   
9f0051de:	6c                   	ins    BYTE PTR es:[edi],dx
9f0051df:	6c                   	ins    BYTE PTR es:[edi],dx
9f0051e0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051e1:	63 00                	arpl   WORD PTR [eax],ax
9f0051e3:	66                   	data16
9f0051e4:	72 65                	jb     9f00524b <__x86.get_pc_thunk.cx+0x14b7>
9f0051e6:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f0051ea:	6d                   	ins    DWORD PTR es:[edi],dx
9f0051eb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f0051ee:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f0051f1:	6d                   	ins    DWORD PTR es:[edi],dx
9f0051f2:	73 65                	jae    9f005259 <__x86.get_pc_thunk.cx+0x14c5>
9f0051f4:	74 00                	je     9f0051f6 <__x86.get_pc_thunk.cx+0x1462>
9f0051f6:	70 69                	jo     9f005261 <__x86.get_pc_thunk.cx+0x14cd>
9f0051f8:	70 65                	jo     9f00525f <__x86.get_pc_thunk.cx+0x14cb>
9f0051fa:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f0051fd:	73 65                	jae    9f005264 <__x86.get_pc_thunk.cx+0x14d0>
9f0051ff:	74 52                	je     9f005253 <__x86.get_pc_thunk.cx+0x14bf>
9f005201:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005202:	77 00                	ja     9f005204 <__x86.get_pc_thunk.cx+0x1470>
9f005204:	73 74                	jae    9f00527a <__x86.get_pc_thunk.cx+0x14e6>
9f005206:	72 63                	jb     9f00526b <__x86.get_pc_thunk.cx+0x14d7>
9f005208:	61                   	popa   
9f005209:	74 00                	je     9f00520b <__x86.get_pc_thunk.cx+0x1477>
9f00520b:	73 74                	jae    9f005281 <__x86.get_pc_thunk.cx+0x14ed>
9f00520d:	72 63                	jb     9f005272 <__x86.get_pc_thunk.cx+0x14de>
9f00520f:	6d                   	ins    DWORD PTR es:[edi],dx
9f005210:	70 00                	jo     9f005212 <__x86.get_pc_thunk.cx+0x147e>
9f005212:	73 74                	jae    9f005288 <__x86.get_pc_thunk.cx+0x14f4>
9f005214:	72 63                	jb     9f005279 <__x86.get_pc_thunk.cx+0x14e5>
9f005216:	70 79                	jo     9f005291 <__x86.get_pc_thunk.cx+0x14fd>
9f005218:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00521b:	72 63                	jb     9f005280 <__x86.get_pc_thunk.cx+0x14ec>
9f00521d:	70 79                	jo     9f005298 <__x86.get_pc_thunk.cx+0x1504>
9f00521f:	63 00                	arpl   WORD PTR [eax],ax
9f005221:	73 74                	jae    9f005297 <__x86.get_pc_thunk.cx+0x1503>
9f005223:	72 69                	jb     9f00528e <__x86.get_pc_thunk.cx+0x14fa>
9f005225:	73 6e                	jae    9f005295 <__x86.get_pc_thunk.cx+0x1501>
9f005227:	75 6d                	jne    9f005296 <__x86.get_pc_thunk.cx+0x1502>
9f005229:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00522c:	72 6c                	jb     9f00529a <__x86.get_pc_thunk.cx+0x1506>
9f00522e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f005230:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005233:	72 6e                	jb     9f0052a3 <__x86.get_pc_thunk.cx+0x150f>
9f005235:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f005238:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00523b:	72 6e                	jb     9f0052ab <__x86.get_pc_thunk.cx+0x1517>
9f00523d:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f005240:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005243:	72 74                	jb     9f0052b9 <__x86.get_pc_thunk.cx+0x1525>
9f005245:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005246:	75 6c                	jne    9f0052b4 <__x86.get_pc_thunk.cx+0x1520>
9f005248:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00524b:	72 6c                	jb     9f0052b9 <__x86.get_pc_thunk.cx+0x1525>
9f00524d:	65                   	gs
9f00524e:	66                   	data16
9f00524f:	74 00                	je     9f005251 <__x86.get_pc_thunk.cx+0x14bd>
9f005251:	73 74                	jae    9f0052c7 <__x86.get_pc_thunk.cx+0x1533>
9f005253:	72 74                	jb     9f0052c9 <__x86.get_pc_thunk.cx+0x1535>
9f005255:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005256:	6c                   	ins    BYTE PTR es:[edi],dx
9f005257:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00525a:	72 74                	jb     9f0052d0 <__x86.get_pc_thunk.cx+0x153c>
9f00525c:	72 69                	jb     9f0052c7 <__x86.get_pc_thunk.cx+0x1533>
9f00525e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00525f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005262:	72 72                	jb     9f0052d6 <__x86.get_pc_thunk.cx+0x1542>
9f005264:	65                   	gs
9f005265:	70 6c                	jo     9f0052d3 <__x86.get_pc_thunk.cx+0x153f>
9f005267:	61                   	popa   
9f005268:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f00526b:	73 74                	jae    9f0052e1 <__x86.get_pc_thunk.cx+0x154d>
9f00526d:	72 73                	jb     9f0052e2 <__x86.get_pc_thunk.cx+0x154e>
9f00526f:	74 72                	je     9f0052e3 <__x86.get_pc_thunk.cx+0x154f>
9f005271:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f005274:	74 74                	je     9f0052ea <__x86.get_pc_thunk.cx+0x1556>
9f005276:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f00527d:	74 69                	je     9f0052e8 <__x86.get_pc_thunk.cx+0x1554>
9f00527f:	6d                   	ins    DWORD PTR es:[edi],dx
9f005280:	65                   	gs
9f005281:	5f                   	pop    edi
9f005282:	72 00                	jb     9f005284 <__x86.get_pc_thunk.cx+0x14f0>
9f005284:	6c                   	ins    BYTE PTR es:[edi],dx
9f005285:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005286:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f005289:	74 69                	je     9f0052f4 <__x86.get_pc_thunk.cx+0x1560>
9f00528b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00528c:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f005291:	61                   	popa   
9f005292:	6c                   	ins    BYTE PTR es:[edi],dx
9f005293:	74 69                	je     9f0052fe <__x86.get_pc_thunk.cx+0x156a>
9f005295:	6d                   	ins    DWORD PTR es:[edi],dx
9f005296:	65                   	gs
9f005297:	5f                   	pop    edi
9f005298:	72 00                	jb     9f00529a <__x86.get_pc_thunk.cx+0x1506>
9f00529a:	6d                   	ins    DWORD PTR es:[edi],dx
9f00529b:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f0052a0:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0052a3:	74 74                	je     9f005319 <__x86.get_pc_thunk.cx+0x1585>
9f0052a5:	69                   	.byte 0x69
9f0052a6:	6d                   	ins    DWORD PTR es:[edi],dx
9f0052a7:	65                   	gs
	...

Disassembly of section .hash:

9f0052ac <.hash>:
9f0052ac:	25 00 00 00 42       	and    eax,0x42000000
9f0052b1:	00 00                	add    BYTE PTR [eax],al
9f0052b3:	00 21                	add    BYTE PTR [ecx],ah
9f0052b5:	00 00                	add    BYTE PTR [eax],al
9f0052b7:	00 2f                	add    BYTE PTR [edi],ch
9f0052b9:	00 00                	add    BYTE PTR [eax],al
9f0052bb:	00 2e                	add    BYTE PTR [esi],ch
9f0052bd:	00 00                	add    BYTE PTR [eax],al
9f0052bf:	00 30                	add    BYTE PTR [eax],dh
9f0052c1:	00 00                	add    BYTE PTR [eax],al
9f0052c3:	00 28                	add    BYTE PTR [eax],ch
9f0052c5:	00 00                	add    BYTE PTR [eax],al
9f0052c7:	00 3e                	add    BYTE PTR [esi],bh
9f0052c9:	00 00                	add    BYTE PTR [eax],al
9f0052cb:	00 17                	add    BYTE PTR [edi],dl
9f0052cd:	00 00                	add    BYTE PTR [eax],al
9f0052cf:	00 2d 00 00 00 23    	add    BYTE PTR ds:0x23000000,ch
	...
9f0052dd:	00 00                	add    BYTE PTR [eax],al
9f0052df:	00 1a                	add    BYTE PTR [edx],bl
9f0052e1:	00 00                	add    BYTE PTR [eax],al
9f0052e3:	00 1d 00 00 00 16    	add    BYTE PTR ds:0x16000000,bl
9f0052e9:	00 00                	add    BYTE PTR [eax],al
9f0052eb:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f0052ee:	00 00                	add    BYTE PTR [eax],al
9f0052f0:	14 00                	adc    al,0x0
9f0052f2:	00 00                	add    BYTE PTR [eax],al
9f0052f4:	3f                   	aas    
9f0052f5:	00 00                	add    BYTE PTR [eax],al
9f0052f7:	00 32                	add    BYTE PTR [edx],dh
9f0052f9:	00 00                	add    BYTE PTR [eax],al
9f0052fb:	00 31                	add    BYTE PTR [ecx],dh
9f0052fd:	00 00                	add    BYTE PTR [eax],al
9f0052ff:	00 08                	add    BYTE PTR [eax],cl
9f005301:	00 00                	add    BYTE PTR [eax],al
9f005303:	00 03                	add    BYTE PTR [ebx],al
9f005305:	00 00                	add    BYTE PTR [eax],al
9f005307:	00 39                	add    BYTE PTR [ecx],bh
9f005309:	00 00                	add    BYTE PTR [eax],al
9f00530b:	00 3a                	add    BYTE PTR [edx],bh
9f00530d:	00 00                	add    BYTE PTR [eax],al
9f00530f:	00 0d 00 00 00 3d    	add    BYTE PTR ds:0x3d000000,cl
	...
9f00531d:	00 00                	add    BYTE PTR [eax],al
9f00531f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005322:	00 00                	add    BYTE PTR [eax],al
9f005324:	15 00 00 00 38       	adc    eax,0x38000000
9f005329:	00 00                	add    BYTE PTR [eax],al
9f00532b:	00 1f                	add    BYTE PTR [edi],bl
9f00532d:	00 00                	add    BYTE PTR [eax],al
9f00532f:	00 41 00             	add    BYTE PTR [ecx+0x0],al
9f005332:	00 00                	add    BYTE PTR [eax],al
9f005334:	2c 00                	sub    al,0x0
9f005336:	00 00                	add    BYTE PTR [eax],al
9f005338:	00 00                	add    BYTE PTR [eax],al
9f00533a:	00 00                	add    BYTE PTR [eax],al
9f00533c:	3c 00                	cmp    al,0x0
9f00533e:	00 00                	add    BYTE PTR [eax],al
9f005340:	2b 00                	sub    eax,DWORD PTR [eax]
	...
9f005362:	00 00                	add    BYTE PTR [eax],al
9f005364:	02 00                	add    al,BYTE PTR [eax]
9f005366:	00 00                	add    BYTE PTR [eax],al
9f005368:	00 00                	add    BYTE PTR [eax],al
9f00536a:	00 00                	add    BYTE PTR [eax],al
9f00536c:	07                   	pop    es
9f00536d:	00 00                	add    BYTE PTR [eax],al
9f00536f:	00 00                	add    BYTE PTR [eax],al
9f005371:	00 00                	add    BYTE PTR [eax],al
9f005373:	00 09                	add    BYTE PTR [ecx],cl
	...
9f005385:	00 00                	add    BYTE PTR [eax],al
9f005387:	00 0b                	add    BYTE PTR [ebx],cl
	...
9f005391:	00 00                	add    BYTE PTR [eax],al
9f005393:	00 10                	add    BYTE PTR [eax],dl
9f005395:	00 00                	add    BYTE PTR [eax],al
9f005397:	00 04 00             	add    BYTE PTR [eax+eax*1],al
	...
9f0053ae:	00 00                	add    BYTE PTR [eax],al
9f0053b0:	0f 00 00             	sldt   WORD PTR [eax]
	...
9f0053c7:	00 01                	add    BYTE PTR [ecx],al
9f0053c9:	00 00                	add    BYTE PTR [eax],al
9f0053cb:	00 11                	add    BYTE PTR [ecx],dl
9f0053cd:	00 00                	add    BYTE PTR [eax],al
9f0053cf:	00 19                	add    BYTE PTR [ecx],bl
9f0053d1:	00 00                	add    BYTE PTR [eax],al
9f0053d3:	00 05 00 00 00 12    	add    BYTE PTR ds:0x12000000,al
9f0053d9:	00 00                	add    BYTE PTR [eax],al
9f0053db:	00 0e                	add    BYTE PTR [esi],cl
9f0053dd:	00 00                	add    BYTE PTR [eax],al
9f0053df:	00 00                	add    BYTE PTR [eax],al
9f0053e1:	00 00                	add    BYTE PTR [eax],al
9f0053e3:	00 1e                	add    BYTE PTR [esi],bl
9f0053e5:	00 00                	add    BYTE PTR [eax],al
9f0053e7:	00 27                	add    BYTE PTR [edi],ah
9f0053e9:	00 00                	add    BYTE PTR [eax],al
9f0053eb:	00 26                	add    BYTE PTR [esi],ah
9f0053ed:	00 00                	add    BYTE PTR [eax],al
9f0053ef:	00 1b                	add    BYTE PTR [ebx],bl
9f0053f1:	00 00                	add    BYTE PTR [eax],al
9f0053f3:	00 22                	add    BYTE PTR [edx],ah
9f0053f5:	00 00                	add    BYTE PTR [eax],al
9f0053f7:	00 29                	add    BYTE PTR [ecx],ch
9f0053f9:	00 00                	add    BYTE PTR [eax],al
9f0053fb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0053fe:	00 00                	add    BYTE PTR [eax],al
9f005400:	0a 00                	or     al,BYTE PTR [eax]
	...
9f00540a:	00 00                	add    BYTE PTR [eax],al
9f00540c:	0c 00                	or     al,0x0
9f00540e:	00 00                	add    BYTE PTR [eax],al
9f005410:	13 00                	adc    eax,DWORD PTR [eax]
9f005412:	00 00                	add    BYTE PTR [eax],al
9f005414:	00 00                	add    BYTE PTR [eax],al
9f005416:	00 00                	add    BYTE PTR [eax],al
9f005418:	20 00                	and    BYTE PTR [eax],al
	...
9f005422:	00 00                	add    BYTE PTR [eax],al
9f005424:	2a 00                	sub    al,BYTE PTR [eax]
9f005426:	00 00                	add    BYTE PTR [eax],al
9f005428:	36 00 00             	add    BYTE PTR ss:[eax],al
9f00542b:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
9f00542e:	00 00                	add    BYTE PTR [eax],al
9f005430:	37                   	aaa    
9f005431:	00 00                	add    BYTE PTR [eax],al
9f005433:	00 00                	add    BYTE PTR [eax],al
9f005435:	00 00                	add    BYTE PTR [eax],al
9f005437:	00 35 00 00 00 06    	add    BYTE PTR ds:0x6000000,dh
9f00543d:	00 00                	add    BYTE PTR [eax],al
9f00543f:	00 3b                	add    BYTE PTR [ebx],bh
9f005441:	00 00                	add    BYTE PTR [eax],al
9f005443:	00 18                	add    BYTE PTR [eax],bl
9f005445:	00 00                	add    BYTE PTR [eax],al
9f005447:	00 25 00 00 00 33    	add    BYTE PTR ds:0x33000000,ah
9f00544d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f005450 <.eh_frame>:
9f005450:	14 00                	adc    al,0x0
9f005452:	00 00                	add    BYTE PTR [eax],al
9f005454:	00 00                	add    BYTE PTR [eax],al
9f005456:	00 00                	add    BYTE PTR [eax],al
9f005458:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f00545b:	00 01                	add    BYTE PTR [ecx],al
9f00545d:	7c 08                	jl     9f005467 <__x86.get_pc_thunk.cx+0x16d3>
9f00545f:	01 1b                	add    DWORD PTR [ebx],ebx
9f005461:	0c 04                	or     al,0x4
9f005463:	04 88                	add    al,0x88
9f005465:	01 00                	add    DWORD PTR [eax],eax
9f005467:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00546a:	00 00                	add    BYTE PTR [eax],al
9f00546c:	1c 00                	sbb    al,0x0
9f00546e:	00 00                	add    BYTE PTR [eax],al
9f005470:	00 e9                	add    cl,ch
9f005472:	ff                   	(bad)  
9f005473:	ff 20                	jmp    DWORD PTR [eax]
9f005475:	00 00                	add    BYTE PTR [eax],al
9f005477:	00 00                	add    BYTE PTR [eax],al
9f005479:	0e                   	push   cs
9f00547a:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f00547d:	0c 4a                	or     al,0x4a
9f00547f:	0f 0b                	ud2    
9f005481:	74 04                	je     9f005487 <__x86.get_pc_thunk.cx+0x16f3>
9f005483:	78 00                	js     9f005485 <__x86.get_pc_thunk.cx+0x16f1>
9f005485:	3f                   	aas    
9f005486:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f005488:	2a 32                	sub    dh,BYTE PTR [edx]
9f00548a:	24 22                	and    al,0x22
9f00548c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f005490 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f005490:	01 1b                	add    DWORD PTR [ebx],ebx
9f005492:	03 3b                	add    edi,DWORD PTR [ebx]
9f005494:	04 e9                	add    al,0xe9
9f005496:	ff                   	(bad)  
9f005497:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f00549a:	00 00                	add    BYTE PTR [eax],al
9f00549c:	70 ab                	jo     9f005449 <__x86.get_pc_thunk.cx+0x16b5>
9f00549e:	ff                   	(bad)  
9f00549f:	ff 20                	jmp    DWORD PTR [eax]
9f0054a1:	e9 ff ff a8 ab       	jmp    4aa954a5 <sysEnter_Vector+0x4a9654a5>
9f0054a6:	ff                   	(bad)  
9f0054a7:	ff 40 e9             	inc    DWORD PTR [eax-0x17]
9f0054aa:	ff                   	(bad)  
9f0054ab:	ff e0                	jmp    eax
9f0054ad:	ab                   	stos   DWORD PTR es:[edi],eax
9f0054ae:	ff                   	(bad)  
9f0054af:	ff 74 e9 ff          	push   DWORD PTR [ecx+ebp*8-0x1]
9f0054b3:	ff 35 ac ff ff 9c    	push   DWORD PTR ds:0x9cffffac
9f0054b9:	e9 ff ff 8c ac       	jmp    4b8d54bd <sysEnter_Vector+0x4b7a54bd>
9f0054be:	ff                   	(bad)  
9f0054bf:	ff c4                	inc    esp
9f0054c1:	e9 ff ff 24 ad       	jmp    4c2554c5 <sysEnter_Vector+0x4c1254c5>
9f0054c6:	ff                   	(bad)  
9f0054c7:	ff 00                	inc    DWORD PTR [eax]
9f0054c9:	ea ff ff 9b ad ff ff 	jmp    0xffff:0xad9bffff
9f0054d0:	24 ea                	and    al,0xea
9f0054d2:	ff                   	(bad)  
9f0054d3:	ff 56 ae             	call   DWORD PTR [esi-0x52]
9f0054d6:	ff                   	(bad)  
9f0054d7:	ff 48 ea             	dec    DWORD PTR [eax-0x16]
9f0054da:	ff                   	(bad)  
9f0054db:	ff 11                	call   DWORD PTR [ecx]
9f0054dd:	af                   	scas   eax,DWORD PTR es:[edi]
9f0054de:	ff                   	(bad)  
9f0054df:	ff 6c ea ff          	jmp    FWORD PTR [edx+ebp*8-0x1]
9f0054e3:	ff 70 af             	push   DWORD PTR [eax-0x51]
9f0054e6:	ff                   	(bad)  
9f0054e7:	ff 8c ea ff ff 2a b0 	dec    DWORD PTR [edx+ebp*8-0x4fd50001]
9f0054ee:	ff                   	(bad)  
9f0054ef:	ff b0 ea ff ff 84    	push   DWORD PTR [eax-0x7b000016]
9f0054f5:	b0 ff                	mov    al,0xff
9f0054f7:	ff d4                	call   esp
9f0054f9:	ea ff ff e0 b0 ff ff 	jmp    0xffff:0xb0e0ffff
9f005500:	f8                   	clc    
9f005501:	ea ff ff 8a b1 ff ff 	jmp    0xffff:0xb18affff
9f005508:	1c eb                	sbb    al,0xeb
9f00550a:	ff                   	(bad)  
9f00550b:	ff 4c b3 ff          	dec    DWORD PTR [ebx+esi*4-0x1]
9f00550f:	ff 40 eb             	inc    DWORD PTR [eax-0x15]
9f005512:	ff                   	(bad)  
9f005513:	ff                   	(bad)  
9f005514:	7d b3                	jge    9f0054c9 <__GNU_EH_FRAME_HDR+0x39>
9f005516:	ff                   	(bad)  
9f005517:	ff 64 eb ff          	jmp    DWORD PTR [ebx+ebp*8-0x1]
9f00551b:	ff aa b3 ff ff 88    	jmp    FWORD PTR [edx-0x7700004d]
9f005521:	eb ff                	jmp    9f005522 <__GNU_EH_FRAME_HDR+0x92>
9f005523:	ff d4                	call   esp
9f005525:	b3 ff                	mov    bl,0xff
9f005527:	ff ac eb ff ff 09 b4 	jmp    FWORD PTR [ebx+ebp*8-0x4bf60001]
9f00552e:	ff                   	(bad)  
9f00552f:	ff d4                	call   esp
9f005531:	eb ff                	jmp    9f005532 <__GNU_EH_FRAME_HDR+0xa2>
9f005533:	ff                   	(bad)  
9f005534:	3e                   	ds
9f005535:	b4 ff                	mov    ah,0xff
9f005537:	ff                   	(bad)  
9f005538:	fc                   	cld    
9f005539:	eb ff                	jmp    9f00553a <__GNU_EH_FRAME_HDR+0xaa>
9f00553b:	ff 64 b4 ff          	jmp    DWORD PTR [esp+esi*4-0x1]
9f00553f:	ff 1c ec             	call   FWORD PTR [esp+ebp*8]
9f005542:	ff                   	(bad)  
9f005543:	ff 94 b4 ff ff 40 ec 	call   DWORD PTR [esp+esi*4-0x13bf0001]
9f00554a:	ff                   	(bad)  
9f00554b:	ff                   	(bad)  
9f00554c:	ba b4 ff ff 64       	mov    edx,0x64ffffb4
9f005551:	ec                   	in     al,dx
9f005552:	ff                   	(bad)  
9f005553:	ff                   	(bad)  
9f005554:	fd                   	std    
9f005555:	b4 ff                	mov    ah,0xff
9f005557:	ff 88 ec ff ff 40    	dec    DWORD PTR [eax+0x40ffffec]
9f00555d:	b5 ff                	mov    ch,0xff
9f00555f:	ff ac ec ff ff fc b5 	jmp    FWORD PTR [esp+ebp*8-0x4a030001]
9f005566:	ff                   	(bad)  
9f005567:	ff d0                	call   eax
9f005569:	ec                   	in     al,dx
9f00556a:	ff                   	(bad)  
9f00556b:	ff 36                	push   DWORD PTR [esi]
9f00556d:	b6 ff                	mov    dh,0xff
9f00556f:	ff                   	(bad)  
9f005570:	f8                   	clc    
9f005571:	ec                   	in     al,dx
9f005572:	ff                   	(bad)  
9f005573:	ff 72 b6             	push   DWORD PTR [edx-0x4a]
9f005576:	ff                   	(bad)  
9f005577:	ff 20                	jmp    DWORD PTR [eax]
9f005579:	ed                   	in     eax,dx
9f00557a:	ff                   	(bad)  
9f00557b:	ff b0 b6 ff ff 48    	push   DWORD PTR [eax+0x48ffffb6]
9f005581:	ed                   	in     eax,dx
9f005582:	ff                   	(bad)  
9f005583:	ff f0                	push   eax
9f005585:	b6 ff                	mov    dh,0xff
9f005587:	ff 70 ed             	push   DWORD PTR [eax-0x13]
9f00558a:	ff                   	(bad)  
9f00558b:	ff 32                	push   DWORD PTR [edx]
9f00558d:	b7 ff                	mov    bh,0xff
9f00558f:	ff 98 ed ff ff f1    	call   FWORD PTR [eax-0xe000013]
9f005595:	b7 ff                	mov    bh,0xff
9f005597:	ff                   	(bad)  
9f005598:	bc ed ff ff 10       	mov    esp,0x10ffffed
9f00559d:	b8 ff ff e0 ed       	mov    eax,0xede0ffff
9f0055a2:	ff                   	(bad)  
9f0055a3:	ff 69 b8             	jmp    FWORD PTR [ecx-0x48]
9f0055a6:	ff                   	(bad)  
9f0055a7:	ff 04 ee             	inc    DWORD PTR [esi+ebp*8]
9f0055aa:	ff                   	(bad)  
9f0055ab:	ff                   	(bad)  
9f0055ac:	bd b8 ff ff 28       	mov    ebp,0x28ffffb8
9f0055b1:	ee                   	out    dx,al
9f0055b2:	ff                   	(bad)  
9f0055b3:	ff 11                	call   DWORD PTR [ecx]
9f0055b5:	b9 ff ff 4c ee       	mov    ecx,0xee4cffff
9f0055ba:	ff                   	(bad)  
9f0055bb:	ff 45 b9             	inc    DWORD PTR [ebp-0x47]
9f0055be:	ff                   	(bad)  
9f0055bf:	ff 6c ee ff          	jmp    FWORD PTR [esi+ebp*8-0x1]
9f0055c3:	ff                   	(bad)  
9f0055c4:	7c b9                	jl     9f00557f <__GNU_EH_FRAME_HDR+0xef>
9f0055c6:	ff                   	(bad)  
9f0055c7:	ff 8c ee ff ff ee b9 	dec    DWORD PTR [esi+ebp*8-0x46110001]
9f0055ce:	ff                   	(bad)  
9f0055cf:	ff b4 ee ff ff 0b ba 	push   DWORD PTR [esi+ebp*8-0x45f40001]
9f0055d6:	ff                   	(bad)  
9f0055d7:	ff d4                	call   esp
9f0055d9:	ee                   	out    dx,al
9f0055da:	ff                   	(bad)  
9f0055db:	ff 34 ba             	push   DWORD PTR [edx+edi*4]
9f0055de:	ff                   	(bad)  
9f0055df:	ff f4                	push   esp
9f0055e1:	ee                   	out    dx,al
9f0055e2:	ff                   	(bad)  
9f0055e3:	ff 5d ba             	call   FWORD PTR [ebp-0x46]
9f0055e6:	ff                   	(bad)  
9f0055e7:	ff 14 ef             	call   DWORD PTR [edi+ebp*8]
9f0055ea:	ff                   	(bad)  
9f0055eb:	ff a9 ba ff ff 34    	jmp    FWORD PTR [ecx+0x34ffffba]
9f0055f1:	ef                   	out    dx,eax
9f0055f2:	ff                   	(bad)  
9f0055f3:	ff 9d bc ff ff 58    	call   FWORD PTR [ebp+0x58ffffbc]
9f0055f9:	ef                   	out    dx,eax
9f0055fa:	ff                   	(bad)  
9f0055fb:	ff ec                	jmp    <internal disassembler error>
9f0055fd:	bc ff ff 78 ef       	mov    esp,0xef78ffff
9f005602:	ff                   	(bad)  
9f005603:	ff 08                	dec    DWORD PTR [eax]
9f005605:	bd ff ff 98 ef       	mov    ebp,0xef98ffff
9f00560a:	ff                   	(bad)  
9f00560b:	ff 28                	jmp    FWORD PTR [eax]
9f00560d:	bd ff ff b8 ef       	mov    ebp,0xefb8ffff
9f005612:	ff                   	(bad)  
9f005613:	ff 48 bd             	dec    DWORD PTR [eax-0x43]
9f005616:	ff                   	(bad)  
9f005617:	ff d8                	call   <internal disassembler error>
9f005619:	ef                   	out    dx,eax
9f00561a:	ff                   	(bad)  
9f00561b:	ff 8c be ff ff f8 ef 	dec    DWORD PTR [esi+edi*4-0x10070001]
9f005622:	ff                   	(bad)  
9f005623:	ff ac be ff ff 18 f0 	jmp    FWORD PTR [esi+edi*4-0xfe70001]
9f00562a:	ff                   	(bad)  
9f00562b:	ff a9 c1 ff ff 44    	jmp    FWORD PTR [ecx+0x44ffffc1]
9f005631:	f0 ff                	lock (bad) 
9f005633:	ff cc                	dec    esp
9f005635:	c1 ff ff             	sar    edi,0xff
9f005638:	64                   	fs
9f005639:	f0 ff                	lock (bad) 
9f00563b:	ff e8                	jmp    <internal disassembler error>
9f00563d:	c1 ff ff             	sar    edi,0xff
9f005640:	84 f0                	test   al,dh
9f005642:	ff                   	(bad)  
9f005643:	ff 5c c2 ff          	call   FWORD PTR [edx+eax*8-0x1]
9f005647:	ff a8 f0 ff ff c8    	jmp    FWORD PTR [eax-0x37000010]
9f00564d:	c2 ff ff             	ret    0xffff
9f005650:	cc                   	int3   
9f005651:	f0 ff                	lock (bad) 
9f005653:	ff 4f c3             	dec    DWORD PTR [edi-0x3d]
9f005656:	ff                   	(bad)  
9f005657:	ff ec                	jmp    <internal disassembler error>
9f005659:	f0 ff                	lock (bad) 
9f00565b:	ff 89 c3 ff ff 0c    	dec    DWORD PTR [ecx+0xcffffc3]
9f005661:	f1                   	icebp  
9f005662:	ff                   	(bad)  
9f005663:	ff 5d c5             	call   FWORD PTR [ebp-0x3b]
9f005666:	ff                   	(bad)  
9f005667:	ff 30                	push   DWORD PTR [eax]
9f005669:	f1                   	icebp  
9f00566a:	ff                   	(bad)  
9f00566b:	ff                   	(bad)  
9f00566c:	7d c5                	jge    9f005633 <__GNU_EH_FRAME_HDR+0x1a3>
9f00566e:	ff                   	(bad)  
9f00566f:	ff 50 f1             	call   DWORD PTR [eax-0xf]
9f005672:	ff                   	(bad)  
9f005673:	ff 02                	inc    DWORD PTR [edx]
9f005675:	c6                   	(bad)  
9f005676:	ff                   	(bad)  
9f005677:	ff 74 f1 ff          	push   DWORD PTR [ecx+esi*8-0x1]
9f00567b:	ff 25 c6 ff ff 94    	jmp    DWORD PTR ds:0x94ffffc6
9f005681:	f1                   	icebp  
9f005682:	ff                   	(bad)  
9f005683:	ff 40 c6             	inc    DWORD PTR [eax-0x3a]
9f005686:	ff                   	(bad)  
9f005687:	ff b4 f1 ff ff 74 c6 	push   DWORD PTR [ecx+esi*8-0x398b0001]
9f00568e:	ff                   	(bad)  
9f00568f:	ff d8                	call   <internal disassembler error>
9f005691:	f1                   	icebp  
9f005692:	ff                   	(bad)  
9f005693:	ff 0f                	dec    DWORD PTR [edi]
9f005695:	c8 ff ff f8          	enter  0xffff,0xf8
9f005699:	f1                   	icebp  
9f00569a:	ff                   	(bad)  
9f00569b:	ff 30                	push   DWORD PTR [eax]
9f00569d:	c8 ff ff 18          	enter  0xffff,0x18
9f0056a1:	f2 ff                	repnz (bad) 
9f0056a3:	ff f7                	push   edi
9f0056a5:	c8 ff ff 38          	enter  0xffff,0x38
9f0056a9:	f2 ff                	repnz (bad) 
9f0056ab:	ff 18                	call   FWORD PTR [eax]
9f0056ad:	c9                   	leave  
9f0056ae:	ff                   	(bad)  
9f0056af:	ff 58 f2             	call   FWORD PTR [eax-0xe]
9f0056b2:	ff                   	(bad)  
9f0056b3:	ff 44 c9 ff          	inc    DWORD PTR [ecx+ecx*8-0x1]
9f0056b7:	ff                   	(bad)  
9f0056b8:	7c f2                	jl     9f0056ac <__GNU_EH_FRAME_HDR+0x21c>
9f0056ba:	ff                   	(bad)  
9f0056bb:	ff a3 c9 ff ff a0    	jmp    DWORD PTR [ebx-0x5f000037]
9f0056c1:	f2 ff                	repnz (bad) 
9f0056c3:	ff e1                	jmp    ecx
9f0056c5:	cb                   	retf   
9f0056c6:	ff                   	(bad)  
9f0056c7:	ff cc                	dec    esp
9f0056c9:	f2 ff                	repnz (bad) 
9f0056cb:	ff 29                	jmp    FWORD PTR [ecx]
9f0056cd:	d0 ff                	sar    bh,1
9f0056cf:	ff f0                	push   eax
9f0056d1:	f2 ff                	repnz (bad) 
9f0056d3:	ff 5c d0 ff          	call   FWORD PTR [eax+edx*8-0x1]
9f0056d7:	ff 10                	call   DWORD PTR [eax]
9f0056d9:	f3 ff                	repz (bad) 
9f0056db:	ff e0                	jmp    eax
9f0056dd:	d0 ff                	sar    bh,1
9f0056df:	ff 34 f3             	push   DWORD PTR [ebx+esi*8]
9f0056e2:	ff                   	(bad)  
9f0056e3:	ff 1e                	call   FWORD PTR [esi]
9f0056e5:	d1 ff                	sar    edi,1
9f0056e7:	ff 58 f3             	call   FWORD PTR [eax-0xd]
9f0056ea:	ff                   	(bad)  
9f0056eb:	ff 5c d1 ff          	call   FWORD PTR [ecx+edx*8-0x1]
9f0056ef:	ff                   	(bad)  
9f0056f0:	7c f3                	jl     9f0056e5 <__GNU_EH_FRAME_HDR+0x255>
9f0056f2:	ff                   	(bad)  
9f0056f3:	ff cc                	dec    esp
9f0056f5:	d1 ff                	sar    edi,1
9f0056f7:	ff 9c f3 ff ff 2c d2 	call   FWORD PTR [ebx+esi*8-0x2dd30001]
9f0056fe:	ff                   	(bad)  
9f0056ff:	ff c4                	inc    esp
9f005701:	f3 ff                	repz (bad) 
9f005703:	ff 6c d2 ff          	jmp    FWORD PTR [edx+edx*8-0x1]
9f005707:	ff e4                	jmp    esp
9f005709:	f3 ff                	repz (bad) 
9f00570b:	ff ac d2 ff ff 04 f4 	jmp    FWORD PTR [edx+edx*8-0xbfb0001]
9f005712:	ff                   	(bad)  
9f005713:	ff f4                	push   esp
9f005715:	d2 ff                	sar    bh,cl
9f005717:	ff 24 f4             	jmp    DWORD PTR [esp+esi*8]
9f00571a:	ff                   	(bad)  
9f00571b:	ff 24 d3             	jmp    DWORD PTR [ebx+edx*8]
9f00571e:	ff                   	(bad)  
9f00571f:	ff 44 f4 ff          	inc    DWORD PTR [esp+esi*8-0x1]
9f005723:	ff 80 d3 ff ff 64    	inc    DWORD PTR [eax+0x64ffffd3]
9f005729:	f4                   	hlt    
9f00572a:	ff                   	(bad)  
9f00572b:	ff b1 d3 ff ff 84    	push   DWORD PTR [ecx-0x7b00002d]
9f005731:	f4                   	hlt    
9f005732:	ff                   	(bad)  
9f005733:	ff e4                	jmp    esp
9f005735:	d3 ff                	sar    edi,cl
9f005737:	ff a4 f4 ff ff 4b d4 	jmp    DWORD PTR [esp+esi*8-0x2bb40001]
9f00573e:	ff                   	(bad)  
9f00573f:	ff c4                	inc    esp
9f005741:	f4                   	hlt    
9f005742:	ff                   	(bad)  
9f005743:	ff b4 d4 ff ff e4 f4 	push   DWORD PTR [esp+edx*8-0xb1b0001]
9f00574a:	ff                   	(bad)  
9f00574b:	ff 14 d5 ff ff 04 f5 	call   DWORD PTR [edx*8-0xafb0001]
9f005752:	ff                   	(bad)  
9f005753:	ff 34 d5 ff ff 24 f5 	push   DWORD PTR [edx*8-0xadb0001]
9f00575a:	ff                   	(bad)  
9f00575b:	ff b4 d6 ff ff 54 f5 	push   DWORD PTR [esi+edx*8-0xaab0001]
9f005762:	ff                   	(bad)  
9f005763:	ff d4                	call   esp
9f005765:	d6                   	(bad)  
9f005766:	ff                   	(bad)  
9f005767:	ff 74 f5 ff          	push   DWORD PTR [ebp+esi*8-0x1]
9f00576b:	ff 70 d8             	push   DWORD PTR [eax-0x28]
9f00576e:	ff                   	(bad)  
9f00576f:	ff a4 f5 ff ff 06 d9 	jmp    DWORD PTR [ebp+esi*8-0x26f90001]
9f005776:	ff                   	(bad)  
9f005777:	ff c8                	dec    eax
9f005779:	f5                   	cmc    
9f00577a:	ff                   	(bad)  
9f00577b:	ff 28                	jmp    FWORD PTR [eax]
9f00577d:	d9 ff                	fcos   
9f00577f:	ff e8                	jmp    <internal disassembler error>
9f005781:	f5                   	cmc    
9f005782:	ff                   	(bad)  
9f005783:	ff 6b da             	jmp    FWORD PTR [ebx-0x26]
9f005786:	ff                   	(bad)  
9f005787:	ff 14 f6             	call   DWORD PTR [esi+esi*8]
9f00578a:	ff                   	(bad)  
9f00578b:	ff 94 da ff ff 34 f6 	call   DWORD PTR [edx+ebx*8-0x9cb0001]
9f005792:	ff                   	(bad)  
9f005793:	ff 32                	push   DWORD PTR [edx]
9f005795:	db ff                	(bad)  
9f005797:	ff 5c f6 ff          	call   FWORD PTR [esi+esi*8-0x1]
9f00579b:	ff a0 db ff ff 84    	jmp    DWORD PTR [eax-0x7b000025]
9f0057a1:	f6 ff                	idiv   bh
9f0057a3:	ff c0                	inc    eax
9f0057a5:	db ff                	(bad)  
9f0057a7:	ff a4 f6 ff ff 04 dc 	jmp    DWORD PTR [esi+esi*8-0x23fb0001]
9f0057ae:	ff                   	(bad)  
9f0057af:	ff cc                	dec    esp
9f0057b1:	f6 ff                	idiv   bh
9f0057b3:	ff 1d df ff ff f4    	call   FWORD PTR ds:0xf4ffffdf
9f0057b9:	f6 ff                	idiv   bh
9f0057bb:	ff                   	(bad)  
9f0057bc:	3a df                	cmp    bl,bh
9f0057be:	ff                   	(bad)  
9f0057bf:	ff 14 f7             	call   DWORD PTR [edi+esi*8]
9f0057c2:	ff                   	(bad)  
9f0057c3:	ff 80 df ff ff 38    	inc    DWORD PTR [eax+0x38ffffdf]
9f0057c9:	f7 ff                	idiv   edi
9f0057cb:	ff b5 df ff ff 58    	push   DWORD PTR [ebp+0x58ffffdf]
9f0057d1:	f7 ff                	idiv   edi
9f0057d3:	ff d2                	call   edx
9f0057d5:	df ff                	(bad)  
9f0057d7:	ff                   	(bad)  
9f0057d8:	78 f7                	js     9f0057d1 <__GNU_EH_FRAME_HDR+0x341>
9f0057da:	ff                   	(bad)  
9f0057db:	ff 29                	jmp    FWORD PTR [ecx]
9f0057dd:	e8 ff ff a8 f7       	call   96a957e1 <sysEnter_Vector+0x969657e1>
9f0057e2:	ff                   	(bad)  
9f0057e3:	ff 96 e8 ff ff d0    	call   DWORD PTR [esi-0x2f000018]
9f0057e9:	f7 ff                	idiv   edi
9f0057eb:	ff d7                	call   edi
9f0057ed:	e8 ff ff 60 e9       	call   886157f1 <sysEnter_Vector+0x884e57f1>
9f0057f2:	ff                   	(bad)  
9f0057f3:	ff 00                	inc    DWORD PTR [eax]
9f0057f5:	e9 ff ff ec e9       	jmp    88ed57f9 <sysEnter_Vector+0x88da57f9>
9f0057fa:	ff                   	(bad)  
9f0057fb:	ff 04 e9             	inc    DWORD PTR [ecx+ebp*8]
9f0057fe:	ff                   	(bad)  
9f0057ff:	ff f4                	push   esp
9f005801:	f7 ff                	idiv   edi
9f005803:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f005820 <ansiEscSeq>:
9f005820:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f005823:	3b 00                	cmp    eax,DWORD PTR [eax]
9f005825:	48                   	dec    eax
9f005826:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f00582c:	75 00                	jne    9f00582e <ansiEscSeq+0xe>
9f00582e:	3d 00 53 74 72       	cmp    eax,0x72745300
9f005833:	65                   	gs
9f005834:	61                   	popa   
9f005835:	6d                   	ins    DWORD PTR es:[edi],dx
9f005836:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f00583c:	74 20                	je     9f00585e <ansiEscSeq+0x3e>
9f00583e:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f005845:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005846:	74 65                	je     9f0058ad <ansiEscSeq+0x8d>
9f005848:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f00584b:	00 2a                	add    BYTE PTR [edx],ch
9f00584d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00584f:	6c                   	ins    BYTE PTR es:[edi],dx
9f005850:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f005857:	74 20                	je     9f005879 <ansiEscSeq+0x59>
9f005859:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f00585c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00585d:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
9f005861:	2a 2a                	sub    ch,BYTE PTR [edx]
9f005863:	00 2a                	add    BYTE PTR [edx],ch
9f005865:	2a 2a                	sub    ch,BYTE PTR [edx]
9f005867:	6c                   	ins    BYTE PTR es:[edi],dx
9f005868:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00586f:	74 20                	je     9f005891 <ansiEscSeq+0x71>
9f005871:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f005874:	70 6c                	jo     9f0058e2 <ansiEscSeq+0xc2>
9f005876:	65                   	gs
9f005877:	74 65                	je     9f0058de <ansiEscSeq+0xbe>
9f005879:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f00587c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00587d:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f005884:	74 20                	je     9f0058a6 <ansiEscSeq+0x86>
9f005886:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f005889:	6c                   	ins    BYTE PTR es:[edi],dx
9f00588a:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f00588f:	65                   	gs
9f005890:	76 69                	jbe    9f0058fb <ansiEscSeq+0xdb>
9f005892:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005893:	75 73                	jne    9f005908 <ansiEscSeq+0xe8>
9f005895:	6c                   	ins    BYTE PTR es:[edi],dx
9f005896:	79 2c                	jns    9f0058c4 <ansiEscSeq+0xa4>
9f005898:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f00589b:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f0058a2:	6c 
9f0058a3:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0058aa:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f0058ad:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0058af:	72 20                	jb     9f0058d1 <ansiEscSeq+0xb1>
9f0058b1:	25 73 0a 00 20       	and    eax,0x20000a73
9f0058b6:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0058ba:	63 3a                	arpl   WORD PTR [edx],di
9f0058bc:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f0058bf:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f0058c3:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0058c5:	72 20                	jb     9f0058e7 <ansiEscSeq+0xc7>
9f0058c7:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f0058cc:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0058d3:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f0058d7:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0058d9:	72 20                	jb     9f0058fb <ansiEscSeq+0xdb>
9f0058db:	25 73 0a 00 00       	and    eax,0xa73
9f0058e0:	68 65 61 70 42       	push   0x42706165
9f0058e5:	61                   	popa   
9f0058e6:	73 65                	jae    9f00594d <ansiEscSeq+0x12d>
9f0058e8:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f0058eb:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f0058ee:	30 38                	xor    BYTE PTR [eax],bh
9f0058f0:	58                   	pop    eax
9f0058f1:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f0058f7:	30 38                	xor    BYTE PTR [eax],bh
9f0058f9:	58                   	pop    eax
9f0058fa:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f0058fd:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0058ff:	72 65                	jb     9f005966 <ansiEscSeq+0x146>
9f005901:	0a 00                	or     al,BYTE PTR [eax]
9f005903:	6d                   	ins    DWORD PTR es:[edi],dx
9f005904:	61                   	popa   
9f005905:	6c                   	ins    BYTE PTR es:[edi],dx
9f005906:	6c                   	ins    BYTE PTR es:[edi],dx
9f005907:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005908:	63 28                	arpl   WORD PTR [eax],bp
9f00590a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f00590d:	30 38                	xor    BYTE PTR [eax],bh
9f00590f:	58                   	pop    eax
9f005910:	29 0a                	sub    DWORD PTR [edx],ecx
9f005912:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005916:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f005919:	61                   	popa   
9f00591a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00591b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00591c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00591d:	63 3a                	arpl   WORD PTR [edx],di
9f00591f:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f005922:	65                   	gs
9f005923:	64                   	fs
9f005924:	65                   	gs
9f005925:	64                   	fs
9f005926:	3d 30 78 25 30       	cmp    eax,0x30257830
9f00592b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f00592e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005932:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f005935:	61                   	popa   
9f005936:	6c                   	ins    BYTE PTR es:[edi],dx
9f005937:	6c                   	ins    BYTE PTR es:[edi],dx
9f005938:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005939:	63 3a                	arpl   WORD PTR [edx],di
9f00593b:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f00593e:	61                   	popa   
9f00593f:	45                   	inc    ebp
9f005940:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005941:	64                   	fs
9f005942:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005947:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f00594a:	00 00                	add    BYTE PTR [eax],al
9f00594c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00594d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005954:	6c                   	ins    BYTE PTR es:[edi],dx
9f005955:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005956:	63 3a                	arpl   WORD PTR [edx],di
9f005958:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f00595b:	71 20                	jno    9f00597d <ansiEscSeq+0x15d>
9f00595d:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005960:	30 38                	xor    BYTE PTR [eax],bh
9f005962:	58                   	pop    eax
9f005963:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f005966:	74 65                	je     9f0059cd <ansiEscSeq+0x1ad>
9f005968:	73 2c                	jae    9f005996 <ansiEscSeq+0x176>
9f00596a:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f00596d:	74 20                	je     9f00598f <ansiEscSeq+0x16f>
9f00596f:	77 61                	ja     9f0059d2 <ansiEscSeq+0x1b2>
9f005971:	73 20                	jae    9f005993 <ansiEscSeq+0x173>
9f005973:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005976:	30 38                	xor    BYTE PTR [eax],bh
9f005978:	58                   	pop    eax
9f005979:	2c 20                	sub    al,0x20
9f00597b:	68 65 61 70 45       	push   0x45706165
9f005980:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005981:	64                   	fs
9f005982:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005987:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f00598a:	00 00                	add    BYTE PTR [eax],al
9f00598c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00598d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005994:	6c                   	ins    BYTE PTR es:[edi],dx
9f005995:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005996:	63 3a                	arpl   WORD PTR [edx],di
9f005998:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f00599b:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f0059a2:	65 
9f0059a3:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f0059a7:	61                   	popa   
9f0059a8:	70 43                	jo     9f0059ed <ansiEscSeq+0x1cd>
9f0059aa:	75 72                	jne    9f005a1e <ansiEscSeq+0x1fe>
9f0059ac:	72 20                	jb     9f0059ce <ansiEscSeq+0x1ae>
9f0059ae:	61                   	popa   
9f0059af:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0059b0:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f0059b4:	61                   	popa   
9f0059b5:	70 42                	jo     9f0059f9 <ansiEscSeq+0x1d9>
9f0059b7:	61                   	popa   
9f0059b8:	73 65                	jae    9f005a1f <ansiEscSeq+0x1ff>
9f0059ba:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f0059be:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0059c1:	30 38                	xor    BYTE PTR [eax],bh
9f0059c3:	58                   	pop    eax
9f0059c4:	0a 00                	or     al,BYTE PTR [eax]
9f0059c6:	00 00                	add    BYTE PTR [eax],al
9f0059c8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059c9:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0059d0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059d1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0059d2:	63 3a                	arpl   WORD PTR [edx],di
9f0059d4:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f0059d7:	61                   	popa   
9f0059d8:	74 69                	je     9f005a43 <ansiEscSeq+0x223>
9f0059da:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0059db:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f0059df:	61                   	popa   
9f0059e0:	70 20                	jo     9f005a02 <ansiEscSeq+0x1e2>
9f0059e2:	72 65                	jb     9f005a49 <ansiEscSeq+0x229>
9f0059e4:	63 20                	arpl   WORD PTR [eax],sp
9f0059e6:	40                   	inc    eax
9f0059e7:	20 30                	and    BYTE PTR [eax],dh
9f0059e9:	78 25                	js     9f005a10 <ansiEscSeq+0x1f0>
9f0059eb:	30 38                	xor    BYTE PTR [eax],bh
9f0059ed:	58                   	pop    eax
9f0059ee:	0a 00                	or     al,BYTE PTR [eax]
9f0059f0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059f1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0059f8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0059f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0059fa:	63 3a                	arpl   WORD PTR [edx],di
9f0059fc:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f0059ff:	61                   	popa   
9f005a00:	70 43                	jo     9f005a45 <ansiEscSeq+0x225>
9f005a02:	75 72                	jne    9f005a76 <ansiEscSeq+0x256>
9f005a04:	72 3d                	jb     9f005a43 <ansiEscSeq+0x223>
9f005a06:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005a09:	30 38                	xor    BYTE PTR [eax],bh
9f005a0b:	58                   	pop    eax
9f005a0c:	2c 20                	sub    al,0x20
9f005a0e:	73 69                	jae    9f005a79 <ansiEscSeq+0x259>
9f005a10:	7a 65                	jp     9f005a77 <ansiEscSeq+0x257>
9f005a12:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005a13:	66                   	data16
9f005a14:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
9f005a17:	61                   	popa   
9f005a18:	70 72                	jo     9f005a8c <ansiEscSeq+0x26c>
9f005a1a:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
9f005a1e:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
9f005a24:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005a27:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f005a2a:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a2b:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a2c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005a2d:	63 3a                	arpl   WORD PTR [edx],di
9f005a2f:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f005a32:	74 75                	je     9f005aa9 <ansiEscSeq+0x289>
9f005a34:	72 6e                	jb     9f005aa4 <ansiEscSeq+0x284>
9f005a36:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f005a3d:	30 38                	xor    BYTE PTR [eax],bh
9f005a3f:	58                   	pop    eax
9f005a40:	0a 00                	or     al,BYTE PTR [eax]
9f005a42:	00 00                	add    BYTE PTR [eax],al
9f005a44:	e5 c1                	in     eax,0xc1
9f005a46:	ff                   	(bad)  
9f005a47:	ff f7                	push   edi
9f005a49:	c1 ff ff             	sar    edi,0xff
9f005a4c:	f7 c1 ff ff eb c1    	test   ecx,0xc1ebffff
9f005a52:	ff                   	(bad)  
9f005a53:	ff f7                	push   edi
9f005a55:	c1 ff ff             	sar    edi,0xff
9f005a58:	f7 c1 ff ff f7 c1    	test   ecx,0xc1f7ffff
9f005a5e:	ff                   	(bad)  
9f005a5f:	ff f7                	push   edi
9f005a61:	c1 ff ff             	sar    edi,0xff
9f005a64:	f7 c1 ff ff f7 c1    	test   ecx,0xc1f7ffff
9f005a6a:	ff                   	(bad)  
9f005a6b:	ff f7                	push   edi
9f005a6d:	c1 ff ff             	sar    edi,0xff
9f005a70:	df c1                	ffreep st(1)
9f005a72:	ff                   	(bad)  
9f005a73:	ff f7                	push   edi
9f005a75:	c1 ff ff             	sar    edi,0xff
9f005a78:	d9 c1                	fld    st(1)
9f005a7a:	ff                   	(bad)  
9f005a7b:	ff f7                	push   edi
9f005a7d:	c1 ff ff             	sar    edi,0xff
9f005a80:	f7 c1 ff ff f1 c1    	test   ecx,0xc1f1ffff
9f005a86:	ff                   	(bad)  
9f005a87:	ff 96 c4 ff ff c3    	call   DWORD PTR [esi-0x3c00003c]
9f005a8d:	c4                   	(bad)  
9f005a8e:	ff                   	(bad)  
9f005a8f:	ff c3                	inc    ebx
9f005a91:	c4                   	(bad)  
9f005a92:	ff                   	(bad)  
9f005a93:	ff c3                	inc    ebx
9f005a95:	c4                   	(bad)  
9f005a96:	ff                   	(bad)  
9f005a97:	ff c3                	inc    ebx
9f005a99:	c4                   	(bad)  
9f005a9a:	ff                   	(bad)  
9f005a9b:	ff c3                	inc    ebx
9f005a9d:	c4                   	(bad)  
9f005a9e:	ff                   	(bad)  
9f005a9f:	ff c3                	inc    ebx
9f005aa1:	c4                   	(bad)  
9f005aa2:	ff                   	(bad)  
9f005aa3:	ff c3                	inc    ebx
9f005aa5:	c4                   	(bad)  
9f005aa6:	ff                   	(bad)  
9f005aa7:	ff c3                	inc    ebx
9f005aa9:	c4                   	(bad)  
9f005aaa:	ff                   	(bad)  
9f005aab:	ff c3                	inc    ebx
9f005aad:	c4                   	(bad)  
9f005aae:	ff                   	(bad)  
9f005aaf:	ff c3                	inc    ebx
9f005ab1:	c4                   	(bad)  
9f005ab2:	ff                   	(bad)  
9f005ab3:	ff c3                	inc    ebx
9f005ab5:	c4                   	(bad)  
9f005ab6:	ff                   	(bad)  
9f005ab7:	ff c3                	inc    ebx
9f005ab9:	c4                   	(bad)  
9f005aba:	ff                   	(bad)  
9f005abb:	ff c3                	inc    ebx
9f005abd:	c4                   	(bad)  
9f005abe:	ff                   	(bad)  
9f005abf:	ff c3                	inc    ebx
9f005ac1:	c4                   	(bad)  
9f005ac2:	ff                   	(bad)  
9f005ac3:	ff c3                	inc    ebx
9f005ac5:	c4                   	(bad)  
9f005ac6:	ff                   	(bad)  
9f005ac7:	ff c3                	inc    ebx
9f005ac9:	c4                   	(bad)  
9f005aca:	ff                   	(bad)  
9f005acb:	ff c3                	inc    ebx
9f005acd:	c4                   	(bad)  
9f005ace:	ff                   	(bad)  
9f005acf:	ff c3                	inc    ebx
9f005ad1:	c4                   	(bad)  
9f005ad2:	ff                   	(bad)  
9f005ad3:	ff c3                	inc    ebx
9f005ad5:	c4                   	(bad)  
9f005ad6:	ff                   	(bad)  
9f005ad7:	ff c3                	inc    ebx
9f005ad9:	c4                   	(bad)  
9f005ada:	ff                   	(bad)  
9f005adb:	ff c3                	inc    ebx
9f005add:	c4                   	(bad)  
9f005ade:	ff                   	(bad)  
9f005adf:	ff c3                	inc    ebx
9f005ae1:	c4                   	(bad)  
9f005ae2:	ff                   	(bad)  
9f005ae3:	ff c3                	inc    ebx
9f005ae5:	c4                   	(bad)  
9f005ae6:	ff                   	(bad)  
9f005ae7:	ff c3                	inc    ebx
9f005ae9:	c4                   	(bad)  
9f005aea:	ff                   	(bad)  
9f005aeb:	ff c3                	inc    ebx
9f005aed:	c4                   	(bad)  
9f005aee:	ff                   	(bad)  
9f005aef:	ff c3                	inc    ebx
9f005af1:	c4                   	(bad)  
9f005af2:	ff                   	(bad)  
9f005af3:	ff c3                	inc    ebx
9f005af5:	c4                   	(bad)  
9f005af6:	ff                   	(bad)  
9f005af7:	ff c3                	inc    ebx
9f005af9:	c4                   	(bad)  
9f005afa:	ff                   	(bad)  
9f005afb:	ff c3                	inc    ebx
9f005afd:	c4                   	(bad)  
9f005afe:	ff                   	(bad)  
9f005aff:	ff c3                	inc    ebx
9f005b01:	c4                   	(bad)  
9f005b02:	ff                   	(bad)  
9f005b03:	ff c3                	inc    ebx
9f005b05:	c4                   	(bad)  
9f005b06:	ff                   	(bad)  
9f005b07:	ff c3                	inc    ebx
9f005b09:	c4                   	(bad)  
9f005b0a:	ff                   	(bad)  
9f005b0b:	ff c3                	inc    ebx
9f005b0d:	c4                   	(bad)  
9f005b0e:	ff                   	(bad)  
9f005b0f:	ff c3                	inc    ebx
9f005b11:	c4                   	(bad)  
9f005b12:	ff                   	(bad)  
9f005b13:	ff c3                	inc    ebx
9f005b15:	c4                   	(bad)  
9f005b16:	ff                   	(bad)  
9f005b17:	ff c3                	inc    ebx
9f005b19:	c4                   	(bad)  
9f005b1a:	ff                   	(bad)  
9f005b1b:	ff c3                	inc    ebx
9f005b1d:	c4                   	(bad)  
9f005b1e:	ff                   	(bad)  
9f005b1f:	ff c3                	inc    ebx
9f005b21:	c4                   	(bad)  
9f005b22:	ff                   	(bad)  
9f005b23:	ff c3                	inc    ebx
9f005b25:	c4                   	(bad)  
9f005b26:	ff                   	(bad)  
9f005b27:	ff c3                	inc    ebx
9f005b29:	c4                   	(bad)  
9f005b2a:	ff                   	(bad)  
9f005b2b:	ff c3                	inc    ebx
9f005b2d:	c4                   	(bad)  
9f005b2e:	ff                   	(bad)  
9f005b2f:	ff c3                	inc    ebx
9f005b31:	c4                   	(bad)  
9f005b32:	ff                   	(bad)  
9f005b33:	ff c3                	inc    ebx
9f005b35:	c4                   	(bad)  
9f005b36:	ff                   	(bad)  
9f005b37:	ff c3                	inc    ebx
9f005b39:	c4                   	(bad)  
9f005b3a:	ff                   	(bad)  
9f005b3b:	ff c3                	inc    ebx
9f005b3d:	c4                   	(bad)  
9f005b3e:	ff                   	(bad)  
9f005b3f:	ff c3                	inc    ebx
9f005b41:	c4                   	(bad)  
9f005b42:	ff                   	(bad)  
9f005b43:	ff c3                	inc    ebx
9f005b45:	c4                   	(bad)  
9f005b46:	ff                   	(bad)  
9f005b47:	ff c3                	inc    ebx
9f005b49:	c4                   	(bad)  
9f005b4a:	ff                   	(bad)  
9f005b4b:	ff c3                	inc    ebx
9f005b4d:	c4                   	(bad)  
9f005b4e:	ff                   	(bad)  
9f005b4f:	ff c3                	inc    ebx
9f005b51:	c4                   	(bad)  
9f005b52:	ff                   	(bad)  
9f005b53:	ff b4 c4 ff ff c3 c4 	push   DWORD PTR [esp+eax*8-0x3b3c0001]
9f005b5a:	ff                   	(bad)  
9f005b5b:	ff c3                	inc    ebx
9f005b5d:	c4                   	(bad)  
9f005b5e:	ff                   	(bad)  
9f005b5f:	ff c3                	inc    ebx
9f005b61:	c4                   	(bad)  
9f005b62:	ff                   	(bad)  
9f005b63:	ff c3                	inc    ebx
9f005b65:	c4                   	(bad)  
9f005b66:	ff                   	(bad)  
9f005b67:	ff c3                	inc    ebx
9f005b69:	c4                   	(bad)  
9f005b6a:	ff                   	(bad)  
9f005b6b:	ff c3                	inc    ebx
9f005b6d:	c4                   	(bad)  
9f005b6e:	ff                   	(bad)  
9f005b6f:	ff c3                	inc    ebx
9f005b71:	c4                   	(bad)  
9f005b72:	ff                   	(bad)  
9f005b73:	ff c3                	inc    ebx
9f005b75:	c4                   	(bad)  
9f005b76:	ff                   	(bad)  
9f005b77:	ff c3                	inc    ebx
9f005b79:	c4                   	(bad)  
9f005b7a:	ff                   	(bad)  
9f005b7b:	ff c3                	inc    ebx
9f005b7d:	c4                   	(bad)  
9f005b7e:	ff                   	(bad)  
9f005b7f:	ff 1c c3             	call   FWORD PTR [ebx+eax*8]
9f005b82:	ff                   	(bad)  
9f005b83:	ff                   	(bad)  
9f005b84:	bd c4 ff ff c3       	mov    ebp,0xc3ffffc4
9f005b89:	c4                   	(bad)  
9f005b8a:	ff                   	(bad)  
9f005b8b:	ff c3                	inc    ebx
9f005b8d:	c4                   	(bad)  
9f005b8e:	ff                   	(bad)  
9f005b8f:	ff c3                	inc    ebx
9f005b91:	c4                   	(bad)  
9f005b92:	ff                   	(bad)  
9f005b93:	ff c3                	inc    ebx
9f005b95:	c4                   	(bad)  
9f005b96:	ff                   	(bad)  
9f005b97:	ff                   	(bad)  
9f005b98:	bd c4 ff ff c3       	mov    ebp,0xc3ffffc4
9f005b9d:	c4                   	(bad)  
9f005b9e:	ff                   	(bad)  
9f005b9f:	ff c3                	inc    ebx
9f005ba1:	c4                   	(bad)  
9f005ba2:	ff                   	(bad)  
9f005ba3:	ff c3                	inc    ebx
9f005ba5:	c4                   	(bad)  
9f005ba6:	ff                   	(bad)  
9f005ba7:	ff c3                	inc    ebx
9f005ba9:	c4                   	(bad)  
9f005baa:	ff                   	(bad)  
9f005bab:	ff 50 c4             	call   DWORD PTR [eax-0x3c]
9f005bae:	ff                   	(bad)  
9f005baf:	ff a7 c4 ff ff 12    	jmp    DWORD PTR [edi+0x12ffffc4]
9f005bb5:	c4                   	(bad)  
9f005bb6:	ff                   	(bad)  
9f005bb7:	ff c3                	inc    ebx
9f005bb9:	c4                   	(bad)  
9f005bba:	ff                   	(bad)  
9f005bbb:	ff c3                	inc    ebx
9f005bbd:	c4                   	(bad)  
9f005bbe:	ff                   	(bad)  
9f005bbf:	ff 71 c3             	push   DWORD PTR [ecx-0x3d]
9f005bc2:	ff                   	(bad)  
9f005bc3:	ff c3                	inc    ebx
9f005bc5:	c4                   	(bad)  
9f005bc6:	ff                   	(bad)  
9f005bc7:	ff                   	(bad)  
9f005bc8:	fd                   	std    
9f005bc9:	c4                   	(bad)  
9f005bca:	ff                   	(bad)  
9f005bcb:	ff c3                	inc    ebx
9f005bcd:	c4                   	(bad)  
9f005bce:	ff                   	(bad)  
9f005bcf:	ff c3                	inc    ebx
9f005bd1:	c4                   	(bad)  
9f005bd2:	ff                   	(bad)  
9f005bd3:	ff b0 c4 ff ff 30    	push   DWORD PTR [eax+0x30ffffc4]

9f005bd8 <digits.1462>:
9f005bd8:	30 31                	xor    BYTE PTR [ecx],dh
9f005bda:	32 33                	xor    dh,BYTE PTR [ebx]
9f005bdc:	34 35                	xor    al,0x35
9f005bde:	36                   	ss
9f005bdf:	37                   	aaa    
9f005be0:	38 39                	cmp    BYTE PTR [ecx],bh
9f005be2:	41                   	inc    ecx
9f005be3:	42                   	inc    edx
9f005be4:	43                   	inc    ebx
9f005be5:	44                   	inc    esp
9f005be6:	45                   	inc    ebp
9f005be7:	46                   	inc    esi
	...
9f005c00:	47                   	inc    edi
9f005c01:	4d                   	dec    ebp
9f005c02:	54                   	push   esp
	...

9f005c20 <_ytab>:
9f005c20:	1f                   	pop    ds
9f005c21:	00 00                	add    BYTE PTR [eax],al
9f005c23:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005c26:	00 00                	add    BYTE PTR [eax],al
9f005c28:	1f                   	pop    ds
9f005c29:	00 00                	add    BYTE PTR [eax],al
9f005c2b:	00 1e                	add    BYTE PTR [esi],bl
9f005c2d:	00 00                	add    BYTE PTR [eax],al
9f005c2f:	00 1f                	add    BYTE PTR [edi],bl
9f005c31:	00 00                	add    BYTE PTR [eax],al
9f005c33:	00 1e                	add    BYTE PTR [esi],bl
9f005c35:	00 00                	add    BYTE PTR [eax],al
9f005c37:	00 1f                	add    BYTE PTR [edi],bl
9f005c39:	00 00                	add    BYTE PTR [eax],al
9f005c3b:	00 1f                	add    BYTE PTR [edi],bl
9f005c3d:	00 00                	add    BYTE PTR [eax],al
9f005c3f:	00 1e                	add    BYTE PTR [esi],bl
9f005c41:	00 00                	add    BYTE PTR [eax],al
9f005c43:	00 1f                	add    BYTE PTR [edi],bl
9f005c45:	00 00                	add    BYTE PTR [eax],al
9f005c47:	00 1e                	add    BYTE PTR [esi],bl
9f005c49:	00 00                	add    BYTE PTR [eax],al
9f005c4b:	00 1f                	add    BYTE PTR [edi],bl
9f005c4d:	00 00                	add    BYTE PTR [eax],al
9f005c4f:	00 1f                	add    BYTE PTR [edi],bl
9f005c51:	00 00                	add    BYTE PTR [eax],al
9f005c53:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f005c59:	00 00                	add    BYTE PTR [eax],al
9f005c5b:	00 1e                	add    BYTE PTR [esi],bl
9f005c5d:	00 00                	add    BYTE PTR [eax],al
9f005c5f:	00 1f                	add    BYTE PTR [edi],bl
9f005c61:	00 00                	add    BYTE PTR [eax],al
9f005c63:	00 1e                	add    BYTE PTR [esi],bl
9f005c65:	00 00                	add    BYTE PTR [eax],al
9f005c67:	00 1f                	add    BYTE PTR [edi],bl
9f005c69:	00 00                	add    BYTE PTR [eax],al
9f005c6b:	00 1f                	add    BYTE PTR [edi],bl
9f005c6d:	00 00                	add    BYTE PTR [eax],al
9f005c6f:	00 1e                	add    BYTE PTR [esi],bl
9f005c71:	00 00                	add    BYTE PTR [eax],al
9f005c73:	00 1f                	add    BYTE PTR [edi],bl
9f005c75:	00 00                	add    BYTE PTR [eax],al
9f005c77:	00 1e                	add    BYTE PTR [esi],bl
9f005c79:	00 00                	add    BYTE PTR [eax],al
9f005c7b:	00 1f                	add    BYTE PTR [edi],bl
9f005c7d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f005c80 <.rel.dyn>:
9f005c80:	e4 5e                	in     al,0x5e
9f005c82:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005c88:	e8 5e 00 9f 08       	call   a79f5ceb <tmbuf+0x89efd2b>
9f005c8d:	00 00                	add    BYTE PTR [eax],al
9f005c8f:	00 ec                	add    ah,ch
9f005c91:	5e                   	pop    esi
9f005c92:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005c98:	f0 5e                	lock pop esi
9f005c9a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005ca0:	f4                   	hlt    
9f005ca1:	5e                   	pop    esi
9f005ca2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005ca8:	f8                   	clc    
9f005ca9:	5e                   	pop    esi
9f005caa:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005cb0:	fc                   	cld    
9f005cb1:	5e                   	pop    esi
9f005cb2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005cb8:	00 5f 00             	add    BYTE PTR [edi+0x0],bl
9f005cbb:	9f                   	lahf   
9f005cbc:	08 00                	or     BYTE PTR [eax],al
9f005cbe:	00 00                	add    BYTE PTR [eax],al
9f005cc0:	18 5f 00             	sbb    BYTE PTR [edi+0x0],bl
9f005cc3:	9f                   	lahf   
9f005cc4:	08 00                	or     BYTE PTR [eax],al
9f005cc6:	00 00                	add    BYTE PTR [eax],al
9f005cc8:	1c 5f                	sbb    al,0x5f
9f005cca:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005cd0:	20 5f 00             	and    BYTE PTR [edi+0x0],bl
9f005cd3:	9f                   	lahf   
9f005cd4:	08 00                	or     BYTE PTR [eax],al
9f005cd6:	00 00                	add    BYTE PTR [eax],al
9f005cd8:	42                   	inc    edx
9f005cd9:	09 00                	or     DWORD PTR [eax],eax
9f005cdb:	9f                   	lahf   
9f005cdc:	02 27                	add    ah,BYTE PTR [edi]
9f005cde:	00 00                	add    BYTE PTR [eax],al
9f005ce0:	82                   	(bad)  
9f005ce1:	09 00                	or     DWORD PTR [eax],eax
9f005ce3:	9f                   	lahf   
9f005ce4:	02 27                	add    ah,BYTE PTR [edi]
9f005ce6:	00 00                	add    BYTE PTR [eax],al
9f005ce8:	ab                   	stos   DWORD PTR es:[edi],eax
9f005ce9:	09 00                	or     DWORD PTR [eax],eax
9f005ceb:	9f                   	lahf   
9f005cec:	02 27                	add    ah,BYTE PTR [edi]
9f005cee:	00 00                	add    BYTE PTR [eax],al
9f005cf0:	c4 09                	les    ecx,FWORD PTR [ecx]
9f005cf2:	00 9f 02 27 00 00    	add    BYTE PTR [edi+0x2702],bl
9f005cf8:	1c 0a                	sbb    al,0xa
9f005cfa:	00 9f 02 27 00 00    	add    BYTE PTR [edi+0x2702],bl
9f005d00:	7f 0a                	jg     9f005d0c <_ytab+0xec>
9f005d02:	00 9f 02 27 00 00    	add    BYTE PTR [edi+0x2702],bl
9f005d08:	b5 0a                	mov    ch,0xa
9f005d0a:	00 9f 02 27 00 00    	add    BYTE PTR [edi+0x2702],bl
9f005d10:	f1                   	icebp  
9f005d11:	0a 00                	or     al,BYTE PTR [eax]
9f005d13:	9f                   	lahf   
9f005d14:	02 27                	add    ah,BYTE PTR [edi]
9f005d16:	00 00                	add    BYTE PTR [eax],al
9f005d18:	2f                   	das    
9f005d19:	0b 00                	or     eax,DWORD PTR [eax]
9f005d1b:	9f                   	lahf   
9f005d1c:	02 27                	add    ah,BYTE PTR [edi]
9f005d1e:	00 00                	add    BYTE PTR [eax],al
9f005d20:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005d21:	0b 00                	or     eax,DWORD PTR [eax]
9f005d23:	9f                   	lahf   
9f005d24:	02 27                	add    ah,BYTE PTR [edi]
9f005d26:	00 00                	add    BYTE PTR [eax],al
9f005d28:	b1 0b                	mov    cl,0xb
9f005d2a:	00 9f 02 27 00 00    	add    BYTE PTR [edi+0x2702],bl
9f005d30:	3e                   	ds
9f005d31:	0e                   	push   cs
9f005d32:	00 9f 02 27 00 00    	add    BYTE PTR [edi+0x2702],bl
9f005d38:	6b 0e 00             	imul   ecx,DWORD PTR [esi],0x0
9f005d3b:	9f                   	lahf   
9f005d3c:	02 27                	add    ah,BYTE PTR [edi]
9f005d3e:	00 00                	add    BYTE PTR [eax],al
9f005d40:	e1 0e                	loope  9f005d50 <_ytab+0x130>
9f005d42:	00 9f 02 27 00 00    	add    BYTE PTR [edi+0x2702],bl
9f005d48:	83 30 00             	xor    DWORD PTR [eax],0x0
9f005d4b:	9f                   	lahf   
9f005d4c:	02 27                	add    ah,BYTE PTR [edi]
9f005d4e:	00 00                	add    BYTE PTR [eax],al
9f005d50:	f2 3c 00             	repnz cmp al,0x0
9f005d53:	9f                   	lahf   
9f005d54:	02 27                	add    ah,BYTE PTR [edi]
9f005d56:	00 00                	add    BYTE PTR [eax],al
9f005d58:	14 5f                	adc    al,0x5f
9f005d5a:	00 9f 01 15 00 00    	add    BYTE PTR [edi+0x1501],bl
9f005d60:	10 5f 00             	adc    BYTE PTR [edi+0x0],bl
9f005d63:	9f                   	lahf   
9f005d64:	07                   	pop    es
9f005d65:	13 00                	adc    eax,DWORD PTR [eax]
	...

Disassembly of section .data:

9f005d80 <console_node>:
9f005d80:	01 00                	add    DWORD PTR [eax],eax
	...

9f005dc0 <rcsid>:
9f005dc0:	24 48                	and    al,0x48
9f005dc2:	65                   	gs
9f005dc3:	61                   	popa   
9f005dc4:	64                   	fs
9f005dc5:	65                   	gs
9f005dc6:	72 3a                	jb     9f005e02 <rcsid+0x42>
9f005dc8:	20 2f                	and    BYTE PTR [edi],ch
9f005dca:	75 73                	jne    9f005e3f <_DYNAMIC+0x13>
9f005dcc:	65                   	gs
9f005dcd:	72 36                	jb     9f005e05 <rcsid+0x45>
9f005dcf:	2f                   	das    
9f005dd0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005dd1:	75 73                	jne    9f005e46 <_DYNAMIC+0x1a>
9f005dd3:	74 65                	je     9f005e3a <_DYNAMIC+0xe>
9f005dd5:	72 2f                	jb     9f005e06 <rcsid+0x46>
9f005dd7:	74 63                	je     9f005e3c <_DYNAMIC+0x10>
9f005dd9:	6c                   	ins    BYTE PTR es:[edi],dx
9f005dda:	2f                   	das    
9f005ddb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f005dde:	70 61                	jo     9f005e41 <_DYNAMIC+0x15>
9f005de0:	74 2f                	je     9f005e11 <rcsid+0x51>
9f005de2:	52                   	push   edx
9f005de3:	43                   	inc    ebx
9f005de4:	53                   	push   ebx
9f005de5:	2f                   	das    
9f005de6:	73 74                	jae    9f005e5c <_DYNAMIC+0x30>
9f005de8:	72 73                	jb     9f005e5d <_DYNAMIC+0x31>
9f005dea:	74 72                	je     9f005e5e <_DYNAMIC+0x32>
9f005dec:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f005df0:	20 31                	and    BYTE PTR [ecx],dh
9f005df2:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f005df5:	39 33                	cmp    DWORD PTR [ebx],esi
9f005df7:	2f                   	das    
9f005df8:	30 33                	xor    BYTE PTR [ebx],dh
9f005dfa:	2f                   	das    
9f005dfb:	31 39                	xor    DWORD PTR [ecx],edi
9f005dfd:	20 31                	and    BYTE PTR [ecx],dh
9f005dff:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f005e04:	34 30                	xor    al,0x30
9f005e06:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f005e09:	73 74                	jae    9f005e7f <_DYNAMIC+0x53>
9f005e0b:	65                   	gs
9f005e0c:	72 20                	jb     9f005e2e <_DYNAMIC+0x2>
9f005e0e:	45                   	inc    ebp
9f005e0f:	78 70                	js     9f005e81 <_DYNAMIC+0x55>
9f005e11:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f005e14:	53                   	push   ebx
9f005e15:	50                   	push   eax
9f005e16:	52                   	push   edx
9f005e17:	49                   	dec    ecx
9f005e18:	54                   	push   esp
9f005e19:	45                   	inc    ebp
9f005e1a:	20 28                	and    BYTE PTR [eax],ch
9f005e1c:	42                   	inc    edx
9f005e1d:	65                   	gs
9f005e1e:	72 6b                	jb     9f005e8b <_DYNAMIC+0x5f>
9f005e20:	65                   	gs
9f005e21:	6c                   	ins    BYTE PTR es:[edi],dx
9f005e22:	65                   	gs
9f005e23:	79 29                	jns    9f005e4e <_DYNAMIC+0x22>
9f005e25:	00 00                	add    BYTE PTR [eax],al
	...

9f005e28 <_daylight>:
9f005e28:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f005e2c <_DYNAMIC>:
9f005e2c:	19 00                	sbb    DWORD PTR [eax],eax
9f005e2e:	00 00                	add    BYTE PTR [eax],al
9f005e30:	14 5f                	adc    al,0x5f
9f005e32:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f005e38:	04 00                	add    al,0x0
9f005e3a:	00 00                	add    BYTE PTR [eax],al
9f005e3c:	1a 00                	sbb    al,BYTE PTR [eax]
9f005e3e:	00 00                	add    BYTE PTR [eax],al
9f005e40:	18 5f 00             	sbb    BYTE PTR [edi+0x0],bl
9f005e43:	9f                   	lahf   
9f005e44:	1c 00                	sbb    al,0x0
9f005e46:	00 00                	add    BYTE PTR [eax],al
9f005e48:	04 00                	add    al,0x0
9f005e4a:	00 00                	add    BYTE PTR [eax],al
9f005e4c:	04 00                	add    al,0x0
9f005e4e:	00 00                	add    BYTE PTR [eax],al
9f005e50:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005e51:	52                   	push   edx
9f005e52:	00 9f 05 00 00 00    	add    BYTE PTR [edi+0x5],bl
9f005e58:	b8 50 00 9f 06       	mov    eax,0x69f0050
9f005e5d:	00 00                	add    BYTE PTR [eax],al
9f005e5f:	00 98 4c 00 9f 0a    	add    BYTE PTR [eax+0xa9f004c],bl
9f005e65:	00 00                	add    BYTE PTR [eax],al
9f005e67:	00 f1                	add    cl,dh
9f005e69:	01 00                	add    DWORD PTR [eax],eax
9f005e6b:	00 0b                	add    BYTE PTR [ebx],cl
9f005e6d:	00 00                	add    BYTE PTR [eax],al
9f005e6f:	00 10                	add    BYTE PTR [eax],dl
9f005e71:	00 00                	add    BYTE PTR [eax],al
9f005e73:	00 03                	add    BYTE PTR [ebx],al
9f005e75:	00 00                	add    BYTE PTR [eax],al
9f005e77:	00 04 5f             	add    BYTE PTR [edi+ebx*2],al
9f005e7a:	00 9f 02 00 00 00    	add    BYTE PTR [edi+0x2],bl
9f005e80:	08 00                	or     BYTE PTR [eax],al
9f005e82:	00 00                	add    BYTE PTR [eax],al
9f005e84:	14 00                	adc    al,0x0
9f005e86:	00 00                	add    BYTE PTR [eax],al
9f005e88:	11 00                	adc    DWORD PTR [eax],eax
9f005e8a:	00 00                	add    BYTE PTR [eax],al
9f005e8c:	17                   	pop    ss
9f005e8d:	00 00                	add    BYTE PTR [eax],al
9f005e8f:	00 60 5d             	add    BYTE PTR [eax+0x5d],ah
9f005e92:	00 9f 11 00 00 00    	add    BYTE PTR [edi+0x11],bl
9f005e98:	80 5c 00 9f 12       	sbb    BYTE PTR [eax+eax*1-0x61],0x12
9f005e9d:	00 00                	add    BYTE PTR [eax],al
9f005e9f:	00 e0                	add    al,ah
9f005ea1:	00 00                	add    BYTE PTR [eax],al
9f005ea3:	00 13                	add    BYTE PTR [ebx],dl
9f005ea5:	00 00                	add    BYTE PTR [eax],al
9f005ea7:	00 08                	add    BYTE PTR [eax],cl
9f005ea9:	00 00                	add    BYTE PTR [eax],al
9f005eab:	00 16                	add    BYTE PTR [esi],dl
9f005ead:	00 00                	add    BYTE PTR [eax],al
9f005eaf:	00 00                	add    BYTE PTR [eax],al
9f005eb1:	00 00                	add    BYTE PTR [eax],al
9f005eb3:	00 fa                	add    dl,bh
9f005eb5:	ff                   	(bad)  
9f005eb6:	ff 6f 0b             	jmp    FWORD PTR [edi+0xb]
	...

Disassembly of section .got:

9f005ee4 <.got>:
9f005ee4:	60                   	pusha  
9f005ee5:	5f                   	pop    edi
9f005ee6:	00 9f 40 5f 00 9f    	add    BYTE PTR [edi-0x60ffa0c0],bl
9f005eec:	5c                   	pop    esp
9f005eed:	5f                   	pop    edi
9f005eee:	00 9f 44 5f 00 9f    	add    BYTE PTR [edi-0x60ffa0bc],bl
9f005ef4:	48                   	dec    eax
9f005ef5:	5f                   	pop    edi
9f005ef6:	00 9f 4c 5f 00 9f    	add    BYTE PTR [edi-0x60ffa0b4],bl
9f005efc:	50                   	push   eax
9f005efd:	5f                   	pop    edi
9f005efe:	00 9f c0 5f 00 9f    	add    BYTE PTR [edi-0x60ffa040],bl

Disassembly of section .got.plt:

9f005f04 <_GLOBAL_OFFSET_TABLE_>:
9f005f04:	2c 5e                	sub    al,0x5e
9f005f06:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f005f0c:	00 00                	add    BYTE PTR [eax],al
9f005f0e:	00 00                	add    BYTE PTR [eax],al
9f005f10:	86                   	.byte 0x86
9f005f11:	3d                   	.byte 0x3d
9f005f12:	00                   	.byte 0x0
9f005f13:	9f                   	lahf   

Disassembly of section .init_array:

9f005f14 <.init_array>:
9f005f14:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f005f18 <.fini_array>:
9f005f18:	81                   	.byte 0x81
9f005f19:	0c 00                	or     al,0x0
9f005f1b:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f005f1c <_tzname>:
9f005f1c:	00 5c 00 9f          	add    BYTE PTR [eax+eax*1-0x61],bl
9f005f20:	00 5c 00 9f          	add    BYTE PTR [eax+eax*1-0x61],bl

Disassembly of section .bss:

9f005f40 <heapEnd>:
9f005f40:	00 00                	add    BYTE PTR [eax],al
	...

9f005f44 <heapBase>:
9f005f44:	00 00                	add    BYTE PTR [eax],al
	...

9f005f48 <heapCurr>:
9f005f48:	00 00                	add    BYTE PTR [eax],al
	...

9f005f4c <processEnvp>:
9f005f4c:	00 00                	add    BYTE PTR [eax],al
	...

9f005f50 <libcTZ>:
9f005f50:	00 00                	add    BYTE PTR [eax],al
	...

9f005f54 <lasts.1457>:
9f005f54:	00 00                	add    BYTE PTR [eax],al
	...

9f005f58 <libcInitialized>:
9f005f58:	00 00                	add    BYTE PTR [eax],al
	...

9f005f5c <printBuffer>:
9f005f5c:	00 00                	add    BYTE PTR [eax],al
	...

9f005f60 <params>:
	...

9f005f78 <fops>:
	...

9f005f80 <console_file>:
	...

9f005f90 <_dstbias>:
	...

9f005fa0 <ticksToWait>:
	...

9f005fc0 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	83 00 00             	add    DWORD PTR [eax],0x0
       f:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
      12:	01 00                	add    DWORD PTR [eax],eax
      14:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
      1a:	00 00                	add    BYTE PTR [eax],al
      1c:	9f                   	lahf   
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	75 00                	jne    2a <sysEnter_Vector-0x12ffd6>
      2a:	00 00                	add    BYTE PTR [eax],al
      2c:	02 01                	add    al,BYTE PTR [ecx]
      2e:	06                   	push   es
      2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
      4e:	00 02                	add    BYTE PTR [edx],al
      50:	02 07                	add    al,BYTE PTR [edi]
      52:	f0 00 00             	lock add BYTE PTR [eax],al
      55:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	4e                   	dec    esi
      65:	00 00                	add    BYTE PTR [eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	44                   	inc    esp
      6c:	00 00                	add    BYTE PTR [eax],al
      6e:	00 02                	add    BYTE PTR [edx],al
      70:	04 05                	add    al,0x5
      72:	05 00 00 00 02       	add    eax,0x2000000
      77:	0c 04                	or     al,0x4
      79:	3d 01 00 00 05       	cmp    eax,0x5000001
      7e:	04 83                	add    al,0x83
      80:	00 00                	add    BYTE PTR [eax],al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
      92:	5a                   	pop    edx
      93:	01 00                	add    DWORD PTR [eax],eax
      95:	00 02                	add    BYTE PTR [edx],al
      97:	04 07                	add    al,0x7
      99:	49                   	dec    ecx
      9a:	00 00                	add    BYTE PTR [eax],al
      9c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	0e                   	push   cs
      a5:	00 00                	add    BYTE PTR [eax],al
      a7:	00 01                	add    BYTE PTR [ecx],al
      a9:	08 9d 00 00 00 00    	or     BYTE PTR [ebp+0x0],bl
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	9f                   	lahf   
      b2:	38 00                	cmp    BYTE PTR [eax],al
      b4:	00 00                	add    BYTE PTR [eax],al
      b6:	01 9c d5 00 00 00 08 	add    DWORD PTR [ebp+edx*8+0x8000000],ebx
      bd:	73 00                	jae    bf <sysEnter_Vector-0x12ff41>
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 03    	add    dl,BYTE PTR [ecx+0x3070004]
      d7:	01 00                	add    DWORD PTR [eax],eax
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	9f                   	lahf   
      e4:	38 00                	cmp    BYTE PTR [eax],al
      e6:	00 00                	add    BYTE PTR [eax],al
      e8:	01 9c 07 01 00 00 08 	add    DWORD PTR [edi+eax*1+0x8000001],ebx
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 5b    	add    dl,BYTE PTR [ecx+0x5b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
     117:	9f                   	lahf   
     118:	09 0b                	or     DWORD PTR [ebx],ecx
     11a:	01 00                	add    DWORD PTR [eax],eax
     11c:	00 02                	add    BYTE PTR [edx],al
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 48 5f 00       	add    eax,0x5f4803
     128:	9f                   	lahf   
     129:	09 64 00 00          	or     DWORD PTR [eax+eax*1+0x0],esp
     12d:	00 02                	add    BYTE PTR [edx],al
     12f:	36                   	ss
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
     139:	9f                   	lahf   
     13a:	09 53 01             	or     DWORD PTR [ebx+0x1],edx
     13d:	00 00                	add    BYTE PTR [eax],al
     13f:	02 37                	add    dh,BYTE PTR [edi]
     141:	6f                   	outs   dx,DWORD PTR ds:[esi]
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
     14a:	9f                   	lahf   
     14b:	09 38                	or     DWORD PTR [eax],edi
     14d:	00 00                	add    BYTE PTR [eax],al
     14f:	00 03                	add    BYTE PTR [ebx],al
     151:	52                   	push   edx
     152:	5c                   	pop    esp
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
     15b:	9f                   	lahf   
     15c:	05 04 9d 00 00       	add    eax,0x9d04
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	83 00 00             	add    DWORD PTR [eax],0x0
     172:	00 0c 63             	add    BYTE PTR [ebx+eiz*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 15 00 00 00 70    	add    BYTE PTR ds:0x70000000,dl
     17d:	00 00                	add    BYTE PTR [eax],al
     17f:	9f                   	lahf   
     180:	aa                   	stos   BYTE PTR es:[edi],al
     181:	00 00                	add    BYTE PTR [eax],al
     183:	00 d4                	add    ah,dl
     185:	00 00                	add    BYTE PTR [eax],al
     187:	00 02                	add    BYTE PTR [edx],al
     189:	01 06                	add    DWORD PTR [esi],eax
     18b:	75 00                	jne    18d <sysEnter_Vector-0x12fe73>
     18d:	00 00                	add    BYTE PTR [eax],al
     18f:	02 01                	add    al,BYTE PTR [ecx]
     191:	06                   	push   es
     192:	6e                   	outs   dx,BYTE PTR ds:[esi]
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     1b1:	00 02                	add    BYTE PTR [edx],al
     1b3:	02 07                	add    al,BYTE PTR [edi]
     1b5:	f0 00 00             	lock add BYTE PTR [eax],al
     1b8:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	4e                   	dec    esi
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	44                   	inc    esp
     1cf:	00 00                	add    BYTE PTR [eax],al
     1d1:	00 02                	add    BYTE PTR [edx],al
     1d3:	04 05                	add    al,0x5
     1d5:	05 00 00 00 02       	add    eax,0x2000000
     1da:	0c 04                	or     al,0x4
     1dc:	3d 01 00 00 02       	cmp    eax,0x2000001
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     1ea:	5a                   	pop    edx
     1eb:	01 00                	add    DWORD PTR [eax],eax
     1ed:	00 02                	add    BYTE PTR [edx],al
     1ef:	04 07                	add    al,0x7
     1f1:	49                   	dec    ecx
     1f2:	00 00                	add    BYTE PTR [eax],al
     1f4:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	9c                   	pushf  
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     20e:	01 9c ef 00 00 00 07 	add    DWORD PTR [edi+ebp*8+0x7000000],ebx
     215:	de 0c 00             	fimul  WORD PTR [eax+eax*1]
     218:	00 01                	add    BYTE PTR [ecx],al
     21a:	25 92 00 00 00       	and    eax,0x92
     21f:	02 91 00 07 8d 01    	add    dl,BYTE PTR [ecx+0x18d0700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	93                   	xchg   ebx,eax
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	9f                   	lahf   
     261:	55                   	push   ebp
     262:	00 00                	add    BYTE PTR [eax],al
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	9c                   	pushf  
     267:	46                   	inc    esi
     268:	01 00                	add    DWORD PTR [eax],eax
     26a:	00 07                	add    BYTE PTR [edi],al
     26c:	de 0c 00             	fimul  WORD PTR [eax+eax*1]
     26f:	00 01                	add    BYTE PTR [ecx],al
     271:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	8d 01                	lea    eax,[ecx]
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 5b 00             	or     DWORD PTR [ebx+0x0],ebx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
     2b9:	9f                   	lahf   
     2ba:	09 0b                	or     DWORD PTR [ebx],ecx
     2bc:	01 00                	add    DWORD PTR [eax],eax
     2be:	00 02                	add    BYTE PTR [edx],al
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 48 5f 00       	add    eax,0x5f4803
     2ca:	9f                   	lahf   
     2cb:	09 64 00 00          	or     DWORD PTR [eax+eax*1+0x0],esp
     2cf:	00 02                	add    BYTE PTR [edx],al
     2d1:	36                   	ss
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
     2db:	9f                   	lahf   
     2dc:	09 53 01             	or     DWORD PTR [ebx+0x1],edx
     2df:	00 00                	add    BYTE PTR [eax],al
     2e1:	02 37                	add    dh,BYTE PTR [edi]
     2e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
     2ec:	9f                   	lahf   
     2ed:	09 38                	or     DWORD PTR [eax],edi
     2ef:	00 00                	add    BYTE PTR [eax],al
     2f1:	00 03                	add    BYTE PTR [ebx],al
     2f3:	52                   	push   edx
     2f4:	9b                   	fwait
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
     2fd:	9f                   	lahf   
     2fe:	05 04 92 00 00       	add    eax,0x9204
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	83 00 00             	add    DWORD PTR [eax],0x0
     314:	00 0c b0             	add    BYTE PTR [eax+esi*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 15 00 00 00 1c    	add    BYTE PTR ds:0x1c000000,dl
     31f:	01 00                	add    DWORD PTR [eax],eax
     321:	9f                   	lahf   
     322:	97                   	xchg   edi,eax
     323:	00 00                	add    BYTE PTR [eax],al
     325:	00 db                	add    bl,bl
     327:	01 00                	add    DWORD PTR [eax],eax
     329:	00 02                	add    BYTE PTR [edx],al
     32b:	01 06                	add    DWORD PTR [esi],eax
     32d:	75 00                	jne    32f <sysEnter_Vector-0x12fcd1>
     32f:	00 00                	add    BYTE PTR [eax],al
     331:	02 01                	add    al,BYTE PTR [ecx]
     333:	06                   	push   es
     334:	6e                   	outs   dx,BYTE PTR ds:[esi]
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     353:	00 02                	add    BYTE PTR [edx],al
     355:	02 07                	add    al,BYTE PTR [edi]
     357:	f0 00 00             	lock add BYTE PTR [eax],al
     35a:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	4e                   	dec    esi
     36a:	00 00                	add    BYTE PTR [eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	44                   	inc    esp
     371:	00 00                	add    BYTE PTR [eax],al
     373:	00 02                	add    BYTE PTR [edx],al
     375:	04 05                	add    al,0x5
     377:	05 00 00 00 02       	add    eax,0x2000000
     37c:	0c 04                	or     al,0x4
     37e:	3d 01 00 00 02       	cmp    eax,0x2000001
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     38c:	5a                   	pop    edx
     38d:	01 00                	add    DWORD PTR [eax],eax
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	04 07                	add    al,0x7
     393:	49                   	dec    ecx
     394:	00 00                	add    BYTE PTR [eax],al
     396:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     3b0:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	aa                   	stos   BYTE PTR es:[edi],al
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3d2:	01 00                	add    DWORD PTR [eax],eax
     3d4:	00 01                	add    BYTE PTR [ecx],al
     3d6:	2a 92 00 00 00 05    	sub    dl,BYTE PTR [edx+0x5000000]
     3dc:	03 54 5f 00          	add    edx,DWORD PTR [edi+ebx*2+0x0]
     3e0:	9f                   	lahf   
     3e1:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     3e4:	00 01                	add    BYTE PTR [ecx],al
     3e6:	2b 3a                	sub    edi,DWORD PTR [edx]
     3e8:	00 00                	add    BYTE PTR [eax],al
     3ea:	00 01                	add    BYTE PTR [ecx],al
     3ec:	56                   	push   esi
     3ed:	00 0b                	add    BYTE PTR [ebx],cl
     3ef:	5b                   	pop    ebx
     3f0:	00 00                	add    BYTE PTR [eax],al
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	34 56                	xor    al,0x56
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
     3fe:	9f                   	lahf   
     3ff:	0b 0b                	or     ecx,DWORD PTR [ebx]
     401:	01 00                	add    DWORD PTR [eax],eax
     403:	00 02                	add    BYTE PTR [edx],al
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 48 5f 00       	add    eax,0x5f4803
     40f:	9f                   	lahf   
     410:	0b 64 00 00          	or     esp,DWORD PTR [eax+eax*1+0x0]
     414:	00 02                	add    BYTE PTR [edx],al
     416:	36                   	ss
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
     420:	9f                   	lahf   
     421:	0b 53 01             	or     edx,DWORD PTR [ebx+0x1]
     424:	00 00                	add    BYTE PTR [eax],al
     426:	02 37                	add    dh,BYTE PTR [edi]
     428:	6f                   	outs   dx,DWORD PTR ds:[esi]
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
     431:	9f                   	lahf   
     432:	0b 38                	or     edi,DWORD PTR [eax]
     434:	00 00                	add    BYTE PTR [eax],al
     436:	00 03                	add    BYTE PTR [ebx],al
     438:	52                   	push   edx
     439:	3e 01 00             	add    DWORD PTR ds:[eax],eax
     43c:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
     442:	9f                   	lahf   
     443:	05 04 92 00 00       	add    eax,0x9204
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	83 00 00             	add    DWORD PTR [eax],0x0
     459:	00 0c e0             	add    BYTE PTR [eax+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 15 00 00 00 b4    	add    BYTE PTR ds:0xb4000000,dl
     464:	01 00                	add    DWORD PTR [eax],eax
     466:	9f                   	lahf   
     467:	49                   	dec    ecx
     468:	02 00                	add    al,BYTE PTR [eax]
     46a:	00 b3 02 00 00 02    	add    BYTE PTR [ebx+0x2000002],dh
     470:	01 06                	add    DWORD PTR [esi],eax
     472:	75 00                	jne    474 <sysEnter_Vector-0x12fb8c>
     474:	00 00                	add    BYTE PTR [eax],al
     476:	02 01                	add    al,BYTE PTR [ecx]
     478:	06                   	push   es
     479:	6e                   	outs   dx,BYTE PTR ds:[esi]
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     498:	00 02                	add    BYTE PTR [edx],al
     49a:	02 07                	add    al,BYTE PTR [edi]
     49c:	f0 00 00             	lock add BYTE PTR [eax],al
     49f:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	4e                   	dec    esi
     4af:	00 00                	add    BYTE PTR [eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	44                   	inc    esp
     4b6:	00 00                	add    BYTE PTR [eax],al
     4b8:	00 02                	add    BYTE PTR [edx],al
     4ba:	04 05                	add    al,0x5
     4bc:	05 00 00 00 02       	add    eax,0x2000000
     4c1:	0c 04                	or     al,0x4
     4c3:	3d 01 00 00 02       	cmp    eax,0x2000001
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     4d1:	5a                   	pop    edx
     4d2:	01 00                	add    DWORD PTR [eax],eax
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	04 07                	add    al,0x7
     4d8:	49                   	dec    ecx
     4d9:	00 00                	add    BYTE PTR [eax],al
     4db:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	f7 01 00 00 01 09    	test   DWORD PTR [ecx],0x9010000
     4e9:	b4 01                	mov    ah,0x1
     4eb:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 9f    	add    DWORD PTR ds:0x9f00022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 ec    	add    dl,BYTE PTR [ecx-0x13f9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 9f       	and    eax,0x9f0002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a e1    	add    dl,BYTE PTR [ecx-0x1ef5ff98]
     5ba:	08 00                	or     BYTE PTR [eax],al
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     5f6:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     5f9:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     5fc:	00 00                	add    BYTE PTR [eax],al
     5fe:	00 02                	add    BYTE PTR [edx],al
     600:	91                   	xchg   ecx,eax
     601:	70 00                	jo     603 <sysEnter_Vector-0x12f9fd>
     603:	00 0c 5b             	add    BYTE PTR [ebx+ebx*2],cl
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
     614:	9f                   	lahf   
     615:	0c 0b                	or     al,0xb
     617:	01 00                	add    DWORD PTR [eax],eax
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 48 5f 00       	add    eax,0x5f4803
     625:	9f                   	lahf   
     626:	0c 64                	or     al,0x64
     628:	00 00                	add    BYTE PTR [eax],al
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
     636:	9f                   	lahf   
     637:	0c 53                	or     al,0x53
     639:	01 00                	add    DWORD PTR [eax],eax
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
     647:	9f                   	lahf   
     648:	0c 38                	or     al,0x38
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	52                   	push   edx
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
     658:	9f                   	lahf   
     659:	05 04 92 00 00       	add    eax,0x9204
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	c6 01 00             	mov    BYTE PTR [ecx],0x0
     663:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	83 00 00             	add    DWORD PTR [eax],0x0
     66f:	00 0c 05 02 00 00 15 	add    BYTE PTR [eax*1+0x15000002],cl
     676:	00 00                	add    BYTE PTR [eax],al
     678:	00 00                	add    BYTE PTR [eax],al
     67a:	04 00                	add    al,0x0
     67c:	9f                   	lahf   
     67d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     67e:	01 00                	add    DWORD PTR [eax],eax
     680:	00 c7                	add    bh,al
     682:	03 00                	add    eax,DWORD PTR [eax]
     684:	00 02                	add    BYTE PTR [edx],al
     686:	01 06                	add    DWORD PTR [esi],eax
     688:	6e                   	outs   dx,BYTE PTR ds:[esi]
     689:	00 00                	add    BYTE PTR [eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     693:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     69a:	02 08                	add    cl,BYTE PTR [eax]
     69c:	05 00 00 00 00       	add    eax,0x0
     6a1:	02 01                	add    al,BYTE PTR [ecx]
     6a3:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     6a7:	00 02                	add    BYTE PTR [edx],al
     6a9:	02 07                	add    al,BYTE PTR [edi]
     6ab:	f0 00 00             	lock add BYTE PTR [eax],al
     6ae:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     6b1:	00 00                	add    BYTE PTR [eax],al
     6b3:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6b6:	5a                   	pop    edx
     6b7:	00 00                	add    BYTE PTR [eax],al
     6b9:	00 02                	add    BYTE PTR [edx],al
     6bb:	04 07                	add    al,0x7
     6bd:	4e                   	dec    esi
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	08 07                	or     BYTE PTR [edi],al
     6c4:	44                   	inc    esp
     6c5:	00 00                	add    BYTE PTR [eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	04 07                	add    al,0x7
     6cb:	5a                   	pop    edx
     6cc:	01 00                	add    DWORD PTR [eax],eax
     6ce:	00 02                	add    BYTE PTR [edx],al
     6d0:	01 06                	add    DWORD PTR [esi],eax
     6d2:	75 00                	jne    6d4 <sysEnter_Vector-0x12f92c>
     6d4:	00 00                	add    BYTE PTR [eax],al
     6d6:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6dd:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6e0:	3d 01 00 00 02       	cmp    eax,0x2000001
     6e5:	01 02                	add    DWORD PTR [edx],eax
     6e7:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     6ee:	49                   	dec    ecx
     6ef:	00 00                	add    BYTE PTR [eax],al
     6f1:	00 05 04 6f 00 00    	add    BYTE PTR ds:0x6f04,al
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	13 02                	adc    eax,DWORD PTR [edx]
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	01 0d 00 04 00 9f    	add    DWORD PTR ds:0x9f000400,ecx
     703:	ba 00 00 00 01       	mov    edx,0x1000000
     708:	9c                   	pushf  
     709:	f0 00 00             	lock add BYTE PTR [eax],al
     70c:	00 07                	add    BYTE PTR [edi],al
     70e:	78 00                	js     710 <sysEnter_Vector-0x12f8f0>
     710:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     716:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     71c:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     722:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     728:	64 00 01             	add    BYTE PTR fs:[ecx],al
     72b:	0f f0                	(bad)  
     72d:	00 00                	add    BYTE PTR [eax],al
     72f:	00 02                	add    BYTE PTR [edx],al
     731:	91                   	xchg   ecx,eax
     732:	66 09 45 02          	or     WORD PTR [ebp+0x2],ax
     736:	00 00                	add    BYTE PTR [eax],al
     738:	01 10                	add    DWORD PTR [eax],edx
     73a:	00 01                	add    BYTE PTR [ecx],al
     73c:	00 00                	add    BYTE PTR [eax],al
     73e:	02 91 63 09 55 02    	add    dl,BYTE PTR [ecx+0x2550963]
     744:	00 00                	add    BYTE PTR [eax],al
     746:	01 10                	add    DWORD PTR [eax],edx
     748:	00 01                	add    BYTE PTR [ecx],al
     74a:	00 00                	add    BYTE PTR [eax],al
     74c:	02 91 60 00 0a 6f    	add    dl,BYTE PTR [ecx+0x6f0a0060]
     752:	00 00                	add    BYTE PTR [eax],al
     754:	00 00                	add    BYTE PTR [eax],al
     756:	01 00                	add    DWORD PTR [eax],eax
     758:	00 0b                	add    BYTE PTR [ebx],cl
     75a:	68 00 00 00 09       	push   0x9000000
     75f:	00 0a                	add    BYTE PTR [edx],cl
     761:	6f                   	outs   dx,DWORD PTR ds:[esi]
     762:	00 00                	add    BYTE PTR [eax],al
     764:	00 10                	add    BYTE PTR [eax],dl
     766:	01 00                	add    DWORD PTR [eax],eax
     768:	00 0b                	add    BYTE PTR [ebx],cl
     76a:	68 00 00 00 02       	push   0x2000000
     76f:	00 0c 1c             	add    BYTE PTR [esp+ebx*1],cl
     772:	02 00                	add    al,BYTE PTR [eax]
     774:	00 01                	add    BYTE PTR [ecx],al
     776:	1d ba 04 00 9f       	sbb    eax,0x9f0004ba
     77b:	5a                   	pop    edx
     77c:	00 00                	add    BYTE PTR [eax],al
     77e:	00 01                	add    BYTE PTR [ecx],al
     780:	9c                   	pushf  
     781:	34 01                	xor    al,0x1
     783:	00 00                	add    BYTE PTR [eax],al
     785:	08 63 6d             	or     BYTE PTR [ebx+0x6d],ah
     788:	64 00 01             	add    BYTE PTR fs:[ecx],al
     78b:	1f                   	pop    ds
     78c:	f0 00 00             	lock add BYTE PTR [eax],al
     78f:	00 02                	add    BYTE PTR [edx],al
     791:	91                   	xchg   ecx,eax
     792:	66                   	data16
     793:	00 0c 2f             	add    BYTE PTR [edi+ebp*1],cl
     796:	02 00                	add    al,BYTE PTR [eax]
     798:	00 01                	add    BYTE PTR [ecx],al
     79a:	27                   	daa    
     79b:	14 05                	adc    al,0x5
     79d:	00 9f 5a 00 00 00    	add    BYTE PTR [edi+0x5a],bl
     7a3:	01 9c 58 01 00 00 08 	add    DWORD PTR [eax+ebx*2+0x8000001],ebx
     7aa:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     7ad:	00 01                	add    BYTE PTR [ecx],al
     7af:	29 f0                	sub    eax,esi
     7b1:	00 00                	add    BYTE PTR [eax],al
     7b3:	00 02                	add    BYTE PTR [edx],al
     7b5:	91                   	xchg   ecx,eax
     7b6:	66                   	data16
     7b7:	00 0d 5b 00 00 00    	add    BYTE PTR ds:0x5b,cl
     7bd:	02 34 4f             	add    dh,BYTE PTR [edi+ecx*2]
     7c0:	00 00                	add    BYTE PTR [eax],al
     7c2:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
     7c8:	9f                   	lahf   
     7c9:	0d 0b 01 00 00       	or     eax,0x10b
     7ce:	02 35 4f 00 00 00    	add    dh,BYTE PTR ds:0x4f
     7d4:	05 03 48 5f 00       	add    eax,0x5f4803
     7d9:	9f                   	lahf   
     7da:	0d 64 00 00 00       	or     eax,0x64
     7df:	02 36                	add    dh,BYTE PTR [esi]
     7e1:	4f                   	dec    edi
     7e2:	00 00                	add    BYTE PTR [eax],al
     7e4:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
     7ea:	9f                   	lahf   
     7eb:	0d 53 01 00 00       	or     eax,0x153
     7f0:	02 37                	add    dh,BYTE PTR [edi]
     7f2:	76 00                	jbe    7f4 <sysEnter_Vector-0x12f80c>
     7f4:	00 00                	add    BYTE PTR [eax],al
     7f6:	05 03 50 5f 00       	add    eax,0x5f5003
     7fb:	9f                   	lahf   
     7fc:	0d 38 00 00 00       	or     eax,0x38
     801:	03 52 ad             	add    edx,DWORD PTR [edx-0x53]
     804:	01 00                	add    DWORD PTR [eax],eax
     806:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
     80c:	9f                   	lahf   
     80d:	05 04 92 00 00       	add    eax,0x9204
     812:	00 0d 4a 02 00 00    	add    BYTE PTR ds:0x24a,cl
     818:	01 0b                	add    DWORD PTR [ebx],ecx
     81a:	c4 01                	les    eax,FWORD PTR [ecx]
     81c:	00 00                	add    BYTE PTR [eax],al
     81e:	05 03 20 58 00       	add    eax,0x582003
     823:	9f                   	lahf   
     824:	0e                   	push   cs
     825:	00 01                	add    BYTE PTR [ecx],al
     827:	00 00                	add    BYTE PTR [eax],al
     829:	00 b2 01 00 00 04    	add    BYTE PTR [edx+0x4000001],dh
     82f:	00 3d 03 00 00 04    	add    BYTE PTR ds:0x4000003,bh
     835:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
     83b:	76 02                	jbe    83f <sysEnter_Vector-0x12f7c1>
     83d:	00 00                	add    BYTE PTR [eax],al
     83f:	15 00 00 00 70       	adc    eax,0x70000000
     844:	05 00 9f 6b 02       	add    eax,0x26b9f00
     849:	00 00                	add    BYTE PTR [eax],al
     84b:	99                   	cdq    
     84c:	04 00                	add    al,0x0
     84e:	00 02                	add    BYTE PTR [edx],al
     850:	01 06                	add    DWORD PTR [esi],eax
     852:	75 00                	jne    854 <sysEnter_Vector-0x12f7ac>
     854:	00 00                	add    BYTE PTR [eax],al
     856:	02 01                	add    al,BYTE PTR [ecx]
     858:	06                   	push   es
     859:	6e                   	outs   dx,BYTE PTR ds:[esi]
     85a:	00 00                	add    BYTE PTR [eax],al
     85c:	00 02                	add    BYTE PTR [edx],al
     85e:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     864:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     86b:	02 08                	add    cl,BYTE PTR [eax]
     86d:	05 00 00 00 00       	add    eax,0x0
     872:	02 01                	add    al,BYTE PTR [ecx]
     874:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     878:	00 02                	add    BYTE PTR [edx],al
     87a:	02 07                	add    al,BYTE PTR [edi]
     87c:	f0 00 00             	lock add BYTE PTR [eax],al
     87f:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     882:	00 00                	add    BYTE PTR [eax],al
     884:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     887:	61                   	popa   
     888:	00 00                	add    BYTE PTR [eax],al
     88a:	00 02                	add    BYTE PTR [edx],al
     88c:	04 07                	add    al,0x7
     88e:	4e                   	dec    esi
     88f:	00 00                	add    BYTE PTR [eax],al
     891:	00 02                	add    BYTE PTR [edx],al
     893:	08 07                	or     BYTE PTR [edi],al
     895:	44                   	inc    esp
     896:	00 00                	add    BYTE PTR [eax],al
     898:	00 02                	add    BYTE PTR [edx],al
     89a:	04 05                	add    al,0x5
     89c:	05 00 00 00 02       	add    eax,0x2000000
     8a1:	0c 04                	or     al,0x4
     8a3:	3d 01 00 00 02       	cmp    eax,0x2000001
     8a8:	01 02                	add    DWORD PTR [edx],eax
     8aa:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     8b1:	5a                   	pop    edx
     8b2:	01 00                	add    DWORD PTR [eax],eax
     8b4:	00 02                	add    BYTE PTR [edx],al
     8b6:	04 07                	add    al,0x7
     8b8:	49                   	dec    ecx
     8b9:	00 00                	add    BYTE PTR [eax],al
     8bb:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     8c1:	00 06                	add    BYTE PTR [esi],al
     8c3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8c4:	02 00                	add    al,BYTE PTR [eax]
     8c6:	00 01                	add    BYTE PTR [ecx],al
     8c8:	09 3a                	or     DWORD PTR [edx],edi
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	00 70 05             	add    BYTE PTR [eax+0x5],dh
     8cf:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     8d5:	01 9c e6 00 00 00 07 	add    DWORD PTR [esi+eiz*8+0x7000000],ebx
     8dc:	88 02                	mov    BYTE PTR [edx],al
     8de:	00 00                	add    BYTE PTR [eax],al
     8e0:	01 09                	add    DWORD PTR [ecx],ecx
     8e2:	92                   	xchg   edx,eax
     8e3:	00 00                	add    BYTE PTR [eax],al
     8e5:	00 02                	add    BYTE PTR [edx],al
     8e7:	91                   	xchg   ecx,eax
     8e8:	00 07                	add    BYTE PTR [edi],al
     8ea:	90                   	nop
     8eb:	02 00                	add    al,BYTE PTR [eax]
     8ed:	00 01                	add    BYTE PTR [ecx],al
     8ef:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     8f5:	91                   	xchg   ecx,eax
     8f6:	04 08                	add    al,0x8
     8f8:	82                   	(bad)  
     8f9:	05 00 9f 8e 00       	add    eax,0x8e9f00
     8fe:	00 00                	add    BYTE PTR [eax],al
     900:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     903:	74 00                	je     905 <sysEnter_Vector-0x12f6fb>
     905:	01 0b                	add    DWORD PTR [ebx],ecx
     907:	3a 00                	cmp    al,BYTE PTR [eax]
     909:	00 00                	add    BYTE PTR [eax],al
     90b:	02 91 6c 00 00 0a    	add    dl,BYTE PTR [ecx+0xa00006c]
     911:	68 02 00 00 01       	push   0x1000002
     916:	14 1a                	adc    al,0x1a
     918:	06                   	push   es
     919:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     91f:	01 9c 5a 01 00 00 07 	add    DWORD PTR [edx+ebx*2+0x7000001],ebx
     926:	88 02                	mov    BYTE PTR [edx],al
     928:	00 00                	add    BYTE PTR [eax],al
     92a:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     92d:	00 00                	add    BYTE PTR [eax],al
     92f:	00 02                	add    BYTE PTR [edx],al
     931:	91                   	xchg   ecx,eax
     932:	00 07                	add    BYTE PTR [edi],al
     934:	90                   	nop
     935:	02 00                	add    al,BYTE PTR [eax]
     937:	00 01                	add    BYTE PTR [ecx],al
     939:	14 92                	adc    al,0x92
     93b:	00 00                	add    BYTE PTR [eax],al
     93d:	00 02                	add    BYTE PTR [edx],al
     93f:	91                   	xchg   ecx,eax
     940:	04 0b                	add    al,0xb
     942:	5a                   	pop    edx
     943:	02 00                	add    al,BYTE PTR [eax]
     945:	00 01                	add    BYTE PTR [ecx],al
     947:	16                   	push   ss
     948:	56                   	push   esi
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	00 02                	add    BYTE PTR [edx],al
     94d:	91                   	xchg   ecx,eax
     94e:	6c                   	ins    BYTE PTR es:[edi],dx
     94f:	0c 33                	or     al,0x33
     951:	06                   	push   es
     952:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     958:	41                   	inc    ecx
     959:	01 00                	add    DWORD PTR [eax],eax
     95b:	00 09                	add    BYTE PTR [ecx],cl
     95d:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     960:	00 01                	add    BYTE PTR [ecx],al
     962:	18 3a                	sbb    BYTE PTR [edx],bh
     964:	00 00                	add    BYTE PTR [eax],al
     966:	00 02                	add    BYTE PTR [edx],al
     968:	91                   	xchg   ecx,eax
     969:	68 00 08 1e 07       	push   0x71e0800
     96e:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     974:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     977:	74 00                	je     979 <sysEnter_Vector-0x12f687>
     979:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     97c:	00 00                	add    BYTE PTR [eax],al
     97e:	00 02                	add    BYTE PTR [edx],al
     980:	91                   	xchg   ecx,eax
     981:	64 00 00             	add    BYTE PTR fs:[eax],al
     984:	0d 5b 00 00 00       	or     eax,0x5b
     989:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     98c:	00 00                	add    BYTE PTR [eax],al
     98e:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
     994:	9f                   	lahf   
     995:	0d 0b 01 00 00       	or     eax,0x10b
     99a:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     9a0:	05 03 48 5f 00       	add    eax,0x5f4803
     9a5:	9f                   	lahf   
     9a6:	0d 64 00 00 00       	or     eax,0x64
     9ab:	02 36                	add    dh,BYTE PTR [esi]
     9ad:	56                   	push   esi
     9ae:	00 00                	add    BYTE PTR [eax],al
     9b0:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
     9b6:	9f                   	lahf   
     9b7:	0d 53 01 00 00       	or     eax,0x153
     9bc:	02 37                	add    dh,BYTE PTR [edi]
     9be:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9bf:	00 00                	add    BYTE PTR [eax],al
     9c1:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
     9c7:	9f                   	lahf   
     9c8:	0d 38 00 00 00       	or     eax,0x38
     9cd:	03 52 af             	add    edx,DWORD PTR [edx-0x51]
     9d0:	01 00                	add    DWORD PTR [eax],eax
     9d2:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
     9d8:	9f                   	lahf   
     9d9:	05 04 92 00 00       	add    eax,0x9204
     9de:	00 00                	add    BYTE PTR [eax],al
     9e0:	a3 03 00 00 04       	mov    ds:0x4000003,eax
     9e5:	00 05 04 00 00 04    	add    BYTE PTR ds:0x4000004,al
     9eb:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
     9f1:	58                   	pop    eax
     9f2:	04 00                	add    al,0x0
     9f4:	00 15 00 00 00 dc    	add    BYTE PTR ds:0xdc000000,dl
     9fa:	07                   	pop    es
     9fb:	00 9f 46 01 00 00    	add    BYTE PTR [edi+0x146],bl
     a01:	a3 05 00 00 02       	mov    ds:0x2000005,eax
     a06:	01 06                	add    DWORD PTR [esi],eax
     a08:	75 00                	jne    a0a <sysEnter_Vector-0x12f5f6>
     a0a:	00 00                	add    BYTE PTR [eax],al
     a0c:	02 01                	add    al,BYTE PTR [ecx]
     a0e:	06                   	push   es
     a0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a10:	00 00                	add    BYTE PTR [eax],al
     a12:	00 02                	add    BYTE PTR [edx],al
     a14:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     a1a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     a21:	02 08                	add    cl,BYTE PTR [eax]
     a23:	05 00 00 00 00       	add    eax,0x0
     a28:	02 01                	add    al,BYTE PTR [ecx]
     a2a:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     a2e:	00 02                	add    BYTE PTR [edx],al
     a30:	02 07                	add    al,BYTE PTR [edi]
     a32:	f0 00 00             	lock add BYTE PTR [eax],al
     a35:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     a38:	00 00                	add    BYTE PTR [eax],al
     a3a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     a3d:	61                   	popa   
     a3e:	00 00                	add    BYTE PTR [eax],al
     a40:	00 02                	add    BYTE PTR [edx],al
     a42:	04 07                	add    al,0x7
     a44:	4e                   	dec    esi
     a45:	00 00                	add    BYTE PTR [eax],al
     a47:	00 02                	add    BYTE PTR [edx],al
     a49:	08 07                	or     BYTE PTR [edi],al
     a4b:	44                   	inc    esp
     a4c:	00 00                	add    BYTE PTR [eax],al
     a4e:	00 02                	add    BYTE PTR [edx],al
     a50:	04 05                	add    al,0x5
     a52:	05 00 00 00 02       	add    eax,0x2000000
     a57:	0c 04                	or     al,0x4
     a59:	3d 01 00 00 05       	cmp    eax,0x5000001
     a5e:	04 83                	add    al,0x83
     a60:	00 00                	add    BYTE PTR [eax],al
     a62:	00 06                	add    BYTE PTR [esi],al
     a64:	25 00 00 00 02       	and    eax,0x2000000
     a69:	01 02                	add    DWORD PTR [edx],eax
     a6b:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     a72:	5a                   	pop    edx
     a73:	01 00                	add    DWORD PTR [eax],eax
     a75:	00 07                	add    BYTE PTR [edi],al
     a77:	94                   	xchg   esp,eax
     a78:	03 00                	add    eax,DWORD PTR [eax]
     a7a:	00 04 61             	add    BYTE PTR [ecx+eiz*2],al
     a7d:	00 00                	add    BYTE PTR [eax],al
     a7f:	00 05 15 64 01 00    	add    BYTE PTR ds:0x16415,al
     a85:	00 08                	add    BYTE PTR [eax],cl
     a87:	51                   	push   ecx
     a88:	03 00                	add    eax,DWORD PTR [eax]
     a8a:	00 00                	add    BYTE PTR [eax],al
     a8c:	08 93 04 00 00 01    	or     BYTE PTR [ebx+0x1000004],dl
     a92:	08 ce                	or     dh,cl
     a94:	02 00                	add    al,BYTE PTR [eax]
     a96:	00 02                	add    BYTE PTR [edx],al
     a98:	08 85 04 00 00 03    	or     BYTE PTR [ebp+0x3000004],al
     a9e:	08 f9                	or     cl,bh
     aa0:	02 00                	add    al,BYTE PTR [eax]
     aa2:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     aa5:	eb 02                	jmp    aa9 <sysEnter_Vector-0x12f557>
     aa7:	00 00                	add    BYTE PTR [eax],al
     aa9:	05 08 63 04 00       	add    eax,0x46308
     aae:	00 06                	add    BYTE PTR [esi],al
     ab0:	08 db                	or     bl,bl
     ab2:	03 00                	add    eax,DWORD PTR [eax]
     ab4:	00 07                	add    BYTE PTR [edi],al
     ab6:	08 28                	or     BYTE PTR [eax],ch
     ab8:	03 00                	add    eax,DWORD PTR [eax]
     aba:	00 08                	add    BYTE PTR [eax],cl
     abc:	08 ce                	or     dh,cl
     abe:	03 00                	add    eax,DWORD PTR [eax]
     ac0:	00 09                	add    BYTE PTR [ecx],cl
     ac2:	08 e8                	or     al,ch
     ac4:	03 00                	add    eax,DWORD PTR [eax]
     ac6:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     ac9:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
     acc:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     acf:	96                   	xchg   esi,eax
     ad0:	02 00                	add    al,BYTE PTR [eax]
     ad2:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     ad5:	a9 03 00 00 97       	test   eax,0x97000003
     ada:	09 71 03             	or     DWORD PTR [ecx+0x3],esi
     add:	00 00                	add    BYTE PTR [eax],al
     adf:	63 01                	arpl   WORD PTR [ecx],ax
     ae1:	09 06                	or     DWORD PTR [esi],eax
     ae3:	04 00                	add    al,0x0
     ae5:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
     ae9:	37                   	aaa    
     aea:	04 00                	add    al,0x0
     aec:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     aef:	09 ba 02 00 00 66    	or     DWORD PTR [edx+0x66000002],edi
     af5:	01 09                	add    DWORD PTR [ecx],ecx
     af7:	13 03                	adc    eax,DWORD PTR [ebx]
     af9:	00 00                	add    BYTE PTR [eax],al
     afb:	67 01 09             	add    DWORD PTR [bx+di],ecx
     afe:	06                   	push   es
     aff:	03 00                	add    eax,DWORD PTR [eax]
     b01:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     b04:	09 a6 04 00 00 69    	or     DWORD PTR [esi+0x69000004],esp
     b0a:	01 09                	add    DWORD PTR [ecx],ecx
     b0c:	a9 02 00 00 70       	test   eax,0x70000002
     b11:	01 09                	add    DWORD PTR [ecx],ecx
     b13:	db 02                	fild   DWORD PTR [edx]
     b15:	00 00                	add    BYTE PTR [eax],al
     b17:	71 01                	jno    b1a <sysEnter_Vector-0x12f4e6>
     b19:	09 77 04             	or     DWORD PTR [edi+0x4],esi
     b1c:	00 00                	add    BYTE PTR [eax],al
     b1e:	00 03                	add    BYTE PTR [ebx],al
     b20:	09 f7                	or     edi,esi
     b22:	03 00                	add    eax,DWORD PTR [eax]
     b24:	00 01                	add    BYTE PTR [ecx],al
     b26:	03 09                	add    ecx,DWORD PTR [ecx]
     b28:	88 03                	mov    BYTE PTR [ebx],al
     b2a:	00 00                	add    BYTE PTR [eax],al
     b2c:	02 03                	add    al,BYTE PTR [ebx]
     b2e:	09 61 03             	or     DWORD PTR [ecx+0x3],esp
     b31:	00 00                	add    BYTE PTR [eax],al
     b33:	03 03                	add    eax,DWORD PTR [ebx]
     b35:	09 bd 03 00 00 04    	or     DWORD PTR [ebp+0x4000003],edi
     b3b:	03 09                	add    ecx,DWORD PTR [ecx]
     b3d:	27                   	daa    
     b3e:	04 00                	add    al,0x0
     b40:	00 05 03 00 0a 04    	add    BYTE PTR ds:0x40a0003,al
     b46:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     b49:	49                   	dec    ecx
     b4a:	00 00                	add    BYTE PTR [eax],al
     b4c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     b52:	00 0b                	add    BYTE PTR [ebx],cl
     b54:	b5 04                	mov    ch,0x4
     b56:	00 00                	add    BYTE PTR [eax],al
     b58:	01 0a                	add    DWORD PTR [edx],ecx
     b5a:	3a 00                	cmp    al,BYTE PTR [eax]
     b5c:	00 00                	add    BYTE PTR [eax],al
     b5e:	dc 07                	fadd   QWORD PTR [edi]
     b60:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
     b66:	01 9c b7 01 00 00 0c 	add    DWORD PTR [edi+esi*4+0xc000001],ebx
     b6d:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     b6e:	0a 00                	or     al,BYTE PTR [eax]
     b70:	00 01                	add    BYTE PTR [ecx],al
     b72:	0a 6d 01             	or     ch,BYTE PTR [ebp+0x1]
     b75:	00 00                	add    BYTE PTR [eax],al
     b77:	02 91 00 0c 51 04    	add    dl,BYTE PTR [ecx+0x4510c00]
     b7d:	00 00                	add    BYTE PTR [eax],al
     b7f:	01 0a                	add    DWORD PTR [edx],ecx
     b81:	6d                   	ins    DWORD PTR es:[edi],dx
     b82:	01 00                	add    DWORD PTR [eax],eax
     b84:	00 02                	add    BYTE PTR [edx],al
     b86:	91                   	xchg   ecx,eax
     b87:	04 0c                	add    al,0xc
     b89:	20 04 00             	and    BYTE PTR [eax+eax*1],al
     b8c:	00 01                	add    BYTE PTR [ecx],al
     b8e:	0a 3a                	or     bh,BYTE PTR [edx]
     b90:	00 00                	add    BYTE PTR [eax],al
     b92:	00 02                	add    BYTE PTR [edx],al
     b94:	91                   	xchg   ecx,eax
     b95:	08 00                	or     BYTE PTR [eax],al
     b97:	0b a4 03 00 00 01 0f 	or     esp,DWORD PTR [ebx+eax*1+0xf010000]
     b9e:	64 01 00             	add    DWORD PTR fs:[eax],eax
     ba1:	00 0d 08 00 9f 2d    	add    BYTE PTR ds:0x2d9f0008,cl
     ba7:	00 00                	add    BYTE PTR [eax],al
     ba9:	00 01                	add    BYTE PTR [ecx],al
     bab:	9c                   	pushf  
     bac:	ed                   	in     eax,dx
     bad:	01 00                	add    DWORD PTR [eax],eax
     baf:	00 0c a7             	add    BYTE PTR [edi+eiz*4],cl
     bb2:	0a 00                	or     al,BYTE PTR [eax]
     bb4:	00 01                	add    BYTE PTR [ecx],al
     bb6:	0f 6d                	(bad)  
     bb8:	01 00                	add    DWORD PTR [eax],eax
     bba:	00 02                	add    BYTE PTR [edx],al
     bbc:	91                   	xchg   ecx,eax
     bbd:	00 0c 55 0a 00 00 01 	add    BYTE PTR [edx*2+0x100000a],cl
     bc4:	0f 7d                	(bad)  
     bc6:	00 00                	add    BYTE PTR [eax],al
     bc8:	00 02                	add    BYTE PTR [edx],al
     bca:	91                   	xchg   ecx,eax
     bcb:	04 00                	add    al,0x0
     bcd:	0d c8 02 00 00       	or     eax,0x2c8
     bd2:	01 14 3a             	add    DWORD PTR [edx+edi*1],edx
     bd5:	08 00                	or     BYTE PTR [eax],al
     bd7:	9f                   	lahf   
     bd8:	2a 00                	sub    al,BYTE PTR [eax]
     bda:	00 00                	add    BYTE PTR [eax],al
     bdc:	01 9c 11 02 00 00 0c 	add    DWORD PTR [ecx+edx*1+0xc000002],ebx
     be3:	70 04                	jo     be9 <sysEnter_Vector-0x12f417>
     be5:	00 00                	add    BYTE PTR [eax],al
     be7:	01 14 64             	add    DWORD PTR [esp+eiz*2],edx
     bea:	01 00                	add    DWORD PTR [eax],eax
     bec:	00 02                	add    BYTE PTR [edx],al
     bee:	91                   	xchg   ecx,eax
     bef:	00 00                	add    BYTE PTR [eax],al
     bf1:	0b 4c 04 00          	or     ecx,DWORD PTR [esp+eax*1+0x0]
     bf5:	00 01                	add    BYTE PTR [ecx],al
     bf7:	19 3a                	sbb    DWORD PTR [edx],edi
     bf9:	00 00                	add    BYTE PTR [eax],al
     bfb:	00 64 08 00          	add    BYTE PTR [eax+ecx*1+0x0],ah
     bff:	9f                   	lahf   
     c00:	35 00 00 00 01       	xor    eax,0x1000000
     c05:	9c                   	pushf  
     c06:	63 02                	arpl   WORD PTR [edx],ax
     c08:	00 00                	add    BYTE PTR [eax],al
     c0a:	0c 70                	or     al,0x70
     c0c:	04 00                	add    al,0x0
     c0e:	00 01                	add    BYTE PTR [ecx],al
     c10:	19 64 01 00          	sbb    DWORD PTR [ecx+eax*1+0x0],esp
     c14:	00 02                	add    BYTE PTR [edx],al
     c16:	91                   	xchg   ecx,eax
     c17:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
     c1a:	04 00                	add    al,0x0
     c1c:	00 01                	add    BYTE PTR [ecx],al
     c1e:	19 64 01 00          	sbb    DWORD PTR [ecx+eax*1+0x0],esp
     c22:	00 02                	add    BYTE PTR [edx],al
     c24:	91                   	xchg   ecx,eax
     c25:	04 0c                	add    al,0xc
     c27:	33 06                	xor    eax,DWORD PTR [esi]
     c29:	00 00                	add    BYTE PTR [eax],al
     c2b:	01 19                	add    DWORD PTR [ecx],ebx
     c2d:	3a 00                	cmp    al,BYTE PTR [eax]
     c2f:	00 00                	add    BYTE PTR [eax],al
     c31:	02 91 08 0c 45 04    	add    dl,BYTE PTR [ecx+0x4450c08]
     c37:	00 00                	add    BYTE PTR [eax],al
     c39:	01 19                	add    DWORD PTR [ecx],ebx
     c3b:	3a 00                	cmp    al,BYTE PTR [eax]
     c3d:	00 00                	add    BYTE PTR [eax],al
     c3f:	02 91 0c 00 0b 3e    	add    dl,BYTE PTR [ecx+0x3e0b000c]
     c45:	03 00                	add    eax,DWORD PTR [eax]
     c47:	00 01                	add    BYTE PTR [ecx],al
     c49:	1e                   	push   ds
     c4a:	3a 00                	cmp    al,BYTE PTR [eax]
     c4c:	00 00                	add    BYTE PTR [eax],al
     c4e:	99                   	cdq    
     c4f:	08 00                	or     BYTE PTR [eax],al
     c51:	9f                   	lahf   
     c52:	35 00 00 00 01       	xor    eax,0x1000000
     c57:	9c                   	pushf  
     c58:	b5 02                	mov    ch,0x2
     c5a:	00 00                	add    BYTE PTR [eax],al
     c5c:	0c 70                	or     al,0x70
     c5e:	04 00                	add    al,0x0
     c60:	00 01                	add    BYTE PTR [ecx],al
     c62:	1e                   	push   ds
     c63:	64 01 00             	add    DWORD PTR fs:[eax],eax
     c66:	00 02                	add    BYTE PTR [edx],al
     c68:	91                   	xchg   ecx,eax
     c69:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
     c6c:	04 00                	add    al,0x0
     c6e:	00 01                	add    BYTE PTR [ecx],al
     c70:	1e                   	push   ds
     c71:	64 01 00             	add    DWORD PTR fs:[eax],eax
     c74:	00 02                	add    BYTE PTR [edx],al
     c76:	91                   	xchg   ecx,eax
     c77:	04 0c                	add    al,0xc
     c79:	33 06                	xor    eax,DWORD PTR [esi]
     c7b:	00 00                	add    BYTE PTR [eax],al
     c7d:	01 1e                	add    DWORD PTR [esi],ebx
     c7f:	3a 00                	cmp    al,BYTE PTR [eax]
     c81:	00 00                	add    BYTE PTR [eax],al
     c83:	02 91 08 0c 45 04    	add    dl,BYTE PTR [ecx+0x4450c08]
     c89:	00 00                	add    BYTE PTR [eax],al
     c8b:	01 1e                	add    DWORD PTR [esi],ebx
     c8d:	3a 00                	cmp    al,BYTE PTR [eax]
     c8f:	00 00                	add    BYTE PTR [eax],al
     c91:	02 91 0c 00 0b 9e    	add    dl,BYTE PTR [ecx-0x61f4fff4]
     c97:	03 00                	add    eax,DWORD PTR [eax]
     c99:	00 01                	add    BYTE PTR [ecx],al
     c9b:	23 3a                	and    edi,DWORD PTR [edx]
     c9d:	00 00                	add    BYTE PTR [eax],al
     c9f:	00 ce                	add    dh,cl
     ca1:	08 00                	or     BYTE PTR [eax],al
     ca3:	9f                   	lahf   
     ca4:	26 00 00             	add    BYTE PTR es:[eax],al
     ca7:	00 01                	add    BYTE PTR [ecx],al
     ca9:	9c                   	pushf  
     caa:	07                   	pop    es
     cab:	03 00                	add    eax,DWORD PTR [eax]
     cad:	00 0c 70             	add    BYTE PTR [eax+esi*2],cl
     cb0:	04 00                	add    al,0x0
     cb2:	00 01                	add    BYTE PTR [ecx],al
     cb4:	23 64 01 00          	and    esp,DWORD PTR [ecx+eax*1+0x0]
     cb8:	00 02                	add    BYTE PTR [edx],al
     cba:	91                   	xchg   ecx,eax
     cbb:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
     cbe:	04 00                	add    al,0x0
     cc0:	00 01                	add    BYTE PTR [ecx],al
     cc2:	23 64 01 00          	and    esp,DWORD PTR [ecx+eax*1+0x0]
     cc6:	00 02                	add    BYTE PTR [edx],al
     cc8:	91                   	xchg   ecx,eax
     cc9:	04 0c                	add    al,0xc
     ccb:	33 06                	xor    eax,DWORD PTR [esi]
     ccd:	00 00                	add    BYTE PTR [eax],al
     ccf:	01 23                	add    DWORD PTR [ebx],esp
     cd1:	3a 00                	cmp    al,BYTE PTR [eax]
     cd3:	00 00                	add    BYTE PTR [eax],al
     cd5:	02 91 08 0c 45 04    	add    dl,BYTE PTR [ecx+0x4450c08]
     cdb:	00 00                	add    BYTE PTR [eax],al
     cdd:	01 23                	add    DWORD PTR [ebx],esp
     cdf:	3a 00                	cmp    al,BYTE PTR [eax]
     ce1:	00 00                	add    BYTE PTR [eax],al
     ce3:	02 91 0c 00 0b 45    	add    dl,BYTE PTR [ecx+0x450b000c]
     ce9:	03 00                	add    eax,DWORD PTR [eax]
     ceb:	00 01                	add    BYTE PTR [ecx],al
     ced:	28 3a                	sub    BYTE PTR [edx],bh
     cef:	00 00                	add    BYTE PTR [eax],al
     cf1:	00 f4                	add    ah,dh
     cf3:	08 00                	or     BYTE PTR [eax],al
     cf5:	9f                   	lahf   
     cf6:	2e 00 00             	add    BYTE PTR cs:[eax],al
     cf9:	00 01                	add    BYTE PTR [ecx],al
     cfb:	9c                   	pushf  
     cfc:	4b                   	dec    ebx
     cfd:	03 00                	add    eax,DWORD PTR [eax]
     cff:	00 0c 70             	add    BYTE PTR [eax+esi*2],cl
     d02:	04 00                	add    al,0x0
     d04:	00 01                	add    BYTE PTR [ecx],al
     d06:	28 64 01 00          	sub    BYTE PTR [ecx+eax*1+0x0],ah
     d0a:	00 02                	add    BYTE PTR [edx],al
     d0c:	91                   	xchg   ecx,eax
     d0d:	00 0c 35 03 00 00 01 	add    BYTE PTR [esi*1+0x1000003],cl
     d14:	28 6f 00             	sub    BYTE PTR [edi+0x0],ch
     d17:	00 00                	add    BYTE PTR [eax],al
     d19:	02 91 04 0c 4a 03    	add    dl,BYTE PTR [ecx+0x34a0c04]
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	01 28                	add    DWORD PTR [eax],ebp
     d23:	3a 00                	cmp    al,BYTE PTR [eax]
     d25:	00 00                	add    BYTE PTR [eax],al
     d27:	02 91 08 00 0e 5b    	add    dl,BYTE PTR [ecx+0x5b0e0008]
     d2d:	00 00                	add    BYTE PTR [eax],al
     d2f:	00 02                	add    BYTE PTR [edx],al
     d31:	34 56                	xor    al,0x56
     d33:	00 00                	add    BYTE PTR [eax],al
     d35:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
     d3b:	9f                   	lahf   
     d3c:	0e                   	push   cs
     d3d:	0b 01                	or     eax,DWORD PTR [ecx]
     d3f:	00 00                	add    BYTE PTR [eax],al
     d41:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     d47:	05 03 48 5f 00       	add    eax,0x5f4803
     d4c:	9f                   	lahf   
     d4d:	0e                   	push   cs
     d4e:	64 00 00             	add    BYTE PTR fs:[eax],al
     d51:	00 02                	add    BYTE PTR [edx],al
     d53:	36                   	ss
     d54:	56                   	push   esi
     d55:	00 00                	add    BYTE PTR [eax],al
     d57:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
     d5d:	9f                   	lahf   
     d5e:	0e                   	push   cs
     d5f:	53                   	push   ebx
     d60:	01 00                	add    DWORD PTR [eax],eax
     d62:	00 02                	add    BYTE PTR [edx],al
     d64:	37                   	aaa    
     d65:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d66:	00 00                	add    BYTE PTR [eax],al
     d68:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
     d6e:	9f                   	lahf   
     d6f:	0e                   	push   cs
     d70:	38 00                	cmp    BYTE PTR [eax],al
     d72:	00 00                	add    BYTE PTR [eax],al
     d74:	03 52 a0             	add    edx,DWORD PTR [edx-0x60]
     d77:	03 00                	add    eax,DWORD PTR [eax]
     d79:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
     d7f:	9f                   	lahf   
     d80:	05 04 6d 01 00       	add    eax,0x16d04
     d85:	00 00                	add    BYTE PTR [eax],al
     d87:	c1 02 00             	rol    DWORD PTR [edx],0x0
     d8a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     d8d:	cc                   	int3   
     d8e:	04 00                	add    al,0x0
     d90:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     d93:	83 00 00             	add    DWORD PTR [eax],0x0
     d96:	00 0c bc             	add    BYTE PTR [esp+edi*4],cl
     d99:	04 00                	add    al,0x0
     d9b:	00 15 00 00 00 24    	add    BYTE PTR ds:0x24000000,dl
     da1:	09 00                	or     DWORD PTR [eax],eax
     da3:	9f                   	lahf   
     da4:	66 01 00             	add    WORD PTR [eax],ax
     da7:	00 a8 06 00 00 02    	add    BYTE PTR [eax+0x2000006],ch
     dad:	01 06                	add    DWORD PTR [esi],eax
     daf:	75 00                	jne    db1 <sysEnter_Vector-0x12f24f>
     db1:	00 00                	add    BYTE PTR [eax],al
     db3:	02 01                	add    al,BYTE PTR [ecx]
     db5:	06                   	push   es
     db6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     db7:	00 00                	add    BYTE PTR [eax],al
     db9:	00 02                	add    BYTE PTR [edx],al
     dbb:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
     dc1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     dc8:	02 08                	add    cl,BYTE PTR [eax]
     dca:	05 00 00 00 00       	add    eax,0x0
     dcf:	02 01                	add    al,BYTE PTR [ecx]
     dd1:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
     dd5:	00 02                	add    BYTE PTR [edx],al
     dd7:	02 07                	add    al,BYTE PTR [edi]
     dd9:	f0 00 00             	lock add BYTE PTR [eax],al
     ddc:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     de4:	61                   	popa   
     de5:	00 00                	add    BYTE PTR [eax],al
     de7:	00 02                	add    BYTE PTR [edx],al
     de9:	04 07                	add    al,0x7
     deb:	4e                   	dec    esi
     dec:	00 00                	add    BYTE PTR [eax],al
     dee:	00 02                	add    BYTE PTR [edx],al
     df0:	08 07                	or     BYTE PTR [edi],al
     df2:	44                   	inc    esp
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	00 02                	add    BYTE PTR [edx],al
     df7:	04 05                	add    al,0x5
     df9:	05 00 00 00 02       	add    eax,0x2000000
     dfe:	0c 04                	or     al,0x4
     e00:	3d 01 00 00 02       	cmp    eax,0x2000001
     e05:	01 02                	add    DWORD PTR [edx],eax
     e07:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
     e0e:	5a                   	pop    edx
     e0f:	01 00                	add    DWORD PTR [eax],eax
     e11:	00 05 94 03 00 00    	add    BYTE PTR ds:0x394,al
     e17:	04 61                	add    al,0x61
     e19:	00 00                	add    BYTE PTR [eax],al
     e1b:	00 05 15 59 01 00    	add    BYTE PTR ds:0x15915,al
     e21:	00 06                	add    BYTE PTR [esi],al
     e23:	51                   	push   ecx
     e24:	03 00                	add    eax,DWORD PTR [eax]
     e26:	00 00                	add    BYTE PTR [eax],al
     e28:	06                   	push   es
     e29:	93                   	xchg   ebx,eax
     e2a:	04 00                	add    al,0x0
     e2c:	00 01                	add    BYTE PTR [ecx],al
     e2e:	06                   	push   es
     e2f:	ce                   	into   
     e30:	02 00                	add    al,BYTE PTR [eax]
     e32:	00 02                	add    BYTE PTR [edx],al
     e34:	06                   	push   es
     e35:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
     e38:	00 03                	add    BYTE PTR [ebx],al
     e3a:	06                   	push   es
     e3b:	f9                   	stc    
     e3c:	02 00                	add    al,BYTE PTR [eax]
     e3e:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     e41:	eb 02                	jmp    e45 <sysEnter_Vector-0x12f1bb>
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	05 06 63 04 00       	add    eax,0x46306
     e4a:	00 06                	add    BYTE PTR [esi],al
     e4c:	06                   	push   es
     e4d:	db 03                	fild   DWORD PTR [ebx]
     e4f:	00 00                	add    BYTE PTR [eax],al
     e51:	07                   	pop    es
     e52:	06                   	push   es
     e53:	28 03                	sub    BYTE PTR [ebx],al
     e55:	00 00                	add    BYTE PTR [eax],al
     e57:	08 06                	or     BYTE PTR [esi],al
     e59:	ce                   	into   
     e5a:	03 00                	add    eax,DWORD PTR [eax]
     e5c:	00 09                	add    BYTE PTR [ecx],cl
     e5e:	06                   	push   es
     e5f:	e8 03 00 00 4f       	call   4f000e67 <sysEnter_Vector+0x4eed0e67>
     e64:	06                   	push   es
     e65:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
     e68:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     e6b:	96                   	xchg   esi,eax
     e6c:	02 00                	add    al,BYTE PTR [eax]
     e6e:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     e71:	a9 03 00 00 97       	test   eax,0x97000003
     e76:	07                   	pop    es
     e77:	71 03                	jno    e7c <sysEnter_Vector-0x12f184>
     e79:	00 00                	add    BYTE PTR [eax],al
     e7b:	63 01                	arpl   WORD PTR [ecx],ax
     e7d:	07                   	pop    es
     e7e:	06                   	push   es
     e7f:	04 00                	add    al,0x0
     e81:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
     e85:	37                   	aaa    
     e86:	04 00                	add    al,0x0
     e88:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     e8b:	07                   	pop    es
     e8c:	ba 02 00 00 66       	mov    edx,0x66000002
     e91:	01 07                	add    DWORD PTR [edi],eax
     e93:	13 03                	adc    eax,DWORD PTR [ebx]
     e95:	00 00                	add    BYTE PTR [eax],al
     e97:	67 01 07             	add    DWORD PTR [bx],eax
     e9a:	06                   	push   es
     e9b:	03 00                	add    eax,DWORD PTR [eax]
     e9d:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     ea0:	07                   	pop    es
     ea1:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     ea2:	04 00                	add    al,0x0
     ea4:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     ea7:	07                   	pop    es
     ea8:	a9 02 00 00 70       	test   eax,0x70000002
     ead:	01 07                	add    DWORD PTR [edi],eax
     eaf:	db 02                	fild   DWORD PTR [edx]
     eb1:	00 00                	add    BYTE PTR [eax],al
     eb3:	71 01                	jno    eb6 <sysEnter_Vector-0x12f14a>
     eb5:	07                   	pop    es
     eb6:	77 04                	ja     ebc <sysEnter_Vector-0x12f144>
     eb8:	00 00                	add    BYTE PTR [eax],al
     eba:	00 03                	add    BYTE PTR [ebx],al
     ebc:	07                   	pop    es
     ebd:	f7 03 00 00 01 03    	test   DWORD PTR [ebx],0x3010000
     ec3:	07                   	pop    es
     ec4:	88 03                	mov    BYTE PTR [ebx],al
     ec6:	00 00                	add    BYTE PTR [eax],al
     ec8:	02 03                	add    al,BYTE PTR [ebx]
     eca:	07                   	pop    es
     ecb:	61                   	popa   
     ecc:	03 00                	add    eax,DWORD PTR [eax]
     ece:	00 03                	add    BYTE PTR [ebx],al
     ed0:	03 07                	add    eax,DWORD PTR [edi]
     ed2:	bd 03 00 00 04       	mov    ebp,0x4000003
     ed7:	03 07                	add    eax,DWORD PTR [edi]
     ed9:	27                   	daa    
     eda:	04 00                	add    al,0x0
     edc:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     ee2:	07                   	pop    es
     ee3:	49                   	dec    ecx
     ee4:	00 00                	add    BYTE PTR [eax],al
     ee6:	00 08                	add    BYTE PTR [eax],cl
     ee8:	04 25                	add    al,0x25
     eea:	00 00                	add    BYTE PTR [eax],al
     eec:	00 09                	add    BYTE PTR [ecx],cl
     eee:	fc                   	cld    
     eef:	04 00                	add    al,0x0
     ef1:	00 01                	add    BYTE PTR [ecx],al
     ef3:	0f 24                	(bad)  
     ef5:	09 00                	or     DWORD PTR [eax],eax
     ef7:	9f                   	lahf   
     ef8:	26 00 00             	add    BYTE PTR es:[eax],al
     efb:	00 01                	add    BYTE PTR [ecx],al
     efd:	9c                   	pushf  
     efe:	8a 01                	mov    al,BYTE PTR [ecx]
     f00:	00 00                	add    BYTE PTR [eax],al
     f02:	0a 51 04             	or     dl,BYTE PTR [ecx+0x4]
     f05:	00 00                	add    BYTE PTR [eax],al
     f07:	01 0f                	add    DWORD PTR [edi],ecx
     f09:	60                   	pusha  
     f0a:	01 00                	add    DWORD PTR [eax],eax
     f0c:	00 02                	add    BYTE PTR [edx],al
     f0e:	91                   	xchg   ecx,eax
     f0f:	00 00                	add    BYTE PTR [eax],al
     f11:	09 f2                	or     edx,esi
     f13:	04 00                	add    al,0x0
     f15:	00 01                	add    BYTE PTR [ecx],al
     f17:	14 4a                	adc    al,0x4a
     f19:	09 00                	or     DWORD PTR [eax],eax
     f1b:	9f                   	lahf   
     f1c:	43                   	inc    ebx
     f1d:	00 00                	add    BYTE PTR [eax],al
     f1f:	00 01                	add    BYTE PTR [ecx],al
     f21:	9c                   	pushf  
     f22:	ba 01 00 00 0b       	mov    edx,0xb000001
     f27:	63 00                	arpl   WORD PTR [eax],ax
     f29:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     f30:	91                   	xchg   ecx,eax
     f31:	60                   	pusha  
     f32:	0c 51                	or     al,0x51
     f34:	04 00                	add    al,0x0
     f36:	00 01                	add    BYTE PTR [ecx],al
     f38:	16                   	push   ss
     f39:	ba 01 00 00 02       	mov    edx,0x2000001
     f3e:	91                   	xchg   ecx,eax
     f3f:	72 00                	jb     f41 <sysEnter_Vector-0x12f0bf>
     f41:	0d 25 00 00 00       	or     eax,0x25
     f46:	ca 01 00             	retf   0x1
     f49:	00 0e                	add    BYTE PTR [esi],cl
     f4b:	84 00                	test   BYTE PTR [eax],al
     f4d:	00 00                	add    BYTE PTR [eax],al
     f4f:	01 00                	add    DWORD PTR [eax],eax
     f51:	0f 01 05 00 00 01 1f 	sgdtd  ds:0x1f010000
     f58:	25 00 00 00 8d       	and    eax,0x8d000000
     f5d:	09 00                	or     DWORD PTR [eax],eax
     f5f:	9f                   	lahf   
     f60:	43                   	inc    ebx
     f61:	00 00                	add    BYTE PTR [eax],al
     f63:	00 01                	add    BYTE PTR [ecx],al
     f65:	9c                   	pushf  
     f66:	f0 01 00             	lock add DWORD PTR [eax],eax
     f69:	00 10                	add    BYTE PTR [eax],dl
     f6b:	63 00                	arpl   WORD PTR [eax],ax
     f6d:	01 21                	add    DWORD PTR [ecx],esp
     f6f:	25 00 00 00 02       	and    eax,0x2000000
     f74:	91                   	xchg   ecx,eax
     f75:	73 00                	jae    f77 <sysEnter_Vector-0x12f089>
     f77:	11 dc                	adc    esp,ebx
     f79:	04 00                	add    al,0x0
     f7b:	00 01                	add    BYTE PTR [ecx],al
     f7d:	2d 3a 00 00 00       	sub    eax,0x3a
     f82:	d0 09                	ror    BYTE PTR [ecx],1
     f84:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
     f8a:	01 9c 69 02 00 00 0a 	add    DWORD PTR [ecx+ebp*2+0xa000002],ebx
     f91:	51                   	push   ecx
     f92:	04 00                	add    al,0x0
     f94:	00 01                	add    BYTE PTR [ecx],al
     f96:	2d 60 01 00 00       	sub    eax,0x160
     f9b:	02 91 00 0a e1 04    	add    dl,BYTE PTR [ecx+0x4e10a00]
     fa1:	00 00                	add    BYTE PTR [eax],al
     fa3:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     fa9:	02 91 04 0a ce 04    	add    dl,BYTE PTR [ecx+0x4ce0a04]
     faf:	00 00                	add    BYTE PTR [eax],al
     fb1:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     fb7:	02 91 08 0c d5 04    	add    dl,BYTE PTR [ecx+0x4d50c08]
     fbd:	00 00                	add    BYTE PTR [eax],al
     fbf:	01 2f                	add    DWORD PTR [edi],ebp
     fc1:	25 00 00 00 02       	and    eax,0x2000000
     fc6:	91                   	xchg   ecx,eax
     fc7:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     fca:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     fcc:	00 01                	add    BYTE PTR [ecx],al
     fce:	30 3a                	xor    BYTE PTR [edx],bh
     fd0:	00 00                	add    BYTE PTR [eax],al
     fd2:	00 02                	add    BYTE PTR [edx],al
     fd4:	91                   	xchg   ecx,eax
     fd5:	6c                   	ins    BYTE PTR es:[edi],dx
     fd6:	0c f7                	or     al,0xf7
     fd8:	04 00                	add    al,0x0
     fda:	00 01                	add    BYTE PTR [ecx],al
     fdc:	31 ba 01 00 00 02    	xor    DWORD PTR [edx+0x2000001],edi
     fe2:	91                   	xchg   ecx,eax
     fe3:	69 12 e8 04 00 00    	imul   edx,DWORD PTR [edx],0x4e8
     fe9:	01 36                	add    DWORD PTR [esi],esi
     feb:	0d 0a 00 9f 00       	or     eax,0x9f000a
     ff0:	13 5b 00             	adc    ebx,DWORD PTR [ebx+0x0]
     ff3:	00 00                	add    BYTE PTR [eax],al
     ff5:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     ff8:	00 00                	add    BYTE PTR [eax],al
     ffa:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    1000:	9f                   	lahf   
    1001:	13 0b                	adc    ecx,DWORD PTR [ebx]
    1003:	01 00                	add    DWORD PTR [eax],eax
    1005:	00 02                	add    BYTE PTR [edx],al
    1007:	35 56 00 00 00       	xor    eax,0x56
    100c:	05 03 48 5f 00       	add    eax,0x5f4803
    1011:	9f                   	lahf   
    1012:	13 64 00 00          	adc    esp,DWORD PTR [eax+eax*1+0x0]
    1016:	00 02                	add    BYTE PTR [edx],al
    1018:	36                   	ss
    1019:	56                   	push   esi
    101a:	00 00                	add    BYTE PTR [eax],al
    101c:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    1022:	9f                   	lahf   
    1023:	13 53 01             	adc    edx,DWORD PTR [ebx+0x1]
    1026:	00 00                	add    BYTE PTR [eax],al
    1028:	02 37                	add    dh,BYTE PTR [edi]
    102a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    102b:	00 00                	add    BYTE PTR [eax],al
    102d:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    1033:	9f                   	lahf   
    1034:	13 38                	adc    edi,DWORD PTR [eax]
    1036:	00 00                	add    BYTE PTR [eax],al
    1038:	00 03                	add    BYTE PTR [ebx],al
    103a:	52                   	push   edx
    103b:	be 02 00 00 05       	mov    esi,0x5000002
    1040:	03 4c 5f 00          	add    ecx,DWORD PTR [edi+ebx*2+0x0]
    1044:	9f                   	lahf   
    1045:	08 04 60             	or     BYTE PTR [eax+eiz*2],al
    1048:	01 00                	add    DWORD PTR [eax],eax
    104a:	00 00                	add    BYTE PTR [eax],al
    104c:	42                   	inc    edx
    104d:	0a 00                	or     al,BYTE PTR [eax]
    104f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1052:	eb 05                	jmp    1059 <sysEnter_Vector-0x12efa7>
    1054:	00 00                	add    BYTE PTR [eax],al
    1056:	04 01                	add    al,0x1
    1058:	83 00 00             	add    DWORD PTR [eax],0x0
    105b:	00 0c ce             	add    BYTE PTR [esi+ecx*8],cl
    105e:	06                   	push   es
    105f:	00 00                	add    BYTE PTR [eax],al
    1061:	15 00 00 00 8c       	adc    eax,0x8c000000
    1066:	0a 00                	or     al,BYTE PTR [eax]
    1068:	9f                   	lahf   
    1069:	e9 0b 00 00 d5       	jmp    d5001079 <tmbuf+0x35ffb0b9>
    106e:	07                   	pop    es
    106f:	00 00                	add    BYTE PTR [eax],al
    1071:	02 50 06             	add    dl,BYTE PTR [eax+0x6]
    1074:	00 00                	add    BYTE PTR [eax],al
    1076:	02 28                	add    ch,BYTE PTR [eax]
    1078:	30 00                	xor    BYTE PTR [eax],al
    107a:	00 00                	add    BYTE PTR [eax],al
    107c:	03 04 78             	add    eax,DWORD PTR [eax+edi*2]
    107f:	05 00 00 3a 00       	add    eax,0x3a0000
    1084:	00 00                	add    BYTE PTR [eax],al
    1086:	04 01                	add    al,0x1
    1088:	06                   	push   es
    1089:	75 00                	jne    108b <sysEnter_Vector-0x12ef75>
    108b:	00 00                	add    BYTE PTR [eax],al
    108d:	02 57 06             	add    dl,BYTE PTR [edi+0x6]
    1090:	00 00                	add    BYTE PTR [eax],al
    1092:	02 62 25             	add    ah,BYTE PTR [edx+0x25]
    1095:	00 00                	add    BYTE PTR [eax],al
    1097:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    109a:	06                   	push   es
    109b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    109c:	00 00                	add    BYTE PTR [eax],al
    109e:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    10a1:	05 49 01 00 00       	add    eax,0x149
    10a6:	05 04 05 69 6e       	add    eax,0x6e690504
    10ab:	74 00                	je     10ad <sysEnter_Vector-0x12ef53>
    10ad:	04 08                	add    al,0x8
    10af:	05 00 00 00 00       	add    eax,0x0
    10b4:	04 01                	add    al,0x1
    10b6:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    10ba:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    10bd:	07                   	pop    es
    10be:	f0 00 00             	lock add BYTE PTR [eax],al
    10c1:	00 02                	add    BYTE PTR [edx],al
    10c3:	7a 00                	jp     10c5 <sysEnter_Vector-0x12ef3b>
    10c5:	00 00                	add    BYTE PTR [eax],al
    10c7:	03 34 81             	add    esi,DWORD PTR [ecx+eax*4]
    10ca:	00 00                	add    BYTE PTR [eax],al
    10cc:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    10cf:	07                   	pop    es
    10d0:	4e                   	dec    esi
    10d1:	00 00                	add    BYTE PTR [eax],al
    10d3:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    10d6:	07                   	pop    es
    10d7:	44                   	inc    esp
    10d8:	00 00                	add    BYTE PTR [eax],al
    10da:	00 02                	add    BYTE PTR [edx],al
    10dc:	2a 05 00 00 03 56    	sub    al,BYTE PTR ds:0x56030000
    10e2:	81 00 00 00 02 23    	add    DWORD PTR [eax],0x23020000
    10e8:	05 00 00 04 d8       	add    eax,0xd8040000
    10ed:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    10f3:	05 05 00 00 00       	add    eax,0x5
    10f8:	04 0c                	add    al,0xc
    10fa:	04 3d                	add    al,0x3d
    10fc:	01 00                	add    DWORD PTR [eax],eax
    10fe:	00 06                	add    BYTE PTR [esi],al
    1100:	04 b9                	add    al,0xb9
    1102:	00 00                	add    BYTE PTR [eax],al
    1104:	00 07                	add    BYTE PTR [edi],al
    1106:	3a 00                	cmp    al,BYTE PTR [eax]
    1108:	00 00                	add    BYTE PTR [eax],al
    110a:	04 01                	add    al,0x1
    110c:	02 ea                	add    ch,dl
    110e:	00 00                	add    BYTE PTR [eax],al
    1110:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    1113:	07                   	pop    es
    1114:	5a                   	pop    edx
    1115:	01 00                	add    DWORD PTR [eax],eax
    1117:	00 08                	add    BYTE PTR [eax],cl
    1119:	94                   	xchg   esp,eax
    111a:	03 00                	add    eax,DWORD PTR [eax]
    111c:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
    111f:	00 00                	add    BYTE PTR [eax],al
    1121:	00 05 15 9a 01 00    	add    BYTE PTR ds:0x19a15,al
    1127:	00 09                	add    BYTE PTR [ecx],cl
    1129:	51                   	push   ecx
    112a:	03 00                	add    eax,DWORD PTR [eax]
    112c:	00 00                	add    BYTE PTR [eax],al
    112e:	09 93 04 00 00 01    	or     DWORD PTR [ebx+0x1000004],edx
    1134:	09 ce                	or     esi,ecx
    1136:	02 00                	add    al,BYTE PTR [eax]
    1138:	00 02                	add    BYTE PTR [edx],al
    113a:	09 85 04 00 00 03    	or     DWORD PTR [ebp+0x3000004],eax
    1140:	09 f9                	or     ecx,edi
    1142:	02 00                	add    al,BYTE PTR [eax]
    1144:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1147:	eb 02                	jmp    114b <sysEnter_Vector-0x12eeb5>
    1149:	00 00                	add    BYTE PTR [eax],al
    114b:	05 09 63 04 00       	add    eax,0x46309
    1150:	00 06                	add    BYTE PTR [esi],al
    1152:	09 db                	or     ebx,ebx
    1154:	03 00                	add    eax,DWORD PTR [eax]
    1156:	00 07                	add    BYTE PTR [edi],al
    1158:	09 28                	or     DWORD PTR [eax],ebp
    115a:	03 00                	add    eax,DWORD PTR [eax]
    115c:	00 08                	add    BYTE PTR [eax],cl
    115e:	09 ce                	or     esi,ecx
    1160:	03 00                	add    eax,DWORD PTR [eax]
    1162:	00 09                	add    BYTE PTR [ecx],cl
    1164:	09 e8                	or     eax,ebp
    1166:	03 00                	add    eax,DWORD PTR [eax]
    1168:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
    116b:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
    116e:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    1171:	96                   	xchg   esi,eax
    1172:	02 00                	add    al,BYTE PTR [eax]
    1174:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
    1177:	a9 03 00 00 97       	test   eax,0x97000003
    117c:	0a 71 03             	or     dh,BYTE PTR [ecx+0x3]
    117f:	00 00                	add    BYTE PTR [eax],al
    1181:	63 01                	arpl   WORD PTR [ecx],ax
    1183:	0a 06                	or     al,BYTE PTR [esi]
    1185:	04 00                	add    al,0x0
    1187:	00 64 01 0a          	add    BYTE PTR [ecx+eax*1+0xa],ah
    118b:	37                   	aaa    
    118c:	04 00                	add    al,0x0
    118e:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1191:	0a ba 02 00 00 66    	or     bh,BYTE PTR [edx+0x66000002]
    1197:	01 0a                	add    DWORD PTR [edx],ecx
    1199:	13 03                	adc    eax,DWORD PTR [ebx]
    119b:	00 00                	add    BYTE PTR [eax],al
    119d:	67 01 0a             	add    DWORD PTR [bp+si],ecx
    11a0:	06                   	push   es
    11a1:	03 00                	add    eax,DWORD PTR [eax]
    11a3:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    11a6:	0a a6 04 00 00 69    	or     ah,BYTE PTR [esi+0x69000004]
    11ac:	01 0a                	add    DWORD PTR [edx],ecx
    11ae:	a9 02 00 00 70       	test   eax,0x70000002
    11b3:	01 0a                	add    DWORD PTR [edx],ecx
    11b5:	db 02                	fild   DWORD PTR [edx]
    11b7:	00 00                	add    BYTE PTR [eax],al
    11b9:	71 01                	jno    11bc <sysEnter_Vector-0x12ee44>
    11bb:	0a 77 04             	or     dh,BYTE PTR [edi+0x4]
    11be:	00 00                	add    BYTE PTR [eax],al
    11c0:	00 03                	add    BYTE PTR [ebx],al
    11c2:	0a f7                	or     dh,bh
    11c4:	03 00                	add    eax,DWORD PTR [eax]
    11c6:	00 01                	add    BYTE PTR [ecx],al
    11c8:	03 0a                	add    ecx,DWORD PTR [edx]
    11ca:	88 03                	mov    BYTE PTR [ebx],al
    11cc:	00 00                	add    BYTE PTR [eax],al
    11ce:	02 03                	add    al,BYTE PTR [ebx]
    11d0:	0a 61 03             	or     ah,BYTE PTR [ecx+0x3]
    11d3:	00 00                	add    BYTE PTR [eax],al
    11d5:	03 03                	add    eax,DWORD PTR [ebx]
    11d7:	0a bd 03 00 00 04    	or     bh,BYTE PTR [ebp+0x4000003]
    11dd:	03 0a                	add    ecx,DWORD PTR [edx]
    11df:	27                   	daa    
    11e0:	04 00                	add    al,0x0
    11e2:	00 05 03 00 0b 04    	add    BYTE PTR ds:0x40b0003,al
    11e8:	04 04                	add    al,0x4
    11ea:	07                   	pop    es
    11eb:	49                   	dec    ecx
    11ec:	00 00                	add    BYTE PTR [eax],al
    11ee:	00 06                	add    BYTE PTR [esi],al
    11f0:	04 3a                	add    al,0x3a
    11f2:	00 00                	add    BYTE PTR [eax],al
    11f4:	00 0c 1a             	add    BYTE PTR [edx+ebx*1],cl
    11f7:	06                   	push   es
    11f8:	00 00                	add    BYTE PTR [eax],al
    11fa:	01 11                	add    DWORD PTR [ecx],edx
    11fc:	5a                   	pop    edx
    11fd:	00 00                	add    BYTE PTR [eax],al
    11ff:	00 8c 0a 00 9f 3a 00 	add    BYTE PTR [edx+ecx*1+0x3a9f00],cl
    1206:	00 00                	add    BYTE PTR [eax],al
    1208:	01 9c 17 02 00 00 0d 	add    DWORD PTR [edi+edx*1+0xd000002],ebx
    120f:	c4 05 00 00 01 11    	les    eax,FWORD PTR ds:0x11010000
    1215:	5a                   	pop    edx
    1216:	00 00                	add    BYTE PTR [eax],al
    1218:	00 02                	add    BYTE PTR [edx],al
    121a:	91                   	xchg   ecx,eax
    121b:	00 0d 67 06 00 00    	add    BYTE PTR ds:0x667,cl
    1221:	01 11                	add    DWORD PTR [ecx],edx
    1223:	76 00                	jbe    1225 <sysEnter_Vector-0x12eddb>
    1225:	00 00                	add    BYTE PTR [eax],al
    1227:	02 91 04 0d 6e 06    	add    dl,BYTE PTR [ecx+0x66e0d04]
    122d:	00 00                	add    BYTE PTR [eax],al
    122f:	01 11                	add    DWORD PTR [ecx],edx
    1231:	76 00                	jbe    1233 <sysEnter_Vector-0x12edcd>
    1233:	00 00                	add    BYTE PTR [eax],al
    1235:	02 91 08 0d 75 06    	add    dl,BYTE PTR [ecx+0x6750d08]
    123b:	00 00                	add    BYTE PTR [eax],al
    123d:	01 11                	add    DWORD PTR [ecx],edx
    123f:	76 00                	jbe    1241 <sysEnter_Vector-0x12edbf>
    1241:	00 00                	add    BYTE PTR [eax],al
    1243:	02 91 0c 0d 7c 06    	add    dl,BYTE PTR [ecx+0x67c0d0c]
    1249:	00 00                	add    BYTE PTR [eax],al
    124b:	01 11                	add    DWORD PTR [ecx],edx
    124d:	76 00                	jbe    124f <sysEnter_Vector-0x12edb1>
    124f:	00 00                	add    BYTE PTR [eax],al
    1251:	02 91 10 0e 09 05    	add    dl,BYTE PTR [ecx+0x5090e10]
    1257:	00 00                	add    BYTE PTR [eax],al
    1259:	01 13                	add    DWORD PTR [ebx],edx
    125b:	5a                   	pop    edx
    125c:	00 00                	add    BYTE PTR [eax],al
    125e:	00 02                	add    BYTE PTR [edx],al
    1260:	91                   	xchg   ecx,eax
    1261:	6c                   	ins    BYTE PTR es:[edi],dx
    1262:	00 0c 0e             	add    BYTE PTR [esi+ecx*1],cl
    1265:	06                   	push   es
    1266:	00 00                	add    BYTE PTR [eax],al
    1268:	01 18                	add    DWORD PTR [eax],ebx
    126a:	5a                   	pop    edx
    126b:	00 00                	add    BYTE PTR [eax],al
    126d:	00 c6                	add    dh,al
    126f:	0a 00                	or     al,BYTE PTR [eax]
    1271:	9f                   	lahf   
    1272:	3c 00                	cmp    al,0x0
    1274:	00 00                	add    BYTE PTR [eax],al
    1276:	01 9c 77 02 00 00 0d 	add    DWORD PTR [edi+esi*2+0xd000002],ebx
    127d:	c4 05 00 00 01 18    	les    eax,FWORD PTR ds:0x18010000
    1283:	5a                   	pop    edx
    1284:	00 00                	add    BYTE PTR [eax],al
    1286:	00 02                	add    BYTE PTR [edx],al
    1288:	91                   	xchg   ecx,eax
    1289:	00 0d 67 06 00 00    	add    BYTE PTR ds:0x667,cl
    128f:	01 18                	add    DWORD PTR [eax],ebx
    1291:	76 00                	jbe    1293 <sysEnter_Vector-0x12ed6d>
    1293:	00 00                	add    BYTE PTR [eax],al
    1295:	02 91 04 0d 6e 06    	add    dl,BYTE PTR [ecx+0x66e0d04]
    129b:	00 00                	add    BYTE PTR [eax],al
    129d:	01 18                	add    DWORD PTR [eax],ebx
    129f:	76 00                	jbe    12a1 <sysEnter_Vector-0x12ed5f>
    12a1:	00 00                	add    BYTE PTR [eax],al
    12a3:	02 91 08 0d 75 06    	add    dl,BYTE PTR [ecx+0x6750d08]
    12a9:	00 00                	add    BYTE PTR [eax],al
    12ab:	01 18                	add    DWORD PTR [eax],ebx
    12ad:	76 00                	jbe    12af <sysEnter_Vector-0x12ed51>
    12af:	00 00                	add    BYTE PTR [eax],al
    12b1:	02 91 0c 0e 09 05    	add    dl,BYTE PTR [ecx+0x5090e0c]
    12b7:	00 00                	add    BYTE PTR [eax],al
    12b9:	01 1a                	add    DWORD PTR [edx],ebx
    12bb:	5a                   	pop    edx
    12bc:	00 00                	add    BYTE PTR [eax],al
    12be:	00 02                	add    BYTE PTR [edx],al
    12c0:	91                   	xchg   ecx,eax
    12c1:	6c                   	ins    BYTE PTR es:[edi],dx
    12c2:	00 0c 02             	add    BYTE PTR [edx+eax*1],cl
    12c5:	06                   	push   es
    12c6:	00 00                	add    BYTE PTR [eax],al
    12c8:	01 1f                	add    DWORD PTR [edi],ebx
    12ca:	5a                   	pop    edx
    12cb:	00 00                	add    BYTE PTR [eax],al
    12cd:	00 02                	add    BYTE PTR [edx],al
    12cf:	0b 00                	or     eax,DWORD PTR [eax]
    12d1:	9f                   	lahf   
    12d2:	3e 00 00             	add    BYTE PTR ds:[eax],al
    12d5:	00 01                	add    BYTE PTR [ecx],al
    12d7:	9c                   	pushf  
    12d8:	c9                   	leave  
    12d9:	02 00                	add    al,BYTE PTR [eax]
    12db:	00 0d c4 05 00 00    	add    BYTE PTR ds:0x5c4,cl
    12e1:	01 1f                	add    DWORD PTR [edi],ebx
    12e3:	5a                   	pop    edx
    12e4:	00 00                	add    BYTE PTR [eax],al
    12e6:	00 02                	add    BYTE PTR [edx],al
    12e8:	91                   	xchg   ecx,eax
    12e9:	00 0d 67 06 00 00    	add    BYTE PTR ds:0x667,cl
    12ef:	01 1f                	add    DWORD PTR [edi],ebx
    12f1:	76 00                	jbe    12f3 <sysEnter_Vector-0x12ed0d>
    12f3:	00 00                	add    BYTE PTR [eax],al
    12f5:	02 91 04 0d 6e 06    	add    dl,BYTE PTR [ecx+0x66e0d04]
    12fb:	00 00                	add    BYTE PTR [eax],al
    12fd:	01 1f                	add    DWORD PTR [edi],ebx
    12ff:	76 00                	jbe    1301 <sysEnter_Vector-0x12ecff>
    1301:	00 00                	add    BYTE PTR [eax],al
    1303:	02 91 08 0e 09 05    	add    dl,BYTE PTR [ecx+0x5090e08]
    1309:	00 00                	add    BYTE PTR [eax],al
    130b:	01 21                	add    DWORD PTR [ecx],esp
    130d:	5a                   	pop    edx
    130e:	00 00                	add    BYTE PTR [eax],al
    1310:	00 02                	add    BYTE PTR [edx],al
    1312:	91                   	xchg   ecx,eax
    1313:	6c                   	ins    BYTE PTR es:[edi],dx
    1314:	00 0c f6             	add    BYTE PTR [esi+esi*8],cl
    1317:	05 00 00 01 26       	add    eax,0x26010000
    131c:	5a                   	pop    edx
    131d:	00 00                	add    BYTE PTR [eax],al
    131f:	00 40 0b             	add    BYTE PTR [eax+0xb],al
    1322:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    1328:	01 9c 0d 03 00 00 0d 	add    DWORD PTR [ebp+ecx*1+0xd000003],ebx
    132f:	c4 05 00 00 01 26    	les    eax,FWORD PTR ds:0x26010000
    1335:	5a                   	pop    edx
    1336:	00 00                	add    BYTE PTR [eax],al
    1338:	00 02                	add    BYTE PTR [edx],al
    133a:	91                   	xchg   ecx,eax
    133b:	00 0d 67 06 00 00    	add    BYTE PTR ds:0x667,cl
    1341:	01 26                	add    DWORD PTR [esi],esp
    1343:	76 00                	jbe    1345 <sysEnter_Vector-0x12ecbb>
    1345:	00 00                	add    BYTE PTR [eax],al
    1347:	02 91 04 0e 09 05    	add    dl,BYTE PTR [ecx+0x5090e04]
    134d:	00 00                	add    BYTE PTR [eax],al
    134f:	01 28                	add    DWORD PTR [eax],ebp
    1351:	5a                   	pop    edx
    1352:	00 00                	add    BYTE PTR [eax],al
    1354:	00 02                	add    BYTE PTR [edx],al
    1356:	91                   	xchg   ecx,eax
    1357:	6c                   	ins    BYTE PTR es:[edi],dx
    1358:	00 0c ea             	add    BYTE PTR [edx+ebp*8],cl
    135b:	05 00 00 01 2d       	add    eax,0x2d010000
    1360:	5a                   	pop    edx
    1361:	00 00                	add    BYTE PTR [eax],al
    1363:	00 80 0b 00 9f 42    	add    BYTE PTR [eax+0x429f000b],al
    1369:	00 00                	add    BYTE PTR [eax],al
    136b:	00 01                	add    BYTE PTR [ecx],al
    136d:	9c                   	pushf  
    136e:	43                   	inc    ebx
    136f:	03 00                	add    eax,DWORD PTR [eax]
    1371:	00 0d c4 05 00 00    	add    BYTE PTR ds:0x5c4,cl
    1377:	01 2d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebp
    137d:	02 91 00 0e 09 05    	add    dl,BYTE PTR [ecx+0x5090e00]
    1383:	00 00                	add    BYTE PTR [eax],al
    1385:	01 2f                	add    DWORD PTR [edi],ebp
    1387:	5a                   	pop    edx
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	00 02                	add    BYTE PTR [edx],al
    138c:	91                   	xchg   ecx,eax
    138d:	6c                   	ins    BYTE PTR es:[edi],dx
    138e:	00 0f                	add    BYTE PTR [edi],cl
    1390:	68 05 00 00 01       	push   0x1000005
    1395:	34 c2                	xor    al,0xc2
    1397:	0b 00                	or     eax,DWORD PTR [eax]
    1399:	9f                   	lahf   
    139a:	bf 00 00 00 01       	mov    edi,0x1000000
    139f:	9c                   	pushf  
    13a0:	10 fb                	adc    bl,bh
    13a2:	06                   	push   es
    13a3:	00 00                	add    BYTE PTR [eax],al
    13a5:	01 46 81             	add    DWORD PTR [esi-0x7f],eax
    13a8:	0c 00                	or     al,0x0
    13aa:	9f                   	lahf   
    13ab:	1f                   	pop    ds
    13ac:	00 00                	add    BYTE PTR [eax],al
    13ae:	00 01                	add    BYTE PTR [ecx],al
    13b0:	9c                   	pushf  
    13b1:	11 10                	adc    DWORD PTR [eax],edx
    13b3:	05 00 00 01 4b       	add    eax,0x4b010000
    13b8:	5a                   	pop    edx
    13b9:	00 00                	add    BYTE PTR [eax],al
    13bb:	00 a0 0c 00 9f 59    	add    BYTE PTR [eax+0x599f000c],ah
    13c1:	00 00                	add    BYTE PTR [eax],al
    13c3:	00 01                	add    BYTE PTR [ecx],al
    13c5:	9c                   	pushf  
    13c6:	aa                   	stos   BYTE PTR es:[edi],al
    13c7:	03 00                	add    eax,DWORD PTR [eax]
    13c9:	00 0d 8f 06 00 00    	add    BYTE PTR ds:0x68f,cl
    13cf:	01 4b b3             	add    DWORD PTR [ebx-0x4d],ecx
    13d2:	00 00                	add    BYTE PTR [eax],al
    13d4:	00 02                	add    BYTE PTR [edx],al
    13d6:	91                   	xchg   ecx,eax
    13d7:	00 12                	add    BYTE PTR [edx],dl
    13d9:	0e                   	push   cs
    13da:	31 07                	xor    DWORD PTR [edi],eax
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	01 4d 41             	add    DWORD PTR [ebp+0x41],ecx
    13e1:	00 00                	add    BYTE PTR [eax],al
    13e3:	00 02                	add    BYTE PTR [edx],al
    13e5:	91                   	xchg   ecx,eax
    13e6:	68 0e 33 06 00       	push   0x6330e
    13eb:	00 01                	add    BYTE PTR [ecx],al
    13ed:	50                   	push   eax
    13ee:	5a                   	pop    edx
    13ef:	00 00                	add    BYTE PTR [eax],al
    13f1:	00 02                	add    BYTE PTR [edx],al
    13f3:	91                   	xchg   ecx,eax
    13f4:	6c                   	ins    BYTE PTR es:[edi],dx
    13f5:	00 11                	add    BYTE PTR [ecx],dl
    13f7:	3d 09 00 00 01       	cmp    eax,0x1000009
    13fc:	55                   	push   ebp
    13fd:	5a                   	pop    edx
    13fe:	00 00                	add    BYTE PTR [eax],al
    1400:	00 f9                	add    cl,bh
    1402:	0c 00                	or     al,0x0
    1404:	9f                   	lahf   
    1405:	54                   	push   esp
    1406:	00 00                	add    BYTE PTR [eax],al
    1408:	00 01                	add    BYTE PTR [ecx],al
    140a:	9c                   	pushf  
    140b:	ef                   	out    dx,eax
    140c:	03 00                	add    eax,DWORD PTR [eax]
    140e:	00 0d 8f 06 00 00    	add    BYTE PTR ds:0x68f,cl
    1414:	01 55 b3             	add    DWORD PTR [ebp-0x4d],edx
    1417:	00 00                	add    BYTE PTR [eax],al
    1419:	00 02                	add    BYTE PTR [edx],al
    141b:	91                   	xchg   ecx,eax
    141c:	00 12                	add    BYTE PTR [edx],dl
    141e:	0e                   	push   cs
    141f:	31 07                	xor    DWORD PTR [edi],eax
    1421:	00 00                	add    BYTE PTR [eax],al
    1423:	01 57 41             	add    DWORD PTR [edi+0x41],edx
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	00 02                	add    BYTE PTR [edx],al
    142a:	91                   	xchg   ecx,eax
    142b:	68 0e 33 06 00       	push   0x6330e
    1430:	00 01                	add    BYTE PTR [ecx],al
    1432:	5a                   	pop    edx
    1433:	5a                   	pop    edx
    1434:	00 00                	add    BYTE PTR [eax],al
    1436:	00 02                	add    BYTE PTR [edx],al
    1438:	91                   	xchg   ecx,eax
    1439:	6c                   	ins    BYTE PTR es:[edi],dx
    143a:	00 11                	add    BYTE PTR [ecx],dl
    143c:	f3 06                	repz push es
    143e:	00 00                	add    BYTE PTR [eax],al
    1440:	01 5e 5a             	add    DWORD PTR [esi+0x5a],ebx
    1443:	00 00                	add    BYTE PTR [eax],al
    1445:	00 4d 0d             	add    BYTE PTR [ebp+0xd],cl
    1448:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    144e:	01 9c 34 04 00 00 0d 	add    DWORD PTR [esp+esi*1+0xd000004],ebx
    1455:	8f 06                	pop    DWORD PTR [esi]
    1457:	00 00                	add    BYTE PTR [eax],al
    1459:	01 5e b3             	add    DWORD PTR [esi-0x4d],ebx
    145c:	00 00                	add    BYTE PTR [eax],al
    145e:	00 02                	add    BYTE PTR [edx],al
    1460:	91                   	xchg   ecx,eax
    1461:	00 12                	add    BYTE PTR [edx],dl
    1463:	0e                   	push   cs
    1464:	31 07                	xor    DWORD PTR [edi],eax
    1466:	00 00                	add    BYTE PTR [eax],al
    1468:	01 60 41             	add    DWORD PTR [eax+0x41],esp
    146b:	00 00                	add    BYTE PTR [eax],al
    146d:	00 02                	add    BYTE PTR [edx],al
    146f:	91                   	xchg   ecx,eax
    1470:	68 0e 33 06 00       	push   0x6330e
    1475:	00 01                	add    BYTE PTR [ecx],al
    1477:	63 5a 00             	arpl   WORD PTR [edx+0x0],bx
    147a:	00 00                	add    BYTE PTR [eax],al
    147c:	02 91 6c 00 11 36    	add    dl,BYTE PTR [ecx+0x3611006c]
    1482:	07                   	pop    es
    1483:	00 00                	add    BYTE PTR [eax],al
    1485:	01 67 5a             	add    DWORD PTR [edi+0x5a],esp
    1488:	00 00                	add    BYTE PTR [eax],al
    148a:	00 a1 0d 00 9f 34    	add    BYTE PTR [ecx+0x349f000d],ah
    1490:	00 00                	add    BYTE PTR [eax],al
    1492:	00 01                	add    BYTE PTR [ecx],al
    1494:	9c                   	pushf  
    1495:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    1499:	0d 8f 06 00 00       	or     eax,0x68f
    149e:	01 67 b3             	add    DWORD PTR [edi-0x4d],esp
    14a1:	00 00                	add    BYTE PTR [eax],al
    14a3:	00 02                	add    BYTE PTR [edx],al
    14a5:	91                   	xchg   ecx,eax
    14a6:	00 12                	add    BYTE PTR [edx],dl
    14a8:	0e                   	push   cs
    14a9:	31 07                	xor    DWORD PTR [edi],eax
    14ab:	00 00                	add    BYTE PTR [eax],al
    14ad:	01 69 41             	add    DWORD PTR [ecx+0x41],ebp
    14b0:	00 00                	add    BYTE PTR [eax],al
    14b2:	00 02                	add    BYTE PTR [edx],al
    14b4:	91                   	xchg   ecx,eax
    14b5:	74 00                	je     14b7 <sysEnter_Vector-0x12eb49>
    14b7:	11 5f 06             	adc    DWORD PTR [edi+0x6],ebx
    14ba:	00 00                	add    BYTE PTR [eax],al
    14bc:	01 6f 5a             	add    DWORD PTR [edi+0x5a],ebp
    14bf:	00 00                	add    BYTE PTR [eax],al
    14c1:	00 d5                	add    ch,dl
    14c3:	0d 00 9f 37 00       	or     eax,0x379f00
    14c8:	00 00                	add    BYTE PTR [eax],al
    14ca:	01 9c b0 04 00 00 0d 	add    DWORD PTR [eax+esi*4+0xd000004],ebx
    14d1:	b9 05 00 00 01       	mov    ecx,0x1000005
    14d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
    14d7:	76 00                	jbe    14d9 <sysEnter_Vector-0x12eb27>
    14d9:	00 00                	add    BYTE PTR [eax],al
    14db:	02 91 00 0d 8f 06    	add    dl,BYTE PTR [ecx+0x68f0d00]
    14e1:	00 00                	add    BYTE PTR [eax],al
    14e3:	01 6f b3             	add    DWORD PTR [edi-0x4d],ebp
    14e6:	00 00                	add    BYTE PTR [eax],al
    14e8:	00 02                	add    BYTE PTR [edx],al
    14ea:	91                   	xchg   ecx,eax
    14eb:	04 12                	add    al,0x12
    14ed:	0e                   	push   cs
    14ee:	31 07                	xor    DWORD PTR [edi],eax
    14f0:	00 00                	add    BYTE PTR [eax],al
    14f2:	01 71 41             	add    DWORD PTR [ecx+0x41],esi
    14f5:	00 00                	add    BYTE PTR [eax],al
    14f7:	00 02                	add    BYTE PTR [edx],al
    14f9:	91                   	xchg   ecx,eax
    14fa:	74 00                	je     14fc <sysEnter_Vector-0x12eb04>
    14fc:	0c d5                	or     al,0xd5
    14fe:	05 00 00 01 79       	add    eax,0x79010000
    1503:	81 00 00 00 0c 0e    	add    DWORD PTR [eax],0xe0c0000
    1509:	00 9f 72 00 00 00    	add    BYTE PTR [edi+0x72],bl
    150f:	01 9c fc 04 00 00 0d 	add    DWORD PTR [esp+edi*8+0xd000004],ebx
    1516:	ae                   	scas   al,BYTE PTR es:[edi]
    1517:	06                   	push   es
    1518:	00 00                	add    BYTE PTR [eax],al
    151a:	01 79 81             	add    DWORD PTR [ecx-0x7f],edi
    151d:	00 00                	add    BYTE PTR [eax],al
    151f:	00 02                	add    BYTE PTR [edx],al
    1521:	91                   	xchg   ecx,eax
    1522:	00 13                	add    BYTE PTR [ebx],dl
    1524:	1e                   	push   ds
    1525:	0e                   	push   cs
    1526:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    152c:	14 73                	adc    al,0x73
    152e:	32 00                	xor    al,BYTE PTR [eax]
    1530:	01 7b 76             	add    DWORD PTR [ebx+0x76],edi
    1533:	00 00                	add    BYTE PTR [eax],al
    1535:	00 02                	add    BYTE PTR [edx],al
    1537:	91                   	xchg   ecx,eax
    1538:	6c                   	ins    BYTE PTR es:[edi],dx
    1539:	14 63                	adc    al,0x63
    153b:	74 00                	je     153d <sysEnter_Vector-0x12eac3>
    153d:	01 7b 76             	add    DWORD PTR [ebx+0x76],edi
    1540:	00 00                	add    BYTE PTR [eax],al
    1542:	00 02                	add    BYTE PTR [edx],al
    1544:	91                   	xchg   ecx,eax
    1545:	68 00 00 0f 3d       	push   0x3d0f0000
    154a:	07                   	pop    es
    154b:	00 00                	add    BYTE PTR [eax],al
    154d:	01 7f 7e             	add    DWORD PTR [edi+0x7e],edi
    1550:	0e                   	push   cs
    1551:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    1557:	01 9c 15 24 07 00 00 	add    DWORD PTR [ebp+edx*1+0x724],ebx
    155e:	01 84 9b 0e 00 9f 29 	add    DWORD PTR [ebx+ebx*4+0x299f000e],eax
    1565:	00 00                	add    BYTE PTR [eax],al
    1567:	00 01                	add    BYTE PTR [ecx],al
    1569:	9c                   	pushf  
    156a:	4d                   	dec    ebp
    156b:	05 00 00 0d a2       	add    eax,0xa20d0000
    1570:	06                   	push   es
    1571:	00 00                	add    BYTE PTR [eax],al
    1573:	01 84 5a 00 00 00 02 	add    DWORD PTR [edx+ebx*2+0x2000000],eax
    157a:	91                   	xchg   ecx,eax
    157b:	00 0d 19 07 00 00    	add    BYTE PTR ds:0x719,cl
    1581:	01 84 9a 01 00 00 02 	add    DWORD PTR [edx+ebx*4+0x2000001],eax
    1588:	91                   	xchg   ecx,eax
    1589:	04 0d                	add    al,0xd
    158b:	34 05                	xor    al,0x5
    158d:	00 00                	add    BYTE PTR [eax],al
    158f:	01 84 5a 00 00 00 02 	add    DWORD PTR [edx+ebx*2+0x2000000],eax
    1596:	91                   	xchg   ecx,eax
    1597:	08 00                	or     BYTE PTR [eax],al
    1599:	16                   	push   ss
    159a:	90                   	nop
    159b:	05 00 00 01 89       	add    eax,0x89010000
    15a0:	5a                   	pop    edx
    15a1:	00 00                	add    BYTE PTR [eax],al
    15a3:	00 c4                	add    ah,al
    15a5:	0e                   	push   cs
    15a6:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    15ac:	01 9c 75 05 00 00 0e 	add    DWORD PTR [ebp+esi*2+0xe000005],ebx
    15b3:	09 05 00 00 01 8b    	or     DWORD PTR ds:0x8b010000,eax
    15b9:	76 00                	jbe    15bb <sysEnter_Vector-0x12ea45>
    15bb:	00 00                	add    BYTE PTR [eax],al
    15bd:	02 91 74 00 11 a9    	add    dl,BYTE PTR [ecx-0x56eeff8c]
    15c3:	06                   	push   es
    15c4:	00 00                	add    BYTE PTR [eax],al
    15c6:	01 91 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],edx
    15cc:	ed                   	in     eax,dx
    15cd:	0e                   	push   cs
    15ce:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
    15d4:	01 9c c7 05 00 00 0d 	add    DWORD PTR [edi+eax*8+0xd000005],ebx
    15db:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    15dc:	0a 00                	or     al,BYTE PTR [eax]
    15de:	00 01                	add    BYTE PTR [ecx],al
    15e0:	91                   	xchg   ecx,eax
    15e1:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    15e6:	91                   	xchg   ecx,eax
    15e7:	00 0d df 06 00 00    	add    BYTE PTR ds:0x6df,cl
    15ed:	01 91 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],edx
    15f3:	02 91 04 0d 08 07    	add    dl,BYTE PTR [ecx+0x7080d04]
    15f9:	00 00                	add    BYTE PTR [eax],al
    15fb:	01 91 c7 05 00 00    	add    DWORD PTR [ecx+0x5c7],edx
    1601:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1607:	64 00 01             	add    BYTE PTR fs:[ecx],al
    160a:	93                   	xchg   ebx,eax
    160b:	5a                   	pop    edx
    160c:	00 00                	add    BYTE PTR [eax],al
    160e:	00 02                	add    BYTE PTR [edx],al
    1610:	91                   	xchg   ecx,eax
    1611:	74 00                	je     1613 <sysEnter_Vector-0x12e9ed>
    1613:	06                   	push   es
    1614:	04 a3                	add    al,0xa3
    1616:	01 00                	add    DWORD PTR [eax],eax
    1618:	00 11                	add    BYTE PTR [ecx],dl
    161a:	89 06                	mov    DWORD PTR [esi],eax
    161c:	00 00                	add    BYTE PTR [eax],al
    161e:	01 99 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ebx
    1624:	39 0f                	cmp    DWORD PTR [edi],ecx
    1626:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
    162c:	01 9c 6f 06 00 00 0d 	add    DWORD PTR [edi+ebp*2+0xd000006],ebx
    1633:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    1634:	0a 00                	or     al,BYTE PTR [eax]
    1636:	00 01                	add    BYTE PTR [ecx],al
    1638:	99                   	cdq    
    1639:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    163e:	91                   	xchg   ecx,eax
    163f:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    1642:	69 64 00 01 9b 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5a9b
    1649:	00 
    164a:	00 02                	add    BYTE PTR [edx],al
    164c:	91                   	xchg   ecx,eax
    164d:	58                   	pop    eax
    164e:	0e                   	push   cs
    164f:	df 06                	fild   WORD PTR [esi]
    1651:	00 00                	add    BYTE PTR [eax],al
    1653:	01 9b 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],ebx
    1659:	02 91 6c 0e 08 07    	add    dl,BYTE PTR [ecx+0x7080e6c]
    165f:	00 00                	add    BYTE PTR [eax],al
    1661:	01 9c c7 05 00 00 02 	add    DWORD PTR [edi+eax*8+0x2000005],ebx
    1668:	91                   	xchg   ecx,eax
    1669:	50                   	push   eax
    166a:	0e                   	push   cs
    166b:	95                   	xchg   ebp,eax
    166c:	05 00 00 01 9d       	add    eax,0x9d010000
    1671:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1676:	91                   	xchg   ecx,eax
    1677:	68 0e 16 05 00       	push   0x5160e
    167c:	00 01                	add    BYTE PTR [ecx],al
    167e:	9d                   	popf   
    167f:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1684:	91                   	xchg   ecx,eax
    1685:	64                   	fs
    1686:	0e                   	push   cs
    1687:	5b                   	pop    ebx
    1688:	05 00 00 01 9e       	add    eax,0x9e010000
    168d:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1692:	91                   	xchg   ecx,eax
    1693:	54                   	push   esp
    1694:	0e                   	push   cs
    1695:	45                   	inc    ebp
    1696:	05 00 00 01 af       	add    eax,0xaf010000
    169b:	5a                   	pop    edx
    169c:	00 00                	add    BYTE PTR [eax],al
    169e:	00 02                	add    BYTE PTR [edx],al
    16a0:	91                   	xchg   ecx,eax
    16a1:	60                   	pusha  
    16a2:	13 0f                	adc    ecx,DWORD PTR [edi]
    16a4:	10 00                	adc    BYTE PTR [eax],al
    16a6:	9f                   	lahf   
    16a7:	e0 00                	loopne 16a9 <sysEnter_Vector-0x12e957>
    16a9:	00 00                	add    BYTE PTR [eax],al
    16ab:	14 63                	adc    al,0x63
    16ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16ae:	74 00                	je     16b0 <sysEnter_Vector-0x12e950>
    16b0:	01 b1 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],esi
    16b6:	02 91 5c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100005c]
    16bc:	83 06 00             	add    DWORD PTR [esi],0x0
    16bf:	00 01                	add    BYTE PTR [ecx],al
    16c1:	c7                   	(bad)  
    16c2:	5a                   	pop    edx
    16c3:	00 00                	add    BYTE PTR [eax],al
    16c5:	00 2d 11 00 9f 4f    	add    BYTE PTR ds:0x4f9f0011,ch
    16cb:	00 00                	add    BYTE PTR [eax],al
    16cd:	00 01                	add    BYTE PTR [ecx],al
    16cf:	9c                   	pushf  
    16d0:	c1 06 00             	rol    DWORD PTR [esi],0x0
    16d3:	00 0d a7 0a 00 00    	add    BYTE PTR ds:0xaa7,cl
    16d9:	01 c7                	add    edi,eax
    16db:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    16e0:	91                   	xchg   ecx,eax
    16e1:	00 0d df 06 00 00    	add    BYTE PTR ds:0x6df,cl
    16e7:	01 c7                	add    edi,eax
    16e9:	5a                   	pop    edx
    16ea:	00 00                	add    BYTE PTR [eax],al
    16ec:	00 02                	add    BYTE PTR [edx],al
    16ee:	91                   	xchg   ecx,eax
    16ef:	04 0d                	add    al,0xd
    16f1:	08 07                	or     BYTE PTR [edi],al
    16f3:	00 00                	add    BYTE PTR [eax],al
    16f5:	01 c7                	add    edi,eax
    16f7:	c7 05 00 00 02 91 08 	mov    DWORD PTR ds:0x91020000,0x69701408
    16fe:	14 70 69 
    1701:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1704:	c9                   	leave  
    1705:	5a                   	pop    edx
    1706:	00 00                	add    BYTE PTR [eax],al
    1708:	00 02                	add    BYTE PTR [edx],al
    170a:	91                   	xchg   ecx,eax
    170b:	74 00                	je     170d <sysEnter_Vector-0x12e8f3>
    170d:	11 b1 05 00 00 01    	adc    DWORD PTR [ecx+0x1000005],esi
    1713:	cf                   	iret   
    1714:	5a                   	pop    edx
    1715:	00 00                	add    BYTE PTR [eax],al
    1717:	00 7c 11 00          	add    BYTE PTR [ecx+edx*1+0x0],bh
    171b:	9f                   	lahf   
    171c:	1c 00                	sbb    al,0x0
    171e:	00 00                	add    BYTE PTR [eax],al
    1720:	01 9c e9 06 00 00 17 	add    DWORD PTR [ecx+ebp*8+0x17000006],ebx
    1727:	70 69                	jo     1792 <sysEnter_Vector-0x12e86e>
    1729:	64 00 01             	add    BYTE PTR fs:[ecx],al
    172c:	cf                   	iret   
    172d:	76 00                	jbe    172f <sysEnter_Vector-0x12e8d1>
    172f:	00 00                	add    BYTE PTR [eax],al
    1731:	02 91 00 00 15 0d    	add    dl,BYTE PTR [ecx+0xd150000]
    1737:	07                   	pop    es
    1738:	00 00                	add    BYTE PTR [eax],al
    173a:	01 d5                	add    ebp,edx
    173c:	98                   	cwde   
    173d:	11 00                	adc    DWORD PTR [eax],eax
    173f:	9f                   	lahf   
    1740:	20 00                	and    BYTE PTR [eax],al
    1742:	00 00                	add    BYTE PTR [eax],al
    1744:	01 9c 0d 07 00 00 0d 	add    DWORD PTR [ebp+ecx*1+0xd000007],ebx
    174b:	12 07                	adc    al,BYTE PTR [edi]
    174d:	00 00                	add    BYTE PTR [eax],al
    174f:	01 d5                	add    ebp,edx
    1751:	5a                   	pop    edx
    1752:	00 00                	add    BYTE PTR [eax],al
    1754:	00 02                	add    BYTE PTR [edx],al
    1756:	91                   	xchg   ecx,eax
    1757:	00 00                	add    BYTE PTR [eax],al
    1759:	11 42 07             	adc    DWORD PTR [edx+0x7],eax
    175c:	00 00                	add    BYTE PTR [eax],al
    175e:	01 db                	add    ebx,ebx
    1760:	a3 01 00 00 b8       	mov    ds:0xb8000001,eax
    1765:	11 00                	adc    DWORD PTR [eax],eax
    1767:	9f                   	lahf   
    1768:	20 00                	and    BYTE PTR [eax],al
    176a:	00 00                	add    BYTE PTR [eax],al
    176c:	01 9c 43 07 00 00 17 	add    DWORD PTR [ebx+eax*2+0x17000007],ebx
    1773:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1776:	00 01                	add    BYTE PTR [ecx],al
    1778:	db a3 01 00 00 02    	(bad)  [ebx+0x2000001]
    177e:	91                   	xchg   ecx,eax
    177f:	00 0d 33 06 00 00    	add    BYTE PTR ds:0x633,cl
    1785:	01 db                	add    ebx,ebx
    1787:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    178e:	00 0c ec             	add    BYTE PTR [esp+ebp*8],cl
    1791:	06                   	push   es
    1792:	00 00                	add    BYTE PTR [eax],al
    1794:	01 e1                	add    ecx,esp
    1796:	9a 00 00 00 d8 11 00 	call   0x11:0xd8000000
    179d:	9f                   	lahf   
    179e:	44                   	inc    esp
    179f:	01 00                	add    DWORD PTR [eax],eax
    17a1:	00 01                	add    BYTE PTR [ecx],al
    17a3:	9c                   	pushf  
    17a4:	21 08                	and    DWORD PTR [eax],ecx
    17a6:	00 00                	add    BYTE PTR [eax],al
    17a8:	0d 51 04 00 00       	or     eax,0x451
    17ad:	01 e1                	add    ecx,esp
    17af:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    17b4:	91                   	xchg   ecx,eax
    17b5:	00 0d 08 07 00 00    	add    BYTE PTR ds:0x708,cl
    17bb:	01 e1                	add    ecx,esp
    17bd:	c7 05 00 00 02 91 04 	mov    DWORD PTR ds:0x91020000,0x62e0d04
    17c4:	0d 2e 06 
    17c7:	00 00                	add    BYTE PTR [eax],al
    17c9:	01 e1                	add    ecx,esp
    17cb:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    17d2:	14 70                	adc    al,0x70
    17d4:	00 01                	add    BYTE PTR [ecx],al
    17d6:	e3 a3                	jecxz  177b <sysEnter_Vector-0x12e885>
    17d8:	01 00                	add    DWORD PTR [eax],eax
    17da:	00 02                	add    BYTE PTR [edx],al
    17dc:	91                   	xchg   ecx,eax
    17dd:	74 0e                	je     17ed <sysEnter_Vector-0x12e813>
    17df:	4d                   	dec    ebp
    17e0:	05 00 00 01 e3       	add    eax,0xe3010000
    17e5:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    17ea:	91                   	xchg   ecx,eax
    17eb:	70 14                	jo     1801 <sysEnter_Vector-0x12e7ff>
    17ed:	63 00                	arpl   WORD PTR [eax],ax
    17ef:	01 e4                	add    esp,esp
    17f1:	5a                   	pop    edx
    17f2:	00 00                	add    BYTE PTR [eax],al
    17f4:	00 02                	add    BYTE PTR [edx],al
    17f6:	91                   	xchg   ecx,eax
    17f7:	64 08 bd 06 00 00 04 	or     BYTE PTR fs:[ebp+0x4000006],bh
    17fe:	81 00 00 00 01 e5    	add    DWORD PTR [eax],0xe5010000
    1804:	cf                   	iret   
    1805:	07                   	pop    es
    1806:	00 00                	add    BYTE PTR [eax],al
    1808:	09 b8 06 00 00 00    	or     DWORD PTR [eax+0x6],edi
    180e:	09 26                	or     DWORD PTR [esi],esp
    1810:	06                   	push   es
    1811:	00 00                	add    BYTE PTR [eax],al
    1813:	01 09                	add    DWORD PTR [ecx],ecx
    1815:	c4 06                	les    eax,FWORD PTR [esi]
    1817:	00 00                	add    BYTE PTR [eax],al
    1819:	02 00                	add    al,BYTE PTR [eax]
    181b:	0e                   	push   cs
    181c:	72 05                	jb     1823 <sysEnter_Vector-0x12e7dd>
    181e:	00 00                	add    BYTE PTR [eax],al
    1820:	01 e5                	add    ebp,esp
    1822:	ac                   	lods   al,BYTE PTR ds:[esi]
    1823:	07                   	pop    es
    1824:	00 00                	add    BYTE PTR [eax],al
    1826:	02 91 6c 0e df 06    	add    dl,BYTE PTR [ecx+0x6df0e6c]
    182c:	00 00                	add    BYTE PTR [eax],al
    182e:	01 e6                	add    esi,esp
    1830:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    1837:	18 24 12             	sbb    BYTE PTR [edx+edx*1],ah
    183a:	00 9f 0e 00 00 00    	add    BYTE PTR [edi+0xe],bl
    1840:	07                   	pop    es
    1841:	08 00                	or     BYTE PTR [eax],al
    1843:	00 0e                	add    BYTE PTR [esi],cl
    1845:	48                   	dec    eax
    1846:	06                   	push   es
    1847:	00 00                	add    BYTE PTR [eax],al
    1849:	01 ec                	add    esp,ebp
    184b:	be 00 00 00 02       	mov    esi,0x2000000
    1850:	91                   	xchg   ecx,eax
    1851:	63 00                	arpl   WORD PTR [eax],ax
    1853:	13 93 12 00 9f 0e    	adc    edx,DWORD PTR [ebx+0xe9f0012]
    1859:	00 00                	add    BYTE PTR [eax],al
    185b:	00 19                	add    BYTE PTR [ecx],bl
    185d:	48                   	dec    eax
    185e:	06                   	push   es
    185f:	00 00                	add    BYTE PTR [eax],al
    1861:	01 02                	add    DWORD PTR [edx],eax
    1863:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    1869:	91                   	xchg   ecx,eax
    186a:	62 00                	bound  eax,QWORD PTR [eax]
    186c:	00 1a                	add    BYTE PTR [edx],bl
    186e:	8a 05 00 00 01 11    	mov    al,BYTE PTR ds:0x11010000
    1874:	01 9a 00 00 00 1c    	add    DWORD PTR [edx+0x1c000000],ebx
    187a:	13 00                	adc    eax,DWORD PTR [eax]
    187c:	9f                   	lahf   
    187d:	20 00                	and    BYTE PTR [eax],al
    187f:	00 00                	add    BYTE PTR [eax],al
    1881:	01 9c 69 08 00 00 1b 	add    DWORD PTR [ecx+ebp*2+0x1b000008],ebx
    1888:	51                   	push   ecx
    1889:	04 00                	add    al,0x0
    188b:	00 01                	add    BYTE PTR [ecx],al
    188d:	11 01                	adc    DWORD PTR [ecx],eax
    188f:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1894:	91                   	xchg   ecx,eax
    1895:	00 1b                	add    BYTE PTR [ebx],bl
    1897:	08 07                	or     BYTE PTR [edi],al
    1899:	00 00                	add    BYTE PTR [eax],al
    189b:	01 11                	add    DWORD PTR [ecx],edx
    189d:	01 c7                	add    edi,eax
    189f:	05 00 00 02 91       	add    eax,0x91020000
    18a4:	04 1b                	add    al,0x1b
    18a6:	2e                   	cs
    18a7:	06                   	push   es
    18a8:	00 00                	add    BYTE PTR [eax],al
    18aa:	01 11                	add    DWORD PTR [ecx],edx
    18ac:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    18b2:	91                   	xchg   ecx,eax
    18b3:	08 00                	or     BYTE PTR [eax],al
    18b5:	1a db                	sbb    bl,bl
    18b7:	05 00 00 01 16       	add    eax,0x16010000
    18bc:	01 c7                	add    edi,eax
    18be:	05 00 00 3c 13       	add    eax,0x133c0000
    18c3:	00 9f fd 02 00 00    	add    BYTE PTR [edi+0x2fd],bl
    18c9:	01 9c 58 09 00 00 1b 	add    DWORD PTR [eax+ebx*2+0x1b000009],ebx
    18d0:	e4 06                	in     al,0x6
    18d2:	00 00                	add    BYTE PTR [eax],al
    18d4:	01 16                	add    DWORD PTR [esi],edx
    18d6:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    18dc:	91                   	xchg   ecx,eax
    18dd:	00 1b                	add    BYTE PTR [ebx],bl
    18df:	df 06                	fild   WORD PTR [esi]
    18e1:	00 00                	add    BYTE PTR [eax],al
    18e3:	01 16                	add    DWORD PTR [esi],edx
    18e5:	01 58 09             	add    DWORD PTR [eax+0x9],ebx
    18e8:	00 00                	add    BYTE PTR [eax],al
    18ea:	02 91 04 19 08 07    	add    dl,BYTE PTR [ecx+0x7081904]
    18f0:	00 00                	add    BYTE PTR [eax],al
    18f2:	01 18                	add    DWORD PTR [eax],ebx
    18f4:	01 c7                	add    edi,eax
    18f6:	05 00 00 02 91       	add    eax,0x91020000
    18fb:	54                   	push   esp
    18fc:	1c 63                	sbb    al,0x63
    18fe:	6d                   	ins    DWORD PTR es:[edi],dx
    18ff:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1902:	19 01                	sbb    DWORD PTR [ecx],eax
    1904:	5e                   	pop    esi
    1905:	09 00                	or     DWORD PTR [eax],eax
    1907:	00 03                	add    BYTE PTR [ebx],al
    1909:	91                   	xchg   ecx,eax
    190a:	d0                   	(bad)  
    190b:	77 19                	ja     1926 <sysEnter_Vector-0x12e6da>
    190d:	95                   	xchg   ebp,eax
    190e:	05 00 00 01 1a       	add    eax,0x1a010000
    1913:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    1919:	91                   	xchg   ecx,eax
    191a:	6c                   	ins    BYTE PTR es:[edi],dx
    191b:	19 16                	sbb    DWORD PTR [esi],edx
    191d:	05 00 00 01 1a       	add    eax,0x1a010000
    1922:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    1928:	91                   	xchg   ecx,eax
    1929:	68 19 3c 05 00       	push   0x53c19
    192e:	00 01                	add    BYTE PTR [ecx],al
    1930:	1a 01                	sbb    al,BYTE PTR [ecx]
    1932:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1937:	91                   	xchg   ecx,eax
    1938:	5c                   	pop    esp
    1939:	19 cc                	sbb    esp,ecx
    193b:	05 00 00 01 1b       	add    eax,0x1b010000
    1940:	01 6f 09             	add    DWORD PTR [edi+0x9],ebp
    1943:	00 00                	add    BYTE PTR [eax],al
    1945:	03 91 ce 77 19 45    	add    edx,DWORD PTR [ecx+0x451977ce]
    194b:	05 00 00 01 34       	add    eax,0x34010000
    1950:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1953:	00 00                	add    BYTE PTR [eax],al
    1955:	02 91 64 18 f3 13    	add    dl,BYTE PTR [ecx+0x13f31864]
    195b:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    1961:	29 09                	sub    DWORD PTR [ecx],ecx
    1963:	00 00                	add    BYTE PTR [eax],al
    1965:	19 9e 05 00 00 01    	sbb    DWORD PTR [esi+0x1000005],ebx
    196b:	26 01 a3 01 00 00 02 	add    DWORD PTR es:[ebx+0x2000001],esp
    1972:	91                   	xchg   ecx,eax
    1973:	58                   	pop    eax
    1974:	00 13                	add    BYTE PTR [ebx],dl
    1976:	a3 14 00 9f 8c       	mov    ds:0x8c9f0014,eax
    197b:	01 00                	add    DWORD PTR [eax],eax
    197d:	00 1c 63             	add    BYTE PTR [ebx+eiz*2],bl
    1980:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1981:	74 00                	je     1983 <sysEnter_Vector-0x12e67d>
    1983:	01 36                	add    DWORD PTR [esi],esi
    1985:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1988:	00 00                	add    BYTE PTR [eax],al
    198a:	02 91 60 1d 00 00    	add    dl,BYTE PTR [ecx+0x1d60]
    1990:	00 00                	add    BYTE PTR [eax],al
    1992:	19 9e 05 00 00 01    	sbb    DWORD PTR [esi+0x1000005],ebx
    1998:	3c 01                	cmp    al,0x1
    199a:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    199f:	91                   	xchg   ecx,eax
    19a0:	50                   	push   eax
    19a1:	00 00                	add    BYTE PTR [eax],al
    19a3:	00 06                	add    BYTE PTR [esi],al
    19a5:	04 5a                	add    al,0x5a
    19a7:	00 00                	add    BYTE PTR [eax],al
    19a9:	00 1e                	add    BYTE PTR [esi],bl
    19ab:	3a 00                	cmp    al,BYTE PTR [eax]
    19ad:	00 00                	add    BYTE PTR [eax],al
    19af:	6f                   	outs   dx,DWORD PTR ds:[esi]
    19b0:	09 00                	or     DWORD PTR [eax],eax
    19b2:	00 1f                	add    BYTE PTR [edi],bl
    19b4:	c5 00                	lds    eax,FWORD PTR [eax]
    19b6:	00 00                	add    BYTE PTR [eax],al
    19b8:	ff 03                	inc    DWORD PTR [ebx]
    19ba:	00 1e                	add    BYTE PTR [esi],bl
    19bc:	3a 00                	cmp    al,BYTE PTR [eax]
    19be:	00 00                	add    BYTE PTR [eax],al
    19c0:	7f 09                	jg     19cb <sysEnter_Vector-0x12e635>
    19c2:	00 00                	add    BYTE PTR [eax],al
    19c4:	20 c5                	and    ch,al
    19c6:	00 00                	add    BYTE PTR [eax],al
    19c8:	00 01                	add    BYTE PTR [ecx],al
    19ca:	00 1a                	add    BYTE PTR [edx],bl
    19cc:	a3 05 00 00 01       	mov    ds:0x1000005,eax
    19d1:	54                   	push   esp
    19d2:	01 c7                	add    edi,eax
    19d4:	05 00 00 39 16       	add    eax,0x16390000
    19d9:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    19df:	01 9c b8 09 00 00 1b 	add    DWORD PTR [eax+edi*4+0x1b000009],ebx
    19e6:	e4 06                	in     al,0x6
    19e8:	00 00                	add    BYTE PTR [eax],al
    19ea:	01 54 01 a3          	add    DWORD PTR [ecx+eax*1-0x5d],edx
    19ee:	01 00                	add    DWORD PTR [eax],eax
    19f0:	00 02                	add    BYTE PTR [edx],al
    19f2:	91                   	xchg   ecx,eax
    19f3:	00 1b                	add    BYTE PTR [ebx],bl
    19f5:	df 06                	fild   WORD PTR [esi]
    19f7:	00 00                	add    BYTE PTR [eax],al
    19f9:	01 54 01 58          	add    DWORD PTR [ecx+eax*1+0x58],edx
    19fd:	09 00                	or     DWORD PTR [eax],eax
    19ff:	00 02                	add    BYTE PTR [edx],al
    1a01:	91                   	xchg   ecx,eax
    1a02:	04 00                	add    al,0x0
    1a04:	21 63 05             	and    DWORD PTR [ebx+0x5],esp
    1a07:	00 00                	add    BYTE PTR [eax],al
    1a09:	01 59 01             	add    DWORD PTR [ecx+0x1],ebx
    1a0c:	5a                   	pop    edx
    1a0d:	00 00                	add    BYTE PTR [eax],al
    1a0f:	00 5c 16 00          	add    BYTE PTR [esi+edx*1+0x0],bl
    1a13:	9f                   	lahf   
    1a14:	19 00                	sbb    DWORD PTR [eax],eax
    1a16:	00 00                	add    BYTE PTR [eax],al
    1a18:	01 9c 22 5b 00 00 00 	add    DWORD PTR [edx+eiz*1+0x5b],ebx
    1a1f:	06                   	push   es
    1a20:	34 76                	xor    al,0x76
    1a22:	00 00                	add    BYTE PTR [eax],al
    1a24:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    1a2a:	9f                   	lahf   
    1a2b:	22 0b                	and    cl,BYTE PTR [ebx]
    1a2d:	01 00                	add    DWORD PTR [eax],eax
    1a2f:	00 06                	add    BYTE PTR [esi],al
    1a31:	35 76 00 00 00       	xor    eax,0x76
    1a36:	05 03 48 5f 00       	add    eax,0x5f4803
    1a3b:	9f                   	lahf   
    1a3c:	22 64 00 00          	and    ah,BYTE PTR [eax+eax*1+0x0]
    1a40:	00 06                	add    BYTE PTR [esi],al
    1a42:	36                   	ss
    1a43:	76 00                	jbe    1a45 <sysEnter_Vector-0x12e5bb>
    1a45:	00 00                	add    BYTE PTR [eax],al
    1a47:	05 03 40 5f 00       	add    eax,0x5f4003
    1a4c:	9f                   	lahf   
    1a4d:	22 53 01             	and    dl,BYTE PTR [ebx+0x1]
    1a50:	00 00                	add    BYTE PTR [eax],al
    1a52:	06                   	push   es
    1a53:	37                   	aaa    
    1a54:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1a55:	00 00                	add    BYTE PTR [eax],al
    1a57:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    1a5d:	9f                   	lahf   
    1a5e:	22 38                	and    bh,BYTE PTR [eax]
    1a60:	00 00                	add    BYTE PTR [eax],al
    1a62:	00 07                	add    BYTE PTR [edi],al
    1a64:	52                   	push   edx
    1a65:	c7 05 00 00 05 03 4c 	mov    DWORD PTR ds:0x3050000,0x9f005f4c
    1a6c:	5f 00 9f 
    1a6f:	22 38                	and    bh,BYTE PTR [eax]
    1a71:	06                   	push   es
    1a72:	00 00                	add    BYTE PTR [eax],al
    1a74:	01 0d be 00 00 00    	add    DWORD PTR ds:0xbe,ecx
    1a7a:	05 03 58 5f 00       	add    eax,0x5f5803
    1a7f:	9f                   	lahf   
    1a80:	22 96 06 00 00 01    	and    dl,BYTE PTR [esi+0x1000006]
    1a86:	0e                   	push   cs
    1a87:	a3 01 00 00 05       	mov    ds:0x5000001,eax
    1a8c:	03 5c 5f 00          	add    ebx,DWORD PTR [edi+ebx*2+0x0]
    1a90:	9f                   	lahf   
    1a91:	00 b3 02 00 00 04    	add    BYTE PTR [ebx+0x4000002],dh
    1a97:	00 ea                	add    dl,ch
    1a99:	07                   	pop    es
    1a9a:	00 00                	add    BYTE PTR [eax],al
    1a9c:	04 01                	add    al,0x1
    1a9e:	83 00 00             	add    DWORD PTR [eax],0x0
    1aa1:	00 0c 72             	add    BYTE PTR [edx+esi*2],cl
    1aa4:	07                   	pop    es
    1aa5:	00 00                	add    BYTE PTR [eax],al
    1aa7:	15 00 00 00 78       	adc    eax,0x78000000
    1aac:	16                   	push   ss
    1aad:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    1ab3:	70 0a                	jo     1abf <sysEnter_Vector-0x12e541>
    1ab5:	00 00                	add    BYTE PTR [eax],al
    1ab7:	02 01                	add    al,BYTE PTR [ecx]
    1ab9:	06                   	push   es
    1aba:	75 00                	jne    1abc <sysEnter_Vector-0x12e544>
    1abc:	00 00                	add    BYTE PTR [eax],al
    1abe:	02 01                	add    al,BYTE PTR [ecx]
    1ac0:	06                   	push   es
    1ac1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ac2:	00 00                	add    BYTE PTR [eax],al
    1ac4:	00 02                	add    BYTE PTR [edx],al
    1ac6:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    1acc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1ad3:	02 08                	add    cl,BYTE PTR [eax]
    1ad5:	05 00 00 00 00       	add    eax,0x0
    1ada:	02 01                	add    al,BYTE PTR [ecx]
    1adc:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    1ae0:	00 02                	add    BYTE PTR [edx],al
    1ae2:	02 07                	add    al,BYTE PTR [edi]
    1ae4:	f0 00 00             	lock add BYTE PTR [eax],al
    1ae7:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    1aea:	00 00                	add    BYTE PTR [eax],al
    1aec:	00 02                	add    BYTE PTR [edx],al
    1aee:	34 61                	xor    al,0x61
    1af0:	00 00                	add    BYTE PTR [eax],al
    1af2:	00 02                	add    BYTE PTR [edx],al
    1af4:	04 07                	add    al,0x7
    1af6:	4e                   	dec    esi
    1af7:	00 00                	add    BYTE PTR [eax],al
    1af9:	00 02                	add    BYTE PTR [edx],al
    1afb:	08 07                	or     BYTE PTR [edi],al
    1afd:	44                   	inc    esp
    1afe:	00 00                	add    BYTE PTR [eax],al
    1b00:	00 04 23             	add    BYTE PTR [ebx+eiz*1],al
    1b03:	05 00 00 03 d8       	add    eax,0xd8030000
    1b08:	61                   	popa   
    1b09:	00 00                	add    BYTE PTR [eax],al
    1b0b:	00 02                	add    BYTE PTR [edx],al
    1b0d:	04 05                	add    al,0x5
    1b0f:	05 00 00 00 02       	add    eax,0x2000000
    1b14:	0c 04                	or     al,0x4
    1b16:	3d 01 00 00 02       	cmp    eax,0x2000001
    1b1b:	01 02                	add    DWORD PTR [edx],eax
    1b1d:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    1b24:	5a                   	pop    edx
    1b25:	01 00                	add    DWORD PTR [eax],eax
    1b27:	00 04 4e             	add    BYTE PTR [esi+ecx*2],al
    1b2a:	07                   	pop    es
    1b2b:	00 00                	add    BYTE PTR [eax],al
    1b2d:	04 15                	add    al,0x15
    1b2f:	7a 00                	jp     1b31 <sysEnter_Vector-0x12e4cf>
    1b31:	00 00                	add    BYTE PTR [eax],al
    1b33:	05 94 03 00 00       	add    eax,0x394
    1b38:	04 61                	add    al,0x61
    1b3a:	00 00                	add    BYTE PTR [eax],al
    1b3c:	00 05 15 6f 01 00    	add    BYTE PTR ds:0x16f15,al
    1b42:	00 06                	add    BYTE PTR [esi],al
    1b44:	51                   	push   ecx
    1b45:	03 00                	add    eax,DWORD PTR [eax]
    1b47:	00 00                	add    BYTE PTR [eax],al
    1b49:	06                   	push   es
    1b4a:	93                   	xchg   ebx,eax
    1b4b:	04 00                	add    al,0x0
    1b4d:	00 01                	add    BYTE PTR [ecx],al
    1b4f:	06                   	push   es
    1b50:	ce                   	into   
    1b51:	02 00                	add    al,BYTE PTR [eax]
    1b53:	00 02                	add    BYTE PTR [edx],al
    1b55:	06                   	push   es
    1b56:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    1b59:	00 03                	add    BYTE PTR [ebx],al
    1b5b:	06                   	push   es
    1b5c:	f9                   	stc    
    1b5d:	02 00                	add    al,BYTE PTR [eax]
    1b5f:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1b62:	eb 02                	jmp    1b66 <sysEnter_Vector-0x12e49a>
    1b64:	00 00                	add    BYTE PTR [eax],al
    1b66:	05 06 63 04 00       	add    eax,0x46306
    1b6b:	00 06                	add    BYTE PTR [esi],al
    1b6d:	06                   	push   es
    1b6e:	db 03                	fild   DWORD PTR [ebx]
    1b70:	00 00                	add    BYTE PTR [eax],al
    1b72:	07                   	pop    es
    1b73:	06                   	push   es
    1b74:	28 03                	sub    BYTE PTR [ebx],al
    1b76:	00 00                	add    BYTE PTR [eax],al
    1b78:	08 06                	or     BYTE PTR [esi],al
    1b7a:	ce                   	into   
    1b7b:	03 00                	add    eax,DWORD PTR [eax]
    1b7d:	00 09                	add    BYTE PTR [ecx],cl
    1b7f:	06                   	push   es
    1b80:	e8 03 00 00 4f       	call   4f001b88 <sysEnter_Vector+0x4eed1b88>
    1b85:	06                   	push   es
    1b86:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
    1b89:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1b8c:	96                   	xchg   esi,eax
    1b8d:	02 00                	add    al,BYTE PTR [eax]
    1b8f:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    1b92:	a9 03 00 00 97       	test   eax,0x97000003
    1b97:	07                   	pop    es
    1b98:	71 03                	jno    1b9d <sysEnter_Vector-0x12e463>
    1b9a:	00 00                	add    BYTE PTR [eax],al
    1b9c:	63 01                	arpl   WORD PTR [ecx],ax
    1b9e:	07                   	pop    es
    1b9f:	06                   	push   es
    1ba0:	04 00                	add    al,0x0
    1ba2:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1ba6:	37                   	aaa    
    1ba7:	04 00                	add    al,0x0
    1ba9:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1bac:	07                   	pop    es
    1bad:	ba 02 00 00 66       	mov    edx,0x66000002
    1bb2:	01 07                	add    DWORD PTR [edi],eax
    1bb4:	13 03                	adc    eax,DWORD PTR [ebx]
    1bb6:	00 00                	add    BYTE PTR [eax],al
    1bb8:	67 01 07             	add    DWORD PTR [bx],eax
    1bbb:	06                   	push   es
    1bbc:	03 00                	add    eax,DWORD PTR [eax]
    1bbe:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1bc1:	07                   	pop    es
    1bc2:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1bc3:	04 00                	add    al,0x0
    1bc5:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    1bc8:	07                   	pop    es
    1bc9:	a9 02 00 00 70       	test   eax,0x70000002
    1bce:	01 07                	add    DWORD PTR [edi],eax
    1bd0:	db 02                	fild   DWORD PTR [edx]
    1bd2:	00 00                	add    BYTE PTR [eax],al
    1bd4:	71 01                	jno    1bd7 <sysEnter_Vector-0x12e429>
    1bd6:	07                   	pop    es
    1bd7:	77 04                	ja     1bdd <sysEnter_Vector-0x12e423>
    1bd9:	00 00                	add    BYTE PTR [eax],al
    1bdb:	00 03                	add    BYTE PTR [ebx],al
    1bdd:	07                   	pop    es
    1bde:	f7 03 00 00 01 03    	test   DWORD PTR [ebx],0x3010000
    1be4:	07                   	pop    es
    1be5:	88 03                	mov    BYTE PTR [ebx],al
    1be7:	00 00                	add    BYTE PTR [eax],al
    1be9:	02 03                	add    al,BYTE PTR [ebx]
    1beb:	07                   	pop    es
    1bec:	61                   	popa   
    1bed:	03 00                	add    eax,DWORD PTR [eax]
    1bef:	00 03                	add    BYTE PTR [ebx],al
    1bf1:	03 07                	add    eax,DWORD PTR [edi]
    1bf3:	bd 03 00 00 04       	mov    ebp,0x4000003
    1bf8:	03 07                	add    eax,DWORD PTR [edi]
    1bfa:	27                   	daa    
    1bfb:	04 00                	add    al,0x0
    1bfd:	00 05 03 00 08 59    	add    BYTE PTR ds:0x59080003,al
    1c03:	07                   	pop    es
    1c04:	00 00                	add    BYTE PTR [eax],al
    1c06:	18 05 36 c3 01 00    	sbb    BYTE PTR ds:0x1c336,al
    1c0c:	00 09                	add    BYTE PTR [ecx],cl
    1c0e:	49                   	dec    ecx
    1c0f:	07                   	pop    es
    1c10:	00 00                	add    BYTE PTR [eax],al
    1c12:	05 38 c3 01 00       	add    eax,0x1c338
    1c17:	00 00                	add    BYTE PTR [eax],al
    1c19:	0a 6c 65 6e          	or     ch,BYTE PTR [ebp+eiz*2+0x6e]
    1c1d:	00 05 39 3a 00 00    	add    BYTE PTR ds:0x3a39,al
    1c23:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1c26:	54                   	push   esp
    1c27:	07                   	pop    es
    1c28:	00 00                	add    BYTE PTR [eax],al
    1c2a:	05 3a 3a 00 00       	add    eax,0x3a3a
    1c2f:	00 08                	add    BYTE PTR [eax],cl
    1c31:	09 47 0a             	or     DWORD PTR [edi+0xa],eax
    1c34:	00 00                	add    BYTE PTR [eax],al
    1c36:	05 3b 3a 00 00       	add    eax,0x3a3b
    1c3b:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    1c3e:	66                   	data16
    1c3f:	64 00 05 3c 3a 00 00 	add    BYTE PTR fs:0x3a3c,al
    1c46:	00 10                	add    BYTE PTR [eax],dl
    1c48:	09 91 0c 00 00 05    	or     DWORD PTR [ecx+0x500000c],edx
    1c4e:	3d 3a 00 00 00       	cmp    eax,0x3a
    1c53:	14 00                	adc    al,0x0
    1c55:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    1c58:	81 07 00 00 05 3e    	add    DWORD PTR [edi],0x3e050000
    1c5e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c5f:	01 00                	add    DWORD PTR [eax],eax
    1c61:	00 02                	add    BYTE PTR [edx],al
    1c63:	04 07                	add    al,0x7
    1c65:	49                   	dec    ecx
    1c66:	00 00                	add    BYTE PTR [eax],al
    1c68:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    1c6b:	25 00 00 00 0d       	and    eax,0xd000000
    1c70:	66 07                	popw   es
    1c72:	00 00                	add    BYTE PTR [eax],al
    1c74:	01 0d c3 01 00 00    	add    DWORD PTR ds:0x1c3,ecx
    1c7a:	78 16                	js     1c92 <sysEnter_Vector-0x12e36e>
    1c7c:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    1c82:	01 9c 4a 02 00 00 0e 	add    DWORD PTR [edx+ecx*2+0xe000002],ebx
    1c89:	49                   	dec    ecx
    1c8a:	07                   	pop    es
    1c8b:	00 00                	add    BYTE PTR [eax],al
    1c8d:	01 0d c3 01 00 00    	add    DWORD PTR ds:0x1c3,ecx
    1c93:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    1c99:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1c9a:	00 01                	add    BYTE PTR [ecx],al
    1c9c:	0d 6f 00 00 00       	or     eax,0x6f
    1ca1:	02 91 04 0e 54 07    	add    dl,BYTE PTR [ecx+0x7540e04]
    1ca7:	00 00                	add    BYTE PTR [eax],al
    1ca9:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    1caf:	02 91 08 0e 47 0a    	add    dl,BYTE PTR [ecx+0xa470e08]
    1cb5:	00 00                	add    BYTE PTR [eax],al
    1cb7:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    1cbd:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    1cc3:	00 01                	add    BYTE PTR [ecx],al
    1cc5:	0d 3a 00 00 00       	or     eax,0x3a
    1cca:	02 91 10 0e 91 0c    	add    dl,BYTE PTR [ecx+0xc910e10]
    1cd0:	00 00                	add    BYTE PTR [eax],al
    1cd2:	01 0d 96 00 00 00    	add    DWORD PTR ds:0x96,ecx
    1cd8:	02 91 14 00 10 5b    	add    dl,BYTE PTR [ecx+0x5b100014]
    1cde:	00 00                	add    BYTE PTR [eax],al
    1ce0:	00 06                	add    BYTE PTR [esi],al
    1ce2:	34 56                	xor    al,0x56
    1ce4:	00 00                	add    BYTE PTR [eax],al
    1ce6:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    1cec:	9f                   	lahf   
    1ced:	10 0b                	adc    BYTE PTR [ebx],cl
    1cef:	01 00                	add    DWORD PTR [eax],eax
    1cf1:	00 06                	add    BYTE PTR [esi],al
    1cf3:	35 56 00 00 00       	xor    eax,0x56
    1cf8:	05 03 48 5f 00       	add    eax,0x5f4803
    1cfd:	9f                   	lahf   
    1cfe:	10 64 00 00          	adc    BYTE PTR [eax+eax*1+0x0],ah
    1d02:	00 06                	add    BYTE PTR [esi],al
    1d04:	36                   	ss
    1d05:	56                   	push   esi
    1d06:	00 00                	add    BYTE PTR [eax],al
    1d08:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    1d0e:	9f                   	lahf   
    1d0f:	10 53 01             	adc    BYTE PTR [ebx+0x1],dl
    1d12:	00 00                	add    BYTE PTR [eax],al
    1d14:	06                   	push   es
    1d15:	37                   	aaa    
    1d16:	7a 00                	jp     1d18 <sysEnter_Vector-0x12e2e8>
    1d18:	00 00                	add    BYTE PTR [eax],al
    1d1a:	05 03 50 5f 00       	add    eax,0x5f5003
    1d1f:	9f                   	lahf   
    1d20:	10 38                	adc    BYTE PTR [eax],bh
    1d22:	00 00                	add    BYTE PTR [eax],al
    1d24:	00 07                	add    BYTE PTR [edi],al
    1d26:	52                   	push   edx
    1d27:	9f                   	lahf   
    1d28:	02 00                	add    al,BYTE PTR [eax]
    1d2a:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    1d30:	9f                   	lahf   
    1d31:	0c 04                	or     al,0x4
    1d33:	d7                   	xlat   BYTE PTR ds:[ebx]
    1d34:	01 00                	add    DWORD PTR [eax],eax
    1d36:	00 10                	add    BYTE PTR [eax],dl
    1d38:	6b 07 00             	imul   eax,DWORD PTR [edi],0x0
    1d3b:	00 01                	add    BYTE PTR [ecx],al
    1d3d:	0b c5                	or     eax,ebp
    1d3f:	01 00                	add    DWORD PTR [eax],eax
    1d41:	00 05 03 60 5f 00    	add    BYTE PTR ds:0x5f6003,al
    1d47:	9f                   	lahf   
    1d48:	00 0b                	add    BYTE PTR [ebx],cl
    1d4a:	04 00                	add    al,0x0
    1d4c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1d4f:	cc                   	int3   
    1d50:	08 00                	or     BYTE PTR [eax],al
    1d52:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1d55:	83 00 00             	add    DWORD PTR [eax],0x0
    1d58:	00 0c 3b             	add    BYTE PTR [ebx+edi*1],cl
    1d5b:	08 00                	or     BYTE PTR [eax],al
    1d5d:	00 15 00 00 00 ec    	add    BYTE PTR ds:0xec000000,dl
    1d63:	16                   	push   ss
    1d64:	00 9f 16 04 00 00    	add    BYTE PTR [edi+0x416],bl
    1d6a:	7b 0b                	jnp    1d77 <sysEnter_Vector-0x12e289>
    1d6c:	00 00                	add    BYTE PTR [eax],al
    1d6e:	02 01                	add    al,BYTE PTR [ecx]
    1d70:	06                   	push   es
    1d71:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d72:	00 00                	add    BYTE PTR [eax],al
    1d74:	00 02                	add    BYTE PTR [edx],al
    1d76:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    1d7c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1d83:	02 08                	add    cl,BYTE PTR [eax]
    1d85:	05 00 00 00 00       	add    eax,0x0
    1d8a:	04 65                	add    al,0x65
    1d8c:	08 00                	or     BYTE PTR [eax],al
    1d8e:	00 02                	add    BYTE PTR [edx],al
    1d90:	2e                   	cs
    1d91:	4c                   	dec    esp
    1d92:	00 00                	add    BYTE PTR [eax],al
    1d94:	00 02                	add    BYTE PTR [edx],al
    1d96:	01 08                	add    DWORD PTR [eax],ecx
    1d98:	6c                   	ins    BYTE PTR es:[edi],dx
    1d99:	00 00                	add    BYTE PTR [eax],al
    1d9b:	00 02                	add    BYTE PTR [edx],al
    1d9d:	02 07                	add    al,BYTE PTR [edi]
    1d9f:	f0 00 00             	lock add BYTE PTR [eax],al
    1da2:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    1da5:	00 00                	add    BYTE PTR [eax],al
    1da7:	00 02                	add    BYTE PTR [edx],al
    1da9:	34 65                	xor    al,0x65
    1dab:	00 00                	add    BYTE PTR [eax],al
    1dad:	00 02                	add    BYTE PTR [edx],al
    1daf:	04 07                	add    al,0x7
    1db1:	4e                   	dec    esi
    1db2:	00 00                	add    BYTE PTR [eax],al
    1db4:	00 02                	add    BYTE PTR [edx],al
    1db6:	08 07                	or     BYTE PTR [edi],al
    1db8:	44                   	inc    esp
    1db9:	00 00                	add    BYTE PTR [eax],al
    1dbb:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    1dbe:	05 00 00 02 56       	add    eax,0x56020000
    1dc3:	65 00 00             	add    BYTE PTR gs:[eax],al
    1dc6:	00 04 23             	add    BYTE PTR [ebx+eiz*1],al
    1dc9:	05 00 00 03 d8       	add    eax,0xd8030000
    1dce:	65 00 00             	add    BYTE PTR gs:[eax],al
    1dd1:	00 02                	add    BYTE PTR [edx],al
    1dd3:	04 05                	add    al,0x5
    1dd5:	05 00 00 00 02       	add    eax,0x2000000
    1dda:	0c 04                	or     al,0x4
    1ddc:	3d 01 00 00 02       	cmp    eax,0x2000001
    1de1:	01 06                	add    DWORD PTR [esi],eax
    1de3:	75 00                	jne    1de5 <sysEnter_Vector-0x12e21b>
    1de5:	00 00                	add    BYTE PTR [eax],al
    1de7:	05 df 07 00 00       	add    eax,0x7df
    1dec:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    1def:	db 00                	fild   DWORD PTR [eax]
    1df1:	00 00                	add    BYTE PTR [eax],al
    1df3:	06                   	push   es
    1df4:	b2 07                	mov    dl,0x7
    1df6:	00 00                	add    BYTE PTR [eax],al
    1df8:	04 2e                	add    al,0x2e
    1dfa:	5a                   	pop    edx
    1dfb:	00 00                	add    BYTE PTR [eax],al
    1dfd:	00 00                	add    BYTE PTR [eax],al
    1dff:	07                   	pop    es
    1e00:	6c                   	ins    BYTE PTR es:[edi],dx
    1e01:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1e03:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    1e06:	5a                   	pop    edx
    1e07:	00 00                	add    BYTE PTR [eax],al
    1e09:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1e0c:	d9 07                	fld    DWORD PTR [edi]
    1e0e:	00 00                	add    BYTE PTR [eax],al
    1e10:	04 30                	add    al,0x30
    1e12:	db 00                	fild   DWORD PTR [eax]
    1e14:	00 00                	add    BYTE PTR [eax],al
    1e16:	08 06                	or     BYTE PTR [esi],al
    1e18:	98                   	cwde   
    1e19:	07                   	pop    es
    1e1a:	00 00                	add    BYTE PTR [eax],al
    1e1c:	04 31                	add    al,0x31
    1e1e:	e2 00                	loop   1e20 <sysEnter_Vector-0x12e1e0>
    1e20:	00 00                	add    BYTE PTR [eax],al
    1e22:	0c 00                	or     al,0x0
    1e24:	02 01                	add    al,BYTE PTR [ecx]
    1e26:	02 ea                	add    ch,dl
    1e28:	00 00                	add    BYTE PTR [eax],al
    1e2a:	00 08                	add    BYTE PTR [eax],cl
    1e2c:	04 9e                	add    al,0x9e
    1e2e:	00 00                	add    BYTE PTR [eax],al
    1e30:	00 04 a2             	add    BYTE PTR [edx+eiz*4],al
    1e33:	07                   	pop    es
    1e34:	00 00                	add    BYTE PTR [eax],al
    1e36:	04 32                	add    al,0x32
    1e38:	9e                   	sahf   
    1e39:	00 00                	add    BYTE PTR [eax],al
    1e3b:	00 02                	add    BYTE PTR [edx],al
    1e3d:	04 07                	add    al,0x7
    1e3f:	5a                   	pop    edx
    1e40:	01 00                	add    DWORD PTR [eax],eax
    1e42:	00 09                	add    BYTE PTR [ecx],cl
    1e44:	94                   	xchg   esp,eax
    1e45:	03 00                	add    eax,DWORD PTR [eax]
    1e47:	00 04 65 00 00 00 06 	add    BYTE PTR [eiz*2+0x6000000],al
    1e4e:	15 c8 01 00 00       	adc    eax,0x1c8
    1e53:	0a 51 03             	or     dl,BYTE PTR [ecx+0x3]
    1e56:	00 00                	add    BYTE PTR [eax],al
    1e58:	00 0a                	add    BYTE PTR [edx],cl
    1e5a:	93                   	xchg   ebx,eax
    1e5b:	04 00                	add    al,0x0
    1e5d:	00 01                	add    BYTE PTR [ecx],al
    1e5f:	0a ce                	or     cl,dh
    1e61:	02 00                	add    al,BYTE PTR [eax]
    1e63:	00 02                	add    BYTE PTR [edx],al
    1e65:	0a 85 04 00 00 03    	or     al,BYTE PTR [ebp+0x3000004]
    1e6b:	0a f9                	or     bh,cl
    1e6d:	02 00                	add    al,BYTE PTR [eax]
    1e6f:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    1e72:	eb 02                	jmp    1e76 <sysEnter_Vector-0x12e18a>
    1e74:	00 00                	add    BYTE PTR [eax],al
    1e76:	05 0a 63 04 00       	add    eax,0x4630a
    1e7b:	00 06                	add    BYTE PTR [esi],al
    1e7d:	0a db                	or     bl,bl
    1e7f:	03 00                	add    eax,DWORD PTR [eax]
    1e81:	00 07                	add    BYTE PTR [edi],al
    1e83:	0a 28                	or     ch,BYTE PTR [eax]
    1e85:	03 00                	add    eax,DWORD PTR [eax]
    1e87:	00 08                	add    BYTE PTR [eax],cl
    1e89:	0a ce                	or     cl,dh
    1e8b:	03 00                	add    eax,DWORD PTR [eax]
    1e8d:	00 09                	add    BYTE PTR [ecx],cl
    1e8f:	0a e8                	or     ch,al
    1e91:	03 00                	add    eax,DWORD PTR [eax]
    1e93:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    1e96:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
    1e99:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    1e9c:	96                   	xchg   esi,eax
    1e9d:	02 00                	add    al,BYTE PTR [eax]
    1e9f:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    1ea2:	a9 03 00 00 97       	test   eax,0x97000003
    1ea7:	0b 71 03             	or     esi,DWORD PTR [ecx+0x3]
    1eaa:	00 00                	add    BYTE PTR [eax],al
    1eac:	63 01                	arpl   WORD PTR [ecx],ax
    1eae:	0b 06                	or     eax,DWORD PTR [esi]
    1eb0:	04 00                	add    al,0x0
    1eb2:	00 64 01 0b          	add    BYTE PTR [ecx+eax*1+0xb],ah
    1eb6:	37                   	aaa    
    1eb7:	04 00                	add    al,0x0
    1eb9:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1ebc:	0b ba 02 00 00 66    	or     edi,DWORD PTR [edx+0x66000002]
    1ec2:	01 0b                	add    DWORD PTR [ebx],ecx
    1ec4:	13 03                	adc    eax,DWORD PTR [ebx]
    1ec6:	00 00                	add    BYTE PTR [eax],al
    1ec8:	67 01 0b             	add    DWORD PTR [bp+di],ecx
    1ecb:	06                   	push   es
    1ecc:	03 00                	add    eax,DWORD PTR [eax]
    1ece:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1ed1:	0b a6 04 00 00 69    	or     esp,DWORD PTR [esi+0x69000004]
    1ed7:	01 0b                	add    DWORD PTR [ebx],ecx
    1ed9:	a9 02 00 00 70       	test   eax,0x70000002
    1ede:	01 0b                	add    DWORD PTR [ebx],ecx
    1ee0:	db 02                	fild   DWORD PTR [edx]
    1ee2:	00 00                	add    BYTE PTR [eax],al
    1ee4:	71 01                	jno    1ee7 <sysEnter_Vector-0x12e119>
    1ee6:	0b 77 04             	or     esi,DWORD PTR [edi+0x4]
    1ee9:	00 00                	add    BYTE PTR [eax],al
    1eeb:	00 03                	add    BYTE PTR [ebx],al
    1eed:	0b f7                	or     esi,edi
    1eef:	03 00                	add    eax,DWORD PTR [eax]
    1ef1:	00 01                	add    BYTE PTR [ecx],al
    1ef3:	03 0b                	add    ecx,DWORD PTR [ebx]
    1ef5:	88 03                	mov    BYTE PTR [ebx],al
    1ef7:	00 00                	add    BYTE PTR [eax],al
    1ef9:	02 03                	add    al,BYTE PTR [ebx]
    1efb:	0b 61 03             	or     esp,DWORD PTR [ecx+0x3]
    1efe:	00 00                	add    BYTE PTR [eax],al
    1f00:	03 03                	add    eax,DWORD PTR [ebx]
    1f02:	0b bd 03 00 00 04    	or     edi,DWORD PTR [ebp+0x4000003]
    1f08:	03 0b                	add    ecx,DWORD PTR [ebx]
    1f0a:	27                   	daa    
    1f0b:	04 00                	add    al,0x0
    1f0d:	00 05 03 00 0c 04    	add    BYTE PTR ds:0x40c0003,al
    1f13:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1f16:	49                   	dec    ecx
    1f17:	00 00                	add    BYTE PTR [eax],al
    1f19:	00 08                	add    BYTE PTR [eax],cl
    1f1b:	04 97                	add    al,0x97
    1f1d:	00 00                	add    BYTE PTR [eax],al
    1f1f:	00 0d e5 07 00 00    	add    BYTE PTR ds:0x7e5,cl
    1f25:	01 0d ec 16 00 9f    	add    DWORD PTR ds:0x9f0016ec,ecx
    1f2b:	6c                   	ins    BYTE PTR es:[edi],dx
    1f2c:	00 00                	add    BYTE PTR [eax],al
    1f2e:	00 01                	add    BYTE PTR [ecx],al
    1f30:	9c                   	pushf  
    1f31:	0e                   	push   cs
    1f32:	b9 07 00 00 01       	mov    ecx,0x1000007
    1f37:	17                   	pop    ss
    1f38:	5a                   	pop    edx
    1f39:	00 00                	add    BYTE PTR [eax],al
    1f3b:	00 58 17             	add    BYTE PTR [eax+0x17],bl
    1f3e:	00 9f 87 00 00 00    	add    BYTE PTR [edi+0x87],bl
    1f44:	01 9c 1e 02 00 00 0f 	add    DWORD PTR [esi+ebx*1+0xf000002],ebx
    1f4b:	33 06                	xor    eax,DWORD PTR [esi]
    1f4d:	00 00                	add    BYTE PTR [eax],al
    1f4f:	01 17                	add    DWORD PTR [edi],edx
    1f51:	7e 00                	jle    1f53 <sysEnter_Vector-0x12e0ad>
    1f53:	00 00                	add    BYTE PTR [eax],al
    1f55:	02 91 00 10 1b 08    	add    dl,BYTE PTR [ecx+0x81b1000]
    1f5b:	00 00                	add    BYTE PTR [eax],al
    1f5d:	01 1b                	add    DWORD PTR [ebx],ebx
    1f5f:	5a                   	pop    edx
    1f60:	00 00                	add    BYTE PTR [eax],al
    1f62:	00 02                	add    BYTE PTR [edx],al
    1f64:	91                   	xchg   ecx,eax
    1f65:	74 00                	je     1f67 <sysEnter_Vector-0x12e099>
    1f67:	11 ac 07 00 00 01 2f 	adc    DWORD PTR [edi+eax*1+0x2f010000],ebp
    1f6e:	df 17                	fist   WORD PTR [edi]
    1f70:	00 9f 3a 00 00 00    	add    BYTE PTR [edi+0x3a],bl
    1f76:	01 9c 4f 02 00 00 0f 	add    DWORD PTR [edi+ecx*2+0xf000002],ebx
    1f7d:	50                   	push   eax
    1f7e:	08 00                	or     BYTE PTR [eax],al
    1f80:	00 01                	add    BYTE PTR [ecx],al
    1f82:	2f                   	das    
    1f83:	c8 01 00 00          	enter  0x1,0x0
    1f87:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    1f8d:	00 01                	add    BYTE PTR [ecx],al
    1f8f:	31 4f 02             	xor    DWORD PTR [edi+0x2],ecx
    1f92:	00 00                	add    BYTE PTR [eax],al
    1f94:	02 91 74 00 08 04    	add    dl,BYTE PTR [ecx+0x4080074]
    1f9a:	e8 00 00 00 13       	call   13001f9f <sysEnter_Vector+0x12ed1f9f>
    1f9f:	90                   	nop
    1fa0:	07                   	pop    es
    1fa1:	00 00                	add    BYTE PTR [eax],al
    1fa3:	01 40 c8             	add    DWORD PTR [eax-0x38],eax
    1fa6:	01 00                	add    DWORD PTR [eax],eax
    1fa8:	00 19                	add    BYTE PTR [ecx],bl
    1faa:	18 00                	sbb    BYTE PTR [eax],al
    1fac:	9f                   	lahf   
    1fad:	d4 01                	aam    0x1
    1faf:	00 00                	add    BYTE PTR [eax],al
    1fb1:	01 9c c3 02 00 00 0f 	add    DWORD PTR [ebx+eax*8+0xf000002],ebx
    1fb8:	33 06                	xor    eax,DWORD PTR [esi]
    1fba:	00 00                	add    BYTE PTR [eax],al
    1fbc:	01 40 7e             	add    DWORD PTR [eax+0x7e],eax
    1fbf:	00 00                	add    BYTE PTR [eax],al
    1fc1:	00 02                	add    BYTE PTR [edx],al
    1fc3:	91                   	xchg   ecx,eax
    1fc4:	00 10                	add    BYTE PTR [eax],dl
    1fc6:	09 05 00 00 01 42    	or     DWORD PTR ds:0x42010000,eax
    1fcc:	c8 01 00 00          	enter  0x1,0x0
    1fd0:	02 91 60 10 23 08    	add    dl,BYTE PTR [ecx+0x8231060]
    1fd6:	00 00                	add    BYTE PTR [eax],al
    1fd8:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    1fdc:	00 00                	add    BYTE PTR [eax],al
    1fde:	02 91 6c 10 07 08    	add    dl,BYTE PTR [ecx+0x807106c]
    1fe4:	00 00                	add    BYTE PTR [eax],al
    1fe6:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    1fe9:	00 00                	add    BYTE PTR [eax],al
    1feb:	00 02                	add    BYTE PTR [edx],al
    1fed:	91                   	xchg   ecx,eax
    1fee:	68 10 48 08 00       	push   0x84810
    1ff3:	00 01                	add    BYTE PTR [ecx],al
    1ff5:	46                   	inc    esi
    1ff6:	4f                   	dec    edi
    1ff7:	02 00                	add    al,BYTE PTR [eax]
    1ff9:	00 02                	add    BYTE PTR [edx],al
    1ffb:	91                   	xchg   ecx,eax
    1ffc:	64 10 59 08          	adc    BYTE PTR fs:[ecx+0x8],bl
    2000:	00 00                	add    BYTE PTR [eax],al
    2002:	01 47 c3             	add    DWORD PTR [edi-0x3d],eax
    2005:	02 00                	add    al,BYTE PTR [eax]
    2007:	00 02                	add    BYTE PTR [edx],al
    2009:	91                   	xchg   ecx,eax
    200a:	5c                   	pop    esp
    200b:	00 08                	add    BYTE PTR [eax],cl
    200d:	04 41                	add    al,0x41
    200f:	00 00                	add    BYTE PTR [eax],al
    2011:	00 13                	add    BYTE PTR [ebx],dl
    2013:	e9 07 00 00 01       	jmp    100201f <sysEnter_Vector+0xed201f>
    2018:	67 c8 01 00 00       	addr16 enter 0x1,0x0
    201d:	ed                   	in     eax,dx
    201e:	19 00                	sbb    DWORD PTR [eax],eax
    2020:	9f                   	lahf   
    2021:	20 00                	and    BYTE PTR [eax],al
    2023:	00 00                	add    BYTE PTR [eax],al
    2025:	01 9c f1 02 00 00 0f 	add    DWORD PTR [ecx+esi*8+0xf000002],ebx
    202c:	33 06                	xor    eax,DWORD PTR [esi]
    202e:	00 00                	add    BYTE PTR [eax],al
    2030:	01 67 7e             	add    DWORD PTR [edi+0x7e],esp
    2033:	00 00                	add    BYTE PTR [eax],al
    2035:	00 02                	add    BYTE PTR [edx],al
    2037:	91                   	xchg   ecx,eax
    2038:	00 00                	add    BYTE PTR [eax],al
    203a:	13 2a                	adc    ebp,DWORD PTR [edx]
    203c:	08 00                	or     BYTE PTR [eax],al
    203e:	00 01                	add    BYTE PTR [ecx],al
    2040:	6c                   	ins    BYTE PTR es:[edi],dx
    2041:	c8 01 00 00          	enter  0x1,0x0
    2045:	0d 1a 00 9f 85       	or     eax,0x859f001a
    204a:	00 00                	add    BYTE PTR [eax],al
    204c:	00 01                	add    BYTE PTR [ecx],al
    204e:	9c                   	pushf  
    204f:	42                   	inc    edx
    2050:	03 00                	add    eax,DWORD PTR [eax]
    2052:	00 0f                	add    BYTE PTR [edi],cl
    2054:	f0 07                	lock pop es
    2056:	00 00                	add    BYTE PTR [eax],al
    2058:	01 6c c8 01          	add    DWORD PTR [eax+ecx*8+0x1],ebp
    205c:	00 00                	add    BYTE PTR [eax],al
    205e:	02 91 00 0f 14 08    	add    dl,BYTE PTR [ecx+0x8140f00]
    2064:	00 00                	add    BYTE PTR [eax],al
    2066:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    206a:	00 00                	add    BYTE PTR [eax],al
    206c:	02 91 04 10 33 08    	add    dl,BYTE PTR [ecx+0x8331004]
    2072:	00 00                	add    BYTE PTR [eax],al
    2074:	01 70 42             	add    DWORD PTR [eax+0x42],esi
    2077:	03 00                	add    eax,DWORD PTR [eax]
    2079:	00 02                	add    BYTE PTR [edx],al
    207b:	91                   	xchg   ecx,eax
    207c:	6c                   	ins    BYTE PTR es:[edi],dx
    207d:	12 6d 70             	adc    ch,BYTE PTR [ebp+0x70]
    2080:	00 01                	add    BYTE PTR [ecx],al
    2082:	73 4f                	jae    20d3 <sysEnter_Vector-0x12df2d>
    2084:	02 00                	add    al,BYTE PTR [eax]
    2086:	00 02                	add    BYTE PTR [edx],al
    2088:	91                   	xchg   ecx,eax
    2089:	68 00 08 04 73       	push   0x73040800
    208e:	00 00                	add    BYTE PTR [eax],al
    2090:	00 13                	add    BYTE PTR [ebx],dl
    2092:	6d                   	ins    DWORD PTR es:[edi],dx
    2093:	08 00                	or     BYTE PTR [eax],al
    2095:	00 01                	add    BYTE PTR [ecx],al
    2097:	7f c8                	jg     2061 <sysEnter_Vector-0x12df9f>
    2099:	01 00                	add    DWORD PTR [eax],eax
    209b:	00 92 1a 00 9f 23    	add    BYTE PTR [edx+0x239f001a],dl
    20a1:	00 00                	add    BYTE PTR [eax],al
    20a3:	00 01                	add    BYTE PTR [ecx],al
    20a5:	9c                   	pushf  
    20a6:	7e 03                	jle    20ab <sysEnter_Vector-0x12df55>
    20a8:	00 00                	add    BYTE PTR [eax],al
    20aa:	0f f0                	(bad)  
    20ac:	07                   	pop    es
    20ad:	00 00                	add    BYTE PTR [eax],al
    20af:	01 7f c8             	add    DWORD PTR [edi-0x38],edi
    20b2:	01 00                	add    DWORD PTR [eax],eax
    20b4:	00 02                	add    BYTE PTR [edx],al
    20b6:	91                   	xchg   ecx,eax
    20b7:	00 0f                	add    BYTE PTR [edi],cl
    20b9:	14 08                	adc    al,0x8
    20bb:	00 00                	add    BYTE PTR [eax],al
    20bd:	01 7f 5a             	add    DWORD PTR [edi+0x5a],edi
    20c0:	00 00                	add    BYTE PTR [eax],al
    20c2:	00 02                	add    BYTE PTR [edx],al
    20c4:	91                   	xchg   ecx,eax
    20c5:	04 00                	add    al,0x0
    20c7:	14 9d                	adc    al,0x9d
    20c9:	07                   	pop    es
    20ca:	00 00                	add    BYTE PTR [eax],al
    20cc:	01 84 b5 1a 00 9f 1b 	add    DWORD PTR [ebp+esi*4+0x1b9f001a],eax
    20d3:	00 00                	add    BYTE PTR [eax],al
    20d5:	00 01                	add    BYTE PTR [ecx],al
    20d7:	9c                   	pushf  
    20d8:	a2 03 00 00 0f       	mov    ds:0xf000003,al
    20dd:	50                   	push   eax
    20de:	08 00                	or     BYTE PTR [eax],al
    20e0:	00 01                	add    BYTE PTR [ecx],al
    20e2:	84 c8                	test   al,cl
    20e4:	01 00                	add    DWORD PTR [eax],eax
    20e6:	00 02                	add    BYTE PTR [edx],al
    20e8:	91                   	xchg   ecx,eax
    20e9:	00 00                	add    BYTE PTR [eax],al
    20eb:	0d f8 07 00 00       	or     eax,0x7f8
    20f0:	01 89 d0 1a 00 9f    	add    DWORD PTR [ecx-0x60ffe530],ecx
    20f6:	32 00                	xor    al,BYTE PTR [eax]
    20f8:	00 00                	add    BYTE PTR [eax],al
    20fa:	01 9c 15 5b 00 00 00 	add    DWORD PTR [ebp+edx*1+0x5b],ebx
    2101:	04 34                	add    al,0x34
    2103:	5a                   	pop    edx
    2104:	00 00                	add    BYTE PTR [eax],al
    2106:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    210c:	9f                   	lahf   
    210d:	15 0b 01 00 00       	adc    eax,0x10b
    2112:	04 35                	add    al,0x35
    2114:	5a                   	pop    edx
    2115:	00 00                	add    BYTE PTR [eax],al
    2117:	00 05 03 48 5f 00    	add    BYTE PTR ds:0x5f4803,al
    211d:	9f                   	lahf   
    211e:	15 64 00 00 00       	adc    eax,0x64
    2123:	04 36                	add    al,0x36
    2125:	5a                   	pop    edx
    2126:	00 00                	add    BYTE PTR [eax],al
    2128:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    212e:	9f                   	lahf   
    212f:	15 53 01 00 00       	adc    eax,0x153
    2134:	04 37                	add    al,0x37
    2136:	89 00                	mov    DWORD PTR [eax],eax
    2138:	00 00                	add    BYTE PTR [eax],al
    213a:	05 03 50 5f 00       	add    eax,0x5f5003
    213f:	9f                   	lahf   
    2140:	15 38 00 00 00       	adc    eax,0x38
    2145:	05 52 08 04 00       	add    eax,0x40852
    214a:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    2150:	9f                   	lahf   
    2151:	08 04 d1             	or     BYTE PTR [ecx+edx*8],al
    2154:	01 00                	add    DWORD PTR [eax],eax
    2156:	00 00                	add    BYTE PTR [eax],al
    2158:	2c 02                	sub    al,0x2
    215a:	00 00                	add    BYTE PTR [eax],al
    215c:	04 00                	add    al,0x0
    215e:	23 0a                	and    ecx,DWORD PTR [edx]
    2160:	00 00                	add    BYTE PTR [eax],al
    2162:	04 01                	add    al,0x1
    2164:	83 00 00             	add    DWORD PTR [eax],0x0
    2167:	00 0c 75 08 00 00 15 	add    BYTE PTR [esi*2+0x15000008],cl
    216e:	00 00                	add    BYTE PTR [eax],al
    2170:	00 04 1b             	add    BYTE PTR [ebx+ebx*1],al
    2173:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
    2179:	da 0c 00             	fimul  DWORD PTR [eax+eax*1]
    217c:	00 02                	add    BYTE PTR [edx],al
    217e:	01 08                	add    DWORD PTR [eax],ecx
    2180:	6c                   	ins    BYTE PTR es:[edi],dx
    2181:	00 00                	add    BYTE PTR [eax],al
    2183:	00 02                	add    BYTE PTR [edx],al
    2185:	02 07                	add    al,BYTE PTR [edi]
    2187:	f0 00 00             	lock add BYTE PTR [eax],al
    218a:	00 02                	add    BYTE PTR [edx],al
    218c:	04 07                	add    al,0x7
    218e:	4e                   	dec    esi
    218f:	00 00                	add    BYTE PTR [eax],al
    2191:	00 02                	add    BYTE PTR [edx],al
    2193:	04 07                	add    al,0x7
    2195:	49                   	dec    ecx
    2196:	00 00                	add    BYTE PTR [eax],al
    2198:	00 02                	add    BYTE PTR [edx],al
    219a:	01 06                	add    DWORD PTR [esi],eax
    219c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    219d:	00 00                	add    BYTE PTR [eax],al
    219f:	00 02                	add    BYTE PTR [edx],al
    21a1:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    21a7:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    21ae:	02 08                	add    cl,BYTE PTR [eax]
    21b0:	05 00 00 00 00       	add    eax,0x0
    21b5:	02 08                	add    cl,BYTE PTR [eax]
    21b7:	07                   	pop    es
    21b8:	44                   	inc    esp
    21b9:	00 00                	add    BYTE PTR [eax],al
    21bb:	00 02                	add    BYTE PTR [edx],al
    21bd:	04 05                	add    al,0x5
    21bf:	05 00 00 00 02       	add    eax,0x2000000
    21c4:	04 07                	add    al,0x7
    21c6:	5a                   	pop    edx
    21c7:	01 00                	add    DWORD PTR [eax],eax
    21c9:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    21cc:	05 04 7a 00 00       	add    eax,0x7a04
    21d1:	00 02                	add    BYTE PTR [edx],al
    21d3:	01 06                	add    DWORD PTR [esi],eax
    21d5:	75 00                	jne    21d7 <sysEnter_Vector-0x12de29>
    21d7:	00 00                	add    BYTE PTR [eax],al
    21d9:	06                   	push   es
    21da:	7a 00                	jp     21dc <sysEnter_Vector-0x12de24>
    21dc:	00 00                	add    BYTE PTR [eax],al
    21de:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    21e1:	00 00                	add    BYTE PTR [eax],al
    21e3:	00 05 04 92 00 00    	add    BYTE PTR ds:0x9204,al
    21e9:	00 07                	add    BYTE PTR [edi],al
    21eb:	7a 00                	jp     21ed <sysEnter_Vector-0x12de13>
    21ed:	00 00                	add    BYTE PTR [eax],al
    21ef:	06                   	push   es
    21f0:	23 05 00 00 03 d8    	and    eax,DWORD PTR ds:0xd8030000
    21f6:	33 00                	xor    eax,DWORD PTR [eax]
    21f8:	00 00                	add    BYTE PTR [eax],al
    21fa:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    21fd:	3d 01 00 00 02       	cmp    eax,0x2000001
    2202:	01 02                	add    DWORD PTR [edx],eax
    2204:	ea 00 00 00 08 87 08 	jmp    0x887:0x8000000
    220b:	00 00                	add    BYTE PTR [eax],al
    220d:	01 0b                	add    DWORD PTR [ebx],ecx
    220f:	72 00                	jb     2211 <sysEnter_Vector-0x12ddef>
    2211:	00 00                	add    BYTE PTR [eax],al
    2213:	04 1b                	add    al,0x1b
    2215:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    221b:	01 9c 7a 01 00 00 09 	add    DWORD PTR [edx+edi*2+0x9000001],ebx
    2222:	82                   	(bad)  
    2223:	08 00                	or     BYTE PTR [eax],al
    2225:	00 01                	add    BYTE PTR [ecx],al
    2227:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    222a:	00 00                	add    BYTE PTR [eax],al
    222c:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2232:	63 00                	arpl   WORD PTR [eax],ax
    2234:	01 0b                	add    DWORD PTR [ebx],ecx
    2236:	7a 01                	jp     2239 <sysEnter_Vector-0x12ddc7>
    2238:	00 00                	add    BYTE PTR [eax],al
    223a:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2240:	01 0b                	add    DWORD PTR [ebx],ecx
    2242:	97                   	xchg   edi,eax
    2243:	00 00                	add    BYTE PTR [eax],al
    2245:	00 02                	add    BYTE PTR [edx],al
    2247:	91                   	xchg   ecx,eax
    2248:	08 0b                	or     BYTE PTR [ebx],cl
    224a:	64                   	fs
    224b:	77 00                	ja     224d <sysEnter_Vector-0x12ddb3>
    224d:	01 0d a9 00 00 00    	add    DWORD PTR ds:0xa9,ecx
    2253:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2259:	00 01                	add    BYTE PTR [ecx],al
    225b:	0d a9 00 00 00       	or     eax,0xa9
    2260:	02 91 5f 0c 36 1b    	add    dl,BYTE PTR [ecx+0x1b360c5f]
    2266:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    226c:	31 01                	xor    DWORD PTR [ecx],eax
    226e:	00 00                	add    BYTE PTR [eax],al
    2270:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2273:	01 14 81             	add    DWORD PTR [ecx+eax*4],edx
    2276:	01 00                	add    DWORD PTR [eax],eax
    2278:	00 02                	add    BYTE PTR [edx],al
    227a:	91                   	xchg   ecx,eax
    227b:	74 0b                	je     2288 <sysEnter_Vector-0x12dd78>
    227d:	74 00                	je     227f <sysEnter_Vector-0x12dd81>
    227f:	01 15 8c 01 00 00    	add    DWORD PTR ds:0x18c,edx
    2285:	02 91 70 00 0c b9    	add    dl,BYTE PTR [ecx-0x46f3ff90]
    228b:	1b 00                	sbb    eax,DWORD PTR [eax]
    228d:	9f                   	lahf   
    228e:	79 00                	jns    2290 <sysEnter_Vector-0x12dd70>
    2290:	00 00                	add    BYTE PTR [eax],al
    2292:	57                   	push   edi
    2293:	01 00                	add    DWORD PTR [eax],eax
    2295:	00 0b                	add    BYTE PTR [ebx],cl
    2297:	66                   	data16
    2298:	00 01                	add    BYTE PTR [ecx],al
    229a:	24 81                	and    al,0x81
    229c:	01 00                	add    DWORD PTR [eax],eax
    229e:	00 02                	add    BYTE PTR [edx],al
    22a0:	91                   	xchg   ecx,eax
    22a1:	6c                   	ins    BYTE PTR es:[edi],dx
    22a2:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    22a6:	25 8c 01 00 00       	and    eax,0x18c
    22ab:	02 91 68 00 0d 32    	add    dl,BYTE PTR [ecx+0x320d0068]
    22b1:	1c 00                	sbb    al,0x0
    22b3:	9f                   	lahf   
    22b4:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    22b7:	00 0b                	add    BYTE PTR [ebx],cl
    22b9:	66                   	data16
    22ba:	00 01                	add    BYTE PTR [ecx],al
    22bc:	33 8c 00 00 00 02 91 	xor    ecx,DWORD PTR [eax+eax*1-0x6efe0000]
    22c3:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    22c8:	34 74                	xor    al,0x74
    22ca:	00 00                	add    BYTE PTR [eax],al
    22cc:	00 02                	add    BYTE PTR [edx],al
    22ce:	91                   	xchg   ecx,eax
    22cf:	60                   	pusha  
    22d0:	00 00                	add    BYTE PTR [eax],al
    22d2:	05 04 80 01 00       	add    eax,0x18004
    22d7:	00 0e                	add    BYTE PTR [esi],cl
    22d9:	05 04 87 01 00       	add    eax,0x18704
    22de:	00 07                	add    BYTE PTR [edi],al
    22e0:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    22e6:	81 00 00 00 0f 8f    	add    DWORD PTR [eax],0x8f0f0000
    22ec:	08 00                	or     BYTE PTR [eax],al
    22ee:	00 01                	add    BYTE PTR [ecx],al
    22f0:	42                   	inc    edx
    22f1:	72 00                	jb     22f3 <sysEnter_Vector-0x12dd0d>
    22f3:	00 00                	add    BYTE PTR [eax],al
    22f5:	9f                   	lahf   
    22f6:	1c 00                	sbb    al,0x0
    22f8:	9f                   	lahf   
    22f9:	20 00                	and    BYTE PTR [eax],al
    22fb:	00 00                	add    BYTE PTR [eax],al
    22fd:	01 9c d4 01 00 00 09 	add    DWORD PTR [esp+edx*8+0x9000001],ebx
    2304:	82                   	(bad)  
    2305:	08 00                	or     BYTE PTR [eax],al
    2307:	00 01                	add    BYTE PTR [ecx],al
    2309:	42                   	inc    edx
    230a:	72 00                	jb     230c <sysEnter_Vector-0x12dcf4>
    230c:	00 00                	add    BYTE PTR [eax],al
    230e:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2314:	63 00                	arpl   WORD PTR [eax],ax
    2316:	01 42 7a             	add    DWORD PTR [edx+0x7a],eax
    2319:	01 00                	add    DWORD PTR [eax],eax
    231b:	00 02                	add    BYTE PTR [edx],al
    231d:	91                   	xchg   ecx,eax
    231e:	04 0a                	add    al,0xa
    2320:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2321:	00 01                	add    BYTE PTR [ecx],al
    2323:	42                   	inc    edx
    2324:	97                   	xchg   edi,eax
    2325:	00 00                	add    BYTE PTR [eax],al
    2327:	00 02                	add    BYTE PTR [edx],al
    2329:	91                   	xchg   ecx,eax
    232a:	08 00                	or     BYTE PTR [eax],al
    232c:	10 5b 00             	adc    BYTE PTR [ebx+0x0],bl
    232f:	00 00                	add    BYTE PTR [eax],al
    2331:	04 34                	add    al,0x34
    2333:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2339:	44                   	inc    esp
    233a:	5f                   	pop    edi
    233b:	00 9f 10 0b 01 00    	add    BYTE PTR [edi+0x10b10],bl
    2341:	00 04 35 81 00 00 00 	add    BYTE PTR [esi*1+0x81],al
    2348:	05 03 48 5f 00       	add    eax,0x5f4803
    234d:	9f                   	lahf   
    234e:	10 64 00 00          	adc    BYTE PTR [eax+eax*1+0x0],ah
    2352:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2355:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    235b:	40                   	inc    eax
    235c:	5f                   	pop    edi
    235d:	00 9f 10 53 01 00    	add    BYTE PTR [edi+0x15310],bl
    2363:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    2366:	64 00 00             	add    BYTE PTR fs:[eax],al
    2369:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    236f:	9f                   	lahf   
    2370:	10 38                	adc    BYTE PTR [eax],bh
    2372:	00 00                	add    BYTE PTR [eax],al
    2374:	00 05 52 29 02 00    	add    BYTE PTR ds:0x22952,al
    237a:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    2380:	9f                   	lahf   
    2381:	05 04 74 00 00       	add    eax,0x7404
    2386:	00 00                	add    BYTE PTR [eax],al
    2388:	eb 01                	jmp    238b <sysEnter_Vector-0x12dc75>
    238a:	00 00                	add    BYTE PTR [eax],al
    238c:	04 00                	add    al,0x0
    238e:	00 0b                	add    BYTE PTR [ebx],cl
    2390:	00 00                	add    BYTE PTR [eax],al
    2392:	04 01                	add    al,0x1
    2394:	83 00 00             	add    DWORD PTR [eax],0x0
    2397:	00 0c 96             	add    BYTE PTR [esi+edx*4],cl
    239a:	08 00                	or     BYTE PTR [eax],al
    239c:	00 15 00 00 00 c0    	add    BYTE PTR ds:0xc0000000,dl
    23a2:	1c 00                	sbb    al,0x0
    23a4:	9f                   	lahf   
    23a5:	e7 00                	out    0x0,eax
    23a7:	00 00                	add    BYTE PTR [eax],al
    23a9:	c5 0d 00 00 02 01    	lds    ecx,FWORD PTR ds:0x1020000
    23af:	06                   	push   es
    23b0:	75 00                	jne    23b2 <sysEnter_Vector-0x12dc4e>
    23b2:	00 00                	add    BYTE PTR [eax],al
    23b4:	02 01                	add    al,BYTE PTR [ecx]
    23b6:	06                   	push   es
    23b7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    23b8:	00 00                	add    BYTE PTR [eax],al
    23ba:	00 02                	add    BYTE PTR [edx],al
    23bc:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    23c2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    23c9:	02 08                	add    cl,BYTE PTR [eax]
    23cb:	05 00 00 00 00       	add    eax,0x0
    23d0:	04 65                	add    al,0x65
    23d2:	08 00                	or     BYTE PTR [eax],al
    23d4:	00 02                	add    BYTE PTR [edx],al
    23d6:	2e                   	cs
    23d7:	53                   	push   ebx
    23d8:	00 00                	add    BYTE PTR [eax],al
    23da:	00 02                	add    BYTE PTR [edx],al
    23dc:	01 08                	add    DWORD PTR [eax],ecx
    23de:	6c                   	ins    BYTE PTR es:[edi],dx
    23df:	00 00                	add    BYTE PTR [eax],al
    23e1:	00 04 b7             	add    BYTE PTR [edi+esi*4],al
    23e4:	08 00                	or     BYTE PTR [eax],al
    23e6:	00 02                	add    BYTE PTR [edx],al
    23e8:	31 65 00             	xor    DWORD PTR [ebp+0x0],esp
    23eb:	00 00                	add    BYTE PTR [eax],al
    23ed:	02 02                	add    al,BYTE PTR [edx]
    23ef:	07                   	pop    es
    23f0:	f0 00 00             	lock add BYTE PTR [eax],al
    23f3:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    23f6:	00 00                	add    BYTE PTR [eax],al
    23f8:	00 02                	add    BYTE PTR [edx],al
    23fa:	34 77                	xor    al,0x77
    23fc:	00 00                	add    BYTE PTR [eax],al
    23fe:	00 02                	add    BYTE PTR [edx],al
    2400:	04 07                	add    al,0x7
    2402:	4e                   	dec    esi
    2403:	00 00                	add    BYTE PTR [eax],al
    2405:	00 02                	add    BYTE PTR [edx],al
    2407:	08 07                	or     BYTE PTR [edi],al
    2409:	44                   	inc    esp
    240a:	00 00                	add    BYTE PTR [eax],al
    240c:	00 04 23             	add    BYTE PTR [ebx+eiz*1],al
    240f:	05 00 00 03 d8       	add    eax,0xd8030000
    2414:	77 00                	ja     2416 <sysEnter_Vector-0x12dbea>
    2416:	00 00                	add    BYTE PTR [eax],al
    2418:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    241f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2422:	3d 01 00 00 02       	cmp    eax,0x2000001
    2427:	01 02                	add    DWORD PTR [edx],eax
    2429:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    2430:	5a                   	pop    edx
    2431:	01 00                	add    DWORD PTR [eax],eax
    2433:	00 05 04 02 04 07    	add    BYTE PTR ds:0x7040204,al
    2439:	49                   	dec    ecx
    243a:	00 00                	add    BYTE PTR [eax],al
    243c:	00 06                	add    BYTE PTR [esi],al
    243e:	04 25                	add    al,0x25
    2440:	00 00                	add    BYTE PTR [eax],al
    2442:	00 07                	add    BYTE PTR [edi],al
    2444:	aa                   	stos   BYTE PTR es:[edi],al
    2445:	08 00                	or     BYTE PTR [eax],al
    2447:	00 01                	add    BYTE PTR [ecx],al
    2449:	08 ac 00 00 00 c0 1c 	or     BYTE PTR [eax+eax*1+0x1cc00000],ch
    2450:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2456:	01 9c 3e 01 00 00 08 	add    DWORD PTR [esi+edi*1+0x8000001],ebx
    245d:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2460:	01 08                	add    DWORD PTR [eax],ecx
    2462:	ac                   	lods   al,BYTE PTR ds:[esi]
    2463:	00 00                	add    BYTE PTR [eax],al
    2465:	00 02                	add    BYTE PTR [edx],al
    2467:	91                   	xchg   ecx,eax
    2468:	00 08                	add    BYTE PTR [eax],cl
    246a:	76 61                	jbe    24cd <sysEnter_Vector-0x12db33>
    246c:	6c                   	ins    BYTE PTR es:[edi],dx
    246d:	00 01                	add    BYTE PTR [ecx],al
    246f:	08 3a                	or     BYTE PTR [edx],bh
    2471:	00 00                	add    BYTE PTR [eax],al
    2473:	00 02                	add    BYTE PTR [edx],al
    2475:	91                   	xchg   ecx,eax
    2476:	04 08                	add    al,0x8
    2478:	6c                   	ins    BYTE PTR es:[edi],dx
    2479:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    247b:	00 01                	add    BYTE PTR [ecx],al
    247d:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    2483:	91                   	xchg   ecx,eax
    2484:	08 09                	or     BYTE PTR [ecx],cl
    2486:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2489:	0a 3e                	or     bh,BYTE PTR [esi]
    248b:	01 00                	add    DWORD PTR [eax],eax
    248d:	00 02                	add    BYTE PTR [edx],al
    248f:	91                   	xchg   ecx,eax
    2490:	74 09                	je     249b <sysEnter_Vector-0x12db65>
    2492:	65 00 01             	add    BYTE PTR gs:[ecx],al
    2495:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    2499:	00 02                	add    BYTE PTR [edx],al
    249b:	91                   	xchg   ecx,eax
    249c:	70 0a                	jo     24a8 <sysEnter_Vector-0x12db58>
    249e:	b2 08                	mov    dl,0x8
    24a0:	00 00                	add    BYTE PTR [eax],al
    24a2:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    24a5:	00 00                	add    BYTE PTR [eax],al
    24a7:	00 02                	add    BYTE PTR [edx],al
    24a9:	91                   	xchg   ecx,eax
    24aa:	6a 09                	push   0x9
    24ac:	66                   	data16
    24ad:	00 01                	add    BYTE PTR [ecx],al
    24af:	0d 4a 01 00 00       	or     eax,0x14a
    24b4:	02 91 6c 0a c0 08    	add    dl,BYTE PTR [ecx+0x8c00a6c]
    24ba:	00 00                	add    BYTE PTR [eax],al
    24bc:	01 0e                	add    DWORD PTR [esi],ecx
    24be:	6c                   	ins    BYTE PTR es:[edi],dx
    24bf:	00 00                	add    BYTE PTR [eax],al
    24c1:	00 02                	add    BYTE PTR [edx],al
    24c3:	91                   	xchg   ecx,eax
    24c4:	64 00 06             	add    BYTE PTR fs:[esi],al
    24c7:	04 48                	add    al,0x48
    24c9:	00 00                	add    BYTE PTR [eax],al
    24cb:	00 06                	add    BYTE PTR [esi],al
    24cd:	04 5a                	add    al,0x5a
    24cf:	00 00                	add    BYTE PTR [eax],al
    24d1:	00 06                	add    BYTE PTR [esi],al
    24d3:	04 6c                	add    al,0x6c
    24d5:	00 00                	add    BYTE PTR [eax],al
    24d7:	00 0b                	add    BYTE PTR [ebx],cl
    24d9:	a3 08 00 00 01       	mov    ds:0x1000008,eax
    24de:	1f                   	pop    ds
    24df:	ac                   	lods   al,BYTE PTR ds:[esi]
    24e0:	00 00                	add    BYTE PTR [eax],al
    24e2:	00 87 1d 00 9f 20    	add    BYTE PTR [edi+0x209f001d],al
    24e8:	00 00                	add    BYTE PTR [eax],al
    24ea:	00 01                	add    BYTE PTR [ecx],al
    24ec:	9c                   	pushf  
    24ed:	93                   	xchg   ebx,eax
    24ee:	01 00                	add    DWORD PTR [eax],eax
    24f0:	00 08                	add    BYTE PTR [eax],cl
    24f2:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    24f5:	01 1f                	add    DWORD PTR [edi],ebx
    24f7:	ac                   	lods   al,BYTE PTR ds:[esi]
    24f8:	00 00                	add    BYTE PTR [eax],al
    24fa:	00 02                	add    BYTE PTR [edx],al
    24fc:	91                   	xchg   ecx,eax
    24fd:	00 08                	add    BYTE PTR [eax],cl
    24ff:	76 61                	jbe    2562 <sysEnter_Vector-0x12da9e>
    2501:	6c                   	ins    BYTE PTR es:[edi],dx
    2502:	00 01                	add    BYTE PTR [ecx],al
    2504:	1f                   	pop    ds
    2505:	3a 00                	cmp    al,BYTE PTR [eax]
    2507:	00 00                	add    BYTE PTR [eax],al
    2509:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    250f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2510:	00 01                	add    BYTE PTR [ecx],al
    2512:	1f                   	pop    ds
    2513:	85 00                	test   DWORD PTR [eax],eax
    2515:	00 00                	add    BYTE PTR [eax],al
    2517:	02 91 08 00 0c 5b    	add    dl,BYTE PTR [ecx+0x5b0c0008]
    251d:	00 00                	add    BYTE PTR [eax],al
    251f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2522:	6c                   	ins    BYTE PTR es:[edi],dx
    2523:	00 00                	add    BYTE PTR [eax],al
    2525:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    252b:	9f                   	lahf   
    252c:	0c 0b                	or     al,0xb
    252e:	01 00                	add    DWORD PTR [eax],eax
    2530:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    2537:	05 03 48 5f 00       	add    eax,0x5f4803
    253c:	9f                   	lahf   
    253d:	0c 64                	or     al,0x64
    253f:	00 00                	add    BYTE PTR [eax],al
    2541:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2544:	6c                   	ins    BYTE PTR es:[edi],dx
    2545:	00 00                	add    BYTE PTR [eax],al
    2547:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    254d:	9f                   	lahf   
    254e:	0c 53                	or     al,0x53
    2550:	01 00                	add    DWORD PTR [eax],eax
    2552:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    2555:	90                   	nop
    2556:	00 00                	add    BYTE PTR [eax],al
    2558:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    255e:	9f                   	lahf   
    255f:	0c 38                	or     al,0x38
    2561:	00 00                	add    BYTE PTR [eax],al
    2563:	00 05 52 e8 01 00    	add    BYTE PTR ds:0x1e852,al
    2569:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    256f:	9f                   	lahf   
    2570:	06                   	push   es
    2571:	04 b5                	add    al,0xb5
    2573:	00 00                	add    BYTE PTR [eax],al
    2575:	00 00                	add    BYTE PTR [eax],al
    2577:	f7 01 00 00 04 00    	test   DWORD PTR [ecx],0x40000
    257d:	bd 0b 00 00 04       	mov    ebp,0x400000b
    2582:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    2588:	c5 08                	lds    ecx,FWORD PTR [eax]
    258a:	00 00                	add    BYTE PTR [eax],al
    258c:	15 00 00 00 a8       	adc    eax,0xa8000000
    2591:	1d 00 9f 29 00       	sbb    eax,0x299f00
    2596:	00 00                	add    BYTE PTR [eax],al
    2598:	93                   	xchg   ebx,eax
    2599:	0e                   	push   cs
    259a:	00 00                	add    BYTE PTR [eax],al
    259c:	02 01                	add    al,BYTE PTR [ecx]
    259e:	06                   	push   es
    259f:	75 00                	jne    25a1 <sysEnter_Vector-0x12da5f>
    25a1:	00 00                	add    BYTE PTR [eax],al
    25a3:	02 01                	add    al,BYTE PTR [ecx]
    25a5:	06                   	push   es
    25a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    25a7:	00 00                	add    BYTE PTR [eax],al
    25a9:	00 02                	add    BYTE PTR [edx],al
    25ab:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    25b1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    25b8:	02 08                	add    cl,BYTE PTR [eax]
    25ba:	05 00 00 00 00       	add    eax,0x0
    25bf:	02 01                	add    al,BYTE PTR [ecx]
    25c1:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    25c5:	00 02                	add    BYTE PTR [edx],al
    25c7:	02 07                	add    al,BYTE PTR [edi]
    25c9:	f0 00 00             	lock add BYTE PTR [eax],al
    25cc:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    25cf:	00 00                	add    BYTE PTR [eax],al
    25d1:	00 02                	add    BYTE PTR [edx],al
    25d3:	34 61                	xor    al,0x61
    25d5:	00 00                	add    BYTE PTR [eax],al
    25d7:	00 02                	add    BYTE PTR [edx],al
    25d9:	04 07                	add    al,0x7
    25db:	4e                   	dec    esi
    25dc:	00 00                	add    BYTE PTR [eax],al
    25de:	00 02                	add    BYTE PTR [edx],al
    25e0:	08 07                	or     BYTE PTR [edi],al
    25e2:	44                   	inc    esp
    25e3:	00 00                	add    BYTE PTR [eax],al
    25e5:	00 04 2a             	add    BYTE PTR [edx+ebp*1],al
    25e8:	05 00 00 02 56       	add    eax,0x56020000
    25ed:	61                   	popa   
    25ee:	00 00                	add    BYTE PTR [eax],al
    25f0:	00 02                	add    BYTE PTR [edx],al
    25f2:	04 05                	add    al,0x5
    25f4:	05 00 00 00 02       	add    eax,0x2000000
    25f9:	0c 04                	or     al,0x4
    25fb:	3d 01 00 00 02       	cmp    eax,0x2000001
    2600:	01 02                	add    DWORD PTR [edx],eax
    2602:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    2609:	5a                   	pop    edx
    260a:	01 00                	add    DWORD PTR [eax],eax
    260c:	00 05 94 03 00 00    	add    BYTE PTR ds:0x394,al
    2612:	04 61                	add    al,0x61
    2614:	00 00                	add    BYTE PTR [eax],al
    2616:	00 05 15 64 01 00    	add    BYTE PTR ds:0x16415,al
    261c:	00 06                	add    BYTE PTR [esi],al
    261e:	51                   	push   ecx
    261f:	03 00                	add    eax,DWORD PTR [eax]
    2621:	00 00                	add    BYTE PTR [eax],al
    2623:	06                   	push   es
    2624:	93                   	xchg   ebx,eax
    2625:	04 00                	add    al,0x0
    2627:	00 01                	add    BYTE PTR [ecx],al
    2629:	06                   	push   es
    262a:	ce                   	into   
    262b:	02 00                	add    al,BYTE PTR [eax]
    262d:	00 02                	add    BYTE PTR [edx],al
    262f:	06                   	push   es
    2630:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    2633:	00 03                	add    BYTE PTR [ebx],al
    2635:	06                   	push   es
    2636:	f9                   	stc    
    2637:	02 00                	add    al,BYTE PTR [eax]
    2639:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    263c:	eb 02                	jmp    2640 <sysEnter_Vector-0x12d9c0>
    263e:	00 00                	add    BYTE PTR [eax],al
    2640:	05 06 63 04 00       	add    eax,0x46306
    2645:	00 06                	add    BYTE PTR [esi],al
    2647:	06                   	push   es
    2648:	db 03                	fild   DWORD PTR [ebx]
    264a:	00 00                	add    BYTE PTR [eax],al
    264c:	07                   	pop    es
    264d:	06                   	push   es
    264e:	28 03                	sub    BYTE PTR [ebx],al
    2650:	00 00                	add    BYTE PTR [eax],al
    2652:	08 06                	or     BYTE PTR [esi],al
    2654:	ce                   	into   
    2655:	03 00                	add    eax,DWORD PTR [eax]
    2657:	00 09                	add    BYTE PTR [ecx],cl
    2659:	06                   	push   es
    265a:	e8 03 00 00 4f       	call   4f002662 <sysEnter_Vector+0x4eed2662>
    265f:	06                   	push   es
    2660:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
    2663:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    2666:	96                   	xchg   esi,eax
    2667:	02 00                	add    al,BYTE PTR [eax]
    2669:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    266c:	a9 03 00 00 97       	test   eax,0x97000003
    2671:	07                   	pop    es
    2672:	71 03                	jno    2677 <sysEnter_Vector-0x12d989>
    2674:	00 00                	add    BYTE PTR [eax],al
    2676:	63 01                	arpl   WORD PTR [ecx],ax
    2678:	07                   	pop    es
    2679:	06                   	push   es
    267a:	04 00                	add    al,0x0
    267c:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    2680:	37                   	aaa    
    2681:	04 00                	add    al,0x0
    2683:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    2686:	07                   	pop    es
    2687:	ba 02 00 00 66       	mov    edx,0x66000002
    268c:	01 07                	add    DWORD PTR [edi],eax
    268e:	13 03                	adc    eax,DWORD PTR [ebx]
    2690:	00 00                	add    BYTE PTR [eax],al
    2692:	67 01 07             	add    DWORD PTR [bx],eax
    2695:	06                   	push   es
    2696:	03 00                	add    eax,DWORD PTR [eax]
    2698:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    269b:	07                   	pop    es
    269c:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    269d:	04 00                	add    al,0x0
    269f:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    26a2:	07                   	pop    es
    26a3:	a9 02 00 00 70       	test   eax,0x70000002
    26a8:	01 07                	add    DWORD PTR [edi],eax
    26aa:	db 02                	fild   DWORD PTR [edx]
    26ac:	00 00                	add    BYTE PTR [eax],al
    26ae:	71 01                	jno    26b1 <sysEnter_Vector-0x12d94f>
    26b0:	07                   	pop    es
    26b1:	77 04                	ja     26b7 <sysEnter_Vector-0x12d949>
    26b3:	00 00                	add    BYTE PTR [eax],al
    26b5:	00 03                	add    BYTE PTR [ebx],al
    26b7:	07                   	pop    es
    26b8:	f7 03 00 00 01 03    	test   DWORD PTR [ebx],0x3010000
    26be:	07                   	pop    es
    26bf:	88 03                	mov    BYTE PTR [ebx],al
    26c1:	00 00                	add    BYTE PTR [eax],al
    26c3:	02 03                	add    al,BYTE PTR [ebx]
    26c5:	07                   	pop    es
    26c6:	61                   	popa   
    26c7:	03 00                	add    eax,DWORD PTR [eax]
    26c9:	00 03                	add    BYTE PTR [ebx],al
    26cb:	03 07                	add    eax,DWORD PTR [edi]
    26cd:	bd 03 00 00 04       	mov    ebp,0x4000003
    26d2:	03 07                	add    eax,DWORD PTR [edi]
    26d4:	27                   	daa    
    26d5:	04 00                	add    al,0x0
    26d7:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    26dd:	07                   	pop    es
    26de:	49                   	dec    ecx
    26df:	00 00                	add    BYTE PTR [eax],al
    26e1:	00 08                	add    BYTE PTR [eax],cl
    26e3:	04 25                	add    al,0x25
    26e5:	00 00                	add    BYTE PTR [eax],al
    26e7:	00 09                	add    BYTE PTR [ecx],cl
    26e9:	d0 08                	ror    BYTE PTR [eax],1
    26eb:	00 00                	add    BYTE PTR [eax],al
    26ed:	01 0a                	add    DWORD PTR [edx],ecx
    26ef:	3a 00                	cmp    al,BYTE PTR [eax]
    26f1:	00 00                	add    BYTE PTR [eax],al
    26f3:	a8 1d                	test   al,0x1d
    26f5:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    26fb:	01 9c 99 01 00 00 0a 	add    DWORD PTR [ecx+ebx*4+0xa000001],ebx
    2702:	d5 08                	aad    0x8
    2704:	00 00                	add    BYTE PTR [eax],al
    2706:	01 0a                	add    DWORD PTR [edx],ecx
    2708:	99                   	cdq    
    2709:	01 00                	add    DWORD PTR [eax],eax
    270b:	00 02                	add    BYTE PTR [edx],al
    270d:	91                   	xchg   ecx,eax
    270e:	00 00                	add    BYTE PTR [eax],al
    2710:	08 04 3a             	or     BYTE PTR [edx+edi*1],al
    2713:	00 00                	add    BYTE PTR [eax],al
    2715:	00 0b                	add    BYTE PTR [ebx],cl
    2717:	5b                   	pop    ebx
    2718:	00 00                	add    BYTE PTR [eax],al
    271a:	00 03                	add    BYTE PTR [ebx],al
    271c:	34 56                	xor    al,0x56
    271e:	00 00                	add    BYTE PTR [eax],al
    2720:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    2726:	9f                   	lahf   
    2727:	0b 0b                	or     ecx,DWORD PTR [ebx]
    2729:	01 00                	add    DWORD PTR [eax],eax
    272b:	00 03                	add    BYTE PTR [ebx],al
    272d:	35 56 00 00 00       	xor    eax,0x56
    2732:	05 03 48 5f 00       	add    eax,0x5f4803
    2737:	9f                   	lahf   
    2738:	0b 64 00 00          	or     esp,DWORD PTR [eax+eax*1+0x0]
    273c:	00 03                	add    BYTE PTR [ebx],al
    273e:	36                   	ss
    273f:	56                   	push   esi
    2740:	00 00                	add    BYTE PTR [eax],al
    2742:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    2748:	9f                   	lahf   
    2749:	0b 53 01             	or     edx,DWORD PTR [ebx+0x1]
    274c:	00 00                	add    BYTE PTR [eax],al
    274e:	03 37                	add    esi,DWORD PTR [edi]
    2750:	7a 00                	jp     2752 <sysEnter_Vector-0x12d8ae>
    2752:	00 00                	add    BYTE PTR [eax],al
    2754:	05 03 50 5f 00       	add    eax,0x5f5003
    2759:	9f                   	lahf   
    275a:	0b 38                	or     edi,DWORD PTR [eax]
    275c:	00 00                	add    BYTE PTR [eax],al
    275e:	00 04 52             	add    BYTE PTR [edx+edx*2],al
    2761:	f4                   	hlt    
    2762:	01 00                	add    DWORD PTR [eax],eax
    2764:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    276a:	9f                   	lahf   
    276b:	08 04 6b             	or     BYTE PTR [ebx+ebp*2],al
    276e:	01 00                	add    DWORD PTR [eax],eax
    2770:	00 00                	add    BYTE PTR [eax],al
    2772:	bd 03 00 00 04       	mov    ebp,0x4000003
    2777:	00 5c 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],bl
    277b:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    277e:	83 00 00             	add    DWORD PTR [eax],0x0
    2781:	00 0c ed 08 00 00 15 	add    BYTE PTR [ebp*8+0x15000008],cl
    2788:	00 00                	add    BYTE PTR [eax],al
    278a:	00 d4                	add    ah,dl
    278c:	1d 00 9f 18 07       	sbb    eax,0x7189f00
    2791:	00 00                	add    BYTE PTR [eax],al
    2793:	7d 0f                	jge    27a4 <sysEnter_Vector-0x12d85c>
    2795:	00 00                	add    BYTE PTR [eax],al
    2797:	02 50 06             	add    dl,BYTE PTR [eax+0x6]
    279a:	00 00                	add    BYTE PTR [eax],al
    279c:	02 28                	add    ch,BYTE PTR [eax]
    279e:	30 00                	xor    BYTE PTR [eax],al
    27a0:	00 00                	add    BYTE PTR [eax],al
    27a2:	03 04 78             	add    eax,DWORD PTR [eax+edi*2]
    27a5:	05 00 00 3a 00       	add    eax,0x3a0000
    27aa:	00 00                	add    BYTE PTR [eax],al
    27ac:	04 01                	add    al,0x1
    27ae:	06                   	push   es
    27af:	75 00                	jne    27b1 <sysEnter_Vector-0x12d84f>
    27b1:	00 00                	add    BYTE PTR [eax],al
    27b3:	02 57 06             	add    dl,BYTE PTR [edi+0x6]
    27b6:	00 00                	add    BYTE PTR [eax],al
    27b8:	02 62 25             	add    ah,BYTE PTR [edx+0x25]
    27bb:	00 00                	add    BYTE PTR [eax],al
    27bd:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    27c0:	06                   	push   es
    27c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    27c2:	00 00                	add    BYTE PTR [eax],al
    27c4:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    27c7:	05 49 01 00 00       	add    eax,0x149
    27cc:	05 04 05 69 6e       	add    eax,0x6e690504
    27d1:	74 00                	je     27d3 <sysEnter_Vector-0x12d82d>
    27d3:	04 08                	add    al,0x8
    27d5:	05 00 00 00 00       	add    eax,0x0
    27da:	04 01                	add    al,0x1
    27dc:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    27e0:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    27e3:	07                   	pop    es
    27e4:	f0 00 00             	lock add BYTE PTR [eax],al
    27e7:	00 02                	add    BYTE PTR [edx],al
    27e9:	7a 00                	jp     27eb <sysEnter_Vector-0x12d815>
    27eb:	00 00                	add    BYTE PTR [eax],al
    27ed:	03 34 81             	add    esi,DWORD PTR [ecx+eax*4]
    27f0:	00 00                	add    BYTE PTR [eax],al
    27f2:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    27f5:	07                   	pop    es
    27f6:	4e                   	dec    esi
    27f7:	00 00                	add    BYTE PTR [eax],al
    27f9:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    27fc:	07                   	pop    es
    27fd:	44                   	inc    esp
    27fe:	00 00                	add    BYTE PTR [eax],al
    2800:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2803:	05 05 00 00 00       	add    eax,0x5
    2808:	04 0c                	add    al,0xc
    280a:	04 3d                	add    al,0x3d
    280c:	01 00                	add    DWORD PTR [eax],eax
    280e:	00 06                	add    BYTE PTR [esi],al
    2810:	04 a3                	add    al,0xa3
    2812:	00 00                	add    BYTE PTR [eax],al
    2814:	00 07                	add    BYTE PTR [edi],al
    2816:	3a 00                	cmp    al,BYTE PTR [eax]
    2818:	00 00                	add    BYTE PTR [eax],al
    281a:	04 01                	add    al,0x1
    281c:	02 ea                	add    ch,dl
    281e:	00 00                	add    BYTE PTR [eax],al
    2820:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2823:	07                   	pop    es
    2824:	5a                   	pop    edx
    2825:	01 00                	add    DWORD PTR [eax],eax
    2827:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    282a:	07                   	pop    es
    282b:	49                   	dec    ecx
    282c:	00 00                	add    BYTE PTR [eax],al
    282e:	00 06                	add    BYTE PTR [esi],al
    2830:	04 3a                	add    al,0x3a
    2832:	00 00                	add    BYTE PTR [eax],al
    2834:	00 08                	add    BYTE PTR [eax],cl
    2836:	dc 08                	fmul   QWORD PTR [eax]
    2838:	00 00                	add    BYTE PTR [eax],al
    283a:	01 0a                	add    DWORD PTR [edx],ecx
    283c:	5a                   	pop    edx
    283d:	00 00                	add    BYTE PTR [eax],al
    283f:	00 d4                	add    ah,dl
    2841:	1d 00 9f 5f 00       	sbb    eax,0x5f9f00
    2846:	00 00                	add    BYTE PTR [eax],al
    2848:	01 9c f5 00 00 00 09 	add    DWORD PTR [ebp+esi*8+0x9000000],ebx
    284f:	73 00                	jae    2851 <sysEnter_Vector-0x12d7af>
    2851:	01 0a                	add    DWORD PTR [edx],ecx
    2853:	f5                   	cmc    
    2854:	00 00                	add    BYTE PTR [eax],al
    2856:	00 02                	add    BYTE PTR [edx],al
    2858:	91                   	xchg   ecx,eax
    2859:	00 0a                	add    BYTE PTR [edx],cl
    285b:	69 00 01 0c 5a 00    	imul   eax,DWORD PTR [eax],0x5a0c01
    2861:	00 00                	add    BYTE PTR [eax],al
    2863:	02 91 70 00 06 04    	add    dl,BYTE PTR [ecx+0x4060070]
    2869:	9d                   	popf   
    286a:	00 00                	add    BYTE PTR [eax],al
    286c:	00 08                	add    BYTE PTR [eax],cl
    286e:	11 09                	adc    DWORD PTR [ecx],ecx
    2870:	00 00                	add    BYTE PTR [eax],al
    2872:	01 21                	add    DWORD PTR [ecx],esp
    2874:	bd 00 00 00 33       	mov    ebp,0x33000000
    2879:	1e                   	push   ds
    287a:	00 9f 3e 02 00 00    	add    BYTE PTR [edi+0x23e],bl
    2880:	01 9c d5 01 00 00 09 	add    DWORD PTR [ebp+edx*8+0x9000001],ebx
    2887:	73 74                	jae    28fd <sysEnter_Vector-0x12d703>
    2889:	72 00                	jb     288b <sysEnter_Vector-0x12d775>
    288b:	01 21                	add    DWORD PTR [ecx],esp
    288d:	bd 00 00 00 02       	mov    ebp,0x2000000
    2892:	91                   	xchg   ecx,eax
    2893:	00 09                	add    BYTE PTR [ecx],cl
    2895:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2896:	75 6d                	jne    2905 <sysEnter_Vector-0x12d6fb>
    2898:	00 01                	add    BYTE PTR [ecx],al
    289a:	21 8f 00 00 00 02    	and    DWORD PTR [edi+0x2000000],ecx
    28a0:	91                   	xchg   ecx,eax
    28a1:	04 0b                	add    al,0xb
    28a3:	fb                   	sti    
    28a4:	08 00                	or     BYTE PTR [eax],al
    28a6:	00 01                	add    BYTE PTR [ecx],al
    28a8:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    28ab:	00 00                	add    BYTE PTR [eax],al
    28ad:	02 91 08 0b 33 06    	add    dl,BYTE PTR [ecx+0x6330b08]
    28b3:	00 00                	add    BYTE PTR [eax],al
    28b5:	01 21                	add    DWORD PTR [ecx],esp
    28b7:	5a                   	pop    edx
    28b8:	00 00                	add    BYTE PTR [eax],al
    28ba:	00 02                	add    BYTE PTR [edx],al
    28bc:	91                   	xchg   ecx,eax
    28bd:	0c 0b                	or     al,0xb
    28bf:	18 09                	sbb    BYTE PTR [ecx],cl
    28c1:	00 00                	add    BYTE PTR [eax],al
    28c3:	01 21                	add    DWORD PTR [ecx],esp
    28c5:	5a                   	pop    edx
    28c6:	00 00                	add    BYTE PTR [eax],al
    28c8:	00 02                	add    BYTE PTR [edx],al
    28ca:	91                   	xchg   ecx,eax
    28cb:	10 0b                	adc    BYTE PTR [ebx],cl
    28cd:	5e                   	pop    esi
    28ce:	01 00                	add    DWORD PTR [eax],eax
    28d0:	00 01                	add    BYTE PTR [ecx],al
    28d2:	22 5a 00             	and    bl,BYTE PTR [edx+0x0]
    28d5:	00 00                	add    BYTE PTR [eax],al
    28d7:	02 91 14 0c 22 09    	add    dl,BYTE PTR [ecx+0x9220c14]
    28dd:	00 00                	add    BYTE PTR [eax],al
    28df:	01 25 e5 01 00 00    	add    DWORD PTR ds:0x1e5,esp
    28e5:	05 03 d8 5b 00       	add    eax,0x5bd803
    28ea:	9f                   	lahf   
    28eb:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    28ef:	00 01                	add    BYTE PTR [ecx],al
    28f1:	27                   	daa    
    28f2:	ea 01 00 00 03 91 9e 	jmp    0x9e91:0x3000001
    28f9:	7f 0a                	jg     2905 <sysEnter_Vector-0x12d6fb>
    28fb:	63 00                	arpl   WORD PTR [eax],ax
    28fd:	01 28                	add    DWORD PTR [eax],ebp
    28ff:	3a 00                	cmp    al,BYTE PTR [eax]
    2901:	00 00                	add    BYTE PTR [eax],al
    2903:	02 91 66 0c 00 02    	add    dl,BYTE PTR [ecx+0x2000c66]
    2909:	00 00                	add    BYTE PTR [eax],al
    290b:	01 28                	add    DWORD PTR [eax],ebp
    290d:	3a 00                	cmp    al,BYTE PTR [eax]
    290f:	00 00                	add    BYTE PTR [eax],al
    2911:	02 91 6f 0c e6 08    	add    dl,BYTE PTR [ecx+0x8e60c6f]
    2917:	00 00                	add    BYTE PTR [eax],al
    2919:	01 28                	add    DWORD PTR [eax],ebp
    291b:	3a 00                	cmp    al,BYTE PTR [eax]
    291d:	00 00                	add    BYTE PTR [eax],al
    291f:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    2925:	01 29                	add    DWORD PTR [ecx],ebp
    2927:	5a                   	pop    edx
    2928:	00 00                	add    BYTE PTR [eax],al
    292a:	00 02                	add    BYTE PTR [edx],al
    292c:	91                   	xchg   ecx,eax
    292d:	68 0d 19 1f 00       	push   0x1f190d
    2932:	9f                   	lahf   
    2933:	25 00 00 00 0c       	and    eax,0xc000000
    2938:	35 09 00 00 01       	xor    eax,0x1000009
    293d:	4c                   	dec    esp
    293e:	5a                   	pop    edx
    293f:	00 00                	add    BYTE PTR [eax],al
    2941:	00 02                	add    BYTE PTR [edx],al
    2943:	91                   	xchg   ecx,eax
    2944:	60                   	pusha  
    2945:	00 00                	add    BYTE PTR [eax],al
    2947:	0e                   	push   cs
    2948:	3a 00                	cmp    al,BYTE PTR [eax]
    294a:	00 00                	add    BYTE PTR [eax],al
    294c:	e5 01                	in     eax,0x1
    294e:	00 00                	add    BYTE PTR [eax],al
    2950:	0f af 00             	imul   eax,DWORD PTR [eax]
    2953:	00 00                	add    BYTE PTR [eax],al
    2955:	0f 00 07             	sldt   WORD PTR [edi]
    2958:	d5 01                	aad    0x1
    295a:	00 00                	add    BYTE PTR [eax],al
    295c:	0e                   	push   cs
    295d:	3a 00                	cmp    al,BYTE PTR [eax]
    295f:	00 00                	add    BYTE PTR [eax],al
    2961:	fa                   	cli    
    2962:	01 00                	add    DWORD PTR [eax],eax
    2964:	00 0f                	add    BYTE PTR [edi],cl
    2966:	af                   	scas   eax,DWORD PTR es:[edi]
    2967:	00 00                	add    BYTE PTR [eax],al
    2969:	00 41 00             	add    BYTE PTR [ecx+0x0],al
    296c:	10 3b                	adc    BYTE PTR [ebx],bh
    296e:	09 00                	or     DWORD PTR [eax],eax
    2970:	00 01                	add    BYTE PTR [ecx],al
    2972:	68 5a 00 00 00       	push   0x5a
    2977:	71 20                	jno    2999 <sysEnter_Vector-0x12d667>
    2979:	00 9f 48 04 00 00    	add    BYTE PTR [edi+0x448],bl
    297f:	01 9c 03 03 00 00 09 	add    DWORD PTR [ebx+eax*1+0x9000003],ebx
    2986:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    2989:	00 01                	add    BYTE PTR [ecx],al
    298b:	68 bd 00 00 00       	push   0xbd
    2990:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    2996:	74 00                	je     2998 <sysEnter_Vector-0x12d668>
    2998:	01 68 9d             	add    DWORD PTR [eax-0x63],ebp
    299b:	00 00                	add    BYTE PTR [eax],al
    299d:	00 02                	add    BYTE PTR [edx],al
    299f:	91                   	xchg   ecx,eax
    29a0:	04 0b                	add    al,0xb
    29a2:	31 07                	xor    DWORD PTR [edi],eax
    29a4:	00 00                	add    BYTE PTR [eax],al
    29a6:	01 68 41             	add    DWORD PTR [eax+0x41],ebp
    29a9:	00 00                	add    BYTE PTR [eax],al
    29ab:	00 02                	add    BYTE PTR [edx],al
    29ad:	91                   	xchg   ecx,eax
    29ae:	08 0a                	or     BYTE PTR [edx],cl
    29b0:	6c                   	ins    BYTE PTR es:[edi],dx
    29b1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    29b3:	00 01                	add    BYTE PTR [ecx],al
    29b5:	6a 5a                	push   0x5a
    29b7:	00 00                	add    BYTE PTR [eax],al
    29b9:	00 02                	add    BYTE PTR [edx],al
    29bb:	91                   	xchg   ecx,eax
    29bc:	6c                   	ins    BYTE PTR es:[edi],dx
    29bd:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    29c0:	6d                   	ins    DWORD PTR es:[edi],dx
    29c1:	00 01                	add    BYTE PTR [ecx],al
    29c3:	6b b6 00 00 00 02 91 	imul   esi,DWORD PTR [esi+0x2000000],0xffffff91
    29ca:	68 0a 69 00 01       	push   0x100690a
    29cf:	6c                   	ins    BYTE PTR es:[edi],dx
    29d0:	5a                   	pop    edx
    29d1:	00 00                	add    BYTE PTR [eax],al
    29d3:	00 02                	add    BYTE PTR [edx],al
    29d5:	91                   	xchg   ecx,eax
    29d6:	64                   	fs
    29d7:	0c fb                	or     al,0xfb
    29d9:	08 00                	or     BYTE PTR [eax],al
    29db:	00 01                	add    BYTE PTR [ecx],al
    29dd:	6c                   	ins    BYTE PTR es:[edi],dx
    29de:	5a                   	pop    edx
    29df:	00 00                	add    BYTE PTR [eax],al
    29e1:	00 02                	add    BYTE PTR [edx],al
    29e3:	91                   	xchg   ecx,eax
    29e4:	60                   	pusha  
    29e5:	0a 73 74             	or     dh,BYTE PTR [ebx+0x74]
    29e8:	72 00                	jb     29ea <sysEnter_Vector-0x12d616>
    29ea:	01 6d bd             	add    DWORD PTR [ebp-0x43],ebp
    29ed:	00 00                	add    BYTE PTR [eax],al
    29ef:	00 02                	add    BYTE PTR [edx],al
    29f1:	91                   	xchg   ecx,eax
    29f2:	5c                   	pop    esp
    29f3:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    29f6:	01 6e 9d             	add    DWORD PTR [esi-0x63],ebp
    29f9:	00 00                	add    BYTE PTR [eax],al
    29fb:	00 02                	add    BYTE PTR [edx],al
    29fd:	91                   	xchg   ecx,eax
    29fe:	58                   	pop    eax
    29ff:	0c 47                	or     al,0x47
    2a01:	0a 00                	or     al,BYTE PTR [eax]
    2a03:	00 01                	add    BYTE PTR [ecx],al
    2a05:	70 5a                	jo     2a61 <sysEnter_Vector-0x12d59f>
    2a07:	00 00                	add    BYTE PTR [eax],al
    2a09:	00 02                	add    BYTE PTR [edx],al
    2a0b:	91                   	xchg   ecx,eax
    2a0c:	54                   	push   esp
    2a0d:	0c 29                	or     al,0x29
    2a0f:	09 00                	or     DWORD PTR [eax],eax
    2a11:	00 01                	add    BYTE PTR [ecx],al
    2a13:	72 5a                	jb     2a6f <sysEnter_Vector-0x12d591>
    2a15:	00 00                	add    BYTE PTR [eax],al
    2a17:	00 02                	add    BYTE PTR [edx],al
    2a19:	91                   	xchg   ecx,eax
    2a1a:	50                   	push   eax
    2a1b:	0c 18                	or     al,0x18
    2a1d:	09 00                	or     DWORD PTR [eax],eax
    2a1f:	00 01                	add    BYTE PTR [ecx],al
    2a21:	73 5a                	jae    2a7d <sysEnter_Vector-0x12d583>
    2a23:	00 00                	add    BYTE PTR [eax],al
    2a25:	00 02                	add    BYTE PTR [edx],al
    2a27:	91                   	xchg   ecx,eax
    2a28:	4c                   	dec    esp
    2a29:	0c 00                	or     al,0x0
    2a2b:	09 00                	or     DWORD PTR [eax],eax
    2a2d:	00 01                	add    BYTE PTR [ecx],al
    2a2f:	75 5a                	jne    2a8b <sysEnter_Vector-0x12d575>
    2a31:	00 00                	add    BYTE PTR [eax],al
    2a33:	00 02                	add    BYTE PTR [edx],al
    2a35:	91                   	xchg   ecx,eax
    2a36:	48                   	dec    eax
    2a37:	11 0a                	adc    DWORD PTR [edx],ecx
    2a39:	09 00                	or     DWORD PTR [eax],eax
    2a3b:	00 01                	add    BYTE PTR [ecx],al
    2a3d:	7f b5                	jg     29f4 <sysEnter_Vector-0x12d60c>
    2a3f:	20 00                	and    BYTE PTR [eax],al
    2a41:	9f                   	lahf   
    2a42:	12 5a 23             	adc    bl,BYTE PTR [edx+0x23]
    2a45:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    2a4b:	eb 02                	jmp    2a4f <sysEnter_Vector-0x12d5b1>
    2a4d:	00 00                	add    BYTE PTR [eax],al
    2a4f:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    2a52:	00 01                	add    BYTE PTR [ecx],al
    2a54:	e0 03                	loopne 2a59 <sysEnter_Vector-0x12d5a7>
    2a56:	03 00                	add    eax,DWORD PTR [eax]
    2a58:	00 02                	add    BYTE PTR [edx],al
    2a5a:	91                   	xchg   ecx,eax
    2a5b:	44                   	inc    esp
    2a5c:	00 0d 7a 23 00 9f    	add    BYTE PTR ds:0x9f00237a,cl
    2a62:	1b 00                	sbb    eax,DWORD PTR [eax]
    2a64:	00 00                	add    BYTE PTR [eax],al
    2a66:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    2a69:	00 01                	add    BYTE PTR [ecx],al
    2a6b:	e3 09                	jecxz  2a76 <sysEnter_Vector-0x12d58a>
    2a6d:	03 00                	add    eax,DWORD PTR [eax]
    2a6f:	00 02                	add    BYTE PTR [edx],al
    2a71:	91                   	xchg   ecx,eax
    2a72:	40                   	inc    eax
    2a73:	00 00                	add    BYTE PTR [eax],al
    2a75:	06                   	push   es
    2a76:	04 8f                	add    al,0x8f
    2a78:	00 00                	add    BYTE PTR [eax],al
    2a7a:	00 06                	add    BYTE PTR [esi],al
    2a7c:	04 5a                	add    al,0x5a
    2a7e:	00 00                	add    BYTE PTR [eax],al
    2a80:	00 13                	add    BYTE PTR [ebx],dl
    2a82:	3c 09                	cmp    al,0x9
    2a84:	00 00                	add    BYTE PTR [eax],al
    2a86:	01 15 01 5a 00 00    	add    DWORD PTR ds:0x5a01,edx
    2a8c:	00 b9 24 00 9f 33    	add    BYTE PTR [ecx+0x339f0024],bh
    2a92:	00 00                	add    BYTE PTR [eax],al
    2a94:	00 01                	add    BYTE PTR [ecx],al
    2a96:	9c                   	pushf  
    2a97:	65 03 00             	add    eax,DWORD PTR gs:[eax]
    2a9a:	00 14 62             	add    BYTE PTR [edx+eiz*2],dl
    2a9d:	75 66                	jne    2b05 <sysEnter_Vector-0x12d4fb>
    2a9f:	00 01                	add    BYTE PTR [ecx],al
    2aa1:	15 01 bd 00 00       	adc    eax,0xbd01
    2aa6:	00 02                	add    BYTE PTR [edx],al
    2aa8:	91                   	xchg   ecx,eax
    2aa9:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    2aac:	6d                   	ins    DWORD PTR es:[edi],dx
    2aad:	74 00                	je     2aaf <sysEnter_Vector-0x12d551>
    2aaf:	01 15 01 9d 00 00    	add    DWORD PTR ds:0x9d01,edx
    2ab5:	00 02                	add    BYTE PTR [edx],al
    2ab7:	91                   	xchg   ecx,eax
    2ab8:	04 15                	add    al,0x15
    2aba:	16                   	push   ss
    2abb:	31 07                	xor    DWORD PTR [edi],eax
    2abd:	00 00                	add    BYTE PTR [eax],al
    2abf:	01 17                	add    DWORD PTR [edi],edx
    2ac1:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    2ac4:	00 00                	add    BYTE PTR [eax],al
    2ac6:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    2acc:	01 18                	add    DWORD PTR [eax],ebx
    2ace:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    2ad1:	00 00                	add    BYTE PTR [eax],al
    2ad3:	02 91 6c 00 18 5b    	add    dl,BYTE PTR [ecx+0x5b18006c]
    2ad9:	00 00                	add    BYTE PTR [eax],al
    2adb:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2ade:	76 00                	jbe    2ae0 <sysEnter_Vector-0x12d520>
    2ae0:	00 00                	add    BYTE PTR [eax],al
    2ae2:	05 03 44 5f 00       	add    eax,0x5f4403
    2ae7:	9f                   	lahf   
    2ae8:	18 0b                	sbb    BYTE PTR [ebx],cl
    2aea:	01 00                	add    DWORD PTR [eax],eax
    2aec:	00 04 35 76 00 00 00 	add    BYTE PTR [esi*1+0x76],al
    2af3:	05 03 48 5f 00       	add    eax,0x5f4803
    2af8:	9f                   	lahf   
    2af9:	18 64 00 00          	sbb    BYTE PTR [eax+eax*1+0x0],ah
    2afd:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2b00:	76 00                	jbe    2b02 <sysEnter_Vector-0x12d4fe>
    2b02:	00 00                	add    BYTE PTR [eax],al
    2b04:	05 03 40 5f 00       	add    eax,0x5f4003
    2b09:	9f                   	lahf   
    2b0a:	18 53 01             	sbb    BYTE PTR [ebx+0x1],dl
    2b0d:	00 00                	add    BYTE PTR [eax],al
    2b0f:	04 37                	add    al,0x37
    2b11:	8f 00                	pop    DWORD PTR [eax]
    2b13:	00 00                	add    BYTE PTR [eax],al
    2b15:	05 03 50 5f 00       	add    eax,0x5f5003
    2b1a:	9f                   	lahf   
    2b1b:	18 38                	sbb    BYTE PTR [eax],bh
    2b1d:	00 00                	add    BYTE PTR [eax],al
    2b1f:	00 05 52 ba 03 00    	add    BYTE PTR ds:0x3ba52,al
    2b25:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    2b2b:	9f                   	lahf   
    2b2c:	06                   	push   es
    2b2d:	04 bd                	add    al,0xbd
    2b2f:	00 00                	add    BYTE PTR [eax],al
    2b31:	00 00                	add    BYTE PTR [eax],al
    2b33:	58                   	pop    eax
    2b34:	04 00                	add    al,0x0
    2b36:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b39:	b2 0d                	mov    dl,0xd
    2b3b:	00 00                	add    BYTE PTR [eax],al
    2b3d:	04 01                	add    al,0x1
    2b3f:	83 00 00             	add    DWORD PTR [eax],0x0
    2b42:	00 0c a6             	add    BYTE PTR [esi+eiz*4],cl
    2b45:	09 00                	or     DWORD PTR [eax],eax
    2b47:	00 15 00 00 00 ec    	add    BYTE PTR ds:0xec000000,dl
    2b4d:	24 00                	and    al,0x0
    2b4f:	9f                   	lahf   
    2b50:	84 00                	test   BYTE PTR [eax],al
    2b52:	00 00                	add    BYTE PTR [eax],al
    2b54:	5f                   	pop    edi
    2b55:	11 00                	adc    DWORD PTR [eax],eax
    2b57:	00 02                	add    BYTE PTR [edx],al
    2b59:	01 06                	add    DWORD PTR [esi],eax
    2b5b:	75 00                	jne    2b5d <sysEnter_Vector-0x12d4a3>
    2b5d:	00 00                	add    BYTE PTR [eax],al
    2b5f:	02 01                	add    al,BYTE PTR [ecx]
    2b61:	06                   	push   es
    2b62:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2b63:	00 00                	add    BYTE PTR [eax],al
    2b65:	00 02                	add    BYTE PTR [edx],al
    2b67:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    2b6d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2b74:	02 08                	add    cl,BYTE PTR [eax]
    2b76:	05 00 00 00 00       	add    eax,0x0
    2b7b:	02 01                	add    al,BYTE PTR [ecx]
    2b7d:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    2b81:	00 02                	add    BYTE PTR [edx],al
    2b83:	02 07                	add    al,BYTE PTR [edi]
    2b85:	f0 00 00             	lock add BYTE PTR [eax],al
    2b88:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    2b8b:	00 00                	add    BYTE PTR [eax],al
    2b8d:	00 02                	add    BYTE PTR [edx],al
    2b8f:	34 61                	xor    al,0x61
    2b91:	00 00                	add    BYTE PTR [eax],al
    2b93:	00 02                	add    BYTE PTR [edx],al
    2b95:	04 07                	add    al,0x7
    2b97:	4e                   	dec    esi
    2b98:	00 00                	add    BYTE PTR [eax],al
    2b9a:	00 04 4a             	add    BYTE PTR [edx+ecx*2],al
    2b9d:	09 00                	or     DWORD PTR [eax],eax
    2b9f:	00 02                	add    BYTE PTR [edx],al
    2ba1:	37                   	aaa    
    2ba2:	73 00                	jae    2ba4 <sysEnter_Vector-0x12d45c>
    2ba4:	00 00                	add    BYTE PTR [eax],al
    2ba6:	02 08                	add    cl,BYTE PTR [eax]
    2ba8:	07                   	pop    es
    2ba9:	44                   	inc    esp
    2baa:	00 00                	add    BYTE PTR [eax],al
    2bac:	00 04 23             	add    BYTE PTR [ebx+eiz*1],al
    2baf:	05 00 00 03 d8       	add    eax,0xd8030000
    2bb4:	61                   	popa   
    2bb5:	00 00                	add    BYTE PTR [eax],al
    2bb7:	00 02                	add    BYTE PTR [edx],al
    2bb9:	04 05                	add    al,0x5
    2bbb:	05 00 00 00 02       	add    eax,0x2000000
    2bc0:	0c 04                	or     al,0x4
    2bc2:	3d 01 00 00 05       	cmp    eax,0x5000001
    2bc7:	04 99                	add    al,0x99
    2bc9:	00 00                	add    BYTE PTR [eax],al
    2bcb:	00 06                	add    BYTE PTR [esi],al
    2bcd:	25 00 00 00 02       	and    eax,0x2000000
    2bd2:	01 02                	add    DWORD PTR [edx],eax
    2bd4:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    2bdb:	5a                   	pop    edx
    2bdc:	01 00                	add    DWORD PTR [eax],eax
    2bde:	00 07                	add    BYTE PTR [edi],al
    2be0:	04 02                	add    al,0x2
    2be2:	04 07                	add    al,0x7
    2be4:	49                   	dec    ecx
    2be5:	00 00                	add    BYTE PTR [eax],al
    2be7:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    2bed:	00 08                	add    BYTE PTR [eax],cl
    2bef:	21 0a                	and    DWORD PTR [edx],ecx
    2bf1:	00 00                	add    BYTE PTR [eax],al
    2bf3:	0c 04                	or     al,0x4
    2bf5:	17                   	pop    ss
    2bf6:	ec                   	in     al,dx
    2bf7:	00 00                	add    BYTE PTR [eax],al
    2bf9:	00 09                	add    BYTE PTR [ecx],cl
    2bfb:	63 09                	arpl   WORD PTR [ecx],cx
    2bfd:	00 00                	add    BYTE PTR [eax],al
    2bff:	04 19                	add    al,0x19
    2c01:	ec                   	in     al,dx
    2c02:	00 00                	add    BYTE PTR [eax],al
    2c04:	00 00                	add    BYTE PTR [eax],al
    2c06:	09 98 07 00 00 04    	or     DWORD PTR [eax+0x4000007],ebx
    2c0c:	19 ec                	sbb    esp,ebp
    2c0e:	00 00                	add    BYTE PTR [eax],al
    2c10:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2c13:	19 0a                	sbb    DWORD PTR [edx],ecx
    2c15:	00 00                	add    BYTE PTR [eax],al
    2c17:	04 1a                	add    al,0x1a
    2c19:	ac                   	lods   al,BYTE PTR ds:[esi]
    2c1a:	00 00                	add    BYTE PTR [eax],al
    2c1c:	00 08                	add    BYTE PTR [eax],cl
    2c1e:	00 05 04 bb 00 00    	add    BYTE PTR ds:0xbb04,al
    2c24:	00 04 d5 09 00 00 04 	add    BYTE PTR [edx*8+0x4000009],al
    2c2b:	1b bb 00 00 00 08    	sbb    edi,DWORD PTR [ebx+0x8000000]
    2c31:	81 09 00 00 14 05    	or     DWORD PTR [ecx],0x5140000
    2c37:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    2c39:	01 00                	add    DWORD PTR [eax],eax
    2c3b:	00 09                	add    BYTE PTR [ecx],cl
    2c3d:	7a 09                	jp     2c48 <sysEnter_Vector-0x12d3b8>
    2c3f:	00 00                	add    BYTE PTR [eax],al
    2c41:	05 1d f2 00 00       	add    eax,0xf21d
    2c46:	00 00                	add    BYTE PTR [eax],al
    2c48:	09 44 09 00          	or     DWORD PTR [ecx+ecx*1+0x0],eax
    2c4c:	00 05 1e 61 00 00    	add    BYTE PTR ds:0x611e,al
    2c52:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2c55:	7c 0a                	jl     2c61 <sysEnter_Vector-0x12d39f>
    2c57:	00 00                	add    BYTE PTR [eax],al
    2c59:	05 1f 5f 01 00       	add    eax,0x15f1f
    2c5e:	00 10                	add    BYTE PTR [eax],dl
    2c60:	00 08                	add    BYTE PTR [eax],cl
    2c62:	b2 09                	mov    dl,0x9
    2c64:	00 00                	add    BYTE PTR [eax],al
    2c66:	0c 05                	or     al,0x5
    2c68:	37                   	aaa    
    2c69:	5f                   	pop    edi
    2c6a:	01 00                	add    DWORD PTR [eax],eax
    2c6c:	00 09                	add    BYTE PTR [ecx],cl
    2c6e:	9f                   	lahf   
    2c6f:	09 00                	or     DWORD PTR [eax],eax
    2c71:	00 05 39 b5 00 00    	add    BYTE PTR ds:0xb539,al
    2c77:	00 00                	add    BYTE PTR [eax],al
    2c79:	09 83 0a 00 00 05    	or     DWORD PTR [ebx+0x500000a],eax
    2c7f:	3a 68 02             	cmp    ch,BYTE PTR [eax+0x2]
    2c82:	00 00                	add    BYTE PTR [eax],al
    2c84:	04 09                	add    al,0x9
    2c86:	94                   	xchg   esp,eax
    2c87:	0a 00                	or     al,BYTE PTR [eax]
    2c89:	00 05 3b 5f 01 00    	add    BYTE PTR ds:0x15f3b,al
    2c8f:	00 08                	add    BYTE PTR [eax],cl
    2c91:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    2c97:	00 08                	add    BYTE PTR [eax],cl
    2c99:	8f 09                	(bad)  
    2c9b:	00 00                	add    BYTE PTR [eax],al
    2c9d:	0c 05                	or     al,0x5
    2c9f:	22 96 01 00 00 09    	and    dl,BYTE PTR [esi+0x9000001]
    2ca5:	30 0a                	xor    BYTE PTR [edx],cl
    2ca7:	00 00                	add    BYTE PTR [eax],al
    2ca9:	05 24 5f 01 00       	add    eax,0x15f24
    2cae:	00 00                	add    BYTE PTR [eax],al
    2cb0:	09 73 09             	or     DWORD PTR [ebx+0x9],esi
    2cb3:	00 00                	add    BYTE PTR [eax],al
    2cb5:	05 25 96 01 00       	add    eax,0x19625
    2cba:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2cbd:	53                   	push   ebx
    2cbe:	09 00                	or     DWORD PTR [eax],eax
    2cc0:	00 05 26 3a 00 00    	add    BYTE PTR ds:0x3a26,al
    2cc6:	00 08                	add    BYTE PTR [eax],cl
    2cc8:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    2cce:	00 08                	add    BYTE PTR [eax],cl
    2cd0:	85 0a                	test   DWORD PTR [edx],ecx
    2cd2:	00 00                	add    BYTE PTR [eax],al
    2cd4:	24 05                	and    al,0x5
    2cd6:	29 09                	sub    DWORD PTR [ecx],ecx
    2cd8:	02 00                	add    al,BYTE PTR [eax]
    2cda:	00 09                	add    BYTE PTR [ecx],cl
    2cdc:	13 0a                	adc    ecx,DWORD PTR [edx]
    2cde:	00 00                	add    BYTE PTR [eax],al
    2ce0:	05 2b 61 00 00       	add    eax,0x612b
    2ce5:	00 00                	add    BYTE PTR [eax],al
    2ce7:	09 53 0a             	or     DWORD PTR [ebx+0xa],edx
    2cea:	00 00                	add    BYTE PTR [eax],al
    2cec:	05 2c 4f 00 00       	add    eax,0x4f2c
    2cf1:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2cf4:	ef                   	out    dx,eax
    2cf5:	09 00                	or     DWORD PTR [eax],eax
    2cf7:	00 05 2d 4f 00 00    	add    BYTE PTR ds:0x4f2d,al
    2cfd:	00 06                	add    BYTE PTR [esi],al
    2cff:	09 4d 0a             	or     DWORD PTR [ebp+0xa],ecx
    2d02:	00 00                	add    BYTE PTR [eax],al
    2d04:	05 2e 61 00 00       	add    eax,0x612e
    2d09:	00 08                	add    BYTE PTR [eax],cl
    2d0b:	09 cf                	or     edi,ecx
    2d0d:	09 00                	or     DWORD PTR [eax],eax
    2d0f:	00 05 2f 61 00 00    	add    BYTE PTR ds:0x612f,al
    2d15:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2d18:	45                   	inc    ebp
    2d19:	0a 00                	or     al,BYTE PTR [eax]
    2d1b:	00 05 30 61 00 00    	add    BYTE PTR ds:0x6130,al
    2d21:	00 10                	add    BYTE PTR [eax],dl
    2d23:	09 2b                	or     DWORD PTR [ebx],ebp
    2d25:	0a 00                	or     al,BYTE PTR [eax]
    2d27:	00 05 31 52 02 00    	add    BYTE PTR ds:0x25231,al
    2d2d:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    2d30:	8d 09                	lea    ecx,[ecx]
    2d32:	00 00                	add    BYTE PTR [eax],al
    2d34:	05 32 65 01 00       	add    eax,0x16532
    2d39:	00 18                	add    BYTE PTR [eax],bl
    2d3b:	00 08                	add    BYTE PTR [eax],cl
    2d3d:	de 09                	fimul  WORD PTR [ecx]
    2d3f:	00 00                	add    BYTE PTR [eax],al
    2d41:	14 05                	adc    al,0x5
    2d43:	3e                   	ds
    2d44:	52                   	push   edx
    2d45:	02 00                	add    al,BYTE PTR [eax]
    2d47:	00 09                	add    BYTE PTR [ecx],cl
    2d49:	ac                   	lods   al,BYTE PTR ds:[esi]
    2d4a:	0a 00                	or     al,BYTE PTR [eax]
    2d4c:	00 05 40 82 02 00    	add    BYTE PTR ds:0x28240,al
    2d52:	00 00                	add    BYTE PTR [eax],al
    2d54:	09 68 09             	or     DWORD PTR [eax+0x9],ebp
    2d57:	00 00                	add    BYTE PTR [eax],al
    2d59:	05 41 82 02 00       	add    eax,0x28241
    2d5e:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2d61:	c9                   	leave  
    2d62:	09 00                	or     DWORD PTR [eax],eax
    2d64:	00 05 42 82 02 00    	add    BYTE PTR ds:0x28242,al
    2d6a:	00 08                	add    BYTE PTR [eax],cl
    2d6c:	09 5d 09             	or     DWORD PTR [ebp+0x9],ebx
    2d6f:	00 00                	add    BYTE PTR [eax],al
    2d71:	05 43 9c 02 00       	add    eax,0x29c43
    2d76:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2d79:	98                   	cwde   
    2d7a:	09 00                	or     DWORD PTR [eax],eax
    2d7c:	00 05 44 c5 02 00    	add    BYTE PTR ds:0x2c544,al
    2d82:	00 10                	add    BYTE PTR [eax],dl
    2d84:	00 05 04 58 02 00    	add    BYTE PTR ds:0x25804,al
    2d8a:	00 06                	add    BYTE PTR [esi],al
    2d8c:	09 02                	or     DWORD PTR [edx],eax
    2d8e:	00 00                	add    BYTE PTR [eax],al
    2d90:	04 67                	add    al,0x67
    2d92:	0a 00                	or     al,BYTE PTR [eax]
    2d94:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    2d9a:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    2da0:	00 0a                	add    BYTE PTR [edx],cl
    2da2:	3a 00                	cmp    al,BYTE PTR [eax]
    2da4:	00 00                	add    BYTE PTR [eax],al
    2da6:	82                   	(bad)  
    2da7:	02 00                	add    al,BYTE PTR [eax]
    2da9:	00 0b                	add    BYTE PTR [ebx],cl
    2dab:	68 02 00 00 0b       	push   0xb000002
    2db0:	5f                   	pop    edi
    2db1:	01 00                	add    DWORD PTR [eax],eax
    2db3:	00 00                	add    BYTE PTR [eax],al
    2db5:	05 04 6e 02 00       	add    eax,0x26e04
    2dba:	00 0a                	add    BYTE PTR [edx],cl
    2dbc:	3a 00                	cmp    al,BYTE PTR [eax]
    2dbe:	00 00                	add    BYTE PTR [eax],al
    2dc0:	9c                   	pushf  
    2dc1:	02 00                	add    al,BYTE PTR [eax]
    2dc3:	00 0b                	add    BYTE PTR [ebx],cl
    2dc5:	68 02 00 00 0b       	push   0xb000002
    2dca:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    2dcd:	00 00                	add    BYTE PTR [eax],al
    2dcf:	05 04 88 02 00       	add    eax,0x28804
    2dd4:	00 0a                	add    BYTE PTR [edx],cl
    2dd6:	3a 00                	cmp    al,BYTE PTR [eax]
    2dd8:	00 00                	add    BYTE PTR [eax],al
    2dda:	c5 02                	lds    eax,FWORD PTR [edx]
    2ddc:	00 00                	add    BYTE PTR [eax],al
    2dde:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    2de1:	00 00                	add    BYTE PTR [eax],al
    2de3:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    2de6:	00 00                	add    BYTE PTR [eax],al
    2de8:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    2deb:	00 00                	add    BYTE PTR [eax],al
    2ded:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    2df0:	00 00                	add    BYTE PTR [eax],al
    2df2:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    2df5:	00 00                	add    BYTE PTR [eax],al
    2df7:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    2dfd:	00 04 3e             	add    BYTE PTR [esi+edi*1],al
    2e00:	0a 00                	or     al,BYTE PTR [eax]
    2e02:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    2e08:	00 08                	add    BYTE PTR [eax],cl
    2e0a:	77 0a                	ja     2e16 <sysEnter_Vector-0x12d1ea>
    2e0c:	00 00                	add    BYTE PTR [eax],al
    2e0e:	10 05 4f 07 03 00    	adc    BYTE PTR ds:0x3074f,al
    2e14:	00 09                	add    BYTE PTR [ecx],cl
    2e16:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2e17:	0a 00                	or     al,BYTE PTR [eax]
    2e19:	00 05 51 b5 00 00    	add    BYTE PTR ds:0xb551,al
    2e1f:	00 00                	add    BYTE PTR [eax],al
    2e21:	09 9d 0a 00 00 05    	or     DWORD PTR [ebp+0x500000a],ebx
    2e27:	52                   	push   edx
    2e28:	68 02 00 00 04       	push   0x4000002
    2e2d:	09 39                	or     DWORD PTR [ecx],edi
    2e2f:	0a 00                	or     al,BYTE PTR [eax]
    2e31:	00 05 53 07 03 00    	add    BYTE PTR ds:0x30753,al
    2e37:	00 08                	add    BYTE PTR [eax],cl
    2e39:	00 08                	add    BYTE PTR [eax],cl
    2e3b:	b9 09 00 00 08       	mov    ecx,0x8000009
    2e40:	05 49 2c 03 00       	add    eax,0x32c49
    2e45:	00 09                	add    BYTE PTR [ecx],cl
    2e47:	4c                   	dec    esp
    2e48:	04 00                	add    al,0x0
    2e4a:	00 05 4b 56 03 00    	add    BYTE PTR ds:0x3564b,al
    2e50:	00 00                	add    BYTE PTR [eax],al
    2e52:	09 9e 03 00 00 05    	or     DWORD PTR [esi+0x5000003],ebx
    2e58:	4c                   	dec    esp
    2e59:	7a 03                	jp     2e5e <sysEnter_Vector-0x12d1a2>
    2e5b:	00 00                	add    BYTE PTR [eax],al
    2e5d:	04 00                	add    al,0x0
    2e5f:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    2e62:	00 00                	add    BYTE PTR [eax],al
    2e64:	4a                   	dec    edx
    2e65:	03 00                	add    eax,DWORD PTR [eax]
    2e67:	00 0b                	add    BYTE PTR [ebx],cl
    2e69:	4a                   	dec    edx
    2e6a:	03 00                	add    eax,DWORD PTR [eax]
    2e6c:	00 0b                	add    BYTE PTR [ebx],cl
    2e6e:	b5 00                	mov    ch,0x0
    2e70:	00 00                	add    BYTE PTR [eax],al
    2e72:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    2e75:	00 00                	add    BYTE PTR [eax],al
    2e77:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2e7a:	00 00                	add    BYTE PTR [eax],al
    2e7c:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    2e82:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    2e88:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    2e8e:	00 0a                	add    BYTE PTR [edx],cl
    2e90:	7a 00                	jp     2e92 <sysEnter_Vector-0x12d16e>
    2e92:	00 00                	add    BYTE PTR [eax],al
    2e94:	7a 03                	jp     2e99 <sysEnter_Vector-0x12d167>
    2e96:	00 00                	add    BYTE PTR [eax],al
    2e98:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    2e9b:	00 00                	add    BYTE PTR [eax],al
    2e9d:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    2ea3:	7a 00                	jp     2ea5 <sysEnter_Vector-0x12d15b>
    2ea5:	00 00                	add    BYTE PTR [eax],al
    2ea7:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2eaa:	00 00                	add    BYTE PTR [eax],al
    2eac:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    2eb2:	00 04 f9             	add    BYTE PTR [ecx+edi*8],al
    2eb5:	09 00                	or     DWORD PTR [eax],eax
    2eb7:	00 05 4d 07 03 00    	add    BYTE PTR ds:0x3074d,al
    2ebd:	00 0c 8b             	add    BYTE PTR [ebx+ecx*4],cl
    2ec0:	0a 00                	or     al,BYTE PTR [eax]
    2ec2:	00 01                	add    BYTE PTR [ecx],al
    2ec4:	43                   	inc    ebx
    2ec5:	ec                   	in     al,dx
    2ec6:	24 00                	and    al,0x0
    2ec8:	9f                   	lahf   
    2ec9:	84 00                	test   BYTE PTR [eax],al
    2ecb:	00 00                	add    BYTE PTR [eax],al
    2ecd:	01 9c bd 03 00 00 0d 	add    DWORD PTR [ebp+edi*4+0xd000003],ebx
    2ed4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2ed5:	09 00                	or     DWORD PTR [eax],eax
    2ed7:	00 01                	add    BYTE PTR [ecx],al
    2ed9:	45                   	inc    ebp
    2eda:	bd 03 00 00 02       	mov    ebp,0x2000003
    2edf:	91                   	xchg   ecx,eax
    2ee0:	67 0d 0b 0a 00 00    	addr16 or eax,0xa0b
    2ee6:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    2ee9:	00 00                	add    BYTE PTR [eax],al
    2eeb:	00 02                	add    BYTE PTR [edx],al
    2eed:	91                   	xchg   ecx,eax
    2eee:	6c                   	ins    BYTE PTR es:[edi],dx
    2eef:	00 0e                	add    BYTE PTR [esi],cl
    2ef1:	25 00 00 00 cd       	and    eax,0xcd000000
    2ef6:	03 00                	add    eax,DWORD PTR [eax]
    2ef8:	00 0f                	add    BYTE PTR [edi],cl
    2efa:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2efb:	00 00                	add    BYTE PTR [eax],al
    2efd:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2f00:	10 5b 00             	adc    BYTE PTR [ebx+0x0],bl
    2f03:	00 00                	add    BYTE PTR [eax],al
    2f05:	06                   	push   es
    2f06:	34 56                	xor    al,0x56
    2f08:	00 00                	add    BYTE PTR [eax],al
    2f0a:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    2f10:	9f                   	lahf   
    2f11:	10 0b                	adc    BYTE PTR [ebx],cl
    2f13:	01 00                	add    DWORD PTR [eax],eax
    2f15:	00 06                	add    BYTE PTR [esi],al
    2f17:	35 56 00 00 00       	xor    eax,0x56
    2f1c:	05 03 48 5f 00       	add    eax,0x5f4803
    2f21:	9f                   	lahf   
    2f22:	10 64 00 00          	adc    BYTE PTR [eax+eax*1+0x0],ah
    2f26:	00 06                	add    BYTE PTR [esi],al
    2f28:	36                   	ss
    2f29:	56                   	push   esi
    2f2a:	00 00                	add    BYTE PTR [eax],al
    2f2c:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    2f32:	9f                   	lahf   
    2f33:	10 53 01             	adc    BYTE PTR [ebx+0x1],dl
    2f36:	00 00                	add    BYTE PTR [eax],al
    2f38:	06                   	push   es
    2f39:	37                   	aaa    
    2f3a:	85 00                	test   DWORD PTR [eax],eax
    2f3c:	00 00                	add    BYTE PTR [eax],al
    2f3e:	05 03 50 5f 00       	add    eax,0x5f5003
    2f43:	9f                   	lahf   
    2f44:	10 38                	adc    BYTE PTR [eax],bh
    2f46:	00 00                	add    BYTE PTR [eax],al
    2f48:	00 07                	add    BYTE PTR [edi],al
    2f4a:	52                   	push   edx
    2f4b:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    2f4e:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    2f54:	9f                   	lahf   
    2f55:	05 04 b5 00 00       	add    eax,0xb504
    2f5a:	00 10                	add    BYTE PTR [eax],dl
    2f5c:	39 0a                	cmp    DWORD PTR [edx],ecx
    2f5e:	00 00                	add    BYTE PTR [eax],al
    2f60:	01 0e                	add    DWORD PTR [esi],ecx
    2f62:	80 03 00             	add    BYTE PTR [ebx],0x0
    2f65:	00 05 03 78 5f 00    	add    BYTE PTR ds:0x5f7803,al
    2f6b:	9f                   	lahf   
    2f6c:	10 5a 0a             	adc    BYTE PTR [edx+0xa],bl
    2f6f:	00 00                	add    BYTE PTR [eax],al
    2f71:	01 0f                	add    DWORD PTR [edi],ecx
    2f73:	5d                   	pop    ebp
    2f74:	02 00                	add    al,BYTE PTR [eax]
    2f76:	00 05 03 80 5d 00    	add    BYTE PTR ds:0x5d8003,al
    2f7c:	9f                   	lahf   
    2f7d:	10 6f 0a             	adc    BYTE PTR [edi+0xa],ch
    2f80:	00 00                	add    BYTE PTR [eax],al
    2f82:	01 10                	add    DWORD PTR [eax],edx
    2f84:	cb                   	retf   
    2f85:	02 00                	add    al,BYTE PTR [eax]
    2f87:	00 05 03 80 5f 00    	add    BYTE PTR ds:0x5f8003,al
    2f8d:	9f                   	lahf   
    2f8e:	00 ad 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],ch
    2f94:	00 7a 0e             	add    BYTE PTR [edx+0xe],bh
    2f97:	00 00                	add    BYTE PTR [eax],al
    2f99:	04 01                	add    al,0x1
    2f9b:	83 00 00             	add    DWORD PTR [eax],0x0
    2f9e:	00 0c ce             	add    BYTE PTR [esi+ecx*8],cl
    2fa1:	0a 00                	or     al,BYTE PTR [eax]
    2fa3:	00 15 00 00 00 70    	add    BYTE PTR ds:0x70000000,dl
    2fa9:	25 00 9f eb 00       	and    eax,0xeb9f00
    2fae:	00 00                	add    BYTE PTR [eax],al
    2fb0:	5d                   	pop    ebp
    2fb1:	12 00                	adc    al,BYTE PTR [eax]
    2fb3:	00 02                	add    BYTE PTR [edx],al
    2fb5:	01 06                	add    DWORD PTR [esi],eax
    2fb7:	75 00                	jne    2fb9 <sysEnter_Vector-0x12d047>
    2fb9:	00 00                	add    BYTE PTR [eax],al
    2fbb:	02 01                	add    al,BYTE PTR [ecx]
    2fbd:	06                   	push   es
    2fbe:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2fbf:	00 00                	add    BYTE PTR [eax],al
    2fc1:	00 02                	add    BYTE PTR [edx],al
    2fc3:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    2fc9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2fd0:	02 08                	add    cl,BYTE PTR [eax]
    2fd2:	05 00 00 00 00       	add    eax,0x0
    2fd7:	02 01                	add    al,BYTE PTR [ecx]
    2fd9:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    2fdd:	00 02                	add    BYTE PTR [edx],al
    2fdf:	02 07                	add    al,BYTE PTR [edi]
    2fe1:	f0 00 00             	lock add BYTE PTR [eax],al
    2fe4:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    2fe7:	00 00                	add    BYTE PTR [eax],al
    2fe9:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2fec:	61                   	popa   
    2fed:	00 00                	add    BYTE PTR [eax],al
    2fef:	00 02                	add    BYTE PTR [edx],al
    2ff1:	04 07                	add    al,0x7
    2ff3:	4e                   	dec    esi
    2ff4:	00 00                	add    BYTE PTR [eax],al
    2ff6:	00 02                	add    BYTE PTR [edx],al
    2ff8:	08 07                	or     BYTE PTR [edi],al
    2ffa:	44                   	inc    esp
    2ffb:	00 00                	add    BYTE PTR [eax],al
    2ffd:	00 02                	add    BYTE PTR [edx],al
    2fff:	04 05                	add    al,0x5
    3001:	05 00 00 00 02       	add    eax,0x2000000
    3006:	0c 04                	or     al,0x4
    3008:	3d 01 00 00 05       	cmp    eax,0x5000001
    300d:	04 83                	add    al,0x83
    300f:	00 00                	add    BYTE PTR [eax],al
    3011:	00 06                	add    BYTE PTR [esi],al
    3013:	25 00 00 00 02       	and    eax,0x2000000
    3018:	01 02                	add    DWORD PTR [edx],eax
    301a:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3021:	5a                   	pop    edx
    3022:	01 00                	add    DWORD PTR [eax],eax
    3024:	00 02                	add    BYTE PTR [edx],al
    3026:	04 07                	add    al,0x7
    3028:	49                   	dec    ecx
    3029:	00 00                	add    BYTE PTR [eax],al
    302b:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3031:	00 07                	add    BYTE PTR [edi],al
    3033:	bb 0a 00 00 01       	mov    ebx,0x100000a
    3038:	1d 9d 00 00 00       	sbb    eax,0x9d
    303d:	70 25                	jo     3064 <sysEnter_Vector-0x12cf9c>
    303f:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    3045:	01 9c d9 00 00 00 08 	add    DWORD PTR [ecx+ebx*8+0x8000000],ebx
    304c:	82                   	(bad)  
    304d:	08 00                	or     BYTE PTR [eax],al
    304f:	00 01                	add    BYTE PTR [ecx],al
    3051:	1d 9d 00 00 00       	sbb    eax,0x9d
    3056:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    305c:	63 00                	arpl   WORD PTR [eax],ax
    305e:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    3064:	02 91 04 00 07 b3    	add    dl,BYTE PTR [ecx-0x4cf8fffc]
    306a:	0a 00                	or     al,BYTE PTR [eax]
    306c:	00 01                	add    BYTE PTR [ecx],al
    306e:	23 9d 00 00 00 ae    	and    ebx,DWORD PTR [ebp-0x52000000]
    3074:	25 00 9f 3e 00       	and    eax,0x3e9f00
    3079:	00 00                	add    BYTE PTR [eax],al
    307b:	01 9c 0f 01 00 00 08 	add    DWORD PTR [edi+ecx*1+0x8000001],ebx
    3082:	82                   	(bad)  
    3083:	08 00                	or     BYTE PTR [eax],al
    3085:	00 01                	add    BYTE PTR [ecx],al
    3087:	23 9d 00 00 00 02    	and    ebx,DWORD PTR [ebp+0x2000000]
    308d:	91                   	xchg   ecx,eax
    308e:	00 09                	add    BYTE PTR [ecx],cl
    3090:	73 72                	jae    3104 <sysEnter_Vector-0x12cefc>
    3092:	63 00                	arpl   WORD PTR [eax],ax
    3094:	01 23                	add    DWORD PTR [ebx],esp
    3096:	7d 00                	jge    3098 <sysEnter_Vector-0x12cf68>
    3098:	00 00                	add    BYTE PTR [eax],al
    309a:	02 91 04 00 0a c2    	add    dl,BYTE PTR [ecx-0x3df5fffc]
    30a0:	0a 00                	or     al,BYTE PTR [eax]
    30a2:	00 01                	add    BYTE PTR [ecx],al
    30a4:	29 ec                	sub    esp,ebp
    30a6:	25 00 9f 6f 00       	and    eax,0x6f9f00
    30ab:	00 00                	add    BYTE PTR [eax],al
    30ad:	01 9c 55 01 00 00 09 	add    DWORD PTR [ebp+edx*2+0x9000001],ebx
    30b4:	70 00                	jo     30b6 <sysEnter_Vector-0x12cf4a>
    30b6:	01 29                	add    DWORD PTR [ecx],ebp
    30b8:	9d                   	popf   
    30b9:	00 00                	add    BYTE PTR [eax],al
    30bb:	00 02                	add    BYTE PTR [edx],al
    30bd:	91                   	xchg   ecx,eax
    30be:	00 09                	add    BYTE PTR [ecx],cl
    30c0:	71 00                	jno    30c2 <sysEnter_Vector-0x12cf3e>
    30c2:	01 29                	add    DWORD PTR [ecx],ebp
    30c4:	9d                   	popf   
    30c5:	00 00                	add    BYTE PTR [eax],al
    30c7:	00 02                	add    BYTE PTR [edx],al
    30c9:	91                   	xchg   ecx,eax
    30ca:	04 0b                	add    al,0xb
    30cc:	63 00                	arpl   WORD PTR [eax],ax
    30ce:	01 2a                	add    DWORD PTR [edx],ebp
    30d0:	3a 00                	cmp    al,BYTE PTR [eax]
    30d2:	00 00                	add    BYTE PTR [eax],al
    30d4:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    30da:	01 2a                	add    DWORD PTR [edx],ebp
    30dc:	3a 00                	cmp    al,BYTE PTR [eax]
    30de:	00 00                	add    BYTE PTR [eax],al
    30e0:	02 91 70 00 0c 5b    	add    dl,BYTE PTR [ecx+0x5b0c0070]
    30e6:	00 00                	add    BYTE PTR [eax],al
    30e8:	00 02                	add    BYTE PTR [edx],al
    30ea:	34 56                	xor    al,0x56
    30ec:	00 00                	add    BYTE PTR [eax],al
    30ee:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    30f4:	9f                   	lahf   
    30f5:	0c 0b                	or     al,0xb
    30f7:	01 00                	add    DWORD PTR [eax],eax
    30f9:	00 02                	add    BYTE PTR [edx],al
    30fb:	35 56 00 00 00       	xor    eax,0x56
    3100:	05 03 48 5f 00       	add    eax,0x5f4803
    3105:	9f                   	lahf   
    3106:	0c 64                	or     al,0x64
    3108:	00 00                	add    BYTE PTR [eax],al
    310a:	00 02                	add    BYTE PTR [edx],al
    310c:	36                   	ss
    310d:	56                   	push   esi
    310e:	00 00                	add    BYTE PTR [eax],al
    3110:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    3116:	9f                   	lahf   
    3117:	0c 53                	or     al,0x53
    3119:	01 00                	add    DWORD PTR [eax],eax
    311b:	00 02                	add    BYTE PTR [edx],al
    311d:	37                   	aaa    
    311e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    311f:	00 00                	add    BYTE PTR [eax],al
    3121:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    3127:	9f                   	lahf   
    3128:	0c 38                	or     al,0x38
    312a:	00 00                	add    BYTE PTR [eax],al
    312c:	00 03                	add    BYTE PTR [ebx],al
    312e:	52                   	push   edx
    312f:	aa                   	stos   BYTE PTR es:[edi],al
    3130:	01 00                	add    DWORD PTR [eax],eax
    3132:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    3138:	9f                   	lahf   
    3139:	05 04 9d 00 00       	add    eax,0x9d04
    313e:	00 00                	add    BYTE PTR [eax],al
    3140:	6c                   	ins    BYTE PTR es:[edi],dx
    3141:	01 00                	add    DWORD PTR [eax],eax
    3143:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3146:	35 0f 00 00 04       	xor    eax,0x400000f
    314b:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    3151:	ea 0a 00 00 15 00 00 	jmp    0x0:0x1500000a
    3158:	00 5c 26 00          	add    BYTE PTR [esi+eiz*1+0x0],bl
    315c:	9f                   	lahf   
    315d:	5e                   	pop    esi
    315e:	00 00                	add    BYTE PTR [eax],al
    3160:	00 2d 13 00 00 02    	add    BYTE PTR ds:0x2000013,ch
    3166:	01 06                	add    DWORD PTR [esi],eax
    3168:	75 00                	jne    316a <sysEnter_Vector-0x12ce96>
    316a:	00 00                	add    BYTE PTR [eax],al
    316c:	02 01                	add    al,BYTE PTR [ecx]
    316e:	06                   	push   es
    316f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3170:	00 00                	add    BYTE PTR [eax],al
    3172:	00 02                	add    BYTE PTR [edx],al
    3174:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    317a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3181:	02 08                	add    cl,BYTE PTR [eax]
    3183:	05 00 00 00 00       	add    eax,0x0
    3188:	02 01                	add    al,BYTE PTR [ecx]
    318a:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    318e:	00 02                	add    BYTE PTR [edx],al
    3190:	02 07                	add    al,BYTE PTR [edi]
    3192:	f0 00 00             	lock add BYTE PTR [eax],al
    3195:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3198:	00 00                	add    BYTE PTR [eax],al
    319a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    319d:	61                   	popa   
    319e:	00 00                	add    BYTE PTR [eax],al
    31a0:	00 02                	add    BYTE PTR [edx],al
    31a2:	04 07                	add    al,0x7
    31a4:	4e                   	dec    esi
    31a5:	00 00                	add    BYTE PTR [eax],al
    31a7:	00 02                	add    BYTE PTR [edx],al
    31a9:	08 07                	or     BYTE PTR [edi],al
    31ab:	44                   	inc    esp
    31ac:	00 00                	add    BYTE PTR [eax],al
    31ae:	00 02                	add    BYTE PTR [edx],al
    31b0:	04 05                	add    al,0x5
    31b2:	05 00 00 00 02       	add    eax,0x2000000
    31b7:	0c 04                	or     al,0x4
    31b9:	3d 01 00 00 05       	cmp    eax,0x5000001
    31be:	04 83                	add    al,0x83
    31c0:	00 00                	add    BYTE PTR [eax],al
    31c2:	00 06                	add    BYTE PTR [esi],al
    31c4:	25 00 00 00 02       	and    eax,0x2000000
    31c9:	01 02                	add    DWORD PTR [edx],eax
    31cb:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    31d2:	5a                   	pop    edx
    31d3:	01 00                	add    DWORD PTR [eax],eax
    31d5:	00 02                	add    BYTE PTR [edx],al
    31d7:	04 07                	add    al,0x7
    31d9:	49                   	dec    ecx
    31da:	00 00                	add    BYTE PTR [eax],al
    31dc:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    31e2:	00 07                	add    BYTE PTR [edi],al
    31e4:	e3 0a                	jecxz  31f0 <sysEnter_Vector-0x12ce10>
    31e6:	00 00                	add    BYTE PTR [eax],al
    31e8:	01 18                	add    DWORD PTR [eax],ebx
    31ea:	3a 00                	cmp    al,BYTE PTR [eax]
    31ec:	00 00                	add    BYTE PTR [eax],al
    31ee:	5c                   	pop    esp
    31ef:	26 00 9f 5e 00 00 00 	add    BYTE PTR es:[edi+0x5e],bl
    31f6:	01 9c 09 01 00 00 08 	add    DWORD PTR [ecx+ecx*1+0x8000001],ebx
    31fd:	70 31                	jo     3230 <sysEnter_Vector-0x12cdd0>
    31ff:	00 01                	add    BYTE PTR [ecx],al
    3201:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    3204:	00 00                	add    BYTE PTR [eax],al
    3206:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    320c:	00 01                	add    BYTE PTR [ecx],al
    320e:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    3211:	00 00                	add    BYTE PTR [eax],al
    3213:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    3219:	00 01                	add    BYTE PTR [ecx],al
    321b:	1a 09                	sbb    cl,BYTE PTR [ecx]
    321d:	01 00                	add    DWORD PTR [eax],eax
    321f:	00 01                	add    BYTE PTR [ecx],al
    3221:	53                   	push   ebx
    3222:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    3225:	00 01                	add    BYTE PTR [ecx],al
    3227:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    3229:	01 00                	add    DWORD PTR [eax],eax
    322b:	00 01                	add    BYTE PTR [ecx],al
    322d:	56                   	push   esi
    322e:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    3231:	00 01                	add    BYTE PTR [ecx],al
    3233:	1c 48                	sbb    al,0x48
    3235:	00 00                	add    BYTE PTR [eax],al
    3237:	00 02                	add    BYTE PTR [edx],al
    3239:	91                   	xchg   ecx,eax
    323a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    323b:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    323e:	00 01                	add    BYTE PTR [ecx],al
    3240:	1c 48                	sbb    al,0x48
    3242:	00 00                	add    BYTE PTR [eax],al
    3244:	00 02                	add    BYTE PTR [edx],al
    3246:	91                   	xchg   ecx,eax
    3247:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3248:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    324e:	00 06                	add    BYTE PTR [esi],al
    3250:	48                   	dec    eax
    3251:	00 00                	add    BYTE PTR [eax],al
    3253:	00 0a                	add    BYTE PTR [edx],cl
    3255:	5b                   	pop    ebx
    3256:	00 00                	add    BYTE PTR [eax],al
    3258:	00 02                	add    BYTE PTR [edx],al
    325a:	34 56                	xor    al,0x56
    325c:	00 00                	add    BYTE PTR [eax],al
    325e:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    3264:	9f                   	lahf   
    3265:	0a 0b                	or     cl,BYTE PTR [ebx]
    3267:	01 00                	add    DWORD PTR [eax],eax
    3269:	00 02                	add    BYTE PTR [edx],al
    326b:	35 56 00 00 00       	xor    eax,0x56
    3270:	05 03 48 5f 00       	add    eax,0x5f4803
    3275:	9f                   	lahf   
    3276:	0a 64 00 00          	or     ah,BYTE PTR [eax+eax*1+0x0]
    327a:	00 02                	add    BYTE PTR [edx],al
    327c:	36                   	ss
    327d:	56                   	push   esi
    327e:	00 00                	add    BYTE PTR [eax],al
    3280:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    3286:	9f                   	lahf   
    3287:	0a 53 01             	or     dl,BYTE PTR [ebx+0x1]
    328a:	00 00                	add    BYTE PTR [eax],al
    328c:	02 37                	add    dh,BYTE PTR [edi]
    328e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    328f:	00 00                	add    BYTE PTR [eax],al
    3291:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    3297:	9f                   	lahf   
    3298:	0a 38                	or     bh,BYTE PTR [eax]
    329a:	00 00                	add    BYTE PTR [eax],al
    329c:	00 03                	add    BYTE PTR [ebx],al
    329e:	52                   	push   edx
    329f:	69 01 00 00 05 03    	imul   eax,DWORD PTR [ecx],0x3050000
    32a5:	4c                   	dec    esp
    32a6:	5f                   	pop    edi
    32a7:	00 9f 05 04 9d 00    	add    BYTE PTR [edi+0x9d0405],bl
    32ad:	00 00                	add    BYTE PTR [eax],al
    32af:	00 c9                	add    cl,cl
    32b1:	01 00                	add    DWORD PTR [eax],eax
    32b3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    32b6:	c7                   	(bad)  
    32b7:	0f 00 00             	sldt   WORD PTR [eax]
    32ba:	04 01                	add    al,0x1
    32bc:	83 00 00             	add    DWORD PTR [eax],0x0
    32bf:	00 0c 1c             	add    BYTE PTR [esp+ebx*1],cl
    32c2:	0b 00                	or     eax,DWORD PTR [eax]
    32c4:	00 15 00 00 00 bc    	add    BYTE PTR ds:0xbc000000,dl
    32ca:	26 00 9f c7 00 00 00 	add    BYTE PTR es:[edi+0xc7],bl
    32d1:	ec                   	in     al,dx
    32d2:	13 00                	adc    eax,DWORD PTR [eax]
    32d4:	00 02                	add    BYTE PTR [edx],al
    32d6:	01 06                	add    DWORD PTR [esi],eax
    32d8:	75 00                	jne    32da <sysEnter_Vector-0x12cd26>
    32da:	00 00                	add    BYTE PTR [eax],al
    32dc:	02 01                	add    al,BYTE PTR [ecx]
    32de:	06                   	push   es
    32df:	6e                   	outs   dx,BYTE PTR ds:[esi]
    32e0:	00 00                	add    BYTE PTR [eax],al
    32e2:	00 02                	add    BYTE PTR [edx],al
    32e4:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    32ea:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    32f1:	02 08                	add    cl,BYTE PTR [eax]
    32f3:	05 00 00 00 00       	add    eax,0x0
    32f8:	02 01                	add    al,BYTE PTR [ecx]
    32fa:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    32fe:	00 02                	add    BYTE PTR [edx],al
    3300:	02 07                	add    al,BYTE PTR [edi]
    3302:	f0 00 00             	lock add BYTE PTR [eax],al
    3305:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3308:	00 00                	add    BYTE PTR [eax],al
    330a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    330d:	61                   	popa   
    330e:	00 00                	add    BYTE PTR [eax],al
    3310:	00 02                	add    BYTE PTR [edx],al
    3312:	04 07                	add    al,0x7
    3314:	4e                   	dec    esi
    3315:	00 00                	add    BYTE PTR [eax],al
    3317:	00 02                	add    BYTE PTR [edx],al
    3319:	08 07                	or     BYTE PTR [edi],al
    331b:	44                   	inc    esp
    331c:	00 00                	add    BYTE PTR [eax],al
    331e:	00 02                	add    BYTE PTR [edx],al
    3320:	04 05                	add    al,0x5
    3322:	05 00 00 00 02       	add    eax,0x2000000
    3327:	0c 04                	or     al,0x4
    3329:	3d 01 00 00 05       	cmp    eax,0x5000001
    332e:	04 83                	add    al,0x83
    3330:	00 00                	add    BYTE PTR [eax],al
    3332:	00 06                	add    BYTE PTR [esi],al
    3334:	25 00 00 00 02       	and    eax,0x2000000
    3339:	01 02                	add    DWORD PTR [edx],eax
    333b:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3342:	5a                   	pop    edx
    3343:	01 00                	add    DWORD PTR [eax],eax
    3345:	00 02                	add    BYTE PTR [edx],al
    3347:	04 07                	add    al,0x7
    3349:	49                   	dec    ecx
    334a:	00 00                	add    BYTE PTR [eax],al
    334c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3352:	00 07                	add    BYTE PTR [edi],al
    3354:	ff 0a                	dec    DWORD PTR [edx]
    3356:	00 00                	add    BYTE PTR [eax],al
    3358:	01 04 9d 00 00 00 bc 	add    DWORD PTR [ebx*4-0x44000000],eax
    335f:	26 00 9f 40 00 00 00 	add    BYTE PTR es:[edi+0x40],bl
    3366:	01 9c e3 00 00 00 08 	add    DWORD PTR [ebx+eiz*8+0x8000000],ebx
    336d:	73 31                	jae    33a0 <sysEnter_Vector-0x12cc60>
    336f:	00 01                	add    BYTE PTR [ecx],al
    3371:	04 9d                	add    al,0x9d
    3373:	00 00                	add    BYTE PTR [eax],al
    3375:	00 02                	add    BYTE PTR [edx],al
    3377:	91                   	xchg   ecx,eax
    3378:	00 08                	add    BYTE PTR [eax],cl
    337a:	73 32                	jae    33ae <sysEnter_Vector-0x12cc52>
    337c:	00 01                	add    BYTE PTR [ecx],al
    337e:	04 7d                	add    al,0x7d
    3380:	00 00                	add    BYTE PTR [eax],al
    3382:	00 02                	add    BYTE PTR [edx],al
    3384:	91                   	xchg   ecx,eax
    3385:	04 09                	add    al,0x9
    3387:	73 00                	jae    3389 <sysEnter_Vector-0x12cc77>
    3389:	01 06                	add    DWORD PTR [esi],eax
    338b:	9d                   	popf   
    338c:	00 00                	add    BYTE PTR [eax],al
    338e:	00 02                	add    BYTE PTR [edx],al
    3390:	91                   	xchg   ecx,eax
    3391:	74 00                	je     3393 <sysEnter_Vector-0x12cc6d>
    3393:	07                   	pop    es
    3394:	06                   	push   es
    3395:	0b 00                	or     eax,DWORD PTR [eax]
    3397:	00 01                	add    BYTE PTR [ecx],al
    3399:	0e                   	push   cs
    339a:	9d                   	popf   
    339b:	00 00                	add    BYTE PTR [eax],al
    339d:	00 fc                	add    ah,bh
    339f:	26 00 9f 40 00 00 00 	add    BYTE PTR es:[edi+0x40],bl
    33a6:	01 9c 23 01 00 00 08 	add    DWORD PTR [ebx+eiz*1+0x8000001],ebx
    33ad:	73 31                	jae    33e0 <sysEnter_Vector-0x12cc20>
    33af:	00 01                	add    BYTE PTR [ecx],al
    33b1:	0e                   	push   cs
    33b2:	9d                   	popf   
    33b3:	00 00                	add    BYTE PTR [eax],al
    33b5:	00 02                	add    BYTE PTR [edx],al
    33b7:	91                   	xchg   ecx,eax
    33b8:	00 08                	add    BYTE PTR [eax],cl
    33ba:	73 32                	jae    33ee <sysEnter_Vector-0x12cc12>
    33bc:	00 01                	add    BYTE PTR [ecx],al
    33be:	0e                   	push   cs
    33bf:	7d 00                	jge    33c1 <sysEnter_Vector-0x12cc3f>
    33c1:	00 00                	add    BYTE PTR [eax],al
    33c3:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    33c9:	01 10                	add    DWORD PTR [eax],edx
    33cb:	9d                   	popf   
    33cc:	00 00                	add    BYTE PTR [eax],al
    33ce:	00 02                	add    BYTE PTR [edx],al
    33d0:	91                   	xchg   ecx,eax
    33d1:	74 00                	je     33d3 <sysEnter_Vector-0x12cc2d>
    33d3:	07                   	pop    es
    33d4:	14 0b                	adc    al,0xb
    33d6:	00 00                	add    BYTE PTR [eax],al
    33d8:	01 18                	add    DWORD PTR [eax],ebx
    33da:	9d                   	popf   
    33db:	00 00                	add    BYTE PTR [eax],al
    33dd:	00 3c 27             	add    BYTE PTR [edi+eiz*1],bh
    33e0:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
    33e6:	01 9c 71 01 00 00 08 	add    DWORD PTR [ecx+esi*2+0x8000001],ebx
    33ed:	73 31                	jae    3420 <sysEnter_Vector-0x12cbe0>
    33ef:	00 01                	add    BYTE PTR [ecx],al
    33f1:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    33f7:	91                   	xchg   ecx,eax
    33f8:	00 08                	add    BYTE PTR [eax],cl
    33fa:	73 32                	jae    342e <sysEnter_Vector-0x12cbd2>
    33fc:	00 01                	add    BYTE PTR [ecx],al
    33fe:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    3401:	00 00                	add    BYTE PTR [eax],al
    3403:	02 91 04 0a 0e 0b    	add    dl,BYTE PTR [ecx+0xb0e0a04]
    3409:	00 00                	add    BYTE PTR [eax],al
    340b:	01 18                	add    DWORD PTR [eax],ebx
    340d:	61                   	popa   
    340e:	00 00                	add    BYTE PTR [eax],al
    3410:	00 02                	add    BYTE PTR [edx],al
    3412:	91                   	xchg   ecx,eax
    3413:	08 09                	or     BYTE PTR [ecx],cl
    3415:	73 00                	jae    3417 <sysEnter_Vector-0x12cbe9>
    3417:	01 1a                	add    DWORD PTR [edx],ebx
    3419:	9d                   	popf   
    341a:	00 00                	add    BYTE PTR [eax],al
    341c:	00 02                	add    BYTE PTR [edx],al
    341e:	91                   	xchg   ecx,eax
    341f:	74 00                	je     3421 <sysEnter_Vector-0x12cbdf>
    3421:	0b 5b 00             	or     ebx,DWORD PTR [ebx+0x0]
    3424:	00 00                	add    BYTE PTR [eax],al
    3426:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    3429:	00 00                	add    BYTE PTR [eax],al
    342b:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    3431:	9f                   	lahf   
    3432:	0b 0b                	or     ecx,DWORD PTR [ebx]
    3434:	01 00                	add    DWORD PTR [eax],eax
    3436:	00 02                	add    BYTE PTR [edx],al
    3438:	35 56 00 00 00       	xor    eax,0x56
    343d:	05 03 48 5f 00       	add    eax,0x5f4803
    3442:	9f                   	lahf   
    3443:	0b 64 00 00          	or     esp,DWORD PTR [eax+eax*1+0x0]
    3447:	00 02                	add    BYTE PTR [edx],al
    3449:	36                   	ss
    344a:	56                   	push   esi
    344b:	00 00                	add    BYTE PTR [eax],al
    344d:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    3453:	9f                   	lahf   
    3454:	0b 53 01             	or     edx,DWORD PTR [ebx+0x1]
    3457:	00 00                	add    BYTE PTR [eax],al
    3459:	02 37                	add    dh,BYTE PTR [edi]
    345b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    345c:	00 00                	add    BYTE PTR [eax],al
    345e:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    3464:	9f                   	lahf   
    3465:	0b 38                	or     edi,DWORD PTR [eax]
    3467:	00 00                	add    BYTE PTR [eax],al
    3469:	00 03                	add    BYTE PTR [ebx],al
    346b:	52                   	push   edx
    346c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
    346f:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    3475:	9f                   	lahf   
    3476:	05 04 9d 00 00       	add    eax,0x9d04
    347b:	00 00                	add    BYTE PTR [eax],al
    347d:	4c                   	dec    esp
    347e:	01 00                	add    DWORD PTR [eax],eax
    3480:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3483:	68 10 00 00 04       	push   0x4000010
    3488:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    348e:	46                   	inc    esi
    348f:	0b 00                	or     eax,DWORD PTR [eax]
    3491:	00 15 00 00 00 84    	add    BYTE PTR ds:0x84000000,dl
    3497:	27                   	daa    
    3498:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
    349e:	cc                   	int3   
    349f:	14 00                	adc    al,0x0
    34a1:	00 02                	add    BYTE PTR [edx],al
    34a3:	01 06                	add    DWORD PTR [esi],eax
    34a5:	75 00                	jne    34a7 <sysEnter_Vector-0x12cb59>
    34a7:	00 00                	add    BYTE PTR [eax],al
    34a9:	02 01                	add    al,BYTE PTR [ecx]
    34ab:	06                   	push   es
    34ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
    34ad:	00 00                	add    BYTE PTR [eax],al
    34af:	00 02                	add    BYTE PTR [edx],al
    34b1:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    34b7:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    34be:	02 08                	add    cl,BYTE PTR [eax]
    34c0:	05 00 00 00 00       	add    eax,0x0
    34c5:	02 01                	add    al,BYTE PTR [ecx]
    34c7:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    34cb:	00 02                	add    BYTE PTR [edx],al
    34cd:	02 07                	add    al,BYTE PTR [edi]
    34cf:	f0 00 00             	lock add BYTE PTR [eax],al
    34d2:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    34d5:	00 00                	add    BYTE PTR [eax],al
    34d7:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    34da:	61                   	popa   
    34db:	00 00                	add    BYTE PTR [eax],al
    34dd:	00 02                	add    BYTE PTR [edx],al
    34df:	04 07                	add    al,0x7
    34e1:	4e                   	dec    esi
    34e2:	00 00                	add    BYTE PTR [eax],al
    34e4:	00 02                	add    BYTE PTR [edx],al
    34e6:	08 07                	or     BYTE PTR [edi],al
    34e8:	44                   	inc    esp
    34e9:	00 00                	add    BYTE PTR [eax],al
    34eb:	00 02                	add    BYTE PTR [edx],al
    34ed:	04 05                	add    al,0x5
    34ef:	05 00 00 00 02       	add    eax,0x2000000
    34f4:	0c 04                	or     al,0x4
    34f6:	3d 01 00 00 02       	cmp    eax,0x2000001
    34fb:	01 02                	add    DWORD PTR [edx],eax
    34fd:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3504:	5a                   	pop    edx
    3505:	01 00                	add    DWORD PTR [eax],eax
    3507:	00 02                	add    BYTE PTR [edx],al
    3509:	04 07                	add    al,0x7
    350b:	49                   	dec    ecx
    350c:	00 00                	add    BYTE PTR [eax],al
    350e:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3514:	00 06                	add    BYTE PTR [esi],al
    3516:	31 0b                	xor    DWORD PTR [ebx],ecx
    3518:	00 00                	add    BYTE PTR [eax],al
    351a:	01 09                	add    DWORD PTR [ecx],ecx
    351c:	7d 00                	jge    351e <sysEnter_Vector-0x12cae2>
    351e:	00 00                	add    BYTE PTR [eax],al
    3520:	84 27                	test   BYTE PTR [edi],ah
    3522:	00 9f 30 00 00 00    	add    BYTE PTR [edi+0x30],bl
    3528:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    352f:	63 00                	arpl   WORD PTR [eax],ax
    3531:	01 09                	add    DWORD PTR [ecx],ecx
    3533:	25 00 00 00 02       	and    eax,0x2000000
    3538:	91                   	xchg   ecx,eax
    3539:	74 00                	je     353b <sysEnter_Vector-0x12cac5>
    353b:	08 3d 0b 00 00 01    	or     BYTE PTR ds:0x100000b,bh
    3541:	0e                   	push   cs
    3542:	7d 00                	jge    3544 <sysEnter_Vector-0x12cabc>
    3544:	00 00                	add    BYTE PTR [eax],al
    3546:	b4 27                	mov    ah,0x27
    3548:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
    354e:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
    3555:	73 74                	jae    35cb <sysEnter_Vector-0x12ca35>
    3557:	72 00                	jb     3559 <sysEnter_Vector-0x12caa7>
    3559:	01 0e                	add    DWORD PTR [esi],ecx
    355b:	92                   	xchg   edx,eax
    355c:	00 00                	add    BYTE PTR [eax],al
    355e:	00 02                	add    BYTE PTR [edx],al
    3560:	91                   	xchg   ecx,eax
    3561:	00 09                	add    BYTE PTR [ecx],cl
    3563:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    3566:	00 01                	add    BYTE PTR [ecx],al
    3568:	10 3a                	adc    BYTE PTR [edx],bh
    356a:	00 00                	add    BYTE PTR [eax],al
    356c:	00 02                	add    BYTE PTR [edx],al
    356e:	91                   	xchg   ecx,eax
    356f:	74 00                	je     3571 <sysEnter_Vector-0x12ca8f>
    3571:	0a 5b 00             	or     bl,BYTE PTR [ebx+0x0]
    3574:	00 00                	add    BYTE PTR [eax],al
    3576:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    3579:	00 00                	add    BYTE PTR [eax],al
    357b:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    3581:	9f                   	lahf   
    3582:	0a 0b                	or     cl,BYTE PTR [ebx]
    3584:	01 00                	add    DWORD PTR [eax],eax
    3586:	00 02                	add    BYTE PTR [edx],al
    3588:	35 56 00 00 00       	xor    eax,0x56
    358d:	05 03 48 5f 00       	add    eax,0x5f4803
    3592:	9f                   	lahf   
    3593:	0a 64 00 00          	or     ah,BYTE PTR [eax+eax*1+0x0]
    3597:	00 02                	add    BYTE PTR [edx],al
    3599:	36                   	ss
    359a:	56                   	push   esi
    359b:	00 00                	add    BYTE PTR [eax],al
    359d:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    35a3:	9f                   	lahf   
    35a4:	0a 53 01             	or     dl,BYTE PTR [ebx+0x1]
    35a7:	00 00                	add    BYTE PTR [eax],al
    35a9:	02 37                	add    dh,BYTE PTR [edi]
    35ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
    35ac:	00 00                	add    BYTE PTR [eax],al
    35ae:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    35b4:	9f                   	lahf   
    35b5:	0a 38                	or     bh,BYTE PTR [eax]
    35b7:	00 00                	add    BYTE PTR [eax],al
    35b9:	00 03                	add    BYTE PTR [ebx],al
    35bb:	52                   	push   edx
    35bc:	49                   	dec    ecx
    35bd:	01 00                	add    DWORD PTR [eax],eax
    35bf:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    35c5:	9f                   	lahf   
    35c6:	05 04 92 00 00       	add    eax,0x9204
    35cb:	00 00                	add    BYTE PTR [eax],al
    35cd:	ca 00 00             	retf   0x0
    35d0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    35d3:	0f 11 00             	movups XMMWORD PTR [eax],xmm0
    35d6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    35d9:	83 00 00             	add    DWORD PTR [eax],0x0
    35dc:	00 0c 64             	add    BYTE PTR [esp+eiz*2],cl
    35df:	0b 00                	or     eax,DWORD PTR [eax]
    35e1:	00 15 00 00 00 10    	add    BYTE PTR ds:0x10000000,dl
    35e7:	28 00                	sub    BYTE PTR [eax],al
    35e9:	9f                   	lahf   
    35ea:	62 00                	bound  eax,QWORD PTR [eax]
    35ec:	00 00                	add    BYTE PTR [eax],al
    35ee:	9b                   	fwait
    35ef:	15 00 00 02 04       	adc    eax,0x4020000
    35f4:	05 69 6e 74 00       	add    eax,0x746e69
    35f9:	03 23                	add    esp,DWORD PTR [ebx]
    35fb:	05 00 00 02 d8       	add    eax,0xd8020000
    3600:	37                   	aaa    
    3601:	00 00                	add    BYTE PTR [eax],al
    3603:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3606:	07                   	pop    es
    3607:	4e                   	dec    esi
    3608:	00 00                	add    BYTE PTR [eax],al
    360a:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    360d:	05 05 00 00 00       	add    eax,0x5
    3612:	04 08                	add    al,0x8
    3614:	05 00 00 00 00       	add    eax,0x0
    3619:	04 0c                	add    al,0xc
    361b:	04 3d                	add    al,0x3d
    361d:	01 00                	add    DWORD PTR [eax],eax
    361f:	00 05 5d 0b 00 00    	add    BYTE PTR ds:0xb5d,al
    3625:	01 03                	add    DWORD PTR [ebx],eax
    3627:	2c 00                	sub    al,0x0
    3629:	00 00                	add    BYTE PTR [eax],al
    362b:	10 28                	adc    BYTE PTR [eax],ch
    362d:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
    3633:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    363a:	73 74                	jae    36b0 <sysEnter_Vector-0x12c950>
    363c:	72 00                	jb     363e <sysEnter_Vector-0x12c9c2>
    363e:	01 03                	add    DWORD PTR [ebx],eax
    3640:	89 00                	mov    DWORD PTR [eax],eax
    3642:	00 00                	add    BYTE PTR [eax],al
    3644:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    364a:	74 00                	je     364c <sysEnter_Vector-0x12c9b4>
    364c:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    364f:	00 00                	add    BYTE PTR [eax],al
    3651:	00 02                	add    BYTE PTR [edx],al
    3653:	91                   	xchg   ecx,eax
    3654:	74 00                	je     3656 <sysEnter_Vector-0x12c9aa>
    3656:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    3659:	00 00                	add    BYTE PTR [eax],al
    365b:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    365e:	06                   	push   es
    365f:	75 00                	jne    3661 <sysEnter_Vector-0x12c99f>
    3661:	00 00                	add    BYTE PTR [eax],al
    3663:	09 8f 00 00 00 0a    	or     DWORD PTR [edi+0xa000000],ecx
    3669:	79 0b                	jns    3676 <sysEnter_Vector-0x12c98a>
    366b:	00 00                	add    BYTE PTR [eax],al
    366d:	01 0a                	add    DWORD PTR [edx],ecx
    366f:	2c 00                	sub    al,0x0
    3671:	00 00                	add    BYTE PTR [eax],al
    3673:	41                   	inc    ecx
    3674:	28 00                	sub    BYTE PTR [eax],al
    3676:	9f                   	lahf   
    3677:	31 00                	xor    DWORD PTR [eax],eax
    3679:	00 00                	add    BYTE PTR [eax],al
    367b:	01 9c 06 73 74 72 00 	add    DWORD PTR [esi+eax*1+0x727473],ebx
    3682:	01 0a                	add    DWORD PTR [edx],ecx
    3684:	89 00                	mov    DWORD PTR [eax],eax
    3686:	00 00                	add    BYTE PTR [eax],al
    3688:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    368e:	74 00                	je     3690 <sysEnter_Vector-0x12c970>
    3690:	01 0b                	add    DWORD PTR [ebx],ecx
    3692:	2c 00                	sub    al,0x0
    3694:	00 00                	add    BYTE PTR [eax],al
    3696:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    369c:	00 00                	add    BYTE PTR [eax],al
    369e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    36a1:	aa                   	stos   BYTE PTR es:[edi],al
    36a2:	11 00                	adc    DWORD PTR [eax],eax
    36a4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    36a7:	83 00 00             	add    DWORD PTR [eax],0x0
    36aa:	00 0c 92             	add    BYTE PTR [edx+edx*4],cl
    36ad:	0b 00                	or     eax,DWORD PTR [eax]
    36af:	00 15 00 00 00 74    	add    BYTE PTR ds:0x74000000,dl
    36b5:	28 00                	sub    BYTE PTR [eax],al
    36b7:	9f                   	lahf   
    36b8:	ce                   	into   
    36b9:	00 00                	add    BYTE PTR [eax],al
    36bb:	00 33                	add    BYTE PTR [ebx],dh
    36bd:	16                   	push   ss
    36be:	00 00                	add    BYTE PTR [eax],al
    36c0:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    36c7:	03 23                	add    esp,DWORD PTR [ebx]
    36c9:	05 00 00 02 d8       	add    eax,0xd8020000
    36ce:	37                   	aaa    
    36cf:	00 00                	add    BYTE PTR [eax],al
    36d1:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    36d4:	07                   	pop    es
    36d5:	4e                   	dec    esi
    36d6:	00 00                	add    BYTE PTR [eax],al
    36d8:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    36db:	05 05 00 00 00       	add    eax,0x5
    36e0:	04 08                	add    al,0x8
    36e2:	05 00 00 00 00       	add    eax,0x0
    36e7:	04 0c                	add    al,0xc
    36e9:	04 3d                	add    al,0x3d
    36eb:	01 00                	add    DWORD PTR [eax],eax
    36ed:	00 05 8a 0b 00 00    	add    BYTE PTR ds:0xb8a,al
    36f3:	01 0c 25 00 00 00 74 	add    DWORD PTR [eiz*1+0x74000000],ecx
    36fa:	28 00                	sub    BYTE PTR [eax],al
    36fc:	9f                   	lahf   
    36fd:	67 00 00             	add    BYTE PTR [bx+si],al
    3700:	00 01                	add    BYTE PTR [ecx],al
    3702:	9c                   	pushf  
    3703:	93                   	xchg   ebx,eax
    3704:	00 00                	add    BYTE PTR [eax],al
    3706:	00 06                	add    BYTE PTR [esi],al
    3708:	73 31                	jae    373b <sysEnter_Vector-0x12c8c5>
    370a:	00 01                	add    BYTE PTR [ecx],al
    370c:	0c 93                	or     al,0x93
    370e:	00 00                	add    BYTE PTR [eax],al
    3710:	00 02                	add    BYTE PTR [edx],al
    3712:	91                   	xchg   ecx,eax
    3713:	00 06                	add    BYTE PTR [esi],al
    3715:	73 32                	jae    3749 <sysEnter_Vector-0x12c8b7>
    3717:	00 01                	add    BYTE PTR [ecx],al
    3719:	0c 93                	or     al,0x93
    371b:	00 00                	add    BYTE PTR [eax],al
    371d:	00 02                	add    BYTE PTR [edx],al
    371f:	91                   	xchg   ecx,eax
    3720:	04 06                	add    al,0x6
    3722:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3723:	00 01                	add    BYTE PTR [ecx],al
    3725:	0c 2c                	or     al,0x2c
    3727:	00 00                	add    BYTE PTR [eax],al
    3729:	00 02                	add    BYTE PTR [edx],al
    372b:	91                   	xchg   ecx,eax
    372c:	08 00                	or     BYTE PTR [eax],al
    372e:	07                   	pop    es
    372f:	04 a0                	add    al,0xa0
    3731:	00 00                	add    BYTE PTR [eax],al
    3733:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3736:	06                   	push   es
    3737:	75 00                	jne    3739 <sysEnter_Vector-0x12c8c7>
    3739:	00 00                	add    BYTE PTR [eax],al
    373b:	08 99 00 00 00 09    	or     BYTE PTR [ecx+0x9000000],bl
    3741:	81 0b 00 00 01 16    	or     DWORD PTR [ebx],0x16010000
    3747:	25 00 00 00 db       	and    eax,0xdb000000
    374c:	28 00                	sub    BYTE PTR [eax],al
    374e:	9f                   	lahf   
    374f:	67 00 00             	add    BYTE PTR [bx+si],al
    3752:	00 01                	add    BYTE PTR [ecx],al
    3754:	9c                   	pushf  
    3755:	06                   	push   es
    3756:	73 31                	jae    3789 <sysEnter_Vector-0x12c877>
    3758:	00 01                	add    BYTE PTR [ecx],al
    375a:	16                   	push   ss
    375b:	93                   	xchg   ebx,eax
    375c:	00 00                	add    BYTE PTR [eax],al
    375e:	00 02                	add    BYTE PTR [edx],al
    3760:	91                   	xchg   ecx,eax
    3761:	00 06                	add    BYTE PTR [esi],al
    3763:	73 32                	jae    3797 <sysEnter_Vector-0x12c869>
    3765:	00 01                	add    BYTE PTR [ecx],al
    3767:	16                   	push   ss
    3768:	93                   	xchg   ebx,eax
    3769:	00 00                	add    BYTE PTR [eax],al
    376b:	00 02                	add    BYTE PTR [edx],al
    376d:	91                   	xchg   ecx,eax
    376e:	04 06                	add    al,0x6
    3770:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3771:	00 01                	add    BYTE PTR [ecx],al
    3773:	16                   	push   ss
    3774:	2c 00                	sub    al,0x0
    3776:	00 00                	add    BYTE PTR [eax],al
    3778:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    377e:	00 00                	add    BYTE PTR [eax],al
    3780:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3783:	36 12 00             	adc    al,BYTE PTR ss:[eax]
    3786:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3789:	83 00 00             	add    DWORD PTR [eax],0x0
    378c:	00 0c a8             	add    BYTE PTR [eax+ebp*4],cl
    378f:	0b 00                	or     eax,DWORD PTR [eax]
    3791:	00 15 00 00 00 44    	add    BYTE PTR ds:0x44000000,dl
    3797:	29 00                	sub    DWORD PTR [eax],eax
    3799:	9f                   	lahf   
    379a:	80 00 00             	add    BYTE PTR [eax],0x0
    379d:	00 f8                	add    al,bh
    379f:	16                   	push   ss
    37a0:	00 00                	add    BYTE PTR [eax],al
    37a2:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    37a9:	03 23                	add    esp,DWORD PTR [ebx]
    37ab:	05 00 00 02 d8       	add    eax,0xd8020000
    37b0:	37                   	aaa    
    37b1:	00 00                	add    BYTE PTR [eax],al
    37b3:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    37b6:	07                   	pop    es
    37b7:	4e                   	dec    esi
    37b8:	00 00                	add    BYTE PTR [eax],al
    37ba:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    37bd:	05 05 00 00 00       	add    eax,0x5
    37c2:	04 08                	add    al,0x8
    37c4:	05 00 00 00 00       	add    eax,0x0
    37c9:	04 0c                	add    al,0xc
    37cb:	04 3d                	add    al,0x3d
    37cd:	01 00                	add    DWORD PTR [eax],eax
    37cf:	00 05 be 0b 00 00    	add    BYTE PTR ds:0xbbe,al
    37d5:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    37db:	44                   	inc    esp
    37dc:	29 00                	sub    DWORD PTR [eax],eax
    37de:	9f                   	lahf   
    37df:	60                   	pusha  
    37e0:	00 00                	add    BYTE PTR [eax],al
    37e2:	00 01                	add    BYTE PTR [ecx],al
    37e4:	9c                   	pushf  
    37e5:	9f                   	lahf   
    37e6:	00 00                	add    BYTE PTR [eax],al
    37e8:	00 06                	add    BYTE PTR [esi],al
    37ea:	73 31                	jae    381d <sysEnter_Vector-0x12c7e3>
    37ec:	00 01                	add    BYTE PTR [ecx],al
    37ee:	0d 9f 00 00 00       	or     eax,0x9f
    37f3:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    37f9:	00 01                	add    BYTE PTR [ecx],al
    37fb:	0d ac 00 00 00       	or     eax,0xac
    3800:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    3806:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    380c:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    3812:	01 0f                	add    DWORD PTR [edi],ecx
    3814:	9f                   	lahf   
    3815:	00 00                	add    BYTE PTR [eax],al
    3817:	00 02                	add    BYTE PTR [edx],al
    3819:	91                   	xchg   ecx,eax
    381a:	74 00                	je     381c <sysEnter_Vector-0x12c7e4>
    381c:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    3823:	01 06                	add    DWORD PTR [esi],eax
    3825:	75 00                	jne    3827 <sysEnter_Vector-0x12c7d9>
    3827:	00 00                	add    BYTE PTR [eax],al
    3829:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    382c:	00 00                	add    BYTE PTR [eax],al
    382e:	00 09                	add    BYTE PTR [ecx],cl
    3830:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3831:	00 00                	add    BYTE PTR [eax],al
    3833:	00 0a                	add    BYTE PTR [edx],cl
    3835:	c7                   	(bad)  
    3836:	0b 00                	or     eax,DWORD PTR [eax]
    3838:	00 01                	add    BYTE PTR [ecx],al
    383a:	1b 9f 00 00 00 a4    	sbb    ebx,DWORD PTR [edi-0x5c000000]
    3840:	29 00                	sub    DWORD PTR [eax],eax
    3842:	9f                   	lahf   
    3843:	20 00                	and    BYTE PTR [eax],al
    3845:	00 00                	add    BYTE PTR [eax],al
    3847:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    384e:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    3854:	91                   	xchg   ecx,eax
    3855:	00 06                	add    BYTE PTR [esi],al
    3857:	73 32                	jae    388b <sysEnter_Vector-0x12c775>
    3859:	00 01                	add    BYTE PTR [ecx],al
    385b:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    3862:	04 06                	add    al,0x6
    3864:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3865:	00 01                	add    BYTE PTR [ecx],al
    3867:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    386a:	00 00                	add    BYTE PTR [eax],al
    386c:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    3872:	01 00                	add    DWORD PTR [eax],eax
    3874:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3877:	d1 12                	rcl    DWORD PTR [edx],1
    3879:	00 00                	add    BYTE PTR [eax],al
    387b:	04 01                	add    al,0x1
    387d:	83 00 00             	add    DWORD PTR [eax],0x0
    3880:	00 0c d6             	add    BYTE PTR [esi+edx*8],cl
    3883:	0b 00                	or     eax,DWORD PTR [eax]
    3885:	00 15 00 00 00 c4    	add    BYTE PTR ds:0xc4000000,dl
    388b:	29 00                	sub    DWORD PTR [eax],eax
    388d:	9f                   	lahf   
    388e:	7d 01                	jge    3891 <sysEnter_Vector-0x12c76f>
    3890:	00 00                	add    BYTE PTR [eax],al
    3892:	9d                   	popf   
    3893:	17                   	pop    ss
    3894:	00 00                	add    BYTE PTR [eax],al
    3896:	02 01                	add    al,BYTE PTR [ecx]
    3898:	06                   	push   es
    3899:	75 00                	jne    389b <sysEnter_Vector-0x12c765>
    389b:	00 00                	add    BYTE PTR [eax],al
    389d:	02 01                	add    al,BYTE PTR [ecx]
    389f:	06                   	push   es
    38a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    38a1:	00 00                	add    BYTE PTR [eax],al
    38a3:	00 02                	add    BYTE PTR [edx],al
    38a5:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    38ab:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    38b2:	02 08                	add    cl,BYTE PTR [eax]
    38b4:	05 00 00 00 00       	add    eax,0x0
    38b9:	02 01                	add    al,BYTE PTR [ecx]
    38bb:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    38bf:	00 02                	add    BYTE PTR [edx],al
    38c1:	02 07                	add    al,BYTE PTR [edi]
    38c3:	f0 00 00             	lock add BYTE PTR [eax],al
    38c6:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    38c9:	00 00                	add    BYTE PTR [eax],al
    38cb:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    38ce:	61                   	popa   
    38cf:	00 00                	add    BYTE PTR [eax],al
    38d1:	00 02                	add    BYTE PTR [edx],al
    38d3:	04 07                	add    al,0x7
    38d5:	4e                   	dec    esi
    38d6:	00 00                	add    BYTE PTR [eax],al
    38d8:	00 02                	add    BYTE PTR [edx],al
    38da:	08 07                	or     BYTE PTR [edi],al
    38dc:	44                   	inc    esp
    38dd:	00 00                	add    BYTE PTR [eax],al
    38df:	00 02                	add    BYTE PTR [edx],al
    38e1:	04 05                	add    al,0x5
    38e3:	05 00 00 00 02       	add    eax,0x2000000
    38e8:	0c 04                	or     al,0x4
    38ea:	3d 01 00 00 05       	cmp    eax,0x5000001
    38ef:	04 83                	add    al,0x83
    38f1:	00 00                	add    BYTE PTR [eax],al
    38f3:	00 06                	add    BYTE PTR [esi],al
    38f5:	25 00 00 00 02       	and    eax,0x2000000
    38fa:	01 02                	add    DWORD PTR [edx],eax
    38fc:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3903:	5a                   	pop    edx
    3904:	01 00                	add    DWORD PTR [eax],eax
    3906:	00 02                	add    BYTE PTR [edx],al
    3908:	04 07                	add    al,0x7
    390a:	49                   	dec    ecx
    390b:	00 00                	add    BYTE PTR [eax],al
    390d:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3913:	00 07                	add    BYTE PTR [edi],al
    3915:	f2 0b 00             	repnz or eax,DWORD PTR [eax]
    3918:	00 01                	add    BYTE PTR [ecx],al
    391a:	3b 96 00 00 00 c4    	cmp    edx,DWORD PTR [esi-0x3c000000]
    3920:	29 00                	sub    DWORD PTR [eax],eax
    3922:	9f                   	lahf   
    3923:	7d 01                	jge    3926 <sysEnter_Vector-0x12c6da>
    3925:	00 00                	add    BYTE PTR [eax],al
    3927:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    392e:	01 0c 00             	add    DWORD PTR [eax+eax*1],ecx
    3931:	00 01                	add    BYTE PTR [ecx],al
    3933:	3b 7d 00             	cmp    edi,DWORD PTR [ebp+0x0]
    3936:	00 00                	add    BYTE PTR [eax],al
    3938:	02 91 00 08 cf 0b    	add    dl,BYTE PTR [ecx+0xbcf0800]
    393e:	00 00                	add    BYTE PTR [eax],al
    3940:	01 3b                	add    DWORD PTR [ebx],edi
    3942:	3a 01                	cmp    al,BYTE PTR [ecx]
    3944:	00 00                	add    BYTE PTR [eax],al
    3946:	02 91 04 08 fb 08    	add    dl,BYTE PTR [ecx+0x8fb0804]
    394c:	00 00                	add    BYTE PTR [eax],al
    394e:	01 3b                	add    DWORD PTR [ebx],edi
    3950:	3a 00                	cmp    al,BYTE PTR [eax]
    3952:	00 00                	add    BYTE PTR [eax],al
    3954:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    395a:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    3960:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3963:	61                   	popa   
    3964:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    3967:	01 3e                	add    DWORD PTR [esi],edi
    3969:	96                   	xchg   esi,eax
    396a:	00 00                	add    BYTE PTR [eax],al
    396c:	00 01                	add    BYTE PTR [ecx],al
    396e:	57                   	push   edi
    396f:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    3972:	01 3f                	add    DWORD PTR [edi],edi
    3974:	3a 00                	cmp    al,BYTE PTR [eax]
    3976:	00 00                	add    BYTE PTR [eax],al
    3978:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    397b:	fa                   	cli    
    397c:	0b 00                	or     eax,DWORD PTR [eax]
    397e:	00 01                	add    BYTE PTR [ecx],al
    3980:	40                   	inc    eax
    3981:	96                   	xchg   esi,eax
    3982:	00 00                	add    BYTE PTR [eax],al
    3984:	00 0b                	add    BYTE PTR [ebx],cl
    3986:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3987:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    398b:	41                   	inc    ecx
    398c:	3a 00                	cmp    al,BYTE PTR [eax]
    398e:	00 00                	add    BYTE PTR [eax],al
    3990:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    3993:	79 00                	jns    3995 <sysEnter_Vector-0x12c66b>
    3995:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    3998:	00 00                	add    BYTE PTR [eax],al
    399a:	00 01                	add    BYTE PTR [ecx],al
    399c:	51                   	push   ecx
    399d:	0c eb                	or     al,0xeb
    399f:	0b 00                	or     eax,DWORD PTR [eax]
    39a1:	00 01                	add    BYTE PTR [ecx],al
    39a3:	41                   	inc    ecx
    39a4:	3a 00                	cmp    al,BYTE PTR [eax]
    39a6:	00 00                	add    BYTE PTR [eax],al
    39a8:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    39ab:	05 04 9d 00 00       	add    eax,0x9d04
    39b0:	00 0d 5b 00 00 00    	add    BYTE PTR ds:0x5b,cl
    39b6:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    39b9:	00 00                	add    BYTE PTR [eax],al
    39bb:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    39c1:	9f                   	lahf   
    39c2:	0d 0b 01 00 00       	or     eax,0x10b
    39c7:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    39cd:	05 03 48 5f 00       	add    eax,0x5f4803
    39d2:	9f                   	lahf   
    39d3:	0d 64 00 00 00       	or     eax,0x64
    39d8:	02 36                	add    dh,BYTE PTR [esi]
    39da:	56                   	push   esi
    39db:	00 00                	add    BYTE PTR [eax],al
    39dd:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    39e3:	9f                   	lahf   
    39e4:	0d 53 01 00 00       	or     eax,0x153
    39e9:	02 37                	add    dh,BYTE PTR [edi]
    39eb:	6f                   	outs   dx,DWORD PTR ds:[esi]
    39ec:	00 00                	add    BYTE PTR [eax],al
    39ee:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    39f4:	9f                   	lahf   
    39f5:	0d 38 00 00 00       	or     eax,0x38
    39fa:	03 52 3a             	add    edx,DWORD PTR [edx+0x3a]
    39fd:	01 00                	add    DWORD PTR [eax],eax
    39ff:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    3a05:	9f                   	lahf   
    3a06:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    3a0a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3a0d:	8c 13                	mov    WORD PTR [ebx],ss
    3a0f:	00 00                	add    BYTE PTR [eax],al
    3a11:	04 01                	add    al,0x1
    3a13:	83 00 00             	add    DWORD PTR [eax],0x0
    3a16:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    3a19:	0c 00                	or     al,0x0
    3a1b:	00 15 00 00 00 44    	add    BYTE PTR ds:0x44000000,dl
    3a21:	2b 00                	sub    eax,DWORD PTR [eax]
    3a23:	9f                   	lahf   
    3a24:	1d 00 00 00 ea       	sbb    eax,0xea000000
    3a29:	18 00                	sbb    BYTE PTR [eax],al
    3a2b:	00 02                	add    BYTE PTR [edx],al
    3a2d:	1d 0c 00 00 01       	sbb    eax,0x100000c
    3a32:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3a35:	00 00                	add    BYTE PTR [eax],al
    3a37:	44                   	inc    esp
    3a38:	2b 00                	sub    eax,DWORD PTR [eax]
    3a3a:	9f                   	lahf   
    3a3b:	1d 00 00 00 01       	sbb    eax,0x1000000
    3a40:	9c                   	pushf  
    3a41:	5b                   	pop    ebx
    3a42:	00 00                	add    BYTE PTR [eax],al
    3a44:	00 03                	add    BYTE PTR [ebx],al
    3a46:	76 61                	jbe    3aa9 <sysEnter_Vector-0x12c557>
    3a48:	6c                   	ins    BYTE PTR es:[edi],dx
    3a49:	00 01                	add    BYTE PTR [ecx],al
    3a4b:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3a4e:	00 00                	add    BYTE PTR [eax],al
    3a50:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    3a56:	74 00                	je     3a58 <sysEnter_Vector-0x12c5a8>
    3a58:	01 01                	add    DWORD PTR [ecx],eax
    3a5a:	68 00 00 00 02       	push   0x2000000
    3a5f:	91                   	xchg   ecx,eax
    3a60:	04 00                	add    al,0x0
    3a62:	04 04                	add    al,0x4
    3a64:	61                   	popa   
    3a65:	00 00                	add    BYTE PTR [eax],al
    3a67:	00 05 01 06 75 00    	add    BYTE PTR ds:0x750601,al
    3a6d:	00 00                	add    BYTE PTR [eax],al
    3a6f:	06                   	push   es
    3a70:	04 05                	add    al,0x5
    3a72:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    3a79:	00 00                	add    BYTE PTR [eax],al
    3a7b:	04 00                	add    al,0x0
    3a7d:	ea 13 00 00 04 01 83 	jmp    0x8301:0x4000013
    3a84:	00 00                	add    BYTE PTR [eax],al
    3a86:	00 0c 25 0c 00 00 15 	add    BYTE PTR [eiz*1+0x1500000c],cl
    3a8d:	00 00                	add    BYTE PTR [eax],al
    3a8f:	00 64 2b 00          	add    BYTE PTR [ebx+ebp*1+0x0],ah
    3a93:	9f                   	lahf   
    3a94:	9c                   	pushf  
    3a95:	01 00                	add    DWORD PTR [eax],eax
    3a97:	00 31                	add    BYTE PTR [ecx],dh
    3a99:	19 00                	sbb    DWORD PTR [eax],eax
    3a9b:	00 02                	add    BYTE PTR [edx],al
    3a9d:	01 06                	add    DWORD PTR [esi],eax
    3a9f:	75 00                	jne    3aa1 <sysEnter_Vector-0x12c55f>
    3aa1:	00 00                	add    BYTE PTR [eax],al
    3aa3:	02 01                	add    al,BYTE PTR [ecx]
    3aa5:	06                   	push   es
    3aa6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3aa7:	00 00                	add    BYTE PTR [eax],al
    3aa9:	00 02                	add    BYTE PTR [edx],al
    3aab:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3ab1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3ab8:	02 08                	add    cl,BYTE PTR [eax]
    3aba:	05 00 00 00 00       	add    eax,0x0
    3abf:	02 01                	add    al,BYTE PTR [ecx]
    3ac1:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3ac5:	00 02                	add    BYTE PTR [edx],al
    3ac7:	02 07                	add    al,BYTE PTR [edi]
    3ac9:	f0 00 00             	lock add BYTE PTR [eax],al
    3acc:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3acf:	00 00                	add    BYTE PTR [eax],al
    3ad1:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3ad4:	61                   	popa   
    3ad5:	00 00                	add    BYTE PTR [eax],al
    3ad7:	00 02                	add    BYTE PTR [edx],al
    3ad9:	04 07                	add    al,0x7
    3adb:	4e                   	dec    esi
    3adc:	00 00                	add    BYTE PTR [eax],al
    3ade:	00 02                	add    BYTE PTR [edx],al
    3ae0:	08 07                	or     BYTE PTR [edi],al
    3ae2:	44                   	inc    esp
    3ae3:	00 00                	add    BYTE PTR [eax],al
    3ae5:	00 02                	add    BYTE PTR [edx],al
    3ae7:	04 05                	add    al,0x5
    3ae9:	05 00 00 00 02       	add    eax,0x2000000
    3aee:	0c 04                	or     al,0x4
    3af0:	3d 01 00 00 05       	cmp    eax,0x5000001
    3af5:	04 83                	add    al,0x83
    3af7:	00 00                	add    BYTE PTR [eax],al
    3af9:	00 06                	add    BYTE PTR [esi],al
    3afb:	25 00 00 00 02       	and    eax,0x2000000
    3b00:	01 02                	add    DWORD PTR [edx],eax
    3b02:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3b09:	5a                   	pop    edx
    3b0a:	01 00                	add    DWORD PTR [eax],eax
    3b0c:	00 02                	add    BYTE PTR [edx],al
    3b0e:	04 07                	add    al,0x7
    3b10:	49                   	dec    ecx
    3b11:	00 00                	add    BYTE PTR [eax],al
    3b13:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3b19:	00 07                	add    BYTE PTR [edi],al
    3b1b:	3a 0c 00             	cmp    cl,BYTE PTR [eax+eax*1]
    3b1e:	00 01                	add    BYTE PTR [ecx],al
    3b20:	57                   	push   edi
    3b21:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3b22:	00 00                	add    BYTE PTR [eax],al
    3b24:	00 64 2b 00          	add    BYTE PTR [ebx+ebp*1+0x0],ah
    3b28:	9f                   	lahf   
    3b29:	9c                   	pushf  
    3b2a:	01 00                	add    DWORD PTR [eax],eax
    3b2c:	00 01                	add    BYTE PTR [ecx],al
    3b2e:	9c                   	pushf  
    3b2f:	38 01                	cmp    BYTE PTR [ecx],al
    3b31:	00 00                	add    BYTE PTR [eax],al
    3b33:	08 01                	or     BYTE PTR [ecx],al
    3b35:	0c 00                	or     al,0x0
    3b37:	00 01                	add    BYTE PTR [ecx],al
    3b39:	57                   	push   edi
    3b3a:	7d 00                	jge    3b3c <sysEnter_Vector-0x12c4c4>
    3b3c:	00 00                	add    BYTE PTR [eax],al
    3b3e:	02 91 00 08 cf 0b    	add    dl,BYTE PTR [ecx+0xbcf0800]
    3b44:	00 00                	add    BYTE PTR [eax],al
    3b46:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    3b49:	01 00                	add    DWORD PTR [eax],eax
    3b4b:	00 02                	add    BYTE PTR [edx],al
    3b4d:	91                   	xchg   ecx,eax
    3b4e:	04 08                	add    al,0x8
    3b50:	fb                   	sti    
    3b51:	08 00                	or     BYTE PTR [eax],al
    3b53:	00 01                	add    BYTE PTR [ecx],al
    3b55:	57                   	push   edi
    3b56:	3a 00                	cmp    al,BYTE PTR [eax]
    3b58:	00 00                	add    BYTE PTR [eax],al
    3b5a:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    3b60:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    3b63:	00 00                	add    BYTE PTR [eax],al
    3b65:	00 01                	add    BYTE PTR [ecx],al
    3b67:	56                   	push   esi
    3b68:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    3b6b:	63 00                	arpl   WORD PTR [eax],ax
    3b6d:	01 5a 96             	add    DWORD PTR [edx-0x6a],ebx
    3b70:	00 00                	add    BYTE PTR [eax],al
    3b72:	00 01                	add    BYTE PTR [ecx],al
    3b74:	57                   	push   edi
    3b75:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    3b78:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    3b7b:	00 00                	add    BYTE PTR [eax],al
    3b7d:	00 01                	add    BYTE PTR [ecx],al
    3b7f:	53                   	push   ebx
    3b80:	0a fa                	or     bh,dl
    3b82:	0b 00                	or     eax,DWORD PTR [eax]
    3b84:	00 01                	add    BYTE PTR [ecx],al
    3b86:	5c                   	pop    esp
    3b87:	96                   	xchg   esi,eax
    3b88:	00 00                	add    BYTE PTR [eax],al
    3b8a:	00 0b                	add    BYTE PTR [ebx],cl
    3b8c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3b8d:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    3b91:	5d                   	pop    ebp
    3b92:	3a 00                	cmp    al,BYTE PTR [eax]
    3b94:	00 00                	add    BYTE PTR [eax],al
    3b96:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    3b99:	79 00                	jns    3b9b <sysEnter_Vector-0x12c465>
    3b9b:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    3b9e:	00 00                	add    BYTE PTR [eax],al
    3ba0:	00 01                	add    BYTE PTR [ecx],al
    3ba2:	51                   	push   ecx
    3ba3:	0a eb                	or     ch,bl
    3ba5:	0b 00                	or     eax,DWORD PTR [eax]
    3ba7:	00 01                	add    BYTE PTR [ecx],al
    3ba9:	5d                   	pop    ebp
    3baa:	3a 00                	cmp    al,BYTE PTR [eax]
    3bac:	00 00                	add    BYTE PTR [eax],al
    3bae:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    3bb4:	00 0c 5b             	add    BYTE PTR [ebx+ebx*2],cl
    3bb7:	00 00                	add    BYTE PTR [eax],al
    3bb9:	00 02                	add    BYTE PTR [edx],al
    3bbb:	34 56                	xor    al,0x56
    3bbd:	00 00                	add    BYTE PTR [eax],al
    3bbf:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    3bc5:	9f                   	lahf   
    3bc6:	0c 0b                	or     al,0xb
    3bc8:	01 00                	add    DWORD PTR [eax],eax
    3bca:	00 02                	add    BYTE PTR [edx],al
    3bcc:	35 56 00 00 00       	xor    eax,0x56
    3bd1:	05 03 48 5f 00       	add    eax,0x5f4803
    3bd6:	9f                   	lahf   
    3bd7:	0c 64                	or     al,0x64
    3bd9:	00 00                	add    BYTE PTR [eax],al
    3bdb:	00 02                	add    BYTE PTR [edx],al
    3bdd:	36                   	ss
    3bde:	56                   	push   esi
    3bdf:	00 00                	add    BYTE PTR [eax],al
    3be1:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    3be7:	9f                   	lahf   
    3be8:	0c 53                	or     al,0x53
    3bea:	01 00                	add    DWORD PTR [eax],eax
    3bec:	00 02                	add    BYTE PTR [edx],al
    3bee:	37                   	aaa    
    3bef:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3bf0:	00 00                	add    BYTE PTR [eax],al
    3bf2:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    3bf8:	9f                   	lahf   
    3bf9:	0c 38                	or     al,0x38
    3bfb:	00 00                	add    BYTE PTR [eax],al
    3bfd:	00 03                	add    BYTE PTR [ebx],al
    3bff:	52                   	push   edx
    3c00:	38 01                	cmp    BYTE PTR [ecx],al
    3c02:	00 00                	add    BYTE PTR [eax],al
    3c04:	05 03 4c 5f 00       	add    eax,0x5f4c03
    3c09:	9f                   	lahf   
    3c0a:	00 62 01             	add    BYTE PTR [edx+0x1],ah
    3c0d:	00 00                	add    BYTE PTR [eax],al
    3c0f:	04 00                	add    al,0x0
    3c11:	96                   	xchg   esi,eax
    3c12:	14 00                	adc    al,0x0
    3c14:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3c17:	83 00 00             	add    DWORD PTR [eax],0x0
    3c1a:	00 0c 41             	add    BYTE PTR [ecx+eax*2],cl
    3c1d:	0c 00                	or     al,0x0
    3c1f:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
    3c25:	2d 00 9f b6 00       	sub    eax,0xb69f00
    3c2a:	00 00                	add    BYTE PTR [eax],al
    3c2c:	aa                   	stos   BYTE PTR es:[edi],al
    3c2d:	1a 00                	sbb    al,BYTE PTR [eax]
    3c2f:	00 02                	add    BYTE PTR [edx],al
    3c31:	01 06                	add    DWORD PTR [esi],eax
    3c33:	75 00                	jne    3c35 <sysEnter_Vector-0x12c3cb>
    3c35:	00 00                	add    BYTE PTR [eax],al
    3c37:	02 01                	add    al,BYTE PTR [ecx]
    3c39:	06                   	push   es
    3c3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3c3b:	00 00                	add    BYTE PTR [eax],al
    3c3d:	00 02                	add    BYTE PTR [edx],al
    3c3f:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3c45:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3c4c:	02 08                	add    cl,BYTE PTR [eax]
    3c4e:	05 00 00 00 00       	add    eax,0x0
    3c53:	02 01                	add    al,BYTE PTR [ecx]
    3c55:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3c59:	00 02                	add    BYTE PTR [edx],al
    3c5b:	02 07                	add    al,BYTE PTR [edi]
    3c5d:	f0 00 00             	lock add BYTE PTR [eax],al
    3c60:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3c63:	00 00                	add    BYTE PTR [eax],al
    3c65:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3c68:	61                   	popa   
    3c69:	00 00                	add    BYTE PTR [eax],al
    3c6b:	00 02                	add    BYTE PTR [edx],al
    3c6d:	04 07                	add    al,0x7
    3c6f:	4e                   	dec    esi
    3c70:	00 00                	add    BYTE PTR [eax],al
    3c72:	00 02                	add    BYTE PTR [edx],al
    3c74:	08 07                	or     BYTE PTR [edi],al
    3c76:	44                   	inc    esp
    3c77:	00 00                	add    BYTE PTR [eax],al
    3c79:	00 02                	add    BYTE PTR [edx],al
    3c7b:	04 05                	add    al,0x5
    3c7d:	05 00 00 00 02       	add    eax,0x2000000
    3c82:	0c 04                	or     al,0x4
    3c84:	3d 01 00 00 02       	cmp    eax,0x2000001
    3c89:	01 02                	add    DWORD PTR [edx],eax
    3c8b:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3c92:	5a                   	pop    edx
    3c93:	01 00                	add    DWORD PTR [eax],eax
    3c95:	00 02                	add    BYTE PTR [edx],al
    3c97:	04 07                	add    al,0x7
    3c99:	49                   	dec    ecx
    3c9a:	00 00                	add    BYTE PTR [eax],al
    3c9c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3ca2:	00 06                	add    BYTE PTR [esi],al
    3ca4:	65                   	gs
    3ca5:	0c 00                	or     al,0x0
    3ca7:	00 01                	add    BYTE PTR [ecx],al
    3ca9:	03 00                	add    eax,DWORD PTR [eax]
    3cab:	2d 00 9f 96 00       	sub    eax,0x969f00
    3cb0:	00 00                	add    BYTE PTR [eax],al
    3cb2:	01 9c e6 00 00 00 07 	add    DWORD PTR [esi+eiz*8+0x7000000],ebx
    3cb9:	5f                   	pop    edi
    3cba:	0c 00                	or     al,0x0
    3cbc:	00 01                	add    BYTE PTR [ecx],al
    3cbe:	03 92 00 00 00 02    	add    edx,DWORD PTR [edx+0x2000000]
    3cc4:	91                   	xchg   ecx,eax
    3cc5:	00 08                	add    BYTE PTR [eax],cl
    3cc7:	64                   	fs
    3cc8:	73 74                	jae    3d3e <sysEnter_Vector-0x12c2c2>
    3cca:	00 01                	add    BYTE PTR [ecx],al
    3ccc:	05 92 00 00 00       	add    eax,0x92
    3cd1:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    3cd7:	63 00                	arpl   WORD PTR [eax],ax
    3cd9:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    3cdf:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    3ce5:	64 00 01             	add    BYTE PTR fs:[ecx],al
    3ce8:	06                   	push   es
    3ce9:	92                   	xchg   edx,eax
    3cea:	00 00                	add    BYTE PTR [eax],al
    3cec:	00 02                	add    BYTE PTR [edx],al
    3cee:	91                   	xchg   ecx,eax
    3cef:	64 00 06             	add    BYTE PTR fs:[esi],al
    3cf2:	57                   	push   edi
    3cf3:	0c 00                	or     al,0x0
    3cf5:	00 01                	add    BYTE PTR [ecx],al
    3cf7:	1f                   	pop    ds
    3cf8:	96                   	xchg   esi,eax
    3cf9:	2d 00 9f 20 00       	sub    eax,0x209f00
    3cfe:	00 00                	add    BYTE PTR [eax],al
    3d00:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    3d07:	5f                   	pop    edi
    3d08:	0c 00                	or     al,0x0
    3d0a:	00 01                	add    BYTE PTR [ecx],al
    3d0c:	1f                   	pop    ds
    3d0d:	92                   	xchg   edx,eax
    3d0e:	00 00                	add    BYTE PTR [eax],al
    3d10:	00 02                	add    BYTE PTR [edx],al
    3d12:	91                   	xchg   ecx,eax
    3d13:	00 00                	add    BYTE PTR [eax],al
    3d15:	09 5b 00             	or     DWORD PTR [ebx+0x0],ebx
    3d18:	00 00                	add    BYTE PTR [eax],al
    3d1a:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    3d1d:	00 00                	add    BYTE PTR [eax],al
    3d1f:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    3d25:	9f                   	lahf   
    3d26:	09 0b                	or     DWORD PTR [ebx],ecx
    3d28:	01 00                	add    DWORD PTR [eax],eax
    3d2a:	00 02                	add    BYTE PTR [edx],al
    3d2c:	35 56 00 00 00       	xor    eax,0x56
    3d31:	05 03 48 5f 00       	add    eax,0x5f4803
    3d36:	9f                   	lahf   
    3d37:	09 64 00 00          	or     DWORD PTR [eax+eax*1+0x0],esp
    3d3b:	00 02                	add    BYTE PTR [edx],al
    3d3d:	36                   	ss
    3d3e:	56                   	push   esi
    3d3f:	00 00                	add    BYTE PTR [eax],al
    3d41:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    3d47:	9f                   	lahf   
    3d48:	09 53 01             	or     DWORD PTR [ebx+0x1],edx
    3d4b:	00 00                	add    BYTE PTR [eax],al
    3d4d:	02 37                	add    dh,BYTE PTR [edi]
    3d4f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3d50:	00 00                	add    BYTE PTR [eax],al
    3d52:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    3d58:	9f                   	lahf   
    3d59:	09 38                	or     DWORD PTR [eax],edi
    3d5b:	00 00                	add    BYTE PTR [eax],al
    3d5d:	00 03                	add    BYTE PTR [ebx],al
    3d5f:	52                   	push   edx
    3d60:	5f                   	pop    edi
    3d61:	01 00                	add    DWORD PTR [eax],eax
    3d63:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    3d69:	9f                   	lahf   
    3d6a:	05 04 92 00 00       	add    eax,0x9204
    3d6f:	00 00                	add    BYTE PTR [eax],al
    3d71:	c2 01 00             	ret    0x1
    3d74:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3d77:	1f                   	pop    ds
    3d78:	15 00 00 04 01       	adc    eax,0x1040000
    3d7d:	83 00 00             	add    DWORD PTR [eax],0x0
    3d80:	00 0c 76             	add    BYTE PTR [esi+esi*2],cl
    3d83:	0c 00                	or     al,0x0
    3d85:	00 15 00 00 00 b8    	add    BYTE PTR ds:0xb8000000,dl
    3d8b:	2d 00 9f 69 01       	sub    eax,0x1699f00
    3d90:	00 00                	add    BYTE PTR [eax],al
    3d92:	7d 1b                	jge    3daf <sysEnter_Vector-0x12c251>
    3d94:	00 00                	add    BYTE PTR [eax],al
    3d96:	02 01                	add    al,BYTE PTR [ecx]
    3d98:	06                   	push   es
    3d99:	75 00                	jne    3d9b <sysEnter_Vector-0x12c265>
    3d9b:	00 00                	add    BYTE PTR [eax],al
    3d9d:	02 01                	add    al,BYTE PTR [ecx]
    3d9f:	06                   	push   es
    3da0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3da1:	00 00                	add    BYTE PTR [eax],al
    3da3:	00 02                	add    BYTE PTR [edx],al
    3da5:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3dab:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3db2:	02 08                	add    cl,BYTE PTR [eax]
    3db4:	05 00 00 00 00       	add    eax,0x0
    3db9:	02 01                	add    al,BYTE PTR [ecx]
    3dbb:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3dbf:	00 02                	add    BYTE PTR [edx],al
    3dc1:	02 07                	add    al,BYTE PTR [edi]
    3dc3:	f0 00 00             	lock add BYTE PTR [eax],al
    3dc6:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3dc9:	00 00                	add    BYTE PTR [eax],al
    3dcb:	00 02                	add    BYTE PTR [edx],al
    3dcd:	34 61                	xor    al,0x61
    3dcf:	00 00                	add    BYTE PTR [eax],al
    3dd1:	00 02                	add    BYTE PTR [edx],al
    3dd3:	04 07                	add    al,0x7
    3dd5:	4e                   	dec    esi
    3dd6:	00 00                	add    BYTE PTR [eax],al
    3dd8:	00 02                	add    BYTE PTR [edx],al
    3dda:	08 07                	or     BYTE PTR [edi],al
    3ddc:	44                   	inc    esp
    3ddd:	00 00                	add    BYTE PTR [eax],al
    3ddf:	00 04 23             	add    BYTE PTR [ebx+eiz*1],al
    3de2:	05 00 00 03 d8       	add    eax,0xd8030000
    3de7:	61                   	popa   
    3de8:	00 00                	add    BYTE PTR [eax],al
    3dea:	00 02                	add    BYTE PTR [edx],al
    3dec:	04 05                	add    al,0x5
    3dee:	05 00 00 00 02       	add    eax,0x2000000
    3df3:	0c 04                	or     al,0x4
    3df5:	3d 01 00 00 05       	cmp    eax,0x5000001
    3dfa:	04 8e                	add    al,0x8e
    3dfc:	00 00                	add    BYTE PTR [eax],al
    3dfe:	00 06                	add    BYTE PTR [esi],al
    3e00:	25 00 00 00 02       	and    eax,0x2000000
    3e05:	01 02                	add    DWORD PTR [edx],eax
    3e07:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3e0e:	5a                   	pop    edx
    3e0f:	01 00                	add    DWORD PTR [eax],eax
    3e11:	00 02                	add    BYTE PTR [edx],al
    3e13:	04 07                	add    al,0x7
    3e15:	49                   	dec    ecx
    3e16:	00 00                	add    BYTE PTR [eax],al
    3e18:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3e1e:	00 07                	add    BYTE PTR [edi],al
    3e20:	ab                   	stos   DWORD PTR es:[edi],eax
    3e21:	0c 00                	or     al,0x0
    3e23:	00 01                	add    BYTE PTR [ecx],al
    3e25:	0a a8 00 00 00 b8    	or     ch,BYTE PTR [eax-0x48000000]
    3e2b:	2d 00 9f 43 01       	sub    eax,0x1439f00
    3e30:	00 00                	add    BYTE PTR [eax],al
    3e32:	01 9c 28 01 00 00 08 	add    DWORD PTR [eax+ebp*1+0x8000001],ebx
    3e39:	69 6e 00 01 0a 88 00 	imul   ebp,DWORD PTR [esi+0x0],0x880a01
    3e40:	00 00                	add    BYTE PTR [eax],al
    3e42:	02 91 00 09 a3 0c    	add    dl,BYTE PTR [ecx+0xca30900]
    3e48:	00 00                	add    BYTE PTR [eax],al
    3e4a:	01 0a                	add    DWORD PTR [edx],ecx
    3e4c:	88 00                	mov    BYTE PTR [eax],al
    3e4e:	00 00                	add    BYTE PTR [eax],al
    3e50:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    3e56:	00 01                	add    BYTE PTR [ecx],al
    3e58:	0a 88 00 00 00 02    	or     cl,BYTE PTR [eax+0x2000000]
    3e5e:	91                   	xchg   ecx,eax
    3e5f:	08 0a                	or     BYTE PTR [edx],cl
    3e61:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3e62:	0c 00                	or     al,0x0
    3e64:	00 01                	add    BYTE PTR [ecx],al
    3e66:	0c 6f                	or     al,0x6f
    3e68:	00 00                	add    BYTE PTR [eax],al
    3e6a:	00 02                	add    BYTE PTR [edx],al
    3e6c:	91                   	xchg   ecx,eax
    3e6d:	6c                   	ins    BYTE PTR es:[edi],dx
    3e6e:	0b 72 65             	or     esi,DWORD PTR [edx+0x65]
    3e71:	73 00                	jae    3e73 <sysEnter_Vector-0x12c18d>
    3e73:	01 0e                	add    DWORD PTR [esi],ecx
    3e75:	a8 00                	test   al,0x0
    3e77:	00 00                	add    BYTE PTR [eax],al
    3e79:	02 91 68 0a 8e 0c    	add    dl,BYTE PTR [ecx+0xc8e0a68]
    3e7f:	00 00                	add    BYTE PTR [eax],al
    3e81:	01 10                	add    DWORD PTR [eax],edx
    3e83:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3e84:	00 00                	add    BYTE PTR [eax],al
    3e86:	00 02                	add    BYTE PTR [edx],al
    3e88:	91                   	xchg   ecx,eax
    3e89:	64 0a 87 0c 00 00 01 	or     al,BYTE PTR fs:[edi+0x100000c]
    3e90:	12 a8 00 00 00 02    	adc    ch,BYTE PTR [eax+0x2000000]
    3e96:	91                   	xchg   ecx,eax
    3e97:	60                   	pusha  
    3e98:	00 0c 98             	add    BYTE PTR [eax+ebx*4],cl
    3e9b:	0c 00                	or     al,0x0
    3e9d:	00 01                	add    BYTE PTR [ecx],al
    3e9f:	2a a8 00 00 00 fb    	sub    ch,BYTE PTR [eax-0x5000000]
    3ea5:	2e 00 9f 26 00 00 00 	add    BYTE PTR cs:[edi+0x26],bl
    3eac:	01 9c 6a 01 00 00 08 	add    DWORD PTR [edx+ebp*2+0x8000001],ebx
    3eb3:	69 6e 00 01 2a 88 00 	imul   ebp,DWORD PTR [esi+0x0],0x882a01
    3eba:	00 00                	add    BYTE PTR [eax],al
    3ebc:	02 91 00 09 a3 0c    	add    dl,BYTE PTR [ecx+0xca30900]
    3ec2:	00 00                	add    BYTE PTR [eax],al
    3ec4:	01 2a                	add    DWORD PTR [edx],ebp
    3ec6:	88 00                	mov    BYTE PTR [eax],al
    3ec8:	00 00                	add    BYTE PTR [eax],al
    3eca:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    3ed0:	00 01                	add    BYTE PTR [ecx],al
    3ed2:	2a 88 00 00 00 02    	sub    cl,BYTE PTR [eax+0x2000000]
    3ed8:	91                   	xchg   ecx,eax
    3ed9:	08 00                	or     BYTE PTR [eax],al
    3edb:	0d 5b 00 00 00       	or     eax,0x5b
    3ee0:	04 34                	add    al,0x34
    3ee2:	56                   	push   esi
    3ee3:	00 00                	add    BYTE PTR [eax],al
    3ee5:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    3eeb:	9f                   	lahf   
    3eec:	0d 0b 01 00 00       	or     eax,0x10b
    3ef1:	04 35                	add    al,0x35
    3ef3:	56                   	push   esi
    3ef4:	00 00                	add    BYTE PTR [eax],al
    3ef6:	00 05 03 48 5f 00    	add    BYTE PTR ds:0x5f4803,al
    3efc:	9f                   	lahf   
    3efd:	0d 64 00 00 00       	or     eax,0x64
    3f02:	04 36                	add    al,0x36
    3f04:	56                   	push   esi
    3f05:	00 00                	add    BYTE PTR [eax],al
    3f07:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    3f0d:	9f                   	lahf   
    3f0e:	0d 53 01 00 00       	or     eax,0x153
    3f13:	04 37                	add    al,0x37
    3f15:	7a 00                	jp     3f17 <sysEnter_Vector-0x12c0e9>
    3f17:	00 00                	add    BYTE PTR [eax],al
    3f19:	05 03 50 5f 00       	add    eax,0x5f5003
    3f1e:	9f                   	lahf   
    3f1f:	0d 38 00 00 00       	or     eax,0x38
    3f24:	05 52 bf 01 00       	add    eax,0x1bf52
    3f29:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    3f2f:	9f                   	lahf   
    3f30:	05 04 a8 00 00       	add    eax,0xa804
    3f35:	00 00                	add    BYTE PTR [eax],al
    3f37:	06                   	push   es
    3f38:	02 00                	add    al,BYTE PTR [eax]
    3f3a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3f3d:	e9 15 00 00 04       	jmp    4003f57 <sysEnter_Vector+0x3ed3f57>
    3f42:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    3f48:	c8 0c 00 00          	enter  0xc,0x0
    3f4c:	15 00 00 00 24       	adc    eax,0x24000000
    3f51:	2f                   	das    
    3f52:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
    3f58:	5f                   	pop    edi
    3f59:	1c 00                	sbb    al,0x0
    3f5b:	00 02                	add    BYTE PTR [edx],al
    3f5d:	01 06                	add    DWORD PTR [esi],eax
    3f5f:	75 00                	jne    3f61 <sysEnter_Vector-0x12c09f>
    3f61:	00 00                	add    BYTE PTR [eax],al
    3f63:	02 01                	add    al,BYTE PTR [ecx]
    3f65:	06                   	push   es
    3f66:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3f67:	00 00                	add    BYTE PTR [eax],al
    3f69:	00 02                	add    BYTE PTR [edx],al
    3f6b:	02 05 49 01 00 00    	add    al,BYTE PTR ds:0x149
    3f71:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3f78:	02 08                	add    cl,BYTE PTR [eax]
    3f7a:	05 00 00 00 00       	add    eax,0x0
    3f7f:	02 01                	add    al,BYTE PTR [ecx]
    3f81:	08 6c 00 00          	or     BYTE PTR [eax+eax*1+0x0],ch
    3f85:	00 02                	add    BYTE PTR [edx],al
    3f87:	02 07                	add    al,BYTE PTR [edi]
    3f89:	f0 00 00             	lock add BYTE PTR [eax],al
    3f8c:	00 04 7a             	add    BYTE PTR [edx+edi*2],al
    3f8f:	00 00                	add    BYTE PTR [eax],al
    3f91:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3f94:	61                   	popa   
    3f95:	00 00                	add    BYTE PTR [eax],al
    3f97:	00 02                	add    BYTE PTR [edx],al
    3f99:	04 07                	add    al,0x7
    3f9b:	4e                   	dec    esi
    3f9c:	00 00                	add    BYTE PTR [eax],al
    3f9e:	00 02                	add    BYTE PTR [edx],al
    3fa0:	08 07                	or     BYTE PTR [edi],al
    3fa2:	44                   	inc    esp
    3fa3:	00 00                	add    BYTE PTR [eax],al
    3fa5:	00 02                	add    BYTE PTR [edx],al
    3fa7:	04 05                	add    al,0x5
    3fa9:	05 00 00 00 02       	add    eax,0x2000000
    3fae:	0c 04                	or     al,0x4
    3fb0:	3d 01 00 00 05       	cmp    eax,0x5000001
    3fb5:	04 83                	add    al,0x83
    3fb7:	00 00                	add    BYTE PTR [eax],al
    3fb9:	00 06                	add    BYTE PTR [esi],al
    3fbb:	25 00 00 00 02       	and    eax,0x2000000
    3fc0:	01 02                	add    DWORD PTR [edx],eax
    3fc2:	ea 00 00 00 02 04 07 	jmp    0x704:0x2000000
    3fc9:	5a                   	pop    edx
    3fca:	01 00                	add    DWORD PTR [eax],eax
    3fcc:	00 02                	add    BYTE PTR [edx],al
    3fce:	04 07                	add    al,0x7
    3fd0:	49                   	dec    ecx
    3fd1:	00 00                	add    BYTE PTR [eax],al
    3fd3:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3fd9:	00 07                	add    BYTE PTR [edi],al
    3fdb:	bf 0c 00 00 01       	mov    edi,0x100000c
    3fe0:	33 9d 00 00 00 24    	xor    ebx,DWORD PTR [ebp+0x24000000]
    3fe6:	2f                   	das    
    3fe7:	00 9f 9e 00 00 00    	add    BYTE PTR [edi+0x9e],bl
    3fed:	01 9c 0b 01 00 00 08 	add    DWORD PTR [ebx+ecx*1+0x8000001],ebx
    3ff4:	de 0c 00             	fimul  WORD PTR [eax+eax*1]
    3ff7:	00 01                	add    BYTE PTR [ecx],al
    3ff9:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
    3fff:	91                   	xchg   ecx,eax
    4000:	00 08                	add    BYTE PTR [eax],cl
    4002:	db 0c 00             	fisttp DWORD PTR [eax+eax*1]
    4005:	00 01                	add    BYTE PTR [ecx],al
    4007:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
    400d:	91                   	xchg   ecx,eax
    400e:	04 08                	add    al,0x8
    4010:	45                   	inc    ebp
    4011:	04 00                	add    al,0x0
    4013:	00 01                	add    BYTE PTR [ecx],al
    4015:	33 3a                	xor    edi,DWORD PTR [edx]
    4017:	00 00                	add    BYTE PTR [eax],al
    4019:	00 02                	add    BYTE PTR [edx],al
    401b:	91                   	xchg   ecx,eax
    401c:	08 09                	or     BYTE PTR [ecx],cl
    401e:	61                   	popa   
    401f:	00 01                	add    BYTE PTR [ecx],al
    4021:	35 9d 00 00 00       	xor    eax,0x9d
    4026:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4029:	62 00                	bound  eax,QWORD PTR [eax]
    402b:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
    4031:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    4034:	6c                   	ins    BYTE PTR es:[edi],dx
    4035:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    4037:	00 01                	add    BYTE PTR [ecx],al
    4039:	3b 3a                	cmp    edi,DWORD PTR [edx]
    403b:	00 00                	add    BYTE PTR [eax],al
    403d:	00 02                	add    BYTE PTR [edx],al
    403f:	91                   	xchg   ecx,eax
    4040:	6c                   	ins    BYTE PTR es:[edi],dx
    4041:	00 07                	add    BYTE PTR [edi],al
    4043:	b7 0c                	mov    bh,0xc
    4045:	00 00                	add    BYTE PTR [eax],al
    4047:	01 57 9d             	add    DWORD PTR [edi-0x63],edx
    404a:	00 00                	add    BYTE PTR [eax],al
    404c:	00 c2                	add    dl,al
    404e:	2f                   	das    
    404f:	00 9f 6e 00 00 00    	add    BYTE PTR [edi+0x6e],bl
    4055:	01 9c 57 01 00 00 08 	add    DWORD PTR [edi+edx*2+0x8000001],ebx
    405c:	de 0c 00             	fimul  WORD PTR [eax+eax*1]
    405f:	00 01                	add    BYTE PTR [ecx],al
    4061:	57                   	push   edi
    4062:	7d 00                	jge    4064 <sysEnter_Vector-0x12bf9c>
    4064:	00 00                	add    BYTE PTR [eax],al
    4066:	02 91 00 08 db 0c    	add    dl,BYTE PTR [ecx+0xcdb0800]
    406c:	00 00                	add    BYTE PTR [eax],al
    406e:	01 57 7d             	add    DWORD PTR [edi+0x7d],edx
    4071:	00 00                	add    BYTE PTR [eax],al
    4073:	00 02                	add    BYTE PTR [edx],al
    4075:	91                   	xchg   ecx,eax
    4076:	04 09                	add    al,0x9
    4078:	61                   	popa   
    4079:	00 01                	add    BYTE PTR [ecx],al
    407b:	59                   	pop    ecx
    407c:	9d                   	popf   
    407d:	00 00                	add    BYTE PTR [eax],al
    407f:	00 01                	add    BYTE PTR [ecx],al
    4081:	56                   	push   esi
    4082:	09 62 00             	or     DWORD PTR [edx+0x0],esp
    4085:	01 59 9d             	add    DWORD PTR [ecx-0x63],ebx
    4088:	00 00                	add    BYTE PTR [eax],al
    408a:	00 01                	add    BYTE PTR [ecx],al
    408c:	53                   	push   ebx
    408d:	00 0a                	add    BYTE PTR [edx],cl
    408f:	e5 0c                	in     eax,0xc
    4091:	00 00                	add    BYTE PTR [eax],al
    4093:	01 76 9d             	add    DWORD PTR [esi-0x63],esi
    4096:	00 00                	add    BYTE PTR [eax],al
    4098:	00 30                	add    BYTE PTR [eax],dh
    409a:	30 00                	xor    BYTE PTR [eax],al
    409c:	9f                   	lahf   
    409d:	1d 00 00 00 01       	sbb    eax,0x1000000
    40a2:	9c                   	pushf  
    40a3:	8d 01                	lea    eax,[ecx]
    40a5:	00 00                	add    BYTE PTR [eax],al
    40a7:	08 de                	or     dh,bl
    40a9:	0c 00                	or     al,0x0
    40ab:	00 01                	add    BYTE PTR [ecx],al
    40ad:	76 7d                	jbe    412c <sysEnter_Vector-0x12bed4>
    40af:	00 00                	add    BYTE PTR [eax],al
    40b1:	00 02                	add    BYTE PTR [edx],al
    40b3:	91                   	xchg   ecx,eax
    40b4:	00 08                	add    BYTE PTR [eax],cl
    40b6:	db 0c 00             	fisttp DWORD PTR [eax+eax*1]
    40b9:	00 01                	add    BYTE PTR [ecx],al
    40bb:	76 7d                	jbe    413a <sysEnter_Vector-0x12bec6>
    40bd:	00 00                	add    BYTE PTR [eax],al
    40bf:	00 02                	add    BYTE PTR [edx],al
    40c1:	91                   	xchg   ecx,eax
    40c2:	04 00                	add    al,0x0
    40c4:	0b 25 00 00 00 9d    	or     esp,DWORD PTR ds:0x9d000000
    40ca:	01 00                	add    DWORD PTR [eax],eax
    40cc:	00 0c 8f             	add    BYTE PTR [edi+ecx*4],cl
    40cf:	00 00                	add    BYTE PTR [eax],al
    40d1:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    40d4:	0d d5 0c 00 00       	or     eax,0xcd5
    40d9:	01 19                	add    DWORD PTR [ecx],ebx
    40db:	8d 01                	lea    eax,[ecx]
    40dd:	00 00                	add    BYTE PTR [eax],al
    40df:	05 03 c0 5d 00       	add    eax,0x5dc003
    40e4:	9f                   	lahf   
    40e5:	0e                   	push   cs
    40e6:	5b                   	pop    ebx
    40e7:	00 00                	add    BYTE PTR [eax],al
    40e9:	00 02                	add    BYTE PTR [edx],al
    40eb:	34 56                	xor    al,0x56
    40ed:	00 00                	add    BYTE PTR [eax],al
    40ef:	00 05 03 44 5f 00    	add    BYTE PTR ds:0x5f4403,al
    40f5:	9f                   	lahf   
    40f6:	0e                   	push   cs
    40f7:	0b 01                	or     eax,DWORD PTR [ecx]
    40f9:	00 00                	add    BYTE PTR [eax],al
    40fb:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    4101:	05 03 48 5f 00       	add    eax,0x5f4803
    4106:	9f                   	lahf   
    4107:	0e                   	push   cs
    4108:	64 00 00             	add    BYTE PTR fs:[eax],al
    410b:	00 02                	add    BYTE PTR [edx],al
    410d:	36                   	ss
    410e:	56                   	push   esi
    410f:	00 00                	add    BYTE PTR [eax],al
    4111:	00 05 03 40 5f 00    	add    BYTE PTR ds:0x5f4003,al
    4117:	9f                   	lahf   
    4118:	0e                   	push   cs
    4119:	53                   	push   ebx
    411a:	01 00                	add    DWORD PTR [eax],eax
    411c:	00 02                	add    BYTE PTR [edx],al
    411e:	37                   	aaa    
    411f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    4120:	00 00                	add    BYTE PTR [eax],al
    4122:	00 05 03 50 5f 00    	add    BYTE PTR ds:0x5f5003,al
    4128:	9f                   	lahf   
    4129:	0e                   	push   cs
    412a:	38 00                	cmp    BYTE PTR [eax],al
    412c:	00 00                	add    BYTE PTR [eax],al
    412e:	03 52 03             	add    edx,DWORD PTR [edx+0x3]
    4131:	02 00                	add    al,BYTE PTR [eax]
    4133:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    4139:	9f                   	lahf   
    413a:	05 04 9d 00 00       	add    eax,0x9d04
    413f:	00 00                	add    BYTE PTR [eax],al
    4141:	96                   	xchg   esi,eax
    4142:	05 00 00 04 00       	add    eax,0x40000
    4147:	b8 16 00 00 04       	mov    eax,0x4000016
    414c:	01 83 00 00 00 0c    	add    DWORD PTR [ebx+0xc000000],eax
    4152:	ec                   	in     al,dx
    4153:	0c 00                	or     al,0x0
    4155:	00 15 00 00 00 50    	add    BYTE PTR ds:0x50000000,dl
    415b:	30 00                	xor    BYTE PTR [eax],al
    415d:	9f                   	lahf   
    415e:	17                   	pop    ss
    415f:	0d 00 00 4c 1d       	or     eax,0x1d4c0000
    4164:	00 00                	add    BYTE PTR [eax],al
    4166:	02 94 03 00 00 04 f3 	add    dl,BYTE PTR [ebx+eax*1-0xcfc0000]
    416d:	00 00                	add    BYTE PTR [eax],al
    416f:	00 06                	add    BYTE PTR [esi],al
    4171:	15 f3 00 00 00       	adc    eax,0xf3
    4176:	03 51 03             	add    edx,DWORD PTR [ecx+0x3]
    4179:	00 00                	add    BYTE PTR [eax],al
    417b:	00 03                	add    BYTE PTR [ebx],al
    417d:	93                   	xchg   ebx,eax
    417e:	04 00                	add    al,0x0
    4180:	00 01                	add    BYTE PTR [ecx],al
    4182:	03 ce                	add    ecx,esi
    4184:	02 00                	add    al,BYTE PTR [eax]
    4186:	00 02                	add    BYTE PTR [edx],al
    4188:	03 85 04 00 00 03    	add    eax,DWORD PTR [ebp+0x3000004]
    418e:	03 f9                	add    edi,ecx
    4190:	02 00                	add    al,BYTE PTR [eax]
    4192:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4195:	eb 02                	jmp    4199 <sysEnter_Vector-0x12be67>
    4197:	00 00                	add    BYTE PTR [eax],al
    4199:	05 03 63 04 00       	add    eax,0x46303
    419e:	00 06                	add    BYTE PTR [esi],al
    41a0:	03 db                	add    ebx,ebx
    41a2:	03 00                	add    eax,DWORD PTR [eax]
    41a4:	00 07                	add    BYTE PTR [edi],al
    41a6:	03 28                	add    ebp,DWORD PTR [eax]
    41a8:	03 00                	add    eax,DWORD PTR [eax]
    41aa:	00 08                	add    BYTE PTR [eax],cl
    41ac:	03 ce                	add    ecx,esi
    41ae:	03 00                	add    eax,DWORD PTR [eax]
    41b0:	00 09                	add    BYTE PTR [ecx],cl
    41b2:	03 e8                	add    ebp,eax
    41b4:	03 00                	add    eax,DWORD PTR [eax]
    41b6:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    41b9:	13 04 00             	adc    eax,DWORD PTR [eax+eax*1]
    41bc:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    41bf:	96                   	xchg   esi,eax
    41c0:	02 00                	add    al,BYTE PTR [eax]
    41c2:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    41c5:	a9 03 00 00 97       	test   eax,0x97000003
    41ca:	04 71                	add    al,0x71
    41cc:	03 00                	add    eax,DWORD PTR [eax]
    41ce:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    41d1:	04 06                	add    al,0x6
    41d3:	04 00                	add    al,0x0
    41d5:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    41d9:	37                   	aaa    
    41da:	04 00                	add    al,0x0
    41dc:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    41df:	04 ba                	add    al,0xba
    41e1:	02 00                	add    al,BYTE PTR [eax]
    41e3:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    41e6:	04 13                	add    al,0x13
    41e8:	03 00                	add    eax,DWORD PTR [eax]
    41ea:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    41ed:	04 06                	add    al,0x6
    41ef:	03 00                	add    eax,DWORD PTR [eax]
    41f1:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    41f4:	04 a6                	add    al,0xa6
    41f6:	04 00                	add    al,0x0
    41f8:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    41fb:	04 a9                	add    al,0xa9
    41fd:	02 00                	add    al,BYTE PTR [eax]
    41ff:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4202:	04 db                	add    al,0xdb
    4204:	02 00                	add    al,BYTE PTR [eax]
    4206:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4209:	04 77                	add    al,0x77
    420b:	04 00                	add    al,0x0
    420d:	00 00                	add    BYTE PTR [eax],al
    420f:	03 04 f7             	add    eax,DWORD PTR [edi+esi*8]
    4212:	03 00                	add    eax,DWORD PTR [eax]
    4214:	00 01                	add    BYTE PTR [ecx],al
    4216:	03 04 88             	add    eax,DWORD PTR [eax+ecx*4]
    4219:	03 00                	add    eax,DWORD PTR [eax]
    421b:	00 02                	add    BYTE PTR [edx],al
    421d:	03 04 61             	add    eax,DWORD PTR [ecx+eiz*2]
    4220:	03 00                	add    eax,DWORD PTR [eax]
    4222:	00 03                	add    BYTE PTR [ebx],al
    4224:	03 04 bd 03 00 00 04 	add    eax,DWORD PTR [edi*4+0x4000003]
    422b:	03 04 27             	add    eax,DWORD PTR [edi+eiz*1]
    422e:	04 00                	add    al,0x0
    4230:	00 05 03 00 05 04    	add    BYTE PTR ds:0x4050003,al
    4236:	07                   	pop    es
    4237:	4e                   	dec    esi
    4238:	00 00                	add    BYTE PTR [eax],al
    423a:	00 06                	add    BYTE PTR [esi],al
    423c:	04 05                	add    al,0x5
    423e:	69 6e 74 00 05 01 06 	imul   ebp,DWORD PTR [esi+0x74],0x6010500
    4245:	75 00                	jne    4247 <sysEnter_Vector-0x12bdb9>
    4247:	00 00                	add    BYTE PTR [eax],al
    4249:	05 01 06 6e 00       	add    eax,0x6e0601
    424e:	00 00                	add    BYTE PTR [eax],al
    4250:	05 02 05 49 01       	add    eax,0x1490502
    4255:	00 00                	add    BYTE PTR [eax],al
    4257:	05 08 05 00 00       	add    eax,0x508
    425c:	00 00                	add    BYTE PTR [eax],al
    425e:	05 01 08 6c 00       	add    eax,0x6c0801
    4263:	00 00                	add    BYTE PTR [eax],al
    4265:	05 02 07 f0 00       	add    eax,0xf00702
    426a:	00 00                	add    BYTE PTR [eax],al
    426c:	07                   	pop    es
    426d:	7a 00                	jp     426f <sysEnter_Vector-0x12bd91>
    426f:	00 00                	add    BYTE PTR [eax],al
    4271:	02 34 f3             	add    dh,BYTE PTR [ebx+esi*8]
    4274:	00 00                	add    BYTE PTR [eax],al
    4276:	00 05 08 07 44 00    	add    BYTE PTR ds:0x440708,al
    427c:	00 00                	add    BYTE PTR [eax],al
    427e:	05 04 05 05 00       	add    eax,0x50504
    4283:	00 00                	add    BYTE PTR [eax],al
    4285:	05 0c 04 3d 01       	add    eax,0x13d040c
    428a:	00 00                	add    BYTE PTR [eax],al
    428c:	07                   	pop    es
    428d:	8e 0d 00 00 03 2a    	mov    cs,WORD PTR ds:0x2a030000
    4293:	3d 01 00 00 08       	cmp    eax,0x8000001
    4298:	74 6d                	je     4307 <sysEnter_Vector-0x12bcf9>
    429a:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    429d:	2c e6                	sub    al,0xe6
    429f:	01 00                	add    DWORD PTR [eax],eax
    42a1:	00 09                	add    BYTE PTR [ecx],cl
    42a3:	d1 0d 00 00 03 2e    	ror    DWORD PTR ds:0x2e030000,1
    42a9:	fa                   	cli    
    42aa:	00 00                	add    BYTE PTR [eax],al
    42ac:	00 00                	add    BYTE PTR [eax],al
    42ae:	09 6f 0d             	or     DWORD PTR [edi+0xd],ebp
    42b1:	00 00                	add    BYTE PTR [eax],al
    42b3:	03 2f                	add    ebp,DWORD PTR [edi]
    42b5:	fa                   	cli    
    42b6:	00 00                	add    BYTE PTR [eax],al
    42b8:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    42bb:	01 0d 00 00 03 30    	add    DWORD PTR ds:0x30030000,ecx
    42c1:	fa                   	cli    
    42c2:	00 00                	add    BYTE PTR [eax],al
    42c4:	00 08                	add    BYTE PTR [eax],cl
    42c6:	09 c9                	or     ecx,ecx
    42c8:	0d 00 00 03 31       	or     eax,0x31030000
    42cd:	fa                   	cli    
    42ce:	00 00                	add    BYTE PTR [eax],al
    42d0:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    42d3:	39 0d 00 00 03 32    	cmp    DWORD PTR ds:0x32030000,ecx
    42d9:	fa                   	cli    
    42da:	00 00                	add    BYTE PTR [eax],al
    42dc:	00 10                	add    BYTE PTR [eax],dl
    42de:	09 40 0d             	or     DWORD PTR [eax+0xd],eax
    42e1:	00 00                	add    BYTE PTR [eax],al
    42e3:	03 33                	add    esi,DWORD PTR [ebx]
    42e5:	fa                   	cli    
    42e6:	00 00                	add    BYTE PTR [eax],al
    42e8:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    42eb:	bb 0d 00 00 03       	mov    ebx,0x300000d
    42f0:	34 fa                	xor    al,0xfa
    42f2:	00 00                	add    BYTE PTR [eax],al
    42f4:	00 18                	add    BYTE PTR [eax],bl
    42f6:	09 76 0d             	or     DWORD PTR [esi+0xd],esi
    42f9:	00 00                	add    BYTE PTR [eax],al
    42fb:	03 35 fa 00 00 00    	add    esi,DWORD PTR ds:0xfa
    4301:	1c 09                	sbb    al,0x9
    4303:	56                   	push   esi
    4304:	0d 00 00 03 36       	or     eax,0x36030000
    4309:	fa                   	cli    
    430a:	00 00                	add    BYTE PTR [eax],al
    430c:	00 20                	add    BYTE PTR [eax],ah
    430e:	09 b1 0d 00 00 03    	or     DWORD PTR [ecx+0x300000d],esi
    4314:	37                   	aaa    
    4315:	3d 01 00 00 24       	cmp    eax,0x24000001
    431a:	09 d8                	or     eax,ebx
    431c:	0d 00 00 03 38       	or     eax,0x38030000
    4321:	e6 01                	out    0x1,al
    4323:	00 00                	add    BYTE PTR [eax],al
    4325:	28 00                	sub    BYTE PTR [eax],al
    4327:	0a 04 ec             	or     al,BYTE PTR [esp+ebp*8]
    432a:	01 00                	add    DWORD PTR [eax],eax
    432c:	00 0b                	add    BYTE PTR [ebx],cl
    432e:	01 01                	add    DWORD PTR [ecx],eax
    4330:	00 00                	add    BYTE PTR [eax],al
    4332:	05 01 02 ea 00       	add    eax,0xea0201
    4337:	00 00                	add    BYTE PTR [eax],al
    4339:	05 04 07 5a 01       	add    eax,0x15a0704
    433e:	00 00                	add    BYTE PTR [eax],al
    4340:	05 04 07 49 00       	add    eax,0x490704
    4345:	00 00                	add    BYTE PTR [eax],al
    4347:	0a 04 01             	or     al,BYTE PTR [ecx+eax*1]
    434a:	01 00                	add    DWORD PTR [eax],eax
    434c:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    434f:	0d 00 00 01 17       	or     eax,0x17010000
    4354:	4b                   	dec    ebx
    4355:	01 00                	add    DWORD PTR [eax],eax
    4357:	00 50 30             	add    BYTE PTR [eax+0x30],dl
    435a:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
    4360:	01 9c 34 02 00 00 0d 	add    DWORD PTR [esp+esi*1+0xd000002],ebx
    4367:	09 05 00 00 01 19    	or     DWORD PTR ds:0x19010000,eax
    436d:	2b 01                	sub    eax,DWORD PTR [ecx]
    436f:	00 00                	add    BYTE PTR [eax],al
    4371:	02 91 6c 00 0e 65    	add    dl,BYTE PTR [ecx+0x650e006c]
    4377:	0d 00 00 01 1f       	or     eax,0x1f010000
    437c:	a2 02 00 00 94       	mov    ds:0x94000002,al
    4381:	30 00                	xor    BYTE PTR [eax],al
    4383:	9f                   	lahf   
    4384:	19 03                	sbb    DWORD PTR [ebx],eax
    4386:	00 00                	add    BYTE PTR [eax],al
    4388:	01 9c a2 02 00 00 0f 	add    DWORD PTR [edx+eiz*4+0xf000002],ebx
    438f:	e0 0d                	loopne 439e <sysEnter_Vector-0x12bc62>
    4391:	00 00                	add    BYTE PTR [eax],al
    4393:	01 1f                	add    DWORD PTR [edi],ebx
    4395:	a8 02                	test   al,0x2
    4397:	00 00                	add    BYTE PTR [eax],al
    4399:	02 91 00 0f 88 0d    	add    dl,BYTE PTR [ecx+0xd880f00]
    439f:	00 00                	add    BYTE PTR [eax],al
    43a1:	01 1f                	add    DWORD PTR [edi],ebx
    43a3:	a2 02 00 00 02       	mov    ds:0x2000002,al
    43a8:	91                   	xchg   ecx,eax
    43a9:	04 0d                	add    al,0xd
    43ab:	ac                   	lods   al,BYTE PTR ds:[esi]
    43ac:	0d 00 00 01 21       	or     eax,0x21010000
    43b1:	4b                   	dec    ebx
    43b2:	01 00                	add    DWORD PTR [eax],eax
    43b4:	00 02                	add    BYTE PTR [edx],al
    43b6:	91                   	xchg   ecx,eax
    43b7:	68 0d a1 0d 00       	push   0xda10d
    43bc:	00 01                	add    BYTE PTR [ecx],al
    43be:	22 ff                	and    bh,bh
    43c0:	01 00                	add    DWORD PTR [eax],eax
    43c2:	00 02                	add    BYTE PTR [edx],al
    43c4:	91                   	xchg   ecx,eax
    43c5:	64                   	fs
    43c6:	0d 5f 0d 00 00       	or     eax,0xd5f
    43cb:	01 22                	add    DWORD PTR [edx],esp
    43cd:	ff 01                	inc    DWORD PTR [ecx]
    43cf:	00 00                	add    BYTE PTR [eax],al
    43d1:	02 91 70 0d 43 0d    	add    dl,BYTE PTR [ecx+0xd430d70]
    43d7:	00 00                	add    BYTE PTR [eax],al
    43d9:	01 23                	add    DWORD PTR [ebx],esp
    43db:	fa                   	cli    
    43dc:	00 00                	add    BYTE PTR [eax],al
    43de:	00 02                	add    BYTE PTR [edx],al
    43e0:	91                   	xchg   ecx,eax
    43e1:	6c                   	ins    BYTE PTR es:[edi],dx
    43e2:	00 0a                	add    BYTE PTR [edx],cl
    43e4:	04 56                	add    al,0x56
    43e6:	01 00                	add    DWORD PTR [eax],eax
    43e8:	00 0a                	add    BYTE PTR [edx],cl
    43ea:	04 ae                	add    al,0xae
    43ec:	02 00                	add    al,BYTE PTR [eax]
    43ee:	00 0b                	add    BYTE PTR [ebx],cl
    43f0:	4b                   	dec    ebx
    43f1:	01 00                	add    DWORD PTR [eax],eax
    43f3:	00 10                	add    BYTE PTR [eax],dl
    43f5:	24 0d                	and    al,0xd
    43f7:	00 00                	add    BYTE PTR [eax],al
    43f9:	01 3c a2             	add    DWORD PTR [edx+eiz*4],edi
    43fc:	02 00                	add    al,BYTE PTR [eax]
    43fe:	00 ad 33 00 9f 1d    	add    BYTE PTR [ebp+0x1d9f0033],ch
    4404:	00 00                	add    BYTE PTR [eax],al
    4406:	00 01                	add    BYTE PTR [ecx],al
    4408:	9c                   	pushf  
    4409:	e9 02 00 00 0f       	jmp    f004410 <sysEnter_Vector+0xeed4410>
    440e:	e0 0d                	loopne 441d <sysEnter_Vector-0x12bbe3>
    4410:	00 00                	add    BYTE PTR [eax],al
    4412:	01 3c a8             	add    DWORD PTR [eax+ebp*4],edi
    4415:	02 00                	add    al,BYTE PTR [eax]
    4417:	00 02                	add    BYTE PTR [edx],al
    4419:	91                   	xchg   ecx,eax
    441a:	00 0f                	add    BYTE PTR [edi],cl
    441c:	88 0d 00 00 01 3c    	mov    BYTE PTR ds:0x3c010000,cl
    4422:	a2 02 00 00 02       	mov    ds:0x2000002,al
    4427:	91                   	xchg   ecx,eax
    4428:	04 00                	add    al,0x0
    442a:	10 f7                	adc    bh,dh
    442c:	0c 00                	or     al,0x0
    442e:	00 01                	add    BYTE PTR [ecx],al
    4430:	41                   	inc    ecx
    4431:	a2 02 00 00 ca       	mov    ds:0xca000002,al
    4436:	33 00                	xor    eax,DWORD PTR [eax]
    4438:	9f                   	lahf   
    4439:	46                   	inc    esi
    443a:	00 00                	add    BYTE PTR [eax],al
    443c:	00 01                	add    BYTE PTR [ecx],al
    443e:	9c                   	pushf  
    443f:	1d 03 00 00 0f       	sbb    eax,0xf000003
    4444:	e0 0d                	loopne 4453 <sysEnter_Vector-0x12bbad>
    4446:	00 00                	add    BYTE PTR [eax],al
    4448:	01 41 a8             	add    DWORD PTR [ecx-0x58],eax
    444b:	02 00                	add    al,BYTE PTR [eax]
    444d:	00 02                	add    BYTE PTR [edx],al
    444f:	91                   	xchg   ecx,eax
    4450:	00 11                	add    BYTE PTR [ecx],dl
    4452:	74 00                	je     4454 <sysEnter_Vector-0x12bbac>
    4454:	01 42 4b             	add    DWORD PTR [edx+0x4b],eax
    4457:	01 00                	add    DWORD PTR [eax],eax
    4459:	00 02                	add    BYTE PTR [edx],al
    445b:	91                   	xchg   ecx,eax
    445c:	6c                   	ins    BYTE PTR es:[edi],dx
    445d:	00 10                	add    BYTE PTR [eax],dl
    445f:	e6 0d                	out    0xd,al
    4461:	00 00                	add    BYTE PTR [eax],al
    4463:	01 48 a2             	add    DWORD PTR [eax-0x5e],ecx
    4466:	02 00                	add    al,BYTE PTR [eax]
    4468:	00 10                	add    BYTE PTR [eax],dl
    446a:	34 00                	xor    al,0x0
    446c:	9f                   	lahf   
    446d:	35 00 00 00 01       	xor    eax,0x1000000
    4472:	9c                   	pushf  
    4473:	5f                   	pop    edi
    4474:	03 00                	add    eax,DWORD PTR [eax]
    4476:	00 0f                	add    BYTE PTR [edi],cl
    4478:	e0 0d                	loopne 4487 <sysEnter_Vector-0x12bb79>
    447a:	00 00                	add    BYTE PTR [eax],al
    447c:	01 48 a8             	add    DWORD PTR [eax-0x58],ecx
    447f:	02 00                	add    al,BYTE PTR [eax]
    4481:	00 02                	add    BYTE PTR [edx],al
    4483:	91                   	xchg   ecx,eax
    4484:	00 0f                	add    BYTE PTR [edi],cl
    4486:	88 0d 00 00 01 48    	mov    BYTE PTR ds:0x48010000,cl
    448c:	a2 02 00 00 02       	mov    ds:0x2000002,al
    4491:	91                   	xchg   ecx,eax
    4492:	04 11                	add    al,0x11
    4494:	74 00                	je     4496 <sysEnter_Vector-0x12bb6a>
    4496:	01 4a 4b             	add    DWORD PTR [edx+0x4b],ecx
    4499:	01 00                	add    DWORD PTR [eax],eax
    449b:	00 02                	add    BYTE PTR [edx],al
    449d:	91                   	xchg   ecx,eax
    449e:	74 00                	je     44a0 <sysEnter_Vector-0x12bb60>
    44a0:	10 95 0d 00 00 01    	adc    BYTE PTR [ebp+0x100000d],dl
    44a6:	50                   	push   eax
    44a7:	a2 02 00 00 45       	mov    ds:0x45000002,al
    44ac:	34 00                	xor    al,0x0
    44ae:	9f                   	lahf   
    44af:	1d 00 00 00 01       	sbb    eax,0x1000000
    44b4:	9c                   	pushf  
    44b5:	95                   	xchg   ebp,eax
    44b6:	03 00                	add    eax,DWORD PTR [eax]
    44b8:	00 0f                	add    BYTE PTR [edi],cl
    44ba:	e0 0d                	loopne 44c9 <sysEnter_Vector-0x12bb37>
    44bc:	00 00                	add    BYTE PTR [eax],al
    44be:	01 50 a8             	add    DWORD PTR [eax-0x58],edx
    44c1:	02 00                	add    al,BYTE PTR [eax]
    44c3:	00 02                	add    BYTE PTR [edx],al
    44c5:	91                   	xchg   ecx,eax
    44c6:	00 0f                	add    BYTE PTR [edi],cl
    44c8:	88 0d 00 00 01 50    	mov    BYTE PTR ds:0x50010000,cl
    44ce:	a2 02 00 00 02       	mov    ds:0x2000002,al
    44d3:	91                   	xchg   ecx,eax
    44d4:	04 00                	add    al,0x0
    44d6:	0e                   	push   cs
    44d7:	aa                   	stos   BYTE PTR es:[edi],al
    44d8:	0d 00 00 01 54       	or     eax,0x54010000
    44dd:	4b                   	dec    ebx
    44de:	01 00                	add    DWORD PTR [eax],eax
    44e0:	00 62 34             	add    BYTE PTR [edx+0x34],ah
    44e3:	00 9f 57 08 00 00    	add    BYTE PTR [edi+0x857],bl
    44e9:	01 9c 2d 04 00 00 0f 	add    DWORD PTR [ebp+ebp*1+0xf000004],ebx
    44f0:	88 0d 00 00 01 54    	mov    BYTE PTR ds:0x54010000,cl
    44f6:	a2 02 00 00 02       	mov    ds:0x2000002,al
    44fb:	91                   	xchg   ecx,eax
    44fc:	00 11                	add    BYTE PTR [ecx],dl
    44fe:	64                   	fs
    44ff:	61                   	popa   
    4500:	79 00                	jns    4502 <sysEnter_Vector-0x12bafe>
    4502:	01 55 3d             	add    DWORD PTR [ebp+0x3d],edx
    4505:	01 00                	add    DWORD PTR [eax],eax
    4507:	00 02                	add    BYTE PTR [edx],al
    4509:	91                   	xchg   ecx,eax
    450a:	68 0d 43 0d 00       	push   0xd430d
    450f:	00 01                	add    BYTE PTR [ecx],al
    4511:	55                   	push   ebp
    4512:	3d 01 00 00 02       	cmp    eax,0x2000001
    4517:	91                   	xchg   ecx,eax
    4518:	54                   	push   esp
    4519:	0d 40 0d 00 00       	or     eax,0xd40
    451e:	01 56 fa             	add    DWORD PTR [esi-0x6],edx
    4521:	00 00                	add    BYTE PTR [eax],al
    4523:	00 02                	add    BYTE PTR [edx],al
    4525:	91                   	xchg   ecx,eax
    4526:	4c                   	dec    esp
    4527:	0d 79 0d 00 00       	or     eax,0xd79
    452c:	01 57 fa             	add    DWORD PTR [edi-0x6],edx
    452f:	00 00                	add    BYTE PTR [eax],al
    4531:	00 02                	add    BYTE PTR [edx],al
    4533:	91                   	xchg   ecx,eax
    4534:	64                   	fs
    4535:	0d 48 0d 00 00       	or     eax,0xd48
    453a:	01 57 fa             	add    DWORD PTR [edi-0x6],edx
    453d:	00 00                	add    BYTE PTR [eax],al
    453f:	00 02                	add    BYTE PTR [edx],al
    4541:	91                   	xchg   ecx,eax
    4542:	60                   	pusha  
    4543:	0d b0 06 00 00       	or     eax,0x6b0
    4548:	01 58 3d             	add    DWORD PTR [eax+0x3d],ebx
    454b:	01 00                	add    DWORD PTR [eax],eax
    454d:	00 02                	add    BYTE PTR [edx],al
    454f:	91                   	xchg   ecx,eax
    4550:	50                   	push   eax
    4551:	0d 03 0e 00 00       	or     eax,0xe03
    4556:	01 59 fa             	add    DWORD PTR [ecx-0x6],ebx
    4559:	00 00                	add    BYTE PTR [eax],al
    455b:	00 02                	add    BYTE PTR [edx],al
    455d:	91                   	xchg   ecx,eax
    455e:	5c                   	pop    esp
    455f:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    4563:	00 01                	add    BYTE PTR [ecx],al
    4565:	5a                   	pop    edx
    4566:	3d 01 00 00 02       	cmp    eax,0x2000001
    456b:	91                   	xchg   ecx,eax
    456c:	58                   	pop    eax
    456d:	00 10                	add    BYTE PTR [eax],dl
    456f:	4e                   	dec    esi
    4570:	0d 00 00 01 bf       	or     eax,0xbf010000
    4575:	a2 02 00 00 b9       	mov    ds:0xb9000002,al
    457a:	3c 00                	cmp    al,0x0
    457c:	9f                   	lahf   
    457d:	6d                   	ins    DWORD PTR es:[edi],dx
    457e:	00 00                	add    BYTE PTR [eax],al
    4580:	00 01                	add    BYTE PTR [ecx],al
    4582:	9c                   	pushf  
    4583:	71 04                	jno    4589 <sysEnter_Vector-0x12ba77>
    4585:	00 00                	add    BYTE PTR [eax],al
    4587:	0f ac 0d 00 00 01 bf 	shrd   DWORD PTR ds:0xbf010000,ecx,0xa2
    458e:	a2 
    458f:	02 00                	add    al,BYTE PTR [eax]
    4591:	00 02                	add    BYTE PTR [edx],al
    4593:	91                   	xchg   ecx,eax
    4594:	00 0f                	add    BYTE PTR [edi],cl
    4596:	7e 0d                	jle    45a5 <sysEnter_Vector-0x12ba5b>
    4598:	00 00                	add    BYTE PTR [eax],al
    459a:	01 bf f1 01 00 00    	add    DWORD PTR [edi+0x1f1],edi
    45a0:	02 91 5c 0d 0c 0d    	add    dl,BYTE PTR [ecx+0xd0c0d5c]
    45a6:	00 00                	add    BYTE PTR [eax],al
    45a8:	01 c1                	add    ecx,eax
    45aa:	4b                   	dec    ebx
    45ab:	01 00                	add    DWORD PTR [eax],eax
    45ad:	00 02                	add    BYTE PTR [edx],al
    45af:	91                   	xchg   ecx,eax
    45b0:	6c                   	ins    BYTE PTR es:[edi],dx
    45b1:	00 10                	add    BYTE PTR [eax],dl
    45b3:	ac                   	lods   al,BYTE PTR ds:[esi]
    45b4:	0d 00 00 01 ca       	or     eax,0xca010000
    45b9:	4b                   	dec    ebx
    45ba:	01 00                	add    DWORD PTR [eax],eax
    45bc:	00 26                	add    BYTE PTR [esi],ah
    45be:	3d 00 9f 41 00       	cmp    eax,0x419f00
    45c3:	00 00                	add    BYTE PTR [eax],al
    45c5:	01 9c a7 04 00 00 0f 	add    DWORD PTR [edi+eiz*4+0xf000004],ebx
    45cc:	fc                   	cld    
    45cd:	0d 00 00 01 ca       	or     eax,0xca010000
    45d2:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    45d3:	04 00                	add    al,0x0
    45d5:	00 02                	add    BYTE PTR [edx],al
    45d7:	91                   	xchg   ecx,eax
    45d8:	00 0d 0c 0d 00 00    	add    BYTE PTR ds:0xd0c,cl
    45de:	01 cc                	add    esp,ecx
    45e0:	2b 01                	sub    eax,DWORD PTR [ecx]
    45e2:	00 00                	add    BYTE PTR [eax],al
    45e4:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    45ea:	4b                   	dec    ebx
    45eb:	01 00                	add    DWORD PTR [eax],eax
    45ed:	00 12                	add    BYTE PTR [edx],dl
    45ef:	5b                   	pop    ebx
    45f0:	00 00                	add    BYTE PTR [eax],al
    45f2:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    45f5:	2b 01                	sub    eax,DWORD PTR [ecx]
    45f7:	00 00                	add    BYTE PTR [eax],al
    45f9:	05 03 44 5f 00       	add    eax,0x5f4403
    45fe:	9f                   	lahf   
    45ff:	12 0b                	adc    cl,BYTE PTR [ebx]
    4601:	01 00                	add    DWORD PTR [eax],eax
    4603:	00 04 35 2b 01 00 00 	add    BYTE PTR [esi*1+0x12b],al
    460a:	05 03 48 5f 00       	add    eax,0x5f4803
    460f:	9f                   	lahf   
    4610:	12 64 00 00          	adc    ah,BYTE PTR [eax+eax*1+0x0]
    4614:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    4617:	2b 01                	sub    eax,DWORD PTR [ecx]
    4619:	00 00                	add    BYTE PTR [eax],al
    461b:	05 03 40 5f 00       	add    eax,0x5f4003
    4620:	9f                   	lahf   
    4621:	12 53 01             	adc    dl,BYTE PTR [ebx+0x1]
    4624:	00 00                	add    BYTE PTR [eax],al
    4626:	04 37                	add    al,0x37
    4628:	3d 01 00 00 05       	cmp    eax,0x5000001
    462d:	03 50 5f             	add    edx,DWORD PTR [eax+0x5f]
    4630:	00 9f 12 38 00 00    	add    BYTE PTR [edi+0x3812],bl
    4636:	00 05 52 02 05 00    	add    BYTE PTR ds:0x50252,al
    463c:	00 05 03 4c 5f 00    	add    BYTE PTR ds:0x5f4c03,al
    4642:	9f                   	lahf   
    4643:	0a 04 06             	or     al,BYTE PTR [esi+eax*1]
    4646:	02 00                	add    al,BYTE PTR [eax]
    4648:	00 12                	add    BYTE PTR [edx],dl
    464a:	12 0d 00 00 01 0c    	adc    cl,BYTE PTR ds:0xc010000
    4650:	fa                   	cli    
    4651:	00 00                	add    BYTE PTR [eax],al
    4653:	00 05 03 28 5e 00    	add    BYTE PTR ds:0x5e2803,al
    4659:	9f                   	lahf   
    465a:	12 f3                	adc    dh,bl
    465c:	0d 00 00 01 0d       	or     eax,0xd010000
    4661:	3d 01 00 00 05       	cmp    eax,0x5000001
    4666:	03 90 5f 00 9f 13    	add    edx,DWORD PTR [eax+0x139f005f]
    466c:	06                   	push   es
    466d:	02 00                	add    al,BYTE PTR [eax]
    466f:	00 3a                	add    BYTE PTR [edx],bh
    4671:	05 00 00 14 f8       	add    eax,0xf8140000
    4676:	01 00                	add    DWORD PTR [eax],eax
    4678:	00 01                	add    BYTE PTR [ecx],al
    467a:	00 12                	add    BYTE PTR [edx],dl
    467c:	1c 0d                	sbb    al,0xd
    467e:	00 00                	add    BYTE PTR [eax],al
    4680:	01 0e                	add    DWORD PTR [esi],ecx
    4682:	2a 05 00 00 05 03    	sub    al,BYTE PTR ds:0x3050000
    4688:	1c 5f                	sbb    al,0x5f
    468a:	00 9f 12 2d 0d 00    	add    BYTE PTR [edi+0xd2d12],bl
    4690:	00 01                	add    BYTE PTR [ecx],al
    4692:	0f fa 00             	psubd  mm0,QWORD PTR [eax]
    4695:	00 00                	add    BYTE PTR [eax],al
    4697:	05 03 a0 5f 00       	add    eax,0x5fa003
    469c:	9f                   	lahf   
    469d:	12 88 0d 00 00 01    	adc    cl,BYTE PTR [eax+0x100000d]
    46a3:	10 56 01             	adc    BYTE PTR [esi+0x1],dl
    46a6:	00 00                	add    BYTE PTR [eax],al
    46a8:	05 03 c0 5f 00       	add    eax,0x5fc003
    46ad:	9f                   	lahf   
    46ae:	13 fa                	adc    edi,edx
    46b0:	00 00                	add    BYTE PTR [eax],al
    46b2:	00 83 05 00 00 14    	add    BYTE PTR [ebx+0x14000005],al
    46b8:	f8                   	clc    
    46b9:	01 00                	add    DWORD PTR [eax],eax
    46bb:	00 01                	add    BYTE PTR [ecx],al
    46bd:	14 f8                	adc    al,0xf8
    46bf:	01 00                	add    DWORD PTR [eax],eax
    46c1:	00 0b                	add    BYTE PTR [ebx],cl
    46c3:	00 12                	add    BYTE PTR [edx],dl
    46c5:	c3                   	ret    
    46c6:	0d 00 00 01 12       	or     eax,0x12010000
    46cb:	94                   	xchg   esp,eax
    46cc:	05 00 00 05 03       	add    eax,0x3050000
    46d1:	20 5c 00 9f          	and    BYTE PTR [eax+eax*1-0x61],bl
    46d5:	0b 6d 05             	or     ebp,DWORD PTR [ebp+0x5]
    46d8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 11                	sbb    DWORD PTR [ecx],edx
     2c1:	01 12                	add    DWORD PTR [edx],edx
     2c3:	06                   	push   es
     2c4:	40                   	inc    eax
     2c5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cb:	00 00                	add    BYTE PTR [eax],al
     2cd:	07                   	pop    es
     2ce:	05 00 03 08 3a       	add    eax,0x3a080300
     2d3:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2d8:	02 18                	add    bl,BYTE PTR [eax]
     2da:	00 00                	add    BYTE PTR [eax],al
     2dc:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2df:	03 08                	add    ecx,DWORD PTR [eax]
     2e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2e5:	49                   	dec    ecx
     2e6:	13 02                	adc    eax,DWORD PTR [edx]
     2e8:	18 00                	sbb    BYTE PTR [eax],al
     2ea:	00 09                	add    BYTE PTR [ecx],cl
     2ec:	34 00                	xor    al,0x0
     2ee:	03 0e                	add    ecx,DWORD PTR [esi]
     2f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f4:	49                   	dec    ecx
     2f5:	13 02                	adc    eax,DWORD PTR [edx]
     2f7:	18 00                	sbb    BYTE PTR [eax],al
     2f9:	00 0a                	add    BYTE PTR [edx],cl
     2fb:	01 01                	add    DWORD PTR [ecx],eax
     2fd:	49                   	dec    ecx
     2fe:	13 01                	adc    eax,DWORD PTR [ecx]
     300:	13 00                	adc    eax,DWORD PTR [eax]
     302:	00 0b                	add    BYTE PTR [ebx],cl
     304:	21 00                	and    DWORD PTR [eax],eax
     306:	49                   	dec    ecx
     307:	13 2f                	adc    ebp,DWORD PTR [edi]
     309:	0b 00                	or     eax,DWORD PTR [eax]
     30b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     30e:	01 3f                	add    DWORD PTR [edi],edi
     310:	19 03                	sbb    DWORD PTR [ebx],eax
     312:	0e                   	push   cs
     313:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     315:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     317:	11 01                	adc    DWORD PTR [ecx],eax
     319:	12 06                	adc    al,BYTE PTR [esi]
     31b:	40                   	inc    eax
     31c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	0d 34 00 03 0e       	or     eax,0xe030034
     329:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     32b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     32d:	49                   	dec    ecx
     32e:	13 3f                	adc    edi,DWORD PTR [edi]
     330:	19 02                	sbb    DWORD PTR [edx],eax
     332:	18 00                	sbb    BYTE PTR [eax],al
     334:	00 0e                	add    BYTE PTR [esi],cl
     336:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	00 01                	add    BYTE PTR [ecx],al
     33e:	11 01                	adc    DWORD PTR [ecx],eax
     340:	25 0e 13 0b 03       	and    eax,0x30b130e
     345:	0e                   	push   cs
     346:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     348:	11 01                	adc    DWORD PTR [ecx],eax
     34a:	12 06                	adc    al,BYTE PTR [esi]
     34c:	10 17                	adc    BYTE PTR [edi],dl
     34e:	00 00                	add    BYTE PTR [eax],al
     350:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     353:	0b 0b                	or     ecx,DWORD PTR [ebx]
     355:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     358:	0e                   	push   cs
     359:	00 00                	add    BYTE PTR [eax],al
     35b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     360:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     363:	08 00                	or     BYTE PTR [eax],al
     365:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     368:	00 03                	add    BYTE PTR [ebx],al
     36a:	0e                   	push   cs
     36b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36f:	49                   	dec    ecx
     370:	13 00                	adc    eax,DWORD PTR [eax]
     372:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     378:	49                   	dec    ecx
     379:	13 00                	adc    eax,DWORD PTR [eax]
     37b:	00 06                	add    BYTE PTR [esi],al
     37d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     380:	19 03                	sbb    DWORD PTR [ebx],eax
     382:	0e                   	push   cs
     383:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     385:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     387:	27                   	daa    
     388:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     38b:	11 01                	adc    DWORD PTR [ecx],eax
     38d:	12 06                	adc    al,BYTE PTR [esi]
     38f:	40                   	inc    eax
     390:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     396:	00 00                	add    BYTE PTR [eax],al
     398:	07                   	pop    es
     399:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     39e:	0b 3b                	or     edi,DWORD PTR [ebx]
     3a0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3a3:	02 18                	add    bl,BYTE PTR [eax]
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	08 0b                	or     BYTE PTR [ebx],cl
     3a9:	01 11                	add    DWORD PTR [ecx],edx
     3ab:	01 12                	add    DWORD PTR [edx],edx
     3ad:	06                   	push   es
     3ae:	00 00                	add    BYTE PTR [eax],al
     3b0:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     3b3:	03 08                	add    ecx,DWORD PTR [eax]
     3b5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b9:	49                   	dec    ecx
     3ba:	13 02                	adc    eax,DWORD PTR [edx]
     3bc:	18 00                	sbb    BYTE PTR [eax],al
     3be:	00 0a                	add    BYTE PTR [edx],cl
     3c0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3c3:	19 03                	sbb    DWORD PTR [ebx],eax
     3c5:	0e                   	push   cs
     3c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ca:	27                   	daa    
     3cb:	19 11                	sbb    DWORD PTR [ecx],edx
     3cd:	01 12                	add    DWORD PTR [edx],edx
     3cf:	06                   	push   es
     3d0:	40                   	inc    eax
     3d1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3d7:	00 00                	add    BYTE PTR [eax],al
     3d9:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	49                   	dec    ecx
     3e3:	13 02                	adc    eax,DWORD PTR [edx]
     3e5:	18 00                	sbb    BYTE PTR [eax],al
     3e7:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     3ea:	01 11                	add    DWORD PTR [ecx],edx
     3ec:	01 12                	add    DWORD PTR [edx],edx
     3ee:	06                   	push   es
     3ef:	01 13                	add    DWORD PTR [ebx],edx
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	0d 34 00 03 0e       	or     eax,0xe030034
     3f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fc:	49                   	dec    ecx
     3fd:	13 3f                	adc    edi,DWORD PTR [edi]
     3ff:	19 02                	sbb    DWORD PTR [edx],eax
     401:	18 00                	sbb    BYTE PTR [eax],al
     403:	00 00                	add    BYTE PTR [eax],al
     405:	01 11                	add    DWORD PTR [ecx],edx
     407:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40d:	0e                   	push   cs
     40e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     410:	11 01                	adc    DWORD PTR [ecx],eax
     412:	12 06                	adc    al,BYTE PTR [esi]
     414:	10 17                	adc    BYTE PTR [edi],dl
     416:	00 00                	add    BYTE PTR [eax],al
     418:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     41b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     420:	0e                   	push   cs
     421:	00 00                	add    BYTE PTR [eax],al
     423:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     426:	0b 0b                	or     ecx,DWORD PTR [ebx]
     428:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     42b:	08 00                	or     BYTE PTR [eax],al
     42d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     430:	00 03                	add    BYTE PTR [ebx],al
     432:	0e                   	push   cs
     433:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     435:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     437:	49                   	dec    ecx
     438:	13 00                	adc    eax,DWORD PTR [eax]
     43a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     440:	49                   	dec    ecx
     441:	13 00                	adc    eax,DWORD PTR [eax]
     443:	00 06                	add    BYTE PTR [esi],al
     445:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     449:	00 00                	add    BYTE PTR [eax],al
     44b:	07                   	pop    es
     44c:	04 01                	add    al,0x1
     44e:	03 0e                	add    ecx,DWORD PTR [esi]
     450:	0b 0b                	or     ecx,DWORD PTR [ebx]
     452:	49                   	dec    ecx
     453:	13 3a                	adc    edi,DWORD PTR [edx]
     455:	0b 3b                	or     edi,DWORD PTR [ebx]
     457:	0b 01                	or     eax,DWORD PTR [ecx]
     459:	13 00                	adc    eax,DWORD PTR [eax]
     45b:	00 08                	add    BYTE PTR [eax],cl
     45d:	28 00                	sub    BYTE PTR [eax],al
     45f:	03 0e                	add    ecx,DWORD PTR [esi]
     461:	1c 0b                	sbb    al,0xb
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 28                	or     DWORD PTR [eax],ebp
     467:	00 03                	add    BYTE PTR [ebx],al
     469:	0e                   	push   cs
     46a:	1c 05                	sbb    al,0x5
     46c:	00 00                	add    BYTE PTR [eax],al
     46e:	0a 0f                	or     cl,BYTE PTR [edi]
     470:	00 0b                	add    BYTE PTR [ebx],cl
     472:	0b 00                	or     eax,DWORD PTR [eax]
     474:	00 0b                	add    BYTE PTR [ebx],cl
     476:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     479:	19 03                	sbb    DWORD PTR [ebx],eax
     47b:	0e                   	push   cs
     47c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     47e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     480:	27                   	daa    
     481:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     484:	11 01                	adc    DWORD PTR [ecx],eax
     486:	12 06                	adc    al,BYTE PTR [esi]
     488:	40                   	inc    eax
     489:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     48f:	00 00                	add    BYTE PTR [eax],al
     491:	0c 05                	or     al,0x5
     493:	00 03                	add    BYTE PTR [ebx],al
     495:	0e                   	push   cs
     496:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     498:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     49a:	49                   	dec    ecx
     49b:	13 02                	adc    eax,DWORD PTR [edx]
     49d:	18 00                	sbb    BYTE PTR [eax],al
     49f:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     4a5:	03 0e                	add    ecx,DWORD PTR [esi]
     4a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4ab:	27                   	daa    
     4ac:	19 11                	sbb    DWORD PTR [ecx],edx
     4ae:	01 12                	add    DWORD PTR [edx],edx
     4b0:	06                   	push   es
     4b1:	40                   	inc    eax
     4b2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4b8:	00 00                	add    BYTE PTR [eax],al
     4ba:	0e                   	push   cs
     4bb:	34 00                	xor    al,0x0
     4bd:	03 0e                	add    ecx,DWORD PTR [esi]
     4bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c3:	49                   	dec    ecx
     4c4:	13 3f                	adc    edi,DWORD PTR [edi]
     4c6:	19 02                	sbb    DWORD PTR [edx],eax
     4c8:	18 00                	sbb    BYTE PTR [eax],al
     4ca:	00 00                	add    BYTE PTR [eax],al
     4cc:	01 11                	add    DWORD PTR [ecx],edx
     4ce:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     4d4:	0e                   	push   cs
     4d5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     4d7:	11 01                	adc    DWORD PTR [ecx],eax
     4d9:	12 06                	adc    al,BYTE PTR [esi]
     4db:	10 17                	adc    BYTE PTR [edi],dl
     4dd:	00 00                	add    BYTE PTR [eax],al
     4df:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     4e2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4e4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     4e7:	0e                   	push   cs
     4e8:	00 00                	add    BYTE PTR [eax],al
     4ea:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     4ed:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4ef:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     4f2:	08 00                	or     BYTE PTR [eax],al
     4f4:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     4f7:	00 03                	add    BYTE PTR [ebx],al
     4f9:	0e                   	push   cs
     4fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4fe:	49                   	dec    ecx
     4ff:	13 00                	adc    eax,DWORD PTR [eax]
     501:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     507:	0b 0b                	or     ecx,DWORD PTR [ebx]
     509:	49                   	dec    ecx
     50a:	13 3a                	adc    edi,DWORD PTR [edx]
     50c:	0b 3b                	or     edi,DWORD PTR [ebx]
     50e:	0b 01                	or     eax,DWORD PTR [ecx]
     510:	13 00                	adc    eax,DWORD PTR [eax]
     512:	00 06                	add    BYTE PTR [esi],al
     514:	28 00                	sub    BYTE PTR [eax],al
     516:	03 0e                	add    ecx,DWORD PTR [esi]
     518:	1c 0b                	sbb    al,0xb
     51a:	00 00                	add    BYTE PTR [eax],al
     51c:	07                   	pop    es
     51d:	28 00                	sub    BYTE PTR [eax],al
     51f:	03 0e                	add    ecx,DWORD PTR [esi]
     521:	1c 05                	sbb    al,0x5
     523:	00 00                	add    BYTE PTR [eax],al
     525:	08 0f                	or     BYTE PTR [edi],cl
     527:	00 0b                	add    BYTE PTR [ebx],cl
     529:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     52c:	00 00                	add    BYTE PTR [eax],al
     52e:	09 2e                	or     DWORD PTR [esi],ebp
     530:	01 3f                	add    DWORD PTR [edi],edi
     532:	19 03                	sbb    DWORD PTR [ebx],eax
     534:	0e                   	push   cs
     535:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     537:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     539:	27                   	daa    
     53a:	19 11                	sbb    DWORD PTR [ecx],edx
     53c:	01 12                	add    DWORD PTR [edx],edx
     53e:	06                   	push   es
     53f:	40                   	inc    eax
     540:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     546:	00 00                	add    BYTE PTR [eax],al
     548:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     54e:	0b 3b                	or     edi,DWORD PTR [ebx]
     550:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     553:	02 18                	add    bl,BYTE PTR [eax]
     555:	00 00                	add    BYTE PTR [eax],al
     557:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     55d:	0b 3b                	or     edi,DWORD PTR [ebx]
     55f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     562:	02 18                	add    bl,BYTE PTR [eax]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	0c 34                	or     al,0x34
     568:	00 03                	add    BYTE PTR [ebx],al
     56a:	0e                   	push   cs
     56b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     56d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     56f:	49                   	dec    ecx
     570:	13 02                	adc    eax,DWORD PTR [edx]
     572:	18 00                	sbb    BYTE PTR [eax],al
     574:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     57a:	01 13                	add    DWORD PTR [ebx],edx
     57c:	00 00                	add    BYTE PTR [eax],al
     57e:	0e                   	push   cs
     57f:	21 00                	and    DWORD PTR [eax],eax
     581:	49                   	dec    ecx
     582:	13 2f                	adc    ebp,DWORD PTR [edi]
     584:	0b 00                	or     eax,DWORD PTR [eax]
     586:	00 0f                	add    BYTE PTR [edi],cl
     588:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     58b:	19 03                	sbb    DWORD PTR [ebx],eax
     58d:	0e                   	push   cs
     58e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     590:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     592:	49                   	dec    ecx
     593:	13 11                	adc    edx,DWORD PTR [ecx]
     595:	01 12                	add    DWORD PTR [edx],edx
     597:	06                   	push   es
     598:	40                   	inc    eax
     599:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     59f:	00 00                	add    BYTE PTR [eax],al
     5a1:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     5a4:	03 08                	add    ecx,DWORD PTR [eax]
     5a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5aa:	49                   	dec    ecx
     5ab:	13 02                	adc    eax,DWORD PTR [edx]
     5ad:	18 00                	sbb    BYTE PTR [eax],al
     5af:	00 11                	add    BYTE PTR [ecx],dl
     5b1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5b4:	19 03                	sbb    DWORD PTR [ebx],eax
     5b6:	0e                   	push   cs
     5b7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5b9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5bb:	27                   	daa    
     5bc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5bf:	11 01                	adc    DWORD PTR [ecx],eax
     5c1:	12 06                	adc    al,BYTE PTR [esi]
     5c3:	40                   	inc    eax
     5c4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	12 0a                	adc    cl,BYTE PTR [edx]
     5ce:	00 03                	add    BYTE PTR [ebx],al
     5d0:	0e                   	push   cs
     5d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d5:	11 01                	adc    DWORD PTR [ecx],eax
     5d7:	00 00                	add    BYTE PTR [eax],al
     5d9:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     5dc:	03 0e                	add    ecx,DWORD PTR [esi]
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	49                   	dec    ecx
     5e3:	13 3f                	adc    edi,DWORD PTR [edi]
     5e5:	19 02                	sbb    DWORD PTR [edx],eax
     5e7:	18 00                	sbb    BYTE PTR [eax],al
     5e9:	00 00                	add    BYTE PTR [eax],al
     5eb:	01 11                	add    DWORD PTR [ecx],edx
     5ed:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5f3:	0e                   	push   cs
     5f4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5f6:	11 01                	adc    DWORD PTR [ecx],eax
     5f8:	12 06                	adc    al,BYTE PTR [esi]
     5fa:	10 17                	adc    BYTE PTR [edi],dl
     5fc:	00 00                	add    BYTE PTR [eax],al
     5fe:	02 16                	add    dl,BYTE PTR [esi]
     600:	00 03                	add    BYTE PTR [ebx],al
     602:	0e                   	push   cs
     603:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     605:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     607:	49                   	dec    ecx
     608:	13 00                	adc    eax,DWORD PTR [eax]
     60a:	00 03                	add    BYTE PTR [ebx],al
     60c:	0f 00 0b             	str    WORD PTR [ebx]
     60f:	0b 03                	or     eax,DWORD PTR [ebx]
     611:	0e                   	push   cs
     612:	49                   	dec    ecx
     613:	13 00                	adc    eax,DWORD PTR [eax]
     615:	00 04 24             	add    BYTE PTR [esp],al
     618:	00 0b                	add    BYTE PTR [ebx],cl
     61a:	0b 3e                	or     edi,DWORD PTR [esi]
     61c:	0b 03                	or     eax,DWORD PTR [ebx]
     61e:	0e                   	push   cs
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	05 24 00 0b 0b       	add    eax,0xb0b0024
     626:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     629:	08 00                	or     BYTE PTR [eax],al
     62b:	00 06                	add    BYTE PTR [esi],al
     62d:	0f 00 0b             	str    WORD PTR [ebx]
     630:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     633:	00 00                	add    BYTE PTR [eax],al
     635:	07                   	pop    es
     636:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     63a:	00 00                	add    BYTE PTR [eax],al
     63c:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     63f:	03 0e                	add    ecx,DWORD PTR [esi]
     641:	0b 0b                	or     ecx,DWORD PTR [ebx]
     643:	49                   	dec    ecx
     644:	13 3a                	adc    edi,DWORD PTR [edx]
     646:	0b 3b                	or     edi,DWORD PTR [ebx]
     648:	0b 01                	or     eax,DWORD PTR [ecx]
     64a:	13 00                	adc    eax,DWORD PTR [eax]
     64c:	00 09                	add    BYTE PTR [ecx],cl
     64e:	28 00                	sub    BYTE PTR [eax],al
     650:	03 0e                	add    ecx,DWORD PTR [esi]
     652:	1c 0b                	sbb    al,0xb
     654:	00 00                	add    BYTE PTR [eax],al
     656:	0a 28                	or     ch,BYTE PTR [eax]
     658:	00 03                	add    BYTE PTR [ebx],al
     65a:	0e                   	push   cs
     65b:	1c 05                	sbb    al,0x5
     65d:	00 00                	add    BYTE PTR [eax],al
     65f:	0b 0f                	or     ecx,DWORD PTR [edi]
     661:	00 0b                	add    BYTE PTR [ebx],cl
     663:	0b 00                	or     eax,DWORD PTR [eax]
     665:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     668:	01 3f                	add    DWORD PTR [edi],edi
     66a:	19 03                	sbb    DWORD PTR [ebx],eax
     66c:	0e                   	push   cs
     66d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     66f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     671:	27                   	daa    
     672:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     675:	11 01                	adc    DWORD PTR [ecx],eax
     677:	12 06                	adc    al,BYTE PTR [esi]
     679:	40                   	inc    eax
     67a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     680:	00 00                	add    BYTE PTR [eax],al
     682:	0d 05 00 03 0e       	or     eax,0xe030005
     687:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     689:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     68b:	49                   	dec    ecx
     68c:	13 02                	adc    eax,DWORD PTR [edx]
     68e:	18 00                	sbb    BYTE PTR [eax],al
     690:	00 0e                	add    BYTE PTR [esi],cl
     692:	34 00                	xor    al,0x0
     694:	03 0e                	add    ecx,DWORD PTR [esi]
     696:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     698:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     69a:	49                   	dec    ecx
     69b:	13 02                	adc    eax,DWORD PTR [edx]
     69d:	18 00                	sbb    BYTE PTR [eax],al
     69f:	00 0f                	add    BYTE PTR [edi],cl
     6a1:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     6a4:	19 03                	sbb    DWORD PTR [ebx],eax
     6a6:	0e                   	push   cs
     6a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6ab:	11 01                	adc    DWORD PTR [ecx],eax
     6ad:	12 06                	adc    al,BYTE PTR [esi]
     6af:	40                   	inc    eax
     6b0:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6b6:	10 2e                	adc    BYTE PTR [esi],ch
     6b8:	00 3f                	add    BYTE PTR [edi],bh
     6ba:	19 03                	sbb    DWORD PTR [ebx],eax
     6bc:	0e                   	push   cs
     6bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c1:	27                   	daa    
     6c2:	19 11                	sbb    DWORD PTR [ecx],edx
     6c4:	01 12                	add    DWORD PTR [edx],edx
     6c6:	06                   	push   es
     6c7:	40                   	inc    eax
     6c8:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6ce:	11 2e                	adc    DWORD PTR [esi],ebp
     6d0:	01 3f                	add    DWORD PTR [edi],edi
     6d2:	19 03                	sbb    DWORD PTR [ebx],eax
     6d4:	0e                   	push   cs
     6d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6d7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6d9:	27                   	daa    
     6da:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6dd:	11 01                	adc    DWORD PTR [ecx],eax
     6df:	12 06                	adc    al,BYTE PTR [esi]
     6e1:	40                   	inc    eax
     6e2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6e8:	00 00                	add    BYTE PTR [eax],al
     6ea:	12 18                	adc    bl,BYTE PTR [eax]
     6ec:	00 00                	add    BYTE PTR [eax],al
     6ee:	00 13                	add    BYTE PTR [ebx],dl
     6f0:	0b 01                	or     eax,DWORD PTR [ecx]
     6f2:	11 01                	adc    DWORD PTR [ecx],eax
     6f4:	12 06                	adc    al,BYTE PTR [esi]
     6f6:	00 00                	add    BYTE PTR [eax],al
     6f8:	14 34                	adc    al,0x34
     6fa:	00 03                	add    BYTE PTR [ebx],al
     6fc:	08 3a                	or     BYTE PTR [edx],bh
     6fe:	0b 3b                	or     edi,DWORD PTR [ebx]
     700:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     703:	02 18                	add    bl,BYTE PTR [eax]
     705:	00 00                	add    BYTE PTR [eax],al
     707:	15 2e 01 3f 19       	adc    eax,0x193f012e
     70c:	03 0e                	add    ecx,DWORD PTR [esi]
     70e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     710:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     712:	27                   	daa    
     713:	19 11                	sbb    DWORD PTR [ecx],edx
     715:	01 12                	add    DWORD PTR [edx],edx
     717:	06                   	push   es
     718:	40                   	inc    eax
     719:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     71f:	00 00                	add    BYTE PTR [eax],al
     721:	16                   	push   ss
     722:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     725:	19 03                	sbb    DWORD PTR [ebx],eax
     727:	0e                   	push   cs
     728:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     72a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     72c:	49                   	dec    ecx
     72d:	13 11                	adc    edx,DWORD PTR [ecx]
     72f:	01 12                	add    DWORD PTR [edx],edx
     731:	06                   	push   es
     732:	40                   	inc    eax
     733:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     739:	00 00                	add    BYTE PTR [eax],al
     73b:	17                   	pop    ss
     73c:	05 00 03 08 3a       	add    eax,0x3a080300
     741:	0b 3b                	or     edi,DWORD PTR [ebx]
     743:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     746:	02 18                	add    bl,BYTE PTR [eax]
     748:	00 00                	add    BYTE PTR [eax],al
     74a:	18 0b                	sbb    BYTE PTR [ebx],cl
     74c:	01 11                	add    DWORD PTR [ecx],edx
     74e:	01 12                	add    DWORD PTR [edx],edx
     750:	06                   	push   es
     751:	01 13                	add    DWORD PTR [ebx],edx
     753:	00 00                	add    BYTE PTR [eax],al
     755:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     758:	03 0e                	add    ecx,DWORD PTR [esi]
     75a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     75c:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     762:	00 00                	add    BYTE PTR [eax],al
     764:	1a 2e                	sbb    ch,BYTE PTR [esi]
     766:	01 3f                	add    DWORD PTR [edi],edi
     768:	19 03                	sbb    DWORD PTR [ebx],eax
     76a:	0e                   	push   cs
     76b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     76d:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     773:	11 01                	adc    DWORD PTR [ecx],eax
     775:	12 06                	adc    al,BYTE PTR [esi]
     777:	40                   	inc    eax
     778:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     77e:	00 00                	add    BYTE PTR [eax],al
     780:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     786:	0b 3b                	or     edi,DWORD PTR [ebx]
     788:	05 49 13 02 18       	add    eax,0x18021349
     78d:	00 00                	add    BYTE PTR [eax],al
     78f:	1c 34                	sbb    al,0x34
     791:	00 03                	add    BYTE PTR [ebx],al
     793:	08 3a                	or     BYTE PTR [edx],bh
     795:	0b 3b                	or     edi,DWORD PTR [ebx]
     797:	05 49 13 02 18       	add    eax,0x18021349
     79c:	00 00                	add    BYTE PTR [eax],al
     79e:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     7a3:	00 00                	add    BYTE PTR [eax],al
     7a5:	1e                   	push   ds
     7a6:	01 01                	add    DWORD PTR [ecx],eax
     7a8:	49                   	dec    ecx
     7a9:	13 01                	adc    eax,DWORD PTR [ecx]
     7ab:	13 00                	adc    eax,DWORD PTR [eax]
     7ad:	00 1f                	add    BYTE PTR [edi],bl
     7af:	21 00                	and    DWORD PTR [eax],eax
     7b1:	49                   	dec    ecx
     7b2:	13 2f                	adc    ebp,DWORD PTR [edi]
     7b4:	05 00 00 20 21       	add    eax,0x21200000
     7b9:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     7bc:	2f                   	das    
     7bd:	0b 00                	or     eax,DWORD PTR [eax]
     7bf:	00 21                	add    BYTE PTR [ecx],ah
     7c1:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     7c4:	19 03                	sbb    DWORD PTR [ebx],eax
     7c6:	0e                   	push   cs
     7c7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c9:	3b 05 49 13 11 01    	cmp    eax,DWORD PTR ds:0x1111349
     7cf:	12 06                	adc    al,BYTE PTR [esi]
     7d1:	40                   	inc    eax
     7d2:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7d8:	22 34 00             	and    dh,BYTE PTR [eax+eax*1]
     7db:	03 0e                	add    ecx,DWORD PTR [esi]
     7dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7e1:	49                   	dec    ecx
     7e2:	13 3f                	adc    edi,DWORD PTR [edi]
     7e4:	19 02                	sbb    DWORD PTR [edx],eax
     7e6:	18 00                	sbb    BYTE PTR [eax],al
     7e8:	00 00                	add    BYTE PTR [eax],al
     7ea:	01 11                	add    DWORD PTR [ecx],edx
     7ec:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     7f2:	0e                   	push   cs
     7f3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     7f5:	11 01                	adc    DWORD PTR [ecx],eax
     7f7:	12 06                	adc    al,BYTE PTR [esi]
     7f9:	10 17                	adc    BYTE PTR [edi],dl
     7fb:	00 00                	add    BYTE PTR [eax],al
     7fd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     800:	0b 0b                	or     ecx,DWORD PTR [ebx]
     802:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     805:	0e                   	push   cs
     806:	00 00                	add    BYTE PTR [eax],al
     808:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     80b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     80d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     810:	08 00                	or     BYTE PTR [eax],al
     812:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     815:	00 03                	add    BYTE PTR [ebx],al
     817:	0e                   	push   cs
     818:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     81a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     81c:	49                   	dec    ecx
     81d:	13 00                	adc    eax,DWORD PTR [eax]
     81f:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     825:	0b 0b                	or     ecx,DWORD PTR [ebx]
     827:	49                   	dec    ecx
     828:	13 3a                	adc    edi,DWORD PTR [edx]
     82a:	0b 3b                	or     edi,DWORD PTR [ebx]
     82c:	0b 01                	or     eax,DWORD PTR [ecx]
     82e:	13 00                	adc    eax,DWORD PTR [eax]
     830:	00 06                	add    BYTE PTR [esi],al
     832:	28 00                	sub    BYTE PTR [eax],al
     834:	03 0e                	add    ecx,DWORD PTR [esi]
     836:	1c 0b                	sbb    al,0xb
     838:	00 00                	add    BYTE PTR [eax],al
     83a:	07                   	pop    es
     83b:	28 00                	sub    BYTE PTR [eax],al
     83d:	03 0e                	add    ecx,DWORD PTR [esi]
     83f:	1c 05                	sbb    al,0x5
     841:	00 00                	add    BYTE PTR [eax],al
     843:	08 13                	or     BYTE PTR [ebx],dl
     845:	01 03                	add    DWORD PTR [ebx],eax
     847:	0e                   	push   cs
     848:	0b 0b                	or     ecx,DWORD PTR [ebx]
     84a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     84c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     84e:	01 13                	add    DWORD PTR [ebx],edx
     850:	00 00                	add    BYTE PTR [eax],al
     852:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     858:	0b 3b                	or     edi,DWORD PTR [ebx]
     85a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     85d:	38 0b                	cmp    BYTE PTR [ebx],cl
     85f:	00 00                	add    BYTE PTR [eax],al
     861:	0a 0d 00 03 08 3a    	or     cl,BYTE PTR ds:0x3a080300
     867:	0b 3b                	or     edi,DWORD PTR [ebx]
     869:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     86c:	38 0b                	cmp    BYTE PTR [ebx],cl
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	0b 0f                	or     ecx,DWORD PTR [edi]
     872:	00 0b                	add    BYTE PTR [ebx],cl
     874:	0b 00                	or     eax,DWORD PTR [eax]
     876:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
     879:	00 0b                	add    BYTE PTR [ebx],cl
     87b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     87e:	00 00                	add    BYTE PTR [eax],al
     880:	0d 2e 01 3f 19       	or     eax,0x193f012e
     885:	03 0e                	add    ecx,DWORD PTR [esi]
     887:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     889:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     88b:	27                   	daa    
     88c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     88f:	11 01                	adc    DWORD PTR [ecx],eax
     891:	12 06                	adc    al,BYTE PTR [esi]
     893:	40                   	inc    eax
     894:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     89a:	00 00                	add    BYTE PTR [eax],al
     89c:	0e                   	push   cs
     89d:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     8a2:	0b 3b                	or     edi,DWORD PTR [ebx]
     8a4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8a7:	02 18                	add    bl,BYTE PTR [eax]
     8a9:	00 00                	add    BYTE PTR [eax],al
     8ab:	0f 05                	syscall 
     8ad:	00 03                	add    BYTE PTR [ebx],al
     8af:	08 3a                	or     BYTE PTR [edx],bh
     8b1:	0b 3b                	or     edi,DWORD PTR [ebx]
     8b3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8b6:	02 18                	add    bl,BYTE PTR [eax]
     8b8:	00 00                	add    BYTE PTR [eax],al
     8ba:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     8bd:	03 0e                	add    ecx,DWORD PTR [esi]
     8bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8c3:	49                   	dec    ecx
     8c4:	13 3f                	adc    edi,DWORD PTR [edi]
     8c6:	19 02                	sbb    DWORD PTR [edx],eax
     8c8:	18 00                	sbb    BYTE PTR [eax],al
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	01 11                	add    DWORD PTR [ecx],edx
     8ce:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8d4:	0e                   	push   cs
     8d5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8d7:	11 01                	adc    DWORD PTR [ecx],eax
     8d9:	12 06                	adc    al,BYTE PTR [esi]
     8db:	10 17                	adc    BYTE PTR [edi],dl
     8dd:	00 00                	add    BYTE PTR [eax],al
     8df:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8e2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8e4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8e7:	0e                   	push   cs
     8e8:	00 00                	add    BYTE PTR [eax],al
     8ea:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8ed:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8ef:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8f2:	08 00                	or     BYTE PTR [eax],al
     8f4:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8f7:	00 03                	add    BYTE PTR [ebx],al
     8f9:	0e                   	push   cs
     8fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8fe:	49                   	dec    ecx
     8ff:	13 00                	adc    eax,DWORD PTR [eax]
     901:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     907:	0b 0b                	or     ecx,DWORD PTR [ebx]
     909:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     90b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     90d:	01 13                	add    DWORD PTR [ebx],edx
     90f:	00 00                	add    BYTE PTR [eax],al
     911:	06                   	push   es
     912:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     917:	0b 3b                	or     edi,DWORD PTR [ebx]
     919:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     91c:	38 0b                	cmp    BYTE PTR [ebx],cl
     91e:	00 00                	add    BYTE PTR [eax],al
     920:	07                   	pop    es
     921:	0d 00 03 08 3a       	or     eax,0x3a080300
     926:	0b 3b                	or     edi,DWORD PTR [ebx]
     928:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     92b:	38 0b                	cmp    BYTE PTR [ebx],cl
     92d:	00 00                	add    BYTE PTR [eax],al
     92f:	08 0f                	or     BYTE PTR [edi],cl
     931:	00 0b                	add    BYTE PTR [ebx],cl
     933:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     936:	00 00                	add    BYTE PTR [eax],al
     938:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     93b:	03 0e                	add    ecx,DWORD PTR [esi]
     93d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     93f:	49                   	dec    ecx
     940:	13 3a                	adc    edi,DWORD PTR [edx]
     942:	0b 3b                	or     edi,DWORD PTR [ebx]
     944:	0b 01                	or     eax,DWORD PTR [ecx]
     946:	13 00                	adc    eax,DWORD PTR [eax]
     948:	00 0a                	add    BYTE PTR [edx],cl
     94a:	28 00                	sub    BYTE PTR [eax],al
     94c:	03 0e                	add    ecx,DWORD PTR [esi]
     94e:	1c 0b                	sbb    al,0xb
     950:	00 00                	add    BYTE PTR [eax],al
     952:	0b 28                	or     ebp,DWORD PTR [eax]
     954:	00 03                	add    BYTE PTR [ebx],al
     956:	0e                   	push   cs
     957:	1c 05                	sbb    al,0x5
     959:	00 00                	add    BYTE PTR [eax],al
     95b:	0c 0f                	or     al,0xf
     95d:	00 0b                	add    BYTE PTR [ebx],cl
     95f:	0b 00                	or     eax,DWORD PTR [eax]
     961:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     967:	03 0e                	add    ecx,DWORD PTR [esi]
     969:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     96b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96d:	11 01                	adc    DWORD PTR [ecx],eax
     96f:	12 06                	adc    al,BYTE PTR [esi]
     971:	40                   	inc    eax
     972:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     978:	0e                   	push   cs
     979:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     97c:	19 03                	sbb    DWORD PTR [ebx],eax
     97e:	0e                   	push   cs
     97f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     981:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     983:	27                   	daa    
     984:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     987:	11 01                	adc    DWORD PTR [ecx],eax
     989:	12 06                	adc    al,BYTE PTR [esi]
     98b:	40                   	inc    eax
     98c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     992:	00 00                	add    BYTE PTR [eax],al
     994:	0f 05                	syscall 
     996:	00 03                	add    BYTE PTR [ebx],al
     998:	0e                   	push   cs
     999:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     99b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     99d:	49                   	dec    ecx
     99e:	13 02                	adc    eax,DWORD PTR [edx]
     9a0:	18 00                	sbb    BYTE PTR [eax],al
     9a2:	00 10                	add    BYTE PTR [eax],dl
     9a4:	34 00                	xor    al,0x0
     9a6:	03 0e                	add    ecx,DWORD PTR [esi]
     9a8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9aa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9ac:	49                   	dec    ecx
     9ad:	13 02                	adc    eax,DWORD PTR [edx]
     9af:	18 00                	sbb    BYTE PTR [eax],al
     9b1:	00 11                	add    BYTE PTR [ecx],dl
     9b3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9b6:	19 03                	sbb    DWORD PTR [ebx],eax
     9b8:	0e                   	push   cs
     9b9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9bb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9bd:	27                   	daa    
     9be:	19 11                	sbb    DWORD PTR [ecx],edx
     9c0:	01 12                	add    DWORD PTR [edx],edx
     9c2:	06                   	push   es
     9c3:	40                   	inc    eax
     9c4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9ca:	00 00                	add    BYTE PTR [eax],al
     9cc:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     9cf:	03 08                	add    ecx,DWORD PTR [eax]
     9d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d5:	49                   	dec    ecx
     9d6:	13 02                	adc    eax,DWORD PTR [edx]
     9d8:	18 00                	sbb    BYTE PTR [eax],al
     9da:	00 13                	add    BYTE PTR [ebx],dl
     9dc:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9df:	19 03                	sbb    DWORD PTR [ebx],eax
     9e1:	0e                   	push   cs
     9e2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e6:	27                   	daa    
     9e7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9ea:	11 01                	adc    DWORD PTR [ecx],eax
     9ec:	12 06                	adc    al,BYTE PTR [esi]
     9ee:	40                   	inc    eax
     9ef:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9f5:	00 00                	add    BYTE PTR [eax],al
     9f7:	14 2e                	adc    al,0x2e
     9f9:	01 3f                	add    DWORD PTR [edi],edi
     9fb:	19 03                	sbb    DWORD PTR [ebx],eax
     9fd:	0e                   	push   cs
     9fe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a00:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a02:	27                   	daa    
     a03:	19 11                	sbb    DWORD PTR [ecx],edx
     a05:	01 12                	add    DWORD PTR [edx],edx
     a07:	06                   	push   es
     a08:	40                   	inc    eax
     a09:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a0f:	00 00                	add    BYTE PTR [eax],al
     a11:	15 34 00 03 0e       	adc    eax,0xe030034
     a16:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a18:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a1a:	49                   	dec    ecx
     a1b:	13 3f                	adc    edi,DWORD PTR [edi]
     a1d:	19 02                	sbb    DWORD PTR [edx],eax
     a1f:	18 00                	sbb    BYTE PTR [eax],al
     a21:	00 00                	add    BYTE PTR [eax],al
     a23:	01 11                	add    DWORD PTR [ecx],edx
     a25:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a2b:	0e                   	push   cs
     a2c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a2e:	11 01                	adc    DWORD PTR [ecx],eax
     a30:	12 06                	adc    al,BYTE PTR [esi]
     a32:	10 17                	adc    BYTE PTR [edi],dl
     a34:	00 00                	add    BYTE PTR [eax],al
     a36:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a39:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a3b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a3e:	0e                   	push   cs
     a3f:	00 00                	add    BYTE PTR [eax],al
     a41:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a44:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a46:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a49:	08 00                	or     BYTE PTR [eax],al
     a4b:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     a4e:	00 0b                	add    BYTE PTR [ebx],cl
     a50:	0b 00                	or     eax,DWORD PTR [eax]
     a52:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a58:	49                   	dec    ecx
     a59:	13 00                	adc    eax,DWORD PTR [eax]
     a5b:	00 06                	add    BYTE PTR [esi],al
     a5d:	16                   	push   ss
     a5e:	00 03                	add    BYTE PTR [ebx],al
     a60:	0e                   	push   cs
     a61:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a63:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a65:	49                   	dec    ecx
     a66:	13 00                	adc    eax,DWORD PTR [eax]
     a68:	00 07                	add    BYTE PTR [edi],al
     a6a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     a6e:	00 00                	add    BYTE PTR [eax],al
     a70:	08 2e                	or     BYTE PTR [esi],ch
     a72:	01 3f                	add    DWORD PTR [edi],edi
     a74:	19 03                	sbb    DWORD PTR [ebx],eax
     a76:	0e                   	push   cs
     a77:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a79:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a7b:	27                   	daa    
     a7c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a7f:	11 01                	adc    DWORD PTR [ecx],eax
     a81:	12 06                	adc    al,BYTE PTR [esi]
     a83:	40                   	inc    eax
     a84:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     a8a:	00 00                	add    BYTE PTR [eax],al
     a8c:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     a92:	0b 3b                	or     edi,DWORD PTR [ebx]
     a94:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a97:	02 18                	add    bl,BYTE PTR [eax]
     a99:	00 00                	add    BYTE PTR [eax],al
     a9b:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     aa1:	0b 3b                	or     edi,DWORD PTR [ebx]
     aa3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     aa6:	02 18                	add    bl,BYTE PTR [eax]
     aa8:	00 00                	add    BYTE PTR [eax],al
     aaa:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     aad:	03 08                	add    ecx,DWORD PTR [eax]
     aaf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab3:	49                   	dec    ecx
     ab4:	13 02                	adc    eax,DWORD PTR [edx]
     ab6:	18 00                	sbb    BYTE PTR [eax],al
     ab8:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     abb:	01 11                	add    DWORD PTR [ecx],edx
     abd:	01 12                	add    DWORD PTR [edx],edx
     abf:	06                   	push   es
     ac0:	01 13                	add    DWORD PTR [ebx],edx
     ac2:	00 00                	add    BYTE PTR [eax],al
     ac4:	0d 0b 01 11 01       	or     eax,0x111010b
     ac9:	12 06                	adc    al,BYTE PTR [esi]
     acb:	00 00                	add    BYTE PTR [eax],al
     acd:	0e                   	push   cs
     ace:	26 00 00             	add    BYTE PTR es:[eax],al
     ad1:	00 0f                	add    BYTE PTR [edi],cl
     ad3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ad6:	19 03                	sbb    DWORD PTR [ebx],eax
     ad8:	0e                   	push   cs
     ad9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     adb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     add:	27                   	daa    
     ade:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ae1:	11 01                	adc    DWORD PTR [ecx],eax
     ae3:	12 06                	adc    al,BYTE PTR [esi]
     ae5:	40                   	inc    eax
     ae6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     aec:	00 00                	add    BYTE PTR [eax],al
     aee:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     af1:	03 0e                	add    ecx,DWORD PTR [esi]
     af3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     af5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     af7:	49                   	dec    ecx
     af8:	13 3f                	adc    edi,DWORD PTR [edi]
     afa:	19 02                	sbb    DWORD PTR [edx],eax
     afc:	18 00                	sbb    BYTE PTR [eax],al
     afe:	00 00                	add    BYTE PTR [eax],al
     b00:	01 11                	add    DWORD PTR [ecx],edx
     b02:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b08:	0e                   	push   cs
     b09:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b0b:	11 01                	adc    DWORD PTR [ecx],eax
     b0d:	12 06                	adc    al,BYTE PTR [esi]
     b0f:	10 17                	adc    BYTE PTR [edi],dl
     b11:	00 00                	add    BYTE PTR [eax],al
     b13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b16:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b1b:	0e                   	push   cs
     b1c:	00 00                	add    BYTE PTR [eax],al
     b1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b21:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b26:	08 00                	or     BYTE PTR [eax],al
     b28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b2b:	00 03                	add    BYTE PTR [ebx],al
     b2d:	0e                   	push   cs
     b2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b32:	49                   	dec    ecx
     b33:	13 00                	adc    eax,DWORD PTR [eax]
     b35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b3b:	00 00                	add    BYTE PTR [eax],al
     b3d:	06                   	push   es
     b3e:	0f 00 0b             	str    WORD PTR [ebx]
     b41:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b44:	00 00                	add    BYTE PTR [eax],al
     b46:	07                   	pop    es
     b47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b4a:	19 03                	sbb    DWORD PTR [ebx],eax
     b4c:	0e                   	push   cs
     b4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b51:	27                   	daa    
     b52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b55:	11 01                	adc    DWORD PTR [ecx],eax
     b57:	12 06                	adc    al,BYTE PTR [esi]
     b59:	40                   	inc    eax
     b5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b60:	00 00                	add    BYTE PTR [eax],al
     b62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     b68:	0b 3b                	or     edi,DWORD PTR [ebx]
     b6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b6d:	02 18                	add    bl,BYTE PTR [eax]
     b6f:	00 00                	add    BYTE PTR [eax],al
     b71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     b74:	03 08                	add    ecx,DWORD PTR [eax]
     b76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b7a:	49                   	dec    ecx
     b7b:	13 02                	adc    eax,DWORD PTR [edx]
     b7d:	18 00                	sbb    BYTE PTR [eax],al
     b7f:	00 0a                	add    BYTE PTR [edx],cl
     b81:	34 00                	xor    al,0x0
     b83:	03 0e                	add    ecx,DWORD PTR [esi]
     b85:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b87:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b89:	49                   	dec    ecx
     b8a:	13 02                	adc    eax,DWORD PTR [edx]
     b8c:	18 00                	sbb    BYTE PTR [eax],al
     b8e:	00 0b                	add    BYTE PTR [ebx],cl
     b90:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b93:	19 03                	sbb    DWORD PTR [ebx],eax
     b95:	0e                   	push   cs
     b96:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b98:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b9a:	27                   	daa    
     b9b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b9e:	11 01                	adc    DWORD PTR [ecx],eax
     ba0:	12 06                	adc    al,BYTE PTR [esi]
     ba2:	40                   	inc    eax
     ba3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ba9:	00 00                	add    BYTE PTR [eax],al
     bab:	0c 34                	or     al,0x34
     bad:	00 03                	add    BYTE PTR [ebx],al
     baf:	0e                   	push   cs
     bb0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bb2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bb4:	49                   	dec    ecx
     bb5:	13 3f                	adc    edi,DWORD PTR [edi]
     bb7:	19 02                	sbb    DWORD PTR [edx],eax
     bb9:	18 00                	sbb    BYTE PTR [eax],al
     bbb:	00 00                	add    BYTE PTR [eax],al
     bbd:	01 11                	add    DWORD PTR [ecx],edx
     bbf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     bc5:	0e                   	push   cs
     bc6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     bc8:	11 01                	adc    DWORD PTR [ecx],eax
     bca:	12 06                	adc    al,BYTE PTR [esi]
     bcc:	10 17                	adc    BYTE PTR [edi],dl
     bce:	00 00                	add    BYTE PTR [eax],al
     bd0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     bd3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bd5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bd8:	0e                   	push   cs
     bd9:	00 00                	add    BYTE PTR [eax],al
     bdb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     bde:	0b 0b                	or     ecx,DWORD PTR [ebx]
     be0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     be3:	08 00                	or     BYTE PTR [eax],al
     be5:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     be8:	00 03                	add    BYTE PTR [ebx],al
     bea:	0e                   	push   cs
     beb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bed:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bef:	49                   	dec    ecx
     bf0:	13 00                	adc    eax,DWORD PTR [eax]
     bf2:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     bf8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bfa:	49                   	dec    ecx
     bfb:	13 3a                	adc    edi,DWORD PTR [edx]
     bfd:	0b 3b                	or     edi,DWORD PTR [ebx]
     bff:	0b 01                	or     eax,DWORD PTR [ecx]
     c01:	13 00                	adc    eax,DWORD PTR [eax]
     c03:	00 06                	add    BYTE PTR [esi],al
     c05:	28 00                	sub    BYTE PTR [eax],al
     c07:	03 0e                	add    ecx,DWORD PTR [esi]
     c09:	1c 0b                	sbb    al,0xb
     c0b:	00 00                	add    BYTE PTR [eax],al
     c0d:	07                   	pop    es
     c0e:	28 00                	sub    BYTE PTR [eax],al
     c10:	03 0e                	add    ecx,DWORD PTR [esi]
     c12:	1c 05                	sbb    al,0x5
     c14:	00 00                	add    BYTE PTR [eax],al
     c16:	08 0f                	or     BYTE PTR [edi],cl
     c18:	00 0b                	add    BYTE PTR [ebx],cl
     c1a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c1d:	00 00                	add    BYTE PTR [eax],al
     c1f:	09 2e                	or     DWORD PTR [esi],ebp
     c21:	01 3f                	add    DWORD PTR [edi],edi
     c23:	19 03                	sbb    DWORD PTR [ebx],eax
     c25:	0e                   	push   cs
     c26:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c28:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c2a:	27                   	daa    
     c2b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c2e:	11 01                	adc    DWORD PTR [ecx],eax
     c30:	12 06                	adc    al,BYTE PTR [esi]
     c32:	40                   	inc    eax
     c33:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     c41:	0b 3b                	or     edi,DWORD PTR [ebx]
     c43:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c46:	02 18                	add    bl,BYTE PTR [eax]
     c48:	00 00                	add    BYTE PTR [eax],al
     c4a:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c4d:	03 0e                	add    ecx,DWORD PTR [esi]
     c4f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c51:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c53:	49                   	dec    ecx
     c54:	13 3f                	adc    edi,DWORD PTR [edi]
     c56:	19 02                	sbb    DWORD PTR [edx],eax
     c58:	18 00                	sbb    BYTE PTR [eax],al
     c5a:	00 00                	add    BYTE PTR [eax],al
     c5c:	01 11                	add    DWORD PTR [ecx],edx
     c5e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c64:	0e                   	push   cs
     c65:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c67:	11 01                	adc    DWORD PTR [ecx],eax
     c69:	12 06                	adc    al,BYTE PTR [esi]
     c6b:	10 17                	adc    BYTE PTR [edi],dl
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	02 16                	add    dl,BYTE PTR [esi]
     c71:	00 03                	add    BYTE PTR [ebx],al
     c73:	0e                   	push   cs
     c74:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c76:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c78:	49                   	dec    ecx
     c79:	13 00                	adc    eax,DWORD PTR [eax]
     c7b:	00 03                	add    BYTE PTR [ebx],al
     c7d:	0f 00 0b             	str    WORD PTR [ebx]
     c80:	0b 03                	or     eax,DWORD PTR [ebx]
     c82:	0e                   	push   cs
     c83:	49                   	dec    ecx
     c84:	13 00                	adc    eax,DWORD PTR [eax]
     c86:	00 04 24             	add    BYTE PTR [esp],al
     c89:	00 0b                	add    BYTE PTR [ebx],cl
     c8b:	0b 3e                	or     edi,DWORD PTR [esi]
     c8d:	0b 03                	or     eax,DWORD PTR [ebx]
     c8f:	0e                   	push   cs
     c90:	00 00                	add    BYTE PTR [eax],al
     c92:	05 24 00 0b 0b       	add    eax,0xb0b0024
     c97:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c9a:	08 00                	or     BYTE PTR [eax],al
     c9c:	00 06                	add    BYTE PTR [esi],al
     c9e:	0f 00 0b             	str    WORD PTR [ebx]
     ca1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ca4:	00 00                	add    BYTE PTR [eax],al
     ca6:	07                   	pop    es
     ca7:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     cab:	00 00                	add    BYTE PTR [eax],al
     cad:	08 2e                	or     BYTE PTR [esi],ch
     caf:	01 03                	add    DWORD PTR [ebx],eax
     cb1:	0e                   	push   cs
     cb2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cb4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cb6:	27                   	daa    
     cb7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cba:	11 01                	adc    DWORD PTR [ecx],eax
     cbc:	12 06                	adc    al,BYTE PTR [esi]
     cbe:	40                   	inc    eax
     cbf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     cc5:	00 00                	add    BYTE PTR [eax],al
     cc7:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     ccd:	0b 3b                	or     edi,DWORD PTR [ebx]
     ccf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cd2:	02 18                	add    bl,BYTE PTR [eax]
     cd4:	00 00                	add    BYTE PTR [eax],al
     cd6:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     cd9:	03 08                	add    ecx,DWORD PTR [eax]
     cdb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cdd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cdf:	49                   	dec    ecx
     ce0:	13 02                	adc    eax,DWORD PTR [edx]
     ce2:	18 00                	sbb    BYTE PTR [eax],al
     ce4:	00 0b                	add    BYTE PTR [ebx],cl
     ce6:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     ceb:	0b 3b                	or     edi,DWORD PTR [ebx]
     ced:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cf0:	02 18                	add    bl,BYTE PTR [eax]
     cf2:	00 00                	add    BYTE PTR [eax],al
     cf4:	0c 34                	or     al,0x34
     cf6:	00 03                	add    BYTE PTR [ebx],al
     cf8:	0e                   	push   cs
     cf9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cfb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cfd:	49                   	dec    ecx
     cfe:	13 02                	adc    eax,DWORD PTR [edx]
     d00:	18 00                	sbb    BYTE PTR [eax],al
     d02:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     d08:	12 06                	adc    al,BYTE PTR [esi]
     d0a:	00 00                	add    BYTE PTR [eax],al
     d0c:	0e                   	push   cs
     d0d:	01 01                	add    DWORD PTR [ecx],eax
     d0f:	49                   	dec    ecx
     d10:	13 01                	adc    eax,DWORD PTR [ecx]
     d12:	13 00                	adc    eax,DWORD PTR [eax]
     d14:	00 0f                	add    BYTE PTR [edi],cl
     d16:	21 00                	and    DWORD PTR [eax],eax
     d18:	49                   	dec    ecx
     d19:	13 2f                	adc    ebp,DWORD PTR [edi]
     d1b:	0b 00                	or     eax,DWORD PTR [eax]
     d1d:	00 10                	add    BYTE PTR [eax],dl
     d1f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d22:	19 03                	sbb    DWORD PTR [ebx],eax
     d24:	0e                   	push   cs
     d25:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d27:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d29:	27                   	daa    
     d2a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d2d:	11 01                	adc    DWORD PTR [ecx],eax
     d2f:	12 06                	adc    al,BYTE PTR [esi]
     d31:	40                   	inc    eax
     d32:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d38:	00 00                	add    BYTE PTR [eax],al
     d3a:	11 0a                	adc    DWORD PTR [edx],ecx
     d3c:	00 03                	add    BYTE PTR [ebx],al
     d3e:	0e                   	push   cs
     d3f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d41:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d43:	11 01                	adc    DWORD PTR [ecx],eax
     d45:	00 00                	add    BYTE PTR [eax],al
     d47:	12 0b                	adc    cl,BYTE PTR [ebx]
     d49:	01 11                	add    DWORD PTR [ecx],edx
     d4b:	01 12                	add    DWORD PTR [edx],edx
     d4d:	06                   	push   es
     d4e:	01 13                	add    DWORD PTR [ebx],edx
     d50:	00 00                	add    BYTE PTR [eax],al
     d52:	13 2e                	adc    ebp,DWORD PTR [esi]
     d54:	01 3f                	add    DWORD PTR [edi],edi
     d56:	19 03                	sbb    DWORD PTR [ebx],eax
     d58:	0e                   	push   cs
     d59:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d5b:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     d61:	11 01                	adc    DWORD PTR [ecx],eax
     d63:	12 06                	adc    al,BYTE PTR [esi]
     d65:	40                   	inc    eax
     d66:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d6c:	00 00                	add    BYTE PTR [eax],al
     d6e:	14 05                	adc    al,0x5
     d70:	00 03                	add    BYTE PTR [ebx],al
     d72:	08 3a                	or     BYTE PTR [edx],bh
     d74:	0b 3b                	or     edi,DWORD PTR [ebx]
     d76:	05 49 13 02 18       	add    eax,0x18021349
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	15 18 00 00 00       	adc    eax,0x18
     d82:	16                   	push   ss
     d83:	34 00                	xor    al,0x0
     d85:	03 0e                	add    ecx,DWORD PTR [esi]
     d87:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d89:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     d8f:	00 00                	add    BYTE PTR [eax],al
     d91:	17                   	pop    ss
     d92:	34 00                	xor    al,0x0
     d94:	03 08                	add    ecx,DWORD PTR [eax]
     d96:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d98:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     d9e:	00 00                	add    BYTE PTR [eax],al
     da0:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     da3:	03 0e                	add    ecx,DWORD PTR [esi]
     da5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     da7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da9:	49                   	dec    ecx
     daa:	13 3f                	adc    edi,DWORD PTR [edi]
     dac:	19 02                	sbb    DWORD PTR [edx],eax
     dae:	18 00                	sbb    BYTE PTR [eax],al
     db0:	00 00                	add    BYTE PTR [eax],al
     db2:	01 11                	add    DWORD PTR [ecx],edx
     db4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     dba:	0e                   	push   cs
     dbb:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     dbd:	11 01                	adc    DWORD PTR [ecx],eax
     dbf:	12 06                	adc    al,BYTE PTR [esi]
     dc1:	10 17                	adc    BYTE PTR [edi],dl
     dc3:	00 00                	add    BYTE PTR [eax],al
     dc5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     dc8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dca:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dcd:	0e                   	push   cs
     dce:	00 00                	add    BYTE PTR [eax],al
     dd0:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     dd3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dd5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dd8:	08 00                	or     BYTE PTR [eax],al
     dda:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ddd:	00 03                	add    BYTE PTR [ebx],al
     ddf:	0e                   	push   cs
     de0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     de4:	49                   	dec    ecx
     de5:	13 00                	adc    eax,DWORD PTR [eax]
     de7:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ded:	49                   	dec    ecx
     dee:	13 00                	adc    eax,DWORD PTR [eax]
     df0:	00 06                	add    BYTE PTR [esi],al
     df2:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     df6:	00 00                	add    BYTE PTR [eax],al
     df8:	07                   	pop    es
     df9:	0f 00 0b             	str    WORD PTR [ebx]
     dfc:	0b 00                	or     eax,DWORD PTR [eax]
     dfe:	00 08                	add    BYTE PTR [eax],cl
     e00:	13 01                	adc    eax,DWORD PTR [ecx]
     e02:	03 0e                	add    ecx,DWORD PTR [esi]
     e04:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e0a:	01 13                	add    DWORD PTR [ebx],edx
     e0c:	00 00                	add    BYTE PTR [eax],al
     e0e:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     e14:	0b 3b                	or     edi,DWORD PTR [ebx]
     e16:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e19:	38 0b                	cmp    BYTE PTR [ebx],cl
     e1b:	00 00                	add    BYTE PTR [eax],al
     e1d:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     e23:	13 01                	adc    eax,DWORD PTR [ecx]
     e25:	13 00                	adc    eax,DWORD PTR [eax]
     e27:	00 0b                	add    BYTE PTR [ebx],cl
     e29:	05 00 49 13 00       	add    eax,0x134900
     e2e:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     e31:	01 3f                	add    DWORD PTR [edi],edi
     e33:	19 03                	sbb    DWORD PTR [ebx],eax
     e35:	0e                   	push   cs
     e36:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e38:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e3a:	11 01                	adc    DWORD PTR [ecx],eax
     e3c:	12 06                	adc    al,BYTE PTR [esi]
     e3e:	40                   	inc    eax
     e3f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e45:	00 00                	add    BYTE PTR [eax],al
     e47:	0d 34 00 03 0e       	or     eax,0xe030034
     e4c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e4e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e50:	49                   	dec    ecx
     e51:	13 02                	adc    eax,DWORD PTR [edx]
     e53:	18 00                	sbb    BYTE PTR [eax],al
     e55:	00 0e                	add    BYTE PTR [esi],cl
     e57:	01 01                	add    DWORD PTR [ecx],eax
     e59:	49                   	dec    ecx
     e5a:	13 01                	adc    eax,DWORD PTR [ecx]
     e5c:	13 00                	adc    eax,DWORD PTR [eax]
     e5e:	00 0f                	add    BYTE PTR [edi],cl
     e60:	21 00                	and    DWORD PTR [eax],eax
     e62:	49                   	dec    ecx
     e63:	13 2f                	adc    ebp,DWORD PTR [edi]
     e65:	0b 00                	or     eax,DWORD PTR [eax]
     e67:	00 10                	add    BYTE PTR [eax],dl
     e69:	34 00                	xor    al,0x0
     e6b:	03 0e                	add    ecx,DWORD PTR [esi]
     e6d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e6f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e71:	49                   	dec    ecx
     e72:	13 3f                	adc    edi,DWORD PTR [edi]
     e74:	19 02                	sbb    DWORD PTR [edx],eax
     e76:	18 00                	sbb    BYTE PTR [eax],al
     e78:	00 00                	add    BYTE PTR [eax],al
     e7a:	01 11                	add    DWORD PTR [ecx],edx
     e7c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e82:	0e                   	push   cs
     e83:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e85:	11 01                	adc    DWORD PTR [ecx],eax
     e87:	12 06                	adc    al,BYTE PTR [esi]
     e89:	10 17                	adc    BYTE PTR [edi],dl
     e8b:	00 00                	add    BYTE PTR [eax],al
     e8d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e90:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e92:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e95:	0e                   	push   cs
     e96:	00 00                	add    BYTE PTR [eax],al
     e98:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     e9b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e9d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ea0:	08 00                	or     BYTE PTR [eax],al
     ea2:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ea5:	00 03                	add    BYTE PTR [ebx],al
     ea7:	0e                   	push   cs
     ea8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eaa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eac:	49                   	dec    ecx
     ead:	13 00                	adc    eax,DWORD PTR [eax]
     eaf:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     eb5:	49                   	dec    ecx
     eb6:	13 00                	adc    eax,DWORD PTR [eax]
     eb8:	00 06                	add    BYTE PTR [esi],al
     eba:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	07                   	pop    es
     ec1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ec4:	19 03                	sbb    DWORD PTR [ebx],eax
     ec6:	0e                   	push   cs
     ec7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ecb:	27                   	daa    
     ecc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ecf:	11 01                	adc    DWORD PTR [ecx],eax
     ed1:	12 06                	adc    al,BYTE PTR [esi]
     ed3:	40                   	inc    eax
     ed4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     eda:	00 00                	add    BYTE PTR [eax],al
     edc:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     ee2:	0b 3b                	or     edi,DWORD PTR [ebx]
     ee4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ee7:	02 18                	add    bl,BYTE PTR [eax]
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     ef1:	0b 3b                	or     edi,DWORD PTR [ebx]
     ef3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ef6:	02 18                	add    bl,BYTE PTR [eax]
     ef8:	00 00                	add    BYTE PTR [eax],al
     efa:	0a 2e                	or     ch,BYTE PTR [esi]
     efc:	01 3f                	add    DWORD PTR [edi],edi
     efe:	19 03                	sbb    DWORD PTR [ebx],eax
     f00:	0e                   	push   cs
     f01:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f03:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f05:	27                   	daa    
     f06:	19 11                	sbb    DWORD PTR [ecx],edx
     f08:	01 12                	add    DWORD PTR [edx],edx
     f0a:	06                   	push   es
     f0b:	40                   	inc    eax
     f0c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f12:	00 00                	add    BYTE PTR [eax],al
     f14:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     f17:	03 08                	add    ecx,DWORD PTR [eax]
     f19:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f1b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f1d:	49                   	dec    ecx
     f1e:	13 02                	adc    eax,DWORD PTR [edx]
     f20:	18 00                	sbb    BYTE PTR [eax],al
     f22:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     f25:	00 03                	add    BYTE PTR [ebx],al
     f27:	0e                   	push   cs
     f28:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f2a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f2c:	49                   	dec    ecx
     f2d:	13 3f                	adc    edi,DWORD PTR [edi]
     f2f:	19 02                	sbb    DWORD PTR [edx],eax
     f31:	18 00                	sbb    BYTE PTR [eax],al
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	01 11                	add    DWORD PTR [ecx],edx
     f37:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f3d:	0e                   	push   cs
     f3e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f40:	11 01                	adc    DWORD PTR [ecx],eax
     f42:	12 06                	adc    al,BYTE PTR [esi]
     f44:	10 17                	adc    BYTE PTR [edi],dl
     f46:	00 00                	add    BYTE PTR [eax],al
     f48:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f4b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f4d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f50:	0e                   	push   cs
     f51:	00 00                	add    BYTE PTR [eax],al
     f53:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f56:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f58:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f5b:	08 00                	or     BYTE PTR [eax],al
     f5d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f60:	00 03                	add    BYTE PTR [ebx],al
     f62:	0e                   	push   cs
     f63:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f65:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f67:	49                   	dec    ecx
     f68:	13 00                	adc    eax,DWORD PTR [eax]
     f6a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f70:	49                   	dec    ecx
     f71:	13 00                	adc    eax,DWORD PTR [eax]
     f73:	00 06                	add    BYTE PTR [esi],al
     f75:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f79:	00 00                	add    BYTE PTR [eax],al
     f7b:	07                   	pop    es
     f7c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f7f:	19 03                	sbb    DWORD PTR [ebx],eax
     f81:	0e                   	push   cs
     f82:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f84:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f86:	27                   	daa    
     f87:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f8a:	11 01                	adc    DWORD PTR [ecx],eax
     f8c:	12 06                	adc    al,BYTE PTR [esi]
     f8e:	40                   	inc    eax
     f8f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f95:	00 00                	add    BYTE PTR [eax],al
     f97:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     f9d:	0b 3b                	or     edi,DWORD PTR [ebx]
     f9f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fa2:	02 18                	add    bl,BYTE PTR [eax]
     fa4:	00 00                	add    BYTE PTR [eax],al
     fa6:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     fa9:	03 08                	add    ecx,DWORD PTR [eax]
     fab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     faf:	49                   	dec    ecx
     fb0:	13 02                	adc    eax,DWORD PTR [edx]
     fb2:	18 00                	sbb    BYTE PTR [eax],al
     fb4:	00 0a                	add    BYTE PTR [edx],cl
     fb6:	34 00                	xor    al,0x0
     fb8:	03 0e                	add    ecx,DWORD PTR [esi]
     fba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fbc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fbe:	49                   	dec    ecx
     fbf:	13 3f                	adc    edi,DWORD PTR [edi]
     fc1:	19 02                	sbb    DWORD PTR [edx],eax
     fc3:	18 00                	sbb    BYTE PTR [eax],al
     fc5:	00 00                	add    BYTE PTR [eax],al
     fc7:	01 11                	add    DWORD PTR [ecx],edx
     fc9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     fcf:	0e                   	push   cs
     fd0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fd2:	11 01                	adc    DWORD PTR [ecx],eax
     fd4:	12 06                	adc    al,BYTE PTR [esi]
     fd6:	10 17                	adc    BYTE PTR [edi],dl
     fd8:	00 00                	add    BYTE PTR [eax],al
     fda:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fdd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fdf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fe2:	0e                   	push   cs
     fe3:	00 00                	add    BYTE PTR [eax],al
     fe5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fe8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fea:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fed:	08 00                	or     BYTE PTR [eax],al
     fef:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ff2:	00 03                	add    BYTE PTR [ebx],al
     ff4:	0e                   	push   cs
     ff5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff9:	49                   	dec    ecx
     ffa:	13 00                	adc    eax,DWORD PTR [eax]
     ffc:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1002:	49                   	dec    ecx
    1003:	13 00                	adc    eax,DWORD PTR [eax]
    1005:	00 06                	add    BYTE PTR [esi],al
    1007:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    100b:	00 00                	add    BYTE PTR [eax],al
    100d:	07                   	pop    es
    100e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1011:	19 03                	sbb    DWORD PTR [ebx],eax
    1013:	0e                   	push   cs
    1014:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1016:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1018:	27                   	daa    
    1019:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    101c:	11 01                	adc    DWORD PTR [ecx],eax
    101e:	12 06                	adc    al,BYTE PTR [esi]
    1020:	40                   	inc    eax
    1021:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1027:	00 00                	add    BYTE PTR [eax],al
    1029:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    102f:	0b 3b                	or     edi,DWORD PTR [ebx]
    1031:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1034:	02 18                	add    bl,BYTE PTR [eax]
    1036:	00 00                	add    BYTE PTR [eax],al
    1038:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    103b:	03 08                	add    ecx,DWORD PTR [eax]
    103d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    103f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1041:	49                   	dec    ecx
    1042:	13 02                	adc    eax,DWORD PTR [edx]
    1044:	18 00                	sbb    BYTE PTR [eax],al
    1046:	00 0a                	add    BYTE PTR [edx],cl
    1048:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    104d:	0b 3b                	or     edi,DWORD PTR [ebx]
    104f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1052:	02 18                	add    bl,BYTE PTR [eax]
    1054:	00 00                	add    BYTE PTR [eax],al
    1056:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    1059:	03 0e                	add    ecx,DWORD PTR [esi]
    105b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    105d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    105f:	49                   	dec    ecx
    1060:	13 3f                	adc    edi,DWORD PTR [edi]
    1062:	19 02                	sbb    DWORD PTR [edx],eax
    1064:	18 00                	sbb    BYTE PTR [eax],al
    1066:	00 00                	add    BYTE PTR [eax],al
    1068:	01 11                	add    DWORD PTR [ecx],edx
    106a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1070:	0e                   	push   cs
    1071:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1073:	11 01                	adc    DWORD PTR [ecx],eax
    1075:	12 06                	adc    al,BYTE PTR [esi]
    1077:	10 17                	adc    BYTE PTR [edi],dl
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    107e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1080:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1083:	0e                   	push   cs
    1084:	00 00                	add    BYTE PTR [eax],al
    1086:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1089:	0b 0b                	or     ecx,DWORD PTR [ebx]
    108b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    108e:	08 00                	or     BYTE PTR [eax],al
    1090:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1093:	00 03                	add    BYTE PTR [ebx],al
    1095:	0e                   	push   cs
    1096:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1098:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    109a:	49                   	dec    ecx
    109b:	13 00                	adc    eax,DWORD PTR [eax]
    109d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    10a3:	49                   	dec    ecx
    10a4:	13 00                	adc    eax,DWORD PTR [eax]
    10a6:	00 06                	add    BYTE PTR [esi],al
    10a8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    10ab:	19 03                	sbb    DWORD PTR [ebx],eax
    10ad:	0e                   	push   cs
    10ae:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10b0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10b2:	27                   	daa    
    10b3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10b6:	11 01                	adc    DWORD PTR [ecx],eax
    10b8:	12 06                	adc    al,BYTE PTR [esi]
    10ba:	40                   	inc    eax
    10bb:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10c1:	00 00                	add    BYTE PTR [eax],al
    10c3:	07                   	pop    es
    10c4:	05 00 03 08 3a       	add    eax,0x3a080300
    10c9:	0b 3b                	or     edi,DWORD PTR [ebx]
    10cb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10ce:	02 18                	add    bl,BYTE PTR [eax]
    10d0:	00 00                	add    BYTE PTR [eax],al
    10d2:	08 2e                	or     BYTE PTR [esi],ch
    10d4:	01 3f                	add    DWORD PTR [edi],edi
    10d6:	19 03                	sbb    DWORD PTR [ebx],eax
    10d8:	0e                   	push   cs
    10d9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10db:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10dd:	27                   	daa    
    10de:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10e1:	11 01                	adc    DWORD PTR [ecx],eax
    10e3:	12 06                	adc    al,BYTE PTR [esi]
    10e5:	40                   	inc    eax
    10e6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    10ec:	00 00                	add    BYTE PTR [eax],al
    10ee:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    10f1:	03 08                	add    ecx,DWORD PTR [eax]
    10f3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10f5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10f7:	49                   	dec    ecx
    10f8:	13 02                	adc    eax,DWORD PTR [edx]
    10fa:	18 00                	sbb    BYTE PTR [eax],al
    10fc:	00 0a                	add    BYTE PTR [edx],cl
    10fe:	34 00                	xor    al,0x0
    1100:	03 0e                	add    ecx,DWORD PTR [esi]
    1102:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1104:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1106:	49                   	dec    ecx
    1107:	13 3f                	adc    edi,DWORD PTR [edi]
    1109:	19 02                	sbb    DWORD PTR [edx],eax
    110b:	18 00                	sbb    BYTE PTR [eax],al
    110d:	00 00                	add    BYTE PTR [eax],al
    110f:	01 11                	add    DWORD PTR [ecx],edx
    1111:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1117:	0e                   	push   cs
    1118:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    111a:	11 01                	adc    DWORD PTR [ecx],eax
    111c:	12 06                	adc    al,BYTE PTR [esi]
    111e:	10 17                	adc    BYTE PTR [edi],dl
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1125:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1127:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    112a:	08 00                	or     BYTE PTR [eax],al
    112c:	00 03                	add    BYTE PTR [ebx],al
    112e:	16                   	push   ss
    112f:	00 03                	add    BYTE PTR [ebx],al
    1131:	0e                   	push   cs
    1132:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1134:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1136:	49                   	dec    ecx
    1137:	13 00                	adc    eax,DWORD PTR [eax]
    1139:	00 04 24             	add    BYTE PTR [esp],al
    113c:	00 0b                	add    BYTE PTR [ebx],cl
    113e:	0b 3e                	or     edi,DWORD PTR [esi]
    1140:	0b 03                	or     eax,DWORD PTR [ebx]
    1142:	0e                   	push   cs
    1143:	00 00                	add    BYTE PTR [eax],al
    1145:	05 2e 01 3f 19       	add    eax,0x193f012e
    114a:	03 0e                	add    ecx,DWORD PTR [esi]
    114c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    114e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1150:	27                   	daa    
    1151:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1154:	11 01                	adc    DWORD PTR [ecx],eax
    1156:	12 06                	adc    al,BYTE PTR [esi]
    1158:	40                   	inc    eax
    1159:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    115f:	00 00                	add    BYTE PTR [eax],al
    1161:	06                   	push   es
    1162:	05 00 03 08 3a       	add    eax,0x3a080300
    1167:	0b 3b                	or     edi,DWORD PTR [ebx]
    1169:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    116c:	02 18                	add    bl,BYTE PTR [eax]
    116e:	00 00                	add    BYTE PTR [eax],al
    1170:	07                   	pop    es
    1171:	34 00                	xor    al,0x0
    1173:	03 08                	add    ecx,DWORD PTR [eax]
    1175:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1177:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1179:	49                   	dec    ecx
    117a:	13 02                	adc    eax,DWORD PTR [edx]
    117c:	18 00                	sbb    BYTE PTR [eax],al
    117e:	00 08                	add    BYTE PTR [eax],cl
    1180:	0f 00 0b             	str    WORD PTR [ebx]
    1183:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1186:	00 00                	add    BYTE PTR [eax],al
    1188:	09 26                	or     DWORD PTR [esi],esp
    118a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    118d:	00 00                	add    BYTE PTR [eax],al
    118f:	0a 2e                	or     ch,BYTE PTR [esi]
    1191:	01 3f                	add    DWORD PTR [edi],edi
    1193:	19 03                	sbb    DWORD PTR [ebx],eax
    1195:	0e                   	push   cs
    1196:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1198:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    119a:	27                   	daa    
    119b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    119e:	11 01                	adc    DWORD PTR [ecx],eax
    11a0:	12 06                	adc    al,BYTE PTR [esi]
    11a2:	40                   	inc    eax
    11a3:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    11a9:	00 01                	add    BYTE PTR [ecx],al
    11ab:	11 01                	adc    DWORD PTR [ecx],eax
    11ad:	25 0e 13 0b 03       	and    eax,0x30b130e
    11b2:	0e                   	push   cs
    11b3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11b5:	11 01                	adc    DWORD PTR [ecx],eax
    11b7:	12 06                	adc    al,BYTE PTR [esi]
    11b9:	10 17                	adc    BYTE PTR [edi],dl
    11bb:	00 00                	add    BYTE PTR [eax],al
    11bd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11c0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11c2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11c5:	08 00                	or     BYTE PTR [eax],al
    11c7:	00 03                	add    BYTE PTR [ebx],al
    11c9:	16                   	push   ss
    11ca:	00 03                	add    BYTE PTR [ebx],al
    11cc:	0e                   	push   cs
    11cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11d1:	49                   	dec    ecx
    11d2:	13 00                	adc    eax,DWORD PTR [eax]
    11d4:	00 04 24             	add    BYTE PTR [esp],al
    11d7:	00 0b                	add    BYTE PTR [ebx],cl
    11d9:	0b 3e                	or     edi,DWORD PTR [esi]
    11db:	0b 03                	or     eax,DWORD PTR [ebx]
    11dd:	0e                   	push   cs
    11de:	00 00                	add    BYTE PTR [eax],al
    11e0:	05 2e 01 3f 19       	add    eax,0x193f012e
    11e5:	03 0e                	add    ecx,DWORD PTR [esi]
    11e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11eb:	27                   	daa    
    11ec:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11ef:	11 01                	adc    DWORD PTR [ecx],eax
    11f1:	12 06                	adc    al,BYTE PTR [esi]
    11f3:	40                   	inc    eax
    11f4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11fa:	00 00                	add    BYTE PTR [eax],al
    11fc:	06                   	push   es
    11fd:	05 00 03 08 3a       	add    eax,0x3a080300
    1202:	0b 3b                	or     edi,DWORD PTR [ebx]
    1204:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1207:	02 18                	add    bl,BYTE PTR [eax]
    1209:	00 00                	add    BYTE PTR [eax],al
    120b:	07                   	pop    es
    120c:	0f 00 0b             	str    WORD PTR [ebx]
    120f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1212:	00 00                	add    BYTE PTR [eax],al
    1214:	08 26                	or     BYTE PTR [esi],ah
    1216:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1219:	00 00                	add    BYTE PTR [eax],al
    121b:	09 2e                	or     DWORD PTR [esi],ebp
    121d:	01 3f                	add    DWORD PTR [edi],edi
    121f:	19 03                	sbb    DWORD PTR [ebx],eax
    1221:	0e                   	push   cs
    1222:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1224:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1226:	27                   	daa    
    1227:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    122a:	11 01                	adc    DWORD PTR [ecx],eax
    122c:	12 06                	adc    al,BYTE PTR [esi]
    122e:	40                   	inc    eax
    122f:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1235:	00 01                	add    BYTE PTR [ecx],al
    1237:	11 01                	adc    DWORD PTR [ecx],eax
    1239:	25 0e 13 0b 03       	and    eax,0x30b130e
    123e:	0e                   	push   cs
    123f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1241:	11 01                	adc    DWORD PTR [ecx],eax
    1243:	12 06                	adc    al,BYTE PTR [esi]
    1245:	10 17                	adc    BYTE PTR [edi],dl
    1247:	00 00                	add    BYTE PTR [eax],al
    1249:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    124c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    124e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1251:	08 00                	or     BYTE PTR [eax],al
    1253:	00 03                	add    BYTE PTR [ebx],al
    1255:	16                   	push   ss
    1256:	00 03                	add    BYTE PTR [ebx],al
    1258:	0e                   	push   cs
    1259:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    125b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    125d:	49                   	dec    ecx
    125e:	13 00                	adc    eax,DWORD PTR [eax]
    1260:	00 04 24             	add    BYTE PTR [esp],al
    1263:	00 0b                	add    BYTE PTR [ebx],cl
    1265:	0b 3e                	or     edi,DWORD PTR [esi]
    1267:	0b 03                	or     eax,DWORD PTR [ebx]
    1269:	0e                   	push   cs
    126a:	00 00                	add    BYTE PTR [eax],al
    126c:	05 2e 01 3f 19       	add    eax,0x193f012e
    1271:	03 0e                	add    ecx,DWORD PTR [esi]
    1273:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1275:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1277:	27                   	daa    
    1278:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    127b:	11 01                	adc    DWORD PTR [ecx],eax
    127d:	12 06                	adc    al,BYTE PTR [esi]
    127f:	40                   	inc    eax
    1280:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1286:	00 00                	add    BYTE PTR [eax],al
    1288:	06                   	push   es
    1289:	05 00 03 08 3a       	add    eax,0x3a080300
    128e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1290:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1293:	02 18                	add    bl,BYTE PTR [eax]
    1295:	00 00                	add    BYTE PTR [eax],al
    1297:	07                   	pop    es
    1298:	34 00                	xor    al,0x0
    129a:	03 08                	add    ecx,DWORD PTR [eax]
    129c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    129e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12a0:	49                   	dec    ecx
    12a1:	13 02                	adc    eax,DWORD PTR [edx]
    12a3:	18 00                	sbb    BYTE PTR [eax],al
    12a5:	00 08                	add    BYTE PTR [eax],cl
    12a7:	0f 00 0b             	str    WORD PTR [ebx]
    12aa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	09 26                	or     DWORD PTR [esi],esp
    12b1:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12b4:	00 00                	add    BYTE PTR [eax],al
    12b6:	0a 2e                	or     ch,BYTE PTR [esi]
    12b8:	01 3f                	add    DWORD PTR [edi],edi
    12ba:	19 03                	sbb    DWORD PTR [ebx],eax
    12bc:	0e                   	push   cs
    12bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c1:	27                   	daa    
    12c2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12c5:	11 01                	adc    DWORD PTR [ecx],eax
    12c7:	12 06                	adc    al,BYTE PTR [esi]
    12c9:	40                   	inc    eax
    12ca:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    12d0:	00 01                	add    BYTE PTR [ecx],al
    12d2:	11 01                	adc    DWORD PTR [ecx],eax
    12d4:	25 0e 13 0b 03       	and    eax,0x30b130e
    12d9:	0e                   	push   cs
    12da:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12dc:	11 01                	adc    DWORD PTR [ecx],eax
    12de:	12 06                	adc    al,BYTE PTR [esi]
    12e0:	10 17                	adc    BYTE PTR [edi],dl
    12e2:	00 00                	add    BYTE PTR [eax],al
    12e4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12e7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12e9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12ec:	0e                   	push   cs
    12ed:	00 00                	add    BYTE PTR [eax],al
    12ef:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    12f2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12f4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12f7:	08 00                	or     BYTE PTR [eax],al
    12f9:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    12fc:	00 03                	add    BYTE PTR [ebx],al
    12fe:	0e                   	push   cs
    12ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1301:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1303:	49                   	dec    ecx
    1304:	13 00                	adc    eax,DWORD PTR [eax]
    1306:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    130c:	49                   	dec    ecx
    130d:	13 00                	adc    eax,DWORD PTR [eax]
    130f:	00 06                	add    BYTE PTR [esi],al
    1311:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1315:	00 00                	add    BYTE PTR [eax],al
    1317:	07                   	pop    es
    1318:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    131b:	19 03                	sbb    DWORD PTR [ebx],eax
    131d:	0e                   	push   cs
    131e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1320:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1322:	27                   	daa    
    1323:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1326:	11 01                	adc    DWORD PTR [ecx],eax
    1328:	12 06                	adc    al,BYTE PTR [esi]
    132a:	40                   	inc    eax
    132b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1331:	00 00                	add    BYTE PTR [eax],al
    1333:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1339:	0b 3b                	or     edi,DWORD PTR [ebx]
    133b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    133e:	02 18                	add    bl,BYTE PTR [eax]
    1340:	00 00                	add    BYTE PTR [eax],al
    1342:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1345:	03 08                	add    ecx,DWORD PTR [eax]
    1347:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1349:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    134b:	49                   	dec    ecx
    134c:	13 02                	adc    eax,DWORD PTR [edx]
    134e:	18 00                	sbb    BYTE PTR [eax],al
    1350:	00 0a                	add    BYTE PTR [edx],cl
    1352:	34 00                	xor    al,0x0
    1354:	03 0e                	add    ecx,DWORD PTR [esi]
    1356:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1358:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    135a:	49                   	dec    ecx
    135b:	13 00                	adc    eax,DWORD PTR [eax]
    135d:	00 0b                	add    BYTE PTR [ebx],cl
    135f:	34 00                	xor    al,0x0
    1361:	03 08                	add    ecx,DWORD PTR [eax]
    1363:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1365:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1367:	49                   	dec    ecx
    1368:	13 00                	adc    eax,DWORD PTR [eax]
    136a:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    136d:	00 03                	add    BYTE PTR [ebx],al
    136f:	0e                   	push   cs
    1370:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1372:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1374:	49                   	dec    ecx
    1375:	13 02                	adc    eax,DWORD PTR [edx]
    1377:	18 00                	sbb    BYTE PTR [eax],al
    1379:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    137f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1381:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1383:	49                   	dec    ecx
    1384:	13 3f                	adc    edi,DWORD PTR [edi]
    1386:	19 02                	sbb    DWORD PTR [edx],eax
    1388:	18 00                	sbb    BYTE PTR [eax],al
    138a:	00 00                	add    BYTE PTR [eax],al
    138c:	01 11                	add    DWORD PTR [ecx],edx
    138e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1394:	0e                   	push   cs
    1395:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1397:	11 01                	adc    DWORD PTR [ecx],eax
    1399:	12 06                	adc    al,BYTE PTR [esi]
    139b:	10 17                	adc    BYTE PTR [edi],dl
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	02 2e                	add    ch,BYTE PTR [esi]
    13a1:	01 3f                	add    DWORD PTR [edi],edi
    13a3:	19 03                	sbb    DWORD PTR [ebx],eax
    13a5:	0e                   	push   cs
    13a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13aa:	27                   	daa    
    13ab:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13ae:	11 01                	adc    DWORD PTR [ecx],eax
    13b0:	12 06                	adc    al,BYTE PTR [esi]
    13b2:	40                   	inc    eax
    13b3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13b9:	00 00                	add    BYTE PTR [eax],al
    13bb:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    13c1:	0b 3b                	or     edi,DWORD PTR [ebx]
    13c3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13c6:	02 18                	add    bl,BYTE PTR [eax]
    13c8:	00 00                	add    BYTE PTR [eax],al
    13ca:	04 0f                	add    al,0xf
    13cc:	00 0b                	add    BYTE PTR [ebx],cl
    13ce:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13d1:	00 00                	add    BYTE PTR [eax],al
    13d3:	05 24 00 0b 0b       	add    eax,0xb0b0024
    13d8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13db:	0e                   	push   cs
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	06                   	push   es
    13df:	24 00                	and    al,0x0
    13e1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13e3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13e6:	08 00                	or     BYTE PTR [eax],al
    13e8:	00 00                	add    BYTE PTR [eax],al
    13ea:	01 11                	add    DWORD PTR [ecx],edx
    13ec:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    13f2:	0e                   	push   cs
    13f3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13f5:	11 01                	adc    DWORD PTR [ecx],eax
    13f7:	12 06                	adc    al,BYTE PTR [esi]
    13f9:	10 17                	adc    BYTE PTR [edi],dl
    13fb:	00 00                	add    BYTE PTR [eax],al
    13fd:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1400:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1402:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1405:	0e                   	push   cs
    1406:	00 00                	add    BYTE PTR [eax],al
    1408:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    140b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    140d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1410:	08 00                	or     BYTE PTR [eax],al
    1412:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1415:	00 03                	add    BYTE PTR [ebx],al
    1417:	0e                   	push   cs
    1418:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    141a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    141c:	49                   	dec    ecx
    141d:	13 00                	adc    eax,DWORD PTR [eax]
    141f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1425:	49                   	dec    ecx
    1426:	13 00                	adc    eax,DWORD PTR [eax]
    1428:	00 06                	add    BYTE PTR [esi],al
    142a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    142e:	00 00                	add    BYTE PTR [eax],al
    1430:	07                   	pop    es
    1431:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1434:	19 03                	sbb    DWORD PTR [ebx],eax
    1436:	0e                   	push   cs
    1437:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1439:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    143b:	27                   	daa    
    143c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    143f:	11 01                	adc    DWORD PTR [ecx],eax
    1441:	12 06                	adc    al,BYTE PTR [esi]
    1443:	40                   	inc    eax
    1444:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    144a:	00 00                	add    BYTE PTR [eax],al
    144c:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1452:	0b 3b                	or     edi,DWORD PTR [ebx]
    1454:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1457:	02 18                	add    bl,BYTE PTR [eax]
    1459:	00 00                	add    BYTE PTR [eax],al
    145b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    145e:	03 08                	add    ecx,DWORD PTR [eax]
    1460:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1462:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1464:	49                   	dec    ecx
    1465:	13 02                	adc    eax,DWORD PTR [edx]
    1467:	18 00                	sbb    BYTE PTR [eax],al
    1469:	00 0a                	add    BYTE PTR [edx],cl
    146b:	34 00                	xor    al,0x0
    146d:	03 0e                	add    ecx,DWORD PTR [esi]
    146f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1471:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1473:	49                   	dec    ecx
    1474:	13 00                	adc    eax,DWORD PTR [eax]
    1476:	00 0b                	add    BYTE PTR [ebx],cl
    1478:	34 00                	xor    al,0x0
    147a:	03 08                	add    ecx,DWORD PTR [eax]
    147c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    147e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1480:	49                   	dec    ecx
    1481:	13 00                	adc    eax,DWORD PTR [eax]
    1483:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1486:	00 03                	add    BYTE PTR [ebx],al
    1488:	0e                   	push   cs
    1489:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    148b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    148d:	49                   	dec    ecx
    148e:	13 3f                	adc    edi,DWORD PTR [edi]
    1490:	19 02                	sbb    DWORD PTR [edx],eax
    1492:	18 00                	sbb    BYTE PTR [eax],al
    1494:	00 00                	add    BYTE PTR [eax],al
    1496:	01 11                	add    DWORD PTR [ecx],edx
    1498:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    149e:	0e                   	push   cs
    149f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14a1:	11 01                	adc    DWORD PTR [ecx],eax
    14a3:	12 06                	adc    al,BYTE PTR [esi]
    14a5:	10 17                	adc    BYTE PTR [edi],dl
    14a7:	00 00                	add    BYTE PTR [eax],al
    14a9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14ac:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14ae:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14b1:	0e                   	push   cs
    14b2:	00 00                	add    BYTE PTR [eax],al
    14b4:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    14b7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14b9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14bc:	08 00                	or     BYTE PTR [eax],al
    14be:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    14c1:	00 03                	add    BYTE PTR [ebx],al
    14c3:	0e                   	push   cs
    14c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14c8:	49                   	dec    ecx
    14c9:	13 00                	adc    eax,DWORD PTR [eax]
    14cb:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    14d1:	49                   	dec    ecx
    14d2:	13 00                	adc    eax,DWORD PTR [eax]
    14d4:	00 06                	add    BYTE PTR [esi],al
    14d6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    14d9:	19 03                	sbb    DWORD PTR [ebx],eax
    14db:	0e                   	push   cs
    14dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14e0:	27                   	daa    
    14e1:	19 11                	sbb    DWORD PTR [ecx],edx
    14e3:	01 12                	add    DWORD PTR [edx],edx
    14e5:	06                   	push   es
    14e6:	40                   	inc    eax
    14e7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    14ed:	00 00                	add    BYTE PTR [eax],al
    14ef:	07                   	pop    es
    14f0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    14f5:	0b 3b                	or     edi,DWORD PTR [ebx]
    14f7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14fa:	02 18                	add    bl,BYTE PTR [eax]
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1501:	03 08                	add    ecx,DWORD PTR [eax]
    1503:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1505:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1507:	49                   	dec    ecx
    1508:	13 02                	adc    eax,DWORD PTR [edx]
    150a:	18 00                	sbb    BYTE PTR [eax],al
    150c:	00 09                	add    BYTE PTR [ecx],cl
    150e:	34 00                	xor    al,0x0
    1510:	03 0e                	add    ecx,DWORD PTR [esi]
    1512:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1514:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1516:	49                   	dec    ecx
    1517:	13 3f                	adc    edi,DWORD PTR [edi]
    1519:	19 02                	sbb    DWORD PTR [edx],eax
    151b:	18 00                	sbb    BYTE PTR [eax],al
    151d:	00 00                	add    BYTE PTR [eax],al
    151f:	01 11                	add    DWORD PTR [ecx],edx
    1521:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1527:	0e                   	push   cs
    1528:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    152a:	11 01                	adc    DWORD PTR [ecx],eax
    152c:	12 06                	adc    al,BYTE PTR [esi]
    152e:	10 17                	adc    BYTE PTR [edi],dl
    1530:	00 00                	add    BYTE PTR [eax],al
    1532:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1535:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1537:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    153a:	0e                   	push   cs
    153b:	00 00                	add    BYTE PTR [eax],al
    153d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1540:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1542:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1545:	08 00                	or     BYTE PTR [eax],al
    1547:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    154a:	00 03                	add    BYTE PTR [ebx],al
    154c:	0e                   	push   cs
    154d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    154f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1551:	49                   	dec    ecx
    1552:	13 00                	adc    eax,DWORD PTR [eax]
    1554:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    155a:	49                   	dec    ecx
    155b:	13 00                	adc    eax,DWORD PTR [eax]
    155d:	00 06                	add    BYTE PTR [esi],al
    155f:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1563:	00 00                	add    BYTE PTR [eax],al
    1565:	07                   	pop    es
    1566:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    1569:	0e                   	push   cs
    156a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    156c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    156e:	27                   	daa    
    156f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1572:	11 01                	adc    DWORD PTR [ecx],eax
    1574:	12 06                	adc    al,BYTE PTR [esi]
    1576:	40                   	inc    eax
    1577:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    157d:	00 00                	add    BYTE PTR [eax],al
    157f:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1585:	0b 3b                	or     edi,DWORD PTR [ebx]
    1587:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    158a:	02 18                	add    bl,BYTE PTR [eax]
    158c:	00 00                	add    BYTE PTR [eax],al
    158e:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    1594:	0b 3b                	or     edi,DWORD PTR [ebx]
    1596:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1599:	02 18                	add    bl,BYTE PTR [eax]
    159b:	00 00                	add    BYTE PTR [eax],al
    159d:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    15a0:	03 0e                	add    ecx,DWORD PTR [esi]
    15a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15a6:	49                   	dec    ecx
    15a7:	13 02                	adc    eax,DWORD PTR [edx]
    15a9:	18 00                	sbb    BYTE PTR [eax],al
    15ab:	00 0b                	add    BYTE PTR [ebx],cl
    15ad:	34 00                	xor    al,0x0
    15af:	03 08                	add    ecx,DWORD PTR [eax]
    15b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15b5:	49                   	dec    ecx
    15b6:	13 02                	adc    eax,DWORD PTR [edx]
    15b8:	18 00                	sbb    BYTE PTR [eax],al
    15ba:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
    15bd:	01 3f                	add    DWORD PTR [edi],edi
    15bf:	19 03                	sbb    DWORD PTR [ebx],eax
    15c1:	0e                   	push   cs
    15c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15c6:	27                   	daa    
    15c7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15ca:	11 01                	adc    DWORD PTR [ecx],eax
    15cc:	12 06                	adc    al,BYTE PTR [esi]
    15ce:	40                   	inc    eax
    15cf:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    15d5:	00 00                	add    BYTE PTR [eax],al
    15d7:	0d 34 00 03 0e       	or     eax,0xe030034
    15dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15e0:	49                   	dec    ecx
    15e1:	13 3f                	adc    edi,DWORD PTR [edi]
    15e3:	19 02                	sbb    DWORD PTR [edx],eax
    15e5:	18 00                	sbb    BYTE PTR [eax],al
    15e7:	00 00                	add    BYTE PTR [eax],al
    15e9:	01 11                	add    DWORD PTR [ecx],edx
    15eb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    15f1:	0e                   	push   cs
    15f2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    15f4:	11 01                	adc    DWORD PTR [ecx],eax
    15f6:	12 06                	adc    al,BYTE PTR [esi]
    15f8:	10 17                	adc    BYTE PTR [edi],dl
    15fa:	00 00                	add    BYTE PTR [eax],al
    15fc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    15ff:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1601:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1604:	0e                   	push   cs
    1605:	00 00                	add    BYTE PTR [eax],al
    1607:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    160a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    160c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    160f:	08 00                	or     BYTE PTR [eax],al
    1611:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1614:	00 03                	add    BYTE PTR [ebx],al
    1616:	0e                   	push   cs
    1617:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1619:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    161b:	49                   	dec    ecx
    161c:	13 00                	adc    eax,DWORD PTR [eax]
    161e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1624:	49                   	dec    ecx
    1625:	13 00                	adc    eax,DWORD PTR [eax]
    1627:	00 06                	add    BYTE PTR [esi],al
    1629:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    162d:	00 00                	add    BYTE PTR [eax],al
    162f:	07                   	pop    es
    1630:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1633:	19 03                	sbb    DWORD PTR [ebx],eax
    1635:	0e                   	push   cs
    1636:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1638:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    163a:	27                   	daa    
    163b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    163e:	11 01                	adc    DWORD PTR [ecx],eax
    1640:	12 06                	adc    al,BYTE PTR [esi]
    1642:	40                   	inc    eax
    1643:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1649:	00 00                	add    BYTE PTR [eax],al
    164b:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1651:	0b 3b                	or     edi,DWORD PTR [ebx]
    1653:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1656:	02 18                	add    bl,BYTE PTR [eax]
    1658:	00 00                	add    BYTE PTR [eax],al
    165a:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    165d:	03 08                	add    ecx,DWORD PTR [eax]
    165f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1663:	49                   	dec    ecx
    1664:	13 02                	adc    eax,DWORD PTR [edx]
    1666:	18 00                	sbb    BYTE PTR [eax],al
    1668:	00 0a                	add    BYTE PTR [edx],cl
    166a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    166d:	19 03                	sbb    DWORD PTR [ebx],eax
    166f:	0e                   	push   cs
    1670:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1672:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1674:	27                   	daa    
    1675:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1678:	11 01                	adc    DWORD PTR [ecx],eax
    167a:	12 06                	adc    al,BYTE PTR [esi]
    167c:	40                   	inc    eax
    167d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1683:	00 00                	add    BYTE PTR [eax],al
    1685:	0b 01                	or     eax,DWORD PTR [ecx]
    1687:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    168a:	01 13                	add    DWORD PTR [ebx],edx
    168c:	00 00                	add    BYTE PTR [eax],al
    168e:	0c 21                	or     al,0x21
    1690:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1693:	2f                   	das    
    1694:	0b 00                	or     eax,DWORD PTR [eax]
    1696:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    169c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    169e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16a0:	49                   	dec    ecx
    16a1:	13 02                	adc    eax,DWORD PTR [edx]
    16a3:	18 00                	sbb    BYTE PTR [eax],al
    16a5:	00 0e                	add    BYTE PTR [esi],cl
    16a7:	34 00                	xor    al,0x0
    16a9:	03 0e                	add    ecx,DWORD PTR [esi]
    16ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16af:	49                   	dec    ecx
    16b0:	13 3f                	adc    edi,DWORD PTR [edi]
    16b2:	19 02                	sbb    DWORD PTR [edx],eax
    16b4:	18 00                	sbb    BYTE PTR [eax],al
    16b6:	00 00                	add    BYTE PTR [eax],al
    16b8:	01 11                	add    DWORD PTR [ecx],edx
    16ba:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    16c0:	0e                   	push   cs
    16c1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16c3:	11 01                	adc    DWORD PTR [ecx],eax
    16c5:	12 06                	adc    al,BYTE PTR [esi]
    16c7:	10 17                	adc    BYTE PTR [edi],dl
    16c9:	00 00                	add    BYTE PTR [eax],al
    16cb:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16ce:	03 0e                	add    ecx,DWORD PTR [esi]
    16d0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16d2:	49                   	dec    ecx
    16d3:	13 3a                	adc    edi,DWORD PTR [edx]
    16d5:	0b 3b                	or     edi,DWORD PTR [ebx]
    16d7:	0b 01                	or     eax,DWORD PTR [ecx]
    16d9:	13 00                	adc    eax,DWORD PTR [eax]
    16db:	00 03                	add    BYTE PTR [ebx],al
    16dd:	28 00                	sub    BYTE PTR [eax],al
    16df:	03 0e                	add    ecx,DWORD PTR [esi]
    16e1:	1c 0b                	sbb    al,0xb
    16e3:	00 00                	add    BYTE PTR [eax],al
    16e5:	04 28                	add    al,0x28
    16e7:	00 03                	add    BYTE PTR [ebx],al
    16e9:	0e                   	push   cs
    16ea:	1c 05                	sbb    al,0x5
    16ec:	00 00                	add    BYTE PTR [eax],al
    16ee:	05 24 00 0b 0b       	add    eax,0xb0b0024
    16f3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16f6:	0e                   	push   cs
    16f7:	00 00                	add    BYTE PTR [eax],al
    16f9:	06                   	push   es
    16fa:	24 00                	and    al,0x0
    16fc:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16fe:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1701:	08 00                	or     BYTE PTR [eax],al
    1703:	00 07                	add    BYTE PTR [edi],al
    1705:	16                   	push   ss
    1706:	00 03                	add    BYTE PTR [ebx],al
    1708:	0e                   	push   cs
    1709:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    170b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    170d:	49                   	dec    ecx
    170e:	13 00                	adc    eax,DWORD PTR [eax]
    1710:	00 08                	add    BYTE PTR [eax],cl
    1712:	13 01                	adc    eax,DWORD PTR [ecx]
    1714:	03 08                	add    ecx,DWORD PTR [eax]
    1716:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1718:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    171a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    171c:	01 13                	add    DWORD PTR [ebx],edx
    171e:	00 00                	add    BYTE PTR [eax],al
    1720:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1726:	0b 3b                	or     edi,DWORD PTR [ebx]
    1728:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    172b:	38 0b                	cmp    BYTE PTR [ebx],cl
    172d:	00 00                	add    BYTE PTR [eax],al
    172f:	0a 0f                	or     cl,BYTE PTR [edi]
    1731:	00 0b                	add    BYTE PTR [ebx],cl
    1733:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1736:	00 00                	add    BYTE PTR [eax],al
    1738:	0b 26                	or     esp,DWORD PTR [esi]
    173a:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    173d:	00 00                	add    BYTE PTR [eax],al
    173f:	0c 2e                	or     al,0x2e
    1741:	01 3f                	add    DWORD PTR [edi],edi
    1743:	19 03                	sbb    DWORD PTR [ebx],eax
    1745:	0e                   	push   cs
    1746:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1748:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    174a:	49                   	dec    ecx
    174b:	13 11                	adc    edx,DWORD PTR [ecx]
    174d:	01 12                	add    DWORD PTR [edx],edx
    174f:	06                   	push   es
    1750:	40                   	inc    eax
    1751:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1757:	00 00                	add    BYTE PTR [eax],al
    1759:	0d 34 00 03 0e       	or     eax,0xe030034
    175e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1760:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1762:	49                   	dec    ecx
    1763:	13 02                	adc    eax,DWORD PTR [edx]
    1765:	18 00                	sbb    BYTE PTR [eax],al
    1767:	00 0e                	add    BYTE PTR [esi],cl
    1769:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    176c:	19 03                	sbb    DWORD PTR [ebx],eax
    176e:	0e                   	push   cs
    176f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1771:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1773:	27                   	daa    
    1774:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1777:	11 01                	adc    DWORD PTR [ecx],eax
    1779:	12 06                	adc    al,BYTE PTR [esi]
    177b:	40                   	inc    eax
    177c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1782:	00 00                	add    BYTE PTR [eax],al
    1784:	0f 05                	syscall 
    1786:	00 03                	add    BYTE PTR [ebx],al
    1788:	0e                   	push   cs
    1789:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    178b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    178d:	49                   	dec    ecx
    178e:	13 02                	adc    eax,DWORD PTR [edx]
    1790:	18 00                	sbb    BYTE PTR [eax],al
    1792:	00 10                	add    BYTE PTR [eax],dl
    1794:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1797:	19 03                	sbb    DWORD PTR [ebx],eax
    1799:	0e                   	push   cs
    179a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    179c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    179e:	27                   	daa    
    179f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    17a2:	11 01                	adc    DWORD PTR [ecx],eax
    17a4:	12 06                	adc    al,BYTE PTR [esi]
    17a6:	40                   	inc    eax
    17a7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    17ad:	00 00                	add    BYTE PTR [eax],al
    17af:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    17b2:	03 08                	add    ecx,DWORD PTR [eax]
    17b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17b8:	49                   	dec    ecx
    17b9:	13 02                	adc    eax,DWORD PTR [edx]
    17bb:	18 00                	sbb    BYTE PTR [eax],al
    17bd:	00 12                	add    BYTE PTR [edx],dl
    17bf:	34 00                	xor    al,0x0
    17c1:	03 0e                	add    ecx,DWORD PTR [esi]
    17c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17c7:	49                   	dec    ecx
    17c8:	13 3f                	adc    edi,DWORD PTR [edi]
    17ca:	19 02                	sbb    DWORD PTR [edx],eax
    17cc:	18 00                	sbb    BYTE PTR [eax],al
    17ce:	00 13                	add    BYTE PTR [ebx],dl
    17d0:	01 01                	add    DWORD PTR [ecx],eax
    17d2:	49                   	dec    ecx
    17d3:	13 01                	adc    eax,DWORD PTR [ecx]
    17d5:	13 00                	adc    eax,DWORD PTR [eax]
    17d7:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    17da:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    17dd:	2f                   	das    
    17de:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 9f 49 02 00 00    	add    BYTE PTR [edi+0x249],bl
	...
  80:	1c 00                	sbb    al,0x0
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	9f                   	lahf   
  94:	6e                   	outs   dx,BYTE PTR ds:[esi]
  95:	01 00                	add    DWORD PTR [eax],eax
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	2a 08                	sub    cl,BYTE PTR [eax]
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	70 05                	jo     b7 <sysEnter_Vector-0x12ff49>
  b2:	00 9f 6b 02 00 00    	add    BYTE PTR [edi+0x26b],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	e0 09                	loopne d1 <sysEnter_Vector-0x12ff2f>
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	dc 07                	fadd   QWORD PTR [edi]
  d2:	00 9f 46 01 00 00    	add    BYTE PTR [edi+0x146],bl
	...
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	87 0d 00 00 04 00    	xchg   DWORD PTR ds:0x40000,ecx
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	24 09                	and    al,0x9
  f2:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	4c                   	dec    esp
 107:	10 00                	adc    BYTE PTR [eax],al
 109:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	8c 0a                	mov    WORD PTR [edx],cs
 112:	00 9f e9 0b 00 00    	add    BYTE PTR [edi+0xbe9],bl
	...
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	92                   	xchg   edx,eax
 127:	1a 00                	sbb    al,BYTE PTR [eax]
 129:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	78 16                	js     148 <sysEnter_Vector-0x12feb8>
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	49                   	dec    ecx
 147:	1d 00 00 04 00       	sbb    eax,0x40000
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	ec                   	in     al,dx
 151:	16                   	push   ss
 152:	00 9f 16 04 00 00    	add    BYTE PTR [edi+0x416],bl
	...
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	58                   	pop    eax
 167:	21 00                	and    DWORD PTR [eax],eax
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	04 1b                	add    al,0x1b
 172:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
	...
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	88 23                	mov    BYTE PTR [ebx],ah
 188:	00 00                	add    BYTE PTR [eax],al
 18a:	04 00                	add    al,0x0
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	c0 1c 00 9f          	rcr    BYTE PTR [eax+eax*1],0x9f
 194:	e7 00                	out    0x0,eax
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	77 25                	ja     1cd <sysEnter_Vector-0x12fe33>
 1a8:	00 00                	add    BYTE PTR [eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	a8 1d                	test   al,0x1d
 1b2:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
	...
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	72 27                	jb     1ef <sysEnter_Vector-0x12fe11>
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	d4 1d                	aam    0x1d
 1d2:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	33 2b                	xor    ebp,DWORD PTR [ebx]
 1e8:	00 00                	add    BYTE PTR [eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	ec                   	in     al,dx
 1f1:	24 00                	and    al,0x0
 1f3:	9f                   	lahf   
 1f4:	84 00                	test   BYTE PTR [eax],al
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	8f                   	(bad)  
 207:	2f                   	das    
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	70 25                	jo     237 <sysEnter_Vector-0x12fdc9>
 212:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
	...
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	40                   	inc    eax
 227:	31 00                	xor    DWORD PTR [eax],eax
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	5c                   	pop    esp
 231:	26 00 9f 5e 00 00 00 	add    BYTE PTR es:[edi+0x5e],bl
	...
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	b0 32                	mov    al,0x32
 248:	00 00                	add    BYTE PTR [eax],al
 24a:	04 00                	add    al,0x0
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	bc 26 00 9f c7       	mov    esp,0xc79f0026
	...
 25d:	00 00                	add    BYTE PTR [eax],al
 25f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	7d 34                	jge    29c <sysEnter_Vector-0x12fd64>
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	84 27                	test   BYTE PTR [edi],ah
 272:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
	...
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	cd 35                	int    0x35
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	10 28                	adc    BYTE PTR [eax],ch
 292:	00 9f 62 00 00 00    	add    BYTE PTR [edi+0x62],bl
	...
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	9b                   	fwait
 2a7:	36 00 00             	add    BYTE PTR ss:[eax],al
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	74 28                	je     2da <sysEnter_Vector-0x12fd26>
 2b2:	00 9f ce 00 00 00    	add    BYTE PTR [edi+0xce],bl
	...
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	7d 37                	jge    2ff <sysEnter_Vector-0x12fd01>
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	44                   	inc    esp
 2d1:	29 00                	sub    DWORD PTR [eax],eax
 2d3:	9f                   	lahf   
 2d4:	80 00 00             	add    BYTE PTR [eax],0x0
	...
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	71 38                	jno    320 <sysEnter_Vector-0x12fce0>
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	c4 29                	les    ebp,FWORD PTR [ecx]
 2f2:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
	...
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	07                   	pop    es
 307:	3a 00                	cmp    al,BYTE PTR [eax]
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	44                   	inc    esp
 311:	2b 00                	sub    eax,DWORD PTR [eax]
 313:	9f                   	lahf   
 314:	1d 00 00 00 00       	sbb    eax,0x0
 319:	00 00                	add    BYTE PTR [eax],al
 31b:	00 00                	add    BYTE PTR [eax],al
 31d:	00 00                	add    BYTE PTR [eax],al
 31f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	77 3a                	ja     362 <sysEnter_Vector-0x12fc9e>
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	64 2b 00             	sub    eax,DWORD PTR fs:[eax]
 333:	9f                   	lahf   
 334:	9c                   	pushf  
 335:	01 00                	add    DWORD PTR [eax],eax
	...
 33f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	0b 3c 00             	or     edi,DWORD PTR [eax+eax*1]
 349:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	00 2d 00 9f b6 00    	add    BYTE PTR ds:0xb69f00,ch
	...
 35e:	00 00                	add    BYTE PTR [eax],al
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	71 3d                	jno    3a5 <sysEnter_Vector-0x12fc5b>
 368:	00 00                	add    BYTE PTR [eax],al
 36a:	04 00                	add    al,0x0
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	b8 2d 00 9f 69       	mov    eax,0x699f002d
 375:	01 00                	add    DWORD PTR [eax],eax
	...
 37f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	37                   	aaa    
 387:	3f                   	aas    
 388:	00 00                	add    BYTE PTR [eax],al
 38a:	04 00                	add    al,0x0
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	24 2f                	and    al,0x2f
 392:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	41                   	inc    ecx
 3a7:	41                   	inc    ecx
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	50                   	push   eax
 3b1:	30 00                	xor    BYTE PTR [eax],al
 3b3:	9f                   	lahf   
 3b4:	17                   	pop    ss
 3b5:	0d 00 00 00 00       	or     eax,0x0
 3ba:	00 00                	add    BYTE PTR [eax],al
 3bc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	9f                   	lahf   
      c1:	1a c9                	sbb    cl,cl
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	9f                   	lahf   
     196:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	9f                   	lahf   
     29c:	03 28                	add    ebp,DWORD PTR [eax]
     29e:	01 f6                	add    esi,esi
     2a0:	67 92                	addr16 xchg edx,eax
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	9f                   	lahf   
     357:	03 09                	add    ecx,DWORD PTR [ecx]
     359:	01 08                	add    DWORD PTR [eax],ecx
     35b:	16                   	push   ss
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	ce                   	into   
     3c8:	00 00                	add    BYTE PTR [eax],al
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 95 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],dl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     42f:	73 6f                	jae    4a0 <sysEnter_Vector-0x12fb60>
     431:	6c                   	ins    BYTE PTR es:[edi],dx
     432:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     436:	01 00                	add    DWORD PTR [eax],eax
     438:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43b:	6c                   	ins    BYTE PTR es:[edi],dx
     43c:	6c                   	ins    BYTE PTR es:[edi],dx
     43d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     43e:	63 2e                	arpl   WORD PTR [esi],bp
     440:	68 00 02 00 00       	push   0x200
     445:	6c                   	ins    BYTE PTR es:[edi],dx
     446:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     44d:	4f                   	dec    edi
     44e:	53                   	push   ebx
     44f:	2e                   	cs
     450:	68 00 02 00 00       	push   0x200
     455:	73 74                	jae    4cb <sysEnter_Vector-0x12fb35>
     457:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     45e:	63 
     45f:	2e                   	cs
     460:	68 00 03 00 00       	push   0x300
     465:	00 00                	add    BYTE PTR [eax],al
     467:	05 02 00 04 00       	add    eax,0x40002
     46c:	9f                   	lahf   
     46d:	03 0d 01 08 24 08    	add    ecx,DWORD PTR ds:0x8240801
     473:	59                   	pop    ecx
     474:	08 21                	or     BYTE PTR [ecx],ah
     476:	08 2f                	or     BYTE PTR [edi],ch
     478:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     47b:	21 08                	and    DWORD PTR [eax],ecx
     47d:	2f                   	das    
     47e:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     481:	59                   	pop    ecx
     482:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     488:	5a                   	pop    edx
     489:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     48c:	08 23                	or     BYTE PTR [ebx],ah
     48e:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     491:	5a                   	pop    edx
     492:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     495:	06                   	push   es
     496:	00 01                	add    BYTE PTR [ecx],al
     498:	01 06                	add    DWORD PTR [esi],eax
     49a:	01 00                	add    DWORD PTR [eax],eax
     49c:	00 02                	add    BYTE PTR [edx],al
     49e:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     4a4:	01 fb                	add    ebx,edi
     4a6:	0e                   	push   cs
     4a7:	0d 00 01 01 01       	or     eax,0x1010100
     4ac:	01 00                	add    DWORD PTR [eax],eax
     4ae:	00 00                	add    BYTE PTR [eax],al
     4b0:	01 00                	add    DWORD PTR [eax],eax
     4b2:	00 01                	add    BYTE PTR [ecx],al
     4b4:	73 72                	jae    528 <sysEnter_Vector-0x12fad8>
     4b6:	63 00                	arpl   WORD PTR [eax],ax
     4b8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4bf:	00 2f                	add    BYTE PTR [edi],ch
     4c1:	68 6f 6d 65 2f       	push   0x2f656d6f
     4c6:	79 6f                	jns    537 <sysEnter_Vector-0x12fac9>
     4c8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     4cf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     4d2:	73 73                	jae    547 <sysEnter_Vector-0x12fab9>
     4d4:	2f                   	das    
     4d5:	6c                   	ins    BYTE PTR es:[edi],dx
     4d6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     4dd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     4e3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     4e9:	78 2d                	js     518 <sysEnter_Vector-0x12fae8>
     4eb:	67 6e                	outs   dx,BYTE PTR ds:[si]
     4ed:	75 2f                	jne    51e <sysEnter_Vector-0x12fae2>
     4ef:	35 2e 33 2e 30       	xor    eax,0x302e332e
     4f4:	2f                   	das    
     4f5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4fc:	00 00                	add    BYTE PTR [eax],al
     4fe:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     500:	76 69                	jbe    56b <sysEnter_Vector-0x12fa95>
     502:	72 6f                	jb     573 <sysEnter_Vector-0x12fa8d>
     504:	6e                   	outs   dx,BYTE PTR ds:[esi]
     505:	6d                   	ins    DWORD PTR es:[edi],dx
     506:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     508:	74 2e                	je     538 <sysEnter_Vector-0x12fac8>
     50a:	63 00                	arpl   WORD PTR [eax],ax
     50c:	01 00                	add    DWORD PTR [eax],eax
     50e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     511:	6c                   	ins    BYTE PTR es:[edi],dx
     512:	6c                   	ins    BYTE PTR es:[edi],dx
     513:	6f                   	outs   dx,DWORD PTR ds:[esi]
     514:	63 2e                	arpl   WORD PTR [esi],bp
     516:	68 00 02 00 00       	push   0x200
     51b:	6c                   	ins    BYTE PTR es:[edi],dx
     51c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     523:	4f                   	dec    edi
     524:	53                   	push   ebx
     525:	2e                   	cs
     526:	68 00 02 00 00       	push   0x200
     52b:	73 74                	jae    5a1 <sysEnter_Vector-0x12fa5f>
     52d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     534:	63 
     535:	2e                   	cs
     536:	68 00 03 00 00       	push   0x300
     53b:	00 00                	add    BYTE PTR [eax],al
     53d:	05 02 70 05 00       	add    eax,0x57002
     542:	9f                   	lahf   
     543:	03 09                	add    ecx,DWORD PTR [ecx]
     545:	01 08                	add    DWORD PTR [eax],ecx
     547:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     54d:	39 13                	cmp    DWORD PTR [ebx],edx
     54f:	00 02                	add    BYTE PTR [edx],al
     551:	04 02                	add    al,0x2
     553:	7e 00                	jle    555 <sysEnter_Vector-0x12faab>
     555:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     558:	06                   	push   es
     559:	4a                   	dec    edx
     55a:	06                   	push   es
     55b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     55c:	59                   	pop    ecx
     55d:	5b                   	pop    ebx
     55e:	08 21                	or     BYTE PTR [ecx],ah
     560:	76 bb                	jbe    51d <sysEnter_Vector-0x12fae3>
     562:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     568:	14 08                	adc    al,0x8
     56a:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     571:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     574:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     577:	00 02                	add    BYTE PTR [edx],al
     579:	04 01                	add    al,0x1
     57b:	06                   	push   es
     57c:	4a                   	dec    edx
     57d:	06                   	push   es
     57e:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     581:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     586:	08 f3                	or     bl,dh
     588:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     58e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     591:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     594:	00 02                	add    BYTE PTR [edx],al
     596:	04 01                	add    al,0x1
     598:	06                   	push   es
     599:	4a                   	dec    edx
     59a:	06                   	push   es
     59b:	03 0b                	add    ecx,DWORD PTR [ebx]
     59d:	9e                   	sahf   
     59e:	02 05 00 01 01 01    	add    al,BYTE PTR ds:0x1010100
     5a4:	01 00                	add    DWORD PTR [eax],eax
     5a6:	00 02                	add    BYTE PTR [edx],al
     5a8:	00 cd                	add    ch,cl
     5aa:	00 00                	add    BYTE PTR [eax],al
     5ac:	00 01                	add    BYTE PTR [ecx],al
     5ae:	01 fb                	add    ebx,edi
     5b0:	0e                   	push   cs
     5b1:	0d 00 01 01 01       	or     eax,0x1010100
     5b6:	01 00                	add    DWORD PTR [eax],eax
     5b8:	00 00                	add    BYTE PTR [eax],al
     5ba:	01 00                	add    DWORD PTR [eax],eax
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	73 72                	jae    632 <sysEnter_Vector-0x12f9ce>
     5c0:	63 00                	arpl   WORD PTR [eax],ax
     5c2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     5c9:	00 2f                	add    BYTE PTR [edi],ch
     5cb:	68 6f 6d 65 2f       	push   0x2f656d6f
     5d0:	79 6f                	jns    641 <sysEnter_Vector-0x12f9bf>
     5d2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     5d9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     5dc:	73 73                	jae    651 <sysEnter_Vector-0x12f9af>
     5de:	2f                   	das    
     5df:	6c                   	ins    BYTE PTR es:[edi],dx
     5e0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     5e7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     5ed:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     5f3:	78 2d                	js     622 <sysEnter_Vector-0x12f9de>
     5f5:	67 6e                	outs   dx,BYTE PTR ds:[si]
     5f7:	75 2f                	jne    628 <sysEnter_Vector-0x12f9d8>
     5f9:	35 2e 33 2e 30       	xor    eax,0x302e332e
     5fe:	2f                   	das    
     5ff:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     606:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     609:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     60d:	65                   	gs
     60e:	2f                   	das    
     60f:	2e                   	cs
     610:	2e                   	cs
     611:	2f                   	das    
     612:	2e                   	cs
     613:	2e                   	cs
     614:	2f                   	das    
     615:	2e                   	cs
     616:	2e                   	cs
     617:	2f                   	das    
     618:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     61c:	6a 2f                	push   0x2f
     61e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     621:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     628:	6e                   	outs   dx,BYTE PTR ds:[esi]
     629:	65                   	gs
     62a:	6c                   	ins    BYTE PTR es:[edi],dx
     62b:	2f                   	das    
     62c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     633:	00 00                	add    BYTE PTR [eax],al
     635:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     63c:	01 00                	add    DWORD PTR [eax],eax
     63e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     641:	6c                   	ins    BYTE PTR es:[edi],dx
     642:	6c                   	ins    BYTE PTR es:[edi],dx
     643:	6f                   	outs   dx,DWORD PTR ds:[esi]
     644:	63 2e                	arpl   WORD PTR [esi],bp
     646:	68 00 02 00 00       	push   0x200
     64b:	6c                   	ins    BYTE PTR es:[edi],dx
     64c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     653:	4f                   	dec    edi
     654:	53                   	push   ebx
     655:	2e                   	cs
     656:	68 00 02 00 00       	push   0x200
     65b:	73 74                	jae    6d1 <sysEnter_Vector-0x12f92f>
     65d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     664:	63 
     665:	2e                   	cs
     666:	68 00 03 00 00       	push   0x300
     66b:	73 79                	jae    6e6 <sysEnter_Vector-0x12f91a>
     66d:	73 63                	jae    6d2 <sysEnter_Vector-0x12f92e>
     66f:	61                   	popa   
     670:	6c                   	ins    BYTE PTR es:[edi],dx
     671:	6c                   	ins    BYTE PTR es:[edi],dx
     672:	73 2e                	jae    6a2 <sysEnter_Vector-0x12f95e>
     674:	68 00 04 00 00       	push   0x400
     679:	00 00                	add    BYTE PTR [eax],al
     67b:	05 02 dc 07 00       	add    eax,0x7dc02
     680:	9f                   	lahf   
     681:	03 0a                	add    ecx,DWORD PTR [edx]
     683:	01 08                	add    DWORD PTR [eax],ecx
     685:	13 08                	adc    ecx,DWORD PTR [eax]
     687:	9f                   	lahf   
     688:	5b                   	pop    ebx
     689:	08 13                	or     BYTE PTR [ebx],dl
     68b:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     68e:	08 13                	or     BYTE PTR [ebx],dl
     690:	08 2f                	or     BYTE PTR [edi],ch
     692:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     698:	08 d7                	or     bh,dl
     69a:	77 f3                	ja     68f <sysEnter_Vector-0x12f971>
     69c:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     6a2:	75 02                	jne    6a6 <sysEnter_Vector-0x12f95a>
     6a4:	05 00 01 01 29       	add    eax,0x29010100
     6a9:	01 00                	add    DWORD PTR [eax],eax
     6ab:	00 02                	add    BYTE PTR [edx],al
     6ad:	00 d4                	add    ah,dl
     6af:	00 00                	add    BYTE PTR [eax],al
     6b1:	00 01                	add    BYTE PTR [ecx],al
     6b3:	01 fb                	add    ebx,edi
     6b5:	0e                   	push   cs
     6b6:	0d 00 01 01 01       	or     eax,0x1010100
     6bb:	01 00                	add    DWORD PTR [eax],eax
     6bd:	00 00                	add    BYTE PTR [eax],al
     6bf:	01 00                	add    DWORD PTR [eax],eax
     6c1:	00 01                	add    BYTE PTR [ecx],al
     6c3:	73 72                	jae    737 <sysEnter_Vector-0x12f8c9>
     6c5:	63 2f                	arpl   WORD PTR [edi],bp
     6c7:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     6ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6cf:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6d3:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     6d6:	68 6f 6d 65 2f       	push   0x2f656d6f
     6db:	79 6f                	jns    74c <sysEnter_Vector-0x12f8b4>
     6dd:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     6e4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     6e7:	73 73                	jae    75c <sysEnter_Vector-0x12f8a4>
     6e9:	2f                   	das    
     6ea:	6c                   	ins    BYTE PTR es:[edi],dx
     6eb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     6f2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     6f8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     6fe:	78 2d                	js     72d <sysEnter_Vector-0x12f8d3>
     700:	67 6e                	outs   dx,BYTE PTR ds:[si]
     702:	75 2f                	jne    733 <sysEnter_Vector-0x12f8cd>
     704:	35 2e 33 2e 30       	xor    eax,0x302e332e
     709:	2f                   	das    
     70a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     711:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     714:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     718:	65                   	gs
     719:	2f                   	das    
     71a:	2e                   	cs
     71b:	2e                   	cs
     71c:	2f                   	das    
     71d:	2e                   	cs
     71e:	2e                   	cs
     71f:	2f                   	das    
     720:	2e                   	cs
     721:	2e                   	cs
     722:	2f                   	das    
     723:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     727:	6a 2f                	push   0x2f
     729:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     72c:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     733:	6e                   	outs   dx,BYTE PTR ds:[esi]
     734:	65                   	gs
     735:	6c                   	ins    BYTE PTR es:[edi],dx
     736:	2f                   	das    
     737:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     73e:	00 00                	add    BYTE PTR [eax],al
     740:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     747:	00 01                	add    BYTE PTR [ecx],al
     749:	00 00                	add    BYTE PTR [eax],al
     74b:	6d                   	ins    DWORD PTR es:[edi],dx
     74c:	61                   	popa   
     74d:	6c                   	ins    BYTE PTR es:[edi],dx
     74e:	6c                   	ins    BYTE PTR es:[edi],dx
     74f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     750:	63 2e                	arpl   WORD PTR [esi],bp
     752:	68 00 02 00 00       	push   0x200
     757:	6c                   	ins    BYTE PTR es:[edi],dx
     758:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     75f:	4f                   	dec    edi
     760:	53                   	push   ebx
     761:	2e                   	cs
     762:	68 00 02 00 00       	push   0x200
     767:	73 74                	jae    7dd <sysEnter_Vector-0x12f823>
     769:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     770:	63 
     771:	2e                   	cs
     772:	68 00 03 00 00       	push   0x300
     777:	73 79                	jae    7f2 <sysEnter_Vector-0x12f80e>
     779:	73 63                	jae    7de <sysEnter_Vector-0x12f822>
     77b:	61                   	popa   
     77c:	6c                   	ins    BYTE PTR es:[edi],dx
     77d:	6c                   	ins    BYTE PTR es:[edi],dx
     77e:	73 2e                	jae    7ae <sysEnter_Vector-0x12f852>
     780:	68 00 04 00 00       	push   0x400
     785:	00 00                	add    BYTE PTR [eax],al
     787:	05 02 24 09 00       	add    eax,0x92402
     78c:	9f                   	lahf   
     78d:	03 0f                	add    ecx,DWORD PTR [edi]
     78f:	01 d7                	add    edi,edx
     791:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     797:	75 4b                	jne    7e4 <sysEnter_Vector-0x12f81c>
     799:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     79f:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     7a4:	6a 08                	push   0x8
     7a6:	14 75                	adc    al,0x75
     7a8:	84 68 00             	test   BYTE PTR [eax+0x0],ch
     7ab:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     7ae:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     7b1:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     7b7:	06                   	push   es
     7b8:	66 06                	pushw  es
     7ba:	68 ad 68 68 76       	push   0x766868ad
     7bf:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     7c2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     7c5:	06                   	push   es
     7c6:	ac                   	lods   al,BYTE PTR ds:[esi]
     7c7:	06                   	push   es
     7c8:	68 5b 00 02 04       	push   0x402005b
     7cd:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     7d3:	01 01                	add    DWORD PTR [ecx],eax
     7d5:	97                   	xchg   edi,eax
     7d6:	02 00                	add    al,BYTE PTR [eax]
     7d8:	00 02                	add    BYTE PTR [edx],al
     7da:	00 eb                	add    bl,ch
     7dc:	00 00                	add    BYTE PTR [eax],al
     7de:	00 01                	add    BYTE PTR [ecx],al
     7e0:	01 fb                	add    ebx,edi
     7e2:	0e                   	push   cs
     7e3:	0d 00 01 01 01       	or     eax,0x1010100
     7e8:	01 00                	add    DWORD PTR [eax],eax
     7ea:	00 00                	add    BYTE PTR [eax],al
     7ec:	01 00                	add    DWORD PTR [eax],eax
     7ee:	00 01                	add    BYTE PTR [ecx],al
     7f0:	73 72                	jae    864 <sysEnter_Vector-0x12f79c>
     7f2:	63 00                	arpl   WORD PTR [eax],ax
     7f4:	2f                   	das    
     7f5:	68 6f 6d 65 2f       	push   0x2f656d6f
     7fa:	79 6f                	jns    86b <sysEnter_Vector-0x12f795>
     7fc:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     803:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     806:	73 73                	jae    87b <sysEnter_Vector-0x12f785>
     808:	2f                   	das    
     809:	6c                   	ins    BYTE PTR es:[edi],dx
     80a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     811:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     817:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     81d:	78 2d                	js     84c <sysEnter_Vector-0x12f7b4>
     81f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     821:	75 2f                	jne    852 <sysEnter_Vector-0x12f7ae>
     823:	35 2e 33 2e 30       	xor    eax,0x302e332e
     828:	2f                   	das    
     829:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     830:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     833:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     837:	65                   	gs
     838:	2f                   	das    
     839:	2e                   	cs
     83a:	2e                   	cs
     83b:	2f                   	das    
     83c:	2e                   	cs
     83d:	2e                   	cs
     83e:	2f                   	das    
     83f:	2e                   	cs
     840:	2e                   	cs
     841:	2f                   	das    
     842:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     846:	6a 2f                	push   0x2f
     848:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     84b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     852:	6e                   	outs   dx,BYTE PTR ds:[esi]
     853:	65                   	gs
     854:	6c                   	ins    BYTE PTR es:[edi],dx
     855:	2f                   	das    
     856:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     85d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     860:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     864:	65 00 00             	add    BYTE PTR gs:[eax],al
     867:	6c                   	ins    BYTE PTR es:[edi],dx
     868:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     86f:	4f                   	dec    edi
     870:	53                   	push   ebx
     871:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     874:	01 00                	add    DWORD PTR [eax],eax
     876:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     879:	64                   	fs
     87a:	61                   	popa   
     87b:	72 67                	jb     8e4 <sysEnter_Vector-0x12f71c>
     87d:	2e                   	cs
     87e:	68 00 02 00 00       	push   0x200
     883:	73 74                	jae    8f9 <sysEnter_Vector-0x12f707>
     885:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     88c:	63 
     88d:	2e                   	cs
     88e:	68 00 02 00 00       	push   0x200
     893:	73 74                	jae    909 <sysEnter_Vector-0x12f6f7>
     895:	64                   	fs
     896:	64                   	fs
     897:	65                   	gs
     898:	66                   	data16
     899:	2e                   	cs
     89a:	68 00 02 00 00       	push   0x200
     89f:	73 79                	jae    91a <sysEnter_Vector-0x12f6e6>
     8a1:	73 63                	jae    906 <sysEnter_Vector-0x12f6fa>
     8a3:	61                   	popa   
     8a4:	6c                   	ins    BYTE PTR es:[edi],dx
     8a5:	6c                   	ins    BYTE PTR es:[edi],dx
     8a6:	73 2e                	jae    8d6 <sysEnter_Vector-0x12f72a>
     8a8:	68 00 03 00 00       	push   0x300
     8ad:	6d                   	ins    DWORD PTR es:[edi],dx
     8ae:	61                   	popa   
     8af:	6c                   	ins    BYTE PTR es:[edi],dx
     8b0:	6c                   	ins    BYTE PTR es:[edi],dx
     8b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8b2:	63 2e                	arpl   WORD PTR [esi],bp
     8b4:	68 00 04 00 00       	push   0x400
     8b9:	6c                   	ins    BYTE PTR es:[edi],dx
     8ba:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     8c1:	4f                   	dec    edi
     8c2:	53                   	push   ebx
     8c3:	2e                   	cs
     8c4:	68 00 04 00 00       	push   0x400
     8c9:	00 00                	add    BYTE PTR [eax],al
     8cb:	05 02 8c 0a 00       	add    eax,0xa8c02
     8d0:	9f                   	lahf   
     8d1:	03 11                	add    edx,DWORD PTR [ecx]
     8d3:	01 08                	add    DWORD PTR [eax],ecx
     8d5:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     8d8:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     8de:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     8e4:	75 08                	jne    8ee <sysEnter_Vector-0x12f712>
     8e6:	9f                   	lahf   
     8e7:	3d 77 08 21 75       	cmp    eax,0x75210877
     8ec:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     8f2:	75 08                	jne    8fc <sysEnter_Vector-0x12f704>
     8f4:	d7                   	xlat   BYTE PTR ds:[ebx]
     8f5:	3d 77 08 21 08       	cmp    eax,0x8210877
     8fa:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     8fe:	c9                   	leave  
     8ff:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     902:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     908:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     90b:	13 75 77             	adc    esi,DWORD PTR [ebp+0x77]
     90e:	08 22                	or     BYTE PTR [edx],ah
     910:	68 08 c9 08 83       	push   0x8308c908
     915:	59                   	pop    ecx
     916:	5b                   	pop    ebx
     917:	08 22                	or     BYTE PTR [edx],ah
     919:	68 08 c9 08 83       	push   0x8308c908
     91e:	5b                   	pop    ebx
     91f:	08 22                	or     BYTE PTR [edx],ah
     921:	68 08 c9 08 83       	push   0x8308c908
     926:	5b                   	pop    ebx
     927:	f4                   	hlt    
     928:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     92c:	31 f4                	xor    esp,esi
     92e:	68 08 91 5a 31       	push   0x315a9108
     933:	08 21                	or     BYTE PTR [ecx],ah
     935:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     939:	77 c9                	ja     904 <sysEnter_Vector-0x12f6fc>
     93b:	c9                   	leave  
     93c:	3f                   	aas    
     93d:	c9                   	leave  
     93e:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     944:	3d 31 f3 75 08       	cmp    eax,0x875f331
     949:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     94e:	08 21                	or     BYTE PTR [ecx],ah
     950:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     957:	67 02 22             	add    ah,BYTE PTR [bp+si]
     95a:	14 08                	adc    al,0x8
     95c:	ae                   	scas   al,BYTE PTR es:[edi]
     95d:	4c                   	dec    esp
     95e:	ca 08 4b             	retf   0x4b08
     961:	91                   	xchg   ecx,eax
     962:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     968:	67 02 2f             	add    ch,BYTE PTR [bx]
     96b:	14 00                	adc    al,0x0
     96d:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     970:	02 31                	add    dh,BYTE PTR [ecx]
     972:	13 00                	adc    eax,DWORD PTR [eax]
     974:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     977:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     97d:	bb 00 02 04 02       	mov    ebx,0x2040200
     982:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     985:	00 02                	add    BYTE PTR [edx],al
     987:	04 01                	add    al,0x1
     989:	06                   	push   es
     98a:	4a                   	dec    edx
     98b:	06                   	push   es
     98c:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     98f:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     995:	f3 75 08             	repz jne 9a0 <sysEnter_Vector-0x12f660>
     998:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     99d:	c9                   	leave  
     99e:	c9                   	leave  
     99f:	32 c9                	xor    cl,cl
     9a1:	f3 40                	repz inc eax
     9a3:	c9                   	leave  
     9a4:	08 13                	or     BYTE PTR [ebx],dl
     9a6:	32 f5                	xor    dh,ch
     9a8:	75 76                	jne    a20 <sysEnter_Vector-0x12f5e0>
     9aa:	ad                   	lods   eax,DWORD PTR ds:[esi]
     9ab:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     9b0:	67 75 91             	addr16 jne 944 <sysEnter_Vector-0x12f6bc>
     9b3:	5a                   	pop    edx
     9b4:	75 67                	jne    a1d <sysEnter_Vector-0x12f5e3>
     9b6:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     9b9:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     9bf:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     9c4:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     9c8:	3c 44                	cmp    al,0x44
     9ca:	00 02                	add    BYTE PTR [edx],al
     9cc:	04 02                	add    al,0x2
     9ce:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     9d1:	00 02                	add    BYTE PTR [edx],al
     9d3:	04 01                	add    al,0x1
     9d5:	06                   	push   es
     9d6:	4a                   	dec    edx
     9d7:	00 02                	add    BYTE PTR [edx],al
     9d9:	04 03                	add    al,0x3
     9db:	82                   	(bad)  
     9dc:	06                   	push   es
     9dd:	03 23                	add    esp,DWORD PTR [ebx]
     9df:	d6                   	(bad)  
     9e0:	00 02                	add    BYTE PTR [edx],al
     9e2:	04 01                	add    al,0x1
     9e4:	06                   	push   es
     9e5:	66 06                	pushw  es
     9e7:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     9ea:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     9ef:	31 08                	xor    DWORD PTR [eax],ecx
     9f1:	5b                   	pop    ebx
     9f2:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     9f8:	08 23                	or     BYTE PTR [ebx],ah
     9fa:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     a00:	04 01                	add    al,0x1
     a02:	06                   	push   es
     a03:	66 06                	pushw  es
     a05:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     a08:	f3 c9                	repz leave 
     a0a:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     a0e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     a11:	06                   	push   es
     a12:	66 06                	pushw  es
     a14:	9f                   	lahf   
     a15:	4c                   	dec    esp
     a16:	00 02                	add    BYTE PTR [edx],al
     a18:	04 01                	add    al,0x1
     a1a:	06                   	push   es
     a1b:	66 06                	pushw  es
     a1d:	d8 02                	fadd   DWORD PTR [edx]
     a1f:	27                   	daa    
     a20:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     a26:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     a2c:	06                   	push   es
     a2d:	9e                   	sahf   
     a2e:	06                   	push   es
     a2f:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     a32:	f3 c9                	repz leave 
     a34:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     a37:	79 02                	jns    a3b <sysEnter_Vector-0x12f5c5>
     a39:	34 01                	xor    al,0x1
     a3b:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     a3e:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     a41:	02 2f                	add    ch,BYTE PTR [edi]
     a43:	14 02                	adc    al,0x2
     a45:	31 13                	xor    DWORD PTR [ebx],edx
     a47:	00 02                	add    BYTE PTR [edx],al
     a49:	04 02                	add    al,0x2
     a4b:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     a52:	00 02                	add    BYTE PTR [edx],al
     a54:	04 02                	add    al,0x2
     a56:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     a59:	00 02                	add    BYTE PTR [edx],al
     a5b:	04 01                	add    al,0x1
     a5d:	06                   	push   es
     a5e:	4a                   	dec    edx
     a5f:	06                   	push   es
     a60:	03 1b                	add    ebx,DWORD PTR [ebx]
     a62:	d6                   	(bad)  
     a63:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     a68:	31 c9                	xor    ecx,ecx
     a6a:	9f                   	lahf   
     a6b:	02 02                	add    al,BYTE PTR [edx]
     a6d:	00 01                	add    BYTE PTR [ecx],al
     a6f:	01 07                	add    DWORD PTR [edi],eax
     a71:	01 00                	add    DWORD PTR [eax],eax
     a73:	00 02                	add    BYTE PTR [edx],al
     a75:	00 e8                	add    al,ch
     a77:	00 00                	add    BYTE PTR [eax],al
     a79:	00 01                	add    BYTE PTR [ecx],al
     a7b:	01 fb                	add    ebx,edi
     a7d:	0e                   	push   cs
     a7e:	0d 00 01 01 01       	or     eax,0x1010100
     a83:	01 00                	add    DWORD PTR [eax],eax
     a85:	00 00                	add    BYTE PTR [eax],al
     a87:	01 00                	add    DWORD PTR [eax],eax
     a89:	00 01                	add    BYTE PTR [ecx],al
     a8b:	73 72                	jae    aff <sysEnter_Vector-0x12f501>
     a8d:	63 00                	arpl   WORD PTR [eax],ax
     a8f:	2f                   	das    
     a90:	68 6f 6d 65 2f       	push   0x2f656d6f
     a95:	79 6f                	jns    b06 <sysEnter_Vector-0x12f4fa>
     a97:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a9e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     aa1:	73 73                	jae    b16 <sysEnter_Vector-0x12f4ea>
     aa3:	2f                   	das    
     aa4:	6c                   	ins    BYTE PTR es:[edi],dx
     aa5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     aac:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ab2:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ab8:	78 2d                	js     ae7 <sysEnter_Vector-0x12f519>
     aba:	67 6e                	outs   dx,BYTE PTR ds:[si]
     abc:	75 2f                	jne    aed <sysEnter_Vector-0x12f513>
     abe:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ac3:	2f                   	das    
     ac4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     acb:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ace:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ad2:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     ad6:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ada:	65                   	gs
     adb:	2f                   	das    
     adc:	2e                   	cs
     add:	2e                   	cs
     ade:	2f                   	das    
     adf:	2e                   	cs
     ae0:	2e                   	cs
     ae1:	2f                   	das    
     ae2:	2e                   	cs
     ae3:	2e                   	cs
     ae4:	2f                   	das    
     ae5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     ae9:	6a 2f                	push   0x2f
     aeb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     aee:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     af5:	6e                   	outs   dx,BYTE PTR ds:[esi]
     af6:	65                   	gs
     af7:	6c                   	ins    BYTE PTR es:[edi],dx
     af8:	2f                   	das    
     af9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b00:	00 00                	add    BYTE PTR [eax],al
     b02:	6c                   	ins    BYTE PTR es:[edi],dx
     b03:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     b0a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     b0d:	01 00                	add    DWORD PTR [eax],eax
     b0f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b12:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b19:	63 
     b1a:	2e                   	cs
     b1b:	68 00 02 00 00       	push   0x200
     b20:	73 74                	jae    b96 <sysEnter_Vector-0x12f46a>
     b22:	64                   	fs
     b23:	64                   	fs
     b24:	65                   	gs
     b25:	66                   	data16
     b26:	2e                   	cs
     b27:	68 00 02 00 00       	push   0x200
     b2c:	74 79                	je     ba7 <sysEnter_Vector-0x12f459>
     b2e:	70 65                	jo     b95 <sysEnter_Vector-0x12f46b>
     b30:	73 2e                	jae    b60 <sysEnter_Vector-0x12f4a0>
     b32:	68 00 03 00 00       	push   0x300
     b37:	73 79                	jae    bb2 <sysEnter_Vector-0x12f44e>
     b39:	73 63                	jae    b9e <sysEnter_Vector-0x12f462>
     b3b:	61                   	popa   
     b3c:	6c                   	ins    BYTE PTR es:[edi],dx
     b3d:	6c                   	ins    BYTE PTR es:[edi],dx
     b3e:	73 2e                	jae    b6e <sysEnter_Vector-0x12f492>
     b40:	68 00 04 00 00       	push   0x400
     b45:	6d                   	ins    DWORD PTR es:[edi],dx
     b46:	61                   	popa   
     b47:	6c                   	ins    BYTE PTR es:[edi],dx
     b48:	6c                   	ins    BYTE PTR es:[edi],dx
     b49:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b4a:	63 2e                	arpl   WORD PTR [esi],bp
     b4c:	68 00 03 00 00       	push   0x300
     b51:	6c                   	ins    BYTE PTR es:[edi],dx
     b52:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b59:	4f                   	dec    edi
     b5a:	53                   	push   ebx
     b5b:	2e                   	cs
     b5c:	68 00 03 00 00       	push   0x300
     b61:	00 00                	add    BYTE PTR [eax],al
     b63:	05 02 78 16 00       	add    eax,0x167802
     b68:	9f                   	lahf   
     b69:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     b6f:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     b74:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     b77:	05 00 01 01 5b       	add    eax,0x5b010100
     b7c:	01 00                	add    DWORD PTR [eax],eax
     b7e:	00 02                	add    BYTE PTR [edx],al
     b80:	00 db                	add    bl,bl
     b82:	00 00                	add    BYTE PTR [eax],al
     b84:	00 01                	add    BYTE PTR [ecx],al
     b86:	01 fb                	add    ebx,edi
     b88:	0e                   	push   cs
     b89:	0d 00 01 01 01       	or     eax,0x1010100
     b8e:	01 00                	add    DWORD PTR [eax],eax
     b90:	00 00                	add    BYTE PTR [eax],al
     b92:	01 00                	add    DWORD PTR [eax],eax
     b94:	00 01                	add    BYTE PTR [ecx],al
     b96:	73 72                	jae    c0a <sysEnter_Vector-0x12f3f6>
     b98:	63 00                	arpl   WORD PTR [eax],ax
     b9a:	2f                   	das    
     b9b:	68 6f 6d 65 2f       	push   0x2f656d6f
     ba0:	79 6f                	jns    c11 <sysEnter_Vector-0x12f3ef>
     ba2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ba9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     bac:	73 73                	jae    c21 <sysEnter_Vector-0x12f3df>
     bae:	2f                   	das    
     baf:	6c                   	ins    BYTE PTR es:[edi],dx
     bb0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bb7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bbd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     bc3:	78 2d                	js     bf2 <sysEnter_Vector-0x12f40e>
     bc5:	67 6e                	outs   dx,BYTE PTR ds:[si]
     bc7:	75 2f                	jne    bf8 <sysEnter_Vector-0x12f408>
     bc9:	35 2e 33 2e 30       	xor    eax,0x302e332e
     bce:	2f                   	das    
     bcf:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     bd6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     bd9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     bdd:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     be1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     be5:	65                   	gs
     be6:	2f                   	das    
     be7:	2e                   	cs
     be8:	2e                   	cs
     be9:	2f                   	das    
     bea:	2e                   	cs
     beb:	2e                   	cs
     bec:	2f                   	das    
     bed:	2e                   	cs
     bee:	2e                   	cs
     bef:	2f                   	das    
     bf0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     bf4:	6a 2f                	push   0x2f
     bf6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     bf9:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     c00:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c01:	65                   	gs
     c02:	6c                   	ins    BYTE PTR es:[edi],dx
     c03:	2f                   	das    
     c04:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c0b:	00 00                	add    BYTE PTR [eax],al
     c0d:	6d                   	ins    DWORD PTR es:[edi],dx
     c0e:	61                   	popa   
     c0f:	6c                   	ins    BYTE PTR es:[edi],dx
     c10:	6c                   	ins    BYTE PTR es:[edi],dx
     c11:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c12:	63 2e                	arpl   WORD PTR [esi],bp
     c14:	63 00                	arpl   WORD PTR [eax],ax
     c16:	01 00                	add    DWORD PTR [eax],eax
     c18:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c1b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c22:	63 
     c23:	2e                   	cs
     c24:	68 00 02 00 00       	push   0x200
     c29:	73 74                	jae    c9f <sysEnter_Vector-0x12f361>
     c2b:	64                   	fs
     c2c:	64                   	fs
     c2d:	65                   	gs
     c2e:	66                   	data16
     c2f:	2e                   	cs
     c30:	68 00 02 00 00       	push   0x200
     c35:	6d                   	ins    DWORD PTR es:[edi],dx
     c36:	61                   	popa   
     c37:	6c                   	ins    BYTE PTR es:[edi],dx
     c38:	6c                   	ins    BYTE PTR es:[edi],dx
     c39:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c3a:	63 2e                	arpl   WORD PTR [esi],bp
     c3c:	68 00 03 00 00       	push   0x300
     c41:	6c                   	ins    BYTE PTR es:[edi],dx
     c42:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c49:	4f                   	dec    edi
     c4a:	53                   	push   ebx
     c4b:	2e                   	cs
     c4c:	68 00 03 00 00       	push   0x300
     c51:	73 79                	jae    ccc <sysEnter_Vector-0x12f334>
     c53:	73 63                	jae    cb8 <sysEnter_Vector-0x12f348>
     c55:	61                   	popa   
     c56:	6c                   	ins    BYTE PTR es:[edi],dx
     c57:	6c                   	ins    BYTE PTR es:[edi],dx
     c58:	73 2e                	jae    c88 <sysEnter_Vector-0x12f378>
     c5a:	68 00 04 00 00       	push   0x400
     c5f:	00 00                	add    BYTE PTR [eax],al
     c61:	05 02 ec 16 00       	add    eax,0x16ec02
     c66:	9f                   	lahf   
     c67:	03 0d 01 08 21 02    	add    ecx,DWORD PTR ds:0x2210801
     c6d:	24 13                	and    al,0x13
     c6f:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     c74:	f5                   	cmc    
     c75:	92                   	xchg   edx,eax
     c76:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     c7c:	04 01                	add    al,0x1
     c7e:	06                   	push   es
     c7f:	66 06                	pushw  es
     c81:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     c86:	59                   	pop    ecx
     c87:	31 f5                	xor    ebp,esi
     c89:	68 93 bf 03 77       	push   0x7703bf93
     c8e:	90                   	nop
     c8f:	43                   	inc    ebx
     c90:	23 31                	and    esi,DWORD PTR [ecx]
     c92:	08 27                	or     BYTE PTR [edi],ah
     c94:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     c9a:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     c9f:	f3 02 26             	repz add ah,BYTE PTR [esi]
     ca2:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     ca9:	e5 ad                	in     eax,0xad
     cab:	91                   	xchg   ecx,eax
     cac:	91                   	xchg   ecx,eax
     cad:	75 08                	jne    cb7 <sysEnter_Vector-0x12f349>
     caf:	d7                   	xlat   BYTE PTR ds:[ebx]
     cb0:	d7                   	xlat   BYTE PTR ds:[ebx]
     cb1:	08 13                	or     BYTE PTR [ebx],dl
     cb3:	91                   	xchg   ecx,eax
     cb4:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     cb7:	91                   	xchg   ecx,eax
     cb8:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     cbd:	08 23                	or     BYTE PTR [ebx],ah
     cbf:	08 16                	or     BYTE PTR [esi],dl
     cc1:	93                   	xchg   ebx,eax
     cc2:	02 23                	add    ah,BYTE PTR [ebx]
     cc4:	13 08                	adc    ecx,DWORD PTR [eax]
     cc6:	e7 d7                	out    0xd7,eax
     cc8:	3d 5b f3 08 13       	cmp    eax,0x1308f35b
     ccd:	31 c9                	xor    ecx,ecx
     ccf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     cd0:	3f                   	aas    
     cd1:	08 13                	or     BYTE PTR [ebx],dl
     cd3:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     cd9:	01 e7                	add    edi,esp
     cdb:	00 00                	add    BYTE PTR [eax],al
     cdd:	00 02                	add    BYTE PTR [edx],al
     cdf:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     ce5:	01 fb                	add    ebx,edi
     ce7:	0e                   	push   cs
     ce8:	0d 00 01 01 01       	or     eax,0x1010100
     ced:	01 00                	add    DWORD PTR [eax],eax
     cef:	00 00                	add    BYTE PTR [eax],al
     cf1:	01 00                	add    DWORD PTR [eax],eax
     cf3:	00 01                	add    BYTE PTR [ecx],al
     cf5:	73 72                	jae    d69 <sysEnter_Vector-0x12f297>
     cf7:	63 00                	arpl   WORD PTR [eax],ax
     cf9:	2f                   	das    
     cfa:	68 6f 6d 65 2f       	push   0x2f656d6f
     cff:	79 6f                	jns    d70 <sysEnter_Vector-0x12f290>
     d01:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d08:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d0b:	73 73                	jae    d80 <sysEnter_Vector-0x12f280>
     d0d:	2f                   	das    
     d0e:	6c                   	ins    BYTE PTR es:[edi],dx
     d0f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d16:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d1c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d22:	78 2d                	js     d51 <sysEnter_Vector-0x12f2af>
     d24:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d26:	75 2f                	jne    d57 <sysEnter_Vector-0x12f2a9>
     d28:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d2d:	2f                   	das    
     d2e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d35:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d38:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d3c:	65 00 00             	add    BYTE PTR gs:[eax],al
     d3f:	6d                   	ins    DWORD PTR es:[edi],dx
     d40:	65                   	gs
     d41:	6d                   	ins    DWORD PTR es:[edi],dx
     d42:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     d45:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d48:	01 00                	add    DWORD PTR [eax],eax
     d4a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d4d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d54:	63 
     d55:	2e                   	cs
     d56:	68 00 02 00 00       	push   0x200
     d5b:	73 74                	jae    dd1 <sysEnter_Vector-0x12f22f>
     d5d:	64                   	fs
     d5e:	64                   	fs
     d5f:	65                   	gs
     d60:	66                   	data16
     d61:	2e                   	cs
     d62:	68 00 02 00 00       	push   0x200
     d67:	6d                   	ins    DWORD PTR es:[edi],dx
     d68:	61                   	popa   
     d69:	6c                   	ins    BYTE PTR es:[edi],dx
     d6a:	6c                   	ins    BYTE PTR es:[edi],dx
     d6b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d6c:	63 2e                	arpl   WORD PTR [esi],bp
     d6e:	68 00 03 00 00       	push   0x300
     d73:	6c                   	ins    BYTE PTR es:[edi],dx
     d74:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d7b:	4f                   	dec    edi
     d7c:	53                   	push   ebx
     d7d:	2e                   	cs
     d7e:	68 00 03 00 00       	push   0x300
     d83:	00 00                	add    BYTE PTR [eax],al
     d85:	05 02 04 1b 00       	add    eax,0x1b0402
     d8a:	9f                   	lahf   
     d8b:	03 0b                	add    ecx,DWORD PTR [ebx]
     d8d:	01 f5                	add    ebp,esi
     d8f:	d7                   	xlat   BYTE PTR ds:[ebx]
     d90:	d7                   	xlat   BYTE PTR ds:[ebx]
     d91:	68 91 67 68 83       	push   0x83686791
     d96:	91                   	xchg   ecx,eax
     d97:	91                   	xchg   ecx,eax
     d98:	2f                   	das    
     d99:	08 1f                	or     BYTE PTR [edi],bl
     d9b:	e8 08 57 ca 84       	call   84ca64a8 <sysEnter_Vector+0x84b764a8>
     da0:	68 83 67 68 83       	push   0x83686783
     da5:	91                   	xchg   ecx,eax
     da6:	91                   	xchg   ecx,eax
     da7:	2f                   	das    
     da8:	08 1f                	or     BYTE PTR [edi],bl
     daa:	e8 08 57 ca 5c       	call   5cca64b7 <sysEnter_Vector+0x5cb764b7>
     daf:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     db5:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     dbb:	3e                   	ds
     dbc:	31 c9                	xor    ecx,ecx
     dbe:	08 13                	or     BYTE PTR [ebx],dl
     dc0:	02 02                	add    al,BYTE PTR [edx]
     dc2:	00 01                	add    BYTE PTR [ecx],al
     dc4:	01 ca                	add    edx,ecx
     dc6:	00 00                	add    BYTE PTR [eax],al
     dc8:	00 02                	add    BYTE PTR [edx],al
     dca:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     dd0:	01 fb                	add    ebx,edi
     dd2:	0e                   	push   cs
     dd3:	0d 00 01 01 01       	or     eax,0x1010100
     dd8:	01 00                	add    DWORD PTR [eax],eax
     dda:	00 00                	add    BYTE PTR [eax],al
     ddc:	01 00                	add    DWORD PTR [eax],eax
     dde:	00 01                	add    BYTE PTR [ecx],al
     de0:	73 72                	jae    e54 <sysEnter_Vector-0x12f1ac>
     de2:	63 00                	arpl   WORD PTR [eax],ax
     de4:	2f                   	das    
     de5:	68 6f 6d 65 2f       	push   0x2f656d6f
     dea:	79 6f                	jns    e5b <sysEnter_Vector-0x12f1a5>
     dec:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     df3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     df6:	73 73                	jae    e6b <sysEnter_Vector-0x12f195>
     df8:	2f                   	das    
     df9:	6c                   	ins    BYTE PTR es:[edi],dx
     dfa:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e01:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e07:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e0d:	78 2d                	js     e3c <sysEnter_Vector-0x12f1c4>
     e0f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e11:	75 2f                	jne    e42 <sysEnter_Vector-0x12f1be>
     e13:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e18:	2f                   	das    
     e19:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e20:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e23:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e27:	65 00 00             	add    BYTE PTR gs:[eax],al
     e2a:	6d                   	ins    DWORD PTR es:[edi],dx
     e2b:	65                   	gs
     e2c:	6d                   	ins    DWORD PTR es:[edi],dx
     e2d:	73 65                	jae    e94 <sysEnter_Vector-0x12f16c>
     e2f:	74 2e                	je     e5f <sysEnter_Vector-0x12f1a1>
     e31:	63 00                	arpl   WORD PTR [eax],ax
     e33:	01 00                	add    DWORD PTR [eax],eax
     e35:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e38:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e3f:	63 
     e40:	2e                   	cs
     e41:	68 00 02 00 00       	push   0x200
     e46:	73 74                	jae    ebc <sysEnter_Vector-0x12f144>
     e48:	64                   	fs
     e49:	64                   	fs
     e4a:	65                   	gs
     e4b:	66                   	data16
     e4c:	2e                   	cs
     e4d:	68 00 02 00 00       	push   0x200
     e52:	6d                   	ins    DWORD PTR es:[edi],dx
     e53:	61                   	popa   
     e54:	6c                   	ins    BYTE PTR es:[edi],dx
     e55:	6c                   	ins    BYTE PTR es:[edi],dx
     e56:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e57:	63 2e                	arpl   WORD PTR [esi],bp
     e59:	68 00 03 00 00       	push   0x300
     e5e:	6c                   	ins    BYTE PTR es:[edi],dx
     e5f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e66:	4f                   	dec    edi
     e67:	53                   	push   ebx
     e68:	2e                   	cs
     e69:	68 00 03 00 00       	push   0x300
     e6e:	00 00                	add    BYTE PTR [eax],al
     e70:	05 02 c0 1c 00       	add    eax,0x1cc002
     e75:	9f                   	lahf   
     e76:	1a f3                	sbb    dh,bl
     e78:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     e7e:	ca 9f 2f             	retf   0x2f9f
     e81:	d5 bd                	aad    0xbd
     e83:	9f                   	lahf   
     e84:	2f                   	das    
     e85:	f1                   	icebp  
     e86:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     e8b:	c9                   	leave  
     e8c:	08 13                	or     BYTE PTR [ebx],dl
     e8e:	02 02                	add    al,BYTE PTR [edx]
     e90:	00 01                	add    BYTE PTR [ecx],al
     e92:	01 e6                	add    esi,esp
     e94:	00 00                	add    BYTE PTR [eax],al
     e96:	00 02                	add    BYTE PTR [edx],al
     e98:	00 cd                	add    ch,cl
     e9a:	00 00                	add    BYTE PTR [eax],al
     e9c:	00 01                	add    BYTE PTR [ecx],al
     e9e:	01 fb                	add    ebx,edi
     ea0:	0e                   	push   cs
     ea1:	0d 00 01 01 01       	or     eax,0x1010100
     ea6:	01 00                	add    DWORD PTR [eax],eax
     ea8:	00 00                	add    BYTE PTR [eax],al
     eaa:	01 00                	add    DWORD PTR [eax],eax
     eac:	00 01                	add    BYTE PTR [ecx],al
     eae:	73 72                	jae    f22 <sysEnter_Vector-0x12f0de>
     eb0:	63 00                	arpl   WORD PTR [eax],ax
     eb2:	2f                   	das    
     eb3:	68 6f 6d 65 2f       	push   0x2f656d6f
     eb8:	79 6f                	jns    f29 <sysEnter_Vector-0x12f0d7>
     eba:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ec1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ec4:	73 73                	jae    f39 <sysEnter_Vector-0x12f0c7>
     ec6:	2f                   	das    
     ec7:	6c                   	ins    BYTE PTR es:[edi],dx
     ec8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ecf:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ed5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     edb:	78 2d                	js     f0a <sysEnter_Vector-0x12f0f6>
     edd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     edf:	75 2f                	jne    f10 <sysEnter_Vector-0x12f0f0>
     ee1:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ee6:	2f                   	das    
     ee7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     eee:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ef1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ef5:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     ef9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     efd:	65                   	gs
     efe:	2f                   	das    
     eff:	2e                   	cs
     f00:	2e                   	cs
     f01:	2f                   	das    
     f02:	2e                   	cs
     f03:	2e                   	cs
     f04:	2f                   	das    
     f05:	2e                   	cs
     f06:	2e                   	cs
     f07:	2f                   	das    
     f08:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     f0c:	6a 2f                	push   0x2f
     f0e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     f11:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     f18:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f19:	65                   	gs
     f1a:	6c                   	ins    BYTE PTR es:[edi],dx
     f1b:	2f                   	das    
     f1c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f23:	00 00                	add    BYTE PTR [eax],al
     f25:	70 69                	jo     f90 <sysEnter_Vector-0x12f070>
     f27:	70 65                	jo     f8e <sysEnter_Vector-0x12f072>
     f29:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f2c:	01 00                	add    DWORD PTR [eax],eax
     f2e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f31:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f38:	63 
     f39:	2e                   	cs
     f3a:	68 00 02 00 00       	push   0x200
     f3f:	6d                   	ins    DWORD PTR es:[edi],dx
     f40:	61                   	popa   
     f41:	6c                   	ins    BYTE PTR es:[edi],dx
     f42:	6c                   	ins    BYTE PTR es:[edi],dx
     f43:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f44:	63 2e                	arpl   WORD PTR [esi],bp
     f46:	68 00 03 00 00       	push   0x300
     f4b:	6c                   	ins    BYTE PTR es:[edi],dx
     f4c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     f53:	4f                   	dec    edi
     f54:	53                   	push   ebx
     f55:	2e                   	cs
     f56:	68 00 03 00 00       	push   0x300
     f5b:	73 79                	jae    fd6 <sysEnter_Vector-0x12f02a>
     f5d:	73 63                	jae    fc2 <sysEnter_Vector-0x12f03e>
     f5f:	61                   	popa   
     f60:	6c                   	ins    BYTE PTR es:[edi],dx
     f61:	6c                   	ins    BYTE PTR es:[edi],dx
     f62:	73 2e                	jae    f92 <sysEnter_Vector-0x12f06e>
     f64:	68 00 04 00 00       	push   0x400
     f69:	00 00                	add    BYTE PTR [eax],al
     f6b:	05 02 a8 1d 00       	add    eax,0x1da802
     f70:	9f                   	lahf   
     f71:	03 0a                	add    ecx,DWORD PTR [edx]
     f73:	01 08                	add    DWORD PTR [eax],ecx
     f75:	13 08                	adc    ecx,DWORD PTR [eax]
     f77:	2f                   	das    
     f78:	02 05 00 01 01 de    	add    al,BYTE PTR ds:0xde010100
     f7e:	01 00                	add    DWORD PTR [eax],eax
     f80:	00 02                	add    BYTE PTR [edx],al
     f82:	00 a1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ah
     f88:	01 fb                	add    ebx,edi
     f8a:	0e                   	push   cs
     f8b:	0d 00 01 01 01       	or     eax,0x1010100
     f90:	01 00                	add    DWORD PTR [eax],eax
     f92:	00 00                	add    BYTE PTR [eax],al
     f94:	01 00                	add    DWORD PTR [eax],eax
     f96:	00 01                	add    BYTE PTR [ecx],al
     f98:	73 72                	jae    100c <sysEnter_Vector-0x12eff4>
     f9a:	63 00                	arpl   WORD PTR [eax],ax
     f9c:	2f                   	das    
     f9d:	68 6f 6d 65 2f       	push   0x2f656d6f
     fa2:	79 6f                	jns    1013 <sysEnter_Vector-0x12efed>
     fa4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fab:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     fae:	73 73                	jae    1023 <sysEnter_Vector-0x12efdd>
     fb0:	2f                   	das    
     fb1:	6c                   	ins    BYTE PTR es:[edi],dx
     fb2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     fb9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     fbf:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     fc5:	78 2d                	js     ff4 <sysEnter_Vector-0x12f00c>
     fc7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     fc9:	75 2f                	jne    ffa <sysEnter_Vector-0x12f006>
     fcb:	35 2e 33 2e 30       	xor    eax,0x302e332e
     fd0:	2f                   	das    
     fd1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     fd8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     fdb:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     fdf:	65 00 00             	add    BYTE PTR gs:[eax],al
     fe2:	73 70                	jae    1054 <sysEnter_Vector-0x12efac>
     fe4:	72 69                	jb     104f <sysEnter_Vector-0x12efb1>
     fe6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fe7:	74 66                	je     104f <sysEnter_Vector-0x12efb1>
     fe9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     fec:	01 00                	add    DWORD PTR [eax],eax
     fee:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ff1:	64                   	fs
     ff2:	61                   	popa   
     ff3:	72 67                	jb     105c <sysEnter_Vector-0x12efa4>
     ff5:	2e                   	cs
     ff6:	68 00 02 00 00       	push   0x200
     ffb:	73 74                	jae    1071 <sysEnter_Vector-0x12ef8f>
     ffd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1004:	63 
    1005:	2e                   	cs
    1006:	68 00 02 00 00       	push   0x200
    100b:	6d                   	ins    DWORD PTR es:[edi],dx
    100c:	61                   	popa   
    100d:	6c                   	ins    BYTE PTR es:[edi],dx
    100e:	6c                   	ins    BYTE PTR es:[edi],dx
    100f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1010:	63 2e                	arpl   WORD PTR [esi],bp
    1012:	68 00 03 00 00       	push   0x300
    1017:	6c                   	ins    BYTE PTR es:[edi],dx
    1018:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    101f:	4f                   	dec    edi
    1020:	53                   	push   ebx
    1021:	2e                   	cs
    1022:	68 00 03 00 00       	push   0x300
    1027:	00 00                	add    BYTE PTR [eax],al
    1029:	05 02 d4 1d 00       	add    eax,0x1dd402
    102e:	9f                   	lahf   
    102f:	03 0a                	add    ecx,DWORD PTR [edx]
    1031:	01 08                	add    DWORD PTR [eax],ecx
    1033:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    1036:	02 29                	add    ch,BYTE PTR [ecx]
    1038:	11 08                	adc    DWORD PTR [eax],ecx
    103a:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    1040:	0a 08                	or     cl,BYTE PTR [eax]
    1042:	2e                   	cs
    1043:	91                   	xchg   ecx,eax
    1044:	9f                   	lahf   
    1045:	4b                   	dec    ebx
    1046:	00 02                	add    BYTE PTR [edx],al
    1048:	04 01                	add    al,0x1
    104a:	06                   	push   es
    104b:	66 06                	pushw  es
    104d:	67 9f                	addr16 lahf 
    104f:	00 02                	add    BYTE PTR [edx],al
    1051:	04 01                	add    al,0x1
    1053:	06                   	push   es
    1054:	9e                   	sahf   
    1055:	00 02                	add    BYTE PTR [edx],al
    1057:	04 02                	add    al,0x2
    1059:	74 00                	je     105b <sysEnter_Vector-0x12efa5>
    105b:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    105e:	58                   	pop    eax
    105f:	00 02                	add    BYTE PTR [edx],al
    1061:	04 04                	add    al,0x4
    1063:	06                   	push   es
    1064:	3d 00 02 04 04       	cmp    eax,0x4040200
    1069:	4b                   	dec    ebx
    106a:	9f                   	lahf   
    106b:	67 4b                	addr16 dec ebx
    106d:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    1072:	9f                   	lahf   
    1073:	4b                   	dec    ebx
    1074:	4d                   	dec    ebp
    1075:	9f                   	lahf   
    1076:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    107a:	75 67                	jne    10e3 <sysEnter_Vector-0x12ef1d>
    107c:	f5                   	cmc    
    107d:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    1083:	67 9f                	addr16 lahf 
    1085:	2f                   	das    
    1086:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    108b:	67 d7                	xlat   BYTE PTR ds:[bx]
    108d:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    1093:	e3 ca                	jecxz  105f <sysEnter_Vector-0x12efa1>
    1095:	2f                   	das    
    1096:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    109b:	ca 2f b9             	retf   0xb92f
    109e:	ca 00 02             	retf   0x200
    10a1:	04 01                	add    al,0x1
    10a3:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    10a8:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    10ae:	76 91                	jbe    1041 <sysEnter_Vector-0x12efbf>
    10b0:	08 d8                	or     al,bl
    10b2:	4b                   	dec    ebx
    10b3:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    10b6:	4b                   	dec    ebx
    10b7:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    10ba:	4b                   	dec    ebx
    10bb:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    10be:	13 08                	adc    ecx,DWORD PTR [eax]
    10c0:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    10c6:	4f                   	dec    edi
    10c7:	75 9f                	jne    1068 <sysEnter_Vector-0x12ef98>
    10c9:	91                   	xchg   ecx,eax
    10ca:	08 13                	or     BYTE PTR [ebx],dl
    10cc:	08 13                	or     BYTE PTR [ebx],dl
    10ce:	9f                   	lahf   
    10cf:	92                   	xchg   edx,eax
    10d0:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    10d3:	75 00                	jne    10d5 <sysEnter_Vector-0x12ef2b>
    10d5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10d8:	06                   	push   es
    10d9:	9e                   	sahf   
    10da:	00 02                	add    BYTE PTR [edx],al
    10dc:	04 02                	add    al,0x2
    10de:	9e                   	sahf   
    10df:	06                   	push   es
    10e0:	9f                   	lahf   
    10e1:	bb 94 76 02 23       	mov    ebx,0x23027694
    10e6:	14 9f                	adc    al,0x9f
    10e8:	2f                   	das    
    10e9:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    10ee:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    10f3:	08 30                	or     BYTE PTR [eax],dh
    10f5:	76 9f                	jbe    1096 <sysEnter_Vector-0x12ef6a>
    10f7:	2f                   	das    
    10f8:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    10fd:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    1103:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    1106:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1109:	06                   	push   es
    110a:	4a                   	dec    edx
    110b:	06                   	push   es
    110c:	84 2f                	test   BYTE PTR [edi],ch
    110e:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    1113:	4d                   	dec    ebp
    1114:	ab                   	stos   DWORD PTR es:[edi],eax
    1115:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    111b:	55                   	push   ebp
    111c:	d7                   	xlat   BYTE PTR ds:[ebx]
    111d:	ca 5b bb             	retf   0xbb5b
    1120:	5c                   	pop    esp
    1121:	75 31                	jne    1154 <sysEnter_Vector-0x12eeac>
    1123:	4c                   	dec    esp
    1124:	75 32                	jne    1158 <sysEnter_Vector-0x12eea8>
    1126:	4c                   	dec    esp
    1127:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    112d:	91                   	xchg   ecx,eax
    112e:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    1131:	03 0a                	add    ecx,DWORD PTR [edx]
    1133:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    1136:	67 08 2f             	or     BYTE PTR [bx],ch
    1139:	9f                   	lahf   
    113a:	91                   	xchg   ecx,eax
    113b:	9f                   	lahf   
    113c:	f4                   	hlt    
    113d:	d7                   	xlat   BYTE PTR ds:[ebx]
    113e:	00 02                	add    BYTE PTR [edx],al
    1140:	04 02                	add    al,0x2
    1142:	03 e8                	add    ebp,eax
    1144:	7e 08                	jle    114e <sysEnter_Vector-0x12eeb2>
    1146:	f2 00 02             	repnz add BYTE PTR [edx],al
    1149:	04 01                	add    al,0x1
    114b:	06                   	push   es
    114c:	90                   	nop
    114d:	06                   	push   es
    114e:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    1154:	5b                   	pop    ebx
    1155:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    1158:	76 3d                	jbe    1197 <sysEnter_Vector-0x12ee69>
    115a:	02 02                	add    al,BYTE PTR [edx]
    115c:	00 01                	add    BYTE PTR [ecx],al
    115e:	01 fa                	add    edx,edi
    1160:	00 00                	add    BYTE PTR [eax],al
    1162:	00 02                	add    BYTE PTR [edx],al
    1164:	00 d8                	add    al,bl
    1166:	00 00                	add    BYTE PTR [eax],al
    1168:	00 01                	add    BYTE PTR [ecx],al
    116a:	01 fb                	add    ebx,edi
    116c:	0e                   	push   cs
    116d:	0d 00 01 01 01       	or     eax,0x1010100
    1172:	01 00                	add    DWORD PTR [eax],eax
    1174:	00 00                	add    BYTE PTR [eax],al
    1176:	01 00                	add    DWORD PTR [eax],eax
    1178:	00 01                	add    BYTE PTR [ecx],al
    117a:	73 72                	jae    11ee <sysEnter_Vector-0x12ee12>
    117c:	63 00                	arpl   WORD PTR [eax],ax
    117e:	2f                   	das    
    117f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1184:	79 6f                	jns    11f5 <sysEnter_Vector-0x12ee0b>
    1186:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    118d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1190:	73 73                	jae    1205 <sysEnter_Vector-0x12edfb>
    1192:	2f                   	das    
    1193:	6c                   	ins    BYTE PTR es:[edi],dx
    1194:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    119b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11a1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11a7:	78 2d                	js     11d6 <sysEnter_Vector-0x12ee2a>
    11a9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11ab:	75 2f                	jne    11dc <sysEnter_Vector-0x12ee24>
    11ad:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11b2:	2f                   	das    
    11b3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11ba:	00 2e                	add    BYTE PTR [esi],ch
    11bc:	2e                   	cs
    11bd:	2f                   	das    
    11be:	2e                   	cs
    11bf:	2e                   	cs
    11c0:	2f                   	das    
    11c1:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    11c5:	6a 2f                	push   0x2f
    11c7:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    11ca:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    11d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11d2:	65                   	gs
    11d3:	6c                   	ins    BYTE PTR es:[edi],dx
    11d4:	2f                   	das    
    11d5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11dc:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    11df:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    11e3:	65 00 00             	add    BYTE PTR gs:[eax],al
    11e6:	73 74                	jae    125c <sysEnter_Vector-0x12eda4>
    11e8:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    11ef:	00 
    11f0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    11f3:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    11fa:	63 
    11fb:	2e                   	cs
    11fc:	68 00 02 00 00       	push   0x200
    1201:	73 74                	jae    1277 <sysEnter_Vector-0x12ed89>
    1203:	64                   	fs
    1204:	64                   	fs
    1205:	65                   	gs
    1206:	66                   	data16
    1207:	2e                   	cs
    1208:	68 00 02 00 00       	push   0x200
    120d:	64                   	fs
    120e:	6c                   	ins    BYTE PTR es:[edi],dx
    120f:	6c                   	ins    BYTE PTR es:[edi],dx
    1210:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
    1217:	00 00                	add    BYTE PTR [eax],al
    1219:	73 74                	jae    128f <sysEnter_Vector-0x12ed71>
    121b:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
    1222:	00 
    1223:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1226:	6c                   	ins    BYTE PTR es:[edi],dx
    1227:	6c                   	ins    BYTE PTR es:[edi],dx
    1228:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1229:	63 2e                	arpl   WORD PTR [esi],bp
    122b:	68 00 04 00 00       	push   0x400
    1230:	6c                   	ins    BYTE PTR es:[edi],dx
    1231:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1238:	4f                   	dec    edi
    1239:	53                   	push   ebx
    123a:	2e                   	cs
    123b:	68 00 04 00 00       	push   0x400
    1240:	00 00                	add    BYTE PTR [eax],al
    1242:	05 02 ec 24 00       	add    eax,0x24ec02
    1247:	9f                   	lahf   
    1248:	03 c3                	add    eax,ebx
    124a:	00 01                	add    BYTE PTR [ecx],al
    124c:	08 22                	or     BYTE PTR [edx],ah
    124e:	76 08                	jbe    1258 <sysEnter_Vector-0x12eda8>
    1250:	31 d7                	xor    edi,edx
    1252:	d7                   	xlat   BYTE PTR ds:[ebx]
    1253:	d7                   	xlat   BYTE PTR ds:[ebx]
    1254:	d7                   	xlat   BYTE PTR ds:[ebx]
    1255:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1256:	e6 21                	out    0x21,al
    1258:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
    125e:	00 00                	add    BYTE PTR [eax],al
    1260:	00 02                	add    BYTE PTR [edx],al
    1262:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    1269:	fb                   	sti    
    126a:	0e                   	push   cs
    126b:	0d 00 01 01 01       	or     eax,0x1010100
    1270:	01 00                	add    DWORD PTR [eax],eax
    1272:	00 00                	add    BYTE PTR [eax],al
    1274:	01 00                	add    DWORD PTR [eax],eax
    1276:	00 01                	add    BYTE PTR [ecx],al
    1278:	73 72                	jae    12ec <sysEnter_Vector-0x12ed14>
    127a:	63 2f                	arpl   WORD PTR [edi],bp
    127c:	73 74                	jae    12f2 <sysEnter_Vector-0x12ed0e>
    127e:	72 69                	jb     12e9 <sysEnter_Vector-0x12ed17>
    1280:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1281:	67 73 00             	addr16 jae 1284 <sysEnter_Vector-0x12ed7c>
    1284:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    128b:	00 2f                	add    BYTE PTR [edi],ch
    128d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1292:	79 6f                	jns    1303 <sysEnter_Vector-0x12ecfd>
    1294:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    129b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    129e:	73 73                	jae    1313 <sysEnter_Vector-0x12eced>
    12a0:	2f                   	das    
    12a1:	6c                   	ins    BYTE PTR es:[edi],dx
    12a2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    12a9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    12af:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12b5:	78 2d                	js     12e4 <sysEnter_Vector-0x12ed1c>
    12b7:	67 6e                	outs   dx,BYTE PTR ds:[si]
    12b9:	75 2f                	jne    12ea <sysEnter_Vector-0x12ed16>
    12bb:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12c0:	2f                   	das    
    12c1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12c8:	00 00                	add    BYTE PTR [eax],al
    12ca:	73 74                	jae    1340 <sysEnter_Vector-0x12ecc0>
    12cc:	72 63                	jb     1331 <sysEnter_Vector-0x12eccf>
    12ce:	61                   	popa   
    12cf:	74 2e                	je     12ff <sysEnter_Vector-0x12ed01>
    12d1:	63 00                	arpl   WORD PTR [eax],ax
    12d3:	01 00                	add    DWORD PTR [eax],eax
    12d5:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    12d8:	6c                   	ins    BYTE PTR es:[edi],dx
    12d9:	6c                   	ins    BYTE PTR es:[edi],dx
    12da:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12db:	63 2e                	arpl   WORD PTR [esi],bp
    12dd:	68 00 02 00 00       	push   0x200
    12e2:	6c                   	ins    BYTE PTR es:[edi],dx
    12e3:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    12ea:	4f                   	dec    edi
    12eb:	53                   	push   ebx
    12ec:	2e                   	cs
    12ed:	68 00 02 00 00       	push   0x200
    12f2:	73 74                	jae    1368 <sysEnter_Vector-0x12ec98>
    12f4:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    12fb:	63 
    12fc:	2e                   	cs
    12fd:	68 00 03 00 00       	push   0x300
    1302:	00 00                	add    BYTE PTR [eax],al
    1304:	05 02 70 25 00       	add    eax,0x257002
    1309:	9f                   	lahf   
    130a:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    1310:	24 13                	and    al,0x13
    1312:	3d 5b 08 21 02       	cmp    eax,0x221085b
    1317:	24 13                	and    al,0x13
    1319:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
    131e:	49                   	dec    ecx
    131f:	e8 76 2f 08 4b       	call   4b08429a <sysEnter_Vector+0x4af5429a>
    1324:	4b                   	dec    ebx
    1325:	47                   	inc    edi
    1326:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
    132d:	bb 00 00 00 02       	mov    ebx,0x2000000
    1332:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    1339:	fb                   	sti    
    133a:	0e                   	push   cs
    133b:	0d 00 01 01 01       	or     eax,0x1010100
    1340:	01 00                	add    DWORD PTR [eax],eax
    1342:	00 00                	add    BYTE PTR [eax],al
    1344:	01 00                	add    DWORD PTR [eax],eax
    1346:	00 01                	add    BYTE PTR [ecx],al
    1348:	73 72                	jae    13bc <sysEnter_Vector-0x12ec44>
    134a:	63 2f                	arpl   WORD PTR [edi],bp
    134c:	73 74                	jae    13c2 <sysEnter_Vector-0x12ec3e>
    134e:	72 69                	jb     13b9 <sysEnter_Vector-0x12ec47>
    1350:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1351:	67 73 00             	addr16 jae 1354 <sysEnter_Vector-0x12ecac>
    1354:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    135b:	00 2f                	add    BYTE PTR [edi],ch
    135d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1362:	79 6f                	jns    13d3 <sysEnter_Vector-0x12ec2d>
    1364:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    136b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    136e:	73 73                	jae    13e3 <sysEnter_Vector-0x12ec1d>
    1370:	2f                   	das    
    1371:	6c                   	ins    BYTE PTR es:[edi],dx
    1372:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1379:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    137f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1385:	78 2d                	js     13b4 <sysEnter_Vector-0x12ec4c>
    1387:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1389:	75 2f                	jne    13ba <sysEnter_Vector-0x12ec46>
    138b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1390:	2f                   	das    
    1391:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1398:	00 00                	add    BYTE PTR [eax],al
    139a:	73 74                	jae    1410 <sysEnter_Vector-0x12ebf0>
    139c:	72 63                	jb     1401 <sysEnter_Vector-0x12ebff>
    139e:	6d                   	ins    DWORD PTR es:[edi],dx
    139f:	70 2e                	jo     13cf <sysEnter_Vector-0x12ec31>
    13a1:	63 00                	arpl   WORD PTR [eax],ax
    13a3:	01 00                	add    DWORD PTR [eax],eax
    13a5:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    13a8:	6c                   	ins    BYTE PTR es:[edi],dx
    13a9:	6c                   	ins    BYTE PTR es:[edi],dx
    13aa:	6f                   	outs   dx,DWORD PTR ds:[esi]
    13ab:	63 2e                	arpl   WORD PTR [esi],bp
    13ad:	68 00 02 00 00       	push   0x200
    13b2:	6c                   	ins    BYTE PTR es:[edi],dx
    13b3:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    13ba:	4f                   	dec    edi
    13bb:	53                   	push   ebx
    13bc:	2e                   	cs
    13bd:	68 00 02 00 00       	push   0x200
    13c2:	73 74                	jae    1438 <sysEnter_Vector-0x12ebc8>
    13c4:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    13cb:	63 
    13cc:	2e                   	cs
    13cd:	68 00 03 00 00       	push   0x300
    13d2:	00 00                	add    BYTE PTR [eax],al
    13d4:	05 02 5c 26 00       	add    eax,0x265c02
    13d9:	9f                   	lahf   
    13da:	03 18                	add    ebx,DWORD PTR [eax]
    13dc:	01 08                	add    DWORD PTR [eax],ecx
    13de:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    13e4:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
    13ea:	01 01                	add    DWORD PTR [ecx],eax
    13ec:	dc 00                	fadd   QWORD PTR [eax]
    13ee:	00 00                	add    BYTE PTR [eax],al
    13f0:	02 00                	add    al,BYTE PTR [eax]
    13f2:	9c                   	pushf  
    13f3:	00 00                	add    BYTE PTR [eax],al
    13f5:	00 01                	add    BYTE PTR [ecx],al
    13f7:	01 fb                	add    ebx,edi
    13f9:	0e                   	push   cs
    13fa:	0d 00 01 01 01       	or     eax,0x1010100
    13ff:	01 00                	add    DWORD PTR [eax],eax
    1401:	00 00                	add    BYTE PTR [eax],al
    1403:	01 00                	add    DWORD PTR [eax],eax
    1405:	00 01                	add    BYTE PTR [ecx],al
    1407:	73 72                	jae    147b <sysEnter_Vector-0x12eb85>
    1409:	63 2f                	arpl   WORD PTR [edi],bp
    140b:	73 74                	jae    1481 <sysEnter_Vector-0x12eb7f>
    140d:	72 69                	jb     1478 <sysEnter_Vector-0x12eb88>
    140f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1410:	67 73 00             	addr16 jae 1413 <sysEnter_Vector-0x12ebed>
    1413:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    141a:	00 2f                	add    BYTE PTR [edi],ch
    141c:	68 6f 6d 65 2f       	push   0x2f656d6f
    1421:	79 6f                	jns    1492 <sysEnter_Vector-0x12eb6e>
    1423:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    142a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    142d:	73 73                	jae    14a2 <sysEnter_Vector-0x12eb5e>
    142f:	2f                   	das    
    1430:	6c                   	ins    BYTE PTR es:[edi],dx
    1431:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1438:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    143e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1444:	78 2d                	js     1473 <sysEnter_Vector-0x12eb8d>
    1446:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1448:	75 2f                	jne    1479 <sysEnter_Vector-0x12eb87>
    144a:	35 2e 33 2e 30       	xor    eax,0x302e332e
    144f:	2f                   	das    
    1450:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1457:	00 00                	add    BYTE PTR [eax],al
    1459:	73 74                	jae    14cf <sysEnter_Vector-0x12eb31>
    145b:	72 63                	jb     14c0 <sysEnter_Vector-0x12eb40>
    145d:	70 79                	jo     14d8 <sysEnter_Vector-0x12eb28>
    145f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1462:	01 00                	add    DWORD PTR [eax],eax
    1464:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1467:	6c                   	ins    BYTE PTR es:[edi],dx
    1468:	6c                   	ins    BYTE PTR es:[edi],dx
    1469:	6f                   	outs   dx,DWORD PTR ds:[esi]
    146a:	63 2e                	arpl   WORD PTR [esi],bp
    146c:	68 00 02 00 00       	push   0x200
    1471:	6c                   	ins    BYTE PTR es:[edi],dx
    1472:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1479:	4f                   	dec    edi
    147a:	53                   	push   ebx
    147b:	2e                   	cs
    147c:	68 00 02 00 00       	push   0x200
    1481:	73 74                	jae    14f7 <sysEnter_Vector-0x12eb09>
    1483:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    148a:	63 
    148b:	2e                   	cs
    148c:	68 00 03 00 00       	push   0x300
    1491:	00 00                	add    BYTE PTR [eax],al
    1493:	05 02 bc 26 00       	add    eax,0x26bc02
    1498:	9f                   	lahf   
    1499:	16                   	push   ss
    149a:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    149e:	04 01                	add    al,0x1
    14a0:	06                   	push   es
    14a1:	20 06                	and    BYTE PTR [esi],al
    14a3:	08 ca                	or     dl,cl
    14a5:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    14ab:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14ae:	06                   	push   es
    14af:	20 06                	and    BYTE PTR [esi],al
    14b1:	08 ca                	or     dl,cl
    14b3:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    14b9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    14bc:	06                   	push   es
    14bd:	20 00                	and    BYTE PTR [eax],al
    14bf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14c2:	08 c8                	or     al,cl
    14c4:	06                   	push   es
    14c5:	ca 3d 02             	retf   0x23d
    14c8:	02 00                	add    al,BYTE PTR [eax]
    14ca:	01 01                	add    DWORD PTR [ecx],eax
    14cc:	cb                   	retf   
    14cd:	00 00                	add    BYTE PTR [eax],al
    14cf:	00 02                	add    BYTE PTR [edx],al
    14d1:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    14d7:	01 fb                	add    ebx,edi
    14d9:	0e                   	push   cs
    14da:	0d 00 01 01 01       	or     eax,0x1010100
    14df:	01 00                	add    DWORD PTR [eax],eax
    14e1:	00 00                	add    BYTE PTR [eax],al
    14e3:	01 00                	add    DWORD PTR [eax],eax
    14e5:	00 01                	add    BYTE PTR [ecx],al
    14e7:	73 72                	jae    155b <sysEnter_Vector-0x12eaa5>
    14e9:	63 2f                	arpl   WORD PTR [edi],bp
    14eb:	73 74                	jae    1561 <sysEnter_Vector-0x12ea9f>
    14ed:	72 69                	jb     1558 <sysEnter_Vector-0x12eaa8>
    14ef:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14f0:	67 73 00             	addr16 jae 14f3 <sysEnter_Vector-0x12eb0d>
    14f3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14fa:	00 2f                	add    BYTE PTR [edi],ch
    14fc:	68 6f 6d 65 2f       	push   0x2f656d6f
    1501:	79 6f                	jns    1572 <sysEnter_Vector-0x12ea8e>
    1503:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    150a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    150d:	73 73                	jae    1582 <sysEnter_Vector-0x12ea7e>
    150f:	2f                   	das    
    1510:	6c                   	ins    BYTE PTR es:[edi],dx
    1511:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1518:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    151e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1524:	78 2d                	js     1553 <sysEnter_Vector-0x12eaad>
    1526:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1528:	75 2f                	jne    1559 <sysEnter_Vector-0x12eaa7>
    152a:	35 2e 33 2e 30       	xor    eax,0x302e332e
    152f:	2f                   	das    
    1530:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1537:	00 00                	add    BYTE PTR [eax],al
    1539:	73 74                	jae    15af <sysEnter_Vector-0x12ea51>
    153b:	72 69                	jb     15a6 <sysEnter_Vector-0x12ea5a>
    153d:	73 6e                	jae    15ad <sysEnter_Vector-0x12ea53>
    153f:	75 6d                	jne    15ae <sysEnter_Vector-0x12ea52>
    1541:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1544:	01 00                	add    DWORD PTR [eax],eax
    1546:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1549:	6c                   	ins    BYTE PTR es:[edi],dx
    154a:	6c                   	ins    BYTE PTR es:[edi],dx
    154b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    154c:	63 2e                	arpl   WORD PTR [esi],bp
    154e:	68 00 02 00 00       	push   0x200
    1553:	6c                   	ins    BYTE PTR es:[edi],dx
    1554:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    155b:	4f                   	dec    edi
    155c:	53                   	push   ebx
    155d:	2e                   	cs
    155e:	68 00 02 00 00       	push   0x200
    1563:	73 74                	jae    15d9 <sysEnter_Vector-0x12ea27>
    1565:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    156c:	63 
    156d:	2e                   	cs
    156e:	68 00 03 00 00       	push   0x300
    1573:	00 00                	add    BYTE PTR [eax],al
    1575:	05 02 84 27 00       	add    eax,0x278402
    157a:	9f                   	lahf   
    157b:	1a 08                	sbb    cl,BYTE PTR [eax]
    157d:	59                   	pop    ecx
    157e:	00 02                	add    BYTE PTR [edx],al
    1580:	04 01                	add    al,0x1
    1582:	06                   	push   es
    1583:	66                   	data16
    1584:	00 02                	add    BYTE PTR [edx],al
    1586:	04 02                	add    al,0x2
    1588:	66 06                	pushw  es
    158a:	75 59                	jne    15e5 <sysEnter_Vector-0x12ea1b>
    158c:	31 f3                	xor    ebx,esi
    158e:	76 2f                	jbe    15bf <sysEnter_Vector-0x12ea41>
    1590:	08 e5                	or     ch,ah
    1592:	72 08                	jb     159c <sysEnter_Vector-0x12ea64>
    1594:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    1597:	02 00                	add    al,BYTE PTR [eax]
    1599:	01 01                	add    DWORD PTR [ecx],eax
    159b:	94                   	xchg   esp,eax
    159c:	00 00                	add    BYTE PTR [eax],al
    159e:	00 02                	add    BYTE PTR [edx],al
    15a0:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    15a4:	00 01                	add    BYTE PTR [ecx],al
    15a6:	01 fb                	add    ebx,edi
    15a8:	0e                   	push   cs
    15a9:	0d 00 01 01 01       	or     eax,0x1010100
    15ae:	01 00                	add    DWORD PTR [eax],eax
    15b0:	00 00                	add    BYTE PTR [eax],al
    15b2:	01 00                	add    DWORD PTR [eax],eax
    15b4:	00 01                	add    BYTE PTR [ecx],al
    15b6:	73 72                	jae    162a <sysEnter_Vector-0x12e9d6>
    15b8:	63 2f                	arpl   WORD PTR [edi],bp
    15ba:	73 74                	jae    1630 <sysEnter_Vector-0x12e9d0>
    15bc:	72 69                	jb     1627 <sysEnter_Vector-0x12e9d9>
    15be:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15bf:	67 73 00             	addr16 jae 15c2 <sysEnter_Vector-0x12ea3e>
    15c2:	2f                   	das    
    15c3:	68 6f 6d 65 2f       	push   0x2f656d6f
    15c8:	79 6f                	jns    1639 <sysEnter_Vector-0x12e9c7>
    15ca:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    15d1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    15d4:	73 73                	jae    1649 <sysEnter_Vector-0x12e9b7>
    15d6:	2f                   	das    
    15d7:	6c                   	ins    BYTE PTR es:[edi],dx
    15d8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    15df:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    15e5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    15eb:	78 2d                	js     161a <sysEnter_Vector-0x12e9e6>
    15ed:	67 6e                	outs   dx,BYTE PTR ds:[si]
    15ef:	75 2f                	jne    1620 <sysEnter_Vector-0x12e9e0>
    15f1:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15f6:	2f                   	das    
    15f7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15fe:	00 00                	add    BYTE PTR [eax],al
    1600:	73 74                	jae    1676 <sysEnter_Vector-0x12e98a>
    1602:	72 6c                	jb     1670 <sysEnter_Vector-0x12e990>
    1604:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1606:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1609:	01 00                	add    DWORD PTR [eax],eax
    160b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    160e:	64                   	fs
    160f:	64                   	fs
    1610:	65                   	gs
    1611:	66                   	data16
    1612:	2e                   	cs
    1613:	68 00 02 00 00       	push   0x200
    1618:	00 00                	add    BYTE PTR [eax],al
    161a:	05 02 10 28 00       	add    eax,0x281002
    161f:	9f                   	lahf   
    1620:	14 f3                	adc    al,0xf3
    1622:	75 2f                	jne    1653 <sysEnter_Vector-0x12e9ad>
    1624:	49                   	dec    ecx
    1625:	e6 3d                	out    0x3d,al
    1627:	30 f3                	xor    bl,dh
    1629:	75 2f                	jne    165a <sysEnter_Vector-0x12e9a6>
    162b:	49                   	dec    ecx
    162c:	e6 3d                	out    0x3d,al
    162e:	02 02                	add    al,BYTE PTR [edx]
    1630:	00 01                	add    BYTE PTR [ecx],al
    1632:	01 c1                	add    ecx,eax
    1634:	00 00                	add    BYTE PTR [eax],al
    1636:	00 02                	add    BYTE PTR [edx],al
    1638:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    163b:	00 00                	add    BYTE PTR [eax],al
    163d:	01 01                	add    DWORD PTR [ecx],eax
    163f:	fb                   	sti    
    1640:	0e                   	push   cs
    1641:	0d 00 01 01 01       	or     eax,0x1010100
    1646:	01 00                	add    DWORD PTR [eax],eax
    1648:	00 00                	add    BYTE PTR [eax],al
    164a:	01 00                	add    DWORD PTR [eax],eax
    164c:	00 01                	add    BYTE PTR [ecx],al
    164e:	73 72                	jae    16c2 <sysEnter_Vector-0x12e93e>
    1650:	63 2f                	arpl   WORD PTR [edi],bp
    1652:	73 74                	jae    16c8 <sysEnter_Vector-0x12e938>
    1654:	72 69                	jb     16bf <sysEnter_Vector-0x12e941>
    1656:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1657:	67 73 00             	addr16 jae 165a <sysEnter_Vector-0x12e9a6>
    165a:	2f                   	das    
    165b:	68 6f 6d 65 2f       	push   0x2f656d6f
    1660:	79 6f                	jns    16d1 <sysEnter_Vector-0x12e92f>
    1662:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1669:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    166c:	73 73                	jae    16e1 <sysEnter_Vector-0x12e91f>
    166e:	2f                   	das    
    166f:	6c                   	ins    BYTE PTR es:[edi],dx
    1670:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1677:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    167d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1683:	78 2d                	js     16b2 <sysEnter_Vector-0x12e94e>
    1685:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1687:	75 2f                	jne    16b8 <sysEnter_Vector-0x12e948>
    1689:	35 2e 33 2e 30       	xor    eax,0x302e332e
    168e:	2f                   	das    
    168f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1696:	00 00                	add    BYTE PTR [eax],al
    1698:	73 74                	jae    170e <sysEnter_Vector-0x12e8f2>
    169a:	72 6e                	jb     170a <sysEnter_Vector-0x12e8f6>
    169c:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    169f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    16a2:	01 00                	add    DWORD PTR [eax],eax
    16a4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    16a7:	64                   	fs
    16a8:	64                   	fs
    16a9:	65                   	gs
    16aa:	66                   	data16
    16ab:	2e                   	cs
    16ac:	68 00 02 00 00       	push   0x200
    16b1:	00 00                	add    BYTE PTR [eax],al
    16b3:	05 02 74 28 00       	add    eax,0x287402
    16b8:	9f                   	lahf   
    16b9:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    16bc:	c9                   	leave  
    16bd:	2f                   	das    
    16be:	f3 00 02             	repz add BYTE PTR [edx],al
    16c1:	04 01                	add    al,0x1
    16c3:	06                   	push   es
    16c4:	f2 00 02             	repnz add BYTE PTR [edx],al
    16c7:	04 02                	add    al,0x2
    16c9:	74 06                	je     16d1 <sysEnter_Vector-0x12e92f>
    16cb:	75 9f                	jne    166c <sysEnter_Vector-0x12e994>
    16cd:	70 00                	jo     16cf <sysEnter_Vector-0x12e931>
    16cf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16d2:	06                   	push   es
    16d3:	ba 06 6b 59 31       	mov    edx,0x31596b06
    16d8:	c9                   	leave  
    16d9:	2f                   	das    
    16da:	f3 00 02             	repz add BYTE PTR [edx],al
    16dd:	04 01                	add    al,0x1
    16df:	06                   	push   es
    16e0:	f2 00 02             	repnz add BYTE PTR [edx],al
    16e3:	04 02                	add    al,0x2
    16e5:	74 06                	je     16ed <sysEnter_Vector-0x12e913>
    16e7:	75 9f                	jne    1688 <sysEnter_Vector-0x12e978>
    16e9:	70 00                	jo     16eb <sysEnter_Vector-0x12e915>
    16eb:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16ee:	06                   	push   es
    16ef:	ba 06 6b 59 02       	mov    edx,0x2596b06
    16f4:	02 00                	add    al,BYTE PTR [eax]
    16f6:	01 01                	add    DWORD PTR [ecx],eax
    16f8:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    16fd:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1700:	00 00                	add    BYTE PTR [eax],al
    1702:	01 01                	add    DWORD PTR [ecx],eax
    1704:	fb                   	sti    
    1705:	0e                   	push   cs
    1706:	0d 00 01 01 01       	or     eax,0x1010100
    170b:	01 00                	add    DWORD PTR [eax],eax
    170d:	00 00                	add    BYTE PTR [eax],al
    170f:	01 00                	add    DWORD PTR [eax],eax
    1711:	00 01                	add    BYTE PTR [ecx],al
    1713:	73 72                	jae    1787 <sysEnter_Vector-0x12e879>
    1715:	63 2f                	arpl   WORD PTR [edi],bp
    1717:	73 74                	jae    178d <sysEnter_Vector-0x12e873>
    1719:	72 69                	jb     1784 <sysEnter_Vector-0x12e87c>
    171b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    171c:	67 73 00             	addr16 jae 171f <sysEnter_Vector-0x12e8e1>
    171f:	2f                   	das    
    1720:	68 6f 6d 65 2f       	push   0x2f656d6f
    1725:	79 6f                	jns    1796 <sysEnter_Vector-0x12e86a>
    1727:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    172e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1731:	73 73                	jae    17a6 <sysEnter_Vector-0x12e85a>
    1733:	2f                   	das    
    1734:	6c                   	ins    BYTE PTR es:[edi],dx
    1735:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    173c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1742:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1748:	78 2d                	js     1777 <sysEnter_Vector-0x12e889>
    174a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    174c:	75 2f                	jne    177d <sysEnter_Vector-0x12e883>
    174e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1753:	2f                   	das    
    1754:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    175b:	00 00                	add    BYTE PTR [eax],al
    175d:	73 74                	jae    17d3 <sysEnter_Vector-0x12e82d>
    175f:	72 6e                	jb     17cf <sysEnter_Vector-0x12e831>
    1761:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1764:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1767:	01 00                	add    DWORD PTR [eax],eax
    1769:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    176c:	64                   	fs
    176d:	64                   	fs
    176e:	65                   	gs
    176f:	66                   	data16
    1770:	2e                   	cs
    1771:	68 00 02 00 00       	push   0x200
    1776:	00 00                	add    BYTE PTR [eax],al
    1778:	05 02 44 29 00       	add    eax,0x294402
    177d:	9f                   	lahf   
    177e:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    1784:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1787:	00 02                	add    BYTE PTR [edx],al
    1789:	04 01                	add    al,0x1
    178b:	06                   	push   es
    178c:	66 06                	pushw  es
    178e:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1793:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    1798:	02 02                	add    al,BYTE PTR [edx]
    179a:	00 01                	add    BYTE PTR [ecx],al
    179c:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    179f:	00 00                	add    BYTE PTR [eax],al
    17a1:	02 00                	add    al,BYTE PTR [eax]
    17a3:	9c                   	pushf  
    17a4:	00 00                	add    BYTE PTR [eax],al
    17a6:	00 01                	add    BYTE PTR [ecx],al
    17a8:	01 fb                	add    ebx,edi
    17aa:	0e                   	push   cs
    17ab:	0d 00 01 01 01       	or     eax,0x1010100
    17b0:	01 00                	add    DWORD PTR [eax],eax
    17b2:	00 00                	add    BYTE PTR [eax],al
    17b4:	01 00                	add    DWORD PTR [eax],eax
    17b6:	00 01                	add    BYTE PTR [ecx],al
    17b8:	73 72                	jae    182c <sysEnter_Vector-0x12e7d4>
    17ba:	63 2f                	arpl   WORD PTR [edi],bp
    17bc:	73 74                	jae    1832 <sysEnter_Vector-0x12e7ce>
    17be:	72 69                	jb     1829 <sysEnter_Vector-0x12e7d7>
    17c0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17c1:	67 73 00             	addr16 jae 17c4 <sysEnter_Vector-0x12e83c>
    17c4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17cb:	00 2f                	add    BYTE PTR [edi],ch
    17cd:	68 6f 6d 65 2f       	push   0x2f656d6f
    17d2:	79 6f                	jns    1843 <sysEnter_Vector-0x12e7bd>
    17d4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17db:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17de:	73 73                	jae    1853 <sysEnter_Vector-0x12e7ad>
    17e0:	2f                   	das    
    17e1:	6c                   	ins    BYTE PTR es:[edi],dx
    17e2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17e9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17ef:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17f5:	78 2d                	js     1824 <sysEnter_Vector-0x12e7dc>
    17f7:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17f9:	75 2f                	jne    182a <sysEnter_Vector-0x12e7d6>
    17fb:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1800:	2f                   	das    
    1801:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1808:	00 00                	add    BYTE PTR [eax],al
    180a:	73 74                	jae    1880 <sysEnter_Vector-0x12e780>
    180c:	72 6f                	jb     187d <sysEnter_Vector-0x12e783>
    180e:	75 6c                	jne    187c <sysEnter_Vector-0x12e784>
    1810:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1813:	01 00                	add    DWORD PTR [eax],eax
    1815:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1818:	6c                   	ins    BYTE PTR es:[edi],dx
    1819:	6c                   	ins    BYTE PTR es:[edi],dx
    181a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    181b:	63 2e                	arpl   WORD PTR [esi],bp
    181d:	68 00 02 00 00       	push   0x200
    1822:	6c                   	ins    BYTE PTR es:[edi],dx
    1823:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    182a:	4f                   	dec    edi
    182b:	53                   	push   ebx
    182c:	2e                   	cs
    182d:	68 00 02 00 00       	push   0x200
    1832:	73 74                	jae    18a8 <sysEnter_Vector-0x12e758>
    1834:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    183b:	63 
    183c:	2e                   	cs
    183d:	68 00 03 00 00       	push   0x300
    1842:	00 00                	add    BYTE PTR [eax],al
    1844:	05 02 c4 29 00       	add    eax,0x29c402
    1849:	9f                   	lahf   
    184a:	03 3b                	add    edi,DWORD PTR [ebx]
    184c:	01 08                	add    DWORD PTR [eax],ecx
    184e:	2f                   	das    
    184f:	40                   	inc    eax
    1850:	00 02                	add    BYTE PTR [edx],al
    1852:	04 01                	add    al,0x1
    1854:	7a 00                	jp     1856 <sysEnter_Vector-0x12e7aa>
    1856:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1859:	ad                   	lods   eax,DWORD PTR ds:[esi]
    185a:	59                   	pop    ecx
    185b:	59                   	pop    ecx
    185c:	75 c9                	jne    1827 <sysEnter_Vector-0x12e7d9>
    185e:	59                   	pop    ecx
    185f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1860:	00 02                	add    BYTE PTR [edx],al
    1862:	04 02                	add    al,0x2
    1864:	06                   	push   es
    1865:	66                   	data16
    1866:	00 02                	add    BYTE PTR [edx],al
    1868:	04 03                	add    al,0x3
    186a:	66 06                	pushw  es
    186c:	59                   	pop    ecx
    186d:	00 02                	add    BYTE PTR [edx],al
    186f:	04 01                	add    al,0x1
    1871:	06                   	push   es
    1872:	74 06                	je     187a <sysEnter_Vector-0x12e786>
    1874:	75 91                	jne    1807 <sysEnter_Vector-0x12e7f9>
    1876:	3d 76 67 00 02       	cmp    eax,0x2006776
    187b:	04 01                	add    al,0x1
    187d:	06                   	push   es
    187e:	58                   	pop    eax
    187f:	00 02                	add    BYTE PTR [edx],al
    1881:	04 02                	add    al,0x2
    1883:	74 00                	je     1885 <sysEnter_Vector-0x12e77b>
    1885:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1888:	58                   	pop    eax
    1889:	06                   	push   es
    188a:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    188f:	9f                   	lahf   
    1890:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1894:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1897:	06                   	push   es
    1898:	58                   	pop    eax
    1899:	00 02                	add    BYTE PTR [edx],al
    189b:	04 03                	add    al,0x3
    189d:	58                   	pop    eax
    189e:	00 02                	add    BYTE PTR [edx],al
    18a0:	04 04                	add    al,0x4
    18a2:	74 00                	je     18a4 <sysEnter_Vector-0x12e75c>
    18a4:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    18a7:	58                   	pop    eax
    18a8:	06                   	push   es
    18a9:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    18ac:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18af:	06                   	push   es
    18b0:	66                   	data16
    18b1:	00 02                	add    BYTE PTR [edx],al
    18b3:	04 02                	add    al,0x2
    18b5:	58                   	pop    eax
    18b6:	00 02                	add    BYTE PTR [edx],al
    18b8:	04 03                	add    al,0x3
    18ba:	58                   	pop    eax
    18bb:	06                   	push   es
    18bc:	67 76 59             	addr16 jbe 1918 <sysEnter_Vector-0x12e6e8>
    18bf:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    18c3:	03 10                	add    edx,DWORD PTR [eax]
    18c5:	ac                   	lods   al,BYTE PTR ds:[esi]
    18c6:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    18c9:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    18cc:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    18cf:	67 2f                	addr16 das 
    18d1:	67 00 02             	add    BYTE PTR [bp+si],al
    18d4:	04 01                	add    al,0x1
    18d6:	06                   	push   es
    18d7:	66                   	data16
    18d8:	00 02                	add    BYTE PTR [edx],al
    18da:	04 02                	add    al,0x2
    18dc:	58                   	pop    eax
    18dd:	00 02                	add    BYTE PTR [edx],al
    18df:	04 04                	add    al,0x4
    18e1:	3c 06                	cmp    al,0x6
    18e3:	59                   	pop    ecx
    18e4:	2f                   	das    
    18e5:	02 08                	add    cl,BYTE PTR [eax]
    18e7:	00 01                	add    BYTE PTR [ecx],al
    18e9:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    18ec:	00 00                	add    BYTE PTR [eax],al
    18ee:	02 00                	add    al,BYTE PTR [eax]
    18f0:	2d 00 00 00 01       	sub    eax,0x1000000
    18f5:	01 fb                	add    ebx,edi
    18f7:	0e                   	push   cs
    18f8:	0d 00 01 01 01       	or     eax,0x1010100
    18fd:	01 00                	add    DWORD PTR [eax],eax
    18ff:	00 00                	add    BYTE PTR [eax],al
    1901:	01 00                	add    DWORD PTR [eax],eax
    1903:	00 01                	add    BYTE PTR [ecx],al
    1905:	73 72                	jae    1979 <sysEnter_Vector-0x12e687>
    1907:	63 2f                	arpl   WORD PTR [edi],bp
    1909:	73 74                	jae    197f <sysEnter_Vector-0x12e681>
    190b:	72 69                	jb     1976 <sysEnter_Vector-0x12e68a>
    190d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    190e:	67 73 00             	addr16 jae 1911 <sysEnter_Vector-0x12e6ef>
    1911:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1914:	72 70                	jb     1986 <sysEnter_Vector-0x12e67a>
    1916:	61                   	popa   
    1917:	72 74                	jb     198d <sysEnter_Vector-0x12e673>
    1919:	73 2e                	jae    1949 <sysEnter_Vector-0x12e6b7>
    191b:	63 00                	arpl   WORD PTR [eax],ax
    191d:	01 00                	add    DWORD PTR [eax],eax
    191f:	00 00                	add    BYTE PTR [eax],al
    1921:	00 05 02 44 2b 00    	add    BYTE PTR ds:0x2b4402,al
    1927:	9f                   	lahf   
    1928:	13 c9                	adc    ecx,ecx
    192a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    192b:	3d 02 02 00 01       	cmp    eax,0x1000202
    1930:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    1933:	00 00                	add    BYTE PTR [eax],al
    1935:	02 00                	add    al,BYTE PTR [eax]
    1937:	9c                   	pushf  
    1938:	00 00                	add    BYTE PTR [eax],al
    193a:	00 01                	add    BYTE PTR [ecx],al
    193c:	01 fb                	add    ebx,edi
    193e:	0e                   	push   cs
    193f:	0d 00 01 01 01       	or     eax,0x1010100
    1944:	01 00                	add    DWORD PTR [eax],eax
    1946:	00 00                	add    BYTE PTR [eax],al
    1948:	01 00                	add    DWORD PTR [eax],eax
    194a:	00 01                	add    BYTE PTR [ecx],al
    194c:	73 72                	jae    19c0 <sysEnter_Vector-0x12e640>
    194e:	63 2f                	arpl   WORD PTR [edi],bp
    1950:	73 74                	jae    19c6 <sysEnter_Vector-0x12e63a>
    1952:	72 69                	jb     19bd <sysEnter_Vector-0x12e643>
    1954:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1955:	67 73 00             	addr16 jae 1958 <sysEnter_Vector-0x12e6a8>
    1958:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    195f:	00 2f                	add    BYTE PTR [edi],ch
    1961:	68 6f 6d 65 2f       	push   0x2f656d6f
    1966:	79 6f                	jns    19d7 <sysEnter_Vector-0x12e629>
    1968:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    196f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1972:	73 73                	jae    19e7 <sysEnter_Vector-0x12e619>
    1974:	2f                   	das    
    1975:	6c                   	ins    BYTE PTR es:[edi],dx
    1976:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    197d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1983:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1989:	78 2d                	js     19b8 <sysEnter_Vector-0x12e648>
    198b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    198d:	75 2f                	jne    19be <sysEnter_Vector-0x12e642>
    198f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1994:	2f                   	das    
    1995:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    199c:	00 00                	add    BYTE PTR [eax],al
    199e:	73 74                	jae    1a14 <sysEnter_Vector-0x12e5ec>
    19a0:	72 74                	jb     1a16 <sysEnter_Vector-0x12e5ea>
    19a2:	6f                   	outs   dx,DWORD PTR ds:[esi]
    19a3:	6c                   	ins    BYTE PTR es:[edi],dx
    19a4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19a7:	01 00                	add    DWORD PTR [eax],eax
    19a9:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    19ac:	6c                   	ins    BYTE PTR es:[edi],dx
    19ad:	6c                   	ins    BYTE PTR es:[edi],dx
    19ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
    19af:	63 2e                	arpl   WORD PTR [esi],bp
    19b1:	68 00 02 00 00       	push   0x200
    19b6:	6c                   	ins    BYTE PTR es:[edi],dx
    19b7:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    19be:	4f                   	dec    edi
    19bf:	53                   	push   ebx
    19c0:	2e                   	cs
    19c1:	68 00 02 00 00       	push   0x200
    19c6:	73 74                	jae    1a3c <sysEnter_Vector-0x12e5c4>
    19c8:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    19cf:	63 
    19d0:	2e                   	cs
    19d1:	68 00 03 00 00       	push   0x300
    19d6:	00 00                	add    BYTE PTR [eax],al
    19d8:	05 02 64 2b 00       	add    eax,0x2b6402
    19dd:	9f                   	lahf   
    19de:	03 d7                	add    edx,edi
    19e0:	00 01                	add    BYTE PTR [ecx],al
    19e2:	08 2f                	or     BYTE PTR [edi],ch
    19e4:	40                   	inc    eax
    19e5:	00 02                	add    BYTE PTR [edx],al
    19e7:	04 01                	add    al,0x1
    19e9:	7c 00                	jl     19eb <sysEnter_Vector-0x12e615>
    19eb:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    19ee:	ad                   	lods   eax,DWORD PTR ds:[esi]
    19ef:	59                   	pop    ecx
    19f0:	59                   	pop    ecx
    19f1:	75 c9                	jne    19bc <sysEnter_Vector-0x12e644>
    19f3:	59                   	pop    ecx
    19f4:	ad                   	lods   eax,DWORD PTR ds:[esi]
    19f5:	00 02                	add    BYTE PTR [edx],al
    19f7:	04 02                	add    al,0x2
    19f9:	06                   	push   es
    19fa:	66                   	data16
    19fb:	00 02                	add    BYTE PTR [edx],al
    19fd:	04 03                	add    al,0x3
    19ff:	66 06                	pushw  es
    1a01:	59                   	pop    ecx
    1a02:	00 02                	add    BYTE PTR [edx],al
    1a04:	04 01                	add    al,0x1
    1a06:	06                   	push   es
    1a07:	74 06                	je     1a0f <sysEnter_Vector-0x12e5f1>
    1a09:	75 91                	jne    199c <sysEnter_Vector-0x12e664>
    1a0b:	3d 76 67 00 02       	cmp    eax,0x2006776
    1a10:	04 01                	add    al,0x1
    1a12:	06                   	push   es
    1a13:	58                   	pop    eax
    1a14:	00 02                	add    BYTE PTR [edx],al
    1a16:	04 02                	add    al,0x2
    1a18:	74 00                	je     1a1a <sysEnter_Vector-0x12e5e6>
    1a1a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1a1d:	58                   	pop    eax
    1a1e:	06                   	push   es
    1a1f:	03 13                	add    edx,DWORD PTR [ebx]
    1a21:	3c 00                	cmp    al,0x0
    1a23:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a26:	06                   	push   es
    1a27:	66                   	data16
    1a28:	00 02                	add    BYTE PTR [edx],al
    1a2a:	04 02                	add    al,0x2
    1a2c:	74 00                	je     1a2e <sysEnter_Vector-0x12e5d2>
    1a2e:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1a31:	06                   	push   es
    1a32:	59                   	pop    ecx
    1a33:	00 02                	add    BYTE PTR [edx],al
    1a35:	04 04                	add    al,0x4
    1a37:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1a3d:	f3 9f                	repz lahf 
    1a3f:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1a43:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a46:	06                   	push   es
    1a47:	58                   	pop    eax
    1a48:	00 02                	add    BYTE PTR [edx],al
    1a4a:	04 03                	add    al,0x3
    1a4c:	58                   	pop    eax
    1a4d:	00 02                	add    BYTE PTR [edx],al
    1a4f:	04 04                	add    al,0x4
    1a51:	74 00                	je     1a53 <sysEnter_Vector-0x12e5ad>
    1a53:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a56:	58                   	pop    eax
    1a57:	06                   	push   es
    1a58:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1a5b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a5e:	06                   	push   es
    1a5f:	66                   	data16
    1a60:	00 02                	add    BYTE PTR [edx],al
    1a62:	04 02                	add    al,0x2
    1a64:	58                   	pop    eax
    1a65:	00 02                	add    BYTE PTR [edx],al
    1a67:	04 03                	add    al,0x3
    1a69:	58                   	pop    eax
    1a6a:	06                   	push   es
    1a6b:	59                   	pop    ecx
    1a6c:	76 59                	jbe    1ac7 <sysEnter_Vector-0x12e539>
    1a6e:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1a72:	03 10                	add    edx,DWORD PTR [eax]
    1a74:	ac                   	lods   al,BYTE PTR ds:[esi]
    1a75:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1a78:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1a7b:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1a7e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a81:	06                   	push   es
    1a82:	66                   	data16
    1a83:	00 02                	add    BYTE PTR [edx],al
    1a85:	04 02                	add    al,0x2
    1a87:	74 00                	je     1a89 <sysEnter_Vector-0x12e577>
    1a89:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1a8c:	58                   	pop    eax
    1a8d:	06                   	push   es
    1a8e:	4b                   	dec    ebx
    1a8f:	67 2f                	addr16 das 
    1a91:	67 00 02             	add    BYTE PTR [bp+si],al
    1a94:	04 01                	add    al,0x1
    1a96:	06                   	push   es
    1a97:	66                   	data16
    1a98:	00 02                	add    BYTE PTR [edx],al
    1a9a:	04 02                	add    al,0x2
    1a9c:	58                   	pop    eax
    1a9d:	00 02                	add    BYTE PTR [edx],al
    1a9f:	04 04                	add    al,0x4
    1aa1:	3c 06                	cmp    al,0x6
    1aa3:	59                   	pop    ecx
    1aa4:	2f                   	das    
    1aa5:	02 08                	add    cl,BYTE PTR [eax]
    1aa7:	00 01                	add    BYTE PTR [ecx],al
    1aa9:	01 cf                	add    edi,ecx
    1aab:	00 00                	add    BYTE PTR [eax],al
    1aad:	00 02                	add    BYTE PTR [edx],al
    1aaf:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    1ab5:	01 fb                	add    ebx,edi
    1ab7:	0e                   	push   cs
    1ab8:	0d 00 01 01 01       	or     eax,0x1010100
    1abd:	01 00                	add    DWORD PTR [eax],eax
    1abf:	00 00                	add    BYTE PTR [eax],al
    1ac1:	01 00                	add    DWORD PTR [eax],eax
    1ac3:	00 01                	add    BYTE PTR [ecx],al
    1ac5:	73 72                	jae    1b39 <sysEnter_Vector-0x12e4c7>
    1ac7:	63 2f                	arpl   WORD PTR [edi],bp
    1ac9:	73 74                	jae    1b3f <sysEnter_Vector-0x12e4c1>
    1acb:	72 69                	jb     1b36 <sysEnter_Vector-0x12e4ca>
    1acd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ace:	67 73 00             	addr16 jae 1ad1 <sysEnter_Vector-0x12e52f>
    1ad1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1ad8:	00 2f                	add    BYTE PTR [edi],ch
    1ada:	68 6f 6d 65 2f       	push   0x2f656d6f
    1adf:	79 6f                	jns    1b50 <sysEnter_Vector-0x12e4b0>
    1ae1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1ae8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1aeb:	73 73                	jae    1b60 <sysEnter_Vector-0x12e4a0>
    1aed:	2f                   	das    
    1aee:	6c                   	ins    BYTE PTR es:[edi],dx
    1aef:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1af6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1afc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1b02:	78 2d                	js     1b31 <sysEnter_Vector-0x12e4cf>
    1b04:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1b06:	75 2f                	jne    1b37 <sysEnter_Vector-0x12e4c9>
    1b08:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1b0d:	2f                   	das    
    1b0e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b15:	00 00                	add    BYTE PTR [eax],al
    1b17:	73 74                	jae    1b8d <sysEnter_Vector-0x12e473>
    1b19:	72 74                	jb     1b8f <sysEnter_Vector-0x12e471>
    1b1b:	72 69                	jb     1b86 <sysEnter_Vector-0x12e47a>
    1b1d:	6d                   	ins    DWORD PTR es:[edi],dx
    1b1e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1b21:	01 00                	add    DWORD PTR [eax],eax
    1b23:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1b26:	6c                   	ins    BYTE PTR es:[edi],dx
    1b27:	6c                   	ins    BYTE PTR es:[edi],dx
    1b28:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1b29:	63 2e                	arpl   WORD PTR [esi],bp
    1b2b:	68 00 02 00 00       	push   0x200
    1b30:	6c                   	ins    BYTE PTR es:[edi],dx
    1b31:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1b38:	4f                   	dec    edi
    1b39:	53                   	push   ebx
    1b3a:	2e                   	cs
    1b3b:	68 00 02 00 00       	push   0x200
    1b40:	73 74                	jae    1bb6 <sysEnter_Vector-0x12e44a>
    1b42:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1b49:	63 
    1b4a:	2e                   	cs
    1b4b:	68 00 03 00 00       	push   0x300
    1b50:	00 00                	add    BYTE PTR [eax],al
    1b52:	05 02 00 2d 00       	add    eax,0x2d0002
    1b57:	9f                   	lahf   
    1b58:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1b5d:	48                   	dec    eax
    1b5e:	b3 08                	mov    bl,0x8
    1b60:	9f                   	lahf   
    1b61:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1b67:	06                   	push   es
    1b68:	82                   	(bad)  
    1b69:	06                   	push   es
    1b6a:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1b6b:	84 00                	test   BYTE PTR [eax],al
    1b6d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b70:	06                   	push   es
    1b71:	20 06                	and    BYTE PTR [esi],al
    1b73:	08 ca                	or     dl,cl
    1b75:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1b7b:	01 01                	add    DWORD PTR [ecx],eax
    1b7d:	de 00                	fiadd  WORD PTR [eax]
    1b7f:	00 00                	add    BYTE PTR [eax],al
    1b81:	02 00                	add    al,BYTE PTR [eax]
    1b83:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1b84:	00 00                	add    BYTE PTR [eax],al
    1b86:	00 01                	add    BYTE PTR [ecx],al
    1b88:	01 fb                	add    ebx,edi
    1b8a:	0e                   	push   cs
    1b8b:	0d 00 01 01 01       	or     eax,0x1010100
    1b90:	01 00                	add    DWORD PTR [eax],eax
    1b92:	00 00                	add    BYTE PTR [eax],al
    1b94:	01 00                	add    DWORD PTR [eax],eax
    1b96:	00 01                	add    BYTE PTR [ecx],al
    1b98:	73 72                	jae    1c0c <sysEnter_Vector-0x12e3f4>
    1b9a:	63 00                	arpl   WORD PTR [eax],ax
    1b9c:	2f                   	das    
    1b9d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ba2:	79 6f                	jns    1c13 <sysEnter_Vector-0x12e3ed>
    1ba4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1bab:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1bae:	73 73                	jae    1c23 <sysEnter_Vector-0x12e3dd>
    1bb0:	2f                   	das    
    1bb1:	6c                   	ins    BYTE PTR es:[edi],dx
    1bb2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1bb9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1bbf:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1bc5:	78 2d                	js     1bf4 <sysEnter_Vector-0x12e40c>
    1bc7:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1bc9:	75 2f                	jne    1bfa <sysEnter_Vector-0x12e406>
    1bcb:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1bd0:	2f                   	das    
    1bd1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1bd8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1bdb:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1bdf:	65 00 00             	add    BYTE PTR gs:[eax],al
    1be2:	73 74                	jae    1c58 <sysEnter_Vector-0x12e3a8>
    1be4:	72 72                	jb     1c58 <sysEnter_Vector-0x12e3a8>
    1be6:	65                   	gs
    1be7:	70 6c                	jo     1c55 <sysEnter_Vector-0x12e3ab>
    1be9:	61                   	popa   
    1bea:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1bed:	63 00                	arpl   WORD PTR [eax],ax
    1bef:	01 00                	add    DWORD PTR [eax],eax
    1bf1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1bf4:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1bfb:	63 
    1bfc:	2e                   	cs
    1bfd:	68 00 02 00 00       	push   0x200
    1c02:	73 74                	jae    1c78 <sysEnter_Vector-0x12e388>
    1c04:	64                   	fs
    1c05:	64                   	fs
    1c06:	65                   	gs
    1c07:	66                   	data16
    1c08:	2e                   	cs
    1c09:	68 00 02 00 00       	push   0x200
    1c0e:	6d                   	ins    DWORD PTR es:[edi],dx
    1c0f:	61                   	popa   
    1c10:	6c                   	ins    BYTE PTR es:[edi],dx
    1c11:	6c                   	ins    BYTE PTR es:[edi],dx
    1c12:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c13:	63 2e                	arpl   WORD PTR [esi],bp
    1c15:	68 00 03 00 00       	push   0x300
    1c1a:	6c                   	ins    BYTE PTR es:[edi],dx
    1c1b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1c22:	4f                   	dec    edi
    1c23:	53                   	push   ebx
    1c24:	2e                   	cs
    1c25:	68 00 03 00 00       	push   0x300
    1c2a:	00 00                	add    BYTE PTR [eax],al
    1c2c:	05 02 b8 2d 00       	add    eax,0x2db802
    1c31:	9f                   	lahf   
    1c32:	03 0a                	add    ecx,DWORD PTR [edx]
    1c34:	01 08                	add    DWORD PTR [eax],ecx
    1c36:	2f                   	das    
    1c37:	08 3e                	or     BYTE PTR [esi],bh
    1c39:	08 14 77             	or     BYTE PTR [edi+esi*2],dl
    1c3c:	5a                   	pop    edx
    1c3d:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1c40:	cb                   	retf   
    1c41:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1c44:	2a 13                	sub    dl,BYTE PTR [ebx]
    1c46:	08 3f                	or     BYTE PTR [edi],bh
    1c48:	02 28                	add    ch,BYTE PTR [eax]
    1c4a:	13 03                	adc    eax,DWORD PTR [ebx]
    1c4c:	72 08                	jb     1c56 <sysEnter_Vector-0x12e3aa>
    1c4e:	12 03                	adc    al,BYTE PTR [ebx]
    1c50:	12 08                	adc    cl,BYTE PTR [eax]
    1c52:	c8 08 68 3d          	enter  0x6808,0x3d
    1c56:	77 f3                	ja     1c4b <sysEnter_Vector-0x12e3b5>
    1c58:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1c5e:	01 e9                	add    ecx,ebp
    1c60:	00 00                	add    BYTE PTR [eax],al
    1c62:	00 02                	add    BYTE PTR [edx],al
    1c64:	00 94 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],dl
    1c6b:	fb                   	sti    
    1c6c:	0e                   	push   cs
    1c6d:	0d 00 01 01 01       	or     eax,0x1010100
    1c72:	01 00                	add    DWORD PTR [eax],eax
    1c74:	00 00                	add    BYTE PTR [eax],al
    1c76:	01 00                	add    DWORD PTR [eax],eax
    1c78:	00 01                	add    BYTE PTR [ecx],al
    1c7a:	73 72                	jae    1cee <sysEnter_Vector-0x12e312>
    1c7c:	63 00                	arpl   WORD PTR [eax],ax
    1c7e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1c85:	00 2f                	add    BYTE PTR [edi],ch
    1c87:	68 6f 6d 65 2f       	push   0x2f656d6f
    1c8c:	79 6f                	jns    1cfd <sysEnter_Vector-0x12e303>
    1c8e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1c95:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1c98:	73 73                	jae    1d0d <sysEnter_Vector-0x12e2f3>
    1c9a:	2f                   	das    
    1c9b:	6c                   	ins    BYTE PTR es:[edi],dx
    1c9c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1ca3:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1ca9:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1caf:	78 2d                	js     1cde <sysEnter_Vector-0x12e322>
    1cb1:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1cb3:	75 2f                	jne    1ce4 <sysEnter_Vector-0x12e31c>
    1cb5:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1cba:	2f                   	das    
    1cbb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1cc2:	00 00                	add    BYTE PTR [eax],al
    1cc4:	73 74                	jae    1d3a <sysEnter_Vector-0x12e2c6>
    1cc6:	72 73                	jb     1d3b <sysEnter_Vector-0x12e2c5>
    1cc8:	74 72                	je     1d3c <sysEnter_Vector-0x12e2c4>
    1cca:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1ccd:	01 00                	add    DWORD PTR [eax],eax
    1ccf:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1cd2:	6c                   	ins    BYTE PTR es:[edi],dx
    1cd3:	6c                   	ins    BYTE PTR es:[edi],dx
    1cd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1cd5:	63 2e                	arpl   WORD PTR [esi],bp
    1cd7:	68 00 02 00 00       	push   0x200
    1cdc:	6c                   	ins    BYTE PTR es:[edi],dx
    1cdd:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1ce4:	4f                   	dec    edi
    1ce5:	53                   	push   ebx
    1ce6:	2e                   	cs
    1ce7:	68 00 02 00 00       	push   0x200
    1cec:	73 74                	jae    1d62 <sysEnter_Vector-0x12e29e>
    1cee:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1cf5:	63 
    1cf6:	2e                   	cs
    1cf7:	68 00 03 00 00       	push   0x300
    1cfc:	00 00                	add    BYTE PTR [eax],al
    1cfe:	05 02 24 2f 00       	add    eax,0x2f2402
    1d03:	9f                   	lahf   
    1d04:	03 33                	add    esi,DWORD PTR [ebx]
    1d06:	01 08                	add    DWORD PTR [eax],ecx
    1d08:	27                   	daa    
    1d09:	68 3d 75 5b c9       	push   0xc95b753d
    1d0e:	c9                   	leave  
    1d0f:	5b                   	pop    ebx
    1d10:	3e                   	ds
    1d11:	75 5a                	jne    1d6d <sysEnter_Vector-0x12e293>
    1d13:	c9                   	leave  
    1d14:	59                   	pop    ecx
    1d15:	08 3f                	or     BYTE PTR [edi],bh
    1d17:	2c 23                	sub    al,0x23
    1d19:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1d1c:	1c 00                	sbb    al,0x0
    1d1e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d21:	06                   	push   es
    1d22:	4a                   	dec    edx
    1d23:	06                   	push   es
    1d24:	03 13                	add    edx,DWORD PTR [ebx]
    1d26:	9e                   	sahf   
    1d27:	59                   	pop    ecx
    1d28:	77 ec                	ja     1d16 <sysEnter_Vector-0x12e2ea>
    1d2a:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1d2f:	75 5a                	jne    1d8b <sysEnter_Vector-0x12e275>
    1d31:	08 3f                	or     BYTE PTR [edi],bh
    1d33:	2c 23                	sub    al,0x23
    1d35:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1d38:	1e                   	push   ds
    1d39:	00 02                	add    BYTE PTR [edx],al
    1d3b:	04 01                	add    al,0x1
    1d3d:	06                   	push   es
    1d3e:	4a                   	dec    edx
    1d3f:	06                   	push   es
    1d40:	03 0f                	add    ecx,DWORD PTR [edi]
    1d42:	9e                   	sahf   
    1d43:	59                   	pop    ecx
    1d44:	4d                   	dec    ebp
    1d45:	c9                   	leave  
    1d46:	d7                   	xlat   BYTE PTR ds:[ebx]
    1d47:	02 02                	add    al,BYTE PTR [edx]
    1d49:	00 01                	add    BYTE PTR [ecx],al
    1d4b:	01 43 03             	add    DWORD PTR [ebx+0x3],eax
    1d4e:	00 00                	add    BYTE PTR [eax],al
    1d50:	02 00                	add    al,BYTE PTR [eax]
    1d52:	cc                   	int3   
    1d53:	00 00                	add    BYTE PTR [eax],al
    1d55:	00 01                	add    BYTE PTR [ecx],al
    1d57:	01 fb                	add    ebx,edi
    1d59:	0e                   	push   cs
    1d5a:	0d 00 01 01 01       	or     eax,0x1010100
    1d5f:	01 00                	add    DWORD PTR [eax],eax
    1d61:	00 00                	add    BYTE PTR [eax],al
    1d63:	01 00                	add    DWORD PTR [eax],eax
    1d65:	00 01                	add    BYTE PTR [ecx],al
    1d67:	73 72                	jae    1ddb <sysEnter_Vector-0x12e225>
    1d69:	63 00                	arpl   WORD PTR [eax],ax
    1d6b:	2f                   	das    
    1d6c:	68 6f 6d 65 2f       	push   0x2f656d6f
    1d71:	79 6f                	jns    1de2 <sysEnter_Vector-0x12e21e>
    1d73:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1d7a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1d7d:	73 73                	jae    1df2 <sysEnter_Vector-0x12e20e>
    1d7f:	2f                   	das    
    1d80:	6c                   	ins    BYTE PTR es:[edi],dx
    1d81:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1d88:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1d8e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1d94:	78 2d                	js     1dc3 <sysEnter_Vector-0x12e23d>
    1d96:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1d98:	75 2f                	jne    1dc9 <sysEnter_Vector-0x12e237>
    1d9a:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1d9f:	2f                   	das    
    1da0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1da7:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1daa:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1dae:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1db1:	2e                   	cs
    1db2:	2f                   	das    
    1db3:	2e                   	cs
    1db4:	2e                   	cs
    1db5:	2f                   	das    
    1db6:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1dba:	6a 2f                	push   0x2f
    1dbc:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1dbf:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1dc6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1dc7:	65                   	gs
    1dc8:	6c                   	ins    BYTE PTR es:[edi],dx
    1dc9:	2f                   	das    
    1dca:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1dd1:	00 00                	add    BYTE PTR [eax],al
    1dd3:	74 69                	je     1e3e <sysEnter_Vector-0x12e1c2>
    1dd5:	6d                   	ins    DWORD PTR es:[edi],dx
    1dd6:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1dda:	01 00                	add    DWORD PTR [eax],eax
    1ddc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1ddf:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1de6:	63 
    1de7:	2e                   	cs
    1de8:	68 00 02 00 00       	push   0x200
    1ded:	74 69                	je     1e58 <sysEnter_Vector-0x12e1a8>
    1def:	6d                   	ins    DWORD PTR es:[edi],dx
    1df0:	65                   	gs
    1df1:	2e                   	cs
    1df2:	68 00 03 00 00       	push   0x300
    1df7:	6d                   	ins    DWORD PTR es:[edi],dx
    1df8:	61                   	popa   
    1df9:	6c                   	ins    BYTE PTR es:[edi],dx
    1dfa:	6c                   	ins    BYTE PTR es:[edi],dx
    1dfb:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1dfc:	63 2e                	arpl   WORD PTR [esi],bp
    1dfe:	68 00 03 00 00       	push   0x300
    1e03:	6c                   	ins    BYTE PTR es:[edi],dx
    1e04:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1e0b:	4f                   	dec    edi
    1e0c:	53                   	push   ebx
    1e0d:	2e                   	cs
    1e0e:	68 00 03 00 00       	push   0x300
    1e13:	73 79                	jae    1e8e <sysEnter_Vector-0x12e172>
    1e15:	73 63                	jae    1e7a <sysEnter_Vector-0x12e186>
    1e17:	61                   	popa   
    1e18:	6c                   	ins    BYTE PTR es:[edi],dx
    1e19:	6c                   	ins    BYTE PTR es:[edi],dx
    1e1a:	73 2e                	jae    1e4a <sysEnter_Vector-0x12e1b6>
    1e1c:	68 00 04 00 00       	push   0x400
    1e21:	00 00                	add    BYTE PTR [eax],al
    1e23:	05 02 50 30 00       	add    eax,0x305002
    1e28:	9f                   	lahf   
    1e29:	03 17                	add    edx,DWORD PTR [edi]
    1e2b:	01 08                	add    DWORD PTR [eax],ecx
    1e2d:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1e30:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1e36:	76 02                	jbe    1e3a <sysEnter_Vector-0x12e1c6>
    1e38:	24 13                	and    al,0x13
    1e3a:	08 22                	or     BYTE PTR [edx],ah
    1e3c:	02 2e                	add    ch,BYTE PTR [esi]
    1e3e:	13 02                	adc    eax,DWORD PTR [edx]
    1e40:	2f                   	das    
    1e41:	13 08                	adc    ecx,DWORD PTR [eax]
    1e43:	67 02 2d             	add    ch,BYTE PTR [di]
    1e46:	13 2f                	adc    ebp,DWORD PTR [edi]
    1e48:	00 02                	add    BYTE PTR [edx],al
    1e4a:	04 01                	add    al,0x1
    1e4c:	06                   	push   es
    1e4d:	9e                   	sahf   
    1e4e:	00 02                	add    BYTE PTR [edx],al
    1e50:	04 04                	add    al,0x4
    1e52:	02 23                	add    ah,BYTE PTR [ebx]
    1e54:	12 00                	adc    al,BYTE PTR [eax]
    1e56:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1e5d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e60:	74 00                	je     1e62 <sysEnter_Vector-0x12e19e>
    1e62:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1e65:	58                   	pop    eax
    1e66:	00 02                	add    BYTE PTR [edx],al
    1e68:	04 08                	add    al,0x8
    1e6a:	06                   	push   es
    1e6b:	3d 48 00 02 04       	cmp    eax,0x4020048
    1e70:	01 06                	add    DWORD PTR [esi],eax
    1e72:	9e                   	sahf   
    1e73:	00 02                	add    BYTE PTR [edx],al
    1e75:	04 04                	add    al,0x4
    1e77:	02 23                	add    ah,BYTE PTR [ebx]
    1e79:	12 00                	adc    al,BYTE PTR [eax]
    1e7b:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1e82:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e85:	74 00                	je     1e87 <sysEnter_Vector-0x12e179>
    1e87:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1e8a:	58                   	pop    eax
    1e8b:	06                   	push   es
    1e8c:	94                   	xchg   esp,eax
    1e8d:	e5 91                	in     eax,0x91
    1e8f:	9f                   	lahf   
    1e90:	59                   	pop    ecx
    1e91:	00 02                	add    BYTE PTR [edx],al
    1e93:	04 01                	add    al,0x1
    1e95:	06                   	push   es
    1e96:	9e                   	sahf   
    1e97:	00 02                	add    BYTE PTR [edx],al
    1e99:	04 04                	add    al,0x4
    1e9b:	02 23                	add    ah,BYTE PTR [ebx]
    1e9d:	12 00                	adc    al,BYTE PTR [eax]
    1e9f:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1ea6:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ea9:	74 00                	je     1eab <sysEnter_Vector-0x12e155>
    1eab:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1eae:	58                   	pop    eax
    1eaf:	00 02                	add    BYTE PTR [edx],al
    1eb1:	04 08                	add    al,0x8
    1eb3:	06                   	push   es
    1eb4:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1eba:	01 06                	add    DWORD PTR [esi],eax
    1ebc:	9e                   	sahf   
    1ebd:	00 02                	add    BYTE PTR [edx],al
    1ebf:	04 04                	add    al,0x4
    1ec1:	02 23                	add    ah,BYTE PTR [ebx]
    1ec3:	12 00                	adc    al,BYTE PTR [eax]
    1ec5:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1ecc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ecf:	74 00                	je     1ed1 <sysEnter_Vector-0x12e12f>
    1ed1:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1ed4:	58                   	pop    eax
    1ed5:	06                   	push   es
    1ed6:	08 f6                	or     dh,dh
    1ed8:	d7                   	xlat   BYTE PTR ds:[ebx]
    1ed9:	9f                   	lahf   
    1eda:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    1edf:	08 15 08 75 08 75    	or     BYTE PTR ds:0x75087508,dl
    1ee5:	5b                   	pop    ebx
    1ee6:	f5                   	cmc    
    1ee7:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    1eed:	30 08                	xor    BYTE PTR [eax],cl
    1eef:	44                   	inc    esp
    1ef0:	02 2e                	add    ch,BYTE PTR [esi]
    1ef2:	13 02                	adc    eax,DWORD PTR [edx]
    1ef4:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1ef6:	91                   	xchg   ecx,eax
    1ef7:	c9                   	leave  
    1ef8:	e6 02                	out    0x2,al
    1efa:	2f                   	das    
    1efb:	13 02                	adc    eax,DWORD PTR [edx]
    1efd:	3c 13                	cmp    al,0x13
    1eff:	9f                   	lahf   
    1f00:	e5 e6                	in     eax,0xe6
    1f02:	08 c9                	or     cl,cl
    1f04:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1f07:	9f                   	lahf   
    1f08:	e5 4c                	in     eax,0x4c
    1f0a:	02 29                	add    ch,BYTE PTR [ecx]
    1f0c:	13 02                	adc    eax,DWORD PTR [edx]
    1f0e:	2b 13                	sub    edx,DWORD PTR [ebx]
    1f10:	9f                   	lahf   
    1f11:	e5 e6                	in     eax,0xe6
    1f13:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1f18:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1f1d:	06                   	push   es
    1f1e:	c8 00 02 04          	enter  0x200,0x4
    1f22:	04 02                	add    al,0x2
    1f24:	2c 12                	sub    al,0x12
    1f26:	00 02                	add    BYTE PTR [edx],al
    1f28:	04 05                	add    al,0x5
    1f2a:	02 2f                	add    ch,BYTE PTR [edi]
    1f2c:	12 00                	adc    al,BYTE PTR [eax]
    1f2e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1f31:	74 00                	je     1f33 <sysEnter_Vector-0x12e0cd>
    1f33:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1f36:	58                   	pop    eax
    1f37:	06                   	push   es
    1f38:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1f3e:	04 01                	add    al,0x1
    1f40:	06                   	push   es
    1f41:	c8 00 02 04          	enter  0x200,0x4
    1f45:	04 02                	add    al,0x2
    1f47:	2c 12                	sub    al,0x12
    1f49:	00 02                	add    BYTE PTR [edx],al
    1f4b:	04 05                	add    al,0x5
    1f4d:	02 2f                	add    ch,BYTE PTR [edi]
    1f4f:	12 00                	adc    al,BYTE PTR [eax]
    1f51:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1f54:	74 00                	je     1f56 <sysEnter_Vector-0x12e0aa>
    1f56:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1f59:	58                   	pop    eax
    1f5a:	00 02                	add    BYTE PTR [edx],al
    1f5c:	04 08                	add    al,0x8
    1f5e:	06                   	push   es
    1f5f:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1f65:	00 02                	add    BYTE PTR [edx],al
    1f67:	04 01                	add    al,0x1
    1f69:	06                   	push   es
    1f6a:	c8 00 02 04          	enter  0x200,0x4
    1f6e:	04 02                	add    al,0x2
    1f70:	2c 12                	sub    al,0x12
    1f72:	00 02                	add    BYTE PTR [edx],al
    1f74:	04 05                	add    al,0x5
    1f76:	02 2f                	add    ch,BYTE PTR [edi]
    1f78:	12 00                	adc    al,BYTE PTR [eax]
    1f7a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1f7d:	74 00                	je     1f7f <sysEnter_Vector-0x12e081>
    1f7f:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1f82:	58                   	pop    eax
    1f83:	06                   	push   es
    1f84:	08 f9                	or     cl,bh
    1f86:	bb 75 00 02 04       	mov    ebx,0x4020075
    1f8b:	01 06                	add    DWORD PTR [esi],eax
    1f8d:	08 2e                	or     BYTE PTR [esi],ch
    1f8f:	06                   	push   es
    1f90:	9f                   	lahf   
    1f91:	75 75                	jne    2008 <sysEnter_Vector-0x12dff8>
    1f93:	7b d8                	jnp    1f6d <sysEnter_Vector-0x12e093>
    1f95:	00 02                	add    BYTE PTR [edx],al
    1f97:	04 01                	add    al,0x1
    1f99:	06                   	push   es
    1f9a:	c8 06 75 e5          	enter  0x7506,0xe5
    1f9e:	00 02                	add    BYTE PTR [edx],al
    1fa0:	04 01                	add    al,0x1
    1fa2:	06                   	push   es
    1fa3:	02 22                	add    ah,BYTE PTR [edx]
    1fa5:	12 06                	adc    al,BYTE PTR [esi]
    1fa7:	4b                   	dec    ebx
    1fa8:	00 02                	add    BYTE PTR [edx],al
    1faa:	04 01                	add    al,0x1
    1fac:	06                   	push   es
    1fad:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1fb3:	02 22                	add    ah,BYTE PTR [edx]
    1fb5:	12 00                	adc    al,BYTE PTR [eax]
    1fb7:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1fba:	74 00                	je     1fbc <sysEnter_Vector-0x12e044>
    1fbc:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1fbf:	58                   	pop    eax
    1fc0:	00 02                	add    BYTE PTR [edx],al
    1fc2:	04 06                	add    al,0x6
    1fc4:	06                   	push   es
    1fc5:	59                   	pop    ecx
    1fc6:	00 02                	add    BYTE PTR [edx],al
    1fc8:	04 01                	add    al,0x1
    1fca:	06                   	push   es
    1fcb:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1fce:	00 02                	add    BYTE PTR [edx],al
    1fd0:	04 03                	add    al,0x3
    1fd2:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1fd5:	00 02                	add    BYTE PTR [edx],al
    1fd7:	04 04                	add    al,0x4
    1fd9:	74 00                	je     1fdb <sysEnter_Vector-0x12e025>
    1fdb:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1fde:	58                   	pop    eax
    1fdf:	00 02                	add    BYTE PTR [edx],al
    1fe1:	04 06                	add    al,0x6
    1fe3:	06                   	push   es
    1fe4:	59                   	pop    ecx
    1fe5:	00 02                	add    BYTE PTR [edx],al
    1fe7:	04 01                	add    al,0x1
    1fe9:	06                   	push   es
    1fea:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1fed:	00 02                	add    BYTE PTR [edx],al
    1fef:	04 03                	add    al,0x3
    1ff1:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1ff4:	00 02                	add    BYTE PTR [edx],al
    1ff6:	04 04                	add    al,0x4
    1ff8:	74 00                	je     1ffa <sysEnter_Vector-0x12e006>
    1ffa:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ffd:	58                   	pop    eax
    1ffe:	00 02                	add    BYTE PTR [edx],al
    2000:	04 06                	add    al,0x6
    2002:	06                   	push   es
    2003:	5a                   	pop    edx
    2004:	00 02                	add    BYTE PTR [edx],al
    2006:	04 06                	add    al,0x6
    2008:	c9                   	leave  
    2009:	2f                   	das    
    200a:	00 02                	add    BYTE PTR [edx],al
    200c:	04 01                	add    al,0x1
    200e:	06                   	push   es
    200f:	9e                   	sahf   
    2010:	00 02                	add    BYTE PTR [edx],al
    2012:	04 04                	add    al,0x4
    2014:	02 23                	add    ah,BYTE PTR [ebx]
    2016:	12 00                	adc    al,BYTE PTR [eax]
    2018:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    201f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2022:	74 00                	je     2024 <sysEnter_Vector-0x12dfdc>
    2024:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2027:	58                   	pop    eax
    2028:	00 02                	add    BYTE PTR [edx],al
    202a:	04 08                	add    al,0x8
    202c:	06                   	push   es
    202d:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    2030:	e8 bb 00 02 04       	call   40220f0 <sysEnter_Vector+0x3ef20f0>
    2035:	01 06                	add    DWORD PTR [esi],eax
    2037:	ba 06 4b 68 91       	mov    edx,0x91684b06
    203c:	02 31                	add    dh,BYTE PTR [ecx]
    203e:	14 02                	adc    al,0x2
    2040:	2c 14                	sub    al,0x14
    2042:	00 02                	add    BYTE PTR [edx],al
    2044:	04 01                	add    al,0x1
    2046:	06                   	push   es
    2047:	02 29                	add    ch,BYTE PTR [ecx]
    2049:	12 06                	adc    al,BYTE PTR [esi]
    204b:	4b                   	dec    ebx
    204c:	bd 00 02 04 01       	mov    ebp,0x1040200
    2051:	06                   	push   es
    2052:	ba 00 02 04 03       	mov    edx,0x3040200
    2057:	06                   	push   es
    2058:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    205b:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    205e:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    2065:	77 00                	ja     2067 <sysEnter_Vector-0x12df99>
    2067:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    206a:	06                   	push   es
    206b:	82                   	(bad)  
    206c:	06                   	push   es
    206d:	4b                   	dec    ebx
    206e:	68 00 02 04 01       	push   0x1040200
    2073:	06                   	push   es
    2074:	66 06                	pushw  es
    2076:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    207c:	08 f3                	or     bl,dh
    207e:	67 08 14             	or     BYTE PTR [si],dl
    2081:	00 02                	add    BYTE PTR [edx],al
    2083:	04 01                	add    al,0x1
    2085:	e5 77                	in     eax,0x77
    2087:	08 21                	or     BYTE PTR [ecx],ah
    2089:	08 2f                	or     BYTE PTR [edi],ch
    208b:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    2091:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 74                	jae    84 <sysEnter_Vector-0x12ff7c>
  10:	72 63                	jb     75 <sysEnter_Vector-0x12ff8b>
  12:	68 72 00 2f 68       	push   0x682f0072
  17:	6f                   	outs   dx,DWORD PTR ds:[esi]
  18:	6d                   	ins    DWORD PTR es:[edi],dx
  19:	65                   	gs
  1a:	2f                   	das    
  1b:	79 6f                	jns    8c <sysEnter_Vector-0x12ff74>
  1d:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  24:	6f                   	outs   dx,DWORD PTR ds:[esi]
  25:	73 2f                	jae    56 <sysEnter_Vector-0x12ffaa>
  27:	61                   	popa   
  28:	70 72                	jo     9c <sysEnter_Vector-0x12ff64>
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	6a 2f                	push   0x2f
  2d:	6c                   	ins    BYTE PTR es:[edi],dx
  2e:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  35:	4f                   	dec    edi
  36:	53                   	push   ebx
  37:	00 70 72             	add    BYTE PTR [eax+0x72],dh
  3a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  3b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  3e:	73 45                	jae    85 <sysEnter_Vector-0x12ff7b>
  40:	6e                   	outs   dx,BYTE PTR ds:[esi]
  41:	76 70                	jbe    b3 <sysEnter_Vector-0x12ff4d>
  43:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  47:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  4b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  4c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  50:	73 69                	jae    bb <sysEnter_Vector-0x12ff45>
  52:	67 6e                	outs   dx,BYTE PTR ds:[si]
  54:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  59:	74 00                	je     5b <sysEnter_Vector-0x12ffa5>
  5b:	68 65 61 70 42       	push   0x42706165
  60:	61                   	popa   
  61:	73 65                	jae    c8 <sysEnter_Vector-0x12ff38>
  63:	00 68 65             	add    BYTE PTR [eax+0x65],ch
  66:	61                   	popa   
  67:	70 45                	jo     ae <sysEnter_Vector-0x12ff52>
  69:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6a:	64 00 75 6e          	add    BYTE PTR fs:[ebp+0x6e],dh
  6e:	73 69                	jae    d9 <sysEnter_Vector-0x12ff27>
  70:	67 6e                	outs   dx,BYTE PTR ds:[si]
  72:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  77:	61                   	popa   
  78:	72 00                	jb     7a <sysEnter_Vector-0x12ff86>
  7a:	75 69                	jne    e5 <sysEnter_Vector-0x12ff1b>
  7c:	6e                   	outs   dx,BYTE PTR ds:[esi]
  7d:	74 33                	je     b2 <sysEnter_Vector-0x12ff4e>
  7f:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  82:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
  85:	55                   	push   ebp
  86:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  89:	31 20                	xor    DWORD PTR [eax],esp
  8b:	35 2e 33 2e 30       	xor    eax,0x302e332e
  90:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
  96:	3d 69 6e 74 65       	cmp    eax,0x65746e69
  9b:	6c                   	ins    BYTE PTR es:[edi],dx
  9c:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
  a2:	65                   	gs
  a3:	3d 67 65 6e 65       	cmp    eax,0x656e6567
  a8:	72 69                	jb     113 <sysEnter_Vector-0x12feed>
  aa:	63 20                	arpl   WORD PTR [eax],sp
  ac:	2d 6d 61 72 63       	sub    eax,0x6372616d
  b1:	68 3d 70 65 6e       	push   0x6e65703d
  b6:	74 69                	je     121 <sysEnter_Vector-0x12fedf>
  b8:	75 6d                	jne    127 <sysEnter_Vector-0x12fed9>
  ba:	70 72                	jo     12e <sysEnter_Vector-0x12fed2>
  bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
  bd:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
  c3:	66                   	data16
  c4:	72 65                	jb     12b <sysEnter_Vector-0x12fed5>
  c6:	65                   	gs
  c7:	73 74                	jae    13d <sysEnter_Vector-0x12fec3>
  c9:	61                   	popa   
  ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
  cb:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
  d2:	76 
  d3:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
  da:	74 79                	je     155 <sysEnter_Vector-0x12feab>
  dc:	3d 68 69 64 64       	cmp    eax,0x64646968
  e1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
  e3:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
  e9:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ee:	6c                   	ins    BYTE PTR es:[edi],dx
  ef:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
  f3:	72 74                	jb     169 <sysEnter_Vector-0x12fe97>
  f5:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  f8:	73 69                	jae    163 <sysEnter_Vector-0x12fe9d>
  fa:	67 6e                	outs   dx,BYTE PTR ds:[si]
  fc:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
 101:	74 00                	je     103 <sysEnter_Vector-0x12fefd>
 103:	73 74                	jae    179 <sysEnter_Vector-0x12fe87>
 105:	72 63                	jb     16a <sysEnter_Vector-0x12fe96>
 107:	68 72 49 00 68       	push   0x68004972
 10c:	65                   	gs
 10d:	61                   	popa   
 10e:	70 43                	jo     153 <sysEnter_Vector-0x12fead>
 110:	75 72                	jne    184 <sysEnter_Vector-0x12fe7c>
 112:	72 00                	jb     114 <sysEnter_Vector-0x12feec>
 114:	2e                   	cs
 115:	2e                   	cs
 116:	2f                   	das    
 117:	2e                   	cs
 118:	2e                   	cs
 119:	2f                   	das    
 11a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 11e:	6a 2f                	push   0x2f
 120:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 123:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 12a:	63 2f                	arpl   WORD PTR [edi],bp
 12c:	73 74                	jae    1a2 <sysEnter_Vector-0x12fe5e>
 12e:	72 69                	jb     199 <sysEnter_Vector-0x12fe67>
 130:	6e                   	outs   dx,BYTE PTR ds:[esi]
 131:	67 73 2f             	addr16 jae 163 <sysEnter_Vector-0x12fe9d>
 134:	73 74                	jae    1aa <sysEnter_Vector-0x12fe56>
 136:	72 63                	jb     19b <sysEnter_Vector-0x12fe65>
 138:	68 72 2e 63 00       	push   0x632e72
 13d:	6c                   	ins    BYTE PTR es:[edi],dx
 13e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 13f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 140:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
 144:	75 62                	jne    1a8 <sysEnter_Vector-0x12fe58>
 146:	6c                   	ins    BYTE PTR es:[edi],dx
 147:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
 14b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 14c:	72 74                	jb     1c2 <sysEnter_Vector-0x12fe3e>
 14e:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
 151:	74 00                	je     153 <sysEnter_Vector-0x12fead>
 153:	6c                   	ins    BYTE PTR es:[edi],dx
 154:	69 62 63 54 5a 00 73 	imul   esp,DWORD PTR [edx+0x63],0x73005a54
 15b:	69 7a 65 74 79 70 65 	imul   edi,DWORD PTR [edx+0x65],0x65707974
 162:	00 2e                	add    BYTE PTR [esi],ch
 164:	2e                   	cs
 165:	2f                   	das    
 166:	2e                   	cs
 167:	2e                   	cs
 168:	2f                   	das    
 169:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 16d:	6a 2f                	push   0x2f
 16f:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 172:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 179:	63 2f                	arpl   WORD PTR [edi],bp
 17b:	73 74                	jae    1f1 <sysEnter_Vector-0x12fe0f>
 17d:	72 69                	jb     1e8 <sysEnter_Vector-0x12fe18>
 17f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 180:	67 73 2f             	addr16 jae 1b2 <sysEnter_Vector-0x12fe4e>
 183:	73 74                	jae    1f9 <sysEnter_Vector-0x12fe07>
 185:	72 63                	jb     1ea <sysEnter_Vector-0x12fe16>
 187:	73 70                	jae    1f9 <sysEnter_Vector-0x12fe07>
 189:	6e                   	outs   dx,BYTE PTR ds:[esi]
 18a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 18d:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 190:	72 73                	jb     205 <sysEnter_Vector-0x12fdfb>
 192:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	49                   	dec    ecx
 19b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19e:	72 63                	jb     203 <sysEnter_Vector-0x12fdfd>
 1a0:	73 70                	jae    212 <sysEnter_Vector-0x12fdee>
 1a2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a3:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1a7:	74 73                	je     21c <sysEnter_Vector-0x12fde4>
 1a9:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1ad:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1b4:	2e                   	cs
 1b5:	2f                   	das    
 1b6:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1ba:	6a 2f                	push   0x2f
 1bc:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1bf:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c6:	63 2f                	arpl   WORD PTR [edi],bp
 1c8:	73 74                	jae    23e <sysEnter_Vector-0x12fdc2>
 1ca:	72 69                	jb     235 <sysEnter_Vector-0x12fdcb>
 1cc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1cd:	67 73 2f             	addr16 jae 1ff <sysEnter_Vector-0x12fe01>
 1d0:	73 74                	jae    246 <sysEnter_Vector-0x12fdba>
 1d2:	72 74                	jb     248 <sysEnter_Vector-0x12fdb8>
 1d4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1d5:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 1e1:	72 63                	jb     246 <sysEnter_Vector-0x12fdba>
 1e3:	2f                   	das    
 1e4:	61                   	popa   
 1e5:	73 63                	jae    24a <sysEnter_Vector-0x12fdb6>
 1e7:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1ee:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1ef:	61                   	popa   
 1f0:	49                   	dec    ecx
 1f1:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 1f9:	76 65                	jbe    260 <sysEnter_Vector-0x12fda0>
 1fb:	72 73                	jb     270 <sysEnter_Vector-0x12fd90>
 1fd:	65                   	gs
 1fe:	49                   	dec    ecx
 1ff:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 202:	67 6e                	outs   dx,BYTE PTR ds:[si]
 204:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 207:	63 2f                	arpl   WORD PTR [edi],bp
 209:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 20c:	73 6f                	jae    27d <sysEnter_Vector-0x12fd83>
 20e:	6c                   	ins    BYTE PTR es:[edi],dx
 20f:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 213:	6d                   	ins    DWORD PTR es:[edi],dx
 214:	6f                   	outs   dx,DWORD PTR ds:[esi]
 215:	76 65                	jbe    27c <sysEnter_Vector-0x12fd84>
 217:	54                   	push   esp
 218:	6f                   	outs   dx,DWORD PTR ds:[esi]
 219:	58                   	pop    eax
 21a:	59                   	pop    ecx
 21b:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
 21e:	76 65                	jbe    285 <sysEnter_Vector-0x12fd7b>
 220:	43                   	inc    ebx
 221:	75 72                	jne    295 <sysEnter_Vector-0x12fd6b>
 223:	73 6f                	jae    294 <sysEnter_Vector-0x12fd6c>
 225:	72 50                	jb     277 <sysEnter_Vector-0x12fd89>
 227:	6f                   	outs   dx,DWORD PTR ds:[esi]
 228:	73 69                	jae    293 <sysEnter_Vector-0x12fd6d>
 22a:	74 69                	je     295 <sysEnter_Vector-0x12fd6b>
 22c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 22d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 231:	73 74                	jae    2a7 <sysEnter_Vector-0x12fd59>
 233:	6f                   	outs   dx,DWORD PTR ds:[esi]
 234:	72 65                	jb     29b <sysEnter_Vector-0x12fd65>
 236:	43                   	inc    ebx
 237:	75 72                	jne    2ab <sysEnter_Vector-0x12fd55>
 239:	73 6f                	jae    2aa <sysEnter_Vector-0x12fd56>
 23b:	72 50                	jb     28d <sysEnter_Vector-0x12fd73>
 23d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 23e:	73 69                	jae    2a9 <sysEnter_Vector-0x12fd57>
 240:	74 69                	je     2ab <sysEnter_Vector-0x12fd55>
 242:	6f                   	outs   dx,DWORD PTR ds:[esi]
 243:	6e                   	outs   dx,BYTE PTR ds:[esi]
 244:	00 78 73             	add    BYTE PTR [eax+0x73],bh
 247:	74 72                	je     2bb <sysEnter_Vector-0x12fd45>
 249:	00 61 6e             	add    BYTE PTR [ecx+0x6e],ah
 24c:	73 69                	jae    2b7 <sysEnter_Vector-0x12fd49>
 24e:	45                   	inc    ebp
 24f:	73 63                	jae    2b4 <sysEnter_Vector-0x12fd4c>
 251:	53                   	push   ebx
 252:	65                   	gs
 253:	71 00                	jno    255 <sysEnter_Vector-0x12fdab>
 255:	79 73                	jns    2ca <sysEnter_Vector-0x12fd36>
 257:	74 72                	je     2cb <sysEnter_Vector-0x12fd35>
 259:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 25d:	74 50                	je     2af <sysEnter_Vector-0x12fd51>
 25f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 260:	70 75                	jo     2d7 <sysEnter_Vector-0x12fd29>
 262:	6c                   	ins    BYTE PTR es:[edi],dx
 263:	61                   	popa   
 264:	74 65                	je     2cb <sysEnter_Vector-0x12fd35>
 266:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 26a:	74 65                	je     2d1 <sysEnter_Vector-0x12fd2f>
 26c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 26d:	76 00                	jbe    26f <sysEnter_Vector-0x12fd91>
 26f:	67                   	addr16
 270:	65                   	gs
 271:	74 65                	je     2d8 <sysEnter_Vector-0x12fd28>
 273:	6e                   	outs   dx,BYTE PTR ds:[esi]
 274:	76 00                	jbe    276 <sysEnter_Vector-0x12fd8a>
 276:	73 72                	jae    2ea <sysEnter_Vector-0x12fd16>
 278:	63 2f                	arpl   WORD PTR [edi],bp
 27a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 27c:	76 69                	jbe    2e7 <sysEnter_Vector-0x12fd19>
 27e:	72 6f                	jb     2ef <sysEnter_Vector-0x12fd11>
 280:	6e                   	outs   dx,BYTE PTR ds:[esi]
 281:	6d                   	ins    DWORD PTR es:[edi],dx
 282:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 284:	74 2e                	je     2b4 <sysEnter_Vector-0x12fd4c>
 286:	63 00                	arpl   WORD PTR [eax],ax
 288:	76 61                	jbe    2eb <sysEnter_Vector-0x12fd15>
 28a:	72 6e                	jb     2fa <sysEnter_Vector-0x12fd06>
 28c:	61                   	popa   
 28d:	6d                   	ins    DWORD PTR es:[edi],dx
 28e:	65 00 76 61          	add    BYTE PTR gs:[esi+0x61],dh
 292:	6c                   	ins    BYTE PTR es:[edi],dx
 293:	75 65                	jne    2fa <sysEnter_Vector-0x12fd06>
 295:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 298:	53                   	push   ebx
 299:	43                   	inc    ebx
 29a:	41                   	inc    ecx
 29b:	4c                   	dec    esp
 29c:	4c                   	dec    esp
 29d:	5f                   	pop    edi
 29e:	57                   	push   edi
 29f:	41                   	inc    ecx
 2a0:	49                   	dec    ecx
 2a1:	54                   	push   esp
 2a2:	46                   	inc    esi
 2a3:	4f                   	dec    edi
 2a4:	52                   	push   edx
 2a5:	50                   	push   eax
 2a6:	49                   	dec    ecx
 2a7:	44                   	inc    esp
 2a8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2ab:	53                   	push   ebx
 2ac:	43                   	inc    ebx
 2ad:	41                   	inc    ecx
 2ae:	4c                   	dec    esp
 2af:	4c                   	dec    esp
 2b0:	5f                   	pop    edi
 2b1:	47                   	inc    edi
 2b2:	45                   	inc    ebp
 2b3:	54                   	push   esp
 2b4:	54                   	push   esp
 2b5:	49                   	dec    ecx
 2b6:	43                   	inc    ebx
 2b7:	4b                   	dec    ebx
 2b8:	53                   	push   ebx
 2b9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bc:	53                   	push   ebx
 2bd:	43                   	inc    ebx
 2be:	41                   	inc    ecx
 2bf:	4c                   	dec    esp
 2c0:	4c                   	dec    esp
 2c1:	5f                   	pop    edi
 2c2:	53                   	push   ebx
 2c3:	4c                   	dec    esp
 2c4:	45                   	inc    ebp
 2c5:	45                   	inc    ebp
 2c6:	50                   	push   eax
 2c7:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
 2ca:	6f                   	outs   dx,DWORD PTR ds:[esi]
 2cb:	73 65                	jae    332 <sysEnter_Vector-0x12fcce>
 2cd:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d0:	53                   	push   ebx
 2d1:	43                   	inc    ebx
 2d2:	41                   	inc    ecx
 2d3:	4c                   	dec    esp
 2d4:	4c                   	dec    esp
 2d5:	5f                   	pop    edi
 2d6:	4f                   	dec    edi
 2d7:	50                   	push   eax
 2d8:	45                   	inc    ebp
 2d9:	4e                   	dec    esi
 2da:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2dd:	53                   	push   ebx
 2de:	43                   	inc    ebx
 2df:	41                   	inc    ecx
 2e0:	4c                   	dec    esp
 2e1:	4c                   	dec    esp
 2e2:	5f                   	pop    edi
 2e3:	47                   	inc    edi
 2e4:	45                   	inc    ebp
 2e5:	54                   	push   esp
 2e6:	54                   	push   esp
 2e7:	49                   	dec    ecx
 2e8:	4d                   	dec    ebp
 2e9:	45                   	inc    ebp
 2ea:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2ed:	53                   	push   ebx
 2ee:	43                   	inc    ebx
 2ef:	41                   	inc    ecx
 2f0:	4c                   	dec    esp
 2f1:	4c                   	dec    esp
 2f2:	5f                   	pop    edi
 2f3:	57                   	push   edi
 2f4:	52                   	push   edx
 2f5:	49                   	dec    ecx
 2f6:	54                   	push   esp
 2f7:	45                   	inc    ebp
 2f8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2fb:	53                   	push   ebx
 2fc:	43                   	inc    ebx
 2fd:	41                   	inc    ecx
 2fe:	4c                   	dec    esp
 2ff:	4c                   	dec    esp
 300:	5f                   	pop    edi
 301:	52                   	push   edx
 302:	45                   	inc    ebp
 303:	41                   	inc    ecx
 304:	44                   	inc    esp
 305:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 308:	53                   	push   ebx
 309:	43                   	inc    ebx
 30a:	41                   	inc    ecx
 30b:	4c                   	dec    esp
 30c:	4c                   	dec    esp
 30d:	5f                   	pop    edi
 30e:	53                   	push   ebx
 30f:	54                   	push   esp
 310:	4f                   	dec    edi
 311:	50                   	push   eax
 312:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 315:	53                   	push   ebx
 316:	43                   	inc    ebx
 317:	41                   	inc    ecx
 318:	4c                   	dec    esp
 319:	4c                   	dec    esp
 31a:	5f                   	pop    edi
 31b:	53                   	push   ebx
 31c:	45                   	inc    ebp
 31d:	54                   	push   esp
 31e:	53                   	push   ebx
 31f:	49                   	dec    ecx
 320:	47                   	inc    edi
 321:	41                   	inc    ecx
 322:	43                   	inc    ebx
 323:	54                   	push   esp
 324:	49                   	dec    ecx
 325:	4f                   	dec    edi
 326:	4e                   	dec    esi
 327:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 32a:	53                   	push   ebx
 32b:	43                   	inc    ebx
 32c:	41                   	inc    ecx
 32d:	4c                   	dec    esp
 32e:	4c                   	dec    esp
 32f:	5f                   	pop    edi
 330:	4d                   	dec    ebp
 331:	4d                   	dec    ebp
 332:	41                   	inc    ecx
 333:	50                   	push   eax
 334:	00 70 6f             	add    BYTE PTR [eax+0x6f],dh
 337:	73 69                	jae    3a2 <sysEnter_Vector-0x12fc5e>
 339:	74 69                	je     3a4 <sysEnter_Vector-0x12fc5c>
 33b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 33c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 33d:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 340:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
 347:	65 
 348:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
 34b:	68 65 6e 63 65       	push   0x65636e65
 350:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 353:	53                   	push   ebx
 354:	43                   	inc    ebx
 355:	41                   	inc    ecx
 356:	4c                   	dec    esp
 357:	4c                   	dec    esp
 358:	5f                   	pop    edi
 359:	49                   	dec    ecx
 35a:	4e                   	dec    esi
 35b:	56                   	push   esi
 35c:	41                   	inc    ecx
 35d:	4c                   	dec    esp
 35e:	49                   	dec    ecx
 35f:	44                   	inc    esp
 360:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 363:	53                   	push   ebx
 364:	43                   	inc    ebx
 365:	41                   	inc    ecx
 366:	4c                   	dec    esp
 367:	4c                   	dec    esp
 368:	5f                   	pop    edi
 369:	4d                   	dec    ebp
 36a:	41                   	inc    ecx
 36b:	53                   	push   ebx
 36c:	4b                   	dec    ebx
 36d:	53                   	push   ebx
 36e:	49                   	dec    ecx
 36f:	47                   	inc    edi
 370:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 373:	53                   	push   ebx
 374:	43                   	inc    ebx
 375:	41                   	inc    ecx
 376:	4c                   	dec    esp
 377:	4c                   	dec    esp
 378:	5f                   	pop    edi
 379:	52                   	push   edx
 37a:	45                   	inc    ebp
 37b:	47                   	inc    edi
 37c:	45                   	inc    ebp
 37d:	58                   	pop    eax
 37e:	49                   	dec    ecx
 37f:	54                   	push   esp
 380:	48                   	dec    eax
 381:	41                   	inc    ecx
 382:	4e                   	dec    esi
 383:	44                   	inc    esp
 384:	4c                   	dec    esp
 385:	45                   	inc    ebp
 386:	52                   	push   edx
 387:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 38a:	53                   	push   ebx
 38b:	43                   	inc    ebx
 38c:	41                   	inc    ecx
 38d:	4c                   	dec    esp
 38e:	4c                   	dec    esp
 38f:	5f                   	pop    edi
 390:	48                   	dec    eax
 391:	4c                   	dec    esp
 392:	54                   	push   esp
 393:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 396:	79 73                	jns    40b <sysEnter_Vector-0x12fbf5>
 398:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 39b:	6c                   	ins    BYTE PTR es:[edi],dx
 39c:	73 00                	jae    39e <sysEnter_Vector-0x12fc62>
 39e:	77 72                	ja     412 <sysEnter_Vector-0x12fbee>
 3a0:	69 74 65 00 6f 70 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6e65706f
 3a7:	6e 
 3a8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3ab:	53                   	push   ebx
 3ac:	43                   	inc    ebx
 3ad:	41                   	inc    ecx
 3ae:	4c                   	dec    esp
 3af:	4c                   	dec    esp
 3b0:	5f                   	pop    edi
 3b1:	53                   	push   ebx
 3b2:	45                   	inc    ebp
 3b3:	54                   	push   esp
 3b4:	50                   	push   eax
 3b5:	52                   	push   edx
 3b6:	49                   	dec    ecx
 3b7:	4f                   	dec    edi
 3b8:	52                   	push   edx
 3b9:	49                   	dec    ecx
 3ba:	54                   	push   esp
 3bb:	59                   	pop    ecx
 3bc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3bf:	53                   	push   ebx
 3c0:	43                   	inc    ebx
 3c1:	41                   	inc    ecx
 3c2:	4c                   	dec    esp
 3c3:	4c                   	dec    esp
 3c4:	5f                   	pop    edi
 3c5:	47                   	inc    edi
 3c6:	45                   	inc    ebp
 3c7:	54                   	push   esp
 3c8:	44                   	inc    esp
 3c9:	45                   	inc    ebp
 3ca:	4e                   	dec    esi
 3cb:	54                   	push   esp
 3cc:	53                   	push   ebx
 3cd:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3d0:	53                   	push   ebx
 3d1:	43                   	inc    ebx
 3d2:	41                   	inc    ecx
 3d3:	4c                   	dec    esp
 3d4:	4c                   	dec    esp
 3d5:	5f                   	pop    edi
 3d6:	53                   	push   ebx
 3d7:	45                   	inc    ebp
 3d8:	45                   	inc    ebp
 3d9:	4b                   	dec    ebx
 3da:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3dd:	53                   	push   ebx
 3de:	43                   	inc    ebx
 3df:	41                   	inc    ecx
 3e0:	4c                   	dec    esp
 3e1:	4c                   	dec    esp
 3e2:	5f                   	pop    edi
 3e3:	50                   	push   eax
 3e4:	49                   	dec    ecx
 3e5:	50                   	push   eax
 3e6:	45                   	inc    ebp
 3e7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3ea:	53                   	push   ebx
 3eb:	43                   	inc    ebx
 3ec:	41                   	inc    ecx
 3ed:	4c                   	dec    esp
 3ee:	4c                   	dec    esp
 3ef:	5f                   	pop    edi
 3f0:	47                   	inc    edi
 3f1:	45                   	inc    ebp
 3f2:	54                   	push   esp
 3f3:	43                   	inc    ebx
 3f4:	57                   	push   edi
 3f5:	44                   	inc    esp
 3f6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f9:	53                   	push   ebx
 3fa:	43                   	inc    ebx
 3fb:	41                   	inc    ecx
 3fc:	4c                   	dec    esp
 3fd:	4c                   	dec    esp
 3fe:	5f                   	pop    edi
 3ff:	50                   	push   eax
 400:	52                   	push   edx
 401:	49                   	dec    ecx
 402:	4e                   	dec    esi
 403:	54                   	push   esp
 404:	44                   	inc    esp
 405:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 408:	53                   	push   ebx
 409:	43                   	inc    ebx
 40a:	41                   	inc    ecx
 40b:	4c                   	dec    esp
 40c:	4c                   	dec    esp
 40d:	5f                   	pop    edi
 40e:	46                   	inc    esi
 40f:	52                   	push   edx
 410:	45                   	inc    ebp
 411:	45                   	inc    ebp
 412:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 415:	53                   	push   ebx
 416:	43                   	inc    ebx
 417:	41                   	inc    ecx
 418:	4c                   	dec    esp
 419:	4c                   	dec    esp
 41a:	5f                   	pop    edi
 41b:	45                   	inc    ebp
 41c:	58                   	pop    eax
 41d:	45                   	inc    ebp
 41e:	43                   	inc    ebx
 41f:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 422:	66                   	data16
 423:	6c                   	ins    BYTE PTR es:[edi],dx
 424:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 426:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 429:	53                   	push   ebx
 42a:	43                   	inc    ebx
 42b:	41                   	inc    ecx
 42c:	4c                   	dec    esp
 42d:	4c                   	dec    esp
 42e:	5f                   	pop    edi
 42f:	45                   	inc    ebp
 430:	58                   	pop    eax
 431:	45                   	inc    ebp
 432:	43                   	inc    ebx
 433:	4e                   	dec    esi
 434:	45                   	inc    ebp
 435:	57                   	push   edi
 436:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 439:	53                   	push   ebx
 43a:	43                   	inc    ebx
 43b:	41                   	inc    ecx
 43c:	4c                   	dec    esp
 43d:	4c                   	dec    esp
 43e:	5f                   	pop    edi
 43f:	41                   	inc    ecx
 440:	4c                   	dec    esp
 441:	4c                   	dec    esp
 442:	4f                   	dec    edi
 443:	43                   	inc    ebx
 444:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
 448:	67 74 68             	addr16 je 4b3 <sysEnter_Vector-0x12fb4d>
 44b:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 44e:	61                   	popa   
 44f:	64 00 62 75          	add    BYTE PTR fs:[edx+0x75],ah
 453:	66                   	data16
 454:	66                   	data16
 455:	65                   	gs
 456:	72 00                	jb     458 <sysEnter_Vector-0x12fba8>
 458:	73 72                	jae    4cc <sysEnter_Vector-0x12fb34>
 45a:	63 2f                	arpl   WORD PTR [edi],bp
 45c:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 463:	53                   	push   ebx
 464:	59                   	pop    ecx
 465:	53                   	push   ebx
 466:	43                   	inc    ebx
 467:	41                   	inc    ecx
 468:	4c                   	dec    esp
 469:	4c                   	dec    esp
 46a:	5f                   	pop    edi
 46b:	46                   	inc    esi
 46c:	4f                   	dec    edi
 46d:	52                   	push   edx
 46e:	4b                   	dec    ebx
 46f:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 472:	6e                   	outs   dx,BYTE PTR ds:[esi]
 473:	64                   	fs
 474:	6c                   	ins    BYTE PTR es:[edi],dx
 475:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 479:	53                   	push   ebx
 47a:	43                   	inc    ebx
 47b:	41                   	inc    ecx
 47c:	4c                   	dec    esp
 47d:	4c                   	dec    esp
 47e:	5f                   	pop    edi
 47f:	50                   	push   eax
 480:	52                   	push   edx
 481:	49                   	dec    ecx
 482:	4e                   	dec    esi
 483:	54                   	push   esp
 484:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 487:	53                   	push   ebx
 488:	43                   	inc    ebx
 489:	41                   	inc    ecx
 48a:	4c                   	dec    esp
 48b:	4c                   	dec    esp
 48c:	5f                   	pop    edi
 48d:	43                   	inc    ebx
 48e:	4c                   	dec    esp
 48f:	4f                   	dec    edi
 490:	53                   	push   ebx
 491:	45                   	inc    ebp
 492:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 495:	53                   	push   ebx
 496:	43                   	inc    ebx
 497:	41                   	inc    ecx
 498:	4c                   	dec    esp
 499:	4c                   	dec    esp
 49a:	5f                   	pop    edi
 49b:	45                   	inc    ebp
 49c:	4e                   	dec    esi
 49d:	44                   	inc    esp
 49e:	50                   	push   eax
 49f:	52                   	push   edx
 4a0:	4f                   	dec    edi
 4a1:	43                   	inc    ebx
 4a2:	45                   	inc    ebp
 4a3:	53                   	push   ebx
 4a4:	53                   	push   ebx
 4a5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4a8:	53                   	push   ebx
 4a9:	43                   	inc    ebx
 4aa:	41                   	inc    ecx
 4ab:	4c                   	dec    esp
 4ac:	4c                   	dec    esp
 4ad:	5f                   	pop    edi
 4ae:	52                   	push   edx
 4af:	45                   	inc    ebp
 4b0:	42                   	inc    edx
 4b1:	4f                   	dec    edi
 4b2:	4f                   	dec    edi
 4b3:	54                   	push   esp
 4b4:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 4b7:	74 64                	je     51d <sysEnter_Vector-0x12fae3>
 4b9:	69 72 00 73 72 63 2f 	imul   esi,DWORD PTR [edx+0x0],0x2f637273
 4c0:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 4c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4c8:	70 75                	jo     53f <sysEnter_Vector-0x12fac1>
 4ca:	74 2e                	je     4fa <sysEnter_Vector-0x12fb06>
 4cc:	63 00                	arpl   WORD PTR [eax],ax
 4ce:	73 74                	jae    544 <sysEnter_Vector-0x12fabc>
 4d0:	72 65                	jb     537 <sysEnter_Vector-0x12fac9>
 4d2:	61                   	popa   
 4d3:	6d                   	ins    DWORD PTR es:[edi],dx
 4d4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 4d7:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 4da:	72 00                	jb     4dc <sysEnter_Vector-0x12fb24>
 4dc:	67                   	addr16
 4dd:	65                   	gs
 4de:	74 73                	je     553 <sysEnter_Vector-0x12faad>
 4e0:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 4e3:	78 6c                	js     551 <sysEnter_Vector-0x12faaf>
 4e5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 4e7:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 4ea:	74 73                	je     55f <sysEnter_Vector-0x12faa1>
 4ec:	45                   	inc    ebp
 4ed:	72 72                	jb     561 <sysEnter_Vector-0x12fa9f>
 4ef:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4f0:	72 00                	jb     4f2 <sysEnter_Vector-0x12fb0e>
 4f2:	70 75                	jo     569 <sysEnter_Vector-0x12fa97>
 4f4:	74 63                	je     559 <sysEnter_Vector-0x12faa7>
 4f6:	00 6c 62 75          	add    BYTE PTR [edx+eiz*2+0x75],ch
 4fa:	66                   	data16
 4fb:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 4fe:	74 73                	je     573 <sysEnter_Vector-0x12fa8d>
 500:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 503:	74 63                	je     568 <sysEnter_Vector-0x12fa98>
 505:	68 61 72 00 72       	push   0x72007261
 50a:	65                   	gs
 50b:	74 56                	je     563 <sysEnter_Vector-0x12fa9d>
 50d:	61                   	popa   
 50e:	6c                   	ins    BYTE PTR es:[edi],dx
 50f:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 512:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 519:	74 53                	je     56e <sysEnter_Vector-0x12fa92>
 51b:	70 61                	jo     57e <sysEnter_Vector-0x12fa82>
 51d:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 520:	74 72                	je     594 <sysEnter_Vector-0x12fa6c>
 522:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 525:	7a 65                	jp     58c <sysEnter_Vector-0x12fa74>
 527:	5f                   	pop    edi
 528:	74 00                	je     52a <sysEnter_Vector-0x12fad6>
 52a:	75 69                	jne    595 <sysEnter_Vector-0x12fa6b>
 52c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 52d:	74 70                	je     59f <sysEnter_Vector-0x12fa61>
 52f:	74 72                	je     5a3 <sysEnter_Vector-0x12fa5d>
 531:	5f                   	pop    edi
 532:	74 00                	je     534 <sysEnter_Vector-0x12facc>
 534:	73 69                	jae    59f <sysEnter_Vector-0x12fa61>
 536:	67 44                	addr16 inc esp
 538:	61                   	popa   
 539:	74 61                	je     59c <sysEnter_Vector-0x12fa64>
 53b:	00 71 75             	add    BYTE PTR [ecx+0x75],dh
 53e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 53f:	74 65                	je     5a6 <sysEnter_Vector-0x12fa5a>
 541:	50                   	push   eax
 542:	74 72                	je     5b6 <sysEnter_Vector-0x12fa4a>
 544:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 547:	67 76 50             	addr16 jbe 59a <sysEnter_Vector-0x12fa66>
 54a:	74 72                	je     5be <sysEnter_Vector-0x12fa42>
 54c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 54f:	61                   	popa   
 550:	72 74                	jb     5c6 <sysEnter_Vector-0x12fa3a>
 552:	5f                   	pop    edi
 553:	6f                   	outs   dx,DWORD PTR ds:[esi]
 554:	66 5f                	pop    di
 556:	77 6f                	ja     5c7 <sysEnter_Vector-0x12fa39>
 558:	72 64                	jb     5be <sysEnter_Vector-0x12fa42>
 55a:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 55d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 55e:	67 72 61             	addr16 jb 5c2 <sysEnter_Vector-0x12fa3e>
 561:	6d                   	ins    DWORD PTR es:[edi],dx
 562:	00 74 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],dh
 566:	74 00                	je     568 <sysEnter_Vector-0x12fa98>
 568:	6c                   	ins    BYTE PTR es:[edi],dx
 569:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
 570:	74 00                	je     572 <sysEnter_Vector-0x12fa8e>
 572:	73 74                	jae    5e8 <sysEnter_Vector-0x12fa18>
 574:	61                   	popa   
 575:	74 65                	je     5dc <sysEnter_Vector-0x12fa24>
 577:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 57a:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 57d:	6c                   	ins    BYTE PTR es:[edi],dx
 57e:	74 69                	je     5e9 <sysEnter_Vector-0x12fa17>
 580:	6e                   	outs   dx,BYTE PTR ds:[esi]
 581:	5f                   	pop    edi
 582:	76 61                	jbe    5e5 <sysEnter_Vector-0x12fa1b>
 584:	5f                   	pop    edi
 585:	6c                   	ins    BYTE PTR es:[edi],dx
 586:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 58d:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 594:	00 
 595:	73 70                	jae    607 <sysEnter_Vector-0x12f9f9>
 597:	61                   	popa   
 598:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 59b:	74 72                	je     60f <sysEnter_Vector-0x12f9f1>
 59d:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
 5a1:	70 00                	jo     5a3 <sysEnter_Vector-0x12fa5d>
 5a3:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 5a6:	6c                   	ins    BYTE PTR es:[edi],dx
 5a7:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 5ae:	67 76 00             	addr16 jbe 5b1 <sysEnter_Vector-0x12fa4f>
 5b1:	77 61                	ja     614 <sysEnter_Vector-0x12f9ec>
 5b3:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 5ba:	65 
 5bb:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 5be:	4c                   	dec    esp
 5bf:	65                   	gs
 5c0:	76 65                	jbe    627 <sysEnter_Vector-0x12f9d9>
 5c2:	6c                   	ins    BYTE PTR es:[edi],dx
 5c3:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 5c6:	6c                   	ins    BYTE PTR es:[edi],dx
 5c7:	6c                   	ins    BYTE PTR es:[edi],dx
 5c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5c9:	75 6d                	jne    638 <sysEnter_Vector-0x12f9c8>
 5cb:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
 5cf:	71 75                	jno    646 <sysEnter_Vector-0x12f9ba>
 5d1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5d2:	74 65                	je     639 <sysEnter_Vector-0x12f9c7>
 5d4:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 5d7:	65                   	gs
 5d8:	65                   	gs
 5d9:	70 00                	jo     5db <sysEnter_Vector-0x12fa25>
 5db:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 5de:	6c                   	ins    BYTE PTR es:[edi],dx
 5df:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 5e6:	67 76 49             	addr16 jbe 632 <sysEnter_Vector-0x12f9ce>
 5e9:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 5ed:	73 79                	jae    668 <sysEnter_Vector-0x12f998>
 5ef:	73 63                	jae    654 <sysEnter_Vector-0x12f9ac>
 5f1:	61                   	popa   
 5f2:	6c                   	ins    BYTE PTR es:[edi],dx
 5f3:	6c                   	ins    BYTE PTR es:[edi],dx
 5f4:	30 00                	xor    BYTE PTR [eax],al
 5f6:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 5f8:	5f                   	pop    edi
 5f9:	73 79                	jae    674 <sysEnter_Vector-0x12f98c>
 5fb:	73 63                	jae    660 <sysEnter_Vector-0x12f9a0>
 5fd:	61                   	popa   
 5fe:	6c                   	ins    BYTE PTR es:[edi],dx
 5ff:	6c                   	ins    BYTE PTR es:[edi],dx
 600:	31 00                	xor    DWORD PTR [eax],eax
 602:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 604:	5f                   	pop    edi
 605:	73 79                	jae    680 <sysEnter_Vector-0x12f980>
 607:	73 63                	jae    66c <sysEnter_Vector-0x12f994>
 609:	61                   	popa   
 60a:	6c                   	ins    BYTE PTR es:[edi],dx
 60b:	6c                   	ins    BYTE PTR es:[edi],dx
 60c:	32 00                	xor    al,BYTE PTR [eax]
 60e:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 610:	5f                   	pop    edi
 611:	73 79                	jae    68c <sysEnter_Vector-0x12f974>
 613:	73 63                	jae    678 <sysEnter_Vector-0x12f988>
 615:	61                   	popa   
 616:	6c                   	ins    BYTE PTR es:[edi],dx
 617:	6c                   	ins    BYTE PTR es:[edi],dx
 618:	33 00                	xor    eax,DWORD PTR [eax]
 61a:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 61c:	5f                   	pop    edi
 61d:	73 79                	jae    698 <sysEnter_Vector-0x12f968>
 61f:	73 63                	jae    684 <sysEnter_Vector-0x12f97c>
 621:	61                   	popa   
 622:	6c                   	ins    BYTE PTR es:[edi],dx
 623:	6c                   	ins    BYTE PTR es:[edi],dx
 624:	34 00                	xor    al,0x0
 626:	49                   	dec    ecx
 627:	4e                   	dec    esi
 628:	5f                   	pop    edi
 629:	57                   	push   edi
 62a:	4f                   	dec    edi
 62b:	52                   	push   edx
 62c:	44                   	inc    esp
 62d:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 630:	67 76 5f             	addr16 jbe 692 <sysEnter_Vector-0x12f96e>
 633:	73 69                	jae    69e <sysEnter_Vector-0x12f962>
 635:	7a 65                	jp     69c <sysEnter_Vector-0x12f964>
 637:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 63b:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 63e:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 645:	65 
 646:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 64a:	73 70                	jae    6bc <sysEnter_Vector-0x12f944>
 64c:	61                   	popa   
 64d:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 650:	5f                   	pop    edi
 651:	5f                   	pop    edi
 652:	67 6e                	outs   dx,BYTE PTR ds:[si]
 654:	75 63                	jne    6b9 <sysEnter_Vector-0x12f947>
 656:	5f                   	pop    edi
 657:	76 61                	jbe    6ba <sysEnter_Vector-0x12f946>
 659:	5f                   	pop    edi
 65a:	6c                   	ins    BYTE PTR es:[edi],dx
 65b:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 662:	6e                   	outs   dx,BYTE PTR ds:[esi]
 663:	74 64                	je     6c9 <sysEnter_Vector-0x12f937>
 665:	49                   	dec    ecx
 666:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 669:	72 61                	jb     6cc <sysEnter_Vector-0x12f934>
 66b:	6d                   	ins    DWORD PTR es:[edi],dx
 66c:	31 00                	xor    DWORD PTR [eax],eax
 66e:	70 61                	jo     6d1 <sysEnter_Vector-0x12f92f>
 670:	72 61                	jb     6d3 <sysEnter_Vector-0x12f92d>
 672:	6d                   	ins    DWORD PTR es:[edi],dx
 673:	32 00                	xor    al,BYTE PTR [eax]
 675:	70 61                	jo     6d8 <sysEnter_Vector-0x12f928>
 677:	72 61                	jb     6da <sysEnter_Vector-0x12f926>
 679:	6d                   	ins    DWORD PTR es:[edi],dx
 67a:	33 00                	xor    eax,DWORD PTR [eax]
 67c:	70 61                	jo     6df <sysEnter_Vector-0x12f921>
 67e:	72 61                	jb     6e1 <sysEnter_Vector-0x12f91f>
 680:	6d                   	ins    DWORD PTR es:[edi],dx
 681:	34 00                	xor    al,0x0
 683:	65                   	gs
 684:	78 65                	js     6eb <sysEnter_Vector-0x12f915>
 686:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 689:	65                   	gs
 68a:	78 65                	js     6f1 <sysEnter_Vector-0x12f90f>
 68c:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 68f:	66 6f                	outs   dx,WORD PTR ds:[esi]
 691:	72 6d                	jb     700 <sysEnter_Vector-0x12f900>
 693:	61                   	popa   
 694:	74 00                	je     696 <sysEnter_Vector-0x12f96a>
 696:	70 72                	jo     70a <sysEnter_Vector-0x12f8f6>
 698:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 69f:	65                   	gs
 6a0:	72 00                	jb     6a2 <sysEnter_Vector-0x12f95e>
 6a2:	73 69                	jae    70d <sysEnter_Vector-0x12f8f3>
 6a4:	67 6e                	outs   dx,BYTE PTR ds:[si]
 6a6:	61                   	popa   
 6a7:	6c                   	ins    BYTE PTR es:[edi],dx
 6a8:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 6ab:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 6ae:	5f                   	pop    edi
 6af:	5f                   	pop    edi
 6b0:	73 65                	jae    717 <sysEnter_Vector-0x12f8e9>
 6b2:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 6b5:	64                   	fs
 6b6:	73 00                	jae    6b8 <sysEnter_Vector-0x12f948>
 6b8:	44                   	inc    esp
 6b9:	55                   	push   ebp
 6ba:	4c                   	dec    esp
 6bb:	4c                   	dec    esp
 6bc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 6bf:	61                   	popa   
 6c0:	74 65                	je     727 <sysEnter_Vector-0x12f8d9>
 6c2:	73 00                	jae    6c4 <sysEnter_Vector-0x12f93c>
 6c4:	49                   	dec    ecx
 6c5:	4e                   	dec    esi
 6c6:	5f                   	pop    edi
 6c7:	53                   	push   ebx
 6c8:	54                   	push   esp
 6c9:	52                   	push   edx
 6ca:	49                   	dec    ecx
 6cb:	4e                   	dec    esi
 6cc:	47                   	inc    edi
 6cd:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6d0:	63 2f                	arpl   WORD PTR [edi],bp
 6d2:	6c                   	ins    BYTE PTR es:[edi],dx
 6d3:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 6da:	4f                   	dec    edi
 6db:	53                   	push   ebx
 6dc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 6df:	61                   	popa   
 6e0:	72 67                	jb     749 <sysEnter_Vector-0x12f8b7>
 6e2:	63 00                	arpl   WORD PTR [eax],ax
 6e4:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 6e7:	6c                   	ins    BYTE PTR es:[edi],dx
 6e8:	69 6e 65 00 73 70 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c707300
 6ef:	69 74 49 00 70 72 69 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6e697270
 6f6:	6e 
 6f7:	74 66                	je     75f <sysEnter_Vector-0x12f8a1>
 6f9:	49                   	dec    ecx
 6fa:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 6fe:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 701:	6c                   	ins    BYTE PTR es:[edi],dx
 702:	65                   	gs
 703:	61                   	popa   
 704:	6e                   	outs   dx,BYTE PTR ds:[esi]
 705:	75 70                	jne    777 <sysEnter_Vector-0x12f889>
 707:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 70a:	67 76 00             	addr16 jbe 70d <sysEnter_Vector-0x12f8f3>
 70d:	65                   	gs
 70e:	78 69                	js     779 <sysEnter_Vector-0x12f887>
 710:	74 00                	je     712 <sysEnter_Vector-0x12f8ee>
 712:	73 74                	jae    788 <sysEnter_Vector-0x12f878>
 714:	61                   	popa   
 715:	74 75                	je     78c <sysEnter_Vector-0x12f874>
 717:	73 00                	jae    719 <sysEnter_Vector-0x12f8e7>
 719:	73 69                	jae    784 <sysEnter_Vector-0x12f87c>
 71b:	67 48                	addr16 dec eax
 71d:	61                   	popa   
 71e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 71f:	64                   	fs
 720:	6c                   	ins    BYTE PTR es:[edi],dx
 721:	65                   	gs
 722:	72 00                	jb     724 <sysEnter_Vector-0x12f8dc>
 724:	6d                   	ins    DWORD PTR es:[edi],dx
 725:	6f                   	outs   dx,DWORD PTR ds:[esi]
 726:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 72d:	6e 
 72e:	61                   	popa   
 72f:	6c                   	ins    BYTE PTR es:[edi],dx
 730:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 733:	67 73 00             	addr16 jae 736 <sysEnter_Vector-0x12f8ca>
 736:	70 72                	jo     7aa <sysEnter_Vector-0x12f856>
 738:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 73f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 740:	70 00                	jo     742 <sysEnter_Vector-0x12f8be>
 742:	67                   	addr16
 743:	65                   	gs
 744:	74 63                	je     7a9 <sysEnter_Vector-0x12f857>
 746:	77 64                	ja     7ac <sysEnter_Vector-0x12f854>
 748:	00 61 64             	add    BYTE PTR [ecx+0x64],ah
 74b:	64                   	fs
 74c:	72 00                	jb     74e <sysEnter_Vector-0x12f8b2>
 74e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 74f:	66 66 5f             	data32 pop di
 752:	74 00                	je     754 <sysEnter_Vector-0x12f8ac>
 754:	70 72                	jo     7c8 <sysEnter_Vector-0x12f838>
 756:	6f                   	outs   dx,DWORD PTR ds:[esi]
 757:	74 00                	je     759 <sysEnter_Vector-0x12f8a7>
 759:	73 4d                	jae    7a8 <sysEnter_Vector-0x12f858>
 75b:	4d                   	dec    ebp
 75c:	61                   	popa   
 75d:	70 53                	jo     7b2 <sysEnter_Vector-0x12f84e>
 75f:	79 73                	jns    7d4 <sysEnter_Vector-0x12f82c>
 761:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 764:	6c                   	ins    BYTE PTR es:[edi],dx
 765:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
 768:	61                   	popa   
 769:	70 00                	jo     76b <sysEnter_Vector-0x12f895>
 76b:	70 61                	jo     7ce <sysEnter_Vector-0x12f832>
 76d:	72 61                	jb     7d0 <sysEnter_Vector-0x12f830>
 76f:	6d                   	ins    DWORD PTR es:[edi],dx
 770:	73 00                	jae    772 <sysEnter_Vector-0x12f88e>
 772:	73 72                	jae    7e6 <sysEnter_Vector-0x12f81a>
 774:	63 2f                	arpl   WORD PTR [edi],bp
 776:	6c                   	ins    BYTE PTR es:[edi],dx
 777:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
 77e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 781:	73 79                	jae    7fc <sysEnter_Vector-0x12f804>
 783:	73 63                	jae    7e8 <sysEnter_Vector-0x12f818>
 785:	61                   	popa   
 786:	6c                   	ins    BYTE PTR es:[edi],dx
 787:	6c                   	ins    BYTE PTR es:[edi],dx
 788:	5f                   	pop    edi
 789:	6d                   	ins    DWORD PTR es:[edi],dx
 78a:	6d                   	ins    DWORD PTR es:[edi],dx
 78b:	61                   	popa   
 78c:	70 5f                	jo     7ed <sysEnter_Vector-0x12f813>
 78e:	74 00                	je     790 <sysEnter_Vector-0x12f870>
 790:	6d                   	ins    DWORD PTR es:[edi],dx
 791:	61                   	popa   
 792:	6c                   	ins    BYTE PTR es:[edi],dx
 793:	6c                   	ins    BYTE PTR es:[edi],dx
 794:	6f                   	outs   dx,DWORD PTR ds:[esi]
 795:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 798:	70 72                	jo     80c <sysEnter_Vector-0x12f7f4>
 79a:	65                   	gs
 79b:	76 00                	jbe    79d <sysEnter_Vector-0x12f863>
 79d:	66                   	data16
 79e:	72 65                	jb     805 <sysEnter_Vector-0x12f7fb>
 7a0:	65 00 68 65          	add    BYTE PTR gs:[eax+0x65],ch
 7a4:	61                   	popa   
 7a5:	70 72                	jo     819 <sysEnter_Vector-0x12f7e7>
 7a7:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 7ab:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 7ae:	65                   	gs
 7af:	65                   	gs
 7b0:	49                   	dec    ecx
 7b1:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 7b4:	72 6b                	jb     821 <sysEnter_Vector-0x12f7df>
 7b6:	65                   	gs
 7b7:	72 00                	jb     7b9 <sysEnter_Vector-0x12f847>
 7b9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7ba:	65                   	gs
 7bb:	77 48                	ja     805 <sysEnter_Vector-0x12f7fb>
 7bd:	65                   	gs
 7be:	61                   	popa   
 7bf:	70 52                	jo     813 <sysEnter_Vector-0x12f7ed>
 7c1:	65                   	gs
 7c2:	71 75                	jno    839 <sysEnter_Vector-0x12f7c7>
 7c4:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 7cb:	75 6c                	jne    839 <sysEnter_Vector-0x12f7c7>
 7cd:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 7d4:	75 65                	jne    83b <sysEnter_Vector-0x12f7c5>
 7d6:	73 74                	jae    84c <sysEnter_Vector-0x12f7b4>
 7d8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 7db:	55                   	push   ebp
 7dc:	73 65                	jae    843 <sysEnter_Vector-0x12f7bd>
 7de:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
 7e1:	65                   	gs
 7e2:	61                   	popa   
 7e3:	70 00                	jo     7e5 <sysEnter_Vector-0x12f81b>
 7e5:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
 7ec:	6c                   	ins    BYTE PTR es:[edi],dx
 7ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7ee:	63 00                	arpl   WORD PTR [eax],ax
 7f0:	66 6f                	outs   dx,WORD PTR ds:[esi]
 7f2:	6c                   	ins    BYTE PTR es:[edi],dx
 7f3:	64                   	fs
 7f4:	70 74                	jo     86a <sysEnter_Vector-0x12f796>
 7f6:	72 00                	jb     7f8 <sysEnter_Vector-0x12f808>
 7f8:	6d                   	ins    DWORD PTR es:[edi],dx
 7f9:	61                   	popa   
 7fa:	6c                   	ins    BYTE PTR es:[edi],dx
 7fb:	6c                   	ins    BYTE PTR es:[edi],dx
 7fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7fd:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 800:	6c                   	ins    BYTE PTR es:[edi],dx
 801:	65                   	gs
 802:	61                   	popa   
 803:	6e                   	outs   dx,BYTE PTR ds:[esi]
 804:	75 70                	jne    876 <sysEnter_Vector-0x12f78a>
 806:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 809:	6c                   	ins    BYTE PTR es:[edi],dx
 80a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 80b:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 80e:	65                   	gs
 80f:	64                   	fs
 810:	50                   	push   eax
 811:	74 72                	je     885 <sysEnter_Vector-0x12f77b>
 813:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 816:	77 6c                	ja     884 <sysEnter_Vector-0x12f77c>
 818:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 81a:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 81d:	77 53                	ja     872 <sysEnter_Vector-0x12f78e>
 81f:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
 826:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
 82c:	61                   	popa   
 82d:	6c                   	ins    BYTE PTR es:[edi],dx
 82e:	6c                   	ins    BYTE PTR es:[edi],dx
 82f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 830:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 833:	66                   	data16
 834:	6e                   	outs   dx,BYTE PTR ds:[esi]
 835:	65                   	gs
 836:	77 70                	ja     8a8 <sysEnter_Vector-0x12f758>
 838:	74 72                	je     8ac <sysEnter_Vector-0x12f754>
 83a:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 83d:	63 2f                	arpl   WORD PTR [edi],bp
 83f:	6d                   	ins    DWORD PTR es:[edi],dx
 840:	61                   	popa   
 841:	6c                   	ins    BYTE PTR es:[edi],dx
 842:	6c                   	ins    BYTE PTR es:[edi],dx
 843:	6f                   	outs   dx,DWORD PTR ds:[esi]
 844:	63 2e                	arpl   WORD PTR [esi],bp
 846:	63 00                	arpl   WORD PTR [eax],ax
 848:	68 65 61 70 50       	push   0x50706165
 84d:	74 72                	je     8c1 <sysEnter_Vector-0x12f73f>
 84f:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 852:	6f                   	outs   dx,DWORD PTR ds:[esi]
 853:	69 6e 74 65 72 00 68 	imul   ebp,DWORD PTR [esi+0x74],0x68007265
 85a:	65                   	gs
 85b:	61                   	popa   
 85c:	70 50                	jo     8ae <sysEnter_Vector-0x12f752>
 85e:	74 72                	je     8d2 <sysEnter_Vector-0x12f72e>
 860:	4e                   	dec    esi
 861:	65                   	gs
 862:	78 74                	js     8d8 <sysEnter_Vector-0x12f728>
 864:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 867:	6e                   	outs   dx,BYTE PTR ds:[esi]
 868:	74 38                	je     8a2 <sysEnter_Vector-0x12f75e>
 86a:	5f                   	pop    edi
 86b:	74 00                	je     86d <sysEnter_Vector-0x12f793>
 86d:	72 65                	jb     8d4 <sysEnter_Vector-0x12f72c>
 86f:	61                   	popa   
 870:	6c                   	ins    BYTE PTR es:[edi],dx
 871:	6c                   	ins    BYTE PTR es:[edi],dx
 872:	6f                   	outs   dx,DWORD PTR ds:[esi]
 873:	63 00                	arpl   WORD PTR [eax],ax
 875:	73 72                	jae    8e9 <sysEnter_Vector-0x12f717>
 877:	63 2f                	arpl   WORD PTR [edi],bp
 879:	6d                   	ins    DWORD PTR es:[edi],dx
 87a:	65                   	gs
 87b:	6d                   	ins    DWORD PTR es:[edi],dx
 87c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 87f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 882:	64                   	fs
 883:	65                   	gs
 884:	73 74                	jae    8fa <sysEnter_Vector-0x12f706>
 886:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 889:	6d                   	ins    DWORD PTR es:[edi],dx
 88a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 88d:	49                   	dec    ecx
 88e:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 891:	6d                   	ins    DWORD PTR es:[edi],dx
 892:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 895:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 898:	63 2f                	arpl   WORD PTR [edi],bp
 89a:	6d                   	ins    DWORD PTR es:[edi],dx
 89b:	65                   	gs
 89c:	6d                   	ins    DWORD PTR es:[edi],dx
 89d:	73 65                	jae    904 <sysEnter_Vector-0x12f6fc>
 89f:	74 2e                	je     8cf <sysEnter_Vector-0x12f731>
 8a1:	63 00                	arpl   WORD PTR [eax],ax
 8a3:	6d                   	ins    DWORD PTR es:[edi],dx
 8a4:	65                   	gs
 8a5:	6d                   	ins    DWORD PTR es:[edi],dx
 8a6:	73 65                	jae    90d <sysEnter_Vector-0x12f6f3>
 8a8:	74 00                	je     8aa <sysEnter_Vector-0x12f756>
 8aa:	6d                   	ins    DWORD PTR es:[edi],dx
 8ab:	65                   	gs
 8ac:	6d                   	ins    DWORD PTR es:[edi],dx
 8ad:	73 65                	jae    914 <sysEnter_Vector-0x12f6ec>
 8af:	74 49                	je     8fa <sysEnter_Vector-0x12f706>
 8b1:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 8b4:	61                   	popa   
 8b5:	6c                   	ins    BYTE PTR es:[edi],dx
 8b6:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 8b9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8ba:	74 31                	je     8ed <sysEnter_Vector-0x12f713>
 8bc:	36                   	ss
 8bd:	5f                   	pop    edi
 8be:	74 00                	je     8c0 <sysEnter_Vector-0x12f740>
 8c0:	66 56                	push   si
 8c2:	61                   	popa   
 8c3:	6c                   	ins    BYTE PTR es:[edi],dx
 8c4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8c7:	63 2f                	arpl   WORD PTR [edi],bp
 8c9:	70 69                	jo     934 <sysEnter_Vector-0x12f6cc>
 8cb:	70 65                	jo     932 <sysEnter_Vector-0x12f6ce>
 8cd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 8d0:	70 69                	jo     93b <sysEnter_Vector-0x12f6c5>
 8d2:	70 65                	jo     939 <sysEnter_Vector-0x12f6c7>
 8d4:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 8d7:	70 65                	jo     93e <sysEnter_Vector-0x12f6c2>
 8d9:	66                   	data16
 8da:	64 00 73 6b          	add    BYTE PTR fs:[ebx+0x6b],dh
 8de:	69 70 5f 61 74 6f 69 	imul   esi,DWORD PTR [eax+0x5f],0x696f7461
 8e5:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 8e9:	61                   	popa   
 8ea:	73 65                	jae    951 <sysEnter_Vector-0x12f6af>
 8ec:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8ef:	63 2f                	arpl   WORD PTR [edi],bp
 8f1:	73 70                	jae    963 <sysEnter_Vector-0x12f69d>
 8f3:	72 69                	jb     95e <sysEnter_Vector-0x12f6a2>
 8f5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8f6:	74 66                	je     95e <sysEnter_Vector-0x12f6a2>
 8f8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 8fb:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 8fe:	65 00 71 75          	add    BYTE PTR gs:[ecx+0x75],dh
 902:	61                   	popa   
 903:	6c                   	ins    BYTE PTR es:[edi],dx
 904:	69 66 69 65 72 00 72 	imul   esp,DWORD PTR [esi+0x69],0x72007265
 90b:	65                   	gs
 90c:	70 65                	jo     973 <sysEnter_Vector-0x12f68d>
 90e:	61                   	popa   
 90f:	74 00                	je     911 <sysEnter_Vector-0x12f6ef>
 911:	6e                   	outs   dx,BYTE PTR ds:[esi]
 912:	75 6d                	jne    981 <sysEnter_Vector-0x12f67f>
 914:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
 917:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 91a:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 91e:	69 6f 6e 00 64 69 67 	imul   ebp,DWORD PTR [edi+0x6e],0x67696400
 925:	69 74 73 00 66 69 65 	imul   esi,DWORD PTR [ebx+esi*2+0x0],0x6c656966
 92c:	6c 
 92d:	64                   	fs
 92e:	5f                   	pop    edi
 92f:	77 69                	ja     99a <sysEnter_Vector-0x12f666>
 931:	64                   	fs
 932:	74 68                	je     99c <sysEnter_Vector-0x12f664>
 934:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 937:	72 65                	jb     99e <sysEnter_Vector-0x12f662>
 939:	73 00                	jae    93b <sysEnter_Vector-0x12f6c5>
 93b:	76 73                	jbe    9b0 <sysEnter_Vector-0x12f650>
 93d:	70 72                	jo     9b1 <sysEnter_Vector-0x12f64f>
 93f:	69 6e 74 66 00 73 5f 	imul   ebp,DWORD PTR [esi+0x74],0x5f730066
 946:	64                   	fs
 947:	65                   	gs
 948:	76 00                	jbe    94a <sysEnter_Vector-0x12f6b6>
 94a:	75 69                	jne    9b5 <sysEnter_Vector-0x12f64b>
 94c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 94d:	74 36                	je     985 <sysEnter_Vector-0x12f67b>
 94f:	34 5f                	xor    al,0x5f
 951:	74 00                	je     953 <sysEnter_Vector-0x12f6ad>
 953:	6d                   	ins    DWORD PTR es:[edi],dx
 954:	6e                   	outs   dx,BYTE PTR ds:[esi]
 955:	74 5f                	je     9b6 <sysEnter_Vector-0x12f64a>
 957:	66                   	data16
 958:	6c                   	ins    BYTE PTR es:[edi],dx
 959:	61                   	popa   
 95a:	67 73 00             	addr16 jae 95d <sysEnter_Vector-0x12f6a3>
 95d:	6d                   	ins    DWORD PTR es:[edi],dx
 95e:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 962:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 965:	78 74                	js     9db <sysEnter_Vector-0x12f625>
 967:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 96a:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 971:	66 
 972:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 975:	74 5f                	je     9d6 <sysEnter_Vector-0x12f62a>
 977:	73 62                	jae    9db <sysEnter_Vector-0x12f625>
 979:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 97c:	6c                   	ins    BYTE PTR es:[edi],dx
 97d:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 984:	65                   	gs
 985:	72 5f                	jb     9e6 <sysEnter_Vector-0x12f61a>
 987:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 98b:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 98e:	5f                   	pop    edi
 98f:	76 66                	jbe    9f7 <sysEnter_Vector-0x12f609>
 991:	73 6d                	jae    a00 <sysEnter_Vector-0x12f600>
 993:	6f                   	outs   dx,DWORD PTR ds:[esi]
 994:	75 6e                	jne    a04 <sysEnter_Vector-0x12f5fc>
 996:	74 00                	je     998 <sysEnter_Vector-0x12f668>
 998:	72 65                	jb     9ff <sysEnter_Vector-0x12f601>
 99a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 99b:	61                   	popa   
 99c:	6d                   	ins    DWORD PTR es:[edi],dx
 99d:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 9a2:	61                   	popa   
 9a3:	6d                   	ins    DWORD PTR es:[edi],dx
 9a4:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 9a8:	63 2f                	arpl   WORD PTR [edi],bp
 9aa:	73 74                	jae    a20 <sysEnter_Vector-0x12f5e0>
 9ac:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 9b3:	65 
 9b4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9b5:	74 72                	je     a29 <sysEnter_Vector-0x12f5d7>
 9b7:	79 00                	jns    9b9 <sysEnter_Vector-0x12f647>
 9b9:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 9c0:	65                   	gs
 9c1:	72 61                	jb     a24 <sysEnter_Vector-0x12f5dc>
 9c3:	74 69                	je     a2e <sysEnter_Vector-0x12f5d2>
 9c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9c7:	73 00                	jae    9c9 <sysEnter_Vector-0x12f637>
 9c9:	72 6d                	jb     a38 <sysEnter_Vector-0x12f5c8>
 9cb:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 9d2:	69 
 9d3:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 9d8:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 9df:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9e1:	64                   	fs
 9e2:	65                   	gs
 9e3:	5f                   	pop    edi
 9e4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9e5:	70 65                	jo     a4c <sysEnter_Vector-0x12f5b4>
 9e7:	72 61                	jb     a4a <sysEnter_Vector-0x12f5b6>
 9e9:	74 69                	je     a54 <sysEnter_Vector-0x12f5ac>
 9eb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9ed:	73 00                	jae    9ef <sysEnter_Vector-0x12f611>
 9ef:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 9f6:	67 73 00             	addr16 jae 9f9 <sysEnter_Vector-0x12f607>
 9f9:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 a00:	65                   	gs
 a01:	72 61                	jb     a64 <sysEnter_Vector-0x12f59c>
 a03:	74 69                	je     a6e <sysEnter_Vector-0x12f592>
 a05:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a06:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a07:	73 5f                	jae    a68 <sysEnter_Vector-0x12f598>
 a09:	74 00                	je     a0b <sysEnter_Vector-0x12f5f5>
 a0b:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 a0e:	66 50                	push   ax
 a10:	74 72                	je     a84 <sysEnter_Vector-0x12f57c>
 a12:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 a15:	64                   	fs
 a16:	65                   	gs
 a17:	76 00                	jbe    a19 <sysEnter_Vector-0x12f5e7>
 a19:	70 61                	jo     a7c <sysEnter_Vector-0x12f584>
 a1b:	79 6c                	jns    a89 <sysEnter_Vector-0x12f577>
 a1d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a1e:	61                   	popa   
 a1f:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 a23:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 a2a:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 a2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a2e:	70 00                	jo     a30 <sysEnter_Vector-0x12f5d0>
 a30:	6d                   	ins    DWORD PTR es:[edi],dx
 a31:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a32:	74 5f                	je     a93 <sysEnter_Vector-0x12f56d>
 a34:	72 6f                	jb     aa5 <sysEnter_Vector-0x12f55b>
 a36:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a37:	74 00                	je     a39 <sysEnter_Vector-0x12f5c7>
 a39:	66 6f                	outs   dx,WORD PTR ds:[esi]
 a3b:	70 73                	jo     ab0 <sysEnter_Vector-0x12f550>
 a3d:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 a40:	6c                   	ins    BYTE PTR es:[edi],dx
 a41:	65                   	gs
 a42:	5f                   	pop    edi
 a43:	74 00                	je     a45 <sysEnter_Vector-0x12f5bb>
 a45:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 a4c:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 a4f:	75 69                	jne    aba <sysEnter_Vector-0x12f546>
 a51:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 a55:	6d                   	ins    DWORD PTR es:[edi],dx
 a56:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a57:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 a5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a5d:	73 6f                	jae    ace <sysEnter_Vector-0x12f532>
 a5f:	6c                   	ins    BYTE PTR es:[edi],dx
 a60:	65                   	gs
 a61:	5f                   	pop    edi
 a62:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a63:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a64:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 a69:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a6a:	64                   	fs
 a6b:	65                   	gs
 a6c:	5f                   	pop    edi
 a6d:	74 00                	je     a6f <sysEnter_Vector-0x12f591>
 a6f:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 a72:	73 6f                	jae    ae3 <sysEnter_Vector-0x12f51d>
 a74:	6c                   	ins    BYTE PTR es:[edi],dx
 a75:	65                   	gs
 a76:	5f                   	pop    edi
 a77:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 a7e:	72 6f                	jb     aef <sysEnter_Vector-0x12f511>
 a80:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a81:	74 00                	je     a83 <sysEnter_Vector-0x12f57d>
 a83:	64                   	fs
 a84:	5f                   	pop    edi
 a85:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 a8c:	65                   	gs
 a8d:	73 65                	jae    af4 <sysEnter_Vector-0x12f50c>
 a8f:	74 52                	je     ae3 <sysEnter_Vector-0x12f51d>
 a91:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a92:	77 00                	ja     a94 <sysEnter_Vector-0x12f56c>
 a94:	64                   	fs
 a95:	5f                   	pop    edi
 a96:	70 61                	jo     af9 <sysEnter_Vector-0x12f507>
 a98:	72 65                	jb     aff <sysEnter_Vector-0x12f501>
 a9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a9b:	74 00                	je     a9d <sysEnter_Vector-0x12f563>
 a9d:	66 5f                	pop    di
 a9f:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 aa6:	5f                   	pop    edi
 aa7:	70 61                	jo     b0a <sysEnter_Vector-0x12f4f6>
 aa9:	74 68                	je     b13 <sysEnter_Vector-0x12f4ed>
 aab:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 aae:	65                   	gs
 aaf:	61                   	popa   
 ab0:	74 65                	je     b17 <sysEnter_Vector-0x12f4e9>
 ab2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 ab5:	72 63                	jb     b1a <sysEnter_Vector-0x12f4e6>
 ab7:	61                   	popa   
 ab8:	74 49                	je     b03 <sysEnter_Vector-0x12f4fd>
 aba:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 abd:	72 63                	jb     b22 <sysEnter_Vector-0x12f4de>
 abf:	61                   	popa   
 ac0:	74 00                	je     ac2 <sysEnter_Vector-0x12f53e>
 ac2:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 ac5:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 ac8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 aca:	61                   	popa   
 acb:	74 65                	je     b32 <sysEnter_Vector-0x12f4ce>
 acd:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 ad0:	63 2f                	arpl   WORD PTR [edi],bp
 ad2:	73 74                	jae    b48 <sysEnter_Vector-0x12f4b8>
 ad4:	72 69                	jb     b3f <sysEnter_Vector-0x12f4c1>
 ad6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ad7:	67 73 2f             	addr16 jae b09 <sysEnter_Vector-0x12f4f7>
 ada:	73 74                	jae    b50 <sysEnter_Vector-0x12f4b0>
 adc:	72 63                	jb     b41 <sysEnter_Vector-0x12f4bf>
 ade:	61                   	popa   
 adf:	74 2e                	je     b0f <sysEnter_Vector-0x12f4f1>
 ae1:	63 00                	arpl   WORD PTR [eax],ax
 ae3:	73 74                	jae    b59 <sysEnter_Vector-0x12f4a7>
 ae5:	72 63                	jb     b4a <sysEnter_Vector-0x12f4b6>
 ae7:	6d                   	ins    DWORD PTR es:[edi],dx
 ae8:	70 00                	jo     aea <sysEnter_Vector-0x12f516>
 aea:	73 72                	jae    b5e <sysEnter_Vector-0x12f4a2>
 aec:	63 2f                	arpl   WORD PTR [edi],bp
 aee:	73 74                	jae    b64 <sysEnter_Vector-0x12f49c>
 af0:	72 69                	jb     b5b <sysEnter_Vector-0x12f4a5>
 af2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 af3:	67 73 2f             	addr16 jae b25 <sysEnter_Vector-0x12f4db>
 af6:	73 74                	jae    b6c <sysEnter_Vector-0x12f494>
 af8:	72 63                	jb     b5d <sysEnter_Vector-0x12f4a3>
 afa:	6d                   	ins    DWORD PTR es:[edi],dx
 afb:	70 2e                	jo     b2b <sysEnter_Vector-0x12f4d5>
 afd:	63 00                	arpl   WORD PTR [eax],ax
 aff:	73 74                	jae    b75 <sysEnter_Vector-0x12f48b>
 b01:	72 63                	jb     b66 <sysEnter_Vector-0x12f49a>
 b03:	70 79                	jo     b7e <sysEnter_Vector-0x12f482>
 b05:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b08:	72 63                	jb     b6d <sysEnter_Vector-0x12f493>
 b0a:	70 79                	jo     b85 <sysEnter_Vector-0x12f47b>
 b0c:	49                   	dec    ecx
 b0d:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 b10:	75 6e                	jne    b80 <sysEnter_Vector-0x12f480>
 b12:	74 00                	je     b14 <sysEnter_Vector-0x12f4ec>
 b14:	73 74                	jae    b8a <sysEnter_Vector-0x12f476>
 b16:	72 63                	jb     b7b <sysEnter_Vector-0x12f485>
 b18:	70 79                	jo     b93 <sysEnter_Vector-0x12f46d>
 b1a:	63 00                	arpl   WORD PTR [eax],ax
 b1c:	73 72                	jae    b90 <sysEnter_Vector-0x12f470>
 b1e:	63 2f                	arpl   WORD PTR [edi],bp
 b20:	73 74                	jae    b96 <sysEnter_Vector-0x12f46a>
 b22:	72 69                	jb     b8d <sysEnter_Vector-0x12f473>
 b24:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b25:	67 73 2f             	addr16 jae b57 <sysEnter_Vector-0x12f4a9>
 b28:	73 74                	jae    b9e <sysEnter_Vector-0x12f462>
 b2a:	72 63                	jb     b8f <sysEnter_Vector-0x12f471>
 b2c:	70 79                	jo     ba7 <sysEnter_Vector-0x12f459>
 b2e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b31:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 b34:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 b37:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 b3e:	74 
 b3f:	72 69                	jb     baa <sysEnter_Vector-0x12f456>
 b41:	73 6e                	jae    bb1 <sysEnter_Vector-0x12f44f>
 b43:	75 6d                	jne    bb2 <sysEnter_Vector-0x12f44e>
 b45:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b48:	63 2f                	arpl   WORD PTR [edi],bp
 b4a:	73 74                	jae    bc0 <sysEnter_Vector-0x12f440>
 b4c:	72 69                	jb     bb7 <sysEnter_Vector-0x12f449>
 b4e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b4f:	67 73 2f             	addr16 jae b81 <sysEnter_Vector-0x12f47f>
 b52:	73 74                	jae    bc8 <sysEnter_Vector-0x12f438>
 b54:	72 69                	jb     bbf <sysEnter_Vector-0x12f441>
 b56:	73 6e                	jae    bc6 <sysEnter_Vector-0x12f43a>
 b58:	75 6d                	jne    bc7 <sysEnter_Vector-0x12f439>
 b5a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b5d:	73 74                	jae    bd3 <sysEnter_Vector-0x12f42d>
 b5f:	72 6c                	jb     bcd <sysEnter_Vector-0x12f433>
 b61:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 b63:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b66:	63 2f                	arpl   WORD PTR [edi],bp
 b68:	73 74                	jae    bde <sysEnter_Vector-0x12f422>
 b6a:	72 69                	jb     bd5 <sysEnter_Vector-0x12f42b>
 b6c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b6d:	67 73 2f             	addr16 jae b9f <sysEnter_Vector-0x12f461>
 b70:	73 74                	jae    be6 <sysEnter_Vector-0x12f41a>
 b72:	72 6c                	jb     be0 <sysEnter_Vector-0x12f420>
 b74:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 b76:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b79:	73 74                	jae    bef <sysEnter_Vector-0x12f411>
 b7b:	72 6c                	jb     be9 <sysEnter_Vector-0x12f417>
 b7d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 b7f:	49                   	dec    ecx
 b80:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b83:	72 6e                	jb     bf3 <sysEnter_Vector-0x12f40d>
 b85:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 b88:	49                   	dec    ecx
 b89:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b8c:	72 6e                	jb     bfc <sysEnter_Vector-0x12f404>
 b8e:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 b91:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b94:	63 2f                	arpl   WORD PTR [edi],bp
 b96:	73 74                	jae    c0c <sysEnter_Vector-0x12f3f4>
 b98:	72 69                	jb     c03 <sysEnter_Vector-0x12f3fd>
 b9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b9b:	67 73 2f             	addr16 jae bcd <sysEnter_Vector-0x12f433>
 b9e:	73 74                	jae    c14 <sysEnter_Vector-0x12f3ec>
 ba0:	72 6e                	jb     c10 <sysEnter_Vector-0x12f3f0>
 ba2:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 ba5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ba8:	73 72                	jae    c1c <sysEnter_Vector-0x12f3e4>
 baa:	63 2f                	arpl   WORD PTR [edi],bp
 bac:	73 74                	jae    c22 <sysEnter_Vector-0x12f3de>
 bae:	72 69                	jb     c19 <sysEnter_Vector-0x12f3e7>
 bb0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bb1:	67 73 2f             	addr16 jae be3 <sysEnter_Vector-0x12f41d>
 bb4:	73 74                	jae    c2a <sysEnter_Vector-0x12f3d6>
 bb6:	72 6e                	jb     c26 <sysEnter_Vector-0x12f3da>
 bb8:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 bbb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 bbe:	73 74                	jae    c34 <sysEnter_Vector-0x12f3cc>
 bc0:	72 6e                	jb     c30 <sysEnter_Vector-0x12f3d0>
 bc2:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 bc5:	49                   	dec    ecx
 bc6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 bc9:	72 6e                	jb     c39 <sysEnter_Vector-0x12f3c7>
 bcb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 bce:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 bd1:	64                   	fs
 bd2:	70 74                	jo     c48 <sysEnter_Vector-0x12f3b8>
 bd4:	72 00                	jb     bd6 <sysEnter_Vector-0x12f42a>
 bd6:	73 72                	jae    c4a <sysEnter_Vector-0x12f3b6>
 bd8:	63 2f                	arpl   WORD PTR [edi],bp
 bda:	73 74                	jae    c50 <sysEnter_Vector-0x12f3b0>
 bdc:	72 69                	jb     c47 <sysEnter_Vector-0x12f3b9>
 bde:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bdf:	67 73 2f             	addr16 jae c11 <sysEnter_Vector-0x12f3ef>
 be2:	73 74                	jae    c58 <sysEnter_Vector-0x12f3a8>
 be4:	72 6f                	jb     c55 <sysEnter_Vector-0x12f3ab>
 be6:	75 6c                	jne    c54 <sysEnter_Vector-0x12f3ac>
 be8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 beb:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 bee:	6c                   	ins    BYTE PTR es:[edi],dx
 bef:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 bf6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bf7:	75 6c                	jne    c65 <sysEnter_Vector-0x12f39b>
 bf9:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 bfc:	74 6f                	je     c6d <sysEnter_Vector-0x12f393>
 bfe:	66                   	data16
 bff:	66                   	data16
 c00:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
 c03:	74 72                	je     c77 <sysEnter_Vector-0x12f389>
 c05:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c08:	63 2f                	arpl   WORD PTR [edi],bp
 c0a:	73 74                	jae    c80 <sysEnter_Vector-0x12f380>
 c0c:	72 69                	jb     c77 <sysEnter_Vector-0x12f389>
 c0e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c0f:	67 73 2f             	addr16 jae c41 <sysEnter_Vector-0x12f3bf>
 c12:	73 74                	jae    c88 <sysEnter_Vector-0x12f378>
 c14:	72 70                	jb     c86 <sysEnter_Vector-0x12f37a>
 c16:	61                   	popa   
 c17:	72 74                	jb     c8d <sysEnter_Vector-0x12f373>
 c19:	73 2e                	jae    c49 <sysEnter_Vector-0x12f3b7>
 c1b:	63 00                	arpl   WORD PTR [eax],ax
 c1d:	73 74                	jae    c93 <sysEnter_Vector-0x12f36d>
 c1f:	72 6c                	jb     c8d <sysEnter_Vector-0x12f373>
 c21:	65                   	gs
 c22:	66                   	data16
 c23:	74 00                	je     c25 <sysEnter_Vector-0x12f3db>
 c25:	73 72                	jae    c99 <sysEnter_Vector-0x12f367>
 c27:	63 2f                	arpl   WORD PTR [edi],bp
 c29:	73 74                	jae    c9f <sysEnter_Vector-0x12f361>
 c2b:	72 69                	jb     c96 <sysEnter_Vector-0x12f36a>
 c2d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c2e:	67 73 2f             	addr16 jae c60 <sysEnter_Vector-0x12f3a0>
 c31:	73 74                	jae    ca7 <sysEnter_Vector-0x12f359>
 c33:	72 74                	jb     ca9 <sysEnter_Vector-0x12f357>
 c35:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c36:	6c                   	ins    BYTE PTR es:[edi],dx
 c37:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 c3a:	73 74                	jae    cb0 <sysEnter_Vector-0x12f350>
 c3c:	72 74                	jb     cb2 <sysEnter_Vector-0x12f34e>
 c3e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c3f:	6c                   	ins    BYTE PTR es:[edi],dx
 c40:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c43:	63 2f                	arpl   WORD PTR [edi],bp
 c45:	73 74                	jae    cbb <sysEnter_Vector-0x12f345>
 c47:	72 69                	jb     cb2 <sysEnter_Vector-0x12f34e>
 c49:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c4a:	67 73 2f             	addr16 jae c7c <sysEnter_Vector-0x12f384>
 c4d:	73 74                	jae    cc3 <sysEnter_Vector-0x12f33d>
 c4f:	72 74                	jb     cc5 <sysEnter_Vector-0x12f33b>
 c51:	72 69                	jb     cbc <sysEnter_Vector-0x12f344>
 c53:	6d                   	ins    DWORD PTR es:[edi],dx
 c54:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 c57:	73 74                	jae    ccd <sysEnter_Vector-0x12f333>
 c59:	72 74                	jb     ccf <sysEnter_Vector-0x12f331>
 c5b:	72 69                	jb     cc6 <sysEnter_Vector-0x12f33a>
 c5d:	6d                   	ins    DWORD PTR es:[edi],dx
 c5e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 c61:	70 75                	jo     cd8 <sysEnter_Vector-0x12f328>
 c63:	74 00                	je     c65 <sysEnter_Vector-0x12f39b>
 c65:	73 74                	jae    cdb <sysEnter_Vector-0x12f325>
 c67:	72 74                	jb     cdd <sysEnter_Vector-0x12f323>
 c69:	72 69                	jb     cd4 <sysEnter_Vector-0x12f32c>
 c6b:	6d                   	ins    DWORD PTR es:[edi],dx
 c6c:	49                   	dec    ecx
 c6d:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 c70:	74 73                	je     ce5 <sysEnter_Vector-0x12f31b>
 c72:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
 c79:	2f                   	das    
 c7a:	73 74                	jae    cf0 <sysEnter_Vector-0x12f310>
 c7c:	72 72                	jb     cf0 <sysEnter_Vector-0x12f310>
 c7e:	65                   	gs
 c7f:	70 6c                	jo     ced <sysEnter_Vector-0x12f313>
 c81:	61                   	popa   
 c82:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
 c85:	63 00                	arpl   WORD PTR [eax],ax
 c87:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c88:	65                   	gs
 c89:	65                   	gs
 c8a:	64                   	fs
 c8b:	6c                   	ins    BYTE PTR es:[edi],dx
 c8c:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 c90:	73 6f                	jae    d01 <sysEnter_Vector-0x12f2ff>
 c92:	66                   	data16
 c93:	66                   	data16
 c94:	73 65                	jae    cfb <sysEnter_Vector-0x12f305>
 c96:	74 00                	je     c98 <sysEnter_Vector-0x12f368>
 c98:	73 74                	jae    d0e <sysEnter_Vector-0x12f2f2>
 c9a:	72 72                	jb     d0e <sysEnter_Vector-0x12f2f2>
 c9c:	65                   	gs
 c9d:	70 6c                	jo     d0b <sysEnter_Vector-0x12f2f5>
 c9f:	61                   	popa   
 ca0:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 ca3:	70 61                	jo     d06 <sysEnter_Vector-0x12f2fa>
 ca5:	74 74                	je     d1b <sysEnter_Vector-0x12f2e5>
 ca7:	65                   	gs
 ca8:	72 6e                	jb     d18 <sysEnter_Vector-0x12f2e8>
 caa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 cad:	72 72                	jb     d21 <sysEnter_Vector-0x12f2df>
 caf:	65                   	gs
 cb0:	70 6c                	jo     d1e <sysEnter_Vector-0x12f2e2>
 cb2:	61                   	popa   
 cb3:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
 cb6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 cb9:	72 73                	jb     d2e <sysEnter_Vector-0x12f2d2>
 cbb:	74 72                	je     d2f <sysEnter_Vector-0x12f2d1>
 cbd:	49                   	dec    ecx
 cbe:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 cc1:	72 6e                	jb     d31 <sysEnter_Vector-0x12f2cf>
 cc3:	73 74                	jae    d39 <sysEnter_Vector-0x12f2c7>
 cc5:	72 49                	jb     d10 <sysEnter_Vector-0x12f2f0>
 cc7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 cca:	63 2f                	arpl   WORD PTR [edi],bp
 ccc:	73 74                	jae    d42 <sysEnter_Vector-0x12f2be>
 cce:	72 73                	jb     d43 <sysEnter_Vector-0x12f2bd>
 cd0:	74 72                	je     d44 <sysEnter_Vector-0x12f2bc>
 cd2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 cd5:	72 63                	jb     d3a <sysEnter_Vector-0x12f2c6>
 cd7:	73 69                	jae    d42 <sysEnter_Vector-0x12f2be>
 cd9:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 cdd:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 ce0:	72 69                	jb     d4b <sysEnter_Vector-0x12f2b5>
 ce2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ce3:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 ce7:	72 73                	jb     d5c <sysEnter_Vector-0x12f2a4>
 ce9:	74 72                	je     d5d <sysEnter_Vector-0x12f2a3>
 ceb:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 cee:	63 2f                	arpl   WORD PTR [edi],bp
 cf0:	74 69                	je     d5b <sysEnter_Vector-0x12f2a5>
 cf2:	6d                   	ins    DWORD PTR es:[edi],dx
 cf3:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 cf7:	6c                   	ins    BYTE PTR es:[edi],dx
 cf8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 cf9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 cfc:	74 69                	je     d67 <sysEnter_Vector-0x12f299>
 cfe:	6d                   	ins    DWORD PTR es:[edi],dx
 cff:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 d04:	68 6f 75 72 00       	push   0x72756f
 d09:	67                   	addr16
 d0a:	65                   	gs
 d0b:	74 74                	je     d81 <sysEnter_Vector-0x12f27f>
 d0d:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 d14:	61                   	popa   
 d15:	79 6c                	jns    d83 <sysEnter_Vector-0x12f27d>
 d17:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 d1e:	7a 6e                	jp     d8e <sysEnter_Vector-0x12f272>
 d20:	61                   	popa   
 d21:	6d                   	ins    DWORD PTR es:[edi],dx
 d22:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 d26:	74 69                	je     d91 <sysEnter_Vector-0x12f26f>
 d28:	6d                   	ins    DWORD PTR es:[edi],dx
 d29:	65                   	gs
 d2a:	5f                   	pop    edi
 d2b:	72 00                	jb     d2d <sysEnter_Vector-0x12f2d3>
 d2d:	74 69                	je     d98 <sysEnter_Vector-0x12f268>
 d2f:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 d32:	54                   	push   esp
 d33:	6f                   	outs   dx,DWORD PTR ds:[esi]
 d34:	57                   	push   edi
 d35:	61                   	popa   
 d36:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 d3d:	6f 
 d3e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d3f:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 d43:	79 65                	jns    daa <sysEnter_Vector-0x12f256>
 d45:	61                   	popa   
 d46:	72 00                	jb     d48 <sysEnter_Vector-0x12f2b8>
 d48:	6d                   	ins    DWORD PTR es:[edi],dx
 d49:	6f                   	outs   dx,DWORD PTR ds:[esi]
 d4a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d4b:	74 68                	je     db5 <sysEnter_Vector-0x12f24b>
 d4d:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 d50:	74 74                	je     dc6 <sysEnter_Vector-0x12f23a>
 d52:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 d59:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 d60:	61                   	popa   
 d61:	79 6e                	jns    dd1 <sysEnter_Vector-0x12f22f>
 d63:	6f                   	outs   dx,DWORD PTR ds:[esi]
 d64:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 d67:	74 69                	je     dd2 <sysEnter_Vector-0x12f22e>
 d69:	6d                   	ins    DWORD PTR es:[edi],dx
 d6a:	65                   	gs
 d6b:	5f                   	pop    edi
 d6c:	72 49                	jb     db7 <sysEnter_Vector-0x12f249>
 d6e:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 d72:	6d                   	ins    DWORD PTR es:[edi],dx
 d73:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 d7a:	64                   	fs
 d7b:	61                   	popa   
 d7c:	79 00                	jns    d7e <sysEnter_Vector-0x12f282>
 d7e:	6c                   	ins    BYTE PTR es:[edi],dx
 d7f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 d80:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 d83:	54                   	push   esp
 d84:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 d8b:	75 66                	jne    df3 <sysEnter_Vector-0x12f20d>
 d8d:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 d91:	65                   	gs
 d92:	5f                   	pop    edi
 d93:	74 00                	je     d95 <sysEnter_Vector-0x12f26b>
 d95:	6c                   	ins    BYTE PTR es:[edi],dx
 d96:	6f                   	outs   dx,DWORD PTR ds:[esi]
 d97:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 d9a:	74 69                	je     e05 <sysEnter_Vector-0x12f1fb>
 d9c:	6d                   	ins    DWORD PTR es:[edi],dx
 d9d:	65                   	gs
 d9e:	5f                   	pop    edi
 d9f:	72 00                	jb     da1 <sysEnter_Vector-0x12f25f>
 da1:	64                   	fs
 da2:	61                   	popa   
 da3:	79 63                	jns    e08 <sysEnter_Vector-0x12f1f8>
 da5:	6c                   	ins    BYTE PTR es:[edi],dx
 da6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 da7:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 daa:	6d                   	ins    DWORD PTR es:[edi],dx
 dab:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 db0:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 db4:	67 6d                	ins    DWORD PTR es:[di],dx
 db6:	74 6f                	je     e27 <sysEnter_Vector-0x12f1d9>
 db8:	66                   	data16
 db9:	66                   	data16
 dba:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 dbe:	77 64                	ja     e24 <sysEnter_Vector-0x12f1dc>
 dc0:	61                   	popa   
 dc1:	79 00                	jns    dc3 <sysEnter_Vector-0x12f23d>
 dc3:	5f                   	pop    edi
 dc4:	79 74                	jns    e3a <sysEnter_Vector-0x12f1c6>
 dc6:	61                   	popa   
 dc7:	62 00                	bound  eax,QWORD PTR [eax]
 dc9:	74 6d                	je     e38 <sysEnter_Vector-0x12f1c8>
 dcb:	5f                   	pop    edi
 dcc:	6d                   	ins    DWORD PTR es:[edi],dx
 dcd:	64                   	fs
 dce:	61                   	popa   
 dcf:	79 00                	jns    dd1 <sysEnter_Vector-0x12f22f>
 dd1:	74 6d                	je     e40 <sysEnter_Vector-0x12f1c0>
 dd3:	5f                   	pop    edi
 dd4:	73 65                	jae    e3b <sysEnter_Vector-0x12f1c5>
 dd6:	63 00                	arpl   WORD PTR [eax],ax
 dd8:	74 6d                	je     e47 <sysEnter_Vector-0x12f1b9>
 dda:	5f                   	pop    edi
 ddb:	7a 6f                	jp     e4c <sysEnter_Vector-0x12f1b4>
 ddd:	6e                   	outs   dx,BYTE PTR ds:[esi]
 dde:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 de3:	65                   	gs
 de4:	72 00                	jb     de6 <sysEnter_Vector-0x12f21a>
 de6:	6c                   	ins    BYTE PTR es:[edi],dx
 de7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 de8:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 deb:	74 69                	je     e56 <sysEnter_Vector-0x12f1aa>
 ded:	6d                   	ins    DWORD PTR es:[edi],dx
 dee:	65                   	gs
 def:	5f                   	pop    edi
 df0:	72 49                	jb     e3b <sysEnter_Vector-0x12f1c5>
 df2:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 df5:	73 74                	jae    e6b <sysEnter_Vector-0x12f195>
 df7:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 dfa:	73 00                	jae    dfc <sysEnter_Vector-0x12f204>
 dfc:	72 65                	jb     e63 <sysEnter_Vector-0x12f19d>
 dfe:	73 75                	jae    e75 <sysEnter_Vector-0x12f18b>
 e00:	6c                   	ins    BYTE PTR es:[edi],dx
 e01:	74 00                	je     e03 <sysEnter_Vector-0x12f1fd>
 e03:	6f                   	outs   dx,DWORD PTR ds:[esi]
 e04:	76 65                	jbe    e6b <sysEnter_Vector-0x12f195>
 e06:	72 66                	jb     e6e <sysEnter_Vector-0x12f192>
 e08:	6c                   	ins    BYTE PTR es:[edi],dx
 e09:	6f                   	outs   dx,DWORD PTR ds:[esi]
 e0a:	77 00                	ja     e0c <sysEnter_Vector-0x12f1f4>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	6b 0a 00             	imul   ecx,DWORD PTR [edx],0x0
   3:	00 a5 0a 00 00 aa    	add    BYTE PTR [ebp-0x55fffff6],ah
   9:	0a 00                	or     al,BYTE PTR [eax]
   b:	00 de                	add    dh,bl
   d:	0a 00                	or     al,BYTE PTR [eax]
	...
