
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 73 2a 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000008:	05 90 43 00 00       	add    eax,0x4390
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 3b 2a 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000040:	05 58 43 00 00       	add    eax,0x4358
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 01 2a 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000007a:	05 1e 43 00 00       	add    eax,0x431e
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 ac 29 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300000cf:	05 c9 42 00 00       	add    eax,0x42c9
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 7a 29 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
30000126:	81 c3 72 42 00 00    	add    ebx,0x4272
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 34 00 00 00    	mov    DWORD PTR [ebx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 34 00 00 00    	mov    DWORD PTR [ebx+0x34],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 bb 28 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300001c0:	05 d8 41 00 00       	add    eax,0x41d8
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 e4 15 00 00       	call   300017bd <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 44 28 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000237:	05 61 41 00 00       	add    eax,0x4161
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	53                   	push   ebx
300002ea:	83 ec 14             	sub    esp,0x14
300002ed:	e8 89 27 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300002f2:	05 a6 40 00 00       	add    eax,0x40a6
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
300002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000301:	79 03                	jns    30000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
30000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
30000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
3000030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000310:	8d 50 01             	lea    edx,[eax+0x1]
30000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000316:	89 c2                	mov    edx,eax
30000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
3000031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000321:	ba 67 66 66 66       	mov    edx,0x66666667
30000326:	89 c8                	mov    eax,ecx
30000328:	f7 ea                	imul   edx
3000032a:	c1 fa 02             	sar    edx,0x2
3000032d:	89 c8                	mov    eax,ecx
3000032f:	c1 f8 1f             	sar    eax,0x1f
30000332:	29 c2                	sub    edx,eax
30000334:	89 d0                	mov    eax,edx
30000336:	c1 e0 02             	shl    eax,0x2
30000339:	01 d0                	add    eax,edx
3000033b:	01 c0                	add    eax,eax
3000033d:	29 c1                	sub    ecx,eax
3000033f:	89 ca                	mov    edx,ecx
30000341:	89 d0                	mov    eax,edx
30000343:	83 c0 30             	add    eax,0x30
30000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
30000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
3000034b:	ba 67 66 66 66       	mov    edx,0x66666667
30000350:	89 c8                	mov    eax,ecx
30000352:	f7 ea                	imul   edx
30000354:	c1 fa 02             	sar    edx,0x2
30000357:	89 c8                	mov    eax,ecx
30000359:	c1 f8 1f             	sar    eax,0x1f
3000035c:	29 c2                	sub    edx,eax
3000035e:	89 d0                	mov    eax,edx
30000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000367:	7f a4                	jg     3000030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
30000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000036d:	79 13                	jns    30000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
3000036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000372:	8d 50 01             	lea    edx,[eax+0x1]
30000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000378:	89 c2                	mov    edx,eax
3000037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000037d:	01 d0                	add    eax,edx
3000037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
30000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000388:	01 d0                	add    eax,edx
3000038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
3000038d:	83 ec 0c             	sub    esp,0xc
30000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000393:	e8 1c fe ff ff       	call   300001b4 <reverseI>
30000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
3000039b:	90                   	nop
3000039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000039f:	c9                   	leave  
300003a0:	c3                   	ret    

300003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300003a1:	55                   	push   ebp
300003a2:	89 e5                	mov    ebp,esp
300003a4:	83 ec 10             	sub    esp,0x10
300003a7:	e8 cf 26 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300003ac:	05 ec 3f 00 00       	add    eax,0x3fec
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
300003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
300003bf:	eb 28                	jmp    300003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
300003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300003c4:	89 d0                	mov    eax,edx
300003c6:	c1 e0 02             	shl    eax,0x2
300003c9:	01 d0                	add    eax,edx
300003cb:	01 c0                	add    eax,eax
300003cd:	89 c1                	mov    ecx,eax
300003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003d5:	01 d0                	add    eax,edx
300003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003da:	0f be c0             	movsx  eax,al
300003dd:	01 c8                	add    eax,ecx
300003df:	83 e8 30             	sub    eax,0x30
300003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
300003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003ef:	01 d0                	add    eax,edx
300003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003f4:	84 c0                	test   al,al
300003f6:	75 c9                	jne    300003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
300003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
300003fb:	c9                   	leave  
300003fc:	c3                   	ret    
300003fd:	66 90                	xchg   ax,ax
300003ff:	90                   	nop

30000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
30000400:	55                   	push   ebp
30000401:	89 e5                	mov    ebp,esp
30000403:	53                   	push   ebx
30000404:	83 ec 14             	sub    esp,0x14
30000407:	e8 94 26 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
3000040c:	81 c3 8c 3f 00 00    	add    ebx,0x3f8c
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
30000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
30000419:	eb 7b                	jmp    30000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
3000041b:	83 ec 0c             	sub    esp,0xc
3000041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000421:	e8 97 13 00 00       	call   300017bd <strlenI>
30000426:	83 c4 10             	add    esp,0x10
30000429:	89 c1                	mov    ecx,eax
3000042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000431:	8b 00                	mov    eax,DWORD PTR [eax]
30000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000436:	c1 e2 02             	shl    edx,0x2
30000439:	01 d0                	add    eax,edx
3000043b:	8b 00                	mov    eax,DWORD PTR [eax]
3000043d:	83 ec 04             	sub    esp,0x4
30000440:	51                   	push   ecx
30000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000444:	50                   	push   eax
30000445:	e8 0d 14 00 00       	call   30001857 <strncmpI>
3000044a:	83 c4 10             	add    esp,0x10
3000044d:	85 c0                	test   eax,eax
3000044f:	75 41                	jne    30000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
30000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000457:	8b 00                	mov    eax,DWORD PTR [eax]
30000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000045c:	c1 e2 02             	shl    edx,0x2
3000045f:	01 d0                	add    eax,edx
30000461:	8b 00                	mov    eax,DWORD PTR [eax]
30000463:	83 ec 08             	sub    esp,0x8
30000466:	8d 93 48 fb ff ff    	lea    edx,[ebx-0x4b8]
3000046c:	52                   	push   edx
3000046d:	50                   	push   eax
3000046e:	e8 c1 18 00 00       	call   30001d34 <strstrI>
30000473:	83 c4 10             	add    esp,0x10
30000476:	83 c0 01             	add    eax,0x1
30000479:	83 ec 04             	sub    esp,0x4
3000047c:	6a 32                	push   0x32
3000047e:	50                   	push   eax
3000047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000482:	e8 39 14 00 00       	call   300018c0 <strncpyI>
30000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
3000048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000048d:	83 c0 01             	add    eax,0x1
30000490:	eb 13                	jmp    300004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
30000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
30000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
3000049a:	0f 8e 7b ff ff ff    	jle    3000041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
300004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
300004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300004a8:	c9                   	leave  
300004a9:	c3                   	ret    

300004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
300004aa:	55                   	push   ebp
300004ab:	89 e5                	mov    ebp,esp
300004ad:	53                   	push   ebx
300004ae:	83 ec 14             	sub    esp,0x14
300004b1:	e8 ea 25 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
300004b6:	81 c3 e2 3e 00 00    	add    ebx,0x3ee2
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
300004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
300004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
300004ca:	e9 d5 00 00 00       	jmp    300005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
300004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004d5:	8b 00                	mov    eax,DWORD PTR [eax]
300004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004da:	c1 e2 02             	shl    edx,0x2
300004dd:	01 d0                	add    eax,edx
300004df:	8b 00                	mov    eax,DWORD PTR [eax]
300004e1:	85 c0                	test   eax,eax
300004e3:	0f 84 b7 00 00 00    	je     300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
300004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004ef:	8b 00                	mov    eax,DWORD PTR [eax]
300004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004f4:	c1 e2 02             	shl    edx,0x2
300004f7:	01 d0                	add    eax,edx
300004f9:	8b 00                	mov    eax,DWORD PTR [eax]
300004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
300004fe:	83 ec 0c             	sub    esp,0xc
30000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000504:	e8 b4 12 00 00       	call   300017bd <strlenI>
30000509:	83 c4 10             	add    esp,0x10
3000050c:	89 c1                	mov    ecx,eax
3000050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000514:	8b 00                	mov    eax,DWORD PTR [eax]
30000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000519:	c1 e2 02             	shl    edx,0x2
3000051c:	01 d0                	add    eax,edx
3000051e:	8b 00                	mov    eax,DWORD PTR [eax]
30000520:	83 ec 04             	sub    esp,0x4
30000523:	51                   	push   ecx
30000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000527:	50                   	push   eax
30000528:	e8 2a 13 00 00       	call   30001857 <strncmpI>
3000052d:	83 c4 10             	add    esp,0x10
30000530:	85 c0                	test   eax,eax
30000532:	75 6c                	jne    300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
30000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000053a:	8b 00                	mov    eax,DWORD PTR [eax]
3000053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000053f:	c1 e2 02             	shl    edx,0x2
30000542:	01 d0                	add    eax,edx
30000544:	8b 00                	mov    eax,DWORD PTR [eax]
30000546:	83 ec 08             	sub    esp,0x8
30000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000054c:	50                   	push   eax
3000054d:	e8 26 11 00 00       	call   30001678 <strcpyI>
30000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
30000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000055b:	8b 00                	mov    eax,DWORD PTR [eax]
3000055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000560:	c1 e2 02             	shl    edx,0x2
30000563:	01 d0                	add    eax,edx
30000565:	8b 00                	mov    eax,DWORD PTR [eax]
30000567:	83 ec 08             	sub    esp,0x8
3000056a:	8d 93 48 fb ff ff    	lea    edx,[ebx-0x4b8]
30000570:	52                   	push   edx
30000571:	50                   	push   eax
30000572:	e8 b3 0f 00 00       	call   3000152a <strcatI>
30000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
3000057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000580:	8b 00                	mov    eax,DWORD PTR [eax]
30000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000585:	c1 e2 02             	shl    edx,0x2
30000588:	01 d0                	add    eax,edx
3000058a:	8b 00                	mov    eax,DWORD PTR [eax]
3000058c:	83 ec 08             	sub    esp,0x8
3000058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000592:	50                   	push   eax
30000593:	e8 92 0f 00 00       	call   3000152a <strcatI>
30000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
3000059b:	e9 c6 00 00 00       	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
300005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
300005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
300005a8:	0f 8e 21 ff ff ff    	jle    300004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
300005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300005b5:	e9 a2 00 00 00       	jmp    3000065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
300005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005c0:	8b 00                	mov    eax,DWORD PTR [eax]
300005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005c5:	c1 e2 02             	shl    edx,0x2
300005c8:	01 d0                	add    eax,edx
300005ca:	8b 00                	mov    eax,DWORD PTR [eax]
300005cc:	85 c0                	test   eax,eax
300005ce:	0f 85 84 00 00 00    	jne    30000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
300005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005da:	8b 00                	mov    eax,DWORD PTR [eax]
300005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005df:	c1 e2 02             	shl    edx,0x2
300005e2:	01 d0                	add    eax,edx
300005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300005e7:	81 c2 00 02 00 00    	add    edx,0x200
300005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
300005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005f5:	8b 00                	mov    eax,DWORD PTR [eax]
300005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005fa:	c1 e2 02             	shl    edx,0x2
300005fd:	01 d0                	add    eax,edx
300005ff:	8b 00                	mov    eax,DWORD PTR [eax]
30000601:	83 ec 08             	sub    esp,0x8
30000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000607:	50                   	push   eax
30000608:	e8 6b 10 00 00       	call   30001678 <strcpyI>
3000060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
30000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000616:	8b 00                	mov    eax,DWORD PTR [eax]
30000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000061b:	c1 e2 02             	shl    edx,0x2
3000061e:	01 d0                	add    eax,edx
30000620:	8b 00                	mov    eax,DWORD PTR [eax]
30000622:	83 ec 08             	sub    esp,0x8
30000625:	8d 93 48 fb ff ff    	lea    edx,[ebx-0x4b8]
3000062b:	52                   	push   edx
3000062c:	50                   	push   eax
3000062d:	e8 f8 0e 00 00       	call   3000152a <strcatI>
30000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
30000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000063b:	8b 00                	mov    eax,DWORD PTR [eax]
3000063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000640:	c1 e2 02             	shl    edx,0x2
30000643:	01 d0                	add    eax,edx
30000645:	8b 00                	mov    eax,DWORD PTR [eax]
30000647:	83 ec 08             	sub    esp,0x8
3000064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000064d:	50                   	push   eax
3000064e:	e8 d7 0e 00 00       	call   3000152a <strcatI>
30000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
30000656:	eb 0e                	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
30000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
3000065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
30000660:	0f 8e 54 ff ff ff    	jle    300005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
30000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000669:	c9                   	leave  
3000066a:	c3                   	ret    
3000066b:	90                   	nop

3000066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
3000066c:	55                   	push   ebp
3000066d:	89 e5                	mov    ebp,esp
3000066f:	53                   	push   ebx
30000670:	83 ec 04             	sub    esp,0x4
30000673:	e8 03 24 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000678:	05 20 3d 00 00       	add    eax,0x3d20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
3000067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000683:	83 ec 04             	sub    esp,0x4
30000686:	51                   	push   ecx
30000687:	52                   	push   edx
30000688:	6a 02                	push   0x2
3000068a:	89 c3                	mov    ebx,eax
3000068c:	e8 65 02 00 00       	call   300008f6 <do_syscall2>
30000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
30000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000697:	c9                   	leave  
30000698:	c3                   	ret    

30000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
30000699:	55                   	push   ebp
3000069a:	89 e5                	mov    ebp,esp
3000069c:	53                   	push   ebx
3000069d:	83 ec 04             	sub    esp,0x4
300006a0:	e8 d6 23 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300006a5:	05 f3 3c 00 00       	add    eax,0x3cf3
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
300006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006ad:	83 ec 08             	sub    esp,0x8
300006b0:	52                   	push   edx
300006b1:	6a 03                	push   0x3
300006b3:	89 c3                	mov    ebx,eax
300006b5:	e8 7a 02 00 00       	call   30000934 <do_syscall1>
300006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
300006bd:	90                   	nop
300006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300006c1:	c9                   	leave  
300006c2:	c3                   	ret    

300006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
300006c3:	55                   	push   ebp
300006c4:	89 e5                	mov    ebp,esp
300006c6:	56                   	push   esi
300006c7:	53                   	push   ebx
300006c8:	e8 ae 23 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300006cd:	05 cb 3c 00 00       	add    eax,0x3ccb
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
300006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
300006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
300006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006de:	83 ec 0c             	sub    esp,0xc
300006e1:	56                   	push   esi
300006e2:	53                   	push   ebx
300006e3:	51                   	push   ecx
300006e4:	52                   	push   edx
300006e5:	6a 04                	push   0x4
300006e7:	89 c3                	mov    ebx,eax
300006e9:	e8 92 01 00 00       	call   30000880 <do_syscall4>
300006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
300006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
300006f4:	5b                   	pop    ebx
300006f5:	5e                   	pop    esi
300006f6:	5d                   	pop    ebp
300006f7:	c3                   	ret    

300006f8 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
300006f8:	55                   	push   ebp
300006f9:	89 e5                	mov    ebp,esp
300006fb:	53                   	push   ebx
300006fc:	83 ec 04             	sub    esp,0x4
300006ff:	e8 77 23 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000704:	05 94 3c 00 00       	add    eax,0x3c94
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
30000709:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
3000070c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
3000070f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000712:	53                   	push   ebx
30000713:	51                   	push   ecx
30000714:	52                   	push   edx
30000715:	68 04 03 00 00       	push   0x304
3000071a:	89 c3                	mov    ebx,eax
3000071c:	e8 99 01 00 00       	call   300008ba <do_syscall3>
30000721:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
30000724:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000727:	c9                   	leave  
30000728:	c3                   	ret    
30000729:	66 90                	xchg   ax,ax
3000072b:	90                   	nop

3000072c <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
3000072c:	55                   	push   ebp
3000072d:	89 e5                	mov    ebp,esp
3000072f:	53                   	push   ebx
30000730:	e8 46 23 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000735:	05 63 3c 00 00       	add    eax,0x3c63
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
3000073a:	b8 05 00 00 00       	mov    eax,0x5
3000073f:	bb 01 00 00 00       	mov    ebx,0x1
30000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000747:	89 d1                	mov    ecx,edx
30000749:	e8 fc ff ff ff       	call   3000074a <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
3000074e:	90                   	nop
3000074f:	5b                   	pop    ebx
30000750:	5d                   	pop    ebp
30000751:	c3                   	ret    

30000752 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
30000752:	55                   	push   ebp
30000753:	89 e5                	mov    ebp,esp
30000755:	53                   	push   ebx
30000756:	83 ec 14             	sub    esp,0x14
30000759:	e8 1d 23 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000075e:	05 3a 3c 00 00       	add    eax,0x3c3a
30000763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000766:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
30000769:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
3000076f:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
30000773:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
30000776:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
3000077a:	b8 05 00 00 00       	mov    eax,0x5
3000077f:	bb 01 00 00 00       	mov    ebx,0x1
30000784:	8d 55 fa             	lea    edx,[ebp-0x6]
30000787:	89 d1                	mov    ecx,edx
30000789:	e8 fc ff ff ff       	call   3000078a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
3000078e:	90                   	nop
3000078f:	83 c4 14             	add    esp,0x14
30000792:	5b                   	pop    ebx
30000793:	5d                   	pop    ebp
30000794:	c3                   	ret    

30000795 <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
30000795:	55                   	push   ebp
30000796:	89 e5                	mov    ebp,esp
30000798:	53                   	push   ebx
30000799:	83 ec 10             	sub    esp,0x10
3000079c:	e8 da 22 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300007a1:	05 f7 3b 00 00       	add    eax,0x3bf7
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300007a6:	b8 04 00 00 00       	mov    eax,0x4
300007ab:	ba 00 00 00 00       	mov    edx,0x0
300007b0:	89 d3                	mov    ebx,edx
300007b2:	e8 fc ff ff ff       	call   300007b3 <getc+0x1e>
300007b7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300007ba:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300007be:	83 c4 10             	add    esp,0x10
300007c1:	5b                   	pop    ebx
300007c2:	5d                   	pop    ebp
300007c3:	c3                   	ret    

300007c4 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300007c4:	55                   	push   ebp
300007c5:	89 e5                	mov    ebp,esp
300007c7:	53                   	push   ebx
300007c8:	83 ec 14             	sub    esp,0x14
300007cb:	e8 ab 22 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300007d0:	05 c8 3b 00 00       	add    eax,0x3bc8
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
300007d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
300007dc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
300007e0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
300007e4:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
300007e8:	74 19                	je     30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
300007ea:	83 ec 08             	sub    esp,0x8
300007ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
300007f0:	8d 90 4a fb ff ff    	lea    edx,[eax-0x4b6]
300007f6:	52                   	push   edx
300007f7:	89 c3                	mov    ebx,eax
300007f9:	e8 b0 02 00 00       	call   30000aae <printI>
300007fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000801:	eb fe                	jmp    30000801 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
30000803:	b8 04 00 00 00       	mov    eax,0x4
30000808:	ba 00 00 00 00       	mov    edx,0x0
3000080d:	89 d3                	mov    ebx,edx
3000080f:	e8 fc ff ff ff       	call   30000810 <gets+0x4c>
30000814:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
30000817:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
3000081b:	75 17                	jne    30000834 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
3000081d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000821:	7e 11                	jle    30000834 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
30000823:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000829:	01 d0                	add    eax,edx
3000082b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
3000082e:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
30000832:	eb 43                	jmp    30000877 <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
30000834:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
30000838:	74 33                	je     3000086d <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
3000083a:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
3000083e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000841:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000844:	8d 50 01             	lea    edx,[eax+0x1]
30000847:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000084a:	89 c2                	mov    edx,eax
3000084c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000084f:	01 c2                	add    edx,eax
30000851:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000855:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
30000857:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000085a:	83 c0 01             	add    eax,0x1
3000085d:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000860:	7d 06                	jge    30000868 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
30000862:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
30000866:	75 9b                	jne    30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
30000868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000086b:	eb 0c                	jmp    30000879 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
3000086d:	b8 02 03 00 00       	mov    eax,0x302
30000872:	e8 fc ff ff ff       	call   30000873 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
30000877:	eb 8a                	jmp    30000803 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
30000879:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000087c:	c9                   	leave  
3000087d:	c3                   	ret    
3000087e:	66 90                	xchg   ax,ax

30000880 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
extern void sysEnter_Vector();
bool libcInitialized = false;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
30000880:	55                   	push   ebp
30000881:	89 e5                	mov    ebp,esp
30000883:	56                   	push   esi
30000884:	53                   	push   ebx
30000885:	83 ec 10             	sub    esp,0x10
30000888:	e8 ee 21 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000088d:	05 0b 3b 00 00       	add    eax,0x3b0b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
30000892:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
30000899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000089c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
3000089f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008a5:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
300008a8:	e8 fc ff ff ff       	call   300008a9 <do_syscall4+0x29>
300008ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
300008b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
300008b3:	83 c4 10             	add    esp,0x10
300008b6:	5b                   	pop    ebx
300008b7:	5e                   	pop    esi
300008b8:	5d                   	pop    ebp
300008b9:	c3                   	ret    

300008ba <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
300008ba:	55                   	push   ebp
300008bb:	89 e5                	mov    ebp,esp
300008bd:	56                   	push   esi
300008be:	53                   	push   ebx
300008bf:	83 ec 10             	sub    esp,0x10
300008c2:	e8 b4 21 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300008c7:	05 d1 3a 00 00       	add    eax,0x3ad1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
300008cc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
300008d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300008d6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300008d9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008dc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008df:	be 00 00 00 00       	mov    esi,0x0
300008e4:	e8 fc ff ff ff       	call   300008e5 <do_syscall3+0x2b>
300008e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
300008ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
300008ef:	83 c4 10             	add    esp,0x10
300008f2:	5b                   	pop    ebx
300008f3:	5e                   	pop    esi
300008f4:	5d                   	pop    ebp
300008f5:	c3                   	ret    

300008f6 <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
300008f6:	55                   	push   ebp
300008f7:	89 e5                	mov    ebp,esp
300008f9:	56                   	push   esi
300008fa:	53                   	push   ebx
300008fb:	83 ec 10             	sub    esp,0x10
300008fe:	e8 78 21 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000903:	05 95 3a 00 00       	add    eax,0x3a95
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
30000908:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
3000090f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000912:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000915:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000918:	ba 00 00 00 00       	mov    edx,0x0
3000091d:	be 00 00 00 00       	mov    esi,0x0
30000922:	e8 fc ff ff ff       	call   30000923 <do_syscall2+0x2d>
30000927:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
3000092a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
3000092d:	83 c4 10             	add    esp,0x10
30000930:	5b                   	pop    ebx
30000931:	5e                   	pop    esi
30000932:	5d                   	pop    ebp
30000933:	c3                   	ret    

30000934 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
30000934:	55                   	push   ebp
30000935:	89 e5                	mov    ebp,esp
30000937:	56                   	push   esi
30000938:	53                   	push   ebx
30000939:	83 ec 10             	sub    esp,0x10
3000093c:	e8 3a 21 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000941:	05 57 3a 00 00       	add    eax,0x3a57
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
30000946:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
3000094d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000950:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000953:	b9 00 00 00 00       	mov    ecx,0x0
30000958:	ba 00 00 00 00       	mov    edx,0x0
3000095d:	be 00 00 00 00       	mov    esi,0x0
30000962:	e8 fc ff ff ff       	call   30000963 <do_syscall1+0x2f>
30000967:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
3000096a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
3000096d:	83 c4 10             	add    esp,0x10
30000970:	5b                   	pop    ebx
30000971:	5e                   	pop    esi
30000972:	5d                   	pop    ebp
30000973:	c3                   	ret    

30000974 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
30000974:	55                   	push   ebp
30000975:	89 e5                	mov    ebp,esp
30000977:	56                   	push   esi
30000978:	53                   	push   ebx
30000979:	83 ec 10             	sub    esp,0x10
3000097c:	e8 fa 20 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000981:	05 17 3a 00 00       	add    eax,0x3a17
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
30000986:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
3000098d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000990:	bb 00 00 00 00       	mov    ebx,0x0
30000995:	b9 00 00 00 00       	mov    ecx,0x0
3000099a:	ba 00 00 00 00       	mov    edx,0x0
3000099f:	be 00 00 00 00       	mov    esi,0x0
300009a4:	e8 fc ff ff ff       	call   300009a5 <do_syscall0+0x31>
300009a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
300009ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
300009af:	83 c4 10             	add    esp,0x10
300009b2:	5b                   	pop    ebx
300009b3:	5e                   	pop    esi
300009b4:	5d                   	pop    ebp
300009b5:	c3                   	ret    

300009b6 <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
300009b6:	55                   	push   ebp
300009b7:	89 e5                	mov    ebp,esp
300009b9:	53                   	push   ebx
300009ba:	83 ec 04             	sub    esp,0x4
300009bd:	e8 de 20 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
300009c2:	81 c3 d6 39 00 00    	add    ebx,0x39d6
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
300009c8:	83 ec 08             	sub    esp,0x8
300009cb:	8d 83 68 fb ff ff    	lea    eax,[ebx-0x498]
300009d1:	50                   	push   eax
300009d2:	68 00 00 00 02       	push   0x2000000
300009d7:	e8 06 01 00 00       	call   30000ae2 <printdI>
300009dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
300009df:	0f b6 83 38 00 00 00 	movzx  eax,BYTE PTR [ebx+0x38]
300009e6:	83 f0 01             	xor    eax,0x1
300009e9:	84 c0                	test   al,al
300009eb:	74 56                	je     30000a43 <libc_init+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
300009ed:	e8 6e 04 00 00       	call   30000e60 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
300009f2:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
300009f5:	89 c2                	mov    edx,eax
300009f7:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300009fd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        do_syscall0(SYSCALL_INVALID);
300009ff:	83 ec 0c             	sub    esp,0xc
30000a02:	6a 00                	push   0x0
30000a04:	e8 6b ff ff ff       	call   30000974 <do_syscall0>
30000a09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
30000a0c:	8d 83 c3 c6 ff ff    	lea    eax,[ebx-0x393d]
30000a12:	83 ec 08             	sub    esp,0x8
30000a15:	50                   	push   eax
30000a16:	68 63 01 00 00       	push   0x163
30000a1b:	e8 14 ff ff ff       	call   30000934 <do_syscall1>
30000a20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        libcInitialized = true;
30000a23:	c6 83 38 00 00 00 01 	mov    BYTE PTR [ebx+0x38],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        printdI(DEBUG_LIBC,"***libc_init completed\n");
30000a2a:	83 ec 08             	sub    esp,0x8
30000a2d:	8d 83 80 fb ff ff    	lea    eax,[ebx-0x480]
30000a33:	50                   	push   eax
30000a34:	68 00 00 00 02       	push   0x2000000
30000a39:	e8 a4 00 00 00       	call   30000ae2 <printdI>
30000a3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
    }
    else
        printI("libc_init called previously, exiting\n");
}
30000a41:	eb 12                	jmp    30000a55 <libc_init+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
30000a43:	83 ec 0c             	sub    esp,0xc
30000a46:	8d 83 98 fb ff ff    	lea    eax,[ebx-0x468]
30000a4c:	50                   	push   eax
30000a4d:	e8 5c 00 00 00       	call   30000aae <printI>
30000a52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
}
30000a55:	90                   	nop
30000a56:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000a59:	c9                   	leave  
30000a5a:	c3                   	ret    

30000a5b <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69

void __attribute__((destructor)) libc_cleanup(void)
{
30000a5b:	55                   	push   ebp
30000a5c:	89 e5                	mov    ebp,esp
30000a5e:	53                   	push   ebx
30000a5f:	83 ec 04             	sub    esp,0x4
30000a62:	e8 14 20 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000a67:	05 31 39 00 00       	add    eax,0x3931
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    malloc_cleanup();
30000a6c:	89 c3                	mov    ebx,eax
30000a6e:	e8 28 07 00 00       	call   3000119b <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
}
30000a73:	90                   	nop
30000a74:	83 c4 04             	add    esp,0x4
30000a77:	5b                   	pop    ebx
30000a78:	5d                   	pop    ebp
30000a79:	c3                   	ret    

30000a7a <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74

VISIBLE int print(const char *format, ...)
{
30000a7a:	55                   	push   ebp
30000a7b:	89 e5                	mov    ebp,esp
30000a7d:	83 ec 10             	sub    esp,0x10
30000a80:	e8 f6 1f 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000a85:	05 13 39 00 00       	add    eax,0x3913
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
    va_list args;
    va_start( args, format );
30000a8a:	8d 45 0c             	lea    eax,[ebp+0xc]
30000a8d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000a90:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000a93:	89 c2                	mov    edx,eax
30000a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000a98:	52                   	push   edx
30000a99:	50                   	push   eax
30000a9a:	68 00 03 00 00       	push   0x300
30000a9f:	e8 52 fe ff ff       	call   300008f6 <do_syscall2>
30000aa4:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    return 0;
30000aa7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
}
30000aac:	c9                   	leave  
30000aad:	c3                   	ret    

30000aae <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82

int printI(const char *format, ...)
{
30000aae:	55                   	push   ebp
30000aaf:	89 e5                	mov    ebp,esp
30000ab1:	83 ec 10             	sub    esp,0x10
30000ab4:	e8 c2 1f 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000ab9:	05 df 38 00 00       	add    eax,0x38df
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    va_list args;
    va_start( args, format );
30000abe:	8d 45 0c             	lea    eax,[ebp+0xc]
30000ac1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000ac4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ac7:	89 c2                	mov    edx,eax
30000ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000acc:	52                   	push   edx
30000acd:	50                   	push   eax
30000ace:	68 00 03 00 00       	push   0x300
30000ad3:	e8 1e fe ff ff       	call   300008f6 <do_syscall2>
30000ad8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
    return 0;
30000adb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
}
30000ae0:	c9                   	leave  
30000ae1:	c3                   	ret    

30000ae2 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90

int printdI(uint32_t DebugLevel, const char *format, ...)
{
30000ae2:	55                   	push   ebp
30000ae3:	89 e5                	mov    ebp,esp
30000ae5:	83 ec 10             	sub    esp,0x10
30000ae8:	e8 8e 1f 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000aed:	05 ab 38 00 00       	add    eax,0x38ab
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    va_list args;
    va_start( args, format );
30000af2:	8d 45 10             	lea    eax,[ebp+0x10]
30000af5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
30000af8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000afb:	89 c2                	mov    edx,eax
30000afd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000b00:	52                   	push   edx
30000b01:	50                   	push   eax
30000b02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000b05:	68 01 03 00 00       	push   0x301
30000b0a:	e8 ab fd ff ff       	call   300008ba <do_syscall3>
30000b0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
    return 0;
30000b12:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:96
}
30000b17:	c9                   	leave  
30000b18:	c3                   	ret    

30000b19 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:99

VISIBLE unsigned int sleep (unsigned int __seconds)
{
30000b19:	55                   	push   ebp
30000b1a:	89 e5                	mov    ebp,esp
30000b1c:	56                   	push   esi
30000b1d:	53                   	push   ebx
30000b1e:	83 ec 10             	sub    esp,0x10
30000b21:	e8 55 1f 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000b26:	05 72 38 00 00       	add    eax,0x3872
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    SLEEP_SECONDS(__seconds)
30000b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b2e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
30000b31:	b8 70 01 00 00       	mov    eax,0x170
30000b36:	bb 00 00 00 00       	mov    ebx,0x0
30000b3b:	b9 00 00 00 00       	mov    ecx,0x0
30000b40:	ba 00 00 00 00       	mov    edx,0x0
30000b45:	be 00 00 00 00       	mov    esi,0x0
30000b4a:	e8 fc ff ff ff       	call   30000b4b <sleep+0x32>
30000b4f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b55:	6b d0 64             	imul   edx,eax,0x64
30000b58:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000b5b:	01 d0                	add    eax,edx
30000b5d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000b60:	b8 66 01 00 00       	mov    eax,0x166
30000b65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000b68:	b9 00 00 00 00       	mov    ecx,0x0
30000b6d:	ba 00 00 00 00       	mov    edx,0x0
30000b72:	be 00 00 00 00       	mov    esi,0x0
30000b77:	e8 fc ff ff ff       	call   30000b78 <sleep+0x5f>
30000b7c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
    return 0;
30000b7f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
}
30000b84:	83 c4 10             	add    esp,0x10
30000b87:	5b                   	pop    ebx
30000b88:	5e                   	pop    esi
30000b89:	5d                   	pop    ebp
30000b8a:	c3                   	ret    

30000b8b <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:105

void stop()
{
30000b8b:	55                   	push   ebp
30000b8c:	89 e5                	mov    ebp,esp
30000b8e:	e8 e8 1e 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000b93:	05 05 38 00 00       	add    eax,0x3805
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106
    do_syscall0(SYSCALL_STOP);
30000b98:	68 68 01 00 00       	push   0x168
30000b9d:	e8 d2 fd ff ff       	call   30000974 <do_syscall0>
30000ba2:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
}
30000ba5:	90                   	nop
30000ba6:	c9                   	leave  
30000ba7:	c3                   	ret    

30000ba8 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000ba8:	55                   	push   ebp
30000ba9:	89 e5                	mov    ebp,esp
30000bab:	e8 cb 1e 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000bb0:	05 e8 37 00 00       	add    eax,0x37e8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000bb5:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000bb8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bbe:	51                   	push   ecx
30000bbf:	52                   	push   edx
30000bc0:	50                   	push   eax
30000bc1:	68 67 01 00 00       	push   0x167
30000bc6:	e8 ef fc ff ff       	call   300008ba <do_syscall3>
30000bcb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
30000bce:	90                   	nop
30000bcf:	c9                   	leave  
30000bd0:	c3                   	ret    

30000bd1 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int fork()
{
30000bd1:	55                   	push   ebp
30000bd2:	89 e5                	mov    ebp,esp
30000bd4:	e8 a2 1e 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000bd9:	05 bf 37 00 00       	add    eax,0x37bf
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116
    return do_syscall0(SYSCALL_FORK);
30000bde:	6a 06                	push   0x6
30000be0:	e8 8f fd ff ff       	call   30000974 <do_syscall0>
30000be5:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
}
30000be8:	c9                   	leave  
30000be9:	c3                   	ret    

30000bea <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120

VISIBLE int exec(char* path)
{
30000bea:	55                   	push   ebp
30000beb:	89 e5                	mov    ebp,esp
30000bed:	53                   	push   ebx
30000bee:	83 ec 24             	sub    esp,0x24
30000bf1:	e8 aa 1e 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
30000bf6:	81 c3 a2 37 00 00    	add    ebx,0x37a2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121
    int pid=0, argc=0;
30000bfc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
30000c03:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:123
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
30000c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c0d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c13:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
    char* program;
    program=mallocI(512);
30000c16:	83 ec 0c             	sub    esp,0xc
30000c19:	68 00 02 00 00       	push   0x200
30000c1e:	e8 69 03 00 00       	call   30000f8c <mallocI>
30000c23:	83 c4 10             	add    esp,0x10
30000c26:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128
    do
    {
        spacePtr=strstrI(spacePtr," ");
30000c29:	83 ec 08             	sub    esp,0x8
30000c2c:	8d 83 be fb ff ff    	lea    eax,[ebx-0x442]
30000c32:	50                   	push   eax
30000c33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000c36:	e8 f9 10 00 00       	call   30001d34 <strstrI>
30000c3b:	83 c4 10             	add    esp,0x10
30000c3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
        if (argc==0)
30000c41:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000c45:	75 44                	jne    30000c8b <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:131
        {
            if (spacePtr==0)
30000c47:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000c4b:	75 22                	jne    30000c6f <exec+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
                strncpyI(program, path, strlenI(path));
30000c4d:	83 ec 0c             	sub    esp,0xc
30000c50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c53:	e8 65 0b 00 00       	call   300017bd <strlenI>
30000c58:	83 c4 10             	add    esp,0x10
30000c5b:	83 ec 04             	sub    esp,0x4
30000c5e:	50                   	push   eax
30000c5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c62:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000c65:	e8 56 0c 00 00       	call   300018c0 <strncpyI>
30000c6a:	83 c4 10             	add    esp,0x10
30000c6d:	eb 1c                	jmp    30000c8b <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
            else
                strncpyI(program, path, spacePtr-path);
30000c6f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c75:	29 c2                	sub    edx,eax
30000c77:	89 d0                	mov    eax,edx
30000c79:	83 ec 04             	sub    esp,0x4
30000c7c:	50                   	push   eax
30000c7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c80:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000c83:	e8 38 0c 00 00       	call   300018c0 <strncpyI>
30000c88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
        }
        argc++;
30000c8b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
            
    } while (spacePtr++);
30000c8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000c92:	8d 50 01             	lea    edx,[eax+0x1]
30000c95:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000c98:	85 c0                	test   eax,eax
30000c9a:	75 8d                	jne    30000c29 <exec+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140
    
    argv=mallocI((argc*50)+(argc*4));
30000c9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000c9f:	6b c0 36             	imul   eax,eax,0x36
30000ca2:	83 ec 0c             	sub    esp,0xc
30000ca5:	50                   	push   eax
30000ca6:	e8 e1 02 00 00       	call   30000f8c <mallocI>
30000cab:	83 c4 10             	add    esp,0x10
30000cae:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    int argvPtr=4*argc;
30000cb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000cb4:	c1 e0 02             	shl    eax,0x2
30000cb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    spacePtr=path;
30000cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cbd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    for (int cnt=0;cnt<argc; cnt++)
30000cc0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
30000cc7:	e9 c8 00 00 00       	jmp    30000d94 <exec+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:145
    {
        argv[cnt]=(char*)argv+argvPtr;
30000ccc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000ccf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000cd6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000cd9:	01 d0                	add    eax,edx
30000cdb:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
30000cde:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000ce1:	01 ca                	add    edx,ecx
30000ce3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146
        spacePtr=strstrI(spacePtr," ");
30000ce5:	83 ec 08             	sub    esp,0x8
30000ce8:	8d 83 be fb ff ff    	lea    eax,[ebx-0x442]
30000cee:	50                   	push   eax
30000cef:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000cf2:	e8 3d 10 00 00       	call   30001d34 <strstrI>
30000cf7:	83 c4 10             	add    esp,0x10
30000cfa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
        if (spacePtr)
30000cfd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000d01:	74 2f                	je     30000d32 <exec+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
30000d03:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000d06:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000d09:	29 c2                	sub    edx,eax
30000d0b:	89 d0                	mov    eax,edx
30000d0d:	89 c1                	mov    ecx,eax
30000d0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d12:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d19:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d1c:	01 d0                	add    eax,edx
30000d1e:	8b 00                	mov    eax,DWORD PTR [eax]
30000d20:	83 ec 04             	sub    esp,0x4
30000d23:	51                   	push   ecx
30000d24:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d27:	50                   	push   eax
30000d28:	e8 93 0b 00 00       	call   300018c0 <strncpyI>
30000d2d:	83 c4 10             	add    esp,0x10
30000d30:	eb 31                	jmp    30000d63 <exec+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:150
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
30000d32:	83 ec 0c             	sub    esp,0xc
30000d35:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d38:	e8 80 0a 00 00       	call   300017bd <strlenI>
30000d3d:	83 c4 10             	add    esp,0x10
30000d40:	89 c2                	mov    edx,eax
30000d42:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d45:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
30000d4c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d4f:	01 c8                	add    eax,ecx
30000d51:	8b 00                	mov    eax,DWORD PTR [eax]
30000d53:	83 ec 04             	sub    esp,0x4
30000d56:	52                   	push   edx
30000d57:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d5a:	50                   	push   eax
30000d5b:	e8 60 0b 00 00       	call   300018c0 <strncpyI>
30000d60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151 (discriminator 2)
        strtrimI(argv[cnt]);
30000d63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d66:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d6d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d70:	01 d0                	add    eax,edx
30000d72:	8b 00                	mov    eax,DWORD PTR [eax]
30000d74:	83 ec 0c             	sub    esp,0xc
30000d77:	50                   	push   eax
30000d78:	e8 ff 0e 00 00       	call   30001c7c <strtrimI>
30000d7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152 (discriminator 2)
        lastSpacePtr=spacePtr++;
30000d80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000d83:	8d 50 01             	lea    edx,[eax+0x1]
30000d86:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000d89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153 (discriminator 2)
        argvPtr+=50;
30000d8c:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
30000d90:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143 (discriminator 1)
30000d94:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d97:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30000d9a:	0f 8c 2c ff ff ff    	jl     30000ccc <exec+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    //Using the syscall is breaking the stack
//    SYSCALL3(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000da0:	83 ec 04             	sub    esp,0x4
30000da3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000da6:	8d 83 c0 fb ff ff    	lea    eax,[ebx-0x440]
30000dac:	50                   	push   eax
30000dad:	68 00 00 00 02       	push   0x2000000
30000db2:	e8 2b fd ff ff       	call   30000ae2 <printdI>
30000db7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
    __asm__("push ds\nint 0x80\npop ds\n"
30000dba:	b8 59 00 00 00       	mov    eax,0x59
30000dbf:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30000dc2:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30000dc5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000dc8:	1e                   	push   ds
30000dc9:	cd 80                	int    0x80
30000dcb:	1f                   	pop    ds
30000dcc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:161
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));
    return pid;
30000dcf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
    freeI(argv);
    freeI(program);
}
30000dd2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000dd5:	c9                   	leave  
30000dd6:	c3                   	ret    

30000dd7 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167

VISIBLE int execa(char* path, int argc, char** argv)
{
30000dd7:	55                   	push   ebp
30000dd8:	89 e5                	mov    ebp,esp
30000dda:	53                   	push   ebx
30000ddb:	83 ec 10             	sub    esp,0x10
30000dde:	e8 98 1c 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000de3:	05 b5 35 00 00       	add    eax,0x35b5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    int pid=0;
30000de8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
    //Using the syscall is breaking the stack
//    SYSCALL3(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000def:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000df2:	8d 80 c0 fb ff ff    	lea    eax,[eax-0x440]
30000df8:	50                   	push   eax
30000df9:	68 00 00 00 02       	push   0x2000000
30000dfe:	e8 df fc ff ff       	call   30000ae2 <printdI>
30000e03:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
    __asm__("push ds\nint 0x80\npop ds\n"
30000e06:	b8 59 00 00 00       	mov    eax,0x59
30000e0b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000e0e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000e11:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
30000e14:	1e                   	push   ds
30000e15:	cd 80                	int    0x80
30000e17:	1f                   	pop    ds
30000e18:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
            :"=a" (pid)
            :"a" (0x59),"b" (path),"c" (argc),"d" (argv));
    return pid;
30000e1b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
}
30000e1e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000e21:	c9                   	leave  
30000e22:	c3                   	ret    

30000e23 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179

VISIBLE int waitpid(uint32_t pid)
{
30000e23:	55                   	push   ebp
30000e24:	89 e5                	mov    ebp,esp
30000e26:	e8 50 1c 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000e2b:	05 6d 35 00 00       	add    eax,0x356d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    return do_syscall1(SYSCALL_WAITFORPID,pid);
30000e30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e33:	6a 61                	push   0x61
30000e35:	e8 fa fa ff ff       	call   30000934 <do_syscall1>
30000e3a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
}
30000e3d:	c9                   	leave  
30000e3e:	c3                   	ret    

30000e3f <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184

VISIBLE char* getcwd(char* buf, size_t size)
{
30000e3f:	55                   	push   ebp
30000e40:	89 e5                	mov    ebp,esp
30000e42:	e8 34 1c 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000e47:	05 51 35 00 00       	add    eax,0x3551
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
30000e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000e4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000e52:	50                   	push   eax
30000e53:	6a 4f                	push   0x4f
30000e55:	e8 9c fa ff ff       	call   300008f6 <do_syscall2>
30000e5a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
}
30000e5d:	c9                   	leave  
30000e5e:	c3                   	ret    
30000e5f:	90                   	nop

30000e60 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30000e60:	55                   	push   ebp
30000e61:	89 e5                	mov    ebp,esp
30000e63:	53                   	push   ebx
30000e64:	83 ec 04             	sub    esp,0x4
30000e67:	e8 34 1c 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
30000e6c:	81 c3 2c 35 00 00    	add    ebx,0x352c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
30000e72:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000e78:	8b 00                	mov    eax,DWORD PTR [eax]
30000e7a:	50                   	push   eax
30000e7b:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000e81:	50                   	push   eax
30000e82:	8d 83 d4 fb ff ff    	lea    eax,[ebx-0x42c]
30000e88:	50                   	push   eax
30000e89:	68 00 00 00 01       	push   0x1000000
30000e8e:	e8 4f fc ff ff       	call   30000ae2 <printdI>
30000e93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
30000e96:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000e9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
30000ea2:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000ea8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
30000eae:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000eb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    libcTZ=-5;
30000eba:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
30000ec0:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20

}
30000ec6:	90                   	nop
30000ec7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000eca:	c9                   	leave  
30000ecb:	c3                   	ret    

30000ecc <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
30000ecc:	55                   	push   ebp
30000ecd:	89 e5                	mov    ebp,esp
30000ecf:	83 ec 10             	sub    esp,0x10
30000ed2:	e8 a4 1b 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000ed7:	05 c1 34 00 00       	add    eax,0x34c1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
30000edc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000edf:	83 c2 20             	add    edx,0x20
30000ee2:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30000ee5:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000eeb:	8b 0a                	mov    ecx,DWORD PTR [edx]
30000eed:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000ef0:	01 d1                	add    ecx,edx
30000ef2:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
30000ef8:	8b 12                	mov    edx,DWORD PTR [edx]
30000efa:	39 d1                	cmp    ecx,edx
30000efc:	76 4e                	jbe    30000f4c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
30000efe:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000f04:	8b 12                	mov    edx,DWORD PTR [edx]
30000f06:	8b 80 ec ff ff ff    	mov    eax,DWORD PTR [eax-0x14]
30000f0c:	8b 00                	mov    eax,DWORD PTR [eax]
30000f0e:	29 c2                	sub    edx,eax
30000f10:	89 d0                	mov    eax,edx
30000f12:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
        if (newSize== 0 || newSize%PAGE_SIZE)
30000f15:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
30000f19:	74 0c                	je     30000f27 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32 (discriminator 1)
30000f1b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f1e:	25 ff 0f 00 00       	and    eax,0xfff
30000f23:	85 c0                	test   eax,eax
30000f25:	74 10                	je     30000f37 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
30000f27:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f2a:	25 00 f0 ff ff       	and    eax,0xfffff000
30000f2f:	05 00 10 00 00       	add    eax,0x1000
30000f34:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
30000f37:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
30000f3e:	77 07                	ja     30000f47 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
            return ALLOC_REQUEST_SIZE;
30000f40:	b8 00 20 03 00       	mov    eax,0x32000
30000f45:	eb 0a                	jmp    30000f51 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        else
            return newSize;
30000f47:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f4a:	eb 05                	jmp    30000f51 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
    }
    else
        return 0;
30000f4c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
}
30000f51:	c9                   	leave  
30000f52:	c3                   	ret    

30000f53 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47

void freeI(void* fpointer)
{
30000f53:	55                   	push   ebp
30000f54:	89 e5                	mov    ebp,esp
30000f56:	83 ec 10             	sub    esp,0x10
30000f59:	e8 1d 1b 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30000f5e:	05 3a 34 00 00       	add    eax,0x343a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30000f63:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000f67:	74 20                	je     30000f89 <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30000f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000f6c:	83 e8 10             	sub    eax,0x10
30000f6f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
30000f72:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f75:	8b 00                	mov    eax,DWORD PTR [eax]
30000f77:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
30000f7c:	74 02                	je     30000f80 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
30000f7e:	eb fe                	jmp    30000f7e <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    }
    mp->inUse=false;
30000f80:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f83:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
30000f87:	eb 01                	jmp    30000f8a <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
30000f89:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
30000f8a:	c9                   	leave  
30000f8b:	c3                   	ret    

30000f8c <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
30000f8c:	55                   	push   ebp
30000f8d:	89 e5                	mov    ebp,esp
30000f8f:	53                   	push   ebx
30000f90:	83 ec 24             	sub    esp,0x24
30000f93:	e8 08 1b 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
30000f98:	81 c3 00 34 00 00    	add    ebx,0x3400
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
30000f9e:	83 ec 04             	sub    esp,0x4
30000fa1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000fa4:	8d 83 f7 fb ff ff    	lea    eax,[ebx-0x409]
30000faa:	50                   	push   eax
30000fab:	68 00 00 00 01       	push   0x1000000
30000fb0:	e8 2d fb ff ff       	call   30000ae2 <printdI>
30000fb5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
30000fb8:	83 ec 0c             	sub    esp,0xc
30000fbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000fbe:	e8 09 ff ff ff       	call   30000ecc <newHeapRequiredToFulfillRequest>
30000fc3:	83 c4 10             	add    esp,0x10
30000fc6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
30000fc9:	83 ec 04             	sub    esp,0x4
30000fcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30000fcf:	8d 83 07 fc ff ff    	lea    eax,[ebx-0x3f9]
30000fd5:	50                   	push   eax
30000fd6:	68 00 00 00 01       	push   0x1000000
30000fdb:	e8 02 fb ff ff       	call   30000ae2 <printdI>
30000fe0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
30000fe3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000fe7:	0f 84 ae 00 00 00    	je     3000109b <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
30000fed:	83 ec 08             	sub    esp,0x8
30000ff0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30000ff3:	68 65 01 00 00       	push   0x165
30000ff8:	e8 37 f9 ff ff       	call   30000934 <do_syscall1>
30000ffd:	83 c4 10             	add    esp,0x10
30001000:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
30001003:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001009:	8b 00                	mov    eax,DWORD PTR [eax]
3000100b:	83 ec 04             	sub    esp,0x4
3000100e:	50                   	push   eax
3000100f:	8d 83 23 fc ff ff    	lea    eax,[ebx-0x3dd]
30001015:	50                   	push   eax
30001016:	68 00 00 00 01       	push   0x1000000
3000101b:	e8 c2 fa ff ff       	call   30000ae2 <printdI>
30001020:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
30001023:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001026:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001029:	01 c2                	add    edx,eax
3000102b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001031:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
30001033:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001039:	8b 00                	mov    eax,DWORD PTR [eax]
3000103b:	83 ec 0c             	sub    esp,0xc
3000103e:	50                   	push   eax
3000103f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001042:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001045:	8d 83 40 fc ff ff    	lea    eax,[ebx-0x3c0]
3000104b:	50                   	push   eax
3000104c:	68 00 00 00 01       	push   0x1000000
30001051:	e8 8c fa ff ff       	call   30000ae2 <printdI>
30001056:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
30001059:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
3000105f:	8b 00                	mov    eax,DWORD PTR [eax]
30001061:	85 c0                	test   eax,eax
30001063:	75 36                	jne    3000109b <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
30001065:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000106b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000106e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
30001070:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30001076:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001079:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
3000107b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001081:	8b 00                	mov    eax,DWORD PTR [eax]
30001083:	83 ec 04             	sub    esp,0x4
30001086:	50                   	push   eax
30001087:	8d 83 80 fc ff ff    	lea    eax,[ebx-0x380]
3000108d:	50                   	push   eax
3000108e:	68 00 00 00 01       	push   0x1000000
30001093:	e8 4a fa ff ff       	call   30000ae2 <printdI>
30001098:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
3000109b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010a1:	8b 00                	mov    eax,DWORD PTR [eax]
300010a3:	83 ec 04             	sub    esp,0x4
300010a6:	50                   	push   eax
300010a7:	8d 83 bc fc ff ff    	lea    eax,[ebx-0x344]
300010ad:	50                   	push   eax
300010ae:	68 00 00 00 01       	push   0x1000000
300010b3:	e8 2a fa ff ff       	call   30000ae2 <printdI>
300010b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
300010bb:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010c1:	8b 00                	mov    eax,DWORD PTR [eax]
300010c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
300010c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300010c9:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
300010cf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300010d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300010d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
300010d8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300010db:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
300010df:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010e5:	8b 00                	mov    eax,DWORD PTR [eax]
300010e7:	6a 10                	push   0x10
300010e9:	50                   	push   eax
300010ea:	8d 83 e4 fc ff ff    	lea    eax,[ebx-0x31c]
300010f0:	50                   	push   eax
300010f1:	68 00 00 00 01       	push   0x1000000
300010f6:	e8 e7 f9 ff ff       	call   30000ae2 <printdI>
300010fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
300010fe:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001104:	8b 00                	mov    eax,DWORD PTR [eax]
30001106:	83 c0 10             	add    eax,0x10
30001109:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
3000110c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000110f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30001112:	8d 50 10             	lea    edx,[eax+0x10]
30001115:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001118:	01 d0                	add    eax,edx
3000111a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
3000111d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30001120:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001123:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
30001126:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000112c:	8b 10                	mov    edx,DWORD PTR [eax]
3000112e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001131:	01 d0                	add    eax,edx
30001133:	8d 50 10             	lea    edx,[eax+0x10]
30001136:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000113c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
3000113e:	83 ec 04             	sub    esp,0x4
30001141:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
30001144:	8d 83 1c fd ff ff    	lea    eax,[ebx-0x2e4]
3000114a:	50                   	push   eax
3000114b:	68 00 00 00 01       	push   0x1000000
30001150:	e8 8d f9 ff ff       	call   30000ae2 <printdI>
30001155:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
30001158:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
3000115b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000115e:	c9                   	leave  
3000115f:	c3                   	ret    

30001160 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
30001160:	55                   	push   ebp
30001161:	89 e5                	mov    ebp,esp
30001163:	83 ec 08             	sub    esp,0x8
30001166:	e8 10 19 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000116b:	05 2d 32 00 00       	add    eax,0x322d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
30001170:	83 ec 0c             	sub    esp,0xc
30001173:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001176:	e8 11 fe ff ff       	call   30000f8c <mallocI>
3000117b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
3000117e:	c9                   	leave  
3000117f:	c3                   	ret    

30001180 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

__attribute__((visibility("default"))) void free(void* fpointer)
{
30001180:	55                   	push   ebp
30001181:	89 e5                	mov    ebp,esp
30001183:	e8 f3 18 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001188:	05 10 32 00 00       	add    eax,0x3210
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110
    freeI(fpointer);
3000118d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001190:	e8 be fd ff ff       	call   30000f53 <freeI>
30001195:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:111
}
30001198:	90                   	nop
30001199:	c9                   	leave  
3000119a:	c3                   	ret    

3000119b <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114

void malloc_cleanup()
{
3000119b:	55                   	push   ebp
3000119c:	89 e5                	mov    ebp,esp
3000119e:	53                   	push   ebx
3000119f:	83 ec 04             	sub    esp,0x4
300011a2:	e8 d4 18 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300011a7:	05 f1 31 00 00       	add    eax,0x31f1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    do_syscall1(SYSCALL_FREE, heapBase);
300011ac:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
300011b2:	8b 12                	mov    edx,DWORD PTR [edx]
300011b4:	83 ec 08             	sub    esp,0x8
300011b7:	52                   	push   edx
300011b8:	68 64 01 00 00       	push   0x164
300011bd:	89 c3                	mov    ebx,eax
300011bf:	e8 70 f7 ff ff       	call   30000934 <do_syscall1>
300011c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
300011c7:	90                   	nop
300011c8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300011cb:	c9                   	leave  
300011cc:	c3                   	ret    
300011cd:	66 90                	xchg   ax,ax
300011cf:	90                   	nop

300011d0 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
300011d0:	55                   	push   ebp
300011d1:	89 e5                	mov    ebp,esp
300011d3:	83 ec 20             	sub    esp,0x20
300011d6:	e8 a0 18 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300011db:	05 bd 31 00 00       	add    eax,0x31bd
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
300011e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300011e3:	83 e0 03             	and    eax,0x3
300011e6:	85 c0                	test   eax,eax
300011e8:	0f 94 c0             	sete   al
300011eb:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
300011ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300011f1:	83 e0 01             	and    eax,0x1
300011f4:	85 c0                	test   eax,eax
300011f6:	0f 94 c0             	sete   al
300011f9:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
300011fc:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
30001200:	74 7d                	je     3000127f <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
30001202:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001205:	c1 e8 02             	shr    eax,0x2
30001208:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
3000120b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000120e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
30001211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001214:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
30001217:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000121a:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000121d:	73 4b                	jae    3000126a <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
3000121f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001222:	c1 e0 02             	shl    eax,0x2
30001225:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30001228:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000122b:	c1 e0 02             	shl    eax,0x2
3000122e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30001231:	eb 12                	jmp    30001245 <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
30001233:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
30001237:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
3000123b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000123e:	8b 10                	mov    edx,DWORD PTR [eax]
30001240:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001243:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30001245:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001248:	8d 50 ff             	lea    edx,[eax-0x1]
3000124b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000124e:	85 c0                	test   eax,eax
30001250:	75 e1                	jne    30001233 <memcpy+0x63>
30001252:	eb 23                	jmp    30001277 <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30001254:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001257:	8d 50 04             	lea    edx,[eax+0x4]
3000125a:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
3000125d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001260:	8d 4a 04             	lea    ecx,[edx+0x4]
30001263:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
30001266:	8b 12                	mov    edx,DWORD PTR [edx]
30001268:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
3000126a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000126d:	8d 50 ff             	lea    edx,[eax-0x1]
30001270:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001273:	85 c0                	test   eax,eax
30001275:	75 dd                	jne    30001254 <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
30001277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000127a:	e9 ea 00 00 00       	jmp    30001369 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
3000127f:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
30001283:	74 79                	je     300012fe <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
30001285:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001288:	d1 e8                	shr    eax,1
3000128a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
3000128d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001290:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
30001293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001296:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
30001299:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000129c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
3000129f:	73 4b                	jae    300012ec <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
300012a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012a4:	c1 e0 02             	shl    eax,0x2
300012a7:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
300012aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012ad:	c1 e0 02             	shl    eax,0x2
300012b0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
300012b3:	eb 12                	jmp    300012c7 <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
300012b5:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
300012b9:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
300012bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300012c0:	8b 10                	mov    edx,DWORD PTR [eax]
300012c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300012c5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
300012c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012ca:	8d 50 ff             	lea    edx,[eax-0x1]
300012cd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300012d0:	85 c0                	test   eax,eax
300012d2:	75 e1                	jne    300012b5 <memcpy+0xe5>
300012d4:	eb 23                	jmp    300012f9 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
300012d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300012d9:	8d 50 04             	lea    edx,[eax+0x4]
300012dc:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
300012df:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300012e2:	8d 4a 04             	lea    ecx,[edx+0x4]
300012e5:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
300012e8:	8b 12                	mov    edx,DWORD PTR [edx]
300012ea:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
300012ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012ef:	8d 50 ff             	lea    edx,[eax-0x1]
300012f2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300012f5:	85 c0                	test   eax,eax
300012f7:	75 dd                	jne    300012d6 <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
300012f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012fc:	eb 6b                	jmp    30001369 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
300012fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001301:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
30001304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001307:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
3000130a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000130d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30001310:	73 47                	jae    30001359 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
30001312:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001315:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
30001318:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000131b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
3000131e:	eb 13                	jmp    30001333 <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
30001320:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
30001324:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
30001328:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000132b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
3000132e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001331:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
30001333:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001336:	8d 50 ff             	lea    edx,[eax-0x1]
30001339:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000133c:	85 c0                	test   eax,eax
3000133e:	75 e0                	jne    30001320 <memcpy+0x150>
30001340:	eb 24                	jmp    30001366 <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
30001342:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001345:	8d 50 01             	lea    edx,[eax+0x1]
30001348:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
3000134b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000134e:	8d 4a 01             	lea    ecx,[edx+0x1]
30001351:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
30001354:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001357:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
30001359:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000135c:	8d 50 ff             	lea    edx,[eax-0x1]
3000135f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001362:	85 c0                	test   eax,eax
30001364:	75 dc                	jne    30001342 <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
30001366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
30001369:	c9                   	leave  
3000136a:	c3                   	ret    
3000136b:	90                   	nop

3000136c <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
3000136c:	55                   	push   ebp
3000136d:	89 e5                	mov    ebp,esp
3000136f:	83 ec 20             	sub    esp,0x20
30001372:	e8 04 17 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001377:	05 21 30 00 00       	add    eax,0x3021
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
3000137c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000137f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
30001382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001385:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
30001388:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000138b:	c1 e0 10             	shl    eax,0x10
3000138e:	89 c2                	mov    edx,eax
30001390:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001393:	c1 e0 08             	shl    eax,0x8
30001396:	09 c2                	or     edx,eax
30001398:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000139b:	09 d0                	or     eax,edx
3000139d:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
300013a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
300013a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013aa:	c1 e0 18             	shl    eax,0x18
300013ad:	89 c2                	mov    edx,eax
300013af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013b2:	c1 e0 10             	shl    eax,0x10
300013b5:	09 c2                	or     edx,eax
300013b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013ba:	c1 e0 08             	shl    eax,0x8
300013bd:	09 d0                	or     eax,edx
300013bf:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
300013c2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
300013c5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300013c8:	83 e0 03             	and    eax,0x3
300013cb:	85 c0                	test   eax,eax
300013cd:	75 1c                	jne    300013eb <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
300013cf:	eb 0e                	jmp    300013df <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
300013d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300013d4:	8d 50 04             	lea    edx,[eax+0x4]
300013d7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300013da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300013dd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
300013df:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
300013e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300013e7:	75 e8                	jne    300013d1 <memsetI+0x65>
300013e9:	eb 43                	jmp    3000142e <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
300013eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300013ee:	83 e0 01             	and    eax,0x1
300013f1:	85 c0                	test   eax,eax
300013f3:	75 2c                	jne    30001421 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
300013f5:	eb 10                	jmp    30001407 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
300013f7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
300013fa:	8d 50 02             	lea    edx,[eax+0x2]
300013fd:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001400:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
30001404:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
30001407:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
3000140b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000140f:	75 e6                	jne    300013f7 <memsetI+0x8b>
30001411:	eb 1b                	jmp    3000142e <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
30001413:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001416:	8d 50 01             	lea    edx,[eax+0x1]
30001419:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000141c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000141f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30001421:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001424:	8d 50 ff             	lea    edx,[eax-0x1]
30001427:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000142a:	85 c0                	test   eax,eax
3000142c:	75 e5                	jne    30001413 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
3000142e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
30001431:	c9                   	leave  
30001432:	c3                   	ret    

30001433 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
30001433:	55                   	push   ebp
30001434:	89 e5                	mov    ebp,esp
30001436:	e8 40 16 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000143b:	05 5d 2f 00 00       	add    eax,0x2f5d
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
30001440:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001443:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001446:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001449:	e8 1e ff ff ff       	call   3000136c <memsetI>
3000144e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
30001451:	c9                   	leave  
30001452:	c3                   	ret    
30001453:	90                   	nop

30001454 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:10
 */
#include "libChrisOS.h"
#include "types.h"

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset) //memory map pages either to a file or anonymously
{
30001454:	55                   	push   ebp
30001455:	89 e5                	mov    ebp,esp
30001457:	e8 1f 16 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000145c:	05 3c 2f 00 00       	add    eax,0x2f3c
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:11
    return NULL;
30001461:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:12
}
30001466:	5d                   	pop    ebp
30001467:	c3                   	ret    

30001468 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
30001468:	55                   	push   ebp
30001469:	89 e5                	mov    ebp,esp
3000146b:	53                   	push   ebx
3000146c:	83 ec 14             	sub    esp,0x14
3000146f:	e8 2c 16 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
30001474:	81 c3 24 2f 00 00    	add    ebx,0x2f24
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
3000147a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
30001481:	83 ec 04             	sub    esp,0x4
30001484:	6a 0a                	push   0xa
30001486:	6a 00                	push   0x0
30001488:	8d 45 ef             	lea    eax,[ebp-0x11]
3000148b:	50                   	push   eax
3000148c:	e8 db fe ff ff       	call   3000136c <memsetI>
30001491:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
30001494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001497:	8d 50 01             	lea    edx,[eax+0x1]
3000149a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000149d:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
300014a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014a5:	8d 50 01             	lea    edx,[eax+0x1]
300014a8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300014ab:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
300014b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014b3:	8d 50 01             	lea    edx,[eax+0x1]
300014b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300014b9:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
300014be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014c1:	8d 50 01             	lea    edx,[eax+0x1]
300014c4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300014c7:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
300014cc:	8d 55 ef             	lea    edx,[ebp-0x11]
300014cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014d2:	01 d0                	add    eax,edx
300014d4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
300014d7:	83 ec 0c             	sub    esp,0xc
300014da:	8d 45 ef             	lea    eax,[ebp-0x11]
300014dd:	50                   	push   eax
300014de:	e8 cb f5 ff ff       	call   30000aae <printI>
300014e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
300014e6:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
300014e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300014ea:	c9                   	leave  
300014eb:	c3                   	ret    

300014ec <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
300014ec:	55                   	push   ebp
300014ed:	89 e5                	mov    ebp,esp
300014ef:	53                   	push   ebx
300014f0:	83 ec 04             	sub    esp,0x4
300014f3:	e8 a8 15 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
300014f8:	81 c3 a0 2e 00 00    	add    ebx,0x2ea0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
300014fe:	83 ec 0c             	sub    esp,0xc
30001501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001504:	e8 b4 02 00 00       	call   300017bd <strlenI>
30001509:	83 c4 10             	add    esp,0x10
3000150c:	89 c2                	mov    edx,eax
3000150e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001511:	01 d0                	add    eax,edx
30001513:	83 ec 08             	sub    esp,0x8
30001516:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001519:	50                   	push   eax
3000151a:	e8 59 01 00 00       	call   30001678 <strcpyI>
3000151f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
30001522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
30001525:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001528:	c9                   	leave  
30001529:	c3                   	ret    

3000152a <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
3000152a:	55                   	push   ebp
3000152b:	89 e5                	mov    ebp,esp
3000152d:	53                   	push   ebx
3000152e:	83 ec 04             	sub    esp,0x4
30001531:	e8 6a 15 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
30001536:	81 c3 62 2e 00 00    	add    ebx,0x2e62
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
3000153c:	83 ec 0c             	sub    esp,0xc
3000153f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001542:	e8 76 02 00 00       	call   300017bd <strlenI>
30001547:	83 c4 10             	add    esp,0x10
3000154a:	89 c2                	mov    edx,eax
3000154c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000154f:	01 d0                	add    eax,edx
30001551:	83 ec 08             	sub    esp,0x8
30001554:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001557:	50                   	push   eax
30001558:	e8 1b 01 00 00       	call   30001678 <strcpyI>
3000155d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
30001560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
30001563:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001566:	c9                   	leave  
30001567:	c3                   	ret    

30001568 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
30001568:	55                   	push   ebp
30001569:	89 e5                	mov    ebp,esp
3000156b:	83 ec 10             	sub    esp,0x10
3000156e:	e8 08 15 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001573:	05 25 2e 00 00       	add    eax,0x2e25
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
30001578:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
3000157f:	eb 04                	jmp    30001585 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
30001581:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
30001585:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000158b:	01 d0                	add    eax,edx
3000158d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001590:	84 c0                	test   al,al
30001592:	75 ed                	jne    30001581 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
30001594:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
3000159b:	eb 1d                	jmp    300015ba <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
3000159d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300015a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015a3:	01 c2                	add    edx,eax
300015a5:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
300015a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300015ab:	01 c8                	add    eax,ecx
300015ad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300015b0:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
300015b2:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
300015b6:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
300015ba:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300015bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300015c0:	01 d0                	add    eax,edx
300015c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300015c5:	84 c0                	test   al,al
300015c7:	75 d4                	jne    3000159d <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
300015c9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300015cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015cf:	01 d0                	add    eax,edx
300015d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
300015d4:	90                   	nop
300015d5:	c9                   	leave  
300015d6:	c3                   	ret    
300015d7:	90                   	nop

300015d8 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
300015d8:	55                   	push   ebp
300015d9:	89 e5                	mov    ebp,esp
300015db:	56                   	push   esi
300015dc:	53                   	push   ebx
300015dd:	83 ec 10             	sub    esp,0x10
300015e0:	e8 96 14 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300015e5:	05 b3 2d 00 00       	add    eax,0x2db3
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
300015ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
300015ed:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
300015f0:	89 d8                	mov    eax,ebx
300015f2:	8d 58 01             	lea    ebx,[eax+0x1]
300015f5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300015f8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
300015fb:	89 f0                	mov    eax,esi
300015fd:	8d 70 01             	lea    esi,[eax+0x1]
30001600:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001603:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
30001606:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
3000160a:	75 0e                	jne    3000161a <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
3000160c:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001610:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001614:	29 c2                	sub    edx,eax
30001616:	89 d0                	mov    eax,edx
30001618:	eb 15                	jmp    3000162f <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
3000161a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
3000161e:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
30001621:	74 cd                	je     300015f0 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
30001623:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001627:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
3000162b:	29 c2                	sub    edx,eax
3000162d:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
3000162f:	83 c4 10             	add    esp,0x10
30001632:	5b                   	pop    ebx
30001633:	5e                   	pop    esi
30001634:	5d                   	pop    ebp
30001635:	c3                   	ret    
30001636:	66 90                	xchg   ax,ax

30001638 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
30001638:	55                   	push   ebp
30001639:	89 e5                	mov    ebp,esp
3000163b:	83 ec 10             	sub    esp,0x10
3000163e:	e8 38 14 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001643:	05 55 2d 00 00       	add    eax,0x2d55
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
30001648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000164b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
3000164e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
3000164f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001652:	8d 50 01             	lea    edx,[eax+0x1]
30001655:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001658:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000165b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000165e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001661:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001664:	88 10                	mov    BYTE PTR [eax],dl
30001666:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001669:	84 c0                	test   al,al
3000166b:	75 e2                	jne    3000164f <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
3000166d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001670:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
30001673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
30001676:	c9                   	leave  
30001677:	c3                   	ret    

30001678 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
30001678:	55                   	push   ebp
30001679:	89 e5                	mov    ebp,esp
3000167b:	83 ec 10             	sub    esp,0x10
3000167e:	e8 f8 13 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001683:	05 15 2d 00 00       	add    eax,0x2d15
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
30001688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000168b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
3000168e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
3000168f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001692:	8d 50 01             	lea    edx,[eax+0x1]
30001695:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001698:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000169b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000169e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300016a1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300016a4:	88 10                	mov    BYTE PTR [eax],dl
300016a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016a9:	84 c0                	test   al,al
300016ab:	75 e2                	jne    3000168f <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
300016ad:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
300016b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
300016b6:	c9                   	leave  
300016b7:	c3                   	ret    

300016b8 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
300016b8:	55                   	push   ebp
300016b9:	89 e5                	mov    ebp,esp
300016bb:	83 ec 10             	sub    esp,0x10
300016be:	e8 b8 13 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300016c3:	05 d5 2c 00 00       	add    eax,0x2cd5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
300016c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
300016ce:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
300016cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016d2:	8d 50 01             	lea    edx,[eax+0x1]
300016d5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300016d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300016db:	8d 4a 01             	lea    ecx,[edx+0x1]
300016de:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300016e1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300016e4:	88 10                	mov    BYTE PTR [eax],dl
300016e6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016e9:	84 c0                	test   al,al
300016eb:	74 0d                	je     300016fa <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
300016ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300016f0:	8d 50 ff             	lea    edx,[eax-0x1]
300016f3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300016f6:	85 c0                	test   eax,eax
300016f8:	75 d5                	jne    300016cf <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
300016fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
300016fd:	c9                   	leave  
300016fe:	c3                   	ret    
300016ff:	90                   	nop

30001700 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
30001700:	55                   	push   ebp
30001701:	89 e5                	mov    ebp,esp
30001703:	83 ec 04             	sub    esp,0x4
30001706:	e8 70 13 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000170b:	05 8d 2c 00 00       	add    eax,0x2c8d
30001710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001713:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
30001716:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
3000171a:	7e 0d                	jle    30001729 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
3000171c:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
30001720:	7f 07                	jg     30001729 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
30001722:	b8 01 00 00 00       	mov    eax,0x1
30001727:	eb 05                	jmp    3000172e <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
30001729:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
3000172e:	c9                   	leave  
3000172f:	c3                   	ret    

30001730 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
30001730:	55                   	push   ebp
30001731:	89 e5                	mov    ebp,esp
30001733:	83 ec 10             	sub    esp,0x10
30001736:	e8 40 13 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000173b:	05 5d 2c 00 00       	add    eax,0x2c5d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
30001740:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
30001747:	eb 27                	jmp    30001770 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
30001749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000174c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000174f:	89 c2                	mov    edx,eax
30001751:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001754:	01 d0                	add    eax,edx
30001756:	0f be c0             	movsx  eax,al
30001759:	50                   	push   eax
3000175a:	e8 a1 ff ff ff       	call   30001700 <check_digit>
3000175f:	83 c4 04             	add    esp,0x4
30001762:	83 f0 01             	xor    eax,0x1
30001765:	84 c0                	test   al,al
30001767:	74 07                	je     30001770 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
30001769:	b8 00 00 00 00       	mov    eax,0x0
3000176e:	eb 17                	jmp    30001787 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
30001770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001773:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001776:	0f be d0             	movsx  edx,al
30001779:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000177c:	01 d0                	add    eax,edx
3000177e:	85 c0                	test   eax,eax
30001780:	75 c7                	jne    30001749 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
30001782:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
30001787:	c9                   	leave  
30001788:	c3                   	ret    
30001789:	66 90                	xchg   ax,ax
3000178b:	90                   	nop

3000178c <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
3000178c:	55                   	push   ebp
3000178d:	89 e5                	mov    ebp,esp
3000178f:	83 ec 10             	sub    esp,0x10
30001792:	e8 e4 12 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001797:	05 01 2c 00 00       	add    eax,0x2c01
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
3000179c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
300017a3:	eb 04                	jmp    300017a9 <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
300017a5:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
300017a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300017ac:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017af:	01 d0                	add    eax,edx
300017b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017b4:	84 c0                	test   al,al
300017b6:	75 ed                	jne    300017a5 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
300017b8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
300017bb:	c9                   	leave  
300017bc:	c3                   	ret    

300017bd <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
300017bd:	55                   	push   ebp
300017be:	89 e5                	mov    ebp,esp
300017c0:	83 ec 10             	sub    esp,0x10
300017c3:	e8 b3 12 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300017c8:	05 d0 2b 00 00       	add    eax,0x2bd0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
300017cd:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
300017d4:	eb 04                	jmp    300017da <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
300017d6:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
300017da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300017dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017e0:	01 d0                	add    eax,edx
300017e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017e5:	84 c0                	test   al,al
300017e7:	75 ed                	jne    300017d6 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
300017e9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
300017ec:	c9                   	leave  
300017ed:	c3                   	ret    
300017ee:	66 90                	xchg   ax,ax

300017f0 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
300017f0:	55                   	push   ebp
300017f1:	89 e5                	mov    ebp,esp
300017f3:	e8 83 12 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300017f8:	05 a0 2b 00 00       	add    eax,0x2ba0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
300017fd:	eb 4b                	jmp    3000184a <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
300017ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001802:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001805:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001808:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000180b:	38 c2                	cmp    dl,al
3000180d:	74 1e                	je     3000182d <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
3000180f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001812:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001815:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001818:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000181b:	38 c2                	cmp    dl,al
3000181d:	73 07                	jae    30001826 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
3000181f:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001824:	eb 2f                	jmp    30001855 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
30001826:	b8 01 00 00 00       	mov    eax,0x1
3000182b:	eb 28                	jmp    30001855 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
3000182d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001830:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001833:	84 c0                	test   al,al
30001835:	75 07                	jne    3000183e <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
30001837:	b8 00 00 00 00       	mov    eax,0x0
3000183c:	eb 17                	jmp    30001855 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
3000183e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
30001842:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001846:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
3000184a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000184e:	75 af                	jne    300017ff <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
30001850:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
30001855:	5d                   	pop    ebp
30001856:	c3                   	ret    

30001857 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
30001857:	55                   	push   ebp
30001858:	89 e5                	mov    ebp,esp
3000185a:	e8 1c 12 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000185f:	05 39 2b 00 00       	add    eax,0x2b39
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
30001864:	eb 4b                	jmp    300018b1 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
30001866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001869:	0f b6 10             	movzx  edx,BYTE PTR [eax]
3000186c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000186f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001872:	38 c2                	cmp    dl,al
30001874:	74 1e                	je     30001894 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001879:	0f b6 10             	movzx  edx,BYTE PTR [eax]
3000187c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000187f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001882:	38 c2                	cmp    dl,al
30001884:	73 07                	jae    3000188d <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
30001886:	b8 ff ff ff ff       	mov    eax,0xffffffff
3000188b:	eb 2f                	jmp    300018bc <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
3000188d:	b8 01 00 00 00       	mov    eax,0x1
30001892:	eb 28                	jmp    300018bc <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
30001894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001897:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000189a:	84 c0                	test   al,al
3000189c:	75 07                	jne    300018a5 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
3000189e:	b8 00 00 00 00       	mov    eax,0x0
300018a3:	eb 17                	jmp    300018bc <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
300018a5:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
300018a9:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
300018ad:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
300018b1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300018b5:	75 af                	jne    30001866 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
300018b7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
300018bc:	5d                   	pop    ebp
300018bd:	c3                   	ret    
300018be:	66 90                	xchg   ax,ax

300018c0 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
300018c0:	55                   	push   ebp
300018c1:	89 e5                	mov    ebp,esp
300018c3:	83 ec 10             	sub    esp,0x10
300018c6:	e8 b0 11 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300018cb:	05 cd 2a 00 00       	add    eax,0x2acd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
300018d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
300018d6:	eb 1b                	jmp    300018f3 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
300018d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300018db:	8d 50 01             	lea    edx,[eax+0x1]
300018de:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300018e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300018e4:	8d 4a 01             	lea    ecx,[edx+0x1]
300018e7:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300018ea:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300018ed:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
300018ef:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
300018f3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300018f7:	74 1c                	je     30001915 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
300018f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300018fc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018ff:	84 c0                	test   al,al
30001901:	75 d5                	jne    300018d8 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001903:	eb 10                	jmp    30001915 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
30001905:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001908:	8d 50 01             	lea    edx,[eax+0x1]
3000190b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000190e:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001911:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001915:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001919:	75 ea                	jne    30001905 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
3000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
3000191e:	c9                   	leave  
3000191f:	c3                   	ret    

30001920 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001920:	55                   	push   ebp
30001921:	89 e5                	mov    ebp,esp
30001923:	e8 53 11 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001928:	05 70 2a 00 00       	add    eax,0x2a70
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
3000192d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001930:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001933:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001936:	e8 85 ff ff ff       	call   300018c0 <strncpyI>
3000193b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
3000193e:	c9                   	leave  
3000193f:	c3                   	ret    

30001940 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
30001940:	55                   	push   ebp
30001941:	89 e5                	mov    ebp,esp
30001943:	57                   	push   edi
30001944:	56                   	push   esi
30001945:	53                   	push   ebx
30001946:	83 ec 08             	sub    esp,0x8
30001949:	e8 2d 11 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
3000194e:	05 4a 2a 00 00       	add    eax,0x2a4a
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
30001953:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001956:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
3000195d:	89 f0                	mov    eax,esi
3000195f:	8d 70 01             	lea    esi,[eax+0x1]
30001962:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001965:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
30001968:	83 fb 20             	cmp    ebx,0x20
3000196b:	74 f0                	je     3000195d <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
3000196d:	83 fb 2d             	cmp    ebx,0x2d
30001970:	75 14                	jne    30001986 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
30001972:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
30001979:	89 f0                	mov    eax,esi
3000197b:	8d 70 01             	lea    esi,[eax+0x1]
3000197e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001981:	0f be d8             	movsx  ebx,al
30001984:	eb 10                	jmp    30001996 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
30001986:	83 fb 2b             	cmp    ebx,0x2b
30001989:	75 0b                	jne    30001996 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
3000198b:	89 f0                	mov    eax,esi
3000198d:	8d 70 01             	lea    esi,[eax+0x1]
30001990:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001993:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
30001996:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000199a:	74 06                	je     300019a2 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
3000199c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
300019a0:	75 26                	jne    300019c8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
300019a2:	83 fb 30             	cmp    ebx,0x30
300019a5:	75 21                	jne    300019c8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
300019a7:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300019aa:	3c 78                	cmp    al,0x78
300019ac:	74 07                	je     300019b5 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
300019ae:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300019b1:	3c 58                	cmp    al,0x58
300019b3:	75 13                	jne    300019c8 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
300019b5:	8d 46 01             	lea    eax,[esi+0x1]
300019b8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019bb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
300019be:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
300019c1:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
300019c8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300019cc:	75 14                	jne    300019e2 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
300019ce:	83 fb 30             	cmp    ebx,0x30
300019d1:	75 07                	jne    300019da <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
300019d3:	b8 08 00 00 00       	mov    eax,0x8
300019d8:	eb 05                	jmp    300019df <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
300019da:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
300019df:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
300019e2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300019e5:	b8 ff ff ff ff       	mov    eax,0xffffffff
300019ea:	ba 00 00 00 00       	mov    edx,0x0
300019ef:	f7 f1                	div    ecx
300019f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
300019f4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300019f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
300019fc:	ba 00 00 00 00       	mov    edx,0x0
30001a01:	f7 f1                	div    ecx
30001a03:	89 d0                	mov    eax,edx
30001a05:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
30001a07:	bf 00 00 00 00       	mov    edi,0x0
30001a0c:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001a11:	8d 43 d0             	lea    eax,[ebx-0x30]
30001a14:	83 f8 09             	cmp    eax,0x9
30001a17:	77 05                	ja     30001a1e <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001a19:	83 eb 30             	sub    ebx,0x30
30001a1c:	eb 25                	jmp    30001a43 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001a1e:	89 d8                	mov    eax,ebx
30001a20:	83 c8 20             	or     eax,0x20
30001a23:	83 e8 61             	sub    eax,0x61
30001a26:	83 f8 19             	cmp    eax,0x19
30001a29:	77 56                	ja     30001a81 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001a2b:	83 fb 40             	cmp    ebx,0x40
30001a2e:	7e 0c                	jle    30001a3c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001a30:	83 fb 5a             	cmp    ebx,0x5a
30001a33:	7f 07                	jg     30001a3c <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
30001a35:	b8 37 00 00 00       	mov    eax,0x37
30001a3a:	eb 05                	jmp    30001a41 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001a3c:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001a41:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
30001a43:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001a46:	7d 3c                	jge    30001a84 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001a48:	89 c8                	mov    eax,ecx
30001a4a:	85 c0                	test   eax,eax
30001a4c:	78 10                	js     30001a5e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
30001a4e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001a51:	77 0b                	ja     30001a5e <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
30001a53:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001a56:	75 0d                	jne    30001a65 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
30001a58:	89 d0                	mov    eax,edx
30001a5a:	39 c3                	cmp    ebx,eax
30001a5c:	7e 07                	jle    30001a65 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
30001a5e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001a63:	eb 0f                	jmp    30001a74 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
30001a65:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
30001a6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001a6d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
30001a70:	89 d8                	mov    eax,ebx
30001a72:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001a74:	89 f0                	mov    eax,esi
30001a76:	8d 70 01             	lea    esi,[eax+0x1]
30001a79:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a7c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001a7f:	eb 90                	jmp    30001a11 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001a81:	90                   	nop
30001a82:	eb 01                	jmp    30001a85 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
30001a84:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001a85:	89 c8                	mov    eax,ecx
30001a87:	85 c0                	test   eax,eax
30001a89:	79 07                	jns    30001a92 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
30001a8b:	bf ff ff ff ff       	mov    edi,0xffffffff
30001a90:	eb 08                	jmp    30001a9a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
30001a92:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001a96:	74 02                	je     30001a9a <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
30001a98:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
30001a9a:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001a9e:	74 13                	je     30001ab3 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
30001aa0:	89 c8                	mov    eax,ecx
30001aa2:	85 c0                	test   eax,eax
30001aa4:	74 05                	je     30001aab <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
30001aa6:	8d 46 ff             	lea    eax,[esi-0x1]
30001aa9:	eb 03                	jmp    30001aae <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001aae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001ab1:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
30001ab3:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
30001ab5:	83 c4 08             	add    esp,0x8
30001ab8:	5b                   	pop    ebx
30001ab9:	5e                   	pop    esi
30001aba:	5f                   	pop    edi
30001abb:	5d                   	pop    ebp
30001abc:	c3                   	ret    
30001abd:	66 90                	xchg   ax,ax
30001abf:	90                   	nop

30001ac0 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001ac0:	55                   	push   ebp
30001ac1:	89 e5                	mov    ebp,esp
30001ac3:	e8 b3 0f 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001ac8:	05 d0 28 00 00       	add    eax,0x28d0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001acd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ad3:	01 d0                	add    eax,edx
30001ad5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001adb:	5d                   	pop    ebp
30001adc:	c3                   	ret    
30001add:	66 90                	xchg   ax,ax
30001adf:	90                   	nop

30001ae0 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001ae0:	55                   	push   ebp
30001ae1:	89 e5                	mov    ebp,esp
30001ae3:	57                   	push   edi
30001ae4:	56                   	push   esi
30001ae5:	53                   	push   ebx
30001ae6:	83 ec 0c             	sub    esp,0xc
30001ae9:	e8 8d 0f 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001aee:	05 aa 28 00 00       	add    eax,0x28aa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
30001af3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001af6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001afd:	89 f0                	mov    eax,esi
30001aff:	8d 70 01             	lea    esi,[eax+0x1]
30001b02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b05:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001b08:	83 fb 20             	cmp    ebx,0x20
30001b0b:	74 f0                	je     30001afd <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001b0d:	83 fb 2d             	cmp    ebx,0x2d
30001b10:	75 14                	jne    30001b26 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
30001b12:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001b19:	89 f0                	mov    eax,esi
30001b1b:	8d 70 01             	lea    esi,[eax+0x1]
30001b1e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b21:	0f be d8             	movsx  ebx,al
30001b24:	eb 10                	jmp    30001b36 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
30001b26:	83 fb 2b             	cmp    ebx,0x2b
30001b29:	75 0b                	jne    30001b36 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001b2b:	89 f0                	mov    eax,esi
30001b2d:	8d 70 01             	lea    esi,[eax+0x1]
30001b30:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b33:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
30001b36:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001b3a:	74 06                	je     30001b42 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001b3c:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001b40:	75 26                	jne    30001b68 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
30001b42:	83 fb 30             	cmp    ebx,0x30
30001b45:	75 21                	jne    30001b68 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001b47:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001b4a:	3c 78                	cmp    al,0x78
30001b4c:	74 07                	je     30001b55 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
30001b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001b51:	3c 58                	cmp    al,0x58
30001b53:	75 13                	jne    30001b68 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
30001b55:	8d 46 01             	lea    eax,[esi+0x1]
30001b58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b5b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
30001b5e:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
30001b61:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
30001b68:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001b6c:	75 14                	jne    30001b82 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
30001b6e:	83 fb 30             	cmp    ebx,0x30
30001b71:	75 07                	jne    30001b7a <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
30001b73:	b8 08 00 00 00       	mov    eax,0x8
30001b78:	eb 05                	jmp    30001b7f <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
30001b7a:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
30001b7f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
30001b82:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001b86:	74 07                	je     30001b8f <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
30001b88:	b8 00 00 00 80       	mov    eax,0x80000000
30001b8d:	eb 05                	jmp    30001b94 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
30001b8f:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
30001b94:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001b97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001b9a:	ba 00 00 00 00       	mov    edx,0x0
30001b9f:	f7 f1                	div    ecx
30001ba1:	89 d1                	mov    ecx,edx
30001ba3:	89 c8                	mov    eax,ecx
30001ba5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001ba8:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001bab:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001bae:	ba 00 00 00 00       	mov    edx,0x0
30001bb3:	f7 f7                	div    edi
30001bb5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30001bb8:	bf 00 00 00 00       	mov    edi,0x0
30001bbd:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
30001bc2:	8d 43 d0             	lea    eax,[ebx-0x30]
30001bc5:	83 f8 09             	cmp    eax,0x9
30001bc8:	77 05                	ja     30001bcf <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30001bca:	83 eb 30             	sub    ebx,0x30
30001bcd:	eb 25                	jmp    30001bf4 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30001bcf:	89 d8                	mov    eax,ebx
30001bd1:	83 c8 20             	or     eax,0x20
30001bd4:	83 e8 61             	sub    eax,0x61
30001bd7:	83 f8 19             	cmp    eax,0x19
30001bda:	77 55                	ja     30001c31 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001bdc:	83 fb 40             	cmp    ebx,0x40
30001bdf:	7e 0c                	jle    30001bed <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30001be1:	83 fb 5a             	cmp    ebx,0x5a
30001be4:	7f 07                	jg     30001bed <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
30001be6:	b8 37 00 00 00       	mov    eax,0x37
30001beb:	eb 05                	jmp    30001bf2 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30001bed:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
30001bf2:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
30001bf4:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001bf7:	7d 3b                	jge    30001c34 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001bf9:	89 c8                	mov    eax,ecx
30001bfb:	85 c0                	test   eax,eax
30001bfd:	78 0f                	js     30001c0e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30001bff:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c02:	77 0a                	ja     30001c0e <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
30001c04:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c07:	75 0c                	jne    30001c15 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30001c09:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30001c0c:	7e 07                	jle    30001c15 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30001c0e:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001c13:	eb 0f                	jmp    30001c24 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
30001c15:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30001c1a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001c1d:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30001c20:	89 d8                	mov    eax,ebx
30001c22:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001c24:	89 f0                	mov    eax,esi
30001c26:	8d 70 01             	lea    esi,[eax+0x1]
30001c29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c2c:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001c2f:	eb 91                	jmp    30001bc2 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001c31:	90                   	nop
30001c32:	eb 01                	jmp    30001c35 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
30001c34:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001c35:	89 c8                	mov    eax,ecx
30001c37:	85 c0                	test   eax,eax
30001c39:	79 16                	jns    30001c51 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30001c3b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001c3f:	74 07                	je     30001c48 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30001c41:	b8 00 00 00 80       	mov    eax,0x80000000
30001c46:	eb 05                	jmp    30001c4d <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
30001c48:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
30001c4d:	89 c7                	mov    edi,eax
30001c4f:	eb 08                	jmp    30001c59 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
30001c51:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001c55:	74 02                	je     30001c59 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
30001c57:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
30001c59:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001c5d:	74 13                	je     30001c72 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
30001c5f:	89 c8                	mov    eax,ecx
30001c61:	85 c0                	test   eax,eax
30001c63:	74 05                	je     30001c6a <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
30001c65:	8d 46 ff             	lea    eax,[esi-0x1]
30001c68:	eb 03                	jmp    30001c6d <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
30001c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
30001c6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001c70:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
30001c72:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
30001c74:	83 c4 0c             	add    esp,0xc
30001c77:	5b                   	pop    ebx
30001c78:	5e                   	pop    esi
30001c79:	5f                   	pop    edi
30001c7a:	5d                   	pop    ebp
30001c7b:	c3                   	ret    

30001c7c <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
30001c7c:	55                   	push   ebp
30001c7d:	89 e5                	mov    ebp,esp
30001c7f:	53                   	push   ebx
30001c80:	83 ec 14             	sub    esp,0x14
30001c83:	e8 f3 0d 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001c88:	05 10 27 00 00       	add    eax,0x2710
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
30001c8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001c90:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001c93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001c96:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001c99:	eb 04                	jmp    30001c9f <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
30001c9b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001c9f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001ca2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001ca5:	80 fa 20             	cmp    dl,0x20
30001ca8:	74 f1                	je     30001c9b <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
30001caa:	83 ec 0c             	sub    esp,0xc
30001cad:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001cb0:	89 c3                	mov    ebx,eax
30001cb2:	e8 06 fb ff ff       	call   300017bd <strlenI>
30001cb7:	83 c4 10             	add    esp,0x10
30001cba:	8d 50 ff             	lea    edx,[eax-0x1]
30001cbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001cc0:	01 d0                	add    eax,edx
30001cc2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
30001cc5:	eb 0c                	jmp    30001cd3 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
30001cc7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001cca:	8d 50 ff             	lea    edx,[eax-0x1]
30001ccd:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30001cd0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
30001cd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001cd6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30001cd9:	76 0a                	jbe    30001ce5 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30001cdb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001cde:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ce1:	3c 20                	cmp    al,0x20
30001ce3:	74 e2                	je     30001cc7 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
30001ce5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001ce8:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30001ceb:	74 1f                	je     30001d0c <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30001ced:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30001cee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001cf1:	8d 50 01             	lea    edx,[eax+0x1]
30001cf4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001cf7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001cfa:	8d 4a 01             	lea    ecx,[edx+0x1]
30001cfd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30001d00:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001d03:	88 10                	mov    BYTE PTR [eax],dl
30001d05:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d08:	84 c0                	test   al,al
30001d0a:	75 e2                	jne    30001cee <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30001d0c:	90                   	nop
30001d0d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001d10:	c9                   	leave  
30001d11:	c3                   	ret    

30001d12 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
30001d12:	55                   	push   ebp
30001d13:	89 e5                	mov    ebp,esp
30001d15:	83 ec 08             	sub    esp,0x8
30001d18:	e8 5e 0d 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001d1d:	05 7b 26 00 00       	add    eax,0x267b
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
30001d22:	83 ec 0c             	sub    esp,0xc
30001d25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001d28:	e8 4f ff ff ff       	call   30001c7c <strtrimI>
30001d2d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
30001d30:	c9                   	leave  
30001d31:	c3                   	ret    
30001d32:	66 90                	xchg   ax,ax

30001d34 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
30001d34:	55                   	push   ebp
30001d35:	89 e5                	mov    ebp,esp
30001d37:	56                   	push   esi
30001d38:	53                   	push   ebx
30001d39:	e8 3d 0d 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001d3e:	05 5a 26 00 00       	add    eax,0x265a
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
30001d43:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
30001d46:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001d49:	84 c0                	test   al,al
30001d4b:	75 42                	jne    30001d8f <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
30001d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d50:	eb 4c                	jmp    30001d9e <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
30001d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d55:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001d58:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001d5b:	38 c2                	cmp    dl,al
30001d5d:	75 2b                	jne    30001d8a <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
30001d5f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
30001d62:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001d65:	84 c0                	test   al,al
30001d67:	75 05                	jne    30001d6e <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
30001d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d6c:	eb 30                	jmp    30001d9e <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
30001d6e:	89 f0                	mov    eax,esi
30001d70:	8d 70 01             	lea    esi,[eax+0x1]
30001d73:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001d76:	89 d8                	mov    eax,ebx
30001d78:	8d 58 01             	lea    ebx,[eax+0x1]
30001d7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d7e:	38 c2                	cmp    dl,al
30001d80:	75 02                	jne    30001d84 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
30001d82:	eb de                	jmp    30001d62 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
30001d84:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
30001d85:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30001d88:	eb 01                	jmp    30001d8b <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
30001d8a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
30001d8b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
30001d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d95:	84 c0                	test   al,al
30001d97:	75 b9                	jne    30001d52 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
30001d99:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
30001d9e:	5b                   	pop    ebx
30001d9f:	5e                   	pop    esi
30001da0:	5d                   	pop    ebp
30001da1:	c3                   	ret    

30001da2 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
30001da2:	55                   	push   ebp
30001da3:	89 e5                	mov    ebp,esp
30001da5:	e8 d1 0c 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001daa:	05 ee 25 00 00       	add    eax,0x25ee
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
30001daf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001db2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001db5:	e8 7a ff ff ff       	call   30001d34 <strstrI>
30001dba:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
30001dbd:	c9                   	leave  
30001dbe:	c3                   	ret    
30001dbf:	90                   	nop

30001dc0 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
30001dc0:	55                   	push   ebp
30001dc1:	89 e5                	mov    ebp,esp
30001dc3:	56                   	push   esi
30001dc4:	53                   	push   ebx
30001dc5:	83 ec 10             	sub    esp,0x10
30001dc8:	e8 ae 0c 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30001dcd:	05 cb 25 00 00       	add    eax,0x25cb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
30001dd2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
30001dd9:	b8 70 01 00 00       	mov    eax,0x170
30001dde:	bb 00 00 00 00       	mov    ebx,0x0
30001de3:	b9 00 00 00 00       	mov    ecx,0x0
30001de8:	ba 00 00 00 00       	mov    edx,0x0
30001ded:	be 00 00 00 00       	mov    esi,0x0
30001df2:	e8 fc ff ff ff       	call   30001df3 <getticks+0x33>
30001df7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
30001dfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
30001dfd:	83 c4 10             	add    esp,0x10
30001e00:	5b                   	pop    ebx
30001e01:	5e                   	pop    esi
30001e02:	5d                   	pop    ebp
30001e03:	c3                   	ret    

30001e04 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
30001e04:	55                   	push   ebp
30001e05:	89 e5                	mov    ebp,esp
30001e07:	53                   	push   ebx
30001e08:	83 ec 10             	sub    esp,0x10
30001e0b:	e8 90 0c 00 00       	call   30002aa0 <__x86.get_pc_thunk.bx>
30001e10:	81 c3 88 25 00 00    	add    ebx,0x2588
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32
  time_t time = *timer;
30001e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e19:	8b 00                	mov    eax,DWORD PTR [eax]
30001e1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:34
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
30001e1e:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36

  dayclock = (unsigned long) time % SECS_DAY;
30001e25:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
30001e28:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001e2d:	89 c8                	mov    eax,ecx
30001e2f:	f7 e2                	mul    edx
30001e31:	89 d0                	mov    eax,edx
30001e33:	c1 e8 10             	shr    eax,0x10
30001e36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001e39:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001e3c:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30001e42:	29 c1                	sub    ecx,eax
30001e44:	89 c8                	mov    eax,ecx
30001e46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37
  dayno = (unsigned long) time / SECS_DAY;
30001e49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001e4c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001e51:	f7 e2                	mul    edx
30001e53:	89 d0                	mov    eax,edx
30001e55:	c1 e8 10             	shr    eax,0x10
30001e58:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39

  tmbuf->tm_sec = dayclock % 60;
30001e5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001e5e:	ba 89 88 88 88       	mov    edx,0x88888889
30001e63:	89 c8                	mov    eax,ecx
30001e65:	f7 e2                	mul    edx
30001e67:	89 d0                	mov    eax,edx
30001e69:	c1 e8 05             	shr    eax,0x5
30001e6c:	89 c2                	mov    edx,eax
30001e6e:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001e75:	89 c2                	mov    edx,eax
30001e77:	89 d0                	mov    eax,edx
30001e79:	c1 e0 04             	shl    eax,0x4
30001e7c:	29 d0                	sub    eax,edx
30001e7e:	29 c1                	sub    ecx,eax
30001e80:	89 c8                	mov    eax,ecx
30001e82:	89 c2                	mov    edx,eax
30001e84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001e87:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_min = (dayclock % 3600) / 60;
30001e89:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001e8c:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001e91:	89 c8                	mov    eax,ecx
30001e93:	f7 e2                	mul    edx
30001e95:	89 d0                	mov    eax,edx
30001e97:	c1 e8 0b             	shr    eax,0xb
30001e9a:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
30001ea0:	29 c1                	sub    ecx,eax
30001ea2:	89 c8                	mov    eax,ecx
30001ea4:	ba 89 88 88 88       	mov    edx,0x88888889
30001ea9:	f7 e2                	mul    edx
30001eab:	89 d0                	mov    eax,edx
30001ead:	c1 e8 05             	shr    eax,0x5
30001eb0:	89 c2                	mov    edx,eax
30001eb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001eb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_hour = dayclock / 3600;
30001eb8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001ebb:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001ec0:	f7 e2                	mul    edx
30001ec2:	89 d0                	mov    eax,edx
30001ec4:	c1 e8 0b             	shr    eax,0xb
30001ec7:	89 c2                	mov    edx,eax
30001ec9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ecc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
30001ecf:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001ed2:	8d 48 04             	lea    ecx,[eax+0x4]
30001ed5:	ba 25 49 92 24       	mov    edx,0x24924925
30001eda:	89 c8                	mov    eax,ecx
30001edc:	f7 e2                	mul    edx
30001ede:	89 c8                	mov    eax,ecx
30001ee0:	29 d0                	sub    eax,edx
30001ee2:	d1 e8                	shr    eax,1
30001ee4:	01 d0                	add    eax,edx
30001ee6:	c1 e8 02             	shr    eax,0x2
30001ee9:	89 c2                	mov    edx,eax
30001eeb:	c1 e2 03             	shl    edx,0x3
30001eee:	29 c2                	sub    edx,eax
30001ef0:	89 c8                	mov    eax,ecx
30001ef2:	29 d0                	sub    eax,edx
30001ef4:	89 c2                	mov    edx,eax
30001ef6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ef9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001efc:	eb 66                	jmp    30001f64 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
    dayno -= YEARSIZE(year);
30001efe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001f01:	83 e0 03             	and    eax,0x3
30001f04:	85 c0                	test   eax,eax
30001f06:	75 50                	jne    30001f58 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
30001f08:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f0b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f10:	89 c8                	mov    eax,ecx
30001f12:	f7 ea                	imul   edx
30001f14:	c1 fa 05             	sar    edx,0x5
30001f17:	89 c8                	mov    eax,ecx
30001f19:	c1 f8 1f             	sar    eax,0x1f
30001f1c:	29 c2                	sub    edx,eax
30001f1e:	89 d0                	mov    eax,edx
30001f20:	6b c0 64             	imul   eax,eax,0x64
30001f23:	29 c1                	sub    ecx,eax
30001f25:	89 c8                	mov    eax,ecx
30001f27:	85 c0                	test   eax,eax
30001f29:	75 26                	jne    30001f51 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
30001f2b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f2e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f33:	89 c8                	mov    eax,ecx
30001f35:	f7 ea                	imul   edx
30001f37:	c1 fa 07             	sar    edx,0x7
30001f3a:	89 c8                	mov    eax,ecx
30001f3c:	c1 f8 1f             	sar    eax,0x1f
30001f3f:	29 c2                	sub    edx,eax
30001f41:	89 d0                	mov    eax,edx
30001f43:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001f49:	29 c1                	sub    ecx,eax
30001f4b:	89 c8                	mov    eax,ecx
30001f4d:	85 c0                	test   eax,eax
30001f4f:	75 07                	jne    30001f58 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
30001f51:	b8 6e 01 00 00       	mov    eax,0x16e
30001f56:	eb 05                	jmp    30001f5d <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
30001f58:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
30001f5d:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
    year++;
30001f60:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001f64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001f67:	83 e0 03             	and    eax,0x3
30001f6a:	85 c0                	test   eax,eax
30001f6c:	75 50                	jne    30001fbe <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
30001f6e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f71:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f76:	89 c8                	mov    eax,ecx
30001f78:	f7 ea                	imul   edx
30001f7a:	c1 fa 05             	sar    edx,0x5
30001f7d:	89 c8                	mov    eax,ecx
30001f7f:	c1 f8 1f             	sar    eax,0x1f
30001f82:	29 c2                	sub    edx,eax
30001f84:	89 d0                	mov    eax,edx
30001f86:	6b c0 64             	imul   eax,eax,0x64
30001f89:	29 c1                	sub    ecx,eax
30001f8b:	89 c8                	mov    eax,ecx
30001f8d:	85 c0                	test   eax,eax
30001f8f:	75 26                	jne    30001fb7 <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
30001f91:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f94:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f99:	89 c8                	mov    eax,ecx
30001f9b:	f7 ea                	imul   edx
30001f9d:	c1 fa 07             	sar    edx,0x7
30001fa0:	89 c8                	mov    eax,ecx
30001fa2:	c1 f8 1f             	sar    eax,0x1f
30001fa5:	29 c2                	sub    edx,eax
30001fa7:	89 d0                	mov    eax,edx
30001fa9:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001faf:	29 c1                	sub    ecx,eax
30001fb1:	89 c8                	mov    eax,ecx
30001fb3:	85 c0                	test   eax,eax
30001fb5:	75 07                	jne    30001fbe <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
30001fb7:	b8 6e 01 00 00       	mov    eax,0x16e
30001fbc:	eb 05                	jmp    30001fc3 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
30001fbe:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
30001fc3:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30001fc6:	0f 86 32 ff ff ff    	jbe    30001efe <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
30001fcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001fcf:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
30001fd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fd8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_yday = dayno;
30001fdb:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30001fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fe1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_mon = 0;
30001fe4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001fe7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30001fee:	e9 89 00 00 00       	jmp    3000207c <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
30001ff3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001ff6:	83 e0 03             	and    eax,0x3
30001ff9:	85 c0                	test   eax,eax
30001ffb:	75 50                	jne    3000204d <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
30001ffd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002000:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002005:	89 c8                	mov    eax,ecx
30002007:	f7 ea                	imul   edx
30002009:	c1 fa 05             	sar    edx,0x5
3000200c:	89 c8                	mov    eax,ecx
3000200e:	c1 f8 1f             	sar    eax,0x1f
30002011:	29 c2                	sub    edx,eax
30002013:	89 d0                	mov    eax,edx
30002015:	6b c0 64             	imul   eax,eax,0x64
30002018:	29 c1                	sub    ecx,eax
3000201a:	89 c8                	mov    eax,ecx
3000201c:	85 c0                	test   eax,eax
3000201e:	75 26                	jne    30002046 <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
30002020:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002023:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002028:	89 c8                	mov    eax,ecx
3000202a:	f7 ea                	imul   edx
3000202c:	c1 fa 07             	sar    edx,0x7
3000202f:	89 c8                	mov    eax,ecx
30002031:	c1 f8 1f             	sar    eax,0x1f
30002034:	29 c2                	sub    edx,eax
30002036:	89 d0                	mov    eax,edx
30002038:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000203e:	29 c1                	sub    ecx,eax
30002040:	89 c8                	mov    eax,ecx
30002042:	85 c0                	test   eax,eax
30002044:	75 07                	jne    3000204d <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
30002046:	ba 01 00 00 00       	mov    edx,0x1
3000204b:	eb 05                	jmp    30002052 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
3000204d:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
30002052:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002055:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30002058:	89 d0                	mov    eax,edx
3000205a:	01 c0                	add    eax,eax
3000205c:	01 d0                	add    eax,edx
3000205e:	c1 e0 02             	shl    eax,0x2
30002061:	01 c8                	add    eax,ecx
30002063:	8b 84 83 68 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x298]
3000206a:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
    tmbuf->tm_mon++;
3000206d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002070:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002073:	8d 50 01             	lea    edx,[eax+0x1]
30002076:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002079:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
3000207c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000207f:	83 e0 03             	and    eax,0x3
30002082:	85 c0                	test   eax,eax
30002084:	75 50                	jne    300020d6 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
30002086:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002089:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000208e:	89 c8                	mov    eax,ecx
30002090:	f7 ea                	imul   edx
30002092:	c1 fa 05             	sar    edx,0x5
30002095:	89 c8                	mov    eax,ecx
30002097:	c1 f8 1f             	sar    eax,0x1f
3000209a:	29 c2                	sub    edx,eax
3000209c:	89 d0                	mov    eax,edx
3000209e:	6b c0 64             	imul   eax,eax,0x64
300020a1:	29 c1                	sub    ecx,eax
300020a3:	89 c8                	mov    eax,ecx
300020a5:	85 c0                	test   eax,eax
300020a7:	75 26                	jne    300020cf <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
300020a9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300020ac:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300020b1:	89 c8                	mov    eax,ecx
300020b3:	f7 ea                	imul   edx
300020b5:	c1 fa 07             	sar    edx,0x7
300020b8:	89 c8                	mov    eax,ecx
300020ba:	c1 f8 1f             	sar    eax,0x1f
300020bd:	29 c2                	sub    edx,eax
300020bf:	89 d0                	mov    eax,edx
300020c1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300020c7:	29 c1                	sub    ecx,eax
300020c9:	89 c8                	mov    eax,ecx
300020cb:	85 c0                	test   eax,eax
300020cd:	75 07                	jne    300020d6 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
300020cf:	ba 01 00 00 00       	mov    edx,0x1
300020d4:	eb 05                	jmp    300020db <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
300020d6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
300020db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
300020e1:	89 d0                	mov    eax,edx
300020e3:	01 c0                	add    eax,eax
300020e5:	01 d0                	add    eax,edx
300020e7:	c1 e0 02             	shl    eax,0x2
300020ea:	01 c8                	add    eax,ecx
300020ec:	8b 84 83 68 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x298]
300020f3:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
300020f6:	0f 86 f7 fe ff ff    	jbe    30001ff3 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
300020fc:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
300020ff:	83 c0 01             	add    eax,0x1
30002102:	89 c2                	mov    edx,eax
30002104:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002107:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  tmbuf->tm_isdst = 0;
3000210a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000210d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  return tmbuf;
30002114:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
}
30002117:	83 c4 10             	add    esp,0x10
3000211a:	5b                   	pop    ebx
3000211b:	5d                   	pop    ebp
3000211c:	c3                   	ret    

3000211d <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
3000211d:	55                   	push   ebp
3000211e:	89 e5                	mov    ebp,esp
30002120:	e8 56 09 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30002125:	05 73 22 00 00       	add    eax,0x2273
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
    return gmtime_rI(timer, tmbuf);
3000212a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000212d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002130:	e8 cf fc ff ff       	call   30001e04 <gmtime_rI>
30002135:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
}
30002138:	c9                   	leave  
30002139:	c3                   	ret    

3000213a <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *localtime(const time_t *timer) {
3000213a:	55                   	push   ebp
3000213b:	89 e5                	mov    ebp,esp
3000213d:	53                   	push   ebx
3000213e:	83 ec 34             	sub    esp,0x34
30002141:	e8 35 09 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30002146:	05 52 22 00 00       	add    eax,0x2252
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
3000214b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000214e:	8b 12                	mov    edx,DWORD PTR [edx]
30002150:	89 d1                	mov    ecx,edx
30002152:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
30002158:	8b 12                	mov    edx,DWORD PTR [edx]
3000215a:	29 d1                	sub    ecx,edx
3000215c:	89 ca                	mov    edx,ecx
3000215e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
30002161:	83 ec 08             	sub    esp,0x8
30002164:	8d 55 c8             	lea    edx,[ebp-0x38]
30002167:	52                   	push   edx
30002168:	8d 55 f4             	lea    edx,[ebp-0xc]
3000216b:	52                   	push   edx
3000216c:	89 c3                	mov    ebx,eax
3000216e:	e8 1d 09 00 00       	call   30002a90 <__x86.get_pc_thunk.ax+0x15>
30002173:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
30002176:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30002179:	c9                   	leave  
3000217a:	c3                   	ret    

3000217b <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
3000217b:	55                   	push   ebp
3000217c:	89 e5                	mov    ebp,esp
3000217e:	83 ec 10             	sub    esp,0x10
30002181:	e8 f5 08 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30002186:	05 12 22 00 00       	add    eax,0x2212
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
3000218b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000218e:	8b 12                	mov    edx,DWORD PTR [edx]
30002190:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
30002196:	8b 00                	mov    eax,DWORD PTR [eax]
30002198:	29 c2                	sub    edx,eax
3000219a:	89 d0                	mov    eax,edx
3000219c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
3000219f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300021a2:	8d 45 fc             	lea    eax,[ebp-0x4]
300021a5:	50                   	push   eax
300021a6:	e8 59 fc ff ff       	call   30001e04 <gmtime_rI>
300021ab:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
300021ae:	c9                   	leave  
300021af:	c3                   	ret    

300021b0 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
300021b0:	55                   	push   ebp
300021b1:	89 e5                	mov    ebp,esp
300021b3:	e8 c3 08 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
300021b8:	05 e0 21 00 00       	add    eax,0x21e0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
300021bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300021c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300021c3:	e8 b3 ff ff ff       	call   3000217b <localtime_rI>
300021c8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
300021cb:	c9                   	leave  
300021cc:	c3                   	ret    

300021cd <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
300021cd:	55                   	push   ebp
300021ce:	89 e5                	mov    ebp,esp
300021d0:	57                   	push   edi
300021d1:	56                   	push   esi
300021d2:	53                   	push   ebx
300021d3:	83 ec 20             	sub    esp,0x20
300021d6:	e8 c9 08 00 00       	call   30002aa4 <__x86.get_pc_thunk.cx>
300021db:	81 c1 bd 21 00 00    	add    ecx,0x21bd
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
300021e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021e4:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
300021e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300021ea:	8b 18                	mov    ebx,DWORD PTR [eax]
300021ec:	ba 89 88 88 88       	mov    edx,0x88888889
300021f1:	89 d8                	mov    eax,ebx
300021f3:	f7 ea                	imul   edx
300021f5:	8d 04 1a             	lea    eax,[edx+ebx*1]
300021f8:	c1 f8 05             	sar    eax,0x5
300021fb:	89 c2                	mov    edx,eax
300021fd:	89 d8                	mov    eax,ebx
300021ff:	c1 f8 1f             	sar    eax,0x1f
30002202:	29 c2                	sub    edx,eax
30002204:	89 d0                	mov    eax,edx
30002206:	8d 14 06             	lea    edx,[esi+eax*1]
30002209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000220c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
3000220f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002212:	8b 18                	mov    ebx,DWORD PTR [eax]
30002214:	ba 89 88 88 88       	mov    edx,0x88888889
30002219:	89 d8                	mov    eax,ebx
3000221b:	f7 ea                	imul   edx
3000221d:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002220:	c1 f8 05             	sar    eax,0x5
30002223:	89 c2                	mov    edx,eax
30002225:	89 d8                	mov    eax,ebx
30002227:	c1 f8 1f             	sar    eax,0x1f
3000222a:	29 c2                	sub    edx,eax
3000222c:	89 d0                	mov    eax,edx
3000222e:	89 c2                	mov    edx,eax
30002230:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30002237:	89 c2                	mov    edx,eax
30002239:	89 d0                	mov    eax,edx
3000223b:	c1 e0 04             	shl    eax,0x4
3000223e:	29 d0                	sub    eax,edx
30002240:	29 c3                	sub    ebx,eax
30002242:	89 d8                	mov    eax,ebx
30002244:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002247:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
30002249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000224c:	8b 00                	mov    eax,DWORD PTR [eax]
3000224e:	85 c0                	test   eax,eax
30002250:	79 1c                	jns    3000226e <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
30002252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002255:	8b 00                	mov    eax,DWORD PTR [eax]
30002257:	8d 50 3c             	lea    edx,[eax+0x3c]
3000225a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000225d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
3000225f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002262:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002265:	8d 50 ff             	lea    edx,[eax-0x1]
30002268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000226b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
3000226e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002271:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
30002274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002277:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
3000227a:	ba 89 88 88 88       	mov    edx,0x88888889
3000227f:	89 d8                	mov    eax,ebx
30002281:	f7 ea                	imul   edx
30002283:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002286:	c1 f8 05             	sar    eax,0x5
30002289:	89 c2                	mov    edx,eax
3000228b:	89 d8                	mov    eax,ebx
3000228d:	c1 f8 1f             	sar    eax,0x1f
30002290:	29 c2                	sub    edx,eax
30002292:	89 d0                	mov    eax,edx
30002294:	8d 14 06             	lea    edx,[esi+eax*1]
30002297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000229a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
3000229d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022a0:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
300022a3:	ba 89 88 88 88       	mov    edx,0x88888889
300022a8:	89 d8                	mov    eax,ebx
300022aa:	f7 ea                	imul   edx
300022ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
300022af:	c1 f8 05             	sar    eax,0x5
300022b2:	89 c2                	mov    edx,eax
300022b4:	89 d8                	mov    eax,ebx
300022b6:	c1 f8 1f             	sar    eax,0x1f
300022b9:	29 c2                	sub    edx,eax
300022bb:	89 d0                	mov    eax,edx
300022bd:	89 c2                	mov    edx,eax
300022bf:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
300022c6:	89 c2                	mov    edx,eax
300022c8:	89 d0                	mov    eax,edx
300022ca:	c1 e0 04             	shl    eax,0x4
300022cd:	29 d0                	sub    eax,edx
300022cf:	29 c3                	sub    ebx,eax
300022d1:	89 d8                	mov    eax,ebx
300022d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300022d6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
300022d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300022df:	85 c0                	test   eax,eax
300022e1:	79 1e                	jns    30002301 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
300022e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300022e9:	8d 50 3c             	lea    edx,[eax+0x3c]
300022ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
300022f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300022f8:	8d 50 ff             	lea    edx,[eax-0x1]
300022fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
30002301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002304:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30002307:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
3000230c:	89 d8                	mov    eax,ebx
3000230e:	f7 ea                	imul   edx
30002310:	c1 fa 02             	sar    edx,0x2
30002313:	89 d8                	mov    eax,ebx
30002315:	c1 f8 1f             	sar    eax,0x1f
30002318:	29 c2                	sub    edx,eax
3000231a:	89 d0                	mov    eax,edx
3000231c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
3000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002322:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30002325:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
3000232a:	89 d8                	mov    eax,ebx
3000232c:	f7 ea                	imul   edx
3000232e:	c1 fa 02             	sar    edx,0x2
30002331:	89 d8                	mov    eax,ebx
30002333:	c1 f8 1f             	sar    eax,0x1f
30002336:	29 c2                	sub    edx,eax
30002338:	89 d0                	mov    eax,edx
3000233a:	01 c0                	add    eax,eax
3000233c:	01 d0                	add    eax,edx
3000233e:	c1 e0 03             	shl    eax,0x3
30002341:	29 c3                	sub    ebx,eax
30002343:	89 da                	mov    edx,ebx
30002345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002348:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
3000234b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000234e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002351:	85 c0                	test   eax,eax
30002353:	79 13                	jns    30002368 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
30002355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002358:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
3000235b:	8d 50 18             	lea    edx,[eax+0x18]
3000235e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002361:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
30002364:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
30002368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000236b:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
3000236e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002371:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002374:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002379:	89 d8                	mov    eax,ebx
3000237b:	f7 ea                	imul   edx
3000237d:	d1 fa                	sar    edx,1
3000237f:	89 d8                	mov    eax,ebx
30002381:	c1 f8 1f             	sar    eax,0x1f
30002384:	29 c2                	sub    edx,eax
30002386:	89 d0                	mov    eax,edx
30002388:	8d 14 06             	lea    edx,[esi+eax*1]
3000238b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000238e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
30002391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002394:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002397:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
3000239c:	89 d8                	mov    eax,ebx
3000239e:	f7 ea                	imul   edx
300023a0:	d1 fa                	sar    edx,1
300023a2:	89 d8                	mov    eax,ebx
300023a4:	c1 f8 1f             	sar    eax,0x1f
300023a7:	29 c2                	sub    edx,eax
300023a9:	89 d0                	mov    eax,edx
300023ab:	01 c0                	add    eax,eax
300023ad:	01 d0                	add    eax,edx
300023af:	c1 e0 02             	shl    eax,0x2
300023b2:	29 c3                	sub    ebx,eax
300023b4:	89 da                	mov    edx,ebx
300023b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023b9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
300023bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300023c2:	85 c0                	test   eax,eax
300023c4:	79 1e                	jns    300023e4 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
300023c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300023cc:	8d 50 0c             	lea    edx,[eax+0xc]
300023cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023d2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
300023d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300023db:	8d 50 ff             	lea    edx,[eax-0x1]
300023de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023e1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
300023e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
300023ea:	83 e8 01             	sub    eax,0x1
300023ed:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
300023f0:	e9 c1 00 00 00       	jmp    300024b6 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
300023f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300023fb:	8d 50 ff             	lea    edx,[eax-0x1]
300023fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002401:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002407:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000240a:	85 c0                	test   eax,eax
3000240c:	79 19                	jns    30002427 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
3000240e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002411:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002414:	8d 50 ff             	lea    edx,[eax-0x1]
30002417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000241a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
3000241d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002420:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30002427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000242a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000242d:	83 e0 03             	and    eax,0x3
30002430:	85 c0                	test   eax,eax
30002432:	75 62                	jne    30002496 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
30002434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002437:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000243a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002440:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002445:	89 d8                	mov    eax,ebx
30002447:	f7 ea                	imul   edx
30002449:	c1 fa 05             	sar    edx,0x5
3000244c:	89 d8                	mov    eax,ebx
3000244e:	c1 f8 1f             	sar    eax,0x1f
30002451:	29 c2                	sub    edx,eax
30002453:	89 d0                	mov    eax,edx
30002455:	6b c0 64             	imul   eax,eax,0x64
30002458:	29 c3                	sub    ebx,eax
3000245a:	89 d8                	mov    eax,ebx
3000245c:	85 c0                	test   eax,eax
3000245e:	75 2f                	jne    3000248f <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
30002460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002463:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002466:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000246c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002471:	89 d8                	mov    eax,ebx
30002473:	f7 ea                	imul   edx
30002475:	c1 fa 07             	sar    edx,0x7
30002478:	89 d8                	mov    eax,ebx
3000247a:	c1 f8 1f             	sar    eax,0x1f
3000247d:	29 c2                	sub    edx,eax
3000247f:	89 d0                	mov    eax,edx
30002481:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002487:	29 c3                	sub    ebx,eax
30002489:	89 d8                	mov    eax,ebx
3000248b:	85 c0                	test   eax,eax
3000248d:	75 07                	jne    30002496 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
3000248f:	ba 01 00 00 00       	mov    edx,0x1
30002494:	eb 05                	jmp    3000249b <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
30002496:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
3000249b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000249e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300024a1:	89 d0                	mov    eax,edx
300024a3:	01 c0                	add    eax,eax
300024a5:	01 d0                	add    eax,edx
300024a7:	c1 e0 02             	shl    eax,0x2
300024aa:	01 d8                	add    eax,ebx
300024ac:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
300024b3:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
300024b6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300024ba:	0f 88 35 ff ff ff    	js     300023f5 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
300024c0:	e9 c2 00 00 00       	jmp    30002587 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
300024c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024cb:	83 e0 03             	and    eax,0x3
300024ce:	85 c0                	test   eax,eax
300024d0:	75 62                	jne    30002534 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
300024d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024d5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024d8:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300024de:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024e3:	89 d8                	mov    eax,ebx
300024e5:	f7 ea                	imul   edx
300024e7:	c1 fa 05             	sar    edx,0x5
300024ea:	89 d8                	mov    eax,ebx
300024ec:	c1 f8 1f             	sar    eax,0x1f
300024ef:	29 c2                	sub    edx,eax
300024f1:	89 d0                	mov    eax,edx
300024f3:	6b c0 64             	imul   eax,eax,0x64
300024f6:	29 c3                	sub    ebx,eax
300024f8:	89 d8                	mov    eax,ebx
300024fa:	85 c0                	test   eax,eax
300024fc:	75 2f                	jne    3000252d <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
300024fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002501:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002504:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000250a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000250f:	89 d8                	mov    eax,ebx
30002511:	f7 ea                	imul   edx
30002513:	c1 fa 07             	sar    edx,0x7
30002516:	89 d8                	mov    eax,ebx
30002518:	c1 f8 1f             	sar    eax,0x1f
3000251b:	29 c2                	sub    edx,eax
3000251d:	89 d0                	mov    eax,edx
3000251f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002525:	29 c3                	sub    ebx,eax
30002527:	89 d8                	mov    eax,ebx
30002529:	85 c0                	test   eax,eax
3000252b:	75 07                	jne    30002534 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
3000252d:	ba 01 00 00 00       	mov    edx,0x1
30002532:	eb 05                	jmp    30002539 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
30002534:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
30002539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000253c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
3000253f:	89 d0                	mov    eax,edx
30002541:	01 c0                	add    eax,eax
30002543:	01 d0                	add    eax,edx
30002545:	c1 e0 02             	shl    eax,0x2
30002548:	01 d8                	add    eax,ebx
3000254a:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
30002551:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
30002554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002557:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000255a:	8d 50 01             	lea    edx,[eax+0x1]
3000255d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002560:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002566:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002569:	83 f8 0c             	cmp    eax,0xc
3000256c:	75 19                	jne    30002587 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
3000256e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002571:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
30002578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000257b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000257e:	8d 50 01             	lea    edx,[eax+0x1]
30002581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002584:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000258a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000258d:	83 e0 03             	and    eax,0x3
30002590:	85 c0                	test   eax,eax
30002592:	75 62                	jne    300025f6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
30002594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002597:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000259a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300025a0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300025a5:	89 d8                	mov    eax,ebx
300025a7:	f7 ea                	imul   edx
300025a9:	c1 fa 05             	sar    edx,0x5
300025ac:	89 d8                	mov    eax,ebx
300025ae:	c1 f8 1f             	sar    eax,0x1f
300025b1:	29 c2                	sub    edx,eax
300025b3:	89 d0                	mov    eax,edx
300025b5:	6b c0 64             	imul   eax,eax,0x64
300025b8:	29 c3                	sub    ebx,eax
300025ba:	89 d8                	mov    eax,ebx
300025bc:	85 c0                	test   eax,eax
300025be:	75 2f                	jne    300025ef <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
300025c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025c3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300025c6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300025cc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300025d1:	89 d8                	mov    eax,ebx
300025d3:	f7 ea                	imul   edx
300025d5:	c1 fa 07             	sar    edx,0x7
300025d8:	89 d8                	mov    eax,ebx
300025da:	c1 f8 1f             	sar    eax,0x1f
300025dd:	29 c2                	sub    edx,eax
300025df:	89 d0                	mov    eax,edx
300025e1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300025e7:	29 c3                	sub    ebx,eax
300025e9:	89 d8                	mov    eax,ebx
300025eb:	85 c0                	test   eax,eax
300025ed:	75 07                	jne    300025f6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
300025ef:	ba 01 00 00 00       	mov    edx,0x1
300025f4:	eb 05                	jmp    300025fb <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
300025f6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
300025fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025fe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002601:	89 d0                	mov    eax,edx
30002603:	01 c0                	add    eax,eax
30002605:	01 d0                	add    eax,edx
30002607:	c1 e0 02             	shl    eax,0x2
3000260a:	01 d8                	add    eax,ebx
3000260c:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
30002613:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30002616:	0f 8e a9 fe ff ff    	jle    300024c5 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
3000261c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
3000261f:	8d 50 01             	lea    edx,[eax+0x1]
30002622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002625:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
30002628:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
3000262f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002632:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002635:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
30002638:	81 ea 6c 07 00 00    	sub    edx,0x76c
3000263e:	39 d0                	cmp    eax,edx
30002640:	7d 0a                	jge    3000264c <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
30002642:	b8 19 fc ff ff       	mov    eax,0xfffffc19
30002647:	e9 ba 03 00 00       	jmp    30002a06 <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
3000264c:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
30002653:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
3000265a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
30002661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002664:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002667:	05 6c 07 00 00       	add    eax,0x76c
3000266c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
3000266f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002672:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002675:	3d 7c c6 59 00       	cmp    eax,0x59c67c
3000267a:	7e 07                	jle    30002683 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
3000267c:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
30002683:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002686:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002689:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
3000268f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
30002692:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002697:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
3000269a:	89 c2                	mov    edx,eax
3000269c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000269f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300026a2:	8d 58 03             	lea    ebx,[eax+0x3]
300026a5:	85 c0                	test   eax,eax
300026a7:	0f 48 c3             	cmovs  eax,ebx
300026aa:	c1 f8 02             	sar    eax,0x2
300026ad:	83 c0 01             	add    eax,0x1
300026b0:	39 c2                	cmp    edx,eax
300026b2:	7d 04                	jge    300026b8 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
300026b4:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
300026b8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026bb:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300026be:	8d 50 03             	lea    edx,[eax+0x3]
300026c1:	85 c0                	test   eax,eax
300026c3:	0f 48 c2             	cmovs  eax,edx
300026c6:	c1 f8 02             	sar    eax,0x2
300026c9:	89 c3                	mov    ebx,eax
300026cb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026ce:	83 e0 03             	and    eax,0x3
300026d1:	85 c0                	test   eax,eax
300026d3:	74 29                	je     300026fe <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
300026d5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026d8:	99                   	cdq    
300026d9:	c1 ea 1e             	shr    edx,0x1e
300026dc:	01 d0                	add    eax,edx
300026de:	83 e0 03             	and    eax,0x3
300026e1:	29 d0                	sub    eax,edx
300026e3:	89 c6                	mov    esi,eax
300026e5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
300026e8:	99                   	cdq    
300026e9:	c1 ea 1e             	shr    edx,0x1e
300026ec:	01 d0                	add    eax,edx
300026ee:	83 e0 03             	and    eax,0x3
300026f1:	29 d0                	sub    eax,edx
300026f3:	39 c6                	cmp    esi,eax
300026f5:	7d 07                	jge    300026fe <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
300026f7:	b8 01 00 00 00       	mov    eax,0x1
300026fc:	eb 05                	jmp    30002703 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
300026fe:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
30002703:	01 d8                	add    eax,ebx
30002705:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
30002708:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000270b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000270e:	89 c3                	mov    ebx,eax
30002710:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002715:	89 d8                	mov    eax,ebx
30002717:	f7 ea                	imul   edx
30002719:	c1 fa 05             	sar    edx,0x5
3000271c:	89 d8                	mov    eax,ebx
3000271e:	c1 f8 1f             	sar    eax,0x1f
30002721:	89 d7                	mov    edi,edx
30002723:	29 c7                	sub    edi,eax
30002725:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002728:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000272d:	89 d8                	mov    eax,ebx
3000272f:	f7 ea                	imul   edx
30002731:	c1 fa 05             	sar    edx,0x5
30002734:	89 d8                	mov    eax,ebx
30002736:	c1 f8 1f             	sar    eax,0x1f
30002739:	29 c2                	sub    edx,eax
3000273b:	89 d0                	mov    eax,edx
3000273d:	6b c0 64             	imul   eax,eax,0x64
30002740:	29 c3                	sub    ebx,eax
30002742:	89 d8                	mov    eax,ebx
30002744:	85 c0                	test   eax,eax
30002746:	74 49                	je     30002791 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
30002748:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000274b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002750:	89 d8                	mov    eax,ebx
30002752:	f7 ea                	imul   edx
30002754:	c1 fa 05             	sar    edx,0x5
30002757:	89 d8                	mov    eax,ebx
30002759:	c1 f8 1f             	sar    eax,0x1f
3000275c:	89 d6                	mov    esi,edx
3000275e:	29 c6                	sub    esi,eax
30002760:	6b c6 64             	imul   eax,esi,0x64
30002763:	89 de                	mov    esi,ebx
30002765:	29 c6                	sub    esi,eax
30002767:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
3000276a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000276f:	89 d8                	mov    eax,ebx
30002771:	f7 ea                	imul   edx
30002773:	c1 fa 05             	sar    edx,0x5
30002776:	89 d8                	mov    eax,ebx
30002778:	c1 f8 1f             	sar    eax,0x1f
3000277b:	29 c2                	sub    edx,eax
3000277d:	89 d0                	mov    eax,edx
3000277f:	6b c0 64             	imul   eax,eax,0x64
30002782:	29 c3                	sub    ebx,eax
30002784:	89 d8                	mov    eax,ebx
30002786:	39 c6                	cmp    esi,eax
30002788:	7d 07                	jge    30002791 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
3000278a:	b8 01 00 00 00       	mov    eax,0x1
3000278f:	eb 05                	jmp    30002796 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
30002791:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
30002796:	01 f8                	add    eax,edi
30002798:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
3000279b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000279e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300027a1:	89 c3                	mov    ebx,eax
300027a3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027a8:	89 d8                	mov    eax,ebx
300027aa:	f7 ea                	imul   edx
300027ac:	c1 fa 07             	sar    edx,0x7
300027af:	89 d8                	mov    eax,ebx
300027b1:	c1 f8 1f             	sar    eax,0x1f
300027b4:	89 d7                	mov    edi,edx
300027b6:	29 c7                	sub    edi,eax
300027b8:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300027bb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027c0:	89 d8                	mov    eax,ebx
300027c2:	f7 ea                	imul   edx
300027c4:	c1 fa 07             	sar    edx,0x7
300027c7:	89 d8                	mov    eax,ebx
300027c9:	c1 f8 1f             	sar    eax,0x1f
300027cc:	29 c2                	sub    edx,eax
300027ce:	89 d0                	mov    eax,edx
300027d0:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300027d6:	29 c3                	sub    ebx,eax
300027d8:	89 d8                	mov    eax,ebx
300027da:	85 c0                	test   eax,eax
300027dc:	74 4f                	je     3000282d <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
300027de:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300027e1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027e6:	89 d8                	mov    eax,ebx
300027e8:	f7 ea                	imul   edx
300027ea:	c1 fa 07             	sar    edx,0x7
300027ed:	89 d8                	mov    eax,ebx
300027ef:	c1 f8 1f             	sar    eax,0x1f
300027f2:	89 d6                	mov    esi,edx
300027f4:	29 c6                	sub    esi,eax
300027f6:	69 c6 90 01 00 00    	imul   eax,esi,0x190
300027fc:	89 de                	mov    esi,ebx
300027fe:	29 c6                	sub    esi,eax
30002800:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002803:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002808:	89 d8                	mov    eax,ebx
3000280a:	f7 ea                	imul   edx
3000280c:	c1 fa 07             	sar    edx,0x7
3000280f:	89 d8                	mov    eax,ebx
30002811:	c1 f8 1f             	sar    eax,0x1f
30002814:	29 c2                	sub    edx,eax
30002816:	89 d0                	mov    eax,edx
30002818:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000281e:	29 c3                	sub    ebx,eax
30002820:	89 d8                	mov    eax,ebx
30002822:	39 c6                	cmp    esi,eax
30002824:	7d 07                	jge    3000282d <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
30002826:	b8 01 00 00 00       	mov    eax,0x1
3000282b:	eb 05                	jmp    30002832 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
3000282d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
30002832:	01 f8                	add    eax,edi
30002834:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
30002837:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
3000283e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30002841:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
30002844:	eb 7b                	jmp    300028c1 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
30002846:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002849:	83 e0 03             	and    eax,0x3
3000284c:	85 c0                	test   eax,eax
3000284e:	75 50                	jne    300028a0 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
30002850:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002853:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002858:	89 d8                	mov    eax,ebx
3000285a:	f7 ea                	imul   edx
3000285c:	c1 fa 05             	sar    edx,0x5
3000285f:	89 d8                	mov    eax,ebx
30002861:	c1 f8 1f             	sar    eax,0x1f
30002864:	29 c2                	sub    edx,eax
30002866:	89 d0                	mov    eax,edx
30002868:	6b c0 64             	imul   eax,eax,0x64
3000286b:	29 c3                	sub    ebx,eax
3000286d:	89 d8                	mov    eax,ebx
3000286f:	85 c0                	test   eax,eax
30002871:	75 26                	jne    30002899 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
30002873:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002876:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000287b:	89 d8                	mov    eax,ebx
3000287d:	f7 ea                	imul   edx
3000287f:	c1 fa 07             	sar    edx,0x7
30002882:	89 d8                	mov    eax,ebx
30002884:	c1 f8 1f             	sar    eax,0x1f
30002887:	29 c2                	sub    edx,eax
30002889:	89 d0                	mov    eax,edx
3000288b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002891:	29 c3                	sub    ebx,eax
30002893:	89 d8                	mov    eax,ebx
30002895:	85 c0                	test   eax,eax
30002897:	75 07                	jne    300028a0 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
30002899:	ba 01 00 00 00       	mov    edx,0x1
3000289e:	eb 05                	jmp    300028a5 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
300028a0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
300028a5:	89 d0                	mov    eax,edx
300028a7:	01 c0                	add    eax,eax
300028a9:	01 d0                	add    eax,edx
300028ab:	c1 e0 02             	shl    eax,0x2
300028ae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
300028b1:	01 d0                	add    eax,edx
300028b3:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
300028ba:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
300028bd:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
300028c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300028c7:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
300028ca:	0f 8f 76 ff ff ff    	jg     30002846 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
300028d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
300028d6:	83 e8 01             	sub    eax,0x1
300028d9:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
300028dc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300028df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300028e2:	01 d0                	add    eax,edx
300028e4:	85 c0                	test   eax,eax
300028e6:	79 04                	jns    300028ec <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
300028e8:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
300028ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300028ef:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
300028f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300028f5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300028f8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
300028fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300028fe:	8d 58 04             	lea    ebx,[eax+0x4]
30002901:	ba 93 24 49 92       	mov    edx,0x92492493
30002906:	89 d8                	mov    eax,ebx
30002908:	f7 ea                	imul   edx
3000290a:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000290d:	c1 f8 02             	sar    eax,0x2
30002910:	89 c2                	mov    edx,eax
30002912:	89 d8                	mov    eax,ebx
30002914:	c1 f8 1f             	sar    eax,0x1f
30002917:	29 c2                	sub    edx,eax
30002919:	89 d0                	mov    eax,edx
3000291b:	89 c2                	mov    edx,eax
3000291d:	c1 e2 03             	shl    edx,0x3
30002920:	29 c2                	sub    edx,eax
30002922:	89 d8                	mov    eax,ebx
30002924:	29 d0                	sub    eax,edx
30002926:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30002929:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
3000292c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000292f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002932:	c1 e0 02             	shl    eax,0x2
30002935:	89 c2                	mov    edx,eax
30002937:	c1 e2 04             	shl    edx,0x4
3000293a:	29 c2                	sub    edx,eax
3000293c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000293f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002942:	01 d0                	add    eax,edx
30002944:	c1 e0 02             	shl    eax,0x2
30002947:	89 c2                	mov    edx,eax
30002949:	c1 e2 04             	shl    edx,0x4
3000294c:	29 c2                	sub    edx,eax
3000294e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002951:	8b 00                	mov    eax,DWORD PTR [eax]
30002953:	01 d0                	add    eax,edx
30002955:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
30002958:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
3000295d:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
30002960:	89 c3                	mov    ebx,eax
30002962:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002967:	89 d8                	mov    eax,ebx
30002969:	f7 ea                	imul   edx
3000296b:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000296e:	c1 f8 10             	sar    eax,0x10
30002971:	89 c2                	mov    edx,eax
30002973:	89 d8                	mov    eax,ebx
30002975:	c1 f8 1f             	sar    eax,0x1f
30002978:	29 c2                	sub    edx,eax
3000297a:	89 d0                	mov    eax,edx
3000297c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
3000297f:	7d 04                	jge    30002985 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
30002981:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
30002985:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002988:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
3000298e:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002991:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002997:	8b 00                	mov    eax,DWORD PTR [eax]
30002999:	85 c0                	test   eax,eax
3000299b:	74 1a                	je     300029b7 <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
3000299d:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
300029a3:	8b 00                	mov    eax,DWORD PTR [eax]
300029a5:	ba ff ff ff 7f       	mov    edx,0x7fffffff
300029aa:	29 c2                	sub    edx,eax
300029ac:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
300029af:	39 c2                	cmp    edx,eax
300029b1:	73 04                	jae    300029b7 <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
      ((libcTZ < 0) && (seconds < -libcTZ))) {
          overflow|=16;
300029b3:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
300029b7:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
300029ba:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
300029c0:	8b 00                	mov    eax,DWORD PTR [eax]
300029c2:	01 d0                	add    eax,edx
300029c4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
300029c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
300029cd:	85 c0                	test   eax,eax
300029cf:	74 0b                	je     300029dc <mktime+0x80f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
300029d1:	8b 81 54 00 00 00    	mov    eax,DWORD PTR [ecx+0x54]
300029d7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
300029da:	eb 07                	jmp    300029e3 <mktime+0x816>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
300029dc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
300029e3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
300029e6:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
300029e9:	7e 04                	jle    300029ef <mktime+0x822>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
300029eb:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
300029ef:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
300029f2:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
300029f5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
300029f9:	74 08                	je     30002a03 <mktime+0x836>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
300029fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
300029fe:	83 e8 02             	sub    eax,0x2
30002a01:	eb 03                	jmp    30002a06 <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
30002a03:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
30002a06:	83 c4 20             	add    esp,0x20
30002a09:	5b                   	pop    ebx
30002a0a:	5e                   	pop    esi
30002a0b:	5f                   	pop    edi
30002a0c:	5d                   	pop    ebp
30002a0d:	c3                   	ret    

30002a0e <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
30002a0e:	55                   	push   ebp
30002a0f:	89 e5                	mov    ebp,esp
30002a11:	56                   	push   esi
30002a12:	53                   	push   ebx
30002a13:	83 ec 14             	sub    esp,0x14
30002a16:	e8 60 00 00 00       	call   30002a7b <__x86.get_pc_thunk.ax>
30002a1b:	05 7d 19 00 00       	add    eax,0x197d
30002a20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002a23:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
30002a26:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
30002a2d:	b8 71 01 00 00       	mov    eax,0x171
30002a32:	bb 00 00 00 00       	mov    ebx,0x0
30002a37:	b9 00 00 00 00       	mov    ecx,0x0
30002a3c:	ba 00 00 00 00       	mov    edx,0x0
30002a41:	be 00 00 00 00       	mov    esi,0x0
30002a46:	e8 fc ff ff ff       	call   30002a47 <gettime+0x39>
30002a4b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
30002a4e:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
30002a52:	74 11                	je     30002a65 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
30002a54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002a57:	8d 45 f4             	lea    eax,[ebp-0xc]
30002a5a:	50                   	push   eax
30002a5b:	e8 1b f7 ff ff       	call   3000217b <localtime_rI>
30002a60:	83 c4 08             	add    esp,0x8
30002a63:	eb 0f                	jmp    30002a74 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
30002a65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002a68:	8d 45 f4             	lea    eax,[ebp-0xc]
30002a6b:	50                   	push   eax
30002a6c:	e8 93 f3 ff ff       	call   30001e04 <gmtime_rI>
30002a71:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
30002a74:	8d 65 f8             	lea    esp,[ebp-0x8]
30002a77:	5b                   	pop    ebx
30002a78:	5e                   	pop    esi
30002a79:	5d                   	pop    ebp
30002a7a:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

30002a7b <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
30002a7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
30002a7e:	c3                   	ret    

Disassembly of section .plt:

30002a80 <.plt>:
30002a80:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002a86:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
30002a8c:	00 00                	add    BYTE PTR [eax],al
30002a8e:	00 00                	add    BYTE PTR [eax],al
30002a90:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002a96:	68 00 00 00 00       	push   0x0
30002a9b:	e9 e0 ff ff ff       	jmp    30002a80 <__x86.get_pc_thunk.ax+0x5>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002aa0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002aa0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002aa3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

30002aa4 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
30002aa4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
30002aa7:	c3                   	ret    

Disassembly of section .eh_frame:

30002aa8 <.eh_frame>:
30002aa8:	14 00                	adc    al,0x0
30002aaa:	00 00                	add    BYTE PTR [eax],al
30002aac:	00 00                	add    BYTE PTR [eax],al
30002aae:	00 00                	add    BYTE PTR [eax],al
30002ab0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30002ab3:	00 01                	add    BYTE PTR [ecx],al
30002ab5:	7c 08                	jl     30002abf <__x86.get_pc_thunk.cx+0x1b>
30002ab7:	01 1b                	add    DWORD PTR [ebx],ebx
30002ab9:	0c 04                	or     al,0x4
30002abb:	04 88                	add    al,0x88
30002abd:	01 00                	add    DWORD PTR [eax],eax
30002abf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002ac2:	00 00                	add    BYTE PTR [eax],al
30002ac4:	1c 00                	sbb    al,0x0
30002ac6:	00 00                	add    BYTE PTR [eax],al
30002ac8:	38 d5                	cmp    ch,dl
30002aca:	ff                   	(bad)  
30002acb:	ff                   	(bad)  
30002acc:	38 00                	cmp    BYTE PTR [eax],al
30002ace:	00 00                	add    BYTE PTR [eax],al
30002ad0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ad3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ad9:	74 c5                	je     30002aa0 <__x86.get_pc_thunk.bx>
30002adb:	0c 04                	or     al,0x4
30002add:	04 00                	add    al,0x0
30002adf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002ae2:	00 00                	add    BYTE PTR [eax],al
30002ae4:	3c 00                	cmp    al,0x0
30002ae6:	00 00                	add    BYTE PTR [eax],al
30002ae8:	50                   	push   eax
30002ae9:	d5 ff                	aad    0xff
30002aeb:	ff                   	(bad)  
30002aec:	38 00                	cmp    BYTE PTR [eax],al
30002aee:	00 00                	add    BYTE PTR [eax],al
30002af0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002af3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002af9:	74 c5                	je     30002ac0 <__x86.get_pc_thunk.cx+0x1c>
30002afb:	0c 04                	or     al,0x4
30002afd:	04 00                	add    al,0x0
30002aff:	00 10                	add    BYTE PTR [eax],dl
30002b01:	00 00                	add    BYTE PTR [eax],al
30002b03:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
30002b07:	00 73 ff             	add    BYTE PTR [ebx-0x1],dh
30002b0a:	ff                   	(bad)  
30002b0b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002b0e:	00 00                	add    BYTE PTR [eax],al
30002b10:	00 00                	add    BYTE PTR [eax],al
30002b12:	00 00                	add    BYTE PTR [eax],al
30002b14:	24 00                	and    al,0x0
30002b16:	00 00                	add    BYTE PTR [eax],al
30002b18:	70 00                	jo     30002b1a <__x86.get_pc_thunk.cx+0x76>
30002b1a:	00 00                	add    BYTE PTR [eax],al
30002b1c:	54                   	push   esp
30002b1d:	d5 ff                	aad    0xff
30002b1f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002b22:	00 00                	add    BYTE PTR [eax],al
30002b24:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002b27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b2d:	42                   	inc    edx
30002b2e:	86 03                	xchg   BYTE PTR [ebx],al
30002b30:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002b34:	c3                   	ret    
30002b35:	41                   	inc    ecx
30002b36:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002b3a:	04 04                	add    al,0x4
30002b3c:	24 00                	and    al,0x0
30002b3e:	00 00                	add    BYTE PTR [eax],al
30002b40:	98                   	cwde   
30002b41:	00 00                	add    BYTE PTR [eax],al
30002b43:	00 81 d5 ff ff 55    	add    BYTE PTR [ecx+0x55ffffd5],al
30002b49:	00 00                	add    BYTE PTR [eax],al
30002b4b:	00 00                	add    BYTE PTR [eax],al
30002b4d:	41                   	inc    ecx
30002b4e:	0e                   	push   cs
30002b4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b55:	42                   	inc    edx
30002b56:	86 03                	xchg   BYTE PTR [ebx],al
30002b58:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002b5c:	c3                   	ret    
30002b5d:	41                   	inc    ecx
30002b5e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002b62:	04 04                	add    al,0x4
30002b64:	24 00                	and    al,0x0
30002b66:	00 00                	add    BYTE PTR [eax],al
30002b68:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002b6b:	00 b0 d5 ff ff 97    	add    BYTE PTR [eax-0x6800002b],dh
30002b71:	00 00                	add    BYTE PTR [eax],al
30002b73:	00 00                	add    BYTE PTR [eax],al
30002b75:	41                   	inc    ecx
30002b76:	0e                   	push   cs
30002b77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b7d:	42                   	inc    edx
30002b7e:	86 03                	xchg   BYTE PTR [ebx],al
30002b80:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
30002b84:	c3                   	ret    
30002b85:	41                   	inc    ecx
30002b86:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002b8a:	04 04                	add    al,0x4
30002b8c:	10 00                	adc    BYTE PTR [eax],al
30002b8e:	00 00                	add    BYTE PTR [eax],al
30002b90:	e8 00 00 00 0c       	call   3c002b95 <ticksToWait+0xbffe7a5>
30002b95:	ff                   	(bad)  
30002b96:	ff                   	(bad)  
30002b97:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002b9a:	00 00                	add    BYTE PTR [eax],al
30002b9c:	00 00                	add    BYTE PTR [eax],al
30002b9e:	00 00                	add    BYTE PTR [eax],al
30002ba0:	20 00                	and    BYTE PTR [eax],al
30002ba2:	00 00                	add    BYTE PTR [eax],al
30002ba4:	fc                   	cld    
30002ba5:	00 00                	add    BYTE PTR [eax],al
30002ba7:	00 0c d6             	add    BYTE PTR [esi+edx*8],cl
30002baa:	ff                   	(bad)  
30002bab:	ff 77 00             	push   DWORD PTR [edi+0x0]
30002bae:	00 00                	add    BYTE PTR [eax],al
30002bb0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002bb3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bb9:	44                   	inc    esp
30002bba:	83 03 02             	add    DWORD PTR [ebx],0x2
30002bbd:	6f                   	outs   dx,DWORD PTR ds:[esi]
30002bbe:	c5 c3 0c             	(bad)  
30002bc1:	04 04                	add    al,0x4
30002bc3:	00 20                	add    BYTE PTR [eax],ah
30002bc5:	00 00                	add    BYTE PTR [eax],al
30002bc7:	00 20                	add    BYTE PTR [eax],ah
30002bc9:	01 00                	add    DWORD PTR [eax],eax
30002bcb:	00 5f d6             	add    BYTE PTR [edi-0x2a],bl
30002bce:	ff                   	(bad)  
30002bcf:	ff                   	(bad)  
30002bd0:	bb 00 00 00 00       	mov    ebx,0x0
30002bd5:	41                   	inc    ecx
30002bd6:	0e                   	push   cs
30002bd7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bdd:	44                   	inc    esp
30002bde:	83 03 02             	add    DWORD PTR [ebx],0x2
30002be1:	b3 c5                	mov    bl,0xc5
30002be3:	c3                   	ret    
30002be4:	0c 04                	or     al,0x4
30002be6:	04 00                	add    al,0x0
30002be8:	20 00                	and    BYTE PTR [eax],al
30002bea:	00 00                	add    BYTE PTR [eax],al
30002bec:	44                   	inc    esp
30002bed:	01 00                	add    DWORD PTR [eax],eax
30002bef:	00 f6                	add    dh,dh
30002bf1:	d6                   	(bad)  
30002bf2:	ff                   	(bad)  
30002bf3:	ff                   	(bad)  
30002bf4:	bb 00 00 00 00       	mov    ebx,0x0
30002bf9:	41                   	inc    ecx
30002bfa:	0e                   	push   cs
30002bfb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c01:	44                   	inc    esp
30002c02:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c05:	b3 c5                	mov    bl,0xc5
30002c07:	c3                   	ret    
30002c08:	0c 04                	or     al,0x4
30002c0a:	04 00                	add    al,0x0
30002c0c:	1c 00                	sbb    al,0x0
30002c0e:	00 00                	add    BYTE PTR [eax],al
30002c10:	68 01 00 00 8d       	push   0x8d000001
30002c15:	d7                   	xlat   BYTE PTR ds:[ebx]
30002c16:	ff                   	(bad)  
30002c17:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
30002c1b:	00 00                	add    BYTE PTR [eax],al
30002c1d:	41                   	inc    ecx
30002c1e:	0e                   	push   cs
30002c1f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c25:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
30002c28:	0c 04                	or     al,0x4
30002c2a:	04 00                	add    al,0x0
30002c2c:	20 00                	and    BYTE PTR [eax],al
30002c2e:	00 00                	add    BYTE PTR [eax],al
30002c30:	88 01                	mov    BYTE PTR [ecx],al
30002c32:	00 00                	add    BYTE PTR [eax],al
30002c34:	cc                   	int3   
30002c35:	d7                   	xlat   BYTE PTR ds:[ebx]
30002c36:	ff                   	(bad)  
30002c37:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
30002c3d:	41                   	inc    ecx
30002c3e:	0e                   	push   cs
30002c3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c45:	44                   	inc    esp
30002c46:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c49:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
30002c4e:	04 00                	add    al,0x0
30002c50:	20 00                	and    BYTE PTR [eax],al
30002c52:	00 00                	add    BYTE PTR [eax],al
30002c54:	ac                   	lods   al,BYTE PTR ds:[esi]
30002c55:	01 00                	add    DWORD PTR [eax],eax
30002c57:	00 52 d8             	add    BYTE PTR [edx-0x28],dl
30002c5a:	ff                   	(bad)  
30002c5b:	ff c1                	inc    ecx
30002c5d:	01 00                	add    DWORD PTR [eax],eax
30002c5f:	00 00                	add    BYTE PTR [eax],al
30002c61:	41                   	inc    ecx
30002c62:	0e                   	push   cs
30002c63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c69:	44                   	inc    esp
30002c6a:	83 03 03             	add    DWORD PTR [ebx],0x3
30002c6d:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
30002c72:	04 04                	add    al,0x4
30002c74:	20 00                	and    BYTE PTR [eax],al
30002c76:	00 00                	add    BYTE PTR [eax],al
30002c78:	d0 01                	rol    BYTE PTR [ecx],1
30002c7a:	00 00                	add    BYTE PTR [eax],al
30002c7c:	f0 d9 ff             	lock fcos 
30002c7f:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
30002c85:	41                   	inc    ecx
30002c86:	0e                   	push   cs
30002c87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c8d:	44                   	inc    esp
30002c8e:	83 03 65             	add    DWORD PTR [ebx],0x65
30002c91:	c5 c3 0c             	(bad)  
30002c94:	04 04                	add    al,0x4
30002c96:	00 00                	add    BYTE PTR [eax],al
30002c98:	20 00                	and    BYTE PTR [eax],al
30002c9a:	00 00                	add    BYTE PTR [eax],al
30002c9c:	f4                   	hlt    
30002c9d:	01 00                	add    DWORD PTR [eax],eax
30002c9f:	00 f9                	add    cl,bh
30002ca1:	d9 ff                	fcos   
30002ca3:	ff 2a                	jmp    FWORD PTR [edx]
30002ca5:	00 00                	add    BYTE PTR [eax],al
30002ca7:	00 00                	add    BYTE PTR [eax],al
30002ca9:	41                   	inc    ecx
30002caa:	0e                   	push   cs
30002cab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cb1:	44                   	inc    esp
30002cb2:	83 03 62             	add    DWORD PTR [ebx],0x62
30002cb5:	c5 c3 0c             	(bad)  
30002cb8:	04 04                	add    al,0x4
30002cba:	00 00                	add    BYTE PTR [eax],al
30002cbc:	24 00                	and    al,0x0
30002cbe:	00 00                	add    BYTE PTR [eax],al
30002cc0:	18 02                	sbb    BYTE PTR [edx],al
30002cc2:	00 00                	add    BYTE PTR [eax],al
30002cc4:	ff d9                	call   <internal disassembler error>
30002cc6:	ff                   	(bad)  
30002cc7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002ccd:	41                   	inc    ecx
30002cce:	0e                   	push   cs
30002ccf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cd5:	42                   	inc    edx
30002cd6:	86 03                	xchg   BYTE PTR [ebx],al
30002cd8:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002cdf:	c5 
30002ce0:	0c 04                	or     al,0x4
30002ce2:	04 00                	add    al,0x0
30002ce4:	20 00                	and    BYTE PTR [eax],al
30002ce6:	00 00                	add    BYTE PTR [eax],al
30002ce8:	40                   	inc    eax
30002ce9:	02 00                	add    al,BYTE PTR [eax]
30002ceb:	00 0c da             	add    BYTE PTR [edx+ebx*8],cl
30002cee:	ff                   	(bad)  
30002cef:	ff 31                	push   DWORD PTR [ecx]
30002cf1:	00 00                	add    BYTE PTR [eax],al
30002cf3:	00 00                	add    BYTE PTR [eax],al
30002cf5:	41                   	inc    ecx
30002cf6:	0e                   	push   cs
30002cf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cfd:	44                   	inc    esp
30002cfe:	83 03 69             	add    DWORD PTR [ebx],0x69
30002d01:	c5 c3 0c             	(bad)  
30002d04:	04 04                	add    al,0x4
30002d06:	00 00                	add    BYTE PTR [eax],al
30002d08:	20 00                	and    BYTE PTR [eax],al
30002d0a:	00 00                	add    BYTE PTR [eax],al
30002d0c:	64 02 00             	add    al,BYTE PTR fs:[eax]
30002d0f:	00 1c da             	add    BYTE PTR [edx+ebx*8],bl
30002d12:	ff                   	(bad)  
30002d13:	ff 26                	jmp    DWORD PTR [esi]
30002d15:	00 00                	add    BYTE PTR [eax],al
30002d17:	00 00                	add    BYTE PTR [eax],al
30002d19:	41                   	inc    ecx
30002d1a:	0e                   	push   cs
30002d1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d21:	41                   	inc    ecx
30002d22:	83 03 60             	add    DWORD PTR [ebx],0x60
30002d25:	c3                   	ret    
30002d26:	41                   	inc    ecx
30002d27:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d2a:	04 00                	add    al,0x0
30002d2c:	20 00                	and    BYTE PTR [eax],al
30002d2e:	00 00                	add    BYTE PTR [eax],al
30002d30:	88 02                	mov    BYTE PTR [edx],al
30002d32:	00 00                	add    BYTE PTR [eax],al
30002d34:	1e                   	push   ds
30002d35:	da ff                	(bad)  
30002d37:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
30002d3a:	00 00                	add    BYTE PTR [eax],al
30002d3c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d45:	44                   	inc    esp
30002d46:	83 03 7a             	add    DWORD PTR [ebx],0x7a
30002d49:	c3                   	ret    
30002d4a:	41                   	inc    ecx
30002d4b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d4e:	04 00                	add    al,0x0
30002d50:	20 00                	and    BYTE PTR [eax],al
30002d52:	00 00                	add    BYTE PTR [eax],al
30002d54:	ac                   	lods   al,BYTE PTR ds:[esi]
30002d55:	02 00                	add    al,BYTE PTR [eax]
30002d57:	00 3d da ff ff 2f    	add    BYTE PTR ds:0x2fffffda,bh
30002d5d:	00 00                	add    BYTE PTR [eax],al
30002d5f:	00 00                	add    BYTE PTR [eax],al
30002d61:	41                   	inc    ecx
30002d62:	0e                   	push   cs
30002d63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d69:	44                   	inc    esp
30002d6a:	83 03 66             	add    DWORD PTR [ebx],0x66
30002d6d:	c3                   	ret    
30002d6e:	41                   	inc    ecx
30002d6f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d72:	04 00                	add    al,0x0
30002d74:	20 00                	and    BYTE PTR [eax],al
30002d76:	00 00                	add    BYTE PTR [eax],al
30002d78:	d0 02                	rol    BYTE PTR [edx],1
30002d7a:	00 00                	add    BYTE PTR [eax],al
30002d7c:	48                   	dec    eax
30002d7d:	da ff                	(bad)  
30002d7f:	ff                   	(bad)  
30002d80:	ba 00 00 00 00       	mov    edx,0x0
30002d85:	41                   	inc    ecx
30002d86:	0e                   	push   cs
30002d87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d8d:	44                   	inc    esp
30002d8e:	83 03 02             	add    DWORD PTR [ebx],0x2
30002d91:	b2 c5                	mov    dl,0xc5
30002d93:	c3                   	ret    
30002d94:	0c 04                	or     al,0x4
30002d96:	04 00                	add    al,0x0
30002d98:	24 00                	and    al,0x0
30002d9a:	00 00                	add    BYTE PTR [eax],al
30002d9c:	f4                   	hlt    
30002d9d:	02 00                	add    al,BYTE PTR [eax]
30002d9f:	00 e0                	add    al,ah
30002da1:	da ff                	(bad)  
30002da3:	ff                   	(bad)  
30002da4:	3a 00                	cmp    al,BYTE PTR [eax]
30002da6:	00 00                	add    BYTE PTR [eax],al
30002da8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002dab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002db1:	45                   	inc    ebp
30002db2:	86 03                	xchg   BYTE PTR [ebx],al
30002db4:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
30002db8:	41                   	inc    ecx
30002db9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002dbd:	04 04                	add    al,0x4
30002dbf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002dc2:	00 00                	add    BYTE PTR [eax],al
30002dc4:	1c 03                	sbb    al,0x3
30002dc6:	00 00                	add    BYTE PTR [eax],al
30002dc8:	f2 da ff             	repnz (bad) 
30002dcb:	ff                   	(bad)  
30002dcc:	3c 00                	cmp    al,0x0
30002dce:	00 00                	add    BYTE PTR [eax],al
30002dd0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002dd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002dd9:	45                   	inc    ebp
30002dda:	86 03                	xchg   BYTE PTR [ebx],al
30002ddc:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
30002de0:	41                   	inc    ecx
30002de1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002de5:	04 04                	add    al,0x4
30002de7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002dea:	00 00                	add    BYTE PTR [eax],al
30002dec:	44                   	inc    esp
30002ded:	03 00                	add    eax,DWORD PTR [eax]
30002def:	00 06                	add    BYTE PTR [esi],al
30002df1:	db ff                	(bad)  
30002df3:	ff                   	(bad)  
30002df4:	3e 00 00             	add    BYTE PTR ds:[eax],al
30002df7:	00 00                	add    BYTE PTR [eax],al
30002df9:	41                   	inc    ecx
30002dfa:	0e                   	push   cs
30002dfb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e01:	45                   	inc    ebp
30002e02:	86 03                	xchg   BYTE PTR [ebx],al
30002e04:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
30002e08:	41                   	inc    ecx
30002e09:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002e0d:	04 04                	add    al,0x4
30002e0f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002e12:	00 00                	add    BYTE PTR [eax],al
30002e14:	6c                   	ins    BYTE PTR es:[edi],dx
30002e15:	03 00                	add    eax,DWORD PTR [eax]
30002e17:	00 1c db             	add    BYTE PTR [ebx+ebx*8],bl
30002e1a:	ff                   	(bad)  
30002e1b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30002e1e:	00 00                	add    BYTE PTR [eax],al
30002e20:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e29:	45                   	inc    ebp
30002e2a:	86 03                	xchg   BYTE PTR [ebx],al
30002e2c:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
30002e33:	c5 
30002e34:	0c 04                	or     al,0x4
30002e36:	04 00                	add    al,0x0
30002e38:	24 00                	and    al,0x0
30002e3a:	00 00                	add    BYTE PTR [eax],al
30002e3c:	94                   	xchg   esp,eax
30002e3d:	03 00                	add    eax,DWORD PTR [eax]
30002e3f:	00 34 db             	add    BYTE PTR [ebx+ebx*8],dh
30002e42:	ff                   	(bad)  
30002e43:	ff 42 00             	inc    DWORD PTR [edx+0x0]
30002e46:	00 00                	add    BYTE PTR [eax],al
30002e48:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e51:	45                   	inc    ebp
30002e52:	86 03                	xchg   BYTE PTR [ebx],al
30002e54:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
30002e58:	41                   	inc    ecx
30002e59:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002e5d:	04 04                	add    al,0x4
30002e5f:	00 20                	add    BYTE PTR [eax],ah
30002e61:	00 00                	add    BYTE PTR [eax],al
30002e63:	00 bc 03 00 00 4e db 	add    BYTE PTR [ebx+eax*1-0x24b20000],bh
30002e6a:	ff                   	(bad)  
30002e6b:	ff a5 00 00 00 00    	jmp    DWORD PTR [ebp+0x0]
30002e71:	41                   	inc    ecx
30002e72:	0e                   	push   cs
30002e73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e79:	44                   	inc    esp
30002e7a:	83 03 02             	add    DWORD PTR [ebx],0x2
30002e7d:	9d                   	popf   
30002e7e:	c5 c3 0c             	(bad)  
30002e81:	04 04                	add    al,0x4
30002e83:	00 20                	add    BYTE PTR [eax],ah
30002e85:	00 00                	add    BYTE PTR [eax],al
30002e87:	00 e0                	add    al,ah
30002e89:	03 00                	add    eax,DWORD PTR [eax]
30002e8b:	00 cf                	add    bh,cl
30002e8d:	db ff                	(bad)  
30002e8f:	ff 1f                	call   FWORD PTR [edi]
30002e91:	00 00                	add    BYTE PTR [eax],al
30002e93:	00 00                	add    BYTE PTR [eax],al
30002e95:	41                   	inc    ecx
30002e96:	0e                   	push   cs
30002e97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e9d:	44                   	inc    esp
30002e9e:	83 03 56             	add    DWORD PTR [ebx],0x56
30002ea1:	c3                   	ret    
30002ea2:	41                   	inc    ecx
30002ea3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002ea6:	04 00                	add    al,0x0
30002ea8:	1c 00                	sbb    al,0x0
30002eaa:	00 00                	add    BYTE PTR [eax],al
30002eac:	04 04                	add    al,0x4
30002eae:	00 00                	add    BYTE PTR [eax],al
30002eb0:	ca db ff             	retf   0xffdb
30002eb3:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002eb6:	00 00                	add    BYTE PTR [eax],al
30002eb8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ebb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ec1:	70 c5                	jo     30002e88 <__x86.get_pc_thunk.cx+0x3e4>
30002ec3:	0c 04                	or     al,0x4
30002ec5:	04 00                	add    al,0x0
30002ec7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002eca:	00 00                	add    BYTE PTR [eax],al
30002ecc:	24 04                	and    al,0x4
30002ece:	00 00                	add    BYTE PTR [eax],al
30002ed0:	de db                	(bad)  
30002ed2:	ff                   	(bad)  
30002ed3:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002ed6:	00 00                	add    BYTE PTR [eax],al
30002ed8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002edb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ee1:	70 c5                	jo     30002ea8 <__x86.get_pc_thunk.cx+0x404>
30002ee3:	0c 04                	or     al,0x4
30002ee5:	04 00                	add    al,0x0
30002ee7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002eea:	00 00                	add    BYTE PTR [eax],al
30002eec:	44                   	inc    esp
30002eed:	04 00                	add    al,0x0
30002eef:	00 f2                	add    dl,dh
30002ef1:	db ff                	(bad)  
30002ef3:	ff 37                	push   DWORD PTR [edi]
30002ef5:	00 00                	add    BYTE PTR [eax],al
30002ef7:	00 00                	add    BYTE PTR [eax],al
30002ef9:	41                   	inc    ecx
30002efa:	0e                   	push   cs
30002efb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f01:	73 c5                	jae    30002ec8 <__x86.get_pc_thunk.cx+0x424>
30002f03:	0c 04                	or     al,0x4
30002f05:	04 00                	add    al,0x0
30002f07:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002f0a:	00 00                	add    BYTE PTR [eax],al
30002f0c:	64                   	fs
30002f0d:	04 00                	add    al,0x0
30002f0f:	00 09                	add    BYTE PTR [ecx],cl
30002f11:	dc ff                	fdiv   st(7),st
30002f13:	ff 72 00             	push   DWORD PTR [edx+0x0]
30002f16:	00 00                	add    BYTE PTR [eax],al
30002f18:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f21:	45                   	inc    ebp
30002f22:	86 03                	xchg   BYTE PTR [ebx],al
30002f24:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
30002f28:	c3                   	ret    
30002f29:	41                   	inc    ecx
30002f2a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002f2e:	04 04                	add    al,0x4
30002f30:	1c 00                	sbb    al,0x0
30002f32:	00 00                	add    BYTE PTR [eax],al
30002f34:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
30002f37:	00 53 dc             	add    BYTE PTR [ebx-0x24],dl
30002f3a:	ff                   	(bad)  
30002f3b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30002f41:	41                   	inc    ecx
30002f42:	0e                   	push   cs
30002f43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f49:	59                   	pop    ecx
30002f4a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002f4d:	04 00                	add    al,0x0
30002f4f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f52:	00 00                	add    BYTE PTR [eax],al
30002f54:	ac                   	lods   al,BYTE PTR ds:[esi]
30002f55:	04 00                	add    al,0x0
30002f57:	00 50 dc             	add    BYTE PTR [eax-0x24],dl
30002f5a:	ff                   	(bad)  
30002f5b:	ff 29                	jmp    FWORD PTR [ecx]
30002f5d:	00 00                	add    BYTE PTR [eax],al
30002f5f:	00 00                	add    BYTE PTR [eax],al
30002f61:	41                   	inc    ecx
30002f62:	0e                   	push   cs
30002f63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f69:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30002f6d:	04 00                	add    al,0x0
30002f6f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f72:	00 00                	add    BYTE PTR [eax],al
30002f74:	cc                   	int3   
30002f75:	04 00                	add    al,0x0
30002f77:	00 59 dc             	add    BYTE PTR [ecx-0x24],bl
30002f7a:	ff                   	(bad)  
30002f7b:	ff 19                	call   FWORD PTR [ecx]
30002f7d:	00 00                	add    BYTE PTR [eax],al
30002f7f:	00 00                	add    BYTE PTR [eax],al
30002f81:	41                   	inc    ecx
30002f82:	0e                   	push   cs
30002f83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f89:	55                   	push   ebp
30002f8a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002f8d:	04 00                	add    al,0x0
30002f8f:	00 20                	add    BYTE PTR [eax],ah
30002f91:	00 00                	add    BYTE PTR [eax],al
30002f93:	00 ec                	add    ah,ch
30002f95:	04 00                	add    al,0x0
30002f97:	00 52 dc             	add    BYTE PTR [edx-0x24],dl
30002f9a:	ff                   	(bad)  
30002f9b:	ff ed                	jmp    <internal disassembler error>
30002f9d:	01 00                	add    DWORD PTR [eax],eax
30002f9f:	00 00                	add    BYTE PTR [eax],al
30002fa1:	41                   	inc    ecx
30002fa2:	0e                   	push   cs
30002fa3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fa9:	44                   	inc    esp
30002faa:	83 03 03             	add    DWORD PTR [ebx],0x3
30002fad:	e5 01                	in     eax,0x1
30002faf:	c5 c3 0c             	(bad)  
30002fb2:	04 04                	add    al,0x4
30002fb4:	20 00                	and    BYTE PTR [eax],al
30002fb6:	00 00                	add    BYTE PTR [eax],al
30002fb8:	10 05 00 00 1b de    	adc    BYTE PTR ds:0xde1b0000,al
30002fbe:	ff                   	(bad)  
30002fbf:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
30002fc3:	00 00                	add    BYTE PTR [eax],al
30002fc5:	41                   	inc    ecx
30002fc6:	0e                   	push   cs
30002fc7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fcd:	44                   	inc    esp
30002fce:	83 03 02             	add    DWORD PTR [ebx],0x2
30002fd1:	44                   	inc    esp
30002fd2:	c5 c3 0c             	(bad)  
30002fd5:	04 04                	add    al,0x4
30002fd7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002fda:	00 00                	add    BYTE PTR [eax],al
30002fdc:	34 05                	xor    al,0x5
30002fde:	00 00                	add    BYTE PTR [eax],al
30002fe0:	43                   	inc    ebx
30002fe1:	de ff                	fdivp  st(7),st
30002fe3:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
30002fe6:	00 00                	add    BYTE PTR [eax],al
30002fe8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002feb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ff1:	58                   	pop    eax
30002ff2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002ff5:	04 00                	add    al,0x0
30002ff7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002ffa:	00 00                	add    BYTE PTR [eax],al
30002ffc:	54                   	push   esp
30002ffd:	05 00 00 3f de       	add    eax,0xde3f0000
30003002:	ff                   	(bad)  
30003003:	ff 20                	jmp    DWORD PTR [eax]
30003005:	00 00                	add    BYTE PTR [eax],al
30003007:	00 00                	add    BYTE PTR [eax],al
30003009:	41                   	inc    ecx
3000300a:	0e                   	push   cs
3000300b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003011:	5c                   	pop    esp
30003012:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003015:	04 00                	add    al,0x0
30003017:	00 20                	add    BYTE PTR [eax],ah
30003019:	00 00                	add    BYTE PTR [eax],al
3000301b:	00 74 05 00          	add    BYTE PTR [ebp+eax*1+0x0],dh
3000301f:	00 40 de             	add    BYTE PTR [eax-0x22],al
30003022:	ff                   	(bad)  
30003023:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
30003027:	00 00                	add    BYTE PTR [eax],al
30003029:	41                   	inc    ecx
3000302a:	0e                   	push   cs
3000302b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003031:	44                   	inc    esp
30003032:	83 03 02             	add    DWORD PTR [ebx],0x2
30003035:	64                   	fs
30003036:	c5 c3 0c             	(bad)  
30003039:	04 04                	add    al,0x4
3000303b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000303e:	00 00                	add    BYTE PTR [eax],al
30003040:	98                   	cwde   
30003041:	05 00 00 88 de       	add    eax,0xde880000
30003046:	ff                   	(bad)  
30003047:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
3000304d:	41                   	inc    ecx
3000304e:	0e                   	push   cs
3000304f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003055:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
3000305b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000305e:	00 00                	add    BYTE PTR [eax],al
30003060:	b8 05 00 00 ef       	mov    eax,0xef000005
30003065:	de ff                	fdivp  st(7),st
30003067:	ff                   	(bad)  
30003068:	39 00                	cmp    DWORD PTR [eax],eax
3000306a:	00 00                	add    BYTE PTR [eax],al
3000306c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000306f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003075:	75 c5                	jne    3000303c <__x86.get_pc_thunk.cx+0x598>
30003077:	0c 04                	or     al,0x4
30003079:	04 00                	add    al,0x0
3000307b:	00 20                	add    BYTE PTR [eax],ah
3000307d:	00 00                	add    BYTE PTR [eax],al
3000307f:	00 d8                	add    al,bl
30003081:	05 00 00 08 df       	add    eax,0xdf080000
30003086:	ff                   	(bad)  
30003087:	ff d4                	call   esp
30003089:	01 00                	add    DWORD PTR [eax],eax
3000308b:	00 00                	add    BYTE PTR [eax],al
3000308d:	41                   	inc    ecx
3000308e:	0e                   	push   cs
3000308f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003095:	44                   	inc    esp
30003096:	83 03 03             	add    DWORD PTR [ebx],0x3
30003099:	cc                   	int3   
3000309a:	01 c5                	add    ebp,eax
3000309c:	c3                   	ret    
3000309d:	0c 04                	or     al,0x4
3000309f:	04 1c                	add    al,0x1c
300030a1:	00 00                	add    BYTE PTR [eax],al
300030a3:	00 fc                	add    ah,bh
300030a5:	05 00 00 b8 e0       	add    eax,0xe0b80000
300030aa:	ff                   	(bad)  
300030ab:	ff 20                	jmp    DWORD PTR [eax]
300030ad:	00 00                	add    BYTE PTR [eax],al
300030af:	00 00                	add    BYTE PTR [eax],al
300030b1:	41                   	inc    ecx
300030b2:	0e                   	push   cs
300030b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030b9:	5c                   	pop    esp
300030ba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030bd:	04 00                	add    al,0x0
300030bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300030c2:	00 00                	add    BYTE PTR [eax],al
300030c4:	1c 06                	sbb    al,0x6
300030c6:	00 00                	add    BYTE PTR [eax],al
300030c8:	b8 e0 ff ff 1b       	mov    eax,0x1bffffe0
300030cd:	00 00                	add    BYTE PTR [eax],al
300030cf:	00 00                	add    BYTE PTR [eax],al
300030d1:	41                   	inc    ecx
300030d2:	0e                   	push   cs
300030d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030d9:	57                   	push   edi
300030da:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030dd:	04 00                	add    al,0x0
300030df:	00 20                	add    BYTE PTR [eax],ah
300030e1:	00 00                	add    BYTE PTR [eax],al
300030e3:	00 3c 06             	add    BYTE PTR [esi+eax*1],bh
300030e6:	00 00                	add    BYTE PTR [eax],al
300030e8:	b3 e0                	mov    bl,0xe0
300030ea:	ff                   	(bad)  
300030eb:	ff 32                	push   DWORD PTR [edx]
300030ed:	00 00                	add    BYTE PTR [eax],al
300030ef:	00 00                	add    BYTE PTR [eax],al
300030f1:	41                   	inc    ecx
300030f2:	0e                   	push   cs
300030f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030f9:	44                   	inc    esp
300030fa:	83 03 6a             	add    DWORD PTR [ebx],0x6a
300030fd:	c5 c3 0c             	(bad)  
30003100:	04 04                	add    al,0x4
30003102:	00 00                	add    BYTE PTR [eax],al
30003104:	1c 00                	sbb    al,0x0
30003106:	00 00                	add    BYTE PTR [eax],al
30003108:	60                   	pusha  
30003109:	06                   	push   es
3000310a:	00 00                	add    BYTE PTR [eax],al
3000310c:	c4                   	(bad)  
3000310d:	e0 ff                	loopne 3000310e <__x86.get_pc_thunk.cx+0x66a>
3000310f:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
30003115:	41                   	inc    ecx
30003116:	0e                   	push   cs
30003117:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000311d:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
30003123:	04 1c                	add    al,0x1c
30003125:	00 00                	add    BYTE PTR [eax],al
30003127:	00 80 06 00 00 40    	add    BYTE PTR [eax+0x40000006],al
3000312d:	e2 ff                	loop   3000312e <__x86.get_pc_thunk.cx+0x68a>
3000312f:	ff c7                	inc    edi
30003131:	00 00                	add    BYTE PTR [eax],al
30003133:	00 00                	add    BYTE PTR [eax],al
30003135:	41                   	inc    ecx
30003136:	0e                   	push   cs
30003137:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000313d:	02 c3                	add    al,bl
3000313f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003142:	04 00                	add    al,0x0
30003144:	1c 00                	sbb    al,0x0
30003146:	00 00                	add    BYTE PTR [eax],al
30003148:	a0 06 00 00 e7       	mov    al,ds:0xe7000006
3000314d:	e2 ff                	loop   3000314e <__x86.get_pc_thunk.cx+0x6aa>
3000314f:	ff 20                	jmp    DWORD PTR [eax]
30003151:	00 00                	add    BYTE PTR [eax],al
30003153:	00 00                	add    BYTE PTR [eax],al
30003155:	41                   	inc    ecx
30003156:	0e                   	push   cs
30003157:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000315d:	5c                   	pop    esp
3000315e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003161:	04 00                	add    al,0x0
30003163:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003166:	00 00                	add    BYTE PTR [eax],al
30003168:	c0 06 00             	rol    BYTE PTR [esi],0x0
3000316b:	00 e8                	add    al,ch
3000316d:	e2 ff                	loop   3000316e <__x86.get_pc_thunk.cx+0x6ca>
3000316f:	ff 14 00             	call   DWORD PTR [eax+eax*1]
30003172:	00 00                	add    BYTE PTR [eax],al
30003174:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003177:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000317d:	50                   	push   eax
3000317e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003181:	04 00                	add    al,0x0
30003183:	00 20                	add    BYTE PTR [eax],ah
30003185:	00 00                	add    BYTE PTR [eax],al
30003187:	00 e0                	add    al,ah
30003189:	06                   	push   es
3000318a:	00 00                	add    BYTE PTR [eax],al
3000318c:	dc e2                	fsubr  st(2),st
3000318e:	ff                   	(bad)  
3000318f:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
30003196:	0e                   	push   cs
30003197:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000319d:	44                   	inc    esp
3000319e:	83 03 02             	add    DWORD PTR [ebx],0x2
300031a1:	7c c5                	jl     30003168 <__x86.get_pc_thunk.cx+0x6c4>
300031a3:	c3                   	ret    
300031a4:	0c 04                	or     al,0x4
300031a6:	04 00                	add    al,0x0
300031a8:	20 00                	and    BYTE PTR [eax],al
300031aa:	00 00                	add    BYTE PTR [eax],al
300031ac:	04 07                	add    al,0x7
300031ae:	00 00                	add    BYTE PTR [eax],al
300031b0:	3c e3                	cmp    al,0xe3
300031b2:	ff                   	(bad)  
300031b3:	ff                   	(bad)  
300031b4:	3e 00 00             	add    BYTE PTR ds:[eax],al
300031b7:	00 00                	add    BYTE PTR [eax],al
300031b9:	41                   	inc    ecx
300031ba:	0e                   	push   cs
300031bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031c1:	44                   	inc    esp
300031c2:	83 03 76             	add    DWORD PTR [ebx],0x76
300031c5:	c5 c3 0c             	(bad)  
300031c8:	04 04                	add    al,0x4
300031ca:	00 00                	add    BYTE PTR [eax],al
300031cc:	20 00                	and    BYTE PTR [eax],al
300031ce:	00 00                	add    BYTE PTR [eax],al
300031d0:	28 07                	sub    BYTE PTR [edi],al
300031d2:	00 00                	add    BYTE PTR [eax],al
300031d4:	56                   	push   esi
300031d5:	e3 ff                	jecxz  300031d6 <__x86.get_pc_thunk.cx+0x732>
300031d7:	ff                   	(bad)  
300031d8:	3e 00 00             	add    BYTE PTR ds:[eax],al
300031db:	00 00                	add    BYTE PTR [eax],al
300031dd:	41                   	inc    ecx
300031de:	0e                   	push   cs
300031df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031e5:	44                   	inc    esp
300031e6:	83 03 76             	add    DWORD PTR [ebx],0x76
300031e9:	c5 c3 0c             	(bad)  
300031ec:	04 04                	add    al,0x4
300031ee:	00 00                	add    BYTE PTR [eax],al
300031f0:	1c 00                	sbb    al,0x0
300031f2:	00 00                	add    BYTE PTR [eax],al
300031f4:	4c                   	dec    esp
300031f5:	07                   	pop    es
300031f6:	00 00                	add    BYTE PTR [eax],al
300031f8:	70 e3                	jo     300031dd <__x86.get_pc_thunk.cx+0x739>
300031fa:	ff                   	(bad)  
300031fb:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
300031fe:	00 00                	add    BYTE PTR [eax],al
30003200:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003203:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003209:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
3000320c:	0c 04                	or     al,0x4
3000320e:	04 00                	add    al,0x0
30003210:	24 00                	and    al,0x0
30003212:	00 00                	add    BYTE PTR [eax],al
30003214:	6c                   	ins    BYTE PTR es:[edi],dx
30003215:	07                   	pop    es
30003216:	00 00                	add    BYTE PTR [eax],al
30003218:	c0 e3 ff             	shl    bl,0xff
3000321b:	ff 5e 00             	call   FWORD PTR [esi+0x0]
3000321e:	00 00                	add    BYTE PTR [eax],al
30003220:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003223:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003229:	45                   	inc    ebp
3000322a:	86 03                	xchg   BYTE PTR [ebx],al
3000322c:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
30003230:	c3                   	ret    
30003231:	41                   	inc    ecx
30003232:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003236:	04 04                	add    al,0x4
30003238:	1c 00                	sbb    al,0x0
3000323a:	00 00                	add    BYTE PTR [eax],al
3000323c:	94                   	xchg   esp,eax
3000323d:	07                   	pop    es
3000323e:	00 00                	add    BYTE PTR [eax],al
30003240:	f8                   	clc    
30003241:	e3 ff                	jecxz  30003242 <__x86.get_pc_thunk.cx+0x79e>
30003243:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30003246:	00 00                	add    BYTE PTR [eax],al
30003248:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000324b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003251:	7c c5                	jl     30003218 <__x86.get_pc_thunk.cx+0x774>
30003253:	0c 04                	or     al,0x4
30003255:	04 00                	add    al,0x0
30003257:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000325a:	00 00                	add    BYTE PTR [eax],al
3000325c:	b4 07                	mov    ah,0x7
3000325e:	00 00                	add    BYTE PTR [eax],al
30003260:	18 e4                	sbb    ah,ah
30003262:	ff                   	(bad)  
30003263:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30003266:	00 00                	add    BYTE PTR [eax],al
30003268:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000326b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003271:	7c c5                	jl     30003238 <__x86.get_pc_thunk.cx+0x794>
30003273:	0c 04                	or     al,0x4
30003275:	04 00                	add    al,0x0
30003277:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000327a:	00 00                	add    BYTE PTR [eax],al
3000327c:	d4 07                	aam    0x7
3000327e:	00 00                	add    BYTE PTR [eax],al
30003280:	38 e4                	cmp    ah,ah
30003282:	ff                   	(bad)  
30003283:	ff 47 00             	inc    DWORD PTR [edi+0x0]
30003286:	00 00                	add    BYTE PTR [eax],al
30003288:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000328b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003291:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
30003294:	0c 04                	or     al,0x4
30003296:	04 00                	add    al,0x0
30003298:	1c 00                	sbb    al,0x0
3000329a:	00 00                	add    BYTE PTR [eax],al
3000329c:	f4                   	hlt    
3000329d:	07                   	pop    es
3000329e:	00 00                	add    BYTE PTR [eax],al
300032a0:	60                   	pusha  
300032a1:	e4 ff                	in     al,0xff
300032a3:	ff 30                	push   DWORD PTR [eax]
300032a5:	00 00                	add    BYTE PTR [eax],al
300032a7:	00 00                	add    BYTE PTR [eax],al
300032a9:	41                   	inc    ecx
300032aa:	0e                   	push   cs
300032ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032b1:	6c                   	ins    BYTE PTR es:[edi],dx
300032b2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300032b5:	04 00                	add    al,0x0
300032b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300032ba:	00 00                	add    BYTE PTR [eax],al
300032bc:	14 08                	adc    al,0x8
300032be:	00 00                	add    BYTE PTR [eax],al
300032c0:	70 e4                	jo     300032a6 <__x86.get_pc_thunk.cx+0x802>
300032c2:	ff                   	(bad)  
300032c3:	ff 59 00             	call   FWORD PTR [ecx+0x0]
300032c6:	00 00                	add    BYTE PTR [eax],al
300032c8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032d1:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
300032d4:	0c 04                	or     al,0x4
300032d6:	04 00                	add    al,0x0
300032d8:	1c 00                	sbb    al,0x0
300032da:	00 00                	add    BYTE PTR [eax],al
300032dc:	34 08                	xor    al,0x8
300032de:	00 00                	add    BYTE PTR [eax],al
300032e0:	ac                   	lods   al,BYTE PTR ds:[esi]
300032e1:	e4 ff                	in     al,0xff
300032e3:	ff 31                	push   DWORD PTR [ecx]
300032e5:	00 00                	add    BYTE PTR [eax],al
300032e7:	00 00                	add    BYTE PTR [eax],al
300032e9:	41                   	inc    ecx
300032ea:	0e                   	push   cs
300032eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032f1:	6d                   	ins    DWORD PTR es:[edi],dx
300032f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300032f5:	04 00                	add    al,0x0
300032f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300032fa:	00 00                	add    BYTE PTR [eax],al
300032fc:	54                   	push   esp
300032fd:	08 00                	or     BYTE PTR [eax],al
300032ff:	00 bd e4 ff ff 31    	add    BYTE PTR [ebp+0x31ffffe4],bh
30003305:	00 00                	add    BYTE PTR [eax],al
30003307:	00 00                	add    BYTE PTR [eax],al
30003309:	41                   	inc    ecx
3000330a:	0e                   	push   cs
3000330b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003311:	6d                   	ins    DWORD PTR es:[edi],dx
30003312:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003315:	04 00                	add    al,0x0
30003317:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000331a:	00 00                	add    BYTE PTR [eax],al
3000331c:	74 08                	je     30003326 <__x86.get_pc_thunk.cx+0x882>
3000331e:	00 00                	add    BYTE PTR [eax],al
30003320:	d0 e4                	shl    ah,1
30003322:	ff                   	(bad)  
30003323:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
30003326:	00 00                	add    BYTE PTR [eax],al
30003328:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000332b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003331:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
30003334:	0c 04                	or     al,0x4
30003336:	04 00                	add    al,0x0
30003338:	1c 00                	sbb    al,0x0
3000333a:	00 00                	add    BYTE PTR [eax],al
3000333c:	94                   	xchg   esp,eax
3000333d:	08 00                	or     BYTE PTR [eax],al
3000333f:	00 17                	add    BYTE PTR [edi],dl
30003341:	e5 ff                	in     eax,0xff
30003343:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
30003346:	00 00                	add    BYTE PTR [eax],al
30003348:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000334b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003351:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
30003354:	0c 04                	or     al,0x4
30003356:	04 00                	add    al,0x0
30003358:	1c 00                	sbb    al,0x0
3000335a:	00 00                	add    BYTE PTR [eax],al
3000335c:	b4 08                	mov    ah,0x8
3000335e:	00 00                	add    BYTE PTR [eax],al
30003360:	60                   	pusha  
30003361:	e5 ff                	in     eax,0xff
30003363:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
30003366:	00 00                	add    BYTE PTR [eax],al
30003368:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000336b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003371:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
30003375:	04 04                	add    al,0x4
30003377:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000337a:	00 00                	add    BYTE PTR [eax],al
3000337c:	d4 08                	aam    0x8
3000337e:	00 00                	add    BYTE PTR [eax],al
30003380:	a0 e5 ff ff 20       	mov    al,ds:0x20ffffe5
30003385:	00 00                	add    BYTE PTR [eax],al
30003387:	00 00                	add    BYTE PTR [eax],al
30003389:	41                   	inc    ecx
3000338a:	0e                   	push   cs
3000338b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003391:	5c                   	pop    esp
30003392:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003395:	04 00                	add    al,0x0
30003397:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
3000339a:	00 00                	add    BYTE PTR [eax],al
3000339c:	f4                   	hlt    
3000339d:	08 00                	or     BYTE PTR [eax],al
3000339f:	00 a0 e5 ff ff 7d    	add    BYTE PTR [eax+0x7dffffe5],ah
300033a5:	01 00                	add    DWORD PTR [eax],eax
300033a7:	00 00                	add    BYTE PTR [eax],al
300033a9:	41                   	inc    ecx
300033aa:	0e                   	push   cs
300033ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033b1:	46                   	inc    esi
300033b2:	87 03                	xchg   DWORD PTR [ebx],eax
300033b4:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
300033b7:	05 03 70 01 c3       	add    eax,0xc3017003
300033bc:	41                   	inc    ecx
300033bd:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
300033c1:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033c4:	04 00                	add    al,0x0
300033c6:	00 00                	add    BYTE PTR [eax],al
300033c8:	1c 00                	sbb    al,0x0
300033ca:	00 00                	add    BYTE PTR [eax],al
300033cc:	24 09                	and    al,0x9
300033ce:	00 00                	add    BYTE PTR [eax],al
300033d0:	f0 e6 ff             	lock out 0xff,al
300033d3:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300033d9:	41                   	inc    ecx
300033da:	0e                   	push   cs
300033db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033e1:	59                   	pop    ecx
300033e2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033e5:	04 00                	add    al,0x0
300033e7:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
300033ea:	00 00                	add    BYTE PTR [eax],al
300033ec:	44                   	inc    esp
300033ed:	09 00                	or     DWORD PTR [eax],eax
300033ef:	00 f0                	add    al,dh
300033f1:	e6 ff                	out    0xff,al
300033f3:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
300033fa:	0e                   	push   cs
300033fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003401:	46                   	inc    esi
30003402:	87 03                	xchg   DWORD PTR [ebx],eax
30003404:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30003407:	05 03 8f 01 c3       	add    eax,0xc3018f03
3000340c:	41                   	inc    ecx
3000340d:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003411:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003414:	04 00                	add    al,0x0
30003416:	00 00                	add    BYTE PTR [eax],al
30003418:	20 00                	and    BYTE PTR [eax],al
3000341a:	00 00                	add    BYTE PTR [eax],al
3000341c:	74 09                	je     30003427 <__x86.get_pc_thunk.cx+0x983>
3000341e:	00 00                	add    BYTE PTR [eax],al
30003420:	5c                   	pop    esp
30003421:	e8 ff ff 96 00       	call   30973425 <ticksToWait+0x96f035>
30003426:	00 00                	add    BYTE PTR [eax],al
30003428:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000342b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003431:	44                   	inc    esp
30003432:	83 03 02             	add    DWORD PTR [ebx],0x2
30003435:	8e c5                	mov    es,ebp
30003437:	c3                   	ret    
30003438:	0c 04                	or     al,0x4
3000343a:	04 00                	add    al,0x0
3000343c:	1c 00                	sbb    al,0x0
3000343e:	00 00                	add    BYTE PTR [eax],al
30003440:	98                   	cwde   
30003441:	09 00                	or     DWORD PTR [eax],eax
30003443:	00 ce                	add    dh,cl
30003445:	e8 ff ff 20 00       	call   30213449 <ticksToWait+0x20f059>
3000344a:	00 00                	add    BYTE PTR [eax],al
3000344c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000344f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003455:	5c                   	pop    esp
30003456:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003459:	04 00                	add    al,0x0
3000345b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000345e:	00 00                	add    BYTE PTR [eax],al
30003460:	b8 09 00 00 d0       	mov    eax,0xd0000009
30003465:	e8 ff ff 6e 00       	call   306f3469 <ticksToWait+0x6ef079>
3000346a:	00 00                	add    BYTE PTR [eax],al
3000346c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000346f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003475:	42                   	inc    edx
30003476:	86 03                	xchg   BYTE PTR [ebx],al
30003478:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
3000347c:	c3                   	ret    
3000347d:	41                   	inc    ecx
3000347e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003482:	04 04                	add    al,0x4
30003484:	1c 00                	sbb    al,0x0
30003486:	00 00                	add    BYTE PTR [eax],al
30003488:	e0 09                	loopne 30003493 <__x86.get_pc_thunk.cx+0x9ef>
3000348a:	00 00                	add    BYTE PTR [eax],al
3000348c:	16                   	push   ss
3000348d:	e9 ff ff 1d 00       	jmp    301e3491 <ticksToWait+0x1df0a1>
30003492:	00 00                	add    BYTE PTR [eax],al
30003494:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003497:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000349d:	59                   	pop    ecx
3000349e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034a1:	04 00                	add    al,0x0
300034a3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300034a6:	00 00                	add    BYTE PTR [eax],al
300034a8:	00 0a                	add    BYTE PTR [edx],cl
300034aa:	00 00                	add    BYTE PTR [eax],al
300034ac:	14 e9                	adc    al,0xe9
300034ae:	ff                   	(bad)  
300034af:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
300034b3:	00 00                	add    BYTE PTR [eax],al
300034b5:	41                   	inc    ecx
300034b6:	0e                   	push   cs
300034b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034bd:	45                   	inc    ebp
300034be:	86 03                	xchg   BYTE PTR [ebx],al
300034c0:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
300034c4:	41                   	inc    ecx
300034c5:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300034c9:	04 04                	add    al,0x4
300034cb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300034ce:	00 00                	add    BYTE PTR [eax],al
300034d0:	28 0a                	sub    BYTE PTR [edx],cl
300034d2:	00 00                	add    BYTE PTR [eax],al
300034d4:	30 e9                	xor    cl,ch
300034d6:	ff                   	(bad)  
300034d7:	ff 19                	call   FWORD PTR [ecx]
300034d9:	03 00                	add    eax,DWORD PTR [eax]
300034db:	00 00                	add    BYTE PTR [eax],al
300034dd:	41                   	inc    ecx
300034de:	0e                   	push   cs
300034df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034e5:	44                   	inc    esp
300034e6:	83 03 03             	add    DWORD PTR [ebx],0x3
300034e9:	10 03                	adc    BYTE PTR [ebx],al
300034eb:	c3                   	ret    
300034ec:	41                   	inc    ecx
300034ed:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034f0:	04 00                	add    al,0x0
300034f2:	00 00                	add    BYTE PTR [eax],al
300034f4:	1c 00                	sbb    al,0x0
300034f6:	00 00                	add    BYTE PTR [eax],al
300034f8:	50                   	push   eax
300034f9:	0a 00                	or     al,BYTE PTR [eax]
300034fb:	00 21                	add    BYTE PTR [ecx],ah
300034fd:	ec                   	in     al,dx
300034fe:	ff                   	(bad)  
300034ff:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003505:	41                   	inc    ecx
30003506:	0e                   	push   cs
30003507:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000350d:	59                   	pop    ecx
3000350e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003511:	04 00                	add    al,0x0
30003513:	00 20                	add    BYTE PTR [eax],ah
30003515:	00 00                	add    BYTE PTR [eax],al
30003517:	00 70 0a             	add    BYTE PTR [eax+0xa],dh
3000351a:	00 00                	add    BYTE PTR [eax],al
3000351c:	1e                   	push   ds
3000351d:	ec                   	in     al,dx
3000351e:	ff                   	(bad)  
3000351f:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
30003522:	00 00                	add    BYTE PTR [eax],al
30003524:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003527:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000352d:	44                   	inc    esp
3000352e:	83 03 79             	add    DWORD PTR [ebx],0x79
30003531:	c5 c3 0c             	(bad)  
30003534:	04 04                	add    al,0x4
30003536:	00 00                	add    BYTE PTR [eax],al
30003538:	1c 00                	sbb    al,0x0
3000353a:	00 00                	add    BYTE PTR [eax],al
3000353c:	94                   	xchg   esp,eax
3000353d:	0a 00                	or     al,BYTE PTR [eax]
3000353f:	00 3b                	add    BYTE PTR [ebx],bh
30003541:	ec                   	in     al,dx
30003542:	ff                   	(bad)  
30003543:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30003549:	41                   	inc    ecx
3000354a:	0e                   	push   cs
3000354b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003551:	71 c5                	jno    30003518 <__x86.get_pc_thunk.cx+0xa74>
30003553:	0c 04                	or     al,0x4
30003555:	04 00                	add    al,0x0
30003557:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000355a:	00 00                	add    BYTE PTR [eax],al
3000355c:	b4 0a                	mov    ah,0xa
3000355e:	00 00                	add    BYTE PTR [eax],al
30003560:	50                   	push   eax
30003561:	ec                   	in     al,dx
30003562:	ff                   	(bad)  
30003563:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003569:	41                   	inc    ecx
3000356a:	0e                   	push   cs
3000356b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003571:	59                   	pop    ecx
30003572:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003575:	04 00                	add    al,0x0
30003577:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
3000357a:	00 00                	add    BYTE PTR [eax],al
3000357c:	d4 0a                	aam    0xa
3000357e:	00 00                	add    BYTE PTR [eax],al
30003580:	4d                   	dec    ebp
30003581:	ec                   	in     al,dx
30003582:	ff                   	(bad)  
30003583:	ff 41 08             	inc    DWORD PTR [ecx+0x8]
30003586:	00 00                	add    BYTE PTR [eax],al
30003588:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000358b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003591:	46                   	inc    esi
30003592:	87 03                	xchg   DWORD PTR [ebx],eax
30003594:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30003597:	05 03 34 08 c3       	add    eax,0xc3083403
3000359c:	41                   	inc    ecx
3000359d:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
300035a1:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035a4:	04 00                	add    al,0x0
300035a6:	00 00                	add    BYTE PTR [eax],al
300035a8:	24 00                	and    al,0x0
300035aa:	00 00                	add    BYTE PTR [eax],al
300035ac:	04 0b                	add    al,0xb
300035ae:	00 00                	add    BYTE PTR [eax],al
300035b0:	5e                   	pop    esi
300035b1:	f4                   	hlt    
300035b2:	ff                   	(bad)  
300035b3:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
300035b6:	00 00                	add    BYTE PTR [eax],al
300035b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300035bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035c1:	45                   	inc    ebp
300035c2:	86 03                	xchg   BYTE PTR [ebx],al
300035c4:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
300035c8:	c3                   	ret    
300035c9:	41                   	inc    ecx
300035ca:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300035ce:	04 04                	add    al,0x4
300035d0:	10 00                	adc    BYTE PTR [eax],al
300035d2:	00 00                	add    BYTE PTR [eax],al
300035d4:	2c 0b                	sub    al,0xb
300035d6:	00 00                	add    BYTE PTR [eax],al
300035d8:	cc                   	int3   
300035d9:	f4                   	hlt    
300035da:	ff                   	(bad)  
300035db:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
300035de:	00 00                	add    BYTE PTR [eax],al
300035e0:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

300035e4 <.dynsym>:
	...
300035f4:	e2 00                	loop   300035f6 <__x86.get_pc_thunk.cx+0xb52>
300035f6:	00 00                	add    BYTE PTR [eax],al
300035f8:	38 16                	cmp    BYTE PTR [esi],dl
300035fa:	00 30                	add    BYTE PTR [eax],dh
300035fc:	40                   	inc    eax
300035fd:	00 00                	add    BYTE PTR [eax],al
300035ff:	00 12                	add    BYTE PTR [edx],dl
30003601:	00 01                	add    BYTE PTR [ecx],al
30003603:	00 9d 00 00 00 23    	add    BYTE PTR [ebp+0x23000000],bl
30003609:	0e                   	push   cs
3000360a:	00 30                	add    BYTE PTR [eax],dh
3000360c:	1c 00                	sbb    al,0x0
3000360e:	00 00                	add    BYTE PTR [eax],al
30003610:	12 00                	adc    al,BYTE PTR [eax]
30003612:	01 00                	add    DWORD PTR [eax],eax
30003614:	74 00                	je     30003616 <__x86.get_pc_thunk.cx+0xb72>
30003616:	00 00                	add    BYTE PTR [eax],al
30003618:	7a 0a                	jp     30003624 <__x86.get_pc_thunk.cx+0xb80>
3000361a:	00 30                	add    BYTE PTR [eax],dh
3000361c:	34 00                	xor    al,0x0
3000361e:	00 00                	add    BYTE PTR [eax],al
30003620:	12 00                	adc    al,BYTE PTR [eax]
30003622:	01 00                	add    DWORD PTR [eax],eax
30003624:	f1                   	icebp  
30003625:	00 00                	add    BYTE PTR [eax],al
30003627:	00 30                	add    BYTE PTR [eax],dh
30003629:	17                   	pop    ss
3000362a:	00 30                	add    BYTE PTR [eax],dh
3000362c:	59                   	pop    ecx
3000362d:	00 00                	add    BYTE PTR [eax],al
3000362f:	00 12                	add    BYTE PTR [edx],dl
30003631:	00 01                	add    BYTE PTR [ecx],al
30003633:	00 cb                	add    bl,cl
30003635:	00 00                	add    BYTE PTR [eax],al
30003637:	00 68 14             	add    BYTE PTR [eax+0x14],ch
3000363a:	00 30                	add    BYTE PTR [eax],dh
3000363c:	84 00                	test   BYTE PTR [eax],al
3000363e:	00 00                	add    BYTE PTR [eax],al
30003640:	12 00                	adc    al,BYTE PTR [eax]
30003642:	01 00                	add    DWORD PTR [eax],eax
30003644:	21 00                	and    DWORD PTR [eax],eax
30003646:	00 00                	add    BYTE PTR [eax],al
30003648:	00 04 00             	add    BYTE PTR [eax+eax*1],al
3000364b:	30 aa 00 00 00 12    	xor    BYTE PTR [edx+0x12000000],ch
30003651:	00 01                	add    BYTE PTR [ecx],al
30003653:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
30003656:	00 00                	add    BYTE PTR [eax],al
30003658:	c4 07                	les    eax,FWORD PTR [edi]
3000365a:	00 30                	add    BYTE PTR [eax],dh
3000365c:	ba 00 00 00 12       	mov    edx,0x12000000
30003661:	00 01                	add    BYTE PTR [ecx],al
30003663:	00 60 00             	add    BYTE PTR [eax+0x0],ah
30003666:	00 00                	add    BYTE PTR [eax],al
30003668:	95                   	xchg   ebp,eax
30003669:	07                   	pop    es
3000366a:	00 30                	add    BYTE PTR [eax],dh
3000366c:	2f                   	das    
3000366d:	00 00                	add    BYTE PTR [eax],al
3000366f:	00 12                	add    BYTE PTR [edx],dl
30003671:	00 01                	add    BYTE PTR [ecx],al
30003673:	00 b8 00 00 00 d0    	add    BYTE PTR [eax-0x30000000],bh
30003679:	11 00                	adc    DWORD PTR [eax],eax
3000367b:	30 9b 01 00 00 12    	xor    BYTE PTR [ebx+0x12000001],bl
30003681:	00 01                	add    BYTE PTR [ecx],al
30003683:	00 46 00             	add    BYTE PTR [esi+0x0],al
30003686:	00 00                	add    BYTE PTR [eax],al
30003688:	2c 07                	sub    al,0x7
3000368a:	00 30                	add    BYTE PTR [eax],dh
3000368c:	26 00 00             	add    BYTE PTR es:[eax],al
3000368f:	00 12                	add    BYTE PTR [edx],dl
30003691:	00 01                	add    BYTE PTR [ecx],al
30003693:	00 ac 00 00 00 60 11 	add    BYTE PTR [eax+eax*1+0x11600000],ch
3000369a:	00 30                	add    BYTE PTR [eax],dh
3000369c:	20 00                	and    BYTE PTR [eax],al
3000369e:	00 00                	add    BYTE PTR [eax],al
300036a0:	12 00                	adc    al,BYTE PTR [eax]
300036a2:	01 00                	add    DWORD PTR [eax],eax
300036a4:	7a 00                	jp     300036a6 <__x86.get_pc_thunk.cx+0xc02>
300036a6:	00 00                	add    BYTE PTR [eax],al
300036a8:	19 0b                	sbb    DWORD PTR [ebx],ecx
300036aa:	00 30                	add    BYTE PTR [eax],dh
300036ac:	72 00                	jb     300036ae <__x86.get_pc_thunk.cx+0xc0a>
300036ae:	00 00                	add    BYTE PTR [eax],al
300036b0:	12 00                	adc    al,BYTE PTR [eax]
300036b2:	01 00                	add    DWORD PTR [eax],eax
300036b4:	11 01                	adc    DWORD PTR [ecx],eax
300036b6:	00 00                	add    BYTE PTR [eax],al
300036b8:	40                   	inc    eax
300036b9:	19 00                	sbb    DWORD PTR [eax],eax
300036bb:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
300036be:	00 00                	add    BYTE PTR [eax],al
300036c0:	12 00                	adc    al,BYTE PTR [eax]
300036c2:	01 00                	add    DWORD PTR [eax],eax
300036c4:	17                   	pop    ss
300036c5:	00 00                	add    BYTE PTR [eax],al
300036c7:	00 2b                	add    BYTE PTR [ebx],ch
300036c9:	02 00                	add    al,BYTE PTR [eax]
300036cb:	30 bb 00 00 00 12    	xor    BYTE PTR [ebx+0x12000000],bh
300036d1:	00 01                	add    BYTE PTR [ecx],al
300036d3:	00 c6                	add    dh,al
300036d5:	00 00                	add    BYTE PTR [eax],al
300036d7:	00 54 14 00          	add    BYTE PTR [esp+edx*1+0x0],dl
300036db:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
300036de:	00 00                	add    BYTE PTR [eax],al
300036e0:	12 00                	adc    al,BYTE PTR [eax]
300036e2:	01 00                	add    DWORD PTR [eax],eax
300036e4:	40                   	inc    eax
300036e5:	01 00                	add    DWORD PTR [eax],eax
300036e7:	00 1d 21 00 30 1d    	add    BYTE PTR ds:0x1d300021,bl
300036ed:	00 00                	add    BYTE PTR [eax],al
300036ef:	00 12                	add    BYTE PTR [edx],dl
300036f1:	00 01                	add    BYTE PTR [ecx],al
300036f3:	00 21                	add    BYTE PTR [ecx],ah
300036f5:	01 00                	add    DWORD PTR [eax],eax
300036f7:	00 e0                	add    al,ah
300036f9:	1a 00                	sbb    al,BYTE PTR [eax]
300036fb:	30 9c 01 00 00 12 00 	xor    BYTE PTR [ecx+eax*1+0x120000],bl
30003702:	01 00                	add    DWORD PTR [eax],eax
30003704:	6a 00                	push   0x0
30003706:	00 00                	add    BYTE PTR [eax],al
30003708:	b6 09                	mov    dh,0x9
3000370a:	00 30                	add    BYTE PTR [eax],dh
3000370c:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
3000370d:	00 00                	add    BYTE PTR [eax],al
3000370f:	00 12                	add    BYTE PTR [edx],dl
30003711:	00 01                	add    BYTE PTR [ecx],al
30003713:	00 d4                	add    ah,dl
30003715:	00 00                	add    BYTE PTR [eax],al
30003717:	00 ec                	add    ah,ch
30003719:	14 00                	adc    al,0x0
3000371b:	30 3e                	xor    BYTE PTR [esi],bh
3000371d:	00 00                	add    BYTE PTR [eax],al
3000371f:	00 12                	add    BYTE PTR [edx],dl
30003721:	00 01                	add    BYTE PTR [ecx],al
30003723:	00 37                	add    BYTE PTR [edi],dh
30003725:	01 00                	add    DWORD PTR [eax],eax
30003727:	00 c0                	add    al,al
30003729:	1d 00 30 44 00       	sbb    eax,0x443000
3000372e:	00 00                	add    BYTE PTR [eax],al
30003730:	12 00                	adc    al,BYTE PTR [eax]
30003732:	01 00                	add    DWORD PTR [eax],eax
30003734:	92                   	xchg   edx,eax
30003735:	00 00                	add    BYTE PTR [eax],al
30003737:	00 ea                	add    dl,ch
30003739:	0b 00                	or     eax,DWORD PTR [eax]
3000373b:	30 ed                	xor    ch,ch
3000373d:	01 00                	add    DWORD PTR [eax],eax
3000373f:	00 12                	add    BYTE PTR [edx],dl
30003741:	00 01                	add    BYTE PTR [ecx],al
30003743:	00 3f                	add    BYTE PTR [edi],bh
30003745:	00 00                	add    BYTE PTR [eax],al
30003747:	00 f8                	add    al,bh
30003749:	06                   	push   es
3000374a:	00 30                	add    BYTE PTR [eax],dh
3000374c:	31 00                	xor    DWORD PTR [eax],eax
3000374e:	00 00                	add    BYTE PTR [eax],al
30003750:	12 00                	adc    al,BYTE PTR [eax]
30003752:	01 00                	add    DWORD PTR [eax],eax
30003754:	5f                   	pop    edi
30003755:	01 00                	add    DWORD PTR [eax],eax
30003757:	00 cd                	add    ch,cl
30003759:	21 00                	and    DWORD PTR [eax],eax
3000375b:	30 41 08             	xor    BYTE PTR [ecx+0x8],al
3000375e:	00 00                	add    BYTE PTR [eax],al
30003760:	12 00                	adc    al,BYTE PTR [eax]
30003762:	01 00                	add    DWORD PTR [eax],eax
30003764:	30 01                	xor    BYTE PTR [ecx],al
30003766:	00 00                	add    BYTE PTR [eax],al
30003768:	a2 1d 00 30 1d       	mov    ds:0x1d30001d,al
3000376d:	00 00                	add    BYTE PTR [eax],al
3000376f:	00 12                	add    BYTE PTR [edx],dl
30003771:	00 01                	add    BYTE PTR [ecx],al
30003773:	00 3a                	add    BYTE PTR [edx],bh
30003775:	00 00                	add    BYTE PTR [eax],al
30003777:	00 c3                	add    bl,al
30003779:	06                   	push   es
3000377a:	00 30                	add    BYTE PTR [eax],dh
3000377c:	35 00 00 00 12       	xor    eax,0x12000000
30003781:	00 01                	add    BYTE PTR [ecx],al
30003783:	00 01                	add    BYTE PTR [ecx],al
30003785:	01 00                	add    DWORD PTR [eax],eax
30003787:	00 f0                	add    al,dh
30003789:	17                   	pop    ss
3000378a:	00 30                	add    BYTE PTR [eax],dh
3000378c:	67 00 00             	add    BYTE PTR [bx+si],al
3000378f:	00 12                	add    BYTE PTR [edx],dl
30003791:	00 01                	add    BYTE PTR [ecx],al
30003793:	00 09                	add    BYTE PTR [ecx],cl
30003795:	01 00                	add    DWORD PTR [eax],eax
30003797:	00 20                	add    BYTE PTR [eax],ah
30003799:	19 00                	sbb    DWORD PTR [eax],eax
3000379b:	30 20                	xor    BYTE PTR [eax],ah
3000379d:	00 00                	add    BYTE PTR [eax],al
3000379f:	00 12                	add    BYTE PTR [edx],dl
300037a1:	00 01                	add    BYTE PTR [ecx],al
300037a3:	00 28                	add    BYTE PTR [eax],ch
300037a5:	00 00                	add    BYTE PTR [eax],al
300037a7:	00 aa 04 00 30 c1    	add    BYTE PTR [edx-0x3ecffffc],ch
300037ad:	01 00                	add    DWORD PTR [eax],eax
300037af:	00 12                	add    BYTE PTR [edx],dl
300037b1:	00 01                	add    BYTE PTR [ecx],al
300037b3:	00 10                	add    BYTE PTR [eax],dl
300037b5:	00 00                	add    BYTE PTR [eax],al
300037b7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
300037ba:	00 30                	add    BYTE PTR [eax],dh
300037bc:	97                   	xchg   edi,eax
300037bd:	00 00                	add    BYTE PTR [eax],al
300037bf:	00 12                	add    BYTE PTR [edx],dl
300037c1:	00 01                	add    BYTE PTR [ecx],al
300037c3:	00 8d 00 00 00 d1    	add    BYTE PTR [ebp-0x2f000000],cl
300037c9:	0b 00                	or     eax,DWORD PTR [eax]
300037cb:	30 19                	xor    BYTE PTR [ecx],bl
300037cd:	00 00                	add    BYTE PTR [eax],al
300037cf:	00 12                	add    BYTE PTR [edx],dl
300037d1:	00 01                	add    BYTE PTR [ecx],al
300037d3:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
300037d6:	00 00                	add    BYTE PTR [eax],al
300037d8:	00 00                	add    BYTE PTR [eax],al
300037da:	13 00                	adc    eax,DWORD PTR [eax]
300037dc:	00 00                	add    BYTE PTR [eax],al
300037de:	00 00                	add    BYTE PTR [eax],al
300037e0:	10 00                	adc    BYTE PTR [eax],al
300037e2:	01 00                	add    DWORD PTR [eax],eax
300037e4:	49                   	dec    ecx
300037e5:	01 00                	add    DWORD PTR [eax],eax
300037e7:	00 3a                	add    BYTE PTR [edx],bh
300037e9:	21 00                	and    DWORD PTR [eax],eax
300037eb:	30 41 00             	xor    BYTE PTR [ecx+0x0],al
300037ee:	00 00                	add    BYTE PTR [eax],al
300037f0:	12 00                	adc    al,BYTE PTR [eax]
300037f2:	01 00                	add    DWORD PTR [eax],eax
300037f4:	bf 00 00 00 33       	mov    edi,0x33000000
300037f9:	14 00                	adc    al,0x0
300037fb:	30 20                	xor    BYTE PTR [eax],ah
300037fd:	00 00                	add    BYTE PTR [eax],al
300037ff:	00 12                	add    BYTE PTR [edx],dl
30003801:	00 01                	add    BYTE PTR [ecx],al
30003803:	00 28                	add    BYTE PTR [eax],ch
30003805:	01 00                	add    DWORD PTR [eax],eax
30003807:	00 12                	add    BYTE PTR [edx],dl
30003809:	1d 00 30 20 00       	sbb    eax,0x203000
3000380e:	00 00                	add    BYTE PTR [eax],al
30003810:	12 00                	adc    al,BYTE PTR [eax]
30003812:	01 00                	add    DWORD PTR [eax],eax
30003814:	5b                   	pop    ebx
30003815:	00 00                	add    BYTE PTR [eax],al
30003817:	00 52 07             	add    BYTE PTR [edx+0x7],dl
3000381a:	00 30                	add    BYTE PTR [eax],dh
3000381c:	43                   	inc    ebx
3000381d:	00 00                	add    BYTE PTR [eax],al
3000381f:	00 12                	add    BYTE PTR [edx],dl
30003821:	00 01                	add    BYTE PTR [ecx],al
30003823:	00 db                	add    bl,bl
30003825:	00 00                	add    BYTE PTR [eax],al
30003827:	00 d8                	add    al,bl
30003829:	15 00 30 5e 00       	adc    eax,0x5e3000
3000382e:	00 00                	add    BYTE PTR [eax],al
30003830:	12 00                	adc    al,BYTE PTR [eax]
30003832:	01 00                	add    DWORD PTR [eax],eax
30003834:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
30003835:	00 00                	add    BYTE PTR [eax],al
30003837:	00 3f                	add    BYTE PTR [edi],bh
30003839:	0e                   	push   cs
3000383a:	00 30                	add    BYTE PTR [eax],dh
3000383c:	20 00                	and    BYTE PTR [eax],al
3000383e:	00 00                	add    BYTE PTR [eax],al
30003840:	12 00                	adc    al,BYTE PTR [eax]
30003842:	01 00                	add    DWORD PTR [eax],eax
30003844:	08 00                	or     BYTE PTR [eax],al
30003846:	00 00                	add    BYTE PTR [eax],al
30003848:	70 00                	jo     3000384a <__x86.get_pc_thunk.cx+0xda6>
3000384a:	00 30                	add    BYTE PTR [eax],dh
3000384c:	55                   	push   ebp
3000384d:	00 00                	add    BYTE PTR [eax],al
3000384f:	00 12                	add    BYTE PTR [edx],dl
30003851:	00 01                	add    BYTE PTR [ecx],al
30003853:	00 e9                	add    cl,ch
30003855:	00 00                	add    BYTE PTR [eax],al
30003857:	00 b8 16 00 30 47    	add    BYTE PTR [eax+0x47300016],bh
3000385d:	00 00                	add    BYTE PTR [eax],al
3000385f:	00 12                	add    BYTE PTR [edx],dl
30003861:	00 01                	add    BYTE PTR [ecx],al
30003863:	00 80 00 00 00 a8    	add    BYTE PTR [eax-0x58000000],al
30003869:	0b 00                	or     eax,DWORD PTR [eax]
3000386b:	30 29                	xor    BYTE PTR [ecx],ch
3000386d:	00 00                	add    BYTE PTR [eax],al
3000386f:	00 12                	add    BYTE PTR [edx],dl
30003871:	00 01                	add    BYTE PTR [ecx],al
30003873:	00 53 01             	add    BYTE PTR [ebx+0x1],dl
30003876:	00 00                	add    BYTE PTR [eax],al
30003878:	b0 21                	mov    al,0x21
3000387a:	00 30                	add    BYTE PTR [eax],dh
3000387c:	1d 00 00 00 12       	sbb    eax,0x12000000
30003881:	00 01                	add    BYTE PTR [ecx],al
30003883:	00 66 01             	add    BYTE PTR [esi+0x1],ah
30003886:	00 00                	add    BYTE PTR [eax],al
30003888:	0e                   	push   cs
30003889:	2a 00                	sub    al,BYTE PTR [eax]
3000388b:	30 6d 00             	xor    BYTE PTR [ebp+0x0],ch
3000388e:	00 00                	add    BYTE PTR [eax],al
30003890:	12 00                	adc    al,BYTE PTR [eax]
30003892:	01 00                	add    DWORD PTR [eax],eax
30003894:	1c 00                	sbb    al,0x0
30003896:	00 00                	add    BYTE PTR [eax],al
30003898:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
3000389d:	00 00                	add    BYTE PTR [eax],al
3000389f:	00 12                	add    BYTE PTR [edx],dl
300038a1:	00 01                	add    BYTE PTR [ecx],al
300038a3:	00 fa                	add    dl,bh
300038a5:	00 00                	add    BYTE PTR [eax],al
300038a7:	00 8c 17 00 30 31 00 	add    BYTE PTR [edi+edx*1+0x313000],cl
300038ae:	00 00                	add    BYTE PTR [eax],al
300038b0:	12 00                	adc    al,BYTE PTR [eax]
300038b2:	01 00                	add    DWORD PTR [eax],eax
300038b4:	2f                   	das    
300038b5:	00 00                	add    BYTE PTR [eax],al
300038b7:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
300038bb:	30 2d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,ch
300038c1:	00 01                	add    BYTE PTR [ecx],al
300038c3:	00 97 00 00 00 d7    	add    BYTE PTR [edi-0x29000000],dl
300038c9:	0d 00 30 4c 00       	or     eax,0x4c3000
300038ce:	00 00                	add    BYTE PTR [eax],al
300038d0:	12 00                	adc    al,BYTE PTR [eax]
300038d2:	01 00                	add    DWORD PTR [eax],eax
300038d4:	01 00                	add    DWORD PTR [eax],eax
300038d6:	00 00                	add    BYTE PTR [eax],al
300038d8:	00 00                	add    BYTE PTR [eax],al
300038da:	00 30                	add    BYTE PTR [eax],dh
300038dc:	38 00                	cmp    BYTE PTR [eax],al
300038de:	00 00                	add    BYTE PTR [eax],al
300038e0:	12 00                	adc    al,BYTE PTR [eax]
300038e2:	01 00                	add    DWORD PTR [eax],eax
300038e4:	19 01                	sbb    DWORD PTR [ecx],eax
300038e6:	00 00                	add    BYTE PTR [eax],al
300038e8:	c0 1a 00             	rcr    BYTE PTR [edx],0x0
300038eb:	30 1d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,bl
300038f1:	00 01                	add    BYTE PTR [ecx],al
300038f3:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
300038f6:	00 00                	add    BYTE PTR [eax],al
300038f8:	99                   	cdq    
300038f9:	06                   	push   es
300038fa:	00 30                	add    BYTE PTR [eax],dh
300038fc:	2a 00                	sub    al,BYTE PTR [eax]
300038fe:	00 00                	add    BYTE PTR [eax],al
30003900:	12 00                	adc    al,BYTE PTR [eax]
30003902:	01 00                	add    DWORD PTR [eax],eax
30003904:	b3 00                	mov    bl,0x0
30003906:	00 00                	add    BYTE PTR [eax],al
30003908:	80 11 00             	adc    BYTE PTR [ecx],0x0
3000390b:	30 1b                	xor    BYTE PTR [ebx],bl
3000390d:	00 00                	add    BYTE PTR [eax],al
3000390f:	00 12                	add    BYTE PTR [edx],dl
30003911:	00 01                	add    BYTE PTR [ecx],al
	...

Disassembly of section .dynstr:

30003914 <.dynstr>:
30003914:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003917:	72 63                	jb     3000397c <__x86.get_pc_thunk.cx+0xed8>
30003919:	68 72 00 73 74       	push   0x74730072
3000391e:	72 63                	jb     30003983 <__x86.get_pc_thunk.cx+0xedf>
30003920:	73 70                	jae    30003992 <__x86.get_pc_thunk.cx+0xeee>
30003922:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003923:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003926:	72 74                	jb     3000399c <__x86.get_pc_thunk.cx+0xef8>
30003928:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003929:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
3000392c:	74 6f                	je     3000399d <__x86.get_pc_thunk.cx+0xef9>
3000392e:	61                   	popa   
3000392f:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
30003932:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003933:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
30003939:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000393a:	76 00                	jbe    3000393c <__x86.get_pc_thunk.cx+0xe98>
3000393c:	73 65                	jae    300039a3 <__x86.get_pc_thunk.cx+0xeff>
3000393e:	74 65                	je     300039a5 <__x86.get_pc_thunk.cx+0xf01>
30003940:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003941:	76 00                	jbe    30003943 <__x86.get_pc_thunk.cx+0xe9f>
30003943:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003944:	70 65                	jo     300039ab <__x86.get_pc_thunk.cx+0xf07>
30003946:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003947:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
3000394a:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000394b:	73 65                	jae    300039b2 <__x86.get_pc_thunk.cx+0xf0e>
3000394d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003950:	61                   	popa   
30003951:	64 00 67 65          	add    BYTE PTR fs:[edi+0x65],ah
30003955:	74 64                	je     300039bb <__x86.get_pc_thunk.cx+0xf17>
30003957:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
3000395e:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
30003961:	73 45                	jae    300039a8 <__x86.get_pc_thunk.cx+0xf04>
30003963:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003964:	74 65                	je     300039cb <__x86.get_pc_thunk.cx+0xf27>
30003966:	72 5f                	jb     300039c7 <__x86.get_pc_thunk.cx+0xf23>
30003968:	56                   	push   esi
30003969:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
3000396e:	00 70 75             	add    BYTE PTR [eax+0x75],dh
30003971:	74 63                	je     300039d6 <__x86.get_pc_thunk.cx+0xf32>
30003973:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003976:	74 63                	je     300039db <__x86.get_pc_thunk.cx+0xf37>
30003978:	00 67 65             	add    BYTE PTR [edi+0x65],ah
3000397b:	74 73                	je     300039f0 <__x86.get_pc_thunk.cx+0xf4c>
3000397d:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003981:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
30003984:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003985:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
3000398c:	74 
3000398d:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
30003990:	65                   	gs
30003991:	65                   	gs
30003992:	70 00                	jo     30003994 <__x86.get_pc_thunk.cx+0xef0>
30003994:	6d                   	ins    DWORD PTR es:[edi],dx
30003995:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003996:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
3000399d:	6e 
3000399e:	61                   	popa   
3000399f:	6c                   	ins    BYTE PTR es:[edi],dx
300039a0:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
300039a3:	72 6b                	jb     30003a10 <__x86.get_pc_thunk.cx+0xf6c>
300039a5:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
300039a8:	65 63 00             	arpl   WORD PTR gs:[eax],ax
300039ab:	65                   	gs
300039ac:	78 65                	js     30003a13 <__x86.get_pc_thunk.cx+0xf6f>
300039ae:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
300039b1:	77 61                	ja     30003a14 <__x86.get_pc_thunk.cx+0xf70>
300039b3:	69 74 70 69 64 00 67 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65670064
300039ba:	65 
300039bb:	74 63                	je     30003a20 <__x86.get_pc_thunk.cx+0xf7c>
300039bd:	77 64                	ja     30003a23 <__x86.get_pc_thunk.cx+0xf7f>
300039bf:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
300039c2:	6c                   	ins    BYTE PTR es:[edi],dx
300039c3:	6c                   	ins    BYTE PTR es:[edi],dx
300039c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
300039c5:	63 00                	arpl   WORD PTR [eax],ax
300039c7:	66                   	data16
300039c8:	72 65                	jb     30003a2f <__x86.get_pc_thunk.cx+0xf8b>
300039ca:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
300039ce:	6d                   	ins    DWORD PTR es:[edi],dx
300039cf:	63 70 79             	arpl   WORD PTR [eax+0x79],si
300039d2:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
300039d5:	6d                   	ins    DWORD PTR es:[edi],dx
300039d6:	73 65                	jae    30003a3d <__x86.get_pc_thunk.cx+0xf99>
300039d8:	74 00                	je     300039da <__x86.get_pc_thunk.cx+0xf36>
300039da:	6d                   	ins    DWORD PTR es:[edi],dx
300039db:	6d                   	ins    DWORD PTR es:[edi],dx
300039dc:	61                   	popa   
300039dd:	70 00                	jo     300039df <__x86.get_pc_thunk.cx+0xf3b>
300039df:	72 65                	jb     30003a46 <__x86.get_pc_thunk.cx+0xfa2>
300039e1:	73 65                	jae    30003a48 <__x86.get_pc_thunk.cx+0xfa4>
300039e3:	74 52                	je     30003a37 <__x86.get_pc_thunk.cx+0xf93>
300039e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
300039e6:	77 00                	ja     300039e8 <__x86.get_pc_thunk.cx+0xf44>
300039e8:	73 74                	jae    30003a5e <__x86.get_pc_thunk.cx+0xfba>
300039ea:	72 63                	jb     30003a4f <__x86.get_pc_thunk.cx+0xfab>
300039ec:	61                   	popa   
300039ed:	74 00                	je     300039ef <__x86.get_pc_thunk.cx+0xf4b>
300039ef:	73 74                	jae    30003a65 <__x86.get_pc_thunk.cx+0xfc1>
300039f1:	72 63                	jb     30003a56 <__x86.get_pc_thunk.cx+0xfb2>
300039f3:	6d                   	ins    DWORD PTR es:[edi],dx
300039f4:	70 00                	jo     300039f6 <__x86.get_pc_thunk.cx+0xf52>
300039f6:	73 74                	jae    30003a6c <__x86.get_pc_thunk.cx+0xfc8>
300039f8:	72 63                	jb     30003a5d <__x86.get_pc_thunk.cx+0xfb9>
300039fa:	70 79                	jo     30003a75 <__x86.get_pc_thunk.cx+0xfd1>
300039fc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
300039ff:	72 63                	jb     30003a64 <__x86.get_pc_thunk.cx+0xfc0>
30003a01:	70 79                	jo     30003a7c <__x86.get_pc_thunk.cx+0xfd8>
30003a03:	63 00                	arpl   WORD PTR [eax],ax
30003a05:	73 74                	jae    30003a7b <__x86.get_pc_thunk.cx+0xfd7>
30003a07:	72 69                	jb     30003a72 <__x86.get_pc_thunk.cx+0xfce>
30003a09:	73 6e                	jae    30003a79 <__x86.get_pc_thunk.cx+0xfd5>
30003a0b:	75 6d                	jne    30003a7a <__x86.get_pc_thunk.cx+0xfd6>
30003a0d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a10:	72 6c                	jb     30003a7e <__x86.get_pc_thunk.cx+0xfda>
30003a12:	65 6e                	outs   dx,BYTE PTR gs:[esi]
30003a14:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a17:	72 6e                	jb     30003a87 <__x86.get_pc_thunk.cx+0xfe3>
30003a19:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
30003a1c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a1f:	72 6e                	jb     30003a8f <__x86.get_pc_thunk.cx+0xfeb>
30003a21:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003a24:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a27:	72 74                	jb     30003a9d <__x86.get_pc_thunk.cx+0xff9>
30003a29:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a2a:	75 6c                	jne    30003a98 <__x86.get_pc_thunk.cx+0xff4>
30003a2c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a2f:	72 6c                	jb     30003a9d <__x86.get_pc_thunk.cx+0xff9>
30003a31:	65                   	gs
30003a32:	66                   	data16
30003a33:	74 00                	je     30003a35 <__x86.get_pc_thunk.cx+0xf91>
30003a35:	73 74                	jae    30003aab <__x86.get_pc_thunk.cx+0x1007>
30003a37:	72 74                	jb     30003aad <__x86.get_pc_thunk.cx+0x1009>
30003a39:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a3a:	6c                   	ins    BYTE PTR es:[edi],dx
30003a3b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a3e:	72 74                	jb     30003ab4 <__x86.get_pc_thunk.cx+0x1010>
30003a40:	72 69                	jb     30003aab <__x86.get_pc_thunk.cx+0x1007>
30003a42:	6d                   	ins    DWORD PTR es:[edi],dx
30003a43:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003a46:	72 73                	jb     30003abb <__x86.get_pc_thunk.cx+0x1017>
30003a48:	74 72                	je     30003abc <__x86.get_pc_thunk.cx+0x1018>
30003a4a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003a4d:	74 74                	je     30003ac3 <__x86.get_pc_thunk.cx+0x101f>
30003a4f:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
30003a56:	74 69                	je     30003ac1 <__x86.get_pc_thunk.cx+0x101d>
30003a58:	6d                   	ins    DWORD PTR es:[edi],dx
30003a59:	65                   	gs
30003a5a:	5f                   	pop    edi
30003a5b:	72 00                	jb     30003a5d <__x86.get_pc_thunk.cx+0xfb9>
30003a5d:	6c                   	ins    BYTE PTR es:[edi],dx
30003a5e:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a5f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003a62:	74 69                	je     30003acd <__x86.get_pc_thunk.cx+0x1029>
30003a64:	6d                   	ins    DWORD PTR es:[edi],dx
30003a65:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
30003a6a:	61                   	popa   
30003a6b:	6c                   	ins    BYTE PTR es:[edi],dx
30003a6c:	74 69                	je     30003ad7 <__x86.get_pc_thunk.cx+0x1033>
30003a6e:	6d                   	ins    DWORD PTR es:[edi],dx
30003a6f:	65                   	gs
30003a70:	5f                   	pop    edi
30003a71:	72 00                	jb     30003a73 <__x86.get_pc_thunk.cx+0xfcf>
30003a73:	6d                   	ins    DWORD PTR es:[edi],dx
30003a74:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
30003a79:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003a7c:	74 74                	je     30003af2 <__x86.get_pc_thunk.cx+0x104e>
30003a7e:	69                   	.byte 0x69
30003a7f:	6d                   	ins    DWORD PTR es:[edi],dx
30003a80:	65                   	gs
	...

Disassembly of section .hash:

30003a84 <.hash>:
30003a84:	25 00 00 00 33       	and    eax,0x33000000
30003a89:	00 00                	add    BYTE PTR [eax],al
30003a8b:	00 1a                	add    BYTE PTR [edx],bl
30003a8d:	00 00                	add    BYTE PTR [eax],al
30003a8f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003a92:	00 00                	add    BYTE PTR [eax],al
30003a94:	23 00                	and    eax,DWORD PTR [eax]
30003a96:	00 00                	add    BYTE PTR [eax],al
30003a98:	25 00 00 00 20       	and    eax,0x20000000
30003a9d:	00 00                	add    BYTE PTR [eax],al
30003a9f:	00 2e                	add    BYTE PTR [esi],ch
	...
30003aa9:	00 00                	add    BYTE PTR [eax],al
30003aab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
	...
30003ab6:	00 00                	add    BYTE PTR [eax],al
30003ab8:	14 00                	adc    al,0x0
30003aba:	00 00                	add    BYTE PTR [eax],al
30003abc:	16                   	push   ss
30003abd:	00 00                	add    BYTE PTR [eax],al
30003abf:	00 00                	add    BYTE PTR [eax],al
30003ac1:	00 00                	add    BYTE PTR [eax],al
30003ac3:	00 1d 00 00 00 11    	add    BYTE PTR ds:0x11000000,bl
30003ac9:	00 00                	add    BYTE PTR [eax],al
30003acb:	00 31                	add    BYTE PTR [ecx],dh
30003acd:	00 00                	add    BYTE PTR [eax],al
30003acf:	00 27                	add    BYTE PTR [edi],ah
30003ad1:	00 00                	add    BYTE PTR [eax],al
30003ad3:	00 26                	add    BYTE PTR [esi],ah
30003ad5:	00 00                	add    BYTE PTR [eax],al
30003ad7:	00 06                	add    BYTE PTR [esi],al
30003ad9:	00 00                	add    BYTE PTR [eax],al
30003adb:	00 03                	add    BYTE PTR [ebx],al
30003add:	00 00                	add    BYTE PTR [eax],al
30003adf:	00 2d 00 00 00 2b    	add    BYTE PTR ds:0x2b000000,ch
30003ae5:	00 00                	add    BYTE PTR [eax],al
30003ae7:	00 0b                	add    BYTE PTR [ebx],cl
30003ae9:	00 00                	add    BYTE PTR [eax],al
30003aeb:	00 30                	add    BYTE PTR [eax],dh
	...
30003af5:	00 00                	add    BYTE PTR [eax],al
30003af7:	00 0f                	add    BYTE PTR [edi],cl
30003af9:	00 00                	add    BYTE PTR [eax],al
30003afb:	00 12                	add    BYTE PTR [edx],dl
30003afd:	00 00                	add    BYTE PTR [eax],al
30003aff:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003b02:	00 00                	add    BYTE PTR [eax],al
30003b04:	18 00                	sbb    BYTE PTR [eax],al
30003b06:	00 00                	add    BYTE PTR [eax],al
30003b08:	32 00                	xor    al,BYTE PTR [eax]
30003b0a:	00 00                	add    BYTE PTR [eax],al
30003b0c:	21 00                	and    DWORD PTR [eax],eax
30003b0e:	00 00                	add    BYTE PTR [eax],al
30003b10:	00 00                	add    BYTE PTR [eax],al
30003b12:	00 00                	add    BYTE PTR [eax],al
30003b14:	2f                   	das    
30003b15:	00 00                	add    BYTE PTR [eax],al
30003b17:	00 1b                	add    BYTE PTR [ebx],bl
	...
30003b31:	00 00                	add    BYTE PTR [eax],al
30003b33:	00 02                	add    BYTE PTR [edx],al
30003b35:	00 00                	add    BYTE PTR [eax],al
30003b37:	00 00                	add    BYTE PTR [eax],al
30003b39:	00 00                	add    BYTE PTR [eax],al
30003b3b:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
	...
30003b51:	00 00                	add    BYTE PTR [eax],al
30003b53:	00 07                	add    BYTE PTR [edi],al
	...
30003b5d:	00 00                	add    BYTE PTR [eax],al
30003b5f:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
	...
30003b81:	00 00                	add    BYTE PTR [eax],al
30003b83:	00 01                	add    BYTE PTR [ecx],al
30003b85:	00 00                	add    BYTE PTR [eax],al
30003b87:	00 0e                	add    BYTE PTR [esi],cl
30003b89:	00 00                	add    BYTE PTR [eax],al
30003b8b:	00 13                	add    BYTE PTR [ebx],dl
30003b8d:	00 00                	add    BYTE PTR [eax],al
30003b8f:	00 00                	add    BYTE PTR [eax],al
30003b91:	00 00                	add    BYTE PTR [eax],al
30003b93:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
30003b96:	00 00                	add    BYTE PTR [eax],al
30003b98:	00 00                	add    BYTE PTR [eax],al
30003b9a:	00 00                	add    BYTE PTR [eax],al
30003b9c:	17                   	pop    ss
30003b9d:	00 00                	add    BYTE PTR [eax],al
30003b9f:	00 1f                	add    BYTE PTR [edi],bl
30003ba1:	00 00                	add    BYTE PTR [eax],al
30003ba3:	00 1e                	add    BYTE PTR [esi],bl
30003ba5:	00 00                	add    BYTE PTR [eax],al
30003ba7:	00 15 00 00 00 09    	add    BYTE PTR ds:0x9000000,dl
30003bad:	00 00                	add    BYTE PTR [eax],al
30003baf:	00 08                	add    BYTE PTR [eax],cl
30003bb1:	00 00                	add    BYTE PTR [eax],al
30003bb3:	00 00                	add    BYTE PTR [eax],al
30003bb5:	00 00                	add    BYTE PTR [eax],al
30003bb7:	00 0a                	add    BYTE PTR [edx],cl
30003bb9:	00 00                	add    BYTE PTR [eax],al
30003bbb:	00 10                	add    BYTE PTR [eax],dl
30003bbd:	00 00                	add    BYTE PTR [eax],al
30003bbf:	00 00                	add    BYTE PTR [eax],al
30003bc1:	00 00                	add    BYTE PTR [eax],al
30003bc3:	00 19                	add    BYTE PTR [ecx],bl
30003bc5:	00 00                	add    BYTE PTR [eax],al
30003bc7:	00 00                	add    BYTE PTR [eax],al
30003bc9:	00 00                	add    BYTE PTR [eax],al
30003bcb:	00 22                	add    BYTE PTR [edx],ah
30003bcd:	00 00                	add    BYTE PTR [eax],al
30003bcf:	00 00                	add    BYTE PTR [eax],al
30003bd1:	00 00                	add    BYTE PTR [eax],al
30003bd3:	00 29                	add    BYTE PTR [ecx],ch
30003bd5:	00 00                	add    BYTE PTR [eax],al
30003bd7:	00 00                	add    BYTE PTR [eax],al
30003bd9:	00 00                	add    BYTE PTR [eax],al
30003bdb:	00 2a                	add    BYTE PTR [edx],ch
30003bdd:	00 00                	add    BYTE PTR [eax],al
30003bdf:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003be2:	00 00                	add    BYTE PTR [eax],al
30003be4:	00 00                	add    BYTE PTR [eax],al
30003be6:	00 00                	add    BYTE PTR [eax],al
30003be8:	28 00                	sub    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

30003bec <.eh_frame>:
30003bec:	14 00                	adc    al,0x0
30003bee:	00 00                	add    BYTE PTR [eax],al
30003bf0:	00 00                	add    BYTE PTR [eax],al
30003bf2:	00 00                	add    BYTE PTR [eax],al
30003bf4:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30003bf7:	00 01                	add    BYTE PTR [ecx],al
30003bf9:	7c 08                	jl     30003c03 <__x86.get_pc_thunk.cx+0x115f>
30003bfb:	01 1b                	add    DWORD PTR [ebx],ebx
30003bfd:	0c 04                	or     al,0x4
30003bff:	04 88                	add    al,0x88
30003c01:	01 00                	add    DWORD PTR [eax],eax
30003c03:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003c06:	00 00                	add    BYTE PTR [eax],al
30003c08:	1c 00                	sbb    al,0x0
30003c0a:	00 00                	add    BYTE PTR [eax],al
30003c0c:	74 ee                	je     30003bfc <__x86.get_pc_thunk.cx+0x1158>
30003c0e:	ff                   	(bad)  
30003c0f:	ff 20                	jmp    DWORD PTR [eax]
30003c11:	00 00                	add    BYTE PTR [eax],al
30003c13:	00 00                	add    BYTE PTR [eax],al
30003c15:	0e                   	push   cs
30003c16:	08 46 0e             	or     BYTE PTR [esi+0xe],al
30003c19:	0c 4a                	or     al,0x4a
30003c1b:	0f 0b                	ud2    
30003c1d:	74 04                	je     30003c23 <__x86.get_pc_thunk.cx+0x117f>
30003c1f:	78 00                	js     30003c21 <__x86.get_pc_thunk.cx+0x117d>
30003c21:	3f                   	aas    
30003c22:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30003c24:	2a 32                	sub    dh,BYTE PTR [edx]
30003c26:	24 22                	and    al,0x22
30003c28:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

30003c2c <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
30003c2c:	01 1b                	add    DWORD PTR [ebx],ebx
30003c2e:	03 3b                	add    edi,DWORD PTR [ebx]
30003c30:	78 ee                	js     30003c20 <__x86.get_pc_thunk.cx+0x117c>
30003c32:	ff                   	(bad)  
30003c33:	ff 52 00             	call   DWORD PTR [edx+0x0]
30003c36:	00 00                	add    BYTE PTR [eax],al
30003c38:	d4 c3                	aam    0xc3
30003c3a:	ff                   	(bad)  
30003c3b:	ff 94 ee ff ff 0c c4 	call   DWORD PTR [esi+ebp*8-0x3bf30001]
30003c42:	ff                   	(bad)  
30003c43:	ff b4 ee ff ff 44 c4 	push   DWORD PTR [esi+ebp*8-0x3bbb0001]
30003c4a:	ff                   	(bad)  
30003c4b:	ff e8                	jmp    <internal disassembler error>
30003c4d:	ee                   	out    dx,al
30003c4e:	ff                   	(bad)  
30003c4f:	ff 99 c4 ff ff 10    	call   FWORD PTR [ecx+0x10ffffc4]
30003c55:	ef                   	out    dx,eax
30003c56:	ff                   	(bad)  
30003c57:	ff f0                	push   eax
30003c59:	c4                   	(bad)  
30003c5a:	ff                   	(bad)  
30003c5b:	ff                   	(bad)  
30003c5c:	38 ef                	cmp    bh,ch
30003c5e:	ff                   	(bad)  
30003c5f:	ff 88 c5 ff ff 74    	dec    DWORD PTR [eax+0x74ffffc5]
30003c65:	ef                   	out    dx,eax
30003c66:	ff                   	(bad)  
30003c67:	ff                   	(bad)  
30003c68:	ff c5                	inc    ebp
30003c6a:	ff                   	(bad)  
30003c6b:	ff 98 ef ff ff ba    	call   FWORD PTR [eax-0x45000011]
30003c71:	c6                   	(bad)  
30003c72:	ff                   	(bad)  
30003c73:	ff                   	(bad)  
30003c74:	bc ef ff ff 75       	mov    esp,0x75ffffef
30003c79:	c7                   	(bad)  
30003c7a:	ff                   	(bad)  
30003c7b:	ff e0                	jmp    eax
30003c7d:	ef                   	out    dx,eax
30003c7e:	ff                   	(bad)  
30003c7f:	ff d4                	call   esp
30003c81:	c7                   	(bad)  
30003c82:	ff                   	(bad)  
30003c83:	ff 00                	inc    DWORD PTR [eax]
30003c85:	f0 ff                	lock (bad) 
30003c87:	ff                   	(bad)  
30003c88:	7e c8                	jle    30003c52 <__GNU_EH_FRAME_HDR+0x26>
30003c8a:	ff                   	(bad)  
30003c8b:	ff 24 f0             	jmp    DWORD PTR [eax+esi*8]
30003c8e:	ff                   	(bad)  
30003c8f:	ff 40 ca             	inc    DWORD PTR [eax-0x36]
30003c92:	ff                   	(bad)  
30003c93:	ff 48 f0             	dec    DWORD PTR [eax-0x10]
30003c96:	ff                   	(bad)  
30003c97:	ff 6d ca             	jmp    FWORD PTR [ebp-0x36]
30003c9a:	ff                   	(bad)  
30003c9b:	ff 6c f0 ff          	jmp    FWORD PTR [eax+esi*8-0x1]
30003c9f:	ff 97 ca ff ff 90    	call   DWORD PTR [edi-0x6f000036]
30003ca5:	f0 ff                	lock (bad) 
30003ca7:	ff cc                	dec    esp
30003ca9:	ca ff ff             	retf   0xffff
30003cac:	b8 f0 ff ff 00       	mov    eax,0xfffff0
30003cb1:	cb                   	retf   
30003cb2:	ff                   	(bad)  
30003cb3:	ff dc                	call   <internal disassembler error>
30003cb5:	f0 ff                	lock (bad) 
30003cb7:	ff 26                	jmp    DWORD PTR [esi]
30003cb9:	cb                   	retf   
30003cba:	ff                   	(bad)  
30003cbb:	ff 00                	inc    DWORD PTR [eax]
30003cbd:	f1                   	icebp  
30003cbe:	ff                   	(bad)  
30003cbf:	ff 69 cb             	jmp    FWORD PTR [ecx-0x35]
30003cc2:	ff                   	(bad)  
30003cc3:	ff 24 f1             	jmp    DWORD PTR [ecx+esi*8]
30003cc6:	ff                   	(bad)  
30003cc7:	ff 98 cb ff ff 48    	call   FWORD PTR [eax+0x48ffffcb]
30003ccd:	f1                   	icebp  
30003cce:	ff                   	(bad)  
30003ccf:	ff 54 cc ff          	call   DWORD PTR [esp+ecx*8-0x1]
30003cd3:	ff 6c f1 ff          	jmp    FWORD PTR [ecx+esi*8-0x1]
30003cd7:	ff 8e cc ff ff 94    	dec    DWORD PTR [esi-0x6b000034]
30003cdd:	f1                   	icebp  
30003cde:	ff                   	(bad)  
30003cdf:	ff ca                	dec    edx
30003ce1:	cc                   	int3   
30003ce2:	ff                   	(bad)  
30003ce3:	ff                   	(bad)  
30003ce4:	bc f1 ff ff 08       	mov    esp,0x8fffff1
30003ce9:	cd ff                	int    0xff
30003ceb:	ff e4                	jmp    esp
30003ced:	f1                   	icebp  
30003cee:	ff                   	(bad)  
30003cef:	ff 48 cd             	dec    DWORD PTR [eax-0x33]
30003cf2:	ff                   	(bad)  
30003cf3:	ff 0c f2             	dec    DWORD PTR [edx+esi*8]
30003cf6:	ff                   	(bad)  
30003cf7:	ff 8a cd ff ff 34    	dec    DWORD PTR [edx+0x34ffffcd]
30003cfd:	f2 ff                	repnz (bad) 
30003cff:	ff 2f                	jmp    FWORD PTR [edi]
30003d01:	ce                   	into   
30003d02:	ff                   	(bad)  
30003d03:	ff 58 f2             	call   FWORD PTR [eax-0xe]
30003d06:	ff                   	(bad)  
30003d07:	ff 4e ce             	dec    DWORD PTR [esi-0x32]
30003d0a:	ff                   	(bad)  
30003d0b:	ff                   	(bad)  
30003d0c:	7c f2                	jl     30003d00 <__GNU_EH_FRAME_HDR+0xd4>
30003d0e:	ff                   	(bad)  
30003d0f:	ff 82 ce ff ff 9c    	inc    DWORD PTR [edx-0x63000032]
30003d15:	f2 ff                	repnz (bad) 
30003d17:	ff b6 ce ff ff bc    	push   DWORD PTR [esi-0x43000032]
30003d1d:	f2 ff                	repnz (bad) 
30003d1f:	ff ed                	jmp    <internal disassembler error>
30003d21:	ce                   	into   
30003d22:	ff                   	(bad)  
30003d23:	ff dc                	call   <internal disassembler error>
30003d25:	f2 ff                	repnz (bad) 
30003d27:	ff 5f cf             	call   FWORD PTR [edi-0x31]
30003d2a:	ff                   	(bad)  
30003d2b:	ff 04 f3             	inc    DWORD PTR [ebx+esi*8]
30003d2e:	ff                   	(bad)  
30003d2f:	ff                   	(bad)  
30003d30:	7c cf                	jl     30003d01 <__GNU_EH_FRAME_HDR+0xd5>
30003d32:	ff                   	(bad)  
30003d33:	ff 24 f3             	jmp    DWORD PTR [ebx+esi*8]
30003d36:	ff                   	(bad)  
30003d37:	ff a5 cf ff ff 44    	jmp    DWORD PTR [ebp+0x44ffffcf]
30003d3d:	f3 ff                	repz (bad) 
30003d3f:	ff                   	(bad)  
30003d40:	be cf ff ff 64       	mov    esi,0x64ffffcf
30003d45:	f3 ff                	repz (bad) 
30003d47:	ff ab d1 ff ff 88    	jmp    FWORD PTR [ebx-0x7700002f]
30003d4d:	f3 ff                	repz (bad) 
30003d4f:	ff f7                	push   edi
30003d51:	d1 ff                	sar    edi,1
30003d53:	ff ac f3 ff ff 13 d2 	jmp    FWORD PTR [ebx+esi*8-0x2dec0001]
30003d5a:	ff                   	(bad)  
30003d5b:	ff cc                	dec    esp
30003d5d:	f3 ff                	repz (bad) 
30003d5f:	ff 34 d2             	push   DWORD PTR [edx+edx*8]
30003d62:	ff                   	(bad)  
30003d63:	ff ec                	jmp    <internal disassembler error>
30003d65:	f3 ff                	repz (bad) 
30003d67:	ff a0 d2 ff ff 10    	jmp    DWORD PTR [eax+0x10ffffd2]
30003d6d:	f4                   	hlt    
30003d6e:	ff                   	(bad)  
30003d6f:	ff 27                	jmp    DWORD PTR [edi]
30003d71:	d3 ff                	sar    edi,cl
30003d73:	ff 30                	push   DWORD PTR [eax]
30003d75:	f4                   	hlt    
30003d76:	ff                   	(bad)  
30003d77:	ff 60 d3             	jmp    DWORD PTR [eax-0x2d]
30003d7a:	ff                   	(bad)  
30003d7b:	ff 50 f4             	call   DWORD PTR [eax-0xc]
30003d7e:	ff                   	(bad)  
30003d7f:	ff 34 d5 ff ff 74 f4 	push   DWORD PTR [edx*8-0xb8b0001]
30003d86:	ff                   	(bad)  
30003d87:	ff 54 d5 ff          	call   DWORD PTR [ebp+edx*8-0x1]
30003d8b:	ff 94 f4 ff ff 6f d5 	call   DWORD PTR [esp+esi*8-0x2a900001]
30003d92:	ff                   	(bad)  
30003d93:	ff b4 f4 ff ff a4 d5 	push   DWORD PTR [esp+esi*8-0x2a5b0001]
30003d9a:	ff                   	(bad)  
30003d9b:	ff d8                	call   <internal disassembler error>
30003d9d:	f4                   	hlt    
30003d9e:	ff                   	(bad)  
30003d9f:	ff 40 d7             	inc    DWORD PTR [eax-0x29]
30003da2:	ff                   	(bad)  
30003da3:	ff                   	(bad)  
30003da4:	f8                   	clc    
30003da5:	f4                   	hlt    
30003da6:	ff                   	(bad)  
30003da7:	ff 07                	inc    DWORD PTR [edi]
30003da9:	d8 ff                	fdivr  st,st(7)
30003dab:	ff 18                	call   FWORD PTR [eax]
30003dad:	f5                   	cmc    
30003dae:	ff                   	(bad)  
30003daf:	ff 28                	jmp    FWORD PTR [eax]
30003db1:	d8 ff                	fdivr  st,st(7)
30003db3:	ff                   	(bad)  
30003db4:	38 f5                	cmp    ch,dh
30003db6:	ff                   	(bad)  
30003db7:	ff                   	(bad)  
30003db8:	3c d8                	cmp    al,0xd8
30003dba:	ff                   	(bad)  
30003dbb:	ff 58 f5             	call   FWORD PTR [eax-0xb]
30003dbe:	ff                   	(bad)  
30003dbf:	ff c0                	inc    eax
30003dc1:	d8 ff                	fdivr  st,st(7)
30003dc3:	ff                   	(bad)  
30003dc4:	7c f5                	jl     30003dbb <__GNU_EH_FRAME_HDR+0x18f>
30003dc6:	ff                   	(bad)  
30003dc7:	ff                   	(bad)  
30003dc8:	fe                   	(bad)  
30003dc9:	d8 ff                	fdivr  st,st(7)
30003dcb:	ff a0 f5 ff ff 3c    	jmp    DWORD PTR [eax+0x3cfffff5]
30003dd1:	d9 ff                	fcos   
30003dd3:	ff c4                	inc    esp
30003dd5:	f5                   	cmc    
30003dd6:	ff                   	(bad)  
30003dd7:	ff ac d9 ff ff e4 f5 	jmp    FWORD PTR [ecx+ebx*8-0xa1b0001]
30003dde:	ff                   	(bad)  
30003ddf:	ff 0c da             	dec    DWORD PTR [edx+ebx*8]
30003de2:	ff                   	(bad)  
30003de3:	ff 0c f6             	dec    DWORD PTR [esi+esi*8]
30003de6:	ff                   	(bad)  
30003de7:	ff 4c da ff          	dec    DWORD PTR [edx+ebx*8-0x1]
30003deb:	ff 2c f6             	jmp    FWORD PTR [esi+esi*8]
30003dee:	ff                   	(bad)  
30003def:	ff 8c da ff ff 4c f6 	dec    DWORD PTR [edx+ebx*8-0x9b30001]
30003df6:	ff                   	(bad)  
30003df7:	ff d4                	call   esp
30003df9:	da ff                	(bad)  
30003dfb:	ff 6c f6 ff          	jmp    FWORD PTR [esi+esi*8-0x1]
30003dff:	ff 04 db             	inc    DWORD PTR [ebx+ebx*8]
30003e02:	ff                   	(bad)  
30003e03:	ff 8c f6 ff ff 60 db 	dec    DWORD PTR [esi+esi*8-0x249f0001]
30003e0a:	ff                   	(bad)  
30003e0b:	ff ac f6 ff ff 91 db 	jmp    FWORD PTR [esi+esi*8-0x246e0001]
30003e12:	ff                   	(bad)  
30003e13:	ff cc                	dec    esp
30003e15:	f6 ff                	idiv   bh
30003e17:	ff c4                	inc    esp
30003e19:	db ff                	(bad)  
30003e1b:	ff ec                	jmp    <internal disassembler error>
30003e1d:	f6 ff                	idiv   bh
30003e1f:	ff 2b                	jmp    FWORD PTR [ebx]
30003e21:	dc ff                	fdiv   st(7),st
30003e23:	ff 0c f7             	dec    DWORD PTR [edi+esi*8]
30003e26:	ff                   	(bad)  
30003e27:	ff 94 dc ff ff 2c f7 	call   DWORD PTR [esp+ebx*8-0x8d30001]
30003e2e:	ff                   	(bad)  
30003e2f:	ff f4                	push   esp
30003e31:	dc ff                	fdiv   st(7),st
30003e33:	ff 4c f7 ff          	dec    DWORD PTR [edi+esi*8-0x1]
30003e37:	ff 14 dd ff ff 6c f7 	call   DWORD PTR [ebx*8-0x8930001]
30003e3e:	ff                   	(bad)  
30003e3f:	ff 94 de ff ff 9c f7 	call   DWORD PTR [esi+ebx*8-0x8630001]
30003e46:	ff                   	(bad)  
30003e47:	ff b4 de ff ff bc f7 	push   DWORD PTR [esi+ebx*8-0x8430001]
30003e4e:	ff                   	(bad)  
30003e4f:	ff 50 e0             	call   DWORD PTR [eax-0x20]
30003e52:	ff                   	(bad)  
30003e53:	ff ec                	jmp    <internal disassembler error>
30003e55:	f7 ff                	idiv   edi
30003e57:	ff e6                	jmp    esi
30003e59:	e0 ff                	loopne 30003e5a <__GNU_EH_FRAME_HDR+0x22e>
30003e5b:	ff 10                	call   DWORD PTR [eax]
30003e5d:	f8                   	clc    
30003e5e:	ff                   	(bad)  
30003e5f:	ff 08                	dec    DWORD PTR [eax]
30003e61:	e1 ff                	loope  30003e62 <__GNU_EH_FRAME_HDR+0x236>
30003e63:	ff 30                	push   DWORD PTR [eax]
30003e65:	f8                   	clc    
30003e66:	ff                   	(bad)  
30003e67:	ff 76 e1             	push   DWORD PTR [esi-0x1f]
30003e6a:	ff                   	(bad)  
30003e6b:	ff 58 f8             	call   FWORD PTR [eax-0x8]
30003e6e:	ff                   	(bad)  
30003e6f:	ff 94 e1 ff ff 78 f8 	call   DWORD PTR [ecx+eiz*8-0x7870001]
30003e76:	ff                   	(bad)  
30003e77:	ff d8                	call   <internal disassembler error>
30003e79:	e1 ff                	loope  30003e7a <__GNU_EH_FRAME_HDR+0x24e>
30003e7b:	ff a0 f8 ff ff f1    	jmp    DWORD PTR [eax-0xe000008]
30003e81:	e4 ff                	in     al,0xff
30003e83:	ff c8                	dec    eax
30003e85:	f8                   	clc    
30003e86:	ff                   	(bad)  
30003e87:	ff 0e                	dec    DWORD PTR [esi]
30003e89:	e5 ff                	in     eax,0xff
30003e8b:	ff e8                	jmp    <internal disassembler error>
30003e8d:	f8                   	clc    
30003e8e:	ff                   	(bad)  
30003e8f:	ff 4f e5             	dec    DWORD PTR [edi-0x1b]
30003e92:	ff                   	(bad)  
30003e93:	ff 0c f9             	dec    DWORD PTR [ecx+edi*8]
30003e96:	ff                   	(bad)  
30003e97:	ff 84 e5 ff ff 2c f9 	inc    DWORD PTR [ebp+eiz*8-0x6d30001]
30003e9e:	ff                   	(bad)  
30003e9f:	ff a1 e5 ff ff 4c    	jmp    DWORD PTR [ecx+0x4cffffe5]
30003ea5:	f9                   	stc    
30003ea6:	ff                   	(bad)  
30003ea7:	ff e2                	jmp    edx
30003ea9:	ed                   	in     eax,dx
30003eaa:	ff                   	(bad)  
30003eab:	ff                   	(bad)  
30003eac:	7c f9                	jl     30003ea7 <__GNU_EH_FRAME_HDR+0x27b>
30003eae:	ff                   	(bad)  
30003eaf:	ff 4f ee             	dec    DWORD PTR [edi-0x12]
30003eb2:	ff                   	(bad)  
30003eb3:	ff d4                	call   esp
30003eb5:	ee                   	out    dx,al
30003eb6:	ff                   	(bad)  
30003eb7:	ff 74 ee ff          	push   DWORD PTR [esi+ebp*8-0x1]
30003ebb:	ff 60 ef             	jmp    DWORD PTR [eax-0x11]
30003ebe:	ff                   	(bad)  
30003ebf:	ff                   	(bad)  
30003ec0:	78 ee                	js     30003eb0 <__GNU_EH_FRAME_HDR+0x284>
30003ec2:	ff                   	(bad)  
30003ec3:	ff                   	.byte 0xff
30003ec4:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30003ec5:	f9                   	stc    
30003ec6:	ff                   	(bad)  
30003ec7:	ff                   	.byte 0xff

Disassembly of section .rodata:

30003ee0 <_ytab-0x220>:
30003ee0:	3d 00 53 74 72       	cmp    eax,0x72745300
30003ee5:	65                   	gs
30003ee6:	61                   	popa   
30003ee7:	6d                   	ins    DWORD PTR es:[edi],dx
30003ee8:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
30003eee:	74 20                	je     30003f10 <__GNU_EH_FRAME_HDR+0x2e4>
30003ef0:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30003ef7:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003ef8:	74 65                	je     30003f5f <__GNU_EH_FRAME_HDR+0x333>
30003efa:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30003efd:	00 00                	add    BYTE PTR [eax],al
30003eff:	00 2a                	add    BYTE PTR [edx],ch
30003f01:	2a 2a                	sub    ch,BYTE PTR [edx]
30003f03:	6c                   	ins    BYTE PTR es:[edi],dx
30003f04:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30003f0b:	74 20                	je     30003f2d <__GNU_EH_FRAME_HDR+0x301>
30003f0d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003f10:	6c                   	ins    BYTE PTR es:[edi],dx
30003f11:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
30003f15:	2a 2a                	sub    ch,BYTE PTR [edx]
30003f17:	00 2a                	add    BYTE PTR [edx],ch
30003f19:	2a 2a                	sub    ch,BYTE PTR [edx]
30003f1b:	6c                   	ins    BYTE PTR es:[edi],dx
30003f1c:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30003f23:	74 20                	je     30003f45 <__GNU_EH_FRAME_HDR+0x319>
30003f25:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
30003f28:	70 6c                	jo     30003f96 <__GNU_EH_FRAME_HDR+0x36a>
30003f2a:	65                   	gs
30003f2b:	74 65                	je     30003f92 <__GNU_EH_FRAME_HDR+0x366>
30003f2d:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30003f30:	6c                   	ins    BYTE PTR es:[edi],dx
30003f31:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30003f38:	74 20                	je     30003f5a <__GNU_EH_FRAME_HDR+0x32e>
30003f3a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003f3d:	6c                   	ins    BYTE PTR es:[edi],dx
30003f3e:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
30003f43:	65                   	gs
30003f44:	76 69                	jbe    30003faf <__GNU_EH_FRAME_HDR+0x383>
30003f46:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f47:	75 73                	jne    30003fbc <__GNU_EH_FRAME_HDR+0x390>
30003f49:	6c                   	ins    BYTE PTR es:[edi],dx
30003f4a:	79 2c                	jns    30003f78 <__GNU_EH_FRAME_HDR+0x34c>
30003f4c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
30003f4f:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x20000a67
30003f56:	20 
30003f57:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003f5b:	63 3a                	arpl   WORD PTR [edx],di
30003f5d:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
30003f60:	65 63 20             	arpl   WORD PTR gs:[eax],sp
30003f63:	66 6f                	outs   dx,WORD PTR ds:[esi]
30003f65:	72 20                	jb     30003f87 <__GNU_EH_FRAME_HDR+0x35b>
30003f67:	25 73 0a 00 00       	and    eax,0xa73
30003f6c:	68 65 61 70 42       	push   0x42706165
30003f71:	61                   	popa   
30003f72:	73 65                	jae    30003fd9 <__GNU_EH_FRAME_HDR+0x3ad>
30003f74:	20 40 20             	and    BYTE PTR [eax+0x20],al
30003f77:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
30003f7a:	30 38                	xor    BYTE PTR [eax],bh
30003f7c:	58                   	pop    eax
30003f7d:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
30003f83:	30 38                	xor    BYTE PTR [eax],bh
30003f85:	58                   	pop    eax
30003f86:	20 62 65             	and    BYTE PTR [edx+0x65],ah
30003f89:	66 6f                	outs   dx,WORD PTR ds:[esi]
30003f8b:	72 65                	jb     30003ff2 <__GNU_EH_FRAME_HDR+0x3c6>
30003f8d:	0a 00                	or     al,BYTE PTR [eax]
30003f8f:	6d                   	ins    DWORD PTR es:[edi],dx
30003f90:	61                   	popa   
30003f91:	6c                   	ins    BYTE PTR es:[edi],dx
30003f92:	6c                   	ins    BYTE PTR es:[edi],dx
30003f93:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003f94:	63 28                	arpl   WORD PTR [eax],bp
30003f96:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003f99:	30 38                	xor    BYTE PTR [eax],bh
30003f9b:	58                   	pop    eax
30003f9c:	29 0a                	sub    DWORD PTR [edx],ecx
30003f9e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003fa2:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30003fa5:	61                   	popa   
30003fa6:	6c                   	ins    BYTE PTR es:[edi],dx
30003fa7:	6c                   	ins    BYTE PTR es:[edi],dx
30003fa8:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fa9:	63 3a                	arpl   WORD PTR [edx],di
30003fab:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
30003fae:	65                   	gs
30003faf:	64                   	fs
30003fb0:	65                   	gs
30003fb1:	64                   	fs
30003fb2:	3d 30 78 25 30       	cmp    eax,0x30257830
30003fb7:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003fba:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003fbe:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30003fc1:	61                   	popa   
30003fc2:	6c                   	ins    BYTE PTR es:[edi],dx
30003fc3:	6c                   	ins    BYTE PTR es:[edi],dx
30003fc4:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fc5:	63 3a                	arpl   WORD PTR [edx],di
30003fc7:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30003fca:	61                   	popa   
30003fcb:	45                   	inc    ebp
30003fcc:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003fcd:	64                   	fs
30003fce:	3d 30 78 25 30       	cmp    eax,0x30257830
30003fd3:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003fd6:	00 00                	add    BYTE PTR [eax],al
30003fd8:	6c                   	ins    BYTE PTR es:[edi],dx
30003fd9:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30003fe0:	6c                   	ins    BYTE PTR es:[edi],dx
30003fe1:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003fe2:	63 3a                	arpl   WORD PTR [edx],di
30003fe4:	20 52 65             	and    BYTE PTR [edx+0x65],dl
30003fe7:	71 20                	jno    30004009 <__GNU_EH_FRAME_HDR+0x3dd>
30003fe9:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003fec:	30 38                	xor    BYTE PTR [eax],bh
30003fee:	58                   	pop    eax
30003fef:	20 62 79             	and    BYTE PTR [edx+0x79],ah
30003ff2:	74 65                	je     30004059 <__GNU_EH_FRAME_HDR+0x42d>
30003ff4:	73 2c                	jae    30004022 <__GNU_EH_FRAME_HDR+0x3f6>
30003ff6:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30003ff9:	74 20                	je     3000401b <__GNU_EH_FRAME_HDR+0x3ef>
30003ffb:	77 61                	ja     3000405e <__GNU_EH_FRAME_HDR+0x432>
30003ffd:	73 20                	jae    3000401f <__GNU_EH_FRAME_HDR+0x3f3>
30003fff:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004002:	30 38                	xor    BYTE PTR [eax],bh
30004004:	58                   	pop    eax
30004005:	2c 20                	sub    al,0x20
30004007:	68 65 61 70 45       	push   0x45706165
3000400c:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000400d:	64                   	fs
3000400e:	3d 30 78 25 30       	cmp    eax,0x30257830
30004013:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30004016:	00 00                	add    BYTE PTR [eax],al
30004018:	6c                   	ins    BYTE PTR es:[edi],dx
30004019:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004020:	6c                   	ins    BYTE PTR es:[edi],dx
30004021:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004022:	63 3a                	arpl   WORD PTR [edx],di
30004024:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
30004027:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
3000402e:	65 
3000402f:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
30004033:	61                   	popa   
30004034:	70 43                	jo     30004079 <__GNU_EH_FRAME_HDR+0x44d>
30004036:	75 72                	jne    300040aa <__GNU_EH_FRAME_HDR+0x47e>
30004038:	72 20                	jb     3000405a <__GNU_EH_FRAME_HDR+0x42e>
3000403a:	61                   	popa   
3000403b:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000403c:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
30004040:	61                   	popa   
30004041:	70 42                	jo     30004085 <__GNU_EH_FRAME_HDR+0x459>
30004043:	61                   	popa   
30004044:	73 65                	jae    300040ab <__GNU_EH_FRAME_HDR+0x47f>
30004046:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
3000404a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000404d:	30 38                	xor    BYTE PTR [eax],bh
3000404f:	58                   	pop    eax
30004050:	0a 00                	or     al,BYTE PTR [eax]
30004052:	00 00                	add    BYTE PTR [eax],al
30004054:	6c                   	ins    BYTE PTR es:[edi],dx
30004055:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
3000405c:	6c                   	ins    BYTE PTR es:[edi],dx
3000405d:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000405e:	63 3a                	arpl   WORD PTR [edx],di
30004060:	63 72 65             	arpl   WORD PTR [edx+0x65],si
30004063:	61                   	popa   
30004064:	74 69                	je     300040cf <__GNU_EH_FRAME_HDR+0x4a3>
30004066:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004067:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
3000406b:	61                   	popa   
3000406c:	70 20                	jo     3000408e <__GNU_EH_FRAME_HDR+0x462>
3000406e:	72 65                	jb     300040d5 <__GNU_EH_FRAME_HDR+0x4a9>
30004070:	63 20                	arpl   WORD PTR [eax],sp
30004072:	40                   	inc    eax
30004073:	20 30                	and    BYTE PTR [eax],dh
30004075:	78 25                	js     3000409c <__GNU_EH_FRAME_HDR+0x470>
30004077:	30 38                	xor    BYTE PTR [eax],bh
30004079:	58                   	pop    eax
3000407a:	0a 00                	or     al,BYTE PTR [eax]
3000407c:	6c                   	ins    BYTE PTR es:[edi],dx
3000407d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004084:	6c                   	ins    BYTE PTR es:[edi],dx
30004085:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004086:	63 3a                	arpl   WORD PTR [edx],di
30004088:	20 68 65             	and    BYTE PTR [eax+0x65],ch
3000408b:	61                   	popa   
3000408c:	70 43                	jo     300040d1 <__GNU_EH_FRAME_HDR+0x4a5>
3000408e:	75 72                	jne    30004102 <_ytab+0x2>
30004090:	72 3d                	jb     300040cf <__GNU_EH_FRAME_HDR+0x4a3>
30004092:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004095:	30 38                	xor    BYTE PTR [eax],bh
30004097:	58                   	pop    eax
30004098:	2c 20                	sub    al,0x20
3000409a:	73 69                	jae    30004105 <_ytab+0x5>
3000409c:	7a 65                	jp     30004103 <_ytab+0x3>
3000409e:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000409f:	66                   	data16
300040a0:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
300040a3:	61                   	popa   
300040a4:	70 72                	jo     30004118 <_ytab+0x18>
300040a6:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
300040aa:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
300040b0:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300040b3:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
300040b6:	6c                   	ins    BYTE PTR es:[edi],dx
300040b7:	6c                   	ins    BYTE PTR es:[edi],dx
300040b8:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040b9:	63 3a                	arpl   WORD PTR [edx],di
300040bb:	20 72 65             	and    BYTE PTR [edx+0x65],dh
300040be:	74 75                	je     30004135 <_ytab+0x35>
300040c0:	72 6e                	jb     30004130 <_ytab+0x30>
300040c2:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
300040c9:	30 38                	xor    BYTE PTR [eax],bh
300040cb:	58                   	pop    eax
300040cc:	0a 00                	or     al,BYTE PTR [eax]
	...
300040de:	00 00                	add    BYTE PTR [eax],al
300040e0:	47                   	inc    edi
300040e1:	4d                   	dec    ebp
300040e2:	54                   	push   esp
	...

30004100 <_ytab>:
30004100:	1f                   	pop    ds
30004101:	00 00                	add    BYTE PTR [eax],al
30004103:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30004106:	00 00                	add    BYTE PTR [eax],al
30004108:	1f                   	pop    ds
30004109:	00 00                	add    BYTE PTR [eax],al
3000410b:	00 1e                	add    BYTE PTR [esi],bl
3000410d:	00 00                	add    BYTE PTR [eax],al
3000410f:	00 1f                	add    BYTE PTR [edi],bl
30004111:	00 00                	add    BYTE PTR [eax],al
30004113:	00 1e                	add    BYTE PTR [esi],bl
30004115:	00 00                	add    BYTE PTR [eax],al
30004117:	00 1f                	add    BYTE PTR [edi],bl
30004119:	00 00                	add    BYTE PTR [eax],al
3000411b:	00 1f                	add    BYTE PTR [edi],bl
3000411d:	00 00                	add    BYTE PTR [eax],al
3000411f:	00 1e                	add    BYTE PTR [esi],bl
30004121:	00 00                	add    BYTE PTR [eax],al
30004123:	00 1f                	add    BYTE PTR [edi],bl
30004125:	00 00                	add    BYTE PTR [eax],al
30004127:	00 1e                	add    BYTE PTR [esi],bl
30004129:	00 00                	add    BYTE PTR [eax],al
3000412b:	00 1f                	add    BYTE PTR [edi],bl
3000412d:	00 00                	add    BYTE PTR [eax],al
3000412f:	00 1f                	add    BYTE PTR [edi],bl
30004131:	00 00                	add    BYTE PTR [eax],al
30004133:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
30004139:	00 00                	add    BYTE PTR [eax],al
3000413b:	00 1e                	add    BYTE PTR [esi],bl
3000413d:	00 00                	add    BYTE PTR [eax],al
3000413f:	00 1f                	add    BYTE PTR [edi],bl
30004141:	00 00                	add    BYTE PTR [eax],al
30004143:	00 1e                	add    BYTE PTR [esi],bl
30004145:	00 00                	add    BYTE PTR [eax],al
30004147:	00 1f                	add    BYTE PTR [edi],bl
30004149:	00 00                	add    BYTE PTR [eax],al
3000414b:	00 1f                	add    BYTE PTR [edi],bl
3000414d:	00 00                	add    BYTE PTR [eax],al
3000414f:	00 1e                	add    BYTE PTR [esi],bl
30004151:	00 00                	add    BYTE PTR [eax],al
30004153:	00 1f                	add    BYTE PTR [edi],bl
30004155:	00 00                	add    BYTE PTR [eax],al
30004157:	00 1e                	add    BYTE PTR [esi],bl
30004159:	00 00                	add    BYTE PTR [eax],al
3000415b:	00 1f                	add    BYTE PTR [edi],bl
3000415d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

30004160 <.rel.dyn>:
30004160:	84 43 00             	test   BYTE PTR [ebx+0x0],al
30004163:	30 08                	xor    BYTE PTR [eax],cl
30004165:	00 00                	add    BYTE PTR [eax],al
30004167:	00 88 43 00 30 08    	add    BYTE PTR [eax+0x8300043],cl
3000416d:	00 00                	add    BYTE PTR [eax],al
3000416f:	00 8c 43 00 30 08 00 	add    BYTE PTR [ebx+eax*2+0x83000],cl
30004176:	00 00                	add    BYTE PTR [eax],al
30004178:	90                   	nop
30004179:	43                   	inc    ebx
3000417a:	00 30                	add    BYTE PTR [eax],dh
3000417c:	08 00                	or     BYTE PTR [eax],al
3000417e:	00 00                	add    BYTE PTR [eax],al
30004180:	94                   	xchg   esp,eax
30004181:	43                   	inc    ebx
30004182:	00 30                	add    BYTE PTR [eax],dh
30004184:	08 00                	or     BYTE PTR [eax],al
30004186:	00 00                	add    BYTE PTR [eax],al
30004188:	ac                   	lods   al,BYTE PTR ds:[esi]
30004189:	43                   	inc    ebx
3000418a:	00 30                	add    BYTE PTR [eax],dh
3000418c:	08 00                	or     BYTE PTR [eax],al
3000418e:	00 00                	add    BYTE PTR [eax],al
30004190:	b0 43                	mov    al,0x43
30004192:	00 30                	add    BYTE PTR [eax],dh
30004194:	08 00                	or     BYTE PTR [eax],al
30004196:	00 00                	add    BYTE PTR [eax],al
30004198:	b4 43                	mov    ah,0x43
3000419a:	00 30                	add    BYTE PTR [eax],dh
3000419c:	08 00                	or     BYTE PTR [eax],al
3000419e:	00 00                	add    BYTE PTR [eax],al
300041a0:	4a                   	dec    edx
300041a1:	07                   	pop    es
300041a2:	00 30                	add    BYTE PTR [eax],dh
300041a4:	02 1f                	add    bl,BYTE PTR [edi]
300041a6:	00 00                	add    BYTE PTR [eax],al
300041a8:	8a 07                	mov    al,BYTE PTR [edi]
300041aa:	00 30                	add    BYTE PTR [eax],dh
300041ac:	02 1f                	add    bl,BYTE PTR [edi]
300041ae:	00 00                	add    BYTE PTR [eax],al
300041b0:	b3 07                	mov    bl,0x7
300041b2:	00 30                	add    BYTE PTR [eax],dh
300041b4:	02 1f                	add    bl,BYTE PTR [edi]
300041b6:	00 00                	add    BYTE PTR [eax],al
300041b8:	10 08                	adc    BYTE PTR [eax],cl
300041ba:	00 30                	add    BYTE PTR [eax],dh
300041bc:	02 1f                	add    bl,BYTE PTR [edi]
300041be:	00 00                	add    BYTE PTR [eax],al
300041c0:	73 08                	jae    300041ca <_ytab+0xca>
300041c2:	00 30                	add    BYTE PTR [eax],dh
300041c4:	02 1f                	add    bl,BYTE PTR [edi]
300041c6:	00 00                	add    BYTE PTR [eax],al
300041c8:	a9 08 00 30 02       	test   eax,0x2300008
300041cd:	1f                   	pop    ds
300041ce:	00 00                	add    BYTE PTR [eax],al
300041d0:	e5 08                	in     eax,0x8
300041d2:	00 30                	add    BYTE PTR [eax],dh
300041d4:	02 1f                	add    bl,BYTE PTR [edi]
300041d6:	00 00                	add    BYTE PTR [eax],al
300041d8:	23 09                	and    ecx,DWORD PTR [ecx]
300041da:	00 30                	add    BYTE PTR [eax],dh
300041dc:	02 1f                	add    bl,BYTE PTR [edi]
300041de:	00 00                	add    BYTE PTR [eax],al
300041e0:	63 09                	arpl   WORD PTR [ecx],cx
300041e2:	00 30                	add    BYTE PTR [eax],dh
300041e4:	02 1f                	add    bl,BYTE PTR [edi]
300041e6:	00 00                	add    BYTE PTR [eax],al
300041e8:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
300041e9:	09 00                	or     DWORD PTR [eax],eax
300041eb:	30 02                	xor    BYTE PTR [edx],al
300041ed:	1f                   	pop    ds
300041ee:	00 00                	add    BYTE PTR [eax],al
300041f0:	4b                   	dec    ebx
300041f1:	0b 00                	or     eax,DWORD PTR [eax]
300041f3:	30 02                	xor    BYTE PTR [edx],al
300041f5:	1f                   	pop    ds
300041f6:	00 00                	add    BYTE PTR [eax],al
300041f8:	78 0b                	js     30004205 <_ytab+0x105>
300041fa:	00 30                	add    BYTE PTR [eax],dh
300041fc:	02 1f                	add    bl,BYTE PTR [edi]
300041fe:	00 00                	add    BYTE PTR [eax],al
30004200:	f3 1d 00 30 02 1f    	repz sbb eax,0x1f023000
30004206:	00 00                	add    BYTE PTR [eax],al
30004208:	47                   	inc    edi
30004209:	2a 00                	sub    al,BYTE PTR [eax]
3000420b:	30 02                	xor    BYTE PTR [edx],al
3000420d:	1f                   	pop    ds
3000420e:	00 00                	add    BYTE PTR [eax],al
30004210:	a8 43                	test   al,0x43
30004212:	00 30                	add    BYTE PTR [eax],dh
30004214:	01 12                	add    DWORD PTR [edx],edx
30004216:	00 00                	add    BYTE PTR [eax],al
30004218:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30004219:	43                   	inc    ebx
3000421a:	00 30                	add    BYTE PTR [eax],dh
3000421c:	07                   	pop    es
3000421d:	10 00                	adc    BYTE PTR [eax],al
	...

Disassembly of section .data:

30004220 <console_node>:
30004220:	01 00                	add    DWORD PTR [eax],eax
	...

30004260 <rcsid>:
30004260:	24 48                	and    al,0x48
30004262:	65                   	gs
30004263:	61                   	popa   
30004264:	64                   	fs
30004265:	65                   	gs
30004266:	72 3a                	jb     300042a2 <rcsid+0x42>
30004268:	20 2f                	and    BYTE PTR [edi],ch
3000426a:	75 73                	jne    300042df <_DYNAMIC+0x13>
3000426c:	65                   	gs
3000426d:	72 36                	jb     300042a5 <rcsid+0x45>
3000426f:	2f                   	das    
30004270:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004271:	75 73                	jne    300042e6 <_DYNAMIC+0x1a>
30004273:	74 65                	je     300042da <_DYNAMIC+0xe>
30004275:	72 2f                	jb     300042a6 <rcsid+0x46>
30004277:	74 63                	je     300042dc <_DYNAMIC+0x10>
30004279:	6c                   	ins    BYTE PTR es:[edi],dx
3000427a:	2f                   	das    
3000427b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
3000427e:	70 61                	jo     300042e1 <_DYNAMIC+0x15>
30004280:	74 2f                	je     300042b1 <rcsid+0x51>
30004282:	52                   	push   edx
30004283:	43                   	inc    ebx
30004284:	53                   	push   ebx
30004285:	2f                   	das    
30004286:	73 74                	jae    300042fc <_DYNAMIC+0x30>
30004288:	72 73                	jb     300042fd <_DYNAMIC+0x31>
3000428a:	74 72                	je     300042fe <_DYNAMIC+0x32>
3000428c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
30004290:	20 31                	and    BYTE PTR [ecx],dh
30004292:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
30004295:	39 33                	cmp    DWORD PTR [ebx],esi
30004297:	2f                   	das    
30004298:	30 33                	xor    BYTE PTR [ebx],dh
3000429a:	2f                   	das    
3000429b:	31 39                	xor    DWORD PTR [ecx],edi
3000429d:	20 31                	and    BYTE PTR [ecx],dh
3000429f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
300042a4:	34 30                	xor    al,0x30
300042a6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
300042a9:	73 74                	jae    3000431f <_DYNAMIC+0x53>
300042ab:	65                   	gs
300042ac:	72 20                	jb     300042ce <_DYNAMIC+0x2>
300042ae:	45                   	inc    ebp
300042af:	78 70                	js     30004321 <_DYNAMIC+0x55>
300042b1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
300042b4:	53                   	push   ebx
300042b5:	50                   	push   eax
300042b6:	52                   	push   edx
300042b7:	49                   	dec    ecx
300042b8:	54                   	push   esp
300042b9:	45                   	inc    ebp
300042ba:	20 28                	and    BYTE PTR [eax],ch
300042bc:	42                   	inc    edx
300042bd:	65                   	gs
300042be:	72 6b                	jb     3000432b <_DYNAMIC+0x5f>
300042c0:	65                   	gs
300042c1:	6c                   	ins    BYTE PTR es:[edi],dx
300042c2:	65                   	gs
300042c3:	79 29                	jns    300042ee <_DYNAMIC+0x22>
300042c5:	00 00                	add    BYTE PTR [eax],al
	...

300042c8 <_daylight>:
300042c8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

300042cc <_DYNAMIC>:
300042cc:	19 00                	sbb    DWORD PTR [eax],eax
300042ce:	00 00                	add    BYTE PTR [eax],al
300042d0:	a8 43                	test   al,0x43
300042d2:	00 30                	add    BYTE PTR [eax],dh
300042d4:	1b 00                	sbb    eax,DWORD PTR [eax]
300042d6:	00 00                	add    BYTE PTR [eax],al
300042d8:	04 00                	add    al,0x0
300042da:	00 00                	add    BYTE PTR [eax],al
300042dc:	1a 00                	sbb    al,BYTE PTR [eax]
300042de:	00 00                	add    BYTE PTR [eax],al
300042e0:	ac                   	lods   al,BYTE PTR ds:[esi]
300042e1:	43                   	inc    ebx
300042e2:	00 30                	add    BYTE PTR [eax],dh
300042e4:	1c 00                	sbb    al,0x0
300042e6:	00 00                	add    BYTE PTR [eax],al
300042e8:	04 00                	add    al,0x0
300042ea:	00 00                	add    BYTE PTR [eax],al
300042ec:	04 00                	add    al,0x0
300042ee:	00 00                	add    BYTE PTR [eax],al
300042f0:	84 3a                	test   BYTE PTR [edx],bh
300042f2:	00 30                	add    BYTE PTR [eax],dh
300042f4:	05 00 00 00 14       	add    eax,0x14000000
300042f9:	39 00                	cmp    DWORD PTR [eax],eax
300042fb:	30 06                	xor    BYTE PTR [esi],al
300042fd:	00 00                	add    BYTE PTR [eax],al
300042ff:	00 e4                	add    ah,ah
30004301:	35 00 30 0a 00       	xor    eax,0xa3000
30004306:	00 00                	add    BYTE PTR [eax],al
30004308:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004309:	01 00                	add    DWORD PTR [eax],eax
3000430b:	00 0b                	add    BYTE PTR [ebx],cl
3000430d:	00 00                	add    BYTE PTR [eax],al
3000430f:	00 10                	add    BYTE PTR [eax],dl
30004311:	00 00                	add    BYTE PTR [eax],al
30004313:	00 03                	add    BYTE PTR [ebx],al
30004315:	00 00                	add    BYTE PTR [eax],al
30004317:	00 98 43 00 30 02    	add    BYTE PTR [eax+0x2300043],bl
3000431d:	00 00                	add    BYTE PTR [eax],al
3000431f:	00 08                	add    BYTE PTR [eax],cl
30004321:	00 00                	add    BYTE PTR [eax],al
30004323:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
30004326:	00 00                	add    BYTE PTR [eax],al
30004328:	11 00                	adc    DWORD PTR [eax],eax
3000432a:	00 00                	add    BYTE PTR [eax],al
3000432c:	17                   	pop    ss
3000432d:	00 00                	add    BYTE PTR [eax],al
3000432f:	00 18                	add    BYTE PTR [eax],bl
30004331:	42                   	inc    edx
30004332:	00 30                	add    BYTE PTR [eax],dh
30004334:	11 00                	adc    DWORD PTR [eax],eax
30004336:	00 00                	add    BYTE PTR [eax],al
30004338:	60                   	pusha  
30004339:	41                   	inc    ecx
3000433a:	00 30                	add    BYTE PTR [eax],dh
3000433c:	12 00                	adc    al,BYTE PTR [eax]
3000433e:	00 00                	add    BYTE PTR [eax],al
30004340:	b8 00 00 00 13       	mov    eax,0x13000000
30004345:	00 00                	add    BYTE PTR [eax],al
30004347:	00 08                	add    BYTE PTR [eax],cl
30004349:	00 00                	add    BYTE PTR [eax],al
3000434b:	00 16                	add    BYTE PTR [esi],dl
3000434d:	00 00                	add    BYTE PTR [eax],al
3000434f:	00 00                	add    BYTE PTR [eax],al
30004351:	00 00                	add    BYTE PTR [eax],al
30004353:	00 fa                	add    dl,bh
30004355:	ff                   	(bad)  
30004356:	ff 6f 08             	jmp    FWORD PTR [edi+0x8]
	...

Disassembly of section .got:

30004384 <.got>:
30004384:	b8 43 00 30 bc       	mov    eax,0xbc300043
30004389:	43                   	inc    ebx
3000438a:	00 30                	add    BYTE PTR [eax],dh
3000438c:	c0 43 00 30          	rol    BYTE PTR [ebx+0x0],0x30
30004390:	c4 43 00             	les    eax,FWORD PTR [ebx+0x0]
30004393:	30 c8                	xor    al,cl
30004395:	43                   	inc    ebx
30004396:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .got.plt:

30004398 <_GLOBAL_OFFSET_TABLE_>:
30004398:	cc                   	int3   
30004399:	42                   	inc    edx
3000439a:	00 30                	add    BYTE PTR [eax],dh
	...
300043a4:	96                   	xchg   esi,eax
300043a5:	2a 00                	sub    al,BYTE PTR [eax]
300043a7:	30                   	.byte 0x30

Disassembly of section .init_array:

300043a8 <.init_array>:
300043a8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

300043ac <.fini_array>:
300043ac:	5b                   	pop    ebx
300043ad:	0a 00                	or     al,BYTE PTR [eax]
300043af:	30                   	.byte 0x30

Disassembly of section .data.rel.local:

300043b0 <_tzname>:
300043b0:	e0 40                	loopne 300043f2 <ticksToWait+0x2>
300043b2:	00 30                	add    BYTE PTR [eax],dh
300043b4:	e0 40                	loopne 300043f6 <ticksToWait+0x6>
300043b6:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .bss:

300043b8 <heapEnd>:
300043b8:	00 00                	add    BYTE PTR [eax],al
	...

300043bc <heapBase>:
300043bc:	00 00                	add    BYTE PTR [eax],al
	...

300043c0 <heapCurr>:
300043c0:	00 00                	add    BYTE PTR [eax],al
	...

300043c4 <processEnvp>:
300043c4:	00 00                	add    BYTE PTR [eax],al
	...

300043c8 <libcTZ>:
300043c8:	00 00                	add    BYTE PTR [eax],al
	...

300043cc <lasts.1352>:
300043cc:	00 00                	add    BYTE PTR [eax],al
	...

300043d0 <libcInitialized>:
300043d0:	00 00                	add    BYTE PTR [eax],al
	...

300043d4 <fops>:
	...

300043dc <console_file>:
	...

300043ec <_dstbias>:
300043ec:	00 00                	add    BYTE PTR [eax],al
	...

300043f0 <ticksToWait>:
300043f0:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	f4                   	hlt    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 72 00             	add    BYTE PTR [edx+0x0],dh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	9b                   	fwait
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	95                   	xchg   ebp,eax
      8c:	00 00                	add    BYTE PTR [eax],al
      8e:	00 02                	add    BYTE PTR [edx],al
      90:	04 07                	add    al,0x7
      92:	39 00                	cmp    DWORD PTR [eax],eax
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      99:	e1 00                	loope  9b <sysEnter_Vector-0x12ff65>
      9b:	00 00                	add    BYTE PTR [eax],al
      9d:	05 04 25 00 00       	add    eax,0x2504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 00                	and    DWORD PTR [eax],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 08                	add    DWORD PTR [eax],ecx
      aa:	9d                   	popf   
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	30 38                	xor    BYTE PTR [eax],bh
      b3:	00 00                	add    BYTE PTR [eax],al
      b5:	00 01                	add    BYTE PTR [ecx],al
      b7:	9c                   	pushf  
      b8:	d5 00                	aad    0x0
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 a7    	add    dl,BYTE PTR [ecx-0x58f8fffc]
      d7:	00 00                	add    BYTE PTR [eax],al
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	30 38                	xor    BYTE PTR [eax],bh
      e5:	00 00                	add    BYTE PTR [eax],al
      e7:	00 01                	add    BYTE PTR [ecx],al
      e9:	9c                   	pushf  
      ea:	07                   	pop    es
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 08                	add    BYTE PTR [eax],cl
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
     117:	30 09                	xor    BYTE PTR [ecx],cl
     119:	af                   	scas   eax,DWORD PTR es:[edi]
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 02                	add    BYTE PTR [edx],al
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 c0 43 00       	add    eax,0x43c003
     128:	30 09                	xor    BYTE PTR [ecx],cl
     12a:	5b                   	pop    ebx
     12b:	01 00                	add    DWORD PTR [eax],eax
     12d:	00 02                	add    BYTE PTR [edx],al
     12f:	36                   	ss
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
     139:	30 09                	xor    BYTE PTR [ecx],cl
     13b:	54                   	push   esp
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 02                	add    BYTE PTR [edx],al
     140:	37                   	aaa    
     141:	56                   	push   esi
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
     14a:	30 09                	xor    BYTE PTR [ecx],cl
     14c:	28 00                	sub    BYTE PTR [eax],al
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	03 45 5c             	add    eax,DWORD PTR [ebp+0x5c]
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
     15b:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	f4                   	hlt    
     170:	00 00                	add    BYTE PTR [eax],al
     172:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     17a:	00 00                	add    BYTE PTR [eax],al
     17c:	70 00                	jo     17e <sysEnter_Vector-0x12fe82>
     17e:	00 30                	add    BYTE PTR [eax],dh
     180:	aa                   	stos   BYTE PTR es:[edi],al
     181:	00 00                	add    BYTE PTR [eax],al
     183:	00 d4                	add    ah,dl
     185:	00 00                	add    BYTE PTR [eax],al
     187:	00 02                	add    BYTE PTR [edx],al
     189:	01 06                	add    DWORD PTR [esi],eax
     18b:	64 00 00             	add    BYTE PTR fs:[eax],al
     18e:	00 02                	add    BYTE PTR [edx],al
     190:	01 06                	add    DWORD PTR [esi],eax
     192:	5d                   	pop    ebp
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1b0:	00 00                	add    BYTE PTR [eax],al
     1b2:	02 02                	add    al,BYTE PTR [edx]
     1b4:	07                   	pop    es
     1b5:	0e                   	push   cs
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	34 00                	xor    al,0x0
     1d0:	00 00                	add    BYTE PTR [eax],al
     1d2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1d9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1dc:	9b                   	fwait
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	00 02                	add    BYTE PTR [edx],al
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	95                   	xchg   ebp,eax
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	00 02                	add    BYTE PTR [edx],al
     1e8:	04 07                	add    al,0x7
     1ea:	39 00                	cmp    DWORD PTR [eax],eax
     1ec:	00 00                	add    BYTE PTR [eax],al
     1ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1f1:	e1 00                	loope  1f3 <sysEnter_Vector-0x12fe0d>
     1f3:	00 00                	add    BYTE PTR [eax],al
     1f5:	05 04 25 00 00       	add    eax,0x2504
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	93                   	xchg   ebx,eax
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 30                	add    BYTE PTR [eax],dh
     20a:	55                   	push   ebp
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 01                	add    BYTE PTR [ecx],al
     20f:	9c                   	pushf  
     210:	ef                   	out    dx,eax
     211:	00 00                	add    BYTE PTR [eax],al
     213:	00 07                	add    BYTE PTR [edi],al
     215:	74 0a                	je     221 <sysEnter_Vector-0x12fddf>
     217:	00 00                	add    BYTE PTR [eax],al
     219:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     21f:	02 91 00 07 63 01    	add    dl,BYTE PTR [ecx+0x1630700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	9b                   	fwait
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	30 55 00             	xor    BYTE PTR [ebp+0x0],dl
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 9c 46 01 00 00 07 	add    DWORD PTR [esi+eax*2+0x7000001],ebx
     26c:	74 0a                	je     278 <sysEnter_Vector-0x12fd88>
     26e:	00 00                	add    BYTE PTR [eax],al
     270:	01 33                	add    DWORD PTR [ebx],esi
     272:	92                   	xchg   edx,eax
     273:	00 00                	add    BYTE PTR [eax],al
     275:	00 02                	add    BYTE PTR [edx],al
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	63 01                	arpl   WORD PTR [ecx],ax
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
     2b9:	30 09                	xor    BYTE PTR [ecx],cl
     2bb:	af                   	scas   eax,DWORD PTR es:[edi]
     2bc:	00 00                	add    BYTE PTR [eax],al
     2be:	00 02                	add    BYTE PTR [edx],al
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 c0 43 00       	add    eax,0x43c003
     2ca:	30 09                	xor    BYTE PTR [ecx],cl
     2cc:	5b                   	pop    ebx
     2cd:	01 00                	add    DWORD PTR [eax],eax
     2cf:	00 02                	add    BYTE PTR [edx],al
     2d1:	36                   	ss
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
     2db:	30 09                	xor    BYTE PTR [ecx],cl
     2dd:	54                   	push   esp
     2de:	00 00                	add    BYTE PTR [eax],al
     2e0:	00 02                	add    BYTE PTR [edx],al
     2e2:	37                   	aaa    
     2e3:	56                   	push   esi
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
     2ec:	30 09                	xor    BYTE PTR [ecx],cl
     2ee:	28 00                	sub    BYTE PTR [eax],al
     2f0:	00 00                	add    BYTE PTR [eax],al
     2f2:	03 45 9b             	add    eax,DWORD PTR [ebp-0x65]
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
     2fd:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	f4                   	hlt    
     312:	00 00                	add    BYTE PTR [eax],al
     314:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     31c:	00 00                	add    BYTE PTR [eax],al
     31e:	1c 01                	sbb    al,0x1
     320:	00 30                	add    BYTE PTR [eax],dh
     322:	97                   	xchg   edi,eax
     323:	00 00                	add    BYTE PTR [eax],al
     325:	00 db                	add    bl,bl
     327:	01 00                	add    DWORD PTR [eax],eax
     329:	00 02                	add    BYTE PTR [edx],al
     32b:	01 06                	add    DWORD PTR [esi],eax
     32d:	64 00 00             	add    BYTE PTR fs:[eax],al
     330:	00 02                	add    BYTE PTR [edx],al
     332:	01 06                	add    DWORD PTR [esi],eax
     334:	5d                   	pop    ebp
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     352:	00 00                	add    BYTE PTR [eax],al
     354:	02 02                	add    al,BYTE PTR [edx]
     356:	07                   	pop    es
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	3e 00 00             	add    BYTE PTR ds:[eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	34 00                	xor    al,0x0
     372:	00 00                	add    BYTE PTR [eax],al
     374:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     37b:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     37e:	9b                   	fwait
     37f:	00 00                	add    BYTE PTR [eax],al
     381:	00 02                	add    BYTE PTR [edx],al
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	95                   	xchg   ebp,eax
     386:	00 00                	add    BYTE PTR [eax],al
     388:	00 02                	add    BYTE PTR [edx],al
     38a:	04 07                	add    al,0x7
     38c:	39 00                	cmp    DWORD PTR [eax],eax
     38e:	00 00                	add    BYTE PTR [eax],al
     390:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     393:	e1 00                	loope  395 <sysEnter_Vector-0x12fc6b>
     395:	00 00                	add    BYTE PTR [eax],al
     397:	05 04 25 00 00       	add    eax,0x2504
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 30                	add    BYTE PTR [eax],dh
     3ac:	97                   	xchg   edi,eax
     3ad:	00 00                	add    BYTE PTR [eax],al
     3af:	00 01                	add    BYTE PTR [ecx],al
     3b1:	9c                   	pushf  
     3b2:	e9 00 00 00 07       	jmp    70003b7 <sysEnter_Vector+0x6ed03b7>
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	d3 01                	rol    DWORD PTR [ecx],cl
     3d3:	00 00                	add    BYTE PTR [eax],al
     3d5:	01 2a                	add    DWORD PTR [edx],ebp
     3d7:	92                   	xchg   edx,eax
     3d8:	00 00                	add    BYTE PTR [eax],al
     3da:	00 05 03 cc 43 00    	add    BYTE PTR ds:0x43cc03,al
     3e0:	30 0a                	xor    BYTE PTR [edx],cl
     3e2:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     3e5:	01 2b                	add    DWORD PTR [ebx],ebp
     3e7:	3a 00                	cmp    al,BYTE PTR [eax]
     3e9:	00 00                	add    BYTE PTR [eax],al
     3eb:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     3ee:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
     3fe:	30 0b                	xor    BYTE PTR [ebx],cl
     400:	af                   	scas   eax,DWORD PTR es:[edi]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	00 02                	add    BYTE PTR [edx],al
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 c0 43 00       	add    eax,0x43c003
     40f:	30 0b                	xor    BYTE PTR [ebx],cl
     411:	5b                   	pop    ebx
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 02                	add    BYTE PTR [edx],al
     416:	36                   	ss
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
     420:	30 0b                	xor    BYTE PTR [ebx],cl
     422:	54                   	push   esp
     423:	00 00                	add    BYTE PTR [eax],al
     425:	00 02                	add    BYTE PTR [edx],al
     427:	37                   	aaa    
     428:	56                   	push   esi
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
     431:	30 0b                	xor    BYTE PTR [ebx],cl
     433:	28 00                	sub    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	03 45 3e             	add    eax,DWORD PTR [ebp+0x3e]
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
     442:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	f4                   	hlt    
     457:	00 00                	add    BYTE PTR [eax],al
     459:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     461:	00 00                	add    BYTE PTR [eax],al
     463:	b4 01                	mov    ah,0x1
     465:	00 30                	add    BYTE PTR [eax],dh
     467:	49                   	dec    ecx
     468:	02 00                	add    al,BYTE PTR [eax]
     46a:	00 b3 02 00 00 02    	add    BYTE PTR [ebx+0x2000002],dh
     470:	01 06                	add    DWORD PTR [esi],eax
     472:	64 00 00             	add    BYTE PTR fs:[eax],al
     475:	00 02                	add    BYTE PTR [edx],al
     477:	01 06                	add    DWORD PTR [esi],eax
     479:	5d                   	pop    ebp
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     497:	00 00                	add    BYTE PTR [eax],al
     499:	02 02                	add    al,BYTE PTR [edx]
     49b:	07                   	pop    es
     49c:	0e                   	push   cs
     49d:	00 00                	add    BYTE PTR [eax],al
     49f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	34 00                	xor    al,0x0
     4b7:	00 00                	add    BYTE PTR [eax],al
     4b9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4c0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4c3:	9b                   	fwait
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	00 02                	add    BYTE PTR [edx],al
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	95                   	xchg   ebp,eax
     4cb:	00 00                	add    BYTE PTR [eax],al
     4cd:	00 02                	add    BYTE PTR [edx],al
     4cf:	04 07                	add    al,0x7
     4d1:	39 00                	cmp    DWORD PTR [eax],eax
     4d3:	00 00                	add    BYTE PTR [eax],al
     4d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4d8:	e1 00                	loope  4da <sysEnter_Vector-0x12fb26>
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	05 04 25 00 00       	add    eax,0x2504
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	fc                   	cld    
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 01                	add    BYTE PTR [ecx],al
     4e8:	09 b4 01 00 30 77 00 	or     DWORD PTR [ecx+eax*1+0x773000],esi
     4ef:	00 00                	add    BYTE PTR [eax],al
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 30    	add    DWORD PTR ds:0x3000022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 e0    	add    dl,BYTE PTR [ecx-0x1ff9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 30       	and    eax,0x300002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a f7    	add    dl,BYTE PTR [ecx-0x8f5ff98]
     5ba:	01 00                	add    DWORD PTR [eax],eax
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 30                	add    BYTE PTR [eax],dh
     5f2:	40                   	inc    eax
     5f3:	00 00                	add    BYTE PTR [eax],al
     5f5:	00 08                	add    BYTE PTR [eax],cl
     5f7:	69 00 01 3c 3a 00    	imul   eax,DWORD PTR [eax],0x3a3c01
     5fd:	00 00                	add    BYTE PTR [eax],al
     5ff:	02 91 70 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000070]
     605:	4b                   	dec    ebx
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
     614:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
     617:	00 00                	add    BYTE PTR [eax],al
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 c0 43 00       	add    eax,0x43c003
     625:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
     628:	01 00                	add    DWORD PTR [eax],eax
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
     636:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
     639:	00 00                	add    BYTE PTR [eax],al
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	56                   	push   esi
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
     647:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	45                   	inc    ebp
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
     658:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	b2 01                	mov    dl,0x1
     662:	00 00                	add    BYTE PTR [eax],al
     664:	04 00                	add    al,0x0
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	f4                   	hlt    
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     672:	02 00                	add    al,BYTE PTR [eax]
     674:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     677:	00 00                	add    BYTE PTR [eax],al
     679:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     67c:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	c7 03 00 00 02 01    	mov    DWORD PTR [ebx],0x1020000
     687:	06                   	push   es
     688:	64 00 00             	add    BYTE PTR fs:[eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	01 06                	add    DWORD PTR [esi],eax
     68f:	5d                   	pop    ebp
     690:	00 00                	add    BYTE PTR [eax],al
     692:	00 02                	add    BYTE PTR [edx],al
     694:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     69a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6a1:	02 08                	add    cl,BYTE PTR [eax]
     6a3:	05 00 00 00 00       	add    eax,0x0
     6a8:	02 01                	add    al,BYTE PTR [ecx]
     6aa:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	02 02                	add    al,BYTE PTR [edx]
     6b1:	07                   	pop    es
     6b2:	0e                   	push   cs
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6bd:	61                   	popa   
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	04 07                	add    al,0x7
     6c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	08 07                	or     BYTE PTR [edi],al
     6cb:	34 00                	xor    al,0x0
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6d9:	9b                   	fwait
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	01 02                	add    DWORD PTR [edx],eax
     6e0:	95                   	xchg   ebp,eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	00 02                	add    BYTE PTR [edx],al
     6e5:	04 07                	add    al,0x7
     6e7:	39 00                	cmp    DWORD PTR [eax],eax
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     6ee:	e1 00                	loope  6f0 <sysEnter_Vector-0x12f910>
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	05 04 25 00 00       	add    eax,0x2504
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	25 02 00 00 01       	and    eax,0x1000002
     6fe:	09 3a                	or     DWORD PTR [edx],edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 00                	add    BYTE PTR [eax],al
     704:	04 00                	add    al,0x0
     706:	30 aa 00 00 00 01    	xor    BYTE PTR [edx+0x1000000],ch
     70c:	9c                   	pushf  
     70d:	e6 00                	out    0x0,al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	07                   	pop    es
     712:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     715:	00 01                	add    BYTE PTR [ecx],al
     717:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     71d:	91                   	xchg   ecx,eax
     71e:	00 07                	add    BYTE PTR [edi],al
     720:	0a 02                	or     al,BYTE PTR [edx]
     722:	00 00                	add    BYTE PTR [eax],al
     724:	01 09                	add    DWORD PTR [ecx],ecx
     726:	92                   	xchg   edx,eax
     727:	00 00                	add    BYTE PTR [eax],al
     729:	00 02                	add    BYTE PTR [edx],al
     72b:	91                   	xchg   ecx,eax
     72c:	04 08                	add    al,0x8
     72e:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     731:	30 8e 00 00 00 09    	xor    BYTE PTR [esi+0x9000000],cl
     737:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     73a:	00 01                	add    BYTE PTR [ecx],al
     73c:	0b 3a                	or     edi,DWORD PTR [edx]
     73e:	00 00                	add    BYTE PTR [eax],al
     740:	00 02                	add    BYTE PTR [edx],al
     742:	91                   	xchg   ecx,eax
     743:	6c                   	ins    BYTE PTR es:[edi],dx
     744:	00 00                	add    BYTE PTR [eax],al
     746:	0a 1e                	or     bl,BYTE PTR [esi]
     748:	02 00                	add    al,BYTE PTR [eax]
     74a:	00 01                	add    BYTE PTR [ecx],al
     74c:	14 aa                	adc    al,0xaa
     74e:	04 00                	add    al,0x0
     750:	30 c1                	xor    cl,al
     752:	01 00                	add    DWORD PTR [eax],eax
     754:	00 01                	add    BYTE PTR [ecx],al
     756:	9c                   	pushf  
     757:	5a                   	pop    edx
     758:	01 00                	add    DWORD PTR [eax],eax
     75a:	00 07                	add    BYTE PTR [edi],al
     75c:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     75f:	00 01                	add    BYTE PTR [ecx],al
     761:	14 92                	adc    al,0x92
     763:	00 00                	add    BYTE PTR [eax],al
     765:	00 02                	add    BYTE PTR [edx],al
     767:	91                   	xchg   ecx,eax
     768:	00 07                	add    BYTE PTR [edi],al
     76a:	0a 02                	or     al,BYTE PTR [edx]
     76c:	00 00                	add    BYTE PTR [eax],al
     76e:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     771:	00 00                	add    BYTE PTR [eax],al
     773:	00 02                	add    BYTE PTR [edx],al
     775:	91                   	xchg   ecx,eax
     776:	04 0b                	add    al,0xb
     778:	10 02                	adc    BYTE PTR [edx],al
     77a:	00 00                	add    BYTE PTR [eax],al
     77c:	01 16                	add    DWORD PTR [esi],edx
     77e:	56                   	push   esi
     77f:	00 00                	add    BYTE PTR [eax],al
     781:	00 02                	add    BYTE PTR [edx],al
     783:	91                   	xchg   ecx,eax
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	0c c3                	or     al,0xc3
     787:	04 00                	add    al,0x0
     789:	30 eb                	xor    bl,ch
     78b:	00 00                	add    BYTE PTR [eax],al
     78d:	00 41 01             	add    BYTE PTR [ecx+0x1],al
     790:	00 00                	add    BYTE PTR [eax],al
     792:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     795:	74 00                	je     797 <sysEnter_Vector-0x12f869>
     797:	01 18                	add    DWORD PTR [eax],ebx
     799:	3a 00                	cmp    al,BYTE PTR [eax]
     79b:	00 00                	add    BYTE PTR [eax],al
     79d:	02 91 68 00 08 ae    	add    dl,BYTE PTR [ecx-0x51f7ff98]
     7a3:	05 00 30 b8 00       	add    eax,0xb83000
     7a8:	00 00                	add    BYTE PTR [eax],al
     7aa:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     7ad:	74 00                	je     7af <sysEnter_Vector-0x12f851>
     7af:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	00 02                	add    BYTE PTR [edx],al
     7b6:	91                   	xchg   ecx,eax
     7b7:	64 00 00             	add    BYTE PTR fs:[eax],al
     7ba:	0d 4b 00 00 00       	or     eax,0x4b
     7bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
     7ca:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
     7d0:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     7d6:	05 03 c0 43 00       	add    eax,0x43c003
     7db:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
     7e1:	02 36                	add    dh,BYTE PTR [esi]
     7e3:	56                   	push   esi
     7e4:	00 00                	add    BYTE PTR [eax],al
     7e6:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
     7ec:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
     7f2:	02 37                	add    dh,BYTE PTR [edi]
     7f4:	56                   	push   esi
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
     7fd:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
     803:	03 45 af             	add    eax,DWORD PTR [ebp-0x51]
     806:	01 00                	add    DWORD PTR [eax],eax
     808:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
     80e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     814:	00 00                	add    BYTE PTR [eax],al
     816:	a2 02 00 00 04       	mov    ds:0x4000002,al
     81b:	00 3c 03             	add    BYTE PTR [ebx+eax*1],bh
     81e:	00 00                	add    BYTE PTR [eax],al
     820:	04 01                	add    al,0x1
     822:	f4                   	hlt    
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 0c 8e             	add    BYTE PTR [esi+ecx*4],cl
     828:	02 00                	add    al,BYTE PTR [eax]
     82a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	06                   	push   es
     831:	00 30                	add    BYTE PTR [eax],dh
     833:	bd 00 00 00 d1       	mov    ebp,0xd1000000
     838:	04 00                	add    al,0x0
     83a:	00 02                	add    BYTE PTR [edx],al
     83c:	01 06                	add    DWORD PTR [esi],eax
     83e:	64 00 00             	add    BYTE PTR fs:[eax],al
     841:	00 02                	add    BYTE PTR [edx],al
     843:	01 06                	add    DWORD PTR [esi],eax
     845:	5d                   	pop    ebp
     846:	00 00                	add    BYTE PTR [eax],al
     848:	00 02                	add    BYTE PTR [edx],al
     84a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     850:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     857:	02 08                	add    cl,BYTE PTR [eax]
     859:	05 00 00 00 00       	add    eax,0x0
     85e:	02 01                	add    al,BYTE PTR [ecx]
     860:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	02 02                	add    al,BYTE PTR [edx]
     867:	07                   	pop    es
     868:	0e                   	push   cs
     869:	00 00                	add    BYTE PTR [eax],al
     86b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     873:	61                   	popa   
     874:	00 00                	add    BYTE PTR [eax],al
     876:	00 02                	add    BYTE PTR [edx],al
     878:	04 07                	add    al,0x7
     87a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     87d:	00 02                	add    BYTE PTR [edx],al
     87f:	08 07                	or     BYTE PTR [edi],al
     881:	34 00                	xor    al,0x0
     883:	00 00                	add    BYTE PTR [eax],al
     885:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     88c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     88f:	9b                   	fwait
     890:	00 00                	add    BYTE PTR [eax],al
     892:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
     898:	00 06                	add    BYTE PTR [esi],al
     89a:	25 00 00 00 02       	and    eax,0x2000000
     89f:	01 02                	add    DWORD PTR [edx],eax
     8a1:	95                   	xchg   ebp,eax
     8a2:	00 00                	add    BYTE PTR [eax],al
     8a4:	00 07                	add    BYTE PTR [edi],al
     8a6:	f4                   	hlt    
     8a7:	02 00                	add    al,BYTE PTR [eax]
     8a9:	00 04 61             	add    BYTE PTR [ecx+eiz*2],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 05 15 44 01 00    	add    BYTE PTR ds:0x14415,al
     8b4:	00 08                	add    BYTE PTR [eax],cl
     8b6:	59                   	pop    ecx
     8b7:	03 00                	add    eax,DWORD PTR [eax]
     8b9:	00 00                	add    BYTE PTR [eax],al
     8bb:	08 91 03 00 00 01    	or     BYTE PTR [ecx+0x1000003],dl
     8c1:	08 60 02             	or     BYTE PTR [eax+0x2],ah
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	02 08                	add    cl,BYTE PTR [eax]
     8c8:	e6 02                	out    0x2,al
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	03 08                	add    ecx,DWORD PTR [eax]
     8ce:	53                   	push   ebx
     8cf:	02 00                	add    al,BYTE PTR [eax]
     8d1:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     8d4:	ab                   	stos   DWORD PTR es:[edi],eax
     8d5:	03 00                	add    eax,DWORD PTR [eax]
     8d7:	00 05 08 0a 03 00    	add    BYTE PTR ds:0x30a08,al
     8dd:	00 06                	add    BYTE PTR [esi],al
     8df:	08 e1                	or     cl,ah
     8e1:	03 00                	add    eax,DWORD PTR [eax]
     8e3:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     8e6:	4c                   	dec    esp
     8e7:	03 00                	add    eax,DWORD PTR [eax]
     8e9:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     8ec:	f0 03 00             	lock add eax,DWORD PTR [eax]
     8ef:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     8f2:	d2 02                	rol    BYTE PTR [edx],cl
     8f4:	00 00                	add    BYTE PTR [eax],al
     8f6:	97                   	xchg   edi,eax
     8f7:	09 69 03             	or     DWORD PTR [ecx+0x3],ebp
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	63 01                	arpl   WORD PTR [ecx],ax
     8fe:	09 3f                	or     DWORD PTR [edi],edi
     900:	03 00                	add    eax,DWORD PTR [eax]
     902:	00 64 01 09          	add    BYTE PTR [ecx+eax*1+0x9],ah
     906:	d3 03                	rol    DWORD PTR [ebx],cl
     908:	00 00                	add    BYTE PTR [eax],al
     90a:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
     90d:	b4 02                	mov    ah,0x2
     90f:	00 00                	add    BYTE PTR [eax],al
     911:	66 01 09             	add    WORD PTR [ecx],cx
     914:	08 04 00             	or     BYTE PTR [eax+eax*1],al
     917:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     91a:	09 17                	or     DWORD PTR [edi],edx
     91c:	03 00                	add    eax,DWORD PTR [eax]
     91e:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     921:	09 99 02 00 00 69    	or     DWORD PTR [ecx+0x69000002],ebx
     927:	01 09                	add    DWORD PTR [ecx],ecx
     929:	80 03 00             	add    BYTE PTR [ebx],0x0
     92c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     92f:	09 c2                	or     edx,eax
     931:	02 00                	add    al,BYTE PTR [eax]
     933:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     936:	09 b9 03 00 00 00    	or     DWORD PTR [ecx+0x3],edi
     93c:	03 09                	add    ecx,DWORD PTR [ecx]
     93e:	24 03                	and    al,0x3
     940:	00 00                	add    BYTE PTR [eax],al
     942:	01 03                	add    DWORD PTR [ebx],eax
     944:	09 a8 02 00 00 02    	or     DWORD PTR [eax+0x2000002],ebp
     94a:	03 09                	add    ecx,DWORD PTR [ecx]
     94c:	6d                   	ins    DWORD PTR es:[edi],dx
     94d:	02 00                	add    al,BYTE PTR [eax]
     94f:	00 03                	add    BYTE PTR [ebx],al
     951:	03 09                	add    ecx,DWORD PTR [ecx]
     953:	7d 02                	jge    957 <sysEnter_Vector-0x12f6a9>
     955:	00 00                	add    BYTE PTR [eax],al
     957:	04 03                	add    al,0x3
     959:	00 02                	add    BYTE PTR [edx],al
     95b:	04 07                	add    al,0x7
     95d:	39 00                	cmp    DWORD PTR [eax],eax
     95f:	00 00                	add    BYTE PTR [eax],al
     961:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     964:	e1 00                	loope  966 <sysEnter_Vector-0x12f69a>
     966:	00 00                	add    BYTE PTR [eax],al
     968:	0a 04 05 04 25 00 00 	or     al,BYTE PTR [eax*1+0x2504]
     96f:	00 0b                	add    BYTE PTR [ebx],cl
     971:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     974:	00 01                	add    BYTE PTR [ecx],al
     976:	09 52 01             	or     DWORD PTR [edx+0x1],edx
     979:	00 00                	add    BYTE PTR [eax],al
     97b:	6c                   	ins    BYTE PTR es:[edi],dx
     97c:	06                   	push   es
     97d:	00 30                	add    BYTE PTR [eax],dh
     97f:	2d 00 00 00 01       	sub    eax,0x1000000
     984:	9c                   	pushf  
     985:	90                   	nop
     986:	01 00                	add    DWORD PTR [eax],eax
     988:	00 0c 83             	add    BYTE PTR [ebx+eax*4],cl
     98b:	08 00                	or     BYTE PTR [eax],al
     98d:	00 01                	add    BYTE PTR [ecx],al
     98f:	09 54 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edx
     993:	00 02                	add    BYTE PTR [edx],al
     995:	91                   	xchg   ecx,eax
     996:	00 0c 31             	add    BYTE PTR [ecx+esi*1],cl
     999:	08 00                	or     BYTE PTR [eax],al
     99b:	00 01                	add    BYTE PTR [ecx],al
     99d:	09 7d 00             	or     DWORD PTR [ebp+0x0],edi
     9a0:	00 00                	add    BYTE PTR [eax],al
     9a2:	02 91 04 00 0d 4d    	add    dl,BYTE PTR [ecx+0x4d0d0004]
     9a8:	02 00                	add    al,BYTE PTR [eax]
     9aa:	00 01                	add    BYTE PTR [ecx],al
     9ac:	0e                   	push   cs
     9ad:	99                   	cdq    
     9ae:	06                   	push   es
     9af:	00 30                	add    BYTE PTR [eax],dh
     9b1:	2a 00                	sub    al,BYTE PTR [eax]
     9b3:	00 00                	add    BYTE PTR [eax],al
     9b5:	01 9c b4 01 00 00 0c 	add    DWORD PTR [esp+esi*4+0xc000001],ebx
     9bc:	c7 03 00 00 01 0e    	mov    DWORD PTR [ebx],0xe010000
     9c2:	52                   	push   edx
     9c3:	01 00                	add    DWORD PTR [eax],eax
     9c5:	00 02                	add    BYTE PTR [edx],al
     9c7:	91                   	xchg   ecx,eax
     9c8:	00 00                	add    BYTE PTR [eax],al
     9ca:	0b 05 03 00 00 01    	or     eax,DWORD PTR ds:0x1000003
     9d0:	13 3a                	adc    edi,DWORD PTR [edx]
     9d2:	00 00                	add    BYTE PTR [eax],al
     9d4:	00 c3                	add    bl,al
     9d6:	06                   	push   es
     9d7:	00 30                	add    BYTE PTR [eax],dh
     9d9:	35 00 00 00 01       	xor    eax,0x1000000
     9de:	9c                   	pushf  
     9df:	06                   	push   es
     9e0:	02 00                	add    al,BYTE PTR [eax]
     9e2:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
     9e5:	03 00                	add    eax,DWORD PTR [eax]
     9e7:	00 01                	add    BYTE PTR [ecx],al
     9e9:	13 52 01             	adc    edx,DWORD PTR [edx+0x1]
     9ec:	00 00                	add    BYTE PTR [eax],al
     9ee:	02 91 00 0c a4 03    	add    dl,BYTE PTR [ecx+0x3a40c00]
     9f4:	00 00                	add    BYTE PTR [eax],al
     9f6:	01 13                	add    DWORD PTR [ebx],edx
     9f8:	52                   	push   edx
     9f9:	01 00                	add    DWORD PTR [eax],eax
     9fb:	00 02                	add    BYTE PTR [edx],al
     9fd:	91                   	xchg   ecx,eax
     9fe:	04 0c                	add    al,0xc
     a00:	ce                   	into   
     a01:	03 00                	add    eax,DWORD PTR [eax]
     a03:	00 01                	add    BYTE PTR [ecx],al
     a05:	13 3a                	adc    edi,DWORD PTR [edx]
     a07:	00 00                	add    BYTE PTR [eax],al
     a09:	00 02                	add    BYTE PTR [edx],al
     a0b:	91                   	xchg   ecx,eax
     a0c:	08 0c fe             	or     BYTE PTR [esi+edi*8],cl
     a0f:	02 00                	add    al,BYTE PTR [eax]
     a11:	00 01                	add    BYTE PTR [ecx],al
     a13:	13 3a                	adc    edi,DWORD PTR [edx]
     a15:	00 00                	add    BYTE PTR [eax],al
     a17:	00 02                	add    BYTE PTR [edx],al
     a19:	91                   	xchg   ecx,eax
     a1a:	0c 00                	or     al,0x0
     a1c:	0b 46 02             	or     eax,DWORD PTR [esi+0x2]
     a1f:	00 00                	add    BYTE PTR [eax],al
     a21:	01 18                	add    DWORD PTR [eax],ebx
     a23:	3a 00                	cmp    al,BYTE PTR [eax]
     a25:	00 00                	add    BYTE PTR [eax],al
     a27:	f8                   	clc    
     a28:	06                   	push   es
     a29:	00 30                	add    BYTE PTR [eax],dh
     a2b:	31 00                	xor    DWORD PTR [eax],eax
     a2d:	00 00                	add    BYTE PTR [eax],al
     a2f:	01 9c 4a 02 00 00 0c 	add    DWORD PTR [edx+ecx*2+0xc000002],ebx
     a36:	83 08 00             	or     DWORD PTR [eax],0x0
     a39:	00 01                	add    BYTE PTR [ecx],al
     a3b:	18 54 01 00          	sbb    BYTE PTR [ecx+eax*1+0x0],dl
     a3f:	00 02                	add    BYTE PTR [edx],al
     a41:	91                   	xchg   ecx,eax
     a42:	00 0c a4             	add    BYTE PTR [esp+eiz*4],cl
     a45:	03 00                	add    eax,DWORD PTR [eax]
     a47:	00 01                	add    BYTE PTR [ecx],al
     a49:	18 54 01 00          	sbb    BYTE PTR [ecx+eax*1+0x0],dl
     a4d:	00 02                	add    BYTE PTR [edx],al
     a4f:	91                   	xchg   ecx,eax
     a50:	04 0c                	add    al,0xc
     a52:	33 03                	xor    eax,DWORD PTR [ebx]
     a54:	00 00                	add    BYTE PTR [eax],al
     a56:	01 18                	add    DWORD PTR [eax],ebx
     a58:	3a 00                	cmp    al,BYTE PTR [eax]
     a5a:	00 00                	add    BYTE PTR [eax],al
     a5c:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     a62:	00 00                	add    BYTE PTR [eax],al
     a64:	00 02                	add    BYTE PTR [edx],al
     a66:	34 56                	xor    al,0x56
     a68:	00 00                	add    BYTE PTR [eax],al
     a6a:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
     a70:	30 0e                	xor    BYTE PTR [esi],cl
     a72:	af                   	scas   eax,DWORD PTR es:[edi]
     a73:	00 00                	add    BYTE PTR [eax],al
     a75:	00 02                	add    BYTE PTR [edx],al
     a77:	35 56 00 00 00       	xor    eax,0x56
     a7c:	05 03 c0 43 00       	add    eax,0x43c003
     a81:	30 0e                	xor    BYTE PTR [esi],cl
     a83:	5b                   	pop    ebx
     a84:	01 00                	add    DWORD PTR [eax],eax
     a86:	00 02                	add    BYTE PTR [edx],al
     a88:	36                   	ss
     a89:	56                   	push   esi
     a8a:	00 00                	add    BYTE PTR [eax],al
     a8c:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
     a92:	30 0e                	xor    BYTE PTR [esi],cl
     a94:	54                   	push   esp
     a95:	00 00                	add    BYTE PTR [eax],al
     a97:	00 02                	add    BYTE PTR [edx],al
     a99:	37                   	aaa    
     a9a:	56                   	push   esi
     a9b:	00 00                	add    BYTE PTR [eax],al
     a9d:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
     aa3:	30 0e                	xor    BYTE PTR [esi],cl
     aa5:	28 00                	sub    BYTE PTR [eax],al
     aa7:	00 00                	add    BYTE PTR [eax],al
     aa9:	03 45 9f             	add    eax,DWORD PTR [ebp-0x61]
     aac:	02 00                	add    al,BYTE PTR [eax]
     aae:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
     ab4:	30 05 04 54 01 00    	xor    BYTE PTR ds:0x15404,al
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	a8 02                	test   al,0x2
     abe:	00 00                	add    BYTE PTR [eax],al
     ac0:	04 00                	add    al,0x0
     ac2:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     ac5:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     ac8:	f4                   	hlt    
     ac9:	00 00                	add    BYTE PTR [eax],al
     acb:	00 0c 33             	add    BYTE PTR [ebx+esi*1],cl
     ace:	04 00                	add    al,0x0
     ad0:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     ad3:	00 00                	add    BYTE PTR [eax],al
     ad5:	2c 07                	sub    al,0x7
     ad7:	00 30                	add    BYTE PTR [eax],dh
     ad9:	52                   	push   edx
     ada:	01 00                	add    DWORD PTR [eax],eax
     adc:	00 c9                	add    cl,cl
     ade:	05 00 00 02 01       	add    eax,0x1020000
     ae3:	06                   	push   es
     ae4:	64 00 00             	add    BYTE PTR fs:[eax],al
     ae7:	00 02                	add    BYTE PTR [edx],al
     ae9:	01 06                	add    DWORD PTR [esi],eax
     aeb:	5d                   	pop    ebp
     aec:	00 00                	add    BYTE PTR [eax],al
     aee:	00 02                	add    BYTE PTR [edx],al
     af0:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     af6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     afd:	02 08                	add    cl,BYTE PTR [eax]
     aff:	05 00 00 00 00       	add    eax,0x0
     b04:	02 01                	add    al,BYTE PTR [ecx]
     b06:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b09:	00 00                	add    BYTE PTR [eax],al
     b0b:	02 02                	add    al,BYTE PTR [edx]
     b0d:	07                   	pop    es
     b0e:	0e                   	push   cs
     b0f:	00 00                	add    BYTE PTR [eax],al
     b11:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b14:	00 00                	add    BYTE PTR [eax],al
     b16:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     b19:	61                   	popa   
     b1a:	00 00                	add    BYTE PTR [eax],al
     b1c:	00 02                	add    BYTE PTR [edx],al
     b1e:	04 07                	add    al,0x7
     b20:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b23:	00 02                	add    BYTE PTR [edx],al
     b25:	08 07                	or     BYTE PTR [edi],al
     b27:	34 00                	xor    al,0x0
     b29:	00 00                	add    BYTE PTR [eax],al
     b2b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b32:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b35:	9b                   	fwait
     b36:	00 00                	add    BYTE PTR [eax],al
     b38:	00 02                	add    BYTE PTR [edx],al
     b3a:	01 02                	add    DWORD PTR [edx],eax
     b3c:	95                   	xchg   ebp,eax
     b3d:	00 00                	add    BYTE PTR [eax],al
     b3f:	00 05 f4 02 00 00    	add    BYTE PTR ds:0x2f4,al
     b45:	04 61                	add    al,0x61
     b47:	00 00                	add    BYTE PTR [eax],al
     b49:	00 05 15 39 01 00    	add    BYTE PTR ds:0x13915,al
     b4f:	00 06                	add    BYTE PTR [esi],al
     b51:	59                   	pop    ecx
     b52:	03 00                	add    eax,DWORD PTR [eax]
     b54:	00 00                	add    BYTE PTR [eax],al
     b56:	06                   	push   es
     b57:	91                   	xchg   ecx,eax
     b58:	03 00                	add    eax,DWORD PTR [eax]
     b5a:	00 01                	add    BYTE PTR [ecx],al
     b5c:	06                   	push   es
     b5d:	60                   	pusha  
     b5e:	02 00                	add    al,BYTE PTR [eax]
     b60:	00 02                	add    BYTE PTR [edx],al
     b62:	06                   	push   es
     b63:	e6 02                	out    0x2,al
     b65:	00 00                	add    BYTE PTR [eax],al
     b67:	03 06                	add    eax,DWORD PTR [esi]
     b69:	53                   	push   ebx
     b6a:	02 00                	add    al,BYTE PTR [eax]
     b6c:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     b6f:	ab                   	stos   DWORD PTR es:[edi],eax
     b70:	03 00                	add    eax,DWORD PTR [eax]
     b72:	00 05 06 0a 03 00    	add    BYTE PTR ds:0x30a06,al
     b78:	00 06                	add    BYTE PTR [esi],al
     b7a:	06                   	push   es
     b7b:	e1 03                	loope  b80 <sysEnter_Vector-0x12f480>
     b7d:	00 00                	add    BYTE PTR [eax],al
     b7f:	4f                   	dec    edi
     b80:	06                   	push   es
     b81:	4c                   	dec    esp
     b82:	03 00                	add    eax,DWORD PTR [eax]
     b84:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     b87:	f0 03 00             	lock add eax,DWORD PTR [eax]
     b8a:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     b8d:	d2 02                	rol    BYTE PTR [edx],cl
     b8f:	00 00                	add    BYTE PTR [eax],al
     b91:	97                   	xchg   edi,eax
     b92:	07                   	pop    es
     b93:	69 03 00 00 63 01    	imul   eax,DWORD PTR [ebx],0x1630000
     b99:	07                   	pop    es
     b9a:	3f                   	aas    
     b9b:	03 00                	add    eax,DWORD PTR [eax]
     b9d:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
     ba1:	d3 03                	rol    DWORD PTR [ebx],cl
     ba3:	00 00                	add    BYTE PTR [eax],al
     ba5:	65 01 07             	add    DWORD PTR gs:[edi],eax
     ba8:	b4 02                	mov    ah,0x2
     baa:	00 00                	add    BYTE PTR [eax],al
     bac:	66 01 07             	add    WORD PTR [edi],ax
     baf:	08 04 00             	or     BYTE PTR [eax+eax*1],al
     bb2:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     bb5:	07                   	pop    es
     bb6:	17                   	pop    ss
     bb7:	03 00                	add    eax,DWORD PTR [eax]
     bb9:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     bbc:	07                   	pop    es
     bbd:	99                   	cdq    
     bbe:	02 00                	add    al,BYTE PTR [eax]
     bc0:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     bc3:	07                   	pop    es
     bc4:	80 03 00             	add    BYTE PTR [ebx],0x0
     bc7:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     bca:	07                   	pop    es
     bcb:	c2 02 00             	ret    0x2
     bce:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     bd1:	07                   	pop    es
     bd2:	b9 03 00 00 00       	mov    ecx,0x3
     bd7:	03 07                	add    eax,DWORD PTR [edi]
     bd9:	24 03                	and    al,0x3
     bdb:	00 00                	add    BYTE PTR [eax],al
     bdd:	01 03                	add    DWORD PTR [ebx],eax
     bdf:	07                   	pop    es
     be0:	a8 02                	test   al,0x2
     be2:	00 00                	add    BYTE PTR [eax],al
     be4:	02 03                	add    al,BYTE PTR [ebx]
     be6:	07                   	pop    es
     be7:	6d                   	ins    DWORD PTR es:[edi],dx
     be8:	02 00                	add    al,BYTE PTR [eax]
     bea:	00 03                	add    BYTE PTR [ebx],al
     bec:	03 07                	add    eax,DWORD PTR [edi]
     bee:	7d 02                	jge    bf2 <sysEnter_Vector-0x12f40e>
     bf0:	00 00                	add    BYTE PTR [eax],al
     bf2:	04 03                	add    al,0x3
     bf4:	00 02                	add    BYTE PTR [edx],al
     bf6:	04 07                	add    al,0x7
     bf8:	39 00                	cmp    DWORD PTR [eax],eax
     bfa:	00 00                	add    BYTE PTR [eax],al
     bfc:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     bff:	e1 00                	loope  c01 <sysEnter_Vector-0x12f3ff>
     c01:	00 00                	add    BYTE PTR [eax],al
     c03:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     c0a:	62 04 00             	bound  eax,QWORD PTR [eax+eax*1]
     c0d:	00 01                	add    BYTE PTR [ecx],al
     c0f:	0f 2c 07             	cvttps2pi mm0,QWORD PTR [edi]
     c12:	00 30                	add    BYTE PTR [eax],dh
     c14:	26 00 00             	add    BYTE PTR es:[eax],al
     c17:	00 01                	add    BYTE PTR [ecx],al
     c19:	9c                   	pushf  
     c1a:	71 01                	jno    c1d <sysEnter_Vector-0x12f3e3>
     c1c:	00 00                	add    BYTE PTR [eax],al
     c1e:	0a a4 03 00 00 01 0f 	or     ah,BYTE PTR [ebx+eax*1+0xf010000]
     c25:	47                   	inc    edi
     c26:	01 00                	add    DWORD PTR [eax],eax
     c28:	00 02                	add    BYTE PTR [edx],al
     c2a:	91                   	xchg   ecx,eax
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	09 5d 04             	or     DWORD PTR [ebp+0x4],ebx
     c30:	00 00                	add    BYTE PTR [eax],al
     c32:	01 14 52             	add    DWORD PTR [edx+edx*2],edx
     c35:	07                   	pop    es
     c36:	00 30                	add    BYTE PTR [eax],dh
     c38:	43                   	inc    ebx
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	00 01                	add    BYTE PTR [ecx],al
     c3d:	9c                   	pushf  
     c3e:	a1 01 00 00 0b       	mov    eax,ds:0xb000001
     c43:	63 00                	arpl   WORD PTR [eax],ax
     c45:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     c4c:	91                   	xchg   ecx,eax
     c4d:	60                   	pusha  
     c4e:	0c a4                	or     al,0xa4
     c50:	03 00                	add    eax,DWORD PTR [eax]
     c52:	00 01                	add    BYTE PTR [ecx],al
     c54:	16                   	push   ss
     c55:	a1 01 00 00 02       	mov    eax,ds:0x2000001
     c5a:	91                   	xchg   ecx,eax
     c5b:	72 00                	jb     c5d <sysEnter_Vector-0x12f3a3>
     c5d:	0d 25 00 00 00       	or     eax,0x25
     c62:	b1 01                	mov    cl,0x1
     c64:	00 00                	add    BYTE PTR [eax],al
     c66:	0e                   	push   cs
     c67:	40                   	inc    eax
     c68:	01 00                	add    DWORD PTR [eax],eax
     c6a:	00 01                	add    BYTE PTR [ecx],al
     c6c:	00 0f                	add    BYTE PTR [edi],cl
     c6e:	4c                   	dec    esp
     c6f:	04 00                	add    al,0x0
     c71:	00 01                	add    BYTE PTR [ecx],al
     c73:	1d 25 00 00 00       	sbb    eax,0x25
     c78:	95                   	xchg   ebp,eax
     c79:	07                   	pop    es
     c7a:	00 30                	add    BYTE PTR [eax],dh
     c7c:	2f                   	das    
     c7d:	00 00                	add    BYTE PTR [eax],al
     c7f:	00 01                	add    BYTE PTR [ecx],al
     c81:	9c                   	pushf  
     c82:	d7                   	xlat   BYTE PTR ds:[ebx]
     c83:	01 00                	add    DWORD PTR [eax],eax
     c85:	00 10                	add    BYTE PTR [eax],dl
     c87:	63 00                	arpl   WORD PTR [eax],ax
     c89:	01 1f                	add    DWORD PTR [edi],ebx
     c8b:	25 00 00 00 02       	and    eax,0x2000000
     c90:	91                   	xchg   ecx,eax
     c91:	73 00                	jae    c93 <sysEnter_Vector-0x12f36d>
     c93:	11 58 04             	adc    DWORD PTR [eax+0x4],ebx
     c96:	00 00                	add    BYTE PTR [eax],al
     c98:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     c9e:	c4 07                	les    eax,FWORD PTR [edi]
     ca0:	00 30                	add    BYTE PTR [eax],dh
     ca2:	ba 00 00 00 01       	mov    edx,0x1000000
     ca7:	9c                   	pushf  
     ca8:	50                   	push   eax
     ca9:	02 00                	add    al,BYTE PTR [eax]
     cab:	00 0a                	add    BYTE PTR [edx],cl
     cad:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     cae:	03 00                	add    eax,DWORD PTR [eax]
     cb0:	00 01                	add    BYTE PTR [ecx],al
     cb2:	25 47 01 00 00       	and    eax,0x147
     cb7:	02 91 00 0a 51 04    	add    dl,BYTE PTR [ecx+0x4510a00]
     cbd:	00 00                	add    BYTE PTR [eax],al
     cbf:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cc5:	02 91 04 0a 1d 04    	add    dl,BYTE PTR [ecx+0x41d0a04]
     ccb:	00 00                	add    BYTE PTR [eax],al
     ccd:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cd3:	02 91 08 0c 45 04    	add    dl,BYTE PTR [ecx+0x4450c08]
     cd9:	00 00                	add    BYTE PTR [eax],al
     cdb:	01 27                	add    DWORD PTR [edi],esp
     cdd:	25 00 00 00 02       	and    eax,0x2000000
     ce2:	91                   	xchg   ecx,eax
     ce3:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     ce6:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     ce8:	00 01                	add    BYTE PTR [ecx],al
     cea:	28 3a                	sub    BYTE PTR [edx],bh
     cec:	00 00                	add    BYTE PTR [eax],al
     cee:	00 02                	add    BYTE PTR [edx],al
     cf0:	91                   	xchg   ecx,eax
     cf1:	6c                   	ins    BYTE PTR es:[edi],dx
     cf2:	0c 2e                	or     al,0x2e
     cf4:	04 00                	add    al,0x0
     cf6:	00 01                	add    BYTE PTR [ecx],al
     cf8:	29 a1 01 00 00 02    	sub    DWORD PTR [ecx+0x2000001],esp
     cfe:	91                   	xchg   ecx,eax
     cff:	69 12 24 04 00 00    	imul   edx,DWORD PTR [edx],0x424
     d05:	01 2e                	add    DWORD PTR [esi],ebp
     d07:	01 08                	add    DWORD PTR [eax],ecx
     d09:	00 30                	add    BYTE PTR [eax],dh
     d0b:	00 13                	add    BYTE PTR [ebx],dl
     d0d:	4b                   	dec    ebx
     d0e:	00 00                	add    BYTE PTR [eax],al
     d10:	00 02                	add    BYTE PTR [edx],al
     d12:	34 56                	xor    al,0x56
     d14:	00 00                	add    BYTE PTR [eax],al
     d16:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
     d1c:	30 13                	xor    BYTE PTR [ebx],dl
     d1e:	af                   	scas   eax,DWORD PTR es:[edi]
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	00 02                	add    BYTE PTR [edx],al
     d23:	35 56 00 00 00       	xor    eax,0x56
     d28:	05 03 c0 43 00       	add    eax,0x43c003
     d2d:	30 13                	xor    BYTE PTR [ebx],dl
     d2f:	5b                   	pop    ebx
     d30:	01 00                	add    DWORD PTR [eax],eax
     d32:	00 02                	add    BYTE PTR [edx],al
     d34:	36                   	ss
     d35:	56                   	push   esi
     d36:	00 00                	add    BYTE PTR [eax],al
     d38:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
     d3e:	30 13                	xor    BYTE PTR [ebx],dl
     d40:	54                   	push   esp
     d41:	00 00                	add    BYTE PTR [eax],al
     d43:	00 02                	add    BYTE PTR [edx],al
     d45:	37                   	aaa    
     d46:	56                   	push   esi
     d47:	00 00                	add    BYTE PTR [eax],al
     d49:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
     d4f:	30 13                	xor    BYTE PTR [ebx],dl
     d51:	28 00                	sub    BYTE PTR [eax],al
     d53:	00 00                	add    BYTE PTR [eax],al
     d55:	03 45 a5             	add    eax,DWORD PTR [ebp-0x5b]
     d58:	02 00                	add    al,BYTE PTR [eax]
     d5a:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
     d60:	30 08                	xor    BYTE PTR [eax],cl
     d62:	04 47                	add    al,0x47
     d64:	01 00                	add    DWORD PTR [eax],eax
     d66:	00 00                	add    BYTE PTR [eax],al
     d68:	61                   	popa   
     d69:	06                   	push   es
     d6a:	00 00                	add    BYTE PTR [eax],al
     d6c:	04 00                	add    al,0x0
     d6e:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     d74:	f4                   	hlt    
     d75:	00 00                	add    BYTE PTR [eax],al
     d77:	00 0c 8d 05 00 00 72 	add    BYTE PTR [ecx*4+0x72000005],cl
     d7e:	00 00                	add    BYTE PTR [eax],al
     d80:	00 80 08 00 30 df    	add    BYTE PTR [eax-0x20cffff8],al
     d86:	05 00 00 f3 06       	add    eax,0x6f30000
     d8b:	00 00                	add    BYTE PTR [eax],al
     d8d:	02 37                	add    dh,BYTE PTR [edi]
     d8f:	05 00 00 02 28       	add    eax,0x28020000
     d94:	30 00                	xor    BYTE PTR [eax],al
     d96:	00 00                	add    BYTE PTR [eax],al
     d98:	03 04 aa             	add    eax,DWORD PTR [edx+ebp*4]
     d9b:	04 00                	add    al,0x0
     d9d:	00 3a                	add    BYTE PTR [edx],bh
     d9f:	00 00                	add    BYTE PTR [eax],al
     da1:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     da4:	06                   	push   es
     da5:	64 00 00             	add    BYTE PTR fs:[eax],al
     da8:	00 02                	add    BYTE PTR [edx],al
     daa:	3e                   	ds
     dab:	05 00 00 02 62       	add    eax,0x62020000
     db0:	25 00 00 00 04       	and    eax,0x4000000
     db5:	01 06                	add    DWORD PTR [esi],eax
     db7:	5d                   	pop    ebp
     db8:	00 00                	add    BYTE PTR [eax],al
     dba:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     dbd:	05 ea 00 00 00       	add    eax,0xea
     dc2:	05 04 05 69 6e       	add    eax,0x6e690504
     dc7:	74 00                	je     dc9 <sysEnter_Vector-0x12f237>
     dc9:	04 08                	add    al,0x8
     dcb:	05 00 00 00 00       	add    eax,0x0
     dd0:	04 01                	add    al,0x1
     dd2:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     dd5:	00 00                	add    BYTE PTR [eax],al
     dd7:	04 02                	add    al,0x2
     dd9:	07                   	pop    es
     dda:	0e                   	push   cs
     ddb:	00 00                	add    BYTE PTR [eax],al
     ddd:	00 02                	add    BYTE PTR [edx],al
     ddf:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
     de5:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     deb:	07                   	pop    es
     dec:	3e 00 00             	add    BYTE PTR ds:[eax],al
     def:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     df2:	07                   	pop    es
     df3:	34 00                	xor    al,0x0
     df5:	00 00                	add    BYTE PTR [eax],al
     df7:	02 81 04 00 00 04    	add    al,BYTE PTR [ecx+0x4000004]
     dfd:	d8 81 00 00 00 04    	fadd   DWORD PTR [ecx+0x4000000]
     e03:	04 05                	add    al,0x5
     e05:	05 00 00 00 04       	add    eax,0x4000000
     e0a:	0c 04                	or     al,0x4
     e0c:	9b                   	fwait
     e0d:	00 00                	add    BYTE PTR [eax],al
     e0f:	00 06                	add    BYTE PTR [esi],al
     e11:	04 ae                	add    al,0xae
     e13:	00 00                	add    BYTE PTR [eax],al
     e15:	00 07                	add    BYTE PTR [edi],al
     e17:	3a 00                	cmp    al,BYTE PTR [eax]
     e19:	00 00                	add    BYTE PTR [eax],al
     e1b:	04 01                	add    al,0x1
     e1d:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
     e23:	f4                   	hlt    
     e24:	02 00                	add    al,BYTE PTR [eax]
     e26:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
     e29:	00 00                	add    BYTE PTR [eax],al
     e2b:	00 07                	add    BYTE PTR [edi],al
     e2d:	15 6f 01 00 00       	adc    eax,0x16f
     e32:	09 59 03             	or     DWORD PTR [ecx+0x3],ebx
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	00 09                	add    BYTE PTR [ecx],cl
     e39:	91                   	xchg   ecx,eax
     e3a:	03 00                	add    eax,DWORD PTR [eax]
     e3c:	00 01                	add    BYTE PTR [ecx],al
     e3e:	09 60 02             	or     DWORD PTR [eax+0x2],esp
     e41:	00 00                	add    BYTE PTR [eax],al
     e43:	02 09                	add    cl,BYTE PTR [ecx]
     e45:	e6 02                	out    0x2,al
     e47:	00 00                	add    BYTE PTR [eax],al
     e49:	03 09                	add    ecx,DWORD PTR [ecx]
     e4b:	53                   	push   ebx
     e4c:	02 00                	add    al,BYTE PTR [eax]
     e4e:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     e51:	ab                   	stos   DWORD PTR es:[edi],eax
     e52:	03 00                	add    eax,DWORD PTR [eax]
     e54:	00 05 09 0a 03 00    	add    BYTE PTR ds:0x30a09,al
     e5a:	00 06                	add    BYTE PTR [esi],al
     e5c:	09 e1                	or     ecx,esp
     e5e:	03 00                	add    eax,DWORD PTR [eax]
     e60:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
     e63:	4c                   	dec    esp
     e64:	03 00                	add    eax,DWORD PTR [eax]
     e66:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
     e69:	f0 03 00             	lock add eax,DWORD PTR [eax]
     e6c:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     e6f:	d2 02                	rol    BYTE PTR [edx],cl
     e71:	00 00                	add    BYTE PTR [eax],al
     e73:	97                   	xchg   edi,eax
     e74:	0a 69 03             	or     ch,BYTE PTR [ecx+0x3]
     e77:	00 00                	add    BYTE PTR [eax],al
     e79:	63 01                	arpl   WORD PTR [ecx],ax
     e7b:	0a 3f                	or     bh,BYTE PTR [edi]
     e7d:	03 00                	add    eax,DWORD PTR [eax]
     e7f:	00 64 01 0a          	add    BYTE PTR [ecx+eax*1+0xa],ah
     e83:	d3 03                	rol    DWORD PTR [ebx],cl
     e85:	00 00                	add    BYTE PTR [eax],al
     e87:	65 01 0a             	add    DWORD PTR gs:[edx],ecx
     e8a:	b4 02                	mov    ah,0x2
     e8c:	00 00                	add    BYTE PTR [eax],al
     e8e:	66 01 0a             	add    WORD PTR [edx],cx
     e91:	08 04 00             	or     BYTE PTR [eax+eax*1],al
     e94:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     e97:	0a 17                	or     dl,BYTE PTR [edi]
     e99:	03 00                	add    eax,DWORD PTR [eax]
     e9b:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     e9e:	0a 99 02 00 00 69    	or     bl,BYTE PTR [ecx+0x69000002]
     ea4:	01 0a                	add    DWORD PTR [edx],ecx
     ea6:	80 03 00             	add    BYTE PTR [ebx],0x0
     ea9:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     eac:	0a c2                	or     al,dl
     eae:	02 00                	add    al,BYTE PTR [eax]
     eb0:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     eb3:	0a b9 03 00 00 00    	or     bh,BYTE PTR [ecx+0x3]
     eb9:	03 0a                	add    ecx,DWORD PTR [edx]
     ebb:	24 03                	and    al,0x3
     ebd:	00 00                	add    BYTE PTR [eax],al
     ebf:	01 03                	add    DWORD PTR [ebx],eax
     ec1:	0a a8 02 00 00 02    	or     ch,BYTE PTR [eax+0x2000002]
     ec7:	03 0a                	add    ecx,DWORD PTR [edx]
     ec9:	6d                   	ins    DWORD PTR es:[edi],dx
     eca:	02 00                	add    al,BYTE PTR [eax]
     ecc:	00 03                	add    BYTE PTR [ebx],al
     ece:	03 0a                	add    ecx,DWORD PTR [edx]
     ed0:	7d 02                	jge    ed4 <sysEnter_Vector-0x12f12c>
     ed2:	00 00                	add    BYTE PTR [eax],al
     ed4:	04 03                	add    al,0x3
     ed6:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     ed9:	07                   	pop    es
     eda:	39 00                	cmp    DWORD PTR [eax],eax
     edc:	00 00                	add    BYTE PTR [eax],al
     ede:	04 04                	add    al,0x4
     ee0:	07                   	pop    es
     ee1:	e1 00                	loope  ee3 <sysEnter_Vector-0x12f11d>
     ee3:	00 00                	add    BYTE PTR [eax],al
     ee5:	0b 04 06             	or     eax,DWORD PTR [esi+eax*1]
     ee8:	04 3a                	add    al,0x3a
     eea:	00 00                	add    BYTE PTR [eax],al
     eec:	00 0c 1b             	add    BYTE PTR [ebx+ebx*1],cl
     eef:	05 00 00 01 10       	add    eax,0x10010000
     ef4:	5a                   	pop    edx
     ef5:	00 00                	add    BYTE PTR [eax],al
     ef7:	00 80 08 00 30 3a    	add    BYTE PTR [eax+0x3a300008],al
     efd:	00 00                	add    BYTE PTR [eax],al
     eff:	00 01                	add    BYTE PTR [ecx],al
     f01:	9c                   	pushf  
     f02:	f3 01 00             	repz add DWORD PTR [eax],eax
     f05:	00 0d dd 04 00 00    	add    BYTE PTR ds:0x4dd,cl
     f0b:	01 10                	add    DWORD PTR [eax],edx
     f0d:	5a                   	pop    edx
     f0e:	00 00                	add    BYTE PTR [eax],al
     f10:	00 02                	add    BYTE PTR [edx],al
     f12:	91                   	xchg   ecx,eax
     f13:	00 0d 4e 05 00 00    	add    BYTE PTR ds:0x54e,cl
     f19:	01 10                	add    DWORD PTR [eax],edx
     f1b:	76 00                	jbe    f1d <sysEnter_Vector-0x12f0e3>
     f1d:	00 00                	add    BYTE PTR [eax],al
     f1f:	02 91 04 0d 55 05    	add    dl,BYTE PTR [ecx+0x5550d04]
     f25:	00 00                	add    BYTE PTR [eax],al
     f27:	01 10                	add    DWORD PTR [eax],edx
     f29:	76 00                	jbe    f2b <sysEnter_Vector-0x12f0d5>
     f2b:	00 00                	add    BYTE PTR [eax],al
     f2d:	02 91 08 0d 5c 05    	add    dl,BYTE PTR [ecx+0x55c0d08]
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	01 10                	add    DWORD PTR [eax],edx
     f37:	76 00                	jbe    f39 <sysEnter_Vector-0x12f0c7>
     f39:	00 00                	add    BYTE PTR [eax],al
     f3b:	02 91 0c 0d 63 05    	add    dl,BYTE PTR [ecx+0x5630d0c]
     f41:	00 00                	add    BYTE PTR [eax],al
     f43:	01 10                	add    DWORD PTR [eax],edx
     f45:	76 00                	jbe    f47 <sysEnter_Vector-0x12f0b9>
     f47:	00 00                	add    BYTE PTR [eax],al
     f49:	02 91 10 0e 67 04    	add    dl,BYTE PTR [ecx+0x4670e10]
     f4f:	00 00                	add    BYTE PTR [eax],al
     f51:	01 12                	add    DWORD PTR [edx],edx
     f53:	5a                   	pop    edx
     f54:	00 00                	add    BYTE PTR [eax],al
     f56:	00 02                	add    BYTE PTR [edx],al
     f58:	91                   	xchg   ecx,eax
     f59:	6c                   	ins    BYTE PTR es:[edi],dx
     f5a:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
     f5d:	05 00 00 01 17       	add    eax,0x17010000
     f62:	5a                   	pop    edx
     f63:	00 00                	add    BYTE PTR [eax],al
     f65:	00 ba 08 00 30 3c    	add    BYTE PTR [edx+0x3c300008],bh
     f6b:	00 00                	add    BYTE PTR [eax],al
     f6d:	00 01                	add    BYTE PTR [ecx],al
     f6f:	9c                   	pushf  
     f70:	53                   	push   ebx
     f71:	02 00                	add    al,BYTE PTR [eax]
     f73:	00 0d dd 04 00 00    	add    BYTE PTR ds:0x4dd,cl
     f79:	01 17                	add    DWORD PTR [edi],edx
     f7b:	5a                   	pop    edx
     f7c:	00 00                	add    BYTE PTR [eax],al
     f7e:	00 02                	add    BYTE PTR [edx],al
     f80:	91                   	xchg   ecx,eax
     f81:	00 0d 4e 05 00 00    	add    BYTE PTR ds:0x54e,cl
     f87:	01 17                	add    DWORD PTR [edi],edx
     f89:	76 00                	jbe    f8b <sysEnter_Vector-0x12f075>
     f8b:	00 00                	add    BYTE PTR [eax],al
     f8d:	02 91 04 0d 55 05    	add    dl,BYTE PTR [ecx+0x5550d04]
     f93:	00 00                	add    BYTE PTR [eax],al
     f95:	01 17                	add    DWORD PTR [edi],edx
     f97:	76 00                	jbe    f99 <sysEnter_Vector-0x12f067>
     f99:	00 00                	add    BYTE PTR [eax],al
     f9b:	02 91 08 0d 5c 05    	add    dl,BYTE PTR [ecx+0x55c0d08]
     fa1:	00 00                	add    BYTE PTR [eax],al
     fa3:	01 17                	add    DWORD PTR [edi],edx
     fa5:	76 00                	jbe    fa7 <sysEnter_Vector-0x12f059>
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	02 91 0c 0e 67 04    	add    dl,BYTE PTR [ecx+0x4670e0c]
     faf:	00 00                	add    BYTE PTR [eax],al
     fb1:	01 19                	add    DWORD PTR [ecx],ebx
     fb3:	5a                   	pop    edx
     fb4:	00 00                	add    BYTE PTR [eax],al
     fb6:	00 02                	add    BYTE PTR [edx],al
     fb8:	91                   	xchg   ecx,eax
     fb9:	6c                   	ins    BYTE PTR es:[edi],dx
     fba:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
     fbd:	05 00 00 01 1e       	add    eax,0x1e010000
     fc2:	5a                   	pop    edx
     fc3:	00 00                	add    BYTE PTR [eax],al
     fc5:	00 f6                	add    dh,dh
     fc7:	08 00                	or     BYTE PTR [eax],al
     fc9:	30 3e                	xor    BYTE PTR [esi],bh
     fcb:	00 00                	add    BYTE PTR [eax],al
     fcd:	00 01                	add    BYTE PTR [ecx],al
     fcf:	9c                   	pushf  
     fd0:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
     fd1:	02 00                	add    al,BYTE PTR [eax]
     fd3:	00 0d dd 04 00 00    	add    BYTE PTR ds:0x4dd,cl
     fd9:	01 1e                	add    DWORD PTR [esi],ebx
     fdb:	5a                   	pop    edx
     fdc:	00 00                	add    BYTE PTR [eax],al
     fde:	00 02                	add    BYTE PTR [edx],al
     fe0:	91                   	xchg   ecx,eax
     fe1:	00 0d 4e 05 00 00    	add    BYTE PTR ds:0x54e,cl
     fe7:	01 1e                	add    DWORD PTR [esi],ebx
     fe9:	76 00                	jbe    feb <sysEnter_Vector-0x12f015>
     feb:	00 00                	add    BYTE PTR [eax],al
     fed:	02 91 04 0d 55 05    	add    dl,BYTE PTR [ecx+0x5550d04]
     ff3:	00 00                	add    BYTE PTR [eax],al
     ff5:	01 1e                	add    DWORD PTR [esi],ebx
     ff7:	76 00                	jbe    ff9 <sysEnter_Vector-0x12f007>
     ff9:	00 00                	add    BYTE PTR [eax],al
     ffb:	02 91 08 0e 67 04    	add    dl,BYTE PTR [ecx+0x4670e08]
    1001:	00 00                	add    BYTE PTR [eax],al
    1003:	01 20                	add    DWORD PTR [eax],esp
    1005:	5a                   	pop    edx
    1006:	00 00                	add    BYTE PTR [eax],al
    1008:	00 02                	add    BYTE PTR [edx],al
    100a:	91                   	xchg   ecx,eax
    100b:	6c                   	ins    BYTE PTR es:[edi],dx
    100c:	00 0c f7             	add    BYTE PTR [edi+esi*8],cl
    100f:	04 00                	add    al,0x0
    1011:	00 01                	add    BYTE PTR [ecx],al
    1013:	25 5a 00 00 00       	and    eax,0x5a
    1018:	34 09                	xor    al,0x9
    101a:	00 30                	add    BYTE PTR [eax],dh
    101c:	40                   	inc    eax
    101d:	00 00                	add    BYTE PTR [eax],al
    101f:	00 01                	add    BYTE PTR [ecx],al
    1021:	9c                   	pushf  
    1022:	e9 02 00 00 0d       	jmp    d001029 <sysEnter_Vector+0xced1029>
    1027:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    102a:	00 01                	add    BYTE PTR [ecx],al
    102c:	25 5a 00 00 00       	and    eax,0x5a
    1031:	02 91 00 0d 4e 05    	add    dl,BYTE PTR [ecx+0x54e0d00]
    1037:	00 00                	add    BYTE PTR [eax],al
    1039:	01 25 76 00 00 00    	add    DWORD PTR ds:0x76,esp
    103f:	02 91 04 0e 67 04    	add    dl,BYTE PTR [ecx+0x4670e04]
    1045:	00 00                	add    BYTE PTR [eax],al
    1047:	01 27                	add    DWORD PTR [edi],esp
    1049:	5a                   	pop    edx
    104a:	00 00                	add    BYTE PTR [eax],al
    104c:	00 02                	add    BYTE PTR [edx],al
    104e:	91                   	xchg   ecx,eax
    104f:	6c                   	ins    BYTE PTR es:[edi],dx
    1050:	00 0c eb             	add    BYTE PTR [ebx+ebp*8],cl
    1053:	04 00                	add    al,0x0
    1055:	00 01                	add    BYTE PTR [ecx],al
    1057:	2c 5a                	sub    al,0x5a
    1059:	00 00                	add    BYTE PTR [eax],al
    105b:	00 74 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],dh
    105f:	30 42 00             	xor    BYTE PTR [edx+0x0],al
    1062:	00 00                	add    BYTE PTR [eax],al
    1064:	01 9c 1f 03 00 00 0d 	add    DWORD PTR [edi+ebx*1+0xd000003],ebx
    106b:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    106e:	00 01                	add    BYTE PTR [ecx],al
    1070:	2c 5a                	sub    al,0x5a
    1072:	00 00                	add    BYTE PTR [eax],al
    1074:	00 02                	add    BYTE PTR [edx],al
    1076:	91                   	xchg   ecx,eax
    1077:	00 0e                	add    BYTE PTR [esi],cl
    1079:	67 04 00             	addr16 add al,0x0
    107c:	00 01                	add    BYTE PTR [ecx],al
    107e:	2e                   	cs
    107f:	5a                   	pop    edx
    1080:	00 00                	add    BYTE PTR [eax],al
    1082:	00 02                	add    BYTE PTR [edx],al
    1084:	91                   	xchg   ecx,eax
    1085:	6c                   	ins    BYTE PTR es:[edi],dx
    1086:	00 0f                	add    BYTE PTR [edi],cl
    1088:	a0 04 00 00 01       	mov    al,ds:0x1000004
    108d:	33 b6 09 00 30 a5    	xor    esi,DWORD PTR [esi-0x5acffff7]
    1093:	00 00                	add    BYTE PTR [eax],al
    1095:	00 01                	add    BYTE PTR [ecx],al
    1097:	9c                   	pushf  
    1098:	10 a3 05 00 00 01    	adc    BYTE PTR [ebx+0x1000005],ah
    109e:	44                   	inc    esp
    109f:	5b                   	pop    ebx
    10a0:	0a 00                	or     al,BYTE PTR [eax]
    10a2:	30 1f                	xor    BYTE PTR [edi],bl
    10a4:	00 00                	add    BYTE PTR [eax],al
    10a6:	00 01                	add    BYTE PTR [ecx],al
    10a8:	9c                   	pushf  
    10a9:	11 6e 04             	adc    DWORD PTR [esi+0x4],ebp
    10ac:	00 00                	add    BYTE PTR [eax],al
    10ae:	01 49 5a             	add    DWORD PTR [ecx+0x5a],ecx
    10b1:	00 00                	add    BYTE PTR [eax],al
    10b3:	00 7a 0a             	add    BYTE PTR [edx+0xa],bh
    10b6:	00 30                	add    BYTE PTR [eax],dh
    10b8:	34 00                	xor    al,0x0
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	01 9c 78 03 00 00 0d 	add    DWORD PTR [eax+edi*2+0xd000003],ebx
    10c3:	70 05                	jo     10ca <sysEnter_Vector-0x12ef36>
    10c5:	00 00                	add    BYTE PTR [eax],al
    10c7:	01 49 a8             	add    DWORD PTR [ecx-0x58],ecx
    10ca:	00 00                	add    BYTE PTR [eax],al
    10cc:	00 02                	add    BYTE PTR [edx],al
    10ce:	91                   	xchg   ecx,eax
    10cf:	00 12                	add    BYTE PTR [edx],dl
    10d1:	0e                   	push   cs
    10d2:	cd 05                	int    0x5
    10d4:	00 00                	add    BYTE PTR [eax],al
    10d6:	01 4b 41             	add    DWORD PTR [ebx+0x41],ecx
    10d9:	00 00                	add    BYTE PTR [eax],al
    10db:	00 02                	add    BYTE PTR [edx],al
    10dd:	91                   	xchg   ecx,eax
    10de:	74 00                	je     10e0 <sysEnter_Vector-0x12ef20>
    10e0:	11 d2                	adc    edx,edx
    10e2:	05 00 00 01 51       	add    eax,0x51010000
    10e7:	5a                   	pop    edx
    10e8:	00 00                	add    BYTE PTR [eax],al
    10ea:	00 ae 0a 00 30 34    	add    BYTE PTR [esi+0x3430000a],ch
    10f0:	00 00                	add    BYTE PTR [eax],al
    10f2:	00 01                	add    BYTE PTR [ecx],al
    10f4:	9c                   	pushf  
    10f5:	af                   	scas   eax,DWORD PTR es:[edi]
    10f6:	03 00                	add    eax,DWORD PTR [eax]
    10f8:	00 0d 70 05 00 00    	add    BYTE PTR ds:0x570,cl
    10fe:	01 51 a8             	add    DWORD PTR [ecx-0x58],edx
    1101:	00 00                	add    BYTE PTR [eax],al
    1103:	00 02                	add    BYTE PTR [edx],al
    1105:	91                   	xchg   ecx,eax
    1106:	00 12                	add    BYTE PTR [edx],dl
    1108:	0e                   	push   cs
    1109:	cd 05                	int    0x5
    110b:	00 00                	add    BYTE PTR [eax],al
    110d:	01 53 41             	add    DWORD PTR [ebx+0x41],edx
    1110:	00 00                	add    BYTE PTR [eax],al
    1112:	00 02                	add    BYTE PTR [edx],al
    1114:	91                   	xchg   ecx,eax
    1115:	74 00                	je     1117 <sysEnter_Vector-0x12eee9>
    1117:	11 46 05             	adc    DWORD PTR [esi+0x5],eax
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	01 59 5a             	add    DWORD PTR [ecx+0x5a],ebx
    111f:	00 00                	add    BYTE PTR [eax],al
    1121:	00 e2                	add    dl,ah
    1123:	0a 00                	or     al,BYTE PTR [eax]
    1125:	30 37                	xor    BYTE PTR [edi],dh
    1127:	00 00                	add    BYTE PTR [eax],al
    1129:	00 01                	add    BYTE PTR [ecx],al
    112b:	9c                   	pushf  
    112c:	f4                   	hlt    
    112d:	03 00                	add    eax,DWORD PTR [eax]
    112f:	00 0d d2 04 00 00    	add    BYTE PTR ds:0x4d2,cl
    1135:	01 59 76             	add    DWORD PTR [ecx+0x76],ebx
    1138:	00 00                	add    BYTE PTR [eax],al
    113a:	00 02                	add    BYTE PTR [edx],al
    113c:	91                   	xchg   ecx,eax
    113d:	00 0d 70 05 00 00    	add    BYTE PTR ds:0x570,cl
    1143:	01 59 a8             	add    DWORD PTR [ecx-0x58],ebx
    1146:	00 00                	add    BYTE PTR [eax],al
    1148:	00 02                	add    BYTE PTR [edx],al
    114a:	91                   	xchg   ecx,eax
    114b:	04 12                	add    al,0x12
    114d:	0e                   	push   cs
    114e:	cd 05                	int    0x5
    1150:	00 00                	add    BYTE PTR [eax],al
    1152:	01 5b 41             	add    DWORD PTR [ebx+0x41],ebx
    1155:	00 00                	add    BYTE PTR [eax],al
    1157:	00 02                	add    BYTE PTR [edx],al
    1159:	91                   	xchg   ecx,eax
    115a:	74 00                	je     115c <sysEnter_Vector-0x12eea4>
    115c:	0c e5                	or     al,0xe5
    115e:	04 00                	add    al,0x0
    1160:	00 01                	add    BYTE PTR [ecx],al
    1162:	62 81 00 00 00 19    	bound  eax,QWORD PTR [ecx+0x19000000]
    1168:	0b 00                	or     eax,DWORD PTR [eax]
    116a:	30 72 00             	xor    BYTE PTR [edx+0x0],dh
    116d:	00 00                	add    BYTE PTR [eax],al
    116f:	01 9c 40 04 00 00 0d 	add    DWORD PTR [eax+eax*2+0xd000004],ebx
    1176:	83 05 00 00 01 62 81 	add    DWORD PTR ds:0x62010000,0xffffff81
    117d:	00 00                	add    BYTE PTR [eax],al
    117f:	00 02                	add    BYTE PTR [edx],al
    1181:	91                   	xchg   ecx,eax
    1182:	00 13                	add    BYTE PTR [ebx],dl
    1184:	2b 0b                	sub    ecx,DWORD PTR [ebx]
    1186:	00 30                	add    BYTE PTR [eax],dh
    1188:	54                   	push   esp
    1189:	00 00                	add    BYTE PTR [eax],al
    118b:	00 14 73             	add    BYTE PTR [ebx+esi*2],dl
    118e:	32 00                	xor    al,BYTE PTR [eax]
    1190:	01 64 76 00          	add    DWORD PTR [esi+esi*2+0x0],esp
    1194:	00 00                	add    BYTE PTR [eax],al
    1196:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    119c:	00 01                	add    BYTE PTR [ecx],al
    119e:	64                   	fs
    119f:	76 00                	jbe    11a1 <sysEnter_Vector-0x12ee5f>
    11a1:	00 00                	add    BYTE PTR [eax],al
    11a3:	02 91 68 00 00 0f    	add    dl,BYTE PTR [ecx+0xf000068]
    11a9:	d9 05 00 00 01 68    	fld    DWORD PTR ds:0x68010000
    11af:	8b 0b                	mov    ecx,DWORD PTR [ebx]
    11b1:	00 30                	add    BYTE PTR [eax],dh
    11b3:	1d 00 00 00 01       	sbb    eax,0x1000000
    11b8:	9c                   	pushf  
    11b9:	15 c0 05 00 00       	adc    eax,0x5c0
    11be:	01 6d a8             	add    DWORD PTR [ebp-0x58],ebp
    11c1:	0b 00                	or     eax,DWORD PTR [eax]
    11c3:	30 29                	xor    BYTE PTR [ecx],ch
    11c5:	00 00                	add    BYTE PTR [eax],al
    11c7:	00 01                	add    BYTE PTR [ecx],al
    11c9:	9c                   	pushf  
    11ca:	91                   	xchg   ecx,eax
    11cb:	04 00                	add    al,0x0
    11cd:	00 0d 77 05 00 00    	add    BYTE PTR ds:0x577,cl
    11d3:	01 6d 5a             	add    DWORD PTR [ebp+0x5a],ebp
    11d6:	00 00                	add    BYTE PTR [eax],al
    11d8:	00 02                	add    BYTE PTR [edx],al
    11da:	91                   	xchg   ecx,eax
    11db:	00 0d b5 05 00 00    	add    BYTE PTR ds:0x5b5,cl
    11e1:	01 6d 7d             	add    DWORD PTR [ebp+0x7d],ebp
    11e4:	01 00                	add    DWORD PTR [eax],eax
    11e6:	00 02                	add    BYTE PTR [edx],al
    11e8:	91                   	xchg   ecx,eax
    11e9:	04 0d                	add    al,0xd
    11eb:	88 04 00             	mov    BYTE PTR [eax+eax*1],al
    11ee:	00 01                	add    BYTE PTR [ecx],al
    11f0:	6d                   	ins    DWORD PTR es:[edi],dx
    11f1:	5a                   	pop    edx
    11f2:	00 00                	add    BYTE PTR [eax],al
    11f4:	00 02                	add    BYTE PTR [edx],al
    11f6:	91                   	xchg   ecx,eax
    11f7:	08 00                	or     BYTE PTR [eax],al
    11f9:	16                   	push   ss
    11fa:	bc 04 00 00 01       	mov    esp,0x1000004
    11ff:	72 5a                	jb     125b <sysEnter_Vector-0x12eda5>
    1201:	00 00                	add    BYTE PTR [eax],al
    1203:	00 d1                	add    cl,dl
    1205:	0b 00                	or     eax,DWORD PTR [eax]
    1207:	30 19                	xor    BYTE PTR [ecx],bl
    1209:	00 00                	add    BYTE PTR [eax],al
    120b:	00 01                	add    BYTE PTR [ecx],al
    120d:	9c                   	pushf  
    120e:	11 7e 05             	adc    DWORD PTR [esi+0x5],edi
    1211:	00 00                	add    BYTE PTR [eax],al
    1213:	01 77 5a             	add    DWORD PTR [edi+0x5a],esi
    1216:	00 00                	add    BYTE PTR [eax],al
    1218:	00 ea                	add    dl,ch
    121a:	0b 00                	or     eax,DWORD PTR [eax]
    121c:	30 ed                	xor    ch,ch
    121e:	01 00                	add    DWORD PTR [eax],eax
    1220:	00 01                	add    BYTE PTR [ecx],al
    1222:	9c                   	pushf  
    1223:	48                   	dec    eax
    1224:	05 00 00 0d 83       	add    eax,0x830d0000
    1229:	08 00                	or     BYTE PTR [eax],al
    122b:	00 01                	add    BYTE PTR [ecx],al
    122d:	77 7f                	ja     12ae <sysEnter_Vector-0x12ed52>
    122f:	01 00                	add    DWORD PTR [eax],eax
    1231:	00 02                	add    BYTE PTR [edx],al
    1233:	91                   	xchg   ecx,eax
    1234:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    1237:	69 64 00 01 79 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5a79
    123e:	00 
    123f:	00 02                	add    BYTE PTR [edx],al
    1241:	91                   	xchg   ecx,eax
    1242:	58                   	pop    eax
    1243:	0e                   	push   cs
    1244:	9e                   	sahf   
    1245:	05 00 00 01 79       	add    eax,0x79010000
    124a:	5a                   	pop    edx
    124b:	00 00                	add    BYTE PTR [eax],al
    124d:	00 02                	add    BYTE PTR [edx],al
    124f:	91                   	xchg   ecx,eax
    1250:	6c                   	ins    BYTE PTR es:[edi],dx
    1251:	0e                   	push   cs
    1252:	b0 05                	mov    al,0x5
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	01 7a 48             	add    DWORD PTR [edx+0x48],edi
    1259:	05 00 00 02 91       	add    eax,0x91020000
    125e:	50                   	push   eax
    125f:	0e                   	push   cs
    1260:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
    1264:	01 7b 7f             	add    DWORD PTR [ebx+0x7f],edi
    1267:	01 00                	add    DWORD PTR [eax],eax
    1269:	00 02                	add    BYTE PTR [edx],al
    126b:	91                   	xchg   ecx,eax
    126c:	68 0e 74 04 00       	push   0x4740e
    1271:	00 01                	add    BYTE PTR [ecx],al
    1273:	7b 7f                	jnp    12f4 <sysEnter_Vector-0x12ed0c>
    1275:	01 00                	add    DWORD PTR [eax],eax
    1277:	00 02                	add    BYTE PTR [edx],al
    1279:	91                   	xchg   ecx,eax
    127a:	64                   	fs
    127b:	0e                   	push   cs
    127c:	98                   	cwde   
    127d:	04 00                	add    al,0x0
    127f:	00 01                	add    BYTE PTR [ecx],al
    1281:	7c 7f                	jl     1302 <sysEnter_Vector-0x12ecfe>
    1283:	01 00                	add    DWORD PTR [eax],eax
    1285:	00 02                	add    BYTE PTR [edx],al
    1287:	91                   	xchg   ecx,eax
    1288:	54                   	push   esp
    1289:	0e                   	push   cs
    128a:	90                   	nop
    128b:	04 00                	add    al,0x0
    128d:	00 01                	add    BYTE PTR [ecx],al
    128f:	8d 5a 00             	lea    ebx,[edx+0x0]
    1292:	00 00                	add    BYTE PTR [eax],al
    1294:	02 91 60 13 c0 0c    	add    dl,BYTE PTR [ecx+0xcc01360]
    129a:	00 30                	add    BYTE PTR [eax],dh
    129c:	e0 00                	loopne 129e <sysEnter_Vector-0x12ed62>
    129e:	00 00                	add    BYTE PTR [eax],al
    12a0:	14 63                	adc    al,0x63
    12a2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12a3:	74 00                	je     12a5 <sysEnter_Vector-0x12ed5b>
    12a5:	01 8f 5a 00 00 00    	add    DWORD PTR [edi+0x5a],ecx
    12ab:	02 91 5c 00 00 06    	add    dl,BYTE PTR [ecx+0x600005c]
    12b1:	04 7f                	add    al,0x7f
    12b3:	01 00                	add    DWORD PTR [eax],eax
    12b5:	00 11                	add    BYTE PTR [ecx],dl
    12b7:	6a 05                	push   0x5
    12b9:	00 00                	add    BYTE PTR [eax],al
    12bb:	01 a6 5a 00 00 00    	add    DWORD PTR [esi+0x5a],esp
    12c1:	d7                   	xlat   BYTE PTR ds:[ebx]
    12c2:	0d 00 30 4c 00       	or     eax,0x4c3000
    12c7:	00 00                	add    BYTE PTR [eax],al
    12c9:	01 9c a0 05 00 00 0d 	add    DWORD PTR [eax+eiz*4+0xd000005],ebx
    12d0:	83 08 00             	or     DWORD PTR [eax],0x0
    12d3:	00 01                	add    BYTE PTR [ecx],al
    12d5:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    12d6:	7f 01                	jg     12d9 <sysEnter_Vector-0x12ed27>
    12d8:	00 00                	add    BYTE PTR [eax],al
    12da:	02 91 00 0d 9e 05    	add    dl,BYTE PTR [ecx+0x59e0d00]
    12e0:	00 00                	add    BYTE PTR [eax],al
    12e2:	01 a6 5a 00 00 00    	add    DWORD PTR [esi+0x5a],esp
    12e8:	02 91 04 0d b0 05    	add    dl,BYTE PTR [ecx+0x5b00d04]
    12ee:	00 00                	add    BYTE PTR [eax],al
    12f0:	01 a6 48 05 00 00    	add    DWORD PTR [esi+0x548],esp
    12f6:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    12fc:	64 00 01             	add    BYTE PTR fs:[ecx],al
    12ff:	a8 5a                	test   al,0x5a
    1301:	00 00                	add    BYTE PTR [eax],al
    1303:	00 02                	add    BYTE PTR [edx],al
    1305:	91                   	xchg   ecx,eax
    1306:	70 00                	jo     1308 <sysEnter_Vector-0x12ecf8>
    1308:	11 ca                	adc    edx,ecx
    130a:	04 00                	add    al,0x0
    130c:	00 01                	add    BYTE PTR [ecx],al
    130e:	b2 5a                	mov    dl,0x5a
    1310:	00 00                	add    BYTE PTR [eax],al
    1312:	00 23                	add    BYTE PTR [ebx],ah
    1314:	0e                   	push   cs
    1315:	00 30                	add    BYTE PTR [eax],dh
    1317:	1c 00                	sbb    al,0x0
    1319:	00 00                	add    BYTE PTR [eax],al
    131b:	01 9c c8 05 00 00 17 	add    DWORD PTR [eax+ecx*8+0x17000005],ebx
    1322:	70 69                	jo     138d <sysEnter_Vector-0x12ec73>
    1324:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1327:	b2 76                	mov    dl,0x76
    1329:	00 00                	add    BYTE PTR [eax],al
    132b:	00 02                	add    BYTE PTR [edx],al
    132d:	91                   	xchg   ecx,eax
    132e:	00 00                	add    BYTE PTR [eax],al
    1330:	11 de                	adc    esi,ebx
    1332:	05 00 00 01 b7       	add    eax,0xb7010000
    1337:	7f 01                	jg     133a <sysEnter_Vector-0x12ecc6>
    1339:	00 00                	add    BYTE PTR [eax],al
    133b:	3f                   	aas    
    133c:	0e                   	push   cs
    133d:	00 30                	add    BYTE PTR [eax],dh
    133f:	20 00                	and    BYTE PTR [eax],al
    1341:	00 00                	add    BYTE PTR [eax],al
    1343:	01 9c fe 05 00 00 17 	add    DWORD PTR [esi+edi*8+0x17000005],ebx
    134a:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    134d:	00 01                	add    BYTE PTR [ecx],al
    134f:	b7 7f                	mov    bh,0x7f
    1351:	01 00                	add    DWORD PTR [eax],eax
    1353:	00 02                	add    BYTE PTR [edx],al
    1355:	91                   	xchg   ecx,eax
    1356:	00 0d ce 03 00 00    	add    BYTE PTR ds:0x3ce,cl
    135c:	01 b7 8f 00 00 00    	add    DWORD PTR [edi+0x8f],esi
    1362:	02 91 04 00 18 4b    	add    dl,BYTE PTR [ecx+0x4b180004]
    1368:	00 00                	add    BYTE PTR [eax],al
    136a:	00 05 34 76 00 00    	add    BYTE PTR ds:0x7634,al
    1370:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    1376:	30 18                	xor    BYTE PTR [eax],bl
    1378:	af                   	scas   eax,DWORD PTR es:[edi]
    1379:	00 00                	add    BYTE PTR [eax],al
    137b:	00 05 35 76 00 00    	add    BYTE PTR ds:0x7635,al
    1381:	00 05 03 c0 43 00    	add    BYTE PTR ds:0x43c003,al
    1387:	30 18                	xor    BYTE PTR [eax],bl
    1389:	5b                   	pop    ebx
    138a:	01 00                	add    DWORD PTR [eax],eax
    138c:	00 05 36 76 00 00    	add    BYTE PTR ds:0x7636,al
    1392:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    1398:	30 18                	xor    BYTE PTR [eax],bl
    139a:	54                   	push   esp
    139b:	00 00                	add    BYTE PTR [eax],al
    139d:	00 05 37 76 00 00    	add    BYTE PTR ds:0x7637,al
    13a3:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    13a9:	30 18                	xor    BYTE PTR [eax],bl
    13ab:	28 00                	sub    BYTE PTR [eax],al
    13ad:	00 00                	add    BYTE PTR [eax],al
    13af:	06                   	push   es
    13b0:	45                   	inc    ebp
    13b1:	48                   	dec    eax
    13b2:	05 00 00 05 03       	add    eax,0x3050000
    13b7:	c4 43 00             	les    eax,FWORD PTR [ebx+0x0]
    13ba:	30 18                	xor    BYTE PTR [eax],bl
    13bc:	27                   	daa    
    13bd:	05 00 00 01 0d       	add    eax,0xd010000
    13c2:	b3 00                	mov    bl,0x0
    13c4:	00 00                	add    BYTE PTR [eax],al
    13c6:	05 03 d0 43 00       	add    eax,0x43d003
    13cb:	30 00                	xor    BYTE PTR [eax],al
    13cd:	65 03 00             	add    eax,DWORD PTR gs:[eax]
    13d0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    13d3:	91                   	xchg   ecx,eax
    13d4:	06                   	push   es
    13d5:	00 00                	add    BYTE PTR [eax],al
    13d7:	04 01                	add    al,0x1
    13d9:	f4                   	hlt    
    13da:	00 00                	add    BYTE PTR [eax],al
    13dc:	00 0c 89             	add    BYTE PTR [ecx+ecx*4],cl
    13df:	06                   	push   es
    13e0:	00 00                	add    BYTE PTR [eax],al
    13e2:	72 00                	jb     13e4 <sysEnter_Vector-0x12ec1c>
    13e4:	00 00                	add    BYTE PTR [eax],al
    13e6:	60                   	pusha  
    13e7:	0e                   	push   cs
    13e8:	00 30                	add    BYTE PTR [eax],dh
    13ea:	6d                   	ins    DWORD PTR es:[edi],dx
    13eb:	03 00                	add    eax,DWORD PTR [eax]
    13ed:	00 a8 08 00 00 02    	add    BYTE PTR [eax+0x2000008],ch
    13f3:	01 06                	add    DWORD PTR [esi],eax
    13f5:	5d                   	pop    ebp
    13f6:	00 00                	add    BYTE PTR [eax],al
    13f8:	00 02                	add    BYTE PTR [edx],al
    13fa:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1400:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1407:	02 08                	add    cl,BYTE PTR [eax]
    1409:	05 00 00 00 00       	add    eax,0x0
    140e:	04 29                	add    al,0x29
    1410:	06                   	push   es
    1411:	00 00                	add    BYTE PTR [eax],al
    1413:	02 2e                	add    ch,BYTE PTR [esi]
    1415:	4c                   	dec    esp
    1416:	00 00                	add    BYTE PTR [eax],al
    1418:	00 02                	add    BYTE PTR [edx],al
    141a:	01 08                	add    DWORD PTR [eax],ecx
    141c:	5b                   	pop    ebx
    141d:	00 00                	add    BYTE PTR [eax],al
    141f:	00 02                	add    BYTE PTR [edx],al
    1421:	02 07                	add    al,BYTE PTR [edi]
    1423:	0e                   	push   cs
    1424:	00 00                	add    BYTE PTR [eax],al
    1426:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1429:	00 00                	add    BYTE PTR [eax],al
    142b:	00 02                	add    BYTE PTR [edx],al
    142d:	34 65                	xor    al,0x65
    142f:	00 00                	add    BYTE PTR [eax],al
    1431:	00 02                	add    BYTE PTR [edx],al
    1433:	04 07                	add    al,0x7
    1435:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1438:	00 02                	add    BYTE PTR [edx],al
    143a:	08 07                	or     BYTE PTR [edi],al
    143c:	34 00                	xor    al,0x0
    143e:	00 00                	add    BYTE PTR [eax],al
    1440:	04 81                	add    al,0x81
    1442:	04 00                	add    al,0x0
    1444:	00 03                	add    BYTE PTR [ebx],al
    1446:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    1449:	00 00                	add    BYTE PTR [eax],al
    144b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1452:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1455:	9b                   	fwait
    1456:	00 00                	add    BYTE PTR [eax],al
    1458:	00 02                	add    BYTE PTR [edx],al
    145a:	01 06                	add    DWORD PTR [esi],eax
    145c:	64 00 00             	add    BYTE PTR fs:[eax],al
    145f:	00 05 3d 06 00 00    	add    BYTE PTR ds:0x63d,al
    1465:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    1468:	d0 00                	rol    BYTE PTR [eax],1
    146a:	00 00                	add    BYTE PTR [eax],al
    146c:	06                   	push   es
    146d:	12 06                	adc    al,BYTE PTR [esi]
    146f:	00 00                	add    BYTE PTR [eax],al
    1471:	04 2e                	add    al,0x2e
    1473:	5a                   	pop    edx
    1474:	00 00                	add    BYTE PTR [eax],al
    1476:	00 00                	add    BYTE PTR [eax],al
    1478:	07                   	pop    es
    1479:	6c                   	ins    BYTE PTR es:[edi],dx
    147a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    147c:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    147f:	5a                   	pop    edx
    1480:	00 00                	add    BYTE PTR [eax],al
    1482:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1485:	43                   	inc    ebx
    1486:	06                   	push   es
    1487:	00 00                	add    BYTE PTR [eax],al
    1489:	04 30                	add    al,0x30
    148b:	d0 00                	rol    BYTE PTR [eax],1
    148d:	00 00                	add    BYTE PTR [eax],al
    148f:	08 06                	or     BYTE PTR [esi],al
    1491:	9c                   	pushf  
    1492:	06                   	push   es
    1493:	00 00                	add    BYTE PTR [eax],al
    1495:	04 31                	add    al,0x31
    1497:	d7                   	xlat   BYTE PTR ds:[ebx]
    1498:	00 00                	add    BYTE PTR [eax],al
    149a:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    149d:	02 01                	add    al,BYTE PTR [ecx]
    149f:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
    14a5:	04 93                	add    al,0x93
    14a7:	00 00                	add    BYTE PTR [eax],al
    14a9:	00 04 a1             	add    BYTE PTR [ecx+eiz*4],al
    14ac:	06                   	push   es
    14ad:	00 00                	add    BYTE PTR [eax],al
    14af:	04 32                	add    al,0x32
    14b1:	93                   	xchg   ebx,eax
    14b2:	00 00                	add    BYTE PTR [eax],al
    14b4:	00 09                	add    BYTE PTR [ecx],cl
    14b6:	f4                   	hlt    
    14b7:	02 00                	add    al,BYTE PTR [eax]
    14b9:	00 04 65 00 00 00 06 	add    BYTE PTR [eiz*2+0x6000000],al
    14c0:	15 9d 01 00 00       	adc    eax,0x19d
    14c5:	0a 59 03             	or     bl,BYTE PTR [ecx+0x3]
    14c8:	00 00                	add    BYTE PTR [eax],al
    14ca:	00 0a                	add    BYTE PTR [edx],cl
    14cc:	91                   	xchg   ecx,eax
    14cd:	03 00                	add    eax,DWORD PTR [eax]
    14cf:	00 01                	add    BYTE PTR [ecx],al
    14d1:	0a 60 02             	or     ah,BYTE PTR [eax+0x2]
    14d4:	00 00                	add    BYTE PTR [eax],al
    14d6:	02 0a                	add    cl,BYTE PTR [edx]
    14d8:	e6 02                	out    0x2,al
    14da:	00 00                	add    BYTE PTR [eax],al
    14dc:	03 0a                	add    ecx,DWORD PTR [edx]
    14de:	53                   	push   ebx
    14df:	02 00                	add    al,BYTE PTR [eax]
    14e1:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    14e4:	ab                   	stos   DWORD PTR es:[edi],eax
    14e5:	03 00                	add    eax,DWORD PTR [eax]
    14e7:	00 05 0a 0a 03 00    	add    BYTE PTR ds:0x30a0a,al
    14ed:	00 06                	add    BYTE PTR [esi],al
    14ef:	0a e1                	or     ah,cl
    14f1:	03 00                	add    eax,DWORD PTR [eax]
    14f3:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    14f6:	4c                   	dec    esp
    14f7:	03 00                	add    eax,DWORD PTR [eax]
    14f9:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    14fc:	f0 03 00             	lock add eax,DWORD PTR [eax]
    14ff:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    1502:	d2 02                	rol    BYTE PTR [edx],cl
    1504:	00 00                	add    BYTE PTR [eax],al
    1506:	97                   	xchg   edi,eax
    1507:	0b 69 03             	or     ebp,DWORD PTR [ecx+0x3]
    150a:	00 00                	add    BYTE PTR [eax],al
    150c:	63 01                	arpl   WORD PTR [ecx],ax
    150e:	0b 3f                	or     edi,DWORD PTR [edi]
    1510:	03 00                	add    eax,DWORD PTR [eax]
    1512:	00 64 01 0b          	add    BYTE PTR [ecx+eax*1+0xb],ah
    1516:	d3 03                	rol    DWORD PTR [ebx],cl
    1518:	00 00                	add    BYTE PTR [eax],al
    151a:	65 01 0b             	add    DWORD PTR gs:[ebx],ecx
    151d:	b4 02                	mov    ah,0x2
    151f:	00 00                	add    BYTE PTR [eax],al
    1521:	66 01 0b             	add    WORD PTR [ebx],cx
    1524:	08 04 00             	or     BYTE PTR [eax+eax*1],al
    1527:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    152a:	0b 17                	or     edx,DWORD PTR [edi]
    152c:	03 00                	add    eax,DWORD PTR [eax]
    152e:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1531:	0b 99 02 00 00 69    	or     ebx,DWORD PTR [ecx+0x69000002]
    1537:	01 0b                	add    DWORD PTR [ebx],ecx
    1539:	80 03 00             	add    BYTE PTR [ebx],0x0
    153c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    153f:	0b c2                	or     eax,edx
    1541:	02 00                	add    al,BYTE PTR [eax]
    1543:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    1546:	0b b9 03 00 00 00    	or     edi,DWORD PTR [ecx+0x3]
    154c:	03 0b                	add    ecx,DWORD PTR [ebx]
    154e:	24 03                	and    al,0x3
    1550:	00 00                	add    BYTE PTR [eax],al
    1552:	01 03                	add    DWORD PTR [ebx],eax
    1554:	0b a8 02 00 00 02    	or     ebp,DWORD PTR [eax+0x2000002]
    155a:	03 0b                	add    ecx,DWORD PTR [ebx]
    155c:	6d                   	ins    DWORD PTR es:[edi],dx
    155d:	02 00                	add    al,BYTE PTR [eax]
    155f:	00 03                	add    BYTE PTR [ebx],al
    1561:	03 0b                	add    ecx,DWORD PTR [ebx]
    1563:	7d 02                	jge    1567 <sysEnter_Vector-0x12ea99>
    1565:	00 00                	add    BYTE PTR [eax],al
    1567:	04 03                	add    al,0x3
    1569:	00 02                	add    BYTE PTR [edx],al
    156b:	04 07                	add    al,0x7
    156d:	39 00                	cmp    DWORD PTR [eax],eax
    156f:	00 00                	add    BYTE PTR [eax],al
    1571:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1574:	e1 00                	loope  1576 <sysEnter_Vector-0x12ea8a>
    1576:	00 00                	add    BYTE PTR [eax],al
    1578:	0c 04                	or     al,0x4
    157a:	08 04 8c             	or     BYTE PTR [esp+ecx*4],al
    157d:	00 00                	add    BYTE PTR [eax],al
    157f:	00 0d 49 06 00 00    	add    BYTE PTR ds:0x649,cl
    1585:	01 0c 60             	add    DWORD PTR [eax+eiz*2],ecx
    1588:	0e                   	push   cs
    1589:	00 30                	add    BYTE PTR [eax],dh
    158b:	6c                   	ins    BYTE PTR es:[edi],dx
    158c:	00 00                	add    BYTE PTR [eax],al
    158e:	00 01                	add    BYTE PTR [ecx],al
    1590:	9c                   	pushf  
    1591:	0e                   	push   cs
    1592:	69 06 00 00 01 16    	imul   eax,DWORD PTR [esi],0x16010000
    1598:	5a                   	pop    edx
    1599:	00 00                	add    BYTE PTR [eax],al
    159b:	00 cc                	add    ah,cl
    159d:	0e                   	push   cs
    159e:	00 30                	add    BYTE PTR [eax],dh
    15a0:	87 00                	xchg   DWORD PTR [eax],eax
    15a2:	00 00                	add    BYTE PTR [eax],al
    15a4:	01 9c fa 01 00 00 0f 	add    DWORD PTR [edx+edi*8+0xf000001],ebx
    15ab:	ce                   	into   
    15ac:	03 00                	add    eax,DWORD PTR [eax]
    15ae:	00 01                	add    BYTE PTR [ecx],al
    15b0:	16                   	push   ss
    15b1:	73 00                	jae    15b3 <sysEnter_Vector-0x12ea4d>
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	02 91 00 10 fb 05    	add    dl,BYTE PTR [ecx+0x5fb1000]
    15bb:	00 00                	add    BYTE PTR [eax],al
    15bd:	01 1a                	add    DWORD PTR [edx],ebx
    15bf:	5a                   	pop    edx
    15c0:	00 00                	add    BYTE PTR [eax],al
    15c2:	00 02                	add    BYTE PTR [edx],al
    15c4:	91                   	xchg   ecx,eax
    15c5:	74 00                	je     15c7 <sysEnter_Vector-0x12ea39>
    15c7:	11 96 06 00 00 01    	adc    DWORD PTR [esi+0x1000006],edx
    15cd:	2e                   	cs
    15ce:	53                   	push   ebx
    15cf:	0f 00                	(bad)  
    15d1:	30 39                	xor    BYTE PTR [ecx],bh
    15d3:	00 00                	add    BYTE PTR [eax],al
    15d5:	00 01                	add    BYTE PTR [ecx],al
    15d7:	9c                   	pushf  
    15d8:	36 02 00             	add    al,BYTE PTR ss:[eax]
    15db:	00 0f                	add    BYTE PTR [edi],cl
    15dd:	f2 05 00 00 01 2e    	repnz add eax,0x2e010000
    15e3:	ab                   	stos   DWORD PTR es:[edi],eax
    15e4:	01 00                	add    DWORD PTR [eax],eax
    15e6:	00 02                	add    BYTE PTR [edx],al
    15e8:	91                   	xchg   ecx,eax
    15e9:	00 12                	add    BYTE PTR [edx],dl
    15eb:	6d                   	ins    DWORD PTR es:[edi],dx
    15ec:	70 00                	jo     15ee <sysEnter_Vector-0x12ea12>
    15ee:	01 30                	add    DWORD PTR [eax],esi
    15f0:	36 02 00             	add    al,BYTE PTR ss:[eax]
    15f3:	00 02                	add    BYTE PTR [edx],al
    15f5:	91                   	xchg   ecx,eax
    15f6:	74 13                	je     160b <sysEnter_Vector-0x12e9f5>
    15f8:	54                   	push   esp
    15f9:	06                   	push   es
    15fa:	00 00                	add    BYTE PTR [eax],al
    15fc:	01 3a                	add    DWORD PTR [edx],edi
    15fe:	7e 0f                	jle    160f <sysEnter_Vector-0x12e9f1>
    1600:	00 30                	add    BYTE PTR [eax],dh
    1602:	00 08                	add    BYTE PTR [eax],cl
    1604:	04 dd                	add    al,0xdd
    1606:	00 00                	add    BYTE PTR [eax],al
    1608:	00 14 19             	add    BYTE PTR [ecx+ebx*1],dl
    160b:	06                   	push   es
    160c:	00 00                	add    BYTE PTR [eax],al
    160e:	01 40 ab             	add    DWORD PTR [eax-0x55],eax
    1611:	01 00                	add    DWORD PTR [eax],eax
    1613:	00 8c 0f 00 30 d4 01 	add    BYTE PTR [edi+ecx*1+0x1d43000],cl
    161a:	00 00                	add    BYTE PTR [eax],al
    161c:	01 9c aa 02 00 00 0f 	add    DWORD PTR [edx+ebp*4+0xf000002],ebx
    1623:	ce                   	into   
    1624:	03 00                	add    eax,DWORD PTR [eax]
    1626:	00 01                	add    BYTE PTR [ecx],al
    1628:	40                   	inc    eax
    1629:	73 00                	jae    162b <sysEnter_Vector-0x12e9d5>
    162b:	00 00                	add    BYTE PTR [eax],al
    162d:	02 91 00 10 67 04    	add    dl,BYTE PTR [ecx+0x4671000]
    1633:	00 00                	add    BYTE PTR [eax],al
    1635:	01 42 ab             	add    DWORD PTR [edx-0x55],eax
    1638:	01 00                	add    DWORD PTR [eax],eax
    163a:	00 02                	add    BYTE PTR [edx],al
    163c:	91                   	xchg   ecx,eax
    163d:	60                   	pusha  
    163e:	10 36                	adc    BYTE PTR [esi],dh
    1640:	06                   	push   es
    1641:	00 00                	add    BYTE PTR [eax],al
    1643:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    1647:	00 00                	add    BYTE PTR [eax],al
    1649:	02 91 6c 10 e5 05    	add    dl,BYTE PTR [ecx+0x5e5106c]
    164f:	00 00                	add    BYTE PTR [eax],al
    1651:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    1654:	00 00                	add    BYTE PTR [eax],al
    1656:	00 02                	add    BYTE PTR [edx],al
    1658:	91                   	xchg   ecx,eax
    1659:	68 10 21 06 00       	push   0x62110
    165e:	00 01                	add    BYTE PTR [ecx],al
    1660:	46                   	inc    esi
    1661:	36 02 00             	add    al,BYTE PTR ss:[eax]
    1664:	00 02                	add    BYTE PTR [edx],al
    1666:	91                   	xchg   ecx,eax
    1667:	64 10 5d 06          	adc    BYTE PTR fs:[ebp+0x6],bl
    166b:	00 00                	add    BYTE PTR [eax],al
    166d:	01 47 aa             	add    DWORD PTR [edi-0x56],eax
    1670:	02 00                	add    al,BYTE PTR [eax]
    1672:	00 02                	add    BYTE PTR [edx],al
    1674:	91                   	xchg   ecx,eax
    1675:	5c                   	pop    esp
    1676:	00 08                	add    BYTE PTR [eax],cl
    1678:	04 41                	add    al,0x41
    167a:	00 00                	add    BYTE PTR [eax],al
    167c:	00 14 4d 06 00 00 01 	add    BYTE PTR [ecx*2+0x1000006],dl
    1683:	67 ab                	stos   DWORD PTR es:[di],eax
    1685:	01 00                	add    DWORD PTR [eax],eax
    1687:	00 60 11             	add    BYTE PTR [eax+0x11],ah
    168a:	00 30                	add    BYTE PTR [eax],dh
    168c:	20 00                	and    BYTE PTR [eax],al
    168e:	00 00                	add    BYTE PTR [eax],al
    1690:	01 9c d8 02 00 00 0f 	add    DWORD PTR [eax+ebx*8+0xf000002],ebx
    1697:	ce                   	into   
    1698:	03 00                	add    eax,DWORD PTR [eax]
    169a:	00 01                	add    BYTE PTR [ecx],al
    169c:	67 73 00             	addr16 jae 169f <sysEnter_Vector-0x12e961>
    169f:	00 00                	add    BYTE PTR [eax],al
    16a1:	02 91 00 00 15 31    	add    dl,BYTE PTR [ecx+0x31150000]
    16a7:	06                   	push   es
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	01 6c 80 11          	add    DWORD PTR [eax+eax*4+0x11],ebp
    16ae:	00 30                	add    BYTE PTR [eax],dh
    16b0:	1b 00                	sbb    eax,DWORD PTR [eax]
    16b2:	00 00                	add    BYTE PTR [eax],al
    16b4:	01 9c fc 02 00 00 0f 	add    DWORD PTR [esp+edi*8+0xf000002],ebx
    16bb:	f2 05 00 00 01 6c    	repnz add eax,0x6c010000
    16c1:	ab                   	stos   DWORD PTR es:[edi],eax
    16c2:	01 00                	add    DWORD PTR [eax],eax
    16c4:	00 02                	add    BYTE PTR [edx],al
    16c6:	91                   	xchg   ecx,eax
    16c7:	00 00                	add    BYTE PTR [eax],al
    16c9:	0d 03 06 00 00       	or     eax,0x603
    16ce:	01 71 9b             	add    DWORD PTR [ecx-0x65],esi
    16d1:	11 00                	adc    DWORD PTR [eax],eax
    16d3:	30 32                	xor    BYTE PTR [edx],dh
    16d5:	00 00                	add    BYTE PTR [eax],al
    16d7:	00 01                	add    BYTE PTR [ecx],al
    16d9:	9c                   	pushf  
    16da:	16                   	push   ss
    16db:	4b                   	dec    ebx
    16dc:	00 00                	add    BYTE PTR [eax],al
    16de:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    16e1:	5a                   	pop    edx
    16e2:	00 00                	add    BYTE PTR [eax],al
    16e4:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    16ea:	30 16                	xor    BYTE PTR [esi],dl
    16ec:	af                   	scas   eax,DWORD PTR es:[edi]
    16ed:	00 00                	add    BYTE PTR [eax],al
    16ef:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    16f6:	05 03 c0 43 00       	add    eax,0x43c003
    16fb:	30 16                	xor    BYTE PTR [esi],dl
    16fd:	5b                   	pop    ebx
    16fe:	01 00                	add    DWORD PTR [eax],eax
    1700:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1703:	5a                   	pop    edx
    1704:	00 00                	add    BYTE PTR [eax],al
    1706:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    170c:	30 16                	xor    BYTE PTR [esi],dl
    170e:	54                   	push   esp
    170f:	00 00                	add    BYTE PTR [eax],al
    1711:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1714:	5a                   	pop    edx
    1715:	00 00                	add    BYTE PTR [eax],al
    1717:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    171d:	30 16                	xor    BYTE PTR [esi],dl
    171f:	28 00                	sub    BYTE PTR [eax],al
    1721:	00 00                	add    BYTE PTR [eax],al
    1723:	05 45 62 03 00       	add    eax,0x36245
    1728:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    172e:	30 08                	xor    BYTE PTR [eax],cl
    1730:	04 ad                	add    al,0xad
    1732:	01 00                	add    DWORD PTR [eax],eax
    1734:	00 00                	add    BYTE PTR [eax],al
    1736:	ea 01 00 00 04 00 f5 	jmp    0xf500:0x4000001
    173d:	07                   	pop    es
    173e:	00 00                	add    BYTE PTR [eax],al
    1740:	04 01                	add    al,0x1
    1742:	f4                   	hlt    
    1743:	00 00                	add    BYTE PTR [eax],al
    1745:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
    1748:	06                   	push   es
    1749:	00 00                	add    BYTE PTR [eax],al
    174b:	72 00                	jb     174d <sysEnter_Vector-0x12e8b3>
    174d:	00 00                	add    BYTE PTR [eax],al
    174f:	d0 11                	rcl    BYTE PTR [ecx],1
    1751:	00 30                	add    BYTE PTR [eax],dh
    1753:	9b                   	fwait
    1754:	01 00                	add    DWORD PTR [eax],eax
    1756:	00 fc                	add    ah,bh
    1758:	09 00                	or     DWORD PTR [eax],eax
    175a:	00 02                	add    BYTE PTR [edx],al
    175c:	01 08                	add    DWORD PTR [eax],ecx
    175e:	5b                   	pop    ebx
    175f:	00 00                	add    BYTE PTR [eax],al
    1761:	00 02                	add    BYTE PTR [edx],al
    1763:	02 07                	add    al,BYTE PTR [edi]
    1765:	0e                   	push   cs
    1766:	00 00                	add    BYTE PTR [eax],al
    1768:	00 02                	add    BYTE PTR [edx],al
    176a:	04 07                	add    al,0x7
    176c:	3e 00 00             	add    BYTE PTR ds:[eax],al
    176f:	00 02                	add    BYTE PTR [edx],al
    1771:	04 07                	add    al,0x7
    1773:	39 00                	cmp    DWORD PTR [eax],eax
    1775:	00 00                	add    BYTE PTR [eax],al
    1777:	02 01                	add    al,BYTE PTR [ecx]
    1779:	06                   	push   es
    177a:	5d                   	pop    ebp
    177b:	00 00                	add    BYTE PTR [eax],al
    177d:	00 02                	add    BYTE PTR [edx],al
    177f:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1785:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    178c:	02 08                	add    cl,BYTE PTR [eax]
    178e:	05 00 00 00 00       	add    eax,0x0
    1793:	02 08                	add    cl,BYTE PTR [eax]
    1795:	07                   	pop    es
    1796:	34 00                	xor    al,0x0
    1798:	00 00                	add    BYTE PTR [eax],al
    179a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    17a1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    17a4:	e1 00                	loope  17a6 <sysEnter_Vector-0x12e85a>
    17a6:	00 00                	add    BYTE PTR [eax],al
    17a8:	04 04                	add    al,0x4
    17aa:	05 04 7a 00 00       	add    eax,0x7a04
    17af:	00 02                	add    BYTE PTR [edx],al
    17b1:	01 06                	add    DWORD PTR [esi],eax
    17b3:	64 00 00             	add    BYTE PTR fs:[eax],al
    17b6:	00 06                	add    BYTE PTR [esi],al
    17b8:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    17be:	33 00                	xor    eax,DWORD PTR [eax]
    17c0:	00 00                	add    BYTE PTR [eax],al
    17c2:	05 04 92 00 00       	add    eax,0x9204
    17c7:	00 07                	add    BYTE PTR [edi],al
    17c9:	7a 00                	jp     17cb <sysEnter_Vector-0x12e835>
    17cb:	00 00                	add    BYTE PTR [eax],al
    17cd:	06                   	push   es
    17ce:	81 04 00 00 03 d8 33 	add    DWORD PTR [eax+eax*1],0x33d80300
    17d5:	00 00                	add    BYTE PTR [eax],al
    17d7:	00 02                	add    BYTE PTR [edx],al
    17d9:	0c 04                	or     al,0x4
    17db:	9b                   	fwait
    17dc:	00 00                	add    BYTE PTR [eax],al
    17de:	00 02                	add    BYTE PTR [edx],al
    17e0:	01 02                	add    DWORD PTR [edx],eax
    17e2:	95                   	xchg   ebp,eax
    17e3:	00 00                	add    BYTE PTR [eax],al
    17e5:	00 08                	add    BYTE PTR [eax],cl
    17e7:	bd 06 00 00 01       	mov    ebp,0x1000006
    17ec:	0a 72 00             	or     dh,BYTE PTR [edx+0x0]
    17ef:	00 00                	add    BYTE PTR [eax],al
    17f1:	d0 11                	rcl    BYTE PTR [ecx],1
    17f3:	00 30                	add    BYTE PTR [eax],dh
    17f5:	9b                   	fwait
    17f6:	01 00                	add    DWORD PTR [eax],eax
    17f8:	00 01                	add    BYTE PTR [ecx],al
    17fa:	9c                   	pushf  
    17fb:	7a 01                	jp     17fe <sysEnter_Vector-0x12e802>
    17fd:	00 00                	add    BYTE PTR [eax],al
    17ff:	09 b8 06 00 00 01    	or     DWORD PTR [eax+0x1000006],edi
    1805:	0a 72 00             	or     dh,BYTE PTR [edx+0x0]
    1808:	00 00                	add    BYTE PTR [eax],al
    180a:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1810:	63 00                	arpl   WORD PTR [eax],ax
    1812:	01 0a                	add    DWORD PTR [edx],ecx
    1814:	7a 01                	jp     1817 <sysEnter_Vector-0x12e7e9>
    1816:	00 00                	add    BYTE PTR [eax],al
    1818:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    181e:	01 0a                	add    DWORD PTR [edx],ecx
    1820:	97                   	xchg   edi,eax
    1821:	00 00                	add    BYTE PTR [eax],al
    1823:	00 02                	add    BYTE PTR [edx],al
    1825:	91                   	xchg   ecx,eax
    1826:	08 0b                	or     BYTE PTR [ebx],cl
    1828:	64                   	fs
    1829:	77 00                	ja     182b <sysEnter_Vector-0x12e7d5>
    182b:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    182e:	00 00                	add    BYTE PTR [eax],al
    1830:	00 02                	add    BYTE PTR [edx],al
    1832:	91                   	xchg   ecx,eax
    1833:	5e                   	pop    esi
    1834:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    1838:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    183b:	00 00                	add    BYTE PTR [eax],al
    183d:	00 02                	add    BYTE PTR [edx],al
    183f:	91                   	xchg   ecx,eax
    1840:	5f                   	pop    edi
    1841:	0c 02                	or     al,0x2
    1843:	12 00                	adc    al,BYTE PTR [eax]
    1845:	30 7d 00             	xor    BYTE PTR [ebp+0x0],bh
    1848:	00 00                	add    BYTE PTR [eax],al
    184a:	31 01                	xor    DWORD PTR [ecx],eax
    184c:	00 00                	add    BYTE PTR [eax],al
    184e:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1851:	01 13                	add    DWORD PTR [ebx],edx
    1853:	81 01 00 00 02 91    	add    DWORD PTR [ecx],0x91020000
    1859:	74 0b                	je     1866 <sysEnter_Vector-0x12e79a>
    185b:	74 00                	je     185d <sysEnter_Vector-0x12e7a3>
    185d:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    1860:	01 00                	add    DWORD PTR [eax],eax
    1862:	00 02                	add    BYTE PTR [edx],al
    1864:	91                   	xchg   ecx,eax
    1865:	70 00                	jo     1867 <sysEnter_Vector-0x12e799>
    1867:	0c 85                	or     al,0x85
    1869:	12 00                	adc    al,BYTE PTR [eax]
    186b:	30 79 00             	xor    BYTE PTR [ecx+0x0],bh
    186e:	00 00                	add    BYTE PTR [eax],al
    1870:	57                   	push   edi
    1871:	01 00                	add    DWORD PTR [eax],eax
    1873:	00 0b                	add    BYTE PTR [ebx],cl
    1875:	66                   	data16
    1876:	00 01                	add    BYTE PTR [ecx],al
    1878:	23 81 01 00 00 02    	and    eax,DWORD PTR [ecx+0x2000001]
    187e:	91                   	xchg   ecx,eax
    187f:	6c                   	ins    BYTE PTR es:[edi],dx
    1880:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    1884:	24 8c                	and    al,0x8c
    1886:	01 00                	add    DWORD PTR [eax],eax
    1888:	00 02                	add    BYTE PTR [edx],al
    188a:	91                   	xchg   ecx,eax
    188b:	68 00 0d fe 12       	push   0x12fe0d00
    1890:	00 30                	add    BYTE PTR [eax],dh
    1892:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    1895:	00 0b                	add    BYTE PTR [ebx],cl
    1897:	66                   	data16
    1898:	00 01                	add    BYTE PTR [ecx],al
    189a:	32 8c 00 00 00 02 91 	xor    cl,BYTE PTR [eax+eax*1-0x6efe0000]
    18a1:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    18a6:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    18aa:	00 02                	add    BYTE PTR [edx],al
    18ac:	91                   	xchg   ecx,eax
    18ad:	60                   	pusha  
    18ae:	00 00                	add    BYTE PTR [eax],al
    18b0:	05 04 80 01 00       	add    eax,0x18004
    18b5:	00 0e                	add    BYTE PTR [esi],cl
    18b7:	05 04 87 01 00       	add    eax,0x18704
    18bc:	00 07                	add    BYTE PTR [edi],al
    18be:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    18c4:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    18ca:	00 00                	add    BYTE PTR [eax],al
    18cc:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    18cf:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    18d5:	bc 43 00 30 0f       	mov    esp,0xf300043
    18da:	af                   	scas   eax,DWORD PTR es:[edi]
    18db:	00 00                	add    BYTE PTR [eax],al
    18dd:	00 04 35 81 00 00 00 	add    BYTE PTR [esi*1+0x81],al
    18e4:	05 03 c0 43 00       	add    eax,0x43c003
    18e9:	30 0f                	xor    BYTE PTR [edi],cl
    18eb:	5b                   	pop    ebx
    18ec:	01 00                	add    DWORD PTR [eax],eax
    18ee:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    18f1:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    18f7:	b8 43 00 30 0f       	mov    eax,0xf300043
    18fc:	54                   	push   esp
    18fd:	00 00                	add    BYTE PTR [eax],al
    18ff:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1902:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1908:	c8 43 00 30          	enter  0x43,0x30
    190c:	0f 28 00             	movaps xmm0,XMMWORD PTR [eax]
    190f:	00 00                	add    BYTE PTR [eax],al
    1911:	05 45 e7 01 00       	add    eax,0x1e745
    1916:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    191c:	30 05 04 74 00 00    	xor    BYTE PTR ds:0x7404,al
    1922:	00 00                	add    BYTE PTR [eax],al
    1924:	eb 01                	jmp    1927 <sysEnter_Vector-0x12e6d9>
    1926:	00 00                	add    BYTE PTR [eax],al
    1928:	04 00                	add    al,0x0
    192a:	b6 08                	mov    dh,0x8
    192c:	00 00                	add    BYTE PTR [eax],al
    192e:	04 01                	add    al,0x1
    1930:	f4                   	hlt    
    1931:	00 00                	add    BYTE PTR [eax],al
    1933:	00 0c d0             	add    BYTE PTR [eax+edx*8],cl
    1936:	06                   	push   es
    1937:	00 00                	add    BYTE PTR [eax],al
    1939:	72 00                	jb     193b <sysEnter_Vector-0x12e6c5>
    193b:	00 00                	add    BYTE PTR [eax],al
    193d:	6c                   	ins    BYTE PTR es:[edi],dx
    193e:	13 00                	adc    eax,DWORD PTR [eax]
    1940:	30 e7                	xor    bh,ah
    1942:	00 00                	add    BYTE PTR [eax],al
    1944:	00 e3                	add    bl,ah
    1946:	0a 00                	or     al,BYTE PTR [eax]
    1948:	00 02                	add    BYTE PTR [edx],al
    194a:	01 06                	add    DWORD PTR [esi],eax
    194c:	64 00 00             	add    BYTE PTR fs:[eax],al
    194f:	00 02                	add    BYTE PTR [edx],al
    1951:	01 06                	add    DWORD PTR [esi],eax
    1953:	5d                   	pop    ebp
    1954:	00 00                	add    BYTE PTR [eax],al
    1956:	00 02                	add    BYTE PTR [edx],al
    1958:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    195e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1965:	02 08                	add    cl,BYTE PTR [eax]
    1967:	05 00 00 00 00       	add    eax,0x0
    196c:	04 29                	add    al,0x29
    196e:	06                   	push   es
    196f:	00 00                	add    BYTE PTR [eax],al
    1971:	02 2e                	add    ch,BYTE PTR [esi]
    1973:	53                   	push   ebx
    1974:	00 00                	add    BYTE PTR [eax],al
    1976:	00 02                	add    BYTE PTR [edx],al
    1978:	01 08                	add    DWORD PTR [eax],ecx
    197a:	5b                   	pop    ebx
    197b:	00 00                	add    BYTE PTR [eax],al
    197d:	00 04 ea             	add    BYTE PTR [edx+ebp*8],al
    1980:	06                   	push   es
    1981:	00 00                	add    BYTE PTR [eax],al
    1983:	02 31                	add    dh,BYTE PTR [ecx]
    1985:	65 00 00             	add    BYTE PTR gs:[eax],al
    1988:	00 02                	add    BYTE PTR [edx],al
    198a:	02 07                	add    al,BYTE PTR [edi]
    198c:	0e                   	push   cs
    198d:	00 00                	add    BYTE PTR [eax],al
    198f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1992:	00 00                	add    BYTE PTR [eax],al
    1994:	00 02                	add    BYTE PTR [edx],al
    1996:	34 77                	xor    al,0x77
    1998:	00 00                	add    BYTE PTR [eax],al
    199a:	00 02                	add    BYTE PTR [edx],al
    199c:	04 07                	add    al,0x7
    199e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    19a1:	00 02                	add    BYTE PTR [edx],al
    19a3:	08 07                	or     BYTE PTR [edi],al
    19a5:	34 00                	xor    al,0x0
    19a7:	00 00                	add    BYTE PTR [eax],al
    19a9:	04 81                	add    al,0x81
    19ab:	04 00                	add    al,0x0
    19ad:	00 03                	add    BYTE PTR [ebx],al
    19af:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    19b2:	00 00                	add    BYTE PTR [eax],al
    19b4:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    19bb:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    19be:	9b                   	fwait
    19bf:	00 00                	add    BYTE PTR [eax],al
    19c1:	00 02                	add    BYTE PTR [edx],al
    19c3:	01 02                	add    DWORD PTR [edx],eax
    19c5:	95                   	xchg   ebp,eax
    19c6:	00 00                	add    BYTE PTR [eax],al
    19c8:	00 02                	add    BYTE PTR [edx],al
    19ca:	04 07                	add    al,0x7
    19cc:	39 00                	cmp    DWORD PTR [eax],eax
    19ce:	00 00                	add    BYTE PTR [eax],al
    19d0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    19d3:	e1 00                	loope  19d5 <sysEnter_Vector-0x12e62b>
    19d5:	00 00                	add    BYTE PTR [eax],al
    19d7:	05 04 06 04 25       	add    eax,0x25040604
    19dc:	00 00                	add    BYTE PTR [eax],al
    19de:	00 07                	add    BYTE PTR [edi],al
    19e0:	e2 06                	loop   19e8 <sysEnter_Vector-0x12e618>
    19e2:	00 00                	add    BYTE PTR [eax],al
    19e4:	01 08                	add    DWORD PTR [eax],ecx
    19e6:	b3 00                	mov    bl,0x0
    19e8:	00 00                	add    BYTE PTR [eax],al
    19ea:	6c                   	ins    BYTE PTR es:[edi],dx
    19eb:	13 00                	adc    eax,DWORD PTR [eax]
    19ed:	30 c7                	xor    bh,al
    19ef:	00 00                	add    BYTE PTR [eax],al
    19f1:	00 01                	add    BYTE PTR [ecx],al
    19f3:	9c                   	pushf  
    19f4:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    19f7:	00 08                	add    BYTE PTR [eax],cl
    19f9:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    19fc:	01 08                	add    DWORD PTR [eax],ecx
    19fe:	b3 00                	mov    bl,0x0
    1a00:	00 00                	add    BYTE PTR [eax],al
    1a02:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1a08:	6c                   	ins    BYTE PTR es:[edi],dx
    1a09:	00 01                	add    BYTE PTR [ecx],al
    1a0b:	08 3a                	or     BYTE PTR [edx],bh
    1a0d:	00 00                	add    BYTE PTR [eax],al
    1a0f:	00 02                	add    BYTE PTR [edx],al
    1a11:	91                   	xchg   ecx,eax
    1a12:	04 08                	add    al,0x8
    1a14:	6c                   	ins    BYTE PTR es:[edi],dx
    1a15:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1a17:	00 01                	add    BYTE PTR [ecx],al
    1a19:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1a1f:	91                   	xchg   ecx,eax
    1a20:	08 09                	or     BYTE PTR [ecx],cl
    1a22:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1a25:	0a 3e                	or     bh,BYTE PTR [esi]
    1a27:	01 00                	add    DWORD PTR [eax],eax
    1a29:	00 02                	add    BYTE PTR [edx],al
    1a2b:	91                   	xchg   ecx,eax
    1a2c:	74 09                	je     1a37 <sysEnter_Vector-0x12e5c9>
    1a2e:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1a31:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    1a35:	00 02                	add    BYTE PTR [edx],al
    1a37:	91                   	xchg   ecx,eax
    1a38:	70 0a                	jo     1a44 <sysEnter_Vector-0x12e5bc>
    1a3a:	c4 06                	les    eax,FWORD PTR [esi]
    1a3c:	00 00                	add    BYTE PTR [eax],al
    1a3e:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1a41:	00 00                	add    BYTE PTR [eax],al
    1a43:	00 02                	add    BYTE PTR [edx],al
    1a45:	91                   	xchg   ecx,eax
    1a46:	6a 09                	push   0x9
    1a48:	66                   	data16
    1a49:	00 01                	add    BYTE PTR [ecx],al
    1a4b:	0d 4a 01 00 00       	or     eax,0x14a
    1a50:	02 91 6c 0a dd 06    	add    dl,BYTE PTR [ecx+0x6dd0a6c]
    1a56:	00 00                	add    BYTE PTR [eax],al
    1a58:	01 0e                	add    DWORD PTR [esi],ecx
    1a5a:	6c                   	ins    BYTE PTR es:[edi],dx
    1a5b:	00 00                	add    BYTE PTR [eax],al
    1a5d:	00 02                	add    BYTE PTR [edx],al
    1a5f:	91                   	xchg   ecx,eax
    1a60:	64 00 06             	add    BYTE PTR fs:[esi],al
    1a63:	04 48                	add    al,0x48
    1a65:	00 00                	add    BYTE PTR [eax],al
    1a67:	00 06                	add    BYTE PTR [esi],al
    1a69:	04 5a                	add    al,0x5a
    1a6b:	00 00                	add    BYTE PTR [eax],al
    1a6d:	00 06                	add    BYTE PTR [esi],al
    1a6f:	04 6c                	add    al,0x6c
    1a71:	00 00                	add    BYTE PTR [eax],al
    1a73:	00 0b                	add    BYTE PTR [ebx],cl
    1a75:	c9                   	leave  
    1a76:	06                   	push   es
    1a77:	00 00                	add    BYTE PTR [eax],al
    1a79:	01 1f                	add    DWORD PTR [edi],ebx
    1a7b:	b3 00                	mov    bl,0x0
    1a7d:	00 00                	add    BYTE PTR [eax],al
    1a7f:	33 14 00             	xor    edx,DWORD PTR [eax+eax*1]
    1a82:	30 20                	xor    BYTE PTR [eax],ah
    1a84:	00 00                	add    BYTE PTR [eax],al
    1a86:	00 01                	add    BYTE PTR [ecx],al
    1a88:	9c                   	pushf  
    1a89:	93                   	xchg   ebx,eax
    1a8a:	01 00                	add    DWORD PTR [eax],eax
    1a8c:	00 08                	add    BYTE PTR [eax],cl
    1a8e:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1a91:	01 1f                	add    DWORD PTR [edi],ebx
    1a93:	b3 00                	mov    bl,0x0
    1a95:	00 00                	add    BYTE PTR [eax],al
    1a97:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1a9d:	6c                   	ins    BYTE PTR es:[edi],dx
    1a9e:	00 01                	add    BYTE PTR [ecx],al
    1aa0:	1f                   	pop    ds
    1aa1:	3a 00                	cmp    al,BYTE PTR [eax]
    1aa3:	00 00                	add    BYTE PTR [eax],al
    1aa5:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1aab:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1aac:	00 01                	add    BYTE PTR [ecx],al
    1aae:	1f                   	pop    ds
    1aaf:	85 00                	test   DWORD PTR [eax],eax
    1ab1:	00 00                	add    BYTE PTR [eax],al
    1ab3:	02 91 08 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0008]
    1ab9:	00 00                	add    BYTE PTR [eax],al
    1abb:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1abe:	6c                   	ins    BYTE PTR es:[edi],dx
    1abf:	00 00                	add    BYTE PTR [eax],al
    1ac1:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    1ac7:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    1aca:	00 00                	add    BYTE PTR [eax],al
    1acc:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1ad3:	05 03 c0 43 00       	add    eax,0x43c003
    1ad8:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    1adb:	01 00                	add    DWORD PTR [eax],eax
    1add:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1ae0:	6c                   	ins    BYTE PTR es:[edi],dx
    1ae1:	00 00                	add    BYTE PTR [eax],al
    1ae3:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    1ae9:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    1aec:	00 00                	add    BYTE PTR [eax],al
    1aee:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1af1:	6c                   	ins    BYTE PTR es:[edi],dx
    1af2:	00 00                	add    BYTE PTR [eax],al
    1af4:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    1afa:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    1afd:	00 00                	add    BYTE PTR [eax],al
    1aff:	00 05 45 e8 01 00    	add    BYTE PTR ds:0x1e845,al
    1b05:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    1b0b:	30 06                	xor    BYTE PTR [esi],al
    1b0d:	04 b5                	add    al,0xb5
    1b0f:	00 00                	add    BYTE PTR [eax],al
    1b11:	00 00                	add    BYTE PTR [eax],al
    1b13:	75 01                	jne    1b16 <sysEnter_Vector-0x12e4ea>
    1b15:	00 00                	add    BYTE PTR [eax],al
    1b17:	04 00                	add    al,0x0
    1b19:	73 09                	jae    1b24 <sysEnter_Vector-0x12e4dc>
    1b1b:	00 00                	add    BYTE PTR [eax],al
    1b1d:	04 01                	add    al,0x1
    1b1f:	f4                   	hlt    
    1b20:	00 00                	add    BYTE PTR [eax],al
    1b22:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
    1b25:	07                   	pop    es
    1b26:	00 00                	add    BYTE PTR [eax],al
    1b28:	72 00                	jb     1b2a <sysEnter_Vector-0x12e4d6>
    1b2a:	00 00                	add    BYTE PTR [eax],al
    1b2c:	54                   	push   esp
    1b2d:	14 00                	adc    al,0x0
    1b2f:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
    1b32:	00 00                	add    BYTE PTR [eax],al
    1b34:	b1 0b                	mov    cl,0xb
    1b36:	00 00                	add    BYTE PTR [eax],al
    1b38:	02 01                	add    al,BYTE PTR [ecx]
    1b3a:	06                   	push   es
    1b3b:	64 00 00             	add    BYTE PTR fs:[eax],al
    1b3e:	00 02                	add    BYTE PTR [edx],al
    1b40:	01 06                	add    DWORD PTR [esi],eax
    1b42:	5d                   	pop    ebp
    1b43:	00 00                	add    BYTE PTR [eax],al
    1b45:	00 02                	add    BYTE PTR [edx],al
    1b47:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1b4d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1b54:	02 08                	add    cl,BYTE PTR [eax]
    1b56:	05 00 00 00 00       	add    eax,0x0
    1b5b:	02 01                	add    al,BYTE PTR [ecx]
    1b5d:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1b60:	00 00                	add    BYTE PTR [eax],al
    1b62:	02 02                	add    al,BYTE PTR [edx]
    1b64:	07                   	pop    es
    1b65:	0e                   	push   cs
    1b66:	00 00                	add    BYTE PTR [eax],al
    1b68:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1b6b:	00 00                	add    BYTE PTR [eax],al
    1b6d:	00 02                	add    BYTE PTR [edx],al
    1b6f:	34 61                	xor    al,0x61
    1b71:	00 00                	add    BYTE PTR [eax],al
    1b73:	00 02                	add    BYTE PTR [edx],al
    1b75:	04 07                	add    al,0x7
    1b77:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1b7a:	00 02                	add    BYTE PTR [edx],al
    1b7c:	08 07                	or     BYTE PTR [edi],al
    1b7e:	34 00                	xor    al,0x0
    1b80:	00 00                	add    BYTE PTR [eax],al
    1b82:	04 81                	add    al,0x81
    1b84:	04 00                	add    al,0x0
    1b86:	00 03                	add    BYTE PTR [ebx],al
    1b88:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1b8b:	00 00                	add    BYTE PTR [eax],al
    1b8d:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1b94:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1b97:	9b                   	fwait
    1b98:	00 00                	add    BYTE PTR [eax],al
    1b9a:	00 02                	add    BYTE PTR [edx],al
    1b9c:	01 02                	add    DWORD PTR [edx],eax
    1b9e:	95                   	xchg   ebp,eax
    1b9f:	00 00                	add    BYTE PTR [eax],al
    1ba1:	00 02                	add    BYTE PTR [edx],al
    1ba3:	04 07                	add    al,0x7
    1ba5:	39 00                	cmp    DWORD PTR [eax],eax
    1ba7:	00 00                	add    BYTE PTR [eax],al
    1ba9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1bac:	e1 00                	loope  1bae <sysEnter_Vector-0x12e452>
    1bae:	00 00                	add    BYTE PTR [eax],al
    1bb0:	05 04 06 04 25       	add    eax,0x25040604
    1bb5:	00 00                	add    BYTE PTR [eax],al
    1bb7:	00 04 f8             	add    BYTE PTR [eax+edi*8],al
    1bba:	06                   	push   es
    1bbb:	00 00                	add    BYTE PTR [eax],al
    1bbd:	04 15                	add    al,0x15
    1bbf:	7a 00                	jp     1bc1 <sysEnter_Vector-0x12e43f>
    1bc1:	00 00                	add    BYTE PTR [eax],al
    1bc3:	07                   	pop    es
    1bc4:	0a 07                	or     al,BYTE PTR [edi]
    1bc6:	00 00                	add    BYTE PTR [eax],al
    1bc8:	01 09                	add    DWORD PTR [ecx],ecx
    1bca:	9d                   	popf   
    1bcb:	00 00                	add    BYTE PTR [eax],al
    1bcd:	00 54 14 00          	add    BYTE PTR [esp+edx*1+0x0],dl
    1bd1:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
    1bd4:	00 00                	add    BYTE PTR [eax],al
    1bd6:	01 9c 1d 01 00 00 08 	add    DWORD PTR [ebp+ebx*1+0x8000001],ebx
    1bdd:	f3 06                	repz push es
    1bdf:	00 00                	add    BYTE PTR [eax],al
    1be1:	01 09                	add    DWORD PTR [ecx],ecx
    1be3:	9d                   	popf   
    1be4:	00 00                	add    BYTE PTR [eax],al
    1be6:	00 02                	add    BYTE PTR [edx],al
    1be8:	91                   	xchg   ecx,eax
    1be9:	00 09                	add    BYTE PTR [ecx],cl
    1beb:	6c                   	ins    BYTE PTR es:[edi],dx
    1bec:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1bee:	00 01                	add    BYTE PTR [ecx],al
    1bf0:	09 6f 00             	or     DWORD PTR [edi+0x0],ebp
    1bf3:	00 00                	add    BYTE PTR [eax],al
    1bf5:	02 91 04 08 fe 06    	add    dl,BYTE PTR [ecx+0x6fe0804]
    1bfb:	00 00                	add    BYTE PTR [eax],al
    1bfd:	01 09                	add    DWORD PTR [ecx],ecx
    1bff:	3a 00                	cmp    al,BYTE PTR [eax]
    1c01:	00 00                	add    BYTE PTR [eax],al
    1c03:	02 91 08 08 23 08    	add    dl,BYTE PTR [ecx+0x8230808]
    1c09:	00 00                	add    BYTE PTR [eax],al
    1c0b:	01 09                	add    DWORD PTR [ecx],ecx
    1c0d:	3a 00                	cmp    al,BYTE PTR [eax]
    1c0f:	00 00                	add    BYTE PTR [eax],al
    1c11:	02 91 0c 09 66 64    	add    dl,BYTE PTR [ecx+0x6466090c]
    1c17:	00 01                	add    BYTE PTR [ecx],al
    1c19:	09 3a                	or     DWORD PTR [edx],edi
    1c1b:	00 00                	add    BYTE PTR [eax],al
    1c1d:	00 02                	add    BYTE PTR [edx],al
    1c1f:	91                   	xchg   ecx,eax
    1c20:	10 08                	adc    BYTE PTR [eax],cl
    1c22:	03 07                	add    eax,DWORD PTR [edi]
    1c24:	00 00                	add    BYTE PTR [eax],al
    1c26:	01 09                	add    DWORD PTR [ecx],ecx
    1c28:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1c29:	00 00                	add    BYTE PTR [eax],al
    1c2b:	00 02                	add    BYTE PTR [edx],al
    1c2d:	91                   	xchg   ecx,eax
    1c2e:	14 00                	adc    al,0x0
    1c30:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    1c33:	00 00                	add    BYTE PTR [eax],al
    1c35:	05 34 56 00 00       	add    eax,0x5634
    1c3a:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    1c40:	30 0a                	xor    BYTE PTR [edx],cl
    1c42:	af                   	scas   eax,DWORD PTR es:[edi]
    1c43:	00 00                	add    BYTE PTR [eax],al
    1c45:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    1c4b:	00 05 03 c0 43 00    	add    BYTE PTR ds:0x43c003,al
    1c51:	30 0a                	xor    BYTE PTR [edx],cl
    1c53:	5b                   	pop    ebx
    1c54:	01 00                	add    DWORD PTR [eax],eax
    1c56:	00 05 36 56 00 00    	add    BYTE PTR ds:0x5636,al
    1c5c:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    1c62:	30 0a                	xor    BYTE PTR [edx],cl
    1c64:	54                   	push   esp
    1c65:	00 00                	add    BYTE PTR [eax],al
    1c67:	00 05 37 56 00 00    	add    BYTE PTR ds:0x5637,al
    1c6d:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    1c73:	30 0a                	xor    BYTE PTR [edx],cl
    1c75:	28 00                	sub    BYTE PTR [eax],al
    1c77:	00 00                	add    BYTE PTR [eax],al
    1c79:	06                   	push   es
    1c7a:	45                   	inc    ebp
    1c7b:	72 01                	jb     1c7e <sysEnter_Vector-0x12e382>
    1c7d:	00 00                	add    BYTE PTR [eax],al
    1c7f:	05 03 c4 43 00       	add    eax,0x43c403
    1c84:	30 06                	xor    BYTE PTR [esi],al
    1c86:	04 9f                	add    al,0x9f
    1c88:	00 00                	add    BYTE PTR [eax],al
    1c8a:	00 00                	add    BYTE PTR [eax],al
    1c8c:	58                   	pop    eax
    1c8d:	04 00                	add    al,0x0
    1c8f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1c92:	05 0a 00 00 04       	add    eax,0x400000a
    1c97:	01 f4                	add    esp,esi
    1c99:	00 00                	add    BYTE PTR [eax],al
    1c9b:	00 0c 7c             	add    BYTE PTR [esp+edi*2],cl
    1c9e:	07                   	pop    es
    1c9f:	00 00                	add    BYTE PTR [eax],al
    1ca1:	72 00                	jb     1ca3 <sysEnter_Vector-0x12e35d>
    1ca3:	00 00                	add    BYTE PTR [eax],al
    1ca5:	68 14 00 30 84       	push   0x84300014
    1caa:	00 00                	add    BYTE PTR [eax],al
    1cac:	00 75 0c             	add    BYTE PTR [ebp+0xc],dh
    1caf:	00 00                	add    BYTE PTR [eax],al
    1cb1:	02 01                	add    al,BYTE PTR [ecx]
    1cb3:	06                   	push   es
    1cb4:	64 00 00             	add    BYTE PTR fs:[eax],al
    1cb7:	00 02                	add    BYTE PTR [edx],al
    1cb9:	01 06                	add    DWORD PTR [esi],eax
    1cbb:	5d                   	pop    ebp
    1cbc:	00 00                	add    BYTE PTR [eax],al
    1cbe:	00 02                	add    BYTE PTR [edx],al
    1cc0:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1cc6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1ccd:	02 08                	add    cl,BYTE PTR [eax]
    1ccf:	05 00 00 00 00       	add    eax,0x0
    1cd4:	02 01                	add    al,BYTE PTR [ecx]
    1cd6:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1cd9:	00 00                	add    BYTE PTR [eax],al
    1cdb:	02 02                	add    al,BYTE PTR [edx]
    1cdd:	07                   	pop    es
    1cde:	0e                   	push   cs
    1cdf:	00 00                	add    BYTE PTR [eax],al
    1ce1:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1ce4:	00 00                	add    BYTE PTR [eax],al
    1ce6:	00 02                	add    BYTE PTR [edx],al
    1ce8:	34 61                	xor    al,0x61
    1cea:	00 00                	add    BYTE PTR [eax],al
    1cec:	00 02                	add    BYTE PTR [edx],al
    1cee:	04 07                	add    al,0x7
    1cf0:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1cf3:	00 04 20             	add    BYTE PTR [eax+eiz*1],al
    1cf6:	07                   	pop    es
    1cf7:	00 00                	add    BYTE PTR [eax],al
    1cf9:	02 37                	add    dh,BYTE PTR [edi]
    1cfb:	73 00                	jae    1cfd <sysEnter_Vector-0x12e303>
    1cfd:	00 00                	add    BYTE PTR [eax],al
    1cff:	02 08                	add    cl,BYTE PTR [eax]
    1d01:	07                   	pop    es
    1d02:	34 00                	xor    al,0x0
    1d04:	00 00                	add    BYTE PTR [eax],al
    1d06:	04 81                	add    al,0x81
    1d08:	04 00                	add    al,0x0
    1d0a:	00 03                	add    BYTE PTR [ebx],al
    1d0c:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1d0f:	00 00                	add    BYTE PTR [eax],al
    1d11:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1d18:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1d1b:	9b                   	fwait
    1d1c:	00 00                	add    BYTE PTR [eax],al
    1d1e:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    1d24:	00 06                	add    BYTE PTR [esi],al
    1d26:	25 00 00 00 02       	and    eax,0x2000000
    1d2b:	01 02                	add    DWORD PTR [edx],eax
    1d2d:	95                   	xchg   ebp,eax
    1d2e:	00 00                	add    BYTE PTR [eax],al
    1d30:	00 02                	add    BYTE PTR [edx],al
    1d32:	04 07                	add    al,0x7
    1d34:	39 00                	cmp    DWORD PTR [eax],eax
    1d36:	00 00                	add    BYTE PTR [eax],al
    1d38:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1d3b:	e1 00                	loope  1d3d <sysEnter_Vector-0x12e2c3>
    1d3d:	00 00                	add    BYTE PTR [eax],al
    1d3f:	07                   	pop    es
    1d40:	04 05                	add    al,0x5
    1d42:	04 25                	add    al,0x25
    1d44:	00 00                	add    BYTE PTR [eax],al
    1d46:	00 08                	add    BYTE PTR [eax],cl
    1d48:	fd                   	std    
    1d49:	07                   	pop    es
    1d4a:	00 00                	add    BYTE PTR [eax],al
    1d4c:	0c 04                	or     al,0x4
    1d4e:	17                   	pop    ss
    1d4f:	ec                   	in     al,dx
    1d50:	00 00                	add    BYTE PTR [eax],al
    1d52:	00 09                	add    BYTE PTR [ecx],cl
    1d54:	39 07                	cmp    DWORD PTR [edi],eax
    1d56:	00 00                	add    BYTE PTR [eax],al
    1d58:	04 19                	add    al,0x19
    1d5a:	ec                   	in     al,dx
    1d5b:	00 00                	add    BYTE PTR [eax],al
    1d5d:	00 00                	add    BYTE PTR [eax],al
    1d5f:	09 9c 06 00 00 04 19 	or     DWORD PTR [esi+eax*1+0x19040000],ebx
    1d66:	ec                   	in     al,dx
    1d67:	00 00                	add    BYTE PTR [eax],al
    1d69:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1d6c:	f5                   	cmc    
    1d6d:	07                   	pop    es
    1d6e:	00 00                	add    BYTE PTR [eax],al
    1d70:	04 1a                	add    al,0x1a
    1d72:	b3 00                	mov    bl,0x0
    1d74:	00 00                	add    BYTE PTR [eax],al
    1d76:	08 00                	or     BYTE PTR [eax],al
    1d78:	05 04 bb 00 00       	add    eax,0xbb04
    1d7d:	00 04 ab             	add    BYTE PTR [ebx+ebp*4],al
    1d80:	07                   	pop    es
    1d81:	00 00                	add    BYTE PTR [eax],al
    1d83:	04 1b                	add    al,0x1b
    1d85:	bb 00 00 00 08       	mov    ebx,0x8000000
    1d8a:	57                   	push   edi
    1d8b:	07                   	pop    es
    1d8c:	00 00                	add    BYTE PTR [eax],al
    1d8e:	14 05                	adc    al,0x5
    1d90:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    1d92:	01 00                	add    DWORD PTR [eax],eax
    1d94:	00 09                	add    BYTE PTR [ecx],cl
    1d96:	50                   	push   eax
    1d97:	07                   	pop    es
    1d98:	00 00                	add    BYTE PTR [eax],al
    1d9a:	05 1d f2 00 00       	add    eax,0xf21d
    1d9f:	00 00                	add    BYTE PTR [eax],al
    1da1:	09 1a                	or     DWORD PTR [edx],ebx
    1da3:	07                   	pop    es
    1da4:	00 00                	add    BYTE PTR [eax],al
    1da6:	05 1e 61 00 00       	add    eax,0x611e
    1dab:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1dae:	58                   	pop    eax
    1daf:	08 00                	or     BYTE PTR [eax],al
    1db1:	00 05 1f 5f 01 00    	add    BYTE PTR ds:0x15f1f,al
    1db7:	00 10                	add    BYTE PTR [eax],dl
    1db9:	00 08                	add    BYTE PTR [eax],cl
    1dbb:	88 07                	mov    BYTE PTR [edi],al
    1dbd:	00 00                	add    BYTE PTR [eax],al
    1dbf:	0c 05                	or     al,0x5
    1dc1:	37                   	aaa    
    1dc2:	5f                   	pop    edi
    1dc3:	01 00                	add    DWORD PTR [eax],eax
    1dc5:	00 09                	add    BYTE PTR [ecx],cl
    1dc7:	75 07                	jne    1dd0 <sysEnter_Vector-0x12e230>
    1dc9:	00 00                	add    BYTE PTR [eax],al
    1dcb:	05 39 b5 00 00       	add    eax,0xb539
    1dd0:	00 00                	add    BYTE PTR [eax],al
    1dd2:	09 5f 08             	or     DWORD PTR [edi+0x8],ebx
    1dd5:	00 00                	add    BYTE PTR [eax],al
    1dd7:	05 3a 68 02 00       	add    eax,0x2683a
    1ddc:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1ddf:	70 08                	jo     1de9 <sysEnter_Vector-0x12e217>
    1de1:	00 00                	add    BYTE PTR [eax],al
    1de3:	05 3b 5f 01 00       	add    eax,0x15f3b
    1de8:	00 08                	add    BYTE PTR [eax],cl
    1dea:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    1df0:	00 08                	add    BYTE PTR [eax],cl
    1df2:	65                   	gs
    1df3:	07                   	pop    es
    1df4:	00 00                	add    BYTE PTR [eax],al
    1df6:	0c 05                	or     al,0x5
    1df8:	22 96 01 00 00 09    	and    dl,BYTE PTR [esi+0x9000001]
    1dfe:	0c 08                	or     al,0x8
    1e00:	00 00                	add    BYTE PTR [eax],al
    1e02:	05 24 5f 01 00       	add    eax,0x15f24
    1e07:	00 00                	add    BYTE PTR [eax],al
    1e09:	09 49 07             	or     DWORD PTR [ecx+0x7],ecx
    1e0c:	00 00                	add    BYTE PTR [eax],al
    1e0e:	05 25 96 01 00       	add    eax,0x19625
    1e13:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1e16:	29 07                	sub    DWORD PTR [edi],eax
    1e18:	00 00                	add    BYTE PTR [eax],al
    1e1a:	05 26 3a 00 00       	add    eax,0x3a26
    1e1f:	00 08                	add    BYTE PTR [eax],cl
    1e21:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    1e27:	00 08                	add    BYTE PTR [eax],cl
    1e29:	61                   	popa   
    1e2a:	08 00                	or     BYTE PTR [eax],al
    1e2c:	00 24 05 29 09 02 00 	add    BYTE PTR [eax*1+0x20929],ah
    1e33:	00 09                	add    BYTE PTR [ecx],cl
    1e35:	e9 07 00 00 05       	jmp    5001e41 <sysEnter_Vector+0x4ed1e41>
    1e3a:	2b 61 00             	sub    esp,DWORD PTR [ecx+0x0]
    1e3d:	00 00                	add    BYTE PTR [eax],al
    1e3f:	00 09                	add    BYTE PTR [ecx],cl
    1e41:	2f                   	das    
    1e42:	08 00                	or     BYTE PTR [eax],al
    1e44:	00 05 2c 4f 00 00    	add    BYTE PTR ds:0x4f2c,al
    1e4a:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1e4d:	c5 07                	lds    eax,FWORD PTR [edi]
    1e4f:	00 00                	add    BYTE PTR [eax],al
    1e51:	05 2d 4f 00 00       	add    eax,0x4f2d
    1e56:	00 06                	add    BYTE PTR [esi],al
    1e58:	09 29                	or     DWORD PTR [ecx],ebp
    1e5a:	08 00                	or     BYTE PTR [eax],al
    1e5c:	00 05 2e 61 00 00    	add    BYTE PTR ds:0x612e,al
    1e62:	00 08                	add    BYTE PTR [eax],cl
    1e64:	09 a5 07 00 00 05    	or     DWORD PTR [ebp+0x5000007],esp
    1e6a:	2f                   	das    
    1e6b:	61                   	popa   
    1e6c:	00 00                	add    BYTE PTR [eax],al
    1e6e:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1e71:	21 08                	and    DWORD PTR [eax],ecx
    1e73:	00 00                	add    BYTE PTR [eax],al
    1e75:	05 30 61 00 00       	add    eax,0x6130
    1e7a:	00 10                	add    BYTE PTR [eax],dl
    1e7c:	09 07                	or     DWORD PTR [edi],eax
    1e7e:	08 00                	or     BYTE PTR [eax],al
    1e80:	00 05 31 52 02 00    	add    BYTE PTR ds:0x25231,al
    1e86:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    1e89:	63 07                	arpl   WORD PTR [edi],ax
    1e8b:	00 00                	add    BYTE PTR [eax],al
    1e8d:	05 32 65 01 00       	add    eax,0x16532
    1e92:	00 18                	add    BYTE PTR [eax],bl
    1e94:	00 08                	add    BYTE PTR [eax],cl
    1e96:	b4 07                	mov    ah,0x7
    1e98:	00 00                	add    BYTE PTR [eax],al
    1e9a:	14 05                	adc    al,0x5
    1e9c:	3e                   	ds
    1e9d:	52                   	push   edx
    1e9e:	02 00                	add    al,BYTE PTR [eax]
    1ea0:	00 09                	add    BYTE PTR [ecx],cl
    1ea2:	88 08                	mov    BYTE PTR [eax],cl
    1ea4:	00 00                	add    BYTE PTR [eax],al
    1ea6:	05 40 82 02 00       	add    eax,0x28240
    1eab:	00 00                	add    BYTE PTR [eax],al
    1ead:	09 3e                	or     DWORD PTR [esi],edi
    1eaf:	07                   	pop    es
    1eb0:	00 00                	add    BYTE PTR [eax],al
    1eb2:	05 41 82 02 00       	add    eax,0x28241
    1eb7:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1eba:	9f                   	lahf   
    1ebb:	07                   	pop    es
    1ebc:	00 00                	add    BYTE PTR [eax],al
    1ebe:	05 42 82 02 00       	add    eax,0x28242
    1ec3:	00 08                	add    BYTE PTR [eax],cl
    1ec5:	09 33                	or     DWORD PTR [ebx],esi
    1ec7:	07                   	pop    es
    1ec8:	00 00                	add    BYTE PTR [eax],al
    1eca:	05 43 9c 02 00       	add    eax,0x29c43
    1ecf:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1ed2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ed3:	07                   	pop    es
    1ed4:	00 00                	add    BYTE PTR [eax],al
    1ed6:	05 44 c5 02 00       	add    eax,0x2c544
    1edb:	00 10                	add    BYTE PTR [eax],dl
    1edd:	00 05 04 58 02 00    	add    BYTE PTR ds:0x25804,al
    1ee3:	00 06                	add    BYTE PTR [esi],al
    1ee5:	09 02                	or     DWORD PTR [edx],eax
    1ee7:	00 00                	add    BYTE PTR [eax],al
    1ee9:	04 43                	add    al,0x43
    1eeb:	08 00                	or     BYTE PTR [eax],al
    1eed:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    1ef3:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    1ef9:	00 0a                	add    BYTE PTR [edx],cl
    1efb:	3a 00                	cmp    al,BYTE PTR [eax]
    1efd:	00 00                	add    BYTE PTR [eax],al
    1eff:	82                   	(bad)  
    1f00:	02 00                	add    al,BYTE PTR [eax]
    1f02:	00 0b                	add    BYTE PTR [ebx],cl
    1f04:	68 02 00 00 0b       	push   0xb000002
    1f09:	5f                   	pop    edi
    1f0a:	01 00                	add    DWORD PTR [eax],eax
    1f0c:	00 00                	add    BYTE PTR [eax],al
    1f0e:	05 04 6e 02 00       	add    eax,0x26e04
    1f13:	00 0a                	add    BYTE PTR [edx],cl
    1f15:	3a 00                	cmp    al,BYTE PTR [eax]
    1f17:	00 00                	add    BYTE PTR [eax],al
    1f19:	9c                   	pushf  
    1f1a:	02 00                	add    al,BYTE PTR [eax]
    1f1c:	00 0b                	add    BYTE PTR [ebx],cl
    1f1e:	68 02 00 00 0b       	push   0xb000002
    1f23:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    1f26:	00 00                	add    BYTE PTR [eax],al
    1f28:	05 04 88 02 00       	add    eax,0x28804
    1f2d:	00 0a                	add    BYTE PTR [edx],cl
    1f2f:	3a 00                	cmp    al,BYTE PTR [eax]
    1f31:	00 00                	add    BYTE PTR [eax],al
    1f33:	c5 02                	lds    eax,FWORD PTR [edx]
    1f35:	00 00                	add    BYTE PTR [eax],al
    1f37:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    1f3a:	00 00                	add    BYTE PTR [eax],al
    1f3c:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    1f3f:	00 00                	add    BYTE PTR [eax],al
    1f41:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    1f44:	00 00                	add    BYTE PTR [eax],al
    1f46:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    1f49:	00 00                	add    BYTE PTR [eax],al
    1f4b:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    1f4e:	00 00                	add    BYTE PTR [eax],al
    1f50:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    1f56:	00 04 1a             	add    BYTE PTR [edx+ebx*1],al
    1f59:	08 00                	or     BYTE PTR [eax],al
    1f5b:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    1f61:	00 08                	add    BYTE PTR [eax],cl
    1f63:	53                   	push   ebx
    1f64:	08 00                	or     BYTE PTR [eax],al
    1f66:	00 10                	add    BYTE PTR [eax],dl
    1f68:	05 4f 07 03 00       	add    eax,0x3074f
    1f6d:	00 09                	add    BYTE PTR [ecx],cl
    1f6f:	81 08 00 00 05 51    	or     DWORD PTR [eax],0x51050000
    1f75:	b5 00                	mov    ch,0x0
    1f77:	00 00                	add    BYTE PTR [eax],al
    1f79:	00 09                	add    BYTE PTR [ecx],cl
    1f7b:	79 08                	jns    1f85 <sysEnter_Vector-0x12e07b>
    1f7d:	00 00                	add    BYTE PTR [eax],al
    1f7f:	05 52 68 02 00       	add    eax,0x26852
    1f84:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1f87:	15 08 00 00 05       	adc    eax,0x5000008
    1f8c:	53                   	push   ebx
    1f8d:	07                   	pop    es
    1f8e:	03 00                	add    eax,DWORD PTR [eax]
    1f90:	00 08                	add    BYTE PTR [eax],cl
    1f92:	00 08                	add    BYTE PTR [eax],cl
    1f94:	8f 07                	pop    DWORD PTR [edi]
    1f96:	00 00                	add    BYTE PTR [eax],al
    1f98:	08 05 49 2c 03 00    	or     BYTE PTR ds:0x32c49,al
    1f9e:	00 09                	add    BYTE PTR [ecx],cl
    1fa0:	05 03 00 00 05       	add    eax,0x5000003
    1fa5:	4b                   	dec    ebx
    1fa6:	56                   	push   esi
    1fa7:	03 00                	add    eax,DWORD PTR [eax]
    1fa9:	00 00                	add    BYTE PTR [eax],al
    1fab:	09 ef                	or     edi,ebp
    1fad:	07                   	pop    es
    1fae:	00 00                	add    BYTE PTR [eax],al
    1fb0:	05 4c 7a 03 00       	add    eax,0x37a4c
    1fb5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1fb8:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    1fbb:	00 00                	add    BYTE PTR [eax],al
    1fbd:	4a                   	dec    edx
    1fbe:	03 00                	add    eax,DWORD PTR [eax]
    1fc0:	00 0b                	add    BYTE PTR [ebx],cl
    1fc2:	4a                   	dec    edx
    1fc3:	03 00                	add    eax,DWORD PTR [eax]
    1fc5:	00 0b                	add    BYTE PTR [ebx],cl
    1fc7:	b5 00                	mov    ch,0x0
    1fc9:	00 00                	add    BYTE PTR [eax],al
    1fcb:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    1fce:	00 00                	add    BYTE PTR [eax],al
    1fd0:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    1fd3:	00 00                	add    BYTE PTR [eax],al
    1fd5:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    1fdb:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    1fe1:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    1fe7:	00 0a                	add    BYTE PTR [edx],cl
    1fe9:	7a 00                	jp     1feb <sysEnter_Vector-0x12e015>
    1feb:	00 00                	add    BYTE PTR [eax],al
    1fed:	7a 03                	jp     1ff2 <sysEnter_Vector-0x12e00e>
    1fef:	00 00                	add    BYTE PTR [eax],al
    1ff1:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    1ff4:	00 00                	add    BYTE PTR [eax],al
    1ff6:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    1ffc:	7a 00                	jp     1ffe <sysEnter_Vector-0x12e002>
    1ffe:	00 00                	add    BYTE PTR [eax],al
    2000:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2003:	00 00                	add    BYTE PTR [eax],al
    2005:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    200b:	00 04 cf             	add    BYTE PTR [edi+ecx*8],al
    200e:	07                   	pop    es
    200f:	00 00                	add    BYTE PTR [eax],al
    2011:	05 4d 07 03 00       	add    eax,0x3074d
    2016:	00 0c 67             	add    BYTE PTR [edi+eiz*2],cl
    2019:	08 00                	or     BYTE PTR [eax],al
    201b:	00 01                	add    BYTE PTR [ecx],al
    201d:	43                   	inc    ebx
    201e:	68 14 00 30 84       	push   0x84300014
    2023:	00 00                	add    BYTE PTR [eax],al
    2025:	00 01                	add    BYTE PTR [ecx],al
    2027:	9c                   	pushf  
    2028:	bd 03 00 00 0d       	mov    ebp,0xd000003
    202d:	44                   	inc    esp
    202e:	07                   	pop    es
    202f:	00 00                	add    BYTE PTR [eax],al
    2031:	01 45 bd             	add    DWORD PTR [ebp-0x43],eax
    2034:	03 00                	add    eax,DWORD PTR [eax]
    2036:	00 02                	add    BYTE PTR [edx],al
    2038:	91                   	xchg   ecx,eax
    2039:	67 0d e1 07 00 00    	addr16 or eax,0x7e1
    203f:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    2042:	00 00                	add    BYTE PTR [eax],al
    2044:	00 02                	add    BYTE PTR [edx],al
    2046:	91                   	xchg   ecx,eax
    2047:	6c                   	ins    BYTE PTR es:[edi],dx
    2048:	00 0e                	add    BYTE PTR [esi],cl
    204a:	25 00 00 00 cd       	and    eax,0xcd000000
    204f:	03 00                	add    eax,DWORD PTR [eax]
    2051:	00 0f                	add    BYTE PTR [edi],cl
    2053:	ac                   	lods   al,BYTE PTR ds:[esi]
    2054:	00 00                	add    BYTE PTR [eax],al
    2056:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2059:	10 4b 00             	adc    BYTE PTR [ebx+0x0],cl
    205c:	00 00                	add    BYTE PTR [eax],al
    205e:	06                   	push   es
    205f:	34 56                	xor    al,0x56
    2061:	00 00                	add    BYTE PTR [eax],al
    2063:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    2069:	30 10                	xor    BYTE PTR [eax],dl
    206b:	af                   	scas   eax,DWORD PTR es:[edi]
    206c:	00 00                	add    BYTE PTR [eax],al
    206e:	00 06                	add    BYTE PTR [esi],al
    2070:	35 56 00 00 00       	xor    eax,0x56
    2075:	05 03 c0 43 00       	add    eax,0x43c003
    207a:	30 10                	xor    BYTE PTR [eax],dl
    207c:	5b                   	pop    ebx
    207d:	01 00                	add    DWORD PTR [eax],eax
    207f:	00 06                	add    BYTE PTR [esi],al
    2081:	36                   	ss
    2082:	56                   	push   esi
    2083:	00 00                	add    BYTE PTR [eax],al
    2085:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    208b:	30 10                	xor    BYTE PTR [eax],dl
    208d:	54                   	push   esp
    208e:	00 00                	add    BYTE PTR [eax],al
    2090:	00 06                	add    BYTE PTR [esi],al
    2092:	37                   	aaa    
    2093:	56                   	push   esi
    2094:	00 00                	add    BYTE PTR [eax],al
    2096:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    209c:	30 10                	xor    BYTE PTR [eax],dl
    209e:	28 00                	sub    BYTE PTR [eax],al
    20a0:	00 00                	add    BYTE PTR [eax],al
    20a2:	07                   	pop    es
    20a3:	45                   	inc    ebp
    20a4:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    20a7:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    20ad:	30 05 04 b5 00 00    	xor    BYTE PTR ds:0xb504,al
    20b3:	00 10                	add    BYTE PTR [eax],dl
    20b5:	15 08 00 00 01       	adc    eax,0x1000008
    20ba:	0e                   	push   cs
    20bb:	80 03 00             	add    BYTE PTR [ebx],0x0
    20be:	00 05 03 d4 43 00    	add    BYTE PTR ds:0x43d403,al
    20c4:	30 10                	xor    BYTE PTR [eax],dl
    20c6:	36 08 00             	or     BYTE PTR ss:[eax],al
    20c9:	00 01                	add    BYTE PTR [ecx],al
    20cb:	0f 5d 02             	minps  xmm0,XMMWORD PTR [edx]
    20ce:	00 00                	add    BYTE PTR [eax],al
    20d0:	05 03 20 42 00       	add    eax,0x422003
    20d5:	30 10                	xor    BYTE PTR [eax],dl
    20d7:	4b                   	dec    ebx
    20d8:	08 00                	or     BYTE PTR [eax],al
    20da:	00 01                	add    BYTE PTR [ecx],al
    20dc:	10 cb                	adc    bl,cl
    20de:	02 00                	add    al,BYTE PTR [eax]
    20e0:	00 05 03 dc 43 00    	add    BYTE PTR ds:0x43dc03,al
    20e6:	30 00                	xor    BYTE PTR [eax],al
    20e8:	ad                   	lods   eax,DWORD PTR ds:[esi]
    20e9:	01 00                	add    DWORD PTR [eax],eax
    20eb:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    20ee:	cd 0a                	int    0xa
    20f0:	00 00                	add    BYTE PTR [eax],al
    20f2:	04 01                	add    al,0x1
    20f4:	f4                   	hlt    
    20f5:	00 00                	add    BYTE PTR [eax],al
    20f7:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
    20fa:	08 00                	or     BYTE PTR [eax],al
    20fc:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    20ff:	00 00                	add    BYTE PTR [eax],al
    2101:	ec                   	in     al,dx
    2102:	14 00                	adc    al,0x0
    2104:	30 eb                	xor    bl,ch
    2106:	00 00                	add    BYTE PTR [eax],al
    2108:	00 73 0d             	add    BYTE PTR [ebx+0xd],dh
    210b:	00 00                	add    BYTE PTR [eax],al
    210d:	02 01                	add    al,BYTE PTR [ecx]
    210f:	06                   	push   es
    2110:	64 00 00             	add    BYTE PTR fs:[eax],al
    2113:	00 02                	add    BYTE PTR [edx],al
    2115:	01 06                	add    DWORD PTR [esi],eax
    2117:	5d                   	pop    ebp
    2118:	00 00                	add    BYTE PTR [eax],al
    211a:	00 02                	add    BYTE PTR [edx],al
    211c:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2122:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2129:	02 08                	add    cl,BYTE PTR [eax]
    212b:	05 00 00 00 00       	add    eax,0x0
    2130:	02 01                	add    al,BYTE PTR [ecx]
    2132:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2135:	00 00                	add    BYTE PTR [eax],al
    2137:	02 02                	add    al,BYTE PTR [edx]
    2139:	07                   	pop    es
    213a:	0e                   	push   cs
    213b:	00 00                	add    BYTE PTR [eax],al
    213d:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2140:	00 00                	add    BYTE PTR [eax],al
    2142:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2145:	61                   	popa   
    2146:	00 00                	add    BYTE PTR [eax],al
    2148:	00 02                	add    BYTE PTR [edx],al
    214a:	04 07                	add    al,0x7
    214c:	3e 00 00             	add    BYTE PTR ds:[eax],al
    214f:	00 02                	add    BYTE PTR [edx],al
    2151:	08 07                	or     BYTE PTR [edi],al
    2153:	34 00                	xor    al,0x0
    2155:	00 00                	add    BYTE PTR [eax],al
    2157:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    215e:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2161:	9b                   	fwait
    2162:	00 00                	add    BYTE PTR [eax],al
    2164:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    216a:	00 06                	add    BYTE PTR [esi],al
    216c:	25 00 00 00 02       	and    eax,0x2000000
    2171:	01 02                	add    DWORD PTR [edx],eax
    2173:	95                   	xchg   ebp,eax
    2174:	00 00                	add    BYTE PTR [eax],al
    2176:	00 02                	add    BYTE PTR [edx],al
    2178:	04 07                	add    al,0x7
    217a:	39 00                	cmp    DWORD PTR [eax],eax
    217c:	00 00                	add    BYTE PTR [eax],al
    217e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2181:	e1 00                	loope  2183 <sysEnter_Vector-0x12de7d>
    2183:	00 00                	add    BYTE PTR [eax],al
    2185:	05 04 25 00 00       	add    eax,0x2504
    218a:	00 07                	add    BYTE PTR [edi],al
    218c:	a3 08 00 00 01       	mov    ds:0x1000008,eax
    2191:	1d 9d 00 00 00       	sbb    eax,0x9d
    2196:	ec                   	in     al,dx
    2197:	14 00                	adc    al,0x0
    2199:	30 3e                	xor    BYTE PTR [esi],bh
    219b:	00 00                	add    BYTE PTR [eax],al
    219d:	00 01                	add    BYTE PTR [ecx],al
    219f:	9c                   	pushf  
    21a0:	d9 00                	fld    DWORD PTR [eax]
    21a2:	00 00                	add    BYTE PTR [eax],al
    21a4:	08 b8 06 00 00 01    	or     BYTE PTR [eax+0x1000006],bh
    21aa:	1d 9d 00 00 00       	sbb    eax,0x9d
    21af:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    21b5:	63 00                	arpl   WORD PTR [eax],ax
    21b7:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    21bd:	02 91 04 00 07 9b    	add    dl,BYTE PTR [ecx-0x64f8fffc]
    21c3:	08 00                	or     BYTE PTR [eax],al
    21c5:	00 01                	add    BYTE PTR [ecx],al
    21c7:	23 9d 00 00 00 2a    	and    ebx,DWORD PTR [ebp+0x2a000000]
    21cd:	15 00 30 3e 00       	adc    eax,0x3e3000
    21d2:	00 00                	add    BYTE PTR [eax],al
    21d4:	01 9c 0f 01 00 00 08 	add    DWORD PTR [edi+ecx*1+0x8000001],ebx
    21db:	b8 06 00 00 01       	mov    eax,0x1000006
    21e0:	23 9d 00 00 00 02    	and    ebx,DWORD PTR [ebp+0x2000000]
    21e6:	91                   	xchg   ecx,eax
    21e7:	00 09                	add    BYTE PTR [ecx],cl
    21e9:	73 72                	jae    225d <sysEnter_Vector-0x12dda3>
    21eb:	63 00                	arpl   WORD PTR [eax],ax
    21ed:	01 23                	add    DWORD PTR [ebx],esp
    21ef:	7d 00                	jge    21f1 <sysEnter_Vector-0x12de0f>
    21f1:	00 00                	add    BYTE PTR [eax],al
    21f3:	02 91 04 00 0a 8f    	add    dl,BYTE PTR [ecx-0x70f5fffc]
    21f9:	08 00                	or     BYTE PTR [eax],al
    21fb:	00 01                	add    BYTE PTR [ecx],al
    21fd:	29 68 15             	sub    DWORD PTR [eax+0x15],ebp
    2200:	00 30                	add    BYTE PTR [eax],dh
    2202:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2203:	00 00                	add    BYTE PTR [eax],al
    2205:	00 01                	add    BYTE PTR [ecx],al
    2207:	9c                   	pushf  
    2208:	55                   	push   ebp
    2209:	01 00                	add    DWORD PTR [eax],eax
    220b:	00 09                	add    BYTE PTR [ecx],cl
    220d:	70 00                	jo     220f <sysEnter_Vector-0x12ddf1>
    220f:	01 29                	add    DWORD PTR [ecx],ebp
    2211:	9d                   	popf   
    2212:	00 00                	add    BYTE PTR [eax],al
    2214:	00 02                	add    BYTE PTR [edx],al
    2216:	91                   	xchg   ecx,eax
    2217:	00 09                	add    BYTE PTR [ecx],cl
    2219:	71 00                	jno    221b <sysEnter_Vector-0x12dde5>
    221b:	01 29                	add    DWORD PTR [ecx],ebp
    221d:	9d                   	popf   
    221e:	00 00                	add    BYTE PTR [eax],al
    2220:	00 02                	add    BYTE PTR [edx],al
    2222:	91                   	xchg   ecx,eax
    2223:	04 0b                	add    al,0xb
    2225:	63 00                	arpl   WORD PTR [eax],ax
    2227:	01 2a                	add    DWORD PTR [edx],ebp
    2229:	3a 00                	cmp    al,BYTE PTR [eax]
    222b:	00 00                	add    BYTE PTR [eax],al
    222d:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2233:	01 2a                	add    DWORD PTR [edx],ebp
    2235:	3a 00                	cmp    al,BYTE PTR [eax]
    2237:	00 00                	add    BYTE PTR [eax],al
    2239:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    223f:	00 00                	add    BYTE PTR [eax],al
    2241:	00 02                	add    BYTE PTR [edx],al
    2243:	34 56                	xor    al,0x56
    2245:	00 00                	add    BYTE PTR [eax],al
    2247:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    224d:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    2250:	00 00                	add    BYTE PTR [eax],al
    2252:	00 02                	add    BYTE PTR [edx],al
    2254:	35 56 00 00 00       	xor    eax,0x56
    2259:	05 03 c0 43 00       	add    eax,0x43c003
    225e:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    2261:	01 00                	add    DWORD PTR [eax],eax
    2263:	00 02                	add    BYTE PTR [edx],al
    2265:	36                   	ss
    2266:	56                   	push   esi
    2267:	00 00                	add    BYTE PTR [eax],al
    2269:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    226f:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    2272:	00 00                	add    BYTE PTR [eax],al
    2274:	00 02                	add    BYTE PTR [edx],al
    2276:	37                   	aaa    
    2277:	56                   	push   esi
    2278:	00 00                	add    BYTE PTR [eax],al
    227a:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    2280:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    2283:	00 00                	add    BYTE PTR [eax],al
    2285:	00 03                	add    BYTE PTR [ebx],al
    2287:	45                   	inc    ebp
    2288:	aa                   	stos   BYTE PTR es:[edi],al
    2289:	01 00                	add    DWORD PTR [eax],eax
    228b:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    2291:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2297:	00 00                	add    BYTE PTR [eax],al
    2299:	6c                   	ins    BYTE PTR es:[edi],dx
    229a:	01 00                	add    DWORD PTR [eax],eax
    229c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    229f:	88 0b                	mov    BYTE PTR [ebx],cl
    22a1:	00 00                	add    BYTE PTR [eax],al
    22a3:	04 01                	add    al,0x1
    22a5:	f4                   	hlt    
    22a6:	00 00                	add    BYTE PTR [eax],al
    22a8:	00 0c c6             	add    BYTE PTR [esi+eax*8],cl
    22ab:	08 00                	or     BYTE PTR [eax],al
    22ad:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    22b0:	00 00                	add    BYTE PTR [eax],al
    22b2:	d8 15 00 30 5e 00    	fcom   DWORD PTR ds:0x5e3000
    22b8:	00 00                	add    BYTE PTR [eax],al
    22ba:	43                   	inc    ebx
    22bb:	0e                   	push   cs
    22bc:	00 00                	add    BYTE PTR [eax],al
    22be:	02 01                	add    al,BYTE PTR [ecx]
    22c0:	06                   	push   es
    22c1:	64 00 00             	add    BYTE PTR fs:[eax],al
    22c4:	00 02                	add    BYTE PTR [edx],al
    22c6:	01 06                	add    DWORD PTR [esi],eax
    22c8:	5d                   	pop    ebp
    22c9:	00 00                	add    BYTE PTR [eax],al
    22cb:	00 02                	add    BYTE PTR [edx],al
    22cd:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    22d3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    22da:	02 08                	add    cl,BYTE PTR [eax]
    22dc:	05 00 00 00 00       	add    eax,0x0
    22e1:	02 01                	add    al,BYTE PTR [ecx]
    22e3:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    22e6:	00 00                	add    BYTE PTR [eax],al
    22e8:	02 02                	add    al,BYTE PTR [edx]
    22ea:	07                   	pop    es
    22eb:	0e                   	push   cs
    22ec:	00 00                	add    BYTE PTR [eax],al
    22ee:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    22f1:	00 00                	add    BYTE PTR [eax],al
    22f3:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    22f6:	61                   	popa   
    22f7:	00 00                	add    BYTE PTR [eax],al
    22f9:	00 02                	add    BYTE PTR [edx],al
    22fb:	04 07                	add    al,0x7
    22fd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2300:	00 02                	add    BYTE PTR [edx],al
    2302:	08 07                	or     BYTE PTR [edi],al
    2304:	34 00                	xor    al,0x0
    2306:	00 00                	add    BYTE PTR [eax],al
    2308:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    230f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2312:	9b                   	fwait
    2313:	00 00                	add    BYTE PTR [eax],al
    2315:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    231b:	00 06                	add    BYTE PTR [esi],al
    231d:	25 00 00 00 02       	and    eax,0x2000000
    2322:	01 02                	add    DWORD PTR [edx],eax
    2324:	95                   	xchg   ebp,eax
    2325:	00 00                	add    BYTE PTR [eax],al
    2327:	00 02                	add    BYTE PTR [edx],al
    2329:	04 07                	add    al,0x7
    232b:	39 00                	cmp    DWORD PTR [eax],eax
    232d:	00 00                	add    BYTE PTR [eax],al
    232f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2332:	e1 00                	loope  2334 <sysEnter_Vector-0x12dccc>
    2334:	00 00                	add    BYTE PTR [eax],al
    2336:	05 04 25 00 00       	add    eax,0x2504
    233b:	00 07                	add    BYTE PTR [edi],al
    233d:	bf 08 00 00 01       	mov    edi,0x1000008
    2342:	18 3a                	sbb    BYTE PTR [edx],bh
    2344:	00 00                	add    BYTE PTR [eax],al
    2346:	00 d8                	add    al,bl
    2348:	15 00 30 5e 00       	adc    eax,0x5e3000
    234d:	00 00                	add    BYTE PTR [eax],al
    234f:	01 9c 09 01 00 00 08 	add    DWORD PTR [ecx+ecx*1+0x8000001],ebx
    2356:	70 31                	jo     2389 <sysEnter_Vector-0x12dc77>
    2358:	00 01                	add    BYTE PTR [ecx],al
    235a:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    235d:	00 00                	add    BYTE PTR [eax],al
    235f:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    2365:	00 01                	add    BYTE PTR [ecx],al
    2367:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    236a:	00 00                	add    BYTE PTR [eax],al
    236c:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    2372:	00 01                	add    BYTE PTR [ecx],al
    2374:	1a 09                	sbb    cl,BYTE PTR [ecx]
    2376:	01 00                	add    DWORD PTR [eax],eax
    2378:	00 01                	add    BYTE PTR [ecx],al
    237a:	53                   	push   ebx
    237b:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    237e:	00 01                	add    BYTE PTR [ecx],al
    2380:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    2382:	01 00                	add    DWORD PTR [eax],eax
    2384:	00 01                	add    BYTE PTR [ecx],al
    2386:	56                   	push   esi
    2387:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    238a:	00 01                	add    BYTE PTR [ecx],al
    238c:	1c 48                	sbb    al,0x48
    238e:	00 00                	add    BYTE PTR [eax],al
    2390:	00 02                	add    BYTE PTR [edx],al
    2392:	91                   	xchg   ecx,eax
    2393:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2394:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    2397:	00 01                	add    BYTE PTR [ecx],al
    2399:	1c 48                	sbb    al,0x48
    239b:	00 00                	add    BYTE PTR [eax],al
    239d:	00 02                	add    BYTE PTR [edx],al
    239f:	91                   	xchg   ecx,eax
    23a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    23a1:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    23a7:	00 06                	add    BYTE PTR [esi],al
    23a9:	48                   	dec    eax
    23aa:	00 00                	add    BYTE PTR [eax],al
    23ac:	00 0a                	add    BYTE PTR [edx],cl
    23ae:	4b                   	dec    ebx
    23af:	00 00                	add    BYTE PTR [eax],al
    23b1:	00 02                	add    BYTE PTR [edx],al
    23b3:	34 56                	xor    al,0x56
    23b5:	00 00                	add    BYTE PTR [eax],al
    23b7:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    23bd:	30 0a                	xor    BYTE PTR [edx],cl
    23bf:	af                   	scas   eax,DWORD PTR es:[edi]
    23c0:	00 00                	add    BYTE PTR [eax],al
    23c2:	00 02                	add    BYTE PTR [edx],al
    23c4:	35 56 00 00 00       	xor    eax,0x56
    23c9:	05 03 c0 43 00       	add    eax,0x43c003
    23ce:	30 0a                	xor    BYTE PTR [edx],cl
    23d0:	5b                   	pop    ebx
    23d1:	01 00                	add    DWORD PTR [eax],eax
    23d3:	00 02                	add    BYTE PTR [edx],al
    23d5:	36                   	ss
    23d6:	56                   	push   esi
    23d7:	00 00                	add    BYTE PTR [eax],al
    23d9:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    23df:	30 0a                	xor    BYTE PTR [edx],cl
    23e1:	54                   	push   esp
    23e2:	00 00                	add    BYTE PTR [eax],al
    23e4:	00 02                	add    BYTE PTR [edx],al
    23e6:	37                   	aaa    
    23e7:	56                   	push   esi
    23e8:	00 00                	add    BYTE PTR [eax],al
    23ea:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    23f0:	30 0a                	xor    BYTE PTR [edx],cl
    23f2:	28 00                	sub    BYTE PTR [eax],al
    23f4:	00 00                	add    BYTE PTR [eax],al
    23f6:	03 45 69             	add    eax,DWORD PTR [ebp+0x69]
    23f9:	01 00                	add    DWORD PTR [eax],eax
    23fb:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    2401:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2407:	00 00                	add    BYTE PTR [eax],al
    2409:	c9                   	leave  
    240a:	01 00                	add    DWORD PTR [eax],eax
    240c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    240f:	1a 0c 00             	sbb    cl,BYTE PTR [eax+eax*1]
    2412:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2415:	f4                   	hlt    
    2416:	00 00                	add    BYTE PTR [eax],al
    2418:	00 0c f8             	add    BYTE PTR [eax+edi*8],cl
    241b:	08 00                	or     BYTE PTR [eax],al
    241d:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2420:	00 00                	add    BYTE PTR [eax],al
    2422:	38 16                	cmp    BYTE PTR [esi],dl
    2424:	00 30                	add    BYTE PTR [eax],dh
    2426:	c7 00 00 00 02 0f    	mov    DWORD PTR [eax],0xf020000
    242c:	00 00                	add    BYTE PTR [eax],al
    242e:	02 01                	add    al,BYTE PTR [ecx]
    2430:	06                   	push   es
    2431:	64 00 00             	add    BYTE PTR fs:[eax],al
    2434:	00 02                	add    BYTE PTR [edx],al
    2436:	01 06                	add    DWORD PTR [esi],eax
    2438:	5d                   	pop    ebp
    2439:	00 00                	add    BYTE PTR [eax],al
    243b:	00 02                	add    BYTE PTR [edx],al
    243d:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2443:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    244a:	02 08                	add    cl,BYTE PTR [eax]
    244c:	05 00 00 00 00       	add    eax,0x0
    2451:	02 01                	add    al,BYTE PTR [ecx]
    2453:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2456:	00 00                	add    BYTE PTR [eax],al
    2458:	02 02                	add    al,BYTE PTR [edx]
    245a:	07                   	pop    es
    245b:	0e                   	push   cs
    245c:	00 00                	add    BYTE PTR [eax],al
    245e:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2461:	00 00                	add    BYTE PTR [eax],al
    2463:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2466:	61                   	popa   
    2467:	00 00                	add    BYTE PTR [eax],al
    2469:	00 02                	add    BYTE PTR [edx],al
    246b:	04 07                	add    al,0x7
    246d:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2470:	00 02                	add    BYTE PTR [edx],al
    2472:	08 07                	or     BYTE PTR [edi],al
    2474:	34 00                	xor    al,0x0
    2476:	00 00                	add    BYTE PTR [eax],al
    2478:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    247f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2482:	9b                   	fwait
    2483:	00 00                	add    BYTE PTR [eax],al
    2485:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    248b:	00 06                	add    BYTE PTR [esi],al
    248d:	25 00 00 00 02       	and    eax,0x2000000
    2492:	01 02                	add    DWORD PTR [edx],eax
    2494:	95                   	xchg   ebp,eax
    2495:	00 00                	add    BYTE PTR [eax],al
    2497:	00 02                	add    BYTE PTR [edx],al
    2499:	04 07                	add    al,0x7
    249b:	39 00                	cmp    DWORD PTR [eax],eax
    249d:	00 00                	add    BYTE PTR [eax],al
    249f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    24a2:	e1 00                	loope  24a4 <sysEnter_Vector-0x12db5c>
    24a4:	00 00                	add    BYTE PTR [eax],al
    24a6:	05 04 25 00 00       	add    eax,0x2504
    24ab:	00 07                	add    BYTE PTR [edi],al
    24ad:	db 08                	fisttp DWORD PTR [eax]
    24af:	00 00                	add    BYTE PTR [eax],al
    24b1:	01 04 9d 00 00 00 38 	add    DWORD PTR [ebx*4+0x38000000],eax
    24b8:	16                   	push   ss
    24b9:	00 30                	add    BYTE PTR [eax],dh
    24bb:	40                   	inc    eax
    24bc:	00 00                	add    BYTE PTR [eax],al
    24be:	00 01                	add    BYTE PTR [ecx],al
    24c0:	9c                   	pushf  
    24c1:	e3 00                	jecxz  24c3 <sysEnter_Vector-0x12db3d>
    24c3:	00 00                	add    BYTE PTR [eax],al
    24c5:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    24c8:	00 01                	add    BYTE PTR [ecx],al
    24ca:	04 9d                	add    al,0x9d
    24cc:	00 00                	add    BYTE PTR [eax],al
    24ce:	00 02                	add    BYTE PTR [edx],al
    24d0:	91                   	xchg   ecx,eax
    24d1:	00 08                	add    BYTE PTR [eax],cl
    24d3:	73 32                	jae    2507 <sysEnter_Vector-0x12daf9>
    24d5:	00 01                	add    BYTE PTR [ecx],al
    24d7:	04 7d                	add    al,0x7d
    24d9:	00 00                	add    BYTE PTR [eax],al
    24db:	00 02                	add    BYTE PTR [edx],al
    24dd:	91                   	xchg   ecx,eax
    24de:	04 09                	add    al,0x9
    24e0:	73 00                	jae    24e2 <sysEnter_Vector-0x12db1e>
    24e2:	01 06                	add    DWORD PTR [esi],eax
    24e4:	9d                   	popf   
    24e5:	00 00                	add    BYTE PTR [eax],al
    24e7:	00 02                	add    BYTE PTR [edx],al
    24e9:	91                   	xchg   ecx,eax
    24ea:	74 00                	je     24ec <sysEnter_Vector-0x12db14>
    24ec:	07                   	pop    es
    24ed:	f0 08 00             	lock or BYTE PTR [eax],al
    24f0:	00 01                	add    BYTE PTR [ecx],al
    24f2:	0e                   	push   cs
    24f3:	9d                   	popf   
    24f4:	00 00                	add    BYTE PTR [eax],al
    24f6:	00 78 16             	add    BYTE PTR [eax+0x16],bh
    24f9:	00 30                	add    BYTE PTR [eax],dh
    24fb:	40                   	inc    eax
    24fc:	00 00                	add    BYTE PTR [eax],al
    24fe:	00 01                	add    BYTE PTR [ecx],al
    2500:	9c                   	pushf  
    2501:	23 01                	and    eax,DWORD PTR [ecx]
    2503:	00 00                	add    BYTE PTR [eax],al
    2505:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2508:	00 01                	add    BYTE PTR [ecx],al
    250a:	0e                   	push   cs
    250b:	9d                   	popf   
    250c:	00 00                	add    BYTE PTR [eax],al
    250e:	00 02                	add    BYTE PTR [edx],al
    2510:	91                   	xchg   ecx,eax
    2511:	00 08                	add    BYTE PTR [eax],cl
    2513:	73 32                	jae    2547 <sysEnter_Vector-0x12dab9>
    2515:	00 01                	add    BYTE PTR [ecx],al
    2517:	0e                   	push   cs
    2518:	7d 00                	jge    251a <sysEnter_Vector-0x12dae6>
    251a:	00 00                	add    BYTE PTR [eax],al
    251c:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    2522:	01 10                	add    DWORD PTR [eax],edx
    2524:	9d                   	popf   
    2525:	00 00                	add    BYTE PTR [eax],al
    2527:	00 02                	add    BYTE PTR [edx],al
    2529:	91                   	xchg   ecx,eax
    252a:	74 00                	je     252c <sysEnter_Vector-0x12dad4>
    252c:	07                   	pop    es
    252d:	e8 08 00 00 01       	call   100253a <sysEnter_Vector+0xed253a>
    2532:	18 9d 00 00 00 b8    	sbb    BYTE PTR [ebp-0x48000000],bl
    2538:	16                   	push   ss
    2539:	00 30                	add    BYTE PTR [eax],dh
    253b:	47                   	inc    edi
    253c:	00 00                	add    BYTE PTR [eax],al
    253e:	00 01                	add    BYTE PTR [ecx],al
    2540:	9c                   	pushf  
    2541:	71 01                	jno    2544 <sysEnter_Vector-0x12dabc>
    2543:	00 00                	add    BYTE PTR [eax],al
    2545:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2548:	00 01                	add    BYTE PTR [ecx],al
    254a:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    2550:	91                   	xchg   ecx,eax
    2551:	00 08                	add    BYTE PTR [eax],cl
    2553:	73 32                	jae    2587 <sysEnter_Vector-0x12da79>
    2555:	00 01                	add    BYTE PTR [ecx],al
    2557:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    255a:	00 00                	add    BYTE PTR [eax],al
    255c:	02 91 04 0a e2 08    	add    dl,BYTE PTR [ecx+0x8e20a04]
    2562:	00 00                	add    BYTE PTR [eax],al
    2564:	01 18                	add    DWORD PTR [eax],ebx
    2566:	61                   	popa   
    2567:	00 00                	add    BYTE PTR [eax],al
    2569:	00 02                	add    BYTE PTR [edx],al
    256b:	91                   	xchg   ecx,eax
    256c:	08 09                	or     BYTE PTR [ecx],cl
    256e:	73 00                	jae    2570 <sysEnter_Vector-0x12da90>
    2570:	01 1a                	add    DWORD PTR [edx],ebx
    2572:	9d                   	popf   
    2573:	00 00                	add    BYTE PTR [eax],al
    2575:	00 02                	add    BYTE PTR [edx],al
    2577:	91                   	xchg   ecx,eax
    2578:	74 00                	je     257a <sysEnter_Vector-0x12da86>
    257a:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    257d:	00 00                	add    BYTE PTR [eax],al
    257f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2582:	00 00                	add    BYTE PTR [eax],al
    2584:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    258a:	30 0b                	xor    BYTE PTR [ebx],cl
    258c:	af                   	scas   eax,DWORD PTR es:[edi]
    258d:	00 00                	add    BYTE PTR [eax],al
    258f:	00 02                	add    BYTE PTR [edx],al
    2591:	35 56 00 00 00       	xor    eax,0x56
    2596:	05 03 c0 43 00       	add    eax,0x43c003
    259b:	30 0b                	xor    BYTE PTR [ebx],cl
    259d:	5b                   	pop    ebx
    259e:	01 00                	add    DWORD PTR [eax],eax
    25a0:	00 02                	add    BYTE PTR [edx],al
    25a2:	36                   	ss
    25a3:	56                   	push   esi
    25a4:	00 00                	add    BYTE PTR [eax],al
    25a6:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    25ac:	30 0b                	xor    BYTE PTR [ebx],cl
    25ae:	54                   	push   esp
    25af:	00 00                	add    BYTE PTR [eax],al
    25b1:	00 02                	add    BYTE PTR [edx],al
    25b3:	37                   	aaa    
    25b4:	56                   	push   esi
    25b5:	00 00                	add    BYTE PTR [eax],al
    25b7:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    25bd:	30 0b                	xor    BYTE PTR [ebx],cl
    25bf:	28 00                	sub    BYTE PTR [eax],al
    25c1:	00 00                	add    BYTE PTR [eax],al
    25c3:	03 45 c6             	add    eax,DWORD PTR [ebp-0x3a]
    25c6:	01 00                	add    DWORD PTR [eax],eax
    25c8:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    25ce:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    25d4:	00 00                	add    BYTE PTR [eax],al
    25d6:	4c                   	dec    esp
    25d7:	01 00                	add    DWORD PTR [eax],eax
    25d9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    25dc:	bb 0c 00 00 04       	mov    ebx,0x400000c
    25e1:	01 f4                	add    esp,esi
    25e3:	00 00                	add    BYTE PTR [eax],al
    25e5:	00 0c 22             	add    BYTE PTR [edx+eiz*1],cl
    25e8:	09 00                	or     DWORD PTR [eax],eax
    25ea:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    25ed:	00 00                	add    BYTE PTR [eax],al
    25ef:	00 17                	add    BYTE PTR [edi],dl
    25f1:	00 30                	add    BYTE PTR [eax],dh
    25f3:	89 00                	mov    DWORD PTR [eax],eax
    25f5:	00 00                	add    BYTE PTR [eax],al
    25f7:	e2 0f                	loop   2608 <sysEnter_Vector-0x12d9f8>
    25f9:	00 00                	add    BYTE PTR [eax],al
    25fb:	02 01                	add    al,BYTE PTR [ecx]
    25fd:	06                   	push   es
    25fe:	64 00 00             	add    BYTE PTR fs:[eax],al
    2601:	00 02                	add    BYTE PTR [edx],al
    2603:	01 06                	add    DWORD PTR [esi],eax
    2605:	5d                   	pop    ebp
    2606:	00 00                	add    BYTE PTR [eax],al
    2608:	00 02                	add    BYTE PTR [edx],al
    260a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2610:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2617:	02 08                	add    cl,BYTE PTR [eax]
    2619:	05 00 00 00 00       	add    eax,0x0
    261e:	02 01                	add    al,BYTE PTR [ecx]
    2620:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2623:	00 00                	add    BYTE PTR [eax],al
    2625:	02 02                	add    al,BYTE PTR [edx]
    2627:	07                   	pop    es
    2628:	0e                   	push   cs
    2629:	00 00                	add    BYTE PTR [eax],al
    262b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    262e:	00 00                	add    BYTE PTR [eax],al
    2630:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2633:	61                   	popa   
    2634:	00 00                	add    BYTE PTR [eax],al
    2636:	00 02                	add    BYTE PTR [edx],al
    2638:	04 07                	add    al,0x7
    263a:	3e 00 00             	add    BYTE PTR ds:[eax],al
    263d:	00 02                	add    BYTE PTR [edx],al
    263f:	08 07                	or     BYTE PTR [edi],al
    2641:	34 00                	xor    al,0x0
    2643:	00 00                	add    BYTE PTR [eax],al
    2645:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    264c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    264f:	9b                   	fwait
    2650:	00 00                	add    BYTE PTR [eax],al
    2652:	00 02                	add    BYTE PTR [edx],al
    2654:	01 02                	add    DWORD PTR [edx],eax
    2656:	95                   	xchg   ebp,eax
    2657:	00 00                	add    BYTE PTR [eax],al
    2659:	00 02                	add    BYTE PTR [edx],al
    265b:	04 07                	add    al,0x7
    265d:	39 00                	cmp    DWORD PTR [eax],eax
    265f:	00 00                	add    BYTE PTR [eax],al
    2661:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2664:	e1 00                	loope  2666 <sysEnter_Vector-0x12d99a>
    2666:	00 00                	add    BYTE PTR [eax],al
    2668:	05 04 25 00 00       	add    eax,0x2504
    266d:	00 06                	add    BYTE PTR [esi],al
    266f:	0d 09 00 00 01       	or     eax,0x1000009
    2674:	09 7d 00             	or     DWORD PTR [ebp+0x0],edi
    2677:	00 00                	add    BYTE PTR [eax],al
    2679:	00 17                	add    BYTE PTR [edi],dl
    267b:	00 30                	add    BYTE PTR [eax],dh
    267d:	30 00                	xor    BYTE PTR [eax],al
    267f:	00 00                	add    BYTE PTR [eax],al
    2681:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    2688:	63 00                	arpl   WORD PTR [eax],ax
    268a:	01 09                	add    DWORD PTR [ecx],ecx
    268c:	25 00 00 00 02       	and    eax,0x2000000
    2691:	91                   	xchg   ecx,eax
    2692:	74 00                	je     2694 <sysEnter_Vector-0x12d96c>
    2694:	08 19                	or     BYTE PTR [ecx],bl
    2696:	09 00                	or     DWORD PTR [eax],eax
    2698:	00 01                	add    BYTE PTR [ecx],al
    269a:	0e                   	push   cs
    269b:	7d 00                	jge    269d <sysEnter_Vector-0x12d963>
    269d:	00 00                	add    BYTE PTR [eax],al
    269f:	30 17                	xor    BYTE PTR [edi],dl
    26a1:	00 30                	add    BYTE PTR [eax],dh
    26a3:	59                   	pop    ecx
    26a4:	00 00                	add    BYTE PTR [eax],al
    26a6:	00 01                	add    BYTE PTR [ecx],al
    26a8:	9c                   	pushf  
    26a9:	f4                   	hlt    
    26aa:	00 00                	add    BYTE PTR [eax],al
    26ac:	00 07                	add    BYTE PTR [edi],al
    26ae:	73 74                	jae    2724 <sysEnter_Vector-0x12d8dc>
    26b0:	72 00                	jb     26b2 <sysEnter_Vector-0x12d94e>
    26b2:	01 0e                	add    DWORD PTR [esi],ecx
    26b4:	92                   	xchg   edx,eax
    26b5:	00 00                	add    BYTE PTR [eax],al
    26b7:	00 02                	add    BYTE PTR [edx],al
    26b9:	91                   	xchg   ecx,eax
    26ba:	00 09                	add    BYTE PTR [ecx],cl
    26bc:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    26bf:	00 01                	add    BYTE PTR [ecx],al
    26c1:	10 3a                	adc    BYTE PTR [edx],bh
    26c3:	00 00                	add    BYTE PTR [eax],al
    26c5:	00 02                	add    BYTE PTR [edx],al
    26c7:	91                   	xchg   ecx,eax
    26c8:	74 00                	je     26ca <sysEnter_Vector-0x12d936>
    26ca:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    26cd:	00 00                	add    BYTE PTR [eax],al
    26cf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    26d2:	00 00                	add    BYTE PTR [eax],al
    26d4:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    26da:	30 0a                	xor    BYTE PTR [edx],cl
    26dc:	af                   	scas   eax,DWORD PTR es:[edi]
    26dd:	00 00                	add    BYTE PTR [eax],al
    26df:	00 02                	add    BYTE PTR [edx],al
    26e1:	35 56 00 00 00       	xor    eax,0x56
    26e6:	05 03 c0 43 00       	add    eax,0x43c003
    26eb:	30 0a                	xor    BYTE PTR [edx],cl
    26ed:	5b                   	pop    ebx
    26ee:	01 00                	add    DWORD PTR [eax],eax
    26f0:	00 02                	add    BYTE PTR [edx],al
    26f2:	36                   	ss
    26f3:	56                   	push   esi
    26f4:	00 00                	add    BYTE PTR [eax],al
    26f6:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    26fc:	30 0a                	xor    BYTE PTR [edx],cl
    26fe:	54                   	push   esp
    26ff:	00 00                	add    BYTE PTR [eax],al
    2701:	00 02                	add    BYTE PTR [edx],al
    2703:	37                   	aaa    
    2704:	56                   	push   esi
    2705:	00 00                	add    BYTE PTR [eax],al
    2707:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    270d:	30 0a                	xor    BYTE PTR [edx],cl
    270f:	28 00                	sub    BYTE PTR [eax],al
    2711:	00 00                	add    BYTE PTR [eax],al
    2713:	03 45 49             	add    eax,DWORD PTR [ebp+0x49]
    2716:	01 00                	add    DWORD PTR [eax],eax
    2718:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    271e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    2724:	00 00                	add    BYTE PTR [eax],al
    2726:	ca 00 00             	retf   0x0
    2729:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    272c:	62 0d 00 00 04 01    	bound  ecx,QWORD PTR ds:0x1040000
    2732:	f4                   	hlt    
    2733:	00 00                	add    BYTE PTR [eax],al
    2735:	00 0c 40             	add    BYTE PTR [eax+eax*2],cl
    2738:	09 00                	or     DWORD PTR [eax],eax
    273a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    273d:	00 00                	add    BYTE PTR [eax],al
    273f:	8c 17                	mov    WORD PTR [edi],ss
    2741:	00 30                	add    BYTE PTR [eax],dh
    2743:	62 00                	bound  eax,QWORD PTR [eax]
    2745:	00 00                	add    BYTE PTR [eax],al
    2747:	b1 10                	mov    cl,0x10
    2749:	00 00                	add    BYTE PTR [eax],al
    274b:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2752:	03 81 04 00 00 02    	add    eax,DWORD PTR [ecx+0x2000004]
    2758:	d8 37                	fdiv   DWORD PTR [edi]
    275a:	00 00                	add    BYTE PTR [eax],al
    275c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    275f:	07                   	pop    es
    2760:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2763:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2766:	05 05 00 00 00       	add    eax,0x5
    276b:	04 08                	add    al,0x8
    276d:	05 00 00 00 00       	add    eax,0x0
    2772:	04 0c                	add    al,0xc
    2774:	04 9b                	add    al,0x9b
    2776:	00 00                	add    BYTE PTR [eax],al
    2778:	00 05 39 09 00 00    	add    BYTE PTR ds:0x939,al
    277e:	01 03                	add    DWORD PTR [ebx],eax
    2780:	2c 00                	sub    al,0x0
    2782:	00 00                	add    BYTE PTR [eax],al
    2784:	8c 17                	mov    WORD PTR [edi],ss
    2786:	00 30                	add    BYTE PTR [eax],dh
    2788:	31 00                	xor    DWORD PTR [eax],eax
    278a:	00 00                	add    BYTE PTR [eax],al
    278c:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    2793:	73 74                	jae    2809 <sysEnter_Vector-0x12d7f7>
    2795:	72 00                	jb     2797 <sysEnter_Vector-0x12d869>
    2797:	01 03                	add    DWORD PTR [ebx],eax
    2799:	89 00                	mov    DWORD PTR [eax],eax
    279b:	00 00                	add    BYTE PTR [eax],al
    279d:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    27a3:	74 00                	je     27a5 <sysEnter_Vector-0x12d85b>
    27a5:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    27a8:	00 00                	add    BYTE PTR [eax],al
    27aa:	00 02                	add    BYTE PTR [edx],al
    27ac:	91                   	xchg   ecx,eax
    27ad:	74 00                	je     27af <sysEnter_Vector-0x12d851>
    27af:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    27b2:	00 00                	add    BYTE PTR [eax],al
    27b4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    27b7:	06                   	push   es
    27b8:	64 00 00             	add    BYTE PTR fs:[eax],al
    27bb:	00 09                	add    BYTE PTR [ecx],cl
    27bd:	8f 00                	pop    DWORD PTR [eax]
    27bf:	00 00                	add    BYTE PTR [eax],al
    27c1:	0a 55 09             	or     dl,BYTE PTR [ebp+0x9]
    27c4:	00 00                	add    BYTE PTR [eax],al
    27c6:	01 0a                	add    DWORD PTR [edx],ecx
    27c8:	2c 00                	sub    al,0x0
    27ca:	00 00                	add    BYTE PTR [eax],al
    27cc:	bd 17 00 30 31       	mov    ebp,0x31300017
    27d1:	00 00                	add    BYTE PTR [eax],al
    27d3:	00 01                	add    BYTE PTR [ecx],al
    27d5:	9c                   	pushf  
    27d6:	06                   	push   es
    27d7:	73 74                	jae    284d <sysEnter_Vector-0x12d7b3>
    27d9:	72 00                	jb     27db <sysEnter_Vector-0x12d825>
    27db:	01 0a                	add    DWORD PTR [edx],ecx
    27dd:	89 00                	mov    DWORD PTR [eax],eax
    27df:	00 00                	add    BYTE PTR [eax],al
    27e1:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    27e7:	74 00                	je     27e9 <sysEnter_Vector-0x12d817>
    27e9:	01 0b                	add    DWORD PTR [ebx],ecx
    27eb:	2c 00                	sub    al,0x0
    27ed:	00 00                	add    BYTE PTR [eax],al
    27ef:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    27f5:	00 00                	add    BYTE PTR [eax],al
    27f7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    27fa:	fd                   	std    
    27fb:	0d 00 00 04 01       	or     eax,0x1040000
    2800:	f4                   	hlt    
    2801:	00 00                	add    BYTE PTR [eax],al
    2803:	00 0c 6e             	add    BYTE PTR [esi+ebp*2],cl
    2806:	09 00                	or     DWORD PTR [eax],eax
    2808:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    280b:	00 00                	add    BYTE PTR [eax],al
    280d:	f0 17                	lock pop ss
    280f:	00 30                	add    BYTE PTR [eax],dh
    2811:	ce                   	into   
    2812:	00 00                	add    BYTE PTR [eax],al
    2814:	00 49 11             	add    BYTE PTR [ecx+0x11],cl
    2817:	00 00                	add    BYTE PTR [eax],al
    2819:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    2820:	03 81 04 00 00 02    	add    eax,DWORD PTR [ecx+0x2000004]
    2826:	d8 37                	fdiv   DWORD PTR [edi]
    2828:	00 00                	add    BYTE PTR [eax],al
    282a:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    282d:	07                   	pop    es
    282e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2831:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2834:	05 05 00 00 00       	add    eax,0x5
    2839:	04 08                	add    al,0x8
    283b:	05 00 00 00 00       	add    eax,0x0
    2840:	04 0c                	add    al,0xc
    2842:	04 9b                	add    al,0x9b
    2844:	00 00                	add    BYTE PTR [eax],al
    2846:	00 05 66 09 00 00    	add    BYTE PTR ds:0x966,al
    284c:	01 0c 25 00 00 00 f0 	add    DWORD PTR [eiz*1-0x10000000],ecx
    2853:	17                   	pop    ss
    2854:	00 30                	add    BYTE PTR [eax],dh
    2856:	67 00 00             	add    BYTE PTR [bx+si],al
    2859:	00 01                	add    BYTE PTR [ecx],al
    285b:	9c                   	pushf  
    285c:	93                   	xchg   ebx,eax
    285d:	00 00                	add    BYTE PTR [eax],al
    285f:	00 06                	add    BYTE PTR [esi],al
    2861:	73 31                	jae    2894 <sysEnter_Vector-0x12d76c>
    2863:	00 01                	add    BYTE PTR [ecx],al
    2865:	0c 93                	or     al,0x93
    2867:	00 00                	add    BYTE PTR [eax],al
    2869:	00 02                	add    BYTE PTR [edx],al
    286b:	91                   	xchg   ecx,eax
    286c:	00 06                	add    BYTE PTR [esi],al
    286e:	73 32                	jae    28a2 <sysEnter_Vector-0x12d75e>
    2870:	00 01                	add    BYTE PTR [ecx],al
    2872:	0c 93                	or     al,0x93
    2874:	00 00                	add    BYTE PTR [eax],al
    2876:	00 02                	add    BYTE PTR [edx],al
    2878:	91                   	xchg   ecx,eax
    2879:	04 06                	add    al,0x6
    287b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    287c:	00 01                	add    BYTE PTR [ecx],al
    287e:	0c 2c                	or     al,0x2c
    2880:	00 00                	add    BYTE PTR [eax],al
    2882:	00 02                	add    BYTE PTR [edx],al
    2884:	91                   	xchg   ecx,eax
    2885:	08 00                	or     BYTE PTR [eax],al
    2887:	07                   	pop    es
    2888:	04 a0                	add    al,0xa0
    288a:	00 00                	add    BYTE PTR [eax],al
    288c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    288f:	06                   	push   es
    2890:	64 00 00             	add    BYTE PTR fs:[eax],al
    2893:	00 08                	add    BYTE PTR [eax],cl
    2895:	99                   	cdq    
    2896:	00 00                	add    BYTE PTR [eax],al
    2898:	00 09                	add    BYTE PTR [ecx],cl
    289a:	5d                   	pop    ebp
    289b:	09 00                	or     DWORD PTR [eax],eax
    289d:	00 01                	add    BYTE PTR [ecx],al
    289f:	16                   	push   ss
    28a0:	25 00 00 00 57       	and    eax,0x57000000
    28a5:	18 00                	sbb    BYTE PTR [eax],al
    28a7:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    28aa:	00 00                	add    BYTE PTR [eax],al
    28ac:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    28b3:	16                   	push   ss
    28b4:	93                   	xchg   ebx,eax
    28b5:	00 00                	add    BYTE PTR [eax],al
    28b7:	00 02                	add    BYTE PTR [edx],al
    28b9:	91                   	xchg   ecx,eax
    28ba:	00 06                	add    BYTE PTR [esi],al
    28bc:	73 32                	jae    28f0 <sysEnter_Vector-0x12d710>
    28be:	00 01                	add    BYTE PTR [ecx],al
    28c0:	16                   	push   ss
    28c1:	93                   	xchg   ebx,eax
    28c2:	00 00                	add    BYTE PTR [eax],al
    28c4:	00 02                	add    BYTE PTR [edx],al
    28c6:	91                   	xchg   ecx,eax
    28c7:	04 06                	add    al,0x6
    28c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    28ca:	00 01                	add    BYTE PTR [ecx],al
    28cc:	16                   	push   ss
    28cd:	2c 00                	sub    al,0x0
    28cf:	00 00                	add    BYTE PTR [eax],al
    28d1:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    28d7:	00 00                	add    BYTE PTR [eax],al
    28d9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    28dc:	89 0e                	mov    DWORD PTR [esi],ecx
    28de:	00 00                	add    BYTE PTR [eax],al
    28e0:	04 01                	add    al,0x1
    28e2:	f4                   	hlt    
    28e3:	00 00                	add    BYTE PTR [eax],al
    28e5:	00 0c 84             	add    BYTE PTR [esp+eax*4],cl
    28e8:	09 00                	or     DWORD PTR [eax],eax
    28ea:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    28ed:	00 00                	add    BYTE PTR [eax],al
    28ef:	c0 18 00             	rcr    BYTE PTR [eax],0x0
    28f2:	30 80 00 00 00 0e    	xor    BYTE PTR [eax+0xe000000],al
    28f8:	12 00                	adc    al,BYTE PTR [eax]
    28fa:	00 02                	add    BYTE PTR [edx],al
    28fc:	04 05                	add    al,0x5
    28fe:	69 6e 74 00 03 81 04 	imul   ebp,DWORD PTR [esi+0x74],0x4810300
    2905:	00 00                	add    BYTE PTR [eax],al
    2907:	02 d8                	add    bl,al
    2909:	37                   	aaa    
    290a:	00 00                	add    BYTE PTR [eax],al
    290c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    290f:	07                   	pop    es
    2910:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2913:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2916:	05 05 00 00 00       	add    eax,0x5
    291b:	04 08                	add    al,0x8
    291d:	05 00 00 00 00       	add    eax,0x0
    2922:	04 0c                	add    al,0xc
    2924:	04 9b                	add    al,0x9b
    2926:	00 00                	add    BYTE PTR [eax],al
    2928:	00 05 9a 09 00 00    	add    BYTE PTR ds:0x99a,al
    292e:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2934:	c0 18 00             	rcr    BYTE PTR [eax],0x0
    2937:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
    293a:	00 00                	add    BYTE PTR [eax],al
    293c:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    2943:	73 31                	jae    2976 <sysEnter_Vector-0x12d68a>
    2945:	00 01                	add    BYTE PTR [ecx],al
    2947:	0d 9f 00 00 00       	or     eax,0x9f
    294c:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    2952:	00 01                	add    BYTE PTR [ecx],al
    2954:	0d ac 00 00 00       	or     eax,0xac
    2959:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    295f:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    2965:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    296b:	01 0f                	add    DWORD PTR [edi],ecx
    296d:	9f                   	lahf   
    296e:	00 00                	add    BYTE PTR [eax],al
    2970:	00 02                	add    BYTE PTR [edx],al
    2972:	91                   	xchg   ecx,eax
    2973:	74 00                	je     2975 <sysEnter_Vector-0x12d68b>
    2975:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    297c:	01 06                	add    DWORD PTR [esi],eax
    297e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2981:	00 08                	add    BYTE PTR [eax],cl
    2983:	04 b2                	add    al,0xb2
    2985:	00 00                	add    BYTE PTR [eax],al
    2987:	00 09                	add    BYTE PTR [ecx],cl
    2989:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    298a:	00 00                	add    BYTE PTR [eax],al
    298c:	00 0a                	add    BYTE PTR [edx],cl
    298e:	a3 09 00 00 01       	mov    ds:0x1000009,eax
    2993:	1b 9f 00 00 00 20    	sbb    ebx,DWORD PTR [edi+0x20000000]
    2999:	19 00                	sbb    DWORD PTR [eax],eax
    299b:	30 20                	xor    BYTE PTR [eax],ah
    299d:	00 00                	add    BYTE PTR [eax],al
    299f:	00 01                	add    BYTE PTR [ecx],al
    29a1:	9c                   	pushf  
    29a2:	06                   	push   es
    29a3:	73 31                	jae    29d6 <sysEnter_Vector-0x12d62a>
    29a5:	00 01                	add    BYTE PTR [ecx],al
    29a7:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    29ad:	91                   	xchg   ecx,eax
    29ae:	00 06                	add    BYTE PTR [esi],al
    29b0:	73 32                	jae    29e4 <sysEnter_Vector-0x12d61c>
    29b2:	00 01                	add    BYTE PTR [ecx],al
    29b4:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    29bb:	04 06                	add    al,0x6
    29bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    29be:	00 01                	add    BYTE PTR [ecx],al
    29c0:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    29c3:	00 00                	add    BYTE PTR [eax],al
    29c5:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    29cb:	01 00                	add    DWORD PTR [eax],eax
    29cd:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    29d0:	24 0f                	and    al,0xf
    29d2:	00 00                	add    BYTE PTR [eax],al
    29d4:	04 01                	add    al,0x1
    29d6:	f4                   	hlt    
    29d7:	00 00                	add    BYTE PTR [eax],al
    29d9:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
    29dc:	09 00                	or     DWORD PTR [eax],eax
    29de:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    29e1:	00 00                	add    BYTE PTR [eax],al
    29e3:	40                   	inc    eax
    29e4:	19 00                	sbb    DWORD PTR [eax],eax
    29e6:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    29e9:	00 00                	add    BYTE PTR [eax],al
    29eb:	b3 12                	mov    bl,0x12
    29ed:	00 00                	add    BYTE PTR [eax],al
    29ef:	02 01                	add    al,BYTE PTR [ecx]
    29f1:	06                   	push   es
    29f2:	64 00 00             	add    BYTE PTR fs:[eax],al
    29f5:	00 02                	add    BYTE PTR [edx],al
    29f7:	01 06                	add    DWORD PTR [esi],eax
    29f9:	5d                   	pop    ebp
    29fa:	00 00                	add    BYTE PTR [eax],al
    29fc:	00 02                	add    BYTE PTR [edx],al
    29fe:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2a04:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2a0b:	02 08                	add    cl,BYTE PTR [eax]
    2a0d:	05 00 00 00 00       	add    eax,0x0
    2a12:	02 01                	add    al,BYTE PTR [ecx]
    2a14:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2a17:	00 00                	add    BYTE PTR [eax],al
    2a19:	02 02                	add    al,BYTE PTR [edx]
    2a1b:	07                   	pop    es
    2a1c:	0e                   	push   cs
    2a1d:	00 00                	add    BYTE PTR [eax],al
    2a1f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2a22:	00 00                	add    BYTE PTR [eax],al
    2a24:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2a27:	61                   	popa   
    2a28:	00 00                	add    BYTE PTR [eax],al
    2a2a:	00 02                	add    BYTE PTR [edx],al
    2a2c:	04 07                	add    al,0x7
    2a2e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a31:	00 02                	add    BYTE PTR [edx],al
    2a33:	08 07                	or     BYTE PTR [edi],al
    2a35:	34 00                	xor    al,0x0
    2a37:	00 00                	add    BYTE PTR [eax],al
    2a39:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2a40:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2a43:	9b                   	fwait
    2a44:	00 00                	add    BYTE PTR [eax],al
    2a46:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2a4c:	00 06                	add    BYTE PTR [esi],al
    2a4e:	25 00 00 00 02       	and    eax,0x2000000
    2a53:	01 02                	add    DWORD PTR [edx],eax
    2a55:	95                   	xchg   ebp,eax
    2a56:	00 00                	add    BYTE PTR [eax],al
    2a58:	00 02                	add    BYTE PTR [edx],al
    2a5a:	04 07                	add    al,0x7
    2a5c:	39 00                	cmp    DWORD PTR [eax],eax
    2a5e:	00 00                	add    BYTE PTR [eax],al
    2a60:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2a63:	e1 00                	loope  2a65 <sysEnter_Vector-0x12d59b>
    2a65:	00 00                	add    BYTE PTR [eax],al
    2a67:	05 04 25 00 00       	add    eax,0x2504
    2a6c:	00 07                	add    BYTE PTR [edi],al
    2a6e:	ce                   	into   
    2a6f:	09 00                	or     DWORD PTR [eax],eax
    2a71:	00 01                	add    BYTE PTR [ecx],al
    2a73:	3b 8f 00 00 00 40    	cmp    ecx,DWORD PTR [edi+0x40000000]
    2a79:	19 00                	sbb    DWORD PTR [eax],eax
    2a7b:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2a7e:	00 00                	add    BYTE PTR [eax],al
    2a80:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    2a87:	dd 09                	fisttp QWORD PTR [ecx]
    2a89:	00 00                	add    BYTE PTR [eax],al
    2a8b:	01 3b                	add    DWORD PTR [ebx],edi
    2a8d:	7d 00                	jge    2a8f <sysEnter_Vector-0x12d571>
    2a8f:	00 00                	add    BYTE PTR [eax],al
    2a91:	02 91 00 08 d6 09    	add    dl,BYTE PTR [ecx+0x9d60800]
    2a97:	00 00                	add    BYTE PTR [eax],al
    2a99:	01 3b                	add    DWORD PTR [ebx],edi
    2a9b:	3a 01                	cmp    al,BYTE PTR [ecx]
    2a9d:	00 00                	add    BYTE PTR [eax],al
    2a9f:	02 91 04 08 e2 09    	add    dl,BYTE PTR [ecx+0x9e20804]
    2aa5:	00 00                	add    BYTE PTR [eax],al
    2aa7:	01 3b                	add    DWORD PTR [ebx],edi
    2aa9:	3a 00                	cmp    al,BYTE PTR [eax]
    2aab:	00 00                	add    BYTE PTR [eax],al
    2aad:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2ab3:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    2ab9:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    2abc:	61                   	popa   
    2abd:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    2ac0:	01 3e                	add    DWORD PTR [esi],edi
    2ac2:	8f 00                	pop    DWORD PTR [eax]
    2ac4:	00 00                	add    BYTE PTR [eax],al
    2ac6:	01 57 09             	add    DWORD PTR [edi+0x9],edx
    2ac9:	63 00                	arpl   WORD PTR [eax],ax
    2acb:	01 3f                	add    DWORD PTR [edi],edi
    2acd:	3a 00                	cmp    al,BYTE PTR [eax]
    2acf:	00 00                	add    BYTE PTR [eax],al
    2ad1:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    2ad4:	c0 09 00             	ror    BYTE PTR [ecx],0x0
    2ad7:	00 01                	add    BYTE PTR [ecx],al
    2ad9:	40                   	inc    eax
    2ada:	8f 00                	pop    DWORD PTR [eax]
    2adc:	00 00                	add    BYTE PTR [eax],al
    2ade:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2ae1:	67 00 01             	add    BYTE PTR [bx+di],al
    2ae4:	41                   	inc    ecx
    2ae5:	3a 00                	cmp    al,BYTE PTR [eax]
    2ae7:	00 00                	add    BYTE PTR [eax],al
    2ae9:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2aec:	79 00                	jns    2aee <sysEnter_Vector-0x12d512>
    2aee:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2af1:	00 00                	add    BYTE PTR [eax],al
    2af3:	00 01                	add    BYTE PTR [ecx],al
    2af5:	51                   	push   ecx
    2af6:	0c c7                	or     al,0xc7
    2af8:	09 00                	or     DWORD PTR [eax],eax
    2afa:	00 01                	add    BYTE PTR [ecx],al
    2afc:	41                   	inc    ecx
    2afd:	3a 00                	cmp    al,BYTE PTR [eax]
    2aff:	00 00                	add    BYTE PTR [eax],al
    2b01:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2b04:	05 04 9d 00 00       	add    eax,0x9d04
    2b09:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    2b0f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2b12:	00 00                	add    BYTE PTR [eax],al
    2b14:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    2b1a:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    2b20:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    2b26:	05 03 c0 43 00       	add    eax,0x43c003
    2b2b:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    2b31:	02 36                	add    dh,BYTE PTR [esi]
    2b33:	56                   	push   esi
    2b34:	00 00                	add    BYTE PTR [eax],al
    2b36:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    2b3c:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    2b42:	02 37                	add    dh,BYTE PTR [edi]
    2b44:	56                   	push   esi
    2b45:	00 00                	add    BYTE PTR [eax],al
    2b47:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    2b4d:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    2b53:	03 45 3a             	add    eax,DWORD PTR [ebp+0x3a]
    2b56:	01 00                	add    DWORD PTR [eax],eax
    2b58:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    2b5e:	30 00                	xor    BYTE PTR [eax],al
    2b60:	6c                   	ins    BYTE PTR es:[edi],dx
    2b61:	00 00                	add    BYTE PTR [eax],al
    2b63:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b66:	df 0f                	fisttp WORD PTR [edi]
    2b68:	00 00                	add    BYTE PTR [eax],al
    2b6a:	04 01                	add    al,0x1
    2b6c:	f4                   	hlt    
    2b6d:	00 00                	add    BYTE PTR [eax],al
    2b6f:	00 0c e7             	add    BYTE PTR [edi+eiz*8],cl
    2b72:	09 00                	or     DWORD PTR [eax],eax
    2b74:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2b77:	00 00                	add    BYTE PTR [eax],al
    2b79:	c0 1a 00             	rcr    BYTE PTR [edx],0x0
    2b7c:	30 1d 00 00 00 00    	xor    BYTE PTR ds:0x0,bl
    2b82:	14 00                	adc    al,0x0
    2b84:	00 02                	add    BYTE PTR [edx],al
    2b86:	fe 09                	dec    BYTE PTR [ecx]
    2b88:	00 00                	add    BYTE PTR [eax],al
    2b8a:	01 01                	add    DWORD PTR [ecx],eax
    2b8c:	5b                   	pop    ebx
    2b8d:	00 00                	add    BYTE PTR [eax],al
    2b8f:	00 c0                	add    al,al
    2b91:	1a 00                	sbb    al,BYTE PTR [eax]
    2b93:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    2b99:	9c                   	pushf  
    2b9a:	5b                   	pop    ebx
    2b9b:	00 00                	add    BYTE PTR [eax],al
    2b9d:	00 03                	add    BYTE PTR [ebx],al
    2b9f:	76 61                	jbe    2c02 <sysEnter_Vector-0x12d3fe>
    2ba1:	6c                   	ins    BYTE PTR es:[edi],dx
    2ba2:	00 01                	add    BYTE PTR [ecx],al
    2ba4:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2ba7:	00 00                	add    BYTE PTR [eax],al
    2ba9:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    2baf:	74 00                	je     2bb1 <sysEnter_Vector-0x12d44f>
    2bb1:	01 01                	add    DWORD PTR [ecx],eax
    2bb3:	68 00 00 00 02       	push   0x2000000
    2bb8:	91                   	xchg   ecx,eax
    2bb9:	04 00                	add    al,0x0
    2bbb:	04 04                	add    al,0x4
    2bbd:	61                   	popa   
    2bbe:	00 00                	add    BYTE PTR [eax],al
    2bc0:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    2bc6:	00 00                	add    BYTE PTR [eax],al
    2bc8:	06                   	push   es
    2bc9:	04 05                	add    al,0x5
    2bcb:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    2bd2:	00 00                	add    BYTE PTR [eax],al
    2bd4:	04 00                	add    al,0x0
    2bd6:	3d 10 00 00 04       	cmp    eax,0x4000010
    2bdb:	01 f4                	add    esp,esi
    2bdd:	00 00                	add    BYTE PTR [eax],al
    2bdf:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    2be2:	0a 00                	or     al,BYTE PTR [eax]
    2be4:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2be7:	00 00                	add    BYTE PTR [eax],al
    2be9:	e0 1a                	loopne 2c05 <sysEnter_Vector-0x12d3fb>
    2beb:	00 30                	add    BYTE PTR [eax],dh
    2bed:	9c                   	pushf  
    2bee:	01 00                	add    DWORD PTR [eax],eax
    2bf0:	00 47 14             	add    BYTE PTR [edi+0x14],al
    2bf3:	00 00                	add    BYTE PTR [eax],al
    2bf5:	02 01                	add    al,BYTE PTR [ecx]
    2bf7:	06                   	push   es
    2bf8:	64 00 00             	add    BYTE PTR fs:[eax],al
    2bfb:	00 02                	add    BYTE PTR [edx],al
    2bfd:	01 06                	add    DWORD PTR [esi],eax
    2bff:	5d                   	pop    ebp
    2c00:	00 00                	add    BYTE PTR [eax],al
    2c02:	00 02                	add    BYTE PTR [edx],al
    2c04:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2c0a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2c11:	02 08                	add    cl,BYTE PTR [eax]
    2c13:	05 00 00 00 00       	add    eax,0x0
    2c18:	02 01                	add    al,BYTE PTR [ecx]
    2c1a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2c1d:	00 00                	add    BYTE PTR [eax],al
    2c1f:	02 02                	add    al,BYTE PTR [edx]
    2c21:	07                   	pop    es
    2c22:	0e                   	push   cs
    2c23:	00 00                	add    BYTE PTR [eax],al
    2c25:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2c28:	00 00                	add    BYTE PTR [eax],al
    2c2a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2c2d:	61                   	popa   
    2c2e:	00 00                	add    BYTE PTR [eax],al
    2c30:	00 02                	add    BYTE PTR [edx],al
    2c32:	04 07                	add    al,0x7
    2c34:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2c37:	00 02                	add    BYTE PTR [edx],al
    2c39:	08 07                	or     BYTE PTR [edi],al
    2c3b:	34 00                	xor    al,0x0
    2c3d:	00 00                	add    BYTE PTR [eax],al
    2c3f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2c46:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2c49:	9b                   	fwait
    2c4a:	00 00                	add    BYTE PTR [eax],al
    2c4c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2c52:	00 06                	add    BYTE PTR [esi],al
    2c54:	25 00 00 00 02       	and    eax,0x2000000
    2c59:	01 02                	add    DWORD PTR [edx],eax
    2c5b:	95                   	xchg   ebp,eax
    2c5c:	00 00                	add    BYTE PTR [eax],al
    2c5e:	00 02                	add    BYTE PTR [edx],al
    2c60:	04 07                	add    al,0x7
    2c62:	39 00                	cmp    DWORD PTR [eax],eax
    2c64:	00 00                	add    BYTE PTR [eax],al
    2c66:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2c69:	e1 00                	loope  2c6b <sysEnter_Vector-0x12d395>
    2c6b:	00 00                	add    BYTE PTR [eax],al
    2c6d:	05 04 25 00 00       	add    eax,0x2504
    2c72:	00 07                	add    BYTE PTR [edi],al
    2c74:	1b 0a                	sbb    ecx,DWORD PTR [edx]
    2c76:	00 00                	add    BYTE PTR [eax],al
    2c78:	01 57 6f             	add    DWORD PTR [edi+0x6f],edx
    2c7b:	00 00                	add    BYTE PTR [eax],al
    2c7d:	00 e0                	add    al,ah
    2c7f:	1a 00                	sbb    al,BYTE PTR [eax]
    2c81:	30 9c 01 00 00 01 9c 	xor    BYTE PTR [ecx+eax*1-0x63ff0000],bl
    2c88:	38 01                	cmp    BYTE PTR [ecx],al
    2c8a:	00 00                	add    BYTE PTR [eax],al
    2c8c:	08 dd                	or     ch,bl
    2c8e:	09 00                	or     DWORD PTR [eax],eax
    2c90:	00 01                	add    BYTE PTR [ecx],al
    2c92:	57                   	push   edi
    2c93:	7d 00                	jge    2c95 <sysEnter_Vector-0x12d36b>
    2c95:	00 00                	add    BYTE PTR [eax],al
    2c97:	02 91 00 08 d6 09    	add    dl,BYTE PTR [ecx+0x9d60800]
    2c9d:	00 00                	add    BYTE PTR [eax],al
    2c9f:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    2ca2:	01 00                	add    DWORD PTR [eax],eax
    2ca4:	00 02                	add    BYTE PTR [edx],al
    2ca6:	91                   	xchg   ecx,eax
    2ca7:	04 08                	add    al,0x8
    2ca9:	e2 09                	loop   2cb4 <sysEnter_Vector-0x12d34c>
    2cab:	00 00                	add    BYTE PTR [eax],al
    2cad:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    2cb0:	00 00                	add    BYTE PTR [eax],al
    2cb2:	00 02                	add    BYTE PTR [edx],al
    2cb4:	91                   	xchg   ecx,eax
    2cb5:	08 09                	or     BYTE PTR [ecx],cl
    2cb7:	73 00                	jae    2cb9 <sysEnter_Vector-0x12d347>
    2cb9:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    2cbc:	00 00                	add    BYTE PTR [eax],al
    2cbe:	00 01                	add    BYTE PTR [ecx],al
    2cc0:	56                   	push   esi
    2cc1:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    2cc4:	63 00                	arpl   WORD PTR [eax],ax
    2cc6:	01 5a 8f             	add    DWORD PTR [edx-0x71],ebx
    2cc9:	00 00                	add    BYTE PTR [eax],al
    2ccb:	00 01                	add    BYTE PTR [ecx],al
    2ccd:	57                   	push   edi
    2cce:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    2cd1:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    2cd4:	00 00                	add    BYTE PTR [eax],al
    2cd6:	00 01                	add    BYTE PTR [ecx],al
    2cd8:	53                   	push   ebx
    2cd9:	0a c0                	or     al,al
    2cdb:	09 00                	or     DWORD PTR [eax],eax
    2cdd:	00 01                	add    BYTE PTR [ecx],al
    2cdf:	5c                   	pop    esp
    2ce0:	8f 00                	pop    DWORD PTR [eax]
    2ce2:	00 00                	add    BYTE PTR [eax],al
    2ce4:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2ce7:	67 00 01             	add    BYTE PTR [bx+di],al
    2cea:	5d                   	pop    ebp
    2ceb:	3a 00                	cmp    al,BYTE PTR [eax]
    2ced:	00 00                	add    BYTE PTR [eax],al
    2cef:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2cf2:	79 00                	jns    2cf4 <sysEnter_Vector-0x12d30c>
    2cf4:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    2cf7:	00 00                	add    BYTE PTR [eax],al
    2cf9:	00 01                	add    BYTE PTR [ecx],al
    2cfb:	51                   	push   ecx
    2cfc:	0a c7                	or     al,bh
    2cfe:	09 00                	or     DWORD PTR [eax],eax
    2d00:	00 01                	add    BYTE PTR [ecx],al
    2d02:	5d                   	pop    ebp
    2d03:	3a 00                	cmp    al,BYTE PTR [eax]
    2d05:	00 00                	add    BYTE PTR [eax],al
    2d07:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    2d0d:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    2d10:	00 00                	add    BYTE PTR [eax],al
    2d12:	00 02                	add    BYTE PTR [edx],al
    2d14:	34 56                	xor    al,0x56
    2d16:	00 00                	add    BYTE PTR [eax],al
    2d18:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    2d1e:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    2d21:	00 00                	add    BYTE PTR [eax],al
    2d23:	00 02                	add    BYTE PTR [edx],al
    2d25:	35 56 00 00 00       	xor    eax,0x56
    2d2a:	05 03 c0 43 00       	add    eax,0x43c003
    2d2f:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    2d32:	01 00                	add    DWORD PTR [eax],eax
    2d34:	00 02                	add    BYTE PTR [edx],al
    2d36:	36                   	ss
    2d37:	56                   	push   esi
    2d38:	00 00                	add    BYTE PTR [eax],al
    2d3a:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    2d40:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    2d43:	00 00                	add    BYTE PTR [eax],al
    2d45:	00 02                	add    BYTE PTR [edx],al
    2d47:	37                   	aaa    
    2d48:	56                   	push   esi
    2d49:	00 00                	add    BYTE PTR [eax],al
    2d4b:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    2d51:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    2d54:	00 00                	add    BYTE PTR [eax],al
    2d56:	00 03                	add    BYTE PTR [ebx],al
    2d58:	45                   	inc    ebp
    2d59:	38 01                	cmp    BYTE PTR [ecx],al
    2d5b:	00 00                	add    BYTE PTR [eax],al
    2d5d:	05 03 c4 43 00       	add    eax,0x43c403
    2d62:	30 00                	xor    BYTE PTR [eax],al
    2d64:	62 01                	bound  eax,QWORD PTR [ecx]
    2d66:	00 00                	add    BYTE PTR [eax],al
    2d68:	04 00                	add    al,0x0
    2d6a:	e9 10 00 00 04       	jmp    4002d7f <sysEnter_Vector+0x3ed2d7f>
    2d6f:	01 f4                	add    esp,esi
    2d71:	00 00                	add    BYTE PTR [eax],al
    2d73:	00 0c 28             	add    BYTE PTR [eax+ebp*1],cl
    2d76:	0a 00                	or     al,BYTE PTR [eax]
    2d78:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2d7b:	00 00                	add    BYTE PTR [eax],al
    2d7d:	7c 1c                	jl     2d9b <sysEnter_Vector-0x12d265>
    2d7f:	00 30                	add    BYTE PTR [eax],dh
    2d81:	b6 00                	mov    dh,0x0
    2d83:	00 00                	add    BYTE PTR [eax],al
    2d85:	c0 15 00 00 02 01 06 	rcl    BYTE PTR ds:0x1020000,0x6
    2d8c:	64 00 00             	add    BYTE PTR fs:[eax],al
    2d8f:	00 02                	add    BYTE PTR [edx],al
    2d91:	01 06                	add    DWORD PTR [esi],eax
    2d93:	5d                   	pop    ebp
    2d94:	00 00                	add    BYTE PTR [eax],al
    2d96:	00 02                	add    BYTE PTR [edx],al
    2d98:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2d9e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2da5:	02 08                	add    cl,BYTE PTR [eax]
    2da7:	05 00 00 00 00       	add    eax,0x0
    2dac:	02 01                	add    al,BYTE PTR [ecx]
    2dae:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2db1:	00 00                	add    BYTE PTR [eax],al
    2db3:	02 02                	add    al,BYTE PTR [edx]
    2db5:	07                   	pop    es
    2db6:	0e                   	push   cs
    2db7:	00 00                	add    BYTE PTR [eax],al
    2db9:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2dbc:	00 00                	add    BYTE PTR [eax],al
    2dbe:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2dc1:	61                   	popa   
    2dc2:	00 00                	add    BYTE PTR [eax],al
    2dc4:	00 02                	add    BYTE PTR [edx],al
    2dc6:	04 07                	add    al,0x7
    2dc8:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2dcb:	00 02                	add    BYTE PTR [edx],al
    2dcd:	08 07                	or     BYTE PTR [edi],al
    2dcf:	34 00                	xor    al,0x0
    2dd1:	00 00                	add    BYTE PTR [eax],al
    2dd3:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2dda:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2ddd:	9b                   	fwait
    2dde:	00 00                	add    BYTE PTR [eax],al
    2de0:	00 02                	add    BYTE PTR [edx],al
    2de2:	01 02                	add    DWORD PTR [edx],eax
    2de4:	95                   	xchg   ebp,eax
    2de5:	00 00                	add    BYTE PTR [eax],al
    2de7:	00 02                	add    BYTE PTR [edx],al
    2de9:	04 07                	add    al,0x7
    2deb:	39 00                	cmp    DWORD PTR [eax],eax
    2ded:	00 00                	add    BYTE PTR [eax],al
    2def:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2df2:	e1 00                	loope  2df4 <sysEnter_Vector-0x12d20c>
    2df4:	00 00                	add    BYTE PTR [eax],al
    2df6:	05 04 25 00 00       	add    eax,0x2504
    2dfb:	00 06                	add    BYTE PTR [esi],al
    2dfd:	46                   	inc    esi
    2dfe:	0a 00                	or     al,BYTE PTR [eax]
    2e00:	00 01                	add    BYTE PTR [ecx],al
    2e02:	03 7c 1c 00          	add    edi,DWORD PTR [esp+ebx*1+0x0]
    2e06:	30 96 00 00 00 01    	xor    BYTE PTR [esi+0x1000000],dl
    2e0c:	9c                   	pushf  
    2e0d:	e6 00                	out    0x0,al
    2e0f:	00 00                	add    BYTE PTR [eax],al
    2e11:	07                   	pop    es
    2e12:	22 0a                	and    cl,BYTE PTR [edx]
    2e14:	00 00                	add    BYTE PTR [eax],al
    2e16:	01 03                	add    DWORD PTR [ebx],eax
    2e18:	92                   	xchg   edx,eax
    2e19:	00 00                	add    BYTE PTR [eax],al
    2e1b:	00 02                	add    BYTE PTR [edx],al
    2e1d:	91                   	xchg   ecx,eax
    2e1e:	00 08                	add    BYTE PTR [eax],cl
    2e20:	64                   	fs
    2e21:	73 74                	jae    2e97 <sysEnter_Vector-0x12d169>
    2e23:	00 01                	add    BYTE PTR [ecx],al
    2e25:	05 92 00 00 00       	add    eax,0x92
    2e2a:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    2e30:	63 00                	arpl   WORD PTR [eax],ax
    2e32:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    2e38:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    2e3e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2e41:	06                   	push   es
    2e42:	92                   	xchg   edx,eax
    2e43:	00 00                	add    BYTE PTR [eax],al
    2e45:	00 02                	add    BYTE PTR [edx],al
    2e47:	91                   	xchg   ecx,eax
    2e48:	64 00 06             	add    BYTE PTR fs:[esi],al
    2e4b:	3e 0a 00             	or     al,BYTE PTR ds:[eax]
    2e4e:	00 01                	add    BYTE PTR [ecx],al
    2e50:	1f                   	pop    ds
    2e51:	12 1d 00 30 20 00    	adc    bl,BYTE PTR ds:0x203000
    2e57:	00 00                	add    BYTE PTR [eax],al
    2e59:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    2e60:	22 0a                	and    cl,BYTE PTR [edx]
    2e62:	00 00                	add    BYTE PTR [eax],al
    2e64:	01 1f                	add    DWORD PTR [edi],ebx
    2e66:	92                   	xchg   edx,eax
    2e67:	00 00                	add    BYTE PTR [eax],al
    2e69:	00 02                	add    BYTE PTR [edx],al
    2e6b:	91                   	xchg   ecx,eax
    2e6c:	00 00                	add    BYTE PTR [eax],al
    2e6e:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    2e71:	00 00                	add    BYTE PTR [eax],al
    2e73:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2e76:	00 00                	add    BYTE PTR [eax],al
    2e78:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    2e7e:	30 09                	xor    BYTE PTR [ecx],cl
    2e80:	af                   	scas   eax,DWORD PTR es:[edi]
    2e81:	00 00                	add    BYTE PTR [eax],al
    2e83:	00 02                	add    BYTE PTR [edx],al
    2e85:	35 56 00 00 00       	xor    eax,0x56
    2e8a:	05 03 c0 43 00       	add    eax,0x43c003
    2e8f:	30 09                	xor    BYTE PTR [ecx],cl
    2e91:	5b                   	pop    ebx
    2e92:	01 00                	add    DWORD PTR [eax],eax
    2e94:	00 02                	add    BYTE PTR [edx],al
    2e96:	36                   	ss
    2e97:	56                   	push   esi
    2e98:	00 00                	add    BYTE PTR [eax],al
    2e9a:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    2ea0:	30 09                	xor    BYTE PTR [ecx],cl
    2ea2:	54                   	push   esp
    2ea3:	00 00                	add    BYTE PTR [eax],al
    2ea5:	00 02                	add    BYTE PTR [edx],al
    2ea7:	37                   	aaa    
    2ea8:	56                   	push   esi
    2ea9:	00 00                	add    BYTE PTR [eax],al
    2eab:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    2eb1:	30 09                	xor    BYTE PTR [ecx],cl
    2eb3:	28 00                	sub    BYTE PTR [eax],al
    2eb5:	00 00                	add    BYTE PTR [eax],al
    2eb7:	03 45 5f             	add    eax,DWORD PTR [ebp+0x5f]
    2eba:	01 00                	add    DWORD PTR [eax],eax
    2ebc:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    2ec2:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    2ec8:	00 00                	add    BYTE PTR [eax],al
    2eca:	93                   	xchg   ebx,eax
    2ecb:	01 00                	add    DWORD PTR [eax],eax
    2ecd:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ed0:	72 11                	jb     2ee3 <sysEnter_Vector-0x12d11d>
    2ed2:	00 00                	add    BYTE PTR [eax],al
    2ed4:	04 01                	add    al,0x1
    2ed6:	f4                   	hlt    
    2ed7:	00 00                	add    BYTE PTR [eax],al
    2ed9:	00 0c 57             	add    BYTE PTR [edi+edx*2],cl
    2edc:	0a 00                	or     al,BYTE PTR [eax]
    2ede:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2ee1:	00 00                	add    BYTE PTR [eax],al
    2ee3:	34 1d                	xor    al,0x1d
    2ee5:	00 30                	add    BYTE PTR [eax],dh
    2ee7:	8b 00                	mov    eax,DWORD PTR [eax]
    2ee9:	00 00                	add    BYTE PTR [eax],al
    2eeb:	93                   	xchg   ebx,eax
    2eec:	16                   	push   ss
    2eed:	00 00                	add    BYTE PTR [eax],al
    2eef:	02 01                	add    al,BYTE PTR [ecx]
    2ef1:	06                   	push   es
    2ef2:	64 00 00             	add    BYTE PTR fs:[eax],al
    2ef5:	00 02                	add    BYTE PTR [edx],al
    2ef7:	01 06                	add    DWORD PTR [esi],eax
    2ef9:	5d                   	pop    ebp
    2efa:	00 00                	add    BYTE PTR [eax],al
    2efc:	00 02                	add    BYTE PTR [edx],al
    2efe:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2f04:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2f0b:	02 08                	add    cl,BYTE PTR [eax]
    2f0d:	05 00 00 00 00       	add    eax,0x0
    2f12:	02 01                	add    al,BYTE PTR [ecx]
    2f14:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2f17:	00 00                	add    BYTE PTR [eax],al
    2f19:	02 02                	add    al,BYTE PTR [edx]
    2f1b:	07                   	pop    es
    2f1c:	0e                   	push   cs
    2f1d:	00 00                	add    BYTE PTR [eax],al
    2f1f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2f22:	00 00                	add    BYTE PTR [eax],al
    2f24:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2f27:	61                   	popa   
    2f28:	00 00                	add    BYTE PTR [eax],al
    2f2a:	00 02                	add    BYTE PTR [edx],al
    2f2c:	04 07                	add    al,0x7
    2f2e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2f31:	00 02                	add    BYTE PTR [edx],al
    2f33:	08 07                	or     BYTE PTR [edi],al
    2f35:	34 00                	xor    al,0x0
    2f37:	00 00                	add    BYTE PTR [eax],al
    2f39:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f40:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f43:	9b                   	fwait
    2f44:	00 00                	add    BYTE PTR [eax],al
    2f46:	00 02                	add    BYTE PTR [edx],al
    2f48:	01 02                	add    DWORD PTR [edx],eax
    2f4a:	95                   	xchg   ebp,eax
    2f4b:	00 00                	add    BYTE PTR [eax],al
    2f4d:	00 02                	add    BYTE PTR [edx],al
    2f4f:	04 07                	add    al,0x7
    2f51:	39 00                	cmp    DWORD PTR [eax],eax
    2f53:	00 00                	add    BYTE PTR [eax],al
    2f55:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f58:	e1 00                	loope  2f5a <sysEnter_Vector-0x12d0a6>
    2f5a:	00 00                	add    BYTE PTR [eax],al
    2f5c:	05 04 25 00 00       	add    eax,0x2504
    2f61:	00 06                	add    BYTE PTR [esi],al
    2f63:	4f                   	dec    edi
    2f64:	0a 00                	or     al,BYTE PTR [eax]
    2f66:	00 01                	add    BYTE PTR [ecx],al
    2f68:	33 92 00 00 00 34    	xor    edx,DWORD PTR [edx+0x34000000]
    2f6e:	1d 00 30 6e 00       	sbb    eax,0x6e3000
    2f73:	00 00                	add    BYTE PTR [eax],al
    2f75:	01 9c e4 00 00 00 07 	add    DWORD PTR [esp+eiz*8+0x7000000],ebx
    2f7c:	74 0a                	je     2f88 <sysEnter_Vector-0x12d078>
    2f7e:	00 00                	add    BYTE PTR [eax],al
    2f80:	01 33                	add    DWORD PTR [ebx],esi
    2f82:	92                   	xchg   edx,eax
    2f83:	00 00                	add    BYTE PTR [eax],al
    2f85:	00 02                	add    BYTE PTR [edx],al
    2f87:	91                   	xchg   ecx,eax
    2f88:	00 07                	add    BYTE PTR [edi],al
    2f8a:	71 0a                	jno    2f96 <sysEnter_Vector-0x12d06a>
    2f8c:	00 00                	add    BYTE PTR [eax],al
    2f8e:	01 33                	add    DWORD PTR [ebx],esi
    2f90:	92                   	xchg   edx,eax
    2f91:	00 00                	add    BYTE PTR [eax],al
    2f93:	00 02                	add    BYTE PTR [edx],al
    2f95:	91                   	xchg   ecx,eax
    2f96:	04 08                	add    al,0x8
    2f98:	61                   	popa   
    2f99:	00 01                	add    BYTE PTR [ecx],al
    2f9b:	35 92 00 00 00       	xor    eax,0x92
    2fa0:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    2fa3:	62 00                	bound  eax,QWORD PTR [eax]
    2fa5:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
    2fab:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    2fae:	09 64 0a 00          	or     DWORD PTR [edx+ecx*1+0x0],esp
    2fb2:	00 01                	add    BYTE PTR [ecx],al
    2fb4:	52                   	push   edx
    2fb5:	92                   	xchg   edx,eax
    2fb6:	00 00                	add    BYTE PTR [eax],al
    2fb8:	00 a2 1d 00 30 1d    	add    BYTE PTR [edx+0x1d30001d],ah
    2fbe:	00 00                	add    BYTE PTR [eax],al
    2fc0:	00 01                	add    BYTE PTR [ecx],al
    2fc2:	9c                   	pushf  
    2fc3:	1a 01                	sbb    al,BYTE PTR [ecx]
    2fc5:	00 00                	add    BYTE PTR [eax],al
    2fc7:	07                   	pop    es
    2fc8:	74 0a                	je     2fd4 <sysEnter_Vector-0x12d02c>
    2fca:	00 00                	add    BYTE PTR [eax],al
    2fcc:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    2fcf:	00 00                	add    BYTE PTR [eax],al
    2fd1:	00 02                	add    BYTE PTR [edx],al
    2fd3:	91                   	xchg   ecx,eax
    2fd4:	00 07                	add    BYTE PTR [edi],al
    2fd6:	71 0a                	jno    2fe2 <sysEnter_Vector-0x12d01e>
    2fd8:	00 00                	add    BYTE PTR [eax],al
    2fda:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    2fdd:	00 00                	add    BYTE PTR [eax],al
    2fdf:	00 02                	add    BYTE PTR [edx],al
    2fe1:	91                   	xchg   ecx,eax
    2fe2:	04 00                	add    al,0x0
    2fe4:	0a 25 00 00 00 2a    	or     ah,BYTE PTR ds:0x2a000000
    2fea:	01 00                	add    DWORD PTR [eax],eax
    2fec:	00 0b                	add    BYTE PTR [ebx],cl
    2fee:	8b 00                	mov    eax,DWORD PTR [eax]
    2ff0:	00 00                	add    BYTE PTR [eax],al
    2ff2:	65 00 0c 6b          	add    BYTE PTR gs:[ebx+ebp*2],cl
    2ff6:	0a 00                	or     al,BYTE PTR [eax]
    2ff8:	00 01                	add    BYTE PTR [ecx],al
    2ffa:	19 1a                	sbb    DWORD PTR [edx],ebx
    2ffc:	01 00                	add    DWORD PTR [eax],eax
    2ffe:	00 05 03 60 42 00    	add    BYTE PTR ds:0x426003,al
    3004:	30 0d 4b 00 00 00    	xor    BYTE PTR ds:0x4b,cl
    300a:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    300d:	00 00                	add    BYTE PTR [eax],al
    300f:	00 05 03 bc 43 00    	add    BYTE PTR ds:0x43bc03,al
    3015:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    301b:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    3021:	05 03 c0 43 00       	add    eax,0x43c003
    3026:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    302c:	02 36                	add    dh,BYTE PTR [esi]
    302e:	56                   	push   esi
    302f:	00 00                	add    BYTE PTR [eax],al
    3031:	00 05 03 b8 43 00    	add    BYTE PTR ds:0x43b803,al
    3037:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    303d:	02 37                	add    dh,BYTE PTR [edi]
    303f:	56                   	push   esi
    3040:	00 00                	add    BYTE PTR [eax],al
    3042:	00 05 03 c8 43 00    	add    BYTE PTR ds:0x43c803,al
    3048:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    304e:	03 45 90             	add    eax,DWORD PTR [ebp-0x70]
    3051:	01 00                	add    DWORD PTR [eax],eax
    3053:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    3059:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    305f:	00 00                	add    BYTE PTR [eax],al
    3061:	3e                   	ds
    3062:	05 00 00 04 00       	add    eax,0x40000
    3067:	3a 12                	cmp    dl,BYTE PTR [edx]
    3069:	00 00                	add    BYTE PTR [eax],al
    306b:	04 01                	add    al,0x1
    306d:	f4                   	hlt    
    306e:	00 00                	add    BYTE PTR [eax],al
    3070:	00 0c 7a             	add    BYTE PTR [edx+edi*2],cl
    3073:	0b 00                	or     eax,DWORD PTR [eax]
    3075:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3078:	00 00                	add    BYTE PTR [eax],al
    307a:	c0 1d 00 30 bb 0c 00 	rcr    BYTE PTR ds:0xcbb3000,0x0
    3081:	00 5e 17             	add    BYTE PTR [esi+0x17],bl
    3084:	00 00                	add    BYTE PTR [eax],al
    3086:	02 f4                	add    dh,ah
    3088:	02 00                	add    al,BYTE PTR [eax]
    308a:	00 04 da             	add    BYTE PTR [edx+ebx*8],al
    308d:	00 00                	add    BYTE PTR [eax],al
    308f:	00 06                	add    BYTE PTR [esi],al
    3091:	15 da 00 00 00       	adc    eax,0xda
    3096:	03 59 03             	add    ebx,DWORD PTR [ecx+0x3]
    3099:	00 00                	add    BYTE PTR [eax],al
    309b:	00 03                	add    BYTE PTR [ebx],al
    309d:	91                   	xchg   ecx,eax
    309e:	03 00                	add    eax,DWORD PTR [eax]
    30a0:	00 01                	add    BYTE PTR [ecx],al
    30a2:	03 60 02             	add    esp,DWORD PTR [eax+0x2]
    30a5:	00 00                	add    BYTE PTR [eax],al
    30a7:	02 03                	add    al,BYTE PTR [ebx]
    30a9:	e6 02                	out    0x2,al
    30ab:	00 00                	add    BYTE PTR [eax],al
    30ad:	03 03                	add    eax,DWORD PTR [ebx]
    30af:	53                   	push   ebx
    30b0:	02 00                	add    al,BYTE PTR [eax]
    30b2:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    30b5:	ab                   	stos   DWORD PTR es:[edi],eax
    30b6:	03 00                	add    eax,DWORD PTR [eax]
    30b8:	00 05 03 0a 03 00    	add    BYTE PTR ds:0x30a03,al
    30be:	00 06                	add    BYTE PTR [esi],al
    30c0:	03 e1                	add    esp,ecx
    30c2:	03 00                	add    eax,DWORD PTR [eax]
    30c4:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    30c7:	4c                   	dec    esp
    30c8:	03 00                	add    eax,DWORD PTR [eax]
    30ca:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    30cd:	f0 03 00             	lock add eax,DWORD PTR [eax]
    30d0:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    30d3:	d2 02                	rol    BYTE PTR [edx],cl
    30d5:	00 00                	add    BYTE PTR [eax],al
    30d7:	97                   	xchg   edi,eax
    30d8:	04 69                	add    al,0x69
    30da:	03 00                	add    eax,DWORD PTR [eax]
    30dc:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    30df:	04 3f                	add    al,0x3f
    30e1:	03 00                	add    eax,DWORD PTR [eax]
    30e3:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    30e7:	d3 03                	rol    DWORD PTR [ebx],cl
    30e9:	00 00                	add    BYTE PTR [eax],al
    30eb:	65 01 04 b4          	add    DWORD PTR gs:[esp+esi*4],eax
    30ef:	02 00                	add    al,BYTE PTR [eax]
    30f1:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    30f4:	04 08                	add    al,0x8
    30f6:	04 00                	add    al,0x0
    30f8:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    30fb:	04 17                	add    al,0x17
    30fd:	03 00                	add    eax,DWORD PTR [eax]
    30ff:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    3102:	04 99                	add    al,0x99
    3104:	02 00                	add    al,BYTE PTR [eax]
    3106:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    3109:	04 80                	add    al,0x80
    310b:	03 00                	add    eax,DWORD PTR [eax]
    310d:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3110:	04 c2                	add    al,0xc2
    3112:	02 00                	add    al,BYTE PTR [eax]
    3114:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    3117:	04 b9                	add    al,0xb9
    3119:	03 00                	add    eax,DWORD PTR [eax]
    311b:	00 00                	add    BYTE PTR [eax],al
    311d:	03 04 24             	add    eax,DWORD PTR [esp]
    3120:	03 00                	add    eax,DWORD PTR [eax]
    3122:	00 01                	add    BYTE PTR [ecx],al
    3124:	03 04 a8             	add    eax,DWORD PTR [eax+ebp*4]
    3127:	02 00                	add    al,BYTE PTR [eax]
    3129:	00 02                	add    BYTE PTR [edx],al
    312b:	03 04 6d 02 00 00 03 	add    eax,DWORD PTR [ebp*2+0x3000002]
    3132:	03 04 7d 02 00 00 04 	add    eax,DWORD PTR [edi*2+0x4000002]
    3139:	03 00                	add    eax,DWORD PTR [eax]
    313b:	05 04 07 3e 00       	add    eax,0x3e0704
    3140:	00 00                	add    BYTE PTR [eax],al
    3142:	05 01 06 64 00       	add    eax,0x640601
    3147:	00 00                	add    BYTE PTR [eax],al
    3149:	05 01 06 5d 00       	add    eax,0x5d0601
    314e:	00 00                	add    BYTE PTR [eax],al
    3150:	05 02 05 ea 00       	add    eax,0xea0502
    3155:	00 00                	add    BYTE PTR [eax],al
    3157:	06                   	push   es
    3158:	04 05                	add    al,0x5
    315a:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    3161:	00 00                	add    BYTE PTR [eax],al
    3163:	00 00                	add    BYTE PTR [eax],al
    3165:	05 01 08 5b 00       	add    eax,0x5b0801
    316a:	00 00                	add    BYTE PTR [eax],al
    316c:	05 02 07 0e 00       	add    eax,0xe0702
    3171:	00 00                	add    BYTE PTR [eax],al
    3173:	07                   	pop    es
    3174:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    317a:	da 00                	fiadd  DWORD PTR [eax]
    317c:	00 00                	add    BYTE PTR [eax],al
    317e:	05 08 07 34 00       	add    eax,0x340708
    3183:	00 00                	add    BYTE PTR [eax],al
    3185:	05 04 05 05 00       	add    eax,0x50504
    318a:	00 00                	add    BYTE PTR [eax],al
    318c:	05 0c 04 9b 00       	add    eax,0x9b040c
    3191:	00 00                	add    BYTE PTR [eax],al
    3193:	07                   	pop    es
    3194:	c1 0a 00             	ror    DWORD PTR [edx],0x0
    3197:	00 03                	add    BYTE PTR [ebx],al
    3199:	2a 24 01             	sub    ah,BYTE PTR [ecx+eax*1]
    319c:	00 00                	add    BYTE PTR [eax],al
    319e:	08 74 6d 00          	or     BYTE PTR [ebp+ebp*2+0x0],dh
    31a2:	2c 03                	sub    al,0x3
    31a4:	2c cd                	sub    al,0xcd
    31a6:	01 00                	add    DWORD PTR [eax],eax
    31a8:	00 09                	add    BYTE PTR [ecx],cl
    31aa:	8d 0b                	lea    ecx,[ebx]
    31ac:	00 00                	add    BYTE PTR [eax],al
    31ae:	03 2e                	add    ebp,DWORD PTR [esi]
    31b0:	f6 00 00             	test   BYTE PTR [eax],0x0
    31b3:	00 00                	add    BYTE PTR [eax],al
    31b5:	09 64 0b 00          	or     DWORD PTR [ebx+ecx*1+0x0],esp
    31b9:	00 03                	add    BYTE PTR [ebx],al
    31bb:	2f                   	das    
    31bc:	f6 00 00             	test   BYTE PTR [eax],0x0
    31bf:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    31c2:	e3 0a                	jecxz  31ce <sysEnter_Vector-0x12ce32>
    31c4:	00 00                	add    BYTE PTR [eax],al
    31c6:	03 30                	add    esi,DWORD PTR [eax]
    31c8:	f6 00 00             	test   BYTE PTR [eax],0x0
    31cb:	00 08                	add    BYTE PTR [eax],cl
    31cd:	09 3b                	or     DWORD PTR [ebx],edi
    31cf:	0b 00                	or     eax,DWORD PTR [eax]
    31d1:	00 03                	add    BYTE PTR [ebx],al
    31d3:	31 f6                	xor    esi,esi
    31d5:	00 00                	add    BYTE PTR [eax],al
    31d7:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    31da:	f3 0a 00             	repz or al,BYTE PTR [eax]
    31dd:	00 03                	add    BYTE PTR [ebx],al
    31df:	32 f6                	xor    dh,dh
    31e1:	00 00                	add    BYTE PTR [eax],al
    31e3:	00 10                	add    BYTE PTR [eax],dl
    31e5:	09 2a                	or     DWORD PTR [edx],ebp
    31e7:	0b 00                	or     eax,DWORD PTR [eax]
    31e9:	00 03                	add    BYTE PTR [ebx],al
    31eb:	33 f6                	xor    esi,esi
    31ed:	00 00                	add    BYTE PTR [eax],al
    31ef:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    31f2:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    31f3:	0a 00                	or     al,BYTE PTR [eax]
    31f5:	00 03                	add    BYTE PTR [ebx],al
    31f7:	34 f6                	xor    al,0xf6
    31f9:	00 00                	add    BYTE PTR [eax],al
    31fb:	00 18                	add    BYTE PTR [eax],bl
    31fd:	09 4d 0b             	or     DWORD PTR [ebp+0xb],ecx
    3200:	00 00                	add    BYTE PTR [eax],al
    3202:	03 35 f6 00 00 00    	add    esi,DWORD PTR ds:0xf6
    3208:	1c 09                	sbb    al,0x9
    320a:	6b 0b 00             	imul   ecx,DWORD PTR [ebx],0x0
    320d:	00 03                	add    BYTE PTR [ebx],al
    320f:	36 f6 00 00          	test   BYTE PTR ss:[eax],0x0
    3213:	00 20                	add    BYTE PTR [eax],ah
    3215:	09 ad 0a 00 00 03    	or     DWORD PTR [ebp+0x300000a],ebp
    321b:	37                   	aaa    
    321c:	24 01                	and    al,0x1
    321e:	00 00                	add    BYTE PTR [eax],al
    3220:	24 09                	and    al,0x9
    3222:	84 0a                	test   BYTE PTR [edx],cl
    3224:	00 00                	add    BYTE PTR [eax],al
    3226:	03 38                	add    edi,DWORD PTR [eax]
    3228:	cd 01                	int    0x1
    322a:	00 00                	add    BYTE PTR [eax],al
    322c:	28 00                	sub    BYTE PTR [eax],al
    322e:	0a 04 d3             	or     al,BYTE PTR [ebx+edx*8]
    3231:	01 00                	add    DWORD PTR [eax],eax
    3233:	00 0b                	add    BYTE PTR [ebx],cl
    3235:	e1 00                	loope  3237 <sysEnter_Vector-0x12cdc9>
    3237:	00 00                	add    BYTE PTR [eax],al
    3239:	05 01 02 95 00       	add    eax,0x950201
    323e:	00 00                	add    BYTE PTR [eax],al
    3240:	05 04 07 39 00       	add    eax,0x390704
    3245:	00 00                	add    BYTE PTR [eax],al
    3247:	05 04 07 e1 00       	add    eax,0xe10704
    324c:	00 00                	add    BYTE PTR [eax],al
    324e:	0a 04 e1             	or     al,BYTE PTR [ecx+eiz*8]
    3251:	00 00                	add    BYTE PTR [eax],al
    3253:	00 0c 7b             	add    BYTE PTR [ebx+edi*2],cl
    3256:	0a 00                	or     al,BYTE PTR [eax]
    3258:	00 01                	add    BYTE PTR [ecx],al
    325a:	16                   	push   ss
    325b:	32 01                	xor    al,BYTE PTR [ecx]
    325d:	00 00                	add    BYTE PTR [eax],al
    325f:	c0 1d 00 30 44 00 00 	rcr    BYTE PTR ds:0x443000,0x0
    3266:	00 01                	add    BYTE PTR [ecx],al
    3268:	9c                   	pushf  
    3269:	1b 02                	sbb    eax,DWORD PTR [edx]
    326b:	00 00                	add    BYTE PTR [eax],al
    326d:	0d 67 04 00 00       	or     eax,0x467
    3272:	01 18                	add    DWORD PTR [eax],ebx
    3274:	12 01                	adc    al,BYTE PTR [ecx]
    3276:	00 00                	add    BYTE PTR [eax],al
    3278:	02 91 6c 00 0e 9b    	add    dl,BYTE PTR [ecx-0x64f1ff94]
    327e:	0a 00                	or     al,BYTE PTR [eax]
    3280:	00 01                	add    BYTE PTR [ecx],al
    3282:	1e                   	push   ds
    3283:	89 02                	mov    DWORD PTR [edx],eax
    3285:	00 00                	add    BYTE PTR [eax],al
    3287:	04 1e                	add    al,0x1e
    3289:	00 30                	add    BYTE PTR [eax],dh
    328b:	19 03                	sbb    DWORD PTR [ebx],eax
    328d:	00 00                	add    BYTE PTR [eax],al
    328f:	01 9c 89 02 00 00 0f 	add    DWORD PTR [ecx+ecx*4+0xf000002],ebx
    3296:	d1 0a                	ror    DWORD PTR [edx],1
    3298:	00 00                	add    BYTE PTR [eax],al
    329a:	01 1e                	add    DWORD PTR [esi],ebx
    329c:	8f 02                	pop    DWORD PTR [edx]
    329e:	00 00                	add    BYTE PTR [eax],al
    32a0:	02 91 00 0f 74 0b    	add    dl,BYTE PTR [ecx+0xb740f00]
    32a6:	00 00                	add    BYTE PTR [eax],al
    32a8:	01 1e                	add    DWORD PTR [esi],ebx
    32aa:	89 02                	mov    DWORD PTR [edx],eax
    32ac:	00 00                	add    BYTE PTR [eax],al
    32ae:	02 91 04 0d 25 0b    	add    dl,BYTE PTR [ecx+0xb250d04]
    32b4:	00 00                	add    BYTE PTR [eax],al
    32b6:	01 20                	add    DWORD PTR [eax],esp
    32b8:	32 01                	xor    al,BYTE PTR [ecx]
    32ba:	00 00                	add    BYTE PTR [eax],al
    32bc:	02 91 68 0d 32 0b    	add    dl,BYTE PTR [ecx+0xb320d68]
    32c2:	00 00                	add    BYTE PTR [eax],al
    32c4:	01 21                	add    DWORD PTR [ecx],esp
    32c6:	df 01                	fild   WORD PTR [ecx]
    32c8:	00 00                	add    BYTE PTR [eax],al
    32ca:	02 91 64 0d 8c 0a    	add    dl,BYTE PTR [ecx+0xa8c0d64]
    32d0:	00 00                	add    BYTE PTR [eax],al
    32d2:	01 21                	add    DWORD PTR [ecx],esp
    32d4:	df 01                	fild   WORD PTR [ecx]
    32d6:	00 00                	add    BYTE PTR [eax],al
    32d8:	02 91 70 0d 2d 0b    	add    dl,BYTE PTR [ecx+0xb2d0d70]
    32de:	00 00                	add    BYTE PTR [eax],al
    32e0:	01 22                	add    DWORD PTR [edx],esp
    32e2:	f6 00 00             	test   BYTE PTR [eax],0x0
    32e5:	00 02                	add    BYTE PTR [edx],al
    32e7:	91                   	xchg   ecx,eax
    32e8:	6c                   	ins    BYTE PTR es:[edi],dx
    32e9:	00 0a                	add    BYTE PTR [edx],cl
    32eb:	04 3d                	add    al,0x3d
    32ed:	01 00                	add    DWORD PTR [eax],eax
    32ef:	00 0a                	add    BYTE PTR [edx],cl
    32f1:	04 95                	add    al,0x95
    32f3:	02 00                	add    al,BYTE PTR [eax]
    32f5:	00 0b                	add    BYTE PTR [ebx],cl
    32f7:	32 01                	xor    al,BYTE PTR [ecx]
    32f9:	00 00                	add    BYTE PTR [eax],al
    32fb:	10 c8                	adc    al,cl
    32fd:	0a 00                	or     al,BYTE PTR [eax]
    32ff:	00 01                	add    BYTE PTR [ecx],al
    3301:	3b 89 02 00 00 1d    	cmp    ecx,DWORD PTR [ecx+0x1d000002]
    3307:	21 00                	and    DWORD PTR [eax],eax
    3309:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    330f:	9c                   	pushf  
    3310:	d0 02                	rol    BYTE PTR [edx],1
    3312:	00 00                	add    BYTE PTR [eax],al
    3314:	0f d1 0a             	psrlw  mm1,QWORD PTR [edx]
    3317:	00 00                	add    BYTE PTR [eax],al
    3319:	01 3b                	add    DWORD PTR [ebx],edi
    331b:	8f 02                	pop    DWORD PTR [edx]
    331d:	00 00                	add    BYTE PTR [eax],al
    331f:	02 91 00 0f 74 0b    	add    dl,BYTE PTR [ecx+0xb740f00]
    3325:	00 00                	add    BYTE PTR [eax],al
    3327:	01 3b                	add    DWORD PTR [ebx],edi
    3329:	89 02                	mov    DWORD PTR [edx],eax
    332b:	00 00                	add    BYTE PTR [eax],al
    332d:	02 91 04 00 10 b7    	add    dl,BYTE PTR [ecx-0x48effffc]
    3333:	0a 00                	or     al,BYTE PTR [eax]
    3335:	00 01                	add    BYTE PTR [ecx],al
    3337:	40                   	inc    eax
    3338:	89 02                	mov    DWORD PTR [edx],eax
    333a:	00 00                	add    BYTE PTR [eax],al
    333c:	3a 21                	cmp    ah,BYTE PTR [ecx]
    333e:	00 30                	add    BYTE PTR [eax],dh
    3340:	41                   	inc    ecx
    3341:	00 00                	add    BYTE PTR [eax],al
    3343:	00 01                	add    BYTE PTR [ecx],al
    3345:	9c                   	pushf  
    3346:	12 03                	adc    al,BYTE PTR [ebx]
    3348:	00 00                	add    BYTE PTR [eax],al
    334a:	0f d1 0a             	psrlw  mm1,QWORD PTR [edx]
    334d:	00 00                	add    BYTE PTR [eax],al
    334f:	01 40 8f             	add    DWORD PTR [eax-0x71],eax
    3352:	02 00                	add    al,BYTE PTR [eax]
    3354:	00 02                	add    BYTE PTR [edx],al
    3356:	91                   	xchg   ecx,eax
    3357:	00 11                	add    BYTE PTR [ecx],dl
    3359:	74 00                	je     335b <sysEnter_Vector-0x12cca5>
    335b:	01 41 32             	add    DWORD PTR [ecx+0x32],eax
    335e:	01 00                	add    DWORD PTR [eax],eax
    3360:	00 02                	add    BYTE PTR [edx],al
    3362:	91                   	xchg   ecx,eax
    3363:	6c                   	ins    BYTE PTR es:[edi],dx
    3364:	0d 74 0b 00 00       	or     eax,0xb74
    3369:	01 42 3d             	add    DWORD PTR [edx+0x3d],eax
    336c:	01 00                	add    DWORD PTR [eax],eax
    336e:	00 02                	add    BYTE PTR [edx],al
    3370:	91                   	xchg   ecx,eax
    3371:	40                   	inc    eax
    3372:	00 10                	add    BYTE PTR [eax],dl
    3374:	00 0b                	add    BYTE PTR [ebx],cl
    3376:	00 00                	add    BYTE PTR [eax],al
    3378:	01 48 89             	add    DWORD PTR [eax-0x77],ecx
    337b:	02 00                	add    al,BYTE PTR [eax]
    337d:	00 7b 21             	add    BYTE PTR [ebx+0x21],bh
    3380:	00 30                	add    BYTE PTR [eax],dh
    3382:	35 00 00 00 01       	xor    eax,0x1000000
    3387:	9c                   	pushf  
    3388:	54                   	push   esp
    3389:	03 00                	add    eax,DWORD PTR [eax]
    338b:	00 0f                	add    BYTE PTR [edi],cl
    338d:	d1 0a                	ror    DWORD PTR [edx],1
    338f:	00 00                	add    BYTE PTR [eax],al
    3391:	01 48 8f             	add    DWORD PTR [eax-0x71],ecx
    3394:	02 00                	add    al,BYTE PTR [eax]
    3396:	00 02                	add    BYTE PTR [edx],al
    3398:	91                   	xchg   ecx,eax
    3399:	00 0f                	add    BYTE PTR [edi],cl
    339b:	74 0b                	je     33a8 <sysEnter_Vector-0x12cc58>
    339d:	00 00                	add    BYTE PTR [eax],al
    339f:	01 48 89             	add    DWORD PTR [eax-0x77],ecx
    33a2:	02 00                	add    al,BYTE PTR [eax]
    33a4:	00 02                	add    BYTE PTR [edx],al
    33a6:	91                   	xchg   ecx,eax
    33a7:	04 11                	add    al,0x11
    33a9:	74 00                	je     33ab <sysEnter_Vector-0x12cc55>
    33ab:	01 4a 32             	add    DWORD PTR [edx+0x32],ecx
    33ae:	01 00                	add    DWORD PTR [eax],eax
    33b0:	00 02                	add    BYTE PTR [edx],al
    33b2:	91                   	xchg   ecx,eax
    33b3:	74 00                	je     33b5 <sysEnter_Vector-0x12cc4b>
    33b5:	10 d7                	adc    bh,dl
    33b7:	0a 00                	or     al,BYTE PTR [eax]
    33b9:	00 01                	add    BYTE PTR [ecx],al
    33bb:	50                   	push   eax
    33bc:	89 02                	mov    DWORD PTR [edx],eax
    33be:	00 00                	add    BYTE PTR [eax],al
    33c0:	b0 21                	mov    al,0x21
    33c2:	00 30                	add    BYTE PTR [eax],dh
    33c4:	1d 00 00 00 01       	sbb    eax,0x1000000
    33c9:	9c                   	pushf  
    33ca:	8a 03                	mov    al,BYTE PTR [ebx]
    33cc:	00 00                	add    BYTE PTR [eax],al
    33ce:	0f d1 0a             	psrlw  mm1,QWORD PTR [edx]
    33d1:	00 00                	add    BYTE PTR [eax],al
    33d3:	01 50 8f             	add    DWORD PTR [eax-0x71],edx
    33d6:	02 00                	add    al,BYTE PTR [eax]
    33d8:	00 02                	add    BYTE PTR [edx],al
    33da:	91                   	xchg   ecx,eax
    33db:	00 0f                	add    BYTE PTR [edi],cl
    33dd:	74 0b                	je     33ea <sysEnter_Vector-0x12cc16>
    33df:	00 00                	add    BYTE PTR [eax],al
    33e1:	01 50 89             	add    DWORD PTR [eax-0x77],edx
    33e4:	02 00                	add    al,BYTE PTR [eax]
    33e6:	00 02                	add    BYTE PTR [edx],al
    33e8:	91                   	xchg   ecx,eax
    33e9:	04 00                	add    al,0x0
    33eb:	0e                   	push   cs
    33ec:	23 0b                	and    ecx,DWORD PTR [ebx]
    33ee:	00 00                	add    BYTE PTR [eax],al
    33f0:	01 54 32 01          	add    DWORD PTR [edx+esi*1+0x1],edx
    33f4:	00 00                	add    BYTE PTR [eax],al
    33f6:	cd 21                	int    0x21
    33f8:	00 30                	add    BYTE PTR [eax],dh
    33fa:	41                   	inc    ecx
    33fb:	08 00                	or     BYTE PTR [eax],al
    33fd:	00 01                	add    BYTE PTR [ecx],al
    33ff:	9c                   	pushf  
    3400:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    3403:	00 0f                	add    BYTE PTR [edi],cl
    3405:	74 0b                	je     3412 <sysEnter_Vector-0x12cbee>
    3407:	00 00                	add    BYTE PTR [eax],al
    3409:	01 54 89 02          	add    DWORD PTR [ecx+ecx*4+0x2],edx
    340d:	00 00                	add    BYTE PTR [eax],al
    340f:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    3415:	79 00                	jns    3417 <sysEnter_Vector-0x12cbe9>
    3417:	01 55 24             	add    DWORD PTR [ebp+0x24],edx
    341a:	01 00                	add    DWORD PTR [eax],eax
    341c:	00 02                	add    BYTE PTR [edx],al
    341e:	91                   	xchg   ecx,eax
    341f:	68 0d 2d 0b 00       	push   0xb2d0d
    3424:	00 01                	add    BYTE PTR [ecx],al
    3426:	55                   	push   ebp
    3427:	24 01                	and    al,0x1
    3429:	00 00                	add    BYTE PTR [eax],al
    342b:	02 91 54 0d 2a 0b    	add    dl,BYTE PTR [ecx+0xb2a0d54]
    3431:	00 00                	add    BYTE PTR [eax],al
    3433:	01 56 f6             	add    DWORD PTR [esi-0xa],edx
    3436:	00 00                	add    BYTE PTR [eax],al
    3438:	00 02                	add    BYTE PTR [edx],al
    343a:	91                   	xchg   ecx,eax
    343b:	4c                   	dec    esp
    343c:	0d 50 0b 00 00       	or     eax,0xb50
    3441:	01 57 f6             	add    DWORD PTR [edi-0xa],edx
    3444:	00 00                	add    BYTE PTR [eax],al
    3446:	00 02                	add    BYTE PTR [edx],al
    3448:	91                   	xchg   ecx,eax
    3449:	64                   	fs
    344a:	0d 5e 0b 00 00       	or     eax,0xb5e
    344f:	01 57 f6             	add    DWORD PTR [edi-0xa],edx
    3452:	00 00                	add    BYTE PTR [eax],al
    3454:	00 02                	add    BYTE PTR [edx],al
    3456:	91                   	xchg   ecx,eax
    3457:	60                   	pusha  
    3458:	0d 85 05 00 00       	or     eax,0x585
    345d:	01 58 24             	add    DWORD PTR [eax+0x24],ebx
    3460:	01 00                	add    DWORD PTR [eax],eax
    3462:	00 02                	add    BYTE PTR [edx],al
    3464:	91                   	xchg   ecx,eax
    3465:	50                   	push   eax
    3466:	0d 55 0b 00 00       	or     eax,0xb55
    346b:	01 59 f6             	add    DWORD PTR [ecx-0xa],ebx
    346e:	00 00                	add    BYTE PTR [eax],al
    3470:	00 02                	add    BYTE PTR [edx],al
    3472:	91                   	xchg   ecx,eax
    3473:	5c                   	pop    esp
    3474:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    3478:	00 01                	add    BYTE PTR [ecx],al
    347a:	5a                   	pop    edx
    347b:	24 01                	and    al,0x1
    347d:	00 00                	add    BYTE PTR [eax],al
    347f:	02 91 58 00 10 85    	add    dl,BYTE PTR [ecx-0x7aefffa8]
    3485:	0b 00                	or     eax,DWORD PTR [eax]
    3487:	00 01                	add    BYTE PTR [ecx],al
    3489:	bf 89 02 00 00       	mov    edi,0x289
    348e:	0e                   	push   cs
    348f:	2a 00                	sub    al,BYTE PTR [eax]
    3491:	30 6d 00             	xor    BYTE PTR [ebp+0x0],ch
    3494:	00 00                	add    BYTE PTR [eax],al
    3496:	01 9c 66 04 00 00 0f 	add    DWORD PTR [esi+eiz*2+0xf000004],ebx
    349d:	25 0b 00 00 01       	and    eax,0x100000b
    34a2:	bf 89 02 00 00       	mov    edi,0x289
    34a7:	02 91 00 0f 0d 0b    	add    dl,BYTE PTR [ecx+0xb0d0f00]
    34ad:	00 00                	add    BYTE PTR [eax],al
    34af:	01 bf d8 01 00 00    	add    DWORD PTR [edi+0x1d8],edi
    34b5:	02 91 5c 0d 7e 0a    	add    dl,BYTE PTR [ecx+0xa7e0d5c]
    34bb:	00 00                	add    BYTE PTR [eax],al
    34bd:	01 c1                	add    ecx,eax
    34bf:	32 01                	xor    al,BYTE PTR [ecx]
    34c1:	00 00                	add    BYTE PTR [eax],al
    34c3:	02 91 6c 00 12 4b    	add    dl,BYTE PTR [ecx+0x4b12006c]
    34c9:	00 00                	add    BYTE PTR [eax],al
    34cb:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    34ce:	12 01                	adc    al,BYTE PTR [ecx]
    34d0:	00 00                	add    BYTE PTR [eax],al
    34d2:	05 03 bc 43 00       	add    eax,0x43bc03
    34d7:	30 12                	xor    BYTE PTR [edx],dl
    34d9:	af                   	scas   eax,DWORD PTR es:[edi]
    34da:	00 00                	add    BYTE PTR [eax],al
    34dc:	00 04 35 12 01 00 00 	add    BYTE PTR [esi*1+0x112],al
    34e3:	05 03 c0 43 00       	add    eax,0x43c003
    34e8:	30 12                	xor    BYTE PTR [edx],dl
    34ea:	5b                   	pop    ebx
    34eb:	01 00                	add    DWORD PTR [eax],eax
    34ed:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    34f0:	12 01                	adc    al,BYTE PTR [ecx]
    34f2:	00 00                	add    BYTE PTR [eax],al
    34f4:	05 03 b8 43 00       	add    eax,0x43b803
    34f9:	30 12                	xor    BYTE PTR [edx],dl
    34fb:	54                   	push   esp
    34fc:	00 00                	add    BYTE PTR [eax],al
    34fe:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3501:	12 01                	adc    al,BYTE PTR [ecx]
    3503:	00 00                	add    BYTE PTR [eax],al
    3505:	05 03 c8 43 00       	add    eax,0x43c803
    350a:	30 12                	xor    BYTE PTR [edx],dl
    350c:	28 00                	sub    BYTE PTR [eax],al
    350e:	00 00                	add    BYTE PTR [eax],al
    3510:	05 45 bb 04 00       	add    eax,0x4bb45
    3515:	00 05 03 c4 43 00    	add    BYTE PTR ds:0x43c403,al
    351b:	30 0a                	xor    BYTE PTR [edx],cl
    351d:	04 ed                	add    al,0xed
    351f:	01 00                	add    DWORD PTR [eax],eax
    3521:	00 12                	add    BYTE PTR [edx],dl
    3523:	43                   	inc    ebx
    3524:	0b 00                	or     eax,DWORD PTR [eax]
    3526:	00 01                	add    BYTE PTR [ecx],al
    3528:	0c f6                	or     al,0xf6
    352a:	00 00                	add    BYTE PTR [eax],al
    352c:	00 05 03 c8 42 00    	add    BYTE PTR ds:0x42c803,al
    3532:	30 12                	xor    BYTE PTR [edx],dl
    3534:	92                   	xchg   edx,eax
    3535:	0a 00                	or     al,BYTE PTR [eax]
    3537:	00 01                	add    BYTE PTR [ecx],al
    3539:	0d 24 01 00 00       	or     eax,0x124
    353e:	05 03 ec 43 00       	add    eax,0x43ec03
    3543:	30 13                	xor    BYTE PTR [ebx],dl
    3545:	ed                   	in     eax,dx
    3546:	01 00                	add    DWORD PTR [eax],eax
    3548:	00 f3                	add    bl,dh
    354a:	04 00                	add    al,0x0
    354c:	00 14 e6             	add    BYTE PTR [esi+eiz*8],dl
    354f:	01 00                	add    DWORD PTR [eax],eax
    3551:	00 01                	add    BYTE PTR [ecx],al
    3553:	00 12                	add    BYTE PTR [edx],dl
    3555:	eb 0a                	jmp    3561 <sysEnter_Vector-0x12ca9f>
    3557:	00 00                	add    BYTE PTR [eax],al
    3559:	01 0e                	add    DWORD PTR [esi],ecx
    355b:	e3 04                	jecxz  3561 <sysEnter_Vector-0x12ca9f>
    355d:	00 00                	add    BYTE PTR [eax],al
    355f:	05 03 b0 43 00       	add    eax,0x43b003
    3564:	30 12                	xor    BYTE PTR [edx],dl
    3566:	17                   	pop    ss
    3567:	0b 00                	or     eax,DWORD PTR [eax]
    3569:	00 01                	add    BYTE PTR [ecx],al
    356b:	0f f6 00             	psadbw mm0,QWORD PTR [eax]
    356e:	00 00                	add    BYTE PTR [eax],al
    3570:	05 03 f0 43 00       	add    eax,0x43f003
    3575:	30 13                	xor    BYTE PTR [ebx],dl
    3577:	f6 00 00             	test   BYTE PTR [eax],0x0
    357a:	00 2b                	add    BYTE PTR [ebx],ch
    357c:	05 00 00 14 e6       	add    eax,0xe6140000
    3581:	01 00                	add    DWORD PTR [eax],eax
    3583:	00 01                	add    BYTE PTR [ecx],al
    3585:	14 e6                	adc    al,0xe6
    3587:	01 00                	add    DWORD PTR [eax],eax
    3589:	00 0b                	add    BYTE PTR [ebx],cl
    358b:	00 12                	add    BYTE PTR [edx],dl
    358d:	fa                   	cli    
    358e:	0a 00                	or     al,BYTE PTR [eax]
    3590:	00 01                	add    BYTE PTR [ecx],al
    3592:	11 3c 05 00 00 05 03 	adc    DWORD PTR [eax*1+0x3050000],edi
    3599:	00 41 00             	add    BYTE PTR [ecx+0x0],al
    359c:	30 0b                	xor    BYTE PTR [ebx],cl
    359e:	15 05 00 00 00       	adc    eax,0x5

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	0f 00 0b             	str    WORD PTR [ebx]
     567:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	07                   	pop    es
     56d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     576:	03 0e                	add    ecx,DWORD PTR [esi]
     578:	0b 0b                	or     ecx,DWORD PTR [ebx]
     57a:	49                   	dec    ecx
     57b:	13 3a                	adc    edi,DWORD PTR [edx]
     57d:	0b 3b                	or     edi,DWORD PTR [ebx]
     57f:	0b 01                	or     eax,DWORD PTR [ecx]
     581:	13 00                	adc    eax,DWORD PTR [eax]
     583:	00 09                	add    BYTE PTR [ecx],cl
     585:	28 00                	sub    BYTE PTR [eax],al
     587:	03 0e                	add    ecx,DWORD PTR [esi]
     589:	1c 0b                	sbb    al,0xb
     58b:	00 00                	add    BYTE PTR [eax],al
     58d:	0a 28                	or     ch,BYTE PTR [eax]
     58f:	00 03                	add    BYTE PTR [ebx],al
     591:	0e                   	push   cs
     592:	1c 05                	sbb    al,0x5
     594:	00 00                	add    BYTE PTR [eax],al
     596:	0b 0f                	or     ecx,DWORD PTR [edi]
     598:	00 0b                	add    BYTE PTR [ebx],cl
     59a:	0b 00                	or     eax,DWORD PTR [eax]
     59c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     59f:	01 3f                	add    DWORD PTR [edi],edi
     5a1:	19 03                	sbb    DWORD PTR [ebx],eax
     5a3:	0e                   	push   cs
     5a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a8:	27                   	daa    
     5a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	40                   	inc    eax
     5b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	0d 05 00 03 0e       	or     eax,0xe030005
     5be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c2:	49                   	dec    ecx
     5c3:	13 02                	adc    eax,DWORD PTR [edx]
     5c5:	18 00                	sbb    BYTE PTR [eax],al
     5c7:	00 0e                	add    BYTE PTR [esi],cl
     5c9:	34 00                	xor    al,0x0
     5cb:	03 0e                	add    ecx,DWORD PTR [esi]
     5cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d1:	49                   	dec    ecx
     5d2:	13 02                	adc    eax,DWORD PTR [edx]
     5d4:	18 00                	sbb    BYTE PTR [eax],al
     5d6:	00 0f                	add    BYTE PTR [edi],cl
     5d8:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5db:	19 03                	sbb    DWORD PTR [ebx],eax
     5dd:	0e                   	push   cs
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	11 01                	adc    DWORD PTR [ecx],eax
     5e4:	12 06                	adc    al,BYTE PTR [esi]
     5e6:	40                   	inc    eax
     5e7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5ed:	10 2e                	adc    BYTE PTR [esi],ch
     5ef:	00 3f                	add    BYTE PTR [edi],bh
     5f1:	19 03                	sbb    DWORD PTR [ebx],eax
     5f3:	0e                   	push   cs
     5f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5f8:	27                   	daa    
     5f9:	19 11                	sbb    DWORD PTR [ecx],edx
     5fb:	01 12                	add    DWORD PTR [edx],edx
     5fd:	06                   	push   es
     5fe:	40                   	inc    eax
     5ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     605:	11 2e                	adc    DWORD PTR [esi],ebp
     607:	01 3f                	add    DWORD PTR [edi],edi
     609:	19 03                	sbb    DWORD PTR [ebx],eax
     60b:	0e                   	push   cs
     60c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     610:	27                   	daa    
     611:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     614:	11 01                	adc    DWORD PTR [ecx],eax
     616:	12 06                	adc    al,BYTE PTR [esi]
     618:	40                   	inc    eax
     619:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	12 18                	adc    bl,BYTE PTR [eax]
     623:	00 00                	add    BYTE PTR [eax],al
     625:	00 13                	add    BYTE PTR [ebx],dl
     627:	0b 01                	or     eax,DWORD PTR [ecx]
     629:	11 01                	adc    DWORD PTR [ecx],eax
     62b:	12 06                	adc    al,BYTE PTR [esi]
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	14 34                	adc    al,0x34
     631:	00 03                	add    BYTE PTR [ebx],al
     633:	08 3a                	or     BYTE PTR [edx],bh
     635:	0b 3b                	or     edi,DWORD PTR [ebx]
     637:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     63a:	02 18                	add    bl,BYTE PTR [eax]
     63c:	00 00                	add    BYTE PTR [eax],al
     63e:	15 2e 01 3f 19       	adc    eax,0x193f012e
     643:	03 0e                	add    ecx,DWORD PTR [esi]
     645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     649:	27                   	daa    
     64a:	19 11                	sbb    DWORD PTR [ecx],edx
     64c:	01 12                	add    DWORD PTR [edx],edx
     64e:	06                   	push   es
     64f:	40                   	inc    eax
     650:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     656:	00 00                	add    BYTE PTR [eax],al
     658:	16                   	push   ss
     659:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     65c:	19 03                	sbb    DWORD PTR [ebx],eax
     65e:	0e                   	push   cs
     65f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     663:	49                   	dec    ecx
     664:	13 11                	adc    edx,DWORD PTR [ecx]
     666:	01 12                	add    DWORD PTR [edx],edx
     668:	06                   	push   es
     669:	40                   	inc    eax
     66a:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     670:	17                   	pop    ss
     671:	05 00 03 08 3a       	add    eax,0x3a080300
     676:	0b 3b                	or     edi,DWORD PTR [ebx]
     678:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     67b:	02 18                	add    bl,BYTE PTR [eax]
     67d:	00 00                	add    BYTE PTR [eax],al
     67f:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     682:	03 0e                	add    ecx,DWORD PTR [esi]
     684:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     686:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     688:	49                   	dec    ecx
     689:	13 3f                	adc    edi,DWORD PTR [edi]
     68b:	19 02                	sbb    DWORD PTR [edx],eax
     68d:	18 00                	sbb    BYTE PTR [eax],al
     68f:	00 00                	add    BYTE PTR [eax],al
     691:	01 11                	add    DWORD PTR [ecx],edx
     693:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     699:	0e                   	push   cs
     69a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     69c:	11 01                	adc    DWORD PTR [ecx],eax
     69e:	12 06                	adc    al,BYTE PTR [esi]
     6a0:	10 17                	adc    BYTE PTR [edi],dl
     6a2:	00 00                	add    BYTE PTR [eax],al
     6a4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6a7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6a9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6ac:	0e                   	push   cs
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6b2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6b4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6b7:	08 00                	or     BYTE PTR [eax],al
     6b9:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     6bc:	00 03                	add    BYTE PTR [ebx],al
     6be:	0e                   	push   cs
     6bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c3:	49                   	dec    ecx
     6c4:	13 00                	adc    eax,DWORD PTR [eax]
     6c6:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     6cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6d2:	01 13                	add    DWORD PTR [ebx],edx
     6d4:	00 00                	add    BYTE PTR [eax],al
     6d6:	06                   	push   es
     6d7:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     6dc:	0b 3b                	or     edi,DWORD PTR [ebx]
     6de:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6e1:	38 0b                	cmp    BYTE PTR [ebx],cl
     6e3:	00 00                	add    BYTE PTR [eax],al
     6e5:	07                   	pop    es
     6e6:	0d 00 03 08 3a       	or     eax,0x3a080300
     6eb:	0b 3b                	or     edi,DWORD PTR [ebx]
     6ed:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6f0:	38 0b                	cmp    BYTE PTR [ebx],cl
     6f2:	00 00                	add    BYTE PTR [eax],al
     6f4:	08 0f                	or     BYTE PTR [edi],cl
     6f6:	00 0b                	add    BYTE PTR [ebx],cl
     6f8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     700:	03 0e                	add    ecx,DWORD PTR [esi]
     702:	0b 0b                	or     ecx,DWORD PTR [ebx]
     704:	49                   	dec    ecx
     705:	13 3a                	adc    edi,DWORD PTR [edx]
     707:	0b 3b                	or     edi,DWORD PTR [ebx]
     709:	0b 01                	or     eax,DWORD PTR [ecx]
     70b:	13 00                	adc    eax,DWORD PTR [eax]
     70d:	00 0a                	add    BYTE PTR [edx],cl
     70f:	28 00                	sub    BYTE PTR [eax],al
     711:	03 0e                	add    ecx,DWORD PTR [esi]
     713:	1c 0b                	sbb    al,0xb
     715:	00 00                	add    BYTE PTR [eax],al
     717:	0b 28                	or     ebp,DWORD PTR [eax]
     719:	00 03                	add    BYTE PTR [ebx],al
     71b:	0e                   	push   cs
     71c:	1c 05                	sbb    al,0x5
     71e:	00 00                	add    BYTE PTR [eax],al
     720:	0c 0f                	or     al,0xf
     722:	00 0b                	add    BYTE PTR [ebx],cl
     724:	0b 00                	or     eax,DWORD PTR [eax]
     726:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     72c:	03 0e                	add    ecx,DWORD PTR [esi]
     72e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     730:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     732:	11 01                	adc    DWORD PTR [ecx],eax
     734:	12 06                	adc    al,BYTE PTR [esi]
     736:	40                   	inc    eax
     737:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     73d:	0e                   	push   cs
     73e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     741:	19 03                	sbb    DWORD PTR [ebx],eax
     743:	0e                   	push   cs
     744:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     746:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     748:	27                   	daa    
     749:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     74c:	11 01                	adc    DWORD PTR [ecx],eax
     74e:	12 06                	adc    al,BYTE PTR [esi]
     750:	40                   	inc    eax
     751:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     757:	00 00                	add    BYTE PTR [eax],al
     759:	0f 05                	syscall 
     75b:	00 03                	add    BYTE PTR [ebx],al
     75d:	0e                   	push   cs
     75e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     760:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     762:	49                   	dec    ecx
     763:	13 02                	adc    eax,DWORD PTR [edx]
     765:	18 00                	sbb    BYTE PTR [eax],al
     767:	00 10                	add    BYTE PTR [eax],dl
     769:	34 00                	xor    al,0x0
     76b:	03 0e                	add    ecx,DWORD PTR [esi]
     76d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     76f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     771:	49                   	dec    ecx
     772:	13 02                	adc    eax,DWORD PTR [edx]
     774:	18 00                	sbb    BYTE PTR [eax],al
     776:	00 11                	add    BYTE PTR [ecx],dl
     778:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     77b:	19 03                	sbb    DWORD PTR [ebx],eax
     77d:	0e                   	push   cs
     77e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     780:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     782:	27                   	daa    
     783:	19 11                	sbb    DWORD PTR [ecx],edx
     785:	01 12                	add    DWORD PTR [edx],edx
     787:	06                   	push   es
     788:	40                   	inc    eax
     789:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     78f:	00 00                	add    BYTE PTR [eax],al
     791:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     794:	03 08                	add    ecx,DWORD PTR [eax]
     796:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     798:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     79a:	49                   	dec    ecx
     79b:	13 02                	adc    eax,DWORD PTR [edx]
     79d:	18 00                	sbb    BYTE PTR [eax],al
     79f:	00 13                	add    BYTE PTR [ebx],dl
     7a1:	0a 00                	or     al,BYTE PTR [eax]
     7a3:	03 0e                	add    ecx,DWORD PTR [esi]
     7a5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7a7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a9:	11 01                	adc    DWORD PTR [ecx],eax
     7ab:	00 00                	add    BYTE PTR [eax],al
     7ad:	14 2e                	adc    al,0x2e
     7af:	01 3f                	add    DWORD PTR [edi],edi
     7b1:	19 03                	sbb    DWORD PTR [ebx],eax
     7b3:	0e                   	push   cs
     7b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b8:	27                   	daa    
     7b9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7bc:	11 01                	adc    DWORD PTR [ecx],eax
     7be:	12 06                	adc    al,BYTE PTR [esi]
     7c0:	40                   	inc    eax
     7c1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7c7:	00 00                	add    BYTE PTR [eax],al
     7c9:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7ce:	03 0e                	add    ecx,DWORD PTR [esi]
     7d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d4:	27                   	daa    
     7d5:	19 11                	sbb    DWORD PTR [ecx],edx
     7d7:	01 12                	add    DWORD PTR [edx],edx
     7d9:	06                   	push   es
     7da:	40                   	inc    eax
     7db:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7e1:	00 00                	add    BYTE PTR [eax],al
     7e3:	16                   	push   ss
     7e4:	34 00                	xor    al,0x0
     7e6:	03 0e                	add    ecx,DWORD PTR [esi]
     7e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ec:	49                   	dec    ecx
     7ed:	13 3f                	adc    edi,DWORD PTR [edi]
     7ef:	19 02                	sbb    DWORD PTR [edx],eax
     7f1:	18 00                	sbb    BYTE PTR [eax],al
     7f3:	00 00                	add    BYTE PTR [eax],al
     7f5:	01 11                	add    DWORD PTR [ecx],edx
     7f7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     7fd:	0e                   	push   cs
     7fe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     800:	11 01                	adc    DWORD PTR [ecx],eax
     802:	12 06                	adc    al,BYTE PTR [esi]
     804:	10 17                	adc    BYTE PTR [edi],dl
     806:	00 00                	add    BYTE PTR [eax],al
     808:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     80b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     80d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     810:	0e                   	push   cs
     811:	00 00                	add    BYTE PTR [eax],al
     813:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     816:	0b 0b                	or     ecx,DWORD PTR [ebx]
     818:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     81b:	08 00                	or     BYTE PTR [eax],al
     81d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     820:	00 0b                	add    BYTE PTR [ebx],cl
     822:	0b 00                	or     eax,DWORD PTR [eax]
     824:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     82a:	49                   	dec    ecx
     82b:	13 00                	adc    eax,DWORD PTR [eax]
     82d:	00 06                	add    BYTE PTR [esi],al
     82f:	16                   	push   ss
     830:	00 03                	add    BYTE PTR [ebx],al
     832:	0e                   	push   cs
     833:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     835:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     837:	49                   	dec    ecx
     838:	13 00                	adc    eax,DWORD PTR [eax]
     83a:	00 07                	add    BYTE PTR [edi],al
     83c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     840:	00 00                	add    BYTE PTR [eax],al
     842:	08 2e                	or     BYTE PTR [esi],ch
     844:	01 3f                	add    DWORD PTR [edi],edi
     846:	19 03                	sbb    DWORD PTR [ebx],eax
     848:	0e                   	push   cs
     849:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     84b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     84d:	27                   	daa    
     84e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     851:	11 01                	adc    DWORD PTR [ecx],eax
     853:	12 06                	adc    al,BYTE PTR [esi]
     855:	40                   	inc    eax
     856:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     85c:	00 00                	add    BYTE PTR [eax],al
     85e:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     864:	0b 3b                	or     edi,DWORD PTR [ebx]
     866:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     869:	02 18                	add    bl,BYTE PTR [eax]
     86b:	00 00                	add    BYTE PTR [eax],al
     86d:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     873:	0b 3b                	or     edi,DWORD PTR [ebx]
     875:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     878:	02 18                	add    bl,BYTE PTR [eax]
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     87f:	03 08                	add    ecx,DWORD PTR [eax]
     881:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     883:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     885:	49                   	dec    ecx
     886:	13 02                	adc    eax,DWORD PTR [edx]
     888:	18 00                	sbb    BYTE PTR [eax],al
     88a:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     88d:	01 11                	add    DWORD PTR [ecx],edx
     88f:	01 12                	add    DWORD PTR [edx],edx
     891:	06                   	push   es
     892:	01 13                	add    DWORD PTR [ebx],edx
     894:	00 00                	add    BYTE PTR [eax],al
     896:	0d 0b 01 11 01       	or     eax,0x111010b
     89b:	12 06                	adc    al,BYTE PTR [esi]
     89d:	00 00                	add    BYTE PTR [eax],al
     89f:	0e                   	push   cs
     8a0:	26 00 00             	add    BYTE PTR es:[eax],al
     8a3:	00 0f                	add    BYTE PTR [edi],cl
     8a5:	34 00                	xor    al,0x0
     8a7:	03 0e                	add    ecx,DWORD PTR [esi]
     8a9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8ad:	49                   	dec    ecx
     8ae:	13 3f                	adc    edi,DWORD PTR [edi]
     8b0:	19 02                	sbb    DWORD PTR [edx],eax
     8b2:	18 00                	sbb    BYTE PTR [eax],al
     8b4:	00 00                	add    BYTE PTR [eax],al
     8b6:	01 11                	add    DWORD PTR [ecx],edx
     8b8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8be:	0e                   	push   cs
     8bf:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8c1:	11 01                	adc    DWORD PTR [ecx],eax
     8c3:	12 06                	adc    al,BYTE PTR [esi]
     8c5:	10 17                	adc    BYTE PTR [edi],dl
     8c7:	00 00                	add    BYTE PTR [eax],al
     8c9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8ce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8d1:	0e                   	push   cs
     8d2:	00 00                	add    BYTE PTR [eax],al
     8d4:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8d7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8d9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8dc:	08 00                	or     BYTE PTR [eax],al
     8de:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8e1:	00 03                	add    BYTE PTR [ebx],al
     8e3:	0e                   	push   cs
     8e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8e8:	49                   	dec    ecx
     8e9:	13 00                	adc    eax,DWORD PTR [eax]
     8eb:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8f1:	00 00                	add    BYTE PTR [eax],al
     8f3:	06                   	push   es
     8f4:	0f 00 0b             	str    WORD PTR [ebx]
     8f7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	07                   	pop    es
     8fd:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     900:	19 03                	sbb    DWORD PTR [ebx],eax
     902:	0e                   	push   cs
     903:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     905:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     907:	27                   	daa    
     908:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     90b:	11 01                	adc    DWORD PTR [ecx],eax
     90d:	12 06                	adc    al,BYTE PTR [esi]
     90f:	40                   	inc    eax
     910:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     916:	00 00                	add    BYTE PTR [eax],al
     918:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     91e:	0b 3b                	or     edi,DWORD PTR [ebx]
     920:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     923:	02 18                	add    bl,BYTE PTR [eax]
     925:	00 00                	add    BYTE PTR [eax],al
     927:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     92a:	03 08                	add    ecx,DWORD PTR [eax]
     92c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     92e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     930:	49                   	dec    ecx
     931:	13 02                	adc    eax,DWORD PTR [edx]
     933:	18 00                	sbb    BYTE PTR [eax],al
     935:	00 0a                	add    BYTE PTR [edx],cl
     937:	34 00                	xor    al,0x0
     939:	03 0e                	add    ecx,DWORD PTR [esi]
     93b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     93d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     93f:	49                   	dec    ecx
     940:	13 02                	adc    eax,DWORD PTR [edx]
     942:	18 00                	sbb    BYTE PTR [eax],al
     944:	00 0b                	add    BYTE PTR [ebx],cl
     946:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     949:	19 03                	sbb    DWORD PTR [ebx],eax
     94b:	0e                   	push   cs
     94c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     94e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     950:	27                   	daa    
     951:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     954:	11 01                	adc    DWORD PTR [ecx],eax
     956:	12 06                	adc    al,BYTE PTR [esi]
     958:	40                   	inc    eax
     959:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     95f:	00 00                	add    BYTE PTR [eax],al
     961:	0c 34                	or     al,0x34
     963:	00 03                	add    BYTE PTR [ebx],al
     965:	0e                   	push   cs
     966:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     968:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96a:	49                   	dec    ecx
     96b:	13 3f                	adc    edi,DWORD PTR [edi]
     96d:	19 02                	sbb    DWORD PTR [edx],eax
     96f:	18 00                	sbb    BYTE PTR [eax],al
     971:	00 00                	add    BYTE PTR [eax],al
     973:	01 11                	add    DWORD PTR [ecx],edx
     975:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     97b:	0e                   	push   cs
     97c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     97e:	11 01                	adc    DWORD PTR [ecx],eax
     980:	12 06                	adc    al,BYTE PTR [esi]
     982:	10 17                	adc    BYTE PTR [edi],dl
     984:	00 00                	add    BYTE PTR [eax],al
     986:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     989:	0b 0b                	or     ecx,DWORD PTR [ebx]
     98b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     98e:	0e                   	push   cs
     98f:	00 00                	add    BYTE PTR [eax],al
     991:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     994:	0b 0b                	or     ecx,DWORD PTR [ebx]
     996:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     999:	08 00                	or     BYTE PTR [eax],al
     99b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     99e:	00 03                	add    BYTE PTR [ebx],al
     9a0:	0e                   	push   cs
     9a1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9a3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9a5:	49                   	dec    ecx
     9a6:	13 00                	adc    eax,DWORD PTR [eax]
     9a8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     9ae:	00 00                	add    BYTE PTR [eax],al
     9b0:	06                   	push   es
     9b1:	0f 00 0b             	str    WORD PTR [ebx]
     9b4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9b7:	00 00                	add    BYTE PTR [eax],al
     9b9:	07                   	pop    es
     9ba:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9bd:	19 03                	sbb    DWORD PTR [ebx],eax
     9bf:	0e                   	push   cs
     9c0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9c2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9c4:	27                   	daa    
     9c5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9c8:	11 01                	adc    DWORD PTR [ecx],eax
     9ca:	12 06                	adc    al,BYTE PTR [esi]
     9cc:	40                   	inc    eax
     9cd:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9d3:	00 00                	add    BYTE PTR [eax],al
     9d5:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     9db:	0b 3b                	or     edi,DWORD PTR [ebx]
     9dd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9e0:	02 18                	add    bl,BYTE PTR [eax]
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     9ea:	0b 3b                	or     edi,DWORD PTR [ebx]
     9ec:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9ef:	02 18                	add    bl,BYTE PTR [eax]
     9f1:	00 00                	add    BYTE PTR [eax],al
     9f3:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     9f6:	03 0e                	add    ecx,DWORD PTR [esi]
     9f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9fc:	49                   	dec    ecx
     9fd:	13 3f                	adc    edi,DWORD PTR [edi]
     9ff:	19 02                	sbb    DWORD PTR [edx],eax
     a01:	18 00                	sbb    BYTE PTR [eax],al
     a03:	00 00                	add    BYTE PTR [eax],al
     a05:	01 11                	add    DWORD PTR [ecx],edx
     a07:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a0d:	0e                   	push   cs
     a0e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a10:	11 01                	adc    DWORD PTR [ecx],eax
     a12:	12 06                	adc    al,BYTE PTR [esi]
     a14:	10 17                	adc    BYTE PTR [edi],dl
     a16:	00 00                	add    BYTE PTR [eax],al
     a18:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a1b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a1d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a20:	0e                   	push   cs
     a21:	00 00                	add    BYTE PTR [eax],al
     a23:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a26:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a28:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a2b:	08 00                	or     BYTE PTR [eax],al
     a2d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a30:	00 03                	add    BYTE PTR [ebx],al
     a32:	0e                   	push   cs
     a33:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a35:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a37:	49                   	dec    ecx
     a38:	13 00                	adc    eax,DWORD PTR [eax]
     a3a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a40:	49                   	dec    ecx
     a41:	13 00                	adc    eax,DWORD PTR [eax]
     a43:	00 06                	add    BYTE PTR [esi],al
     a45:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     a49:	00 00                	add    BYTE PTR [eax],al
     a4b:	07                   	pop    es
     a4c:	0f 00 0b             	str    WORD PTR [ebx]
     a4f:	0b 00                	or     eax,DWORD PTR [eax]
     a51:	00 08                	add    BYTE PTR [eax],cl
     a53:	13 01                	adc    eax,DWORD PTR [ecx]
     a55:	03 0e                	add    ecx,DWORD PTR [esi]
     a57:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a59:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a5b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a5d:	01 13                	add    DWORD PTR [ebx],edx
     a5f:	00 00                	add    BYTE PTR [eax],al
     a61:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     a67:	0b 3b                	or     edi,DWORD PTR [ebx]
     a69:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a6c:	38 0b                	cmp    BYTE PTR [ebx],cl
     a6e:	00 00                	add    BYTE PTR [eax],al
     a70:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     a76:	13 01                	adc    eax,DWORD PTR [ecx]
     a78:	13 00                	adc    eax,DWORD PTR [eax]
     a7a:	00 0b                	add    BYTE PTR [ebx],cl
     a7c:	05 00 49 13 00       	add    eax,0x134900
     a81:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     a84:	01 3f                	add    DWORD PTR [edi],edi
     a86:	19 03                	sbb    DWORD PTR [ebx],eax
     a88:	0e                   	push   cs
     a89:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a8b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a8d:	11 01                	adc    DWORD PTR [ecx],eax
     a8f:	12 06                	adc    al,BYTE PTR [esi]
     a91:	40                   	inc    eax
     a92:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a98:	00 00                	add    BYTE PTR [eax],al
     a9a:	0d 34 00 03 0e       	or     eax,0xe030034
     a9f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa3:	49                   	dec    ecx
     aa4:	13 02                	adc    eax,DWORD PTR [edx]
     aa6:	18 00                	sbb    BYTE PTR [eax],al
     aa8:	00 0e                	add    BYTE PTR [esi],cl
     aaa:	01 01                	add    DWORD PTR [ecx],eax
     aac:	49                   	dec    ecx
     aad:	13 01                	adc    eax,DWORD PTR [ecx]
     aaf:	13 00                	adc    eax,DWORD PTR [eax]
     ab1:	00 0f                	add    BYTE PTR [edi],cl
     ab3:	21 00                	and    DWORD PTR [eax],eax
     ab5:	49                   	dec    ecx
     ab6:	13 2f                	adc    ebp,DWORD PTR [edi]
     ab8:	0b 00                	or     eax,DWORD PTR [eax]
     aba:	00 10                	add    BYTE PTR [eax],dl
     abc:	34 00                	xor    al,0x0
     abe:	03 0e                	add    ecx,DWORD PTR [esi]
     ac0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac4:	49                   	dec    ecx
     ac5:	13 3f                	adc    edi,DWORD PTR [edi]
     ac7:	19 02                	sbb    DWORD PTR [edx],eax
     ac9:	18 00                	sbb    BYTE PTR [eax],al
     acb:	00 00                	add    BYTE PTR [eax],al
     acd:	01 11                	add    DWORD PTR [ecx],edx
     acf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ad5:	0e                   	push   cs
     ad6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ad8:	11 01                	adc    DWORD PTR [ecx],eax
     ada:	12 06                	adc    al,BYTE PTR [esi]
     adc:	10 17                	adc    BYTE PTR [edi],dl
     ade:	00 00                	add    BYTE PTR [eax],al
     ae0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ae3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ae5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ae8:	0e                   	push   cs
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     aee:	0b 0b                	or     ecx,DWORD PTR [ebx]
     af0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     af3:	08 00                	or     BYTE PTR [eax],al
     af5:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     af8:	00 03                	add    BYTE PTR [ebx],al
     afa:	0e                   	push   cs
     afb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     afd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aff:	49                   	dec    ecx
     b00:	13 00                	adc    eax,DWORD PTR [eax]
     b02:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b08:	49                   	dec    ecx
     b09:	13 00                	adc    eax,DWORD PTR [eax]
     b0b:	00 06                	add    BYTE PTR [esi],al
     b0d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b11:	00 00                	add    BYTE PTR [eax],al
     b13:	07                   	pop    es
     b14:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b17:	19 03                	sbb    DWORD PTR [ebx],eax
     b19:	0e                   	push   cs
     b1a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b1c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b1e:	27                   	daa    
     b1f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b22:	11 01                	adc    DWORD PTR [ecx],eax
     b24:	12 06                	adc    al,BYTE PTR [esi]
     b26:	40                   	inc    eax
     b27:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b2d:	00 00                	add    BYTE PTR [eax],al
     b2f:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     b35:	0b 3b                	or     edi,DWORD PTR [ebx]
     b37:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b3a:	02 18                	add    bl,BYTE PTR [eax]
     b3c:	00 00                	add    BYTE PTR [eax],al
     b3e:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     b44:	0b 3b                	or     edi,DWORD PTR [ebx]
     b46:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b49:	02 18                	add    bl,BYTE PTR [eax]
     b4b:	00 00                	add    BYTE PTR [eax],al
     b4d:	0a 2e                	or     ch,BYTE PTR [esi]
     b4f:	01 3f                	add    DWORD PTR [edi],edi
     b51:	19 03                	sbb    DWORD PTR [ebx],eax
     b53:	0e                   	push   cs
     b54:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b56:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b58:	27                   	daa    
     b59:	19 11                	sbb    DWORD PTR [ecx],edx
     b5b:	01 12                	add    DWORD PTR [edx],edx
     b5d:	06                   	push   es
     b5e:	40                   	inc    eax
     b5f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b65:	00 00                	add    BYTE PTR [eax],al
     b67:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     b6a:	03 08                	add    ecx,DWORD PTR [eax]
     b6c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b6e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b70:	49                   	dec    ecx
     b71:	13 02                	adc    eax,DWORD PTR [edx]
     b73:	18 00                	sbb    BYTE PTR [eax],al
     b75:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     b78:	00 03                	add    BYTE PTR [ebx],al
     b7a:	0e                   	push   cs
     b7b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b7d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b7f:	49                   	dec    ecx
     b80:	13 3f                	adc    edi,DWORD PTR [edi]
     b82:	19 02                	sbb    DWORD PTR [edx],eax
     b84:	18 00                	sbb    BYTE PTR [eax],al
     b86:	00 00                	add    BYTE PTR [eax],al
     b88:	01 11                	add    DWORD PTR [ecx],edx
     b8a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b90:	0e                   	push   cs
     b91:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b93:	11 01                	adc    DWORD PTR [ecx],eax
     b95:	12 06                	adc    al,BYTE PTR [esi]
     b97:	10 17                	adc    BYTE PTR [edi],dl
     b99:	00 00                	add    BYTE PTR [eax],al
     b9b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b9e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ba0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ba3:	0e                   	push   cs
     ba4:	00 00                	add    BYTE PTR [eax],al
     ba6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ba9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bab:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bae:	08 00                	or     BYTE PTR [eax],al
     bb0:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     bb3:	00 03                	add    BYTE PTR [ebx],al
     bb5:	0e                   	push   cs
     bb6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bb8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bba:	49                   	dec    ecx
     bbb:	13 00                	adc    eax,DWORD PTR [eax]
     bbd:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     bc3:	49                   	dec    ecx
     bc4:	13 00                	adc    eax,DWORD PTR [eax]
     bc6:	00 06                	add    BYTE PTR [esi],al
     bc8:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	07                   	pop    es
     bcf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bd2:	19 03                	sbb    DWORD PTR [ebx],eax
     bd4:	0e                   	push   cs
     bd5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bd7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bd9:	27                   	daa    
     bda:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bdd:	11 01                	adc    DWORD PTR [ecx],eax
     bdf:	12 06                	adc    al,BYTE PTR [esi]
     be1:	40                   	inc    eax
     be2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     be8:	00 00                	add    BYTE PTR [eax],al
     bea:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     bf0:	0b 3b                	or     edi,DWORD PTR [ebx]
     bf2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bf5:	02 18                	add    bl,BYTE PTR [eax]
     bf7:	00 00                	add    BYTE PTR [eax],al
     bf9:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     bfc:	03 08                	add    ecx,DWORD PTR [eax]
     bfe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c00:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c02:	49                   	dec    ecx
     c03:	13 02                	adc    eax,DWORD PTR [edx]
     c05:	18 00                	sbb    BYTE PTR [eax],al
     c07:	00 0a                	add    BYTE PTR [edx],cl
     c09:	34 00                	xor    al,0x0
     c0b:	03 0e                	add    ecx,DWORD PTR [esi]
     c0d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c0f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c11:	49                   	dec    ecx
     c12:	13 3f                	adc    edi,DWORD PTR [edi]
     c14:	19 02                	sbb    DWORD PTR [edx],eax
     c16:	18 00                	sbb    BYTE PTR [eax],al
     c18:	00 00                	add    BYTE PTR [eax],al
     c1a:	01 11                	add    DWORD PTR [ecx],edx
     c1c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c22:	0e                   	push   cs
     c23:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c25:	11 01                	adc    DWORD PTR [ecx],eax
     c27:	12 06                	adc    al,BYTE PTR [esi]
     c29:	10 17                	adc    BYTE PTR [edi],dl
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c30:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c32:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c35:	0e                   	push   cs
     c36:	00 00                	add    BYTE PTR [eax],al
     c38:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c3b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c3d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c40:	08 00                	or     BYTE PTR [eax],al
     c42:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c45:	00 03                	add    BYTE PTR [ebx],al
     c47:	0e                   	push   cs
     c48:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c4a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c4c:	49                   	dec    ecx
     c4d:	13 00                	adc    eax,DWORD PTR [eax]
     c4f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c55:	49                   	dec    ecx
     c56:	13 00                	adc    eax,DWORD PTR [eax]
     c58:	00 06                	add    BYTE PTR [esi],al
     c5a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c5e:	00 00                	add    BYTE PTR [eax],al
     c60:	07                   	pop    es
     c61:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c64:	19 03                	sbb    DWORD PTR [ebx],eax
     c66:	0e                   	push   cs
     c67:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c69:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c6b:	27                   	daa    
     c6c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c6f:	11 01                	adc    DWORD PTR [ecx],eax
     c71:	12 06                	adc    al,BYTE PTR [esi]
     c73:	40                   	inc    eax
     c74:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c7a:	00 00                	add    BYTE PTR [eax],al
     c7c:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c82:	0b 3b                	or     edi,DWORD PTR [ebx]
     c84:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c87:	02 18                	add    bl,BYTE PTR [eax]
     c89:	00 00                	add    BYTE PTR [eax],al
     c8b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c8e:	03 08                	add    ecx,DWORD PTR [eax]
     c90:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c92:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c94:	49                   	dec    ecx
     c95:	13 02                	adc    eax,DWORD PTR [edx]
     c97:	18 00                	sbb    BYTE PTR [eax],al
     c99:	00 0a                	add    BYTE PTR [edx],cl
     c9b:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     ca0:	0b 3b                	or     edi,DWORD PTR [ebx]
     ca2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ca5:	02 18                	add    bl,BYTE PTR [eax]
     ca7:	00 00                	add    BYTE PTR [eax],al
     ca9:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     cac:	03 0e                	add    ecx,DWORD PTR [esi]
     cae:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cb0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cb2:	49                   	dec    ecx
     cb3:	13 3f                	adc    edi,DWORD PTR [edi]
     cb5:	19 02                	sbb    DWORD PTR [edx],eax
     cb7:	18 00                	sbb    BYTE PTR [eax],al
     cb9:	00 00                	add    BYTE PTR [eax],al
     cbb:	01 11                	add    DWORD PTR [ecx],edx
     cbd:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cc3:	0e                   	push   cs
     cc4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cc6:	11 01                	adc    DWORD PTR [ecx],eax
     cc8:	12 06                	adc    al,BYTE PTR [esi]
     cca:	10 17                	adc    BYTE PTR [edi],dl
     ccc:	00 00                	add    BYTE PTR [eax],al
     cce:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cd1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cd3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cd6:	0e                   	push   cs
     cd7:	00 00                	add    BYTE PTR [eax],al
     cd9:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cdc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cde:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ce1:	08 00                	or     BYTE PTR [eax],al
     ce3:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ce6:	00 03                	add    BYTE PTR [ebx],al
     ce8:	0e                   	push   cs
     ce9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ceb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ced:	49                   	dec    ecx
     cee:	13 00                	adc    eax,DWORD PTR [eax]
     cf0:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     cf6:	49                   	dec    ecx
     cf7:	13 00                	adc    eax,DWORD PTR [eax]
     cf9:	00 06                	add    BYTE PTR [esi],al
     cfb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     cfe:	19 03                	sbb    DWORD PTR [ebx],eax
     d00:	0e                   	push   cs
     d01:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d03:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d05:	27                   	daa    
     d06:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d09:	11 01                	adc    DWORD PTR [ecx],eax
     d0b:	12 06                	adc    al,BYTE PTR [esi]
     d0d:	40                   	inc    eax
     d0e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d14:	00 00                	add    BYTE PTR [eax],al
     d16:	07                   	pop    es
     d17:	05 00 03 08 3a       	add    eax,0x3a080300
     d1c:	0b 3b                	or     edi,DWORD PTR [ebx]
     d1e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d21:	02 18                	add    bl,BYTE PTR [eax]
     d23:	00 00                	add    BYTE PTR [eax],al
     d25:	08 2e                	or     BYTE PTR [esi],ch
     d27:	01 3f                	add    DWORD PTR [edi],edi
     d29:	19 03                	sbb    DWORD PTR [ebx],eax
     d2b:	0e                   	push   cs
     d2c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d2e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d30:	27                   	daa    
     d31:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d34:	11 01                	adc    DWORD PTR [ecx],eax
     d36:	12 06                	adc    al,BYTE PTR [esi]
     d38:	40                   	inc    eax
     d39:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d3f:	00 00                	add    BYTE PTR [eax],al
     d41:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     d44:	03 08                	add    ecx,DWORD PTR [eax]
     d46:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d48:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d4a:	49                   	dec    ecx
     d4b:	13 02                	adc    eax,DWORD PTR [edx]
     d4d:	18 00                	sbb    BYTE PTR [eax],al
     d4f:	00 0a                	add    BYTE PTR [edx],cl
     d51:	34 00                	xor    al,0x0
     d53:	03 0e                	add    ecx,DWORD PTR [esi]
     d55:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d57:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d59:	49                   	dec    ecx
     d5a:	13 3f                	adc    edi,DWORD PTR [edi]
     d5c:	19 02                	sbb    DWORD PTR [edx],eax
     d5e:	18 00                	sbb    BYTE PTR [eax],al
     d60:	00 00                	add    BYTE PTR [eax],al
     d62:	01 11                	add    DWORD PTR [ecx],edx
     d64:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d6a:	0e                   	push   cs
     d6b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d6d:	11 01                	adc    DWORD PTR [ecx],eax
     d6f:	12 06                	adc    al,BYTE PTR [esi]
     d71:	10 17                	adc    BYTE PTR [edi],dl
     d73:	00 00                	add    BYTE PTR [eax],al
     d75:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d78:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d7a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d7d:	08 00                	or     BYTE PTR [eax],al
     d7f:	00 03                	add    BYTE PTR [ebx],al
     d81:	16                   	push   ss
     d82:	00 03                	add    BYTE PTR [ebx],al
     d84:	0e                   	push   cs
     d85:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d87:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d89:	49                   	dec    ecx
     d8a:	13 00                	adc    eax,DWORD PTR [eax]
     d8c:	00 04 24             	add    BYTE PTR [esp],al
     d8f:	00 0b                	add    BYTE PTR [ebx],cl
     d91:	0b 3e                	or     edi,DWORD PTR [esi]
     d93:	0b 03                	or     eax,DWORD PTR [ebx]
     d95:	0e                   	push   cs
     d96:	00 00                	add    BYTE PTR [eax],al
     d98:	05 2e 01 3f 19       	add    eax,0x193f012e
     d9d:	03 0e                	add    ecx,DWORD PTR [esi]
     d9f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     da1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da3:	27                   	daa    
     da4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     da7:	11 01                	adc    DWORD PTR [ecx],eax
     da9:	12 06                	adc    al,BYTE PTR [esi]
     dab:	40                   	inc    eax
     dac:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     db2:	00 00                	add    BYTE PTR [eax],al
     db4:	06                   	push   es
     db5:	05 00 03 08 3a       	add    eax,0x3a080300
     dba:	0b 3b                	or     edi,DWORD PTR [ebx]
     dbc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dbf:	02 18                	add    bl,BYTE PTR [eax]
     dc1:	00 00                	add    BYTE PTR [eax],al
     dc3:	07                   	pop    es
     dc4:	34 00                	xor    al,0x0
     dc6:	03 08                	add    ecx,DWORD PTR [eax]
     dc8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dcc:	49                   	dec    ecx
     dcd:	13 02                	adc    eax,DWORD PTR [edx]
     dcf:	18 00                	sbb    BYTE PTR [eax],al
     dd1:	00 08                	add    BYTE PTR [eax],cl
     dd3:	0f 00 0b             	str    WORD PTR [ebx]
     dd6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dd9:	00 00                	add    BYTE PTR [eax],al
     ddb:	09 26                	or     DWORD PTR [esi],esp
     ddd:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     de0:	00 00                	add    BYTE PTR [eax],al
     de2:	0a 2e                	or     ch,BYTE PTR [esi]
     de4:	01 3f                	add    DWORD PTR [edi],edi
     de6:	19 03                	sbb    DWORD PTR [ebx],eax
     de8:	0e                   	push   cs
     de9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     deb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ded:	27                   	daa    
     dee:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     df1:	11 01                	adc    DWORD PTR [ecx],eax
     df3:	12 06                	adc    al,BYTE PTR [esi]
     df5:	40                   	inc    eax
     df6:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     dfc:	00 01                	add    BYTE PTR [ecx],al
     dfe:	11 01                	adc    DWORD PTR [ecx],eax
     e00:	25 0e 13 0b 03       	and    eax,0x30b130e
     e05:	0e                   	push   cs
     e06:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e08:	11 01                	adc    DWORD PTR [ecx],eax
     e0a:	12 06                	adc    al,BYTE PTR [esi]
     e0c:	10 17                	adc    BYTE PTR [edi],dl
     e0e:	00 00                	add    BYTE PTR [eax],al
     e10:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e13:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e15:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e18:	08 00                	or     BYTE PTR [eax],al
     e1a:	00 03                	add    BYTE PTR [ebx],al
     e1c:	16                   	push   ss
     e1d:	00 03                	add    BYTE PTR [ebx],al
     e1f:	0e                   	push   cs
     e20:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e22:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e24:	49                   	dec    ecx
     e25:	13 00                	adc    eax,DWORD PTR [eax]
     e27:	00 04 24             	add    BYTE PTR [esp],al
     e2a:	00 0b                	add    BYTE PTR [ebx],cl
     e2c:	0b 3e                	or     edi,DWORD PTR [esi]
     e2e:	0b 03                	or     eax,DWORD PTR [ebx]
     e30:	0e                   	push   cs
     e31:	00 00                	add    BYTE PTR [eax],al
     e33:	05 2e 01 3f 19       	add    eax,0x193f012e
     e38:	03 0e                	add    ecx,DWORD PTR [esi]
     e3a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e3c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e3e:	27                   	daa    
     e3f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e42:	11 01                	adc    DWORD PTR [ecx],eax
     e44:	12 06                	adc    al,BYTE PTR [esi]
     e46:	40                   	inc    eax
     e47:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e4d:	00 00                	add    BYTE PTR [eax],al
     e4f:	06                   	push   es
     e50:	05 00 03 08 3a       	add    eax,0x3a080300
     e55:	0b 3b                	or     edi,DWORD PTR [ebx]
     e57:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e5a:	02 18                	add    bl,BYTE PTR [eax]
     e5c:	00 00                	add    BYTE PTR [eax],al
     e5e:	07                   	pop    es
     e5f:	0f 00 0b             	str    WORD PTR [ebx]
     e62:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e65:	00 00                	add    BYTE PTR [eax],al
     e67:	08 26                	or     BYTE PTR [esi],ah
     e69:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e6c:	00 00                	add    BYTE PTR [eax],al
     e6e:	09 2e                	or     DWORD PTR [esi],ebp
     e70:	01 3f                	add    DWORD PTR [edi],edi
     e72:	19 03                	sbb    DWORD PTR [ebx],eax
     e74:	0e                   	push   cs
     e75:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e77:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e79:	27                   	daa    
     e7a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e7d:	11 01                	adc    DWORD PTR [ecx],eax
     e7f:	12 06                	adc    al,BYTE PTR [esi]
     e81:	40                   	inc    eax
     e82:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     e88:	00 01                	add    BYTE PTR [ecx],al
     e8a:	11 01                	adc    DWORD PTR [ecx],eax
     e8c:	25 0e 13 0b 03       	and    eax,0x30b130e
     e91:	0e                   	push   cs
     e92:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e94:	11 01                	adc    DWORD PTR [ecx],eax
     e96:	12 06                	adc    al,BYTE PTR [esi]
     e98:	10 17                	adc    BYTE PTR [edi],dl
     e9a:	00 00                	add    BYTE PTR [eax],al
     e9c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e9f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ea1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ea4:	08 00                	or     BYTE PTR [eax],al
     ea6:	00 03                	add    BYTE PTR [ebx],al
     ea8:	16                   	push   ss
     ea9:	00 03                	add    BYTE PTR [ebx],al
     eab:	0e                   	push   cs
     eac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb0:	49                   	dec    ecx
     eb1:	13 00                	adc    eax,DWORD PTR [eax]
     eb3:	00 04 24             	add    BYTE PTR [esp],al
     eb6:	00 0b                	add    BYTE PTR [ebx],cl
     eb8:	0b 3e                	or     edi,DWORD PTR [esi]
     eba:	0b 03                	or     eax,DWORD PTR [ebx]
     ebc:	0e                   	push   cs
     ebd:	00 00                	add    BYTE PTR [eax],al
     ebf:	05 2e 01 3f 19       	add    eax,0x193f012e
     ec4:	03 0e                	add    ecx,DWORD PTR [esi]
     ec6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eca:	27                   	daa    
     ecb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ece:	11 01                	adc    DWORD PTR [ecx],eax
     ed0:	12 06                	adc    al,BYTE PTR [esi]
     ed2:	40                   	inc    eax
     ed3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ed9:	00 00                	add    BYTE PTR [eax],al
     edb:	06                   	push   es
     edc:	05 00 03 08 3a       	add    eax,0x3a080300
     ee1:	0b 3b                	or     edi,DWORD PTR [ebx]
     ee3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ee6:	02 18                	add    bl,BYTE PTR [eax]
     ee8:	00 00                	add    BYTE PTR [eax],al
     eea:	07                   	pop    es
     eeb:	34 00                	xor    al,0x0
     eed:	03 08                	add    ecx,DWORD PTR [eax]
     eef:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ef1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ef3:	49                   	dec    ecx
     ef4:	13 02                	adc    eax,DWORD PTR [edx]
     ef6:	18 00                	sbb    BYTE PTR [eax],al
     ef8:	00 08                	add    BYTE PTR [eax],cl
     efa:	0f 00 0b             	str    WORD PTR [ebx]
     efd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f00:	00 00                	add    BYTE PTR [eax],al
     f02:	09 26                	or     DWORD PTR [esi],esp
     f04:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f07:	00 00                	add    BYTE PTR [eax],al
     f09:	0a 2e                	or     ch,BYTE PTR [esi]
     f0b:	01 3f                	add    DWORD PTR [edi],edi
     f0d:	19 03                	sbb    DWORD PTR [ebx],eax
     f0f:	0e                   	push   cs
     f10:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f12:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f14:	27                   	daa    
     f15:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f18:	11 01                	adc    DWORD PTR [ecx],eax
     f1a:	12 06                	adc    al,BYTE PTR [esi]
     f1c:	40                   	inc    eax
     f1d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     f23:	00 01                	add    BYTE PTR [ecx],al
     f25:	11 01                	adc    DWORD PTR [ecx],eax
     f27:	25 0e 13 0b 03       	and    eax,0x30b130e
     f2c:	0e                   	push   cs
     f2d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f2f:	11 01                	adc    DWORD PTR [ecx],eax
     f31:	12 06                	adc    al,BYTE PTR [esi]
     f33:	10 17                	adc    BYTE PTR [edi],dl
     f35:	00 00                	add    BYTE PTR [eax],al
     f37:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f3a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f3c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f3f:	0e                   	push   cs
     f40:	00 00                	add    BYTE PTR [eax],al
     f42:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f45:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f47:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f4a:	08 00                	or     BYTE PTR [eax],al
     f4c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f4f:	00 03                	add    BYTE PTR [ebx],al
     f51:	0e                   	push   cs
     f52:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f54:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f56:	49                   	dec    ecx
     f57:	13 00                	adc    eax,DWORD PTR [eax]
     f59:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f5f:	49                   	dec    ecx
     f60:	13 00                	adc    eax,DWORD PTR [eax]
     f62:	00 06                	add    BYTE PTR [esi],al
     f64:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f68:	00 00                	add    BYTE PTR [eax],al
     f6a:	07                   	pop    es
     f6b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f6e:	19 03                	sbb    DWORD PTR [ebx],eax
     f70:	0e                   	push   cs
     f71:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f73:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f75:	27                   	daa    
     f76:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f79:	11 01                	adc    DWORD PTR [ecx],eax
     f7b:	12 06                	adc    al,BYTE PTR [esi]
     f7d:	40                   	inc    eax
     f7e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f84:	00 00                	add    BYTE PTR [eax],al
     f86:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     f8c:	0b 3b                	or     edi,DWORD PTR [ebx]
     f8e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f91:	02 18                	add    bl,BYTE PTR [eax]
     f93:	00 00                	add    BYTE PTR [eax],al
     f95:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     f98:	03 08                	add    ecx,DWORD PTR [eax]
     f9a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f9c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f9e:	49                   	dec    ecx
     f9f:	13 02                	adc    eax,DWORD PTR [edx]
     fa1:	18 00                	sbb    BYTE PTR [eax],al
     fa3:	00 0a                	add    BYTE PTR [edx],cl
     fa5:	34 00                	xor    al,0x0
     fa7:	03 0e                	add    ecx,DWORD PTR [esi]
     fa9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fad:	49                   	dec    ecx
     fae:	13 00                	adc    eax,DWORD PTR [eax]
     fb0:	00 0b                	add    BYTE PTR [ebx],cl
     fb2:	34 00                	xor    al,0x0
     fb4:	03 08                	add    ecx,DWORD PTR [eax]
     fb6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fba:	49                   	dec    ecx
     fbb:	13 00                	adc    eax,DWORD PTR [eax]
     fbd:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     fc0:	00 03                	add    BYTE PTR [ebx],al
     fc2:	0e                   	push   cs
     fc3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fc5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fc7:	49                   	dec    ecx
     fc8:	13 02                	adc    eax,DWORD PTR [edx]
     fca:	18 00                	sbb    BYTE PTR [eax],al
     fcc:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
     fd2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fd4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fd6:	49                   	dec    ecx
     fd7:	13 3f                	adc    edi,DWORD PTR [edi]
     fd9:	19 02                	sbb    DWORD PTR [edx],eax
     fdb:	18 00                	sbb    BYTE PTR [eax],al
     fdd:	00 00                	add    BYTE PTR [eax],al
     fdf:	01 11                	add    DWORD PTR [ecx],edx
     fe1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     fe7:	0e                   	push   cs
     fe8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fea:	11 01                	adc    DWORD PTR [ecx],eax
     fec:	12 06                	adc    al,BYTE PTR [esi]
     fee:	10 17                	adc    BYTE PTR [edi],dl
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	02 2e                	add    ch,BYTE PTR [esi]
     ff4:	01 3f                	add    DWORD PTR [edi],edi
     ff6:	19 03                	sbb    DWORD PTR [ebx],eax
     ff8:	0e                   	push   cs
     ff9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ffb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ffd:	27                   	daa    
     ffe:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1001:	11 01                	adc    DWORD PTR [ecx],eax
    1003:	12 06                	adc    al,BYTE PTR [esi]
    1005:	40                   	inc    eax
    1006:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    100c:	00 00                	add    BYTE PTR [eax],al
    100e:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    1014:	0b 3b                	or     edi,DWORD PTR [ebx]
    1016:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1019:	02 18                	add    bl,BYTE PTR [eax]
    101b:	00 00                	add    BYTE PTR [eax],al
    101d:	04 0f                	add    al,0xf
    101f:	00 0b                	add    BYTE PTR [ebx],cl
    1021:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1024:	00 00                	add    BYTE PTR [eax],al
    1026:	05 24 00 0b 0b       	add    eax,0xb0b0024
    102b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    102e:	0e                   	push   cs
    102f:	00 00                	add    BYTE PTR [eax],al
    1031:	06                   	push   es
    1032:	24 00                	and    al,0x0
    1034:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1036:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1039:	08 00                	or     BYTE PTR [eax],al
    103b:	00 00                	add    BYTE PTR [eax],al
    103d:	01 11                	add    DWORD PTR [ecx],edx
    103f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1045:	0e                   	push   cs
    1046:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1048:	11 01                	adc    DWORD PTR [ecx],eax
    104a:	12 06                	adc    al,BYTE PTR [esi]
    104c:	10 17                	adc    BYTE PTR [edi],dl
    104e:	00 00                	add    BYTE PTR [eax],al
    1050:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1053:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1055:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1058:	0e                   	push   cs
    1059:	00 00                	add    BYTE PTR [eax],al
    105b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    105e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1060:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1063:	08 00                	or     BYTE PTR [eax],al
    1065:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1068:	00 03                	add    BYTE PTR [ebx],al
    106a:	0e                   	push   cs
    106b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    106d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    106f:	49                   	dec    ecx
    1070:	13 00                	adc    eax,DWORD PTR [eax]
    1072:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1078:	49                   	dec    ecx
    1079:	13 00                	adc    eax,DWORD PTR [eax]
    107b:	00 06                	add    BYTE PTR [esi],al
    107d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1081:	00 00                	add    BYTE PTR [eax],al
    1083:	07                   	pop    es
    1084:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1087:	19 03                	sbb    DWORD PTR [ebx],eax
    1089:	0e                   	push   cs
    108a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    108c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    108e:	27                   	daa    
    108f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1092:	11 01                	adc    DWORD PTR [ecx],eax
    1094:	12 06                	adc    al,BYTE PTR [esi]
    1096:	40                   	inc    eax
    1097:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    109d:	00 00                	add    BYTE PTR [eax],al
    109f:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    10a5:	0b 3b                	or     edi,DWORD PTR [ebx]
    10a7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10aa:	02 18                	add    bl,BYTE PTR [eax]
    10ac:	00 00                	add    BYTE PTR [eax],al
    10ae:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    10b1:	03 08                	add    ecx,DWORD PTR [eax]
    10b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10b7:	49                   	dec    ecx
    10b8:	13 02                	adc    eax,DWORD PTR [edx]
    10ba:	18 00                	sbb    BYTE PTR [eax],al
    10bc:	00 0a                	add    BYTE PTR [edx],cl
    10be:	34 00                	xor    al,0x0
    10c0:	03 0e                	add    ecx,DWORD PTR [esi]
    10c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10c6:	49                   	dec    ecx
    10c7:	13 00                	adc    eax,DWORD PTR [eax]
    10c9:	00 0b                	add    BYTE PTR [ebx],cl
    10cb:	34 00                	xor    al,0x0
    10cd:	03 08                	add    ecx,DWORD PTR [eax]
    10cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10d3:	49                   	dec    ecx
    10d4:	13 00                	adc    eax,DWORD PTR [eax]
    10d6:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    10d9:	00 03                	add    BYTE PTR [ebx],al
    10db:	0e                   	push   cs
    10dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10e0:	49                   	dec    ecx
    10e1:	13 3f                	adc    edi,DWORD PTR [edi]
    10e3:	19 02                	sbb    DWORD PTR [edx],eax
    10e5:	18 00                	sbb    BYTE PTR [eax],al
    10e7:	00 00                	add    BYTE PTR [eax],al
    10e9:	01 11                	add    DWORD PTR [ecx],edx
    10eb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10f1:	0e                   	push   cs
    10f2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10f4:	11 01                	adc    DWORD PTR [ecx],eax
    10f6:	12 06                	adc    al,BYTE PTR [esi]
    10f8:	10 17                	adc    BYTE PTR [edi],dl
    10fa:	00 00                	add    BYTE PTR [eax],al
    10fc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10ff:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1101:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1104:	0e                   	push   cs
    1105:	00 00                	add    BYTE PTR [eax],al
    1107:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    110a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    110c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    110f:	08 00                	or     BYTE PTR [eax],al
    1111:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1114:	00 03                	add    BYTE PTR [ebx],al
    1116:	0e                   	push   cs
    1117:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1119:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    111b:	49                   	dec    ecx
    111c:	13 00                	adc    eax,DWORD PTR [eax]
    111e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1124:	49                   	dec    ecx
    1125:	13 00                	adc    eax,DWORD PTR [eax]
    1127:	00 06                	add    BYTE PTR [esi],al
    1129:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    112c:	19 03                	sbb    DWORD PTR [ebx],eax
    112e:	0e                   	push   cs
    112f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1131:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1133:	27                   	daa    
    1134:	19 11                	sbb    DWORD PTR [ecx],edx
    1136:	01 12                	add    DWORD PTR [edx],edx
    1138:	06                   	push   es
    1139:	40                   	inc    eax
    113a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1140:	00 00                	add    BYTE PTR [eax],al
    1142:	07                   	pop    es
    1143:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1148:	0b 3b                	or     edi,DWORD PTR [ebx]
    114a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    114d:	02 18                	add    bl,BYTE PTR [eax]
    114f:	00 00                	add    BYTE PTR [eax],al
    1151:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1154:	03 08                	add    ecx,DWORD PTR [eax]
    1156:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1158:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    115a:	49                   	dec    ecx
    115b:	13 02                	adc    eax,DWORD PTR [edx]
    115d:	18 00                	sbb    BYTE PTR [eax],al
    115f:	00 09                	add    BYTE PTR [ecx],cl
    1161:	34 00                	xor    al,0x0
    1163:	03 0e                	add    ecx,DWORD PTR [esi]
    1165:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1167:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1169:	49                   	dec    ecx
    116a:	13 3f                	adc    edi,DWORD PTR [edi]
    116c:	19 02                	sbb    DWORD PTR [edx],eax
    116e:	18 00                	sbb    BYTE PTR [eax],al
    1170:	00 00                	add    BYTE PTR [eax],al
    1172:	01 11                	add    DWORD PTR [ecx],edx
    1174:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    117a:	0e                   	push   cs
    117b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    117d:	11 01                	adc    DWORD PTR [ecx],eax
    117f:	12 06                	adc    al,BYTE PTR [esi]
    1181:	10 17                	adc    BYTE PTR [edi],dl
    1183:	00 00                	add    BYTE PTR [eax],al
    1185:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1188:	0b 0b                	or     ecx,DWORD PTR [ebx]
    118a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    118d:	0e                   	push   cs
    118e:	00 00                	add    BYTE PTR [eax],al
    1190:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1193:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1195:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1198:	08 00                	or     BYTE PTR [eax],al
    119a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    119d:	00 03                	add    BYTE PTR [ebx],al
    119f:	0e                   	push   cs
    11a0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11a2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11a4:	49                   	dec    ecx
    11a5:	13 00                	adc    eax,DWORD PTR [eax]
    11a7:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    11ad:	49                   	dec    ecx
    11ae:	13 00                	adc    eax,DWORD PTR [eax]
    11b0:	00 06                	add    BYTE PTR [esi],al
    11b2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11b5:	19 03                	sbb    DWORD PTR [ebx],eax
    11b7:	0e                   	push   cs
    11b8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ba:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11bc:	27                   	daa    
    11bd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11c0:	11 01                	adc    DWORD PTR [ecx],eax
    11c2:	12 06                	adc    al,BYTE PTR [esi]
    11c4:	40                   	inc    eax
    11c5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11cb:	00 00                	add    BYTE PTR [eax],al
    11cd:	07                   	pop    es
    11ce:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    11d3:	0b 3b                	or     edi,DWORD PTR [ebx]
    11d5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11d8:	02 18                	add    bl,BYTE PTR [eax]
    11da:	00 00                	add    BYTE PTR [eax],al
    11dc:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    11df:	03 08                	add    ecx,DWORD PTR [eax]
    11e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11e5:	49                   	dec    ecx
    11e6:	13 02                	adc    eax,DWORD PTR [edx]
    11e8:	18 00                	sbb    BYTE PTR [eax],al
    11ea:	00 09                	add    BYTE PTR [ecx],cl
    11ec:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11ef:	19 03                	sbb    DWORD PTR [ebx],eax
    11f1:	0e                   	push   cs
    11f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f6:	27                   	daa    
    11f7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11fa:	11 01                	adc    DWORD PTR [ecx],eax
    11fc:	12 06                	adc    al,BYTE PTR [esi]
    11fe:	40                   	inc    eax
    11ff:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1205:	00 00                	add    BYTE PTR [eax],al
    1207:	0a 01                	or     al,BYTE PTR [ecx]
    1209:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    120c:	01 13                	add    DWORD PTR [ebx],edx
    120e:	00 00                	add    BYTE PTR [eax],al
    1210:	0b 21                	or     esp,DWORD PTR [ecx]
    1212:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1215:	2f                   	das    
    1216:	0b 00                	or     eax,DWORD PTR [eax]
    1218:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    121b:	00 03                	add    BYTE PTR [ebx],al
    121d:	0e                   	push   cs
    121e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1220:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1222:	49                   	dec    ecx
    1223:	13 02                	adc    eax,DWORD PTR [edx]
    1225:	18 00                	sbb    BYTE PTR [eax],al
    1227:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    122d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    122f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1231:	49                   	dec    ecx
    1232:	13 3f                	adc    edi,DWORD PTR [edi]
    1234:	19 02                	sbb    DWORD PTR [edx],eax
    1236:	18 00                	sbb    BYTE PTR [eax],al
    1238:	00 00                	add    BYTE PTR [eax],al
    123a:	01 11                	add    DWORD PTR [ecx],edx
    123c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1242:	0e                   	push   cs
    1243:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1245:	11 01                	adc    DWORD PTR [ecx],eax
    1247:	12 06                	adc    al,BYTE PTR [esi]
    1249:	10 17                	adc    BYTE PTR [edi],dl
    124b:	00 00                	add    BYTE PTR [eax],al
    124d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1250:	03 0e                	add    ecx,DWORD PTR [esi]
    1252:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1254:	49                   	dec    ecx
    1255:	13 3a                	adc    edi,DWORD PTR [edx]
    1257:	0b 3b                	or     edi,DWORD PTR [ebx]
    1259:	0b 01                	or     eax,DWORD PTR [ecx]
    125b:	13 00                	adc    eax,DWORD PTR [eax]
    125d:	00 03                	add    BYTE PTR [ebx],al
    125f:	28 00                	sub    BYTE PTR [eax],al
    1261:	03 0e                	add    ecx,DWORD PTR [esi]
    1263:	1c 0b                	sbb    al,0xb
    1265:	00 00                	add    BYTE PTR [eax],al
    1267:	04 28                	add    al,0x28
    1269:	00 03                	add    BYTE PTR [ebx],al
    126b:	0e                   	push   cs
    126c:	1c 05                	sbb    al,0x5
    126e:	00 00                	add    BYTE PTR [eax],al
    1270:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1275:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1278:	0e                   	push   cs
    1279:	00 00                	add    BYTE PTR [eax],al
    127b:	06                   	push   es
    127c:	24 00                	and    al,0x0
    127e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1280:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1283:	08 00                	or     BYTE PTR [eax],al
    1285:	00 07                	add    BYTE PTR [edi],al
    1287:	16                   	push   ss
    1288:	00 03                	add    BYTE PTR [ebx],al
    128a:	0e                   	push   cs
    128b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    128d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    128f:	49                   	dec    ecx
    1290:	13 00                	adc    eax,DWORD PTR [eax]
    1292:	00 08                	add    BYTE PTR [eax],cl
    1294:	13 01                	adc    eax,DWORD PTR [ecx]
    1296:	03 08                	add    ecx,DWORD PTR [eax]
    1298:	0b 0b                	or     ecx,DWORD PTR [ebx]
    129a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    129c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    129e:	01 13                	add    DWORD PTR [ebx],edx
    12a0:	00 00                	add    BYTE PTR [eax],al
    12a2:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    12a8:	0b 3b                	or     edi,DWORD PTR [ebx]
    12aa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12ad:	38 0b                	cmp    BYTE PTR [ebx],cl
    12af:	00 00                	add    BYTE PTR [eax],al
    12b1:	0a 0f                	or     cl,BYTE PTR [edi]
    12b3:	00 0b                	add    BYTE PTR [ebx],cl
    12b5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12b8:	00 00                	add    BYTE PTR [eax],al
    12ba:	0b 26                	or     esp,DWORD PTR [esi]
    12bc:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12bf:	00 00                	add    BYTE PTR [eax],al
    12c1:	0c 2e                	or     al,0x2e
    12c3:	01 3f                	add    DWORD PTR [edi],edi
    12c5:	19 03                	sbb    DWORD PTR [ebx],eax
    12c7:	0e                   	push   cs
    12c8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ca:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12cc:	49                   	dec    ecx
    12cd:	13 11                	adc    edx,DWORD PTR [ecx]
    12cf:	01 12                	add    DWORD PTR [edx],edx
    12d1:	06                   	push   es
    12d2:	40                   	inc    eax
    12d3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    12d9:	00 00                	add    BYTE PTR [eax],al
    12db:	0d 34 00 03 0e       	or     eax,0xe030034
    12e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12e4:	49                   	dec    ecx
    12e5:	13 02                	adc    eax,DWORD PTR [edx]
    12e7:	18 00                	sbb    BYTE PTR [eax],al
    12e9:	00 0e                	add    BYTE PTR [esi],cl
    12eb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    12ee:	19 03                	sbb    DWORD PTR [ebx],eax
    12f0:	0e                   	push   cs
    12f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12f5:	27                   	daa    
    12f6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12f9:	11 01                	adc    DWORD PTR [ecx],eax
    12fb:	12 06                	adc    al,BYTE PTR [esi]
    12fd:	40                   	inc    eax
    12fe:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1304:	00 00                	add    BYTE PTR [eax],al
    1306:	0f 05                	syscall 
    1308:	00 03                	add    BYTE PTR [ebx],al
    130a:	0e                   	push   cs
    130b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    130d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    130f:	49                   	dec    ecx
    1310:	13 02                	adc    eax,DWORD PTR [edx]
    1312:	18 00                	sbb    BYTE PTR [eax],al
    1314:	00 10                	add    BYTE PTR [eax],dl
    1316:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1319:	19 03                	sbb    DWORD PTR [ebx],eax
    131b:	0e                   	push   cs
    131c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    131e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1320:	27                   	daa    
    1321:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1324:	11 01                	adc    DWORD PTR [ecx],eax
    1326:	12 06                	adc    al,BYTE PTR [esi]
    1328:	40                   	inc    eax
    1329:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    132f:	00 00                	add    BYTE PTR [eax],al
    1331:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1334:	03 08                	add    ecx,DWORD PTR [eax]
    1336:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1338:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    133a:	49                   	dec    ecx
    133b:	13 02                	adc    eax,DWORD PTR [edx]
    133d:	18 00                	sbb    BYTE PTR [eax],al
    133f:	00 12                	add    BYTE PTR [edx],dl
    1341:	34 00                	xor    al,0x0
    1343:	03 0e                	add    ecx,DWORD PTR [esi]
    1345:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1347:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1349:	49                   	dec    ecx
    134a:	13 3f                	adc    edi,DWORD PTR [edi]
    134c:	19 02                	sbb    DWORD PTR [edx],eax
    134e:	18 00                	sbb    BYTE PTR [eax],al
    1350:	00 13                	add    BYTE PTR [ebx],dl
    1352:	01 01                	add    DWORD PTR [ecx],eax
    1354:	49                   	dec    ecx
    1355:	13 01                	adc    eax,DWORD PTR [ecx]
    1357:	13 00                	adc    eax,DWORD PTR [eax]
    1359:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    135c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    135f:	2f                   	das    
    1360:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	16                   	push   ss
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 30                	add    BYTE PTR [eax],dh
  b4:	bd 00 00 00 00       	mov    ebp,0x0
  b9:	00 00                	add    BYTE PTR [eax],al
  bb:	00 00                	add    BYTE PTR [eax],al
  bd:	00 00                	add    BYTE PTR [eax],al
  bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	bc 0a 00 00 04       	mov    esp,0x400000a
  cb:	00 00                	add    BYTE PTR [eax],al
  cd:	00 00                	add    BYTE PTR [eax],al
  cf:	00 2c 07             	add    BYTE PTR [edi+eax*1],ch
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	52                   	push   edx
  d5:	01 00                	add    DWORD PTR [eax],eax
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	68 0d 00 00 04       	push   0x400000d
  eb:	00 00                	add    BYTE PTR [eax],al
  ed:	00 00                	add    BYTE PTR [eax],al
  ef:	00 80 08 00 30 df    	add    BYTE PTR [eax-0x20cffff8],al
  f5:	05 00 00 00 00       	add    eax,0x0
  fa:	00 00                	add    BYTE PTR [eax],al
  fc:	00 00                	add    BYTE PTR [eax],al
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	cd 13                	int    0x13
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	60                   	pusha  
 111:	0e                   	push   cs
 112:	00 30                	add    BYTE PTR [eax],dh
 114:	6d                   	ins    DWORD PTR es:[edi],dx
 115:	03 00                	add    eax,DWORD PTR [eax]
	...
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	36                   	ss
 127:	17                   	pop    ss
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	d0 11                	rcl    BYTE PTR [ecx],1
 132:	00 30                	add    BYTE PTR [eax],dh
 134:	9b                   	fwait
 135:	01 00                	add    DWORD PTR [eax],eax
	...
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	24 19                	and    al,0x19
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	6c                   	ins    BYTE PTR es:[edi],dx
 151:	13 00                	adc    eax,DWORD PTR [eax]
 153:	30 e7                	xor    bh,ah
	...
 15d:	00 00                	add    BYTE PTR [eax],al
 15f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	13 1b                	adc    ebx,DWORD PTR [ebx]
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	54                   	push   esp
 171:	14 00                	adc    al,0x0
 173:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
	...
 17e:	00 00                	add    BYTE PTR [eax],al
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	8c 1c 00             	mov    WORD PTR [eax+eax*1],ds
 189:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	68 14 00 30 84       	push   0x84300014
	...
 19d:	00 00                	add    BYTE PTR [eax],al
 19f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	e8 20 00 00 04       	call   40001cb <sysEnter_Vector+0x3ed01cb>
 1ab:	00 00                	add    BYTE PTR [eax],al
 1ad:	00 00                	add    BYTE PTR [eax],al
 1af:	00 ec                	add    ah,ch
 1b1:	14 00                	adc    al,0x0
 1b3:	30 eb                	xor    bl,ch
	...
 1bd:	00 00                	add    BYTE PTR [eax],al
 1bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	99                   	cdq    
 1c7:	22 00                	and    al,BYTE PTR [eax]
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	d8 15 00 30 5e 00    	fcom   DWORD PTR ds:0x5e3000
	...
 1de:	00 00                	add    BYTE PTR [eax],al
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	09 24 00             	or     DWORD PTR [eax+eax*1],esp
 1e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	38 16                	cmp    BYTE PTR [esi],dl
 1f2:	00 30                	add    BYTE PTR [eax],dh
 1f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 1fa:	00 00                	add    BYTE PTR [eax],al
 1fc:	00 00                	add    BYTE PTR [eax],al
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	d6                   	(bad)  
 207:	25 00 00 04 00       	and    eax,0x40000
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	00 17                	add    BYTE PTR [edi],dl
 212:	00 30                	add    BYTE PTR [eax],dh
 214:	89 00                	mov    DWORD PTR [eax],eax
	...
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	26                   	es
 227:	27                   	daa    
 228:	00 00                	add    BYTE PTR [eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	8c 17                	mov    WORD PTR [edi],ss
 232:	00 30                	add    BYTE PTR [eax],dh
 234:	62 00                	bound  eax,QWORD PTR [eax]
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	f4                   	hlt    
 247:	27                   	daa    
 248:	00 00                	add    BYTE PTR [eax],al
 24a:	04 00                	add    al,0x0
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	f0 17                	lock pop ss
 252:	00 30                	add    BYTE PTR [eax],dh
 254:	ce                   	into   
	...
 25d:	00 00                	add    BYTE PTR [eax],al
 25f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	d6                   	(bad)  
 267:	28 00                	sub    BYTE PTR [eax],al
 269:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	c0 18 00             	rcr    BYTE PTR [eax],0x0
 273:	30 80 00 00 00 00    	xor    BYTE PTR [eax+0x0],al
 279:	00 00                	add    BYTE PTR [eax],al
 27b:	00 00                	add    BYTE PTR [eax],al
 27d:	00 00                	add    BYTE PTR [eax],al
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	ca 29 00             	retf   0x29
 289:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	40                   	inc    eax
 291:	19 00                	sbb    DWORD PTR [eax],eax
 293:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
	...
 29e:	00 00                	add    BYTE PTR [eax],al
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	60                   	pusha  
 2a7:	2b 00                	sub    eax,DWORD PTR [eax]
 2a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	c0 1a 00             	rcr    BYTE PTR [edx],0x0
 2b3:	30 1d 00 00 00 00    	xor    BYTE PTR ds:0x0,bl
 2b9:	00 00                	add    BYTE PTR [eax],al
 2bb:	00 00                	add    BYTE PTR [eax],al
 2bd:	00 00                	add    BYTE PTR [eax],al
 2bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	d0 2b                	shr    BYTE PTR [ebx],1
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	e0 1a                	loopne 2ec <sysEnter_Vector-0x12fd14>
 2d2:	00 30                	add    BYTE PTR [eax],dh
 2d4:	9c                   	pushf  
 2d5:	01 00                	add    DWORD PTR [eax],eax
	...
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	64                   	fs
 2e7:	2d 00 00 04 00       	sub    eax,0x40000
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	7c 1c                	jl     30e <sysEnter_Vector-0x12fcf2>
 2f2:	00 30                	add    BYTE PTR [eax],dh
 2f4:	b6 00                	mov    dh,0x0
	...
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	ca 2e 00             	retf   0x2e
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	34 1d                	xor    al,0x1d
 312:	00 30                	add    BYTE PTR [eax],dh
 314:	8b 00                	mov    eax,DWORD PTR [eax]
	...
 31e:	00 00                	add    BYTE PTR [eax],al
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	61                   	popa   
 327:	30 00                	xor    BYTE PTR [eax],al
 329:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	c0 1d 00 30 bb 0c 00 	rcr    BYTE PTR ds:0xcbb3000,0x0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	30 1a                	xor    BYTE PTR [edx],bl
      c2:	c9                   	leave  
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	30 03                	xor    BYTE PTR [ebx],al
     197:	25 01 e7 9f 59       	and    eax,0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	30 03                	xor    BYTE PTR [ebx],al
     29d:	28 01                	sub    BYTE PTR [ecx],al
     29f:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	30 03                	xor    BYTE PTR [ebx],al
     358:	09 01                	or     DWORD PTR [ecx],eax
     35a:	08 16                	or     BYTE PTR [esi],dl
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	06                   	push   es
     3c8:	01 00                	add    DWORD PTR [eax],eax
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     42e:	76 69                	jbe    499 <sysEnter_Vector-0x12fb67>
     430:	72 6f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     432:	6e                   	outs   dx,BYTE PTR ds:[esi]
     433:	6d                   	ins    DWORD PTR es:[edi],dx
     434:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     436:	74 2e                	je     466 <sysEnter_Vector-0x12fb9a>
     438:	63 00                	arpl   WORD PTR [eax],ax
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43f:	6c                   	ins    BYTE PTR es:[edi],dx
     440:	6c                   	ins    BYTE PTR es:[edi],dx
     441:	6f                   	outs   dx,DWORD PTR ds:[esi]
     442:	63 2e                	arpl   WORD PTR [esi],bp
     444:	68 00 02 00 00       	push   0x200
     449:	6c                   	ins    BYTE PTR es:[edi],dx
     44a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     451:	4f                   	dec    edi
     452:	53                   	push   ebx
     453:	2e                   	cs
     454:	68 00 02 00 00       	push   0x200
     459:	73 74                	jae    4cf <sysEnter_Vector-0x12fb31>
     45b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     462:	63 
     463:	2e                   	cs
     464:	68 00 03 00 00       	push   0x300
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	05 02 00 04 00       	add    eax,0x40002
     470:	30 03                	xor    BYTE PTR [ebx],al
     472:	09 01                	or     DWORD PTR [ecx],eax
     474:	08 21                	or     BYTE PTR [ecx],ah
     476:	91                   	xchg   ecx,eax
     477:	02 36                	add    dh,BYTE PTR [esi]
     479:	14 02                	adc    al,0x2
     47b:	39 13                	cmp    DWORD PTR [ebx],edx
     47d:	00 02                	add    BYTE PTR [edx],al
     47f:	04 02                	add    al,0x2
     481:	7e 00                	jle    483 <sysEnter_Vector-0x12fb7d>
     483:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     486:	06                   	push   es
     487:	4a                   	dec    edx
     488:	06                   	push   es
     489:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     48a:	59                   	pop    ecx
     48b:	5b                   	pop    ebx
     48c:	08 21                	or     BYTE PTR [ecx],ah
     48e:	76 bb                	jbe    44b <sysEnter_Vector-0x12fbb5>
     490:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     496:	14 08                	adc    al,0x8
     498:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     49f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4a2:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4a5:	00 02                	add    BYTE PTR [edx],al
     4a7:	04 01                	add    al,0x1
     4a9:	06                   	push   es
     4aa:	4a                   	dec    edx
     4ab:	06                   	push   es
     4ac:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4af:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4b4:	08 f3                	or     bl,dh
     4b6:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4bf:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4c2:	00 02                	add    BYTE PTR [edx],al
     4c4:	04 01                	add    al,0x1
     4c6:	06                   	push   es
     4c7:	4a                   	dec    edx
     4c8:	06                   	push   es
     4c9:	03 0b                	add    ecx,DWORD PTR [ebx]
     4cb:	9e                   	sahf   
     4cc:	02 05 00 01 01 f4    	add    al,BYTE PTR ds:0xf4010100
     4d2:	00 00                	add    BYTE PTR [eax],al
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	00 cd                	add    ch,cl
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	00 01                	add    BYTE PTR [ecx],al
     4dc:	01 fb                	add    ebx,edi
     4de:	0e                   	push   cs
     4df:	0d 00 01 01 01       	or     eax,0x1010100
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	01 00                	add    DWORD PTR [eax],eax
     4ea:	00 01                	add    BYTE PTR [ecx],al
     4ec:	73 72                	jae    560 <sysEnter_Vector-0x12faa0>
     4ee:	63 00                	arpl   WORD PTR [eax],ax
     4f0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4f7:	00 2f                	add    BYTE PTR [edi],ch
     4f9:	68 6f 6d 65 2f       	push   0x2f656d6f
     4fe:	79 6f                	jns    56f <sysEnter_Vector-0x12fa91>
     500:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     507:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50a:	73 73                	jae    57f <sysEnter_Vector-0x12fa81>
     50c:	2f                   	das    
     50d:	6c                   	ins    BYTE PTR es:[edi],dx
     50e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     515:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     521:	78 2d                	js     550 <sysEnter_Vector-0x12fab0>
     523:	67 6e                	outs   dx,BYTE PTR ds:[si]
     525:	75 2f                	jne    556 <sysEnter_Vector-0x12faaa>
     527:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52c:	2f                   	das    
     52d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     534:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     537:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53b:	65                   	gs
     53c:	2f                   	das    
     53d:	2e                   	cs
     53e:	2e                   	cs
     53f:	2f                   	das    
     540:	2e                   	cs
     541:	2e                   	cs
     542:	2f                   	das    
     543:	2e                   	cs
     544:	2e                   	cs
     545:	2f                   	das    
     546:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     54a:	6a 2f                	push   0x2f
     54c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     54f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     556:	6e                   	outs   dx,BYTE PTR ds:[esi]
     557:	65                   	gs
     558:	6c                   	ins    BYTE PTR es:[edi],dx
     559:	2f                   	das    
     55a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     561:	00 00                	add    BYTE PTR [eax],al
     563:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     56a:	01 00                	add    DWORD PTR [eax],eax
     56c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     56f:	6c                   	ins    BYTE PTR es:[edi],dx
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	6f                   	outs   dx,DWORD PTR ds:[esi]
     572:	63 2e                	arpl   WORD PTR [esi],bp
     574:	68 00 02 00 00       	push   0x200
     579:	6c                   	ins    BYTE PTR es:[edi],dx
     57a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     581:	4f                   	dec    edi
     582:	53                   	push   ebx
     583:	2e                   	cs
     584:	68 00 02 00 00       	push   0x200
     589:	73 74                	jae    5ff <sysEnter_Vector-0x12fa01>
     58b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     592:	63 
     593:	2e                   	cs
     594:	68 00 03 00 00       	push   0x300
     599:	73 79                	jae    614 <sysEnter_Vector-0x12f9ec>
     59b:	73 63                	jae    600 <sysEnter_Vector-0x12fa00>
     59d:	61                   	popa   
     59e:	6c                   	ins    BYTE PTR es:[edi],dx
     59f:	6c                   	ins    BYTE PTR es:[edi],dx
     5a0:	73 2e                	jae    5d0 <sysEnter_Vector-0x12fa30>
     5a2:	68 00 04 00 00       	push   0x400
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	05 02 6c 06 00       	add    eax,0x66c02
     5ae:	30 03                	xor    BYTE PTR [ebx],al
     5b0:	09 01                	or     DWORD PTR [ecx],eax
     5b2:	08 13                	or     BYTE PTR [ebx],dl
     5b4:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     5b7:	08 13                	or     BYTE PTR [ebx],dl
     5b9:	08 2f                	or     BYTE PTR [edi],ch
     5bb:	69 e5 08 d7 77 08    	imul   esp,ebp,0x877d708
     5c1:	13 08                	adc    ecx,DWORD PTR [eax]
     5c3:	9f                   	lahf   
     5c4:	02 05 00 01 01 26    	add    al,BYTE PTR ds:0x26010100
     5ca:	01 00                	add    DWORD PTR [eax],eax
     5cc:	00 02                	add    BYTE PTR [edx],al
     5ce:	00 d4                	add    ah,dl
     5d0:	00 00                	add    BYTE PTR [eax],al
     5d2:	00 01                	add    BYTE PTR [ecx],al
     5d4:	01 fb                	add    ebx,edi
     5d6:	0e                   	push   cs
     5d7:	0d 00 01 01 01       	or     eax,0x1010100
     5dc:	01 00                	add    DWORD PTR [eax],eax
     5de:	00 00                	add    BYTE PTR [eax],al
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 01                	add    BYTE PTR [ecx],al
     5e4:	73 72                	jae    658 <sysEnter_Vector-0x12f9a8>
     5e6:	63 2f                	arpl   WORD PTR [edi],bp
     5e8:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     5ef:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     5f4:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     5f7:	68 6f 6d 65 2f       	push   0x2f656d6f
     5fc:	79 6f                	jns    66d <sysEnter_Vector-0x12f993>
     5fe:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     605:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     608:	73 73                	jae    67d <sysEnter_Vector-0x12f983>
     60a:	2f                   	das    
     60b:	6c                   	ins    BYTE PTR es:[edi],dx
     60c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     613:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     619:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     61f:	78 2d                	js     64e <sysEnter_Vector-0x12f9b2>
     621:	67 6e                	outs   dx,BYTE PTR ds:[si]
     623:	75 2f                	jne    654 <sysEnter_Vector-0x12f9ac>
     625:	35 2e 33 2e 30       	xor    eax,0x302e332e
     62a:	2f                   	das    
     62b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     632:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     635:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     639:	65                   	gs
     63a:	2f                   	das    
     63b:	2e                   	cs
     63c:	2e                   	cs
     63d:	2f                   	das    
     63e:	2e                   	cs
     63f:	2e                   	cs
     640:	2f                   	das    
     641:	2e                   	cs
     642:	2e                   	cs
     643:	2f                   	das    
     644:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     648:	6a 2f                	push   0x2f
     64a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     64d:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     654:	6e                   	outs   dx,BYTE PTR ds:[esi]
     655:	65                   	gs
     656:	6c                   	ins    BYTE PTR es:[edi],dx
     657:	2f                   	das    
     658:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     65f:	00 00                	add    BYTE PTR [eax],al
     661:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     668:	00 01                	add    BYTE PTR [ecx],al
     66a:	00 00                	add    BYTE PTR [eax],al
     66c:	6d                   	ins    DWORD PTR es:[edi],dx
     66d:	61                   	popa   
     66e:	6c                   	ins    BYTE PTR es:[edi],dx
     66f:	6c                   	ins    BYTE PTR es:[edi],dx
     670:	6f                   	outs   dx,DWORD PTR ds:[esi]
     671:	63 2e                	arpl   WORD PTR [esi],bp
     673:	68 00 02 00 00       	push   0x200
     678:	6c                   	ins    BYTE PTR es:[edi],dx
     679:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     680:	4f                   	dec    edi
     681:	53                   	push   ebx
     682:	2e                   	cs
     683:	68 00 02 00 00       	push   0x200
     688:	73 74                	jae    6fe <sysEnter_Vector-0x12f902>
     68a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     691:	63 
     692:	2e                   	cs
     693:	68 00 03 00 00       	push   0x300
     698:	73 79                	jae    713 <sysEnter_Vector-0x12f8ed>
     69a:	73 63                	jae    6ff <sysEnter_Vector-0x12f901>
     69c:	61                   	popa   
     69d:	6c                   	ins    BYTE PTR es:[edi],dx
     69e:	6c                   	ins    BYTE PTR es:[edi],dx
     69f:	73 2e                	jae    6cf <sysEnter_Vector-0x12f931>
     6a1:	68 00 04 00 00       	push   0x400
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	05 02 2c 07 00       	add    eax,0x72c02
     6ad:	30 03                	xor    BYTE PTR [ebx],al
     6af:	0f 01                	(bad)  
     6b1:	d7                   	xlat   BYTE PTR ds:[ebx]
     6b2:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6b8:	75 4b                	jne    705 <sysEnter_Vector-0x12f8fb>
     6ba:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     6c0:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     6c5:	75 84                	jne    64b <sysEnter_Vector-0x12f9b5>
     6c7:	68 00 02 04 01       	push   0x1040200
     6cc:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6cf:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     6d5:	06                   	push   es
     6d6:	66 06                	pushw  es
     6d8:	68 ad 68 68 76       	push   0x766868ad
     6dd:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     6e0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6e3:	06                   	push   es
     6e4:	ac                   	lods   al,BYTE PTR ds:[esi]
     6e5:	06                   	push   es
     6e6:	68 5b 00 02 04       	push   0x402005b
     6eb:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     6f1:	01 01                	add    DWORD PTR [ecx],eax
     6f3:	b1 01                	mov    cl,0x1
     6f5:	00 00                	add    BYTE PTR [eax],al
     6f7:	02 00                	add    al,BYTE PTR [eax]
     6f9:	eb 00                	jmp    6fb <sysEnter_Vector-0x12f905>
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	01 01                	add    DWORD PTR [ecx],eax
     6ff:	fb                   	sti    
     700:	0e                   	push   cs
     701:	0d 00 01 01 01       	or     eax,0x1010100
     706:	01 00                	add    DWORD PTR [eax],eax
     708:	00 00                	add    BYTE PTR [eax],al
     70a:	01 00                	add    DWORD PTR [eax],eax
     70c:	00 01                	add    BYTE PTR [ecx],al
     70e:	73 72                	jae    782 <sysEnter_Vector-0x12f87e>
     710:	63 00                	arpl   WORD PTR [eax],ax
     712:	2f                   	das    
     713:	68 6f 6d 65 2f       	push   0x2f656d6f
     718:	79 6f                	jns    789 <sysEnter_Vector-0x12f877>
     71a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     721:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     724:	73 73                	jae    799 <sysEnter_Vector-0x12f867>
     726:	2f                   	das    
     727:	6c                   	ins    BYTE PTR es:[edi],dx
     728:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     72f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     735:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     73b:	78 2d                	js     76a <sysEnter_Vector-0x12f896>
     73d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     73f:	75 2f                	jne    770 <sysEnter_Vector-0x12f890>
     741:	35 2e 33 2e 30       	xor    eax,0x302e332e
     746:	2f                   	das    
     747:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     74e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     751:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     755:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     759:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     75d:	65                   	gs
     75e:	2f                   	das    
     75f:	2e                   	cs
     760:	2e                   	cs
     761:	2f                   	das    
     762:	2e                   	cs
     763:	2e                   	cs
     764:	2f                   	das    
     765:	2e                   	cs
     766:	2e                   	cs
     767:	2f                   	das    
     768:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     76c:	6a 2f                	push   0x2f
     76e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     771:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     778:	6e                   	outs   dx,BYTE PTR ds:[esi]
     779:	65                   	gs
     77a:	6c                   	ins    BYTE PTR es:[edi],dx
     77b:	2f                   	das    
     77c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     783:	00 00                	add    BYTE PTR [eax],al
     785:	6c                   	ins    BYTE PTR es:[edi],dx
     786:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     78d:	4f                   	dec    edi
     78e:	53                   	push   ebx
     78f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     792:	01 00                	add    DWORD PTR [eax],eax
     794:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     797:	64                   	fs
     798:	61                   	popa   
     799:	72 67                	jb     802 <sysEnter_Vector-0x12f7fe>
     79b:	2e                   	cs
     79c:	68 00 02 00 00       	push   0x200
     7a1:	73 74                	jae    817 <sysEnter_Vector-0x12f7e9>
     7a3:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7aa:	63 
     7ab:	2e                   	cs
     7ac:	68 00 02 00 00       	push   0x200
     7b1:	73 74                	jae    827 <sysEnter_Vector-0x12f7d9>
     7b3:	64                   	fs
     7b4:	64                   	fs
     7b5:	65                   	gs
     7b6:	66                   	data16
     7b7:	2e                   	cs
     7b8:	68 00 02 00 00       	push   0x200
     7bd:	6d                   	ins    DWORD PTR es:[edi],dx
     7be:	61                   	popa   
     7bf:	6c                   	ins    BYTE PTR es:[edi],dx
     7c0:	6c                   	ins    BYTE PTR es:[edi],dx
     7c1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7c2:	63 2e                	arpl   WORD PTR [esi],bp
     7c4:	68 00 03 00 00       	push   0x300
     7c9:	6c                   	ins    BYTE PTR es:[edi],dx
     7ca:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7d1:	4f                   	dec    edi
     7d2:	53                   	push   ebx
     7d3:	2e                   	cs
     7d4:	68 00 03 00 00       	push   0x300
     7d9:	73 79                	jae    854 <sysEnter_Vector-0x12f7ac>
     7db:	73 63                	jae    840 <sysEnter_Vector-0x12f7c0>
     7dd:	61                   	popa   
     7de:	6c                   	ins    BYTE PTR es:[edi],dx
     7df:	6c                   	ins    BYTE PTR es:[edi],dx
     7e0:	73 2e                	jae    810 <sysEnter_Vector-0x12f7f0>
     7e2:	68 00 04 00 00       	push   0x400
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	05 02 80 08 00       	add    eax,0x88002
     7ee:	30 03                	xor    BYTE PTR [ebx],al
     7f0:	10 01                	adc    BYTE PTR [ecx],al
     7f2:	08 21                	or     BYTE PTR [ecx],ah
     7f4:	75 08                	jne    7fe <sysEnter_Vector-0x12f802>
     7f6:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     7fc:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     802:	75 08                	jne    80c <sysEnter_Vector-0x12f7f4>
     804:	9f                   	lahf   
     805:	3d 77 08 21 75       	cmp    eax,0x75210877
     80a:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     810:	75 08                	jne    81a <sysEnter_Vector-0x12f7e6>
     812:	d7                   	xlat   BYTE PTR ds:[ebx]
     813:	3d 77 08 21 08       	cmp    eax,0x8210877
     818:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     81c:	c9                   	leave  
     81d:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     820:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     823:	08 21                	or     BYTE PTR [ecx],ah
     825:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     82b:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     82f:	31 f4                	xor    esp,esi
     831:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     835:	31 f4                	xor    esp,esi
     837:	68 08 91 59 31       	push   0x31599108
     83c:	08 21                	or     BYTE PTR [ecx],ah
     83e:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     842:	77 c9                	ja     80d <sysEnter_Vector-0x12f7f3>
     844:	c9                   	leave  
     845:	3f                   	aas    
     846:	c9                   	leave  
     847:	08 83 3f c9 9f 31    	or     BYTE PTR [ebx+0x319fc93f],al
     84d:	08 21                	or     BYTE PTR [ecx],ah
     84f:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     856:	67 02 22             	add    ah,BYTE PTR [bp+si]
     859:	14 08                	adc    al,0x8
     85b:	ae                   	scas   al,BYTE PTR es:[edi]
     85c:	4c                   	dec    esp
     85d:	ca 08 4b             	retf   0x4b08
     860:	91                   	xchg   ecx,eax
     861:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     867:	67 02 2f             	add    ch,BYTE PTR [bx]
     86a:	14 00                	adc    al,0x0
     86c:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     86f:	02 31                	add    dh,BYTE PTR [ecx]
     871:	13 00                	adc    eax,DWORD PTR [eax]
     873:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     876:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     87c:	bb 00 02 04 02       	mov    ebx,0x2040200
     881:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     884:	00 02                	add    BYTE PTR [edx],al
     886:	04 01                	add    al,0x1
     888:	06                   	push   es
     889:	4a                   	dec    edx
     88a:	06                   	push   es
     88b:	03 0e                	add    ecx,DWORD PTR [esi]
     88d:	ba 08 91 08 4d       	mov    edx,0x4d089108
     892:	3f                   	aas    
     893:	5b                   	pop    ebx
     894:	08 13                	or     BYTE PTR [ebx],dl
     896:	77 08                	ja     8a0 <sysEnter_Vector-0x12f760>
     898:	67 08 4d 3d          	or     BYTE PTR [di+0x3d],cl
     89c:	5b                   	pop    ebx
     89d:	c9                   	leave  
     89e:	c9                   	leave  
     89f:	31 c9                	xor    ecx,ecx
     8a1:	08 13                	or     BYTE PTR [ebx],dl
     8a3:	02 02                	add    al,BYTE PTR [edx]
     8a5:	00 01                	add    BYTE PTR [ecx],al
     8a7:	01 50 01             	add    DWORD PTR [eax+0x1],edx
     8aa:	00 00                	add    BYTE PTR [eax],al
     8ac:	02 00                	add    al,BYTE PTR [eax]
     8ae:	db 00                	fild   DWORD PTR [eax]
     8b0:	00 00                	add    BYTE PTR [eax],al
     8b2:	01 01                	add    DWORD PTR [ecx],eax
     8b4:	fb                   	sti    
     8b5:	0e                   	push   cs
     8b6:	0d 00 01 01 01       	or     eax,0x1010100
     8bb:	01 00                	add    DWORD PTR [eax],eax
     8bd:	00 00                	add    BYTE PTR [eax],al
     8bf:	01 00                	add    DWORD PTR [eax],eax
     8c1:	00 01                	add    BYTE PTR [ecx],al
     8c3:	73 72                	jae    937 <sysEnter_Vector-0x12f6c9>
     8c5:	63 00                	arpl   WORD PTR [eax],ax
     8c7:	2f                   	das    
     8c8:	68 6f 6d 65 2f       	push   0x2f656d6f
     8cd:	79 6f                	jns    93e <sysEnter_Vector-0x12f6c2>
     8cf:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     8d6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     8d9:	73 73                	jae    94e <sysEnter_Vector-0x12f6b2>
     8db:	2f                   	das    
     8dc:	6c                   	ins    BYTE PTR es:[edi],dx
     8dd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     8e4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     8ea:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     8f0:	78 2d                	js     91f <sysEnter_Vector-0x12f6e1>
     8f2:	67 6e                	outs   dx,BYTE PTR ds:[si]
     8f4:	75 2f                	jne    925 <sysEnter_Vector-0x12f6db>
     8f6:	35 2e 33 2e 30       	xor    eax,0x302e332e
     8fb:	2f                   	das    
     8fc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     903:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     906:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     90a:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     90e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     912:	65                   	gs
     913:	2f                   	das    
     914:	2e                   	cs
     915:	2e                   	cs
     916:	2f                   	das    
     917:	2e                   	cs
     918:	2e                   	cs
     919:	2f                   	das    
     91a:	2e                   	cs
     91b:	2e                   	cs
     91c:	2f                   	das    
     91d:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     921:	6a 2f                	push   0x2f
     923:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     926:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     92d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     92e:	65                   	gs
     92f:	6c                   	ins    BYTE PTR es:[edi],dx
     930:	2f                   	das    
     931:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     938:	00 00                	add    BYTE PTR [eax],al
     93a:	6d                   	ins    DWORD PTR es:[edi],dx
     93b:	61                   	popa   
     93c:	6c                   	ins    BYTE PTR es:[edi],dx
     93d:	6c                   	ins    BYTE PTR es:[edi],dx
     93e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     93f:	63 2e                	arpl   WORD PTR [esi],bp
     941:	63 00                	arpl   WORD PTR [eax],ax
     943:	01 00                	add    DWORD PTR [eax],eax
     945:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     948:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     94f:	63 
     950:	2e                   	cs
     951:	68 00 02 00 00       	push   0x200
     956:	73 74                	jae    9cc <sysEnter_Vector-0x12f634>
     958:	64                   	fs
     959:	64                   	fs
     95a:	65                   	gs
     95b:	66                   	data16
     95c:	2e                   	cs
     95d:	68 00 02 00 00       	push   0x200
     962:	6d                   	ins    DWORD PTR es:[edi],dx
     963:	61                   	popa   
     964:	6c                   	ins    BYTE PTR es:[edi],dx
     965:	6c                   	ins    BYTE PTR es:[edi],dx
     966:	6f                   	outs   dx,DWORD PTR ds:[esi]
     967:	63 2e                	arpl   WORD PTR [esi],bp
     969:	68 00 03 00 00       	push   0x300
     96e:	6c                   	ins    BYTE PTR es:[edi],dx
     96f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     976:	4f                   	dec    edi
     977:	53                   	push   ebx
     978:	2e                   	cs
     979:	68 00 03 00 00       	push   0x300
     97e:	73 79                	jae    9f9 <sysEnter_Vector-0x12f607>
     980:	73 63                	jae    9e5 <sysEnter_Vector-0x12f61b>
     982:	61                   	popa   
     983:	6c                   	ins    BYTE PTR es:[edi],dx
     984:	6c                   	ins    BYTE PTR es:[edi],dx
     985:	73 2e                	jae    9b5 <sysEnter_Vector-0x12f64b>
     987:	68 00 04 00 00       	push   0x400
     98c:	00 00                	add    BYTE PTR [eax],al
     98e:	05 02 60 0e 00       	add    eax,0xe6002
     993:	30 03                	xor    BYTE PTR [ebx],al
     995:	0c 01                	or     al,0x1
     997:	08 21                	or     BYTE PTR [ecx],ah
     999:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     99c:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     9a1:	f5                   	cmc    
     9a2:	92                   	xchg   edx,eax
     9a3:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     9a9:	04 01                	add    al,0x1
     9ab:	06                   	push   es
     9ac:	66 06                	pushw  es
     9ae:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     9b3:	59                   	pop    ecx
     9b4:	31 f5                	xor    ebp,esi
     9b6:	68 93 00 02 04       	push   0x4020093
     9bb:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     9c1:	03 0b                	add    ecx,DWORD PTR [ebx]
     9c3:	20 31                	and    BYTE PTR [ecx],dh
     9c5:	08 27                	or     BYTE PTR [edi],ah
     9c7:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     9cd:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     9d2:	f3 02 26             	repz add ah,BYTE PTR [esi]
     9d5:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     9dc:	e5 ad                	in     eax,0xad
     9de:	91                   	xchg   ecx,eax
     9df:	91                   	xchg   ecx,eax
     9e0:	75 08                	jne    9ea <sysEnter_Vector-0x12f616>
     9e2:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e3:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e4:	08 13                	or     BYTE PTR [ebx],dl
     9e6:	91                   	xchg   ecx,eax
     9e7:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     9ea:	91                   	xchg   ecx,eax
     9eb:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     9f0:	c9                   	leave  
     9f1:	ad                   	lods   eax,DWORD PTR ds:[esi]
     9f2:	3f                   	aas    
     9f3:	08 13                	or     BYTE PTR [ebx],dl
     9f5:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     9fb:	01 e3                	add    ebx,esp
     9fd:	00 00                	add    BYTE PTR [eax],al
     9ff:	00 02                	add    BYTE PTR [edx],al
     a01:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     a07:	01 fb                	add    ebx,edi
     a09:	0e                   	push   cs
     a0a:	0d 00 01 01 01       	or     eax,0x1010100
     a0f:	01 00                	add    DWORD PTR [eax],eax
     a11:	00 00                	add    BYTE PTR [eax],al
     a13:	01 00                	add    DWORD PTR [eax],eax
     a15:	00 01                	add    BYTE PTR [ecx],al
     a17:	73 72                	jae    a8b <sysEnter_Vector-0x12f575>
     a19:	63 00                	arpl   WORD PTR [eax],ax
     a1b:	2f                   	das    
     a1c:	68 6f 6d 65 2f       	push   0x2f656d6f
     a21:	79 6f                	jns    a92 <sysEnter_Vector-0x12f56e>
     a23:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a2a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a2d:	73 73                	jae    aa2 <sysEnter_Vector-0x12f55e>
     a2f:	2f                   	das    
     a30:	6c                   	ins    BYTE PTR es:[edi],dx
     a31:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a38:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a3e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a44:	78 2d                	js     a73 <sysEnter_Vector-0x12f58d>
     a46:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a48:	75 2f                	jne    a79 <sysEnter_Vector-0x12f587>
     a4a:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a4f:	2f                   	das    
     a50:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a57:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a5a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a5e:	65 00 00             	add    BYTE PTR gs:[eax],al
     a61:	6d                   	ins    DWORD PTR es:[edi],dx
     a62:	65                   	gs
     a63:	6d                   	ins    DWORD PTR es:[edi],dx
     a64:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     a67:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a6a:	01 00                	add    DWORD PTR [eax],eax
     a6c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a6f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a76:	63 
     a77:	2e                   	cs
     a78:	68 00 02 00 00       	push   0x200
     a7d:	73 74                	jae    af3 <sysEnter_Vector-0x12f50d>
     a7f:	64                   	fs
     a80:	64                   	fs
     a81:	65                   	gs
     a82:	66                   	data16
     a83:	2e                   	cs
     a84:	68 00 02 00 00       	push   0x200
     a89:	6d                   	ins    DWORD PTR es:[edi],dx
     a8a:	61                   	popa   
     a8b:	6c                   	ins    BYTE PTR es:[edi],dx
     a8c:	6c                   	ins    BYTE PTR es:[edi],dx
     a8d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a8e:	63 2e                	arpl   WORD PTR [esi],bp
     a90:	68 00 03 00 00       	push   0x300
     a95:	6c                   	ins    BYTE PTR es:[edi],dx
     a96:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     a9d:	4f                   	dec    edi
     a9e:	53                   	push   ebx
     a9f:	2e                   	cs
     aa0:	68 00 03 00 00       	push   0x300
     aa5:	00 00                	add    BYTE PTR [eax],al
     aa7:	05 02 d0 11 00       	add    eax,0x11d002
     aac:	30 03                	xor    BYTE PTR [ebx],al
     aae:	0a 01                	or     al,BYTE PTR [ecx]
     ab0:	f5                   	cmc    
     ab1:	d7                   	xlat   BYTE PTR ds:[ebx]
     ab2:	d7                   	xlat   BYTE PTR ds:[ebx]
     ab3:	68 91 67 68 83       	push   0x83686791
     ab8:	91                   	xchg   ecx,eax
     ab9:	91                   	xchg   ecx,eax
     aba:	2f                   	das    
     abb:	08 1f                	or     BYTE PTR [edi],bl
     abd:	e8 08 57 ca 84       	call   84ca61ca <ticksToWait+0x54ca1dda>
     ac2:	68 83 67 68 83       	push   0x83686783
     ac7:	91                   	xchg   ecx,eax
     ac8:	91                   	xchg   ecx,eax
     ac9:	2f                   	das    
     aca:	08 1f                	or     BYTE PTR [edi],bl
     acc:	e8 08 57 ca 5c       	call   5cca61d9 <ticksToWait+0x2cca1de9>
     ad1:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     ad7:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     add:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     ae0:	00 01                	add    BYTE PTR [ecx],al
     ae2:	01 ca                	add    edx,ecx
     ae4:	00 00                	add    BYTE PTR [eax],al
     ae6:	00 02                	add    BYTE PTR [edx],al
     ae8:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     aee:	01 fb                	add    ebx,edi
     af0:	0e                   	push   cs
     af1:	0d 00 01 01 01       	or     eax,0x1010100
     af6:	01 00                	add    DWORD PTR [eax],eax
     af8:	00 00                	add    BYTE PTR [eax],al
     afa:	01 00                	add    DWORD PTR [eax],eax
     afc:	00 01                	add    BYTE PTR [ecx],al
     afe:	73 72                	jae    b72 <sysEnter_Vector-0x12f48e>
     b00:	63 00                	arpl   WORD PTR [eax],ax
     b02:	2f                   	das    
     b03:	68 6f 6d 65 2f       	push   0x2f656d6f
     b08:	79 6f                	jns    b79 <sysEnter_Vector-0x12f487>
     b0a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b11:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b14:	73 73                	jae    b89 <sysEnter_Vector-0x12f477>
     b16:	2f                   	das    
     b17:	6c                   	ins    BYTE PTR es:[edi],dx
     b18:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b1f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b25:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b2b:	78 2d                	js     b5a <sysEnter_Vector-0x12f4a6>
     b2d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b2f:	75 2f                	jne    b60 <sysEnter_Vector-0x12f4a0>
     b31:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b36:	2f                   	das    
     b37:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b3e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b41:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b45:	65 00 00             	add    BYTE PTR gs:[eax],al
     b48:	6d                   	ins    DWORD PTR es:[edi],dx
     b49:	65                   	gs
     b4a:	6d                   	ins    DWORD PTR es:[edi],dx
     b4b:	73 65                	jae    bb2 <sysEnter_Vector-0x12f44e>
     b4d:	74 2e                	je     b7d <sysEnter_Vector-0x12f483>
     b4f:	63 00                	arpl   WORD PTR [eax],ax
     b51:	01 00                	add    DWORD PTR [eax],eax
     b53:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b56:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b5d:	63 
     b5e:	2e                   	cs
     b5f:	68 00 02 00 00       	push   0x200
     b64:	73 74                	jae    bda <sysEnter_Vector-0x12f426>
     b66:	64                   	fs
     b67:	64                   	fs
     b68:	65                   	gs
     b69:	66                   	data16
     b6a:	2e                   	cs
     b6b:	68 00 02 00 00       	push   0x200
     b70:	6d                   	ins    DWORD PTR es:[edi],dx
     b71:	61                   	popa   
     b72:	6c                   	ins    BYTE PTR es:[edi],dx
     b73:	6c                   	ins    BYTE PTR es:[edi],dx
     b74:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b75:	63 2e                	arpl   WORD PTR [esi],bp
     b77:	68 00 03 00 00       	push   0x300
     b7c:	6c                   	ins    BYTE PTR es:[edi],dx
     b7d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b84:	4f                   	dec    edi
     b85:	53                   	push   ebx
     b86:	2e                   	cs
     b87:	68 00 03 00 00       	push   0x300
     b8c:	00 00                	add    BYTE PTR [eax],al
     b8e:	05 02 6c 13 00       	add    eax,0x136c02
     b93:	30 1a                	xor    BYTE PTR [edx],bl
     b95:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     b9c:	ca 9f 2f             	retf   0x2f9f
     b9f:	d5 bd                	aad    0xbd
     ba1:	9f                   	lahf   
     ba2:	2f                   	das    
     ba3:	f1                   	icebp  
     ba4:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     ba9:	c9                   	leave  
     baa:	08 13                	or     BYTE PTR [ebx],dl
     bac:	02 02                	add    al,BYTE PTR [edx]
     bae:	00 01                	add    BYTE PTR [ecx],al
     bb0:	01 c0                	add    eax,eax
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	00 02                	add    BYTE PTR [edx],al
     bb6:	00 a9 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ch
     bbc:	01 fb                	add    ebx,edi
     bbe:	0e                   	push   cs
     bbf:	0d 00 01 01 01       	or     eax,0x1010100
     bc4:	01 00                	add    DWORD PTR [eax],eax
     bc6:	00 00                	add    BYTE PTR [eax],al
     bc8:	01 00                	add    DWORD PTR [eax],eax
     bca:	00 01                	add    BYTE PTR [ecx],al
     bcc:	73 72                	jae    c40 <sysEnter_Vector-0x12f3c0>
     bce:	63 00                	arpl   WORD PTR [eax],ax
     bd0:	2f                   	das    
     bd1:	68 6f 6d 65 2f       	push   0x2f656d6f
     bd6:	79 6f                	jns    c47 <sysEnter_Vector-0x12f3b9>
     bd8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     bdf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     be2:	73 73                	jae    c57 <sysEnter_Vector-0x12f3a9>
     be4:	2f                   	das    
     be5:	6c                   	ins    BYTE PTR es:[edi],dx
     be6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bed:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bf3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     bf9:	78 2d                	js     c28 <sysEnter_Vector-0x12f3d8>
     bfb:	67 6e                	outs   dx,BYTE PTR ds:[si]
     bfd:	75 2f                	jne    c2e <sysEnter_Vector-0x12f3d2>
     bff:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c04:	2f                   	das    
     c05:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c0c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c0f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c13:	65 00 00             	add    BYTE PTR gs:[eax],al
     c16:	6d                   	ins    DWORD PTR es:[edi],dx
     c17:	6d                   	ins    DWORD PTR es:[edi],dx
     c18:	61                   	popa   
     c19:	70 2e                	jo     c49 <sysEnter_Vector-0x12f3b7>
     c1b:	63 00                	arpl   WORD PTR [eax],ax
     c1d:	01 00                	add    DWORD PTR [eax],eax
     c1f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c22:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c29:	63 
     c2a:	2e                   	cs
     c2b:	68 00 02 00 00       	push   0x200
     c30:	73 74                	jae    ca6 <sysEnter_Vector-0x12f35a>
     c32:	64                   	fs
     c33:	64                   	fs
     c34:	65                   	gs
     c35:	66                   	data16
     c36:	2e                   	cs
     c37:	68 00 02 00 00       	push   0x200
     c3c:	74 79                	je     cb7 <sysEnter_Vector-0x12f349>
     c3e:	70 65                	jo     ca5 <sysEnter_Vector-0x12f35b>
     c40:	73 2e                	jae    c70 <sysEnter_Vector-0x12f390>
     c42:	68 00 03 00 00       	push   0x300
     c47:	6d                   	ins    DWORD PTR es:[edi],dx
     c48:	61                   	popa   
     c49:	6c                   	ins    BYTE PTR es:[edi],dx
     c4a:	6c                   	ins    BYTE PTR es:[edi],dx
     c4b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c4c:	63 2e                	arpl   WORD PTR [esi],bp
     c4e:	68 00 03 00 00       	push   0x300
     c53:	6c                   	ins    BYTE PTR es:[edi],dx
     c54:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c5b:	4f                   	dec    edi
     c5c:	53                   	push   ebx
     c5d:	2e                   	cs
     c5e:	68 00 03 00 00       	push   0x300
     c63:	00 00                	add    BYTE PTR [eax],al
     c65:	05 02 54 14 00       	add    eax,0x145402
     c6a:	30 03                	xor    BYTE PTR [ebx],al
     c6c:	09 01                	or     DWORD PTR [ecx],eax
     c6e:	c9                   	leave  
     c6f:	59                   	pop    ecx
     c70:	02 02                	add    al,BYTE PTR [edx]
     c72:	00 01                	add    BYTE PTR [ecx],al
     c74:	01 fa                	add    edx,edi
     c76:	00 00                	add    BYTE PTR [eax],al
     c78:	00 02                	add    BYTE PTR [edx],al
     c7a:	00 d8                	add    al,bl
     c7c:	00 00                	add    BYTE PTR [eax],al
     c7e:	00 01                	add    BYTE PTR [ecx],al
     c80:	01 fb                	add    ebx,edi
     c82:	0e                   	push   cs
     c83:	0d 00 01 01 01       	or     eax,0x1010100
     c88:	01 00                	add    DWORD PTR [eax],eax
     c8a:	00 00                	add    BYTE PTR [eax],al
     c8c:	01 00                	add    DWORD PTR [eax],eax
     c8e:	00 01                	add    BYTE PTR [ecx],al
     c90:	73 72                	jae    d04 <sysEnter_Vector-0x12f2fc>
     c92:	63 00                	arpl   WORD PTR [eax],ax
     c94:	2f                   	das    
     c95:	68 6f 6d 65 2f       	push   0x2f656d6f
     c9a:	79 6f                	jns    d0b <sysEnter_Vector-0x12f2f5>
     c9c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ca3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ca6:	73 73                	jae    d1b <sysEnter_Vector-0x12f2e5>
     ca8:	2f                   	das    
     ca9:	6c                   	ins    BYTE PTR es:[edi],dx
     caa:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cb1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cb7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cbd:	78 2d                	js     cec <sysEnter_Vector-0x12f314>
     cbf:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cc1:	75 2f                	jne    cf2 <sysEnter_Vector-0x12f30e>
     cc3:	35 2e 33 2e 30       	xor    eax,0x302e332e
     cc8:	2f                   	das    
     cc9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cd0:	00 2e                	add    BYTE PTR [esi],ch
     cd2:	2e                   	cs
     cd3:	2f                   	das    
     cd4:	2e                   	cs
     cd5:	2e                   	cs
     cd6:	2f                   	das    
     cd7:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     cdb:	6a 2f                	push   0x2f
     cdd:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     ce0:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     ce7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ce8:	65                   	gs
     ce9:	6c                   	ins    BYTE PTR es:[edi],dx
     cea:	2f                   	das    
     ceb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cf2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     cf5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     cf9:	65 00 00             	add    BYTE PTR gs:[eax],al
     cfc:	73 74                	jae    d72 <sysEnter_Vector-0x12f28e>
     cfe:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     d05:	00 
     d06:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d09:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d10:	63 
     d11:	2e                   	cs
     d12:	68 00 02 00 00       	push   0x200
     d17:	73 74                	jae    d8d <sysEnter_Vector-0x12f273>
     d19:	64                   	fs
     d1a:	64                   	fs
     d1b:	65                   	gs
     d1c:	66                   	data16
     d1d:	2e                   	cs
     d1e:	68 00 02 00 00       	push   0x200
     d23:	64                   	fs
     d24:	6c                   	ins    BYTE PTR es:[edi],dx
     d25:	6c                   	ins    BYTE PTR es:[edi],dx
     d26:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
     d2d:	00 00                	add    BYTE PTR [eax],al
     d2f:	73 74                	jae    da5 <sysEnter_Vector-0x12f25b>
     d31:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
     d38:	00 
     d39:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     d3c:	6c                   	ins    BYTE PTR es:[edi],dx
     d3d:	6c                   	ins    BYTE PTR es:[edi],dx
     d3e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d3f:	63 2e                	arpl   WORD PTR [esi],bp
     d41:	68 00 04 00 00       	push   0x400
     d46:	6c                   	ins    BYTE PTR es:[edi],dx
     d47:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d4e:	4f                   	dec    edi
     d4f:	53                   	push   ebx
     d50:	2e                   	cs
     d51:	68 00 04 00 00       	push   0x400
     d56:	00 00                	add    BYTE PTR [eax],al
     d58:	05 02 68 14 00       	add    eax,0x146802
     d5d:	30 03                	xor    BYTE PTR [ebx],al
     d5f:	c3                   	ret    
     d60:	00 01                	add    BYTE PTR [ecx],al
     d62:	08 22                	or     BYTE PTR [edx],ah
     d64:	76 08                	jbe    d6e <sysEnter_Vector-0x12f292>
     d66:	31 d7                	xor    edi,edx
     d68:	d7                   	xlat   BYTE PTR ds:[ebx]
     d69:	d7                   	xlat   BYTE PTR ds:[ebx]
     d6a:	d7                   	xlat   BYTE PTR ds:[ebx]
     d6b:	ad                   	lods   eax,DWORD PTR ds:[esi]
     d6c:	e6 21                	out    0x21,al
     d6e:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     d74:	00 00                	add    BYTE PTR [eax],al
     d76:	00 02                	add    BYTE PTR [edx],al
     d78:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     d7f:	fb                   	sti    
     d80:	0e                   	push   cs
     d81:	0d 00 01 01 01       	or     eax,0x1010100
     d86:	01 00                	add    DWORD PTR [eax],eax
     d88:	00 00                	add    BYTE PTR [eax],al
     d8a:	01 00                	add    DWORD PTR [eax],eax
     d8c:	00 01                	add    BYTE PTR [ecx],al
     d8e:	73 72                	jae    e02 <sysEnter_Vector-0x12f1fe>
     d90:	63 2f                	arpl   WORD PTR [edi],bp
     d92:	73 74                	jae    e08 <sysEnter_Vector-0x12f1f8>
     d94:	72 69                	jb     dff <sysEnter_Vector-0x12f201>
     d96:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d97:	67 73 00             	addr16 jae d9a <sysEnter_Vector-0x12f266>
     d9a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     da1:	00 2f                	add    BYTE PTR [edi],ch
     da3:	68 6f 6d 65 2f       	push   0x2f656d6f
     da8:	79 6f                	jns    e19 <sysEnter_Vector-0x12f1e7>
     daa:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     db1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     db4:	73 73                	jae    e29 <sysEnter_Vector-0x12f1d7>
     db6:	2f                   	das    
     db7:	6c                   	ins    BYTE PTR es:[edi],dx
     db8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     dbf:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     dc5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     dcb:	78 2d                	js     dfa <sysEnter_Vector-0x12f206>
     dcd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     dcf:	75 2f                	jne    e00 <sysEnter_Vector-0x12f200>
     dd1:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dd6:	2f                   	das    
     dd7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     dde:	00 00                	add    BYTE PTR [eax],al
     de0:	73 74                	jae    e56 <sysEnter_Vector-0x12f1aa>
     de2:	72 63                	jb     e47 <sysEnter_Vector-0x12f1b9>
     de4:	61                   	popa   
     de5:	74 2e                	je     e15 <sysEnter_Vector-0x12f1eb>
     de7:	63 00                	arpl   WORD PTR [eax],ax
     de9:	01 00                	add    DWORD PTR [eax],eax
     deb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     dee:	6c                   	ins    BYTE PTR es:[edi],dx
     def:	6c                   	ins    BYTE PTR es:[edi],dx
     df0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     df1:	63 2e                	arpl   WORD PTR [esi],bp
     df3:	68 00 02 00 00       	push   0x200
     df8:	6c                   	ins    BYTE PTR es:[edi],dx
     df9:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e00:	4f                   	dec    edi
     e01:	53                   	push   ebx
     e02:	2e                   	cs
     e03:	68 00 02 00 00       	push   0x200
     e08:	73 74                	jae    e7e <sysEnter_Vector-0x12f182>
     e0a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e11:	63 
     e12:	2e                   	cs
     e13:	68 00 03 00 00       	push   0x300
     e18:	00 00                	add    BYTE PTR [eax],al
     e1a:	05 02 ec 14 00       	add    eax,0x14ec02
     e1f:	30 03                	xor    BYTE PTR [ebx],al
     e21:	1d 01 08 21 02       	sbb    eax,0x2210801
     e26:	24 13                	and    al,0x13
     e28:	3d 5b 08 21 02       	cmp    eax,0x221085b
     e2d:	24 13                	and    al,0x13
     e2f:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     e34:	49                   	dec    ecx
     e35:	e8 76 2f 08 4b       	call   4b083db0 <ticksToWait+0x1b07f9c0>
     e3a:	4b                   	dec    ebx
     e3b:	47                   	inc    edi
     e3c:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     e43:	bb 00 00 00 02       	mov    ebx,0x2000000
     e48:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     e4f:	fb                   	sti    
     e50:	0e                   	push   cs
     e51:	0d 00 01 01 01       	or     eax,0x1010100
     e56:	01 00                	add    DWORD PTR [eax],eax
     e58:	00 00                	add    BYTE PTR [eax],al
     e5a:	01 00                	add    DWORD PTR [eax],eax
     e5c:	00 01                	add    BYTE PTR [ecx],al
     e5e:	73 72                	jae    ed2 <sysEnter_Vector-0x12f12e>
     e60:	63 2f                	arpl   WORD PTR [edi],bp
     e62:	73 74                	jae    ed8 <sysEnter_Vector-0x12f128>
     e64:	72 69                	jb     ecf <sysEnter_Vector-0x12f131>
     e66:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e67:	67 73 00             	addr16 jae e6a <sysEnter_Vector-0x12f196>
     e6a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e71:	00 2f                	add    BYTE PTR [edi],ch
     e73:	68 6f 6d 65 2f       	push   0x2f656d6f
     e78:	79 6f                	jns    ee9 <sysEnter_Vector-0x12f117>
     e7a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e81:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e84:	73 73                	jae    ef9 <sysEnter_Vector-0x12f107>
     e86:	2f                   	das    
     e87:	6c                   	ins    BYTE PTR es:[edi],dx
     e88:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e8f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e95:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e9b:	78 2d                	js     eca <sysEnter_Vector-0x12f136>
     e9d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e9f:	75 2f                	jne    ed0 <sysEnter_Vector-0x12f130>
     ea1:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ea6:	2f                   	das    
     ea7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     eae:	00 00                	add    BYTE PTR [eax],al
     eb0:	73 74                	jae    f26 <sysEnter_Vector-0x12f0da>
     eb2:	72 63                	jb     f17 <sysEnter_Vector-0x12f0e9>
     eb4:	6d                   	ins    DWORD PTR es:[edi],dx
     eb5:	70 2e                	jo     ee5 <sysEnter_Vector-0x12f11b>
     eb7:	63 00                	arpl   WORD PTR [eax],ax
     eb9:	01 00                	add    DWORD PTR [eax],eax
     ebb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     ebe:	6c                   	ins    BYTE PTR es:[edi],dx
     ebf:	6c                   	ins    BYTE PTR es:[edi],dx
     ec0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ec1:	63 2e                	arpl   WORD PTR [esi],bp
     ec3:	68 00 02 00 00       	push   0x200
     ec8:	6c                   	ins    BYTE PTR es:[edi],dx
     ec9:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ed0:	4f                   	dec    edi
     ed1:	53                   	push   ebx
     ed2:	2e                   	cs
     ed3:	68 00 02 00 00       	push   0x200
     ed8:	73 74                	jae    f4e <sysEnter_Vector-0x12f0b2>
     eda:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ee1:	63 
     ee2:	2e                   	cs
     ee3:	68 00 03 00 00       	push   0x300
     ee8:	00 00                	add    BYTE PTR [eax],al
     eea:	05 02 d8 15 00       	add    eax,0x15d802
     eef:	30 03                	xor    BYTE PTR [ebx],al
     ef1:	18 01                	sbb    BYTE PTR [ecx],al
     ef3:	08 21                	or     BYTE PTR [ecx],ah
     ef5:	3d 41 ad ad 67       	cmp    eax,0x67adad41
     efa:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
     f00:	01 01                	add    DWORD PTR [ecx],eax
     f02:	dc 00                	fadd   QWORD PTR [eax]
     f04:	00 00                	add    BYTE PTR [eax],al
     f06:	02 00                	add    al,BYTE PTR [eax]
     f08:	9c                   	pushf  
     f09:	00 00                	add    BYTE PTR [eax],al
     f0b:	00 01                	add    BYTE PTR [ecx],al
     f0d:	01 fb                	add    ebx,edi
     f0f:	0e                   	push   cs
     f10:	0d 00 01 01 01       	or     eax,0x1010100
     f15:	01 00                	add    DWORD PTR [eax],eax
     f17:	00 00                	add    BYTE PTR [eax],al
     f19:	01 00                	add    DWORD PTR [eax],eax
     f1b:	00 01                	add    BYTE PTR [ecx],al
     f1d:	73 72                	jae    f91 <sysEnter_Vector-0x12f06f>
     f1f:	63 2f                	arpl   WORD PTR [edi],bp
     f21:	73 74                	jae    f97 <sysEnter_Vector-0x12f069>
     f23:	72 69                	jb     f8e <sysEnter_Vector-0x12f072>
     f25:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f26:	67 73 00             	addr16 jae f29 <sysEnter_Vector-0x12f0d7>
     f29:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f30:	00 2f                	add    BYTE PTR [edi],ch
     f32:	68 6f 6d 65 2f       	push   0x2f656d6f
     f37:	79 6f                	jns    fa8 <sysEnter_Vector-0x12f058>
     f39:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f40:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f43:	73 73                	jae    fb8 <sysEnter_Vector-0x12f048>
     f45:	2f                   	das    
     f46:	6c                   	ins    BYTE PTR es:[edi],dx
     f47:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f4e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f54:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f5a:	78 2d                	js     f89 <sysEnter_Vector-0x12f077>
     f5c:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f5e:	75 2f                	jne    f8f <sysEnter_Vector-0x12f071>
     f60:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f65:	2f                   	das    
     f66:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f6d:	00 00                	add    BYTE PTR [eax],al
     f6f:	73 74                	jae    fe5 <sysEnter_Vector-0x12f01b>
     f71:	72 63                	jb     fd6 <sysEnter_Vector-0x12f02a>
     f73:	70 79                	jo     fee <sysEnter_Vector-0x12f012>
     f75:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f78:	01 00                	add    DWORD PTR [eax],eax
     f7a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     f7d:	6c                   	ins    BYTE PTR es:[edi],dx
     f7e:	6c                   	ins    BYTE PTR es:[edi],dx
     f7f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f80:	63 2e                	arpl   WORD PTR [esi],bp
     f82:	68 00 02 00 00       	push   0x200
     f87:	6c                   	ins    BYTE PTR es:[edi],dx
     f88:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     f8f:	4f                   	dec    edi
     f90:	53                   	push   ebx
     f91:	2e                   	cs
     f92:	68 00 02 00 00       	push   0x200
     f97:	73 74                	jae    100d <sysEnter_Vector-0x12eff3>
     f99:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     fa0:	63 
     fa1:	2e                   	cs
     fa2:	68 00 03 00 00       	push   0x300
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	05 02 38 16 00       	add    eax,0x163802
     fae:	30 16                	xor    BYTE PTR [esi],dl
     fb0:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
     fb4:	04 01                	add    al,0x1
     fb6:	06                   	push   es
     fb7:	20 06                	and    BYTE PTR [esi],al
     fb9:	08 ca                	or     dl,cl
     fbb:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
     fc1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     fc4:	06                   	push   es
     fc5:	20 06                	and    BYTE PTR [esi],al
     fc7:	08 ca                	or     dl,cl
     fc9:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
     fcf:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     fd2:	06                   	push   es
     fd3:	20 00                	and    BYTE PTR [eax],al
     fd5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     fd8:	08 c8                	or     al,cl
     fda:	06                   	push   es
     fdb:	ca 3d 02             	retf   0x23d
     fde:	02 00                	add    al,BYTE PTR [eax]
     fe0:	01 01                	add    DWORD PTR [ecx],eax
     fe2:	cb                   	retf   
     fe3:	00 00                	add    BYTE PTR [eax],al
     fe5:	00 02                	add    BYTE PTR [edx],al
     fe7:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
     fed:	01 fb                	add    ebx,edi
     fef:	0e                   	push   cs
     ff0:	0d 00 01 01 01       	or     eax,0x1010100
     ff5:	01 00                	add    DWORD PTR [eax],eax
     ff7:	00 00                	add    BYTE PTR [eax],al
     ff9:	01 00                	add    DWORD PTR [eax],eax
     ffb:	00 01                	add    BYTE PTR [ecx],al
     ffd:	73 72                	jae    1071 <sysEnter_Vector-0x12ef8f>
     fff:	63 2f                	arpl   WORD PTR [edi],bp
    1001:	73 74                	jae    1077 <sysEnter_Vector-0x12ef89>
    1003:	72 69                	jb     106e <sysEnter_Vector-0x12ef92>
    1005:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1006:	67 73 00             	addr16 jae 1009 <sysEnter_Vector-0x12eff7>
    1009:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1010:	00 2f                	add    BYTE PTR [edi],ch
    1012:	68 6f 6d 65 2f       	push   0x2f656d6f
    1017:	79 6f                	jns    1088 <sysEnter_Vector-0x12ef78>
    1019:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1020:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1023:	73 73                	jae    1098 <sysEnter_Vector-0x12ef68>
    1025:	2f                   	das    
    1026:	6c                   	ins    BYTE PTR es:[edi],dx
    1027:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    102e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1034:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    103a:	78 2d                	js     1069 <sysEnter_Vector-0x12ef97>
    103c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    103e:	75 2f                	jne    106f <sysEnter_Vector-0x12ef91>
    1040:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1045:	2f                   	das    
    1046:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    104d:	00 00                	add    BYTE PTR [eax],al
    104f:	73 74                	jae    10c5 <sysEnter_Vector-0x12ef3b>
    1051:	72 69                	jb     10bc <sysEnter_Vector-0x12ef44>
    1053:	73 6e                	jae    10c3 <sysEnter_Vector-0x12ef3d>
    1055:	75 6d                	jne    10c4 <sysEnter_Vector-0x12ef3c>
    1057:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    105a:	01 00                	add    DWORD PTR [eax],eax
    105c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    105f:	6c                   	ins    BYTE PTR es:[edi],dx
    1060:	6c                   	ins    BYTE PTR es:[edi],dx
    1061:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1062:	63 2e                	arpl   WORD PTR [esi],bp
    1064:	68 00 02 00 00       	push   0x200
    1069:	6c                   	ins    BYTE PTR es:[edi],dx
    106a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1071:	4f                   	dec    edi
    1072:	53                   	push   ebx
    1073:	2e                   	cs
    1074:	68 00 02 00 00       	push   0x200
    1079:	73 74                	jae    10ef <sysEnter_Vector-0x12ef11>
    107b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1082:	63 
    1083:	2e                   	cs
    1084:	68 00 03 00 00       	push   0x300
    1089:	00 00                	add    BYTE PTR [eax],al
    108b:	05 02 00 17 00       	add    eax,0x170002
    1090:	30 1a                	xor    BYTE PTR [edx],bl
    1092:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1095:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1098:	06                   	push   es
    1099:	66                   	data16
    109a:	00 02                	add    BYTE PTR [edx],al
    109c:	04 02                	add    al,0x2
    109e:	66 06                	pushw  es
    10a0:	75 59                	jne    10fb <sysEnter_Vector-0x12ef05>
    10a2:	31 f3                	xor    ebx,esi
    10a4:	76 2f                	jbe    10d5 <sysEnter_Vector-0x12ef2b>
    10a6:	08 e5                	or     ch,ah
    10a8:	72 08                	jb     10b2 <sysEnter_Vector-0x12ef4e>
    10aa:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    10ad:	02 00                	add    al,BYTE PTR [eax]
    10af:	01 01                	add    DWORD PTR [ecx],eax
    10b1:	94                   	xchg   esp,eax
    10b2:	00 00                	add    BYTE PTR [eax],al
    10b4:	00 02                	add    BYTE PTR [edx],al
    10b6:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    10ba:	00 01                	add    BYTE PTR [ecx],al
    10bc:	01 fb                	add    ebx,edi
    10be:	0e                   	push   cs
    10bf:	0d 00 01 01 01       	or     eax,0x1010100
    10c4:	01 00                	add    DWORD PTR [eax],eax
    10c6:	00 00                	add    BYTE PTR [eax],al
    10c8:	01 00                	add    DWORD PTR [eax],eax
    10ca:	00 01                	add    BYTE PTR [ecx],al
    10cc:	73 72                	jae    1140 <sysEnter_Vector-0x12eec0>
    10ce:	63 2f                	arpl   WORD PTR [edi],bp
    10d0:	73 74                	jae    1146 <sysEnter_Vector-0x12eeba>
    10d2:	72 69                	jb     113d <sysEnter_Vector-0x12eec3>
    10d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10d5:	67 73 00             	addr16 jae 10d8 <sysEnter_Vector-0x12ef28>
    10d8:	2f                   	das    
    10d9:	68 6f 6d 65 2f       	push   0x2f656d6f
    10de:	79 6f                	jns    114f <sysEnter_Vector-0x12eeb1>
    10e0:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    10e7:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    10ea:	73 73                	jae    115f <sysEnter_Vector-0x12eea1>
    10ec:	2f                   	das    
    10ed:	6c                   	ins    BYTE PTR es:[edi],dx
    10ee:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10f5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10fb:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1101:	78 2d                	js     1130 <sysEnter_Vector-0x12eed0>
    1103:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1105:	75 2f                	jne    1136 <sysEnter_Vector-0x12eeca>
    1107:	35 2e 33 2e 30       	xor    eax,0x302e332e
    110c:	2f                   	das    
    110d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1114:	00 00                	add    BYTE PTR [eax],al
    1116:	73 74                	jae    118c <sysEnter_Vector-0x12ee74>
    1118:	72 6c                	jb     1186 <sysEnter_Vector-0x12ee7a>
    111a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    111c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    111f:	01 00                	add    DWORD PTR [eax],eax
    1121:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1124:	64                   	fs
    1125:	64                   	fs
    1126:	65                   	gs
    1127:	66                   	data16
    1128:	2e                   	cs
    1129:	68 00 02 00 00       	push   0x200
    112e:	00 00                	add    BYTE PTR [eax],al
    1130:	05 02 8c 17 00       	add    eax,0x178c02
    1135:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
    1138:	75 2f                	jne    1169 <sysEnter_Vector-0x12ee97>
    113a:	49                   	dec    ecx
    113b:	e6 3d                	out    0x3d,al
    113d:	30 f3                	xor    bl,dh
    113f:	75 2f                	jne    1170 <sysEnter_Vector-0x12ee90>
    1141:	49                   	dec    ecx
    1142:	e6 3d                	out    0x3d,al
    1144:	02 02                	add    al,BYTE PTR [edx]
    1146:	00 01                	add    BYTE PTR [ecx],al
    1148:	01 c1                	add    ecx,eax
    114a:	00 00                	add    BYTE PTR [eax],al
    114c:	00 02                	add    BYTE PTR [edx],al
    114e:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1151:	00 00                	add    BYTE PTR [eax],al
    1153:	01 01                	add    DWORD PTR [ecx],eax
    1155:	fb                   	sti    
    1156:	0e                   	push   cs
    1157:	0d 00 01 01 01       	or     eax,0x1010100
    115c:	01 00                	add    DWORD PTR [eax],eax
    115e:	00 00                	add    BYTE PTR [eax],al
    1160:	01 00                	add    DWORD PTR [eax],eax
    1162:	00 01                	add    BYTE PTR [ecx],al
    1164:	73 72                	jae    11d8 <sysEnter_Vector-0x12ee28>
    1166:	63 2f                	arpl   WORD PTR [edi],bp
    1168:	73 74                	jae    11de <sysEnter_Vector-0x12ee22>
    116a:	72 69                	jb     11d5 <sysEnter_Vector-0x12ee2b>
    116c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    116d:	67 73 00             	addr16 jae 1170 <sysEnter_Vector-0x12ee90>
    1170:	2f                   	das    
    1171:	68 6f 6d 65 2f       	push   0x2f656d6f
    1176:	79 6f                	jns    11e7 <sysEnter_Vector-0x12ee19>
    1178:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    117f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1182:	73 73                	jae    11f7 <sysEnter_Vector-0x12ee09>
    1184:	2f                   	das    
    1185:	6c                   	ins    BYTE PTR es:[edi],dx
    1186:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    118d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1193:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1199:	78 2d                	js     11c8 <sysEnter_Vector-0x12ee38>
    119b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    119d:	75 2f                	jne    11ce <sysEnter_Vector-0x12ee32>
    119f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11a4:	2f                   	das    
    11a5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11ac:	00 00                	add    BYTE PTR [eax],al
    11ae:	73 74                	jae    1224 <sysEnter_Vector-0x12eddc>
    11b0:	72 6e                	jb     1220 <sysEnter_Vector-0x12ede0>
    11b2:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    11b5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    11b8:	01 00                	add    DWORD PTR [eax],eax
    11ba:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    11bd:	64                   	fs
    11be:	64                   	fs
    11bf:	65                   	gs
    11c0:	66                   	data16
    11c1:	2e                   	cs
    11c2:	68 00 02 00 00       	push   0x200
    11c7:	00 00                	add    BYTE PTR [eax],al
    11c9:	05 02 f0 17 00       	add    eax,0x17f002
    11ce:	30 03                	xor    BYTE PTR [ebx],al
    11d0:	0c 01                	or     al,0x1
    11d2:	c9                   	leave  
    11d3:	2f                   	das    
    11d4:	f3 00 02             	repz add BYTE PTR [edx],al
    11d7:	04 01                	add    al,0x1
    11d9:	06                   	push   es
    11da:	f2 00 02             	repnz add BYTE PTR [edx],al
    11dd:	04 02                	add    al,0x2
    11df:	74 06                	je     11e7 <sysEnter_Vector-0x12ee19>
    11e1:	75 9f                	jne    1182 <sysEnter_Vector-0x12ee7e>
    11e3:	70 00                	jo     11e5 <sysEnter_Vector-0x12ee1b>
    11e5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11e8:	06                   	push   es
    11e9:	ba 06 6b 59 31       	mov    edx,0x31596b06
    11ee:	c9                   	leave  
    11ef:	2f                   	das    
    11f0:	f3 00 02             	repz add BYTE PTR [edx],al
    11f3:	04 01                	add    al,0x1
    11f5:	06                   	push   es
    11f6:	f2 00 02             	repnz add BYTE PTR [edx],al
    11f9:	04 02                	add    al,0x2
    11fb:	74 06                	je     1203 <sysEnter_Vector-0x12edfd>
    11fd:	75 9f                	jne    119e <sysEnter_Vector-0x12ee62>
    11ff:	70 00                	jo     1201 <sysEnter_Vector-0x12edff>
    1201:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1204:	06                   	push   es
    1205:	ba 06 6b 59 02       	mov    edx,0x2596b06
    120a:	02 00                	add    al,BYTE PTR [eax]
    120c:	01 01                	add    DWORD PTR [ecx],eax
    120e:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1213:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1216:	00 00                	add    BYTE PTR [eax],al
    1218:	01 01                	add    DWORD PTR [ecx],eax
    121a:	fb                   	sti    
    121b:	0e                   	push   cs
    121c:	0d 00 01 01 01       	or     eax,0x1010100
    1221:	01 00                	add    DWORD PTR [eax],eax
    1223:	00 00                	add    BYTE PTR [eax],al
    1225:	01 00                	add    DWORD PTR [eax],eax
    1227:	00 01                	add    BYTE PTR [ecx],al
    1229:	73 72                	jae    129d <sysEnter_Vector-0x12ed63>
    122b:	63 2f                	arpl   WORD PTR [edi],bp
    122d:	73 74                	jae    12a3 <sysEnter_Vector-0x12ed5d>
    122f:	72 69                	jb     129a <sysEnter_Vector-0x12ed66>
    1231:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1232:	67 73 00             	addr16 jae 1235 <sysEnter_Vector-0x12edcb>
    1235:	2f                   	das    
    1236:	68 6f 6d 65 2f       	push   0x2f656d6f
    123b:	79 6f                	jns    12ac <sysEnter_Vector-0x12ed54>
    123d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1244:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1247:	73 73                	jae    12bc <sysEnter_Vector-0x12ed44>
    1249:	2f                   	das    
    124a:	6c                   	ins    BYTE PTR es:[edi],dx
    124b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1252:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1258:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    125e:	78 2d                	js     128d <sysEnter_Vector-0x12ed73>
    1260:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1262:	75 2f                	jne    1293 <sysEnter_Vector-0x12ed6d>
    1264:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1269:	2f                   	das    
    126a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1271:	00 00                	add    BYTE PTR [eax],al
    1273:	73 74                	jae    12e9 <sysEnter_Vector-0x12ed17>
    1275:	72 6e                	jb     12e5 <sysEnter_Vector-0x12ed1b>
    1277:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    127a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    127d:	01 00                	add    DWORD PTR [eax],eax
    127f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1282:	64                   	fs
    1283:	64                   	fs
    1284:	65                   	gs
    1285:	66                   	data16
    1286:	2e                   	cs
    1287:	68 00 02 00 00       	push   0x200
    128c:	00 00                	add    BYTE PTR [eax],al
    128e:	05 02 c0 18 00       	add    eax,0x18c002
    1293:	30 03                	xor    BYTE PTR [ebx],al
    1295:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    129a:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    129d:	00 02                	add    BYTE PTR [edx],al
    129f:	04 01                	add    al,0x1
    12a1:	06                   	push   es
    12a2:	66 06                	pushw  es
    12a4:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    12a9:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    12ae:	02 02                	add    al,BYTE PTR [edx]
    12b0:	00 01                	add    BYTE PTR [ecx],al
    12b2:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    12b5:	00 00                	add    BYTE PTR [eax],al
    12b7:	02 00                	add    al,BYTE PTR [eax]
    12b9:	9c                   	pushf  
    12ba:	00 00                	add    BYTE PTR [eax],al
    12bc:	00 01                	add    BYTE PTR [ecx],al
    12be:	01 fb                	add    ebx,edi
    12c0:	0e                   	push   cs
    12c1:	0d 00 01 01 01       	or     eax,0x1010100
    12c6:	01 00                	add    DWORD PTR [eax],eax
    12c8:	00 00                	add    BYTE PTR [eax],al
    12ca:	01 00                	add    DWORD PTR [eax],eax
    12cc:	00 01                	add    BYTE PTR [ecx],al
    12ce:	73 72                	jae    1342 <sysEnter_Vector-0x12ecbe>
    12d0:	63 2f                	arpl   WORD PTR [edi],bp
    12d2:	73 74                	jae    1348 <sysEnter_Vector-0x12ecb8>
    12d4:	72 69                	jb     133f <sysEnter_Vector-0x12ecc1>
    12d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12d7:	67 73 00             	addr16 jae 12da <sysEnter_Vector-0x12ed26>
    12da:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12e1:	00 2f                	add    BYTE PTR [edi],ch
    12e3:	68 6f 6d 65 2f       	push   0x2f656d6f
    12e8:	79 6f                	jns    1359 <sysEnter_Vector-0x12eca7>
    12ea:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    12f1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    12f4:	73 73                	jae    1369 <sysEnter_Vector-0x12ec97>
    12f6:	2f                   	das    
    12f7:	6c                   	ins    BYTE PTR es:[edi],dx
    12f8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    12ff:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1305:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    130b:	78 2d                	js     133a <sysEnter_Vector-0x12ecc6>
    130d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    130f:	75 2f                	jne    1340 <sysEnter_Vector-0x12ecc0>
    1311:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1316:	2f                   	das    
    1317:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    131e:	00 00                	add    BYTE PTR [eax],al
    1320:	73 74                	jae    1396 <sysEnter_Vector-0x12ec6a>
    1322:	72 6f                	jb     1393 <sysEnter_Vector-0x12ec6d>
    1324:	75 6c                	jne    1392 <sysEnter_Vector-0x12ec6e>
    1326:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1329:	01 00                	add    DWORD PTR [eax],eax
    132b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    132e:	6c                   	ins    BYTE PTR es:[edi],dx
    132f:	6c                   	ins    BYTE PTR es:[edi],dx
    1330:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1331:	63 2e                	arpl   WORD PTR [esi],bp
    1333:	68 00 02 00 00       	push   0x200
    1338:	6c                   	ins    BYTE PTR es:[edi],dx
    1339:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1340:	4f                   	dec    edi
    1341:	53                   	push   ebx
    1342:	2e                   	cs
    1343:	68 00 02 00 00       	push   0x200
    1348:	73 74                	jae    13be <sysEnter_Vector-0x12ec42>
    134a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1351:	63 
    1352:	2e                   	cs
    1353:	68 00 03 00 00       	push   0x300
    1358:	00 00                	add    BYTE PTR [eax],al
    135a:	05 02 40 19 00       	add    eax,0x194002
    135f:	30 03                	xor    BYTE PTR [ebx],al
    1361:	3b 01                	cmp    eax,DWORD PTR [ecx]
    1363:	08 2f                	or     BYTE PTR [edi],ch
    1365:	40                   	inc    eax
    1366:	00 02                	add    BYTE PTR [edx],al
    1368:	04 01                	add    al,0x1
    136a:	7a 00                	jp     136c <sysEnter_Vector-0x12ec94>
    136c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    136f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1370:	59                   	pop    ecx
    1371:	59                   	pop    ecx
    1372:	75 c9                	jne    133d <sysEnter_Vector-0x12ecc3>
    1374:	59                   	pop    ecx
    1375:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1376:	00 02                	add    BYTE PTR [edx],al
    1378:	04 02                	add    al,0x2
    137a:	06                   	push   es
    137b:	66                   	data16
    137c:	00 02                	add    BYTE PTR [edx],al
    137e:	04 03                	add    al,0x3
    1380:	66 06                	pushw  es
    1382:	59                   	pop    ecx
    1383:	00 02                	add    BYTE PTR [edx],al
    1385:	04 01                	add    al,0x1
    1387:	06                   	push   es
    1388:	74 06                	je     1390 <sysEnter_Vector-0x12ec70>
    138a:	75 91                	jne    131d <sysEnter_Vector-0x12ece3>
    138c:	3d 76 67 00 02       	cmp    eax,0x2006776
    1391:	04 01                	add    al,0x1
    1393:	06                   	push   es
    1394:	58                   	pop    eax
    1395:	00 02                	add    BYTE PTR [edx],al
    1397:	04 02                	add    al,0x2
    1399:	74 00                	je     139b <sysEnter_Vector-0x12ec65>
    139b:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    139e:	58                   	pop    eax
    139f:	06                   	push   es
    13a0:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    13a5:	9f                   	lahf   
    13a6:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    13aa:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13ad:	06                   	push   es
    13ae:	58                   	pop    eax
    13af:	00 02                	add    BYTE PTR [edx],al
    13b1:	04 03                	add    al,0x3
    13b3:	58                   	pop    eax
    13b4:	00 02                	add    BYTE PTR [edx],al
    13b6:	04 04                	add    al,0x4
    13b8:	74 00                	je     13ba <sysEnter_Vector-0x12ec46>
    13ba:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    13bd:	58                   	pop    eax
    13be:	06                   	push   es
    13bf:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    13c2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13c5:	06                   	push   es
    13c6:	66                   	data16
    13c7:	00 02                	add    BYTE PTR [edx],al
    13c9:	04 02                	add    al,0x2
    13cb:	58                   	pop    eax
    13cc:	00 02                	add    BYTE PTR [edx],al
    13ce:	04 03                	add    al,0x3
    13d0:	58                   	pop    eax
    13d1:	06                   	push   es
    13d2:	67 76 59             	addr16 jbe 142e <sysEnter_Vector-0x12ebd2>
    13d5:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    13d9:	03 10                	add    edx,DWORD PTR [eax]
    13db:	ac                   	lods   al,BYTE PTR ds:[esi]
    13dc:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    13df:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    13e2:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    13e5:	67 2f                	addr16 das 
    13e7:	67 00 02             	add    BYTE PTR [bp+si],al
    13ea:	04 01                	add    al,0x1
    13ec:	06                   	push   es
    13ed:	66                   	data16
    13ee:	00 02                	add    BYTE PTR [edx],al
    13f0:	04 02                	add    al,0x2
    13f2:	58                   	pop    eax
    13f3:	00 02                	add    BYTE PTR [edx],al
    13f5:	04 04                	add    al,0x4
    13f7:	3c 06                	cmp    al,0x6
    13f9:	59                   	pop    ecx
    13fa:	2f                   	das    
    13fb:	02 08                	add    cl,BYTE PTR [eax]
    13fd:	00 01                	add    BYTE PTR [ecx],al
    13ff:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1402:	00 00                	add    BYTE PTR [eax],al
    1404:	02 00                	add    al,BYTE PTR [eax]
    1406:	2d 00 00 00 01       	sub    eax,0x1000000
    140b:	01 fb                	add    ebx,edi
    140d:	0e                   	push   cs
    140e:	0d 00 01 01 01       	or     eax,0x1010100
    1413:	01 00                	add    DWORD PTR [eax],eax
    1415:	00 00                	add    BYTE PTR [eax],al
    1417:	01 00                	add    DWORD PTR [eax],eax
    1419:	00 01                	add    BYTE PTR [ecx],al
    141b:	73 72                	jae    148f <sysEnter_Vector-0x12eb71>
    141d:	63 2f                	arpl   WORD PTR [edi],bp
    141f:	73 74                	jae    1495 <sysEnter_Vector-0x12eb6b>
    1421:	72 69                	jb     148c <sysEnter_Vector-0x12eb74>
    1423:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1424:	67 73 00             	addr16 jae 1427 <sysEnter_Vector-0x12ebd9>
    1427:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    142a:	72 70                	jb     149c <sysEnter_Vector-0x12eb64>
    142c:	61                   	popa   
    142d:	72 74                	jb     14a3 <sysEnter_Vector-0x12eb5d>
    142f:	73 2e                	jae    145f <sysEnter_Vector-0x12eba1>
    1431:	63 00                	arpl   WORD PTR [eax],ax
    1433:	01 00                	add    DWORD PTR [eax],eax
    1435:	00 00                	add    BYTE PTR [eax],al
    1437:	00 05 02 c0 1a 00    	add    BYTE PTR ds:0x1ac002,al
    143d:	30 13                	xor    BYTE PTR [ebx],dl
    143f:	c9                   	leave  
    1440:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1441:	3d 02 02 00 01       	cmp    eax,0x1000202
    1446:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    1449:	00 00                	add    BYTE PTR [eax],al
    144b:	02 00                	add    al,BYTE PTR [eax]
    144d:	9c                   	pushf  
    144e:	00 00                	add    BYTE PTR [eax],al
    1450:	00 01                	add    BYTE PTR [ecx],al
    1452:	01 fb                	add    ebx,edi
    1454:	0e                   	push   cs
    1455:	0d 00 01 01 01       	or     eax,0x1010100
    145a:	01 00                	add    DWORD PTR [eax],eax
    145c:	00 00                	add    BYTE PTR [eax],al
    145e:	01 00                	add    DWORD PTR [eax],eax
    1460:	00 01                	add    BYTE PTR [ecx],al
    1462:	73 72                	jae    14d6 <sysEnter_Vector-0x12eb2a>
    1464:	63 2f                	arpl   WORD PTR [edi],bp
    1466:	73 74                	jae    14dc <sysEnter_Vector-0x12eb24>
    1468:	72 69                	jb     14d3 <sysEnter_Vector-0x12eb2d>
    146a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    146b:	67 73 00             	addr16 jae 146e <sysEnter_Vector-0x12eb92>
    146e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1475:	00 2f                	add    BYTE PTR [edi],ch
    1477:	68 6f 6d 65 2f       	push   0x2f656d6f
    147c:	79 6f                	jns    14ed <sysEnter_Vector-0x12eb13>
    147e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1485:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1488:	73 73                	jae    14fd <sysEnter_Vector-0x12eb03>
    148a:	2f                   	das    
    148b:	6c                   	ins    BYTE PTR es:[edi],dx
    148c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1493:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1499:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    149f:	78 2d                	js     14ce <sysEnter_Vector-0x12eb32>
    14a1:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14a3:	75 2f                	jne    14d4 <sysEnter_Vector-0x12eb2c>
    14a5:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14aa:	2f                   	das    
    14ab:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14b2:	00 00                	add    BYTE PTR [eax],al
    14b4:	73 74                	jae    152a <sysEnter_Vector-0x12ead6>
    14b6:	72 74                	jb     152c <sysEnter_Vector-0x12ead4>
    14b8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    14b9:	6c                   	ins    BYTE PTR es:[edi],dx
    14ba:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    14bd:	01 00                	add    DWORD PTR [eax],eax
    14bf:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    14c2:	6c                   	ins    BYTE PTR es:[edi],dx
    14c3:	6c                   	ins    BYTE PTR es:[edi],dx
    14c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    14c5:	63 2e                	arpl   WORD PTR [esi],bp
    14c7:	68 00 02 00 00       	push   0x200
    14cc:	6c                   	ins    BYTE PTR es:[edi],dx
    14cd:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    14d4:	4f                   	dec    edi
    14d5:	53                   	push   ebx
    14d6:	2e                   	cs
    14d7:	68 00 02 00 00       	push   0x200
    14dc:	73 74                	jae    1552 <sysEnter_Vector-0x12eaae>
    14de:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    14e5:	63 
    14e6:	2e                   	cs
    14e7:	68 00 03 00 00       	push   0x300
    14ec:	00 00                	add    BYTE PTR [eax],al
    14ee:	05 02 e0 1a 00       	add    eax,0x1ae002
    14f3:	30 03                	xor    BYTE PTR [ebx],al
    14f5:	d7                   	xlat   BYTE PTR ds:[ebx]
    14f6:	00 01                	add    BYTE PTR [ecx],al
    14f8:	08 2f                	or     BYTE PTR [edi],ch
    14fa:	40                   	inc    eax
    14fb:	00 02                	add    BYTE PTR [edx],al
    14fd:	04 01                	add    al,0x1
    14ff:	7c 00                	jl     1501 <sysEnter_Vector-0x12eaff>
    1501:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1504:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1505:	59                   	pop    ecx
    1506:	59                   	pop    ecx
    1507:	75 c9                	jne    14d2 <sysEnter_Vector-0x12eb2e>
    1509:	59                   	pop    ecx
    150a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    150b:	00 02                	add    BYTE PTR [edx],al
    150d:	04 02                	add    al,0x2
    150f:	06                   	push   es
    1510:	66                   	data16
    1511:	00 02                	add    BYTE PTR [edx],al
    1513:	04 03                	add    al,0x3
    1515:	66 06                	pushw  es
    1517:	59                   	pop    ecx
    1518:	00 02                	add    BYTE PTR [edx],al
    151a:	04 01                	add    al,0x1
    151c:	06                   	push   es
    151d:	74 06                	je     1525 <sysEnter_Vector-0x12eadb>
    151f:	75 91                	jne    14b2 <sysEnter_Vector-0x12eb4e>
    1521:	3d 76 67 00 02       	cmp    eax,0x2006776
    1526:	04 01                	add    al,0x1
    1528:	06                   	push   es
    1529:	58                   	pop    eax
    152a:	00 02                	add    BYTE PTR [edx],al
    152c:	04 02                	add    al,0x2
    152e:	74 00                	je     1530 <sysEnter_Vector-0x12ead0>
    1530:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1533:	58                   	pop    eax
    1534:	06                   	push   es
    1535:	03 13                	add    edx,DWORD PTR [ebx]
    1537:	3c 00                	cmp    al,0x0
    1539:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    153c:	06                   	push   es
    153d:	66                   	data16
    153e:	00 02                	add    BYTE PTR [edx],al
    1540:	04 02                	add    al,0x2
    1542:	74 00                	je     1544 <sysEnter_Vector-0x12eabc>
    1544:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1547:	06                   	push   es
    1548:	59                   	pop    ecx
    1549:	00 02                	add    BYTE PTR [edx],al
    154b:	04 04                	add    al,0x4
    154d:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1553:	f3 9f                	repz lahf 
    1555:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1559:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    155c:	06                   	push   es
    155d:	58                   	pop    eax
    155e:	00 02                	add    BYTE PTR [edx],al
    1560:	04 03                	add    al,0x3
    1562:	58                   	pop    eax
    1563:	00 02                	add    BYTE PTR [edx],al
    1565:	04 04                	add    al,0x4
    1567:	74 00                	je     1569 <sysEnter_Vector-0x12ea97>
    1569:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    156c:	58                   	pop    eax
    156d:	06                   	push   es
    156e:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1571:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1574:	06                   	push   es
    1575:	66                   	data16
    1576:	00 02                	add    BYTE PTR [edx],al
    1578:	04 02                	add    al,0x2
    157a:	58                   	pop    eax
    157b:	00 02                	add    BYTE PTR [edx],al
    157d:	04 03                	add    al,0x3
    157f:	58                   	pop    eax
    1580:	06                   	push   es
    1581:	59                   	pop    ecx
    1582:	76 59                	jbe    15dd <sysEnter_Vector-0x12ea23>
    1584:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1588:	03 10                	add    edx,DWORD PTR [eax]
    158a:	ac                   	lods   al,BYTE PTR ds:[esi]
    158b:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    158e:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1591:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1594:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1597:	06                   	push   es
    1598:	66                   	data16
    1599:	00 02                	add    BYTE PTR [edx],al
    159b:	04 02                	add    al,0x2
    159d:	74 00                	je     159f <sysEnter_Vector-0x12ea61>
    159f:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    15a2:	58                   	pop    eax
    15a3:	06                   	push   es
    15a4:	4b                   	dec    ebx
    15a5:	67 2f                	addr16 das 
    15a7:	67 00 02             	add    BYTE PTR [bp+si],al
    15aa:	04 01                	add    al,0x1
    15ac:	06                   	push   es
    15ad:	66                   	data16
    15ae:	00 02                	add    BYTE PTR [edx],al
    15b0:	04 02                	add    al,0x2
    15b2:	58                   	pop    eax
    15b3:	00 02                	add    BYTE PTR [edx],al
    15b5:	04 04                	add    al,0x4
    15b7:	3c 06                	cmp    al,0x6
    15b9:	59                   	pop    ecx
    15ba:	2f                   	das    
    15bb:	02 08                	add    cl,BYTE PTR [eax]
    15bd:	00 01                	add    BYTE PTR [ecx],al
    15bf:	01 cf                	add    edi,ecx
    15c1:	00 00                	add    BYTE PTR [eax],al
    15c3:	00 02                	add    BYTE PTR [edx],al
    15c5:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    15cb:	01 fb                	add    ebx,edi
    15cd:	0e                   	push   cs
    15ce:	0d 00 01 01 01       	or     eax,0x1010100
    15d3:	01 00                	add    DWORD PTR [eax],eax
    15d5:	00 00                	add    BYTE PTR [eax],al
    15d7:	01 00                	add    DWORD PTR [eax],eax
    15d9:	00 01                	add    BYTE PTR [ecx],al
    15db:	73 72                	jae    164f <sysEnter_Vector-0x12e9b1>
    15dd:	63 2f                	arpl   WORD PTR [edi],bp
    15df:	73 74                	jae    1655 <sysEnter_Vector-0x12e9ab>
    15e1:	72 69                	jb     164c <sysEnter_Vector-0x12e9b4>
    15e3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15e4:	67 73 00             	addr16 jae 15e7 <sysEnter_Vector-0x12ea19>
    15e7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15ee:	00 2f                	add    BYTE PTR [edi],ch
    15f0:	68 6f 6d 65 2f       	push   0x2f656d6f
    15f5:	79 6f                	jns    1666 <sysEnter_Vector-0x12e99a>
    15f7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    15fe:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1601:	73 73                	jae    1676 <sysEnter_Vector-0x12e98a>
    1603:	2f                   	das    
    1604:	6c                   	ins    BYTE PTR es:[edi],dx
    1605:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    160c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1612:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1618:	78 2d                	js     1647 <sysEnter_Vector-0x12e9b9>
    161a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    161c:	75 2f                	jne    164d <sysEnter_Vector-0x12e9b3>
    161e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1623:	2f                   	das    
    1624:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    162b:	00 00                	add    BYTE PTR [eax],al
    162d:	73 74                	jae    16a3 <sysEnter_Vector-0x12e95d>
    162f:	72 74                	jb     16a5 <sysEnter_Vector-0x12e95b>
    1631:	72 69                	jb     169c <sysEnter_Vector-0x12e964>
    1633:	6d                   	ins    DWORD PTR es:[edi],dx
    1634:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1637:	01 00                	add    DWORD PTR [eax],eax
    1639:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    163c:	6c                   	ins    BYTE PTR es:[edi],dx
    163d:	6c                   	ins    BYTE PTR es:[edi],dx
    163e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    163f:	63 2e                	arpl   WORD PTR [esi],bp
    1641:	68 00 02 00 00       	push   0x200
    1646:	6c                   	ins    BYTE PTR es:[edi],dx
    1647:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    164e:	4f                   	dec    edi
    164f:	53                   	push   ebx
    1650:	2e                   	cs
    1651:	68 00 02 00 00       	push   0x200
    1656:	73 74                	jae    16cc <sysEnter_Vector-0x12e934>
    1658:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    165f:	63 
    1660:	2e                   	cs
    1661:	68 00 03 00 00       	push   0x300
    1666:	00 00                	add    BYTE PTR [eax],al
    1668:	05 02 7c 1c 00       	add    eax,0x1c7c02
    166d:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    1673:	48                   	dec    eax
    1674:	b3 08                	mov    bl,0x8
    1676:	9f                   	lahf   
    1677:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    167d:	06                   	push   es
    167e:	82                   	(bad)  
    167f:	06                   	push   es
    1680:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1681:	84 00                	test   BYTE PTR [eax],al
    1683:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1686:	06                   	push   es
    1687:	20 06                	and    BYTE PTR [esi],al
    1689:	08 ca                	or     dl,cl
    168b:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1691:	01 01                	add    DWORD PTR [ecx],eax
    1693:	c7 00 00 00 02 00    	mov    DWORD PTR [eax],0x20000
    1699:	94                   	xchg   esp,eax
    169a:	00 00                	add    BYTE PTR [eax],al
    169c:	00 01                	add    BYTE PTR [ecx],al
    169e:	01 fb                	add    ebx,edi
    16a0:	0e                   	push   cs
    16a1:	0d 00 01 01 01       	or     eax,0x1010100
    16a6:	01 00                	add    DWORD PTR [eax],eax
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	01 00                	add    DWORD PTR [eax],eax
    16ac:	00 01                	add    BYTE PTR [ecx],al
    16ae:	73 72                	jae    1722 <sysEnter_Vector-0x12e8de>
    16b0:	63 00                	arpl   WORD PTR [eax],ax
    16b2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16b9:	00 2f                	add    BYTE PTR [edi],ch
    16bb:	68 6f 6d 65 2f       	push   0x2f656d6f
    16c0:	79 6f                	jns    1731 <sysEnter_Vector-0x12e8cf>
    16c2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    16c9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    16cc:	73 73                	jae    1741 <sysEnter_Vector-0x12e8bf>
    16ce:	2f                   	das    
    16cf:	6c                   	ins    BYTE PTR es:[edi],dx
    16d0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    16d7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    16dd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    16e3:	78 2d                	js     1712 <sysEnter_Vector-0x12e8ee>
    16e5:	67 6e                	outs   dx,BYTE PTR ds:[si]
    16e7:	75 2f                	jne    1718 <sysEnter_Vector-0x12e8e8>
    16e9:	35 2e 33 2e 30       	xor    eax,0x302e332e
    16ee:	2f                   	das    
    16ef:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16f6:	00 00                	add    BYTE PTR [eax],al
    16f8:	73 74                	jae    176e <sysEnter_Vector-0x12e892>
    16fa:	72 73                	jb     176f <sysEnter_Vector-0x12e891>
    16fc:	74 72                	je     1770 <sysEnter_Vector-0x12e890>
    16fe:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1701:	01 00                	add    DWORD PTR [eax],eax
    1703:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1706:	6c                   	ins    BYTE PTR es:[edi],dx
    1707:	6c                   	ins    BYTE PTR es:[edi],dx
    1708:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1709:	63 2e                	arpl   WORD PTR [esi],bp
    170b:	68 00 02 00 00       	push   0x200
    1710:	6c                   	ins    BYTE PTR es:[edi],dx
    1711:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1718:	4f                   	dec    edi
    1719:	53                   	push   ebx
    171a:	2e                   	cs
    171b:	68 00 02 00 00       	push   0x200
    1720:	73 74                	jae    1796 <sysEnter_Vector-0x12e86a>
    1722:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1729:	63 
    172a:	2e                   	cs
    172b:	68 00 03 00 00       	push   0x300
    1730:	00 00                	add    BYTE PTR [eax],al
    1732:	05 02 34 1d 00       	add    eax,0x1d3402
    1737:	30 03                	xor    BYTE PTR [ebx],al
    1739:	33 01                	xor    eax,DWORD PTR [ecx]
    173b:	ec                   	in     al,dx
    173c:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1741:	75 5a                	jne    179d <sysEnter_Vector-0x12e863>
    1743:	08 3f                	or     BYTE PTR [edi],bh
    1745:	2c 23                	sub    al,0x23
    1747:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    174a:	1e                   	push   ds
    174b:	00 02                	add    BYTE PTR [edx],al
    174d:	04 01                	add    al,0x1
    174f:	06                   	push   es
    1750:	4a                   	dec    edx
    1751:	06                   	push   es
    1752:	03 0f                	add    ecx,DWORD PTR [edi]
    1754:	9e                   	sahf   
    1755:	59                   	pop    ecx
    1756:	4d                   	dec    ebp
    1757:	c9                   	leave  
    1758:	d7                   	xlat   BYTE PTR ds:[ebx]
    1759:	02 02                	add    al,BYTE PTR [edx]
    175b:	00 01                	add    BYTE PTR [ecx],al
    175d:	01 30                	add    DWORD PTR [eax],esi
    175f:	03 00                	add    eax,DWORD PTR [eax]
    1761:	00 02                	add    BYTE PTR [edx],al
    1763:	00 cc                	add    ah,cl
    1765:	00 00                	add    BYTE PTR [eax],al
    1767:	00 01                	add    BYTE PTR [ecx],al
    1769:	01 fb                	add    ebx,edi
    176b:	0e                   	push   cs
    176c:	0d 00 01 01 01       	or     eax,0x1010100
    1771:	01 00                	add    DWORD PTR [eax],eax
    1773:	00 00                	add    BYTE PTR [eax],al
    1775:	01 00                	add    DWORD PTR [eax],eax
    1777:	00 01                	add    BYTE PTR [ecx],al
    1779:	73 72                	jae    17ed <sysEnter_Vector-0x12e813>
    177b:	63 00                	arpl   WORD PTR [eax],ax
    177d:	2f                   	das    
    177e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1783:	79 6f                	jns    17f4 <sysEnter_Vector-0x12e80c>
    1785:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    178c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    178f:	73 73                	jae    1804 <sysEnter_Vector-0x12e7fc>
    1791:	2f                   	das    
    1792:	6c                   	ins    BYTE PTR es:[edi],dx
    1793:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    179a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17a0:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17a6:	78 2d                	js     17d5 <sysEnter_Vector-0x12e82b>
    17a8:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17aa:	75 2f                	jne    17db <sysEnter_Vector-0x12e825>
    17ac:	35 2e 33 2e 30       	xor    eax,0x302e332e
    17b1:	2f                   	das    
    17b2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17b9:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    17bc:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    17c0:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    17c3:	2e                   	cs
    17c4:	2f                   	das    
    17c5:	2e                   	cs
    17c6:	2e                   	cs
    17c7:	2f                   	das    
    17c8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    17cc:	6a 2f                	push   0x2f
    17ce:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    17d1:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    17d8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17d9:	65                   	gs
    17da:	6c                   	ins    BYTE PTR es:[edi],dx
    17db:	2f                   	das    
    17dc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17e3:	00 00                	add    BYTE PTR [eax],al
    17e5:	74 69                	je     1850 <sysEnter_Vector-0x12e7b0>
    17e7:	6d                   	ins    DWORD PTR es:[edi],dx
    17e8:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    17ec:	01 00                	add    DWORD PTR [eax],eax
    17ee:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    17f1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    17f8:	63 
    17f9:	2e                   	cs
    17fa:	68 00 02 00 00       	push   0x200
    17ff:	74 69                	je     186a <sysEnter_Vector-0x12e796>
    1801:	6d                   	ins    DWORD PTR es:[edi],dx
    1802:	65                   	gs
    1803:	2e                   	cs
    1804:	68 00 03 00 00       	push   0x300
    1809:	6d                   	ins    DWORD PTR es:[edi],dx
    180a:	61                   	popa   
    180b:	6c                   	ins    BYTE PTR es:[edi],dx
    180c:	6c                   	ins    BYTE PTR es:[edi],dx
    180d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    180e:	63 2e                	arpl   WORD PTR [esi],bp
    1810:	68 00 03 00 00       	push   0x300
    1815:	6c                   	ins    BYTE PTR es:[edi],dx
    1816:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    181d:	4f                   	dec    edi
    181e:	53                   	push   ebx
    181f:	2e                   	cs
    1820:	68 00 03 00 00       	push   0x300
    1825:	73 79                	jae    18a0 <sysEnter_Vector-0x12e760>
    1827:	73 63                	jae    188c <sysEnter_Vector-0x12e774>
    1829:	61                   	popa   
    182a:	6c                   	ins    BYTE PTR es:[edi],dx
    182b:	6c                   	ins    BYTE PTR es:[edi],dx
    182c:	73 2e                	jae    185c <sysEnter_Vector-0x12e7a4>
    182e:	68 00 04 00 00       	push   0x400
    1833:	00 00                	add    BYTE PTR [eax],al
    1835:	05 02 c0 1d 00       	add    eax,0x1dc002
    183a:	30 03                	xor    BYTE PTR [ebx],al
    183c:	16                   	push   ss
    183d:	01 08                	add    DWORD PTR [eax],ecx
    183f:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1842:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1848:	76 02                	jbe    184c <sysEnter_Vector-0x12e7b4>
    184a:	24 13                	and    al,0x13
    184c:	08 22                	or     BYTE PTR [edx],ah
    184e:	02 2e                	add    ch,BYTE PTR [esi]
    1850:	13 02                	adc    eax,DWORD PTR [edx]
    1852:	2f                   	das    
    1853:	13 08                	adc    ecx,DWORD PTR [eax]
    1855:	67 02 2d             	add    ch,BYTE PTR [di]
    1858:	13 2f                	adc    ebp,DWORD PTR [edi]
    185a:	00 02                	add    BYTE PTR [edx],al
    185c:	04 01                	add    al,0x1
    185e:	06                   	push   es
    185f:	9e                   	sahf   
    1860:	00 02                	add    BYTE PTR [edx],al
    1862:	04 04                	add    al,0x4
    1864:	02 23                	add    ah,BYTE PTR [ebx]
    1866:	12 00                	adc    al,BYTE PTR [eax]
    1868:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    186f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1872:	74 00                	je     1874 <sysEnter_Vector-0x12e78c>
    1874:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1877:	58                   	pop    eax
    1878:	00 02                	add    BYTE PTR [edx],al
    187a:	04 08                	add    al,0x8
    187c:	06                   	push   es
    187d:	3d 48 00 02 04       	cmp    eax,0x4020048
    1882:	01 06                	add    DWORD PTR [esi],eax
    1884:	9e                   	sahf   
    1885:	00 02                	add    BYTE PTR [edx],al
    1887:	04 04                	add    al,0x4
    1889:	02 23                	add    ah,BYTE PTR [ebx]
    188b:	12 00                	adc    al,BYTE PTR [eax]
    188d:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1894:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1897:	74 00                	je     1899 <sysEnter_Vector-0x12e767>
    1899:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    189c:	58                   	pop    eax
    189d:	06                   	push   es
    189e:	94                   	xchg   esp,eax
    189f:	e5 91                	in     eax,0x91
    18a1:	9f                   	lahf   
    18a2:	59                   	pop    ecx
    18a3:	00 02                	add    BYTE PTR [edx],al
    18a5:	04 01                	add    al,0x1
    18a7:	06                   	push   es
    18a8:	9e                   	sahf   
    18a9:	00 02                	add    BYTE PTR [edx],al
    18ab:	04 04                	add    al,0x4
    18ad:	02 23                	add    ah,BYTE PTR [ebx]
    18af:	12 00                	adc    al,BYTE PTR [eax]
    18b1:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    18b8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    18bb:	74 00                	je     18bd <sysEnter_Vector-0x12e743>
    18bd:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    18c0:	58                   	pop    eax
    18c1:	00 02                	add    BYTE PTR [edx],al
    18c3:	04 08                	add    al,0x8
    18c5:	06                   	push   es
    18c6:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    18cc:	01 06                	add    DWORD PTR [esi],eax
    18ce:	9e                   	sahf   
    18cf:	00 02                	add    BYTE PTR [edx],al
    18d1:	04 04                	add    al,0x4
    18d3:	02 23                	add    ah,BYTE PTR [ebx]
    18d5:	12 00                	adc    al,BYTE PTR [eax]
    18d7:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    18de:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    18e1:	74 00                	je     18e3 <sysEnter_Vector-0x12e71d>
    18e3:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    18e6:	58                   	pop    eax
    18e7:	06                   	push   es
    18e8:	08 f6                	or     dh,dh
    18ea:	d7                   	xlat   BYTE PTR ds:[ebx]
    18eb:	9f                   	lahf   
    18ec:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    18f1:	08 16                	or     BYTE PTR [esi],dl
    18f3:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    18f6:	4b                   	dec    ebx
    18f7:	5b                   	pop    ebx
    18f8:	f5                   	cmc    
    18f9:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    18ff:	30 08                	xor    BYTE PTR [eax],cl
    1901:	44                   	inc    esp
    1902:	02 2e                	add    ch,BYTE PTR [esi]
    1904:	13 02                	adc    eax,DWORD PTR [edx]
    1906:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1908:	91                   	xchg   ecx,eax
    1909:	c9                   	leave  
    190a:	e6 02                	out    0x2,al
    190c:	2f                   	das    
    190d:	13 02                	adc    eax,DWORD PTR [edx]
    190f:	3c 13                	cmp    al,0x13
    1911:	9f                   	lahf   
    1912:	e5 e6                	in     eax,0xe6
    1914:	08 c9                	or     cl,cl
    1916:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1919:	9f                   	lahf   
    191a:	e5 4c                	in     eax,0x4c
    191c:	02 29                	add    ch,BYTE PTR [ecx]
    191e:	13 02                	adc    eax,DWORD PTR [edx]
    1920:	2b 13                	sub    edx,DWORD PTR [ebx]
    1922:	9f                   	lahf   
    1923:	e5 e6                	in     eax,0xe6
    1925:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    192a:	a0 00 02 04 01       	mov    al,ds:0x1040200
    192f:	06                   	push   es
    1930:	c8 00 02 04          	enter  0x200,0x4
    1934:	04 02                	add    al,0x2
    1936:	2c 12                	sub    al,0x12
    1938:	00 02                	add    BYTE PTR [edx],al
    193a:	04 05                	add    al,0x5
    193c:	02 2f                	add    ch,BYTE PTR [edi]
    193e:	12 00                	adc    al,BYTE PTR [eax]
    1940:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1943:	74 00                	je     1945 <sysEnter_Vector-0x12e6bb>
    1945:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1948:	58                   	pop    eax
    1949:	06                   	push   es
    194a:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1950:	04 01                	add    al,0x1
    1952:	06                   	push   es
    1953:	c8 00 02 04          	enter  0x200,0x4
    1957:	04 02                	add    al,0x2
    1959:	2c 12                	sub    al,0x12
    195b:	00 02                	add    BYTE PTR [edx],al
    195d:	04 05                	add    al,0x5
    195f:	02 2f                	add    ch,BYTE PTR [edi]
    1961:	12 00                	adc    al,BYTE PTR [eax]
    1963:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1966:	74 00                	je     1968 <sysEnter_Vector-0x12e698>
    1968:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    196b:	58                   	pop    eax
    196c:	00 02                	add    BYTE PTR [edx],al
    196e:	04 08                	add    al,0x8
    1970:	06                   	push   es
    1971:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1977:	00 02                	add    BYTE PTR [edx],al
    1979:	04 01                	add    al,0x1
    197b:	06                   	push   es
    197c:	c8 00 02 04          	enter  0x200,0x4
    1980:	04 02                	add    al,0x2
    1982:	2c 12                	sub    al,0x12
    1984:	00 02                	add    BYTE PTR [edx],al
    1986:	04 05                	add    al,0x5
    1988:	02 2f                	add    ch,BYTE PTR [edi]
    198a:	12 00                	adc    al,BYTE PTR [eax]
    198c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    198f:	74 00                	je     1991 <sysEnter_Vector-0x12e66f>
    1991:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1994:	58                   	pop    eax
    1995:	06                   	push   es
    1996:	08 f9                	or     cl,bh
    1998:	bb 75 00 02 04       	mov    ebx,0x4020075
    199d:	01 06                	add    DWORD PTR [esi],eax
    199f:	08 2e                	or     BYTE PTR [esi],ch
    19a1:	06                   	push   es
    19a2:	9f                   	lahf   
    19a3:	75 75                	jne    1a1a <sysEnter_Vector-0x12e5e6>
    19a5:	7b d8                	jnp    197f <sysEnter_Vector-0x12e681>
    19a7:	00 02                	add    BYTE PTR [edx],al
    19a9:	04 01                	add    al,0x1
    19ab:	06                   	push   es
    19ac:	c8 06 75 e5          	enter  0x7506,0xe5
    19b0:	00 02                	add    BYTE PTR [edx],al
    19b2:	04 01                	add    al,0x1
    19b4:	06                   	push   es
    19b5:	02 22                	add    ah,BYTE PTR [edx]
    19b7:	12 06                	adc    al,BYTE PTR [esi]
    19b9:	4b                   	dec    ebx
    19ba:	00 02                	add    BYTE PTR [edx],al
    19bc:	04 01                	add    al,0x1
    19be:	06                   	push   es
    19bf:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    19c5:	02 22                	add    ah,BYTE PTR [edx]
    19c7:	12 00                	adc    al,BYTE PTR [eax]
    19c9:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    19cc:	74 00                	je     19ce <sysEnter_Vector-0x12e632>
    19ce:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19d1:	58                   	pop    eax
    19d2:	00 02                	add    BYTE PTR [edx],al
    19d4:	04 06                	add    al,0x6
    19d6:	06                   	push   es
    19d7:	59                   	pop    ecx
    19d8:	00 02                	add    BYTE PTR [edx],al
    19da:	04 01                	add    al,0x1
    19dc:	06                   	push   es
    19dd:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    19e0:	00 02                	add    BYTE PTR [edx],al
    19e2:	04 03                	add    al,0x3
    19e4:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    19e7:	00 02                	add    BYTE PTR [edx],al
    19e9:	04 04                	add    al,0x4
    19eb:	74 00                	je     19ed <sysEnter_Vector-0x12e613>
    19ed:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19f0:	58                   	pop    eax
    19f1:	00 02                	add    BYTE PTR [edx],al
    19f3:	04 06                	add    al,0x6
    19f5:	06                   	push   es
    19f6:	59                   	pop    ecx
    19f7:	00 02                	add    BYTE PTR [edx],al
    19f9:	04 01                	add    al,0x1
    19fb:	06                   	push   es
    19fc:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    19ff:	00 02                	add    BYTE PTR [edx],al
    1a01:	04 03                	add    al,0x3
    1a03:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1a06:	00 02                	add    BYTE PTR [edx],al
    1a08:	04 04                	add    al,0x4
    1a0a:	74 00                	je     1a0c <sysEnter_Vector-0x12e5f4>
    1a0c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a0f:	58                   	pop    eax
    1a10:	00 02                	add    BYTE PTR [edx],al
    1a12:	04 06                	add    al,0x6
    1a14:	06                   	push   es
    1a15:	5a                   	pop    edx
    1a16:	00 02                	add    BYTE PTR [edx],al
    1a18:	04 06                	add    al,0x6
    1a1a:	c9                   	leave  
    1a1b:	2f                   	das    
    1a1c:	00 02                	add    BYTE PTR [edx],al
    1a1e:	04 01                	add    al,0x1
    1a20:	06                   	push   es
    1a21:	9e                   	sahf   
    1a22:	00 02                	add    BYTE PTR [edx],al
    1a24:	04 04                	add    al,0x4
    1a26:	02 23                	add    ah,BYTE PTR [ebx]
    1a28:	12 00                	adc    al,BYTE PTR [eax]
    1a2a:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1a31:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a34:	74 00                	je     1a36 <sysEnter_Vector-0x12e5ca>
    1a36:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a39:	58                   	pop    eax
    1a3a:	00 02                	add    BYTE PTR [edx],al
    1a3c:	04 08                	add    al,0x8
    1a3e:	06                   	push   es
    1a3f:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1a42:	e8 bb 00 02 04       	call   4021b02 <sysEnter_Vector+0x3ef1b02>
    1a47:	01 06                	add    DWORD PTR [esi],eax
    1a49:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1a4e:	02 31                	add    dh,BYTE PTR [ecx]
    1a50:	14 02                	adc    al,0x2
    1a52:	2c 14                	sub    al,0x14
    1a54:	00 02                	add    BYTE PTR [edx],al
    1a56:	04 01                	add    al,0x1
    1a58:	06                   	push   es
    1a59:	02 29                	add    ch,BYTE PTR [ecx]
    1a5b:	12 06                	adc    al,BYTE PTR [esi]
    1a5d:	4b                   	dec    ebx
    1a5e:	bd 00 02 04 01       	mov    ebp,0x1040200
    1a63:	06                   	push   es
    1a64:	ba 06 08 5a 4c       	mov    edx,0x4c5a0806
    1a69:	f4                   	hlt    
    1a6a:	9f                   	lahf   
    1a6b:	ae                   	scas   al,BYTE PTR es:[edi]
    1a6c:	77 00                	ja     1a6e <sysEnter_Vector-0x12e592>
    1a6e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a71:	06                   	push   es
    1a72:	82                   	(bad)  
    1a73:	06                   	push   es
    1a74:	4b                   	dec    ebx
    1a75:	68 00 02 04 01       	push   0x1040200
    1a7a:	06                   	push   es
    1a7b:	66 06                	pushw  es
    1a7d:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1a83:	08 f3                	or     bl,dh
    1a85:	67 08 14             	or     BYTE PTR [si],dl
    1a88:	00 02                	add    BYTE PTR [edx],al
    1a8a:	04 01                	add    al,0x1
    1a8c:	e5 02                	in     eax,0x2
    1a8e:	07                   	pop    es
    1a8f:	00 01                	add    BYTE PTR [ecx],al
    1a91:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	75 69                	jne    d4 <sysEnter_Vector-0x12ff2c>
  6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6c:	74 33                	je     a1 <sysEnter_Vector-0x12ff5f>
  6e:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  71:	00 2f                	add    BYTE PTR [edi],ch
  73:	68 6f 6d 65 2f       	push   0x2f656d6f
  78:	79 6f                	jns    e9 <sysEnter_Vector-0x12ff17>
  7a:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  81:	6f                   	outs   dx,DWORD PTR ds:[esi]
  82:	73 2f                	jae    b3 <sysEnter_Vector-0x12ff4d>
  84:	61                   	popa   
  85:	70 72                	jo     f9 <sysEnter_Vector-0x12ff07>
  87:	6f                   	outs   dx,DWORD PTR ds:[esi]
  88:	6a 2f                	push   0x2f
  8a:	6c                   	ins    BYTE PTR es:[edi],dx
  8b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  92:	4f                   	dec    edi
  93:	53                   	push   ebx
  94:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  97:	6f                   	outs   dx,DWORD PTR ds:[esi]
  98:	6f                   	outs   dx,DWORD PTR ds:[esi]
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  9e:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a2:	75 62                	jne    106 <sysEnter_Vector-0x12fefa>
  a4:	6c                   	ins    BYTE PTR es:[edi],dx
  a5:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a9:	72 63                	jb     10e <sysEnter_Vector-0x12fef2>
  ab:	68 72 49 00 68       	push   0x68004972
  b0:	65                   	gs
  b1:	61                   	popa   
  b2:	70 43                	jo     f7 <sysEnter_Vector-0x12ff09>
  b4:	75 72                	jne    128 <sysEnter_Vector-0x12fed8>
  b6:	72 00                	jb     b8 <sysEnter_Vector-0x12ff48>
  b8:	2e                   	cs
  b9:	2e                   	cs
  ba:	2f                   	das    
  bb:	2e                   	cs
  bc:	2e                   	cs
  bd:	2f                   	das    
  be:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c2:	6a 2f                	push   0x2f
  c4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  ce:	63 2f                	arpl   WORD PTR [edi],bp
  d0:	73 74                	jae    146 <sysEnter_Vector-0x12feba>
  d2:	72 69                	jb     13d <sysEnter_Vector-0x12fec3>
  d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d5:	67 73 2f             	addr16 jae 107 <sysEnter_Vector-0x12fef9>
  d8:	73 74                	jae    14e <sysEnter_Vector-0x12feb2>
  da:	72 63                	jb     13f <sysEnter_Vector-0x12fec1>
  dc:	68 72 2e 63 00       	push   0x632e72
  e1:	73 69                	jae    14c <sysEnter_Vector-0x12feb4>
  e3:	7a 65                	jp     14a <sysEnter_Vector-0x12feb6>
  e5:	74 79                	je     160 <sysEnter_Vector-0x12fea0>
  e7:	70 65                	jo     14e <sysEnter_Vector-0x12feb2>
  e9:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	72 74                	jb     163 <sysEnter_Vector-0x12fe9d>
  ef:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f2:	74 00                	je     f4 <sysEnter_Vector-0x12ff0c>
  f4:	47                   	inc    edi
  f5:	4e                   	dec    esi
  f6:	55                   	push   ebp
  f7:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  fa:	31 20                	xor    DWORD PTR [eax],esp
  fc:	35 2e 33 2e 30       	xor    eax,0x302e332e
 101:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 107:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 10c:	6c                   	ins    BYTE PTR es:[edi],dx
 10d:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 113:	65                   	gs
 114:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 119:	72 69                	jb     184 <sysEnter_Vector-0x12fe7c>
 11b:	63 20                	arpl   WORD PTR [eax],sp
 11d:	2d 6d 61 72 63       	sub    eax,0x6372616d
 122:	68 3d 70 65 6e       	push   0x6e65703d
 127:	74 69                	je     192 <sysEnter_Vector-0x12fe6e>
 129:	75 6d                	jne    198 <sysEnter_Vector-0x12fe68>
 12b:	70 72                	jo     19f <sysEnter_Vector-0x12fe61>
 12d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 12e:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 134:	66                   	data16
 135:	72 65                	jb     19c <sysEnter_Vector-0x12fe64>
 137:	65                   	gs
 138:	73 74                	jae    1ae <sysEnter_Vector-0x12fe52>
 13a:	61                   	popa   
 13b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 13c:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 143:	76 
 144:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 14b:	74 79                	je     1c6 <sysEnter_Vector-0x12fe3a>
 14d:	3d 68 69 64 64       	cmp    eax,0x64646968
 152:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 154:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 15a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 15d:	61                   	popa   
 15e:	70 45                	jo     1a5 <sysEnter_Vector-0x12fe5b>
 160:	6e                   	outs   dx,BYTE PTR ds:[esi]
 161:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 165:	61                   	popa   
 166:	72 73                	jb     1db <sysEnter_Vector-0x12fe25>
 168:	00 2e                	add    BYTE PTR [esi],ch
 16a:	2e                   	cs
 16b:	2f                   	das    
 16c:	2e                   	cs
 16d:	2e                   	cs
 16e:	2f                   	das    
 16f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 173:	6a 2f                	push   0x2f
 175:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 178:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17f:	63 2f                	arpl   WORD PTR [edi],bp
 181:	73 74                	jae    1f7 <sysEnter_Vector-0x12fe09>
 183:	72 69                	jb     1ee <sysEnter_Vector-0x12fe12>
 185:	6e                   	outs   dx,BYTE PTR ds:[esi]
 186:	67 73 2f             	addr16 jae 1b8 <sysEnter_Vector-0x12fe48>
 189:	73 74                	jae    1ff <sysEnter_Vector-0x12fe01>
 18b:	72 63                	jb     1f0 <sysEnter_Vector-0x12fe10>
 18d:	73 70                	jae    1ff <sysEnter_Vector-0x12fe01>
 18f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 190:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	49                   	dec    ecx
 1a3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1a7:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1ae:	2e                   	cs
 1af:	2f                   	das    
 1b0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b4:	6a 2f                	push   0x2f
 1b6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1b9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c0:	63 2f                	arpl   WORD PTR [edi],bp
 1c2:	73 74                	jae    238 <sysEnter_Vector-0x12fdc8>
 1c4:	72 69                	jb     22f <sysEnter_Vector-0x12fdd1>
 1c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c7:	67 73 2f             	addr16 jae 1f9 <sysEnter_Vector-0x12fe07>
 1ca:	73 74                	jae    240 <sysEnter_Vector-0x12fdc0>
 1cc:	72 74                	jb     242 <sysEnter_Vector-0x12fdbe>
 1ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1cf:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d2:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1d6:	74 73                	je     24b <sysEnter_Vector-0x12fdb5>
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e1:	74 6f                	je     252 <sysEnter_Vector-0x12fdae>
 1e3:	61                   	popa   
 1e4:	49                   	dec    ecx
 1e5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e8:	63 2f                	arpl   WORD PTR [edi],bp
 1ea:	61                   	popa   
 1eb:	73 63                	jae    250 <sysEnter_Vector-0x12fdb0>
 1ed:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
 1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1fa:	69 00 72 65 76 65    	imul   eax,DWORD PTR [eax],0x65766572
 200:	72 73                	jb     275 <sysEnter_Vector-0x12fd8b>
 202:	65                   	gs
 203:	49                   	dec    ecx
 204:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 207:	67 6e                	outs   dx,BYTE PTR ds:[si]
 209:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 20c:	6c                   	ins    BYTE PTR es:[edi],dx
 20d:	75 65                	jne    274 <sysEnter_Vector-0x12fd8c>
 20f:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 213:	74 50                	je     265 <sysEnter_Vector-0x12fd9b>
 215:	6f                   	outs   dx,DWORD PTR ds:[esi]
 216:	70 75                	jo     28d <sysEnter_Vector-0x12fd73>
 218:	6c                   	ins    BYTE PTR es:[edi],dx
 219:	61                   	popa   
 21a:	74 65                	je     281 <sysEnter_Vector-0x12fd7f>
 21c:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 220:	74 65                	je     287 <sysEnter_Vector-0x12fd79>
 222:	6e                   	outs   dx,BYTE PTR ds:[esi]
 223:	76 00                	jbe    225 <sysEnter_Vector-0x12fddb>
 225:	67                   	addr16
 226:	65                   	gs
 227:	74 65                	je     28e <sysEnter_Vector-0x12fd72>
 229:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22a:	76 00                	jbe    22c <sysEnter_Vector-0x12fdd4>
 22c:	73 72                	jae    2a0 <sysEnter_Vector-0x12fd60>
 22e:	63 2f                	arpl   WORD PTR [edi],bp
 230:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 232:	76 69                	jbe    29d <sysEnter_Vector-0x12fd63>
 234:	72 6f                	jb     2a5 <sysEnter_Vector-0x12fd5b>
 236:	6e                   	outs   dx,BYTE PTR ds:[esi]
 237:	6d                   	ins    DWORD PTR es:[edi],dx
 238:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 23a:	74 2e                	je     26a <sysEnter_Vector-0x12fd96>
 23c:	63 00                	arpl   WORD PTR [eax],ax
 23e:	76 61                	jbe    2a1 <sysEnter_Vector-0x12fd5f>
 240:	72 6e                	jb     2b0 <sysEnter_Vector-0x12fd50>
 242:	61                   	popa   
 243:	6d                   	ins    DWORD PTR es:[edi],dx
 244:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 248:	74 64                	je     2ae <sysEnter_Vector-0x12fd52>
 24a:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 251:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 255:	53                   	push   ebx
 256:	43                   	inc    ebx
 257:	41                   	inc    ecx
 258:	4c                   	dec    esp
 259:	4c                   	dec    esp
 25a:	5f                   	pop    edi
 25b:	52                   	push   edx
 25c:	45                   	inc    ebp
 25d:	41                   	inc    ecx
 25e:	44                   	inc    esp
 25f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 262:	53                   	push   ebx
 263:	43                   	inc    ebx
 264:	41                   	inc    ecx
 265:	4c                   	dec    esp
 266:	4c                   	dec    esp
 267:	5f                   	pop    edi
 268:	4f                   	dec    edi
 269:	50                   	push   eax
 26a:	45                   	inc    ebp
 26b:	4e                   	dec    esi
 26c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 26f:	53                   	push   ebx
 270:	43                   	inc    ebx
 271:	41                   	inc    ecx
 272:	4c                   	dec    esp
 273:	4c                   	dec    esp
 274:	5f                   	pop    edi
 275:	4d                   	dec    ebp
 276:	41                   	inc    ecx
 277:	53                   	push   ebx
 278:	4b                   	dec    ebx
 279:	53                   	push   ebx
 27a:	49                   	dec    ecx
 27b:	47                   	inc    edi
 27c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 27f:	53                   	push   ebx
 280:	43                   	inc    ebx
 281:	41                   	inc    ecx
 282:	4c                   	dec    esp
 283:	4c                   	dec    esp
 284:	5f                   	pop    edi
 285:	47                   	inc    edi
 286:	45                   	inc    ebp
 287:	54                   	push   esp
 288:	44                   	inc    esp
 289:	45                   	inc    ebp
 28a:	4e                   	dec    esi
 28b:	54                   	push   esp
 28c:	53                   	push   ebx
 28d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 290:	63 2f                	arpl   WORD PTR [edi],bp
 292:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 299:	53                   	push   ebx
 29a:	59                   	pop    ecx
 29b:	53                   	push   ebx
 29c:	43                   	inc    ebx
 29d:	41                   	inc    ecx
 29e:	4c                   	dec    esp
 29f:	4c                   	dec    esp
 2a0:	5f                   	pop    edi
 2a1:	52                   	push   edx
 2a2:	45                   	inc    ebp
 2a3:	42                   	inc    edx
 2a4:	4f                   	dec    edi
 2a5:	4f                   	dec    edi
 2a6:	54                   	push   esp
 2a7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2aa:	53                   	push   ebx
 2ab:	43                   	inc    ebx
 2ac:	41                   	inc    ecx
 2ad:	4c                   	dec    esp
 2ae:	4c                   	dec    esp
 2af:	5f                   	pop    edi
 2b0:	48                   	dec    eax
 2b1:	4c                   	dec    esp
 2b2:	54                   	push   esp
 2b3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b6:	53                   	push   ebx
 2b7:	43                   	inc    ebx
 2b8:	41                   	inc    ecx
 2b9:	4c                   	dec    esp
 2ba:	4c                   	dec    esp
 2bb:	5f                   	pop    edi
 2bc:	53                   	push   ebx
 2bd:	4c                   	dec    esp
 2be:	45                   	inc    ebp
 2bf:	45                   	inc    ebp
 2c0:	50                   	push   eax
 2c1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c4:	53                   	push   ebx
 2c5:	43                   	inc    ebx
 2c6:	41                   	inc    ecx
 2c7:	4c                   	dec    esp
 2c8:	4c                   	dec    esp
 2c9:	5f                   	pop    edi
 2ca:	47                   	inc    edi
 2cb:	45                   	inc    ebp
 2cc:	54                   	push   esp
 2cd:	54                   	push   esp
 2ce:	49                   	dec    ecx
 2cf:	4d                   	dec    ebp
 2d0:	45                   	inc    ebp
 2d1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d4:	53                   	push   ebx
 2d5:	43                   	inc    ebx
 2d6:	41                   	inc    ecx
 2d7:	4c                   	dec    esp
 2d8:	4c                   	dec    esp
 2d9:	5f                   	pop    edi
 2da:	53                   	push   ebx
 2db:	45                   	inc    ebp
 2dc:	54                   	push   esp
 2dd:	50                   	push   eax
 2de:	52                   	push   edx
 2df:	49                   	dec    ecx
 2e0:	4f                   	dec    edi
 2e1:	52                   	push   edx
 2e2:	49                   	dec    ecx
 2e3:	54                   	push   esp
 2e4:	59                   	pop    ecx
 2e5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e8:	53                   	push   ebx
 2e9:	43                   	inc    ebx
 2ea:	41                   	inc    ecx
 2eb:	4c                   	dec    esp
 2ec:	4c                   	dec    esp
 2ed:	5f                   	pop    edi
 2ee:	43                   	inc    ebx
 2ef:	4c                   	dec    esp
 2f0:	4f                   	dec    edi
 2f1:	53                   	push   ebx
 2f2:	45                   	inc    ebp
 2f3:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 2f6:	79 73                	jns    36b <sysEnter_Vector-0x12fc95>
 2f8:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 2fb:	6c                   	ins    BYTE PTR es:[edi],dx
 2fc:	73 00                	jae    2fe <sysEnter_Vector-0x12fd02>
 2fe:	6c                   	ins    BYTE PTR es:[edi],dx
 2ff:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 301:	67 74 68             	addr16 je 36c <sysEnter_Vector-0x12fc94>
 304:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 307:	61                   	popa   
 308:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 30c:	53                   	push   ebx
 30d:	43                   	inc    ebx
 30e:	41                   	inc    ecx
 30f:	4c                   	dec    esp
 310:	4c                   	dec    esp
 311:	5f                   	pop    edi
 312:	46                   	inc    esi
 313:	4f                   	dec    edi
 314:	52                   	push   edx
 315:	4b                   	dec    ebx
 316:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 319:	53                   	push   ebx
 31a:	43                   	inc    ebx
 31b:	41                   	inc    ecx
 31c:	4c                   	dec    esp
 31d:	4c                   	dec    esp
 31e:	5f                   	pop    edi
 31f:	53                   	push   ebx
 320:	54                   	push   esp
 321:	4f                   	dec    edi
 322:	50                   	push   eax
 323:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 326:	53                   	push   ebx
 327:	43                   	inc    ebx
 328:	41                   	inc    ecx
 329:	4c                   	dec    esp
 32a:	4c                   	dec    esp
 32b:	5f                   	pop    edi
 32c:	50                   	push   eax
 32d:	52                   	push   edx
 32e:	49                   	dec    ecx
 32f:	4e                   	dec    esi
 330:	54                   	push   esp
 331:	44                   	inc    esp
 332:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 335:	66                   	data16
 336:	66                   	data16
 337:	65                   	gs
 338:	72 43                	jb     37d <sysEnter_Vector-0x12fc83>
 33a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 33b:	75 6e                	jne    3ab <sysEnter_Vector-0x12fc55>
 33d:	74 00                	je     33f <sysEnter_Vector-0x12fcc1>
 33f:	53                   	push   ebx
 340:	59                   	pop    ecx
 341:	53                   	push   ebx
 342:	43                   	inc    ebx
 343:	41                   	inc    ecx
 344:	4c                   	dec    esp
 345:	4c                   	dec    esp
 346:	5f                   	pop    edi
 347:	46                   	inc    esi
 348:	52                   	push   edx
 349:	45                   	inc    ebp
 34a:	45                   	inc    ebp
 34b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 34e:	53                   	push   ebx
 34f:	43                   	inc    ebx
 350:	41                   	inc    ecx
 351:	4c                   	dec    esp
 352:	4c                   	dec    esp
 353:	5f                   	pop    edi
 354:	45                   	inc    ebp
 355:	58                   	pop    eax
 356:	45                   	inc    ebp
 357:	43                   	inc    ebx
 358:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 35b:	53                   	push   ebx
 35c:	43                   	inc    ebx
 35d:	41                   	inc    ecx
 35e:	4c                   	dec    esp
 35f:	4c                   	dec    esp
 360:	5f                   	pop    edi
 361:	49                   	dec    ecx
 362:	4e                   	dec    esi
 363:	56                   	push   esi
 364:	41                   	inc    ecx
 365:	4c                   	dec    esp
 366:	49                   	dec    ecx
 367:	44                   	inc    esp
 368:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36b:	53                   	push   ebx
 36c:	43                   	inc    ebx
 36d:	41                   	inc    ecx
 36e:	4c                   	dec    esp
 36f:	4c                   	dec    esp
 370:	5f                   	pop    edi
 371:	52                   	push   edx
 372:	45                   	inc    ebp
 373:	47                   	inc    edi
 374:	45                   	inc    ebp
 375:	58                   	pop    eax
 376:	49                   	dec    ecx
 377:	54                   	push   esp
 378:	48                   	dec    eax
 379:	41                   	inc    ecx
 37a:	4e                   	dec    esi
 37b:	44                   	inc    esp
 37c:	4c                   	dec    esp
 37d:	45                   	inc    ebp
 37e:	52                   	push   edx
 37f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 382:	53                   	push   ebx
 383:	43                   	inc    ebx
 384:	41                   	inc    ecx
 385:	4c                   	dec    esp
 386:	4c                   	dec    esp
 387:	5f                   	pop    edi
 388:	47                   	inc    edi
 389:	45                   	inc    ebp
 38a:	54                   	push   esp
 38b:	54                   	push   esp
 38c:	49                   	dec    ecx
 38d:	43                   	inc    ebx
 38e:	4b                   	dec    ebx
 38f:	53                   	push   ebx
 390:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 393:	53                   	push   ebx
 394:	43                   	inc    ebx
 395:	41                   	inc    ecx
 396:	4c                   	dec    esp
 397:	4c                   	dec    esp
 398:	5f                   	pop    edi
 399:	45                   	inc    ebp
 39a:	4e                   	dec    esi
 39b:	44                   	inc    esp
 39c:	50                   	push   eax
 39d:	52                   	push   edx
 39e:	4f                   	dec    edi
 39f:	43                   	inc    ebx
 3a0:	45                   	inc    ebp
 3a1:	53                   	push   ebx
 3a2:	53                   	push   ebx
 3a3:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 3a6:	66                   	data16
 3a7:	66                   	data16
 3a8:	65                   	gs
 3a9:	72 00                	jb     3ab <sysEnter_Vector-0x12fc55>
 3ab:	53                   	push   ebx
 3ac:	59                   	pop    ecx
 3ad:	53                   	push   ebx
 3ae:	43                   	inc    ebx
 3af:	41                   	inc    ecx
 3b0:	4c                   	dec    esp
 3b1:	4c                   	dec    esp
 3b2:	5f                   	pop    edi
 3b3:	57                   	push   edi
 3b4:	52                   	push   edx
 3b5:	49                   	dec    ecx
 3b6:	54                   	push   esp
 3b7:	45                   	inc    ebp
 3b8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3bb:	53                   	push   ebx
 3bc:	43                   	inc    ebx
 3bd:	41                   	inc    ecx
 3be:	4c                   	dec    esp
 3bf:	4c                   	dec    esp
 3c0:	5f                   	pop    edi
 3c1:	50                   	push   eax
 3c2:	52                   	push   edx
 3c3:	49                   	dec    ecx
 3c4:	4e                   	dec    esi
 3c5:	54                   	push   esp
 3c6:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3ca:	64                   	fs
 3cb:	6c                   	ins    BYTE PTR es:[edi],dx
 3cc:	65 00 73 69          	add    BYTE PTR gs:[ebx+0x69],dh
 3d0:	7a 65                	jp     437 <sysEnter_Vector-0x12fbc9>
 3d2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3d5:	53                   	push   ebx
 3d6:	43                   	inc    ebx
 3d7:	41                   	inc    ecx
 3d8:	4c                   	dec    esp
 3d9:	4c                   	dec    esp
 3da:	5f                   	pop    edi
 3db:	41                   	inc    ecx
 3dc:	4c                   	dec    esp
 3dd:	4c                   	dec    esp
 3de:	4f                   	dec    edi
 3df:	43                   	inc    ebx
 3e0:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3e3:	53                   	push   ebx
 3e4:	43                   	inc    ebx
 3e5:	41                   	inc    ecx
 3e6:	4c                   	dec    esp
 3e7:	4c                   	dec    esp
 3e8:	5f                   	pop    edi
 3e9:	47                   	inc    edi
 3ea:	45                   	inc    ebp
 3eb:	54                   	push   esp
 3ec:	43                   	inc    ebx
 3ed:	57                   	push   edi
 3ee:	44                   	inc    esp
 3ef:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f2:	53                   	push   ebx
 3f3:	43                   	inc    ebx
 3f4:	41                   	inc    ecx
 3f5:	4c                   	dec    esp
 3f6:	4c                   	dec    esp
 3f7:	5f                   	pop    edi
 3f8:	57                   	push   edi
 3f9:	41                   	inc    ecx
 3fa:	49                   	dec    ecx
 3fb:	54                   	push   esp
 3fc:	46                   	inc    esi
 3fd:	4f                   	dec    edi
 3fe:	52                   	push   edx
 3ff:	50                   	push   eax
 400:	49                   	dec    ecx
 401:	44                   	inc    esp
 402:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 405:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 407:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 40a:	53                   	push   ebx
 40b:	43                   	inc    ebx
 40c:	41                   	inc    ecx
 40d:	4c                   	dec    esp
 40e:	4c                   	dec    esp
 40f:	5f                   	pop    edi
 410:	53                   	push   ebx
 411:	45                   	inc    ebp
 412:	54                   	push   esp
 413:	53                   	push   ebx
 414:	49                   	dec    ecx
 415:	47                   	inc    edi
 416:	41                   	inc    ecx
 417:	43                   	inc    ebx
 418:	54                   	push   esp
 419:	49                   	dec    ecx
 41a:	4f                   	dec    edi
 41b:	4e                   	dec    esi
 41c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 41f:	72 65                	jb     486 <sysEnter_Vector-0x12fb7a>
 421:	61                   	popa   
 422:	6d                   	ins    DWORD PTR es:[edi],dx
 423:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 426:	74 73                	je     49b <sysEnter_Vector-0x12fb65>
 428:	45                   	inc    ebp
 429:	72 72                	jb     49d <sysEnter_Vector-0x12fb63>
 42b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 42c:	72 00                	jb     42e <sysEnter_Vector-0x12fbd2>
 42e:	6c                   	ins    BYTE PTR es:[edi],dx
 42f:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 432:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 435:	63 2f                	arpl   WORD PTR [edi],bp
 437:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 43e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 43f:	70 75                	jo     4b6 <sysEnter_Vector-0x12fb4a>
 441:	74 2e                	je     471 <sysEnter_Vector-0x12fb8f>
 443:	63 00                	arpl   WORD PTR [eax],ax
 445:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 44c:	67                   	addr16
 44d:	65                   	gs
 44e:	74 63                	je     4b3 <sysEnter_Vector-0x12fb4d>
 450:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 453:	78 6c                	js     4c1 <sysEnter_Vector-0x12fb3f>
 455:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 457:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 45a:	74 73                	je     4cf <sysEnter_Vector-0x12fb31>
 45c:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 45f:	74 63                	je     4c4 <sysEnter_Vector-0x12fb3c>
 461:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 464:	74 73                	je     4d9 <sysEnter_Vector-0x12fb27>
 466:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 469:	74 56                	je     4c1 <sysEnter_Vector-0x12fb3f>
 46b:	61                   	popa   
 46c:	6c                   	ins    BYTE PTR es:[edi],dx
 46d:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 470:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 477:	74 53                	je     4cc <sysEnter_Vector-0x12fb34>
 479:	70 61                	jo     4dc <sysEnter_Vector-0x12fb24>
 47b:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 47e:	74 72                	je     4f2 <sysEnter_Vector-0x12fb0e>
 480:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 483:	7a 65                	jp     4ea <sysEnter_Vector-0x12fb16>
 485:	5f                   	pop    edi
 486:	74 00                	je     488 <sysEnter_Vector-0x12fb78>
 488:	73 69                	jae    4f3 <sysEnter_Vector-0x12fb0d>
 48a:	67 44                	addr16 inc esp
 48c:	61                   	popa   
 48d:	74 61                	je     4f0 <sysEnter_Vector-0x12fb10>
 48f:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 492:	67 76 50             	addr16 jbe 4e5 <sysEnter_Vector-0x12fb1b>
 495:	74 72                	je     509 <sysEnter_Vector-0x12faf7>
 497:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 49a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 49b:	67 72 61             	addr16 jb 4ff <sysEnter_Vector-0x12fb01>
 49e:	6d                   	ins    DWORD PTR es:[edi],dx
 49f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 4a3:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 4a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4a7:	69 74 00 5f 5f 62 75 	imul   esi,DWORD PTR [eax+eax*1+0x5f],0x6975625f
 4ae:	69 
 4af:	6c                   	ins    BYTE PTR es:[edi],dx
 4b0:	74 69                	je     51b <sysEnter_Vector-0x12fae5>
 4b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4b3:	5f                   	pop    edi
 4b4:	76 61                	jbe    517 <sysEnter_Vector-0x12fae9>
 4b6:	5f                   	pop    edi
 4b7:	6c                   	ins    BYTE PTR es:[edi],dx
 4b8:	69 73 74 00 66 6f 72 	imul   esi,DWORD PTR [ebx+0x74],0x726f6600
 4bf:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 4c2:	70 61                	jo     525 <sysEnter_Vector-0x12fadb>
 4c4:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 4c7:	74 72                	je     53b <sysEnter_Vector-0x12fac5>
 4c9:	00 77 61             	add    BYTE PTR [edi+0x61],dh
 4cc:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 4d3:	65 
 4d4:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 4d7:	4c                   	dec    esp
 4d8:	65                   	gs
 4d9:	76 65                	jbe    540 <sysEnter_Vector-0x12fac0>
 4db:	6c                   	ins    BYTE PTR es:[edi],dx
 4dc:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 4df:	6c                   	ins    BYTE PTR es:[edi],dx
 4e0:	6c                   	ins    BYTE PTR es:[edi],dx
 4e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4e2:	75 6d                	jne    551 <sysEnter_Vector-0x12faaf>
 4e4:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 4e7:	65                   	gs
 4e8:	65                   	gs
 4e9:	70 00                	jo     4eb <sysEnter_Vector-0x12fb15>
 4eb:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 4ed:	5f                   	pop    edi
 4ee:	73 79                	jae    569 <sysEnter_Vector-0x12fa97>
 4f0:	73 63                	jae    555 <sysEnter_Vector-0x12faab>
 4f2:	61                   	popa   
 4f3:	6c                   	ins    BYTE PTR es:[edi],dx
 4f4:	6c                   	ins    BYTE PTR es:[edi],dx
 4f5:	30 00                	xor    BYTE PTR [eax],al
 4f7:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 4f9:	5f                   	pop    edi
 4fa:	73 79                	jae    575 <sysEnter_Vector-0x12fa8b>
 4fc:	73 63                	jae    561 <sysEnter_Vector-0x12fa9f>
 4fe:	61                   	popa   
 4ff:	6c                   	ins    BYTE PTR es:[edi],dx
 500:	6c                   	ins    BYTE PTR es:[edi],dx
 501:	31 00                	xor    DWORD PTR [eax],eax
 503:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 505:	5f                   	pop    edi
 506:	73 79                	jae    581 <sysEnter_Vector-0x12fa7f>
 508:	73 63                	jae    56d <sysEnter_Vector-0x12fa93>
 50a:	61                   	popa   
 50b:	6c                   	ins    BYTE PTR es:[edi],dx
 50c:	6c                   	ins    BYTE PTR es:[edi],dx
 50d:	32 00                	xor    al,BYTE PTR [eax]
 50f:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 511:	5f                   	pop    edi
 512:	73 79                	jae    58d <sysEnter_Vector-0x12fa73>
 514:	73 63                	jae    579 <sysEnter_Vector-0x12fa87>
 516:	61                   	popa   
 517:	6c                   	ins    BYTE PTR es:[edi],dx
 518:	6c                   	ins    BYTE PTR es:[edi],dx
 519:	33 00                	xor    eax,DWORD PTR [eax]
 51b:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 51d:	5f                   	pop    edi
 51e:	73 79                	jae    599 <sysEnter_Vector-0x12fa67>
 520:	73 63                	jae    585 <sysEnter_Vector-0x12fa7b>
 522:	61                   	popa   
 523:	6c                   	ins    BYTE PTR es:[edi],dx
 524:	6c                   	ins    BYTE PTR es:[edi],dx
 525:	34 00                	xor    al,0x0
 527:	6c                   	ins    BYTE PTR es:[edi],dx
 528:	69 62 63 49 6e 69 74 	imul   esp,DWORD PTR [edx+0x63],0x74696e49
 52f:	69 61 6c 69 7a 65 64 	imul   esp,DWORD PTR [ecx+0x6c],0x64657a69
 536:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 539:	67 6e                	outs   dx,BYTE PTR ds:[si]
 53b:	75 63                	jne    5a0 <sysEnter_Vector-0x12fa60>
 53d:	5f                   	pop    edi
 53e:	76 61                	jbe    5a1 <sysEnter_Vector-0x12fa5f>
 540:	5f                   	pop    edi
 541:	6c                   	ins    BYTE PTR es:[edi],dx
 542:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 549:	6e                   	outs   dx,BYTE PTR ds:[esi]
 54a:	74 64                	je     5b0 <sysEnter_Vector-0x12fa50>
 54c:	49                   	dec    ecx
 54d:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 550:	72 61                	jb     5b3 <sysEnter_Vector-0x12fa4d>
 552:	6d                   	ins    DWORD PTR es:[edi],dx
 553:	31 00                	xor    DWORD PTR [eax],eax
 555:	70 61                	jo     5b8 <sysEnter_Vector-0x12fa48>
 557:	72 61                	jb     5ba <sysEnter_Vector-0x12fa46>
 559:	6d                   	ins    DWORD PTR es:[edi],dx
 55a:	32 00                	xor    al,BYTE PTR [eax]
 55c:	70 61                	jo     5bf <sysEnter_Vector-0x12fa41>
 55e:	72 61                	jb     5c1 <sysEnter_Vector-0x12fa3f>
 560:	6d                   	ins    DWORD PTR es:[edi],dx
 561:	33 00                	xor    eax,DWORD PTR [eax]
 563:	70 61                	jo     5c6 <sysEnter_Vector-0x12fa3a>
 565:	72 61                	jb     5c8 <sysEnter_Vector-0x12fa38>
 567:	6d                   	ins    DWORD PTR es:[edi],dx
 568:	34 00                	xor    al,0x0
 56a:	65                   	gs
 56b:	78 65                	js     5d2 <sysEnter_Vector-0x12fa2e>
 56d:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 570:	66 6f                	outs   dx,WORD PTR ds:[esi]
 572:	72 6d                	jb     5e1 <sysEnter_Vector-0x12fa1f>
 574:	61                   	popa   
 575:	74 00                	je     577 <sysEnter_Vector-0x12fa89>
 577:	73 69                	jae    5e2 <sysEnter_Vector-0x12fa1e>
 579:	67 6e                	outs   dx,BYTE PTR ds:[si]
 57b:	61                   	popa   
 57c:	6c                   	ins    BYTE PTR es:[edi],dx
 57d:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 580:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 583:	5f                   	pop    edi
 584:	5f                   	pop    edi
 585:	73 65                	jae    5ec <sysEnter_Vector-0x12fa14>
 587:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 58a:	64                   	fs
 58b:	73 00                	jae    58d <sysEnter_Vector-0x12fa73>
 58d:	73 72                	jae    601 <sysEnter_Vector-0x12f9ff>
 58f:	63 2f                	arpl   WORD PTR [edi],bp
 591:	6c                   	ins    BYTE PTR es:[edi],dx
 592:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 599:	4f                   	dec    edi
 59a:	53                   	push   ebx
 59b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 59e:	61                   	popa   
 59f:	72 67                	jb     608 <sysEnter_Vector-0x12f9f8>
 5a1:	63 00                	arpl   WORD PTR [eax],ax
 5a3:	6c                   	ins    BYTE PTR es:[edi],dx
 5a4:	69 62 63 5f 63 6c 65 	imul   esp,DWORD PTR [edx+0x63],0x656c635f
 5ab:	61                   	popa   
 5ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5ad:	75 70                	jne    61f <sysEnter_Vector-0x12f9e1>
 5af:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5b2:	67 76 00             	addr16 jbe 5b5 <sysEnter_Vector-0x12fa4b>
 5b5:	73 69                	jae    620 <sysEnter_Vector-0x12f9e0>
 5b7:	67 48                	addr16 dec eax
 5b9:	61                   	popa   
 5ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5bb:	64                   	fs
 5bc:	6c                   	ins    BYTE PTR es:[edi],dx
 5bd:	65                   	gs
 5be:	72 00                	jb     5c0 <sysEnter_Vector-0x12fa40>
 5c0:	6d                   	ins    DWORD PTR es:[edi],dx
 5c1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5c2:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 5c9:	6e 
 5ca:	61                   	popa   
 5cb:	6c                   	ins    BYTE PTR es:[edi],dx
 5cc:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5cf:	67 73 00             	addr16 jae 5d2 <sysEnter_Vector-0x12fa2e>
 5d2:	70 72                	jo     646 <sysEnter_Vector-0x12f9ba>
 5d4:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 5db:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5dc:	70 00                	jo     5de <sysEnter_Vector-0x12fa22>
 5de:	67                   	addr16
 5df:	65                   	gs
 5e0:	74 63                	je     645 <sysEnter_Vector-0x12f9bb>
 5e2:	77 64                	ja     648 <sysEnter_Vector-0x12f9b8>
 5e4:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 5e7:	6c                   	ins    BYTE PTR es:[edi],dx
 5e8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5e9:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 5ec:	65                   	gs
 5ed:	64                   	fs
 5ee:	50                   	push   eax
 5ef:	74 72                	je     663 <sysEnter_Vector-0x12f99d>
 5f1:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 5f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5f5:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 5fc:	65                   	gs
 5fd:	77 53                	ja     652 <sysEnter_Vector-0x12f9ae>
 5ff:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 606:	6c                   	ins    BYTE PTR es:[edi],dx
 607:	6f                   	outs   dx,DWORD PTR ds:[esi]
 608:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 60b:	6c                   	ins    BYTE PTR es:[edi],dx
 60c:	65                   	gs
 60d:	61                   	popa   
 60e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 60f:	75 70                	jne    681 <sysEnter_Vector-0x12f97f>
 611:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 614:	72 6b                	jb     681 <sysEnter_Vector-0x12f97f>
 616:	65                   	gs
 617:	72 00                	jb     619 <sysEnter_Vector-0x12f9e7>
 619:	6d                   	ins    DWORD PTR es:[edi],dx
 61a:	61                   	popa   
 61b:	6c                   	ins    BYTE PTR es:[edi],dx
 61c:	6c                   	ins    BYTE PTR es:[edi],dx
 61d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 61e:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 621:	68 65 61 70 50       	push   0x50706165
 626:	74 72                	je     69a <sysEnter_Vector-0x12f966>
 628:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 62b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 62c:	74 38                	je     666 <sysEnter_Vector-0x12f99a>
 62e:	5f                   	pop    edi
 62f:	74 00                	je     631 <sysEnter_Vector-0x12f9cf>
 631:	66                   	data16
 632:	72 65                	jb     699 <sysEnter_Vector-0x12f967>
 634:	65 00 6e 65          	add    BYTE PTR gs:[esi+0x65],ch
 638:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 63f:	65                   	gs
 640:	61                   	popa   
 641:	70 00                	jo     643 <sysEnter_Vector-0x12f9bd>
 643:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 64a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 64b:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 652:	63 
 653:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 656:	74 6f                	je     6c7 <sysEnter_Vector-0x12f939>
 658:	48                   	dec    eax
 659:	65                   	gs
 65a:	72 65                	jb     6c1 <sysEnter_Vector-0x12f93f>
 65c:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 65f:	61                   	popa   
 660:	70 50                	jo     6b2 <sysEnter_Vector-0x12f94e>
 662:	74 72                	je     6d6 <sysEnter_Vector-0x12f92a>
 664:	4e                   	dec    esi
 665:	65                   	gs
 666:	78 74                	js     6dc <sysEnter_Vector-0x12f924>
 668:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 66b:	77 48                	ja     6b5 <sysEnter_Vector-0x12f94b>
 66d:	65                   	gs
 66e:	61                   	popa   
 66f:	70 52                	jo     6c3 <sysEnter_Vector-0x12f93d>
 671:	65                   	gs
 672:	71 75                	jno    6e9 <sysEnter_Vector-0x12f917>
 674:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 67b:	75 6c                	jne    6e9 <sysEnter_Vector-0x12f917>
 67d:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 684:	75 65                	jne    6eb <sysEnter_Vector-0x12f915>
 686:	73 74                	jae    6fc <sysEnter_Vector-0x12f904>
 688:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 68b:	63 2f                	arpl   WORD PTR [edi],bp
 68d:	6d                   	ins    DWORD PTR es:[edi],dx
 68e:	61                   	popa   
 68f:	6c                   	ins    BYTE PTR es:[edi],dx
 690:	6c                   	ins    BYTE PTR es:[edi],dx
 691:	6f                   	outs   dx,DWORD PTR ds:[esi]
 692:	63 2e                	arpl   WORD PTR [esi],bp
 694:	63 00                	arpl   WORD PTR [eax],ax
 696:	66                   	data16
 697:	72 65                	jb     6fe <sysEnter_Vector-0x12f902>
 699:	65                   	gs
 69a:	49                   	dec    ecx
 69b:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 69e:	65                   	gs
 69f:	76 00                	jbe    6a1 <sysEnter_Vector-0x12f95f>
 6a1:	68 65 61 70 72       	push   0x72706165
 6a6:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 6aa:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6ad:	63 2f                	arpl   WORD PTR [edi],bp
 6af:	6d                   	ins    DWORD PTR es:[edi],dx
 6b0:	65                   	gs
 6b1:	6d                   	ins    DWORD PTR es:[edi],dx
 6b2:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6b5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 6b8:	64                   	fs
 6b9:	65                   	gs
 6ba:	73 74                	jae    730 <sysEnter_Vector-0x12f8d0>
 6bc:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6bf:	6d                   	ins    DWORD PTR es:[edi],dx
 6c0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6c3:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 6c6:	61                   	popa   
 6c7:	6c                   	ins    BYTE PTR es:[edi],dx
 6c8:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6cb:	6d                   	ins    DWORD PTR es:[edi],dx
 6cc:	73 65                	jae    733 <sysEnter_Vector-0x12f8cd>
 6ce:	74 00                	je     6d0 <sysEnter_Vector-0x12f930>
 6d0:	73 72                	jae    744 <sysEnter_Vector-0x12f8bc>
 6d2:	63 2f                	arpl   WORD PTR [edi],bp
 6d4:	6d                   	ins    DWORD PTR es:[edi],dx
 6d5:	65                   	gs
 6d6:	6d                   	ins    DWORD PTR es:[edi],dx
 6d7:	73 65                	jae    73e <sysEnter_Vector-0x12f8c2>
 6d9:	74 2e                	je     709 <sysEnter_Vector-0x12f8f7>
 6db:	63 00                	arpl   WORD PTR [eax],ax
 6dd:	66 56                	push   si
 6df:	61                   	popa   
 6e0:	6c                   	ins    BYTE PTR es:[edi],dx
 6e1:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6e4:	6d                   	ins    DWORD PTR es:[edi],dx
 6e5:	73 65                	jae    74c <sysEnter_Vector-0x12f8b4>
 6e7:	74 49                	je     732 <sysEnter_Vector-0x12f8ce>
 6e9:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 6ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6ed:	74 31                	je     720 <sysEnter_Vector-0x12f8e0>
 6ef:	36                   	ss
 6f0:	5f                   	pop    edi
 6f1:	74 00                	je     6f3 <sysEnter_Vector-0x12f90d>
 6f3:	61                   	popa   
 6f4:	64                   	fs
 6f5:	64                   	fs
 6f6:	72 00                	jb     6f8 <sysEnter_Vector-0x12f908>
 6f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6f9:	66 66 5f             	data32 pop di
 6fc:	74 00                	je     6fe <sysEnter_Vector-0x12f902>
 6fe:	70 72                	jo     772 <sysEnter_Vector-0x12f88e>
 700:	6f                   	outs   dx,DWORD PTR ds:[esi]
 701:	74 00                	je     703 <sysEnter_Vector-0x12f8fd>
 703:	6f                   	outs   dx,DWORD PTR ds:[esi]
 704:	66                   	data16
 705:	66                   	data16
 706:	73 65                	jae    76d <sysEnter_Vector-0x12f893>
 708:	74 00                	je     70a <sysEnter_Vector-0x12f8f6>
 70a:	6d                   	ins    DWORD PTR es:[edi],dx
 70b:	6d                   	ins    DWORD PTR es:[edi],dx
 70c:	61                   	popa   
 70d:	70 00                	jo     70f <sysEnter_Vector-0x12f8f1>
 70f:	73 72                	jae    783 <sysEnter_Vector-0x12f87d>
 711:	63 2f                	arpl   WORD PTR [edi],bp
 713:	6d                   	ins    DWORD PTR es:[edi],dx
 714:	6d                   	ins    DWORD PTR es:[edi],dx
 715:	61                   	popa   
 716:	70 2e                	jo     746 <sysEnter_Vector-0x12f8ba>
 718:	63 00                	arpl   WORD PTR [eax],ax
 71a:	73 5f                	jae    77b <sysEnter_Vector-0x12f885>
 71c:	64                   	fs
 71d:	65                   	gs
 71e:	76 00                	jbe    720 <sysEnter_Vector-0x12f8e0>
 720:	75 69                	jne    78b <sysEnter_Vector-0x12f875>
 722:	6e                   	outs   dx,BYTE PTR ds:[esi]
 723:	74 36                	je     75b <sysEnter_Vector-0x12f8a5>
 725:	34 5f                	xor    al,0x5f
 727:	74 00                	je     729 <sysEnter_Vector-0x12f8d7>
 729:	6d                   	ins    DWORD PTR es:[edi],dx
 72a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 72b:	74 5f                	je     78c <sysEnter_Vector-0x12f874>
 72d:	66                   	data16
 72e:	6c                   	ins    BYTE PTR es:[edi],dx
 72f:	61                   	popa   
 730:	67 73 00             	addr16 jae 733 <sysEnter_Vector-0x12f8cd>
 733:	6d                   	ins    DWORD PTR es:[edi],dx
 734:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 738:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 73b:	78 74                	js     7b1 <sysEnter_Vector-0x12f84f>
 73d:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 740:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 747:	66 
 748:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 74b:	74 5f                	je     7ac <sysEnter_Vector-0x12f854>
 74d:	73 62                	jae    7b1 <sysEnter_Vector-0x12f84f>
 74f:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 752:	6c                   	ins    BYTE PTR es:[edi],dx
 753:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 75a:	65                   	gs
 75b:	72 5f                	jb     7bc <sysEnter_Vector-0x12f844>
 75d:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 761:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 764:	5f                   	pop    edi
 765:	76 66                	jbe    7cd <sysEnter_Vector-0x12f833>
 767:	73 6d                	jae    7d6 <sysEnter_Vector-0x12f82a>
 769:	6f                   	outs   dx,DWORD PTR ds:[esi]
 76a:	75 6e                	jne    7da <sysEnter_Vector-0x12f826>
 76c:	74 00                	je     76e <sysEnter_Vector-0x12f892>
 76e:	72 65                	jb     7d5 <sysEnter_Vector-0x12f82b>
 770:	6e                   	outs   dx,BYTE PTR ds:[esi]
 771:	61                   	popa   
 772:	6d                   	ins    DWORD PTR es:[edi],dx
 773:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 778:	61                   	popa   
 779:	6d                   	ins    DWORD PTR es:[edi],dx
 77a:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 77e:	63 2f                	arpl   WORD PTR [edi],bp
 780:	73 74                	jae    7f6 <sysEnter_Vector-0x12f80a>
 782:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 789:	65 
 78a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 78b:	74 72                	je     7ff <sysEnter_Vector-0x12f801>
 78d:	79 00                	jns    78f <sysEnter_Vector-0x12f871>
 78f:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 796:	65                   	gs
 797:	72 61                	jb     7fa <sysEnter_Vector-0x12f806>
 799:	74 69                	je     804 <sysEnter_Vector-0x12f7fc>
 79b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 79c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 79d:	73 00                	jae    79f <sysEnter_Vector-0x12f861>
 79f:	72 6d                	jb     80e <sysEnter_Vector-0x12f7f2>
 7a1:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 7a8:	69 
 7a9:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 7ae:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 7b5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7b6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7b7:	64                   	fs
 7b8:	65                   	gs
 7b9:	5f                   	pop    edi
 7ba:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7bb:	70 65                	jo     822 <sysEnter_Vector-0x12f7de>
 7bd:	72 61                	jb     820 <sysEnter_Vector-0x12f7e0>
 7bf:	74 69                	je     82a <sysEnter_Vector-0x12f7d6>
 7c1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7c2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7c3:	73 00                	jae    7c5 <sysEnter_Vector-0x12f83b>
 7c5:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 7cc:	67 73 00             	addr16 jae 7cf <sysEnter_Vector-0x12f831>
 7cf:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 7d6:	65                   	gs
 7d7:	72 61                	jb     83a <sysEnter_Vector-0x12f7c6>
 7d9:	74 69                	je     844 <sysEnter_Vector-0x12f7bc>
 7db:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7dc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7dd:	73 5f                	jae    83e <sysEnter_Vector-0x12f7c2>
 7df:	74 00                	je     7e1 <sysEnter_Vector-0x12f81f>
 7e1:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 7e4:	66 50                	push   ax
 7e6:	74 72                	je     85a <sysEnter_Vector-0x12f7a6>
 7e8:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 7eb:	64                   	fs
 7ec:	65                   	gs
 7ed:	76 00                	jbe    7ef <sysEnter_Vector-0x12f811>
 7ef:	77 72                	ja     863 <sysEnter_Vector-0x12f79d>
 7f1:	69 74 65 00 70 61 79 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6c796170
 7f8:	6c 
 7f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7fa:	61                   	popa   
 7fb:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 7ff:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 806:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 809:	6f                   	outs   dx,DWORD PTR ds:[esi]
 80a:	70 00                	jo     80c <sysEnter_Vector-0x12f7f4>
 80c:	6d                   	ins    DWORD PTR es:[edi],dx
 80d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 80e:	74 5f                	je     86f <sysEnter_Vector-0x12f791>
 810:	72 6f                	jb     881 <sysEnter_Vector-0x12f77f>
 812:	6f                   	outs   dx,DWORD PTR ds:[esi]
 813:	74 00                	je     815 <sysEnter_Vector-0x12f7eb>
 815:	66 6f                	outs   dx,WORD PTR ds:[esi]
 817:	70 73                	jo     88c <sysEnter_Vector-0x12f774>
 819:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 81c:	6c                   	ins    BYTE PTR es:[edi],dx
 81d:	65                   	gs
 81e:	5f                   	pop    edi
 81f:	74 00                	je     821 <sysEnter_Vector-0x12f7df>
 821:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 828:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 82b:	75 69                	jne    896 <sysEnter_Vector-0x12f76a>
 82d:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 831:	6d                   	ins    DWORD PTR es:[edi],dx
 832:	6f                   	outs   dx,DWORD PTR ds:[esi]
 833:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 838:	6e                   	outs   dx,BYTE PTR ds:[esi]
 839:	73 6f                	jae    8aa <sysEnter_Vector-0x12f756>
 83b:	6c                   	ins    BYTE PTR es:[edi],dx
 83c:	65                   	gs
 83d:	5f                   	pop    edi
 83e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 83f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 840:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 845:	6f                   	outs   dx,DWORD PTR ds:[esi]
 846:	64                   	fs
 847:	65                   	gs
 848:	5f                   	pop    edi
 849:	74 00                	je     84b <sysEnter_Vector-0x12f7b5>
 84b:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 84e:	73 6f                	jae    8bf <sysEnter_Vector-0x12f741>
 850:	6c                   	ins    BYTE PTR es:[edi],dx
 851:	65                   	gs
 852:	5f                   	pop    edi
 853:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 85a:	72 6f                	jb     8cb <sysEnter_Vector-0x12f735>
 85c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 85d:	74 00                	je     85f <sysEnter_Vector-0x12f7a1>
 85f:	64                   	fs
 860:	5f                   	pop    edi
 861:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 868:	65                   	gs
 869:	73 65                	jae    8d0 <sysEnter_Vector-0x12f730>
 86b:	74 52                	je     8bf <sysEnter_Vector-0x12f741>
 86d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 86e:	77 00                	ja     870 <sysEnter_Vector-0x12f790>
 870:	64                   	fs
 871:	5f                   	pop    edi
 872:	70 61                	jo     8d5 <sysEnter_Vector-0x12f72b>
 874:	72 65                	jb     8db <sysEnter_Vector-0x12f725>
 876:	6e                   	outs   dx,BYTE PTR ds:[esi]
 877:	74 00                	je     879 <sysEnter_Vector-0x12f787>
 879:	66 5f                	pop    di
 87b:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 882:	5f                   	pop    edi
 883:	70 61                	jo     8e6 <sysEnter_Vector-0x12f71a>
 885:	74 68                	je     8ef <sysEnter_Vector-0x12f711>
 887:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 88a:	65                   	gs
 88b:	61                   	popa   
 88c:	74 65                	je     8f3 <sysEnter_Vector-0x12f70d>
 88e:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 891:	6e                   	outs   dx,BYTE PTR ds:[esi]
 892:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 895:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 897:	61                   	popa   
 898:	74 65                	je     8ff <sysEnter_Vector-0x12f701>
 89a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 89d:	72 63                	jb     902 <sysEnter_Vector-0x12f6fe>
 89f:	61                   	popa   
 8a0:	74 49                	je     8eb <sysEnter_Vector-0x12f715>
 8a2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 8a5:	72 63                	jb     90a <sysEnter_Vector-0x12f6f6>
 8a7:	61                   	popa   
 8a8:	74 00                	je     8aa <sysEnter_Vector-0x12f756>
 8aa:	73 72                	jae    91e <sysEnter_Vector-0x12f6e2>
 8ac:	63 2f                	arpl   WORD PTR [edi],bp
 8ae:	73 74                	jae    924 <sysEnter_Vector-0x12f6dc>
 8b0:	72 69                	jb     91b <sysEnter_Vector-0x12f6e5>
 8b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8b3:	67 73 2f             	addr16 jae 8e5 <sysEnter_Vector-0x12f71b>
 8b6:	73 74                	jae    92c <sysEnter_Vector-0x12f6d4>
 8b8:	72 63                	jb     91d <sysEnter_Vector-0x12f6e3>
 8ba:	61                   	popa   
 8bb:	74 2e                	je     8eb <sysEnter_Vector-0x12f715>
 8bd:	63 00                	arpl   WORD PTR [eax],ax
 8bf:	73 74                	jae    935 <sysEnter_Vector-0x12f6cb>
 8c1:	72 63                	jb     926 <sysEnter_Vector-0x12f6da>
 8c3:	6d                   	ins    DWORD PTR es:[edi],dx
 8c4:	70 00                	jo     8c6 <sysEnter_Vector-0x12f73a>
 8c6:	73 72                	jae    93a <sysEnter_Vector-0x12f6c6>
 8c8:	63 2f                	arpl   WORD PTR [edi],bp
 8ca:	73 74                	jae    940 <sysEnter_Vector-0x12f6c0>
 8cc:	72 69                	jb     937 <sysEnter_Vector-0x12f6c9>
 8ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8cf:	67 73 2f             	addr16 jae 901 <sysEnter_Vector-0x12f6ff>
 8d2:	73 74                	jae    948 <sysEnter_Vector-0x12f6b8>
 8d4:	72 63                	jb     939 <sysEnter_Vector-0x12f6c7>
 8d6:	6d                   	ins    DWORD PTR es:[edi],dx
 8d7:	70 2e                	jo     907 <sysEnter_Vector-0x12f6f9>
 8d9:	63 00                	arpl   WORD PTR [eax],ax
 8db:	73 74                	jae    951 <sysEnter_Vector-0x12f6af>
 8dd:	72 63                	jb     942 <sysEnter_Vector-0x12f6be>
 8df:	70 79                	jo     95a <sysEnter_Vector-0x12f6a6>
 8e1:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 8e4:	75 6e                	jne    954 <sysEnter_Vector-0x12f6ac>
 8e6:	74 00                	je     8e8 <sysEnter_Vector-0x12f718>
 8e8:	73 74                	jae    95e <sysEnter_Vector-0x12f6a2>
 8ea:	72 63                	jb     94f <sysEnter_Vector-0x12f6b1>
 8ec:	70 79                	jo     967 <sysEnter_Vector-0x12f699>
 8ee:	63 00                	arpl   WORD PTR [eax],ax
 8f0:	73 74                	jae    966 <sysEnter_Vector-0x12f69a>
 8f2:	72 63                	jb     957 <sysEnter_Vector-0x12f6a9>
 8f4:	70 79                	jo     96f <sysEnter_Vector-0x12f691>
 8f6:	49                   	dec    ecx
 8f7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8fa:	63 2f                	arpl   WORD PTR [edi],bp
 8fc:	73 74                	jae    972 <sysEnter_Vector-0x12f68e>
 8fe:	72 69                	jb     969 <sysEnter_Vector-0x12f697>
 900:	6e                   	outs   dx,BYTE PTR ds:[esi]
 901:	67 73 2f             	addr16 jae 933 <sysEnter_Vector-0x12f6cd>
 904:	73 74                	jae    97a <sysEnter_Vector-0x12f686>
 906:	72 63                	jb     96b <sysEnter_Vector-0x12f695>
 908:	70 79                	jo     983 <sysEnter_Vector-0x12f67d>
 90a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 90d:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 910:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 913:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 91a:	74 
 91b:	72 69                	jb     986 <sysEnter_Vector-0x12f67a>
 91d:	73 6e                	jae    98d <sysEnter_Vector-0x12f673>
 91f:	75 6d                	jne    98e <sysEnter_Vector-0x12f672>
 921:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 924:	63 2f                	arpl   WORD PTR [edi],bp
 926:	73 74                	jae    99c <sysEnter_Vector-0x12f664>
 928:	72 69                	jb     993 <sysEnter_Vector-0x12f66d>
 92a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 92b:	67 73 2f             	addr16 jae 95d <sysEnter_Vector-0x12f6a3>
 92e:	73 74                	jae    9a4 <sysEnter_Vector-0x12f65c>
 930:	72 69                	jb     99b <sysEnter_Vector-0x12f665>
 932:	73 6e                	jae    9a2 <sysEnter_Vector-0x12f65e>
 934:	75 6d                	jne    9a3 <sysEnter_Vector-0x12f65d>
 936:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 939:	73 74                	jae    9af <sysEnter_Vector-0x12f651>
 93b:	72 6c                	jb     9a9 <sysEnter_Vector-0x12f657>
 93d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 93f:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 942:	63 2f                	arpl   WORD PTR [edi],bp
 944:	73 74                	jae    9ba <sysEnter_Vector-0x12f646>
 946:	72 69                	jb     9b1 <sysEnter_Vector-0x12f64f>
 948:	6e                   	outs   dx,BYTE PTR ds:[esi]
 949:	67 73 2f             	addr16 jae 97b <sysEnter_Vector-0x12f685>
 94c:	73 74                	jae    9c2 <sysEnter_Vector-0x12f63e>
 94e:	72 6c                	jb     9bc <sysEnter_Vector-0x12f644>
 950:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 952:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 955:	73 74                	jae    9cb <sysEnter_Vector-0x12f635>
 957:	72 6c                	jb     9c5 <sysEnter_Vector-0x12f63b>
 959:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 95b:	49                   	dec    ecx
 95c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 95f:	72 6e                	jb     9cf <sysEnter_Vector-0x12f631>
 961:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 964:	49                   	dec    ecx
 965:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 968:	72 6e                	jb     9d8 <sysEnter_Vector-0x12f628>
 96a:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 96d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 970:	63 2f                	arpl   WORD PTR [edi],bp
 972:	73 74                	jae    9e8 <sysEnter_Vector-0x12f618>
 974:	72 69                	jb     9df <sysEnter_Vector-0x12f621>
 976:	6e                   	outs   dx,BYTE PTR ds:[esi]
 977:	67 73 2f             	addr16 jae 9a9 <sysEnter_Vector-0x12f657>
 97a:	73 74                	jae    9f0 <sysEnter_Vector-0x12f610>
 97c:	72 6e                	jb     9ec <sysEnter_Vector-0x12f614>
 97e:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 981:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 984:	73 72                	jae    9f8 <sysEnter_Vector-0x12f608>
 986:	63 2f                	arpl   WORD PTR [edi],bp
 988:	73 74                	jae    9fe <sysEnter_Vector-0x12f602>
 98a:	72 69                	jb     9f5 <sysEnter_Vector-0x12f60b>
 98c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 98d:	67 73 2f             	addr16 jae 9bf <sysEnter_Vector-0x12f641>
 990:	73 74                	jae    a06 <sysEnter_Vector-0x12f5fa>
 992:	72 6e                	jb     a02 <sysEnter_Vector-0x12f5fe>
 994:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 997:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 99a:	73 74                	jae    a10 <sysEnter_Vector-0x12f5f0>
 99c:	72 6e                	jb     a0c <sysEnter_Vector-0x12f5f4>
 99e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9a1:	49                   	dec    ecx
 9a2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9a5:	72 6e                	jb     a15 <sysEnter_Vector-0x12f5eb>
 9a7:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9aa:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9ad:	63 2f                	arpl   WORD PTR [edi],bp
 9af:	73 74                	jae    a25 <sysEnter_Vector-0x12f5db>
 9b1:	72 69                	jb     a1c <sysEnter_Vector-0x12f5e4>
 9b3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9b4:	67 73 2f             	addr16 jae 9e6 <sysEnter_Vector-0x12f61a>
 9b7:	73 74                	jae    a2d <sysEnter_Vector-0x12f5d3>
 9b9:	72 6f                	jb     a2a <sysEnter_Vector-0x12f5d6>
 9bb:	75 6c                	jne    a29 <sysEnter_Vector-0x12f5d7>
 9bd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9c0:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 9c3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9c4:	66                   	data16
 9c5:	66                   	data16
 9c6:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 9c9:	74 6c                	je     a37 <sysEnter_Vector-0x12f5c9>
 9cb:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 9d2:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9d3:	75 6c                	jne    a41 <sysEnter_Vector-0x12f5bf>
 9d5:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 9d8:	64                   	fs
 9d9:	70 74                	jo     a4f <sysEnter_Vector-0x12f5b1>
 9db:	72 00                	jb     9dd <sysEnter_Vector-0x12f623>
 9dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9de:	70 74                	jo     a54 <sysEnter_Vector-0x12f5ac>
 9e0:	72 00                	jb     9e2 <sysEnter_Vector-0x12f61e>
 9e2:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 9e5:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 9e9:	63 2f                	arpl   WORD PTR [edi],bp
 9eb:	73 74                	jae    a61 <sysEnter_Vector-0x12f59f>
 9ed:	72 69                	jb     a58 <sysEnter_Vector-0x12f5a8>
 9ef:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9f0:	67 73 2f             	addr16 jae a22 <sysEnter_Vector-0x12f5de>
 9f3:	73 74                	jae    a69 <sysEnter_Vector-0x12f597>
 9f5:	72 70                	jb     a67 <sysEnter_Vector-0x12f599>
 9f7:	61                   	popa   
 9f8:	72 74                	jb     a6e <sysEnter_Vector-0x12f592>
 9fa:	73 2e                	jae    a2a <sysEnter_Vector-0x12f5d6>
 9fc:	63 00                	arpl   WORD PTR [eax],ax
 9fe:	73 74                	jae    a74 <sysEnter_Vector-0x12f58c>
 a00:	72 6c                	jb     a6e <sysEnter_Vector-0x12f592>
 a02:	65                   	gs
 a03:	66                   	data16
 a04:	74 00                	je     a06 <sysEnter_Vector-0x12f5fa>
 a06:	73 72                	jae    a7a <sysEnter_Vector-0x12f586>
 a08:	63 2f                	arpl   WORD PTR [edi],bp
 a0a:	73 74                	jae    a80 <sysEnter_Vector-0x12f580>
 a0c:	72 69                	jb     a77 <sysEnter_Vector-0x12f589>
 a0e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a0f:	67 73 2f             	addr16 jae a41 <sysEnter_Vector-0x12f5bf>
 a12:	73 74                	jae    a88 <sysEnter_Vector-0x12f578>
 a14:	72 74                	jb     a8a <sysEnter_Vector-0x12f576>
 a16:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a17:	6c                   	ins    BYTE PTR es:[edi],dx
 a18:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a1b:	73 74                	jae    a91 <sysEnter_Vector-0x12f56f>
 a1d:	72 74                	jb     a93 <sysEnter_Vector-0x12f56d>
 a1f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a20:	6c                   	ins    BYTE PTR es:[edi],dx
 a21:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 a24:	70 75                	jo     a9b <sysEnter_Vector-0x12f565>
 a26:	74 00                	je     a28 <sysEnter_Vector-0x12f5d8>
 a28:	73 72                	jae    a9c <sysEnter_Vector-0x12f564>
 a2a:	63 2f                	arpl   WORD PTR [edi],bp
 a2c:	73 74                	jae    aa2 <sysEnter_Vector-0x12f55e>
 a2e:	72 69                	jb     a99 <sysEnter_Vector-0x12f567>
 a30:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a31:	67 73 2f             	addr16 jae a63 <sysEnter_Vector-0x12f59d>
 a34:	73 74                	jae    aaa <sysEnter_Vector-0x12f556>
 a36:	72 74                	jb     aac <sysEnter_Vector-0x12f554>
 a38:	72 69                	jb     aa3 <sysEnter_Vector-0x12f55d>
 a3a:	6d                   	ins    DWORD PTR es:[edi],dx
 a3b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a3e:	73 74                	jae    ab4 <sysEnter_Vector-0x12f54c>
 a40:	72 74                	jb     ab6 <sysEnter_Vector-0x12f54a>
 a42:	72 69                	jb     aad <sysEnter_Vector-0x12f553>
 a44:	6d                   	ins    DWORD PTR es:[edi],dx
 a45:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a48:	72 74                	jb     abe <sysEnter_Vector-0x12f542>
 a4a:	72 69                	jb     ab5 <sysEnter_Vector-0x12f54b>
 a4c:	6d                   	ins    DWORD PTR es:[edi],dx
 a4d:	49                   	dec    ecx
 a4e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a51:	72 73                	jb     ac6 <sysEnter_Vector-0x12f53a>
 a53:	74 72                	je     ac7 <sysEnter_Vector-0x12f539>
 a55:	49                   	dec    ecx
 a56:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a59:	63 2f                	arpl   WORD PTR [edi],bp
 a5b:	73 74                	jae    ad1 <sysEnter_Vector-0x12f52f>
 a5d:	72 73                	jb     ad2 <sysEnter_Vector-0x12f52e>
 a5f:	74 72                	je     ad3 <sysEnter_Vector-0x12f52d>
 a61:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a64:	73 74                	jae    ada <sysEnter_Vector-0x12f526>
 a66:	72 73                	jb     adb <sysEnter_Vector-0x12f525>
 a68:	74 72                	je     adc <sysEnter_Vector-0x12f524>
 a6a:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 a6d:	73 69                	jae    ad8 <sysEnter_Vector-0x12f528>
 a6f:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 a73:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 a76:	72 69                	jb     ae1 <sysEnter_Vector-0x12f51f>
 a78:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a79:	67 00 67 65          	add    BYTE PTR [bx+0x65],ah
 a7d:	74 74                	je     af3 <sysEnter_Vector-0x12f50d>
 a7f:	69 63 6b 73 00 74 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d740073
 a86:	5f                   	pop    edi
 a87:	7a 6f                	jp     af8 <sysEnter_Vector-0x12f508>
 a89:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a8a:	65 00 64 61 79       	add    BYTE PTR gs:[ecx+eiz*2+0x79],ah
 a8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a90:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a91:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 a94:	73 74                	jae    b0a <sysEnter_Vector-0x12f4f6>
 a96:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 a99:	73 00                	jae    a9b <sysEnter_Vector-0x12f565>
 a9b:	67 6d                	ins    DWORD PTR es:[di],dx
 a9d:	74 69                	je     b08 <sysEnter_Vector-0x12f4f8>
 a9f:	6d                   	ins    DWORD PTR es:[edi],dx
 aa0:	65                   	gs
 aa1:	5f                   	pop    edi
 aa2:	72 49                	jb     aed <sysEnter_Vector-0x12f513>
 aa4:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 aa8:	77 64                	ja     b0e <sysEnter_Vector-0x12f4f2>
 aaa:	61                   	popa   
 aab:	79 00                	jns    aad <sysEnter_Vector-0x12f553>
 aad:	74 6d                	je     b1c <sysEnter_Vector-0x12f4e4>
 aaf:	5f                   	pop    edi
 ab0:	67 6d                	ins    DWORD PTR es:[di],dx
 ab2:	74 6f                	je     b23 <sysEnter_Vector-0x12f4dd>
 ab4:	66                   	data16
 ab5:	66                   	data16
 ab6:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 aba:	61                   	popa   
 abb:	6c                   	ins    BYTE PTR es:[edi],dx
 abc:	74 69                	je     b27 <sysEnter_Vector-0x12f4d9>
 abe:	6d                   	ins    DWORD PTR es:[edi],dx
 abf:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 ac4:	65                   	gs
 ac5:	5f                   	pop    edi
 ac6:	74 00                	je     ac8 <sysEnter_Vector-0x12f538>
 ac8:	67 6d                	ins    DWORD PTR es:[di],dx
 aca:	74 69                	je     b35 <sysEnter_Vector-0x12f4cb>
 acc:	6d                   	ins    DWORD PTR es:[edi],dx
 acd:	65                   	gs
 ace:	5f                   	pop    edi
 acf:	72 00                	jb     ad1 <sysEnter_Vector-0x12f52f>
 ad1:	74 69                	je     b3c <sysEnter_Vector-0x12f4c4>
 ad3:	6d                   	ins    DWORD PTR es:[edi],dx
 ad4:	65                   	gs
 ad5:	72 00                	jb     ad7 <sysEnter_Vector-0x12f529>
 ad7:	6c                   	ins    BYTE PTR es:[edi],dx
 ad8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ad9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 adc:	74 69                	je     b47 <sysEnter_Vector-0x12f4b9>
 ade:	6d                   	ins    DWORD PTR es:[edi],dx
 adf:	65                   	gs
 ae0:	5f                   	pop    edi
 ae1:	72 00                	jb     ae3 <sysEnter_Vector-0x12f51d>
 ae3:	74 6d                	je     b52 <sysEnter_Vector-0x12f4ae>
 ae5:	5f                   	pop    edi
 ae6:	68 6f 75 72 00       	push   0x72756f
 aeb:	5f                   	pop    edi
 aec:	74 7a                	je     b68 <sysEnter_Vector-0x12f498>
 aee:	6e                   	outs   dx,BYTE PTR ds:[esi]
 aef:	61                   	popa   
 af0:	6d                   	ins    DWORD PTR es:[edi],dx
 af1:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 af6:	6d                   	ins    DWORD PTR es:[edi],dx
 af7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 af8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 af9:	00 5f 79             	add    BYTE PTR [edi+0x79],bl
 afc:	74 61                	je     b5f <sysEnter_Vector-0x12f4a1>
 afe:	62 00                	bound  eax,QWORD PTR [eax]
 b00:	6c                   	ins    BYTE PTR es:[edi],dx
 b01:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b02:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b05:	74 69                	je     b70 <sysEnter_Vector-0x12f490>
 b07:	6d                   	ins    DWORD PTR es:[edi],dx
 b08:	65                   	gs
 b09:	5f                   	pop    edi
 b0a:	72 49                	jb     b55 <sysEnter_Vector-0x12f4ab>
 b0c:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 b10:	61                   	popa   
 b11:	6c                   	ins    BYTE PTR es:[edi],dx
 b12:	54                   	push   esp
 b13:	69 6d 65 00 74 69 63 	imul   ebp,DWORD PTR [ebp+0x65],0x63697400
 b1a:	6b 73 54 6f          	imul   esi,DWORD PTR [ebx+0x54],0x6f
 b1e:	57                   	push   edi
 b1f:	61                   	popa   
 b20:	69 74 00 6d 6b 74 69 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x6d69746b
 b27:	6d 
 b28:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 b2d:	79 65                	jns    b94 <sysEnter_Vector-0x12f46c>
 b2f:	61                   	popa   
 b30:	72 00                	jb     b32 <sysEnter_Vector-0x12f4ce>
 b32:	64                   	fs
 b33:	61                   	popa   
 b34:	79 63                	jns    b99 <sysEnter_Vector-0x12f467>
 b36:	6c                   	ins    BYTE PTR es:[edi],dx
 b37:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b38:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 b3b:	74 6d                	je     baa <sysEnter_Vector-0x12f456>
 b3d:	5f                   	pop    edi
 b3e:	6d                   	ins    DWORD PTR es:[edi],dx
 b3f:	64                   	fs
 b40:	61                   	popa   
 b41:	79 00                	jns    b43 <sysEnter_Vector-0x12f4bd>
 b43:	5f                   	pop    edi
 b44:	64                   	fs
 b45:	61                   	popa   
 b46:	79 6c                	jns    bb4 <sysEnter_Vector-0x12f44c>
 b48:	69 67 68 74 00 74 6d 	imul   esp,DWORD PTR [edi+0x68],0x6d740074
 b4f:	5f                   	pop    edi
 b50:	79 64                	jns    bb6 <sysEnter_Vector-0x12f44a>
 b52:	61                   	popa   
 b53:	79 00                	jns    b55 <sysEnter_Vector-0x12f4ab>
 b55:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b56:	76 65                	jbe    bbd <sysEnter_Vector-0x12f443>
 b58:	72 66                	jb     bc0 <sysEnter_Vector-0x12f440>
 b5a:	6c                   	ins    BYTE PTR es:[edi],dx
 b5b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b5c:	77 00                	ja     b5e <sysEnter_Vector-0x12f4a2>
 b5e:	6d                   	ins    DWORD PTR es:[edi],dx
 b5f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b60:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b61:	74 68                	je     bcb <sysEnter_Vector-0x12f435>
 b63:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b67:	6d                   	ins    DWORD PTR es:[edi],dx
 b68:	69 6e 00 74 6d 5f 69 	imul   ebp,DWORD PTR [esi+0x0],0x695f6d74
 b6f:	73 64                	jae    bd5 <sysEnter_Vector-0x12f42b>
 b71:	73 74                	jae    be7 <sysEnter_Vector-0x12f419>
 b73:	00 74 6d 62          	add    BYTE PTR [ebp+ebp*2+0x62],dh
 b77:	75 66                	jne    bdf <sysEnter_Vector-0x12f421>
 b79:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b7c:	63 2f                	arpl   WORD PTR [edi],bp
 b7e:	74 69                	je     be9 <sysEnter_Vector-0x12f417>
 b80:	6d                   	ins    DWORD PTR es:[edi],dx
 b81:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 b85:	67                   	addr16
 b86:	65                   	gs
 b87:	74 74                	je     bfd <sysEnter_Vector-0x12f403>
 b89:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 b90:	73 65                	jae    bf7 <sysEnter_Vector-0x12f409>
 b92:	63 00                	arpl   WORD PTR [eax],ax

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
