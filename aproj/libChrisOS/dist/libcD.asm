
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 b7 3e 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000008:	05 a4 61 00 00       	add    eax,0x61a4
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 7f 3e 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000040:	05 6c 61 00 00       	add    eax,0x616c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 45 3e 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00007a:	05 32 61 00 00       	add    eax,0x6132
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 f0 3d 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0000cf:	05 dd 60 00 00       	add    eax,0x60dd
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 ea 3d 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 86 60 00 00    	add    ebx,0x6086
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 50 00 00 00    	mov    DWORD PTR [ebx+0x50],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 50 00 00 00    	mov    eax,DWORD PTR [ebx+0x50]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 50 00 00 00    	mov    DWORD PTR [ebx+0x50],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    
9f0001b3:	90                   	nop

9f0001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f0001b4:	55                   	push   ebp
9f0001b5:	89 e5                	mov    ebp,esp
9f0001b7:	53                   	push   ebx
9f0001b8:	83 ec 14             	sub    esp,0x14
9f0001bb:	e8 ff 3c 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0001c0:	05 ec 5f 00 00       	add    eax,0x5fec
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f0001cc:	83 ec 0c             	sub    esp,0xc
9f0001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0001d2:	89 c3                	mov    ebx,eax
9f0001d4:	e8 4f 27 00 00       	call   9f002928 <strlenI>
9f0001d9:	83 c4 10             	add    esp,0x10
9f0001dc:	83 e8 01             	sub    eax,0x1
9f0001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0001e2:	eb 39                	jmp    9f00021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f0001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001ea:	01 d0                	add    eax,edx
9f0001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f0001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001f8:	01 c2                	add    edx,eax
9f0001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000200:	01 c8                	add    eax,ecx
9f000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00020d:	01 c2                	add    edx,eax
9f00020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f00021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f000223:	7c bf                	jl     9f0001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f000225:	90                   	nop
9f000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000229:	c9                   	leave  
9f00022a:	c3                   	ret    

9f00022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f00022b:	55                   	push   ebp
9f00022c:	89 e5                	mov    ebp,esp
9f00022e:	53                   	push   ebx
9f00022f:	83 ec 14             	sub    esp,0x14
9f000232:	e8 88 3c 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000237:	05 75 5f 00 00       	add    eax,0x5f75
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000246:	79 03                	jns    9f00024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f00024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000255:	8d 50 01             	lea    edx,[eax+0x1]
9f000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00025b:	89 c2                	mov    edx,eax
9f00025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000266:	ba 67 66 66 66       	mov    edx,0x66666667
9f00026b:	89 c8                	mov    eax,ecx
9f00026d:	f7 ea                	imul   edx
9f00026f:	c1 fa 02             	sar    edx,0x2
9f000272:	89 c8                	mov    eax,ecx
9f000274:	c1 f8 1f             	sar    eax,0x1f
9f000277:	29 c2                	sub    edx,eax
9f000279:	89 d0                	mov    eax,edx
9f00027b:	c1 e0 02             	shl    eax,0x2
9f00027e:	01 d0                	add    eax,edx
9f000280:	01 c0                	add    eax,eax
9f000282:	29 c1                	sub    ecx,eax
9f000284:	89 ca                	mov    edx,ecx
9f000286:	89 d0                	mov    eax,edx
9f000288:	83 c0 30             	add    eax,0x30
9f00028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f00028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000290:	ba 67 66 66 66       	mov    edx,0x66666667
9f000295:	89 c8                	mov    eax,ecx
9f000297:	f7 ea                	imul   edx
9f000299:	c1 fa 02             	sar    edx,0x2
9f00029c:	89 c8                	mov    eax,ecx
9f00029e:	c1 f8 1f             	sar    eax,0x1f
9f0002a1:	29 c2                	sub    edx,eax
9f0002a3:	89 d0                	mov    eax,edx
9f0002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0002ac:	7f a4                	jg     9f000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f0002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002b2:	79 13                	jns    9f0002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f0002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002bd:	89 c2                	mov    edx,eax
9f0002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002c2:	01 d0                	add    eax,edx
9f0002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f0002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002cd:	01 d0                	add    eax,edx
9f0002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f0002d2:	83 ec 0c             	sub    esp,0xc
9f0002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0002d8:	e8 d7 fe ff ff       	call   9f0001b4 <reverseI>
9f0002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f0002e0:	90                   	nop
9f0002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002e4:	c9                   	leave  
9f0002e5:	c3                   	ret    

9f0002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f0002e6:	55                   	push   ebp
9f0002e7:	89 e5                	mov    ebp,esp
9f0002e9:	53                   	push   ebx
9f0002ea:	83 ec 14             	sub    esp,0x14
9f0002ed:	e8 cd 3b 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0002f2:	05 ba 5e 00 00       	add    eax,0x5eba
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000301:	79 03                	jns    9f000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f00030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000310:	8d 50 01             	lea    edx,[eax+0x1]
9f000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000316:	89 c2                	mov    edx,eax
9f000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f00031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000321:	ba 67 66 66 66       	mov    edx,0x66666667
9f000326:	89 c8                	mov    eax,ecx
9f000328:	f7 ea                	imul   edx
9f00032a:	c1 fa 02             	sar    edx,0x2
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	c1 f8 1f             	sar    eax,0x1f
9f000332:	29 c2                	sub    edx,eax
9f000334:	89 d0                	mov    eax,edx
9f000336:	c1 e0 02             	shl    eax,0x2
9f000339:	01 d0                	add    eax,edx
9f00033b:	01 c0                	add    eax,eax
9f00033d:	29 c1                	sub    ecx,eax
9f00033f:	89 ca                	mov    edx,ecx
9f000341:	89 d0                	mov    eax,edx
9f000343:	83 c0 30             	add    eax,0x30
9f000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00034b:	ba 67 66 66 66       	mov    edx,0x66666667
9f000350:	89 c8                	mov    eax,ecx
9f000352:	f7 ea                	imul   edx
9f000354:	c1 fa 02             	sar    edx,0x2
9f000357:	89 c8                	mov    eax,ecx
9f000359:	c1 f8 1f             	sar    eax,0x1f
9f00035c:	29 c2                	sub    edx,eax
9f00035e:	89 d0                	mov    eax,edx
9f000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000367:	7f a4                	jg     9f00030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00036d:	79 13                	jns    9f000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f00036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000372:	8d 50 01             	lea    edx,[eax+0x1]
9f000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000378:	89 c2                	mov    edx,eax
9f00037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00037d:	01 d0                	add    eax,edx
9f00037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000388:	01 d0                	add    eax,edx
9f00038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f00038d:	83 ec 0c             	sub    esp,0xc
9f000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000393:	e8 1c fe ff ff       	call   9f0001b4 <reverseI>
9f000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f00039b:	90                   	nop
9f00039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00039f:	c9                   	leave  
9f0003a0:	c3                   	ret    

9f0003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f0003a1:	55                   	push   ebp
9f0003a2:	89 e5                	mov    ebp,esp
9f0003a4:	83 ec 10             	sub    esp,0x10
9f0003a7:	e8 13 3b 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0003ac:	05 00 5e 00 00       	add    eax,0x5e00
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f0003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f0003bf:	eb 28                	jmp    9f0003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f0003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0003c4:	89 d0                	mov    eax,edx
9f0003c6:	c1 e0 02             	shl    eax,0x2
9f0003c9:	01 d0                	add    eax,edx
9f0003cb:	01 c0                	add    eax,eax
9f0003cd:	89 c1                	mov    ecx,eax
9f0003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003d5:	01 d0                	add    eax,edx
9f0003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003da:	0f be c0             	movsx  eax,al
9f0003dd:	01 c8                	add    eax,ecx
9f0003df:	83 e8 30             	sub    eax,0x30
9f0003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f0003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003ef:	01 d0                	add    eax,edx
9f0003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003f4:	84 c0                	test   al,al
9f0003f6:	75 c9                	jne    9f0003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f0003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f0003fb:	c9                   	leave  
9f0003fc:	c3                   	ret    
9f0003fd:	66 90                	xchg   ax,ax
9f0003ff:	90                   	nop

9f000400 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:14
#include "console.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f000400:	55                   	push   ebp
9f000401:	89 e5                	mov    ebp,esp
9f000403:	53                   	push   ebx
9f000404:	83 ec 14             	sub    esp,0x14
9f000407:	e8 04 3b 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f00040c:	81 c3 a0 5d 00 00    	add    ebx,0x5da0
/home/yogi/src/os/aproj/libChrisOS/src/console.c:18
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f000412:	83 ec 08             	sub    esp,0x8
9f000415:	8d 83 34 f9 ff ff    	lea    eax,[ebx-0x6cc]
9f00041b:	50                   	push   eax
9f00041c:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00041f:	50                   	push   eax
9f000420:	e8 ef 23 00 00       	call   9f002814 <strcpyI>
9f000425:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:19
    itoaI(x,xstr);
9f000428:	83 ec 08             	sub    esp,0x8
9f00042b:	8d 45 eb             	lea    eax,[ebp-0x15]
9f00042e:	50                   	push   eax
9f00042f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000432:	e8 af fe ff ff       	call   9f0002e6 <itoaI>
9f000437:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    strcatI(cmd,xstr);
9f00043a:	83 ec 08             	sub    esp,0x8
9f00043d:	8d 45 eb             	lea    eax,[ebp-0x15]
9f000440:	50                   	push   eax
9f000441:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000444:	50                   	push   eax
9f000445:	e8 7c 22 00 00       	call   9f0026c6 <strcatI>
9f00044a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    strcatI(cmd,";");
9f00044d:	83 ec 08             	sub    esp,0x8
9f000450:	8d 83 37 f9 ff ff    	lea    eax,[ebx-0x6c9]
9f000456:	50                   	push   eax
9f000457:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00045a:	50                   	push   eax
9f00045b:	e8 66 22 00 00       	call   9f0026c6 <strcatI>
9f000460:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    itoaI(y,ystr);
9f000463:	83 ec 08             	sub    esp,0x8
9f000466:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000469:	50                   	push   eax
9f00046a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00046d:	e8 74 fe ff ff       	call   9f0002e6 <itoaI>
9f000472:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,ystr);
9f000475:	83 ec 08             	sub    esp,0x8
9f000478:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00047b:	50                   	push   eax
9f00047c:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00047f:	50                   	push   eax
9f000480:	e8 41 22 00 00       	call   9f0026c6 <strcatI>
9f000485:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    strcatI(cmd,"H");
9f000488:	83 ec 08             	sub    esp,0x8
9f00048b:	8d 83 39 f9 ff ff    	lea    eax,[ebx-0x6c7]
9f000491:	50                   	push   eax
9f000492:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000495:	50                   	push   eax
9f000496:	e8 2b 22 00 00       	call   9f0026c6 <strcatI>
9f00049b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f00049e:	83 ec 08             	sub    esp,0x8
9f0004a1:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004a4:	50                   	push   eax
9f0004a5:	8d 83 3b f9 ff ff    	lea    eax,[ebx-0x6c5]
9f0004ab:	50                   	push   eax
9f0004ac:	e8 98 09 00 00       	call   9f000e49 <printfI>
9f0004b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:27
}
9f0004b4:	90                   	nop
9f0004b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0004b8:	c9                   	leave  
9f0004b9:	c3                   	ret    

9f0004ba <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:30

VISIBLE void saveCursorPosition()
{
9f0004ba:	55                   	push   ebp
9f0004bb:	89 e5                	mov    ebp,esp
9f0004bd:	53                   	push   ebx
9f0004be:	83 ec 14             	sub    esp,0x14
9f0004c1:	e8 4a 3a 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f0004c6:	81 c3 e6 5c 00 00    	add    ebx,0x5ce6
/home/yogi/src/os/aproj/libChrisOS/src/console.c:33
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0004cc:	83 ec 08             	sub    esp,0x8
9f0004cf:	8d 83 34 f9 ff ff    	lea    eax,[ebx-0x6cc]
9f0004d5:	50                   	push   eax
9f0004d6:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004d9:	50                   	push   eax
9f0004da:	e8 35 23 00 00       	call   9f002814 <strcpyI>
9f0004df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:34
    strcatI(cmd,"s");
9f0004e2:	83 ec 08             	sub    esp,0x8
9f0004e5:	8d 83 3e f9 ff ff    	lea    eax,[ebx-0x6c2]
9f0004eb:	50                   	push   eax
9f0004ec:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004ef:	50                   	push   eax
9f0004f0:	e8 d1 21 00 00       	call   9f0026c6 <strcatI>
9f0004f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0004f8:	83 ec 08             	sub    esp,0x8
9f0004fb:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004fe:	50                   	push   eax
9f0004ff:	8d 83 3b f9 ff ff    	lea    eax,[ebx-0x6c5]
9f000505:	50                   	push   eax
9f000506:	e8 3e 09 00 00       	call   9f000e49 <printfI>
9f00050b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:37
}
9f00050e:	90                   	nop
9f00050f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000512:	c9                   	leave  
9f000513:	c3                   	ret    

9f000514 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:40

VISIBLE void restoreCursorPosition()
{
9f000514:	55                   	push   ebp
9f000515:	89 e5                	mov    ebp,esp
9f000517:	53                   	push   ebx
9f000518:	83 ec 14             	sub    esp,0x14
9f00051b:	e8 f0 39 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000520:	81 c3 8c 5c 00 00    	add    ebx,0x5c8c
/home/yogi/src/os/aproj/libChrisOS/src/console.c:43
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000526:	83 ec 08             	sub    esp,0x8
9f000529:	8d 83 34 f9 ff ff    	lea    eax,[ebx-0x6cc]
9f00052f:	50                   	push   eax
9f000530:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000533:	50                   	push   eax
9f000534:	e8 db 22 00 00       	call   9f002814 <strcpyI>
9f000539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:44
    strcatI(cmd,"u");
9f00053c:	83 ec 08             	sub    esp,0x8
9f00053f:	8d 83 40 f9 ff ff    	lea    eax,[ebx-0x6c0]
9f000545:	50                   	push   eax
9f000546:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000549:	50                   	push   eax
9f00054a:	e8 77 21 00 00       	call   9f0026c6 <strcatI>
9f00054f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000552:	83 ec 08             	sub    esp,0x8
9f000555:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000558:	50                   	push   eax
9f000559:	8d 83 3b f9 ff ff    	lea    eax,[ebx-0x6c5]
9f00055f:	50                   	push   eax
9f000560:	e8 e4 08 00 00       	call   9f000e49 <printfI>
9f000565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:47
}
9f000568:	90                   	nop
9f000569:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00056c:	c9                   	leave  
9f00056d:	c3                   	ret    
9f00056e:	66 90                	xchg   ax,ax

9f000570 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
9f000570:	55                   	push   ebp
9f000571:	89 e5                	mov    ebp,esp
9f000573:	53                   	push   ebx
9f000574:	83 ec 14             	sub    esp,0x14
9f000577:	e8 94 39 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f00057c:	81 c3 30 5c 00 00    	add    ebx,0x5c30
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000582:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000589:	eb 7b                	jmp    9f000606 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00058b:	83 ec 0c             	sub    esp,0xc
9f00058e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000591:	e8 92 23 00 00       	call   9f002928 <strlenI>
9f000596:	83 c4 10             	add    esp,0x10
9f000599:	89 c1                	mov    ecx,eax
9f00059b:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0005a1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005a3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005a6:	c1 e2 02             	shl    edx,0x2
9f0005a9:	01 d0                	add    eax,edx
9f0005ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005ad:	83 ec 04             	sub    esp,0x4
9f0005b0:	51                   	push   ecx
9f0005b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0005b4:	50                   	push   eax
9f0005b5:	e8 79 24 00 00       	call   9f002a33 <strncmpI>
9f0005ba:	83 c4 10             	add    esp,0x10
9f0005bd:	85 c0                	test   eax,eax
9f0005bf:	75 41                	jne    9f000602 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f0005c1:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0005c7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005cc:	c1 e2 02             	shl    edx,0x2
9f0005cf:	01 d0                	add    eax,edx
9f0005d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005d3:	83 ec 08             	sub    esp,0x8
9f0005d6:	8d 93 42 f9 ff ff    	lea    edx,[ebx-0x6be]
9f0005dc:	52                   	push   edx
9f0005dd:	50                   	push   eax
9f0005de:	e8 37 2b 00 00       	call   9f00311a <strstrI>
9f0005e3:	83 c4 10             	add    esp,0x10
9f0005e6:	83 c0 01             	add    eax,0x1
9f0005e9:	83 ec 04             	sub    esp,0x4
9f0005ec:	6a 32                	push   0x32
9f0005ee:	50                   	push   eax
9f0005ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0005f2:	e8 a5 24 00 00       	call   9f002a9c <strncpyI>
9f0005f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f0005fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0005fd:	83 c0 01             	add    eax,0x1
9f000600:	eb 13                	jmp    9f000615 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f000602:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f000606:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f00060a:	0f 8e 7b ff ff ff    	jle    9f00058b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f000610:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f000615:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000618:	c9                   	leave  
9f000619:	c3                   	ret    

9f00061a <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
9f00061a:	55                   	push   ebp
9f00061b:	89 e5                	mov    ebp,esp
9f00061d:	53                   	push   ebx
9f00061e:	83 ec 14             	sub    esp,0x14
9f000621:	e8 ea 38 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000626:	81 c3 86 5b 00 00    	add    ebx,0x5b86
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
9f00062c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
9f000633:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f00063a:	e9 d5 00 00 00       	jmp    9f000714 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
9f00063f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000645:	8b 00                	mov    eax,DWORD PTR [eax]
9f000647:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00064a:	c1 e2 02             	shl    edx,0x2
9f00064d:	01 d0                	add    eax,edx
9f00064f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000651:	85 c0                	test   eax,eax
9f000653:	0f 84 b7 00 00 00    	je     9f000710 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000659:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000664:	c1 e2 02             	shl    edx,0x2
9f000667:	01 d0                	add    eax,edx
9f000669:	8b 00                	mov    eax,DWORD PTR [eax]
9f00066b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00066e:	83 ec 0c             	sub    esp,0xc
9f000671:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000674:	e8 af 22 00 00       	call   9f002928 <strlenI>
9f000679:	83 c4 10             	add    esp,0x10
9f00067c:	89 c1                	mov    ecx,eax
9f00067e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000684:	8b 00                	mov    eax,DWORD PTR [eax]
9f000686:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000689:	c1 e2 02             	shl    edx,0x2
9f00068c:	01 d0                	add    eax,edx
9f00068e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000690:	83 ec 04             	sub    esp,0x4
9f000693:	51                   	push   ecx
9f000694:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000697:	50                   	push   eax
9f000698:	e8 96 23 00 00       	call   9f002a33 <strncmpI>
9f00069d:	83 c4 10             	add    esp,0x10
9f0006a0:	85 c0                	test   eax,eax
9f0006a2:	75 6c                	jne    9f000710 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
9f0006a4:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006aa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006ac:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006af:	c1 e2 02             	shl    edx,0x2
9f0006b2:	01 d0                	add    eax,edx
9f0006b4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006b6:	83 ec 08             	sub    esp,0x8
9f0006b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006bc:	50                   	push   eax
9f0006bd:	e8 52 21 00 00       	call   9f002814 <strcpyI>
9f0006c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
9f0006c5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006cb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006cd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006d0:	c1 e2 02             	shl    edx,0x2
9f0006d3:	01 d0                	add    eax,edx
9f0006d5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006d7:	83 ec 08             	sub    esp,0x8
9f0006da:	8d 93 42 f9 ff ff    	lea    edx,[ebx-0x6be]
9f0006e0:	52                   	push   edx
9f0006e1:	50                   	push   eax
9f0006e2:	e8 df 1f 00 00       	call   9f0026c6 <strcatI>
9f0006e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
9f0006ea:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0006f0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006f2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0006f5:	c1 e2 02             	shl    edx,0x2
9f0006f8:	01 d0                	add    eax,edx
9f0006fa:	8b 00                	mov    eax,DWORD PTR [eax]
9f0006fc:	83 ec 08             	sub    esp,0x8
9f0006ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000702:	50                   	push   eax
9f000703:	e8 be 1f 00 00       	call   9f0026c6 <strcatI>
9f000708:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
9f00070b:	e9 c6 00 00 00       	jmp    9f0007d6 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f000710:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
9f000714:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f000718:	0f 8e 21 ff ff ff    	jle    9f00063f <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f00071e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f000725:	e9 a2 00 00 00       	jmp    9f0007cc <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
9f00072a:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000730:	8b 00                	mov    eax,DWORD PTR [eax]
9f000732:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000735:	c1 e2 02             	shl    edx,0x2
9f000738:	01 d0                	add    eax,edx
9f00073a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00073c:	85 c0                	test   eax,eax
9f00073e:	0f 85 84 00 00 00    	jne    9f0007c8 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f000744:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f00074a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00074c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00074f:	c1 e2 02             	shl    edx,0x2
9f000752:	01 d0                	add    eax,edx
9f000754:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000757:	81 c2 00 02 00 00    	add    edx,0x200
9f00075d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
9f00075f:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00076a:	c1 e2 02             	shl    edx,0x2
9f00076d:	01 d0                	add    eax,edx
9f00076f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000771:	83 ec 08             	sub    esp,0x8
9f000774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000777:	50                   	push   eax
9f000778:	e8 97 20 00 00       	call   9f002814 <strcpyI>
9f00077d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
9f000780:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000786:	8b 00                	mov    eax,DWORD PTR [eax]
9f000788:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00078b:	c1 e2 02             	shl    edx,0x2
9f00078e:	01 d0                	add    eax,edx
9f000790:	8b 00                	mov    eax,DWORD PTR [eax]
9f000792:	83 ec 08             	sub    esp,0x8
9f000795:	8d 93 42 f9 ff ff    	lea    edx,[ebx-0x6be]
9f00079b:	52                   	push   edx
9f00079c:	50                   	push   eax
9f00079d:	e8 24 1f 00 00       	call   9f0026c6 <strcatI>
9f0007a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
9f0007a5:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0007ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0007b0:	c1 e2 02             	shl    edx,0x2
9f0007b3:	01 d0                	add    eax,edx
9f0007b5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007b7:	83 ec 08             	sub    esp,0x8
9f0007ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007bd:	50                   	push   eax
9f0007be:	e8 03 1f 00 00       	call   9f0026c6 <strcatI>
9f0007c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
9f0007c6:	eb 0e                	jmp    9f0007d6 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007c8:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
9f0007cc:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f0007d0:	0f 8e 54 ff ff ff    	jle    9f00072a <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f0007d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0007d9:	c9                   	leave  
9f0007da:	c3                   	ret    
9f0007db:	90                   	nop

9f0007dc <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11

#include "libChrisOS.h"
#include "file.h"

VISIBLE int getdir(char* path, char *buffer, int buflen)
{
9f0007dc:	55                   	push   ebp
9f0007dd:	89 e5                	mov    ebp,esp
9f0007df:	53                   	push   ebx
9f0007e0:	83 ec 04             	sub    esp,0x4
9f0007e3:	e8 d7 36 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0007e8:	05 c4 59 00 00       	add    eax,0x59c4
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, buflen);
9f0007ed:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0007f0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0007f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0007f6:	53                   	push   ebx
9f0007f7:	51                   	push   ecx
9f0007f8:	52                   	push   edx
9f0007f9:	68 04 03 00 00       	push   0x304
9f0007fe:	89 c3                	mov    ebx,eax
9f000800:	e8 b9 03 00 00       	call   9f000bbe <do_syscall3>
9f000805:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:13
}
9f000808:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00080b:	c9                   	leave  
9f00080c:	c3                   	ret    

9f00080d <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16

VISIBLE void* open(char* path, const char* mode)
{
9f00080d:	55                   	push   ebp
9f00080e:	89 e5                	mov    ebp,esp
9f000810:	53                   	push   ebx
9f000811:	83 ec 04             	sub    esp,0x4
9f000814:	e8 a6 36 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000819:	05 93 59 00 00       	add    eax,0x5993
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
9f00081e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000821:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000824:	83 ec 04             	sub    esp,0x4
9f000827:	51                   	push   ecx
9f000828:	52                   	push   edx
9f000829:	6a 02                	push   0x2
9f00082b:	89 c3                	mov    ebx,eax
9f00082d:	e8 c8 03 00 00       	call   9f000bfa <do_syscall2>
9f000832:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:18
}
9f000835:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000838:	c9                   	leave  
9f000839:	c3                   	ret    

9f00083a <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21

void file_cleanup()
{
9f00083a:	55                   	push   ebp
9f00083b:	89 e5                	mov    ebp,esp
9f00083d:	53                   	push   ebx
9f00083e:	83 ec 04             	sub    esp,0x4
9f000841:	e8 ca 36 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000846:	81 c3 66 59 00 00    	add    ebx,0x5966
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    if (filesToCloseCount > 0)
9f00084c:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f000852:	8b 00                	mov    eax,DWORD PTR [eax]
9f000854:	85 c0                	test   eax,eax
9f000856:	7e 2d                	jle    9f000885 <file_cleanup+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:23
        while (filesToClose)
9f000858:	eb 1f                	jmp    9f000879 <file_cleanup+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:24
            close(filesToClose++);
9f00085a:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f000860:	8b 00                	mov    eax,DWORD PTR [eax]
9f000862:	8d 48 04             	lea    ecx,[eax+0x4]
9f000865:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f00086b:	89 0a                	mov    DWORD PTR [edx],ecx
9f00086d:	83 ec 0c             	sub    esp,0xc
9f000870:	50                   	push   eax
9f000871:	e8 8a 36 00 00       	call   9f003f00 <__x86.get_pc_thunk.ax+0x41>
9f000876:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:23
}

void file_cleanup()
{
    if (filesToCloseCount > 0)
        while (filesToClose)
9f000879:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00087f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000881:	85 c0                	test   eax,eax
9f000883:	75 d5                	jne    9f00085a <file_cleanup+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25
            close(filesToClose++);
    filesToCloseCount=0;
9f000885:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f00088b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
}
9f000891:	90                   	nop
9f000892:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000895:	c9                   	leave  
9f000896:	c3                   	ret    

9f000897 <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f000897:	55                   	push   ebp
9f000898:	89 e5                	mov    ebp,esp
9f00089a:	56                   	push   esi
9f00089b:	53                   	push   ebx
9f00089c:	83 ec 10             	sub    esp,0x10
9f00089f:	e8 6c 36 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f0008a4:	81 c3 08 59 00 00    	add    ebx,0x5908
/home/yogi/src/os/aproj/libChrisOS/src/file.c:30
    void *retVal=0;
9f0008aa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f0008b1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0008b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0008b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0008ba:	51                   	push   ecx
9f0008bb:	52                   	push   edx
9f0008bc:	50                   	push   eax
9f0008bd:	6a 02                	push   0x2
9f0008bf:	e8 fa 02 00 00       	call   9f000bbe <do_syscall3>
9f0008c4:	83 c4 10             	add    esp,0x10
9f0008c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    if (retVal==NULL)
9f0008ca:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0008ce:	75 07                	jne    9f0008d7 <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
        return (void*)-1;
9f0008d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0008d5:	eb 55                	jmp    9f00092c <freopen+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:34
    if (filesToClose==NULL)
9f0008d7:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0008dd:	8b 00                	mov    eax,DWORD PTR [eax]
9f0008df:	85 c0                	test   eax,eax
9f0008e1:	75 23                	jne    9f000906 <freopen+0x6f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    {
        filesToClose=malloc(sizeof(uintptr_t)*25);
9f0008e3:	83 ec 0c             	sub    esp,0xc
9f0008e6:	6a 64                	push   0x64
9f0008e8:	e8 f3 35 00 00       	call   9f003ee0 <__x86.get_pc_thunk.ax+0x21>
9f0008ed:	83 c4 10             	add    esp,0x10
9f0008f0:	89 c2                	mov    edx,eax
9f0008f2:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0008f8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
        filesToCloseCount=0;
9f0008fa:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f000900:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:39
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000906:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00090c:	8b 30                	mov    esi,DWORD PTR [eax]
9f00090e:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f000914:	8b 00                	mov    eax,DWORD PTR [eax]
9f000916:	8d 48 01             	lea    ecx,[eax+0x1]
9f000919:	8b 93 dc ff ff ff    	mov    edx,DWORD PTR [ebx-0x24]
9f00091f:	89 0a                	mov    DWORD PTR [edx],ecx
9f000921:	c1 e0 02             	shl    eax,0x2
9f000924:	8d 14 06             	lea    edx,[esi+eax*1]
9f000927:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00092a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40
}
9f00092c:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00092f:	5b                   	pop    ebx
9f000930:	5e                   	pop    esi
9f000931:	5d                   	pop    ebp
9f000932:	c3                   	ret    

9f000933 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43

VISIBLE void close(void* handle)
{
9f000933:	55                   	push   ebp
9f000934:	89 e5                	mov    ebp,esp
9f000936:	53                   	push   ebx
9f000937:	83 ec 04             	sub    esp,0x4
9f00093a:	e8 80 35 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00093f:	05 6d 58 00 00       	add    eax,0x586d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000944:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000947:	83 ec 08             	sub    esp,0x8
9f00094a:	52                   	push   edx
9f00094b:	6a 03                	push   0x3
9f00094d:	89 c3                	mov    ebx,eax
9f00094f:	e8 e4 02 00 00       	call   9f000c38 <do_syscall1>
9f000954:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:45
}
9f000957:	90                   	nop
9f000958:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00095b:	c9                   	leave  
9f00095c:	c3                   	ret    

9f00095d <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f00095d:	55                   	push   ebp
9f00095e:	89 e5                	mov    ebp,esp
9f000960:	56                   	push   esi
9f000961:	53                   	push   ebx
9f000962:	e8 58 35 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000967:	05 45 58 00 00       	add    eax,0x5845
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f00096c:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f00096f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000972:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000975:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000978:	83 ec 0c             	sub    esp,0xc
9f00097b:	56                   	push   esi
9f00097c:	53                   	push   ebx
9f00097d:	51                   	push   ecx
9f00097e:	52                   	push   edx
9f00097f:	6a 04                	push   0x4
9f000981:	89 c3                	mov    ebx,eax
9f000983:	e8 fc 01 00 00       	call   9f000b84 <do_syscall4>
9f000988:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:50
}
9f00098b:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00098e:	5b                   	pop    ebx
9f00098f:	5e                   	pop    esi
9f000990:	5d                   	pop    ebp
9f000991:	c3                   	ret    

9f000992 <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:53

int writeI(void* handle, void *buffer, int size, int length)
{
9f000992:	55                   	push   ebp
9f000993:	89 e5                	mov    ebp,esp
9f000995:	56                   	push   esi
9f000996:	53                   	push   ebx
9f000997:	e8 23 35 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00099c:	05 10 58 00 00       	add    eax,0x5810
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f0009a1:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f0009a4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0009a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0009aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0009ad:	83 ec 0c             	sub    esp,0xc
9f0009b0:	56                   	push   esi
9f0009b1:	53                   	push   ebx
9f0009b2:	51                   	push   ecx
9f0009b3:	52                   	push   edx
9f0009b4:	6a 05                	push   0x5
9f0009b6:	89 c3                	mov    ebx,eax
9f0009b8:	e8 c7 01 00 00       	call   9f000b84 <do_syscall4>
9f0009bd:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:55
}
9f0009c0:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0009c3:	5b                   	pop    ebx
9f0009c4:	5e                   	pop    esi
9f0009c5:	5d                   	pop    ebp
9f0009c6:	c3                   	ret    

9f0009c7 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f0009c7:	55                   	push   ebp
9f0009c8:	89 e5                	mov    ebp,esp
9f0009ca:	83 ec 08             	sub    esp,0x8
9f0009cd:	e8 ed 34 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0009d2:	05 da 57 00 00       	add    eax,0x57da
/home/yogi/src/os/aproj/libChrisOS/src/file.c:59
    return writeI(handle, buffer, size, length);
9f0009d7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f0009da:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0009dd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0009e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0009e3:	e8 aa ff ff ff       	call   9f000992 <writeI>
9f0009e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:60
}
9f0009eb:	c9                   	leave  
9f0009ec:	c3                   	ret    

9f0009ed <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63

VISIBLE int seek(void* handle, long position, int whence)
{
9f0009ed:	55                   	push   ebp
9f0009ee:	89 e5                	mov    ebp,esp
9f0009f0:	53                   	push   ebx
9f0009f1:	83 ec 04             	sub    esp,0x4
9f0009f4:	e8 c6 34 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0009f9:	05 b3 57 00 00       	add    eax,0x57b3
/home/yogi/src/os/aproj/libChrisOS/src/file.c:64
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f0009fe:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000a01:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000a04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a07:	53                   	push   ebx
9f000a08:	51                   	push   ecx
9f000a09:	52                   	push   edx
9f000a0a:	6a 09                	push   0x9
9f000a0c:	89 c3                	mov    ebx,eax
9f000a0e:	e8 ab 01 00 00       	call   9f000bbe <do_syscall3>
9f000a13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:65
}
9f000a16:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a19:	c9                   	leave  
9f000a1a:	c3                   	ret    
9f000a1b:	90                   	nop

9f000a1c <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f000a1c:	55                   	push   ebp
9f000a1d:	89 e5                	mov    ebp,esp
9f000a1f:	53                   	push   ebx
9f000a20:	e8 9a 34 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000a25:	05 87 57 00 00       	add    eax,0x5787
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f000a2a:	b8 05 00 00 00       	mov    eax,0x5
9f000a2f:	bb 01 00 00 00       	mov    ebx,0x1
9f000a34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a37:	89 d1                	mov    ecx,edx
9f000a39:	e8 fc ff ff ff       	call   9f000a3a <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f000a3e:	90                   	nop
9f000a3f:	5b                   	pop    ebx
9f000a40:	5d                   	pop    ebp
9f000a41:	c3                   	ret    

9f000a42 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f000a42:	55                   	push   ebp
9f000a43:	89 e5                	mov    ebp,esp
9f000a45:	53                   	push   ebx
9f000a46:	83 ec 14             	sub    esp,0x14
9f000a49:	e8 71 34 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000a4e:	05 5e 57 00 00       	add    eax,0x575e
9f000a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a56:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f000a59:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f000a5f:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f000a63:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f000a66:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f000a6a:	b8 05 00 00 00       	mov    eax,0x5
9f000a6f:	bb 01 00 00 00       	mov    ebx,0x1
9f000a74:	8d 55 fa             	lea    edx,[ebp-0x6]
9f000a77:	89 d1                	mov    ecx,edx
9f000a79:	e8 fc ff ff ff       	call   9f000a7a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f000a7e:	90                   	nop
9f000a7f:	83 c4 14             	add    esp,0x14
9f000a82:	5b                   	pop    ebx
9f000a83:	5d                   	pop    ebp
9f000a84:	c3                   	ret    

9f000a85 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f000a85:	55                   	push   ebp
9f000a86:	89 e5                	mov    ebp,esp
9f000a88:	53                   	push   ebx
9f000a89:	83 ec 10             	sub    esp,0x10
9f000a8c:	e8 2e 34 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000a91:	05 1b 57 00 00       	add    eax,0x571b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f000a96:	b8 04 00 00 00       	mov    eax,0x4
9f000a9b:	ba 00 00 00 00       	mov    edx,0x0
9f000aa0:	89 d3                	mov    ebx,edx
9f000aa2:	e8 fc ff ff ff       	call   9f000aa3 <getchar+0x1e>
9f000aa7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f000aaa:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f000aae:	74 06                	je     9f000ab6 <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f000ab0:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f000ab4:	eb 0c                	jmp    9f000ac2 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f000ab6:	b8 02 03 00 00       	mov    eax,0x302
9f000abb:	e8 fc ff ff ff       	call   9f000abc <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f000ac0:	eb d4                	jmp    9f000a96 <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f000ac2:	83 c4 10             	add    esp,0x10
9f000ac5:	5b                   	pop    ebx
9f000ac6:	5d                   	pop    ebp
9f000ac7:	c3                   	ret    

9f000ac8 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f000ac8:	55                   	push   ebp
9f000ac9:	89 e5                	mov    ebp,esp
9f000acb:	53                   	push   ebx
9f000acc:	83 ec 14             	sub    esp,0x14
9f000acf:	e8 eb 33 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000ad4:	05 d8 56 00 00       	add    eax,0x56d8
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f000ad9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:49
    char lbuf[2]={0,0};
9f000ae0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
9f000ae4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    
    if (stream!=1)
9f000ae8:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f000aec:	74 19                	je     9f000b07 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:53
    {
        printI("Stream %u not implemented\n",stream);
9f000aee:	83 ec 08             	sub    esp,0x8
9f000af1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000af4:	8d 90 44 f9 ff ff    	lea    edx,[eax-0x6bc]
9f000afa:	52                   	push   edx
9f000afb:	89 c3                	mov    ebx,eax
9f000afd:	e8 9b 03 00 00       	call   9f000e9d <printI>
9f000b02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54 (discriminator 1)
        getsError: goto getsError;
9f000b05:	eb fe                	jmp    9f000b05 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f000b07:	b8 04 00 00 00       	mov    eax,0x4
9f000b0c:	ba 00 00 00 00       	mov    edx,0x0
9f000b11:	89 d3                	mov    ebx,edx
9f000b13:	e8 fc ff ff ff       	call   9f000b14 <gets+0x4c>
9f000b18:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
        if (inchar=='\b' && len>0)
9f000b1b:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f000b1f:	75 17                	jne    9f000b38 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60 (discriminator 1)
9f000b21:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000b25:	7e 11                	jle    9f000b38 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:62
        {
            buffer[len]=0;
9f000b27:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b2d:	01 d0                	add    eax,edx
9f000b2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            len--;
9f000b32:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f000b36:	eb 43                	jmp    9f000b7b <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
        }
        else if (inchar!=0)
9f000b38:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f000b3c:	74 33                	je     9f000b71 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:67
        {
            lbuf[0]=inchar;
9f000b3e:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000b42:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:69
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f000b45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000b48:	8d 50 01             	lea    edx,[eax+0x1]
9f000b4b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000b4e:	89 c2                	mov    edx,eax
9f000b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000b53:	01 c2                	add    edx,eax
9f000b55:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000b59:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f000b5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000b5e:	83 c0 01             	add    eax,0x1
9f000b61:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f000b64:	7d 06                	jge    9f000b6c <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71 (discriminator 1)
9f000b66:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f000b6a:	75 9b                	jne    9f000b07 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:73
            
                return len;
9f000b6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000b6f:	eb 0c                	jmp    9f000b7d <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:76
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f000b71:	b8 02 03 00 00       	mov    eax,0x302
9f000b76:	e8 fc ff ff ff       	call   9f000b77 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:81 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f000b7b:	eb 8a                	jmp    9f000b07 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82
}
9f000b7d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b80:	c9                   	leave  
9f000b81:	c3                   	ret    
9f000b82:	66 90                	xchg   ax,ax

9f000b84 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f000b84:	55                   	push   ebp
9f000b85:	89 e5                	mov    ebp,esp
9f000b87:	56                   	push   esi
9f000b88:	53                   	push   ebx
9f000b89:	83 ec 10             	sub    esp,0x10
9f000b8c:	e8 2e 33 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000b91:	05 1b 56 00 00       	add    eax,0x561b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f000b96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f000b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000ba0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000ba3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000ba6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000ba9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f000bac:	e8 fc ff ff ff       	call   9f000bad <do_syscall4+0x29>
9f000bb1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f000bb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f000bb7:	83 c4 10             	add    esp,0x10
9f000bba:	5b                   	pop    ebx
9f000bbb:	5e                   	pop    esi
9f000bbc:	5d                   	pop    ebp
9f000bbd:	c3                   	ret    

9f000bbe <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f000bbe:	55                   	push   ebp
9f000bbf:	89 e5                	mov    ebp,esp
9f000bc1:	56                   	push   esi
9f000bc2:	53                   	push   ebx
9f000bc3:	83 ec 10             	sub    esp,0x10
9f000bc6:	e8 f4 32 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000bcb:	05 e1 55 00 00       	add    eax,0x55e1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f000bd0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f000bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000bda:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000bdd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000be0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000be3:	be 00 00 00 00       	mov    esi,0x0
9f000be8:	e8 fc ff ff ff       	call   9f000be9 <do_syscall3+0x2b>
9f000bed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f000bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f000bf3:	83 c4 10             	add    esp,0x10
9f000bf6:	5b                   	pop    ebx
9f000bf7:	5e                   	pop    esi
9f000bf8:	5d                   	pop    ebp
9f000bf9:	c3                   	ret    

9f000bfa <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f000bfa:	55                   	push   ebp
9f000bfb:	89 e5                	mov    ebp,esp
9f000bfd:	56                   	push   esi
9f000bfe:	53                   	push   ebx
9f000bff:	83 ec 10             	sub    esp,0x10
9f000c02:	e8 b8 32 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000c07:	05 a5 55 00 00       	add    eax,0x55a5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f000c0c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f000c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c16:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000c19:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000c1c:	ba 00 00 00 00       	mov    edx,0x0
9f000c21:	be 00 00 00 00       	mov    esi,0x0
9f000c26:	e8 fc ff ff ff       	call   9f000c27 <do_syscall2+0x2d>
9f000c2b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f000c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f000c31:	83 c4 10             	add    esp,0x10
9f000c34:	5b                   	pop    ebx
9f000c35:	5e                   	pop    esi
9f000c36:	5d                   	pop    ebp
9f000c37:	c3                   	ret    

9f000c38 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f000c38:	55                   	push   ebp
9f000c39:	89 e5                	mov    ebp,esp
9f000c3b:	56                   	push   esi
9f000c3c:	53                   	push   ebx
9f000c3d:	83 ec 10             	sub    esp,0x10
9f000c40:	e8 7a 32 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000c45:	05 67 55 00 00       	add    eax,0x5567
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f000c4a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f000c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c54:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000c57:	b9 00 00 00 00       	mov    ecx,0x0
9f000c5c:	ba 00 00 00 00       	mov    edx,0x0
9f000c61:	be 00 00 00 00       	mov    esi,0x0
9f000c66:	e8 fc ff ff ff       	call   9f000c67 <do_syscall1+0x2f>
9f000c6b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f000c6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f000c71:	83 c4 10             	add    esp,0x10
9f000c74:	5b                   	pop    ebx
9f000c75:	5e                   	pop    esi
9f000c76:	5d                   	pop    ebp
9f000c77:	c3                   	ret    

9f000c78 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f000c78:	55                   	push   ebp
9f000c79:	89 e5                	mov    ebp,esp
9f000c7b:	56                   	push   esi
9f000c7c:	53                   	push   ebx
9f000c7d:	83 ec 10             	sub    esp,0x10
9f000c80:	e8 3a 32 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000c85:	05 27 55 00 00       	add    eax,0x5527
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f000c8a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f000c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c94:	bb 00 00 00 00       	mov    ebx,0x0
9f000c99:	b9 00 00 00 00       	mov    ecx,0x0
9f000c9e:	ba 00 00 00 00       	mov    edx,0x0
9f000ca3:	be 00 00 00 00       	mov    esi,0x0
9f000ca8:	e8 fc ff ff ff       	call   9f000ca9 <do_syscall0+0x31>
9f000cad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f000cb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f000cb3:	83 c4 10             	add    esp,0x10
9f000cb6:	5b                   	pop    ebx
9f000cb7:	5e                   	pop    esi
9f000cb8:	5d                   	pop    ebp
9f000cb9:	c3                   	ret    

9f000cba <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f000cba:	55                   	push   ebp
9f000cbb:	89 e5                	mov    ebp,esp
9f000cbd:	53                   	push   ebx
9f000cbe:	83 ec 04             	sub    esp,0x4
9f000cc1:	e8 4a 32 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000cc6:	81 c3 e6 54 00 00    	add    ebx,0x54e6
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f000ccc:	83 ec 08             	sub    esp,0x8
9f000ccf:	8d 83 60 f9 ff ff    	lea    eax,[ebx-0x6a0]
9f000cd5:	50                   	push   eax
9f000cd6:	68 00 00 00 02       	push   0x2000000
9f000cdb:	e8 f1 01 00 00       	call   9f000ed1 <printdI>
9f000ce0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f000ce3:	0f b6 83 54 00 00 00 	movzx  eax,BYTE PTR [ebx+0x54]
9f000cea:	83 f0 01             	xor    eax,0x1
9f000ced:	84 c0                	test   al,al
9f000cef:	74 70                	je     9f000d61 <libc_init+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f000cf1:	e8 f2 0a 00 00       	call   9f0017e8 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f000cf6:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f000cf9:	89 c2                	mov    edx,eax
9f000cfb:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000d01:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall0(SYSCALL_INVALID);
9f000d03:	83 ec 0c             	sub    esp,0xc
9f000d06:	6a 00                	push   0x0
9f000d08:	e8 6b ff ff ff       	call   9f000c78 <do_syscall0>
9f000d0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f000d10:	8d 83 cd ab ff ff    	lea    eax,[ebx-0x5433]
9f000d16:	83 ec 08             	sub    esp,0x8
9f000d19:	50                   	push   eax
9f000d1a:	68 63 01 00 00       	push   0x163
9f000d1f:	e8 14 ff ff ff       	call   9f000c38 <do_syscall1>
9f000d24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        libcInitialized = true;
9f000d27:	c6 83 54 00 00 00 01 	mov    BYTE PTR [ebx+0x54],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        printBuffer = mallocI(0x1000);
9f000d2e:	83 ec 0c             	sub    esp,0xc
9f000d31:	68 00 10 00 00       	push   0x1000
9f000d36:	e8 f7 0b 00 00       	call   9f001932 <mallocI>
9f000d3b:	83 c4 10             	add    esp,0x10
9f000d3e:	89 c2                	mov    edx,eax
9f000d40:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000d46:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f000d48:	83 ec 08             	sub    esp,0x8
9f000d4b:	8d 83 78 f9 ff ff    	lea    eax,[ebx-0x688]
9f000d51:	50                   	push   eax
9f000d52:	68 00 00 00 02       	push   0x2000000
9f000d57:	e8 75 01 00 00       	call   9f000ed1 <printdI>
9f000d5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f000d5f:	eb 12                	jmp    9f000d73 <libc_init+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f000d61:	83 ec 0c             	sub    esp,0xc
9f000d64:	8d 83 90 f9 ff ff    	lea    eax,[ebx-0x670]
9f000d6a:	50                   	push   eax
9f000d6b:	e8 2d 01 00 00       	call   9f000e9d <printI>
9f000d70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68
}
9f000d73:	90                   	nop
9f000d74:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000d77:	c9                   	leave  
9f000d78:	c3                   	ret    

9f000d79 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71

void __attribute__((destructor)) libc_cleanup(void)
{
9f000d79:	55                   	push   ebp
9f000d7a:	89 e5                	mov    ebp,esp
9f000d7c:	53                   	push   ebx
9f000d7d:	83 ec 04             	sub    esp,0x4
9f000d80:	e8 8b 31 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000d85:	81 c3 27 54 00 00    	add    ebx,0x5427
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:72
    malloc_cleanup();
9f000d8b:	e8 59 0e 00 00       	call   9f001be9 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73
    file_cleanup();
9f000d90:	e8 a5 fa ff ff       	call   9f00083a <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
}
9f000d95:	90                   	nop
9f000d96:	83 c4 04             	add    esp,0x4
9f000d99:	5b                   	pop    ebx
9f000d9a:	5d                   	pop    ebp
9f000d9b:	c3                   	ret    

9f000d9c <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77

VISIBLE int print(const char *format, ...)
{
9f000d9c:	55                   	push   ebp
9f000d9d:	89 e5                	mov    ebp,esp
9f000d9f:	53                   	push   ebx
9f000da0:	83 ec 14             	sub    esp,0x14
9f000da3:	e8 68 31 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000da8:	81 c3 04 54 00 00    	add    ebx,0x5404
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
    va_list args;
    va_start( args, format );
9f000dae:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000db1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    
    int size = vsprintf(printBuffer, format, args);
9f000db4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000db7:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000dbd:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dbf:	83 ec 04             	sub    esp,0x4
9f000dc2:	52                   	push   edx
9f000dc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000dc6:	50                   	push   eax
9f000dc7:	e8 bd 13 00 00       	call   9f002189 <vsprintf>
9f000dcc:	83 c4 10             	add    esp,0x10
9f000dcf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000dd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000dd5:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000ddb:	8b 12                	mov    edx,DWORD PTR [edx]
9f000ddd:	50                   	push   eax
9f000dde:	52                   	push   edx
9f000ddf:	6a 01                	push   0x1
9f000de1:	6a 05                	push   0x5
9f000de3:	e8 d6 fd ff ff       	call   9f000bbe <do_syscall3>
9f000de8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    return 0;
9f000deb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
}
9f000df0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000df3:	c9                   	leave  
9f000df4:	c3                   	ret    

9f000df5 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87

VISIBLE int printf(const char *format, ...)
{
9f000df5:	55                   	push   ebp
9f000df6:	89 e5                	mov    ebp,esp
9f000df8:	53                   	push   ebx
9f000df9:	83 ec 14             	sub    esp,0x14
9f000dfc:	e8 0f 31 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000e01:	81 c3 ab 53 00 00    	add    ebx,0x53ab
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89
    va_list args;
    va_start( args, format );
9f000e07:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000e0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    
    int size = vsprintf(printBuffer, format, args);
9f000e0d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000e10:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000e16:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e18:	83 ec 04             	sub    esp,0x4
9f000e1b:	52                   	push   edx
9f000e1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e1f:	50                   	push   eax
9f000e20:	e8 64 13 00 00       	call   9f002189 <vsprintf>
9f000e25:	83 c4 10             	add    esp,0x10
9f000e28:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000e2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000e2e:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000e34:	8b 12                	mov    edx,DWORD PTR [edx]
9f000e36:	50                   	push   eax
9f000e37:	52                   	push   edx
9f000e38:	6a 01                	push   0x1
9f000e3a:	6a 05                	push   0x5
9f000e3c:	e8 7d fd ff ff       	call   9f000bbe <do_syscall3>
9f000e41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
}
9f000e44:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000e47:	c9                   	leave  
9f000e48:	c3                   	ret    

9f000e49 <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:96

int printfI(const char *format, ...)
{
9f000e49:	55                   	push   ebp
9f000e4a:	89 e5                	mov    ebp,esp
9f000e4c:	53                   	push   ebx
9f000e4d:	83 ec 14             	sub    esp,0x14
9f000e50:	e8 bb 30 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f000e55:	81 c3 57 53 00 00    	add    ebx,0x5357
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98
    va_list args;
    va_start( args, format );
9f000e5b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000e5e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    
    int size = vsprintf(printBuffer, format, args);
9f000e61:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000e64:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f000e6a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e6c:	83 ec 04             	sub    esp,0x4
9f000e6f:	52                   	push   edx
9f000e70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e73:	50                   	push   eax
9f000e74:	e8 10 13 00 00       	call   9f002189 <vsprintf>
9f000e79:	83 c4 10             	add    esp,0x10
9f000e7c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000e7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000e82:	8b 93 e8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x18]
9f000e88:	8b 12                	mov    edx,DWORD PTR [edx]
9f000e8a:	50                   	push   eax
9f000e8b:	52                   	push   edx
9f000e8c:	6a 01                	push   0x1
9f000e8e:	6a 05                	push   0x5
9f000e90:	e8 29 fd ff ff       	call   9f000bbe <do_syscall3>
9f000e95:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
}
9f000e98:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000e9b:	c9                   	leave  
9f000e9c:	c3                   	ret    

9f000e9d <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:105

int printI(const char *format, ...)
{
9f000e9d:	55                   	push   ebp
9f000e9e:	89 e5                	mov    ebp,esp
9f000ea0:	83 ec 10             	sub    esp,0x10
9f000ea3:	e8 17 30 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000ea8:	05 04 53 00 00       	add    eax,0x5304
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    va_list args;
    va_start( args, format );
9f000ead:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000eb0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f000eb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000eb6:	89 c2                	mov    edx,eax
9f000eb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000ebb:	52                   	push   edx
9f000ebc:	50                   	push   eax
9f000ebd:	68 00 03 00 00       	push   0x300
9f000ec2:	e8 33 fd ff ff       	call   9f000bfa <do_syscall2>
9f000ec7:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    return 0;
9f000eca:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
}
9f000ecf:	c9                   	leave  
9f000ed0:	c3                   	ret    

9f000ed1 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:113

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f000ed1:	55                   	push   ebp
9f000ed2:	89 e5                	mov    ebp,esp
9f000ed4:	83 ec 10             	sub    esp,0x10
9f000ed7:	e8 e3 2f 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000edc:	05 d0 52 00 00       	add    eax,0x52d0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115
    va_list args;
    va_start( args, format );
9f000ee1:	8d 45 10             	lea    eax,[ebp+0x10]
9f000ee4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f000ee7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000eea:	89 c2                	mov    edx,eax
9f000eec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000eef:	52                   	push   edx
9f000ef0:	50                   	push   eax
9f000ef1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ef4:	68 01 03 00 00       	push   0x301
9f000ef9:	e8 c0 fc ff ff       	call   9f000bbe <do_syscall3>
9f000efe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:118
    return 0;
9f000f01:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    va_end(args);
}
9f000f06:	c9                   	leave  
9f000f07:	c3                   	ret    

9f000f08 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:123

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f000f08:	55                   	push   ebp
9f000f09:	89 e5                	mov    ebp,esp
9f000f0b:	56                   	push   esi
9f000f0c:	53                   	push   ebx
9f000f0d:	83 ec 10             	sub    esp,0x10
9f000f10:	e8 aa 2f 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000f15:	05 97 52 00 00       	add    eax,0x5297
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
    SLEEP_SECONDS(__seconds)
9f000f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f1d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000f20:	b8 70 01 00 00       	mov    eax,0x170
9f000f25:	bb 00 00 00 00       	mov    ebx,0x0
9f000f2a:	b9 00 00 00 00       	mov    ecx,0x0
9f000f2f:	ba 00 00 00 00       	mov    edx,0x0
9f000f34:	be 00 00 00 00       	mov    esi,0x0
9f000f39:	e8 fc ff ff ff       	call   9f000f3a <sleep+0x32>
9f000f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f44:	6b d0 64             	imul   edx,eax,0x64
9f000f47:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000f4a:	01 d0                	add    eax,edx
9f000f4c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000f4f:	b8 66 01 00 00       	mov    eax,0x166
9f000f54:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000f57:	b9 00 00 00 00       	mov    ecx,0x0
9f000f5c:	ba 00 00 00 00       	mov    edx,0x0
9f000f61:	be 00 00 00 00       	mov    esi,0x0
9f000f66:	e8 fc ff ff ff       	call   9f000f67 <sleep+0x5f>
9f000f6b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125
    return 0;
9f000f6e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:126
}
9f000f73:	83 c4 10             	add    esp,0x10
9f000f76:	5b                   	pop    ebx
9f000f77:	5e                   	pop    esi
9f000f78:	5d                   	pop    ebp
9f000f79:	c3                   	ret    

9f000f7a <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129

void stop()
{
9f000f7a:	55                   	push   ebp
9f000f7b:	89 e5                	mov    ebp,esp
9f000f7d:	e8 3d 2f 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000f82:	05 2a 52 00 00       	add    eax,0x522a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    do_syscall0(SYSCALL_STOP);
9f000f87:	68 68 01 00 00       	push   0x168
9f000f8c:	e8 e7 fc ff ff       	call   9f000c78 <do_syscall0>
9f000f91:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:131
}
9f000f94:	90                   	nop
9f000f95:	c9                   	leave  
9f000f96:	c3                   	ret    

9f000f97 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f000f97:	55                   	push   ebp
9f000f98:	89 e5                	mov    ebp,esp
9f000f9a:	e8 20 2f 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000f9f:	05 0d 52 00 00       	add    eax,0x520d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f000fa4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000fa7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fad:	51                   	push   ecx
9f000fae:	52                   	push   edx
9f000faf:	50                   	push   eax
9f000fb0:	68 67 01 00 00       	push   0x167
9f000fb5:	e8 04 fc ff ff       	call   9f000bbe <do_syscall3>
9f000fba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
}
9f000fbd:	90                   	nop
9f000fbe:	c9                   	leave  
9f000fbf:	c3                   	ret    

9f000fc0 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139

VISIBLE int fork()
{
9f000fc0:	55                   	push   ebp
9f000fc1:	89 e5                	mov    ebp,esp
9f000fc3:	83 ec 10             	sub    esp,0x10
9f000fc6:	e8 f4 2e 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000fcb:	05 e1 51 00 00       	add    eax,0x51e1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140
    uint32_t retVal = 0;
9f000fd0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f000fd7:	b8 06 00 00 00       	mov    eax,0x6
9f000fdc:	e8 fc ff ff ff       	call   9f000fdd <fork+0x1d>
9f000fe1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    return retVal;
9f000fe4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144
}
9f000fe7:	c9                   	leave  
9f000fe8:	c3                   	ret    

9f000fe9 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147

VISIBLE int exec(char* path, int argc, char** argv)
{
9f000fe9:	55                   	push   ebp
9f000fea:	89 e5                	mov    ebp,esp
9f000fec:	83 ec 10             	sub    esp,0x10
9f000fef:	e8 cb 2e 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f000ff4:	05 b8 51 00 00       	add    eax,0x51b8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
    int pid=0;
9f000ff9:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f001000:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001003:	8d 80 b6 f9 ff ff    	lea    eax,[eax-0x64a]
9f001009:	50                   	push   eax
9f00100a:	68 00 00 00 02       	push   0x2000000
9f00100f:	e8 bd fe ff ff       	call   9f000ed1 <printdI>
9f001014:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:150
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f001017:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00101a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00101d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001020:	51                   	push   ecx
9f001021:	52                   	push   edx
9f001022:	50                   	push   eax
9f001023:	6a 59                	push   0x59
9f001025:	e8 94 fb ff ff       	call   9f000bbe <do_syscall3>
9f00102a:	83 c4 10             	add    esp,0x10
9f00102d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
    return pid;
9f001030:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152
}
9f001033:	c9                   	leave  
9f001034:	c3                   	ret    

9f001035 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:155

VISIBLE int execb(char* path)
{
9f001035:	55                   	push   ebp
9f001036:	89 e5                	mov    ebp,esp
9f001038:	53                   	push   ebx
9f001039:	83 ec 24             	sub    esp,0x24
9f00103c:	e8 cf 2e 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f001041:	81 c3 6b 51 00 00    	add    ebx,0x516b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:156
    int pid=0, argc=0;
9f001047:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f00104e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f001055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001058:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00105b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00105e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    char* program;
    program=mallocI(512);
9f001061:	83 ec 0c             	sub    esp,0xc
9f001064:	68 00 02 00 00       	push   0x200
9f001069:	e8 c4 08 00 00       	call   9f001932 <mallocI>
9f00106e:	83 c4 10             	add    esp,0x10
9f001071:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f001074:	83 ec 08             	sub    esp,0x8
9f001077:	8d 83 c9 f9 ff ff    	lea    eax,[ebx-0x637]
9f00107d:	50                   	push   eax
9f00107e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001081:	e8 94 20 00 00       	call   9f00311a <strstrI>
9f001086:	83 c4 10             	add    esp,0x10
9f001089:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
        if (argc==0)
9f00108c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001090:	75 44                	jne    9f0010d6 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
        {
            if (spacePtr==0)
9f001092:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001096:	75 22                	jne    9f0010ba <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
                strncpyI(program, path, strlenI(path));
9f001098:	83 ec 0c             	sub    esp,0xc
9f00109b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00109e:	e8 85 18 00 00       	call   9f002928 <strlenI>
9f0010a3:	83 c4 10             	add    esp,0x10
9f0010a6:	83 ec 04             	sub    esp,0x4
9f0010a9:	50                   	push   eax
9f0010aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0010ad:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010b0:	e8 e7 19 00 00       	call   9f002a9c <strncpyI>
9f0010b5:	83 c4 10             	add    esp,0x10
9f0010b8:	eb 1c                	jmp    9f0010d6 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169
            else
                strncpyI(program, path, spacePtr-path);
9f0010ba:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0010bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0010c0:	29 c2                	sub    edx,eax
9f0010c2:	89 d0                	mov    eax,edx
9f0010c4:	83 ec 04             	sub    esp,0x4
9f0010c7:	50                   	push   eax
9f0010c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0010cb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010ce:	e8 c9 19 00 00       	call   9f002a9c <strncpyI>
9f0010d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
        }
        argc++;
9f0010d6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
            
    } while (spacePtr++);
9f0010da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010dd:	8d 50 01             	lea    edx,[eax+0x1]
9f0010e0:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0010e3:	85 c0                	test   eax,eax
9f0010e5:	75 8d                	jne    9f001074 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    
    argv=mallocI((argc*50)+(argc*4));
9f0010e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010ea:	6b c0 36             	imul   eax,eax,0x36
9f0010ed:	83 ec 0c             	sub    esp,0xc
9f0010f0:	50                   	push   eax
9f0010f1:	e8 3c 08 00 00       	call   9f001932 <mallocI>
9f0010f6:	83 c4 10             	add    esp,0x10
9f0010f9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
    int argvPtr=4*argc;
9f0010fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010ff:	c1 e0 02             	shl    eax,0x2
9f001102:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    spacePtr=path;
9f001105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001108:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178
    for (int cnt=0;cnt<argc; cnt++)
9f00110b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001112:	e9 c8 00 00 00       	jmp    9f0011df <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001117:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00111a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001121:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001124:	01 d0                	add    eax,edx
9f001126:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f001129:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f00112c:	01 ca                	add    edx,ecx
9f00112e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
        spacePtr=strstrI(spacePtr," ");
9f001130:	83 ec 08             	sub    esp,0x8
9f001133:	8d 83 c9 f9 ff ff    	lea    eax,[ebx-0x637]
9f001139:	50                   	push   eax
9f00113a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00113d:	e8 d8 1f 00 00       	call   9f00311a <strstrI>
9f001142:	83 c4 10             	add    esp,0x10
9f001145:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
        if (spacePtr)
9f001148:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00114c:	74 2f                	je     9f00117d <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:183
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f00114e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001151:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001154:	29 c2                	sub    edx,eax
9f001156:	89 d0                	mov    eax,edx
9f001158:	89 c1                	mov    ecx,eax
9f00115a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00115d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001164:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001167:	01 d0                	add    eax,edx
9f001169:	8b 00                	mov    eax,DWORD PTR [eax]
9f00116b:	83 ec 04             	sub    esp,0x4
9f00116e:	51                   	push   ecx
9f00116f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001172:	50                   	push   eax
9f001173:	e8 24 19 00 00       	call   9f002a9c <strncpyI>
9f001178:	83 c4 10             	add    esp,0x10
9f00117b:	eb 31                	jmp    9f0011ae <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f00117d:	83 ec 0c             	sub    esp,0xc
9f001180:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001183:	e8 a0 17 00 00       	call   9f002928 <strlenI>
9f001188:	83 c4 10             	add    esp,0x10
9f00118b:	89 c2                	mov    edx,eax
9f00118d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001190:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001197:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00119a:	01 c8                	add    eax,ecx
9f00119c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00119e:	83 ec 04             	sub    esp,0x4
9f0011a1:	52                   	push   edx
9f0011a2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0011a5:	50                   	push   eax
9f0011a6:	e8 f1 18 00 00       	call   9f002a9c <strncpyI>
9f0011ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186 (discriminator 2)
        strtrimI(argv[cnt]);
9f0011ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0011b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0011b8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0011bb:	01 d0                	add    eax,edx
9f0011bd:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011bf:	83 ec 0c             	sub    esp,0xc
9f0011c2:	50                   	push   eax
9f0011c3:	e8 90 1c 00 00       	call   9f002e58 <strtrimI>
9f0011c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f0011cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0011ce:	8d 50 01             	lea    edx,[eax+0x1]
9f0011d1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0011d4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188 (discriminator 2)
        argvPtr+=50;
9f0011d7:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f0011db:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178 (discriminator 1)
9f0011df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0011e2:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0011e5:	0f 8c 2c ff ff ff    	jl     9f001117 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f0011eb:	83 ec 04             	sub    esp,0x4
9f0011ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0011f1:	8d 83 cb f9 ff ff    	lea    eax,[ebx-0x635]
9f0011f7:	50                   	push   eax
9f0011f8:	68 00 00 00 02       	push   0x2000000
9f0011fd:	e8 cf fc ff ff       	call   9f000ed1 <printdI>
9f001202:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:191
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001205:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f001208:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00120b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00120e:	51                   	push   ecx
9f00120f:	52                   	push   edx
9f001210:	50                   	push   eax
9f001211:	68 05 03 00 00       	push   0x305
9f001216:	e8 a3 f9 ff ff       	call   9f000bbe <do_syscall3>
9f00121b:	83 c4 10             	add    esp,0x10
9f00121e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001221:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:198
    freeI(argv);
    freeI(program);
}
9f001224:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001227:	c9                   	leave  
9f001228:	c3                   	ret    

9f001229 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201

VISIBLE int execa(char* path, int argc, char** argv)
{
9f001229:	55                   	push   ebp
9f00122a:	89 e5                	mov    ebp,esp
9f00122c:	83 ec 10             	sub    esp,0x10
9f00122f:	e8 8b 2c 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001234:	05 78 4f 00 00       	add    eax,0x4f78
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
    int pid=0;
9f001239:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:203
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001240:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001243:	8d 80 df f9 ff ff    	lea    eax,[eax-0x621]
9f001249:	50                   	push   eax
9f00124a:	68 00 00 00 02       	push   0x2000000
9f00124f:	e8 7d fc ff ff       	call   9f000ed1 <printdI>
9f001254:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f001257:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00125a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00125d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001260:	51                   	push   ecx
9f001261:	52                   	push   edx
9f001262:	50                   	push   eax
9f001263:	68 05 03 00 00       	push   0x305
9f001268:	e8 51 f9 ff ff       	call   9f000bbe <do_syscall3>
9f00126d:	83 c4 10             	add    esp,0x10
9f001270:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
    return pid;
9f001273:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
}
9f001276:	c9                   	leave  
9f001277:	c3                   	ret    

9f001278 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209

VISIBLE int waitpid(uint32_t pid)
{
9f001278:	55                   	push   ebp
9f001279:	89 e5                	mov    ebp,esp
9f00127b:	e8 3f 2c 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001280:	05 2c 4f 00 00       	add    eax,0x4f2c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001285:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001288:	6a 61                	push   0x61
9f00128a:	e8 a9 f9 ff ff       	call   9f000c38 <do_syscall1>
9f00128f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:211
}
9f001292:	c9                   	leave  
9f001293:	c3                   	ret    

9f001294 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215


VISIBLE void exit (int status)
{
9f001294:	55                   	push   ebp
9f001295:	89 e5                	mov    ebp,esp
9f001297:	e8 23 2c 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00129c:	05 10 4f 00 00       	add    eax,0x4f10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:216
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f0012a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012a4:	50                   	push   eax
9f0012a5:	6a 00                	push   0x0
9f0012a7:	6a 01                	push   0x1
9f0012a9:	e8 4c f9 ff ff       	call   9f000bfa <do_syscall2>
9f0012ae:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:217
}
9f0012b1:	90                   	nop
9f0012b2:	c9                   	leave  
9f0012b3:	c3                   	ret    

9f0012b4 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221


VISIBLE char* getcwd(char* buf, size_t size)
{
9f0012b4:	55                   	push   ebp
9f0012b5:	89 e5                	mov    ebp,esp
9f0012b7:	e8 03 2c 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0012bc:	05 f0 4e 00 00       	add    eax,0x4ef0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0012c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012c4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0012c7:	50                   	push   eax
9f0012c8:	6a 4f                	push   0x4f
9f0012ca:	e8 2b f9 ff ff       	call   9f000bfa <do_syscall2>
9f0012cf:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:223
}
9f0012d2:	c9                   	leave  
9f0012d3:	c3                   	ret    

9f0012d4 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227


size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f0012d4:	55                   	push   ebp
9f0012d5:	89 e5                	mov    ebp,esp
9f0012d7:	83 ec 20             	sub    esp,0x20
9f0012da:	e8 e0 2b 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0012df:	05 cd 4e 00 00       	add    eax,0x4ecd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f0012e4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:231
    size_t argc = 0;
9f0012eb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f0012f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012f5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f0012f8:	e9 d8 00 00 00       	jmp    9f0013d5 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
        c = (unsigned char) *p;
9f0012fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001300:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001303:	0f b6 c0             	movzx  eax,al
9f001306:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235
        switch (state) {
9f001309:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00130c:	83 f8 01             	cmp    eax,0x1
9f00130f:	74 7e                	je     9f00138f <splitI+0xbb>
9f001311:	83 f8 01             	cmp    eax,0x1
9f001314:	72 0a                	jb     9f001320 <splitI+0x4c>
9f001316:	83 f8 02             	cmp    eax,0x2
9f001319:	74 45                	je     9f001360 <splitI+0x8c>
9f00131b:	e9 b1 00 00 00       	jmp    9f0013d1 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237
        case DULL:
            if (ISSPACE(c)) {
9f001320:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001324:	0f 94 c0             	sete   al
9f001327:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f00132a:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f00132e:	84 c0                	test   al,al
9f001330:	0f 85 94 00 00 00    	jne    9f0013ca <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:241
                continue;
            }

            if (c == '"') {
9f001336:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f00133a:	75 15                	jne    9f001351 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242
                state = IN_STRING;
9f00133c:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:243
                start_of_word = p + 1; 
9f001343:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001346:	83 c0 01             	add    eax,0x1
9f001349:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244
                continue;
9f00134c:	e9 80 00 00 00       	jmp    9f0013d1 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
            }
            state = IN_WORD;
9f001351:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:247
            start_of_word = p;
9f001358:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00135b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248
            continue;
9f00135e:	eb 71                	jmp    9f0013d1 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251

        case IN_STRING:
            if (c == '"') {
9f001360:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001364:	75 67                	jne    9f0013cd <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
                *p = 0;
9f001366:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001369:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
                argv[argc++] = start_of_word;
9f00136c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00136f:	8d 50 01             	lea    edx,[eax+0x1]
9f001372:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001375:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00137c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00137f:	01 c2                	add    edx,eax
9f001381:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001384:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:254
                state = DULL;
9f001386:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
            }
            continue;
9f00138d:	eb 3e                	jmp    9f0013cd <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259

        case IN_WORD:
            if (ISSPACE(c)) {
9f00138f:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001393:	0f 94 c0             	sete   al
9f001396:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001399:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f00139d:	84 c0                	test   al,al
9f00139f:	74 2f                	je     9f0013d0 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
                *p = 0;
9f0013a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0013a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
                argv[argc++] = start_of_word;
9f0013a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0013aa:	8d 50 01             	lea    edx,[eax+0x1]
9f0013ad:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0013b0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0013b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0013ba:	01 c2                	add    edx,eax
9f0013bc:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0013bf:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262
                state = DULL;
9f0013c1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264
            }
            continue;
9f0013c8:	eb 06                	jmp    9f0013d0 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f0013ca:	90                   	nop
9f0013cb:	eb 04                	jmp    9f0013d1 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0013cd:	90                   	nop
9f0013ce:	eb 01                	jmp    9f0013d1 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0013d0:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f0013d1:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233 (discriminator 1)
9f0013d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0013d8:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0013db:	73 0e                	jae    9f0013eb <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233 (discriminator 3)
9f0013dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0013e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0013e3:	84 c0                	test   al,al
9f0013e5:	0f 85 12 ff ff ff    	jne    9f0012fd <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f0013eb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0013ef:	74 22                	je     9f001413 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268 (discriminator 1)
9f0013f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0013f4:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0013f7:	73 1a                	jae    9f001413 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
        argv[argc++] = start_of_word;
9f0013f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0013fc:	8d 50 01             	lea    edx,[eax+0x1]
9f0013ff:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001402:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001409:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00140c:	01 c2                	add    edx,eax
9f00140e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001411:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271

    return argc;
9f001413:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:272
}
9f001416:	c9                   	leave  
9f001417:	c3                   	ret    

9f001418 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001418:	55                   	push   ebp
9f001419:	89 e5                	mov    ebp,esp
9f00141b:	e8 9f 2a 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001420:	05 8c 4d 00 00       	add    eax,0x4d8c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
    return splitI(buffer, argv, argv_size);
9f001425:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00142b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00142e:	e8 a1 fe ff ff       	call   9f0012d4 <splitI>
9f001433:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
}
9f001436:	c9                   	leave  
9f001437:	c3                   	ret    

9f001438 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:280

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001438:	55                   	push   ebp
9f001439:	89 e5                	mov    ebp,esp
9f00143b:	56                   	push   esi
9f00143c:	53                   	push   ebx
9f00143d:	81 ec 30 04 00 00    	sub    esp,0x430
9f001443:	e8 c8 2a 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f001448:	81 c3 64 4d 00 00    	add    ebx,0x4d64
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f00144e:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001454:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001457:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f00145d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001460:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001466:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
    char dblquote[2] = {'"',0};
9f001469:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001470:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:285
    *argc = 0;
9f001477:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00147a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
    
    strncpyI(cmd,cmdline,1024);
9f001480:	83 ec 04             	sub    esp,0x4
9f001483:	68 00 04 00 00       	push   0x400
9f001488:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00148b:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001491:	50                   	push   eax
9f001492:	e8 05 16 00 00       	call   9f002a9c <strncpyI>
9f001497:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:288
    strtrimI(cmd);
9f00149a:	83 ec 0c             	sub    esp,0xc
9f00149d:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f0014a3:	50                   	push   eax
9f0014a4:	e8 af 19 00 00       	call   9f002e58 <strtrimI>
9f0014a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f0014ac:	83 ec 04             	sub    esp,0x4
9f0014af:	68 a0 0f 00 00       	push   0xfa0
9f0014b4:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f0014ba:	50                   	push   eax
9f0014bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0014be:	e8 b9 1b 00 00       	call   9f00307c <strnstrI>
9f0014c3:	83 c4 10             	add    esp,0x10
9f0014c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
        spacePtr=strstrI(spacePtr," ");
9f0014c9:	83 ec 08             	sub    esp,0x8
9f0014cc:	8d 83 c9 f9 ff ff    	lea    eax,[ebx-0x637]
9f0014d2:	50                   	push   eax
9f0014d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0014d6:	e8 3f 1c 00 00       	call   9f00311a <strstrI>
9f0014db:	83 c4 10             	add    esp,0x10
9f0014de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:293
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f0014e1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0014e5:	74 48                	je     9f00152f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:293 (discriminator 1)
9f0014e7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0014ea:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0014ed:	77 40                	ja     9f00152f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295
        {
            char *temp = spacePtr;
9f0014ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014f2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f0014f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0014f8:	8d 50 01             	lea    edx,[eax+0x1]
9f0014fb:	83 ec 04             	sub    esp,0x4
9f0014fe:	68 a0 0f 00 00       	push   0xfa0
9f001503:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001509:	50                   	push   eax
9f00150a:	52                   	push   edx
9f00150b:	e8 6c 1b 00 00       	call   9f00307c <strnstrI>
9f001510:	83 c4 10             	add    esp,0x10
9f001513:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297
            if (spacePtr>=quotePtr+4000)
9f001516:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001519:	05 a0 0f 00 00       	add    eax,0xfa0
9f00151e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001521:	77 08                	ja     9f00152b <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001523:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001526:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001529:	eb 04                	jmp    9f00152f <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:300
            else
                spacePtr += 1;                              //Skip the closing quote
9f00152b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
        }
        *argc+=1;
9f00152f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001532:	8b 00                	mov    eax,DWORD PTR [eax]
9f001534:	8d 50 01             	lea    edx,[eax+0x1]
9f001537:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00153a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
        if (spacePtr!=0 && *spacePtr)
9f00153c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001540:	74 0e                	je     9f001550 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303 (discriminator 1)
9f001542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001545:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001548:	84 c0                	test   al,al
9f00154a:	74 04                	je     9f001550 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:304
            spacePtr++;
9f00154c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    
    } while (spacePtr!=0 && *spacePtr);
9f001550:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001554:	74 0e                	je     9f001564 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306 (discriminator 1)
9f001556:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001559:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00155c:	84 c0                	test   al,al
9f00155e:	0f 85 48 ff ff ff    	jne    9f0014ac <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001564:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001567:	8b 10                	mov    edx,DWORD PTR [eax]
9f001569:	89 d0                	mov    eax,edx
9f00156b:	c1 e0 08             	shl    eax,0x8
9f00156e:	29 d0                	sub    eax,edx
9f001570:	89 c2                	mov    edx,eax
9f001572:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001575:	8b 00                	mov    eax,DWORD PTR [eax]
9f001577:	c1 e0 02             	shl    eax,0x2
9f00157a:	01 d0                	add    eax,edx
9f00157c:	83 ec 0c             	sub    esp,0xc
9f00157f:	50                   	push   eax
9f001580:	e8 ad 03 00 00       	call   9f001932 <mallocI>
9f001585:	83 c4 10             	add    esp,0x10
9f001588:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:309
    int argvPtr=4* *argc;
9f00158b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00158e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001590:	c1 e0 02             	shl    eax,0x2
9f001593:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
    spacePtr=cmd;
9f001596:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f00159c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311
    for (int cnt=0;cnt<*argc; cnt++)
9f00159f:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f0015a6:	e9 72 01 00 00       	jmp    9f00171d <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
    {
        argv[cnt]=(char*)argv+argvPtr;
9f0015ab:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0015ae:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0015b5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0015b8:	01 d0                	add    eax,edx
9f0015ba:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f0015bd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f0015c0:	01 ca                	add    edx,ecx
9f0015c2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f0015c4:	83 ec 04             	sub    esp,0x4
9f0015c7:	68 a0 0f 00 00       	push   0xfa0
9f0015cc:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f0015d2:	50                   	push   eax
9f0015d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0015d6:	e8 a1 1a 00 00       	call   9f00307c <strnstrI>
9f0015db:	83 c4 10             	add    esp,0x10
9f0015de:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f0015e1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0015e5:	0f 84 80 00 00 00    	je     9f00166b <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315 (discriminator 1)
9f0015eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0015ee:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0015f1:	77 78                	ja     9f00166b <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
        {
            char *temp = spacePtr;
9f0015f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0015f6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f0015f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0015fc:	8d 50 01             	lea    edx,[eax+0x1]
9f0015ff:	83 ec 04             	sub    esp,0x4
9f001602:	68 a0 0f 00 00       	push   0xfa0
9f001607:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f00160d:	50                   	push   eax
9f00160e:	52                   	push   edx
9f00160f:	e8 68 1a 00 00       	call   9f00307c <strnstrI>
9f001614:	83 c4 10             	add    esp,0x10
9f001617:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
            if (spacePtr>=quotePtr+4000)
9f00161a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00161d:	05 a0 0f 00 00       	add    eax,0xfa0
9f001622:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001625:	77 0b                	ja     9f001632 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:320
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f001627:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00162a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:316
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f00162d:	e9 d4 00 00 00       	jmp    9f001706 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:323
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001632:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001635:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001638:	29 c2                	sub    edx,eax
9f00163a:	89 d0                	mov    eax,edx
9f00163c:	83 e8 02             	sub    eax,0x2
9f00163f:	89 c6                	mov    esi,eax
9f001641:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001644:	8d 50 01             	lea    edx,[eax+0x1]
9f001647:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00164a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001651:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001654:	01 c8                	add    eax,ecx
9f001656:	8b 00                	mov    eax,DWORD PTR [eax]
9f001658:	83 ec 04             	sub    esp,0x4
9f00165b:	56                   	push   esi
9f00165c:	52                   	push   edx
9f00165d:	50                   	push   eax
9f00165e:	e8 39 14 00 00       	call   9f002a9c <strncpyI>
9f001663:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:316
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001666:	e9 9b 00 00 00       	jmp    9f001706 <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f00166b:	83 ec 08             	sub    esp,0x8
9f00166e:	8d 83 c9 f9 ff ff    	lea    eax,[ebx-0x637]
9f001674:	50                   	push   eax
9f001675:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001678:	e8 9d 1a 00 00       	call   9f00311a <strstrI>
9f00167d:	83 c4 10             	add    esp,0x10
9f001680:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
            if (spacePtr)
9f001683:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001687:	74 2f                	je     9f0016b8 <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001689:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00168c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00168f:	29 c2                	sub    edx,eax
9f001691:	89 d0                	mov    eax,edx
9f001693:	89 c1                	mov    ecx,eax
9f001695:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001698:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00169f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0016a2:	01 d0                	add    eax,edx
9f0016a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0016a6:	83 ec 04             	sub    esp,0x4
9f0016a9:	51                   	push   ecx
9f0016aa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0016ad:	50                   	push   eax
9f0016ae:	e8 e9 13 00 00       	call   9f002a9c <strncpyI>
9f0016b3:	83 c4 10             	add    esp,0x10
9f0016b6:	eb 31                	jmp    9f0016e9 <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f0016b8:	83 ec 0c             	sub    esp,0xc
9f0016bb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0016be:	e8 65 12 00 00       	call   9f002928 <strlenI>
9f0016c3:	83 c4 10             	add    esp,0x10
9f0016c6:	89 c2                	mov    edx,eax
9f0016c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0016cb:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f0016d2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0016d5:	01 c8                	add    eax,ecx
9f0016d7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0016d9:	83 ec 04             	sub    esp,0x4
9f0016dc:	52                   	push   edx
9f0016dd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0016e0:	50                   	push   eax
9f0016e1:	e8 b6 13 00 00       	call   9f002a9c <strncpyI>
9f0016e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
            strtrimI(argv[cnt]);
9f0016e9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0016ec:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0016f3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0016f6:	01 d0                	add    eax,edx
9f0016f8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0016fa:	83 ec 0c             	sub    esp,0xc
9f0016fd:	50                   	push   eax
9f0016fe:	e8 55 17 00 00       	call   9f002e58 <strtrimI>
9f001703:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f001706:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001709:	8d 50 01             	lea    edx,[eax+0x1]
9f00170c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00170f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:336 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001712:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f001719:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311 (discriminator 1)
9f00171d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001720:	8b 00                	mov    eax,DWORD PTR [eax]
9f001722:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001725:	0f 8f 80 fe ff ff    	jg     9f0015ab <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f00172b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:339
}
9f00172e:	8d 65 f8             	lea    esp,[ebp-0x8]
9f001731:	5b                   	pop    ebx
9f001732:	5e                   	pop    esi
9f001733:	5d                   	pop    ebp
9f001734:	c3                   	ret    

9f001735 <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f001735:	55                   	push   ebp
9f001736:	89 e5                	mov    ebp,esp
9f001738:	83 ec 08             	sub    esp,0x8
9f00173b:	e8 7f 27 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001740:	05 6c 4a 00 00       	add    eax,0x4a6c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
    return cmdlineToArgvI(cmdline, argc);
9f001745:	83 ec 08             	sub    esp,0x8
9f001748:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00174b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00174e:	e8 e5 fc ff ff       	call   9f001438 <cmdlineToArgvI>
9f001753:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:344
}
9f001756:	c9                   	leave  
9f001757:	c3                   	ret    

9f001758 <test>:
test():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347

VISIBLE int test()
{
9f001758:	55                   	push   ebp
9f001759:	89 e5                	mov    ebp,esp
9f00175b:	e8 5f 27 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001760:	05 4c 4a 00 00       	add    eax,0x4a4c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:348
    return do_syscall0(0);
9f001765:	6a 00                	push   0x0
9f001767:	e8 0c f5 ff ff       	call   9f000c78 <do_syscall0>
9f00176c:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:349
9f00176f:	c9                   	leave  
9f001770:	c3                   	ret    
9f001771:	66 90                	xchg   ax,ax
9f001773:	90                   	nop

9f001774 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f001774:	55                   	push   ebp
9f001775:	89 e5                	mov    ebp,esp
9f001777:	53                   	push   ebx
9f001778:	83 ec 04             	sub    esp,0x4
9f00177b:	e8 3f 27 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001780:	05 2c 4a 00 00       	add    eax,0x4a2c
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f001785:	8b 90 d8 ff ff ff    	mov    edx,DWORD PTR [eax-0x28]
9f00178b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00178e:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f001790:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f001793:	8b 90 d8 ff ff ff    	mov    edx,DWORD PTR [eax-0x28]
9f001799:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f00179c:	8b 90 d8 ff ff ff    	mov    edx,DWORD PTR [eax-0x28]
9f0017a2:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0017a5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f0017a8:	8b 90 d8 ff ff ff    	mov    edx,DWORD PTR [eax-0x28]
9f0017ae:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f0017b1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f0017b4:	8b 90 d8 ff ff ff    	mov    edx,DWORD PTR [eax-0x28]
9f0017ba:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f0017bd:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f0017c0:	8b 90 d8 ff ff ff    	mov    edx,DWORD PTR [eax-0x28]
9f0017c6:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f0017c9:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f0017cc:	8b 90 d8 ff ff ff    	mov    edx,DWORD PTR [eax-0x28]
9f0017d2:	83 ec 08             	sub    esp,0x8
9f0017d5:	52                   	push   edx
9f0017d6:	6a 08                	push   0x8
9f0017d8:	89 c3                	mov    ebx,eax
9f0017da:	e8 59 f4 ff ff       	call   9f000c38 <do_syscall1>
9f0017df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f0017e2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0017e5:	c9                   	leave  
9f0017e6:	c3                   	ret    
9f0017e7:	90                   	nop

9f0017e8 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
#include "config.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
9f0017e8:	55                   	push   ebp
9f0017e9:	89 e5                	mov    ebp,esp
9f0017eb:	53                   	push   ebx
9f0017ec:	83 ec 04             	sub    esp,0x4
9f0017ef:	e8 1c 27 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f0017f4:	81 c3 b8 49 00 00    	add    ebx,0x49b8
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f0017fa:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001800:	8b 00                	mov    eax,DWORD PTR [eax]
9f001802:	50                   	push   eax
9f001803:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001809:	50                   	push   eax
9f00180a:	8d 83 f4 f9 ff ff    	lea    eax,[ebx-0x60c]
9f001810:	50                   	push   eax
9f001811:	68 00 00 00 01       	push   0x1000000
9f001816:	e8 b6 f6 ff ff       	call   9f000ed1 <printdI>
9f00181b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapBase=0;
9f00181e:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001824:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapCurr=0;
9f00182a:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001830:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    heapEnd=0;
9f001836:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f00183c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:19
    libcTZ=-5;
9f001842:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f001848:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:21

}
9f00184e:	90                   	nop
9f00184f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001852:	c9                   	leave  
9f001853:	c3                   	ret    

9f001854 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001854:	55                   	push   ebp
9f001855:	89 e5                	mov    ebp,esp
9f001857:	83 ec 10             	sub    esp,0x10
9f00185a:	e8 60 26 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00185f:	05 4d 49 00 00       	add    eax,0x494d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:27
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f001864:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001867:	83 c2 20             	add    edx,0x20
9f00186a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:29
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f00186d:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f001873:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f001875:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001878:	01 d1                	add    ecx,edx
9f00187a:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f001880:	8b 12                	mov    edx,DWORD PTR [edx]
9f001882:	39 d1                	cmp    ecx,edx
9f001884:	76 4e                	jbe    9f0018d4 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f001886:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f00188c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00188e:	8b 80 e4 ff ff ff    	mov    eax,DWORD PTR [eax-0x1c]
9f001894:	8b 00                	mov    eax,DWORD PTR [eax]
9f001896:	29 c2                	sub    edx,eax
9f001898:	89 d0                	mov    eax,edx
9f00189a:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33
        if (newSize== 0 || newSize%PAGE_SIZE)
9f00189d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f0018a1:	74 0c                	je     9f0018af <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33 (discriminator 1)
9f0018a3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0018a6:	25 ff 0f 00 00       	and    eax,0xfff
9f0018ab:	85 c0                	test   eax,eax
9f0018ad:	74 10                	je     9f0018bf <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0018af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0018b2:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0018b7:	05 00 10 00 00       	add    eax,0x1000
9f0018bc:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f0018bf:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
9f0018c6:	77 07                	ja     9f0018cf <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
            return ALLOC_REQUEST_SIZE;
9f0018c8:	b8 00 20 03 00       	mov    eax,0x32000
9f0018cd:	eb 0a                	jmp    9f0018d9 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:41
        else
            return newSize;
9f0018cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0018d2:	eb 05                	jmp    9f0018d9 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
    }
    else
        return 0;
9f0018d4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
}
9f0018d9:	c9                   	leave  
9f0018da:	c3                   	ret    

9f0018db <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48

void freeI(void* fpointer)
{
9f0018db:	55                   	push   ebp
9f0018dc:	89 e5                	mov    ebp,esp
9f0018de:	83 ec 10             	sub    esp,0x10
9f0018e1:	e8 d9 25 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0018e6:	05 c6 48 00 00       	add    eax,0x48c6
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer < heapBase || fpointer > heapCurr)
9f0018eb:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
9f0018f1:	8b 12                	mov    edx,DWORD PTR [edx]
9f0018f3:	39 55 08             	cmp    DWORD PTR [ebp+0x8],edx
9f0018f6:	72 31                	jb     9f001929 <freeI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51 (discriminator 1)
9f0018f8:	8b 80 f0 ff ff ff    	mov    eax,DWORD PTR [eax-0x10]
9f0018fe:	8b 00                	mov    eax,DWORD PTR [eax]
9f001900:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
9f001903:	77 24                	ja     9f001929 <freeI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:54
        return;
    
    if (fpointer==NULL)
9f001905:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f001909:	74 21                	je     9f00192c <freeI+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:56
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f00190b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00190e:	83 e8 10             	sub    eax,0x10
9f001911:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f001914:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001917:	8b 00                	mov    eax,DWORD PTR [eax]
9f001919:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
9f00191e:	75 0f                	jne    9f00192f <freeI+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:64
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
    }
    mp->inUse=false;
9f001920:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001923:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f001927:	eb 07                	jmp    9f001930 <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer < heapBase || fpointer > heapCurr)
        return;
9f001929:	90                   	nop
9f00192a:	eb 04                	jmp    9f001930 <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f00192c:	90                   	nop
9f00192d:	eb 01                	jmp    9f001930 <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
9f00192f:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65
    }
    mp->inUse=false;
}
9f001930:	c9                   	leave  
9f001931:	c3                   	ret    

9f001932 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68

void*  mallocI(size_t size)
{
9f001932:	55                   	push   ebp
9f001933:	89 e5                	mov    ebp,esp
9f001935:	53                   	push   ebx
9f001936:	83 ec 24             	sub    esp,0x24
9f001939:	e8 d2 25 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f00193e:	81 c3 6e 48 00 00    	add    ebx,0x486e
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
9f001944:	83 ec 04             	sub    esp,0x4
9f001947:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00194a:	8d 83 17 fa ff ff    	lea    eax,[ebx-0x5e9]
9f001950:	50                   	push   eax
9f001951:	68 00 00 00 01       	push   0x1000000
9f001956:	e8 76 f5 ff ff       	call   9f000ed1 <printdI>
9f00195b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
    needed = newHeapRequiredToFulfillRequest(size);
9f00195e:	83 ec 0c             	sub    esp,0xc
9f001961:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001964:	e8 eb fe ff ff       	call   9f001854 <newHeapRequiredToFulfillRequest>
9f001969:	83 c4 10             	add    esp,0x10
9f00196c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f00196f:	83 ec 04             	sub    esp,0x4
9f001972:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001975:	8d 83 27 fa ff ff    	lea    eax,[ebx-0x5d9]
9f00197b:	50                   	push   eax
9f00197c:	68 00 00 00 01       	push   0x1000000
9f001981:	e8 4b f5 ff ff       	call   9f000ed1 <printdI>
9f001986:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
    if (needed!=0)      //New heap required
9f001989:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f00198d:	0f 84 ae 00 00 00    	je     9f001a41 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
9f001993:	83 ec 08             	sub    esp,0x8
9f001996:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001999:	68 65 01 00 00       	push   0x165
9f00199e:	e8 95 f2 ff ff       	call   9f000c38 <do_syscall1>
9f0019a3:	83 c4 10             	add    esp,0x10
9f0019a6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0019a9:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0019af:	8b 00                	mov    eax,DWORD PTR [eax]
9f0019b1:	83 ec 04             	sub    esp,0x4
9f0019b4:	50                   	push   eax
9f0019b5:	8d 83 43 fa ff ff    	lea    eax,[ebx-0x5bd]
9f0019bb:	50                   	push   eax
9f0019bc:	68 00 00 00 01       	push   0x1000000
9f0019c1:	e8 0b f5 ff ff       	call   9f000ed1 <printdI>
9f0019c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
        heapEnd=allocatedPtr+needed;
9f0019c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0019cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0019cf:	01 c2                	add    edx,eax
9f0019d1:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0019d7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0019d9:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0019df:	8b 00                	mov    eax,DWORD PTR [eax]
9f0019e1:	83 ec 0c             	sub    esp,0xc
9f0019e4:	50                   	push   eax
9f0019e5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0019e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0019eb:	8d 83 60 fa ff ff    	lea    eax,[ebx-0x5a0]
9f0019f1:	50                   	push   eax
9f0019f2:	68 00 00 00 01       	push   0x1000000
9f0019f7:	e8 d5 f4 ff ff       	call   9f000ed1 <printdI>
9f0019fc:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
        if (heapBase==0)    //Hasn't been initialized yet!
9f0019ff:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001a05:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a07:	85 c0                	test   eax,eax
9f001a09:	75 36                	jne    9f001a41 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:87
        {
            heapCurr=allocatedPtr;
9f001a0b:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001a11:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001a14:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:88
            heapBase=allocatedPtr;
9f001a16:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f001a1c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001a1f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f001a21:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001a27:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a29:	83 ec 04             	sub    esp,0x4
9f001a2c:	50                   	push   eax
9f001a2d:	8d 83 a0 fa ff ff    	lea    eax,[ebx-0x560]
9f001a33:	50                   	push   eax
9f001a34:	68 00 00 00 01       	push   0x1000000
9f001a39:	e8 93 f4 ff ff       	call   9f000ed1 <printdI>
9f001a3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f001a41:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001a47:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a49:	83 ec 04             	sub    esp,0x4
9f001a4c:	50                   	push   eax
9f001a4d:	8d 83 dc fa ff ff    	lea    eax,[ebx-0x524]
9f001a53:	50                   	push   eax
9f001a54:	68 00 00 00 01       	push   0x1000000
9f001a59:	e8 73 f4 ff ff       	call   9f000ed1 <printdI>
9f001a5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr = (heaprec_t*)heapCurr;
9f001a61:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001a67:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f001a6c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001a6f:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    heapPtr->len=size;
9f001a75:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001a78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001a7b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    heapPtr->inUse=true;
9f001a7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001a81:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
9f001a85:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001a8b:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a8d:	6a 10                	push   0x10
9f001a8f:	50                   	push   eax
9f001a90:	8d 83 04 fb ff ff    	lea    eax,[ebx-0x4fc]
9f001a96:	50                   	push   eax
9f001a97:	68 00 00 00 01       	push   0x1000000
9f001a9c:	e8 30 f4 ff ff       	call   9f000ed1 <printdI>
9f001aa1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
9f001aa4:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001aaa:	8b 00                	mov    eax,DWORD PTR [eax]
9f001aac:	83 c0 10             	add    eax,0x10
9f001aaf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
9f001ab2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001ab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f001ab8:	8d 50 10             	lea    edx,[eax+0x10]
9f001abb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001abe:	01 d0                	add    eax,edx
9f001ac0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
9f001ac3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ac6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001ac9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
    heapCurr+=size+(sizeof(heaprec_t));
9f001acc:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001ad2:	8b 10                	mov    edx,DWORD PTR [eax]
9f001ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ad7:	01 d0                	add    eax,edx
9f001ad9:	8d 50 10             	lea    edx,[eax+0x10]
9f001adc:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001ae2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f001ae4:	83 ec 04             	sub    esp,0x4
9f001ae7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f001aea:	8d 83 3c fb ff ff    	lea    eax,[ebx-0x4c4]
9f001af0:	50                   	push   eax
9f001af1:	68 00 00 00 01       	push   0x1000000
9f001af6:	e8 d6 f3 ff ff       	call   9f000ed1 <printdI>
9f001afb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:103
    return retVal;
9f001afe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104
}
9f001b01:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001b04:	c9                   	leave  
9f001b05:	c3                   	ret    

9f001b06 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f001b06:	55                   	push   ebp
9f001b07:	89 e5                	mov    ebp,esp
9f001b09:	83 ec 08             	sub    esp,0x8
9f001b0c:	e8 ae 23 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001b11:	05 9b 46 00 00       	add    eax,0x469b
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
    return mallocI(size);
9f001b16:	83 ec 0c             	sub    esp,0xc
9f001b19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b1c:	e8 11 fe ff ff       	call   9f001932 <mallocI>
9f001b21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109
}
9f001b24:	c9                   	leave  
9f001b25:	c3                   	ret    

9f001b26 <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112

void* reallocI(void *foldptr, uint32_t newlen)
{
9f001b26:	55                   	push   ebp
9f001b27:	89 e5                	mov    ebp,esp
9f001b29:	53                   	push   ebx
9f001b2a:	83 ec 14             	sub    esp,0x14
9f001b2d:	e8 de 23 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f001b32:	81 c3 7a 46 00 00    	add    ebx,0x467a
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(newlen);
9f001b38:	83 ec 0c             	sub    esp,0xc
9f001b3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001b3e:	e8 ef fd ff ff       	call   9f001932 <mallocI>
9f001b43:	83 c4 10             	add    esp,0x10
9f001b46:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:119
   
    //Get old heap pointer
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f001b49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b4c:	83 e8 10             	sub    eax,0x10
9f001b4f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:122
    
    //Copy from old pointer to new memory using the old pointer's length
    memsetI(fnewptr+mp->len,0,newlen);
9f001b52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f001b58:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001b62:	01 d0                	add    eax,edx
9f001b64:	83 ec 04             	sub    esp,0x4
9f001b67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001b6a:	6a 00                	push   0x0
9f001b6c:	50                   	push   eax
9f001b6d:	e8 66 02 00 00       	call   9f001dd8 <memsetI>
9f001b72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
    memcpyI(fnewptr, foldptr, mp->len>newlen?newlen:mp->len);
9f001b75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f001b7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b7e:	39 c2                	cmp    edx,eax
9f001b80:	0f 46 c2             	cmovbe eax,edx
9f001b83:	83 ec 04             	sub    esp,0x4
9f001b86:	50                   	push   eax
9f001b87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b8a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001b8d:	e8 8a 00 00 00       	call   9f001c1c <memcpyI>
9f001b92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:126
    
   //free old pointer
    freeI(foldptr);
9f001b95:	83 ec 0c             	sub    esp,0xc
9f001b98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b9b:	e8 3b fd ff ff       	call   9f0018db <freeI>
9f001ba0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
    return fnewptr;
9f001ba3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
}
9f001ba6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001ba9:	c9                   	leave  
9f001baa:	c3                   	ret    

9f001bab <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:131

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f001bab:	55                   	push   ebp
9f001bac:	89 e5                	mov    ebp,esp
9f001bae:	83 ec 08             	sub    esp,0x8
9f001bb1:	e8 09 23 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001bb6:	05 f6 45 00 00       	add    eax,0x45f6
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
    return reallocI(foldptr, newlen);
9f001bbb:	83 ec 08             	sub    esp,0x8
9f001bbe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001bc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001bc4:	e8 5d ff ff ff       	call   9f001b26 <reallocI>
9f001bc9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133
}
9f001bcc:	c9                   	leave  
9f001bcd:	c3                   	ret    

9f001bce <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f001bce:	55                   	push   ebp
9f001bcf:	89 e5                	mov    ebp,esp
9f001bd1:	e8 e9 22 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001bd6:	05 d6 45 00 00       	add    eax,0x45d6
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
    freeI(fpointer);
9f001bdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001bde:	e8 f8 fc ff ff       	call   9f0018db <freeI>
9f001be3:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
}
9f001be6:	90                   	nop
9f001be7:	c9                   	leave  
9f001be8:	c3                   	ret    

9f001be9 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:141

void malloc_cleanup()
{
9f001be9:	55                   	push   ebp
9f001bea:	89 e5                	mov    ebp,esp
9f001bec:	53                   	push   ebx
9f001bed:	83 ec 04             	sub    esp,0x4
9f001bf0:	e8 ca 22 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001bf5:	05 b7 45 00 00       	add    eax,0x45b7
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
    do_syscall1(SYSCALL_FREE, heapBase);
9f001bfa:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
9f001c00:	8b 12                	mov    edx,DWORD PTR [edx]
9f001c02:	83 ec 08             	sub    esp,0x8
9f001c05:	52                   	push   edx
9f001c06:	68 64 01 00 00       	push   0x164
9f001c0b:	89 c3                	mov    ebx,eax
9f001c0d:	e8 26 f0 ff ff       	call   9f000c38 <do_syscall1>
9f001c12:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
9f001c15:	90                   	nop
9f001c16:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001c19:	c9                   	leave  
9f001c1a:	c3                   	ret    
9f001c1b:	90                   	nop

9f001c1c <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f001c1c:	55                   	push   ebp
9f001c1d:	89 e5                	mov    ebp,esp
9f001c1f:	83 ec 20             	sub    esp,0x20
9f001c22:	e8 98 22 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001c27:	05 85 45 00 00       	add    eax,0x4585
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f001c2c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c2f:	83 e0 03             	and    eax,0x3
9f001c32:	85 c0                	test   eax,eax
9f001c34:	0f 94 c0             	sete   al
9f001c37:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f001c3a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c3d:	83 e0 01             	and    eax,0x1
9f001c40:	85 c0                	test   eax,eax
9f001c42:	0f 94 c0             	sete   al
9f001c45:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f001c48:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f001c4c:	74 7d                	je     9f001ccb <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f001c4e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c51:	c1 e8 02             	shr    eax,0x2
9f001c54:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f001c57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c5a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f001c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001c60:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f001c63:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c66:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f001c69:	73 4b                	jae    9f001cb6 <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f001c6b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c6e:	c1 e0 02             	shl    eax,0x2
9f001c71:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f001c74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c77:	c1 e0 02             	shl    eax,0x2
9f001c7a:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f001c7d:	eb 12                	jmp    9f001c91 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f001c7f:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f001c83:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f001c87:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c8a:	8b 10                	mov    edx,DWORD PTR [eax]
9f001c8c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001c8f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f001c91:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001c94:	8d 50 ff             	lea    edx,[eax-0x1]
9f001c97:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001c9a:	85 c0                	test   eax,eax
9f001c9c:	75 e1                	jne    9f001c7f <memcpyI+0x63>
9f001c9e:	eb 23                	jmp    9f001cc3 <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f001ca0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001ca3:	8d 50 04             	lea    edx,[eax+0x4]
9f001ca6:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001ca9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001cac:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001caf:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f001cb2:	8b 12                	mov    edx,DWORD PTR [edx]
9f001cb4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001cb6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001cb9:	8d 50 ff             	lea    edx,[eax-0x1]
9f001cbc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001cbf:	85 c0                	test   eax,eax
9f001cc1:	75 dd                	jne    9f001ca0 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f001cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001cc6:	e9 ea 00 00 00       	jmp    9f001db5 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f001ccb:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f001ccf:	74 79                	je     9f001d4a <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f001cd1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001cd4:	d1 e8                	shr    eax,1
9f001cd6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f001cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cdc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f001cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ce2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f001ce5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001ce8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f001ceb:	73 4b                	jae    9f001d38 <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f001ced:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001cf0:	c1 e0 02             	shl    eax,0x2
9f001cf3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f001cf6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001cf9:	c1 e0 02             	shl    eax,0x2
9f001cfc:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f001cff:	eb 12                	jmp    9f001d13 <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f001d01:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f001d05:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f001d09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d0c:	8b 10                	mov    edx,DWORD PTR [eax]
9f001d0e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001d11:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f001d13:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d16:	8d 50 ff             	lea    edx,[eax-0x1]
9f001d19:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001d1c:	85 c0                	test   eax,eax
9f001d1e:	75 e1                	jne    9f001d01 <memcpyI+0xe5>
9f001d20:	eb 23                	jmp    9f001d45 <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f001d22:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001d25:	8d 50 04             	lea    edx,[eax+0x4]
9f001d28:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001d2b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001d2e:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001d31:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f001d34:	8b 12                	mov    edx,DWORD PTR [edx]
9f001d36:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001d38:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d3b:	8d 50 ff             	lea    edx,[eax-0x1]
9f001d3e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001d41:	85 c0                	test   eax,eax
9f001d43:	75 dd                	jne    9f001d22 <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f001d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d48:	eb 6b                	jmp    9f001db5 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f001d4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f001d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001d53:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f001d56:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001d59:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001d5c:	73 47                	jae    9f001da5 <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f001d5e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d61:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f001d64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d67:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f001d6a:	eb 13                	jmp    9f001d7f <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f001d6c:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f001d70:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f001d74:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001d77:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f001d7a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001d7d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f001d7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d82:	8d 50 ff             	lea    edx,[eax-0x1]
9f001d85:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001d88:	85 c0                	test   eax,eax
9f001d8a:	75 e0                	jne    9f001d6c <memcpyI+0x150>
9f001d8c:	eb 24                	jmp    9f001db2 <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f001d8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001d91:	8d 50 01             	lea    edx,[eax+0x1]
9f001d94:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f001d97:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001d9a:	8d 4a 01             	lea    ecx,[edx+0x1]
9f001d9d:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f001da0:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001da3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f001da5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001da8:	8d 50 ff             	lea    edx,[eax-0x1]
9f001dab:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001dae:	85 c0                	test   eax,eax
9f001db0:	75 dc                	jne    9f001d8e <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f001db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f001db5:	c9                   	leave  
9f001db6:	c3                   	ret    

9f001db7 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f001db7:	55                   	push   ebp
9f001db8:	89 e5                	mov    ebp,esp
9f001dba:	e8 00 21 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001dbf:	05 ed 43 00 00       	add    eax,0x43ed
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f001dc4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001dc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001dca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001dcd:	e8 4a fe ff ff       	call   9f001c1c <memcpyI>
9f001dd2:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f001dd5:	c9                   	leave  
9f001dd6:	c3                   	ret    
9f001dd7:	90                   	nop

9f001dd8 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f001dd8:	55                   	push   ebp
9f001dd9:	89 e5                	mov    ebp,esp
9f001ddb:	83 ec 20             	sub    esp,0x20
9f001dde:	e8 dc 20 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001de3:	05 c9 43 00 00       	add    eax,0x43c9
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f001de8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001deb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f001dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001df1:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f001df4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001df7:	c1 e0 10             	shl    eax,0x10
9f001dfa:	89 c2                	mov    edx,eax
9f001dfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001dff:	c1 e0 08             	shl    eax,0x8
9f001e02:	09 c2                	or     edx,eax
9f001e04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e07:	09 d0                	or     eax,edx
9f001e09:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f001e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001e10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f001e13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e16:	c1 e0 18             	shl    eax,0x18
9f001e19:	89 c2                	mov    edx,eax
9f001e1b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e1e:	c1 e0 10             	shl    eax,0x10
9f001e21:	09 c2                	or     edx,eax
9f001e23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e26:	c1 e0 08             	shl    eax,0x8
9f001e29:	09 d0                	or     eax,edx
9f001e2b:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f001e2e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f001e31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001e34:	83 e0 03             	and    eax,0x3
9f001e37:	85 c0                	test   eax,eax
9f001e39:	75 1c                	jne    9f001e57 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f001e3b:	eb 0e                	jmp    9f001e4b <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f001e3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e40:	8d 50 04             	lea    edx,[eax+0x4]
9f001e43:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001e46:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001e49:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f001e4b:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f001e4f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f001e53:	75 e8                	jne    9f001e3d <memsetI+0x65>
9f001e55:	eb 43                	jmp    9f001e9a <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f001e57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001e5a:	83 e0 01             	and    eax,0x1
9f001e5d:	85 c0                	test   eax,eax
9f001e5f:	75 2c                	jne    9f001e8d <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f001e61:	eb 10                	jmp    9f001e73 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f001e63:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001e66:	8d 50 02             	lea    edx,[eax+0x2]
9f001e69:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001e6c:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f001e70:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f001e73:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f001e77:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f001e7b:	75 e6                	jne    9f001e63 <memsetI+0x8b>
9f001e7d:	eb 1b                	jmp    9f001e9a <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f001e7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001e82:	8d 50 01             	lea    edx,[eax+0x1]
9f001e85:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f001e88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001e8b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f001e8d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001e90:	8d 50 ff             	lea    edx,[eax-0x1]
9f001e93:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001e96:	85 c0                	test   eax,eax
9f001e98:	75 e5                	jne    9f001e7f <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f001e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f001e9d:	c9                   	leave  
9f001e9e:	c3                   	ret    

9f001e9f <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f001e9f:	55                   	push   ebp
9f001ea0:	89 e5                	mov    ebp,esp
9f001ea2:	e8 18 20 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001ea7:	05 05 43 00 00       	add    eax,0x4305
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f001eac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001eaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001eb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001eb5:	e8 1e ff ff ff       	call   9f001dd8 <memsetI>
9f001eba:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f001ebd:	c9                   	leave  
9f001ebe:	c3                   	ret    
9f001ebf:	90                   	nop

9f001ec0 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f001ec0:	55                   	push   ebp
9f001ec1:	89 e5                	mov    ebp,esp
9f001ec3:	53                   	push   ebx
9f001ec4:	83 ec 04             	sub    esp,0x4
9f001ec7:	e8 f3 1f 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001ecc:	05 e0 42 00 00       	add    eax,0x42e0
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f001ed1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001ed4:	83 ec 08             	sub    esp,0x8
9f001ed7:	52                   	push   edx
9f001ed8:	6a 07                	push   0x7
9f001eda:	89 c3                	mov    ebx,eax
9f001edc:	e8 57 ed ff ff       	call   9f000c38 <do_syscall1>
9f001ee1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
9f001ee4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001ee7:	c9                   	leave  
9f001ee8:	c3                   	ret    
9f001ee9:	66 90                	xchg   ax,ax
9f001eeb:	90                   	nop

9f001eec <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f001eec:	55                   	push   ebp
9f001eed:	89 e5                	mov    ebp,esp
9f001eef:	53                   	push   ebx
9f001ef0:	83 ec 10             	sub    esp,0x10
9f001ef3:	e8 c7 1f 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f001ef8:	05 b4 42 00 00       	add    eax,0x42b4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f001efd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f001f04:	eb 29                	jmp    9f001f2f <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f001f06:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f001f09:	89 d0                	mov    eax,edx
9f001f0b:	c1 e0 02             	shl    eax,0x2
9f001f0e:	01 d0                	add    eax,edx
9f001f10:	01 c0                	add    eax,eax
9f001f12:	89 c3                	mov    ebx,eax
9f001f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001f17:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f19:	8d 48 01             	lea    ecx,[eax+0x1]
9f001f1c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001f1f:	89 0a                	mov    DWORD PTR [edx],ecx
9f001f21:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001f24:	0f be c0             	movsx  eax,al
9f001f27:	01 d8                	add    eax,ebx
9f001f29:	83 e8 30             	sub    eax,0x30
9f001f2c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f001f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001f32:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001f37:	0f be c0             	movsx  eax,al
9f001f3a:	83 e8 30             	sub    eax,0x30
9f001f3d:	83 f8 09             	cmp    eax,0x9
9f001f40:	76 c4                	jbe    9f001f06 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f001f42:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f001f45:	83 c4 10             	add    esp,0x10
9f001f48:	5b                   	pop    ebx
9f001f49:	5d                   	pop    ebp
9f001f4a:	c3                   	ret    

9f001f4b <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f001f4b:	55                   	push   ebp
9f001f4c:	89 e5                	mov    ebp,esp
9f001f4e:	56                   	push   esi
9f001f4f:	53                   	push   ebx
9f001f50:	83 ec 60             	sub    esp,0x60
9f001f53:	e8 b8 1f 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f001f58:	81 c3 54 42 00 00    	add    ebx,0x4254
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f001f5e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001f61:	83 e0 20             	and    eax,0x20
9f001f64:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f001f67:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001f6a:	83 e0 10             	and    eax,0x10
9f001f6d:	85 c0                	test   eax,eax
9f001f6f:	74 04                	je     9f001f75 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f001f71:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f001f75:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f001f79:	7e 06                	jle    9f001f81 <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f001f7b:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001f7f:	7e 0a                	jle    9f001f8b <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f001f81:	b8 00 00 00 00       	mov    eax,0x0
9f001f86:	e9 f7 01 00 00       	jmp    9f002182 <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f001f8b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001f8e:	83 e0 01             	and    eax,0x1
9f001f91:	85 c0                	test   eax,eax
9f001f93:	74 07                	je     9f001f9c <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f001f95:	b8 30 00 00 00       	mov    eax,0x30
9f001f9a:	eb 05                	jmp    9f001fa1 <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f001f9c:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f001fa1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f001fa4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f001fa8:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001fab:	83 e0 02             	and    eax,0x2
9f001fae:	85 c0                	test   eax,eax
9f001fb0:	74 39                	je     9f001feb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f001fb2:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001fb6:	79 0d                	jns    9f001fc5 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f001fb8:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f001fbc:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f001fbf:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001fc3:	eb 26                	jmp    9f001feb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f001fc5:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001fc8:	83 e0 04             	and    eax,0x4
9f001fcb:	85 c0                	test   eax,eax
9f001fcd:	74 0a                	je     9f001fd9 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f001fcf:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f001fd3:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001fd7:	eb 12                	jmp    9f001feb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f001fd9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001fdc:	83 e0 08             	and    eax,0x8
9f001fdf:	85 c0                	test   eax,eax
9f001fe1:	74 08                	je     9f001feb <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f001fe3:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f001fe7:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f001feb:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001fee:	83 e0 40             	and    eax,0x40
9f001ff1:	85 c0                	test   eax,eax
9f001ff3:	74 16                	je     9f00200b <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f001ff5:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001ff9:	75 06                	jne    9f002001 <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f001ffb:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f001fff:	eb 0a                	jmp    9f00200b <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f002001:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f002005:	75 04                	jne    9f00200b <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f002007:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f00200b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f002012:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002016:	75 4d                	jne    9f002065 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f002018:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00201b:	8d 50 01             	lea    edx,[eax+0x1]
9f00201e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002021:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f002026:	eb 43                	jmp    9f00206b <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f002028:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f00202b:	8d 41 01             	lea    eax,[ecx+0x1]
9f00202e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002031:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002034:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f002037:	ba 00 00 00 00       	mov    edx,0x0
9f00203c:	f7 f6                	div    esi
9f00203e:	89 d0                	mov    eax,edx
9f002040:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f002043:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002046:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f002049:	ba 00 00 00 00       	mov    edx,0x0
9f00204e:	f7 f6                	div    esi
9f002050:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f002053:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002056:	0f b6 84 03 ec fc ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x314]
9f00205d:	ff 
9f00205e:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f002061:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f002065:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002069:	75 bd                	jne    9f002028 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f00206b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00206e:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f002071:	7e 06                	jle    9f002079 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f002073:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002076:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f002079:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f00207c:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f00207f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002082:	83 e0 11             	and    eax,0x11
9f002085:	85 c0                	test   eax,eax
9f002087:	75 1b                	jne    9f0020a4 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f002089:	eb 0c                	jmp    9f002097 <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f00208b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00208e:	8d 50 01             	lea    edx,[eax+0x1]
9f002091:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002094:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f002097:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f00209a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00209d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0020a0:	85 c0                	test   eax,eax
9f0020a2:	7f e7                	jg     9f00208b <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f0020a4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f0020a8:	74 0f                	je     9f0020b9 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f0020aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0020ad:	8d 50 01             	lea    edx,[eax+0x1]
9f0020b0:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0020b3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0020b7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f0020b9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0020bc:	83 e0 40             	and    eax,0x40
9f0020bf:	85 c0                	test   eax,eax
9f0020c1:	74 38                	je     9f0020fb <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f0020c3:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f0020c7:	75 0e                	jne    9f0020d7 <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f0020c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0020cc:	8d 50 01             	lea    edx,[eax+0x1]
9f0020cf:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0020d2:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f0020d5:	eb 24                	jmp    9f0020fb <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f0020d7:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0020db:	75 1e                	jne    9f0020fb <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f0020dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0020e0:	8d 50 01             	lea    edx,[eax+0x1]
9f0020e3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0020e6:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f0020e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0020ec:	8d 50 01             	lea    edx,[eax+0x1]
9f0020ef:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0020f2:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f0020f6:	83 ca 58             	or     edx,0x58
9f0020f9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f0020fb:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0020fe:	83 e0 10             	and    eax,0x10
9f002101:	85 c0                	test   eax,eax
9f002103:	75 2c                	jne    9f002131 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f002105:	eb 0f                	jmp    9f002116 <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f002107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00210a:	8d 50 01             	lea    edx,[eax+0x1]
9f00210d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002110:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f002114:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f002116:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002119:	8d 50 ff             	lea    edx,[eax-0x1]
9f00211c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00211f:	85 c0                	test   eax,eax
9f002121:	7f e4                	jg     9f002107 <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f002123:	eb 0c                	jmp    9f002131 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f002125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002128:	8d 50 01             	lea    edx,[eax+0x1]
9f00212b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00212e:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f002131:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f002134:	8d 50 ff             	lea    edx,[eax-0x1]
9f002137:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f00213a:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00213d:	7f e6                	jg     9f002125 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f00213f:	eb 16                	jmp    9f002157 <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f002141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002144:	8d 50 01             	lea    edx,[eax+0x1]
9f002147:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00214a:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f00214d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002150:	01 ca                	add    edx,ecx
9f002152:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002155:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f002157:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00215a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00215d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002160:	85 c0                	test   eax,eax
9f002162:	7f dd                	jg     9f002141 <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f002164:	eb 0c                	jmp    9f002172 <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f002166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002169:	8d 50 01             	lea    edx,[eax+0x1]
9f00216c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00216f:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f002172:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002175:	8d 50 ff             	lea    edx,[eax-0x1]
9f002178:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00217b:	85 c0                	test   eax,eax
9f00217d:	7f e7                	jg     9f002166 <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f00217f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f002182:	83 c4 60             	add    esp,0x60
9f002185:	5b                   	pop    ebx
9f002186:	5e                   	pop    esi
9f002187:	5d                   	pop    ebp
9f002188:	c3                   	ret    

9f002189 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f002189:	55                   	push   ebp
9f00218a:	89 e5                	mov    ebp,esp
9f00218c:	53                   	push   ebx
9f00218d:	83 ec 34             	sub    esp,0x34
9f002190:	e8 7b 1d 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f002195:	81 c3 17 40 00 00    	add    ebx,0x4017
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f00219b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00219e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f0021a1:	e9 08 04 00 00       	jmp    9f0025ae <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f0021a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021ac:	3c 25                	cmp    al,0x25
9f0021ae:	74 16                	je     9f0021c6 <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f0021b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0021b3:	8d 50 01             	lea    edx,[eax+0x1]
9f0021b6:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0021b9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0021bc:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0021bf:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f0021c1:	e9 df 03 00 00       	jmp    9f0025a5 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f0021c6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f0021cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021d0:	83 c0 01             	add    eax,0x1
9f0021d3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f0021d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021d9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021dc:	0f be c0             	movsx  eax,al
9f0021df:	83 e8 20             	sub    eax,0x20
9f0021e2:	83 f8 10             	cmp    eax,0x10
9f0021e5:	77 2c                	ja     9f002213 <.L43>
9f0021e7:	c1 e0 02             	shl    eax,0x2
9f0021ea:	8b 84 18 58 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4a8]
9f0021f1:	01 d8                	add    eax,ebx
9f0021f3:	ff e0                	jmp    eax

9f0021f5 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f0021f5:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f0021f9:	eb d2                	jmp    9f0021cd <vsprintf+0x44>

9f0021fb <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f0021fb:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f0021ff:	eb cc                	jmp    9f0021cd <vsprintf+0x44>

9f002201 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f002201:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f002205:	eb c6                	jmp    9f0021cd <vsprintf+0x44>

9f002207 <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f002207:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f00220b:	eb c0                	jmp    9f0021cd <vsprintf+0x44>

9f00220d <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f00220d:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f002211:	eb ba                	jmp    9f0021cd <vsprintf+0x44>

9f002213 <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f002213:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f00221a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00221d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002220:	0f be c0             	movsx  eax,al
9f002223:	83 e8 30             	sub    eax,0x30
9f002226:	83 f8 09             	cmp    eax,0x9
9f002229:	77 11                	ja     9f00223c <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f00222b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00222e:	50                   	push   eax
9f00222f:	e8 b8 fc ff ff       	call   9f001eec <skip_atoi>
9f002234:	83 c4 04             	add    esp,0x4
9f002237:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f00223a:	eb 2e                	jmp    9f00226a <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f00223c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00223f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002242:	3c 2a                	cmp    al,0x2a
9f002244:	75 24                	jne    9f00226a <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f002246:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002249:	83 c0 01             	add    eax,0x1
9f00224c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f00224f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002252:	8d 50 04             	lea    edx,[eax+0x4]
9f002255:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002258:	8b 00                	mov    eax,DWORD PTR [eax]
9f00225a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f00225d:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002261:	79 07                	jns    9f00226a <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f002263:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f002266:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f00226a:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f002271:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002274:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002277:	3c 2e                	cmp    al,0x2e
9f002279:	75 59                	jne    9f0022d4 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f00227b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00227e:	83 c0 01             	add    eax,0x1
9f002281:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f002284:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002287:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00228a:	0f be c0             	movsx  eax,al
9f00228d:	83 e8 30             	sub    eax,0x30
9f002290:	83 f8 09             	cmp    eax,0x9
9f002293:	77 11                	ja     9f0022a6 <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f002295:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002298:	50                   	push   eax
9f002299:	e8 4e fc ff ff       	call   9f001eec <skip_atoi>
9f00229e:	83 c4 04             	add    esp,0x4
9f0022a1:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f0022a4:	eb 21                	jmp    9f0022c7 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f0022a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0022a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022ac:	3c 2a                	cmp    al,0x2a
9f0022ae:	75 17                	jne    9f0022c7 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f0022b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0022b3:	83 c0 01             	add    eax,0x1
9f0022b6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f0022b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0022bc:	8d 50 04             	lea    edx,[eax+0x4]
9f0022bf:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0022c2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022c4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f0022c7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f0022cb:	79 07                	jns    9f0022d4 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f0022cd:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f0022d4:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f0022db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0022de:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022e1:	3c 68                	cmp    al,0x68
9f0022e3:	74 14                	je     9f0022f9 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f0022e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0022e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022eb:	3c 6c                	cmp    al,0x6c
9f0022ed:	74 0a                	je     9f0022f9 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f0022ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0022f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022f5:	3c 4c                	cmp    al,0x4c
9f0022f7:	75 15                	jne    9f00230e <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f0022f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0022fc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022ff:	0f be c0             	movsx  eax,al
9f002302:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f002305:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002308:	83 c0 01             	add    eax,0x1
9f00230b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f00230e:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f002315:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002318:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00231b:	0f be c0             	movsx  eax,al
9f00231e:	83 e8 25             	sub    eax,0x25
9f002321:	83 f8 53             	cmp    eax,0x53
9f002324:	0f 87 b5 01 00 00    	ja     9f0024df <.L57>
9f00232a:	c1 e0 02             	shl    eax,0x2
9f00232d:	8b 84 18 9c fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x464]
9f002334:	01 d8                	add    eax,ebx
9f002336:	ff e0                	jmp    eax

9f002338 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f002338:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00233b:	83 e0 10             	and    eax,0x10
9f00233e:	85 c0                	test   eax,eax
9f002340:	75 18                	jne    9f00235a <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f002342:	eb 0c                	jmp    9f002350 <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f002344:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002347:	8d 50 01             	lea    edx,[eax+0x1]
9f00234a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00234d:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f002350:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002354:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002358:	7f ea                	jg     9f002344 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f00235a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00235d:	8d 50 01             	lea    edx,[eax+0x1]
9f002360:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002363:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f002366:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002369:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f00236c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00236e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f002370:	eb 0c                	jmp    9f00237e <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f002372:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002375:	8d 50 01             	lea    edx,[eax+0x1]
9f002378:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00237b:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f00237e:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002382:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002386:	7f ea                	jg     9f002372 <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f002388:	e9 18 02 00 00       	jmp    9f0025a5 <.L96+0x8c>

9f00238d <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f00238d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002390:	8d 50 04             	lea    edx,[eax+0x4]
9f002393:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002396:	8b 00                	mov    eax,DWORD PTR [eax]
9f002398:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f00239b:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f00239f:	74 13                	je     9f0023b4 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f0023a1:	83 ec 0c             	sub    esp,0xc
9f0023a4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f0023a7:	e8 7c 05 00 00       	call   9f002928 <strlenI>
9f0023ac:	83 c4 10             	add    esp,0x10
9f0023af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0023b2:	eb 07                	jmp    9f0023bb <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f0023b4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f0023bb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0023be:	83 e0 10             	and    eax,0x10
9f0023c1:	85 c0                	test   eax,eax
9f0023c3:	75 1c                	jne    9f0023e1 <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f0023c5:	eb 0c                	jmp    9f0023d3 <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f0023c7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0023ca:	8d 50 01             	lea    edx,[eax+0x1]
9f0023cd:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0023d0:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f0023d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0023d6:	8d 50 ff             	lea    edx,[eax-0x1]
9f0023d9:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f0023dc:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0023df:	7f e6                	jg     9f0023c7 <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f0023e1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0023e8:	eb 1b                	jmp    9f002405 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f0023ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0023ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0023f0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0023f3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f0023f6:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0023f9:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f0023fc:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0023ff:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002401:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f002405:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002408:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00240b:	7c dd                	jl     9f0023ea <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f00240d:	eb 0c                	jmp    9f00241b <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f00240f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002412:	8d 50 01             	lea    edx,[eax+0x1]
9f002415:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002418:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f00241b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00241e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002421:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002424:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002427:	7f e6                	jg     9f00240f <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f002429:	e9 77 01 00 00       	jmp    9f0025a5 <.L96+0x8c>

9f00242e <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f00242e:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f002432:	75 0b                	jne    9f00243f <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f002434:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f00243b:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f00243f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002442:	8d 50 04             	lea    edx,[eax+0x4]
9f002445:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002448:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f00244a:	83 ec 08             	sub    esp,0x8
9f00244d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002450:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002453:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002456:	6a 10                	push   0x10
9f002458:	50                   	push   eax
9f002459:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f00245c:	e8 ea fa ff ff       	call   9f001f4b <number>
9f002461:	83 c4 20             	add    esp,0x20
9f002464:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f002467:	e9 39 01 00 00       	jmp    9f0025a5 <.L96+0x8c>

9f00246c <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f00246c:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002470:	75 20                	jne    9f002492 <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f002472:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002475:	8d 50 04             	lea    edx,[eax+0x4]
9f002478:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00247b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00247d:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f002480:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002486:	29 c2                	sub    edx,eax
9f002488:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f00248b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f00248d:	e9 13 01 00 00       	jmp    9f0025a5 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f002492:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002495:	8d 50 04             	lea    edx,[eax+0x4]
9f002498:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00249b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00249d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f0024a0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0024a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0024a6:	29 c2                	sub    edx,eax
9f0024a8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f0024ab:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f0024ad:	e9 f3 00 00 00       	jmp    9f0025a5 <.L96+0x8c>

9f0024b2 <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f0024b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0024b5:	8d 50 01             	lea    edx,[eax+0x1]
9f0024b8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0024bb:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f0024be:	e9 e2 00 00 00       	jmp    9f0025a5 <.L96+0x8c>

9f0024c3 <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f0024c3:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f0024ca:	eb 4e                	jmp    9f00251a <.L96+0x1>

9f0024cc <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f0024cc:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f0024d0 <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f0024d0:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f0024d7:	eb 41                	jmp    9f00251a <.L96+0x1>

9f0024d9 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f0024d9:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f0024dd:	eb 3a                	jmp    9f002519 <.L96>

9f0024df <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f0024df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0024e2:	8d 50 01             	lea    edx,[eax+0x1]
9f0024e5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0024e8:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f0024eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0024ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0024f1:	84 c0                	test   al,al
9f0024f3:	74 16                	je     9f00250b <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f0024f5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0024f8:	8d 50 01             	lea    edx,[eax+0x1]
9f0024fb:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0024fe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002501:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002504:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f002506:	e9 9a 00 00 00       	jmp    9f0025a5 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f00250b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00250e:	83 e8 01             	sub    eax,0x1
9f002511:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f002514:	e9 8c 00 00 00       	jmp    9f0025a5 <.L96+0x8c>

9f002519 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f002519:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f00251a:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f00251e:	75 10                	jne    9f002530 <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f002520:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002523:	8d 50 04             	lea    edx,[eax+0x4]
9f002526:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002529:	8b 00                	mov    eax,DWORD PTR [eax]
9f00252b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00252e:	eb 54                	jmp    9f002584 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f002530:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f002534:	75 26                	jne    9f00255c <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f002536:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002539:	8d 50 04             	lea    edx,[eax+0x4]
9f00253c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00253f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002541:	25 ff ff 00 00       	and    eax,0xffff
9f002546:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f002549:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00254c:	83 e0 02             	and    eax,0x2
9f00254f:	85 c0                	test   eax,eax
9f002551:	74 31                	je     9f002584 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f002553:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002556:	98                   	cwde   
9f002557:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00255a:	eb 28                	jmp    9f002584 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f00255c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00255f:	83 e0 02             	and    eax,0x2
9f002562:	85 c0                	test   eax,eax
9f002564:	74 10                	je     9f002576 <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f002566:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002569:	8d 50 04             	lea    edx,[eax+0x4]
9f00256c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00256f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002571:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002574:	eb 0e                	jmp    9f002584 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f002576:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002579:	8d 50 04             	lea    edx,[eax+0x4]
9f00257c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00257f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002581:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f002584:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002587:	83 ec 08             	sub    esp,0x8
9f00258a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00258d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002590:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002593:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002596:	50                   	push   eax
9f002597:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f00259a:	e8 ac f9 ff ff       	call   9f001f4b <number>
9f00259f:	83 c4 20             	add    esp,0x20
9f0025a2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f0025a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0025a8:	83 c0 01             	add    eax,0x1
9f0025ab:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f0025ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0025b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0025b4:	84 c0                	test   al,al
9f0025b6:	0f 85 ea fb ff ff    	jne    9f0021a6 <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f0025bc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0025bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f0025c2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0025c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0025c8:	29 c2                	sub    edx,eax
9f0025ca:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f0025cc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0025cf:	c9                   	leave  
9f0025d0:	c3                   	ret    

9f0025d1 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

int sprintf(char *buf, const char *fmt, ...)
{
9f0025d1:	55                   	push   ebp
9f0025d2:	89 e5                	mov    ebp,esp
9f0025d4:	83 ec 18             	sub    esp,0x18
9f0025d7:	e8 e3 18 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0025dc:	05 d0 3b 00 00       	add    eax,0x3bd0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f0025e1:	8d 45 10             	lea    eax,[ebp+0x10]
9f0025e4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f0025e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0025ea:	83 ec 04             	sub    esp,0x4
9f0025ed:	50                   	push   eax
9f0025ee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0025f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0025f4:	e8 90 fb ff ff       	call   9f002189 <vsprintf>
9f0025f9:	83 c4 10             	add    esp,0x10
9f0025fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f0025ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f002602:	c9                   	leave  
9f002603:	c3                   	ret    

9f002604 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:17
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f002604:	55                   	push   ebp
9f002605:	89 e5                	mov    ebp,esp
9f002607:	53                   	push   ebx
9f002608:	83 ec 14             	sub    esp,0x14
9f00260b:	e8 00 19 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f002610:	81 c3 9c 3b 00 00    	add    ebx,0x3b9c
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
    char buff[5];
    int buffPtr=0;
9f002616:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21

    memsetI(buff,0,10);
9f00261d:	83 ec 04             	sub    esp,0x4
9f002620:	6a 0a                	push   0xa
9f002622:	6a 00                	push   0x0
9f002624:	8d 45 ef             	lea    eax,[ebp-0x11]
9f002627:	50                   	push   eax
9f002628:	e8 ab f7 ff ff       	call   9f001dd8 <memsetI>
9f00262d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f002630:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002633:	8d 50 01             	lea    edx,[eax+0x1]
9f002636:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002639:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    buff[buffPtr++] = '[';
9f00263e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002641:	8d 50 01             	lea    edx,[eax+0x1]
9f002644:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002647:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '0';
9f00264c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00264f:	8d 50 01             	lea    edx,[eax+0x1]
9f002652:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002655:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = 'K';
9f00265a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00265d:	8d 50 01             	lea    edx,[eax+0x1]
9f002660:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002663:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr] = '\0';
9f002668:	8d 55 ef             	lea    edx,[ebp-0x11]
9f00266b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00266e:	01 d0                	add    eax,edx
9f002670:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    printI(buff);
9f002673:	83 ec 0c             	sub    esp,0xc
9f002676:	8d 45 ef             	lea    eax,[ebp-0x11]
9f002679:	50                   	push   eax
9f00267a:	e8 1e e8 ff ff       	call   9f000e9d <printI>
9f00267f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:31
    
    return;
9f002682:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
}
9f002683:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002686:	c9                   	leave  
9f002687:	c3                   	ret    

9f002688 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f002688:	55                   	push   ebp
9f002689:	89 e5                	mov    ebp,esp
9f00268b:	53                   	push   ebx
9f00268c:	83 ec 04             	sub    esp,0x4
9f00268f:	e8 7c 18 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f002694:	81 c3 18 3b 00 00    	add    ebx,0x3b18
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f00269a:	83 ec 0c             	sub    esp,0xc
9f00269d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0026a0:	e8 83 02 00 00       	call   9f002928 <strlenI>
9f0026a5:	83 c4 10             	add    esp,0x10
9f0026a8:	89 c2                	mov    edx,eax
9f0026aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026ad:	01 d0                	add    eax,edx
9f0026af:	83 ec 08             	sub    esp,0x8
9f0026b2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0026b5:	50                   	push   eax
9f0026b6:	e8 59 01 00 00       	call   9f002814 <strcpyI>
9f0026bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f0026be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f0026c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0026c4:	c9                   	leave  
9f0026c5:	c3                   	ret    

9f0026c6 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f0026c6:	55                   	push   ebp
9f0026c7:	89 e5                	mov    ebp,esp
9f0026c9:	53                   	push   ebx
9f0026ca:	83 ec 04             	sub    esp,0x4
9f0026cd:	e8 3e 18 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f0026d2:	81 c3 da 3a 00 00    	add    ebx,0x3ada
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f0026d8:	83 ec 0c             	sub    esp,0xc
9f0026db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0026de:	e8 45 02 00 00       	call   9f002928 <strlenI>
9f0026e3:	83 c4 10             	add    esp,0x10
9f0026e6:	89 c2                	mov    edx,eax
9f0026e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026eb:	01 d0                	add    eax,edx
9f0026ed:	83 ec 08             	sub    esp,0x8
9f0026f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0026f3:	50                   	push   eax
9f0026f4:	e8 1b 01 00 00       	call   9f002814 <strcpyI>
9f0026f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f0026fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f0026ff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002702:	c9                   	leave  
9f002703:	c3                   	ret    

9f002704 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
9f002704:	55                   	push   ebp
9f002705:	89 e5                	mov    ebp,esp
9f002707:	83 ec 10             	sub    esp,0x10
9f00270a:	e8 b0 17 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00270f:	05 9d 3a 00 00       	add    eax,0x3a9d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
9f002714:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
9f00271b:	eb 04                	jmp    9f002721 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
9f00271d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
9f002721:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002727:	01 d0                	add    eax,edx
9f002729:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00272c:	84 c0                	test   al,al
9f00272e:	75 ed                	jne    9f00271d <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
9f002730:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
9f002737:	eb 1d                	jmp    9f002756 <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
9f002739:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00273c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00273f:	01 c2                	add    edx,eax
9f002741:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f002744:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002747:	01 c8                	add    eax,ecx
9f002749:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00274c:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
9f00274e:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
9f002752:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
9f002756:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002759:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00275c:	01 d0                	add    eax,edx
9f00275e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002761:	84 c0                	test   al,al
9f002763:	75 d4                	jne    9f002739 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
9f002765:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00276b:	01 d0                	add    eax,edx
9f00276d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f002770:	90                   	nop
9f002771:	c9                   	leave  
9f002772:	c3                   	ret    
9f002773:	90                   	nop

9f002774 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
9f002774:	55                   	push   ebp
9f002775:	89 e5                	mov    ebp,esp
9f002777:	56                   	push   esi
9f002778:	53                   	push   ebx
9f002779:	83 ec 10             	sub    esp,0x10
9f00277c:	e8 3e 17 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002781:	05 2b 3a 00 00       	add    eax,0x3a2b
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
9f002786:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
9f002789:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f00278c:	89 d8                	mov    eax,ebx
9f00278e:	8d 58 01             	lea    ebx,[eax+0x1]
9f002791:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002794:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
9f002797:	89 f0                	mov    eax,esi
9f002799:	8d 70 01             	lea    esi,[eax+0x1]
9f00279c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00279f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
9f0027a2:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f0027a6:	75 0e                	jne    9f0027b6 <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
9f0027a8:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0027ac:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0027b0:	29 c2                	sub    edx,eax
9f0027b2:	89 d0                	mov    eax,edx
9f0027b4:	eb 15                	jmp    9f0027cb <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
9f0027b6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f0027ba:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f0027bd:	74 cd                	je     9f00278c <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
9f0027bf:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0027c3:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0027c7:	29 c2                	sub    edx,eax
9f0027c9:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
9f0027cb:	83 c4 10             	add    esp,0x10
9f0027ce:	5b                   	pop    ebx
9f0027cf:	5e                   	pop    esi
9f0027d0:	5d                   	pop    ebp
9f0027d1:	c3                   	ret    
9f0027d2:	66 90                	xchg   ax,ax

9f0027d4 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f0027d4:	55                   	push   ebp
9f0027d5:	89 e5                	mov    ebp,esp
9f0027d7:	83 ec 10             	sub    esp,0x10
9f0027da:	e8 e0 16 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0027df:	05 cd 39 00 00       	add    eax,0x39cd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f0027e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0027e7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f0027ea:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f0027eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0027ee:	8d 50 01             	lea    edx,[eax+0x1]
9f0027f1:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0027f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0027f7:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0027fa:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0027fd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002800:	88 10                	mov    BYTE PTR [eax],dl
9f002802:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002805:	84 c0                	test   al,al
9f002807:	75 e2                	jne    9f0027eb <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f002809:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00280c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f00280f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f002812:	c9                   	leave  
9f002813:	c3                   	ret    

9f002814 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f002814:	55                   	push   ebp
9f002815:	89 e5                	mov    ebp,esp
9f002817:	83 ec 10             	sub    esp,0x10
9f00281a:	e8 a0 16 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00281f:	05 8d 39 00 00       	add    eax,0x398d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f002824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002827:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f00282a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f00282b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00282e:	8d 50 01             	lea    edx,[eax+0x1]
9f002831:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002834:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002837:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00283a:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f00283d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002840:	88 10                	mov    BYTE PTR [eax],dl
9f002842:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002845:	84 c0                	test   al,al
9f002847:	75 e2                	jne    9f00282b <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f002849:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00284c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f00284f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f002852:	c9                   	leave  
9f002853:	c3                   	ret    

9f002854 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f002854:	55                   	push   ebp
9f002855:	89 e5                	mov    ebp,esp
9f002857:	83 ec 10             	sub    esp,0x10
9f00285a:	e8 60 16 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00285f:	05 4d 39 00 00       	add    eax,0x394d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f002864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002867:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f00286a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f00286b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00286e:	8d 50 01             	lea    edx,[eax+0x1]
9f002871:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002874:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002877:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00287a:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f00287d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002880:	88 10                	mov    BYTE PTR [eax],dl
9f002882:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002885:	84 c0                	test   al,al
9f002887:	74 0d                	je     9f002896 <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f002889:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00288c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00288f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002892:	85 c0                	test   eax,eax
9f002894:	75 d5                	jne    9f00286b <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f002896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f002899:	c9                   	leave  
9f00289a:	c3                   	ret    
9f00289b:	90                   	nop

9f00289c <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f00289c:	55                   	push   ebp
9f00289d:	89 e5                	mov    ebp,esp
9f00289f:	83 ec 04             	sub    esp,0x4
9f0028a2:	e8 18 16 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0028a7:	05 05 39 00 00       	add    eax,0x3905
9f0028ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028af:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f0028b2:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f0028b6:	7e 0d                	jle    9f0028c5 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f0028b8:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f0028bc:	7f 07                	jg     9f0028c5 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f0028be:	b8 01 00 00 00       	mov    eax,0x1
9f0028c3:	eb 05                	jmp    9f0028ca <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f0028c5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f0028ca:	c9                   	leave  
9f0028cb:	c3                   	ret    

9f0028cc <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f0028cc:	55                   	push   ebp
9f0028cd:	89 e5                	mov    ebp,esp
9f0028cf:	83 ec 10             	sub    esp,0x10
9f0028d2:	e8 e8 15 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0028d7:	05 d5 38 00 00       	add    eax,0x38d5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f0028dc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f0028e3:	eb 27                	jmp    9f00290c <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f0028e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028eb:	89 c2                	mov    edx,eax
9f0028ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0028f0:	01 d0                	add    eax,edx
9f0028f2:	0f be c0             	movsx  eax,al
9f0028f5:	50                   	push   eax
9f0028f6:	e8 a1 ff ff ff       	call   9f00289c <check_digit>
9f0028fb:	83 c4 04             	add    esp,0x4
9f0028fe:	83 f0 01             	xor    eax,0x1
9f002901:	84 c0                	test   al,al
9f002903:	74 07                	je     9f00290c <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f002905:	b8 00 00 00 00       	mov    eax,0x0
9f00290a:	eb 17                	jmp    9f002923 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f00290c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00290f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002912:	0f be d0             	movsx  edx,al
9f002915:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002918:	01 d0                	add    eax,edx
9f00291a:	85 c0                	test   eax,eax
9f00291c:	75 c7                	jne    9f0028e5 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f00291e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f002923:	c9                   	leave  
9f002924:	c3                   	ret    
9f002925:	66 90                	xchg   ax,ax
9f002927:	90                   	nop

9f002928 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f002928:	55                   	push   ebp
9f002929:	89 e5                	mov    ebp,esp
9f00292b:	83 ec 10             	sub    esp,0x10
9f00292e:	e8 8c 15 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002933:	05 79 38 00 00       	add    eax,0x3879
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f002938:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f00293f:	eb 04                	jmp    9f002945 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f002941:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f002945:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002948:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00294b:	01 d0                	add    eax,edx
9f00294d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002950:	84 c0                	test   al,al
9f002952:	75 ed                	jne    9f002941 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f002954:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f002957:	c9                   	leave  
9f002958:	c3                   	ret    

9f002959 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f002959:	55                   	push   ebp
9f00295a:	89 e5                	mov    ebp,esp
9f00295c:	e8 5e 15 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002961:	05 4b 38 00 00       	add    eax,0x384b
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f002966:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002969:	e8 ba ff ff ff       	call   9f002928 <strlenI>
9f00296e:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f002971:	c9                   	leave  
9f002972:	c3                   	ret    

9f002973 <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f002973:	55                   	push   ebp
9f002974:	89 e5                	mov    ebp,esp
9f002976:	83 ec 10             	sub    esp,0x10
9f002979:	e8 41 15 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00297e:	05 2e 38 00 00       	add    eax,0x382e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f002983:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f00298a:	eb 04                	jmp    9f002990 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f00298c:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f002990:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002993:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002996:	01 d0                	add    eax,edx
9f002998:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00299b:	84 c0                	test   al,al
9f00299d:	74 08                	je     9f0029a7 <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f00299f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0029a2:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f0029a5:	72 e5                	jb     9f00298c <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f0029a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f0029aa:	c9                   	leave  
9f0029ab:	c3                   	ret    

9f0029ac <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f0029ac:	55                   	push   ebp
9f0029ad:	89 e5                	mov    ebp,esp
9f0029af:	e8 0b 15 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0029b4:	05 f8 37 00 00       	add    eax,0x37f8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f0029b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029bc:	50                   	push   eax
9f0029bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0029c0:	e8 ae ff ff ff       	call   9f002973 <strnlenI>
9f0029c5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f0029c8:	c9                   	leave  
9f0029c9:	c3                   	ret    
9f0029ca:	66 90                	xchg   ax,ax

9f0029cc <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f0029cc:	55                   	push   ebp
9f0029cd:	89 e5                	mov    ebp,esp
9f0029cf:	e8 eb 14 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0029d4:	05 d8 37 00 00       	add    eax,0x37d8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f0029d9:	eb 4b                	jmp    9f002a26 <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f0029db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029de:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0029e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029e4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0029e7:	38 c2                	cmp    dl,al
9f0029e9:	74 1e                	je     9f002a09 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f0029eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029ee:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0029f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0029f7:	38 c2                	cmp    dl,al
9f0029f9:	73 07                	jae    9f002a02 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f0029fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002a00:	eb 2f                	jmp    9f002a31 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f002a02:	b8 01 00 00 00       	mov    eax,0x1
9f002a07:	eb 28                	jmp    9f002a31 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f002a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a0c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a0f:	84 c0                	test   al,al
9f002a11:	75 07                	jne    9f002a1a <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f002a13:	b8 00 00 00 00       	mov    eax,0x0
9f002a18:	eb 17                	jmp    9f002a31 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f002a1a:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f002a1e:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f002a22:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f002a26:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002a2a:	75 af                	jne    9f0029db <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f002a2c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f002a31:	5d                   	pop    ebp
9f002a32:	c3                   	ret    

9f002a33 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f002a33:	55                   	push   ebp
9f002a34:	89 e5                	mov    ebp,esp
9f002a36:	e8 84 14 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002a3b:	05 71 37 00 00       	add    eax,0x3771
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f002a40:	eb 4b                	jmp    9f002a8d <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f002a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a45:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002a48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a4b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a4e:	38 c2                	cmp    dl,al
9f002a50:	74 1e                	je     9f002a70 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f002a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a55:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002a58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a5b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a5e:	38 c2                	cmp    dl,al
9f002a60:	73 07                	jae    9f002a69 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f002a62:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002a67:	eb 2f                	jmp    9f002a98 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f002a69:	b8 01 00 00 00       	mov    eax,0x1
9f002a6e:	eb 28                	jmp    9f002a98 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f002a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a73:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002a76:	84 c0                	test   al,al
9f002a78:	75 07                	jne    9f002a81 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f002a7a:	b8 00 00 00 00       	mov    eax,0x0
9f002a7f:	eb 17                	jmp    9f002a98 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f002a81:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f002a85:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f002a89:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f002a8d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002a91:	75 af                	jne    9f002a42 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f002a93:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f002a98:	5d                   	pop    ebp
9f002a99:	c3                   	ret    
9f002a9a:	66 90                	xchg   ax,ax

9f002a9c <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f002a9c:	55                   	push   ebp
9f002a9d:	89 e5                	mov    ebp,esp
9f002a9f:	83 ec 10             	sub    esp,0x10
9f002aa2:	e8 18 14 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002aa7:	05 05 37 00 00       	add    eax,0x3705
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f002aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002aaf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f002ab2:	eb 1b                	jmp    9f002acf <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f002ab4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002ab7:	8d 50 01             	lea    edx,[eax+0x1]
9f002aba:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002abd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002ac0:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002ac3:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002ac6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002ac9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f002acb:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f002acf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002ad3:	74 1c                	je     9f002af1 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f002ad5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ad8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002adb:	84 c0                	test   al,al
9f002add:	75 d5                	jne    9f002ab4 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f002adf:	eb 10                	jmp    9f002af1 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f002ae1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002ae4:	8d 50 01             	lea    edx,[eax+0x1]
9f002ae7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f002aed:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f002af1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002af5:	75 ea                	jne    9f002ae1 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
9f002af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
9f002afa:	c9                   	leave  
9f002afb:	c3                   	ret    

9f002afc <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f002afc:	55                   	push   ebp
9f002afd:	89 e5                	mov    ebp,esp
9f002aff:	e8 bb 13 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002b04:	05 a8 36 00 00       	add    eax,0x36a8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
9f002b09:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002b0c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002b0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002b12:	e8 85 ff ff ff       	call   9f002a9c <strncpyI>
9f002b17:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
9f002b1a:	c9                   	leave  
9f002b1b:	c3                   	ret    

9f002b1c <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f002b1c:	55                   	push   ebp
9f002b1d:	89 e5                	mov    ebp,esp
9f002b1f:	57                   	push   edi
9f002b20:	56                   	push   esi
9f002b21:	53                   	push   ebx
9f002b22:	83 ec 08             	sub    esp,0x8
9f002b25:	e8 95 13 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002b2a:	05 82 36 00 00       	add    eax,0x3682
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f002b2f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f002b32:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f002b39:	89 f0                	mov    eax,esi
9f002b3b:	8d 70 01             	lea    esi,[eax+0x1]
9f002b3e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b41:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f002b44:	83 fb 20             	cmp    ebx,0x20
9f002b47:	74 f0                	je     9f002b39 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f002b49:	83 fb 2d             	cmp    ebx,0x2d
9f002b4c:	75 14                	jne    9f002b62 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f002b4e:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f002b55:	89 f0                	mov    eax,esi
9f002b57:	8d 70 01             	lea    esi,[eax+0x1]
9f002b5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b5d:	0f be d8             	movsx  ebx,al
9f002b60:	eb 10                	jmp    9f002b72 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f002b62:	83 fb 2b             	cmp    ebx,0x2b
9f002b65:	75 0b                	jne    9f002b72 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f002b67:	89 f0                	mov    eax,esi
9f002b69:	8d 70 01             	lea    esi,[eax+0x1]
9f002b6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b6f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f002b72:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002b76:	74 06                	je     9f002b7e <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f002b78:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002b7c:	75 26                	jne    9f002ba4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f002b7e:	83 fb 30             	cmp    ebx,0x30
9f002b81:	75 21                	jne    9f002ba4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f002b83:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002b86:	3c 78                	cmp    al,0x78
9f002b88:	74 07                	je     9f002b91 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f002b8a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002b8d:	3c 58                	cmp    al,0x58
9f002b8f:	75 13                	jne    9f002ba4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f002b91:	8d 46 01             	lea    eax,[esi+0x1]
9f002b94:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b97:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f002b9a:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f002b9d:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f002ba4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002ba8:	75 14                	jne    9f002bbe <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f002baa:	83 fb 30             	cmp    ebx,0x30
9f002bad:	75 07                	jne    9f002bb6 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f002baf:	b8 08 00 00 00       	mov    eax,0x8
9f002bb4:	eb 05                	jmp    9f002bbb <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f002bb6:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f002bbb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f002bbe:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002bc1:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002bc6:	ba 00 00 00 00       	mov    edx,0x0
9f002bcb:	f7 f1                	div    ecx
9f002bcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f002bd0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002bd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002bd8:	ba 00 00 00 00       	mov    edx,0x0
9f002bdd:	f7 f1                	div    ecx
9f002bdf:	89 d0                	mov    eax,edx
9f002be1:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f002be3:	bf 00 00 00 00       	mov    edi,0x0
9f002be8:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f002bed:	8d 43 d0             	lea    eax,[ebx-0x30]
9f002bf0:	83 f8 09             	cmp    eax,0x9
9f002bf3:	77 05                	ja     9f002bfa <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f002bf5:	83 eb 30             	sub    ebx,0x30
9f002bf8:	eb 25                	jmp    9f002c1f <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f002bfa:	89 d8                	mov    eax,ebx
9f002bfc:	83 c8 20             	or     eax,0x20
9f002bff:	83 e8 61             	sub    eax,0x61
9f002c02:	83 f8 19             	cmp    eax,0x19
9f002c05:	77 56                	ja     9f002c5d <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f002c07:	83 fb 40             	cmp    ebx,0x40
9f002c0a:	7e 0c                	jle    9f002c18 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f002c0c:	83 fb 5a             	cmp    ebx,0x5a
9f002c0f:	7f 07                	jg     9f002c18 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f002c11:	b8 37 00 00 00       	mov    eax,0x37
9f002c16:	eb 05                	jmp    9f002c1d <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f002c18:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f002c1d:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f002c1f:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f002c22:	7d 3c                	jge    9f002c60 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f002c24:	89 c8                	mov    eax,ecx
9f002c26:	85 c0                	test   eax,eax
9f002c28:	78 10                	js     9f002c3a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f002c2a:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002c2d:	77 0b                	ja     9f002c3a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f002c2f:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002c32:	75 0d                	jne    9f002c41 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f002c34:	89 d0                	mov    eax,edx
9f002c36:	39 c3                	cmp    ebx,eax
9f002c38:	7e 07                	jle    9f002c41 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f002c3a:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f002c3f:	eb 0f                	jmp    9f002c50 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f002c41:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f002c46:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002c49:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f002c4c:	89 d8                	mov    eax,ebx
9f002c4e:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f002c50:	89 f0                	mov    eax,esi
9f002c52:	8d 70 01             	lea    esi,[eax+0x1]
9f002c55:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c58:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002c5b:	eb 90                	jmp    9f002bed <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002c5d:	90                   	nop
9f002c5e:	eb 01                	jmp    9f002c61 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f002c60:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002c61:	89 c8                	mov    eax,ecx
9f002c63:	85 c0                	test   eax,eax
9f002c65:	79 07                	jns    9f002c6e <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f002c67:	bf ff ff ff ff       	mov    edi,0xffffffff
9f002c6c:	eb 08                	jmp    9f002c76 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f002c6e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002c72:	74 02                	je     9f002c76 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f002c74:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f002c76:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002c7a:	74 13                	je     9f002c8f <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f002c7c:	89 c8                	mov    eax,ecx
9f002c7e:	85 c0                	test   eax,eax
9f002c80:	74 05                	je     9f002c87 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f002c82:	8d 46 ff             	lea    eax,[esi-0x1]
9f002c85:	eb 03                	jmp    9f002c8a <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f002c87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f002c8a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002c8d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f002c8f:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f002c91:	83 c4 08             	add    esp,0x8
9f002c94:	5b                   	pop    ebx
9f002c95:	5e                   	pop    esi
9f002c96:	5f                   	pop    edi
9f002c97:	5d                   	pop    ebp
9f002c98:	c3                   	ret    
9f002c99:	66 90                	xchg   ax,ax
9f002c9b:	90                   	nop

9f002c9c <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f002c9c:	55                   	push   ebp
9f002c9d:	89 e5                	mov    ebp,esp
9f002c9f:	e8 1b 12 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002ca4:	05 08 35 00 00       	add    eax,0x3508
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f002ca9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002caf:	01 d0                	add    eax,edx
9f002cb1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f002cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f002cb7:	5d                   	pop    ebp
9f002cb8:	c3                   	ret    
9f002cb9:	66 90                	xchg   ax,ax
9f002cbb:	90                   	nop

9f002cbc <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f002cbc:	55                   	push   ebp
9f002cbd:	89 e5                	mov    ebp,esp
9f002cbf:	57                   	push   edi
9f002cc0:	56                   	push   esi
9f002cc1:	53                   	push   ebx
9f002cc2:	83 ec 0c             	sub    esp,0xc
9f002cc5:	e8 f5 11 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002cca:	05 e2 34 00 00       	add    eax,0x34e2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f002ccf:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f002cd2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f002cd9:	89 f0                	mov    eax,esi
9f002cdb:	8d 70 01             	lea    esi,[eax+0x1]
9f002cde:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ce1:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f002ce4:	83 fb 20             	cmp    ebx,0x20
9f002ce7:	74 f0                	je     9f002cd9 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f002ce9:	83 fb 2d             	cmp    ebx,0x2d
9f002cec:	75 14                	jne    9f002d02 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f002cee:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f002cf5:	89 f0                	mov    eax,esi
9f002cf7:	8d 70 01             	lea    esi,[eax+0x1]
9f002cfa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002cfd:	0f be d8             	movsx  ebx,al
9f002d00:	eb 10                	jmp    9f002d12 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f002d02:	83 fb 2b             	cmp    ebx,0x2b
9f002d05:	75 0b                	jne    9f002d12 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f002d07:	89 f0                	mov    eax,esi
9f002d09:	8d 70 01             	lea    esi,[eax+0x1]
9f002d0c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002d0f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f002d12:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002d16:	74 06                	je     9f002d1e <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f002d18:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002d1c:	75 26                	jne    9f002d44 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f002d1e:	83 fb 30             	cmp    ebx,0x30
9f002d21:	75 21                	jne    9f002d44 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f002d23:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002d26:	3c 78                	cmp    al,0x78
9f002d28:	74 07                	je     9f002d31 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f002d2a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002d2d:	3c 58                	cmp    al,0x58
9f002d2f:	75 13                	jne    9f002d44 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f002d31:	8d 46 01             	lea    eax,[esi+0x1]
9f002d34:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002d37:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f002d3a:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f002d3d:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f002d44:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002d48:	75 14                	jne    9f002d5e <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f002d4a:	83 fb 30             	cmp    ebx,0x30
9f002d4d:	75 07                	jne    9f002d56 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f002d4f:	b8 08 00 00 00       	mov    eax,0x8
9f002d54:	eb 05                	jmp    9f002d5b <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f002d56:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f002d5b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f002d5e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002d62:	74 07                	je     9f002d6b <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f002d64:	b8 00 00 00 80       	mov    eax,0x80000000
9f002d69:	eb 05                	jmp    9f002d70 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f002d6b:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f002d70:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f002d73:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002d76:	ba 00 00 00 00       	mov    edx,0x0
9f002d7b:	f7 f1                	div    ecx
9f002d7d:	89 d1                	mov    ecx,edx
9f002d7f:	89 c8                	mov    eax,ecx
9f002d81:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f002d84:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f002d87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002d8a:	ba 00 00 00 00       	mov    edx,0x0
9f002d8f:	f7 f7                	div    edi
9f002d91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f002d94:	bf 00 00 00 00       	mov    edi,0x0
9f002d99:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f002d9e:	8d 43 d0             	lea    eax,[ebx-0x30]
9f002da1:	83 f8 09             	cmp    eax,0x9
9f002da4:	77 05                	ja     9f002dab <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f002da6:	83 eb 30             	sub    ebx,0x30
9f002da9:	eb 25                	jmp    9f002dd0 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f002dab:	89 d8                	mov    eax,ebx
9f002dad:	83 c8 20             	or     eax,0x20
9f002db0:	83 e8 61             	sub    eax,0x61
9f002db3:	83 f8 19             	cmp    eax,0x19
9f002db6:	77 55                	ja     9f002e0d <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f002db8:	83 fb 40             	cmp    ebx,0x40
9f002dbb:	7e 0c                	jle    9f002dc9 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f002dbd:	83 fb 5a             	cmp    ebx,0x5a
9f002dc0:	7f 07                	jg     9f002dc9 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f002dc2:	b8 37 00 00 00       	mov    eax,0x37
9f002dc7:	eb 05                	jmp    9f002dce <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f002dc9:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f002dce:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f002dd0:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f002dd3:	7d 3b                	jge    9f002e10 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f002dd5:	89 c8                	mov    eax,ecx
9f002dd7:	85 c0                	test   eax,eax
9f002dd9:	78 0f                	js     9f002dea <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f002ddb:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002dde:	77 0a                	ja     9f002dea <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f002de0:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002de3:	75 0c                	jne    9f002df1 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f002de5:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f002de8:	7e 07                	jle    9f002df1 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f002dea:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f002def:	eb 0f                	jmp    9f002e00 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f002df1:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f002df6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002df9:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f002dfc:	89 d8                	mov    eax,ebx
9f002dfe:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f002e00:	89 f0                	mov    eax,esi
9f002e02:	8d 70 01             	lea    esi,[eax+0x1]
9f002e05:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002e08:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002e0b:	eb 91                	jmp    9f002d9e <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002e0d:	90                   	nop
9f002e0e:	eb 01                	jmp    9f002e11 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f002e10:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f002e11:	89 c8                	mov    eax,ecx
9f002e13:	85 c0                	test   eax,eax
9f002e15:	79 16                	jns    9f002e2d <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f002e17:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002e1b:	74 07                	je     9f002e24 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f002e1d:	b8 00 00 00 80       	mov    eax,0x80000000
9f002e22:	eb 05                	jmp    9f002e29 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f002e24:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f002e29:	89 c7                	mov    edi,eax
9f002e2b:	eb 08                	jmp    9f002e35 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f002e2d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002e31:	74 02                	je     9f002e35 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f002e33:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f002e35:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002e39:	74 13                	je     9f002e4e <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f002e3b:	89 c8                	mov    eax,ecx
9f002e3d:	85 c0                	test   eax,eax
9f002e3f:	74 05                	je     9f002e46 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f002e41:	8d 46 ff             	lea    eax,[esi-0x1]
9f002e44:	eb 03                	jmp    9f002e49 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f002e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f002e49:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002e4c:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f002e4e:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f002e50:	83 c4 0c             	add    esp,0xc
9f002e53:	5b                   	pop    ebx
9f002e54:	5e                   	pop    esi
9f002e55:	5f                   	pop    edi
9f002e56:	5d                   	pop    ebp
9f002e57:	c3                   	ret    

9f002e58 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f002e58:	55                   	push   ebp
9f002e59:	89 e5                	mov    ebp,esp
9f002e5b:	53                   	push   ebx
9f002e5c:	83 ec 14             	sub    esp,0x14
9f002e5f:	e8 5b 10 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002e64:	05 48 33 00 00       	add    eax,0x3348
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f002e69:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002e6c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002e6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002e72:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002e75:	eb 04                	jmp    9f002e7b <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f002e77:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002e7b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002e7e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002e81:	80 fa 20             	cmp    dl,0x20
9f002e84:	74 f1                	je     9f002e77 <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f002e86:	83 ec 0c             	sub    esp,0xc
9f002e89:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002e8c:	89 c3                	mov    ebx,eax
9f002e8e:	e8 95 fa ff ff       	call   9f002928 <strlenI>
9f002e93:	83 c4 10             	add    esp,0x10
9f002e96:	8d 50 ff             	lea    edx,[eax-0x1]
9f002e99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002e9c:	01 d0                	add    eax,edx
9f002e9e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f002ea1:	eb 0c                	jmp    9f002eaf <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f002ea3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002ea6:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ea9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f002eac:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f002eaf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002eb2:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002eb5:	76 0a                	jbe    9f002ec1 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f002eb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002eba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ebd:	3c 20                	cmp    al,0x20
9f002ebf:	74 e2                	je     9f002ea3 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f002ec1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002ec4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002ec7:	74 1f                	je     9f002ee8 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f002ec9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f002eca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002ecd:	8d 50 01             	lea    edx,[eax+0x1]
9f002ed0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002ed3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002ed6:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002ed9:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f002edc:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002edf:	88 10                	mov    BYTE PTR [eax],dl
9f002ee1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ee4:	84 c0                	test   al,al
9f002ee6:	75 e2                	jne    9f002eca <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f002ee8:	90                   	nop
9f002ee9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002eec:	c9                   	leave  
9f002eed:	c3                   	ret    

9f002eee <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f002eee:	55                   	push   ebp
9f002eef:	89 e5                	mov    ebp,esp
9f002ef1:	83 ec 08             	sub    esp,0x8
9f002ef4:	e8 c6 0f 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f002ef9:	05 b3 32 00 00       	add    eax,0x32b3
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f002efe:	83 ec 0c             	sub    esp,0xc
9f002f01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f04:	e8 4f ff ff ff       	call   9f002e58 <strtrimI>
9f002f09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f002f0c:	c9                   	leave  
9f002f0d:	c3                   	ret    
9f002f0e:	66 90                	xchg   ax,ax

9f002f10 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:11
#include "strings.h"
#include "libChrisOS.h"

///NOTE: Output pointer has to be freed!!!
static char *strreplaceI(const char *in, const char *pattern, const char *by)
{
9f002f10:	55                   	push   ebp
9f002f11:	89 e5                	mov    ebp,esp
9f002f13:	56                   	push   esi
9f002f14:	53                   	push   ebx
9f002f15:	83 ec 10             	sub    esp,0x10
9f002f18:	e8 f3 0f 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f002f1d:	81 c3 8f 32 00 00    	add    ebx,0x328f
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:12
    size_t outsize = strlenI(in) + 1;
9f002f23:	83 ec 0c             	sub    esp,0xc
9f002f26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f29:	e8 fa f9 ff ff       	call   9f002928 <strlenI>
9f002f2e:	83 c4 10             	add    esp,0x10
9f002f31:	83 c0 01             	add    eax,0x1
9f002f34:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    char *res = mallocI(outsize);
9f002f37:	83 ec 0c             	sub    esp,0xc
9f002f3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002f3d:	e8 f0 e9 ff ff       	call   9f001932 <mallocI>
9f002f42:	83 c4 10             	add    esp,0x10
9f002f45:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:16
    // use this to iterate over the output
    size_t resoffset = 0;
9f002f48:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f002f4f:	e9 c0 00 00 00       	jmp    9f003014 <strreplaceI+0x104>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:21
        // copy everything up to the pattern
        memcpyI(res + resoffset, in, needle - in);
9f002f54:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f5a:	29 c2                	sub    edx,eax
9f002f5c:	89 d0                	mov    eax,edx
9f002f5e:	89 c1                	mov    ecx,eax
9f002f60:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002f63:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002f66:	01 d0                	add    eax,edx
9f002f68:	83 ec 04             	sub    esp,0x4
9f002f6b:	51                   	push   ecx
9f002f6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f6f:	50                   	push   eax
9f002f70:	e8 a7 ec ff ff       	call   9f001c1c <memcpyI>
9f002f75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        resoffset += needle - in;
9f002f78:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f7e:	29 c2                	sub    edx,eax
9f002f80:	89 d0                	mov    eax,edx
9f002f82:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:25

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f002f85:	83 ec 0c             	sub    esp,0xc
9f002f88:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f8b:	e8 98 f9 ff ff       	call   9f002928 <strlenI>
9f002f90:	83 c4 10             	add    esp,0x10
9f002f93:	89 c2                	mov    edx,eax
9f002f95:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002f98:	01 d0                	add    eax,edx
9f002f9a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:28

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f002f9d:	83 ec 0c             	sub    esp,0xc
9f002fa0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002fa3:	e8 80 f9 ff ff       	call   9f002928 <strlenI>
9f002fa8:	83 c4 10             	add    esp,0x10
9f002fab:	89 c2                	mov    edx,eax
9f002fad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fb0:	29 d0                	sub    eax,edx
9f002fb2:	89 c6                	mov    esi,eax
9f002fb4:	83 ec 0c             	sub    esp,0xc
9f002fb7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002fba:	e8 69 f9 ff ff       	call   9f002928 <strlenI>
9f002fbf:	83 c4 10             	add    esp,0x10
9f002fc2:	01 f0                	add    eax,esi
9f002fc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29
        res = reallocI(res, outsize);
9f002fc7:	83 ec 08             	sub    esp,0x8
9f002fca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002fcd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002fd0:	e8 51 eb ff ff       	call   9f001b26 <reallocI>
9f002fd5:	83 c4 10             	add    esp,0x10
9f002fd8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(res + resoffset, by, strlenI(by));
9f002fdb:	83 ec 0c             	sub    esp,0xc
9f002fde:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002fe1:	e8 42 f9 ff ff       	call   9f002928 <strlenI>
9f002fe6:	83 c4 10             	add    esp,0x10
9f002fe9:	89 c1                	mov    ecx,eax
9f002feb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002fee:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002ff1:	01 d0                	add    eax,edx
9f002ff3:	83 ec 04             	sub    esp,0x4
9f002ff6:	51                   	push   ecx
9f002ff7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002ffa:	50                   	push   eax
9f002ffb:	e8 1c ec ff ff       	call   9f001c1c <memcpyI>
9f003000:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f003003:	83 ec 0c             	sub    esp,0xc
9f003006:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003009:	e8 1a f9 ff ff       	call   9f002928 <strlenI>
9f00300e:	83 c4 10             	add    esp,0x10
9f003011:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19
    char *res = mallocI(outsize);
    // use this to iterate over the output
    size_t resoffset = 0;

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f003014:	83 ec 08             	sub    esp,0x8
9f003017:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00301a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00301d:	e8 f8 00 00 00       	call   9f00311a <strstrI>
9f003022:	83 c4 10             	add    esp,0x10
9f003025:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f003028:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f00302c:	0f 85 22 ff ff ff    	jne    9f002f54 <strreplaceI+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(res + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(res + resoffset, in);
9f003032:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003035:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003038:	01 d0                	add    eax,edx
9f00303a:	83 ec 08             	sub    esp,0x8
9f00303d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003040:	50                   	push   eax
9f003041:	e8 ce f7 ff ff       	call   9f002814 <strcpyI>
9f003046:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return res;
9f003049:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f00304c:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00304f:	5b                   	pop    ebx
9f003050:	5e                   	pop    esi
9f003051:	5d                   	pop    ebp
9f003052:	c3                   	ret    

9f003053 <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by)
{
9f003053:	55                   	push   ebp
9f003054:	89 e5                	mov    ebp,esp
9f003056:	83 ec 08             	sub    esp,0x8
9f003059:	e8 61 0e 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00305e:	05 4e 31 00 00       	add    eax,0x314e
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by);
9f003063:	83 ec 04             	sub    esp,0x4
9f003066:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003069:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00306c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00306f:	e8 9c fe ff ff       	call   9f002f10 <strreplaceI>
9f003074:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f003077:	c9                   	leave  
9f003078:	c3                   	ret    
9f003079:	66 90                	xchg   ax,ax
9f00307b:	90                   	nop

9f00307c <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strnstrI(char* string, char* substring, int length)
{
9f00307c:	55                   	push   ebp
9f00307d:	89 e5                	mov    ebp,esp
9f00307f:	56                   	push   esi
9f003080:	53                   	push   ebx
9f003081:	83 ec 10             	sub    esp,0x10
9f003084:	e8 36 0e 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f003089:	05 23 31 00 00       	add    eax,0x3123
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:59

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f00308e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003091:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    
    b = substring;
9f003094:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    if (*b == 0) {
9f003097:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00309a:	84 c0                	test   al,al
9f00309c:	75 66                	jne    9f003104 <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
	return string;
9f00309e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030a1:	eb 70                	jmp    9f003113 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f0030a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030a6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0030a9:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0030ac:	38 c2                	cmp    dl,al
9f0030ae:	74 12                	je     9f0030c2 <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
            if (len--<=0)
9f0030b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0030b3:	8d 50 ff             	lea    edx,[eax-0x1]
9f0030b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0030b9:	85 c0                	test   eax,eax
9f0030bb:	7f 42                	jg     9f0030ff <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
                return string;
9f0030bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030c0:	eb 51                	jmp    9f003113 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
	    continue;
	}
	a = string;
9f0030c2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	while (1) {
	    if (*b == 0) {
9f0030c5:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0030c8:	84 c0                	test   al,al
9f0030ca:	75 05                	jne    9f0030d1 <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
		return string;
9f0030cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030cf:	eb 42                	jmp    9f003113 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
	    }
            if (len--<=0)
9f0030d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0030d4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0030d7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0030da:	85 c0                	test   eax,eax
9f0030dc:	7f 05                	jg     9f0030e3 <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
                return string;
9f0030de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030e1:	eb 30                	jmp    9f003113 <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
	    if (*a++ != *b++) {
9f0030e3:	89 f0                	mov    eax,esi
9f0030e5:	8d 70 01             	lea    esi,[eax+0x1]
9f0030e8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0030eb:	89 d8                	mov    eax,ebx
9f0030ed:	8d 58 01             	lea    ebx,[eax+0x1]
9f0030f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0030f3:	38 c2                	cmp    dl,al
9f0030f5:	75 02                	jne    9f0030f9 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:81
		break;
	    }
	}
9f0030f7:	eb cc                	jmp    9f0030c5 <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f0030f9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
	    }
	}
	b = substring;
9f0030fa:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0030fd:	eb 01                	jmp    9f003100 <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f0030ff:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003100:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65 (discriminator 1)
9f003104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00310a:	84 c0                	test   al,al
9f00310c:	75 95                	jne    9f0030a3 <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f00310e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f003113:	83 c4 10             	add    esp,0x10
9f003116:	5b                   	pop    ebx
9f003117:	5e                   	pop    esi
9f003118:	5d                   	pop    ebp
9f003119:	c3                   	ret    

9f00311a <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:88

char* strstrI(const char* string, const char* substring)
{
9f00311a:	55                   	push   ebp
9f00311b:	89 e5                	mov    ebp,esp
9f00311d:	56                   	push   esi
9f00311e:	53                   	push   ebx
9f00311f:	e8 9b 0d 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f003124:	05 88 30 00 00       	add    eax,0x3088
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:96
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f003129:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    if (*b == 0) {
9f00312c:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00312f:	84 c0                	test   al,al
9f003131:	75 42                	jne    9f003175 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
	return string;
9f003133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003136:	eb 4c                	jmp    9f003184 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f003138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00313b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00313e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003141:	38 c2                	cmp    dl,al
9f003143:	75 2b                	jne    9f003170 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:104
	    continue;
	}
	a = string;
9f003145:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:106
	while (1) {
	    if (*b == 0) {
9f003148:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00314b:	84 c0                	test   al,al
9f00314d:	75 05                	jne    9f003154 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
		return string;
9f00314f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003152:	eb 30                	jmp    9f003184 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:109
	    }
	    if (*a++ != *b++) {
9f003154:	89 f0                	mov    eax,esi
9f003156:	8d 70 01             	lea    esi,[eax+0x1]
9f003159:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00315c:	89 d8                	mov    eax,ebx
9f00315e:	8d 58 01             	lea    ebx,[eax+0x1]
9f003161:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003164:	38 c2                	cmp    dl,al
9f003166:	75 02                	jne    9f00316a <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:112
		break;
	    }
	}
9f003168:	eb de                	jmp    9f003148 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f00316a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
	    }
	}
	b = substring;
9f00316b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00316e:	eb 01                	jmp    9f003171 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f003170:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003171:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100 (discriminator 1)
9f003175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003178:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00317b:	84 c0                	test   al,al
9f00317d:	75 b9                	jne    9f003138 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:115
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f00317f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
}
9f003184:	5b                   	pop    ebx
9f003185:	5e                   	pop    esi
9f003186:	5d                   	pop    ebp
9f003187:	c3                   	ret    

9f003188 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:119

VISIBLE char* strstr(const char* string, const char* substring)
{
9f003188:	55                   	push   ebp
9f003189:	89 e5                	mov    ebp,esp
9f00318b:	e8 2f 0d 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f003190:	05 1c 30 00 00       	add    eax,0x301c
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120
    return strstrI(string, substring);
9f003195:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00319b:	e8 7a ff ff ff       	call   9f00311a <strstrI>
9f0031a0:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
}
9f0031a3:	c9                   	leave  
9f0031a4:	c3                   	ret    
9f0031a5:	66 90                	xchg   ax,ax
9f0031a7:	90                   	nop

9f0031a8 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f0031a8:	55                   	push   ebp
9f0031a9:	89 e5                	mov    ebp,esp
9f0031ab:	56                   	push   esi
9f0031ac:	53                   	push   ebx
9f0031ad:	83 ec 10             	sub    esp,0x10
9f0031b0:	e8 0a 0d 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0031b5:	05 f7 2f 00 00       	add    eax,0x2ff7
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    uint32_t retVal=0;
9f0031ba:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    GET_TICKS(retVal);
9f0031c1:	b8 70 01 00 00       	mov    eax,0x170
9f0031c6:	bb 00 00 00 00       	mov    ebx,0x0
9f0031cb:	b9 00 00 00 00       	mov    ecx,0x0
9f0031d0:	ba 00 00 00 00       	mov    edx,0x0
9f0031d5:	be 00 00 00 00       	mov    esi,0x0
9f0031da:	e8 fc ff ff ff       	call   9f0031db <getticks+0x33>
9f0031df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
    return (time_t)retVal;
9f0031e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
}
9f0031e5:	83 c4 10             	add    esp,0x10
9f0031e8:	5b                   	pop    ebx
9f0031e9:	5e                   	pop    esi
9f0031ea:	5d                   	pop    ebp
9f0031eb:	c3                   	ret    

9f0031ec <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f0031ec:	55                   	push   ebp
9f0031ed:	89 e5                	mov    ebp,esp
9f0031ef:	53                   	push   ebx
9f0031f0:	83 ec 10             	sub    esp,0x10
9f0031f3:	e8 18 0d 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f0031f8:	81 c3 b4 2f 00 00    	add    ebx,0x2fb4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  time_t time = *timer;
9f0031fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003201:	8b 00                	mov    eax,DWORD PTR [eax]
9f003203:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f003206:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37

  dayclock = (unsigned long) time % SECS_DAY;
9f00320d:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f003210:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003215:	89 c8                	mov    eax,ecx
9f003217:	f7 e2                	mul    edx
9f003219:	89 d0                	mov    eax,edx
9f00321b:	c1 e8 10             	shr    eax,0x10
9f00321e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003221:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003224:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f00322a:	29 c1                	sub    ecx,eax
9f00322c:	89 c8                	mov    eax,ecx
9f00322e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  dayno = (unsigned long) time / SECS_DAY;
9f003231:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003234:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003239:	f7 e2                	mul    edx
9f00323b:	89 d0                	mov    eax,edx
9f00323d:	c1 e8 10             	shr    eax,0x10
9f003240:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  tmbuf->tm_sec = dayclock % 60;
9f003243:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003246:	ba 89 88 88 88       	mov    edx,0x88888889
9f00324b:	89 c8                	mov    eax,ecx
9f00324d:	f7 e2                	mul    edx
9f00324f:	89 d0                	mov    eax,edx
9f003251:	c1 e8 05             	shr    eax,0x5
9f003254:	89 c2                	mov    edx,eax
9f003256:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f00325d:	89 c2                	mov    edx,eax
9f00325f:	89 d0                	mov    eax,edx
9f003261:	c1 e0 04             	shl    eax,0x4
9f003264:	29 d0                	sub    eax,edx
9f003266:	29 c1                	sub    ecx,eax
9f003268:	89 c8                	mov    eax,ecx
9f00326a:	89 c2                	mov    edx,eax
9f00326c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00326f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f003271:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003274:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003279:	89 c8                	mov    eax,ecx
9f00327b:	f7 e2                	mul    edx
9f00327d:	89 d0                	mov    eax,edx
9f00327f:	c1 e8 0b             	shr    eax,0xb
9f003282:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f003288:	29 c1                	sub    ecx,eax
9f00328a:	89 c8                	mov    eax,ecx
9f00328c:	ba 89 88 88 88       	mov    edx,0x88888889
9f003291:	f7 e2                	mul    edx
9f003293:	89 d0                	mov    eax,edx
9f003295:	c1 e8 05             	shr    eax,0x5
9f003298:	89 c2                	mov    edx,eax
9f00329a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00329d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_hour = dayclock / 3600;
9f0032a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0032a3:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f0032a8:	f7 e2                	mul    edx
9f0032aa:	89 d0                	mov    eax,edx
9f0032ac:	c1 e8 0b             	shr    eax,0xb
9f0032af:	89 c2                	mov    edx,eax
9f0032b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f0032b7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0032ba:	8d 48 04             	lea    ecx,[eax+0x4]
9f0032bd:	ba 25 49 92 24       	mov    edx,0x24924925
9f0032c2:	89 c8                	mov    eax,ecx
9f0032c4:	f7 e2                	mul    edx
9f0032c6:	89 c8                	mov    eax,ecx
9f0032c8:	29 d0                	sub    eax,edx
9f0032ca:	d1 e8                	shr    eax,1
9f0032cc:	01 d0                	add    eax,edx
9f0032ce:	c1 e8 02             	shr    eax,0x2
9f0032d1:	89 c2                	mov    edx,eax
9f0032d3:	c1 e2 03             	shl    edx,0x3
9f0032d6:	29 c2                	sub    edx,eax
9f0032d8:	89 c8                	mov    eax,ecx
9f0032da:	29 d0                	sub    eax,edx
9f0032dc:	89 c2                	mov    edx,eax
9f0032de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0032e1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f0032e4:	eb 66                	jmp    9f00334c <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
    dayno -= YEARSIZE(year);
9f0032e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0032e9:	83 e0 03             	and    eax,0x3
9f0032ec:	85 c0                	test   eax,eax
9f0032ee:	75 50                	jne    9f003340 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 1)
9f0032f0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0032f3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0032f8:	89 c8                	mov    eax,ecx
9f0032fa:	f7 ea                	imul   edx
9f0032fc:	c1 fa 05             	sar    edx,0x5
9f0032ff:	89 c8                	mov    eax,ecx
9f003301:	c1 f8 1f             	sar    eax,0x1f
9f003304:	29 c2                	sub    edx,eax
9f003306:	89 d0                	mov    eax,edx
9f003308:	6b c0 64             	imul   eax,eax,0x64
9f00330b:	29 c1                	sub    ecx,eax
9f00330d:	89 c8                	mov    eax,ecx
9f00330f:	85 c0                	test   eax,eax
9f003311:	75 26                	jne    9f003339 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 4)
9f003313:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003316:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00331b:	89 c8                	mov    eax,ecx
9f00331d:	f7 ea                	imul   edx
9f00331f:	c1 fa 07             	sar    edx,0x7
9f003322:	89 c8                	mov    eax,ecx
9f003324:	c1 f8 1f             	sar    eax,0x1f
9f003327:	29 c2                	sub    edx,eax
9f003329:	89 d0                	mov    eax,edx
9f00332b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003331:	29 c1                	sub    ecx,eax
9f003333:	89 c8                	mov    eax,ecx
9f003335:	85 c0                	test   eax,eax
9f003337:	75 07                	jne    9f003340 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 5)
9f003339:	b8 6e 01 00 00       	mov    eax,0x16e
9f00333e:	eb 05                	jmp    9f003345 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 6)
9f003340:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
9f003345:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46 (discriminator 8)
    year++;
9f003348:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f00334c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00334f:	83 e0 03             	and    eax,0x3
9f003352:	85 c0                	test   eax,eax
9f003354:	75 50                	jne    9f0033a6 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f003356:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003359:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00335e:	89 c8                	mov    eax,ecx
9f003360:	f7 ea                	imul   edx
9f003362:	c1 fa 05             	sar    edx,0x5
9f003365:	89 c8                	mov    eax,ecx
9f003367:	c1 f8 1f             	sar    eax,0x1f
9f00336a:	29 c2                	sub    edx,eax
9f00336c:	89 d0                	mov    eax,edx
9f00336e:	6b c0 64             	imul   eax,eax,0x64
9f003371:	29 c1                	sub    ecx,eax
9f003373:	89 c8                	mov    eax,ecx
9f003375:	85 c0                	test   eax,eax
9f003377:	75 26                	jne    9f00339f <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f003379:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00337c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003381:	89 c8                	mov    eax,ecx
9f003383:	f7 ea                	imul   edx
9f003385:	c1 fa 07             	sar    edx,0x7
9f003388:	89 c8                	mov    eax,ecx
9f00338a:	c1 f8 1f             	sar    eax,0x1f
9f00338d:	29 c2                	sub    edx,eax
9f00338f:	89 d0                	mov    eax,edx
9f003391:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003397:	29 c1                	sub    ecx,eax
9f003399:	89 c8                	mov    eax,ecx
9f00339b:	85 c0                	test   eax,eax
9f00339d:	75 07                	jne    9f0033a6 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f00339f:	b8 6e 01 00 00       	mov    eax,0x16e
9f0033a4:	eb 05                	jmp    9f0033ab <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f0033a6:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f0033ab:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0033ae:	0f 86 32 ff ff ff    	jbe    9f0032e6 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f0033b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0033b7:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f0033bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033c0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_yday = dayno;
9f0033c3:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0033c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033c9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  tmbuf->tm_mon = 0;
9f0033cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033cf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f0033d6:	e9 89 00 00 00       	jmp    9f003464 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f0033db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0033de:	83 e0 03             	and    eax,0x3
9f0033e1:	85 c0                	test   eax,eax
9f0033e3:	75 50                	jne    9f003435 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 1)
9f0033e5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0033e8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0033ed:	89 c8                	mov    eax,ecx
9f0033ef:	f7 ea                	imul   edx
9f0033f1:	c1 fa 05             	sar    edx,0x5
9f0033f4:	89 c8                	mov    eax,ecx
9f0033f6:	c1 f8 1f             	sar    eax,0x1f
9f0033f9:	29 c2                	sub    edx,eax
9f0033fb:	89 d0                	mov    eax,edx
9f0033fd:	6b c0 64             	imul   eax,eax,0x64
9f003400:	29 c1                	sub    ecx,eax
9f003402:	89 c8                	mov    eax,ecx
9f003404:	85 c0                	test   eax,eax
9f003406:	75 26                	jne    9f00342e <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 4)
9f003408:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00340b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003410:	89 c8                	mov    eax,ecx
9f003412:	f7 ea                	imul   edx
9f003414:	c1 fa 07             	sar    edx,0x7
9f003417:	89 c8                	mov    eax,ecx
9f003419:	c1 f8 1f             	sar    eax,0x1f
9f00341c:	29 c2                	sub    edx,eax
9f00341e:	89 d0                	mov    eax,edx
9f003420:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003426:	29 c1                	sub    ecx,eax
9f003428:	89 c8                	mov    eax,ecx
9f00342a:	85 c0                	test   eax,eax
9f00342c:	75 07                	jne    9f003435 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 5)
9f00342e:	ba 01 00 00 00       	mov    edx,0x1
9f003433:	eb 05                	jmp    9f00343a <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 6)
9f003435:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
9f00343a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00343d:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003440:	89 d0                	mov    eax,edx
9f003442:	01 c0                	add    eax,eax
9f003444:	01 d0                	add    eax,edx
9f003446:	c1 e0 02             	shl    eax,0x2
9f003449:	01 c8                	add    eax,ecx
9f00344b:	8b 84 83 34 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2cc]
9f003452:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53 (discriminator 8)
    tmbuf->tm_mon++;
9f003455:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003458:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00345b:	8d 50 01             	lea    edx,[eax+0x1]
9f00345e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003461:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003467:	83 e0 03             	and    eax,0x3
9f00346a:	85 c0                	test   eax,eax
9f00346c:	75 50                	jne    9f0034be <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f00346e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003471:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003476:	89 c8                	mov    eax,ecx
9f003478:	f7 ea                	imul   edx
9f00347a:	c1 fa 05             	sar    edx,0x5
9f00347d:	89 c8                	mov    eax,ecx
9f00347f:	c1 f8 1f             	sar    eax,0x1f
9f003482:	29 c2                	sub    edx,eax
9f003484:	89 d0                	mov    eax,edx
9f003486:	6b c0 64             	imul   eax,eax,0x64
9f003489:	29 c1                	sub    ecx,eax
9f00348b:	89 c8                	mov    eax,ecx
9f00348d:	85 c0                	test   eax,eax
9f00348f:	75 26                	jne    9f0034b7 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f003491:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003494:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003499:	89 c8                	mov    eax,ecx
9f00349b:	f7 ea                	imul   edx
9f00349d:	c1 fa 07             	sar    edx,0x7
9f0034a0:	89 c8                	mov    eax,ecx
9f0034a2:	c1 f8 1f             	sar    eax,0x1f
9f0034a5:	29 c2                	sub    edx,eax
9f0034a7:	89 d0                	mov    eax,edx
9f0034a9:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0034af:	29 c1                	sub    ecx,eax
9f0034b1:	89 c8                	mov    eax,ecx
9f0034b3:	85 c0                	test   eax,eax
9f0034b5:	75 07                	jne    9f0034be <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f0034b7:	ba 01 00 00 00       	mov    edx,0x1
9f0034bc:	eb 05                	jmp    9f0034c3 <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f0034be:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f0034c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034c6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f0034c9:	89 d0                	mov    eax,edx
9f0034cb:	01 c0                	add    eax,eax
9f0034cd:	01 d0                	add    eax,edx
9f0034cf:	c1 e0 02             	shl    eax,0x2
9f0034d2:	01 c8                	add    eax,ecx
9f0034d4:	8b 84 83 34 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2cc]
9f0034db:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0034de:	0f 86 f7 fe ff ff    	jbe    9f0033db <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f0034e4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0034e7:	83 c0 01             	add    eax,0x1
9f0034ea:	89 c2                	mov    edx,eax
9f0034ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  tmbuf->tm_isdst = 0;
9f0034f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034f5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
  return tmbuf;
9f0034fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
}
9f0034ff:	83 c4 10             	add    esp,0x10
9f003502:	5b                   	pop    ebx
9f003503:	5d                   	pop    ebp
9f003504:	c3                   	ret    

9f003505 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f003505:	55                   	push   ebp
9f003506:	89 e5                	mov    ebp,esp
9f003508:	e8 b2 09 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00350d:	05 9f 2c 00 00       	add    eax,0x2c9f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
    return gmtime_rI(timer, tmbuf);
9f003512:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003518:	e8 cf fc ff ff       	call   9f0031ec <gmtime_rI>
9f00351d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
}
9f003520:	c9                   	leave  
9f003521:	c3                   	ret    

9f003522 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65

VISIBLE struct tm *localtime(const time_t *timer) {
9f003522:	55                   	push   ebp
9f003523:	89 e5                	mov    ebp,esp
9f003525:	53                   	push   ebx
9f003526:	83 ec 14             	sub    esp,0x14
9f003529:	e8 91 09 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f00352e:	05 7e 2c 00 00       	add    eax,0x2c7e
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f003533:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003536:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f003538:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f00353e:	8b 12                	mov    edx,DWORD PTR [edx]
9f003540:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f003546:	01 ca                	add    edx,ecx
9f003548:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
9f00354b:	83 ec 08             	sub    esp,0x8
9f00354e:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
9f003554:	52                   	push   edx
9f003555:	8d 55 f4             	lea    edx,[ebp-0xc]
9f003558:	52                   	push   edx
9f003559:	89 c3                	mov    ebx,eax
9f00355b:	e8 90 09 00 00       	call   9f003ef0 <__x86.get_pc_thunk.ax+0x31>
9f003560:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f003563:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003566:	c9                   	leave  
9f003567:	c3                   	ret    

9f003568 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003568:	55                   	push   ebp
9f003569:	89 e5                	mov    ebp,esp
9f00356b:	83 ec 10             	sub    esp,0x10
9f00356e:	e8 4c 09 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f003573:	05 39 2c 00 00       	add    eax,0x2c39
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f003578:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00357b:	8b 12                	mov    edx,DWORD PTR [edx]
9f00357d:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f003583:	8b 00                	mov    eax,DWORD PTR [eax]
9f003585:	29 c2                	sub    edx,eax
9f003587:	89 d0                	mov    eax,edx
9f003589:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f00358c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00358f:	8d 45 fc             	lea    eax,[ebp-0x4]
9f003592:	50                   	push   eax
9f003593:	e8 54 fc ff ff       	call   9f0031ec <gmtime_rI>
9f003598:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f00359b:	c9                   	leave  
9f00359c:	c3                   	ret    

9f00359d <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f00359d:	55                   	push   ebp
9f00359e:	89 e5                	mov    ebp,esp
9f0035a0:	e8 1a 09 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f0035a5:	05 07 2c 00 00       	add    eax,0x2c07
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f0035aa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0035ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0035b0:	e8 b3 ff ff ff       	call   9f003568 <localtime_rI>
9f0035b5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f0035b8:	c9                   	leave  
9f0035b9:	c3                   	ret    

9f0035ba <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f0035ba:	55                   	push   ebp
9f0035bb:	89 e5                	mov    ebp,esp
9f0035bd:	57                   	push   edi
9f0035be:	56                   	push   esi
9f0035bf:	53                   	push   ebx
9f0035c0:	83 ec 20             	sub    esp,0x20
9f0035c3:	e8 4c 09 00 00       	call   9f003f14 <__x86.get_pc_thunk.cx>
9f0035c8:	81 c1 e4 2b 00 00    	add    ecx,0x2be4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f0035ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035d1:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f0035d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035d7:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0035d9:	ba 89 88 88 88       	mov    edx,0x88888889
9f0035de:	89 d8                	mov    eax,ebx
9f0035e0:	f7 ea                	imul   edx
9f0035e2:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0035e5:	c1 f8 05             	sar    eax,0x5
9f0035e8:	89 c2                	mov    edx,eax
9f0035ea:	89 d8                	mov    eax,ebx
9f0035ec:	c1 f8 1f             	sar    eax,0x1f
9f0035ef:	29 c2                	sub    edx,eax
9f0035f1:	89 d0                	mov    eax,edx
9f0035f3:	8d 14 06             	lea    edx,[esi+eax*1]
9f0035f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f0035fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035ff:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003601:	ba 89 88 88 88       	mov    edx,0x88888889
9f003606:	89 d8                	mov    eax,ebx
9f003608:	f7 ea                	imul   edx
9f00360a:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00360d:	c1 f8 05             	sar    eax,0x5
9f003610:	89 c2                	mov    edx,eax
9f003612:	89 d8                	mov    eax,ebx
9f003614:	c1 f8 1f             	sar    eax,0x1f
9f003617:	29 c2                	sub    edx,eax
9f003619:	89 d0                	mov    eax,edx
9f00361b:	89 c2                	mov    edx,eax
9f00361d:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003624:	89 c2                	mov    edx,eax
9f003626:	89 d0                	mov    eax,edx
9f003628:	c1 e0 04             	shl    eax,0x4
9f00362b:	29 d0                	sub    eax,edx
9f00362d:	29 c3                	sub    ebx,eax
9f00362f:	89 d8                	mov    eax,ebx
9f003631:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003634:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f003636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003639:	8b 00                	mov    eax,DWORD PTR [eax]
9f00363b:	85 c0                	test   eax,eax
9f00363d:	79 1c                	jns    9f00365b <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f00363f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003642:	8b 00                	mov    eax,DWORD PTR [eax]
9f003644:	8d 50 3c             	lea    edx,[eax+0x3c]
9f003647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00364a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f00364c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00364f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003652:	8d 50 ff             	lea    edx,[eax-0x1]
9f003655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003658:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f00365b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00365e:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f003661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003664:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f003667:	ba 89 88 88 88       	mov    edx,0x88888889
9f00366c:	89 d8                	mov    eax,ebx
9f00366e:	f7 ea                	imul   edx
9f003670:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003673:	c1 f8 05             	sar    eax,0x5
9f003676:	89 c2                	mov    edx,eax
9f003678:	89 d8                	mov    eax,ebx
9f00367a:	c1 f8 1f             	sar    eax,0x1f
9f00367d:	29 c2                	sub    edx,eax
9f00367f:	89 d0                	mov    eax,edx
9f003681:	8d 14 06             	lea    edx,[esi+eax*1]
9f003684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003687:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f00368a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00368d:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f003690:	ba 89 88 88 88       	mov    edx,0x88888889
9f003695:	89 d8                	mov    eax,ebx
9f003697:	f7 ea                	imul   edx
9f003699:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00369c:	c1 f8 05             	sar    eax,0x5
9f00369f:	89 c2                	mov    edx,eax
9f0036a1:	89 d8                	mov    eax,ebx
9f0036a3:	c1 f8 1f             	sar    eax,0x1f
9f0036a6:	29 c2                	sub    edx,eax
9f0036a8:	89 d0                	mov    eax,edx
9f0036aa:	89 c2                	mov    edx,eax
9f0036ac:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0036b3:	89 c2                	mov    edx,eax
9f0036b5:	89 d0                	mov    eax,edx
9f0036b7:	c1 e0 04             	shl    eax,0x4
9f0036ba:	29 d0                	sub    eax,edx
9f0036bc:	29 c3                	sub    ebx,eax
9f0036be:	89 d8                	mov    eax,ebx
9f0036c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0036c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f0036c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0036cc:	85 c0                	test   eax,eax
9f0036ce:	79 1e                	jns    9f0036ee <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f0036d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0036d6:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0036d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f0036df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0036e5:	8d 50 ff             	lea    edx,[eax-0x1]
9f0036e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f0036ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0036f1:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0036f4:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0036f9:	89 d8                	mov    eax,ebx
9f0036fb:	f7 ea                	imul   edx
9f0036fd:	c1 fa 02             	sar    edx,0x2
9f003700:	89 d8                	mov    eax,ebx
9f003702:	c1 f8 1f             	sar    eax,0x1f
9f003705:	29 c2                	sub    edx,eax
9f003707:	89 d0                	mov    eax,edx
9f003709:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f00370c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00370f:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f003712:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f003717:	89 d8                	mov    eax,ebx
9f003719:	f7 ea                	imul   edx
9f00371b:	c1 fa 02             	sar    edx,0x2
9f00371e:	89 d8                	mov    eax,ebx
9f003720:	c1 f8 1f             	sar    eax,0x1f
9f003723:	29 c2                	sub    edx,eax
9f003725:	89 d0                	mov    eax,edx
9f003727:	01 c0                	add    eax,eax
9f003729:	01 d0                	add    eax,edx
9f00372b:	c1 e0 03             	shl    eax,0x3
9f00372e:	29 c3                	sub    ebx,eax
9f003730:	89 da                	mov    edx,ebx
9f003732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003735:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f003738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00373b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f00373e:	85 c0                	test   eax,eax
9f003740:	79 13                	jns    9f003755 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f003742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003745:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f003748:	8d 50 18             	lea    edx,[eax+0x18]
9f00374b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00374e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f003751:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f003755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003758:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f00375b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00375e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003761:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f003766:	89 d8                	mov    eax,ebx
9f003768:	f7 ea                	imul   edx
9f00376a:	d1 fa                	sar    edx,1
9f00376c:	89 d8                	mov    eax,ebx
9f00376e:	c1 f8 1f             	sar    eax,0x1f
9f003771:	29 c2                	sub    edx,eax
9f003773:	89 d0                	mov    eax,edx
9f003775:	8d 14 06             	lea    edx,[esi+eax*1]
9f003778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00377b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f00377e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003781:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003784:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f003789:	89 d8                	mov    eax,ebx
9f00378b:	f7 ea                	imul   edx
9f00378d:	d1 fa                	sar    edx,1
9f00378f:	89 d8                	mov    eax,ebx
9f003791:	c1 f8 1f             	sar    eax,0x1f
9f003794:	29 c2                	sub    edx,eax
9f003796:	89 d0                	mov    eax,edx
9f003798:	01 c0                	add    eax,eax
9f00379a:	01 d0                	add    eax,edx
9f00379c:	c1 e0 02             	shl    eax,0x2
9f00379f:	29 c3                	sub    ebx,eax
9f0037a1:	89 da                	mov    edx,ebx
9f0037a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037a6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f0037a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0037af:	85 c0                	test   eax,eax
9f0037b1:	79 1e                	jns    9f0037d1 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f0037b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0037b9:	8d 50 0c             	lea    edx,[eax+0xc]
9f0037bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037bf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f0037c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037c5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0037c8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037ce:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f0037d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0037d7:	83 e8 01             	sub    eax,0x1
9f0037da:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f0037dd:	e9 c1 00 00 00       	jmp    9f0038a3 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f0037e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0037e8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0037eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f0037f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0037f7:	85 c0                	test   eax,eax
9f0037f9:	79 19                	jns    9f003814 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f0037fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0037fe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003801:	8d 50 ff             	lea    edx,[eax-0x1]
9f003804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003807:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f00380a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00380d:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f003814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003817:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00381a:	83 e0 03             	and    eax,0x3
9f00381d:	85 c0                	test   eax,eax
9f00381f:	75 62                	jne    9f003883 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f003821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003824:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003827:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00382d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003832:	89 d8                	mov    eax,ebx
9f003834:	f7 ea                	imul   edx
9f003836:	c1 fa 05             	sar    edx,0x5
9f003839:	89 d8                	mov    eax,ebx
9f00383b:	c1 f8 1f             	sar    eax,0x1f
9f00383e:	29 c2                	sub    edx,eax
9f003840:	89 d0                	mov    eax,edx
9f003842:	6b c0 64             	imul   eax,eax,0x64
9f003845:	29 c3                	sub    ebx,eax
9f003847:	89 d8                	mov    eax,ebx
9f003849:	85 c0                	test   eax,eax
9f00384b:	75 2f                	jne    9f00387c <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f00384d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003850:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003853:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003859:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00385e:	89 d8                	mov    eax,ebx
9f003860:	f7 ea                	imul   edx
9f003862:	c1 fa 07             	sar    edx,0x7
9f003865:	89 d8                	mov    eax,ebx
9f003867:	c1 f8 1f             	sar    eax,0x1f
9f00386a:	29 c2                	sub    edx,eax
9f00386c:	89 d0                	mov    eax,edx
9f00386e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003874:	29 c3                	sub    ebx,eax
9f003876:	89 d8                	mov    eax,ebx
9f003878:	85 c0                	test   eax,eax
9f00387a:	75 07                	jne    9f003883 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f00387c:	ba 01 00 00 00       	mov    edx,0x1
9f003881:	eb 05                	jmp    9f003888 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f003883:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f003888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00388b:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f00388e:	89 d0                	mov    eax,edx
9f003890:	01 c0                	add    eax,eax
9f003892:	01 d0                	add    eax,edx
9f003894:	c1 e0 02             	shl    eax,0x2
9f003897:	01 d8                	add    eax,ebx
9f003899:	8b 84 81 34 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2cc]
9f0038a0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f0038a3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0038a7:	0f 88 35 ff ff ff    	js     9f0037e2 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f0038ad:	e9 c2 00 00 00       	jmp    9f003974 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0038b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038b5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0038b8:	83 e0 03             	and    eax,0x3
9f0038bb:	85 c0                	test   eax,eax
9f0038bd:	75 62                	jne    9f003921 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f0038bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038c2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0038c5:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0038cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0038d0:	89 d8                	mov    eax,ebx
9f0038d2:	f7 ea                	imul   edx
9f0038d4:	c1 fa 05             	sar    edx,0x5
9f0038d7:	89 d8                	mov    eax,ebx
9f0038d9:	c1 f8 1f             	sar    eax,0x1f
9f0038dc:	29 c2                	sub    edx,eax
9f0038de:	89 d0                	mov    eax,edx
9f0038e0:	6b c0 64             	imul   eax,eax,0x64
9f0038e3:	29 c3                	sub    ebx,eax
9f0038e5:	89 d8                	mov    eax,ebx
9f0038e7:	85 c0                	test   eax,eax
9f0038e9:	75 2f                	jne    9f00391a <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f0038eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038ee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0038f1:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0038f7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0038fc:	89 d8                	mov    eax,ebx
9f0038fe:	f7 ea                	imul   edx
9f003900:	c1 fa 07             	sar    edx,0x7
9f003903:	89 d8                	mov    eax,ebx
9f003905:	c1 f8 1f             	sar    eax,0x1f
9f003908:	29 c2                	sub    edx,eax
9f00390a:	89 d0                	mov    eax,edx
9f00390c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003912:	29 c3                	sub    ebx,eax
9f003914:	89 d8                	mov    eax,ebx
9f003916:	85 c0                	test   eax,eax
9f003918:	75 07                	jne    9f003921 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f00391a:	ba 01 00 00 00       	mov    edx,0x1
9f00391f:	eb 05                	jmp    9f003926 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f003921:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f003926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003929:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f00392c:	89 d0                	mov    eax,edx
9f00392e:	01 c0                	add    eax,eax
9f003930:	01 d0                	add    eax,edx
9f003932:	c1 e0 02             	shl    eax,0x2
9f003935:	01 d8                	add    eax,ebx
9f003937:	8b 84 81 34 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2cc]
9f00393e:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f003941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003944:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003947:	8d 50 01             	lea    edx,[eax+0x1]
9f00394a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00394d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f003950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003953:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003956:	83 f8 0c             	cmp    eax,0xc
9f003959:	75 19                	jne    9f003974 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f00395b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00395e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f003965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003968:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00396b:	8d 50 01             	lea    edx,[eax+0x1]
9f00396e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003971:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f003974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003977:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00397a:	83 e0 03             	and    eax,0x3
9f00397d:	85 c0                	test   eax,eax
9f00397f:	75 62                	jne    9f0039e3 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f003981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003984:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003987:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00398d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003992:	89 d8                	mov    eax,ebx
9f003994:	f7 ea                	imul   edx
9f003996:	c1 fa 05             	sar    edx,0x5
9f003999:	89 d8                	mov    eax,ebx
9f00399b:	c1 f8 1f             	sar    eax,0x1f
9f00399e:	29 c2                	sub    edx,eax
9f0039a0:	89 d0                	mov    eax,edx
9f0039a2:	6b c0 64             	imul   eax,eax,0x64
9f0039a5:	29 c3                	sub    ebx,eax
9f0039a7:	89 d8                	mov    eax,ebx
9f0039a9:	85 c0                	test   eax,eax
9f0039ab:	75 2f                	jne    9f0039dc <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f0039ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0039b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0039b3:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0039b9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0039be:	89 d8                	mov    eax,ebx
9f0039c0:	f7 ea                	imul   edx
9f0039c2:	c1 fa 07             	sar    edx,0x7
9f0039c5:	89 d8                	mov    eax,ebx
9f0039c7:	c1 f8 1f             	sar    eax,0x1f
9f0039ca:	29 c2                	sub    edx,eax
9f0039cc:	89 d0                	mov    eax,edx
9f0039ce:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0039d4:	29 c3                	sub    ebx,eax
9f0039d6:	89 d8                	mov    eax,ebx
9f0039d8:	85 c0                	test   eax,eax
9f0039da:	75 07                	jne    9f0039e3 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f0039dc:	ba 01 00 00 00       	mov    edx,0x1
9f0039e1:	eb 05                	jmp    9f0039e8 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f0039e3:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f0039e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0039eb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0039ee:	89 d0                	mov    eax,edx
9f0039f0:	01 c0                	add    eax,eax
9f0039f2:	01 d0                	add    eax,edx
9f0039f4:	c1 e0 02             	shl    eax,0x2
9f0039f7:	01 d8                	add    eax,ebx
9f0039f9:	8b 84 81 34 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2cc]
9f003a00:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003a03:	0f 8e a9 fe ff ff    	jle    9f0038b2 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f003a09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003a0c:	8d 50 01             	lea    edx,[eax+0x1]
9f003a0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f003a15:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f003a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a1f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003a22:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f003a25:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f003a2b:	39 d0                	cmp    eax,edx
9f003a2d:	7d 0a                	jge    9f003a39 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f003a2f:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f003a34:	e9 d0 03 00 00       	jmp    9f003e09 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f003a39:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f003a40:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f003a47:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f003a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a51:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003a54:	05 6c 07 00 00       	add    eax,0x76c
9f003a59:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f003a5c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003a5f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003a62:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f003a67:	7e 07                	jle    9f003a70 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f003a69:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f003a70:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003a73:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003a76:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f003a7c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f003a7f:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f003a84:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f003a87:	89 c2                	mov    edx,eax
9f003a89:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003a8c:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003a8f:	8d 58 03             	lea    ebx,[eax+0x3]
9f003a92:	85 c0                	test   eax,eax
9f003a94:	0f 48 c3             	cmovs  eax,ebx
9f003a97:	c1 f8 02             	sar    eax,0x2
9f003a9a:	83 c0 01             	add    eax,0x1
9f003a9d:	39 c2                	cmp    edx,eax
9f003a9f:	7d 04                	jge    9f003aa5 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f003aa1:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f003aa5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003aa8:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003aab:	8d 50 03             	lea    edx,[eax+0x3]
9f003aae:	85 c0                	test   eax,eax
9f003ab0:	0f 48 c2             	cmovs  eax,edx
9f003ab3:	c1 f8 02             	sar    eax,0x2
9f003ab6:	89 c3                	mov    ebx,eax
9f003ab8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003abb:	83 e0 03             	and    eax,0x3
9f003abe:	85 c0                	test   eax,eax
9f003ac0:	74 29                	je     9f003aeb <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f003ac2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003ac5:	99                   	cdq    
9f003ac6:	c1 ea 1e             	shr    edx,0x1e
9f003ac9:	01 d0                	add    eax,edx
9f003acb:	83 e0 03             	and    eax,0x3
9f003ace:	29 d0                	sub    eax,edx
9f003ad0:	89 c6                	mov    esi,eax
9f003ad2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f003ad5:	99                   	cdq    
9f003ad6:	c1 ea 1e             	shr    edx,0x1e
9f003ad9:	01 d0                	add    eax,edx
9f003adb:	83 e0 03             	and    eax,0x3
9f003ade:	29 d0                	sub    eax,edx
9f003ae0:	39 c6                	cmp    esi,eax
9f003ae2:	7d 07                	jge    9f003aeb <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f003ae4:	b8 01 00 00 00       	mov    eax,0x1
9f003ae9:	eb 05                	jmp    9f003af0 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f003aeb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f003af0:	01 d8                	add    eax,ebx
9f003af2:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f003af5:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003af8:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003afb:	89 c3                	mov    ebx,eax
9f003afd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b02:	89 d8                	mov    eax,ebx
9f003b04:	f7 ea                	imul   edx
9f003b06:	c1 fa 05             	sar    edx,0x5
9f003b09:	89 d8                	mov    eax,ebx
9f003b0b:	c1 f8 1f             	sar    eax,0x1f
9f003b0e:	89 d7                	mov    edi,edx
9f003b10:	29 c7                	sub    edi,eax
9f003b12:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003b15:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b1a:	89 d8                	mov    eax,ebx
9f003b1c:	f7 ea                	imul   edx
9f003b1e:	c1 fa 05             	sar    edx,0x5
9f003b21:	89 d8                	mov    eax,ebx
9f003b23:	c1 f8 1f             	sar    eax,0x1f
9f003b26:	29 c2                	sub    edx,eax
9f003b28:	89 d0                	mov    eax,edx
9f003b2a:	6b c0 64             	imul   eax,eax,0x64
9f003b2d:	29 c3                	sub    ebx,eax
9f003b2f:	89 d8                	mov    eax,ebx
9f003b31:	85 c0                	test   eax,eax
9f003b33:	74 49                	je     9f003b7e <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f003b35:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003b38:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b3d:	89 d8                	mov    eax,ebx
9f003b3f:	f7 ea                	imul   edx
9f003b41:	c1 fa 05             	sar    edx,0x5
9f003b44:	89 d8                	mov    eax,ebx
9f003b46:	c1 f8 1f             	sar    eax,0x1f
9f003b49:	89 d6                	mov    esi,edx
9f003b4b:	29 c6                	sub    esi,eax
9f003b4d:	6b c6 64             	imul   eax,esi,0x64
9f003b50:	89 de                	mov    esi,ebx
9f003b52:	29 c6                	sub    esi,eax
9f003b54:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f003b57:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b5c:	89 d8                	mov    eax,ebx
9f003b5e:	f7 ea                	imul   edx
9f003b60:	c1 fa 05             	sar    edx,0x5
9f003b63:	89 d8                	mov    eax,ebx
9f003b65:	c1 f8 1f             	sar    eax,0x1f
9f003b68:	29 c2                	sub    edx,eax
9f003b6a:	89 d0                	mov    eax,edx
9f003b6c:	6b c0 64             	imul   eax,eax,0x64
9f003b6f:	29 c3                	sub    ebx,eax
9f003b71:	89 d8                	mov    eax,ebx
9f003b73:	39 c6                	cmp    esi,eax
9f003b75:	7d 07                	jge    9f003b7e <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f003b77:	b8 01 00 00 00       	mov    eax,0x1
9f003b7c:	eb 05                	jmp    9f003b83 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f003b7e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f003b83:	01 f8                	add    eax,edi
9f003b85:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f003b88:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003b8b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003b8e:	89 c3                	mov    ebx,eax
9f003b90:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003b95:	89 d8                	mov    eax,ebx
9f003b97:	f7 ea                	imul   edx
9f003b99:	c1 fa 07             	sar    edx,0x7
9f003b9c:	89 d8                	mov    eax,ebx
9f003b9e:	c1 f8 1f             	sar    eax,0x1f
9f003ba1:	89 d7                	mov    edi,edx
9f003ba3:	29 c7                	sub    edi,eax
9f003ba5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003ba8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003bad:	89 d8                	mov    eax,ebx
9f003baf:	f7 ea                	imul   edx
9f003bb1:	c1 fa 07             	sar    edx,0x7
9f003bb4:	89 d8                	mov    eax,ebx
9f003bb6:	c1 f8 1f             	sar    eax,0x1f
9f003bb9:	29 c2                	sub    edx,eax
9f003bbb:	89 d0                	mov    eax,edx
9f003bbd:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003bc3:	29 c3                	sub    ebx,eax
9f003bc5:	89 d8                	mov    eax,ebx
9f003bc7:	85 c0                	test   eax,eax
9f003bc9:	74 4f                	je     9f003c1a <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f003bcb:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003bce:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003bd3:	89 d8                	mov    eax,ebx
9f003bd5:	f7 ea                	imul   edx
9f003bd7:	c1 fa 07             	sar    edx,0x7
9f003bda:	89 d8                	mov    eax,ebx
9f003bdc:	c1 f8 1f             	sar    eax,0x1f
9f003bdf:	89 d6                	mov    esi,edx
9f003be1:	29 c6                	sub    esi,eax
9f003be3:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f003be9:	89 de                	mov    esi,ebx
9f003beb:	29 c6                	sub    esi,eax
9f003bed:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f003bf0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003bf5:	89 d8                	mov    eax,ebx
9f003bf7:	f7 ea                	imul   edx
9f003bf9:	c1 fa 07             	sar    edx,0x7
9f003bfc:	89 d8                	mov    eax,ebx
9f003bfe:	c1 f8 1f             	sar    eax,0x1f
9f003c01:	29 c2                	sub    edx,eax
9f003c03:	89 d0                	mov    eax,edx
9f003c05:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003c0b:	29 c3                	sub    ebx,eax
9f003c0d:	89 d8                	mov    eax,ebx
9f003c0f:	39 c6                	cmp    esi,eax
9f003c11:	7d 07                	jge    9f003c1a <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f003c13:	b8 01 00 00 00       	mov    eax,0x1
9f003c18:	eb 05                	jmp    9f003c1f <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f003c1a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f003c1f:	01 f8                	add    eax,edi
9f003c21:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f003c24:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f003c2b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003c2e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f003c31:	eb 7b                	jmp    9f003cae <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f003c33:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003c36:	83 e0 03             	and    eax,0x3
9f003c39:	85 c0                	test   eax,eax
9f003c3b:	75 50                	jne    9f003c8d <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f003c3d:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003c40:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003c45:	89 d8                	mov    eax,ebx
9f003c47:	f7 ea                	imul   edx
9f003c49:	c1 fa 05             	sar    edx,0x5
9f003c4c:	89 d8                	mov    eax,ebx
9f003c4e:	c1 f8 1f             	sar    eax,0x1f
9f003c51:	29 c2                	sub    edx,eax
9f003c53:	89 d0                	mov    eax,edx
9f003c55:	6b c0 64             	imul   eax,eax,0x64
9f003c58:	29 c3                	sub    ebx,eax
9f003c5a:	89 d8                	mov    eax,ebx
9f003c5c:	85 c0                	test   eax,eax
9f003c5e:	75 26                	jne    9f003c86 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f003c60:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003c63:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003c68:	89 d8                	mov    eax,ebx
9f003c6a:	f7 ea                	imul   edx
9f003c6c:	c1 fa 07             	sar    edx,0x7
9f003c6f:	89 d8                	mov    eax,ebx
9f003c71:	c1 f8 1f             	sar    eax,0x1f
9f003c74:	29 c2                	sub    edx,eax
9f003c76:	89 d0                	mov    eax,edx
9f003c78:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003c7e:	29 c3                	sub    ebx,eax
9f003c80:	89 d8                	mov    eax,ebx
9f003c82:	85 c0                	test   eax,eax
9f003c84:	75 07                	jne    9f003c8d <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f003c86:	ba 01 00 00 00       	mov    edx,0x1
9f003c8b:	eb 05                	jmp    9f003c92 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f003c8d:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f003c92:	89 d0                	mov    eax,edx
9f003c94:	01 c0                	add    eax,eax
9f003c96:	01 d0                	add    eax,edx
9f003c98:	c1 e0 02             	shl    eax,0x2
9f003c9b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f003c9e:	01 d0                	add    eax,edx
9f003ca0:	8b 84 81 34 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2cc]
9f003ca7:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f003caa:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f003cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003cb1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003cb4:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f003cb7:	0f 8f 76 ff ff ff    	jg     9f003c33 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f003cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003cc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f003cc3:	83 e8 01             	sub    eax,0x1
9f003cc6:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f003cc9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003ccc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003ccf:	01 d0                	add    eax,edx
9f003cd1:	85 c0                	test   eax,eax
9f003cd3:	79 04                	jns    9f003cd9 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f003cd5:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f003cd9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003cdc:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f003cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ce2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003ce5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f003ce8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003ceb:	8d 58 04             	lea    ebx,[eax+0x4]
9f003cee:	ba 93 24 49 92       	mov    edx,0x92492493
9f003cf3:	89 d8                	mov    eax,ebx
9f003cf5:	f7 ea                	imul   edx
9f003cf7:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003cfa:	c1 f8 02             	sar    eax,0x2
9f003cfd:	89 c2                	mov    edx,eax
9f003cff:	89 d8                	mov    eax,ebx
9f003d01:	c1 f8 1f             	sar    eax,0x1f
9f003d04:	29 c2                	sub    edx,eax
9f003d06:	89 d0                	mov    eax,edx
9f003d08:	89 c2                	mov    edx,eax
9f003d0a:	c1 e2 03             	shl    edx,0x3
9f003d0d:	29 c2                	sub    edx,eax
9f003d0f:	89 d8                	mov    eax,ebx
9f003d11:	29 d0                	sub    eax,edx
9f003d13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003d16:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f003d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003d1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f003d1f:	c1 e0 02             	shl    eax,0x2
9f003d22:	89 c2                	mov    edx,eax
9f003d24:	c1 e2 04             	shl    edx,0x4
9f003d27:	29 c2                	sub    edx,eax
9f003d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003d2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003d2f:	01 d0                	add    eax,edx
9f003d31:	c1 e0 02             	shl    eax,0x2
9f003d34:	89 c2                	mov    edx,eax
9f003d36:	c1 e2 04             	shl    edx,0x4
9f003d39:	29 c2                	sub    edx,eax
9f003d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003d3e:	8b 00                	mov    eax,DWORD PTR [eax]
9f003d40:	01 d0                	add    eax,edx
9f003d42:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f003d45:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f003d4a:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f003d4d:	89 c3                	mov    ebx,eax
9f003d4f:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003d54:	89 d8                	mov    eax,ebx
9f003d56:	f7 ea                	imul   edx
9f003d58:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003d5b:	c1 f8 10             	sar    eax,0x10
9f003d5e:	89 c2                	mov    edx,eax
9f003d60:	89 d8                	mov    eax,ebx
9f003d62:	c1 f8 1f             	sar    eax,0x1f
9f003d65:	29 c2                	sub    edx,eax
9f003d67:	89 d0                	mov    eax,edx
9f003d69:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003d6c:	7d 04                	jge    9f003d72 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f003d6e:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f003d72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003d75:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003d7b:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003d7e:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003d84:	8b 00                	mov    eax,DWORD PTR [eax]
9f003d86:	85 c0                	test   eax,eax
9f003d88:	7e 16                	jle    9f003da0 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f003d8a:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003d90:	8b 00                	mov    eax,DWORD PTR [eax]
9f003d92:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f003d97:	29 c2                	sub    edx,eax
9f003d99:	89 d0                	mov    eax,edx
9f003d9b:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003d9e:	7c 1b                	jl     9f003dbb <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003da0:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003da6:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003da8:	85 c0                	test   eax,eax
9f003daa:	79 13                	jns    9f003dbf <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f003dac:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003db2:	8b 00                	mov    eax,DWORD PTR [eax]
9f003db4:	f7 d8                	neg    eax
9f003db6:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003db9:	7e 04                	jle    9f003dbf <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f003dbb:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f003dbf:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f003dc5:	8b 00                	mov    eax,DWORD PTR [eax]
9f003dc7:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f003dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003dcd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f003dd0:	85 c0                	test   eax,eax
9f003dd2:	74 0b                	je     9f003ddf <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f003dd4:	8b 81 74 00 00 00    	mov    eax,DWORD PTR [ecx+0x74]
9f003dda:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f003ddd:	eb 07                	jmp    9f003de6 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f003ddf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f003de6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003de9:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f003dec:	7e 04                	jle    9f003df2 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f003dee:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f003df2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003df5:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f003df8:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f003dfc:	74 08                	je     9f003e06 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f003dfe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003e01:	83 e8 02             	sub    eax,0x2
9f003e04:	eb 03                	jmp    9f003e09 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f003e06:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f003e09:	83 c4 20             	add    esp,0x20
9f003e0c:	5b                   	pop    ebx
9f003e0d:	5e                   	pop    esi
9f003e0e:	5f                   	pop    edi
9f003e0f:	5d                   	pop    ebp
9f003e10:	c3                   	ret    

9f003e11 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f003e11:	55                   	push   ebp
9f003e12:	89 e5                	mov    ebp,esp
9f003e14:	56                   	push   esi
9f003e15:	53                   	push   ebx
9f003e16:	83 ec 14             	sub    esp,0x14
9f003e19:	e8 a1 00 00 00       	call   9f003ebf <__x86.get_pc_thunk.ax>
9f003e1e:	05 8e 23 00 00       	add    eax,0x238e
9f003e23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e26:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f003e29:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f003e30:	b8 71 01 00 00       	mov    eax,0x171
9f003e35:	bb 00 00 00 00       	mov    ebx,0x0
9f003e3a:	b9 00 00 00 00       	mov    ecx,0x0
9f003e3f:	ba 00 00 00 00       	mov    edx,0x0
9f003e44:	be 00 00 00 00       	mov    esi,0x0
9f003e49:	e8 fc ff ff ff       	call   9f003e4a <gettime+0x39>
9f003e4e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f003e51:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f003e55:	74 11                	je     9f003e68 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f003e57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003e5a:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003e5d:	50                   	push   eax
9f003e5e:	e8 05 f7 ff ff       	call   9f003568 <localtime_rI>
9f003e63:	83 c4 08             	add    esp,0x8
9f003e66:	eb 0f                	jmp    9f003e77 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f003e68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003e6b:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003e6e:	50                   	push   eax
9f003e6f:	e8 78 f3 ff ff       	call   9f0031ec <gmtime_rI>
9f003e74:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f003e77:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003e7a:	5b                   	pop    ebx
9f003e7b:	5e                   	pop    esi
9f003e7c:	5d                   	pop    ebp
9f003e7d:	c3                   	ret    

9f003e7e <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203

VISIBLE time_t time (time_t *result)
{
9f003e7e:	55                   	push   ebp
9f003e7f:	89 e5                	mov    ebp,esp
9f003e81:	53                   	push   ebx
9f003e82:	83 ec 14             	sub    esp,0x14
9f003e85:	e8 86 00 00 00       	call   9f003f10 <__x86.get_pc_thunk.bx>
9f003e8a:	81 c3 22 23 00 00    	add    ebx,0x2322
/home/yogi/src/os/aproj/libChrisOS/src/time.c:204
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f003e90:	83 ec 0c             	sub    esp,0xc
9f003e93:	68 71 01 00 00       	push   0x171
9f003e98:	e8 db cd ff ff       	call   9f000c78 <do_syscall0>
9f003e9d:	83 c4 10             	add    esp,0x10
9f003ea0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:205
    memcpyI(result, &ticks, 4);
9f003ea3:	83 ec 04             	sub    esp,0x4
9f003ea6:	6a 04                	push   0x4
9f003ea8:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003eab:	50                   	push   eax
9f003eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003eaf:	e8 68 dd ff ff       	call   9f001c1c <memcpyI>
9f003eb4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206
    return ticks;
9f003eb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
9f003eba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003ebd:	c9                   	leave  
9f003ebe:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f003ebf <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f003ebf:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f003ec2:	c3                   	ret    

Disassembly of section .plt:

9f003ed0 <.plt>:
9f003ed0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f003ed6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f003edc:	00 00                	add    BYTE PTR [eax],al
9f003ede:	00 00                	add    BYTE PTR [eax],al
9f003ee0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f003ee6:	68 00 00 00 00       	push   0x0
9f003eeb:	e9 e0 ff ff ff       	jmp    9f003ed0 <__x86.get_pc_thunk.ax+0x11>
9f003ef0:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
9f003ef6:	68 08 00 00 00       	push   0x8
9f003efb:	e9 d0 ff ff ff       	jmp    9f003ed0 <__x86.get_pc_thunk.ax+0x11>
9f003f00:	ff a3 14 00 00 00    	jmp    DWORD PTR [ebx+0x14]
9f003f06:	68 10 00 00 00       	push   0x10
9f003f0b:	e9 c0 ff ff ff       	jmp    9f003ed0 <__x86.get_pc_thunk.ax+0x11>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f003f10 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f003f10:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f003f13:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f003f14 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f003f14:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f003f17:	c3                   	ret    

Disassembly of section .eh_frame:

9f003f18 <.eh_frame>:
9f003f18:	14 00                	adc    al,0x0
9f003f1a:	00 00                	add    BYTE PTR [eax],al
9f003f1c:	00 00                	add    BYTE PTR [eax],al
9f003f1e:	00 00                	add    BYTE PTR [eax],al
9f003f20:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f003f23:	00 01                	add    BYTE PTR [ecx],al
9f003f25:	7c 08                	jl     9f003f2f <__x86.get_pc_thunk.cx+0x1b>
9f003f27:	01 1b                	add    DWORD PTR [ebx],ebx
9f003f29:	0c 04                	or     al,0x4
9f003f2b:	04 88                	add    al,0x88
9f003f2d:	01 00                	add    DWORD PTR [eax],eax
9f003f2f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003f32:	00 00                	add    BYTE PTR [eax],al
9f003f34:	1c 00                	sbb    al,0x0
9f003f36:	00 00                	add    BYTE PTR [eax],al
9f003f38:	c8 c0 ff ff          	enter  0xffc0,0xff
9f003f3c:	38 00                	cmp    BYTE PTR [eax],al
9f003f3e:	00 00                	add    BYTE PTR [eax],al
9f003f40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003f43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f49:	74 c5                	je     9f003f10 <__x86.get_pc_thunk.bx>
9f003f4b:	0c 04                	or     al,0x4
9f003f4d:	04 00                	add    al,0x0
9f003f4f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003f52:	00 00                	add    BYTE PTR [eax],al
9f003f54:	3c 00                	cmp    al,0x0
9f003f56:	00 00                	add    BYTE PTR [eax],al
9f003f58:	e0 c0                	loopne 9f003f1a <__x86.get_pc_thunk.cx+0x6>
9f003f5a:	ff                   	(bad)  
9f003f5b:	ff                   	(bad)  
9f003f5c:	38 00                	cmp    BYTE PTR [eax],al
9f003f5e:	00 00                	add    BYTE PTR [eax],al
9f003f60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003f63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f69:	74 c5                	je     9f003f30 <__x86.get_pc_thunk.cx+0x1c>
9f003f6b:	0c 04                	or     al,0x4
9f003f6d:	04 00                	add    al,0x0
9f003f6f:	00 10                	add    BYTE PTR [eax],dl
9f003f71:	00 00                	add    BYTE PTR [eax],al
9f003f73:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f003f77:	00 47 ff             	add    BYTE PTR [edi-0x1],al
9f003f7a:	ff                   	(bad)  
9f003f7b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f003f7e:	00 00                	add    BYTE PTR [eax],al
9f003f80:	00 00                	add    BYTE PTR [eax],al
9f003f82:	00 00                	add    BYTE PTR [eax],al
9f003f84:	24 00                	and    al,0x0
9f003f86:	00 00                	add    BYTE PTR [eax],al
9f003f88:	70 00                	jo     9f003f8a <__x86.get_pc_thunk.cx+0x76>
9f003f8a:	00 00                	add    BYTE PTR [eax],al
9f003f8c:	e4 c0                	in     al,0xc0
9f003f8e:	ff                   	(bad)  
9f003f8f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f003f92:	00 00                	add    BYTE PTR [eax],al
9f003f94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003f97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f9d:	42                   	inc    edx
9f003f9e:	86 03                	xchg   BYTE PTR [ebx],al
9f003fa0:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003fa4:	c3                   	ret    
9f003fa5:	41                   	inc    ecx
9f003fa6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003faa:	04 04                	add    al,0x4
9f003fac:	24 00                	and    al,0x0
9f003fae:	00 00                	add    BYTE PTR [eax],al
9f003fb0:	98                   	cwde   
9f003fb1:	00 00                	add    BYTE PTR [eax],al
9f003fb3:	00 11                	add    BYTE PTR [ecx],dl
9f003fb5:	c1 ff ff             	sar    edi,0xff
9f003fb8:	55                   	push   ebp
9f003fb9:	00 00                	add    BYTE PTR [eax],al
9f003fbb:	00 00                	add    BYTE PTR [eax],al
9f003fbd:	41                   	inc    ecx
9f003fbe:	0e                   	push   cs
9f003fbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fc5:	42                   	inc    edx
9f003fc6:	86 03                	xchg   BYTE PTR [ebx],al
9f003fc8:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003fcc:	c3                   	ret    
9f003fcd:	41                   	inc    ecx
9f003fce:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003fd2:	04 04                	add    al,0x4
9f003fd4:	24 00                	and    al,0x0
9f003fd6:	00 00                	add    BYTE PTR [eax],al
9f003fd8:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f003fdb:	00 40 c1             	add    BYTE PTR [eax-0x3f],al
9f003fde:	ff                   	(bad)  
9f003fdf:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f003fe5:	41                   	inc    ecx
9f003fe6:	0e                   	push   cs
9f003fe7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fed:	42                   	inc    edx
9f003fee:	86 03                	xchg   BYTE PTR [ebx],al
9f003ff0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f003ff4:	c3                   	ret    
9f003ff5:	41                   	inc    ecx
9f003ff6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003ffa:	04 04                	add    al,0x4
9f003ffc:	10 00                	adc    BYTE PTR [eax],al
9f003ffe:	00 00                	add    BYTE PTR [eax],al
9f004000:	e8 00 00 00 0c       	call   ab004005 <tmbuf+0xbffdda5>
9f004005:	ff                   	(bad)  
9f004006:	ff                   	(bad)  
9f004007:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00400a:	00 00                	add    BYTE PTR [eax],al
9f00400c:	00 00                	add    BYTE PTR [eax],al
9f00400e:	00 00                	add    BYTE PTR [eax],al
9f004010:	20 00                	and    BYTE PTR [eax],al
9f004012:	00 00                	add    BYTE PTR [eax],al
9f004014:	fc                   	cld    
9f004015:	00 00                	add    BYTE PTR [eax],al
9f004017:	00 9c c1 ff ff 77 00 	add    BYTE PTR [ecx+eax*8+0x77ffff],bl
9f00401e:	00 00                	add    BYTE PTR [eax],al
9f004020:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004023:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004029:	44                   	inc    esp
9f00402a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00402d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00402e:	c5 c3 0c             	(bad)  
9f004031:	04 04                	add    al,0x4
9f004033:	00 20                	add    BYTE PTR [eax],ah
9f004035:	00 00                	add    BYTE PTR [eax],al
9f004037:	00 20                	add    BYTE PTR [eax],ah
9f004039:	01 00                	add    DWORD PTR [eax],eax
9f00403b:	00 ef                	add    bh,ch
9f00403d:	c1 ff ff             	sar    edi,0xff
9f004040:	bb 00 00 00 00       	mov    ebx,0x0
9f004045:	41                   	inc    ecx
9f004046:	0e                   	push   cs
9f004047:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00404d:	44                   	inc    esp
9f00404e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004051:	b3 c5                	mov    bl,0xc5
9f004053:	c3                   	ret    
9f004054:	0c 04                	or     al,0x4
9f004056:	04 00                	add    al,0x0
9f004058:	20 00                	and    BYTE PTR [eax],al
9f00405a:	00 00                	add    BYTE PTR [eax],al
9f00405c:	44                   	inc    esp
9f00405d:	01 00                	add    DWORD PTR [eax],eax
9f00405f:	00 86 c2 ff ff bb    	add    BYTE PTR [esi-0x4400003e],al
9f004065:	00 00                	add    BYTE PTR [eax],al
9f004067:	00 00                	add    BYTE PTR [eax],al
9f004069:	41                   	inc    ecx
9f00406a:	0e                   	push   cs
9f00406b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004071:	44                   	inc    esp
9f004072:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004075:	b3 c5                	mov    bl,0xc5
9f004077:	c3                   	ret    
9f004078:	0c 04                	or     al,0x4
9f00407a:	04 00                	add    al,0x0
9f00407c:	1c 00                	sbb    al,0x0
9f00407e:	00 00                	add    BYTE PTR [eax],al
9f004080:	68 01 00 00 1d       	push   0x1d000001
9f004085:	c3                   	ret    
9f004086:	ff                   	(bad)  
9f004087:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
9f00408b:	00 00                	add    BYTE PTR [eax],al
9f00408d:	41                   	inc    ecx
9f00408e:	0e                   	push   cs
9f00408f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004095:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f004098:	0c 04                	or     al,0x4
9f00409a:	04 00                	add    al,0x0
9f00409c:	20 00                	and    BYTE PTR [eax],al
9f00409e:	00 00                	add    BYTE PTR [eax],al
9f0040a0:	88 01                	mov    BYTE PTR [ecx],al
9f0040a2:	00 00                	add    BYTE PTR [eax],al
9f0040a4:	5c                   	pop    esp
9f0040a5:	c3                   	ret    
9f0040a6:	ff                   	(bad)  
9f0040a7:	ff                   	(bad)  
9f0040a8:	ba 00 00 00 00       	mov    edx,0x0
9f0040ad:	41                   	inc    ecx
9f0040ae:	0e                   	push   cs
9f0040af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040b5:	44                   	inc    esp
9f0040b6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0040b9:	b2 c5                	mov    dl,0xc5
9f0040bb:	c3                   	ret    
9f0040bc:	0c 04                	or     al,0x4
9f0040be:	04 00                	add    al,0x0
9f0040c0:	20 00                	and    BYTE PTR [eax],al
9f0040c2:	00 00                	add    BYTE PTR [eax],al
9f0040c4:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0040c5:	01 00                	add    DWORD PTR [eax],eax
9f0040c7:	00 f2                	add    dl,dh
9f0040c9:	c3                   	ret    
9f0040ca:	ff                   	(bad)  
9f0040cb:	ff 5a 00             	call   FWORD PTR [edx+0x0]
9f0040ce:	00 00                	add    BYTE PTR [eax],al
9f0040d0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0040d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040d9:	44                   	inc    esp
9f0040da:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0040dd:	52                   	push   edx
9f0040de:	c5 c3 0c             	(bad)  
9f0040e1:	04 04                	add    al,0x4
9f0040e3:	00 20                	add    BYTE PTR [eax],ah
9f0040e5:	00 00                	add    BYTE PTR [eax],al
9f0040e7:	00 d0                	add    al,dl
9f0040e9:	01 00                	add    DWORD PTR [eax],eax
9f0040eb:	00 28                	add    BYTE PTR [eax],ch
9f0040ed:	c4                   	(bad)  
9f0040ee:	ff                   	(bad)  
9f0040ef:	ff 5a 00             	call   FWORD PTR [edx+0x0]
9f0040f2:	00 00                	add    BYTE PTR [eax],al
9f0040f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0040f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040fd:	44                   	inc    esp
9f0040fe:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004101:	52                   	push   edx
9f004102:	c5 c3 0c             	(bad)  
9f004105:	04 04                	add    al,0x4
9f004107:	00 20                	add    BYTE PTR [eax],ah
9f004109:	00 00                	add    BYTE PTR [eax],al
9f00410b:	00 f4                	add    ah,dh
9f00410d:	01 00                	add    DWORD PTR [eax],eax
9f00410f:	00 60 c4             	add    BYTE PTR [eax-0x3c],ah
9f004112:	ff                   	(bad)  
9f004113:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
9f004119:	41                   	inc    ecx
9f00411a:	0e                   	push   cs
9f00411b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004121:	44                   	inc    esp
9f004122:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004125:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f00412a:	04 00                	add    al,0x0
9f00412c:	20 00                	and    BYTE PTR [eax],al
9f00412e:	00 00                	add    BYTE PTR [eax],al
9f004130:	18 02                	sbb    BYTE PTR [edx],al
9f004132:	00 00                	add    BYTE PTR [eax],al
9f004134:	e6 c4                	out    0xc4,al
9f004136:	ff                   	(bad)  
9f004137:	ff c1                	inc    ecx
9f004139:	01 00                	add    DWORD PTR [eax],eax
9f00413b:	00 00                	add    BYTE PTR [eax],al
9f00413d:	41                   	inc    ecx
9f00413e:	0e                   	push   cs
9f00413f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004145:	44                   	inc    esp
9f004146:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004149:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f00414e:	04 04                	add    al,0x4
9f004150:	20 00                	and    BYTE PTR [eax],al
9f004152:	00 00                	add    BYTE PTR [eax],al
9f004154:	3c 02                	cmp    al,0x2
9f004156:	00 00                	add    BYTE PTR [eax],al
9f004158:	84 c6                	test   dh,al
9f00415a:	ff                   	(bad)  
9f00415b:	ff 31                	push   DWORD PTR [ecx]
9f00415d:	00 00                	add    BYTE PTR [eax],al
9f00415f:	00 00                	add    BYTE PTR [eax],al
9f004161:	41                   	inc    ecx
9f004162:	0e                   	push   cs
9f004163:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004169:	44                   	inc    esp
9f00416a:	83 03 69             	add    DWORD PTR [ebx],0x69
9f00416d:	c5 c3 0c             	(bad)  
9f004170:	04 04                	add    al,0x4
9f004172:	00 00                	add    BYTE PTR [eax],al
9f004174:	20 00                	and    BYTE PTR [eax],al
9f004176:	00 00                	add    BYTE PTR [eax],al
9f004178:	60                   	pusha  
9f004179:	02 00                	add    al,BYTE PTR [eax]
9f00417b:	00 91 c6 ff ff 2d    	add    BYTE PTR [ecx+0x2dffffc6],dl
9f004181:	00 00                	add    BYTE PTR [eax],al
9f004183:	00 00                	add    BYTE PTR [eax],al
9f004185:	41                   	inc    ecx
9f004186:	0e                   	push   cs
9f004187:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00418d:	44                   	inc    esp
9f00418e:	83 03 65             	add    DWORD PTR [ebx],0x65
9f004191:	c5 c3 0c             	(bad)  
9f004194:	04 04                	add    al,0x4
9f004196:	00 00                	add    BYTE PTR [eax],al
9f004198:	20 00                	and    BYTE PTR [eax],al
9f00419a:	00 00                	add    BYTE PTR [eax],al
9f00419c:	84 02                	test   BYTE PTR [edx],al
9f00419e:	00 00                	add    BYTE PTR [eax],al
9f0041a0:	9a c6 ff ff 5d 00 00 	call   0x0:0x5dffffc6
9f0041a7:	00 00                	add    BYTE PTR [eax],al
9f0041a9:	41                   	inc    ecx
9f0041aa:	0e                   	push   cs
9f0041ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041b1:	44                   	inc    esp
9f0041b2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0041b5:	55                   	push   ebp
9f0041b6:	c5 c3 0c             	(bad)  
9f0041b9:	04 04                	add    al,0x4
9f0041bb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0041be:	00 00                	add    BYTE PTR [eax],al
9f0041c0:	a8 02                	test   al,0x2
9f0041c2:	00 00                	add    BYTE PTR [eax],al
9f0041c4:	d3 c6                	rol    esi,cl
9f0041c6:	ff                   	(bad)  
9f0041c7:	ff 9c 00 00 00 00 41 	call   FWORD PTR [eax+eax*1+0x41000000]
9f0041ce:	0e                   	push   cs
9f0041cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041d5:	45                   	inc    ebp
9f0041d6:	86 03                	xchg   BYTE PTR [ebx],al
9f0041d8:	83 04 02 91          	add    DWORD PTR [edx+eax*1],0xffffff91
9f0041dc:	c3                   	ret    
9f0041dd:	41                   	inc    ecx
9f0041de:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0041e2:	04 04                	add    al,0x4
9f0041e4:	20 00                	and    BYTE PTR [eax],al
9f0041e6:	00 00                	add    BYTE PTR [eax],al
9f0041e8:	d0 02                	rol    BYTE PTR [edx],1
9f0041ea:	00 00                	add    BYTE PTR [eax],al
9f0041ec:	47                   	inc    edi
9f0041ed:	c7                   	(bad)  
9f0041ee:	ff                   	(bad)  
9f0041ef:	ff 2a                	jmp    FWORD PTR [edx]
9f0041f1:	00 00                	add    BYTE PTR [eax],al
9f0041f3:	00 00                	add    BYTE PTR [eax],al
9f0041f5:	41                   	inc    ecx
9f0041f6:	0e                   	push   cs
9f0041f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041fd:	44                   	inc    esp
9f0041fe:	83 03 62             	add    DWORD PTR [ebx],0x62
9f004201:	c5 c3 0c             	(bad)  
9f004204:	04 04                	add    al,0x4
9f004206:	00 00                	add    BYTE PTR [eax],al
9f004208:	24 00                	and    al,0x0
9f00420a:	00 00                	add    BYTE PTR [eax],al
9f00420c:	f4                   	hlt    
9f00420d:	02 00                	add    al,BYTE PTR [eax]
9f00420f:	00 4d c7             	add    BYTE PTR [ebp-0x39],cl
9f004212:	ff                   	(bad)  
9f004213:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f004219:	41                   	inc    ecx
9f00421a:	0e                   	push   cs
9f00421b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004221:	42                   	inc    edx
9f004222:	86 03                	xchg   BYTE PTR [ebx],al
9f004224:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f00422b:	c5 
9f00422c:	0c 04                	or     al,0x4
9f00422e:	04 00                	add    al,0x0
9f004230:	24 00                	and    al,0x0
9f004232:	00 00                	add    BYTE PTR [eax],al
9f004234:	1c 03                	sbb    al,0x3
9f004236:	00 00                	add    BYTE PTR [eax],al
9f004238:	5a                   	pop    edx
9f004239:	c7                   	(bad)  
9f00423a:	ff                   	(bad)  
9f00423b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f004241:	41                   	inc    ecx
9f004242:	0e                   	push   cs
9f004243:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004249:	42                   	inc    edx
9f00424a:	86 03                	xchg   BYTE PTR [ebx],al
9f00424c:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004253:	c5 
9f004254:	0c 04                	or     al,0x4
9f004256:	04 00                	add    al,0x0
9f004258:	1c 00                	sbb    al,0x0
9f00425a:	00 00                	add    BYTE PTR [eax],al
9f00425c:	44                   	inc    esp
9f00425d:	03 00                	add    eax,DWORD PTR [eax]
9f00425f:	00 67 c7             	add    BYTE PTR [edi-0x39],ah
9f004262:	ff                   	(bad)  
9f004263:	ff 26                	jmp    DWORD PTR [esi]
9f004265:	00 00                	add    BYTE PTR [eax],al
9f004267:	00 00                	add    BYTE PTR [eax],al
9f004269:	41                   	inc    ecx
9f00426a:	0e                   	push   cs
9f00426b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004271:	62                   	(bad)  
9f004272:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004275:	04 00                	add    al,0x0
9f004277:	00 20                	add    BYTE PTR [eax],ah
9f004279:	00 00                	add    BYTE PTR [eax],al
9f00427b:	00 64 03 00          	add    BYTE PTR [ebx+eax*1+0x0],ah
9f00427f:	00 6d c7             	add    BYTE PTR [ebp-0x39],ch
9f004282:	ff                   	(bad)  
9f004283:	ff 2e                	jmp    FWORD PTR [esi]
9f004285:	00 00                	add    BYTE PTR [eax],al
9f004287:	00 00                	add    BYTE PTR [eax],al
9f004289:	41                   	inc    ecx
9f00428a:	0e                   	push   cs
9f00428b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004291:	44                   	inc    esp
9f004292:	83 03 66             	add    DWORD PTR [ebx],0x66
9f004295:	c5 c3 0c             	(bad)  
9f004298:	04 04                	add    al,0x4
9f00429a:	00 00                	add    BYTE PTR [eax],al
9f00429c:	20 00                	and    BYTE PTR [eax],al
9f00429e:	00 00                	add    BYTE PTR [eax],al
9f0042a0:	88 03                	mov    BYTE PTR [ebx],al
9f0042a2:	00 00                	add    BYTE PTR [eax],al
9f0042a4:	78 c7                	js     9f00426d <__x86.get_pc_thunk.cx+0x359>
9f0042a6:	ff                   	(bad)  
9f0042a7:	ff 26                	jmp    DWORD PTR [esi]
9f0042a9:	00 00                	add    BYTE PTR [eax],al
9f0042ab:	00 00                	add    BYTE PTR [eax],al
9f0042ad:	41                   	inc    ecx
9f0042ae:	0e                   	push   cs
9f0042af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042b5:	41                   	inc    ecx
9f0042b6:	83 03 60             	add    DWORD PTR [ebx],0x60
9f0042b9:	c3                   	ret    
9f0042ba:	41                   	inc    ecx
9f0042bb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0042be:	04 00                	add    al,0x0
9f0042c0:	20 00                	and    BYTE PTR [eax],al
9f0042c2:	00 00                	add    BYTE PTR [eax],al
9f0042c4:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0042c5:	03 00                	add    eax,DWORD PTR [eax]
9f0042c7:	00 7a c7             	add    BYTE PTR [edx-0x39],bh
9f0042ca:	ff                   	(bad)  
9f0042cb:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f0042ce:	00 00                	add    BYTE PTR [eax],al
9f0042d0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0042d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042d9:	44                   	inc    esp
9f0042da:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f0042dd:	c3                   	ret    
9f0042de:	41                   	inc    ecx
9f0042df:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0042e2:	04 00                	add    al,0x0
9f0042e4:	20 00                	and    BYTE PTR [eax],al
9f0042e6:	00 00                	add    BYTE PTR [eax],al
9f0042e8:	d0 03                	rol    BYTE PTR [ebx],1
9f0042ea:	00 00                	add    BYTE PTR [eax],al
9f0042ec:	99                   	cdq    
9f0042ed:	c7                   	(bad)  
9f0042ee:	ff                   	(bad)  
9f0042ef:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f0042f2:	00 00                	add    BYTE PTR [eax],al
9f0042f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0042f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042fd:	44                   	inc    esp
9f0042fe:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004301:	c3                   	ret    
9f004302:	41                   	inc    ecx
9f004303:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004306:	04 00                	add    al,0x0
9f004308:	20 00                	and    BYTE PTR [eax],al
9f00430a:	00 00                	add    BYTE PTR [eax],al
9f00430c:	f4                   	hlt    
9f00430d:	03 00                	add    eax,DWORD PTR [eax]
9f00430f:	00 b8 c7 ff ff ba    	add    BYTE PTR [eax-0x45000039],bh
9f004315:	00 00                	add    BYTE PTR [eax],al
9f004317:	00 00                	add    BYTE PTR [eax],al
9f004319:	41                   	inc    ecx
9f00431a:	0e                   	push   cs
9f00431b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004321:	44                   	inc    esp
9f004322:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004325:	b2 c5                	mov    dl,0xc5
9f004327:	c3                   	ret    
9f004328:	0c 04                	or     al,0x4
9f00432a:	04 00                	add    al,0x0
9f00432c:	24 00                	and    al,0x0
9f00432e:	00 00                	add    BYTE PTR [eax],al
9f004330:	18 04 00             	sbb    BYTE PTR [eax+eax*1],al
9f004333:	00 50 c8             	add    BYTE PTR [eax-0x38],dl
9f004336:	ff                   	(bad)  
9f004337:	ff                   	(bad)  
9f004338:	3a 00                	cmp    al,BYTE PTR [eax]
9f00433a:	00 00                	add    BYTE PTR [eax],al
9f00433c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00433f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004345:	45                   	inc    ebp
9f004346:	86 03                	xchg   BYTE PTR [ebx],al
9f004348:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f00434c:	41                   	inc    ecx
9f00434d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004351:	04 04                	add    al,0x4
9f004353:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004356:	00 00                	add    BYTE PTR [eax],al
9f004358:	40                   	inc    eax
9f004359:	04 00                	add    al,0x0
9f00435b:	00 62 c8             	add    BYTE PTR [edx-0x38],ah
9f00435e:	ff                   	(bad)  
9f00435f:	ff                   	(bad)  
9f004360:	3c 00                	cmp    al,0x0
9f004362:	00 00                	add    BYTE PTR [eax],al
9f004364:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004367:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00436d:	45                   	inc    ebp
9f00436e:	86 03                	xchg   BYTE PTR [ebx],al
9f004370:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f004374:	41                   	inc    ecx
9f004375:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004379:	04 04                	add    al,0x4
9f00437b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00437e:	00 00                	add    BYTE PTR [eax],al
9f004380:	68 04 00 00 76       	push   0x76000004
9f004385:	c8 ff ff 3e          	enter  0xffff,0x3e
9f004389:	00 00                	add    BYTE PTR [eax],al
9f00438b:	00 00                	add    BYTE PTR [eax],al
9f00438d:	41                   	inc    ecx
9f00438e:	0e                   	push   cs
9f00438f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004395:	45                   	inc    ebp
9f004396:	86 03                	xchg   BYTE PTR [ebx],al
9f004398:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f00439c:	41                   	inc    ecx
9f00439d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0043a1:	04 04                	add    al,0x4
9f0043a3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0043a6:	00 00                	add    BYTE PTR [eax],al
9f0043a8:	90                   	nop
9f0043a9:	04 00                	add    al,0x0
9f0043ab:	00 8c c8 ff ff 40 00 	add    BYTE PTR [eax+ecx*8+0x40ffff],cl
9f0043b2:	00 00                	add    BYTE PTR [eax],al
9f0043b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0043b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0043bd:	45                   	inc    ebp
9f0043be:	86 03                	xchg   BYTE PTR [ebx],al
9f0043c0:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f0043c7:	c5 
9f0043c8:	0c 04                	or     al,0x4
9f0043ca:	04 00                	add    al,0x0
9f0043cc:	24 00                	and    al,0x0
9f0043ce:	00 00                	add    BYTE PTR [eax],al
9f0043d0:	b8 04 00 00 a4       	mov    eax,0xa4000004
9f0043d5:	c8 ff ff 42          	enter  0xffff,0x42
9f0043d9:	00 00                	add    BYTE PTR [eax],al
9f0043db:	00 00                	add    BYTE PTR [eax],al
9f0043dd:	41                   	inc    ecx
9f0043de:	0e                   	push   cs
9f0043df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0043e5:	45                   	inc    ebp
9f0043e6:	86 03                	xchg   BYTE PTR [ebx],al
9f0043e8:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f0043ec:	41                   	inc    ecx
9f0043ed:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0043f1:	04 04                	add    al,0x4
9f0043f3:	00 20                	add    BYTE PTR [eax],ah
9f0043f5:	00 00                	add    BYTE PTR [eax],al
9f0043f7:	00 e0                	add    al,ah
9f0043f9:	04 00                	add    al,0x0
9f0043fb:	00 be c8 ff ff bf    	add    BYTE PTR [esi-0x40000038],bh
9f004401:	00 00                	add    BYTE PTR [eax],al
9f004403:	00 00                	add    BYTE PTR [eax],al
9f004405:	41                   	inc    ecx
9f004406:	0e                   	push   cs
9f004407:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00440d:	44                   	inc    esp
9f00440e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004411:	b7 c5                	mov    bh,0xc5
9f004413:	c3                   	ret    
9f004414:	0c 04                	or     al,0x4
9f004416:	04 00                	add    al,0x0
9f004418:	20 00                	and    BYTE PTR [eax],al
9f00441a:	00 00                	add    BYTE PTR [eax],al
9f00441c:	04 05                	add    al,0x5
9f00441e:	00 00                	add    BYTE PTR [eax],al
9f004420:	59                   	pop    ecx
9f004421:	c9                   	leave  
9f004422:	ff                   	(bad)  
9f004423:	ff 23                	jmp    DWORD PTR [ebx]
9f004425:	00 00                	add    BYTE PTR [eax],al
9f004427:	00 00                	add    BYTE PTR [eax],al
9f004429:	41                   	inc    ecx
9f00442a:	0e                   	push   cs
9f00442b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004431:	44                   	inc    esp
9f004432:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f004435:	c3                   	ret    
9f004436:	41                   	inc    ecx
9f004437:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00443a:	04 00                	add    al,0x0
9f00443c:	20 00                	and    BYTE PTR [eax],al
9f00443e:	00 00                	add    BYTE PTR [eax],al
9f004440:	28 05 00 00 58 c9    	sub    BYTE PTR ds:0xc9580000,al
9f004446:	ff                   	(bad)  
9f004447:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00444a:	00 00                	add    BYTE PTR [eax],al
9f00444c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00444f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004455:	44                   	inc    esp
9f004456:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004459:	51                   	push   ecx
9f00445a:	c5 c3 0c             	(bad)  
9f00445d:	04 04                	add    al,0x4
9f00445f:	00 20                	add    BYTE PTR [eax],ah
9f004461:	00 00                	add    BYTE PTR [eax],al
9f004463:	00 4c 05 00          	add    BYTE PTR [ebp+eax*1+0x0],cl
9f004467:	00 8d c9 ff ff 54    	add    BYTE PTR [ebp+0x54ffffc9],cl
9f00446d:	00 00                	add    BYTE PTR [eax],al
9f00446f:	00 00                	add    BYTE PTR [eax],al
9f004471:	41                   	inc    ecx
9f004472:	0e                   	push   cs
9f004473:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004479:	44                   	inc    esp
9f00447a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00447d:	4c                   	dec    esp
9f00447e:	c5 c3 0c             	(bad)  
9f004481:	04 04                	add    al,0x4
9f004483:	00 20                	add    BYTE PTR [eax],ah
9f004485:	00 00                	add    BYTE PTR [eax],al
9f004487:	00 70 05             	add    BYTE PTR [eax+0x5],dh
9f00448a:	00 00                	add    BYTE PTR [eax],al
9f00448c:	bd c9 ff ff 54       	mov    ebp,0x54ffffc9
9f004491:	00 00                	add    BYTE PTR [eax],al
9f004493:	00 00                	add    BYTE PTR [eax],al
9f004495:	41                   	inc    ecx
9f004496:	0e                   	push   cs
9f004497:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00449d:	44                   	inc    esp
9f00449e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0044a1:	4c                   	dec    esp
9f0044a2:	c5 c3 0c             	(bad)  
9f0044a5:	04 04                	add    al,0x4
9f0044a7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0044aa:	00 00                	add    BYTE PTR [eax],al
9f0044ac:	94                   	xchg   esp,eax
9f0044ad:	05 00 00 ed c9       	add    eax,0xc9ed0000
9f0044b2:	ff                   	(bad)  
9f0044b3:	ff 34 00             	push   DWORD PTR [eax+eax*1]
9f0044b6:	00 00                	add    BYTE PTR [eax],al
9f0044b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0044bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044c1:	70 c5                	jo     9f004488 <__x86.get_pc_thunk.cx+0x574>
9f0044c3:	0c 04                	or     al,0x4
9f0044c5:	04 00                	add    al,0x0
9f0044c7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0044ca:	00 00                	add    BYTE PTR [eax],al
9f0044cc:	b4 05                	mov    ah,0x5
9f0044ce:	00 00                	add    BYTE PTR [eax],al
9f0044d0:	01 ca                	add    edx,ecx
9f0044d2:	ff                   	(bad)  
9f0044d3:	ff 37                	push   DWORD PTR [edi]
9f0044d5:	00 00                	add    BYTE PTR [eax],al
9f0044d7:	00 00                	add    BYTE PTR [eax],al
9f0044d9:	41                   	inc    ecx
9f0044da:	0e                   	push   cs
9f0044db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0044e1:	73 c5                	jae    9f0044a8 <__x86.get_pc_thunk.cx+0x594>
9f0044e3:	0c 04                	or     al,0x4
9f0044e5:	04 00                	add    al,0x0
9f0044e7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0044ea:	00 00                	add    BYTE PTR [eax],al
9f0044ec:	d4 05                	aam    0x5
9f0044ee:	00 00                	add    BYTE PTR [eax],al
9f0044f0:	18 ca                	sbb    dl,cl
9f0044f2:	ff                   	(bad)  
9f0044f3:	ff 72 00             	push   DWORD PTR [edx+0x0]
9f0044f6:	00 00                	add    BYTE PTR [eax],al
9f0044f8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0044fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004501:	45                   	inc    ebp
9f004502:	86 03                	xchg   BYTE PTR [ebx],al
9f004504:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
9f004508:	c3                   	ret    
9f004509:	41                   	inc    ecx
9f00450a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00450e:	04 04                	add    al,0x4
9f004510:	1c 00                	sbb    al,0x0
9f004512:	00 00                	add    BYTE PTR [eax],al
9f004514:	fc                   	cld    
9f004515:	05 00 00 62 ca       	add    eax,0xca620000
9f00451a:	ff                   	(bad)  
9f00451b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004521:	41                   	inc    ecx
9f004522:	0e                   	push   cs
9f004523:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004529:	59                   	pop    ecx
9f00452a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00452d:	04 00                	add    al,0x0
9f00452f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004532:	00 00                	add    BYTE PTR [eax],al
9f004534:	1c 06                	sbb    al,0x6
9f004536:	00 00                	add    BYTE PTR [eax],al
9f004538:	5f                   	pop    edi
9f004539:	ca ff ff             	retf   0xffff
9f00453c:	29 00                	sub    DWORD PTR [eax],eax
9f00453e:	00 00                	add    BYTE PTR [eax],al
9f004540:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004543:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004549:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f00454d:	04 00                	add    al,0x0
9f00454f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004552:	00 00                	add    BYTE PTR [eax],al
9f004554:	3c 06                	cmp    al,0x6
9f004556:	00 00                	add    BYTE PTR [eax],al
9f004558:	68 ca ff ff 29       	push   0x29ffffca
9f00455d:	00 00                	add    BYTE PTR [eax],al
9f00455f:	00 00                	add    BYTE PTR [eax],al
9f004561:	41                   	inc    ecx
9f004562:	0e                   	push   cs
9f004563:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004569:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f00456d:	04 00                	add    al,0x0
9f00456f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004572:	00 00                	add    BYTE PTR [eax],al
9f004574:	5c                   	pop    esp
9f004575:	06                   	push   es
9f004576:	00 00                	add    BYTE PTR [eax],al
9f004578:	71 ca                	jno    9f004544 <__x86.get_pc_thunk.cx+0x630>
9f00457a:	ff                   	(bad)  
9f00457b:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f00457f:	00 00                	add    BYTE PTR [eax],al
9f004581:	41                   	inc    ecx
9f004582:	0e                   	push   cs
9f004583:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004589:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f00458c:	0c 04                	or     al,0x4
9f00458e:	04 00                	add    al,0x0
9f004590:	20 00                	and    BYTE PTR [eax],al
9f004592:	00 00                	add    BYTE PTR [eax],al
9f004594:	7c 06                	jl     9f00459c <__x86.get_pc_thunk.cx+0x688>
9f004596:	00 00                	add    BYTE PTR [eax],al
9f004598:	9d                   	popf   
9f004599:	ca ff ff             	retf   0xffff
9f00459c:	f4                   	hlt    
9f00459d:	01 00                	add    DWORD PTR [eax],eax
9f00459f:	00 00                	add    BYTE PTR [eax],al
9f0045a1:	41                   	inc    ecx
9f0045a2:	0e                   	push   cs
9f0045a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045a9:	44                   	inc    esp
9f0045aa:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0045ad:	ec                   	in     al,dx
9f0045ae:	01 c5                	add    ebp,eax
9f0045b0:	c3                   	ret    
9f0045b1:	0c 04                	or     al,0x4
9f0045b3:	04 1c                	add    al,0x1c
9f0045b5:	00 00                	add    BYTE PTR [eax],al
9f0045b7:	00 a0 06 00 00 6d    	add    BYTE PTR [eax+0x6d000006],ah
9f0045bd:	cc                   	int3   
9f0045be:	ff                   	(bad)  
9f0045bf:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f0045c2:	00 00                	add    BYTE PTR [eax],al
9f0045c4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0045c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045cd:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f0045d0:	0c 04                	or     al,0x4
9f0045d2:	04 00                	add    al,0x0
9f0045d4:	1c 00                	sbb    al,0x0
9f0045d6:	00 00                	add    BYTE PTR [eax],al
9f0045d8:	c0 06 00             	rol    BYTE PTR [esi],0x0
9f0045db:	00 9c cc ff ff 1c 00 	add    BYTE PTR [esp+ecx*8+0x1cffff],bl
9f0045e2:	00 00                	add    BYTE PTR [eax],al
9f0045e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0045e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0045ed:	58                   	pop    eax
9f0045ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0045f1:	04 00                	add    al,0x0
9f0045f3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0045f6:	00 00                	add    BYTE PTR [eax],al
9f0045f8:	e0 06                	loopne 9f004600 <__x86.get_pc_thunk.cx+0x6ec>
9f0045fa:	00 00                	add    BYTE PTR [eax],al
9f0045fc:	98                   	cwde   
9f0045fd:	cc                   	int3   
9f0045fe:	ff                   	(bad)  
9f0045ff:	ff 20                	jmp    DWORD PTR [eax]
9f004601:	00 00                	add    BYTE PTR [eax],al
9f004603:	00 00                	add    BYTE PTR [eax],al
9f004605:	41                   	inc    ecx
9f004606:	0e                   	push   cs
9f004607:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00460d:	5c                   	pop    esp
9f00460e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004611:	04 00                	add    al,0x0
9f004613:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004616:	00 00                	add    BYTE PTR [eax],al
9f004618:	00 07                	add    BYTE PTR [edi],al
9f00461a:	00 00                	add    BYTE PTR [eax],al
9f00461c:	98                   	cwde   
9f00461d:	cc                   	int3   
9f00461e:	ff                   	(bad)  
9f00461f:	ff 20                	jmp    DWORD PTR [eax]
9f004621:	00 00                	add    BYTE PTR [eax],al
9f004623:	00 00                	add    BYTE PTR [eax],al
9f004625:	41                   	inc    ecx
9f004626:	0e                   	push   cs
9f004627:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00462d:	5c                   	pop    esp
9f00462e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004631:	04 00                	add    al,0x0
9f004633:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004636:	00 00                	add    BYTE PTR [eax],al
9f004638:	20 07                	and    BYTE PTR [edi],al
9f00463a:	00 00                	add    BYTE PTR [eax],al
9f00463c:	98                   	cwde   
9f00463d:	cc                   	int3   
9f00463e:	ff                   	(bad)  
9f00463f:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f004643:	00 00                	add    BYTE PTR [eax],al
9f004645:	41                   	inc    ecx
9f004646:	0e                   	push   cs
9f004647:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00464d:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f004650:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004653:	04 1c                	add    al,0x1c
9f004655:	00 00                	add    BYTE PTR [eax],al
9f004657:	00 40 07             	add    BYTE PTR [eax+0x7],al
9f00465a:	00 00                	add    BYTE PTR [eax],al
9f00465c:	bc cd ff ff 20       	mov    esp,0x20ffffcd
9f004661:	00 00                	add    BYTE PTR [eax],al
9f004663:	00 00                	add    BYTE PTR [eax],al
9f004665:	41                   	inc    ecx
9f004666:	0e                   	push   cs
9f004667:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00466d:	5c                   	pop    esp
9f00466e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004671:	04 00                	add    al,0x0
9f004673:	00 28                	add    BYTE PTR [eax],ch
9f004675:	00 00                	add    BYTE PTR [eax],al
9f004677:	00 60 07             	add    BYTE PTR [eax+0x7],ah
9f00467a:	00 00                	add    BYTE PTR [eax],al
9f00467c:	bc cd ff ff fd       	mov    esp,0xfdffffcd
9f004681:	02 00                	add    al,BYTE PTR [eax]
9f004683:	00 00                	add    BYTE PTR [eax],al
9f004685:	41                   	inc    ecx
9f004686:	0e                   	push   cs
9f004687:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00468d:	48                   	dec    eax
9f00468e:	86 03                	xchg   BYTE PTR [ebx],al
9f004690:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f004694:	02 c3                	add    al,bl
9f004696:	41                   	inc    ecx
9f004697:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00469b:	04 04                	add    al,0x4
9f00469d:	00 00                	add    BYTE PTR [eax],al
9f00469f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0046a2:	00 00                	add    BYTE PTR [eax],al
9f0046a4:	8c 07                	mov    WORD PTR [edi],es
9f0046a6:	00 00                	add    BYTE PTR [eax],al
9f0046a8:	8d                   	(bad)  
9f0046a9:	d0 ff                	sar    bh,1
9f0046ab:	ff 23                	jmp    DWORD PTR [ebx]
9f0046ad:	00 00                	add    BYTE PTR [eax],al
9f0046af:	00 00                	add    BYTE PTR [eax],al
9f0046b1:	41                   	inc    ecx
9f0046b2:	0e                   	push   cs
9f0046b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046b9:	5f                   	pop    edi
9f0046ba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0046bd:	04 00                	add    al,0x0
9f0046bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0046c2:	00 00                	add    BYTE PTR [eax],al
9f0046c4:	ac                   	lods   al,BYTE PTR ds:[esi]
9f0046c5:	07                   	pop    es
9f0046c6:	00 00                	add    BYTE PTR [eax],al
9f0046c8:	90                   	nop
9f0046c9:	d0 ff                	sar    bh,1
9f0046cb:	ff 19                	call   FWORD PTR [ecx]
9f0046cd:	00 00                	add    BYTE PTR [eax],al
9f0046cf:	00 00                	add    BYTE PTR [eax],al
9f0046d1:	41                   	inc    ecx
9f0046d2:	0e                   	push   cs
9f0046d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046d9:	55                   	push   ebp
9f0046da:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0046dd:	04 00                	add    al,0x0
9f0046df:	00 20                	add    BYTE PTR [eax],ah
9f0046e1:	00 00                	add    BYTE PTR [eax],al
9f0046e3:	00 cc                	add    ah,cl
9f0046e5:	07                   	pop    es
9f0046e6:	00 00                	add    BYTE PTR [eax],al
9f0046e8:	8c d0                	mov    eax,ss
9f0046ea:	ff                   	(bad)  
9f0046eb:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f0046ee:	00 00                	add    BYTE PTR [eax],al
9f0046f0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0046f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0046f9:	44                   	inc    esp
9f0046fa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0046fd:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f004700:	0c 04                	or     al,0x4
9f004702:	04 00                	add    al,0x0
9f004704:	20 00                	and    BYTE PTR [eax],al
9f004706:	00 00                	add    BYTE PTR [eax],al
9f004708:	f0 07                	lock pop es
9f00470a:	00 00                	add    BYTE PTR [eax],al
9f00470c:	dc d0                	fnop   
9f00470e:	ff                   	(bad)  
9f00470f:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f004713:	00 00                	add    BYTE PTR [eax],al
9f004715:	41                   	inc    ecx
9f004716:	0e                   	push   cs
9f004717:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00471d:	44                   	inc    esp
9f00471e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004721:	64                   	fs
9f004722:	c5 c3 0c             	(bad)  
9f004725:	04 04                	add    al,0x4
9f004727:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00472a:	00 00                	add    BYTE PTR [eax],al
9f00472c:	14 08                	adc    al,0x8
9f00472e:	00 00                	add    BYTE PTR [eax],al
9f004730:	24 d1                	and    al,0xd1
9f004732:	ff                   	(bad)  
9f004733:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f004739:	41                   	inc    ecx
9f00473a:	0e                   	push   cs
9f00473b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004741:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f004747:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00474a:	00 00                	add    BYTE PTR [eax],al
9f00474c:	34 08                	xor    al,0x8
9f00474e:	00 00                	add    BYTE PTR [eax],al
9f004750:	8b d1                	mov    edx,ecx
9f004752:	ff                   	(bad)  
9f004753:	ff 57 00             	call   DWORD PTR [edi+0x0]
9f004756:	00 00                	add    BYTE PTR [eax],al
9f004758:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00475b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004761:	02 53 c5             	add    dl,BYTE PTR [ebx-0x3b]
9f004764:	0c 04                	or     al,0x4
9f004766:	04 00                	add    al,0x0
9f004768:	20 00                	and    BYTE PTR [eax],al
9f00476a:	00 00                	add    BYTE PTR [eax],al
9f00476c:	54                   	push   esp
9f00476d:	08 00                	or     BYTE PTR [eax],al
9f00476f:	00 c2                	add    dl,al
9f004771:	d1 ff                	sar    edi,1
9f004773:	ff d4                	call   esp
9f004775:	01 00                	add    DWORD PTR [eax],eax
9f004777:	00 00                	add    BYTE PTR [eax],al
9f004779:	41                   	inc    ecx
9f00477a:	0e                   	push   cs
9f00477b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004781:	44                   	inc    esp
9f004782:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004785:	cc                   	int3   
9f004786:	01 c5                	add    ebp,eax
9f004788:	c3                   	ret    
9f004789:	0c 04                	or     al,0x4
9f00478b:	04 1c                	add    al,0x1c
9f00478d:	00 00                	add    BYTE PTR [eax],al
9f00478f:	00 78 08             	add    BYTE PTR [eax+0x8],bh
9f004792:	00 00                	add    BYTE PTR [eax],al
9f004794:	72 d3                	jb     9f004769 <__x86.get_pc_thunk.cx+0x855>
9f004796:	ff                   	(bad)  
9f004797:	ff 20                	jmp    DWORD PTR [eax]
9f004799:	00 00                	add    BYTE PTR [eax],al
9f00479b:	00 00                	add    BYTE PTR [eax],al
9f00479d:	41                   	inc    ecx
9f00479e:	0e                   	push   cs
9f00479f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0047a5:	5c                   	pop    esp
9f0047a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0047a9:	04 00                	add    al,0x0
9f0047ab:	00 20                	add    BYTE PTR [eax],ah
9f0047ad:	00 00                	add    BYTE PTR [eax],al
9f0047af:	00 98 08 00 00 72    	add    BYTE PTR [eax+0x72000008],bl
9f0047b5:	d3 ff                	sar    edi,cl
9f0047b7:	ff 85 00 00 00 00    	inc    DWORD PTR [ebp+0x0]
9f0047bd:	41                   	inc    ecx
9f0047be:	0e                   	push   cs
9f0047bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0047c5:	44                   	inc    esp
9f0047c6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0047c9:	7d c5                	jge    9f004790 <__x86.get_pc_thunk.cx+0x87c>
9f0047cb:	c3                   	ret    
9f0047cc:	0c 04                	or     al,0x4
9f0047ce:	04 00                	add    al,0x0
9f0047d0:	1c 00                	sbb    al,0x0
9f0047d2:	00 00                	add    BYTE PTR [eax],al
9f0047d4:	bc 08 00 00 d3       	mov    esp,0xd3000008
9f0047d9:	d3 ff                	sar    edi,cl
9f0047db:	ff 23                	jmp    DWORD PTR [ebx]
9f0047dd:	00 00                	add    BYTE PTR [eax],al
9f0047df:	00 00                	add    BYTE PTR [eax],al
9f0047e1:	41                   	inc    ecx
9f0047e2:	0e                   	push   cs
9f0047e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0047e9:	5f                   	pop    edi
9f0047ea:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0047ed:	04 00                	add    al,0x0
9f0047ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0047f2:	00 00                	add    BYTE PTR [eax],al
9f0047f4:	dc 08                	fmul   QWORD PTR [eax]
9f0047f6:	00 00                	add    BYTE PTR [eax],al
9f0047f8:	d6                   	(bad)  
9f0047f9:	d3 ff                	sar    edi,cl
9f0047fb:	ff 1b                	call   FWORD PTR [ebx]
9f0047fd:	00 00                	add    BYTE PTR [eax],al
9f0047ff:	00 00                	add    BYTE PTR [eax],al
9f004801:	41                   	inc    ecx
9f004802:	0e                   	push   cs
9f004803:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004809:	57                   	push   edi
9f00480a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00480d:	04 00                	add    al,0x0
9f00480f:	00 20                	add    BYTE PTR [eax],ah
9f004811:	00 00                	add    BYTE PTR [eax],al
9f004813:	00 fc                	add    ah,bh
9f004815:	08 00                	or     BYTE PTR [eax],al
9f004817:	00 d1                	add    cl,dl
9f004819:	d3 ff                	sar    edi,cl
9f00481b:	ff 32                	push   DWORD PTR [edx]
9f00481d:	00 00                	add    BYTE PTR [eax],al
9f00481f:	00 00                	add    BYTE PTR [eax],al
9f004821:	41                   	inc    ecx
9f004822:	0e                   	push   cs
9f004823:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004829:	44                   	inc    esp
9f00482a:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f00482d:	c5 c3 0c             	(bad)  
9f004830:	04 04                	add    al,0x4
9f004832:	00 00                	add    BYTE PTR [eax],al
9f004834:	1c 00                	sbb    al,0x0
9f004836:	00 00                	add    BYTE PTR [eax],al
9f004838:	20 09                	and    BYTE PTR [ecx],cl
9f00483a:	00 00                	add    BYTE PTR [eax],al
9f00483c:	e0 d3                	loopne 9f004811 <__x86.get_pc_thunk.cx+0x8fd>
9f00483e:	ff                   	(bad)  
9f00483f:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
9f004845:	41                   	inc    ecx
9f004846:	0e                   	push   cs
9f004847:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00484d:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f004853:	04 1c                	add    al,0x1c
9f004855:	00 00                	add    BYTE PTR [eax],al
9f004857:	00 40 09             	add    BYTE PTR [eax+0x9],al
9f00485a:	00 00                	add    BYTE PTR [eax],al
9f00485c:	5b                   	pop    ebx
9f00485d:	d5 ff                	aad    0xff
9f00485f:	ff 20                	jmp    DWORD PTR [eax]
9f004861:	00 00                	add    BYTE PTR [eax],al
9f004863:	00 00                	add    BYTE PTR [eax],al
9f004865:	41                   	inc    ecx
9f004866:	0e                   	push   cs
9f004867:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00486d:	5c                   	pop    esp
9f00486e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004871:	04 00                	add    al,0x0
9f004873:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004876:	00 00                	add    BYTE PTR [eax],al
9f004878:	60                   	pusha  
9f004879:	09 00                	or     DWORD PTR [eax],eax
9f00487b:	00 5c d5 ff          	add    BYTE PTR [ebp+edx*8-0x1],bl
9f00487f:	ff c7                	inc    edi
9f004881:	00 00                	add    BYTE PTR [eax],al
9f004883:	00 00                	add    BYTE PTR [eax],al
9f004885:	41                   	inc    ecx
9f004886:	0e                   	push   cs
9f004887:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00488d:	02 c3                	add    al,bl
9f00488f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004892:	04 00                	add    al,0x0
9f004894:	1c 00                	sbb    al,0x0
9f004896:	00 00                	add    BYTE PTR [eax],al
9f004898:	80 09 00             	or     BYTE PTR [ecx],0x0
9f00489b:	00 03                	add    BYTE PTR [ebx],al
9f00489d:	d6                   	(bad)  
9f00489e:	ff                   	(bad)  
9f00489f:	ff 20                	jmp    DWORD PTR [eax]
9f0048a1:	00 00                	add    BYTE PTR [eax],al
9f0048a3:	00 00                	add    BYTE PTR [eax],al
9f0048a5:	41                   	inc    ecx
9f0048a6:	0e                   	push   cs
9f0048a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048ad:	5c                   	pop    esp
9f0048ae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0048b1:	04 00                	add    al,0x0
9f0048b3:	00 20                	add    BYTE PTR [eax],ah
9f0048b5:	00 00                	add    BYTE PTR [eax],al
9f0048b7:	00 a0 09 00 00 04    	add    BYTE PTR [eax+0x4000009],ah
9f0048bd:	d6                   	(bad)  
9f0048be:	ff                   	(bad)  
9f0048bf:	ff 29                	jmp    FWORD PTR [ecx]
9f0048c1:	00 00                	add    BYTE PTR [eax],al
9f0048c3:	00 00                	add    BYTE PTR [eax],al
9f0048c5:	41                   	inc    ecx
9f0048c6:	0e                   	push   cs
9f0048c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048cd:	44                   	inc    esp
9f0048ce:	83 03 61             	add    DWORD PTR [ebx],0x61
9f0048d1:	c5 c3 0c             	(bad)  
9f0048d4:	04 04                	add    al,0x4
9f0048d6:	00 00                	add    BYTE PTR [eax],al
9f0048d8:	20 00                	and    BYTE PTR [eax],al
9f0048da:	00 00                	add    BYTE PTR [eax],al
9f0048dc:	c4 09                	les    ecx,FWORD PTR [ecx]
9f0048de:	00 00                	add    BYTE PTR [eax],al
9f0048e0:	0c d6                	or     al,0xd6
9f0048e2:	ff                   	(bad)  
9f0048e3:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f0048e6:	00 00                	add    BYTE PTR [eax],al
9f0048e8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048f1:	44                   	inc    esp
9f0048f2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0048f5:	56                   	push   esi
9f0048f6:	c3                   	ret    
9f0048f7:	41                   	inc    ecx
9f0048f8:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0048fb:	04 28                	add    al,0x28
9f0048fd:	00 00                	add    BYTE PTR [eax],al
9f0048ff:	00 e8                	add    al,ch
9f004901:	09 00                	or     DWORD PTR [eax],eax
9f004903:	00 47 d6             	add    BYTE PTR [edi-0x2a],al
9f004906:	ff                   	(bad)  
9f004907:	ff                   	(bad)  
9f004908:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f00490b:	00 00                	add    BYTE PTR [eax],al
9f00490d:	41                   	inc    ecx
9f00490e:	0e                   	push   cs
9f00490f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004915:	45                   	inc    ebp
9f004916:	86 03                	xchg   BYTE PTR [ebx],al
9f004918:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f00491c:	02 c3                	add    al,bl
9f00491e:	41                   	inc    ecx
9f00491f:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004923:	04 04                	add    al,0x4
9f004925:	00 00                	add    BYTE PTR [eax],al
9f004927:	00 20                	add    BYTE PTR [eax],ah
9f004929:	00 00                	add    BYTE PTR [eax],al
9f00492b:	00 14 0a             	add    BYTE PTR [edx+ecx*1],dl
9f00492e:	00 00                	add    BYTE PTR [eax],al
9f004930:	59                   	pop    ecx
9f004931:	d8 ff                	fdivr  st,st(7)
9f004933:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f004936:	00 00                	add    BYTE PTR [eax],al
9f004938:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00493b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004941:	44                   	inc    esp
9f004942:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004945:	40                   	inc    eax
9f004946:	04 c5                	add    al,0xc5
9f004948:	c3                   	ret    
9f004949:	0c 04                	or     al,0x4
9f00494b:	04 1c                	add    al,0x1c
9f00494d:	00 00                	add    BYTE PTR [eax],al
9f00494f:	00 38                	add    BYTE PTR [eax],bh
9f004951:	0a 00                	or     al,BYTE PTR [eax]
9f004953:	00 7d dc             	add    BYTE PTR [ebp-0x24],bh
9f004956:	ff                   	(bad)  
9f004957:	ff 33                	push   DWORD PTR [ebx]
9f004959:	00 00                	add    BYTE PTR [eax],al
9f00495b:	00 00                	add    BYTE PTR [eax],al
9f00495d:	41                   	inc    ecx
9f00495e:	0e                   	push   cs
9f00495f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004965:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004966:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004969:	04 00                	add    al,0x0
9f00496b:	00 20                	add    BYTE PTR [eax],ah
9f00496d:	00 00                	add    BYTE PTR [eax],al
9f00496f:	00 58 0a             	add    BYTE PTR [eax+0xa],bl
9f004972:	00 00                	add    BYTE PTR [eax],al
9f004974:	90                   	nop
9f004975:	dc ff                	fdiv   st(7),st
9f004977:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f00497e:	0e                   	push   cs
9f00497f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004985:	44                   	inc    esp
9f004986:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004989:	7c c5                	jl     9f004950 <__x86.get_pc_thunk.cx+0xa3c>
9f00498b:	c3                   	ret    
9f00498c:	0c 04                	or     al,0x4
9f00498e:	04 00                	add    al,0x0
9f004990:	20 00                	and    BYTE PTR [eax],al
9f004992:	00 00                	add    BYTE PTR [eax],al
9f004994:	7c 0a                	jl     9f0049a0 <__x86.get_pc_thunk.cx+0xa8c>
9f004996:	00 00                	add    BYTE PTR [eax],al
9f004998:	f0 dc ff             	lock fdiv st(7),st
9f00499b:	ff                   	(bad)  
9f00499c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f00499f:	00 00                	add    BYTE PTR [eax],al
9f0049a1:	41                   	inc    ecx
9f0049a2:	0e                   	push   cs
9f0049a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049a9:	44                   	inc    esp
9f0049aa:	83 03 76             	add    DWORD PTR [ebx],0x76
9f0049ad:	c5 c3 0c             	(bad)  
9f0049b0:	04 04                	add    al,0x4
9f0049b2:	00 00                	add    BYTE PTR [eax],al
9f0049b4:	20 00                	and    BYTE PTR [eax],al
9f0049b6:	00 00                	add    BYTE PTR [eax],al
9f0049b8:	a0 0a 00 00 0a       	mov    al,ds:0xa00000a
9f0049bd:	dd ff                	(bad)  
9f0049bf:	ff                   	(bad)  
9f0049c0:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0049c3:	00 00                	add    BYTE PTR [eax],al
9f0049c5:	41                   	inc    ecx
9f0049c6:	0e                   	push   cs
9f0049c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049cd:	44                   	inc    esp
9f0049ce:	83 03 76             	add    DWORD PTR [ebx],0x76
9f0049d1:	c5 c3 0c             	(bad)  
9f0049d4:	04 04                	add    al,0x4
9f0049d6:	00 00                	add    BYTE PTR [eax],al
9f0049d8:	1c 00                	sbb    al,0x0
9f0049da:	00 00                	add    BYTE PTR [eax],al
9f0049dc:	c4 0a                	les    ecx,FWORD PTR [edx]
9f0049de:	00 00                	add    BYTE PTR [eax],al
9f0049e0:	24 dd                	and    al,0xdd
9f0049e2:	ff                   	(bad)  
9f0049e3:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f0049e6:	00 00                	add    BYTE PTR [eax],al
9f0049e8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0049eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049f1:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
9f0049f4:	0c 04                	or     al,0x4
9f0049f6:	04 00                	add    al,0x0
9f0049f8:	24 00                	and    al,0x0
9f0049fa:	00 00                	add    BYTE PTR [eax],al
9f0049fc:	e4 0a                	in     al,0xa
9f0049fe:	00 00                	add    BYTE PTR [eax],al
9f004a00:	74 dd                	je     9f0049df <__x86.get_pc_thunk.cx+0xacb>
9f004a02:	ff                   	(bad)  
9f004a03:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f004a06:	00 00                	add    BYTE PTR [eax],al
9f004a08:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a11:	45                   	inc    ebp
9f004a12:	86 03                	xchg   BYTE PTR [ebx],al
9f004a14:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f004a18:	c3                   	ret    
9f004a19:	41                   	inc    ecx
9f004a1a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004a1e:	04 04                	add    al,0x4
9f004a20:	1c 00                	sbb    al,0x0
9f004a22:	00 00                	add    BYTE PTR [eax],al
9f004a24:	0c 0b                	or     al,0xb
9f004a26:	00 00                	add    BYTE PTR [eax],al
9f004a28:	ac                   	lods   al,BYTE PTR ds:[esi]
9f004a29:	dd ff                	(bad)  
9f004a2b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004a2e:	00 00                	add    BYTE PTR [eax],al
9f004a30:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a39:	7c c5                	jl     9f004a00 <__x86.get_pc_thunk.cx+0xaec>
9f004a3b:	0c 04                	or     al,0x4
9f004a3d:	04 00                	add    al,0x0
9f004a3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004a42:	00 00                	add    BYTE PTR [eax],al
9f004a44:	2c 0b                	sub    al,0xb
9f004a46:	00 00                	add    BYTE PTR [eax],al
9f004a48:	cc                   	int3   
9f004a49:	dd ff                	(bad)  
9f004a4b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004a4e:	00 00                	add    BYTE PTR [eax],al
9f004a50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a59:	7c c5                	jl     9f004a20 <__x86.get_pc_thunk.cx+0xb0c>
9f004a5b:	0c 04                	or     al,0x4
9f004a5d:	04 00                	add    al,0x0
9f004a5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004a62:	00 00                	add    BYTE PTR [eax],al
9f004a64:	4c                   	dec    esp
9f004a65:	0b 00                	or     eax,DWORD PTR [eax]
9f004a67:	00 ec                	add    ah,ch
9f004a69:	dd ff                	(bad)  
9f004a6b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f004a6e:	00 00                	add    BYTE PTR [eax],al
9f004a70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a79:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f004a7c:	0c 04                	or     al,0x4
9f004a7e:	04 00                	add    al,0x0
9f004a80:	1c 00                	sbb    al,0x0
9f004a82:	00 00                	add    BYTE PTR [eax],al
9f004a84:	6c                   	ins    BYTE PTR es:[edi],dx
9f004a85:	0b 00                	or     eax,DWORD PTR [eax]
9f004a87:	00 14 de             	add    BYTE PTR [esi+ebx*8],dl
9f004a8a:	ff                   	(bad)  
9f004a8b:	ff 30                	push   DWORD PTR [eax]
9f004a8d:	00 00                	add    BYTE PTR [eax],al
9f004a8f:	00 00                	add    BYTE PTR [eax],al
9f004a91:	41                   	inc    ecx
9f004a92:	0e                   	push   cs
9f004a93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a99:	6c                   	ins    BYTE PTR es:[edi],dx
9f004a9a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004a9d:	04 00                	add    al,0x0
9f004a9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004aa2:	00 00                	add    BYTE PTR [eax],al
9f004aa4:	8c 0b                	mov    WORD PTR [ebx],cs
9f004aa6:	00 00                	add    BYTE PTR [eax],al
9f004aa8:	24 de                	and    al,0xde
9f004aaa:	ff                   	(bad)  
9f004aab:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f004aae:	00 00                	add    BYTE PTR [eax],al
9f004ab0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ab3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ab9:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f004abc:	0c 04                	or     al,0x4
9f004abe:	04 00                	add    al,0x0
9f004ac0:	1c 00                	sbb    al,0x0
9f004ac2:	00 00                	add    BYTE PTR [eax],al
9f004ac4:	ac                   	lods   al,BYTE PTR ds:[esi]
9f004ac5:	0b 00                	or     eax,DWORD PTR [eax]
9f004ac7:	00 60 de             	add    BYTE PTR [eax-0x22],ah
9f004aca:	ff                   	(bad)  
9f004acb:	ff 31                	push   DWORD PTR [ecx]
9f004acd:	00 00                	add    BYTE PTR [eax],al
9f004acf:	00 00                	add    BYTE PTR [eax],al
9f004ad1:	41                   	inc    ecx
9f004ad2:	0e                   	push   cs
9f004ad3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ad9:	6d                   	ins    DWORD PTR es:[edi],dx
9f004ada:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004add:	04 00                	add    al,0x0
9f004adf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004ae2:	00 00                	add    BYTE PTR [eax],al
9f004ae4:	cc                   	int3   
9f004ae5:	0b 00                	or     eax,DWORD PTR [eax]
9f004ae7:	00 71 de             	add    BYTE PTR [ecx-0x22],dh
9f004aea:	ff                   	(bad)  
9f004aeb:	ff 1a                	call   FWORD PTR [edx]
9f004aed:	00 00                	add    BYTE PTR [eax],al
9f004aef:	00 00                	add    BYTE PTR [eax],al
9f004af1:	41                   	inc    ecx
9f004af2:	0e                   	push   cs
9f004af3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004af9:	56                   	push   esi
9f004afa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004afd:	04 00                	add    al,0x0
9f004aff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004b02:	00 00                	add    BYTE PTR [eax],al
9f004b04:	ec                   	in     al,dx
9f004b05:	0b 00                	or     eax,DWORD PTR [eax]
9f004b07:	00 6b de             	add    BYTE PTR [ebx-0x22],ch
9f004b0a:	ff                   	(bad)  
9f004b0b:	ff                   	(bad)  
9f004b0c:	39 00                	cmp    DWORD PTR [eax],eax
9f004b0e:	00 00                	add    BYTE PTR [eax],al
9f004b10:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b19:	75 c5                	jne    9f004ae0 <__x86.get_pc_thunk.cx+0xbcc>
9f004b1b:	0c 04                	or     al,0x4
9f004b1d:	04 00                	add    al,0x0
9f004b1f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004b22:	00 00                	add    BYTE PTR [eax],al
9f004b24:	0c 0c                	or     al,0xc
9f004b26:	00 00                	add    BYTE PTR [eax],al
9f004b28:	84 de                	test   dh,bl
9f004b2a:	ff                   	(bad)  
9f004b2b:	ff 1e                	call   FWORD PTR [esi]
9f004b2d:	00 00                	add    BYTE PTR [eax],al
9f004b2f:	00 00                	add    BYTE PTR [eax],al
9f004b31:	41                   	inc    ecx
9f004b32:	0e                   	push   cs
9f004b33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b39:	5a                   	pop    edx
9f004b3a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b3d:	04 00                	add    al,0x0
9f004b3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004b42:	00 00                	add    BYTE PTR [eax],al
9f004b44:	2c 0c                	sub    al,0xc
9f004b46:	00 00                	add    BYTE PTR [eax],al
9f004b48:	84 de                	test   dh,bl
9f004b4a:	ff                   	(bad)  
9f004b4b:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f004b4e:	00 00                	add    BYTE PTR [eax],al
9f004b50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b59:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f004b5c:	0c 04                	or     al,0x4
9f004b5e:	04 00                	add    al,0x0
9f004b60:	1c 00                	sbb    al,0x0
9f004b62:	00 00                	add    BYTE PTR [eax],al
9f004b64:	4c                   	dec    esp
9f004b65:	0c 00                	or     al,0x0
9f004b67:	00 cb                	add    bl,cl
9f004b69:	de ff                	fdivp  st(7),st
9f004b6b:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f004b6e:	00 00                	add    BYTE PTR [eax],al
9f004b70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b79:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f004b7c:	0c 04                	or     al,0x4
9f004b7e:	04 00                	add    al,0x0
9f004b80:	1c 00                	sbb    al,0x0
9f004b82:	00 00                	add    BYTE PTR [eax],al
9f004b84:	6c                   	ins    BYTE PTR es:[edi],dx
9f004b85:	0c 00                	or     al,0x0
9f004b87:	00 14 df             	add    BYTE PTR [edi+ebx*8],dl
9f004b8a:	ff                   	(bad)  
9f004b8b:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
9f004b8e:	00 00                	add    BYTE PTR [eax],al
9f004b90:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b99:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
9f004b9d:	04 04                	add    al,0x4
9f004b9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004ba2:	00 00                	add    BYTE PTR [eax],al
9f004ba4:	8c 0c 00             	mov    WORD PTR [eax+eax*1],cs
9f004ba7:	00 54 df ff          	add    BYTE PTR [edi+ebx*8-0x1],dl
9f004bab:	ff 20                	jmp    DWORD PTR [eax]
9f004bad:	00 00                	add    BYTE PTR [eax],al
9f004baf:	00 00                	add    BYTE PTR [eax],al
9f004bb1:	41                   	inc    ecx
9f004bb2:	0e                   	push   cs
9f004bb3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bb9:	5c                   	pop    esp
9f004bba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004bbd:	04 00                	add    al,0x0
9f004bbf:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004bc2:	00 00                	add    BYTE PTR [eax],al
9f004bc4:	ac                   	lods   al,BYTE PTR ds:[esi]
9f004bc5:	0c 00                	or     al,0x0
9f004bc7:	00 54 df ff          	add    BYTE PTR [edi+ebx*8-0x1],dl
9f004bcb:	ff                   	(bad)  
9f004bcc:	7d 01                	jge    9f004bcf <__x86.get_pc_thunk.cx+0xcbb>
9f004bce:	00 00                	add    BYTE PTR [eax],al
9f004bd0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bd9:	46                   	inc    esi
9f004bda:	87 03                	xchg   DWORD PTR [ebx],eax
9f004bdc:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004bdf:	05 03 70 01 c3       	add    eax,0xc3017003
9f004be4:	41                   	inc    ecx
9f004be5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004be9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004bec:	04 00                	add    al,0x0
9f004bee:	00 00                	add    BYTE PTR [eax],al
9f004bf0:	1c 00                	sbb    al,0x0
9f004bf2:	00 00                	add    BYTE PTR [eax],al
9f004bf4:	dc 0c 00             	fmul   QWORD PTR [eax+eax*1]
9f004bf7:	00 a4 e0 ff ff 1d 00 	add    BYTE PTR [eax+eiz*8+0x1dffff],ah
9f004bfe:	00 00                	add    BYTE PTR [eax],al
9f004c00:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c09:	59                   	pop    ecx
9f004c0a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c0d:	04 00                	add    al,0x0
9f004c0f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004c12:	00 00                	add    BYTE PTR [eax],al
9f004c14:	fc                   	cld    
9f004c15:	0c 00                	or     al,0x0
9f004c17:	00 a4 e0 ff ff 9c 01 	add    BYTE PTR [eax+eiz*8+0x19cffff],ah
9f004c1e:	00 00                	add    BYTE PTR [eax],al
9f004c20:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c29:	46                   	inc    esi
9f004c2a:	87 03                	xchg   DWORD PTR [ebx],eax
9f004c2c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004c2f:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f004c34:	41                   	inc    ecx
9f004c35:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004c39:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c3c:	04 00                	add    al,0x0
9f004c3e:	00 00                	add    BYTE PTR [eax],al
9f004c40:	20 00                	and    BYTE PTR [eax],al
9f004c42:	00 00                	add    BYTE PTR [eax],al
9f004c44:	2c 0d                	sub    al,0xd
9f004c46:	00 00                	add    BYTE PTR [eax],al
9f004c48:	10 e2                	adc    dl,ah
9f004c4a:	ff                   	(bad)  
9f004c4b:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f004c51:	41                   	inc    ecx
9f004c52:	0e                   	push   cs
9f004c53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c59:	44                   	inc    esp
9f004c5a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004c5d:	8e c5                	mov    es,ebp
9f004c5f:	c3                   	ret    
9f004c60:	0c 04                	or     al,0x4
9f004c62:	04 00                	add    al,0x0
9f004c64:	1c 00                	sbb    al,0x0
9f004c66:	00 00                	add    BYTE PTR [eax],al
9f004c68:	50                   	push   eax
9f004c69:	0d 00 00 82 e2       	or     eax,0xe2820000
9f004c6e:	ff                   	(bad)  
9f004c6f:	ff 20                	jmp    DWORD PTR [eax]
9f004c71:	00 00                	add    BYTE PTR [eax],al
9f004c73:	00 00                	add    BYTE PTR [eax],al
9f004c75:	41                   	inc    ecx
9f004c76:	0e                   	push   cs
9f004c77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c7d:	5c                   	pop    esp
9f004c7e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c81:	04 00                	add    al,0x0
9f004c83:	00 28                	add    BYTE PTR [eax],ch
9f004c85:	00 00                	add    BYTE PTR [eax],al
9f004c87:	00 70 0d             	add    BYTE PTR [eax+0xd],dh
9f004c8a:	00 00                	add    BYTE PTR [eax],al
9f004c8c:	84 e2                	test   dl,ah
9f004c8e:	ff                   	(bad)  
9f004c8f:	ff 43 01             	inc    DWORD PTR [ebx+0x1]
9f004c92:	00 00                	add    BYTE PTR [eax],al
9f004c94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c9d:	45                   	inc    ebp
9f004c9e:	86 03                	xchg   BYTE PTR [ebx],al
9f004ca0:	83 04 03 38          	add    DWORD PTR [ebx+eax*1],0x38
9f004ca4:	01 c3                	add    ebx,eax
9f004ca6:	41                   	inc    ecx
9f004ca7:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004cab:	04 04                	add    al,0x4
9f004cad:	00 00                	add    BYTE PTR [eax],al
9f004caf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004cb2:	00 00                	add    BYTE PTR [eax],al
9f004cb4:	9c                   	pushf  
9f004cb5:	0d 00 00 9b e3       	or     eax,0xe39b0000
9f004cba:	ff                   	(bad)  
9f004cbb:	ff 26                	jmp    DWORD PTR [esi]
9f004cbd:	00 00                	add    BYTE PTR [eax],al
9f004cbf:	00 00                	add    BYTE PTR [eax],al
9f004cc1:	41                   	inc    ecx
9f004cc2:	0e                   	push   cs
9f004cc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cc9:	62                   	(bad)  
9f004cca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004ccd:	04 00                	add    al,0x0
9f004ccf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004cd2:	00 00                	add    BYTE PTR [eax],al
9f004cd4:	bc 0d 00 00 a4       	mov    esp,0xa400000d
9f004cd9:	e3 ff                	jecxz  9f004cda <__x86.get_pc_thunk.cx+0xdc6>
9f004cdb:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f004ce1:	41                   	inc    ecx
9f004ce2:	0e                   	push   cs
9f004ce3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ce9:	45                   	inc    ebp
9f004cea:	86 03                	xchg   BYTE PTR [ebx],al
9f004cec:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f004cf0:	c3                   	ret    
9f004cf1:	41                   	inc    ecx
9f004cf2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004cf6:	04 04                	add    al,0x4
9f004cf8:	24 00                	and    al,0x0
9f004cfa:	00 00                	add    BYTE PTR [eax],al
9f004cfc:	e4 0d                	in     al,0xd
9f004cfe:	00 00                	add    BYTE PTR [eax],al
9f004d00:	1a e4                	sbb    ah,ah
9f004d02:	ff                   	(bad)  
9f004d03:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f004d06:	00 00                	add    BYTE PTR [eax],al
9f004d08:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d11:	42                   	inc    edx
9f004d12:	86 03                	xchg   BYTE PTR [ebx],al
9f004d14:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f004d18:	c3                   	ret    
9f004d19:	41                   	inc    ecx
9f004d1a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004d1e:	04 04                	add    al,0x4
9f004d20:	1c 00                	sbb    al,0x0
9f004d22:	00 00                	add    BYTE PTR [eax],al
9f004d24:	0c 0e                	or     al,0xe
9f004d26:	00 00                	add    BYTE PTR [eax],al
9f004d28:	60                   	pusha  
9f004d29:	e4 ff                	in     al,0xff
9f004d2b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004d31:	41                   	inc    ecx
9f004d32:	0e                   	push   cs
9f004d33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d39:	59                   	pop    ecx
9f004d3a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d3d:	04 00                	add    al,0x0
9f004d3f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004d42:	00 00                	add    BYTE PTR [eax],al
9f004d44:	2c 0e                	sub    al,0xe
9f004d46:	00 00                	add    BYTE PTR [eax],al
9f004d48:	60                   	pusha  
9f004d49:	e4 ff                	in     al,0xff
9f004d4b:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f004d4f:	00 00                	add    BYTE PTR [eax],al
9f004d51:	41                   	inc    ecx
9f004d52:	0e                   	push   cs
9f004d53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d59:	45                   	inc    ebp
9f004d5a:	86 03                	xchg   BYTE PTR [ebx],al
9f004d5c:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f004d60:	41                   	inc    ecx
9f004d61:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004d65:	04 04                	add    al,0x4
9f004d67:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004d6a:	00 00                	add    BYTE PTR [eax],al
9f004d6c:	54                   	push   esp
9f004d6d:	0e                   	push   cs
9f004d6e:	00 00                	add    BYTE PTR [eax],al
9f004d70:	7c e4                	jl     9f004d56 <__x86.get_pc_thunk.cx+0xe42>
9f004d72:	ff                   	(bad)  
9f004d73:	ff 19                	call   FWORD PTR [ecx]
9f004d75:	03 00                	add    eax,DWORD PTR [eax]
9f004d77:	00 00                	add    BYTE PTR [eax],al
9f004d79:	41                   	inc    ecx
9f004d7a:	0e                   	push   cs
9f004d7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d81:	44                   	inc    esp
9f004d82:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004d85:	10 03                	adc    BYTE PTR [ebx],al
9f004d87:	c3                   	ret    
9f004d88:	41                   	inc    ecx
9f004d89:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d8c:	04 00                	add    al,0x0
9f004d8e:	00 00                	add    BYTE PTR [eax],al
9f004d90:	1c 00                	sbb    al,0x0
9f004d92:	00 00                	add    BYTE PTR [eax],al
9f004d94:	7c 0e                	jl     9f004da4 <__x86.get_pc_thunk.cx+0xe90>
9f004d96:	00 00                	add    BYTE PTR [eax],al
9f004d98:	6d                   	ins    DWORD PTR es:[edi],dx
9f004d99:	e7 ff                	out    0xff,eax
9f004d9b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f004da1:	41                   	inc    ecx
9f004da2:	0e                   	push   cs
9f004da3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004da9:	59                   	pop    ecx
9f004daa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004dad:	04 00                	add    al,0x0
9f004daf:	00 20                	add    BYTE PTR [eax],ah
9f004db1:	00 00                	add    BYTE PTR [eax],al
9f004db3:	00 9c 0e 00 00 6a e7 	add    BYTE PTR [esi+ecx*1-0x18960000],bl
9f004dba:	ff                   	(bad)  
9f004dbb:	ff 46 00             	inc    DWORD PTR [esi+0x0]
9f004dbe:	00 00                	add    BYTE PTR [eax],al
9f004dc0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004dc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004dc9:	44                   	inc    esp
9f004dca:	83 03 7e             	add    DWORD PTR [ebx],0x7e
9f004dcd:	c5 c3 0c             	(bad)  
9f004dd0:	04 04                	add    al,0x4
9f004dd2:	00 00                	add    BYTE PTR [eax],al
9f004dd4:	1c 00                	sbb    al,0x0
9f004dd6:	00 00                	add    BYTE PTR [eax],al
9f004dd8:	c0 0e 00             	ror    BYTE PTR [esi],0x0
9f004ddb:	00 8c e7 ff ff 35 00 	add    BYTE PTR [edi+eiz*8+0x35ffff],cl
9f004de2:	00 00                	add    BYTE PTR [eax],al
9f004de4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004de7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ded:	71 c5                	jno    9f004db4 <__x86.get_pc_thunk.cx+0xea0>
9f004def:	0c 04                	or     al,0x4
9f004df1:	04 00                	add    al,0x0
9f004df3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004df6:	00 00                	add    BYTE PTR [eax],al
9f004df8:	e0 0e                	loopne 9f004e08 <__x86.get_pc_thunk.cx+0xef4>
9f004dfa:	00 00                	add    BYTE PTR [eax],al
9f004dfc:	a1 e7 ff ff 1d       	mov    eax,ds:0x1dffffe7
9f004e01:	00 00                	add    BYTE PTR [eax],al
9f004e03:	00 00                	add    BYTE PTR [eax],al
9f004e05:	41                   	inc    ecx
9f004e06:	0e                   	push   cs
9f004e07:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e0d:	59                   	pop    ecx
9f004e0e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e11:	04 00                	add    al,0x0
9f004e13:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004e16:	00 00                	add    BYTE PTR [eax],al
9f004e18:	00 0f                	add    BYTE PTR [edi],cl
9f004e1a:	00 00                	add    BYTE PTR [eax],al
9f004e1c:	9e                   	sahf   
9f004e1d:	e7 ff                	out    0xff,eax
9f004e1f:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f004e22:	00 00                	add    BYTE PTR [eax],al
9f004e24:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e2d:	46                   	inc    esi
9f004e2e:	87 03                	xchg   DWORD PTR [ebx],eax
9f004e30:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f004e33:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f004e38:	41                   	inc    ecx
9f004e39:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004e3d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e40:	04 00                	add    al,0x0
9f004e42:	00 00                	add    BYTE PTR [eax],al
9f004e44:	24 00                	and    al,0x0
9f004e46:	00 00                	add    BYTE PTR [eax],al
9f004e48:	30 0f                	xor    BYTE PTR [edi],cl
9f004e4a:	00 00                	add    BYTE PTR [eax],al
9f004e4c:	c5 ef ff             	(bad)  
9f004e4f:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f004e52:	00 00                	add    BYTE PTR [eax],al
9f004e54:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e5d:	45                   	inc    ebp
9f004e5e:	86 03                	xchg   BYTE PTR [ebx],al
9f004e60:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f004e64:	c3                   	ret    
9f004e65:	41                   	inc    ecx
9f004e66:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004e6a:	04 04                	add    al,0x4
9f004e6c:	20 00                	and    BYTE PTR [eax],al
9f004e6e:	00 00                	add    BYTE PTR [eax],al
9f004e70:	58                   	pop    eax
9f004e71:	0f 00 00             	sldt   WORD PTR [eax]
9f004e74:	0a f0                	or     dh,al
9f004e76:	ff                   	(bad)  
9f004e77:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f004e7a:	00 00                	add    BYTE PTR [eax],al
9f004e7c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e85:	44                   	inc    esp
9f004e86:	83 03 79             	add    DWORD PTR [ebx],0x79
9f004e89:	c5 c3 0c             	(bad)  
9f004e8c:	04 04                	add    al,0x4
9f004e8e:	00 00                	add    BYTE PTR [eax],al
9f004e90:	10 00                	adc    BYTE PTR [eax],al
9f004e92:	00 00                	add    BYTE PTR [eax],al
9f004e94:	7c 0f                	jl     9f004ea5 <__x86.get_pc_thunk.cx+0xf91>
9f004e96:	00 00                	add    BYTE PTR [eax],al
9f004e98:	7c f0                	jl     9f004e8a <__x86.get_pc_thunk.cx+0xf76>
9f004e9a:	ff                   	(bad)  
9f004e9b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f004e9e:	00 00                	add    BYTE PTR [eax],al
9f004ea0:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f004ea4 <.dynsym>:
	...
9f004eb4:	5d                   	pop    ebp
9f004eb5:	01 00                	add    DWORD PTR [eax],eax
9f004eb7:	00 d4                	add    ah,dl
9f004eb9:	27                   	daa    
9f004eba:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
9f004ec0:	12 00                	adc    al,BYTE PTR [eax]
9f004ec2:	01 00                	add    DWORD PTR [eax],eax
9f004ec4:	f4                   	hlt    
9f004ec5:	00 00                	add    BYTE PTR [eax],al
9f004ec7:	00 78 12             	add    BYTE PTR [eax+0x12],bh
9f004eca:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f004ed0:	12 00                	adc    al,BYTE PTR [eax]
9f004ed2:	01 00                	add    DWORD PTR [eax],eax
9f004ed4:	be 00 00 00 9c       	mov    esi,0x9c000000
9f004ed9:	0d 00 9f 59 00       	or     eax,0x599f00
9f004ede:	00 00                	add    BYTE PTR [eax],al
9f004ee0:	12 00                	adc    al,BYTE PTR [eax]
9f004ee2:	01 00                	add    DWORD PTR [eax],eax
9f004ee4:	c4 00                	les    eax,FWORD PTR [eax]
9f004ee6:	00 00                	add    BYTE PTR [eax],al
9f004ee8:	f5                   	cmc    
9f004ee9:	0d 00 9f 54 00       	or     eax,0x549f00
9f004eee:	00 00                	add    BYTE PTR [eax],al
9f004ef0:	12 00                	adc    al,BYTE PTR [eax]
9f004ef2:	01 00                	add    DWORD PTR [eax],eax
9f004ef4:	3d 00 00 00 14       	cmp    eax,0x14000000
9f004ef9:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f004efe:	00 00                	add    BYTE PTR [eax],al
9f004f00:	12 00                	adc    al,BYTE PTR [eax]
9f004f02:	01 00                	add    DWORD PTR [eax],eax
9f004f04:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f05:	01 00                	add    DWORD PTR [eax],eax
9f004f07:	00 cc                	add    ah,cl
9f004f09:	28 00                	sub    BYTE PTR [eax],al
9f004f0b:	9f                   	lahf   
9f004f0c:	59                   	pop    ecx
9f004f0d:	00 00                	add    BYTE PTR [eax],al
9f004f0f:	00 12                	add    BYTE PTR [edx],dl
9f004f11:	00 01                	add    BYTE PTR [ecx],al
9f004f13:	00 46 01             	add    BYTE PTR [esi+0x1],al
9f004f16:	00 00                	add    BYTE PTR [eax],al
9f004f18:	04 26                	add    al,0x26
9f004f1a:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f004f20:	12 00                	adc    al,BYTE PTR [eax]
9f004f22:	01 00                	add    DWORD PTR [eax],eax
9f004f24:	53                   	push   ebx
9f004f25:	00 00                	add    BYTE PTR [eax],al
9f004f27:	00 70 05             	add    BYTE PTR [eax+0x5],dh
9f004f2a:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
9f004f30:	12 00                	adc    al,BYTE PTR [eax]
9f004f32:	01 00                	add    DWORD PTR [eax],eax
9f004f34:	af                   	scas   eax,DWORD PTR es:[edi]
9f004f35:	00 00                	add    BYTE PTR [eax],al
9f004f37:	00 c8                	add    al,cl
9f004f39:	0a 00                	or     al,BYTE PTR [eax]
9f004f3b:	9f                   	lahf   
9f004f3c:	ba 00 00 00 12       	mov    edx,0x12000000
9f004f41:	00 01                	add    BYTE PTR [ecx],al
9f004f43:	00 33                	add    BYTE PTR [ebx],dh
9f004f45:	01 00                	add    DWORD PTR [eax],eax
9f004f47:	00 b7 1d 00 9f 20    	add    BYTE PTR [edi+0x209f001d],dh
9f004f4d:	00 00                	add    BYTE PTR [eax],al
9f004f4f:	00 12                	add    BYTE PTR [edx],dl
9f004f51:	00 01                	add    BYTE PTR [ecx],al
9f004f53:	00 08                	add    BYTE PTR [eax],cl
9f004f55:	01 00                	add    DWORD PTR [eax],eax
9f004f57:	00 18                	add    BYTE PTR [eax],bl
9f004f59:	14 00                	adc    al,0x0
9f004f5b:	9f                   	lahf   
9f004f5c:	20 00                	and    BYTE PTR [eax],al
9f004f5e:	00 00                	add    BYTE PTR [eax],al
9f004f60:	12 00                	adc    al,BYTE PTR [eax]
9f004f62:	01 00                	add    DWORD PTR [eax],eax
9f004f64:	8d 00                	lea    eax,[eax]
9f004f66:	00 00                	add    BYTE PTR [eax],al
9f004f68:	1c 0a                	sbb    al,0xa
9f004f6a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f004f70:	12 00                	adc    al,BYTE PTR [eax]
9f004f72:	01 00                	add    DWORD PTR [eax],eax
9f004f74:	76 00                	jbe    9f004f76 <__x86.get_pc_thunk.cx+0x1062>
9f004f76:	00 00                	add    BYTE PTR [eax],al
9f004f78:	06                   	push   es
9f004f79:	1b 00                	sbb    eax,DWORD PTR [eax]
9f004f7b:	9f                   	lahf   
9f004f7c:	20 00                	and    BYTE PTR [eax],al
9f004f7e:	00 00                	add    BYTE PTR [eax],al
9f004f80:	12 00                	adc    al,BYTE PTR [eax]
9f004f82:	01 00                	add    DWORD PTR [eax],eax
9f004f84:	cb                   	retf   
9f004f85:	00 00                	add    BYTE PTR [eax],al
9f004f87:	00 08                	add    BYTE PTR [eax],cl
9f004f89:	0f 00 9f 72 00 00 00 	ltr    WORD PTR [edi+0x72]
9f004f90:	12 00                	adc    al,BYTE PTR [eax]
9f004f92:	01 00                	add    DWORD PTR [eax],eax
9f004f94:	0e                   	push   cs
9f004f95:	01 00                	add    DWORD PTR [eax],eax
9f004f97:	00 35 17 00 9f 23    	add    BYTE PTR ds:0x239f0017,dh
9f004f9d:	00 00                	add    BYTE PTR [eax],al
9f004f9f:	00 12                	add    BYTE PTR [edx],dl
9f004fa1:	00 01                	add    BYTE PTR [ecx],al
9f004fa3:	00 94 01 00 00 1c 2b 	add    BYTE PTR [ecx+eax*1+0x2b1c0000],dl
9f004faa:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
9f004fb0:	12 00                	adc    al,BYTE PTR [eax]
9f004fb2:	01 00                	add    DWORD PTR [eax],eax
9f004fb4:	17                   	pop    ss
9f004fb5:	00 00                	add    BYTE PTR [eax],al
9f004fb7:	00 2b                	add    BYTE PTR [ebx],ch
9f004fb9:	02 00                	add    al,BYTE PTR [eax]
9f004fbb:	9f                   	lahf   
9f004fbc:	bb 00 00 00 12       	mov    ebx,0x12000000
9f004fc1:	00 01                	add    BYTE PTR [ecx],al
9f004fc3:	00 21                	add    BYTE PTR [ecx],ah
9f004fc5:	01 00                	add    DWORD PTR [eax],eax
9f004fc7:	00 74 17 00          	add    BYTE PTR [edi+edx*1+0x0],dh
9f004fcb:	9f                   	lahf   
9f004fcc:	73 00                	jae    9f004fce <__x86.get_pc_thunk.cx+0x10ba>
9f004fce:	00 00                	add    BYTE PTR [eax],al
9f004fd0:	12 00                	adc    al,BYTE PTR [eax]
9f004fd2:	01 00                	add    DWORD PTR [eax],eax
9f004fd4:	ce                   	into   
9f004fd5:	01 00                	add    DWORD PTR [eax],eax
9f004fd7:	00 05 35 00 9f 1d    	add    BYTE PTR ds:0x1d9f0035,al
9f004fdd:	00 00                	add    BYTE PTR [eax],al
9f004fdf:	00 12                	add    BYTE PTR [edx],dl
9f004fe1:	00 01                	add    BYTE PTR [ecx],al
9f004fe3:	00 a4 01 00 00 bc 2c 	add    BYTE PTR [ecx+eax*1+0x2cbc0000],ah
9f004fea:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
9f004ff0:	12 00                	adc    al,BYTE PTR [eax]
9f004ff2:	01 00                	add    DWORD PTR [eax],eax
9f004ff4:	b4 00                	mov    ah,0x0
9f004ff6:	00 00                	add    BYTE PTR [eax],al
9f004ff8:	ba 0c 00 9f bf       	mov    edx,0xbf9f000c
9f004ffd:	00 00                	add    BYTE PTR [eax],al
9f004fff:	00 12                	add    BYTE PTR [edx],dl
9f005001:	00 01                	add    BYTE PTR [ecx],al
9f005003:	00 41 01             	add    BYTE PTR [ecx+0x1],al
9f005006:	00 00                	add    BYTE PTR [eax],al
9f005008:	c0 1e 00             	rcr    BYTE PTR [esi],0x0
9f00500b:	9f                   	lahf   
9f00500c:	29 00                	sub    DWORD PTR [eax],eax
9f00500e:	00 00                	add    BYTE PTR [eax],al
9f005010:	12 00                	adc    al,BYTE PTR [eax]
9f005012:	01 00                	add    DWORD PTR [eax],eax
9f005014:	7c 01                	jl     9f005017 <__x86.get_pc_thunk.cx+0x1103>
9f005016:	00 00                	add    BYTE PTR [eax],al
9f005018:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005019:	29 00                	sub    DWORD PTR [eax],eax
9f00501b:	9f                   	lahf   
9f00501c:	1e                   	push   ds
9f00501d:	00 00                	add    BYTE PTR [eax],al
9f00501f:	00 12                	add    BYTE PTR [edx],dl
9f005021:	00 01                	add    BYTE PTR [ecx],al
9f005023:	00 e8                	add    al,ch
9f005025:	00 00                	add    BYTE PTR [eax],al
9f005027:	00 35 10 00 9f f4    	add    BYTE PTR ds:0xf49f0010,dh
9f00502d:	01 00                	add    DWORD PTR [eax],eax
9f00502f:	00 12                	add    BYTE PTR [edx],dl
9f005031:	00 01                	add    BYTE PTR [ecx],al
9f005033:	00 82 00 00 00 c7    	add    BYTE PTR [edx-0x39000000],al
9f005039:	09 00                	or     DWORD PTR [eax],eax
9f00503b:	9f                   	lahf   
9f00503c:	26 00 00             	add    BYTE PTR es:[eax],al
9f00503f:	00 12                	add    BYTE PTR [edx],dl
9f005041:	00 01                	add    BYTE PTR [ecx],al
9f005043:	00 4f 01             	add    BYTE PTR [edi+0x1],cl
9f005046:	00 00                	add    BYTE PTR [eax],al
9f005048:	88 26                	mov    BYTE PTR [esi],ah
9f00504a:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f005050:	12 00                	adc    al,BYTE PTR [eax]
9f005052:	01 00                	add    DWORD PTR [eax],eax
9f005054:	c5 01                	lds    eax,FWORD PTR [ecx]
9f005056:	00 00                	add    BYTE PTR [eax],al
9f005058:	a8 31                	test   al,0x31
9f00505a:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
9f005060:	12 00                	adc    al,BYTE PTR [eax]
9f005062:	01 00                	add    DWORD PTR [eax],eax
9f005064:	e3 00                	jecxz  9f005066 <__x86.get_pc_thunk.cx+0x1152>
9f005066:	00 00                	add    BYTE PTR [eax],al
9f005068:	e9 0f 00 9f 4c       	jmp    eb9f507c <tmbuf+0x4c9eee1c>
9f00506d:	00 00                	add    BYTE PTR [eax],al
9f00506f:	00 12                	add    BYTE PTR [edx],dl
9f005071:	00 01                	add    BYTE PTR [ecx],al
9f005073:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
9f005076:	00 00                	add    BYTE PTR [eax],al
9f005078:	58                   	pop    eax
9f005079:	17                   	pop    ss
9f00507a:	00 9f 19 00 00 00    	add    BYTE PTR [edi+0x19],bl
9f005080:	12 00                	adc    al,BYTE PTR [eax]
9f005082:	01 00                	add    DWORD PTR [eax],eax
9f005084:	61                   	popa   
9f005085:	00 00                	add    BYTE PTR [eax],al
9f005087:	00 dc                	add    ah,bl
9f005089:	07                   	pop    es
9f00508a:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
9f005090:	12 00                	adc    al,BYTE PTR [eax]
9f005092:	01 00                	add    DWORD PTR [eax],eax
9f005094:	ed                   	in     eax,dx
9f005095:	01 00                	add    DWORD PTR [eax],eax
9f005097:	00 ba 35 00 9f 57    	add    BYTE PTR [edx+0x579f0035],bh
9f00509d:	08 00                	or     BYTE PTR [eax],al
9f00509f:	00 12                	add    BYTE PTR [edx],dl
9f0050a1:	00 01                	add    BYTE PTR [ecx],al
9f0050a3:	00 be 01 00 00 88    	add    BYTE PTR [esi-0x77ffffff],bh
9f0050a9:	31 00                	xor    DWORD PTR [eax],eax
9f0050ab:	9f                   	lahf   
9f0050ac:	1d 00 00 00 12       	sbb    eax,0x12000000
9f0050b1:	00 01                	add    BYTE PTR [ecx],al
9f0050b3:	00 7d 00             	add    BYTE PTR [ebp+0x0],bh
9f0050b6:	00 00                	add    BYTE PTR [eax],al
9f0050b8:	5d                   	pop    ebp
9f0050b9:	09 00                	or     DWORD PTR [eax],eax
9f0050bb:	9f                   	lahf   
9f0050bc:	35 00 00 00 12       	xor    eax,0x12000000
9f0050c1:	00 01                	add    BYTE PTR [ecx],al
9f0050c3:	00 84 01 00 00 cc 29 	add    BYTE PTR [ecx+eax*1+0x29cc0000],al
9f0050ca:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
9f0050d0:	12 00                	adc    al,BYTE PTR [eax]
9f0050d2:	01 00                	add    DWORD PTR [eax],eax
9f0050d4:	8c 01                	mov    WORD PTR [ecx],es
9f0050d6:	00 00                	add    BYTE PTR [eax],al
9f0050d8:	fc                   	cld    
9f0050d9:	2a 00                	sub    al,BYTE PTR [eax]
9f0050db:	9f                   	lahf   
9f0050dc:	20 00                	and    BYTE PTR [eax],al
9f0050de:	00 00                	add    BYTE PTR [eax],al
9f0050e0:	12 00                	adc    al,BYTE PTR [eax]
9f0050e2:	01 00                	add    DWORD PTR [eax],eax
9f0050e4:	5a                   	pop    edx
9f0050e5:	00 00                	add    BYTE PTR [eax],al
9f0050e7:	00 1a                	add    BYTE PTR [edx],bl
9f0050e9:	06                   	push   es
9f0050ea:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f0050f0:	12 00                	adc    al,BYTE PTR [eax]
9f0050f2:	01 00                	add    DWORD PTR [eax],eax
9f0050f4:	26 01 00             	add    DWORD PTR es:[eax],eax
9f0050f7:	00 ab 1b 00 9f 23    	add    BYTE PTR [ebx+0x239f001b],ch
9f0050fd:	00 00                	add    BYTE PTR [eax],al
9f0050ff:	00 12                	add    BYTE PTR [edx],dl
9f005101:	00 01                	add    BYTE PTR [ecx],al
9f005103:	00 10                	add    BYTE PTR [eax],dl
9f005105:	00 00                	add    BYTE PTR [eax],al
9f005107:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
9f00510a:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f005110:	12 00                	adc    al,BYTE PTR [eax]
9f005112:	01 00                	add    DWORD PTR [eax],eax
9f005114:	de 00                	fiadd  WORD PTR [eax]
9f005116:	00 00                	add    BYTE PTR [eax],al
9f005118:	c0 0f 00             	ror    BYTE PTR [edi],0x0
9f00511b:	9f                   	lahf   
9f00511c:	29 00                	sub    DWORD PTR [eax],eax
9f00511e:	00 00                	add    BYTE PTR [eax],al
9f005120:	12 00                	adc    al,BYTE PTR [eax]
9f005122:	01 00                	add    DWORD PTR [eax],eax
9f005124:	92                   	xchg   edx,eax
9f005125:	00 00                	add    BYTE PTR [eax],al
9f005127:	00 00                	add    BYTE PTR [eax],al
9f005129:	00 13                	add    BYTE PTR [ebx],dl
9f00512b:	00 00                	add    BYTE PTR [eax],al
9f00512d:	00 00                	add    BYTE PTR [eax],al
9f00512f:	00 10                	add    BYTE PTR [eax],dl
9f005131:	00 01                	add    BYTE PTR [ecx],al
9f005133:	00 d7                	add    bh,dl
9f005135:	01 00                	add    DWORD PTR [eax],eax
9f005137:	00 22                	add    BYTE PTR [edx],ah
9f005139:	35 00 9f 46 00       	xor    eax,0x469f00
9f00513e:	00 00                	add    BYTE PTR [eax],al
9f005140:	12 00                	adc    al,BYTE PTR [eax]
9f005142:	01 00                	add    DWORD PTR [eax],eax
9f005144:	3a 01                	cmp    al,BYTE PTR [ecx]
9f005146:	00 00                	add    BYTE PTR [eax],al
9f005148:	9f                   	lahf   
9f005149:	1e                   	push   ds
9f00514a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005150:	12 00                	adc    al,BYTE PTR [eax]
9f005152:	01 00                	add    DWORD PTR [eax],eax
9f005154:	ab                   	stos   DWORD PTR es:[edi],eax
9f005155:	01 00                	add    DWORD PTR [eax],eax
9f005157:	00 ee                	add    dh,ch
9f005159:	2e 00 9f 20 00 00 00 	add    BYTE PTR cs:[edi+0x20],bl
9f005160:	12 00                	adc    al,BYTE PTR [eax]
9f005162:	01 00                	add    DWORD PTR [eax],eax
9f005164:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f005165:	00 00                	add    BYTE PTR [eax],al
9f005167:	00 85 0a 00 9f 43    	add    BYTE PTR [ebp+0x439f000a],al
9f00516d:	00 00                	add    BYTE PTR [eax],al
9f00516f:	00 12                	add    BYTE PTR [edx],dl
9f005171:	00 01                	add    BYTE PTR [ecx],al
9f005173:	00 ef                	add    bh,ch
9f005175:	01 00                	add    DWORD PTR [eax],eax
9f005177:	00 7e 3e             	add    BYTE PTR [esi+0x3e],bh
9f00517a:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
9f005180:	12 00                	adc    al,BYTE PTR [eax]
9f005182:	01 00                	add    DWORD PTR [eax],eax
9f005184:	88 00                	mov    BYTE PTR [eax],al
9f005186:	00 00                	add    BYTE PTR [eax],al
9f005188:	ed                   	in     eax,dx
9f005189:	09 00                	or     DWORD PTR [eax],eax
9f00518b:	9f                   	lahf   
9f00518c:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f00518f:	00 12                	add    BYTE PTR [edx],dl
9f005191:	00 01                	add    BYTE PTR [ecx],al
9f005193:	00 a2 00 00 00 42    	add    BYTE PTR [edx+0x42000000],ah
9f005199:	0a 00                	or     al,BYTE PTR [eax]
9f00519b:	9f                   	lahf   
9f00519c:	43                   	inc    ebx
9f00519d:	00 00                	add    BYTE PTR [eax],al
9f00519f:	00 12                	add    BYTE PTR [edx],dl
9f0051a1:	00 01                	add    BYTE PTR [ecx],al
9f0051a3:	00 56 01             	add    BYTE PTR [esi+0x1],dl
9f0051a6:	00 00                	add    BYTE PTR [eax],al
9f0051a8:	74 27                	je     9f0051d1 <__x86.get_pc_thunk.cx+0x12bd>
9f0051aa:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
9f0051b0:	12 00                	adc    al,BYTE PTR [eax]
9f0051b2:	01 00                	add    DWORD PTR [eax],eax
9f0051b4:	01 01                	add    DWORD PTR [ecx],eax
9f0051b6:	00 00                	add    BYTE PTR [eax],al
9f0051b8:	b4 12                	mov    ah,0x12
9f0051ba:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f0051c0:	12 00                	adc    al,BYTE PTR [eax]
9f0051c2:	01 00                	add    DWORD PTR [eax],eax
9f0051c4:	08 00                	or     BYTE PTR [eax],al
9f0051c6:	00 00                	add    BYTE PTR [eax],al
9f0051c8:	70 00                	jo     9f0051ca <__x86.get_pc_thunk.cx+0x12b6>
9f0051ca:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f0051d0:	12 00                	adc    al,BYTE PTR [eax]
9f0051d2:	01 00                	add    DWORD PTR [eax],eax
9f0051d4:	64 01 00             	add    DWORD PTR fs:[eax],eax
9f0051d7:	00 54 28 00          	add    BYTE PTR [eax+ebp*1+0x0],dl
9f0051db:	9f                   	lahf   
9f0051dc:	47                   	inc    edi
9f0051dd:	00 00                	add    BYTE PTR [eax],al
9f0051df:	00 12                	add    BYTE PTR [edx],dl
9f0051e1:	00 01                	add    BYTE PTR [ecx],al
9f0051e3:	00 d1                	add    cl,dl
9f0051e5:	00 00                	add    BYTE PTR [eax],al
9f0051e7:	00 97 0f 00 9f 29    	add    BYTE PTR [edi+0x299f000f],dl
9f0051ed:	00 00                	add    BYTE PTR [eax],al
9f0051ef:	00 12                	add    BYTE PTR [edx],dl
9f0051f1:	00 01                	add    BYTE PTR [ecx],al
9f0051f3:	00 e1                	add    cl,ah
9f0051f5:	01 00                	add    DWORD PTR [eax],eax
9f0051f7:	00 9d 35 00 9f 1d    	add    BYTE PTR [ebp+0x1d9f0035],bl
9f0051fd:	00 00                	add    BYTE PTR [eax],al
9f0051ff:	00 12                	add    BYTE PTR [edx],dl
9f005201:	00 01                	add    BYTE PTR [ecx],al
9f005203:	00 f4                	add    ah,dh
9f005205:	01 00                	add    DWORD PTR [eax],eax
9f005207:	00 11                	add    BYTE PTR [ecx],dl
9f005209:	3e 00 9f 6d 00 00 00 	add    BYTE PTR ds:[edi+0x6d],bl
9f005210:	12 00                	adc    al,BYTE PTR [eax]
9f005212:	01 00                	add    DWORD PTR [eax],eax
9f005214:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005215:	00 00                	add    BYTE PTR [eax],al
9f005217:	00 97 08 00 9f 9c    	add    BYTE PTR [edi-0x6360fff8],dl
9f00521d:	00 00                	add    BYTE PTR [eax],al
9f00521f:	00 12                	add    BYTE PTR [edx],dl
9f005221:	00 01                	add    BYTE PTR [ecx],al
9f005223:	00 fc                	add    ah,bh
9f005225:	00 00                	add    BYTE PTR [eax],al
9f005227:	00 94 12 00 9f 20 00 	add    BYTE PTR [edx+edx*1+0x209f00],dl
9f00522e:	00 00                	add    BYTE PTR [eax],al
9f005230:	12 00                	adc    al,BYTE PTR [eax]
9f005232:	01 00                	add    DWORD PTR [eax],eax
9f005234:	1c 00                	sbb    al,0x0
9f005236:	00 00                	add    BYTE PTR [eax],al
9f005238:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
9f00523d:	00 00                	add    BYTE PTR [eax],al
9f00523f:	00 12                	add    BYTE PTR [edx],dl
9f005241:	00 01                	add    BYTE PTR [ecx],al
9f005243:	00 75 01             	add    BYTE PTR [ebp+0x1],dh
9f005246:	00 00                	add    BYTE PTR [eax],al
9f005248:	59                   	pop    ecx
9f005249:	29 00                	sub    DWORD PTR [eax],eax
9f00524b:	9f                   	lahf   
9f00524c:	1a 00                	sbb    al,BYTE PTR [eax]
9f00524e:	00 00                	add    BYTE PTR [eax],al
9f005250:	12 00                	adc    al,BYTE PTR [eax]
9f005252:	01 00                	add    DWORD PTR [eax],eax
9f005254:	71 00                	jno    9f005256 <__x86.get_pc_thunk.cx+0x1342>
9f005256:	00 00                	add    BYTE PTR [eax],al
9f005258:	0d 08 00 9f 2d       	or     eax,0x2d9f0008
9f00525d:	00 00                	add    BYTE PTR [eax],al
9f00525f:	00 12                	add    BYTE PTR [edx],dl
9f005261:	00 01                	add    BYTE PTR [ecx],al
9f005263:	00 2a                	add    BYTE PTR [edx],ch
9f005265:	00 00                	add    BYTE PTR [eax],al
9f005267:	00 ba 04 00 9f 5a    	add    BYTE PTR [edx+0x5a9f0004],bh
9f00526d:	00 00                	add    BYTE PTR [eax],al
9f00526f:	00 12                	add    BYTE PTR [edx],dl
9f005271:	00 01                	add    BYTE PTR [ecx],al
9f005273:	00 ee                	add    dh,ch
9f005275:	00 00                	add    BYTE PTR [eax],al
9f005277:	00 29                	add    BYTE PTR [ecx],ch
9f005279:	12 00                	adc    al,BYTE PTR [eax]
9f00527b:	9f                   	lahf   
9f00527c:	4f                   	dec    edi
9f00527d:	00 00                	add    BYTE PTR [eax],al
9f00527f:	00 12                	add    BYTE PTR [edx],dl
9f005281:	00 01                	add    BYTE PTR [ecx],al
9f005283:	00 01                	add    BYTE PTR [ecx],al
9f005285:	00 00                	add    BYTE PTR [eax],al
9f005287:	00 00                	add    BYTE PTR [eax],al
9f005289:	00 00                	add    BYTE PTR [eax],al
9f00528b:	9f                   	lahf   
9f00528c:	38 00                	cmp    BYTE PTR [eax],al
9f00528e:	00 00                	add    BYTE PTR [eax],al
9f005290:	12 00                	adc    al,BYTE PTR [eax]
9f005292:	01 00                	add    DWORD PTR [eax],eax
9f005294:	9c                   	pushf  
9f005295:	01 00                	add    DWORD PTR [eax],eax
9f005297:	00 9c 2c 00 9f 1d 00 	add    BYTE PTR [esp+ebp*1+0x1d9f00],bl
9f00529e:	00 00                	add    BYTE PTR [eax],al
9f0052a0:	12 00                	adc    al,BYTE PTR [eax]
9f0052a2:	01 00                	add    DWORD PTR [eax],eax
9f0052a4:	b3 01                	mov    bl,0x1
9f0052a6:	00 00                	add    BYTE PTR [eax],al
9f0052a8:	53                   	push   ebx
9f0052a9:	30 00                	xor    BYTE PTR [eax],al
9f0052ab:	9f                   	lahf   
9f0052ac:	26 00 00             	add    BYTE PTR es:[eax],al
9f0052af:	00 12                	add    BYTE PTR [edx],dl
9f0052b1:	00 01                	add    BYTE PTR [ecx],al
9f0052b3:	00 68 00             	add    BYTE PTR [eax+0x0],ch
9f0052b6:	00 00                	add    BYTE PTR [eax],al
9f0052b8:	33 09                	xor    ecx,DWORD PTR [ecx]
9f0052ba:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f0052c0:	12 00                	adc    al,BYTE PTR [eax]
9f0052c2:	01 00                	add    DWORD PTR [eax],eax
9f0052c4:	21 00                	and    DWORD PTR [eax],eax
9f0052c6:	00 00                	add    BYTE PTR [eax],al
9f0052c8:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f0052cb:	9f                   	lahf   
9f0052cc:	ba 00 00 00 12       	mov    edx,0x12000000
9f0052d1:	00 01                	add    BYTE PTR [ecx],al
9f0052d3:	00 2e                	add    BYTE PTR [esi],ch
9f0052d5:	01 00                	add    DWORD PTR [eax],eax
9f0052d7:	00 ce                	add    dh,cl
9f0052d9:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0052db:	9f                   	lahf   
9f0052dc:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0052de:	00 00                	add    BYTE PTR [eax],al
9f0052e0:	12 00                	adc    al,BYTE PTR [eax]
9f0052e2:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f0052e4 <.dynstr>:
9f0052e4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0052e7:	72 63                	jb     9f00534c <__x86.get_pc_thunk.cx+0x1438>
9f0052e9:	68 72 00 73 74       	push   0x74730072
9f0052ee:	72 63                	jb     9f005353 <__x86.get_pc_thunk.cx+0x143f>
9f0052f0:	73 70                	jae    9f005362 <__x86.get_pc_thunk.cx+0x144e>
9f0052f2:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0052f3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0052f6:	72 74                	jb     9f00536c <__x86.get_pc_thunk.cx+0x1458>
9f0052f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0052f9:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f0052fc:	74 6f                	je     9f00536d <__x86.get_pc_thunk.cx+0x1459>
9f0052fe:	61                   	popa   
9f0052ff:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f005302:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005303:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f005309:	54                   	push   esp
9f00530a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00530b:	58                   	pop    eax
9f00530c:	59                   	pop    ecx
9f00530d:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f005310:	76 65                	jbe    9f005377 <__x86.get_pc_thunk.cx+0x1463>
9f005312:	43                   	inc    ebx
9f005313:	75 72                	jne    9f005387 <__x86.get_pc_thunk.cx+0x1473>
9f005315:	73 6f                	jae    9f005386 <__x86.get_pc_thunk.cx+0x1472>
9f005317:	72 50                	jb     9f005369 <__x86.get_pc_thunk.cx+0x1455>
9f005319:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00531a:	73 69                	jae    9f005385 <__x86.get_pc_thunk.cx+0x1471>
9f00531c:	74 69                	je     9f005387 <__x86.get_pc_thunk.cx+0x1473>
9f00531e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00531f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005320:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f005323:	73 74                	jae    9f005399 <__x86.get_pc_thunk.cx+0x1485>
9f005325:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005326:	72 65                	jb     9f00538d <__x86.get_pc_thunk.cx+0x1479>
9f005328:	43                   	inc    ebx
9f005329:	75 72                	jne    9f00539d <__x86.get_pc_thunk.cx+0x1489>
9f00532b:	73 6f                	jae    9f00539c <__x86.get_pc_thunk.cx+0x1488>
9f00532d:	72 50                	jb     9f00537f <__x86.get_pc_thunk.cx+0x146b>
9f00532f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005330:	73 69                	jae    9f00539b <__x86.get_pc_thunk.cx+0x1487>
9f005332:	74 69                	je     9f00539d <__x86.get_pc_thunk.cx+0x1489>
9f005334:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005335:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005336:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f005339:	74 65                	je     9f0053a0 <__x86.get_pc_thunk.cx+0x148c>
9f00533b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00533c:	76 00                	jbe    9f00533e <__x86.get_pc_thunk.cx+0x142a>
9f00533e:	73 65                	jae    9f0053a5 <__x86.get_pc_thunk.cx+0x1491>
9f005340:	74 65                	je     9f0053a7 <__x86.get_pc_thunk.cx+0x1493>
9f005342:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005343:	76 00                	jbe    9f005345 <__x86.get_pc_thunk.cx+0x1431>
9f005345:	67                   	addr16
9f005346:	65                   	gs
9f005347:	74 64                	je     9f0053ad <__x86.get_pc_thunk.cx+0x1499>
9f005349:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
9f005350:	65 00 66 72          	add    BYTE PTR gs:[esi+0x72],ah
9f005354:	65 6f                	outs   dx,DWORD PTR gs:[esi]
9f005356:	70 65                	jo     9f0053bd <__x86.get_pc_thunk.cx+0x14a9>
9f005358:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005359:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f00535c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00535d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00535e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00535f:	63 00                	arpl   WORD PTR [eax],ax
9f005361:	72 65                	jb     9f0053c8 <__x86.get_pc_thunk.cx+0x14b4>
9f005363:	61                   	popa   
9f005364:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f005368:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f00536f:	6b 
9f005370:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f005373:	74 73                	je     9f0053e8 <__x86.get_pc_thunk.cx+0x14d4>
9f005375:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
9f005378:	73 45                	jae    9f0053bf <__x86.get_pc_thunk.cx+0x14ab>
9f00537a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00537b:	74 65                	je     9f0053e2 <__x86.get_pc_thunk.cx+0x14ce>
9f00537d:	72 5f                	jb     9f0053de <__x86.get_pc_thunk.cx+0x14ca>
9f00537f:	56                   	push   esi
9f005380:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f005385:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f005388:	74 63                	je     9f0053ed <__x86.get_pc_thunk.cx+0x14d9>
9f00538a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00538d:	74 63                	je     9f0053f2 <__x86.get_pc_thunk.cx+0x14de>
9f00538f:	68 61 72 00 67       	push   0x67007261
9f005394:	65                   	gs
9f005395:	74 73                	je     9f00540a <__x86.get_pc_thunk.cx+0x14f6>
9f005397:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f00539b:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f00539e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00539f:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f0053a6:	74 
9f0053a7:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f0053aa:	69 6e 74 66 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730066
9f0053b1:	65                   	gs
9f0053b2:	65                   	gs
9f0053b3:	70 00                	jo     9f0053b5 <__x86.get_pc_thunk.cx+0x14a1>
9f0053b5:	6d                   	ins    DWORD PTR es:[edi],dx
9f0053b6:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0053b7:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f0053be:	6e 
9f0053bf:	61                   	popa   
9f0053c0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0053c1:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f0053c4:	72 6b                	jb     9f005431 <__x86.get_pc_thunk.cx+0x151d>
9f0053c6:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f0053c9:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f0053cc:	65                   	gs
9f0053cd:	78 65                	js     9f005434 <__x86.get_pc_thunk.cx+0x1520>
9f0053cf:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f0053d2:	65                   	gs
9f0053d3:	78 65                	js     9f00543a <__x86.get_pc_thunk.cx+0x1526>
9f0053d5:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f0053d8:	77 61                	ja     9f00543b <__x86.get_pc_thunk.cx+0x1527>
9f0053da:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f0053e1:	78 
9f0053e2:	69 74 00 67 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x67],0x77637465
9f0053e9:	77 
9f0053ea:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f0053ee:	6c                   	ins    BYTE PTR es:[edi],dx
9f0053ef:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f0053f6:	69 
9f0053f7:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0053f8:	65                   	gs
9f0053f9:	54                   	push   esp
9f0053fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0053fb:	41                   	inc    ecx
9f0053fc:	72 67                	jb     9f005465 <__x86.get_pc_thunk.cx+0x1551>
9f0053fe:	76 00                	jbe    9f005400 <__x86.get_pc_thunk.cx+0x14ec>
9f005400:	74 65                	je     9f005467 <__x86.get_pc_thunk.cx+0x1553>
9f005402:	73 74                	jae    9f005478 <__x86.get_pc_thunk.cx+0x1564>
9f005404:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f005407:	61                   	popa   
9f005408:	70 00                	jo     9f00540a <__x86.get_pc_thunk.cx+0x14f6>
9f00540a:	72 65                	jb     9f005471 <__x86.get_pc_thunk.cx+0x155d>
9f00540c:	61                   	popa   
9f00540d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00540e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00540f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005410:	63 00                	arpl   WORD PTR [eax],ax
9f005412:	66                   	data16
9f005413:	72 65                	jb     9f00547a <__x86.get_pc_thunk.cx+0x1566>
9f005415:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f005419:	6d                   	ins    DWORD PTR es:[edi],dx
9f00541a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f00541d:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f005420:	6d                   	ins    DWORD PTR es:[edi],dx
9f005421:	73 65                	jae    9f005488 <__x86.get_pc_thunk.cx+0x1574>
9f005423:	74 00                	je     9f005425 <__x86.get_pc_thunk.cx+0x1511>
9f005425:	70 69                	jo     9f005490 <__x86.get_pc_thunk.cx+0x157c>
9f005427:	70 65                	jo     9f00548e <__x86.get_pc_thunk.cx+0x157a>
9f005429:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00542c:	73 65                	jae    9f005493 <__x86.get_pc_thunk.cx+0x157f>
9f00542e:	74 52                	je     9f005482 <__x86.get_pc_thunk.cx+0x156e>
9f005430:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005431:	77 00                	ja     9f005433 <__x86.get_pc_thunk.cx+0x151f>
9f005433:	73 74                	jae    9f0054a9 <__x86.get_pc_thunk.cx+0x1595>
9f005435:	72 63                	jb     9f00549a <__x86.get_pc_thunk.cx+0x1586>
9f005437:	61                   	popa   
9f005438:	74 00                	je     9f00543a <__x86.get_pc_thunk.cx+0x1526>
9f00543a:	73 74                	jae    9f0054b0 <__x86.get_pc_thunk.cx+0x159c>
9f00543c:	72 63                	jb     9f0054a1 <__x86.get_pc_thunk.cx+0x158d>
9f00543e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00543f:	70 00                	jo     9f005441 <__x86.get_pc_thunk.cx+0x152d>
9f005441:	73 74                	jae    9f0054b7 <__x86.get_pc_thunk.cx+0x15a3>
9f005443:	72 63                	jb     9f0054a8 <__x86.get_pc_thunk.cx+0x1594>
9f005445:	70 79                	jo     9f0054c0 <__x86.get_pc_thunk.cx+0x15ac>
9f005447:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00544a:	72 63                	jb     9f0054af <__x86.get_pc_thunk.cx+0x159b>
9f00544c:	70 79                	jo     9f0054c7 <__x86.get_pc_thunk.cx+0x15b3>
9f00544e:	63 00                	arpl   WORD PTR [eax],ax
9f005450:	73 74                	jae    9f0054c6 <__x86.get_pc_thunk.cx+0x15b2>
9f005452:	72 69                	jb     9f0054bd <__x86.get_pc_thunk.cx+0x15a9>
9f005454:	73 6e                	jae    9f0054c4 <__x86.get_pc_thunk.cx+0x15b0>
9f005456:	75 6d                	jne    9f0054c5 <__x86.get_pc_thunk.cx+0x15b1>
9f005458:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00545b:	72 6c                	jb     9f0054c9 <__x86.get_pc_thunk.cx+0x15b5>
9f00545d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f00545f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005462:	72 6e                	jb     9f0054d2 <__x86.get_pc_thunk.cx+0x15be>
9f005464:	6c                   	ins    BYTE PTR es:[edi],dx
9f005465:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f005467:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00546a:	72 6e                	jb     9f0054da <__x86.get_pc_thunk.cx+0x15c6>
9f00546c:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f00546f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005472:	72 6e                	jb     9f0054e2 <__x86.get_pc_thunk.cx+0x15ce>
9f005474:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f005477:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00547a:	72 74                	jb     9f0054f0 <__x86.get_pc_thunk.cx+0x15dc>
9f00547c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00547d:	75 6c                	jne    9f0054eb <__x86.get_pc_thunk.cx+0x15d7>
9f00547f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005482:	72 6c                	jb     9f0054f0 <__x86.get_pc_thunk.cx+0x15dc>
9f005484:	65                   	gs
9f005485:	66                   	data16
9f005486:	74 00                	je     9f005488 <__x86.get_pc_thunk.cx+0x1574>
9f005488:	73 74                	jae    9f0054fe <__x86.get_pc_thunk.cx+0x15ea>
9f00548a:	72 74                	jb     9f005500 <__x86.get_pc_thunk.cx+0x15ec>
9f00548c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00548d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00548e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005491:	72 74                	jb     9f005507 <__x86.get_pc_thunk.cx+0x15f3>
9f005493:	72 69                	jb     9f0054fe <__x86.get_pc_thunk.cx+0x15ea>
9f005495:	6d                   	ins    DWORD PTR es:[edi],dx
9f005496:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005499:	72 72                	jb     9f00550d <__x86.get_pc_thunk.cx+0x15f9>
9f00549b:	65                   	gs
9f00549c:	70 6c                	jo     9f00550a <__x86.get_pc_thunk.cx+0x15f6>
9f00549e:	61                   	popa   
9f00549f:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f0054a2:	73 74                	jae    9f005518 <__x86.get_pc_thunk.cx+0x1604>
9f0054a4:	72 73                	jb     9f005519 <__x86.get_pc_thunk.cx+0x1605>
9f0054a6:	74 72                	je     9f00551a <__x86.get_pc_thunk.cx+0x1606>
9f0054a8:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0054ab:	74 74                	je     9f005521 <__x86.get_pc_thunk.cx+0x160d>
9f0054ad:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f0054b4:	74 69                	je     9f00551f <__x86.get_pc_thunk.cx+0x160b>
9f0054b6:	6d                   	ins    DWORD PTR es:[edi],dx
9f0054b7:	65                   	gs
9f0054b8:	5f                   	pop    edi
9f0054b9:	72 00                	jb     9f0054bb <__x86.get_pc_thunk.cx+0x15a7>
9f0054bb:	6c                   	ins    BYTE PTR es:[edi],dx
9f0054bc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0054bd:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f0054c0:	74 69                	je     9f00552b <__x86.get_pc_thunk.cx+0x1617>
9f0054c2:	6d                   	ins    DWORD PTR es:[edi],dx
9f0054c3:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f0054c8:	61                   	popa   
9f0054c9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0054ca:	74 69                	je     9f005535 <__x86.get_pc_thunk.cx+0x1621>
9f0054cc:	6d                   	ins    DWORD PTR es:[edi],dx
9f0054cd:	65                   	gs
9f0054ce:	5f                   	pop    edi
9f0054cf:	72 00                	jb     9f0054d1 <__x86.get_pc_thunk.cx+0x15bd>
9f0054d1:	6d                   	ins    DWORD PTR es:[edi],dx
9f0054d2:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f0054d7:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0054da:	74 74                	je     9f005550 <__x86.get_pc_thunk.cx+0x163c>
9f0054dc:	69                   	.byte 0x69
9f0054dd:	6d                   	ins    DWORD PTR es:[edi],dx
9f0054de:	65                   	gs
	...

Disassembly of section .hash:

9f0054e0 <.hash>:
9f0054e0:	43                   	inc    ebx
9f0054e1:	00 00                	add    BYTE PTR [eax],al
9f0054e3:	00 44 00 00          	add    BYTE PTR [eax+eax*1+0x0],al
	...
9f0054f3:	00 1b                	add    BYTE PTR [ebx],bl
9f0054f5:	00 00                	add    BYTE PTR [eax],al
9f0054f7:	00 3e                	add    BYTE PTR [esi],bh
9f0054f9:	00 00                	add    BYTE PTR [eax],al
9f0054fb:	00 35 00 00 00 34    	add    BYTE PTR ds:0x34000000,dh
9f005501:	00 00                	add    BYTE PTR [eax],al
9f005503:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f005506:	00 00                	add    BYTE PTR [eax],al
9f005508:	13 00                	adc    eax,DWORD PTR [eax]
9f00550a:	00 00                	add    BYTE PTR [eax],al
9f00550c:	00 00                	add    BYTE PTR [eax],al
9f00550e:	00 00                	add    BYTE PTR [eax],al
9f005510:	10 00                	adc    BYTE PTR [eax],al
9f005512:	00 00                	add    BYTE PTR [eax],al
9f005514:	22 00                	and    al,BYTE PTR [eax]
9f005516:	00 00                	add    BYTE PTR [eax],al
9f005518:	00 00                	add    BYTE PTR [eax],al
9f00551a:	00 00                	add    BYTE PTR [eax],al
9f00551c:	3d 00 00 00 18       	cmp    eax,0x18000000
9f005521:	00 00                	add    BYTE PTR [eax],al
9f005523:	00 30                	add    BYTE PTR [eax],dh
	...
9f00552d:	00 00                	add    BYTE PTR [eax],al
9f00552f:	00 2f                	add    BYTE PTR [edi],ch
9f005531:	00 00                	add    BYTE PTR [eax],al
9f005533:	00 11                	add    BYTE PTR [ecx],dl
9f005535:	00 00                	add    BYTE PTR [eax],al
9f005537:	00 00                	add    BYTE PTR [eax],al
9f005539:	00 00                	add    BYTE PTR [eax],al
9f00553b:	00 2d 00 00 00 39    	add    BYTE PTR ds:0x39000000,ch
9f005541:	00 00                	add    BYTE PTR [eax],al
9f005543:	00 00                	add    BYTE PTR [eax],al
9f005545:	00 00                	add    BYTE PTR [eax],al
9f005547:	00 29                	add    BYTE PTR [ecx],ch
9f005549:	00 00                	add    BYTE PTR [eax],al
9f00554b:	00 41 00             	add    BYTE PTR [ecx+0x0],al
	...
9f005556:	00 00                	add    BYTE PTR [eax],al
9f005558:	1a 00                	sbb    al,BYTE PTR [eax]
9f00555a:	00 00                	add    BYTE PTR [eax],al
9f00555c:	00 00                	add    BYTE PTR [eax],al
9f00555e:	00 00                	add    BYTE PTR [eax],al
9f005560:	3f                   	aas    
9f005561:	00 00                	add    BYTE PTR [eax],al
9f005563:	00 00                	add    BYTE PTR [eax],al
9f005565:	00 00                	add    BYTE PTR [eax],al
9f005567:	00 19                	add    BYTE PTR [ecx],bl
9f005569:	00 00                	add    BYTE PTR [eax],al
9f00556b:	00 1e                	add    BYTE PTR [esi],bl
9f00556d:	00 00                	add    BYTE PTR [eax],al
9f00556f:	00 15 00 00 00 28    	add    BYTE PTR ds:0x28000000,dl
9f005575:	00 00                	add    BYTE PTR [eax],al
9f005577:	00 00                	add    BYTE PTR [eax],al
9f005579:	00 00                	add    BYTE PTR [eax],al
9f00557b:	00 32                	add    BYTE PTR [edx],dh
9f00557d:	00 00                	add    BYTE PTR [eax],al
9f00557f:	00 08                	add    BYTE PTR [eax],cl
9f005581:	00 00                	add    BYTE PTR [eax],al
9f005583:	00 26                	add    BYTE PTR [esi],ah
9f005585:	00 00                	add    BYTE PTR [eax],al
9f005587:	00 33                	add    BYTE PTR [ebx],dh
9f005589:	00 00                	add    BYTE PTR [eax],al
9f00558b:	00 3b                	add    BYTE PTR [ebx],bh
9f00558d:	00 00                	add    BYTE PTR [eax],al
9f00558f:	00 42 00             	add    BYTE PTR [edx+0x0],al
9f005592:	00 00                	add    BYTE PTR [eax],al
9f005594:	27                   	daa    
9f005595:	00 00                	add    BYTE PTR [eax],al
9f005597:	00 3c 00             	add    BYTE PTR [eax+eax*1],bh
9f00559a:	00 00                	add    BYTE PTR [eax],al
9f00559c:	3a 00                	cmp    al,BYTE PTR [eax]
9f00559e:	00 00                	add    BYTE PTR [eax],al
9f0055a0:	1d 00 00 00 00       	sbb    eax,0x0
	...
9f0055b1:	00 00                	add    BYTE PTR [eax],al
9f0055b3:	00 36                	add    BYTE PTR [esi],dh
	...
9f0055bd:	00 00                	add    BYTE PTR [eax],al
9f0055bf:	00 31                	add    BYTE PTR [ecx],dh
9f0055c1:	00 00                	add    BYTE PTR [eax],al
9f0055c3:	00 00                	add    BYTE PTR [eax],al
9f0055c5:	00 00                	add    BYTE PTR [eax],al
9f0055c7:	00 0a                	add    BYTE PTR [edx],cl
9f0055c9:	00 00                	add    BYTE PTR [eax],al
9f0055cb:	00 2b                	add    BYTE PTR [ebx],ch
9f0055cd:	00 00                	add    BYTE PTR [eax],al
9f0055cf:	00 00                	add    BYTE PTR [eax],al
9f0055d1:	00 00                	add    BYTE PTR [eax],al
9f0055d3:	00 38                	add    BYTE PTR [eax],bh
9f0055d5:	00 00                	add    BYTE PTR [eax],al
9f0055d7:	00 00                	add    BYTE PTR [eax],al
9f0055d9:	00 00                	add    BYTE PTR [eax],al
9f0055db:	00 43 00             	add    BYTE PTR [ebx+0x0],al
9f0055de:	00 00                	add    BYTE PTR [eax],al
9f0055e0:	0d 00 00 00 2c       	or     eax,0x2c000000
9f0055e5:	00 00                	add    BYTE PTR [eax],al
9f0055e7:	00 12                	add    BYTE PTR [edx],dl
	...
9f00562d:	00 00                	add    BYTE PTR [eax],al
9f00562f:	00 01                	add    BYTE PTR [ecx],al
	...
9f005645:	00 00                	add    BYTE PTR [eax],al
9f005647:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
	...
9f005652:	00 00                	add    BYTE PTR [eax],al
9f005654:	06                   	push   es
	...
9f00565d:	00 00                	add    BYTE PTR [eax],al
9f00565f:	00 05 00 00 00 0b    	add    BYTE PTR ds:0xb000000,al
9f005665:	00 00                	add    BYTE PTR [eax],al
9f005667:	00 00                	add    BYTE PTR [eax],al
9f005669:	00 00                	add    BYTE PTR [eax],al
9f00566b:	00 16                	add    BYTE PTR [esi],dl
9f00566d:	00 00                	add    BYTE PTR [eax],al
9f00566f:	00 07                	add    BYTE PTR [edi],al
	...
9f005679:	00 00                	add    BYTE PTR [eax],al
9f00567b:	00 09                	add    BYTE PTR [ecx],cl
9f00567d:	00 00                	add    BYTE PTR [eax],al
9f00567f:	00 1f                	add    BYTE PTR [edi],bl
9f005681:	00 00                	add    BYTE PTR [eax],al
9f005683:	00 03                	add    BYTE PTR [ebx],al
9f005685:	00 00                	add    BYTE PTR [eax],al
9f005687:	00 00                	add    BYTE PTR [eax],al
9f005689:	00 00                	add    BYTE PTR [eax],al
9f00568b:	00 23                	add    BYTE PTR [ebx],ah
9f00568d:	00 00                	add    BYTE PTR [eax],al
9f00568f:	00 00                	add    BYTE PTR [eax],al
9f005691:	00 00                	add    BYTE PTR [eax],al
9f005693:	00 25 00 00 00 00    	add    BYTE PTR ds:0x0,ah
	...
9f0056a9:	00 00                	add    BYTE PTR [eax],al
9f0056ab:	00 0f                	add    BYTE PTR [edi],cl
9f0056ad:	00 00                	add    BYTE PTR [eax],al
9f0056af:	00 2a                	add    BYTE PTR [edx],ch
9f0056b1:	00 00                	add    BYTE PTR [eax],al
9f0056b3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
	...
9f0056be:	00 00                	add    BYTE PTR [eax],al
9f0056c0:	14 00                	adc    al,0x0
9f0056c2:	00 00                	add    BYTE PTR [eax],al
9f0056c4:	17                   	pop    ss
9f0056c5:	00 00                	add    BYTE PTR [eax],al
9f0056c7:	00 2e                	add    BYTE PTR [esi],ch
	...
9f0056d1:	00 00                	add    BYTE PTR [eax],al
9f0056d3:	00 21                	add    BYTE PTR [ecx],ah
9f0056d5:	00 00                	add    BYTE PTR [eax],al
9f0056d7:	00 00                	add    BYTE PTR [eax],al
9f0056d9:	00 00                	add    BYTE PTR [eax],al
9f0056db:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0056de:	00 00                	add    BYTE PTR [eax],al
9f0056e0:	00 00                	add    BYTE PTR [eax],al
9f0056e2:	00 00                	add    BYTE PTR [eax],al
9f0056e4:	37                   	aaa    
9f0056e5:	00 00                	add    BYTE PTR [eax],al
9f0056e7:	00 02                	add    BYTE PTR [edx],al
9f0056e9:	00 00                	add    BYTE PTR [eax],al
9f0056eb:	00 20                	add    BYTE PTR [eax],ah
	...
9f0056f5:	00 00                	add    BYTE PTR [eax],al
9f0056f7:	00 0e                	add    BYTE PTR [esi],cl
9f0056f9:	00 00                	add    BYTE PTR [eax],al
9f0056fb:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f0056fe:	00 00                	add    BYTE PTR [eax],al
9f005700:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f005704 <.eh_frame>:
9f005704:	14 00                	adc    al,0x0
9f005706:	00 00                	add    BYTE PTR [eax],al
9f005708:	00 00                	add    BYTE PTR [eax],al
9f00570a:	00 00                	add    BYTE PTR [eax],al
9f00570c:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f00570f:	00 01                	add    BYTE PTR [ecx],al
9f005711:	7c 08                	jl     9f00571b <__x86.get_pc_thunk.cx+0x1807>
9f005713:	01 1b                	add    DWORD PTR [ebx],ebx
9f005715:	0c 04                	or     al,0x4
9f005717:	04 88                	add    al,0x88
9f005719:	01 00                	add    DWORD PTR [eax],eax
9f00571b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00571e:	00 00                	add    BYTE PTR [eax],al
9f005720:	1c 00                	sbb    al,0x0
9f005722:	00 00                	add    BYTE PTR [eax],al
9f005724:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005725:	e7 ff                	out    0xff,eax
9f005727:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f00572a:	00 00                	add    BYTE PTR [eax],al
9f00572c:	00 0e                	add    BYTE PTR [esi],cl
9f00572e:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f005731:	0c 4a                	or     al,0x4a
9f005733:	0f 0b                	ud2    
9f005735:	74 04                	je     9f00573b <__x86.get_pc_thunk.cx+0x1827>
9f005737:	78 00                	js     9f005739 <__x86.get_pc_thunk.cx+0x1825>
9f005739:	3f                   	aas    
9f00573a:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f00573c:	2a 32                	sub    dh,BYTE PTR [edx]
9f00573e:	24 22                	and    al,0x22
9f005740:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f005744 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f005744:	01 1b                	add    DWORD PTR [ebx],ebx
9f005746:	03 3b                	add    edi,DWORD PTR [ebx]
9f005748:	d0 e7                	shl    bh,1
9f00574a:	ff                   	(bad)  
9f00574b:	ff 71 00             	push   DWORD PTR [ecx+0x0]
9f00574e:	00 00                	add    BYTE PTR [eax],al
9f005750:	bc a8 ff ff ec       	mov    esp,0xecffffa8
9f005755:	e7 ff                	out    0xff,eax
9f005757:	ff f4                	push   esp
9f005759:	a8 ff                	test   al,0xff
9f00575b:	ff 0c e8             	dec    DWORD PTR [eax+ebp*8]
9f00575e:	ff                   	(bad)  
9f00575f:	ff 2c a9             	jmp    FWORD PTR [ecx+ebp*4]
9f005762:	ff                   	(bad)  
9f005763:	ff 40 e8             	inc    DWORD PTR [eax-0x18]
9f005766:	ff                   	(bad)  
9f005767:	ff 81 a9 ff ff 68    	inc    DWORD PTR [ecx+0x68ffffa9]
9f00576d:	e8 ff ff d8 a9       	call   48d95771 <sysEnter_Vector+0x48c65771>
9f005772:	ff                   	(bad)  
9f005773:	ff 90 e8 ff ff 70    	call   DWORD PTR [eax+0x70ffffe8]
9f005779:	aa                   	stos   BYTE PTR es:[edi],al
9f00577a:	ff                   	(bad)  
9f00577b:	ff cc                	dec    esp
9f00577d:	e8 ff ff e7 aa       	call   49e85781 <sysEnter_Vector+0x49d55781>
9f005782:	ff                   	(bad)  
9f005783:	ff f0                	push   eax
9f005785:	e8 ff ff a2 ab       	call   4aa35789 <sysEnter_Vector+0x4a905789>
9f00578a:	ff                   	(bad)  
9f00578b:	ff 14 e9             	call   DWORD PTR [ecx+ebp*8]
9f00578e:	ff                   	(bad)  
9f00578f:	ff 5d ac             	call   FWORD PTR [ebp-0x54]
9f005792:	ff                   	(bad)  
9f005793:	ff                   	(bad)  
9f005794:	38 e9                	cmp    cl,ch
9f005796:	ff                   	(bad)  
9f005797:	ff                   	(bad)  
9f005798:	bc ac ff ff 58       	mov    esp,0x58ffffac
9f00579d:	e9 ff ff 76 ad       	jmp    4c7757a1 <sysEnter_Vector+0x4c6457a1>
9f0057a2:	ff                   	(bad)  
9f0057a3:	ff                   	(bad)  
9f0057a4:	7c e9                	jl     9f00578f <__GNU_EH_FRAME_HDR+0x4b>
9f0057a6:	ff                   	(bad)  
9f0057a7:	ff d0                	call   eax
9f0057a9:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f0057aa:	ff                   	(bad)  
9f0057ab:	ff a0 e9 ff ff 2c    	jmp    DWORD PTR [eax+0x2cffffe9]
9f0057b1:	ae                   	scas   al,BYTE PTR es:[edi]
9f0057b2:	ff                   	(bad)  
9f0057b3:	ff c4                	inc    esp
9f0057b5:	e9 ff ff d6 ae       	jmp    4dd757b9 <sysEnter_Vector+0x4dc457b9>
9f0057ba:	ff                   	(bad)  
9f0057bb:	ff e8                	jmp    <internal disassembler error>
9f0057bd:	e9 ff ff 98 b0       	jmp    4f9957c1 <sysEnter_Vector+0x4f8657c1>
9f0057c2:	ff                   	(bad)  
9f0057c3:	ff 0c ea             	dec    DWORD PTR [edx+ebp*8]
9f0057c6:	ff                   	(bad)  
9f0057c7:	ff c9                	dec    ecx
9f0057c9:	b0 ff                	mov    al,0xff
9f0057cb:	ff 30                	push   DWORD PTR [eax]
9f0057cd:	ea ff ff f6 b0 ff ff 	jmp    0xffff:0xb0f6ffff
9f0057d4:	54                   	push   esp
9f0057d5:	ea ff ff 53 b1 ff ff 	jmp    0xffff:0xb153ffff
9f0057dc:	78 ea                	js     9f0057c8 <__GNU_EH_FRAME_HDR+0x84>
9f0057de:	ff                   	(bad)  
9f0057df:	ff ef                	jmp    <internal disassembler error>
9f0057e1:	b1 ff                	mov    cl,0xff
9f0057e3:	ff a0 ea ff ff 19    	jmp    DWORD PTR [eax+0x19ffffea]
9f0057e9:	b2 ff                	mov    dl,0xff
9f0057eb:	ff c4                	inc    esp
9f0057ed:	ea ff ff 4e b2 ff ff 	jmp    0xffff:0xb24effff
9f0057f4:	ec                   	in     al,dx
9f0057f5:	ea ff ff 83 b2 ff ff 	jmp    0xffff:0xb283ffff
9f0057fc:	14 eb                	adc    al,0xeb
9f0057fe:	ff                   	(bad)  
9f0057ff:	ff a9 b2 ff ff 34    	jmp    FWORD PTR [ecx+0x34ffffb2]
9f005805:	eb ff                	jmp    9f005806 <__GNU_EH_FRAME_HDR+0xc2>
9f005807:	ff d8                	call   <internal disassembler error>
9f005809:	b2 ff                	mov    dl,0xff
9f00580b:	ff 58 eb             	call   FWORD PTR [eax-0x15]
9f00580e:	ff                   	(bad)  
9f00580f:	ff                   	(bad)  
9f005810:	fe                   	(bad)  
9f005811:	b2 ff                	mov    dl,0xff
9f005813:	ff                   	(bad)  
9f005814:	7c eb                	jl     9f005801 <__GNU_EH_FRAME_HDR+0xbd>
9f005816:	ff                   	(bad)  
9f005817:	ff 41 b3             	inc    DWORD PTR [ecx-0x4d]
9f00581a:	ff                   	(bad)  
9f00581b:	ff a0 eb ff ff 84    	jmp    DWORD PTR [eax-0x7b000015]
9f005821:	b3 ff                	mov    bl,0xff
9f005823:	ff c4                	inc    esp
9f005825:	eb ff                	jmp    9f005826 <__GNU_EH_FRAME_HDR+0xe2>
9f005827:	ff 40 b4             	inc    DWORD PTR [eax-0x4c]
9f00582a:	ff                   	(bad)  
9f00582b:	ff e8                	jmp    <internal disassembler error>
9f00582d:	eb ff                	jmp    9f00582e <__GNU_EH_FRAME_HDR+0xea>
9f00582f:	ff                   	(bad)  
9f005830:	7a b4                	jp     9f0057e6 <__GNU_EH_FRAME_HDR+0xa2>
9f005832:	ff                   	(bad)  
9f005833:	ff 10                	call   DWORD PTR [eax]
9f005835:	ec                   	in     al,dx
9f005836:	ff                   	(bad)  
9f005837:	ff b6 b4 ff ff 38    	push   DWORD PTR [esi+0x38ffffb4]
9f00583d:	ec                   	in     al,dx
9f00583e:	ff                   	(bad)  
9f00583f:	ff f4                	push   esp
9f005841:	b4 ff                	mov    ah,0xff
9f005843:	ff 60 ec             	jmp    DWORD PTR [eax-0x14]
9f005846:	ff                   	(bad)  
9f005847:	ff 34 b5 ff ff 88 ec 	push   DWORD PTR [esi*4-0x13770001]
9f00584e:	ff                   	(bad)  
9f00584f:	ff 76 b5             	push   DWORD PTR [esi-0x4b]
9f005852:	ff                   	(bad)  
9f005853:	ff b0 ec ff ff 35    	push   DWORD PTR [eax+0x35ffffec]
9f005859:	b6 ff                	mov    dh,0xff
9f00585b:	ff d4                	call   esp
9f00585d:	ec                   	in     al,dx
9f00585e:	ff                   	(bad)  
9f00585f:	ff 58 b6             	call   FWORD PTR [eax-0x4a]
9f005862:	ff                   	(bad)  
9f005863:	ff                   	(bad)  
9f005864:	f8                   	clc    
9f005865:	ec                   	in     al,dx
9f005866:	ff                   	(bad)  
9f005867:	ff b1 b6 ff ff 1c    	push   DWORD PTR [ecx+0x1cffffb6]
9f00586d:	ed                   	in     eax,dx
9f00586e:	ff                   	(bad)  
9f00586f:	ff 05 b7 ff ff 40    	inc    DWORD PTR ds:0x40ffffb7
9f005875:	ed                   	in     eax,dx
9f005876:	ff                   	(bad)  
9f005877:	ff 59 b7             	call   FWORD PTR [ecx-0x49]
9f00587a:	ff                   	(bad)  
9f00587b:	ff 64 ed ff          	jmp    DWORD PTR [ebp+ebp*8-0x1]
9f00587f:	ff 8d b7 ff ff 84    	dec    DWORD PTR [ebp-0x7b000049]
9f005885:	ed                   	in     eax,dx
9f005886:	ff                   	(bad)  
9f005887:	ff c4                	inc    esp
9f005889:	b7 ff                	mov    bh,0xff
9f00588b:	ff a4 ed ff ff 36 b8 	jmp    DWORD PTR [ebp+ebp*8-0x47c90001]
9f005892:	ff                   	(bad)  
9f005893:	ff cc                	dec    esp
9f005895:	ed                   	in     eax,dx
9f005896:	ff                   	(bad)  
9f005897:	ff 53 b8             	call   DWORD PTR [ebx-0x48]
9f00589a:	ff                   	(bad)  
9f00589b:	ff ec                	jmp    <internal disassembler error>
9f00589d:	ed                   	in     eax,dx
9f00589e:	ff                   	(bad)  
9f00589f:	ff                   	(bad)  
9f0058a0:	7c b8                	jl     9f00585a <__GNU_EH_FRAME_HDR+0x116>
9f0058a2:	ff                   	(bad)  
9f0058a3:	ff 0c ee             	dec    DWORD PTR [esi+ebp*8]
9f0058a6:	ff                   	(bad)  
9f0058a7:	ff a5 b8 ff ff 2c    	jmp    DWORD PTR [ebp+0x2cffffb8]
9f0058ad:	ee                   	out    dx,al
9f0058ae:	ff                   	(bad)  
9f0058af:	ff f1                	push   ecx
9f0058b1:	b8 ff ff 4c ee       	mov    eax,0xee4cffff
9f0058b6:	ff                   	(bad)  
9f0058b7:	ff e5                	jmp    ebp
9f0058b9:	ba ff ff 70 ee       	mov    edx,0xee70ffff
9f0058be:	ff                   	(bad)  
9f0058bf:	ff 34 bb             	push   DWORD PTR [ebx+edi*4]
9f0058c2:	ff                   	(bad)  
9f0058c3:	ff 90 ee ff ff 50    	call   DWORD PTR [eax+0x50ffffee]
9f0058c9:	bb ff ff b0 ee       	mov    ebx,0xeeb0ffff
9f0058ce:	ff                   	(bad)  
9f0058cf:	ff 70 bb             	push   DWORD PTR [eax-0x45]
9f0058d2:	ff                   	(bad)  
9f0058d3:	ff d0                	call   eax
9f0058d5:	ee                   	out    dx,al
9f0058d6:	ff                   	(bad)  
9f0058d7:	ff 90 bb ff ff f0    	call   DWORD PTR [eax-0xf000045]
9f0058dd:	ee                   	out    dx,al
9f0058de:	ff                   	(bad)  
9f0058df:	ff d4                	call   esp
9f0058e1:	bc ff ff 10 ef       	mov    esp,0xef10ffff
9f0058e6:	ff                   	(bad)  
9f0058e7:	ff f4                	push   esp
9f0058e9:	bc ff ff 30 ef       	mov    esp,0xef30ffff
9f0058ee:	ff                   	(bad)  
9f0058ef:	ff f1                	push   ecx
9f0058f1:	bf ff ff 5c ef       	mov    edi,0xef5cffff
9f0058f6:	ff                   	(bad)  
9f0058f7:	ff 14 c0             	call   DWORD PTR [eax+eax*8]
9f0058fa:	ff                   	(bad)  
9f0058fb:	ff                   	(bad)  
9f0058fc:	7c ef                	jl     9f0058ed <__GNU_EH_FRAME_HDR+0x1a9>
9f0058fe:	ff                   	(bad)  
9f0058ff:	ff 30                	push   DWORD PTR [eax]
9f005901:	c0 ff ff             	sar    bh,0xff
9f005904:	9c                   	pushf  
9f005905:	ef                   	out    dx,eax
9f005906:	ff                   	(bad)  
9f005907:	ff a4 c0 ff ff c0 ef 	jmp    DWORD PTR [eax+eax*8-0x103f0001]
9f00590e:	ff                   	(bad)  
9f00590f:	ff 10                	call   DWORD PTR [eax]
9f005911:	c1 ff ff             	sar    edi,0xff
9f005914:	e4 ef                	in     al,0xef
9f005916:	ff                   	(bad)  
9f005917:	ff 97 c1 ff ff 04    	call   DWORD PTR [edi+0x4ffffc1]
9f00591d:	f0 ff                	lock (bad) 
9f00591f:	ff ee                	jmp    <internal disassembler error>
9f005921:	c1 ff ff             	sar    edi,0xff
9f005924:	24 f0                	and    al,0xf0
9f005926:	ff                   	(bad)  
9f005927:	ff c2                	inc    edx
9f005929:	c3                   	ret    
9f00592a:	ff                   	(bad)  
9f00592b:	ff 48 f0             	dec    DWORD PTR [eax-0x10]
9f00592e:	ff                   	(bad)  
9f00592f:	ff e2                	jmp    edx
9f005931:	c3                   	ret    
9f005932:	ff                   	(bad)  
9f005933:	ff 68 f0             	jmp    FWORD PTR [eax-0x10]
9f005936:	ff                   	(bad)  
9f005937:	ff 67 c4             	jmp    DWORD PTR [edi-0x3c]
9f00593a:	ff                   	(bad)  
9f00593b:	ff 8c f0 ff ff 8a c4 	dec    DWORD PTR [eax+esi*8-0x3b750001]
9f005942:	ff                   	(bad)  
9f005943:	ff ac f0 ff ff a5 c4 	jmp    FWORD PTR [eax+esi*8-0x3b5a0001]
9f00594a:	ff                   	(bad)  
9f00594b:	ff cc                	dec    esp
9f00594d:	f0 ff                	lock (bad) 
9f00594f:	ff d8                	call   <internal disassembler error>
9f005951:	c4                   	(bad)  
9f005952:	ff                   	(bad)  
9f005953:	ff f0                	push   eax
9f005955:	f0 ff                	lock (bad) 
9f005957:	ff 73 c6             	push   DWORD PTR [ebx-0x3a]
9f00595a:	ff                   	(bad)  
9f00595b:	ff 10                	call   DWORD PTR [eax]
9f00595d:	f1                   	icebp  
9f00595e:	ff                   	(bad)  
9f00595f:	ff 94 c6 ff ff 30 f1 	call   DWORD PTR [esi+eax*8-0xecf0001]
9f005966:	ff                   	(bad)  
9f005967:	ff 5b c7             	call   FWORD PTR [ebx-0x39]
9f00596a:	ff                   	(bad)  
9f00596b:	ff 50 f1             	call   DWORD PTR [eax-0xf]
9f00596e:	ff                   	(bad)  
9f00596f:	ff                   	(bad)  
9f005970:	7c c7                	jl     9f005939 <__GNU_EH_FRAME_HDR+0x1f5>
9f005972:	ff                   	(bad)  
9f005973:	ff 70 f1             	push   DWORD PTR [eax-0xf]
9f005976:	ff                   	(bad)  
9f005977:	ff a8 c7 ff ff 94    	jmp    FWORD PTR [eax-0x6b000039]
9f00597d:	f1                   	icebp  
9f00597e:	ff                   	(bad)  
9f00597f:	ff 07                	inc    DWORD PTR [edi]
9f005981:	c8 ff ff b8          	enter  0xffff,0xb8
9f005985:	f1                   	icebp  
9f005986:	ff                   	(bad)  
9f005987:	ff 45 ca             	inc    DWORD PTR [ebp-0x36]
9f00598a:	ff                   	(bad)  
9f00598b:	ff e4                	jmp    esp
9f00598d:	f1                   	icebp  
9f00598e:	ff                   	(bad)  
9f00598f:	ff 8d ce ff ff 08    	dec    DWORD PTR [ebp+0x8ffffce]
9f005995:	f2 ff                	repnz (bad) 
9f005997:	ff c0                	inc    eax
9f005999:	ce                   	into   
9f00599a:	ff                   	(bad)  
9f00599b:	ff 28                	jmp    FWORD PTR [eax]
9f00599d:	f2 ff                	repnz (bad) 
9f00599f:	ff 44 cf ff          	inc    DWORD PTR [edi+ecx*8-0x1]
9f0059a3:	ff 4c f2 ff          	dec    DWORD PTR [edx+esi*8-0x1]
9f0059a7:	ff 82 cf ff ff 70    	inc    DWORD PTR [edx+0x70ffffcf]
9f0059ad:	f2 ff                	repnz (bad) 
9f0059af:	ff c0                	inc    eax
9f0059b1:	cf                   	iret   
9f0059b2:	ff                   	(bad)  
9f0059b3:	ff 94 f2 ff ff 30 d0 	call   DWORD PTR [edx+esi*8-0x2fcf0001]
9f0059ba:	ff                   	(bad)  
9f0059bb:	ff b4 f2 ff ff 90 d0 	push   DWORD PTR [edx+esi*8-0x2f6f0001]
9f0059c2:	ff                   	(bad)  
9f0059c3:	ff dc                	call   <internal disassembler error>
9f0059c5:	f2 ff                	repnz (bad) 
9f0059c7:	ff d0                	call   eax
9f0059c9:	d0 ff                	sar    bh,1
9f0059cb:	ff                   	(bad)  
9f0059cc:	fc                   	cld    
9f0059cd:	f2 ff                	repnz (bad) 
9f0059cf:	ff 10                	call   DWORD PTR [eax]
9f0059d1:	d1 ff                	sar    edi,1
9f0059d3:	ff 1c f3             	call   FWORD PTR [ebx+esi*8]
9f0059d6:	ff                   	(bad)  
9f0059d7:	ff 58 d1             	call   FWORD PTR [eax-0x2f]
9f0059da:	ff                   	(bad)  
9f0059db:	ff                   	(bad)  
9f0059dc:	3c f3                	cmp    al,0xf3
9f0059de:	ff                   	(bad)  
9f0059df:	ff 88 d1 ff ff 5c    	dec    DWORD PTR [eax+0x5cffffd1]
9f0059e5:	f3 ff                	repz (bad) 
9f0059e7:	ff e4                	jmp    esp
9f0059e9:	d1 ff                	sar    edi,1
9f0059eb:	ff                   	(bad)  
9f0059ec:	7c f3                	jl     9f0059e1 <__GNU_EH_FRAME_HDR+0x29d>
9f0059ee:	ff                   	(bad)  
9f0059ef:	ff 15 d2 ff ff 9c    	call   DWORD PTR ds:0x9cffffd2
9f0059f5:	f3 ff                	repz (bad) 
9f0059f7:	ff 2f                	jmp    FWORD PTR [edi]
9f0059f9:	d2 ff                	sar    bh,cl
9f0059fb:	ff                   	(bad)  
9f0059fc:	bc f3 ff ff 68       	mov    esp,0x68fffff3
9f005a01:	d2 ff                	sar    bh,cl
9f005a03:	ff dc                	call   <internal disassembler error>
9f005a05:	f3 ff                	repz (bad) 
9f005a07:	ff 88 d2 ff ff fc    	dec    DWORD PTR [eax-0x300002e]
9f005a0d:	f3 ff                	repz (bad) 
9f005a0f:	ff ef                	jmp    <internal disassembler error>
9f005a11:	d2 ff                	sar    bh,cl
9f005a13:	ff 1c f4             	call   FWORD PTR [esp+esi*8]
9f005a16:	ff                   	(bad)  
9f005a17:	ff 58 d3             	call   FWORD PTR [eax-0x2d]
9f005a1a:	ff                   	(bad)  
9f005a1b:	ff                   	(bad)  
9f005a1c:	3c f4                	cmp    al,0xf4
9f005a1e:	ff                   	(bad)  
9f005a1f:	ff                   	(bad)  
9f005a20:	b8 d3 ff ff 5c       	mov    eax,0x5cffffd3
9f005a25:	f4                   	hlt    
9f005a26:	ff                   	(bad)  
9f005a27:	ff d8                	call   <internal disassembler error>
9f005a29:	d3 ff                	sar    edi,cl
9f005a2b:	ff                   	(bad)  
9f005a2c:	7c f4                	jl     9f005a22 <__GNU_EH_FRAME_HDR+0x2de>
9f005a2e:	ff                   	(bad)  
9f005a2f:	ff 58 d5             	call   FWORD PTR [eax-0x2b]
9f005a32:	ff                   	(bad)  
9f005a33:	ff ac f4 ff ff 78 d5 	jmp    FWORD PTR [esp+esi*8-0x2a870001]
9f005a3a:	ff                   	(bad)  
9f005a3b:	ff cc                	dec    esp
9f005a3d:	f4                   	hlt    
9f005a3e:	ff                   	(bad)  
9f005a3f:	ff 14 d7             	call   DWORD PTR [edi+edx*8]
9f005a42:	ff                   	(bad)  
9f005a43:	ff                   	(bad)  
9f005a44:	fc                   	cld    
9f005a45:	f4                   	hlt    
9f005a46:	ff                   	(bad)  
9f005a47:	ff aa d7 ff ff 20    	jmp    FWORD PTR [edx+0x20ffffd7]
9f005a4d:	f5                   	cmc    
9f005a4e:	ff                   	(bad)  
9f005a4f:	ff cc                	dec    esp
9f005a51:	d7                   	xlat   BYTE PTR ds:[ebx]
9f005a52:	ff                   	(bad)  
9f005a53:	ff 40 f5             	inc    DWORD PTR [eax-0xb]
9f005a56:	ff                   	(bad)  
9f005a57:	ff 0f                	dec    DWORD PTR [edi]
9f005a59:	d9 ff                	fcos   
9f005a5b:	ff 6c f5 ff          	jmp    FWORD PTR [ebp+esi*8-0x1]
9f005a5f:	ff                   	(bad)  
9f005a60:	38 d9                	cmp    cl,bl
9f005a62:	ff                   	(bad)  
9f005a63:	ff 8c f5 ff ff d6 d9 	dec    DWORD PTR [ebp+esi*8-0x26290001]
9f005a6a:	ff                   	(bad)  
9f005a6b:	ff b4 f5 ff ff 44 da 	push   DWORD PTR [ebp+esi*8-0x25bb0001]
9f005a72:	ff                   	(bad)  
9f005a73:	ff dc                	call   <internal disassembler error>
9f005a75:	f5                   	cmc    
9f005a76:	ff                   	(bad)  
9f005a77:	ff 64 da ff          	jmp    DWORD PTR [edx+ebx*8-0x1]
9f005a7b:	ff                   	(bad)  
9f005a7c:	fc                   	cld    
9f005a7d:	f5                   	cmc    
9f005a7e:	ff                   	(bad)  
9f005a7f:	ff a8 da ff ff 24    	jmp    FWORD PTR [eax+0x24ffffda]
9f005a85:	f6 ff                	idiv   bh
9f005a87:	ff c1                	inc    ecx
9f005a89:	dd ff                	(bad)  
9f005a8b:	ff 4c f6 ff          	dec    DWORD PTR [esi+esi*8-0x1]
9f005a8f:	ff de                	call   <internal disassembler error>
9f005a91:	dd ff                	(bad)  
9f005a93:	ff 6c f6 ff          	jmp    FWORD PTR [esi+esi*8-0x1]
9f005a97:	ff 24 de             	jmp    DWORD PTR [esi+ebx*8]
9f005a9a:	ff                   	(bad)  
9f005a9b:	ff 90 f6 ff ff 59    	call   DWORD PTR [eax+0x59fffff6]
9f005aa1:	de ff                	fdivp  st(7),st
9f005aa3:	ff b0 f6 ff ff 76    	push   DWORD PTR [eax+0x76fffff6]
9f005aa9:	de ff                	fdivp  st(7),st
9f005aab:	ff d0                	call   eax
9f005aad:	f6 ff                	idiv   bh
9f005aaf:	ff cd                	dec    ebp
9f005ab1:	e6 ff                	out    0xff,al
9f005ab3:	ff 00                	inc    DWORD PTR [eax]
9f005ab5:	f7 ff                	idiv   edi
9f005ab7:	ff                   	(bad)  
9f005ab8:	3a e7                	cmp    ah,bh
9f005aba:	ff                   	(bad)  
9f005abb:	ff 28                	jmp    FWORD PTR [eax]
9f005abd:	f7 ff                	idiv   edi
9f005abf:	ff                   	(bad)  
9f005ac0:	7b e7                	jnp    9f005aa9 <__GNU_EH_FRAME_HDR+0x365>
9f005ac2:	ff                   	(bad)  
9f005ac3:	ff 2c e8             	jmp    FWORD PTR [eax+ebp*8]
9f005ac6:	ff                   	(bad)  
9f005ac7:	ff cc                	dec    esp
9f005ac9:	e7 ff                	out    0xff,eax
9f005acb:	ff                   	(bad)  
9f005acc:	b8 e8 ff ff d0       	mov    eax,0xd0ffffe8
9f005ad1:	e7 ff                	out    0xff,eax
9f005ad3:	ff 4c f7 ff          	dec    DWORD PTR [edi+esi*8-0x1]
9f005ad7:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f005ae0 <ansiEscSeq>:
9f005ae0:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f005ae3:	3b 00                	cmp    eax,DWORD PTR [eax]
9f005ae5:	48                   	dec    eax
9f005ae6:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f005aec:	75 00                	jne    9f005aee <ansiEscSeq+0xe>
9f005aee:	3d 00 53 74 72       	cmp    eax,0x72745300
9f005af3:	65                   	gs
9f005af4:	61                   	popa   
9f005af5:	6d                   	ins    DWORD PTR es:[edi],dx
9f005af6:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f005afc:	74 20                	je     9f005b1e <ansiEscSeq+0x3e>
9f005afe:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f005b05:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005b06:	74 65                	je     9f005b6d <ansiEscSeq+0x8d>
9f005b08:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f005b0b:	00 2a                	add    BYTE PTR [edx],ch
9f005b0d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f005b0f:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b10:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f005b17:	74 20                	je     9f005b39 <ansiEscSeq+0x59>
9f005b19:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f005b1c:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b1d:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
9f005b21:	2a 2a                	sub    ch,BYTE PTR [edx]
9f005b23:	00 2a                	add    BYTE PTR [edx],ch
9f005b25:	2a 2a                	sub    ch,BYTE PTR [edx]
9f005b27:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b28:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f005b2f:	74 20                	je     9f005b51 <ansiEscSeq+0x71>
9f005b31:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f005b34:	70 6c                	jo     9f005ba2 <ansiEscSeq+0xc2>
9f005b36:	65                   	gs
9f005b37:	74 65                	je     9f005b9e <ansiEscSeq+0xbe>
9f005b39:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f005b3c:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b3d:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f005b44:	74 20                	je     9f005b66 <ansiEscSeq+0x86>
9f005b46:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f005b49:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b4a:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f005b4f:	65                   	gs
9f005b50:	76 69                	jbe    9f005bbb <ansiEscSeq+0xdb>
9f005b52:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005b53:	75 73                	jne    9f005bc8 <ansiEscSeq+0xe8>
9f005b55:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b56:	79 2c                	jns    9f005b84 <ansiEscSeq+0xa4>
9f005b58:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f005b5b:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f005b62:	6c 
9f005b63:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f005b6a:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f005b6d:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005b6f:	72 20                	jb     9f005b91 <ansiEscSeq+0xb1>
9f005b71:	25 73 0a 00 20       	and    eax,0x20000a73
9f005b76:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005b7a:	63 3a                	arpl   WORD PTR [edx],di
9f005b7c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f005b7f:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f005b83:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005b85:	72 20                	jb     9f005ba7 <ansiEscSeq+0xc7>
9f005b87:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f005b8c:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f005b93:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f005b97:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005b99:	72 20                	jb     9f005bbb <ansiEscSeq+0xdb>
9f005b9b:	25 73 0a 00 00       	and    eax,0xa73
9f005ba0:	68 65 61 70 42       	push   0x42706165
9f005ba5:	61                   	popa   
9f005ba6:	73 65                	jae    9f005c0d <ansiEscSeq+0x12d>
9f005ba8:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f005bab:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f005bae:	30 38                	xor    BYTE PTR [eax],bh
9f005bb0:	58                   	pop    eax
9f005bb1:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f005bb7:	30 38                	xor    BYTE PTR [eax],bh
9f005bb9:	58                   	pop    eax
9f005bba:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f005bbd:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f005bbf:	72 65                	jb     9f005c26 <ansiEscSeq+0x146>
9f005bc1:	0a 00                	or     al,BYTE PTR [eax]
9f005bc3:	6d                   	ins    DWORD PTR es:[edi],dx
9f005bc4:	61                   	popa   
9f005bc5:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bc6:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bc7:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005bc8:	63 28                	arpl   WORD PTR [eax],bp
9f005bca:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005bcd:	30 38                	xor    BYTE PTR [eax],bh
9f005bcf:	58                   	pop    eax
9f005bd0:	29 0a                	sub    DWORD PTR [edx],ecx
9f005bd2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005bd6:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f005bd9:	61                   	popa   
9f005bda:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bdb:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bdc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005bdd:	63 3a                	arpl   WORD PTR [edx],di
9f005bdf:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f005be2:	65                   	gs
9f005be3:	64                   	fs
9f005be4:	65                   	gs
9f005be5:	64                   	fs
9f005be6:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005beb:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005bee:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f005bf2:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f005bf5:	61                   	popa   
9f005bf6:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bf7:	6c                   	ins    BYTE PTR es:[edi],dx
9f005bf8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005bf9:	63 3a                	arpl   WORD PTR [edx],di
9f005bfb:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f005bfe:	61                   	popa   
9f005bff:	45                   	inc    ebp
9f005c00:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005c01:	64                   	fs
9f005c02:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005c07:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005c0a:	00 00                	add    BYTE PTR [eax],al
9f005c0c:	6c                   	ins    BYTE PTR es:[edi],dx
9f005c0d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005c14:	6c                   	ins    BYTE PTR es:[edi],dx
9f005c15:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005c16:	63 3a                	arpl   WORD PTR [edx],di
9f005c18:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f005c1b:	71 20                	jno    9f005c3d <ansiEscSeq+0x15d>
9f005c1d:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005c20:	30 38                	xor    BYTE PTR [eax],bh
9f005c22:	58                   	pop    eax
9f005c23:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f005c26:	74 65                	je     9f005c8d <ansiEscSeq+0x1ad>
9f005c28:	73 2c                	jae    9f005c56 <ansiEscSeq+0x176>
9f005c2a:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f005c2d:	74 20                	je     9f005c4f <ansiEscSeq+0x16f>
9f005c2f:	77 61                	ja     9f005c92 <ansiEscSeq+0x1b2>
9f005c31:	73 20                	jae    9f005c53 <ansiEscSeq+0x173>
9f005c33:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005c36:	30 38                	xor    BYTE PTR [eax],bh
9f005c38:	58                   	pop    eax
9f005c39:	2c 20                	sub    al,0x20
9f005c3b:	68 65 61 70 45       	push   0x45706165
9f005c40:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005c41:	64                   	fs
9f005c42:	3d 30 78 25 30       	cmp    eax,0x30257830
9f005c47:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005c4a:	00 00                	add    BYTE PTR [eax],al
9f005c4c:	6c                   	ins    BYTE PTR es:[edi],dx
9f005c4d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005c54:	6c                   	ins    BYTE PTR es:[edi],dx
9f005c55:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005c56:	63 3a                	arpl   WORD PTR [edx],di
9f005c58:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f005c5b:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f005c62:	65 
9f005c63:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f005c67:	61                   	popa   
9f005c68:	70 43                	jo     9f005cad <ansiEscSeq+0x1cd>
9f005c6a:	75 72                	jne    9f005cde <ansiEscSeq+0x1fe>
9f005c6c:	72 20                	jb     9f005c8e <ansiEscSeq+0x1ae>
9f005c6e:	61                   	popa   
9f005c6f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005c70:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f005c74:	61                   	popa   
9f005c75:	70 42                	jo     9f005cb9 <ansiEscSeq+0x1d9>
9f005c77:	61                   	popa   
9f005c78:	73 65                	jae    9f005cdf <ansiEscSeq+0x1ff>
9f005c7a:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f005c7e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005c81:	30 38                	xor    BYTE PTR [eax],bh
9f005c83:	58                   	pop    eax
9f005c84:	0a 00                	or     al,BYTE PTR [eax]
9f005c86:	00 00                	add    BYTE PTR [eax],al
9f005c88:	6c                   	ins    BYTE PTR es:[edi],dx
9f005c89:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005c90:	6c                   	ins    BYTE PTR es:[edi],dx
9f005c91:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005c92:	63 3a                	arpl   WORD PTR [edx],di
9f005c94:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f005c97:	61                   	popa   
9f005c98:	74 69                	je     9f005d03 <ansiEscSeq+0x223>
9f005c9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005c9b:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f005c9f:	61                   	popa   
9f005ca0:	70 20                	jo     9f005cc2 <ansiEscSeq+0x1e2>
9f005ca2:	72 65                	jb     9f005d09 <ansiEscSeq+0x229>
9f005ca4:	63 20                	arpl   WORD PTR [eax],sp
9f005ca6:	40                   	inc    eax
9f005ca7:	20 30                	and    BYTE PTR [eax],dh
9f005ca9:	78 25                	js     9f005cd0 <ansiEscSeq+0x1f0>
9f005cab:	30 38                	xor    BYTE PTR [eax],bh
9f005cad:	58                   	pop    eax
9f005cae:	0a 00                	or     al,BYTE PTR [eax]
9f005cb0:	6c                   	ins    BYTE PTR es:[edi],dx
9f005cb1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f005cb8:	6c                   	ins    BYTE PTR es:[edi],dx
9f005cb9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005cba:	63 3a                	arpl   WORD PTR [edx],di
9f005cbc:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f005cbf:	61                   	popa   
9f005cc0:	70 43                	jo     9f005d05 <ansiEscSeq+0x225>
9f005cc2:	75 72                	jne    9f005d36 <ansiEscSeq+0x256>
9f005cc4:	72 3d                	jb     9f005d03 <ansiEscSeq+0x223>
9f005cc6:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f005cc9:	30 38                	xor    BYTE PTR [eax],bh
9f005ccb:	58                   	pop    eax
9f005ccc:	2c 20                	sub    al,0x20
9f005cce:	73 69                	jae    9f005d39 <ansiEscSeq+0x259>
9f005cd0:	7a 65                	jp     9f005d37 <ansiEscSeq+0x257>
9f005cd2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005cd3:	66                   	data16
9f005cd4:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
9f005cd7:	61                   	popa   
9f005cd8:	70 72                	jo     9f005d4c <ansiEscSeq+0x26c>
9f005cda:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
9f005cde:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
9f005ce4:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f005ce7:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f005cea:	6c                   	ins    BYTE PTR es:[edi],dx
9f005ceb:	6c                   	ins    BYTE PTR es:[edi],dx
9f005cec:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005ced:	63 3a                	arpl   WORD PTR [edx],di
9f005cef:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f005cf2:	74 75                	je     9f005d69 <ansiEscSeq+0x289>
9f005cf4:	72 6e                	jb     9f005d64 <ansiEscSeq+0x284>
9f005cf6:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f005cfd:	30 38                	xor    BYTE PTR [eax],bh
9f005cff:	58                   	pop    eax
9f005d00:	0a 00                	or     al,BYTE PTR [eax]
9f005d02:	00 00                	add    BYTE PTR [eax],al
9f005d04:	55                   	push   ebp
9f005d05:	c0 ff ff             	sar    bh,0xff
9f005d08:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d0c:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d10:	5b                   	pop    ebx
9f005d11:	c0 ff ff             	sar    bh,0xff
9f005d14:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d18:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d1c:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d20:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d24:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d28:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d2c:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d30:	4f                   	dec    edi
9f005d31:	c0 ff ff             	sar    bh,0xff
9f005d34:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d38:	49                   	dec    ecx
9f005d39:	c0 ff ff             	sar    bh,0xff
9f005d3c:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d40:	67 c0 ff ff          	addr16 sar bh,0xff
9f005d44:	61                   	popa   
9f005d45:	c0 ff ff             	sar    bh,0xff
9f005d48:	06                   	push   es
9f005d49:	c3                   	ret    
9f005d4a:	ff                   	(bad)  
9f005d4b:	ff 33                	push   DWORD PTR [ebx]
9f005d4d:	c3                   	ret    
9f005d4e:	ff                   	(bad)  
9f005d4f:	ff 33                	push   DWORD PTR [ebx]
9f005d51:	c3                   	ret    
9f005d52:	ff                   	(bad)  
9f005d53:	ff 33                	push   DWORD PTR [ebx]
9f005d55:	c3                   	ret    
9f005d56:	ff                   	(bad)  
9f005d57:	ff 33                	push   DWORD PTR [ebx]
9f005d59:	c3                   	ret    
9f005d5a:	ff                   	(bad)  
9f005d5b:	ff 33                	push   DWORD PTR [ebx]
9f005d5d:	c3                   	ret    
9f005d5e:	ff                   	(bad)  
9f005d5f:	ff 33                	push   DWORD PTR [ebx]
9f005d61:	c3                   	ret    
9f005d62:	ff                   	(bad)  
9f005d63:	ff 33                	push   DWORD PTR [ebx]
9f005d65:	c3                   	ret    
9f005d66:	ff                   	(bad)  
9f005d67:	ff 33                	push   DWORD PTR [ebx]
9f005d69:	c3                   	ret    
9f005d6a:	ff                   	(bad)  
9f005d6b:	ff 33                	push   DWORD PTR [ebx]
9f005d6d:	c3                   	ret    
9f005d6e:	ff                   	(bad)  
9f005d6f:	ff 33                	push   DWORD PTR [ebx]
9f005d71:	c3                   	ret    
9f005d72:	ff                   	(bad)  
9f005d73:	ff 33                	push   DWORD PTR [ebx]
9f005d75:	c3                   	ret    
9f005d76:	ff                   	(bad)  
9f005d77:	ff 33                	push   DWORD PTR [ebx]
9f005d79:	c3                   	ret    
9f005d7a:	ff                   	(bad)  
9f005d7b:	ff 33                	push   DWORD PTR [ebx]
9f005d7d:	c3                   	ret    
9f005d7e:	ff                   	(bad)  
9f005d7f:	ff 33                	push   DWORD PTR [ebx]
9f005d81:	c3                   	ret    
9f005d82:	ff                   	(bad)  
9f005d83:	ff 33                	push   DWORD PTR [ebx]
9f005d85:	c3                   	ret    
9f005d86:	ff                   	(bad)  
9f005d87:	ff 33                	push   DWORD PTR [ebx]
9f005d89:	c3                   	ret    
9f005d8a:	ff                   	(bad)  
9f005d8b:	ff 33                	push   DWORD PTR [ebx]
9f005d8d:	c3                   	ret    
9f005d8e:	ff                   	(bad)  
9f005d8f:	ff 33                	push   DWORD PTR [ebx]
9f005d91:	c3                   	ret    
9f005d92:	ff                   	(bad)  
9f005d93:	ff 33                	push   DWORD PTR [ebx]
9f005d95:	c3                   	ret    
9f005d96:	ff                   	(bad)  
9f005d97:	ff 33                	push   DWORD PTR [ebx]
9f005d99:	c3                   	ret    
9f005d9a:	ff                   	(bad)  
9f005d9b:	ff 33                	push   DWORD PTR [ebx]
9f005d9d:	c3                   	ret    
9f005d9e:	ff                   	(bad)  
9f005d9f:	ff 33                	push   DWORD PTR [ebx]
9f005da1:	c3                   	ret    
9f005da2:	ff                   	(bad)  
9f005da3:	ff 33                	push   DWORD PTR [ebx]
9f005da5:	c3                   	ret    
9f005da6:	ff                   	(bad)  
9f005da7:	ff 33                	push   DWORD PTR [ebx]
9f005da9:	c3                   	ret    
9f005daa:	ff                   	(bad)  
9f005dab:	ff 33                	push   DWORD PTR [ebx]
9f005dad:	c3                   	ret    
9f005dae:	ff                   	(bad)  
9f005daf:	ff 33                	push   DWORD PTR [ebx]
9f005db1:	c3                   	ret    
9f005db2:	ff                   	(bad)  
9f005db3:	ff 33                	push   DWORD PTR [ebx]
9f005db5:	c3                   	ret    
9f005db6:	ff                   	(bad)  
9f005db7:	ff 33                	push   DWORD PTR [ebx]
9f005db9:	c3                   	ret    
9f005dba:	ff                   	(bad)  
9f005dbb:	ff 33                	push   DWORD PTR [ebx]
9f005dbd:	c3                   	ret    
9f005dbe:	ff                   	(bad)  
9f005dbf:	ff 33                	push   DWORD PTR [ebx]
9f005dc1:	c3                   	ret    
9f005dc2:	ff                   	(bad)  
9f005dc3:	ff 33                	push   DWORD PTR [ebx]
9f005dc5:	c3                   	ret    
9f005dc6:	ff                   	(bad)  
9f005dc7:	ff 33                	push   DWORD PTR [ebx]
9f005dc9:	c3                   	ret    
9f005dca:	ff                   	(bad)  
9f005dcb:	ff 33                	push   DWORD PTR [ebx]
9f005dcd:	c3                   	ret    
9f005dce:	ff                   	(bad)  
9f005dcf:	ff 33                	push   DWORD PTR [ebx]
9f005dd1:	c3                   	ret    
9f005dd2:	ff                   	(bad)  
9f005dd3:	ff 33                	push   DWORD PTR [ebx]
9f005dd5:	c3                   	ret    
9f005dd6:	ff                   	(bad)  
9f005dd7:	ff 33                	push   DWORD PTR [ebx]
9f005dd9:	c3                   	ret    
9f005dda:	ff                   	(bad)  
9f005ddb:	ff 33                	push   DWORD PTR [ebx]
9f005ddd:	c3                   	ret    
9f005dde:	ff                   	(bad)  
9f005ddf:	ff 33                	push   DWORD PTR [ebx]
9f005de1:	c3                   	ret    
9f005de2:	ff                   	(bad)  
9f005de3:	ff 33                	push   DWORD PTR [ebx]
9f005de5:	c3                   	ret    
9f005de6:	ff                   	(bad)  
9f005de7:	ff 33                	push   DWORD PTR [ebx]
9f005de9:	c3                   	ret    
9f005dea:	ff                   	(bad)  
9f005deb:	ff 33                	push   DWORD PTR [ebx]
9f005ded:	c3                   	ret    
9f005dee:	ff                   	(bad)  
9f005def:	ff 33                	push   DWORD PTR [ebx]
9f005df1:	c3                   	ret    
9f005df2:	ff                   	(bad)  
9f005df3:	ff 33                	push   DWORD PTR [ebx]
9f005df5:	c3                   	ret    
9f005df6:	ff                   	(bad)  
9f005df7:	ff 33                	push   DWORD PTR [ebx]
9f005df9:	c3                   	ret    
9f005dfa:	ff                   	(bad)  
9f005dfb:	ff 33                	push   DWORD PTR [ebx]
9f005dfd:	c3                   	ret    
9f005dfe:	ff                   	(bad)  
9f005dff:	ff 33                	push   DWORD PTR [ebx]
9f005e01:	c3                   	ret    
9f005e02:	ff                   	(bad)  
9f005e03:	ff 33                	push   DWORD PTR [ebx]
9f005e05:	c3                   	ret    
9f005e06:	ff                   	(bad)  
9f005e07:	ff 33                	push   DWORD PTR [ebx]
9f005e09:	c3                   	ret    
9f005e0a:	ff                   	(bad)  
9f005e0b:	ff 33                	push   DWORD PTR [ebx]
9f005e0d:	c3                   	ret    
9f005e0e:	ff                   	(bad)  
9f005e0f:	ff 33                	push   DWORD PTR [ebx]
9f005e11:	c3                   	ret    
9f005e12:	ff                   	(bad)  
9f005e13:	ff 24 c3             	jmp    DWORD PTR [ebx+eax*8]
9f005e16:	ff                   	(bad)  
9f005e17:	ff 33                	push   DWORD PTR [ebx]
9f005e19:	c3                   	ret    
9f005e1a:	ff                   	(bad)  
9f005e1b:	ff 33                	push   DWORD PTR [ebx]
9f005e1d:	c3                   	ret    
9f005e1e:	ff                   	(bad)  
9f005e1f:	ff 33                	push   DWORD PTR [ebx]
9f005e21:	c3                   	ret    
9f005e22:	ff                   	(bad)  
9f005e23:	ff 33                	push   DWORD PTR [ebx]
9f005e25:	c3                   	ret    
9f005e26:	ff                   	(bad)  
9f005e27:	ff 33                	push   DWORD PTR [ebx]
9f005e29:	c3                   	ret    
9f005e2a:	ff                   	(bad)  
9f005e2b:	ff 33                	push   DWORD PTR [ebx]
9f005e2d:	c3                   	ret    
9f005e2e:	ff                   	(bad)  
9f005e2f:	ff 33                	push   DWORD PTR [ebx]
9f005e31:	c3                   	ret    
9f005e32:	ff                   	(bad)  
9f005e33:	ff 33                	push   DWORD PTR [ebx]
9f005e35:	c3                   	ret    
9f005e36:	ff                   	(bad)  
9f005e37:	ff 33                	push   DWORD PTR [ebx]
9f005e39:	c3                   	ret    
9f005e3a:	ff                   	(bad)  
9f005e3b:	ff 33                	push   DWORD PTR [ebx]
9f005e3d:	c3                   	ret    
9f005e3e:	ff                   	(bad)  
9f005e3f:	ff 8c c1 ff ff 2d c3 	dec    DWORD PTR [ecx+eax*8-0x3cd20001]
9f005e46:	ff                   	(bad)  
9f005e47:	ff 33                	push   DWORD PTR [ebx]
9f005e49:	c3                   	ret    
9f005e4a:	ff                   	(bad)  
9f005e4b:	ff 33                	push   DWORD PTR [ebx]
9f005e4d:	c3                   	ret    
9f005e4e:	ff                   	(bad)  
9f005e4f:	ff 33                	push   DWORD PTR [ebx]
9f005e51:	c3                   	ret    
9f005e52:	ff                   	(bad)  
9f005e53:	ff 33                	push   DWORD PTR [ebx]
9f005e55:	c3                   	ret    
9f005e56:	ff                   	(bad)  
9f005e57:	ff 2d c3 ff ff 33    	jmp    FWORD PTR ds:0x33ffffc3
9f005e5d:	c3                   	ret    
9f005e5e:	ff                   	(bad)  
9f005e5f:	ff 33                	push   DWORD PTR [ebx]
9f005e61:	c3                   	ret    
9f005e62:	ff                   	(bad)  
9f005e63:	ff 33                	push   DWORD PTR [ebx]
9f005e65:	c3                   	ret    
9f005e66:	ff                   	(bad)  
9f005e67:	ff 33                	push   DWORD PTR [ebx]
9f005e69:	c3                   	ret    
9f005e6a:	ff                   	(bad)  
9f005e6b:	ff c0                	inc    eax
9f005e6d:	c2 ff ff             	ret    0xffff
9f005e70:	17                   	pop    ss
9f005e71:	c3                   	ret    
9f005e72:	ff                   	(bad)  
9f005e73:	ff 82 c2 ff ff 33    	inc    DWORD PTR [edx+0x33ffffc2]
9f005e79:	c3                   	ret    
9f005e7a:	ff                   	(bad)  
9f005e7b:	ff 33                	push   DWORD PTR [ebx]
9f005e7d:	c3                   	ret    
9f005e7e:	ff                   	(bad)  
9f005e7f:	ff e1                	jmp    ecx
9f005e81:	c1 ff ff             	sar    edi,0xff
9f005e84:	33 c3                	xor    eax,ebx
9f005e86:	ff                   	(bad)  
9f005e87:	ff 6d c3             	jmp    FWORD PTR [ebp-0x3d]
9f005e8a:	ff                   	(bad)  
9f005e8b:	ff 33                	push   DWORD PTR [ebx]
9f005e8d:	c3                   	ret    
9f005e8e:	ff                   	(bad)  
9f005e8f:	ff 33                	push   DWORD PTR [ebx]
9f005e91:	c3                   	ret    
9f005e92:	ff                   	(bad)  
9f005e93:	ff 20                	jmp    DWORD PTR [eax]
9f005e95:	c3                   	ret    
9f005e96:	ff                   	(bad)  
9f005e97:	ff 30                	push   DWORD PTR [eax]

9f005e98 <digits.1476>:
9f005e98:	30 31                	xor    BYTE PTR [ecx],dh
9f005e9a:	32 33                	xor    dh,BYTE PTR [ebx]
9f005e9c:	34 35                	xor    al,0x35
9f005e9e:	36                   	ss
9f005e9f:	37                   	aaa    
9f005ea0:	38 39                	cmp    BYTE PTR [ecx],bh
9f005ea2:	41                   	inc    ecx
9f005ea3:	42                   	inc    edx
9f005ea4:	43                   	inc    ebx
9f005ea5:	44                   	inc    esp
9f005ea6:	45                   	inc    ebp
9f005ea7:	46                   	inc    esi
	...
9f005ec0:	47                   	inc    edi
9f005ec1:	4d                   	dec    ebp
9f005ec2:	54                   	push   esp
	...

9f005ee0 <_ytab>:
9f005ee0:	1f                   	pop    ds
9f005ee1:	00 00                	add    BYTE PTR [eax],al
9f005ee3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005ee6:	00 00                	add    BYTE PTR [eax],al
9f005ee8:	1f                   	pop    ds
9f005ee9:	00 00                	add    BYTE PTR [eax],al
9f005eeb:	00 1e                	add    BYTE PTR [esi],bl
9f005eed:	00 00                	add    BYTE PTR [eax],al
9f005eef:	00 1f                	add    BYTE PTR [edi],bl
9f005ef1:	00 00                	add    BYTE PTR [eax],al
9f005ef3:	00 1e                	add    BYTE PTR [esi],bl
9f005ef5:	00 00                	add    BYTE PTR [eax],al
9f005ef7:	00 1f                	add    BYTE PTR [edi],bl
9f005ef9:	00 00                	add    BYTE PTR [eax],al
9f005efb:	00 1f                	add    BYTE PTR [edi],bl
9f005efd:	00 00                	add    BYTE PTR [eax],al
9f005eff:	00 1e                	add    BYTE PTR [esi],bl
9f005f01:	00 00                	add    BYTE PTR [eax],al
9f005f03:	00 1f                	add    BYTE PTR [edi],bl
9f005f05:	00 00                	add    BYTE PTR [eax],al
9f005f07:	00 1e                	add    BYTE PTR [esi],bl
9f005f09:	00 00                	add    BYTE PTR [eax],al
9f005f0b:	00 1f                	add    BYTE PTR [edi],bl
9f005f0d:	00 00                	add    BYTE PTR [eax],al
9f005f0f:	00 1f                	add    BYTE PTR [edi],bl
9f005f11:	00 00                	add    BYTE PTR [eax],al
9f005f13:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f005f19:	00 00                	add    BYTE PTR [eax],al
9f005f1b:	00 1e                	add    BYTE PTR [esi],bl
9f005f1d:	00 00                	add    BYTE PTR [eax],al
9f005f1f:	00 1f                	add    BYTE PTR [edi],bl
9f005f21:	00 00                	add    BYTE PTR [eax],al
9f005f23:	00 1e                	add    BYTE PTR [esi],bl
9f005f25:	00 00                	add    BYTE PTR [eax],al
9f005f27:	00 1f                	add    BYTE PTR [edi],bl
9f005f29:	00 00                	add    BYTE PTR [eax],al
9f005f2b:	00 1f                	add    BYTE PTR [edi],bl
9f005f2d:	00 00                	add    BYTE PTR [eax],al
9f005f2f:	00 1e                	add    BYTE PTR [esi],bl
9f005f31:	00 00                	add    BYTE PTR [eax],al
9f005f33:	00 1f                	add    BYTE PTR [edi],bl
9f005f35:	00 00                	add    BYTE PTR [eax],al
9f005f37:	00 1e                	add    BYTE PTR [esi],bl
9f005f39:	00 00                	add    BYTE PTR [eax],al
9f005f3b:	00 1f                	add    BYTE PTR [edi],bl
9f005f3d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f005f40 <.rel.dyn>:
9f005f40:	84 61 00             	test   BYTE PTR [ecx+0x0],ah
9f005f43:	9f                   	lahf   
9f005f44:	08 00                	or     BYTE PTR [eax],al
9f005f46:	00 00                	add    BYTE PTR [eax],al
9f005f48:	88 61 00             	mov    BYTE PTR [ecx+0x0],ah
9f005f4b:	9f                   	lahf   
9f005f4c:	08 00                	or     BYTE PTR [eax],al
9f005f4e:	00 00                	add    BYTE PTR [eax],al
9f005f50:	8c 61 00             	mov    WORD PTR [ecx+0x0],fs
9f005f53:	9f                   	lahf   
9f005f54:	08 00                	or     BYTE PTR [eax],al
9f005f56:	00 00                	add    BYTE PTR [eax],al
9f005f58:	90                   	nop
9f005f59:	61                   	popa   
9f005f5a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005f60:	94                   	xchg   esp,eax
9f005f61:	61                   	popa   
9f005f62:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005f68:	98                   	cwde   
9f005f69:	61                   	popa   
9f005f6a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005f70:	9c                   	pushf  
9f005f71:	61                   	popa   
9f005f72:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005f78:	a0 61 00 9f 08       	mov    al,ds:0x89f0061
9f005f7d:	00 00                	add    BYTE PTR [eax],al
9f005f7f:	00 a4 61 00 9f 08 00 	add    BYTE PTR [ecx+eiz*2+0x89f00],ah
9f005f86:	00 00                	add    BYTE PTR [eax],al
9f005f88:	a8 61                	test   al,0x61
9f005f8a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005f90:	c8 61 00 9f          	enter  0x61,0x9f
9f005f94:	08 00                	or     BYTE PTR [eax],al
9f005f96:	00 00                	add    BYTE PTR [eax],al
9f005f98:	cc                   	int3   
9f005f99:	61                   	popa   
9f005f9a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005fa0:	d0 61 00             	shl    BYTE PTR [ecx+0x0],1
9f005fa3:	9f                   	lahf   
9f005fa4:	08 00                	or     BYTE PTR [eax],al
9f005fa6:	00 00                	add    BYTE PTR [eax],al
9f005fa8:	3a 0a                	cmp    cl,BYTE PTR [edx]
9f005faa:	00 9f 02 28 00 00    	add    BYTE PTR [edi+0x2802],bl
9f005fb0:	7a 0a                	jp     9f005fbc <_ytab+0xdc>
9f005fb2:	00 9f 02 28 00 00    	add    BYTE PTR [edi+0x2802],bl
9f005fb8:	a3 0a 00 9f 02       	mov    ds:0x29f000a,eax
9f005fbd:	28 00                	sub    BYTE PTR [eax],al
9f005fbf:	00 bc 0a 00 9f 02 28 	add    BYTE PTR [edx+ecx*1+0x28029f00],bh
9f005fc6:	00 00                	add    BYTE PTR [eax],al
9f005fc8:	14 0b                	adc    al,0xb
9f005fca:	00 9f 02 28 00 00    	add    BYTE PTR [edi+0x2802],bl
9f005fd0:	77 0b                	ja     9f005fdd <_ytab+0xfd>
9f005fd2:	00 9f 02 28 00 00    	add    BYTE PTR [edi+0x2802],bl
9f005fd8:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f005fd9:	0b 00                	or     eax,DWORD PTR [eax]
9f005fdb:	9f                   	lahf   
9f005fdc:	02 28                	add    ch,BYTE PTR [eax]
9f005fde:	00 00                	add    BYTE PTR [eax],al
9f005fe0:	e9 0b 00 9f 02       	jmp    a19f5ff0 <tmbuf+0x29efd90>
9f005fe5:	28 00                	sub    BYTE PTR [eax],al
9f005fe7:	00 27                	add    BYTE PTR [edi],ah
9f005fe9:	0c 00                	or     al,0x0
9f005feb:	9f                   	lahf   
9f005fec:	02 28                	add    ch,BYTE PTR [eax]
9f005fee:	00 00                	add    BYTE PTR [eax],al
9f005ff0:	67 0c 00             	addr16 or al,0x0
9f005ff3:	9f                   	lahf   
9f005ff4:	02 28                	add    ch,BYTE PTR [eax]
9f005ff6:	00 00                	add    BYTE PTR [eax],al
9f005ff8:	a9 0c 00 9f 02       	test   eax,0x29f000c
9f005ffd:	28 00                	sub    BYTE PTR [eax],al
9f005fff:	00 3a                	add    BYTE PTR [edx],bh
9f006001:	0f 00 9f 02 28 00 00 	ltr    WORD PTR [edi+0x2802]
9f006008:	67 0f 00 9f 02 28    	ltr    WORD PTR [bx+0x2802]
9f00600e:	00 00                	add    BYTE PTR [eax],al
9f006010:	dd 0f                	fisttp QWORD PTR [edi]
9f006012:	00 9f 02 28 00 00    	add    BYTE PTR [edi+0x2802],bl
9f006018:	db 31                	(bad)  [ecx]
9f00601a:	00 9f 02 28 00 00    	add    BYTE PTR [edi+0x2802],bl
9f006020:	4a                   	dec    edx
9f006021:	3e 00 9f 02 28 00 00 	add    BYTE PTR ds:[edi+0x2802],bl
9f006028:	c4 61 00             	les    esp,FWORD PTR [ecx+0x0]
9f00602b:	9f                   	lahf   
9f00602c:	01 15 00 00 b8 61    	add    DWORD PTR ds:0x61b80000,edx
9f006032:	00 9f 07 0d 00 00    	add    BYTE PTR [edi+0xd07],bl
9f006038:	bc 61 00 9f 07       	mov    esp,0x79f0061
9f00603d:	13 00                	adc    eax,DWORD PTR [eax]
9f00603f:	00 c0                	add    al,al
9f006041:	61                   	popa   
9f006042:	00 9f 07 41 00 00    	add    BYTE PTR [edi+0x4107],bl

Disassembly of section .data:

9f006060 <rcsid>:
9f006060:	24 48                	and    al,0x48
9f006062:	65                   	gs
9f006063:	61                   	popa   
9f006064:	64                   	fs
9f006065:	65                   	gs
9f006066:	72 3a                	jb     9f0060a2 <rcsid+0x42>
9f006068:	20 2f                	and    BYTE PTR [edi],ch
9f00606a:	75 73                	jne    9f0060df <_DYNAMIC+0x13>
9f00606c:	65                   	gs
9f00606d:	72 36                	jb     9f0060a5 <rcsid+0x45>
9f00606f:	2f                   	das    
9f006070:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006071:	75 73                	jne    9f0060e6 <_DYNAMIC+0x1a>
9f006073:	74 65                	je     9f0060da <_DYNAMIC+0xe>
9f006075:	72 2f                	jb     9f0060a6 <rcsid+0x46>
9f006077:	74 63                	je     9f0060dc <_DYNAMIC+0x10>
9f006079:	6c                   	ins    BYTE PTR es:[edi],dx
9f00607a:	2f                   	das    
9f00607b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00607e:	70 61                	jo     9f0060e1 <_DYNAMIC+0x15>
9f006080:	74 2f                	je     9f0060b1 <rcsid+0x51>
9f006082:	52                   	push   edx
9f006083:	43                   	inc    ebx
9f006084:	53                   	push   ebx
9f006085:	2f                   	das    
9f006086:	73 74                	jae    9f0060fc <_DYNAMIC+0x30>
9f006088:	72 73                	jb     9f0060fd <_DYNAMIC+0x31>
9f00608a:	74 72                	je     9f0060fe <_DYNAMIC+0x32>
9f00608c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f006090:	20 31                	and    BYTE PTR [ecx],dh
9f006092:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f006095:	39 33                	cmp    DWORD PTR [ebx],esi
9f006097:	2f                   	das    
9f006098:	30 33                	xor    BYTE PTR [ebx],dh
9f00609a:	2f                   	das    
9f00609b:	31 39                	xor    DWORD PTR [ecx],edi
9f00609d:	20 31                	and    BYTE PTR [ecx],dh
9f00609f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f0060a4:	34 30                	xor    al,0x30
9f0060a6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f0060a9:	73 74                	jae    9f00611f <_DYNAMIC+0x53>
9f0060ab:	65                   	gs
9f0060ac:	72 20                	jb     9f0060ce <_DYNAMIC+0x2>
9f0060ae:	45                   	inc    ebp
9f0060af:	78 70                	js     9f006121 <_DYNAMIC+0x55>
9f0060b1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f0060b4:	53                   	push   ebx
9f0060b5:	50                   	push   eax
9f0060b6:	52                   	push   edx
9f0060b7:	49                   	dec    ecx
9f0060b8:	54                   	push   esp
9f0060b9:	45                   	inc    ebp
9f0060ba:	20 28                	and    BYTE PTR [eax],ch
9f0060bc:	42                   	inc    edx
9f0060bd:	65                   	gs
9f0060be:	72 6b                	jb     9f00612b <_DYNAMIC+0x5f>
9f0060c0:	65                   	gs
9f0060c1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0060c2:	65                   	gs
9f0060c3:	79 29                	jns    9f0060ee <_DYNAMIC+0x22>
9f0060c5:	00 00                	add    BYTE PTR [eax],al
	...

9f0060c8 <_daylight>:
9f0060c8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f0060cc <_DYNAMIC>:
9f0060cc:	19 00                	sbb    DWORD PTR [eax],eax
9f0060ce:	00 00                	add    BYTE PTR [eax],al
9f0060d0:	c4 61 00             	les    esp,FWORD PTR [ecx+0x0]
9f0060d3:	9f                   	lahf   
9f0060d4:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0060d6:	00 00                	add    BYTE PTR [eax],al
9f0060d8:	04 00                	add    al,0x0
9f0060da:	00 00                	add    BYTE PTR [eax],al
9f0060dc:	1a 00                	sbb    al,BYTE PTR [eax]
9f0060de:	00 00                	add    BYTE PTR [eax],al
9f0060e0:	c8 61 00 9f          	enter  0x61,0x9f
9f0060e4:	1c 00                	sbb    al,0x0
9f0060e6:	00 00                	add    BYTE PTR [eax],al
9f0060e8:	04 00                	add    al,0x0
9f0060ea:	00 00                	add    BYTE PTR [eax],al
9f0060ec:	04 00                	add    al,0x0
9f0060ee:	00 00                	add    BYTE PTR [eax],al
9f0060f0:	e0 54                	loopne 9f006146 <_DYNAMIC+0x7a>
9f0060f2:	00 9f 05 00 00 00    	add    BYTE PTR [edi+0x5],bl
9f0060f8:	e4 52                	in     al,0x52
9f0060fa:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f006100:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006101:	4e                   	dec    esi
9f006102:	00 9f 0a 00 00 00    	add    BYTE PTR [edi+0xa],bl
9f006108:	fc                   	cld    
9f006109:	01 00                	add    DWORD PTR [eax],eax
9f00610b:	00 0b                	add    BYTE PTR [ebx],cl
9f00610d:	00 00                	add    BYTE PTR [eax],al
9f00610f:	00 10                	add    BYTE PTR [eax],dl
9f006111:	00 00                	add    BYTE PTR [eax],al
9f006113:	00 03                	add    BYTE PTR [ebx],al
9f006115:	00 00                	add    BYTE PTR [eax],al
9f006117:	00 ac 61 00 9f 02 00 	add    BYTE PTR [ecx+eiz*2+0x29f00],ch
9f00611e:	00 00                	add    BYTE PTR [eax],al
9f006120:	18 00                	sbb    BYTE PTR [eax],al
9f006122:	00 00                	add    BYTE PTR [eax],al
9f006124:	14 00                	adc    al,0x0
9f006126:	00 00                	add    BYTE PTR [eax],al
9f006128:	11 00                	adc    DWORD PTR [eax],eax
9f00612a:	00 00                	add    BYTE PTR [eax],al
9f00612c:	17                   	pop    ss
9f00612d:	00 00                	add    BYTE PTR [eax],al
9f00612f:	00 30                	add    BYTE PTR [eax],dh
9f006131:	60                   	pusha  
9f006132:	00 9f 11 00 00 00    	add    BYTE PTR [edi+0x11],bl
9f006138:	40                   	inc    eax
9f006139:	5f                   	pop    edi
9f00613a:	00 9f 12 00 00 00    	add    BYTE PTR [edi+0x12],bl
9f006140:	f0 00 00             	lock add BYTE PTR [eax],al
9f006143:	00 13                	add    BYTE PTR [ebx],dl
9f006145:	00 00                	add    BYTE PTR [eax],al
9f006147:	00 08                	add    BYTE PTR [eax],cl
9f006149:	00 00                	add    BYTE PTR [eax],al
9f00614b:	00 16                	add    BYTE PTR [esi],dl
9f00614d:	00 00                	add    BYTE PTR [eax],al
9f00614f:	00 00                	add    BYTE PTR [eax],al
9f006151:	00 00                	add    BYTE PTR [eax],al
9f006153:	00 fa                	add    dl,bh
9f006155:	ff                   	(bad)  
9f006156:	ff 6f 0d             	jmp    FWORD PTR [edi+0xd]
	...

Disassembly of section .got:

9f006184 <.got>:
9f006184:	08 62 00             	or     BYTE PTR [edx+0x0],ah
9f006187:	9f                   	lahf   
9f006188:	e0 61                	loopne 9f0061eb <heapEnd+0x3>
9f00618a:	00 9f e4 61 00 9f    	add    BYTE PTR [edi-0x60ff9e1c],bl
9f006190:	e8 61 00 9f 04       	call   a39f61f6 <tmbuf+0x49eff96>
9f006195:	62 00                	bound  eax,QWORD PTR [eax]
9f006197:	9f                   	lahf   
9f006198:	ec                   	in     al,dx
9f006199:	61                   	popa   
9f00619a:	00 9f f0 61 00 9f    	add    BYTE PTR [edi-0x60ff9e10],bl
9f0061a0:	f4                   	hlt    
9f0061a1:	61                   	popa   
9f0061a2:	00 9f f8 61 00 9f    	add    BYTE PTR [edi-0x60ff9e08],bl
9f0061a8:	60                   	pusha  
9f0061a9:	62 00                	bound  eax,QWORD PTR [eax]
9f0061ab:	9f                   	lahf   

Disassembly of section .got.plt:

9f0061ac <_GLOBAL_OFFSET_TABLE_>:
9f0061ac:	cc                   	int3   
9f0061ad:	60                   	pusha  
9f0061ae:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f0061b4:	00 00                	add    BYTE PTR [eax],al
9f0061b6:	00 00                	add    BYTE PTR [eax],al
9f0061b8:	e6 3e                	out    0x3e,al
9f0061ba:	00 9f f6 3e 00 9f    	add    BYTE PTR [edi-0x60ffc10a],bl
9f0061c0:	06                   	push   es
9f0061c1:	3f                   	aas    
9f0061c2:	00                   	.byte 0x0
9f0061c3:	9f                   	lahf   

Disassembly of section .init_array:

9f0061c4 <.init_array>:
9f0061c4:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f0061c8 <.fini_array>:
9f0061c8:	79 0d                	jns    9f0061d7 <_tzname+0xb>
9f0061ca:	00                   	.byte 0x0
9f0061cb:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f0061cc <_tzname>:
9f0061cc:	c0 5e 00 9f          	rcr    BYTE PTR [esi+0x0],0x9f
9f0061d0:	c0 5e 00 9f          	rcr    BYTE PTR [esi+0x0],0x9f

Disassembly of section .bss:

9f0061e0 <filesToCloseCount>:
9f0061e0:	00 00                	add    BYTE PTR [eax],al
	...

9f0061e4 <filesToClose>:
9f0061e4:	00 00                	add    BYTE PTR [eax],al
	...

9f0061e8 <heapEnd>:
9f0061e8:	00 00                	add    BYTE PTR [eax],al
	...

9f0061ec <heapBase>:
9f0061ec:	00 00                	add    BYTE PTR [eax],al
	...

9f0061f0 <heapCurr>:
9f0061f0:	00 00                	add    BYTE PTR [eax],al
	...

9f0061f4 <processEnvp>:
9f0061f4:	00 00                	add    BYTE PTR [eax],al
	...

9f0061f8 <libcTZ>:
9f0061f8:	00 00                	add    BYTE PTR [eax],al
	...

9f0061fc <lasts.1471>:
9f0061fc:	00 00                	add    BYTE PTR [eax],al
	...

9f006200 <libcInitialized>:
9f006200:	00 00                	add    BYTE PTR [eax],al
	...

9f006204 <printBuffer>:
9f006204:	00 00                	add    BYTE PTR [eax],al
	...

9f006208 <params>:
	...

9f006220 <_dstbias>:
	...

9f006240 <ticksToWait>:
	...

9f006260 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	92                   	xchg   edx,eax
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	ac                   	lods   al,BYTE PTR ds:[esi]
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c 3d 01 00 00 1e 	add    BYTE PTR [edi*1+0x1e000001],cl
      16:	00 00                	add    BYTE PTR [eax],al
      18:	00 00                	add    BYTE PTR [eax],al
      1a:	00 00                	add    BYTE PTR [eax],al
      1c:	9f                   	lahf   
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	8c 00                	mov    WORD PTR [eax],es
      2a:	00 00                	add    BYTE PTR [eax],al
      2c:	02 01                	add    al,BYTE PTR [ecx]
      2e:	06                   	push   es
      2f:	85 00                	test   DWORD PTR [eax],eax
      31:	00 00                	add    BYTE PTR [eax],al
      33:	02 02                	add    al,BYTE PTR [edx]
      35:	05 72 01 00 00       	add    eax,0x172
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
      50:	02 07                	add    al,BYTE PTR [edi]
      52:	19 01                	sbb    DWORD PTR [ecx],eax
      54:	00 00                	add    BYTE PTR [eax],al
      56:	04 0e                	add    al,0xe
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 02                	add    BYTE PTR [edx],al
      5c:	34 61                	xor    al,0x61
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	61                   	popa   
      65:	00 00                	add    BYTE PTR [eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	57                   	push   edi
      6c:	00 00                	add    BYTE PTR [eax],al
      6e:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
      75:	56                   	push   esi
      76:	61                   	popa   
      77:	00 00                	add    BYTE PTR [eax],al
      79:	00 02                	add    BYTE PTR [edx],al
      7b:	04 05                	add    al,0x5
      7d:	05 00 00 00 02       	add    eax,0x2000000
      82:	0c 04                	or     al,0x4
      84:	66 01 00             	add    WORD PTR [eax],ax
      87:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
      8d:	00 06                	add    BYTE PTR [esi],al
      8f:	25 00 00 00 02       	and    eax,0x2000000
      94:	01 02                	add    DWORD PTR [edx],eax
      96:	13 01                	adc    eax,DWORD PTR [ecx]
      98:	00 00                	add    BYTE PTR [eax],al
      9a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      9d:	83 01 00             	add    DWORD PTR [ecx],0x0
      a0:	00 02                	add    BYTE PTR [edx],al
      a2:	04 07                	add    al,0x7
      a4:	5c                   	pop    esp
      a5:	00 00                	add    BYTE PTR [eax],al
      a7:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
      ad:	00 07                	add    BYTE PTR [edi],al
      af:	17                   	pop    ss
      b0:	00 00                	add    BYTE PTR [eax],al
      b2:	00 01                	add    BYTE PTR [ecx],al
      b4:	08 a8 00 00 00 00    	or     BYTE PTR [eax+0x0],ch
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	9f                   	lahf   
      bd:	38 00                	cmp    BYTE PTR [eax],al
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	01 9c e0 00 00 00 08 	add    DWORD PTR [eax+eiz*8+0x8000000],ebx
      c8:	73 00                	jae    ca <sysEnter_Vector-0x12ff36>
      ca:	01 08                	add    DWORD PTR [eax],ecx
      cc:	88 00                	mov    BYTE PTR [eax],al
      ce:	00 00                	add    BYTE PTR [eax],al
      d0:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      d6:	01 08                	add    DWORD PTR [eax],ecx
      d8:	3a 00                	cmp    al,BYTE PTR [eax]
      da:	00 00                	add    BYTE PTR [eax],al
      dc:	02 91 04 00 07 2c    	add    dl,BYTE PTR [ecx+0x2c070004]
      e2:	01 00                	add    DWORD PTR [eax],eax
      e4:	00 01                	add    BYTE PTR [ecx],al
      e6:	10 a8 00 00 00 38    	adc    BYTE PTR [eax+0x38000000],ch
      ec:	00 00                	add    BYTE PTR [eax],al
      ee:	9f                   	lahf   
      ef:	38 00                	cmp    BYTE PTR [eax],al
      f1:	00 00                	add    BYTE PTR [eax],al
      f3:	01 9c 12 01 00 00 08 	add    DWORD PTR [edx+edx*1+0x8000001],ebx
      fa:	73 00                	jae    fc <sysEnter_Vector-0x12ff04>
      fc:	01 10                	add    DWORD PTR [eax],edx
      fe:	88 00                	mov    BYTE PTR [eax],al
     100:	00 00                	add    BYTE PTR [eax],al
     102:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
     108:	01 10                	add    DWORD PTR [eax],edx
     10a:	3a 00                	cmp    al,BYTE PTR [eax]
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	02 91 04 00 09 a3    	add    dl,BYTE PTR [ecx-0x5cf6fffc]
     114:	00 00                	add    BYTE PTR [eax],al
     116:	00 03                	add    BYTE PTR [ebx],al
     118:	34 56                	xor    al,0x56
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
     122:	9f                   	lahf   
     123:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     126:	00 00                	add    BYTE PTR [eax],al
     128:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
     12e:	05 03 f0 61 00       	add    eax,0x61f003
     133:	9f                   	lahf   
     134:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     137:	00 00                	add    BYTE PTR [eax],al
     139:	03 36                	add    esi,DWORD PTR [esi]
     13b:	56                   	push   esi
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
     144:	9f                   	lahf   
     145:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     149:	00 03                	add    BYTE PTR [ebx],al
     14b:	37                   	aaa    
     14c:	7a 00                	jp     14e <sysEnter_Vector-0x12feb2>
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	05 03 f8 61 00       	add    eax,0x61f803
     155:	9f                   	lahf   
     156:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	04 2f                	add    al,0x2f
     15d:	67 01 00             	add    DWORD PTR [bx+si],eax
     160:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
     166:	9f                   	lahf   
     167:	05 04 6f 00 00       	add    eax,0x6f04
     16c:	00 09                	add    BYTE PTR [ecx],cl
     16e:	91                   	xchg   ecx,eax
     16f:	00 00                	add    BYTE PTR [eax],al
     171:	00 04 30             	add    BYTE PTR [eax+esi*1],al
     174:	3a 00                	cmp    al,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	05 03 e0 61 00       	add    eax,0x61e003
     17d:	9f                   	lahf   
     17e:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     181:	00 00                	add    BYTE PTR [eax],al
     183:	05 53 8f 01 00       	add    eax,0x18f53
     188:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
     18e:	9f                   	lahf   
     18f:	05 04 a8 00 00       	add    eax,0xa804
     194:	00 00                	add    BYTE PTR [eax],al
     196:	d1 01                	rol    DWORD PTR [ecx],1
     198:	00 00                	add    BYTE PTR [eax],al
     19a:	04 00                	add    al,0x0
     19c:	83 00 00             	add    DWORD PTR [eax],0x0
     19f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     1a2:	ac                   	lods   al,BYTE PTR ds:[esi]
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 0c 95 01 00 00 1e 	add    BYTE PTR [edx*4+0x1e000001],cl
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	00 70 00             	add    BYTE PTR [eax+0x0],dh
     1b1:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     1b7:	de 00                	fiadd  WORD PTR [eax]
     1b9:	00 00                	add    BYTE PTR [eax],al
     1bb:	02 01                	add    al,BYTE PTR [ecx]
     1bd:	06                   	push   es
     1be:	8c 00                	mov    WORD PTR [eax],es
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	02 01                	add    al,BYTE PTR [ecx]
     1c4:	06                   	push   es
     1c5:	85 00                	test   DWORD PTR [eax],eax
     1c7:	00 00                	add    BYTE PTR [eax],al
     1c9:	02 02                	add    al,BYTE PTR [edx]
     1cb:	05 72 01 00 00       	add    eax,0x172
     1d0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1d7:	02 08                	add    cl,BYTE PTR [eax]
     1d9:	05 00 00 00 00       	add    eax,0x0
     1de:	02 01                	add    al,BYTE PTR [ecx]
     1e0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     1e6:	02 07                	add    al,BYTE PTR [edi]
     1e8:	19 01                	sbb    DWORD PTR [ecx],eax
     1ea:	00 00                	add    BYTE PTR [eax],al
     1ec:	04 0e                	add    al,0xe
     1ee:	00 00                	add    BYTE PTR [eax],al
     1f0:	00 02                	add    BYTE PTR [edx],al
     1f2:	34 61                	xor    al,0x61
     1f4:	00 00                	add    BYTE PTR [eax],al
     1f6:	00 02                	add    BYTE PTR [edx],al
     1f8:	04 07                	add    al,0x7
     1fa:	61                   	popa   
     1fb:	00 00                	add    BYTE PTR [eax],al
     1fd:	00 02                	add    BYTE PTR [edx],al
     1ff:	08 07                	or     BYTE PTR [edi],al
     201:	57                   	push   edi
     202:	00 00                	add    BYTE PTR [eax],al
     204:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     20b:	56                   	push   esi
     20c:	61                   	popa   
     20d:	00 00                	add    BYTE PTR [eax],al
     20f:	00 02                	add    BYTE PTR [edx],al
     211:	04 05                	add    al,0x5
     213:	05 00 00 00 02       	add    eax,0x2000000
     218:	0c 04                	or     al,0x4
     21a:	66 01 00             	add    WORD PTR [eax],ax
     21d:	00 02                	add    BYTE PTR [edx],al
     21f:	01 02                	add    DWORD PTR [edx],eax
     221:	13 01                	adc    eax,DWORD PTR [ecx]
     223:	00 00                	add    BYTE PTR [eax],al
     225:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     228:	83 01 00             	add    DWORD PTR [ecx],0x0
     22b:	00 02                	add    BYTE PTR [edx],al
     22d:	04 07                	add    al,0x7
     22f:	5c                   	pop    esp
     230:	00 00                	add    BYTE PTR [eax],al
     232:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     238:	00 06                	add    BYTE PTR [esi],al
     23a:	c5 01                	lds    eax,FWORD PTR [ecx]
     23c:	00 00                	add    BYTE PTR [eax],al
     23e:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     244:	70 00                	jo     246 <sysEnter_Vector-0x12fdba>
     246:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     24c:	01 9c fa 00 00 00 07 	add    DWORD PTR [edx+edi*8+0x7000000],ebx
     253:	e1 0b                	loope  260 <sysEnter_Vector-0x12fda0>
     255:	00 00                	add    BYTE PTR [eax],al
     257:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     25d:	02 91 00 07 bf 01    	add    dl,BYTE PTR [ecx+0x1bf0700]
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     26b:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     271:	01 27                	add    DWORD PTR [edi],esp
     273:	25 00 00 00 01       	and    eax,0x1000000
     278:	51                   	push   ecx
     279:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     27c:	01 27                	add    DWORD PTR [edi],esp
     27e:	9d                   	popf   
     27f:	00 00                	add    BYTE PTR [eax],al
     281:	00 01                	add    BYTE PTR [ecx],al
     283:	56                   	push   esi
     284:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     287:	01 27                	add    DWORD PTR [edi],esp
     289:	9d                   	popf   
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	00 01                	add    BYTE PTR [ecx],al
     28e:	53                   	push   ebx
     28f:	00 06                	add    BYTE PTR [esi],al
     291:	8c 01                	mov    WORD PTR [ecx],es
     293:	00 00                	add    BYTE PTR [eax],al
     295:	01 33                	add    DWORD PTR [ebx],esi
     297:	3a 00                	cmp    al,BYTE PTR [eax]
     299:	00 00                	add    BYTE PTR [eax],al
     29b:	c5 00                	lds    eax,FWORD PTR [eax]
     29d:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     2a3:	01 9c 51 01 00 00 07 	add    DWORD PTR [ecx+edx*2+0x7000001],ebx
     2aa:	e1 0b                	loope  2b7 <sysEnter_Vector-0x12fd49>
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	01 33                	add    DWORD PTR [ebx],esi
     2b0:	9d                   	popf   
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 02                	add    BYTE PTR [edx],al
     2b5:	91                   	xchg   ecx,eax
     2b6:	00 07                	add    BYTE PTR [edi],al
     2b8:	bf 01 00 00 01       	mov    edi,0x1000001
     2bd:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     2c3:	91                   	xchg   ecx,eax
     2c4:	04 08                	add    al,0x8
     2c6:	63 00                	arpl   WORD PTR [eax],ax
     2c8:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     2ce:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     2d1:	70 00                	jo     2d3 <sysEnter_Vector-0x12fd2d>
     2d3:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2d9:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     2dc:	73 00                	jae    2de <sysEnter_Vector-0x12fd22>
     2de:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2e4:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2e7:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
     2ed:	34 56                	xor    al,0x56
     2ef:	00 00                	add    BYTE PTR [eax],al
     2f1:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
     2f7:	9f                   	lahf   
     2f8:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     2fb:	00 00                	add    BYTE PTR [eax],al
     2fd:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
     303:	05 03 f0 61 00       	add    eax,0x61f003
     308:	9f                   	lahf   
     309:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     30c:	00 00                	add    BYTE PTR [eax],al
     30e:	03 36                	add    esi,DWORD PTR [esi]
     310:	56                   	push   esi
     311:	00 00                	add    BYTE PTR [eax],al
     313:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
     319:	9f                   	lahf   
     31a:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     31e:	00 03                	add    BYTE PTR [ebx],al
     320:	37                   	aaa    
     321:	7a 00                	jp     323 <sysEnter_Vector-0x12fcdd>
     323:	00 00                	add    BYTE PTR [eax],al
     325:	05 03 f8 61 00       	add    eax,0x61f803
     32a:	9f                   	lahf   
     32b:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     32e:	00 00                	add    BYTE PTR [eax],al
     330:	04 2f                	add    al,0x2f
     332:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     333:	01 00                	add    DWORD PTR [eax],eax
     335:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
     33b:	9f                   	lahf   
     33c:	05 04 6f 00 00       	add    eax,0x6f04
     341:	00 09                	add    BYTE PTR [ecx],cl
     343:	91                   	xchg   ecx,eax
     344:	00 00                	add    BYTE PTR [eax],al
     346:	00 04 30             	add    BYTE PTR [eax+esi*1],al
     349:	3a 00                	cmp    al,BYTE PTR [eax]
     34b:	00 00                	add    BYTE PTR [eax],al
     34d:	05 03 e0 61 00       	add    eax,0x61e003
     352:	9f                   	lahf   
     353:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     356:	00 00                	add    BYTE PTR [eax],al
     358:	05 53 ce 01 00       	add    eax,0x1ce53
     35d:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
     363:	9f                   	lahf   
     364:	05 04 9d 00 00       	add    eax,0x9d04
     369:	00 00                	add    BYTE PTR [eax],al
     36b:	74 01                	je     36e <sysEnter_Vector-0x12fc92>
     36d:	00 00                	add    BYTE PTR [eax],al
     36f:	04 00                	add    al,0x0
     371:	0e                   	push   cs
     372:	01 00                	add    DWORD PTR [eax],eax
     374:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     377:	ac                   	lods   al,BYTE PTR ds:[esi]
     378:	00 00                	add    BYTE PTR [eax],al
     37a:	00 0c cd 01 00 00 1e 	add    BYTE PTR [ecx*8+0x1e000001],cl
     381:	00 00                	add    BYTE PTR [eax],al
     383:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     386:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     38c:	ef                   	out    dx,eax
     38d:	01 00                	add    DWORD PTR [eax],eax
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	01 06                	add    DWORD PTR [esi],eax
     393:	8c 00                	mov    WORD PTR [eax],es
     395:	00 00                	add    BYTE PTR [eax],al
     397:	02 01                	add    al,BYTE PTR [ecx]
     399:	06                   	push   es
     39a:	85 00                	test   DWORD PTR [eax],eax
     39c:	00 00                	add    BYTE PTR [eax],al
     39e:	02 02                	add    al,BYTE PTR [edx]
     3a0:	05 72 01 00 00       	add    eax,0x172
     3a5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ac:	02 08                	add    cl,BYTE PTR [eax]
     3ae:	05 00 00 00 00       	add    eax,0x0
     3b3:	02 01                	add    al,BYTE PTR [ecx]
     3b5:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     3bb:	02 07                	add    al,BYTE PTR [edi]
     3bd:	19 01                	sbb    DWORD PTR [ecx],eax
     3bf:	00 00                	add    BYTE PTR [eax],al
     3c1:	04 0e                	add    al,0xe
     3c3:	00 00                	add    BYTE PTR [eax],al
     3c5:	00 02                	add    BYTE PTR [edx],al
     3c7:	34 61                	xor    al,0x61
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	61                   	popa   
     3d0:	00 00                	add    BYTE PTR [eax],al
     3d2:	00 02                	add    BYTE PTR [edx],al
     3d4:	08 07                	or     BYTE PTR [edi],al
     3d6:	57                   	push   edi
     3d7:	00 00                	add    BYTE PTR [eax],al
     3d9:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     3e0:	56                   	push   esi
     3e1:	61                   	popa   
     3e2:	00 00                	add    BYTE PTR [eax],al
     3e4:	00 02                	add    BYTE PTR [edx],al
     3e6:	04 05                	add    al,0x5
     3e8:	05 00 00 00 02       	add    eax,0x2000000
     3ed:	0c 04                	or     al,0x4
     3ef:	66 01 00             	add    WORD PTR [eax],ax
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	01 02                	add    DWORD PTR [edx],eax
     3f6:	13 01                	adc    eax,DWORD PTR [ecx]
     3f8:	00 00                	add    BYTE PTR [eax],al
     3fa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3fd:	83 01 00             	add    DWORD PTR [ecx],0x0
     400:	00 02                	add    BYTE PTR [edx],al
     402:	04 07                	add    al,0x7
     404:	5c                   	pop    esp
     405:	00 00                	add    BYTE PTR [eax],al
     407:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     40d:	00 06                	add    BYTE PTR [esi],al
     40f:	02 02                	add    al,BYTE PTR [edx]
     411:	00 00                	add    BYTE PTR [eax],al
     413:	01 28                	add    DWORD PTR [eax],ebp
     415:	9d                   	popf   
     416:	00 00                	add    BYTE PTR [eax],al
     418:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     41b:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     421:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
     428:	73 00                	jae    42a <sysEnter_Vector-0x12fbd6>
     42a:	01 28                	add    DWORD PTR [eax],ebp
     42c:	9d                   	popf   
     42d:	00 00                	add    BYTE PTR [eax],al
     42f:	00 02                	add    BYTE PTR [edx],al
     431:	91                   	xchg   ecx,eax
     432:	00 08                	add    BYTE PTR [eax],cl
     434:	fc                   	cld    
     435:	01 00                	add    DWORD PTR [eax],eax
     437:	00 01                	add    BYTE PTR [ecx],al
     439:	28 9d 00 00 00 02    	sub    BYTE PTR [ebp+0x2000000],bl
     43f:	91                   	xchg   ecx,eax
     440:	04 09                	add    al,0x9
     442:	f6 01 00             	test   BYTE PTR [ecx],0x0
     445:	00 01                	add    BYTE PTR [ecx],al
     447:	2a 9d 00 00 00 05    	sub    bl,BYTE PTR [ebp+0x5000000]
     44d:	03 fc                	add    edi,esp
     44f:	61                   	popa   
     450:	00 9f 0a 63 68 00    	add    BYTE PTR [edi+0x68630a],bl
     456:	01 2b                	add    DWORD PTR [ebx],ebp
     458:	3a 00                	cmp    al,BYTE PTR [eax]
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     45f:	0b a3 00 00 00 03    	or     esp,DWORD PTR [ebx+0x3000000]
     465:	34 56                	xor    al,0x56
     467:	00 00                	add    BYTE PTR [eax],al
     469:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
     46f:	9f                   	lahf   
     470:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
     473:	00 00                	add    BYTE PTR [eax],al
     475:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
     47b:	05 03 f0 61 00       	add    eax,0x61f003
     480:	9f                   	lahf   
     481:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
     484:	00 00                	add    BYTE PTR [eax],al
     486:	03 36                	add    esi,DWORD PTR [esi]
     488:	56                   	push   esi
     489:	00 00                	add    BYTE PTR [eax],al
     48b:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
     491:	9f                   	lahf   
     492:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
     496:	00 03                	add    BYTE PTR [ebx],al
     498:	37                   	aaa    
     499:	7a 00                	jp     49b <sysEnter_Vector-0x12fb65>
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	05 03 f8 61 00       	add    eax,0x61f803
     4a2:	9f                   	lahf   
     4a3:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
     4a6:	00 00                	add    BYTE PTR [eax],al
     4a8:	04 2f                	add    al,0x2f
     4aa:	49                   	dec    ecx
     4ab:	01 00                	add    DWORD PTR [eax],eax
     4ad:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
     4b3:	9f                   	lahf   
     4b4:	05 04 6f 00 00       	add    eax,0x6f04
     4b9:	00 0b                	add    BYTE PTR [ebx],cl
     4bb:	91                   	xchg   ecx,eax
     4bc:	00 00                	add    BYTE PTR [eax],al
     4be:	00 04 30             	add    BYTE PTR [eax+esi*1],al
     4c1:	3a 00                	cmp    al,BYTE PTR [eax]
     4c3:	00 00                	add    BYTE PTR [eax],al
     4c5:	05 03 e0 61 00       	add    eax,0x61e003
     4ca:	9f                   	lahf   
     4cb:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
     4ce:	00 00                	add    BYTE PTR [eax],al
     4d0:	05 53 71 01 00       	add    eax,0x17153
     4d5:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
     4db:	9f                   	lahf   
     4dc:	05 04 9d 00 00       	add    eax,0x9d04
     4e1:	00 00                	add    BYTE PTR [eax],al
     4e3:	45                   	inc    ebp
     4e4:	02 00                	add    al,BYTE PTR [eax]
     4e6:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     4e9:	b7 01                	mov    bh,0x1
     4eb:	00 00                	add    BYTE PTR [eax],al
     4ed:	04 01                	add    al,0x1
     4ef:	ac                   	lods   al,BYTE PTR ds:[esi]
     4f0:	00 00                	add    BYTE PTR [eax],al
     4f2:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
     4f5:	02 00                	add    al,BYTE PTR [eax]
     4f7:	00 1e                	add    BYTE PTR [esi],bl
     4f9:	00 00                	add    BYTE PTR [eax],al
     4fb:	00 b4 01 00 9f 49 02 	add    BYTE PTR [ecx+eax*1+0x2499f00],dh
     502:	00 00                	add    BYTE PTR [eax],al
     504:	d1 02                	rol    DWORD PTR [edx],1
     506:	00 00                	add    BYTE PTR [eax],al
     508:	02 01                	add    al,BYTE PTR [ecx]
     50a:	06                   	push   es
     50b:	8c 00                	mov    WORD PTR [eax],es
     50d:	00 00                	add    BYTE PTR [eax],al
     50f:	02 01                	add    al,BYTE PTR [ecx]
     511:	06                   	push   es
     512:	85 00                	test   DWORD PTR [eax],eax
     514:	00 00                	add    BYTE PTR [eax],al
     516:	02 02                	add    al,BYTE PTR [edx]
     518:	05 72 01 00 00       	add    eax,0x172
     51d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     524:	02 08                	add    cl,BYTE PTR [eax]
     526:	05 00 00 00 00       	add    eax,0x0
     52b:	02 01                	add    al,BYTE PTR [ecx]
     52d:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     533:	02 07                	add    al,BYTE PTR [edi]
     535:	19 01                	sbb    DWORD PTR [ecx],eax
     537:	00 00                	add    BYTE PTR [eax],al
     539:	04 0e                	add    al,0xe
     53b:	00 00                	add    BYTE PTR [eax],al
     53d:	00 02                	add    BYTE PTR [edx],al
     53f:	34 61                	xor    al,0x61
     541:	00 00                	add    BYTE PTR [eax],al
     543:	00 02                	add    BYTE PTR [edx],al
     545:	04 07                	add    al,0x7
     547:	61                   	popa   
     548:	00 00                	add    BYTE PTR [eax],al
     54a:	00 02                	add    BYTE PTR [edx],al
     54c:	08 07                	or     BYTE PTR [edi],al
     54e:	57                   	push   edi
     54f:	00 00                	add    BYTE PTR [eax],al
     551:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     558:	56                   	push   esi
     559:	61                   	popa   
     55a:	00 00                	add    BYTE PTR [eax],al
     55c:	00 02                	add    BYTE PTR [edx],al
     55e:	04 05                	add    al,0x5
     560:	05 00 00 00 02       	add    eax,0x2000000
     565:	0c 04                	or     al,0x4
     567:	66 01 00             	add    WORD PTR [eax],ax
     56a:	00 02                	add    BYTE PTR [edx],al
     56c:	01 02                	add    DWORD PTR [edx],eax
     56e:	13 01                	adc    eax,DWORD PTR [ecx]
     570:	00 00                	add    BYTE PTR [eax],al
     572:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     575:	83 01 00             	add    DWORD PTR [ecx],0x0
     578:	00 02                	add    BYTE PTR [edx],al
     57a:	04 07                	add    al,0x7
     57c:	5c                   	pop    esp
     57d:	00 00                	add    BYTE PTR [eax],al
     57f:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     585:	00 06                	add    BYTE PTR [esi],al
     587:	20 02                	and    BYTE PTR [edx],al
     589:	00 00                	add    BYTE PTR [eax],al
     58b:	01 09                	add    DWORD PTR [ecx],ecx
     58d:	b4 01                	mov    ah,0x1
     58f:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
     595:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     59c:	73 00                	jae    59e <sysEnter_Vector-0x12fa62>
     59e:	01 09                	add    DWORD PTR [ecx],ecx
     5a0:	9d                   	popf   
     5a1:	00 00                	add    BYTE PTR [eax],al
     5a3:	00 02                	add    BYTE PTR [edx],al
     5a5:	91                   	xchg   ecx,eax
     5a6:	00 08                	add    BYTE PTR [eax],cl
     5a8:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     5ae:	00 00                	add    BYTE PTR [eax],al
     5b0:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     5b6:	01 0b                	add    DWORD PTR [ebx],ecx
     5b8:	3a 00                	cmp    al,BYTE PTR [eax]
     5ba:	00 00                	add    BYTE PTR [eax],al
     5bc:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     5c2:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     5c9:	91                   	xchg   ecx,eax
     5ca:	67 00 06 1b 02       	add    BYTE PTR ds:0x21b,al
     5cf:	00 00                	add    BYTE PTR [eax],al
     5d1:	01 15 2b 02 00 9f    	add    DWORD PTR ds:0x9f00022b,edx
     5d7:	bb 00 00 00 01       	mov    ebx,0x1000000
     5dc:	9c                   	pushf  
     5dd:	31 01                	xor    DWORD PTR [ecx],eax
     5df:	00 00                	add    BYTE PTR [eax],al
     5e1:	07                   	pop    es
     5e2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5e3:	00 01                	add    BYTE PTR [ecx],al
     5e5:	15 3a 00 00 00       	adc    eax,0x3a
     5ea:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     5f0:	01 15 9d 00 00 00    	add    DWORD PTR ds:0x9d,edx
     5f6:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5fc:	01 17                	add    DWORD PTR [edi],edx
     5fe:	3a 00                	cmp    al,BYTE PTR [eax]
     600:	00 00                	add    BYTE PTR [eax],al
     602:	02 91 6c 09 29 02    	add    dl,BYTE PTR [ecx+0x229096c]
     608:	00 00                	add    BYTE PTR [eax],al
     60a:	01 17                	add    DWORD PTR [edi],edx
     60c:	3a 00                	cmp    al,BYTE PTR [eax]
     60e:	00 00                	add    BYTE PTR [eax],al
     610:	02 91 68 00 06 15    	add    dl,BYTE PTR [ecx+0x15060068]
     616:	02 00                	add    al,BYTE PTR [eax]
     618:	00 01                	add    BYTE PTR [ecx],al
     61a:	25 e6 02 00 9f       	and    eax,0x9f0002e6
     61f:	bb 00 00 00 01       	mov    ebx,0x1000000
     624:	9c                   	pushf  
     625:	79 01                	jns    628 <sysEnter_Vector-0x12f9d8>
     627:	00 00                	add    BYTE PTR [eax],al
     629:	07                   	pop    es
     62a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     62b:	00 01                	add    BYTE PTR [ecx],al
     62d:	25 3a 00 00 00       	and    eax,0x3a
     632:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     638:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     63e:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     644:	01 27                	add    DWORD PTR [edi],esp
     646:	3a 00                	cmp    al,BYTE PTR [eax]
     648:	00 00                	add    BYTE PTR [eax],al
     64a:	02 91 6c 09 29 02    	add    dl,BYTE PTR [ecx+0x229096c]
     650:	00 00                	add    BYTE PTR [eax],al
     652:	01 27                	add    DWORD PTR [edi],esp
     654:	3a 00                	cmp    al,BYTE PTR [eax]
     656:	00 00                	add    BYTE PTR [eax],al
     658:	02 91 68 00 0a 20    	add    dl,BYTE PTR [ecx+0x200a0068]
     65e:	09 00                	or     DWORD PTR [eax],eax
     660:	00 01                	add    BYTE PTR [ecx],al
     662:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     665:	00 00                	add    BYTE PTR [eax],al
     667:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
     66c:	00 00                	add    BYTE PTR [eax],al
     66e:	00 01                	add    BYTE PTR [ecx],al
     670:	9c                   	pushf  
     671:	c5 01                	lds    eax,FWORD PTR [ecx]
     673:	00 00                	add    BYTE PTR [eax],al
     675:	07                   	pop    es
     676:	73 74                	jae    6ec <sysEnter_Vector-0x12f914>
     678:	72 00                	jb     67a <sysEnter_Vector-0x12f986>
     67a:	01 36                	add    DWORD PTR [esi],esi
     67c:	9d                   	popf   
     67d:	00 00                	add    BYTE PTR [eax],al
     67f:	00 02                	add    BYTE PTR [edx],al
     681:	91                   	xchg   ecx,eax
     682:	00 08                	add    BYTE PTR [eax],cl
     684:	72 65                	jb     6eb <sysEnter_Vector-0x12f915>
     686:	73 00                	jae    688 <sysEnter_Vector-0x12f978>
     688:	01 38                	add    DWORD PTR [eax],edi
     68a:	3a 00                	cmp    al,BYTE PTR [eax]
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     694:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     69a:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     69d:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     6a0:	00 00                	add    BYTE PTR [eax],al
     6a2:	00 02                	add    BYTE PTR [edx],al
     6a4:	91                   	xchg   ecx,eax
     6a5:	70 00                	jo     6a7 <sysEnter_Vector-0x12f959>
     6a7:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
     6aa:	00 00                	add    BYTE PTR [eax],al
     6ac:	00 03                	add    BYTE PTR [ebx],al
     6ae:	34 56                	xor    al,0x56
     6b0:	00 00                	add    BYTE PTR [eax],al
     6b2:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
     6b8:	9f                   	lahf   
     6b9:	0c 34                	or     al,0x34
     6bb:	01 00                	add    DWORD PTR [eax],eax
     6bd:	00 03                	add    BYTE PTR [ebx],al
     6bf:	35 56 00 00 00       	xor    eax,0x56
     6c4:	05 03 f0 61 00       	add    eax,0x61f003
     6c9:	9f                   	lahf   
     6ca:	0c 7b                	or     al,0x7b
     6cc:	00 00                	add    BYTE PTR [eax],al
     6ce:	00 03                	add    BYTE PTR [ebx],al
     6d0:	36                   	ss
     6d1:	56                   	push   esi
     6d2:	00 00                	add    BYTE PTR [eax],al
     6d4:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
     6da:	9f                   	lahf   
     6db:	0c 7c                	or     al,0x7c
     6dd:	01 00                	add    DWORD PTR [eax],eax
     6df:	00 03                	add    BYTE PTR [ebx],al
     6e1:	37                   	aaa    
     6e2:	7a 00                	jp     6e4 <sysEnter_Vector-0x12f91c>
     6e4:	00 00                	add    BYTE PTR [eax],al
     6e6:	05 03 f8 61 00       	add    eax,0x61f803
     6eb:	9f                   	lahf   
     6ec:	0c 6e                	or     al,0x6e
     6ee:	00 00                	add    BYTE PTR [eax],al
     6f0:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
     6f3:	1a 02                	sbb    al,BYTE PTR [edx]
     6f5:	00 00                	add    BYTE PTR [eax],al
     6f7:	05 03 e4 61 00       	add    eax,0x61e403
     6fc:	9f                   	lahf   
     6fd:	05 04 6f 00 00       	add    eax,0x6f04
     702:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
     705:	00 00                	add    BYTE PTR [eax],al
     707:	00 04 30             	add    BYTE PTR [eax+esi*1],al
     70a:	3a 00                	cmp    al,BYTE PTR [eax]
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	05 03 e0 61 00       	add    eax,0x61e003
     713:	9f                   	lahf   
     714:	0c 41                	or     al,0x41
     716:	00 00                	add    BYTE PTR [eax],al
     718:	00 05 53 42 02 00    	add    BYTE PTR ds:0x24253,al
     71e:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
     724:	9f                   	lahf   
     725:	05 04 9d 00 00       	add    eax,0x9d04
     72a:	00 00                	add    BYTE PTR [eax],al
     72c:	f9                   	stc    
     72d:	01 00                	add    DWORD PTR [eax],eax
     72f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     732:	74 02                	je     736 <sysEnter_Vector-0x12f8ca>
     734:	00 00                	add    BYTE PTR [eax],al
     736:	04 01                	add    al,0x1
     738:	ac                   	lods   al,BYTE PTR ds:[esi]
     739:	00 00                	add    BYTE PTR [eax],al
     73b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     73e:	02 00                	add    al,BYTE PTR [eax]
     740:	00 1e                	add    BYTE PTR [esi],bl
     742:	00 00                	add    BYTE PTR [eax],al
     744:	00 00                	add    BYTE PTR [eax],al
     746:	04 00                	add    al,0x0
     748:	9f                   	lahf   
     749:	6e                   	outs   dx,BYTE PTR ds:[esi]
     74a:	01 00                	add    DWORD PTR [eax],eax
     74c:	00 ef                	add    bh,ch
     74e:	03 00                	add    eax,DWORD PTR [eax]
     750:	00 02                	add    BYTE PTR [edx],al
     752:	01 06                	add    DWORD PTR [esi],eax
     754:	85 00                	test   DWORD PTR [eax],eax
     756:	00 00                	add    BYTE PTR [eax],al
     758:	02 02                	add    al,BYTE PTR [edx]
     75a:	05 72 01 00 00       	add    eax,0x172
     75f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     766:	02 08                	add    cl,BYTE PTR [eax]
     768:	05 00 00 00 00       	add    eax,0x0
     76d:	02 01                	add    al,BYTE PTR [ecx]
     76f:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     775:	02 07                	add    al,BYTE PTR [edi]
     777:	19 01                	sbb    DWORD PTR [ecx],eax
     779:	00 00                	add    BYTE PTR [eax],al
     77b:	04 0e                	add    al,0xe
     77d:	00 00                	add    BYTE PTR [eax],al
     77f:	00 02                	add    BYTE PTR [edx],al
     781:	34 5a                	xor    al,0x5a
     783:	00 00                	add    BYTE PTR [eax],al
     785:	00 02                	add    BYTE PTR [edx],al
     787:	04 07                	add    al,0x7
     789:	61                   	popa   
     78a:	00 00                	add    BYTE PTR [eax],al
     78c:	00 02                	add    BYTE PTR [edx],al
     78e:	08 07                	or     BYTE PTR [edi],al
     790:	57                   	push   edi
     791:	00 00                	add    BYTE PTR [eax],al
     793:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     79a:	56                   	push   esi
     79b:	5a                   	pop    edx
     79c:	00 00                	add    BYTE PTR [eax],al
     79e:	00 02                	add    BYTE PTR [edx],al
     7a0:	04 07                	add    al,0x7
     7a2:	83 01 00             	add    DWORD PTR [ecx],0x0
     7a5:	00 02                	add    BYTE PTR [edx],al
     7a7:	01 06                	add    DWORD PTR [esi],eax
     7a9:	8c 00                	mov    WORD PTR [eax],es
     7ab:	00 00                	add    BYTE PTR [eax],al
     7ad:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     7b4:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     7b7:	66 01 00             	add    WORD PTR [eax],ax
     7ba:	00 02                	add    BYTE PTR [edx],al
     7bc:	01 02                	add    DWORD PTR [edx],eax
     7be:	13 01                	adc    eax,DWORD PTR [ecx]
     7c0:	00 00                	add    BYTE PTR [eax],al
     7c2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     7c5:	5c                   	pop    esp
     7c6:	00 00                	add    BYTE PTR [eax],al
     7c8:	00 05 04 7a 00 00    	add    BYTE PTR ds:0x7a04,al
     7ce:	00 06                	add    BYTE PTR [esi],al
     7d0:	3c 02                	cmp    al,0x2
     7d2:	00 00                	add    BYTE PTR [eax],al
     7d4:	01 0d 00 04 00 9f    	add    DWORD PTR ds:0x9f000400,ecx
     7da:	ba 00 00 00 01       	mov    edx,0x1000000
     7df:	9c                   	pushf  
     7e0:	fb                   	sti    
     7e1:	00 00                	add    BYTE PTR [eax],al
     7e3:	00 07                	add    BYTE PTR [edi],al
     7e5:	78 00                	js     7e7 <sysEnter_Vector-0x12f819>
     7e7:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     7ed:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     7f3:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     7f9:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     7ff:	64 00 01             	add    BYTE PTR fs:[ecx],al
     802:	0f fb 00             	psubq  mm0,QWORD PTR [eax]
     805:	00 00                	add    BYTE PTR [eax],al
     807:	02 91 66 09 6e 02    	add    dl,BYTE PTR [ecx+0x26e0966]
     80d:	00 00                	add    BYTE PTR [eax],al
     80f:	01 10                	add    DWORD PTR [eax],edx
     811:	0b 01                	or     eax,DWORD PTR [ecx]
     813:	00 00                	add    BYTE PTR [eax],al
     815:	02 91 63 09 7e 02    	add    dl,BYTE PTR [ecx+0x27e0963]
     81b:	00 00                	add    BYTE PTR [eax],al
     81d:	01 10                	add    DWORD PTR [eax],edx
     81f:	0b 01                	or     eax,DWORD PTR [ecx]
     821:	00 00                	add    BYTE PTR [eax],al
     823:	02 91 60 00 0a 7a    	add    dl,BYTE PTR [ecx+0x7a0a0060]
     829:	00 00                	add    BYTE PTR [eax],al
     82b:	00 0b                	add    BYTE PTR [ebx],cl
     82d:	01 00                	add    DWORD PTR [eax],eax
     82f:	00 0b                	add    BYTE PTR [ebx],cl
     831:	73 00                	jae    833 <sysEnter_Vector-0x12f7cd>
     833:	00 00                	add    BYTE PTR [eax],al
     835:	09 00                	or     DWORD PTR [eax],eax
     837:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
     83a:	00 00                	add    BYTE PTR [eax],al
     83c:	1b 01                	sbb    eax,DWORD PTR [ecx]
     83e:	00 00                	add    BYTE PTR [eax],al
     840:	0b 73 00             	or     esi,DWORD PTR [ebx+0x0]
     843:	00 00                	add    BYTE PTR [eax],al
     845:	02 00                	add    al,BYTE PTR [eax]
     847:	0c 45                	or     al,0x45
     849:	02 00                	add    al,BYTE PTR [eax]
     84b:	00 01                	add    BYTE PTR [ecx],al
     84d:	1d ba 04 00 9f       	sbb    eax,0x9f0004ba
     852:	5a                   	pop    edx
     853:	00 00                	add    BYTE PTR [eax],al
     855:	00 01                	add    BYTE PTR [ecx],al
     857:	9c                   	pushf  
     858:	3f                   	aas    
     859:	01 00                	add    DWORD PTR [eax],eax
     85b:	00 08                	add    BYTE PTR [eax],cl
     85d:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     860:	00 01                	add    BYTE PTR [ecx],al
     862:	1f                   	pop    ds
     863:	fb                   	sti    
     864:	00 00                	add    BYTE PTR [eax],al
     866:	00 02                	add    BYTE PTR [edx],al
     868:	91                   	xchg   ecx,eax
     869:	66                   	data16
     86a:	00 0c 58             	add    BYTE PTR [eax+ebx*2],cl
     86d:	02 00                	add    al,BYTE PTR [eax]
     86f:	00 01                	add    BYTE PTR [ecx],al
     871:	27                   	daa    
     872:	14 05                	adc    al,0x5
     874:	00 9f 5a 00 00 00    	add    BYTE PTR [edi+0x5a],bl
     87a:	01 9c 63 01 00 00 08 	add    DWORD PTR [ebx+eiz*2+0x8000001],ebx
     881:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     884:	00 01                	add    BYTE PTR [ecx],al
     886:	29 fb                	sub    ebx,edi
     888:	00 00                	add    BYTE PTR [eax],al
     88a:	00 02                	add    BYTE PTR [edx],al
     88c:	91                   	xchg   ecx,eax
     88d:	66                   	data16
     88e:	00 0d 6e 00 00 00    	add    BYTE PTR ds:0x6e,cl
     894:	03 2f                	add    ebp,DWORD PTR [edi]
     896:	74 01                	je     899 <sysEnter_Vector-0x12f767>
     898:	00 00                	add    BYTE PTR [eax],al
     89a:	05 03 e4 61 00       	add    eax,0x61e403
     89f:	9f                   	lahf   
     8a0:	05 04 68 00 00       	add    eax,0x6804
     8a5:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
     8ab:	03 30                	add    esi,DWORD PTR [eax]
     8ad:	33 00                	xor    eax,DWORD PTR [eax]
     8af:	00 00                	add    BYTE PTR [eax],al
     8b1:	05 03 e0 61 00       	add    eax,0x61e003
     8b6:	9f                   	lahf   
     8b7:	0d a3 00 00 00       	or     eax,0xa3
     8bc:	04 34                	add    al,0x34
     8be:	4f                   	dec    edi
     8bf:	00 00                	add    BYTE PTR [eax],al
     8c1:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
     8c7:	9f                   	lahf   
     8c8:	0d 34 01 00 00       	or     eax,0x134
     8cd:	04 35                	add    al,0x35
     8cf:	4f                   	dec    edi
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	00 05 03 f0 61 00    	add    BYTE PTR ds:0x61f003,al
     8d8:	9f                   	lahf   
     8d9:	0d 7b 00 00 00       	or     eax,0x7b
     8de:	04 36                	add    al,0x36
     8e0:	4f                   	dec    edi
     8e1:	00 00                	add    BYTE PTR [eax],al
     8e3:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
     8e9:	9f                   	lahf   
     8ea:	0d 7c 01 00 00       	or     eax,0x17c
     8ef:	04 37                	add    al,0x37
     8f1:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
     8f7:	f8                   	clc    
     8f8:	61                   	popa   
     8f9:	00 9f 0d 41 00 00    	add    BYTE PTR [edi+0x410d],bl
     8ff:	00 05 53 e0 01 00    	add    BYTE PTR ds:0x1e053,al
     905:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
     90b:	9f                   	lahf   
     90c:	05 04 9d 00 00       	add    eax,0x9d04
     911:	00 0d 73 02 00 00    	add    BYTE PTR ds:0x273,cl
     917:	01 0b                	add    DWORD PTR [ebx],ecx
     919:	f7 01 00 00 05 03    	test   DWORD PTR [ecx],0x3050000
     91f:	e0 5a                	loopne 97b <sysEnter_Vector-0x12f685>
     921:	00 9f 0e 0b 01 00    	add    BYTE PTR [edi+0x10b0e],bl
     927:	00 00                	add    BYTE PTR [eax],al
     929:	e5 01                	in     eax,0x1
     92b:	00 00                	add    BYTE PTR [eax],al
     92d:	04 00                	add    al,0x0
     92f:	3d 03 00 00 04       	cmp    eax,0x4000003
     934:	01 ac 00 00 00 0c 99 	add    DWORD PTR [eax+eax*1-0x66f40000],ebp
     93b:	02 00                	add    al,BYTE PTR [eax]
     93d:	00 1e                	add    BYTE PTR [esi],bl
     93f:	00 00                	add    BYTE PTR [eax],al
     941:	00 70 05             	add    BYTE PTR [eax+0x5],dh
     944:	00 9f 6b 02 00 00    	add    BYTE PTR [edi+0x26b],bl
     94a:	cb                   	retf   
     94b:	04 00                	add    al,0x0
     94d:	00 02                	add    BYTE PTR [edx],al
     94f:	01 06                	add    DWORD PTR [esi],eax
     951:	8c 00                	mov    WORD PTR [eax],es
     953:	00 00                	add    BYTE PTR [eax],al
     955:	02 01                	add    al,BYTE PTR [ecx]
     957:	06                   	push   es
     958:	85 00                	test   DWORD PTR [eax],eax
     95a:	00 00                	add    BYTE PTR [eax],al
     95c:	02 02                	add    al,BYTE PTR [edx]
     95e:	05 72 01 00 00       	add    eax,0x172
     963:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     96a:	02 08                	add    cl,BYTE PTR [eax]
     96c:	05 00 00 00 00       	add    eax,0x0
     971:	02 01                	add    al,BYTE PTR [ecx]
     973:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     979:	02 07                	add    al,BYTE PTR [edi]
     97b:	19 01                	sbb    DWORD PTR [ecx],eax
     97d:	00 00                	add    BYTE PTR [eax],al
     97f:	04 0e                	add    al,0xe
     981:	00 00                	add    BYTE PTR [eax],al
     983:	00 02                	add    BYTE PTR [edx],al
     985:	34 61                	xor    al,0x61
     987:	00 00                	add    BYTE PTR [eax],al
     989:	00 02                	add    BYTE PTR [edx],al
     98b:	04 07                	add    al,0x7
     98d:	61                   	popa   
     98e:	00 00                	add    BYTE PTR [eax],al
     990:	00 02                	add    BYTE PTR [edx],al
     992:	08 07                	or     BYTE PTR [edi],al
     994:	57                   	push   edi
     995:	00 00                	add    BYTE PTR [eax],al
     997:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     99e:	56                   	push   esi
     99f:	61                   	popa   
     9a0:	00 00                	add    BYTE PTR [eax],al
     9a2:	00 02                	add    BYTE PTR [edx],al
     9a4:	04 05                	add    al,0x5
     9a6:	05 00 00 00 02       	add    eax,0x2000000
     9ab:	0c 04                	or     al,0x4
     9ad:	66 01 00             	add    WORD PTR [eax],ax
     9b0:	00 02                	add    BYTE PTR [edx],al
     9b2:	01 02                	add    DWORD PTR [edx],eax
     9b4:	13 01                	adc    eax,DWORD PTR [ecx]
     9b6:	00 00                	add    BYTE PTR [eax],al
     9b8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     9bb:	83 01 00             	add    DWORD PTR [ecx],0x0
     9be:	00 02                	add    BYTE PTR [edx],al
     9c0:	04 07                	add    al,0x7
     9c2:	5c                   	pop    esp
     9c3:	00 00                	add    BYTE PTR [eax],al
     9c5:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     9cb:	00 06                	add    BYTE PTR [esi],al
     9cd:	b8 02 00 00 01       	mov    eax,0x1000002
     9d2:	09 3a                	or     DWORD PTR [edx],edi
     9d4:	00 00                	add    BYTE PTR [eax],al
     9d6:	00 70 05             	add    BYTE PTR [eax+0x5],dh
     9d9:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     9df:	01 9c f1 00 00 00 07 	add    DWORD PTR [ecx+esi*8+0x7000000],ebx
     9e6:	83 02 00             	add    DWORD PTR [edx],0x0
     9e9:	00 01                	add    BYTE PTR [ecx],al
     9eb:	09 9d 00 00 00 02    	or     DWORD PTR [ebp+0x2000000],ebx
     9f1:	91                   	xchg   ecx,eax
     9f2:	00 07                	add    BYTE PTR [edi],al
     9f4:	b2 02                	mov    dl,0x2
     9f6:	00 00                	add    BYTE PTR [eax],al
     9f8:	01 09                	add    DWORD PTR [ecx],ecx
     9fa:	9d                   	popf   
     9fb:	00 00                	add    BYTE PTR [eax],al
     9fd:	00 02                	add    BYTE PTR [edx],al
     9ff:	91                   	xchg   ecx,eax
     a00:	04 08                	add    al,0x8
     a02:	82                   	(bad)  
     a03:	05 00 9f 8e 00       	add    eax,0x8e9f00
     a08:	00 00                	add    BYTE PTR [eax],al
     a0a:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     a0d:	74 00                	je     a0f <sysEnter_Vector-0x12f5f1>
     a0f:	01 0b                	add    DWORD PTR [ebx],ecx
     a11:	3a 00                	cmp    al,BYTE PTR [eax]
     a13:	00 00                	add    BYTE PTR [eax],al
     a15:	02 91 6c 00 00 0a    	add    dl,BYTE PTR [ecx+0xa00006c]
     a1b:	ab                   	stos   DWORD PTR es:[edi],eax
     a1c:	02 00                	add    al,BYTE PTR [eax]
     a1e:	00 01                	add    BYTE PTR [ecx],al
     a20:	14 1a                	adc    al,0x1a
     a22:	06                   	push   es
     a23:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     a29:	01 9c 65 01 00 00 07 	add    DWORD PTR [ebp+eiz*2+0x7000001],ebx
     a30:	83 02 00             	add    DWORD PTR [edx],0x0
     a33:	00 01                	add    BYTE PTR [ecx],al
     a35:	14 9d                	adc    al,0x9d
     a37:	00 00                	add    BYTE PTR [eax],al
     a39:	00 02                	add    BYTE PTR [edx],al
     a3b:	91                   	xchg   ecx,eax
     a3c:	00 07                	add    BYTE PTR [edi],al
     a3e:	b2 02                	mov    dl,0x2
     a40:	00 00                	add    BYTE PTR [eax],al
     a42:	01 14 9d 00 00 00 02 	add    DWORD PTR [ebx*4+0x2000000],edx
     a49:	91                   	xchg   ecx,eax
     a4a:	04 0b                	add    al,0xb
     a4c:	8b 02                	mov    eax,DWORD PTR [edx]
     a4e:	00 00                	add    BYTE PTR [eax],al
     a50:	01 16                	add    DWORD PTR [esi],edx
     a52:	56                   	push   esi
     a53:	00 00                	add    BYTE PTR [eax],al
     a55:	00 02                	add    BYTE PTR [edx],al
     a57:	91                   	xchg   ecx,eax
     a58:	6c                   	ins    BYTE PTR es:[edi],dx
     a59:	0c 33                	or     al,0x33
     a5b:	06                   	push   es
     a5c:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     a62:	4c                   	dec    esp
     a63:	01 00                	add    DWORD PTR [eax],eax
     a65:	00 09                	add    BYTE PTR [ecx],cl
     a67:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     a6a:	00 01                	add    BYTE PTR [ecx],al
     a6c:	18 3a                	sbb    BYTE PTR [edx],bh
     a6e:	00 00                	add    BYTE PTR [eax],al
     a70:	00 02                	add    BYTE PTR [edx],al
     a72:	91                   	xchg   ecx,eax
     a73:	68 00 08 1e 07       	push   0x71e0800
     a78:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     a7e:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     a81:	74 00                	je     a83 <sysEnter_Vector-0x12f57d>
     a83:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     a86:	00 00                	add    BYTE PTR [eax],al
     a88:	00 02                	add    BYTE PTR [edx],al
     a8a:	91                   	xchg   ecx,eax
     a8b:	64 00 00             	add    BYTE PTR fs:[eax],al
     a8e:	0d a3 00 00 00       	or     eax,0xa3
     a93:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
     a96:	00 00                	add    BYTE PTR [eax],al
     a98:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
     a9e:	9f                   	lahf   
     a9f:	0d 34 01 00 00       	or     eax,0x134
     aa4:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
     aaa:	05 03 f0 61 00       	add    eax,0x61f003
     aaf:	9f                   	lahf   
     ab0:	0d 7b 00 00 00       	or     eax,0x7b
     ab5:	03 36                	add    esi,DWORD PTR [esi]
     ab7:	56                   	push   esi
     ab8:	00 00                	add    BYTE PTR [eax],al
     aba:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
     ac0:	9f                   	lahf   
     ac1:	0d 7c 01 00 00       	or     eax,0x17c
     ac6:	03 37                	add    esi,DWORD PTR [edi]
     ac8:	7a 00                	jp     aca <sysEnter_Vector-0x12f536>
     aca:	00 00                	add    BYTE PTR [eax],al
     acc:	05 03 f8 61 00       	add    eax,0x61f803
     ad1:	9f                   	lahf   
     ad2:	0d 6e 00 00 00       	or     eax,0x6e
     ad7:	04 2f                	add    al,0x2f
     ad9:	ba 01 00 00 05       	mov    edx,0x5000001
     ade:	03 e4                	add    esp,esp
     ae0:	61                   	popa   
     ae1:	00 9f 05 04 6f 00    	add    BYTE PTR [edi+0x6f0405],bl
     ae7:	00 00                	add    BYTE PTR [eax],al
     ae9:	0d 91 00 00 00       	or     eax,0x91
     aee:	04 30                	add    al,0x30
     af0:	3a 00                	cmp    al,BYTE PTR [eax]
     af2:	00 00                	add    BYTE PTR [eax],al
     af4:	05 03 e0 61 00       	add    eax,0x61e003
     af9:	9f                   	lahf   
     afa:	0d 41 00 00 00       	or     eax,0x41
     aff:	05 53 e2 01 00       	add    eax,0x1e253
     b04:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
     b0a:	9f                   	lahf   
     b0b:	05 04 9d 00 00       	add    eax,0x9d04
     b10:	00 00                	add    BYTE PTR [eax],al
     b12:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
     b15:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     b18:	05 04 00 00 04       	add    eax,0x4000004
     b1d:	01 ac 00 00 00 0c 9c 	add    DWORD PTR [eax+eax*1-0x63f40000],ebp
     b24:	04 00                	add    al,0x0
     b26:	00 1e                	add    BYTE PTR [esi],bl
     b28:	00 00                	add    BYTE PTR [eax],al
     b2a:	00 dc                	add    ah,bl
     b2c:	07                   	pop    es
     b2d:	00 9f 3f 02 00 00    	add    BYTE PTR [edi+0x23f],bl
     b33:	df 05 00 00 02 01    	fild   WORD PTR ds:0x1020000
     b39:	06                   	push   es
     b3a:	8c 00                	mov    WORD PTR [eax],es
     b3c:	00 00                	add    BYTE PTR [eax],al
     b3e:	02 01                	add    al,BYTE PTR [ecx]
     b40:	06                   	push   es
     b41:	85 00                	test   DWORD PTR [eax],eax
     b43:	00 00                	add    BYTE PTR [eax],al
     b45:	02 02                	add    al,BYTE PTR [edx]
     b47:	05 72 01 00 00       	add    eax,0x172
     b4c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b53:	02 08                	add    cl,BYTE PTR [eax]
     b55:	05 00 00 00 00       	add    eax,0x0
     b5a:	02 01                	add    al,BYTE PTR [ecx]
     b5c:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     b62:	02 07                	add    al,BYTE PTR [edi]
     b64:	19 01                	sbb    DWORD PTR [ecx],eax
     b66:	00 00                	add    BYTE PTR [eax],al
     b68:	04 0e                	add    al,0xe
     b6a:	00 00                	add    BYTE PTR [eax],al
     b6c:	00 02                	add    BYTE PTR [edx],al
     b6e:	34 61                	xor    al,0x61
     b70:	00 00                	add    BYTE PTR [eax],al
     b72:	00 02                	add    BYTE PTR [edx],al
     b74:	04 07                	add    al,0x7
     b76:	61                   	popa   
     b77:	00 00                	add    BYTE PTR [eax],al
     b79:	00 02                	add    BYTE PTR [edx],al
     b7b:	08 07                	or     BYTE PTR [edi],al
     b7d:	57                   	push   edi
     b7e:	00 00                	add    BYTE PTR [eax],al
     b80:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     b87:	56                   	push   esi
     b88:	61                   	popa   
     b89:	00 00                	add    BYTE PTR [eax],al
     b8b:	00 02                	add    BYTE PTR [edx],al
     b8d:	04 05                	add    al,0x5
     b8f:	05 00 00 00 02       	add    eax,0x2000000
     b94:	0c 04                	or     al,0x4
     b96:	66 01 00             	add    WORD PTR [eax],ax
     b99:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
     b9f:	00 06                	add    BYTE PTR [esi],al
     ba1:	25 00 00 00 02       	and    eax,0x2000000
     ba6:	01 02                	add    DWORD PTR [edx],eax
     ba8:	13 01                	adc    eax,DWORD PTR [ecx]
     baa:	00 00                	add    BYTE PTR [eax],al
     bac:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     baf:	83 01 00             	add    DWORD PTR [ecx],0x0
     bb2:	00 07                	add    BYTE PTR [edi],al
     bb4:	d8 03                	fadd   DWORD PTR [ebx]
     bb6:	00 00                	add    BYTE PTR [eax],al
     bb8:	04 61                	add    al,0x61
     bba:	00 00                	add    BYTE PTR [eax],al
     bbc:	00 06                	add    BYTE PTR [esi],al
     bbe:	15 6f 01 00 00       	adc    eax,0x16f
     bc3:	08 8d 03 00 00 00    	or     BYTE PTR [ebp+0x3],cl
     bc9:	08 d7                	or     bh,dl
     bcb:	04 00                	add    al,0x0
     bcd:	00 01                	add    BYTE PTR [ecx],al
     bcf:	08 fe                	or     dh,bh
     bd1:	02 00                	add    al,BYTE PTR [eax]
     bd3:	00 02                	add    BYTE PTR [edx],al
     bd5:	08 c9                	or     cl,cl
     bd7:	04 00                	add    al,0x0
     bd9:	00 03                	add    BYTE PTR [ebx],al
     bdb:	08 35 03 00 00 04    	or     BYTE PTR ds:0x4000003,dh
     be1:	08 27                	or     BYTE PTR [edi],ah
     be3:	03 00                	add    eax,DWORD PTR [eax]
     be5:	00 05 08 a7 04 00    	add    BYTE PTR ds:0x4a708,al
     beb:	00 06                	add    BYTE PTR [esi],al
     bed:	08 1a                	or     BYTE PTR [edx],bl
     bef:	04 00                	add    al,0x0
     bf1:	00 07                	add    BYTE PTR [edi],al
     bf3:	08 64 03 00          	or     BYTE PTR [ebx+eax*1+0x0],ah
     bf7:	00 08                	add    BYTE PTR [eax],cl
     bf9:	08 0d 04 00 00 09    	or     BYTE PTR ds:0x9000004,cl
     bff:	08 27                	or     BYTE PTR [edi],ah
     c01:	04 00                	add    al,0x0
     c03:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     c06:	52                   	push   edx
     c07:	04 00                	add    al,0x0
     c09:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     c0c:	bf 02 00 00 61       	mov    edi,0x61000002
     c11:	08 e8                	or     al,ch
     c13:	03 00                	add    eax,DWORD PTR [eax]
     c15:	00 97 09 ad 03 00    	add    BYTE PTR [edi+0x3ad09],dl
     c1b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     c1e:	09 45 04             	or     DWORD PTR [ebp+0x4],eax
     c21:	00 00                	add    BYTE PTR [eax],al
     c23:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     c26:	76 04                	jbe    c2c <sysEnter_Vector-0x12f3d4>
     c28:	00 00                	add    BYTE PTR [eax],al
     c2a:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
     c2d:	ea 02 00 00 66 01 09 	jmp    0x901:0x66000002
     c34:	4f                   	dec    edi
     c35:	03 00                	add    eax,DWORD PTR [eax]
     c37:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     c3a:	09 42 03             	or     DWORD PTR [edx+0x3],eax
     c3d:	00 00                	add    BYTE PTR [eax],al
     c3f:	68 01 09 f7 04       	push   0x4f70901
     c44:	00 00                	add    BYTE PTR [eax],al
     c46:	69 01 09 d2 02 00    	imul   eax,DWORD PTR [ecx],0x2d209
     c4c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c4f:	09 17                	or     DWORD PTR [edi],edx
     c51:	03 00                	add    eax,DWORD PTR [eax]
     c53:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     c56:	09 bb 04 00 00 00    	or     DWORD PTR [ebx+0x4],edi
     c5c:	03 09                	add    ecx,DWORD PTR [ecx]
     c5e:	36                   	ss
     c5f:	04 00                	add    al,0x0
     c61:	00 01                	add    BYTE PTR [ecx],al
     c63:	03 09                	add    ecx,DWORD PTR [ecx]
     c65:	c4 03                	les    eax,FWORD PTR [ebx]
     c67:	00 00                	add    BYTE PTR [eax],al
     c69:	02 03                	add    al,BYTE PTR [ebx]
     c6b:	09 9d 03 00 00 03    	or     DWORD PTR [ebp+0x3000003],ebx
     c71:	03 09                	add    ecx,DWORD PTR [ecx]
     c73:	fc                   	cld    
     c74:	03 00                	add    eax,DWORD PTR [eax]
     c76:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     c79:	09 66 04             	or     DWORD PTR [esi+0x4],esp
     c7c:	00 00                	add    BYTE PTR [eax],al
     c7e:	05 03 00 0a 04       	add    eax,0x40a0003
     c83:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c86:	5c                   	pop    esp
     c87:	00 00                	add    BYTE PTR [eax],al
     c89:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     c8f:	00 0b                	add    BYTE PTR [ebx],cl
     c91:	06                   	push   es
     c92:	05 00 00 01 0a       	add    eax,0xa010000
     c97:	3a 00                	cmp    al,BYTE PTR [eax]
     c99:	00 00                	add    BYTE PTR [eax],al
     c9b:	dc 07                	fadd   QWORD PTR [edi]
     c9d:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
     ca3:	01 9c c2 01 00 00 0c 	add    DWORD PTR [edx+eax*8+0xc000001],ebx
     caa:	12 03                	adc    al,BYTE PTR [ebx]
     cac:	00 00                	add    BYTE PTR [eax],al
     cae:	01 0a                	add    DWORD PTR [edx],ecx
     cb0:	78 01                	js     cb3 <sysEnter_Vector-0x12f34d>
     cb2:	00 00                	add    BYTE PTR [eax],al
     cb4:	02 91 00 0c 95 04    	add    dl,BYTE PTR [ecx+0x4950c00]
     cba:	00 00                	add    BYTE PTR [eax],al
     cbc:	01 0a                	add    DWORD PTR [edx],ecx
     cbe:	78 01                	js     cc1 <sysEnter_Vector-0x12f33f>
     cc0:	00 00                	add    BYTE PTR [eax],al
     cc2:	02 91 04 0c 5f 04    	add    dl,BYTE PTR [ecx+0x45f0c04]
     cc8:	00 00                	add    BYTE PTR [eax],al
     cca:	01 0a                	add    DWORD PTR [edx],ecx
     ccc:	3a 00                	cmp    al,BYTE PTR [eax]
     cce:	00 00                	add    BYTE PTR [eax],al
     cd0:	02 91 08 00 0b d3    	add    dl,BYTE PTR [ecx-0x2cf4fff8]
     cd6:	03 00                	add    eax,DWORD PTR [eax]
     cd8:	00 01                	add    BYTE PTR [ecx],al
     cda:	0f 6f 01             	movq   mm0,QWORD PTR [ecx]
     cdd:	00 00                	add    BYTE PTR [eax],al
     cdf:	0d 08 00 9f 2d       	or     eax,0x2d9f0008
     ce4:	00 00                	add    BYTE PTR [eax],al
     ce6:	00 01                	add    BYTE PTR [ecx],al
     ce8:	9c                   	pushf  
     ce9:	f8                   	clc    
     cea:	01 00                	add    DWORD PTR [eax],eax
     cec:	00 0c 12             	add    BYTE PTR [edx+edx*1],cl
     cef:	03 00                	add    eax,DWORD PTR [eax]
     cf1:	00 01                	add    BYTE PTR [ecx],al
     cf3:	0f 78 01             	vmread DWORD PTR [ecx],eax
     cf6:	00 00                	add    BYTE PTR [eax],al
     cf8:	02 91 00 0c 90 04    	add    dl,BYTE PTR [ecx+0x4900c00]
     cfe:	00 00                	add    BYTE PTR [eax],al
     d00:	01 0f                	add    DWORD PTR [edi],ecx
     d02:	88 00                	mov    BYTE PTR [eax],al
     d04:	00 00                	add    BYTE PTR [eax],al
     d06:	02 91 04 00 0d ea    	add    dl,BYTE PTR [ecx-0x15f2fffc]
     d0c:	04 00                	add    al,0x0
     d0e:	00 01                	add    BYTE PTR [ecx],al
     d10:	14 3a                	adc    al,0x3a
     d12:	08 00                	or     BYTE PTR [eax],al
     d14:	9f                   	lahf   
     d15:	5d                   	pop    ebp
     d16:	00 00                	add    BYTE PTR [eax],al
     d18:	00 01                	add    BYTE PTR [ecx],al
     d1a:	9c                   	pushf  
     d1b:	0b d0                	or     edx,eax
     d1d:	03 00                	add    eax,DWORD PTR [eax]
     d1f:	00 01                	add    BYTE PTR [ecx],al
     d21:	1c 6f                	sbb    al,0x6f
     d23:	01 00                	add    DWORD PTR [eax],eax
     d25:	00 97 08 00 9f 9c    	add    BYTE PTR [edi-0x6360fff8],dl
     d2b:	00 00                	add    BYTE PTR [eax],al
     d2d:	00 01                	add    BYTE PTR [ecx],al
     d2f:	9c                   	pushf  
     d30:	5b                   	pop    ebx
     d31:	02 00                	add    al,BYTE PTR [eax]
     d33:	00 0c 12             	add    BYTE PTR [edx+edx*1],cl
     d36:	03 00                	add    eax,DWORD PTR [eax]
     d38:	00 01                	add    BYTE PTR [ecx],al
     d3a:	1c 78                	sbb    al,0x78
     d3c:	01 00                	add    DWORD PTR [eax],eax
     d3e:	00 02                	add    BYTE PTR [edx],al
     d40:	91                   	xchg   ecx,eax
     d41:	00 0c 90             	add    BYTE PTR [eax+edx*4],cl
     d44:	04 00                	add    al,0x0
     d46:	00 01                	add    BYTE PTR [ecx],al
     d48:	1c 88                	sbb    al,0x88
     d4a:	00 00                	add    BYTE PTR [eax],al
     d4c:	00 02                	add    BYTE PTR [edx],al
     d4e:	91                   	xchg   ecx,eax
     d4f:	04 0c                	add    al,0xc
     d51:	0b 03                	or     eax,DWORD PTR [ebx]
     d53:	00 00                	add    BYTE PTR [eax],al
     d55:	01 1c 6f             	add    DWORD PTR [edi+ebp*2],ebx
     d58:	01 00                	add    DWORD PTR [eax],eax
     d5a:	00 02                	add    BYTE PTR [edx],al
     d5c:	91                   	xchg   ecx,eax
     d5d:	08 0e                	or     BYTE PTR [esi],cl
     d5f:	e3 02                	jecxz  d63 <sysEnter_Vector-0x12f29d>
     d61:	00 00                	add    BYTE PTR [eax],al
     d63:	01 1e                	add    DWORD PTR [esi],ebx
     d65:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d66:	01 00                	add    DWORD PTR [eax],eax
     d68:	00 02                	add    BYTE PTR [edx],al
     d6a:	91                   	xchg   ecx,eax
     d6b:	6c                   	ins    BYTE PTR es:[edi],dx
     d6c:	00 0f                	add    BYTE PTR [edi],cl
     d6e:	f8                   	clc    
     d6f:	02 00                	add    al,BYTE PTR [eax]
     d71:	00 01                	add    BYTE PTR [ecx],al
     d73:	2a 33                	sub    dh,BYTE PTR [ebx]
     d75:	09 00                	or     DWORD PTR [eax],eax
     d77:	9f                   	lahf   
     d78:	2a 00                	sub    al,BYTE PTR [eax]
     d7a:	00 00                	add    BYTE PTR [eax],al
     d7c:	01 9c 7f 02 00 00 0c 	add    DWORD PTR [edi+edi*2+0xc000002],ebx
     d83:	b4 04                	mov    ah,0x4
     d85:	00 00                	add    BYTE PTR [eax],al
     d87:	01 2a                	add    DWORD PTR [edx],ebp
     d89:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d8a:	01 00                	add    DWORD PTR [eax],eax
     d8c:	00 02                	add    BYTE PTR [edx],al
     d8e:	91                   	xchg   ecx,eax
     d8f:	00 00                	add    BYTE PTR [eax],al
     d91:	0b 8b 04 00 00 01    	or     ecx,DWORD PTR [ebx+0x1000004]
     d97:	2f                   	das    
     d98:	3a 00                	cmp    al,BYTE PTR [eax]
     d9a:	00 00                	add    BYTE PTR [eax],al
     d9c:	5d                   	pop    ebp
     d9d:	09 00                	or     DWORD PTR [eax],eax
     d9f:	9f                   	lahf   
     da0:	35 00 00 00 01       	xor    eax,0x1000000
     da5:	9c                   	pushf  
     da6:	d1 02                	rol    DWORD PTR [edx],1
     da8:	00 00                	add    BYTE PTR [eax],al
     daa:	0c b4                	or     al,0xb4
     dac:	04 00                	add    al,0x0
     dae:	00 01                	add    BYTE PTR [ecx],al
     db0:	2f                   	das    
     db1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     db2:	01 00                	add    DWORD PTR [eax],eax
     db4:	00 02                	add    BYTE PTR [edx],al
     db6:	91                   	xchg   ecx,eax
     db7:	00 0c 95 04 00 00 01 	add    BYTE PTR [edx*4+0x1000004],cl
     dbe:	2f                   	das    
     dbf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dc0:	01 00                	add    DWORD PTR [eax],eax
     dc2:	00 02                	add    BYTE PTR [edx],al
     dc4:	91                   	xchg   ecx,eax
     dc5:	04 0c                	add    al,0xc
     dc7:	6c                   	ins    BYTE PTR es:[edi],dx
     dc8:	06                   	push   es
     dc9:	00 00                	add    BYTE PTR [eax],al
     dcb:	01 2f                	add    DWORD PTR [edi],ebp
     dcd:	3a 00                	cmp    al,BYTE PTR [eax]
     dcf:	00 00                	add    BYTE PTR [eax],al
     dd1:	02 91 08 0c 84 04    	add    dl,BYTE PTR [ecx+0x4840c08]
     dd7:	00 00                	add    BYTE PTR [eax],al
     dd9:	01 2f                	add    DWORD PTR [edi],ebp
     ddb:	3a 00                	cmp    al,BYTE PTR [eax]
     ddd:	00 00                	add    BYTE PTR [eax],al
     ddf:	02 91 0c 00 0b 7a    	add    dl,BYTE PTR [ecx+0x7a0b000c]
     de5:	03 00                	add    eax,DWORD PTR [eax]
     de7:	00 01                	add    BYTE PTR [ecx],al
     de9:	34 3a                	xor    al,0x3a
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	00 92 09 00 9f 35    	add    BYTE PTR [edx+0x359f0009],dl
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	00 01                	add    BYTE PTR [ecx],al
     df7:	9c                   	pushf  
     df8:	23 03                	and    eax,DWORD PTR [ebx]
     dfa:	00 00                	add    BYTE PTR [eax],al
     dfc:	0c b4                	or     al,0xb4
     dfe:	04 00                	add    al,0x0
     e00:	00 01                	add    BYTE PTR [ecx],al
     e02:	34 6f                	xor    al,0x6f
     e04:	01 00                	add    DWORD PTR [eax],eax
     e06:	00 02                	add    BYTE PTR [edx],al
     e08:	91                   	xchg   ecx,eax
     e09:	00 0c 95 04 00 00 01 	add    BYTE PTR [edx*4+0x1000004],cl
     e10:	34 6f                	xor    al,0x6f
     e12:	01 00                	add    DWORD PTR [eax],eax
     e14:	00 02                	add    BYTE PTR [edx],al
     e16:	91                   	xchg   ecx,eax
     e17:	04 0c                	add    al,0xc
     e19:	6c                   	ins    BYTE PTR es:[edi],dx
     e1a:	06                   	push   es
     e1b:	00 00                	add    BYTE PTR [eax],al
     e1d:	01 34 3a             	add    DWORD PTR [edx+edi*1],esi
     e20:	00 00                	add    BYTE PTR [eax],al
     e22:	00 02                	add    BYTE PTR [edx],al
     e24:	91                   	xchg   ecx,eax
     e25:	08 0c 84             	or     BYTE PTR [esp+eax*4],cl
     e28:	04 00                	add    al,0x0
     e2a:	00 01                	add    BYTE PTR [ecx],al
     e2c:	34 3a                	xor    al,0x3a
     e2e:	00 00                	add    BYTE PTR [eax],al
     e30:	00 02                	add    BYTE PTR [edx],al
     e32:	91                   	xchg   ecx,eax
     e33:	0c 00                	or     al,0x0
     e35:	0b e2                	or     esp,edx
     e37:	03 00                	add    eax,DWORD PTR [eax]
     e39:	00 01                	add    BYTE PTR [ecx],al
     e3b:	39 3a                	cmp    DWORD PTR [edx],edi
     e3d:	00 00                	add    BYTE PTR [eax],al
     e3f:	00 c7                	add    bh,al
     e41:	09 00                	or     DWORD PTR [eax],eax
     e43:	9f                   	lahf   
     e44:	26 00 00             	add    BYTE PTR es:[eax],al
     e47:	00 01                	add    BYTE PTR [ecx],al
     e49:	9c                   	pushf  
     e4a:	75 03                	jne    e4f <sysEnter_Vector-0x12f1b1>
     e4c:	00 00                	add    BYTE PTR [eax],al
     e4e:	0c b4                	or     al,0xb4
     e50:	04 00                	add    al,0x0
     e52:	00 01                	add    BYTE PTR [ecx],al
     e54:	39 6f 01             	cmp    DWORD PTR [edi+0x1],ebp
     e57:	00 00                	add    BYTE PTR [eax],al
     e59:	02 91 00 0c 95 04    	add    dl,BYTE PTR [ecx+0x4950c00]
     e5f:	00 00                	add    BYTE PTR [eax],al
     e61:	01 39                	add    DWORD PTR [ecx],edi
     e63:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e64:	01 00                	add    DWORD PTR [eax],eax
     e66:	00 02                	add    BYTE PTR [edx],al
     e68:	91                   	xchg   ecx,eax
     e69:	04 0c                	add    al,0xc
     e6b:	6c                   	ins    BYTE PTR es:[edi],dx
     e6c:	06                   	push   es
     e6d:	00 00                	add    BYTE PTR [eax],al
     e6f:	01 39                	add    DWORD PTR [ecx],edi
     e71:	3a 00                	cmp    al,BYTE PTR [eax]
     e73:	00 00                	add    BYTE PTR [eax],al
     e75:	02 91 08 0c 84 04    	add    dl,BYTE PTR [ecx+0x4840c08]
     e7b:	00 00                	add    BYTE PTR [eax],al
     e7d:	01 39                	add    DWORD PTR [ecx],edi
     e7f:	3a 00                	cmp    al,BYTE PTR [eax]
     e81:	00 00                	add    BYTE PTR [eax],al
     e83:	02 91 0c 00 0b 81    	add    dl,BYTE PTR [ecx-0x7ef4fff4]
     e89:	03 00                	add    eax,DWORD PTR [eax]
     e8b:	00 01                	add    BYTE PTR [ecx],al
     e8d:	3e 3a 00             	cmp    al,BYTE PTR ds:[eax]
     e90:	00 00                	add    BYTE PTR [eax],al
     e92:	ed                   	in     eax,dx
     e93:	09 00                	or     DWORD PTR [eax],eax
     e95:	9f                   	lahf   
     e96:	2e 00 00             	add    BYTE PTR cs:[eax],al
     e99:	00 01                	add    BYTE PTR [ecx],al
     e9b:	9c                   	pushf  
     e9c:	b9 03 00 00 0c       	mov    ecx,0xc000003
     ea1:	b4 04                	mov    ah,0x4
     ea3:	00 00                	add    BYTE PTR [eax],al
     ea5:	01 3e                	add    DWORD PTR [esi],edi
     ea7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ea8:	01 00                	add    DWORD PTR [eax],eax
     eaa:	00 02                	add    BYTE PTR [edx],al
     eac:	91                   	xchg   ecx,eax
     ead:	00 0c 71             	add    BYTE PTR [ecx+esi*2],cl
     eb0:	03 00                	add    eax,DWORD PTR [eax]
     eb2:	00 01                	add    BYTE PTR [ecx],al
     eb4:	3e                   	ds
     eb5:	7a 00                	jp     eb7 <sysEnter_Vector-0x12f149>
     eb7:	00 00                	add    BYTE PTR [eax],al
     eb9:	02 91 04 0c 86 03    	add    dl,BYTE PTR [ecx+0x3860c04]
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	01 3e                	add    DWORD PTR [esi],edi
     ec3:	3a 00                	cmp    al,BYTE PTR [eax]
     ec5:	00 00                	add    BYTE PTR [eax],al
     ec7:	02 91 08 00 10 a3    	add    dl,BYTE PTR [ecx-0x5ceffff8]
     ecd:	00 00                	add    BYTE PTR [eax],al
     ecf:	00 03                	add    BYTE PTR [ebx],al
     ed1:	34 56                	xor    al,0x56
     ed3:	00 00                	add    BYTE PTR [eax],al
     ed5:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
     edb:	9f                   	lahf   
     edc:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
     edf:	00 00                	add    BYTE PTR [eax],al
     ee1:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
     ee7:	05 03 f0 61 00       	add    eax,0x61f003
     eec:	9f                   	lahf   
     eed:	10 7b 00             	adc    BYTE PTR [ebx+0x0],bh
     ef0:	00 00                	add    BYTE PTR [eax],al
     ef2:	03 36                	add    esi,DWORD PTR [esi]
     ef4:	56                   	push   esi
     ef5:	00 00                	add    BYTE PTR [eax],al
     ef7:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
     efd:	9f                   	lahf   
     efe:	10 7c 01 00          	adc    BYTE PTR [ecx+eax*1+0x0],bh
     f02:	00 03                	add    BYTE PTR [ebx],al
     f04:	37                   	aaa    
     f05:	7a 00                	jp     f07 <sysEnter_Vector-0x12f0f9>
     f07:	00 00                	add    BYTE PTR [eax],al
     f09:	05 03 f8 61 00       	add    eax,0x61f803
     f0e:	9f                   	lahf   
     f0f:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
     f12:	00 00                	add    BYTE PTR [eax],al
     f14:	04 2f                	add    al,0x2f
     f16:	0e                   	push   cs
     f17:	04 00                	add    al,0x0
     f19:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
     f1f:	9f                   	lahf   
     f20:	05 04 6f 00 00       	add    eax,0x6f04
     f25:	00 10                	add    BYTE PTR [eax],dl
     f27:	91                   	xchg   ecx,eax
     f28:	00 00                	add    BYTE PTR [eax],al
     f2a:	00 04 30             	add    BYTE PTR [eax+esi*1],al
     f2d:	3a 00                	cmp    al,BYTE PTR [eax]
     f2f:	00 00                	add    BYTE PTR [eax],al
     f31:	05 03 e0 61 00       	add    eax,0x61e003
     f36:	9f                   	lahf   
     f37:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
     f3a:	00 00                	add    BYTE PTR [eax],al
     f3c:	05 53 36 04 00       	add    eax,0x43653
     f41:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
     f47:	9f                   	lahf   
     f48:	05 04 78 01 00       	add    eax,0x17804
     f4d:	00 00                	add    BYTE PTR [eax],al
     f4f:	f4                   	hlt    
     f50:	02 00                	add    al,BYTE PTR [eax]
     f52:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     f55:	f1                   	icebp  
     f56:	04 00                	add    al,0x0
     f58:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     f5b:	ac                   	lods   al,BYTE PTR ds:[esi]
     f5c:	00 00                	add    BYTE PTR [eax],al
     f5e:	00 0c 0d 05 00 00 1e 	add    BYTE PTR [ecx*1+0x1e000005],cl
     f65:	00 00                	add    BYTE PTR [eax],al
     f67:	00 1c 0a             	add    BYTE PTR [edx+ecx*1],bl
     f6a:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
     f70:	06                   	push   es
     f71:	07                   	pop    es
     f72:	00 00                	add    BYTE PTR [eax],al
     f74:	02 01                	add    al,BYTE PTR [ecx]
     f76:	06                   	push   es
     f77:	8c 00                	mov    WORD PTR [eax],es
     f79:	00 00                	add    BYTE PTR [eax],al
     f7b:	02 01                	add    al,BYTE PTR [ecx]
     f7d:	06                   	push   es
     f7e:	85 00                	test   DWORD PTR [eax],eax
     f80:	00 00                	add    BYTE PTR [eax],al
     f82:	02 02                	add    al,BYTE PTR [edx]
     f84:	05 72 01 00 00       	add    eax,0x172
     f89:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     f90:	02 08                	add    cl,BYTE PTR [eax]
     f92:	05 00 00 00 00       	add    eax,0x0
     f97:	02 01                	add    al,BYTE PTR [ecx]
     f99:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     f9f:	02 07                	add    al,BYTE PTR [edi]
     fa1:	19 01                	sbb    DWORD PTR [ecx],eax
     fa3:	00 00                	add    BYTE PTR [eax],al
     fa5:	04 0e                	add    al,0xe
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	00 02                	add    BYTE PTR [edx],al
     fab:	34 61                	xor    al,0x61
     fad:	00 00                	add    BYTE PTR [eax],al
     faf:	00 02                	add    BYTE PTR [edx],al
     fb1:	04 07                	add    al,0x7
     fb3:	61                   	popa   
     fb4:	00 00                	add    BYTE PTR [eax],al
     fb6:	00 02                	add    BYTE PTR [edx],al
     fb8:	08 07                	or     BYTE PTR [edi],al
     fba:	57                   	push   edi
     fbb:	00 00                	add    BYTE PTR [eax],al
     fbd:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     fc4:	56                   	push   esi
     fc5:	61                   	popa   
     fc6:	00 00                	add    BYTE PTR [eax],al
     fc8:	00 02                	add    BYTE PTR [edx],al
     fca:	04 05                	add    al,0x5
     fcc:	05 00 00 00 02       	add    eax,0x2000000
     fd1:	0c 04                	or     al,0x4
     fd3:	66 01 00             	add    WORD PTR [eax],ax
     fd6:	00 02                	add    BYTE PTR [edx],al
     fd8:	01 02                	add    DWORD PTR [edx],eax
     fda:	13 01                	adc    eax,DWORD PTR [ecx]
     fdc:	00 00                	add    BYTE PTR [eax],al
     fde:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     fe1:	83 01 00             	add    DWORD PTR [ecx],0x0
     fe4:	00 05 d8 03 00 00    	add    BYTE PTR ds:0x3d8,al
     fea:	04 61                	add    al,0x61
     fec:	00 00                	add    BYTE PTR [eax],al
     fee:	00 06                	add    BYTE PTR [esi],al
     ff0:	15 64 01 00 00       	adc    eax,0x164
     ff5:	06                   	push   es
     ff6:	8d 03                	lea    eax,[ebx]
     ff8:	00 00                	add    BYTE PTR [eax],al
     ffa:	00 06                	add    BYTE PTR [esi],al
     ffc:	d7                   	xlat   BYTE PTR ds:[ebx]
     ffd:	04 00                	add    al,0x0
     fff:	00 01                	add    BYTE PTR [ecx],al
    1001:	06                   	push   es
    1002:	fe 02                	inc    BYTE PTR [edx]
    1004:	00 00                	add    BYTE PTR [eax],al
    1006:	02 06                	add    al,BYTE PTR [esi]
    1008:	c9                   	leave  
    1009:	04 00                	add    al,0x0
    100b:	00 03                	add    BYTE PTR [ebx],al
    100d:	06                   	push   es
    100e:	35 03 00 00 04       	xor    eax,0x4000003
    1013:	06                   	push   es
    1014:	27                   	daa    
    1015:	03 00                	add    eax,DWORD PTR [eax]
    1017:	00 05 06 a7 04 00    	add    BYTE PTR ds:0x4a706,al
    101d:	00 06                	add    BYTE PTR [esi],al
    101f:	06                   	push   es
    1020:	1a 04 00             	sbb    al,BYTE PTR [eax+eax*1]
    1023:	00 07                	add    BYTE PTR [edi],al
    1025:	06                   	push   es
    1026:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    1029:	00 08                	add    BYTE PTR [eax],cl
    102b:	06                   	push   es
    102c:	0d 04 00 00 09       	or     eax,0x9000004
    1031:	06                   	push   es
    1032:	27                   	daa    
    1033:	04 00                	add    al,0x0
    1035:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    1038:	52                   	push   edx
    1039:	04 00                	add    al,0x0
    103b:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    103e:	bf 02 00 00 61       	mov    edi,0x61000002
    1043:	06                   	push   es
    1044:	e8 03 00 00 97       	call   9700104c <sysEnter_Vector+0x96ed104c>
    1049:	07                   	pop    es
    104a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    104b:	03 00                	add    eax,DWORD PTR [eax]
    104d:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1050:	07                   	pop    es
    1051:	45                   	inc    ebp
    1052:	04 00                	add    al,0x0
    1054:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1058:	76 04                	jbe    105e <sysEnter_Vector-0x12efa2>
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	65 01 07             	add    DWORD PTR gs:[edi],eax
    105f:	ea 02 00 00 66 01 07 	jmp    0x701:0x66000002
    1066:	4f                   	dec    edi
    1067:	03 00                	add    eax,DWORD PTR [eax]
    1069:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    106c:	07                   	pop    es
    106d:	42                   	inc    edx
    106e:	03 00                	add    eax,DWORD PTR [eax]
    1070:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1073:	07                   	pop    es
    1074:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    107b:	d2 02                	rol    BYTE PTR [edx],cl
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	70 01                	jo     1082 <sysEnter_Vector-0x12ef7e>
    1081:	07                   	pop    es
    1082:	17                   	pop    ss
    1083:	03 00                	add    eax,DWORD PTR [eax]
    1085:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    1088:	07                   	pop    es
    1089:	bb 04 00 00 00       	mov    ebx,0x4
    108e:	03 07                	add    eax,DWORD PTR [edi]
    1090:	36                   	ss
    1091:	04 00                	add    al,0x0
    1093:	00 01                	add    BYTE PTR [ecx],al
    1095:	03 07                	add    eax,DWORD PTR [edi]
    1097:	c4 03                	les    eax,FWORD PTR [ebx]
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	02 03                	add    al,BYTE PTR [ebx]
    109d:	07                   	pop    es
    109e:	9d                   	popf   
    109f:	03 00                	add    eax,DWORD PTR [eax]
    10a1:	00 03                	add    BYTE PTR [ebx],al
    10a3:	03 07                	add    eax,DWORD PTR [edi]
    10a5:	fc                   	cld    
    10a6:	03 00                	add    eax,DWORD PTR [eax]
    10a8:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    10ab:	07                   	pop    es
    10ac:	66                   	data16
    10ad:	04 00                	add    al,0x0
    10af:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    10b5:	07                   	pop    es
    10b6:	5c                   	pop    esp
    10b7:	00 00                	add    BYTE PTR [eax],al
    10b9:	00 08                	add    BYTE PTR [eax],cl
    10bb:	04 25                	add    al,0x25
    10bd:	00 00                	add    BYTE PTR [eax],al
    10bf:	00 09                	add    BYTE PTR [ecx],cl
    10c1:	46                   	inc    esi
    10c2:	05 00 00 01 0f       	add    eax,0xf010000
    10c7:	1c 0a                	sbb    al,0xa
    10c9:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    10cf:	01 9c 95 01 00 00 0a 	add    DWORD PTR [ebp+edx*4+0xa000001],ebx
    10d6:	95                   	xchg   ebp,eax
    10d7:	04 00                	add    al,0x0
    10d9:	00 01                	add    BYTE PTR [ecx],al
    10db:	0f 6b 01             	packssdw mm0,QWORD PTR [ecx]
    10de:	00 00                	add    BYTE PTR [eax],al
    10e0:	02 91 00 00 09 3c    	add    dl,BYTE PTR [ecx+0x3c090000]
    10e6:	05 00 00 01 14       	add    eax,0x14010000
    10eb:	42                   	inc    edx
    10ec:	0a 00                	or     al,BYTE PTR [eax]
    10ee:	9f                   	lahf   
    10ef:	43                   	inc    ebx
    10f0:	00 00                	add    BYTE PTR [eax],al
    10f2:	00 01                	add    BYTE PTR [ecx],al
    10f4:	9c                   	pushf  
    10f5:	c5 01                	lds    eax,FWORD PTR [ecx]
    10f7:	00 00                	add    BYTE PTR [eax],al
    10f9:	0b 63 00             	or     esp,DWORD PTR [ebx+0x0]
    10fc:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
    1103:	91                   	xchg   ecx,eax
    1104:	60                   	pusha  
    1105:	0c 95                	or     al,0x95
    1107:	04 00                	add    al,0x0
    1109:	00 01                	add    BYTE PTR [ecx],al
    110b:	16                   	push   ss
    110c:	c5 01                	lds    eax,FWORD PTR [ecx]
    110e:	00 00                	add    BYTE PTR [eax],al
    1110:	02 91 72 00 0d 25    	add    dl,BYTE PTR [ecx+0x250d0072]
    1116:	00 00                	add    BYTE PTR [eax],al
    1118:	00 d5                	add    ch,dl
    111a:	01 00                	add    DWORD PTR [eax],eax
    111c:	00 0e                	add    BYTE PTR [esi],cl
    111e:	8f 00                	pop    DWORD PTR [eax]
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	01 00                	add    DWORD PTR [eax],eax
    1124:	0f 4b 05 00 00 01 1f 	cmovnp eax,DWORD PTR ds:0x1f010000
    112b:	25 00 00 00 85       	and    eax,0x85000000
    1130:	0a 00                	or     al,BYTE PTR [eax]
    1132:	9f                   	lahf   
    1133:	43                   	inc    ebx
    1134:	00 00                	add    BYTE PTR [eax],al
    1136:	00 01                	add    BYTE PTR [ecx],al
    1138:	9c                   	pushf  
    1139:	fb                   	sti    
    113a:	01 00                	add    DWORD PTR [eax],eax
    113c:	00 10                	add    BYTE PTR [eax],dl
    113e:	63 00                	arpl   WORD PTR [eax],ax
    1140:	01 21                	add    DWORD PTR [ecx],esp
    1142:	25 00 00 00 02       	and    eax,0x2000000
    1147:	91                   	xchg   ecx,eax
    1148:	73 00                	jae    114a <sysEnter_Vector-0x12eeb6>
    114a:	11 26                	adc    DWORD PTR [esi],esp
    114c:	05 00 00 01 2d       	add    eax,0x2d010000
    1151:	3a 00                	cmp    al,BYTE PTR [eax]
    1153:	00 00                	add    BYTE PTR [eax],al
    1155:	c8 0a 00 9f          	enter  0xa,0x9f
    1159:	ba 00 00 00 01       	mov    edx,0x1000000
    115e:	9c                   	pushf  
    115f:	74 02                	je     1163 <sysEnter_Vector-0x12ee9d>
    1161:	00 00                	add    BYTE PTR [eax],al
    1163:	0a 95 04 00 00 01    	or     dl,BYTE PTR [ebp+0x1000004]
    1169:	2d 6b 01 00 00       	sub    eax,0x16b
    116e:	02 91 00 0a 2b 05    	add    dl,BYTE PTR [ecx+0x52b0a00]
    1174:	00 00                	add    BYTE PTR [eax],al
    1176:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    117c:	02 91 04 0a 0b 03    	add    dl,BYTE PTR [ecx+0x30b0a04]
    1182:	00 00                	add    BYTE PTR [eax],al
    1184:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    118a:	02 91 08 0c 1f 05    	add    dl,BYTE PTR [ecx+0x51f0c08]
    1190:	00 00                	add    BYTE PTR [eax],al
    1192:	01 2f                	add    DWORD PTR [edi],ebp
    1194:	25 00 00 00 02       	and    eax,0x2000000
    1199:	91                   	xchg   ecx,eax
    119a:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
    119d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    119f:	00 01                	add    BYTE PTR [ecx],al
    11a1:	30 3a                	xor    BYTE PTR [edx],bh
    11a3:	00 00                	add    BYTE PTR [eax],al
    11a5:	00 02                	add    BYTE PTR [edx],al
    11a7:	91                   	xchg   ecx,eax
    11a8:	6c                   	ins    BYTE PTR es:[edi],dx
    11a9:	0c 41                	or     al,0x41
    11ab:	05 00 00 01 31       	add    eax,0x31010000
    11b0:	c5 01                	lds    eax,FWORD PTR [ecx]
    11b2:	00 00                	add    BYTE PTR [eax],al
    11b4:	02 91 69 12 32 05    	add    dl,BYTE PTR [ecx+0x5321269]
    11ba:	00 00                	add    BYTE PTR [eax],al
    11bc:	01 36                	add    DWORD PTR [esi],esi
    11be:	05 0b 00 9f 00       	add    eax,0x9f000b
    11c3:	13 a3 00 00 00 03    	adc    esp,DWORD PTR [ebx+0x3000000]
    11c9:	34 56                	xor    al,0x56
    11cb:	00 00                	add    BYTE PTR [eax],al
    11cd:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    11d3:	9f                   	lahf   
    11d4:	13 34 01             	adc    esi,DWORD PTR [ecx+eax*1]
    11d7:	00 00                	add    BYTE PTR [eax],al
    11d9:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    11df:	05 03 f0 61 00       	add    eax,0x61f003
    11e4:	9f                   	lahf   
    11e5:	13 7b 00             	adc    edi,DWORD PTR [ebx+0x0]
    11e8:	00 00                	add    BYTE PTR [eax],al
    11ea:	03 36                	add    esi,DWORD PTR [esi]
    11ec:	56                   	push   esi
    11ed:	00 00                	add    BYTE PTR [eax],al
    11ef:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    11f5:	9f                   	lahf   
    11f6:	13 7c 01 00          	adc    edi,DWORD PTR [ecx+eax*1+0x0]
    11fa:	00 03                	add    BYTE PTR [ebx],al
    11fc:	37                   	aaa    
    11fd:	7a 00                	jp     11ff <sysEnter_Vector-0x12ee01>
    11ff:	00 00                	add    BYTE PTR [eax],al
    1201:	05 03 f8 61 00       	add    eax,0x61f803
    1206:	9f                   	lahf   
    1207:	13 6e 00             	adc    ebp,DWORD PTR [esi+0x0]
    120a:	00 00                	add    BYTE PTR [eax],al
    120c:	04 2f                	add    al,0x2f
    120e:	c9                   	leave  
    120f:	02 00                	add    al,BYTE PTR [eax]
    1211:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    1217:	9f                   	lahf   
    1218:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    121b:	00 00                	add    BYTE PTR [eax],al
    121d:	00 13                	add    BYTE PTR [ebx],dl
    121f:	91                   	xchg   ecx,eax
    1220:	00 00                	add    BYTE PTR [eax],al
    1222:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    1225:	3a 00                	cmp    al,BYTE PTR [eax]
    1227:	00 00                	add    BYTE PTR [eax],al
    1229:	05 03 e0 61 00       	add    eax,0x61e003
    122e:	9f                   	lahf   
    122f:	13 41 00             	adc    eax,DWORD PTR [ecx+0x0]
    1232:	00 00                	add    BYTE PTR [eax],al
    1234:	05 53 f1 02 00       	add    eax,0x2f153
    1239:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    123f:	9f                   	lahf   
    1240:	08 04 6b             	or     BYTE PTR [ebx+ebp*2],al
    1243:	01 00                	add    DWORD PTR [eax],eax
    1245:	00 00                	add    BYTE PTR [eax],al
    1247:	6a 0a                	push   0xa
    1249:	00 00                	add    BYTE PTR [eax],al
    124b:	04 00                	add    al,0x0
    124d:	10 06                	adc    BYTE PTR [esi],al
    124f:	00 00                	add    BYTE PTR [eax],al
    1251:	04 01                	add    al,0x1
    1253:	ac                   	lods   al,BYTE PTR ds:[esi]
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    1259:	07                   	pop    es
    125a:	00 00                	add    BYTE PTR [eax],al
    125c:	1e                   	push   ds
    125d:	00 00                	add    BYTE PTR [eax],al
    125f:	00 84 0b 00 9f ed 0b 	add    BYTE PTR [ebx+ecx*1+0xbed9f00],al
    1266:	00 00                	add    BYTE PTR [eax],al
    1268:	3d 08 00 00 02       	cmp    eax,0x2000008
    126d:	89 06                	mov    DWORD PTR [esi],eax
    126f:	00 00                	add    BYTE PTR [eax],al
    1271:	02 28                	add    ch,BYTE PTR [eax]
    1273:	30 00                	xor    BYTE PTR [eax],al
    1275:	00 00                	add    BYTE PTR [eax],al
    1277:	03 04 b1             	add    eax,DWORD PTR [ecx+esi*4]
    127a:	05 00 00 3a 00       	add    eax,0x3a0000
    127f:	00 00                	add    BYTE PTR [eax],al
    1281:	04 01                	add    al,0x1
    1283:	06                   	push   es
    1284:	8c 00                	mov    WORD PTR [eax],es
    1286:	00 00                	add    BYTE PTR [eax],al
    1288:	02 90 06 00 00 02    	add    dl,BYTE PTR [eax+0x2000006]
    128e:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    1294:	01 06                	add    DWORD PTR [esi],eax
    1296:	85 00                	test   DWORD PTR [eax],eax
    1298:	00 00                	add    BYTE PTR [eax],al
    129a:	04 02                	add    al,0x2
    129c:	05 72 01 00 00       	add    eax,0x172
    12a1:	05 04 05 69 6e       	add    eax,0x6e690504
    12a6:	74 00                	je     12a8 <sysEnter_Vector-0x12ed58>
    12a8:	04 08                	add    al,0x8
    12aa:	05 00 00 00 00       	add    eax,0x0
    12af:	04 01                	add    al,0x1
    12b1:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    12b7:	02 07                	add    al,BYTE PTR [edi]
    12b9:	19 01                	sbb    DWORD PTR [ecx],eax
    12bb:	00 00                	add    BYTE PTR [eax],al
    12bd:	02 0e                	add    cl,BYTE PTR [esi]
    12bf:	00 00                	add    BYTE PTR [eax],al
    12c1:	00 03                	add    BYTE PTR [ebx],al
    12c3:	34 81                	xor    al,0x81
    12c5:	00 00                	add    BYTE PTR [eax],al
    12c7:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    12ca:	07                   	pop    es
    12cb:	61                   	popa   
    12cc:	00 00                	add    BYTE PTR [eax],al
    12ce:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    12d1:	07                   	pop    es
    12d2:	57                   	push   edi
    12d3:	00 00                	add    BYTE PTR [eax],al
    12d5:	00 02                	add    BYTE PTR [edx],al
    12d7:	4d                   	dec    ebp
    12d8:	00 00                	add    BYTE PTR [eax],al
    12da:	00 03                	add    BYTE PTR [ebx],al
    12dc:	56                   	push   esi
    12dd:	81 00 00 00 02 66    	add    DWORD PTR [eax],0x66020000
    12e3:	05 00 00 04 d8       	add    eax,0xd8040000
    12e8:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    12ee:	05 05 00 00 00       	add    eax,0x5
    12f3:	04 0c                	add    al,0xc
    12f5:	04 66                	add    al,0x66
    12f7:	01 00                	add    DWORD PTR [eax],eax
    12f9:	00 06                	add    BYTE PTR [esi],al
    12fb:	04 b9                	add    al,0xb9
    12fd:	00 00                	add    BYTE PTR [eax],al
    12ff:	00 07                	add    BYTE PTR [edi],al
    1301:	3a 00                	cmp    al,BYTE PTR [eax]
    1303:	00 00                	add    BYTE PTR [eax],al
    1305:	04 01                	add    al,0x1
    1307:	02 13                	add    dl,BYTE PTR [ebx]
    1309:	01 00                	add    DWORD PTR [eax],eax
    130b:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    130e:	07                   	pop    es
    130f:	83 01 00             	add    DWORD PTR [ecx],0x0
    1312:	00 08                	add    BYTE PTR [eax],cl
    1314:	d8 03                	fadd   DWORD PTR [ebx]
    1316:	00 00                	add    BYTE PTR [eax],al
    1318:	04 81                	add    al,0x81
    131a:	00 00                	add    BYTE PTR [eax],al
    131c:	00 05 15 9a 01 00    	add    BYTE PTR ds:0x19a15,al
    1322:	00 09                	add    BYTE PTR [ecx],cl
    1324:	8d 03                	lea    eax,[ebx]
    1326:	00 00                	add    BYTE PTR [eax],al
    1328:	00 09                	add    BYTE PTR [ecx],cl
    132a:	d7                   	xlat   BYTE PTR ds:[ebx]
    132b:	04 00                	add    al,0x0
    132d:	00 01                	add    BYTE PTR [ecx],al
    132f:	09 fe                	or     esi,edi
    1331:	02 00                	add    al,BYTE PTR [eax]
    1333:	00 02                	add    BYTE PTR [edx],al
    1335:	09 c9                	or     ecx,ecx
    1337:	04 00                	add    al,0x0
    1339:	00 03                	add    BYTE PTR [ebx],al
    133b:	09 35 03 00 00 04    	or     DWORD PTR ds:0x4000003,esi
    1341:	09 27                	or     DWORD PTR [edi],esp
    1343:	03 00                	add    eax,DWORD PTR [eax]
    1345:	00 05 09 a7 04 00    	add    BYTE PTR ds:0x4a709,al
    134b:	00 06                	add    BYTE PTR [esi],al
    134d:	09 1a                	or     DWORD PTR [edx],ebx
    134f:	04 00                	add    al,0x0
    1351:	00 07                	add    BYTE PTR [edi],al
    1353:	09 64 03 00          	or     DWORD PTR [ebx+eax*1+0x0],esp
    1357:	00 08                	add    BYTE PTR [eax],cl
    1359:	09 0d 04 00 00 09    	or     DWORD PTR ds:0x9000004,ecx
    135f:	09 27                	or     DWORD PTR [edi],esp
    1361:	04 00                	add    al,0x0
    1363:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
    1366:	52                   	push   edx
    1367:	04 00                	add    al,0x0
    1369:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    136c:	bf 02 00 00 61       	mov    edi,0x61000002
    1371:	09 e8                	or     eax,ebp
    1373:	03 00                	add    eax,DWORD PTR [eax]
    1375:	00 97 0a ad 03 00    	add    BYTE PTR [edi+0x3ad0a],dl
    137b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    137e:	0a 45 04             	or     al,BYTE PTR [ebp+0x4]
    1381:	00 00                	add    BYTE PTR [eax],al
    1383:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
    1386:	76 04                	jbe    138c <sysEnter_Vector-0x12ec74>
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	65 01 0a             	add    DWORD PTR gs:[edx],ecx
    138d:	ea 02 00 00 66 01 0a 	jmp    0xa01:0x66000002
    1394:	4f                   	dec    edi
    1395:	03 00                	add    eax,DWORD PTR [eax]
    1397:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    139a:	0a 42 03             	or     al,BYTE PTR [edx+0x3]
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	68 01 0a f7 04       	push   0x4f70a01
    13a4:	00 00                	add    BYTE PTR [eax],al
    13a6:	69 01 0a d2 02 00    	imul   eax,DWORD PTR [ecx],0x2d20a
    13ac:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    13af:	0a 17                	or     dl,BYTE PTR [edi]
    13b1:	03 00                	add    eax,DWORD PTR [eax]
    13b3:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    13b6:	0a bb 04 00 00 00    	or     bh,BYTE PTR [ebx+0x4]
    13bc:	03 0a                	add    ecx,DWORD PTR [edx]
    13be:	36                   	ss
    13bf:	04 00                	add    al,0x0
    13c1:	00 01                	add    BYTE PTR [ecx],al
    13c3:	03 0a                	add    ecx,DWORD PTR [edx]
    13c5:	c4 03                	les    eax,FWORD PTR [ebx]
    13c7:	00 00                	add    BYTE PTR [eax],al
    13c9:	02 03                	add    al,BYTE PTR [ebx]
    13cb:	0a 9d 03 00 00 03    	or     bl,BYTE PTR [ebp+0x3000003]
    13d1:	03 0a                	add    ecx,DWORD PTR [edx]
    13d3:	fc                   	cld    
    13d4:	03 00                	add    eax,DWORD PTR [eax]
    13d6:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    13d9:	0a 66 04             	or     ah,BYTE PTR [esi+0x4]
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	05 03 00 0b 04       	add    eax,0x40b0003
    13e3:	04 04                	add    al,0x4
    13e5:	07                   	pop    es
    13e6:	5c                   	pop    esp
    13e7:	00 00                	add    BYTE PTR [eax],al
    13e9:	00 06                	add    BYTE PTR [esi],al
    13eb:	04 3a                	add    al,0x3a
    13ed:	00 00                	add    BYTE PTR [eax],al
    13ef:	00 0c 53             	add    BYTE PTR [ebx+edx*2],cl
    13f2:	06                   	push   es
    13f3:	00 00                	add    BYTE PTR [eax],al
    13f5:	01 11                	add    DWORD PTR [ecx],edx
    13f7:	5a                   	pop    edx
    13f8:	00 00                	add    BYTE PTR [eax],al
    13fa:	00 84 0b 00 9f 3a 00 	add    BYTE PTR [ebx+ecx*1+0x3a9f00],al
    1401:	00 00                	add    BYTE PTR [eax],al
    1403:	01 9c 17 02 00 00 0d 	add    DWORD PTR [edi+edx*1+0xd000002],ebx
    140a:	fd                   	std    
    140b:	05 00 00 01 11       	add    eax,0x11010000
    1410:	5a                   	pop    edx
    1411:	00 00                	add    BYTE PTR [eax],al
    1413:	00 02                	add    BYTE PTR [edx],al
    1415:	91                   	xchg   ecx,eax
    1416:	00 0d a0 06 00 00    	add    BYTE PTR ds:0x6a0,cl
    141c:	01 11                	add    DWORD PTR [ecx],edx
    141e:	76 00                	jbe    1420 <sysEnter_Vector-0x12ebe0>
    1420:	00 00                	add    BYTE PTR [eax],al
    1422:	02 91 04 0d a7 06    	add    dl,BYTE PTR [ecx+0x6a70d04]
    1428:	00 00                	add    BYTE PTR [eax],al
    142a:	01 11                	add    DWORD PTR [ecx],edx
    142c:	76 00                	jbe    142e <sysEnter_Vector-0x12ebd2>
    142e:	00 00                	add    BYTE PTR [eax],al
    1430:	02 91 08 0d ae 06    	add    dl,BYTE PTR [ecx+0x6ae0d08]
    1436:	00 00                	add    BYTE PTR [eax],al
    1438:	01 11                	add    DWORD PTR [ecx],edx
    143a:	76 00                	jbe    143c <sysEnter_Vector-0x12ebc4>
    143c:	00 00                	add    BYTE PTR [eax],al
    143e:	02 91 0c 0d b5 06    	add    dl,BYTE PTR [ecx+0x6b50d0c]
    1444:	00 00                	add    BYTE PTR [eax],al
    1446:	01 11                	add    DWORD PTR [ecx],edx
    1448:	76 00                	jbe    144a <sysEnter_Vector-0x12ebb6>
    144a:	00 00                	add    BYTE PTR [eax],al
    144c:	02 91 10 0e e3 02    	add    dl,BYTE PTR [ecx+0x2e30e10]
    1452:	00 00                	add    BYTE PTR [eax],al
    1454:	01 13                	add    DWORD PTR [ebx],edx
    1456:	5a                   	pop    edx
    1457:	00 00                	add    BYTE PTR [eax],al
    1459:	00 02                	add    BYTE PTR [edx],al
    145b:	91                   	xchg   ecx,eax
    145c:	6c                   	ins    BYTE PTR es:[edi],dx
    145d:	00 0c 47             	add    BYTE PTR [edi+eax*2],cl
    1460:	06                   	push   es
    1461:	00 00                	add    BYTE PTR [eax],al
    1463:	01 18                	add    DWORD PTR [eax],ebx
    1465:	5a                   	pop    edx
    1466:	00 00                	add    BYTE PTR [eax],al
    1468:	00 be 0b 00 9f 3c    	add    BYTE PTR [esi+0x3c9f000b],bh
    146e:	00 00                	add    BYTE PTR [eax],al
    1470:	00 01                	add    BYTE PTR [ecx],al
    1472:	9c                   	pushf  
    1473:	77 02                	ja     1477 <sysEnter_Vector-0x12eb89>
    1475:	00 00                	add    BYTE PTR [eax],al
    1477:	0d fd 05 00 00       	or     eax,0x5fd
    147c:	01 18                	add    DWORD PTR [eax],ebx
    147e:	5a                   	pop    edx
    147f:	00 00                	add    BYTE PTR [eax],al
    1481:	00 02                	add    BYTE PTR [edx],al
    1483:	91                   	xchg   ecx,eax
    1484:	00 0d a0 06 00 00    	add    BYTE PTR ds:0x6a0,cl
    148a:	01 18                	add    DWORD PTR [eax],ebx
    148c:	76 00                	jbe    148e <sysEnter_Vector-0x12eb72>
    148e:	00 00                	add    BYTE PTR [eax],al
    1490:	02 91 04 0d a7 06    	add    dl,BYTE PTR [ecx+0x6a70d04]
    1496:	00 00                	add    BYTE PTR [eax],al
    1498:	01 18                	add    DWORD PTR [eax],ebx
    149a:	76 00                	jbe    149c <sysEnter_Vector-0x12eb64>
    149c:	00 00                	add    BYTE PTR [eax],al
    149e:	02 91 08 0d ae 06    	add    dl,BYTE PTR [ecx+0x6ae0d08]
    14a4:	00 00                	add    BYTE PTR [eax],al
    14a6:	01 18                	add    DWORD PTR [eax],ebx
    14a8:	76 00                	jbe    14aa <sysEnter_Vector-0x12eb56>
    14aa:	00 00                	add    BYTE PTR [eax],al
    14ac:	02 91 0c 0e e3 02    	add    dl,BYTE PTR [ecx+0x2e30e0c]
    14b2:	00 00                	add    BYTE PTR [eax],al
    14b4:	01 1a                	add    DWORD PTR [edx],ebx
    14b6:	5a                   	pop    edx
    14b7:	00 00                	add    BYTE PTR [eax],al
    14b9:	00 02                	add    BYTE PTR [edx],al
    14bb:	91                   	xchg   ecx,eax
    14bc:	6c                   	ins    BYTE PTR es:[edi],dx
    14bd:	00 0c 3b             	add    BYTE PTR [ebx+edi*1],cl
    14c0:	06                   	push   es
    14c1:	00 00                	add    BYTE PTR [eax],al
    14c3:	01 1f                	add    DWORD PTR [edi],ebx
    14c5:	5a                   	pop    edx
    14c6:	00 00                	add    BYTE PTR [eax],al
    14c8:	00 fa                	add    dl,bh
    14ca:	0b 00                	or     eax,DWORD PTR [eax]
    14cc:	9f                   	lahf   
    14cd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    14d0:	00 01                	add    BYTE PTR [ecx],al
    14d2:	9c                   	pushf  
    14d3:	c9                   	leave  
    14d4:	02 00                	add    al,BYTE PTR [eax]
    14d6:	00 0d fd 05 00 00    	add    BYTE PTR ds:0x5fd,cl
    14dc:	01 1f                	add    DWORD PTR [edi],ebx
    14de:	5a                   	pop    edx
    14df:	00 00                	add    BYTE PTR [eax],al
    14e1:	00 02                	add    BYTE PTR [edx],al
    14e3:	91                   	xchg   ecx,eax
    14e4:	00 0d a0 06 00 00    	add    BYTE PTR ds:0x6a0,cl
    14ea:	01 1f                	add    DWORD PTR [edi],ebx
    14ec:	76 00                	jbe    14ee <sysEnter_Vector-0x12eb12>
    14ee:	00 00                	add    BYTE PTR [eax],al
    14f0:	02 91 04 0d a7 06    	add    dl,BYTE PTR [ecx+0x6a70d04]
    14f6:	00 00                	add    BYTE PTR [eax],al
    14f8:	01 1f                	add    DWORD PTR [edi],ebx
    14fa:	76 00                	jbe    14fc <sysEnter_Vector-0x12eb04>
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	02 91 08 0e e3 02    	add    dl,BYTE PTR [ecx+0x2e30e08]
    1504:	00 00                	add    BYTE PTR [eax],al
    1506:	01 21                	add    DWORD PTR [ecx],esp
    1508:	5a                   	pop    edx
    1509:	00 00                	add    BYTE PTR [eax],al
    150b:	00 02                	add    BYTE PTR [edx],al
    150d:	91                   	xchg   ecx,eax
    150e:	6c                   	ins    BYTE PTR es:[edi],dx
    150f:	00 0c 2f             	add    BYTE PTR [edi+ebp*1],cl
    1512:	06                   	push   es
    1513:	00 00                	add    BYTE PTR [eax],al
    1515:	01 26                	add    DWORD PTR [esi],esp
    1517:	5a                   	pop    edx
    1518:	00 00                	add    BYTE PTR [eax],al
    151a:	00 38                	add    BYTE PTR [eax],bh
    151c:	0c 00                	or     al,0x0
    151e:	9f                   	lahf   
    151f:	40                   	inc    eax
    1520:	00 00                	add    BYTE PTR [eax],al
    1522:	00 01                	add    BYTE PTR [ecx],al
    1524:	9c                   	pushf  
    1525:	0d 03 00 00 0d       	or     eax,0xd000003
    152a:	fd                   	std    
    152b:	05 00 00 01 26       	add    eax,0x26010000
    1530:	5a                   	pop    edx
    1531:	00 00                	add    BYTE PTR [eax],al
    1533:	00 02                	add    BYTE PTR [edx],al
    1535:	91                   	xchg   ecx,eax
    1536:	00 0d a0 06 00 00    	add    BYTE PTR ds:0x6a0,cl
    153c:	01 26                	add    DWORD PTR [esi],esp
    153e:	76 00                	jbe    1540 <sysEnter_Vector-0x12eac0>
    1540:	00 00                	add    BYTE PTR [eax],al
    1542:	02 91 04 0e e3 02    	add    dl,BYTE PTR [ecx+0x2e30e04]
    1548:	00 00                	add    BYTE PTR [eax],al
    154a:	01 28                	add    DWORD PTR [eax],ebp
    154c:	5a                   	pop    edx
    154d:	00 00                	add    BYTE PTR [eax],al
    154f:	00 02                	add    BYTE PTR [edx],al
    1551:	91                   	xchg   ecx,eax
    1552:	6c                   	ins    BYTE PTR es:[edi],dx
    1553:	00 0c 23             	add    BYTE PTR [ebx+eiz*1],cl
    1556:	06                   	push   es
    1557:	00 00                	add    BYTE PTR [eax],al
    1559:	01 2d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebp
    155f:	78 0c                	js     156d <sysEnter_Vector-0x12ea93>
    1561:	00 9f 42 00 00 00    	add    BYTE PTR [edi+0x42],bl
    1567:	01 9c 43 03 00 00 0d 	add    DWORD PTR [ebx+eax*2+0xd000003],ebx
    156e:	fd                   	std    
    156f:	05 00 00 01 2d       	add    eax,0x2d010000
    1574:	5a                   	pop    edx
    1575:	00 00                	add    BYTE PTR [eax],al
    1577:	00 02                	add    BYTE PTR [edx],al
    1579:	91                   	xchg   ecx,eax
    157a:	00 0e                	add    BYTE PTR [esi],cl
    157c:	e3 02                	jecxz  1580 <sysEnter_Vector-0x12ea80>
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	01 2f                	add    DWORD PTR [edi],ebp
    1582:	5a                   	pop    edx
    1583:	00 00                	add    BYTE PTR [eax],al
    1585:	00 02                	add    BYTE PTR [edx],al
    1587:	91                   	xchg   ecx,eax
    1588:	6c                   	ins    BYTE PTR es:[edi],dx
    1589:	00 0f                	add    BYTE PTR [edi],cl
    158b:	a1 05 00 00 01       	mov    eax,ds:0x1000005
    1590:	34 ba                	xor    al,0xba
    1592:	0c 00                	or     al,0x0
    1594:	9f                   	lahf   
    1595:	bf 00 00 00 01       	mov    edi,0x1000000
    159a:	9c                   	pushf  
    159b:	10 34 07             	adc    BYTE PTR [edi+eax*1],dh
    159e:	00 00                	add    BYTE PTR [eax],al
    15a0:	01 46 79             	add    DWORD PTR [esi+0x79],eax
    15a3:	0d 00 9f 23 00       	or     eax,0x239f00
    15a8:	00 00                	add    BYTE PTR [eax],al
    15aa:	01 9c 11 53 05 00 00 	add    DWORD PTR [ecx+edx*1+0x553],ebx
    15b1:	01 4c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ecx
    15b5:	00 00                	add    BYTE PTR [eax],al
    15b7:	9c                   	pushf  
    15b8:	0d 00 9f 59 00       	or     eax,0x599f00
    15bd:	00 00                	add    BYTE PTR [eax],al
    15bf:	01 9c aa 03 00 00 0d 	add    DWORD PTR [edx+ebp*4+0xd000003],ebx
    15c6:	c8 06 00 00          	enter  0x6,0x0
    15ca:	01 4c b3 00          	add    DWORD PTR [ebx+esi*4+0x0],ecx
    15ce:	00 00                	add    BYTE PTR [eax],al
    15d0:	02 91 00 12 0e 6a    	add    dl,BYTE PTR [ecx+0x6a0e1200]
    15d6:	07                   	pop    es
    15d7:	00 00                	add    BYTE PTR [eax],al
    15d9:	01 4e 41             	add    DWORD PTR [esi+0x41],ecx
    15dc:	00 00                	add    BYTE PTR [eax],al
    15de:	00 02                	add    BYTE PTR [edx],al
    15e0:	91                   	xchg   ecx,eax
    15e1:	68 0e 6c 06 00       	push   0x66c0e
    15e6:	00 01                	add    BYTE PTR [ecx],al
    15e8:	51                   	push   ecx
    15e9:	5a                   	pop    edx
    15ea:	00 00                	add    BYTE PTR [eax],al
    15ec:	00 02                	add    BYTE PTR [edx],al
    15ee:	91                   	xchg   ecx,eax
    15ef:	6c                   	ins    BYTE PTR es:[edi],dx
    15f0:	00 11                	add    BYTE PTR [ecx],dl
    15f2:	7c 09                	jl     15fd <sysEnter_Vector-0x12ea03>
    15f4:	00 00                	add    BYTE PTR [eax],al
    15f6:	01 56 5a             	add    DWORD PTR [esi+0x5a],edx
    15f9:	00 00                	add    BYTE PTR [eax],al
    15fb:	00 f5                	add    ch,dh
    15fd:	0d 00 9f 54 00       	or     eax,0x549f00
    1602:	00 00                	add    BYTE PTR [eax],al
    1604:	01 9c ef 03 00 00 0d 	add    DWORD PTR [edi+ebp*8+0xd000003],ebx
    160b:	c8 06 00 00          	enter  0x6,0x0
    160f:	01 56 b3             	add    DWORD PTR [esi-0x4d],edx
    1612:	00 00                	add    BYTE PTR [eax],al
    1614:	00 02                	add    BYTE PTR [edx],al
    1616:	91                   	xchg   ecx,eax
    1617:	00 12                	add    BYTE PTR [edx],dl
    1619:	0e                   	push   cs
    161a:	6a 07                	push   0x7
    161c:	00 00                	add    BYTE PTR [eax],al
    161e:	01 58 41             	add    DWORD PTR [eax+0x41],ebx
    1621:	00 00                	add    BYTE PTR [eax],al
    1623:	00 02                	add    BYTE PTR [edx],al
    1625:	91                   	xchg   ecx,eax
    1626:	68 0e 6c 06 00       	push   0x66c0e
    162b:	00 01                	add    BYTE PTR [ecx],al
    162d:	5b                   	pop    ebx
    162e:	5a                   	pop    edx
    162f:	00 00                	add    BYTE PTR [eax],al
    1631:	00 02                	add    BYTE PTR [edx],al
    1633:	91                   	xchg   ecx,eax
    1634:	6c                   	ins    BYTE PTR es:[edi],dx
    1635:	00 11                	add    BYTE PTR [ecx],dl
    1637:	2c 07                	sub    al,0x7
    1639:	00 00                	add    BYTE PTR [eax],al
    163b:	01 5f 5a             	add    DWORD PTR [edi+0x5a],ebx
    163e:	00 00                	add    BYTE PTR [eax],al
    1640:	00 49 0e             	add    BYTE PTR [ecx+0xe],cl
    1643:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    1649:	01 9c 34 04 00 00 0d 	add    DWORD PTR [esp+esi*1+0xd000004],ebx
    1650:	c8 06 00 00          	enter  0x6,0x0
    1654:	01 5f b3             	add    DWORD PTR [edi-0x4d],ebx
    1657:	00 00                	add    BYTE PTR [eax],al
    1659:	00 02                	add    BYTE PTR [edx],al
    165b:	91                   	xchg   ecx,eax
    165c:	00 12                	add    BYTE PTR [edx],dl
    165e:	0e                   	push   cs
    165f:	6a 07                	push   0x7
    1661:	00 00                	add    BYTE PTR [eax],al
    1663:	01 61 41             	add    DWORD PTR [ecx+0x41],esp
    1666:	00 00                	add    BYTE PTR [eax],al
    1668:	00 02                	add    BYTE PTR [edx],al
    166a:	91                   	xchg   ecx,eax
    166b:	68 0e 6c 06 00       	push   0x66c0e
    1670:	00 01                	add    BYTE PTR [ecx],al
    1672:	64                   	fs
    1673:	5a                   	pop    edx
    1674:	00 00                	add    BYTE PTR [eax],al
    1676:	00 02                	add    BYTE PTR [edx],al
    1678:	91                   	xchg   ecx,eax
    1679:	6c                   	ins    BYTE PTR es:[edi],dx
    167a:	00 11                	add    BYTE PTR [ecx],dl
    167c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    167d:	07                   	pop    es
    167e:	00 00                	add    BYTE PTR [eax],al
    1680:	01 68 5a             	add    DWORD PTR [eax+0x5a],ebp
    1683:	00 00                	add    BYTE PTR [eax],al
    1685:	00 9d 0e 00 9f 34    	add    BYTE PTR [ebp+0x349f000e],bl
    168b:	00 00                	add    BYTE PTR [eax],al
    168d:	00 01                	add    BYTE PTR [ecx],al
    168f:	9c                   	pushf  
    1690:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    1694:	0d c8 06 00 00       	or     eax,0x6c8
    1699:	01 68 b3             	add    DWORD PTR [eax-0x4d],ebp
    169c:	00 00                	add    BYTE PTR [eax],al
    169e:	00 02                	add    BYTE PTR [edx],al
    16a0:	91                   	xchg   ecx,eax
    16a1:	00 12                	add    BYTE PTR [edx],dl
    16a3:	0e                   	push   cs
    16a4:	6a 07                	push   0x7
    16a6:	00 00                	add    BYTE PTR [eax],al
    16a8:	01 6a 41             	add    DWORD PTR [edx+0x41],ebp
    16ab:	00 00                	add    BYTE PTR [eax],al
    16ad:	00 02                	add    BYTE PTR [edx],al
    16af:	91                   	xchg   ecx,eax
    16b0:	74 00                	je     16b2 <sysEnter_Vector-0x12e94e>
    16b2:	11 98 06 00 00 01    	adc    DWORD PTR [eax+0x1000006],ebx
    16b8:	70 5a                	jo     1714 <sysEnter_Vector-0x12e8ec>
    16ba:	00 00                	add    BYTE PTR [eax],al
    16bc:	00 d1                	add    cl,dl
    16be:	0e                   	push   cs
    16bf:	00 9f 37 00 00 00    	add    BYTE PTR [edi+0x37],bl
    16c5:	01 9c b0 04 00 00 0d 	add    DWORD PTR [eax+esi*4+0xd000004],ebx
    16cc:	f2 05 00 00 01 70    	repnz add eax,0x70010000
    16d2:	76 00                	jbe    16d4 <sysEnter_Vector-0x12e92c>
    16d4:	00 00                	add    BYTE PTR [eax],al
    16d6:	02 91 00 0d c8 06    	add    dl,BYTE PTR [ecx+0x6c80d00]
    16dc:	00 00                	add    BYTE PTR [eax],al
    16de:	01 70 b3             	add    DWORD PTR [eax-0x4d],esi
    16e1:	00 00                	add    BYTE PTR [eax],al
    16e3:	00 02                	add    BYTE PTR [edx],al
    16e5:	91                   	xchg   ecx,eax
    16e6:	04 12                	add    al,0x12
    16e8:	0e                   	push   cs
    16e9:	6a 07                	push   0x7
    16eb:	00 00                	add    BYTE PTR [eax],al
    16ed:	01 72 41             	add    DWORD PTR [edx+0x41],esi
    16f0:	00 00                	add    BYTE PTR [eax],al
    16f2:	00 02                	add    BYTE PTR [edx],al
    16f4:	91                   	xchg   ecx,eax
    16f5:	74 00                	je     16f7 <sysEnter_Vector-0x12e909>
    16f7:	0c 0e                	or     al,0xe
    16f9:	06                   	push   es
    16fa:	00 00                	add    BYTE PTR [eax],al
    16fc:	01 7a 81             	add    DWORD PTR [edx-0x7f],edi
    16ff:	00 00                	add    BYTE PTR [eax],al
    1701:	00 08                	add    BYTE PTR [eax],cl
    1703:	0f 00 9f 72 00 00 00 	ltr    WORD PTR [edi+0x72]
    170a:	01 9c fc 04 00 00 0d 	add    DWORD PTR [esp+edi*8+0xd000004],ebx
    1711:	e7 06                	out    0x6,eax
    1713:	00 00                	add    BYTE PTR [eax],al
    1715:	01 7a 81             	add    DWORD PTR [edx-0x7f],edi
    1718:	00 00                	add    BYTE PTR [eax],al
    171a:	00 02                	add    BYTE PTR [edx],al
    171c:	91                   	xchg   ecx,eax
    171d:	00 13                	add    BYTE PTR [ebx],dl
    171f:	1a 0f                	sbb    cl,BYTE PTR [edi]
    1721:	00 9f 54 00 00 00    	add    BYTE PTR [edi+0x54],bl
    1727:	14 73                	adc    al,0x73
    1729:	32 00                	xor    al,BYTE PTR [eax]
    172b:	01 7c 76 00          	add    DWORD PTR [esi+esi*2+0x0],edi
    172f:	00 00                	add    BYTE PTR [eax],al
    1731:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1737:	00 01                	add    BYTE PTR [ecx],al
    1739:	7c 76                	jl     17b1 <sysEnter_Vector-0x12e84f>
    173b:	00 00                	add    BYTE PTR [eax],al
    173d:	00 02                	add    BYTE PTR [edx],al
    173f:	91                   	xchg   ecx,eax
    1740:	68 00 00 0f 76       	push   0x760f0000
    1745:	07                   	pop    es
    1746:	00 00                	add    BYTE PTR [eax],al
    1748:	01 80 7a 0f 00 9f    	add    DWORD PTR [eax-0x60fff086],eax
    174e:	1d 00 00 00 01       	sbb    eax,0x1000000
    1753:	9c                   	pushf  
    1754:	15 5d 07 00 00       	adc    eax,0x75d
    1759:	01 85 97 0f 00 9f    	add    DWORD PTR [ebp-0x60fff069],eax
    175f:	29 00                	sub    DWORD PTR [eax],eax
    1761:	00 00                	add    BYTE PTR [eax],al
    1763:	01 9c 4d 05 00 00 0d 	add    DWORD PTR [ebp+ecx*2+0xd000005],ebx
    176a:	db 06                	fild   DWORD PTR [esi]
    176c:	00 00                	add    BYTE PTR [eax],al
    176e:	01 85 5a 00 00 00    	add    DWORD PTR [ebp+0x5a],eax
    1774:	02 91 00 0d 52 07    	add    dl,BYTE PTR [ecx+0x7520d00]
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	01 85 9a 01 00 00    	add    DWORD PTR [ebp+0x19a],eax
    1782:	02 91 04 0d 6d 05    	add    dl,BYTE PTR [ecx+0x56d0d04]
    1788:	00 00                	add    BYTE PTR [eax],al
    178a:	01 85 5a 00 00 00    	add    DWORD PTR [ebp+0x5a],eax
    1790:	02 91 08 00 16 c9    	add    dl,BYTE PTR [ecx-0x36e9fff8]
    1796:	05 00 00 01 8a       	add    eax,0x8a010000
    179b:	5a                   	pop    edx
    179c:	00 00                	add    BYTE PTR [eax],al
    179e:	00 c0                	add    al,al
    17a0:	0f 00 9f 29 00 00 00 	ltr    WORD PTR [edi+0x29]
    17a7:	01 9c 75 05 00 00 0e 	add    DWORD PTR [ebp+esi*2+0xe000005],ebx
    17ae:	e3 02                	jecxz  17b2 <sysEnter_Vector-0x12e84e>
    17b0:	00 00                	add    BYTE PTR [eax],al
    17b2:	01 8c 76 00 00 00 02 	add    DWORD PTR [esi+esi*2+0x2000000],ecx
    17b9:	91                   	xchg   ecx,eax
    17ba:	74 00                	je     17bc <sysEnter_Vector-0x12e844>
    17bc:	11 e2                	adc    edx,esp
    17be:	06                   	push   es
    17bf:	00 00                	add    BYTE PTR [eax],al
    17c1:	01 92 5a 00 00 00    	add    DWORD PTR [edx+0x5a],edx
    17c7:	e9 0f 00 9f 4c       	jmp    4c9f17db <sysEnter_Vector+0x4c8c17db>
    17cc:	00 00                	add    BYTE PTR [eax],al
    17ce:	00 01                	add    BYTE PTR [ecx],al
    17d0:	9c                   	pushf  
    17d1:	c7 05 00 00 0d 12 03 	mov    DWORD PTR ds:0x120d0000,0x1000003
    17d8:	00 00 01 
    17db:	92                   	xchg   edx,eax
    17dc:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    17e1:	91                   	xchg   ecx,eax
    17e2:	00 0d 18 07 00 00    	add    BYTE PTR ds:0x718,cl
    17e8:	01 92 5a 00 00 00    	add    DWORD PTR [edx+0x5a],edx
    17ee:	02 91 04 0d 41 07    	add    dl,BYTE PTR [ecx+0x7410d04]
    17f4:	00 00                	add    BYTE PTR [eax],al
    17f6:	01 92 c7 05 00 00    	add    DWORD PTR [edx+0x5c7],edx
    17fc:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1802:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1805:	94                   	xchg   esp,eax
    1806:	5a                   	pop    edx
    1807:	00 00                	add    BYTE PTR [eax],al
    1809:	00 02                	add    BYTE PTR [edx],al
    180b:	91                   	xchg   ecx,eax
    180c:	74 00                	je     180e <sysEnter_Vector-0x12e7f2>
    180e:	06                   	push   es
    180f:	04 a3                	add    al,0xa3
    1811:	01 00                	add    DWORD PTR [eax],eax
    1813:	00 11                	add    BYTE PTR [ecx],dl
    1815:	c2 06 00             	ret    0x6
    1818:	00 01                	add    BYTE PTR [ecx],al
    181a:	9a 5a 00 00 00 35 10 	call   0x1035:0x5a
    1821:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
    1827:	01 9c 6f 06 00 00 0d 	add    DWORD PTR [edi+ebp*2+0xd000006],ebx
    182e:	12 03                	adc    al,BYTE PTR [ebx]
    1830:	00 00                	add    BYTE PTR [eax],al
    1832:	01 9a a3 01 00 00    	add    DWORD PTR [edx+0x1a3],ebx
    1838:	02 91 00 14 70 69    	add    dl,BYTE PTR [ecx+0x69701400]
    183e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1841:	9c                   	pushf  
    1842:	5a                   	pop    edx
    1843:	00 00                	add    BYTE PTR [eax],al
    1845:	00 02                	add    BYTE PTR [edx],al
    1847:	91                   	xchg   ecx,eax
    1848:	58                   	pop    eax
    1849:	0e                   	push   cs
    184a:	18 07                	sbb    BYTE PTR [edi],al
    184c:	00 00                	add    BYTE PTR [eax],al
    184e:	01 9c 5a 00 00 00 02 	add    DWORD PTR [edx+ebx*2+0x2000000],ebx
    1855:	91                   	xchg   ecx,eax
    1856:	6c                   	ins    BYTE PTR es:[edi],dx
    1857:	0e                   	push   cs
    1858:	41                   	inc    ecx
    1859:	07                   	pop    es
    185a:	00 00                	add    BYTE PTR [eax],al
    185c:	01 9d c7 05 00 00    	add    DWORD PTR [ebp+0x5c7],ebx
    1862:	02 91 50 0e ce 05    	add    dl,BYTE PTR [ecx+0x5ce0e50]
    1868:	00 00                	add    BYTE PTR [eax],al
    186a:	01 9e a3 01 00 00    	add    DWORD PTR [esi+0x1a3],ebx
    1870:	02 91 68 0e 59 05    	add    dl,BYTE PTR [ecx+0x5590e68]
    1876:	00 00                	add    BYTE PTR [eax],al
    1878:	01 9e a3 01 00 00    	add    DWORD PTR [esi+0x1a3],ebx
    187e:	02 91 64 0e 94 05    	add    dl,BYTE PTR [ecx+0x5940e64]
    1884:	00 00                	add    BYTE PTR [eax],al
    1886:	01 9f a3 01 00 00    	add    DWORD PTR [edi+0x1a3],ebx
    188c:	02 91 54 0e 7e 05    	add    dl,BYTE PTR [ecx+0x57e0e54]
    1892:	00 00                	add    BYTE PTR [eax],al
    1894:	01 b0 5a 00 00 00    	add    DWORD PTR [eax+0x5a],esi
    189a:	02 91 60 13 0b 11    	add    dl,BYTE PTR [ecx+0x110b1360]
    18a0:	00 9f e0 00 00 00    	add    BYTE PTR [edi+0xe0],bl
    18a6:	14 63                	adc    al,0x63
    18a8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18a9:	74 00                	je     18ab <sysEnter_Vector-0x12e755>
    18ab:	01 b2 5a 00 00 00    	add    DWORD PTR [edx+0x5a],esi
    18b1:	02 91 5c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100005c]
    18b7:	bc 06 00 00 01       	mov    esp,0x1000006
    18bc:	c8 5a 00 00          	enter  0x5a,0x0
    18c0:	00 29                	add    BYTE PTR [ecx],ch
    18c2:	12 00                	adc    al,BYTE PTR [eax]
    18c4:	9f                   	lahf   
    18c5:	4f                   	dec    edi
    18c6:	00 00                	add    BYTE PTR [eax],al
    18c8:	00 01                	add    BYTE PTR [ecx],al
    18ca:	9c                   	pushf  
    18cb:	c1 06 00             	rol    DWORD PTR [esi],0x0
    18ce:	00 0d 12 03 00 00    	add    BYTE PTR ds:0x312,cl
    18d4:	01 c8                	add    eax,ecx
    18d6:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    18db:	91                   	xchg   ecx,eax
    18dc:	00 0d 18 07 00 00    	add    BYTE PTR ds:0x718,cl
    18e2:	01 c8                	add    eax,ecx
    18e4:	5a                   	pop    edx
    18e5:	00 00                	add    BYTE PTR [eax],al
    18e7:	00 02                	add    BYTE PTR [edx],al
    18e9:	91                   	xchg   ecx,eax
    18ea:	04 0d                	add    al,0xd
    18ec:	41                   	inc    ecx
    18ed:	07                   	pop    es
    18ee:	00 00                	add    BYTE PTR [eax],al
    18f0:	01 c8                	add    eax,ecx
    18f2:	c7 05 00 00 02 91 08 	mov    DWORD PTR ds:0x91020000,0x69701408
    18f9:	14 70 69 
    18fc:	64 00 01             	add    BYTE PTR fs:[ecx],al
    18ff:	ca 5a 00             	retf   0x5a
    1902:	00 00                	add    BYTE PTR [eax],al
    1904:	02 91 74 00 11 ea    	add    dl,BYTE PTR [ecx-0x15eeff8c]
    190a:	05 00 00 01 d0       	add    eax,0xd0010000
    190f:	5a                   	pop    edx
    1910:	00 00                	add    BYTE PTR [eax],al
    1912:	00 78 12             	add    BYTE PTR [eax+0x12],bh
    1915:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
    191b:	01 9c e9 06 00 00 17 	add    DWORD PTR [ecx+ebp*8+0x17000006],ebx
    1922:	70 69                	jo     198d <sysEnter_Vector-0x12e673>
    1924:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1927:	d0                   	(bad)  
    1928:	76 00                	jbe    192a <sysEnter_Vector-0x12e6d6>
    192a:	00 00                	add    BYTE PTR [eax],al
    192c:	02 91 00 00 15 46    	add    dl,BYTE PTR [ecx+0x46150000]
    1932:	07                   	pop    es
    1933:	00 00                	add    BYTE PTR [eax],al
    1935:	01 d6                	add    esi,edx
    1937:	94                   	xchg   esp,eax
    1938:	12 00                	adc    al,BYTE PTR [eax]
    193a:	9f                   	lahf   
    193b:	20 00                	and    BYTE PTR [eax],al
    193d:	00 00                	add    BYTE PTR [eax],al
    193f:	01 9c 0d 07 00 00 0d 	add    DWORD PTR [ebp+ecx*1+0xd000007],ebx
    1946:	4b                   	dec    ebx
    1947:	07                   	pop    es
    1948:	00 00                	add    BYTE PTR [eax],al
    194a:	01 d6                	add    esi,edx
    194c:	5a                   	pop    edx
    194d:	00 00                	add    BYTE PTR [eax],al
    194f:	00 02                	add    BYTE PTR [edx],al
    1951:	91                   	xchg   ecx,eax
    1952:	00 00                	add    BYTE PTR [eax],al
    1954:	11 7b 07             	adc    DWORD PTR [ebx+0x7],edi
    1957:	00 00                	add    BYTE PTR [eax],al
    1959:	01 dc                	add    esp,ebx
    195b:	a3 01 00 00 b4       	mov    ds:0xb4000001,eax
    1960:	12 00                	adc    al,BYTE PTR [eax]
    1962:	9f                   	lahf   
    1963:	20 00                	and    BYTE PTR [eax],al
    1965:	00 00                	add    BYTE PTR [eax],al
    1967:	01 9c 43 07 00 00 17 	add    DWORD PTR [ebx+eax*2+0x17000007],ebx
    196e:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1971:	00 01                	add    BYTE PTR [ecx],al
    1973:	dc a3 01 00 00 02    	fsub   QWORD PTR [ebx+0x2000001]
    1979:	91                   	xchg   ecx,eax
    197a:	00 0d 6c 06 00 00    	add    BYTE PTR ds:0x66c,cl
    1980:	01 dc                	add    esp,ebx
    1982:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    1989:	00 0c 25 07 00 00 01 	add    BYTE PTR [eiz*1+0x1000007],cl
    1990:	e2 9a                	loop   192c <sysEnter_Vector-0x12e6d4>
    1992:	00 00                	add    BYTE PTR [eax],al
    1994:	00 d4                	add    ah,dl
    1996:	12 00                	adc    al,BYTE PTR [eax]
    1998:	9f                   	lahf   
    1999:	44                   	inc    esp
    199a:	01 00                	add    DWORD PTR [eax],eax
    199c:	00 01                	add    BYTE PTR [ecx],al
    199e:	9c                   	pushf  
    199f:	21 08                	and    DWORD PTR [eax],ecx
    19a1:	00 00                	add    BYTE PTR [eax],al
    19a3:	0d 95 04 00 00       	or     eax,0x495
    19a8:	01 e2                	add    edx,esp
    19aa:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    19af:	91                   	xchg   ecx,eax
    19b0:	00 0d 41 07 00 00    	add    BYTE PTR ds:0x741,cl
    19b6:	01 e2                	add    edx,esp
    19b8:	c7 05 00 00 02 91 04 	mov    DWORD PTR ds:0x91020000,0x6670d04
    19bf:	0d 67 06 
    19c2:	00 00                	add    BYTE PTR [eax],al
    19c4:	01 e2                	add    edx,esp
    19c6:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    19cd:	14 70                	adc    al,0x70
    19cf:	00 01                	add    BYTE PTR [ecx],al
    19d1:	e4 a3                	in     al,0xa3
    19d3:	01 00                	add    DWORD PTR [eax],eax
    19d5:	00 02                	add    BYTE PTR [edx],al
    19d7:	91                   	xchg   ecx,eax
    19d8:	74 0e                	je     19e8 <sysEnter_Vector-0x12e618>
    19da:	86 05 00 00 01 e4    	xchg   BYTE PTR ds:0xe4010000,al
    19e0:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    19e5:	91                   	xchg   ecx,eax
    19e6:	70 14                	jo     19fc <sysEnter_Vector-0x12e604>
    19e8:	63 00                	arpl   WORD PTR [eax],ax
    19ea:	01 e5                	add    ebp,esp
    19ec:	5a                   	pop    edx
    19ed:	00 00                	add    BYTE PTR [eax],al
    19ef:	00 02                	add    BYTE PTR [edx],al
    19f1:	91                   	xchg   ecx,eax
    19f2:	64                   	fs
    19f3:	08 f6                	or     dh,dh
    19f5:	06                   	push   es
    19f6:	00 00                	add    BYTE PTR [eax],al
    19f8:	04 81                	add    al,0x81
    19fa:	00 00                	add    BYTE PTR [eax],al
    19fc:	00 01                	add    BYTE PTR [ecx],al
    19fe:	e6 cf                	out    0xcf,al
    1a00:	07                   	pop    es
    1a01:	00 00                	add    BYTE PTR [eax],al
    1a03:	09 f1                	or     ecx,esi
    1a05:	06                   	push   es
    1a06:	00 00                	add    BYTE PTR [eax],al
    1a08:	00 09                	add    BYTE PTR [ecx],cl
    1a0a:	5f                   	pop    edi
    1a0b:	06                   	push   es
    1a0c:	00 00                	add    BYTE PTR [eax],al
    1a0e:	01 09                	add    DWORD PTR [ecx],ecx
    1a10:	fd                   	std    
    1a11:	06                   	push   es
    1a12:	00 00                	add    BYTE PTR [eax],al
    1a14:	02 00                	add    al,BYTE PTR [eax]
    1a16:	0e                   	push   cs
    1a17:	ab                   	stos   DWORD PTR es:[edi],eax
    1a18:	05 00 00 01 e6       	add    eax,0xe6010000
    1a1d:	ac                   	lods   al,BYTE PTR ds:[esi]
    1a1e:	07                   	pop    es
    1a1f:	00 00                	add    BYTE PTR [eax],al
    1a21:	02 91 6c 0e 18 07    	add    dl,BYTE PTR [ecx+0x7180e6c]
    1a27:	00 00                	add    BYTE PTR [eax],al
    1a29:	01 e7                	add    edi,esp
    1a2b:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    1a32:	18 20                	sbb    BYTE PTR [eax],ah
    1a34:	13 00                	adc    eax,DWORD PTR [eax]
    1a36:	9f                   	lahf   
    1a37:	0e                   	push   cs
    1a38:	00 00                	add    BYTE PTR [eax],al
    1a3a:	00 07                	add    BYTE PTR [edi],al
    1a3c:	08 00                	or     BYTE PTR [eax],al
    1a3e:	00 0e                	add    BYTE PTR [esi],cl
    1a40:	81 06 00 00 01 ed    	add    DWORD PTR [esi],0xed010000
    1a46:	be 00 00 00 02       	mov    esi,0x2000000
    1a4b:	91                   	xchg   ecx,eax
    1a4c:	63 00                	arpl   WORD PTR [eax],ax
    1a4e:	13 8f 13 00 9f 0e    	adc    ecx,DWORD PTR [edi+0xe9f0013]
    1a54:	00 00                	add    BYTE PTR [eax],al
    1a56:	00 19                	add    BYTE PTR [ecx],bl
    1a58:	81 06 00 00 01 03    	add    DWORD PTR [esi],0x3010000
    1a5e:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    1a64:	91                   	xchg   ecx,eax
    1a65:	62 00                	bound  eax,QWORD PTR [eax]
    1a67:	00 1a                	add    BYTE PTR [edx],bl
    1a69:	c3                   	ret    
    1a6a:	05 00 00 01 12       	add    eax,0x12010000
    1a6f:	01 9a 00 00 00 18    	add    DWORD PTR [edx+0x18000000],ebx
    1a75:	14 00                	adc    al,0x0
    1a77:	9f                   	lahf   
    1a78:	20 00                	and    BYTE PTR [eax],al
    1a7a:	00 00                	add    BYTE PTR [eax],al
    1a7c:	01 9c 69 08 00 00 1b 	add    DWORD PTR [ecx+ebp*2+0x1b000008],ebx
    1a83:	95                   	xchg   ebp,eax
    1a84:	04 00                	add    al,0x0
    1a86:	00 01                	add    BYTE PTR [ecx],al
    1a88:	12 01                	adc    al,BYTE PTR [ecx]
    1a8a:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1a8f:	91                   	xchg   ecx,eax
    1a90:	00 1b                	add    BYTE PTR [ebx],bl
    1a92:	41                   	inc    ecx
    1a93:	07                   	pop    es
    1a94:	00 00                	add    BYTE PTR [eax],al
    1a96:	01 12                	add    DWORD PTR [edx],edx
    1a98:	01 c7                	add    edi,eax
    1a9a:	05 00 00 02 91       	add    eax,0x91020000
    1a9f:	04 1b                	add    al,0x1b
    1aa1:	67 06                	addr16 push es
    1aa3:	00 00                	add    BYTE PTR [eax],al
    1aa5:	01 12                	add    DWORD PTR [edx],edx
    1aa7:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    1aad:	91                   	xchg   ecx,eax
    1aae:	08 00                	or     BYTE PTR [eax],al
    1ab0:	1a 14 06             	sbb    dl,BYTE PTR [esi+eax*1]
    1ab3:	00 00                	add    BYTE PTR [eax],al
    1ab5:	01 17                	add    DWORD PTR [edi],edx
    1ab7:	01 c7                	add    edi,eax
    1ab9:	05 00 00 38 14       	add    eax,0x14380000
    1abe:	00 9f fd 02 00 00    	add    BYTE PTR [edi+0x2fd],bl
    1ac4:	01 9c 58 09 00 00 1b 	add    DWORD PTR [eax+ebx*2+0x1b000009],ebx
    1acb:	1d 07 00 00 01       	sbb    eax,0x1000007
    1ad0:	17                   	pop    ss
    1ad1:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    1ad7:	91                   	xchg   ecx,eax
    1ad8:	00 1b                	add    BYTE PTR [ebx],bl
    1ada:	18 07                	sbb    BYTE PTR [edi],al
    1adc:	00 00                	add    BYTE PTR [eax],al
    1ade:	01 17                	add    DWORD PTR [edi],edx
    1ae0:	01 58 09             	add    DWORD PTR [eax+0x9],ebx
    1ae3:	00 00                	add    BYTE PTR [eax],al
    1ae5:	02 91 04 19 41 07    	add    dl,BYTE PTR [ecx+0x7411904]
    1aeb:	00 00                	add    BYTE PTR [eax],al
    1aed:	01 19                	add    DWORD PTR [ecx],ebx
    1aef:	01 c7                	add    edi,eax
    1af1:	05 00 00 02 91       	add    eax,0x91020000
    1af6:	54                   	push   esp
    1af7:	1c 63                	sbb    al,0x63
    1af9:	6d                   	ins    DWORD PTR es:[edi],dx
    1afa:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1afd:	1a 01                	sbb    al,BYTE PTR [ecx]
    1aff:	5e                   	pop    esi
    1b00:	09 00                	or     DWORD PTR [eax],eax
    1b02:	00 03                	add    BYTE PTR [ebx],al
    1b04:	91                   	xchg   ecx,eax
    1b05:	d0                   	(bad)  
    1b06:	77 19                	ja     1b21 <sysEnter_Vector-0x12e4df>
    1b08:	ce                   	into   
    1b09:	05 00 00 01 1b       	add    eax,0x1b010000
    1b0e:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    1b14:	91                   	xchg   ecx,eax
    1b15:	6c                   	ins    BYTE PTR es:[edi],dx
    1b16:	19 59 05             	sbb    DWORD PTR [ecx+0x5],ebx
    1b19:	00 00                	add    BYTE PTR [eax],al
    1b1b:	01 1b                	add    DWORD PTR [ebx],ebx
    1b1d:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    1b23:	91                   	xchg   ecx,eax
    1b24:	68 19 75 05 00       	push   0x57519
    1b29:	00 01                	add    BYTE PTR [ecx],al
    1b2b:	1b 01                	sbb    eax,DWORD PTR [ecx]
    1b2d:	a3 01 00 00 02       	mov    ds:0x2000001,eax
    1b32:	91                   	xchg   ecx,eax
    1b33:	5c                   	pop    esp
    1b34:	19 05 06 00 00 01    	sbb    DWORD PTR ds:0x1000006,eax
    1b3a:	1c 01                	sbb    al,0x1
    1b3c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1b3d:	09 00                	or     DWORD PTR [eax],eax
    1b3f:	00 03                	add    BYTE PTR [ebx],al
    1b41:	91                   	xchg   ecx,eax
    1b42:	ce                   	into   
    1b43:	77 19                	ja     1b5e <sysEnter_Vector-0x12e4a2>
    1b45:	7e 05                	jle    1b4c <sysEnter_Vector-0x12e4b4>
    1b47:	00 00                	add    BYTE PTR [eax],al
    1b49:	01 35 01 5a 00 00    	add    DWORD PTR ds:0x5a01,esi
    1b4f:	00 02                	add    BYTE PTR [edx],al
    1b51:	91                   	xchg   ecx,eax
    1b52:	64                   	fs
    1b53:	18 ef                	sbb    bh,ch
    1b55:	14 00                	adc    al,0x0
    1b57:	9f                   	lahf   
    1b58:	40                   	inc    eax
    1b59:	00 00                	add    BYTE PTR [eax],al
    1b5b:	00 29                	add    BYTE PTR [ecx],ch
    1b5d:	09 00                	or     DWORD PTR [eax],eax
    1b5f:	00 19                	add    BYTE PTR [ecx],bl
    1b61:	d7                   	xlat   BYTE PTR ds:[ebx]
    1b62:	05 00 00 01 27       	add    eax,0x27010000
    1b67:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    1b6d:	91                   	xchg   ecx,eax
    1b6e:	58                   	pop    eax
    1b6f:	00 13                	add    BYTE PTR [ebx],dl
    1b71:	9f                   	lahf   
    1b72:	15 00 9f 8c 01       	adc    eax,0x18c9f00
    1b77:	00 00                	add    BYTE PTR [eax],al
    1b79:	1c 63                	sbb    al,0x63
    1b7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b7c:	74 00                	je     1b7e <sysEnter_Vector-0x12e482>
    1b7e:	01 37                	add    DWORD PTR [edi],esi
    1b80:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1b83:	00 00                	add    BYTE PTR [eax],al
    1b85:	02 91 60 1d 00 00    	add    dl,BYTE PTR [ecx+0x1d60]
    1b8b:	00 00                	add    BYTE PTR [eax],al
    1b8d:	19 d7                	sbb    edi,edx
    1b8f:	05 00 00 01 3d       	add    eax,0x3d010000
    1b94:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    1b9a:	91                   	xchg   ecx,eax
    1b9b:	50                   	push   eax
    1b9c:	00 00                	add    BYTE PTR [eax],al
    1b9e:	00 06                	add    BYTE PTR [esi],al
    1ba0:	04 5a                	add    al,0x5a
    1ba2:	00 00                	add    BYTE PTR [eax],al
    1ba4:	00 1e                	add    BYTE PTR [esi],bl
    1ba6:	3a 00                	cmp    al,BYTE PTR [eax]
    1ba8:	00 00                	add    BYTE PTR [eax],al
    1baa:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1bab:	09 00                	or     DWORD PTR [eax],eax
    1bad:	00 1f                	add    BYTE PTR [edi],bl
    1baf:	c5 00                	lds    eax,FWORD PTR [eax]
    1bb1:	00 00                	add    BYTE PTR [eax],al
    1bb3:	ff 03                	inc    DWORD PTR [ebx]
    1bb5:	00 1e                	add    BYTE PTR [esi],bl
    1bb7:	3a 00                	cmp    al,BYTE PTR [eax]
    1bb9:	00 00                	add    BYTE PTR [eax],al
    1bbb:	7f 09                	jg     1bc6 <sysEnter_Vector-0x12e43a>
    1bbd:	00 00                	add    BYTE PTR [eax],al
    1bbf:	20 c5                	and    ch,al
    1bc1:	00 00                	add    BYTE PTR [eax],al
    1bc3:	00 01                	add    BYTE PTR [ecx],al
    1bc5:	00 1a                	add    BYTE PTR [edx],bl
    1bc7:	dc 05 00 00 01 55    	fadd   QWORD PTR ds:0x55010000
    1bcd:	01 c7                	add    edi,eax
    1bcf:	05 00 00 35 17       	add    eax,0x17350000
    1bd4:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    1bda:	01 9c b8 09 00 00 1b 	add    DWORD PTR [eax+edi*4+0x1b000009],ebx
    1be1:	1d 07 00 00 01       	sbb    eax,0x1000007
    1be6:	55                   	push   ebp
    1be7:	01 a3 01 00 00 02    	add    DWORD PTR [ebx+0x2000001],esp
    1bed:	91                   	xchg   ecx,eax
    1bee:	00 1b                	add    BYTE PTR [ebx],bl
    1bf0:	18 07                	sbb    BYTE PTR [edi],al
    1bf2:	00 00                	add    BYTE PTR [eax],al
    1bf4:	01 55 01             	add    DWORD PTR [ebp+0x1],edx
    1bf7:	58                   	pop    eax
    1bf8:	09 00                	or     DWORD PTR [eax],eax
    1bfa:	00 02                	add    BYTE PTR [edx],al
    1bfc:	91                   	xchg   ecx,eax
    1bfd:	04 00                	add    al,0x0
    1bff:	21 9c 05 00 00 01 5a 	and    DWORD PTR [ebp+eax*1+0x5a010000],ebx
    1c06:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1c09:	00 00                	add    BYTE PTR [eax],al
    1c0b:	58                   	pop    eax
    1c0c:	17                   	pop    ss
    1c0d:	00 9f 19 00 00 00    	add    BYTE PTR [edi+0x19],bl
    1c13:	01 9c 22 a3 00 00 00 	add    DWORD PTR [edx+eiz*1+0xa3],ebx
    1c1a:	06                   	push   es
    1c1b:	34 76                	xor    al,0x76
    1c1d:	00 00                	add    BYTE PTR [eax],al
    1c1f:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    1c25:	9f                   	lahf   
    1c26:	22 34 01             	and    dh,BYTE PTR [ecx+eax*1]
    1c29:	00 00                	add    BYTE PTR [eax],al
    1c2b:	06                   	push   es
    1c2c:	35 76 00 00 00       	xor    eax,0x76
    1c31:	05 03 f0 61 00       	add    eax,0x61f003
    1c36:	9f                   	lahf   
    1c37:	22 7b 00             	and    bh,BYTE PTR [ebx+0x0]
    1c3a:	00 00                	add    BYTE PTR [eax],al
    1c3c:	06                   	push   es
    1c3d:	36                   	ss
    1c3e:	76 00                	jbe    1c40 <sysEnter_Vector-0x12e3c0>
    1c40:	00 00                	add    BYTE PTR [eax],al
    1c42:	05 03 e8 61 00       	add    eax,0x61e803
    1c47:	9f                   	lahf   
    1c48:	22 7c 01 00          	and    bh,BYTE PTR [ecx+eax*1+0x0]
    1c4c:	00 06                	add    BYTE PTR [esi],al
    1c4e:	37                   	aaa    
    1c4f:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1c50:	00 00                	add    BYTE PTR [eax],al
    1c52:	00 05 03 f8 61 00    	add    BYTE PTR ds:0x61f803,al
    1c58:	9f                   	lahf   
    1c59:	22 6e 00             	and    ch,BYTE PTR [esi+0x0]
    1c5c:	00 00                	add    BYTE PTR [eax],al
    1c5e:	07                   	pop    es
    1c5f:	2f                   	das    
    1c60:	23 0a                	and    ecx,DWORD PTR [edx]
    1c62:	00 00                	add    BYTE PTR [eax],al
    1c64:	05 03 e4 61 00       	add    eax,0x61e403
    1c69:	9f                   	lahf   
    1c6a:	06                   	push   es
    1c6b:	04 8f                	add    al,0x8f
    1c6d:	00 00                	add    BYTE PTR [eax],al
    1c6f:	00 22                	add    BYTE PTR [edx],ah
    1c71:	91                   	xchg   ecx,eax
    1c72:	00 00                	add    BYTE PTR [eax],al
    1c74:	00 07                	add    BYTE PTR [edi],al
    1c76:	30 5a 00             	xor    BYTE PTR [edx+0x0],bl
    1c79:	00 00                	add    BYTE PTR [eax],al
    1c7b:	05 03 e0 61 00       	add    eax,0x61e003
    1c80:	9f                   	lahf   
    1c81:	22 41 00             	and    al,BYTE PTR [ecx+0x0]
    1c84:	00 00                	add    BYTE PTR [eax],al
    1c86:	08 53 c7             	or     BYTE PTR [ebx-0x39],dl
    1c89:	05 00 00 05 03       	add    eax,0x3050000
    1c8e:	f4                   	hlt    
    1c8f:	61                   	popa   
    1c90:	00 9f 22 71 06 00    	add    BYTE PTR [edi+0x67122],bl
    1c96:	00 01                	add    BYTE PTR [ecx],al
    1c98:	0d be 00 00 00       	or     eax,0xbe
    1c9d:	05 03 00 62 00       	add    eax,0x620003
    1ca2:	9f                   	lahf   
    1ca3:	22 cf                	and    cl,bh
    1ca5:	06                   	push   es
    1ca6:	00 00                	add    BYTE PTR [eax],al
    1ca8:	01 0e                	add    DWORD PTR [esi],ecx
    1caa:	a3 01 00 00 05       	mov    ds:0x5000001,eax
    1caf:	03 04 62             	add    eax,DWORD PTR [edx+eiz*2]
    1cb2:	00 9f 00 e6 02 00    	add    BYTE PTR [edi+0x2e600],bl
    1cb8:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1cbb:	0f 08                	invd   
    1cbd:	00 00                	add    BYTE PTR [eax],al
    1cbf:	04 01                	add    al,0x1
    1cc1:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cc2:	00 00                	add    BYTE PTR [eax],al
    1cc4:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
    1cc7:	07                   	pop    es
    1cc8:	00 00                	add    BYTE PTR [eax],al
    1cca:	1e                   	push   ds
    1ccb:	00 00                	add    BYTE PTR [eax],al
    1ccd:	00 74 17 00          	add    BYTE PTR [edi+edx*1+0x0],dh
    1cd1:	9f                   	lahf   
    1cd2:	73 00                	jae    1cd4 <sysEnter_Vector-0x12e32c>
    1cd4:	00 00                	add    BYTE PTR [eax],al
    1cd6:	e3 0a                	jecxz  1ce2 <sysEnter_Vector-0x12e31e>
    1cd8:	00 00                	add    BYTE PTR [eax],al
    1cda:	02 01                	add    al,BYTE PTR [ecx]
    1cdc:	06                   	push   es
    1cdd:	8c 00                	mov    WORD PTR [eax],es
    1cdf:	00 00                	add    BYTE PTR [eax],al
    1ce1:	02 01                	add    al,BYTE PTR [ecx]
    1ce3:	06                   	push   es
    1ce4:	85 00                	test   DWORD PTR [eax],eax
    1ce6:	00 00                	add    BYTE PTR [eax],al
    1ce8:	02 02                	add    al,BYTE PTR [edx]
    1cea:	05 72 01 00 00       	add    eax,0x172
    1cef:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1cf6:	02 08                	add    cl,BYTE PTR [eax]
    1cf8:	05 00 00 00 00       	add    eax,0x0
    1cfd:	02 01                	add    al,BYTE PTR [ecx]
    1cff:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    1d05:	02 07                	add    al,BYTE PTR [edi]
    1d07:	19 01                	sbb    DWORD PTR [ecx],eax
    1d09:	00 00                	add    BYTE PTR [eax],al
    1d0b:	04 0e                	add    al,0xe
    1d0d:	00 00                	add    BYTE PTR [eax],al
    1d0f:	00 02                	add    BYTE PTR [edx],al
    1d11:	34 61                	xor    al,0x61
    1d13:	00 00                	add    BYTE PTR [eax],al
    1d15:	00 02                	add    BYTE PTR [edx],al
    1d17:	04 07                	add    al,0x7
    1d19:	61                   	popa   
    1d1a:	00 00                	add    BYTE PTR [eax],al
    1d1c:	00 02                	add    BYTE PTR [edx],al
    1d1e:	08 07                	or     BYTE PTR [edi],al
    1d20:	57                   	push   edi
    1d21:	00 00                	add    BYTE PTR [eax],al
    1d23:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    1d2a:	56                   	push   esi
    1d2b:	61                   	popa   
    1d2c:	00 00                	add    BYTE PTR [eax],al
    1d2e:	00 04 66             	add    BYTE PTR [esi+eiz*2],al
    1d31:	05 00 00 03 d8       	add    eax,0xd8030000
    1d36:	61                   	popa   
    1d37:	00 00                	add    BYTE PTR [eax],al
    1d39:	00 02                	add    BYTE PTR [edx],al
    1d3b:	04 05                	add    al,0x5
    1d3d:	05 00 00 00 02       	add    eax,0x2000000
    1d42:	0c 04                	or     al,0x4
    1d44:	66 01 00             	add    WORD PTR [eax],ax
    1d47:	00 02                	add    BYTE PTR [edx],al
    1d49:	01 02                	add    DWORD PTR [edx],eax
    1d4b:	13 01                	adc    eax,DWORD PTR [ecx]
    1d4d:	00 00                	add    BYTE PTR [eax],al
    1d4f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1d52:	83 01 00             	add    DWORD PTR [ecx],0x0
    1d55:	00 04 87             	add    BYTE PTR [edi+eax*4],al
    1d58:	07                   	pop    es
    1d59:	00 00                	add    BYTE PTR [eax],al
    1d5b:	04 15                	add    al,0x15
    1d5d:	85 00                	test   DWORD PTR [eax],eax
    1d5f:	00 00                	add    BYTE PTR [eax],al
    1d61:	05 d8 03 00 00       	add    eax,0x3d8
    1d66:	04 61                	add    al,0x61
    1d68:	00 00                	add    BYTE PTR [eax],al
    1d6a:	00 05 15 7a 01 00    	add    BYTE PTR ds:0x17a15,al
    1d70:	00 06                	add    BYTE PTR [esi],al
    1d72:	8d 03                	lea    eax,[ebx]
    1d74:	00 00                	add    BYTE PTR [eax],al
    1d76:	00 06                	add    BYTE PTR [esi],al
    1d78:	d7                   	xlat   BYTE PTR ds:[ebx]
    1d79:	04 00                	add    al,0x0
    1d7b:	00 01                	add    BYTE PTR [ecx],al
    1d7d:	06                   	push   es
    1d7e:	fe 02                	inc    BYTE PTR [edx]
    1d80:	00 00                	add    BYTE PTR [eax],al
    1d82:	02 06                	add    al,BYTE PTR [esi]
    1d84:	c9                   	leave  
    1d85:	04 00                	add    al,0x0
    1d87:	00 03                	add    BYTE PTR [ebx],al
    1d89:	06                   	push   es
    1d8a:	35 03 00 00 04       	xor    eax,0x4000003
    1d8f:	06                   	push   es
    1d90:	27                   	daa    
    1d91:	03 00                	add    eax,DWORD PTR [eax]
    1d93:	00 05 06 a7 04 00    	add    BYTE PTR ds:0x4a706,al
    1d99:	00 06                	add    BYTE PTR [esi],al
    1d9b:	06                   	push   es
    1d9c:	1a 04 00             	sbb    al,BYTE PTR [eax+eax*1]
    1d9f:	00 07                	add    BYTE PTR [edi],al
    1da1:	06                   	push   es
    1da2:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    1da5:	00 08                	add    BYTE PTR [eax],cl
    1da7:	06                   	push   es
    1da8:	0d 04 00 00 09       	or     eax,0x9000004
    1dad:	06                   	push   es
    1dae:	27                   	daa    
    1daf:	04 00                	add    al,0x0
    1db1:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    1db4:	52                   	push   edx
    1db5:	04 00                	add    al,0x0
    1db7:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1dba:	bf 02 00 00 61       	mov    edi,0x61000002
    1dbf:	06                   	push   es
    1dc0:	e8 03 00 00 97       	call   97001dc8 <sysEnter_Vector+0x96ed1dc8>
    1dc5:	07                   	pop    es
    1dc6:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1dc7:	03 00                	add    eax,DWORD PTR [eax]
    1dc9:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1dcc:	07                   	pop    es
    1dcd:	45                   	inc    ebp
    1dce:	04 00                	add    al,0x0
    1dd0:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1dd4:	76 04                	jbe    1dda <sysEnter_Vector-0x12e226>
    1dd6:	00 00                	add    BYTE PTR [eax],al
    1dd8:	65 01 07             	add    DWORD PTR gs:[edi],eax
    1ddb:	ea 02 00 00 66 01 07 	jmp    0x701:0x66000002
    1de2:	4f                   	dec    edi
    1de3:	03 00                	add    eax,DWORD PTR [eax]
    1de5:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1de8:	07                   	pop    es
    1de9:	42                   	inc    edx
    1dea:	03 00                	add    eax,DWORD PTR [eax]
    1dec:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    1def:	07                   	pop    es
    1df0:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    1df7:	d2 02                	rol    BYTE PTR [edx],cl
    1df9:	00 00                	add    BYTE PTR [eax],al
    1dfb:	70 01                	jo     1dfe <sysEnter_Vector-0x12e202>
    1dfd:	07                   	pop    es
    1dfe:	17                   	pop    ss
    1dff:	03 00                	add    eax,DWORD PTR [eax]
    1e01:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    1e04:	07                   	pop    es
    1e05:	bb 04 00 00 00       	mov    ebx,0x4
    1e0a:	03 07                	add    eax,DWORD PTR [edi]
    1e0c:	36                   	ss
    1e0d:	04 00                	add    al,0x0
    1e0f:	00 01                	add    BYTE PTR [ecx],al
    1e11:	03 07                	add    eax,DWORD PTR [edi]
    1e13:	c4 03                	les    eax,FWORD PTR [ebx]
    1e15:	00 00                	add    BYTE PTR [eax],al
    1e17:	02 03                	add    al,BYTE PTR [ebx]
    1e19:	07                   	pop    es
    1e1a:	9d                   	popf   
    1e1b:	03 00                	add    eax,DWORD PTR [eax]
    1e1d:	00 03                	add    BYTE PTR [ebx],al
    1e1f:	03 07                	add    eax,DWORD PTR [edi]
    1e21:	fc                   	cld    
    1e22:	03 00                	add    eax,DWORD PTR [eax]
    1e24:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1e27:	07                   	pop    es
    1e28:	66                   	data16
    1e29:	04 00                	add    al,0x0
    1e2b:	00 05 03 00 08 92    	add    BYTE PTR ds:0x92080003,al
    1e31:	07                   	pop    es
    1e32:	00 00                	add    BYTE PTR [eax],al
    1e34:	18 05 36 ce 01 00    	sbb    BYTE PTR ds:0x1ce36,al
    1e3a:	00 09                	add    BYTE PTR [ecx],cl
    1e3c:	82                   	(bad)  
    1e3d:	07                   	pop    es
    1e3e:	00 00                	add    BYTE PTR [eax],al
    1e40:	05 38 ce 01 00       	add    eax,0x1ce38
    1e45:	00 00                	add    BYTE PTR [eax],al
    1e47:	0a 6c 65 6e          	or     ch,BYTE PTR [ebp+eiz*2+0x6e]
    1e4b:	00 05 39 3a 00 00    	add    BYTE PTR ds:0x3a39,al
    1e51:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1e54:	8d 07                	lea    eax,[edi]
    1e56:	00 00                	add    BYTE PTR [eax],al
    1e58:	05 3a 3a 00 00       	add    eax,0x3a3a
    1e5d:	00 08                	add    BYTE PTR [eax],cl
    1e5f:	09 ba 07 00 00 05    	or     DWORD PTR [edx+0x5000007],edi
    1e65:	3b 3a                	cmp    edi,DWORD PTR [edx]
    1e67:	00 00                	add    BYTE PTR [eax],al
    1e69:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    1e6c:	66                   	data16
    1e6d:	64 00 05 3c 3a 00 00 	add    BYTE PTR fs:0x3a3c,al
    1e74:	00 10                	add    BYTE PTR [eax],dl
    1e76:	09 94 0b 00 00 05 3d 	or     DWORD PTR [ebx+ecx*1+0x3d050000],edx
    1e7d:	3a 00                	cmp    al,BYTE PTR [eax]
    1e7f:	00 00                	add    BYTE PTR [eax],al
    1e81:	14 00                	adc    al,0x0
    1e83:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    1e86:	c0 07 00             	rol    BYTE PTR [edi],0x0
    1e89:	00 05 3e 7a 01 00    	add    BYTE PTR ds:0x17a3e,al
    1e8f:	00 02                	add    BYTE PTR [edx],al
    1e91:	04 07                	add    al,0x7
    1e93:	5c                   	pop    esp
    1e94:	00 00                	add    BYTE PTR [eax],al
    1e96:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    1e99:	25 00 00 00 0d       	and    eax,0xd000000
    1e9e:	9f                   	lahf   
    1e9f:	07                   	pop    es
    1ea0:	00 00                	add    BYTE PTR [eax],al
    1ea2:	01 0d ce 01 00 00    	add    DWORD PTR ds:0x1ce,ecx
    1ea8:	74 17                	je     1ec1 <sysEnter_Vector-0x12e13f>
    1eaa:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    1eb0:	01 9c 55 02 00 00 0e 	add    DWORD PTR [ebp+edx*2+0xe000002],ebx
    1eb7:	82                   	(bad)  
    1eb8:	07                   	pop    es
    1eb9:	00 00                	add    BYTE PTR [eax],al
    1ebb:	01 0d ce 01 00 00    	add    DWORD PTR ds:0x1ce,ecx
    1ec1:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    1ec7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ec8:	00 01                	add    BYTE PTR [ecx],al
    1eca:	0d 7a 00 00 00       	or     eax,0x7a
    1ecf:	02 91 04 0e 8d 07    	add    dl,BYTE PTR [ecx+0x78d0e04]
    1ed5:	00 00                	add    BYTE PTR [eax],al
    1ed7:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    1edd:	02 91 08 0e ba 07    	add    dl,BYTE PTR [ecx+0x7ba0e08]
    1ee3:	00 00                	add    BYTE PTR [eax],al
    1ee5:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    1eeb:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    1ef1:	00 01                	add    BYTE PTR [ecx],al
    1ef3:	0d 3a 00 00 00       	or     eax,0x3a
    1ef8:	02 91 10 0e 94 0b    	add    dl,BYTE PTR [ecx+0xb940e10]
    1efe:	00 00                	add    BYTE PTR [eax],al
    1f00:	01 0d a1 00 00 00    	add    DWORD PTR ds:0xa1,ecx
    1f06:	02 91 14 00 10 a3    	add    dl,BYTE PTR [ecx-0x5cefffec]
    1f0c:	00 00                	add    BYTE PTR [eax],al
    1f0e:	00 06                	add    BYTE PTR [esi],al
    1f10:	34 56                	xor    al,0x56
    1f12:	00 00                	add    BYTE PTR [eax],al
    1f14:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    1f1a:	9f                   	lahf   
    1f1b:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
    1f1e:	00 00                	add    BYTE PTR [eax],al
    1f20:	06                   	push   es
    1f21:	35 56 00 00 00       	xor    eax,0x56
    1f26:	05 03 f0 61 00       	add    eax,0x61f003
    1f2b:	9f                   	lahf   
    1f2c:	10 7b 00             	adc    BYTE PTR [ebx+0x0],bh
    1f2f:	00 00                	add    BYTE PTR [eax],al
    1f31:	06                   	push   es
    1f32:	36                   	ss
    1f33:	56                   	push   esi
    1f34:	00 00                	add    BYTE PTR [eax],al
    1f36:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    1f3c:	9f                   	lahf   
    1f3d:	10 7c 01 00          	adc    BYTE PTR [ecx+eax*1+0x0],bh
    1f41:	00 06                	add    BYTE PTR [esi],al
    1f43:	37                   	aaa    
    1f44:	85 00                	test   DWORD PTR [eax],eax
    1f46:	00 00                	add    BYTE PTR [eax],al
    1f48:	05 03 f8 61 00       	add    eax,0x61f803
    1f4d:	9f                   	lahf   
    1f4e:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
    1f51:	00 00                	add    BYTE PTR [eax],al
    1f53:	07                   	pop    es
    1f54:	2f                   	das    
    1f55:	aa                   	stos   BYTE PTR es:[edi],al
    1f56:	02 00                	add    al,BYTE PTR [eax]
    1f58:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    1f5e:	9f                   	lahf   
    1f5f:	0c 04                	or     al,0x4
    1f61:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f62:	00 00                	add    BYTE PTR [eax],al
    1f64:	00 10                	add    BYTE PTR [eax],dl
    1f66:	91                   	xchg   ecx,eax
    1f67:	00 00                	add    BYTE PTR [eax],al
    1f69:	00 07                	add    BYTE PTR [edi],al
    1f6b:	30 3a                	xor    BYTE PTR [edx],bh
    1f6d:	00 00                	add    BYTE PTR [eax],al
    1f6f:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    1f75:	9f                   	lahf   
    1f76:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    1f79:	00 00                	add    BYTE PTR [eax],al
    1f7b:	08 53 d2             	or     BYTE PTR [ebx-0x2e],dl
    1f7e:	02 00                	add    al,BYTE PTR [eax]
    1f80:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    1f86:	9f                   	lahf   
    1f87:	0c 04                	or     al,0x4
    1f89:	e2 01                	loop   1f8c <sysEnter_Vector-0x12e074>
    1f8b:	00 00                	add    BYTE PTR [eax],al
    1f8d:	10 a4 07 00 00 01 0b 	adc    BYTE PTR [edi+eax*1+0xb010000],ah
    1f94:	d0 01                	rol    BYTE PTR [ecx],1
    1f96:	00 00                	add    BYTE PTR [eax],al
    1f98:	05 03 08 62 00       	add    eax,0x620803
    1f9d:	9f                   	lahf   
    1f9e:	00 2d 04 00 00 04    	add    BYTE PTR ds:0x4000004,ch
    1fa4:	00 f1                	add    cl,dh
    1fa6:	08 00                	or     BYTE PTR [eax],al
    1fa8:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1fab:	ac                   	lods   al,BYTE PTR ds:[esi]
    1fac:	00 00                	add    BYTE PTR [eax],al
    1fae:	00 0c 7a             	add    BYTE PTR [edx+edi*2],cl
    1fb1:	08 00                	or     BYTE PTR [eax],al
    1fb3:	00 1e                	add    BYTE PTR [esi],bl
    1fb5:	00 00                	add    BYTE PTR [eax],al
    1fb7:	00 e8                	add    al,ch
    1fb9:	17                   	pop    ss
    1fba:	00 9f 33 04 00 00    	add    BYTE PTR [edi+0x433],bl
    1fc0:	f8                   	clc    
    1fc1:	0b 00                	or     eax,DWORD PTR [eax]
    1fc3:	00 02                	add    BYTE PTR [edx],al
    1fc5:	01 06                	add    DWORD PTR [esi],eax
    1fc7:	85 00                	test   DWORD PTR [eax],eax
    1fc9:	00 00                	add    BYTE PTR [eax],al
    1fcb:	02 02                	add    al,BYTE PTR [edx]
    1fcd:	05 72 01 00 00       	add    eax,0x172
    1fd2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1fd9:	02 08                	add    cl,BYTE PTR [eax]
    1fdb:	05 00 00 00 00       	add    eax,0x0
    1fe0:	04 a4                	add    al,0xa4
    1fe2:	08 00                	or     BYTE PTR [eax],al
    1fe4:	00 02                	add    BYTE PTR [edx],al
    1fe6:	2e                   	cs
    1fe7:	4c                   	dec    esp
    1fe8:	00 00                	add    BYTE PTR [eax],al
    1fea:	00 02                	add    BYTE PTR [edx],al
    1fec:	01 08                	add    DWORD PTR [eax],ecx
    1fee:	83 00 00             	add    DWORD PTR [eax],0x0
    1ff1:	00 02                	add    BYTE PTR [edx],al
    1ff3:	02 07                	add    al,BYTE PTR [edi]
    1ff5:	19 01                	sbb    DWORD PTR [ecx],eax
    1ff7:	00 00                	add    BYTE PTR [eax],al
    1ff9:	04 0e                	add    al,0xe
    1ffb:	00 00                	add    BYTE PTR [eax],al
    1ffd:	00 02                	add    BYTE PTR [edx],al
    1fff:	34 65                	xor    al,0x65
    2001:	00 00                	add    BYTE PTR [eax],al
    2003:	00 02                	add    BYTE PTR [edx],al
    2005:	04 07                	add    al,0x7
    2007:	61                   	popa   
    2008:	00 00                	add    BYTE PTR [eax],al
    200a:	00 02                	add    BYTE PTR [edx],al
    200c:	08 07                	or     BYTE PTR [edi],al
    200e:	57                   	push   edi
    200f:	00 00                	add    BYTE PTR [eax],al
    2011:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    2018:	56                   	push   esi
    2019:	65 00 00             	add    BYTE PTR gs:[eax],al
    201c:	00 04 66             	add    BYTE PTR [esi+eiz*2],al
    201f:	05 00 00 03 d8       	add    eax,0xd8030000
    2024:	65 00 00             	add    BYTE PTR gs:[eax],al
    2027:	00 02                	add    BYTE PTR [edx],al
    2029:	04 05                	add    al,0x5
    202b:	05 00 00 00 02       	add    eax,0x2000000
    2030:	0c 04                	or     al,0x4
    2032:	66 01 00             	add    WORD PTR [eax],ax
    2035:	00 02                	add    BYTE PTR [edx],al
    2037:	01 06                	add    DWORD PTR [esi],eax
    2039:	8c 00                	mov    WORD PTR [eax],es
    203b:	00 00                	add    BYTE PTR [eax],al
    203d:	05 1e 08 00 00       	add    eax,0x81e
    2042:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    2045:	db 00                	fild   DWORD PTR [eax]
    2047:	00 00                	add    BYTE PTR [eax],al
    2049:	06                   	push   es
    204a:	f1                   	icebp  
    204b:	07                   	pop    es
    204c:	00 00                	add    BYTE PTR [eax],al
    204e:	04 2e                	add    al,0x2e
    2050:	5a                   	pop    edx
    2051:	00 00                	add    BYTE PTR [eax],al
    2053:	00 00                	add    BYTE PTR [eax],al
    2055:	07                   	pop    es
    2056:	6c                   	ins    BYTE PTR es:[edi],dx
    2057:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2059:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    205c:	5a                   	pop    edx
    205d:	00 00                	add    BYTE PTR [eax],al
    205f:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    2062:	18 08                	sbb    BYTE PTR [eax],cl
    2064:	00 00                	add    BYTE PTR [eax],al
    2066:	04 30                	add    al,0x30
    2068:	db 00                	fild   DWORD PTR [eax]
    206a:	00 00                	add    BYTE PTR [eax],al
    206c:	08 06                	or     BYTE PTR [esi],al
    206e:	d7                   	xlat   BYTE PTR ds:[ebx]
    206f:	07                   	pop    es
    2070:	00 00                	add    BYTE PTR [eax],al
    2072:	04 31                	add    al,0x31
    2074:	e2 00                	loop   2076 <sysEnter_Vector-0x12df8a>
    2076:	00 00                	add    BYTE PTR [eax],al
    2078:	0c 00                	or     al,0x0
    207a:	02 01                	add    al,BYTE PTR [ecx]
    207c:	02 13                	add    dl,BYTE PTR [ebx]
    207e:	01 00                	add    DWORD PTR [eax],eax
    2080:	00 08                	add    BYTE PTR [eax],cl
    2082:	04 9e                	add    al,0x9e
    2084:	00 00                	add    BYTE PTR [eax],al
    2086:	00 04 e1             	add    BYTE PTR [ecx+eiz*8],al
    2089:	07                   	pop    es
    208a:	00 00                	add    BYTE PTR [eax],al
    208c:	04 32                	add    al,0x32
    208e:	9e                   	sahf   
    208f:	00 00                	add    BYTE PTR [eax],al
    2091:	00 02                	add    BYTE PTR [edx],al
    2093:	04 07                	add    al,0x7
    2095:	83 01 00             	add    DWORD PTR [ecx],0x0
    2098:	00 09                	add    BYTE PTR [ecx],cl
    209a:	d8 03                	fadd   DWORD PTR [ebx]
    209c:	00 00                	add    BYTE PTR [eax],al
    209e:	04 65                	add    al,0x65
    20a0:	00 00                	add    BYTE PTR [eax],al
    20a2:	00 07                	add    BYTE PTR [edi],al
    20a4:	15 c8 01 00 00       	adc    eax,0x1c8
    20a9:	0a 8d 03 00 00 00    	or     cl,BYTE PTR [ebp+0x3]
    20af:	0a d7                	or     dl,bh
    20b1:	04 00                	add    al,0x0
    20b3:	00 01                	add    BYTE PTR [ecx],al
    20b5:	0a fe                	or     bh,dh
    20b7:	02 00                	add    al,BYTE PTR [eax]
    20b9:	00 02                	add    BYTE PTR [edx],al
    20bb:	0a c9                	or     cl,cl
    20bd:	04 00                	add    al,0x0
    20bf:	00 03                	add    BYTE PTR [ebx],al
    20c1:	0a 35 03 00 00 04    	or     dh,BYTE PTR ds:0x4000003
    20c7:	0a 27                	or     ah,BYTE PTR [edi]
    20c9:	03 00                	add    eax,DWORD PTR [eax]
    20cb:	00 05 0a a7 04 00    	add    BYTE PTR ds:0x4a70a,al
    20d1:	00 06                	add    BYTE PTR [esi],al
    20d3:	0a 1a                	or     bl,BYTE PTR [edx]
    20d5:	04 00                	add    al,0x0
    20d7:	00 07                	add    BYTE PTR [edi],al
    20d9:	0a 64 03 00          	or     ah,BYTE PTR [ebx+eax*1+0x0]
    20dd:	00 08                	add    BYTE PTR [eax],cl
    20df:	0a 0d 04 00 00 09    	or     cl,BYTE PTR ds:0x9000004
    20e5:	0a 27                	or     ah,BYTE PTR [edi]
    20e7:	04 00                	add    al,0x0
    20e9:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    20ec:	52                   	push   edx
    20ed:	04 00                	add    al,0x0
    20ef:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    20f2:	bf 02 00 00 61       	mov    edi,0x61000002
    20f7:	0a e8                	or     ch,al
    20f9:	03 00                	add    eax,DWORD PTR [eax]
    20fb:	00 97 0b ad 03 00    	add    BYTE PTR [edi+0x3ad0b],dl
    2101:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2104:	0b 45 04             	or     eax,DWORD PTR [ebp+0x4]
    2107:	00 00                	add    BYTE PTR [eax],al
    2109:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    210c:	76 04                	jbe    2112 <sysEnter_Vector-0x12deee>
    210e:	00 00                	add    BYTE PTR [eax],al
    2110:	65 01 0b             	add    DWORD PTR gs:[ebx],ecx
    2113:	ea 02 00 00 66 01 0b 	jmp    0xb01:0x66000002
    211a:	4f                   	dec    edi
    211b:	03 00                	add    eax,DWORD PTR [eax]
    211d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    2120:	0b 42 03             	or     eax,DWORD PTR [edx+0x3]
    2123:	00 00                	add    BYTE PTR [eax],al
    2125:	68 01 0b f7 04       	push   0x4f70b01
    212a:	00 00                	add    BYTE PTR [eax],al
    212c:	69 01 0b d2 02 00    	imul   eax,DWORD PTR [ecx],0x2d20b
    2132:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2135:	0b 17                	or     edx,DWORD PTR [edi]
    2137:	03 00                	add    eax,DWORD PTR [eax]
    2139:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    213c:	0b bb 04 00 00 00    	or     edi,DWORD PTR [ebx+0x4]
    2142:	03 0b                	add    ecx,DWORD PTR [ebx]
    2144:	36                   	ss
    2145:	04 00                	add    al,0x0
    2147:	00 01                	add    BYTE PTR [ecx],al
    2149:	03 0b                	add    ecx,DWORD PTR [ebx]
    214b:	c4 03                	les    eax,FWORD PTR [ebx]
    214d:	00 00                	add    BYTE PTR [eax],al
    214f:	02 03                	add    al,BYTE PTR [ebx]
    2151:	0b 9d 03 00 00 03    	or     ebx,DWORD PTR [ebp+0x3000003]
    2157:	03 0b                	add    ecx,DWORD PTR [ebx]
    2159:	fc                   	cld    
    215a:	03 00                	add    eax,DWORD PTR [eax]
    215c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    215f:	0b 66 04             	or     esp,DWORD PTR [esi+0x4]
    2162:	00 00                	add    BYTE PTR [eax],al
    2164:	05 03 00 0c 04       	add    eax,0x40c0003
    2169:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    216c:	5c                   	pop    esp
    216d:	00 00                	add    BYTE PTR [eax],al
    216f:	00 08                	add    BYTE PTR [eax],cl
    2171:	04 97                	add    al,0x97
    2173:	00 00                	add    BYTE PTR [eax],al
    2175:	00 0d 24 08 00 00    	add    BYTE PTR ds:0x824,cl
    217b:	01 0d e8 17 00 9f    	add    DWORD PTR ds:0x9f0017e8,ecx
    2181:	6c                   	ins    BYTE PTR es:[edi],dx
    2182:	00 00                	add    BYTE PTR [eax],al
    2184:	00 01                	add    BYTE PTR [ecx],al
    2186:	9c                   	pushf  
    2187:	0e                   	push   cs
    2188:	f8                   	clc    
    2189:	07                   	pop    es
    218a:	00 00                	add    BYTE PTR [eax],al
    218c:	01 17                	add    DWORD PTR [edi],edx
    218e:	5a                   	pop    edx
    218f:	00 00                	add    BYTE PTR [eax],al
    2191:	00 54 18 00          	add    BYTE PTR [eax+ebx*1+0x0],dl
    2195:	9f                   	lahf   
    2196:	87 00                	xchg   DWORD PTR [eax],eax
    2198:	00 00                	add    BYTE PTR [eax],al
    219a:	01 9c 1e 02 00 00 0f 	add    DWORD PTR [esi+ebx*1+0xf000002],ebx
    21a1:	6c                   	ins    BYTE PTR es:[edi],dx
    21a2:	06                   	push   es
    21a3:	00 00                	add    BYTE PTR [eax],al
    21a5:	01 17                	add    DWORD PTR [edi],edx
    21a7:	7e 00                	jle    21a9 <sysEnter_Vector-0x12de57>
    21a9:	00 00                	add    BYTE PTR [eax],al
    21ab:	02 91 00 10 5a 08    	add    dl,BYTE PTR [ecx+0x85a1000]
    21b1:	00 00                	add    BYTE PTR [eax],al
    21b3:	01 1b                	add    DWORD PTR [ebx],ebx
    21b5:	5a                   	pop    edx
    21b6:	00 00                	add    BYTE PTR [eax],al
    21b8:	00 02                	add    BYTE PTR [edx],al
    21ba:	91                   	xchg   ecx,eax
    21bb:	74 00                	je     21bd <sysEnter_Vector-0x12de43>
    21bd:	11 eb                	adc    ebx,ebp
    21bf:	07                   	pop    es
    21c0:	00 00                	add    BYTE PTR [eax],al
    21c2:	01 2f                	add    DWORD PTR [edi],ebp
    21c4:	db 18                	fistp  DWORD PTR [eax]
    21c6:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    21cc:	01 9c 4f 02 00 00 0f 	add    DWORD PTR [edi+ecx*2+0xf000002],ebx
    21d3:	8f 08                	(bad)  
    21d5:	00 00                	add    BYTE PTR [eax],al
    21d7:	01 2f                	add    DWORD PTR [edi],ebp
    21d9:	c8 01 00 00          	enter  0x1,0x0
    21dd:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    21e3:	00 01                	add    BYTE PTR [ecx],al
    21e5:	31 4f 02             	xor    DWORD PTR [edi+0x2],ecx
    21e8:	00 00                	add    BYTE PTR [eax],al
    21ea:	02 91 74 00 08 04    	add    dl,BYTE PTR [ecx+0x4080074]
    21f0:	e8 00 00 00 13       	call   130021f5 <sysEnter_Vector+0x12ed21f5>
    21f5:	cf                   	iret   
    21f6:	07                   	pop    es
    21f7:	00 00                	add    BYTE PTR [eax],al
    21f9:	01 43 c8             	add    DWORD PTR [ebx-0x38],eax
    21fc:	01 00                	add    DWORD PTR [eax],eax
    21fe:	00 32                	add    BYTE PTR [edx],dh
    2200:	19 00                	sbb    DWORD PTR [eax],eax
    2202:	9f                   	lahf   
    2203:	d4 01                	aam    0x1
    2205:	00 00                	add    BYTE PTR [eax],al
    2207:	01 9c c3 02 00 00 0f 	add    DWORD PTR [ebx+eax*8+0xf000002],ebx
    220e:	6c                   	ins    BYTE PTR es:[edi],dx
    220f:	06                   	push   es
    2210:	00 00                	add    BYTE PTR [eax],al
    2212:	01 43 7e             	add    DWORD PTR [ebx+0x7e],eax
    2215:	00 00                	add    BYTE PTR [eax],al
    2217:	00 02                	add    BYTE PTR [edx],al
    2219:	91                   	xchg   ecx,eax
    221a:	00 10                	add    BYTE PTR [eax],dl
    221c:	e3 02                	jecxz  2220 <sysEnter_Vector-0x12dde0>
    221e:	00 00                	add    BYTE PTR [eax],al
    2220:	01 45 c8             	add    DWORD PTR [ebp-0x38],eax
    2223:	01 00                	add    DWORD PTR [eax],eax
    2225:	00 02                	add    BYTE PTR [edx],al
    2227:	91                   	xchg   ecx,eax
    2228:	60                   	pusha  
    2229:	10 62 08             	adc    BYTE PTR [edx+0x8],ah
    222c:	00 00                	add    BYTE PTR [eax],al
    222e:	01 47 5a             	add    DWORD PTR [edi+0x5a],eax
    2231:	00 00                	add    BYTE PTR [eax],al
    2233:	00 02                	add    BYTE PTR [edx],al
    2235:	91                   	xchg   ecx,eax
    2236:	6c                   	ins    BYTE PTR es:[edi],dx
    2237:	10 46 08             	adc    BYTE PTR [esi+0x8],al
    223a:	00 00                	add    BYTE PTR [eax],al
    223c:	01 48 5a             	add    DWORD PTR [eax+0x5a],ecx
    223f:	00 00                	add    BYTE PTR [eax],al
    2241:	00 02                	add    BYTE PTR [edx],al
    2243:	91                   	xchg   ecx,eax
    2244:	68 10 87 08 00       	push   0x88710
    2249:	00 01                	add    BYTE PTR [ecx],al
    224b:	49                   	dec    ecx
    224c:	4f                   	dec    edi
    224d:	02 00                	add    al,BYTE PTR [eax]
    224f:	00 02                	add    BYTE PTR [edx],al
    2251:	91                   	xchg   ecx,eax
    2252:	64 10 98 08 00 00 01 	adc    BYTE PTR fs:[eax+0x1000008],bl
    2259:	4a                   	dec    edx
    225a:	c3                   	ret    
    225b:	02 00                	add    al,BYTE PTR [eax]
    225d:	00 02                	add    BYTE PTR [edx],al
    225f:	91                   	xchg   ecx,eax
    2260:	5c                   	pop    esp
    2261:	00 08                	add    BYTE PTR [eax],cl
    2263:	04 41                	add    al,0x41
    2265:	00 00                	add    BYTE PTR [eax],al
    2267:	00 13                	add    BYTE PTR [ebx],dl
    2269:	28 08                	sub    BYTE PTR [eax],cl
    226b:	00 00                	add    BYTE PTR [eax],al
    226d:	01 6a c8             	add    DWORD PTR [edx-0x38],ebp
    2270:	01 00                	add    DWORD PTR [eax],eax
    2272:	00 06                	add    BYTE PTR [esi],al
    2274:	1b 00                	sbb    eax,DWORD PTR [eax]
    2276:	9f                   	lahf   
    2277:	20 00                	and    BYTE PTR [eax],al
    2279:	00 00                	add    BYTE PTR [eax],al
    227b:	01 9c f1 02 00 00 0f 	add    DWORD PTR [ecx+esi*8+0xf000002],ebx
    2282:	6c                   	ins    BYTE PTR es:[edi],dx
    2283:	06                   	push   es
    2284:	00 00                	add    BYTE PTR [eax],al
    2286:	01 6a 7e             	add    DWORD PTR [edx+0x7e],ebp
    2289:	00 00                	add    BYTE PTR [eax],al
    228b:	00 02                	add    BYTE PTR [edx],al
    228d:	91                   	xchg   ecx,eax
    228e:	00 00                	add    BYTE PTR [eax],al
    2290:	13 69 08             	adc    ebp,DWORD PTR [ecx+0x8]
    2293:	00 00                	add    BYTE PTR [eax],al
    2295:	01 6f c8             	add    DWORD PTR [edi-0x38],ebp
    2298:	01 00                	add    DWORD PTR [eax],eax
    229a:	00 26                	add    BYTE PTR [esi],ah
    229c:	1b 00                	sbb    eax,DWORD PTR [eax]
    229e:	9f                   	lahf   
    229f:	85 00                	test   DWORD PTR [eax],eax
    22a1:	00 00                	add    BYTE PTR [eax],al
    22a3:	01 9c 42 03 00 00 0f 	add    DWORD PTR [edx+eax*2+0xf000003],ebx
    22aa:	2f                   	das    
    22ab:	08 00                	or     BYTE PTR [eax],al
    22ad:	00 01                	add    BYTE PTR [ecx],al
    22af:	6f                   	outs   dx,DWORD PTR ds:[esi]
    22b0:	c8 01 00 00          	enter  0x1,0x0
    22b4:	02 91 00 0f 53 08    	add    dl,BYTE PTR [ecx+0x8530f00]
    22ba:	00 00                	add    BYTE PTR [eax],al
    22bc:	01 6f 5a             	add    DWORD PTR [edi+0x5a],ebp
    22bf:	00 00                	add    BYTE PTR [eax],al
    22c1:	00 02                	add    BYTE PTR [edx],al
    22c3:	91                   	xchg   ecx,eax
    22c4:	04 10                	add    al,0x10
    22c6:	72 08                	jb     22d0 <sysEnter_Vector-0x12dd30>
    22c8:	00 00                	add    BYTE PTR [eax],al
    22ca:	01 73 42             	add    DWORD PTR [ebx+0x42],esi
    22cd:	03 00                	add    eax,DWORD PTR [eax]
    22cf:	00 02                	add    BYTE PTR [edx],al
    22d1:	91                   	xchg   ecx,eax
    22d2:	6c                   	ins    BYTE PTR es:[edi],dx
    22d3:	12 6d 70             	adc    ch,BYTE PTR [ebp+0x70]
    22d6:	00 01                	add    BYTE PTR [ecx],al
    22d8:	76 4f                	jbe    2329 <sysEnter_Vector-0x12dcd7>
    22da:	02 00                	add    al,BYTE PTR [eax]
    22dc:	00 02                	add    BYTE PTR [edx],al
    22de:	91                   	xchg   ecx,eax
    22df:	68 00 08 04 73       	push   0x73040800
    22e4:	00 00                	add    BYTE PTR [eax],al
    22e6:	00 13                	add    BYTE PTR [ebx],dl
    22e8:	ac                   	lods   al,BYTE PTR ds:[esi]
    22e9:	08 00                	or     BYTE PTR [eax],al
    22eb:	00 01                	add    BYTE PTR [ecx],al
    22ed:	82                   	(bad)  
    22ee:	c8 01 00 00          	enter  0x1,0x0
    22f2:	ab                   	stos   DWORD PTR es:[edi],eax
    22f3:	1b 00                	sbb    eax,DWORD PTR [eax]
    22f5:	9f                   	lahf   
    22f6:	23 00                	and    eax,DWORD PTR [eax]
    22f8:	00 00                	add    BYTE PTR [eax],al
    22fa:	01 9c 7e 03 00 00 0f 	add    DWORD PTR [esi+edi*2+0xf000003],ebx
    2301:	2f                   	das    
    2302:	08 00                	or     BYTE PTR [eax],al
    2304:	00 01                	add    BYTE PTR [ecx],al
    2306:	82                   	(bad)  
    2307:	c8 01 00 00          	enter  0x1,0x0
    230b:	02 91 00 0f 53 08    	add    dl,BYTE PTR [ecx+0x8530f00]
    2311:	00 00                	add    BYTE PTR [eax],al
    2313:	01 82 5a 00 00 00    	add    DWORD PTR [edx+0x5a],eax
    2319:	02 91 04 00 14 dc    	add    dl,BYTE PTR [ecx-0x23ebfffc]
    231f:	07                   	pop    es
    2320:	00 00                	add    BYTE PTR [eax],al
    2322:	01 87 ce 1b 00 9f    	add    DWORD PTR [edi-0x60ffe432],eax
    2328:	1b 00                	sbb    eax,DWORD PTR [eax]
    232a:	00 00                	add    BYTE PTR [eax],al
    232c:	01 9c a2 03 00 00 0f 	add    DWORD PTR [edx+eiz*4+0xf000003],ebx
    2333:	8f 08                	(bad)  
    2335:	00 00                	add    BYTE PTR [eax],al
    2337:	01 87 c8 01 00 00    	add    DWORD PTR [edi+0x1c8],eax
    233d:	02 91 00 00 0d 37    	add    dl,BYTE PTR [ecx+0x370d0000]
    2343:	08 00                	or     BYTE PTR [eax],al
    2345:	00 01                	add    BYTE PTR [ecx],al
    2347:	8c e9                	mov    ecx,gs
    2349:	1b 00                	sbb    eax,DWORD PTR [eax]
    234b:	9f                   	lahf   
    234c:	32 00                	xor    al,BYTE PTR [eax]
    234e:	00 00                	add    BYTE PTR [eax],al
    2350:	01 9c 15 a3 00 00 00 	add    DWORD PTR [ebp+edx*1+0xa3],ebx
    2357:	04 34                	add    al,0x34
    2359:	5a                   	pop    edx
    235a:	00 00                	add    BYTE PTR [eax],al
    235c:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    2362:	9f                   	lahf   
    2363:	15 34 01 00 00       	adc    eax,0x134
    2368:	04 35                	add    al,0x35
    236a:	5a                   	pop    edx
    236b:	00 00                	add    BYTE PTR [eax],al
    236d:	00 05 03 f0 61 00    	add    BYTE PTR ds:0x61f003,al
    2373:	9f                   	lahf   
    2374:	15 7b 00 00 00       	adc    eax,0x7b
    2379:	04 36                	add    al,0x36
    237b:	5a                   	pop    edx
    237c:	00 00                	add    BYTE PTR [eax],al
    237e:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    2384:	9f                   	lahf   
    2385:	15 7c 01 00 00       	adc    eax,0x17c
    238a:	04 37                	add    al,0x37
    238c:	89 00                	mov    DWORD PTR [eax],eax
    238e:	00 00                	add    BYTE PTR [eax],al
    2390:	05 03 f8 61 00       	add    eax,0x61f803
    2395:	9f                   	lahf   
    2396:	15 6e 00 00 00       	adc    eax,0x6e
    239b:	05 2f 42 03 00       	add    eax,0x3422f
    23a0:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    23a6:	9f                   	lahf   
    23a7:	15 91 00 00 00       	adc    eax,0x91
    23ac:	05 30 33 00 00       	add    eax,0x3330
    23b1:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    23b7:	9f                   	lahf   
    23b8:	15 41 00 00 00       	adc    eax,0x41
    23bd:	06                   	push   es
    23be:	53                   	push   ebx
    23bf:	2a 04 00             	sub    al,BYTE PTR [eax+eax*1]
    23c2:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    23c8:	9f                   	lahf   
    23c9:	08 04 d1             	or     BYTE PTR [ecx+edx*8],al
    23cc:	01 00                	add    DWORD PTR [eax],eax
    23ce:	00 00                	add    BYTE PTR [eax],al
    23d0:	5f                   	pop    edi
    23d1:	02 00                	add    al,BYTE PTR [eax]
    23d3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    23d6:	48                   	dec    eax
    23d7:	0a 00                	or     al,BYTE PTR [eax]
    23d9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    23dc:	ac                   	lods   al,BYTE PTR ds:[esi]
    23dd:	00 00                	add    BYTE PTR [eax],al
    23df:	00 0c b4             	add    BYTE PTR [esp+esi*4],cl
    23e2:	08 00                	or     BYTE PTR [eax],al
    23e4:	00 1e                	add    BYTE PTR [esi],bl
    23e6:	00 00                	add    BYTE PTR [eax],al
    23e8:	00 1c 1c             	add    BYTE PTR [esp+ebx*1],bl
    23eb:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
    23f1:	6a 0d                	push   0xd
    23f3:	00 00                	add    BYTE PTR [eax],al
    23f5:	02 01                	add    al,BYTE PTR [ecx]
    23f7:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    23fd:	02 07                	add    al,BYTE PTR [edi]
    23ff:	19 01                	sbb    DWORD PTR [ecx],eax
    2401:	00 00                	add    BYTE PTR [eax],al
    2403:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2406:	61                   	popa   
    2407:	00 00                	add    BYTE PTR [eax],al
    2409:	00 02                	add    BYTE PTR [edx],al
    240b:	04 07                	add    al,0x7
    240d:	5c                   	pop    esp
    240e:	00 00                	add    BYTE PTR [eax],al
    2410:	00 02                	add    BYTE PTR [edx],al
    2412:	01 06                	add    DWORD PTR [esi],eax
    2414:	85 00                	test   DWORD PTR [eax],eax
    2416:	00 00                	add    BYTE PTR [eax],al
    2418:	02 02                	add    al,BYTE PTR [edx]
    241a:	05 72 01 00 00       	add    eax,0x172
    241f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2426:	02 08                	add    cl,BYTE PTR [eax]
    2428:	05 00 00 00 00       	add    eax,0x0
    242d:	02 08                	add    cl,BYTE PTR [eax]
    242f:	07                   	pop    es
    2430:	57                   	push   edi
    2431:	00 00                	add    BYTE PTR [eax],al
    2433:	00 02                	add    BYTE PTR [edx],al
    2435:	04 05                	add    al,0x5
    2437:	05 00 00 00 02       	add    eax,0x2000000
    243c:	04 07                	add    al,0x7
    243e:	83 01 00             	add    DWORD PTR [ecx],0x0
    2441:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2444:	05 04 7a 00 00       	add    eax,0x7a04
    2449:	00 02                	add    BYTE PTR [edx],al
    244b:	01 06                	add    DWORD PTR [esi],eax
    244d:	8c 00                	mov    WORD PTR [eax],es
    244f:	00 00                	add    BYTE PTR [eax],al
    2451:	06                   	push   es
    2452:	0e                   	push   cs
    2453:	00 00                	add    BYTE PTR [eax],al
    2455:	00 02                	add    BYTE PTR [edx],al
    2457:	34 33                	xor    al,0x33
    2459:	00 00                	add    BYTE PTR [eax],al
    245b:	00 06                	add    BYTE PTR [esi],al
    245d:	4d                   	dec    ebp
    245e:	00 00                	add    BYTE PTR [eax],al
    2460:	00 02                	add    BYTE PTR [edx],al
    2462:	56                   	push   esi
    2463:	33 00                	xor    eax,DWORD PTR [eax]
    2465:	00 00                	add    BYTE PTR [eax],al
    2467:	05 04 9d 00 00       	add    eax,0x9d04
    246c:	00 07                	add    BYTE PTR [edi],al
    246e:	7a 00                	jp     2470 <sysEnter_Vector-0x12db90>
    2470:	00 00                	add    BYTE PTR [eax],al
    2472:	06                   	push   es
    2473:	66 05 00 00          	add    ax,0x0
    2477:	03 d8                	add    ebx,eax
    2479:	33 00                	xor    eax,DWORD PTR [eax]
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2480:	66 01 00             	add    WORD PTR [eax],ax
    2483:	00 02                	add    BYTE PTR [edx],al
    2485:	01 02                	add    DWORD PTR [edx],eax
    2487:	13 01                	adc    eax,DWORD PTR [ecx]
    2489:	00 00                	add    BYTE PTR [eax],al
    248b:	08 c6                	or     dh,al
    248d:	08 00                	or     BYTE PTR [eax],al
    248f:	00 01                	add    BYTE PTR [ecx],al
    2491:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    2494:	00 00                	add    BYTE PTR [eax],al
    2496:	1c 1c                	sbb    al,0x1c
    2498:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    249e:	01 9c 85 01 00 00 09 	add    DWORD PTR [ebp+eax*4+0x9000001],ebx
    24a5:	c1 08 00             	ror    DWORD PTR [eax],0x0
    24a8:	00 01                	add    BYTE PTR [ecx],al
    24aa:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    24ad:	00 00                	add    BYTE PTR [eax],al
    24af:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    24b5:	63 00                	arpl   WORD PTR [eax],ax
    24b7:	01 0b                	add    DWORD PTR [ebx],ecx
    24b9:	85 01                	test   DWORD PTR [ecx],eax
    24bb:	00 00                	add    BYTE PTR [eax],al
    24bd:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    24c3:	01 0b                	add    DWORD PTR [ebx],ecx
    24c5:	a2 00 00 00 02       	mov    ds:0x2000000,al
    24ca:	91                   	xchg   ecx,eax
    24cb:	08 0b                	or     BYTE PTR [ebx],cl
    24cd:	64                   	fs
    24ce:	77 00                	ja     24d0 <sysEnter_Vector-0x12db30>
    24d0:	01 0d b4 00 00 00    	add    DWORD PTR ds:0xb4,ecx
    24d6:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    24dc:	00 01                	add    BYTE PTR [ecx],al
    24de:	0d b4 00 00 00       	or     eax,0xb4
    24e3:	02 91 5f 0c 4e 1c    	add    dl,BYTE PTR [ecx+0x1c4e0c5f]
    24e9:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    24ef:	3c 01                	cmp    al,0x1
    24f1:	00 00                	add    BYTE PTR [eax],al
    24f3:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    24f6:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    24f9:	01 00                	add    DWORD PTR [eax],eax
    24fb:	00 02                	add    BYTE PTR [edx],al
    24fd:	91                   	xchg   ecx,eax
    24fe:	74 0b                	je     250b <sysEnter_Vector-0x12daf5>
    2500:	74 00                	je     2502 <sysEnter_Vector-0x12dafe>
    2502:	01 15 97 01 00 00    	add    DWORD PTR ds:0x197,edx
    2508:	02 91 70 00 0c d1    	add    dl,BYTE PTR [ecx-0x2ef3ff90]
    250e:	1c 00                	sbb    al,0x0
    2510:	9f                   	lahf   
    2511:	79 00                	jns    2513 <sysEnter_Vector-0x12daed>
    2513:	00 00                	add    BYTE PTR [eax],al
    2515:	62 01                	bound  eax,QWORD PTR [ecx]
    2517:	00 00                	add    BYTE PTR [eax],al
    2519:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    251c:	01 24 8c             	add    DWORD PTR [esp+ecx*4],esp
    251f:	01 00                	add    DWORD PTR [eax],eax
    2521:	00 02                	add    BYTE PTR [edx],al
    2523:	91                   	xchg   ecx,eax
    2524:	6c                   	ins    BYTE PTR es:[edi],dx
    2525:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2529:	25 97 01 00 00       	and    eax,0x197
    252e:	02 91 68 00 0d 4a    	add    dl,BYTE PTR [ecx+0x4a0d0068]
    2534:	1d 00 9f 6b 00       	sbb    eax,0x6b9f00
    2539:	00 00                	add    BYTE PTR [eax],al
    253b:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    253e:	01 33                	add    DWORD PTR [ebx],esi
    2540:	97                   	xchg   edi,eax
    2541:	00 00                	add    BYTE PTR [eax],al
    2543:	00 02                	add    BYTE PTR [edx],al
    2545:	91                   	xchg   ecx,eax
    2546:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    254b:	34 74                	xor    al,0x74
    254d:	00 00                	add    BYTE PTR [eax],al
    254f:	00 02                	add    BYTE PTR [edx],al
    2551:	91                   	xchg   ecx,eax
    2552:	60                   	pusha  
    2553:	00 00                	add    BYTE PTR [eax],al
    2555:	05 04 8b 01 00       	add    eax,0x18b04
    255a:	00 0e                	add    BYTE PTR [esi],cl
    255c:	05 04 92 01 00       	add    eax,0x19204
    2561:	00 07                	add    BYTE PTR [edi],al
    2563:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2569:	81 00 00 00 0f ce    	add    DWORD PTR [eax],0xce0f0000
    256f:	08 00                	or     BYTE PTR [eax],al
    2571:	00 01                	add    BYTE PTR [ecx],al
    2573:	42                   	inc    edx
    2574:	72 00                	jb     2576 <sysEnter_Vector-0x12da8a>
    2576:	00 00                	add    BYTE PTR [eax],al
    2578:	b7 1d                	mov    bh,0x1d
    257a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2580:	01 9c df 01 00 00 09 	add    DWORD PTR [edi+ebx*8+0x9000001],ebx
    2587:	c1 08 00             	ror    DWORD PTR [eax],0x0
    258a:	00 01                	add    BYTE PTR [ecx],al
    258c:	42                   	inc    edx
    258d:	72 00                	jb     258f <sysEnter_Vector-0x12da71>
    258f:	00 00                	add    BYTE PTR [eax],al
    2591:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2597:	63 00                	arpl   WORD PTR [eax],ax
    2599:	01 42 85             	add    DWORD PTR [edx-0x7b],eax
    259c:	01 00                	add    DWORD PTR [eax],eax
    259e:	00 02                	add    BYTE PTR [edx],al
    25a0:	91                   	xchg   ecx,eax
    25a1:	04 0a                	add    al,0xa
    25a3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    25a4:	00 01                	add    BYTE PTR [ecx],al
    25a6:	42                   	inc    edx
    25a7:	a2 00 00 00 02       	mov    ds:0x2000000,al
    25ac:	91                   	xchg   ecx,eax
    25ad:	08 00                	or     BYTE PTR [eax],al
    25af:	10 a3 00 00 00 04    	adc    BYTE PTR [ebx+0x4000000],ah
    25b5:	34 81                	xor    al,0x81
    25b7:	00 00                	add    BYTE PTR [eax],al
    25b9:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    25bf:	9f                   	lahf   
    25c0:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
    25c3:	00 00                	add    BYTE PTR [eax],al
    25c5:	04 35                	add    al,0x35
    25c7:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    25cd:	f0 61                	lock popa 
    25cf:	00 9f 10 7b 00 00    	add    BYTE PTR [edi+0x7b10],bl
    25d5:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    25d8:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    25de:	e8 61 00 9f 10       	call   109f2644 <sysEnter_Vector+0x108c2644>
    25e3:	7c 01                	jl     25e6 <sysEnter_Vector-0x12da1a>
    25e5:	00 00                	add    BYTE PTR [eax],al
    25e7:	04 37                	add    al,0x37
    25e9:	64 00 00             	add    BYTE PTR fs:[eax],al
    25ec:	00 05 03 f8 61 00    	add    BYTE PTR ds:0x61f803,al
    25f2:	9f                   	lahf   
    25f3:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
    25f6:	00 00                	add    BYTE PTR [eax],al
    25f8:	05 2f 34 02 00       	add    eax,0x2342f
    25fd:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    2603:	9f                   	lahf   
    2604:	05 04 8c 00 00       	add    eax,0x8c04
    2609:	00 10                	add    BYTE PTR [eax],dl
    260b:	91                   	xchg   ecx,eax
    260c:	00 00                	add    BYTE PTR [eax],al
    260e:	00 05 30 4f 00 00    	add    BYTE PTR ds:0x4f30,al
    2614:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    261a:	9f                   	lahf   
    261b:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    261e:	00 00                	add    BYTE PTR [eax],al
    2620:	06                   	push   es
    2621:	53                   	push   ebx
    2622:	5c                   	pop    esp
    2623:	02 00                	add    al,BYTE PTR [eax]
    2625:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    262b:	9f                   	lahf   
    262c:	05 04 74 00 00       	add    eax,0x7404
    2631:	00 00                	add    BYTE PTR [eax],al
    2633:	1e                   	push   ds
    2634:	02 00                	add    al,BYTE PTR [eax]
    2636:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2639:	25 0b 00 00 04       	and    eax,0x400000b
    263e:	01 ac 00 00 00 0c d5 	add    DWORD PTR [eax+eax*1-0x2af40000],ebp
    2645:	08 00                	or     BYTE PTR [eax],al
    2647:	00 1e                	add    BYTE PTR [esi],bl
    2649:	00 00                	add    BYTE PTR [eax],al
    264b:	00 d8                	add    al,bl
    264d:	1d 00 9f e7 00       	sbb    eax,0xe79f00
    2652:	00 00                	add    BYTE PTR [eax],al
    2654:	5f                   	pop    edi
    2655:	0e                   	push   cs
    2656:	00 00                	add    BYTE PTR [eax],al
    2658:	02 01                	add    al,BYTE PTR [ecx]
    265a:	06                   	push   es
    265b:	8c 00                	mov    WORD PTR [eax],es
    265d:	00 00                	add    BYTE PTR [eax],al
    265f:	02 01                	add    al,BYTE PTR [ecx]
    2661:	06                   	push   es
    2662:	85 00                	test   DWORD PTR [eax],eax
    2664:	00 00                	add    BYTE PTR [eax],al
    2666:	02 02                	add    al,BYTE PTR [edx]
    2668:	05 72 01 00 00       	add    eax,0x172
    266d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2674:	02 08                	add    cl,BYTE PTR [eax]
    2676:	05 00 00 00 00       	add    eax,0x0
    267b:	04 a4                	add    al,0xa4
    267d:	08 00                	or     BYTE PTR [eax],al
    267f:	00 02                	add    BYTE PTR [edx],al
    2681:	2e                   	cs
    2682:	53                   	push   ebx
    2683:	00 00                	add    BYTE PTR [eax],al
    2685:	00 02                	add    BYTE PTR [edx],al
    2687:	01 08                	add    DWORD PTR [eax],ecx
    2689:	83 00 00             	add    DWORD PTR [eax],0x0
    268c:	00 04 f6             	add    BYTE PTR [esi+esi*8],al
    268f:	08 00                	or     BYTE PTR [eax],al
    2691:	00 02                	add    BYTE PTR [edx],al
    2693:	31 65 00             	xor    DWORD PTR [ebp+0x0],esp
    2696:	00 00                	add    BYTE PTR [eax],al
    2698:	02 02                	add    al,BYTE PTR [edx]
    269a:	07                   	pop    es
    269b:	19 01                	sbb    DWORD PTR [ecx],eax
    269d:	00 00                	add    BYTE PTR [eax],al
    269f:	04 0e                	add    al,0xe
    26a1:	00 00                	add    BYTE PTR [eax],al
    26a3:	00 02                	add    BYTE PTR [edx],al
    26a5:	34 77                	xor    al,0x77
    26a7:	00 00                	add    BYTE PTR [eax],al
    26a9:	00 02                	add    BYTE PTR [edx],al
    26ab:	04 07                	add    al,0x7
    26ad:	61                   	popa   
    26ae:	00 00                	add    BYTE PTR [eax],al
    26b0:	00 02                	add    BYTE PTR [edx],al
    26b2:	08 07                	or     BYTE PTR [edi],al
    26b4:	57                   	push   edi
    26b5:	00 00                	add    BYTE PTR [eax],al
    26b7:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    26be:	56                   	push   esi
    26bf:	77 00                	ja     26c1 <sysEnter_Vector-0x12d93f>
    26c1:	00 00                	add    BYTE PTR [eax],al
    26c3:	04 66                	add    al,0x66
    26c5:	05 00 00 03 d8       	add    eax,0xd8030000
    26ca:	77 00                	ja     26cc <sysEnter_Vector-0x12d934>
    26cc:	00 00                	add    BYTE PTR [eax],al
    26ce:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    26d5:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    26d8:	66 01 00             	add    WORD PTR [eax],ax
    26db:	00 02                	add    BYTE PTR [edx],al
    26dd:	01 02                	add    DWORD PTR [edx],eax
    26df:	13 01                	adc    eax,DWORD PTR [ecx]
    26e1:	00 00                	add    BYTE PTR [eax],al
    26e3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    26e6:	83 01 00             	add    DWORD PTR [ecx],0x0
    26e9:	00 05 04 02 04 07    	add    BYTE PTR ds:0x7040204,al
    26ef:	5c                   	pop    esp
    26f0:	00 00                	add    BYTE PTR [eax],al
    26f2:	00 06                	add    BYTE PTR [esi],al
    26f4:	04 25                	add    al,0x25
    26f6:	00 00                	add    BYTE PTR [eax],al
    26f8:	00 07                	add    BYTE PTR [edi],al
    26fa:	e9 08 00 00 01       	jmp    1002707 <sysEnter_Vector+0xed2707>
    26ff:	08 b7 00 00 00 d8    	or     BYTE PTR [edi-0x28000000],dh
    2705:	1d 00 9f c7 00       	sbb    eax,0xc79f00
    270a:	00 00                	add    BYTE PTR [eax],al
    270c:	01 9c 49 01 00 00 08 	add    DWORD PTR [ecx+ecx*2+0x8000001],ebx
    2713:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2716:	01 08                	add    DWORD PTR [eax],ecx
    2718:	b7 00                	mov    bh,0x0
    271a:	00 00                	add    BYTE PTR [eax],al
    271c:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2722:	6c                   	ins    BYTE PTR es:[edi],dx
    2723:	00 01                	add    BYTE PTR [ecx],al
    2725:	08 3a                	or     BYTE PTR [edx],bh
    2727:	00 00                	add    BYTE PTR [eax],al
    2729:	00 02                	add    BYTE PTR [edx],al
    272b:	91                   	xchg   ecx,eax
    272c:	04 08                	add    al,0x8
    272e:	6c                   	ins    BYTE PTR es:[edi],dx
    272f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2731:	00 01                	add    BYTE PTR [ecx],al
    2733:	08 90 00 00 00 02    	or     BYTE PTR [eax+0x2000000],dl
    2739:	91                   	xchg   ecx,eax
    273a:	08 09                	or     BYTE PTR [ecx],cl
    273c:	64 00 01             	add    BYTE PTR fs:[ecx],al
    273f:	0a 49 01             	or     cl,BYTE PTR [ecx+0x1]
    2742:	00 00                	add    BYTE PTR [eax],al
    2744:	02 91 74 09 65 00    	add    dl,BYTE PTR [ecx+0x650974]
    274a:	01 0b                	add    DWORD PTR [ebx],ecx
    274c:	4f                   	dec    edi
    274d:	01 00                	add    DWORD PTR [eax],eax
    274f:	00 02                	add    BYTE PTR [edx],al
    2751:	91                   	xchg   ecx,eax
    2752:	70 0a                	jo     275e <sysEnter_Vector-0x12d8a2>
    2754:	f1                   	icebp  
    2755:	08 00                	or     BYTE PTR [eax],al
    2757:	00 01                	add    BYTE PTR [ecx],al
    2759:	0c 5a                	or     al,0x5a
    275b:	00 00                	add    BYTE PTR [eax],al
    275d:	00 02                	add    BYTE PTR [edx],al
    275f:	91                   	xchg   ecx,eax
    2760:	6a 09                	push   0x9
    2762:	66                   	data16
    2763:	00 01                	add    BYTE PTR [ecx],al
    2765:	0d 55 01 00 00       	or     eax,0x155
    276a:	02 91 6c 0a ff 08    	add    dl,BYTE PTR [ecx+0x8ff0a6c]
    2770:	00 00                	add    BYTE PTR [eax],al
    2772:	01 0e                	add    DWORD PTR [esi],ecx
    2774:	6c                   	ins    BYTE PTR es:[edi],dx
    2775:	00 00                	add    BYTE PTR [eax],al
    2777:	00 02                	add    BYTE PTR [edx],al
    2779:	91                   	xchg   ecx,eax
    277a:	64 00 06             	add    BYTE PTR fs:[esi],al
    277d:	04 48                	add    al,0x48
    277f:	00 00                	add    BYTE PTR [eax],al
    2781:	00 06                	add    BYTE PTR [esi],al
    2783:	04 5a                	add    al,0x5a
    2785:	00 00                	add    BYTE PTR [eax],al
    2787:	00 06                	add    BYTE PTR [esi],al
    2789:	04 6c                	add    al,0x6c
    278b:	00 00                	add    BYTE PTR [eax],al
    278d:	00 0b                	add    BYTE PTR [ebx],cl
    278f:	e2 08                	loop   2799 <sysEnter_Vector-0x12d867>
    2791:	00 00                	add    BYTE PTR [eax],al
    2793:	01 1f                	add    DWORD PTR [edi],ebx
    2795:	b7 00                	mov    bh,0x0
    2797:	00 00                	add    BYTE PTR [eax],al
    2799:	9f                   	lahf   
    279a:	1e                   	push   ds
    279b:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    27a1:	01 9c 9e 01 00 00 08 	add    DWORD PTR [esi+ebx*4+0x8000001],ebx
    27a8:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    27ab:	01 1f                	add    DWORD PTR [edi],ebx
    27ad:	b7 00                	mov    bh,0x0
    27af:	00 00                	add    BYTE PTR [eax],al
    27b1:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    27b7:	6c                   	ins    BYTE PTR es:[edi],dx
    27b8:	00 01                	add    BYTE PTR [ecx],al
    27ba:	1f                   	pop    ds
    27bb:	3a 00                	cmp    al,BYTE PTR [eax]
    27bd:	00 00                	add    BYTE PTR [eax],al
    27bf:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    27c5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    27c6:	00 01                	add    BYTE PTR [ecx],al
    27c8:	1f                   	pop    ds
    27c9:	90                   	nop
    27ca:	00 00                	add    BYTE PTR [eax],al
    27cc:	00 02                	add    BYTE PTR [edx],al
    27ce:	91                   	xchg   ecx,eax
    27cf:	08 00                	or     BYTE PTR [eax],al
    27d1:	0c a3                	or     al,0xa3
    27d3:	00 00                	add    BYTE PTR [eax],al
    27d5:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    27d8:	6c                   	ins    BYTE PTR es:[edi],dx
    27d9:	00 00                	add    BYTE PTR [eax],al
    27db:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    27e1:	9f                   	lahf   
    27e2:	0c 34                	or     al,0x34
    27e4:	01 00                	add    DWORD PTR [eax],eax
    27e6:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    27ed:	05 03 f0 61 00       	add    eax,0x61f003
    27f2:	9f                   	lahf   
    27f3:	0c 7b                	or     al,0x7b
    27f5:	00 00                	add    BYTE PTR [eax],al
    27f7:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    27fa:	6c                   	ins    BYTE PTR es:[edi],dx
    27fb:	00 00                	add    BYTE PTR [eax],al
    27fd:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    2803:	9f                   	lahf   
    2804:	0c 7c                	or     al,0x7c
    2806:	01 00                	add    DWORD PTR [eax],eax
    2808:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    280b:	9b                   	fwait
    280c:	00 00                	add    BYTE PTR [eax],al
    280e:	00 05 03 f8 61 00    	add    BYTE PTR ds:0x61f803,al
    2814:	9f                   	lahf   
    2815:	0c 6e                	or     al,0x6e
    2817:	00 00                	add    BYTE PTR [eax],al
    2819:	00 05 2f f3 01 00    	add    BYTE PTR ds:0x1f32f,al
    281f:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    2825:	9f                   	lahf   
    2826:	06                   	push   es
    2827:	04 85                	add    al,0x85
    2829:	00 00                	add    BYTE PTR [eax],al
    282b:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    282e:	00 00                	add    BYTE PTR [eax],al
    2830:	00 05 30 3a 00 00    	add    BYTE PTR ds:0x3a30,al
    2836:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    283c:	9f                   	lahf   
    283d:	0c 41                	or     al,0x41
    283f:	00 00                	add    BYTE PTR [eax],al
    2841:	00 06                	add    BYTE PTR [esi],al
    2843:	53                   	push   ebx
    2844:	1b 02                	sbb    eax,DWORD PTR [edx]
    2846:	00 00                	add    BYTE PTR [eax],al
    2848:	05 03 f4 61 00       	add    eax,0x61f403
    284d:	9f                   	lahf   
    284e:	06                   	push   es
    284f:	04 c0                	add    al,0xc0
    2851:	00 00                	add    BYTE PTR [eax],al
    2853:	00 00                	add    BYTE PTR [eax],al
    2855:	1f                   	pop    ds
    2856:	02 00                	add    al,BYTE PTR [eax]
    2858:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    285b:	e2 0b                	loop   2868 <sysEnter_Vector-0x12d798>
    285d:	00 00                	add    BYTE PTR [eax],al
    285f:	04 01                	add    al,0x1
    2861:	ac                   	lods   al,BYTE PTR ds:[esi]
    2862:	00 00                	add    BYTE PTR [eax],al
    2864:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    2867:	09 00                	or     DWORD PTR [eax],eax
    2869:	00 1e                	add    BYTE PTR [esi],bl
    286b:	00 00                	add    BYTE PTR [eax],al
    286d:	00 c0                	add    al,al
    286f:	1e                   	push   ds
    2870:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    2876:	37                   	aaa    
    2877:	0f 00 00             	sldt   WORD PTR [eax]
    287a:	02 01                	add    al,BYTE PTR [ecx]
    287c:	06                   	push   es
    287d:	8c 00                	mov    WORD PTR [eax],es
    287f:	00 00                	add    BYTE PTR [eax],al
    2881:	02 01                	add    al,BYTE PTR [ecx]
    2883:	06                   	push   es
    2884:	85 00                	test   DWORD PTR [eax],eax
    2886:	00 00                	add    BYTE PTR [eax],al
    2888:	02 02                	add    al,BYTE PTR [edx]
    288a:	05 72 01 00 00       	add    eax,0x172
    288f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2896:	02 08                	add    cl,BYTE PTR [eax]
    2898:	05 00 00 00 00       	add    eax,0x0
    289d:	02 01                	add    al,BYTE PTR [ecx]
    289f:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    28a5:	02 07                	add    al,BYTE PTR [edi]
    28a7:	19 01                	sbb    DWORD PTR [ecx],eax
    28a9:	00 00                	add    BYTE PTR [eax],al
    28ab:	04 0e                	add    al,0xe
    28ad:	00 00                	add    BYTE PTR [eax],al
    28af:	00 02                	add    BYTE PTR [edx],al
    28b1:	34 61                	xor    al,0x61
    28b3:	00 00                	add    BYTE PTR [eax],al
    28b5:	00 02                	add    BYTE PTR [edx],al
    28b7:	04 07                	add    al,0x7
    28b9:	61                   	popa   
    28ba:	00 00                	add    BYTE PTR [eax],al
    28bc:	00 02                	add    BYTE PTR [edx],al
    28be:	08 07                	or     BYTE PTR [edi],al
    28c0:	57                   	push   edi
    28c1:	00 00                	add    BYTE PTR [eax],al
    28c3:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    28ca:	56                   	push   esi
    28cb:	61                   	popa   
    28cc:	00 00                	add    BYTE PTR [eax],al
    28ce:	00 02                	add    BYTE PTR [edx],al
    28d0:	04 05                	add    al,0x5
    28d2:	05 00 00 00 02       	add    eax,0x2000000
    28d7:	0c 04                	or     al,0x4
    28d9:	66 01 00             	add    WORD PTR [eax],ax
    28dc:	00 02                	add    BYTE PTR [edx],al
    28de:	01 02                	add    DWORD PTR [edx],eax
    28e0:	13 01                	adc    eax,DWORD PTR [ecx]
    28e2:	00 00                	add    BYTE PTR [eax],al
    28e4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    28e7:	83 01 00             	add    DWORD PTR [ecx],0x0
    28ea:	00 05 d8 03 00 00    	add    BYTE PTR ds:0x3d8,al
    28f0:	04 61                	add    al,0x61
    28f2:	00 00                	add    BYTE PTR [eax],al
    28f4:	00 06                	add    BYTE PTR [esi],al
    28f6:	15 64 01 00 00       	adc    eax,0x164
    28fb:	06                   	push   es
    28fc:	8d 03                	lea    eax,[ebx]
    28fe:	00 00                	add    BYTE PTR [eax],al
    2900:	00 06                	add    BYTE PTR [esi],al
    2902:	d7                   	xlat   BYTE PTR ds:[ebx]
    2903:	04 00                	add    al,0x0
    2905:	00 01                	add    BYTE PTR [ecx],al
    2907:	06                   	push   es
    2908:	fe 02                	inc    BYTE PTR [edx]
    290a:	00 00                	add    BYTE PTR [eax],al
    290c:	02 06                	add    al,BYTE PTR [esi]
    290e:	c9                   	leave  
    290f:	04 00                	add    al,0x0
    2911:	00 03                	add    BYTE PTR [ebx],al
    2913:	06                   	push   es
    2914:	35 03 00 00 04       	xor    eax,0x4000003
    2919:	06                   	push   es
    291a:	27                   	daa    
    291b:	03 00                	add    eax,DWORD PTR [eax]
    291d:	00 05 06 a7 04 00    	add    BYTE PTR ds:0x4a706,al
    2923:	00 06                	add    BYTE PTR [esi],al
    2925:	06                   	push   es
    2926:	1a 04 00             	sbb    al,BYTE PTR [eax+eax*1]
    2929:	00 07                	add    BYTE PTR [edi],al
    292b:	06                   	push   es
    292c:	64 03 00             	add    eax,DWORD PTR fs:[eax]
    292f:	00 08                	add    BYTE PTR [eax],cl
    2931:	06                   	push   es
    2932:	0d 04 00 00 09       	or     eax,0x9000004
    2937:	06                   	push   es
    2938:	27                   	daa    
    2939:	04 00                	add    al,0x0
    293b:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    293e:	52                   	push   edx
    293f:	04 00                	add    al,0x0
    2941:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    2944:	bf 02 00 00 61       	mov    edi,0x61000002
    2949:	06                   	push   es
    294a:	e8 03 00 00 97       	call   97002952 <sysEnter_Vector+0x96ed2952>
    294f:	07                   	pop    es
    2950:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2951:	03 00                	add    eax,DWORD PTR [eax]
    2953:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2956:	07                   	pop    es
    2957:	45                   	inc    ebp
    2958:	04 00                	add    al,0x0
    295a:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    295e:	76 04                	jbe    2964 <sysEnter_Vector-0x12d69c>
    2960:	00 00                	add    BYTE PTR [eax],al
    2962:	65 01 07             	add    DWORD PTR gs:[edi],eax
    2965:	ea 02 00 00 66 01 07 	jmp    0x701:0x66000002
    296c:	4f                   	dec    edi
    296d:	03 00                	add    eax,DWORD PTR [eax]
    296f:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    2972:	07                   	pop    es
    2973:	42                   	inc    edx
    2974:	03 00                	add    eax,DWORD PTR [eax]
    2976:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    2979:	07                   	pop    es
    297a:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    2981:	d2 02                	rol    BYTE PTR [edx],cl
    2983:	00 00                	add    BYTE PTR [eax],al
    2985:	70 01                	jo     2988 <sysEnter_Vector-0x12d678>
    2987:	07                   	pop    es
    2988:	17                   	pop    ss
    2989:	03 00                	add    eax,DWORD PTR [eax]
    298b:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    298e:	07                   	pop    es
    298f:	bb 04 00 00 00       	mov    ebx,0x4
    2994:	03 07                	add    eax,DWORD PTR [edi]
    2996:	36                   	ss
    2997:	04 00                	add    al,0x0
    2999:	00 01                	add    BYTE PTR [ecx],al
    299b:	03 07                	add    eax,DWORD PTR [edi]
    299d:	c4 03                	les    eax,FWORD PTR [ebx]
    299f:	00 00                	add    BYTE PTR [eax],al
    29a1:	02 03                	add    al,BYTE PTR [ebx]
    29a3:	07                   	pop    es
    29a4:	9d                   	popf   
    29a5:	03 00                	add    eax,DWORD PTR [eax]
    29a7:	00 03                	add    BYTE PTR [ebx],al
    29a9:	03 07                	add    eax,DWORD PTR [edi]
    29ab:	fc                   	cld    
    29ac:	03 00                	add    eax,DWORD PTR [eax]
    29ae:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    29b1:	07                   	pop    es
    29b2:	66                   	data16
    29b3:	04 00                	add    al,0x0
    29b5:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    29bb:	07                   	pop    es
    29bc:	5c                   	pop    esp
    29bd:	00 00                	add    BYTE PTR [eax],al
    29bf:	00 08                	add    BYTE PTR [eax],cl
    29c1:	04 25                	add    al,0x25
    29c3:	00 00                	add    BYTE PTR [eax],al
    29c5:	00 09                	add    BYTE PTR [ecx],cl
    29c7:	0f 09                	wbinvd 
    29c9:	00 00                	add    BYTE PTR [eax],al
    29cb:	01 0a                	add    DWORD PTR [edx],ecx
    29cd:	3a 00                	cmp    al,BYTE PTR [eax]
    29cf:	00 00                	add    BYTE PTR [eax],al
    29d1:	c0 1e 00             	rcr    BYTE PTR [esi],0x0
    29d4:	9f                   	lahf   
    29d5:	29 00                	sub    DWORD PTR [eax],eax
    29d7:	00 00                	add    BYTE PTR [eax],al
    29d9:	01 9c 99 01 00 00 0a 	add    DWORD PTR [ecx+ebx*4+0xa000001],ebx
    29e0:	14 09                	adc    al,0x9
    29e2:	00 00                	add    BYTE PTR [eax],al
    29e4:	01 0a                	add    DWORD PTR [edx],ecx
    29e6:	99                   	cdq    
    29e7:	01 00                	add    DWORD PTR [eax],eax
    29e9:	00 02                	add    BYTE PTR [edx],al
    29eb:	91                   	xchg   ecx,eax
    29ec:	00 00                	add    BYTE PTR [eax],al
    29ee:	08 04 3a             	or     BYTE PTR [edx+edi*1],al
    29f1:	00 00                	add    BYTE PTR [eax],al
    29f3:	00 0b                	add    BYTE PTR [ebx],cl
    29f5:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    29fa:	34 56                	xor    al,0x56
    29fc:	00 00                	add    BYTE PTR [eax],al
    29fe:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    2a04:	9f                   	lahf   
    2a05:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    2a08:	00 00                	add    BYTE PTR [eax],al
    2a0a:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    2a10:	05 03 f0 61 00       	add    eax,0x61f003
    2a15:	9f                   	lahf   
    2a16:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    2a19:	00 00                	add    BYTE PTR [eax],al
    2a1b:	03 36                	add    esi,DWORD PTR [esi]
    2a1d:	56                   	push   esi
    2a1e:	00 00                	add    BYTE PTR [eax],al
    2a20:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    2a26:	9f                   	lahf   
    2a27:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    2a2b:	00 03                	add    BYTE PTR [ebx],al
    2a2d:	37                   	aaa    
    2a2e:	7a 00                	jp     2a30 <sysEnter_Vector-0x12d5d0>
    2a30:	00 00                	add    BYTE PTR [eax],al
    2a32:	05 03 f8 61 00       	add    eax,0x61f803
    2a37:	9f                   	lahf   
    2a38:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    2a3b:	00 00                	add    BYTE PTR [eax],al
    2a3d:	04 2f                	add    al,0x2f
    2a3f:	f4                   	hlt    
    2a40:	01 00                	add    DWORD PTR [eax],eax
    2a42:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    2a48:	9f                   	lahf   
    2a49:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    2a4c:	00 00                	add    BYTE PTR [eax],al
    2a4e:	00 0b                	add    BYTE PTR [ebx],cl
    2a50:	91                   	xchg   ecx,eax
    2a51:	00 00                	add    BYTE PTR [eax],al
    2a53:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    2a56:	3a 00                	cmp    al,BYTE PTR [eax]
    2a58:	00 00                	add    BYTE PTR [eax],al
    2a5a:	05 03 e0 61 00       	add    eax,0x61e003
    2a5f:	9f                   	lahf   
    2a60:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    2a63:	00 00                	add    BYTE PTR [eax],al
    2a65:	05 53 1c 02 00       	add    eax,0x21c53
    2a6a:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    2a70:	9f                   	lahf   
    2a71:	08 04 6b             	or     BYTE PTR [ebx+ebp*2],al
    2a74:	01 00                	add    DWORD PTR [eax],eax
    2a76:	00 00                	add    BYTE PTR [eax],al
    2a78:	f0 03 00             	lock add eax,DWORD PTR [eax]
    2a7b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2a7e:	81 0c 00 00 04 01 ac 	or     DWORD PTR [eax+eax*1],0xac010400
    2a85:	00 00                	add    BYTE PTR [eax],al
    2a87:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
    2a8a:	09 00                	or     DWORD PTR [eax],eax
    2a8c:	00 1e                	add    BYTE PTR [esi],bl
    2a8e:	00 00                	add    BYTE PTR [eax],al
    2a90:	00 ec                	add    ah,ch
    2a92:	1e                   	push   ds
    2a93:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
    2a99:	2b 10                	sub    edx,DWORD PTR [eax]
    2a9b:	00 00                	add    BYTE PTR [eax],al
    2a9d:	02 89 06 00 00 02    	add    cl,BYTE PTR [ecx+0x2000006]
    2aa3:	28 30                	sub    BYTE PTR [eax],dh
    2aa5:	00 00                	add    BYTE PTR [eax],al
    2aa7:	00 03                	add    BYTE PTR [ebx],al
    2aa9:	04 b1                	add    al,0xb1
    2aab:	05 00 00 3a 00       	add    eax,0x3a0000
    2ab0:	00 00                	add    BYTE PTR [eax],al
    2ab2:	04 01                	add    al,0x1
    2ab4:	06                   	push   es
    2ab5:	8c 00                	mov    WORD PTR [eax],es
    2ab7:	00 00                	add    BYTE PTR [eax],al
    2ab9:	02 90 06 00 00 02    	add    dl,BYTE PTR [eax+0x2000006]
    2abf:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    2ac5:	01 06                	add    DWORD PTR [esi],eax
    2ac7:	85 00                	test   DWORD PTR [eax],eax
    2ac9:	00 00                	add    BYTE PTR [eax],al
    2acb:	04 02                	add    al,0x2
    2acd:	05 72 01 00 00       	add    eax,0x172
    2ad2:	05 04 05 69 6e       	add    eax,0x6e690504
    2ad7:	74 00                	je     2ad9 <sysEnter_Vector-0x12d527>
    2ad9:	04 08                	add    al,0x8
    2adb:	05 00 00 00 00       	add    eax,0x0
    2ae0:	04 01                	add    al,0x1
    2ae2:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    2ae8:	02 07                	add    al,BYTE PTR [edi]
    2aea:	19 01                	sbb    DWORD PTR [ecx],eax
    2aec:	00 00                	add    BYTE PTR [eax],al
    2aee:	02 0e                	add    cl,BYTE PTR [esi]
    2af0:	00 00                	add    BYTE PTR [eax],al
    2af2:	00 03                	add    BYTE PTR [ebx],al
    2af4:	34 81                	xor    al,0x81
    2af6:	00 00                	add    BYTE PTR [eax],al
    2af8:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2afb:	07                   	pop    es
    2afc:	61                   	popa   
    2afd:	00 00                	add    BYTE PTR [eax],al
    2aff:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    2b02:	07                   	pop    es
    2b03:	57                   	push   edi
    2b04:	00 00                	add    BYTE PTR [eax],al
    2b06:	00 02                	add    BYTE PTR [edx],al
    2b08:	4d                   	dec    ebp
    2b09:	00 00                	add    BYTE PTR [eax],al
    2b0b:	00 03                	add    BYTE PTR [ebx],al
    2b0d:	56                   	push   esi
    2b0e:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    2b14:	05 05 00 00 00       	add    eax,0x5
    2b19:	04 0c                	add    al,0xc
    2b1b:	04 66                	add    al,0x66
    2b1d:	01 00                	add    DWORD PTR [eax],eax
    2b1f:	00 06                	add    BYTE PTR [esi],al
    2b21:	04 ae                	add    al,0xae
    2b23:	00 00                	add    BYTE PTR [eax],al
    2b25:	00 07                	add    BYTE PTR [edi],al
    2b27:	3a 00                	cmp    al,BYTE PTR [eax]
    2b29:	00 00                	add    BYTE PTR [eax],al
    2b2b:	04 01                	add    al,0x1
    2b2d:	02 13                	add    dl,BYTE PTR [ebx]
    2b2f:	01 00                	add    DWORD PTR [eax],eax
    2b31:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b34:	07                   	pop    es
    2b35:	83 01 00             	add    DWORD PTR [ecx],0x0
    2b38:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b3b:	07                   	pop    es
    2b3c:	5c                   	pop    esp
    2b3d:	00 00                	add    BYTE PTR [eax],al
    2b3f:	00 06                	add    BYTE PTR [esi],al
    2b41:	04 3a                	add    al,0x3a
    2b43:	00 00                	add    BYTE PTR [eax],al
    2b45:	00 08                	add    BYTE PTR [eax],cl
    2b47:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    2b49:	00 00                	add    BYTE PTR [eax],al
    2b4b:	01 0a                	add    DWORD PTR [edx],ecx
    2b4d:	5a                   	pop    edx
    2b4e:	00 00                	add    BYTE PTR [eax],al
    2b50:	00 ec                	add    ah,ch
    2b52:	1e                   	push   ds
    2b53:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
    2b59:	01 9c 00 01 00 00 09 	add    DWORD PTR [eax+eax*1+0x9000001],ebx
    2b60:	73 00                	jae    2b62 <sysEnter_Vector-0x12d49e>
    2b62:	01 0a                	add    DWORD PTR [edx],ecx
    2b64:	00 01                	add    BYTE PTR [ecx],al
    2b66:	00 00                	add    BYTE PTR [eax],al
    2b68:	02 91 00 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a00]
    2b6e:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    2b71:	00 00                	add    BYTE PTR [eax],al
    2b73:	00 02                	add    BYTE PTR [edx],al
    2b75:	91                   	xchg   ecx,eax
    2b76:	70 00                	jo     2b78 <sysEnter_Vector-0x12d488>
    2b78:	06                   	push   es
    2b79:	04 a8                	add    al,0xa8
    2b7b:	00 00                	add    BYTE PTR [eax],al
    2b7d:	00 08                	add    BYTE PTR [eax],cl
    2b7f:	50                   	push   eax
    2b80:	09 00                	or     DWORD PTR [eax],eax
    2b82:	00 01                	add    BYTE PTR [ecx],al
    2b84:	21 c8                	and    eax,ecx
    2b86:	00 00                	add    BYTE PTR [eax],al
    2b88:	00 4b 1f             	add    BYTE PTR [ebx+0x1f],cl
    2b8b:	00 9f 3e 02 00 00    	add    BYTE PTR [edi+0x23e],bl
    2b91:	01 9c e0 01 00 00 09 	add    DWORD PTR [eax+eiz*8+0x9000001],ebx
    2b98:	73 74                	jae    2c0e <sysEnter_Vector-0x12d3f2>
    2b9a:	72 00                	jb     2b9c <sysEnter_Vector-0x12d464>
    2b9c:	01 21                	add    DWORD PTR [ecx],esp
    2b9e:	c8 00 00 00          	enter  0x0,0x0
    2ba2:	02 91 00 09 6e 75    	add    dl,BYTE PTR [ecx+0x756e0900]
    2ba8:	6d                   	ins    DWORD PTR es:[edi],dx
    2ba9:	00 01                	add    BYTE PTR [ecx],al
    2bab:	21 9a 00 00 00 02    	and    DWORD PTR [edx+0x2000000],ebx
    2bb1:	91                   	xchg   ecx,eax
    2bb2:	04 0b                	add    al,0xb
    2bb4:	3a 09                	cmp    cl,BYTE PTR [ecx]
    2bb6:	00 00                	add    BYTE PTR [eax],al
    2bb8:	01 21                	add    DWORD PTR [ecx],esp
    2bba:	5a                   	pop    edx
    2bbb:	00 00                	add    BYTE PTR [eax],al
    2bbd:	00 02                	add    BYTE PTR [edx],al
    2bbf:	91                   	xchg   ecx,eax
    2bc0:	08 0b                	or     BYTE PTR [ebx],cl
    2bc2:	6c                   	ins    BYTE PTR es:[edi],dx
    2bc3:	06                   	push   es
    2bc4:	00 00                	add    BYTE PTR [eax],al
    2bc6:	01 21                	add    DWORD PTR [ecx],esp
    2bc8:	5a                   	pop    edx
    2bc9:	00 00                	add    BYTE PTR [eax],al
    2bcb:	00 02                	add    BYTE PTR [edx],al
    2bcd:	91                   	xchg   ecx,eax
    2bce:	0c 0b                	or     al,0xb
    2bd0:	57                   	push   edi
    2bd1:	09 00                	or     DWORD PTR [eax],eax
    2bd3:	00 01                	add    BYTE PTR [ecx],al
    2bd5:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    2bd8:	00 00                	add    BYTE PTR [eax],al
    2bda:	02 91 10 0b 87 01    	add    dl,BYTE PTR [ecx+0x1870b10]
    2be0:	00 00                	add    BYTE PTR [eax],al
    2be2:	01 22                	add    DWORD PTR [edx],esp
    2be4:	5a                   	pop    edx
    2be5:	00 00                	add    BYTE PTR [eax],al
    2be7:	00 02                	add    BYTE PTR [edx],al
    2be9:	91                   	xchg   ecx,eax
    2bea:	14 0c                	adc    al,0xc
    2bec:	61                   	popa   
    2bed:	09 00                	or     DWORD PTR [eax],eax
    2bef:	00 01                	add    BYTE PTR [ecx],al
    2bf1:	25 f0 01 00 00       	and    eax,0x1f0
    2bf6:	05 03 98 5e 00       	add    eax,0x5e9803
    2bfb:	9f                   	lahf   
    2bfc:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    2c00:	00 01                	add    BYTE PTR [ecx],al
    2c02:	27                   	daa    
    2c03:	f5                   	cmc    
    2c04:	01 00                	add    DWORD PTR [eax],eax
    2c06:	00 03                	add    BYTE PTR [ebx],al
    2c08:	91                   	xchg   ecx,eax
    2c09:	9e                   	sahf   
    2c0a:	7f 0a                	jg     2c16 <sysEnter_Vector-0x12d3ea>
    2c0c:	63 00                	arpl   WORD PTR [eax],ax
    2c0e:	01 28                	add    DWORD PTR [eax],ebp
    2c10:	3a 00                	cmp    al,BYTE PTR [eax]
    2c12:	00 00                	add    BYTE PTR [eax],al
    2c14:	02 91 66 0c 29 02    	add    dl,BYTE PTR [ecx+0x2290c66]
    2c1a:	00 00                	add    BYTE PTR [eax],al
    2c1c:	01 28                	add    DWORD PTR [eax],ebp
    2c1e:	3a 00                	cmp    al,BYTE PTR [eax]
    2c20:	00 00                	add    BYTE PTR [eax],al
    2c22:	02 91 6f 0c 25 09    	add    dl,BYTE PTR [ecx+0x9250c6f]
    2c28:	00 00                	add    BYTE PTR [eax],al
    2c2a:	01 28                	add    DWORD PTR [eax],ebp
    2c2c:	3a 00                	cmp    al,BYTE PTR [eax]
    2c2e:	00 00                	add    BYTE PTR [eax],al
    2c30:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    2c36:	01 29                	add    DWORD PTR [ecx],ebp
    2c38:	5a                   	pop    edx
    2c39:	00 00                	add    BYTE PTR [eax],al
    2c3b:	00 02                	add    BYTE PTR [edx],al
    2c3d:	91                   	xchg   ecx,eax
    2c3e:	68 0d 31 20 00       	push   0x20310d
    2c43:	9f                   	lahf   
    2c44:	25 00 00 00 0c       	and    eax,0xc000000
    2c49:	74 09                	je     2c54 <sysEnter_Vector-0x12d3ac>
    2c4b:	00 00                	add    BYTE PTR [eax],al
    2c4d:	01 4c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ecx
    2c51:	00 00                	add    BYTE PTR [eax],al
    2c53:	02 91 60 00 00 0e    	add    dl,BYTE PTR [ecx+0xe000060]
    2c59:	3a 00                	cmp    al,BYTE PTR [eax]
    2c5b:	00 00                	add    BYTE PTR [eax],al
    2c5d:	f0 01 00             	lock add DWORD PTR [eax],eax
    2c60:	00 0f                	add    BYTE PTR [edi],cl
    2c62:	ba 00 00 00 0f       	mov    edx,0xf000000
    2c67:	00 07                	add    BYTE PTR [edi],al
    2c69:	e0 01                	loopne 2c6c <sysEnter_Vector-0x12d394>
    2c6b:	00 00                	add    BYTE PTR [eax],al
    2c6d:	0e                   	push   cs
    2c6e:	3a 00                	cmp    al,BYTE PTR [eax]
    2c70:	00 00                	add    BYTE PTR [eax],al
    2c72:	05 02 00 00 0f       	add    eax,0xf000002
    2c77:	ba 00 00 00 41       	mov    edx,0x41000000
    2c7c:	00 10                	add    BYTE PTR [eax],dl
    2c7e:	7a 09                	jp     2c89 <sysEnter_Vector-0x12d377>
    2c80:	00 00                	add    BYTE PTR [eax],al
    2c82:	01 68 5a             	add    DWORD PTR [eax+0x5a],ebp
    2c85:	00 00                	add    BYTE PTR [eax],al
    2c87:	00 89 21 00 9f 48    	add    BYTE PTR [ecx+0x489f0021],cl
    2c8d:	04 00                	add    al,0x0
    2c8f:	00 01                	add    BYTE PTR [ecx],al
    2c91:	9c                   	pushf  
    2c92:	0e                   	push   cs
    2c93:	03 00                	add    eax,DWORD PTR [eax]
    2c95:	00 09                	add    BYTE PTR [ecx],cl
    2c97:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    2c9a:	00 01                	add    BYTE PTR [ecx],al
    2c9c:	68 c8 00 00 00       	push   0xc8
    2ca1:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    2ca7:	74 00                	je     2ca9 <sysEnter_Vector-0x12d357>
    2ca9:	01 68 a8             	add    DWORD PTR [eax-0x58],ebp
    2cac:	00 00                	add    BYTE PTR [eax],al
    2cae:	00 02                	add    BYTE PTR [edx],al
    2cb0:	91                   	xchg   ecx,eax
    2cb1:	04 0b                	add    al,0xb
    2cb3:	6a 07                	push   0x7
    2cb5:	00 00                	add    BYTE PTR [eax],al
    2cb7:	01 68 41             	add    DWORD PTR [eax+0x41],ebp
    2cba:	00 00                	add    BYTE PTR [eax],al
    2cbc:	00 02                	add    BYTE PTR [edx],al
    2cbe:	91                   	xchg   ecx,eax
    2cbf:	08 0a                	or     BYTE PTR [edx],cl
    2cc1:	6c                   	ins    BYTE PTR es:[edi],dx
    2cc2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2cc4:	00 01                	add    BYTE PTR [ecx],al
    2cc6:	6a 5a                	push   0x5a
    2cc8:	00 00                	add    BYTE PTR [eax],al
    2cca:	00 02                	add    BYTE PTR [edx],al
    2ccc:	91                   	xchg   ecx,eax
    2ccd:	6c                   	ins    BYTE PTR es:[edi],dx
    2cce:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    2cd1:	6d                   	ins    DWORD PTR es:[edi],dx
    2cd2:	00 01                	add    BYTE PTR [ecx],al
    2cd4:	6b c1 00             	imul   eax,ecx,0x0
    2cd7:	00 00                	add    BYTE PTR [eax],al
    2cd9:	02 91 68 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a68]
    2cdf:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    2ce3:	00 00                	add    BYTE PTR [eax],al
    2ce5:	02 91 64 0c 3a 09    	add    dl,BYTE PTR [ecx+0x93a0c64]
    2ceb:	00 00                	add    BYTE PTR [eax],al
    2ced:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    2cf1:	00 00                	add    BYTE PTR [eax],al
    2cf3:	02 91 60 0a 73 74    	add    dl,BYTE PTR [ecx+0x74730a60]
    2cf9:	72 00                	jb     2cfb <sysEnter_Vector-0x12d305>
    2cfb:	01 6d c8             	add    DWORD PTR [ebp-0x38],ebp
    2cfe:	00 00                	add    BYTE PTR [eax],al
    2d00:	00 02                	add    BYTE PTR [edx],al
    2d02:	91                   	xchg   ecx,eax
    2d03:	5c                   	pop    esp
    2d04:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    2d07:	01 6e a8             	add    DWORD PTR [esi-0x58],ebp
    2d0a:	00 00                	add    BYTE PTR [eax],al
    2d0c:	00 02                	add    BYTE PTR [edx],al
    2d0e:	91                   	xchg   ecx,eax
    2d0f:	58                   	pop    eax
    2d10:	0c ba                	or     al,0xba
    2d12:	07                   	pop    es
    2d13:	00 00                	add    BYTE PTR [eax],al
    2d15:	01 70 5a             	add    DWORD PTR [eax+0x5a],esi
    2d18:	00 00                	add    BYTE PTR [eax],al
    2d1a:	00 02                	add    BYTE PTR [edx],al
    2d1c:	91                   	xchg   ecx,eax
    2d1d:	54                   	push   esp
    2d1e:	0c 68                	or     al,0x68
    2d20:	09 00                	or     DWORD PTR [eax],eax
    2d22:	00 01                	add    BYTE PTR [ecx],al
    2d24:	72 5a                	jb     2d80 <sysEnter_Vector-0x12d280>
    2d26:	00 00                	add    BYTE PTR [eax],al
    2d28:	00 02                	add    BYTE PTR [edx],al
    2d2a:	91                   	xchg   ecx,eax
    2d2b:	50                   	push   eax
    2d2c:	0c 57                	or     al,0x57
    2d2e:	09 00                	or     DWORD PTR [eax],eax
    2d30:	00 01                	add    BYTE PTR [ecx],al
    2d32:	73 5a                	jae    2d8e <sysEnter_Vector-0x12d272>
    2d34:	00 00                	add    BYTE PTR [eax],al
    2d36:	00 02                	add    BYTE PTR [edx],al
    2d38:	91                   	xchg   ecx,eax
    2d39:	4c                   	dec    esp
    2d3a:	0c 3f                	or     al,0x3f
    2d3c:	09 00                	or     DWORD PTR [eax],eax
    2d3e:	00 01                	add    BYTE PTR [ecx],al
    2d40:	75 5a                	jne    2d9c <sysEnter_Vector-0x12d264>
    2d42:	00 00                	add    BYTE PTR [eax],al
    2d44:	00 02                	add    BYTE PTR [edx],al
    2d46:	91                   	xchg   ecx,eax
    2d47:	48                   	dec    eax
    2d48:	11 49 09             	adc    DWORD PTR [ecx+0x9],ecx
    2d4b:	00 00                	add    BYTE PTR [eax],al
    2d4d:	01 7f cd             	add    DWORD PTR [edi-0x33],edi
    2d50:	21 00                	and    DWORD PTR [eax],eax
    2d52:	9f                   	lahf   
    2d53:	12 72 24             	adc    dh,BYTE PTR [edx+0x24]
    2d56:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    2d5c:	f6 02 00             	test   BYTE PTR [edx],0x0
    2d5f:	00 0a                	add    BYTE PTR [edx],cl
    2d61:	69 70 00 01 e0 0e 03 	imul   esi,DWORD PTR [eax+0x0],0x30ee001
    2d68:	00 00                	add    BYTE PTR [eax],al
    2d6a:	02 91 44 00 0d 92    	add    dl,BYTE PTR [ecx-0x6df2ffbc]
    2d70:	24 00                	and    al,0x0
    2d72:	9f                   	lahf   
    2d73:	1b 00                	sbb    eax,DWORD PTR [eax]
    2d75:	00 00                	add    BYTE PTR [eax],al
    2d77:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    2d7a:	00 01                	add    BYTE PTR [ecx],al
    2d7c:	e3 14                	jecxz  2d92 <sysEnter_Vector-0x12d26e>
    2d7e:	03 00                	add    eax,DWORD PTR [eax]
    2d80:	00 02                	add    BYTE PTR [edx],al
    2d82:	91                   	xchg   ecx,eax
    2d83:	40                   	inc    eax
    2d84:	00 00                	add    BYTE PTR [eax],al
    2d86:	06                   	push   es
    2d87:	04 9a                	add    al,0x9a
    2d89:	00 00                	add    BYTE PTR [eax],al
    2d8b:	00 06                	add    BYTE PTR [esi],al
    2d8d:	04 5a                	add    al,0x5a
    2d8f:	00 00                	add    BYTE PTR [eax],al
    2d91:	00 13                	add    BYTE PTR [ebx],dl
    2d93:	7b 09                	jnp    2d9e <sysEnter_Vector-0x12d262>
    2d95:	00 00                	add    BYTE PTR [eax],al
    2d97:	01 15 01 5a 00 00    	add    DWORD PTR ds:0x5a01,edx
    2d9d:	00 d1                	add    cl,dl
    2d9f:	25 00 9f 33 00       	and    eax,0x339f00
    2da4:	00 00                	add    BYTE PTR [eax],al
    2da6:	01 9c 70 03 00 00 14 	add    DWORD PTR [eax+esi*2+0x14000003],ebx
    2dad:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    2db0:	00 01                	add    BYTE PTR [ecx],al
    2db2:	15 01 c8 00 00       	adc    eax,0xc801
    2db7:	00 02                	add    BYTE PTR [edx],al
    2db9:	91                   	xchg   ecx,eax
    2dba:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    2dbd:	6d                   	ins    DWORD PTR es:[edi],dx
    2dbe:	74 00                	je     2dc0 <sysEnter_Vector-0x12d240>
    2dc0:	01 15 01 a8 00 00    	add    DWORD PTR ds:0xa801,edx
    2dc6:	00 02                	add    BYTE PTR [edx],al
    2dc8:	91                   	xchg   ecx,eax
    2dc9:	04 15                	add    al,0x15
    2dcb:	16                   	push   ss
    2dcc:	6a 07                	push   0x7
    2dce:	00 00                	add    BYTE PTR [eax],al
    2dd0:	01 17                	add    DWORD PTR [edi],edx
    2dd2:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    2dd5:	00 00                	add    BYTE PTR [eax],al
    2dd7:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    2ddd:	01 18                	add    DWORD PTR [eax],ebx
    2ddf:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    2de2:	00 00                	add    BYTE PTR [eax],al
    2de4:	02 91 6c 00 18 a3    	add    dl,BYTE PTR [ecx-0x5ce7ff94]
    2dea:	00 00                	add    BYTE PTR [eax],al
    2dec:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2def:	76 00                	jbe    2df1 <sysEnter_Vector-0x12d20f>
    2df1:	00 00                	add    BYTE PTR [eax],al
    2df3:	05 03 ec 61 00       	add    eax,0x61ec03
    2df8:	9f                   	lahf   
    2df9:	18 34 01             	sbb    BYTE PTR [ecx+eax*1],dh
    2dfc:	00 00                	add    BYTE PTR [eax],al
    2dfe:	04 35                	add    al,0x35
    2e00:	76 00                	jbe    2e02 <sysEnter_Vector-0x12d1fe>
    2e02:	00 00                	add    BYTE PTR [eax],al
    2e04:	05 03 f0 61 00       	add    eax,0x61f003
    2e09:	9f                   	lahf   
    2e0a:	18 7b 00             	sbb    BYTE PTR [ebx+0x0],bh
    2e0d:	00 00                	add    BYTE PTR [eax],al
    2e0f:	04 36                	add    al,0x36
    2e11:	76 00                	jbe    2e13 <sysEnter_Vector-0x12d1ed>
    2e13:	00 00                	add    BYTE PTR [eax],al
    2e15:	05 03 e8 61 00       	add    eax,0x61e803
    2e1a:	9f                   	lahf   
    2e1b:	18 7c 01 00          	sbb    BYTE PTR [ecx+eax*1+0x0],bh
    2e1f:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    2e22:	9a 00 00 00 05 03 f8 	call   0xf803:0x5000000
    2e29:	61                   	popa   
    2e2a:	00 9f 18 6e 00 00    	add    BYTE PTR [edi+0x6e18],bl
    2e30:	00 05 2f c5 03 00    	add    BYTE PTR ds:0x3c52f,al
    2e36:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    2e3c:	9f                   	lahf   
    2e3d:	06                   	push   es
    2e3e:	04 8f                	add    al,0x8f
    2e40:	00 00                	add    BYTE PTR [eax],al
    2e42:	00 18                	add    BYTE PTR [eax],bl
    2e44:	91                   	xchg   ecx,eax
    2e45:	00 00                	add    BYTE PTR [eax],al
    2e47:	00 05 30 5a 00 00    	add    BYTE PTR ds:0x5a30,al
    2e4d:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    2e53:	9f                   	lahf   
    2e54:	18 41 00             	sbb    BYTE PTR [ecx+0x0],al
    2e57:	00 00                	add    BYTE PTR [eax],al
    2e59:	06                   	push   es
    2e5a:	53                   	push   ebx
    2e5b:	ed                   	in     eax,dx
    2e5c:	03 00                	add    eax,DWORD PTR [eax]
    2e5e:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    2e64:	9f                   	lahf   
    2e65:	06                   	push   es
    2e66:	04 c8                	add    al,0xc8
    2e68:	00 00                	add    BYTE PTR [eax],al
    2e6a:	00 00                	add    BYTE PTR [eax],al
    2e6c:	65 01 00             	add    DWORD PTR gs:[eax],eax
    2e6f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2e72:	d7                   	xlat   BYTE PTR ds:[ebx]
    2e73:	0d 00 00 04 01       	or     eax,0x1040000
    2e78:	ac                   	lods   al,BYTE PTR ds:[esi]
    2e79:	00 00                	add    BYTE PTR [eax],al
    2e7b:	00 0c 83             	add    BYTE PTR [ebx+eax*4],cl
    2e7e:	09 00                	or     DWORD PTR [eax],eax
    2e80:	00 1e                	add    BYTE PTR [esi],bl
    2e82:	00 00                	add    BYTE PTR [eax],al
    2e84:	00 04 26             	add    BYTE PTR [esi+eiz*1],al
    2e87:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    2e8d:	17                   	pop    ss
    2e8e:	12 00                	adc    al,BYTE PTR [eax]
    2e90:	00 02                	add    BYTE PTR [edx],al
    2e92:	01 06                	add    DWORD PTR [esi],eax
    2e94:	8c 00                	mov    WORD PTR [eax],es
    2e96:	00 00                	add    BYTE PTR [eax],al
    2e98:	02 01                	add    al,BYTE PTR [ecx]
    2e9a:	06                   	push   es
    2e9b:	85 00                	test   DWORD PTR [eax],eax
    2e9d:	00 00                	add    BYTE PTR [eax],al
    2e9f:	02 02                	add    al,BYTE PTR [edx]
    2ea1:	05 72 01 00 00       	add    eax,0x172
    2ea6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2ead:	02 08                	add    cl,BYTE PTR [eax]
    2eaf:	05 00 00 00 00       	add    eax,0x0
    2eb4:	02 01                	add    al,BYTE PTR [ecx]
    2eb6:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    2ebc:	02 07                	add    al,BYTE PTR [edi]
    2ebe:	19 01                	sbb    DWORD PTR [ecx],eax
    2ec0:	00 00                	add    BYTE PTR [eax],al
    2ec2:	04 0e                	add    al,0xe
    2ec4:	00 00                	add    BYTE PTR [eax],al
    2ec6:	00 02                	add    BYTE PTR [edx],al
    2ec8:	34 61                	xor    al,0x61
    2eca:	00 00                	add    BYTE PTR [eax],al
    2ecc:	00 02                	add    BYTE PTR [edx],al
    2ece:	04 07                	add    al,0x7
    2ed0:	61                   	popa   
    2ed1:	00 00                	add    BYTE PTR [eax],al
    2ed3:	00 02                	add    BYTE PTR [edx],al
    2ed5:	08 07                	or     BYTE PTR [edi],al
    2ed7:	57                   	push   edi
    2ed8:	00 00                	add    BYTE PTR [eax],al
    2eda:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    2ee1:	56                   	push   esi
    2ee2:	61                   	popa   
    2ee3:	00 00                	add    BYTE PTR [eax],al
    2ee5:	00 02                	add    BYTE PTR [edx],al
    2ee7:	04 05                	add    al,0x5
    2ee9:	05 00 00 00 02       	add    eax,0x2000000
    2eee:	0c 04                	or     al,0x4
    2ef0:	66 01 00             	add    WORD PTR [eax],ax
    2ef3:	00 02                	add    BYTE PTR [edx],al
    2ef5:	01 02                	add    DWORD PTR [edx],eax
    2ef7:	13 01                	adc    eax,DWORD PTR [ecx]
    2ef9:	00 00                	add    BYTE PTR [eax],al
    2efb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2efe:	83 01 00             	add    DWORD PTR [ecx],0x0
    2f01:	00 02                	add    BYTE PTR [edx],al
    2f03:	04 07                	add    al,0x7
    2f05:	5c                   	pop    esp
    2f06:	00 00                	add    BYTE PTR [eax],al
    2f08:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    2f0e:	00 06                	add    BYTE PTR [esi],al
    2f10:	94                   	xchg   esp,eax
    2f11:	09 00                	or     DWORD PTR [eax],eax
    2f13:	00 01                	add    BYTE PTR [ecx],al
    2f15:	10 04 26             	adc    BYTE PTR [esi+eiz*1],al
    2f18:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    2f1e:	01 9c d5 00 00 00 07 	add    DWORD PTR [ebp+edx*8+0x7000000],ebx
    2f25:	8f 09                	(bad)  
    2f27:	00 00                	add    BYTE PTR [eax],al
    2f29:	01 12                	add    DWORD PTR [edx],edx
    2f2b:	d5 00                	aad    0x0
    2f2d:	00 00                	add    BYTE PTR [eax],al
    2f2f:	02 91 67 07 9d 09    	add    dl,BYTE PTR [ecx+0x99d0767]
    2f35:	00 00                	add    BYTE PTR [eax],al
    2f37:	01 13                	add    DWORD PTR [ebx],edx
    2f39:	3a 00                	cmp    al,BYTE PTR [eax]
    2f3b:	00 00                	add    BYTE PTR [eax],al
    2f3d:	02 91 6c 00 08 25    	add    dl,BYTE PTR [ecx+0x2508006c]
    2f43:	00 00                	add    BYTE PTR [eax],al
    2f45:	00 e5                	add    ch,ah
    2f47:	00 00                	add    BYTE PTR [eax],al
    2f49:	00 09                	add    BYTE PTR [ecx],cl
    2f4b:	8f 00                	pop    DWORD PTR [eax]
    2f4d:	00 00                	add    BYTE PTR [eax],al
    2f4f:	04 00                	add    al,0x0
    2f51:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    2f57:	34 56                	xor    al,0x56
    2f59:	00 00                	add    BYTE PTR [eax],al
    2f5b:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    2f61:	9f                   	lahf   
    2f62:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    2f65:	00 00                	add    BYTE PTR [eax],al
    2f67:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    2f6d:	05 03 f0 61 00       	add    eax,0x61f003
    2f72:	9f                   	lahf   
    2f73:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    2f76:	00 00                	add    BYTE PTR [eax],al
    2f78:	03 36                	add    esi,DWORD PTR [esi]
    2f7a:	56                   	push   esi
    2f7b:	00 00                	add    BYTE PTR [eax],al
    2f7d:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    2f83:	9f                   	lahf   
    2f84:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    2f88:	00 03                	add    BYTE PTR [ebx],al
    2f8a:	37                   	aaa    
    2f8b:	7a 00                	jp     2f8d <sysEnter_Vector-0x12d073>
    2f8d:	00 00                	add    BYTE PTR [eax],al
    2f8f:	05 03 f8 61 00       	add    eax,0x61f803
    2f94:	9f                   	lahf   
    2f95:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    2f98:	00 00                	add    BYTE PTR [eax],al
    2f9a:	04 2f                	add    al,0x2f
    2f9c:	3a 01                	cmp    al,BYTE PTR [ecx]
    2f9e:	00 00                	add    BYTE PTR [eax],al
    2fa0:	05 03 e4 61 00       	add    eax,0x61e403
    2fa5:	9f                   	lahf   
    2fa6:	05 04 6f 00 00       	add    eax,0x6f04
    2fab:	00 0a                	add    BYTE PTR [edx],cl
    2fad:	91                   	xchg   ecx,eax
    2fae:	00 00                	add    BYTE PTR [eax],al
    2fb0:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    2fb3:	3a 00                	cmp    al,BYTE PTR [eax]
    2fb5:	00 00                	add    BYTE PTR [eax],al
    2fb7:	05 03 e0 61 00       	add    eax,0x61e003
    2fbc:	9f                   	lahf   
    2fbd:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    2fc0:	00 00                	add    BYTE PTR [eax],al
    2fc2:	05 53 62 01 00       	add    eax,0x16253
    2fc7:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    2fcd:	9f                   	lahf   
    2fce:	05 04 9d 00 00       	add    eax,0x9d04
    2fd3:	00 00                	add    BYTE PTR [eax],al
    2fd5:	e0 01                	loopne 2fd8 <sysEnter_Vector-0x12d028>
    2fd7:	00 00                	add    BYTE PTR [eax],al
    2fd9:	04 00                	add    al,0x0
    2fdb:	61                   	popa   
    2fdc:	0e                   	push   cs
    2fdd:	00 00                	add    BYTE PTR [eax],al
    2fdf:	04 01                	add    al,0x1
    2fe1:	ac                   	lods   al,BYTE PTR ds:[esi]
    2fe2:	00 00                	add    BYTE PTR [eax],al
    2fe4:	00 0c c0             	add    BYTE PTR [eax+eax*8],cl
    2fe7:	09 00                	or     DWORD PTR [eax],eax
    2fe9:	00 1e                	add    BYTE PTR [esi],bl
    2feb:	00 00                	add    BYTE PTR [eax],al
    2fed:	00 88 26 00 9f eb    	add    BYTE PTR [eax-0x1460ffda],cl
    2ff3:	00 00                	add    BYTE PTR [eax],al
    2ff5:	00 d9                	add    cl,bl
    2ff7:	12 00                	adc    al,BYTE PTR [eax]
    2ff9:	00 02                	add    BYTE PTR [edx],al
    2ffb:	01 06                	add    DWORD PTR [esi],eax
    2ffd:	8c 00                	mov    WORD PTR [eax],es
    2fff:	00 00                	add    BYTE PTR [eax],al
    3001:	02 01                	add    al,BYTE PTR [ecx]
    3003:	06                   	push   es
    3004:	85 00                	test   DWORD PTR [eax],eax
    3006:	00 00                	add    BYTE PTR [eax],al
    3008:	02 02                	add    al,BYTE PTR [edx]
    300a:	05 72 01 00 00       	add    eax,0x172
    300f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3016:	02 08                	add    cl,BYTE PTR [eax]
    3018:	05 00 00 00 00       	add    eax,0x0
    301d:	02 01                	add    al,BYTE PTR [ecx]
    301f:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3025:	02 07                	add    al,BYTE PTR [edi]
    3027:	19 01                	sbb    DWORD PTR [ecx],eax
    3029:	00 00                	add    BYTE PTR [eax],al
    302b:	04 0e                	add    al,0xe
    302d:	00 00                	add    BYTE PTR [eax],al
    302f:	00 02                	add    BYTE PTR [edx],al
    3031:	34 61                	xor    al,0x61
    3033:	00 00                	add    BYTE PTR [eax],al
    3035:	00 02                	add    BYTE PTR [edx],al
    3037:	04 07                	add    al,0x7
    3039:	61                   	popa   
    303a:	00 00                	add    BYTE PTR [eax],al
    303c:	00 02                	add    BYTE PTR [edx],al
    303e:	08 07                	or     BYTE PTR [edi],al
    3040:	57                   	push   edi
    3041:	00 00                	add    BYTE PTR [eax],al
    3043:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    304a:	56                   	push   esi
    304b:	61                   	popa   
    304c:	00 00                	add    BYTE PTR [eax],al
    304e:	00 02                	add    BYTE PTR [edx],al
    3050:	04 05                	add    al,0x5
    3052:	05 00 00 00 02       	add    eax,0x2000000
    3057:	0c 04                	or     al,0x4
    3059:	66 01 00             	add    WORD PTR [eax],ax
    305c:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3062:	00 06                	add    BYTE PTR [esi],al
    3064:	25 00 00 00 02       	and    eax,0x2000000
    3069:	01 02                	add    DWORD PTR [edx],eax
    306b:	13 01                	adc    eax,DWORD PTR [ecx]
    306d:	00 00                	add    BYTE PTR [eax],al
    306f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3072:	83 01 00             	add    DWORD PTR [ecx],0x0
    3075:	00 02                	add    BYTE PTR [edx],al
    3077:	04 07                	add    al,0x7
    3079:	5c                   	pop    esp
    307a:	00 00                	add    BYTE PTR [eax],al
    307c:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3082:	00 07                	add    BYTE PTR [edi],al
    3084:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3085:	09 00                	or     DWORD PTR [eax],eax
    3087:	00 01                	add    BYTE PTR [ecx],al
    3089:	1d a8 00 00 00       	sbb    eax,0xa8
    308e:	88 26                	mov    BYTE PTR [esi],ah
    3090:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    3096:	01 9c e4 00 00 00 08 	add    DWORD PTR [esp+eiz*8+0x8000000],ebx
    309d:	c1 08 00             	ror    DWORD PTR [eax],0x0
    30a0:	00 01                	add    BYTE PTR [ecx],al
    30a2:	1d a8 00 00 00       	sbb    eax,0xa8
    30a7:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    30ad:	63 00                	arpl   WORD PTR [eax],ax
    30af:	01 1d 88 00 00 00    	add    DWORD PTR ds:0x88,ebx
    30b5:	02 91 04 00 07 a5    	add    dl,BYTE PTR [ecx-0x5af8fffc]
    30bb:	09 00                	or     DWORD PTR [eax],eax
    30bd:	00 01                	add    BYTE PTR [ecx],al
    30bf:	23 a8 00 00 00 c6    	and    ebp,DWORD PTR [eax-0x3a000000]
    30c5:	26 00 9f 3e 00 00 00 	add    BYTE PTR es:[edi+0x3e],bl
    30cc:	01 9c 1a 01 00 00 08 	add    DWORD PTR [edx+ebx*1+0x8000001],ebx
    30d3:	c1 08 00             	ror    DWORD PTR [eax],0x0
    30d6:	00 01                	add    BYTE PTR [ecx],al
    30d8:	23 a8 00 00 00 02    	and    ebp,DWORD PTR [eax+0x2000000]
    30de:	91                   	xchg   ecx,eax
    30df:	00 09                	add    BYTE PTR [ecx],cl
    30e1:	73 72                	jae    3155 <sysEnter_Vector-0x12ceab>
    30e3:	63 00                	arpl   WORD PTR [eax],ax
    30e5:	01 23                	add    DWORD PTR [ebx],esp
    30e7:	88 00                	mov    BYTE PTR [eax],al
    30e9:	00 00                	add    BYTE PTR [eax],al
    30eb:	02 91 04 00 0a b4    	add    dl,BYTE PTR [ecx-0x4bf5fffc]
    30f1:	09 00                	or     DWORD PTR [eax],eax
    30f3:	00 01                	add    BYTE PTR [ecx],al
    30f5:	29 04 27             	sub    DWORD PTR [edi+eiz*1],eax
    30f8:	00 9f 6f 00 00 00    	add    BYTE PTR [edi+0x6f],bl
    30fe:	01 9c 60 01 00 00 09 	add    DWORD PTR [eax+eiz*2+0x9000001],ebx
    3105:	70 00                	jo     3107 <sysEnter_Vector-0x12cef9>
    3107:	01 29                	add    DWORD PTR [ecx],ebp
    3109:	a8 00                	test   al,0x0
    310b:	00 00                	add    BYTE PTR [eax],al
    310d:	02 91 00 09 71 00    	add    dl,BYTE PTR [ecx+0x710900]
    3113:	01 29                	add    DWORD PTR [ecx],ebp
    3115:	a8 00                	test   al,0x0
    3117:	00 00                	add    BYTE PTR [eax],al
    3119:	02 91 04 0b 63 00    	add    dl,BYTE PTR [ecx+0x630b04]
    311f:	01 2a                	add    DWORD PTR [edx],ebp
    3121:	3a 00                	cmp    al,BYTE PTR [eax]
    3123:	00 00                	add    BYTE PTR [eax],al
    3125:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    312b:	01 2a                	add    DWORD PTR [edx],ebp
    312d:	3a 00                	cmp    al,BYTE PTR [eax]
    312f:	00 00                	add    BYTE PTR [eax],al
    3131:	02 91 70 00 0c a3    	add    dl,BYTE PTR [ecx-0x5cf3ff90]
    3137:	00 00                	add    BYTE PTR [eax],al
    3139:	00 03                	add    BYTE PTR [ebx],al
    313b:	34 56                	xor    al,0x56
    313d:	00 00                	add    BYTE PTR [eax],al
    313f:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    3145:	9f                   	lahf   
    3146:	0c 34                	or     al,0x34
    3148:	01 00                	add    DWORD PTR [eax],eax
    314a:	00 03                	add    BYTE PTR [ebx],al
    314c:	35 56 00 00 00       	xor    eax,0x56
    3151:	05 03 f0 61 00       	add    eax,0x61f003
    3156:	9f                   	lahf   
    3157:	0c 7b                	or     al,0x7b
    3159:	00 00                	add    BYTE PTR [eax],al
    315b:	00 03                	add    BYTE PTR [ebx],al
    315d:	36                   	ss
    315e:	56                   	push   esi
    315f:	00 00                	add    BYTE PTR [eax],al
    3161:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    3167:	9f                   	lahf   
    3168:	0c 7c                	or     al,0x7c
    316a:	01 00                	add    DWORD PTR [eax],eax
    316c:	00 03                	add    BYTE PTR [ebx],al
    316e:	37                   	aaa    
    316f:	7a 00                	jp     3171 <sysEnter_Vector-0x12ce8f>
    3171:	00 00                	add    BYTE PTR [eax],al
    3173:	05 03 f8 61 00       	add    eax,0x61f803
    3178:	9f                   	lahf   
    3179:	0c 6e                	or     al,0x6e
    317b:	00 00                	add    BYTE PTR [eax],al
    317d:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    3180:	b5 01                	mov    ch,0x1
    3182:	00 00                	add    BYTE PTR [eax],al
    3184:	05 03 e4 61 00       	add    eax,0x61e403
    3189:	9f                   	lahf   
    318a:	05 04 6f 00 00       	add    eax,0x6f04
    318f:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    3192:	00 00                	add    BYTE PTR [eax],al
    3194:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    3197:	3a 00                	cmp    al,BYTE PTR [eax]
    3199:	00 00                	add    BYTE PTR [eax],al
    319b:	05 03 e0 61 00       	add    eax,0x61e003
    31a0:	9f                   	lahf   
    31a1:	0c 41                	or     al,0x41
    31a3:	00 00                	add    BYTE PTR [eax],al
    31a5:	00 05 53 dd 01 00    	add    BYTE PTR ds:0x1dd53,al
    31ab:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    31b1:	9f                   	lahf   
    31b2:	05 04 a8 00 00       	add    eax,0xa804
    31b7:	00 00                	add    BYTE PTR [eax],al
    31b9:	9f                   	lahf   
    31ba:	01 00                	add    DWORD PTR [eax],eax
    31bc:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    31bf:	1c 0f                	sbb    al,0xf
    31c1:	00 00                	add    BYTE PTR [eax],al
    31c3:	04 01                	add    al,0x1
    31c5:	ac                   	lods   al,BYTE PTR ds:[esi]
    31c6:	00 00                	add    BYTE PTR [eax],al
    31c8:	00 0c dc             	add    BYTE PTR [esp+ebx*8],cl
    31cb:	09 00                	or     DWORD PTR [eax],eax
    31cd:	00 1e                	add    BYTE PTR [esi],bl
    31cf:	00 00                	add    BYTE PTR [eax],al
    31d1:	00 74 27 00          	add    BYTE PTR [edi+eiz*1+0x0],dh
    31d5:	9f                   	lahf   
    31d6:	5e                   	pop    esi
    31d7:	00 00                	add    BYTE PTR [eax],al
    31d9:	00 b3 13 00 00 02    	add    BYTE PTR [ebx+0x2000013],dh
    31df:	01 06                	add    DWORD PTR [esi],eax
    31e1:	8c 00                	mov    WORD PTR [eax],es
    31e3:	00 00                	add    BYTE PTR [eax],al
    31e5:	02 01                	add    al,BYTE PTR [ecx]
    31e7:	06                   	push   es
    31e8:	85 00                	test   DWORD PTR [eax],eax
    31ea:	00 00                	add    BYTE PTR [eax],al
    31ec:	02 02                	add    al,BYTE PTR [edx]
    31ee:	05 72 01 00 00       	add    eax,0x172
    31f3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    31fa:	02 08                	add    cl,BYTE PTR [eax]
    31fc:	05 00 00 00 00       	add    eax,0x0
    3201:	02 01                	add    al,BYTE PTR [ecx]
    3203:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3209:	02 07                	add    al,BYTE PTR [edi]
    320b:	19 01                	sbb    DWORD PTR [ecx],eax
    320d:	00 00                	add    BYTE PTR [eax],al
    320f:	04 0e                	add    al,0xe
    3211:	00 00                	add    BYTE PTR [eax],al
    3213:	00 02                	add    BYTE PTR [edx],al
    3215:	34 61                	xor    al,0x61
    3217:	00 00                	add    BYTE PTR [eax],al
    3219:	00 02                	add    BYTE PTR [edx],al
    321b:	04 07                	add    al,0x7
    321d:	61                   	popa   
    321e:	00 00                	add    BYTE PTR [eax],al
    3220:	00 02                	add    BYTE PTR [edx],al
    3222:	08 07                	or     BYTE PTR [edi],al
    3224:	57                   	push   edi
    3225:	00 00                	add    BYTE PTR [eax],al
    3227:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    322e:	56                   	push   esi
    322f:	61                   	popa   
    3230:	00 00                	add    BYTE PTR [eax],al
    3232:	00 02                	add    BYTE PTR [edx],al
    3234:	04 05                	add    al,0x5
    3236:	05 00 00 00 02       	add    eax,0x2000000
    323b:	0c 04                	or     al,0x4
    323d:	66 01 00             	add    WORD PTR [eax],ax
    3240:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3246:	00 06                	add    BYTE PTR [esi],al
    3248:	25 00 00 00 02       	and    eax,0x2000000
    324d:	01 02                	add    DWORD PTR [edx],eax
    324f:	13 01                	adc    eax,DWORD PTR [ecx]
    3251:	00 00                	add    BYTE PTR [eax],al
    3253:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3256:	83 01 00             	add    DWORD PTR [ecx],0x0
    3259:	00 02                	add    BYTE PTR [edx],al
    325b:	04 07                	add    al,0x7
    325d:	5c                   	pop    esp
    325e:	00 00                	add    BYTE PTR [eax],al
    3260:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3266:	00 07                	add    BYTE PTR [edi],al
    3268:	d5 09                	aad    0x9
    326a:	00 00                	add    BYTE PTR [eax],al
    326c:	01 18                	add    DWORD PTR [eax],ebx
    326e:	3a 00                	cmp    al,BYTE PTR [eax]
    3270:	00 00                	add    BYTE PTR [eax],al
    3272:	74 27                	je     329b <sysEnter_Vector-0x12cd65>
    3274:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
    327a:	01 9c 14 01 00 00 08 	add    DWORD PTR [esp+edx*1+0x8000001],ebx
    3281:	70 31                	jo     32b4 <sysEnter_Vector-0x12cd4c>
    3283:	00 01                	add    BYTE PTR [ecx],al
    3285:	18 88 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],cl
    328b:	91                   	xchg   ecx,eax
    328c:	00 08                	add    BYTE PTR [eax],cl
    328e:	70 32                	jo     32c2 <sysEnter_Vector-0x12cd3e>
    3290:	00 01                	add    BYTE PTR [ecx],al
    3292:	18 88 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],cl
    3298:	91                   	xchg   ecx,eax
    3299:	04 09                	add    al,0x9
    329b:	73 31                	jae    32ce <sysEnter_Vector-0x12cd32>
    329d:	00 01                	add    BYTE PTR [ecx],al
    329f:	1a 14 01             	sbb    dl,BYTE PTR [ecx+eax*1]
    32a2:	00 00                	add    BYTE PTR [eax],al
    32a4:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    32a7:	73 32                	jae    32db <sysEnter_Vector-0x12cd25>
    32a9:	00 01                	add    BYTE PTR [ecx],al
    32ab:	1b 14 01             	sbb    edx,DWORD PTR [ecx+eax*1]
    32ae:	00 00                	add    BYTE PTR [eax],al
    32b0:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    32b3:	63 31                	arpl   WORD PTR [ecx],si
    32b5:	00 01                	add    BYTE PTR [ecx],al
    32b7:	1c 48                	sbb    al,0x48
    32b9:	00 00                	add    BYTE PTR [eax],al
    32bb:	00 02                	add    BYTE PTR [edx],al
    32bd:	91                   	xchg   ecx,eax
    32be:	6f                   	outs   dx,DWORD PTR ds:[esi]
    32bf:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    32c2:	00 01                	add    BYTE PTR [ecx],al
    32c4:	1c 48                	sbb    al,0x48
    32c6:	00 00                	add    BYTE PTR [eax],al
    32c8:	00 02                	add    BYTE PTR [edx],al
    32ca:	91                   	xchg   ecx,eax
    32cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
    32cc:	00 05 04 1a 01 00    	add    BYTE PTR ds:0x11a04,al
    32d2:	00 06                	add    BYTE PTR [esi],al
    32d4:	48                   	dec    eax
    32d5:	00 00                	add    BYTE PTR [eax],al
    32d7:	00 0a                	add    BYTE PTR [edx],cl
    32d9:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    32de:	34 56                	xor    al,0x56
    32e0:	00 00                	add    BYTE PTR [eax],al
    32e2:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    32e8:	9f                   	lahf   
    32e9:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    32ec:	00 00                	add    BYTE PTR [eax],al
    32ee:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    32f4:	05 03 f0 61 00       	add    eax,0x61f003
    32f9:	9f                   	lahf   
    32fa:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    32fd:	00 00                	add    BYTE PTR [eax],al
    32ff:	03 36                	add    esi,DWORD PTR [esi]
    3301:	56                   	push   esi
    3302:	00 00                	add    BYTE PTR [eax],al
    3304:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    330a:	9f                   	lahf   
    330b:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    330f:	00 03                	add    BYTE PTR [ebx],al
    3311:	37                   	aaa    
    3312:	7a 00                	jp     3314 <sysEnter_Vector-0x12ccec>
    3314:	00 00                	add    BYTE PTR [eax],al
    3316:	05 03 f8 61 00       	add    eax,0x61f803
    331b:	9f                   	lahf   
    331c:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    331f:	00 00                	add    BYTE PTR [eax],al
    3321:	04 2f                	add    al,0x2f
    3323:	74 01                	je     3326 <sysEnter_Vector-0x12ccda>
    3325:	00 00                	add    BYTE PTR [eax],al
    3327:	05 03 e4 61 00       	add    eax,0x61e403
    332c:	9f                   	lahf   
    332d:	05 04 6f 00 00       	add    eax,0x6f04
    3332:	00 0a                	add    BYTE PTR [edx],cl
    3334:	91                   	xchg   ecx,eax
    3335:	00 00                	add    BYTE PTR [eax],al
    3337:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    333a:	3a 00                	cmp    al,BYTE PTR [eax]
    333c:	00 00                	add    BYTE PTR [eax],al
    333e:	05 03 e0 61 00       	add    eax,0x61e003
    3343:	9f                   	lahf   
    3344:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    3347:	00 00                	add    BYTE PTR [eax],al
    3349:	05 53 9c 01 00       	add    eax,0x19c53
    334e:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    3354:	9f                   	lahf   
    3355:	05 04 a8 00 00       	add    eax,0xa804
    335a:	00 00                	add    BYTE PTR [eax],al
    335c:	fc                   	cld    
    335d:	01 00                	add    DWORD PTR [eax],eax
    335f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3362:	ae                   	scas   al,BYTE PTR es:[edi]
    3363:	0f 00 00             	sldt   WORD PTR [eax]
    3366:	04 01                	add    al,0x1
    3368:	ac                   	lods   al,BYTE PTR ds:[esi]
    3369:	00 00                	add    BYTE PTR [eax],al
    336b:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    336e:	0a 00                	or     al,BYTE PTR [eax]
    3370:	00 1e                	add    BYTE PTR [esi],bl
    3372:	00 00                	add    BYTE PTR [eax],al
    3374:	00 d4                	add    ah,dl
    3376:	27                   	daa    
    3377:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    337d:	7c 14                	jl     3393 <sysEnter_Vector-0x12cc6d>
    337f:	00 00                	add    BYTE PTR [eax],al
    3381:	02 01                	add    al,BYTE PTR [ecx]
    3383:	06                   	push   es
    3384:	8c 00                	mov    WORD PTR [eax],es
    3386:	00 00                	add    BYTE PTR [eax],al
    3388:	02 01                	add    al,BYTE PTR [ecx]
    338a:	06                   	push   es
    338b:	85 00                	test   DWORD PTR [eax],eax
    338d:	00 00                	add    BYTE PTR [eax],al
    338f:	02 02                	add    al,BYTE PTR [edx]
    3391:	05 72 01 00 00       	add    eax,0x172
    3396:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    339d:	02 08                	add    cl,BYTE PTR [eax]
    339f:	05 00 00 00 00       	add    eax,0x0
    33a4:	02 01                	add    al,BYTE PTR [ecx]
    33a6:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    33ac:	02 07                	add    al,BYTE PTR [edi]
    33ae:	19 01                	sbb    DWORD PTR [ecx],eax
    33b0:	00 00                	add    BYTE PTR [eax],al
    33b2:	04 0e                	add    al,0xe
    33b4:	00 00                	add    BYTE PTR [eax],al
    33b6:	00 02                	add    BYTE PTR [edx],al
    33b8:	34 61                	xor    al,0x61
    33ba:	00 00                	add    BYTE PTR [eax],al
    33bc:	00 02                	add    BYTE PTR [edx],al
    33be:	04 07                	add    al,0x7
    33c0:	61                   	popa   
    33c1:	00 00                	add    BYTE PTR [eax],al
    33c3:	00 02                	add    BYTE PTR [edx],al
    33c5:	08 07                	or     BYTE PTR [edi],al
    33c7:	57                   	push   edi
    33c8:	00 00                	add    BYTE PTR [eax],al
    33ca:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    33d1:	56                   	push   esi
    33d2:	61                   	popa   
    33d3:	00 00                	add    BYTE PTR [eax],al
    33d5:	00 02                	add    BYTE PTR [edx],al
    33d7:	04 05                	add    al,0x5
    33d9:	05 00 00 00 02       	add    eax,0x2000000
    33de:	0c 04                	or     al,0x4
    33e0:	66 01 00             	add    WORD PTR [eax],ax
    33e3:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    33e9:	00 06                	add    BYTE PTR [esi],al
    33eb:	25 00 00 00 02       	and    eax,0x2000000
    33f0:	01 02                	add    DWORD PTR [edx],eax
    33f2:	13 01                	adc    eax,DWORD PTR [ecx]
    33f4:	00 00                	add    BYTE PTR [eax],al
    33f6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    33f9:	83 01 00             	add    DWORD PTR [ecx],0x0
    33fc:	00 02                	add    BYTE PTR [edx],al
    33fe:	04 07                	add    al,0x7
    3400:	5c                   	pop    esp
    3401:	00 00                	add    BYTE PTR [eax],al
    3403:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3409:	00 07                	add    BYTE PTR [edi],al
    340b:	ff 09                	dec    DWORD PTR [ecx]
    340d:	00 00                	add    BYTE PTR [eax],al
    340f:	01 04 a8             	add    DWORD PTR [eax+ebp*4],eax
    3412:	00 00                	add    BYTE PTR [eax],al
    3414:	00 d4                	add    ah,dl
    3416:	27                   	daa    
    3417:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    341d:	01 9c ee 00 00 00 08 	add    DWORD PTR [esi+ebp*8+0x8000000],ebx
    3424:	73 31                	jae    3457 <sysEnter_Vector-0x12cba9>
    3426:	00 01                	add    BYTE PTR [ecx],al
    3428:	04 a8                	add    al,0xa8
    342a:	00 00                	add    BYTE PTR [eax],al
    342c:	00 02                	add    BYTE PTR [edx],al
    342e:	91                   	xchg   ecx,eax
    342f:	00 08                	add    BYTE PTR [eax],cl
    3431:	73 32                	jae    3465 <sysEnter_Vector-0x12cb9b>
    3433:	00 01                	add    BYTE PTR [ecx],al
    3435:	04 88                	add    al,0x88
    3437:	00 00                	add    BYTE PTR [eax],al
    3439:	00 02                	add    BYTE PTR [edx],al
    343b:	91                   	xchg   ecx,eax
    343c:	04 09                	add    al,0x9
    343e:	73 00                	jae    3440 <sysEnter_Vector-0x12cbc0>
    3440:	01 06                	add    DWORD PTR [esi],eax
    3442:	a8 00                	test   al,0x0
    3444:	00 00                	add    BYTE PTR [eax],al
    3446:	02 91 74 00 07 1b    	add    dl,BYTE PTR [ecx+0x1b070074]
    344c:	0a 00                	or     al,BYTE PTR [eax]
    344e:	00 01                	add    BYTE PTR [ecx],al
    3450:	0e                   	push   cs
    3451:	a8 00                	test   al,0x0
    3453:	00 00                	add    BYTE PTR [eax],al
    3455:	14 28                	adc    al,0x28
    3457:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    345d:	01 9c 2e 01 00 00 08 	add    DWORD PTR [esi+ebp*1+0x8000001],ebx
    3464:	73 31                	jae    3497 <sysEnter_Vector-0x12cb69>
    3466:	00 01                	add    BYTE PTR [ecx],al
    3468:	0e                   	push   cs
    3469:	a8 00                	test   al,0x0
    346b:	00 00                	add    BYTE PTR [eax],al
    346d:	02 91 00 08 73 32    	add    dl,BYTE PTR [ecx+0x32730800]
    3473:	00 01                	add    BYTE PTR [ecx],al
    3475:	0e                   	push   cs
    3476:	88 00                	mov    BYTE PTR [eax],al
    3478:	00 00                	add    BYTE PTR [eax],al
    347a:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    3480:	01 10                	add    DWORD PTR [eax],edx
    3482:	a8 00                	test   al,0x0
    3484:	00 00                	add    BYTE PTR [eax],al
    3486:	02 91 74 00 07 f7    	add    dl,BYTE PTR [ecx-0x8f8ff8c]
    348c:	09 00                	or     DWORD PTR [eax],eax
    348e:	00 01                	add    BYTE PTR [ecx],al
    3490:	18 a8 00 00 00 54    	sbb    BYTE PTR [eax+0x54000000],ch
    3496:	28 00                	sub    BYTE PTR [eax],al
    3498:	9f                   	lahf   
    3499:	47                   	inc    edi
    349a:	00 00                	add    BYTE PTR [eax],al
    349c:	00 01                	add    BYTE PTR [ecx],al
    349e:	9c                   	pushf  
    349f:	7c 01                	jl     34a2 <sysEnter_Vector-0x12cb5e>
    34a1:	00 00                	add    BYTE PTR [eax],al
    34a3:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    34a6:	00 01                	add    BYTE PTR [ecx],al
    34a8:	18 a8 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],ch
    34ae:	91                   	xchg   ecx,eax
    34af:	00 08                	add    BYTE PTR [eax],cl
    34b1:	73 32                	jae    34e5 <sysEnter_Vector-0x12cb1b>
    34b3:	00 01                	add    BYTE PTR [ecx],al
    34b5:	18 88 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],cl
    34bb:	91                   	xchg   ecx,eax
    34bc:	04 0a                	add    al,0xa
    34be:	f1                   	icebp  
    34bf:	09 00                	or     DWORD PTR [eax],eax
    34c1:	00 01                	add    BYTE PTR [ecx],al
    34c3:	18 61 00             	sbb    BYTE PTR [ecx+0x0],ah
    34c6:	00 00                	add    BYTE PTR [eax],al
    34c8:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    34ce:	01 1a                	add    DWORD PTR [edx],ebx
    34d0:	a8 00                	test   al,0x0
    34d2:	00 00                	add    BYTE PTR [eax],al
    34d4:	02 91 74 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4ff8c]
    34da:	00 00                	add    BYTE PTR [eax],al
    34dc:	00 03                	add    BYTE PTR [ebx],al
    34de:	34 56                	xor    al,0x56
    34e0:	00 00                	add    BYTE PTR [eax],al
    34e2:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    34e8:	9f                   	lahf   
    34e9:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    34ec:	00 00                	add    BYTE PTR [eax],al
    34ee:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    34f4:	05 03 f0 61 00       	add    eax,0x61f003
    34f9:	9f                   	lahf   
    34fa:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    34fd:	00 00                	add    BYTE PTR [eax],al
    34ff:	03 36                	add    esi,DWORD PTR [esi]
    3501:	56                   	push   esi
    3502:	00 00                	add    BYTE PTR [eax],al
    3504:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    350a:	9f                   	lahf   
    350b:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    350f:	00 03                	add    BYTE PTR [ebx],al
    3511:	37                   	aaa    
    3512:	7a 00                	jp     3514 <sysEnter_Vector-0x12caec>
    3514:	00 00                	add    BYTE PTR [eax],al
    3516:	05 03 f8 61 00       	add    eax,0x61f803
    351b:	9f                   	lahf   
    351c:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    351f:	00 00                	add    BYTE PTR [eax],al
    3521:	04 2f                	add    al,0x2f
    3523:	d1 01                	rol    DWORD PTR [ecx],1
    3525:	00 00                	add    BYTE PTR [eax],al
    3527:	05 03 e4 61 00       	add    eax,0x61e403
    352c:	9f                   	lahf   
    352d:	05 04 6f 00 00       	add    eax,0x6f04
    3532:	00 0b                	add    BYTE PTR [ebx],cl
    3534:	91                   	xchg   ecx,eax
    3535:	00 00                	add    BYTE PTR [eax],al
    3537:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    353a:	3a 00                	cmp    al,BYTE PTR [eax]
    353c:	00 00                	add    BYTE PTR [eax],al
    353e:	05 03 e0 61 00       	add    eax,0x61e003
    3543:	9f                   	lahf   
    3544:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3547:	00 00                	add    BYTE PTR [eax],al
    3549:	05 53 f9 01 00       	add    eax,0x1f953
    354e:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    3554:	9f                   	lahf   
    3555:	05 04 a8 00 00       	add    eax,0xa804
    355a:	00 00                	add    BYTE PTR [eax],al
    355c:	7f 01                	jg     355f <sysEnter_Vector-0x12caa1>
    355e:	00 00                	add    BYTE PTR [eax],al
    3560:	04 00                	add    al,0x0
    3562:	4f                   	dec    edi
    3563:	10 00                	adc    BYTE PTR [eax],al
    3565:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3568:	ac                   	lods   al,BYTE PTR ds:[esi]
    3569:	00 00                	add    BYTE PTR [eax],al
    356b:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
    356e:	0a 00                	or     al,BYTE PTR [eax]
    3570:	00 1e                	add    BYTE PTR [esi],bl
    3572:	00 00                	add    BYTE PTR [eax],al
    3574:	00 9c 28 00 9f 89 00 	add    BYTE PTR [eax+ebp*1+0x899f00],bl
    357b:	00 00                	add    BYTE PTR [eax],al
    357d:	66 15 00 00          	adc    ax,0x0
    3581:	02 01                	add    al,BYTE PTR [ecx]
    3583:	06                   	push   es
    3584:	8c 00                	mov    WORD PTR [eax],es
    3586:	00 00                	add    BYTE PTR [eax],al
    3588:	02 01                	add    al,BYTE PTR [ecx]
    358a:	06                   	push   es
    358b:	85 00                	test   DWORD PTR [eax],eax
    358d:	00 00                	add    BYTE PTR [eax],al
    358f:	02 02                	add    al,BYTE PTR [edx]
    3591:	05 72 01 00 00       	add    eax,0x172
    3596:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    359d:	02 08                	add    cl,BYTE PTR [eax]
    359f:	05 00 00 00 00       	add    eax,0x0
    35a4:	02 01                	add    al,BYTE PTR [ecx]
    35a6:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    35ac:	02 07                	add    al,BYTE PTR [edi]
    35ae:	19 01                	sbb    DWORD PTR [ecx],eax
    35b0:	00 00                	add    BYTE PTR [eax],al
    35b2:	04 0e                	add    al,0xe
    35b4:	00 00                	add    BYTE PTR [eax],al
    35b6:	00 02                	add    BYTE PTR [edx],al
    35b8:	34 61                	xor    al,0x61
    35ba:	00 00                	add    BYTE PTR [eax],al
    35bc:	00 02                	add    BYTE PTR [edx],al
    35be:	04 07                	add    al,0x7
    35c0:	61                   	popa   
    35c1:	00 00                	add    BYTE PTR [eax],al
    35c3:	00 02                	add    BYTE PTR [edx],al
    35c5:	08 07                	or     BYTE PTR [edi],al
    35c7:	57                   	push   edi
    35c8:	00 00                	add    BYTE PTR [eax],al
    35ca:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    35d1:	56                   	push   esi
    35d2:	61                   	popa   
    35d3:	00 00                	add    BYTE PTR [eax],al
    35d5:	00 02                	add    BYTE PTR [edx],al
    35d7:	04 05                	add    al,0x5
    35d9:	05 00 00 00 02       	add    eax,0x2000000
    35de:	0c 04                	or     al,0x4
    35e0:	66 01 00             	add    WORD PTR [eax],ax
    35e3:	00 02                	add    BYTE PTR [edx],al
    35e5:	01 02                	add    DWORD PTR [edx],eax
    35e7:	13 01                	adc    eax,DWORD PTR [ecx]
    35e9:	00 00                	add    BYTE PTR [eax],al
    35eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    35ee:	83 01 00             	add    DWORD PTR [ecx],0x0
    35f1:	00 02                	add    BYTE PTR [edx],al
    35f3:	04 07                	add    al,0x7
    35f5:	5c                   	pop    esp
    35f6:	00 00                	add    BYTE PTR [eax],al
    35f8:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    35fe:	00 06                	add    BYTE PTR [esi],al
    3600:	43                   	inc    ebx
    3601:	0a 00                	or     al,BYTE PTR [eax]
    3603:	00 01                	add    BYTE PTR [ecx],al
    3605:	09 88 00 00 00 9c    	or     DWORD PTR [eax-0x64000000],ecx
    360b:	28 00                	sub    BYTE PTR [eax],al
    360d:	9f                   	lahf   
    360e:	30 00                	xor    BYTE PTR [eax],al
    3610:	00 00                	add    BYTE PTR [eax],al
    3612:	01 9c c9 00 00 00 07 	add    DWORD PTR [ecx+ecx*8+0x7000000],ebx
    3619:	63 00                	arpl   WORD PTR [eax],ax
    361b:	01 09                	add    DWORD PTR [ecx],ecx
    361d:	25 00 00 00 02       	and    eax,0x2000000
    3622:	91                   	xchg   ecx,eax
    3623:	74 00                	je     3625 <sysEnter_Vector-0x12c9db>
    3625:	08 23                	or     BYTE PTR [ebx],ah
    3627:	0a 00                	or     al,BYTE PTR [eax]
    3629:	00 01                	add    BYTE PTR [ecx],al
    362b:	0e                   	push   cs
    362c:	88 00                	mov    BYTE PTR [eax],al
    362e:	00 00                	add    BYTE PTR [eax],al
    3630:	cc                   	int3   
    3631:	28 00                	sub    BYTE PTR [eax],al
    3633:	9f                   	lahf   
    3634:	59                   	pop    ecx
    3635:	00 00                	add    BYTE PTR [eax],al
    3637:	00 01                	add    BYTE PTR [ecx],al
    3639:	9c                   	pushf  
    363a:	ff 00                	inc    DWORD PTR [eax]
    363c:	00 00                	add    BYTE PTR [eax],al
    363e:	07                   	pop    es
    363f:	73 74                	jae    36b5 <sysEnter_Vector-0x12c94b>
    3641:	72 00                	jb     3643 <sysEnter_Vector-0x12c9bd>
    3643:	01 0e                	add    DWORD PTR [esi],ecx
    3645:	9d                   	popf   
    3646:	00 00                	add    BYTE PTR [eax],al
    3648:	00 02                	add    BYTE PTR [edx],al
    364a:	91                   	xchg   ecx,eax
    364b:	00 09                	add    BYTE PTR [ecx],cl
    364d:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    3650:	00 01                	add    BYTE PTR [ecx],al
    3652:	10 3a                	adc    BYTE PTR [edx],bh
    3654:	00 00                	add    BYTE PTR [eax],al
    3656:	00 02                	add    BYTE PTR [edx],al
    3658:	91                   	xchg   ecx,eax
    3659:	74 00                	je     365b <sysEnter_Vector-0x12c9a5>
    365b:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    3661:	34 56                	xor    al,0x56
    3663:	00 00                	add    BYTE PTR [eax],al
    3665:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    366b:	9f                   	lahf   
    366c:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    366f:	00 00                	add    BYTE PTR [eax],al
    3671:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    3677:	05 03 f0 61 00       	add    eax,0x61f003
    367c:	9f                   	lahf   
    367d:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    3680:	00 00                	add    BYTE PTR [eax],al
    3682:	03 36                	add    esi,DWORD PTR [esi]
    3684:	56                   	push   esi
    3685:	00 00                	add    BYTE PTR [eax],al
    3687:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    368d:	9f                   	lahf   
    368e:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    3692:	00 03                	add    BYTE PTR [ebx],al
    3694:	37                   	aaa    
    3695:	7a 00                	jp     3697 <sysEnter_Vector-0x12c969>
    3697:	00 00                	add    BYTE PTR [eax],al
    3699:	05 03 f8 61 00       	add    eax,0x61f803
    369e:	9f                   	lahf   
    369f:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    36a2:	00 00                	add    BYTE PTR [eax],al
    36a4:	04 2f                	add    al,0x2f
    36a6:	54                   	push   esp
    36a7:	01 00                	add    DWORD PTR [eax],eax
    36a9:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    36af:	9f                   	lahf   
    36b0:	05 04 6f 00 00       	add    eax,0x6f04
    36b5:	00 0a                	add    BYTE PTR [edx],cl
    36b7:	91                   	xchg   ecx,eax
    36b8:	00 00                	add    BYTE PTR [eax],al
    36ba:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    36bd:	3a 00                	cmp    al,BYTE PTR [eax]
    36bf:	00 00                	add    BYTE PTR [eax],al
    36c1:	05 03 e0 61 00       	add    eax,0x61e003
    36c6:	9f                   	lahf   
    36c7:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    36ca:	00 00                	add    BYTE PTR [eax],al
    36cc:	05 53 7c 01 00       	add    eax,0x17c53
    36d1:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    36d7:	9f                   	lahf   
    36d8:	05 04 9d 00 00       	add    eax,0x9d04
    36dd:	00 00                	add    BYTE PTR [eax],al
    36df:	11 02                	adc    DWORD PTR [edx],eax
    36e1:	00 00                	add    BYTE PTR [eax],al
    36e3:	04 00                	add    al,0x0
    36e5:	f6 10                	not    BYTE PTR [eax]
    36e7:	00 00                	add    BYTE PTR [eax],al
    36e9:	04 01                	add    al,0x1
    36eb:	ac                   	lods   al,BYTE PTR ds:[esi]
    36ec:	00 00                	add    BYTE PTR [eax],al
    36ee:	00 0c 6f             	add    BYTE PTR [edi+ebp*2],cl
    36f1:	0a 00                	or     al,BYTE PTR [eax]
    36f3:	00 1e                	add    BYTE PTR [esi],bl
    36f5:	00 00                	add    BYTE PTR [eax],al
    36f7:	00 28                	add    BYTE PTR [eax],ch
    36f9:	29 00                	sub    DWORD PTR [eax],eax
    36fb:	9f                   	lahf   
    36fc:	a2 00 00 00 3f       	mov    ds:0x3f000000,al
    3701:	16                   	push   ss
    3702:	00 00                	add    BYTE PTR [eax],al
    3704:	02 01                	add    al,BYTE PTR [ecx]
    3706:	06                   	push   es
    3707:	8c 00                	mov    WORD PTR [eax],es
    3709:	00 00                	add    BYTE PTR [eax],al
    370b:	02 01                	add    al,BYTE PTR [ecx]
    370d:	06                   	push   es
    370e:	85 00                	test   DWORD PTR [eax],eax
    3710:	00 00                	add    BYTE PTR [eax],al
    3712:	02 02                	add    al,BYTE PTR [edx]
    3714:	05 72 01 00 00       	add    eax,0x172
    3719:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3720:	02 08                	add    cl,BYTE PTR [eax]
    3722:	05 00 00 00 00       	add    eax,0x0
    3727:	02 01                	add    al,BYTE PTR [ecx]
    3729:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    372f:	02 07                	add    al,BYTE PTR [edi]
    3731:	19 01                	sbb    DWORD PTR [ecx],eax
    3733:	00 00                	add    BYTE PTR [eax],al
    3735:	04 0e                	add    al,0xe
    3737:	00 00                	add    BYTE PTR [eax],al
    3739:	00 02                	add    BYTE PTR [edx],al
    373b:	34 61                	xor    al,0x61
    373d:	00 00                	add    BYTE PTR [eax],al
    373f:	00 02                	add    BYTE PTR [edx],al
    3741:	04 07                	add    al,0x7
    3743:	61                   	popa   
    3744:	00 00                	add    BYTE PTR [eax],al
    3746:	00 02                	add    BYTE PTR [edx],al
    3748:	08 07                	or     BYTE PTR [edi],al
    374a:	57                   	push   edi
    374b:	00 00                	add    BYTE PTR [eax],al
    374d:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3754:	56                   	push   esi
    3755:	61                   	popa   
    3756:	00 00                	add    BYTE PTR [eax],al
    3758:	00 04 66             	add    BYTE PTR [esi+eiz*2],al
    375b:	05 00 00 03 d8       	add    eax,0xd8030000
    3760:	61                   	popa   
    3761:	00 00                	add    BYTE PTR [eax],al
    3763:	00 02                	add    BYTE PTR [edx],al
    3765:	04 05                	add    al,0x5
    3767:	05 00 00 00 02       	add    eax,0x2000000
    376c:	0c 04                	or     al,0x4
    376e:	66 01 00             	add    WORD PTR [eax],ax
    3771:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    3777:	00 06                	add    BYTE PTR [esi],al
    3779:	25 00 00 00 02       	and    eax,0x2000000
    377e:	01 02                	add    DWORD PTR [edx],eax
    3780:	13 01                	adc    eax,DWORD PTR [ecx]
    3782:	00 00                	add    BYTE PTR [eax],al
    3784:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3787:	83 01 00             	add    DWORD PTR [ecx],0x0
    378a:	00 02                	add    BYTE PTR [edx],al
    378c:	04 07                	add    al,0x7
    378e:	5c                   	pop    esp
    378f:	00 00                	add    BYTE PTR [eax],al
    3791:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3797:	00 07                	add    BYTE PTR [edi],al
    3799:	4f                   	dec    edi
    379a:	0a 00                	or     al,BYTE PTR [eax]
    379c:	00 01                	add    BYTE PTR [ecx],al
    379e:	04 7a                	add    al,0x7a
    37a0:	00 00                	add    BYTE PTR [eax],al
    37a2:	00 28                	add    BYTE PTR [eax],ch
    37a4:	29 00                	sub    DWORD PTR [eax],eax
    37a6:	9f                   	lahf   
    37a7:	31 00                	xor    DWORD PTR [eax],eax
    37a9:	00 00                	add    BYTE PTR [eax],al
    37ab:	01 9c ef 00 00 00 08 	add    DWORD PTR [edi+ebp*8+0x8000000],ebx
    37b2:	73 74                	jae    3828 <sysEnter_Vector-0x12c7d8>
    37b4:	72 00                	jb     37b6 <sysEnter_Vector-0x12c84a>
    37b6:	01 04 93             	add    DWORD PTR [ebx+edx*4],eax
    37b9:	00 00                	add    BYTE PTR [eax],al
    37bb:	00 02                	add    BYTE PTR [edx],al
    37bd:	91                   	xchg   ecx,eax
    37be:	00 09                	add    BYTE PTR [ecx],cl
    37c0:	72 65                	jb     3827 <sysEnter_Vector-0x12c7d9>
    37c2:	74 00                	je     37c4 <sysEnter_Vector-0x12c83c>
    37c4:	01 05 7a 00 00 00    	add    DWORD PTR ds:0x7a,eax
    37ca:	02 91 74 00 0a 57    	add    dl,BYTE PTR [ecx+0x570a0074]
    37d0:	0a 00                	or     al,BYTE PTR [eax]
    37d2:	00 01                	add    BYTE PTR [ecx],al
    37d4:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    37d7:	00 00                	add    BYTE PTR [eax],al
    37d9:	59                   	pop    ecx
    37da:	29 00                	sub    DWORD PTR [eax],eax
    37dc:	9f                   	lahf   
    37dd:	1a 00                	sbb    al,BYTE PTR [eax]
    37df:	00 00                	add    BYTE PTR [eax],al
    37e1:	01 9c 17 01 00 00 08 	add    DWORD PTR [edi+edx*1+0x8000001],ebx
    37e8:	73 74                	jae    385e <sysEnter_Vector-0x12c7a2>
    37ea:	72 00                	jb     37ec <sysEnter_Vector-0x12c814>
    37ec:	01 0b                	add    DWORD PTR [ebx],ecx
    37ee:	93                   	xchg   ebx,eax
    37ef:	00 00                	add    BYTE PTR [eax],al
    37f1:	00 02                	add    BYTE PTR [edx],al
    37f3:	91                   	xchg   ecx,eax
    37f4:	00 00                	add    BYTE PTR [eax],al
    37f6:	07                   	pop    es
    37f7:	5e                   	pop    esi
    37f8:	0a 00                	or     al,BYTE PTR [eax]
    37fa:	00 01                	add    BYTE PTR [ecx],al
    37fc:	10 7a 00             	adc    BYTE PTR [edx+0x0],bh
    37ff:	00 00                	add    BYTE PTR [eax],al
    3801:	73 29                	jae    382c <sysEnter_Vector-0x12c7d4>
    3803:	00 9f 39 00 00 00    	add    BYTE PTR [edi+0x39],bl
    3809:	01 9c 5b 01 00 00 08 	add    DWORD PTR [ebx+ebx*2+0x8000001],ebx
    3810:	73 74                	jae    3886 <sysEnter_Vector-0x12c77a>
    3812:	72 00                	jb     3814 <sysEnter_Vector-0x12c7ec>
    3814:	01 10                	add    DWORD PTR [eax],edx
    3816:	93                   	xchg   ebx,eax
    3817:	00 00                	add    BYTE PTR [eax],al
    3819:	00 02                	add    BYTE PTR [edx],al
    381b:	91                   	xchg   ecx,eax
    381c:	00 0b                	add    BYTE PTR [ebx],cl
    381e:	2b 05 00 00 01 10    	sub    eax,DWORD PTR ds:0x10010000
    3824:	7a 00                	jp     3826 <sysEnter_Vector-0x12c7da>
    3826:	00 00                	add    BYTE PTR [eax],al
    3828:	02 91 04 09 72 65    	add    dl,BYTE PTR [ecx+0x65720904]
    382e:	74 00                	je     3830 <sysEnter_Vector-0x12c7d0>
    3830:	01 12                	add    DWORD PTR [edx],edx
    3832:	7a 00                	jp     3834 <sysEnter_Vector-0x12c7cc>
    3834:	00 00                	add    BYTE PTR [eax],al
    3836:	02 91 74 00 0a 67    	add    dl,BYTE PTR [ecx+0x670a0074]
    383c:	0a 00                	or     al,BYTE PTR [eax]
    383e:	00 01                	add    BYTE PTR [ecx],al
    3840:	18 7a 00             	sbb    BYTE PTR [edx+0x0],bh
    3843:	00 00                	add    BYTE PTR [eax],al
    3845:	ac                   	lods   al,BYTE PTR ds:[esi]
    3846:	29 00                	sub    DWORD PTR [eax],eax
    3848:	9f                   	lahf   
    3849:	1e                   	push   ds
    384a:	00 00                	add    BYTE PTR [eax],al
    384c:	00 01                	add    BYTE PTR [ecx],al
    384e:	9c                   	pushf  
    384f:	91                   	xchg   ecx,eax
    3850:	01 00                	add    DWORD PTR [eax],eax
    3852:	00 08                	add    BYTE PTR [eax],cl
    3854:	73 74                	jae    38ca <sysEnter_Vector-0x12c736>
    3856:	72 00                	jb     3858 <sysEnter_Vector-0x12c7a8>
    3858:	01 18                	add    DWORD PTR [eax],ebx
    385a:	93                   	xchg   ebx,eax
    385b:	00 00                	add    BYTE PTR [eax],al
    385d:	00 02                	add    BYTE PTR [edx],al
    385f:	91                   	xchg   ecx,eax
    3860:	00 0b                	add    BYTE PTR [ebx],cl
    3862:	2b 05 00 00 01 18    	sub    eax,DWORD PTR ds:0x18010000
    3868:	3a 00                	cmp    al,BYTE PTR [eax]
    386a:	00 00                	add    BYTE PTR [eax],al
    386c:	02 91 04 00 0c a3    	add    dl,BYTE PTR [ecx-0x5cf3fffc]
    3872:	00 00                	add    BYTE PTR [eax],al
    3874:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3877:	56                   	push   esi
    3878:	00 00                	add    BYTE PTR [eax],al
    387a:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    3880:	9f                   	lahf   
    3881:	0c 34                	or     al,0x34
    3883:	01 00                	add    DWORD PTR [eax],eax
    3885:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    388c:	05 03 f0 61 00       	add    eax,0x61f003
    3891:	9f                   	lahf   
    3892:	0c 7b                	or     al,0x7b
    3894:	00 00                	add    BYTE PTR [eax],al
    3896:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3899:	56                   	push   esi
    389a:	00 00                	add    BYTE PTR [eax],al
    389c:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    38a2:	9f                   	lahf   
    38a3:	0c 7c                	or     al,0x7c
    38a5:	01 00                	add    DWORD PTR [eax],eax
    38a7:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    38aa:	85 00                	test   DWORD PTR [eax],eax
    38ac:	00 00                	add    BYTE PTR [eax],al
    38ae:	05 03 f8 61 00       	add    eax,0x61f803
    38b3:	9f                   	lahf   
    38b4:	0c 6e                	or     al,0x6e
    38b6:	00 00                	add    BYTE PTR [eax],al
    38b8:	00 05 2f e6 01 00    	add    BYTE PTR ds:0x1e62f,al
    38be:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    38c4:	9f                   	lahf   
    38c5:	05 04 6f 00 00       	add    eax,0x6f04
    38ca:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    38cd:	00 00                	add    BYTE PTR [eax],al
    38cf:	00 05 30 3a 00 00    	add    BYTE PTR ds:0x3a30,al
    38d5:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    38db:	9f                   	lahf   
    38dc:	0c 41                	or     al,0x41
    38de:	00 00                	add    BYTE PTR [eax],al
    38e0:	00 06                	add    BYTE PTR [esi],al
    38e2:	53                   	push   ebx
    38e3:	0e                   	push   cs
    38e4:	02 00                	add    al,BYTE PTR [eax]
    38e6:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    38ec:	9f                   	lahf   
    38ed:	05 04 b3 00 00       	add    eax,0xb304
    38f2:	00 00                	add    BYTE PTR [eax],al
    38f4:	de 00                	fiadd  WORD PTR [eax]
    38f6:	00 00                	add    BYTE PTR [eax],al
    38f8:	04 00                	add    al,0x0
    38fa:	b3 11                	mov    bl,0x11
    38fc:	00 00                	add    BYTE PTR [eax],al
    38fe:	04 01                	add    al,0x1
    3900:	ac                   	lods   al,BYTE PTR ds:[esi]
    3901:	00 00                	add    BYTE PTR [eax],al
    3903:	00 0c 95 0a 00 00 1e 	add    BYTE PTR [edx*4+0x1e00000a],cl
    390a:	00 00                	add    BYTE PTR [eax],al
    390c:	00 cc                	add    ah,cl
    390e:	29 00                	sub    DWORD PTR [eax],eax
    3910:	9f                   	lahf   
    3911:	ce                   	into   
    3912:	00 00                	add    BYTE PTR [eax],al
    3914:	00 22                	add    BYTE PTR [edx],ah
    3916:	17                   	pop    ss
    3917:	00 00                	add    BYTE PTR [eax],al
    3919:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    3920:	03 66 05             	add    esp,DWORD PTR [esi+0x5]
    3923:	00 00                	add    BYTE PTR [eax],al
    3925:	02 d8                	add    bl,al
    3927:	37                   	aaa    
    3928:	00 00                	add    BYTE PTR [eax],al
    392a:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    392d:	07                   	pop    es
    392e:	61                   	popa   
    392f:	00 00                	add    BYTE PTR [eax],al
    3931:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3934:	05 05 00 00 00       	add    eax,0x5
    3939:	04 08                	add    al,0x8
    393b:	05 00 00 00 00       	add    eax,0x0
    3940:	04 0c                	add    al,0xc
    3942:	04 66                	add    al,0x66
    3944:	01 00                	add    DWORD PTR [eax],eax
    3946:	00 05 8d 0a 00 00    	add    BYTE PTR ds:0xa8d,al
    394c:	01 0c 25 00 00 00 cc 	add    DWORD PTR [eiz*1-0x34000000],ecx
    3953:	29 00                	sub    DWORD PTR [eax],eax
    3955:	9f                   	lahf   
    3956:	67 00 00             	add    BYTE PTR [bx+si],al
    3959:	00 01                	add    BYTE PTR [ecx],al
    395b:	9c                   	pushf  
    395c:	93                   	xchg   ebx,eax
    395d:	00 00                	add    BYTE PTR [eax],al
    395f:	00 06                	add    BYTE PTR [esi],al
    3961:	73 31                	jae    3994 <sysEnter_Vector-0x12c66c>
    3963:	00 01                	add    BYTE PTR [ecx],al
    3965:	0c 93                	or     al,0x93
    3967:	00 00                	add    BYTE PTR [eax],al
    3969:	00 02                	add    BYTE PTR [edx],al
    396b:	91                   	xchg   ecx,eax
    396c:	00 06                	add    BYTE PTR [esi],al
    396e:	73 32                	jae    39a2 <sysEnter_Vector-0x12c65e>
    3970:	00 01                	add    BYTE PTR [ecx],al
    3972:	0c 93                	or     al,0x93
    3974:	00 00                	add    BYTE PTR [eax],al
    3976:	00 02                	add    BYTE PTR [edx],al
    3978:	91                   	xchg   ecx,eax
    3979:	04 06                	add    al,0x6
    397b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    397c:	00 01                	add    BYTE PTR [ecx],al
    397e:	0c 2c                	or     al,0x2c
    3980:	00 00                	add    BYTE PTR [eax],al
    3982:	00 02                	add    BYTE PTR [edx],al
    3984:	91                   	xchg   ecx,eax
    3985:	08 00                	or     BYTE PTR [eax],al
    3987:	07                   	pop    es
    3988:	04 a0                	add    al,0xa0
    398a:	00 00                	add    BYTE PTR [eax],al
    398c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    398f:	06                   	push   es
    3990:	8c 00                	mov    WORD PTR [eax],es
    3992:	00 00                	add    BYTE PTR [eax],al
    3994:	08 99 00 00 00 09    	or     BYTE PTR [ecx+0x9000000],bl
    399a:	84 0a                	test   BYTE PTR [edx],cl
    399c:	00 00                	add    BYTE PTR [eax],al
    399e:	01 16                	add    DWORD PTR [esi],edx
    39a0:	25 00 00 00 33       	and    eax,0x33000000
    39a5:	2a 00                	sub    al,BYTE PTR [eax]
    39a7:	9f                   	lahf   
    39a8:	67 00 00             	add    BYTE PTR [bx+si],al
    39ab:	00 01                	add    BYTE PTR [ecx],al
    39ad:	9c                   	pushf  
    39ae:	06                   	push   es
    39af:	73 31                	jae    39e2 <sysEnter_Vector-0x12c61e>
    39b1:	00 01                	add    BYTE PTR [ecx],al
    39b3:	16                   	push   ss
    39b4:	93                   	xchg   ebx,eax
    39b5:	00 00                	add    BYTE PTR [eax],al
    39b7:	00 02                	add    BYTE PTR [edx],al
    39b9:	91                   	xchg   ecx,eax
    39ba:	00 06                	add    BYTE PTR [esi],al
    39bc:	73 32                	jae    39f0 <sysEnter_Vector-0x12c610>
    39be:	00 01                	add    BYTE PTR [ecx],al
    39c0:	16                   	push   ss
    39c1:	93                   	xchg   ebx,eax
    39c2:	00 00                	add    BYTE PTR [eax],al
    39c4:	00 02                	add    BYTE PTR [edx],al
    39c6:	91                   	xchg   ecx,eax
    39c7:	04 06                	add    al,0x6
    39c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    39ca:	00 01                	add    BYTE PTR [ecx],al
    39cc:	16                   	push   ss
    39cd:	2c 00                	sub    al,0x0
    39cf:	00 00                	add    BYTE PTR [eax],al
    39d1:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    39d7:	00 00                	add    BYTE PTR [eax],al
    39d9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    39dc:	3f                   	aas    
    39dd:	12 00                	adc    al,BYTE PTR [eax]
    39df:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    39e2:	ac                   	lods   al,BYTE PTR ds:[esi]
    39e3:	00 00                	add    BYTE PTR [eax],al
    39e5:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
    39e8:	0a 00                	or     al,BYTE PTR [eax]
    39ea:	00 1e                	add    BYTE PTR [esi],bl
    39ec:	00 00                	add    BYTE PTR [eax],al
    39ee:	00 9c 2a 00 9f 80 00 	add    BYTE PTR [edx+ebp*1+0x809f00],bl
    39f5:	00 00                	add    BYTE PTR [eax],al
    39f7:	e7 17                	out    0x17,eax
    39f9:	00 00                	add    BYTE PTR [eax],al
    39fb:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    3a02:	03 66 05             	add    esp,DWORD PTR [esi+0x5]
    3a05:	00 00                	add    BYTE PTR [eax],al
    3a07:	02 d8                	add    bl,al
    3a09:	37                   	aaa    
    3a0a:	00 00                	add    BYTE PTR [eax],al
    3a0c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3a0f:	07                   	pop    es
    3a10:	61                   	popa   
    3a11:	00 00                	add    BYTE PTR [eax],al
    3a13:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3a16:	05 05 00 00 00       	add    eax,0x5
    3a1b:	04 08                	add    al,0x8
    3a1d:	05 00 00 00 00       	add    eax,0x0
    3a22:	04 0c                	add    al,0xc
    3a24:	04 66                	add    al,0x66
    3a26:	01 00                	add    DWORD PTR [eax],eax
    3a28:	00 05 c1 0a 00 00    	add    BYTE PTR ds:0xac1,al
    3a2e:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    3a34:	9c                   	pushf  
    3a35:	2a 00                	sub    al,BYTE PTR [eax]
    3a37:	9f                   	lahf   
    3a38:	60                   	pusha  
    3a39:	00 00                	add    BYTE PTR [eax],al
    3a3b:	00 01                	add    BYTE PTR [ecx],al
    3a3d:	9c                   	pushf  
    3a3e:	9f                   	lahf   
    3a3f:	00 00                	add    BYTE PTR [eax],al
    3a41:	00 06                	add    BYTE PTR [esi],al
    3a43:	73 31                	jae    3a76 <sysEnter_Vector-0x12c58a>
    3a45:	00 01                	add    BYTE PTR [ecx],al
    3a47:	0d 9f 00 00 00       	or     eax,0x9f
    3a4c:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    3a52:	00 01                	add    BYTE PTR [ecx],al
    3a54:	0d ac 00 00 00       	or     eax,0xac
    3a59:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    3a5f:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    3a65:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    3a6b:	01 0f                	add    DWORD PTR [edi],ecx
    3a6d:	9f                   	lahf   
    3a6e:	00 00                	add    BYTE PTR [eax],al
    3a70:	00 02                	add    BYTE PTR [edx],al
    3a72:	91                   	xchg   ecx,eax
    3a73:	74 00                	je     3a75 <sysEnter_Vector-0x12c58b>
    3a75:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    3a7c:	01 06                	add    DWORD PTR [esi],eax
    3a7e:	8c 00                	mov    WORD PTR [eax],es
    3a80:	00 00                	add    BYTE PTR [eax],al
    3a82:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    3a85:	00 00                	add    BYTE PTR [eax],al
    3a87:	00 09                	add    BYTE PTR [ecx],cl
    3a89:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3a8a:	00 00                	add    BYTE PTR [eax],al
    3a8c:	00 0a                	add    BYTE PTR [edx],cl
    3a8e:	ca 0a 00             	retf   0xa
    3a91:	00 01                	add    BYTE PTR [ecx],al
    3a93:	1b 9f 00 00 00 fc    	sbb    ebx,DWORD PTR [edi-0x4000000]
    3a99:	2a 00                	sub    al,BYTE PTR [eax]
    3a9b:	9f                   	lahf   
    3a9c:	20 00                	and    BYTE PTR [eax],al
    3a9e:	00 00                	add    BYTE PTR [eax],al
    3aa0:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    3aa7:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    3aad:	91                   	xchg   ecx,eax
    3aae:	00 06                	add    BYTE PTR [esi],al
    3ab0:	73 32                	jae    3ae4 <sysEnter_Vector-0x12c51c>
    3ab2:	00 01                	add    BYTE PTR [ecx],al
    3ab4:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    3abb:	04 06                	add    al,0x6
    3abd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3abe:	00 01                	add    BYTE PTR [ecx],al
    3ac0:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    3ac3:	00 00                	add    BYTE PTR [eax],al
    3ac5:	02 91 08 00 00 c5    	add    dl,BYTE PTR [ecx-0x3afffff8]
    3acb:	01 00                	add    DWORD PTR [eax],eax
    3acd:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3ad0:	da 12                	ficom  DWORD PTR [edx]
    3ad2:	00 00                	add    BYTE PTR [eax],al
    3ad4:	04 01                	add    al,0x1
    3ad6:	ac                   	lods   al,BYTE PTR ds:[esi]
    3ad7:	00 00                	add    BYTE PTR [eax],al
    3ad9:	00 0c e8             	add    BYTE PTR [eax+ebp*8],cl
    3adc:	0a 00                	or     al,BYTE PTR [eax]
    3ade:	00 1e                	add    BYTE PTR [esi],bl
    3ae0:	00 00                	add    BYTE PTR [eax],al
    3ae2:	00 1c 2b             	add    BYTE PTR [ebx+ebp*1],bl
    3ae5:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    3aeb:	8c 18                	mov    WORD PTR [eax],ds
    3aed:	00 00                	add    BYTE PTR [eax],al
    3aef:	02 01                	add    al,BYTE PTR [ecx]
    3af1:	06                   	push   es
    3af2:	8c 00                	mov    WORD PTR [eax],es
    3af4:	00 00                	add    BYTE PTR [eax],al
    3af6:	02 01                	add    al,BYTE PTR [ecx]
    3af8:	06                   	push   es
    3af9:	85 00                	test   DWORD PTR [eax],eax
    3afb:	00 00                	add    BYTE PTR [eax],al
    3afd:	02 02                	add    al,BYTE PTR [edx]
    3aff:	05 72 01 00 00       	add    eax,0x172
    3b04:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3b0b:	02 08                	add    cl,BYTE PTR [eax]
    3b0d:	05 00 00 00 00       	add    eax,0x0
    3b12:	02 01                	add    al,BYTE PTR [ecx]
    3b14:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3b1a:	02 07                	add    al,BYTE PTR [edi]
    3b1c:	19 01                	sbb    DWORD PTR [ecx],eax
    3b1e:	00 00                	add    BYTE PTR [eax],al
    3b20:	04 0e                	add    al,0xe
    3b22:	00 00                	add    BYTE PTR [eax],al
    3b24:	00 02                	add    BYTE PTR [edx],al
    3b26:	34 61                	xor    al,0x61
    3b28:	00 00                	add    BYTE PTR [eax],al
    3b2a:	00 02                	add    BYTE PTR [edx],al
    3b2c:	04 07                	add    al,0x7
    3b2e:	61                   	popa   
    3b2f:	00 00                	add    BYTE PTR [eax],al
    3b31:	00 02                	add    BYTE PTR [edx],al
    3b33:	08 07                	or     BYTE PTR [edi],al
    3b35:	57                   	push   edi
    3b36:	00 00                	add    BYTE PTR [eax],al
    3b38:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3b3f:	56                   	push   esi
    3b40:	61                   	popa   
    3b41:	00 00                	add    BYTE PTR [eax],al
    3b43:	00 02                	add    BYTE PTR [edx],al
    3b45:	04 05                	add    al,0x5
    3b47:	05 00 00 00 02       	add    eax,0x2000000
    3b4c:	0c 04                	or     al,0x4
    3b4e:	66 01 00             	add    WORD PTR [eax],ax
    3b51:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3b57:	00 06                	add    BYTE PTR [esi],al
    3b59:	25 00 00 00 02       	and    eax,0x2000000
    3b5e:	01 02                	add    DWORD PTR [edx],eax
    3b60:	13 01                	adc    eax,DWORD PTR [ecx]
    3b62:	00 00                	add    BYTE PTR [eax],al
    3b64:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3b67:	83 01 00             	add    DWORD PTR [ecx],0x0
    3b6a:	00 02                	add    BYTE PTR [edx],al
    3b6c:	04 07                	add    al,0x7
    3b6e:	5c                   	pop    esp
    3b6f:	00 00                	add    BYTE PTR [eax],al
    3b71:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3b77:	00 07                	add    BYTE PTR [edi],al
    3b79:	e0 0a                	loopne 3b85 <sysEnter_Vector-0x12c47b>
    3b7b:	00 00                	add    BYTE PTR [eax],al
    3b7d:	01 3b                	add    DWORD PTR [ebx],edi
    3b7f:	a1 00 00 00 1c       	mov    eax,ds:0x1c000000
    3b84:	2b 00                	sub    eax,DWORD PTR [eax]
    3b86:	9f                   	lahf   
    3b87:	7d 01                	jge    3b8a <sysEnter_Vector-0x12c476>
    3b89:	00 00                	add    BYTE PTR [eax],al
    3b8b:	01 9c 45 01 00 00 08 	add    DWORD PTR [ebp+eax*2+0x8000001],ebx
    3b92:	04 0b                	add    al,0xb
    3b94:	00 00                	add    BYTE PTR [eax],al
    3b96:	01 3b                	add    DWORD PTR [ebx],edi
    3b98:	88 00                	mov    BYTE PTR [eax],al
    3b9a:	00 00                	add    BYTE PTR [eax],al
    3b9c:	02 91 00 08 d2 0a    	add    dl,BYTE PTR [ecx+0xad20800]
    3ba2:	00 00                	add    BYTE PTR [eax],al
    3ba4:	01 3b                	add    DWORD PTR [ebx],edi
    3ba6:	45                   	inc    ebp
    3ba7:	01 00                	add    DWORD PTR [eax],eax
    3ba9:	00 02                	add    BYTE PTR [edx],al
    3bab:	91                   	xchg   ecx,eax
    3bac:	04 08                	add    al,0x8
    3bae:	3a 09                	cmp    cl,BYTE PTR [ecx]
    3bb0:	00 00                	add    BYTE PTR [eax],al
    3bb2:	01 3b                	add    DWORD PTR [ebx],edi
    3bb4:	3a 00                	cmp    al,BYTE PTR [eax]
    3bb6:	00 00                	add    BYTE PTR [eax],al
    3bb8:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    3bbe:	01 3d 88 00 00 00    	add    DWORD PTR ds:0x88,edi
    3bc4:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3bc7:	61                   	popa   
    3bc8:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    3bcb:	01 3e                	add    DWORD PTR [esi],edi
    3bcd:	a1 00 00 00 01       	mov    eax,ds:0x1000000
    3bd2:	57                   	push   edi
    3bd3:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    3bd6:	01 3f                	add    DWORD PTR [edi],edi
    3bd8:	3a 00                	cmp    al,BYTE PTR [eax]
    3bda:	00 00                	add    BYTE PTR [eax],al
    3bdc:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    3bdf:	fd                   	std    
    3be0:	0a 00                	or     al,BYTE PTR [eax]
    3be2:	00 01                	add    BYTE PTR [ecx],al
    3be4:	40                   	inc    eax
    3be5:	a1 00 00 00 0b       	mov    eax,ds:0xb000000
    3bea:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3beb:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    3bef:	41                   	inc    ecx
    3bf0:	3a 00                	cmp    al,BYTE PTR [eax]
    3bf2:	00 00                	add    BYTE PTR [eax],al
    3bf4:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    3bf7:	79 00                	jns    3bf9 <sysEnter_Vector-0x12c407>
    3bf9:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    3bfc:	00 00                	add    BYTE PTR [eax],al
    3bfe:	00 01                	add    BYTE PTR [ecx],al
    3c00:	51                   	push   ecx
    3c01:	0c d9                	or     al,0xd9
    3c03:	0a 00                	or     al,BYTE PTR [eax]
    3c05:	00 01                	add    BYTE PTR [ecx],al
    3c07:	41                   	inc    ecx
    3c08:	3a 00                	cmp    al,BYTE PTR [eax]
    3c0a:	00 00                	add    BYTE PTR [eax],al
    3c0c:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    3c0f:	05 04 a8 00 00       	add    eax,0xa804
    3c14:	00 0d a3 00 00 00    	add    BYTE PTR ds:0xa3,cl
    3c1a:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
    3c1d:	00 00                	add    BYTE PTR [eax],al
    3c1f:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    3c25:	9f                   	lahf   
    3c26:	0d 34 01 00 00       	or     eax,0x134
    3c2b:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    3c31:	05 03 f0 61 00       	add    eax,0x61f003
    3c36:	9f                   	lahf   
    3c37:	0d 7b 00 00 00       	or     eax,0x7b
    3c3c:	03 36                	add    esi,DWORD PTR [esi]
    3c3e:	56                   	push   esi
    3c3f:	00 00                	add    BYTE PTR [eax],al
    3c41:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    3c47:	9f                   	lahf   
    3c48:	0d 7c 01 00 00       	or     eax,0x17c
    3c4d:	03 37                	add    esi,DWORD PTR [edi]
    3c4f:	7a 00                	jp     3c51 <sysEnter_Vector-0x12c3af>
    3c51:	00 00                	add    BYTE PTR [eax],al
    3c53:	05 03 f8 61 00       	add    eax,0x61f803
    3c58:	9f                   	lahf   
    3c59:	0d 6e 00 00 00       	or     eax,0x6e
    3c5e:	04 2f                	add    al,0x2f
    3c60:	a0 01 00 00 05       	mov    al,ds:0x5000001
    3c65:	03 e4                	add    esp,esp
    3c67:	61                   	popa   
    3c68:	00 9f 05 04 6f 00    	add    BYTE PTR [edi+0x6f0405],bl
    3c6e:	00 00                	add    BYTE PTR [eax],al
    3c70:	0d 91 00 00 00       	or     eax,0x91
    3c75:	04 30                	add    al,0x30
    3c77:	3a 00                	cmp    al,BYTE PTR [eax]
    3c79:	00 00                	add    BYTE PTR [eax],al
    3c7b:	05 03 e0 61 00       	add    eax,0x61e003
    3c80:	9f                   	lahf   
    3c81:	0d 41 00 00 00       	or     eax,0x41
    3c86:	05 53 45 01 00       	add    eax,0x14553
    3c8b:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    3c91:	9f                   	lahf   
    3c92:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    3c96:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3c99:	95                   	xchg   ebp,eax
    3c9a:	13 00                	adc    eax,DWORD PTR [eax]
    3c9c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3c9f:	ac                   	lods   al,BYTE PTR ds:[esi]
    3ca0:	00 00                	add    BYTE PTR [eax],al
    3ca2:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    3ca5:	0b 00                	or     eax,DWORD PTR [eax]
    3ca7:	00 1e                	add    BYTE PTR [esi],bl
    3ca9:	00 00                	add    BYTE PTR [eax],al
    3cab:	00 9c 2c 00 9f 1d 00 	add    BYTE PTR [esp+ebp*1+0x1d9f00],bl
    3cb2:	00 00                	add    BYTE PTR [eax],al
    3cb4:	e3 19                	jecxz  3ccf <sysEnter_Vector-0x12c331>
    3cb6:	00 00                	add    BYTE PTR [eax],al
    3cb8:	02 20                	add    ah,BYTE PTR [eax]
    3cba:	0b 00                	or     eax,DWORD PTR [eax]
    3cbc:	00 01                	add    BYTE PTR [ecx],al
    3cbe:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3cc1:	00 00                	add    BYTE PTR [eax],al
    3cc3:	9c                   	pushf  
    3cc4:	2c 00                	sub    al,0x0
    3cc6:	9f                   	lahf   
    3cc7:	1d 00 00 00 01       	sbb    eax,0x1000000
    3ccc:	9c                   	pushf  
    3ccd:	5b                   	pop    ebx
    3cce:	00 00                	add    BYTE PTR [eax],al
    3cd0:	00 03                	add    BYTE PTR [ebx],al
    3cd2:	76 61                	jbe    3d35 <sysEnter_Vector-0x12c2cb>
    3cd4:	6c                   	ins    BYTE PTR es:[edi],dx
    3cd5:	00 01                	add    BYTE PTR [ecx],al
    3cd7:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3cda:	00 00                	add    BYTE PTR [eax],al
    3cdc:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    3ce2:	74 00                	je     3ce4 <sysEnter_Vector-0x12c31c>
    3ce4:	01 01                	add    DWORD PTR [ecx],eax
    3ce6:	68 00 00 00 02       	push   0x2000000
    3ceb:	91                   	xchg   ecx,eax
    3cec:	04 00                	add    al,0x0
    3cee:	04 04                	add    al,0x4
    3cf0:	61                   	popa   
    3cf1:	00 00                	add    BYTE PTR [eax],al
    3cf3:	00 05 01 06 8c 00    	add    BYTE PTR ds:0x8c0601,al
    3cf9:	00 00                	add    BYTE PTR [eax],al
    3cfb:	06                   	push   es
    3cfc:	04 05                	add    al,0x5
    3cfe:	69 6e 74 00 00 c3 01 	imul   ebp,DWORD PTR [esi+0x74],0x1c30000
    3d05:	00 00                	add    BYTE PTR [eax],al
    3d07:	04 00                	add    al,0x0
    3d09:	f3 13 00             	repz adc eax,DWORD PTR [eax]
    3d0c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3d0f:	ac                   	lods   al,BYTE PTR ds:[esi]
    3d10:	00 00                	add    BYTE PTR [eax],al
    3d12:	00 0c 28             	add    BYTE PTR [eax+ebp*1],cl
    3d15:	0b 00                	or     eax,DWORD PTR [eax]
    3d17:	00 1e                	add    BYTE PTR [esi],bl
    3d19:	00 00                	add    BYTE PTR [eax],al
    3d1b:	00 bc 2c 00 9f 9c 01 	add    BYTE PTR [esp+ebp*1+0x19c9f00],bh
    3d22:	00 00                	add    BYTE PTR [eax],al
    3d24:	2a 1a                	sub    bl,BYTE PTR [edx]
    3d26:	00 00                	add    BYTE PTR [eax],al
    3d28:	02 01                	add    al,BYTE PTR [ecx]
    3d2a:	06                   	push   es
    3d2b:	8c 00                	mov    WORD PTR [eax],es
    3d2d:	00 00                	add    BYTE PTR [eax],al
    3d2f:	02 01                	add    al,BYTE PTR [ecx]
    3d31:	06                   	push   es
    3d32:	85 00                	test   DWORD PTR [eax],eax
    3d34:	00 00                	add    BYTE PTR [eax],al
    3d36:	02 02                	add    al,BYTE PTR [edx]
    3d38:	05 72 01 00 00       	add    eax,0x172
    3d3d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3d44:	02 08                	add    cl,BYTE PTR [eax]
    3d46:	05 00 00 00 00       	add    eax,0x0
    3d4b:	02 01                	add    al,BYTE PTR [ecx]
    3d4d:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3d53:	02 07                	add    al,BYTE PTR [edi]
    3d55:	19 01                	sbb    DWORD PTR [ecx],eax
    3d57:	00 00                	add    BYTE PTR [eax],al
    3d59:	04 0e                	add    al,0xe
    3d5b:	00 00                	add    BYTE PTR [eax],al
    3d5d:	00 02                	add    BYTE PTR [edx],al
    3d5f:	34 61                	xor    al,0x61
    3d61:	00 00                	add    BYTE PTR [eax],al
    3d63:	00 02                	add    BYTE PTR [edx],al
    3d65:	04 07                	add    al,0x7
    3d67:	61                   	popa   
    3d68:	00 00                	add    BYTE PTR [eax],al
    3d6a:	00 02                	add    BYTE PTR [edx],al
    3d6c:	08 07                	or     BYTE PTR [edi],al
    3d6e:	57                   	push   edi
    3d6f:	00 00                	add    BYTE PTR [eax],al
    3d71:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3d78:	56                   	push   esi
    3d79:	61                   	popa   
    3d7a:	00 00                	add    BYTE PTR [eax],al
    3d7c:	00 02                	add    BYTE PTR [edx],al
    3d7e:	04 05                	add    al,0x5
    3d80:	05 00 00 00 02       	add    eax,0x2000000
    3d85:	0c 04                	or     al,0x4
    3d87:	66 01 00             	add    WORD PTR [eax],ax
    3d8a:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3d90:	00 06                	add    BYTE PTR [esi],al
    3d92:	25 00 00 00 02       	and    eax,0x2000000
    3d97:	01 02                	add    DWORD PTR [edx],eax
    3d99:	13 01                	adc    eax,DWORD PTR [ecx]
    3d9b:	00 00                	add    BYTE PTR [eax],al
    3d9d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3da0:	83 01 00             	add    DWORD PTR [ecx],0x0
    3da3:	00 02                	add    BYTE PTR [edx],al
    3da5:	04 07                	add    al,0x7
    3da7:	5c                   	pop    esp
    3da8:	00 00                	add    BYTE PTR [eax],al
    3daa:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3db0:	00 07                	add    BYTE PTR [edi],al
    3db2:	3d 0b 00 00 01       	cmp    eax,0x100000b
    3db7:	57                   	push   edi
    3db8:	7a 00                	jp     3dba <sysEnter_Vector-0x12c246>
    3dba:	00 00                	add    BYTE PTR [eax],al
    3dbc:	bc 2c 00 9f 9c       	mov    esp,0x9c9f002c
    3dc1:	01 00                	add    DWORD PTR [eax],eax
    3dc3:	00 01                	add    BYTE PTR [ecx],al
    3dc5:	9c                   	pushf  
    3dc6:	43                   	inc    ebx
    3dc7:	01 00                	add    DWORD PTR [eax],eax
    3dc9:	00 08                	add    BYTE PTR [eax],cl
    3dcb:	04 0b                	add    al,0xb
    3dcd:	00 00                	add    BYTE PTR [eax],al
    3dcf:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    3dd2:	00 00                	add    BYTE PTR [eax],al
    3dd4:	00 02                	add    BYTE PTR [edx],al
    3dd6:	91                   	xchg   ecx,eax
    3dd7:	00 08                	add    BYTE PTR [eax],cl
    3dd9:	d2 0a                	ror    BYTE PTR [edx],cl
    3ddb:	00 00                	add    BYTE PTR [eax],al
    3ddd:	01 57 43             	add    DWORD PTR [edi+0x43],edx
    3de0:	01 00                	add    DWORD PTR [eax],eax
    3de2:	00 02                	add    BYTE PTR [edx],al
    3de4:	91                   	xchg   ecx,eax
    3de5:	04 08                	add    al,0x8
    3de7:	3a 09                	cmp    cl,BYTE PTR [ecx]
    3de9:	00 00                	add    BYTE PTR [eax],al
    3deb:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    3dee:	00 00                	add    BYTE PTR [eax],al
    3df0:	00 02                	add    BYTE PTR [edx],al
    3df2:	91                   	xchg   ecx,eax
    3df3:	08 09                	or     BYTE PTR [ecx],cl
    3df5:	73 00                	jae    3df7 <sysEnter_Vector-0x12c209>
    3df7:	01 59 88             	add    DWORD PTR [ecx-0x78],ebx
    3dfa:	00 00                	add    BYTE PTR [eax],al
    3dfc:	00 01                	add    BYTE PTR [ecx],al
    3dfe:	56                   	push   esi
    3dff:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    3e02:	63 00                	arpl   WORD PTR [eax],ax
    3e04:	01 5a a1             	add    DWORD PTR [edx-0x5f],ebx
    3e07:	00 00                	add    BYTE PTR [eax],al
    3e09:	00 01                	add    BYTE PTR [ecx],al
    3e0b:	57                   	push   edi
    3e0c:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    3e0f:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    3e12:	00 00                	add    BYTE PTR [eax],al
    3e14:	00 01                	add    BYTE PTR [ecx],al
    3e16:	53                   	push   ebx
    3e17:	0a fd                	or     bh,ch
    3e19:	0a 00                	or     al,BYTE PTR [eax]
    3e1b:	00 01                	add    BYTE PTR [ecx],al
    3e1d:	5c                   	pop    esp
    3e1e:	a1 00 00 00 0b       	mov    eax,ds:0xb000000
    3e23:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3e24:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    3e28:	5d                   	pop    ebp
    3e29:	3a 00                	cmp    al,BYTE PTR [eax]
    3e2b:	00 00                	add    BYTE PTR [eax],al
    3e2d:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    3e30:	79 00                	jns    3e32 <sysEnter_Vector-0x12c1ce>
    3e32:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    3e35:	00 00                	add    BYTE PTR [eax],al
    3e37:	00 01                	add    BYTE PTR [ecx],al
    3e39:	51                   	push   ecx
    3e3a:	0a d9                	or     bl,cl
    3e3c:	0a 00                	or     al,BYTE PTR [eax]
    3e3e:	00 01                	add    BYTE PTR [ecx],al
    3e40:	5d                   	pop    ebp
    3e41:	3a 00                	cmp    al,BYTE PTR [eax]
    3e43:	00 00                	add    BYTE PTR [eax],al
    3e45:	00 05 04 a8 00 00    	add    BYTE PTR ds:0xa804,al
    3e4b:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
    3e4e:	00 00                	add    BYTE PTR [eax],al
    3e50:	00 03                	add    BYTE PTR [ebx],al
    3e52:	34 56                	xor    al,0x56
    3e54:	00 00                	add    BYTE PTR [eax],al
    3e56:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    3e5c:	9f                   	lahf   
    3e5d:	0c 34                	or     al,0x34
    3e5f:	01 00                	add    DWORD PTR [eax],eax
    3e61:	00 03                	add    BYTE PTR [ebx],al
    3e63:	35 56 00 00 00       	xor    eax,0x56
    3e68:	05 03 f0 61 00       	add    eax,0x61f003
    3e6d:	9f                   	lahf   
    3e6e:	0c 7b                	or     al,0x7b
    3e70:	00 00                	add    BYTE PTR [eax],al
    3e72:	00 03                	add    BYTE PTR [ebx],al
    3e74:	36                   	ss
    3e75:	56                   	push   esi
    3e76:	00 00                	add    BYTE PTR [eax],al
    3e78:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    3e7e:	9f                   	lahf   
    3e7f:	0c 7c                	or     al,0x7c
    3e81:	01 00                	add    DWORD PTR [eax],eax
    3e83:	00 03                	add    BYTE PTR [ebx],al
    3e85:	37                   	aaa    
    3e86:	7a 00                	jp     3e88 <sysEnter_Vector-0x12c178>
    3e88:	00 00                	add    BYTE PTR [eax],al
    3e8a:	05 03 f8 61 00       	add    eax,0x61f803
    3e8f:	9f                   	lahf   
    3e90:	0c 6e                	or     al,0x6e
    3e92:	00 00                	add    BYTE PTR [eax],al
    3e94:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    3e97:	9e                   	sahf   
    3e98:	01 00                	add    DWORD PTR [eax],eax
    3e9a:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    3ea0:	9f                   	lahf   
    3ea1:	05 04 6f 00 00       	add    eax,0x6f04
    3ea6:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    3ea9:	00 00                	add    BYTE PTR [eax],al
    3eab:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    3eae:	3a 00                	cmp    al,BYTE PTR [eax]
    3eb0:	00 00                	add    BYTE PTR [eax],al
    3eb2:	05 03 e0 61 00       	add    eax,0x61e003
    3eb7:	9f                   	lahf   
    3eb8:	0c 41                	or     al,0x41
    3eba:	00 00                	add    BYTE PTR [eax],al
    3ebc:	00 05 53 43 01 00    	add    BYTE PTR ds:0x14353,al
    3ec2:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    3ec8:	9f                   	lahf   
    3ec9:	00 95 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],dl
    3ecf:	00 9f 14 00 00 04    	add    BYTE PTR [edi+0x4000014],bl
    3ed5:	01 ac 00 00 00 0c 53 	add    DWORD PTR [eax+eax*1+0x530c0000],ebp
    3edc:	0b 00                	or     eax,DWORD PTR [eax]
    3ede:	00 1e                	add    BYTE PTR [esi],bl
    3ee0:	00 00                	add    BYTE PTR [eax],al
    3ee2:	00 58 2e             	add    BYTE PTR [eax+0x2e],bl
    3ee5:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
    3eeb:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3eec:	1b 00                	sbb    eax,DWORD PTR [eax]
    3eee:	00 02                	add    BYTE PTR [edx],al
    3ef0:	01 06                	add    DWORD PTR [esi],eax
    3ef2:	8c 00                	mov    WORD PTR [eax],es
    3ef4:	00 00                	add    BYTE PTR [eax],al
    3ef6:	02 01                	add    al,BYTE PTR [ecx]
    3ef8:	06                   	push   es
    3ef9:	85 00                	test   DWORD PTR [eax],eax
    3efb:	00 00                	add    BYTE PTR [eax],al
    3efd:	02 02                	add    al,BYTE PTR [edx]
    3eff:	05 72 01 00 00       	add    eax,0x172
    3f04:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3f0b:	02 08                	add    cl,BYTE PTR [eax]
    3f0d:	05 00 00 00 00       	add    eax,0x0
    3f12:	02 01                	add    al,BYTE PTR [ecx]
    3f14:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3f1a:	02 07                	add    al,BYTE PTR [edi]
    3f1c:	19 01                	sbb    DWORD PTR [ecx],eax
    3f1e:	00 00                	add    BYTE PTR [eax],al
    3f20:	04 0e                	add    al,0xe
    3f22:	00 00                	add    BYTE PTR [eax],al
    3f24:	00 02                	add    BYTE PTR [edx],al
    3f26:	34 61                	xor    al,0x61
    3f28:	00 00                	add    BYTE PTR [eax],al
    3f2a:	00 02                	add    BYTE PTR [edx],al
    3f2c:	04 07                	add    al,0x7
    3f2e:	61                   	popa   
    3f2f:	00 00                	add    BYTE PTR [eax],al
    3f31:	00 02                	add    BYTE PTR [edx],al
    3f33:	08 07                	or     BYTE PTR [edi],al
    3f35:	57                   	push   edi
    3f36:	00 00                	add    BYTE PTR [eax],al
    3f38:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3f3f:	56                   	push   esi
    3f40:	61                   	popa   
    3f41:	00 00                	add    BYTE PTR [eax],al
    3f43:	00 02                	add    BYTE PTR [edx],al
    3f45:	04 05                	add    al,0x5
    3f47:	05 00 00 00 02       	add    eax,0x2000000
    3f4c:	0c 04                	or     al,0x4
    3f4e:	66 01 00             	add    WORD PTR [eax],ax
    3f51:	00 02                	add    BYTE PTR [edx],al
    3f53:	01 02                	add    DWORD PTR [edx],eax
    3f55:	13 01                	adc    eax,DWORD PTR [ecx]
    3f57:	00 00                	add    BYTE PTR [eax],al
    3f59:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3f5c:	83 01 00             	add    DWORD PTR [ecx],0x0
    3f5f:	00 02                	add    BYTE PTR [edx],al
    3f61:	04 07                	add    al,0x7
    3f63:	5c                   	pop    esp
    3f64:	00 00                	add    BYTE PTR [eax],al
    3f66:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3f6c:	00 06                	add    BYTE PTR [esi],al
    3f6e:	44                   	inc    esp
    3f6f:	0b 00                	or     eax,DWORD PTR [eax]
    3f71:	00 01                	add    BYTE PTR [ecx],al
    3f73:	03 58 2e             	add    ebx,DWORD PTR [eax+0x2e]
    3f76:	00 9f 96 00 00 00    	add    BYTE PTR [edi+0x96],bl
    3f7c:	01 9c f1 00 00 00 07 	add    DWORD PTR [ecx+esi*8+0x7000000],ebx
    3f83:	4d                   	dec    ebp
    3f84:	0b 00                	or     eax,DWORD PTR [eax]
    3f86:	00 01                	add    BYTE PTR [ecx],al
    3f88:	03 9d 00 00 00 02    	add    ebx,DWORD PTR [ebp+0x2000000]
    3f8e:	91                   	xchg   ecx,eax
    3f8f:	00 08                	add    BYTE PTR [eax],cl
    3f91:	64                   	fs
    3f92:	73 74                	jae    4008 <sysEnter_Vector-0x12bff8>
    3f94:	00 01                	add    BYTE PTR [ecx],al
    3f96:	05 9d 00 00 00       	add    eax,0x9d
    3f9b:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    3fa1:	63 00                	arpl   WORD PTR [eax],ax
    3fa3:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    3fa9:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    3faf:	64 00 01             	add    BYTE PTR fs:[ecx],al
    3fb2:	06                   	push   es
    3fb3:	9d                   	popf   
    3fb4:	00 00                	add    BYTE PTR [eax],al
    3fb6:	00 02                	add    BYTE PTR [edx],al
    3fb8:	91                   	xchg   ecx,eax
    3fb9:	64 00 06             	add    BYTE PTR fs:[esi],al
    3fbc:	69 0b 00 00 01 1f    	imul   ecx,DWORD PTR [ebx],0x1f010000
    3fc2:	ee                   	out    dx,al
    3fc3:	2e 00 9f 20 00 00 00 	add    BYTE PTR cs:[edi+0x20],bl
    3fca:	01 9c 15 01 00 00 07 	add    DWORD PTR [ebp+edx*1+0x7000001],ebx
    3fd1:	4d                   	dec    ebp
    3fd2:	0b 00                	or     eax,DWORD PTR [eax]
    3fd4:	00 01                	add    BYTE PTR [ecx],al
    3fd6:	1f                   	pop    ds
    3fd7:	9d                   	popf   
    3fd8:	00 00                	add    BYTE PTR [eax],al
    3fda:	00 02                	add    BYTE PTR [edx],al
    3fdc:	91                   	xchg   ecx,eax
    3fdd:	00 00                	add    BYTE PTR [eax],al
    3fdf:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
    3fe5:	34 56                	xor    al,0x56
    3fe7:	00 00                	add    BYTE PTR [eax],al
    3fe9:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    3fef:	9f                   	lahf   
    3ff0:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
    3ff3:	00 00                	add    BYTE PTR [eax],al
    3ff5:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    3ffb:	05 03 f0 61 00       	add    eax,0x61f003
    4000:	9f                   	lahf   
    4001:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
    4004:	00 00                	add    BYTE PTR [eax],al
    4006:	03 36                	add    esi,DWORD PTR [esi]
    4008:	56                   	push   esi
    4009:	00 00                	add    BYTE PTR [eax],al
    400b:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    4011:	9f                   	lahf   
    4012:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
    4016:	00 03                	add    BYTE PTR [ebx],al
    4018:	37                   	aaa    
    4019:	7a 00                	jp     401b <sysEnter_Vector-0x12bfe5>
    401b:	00 00                	add    BYTE PTR [eax],al
    401d:	05 03 f8 61 00       	add    eax,0x61f803
    4022:	9f                   	lahf   
    4023:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
    4026:	00 00                	add    BYTE PTR [eax],al
    4028:	04 2f                	add    al,0x2f
    402a:	6a 01                	push   0x1
    402c:	00 00                	add    BYTE PTR [eax],al
    402e:	05 03 e4 61 00       	add    eax,0x61e403
    4033:	9f                   	lahf   
    4034:	05 04 6f 00 00       	add    eax,0x6f04
    4039:	00 09                	add    BYTE PTR [ecx],cl
    403b:	91                   	xchg   ecx,eax
    403c:	00 00                	add    BYTE PTR [eax],al
    403e:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    4041:	3a 00                	cmp    al,BYTE PTR [eax]
    4043:	00 00                	add    BYTE PTR [eax],al
    4045:	05 03 e0 61 00       	add    eax,0x61e003
    404a:	9f                   	lahf   
    404b:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
    404e:	00 00                	add    BYTE PTR [eax],al
    4050:	05 53 92 01 00       	add    eax,0x19253
    4055:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    405b:	9f                   	lahf   
    405c:	05 04 9d 00 00       	add    eax,0x9d04
    4061:	00 00                	add    BYTE PTR [eax],al
    4063:	f5                   	cmc    
    4064:	01 00                	add    DWORD PTR [eax],eax
    4066:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4069:	28 15 00 00 04 01    	sub    BYTE PTR ds:0x1040000,dl
    406f:	ac                   	lods   al,BYTE PTR ds:[esi]
    4070:	00 00                	add    BYTE PTR [eax],al
    4072:	00 0c 79             	add    BYTE PTR [ecx+edi*2],cl
    4075:	0b 00                	or     eax,DWORD PTR [eax]
    4077:	00 1e                	add    BYTE PTR [esi],bl
    4079:	00 00                	add    BYTE PTR [eax],al
    407b:	00 10                	add    BYTE PTR [eax],dl
    407d:	2f                   	das    
    407e:	00 9f 69 01 00 00    	add    BYTE PTR [edi+0x169],bl
    4084:	8a 1c 00             	mov    bl,BYTE PTR [eax+eax*1]
    4087:	00 02                	add    BYTE PTR [edx],al
    4089:	01 06                	add    DWORD PTR [esi],eax
    408b:	8c 00                	mov    WORD PTR [eax],es
    408d:	00 00                	add    BYTE PTR [eax],al
    408f:	02 01                	add    al,BYTE PTR [ecx]
    4091:	06                   	push   es
    4092:	85 00                	test   DWORD PTR [eax],eax
    4094:	00 00                	add    BYTE PTR [eax],al
    4096:	02 02                	add    al,BYTE PTR [edx]
    4098:	05 72 01 00 00       	add    eax,0x172
    409d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    40a4:	02 08                	add    cl,BYTE PTR [eax]
    40a6:	05 00 00 00 00       	add    eax,0x0
    40ab:	02 01                	add    al,BYTE PTR [ecx]
    40ad:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    40b3:	02 07                	add    al,BYTE PTR [edi]
    40b5:	19 01                	sbb    DWORD PTR [ecx],eax
    40b7:	00 00                	add    BYTE PTR [eax],al
    40b9:	04 0e                	add    al,0xe
    40bb:	00 00                	add    BYTE PTR [eax],al
    40bd:	00 02                	add    BYTE PTR [edx],al
    40bf:	34 61                	xor    al,0x61
    40c1:	00 00                	add    BYTE PTR [eax],al
    40c3:	00 02                	add    BYTE PTR [edx],al
    40c5:	04 07                	add    al,0x7
    40c7:	61                   	popa   
    40c8:	00 00                	add    BYTE PTR [eax],al
    40ca:	00 02                	add    BYTE PTR [edx],al
    40cc:	08 07                	or     BYTE PTR [edi],al
    40ce:	57                   	push   edi
    40cf:	00 00                	add    BYTE PTR [eax],al
    40d1:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    40d8:	56                   	push   esi
    40d9:	61                   	popa   
    40da:	00 00                	add    BYTE PTR [eax],al
    40dc:	00 04 66             	add    BYTE PTR [esi+eiz*2],al
    40df:	05 00 00 03 d8       	add    eax,0xd8030000
    40e4:	61                   	popa   
    40e5:	00 00                	add    BYTE PTR [eax],al
    40e7:	00 02                	add    BYTE PTR [edx],al
    40e9:	04 05                	add    al,0x5
    40eb:	05 00 00 00 02       	add    eax,0x2000000
    40f0:	0c 04                	or     al,0x4
    40f2:	66 01 00             	add    WORD PTR [eax],ax
    40f5:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    40fb:	00 06                	add    BYTE PTR [esi],al
    40fd:	25 00 00 00 02       	and    eax,0x2000000
    4102:	01 02                	add    DWORD PTR [edx],eax
    4104:	13 01                	adc    eax,DWORD PTR [ecx]
    4106:	00 00                	add    BYTE PTR [eax],al
    4108:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    410b:	83 01 00             	add    DWORD PTR [ecx],0x0
    410e:	00 02                	add    BYTE PTR [edx],al
    4110:	04 07                	add    al,0x7
    4112:	5c                   	pop    esp
    4113:	00 00                	add    BYTE PTR [eax],al
    4115:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    411b:	00 07                	add    BYTE PTR [edi],al
    411d:	ae                   	scas   al,BYTE PTR es:[edi]
    411e:	0b 00                	or     eax,DWORD PTR [eax]
    4120:	00 01                	add    BYTE PTR [ecx],al
    4122:	0a b3 00 00 00 10    	or     dh,BYTE PTR [ebx+0x10000000]
    4128:	2f                   	das    
    4129:	00 9f 43 01 00 00    	add    BYTE PTR [edi+0x143],bl
    412f:	01 9c 33 01 00 00 08 	add    DWORD PTR [ebx+esi*1+0x8000001],ebx
    4136:	69 6e 00 01 0a 93 00 	imul   ebp,DWORD PTR [esi+0x0],0x930a01
    413d:	00 00                	add    BYTE PTR [eax],al
    413f:	02 91 00 09 a6 0b    	add    dl,BYTE PTR [ecx+0xba60900]
    4145:	00 00                	add    BYTE PTR [eax],al
    4147:	01 0a                	add    DWORD PTR [edx],ecx
    4149:	93                   	xchg   ebx,eax
    414a:	00 00                	add    BYTE PTR [eax],al
    414c:	00 02                	add    BYTE PTR [edx],al
    414e:	91                   	xchg   ecx,eax
    414f:	04 08                	add    al,0x8
    4151:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4154:	01 0a                	add    DWORD PTR [edx],ecx
    4156:	93                   	xchg   ebx,eax
    4157:	00 00                	add    BYTE PTR [eax],al
    4159:	00 02                	add    BYTE PTR [edx],al
    415b:	91                   	xchg   ecx,eax
    415c:	08 0a                	or     BYTE PTR [edx],cl
    415e:	71 0b                	jno    416b <sysEnter_Vector-0x12be95>
    4160:	00 00                	add    BYTE PTR [eax],al
    4162:	01 0c 7a             	add    DWORD PTR [edx+edi*2],ecx
    4165:	00 00                	add    BYTE PTR [eax],al
    4167:	00 02                	add    BYTE PTR [edx],al
    4169:	91                   	xchg   ecx,eax
    416a:	6c                   	ins    BYTE PTR es:[edi],dx
    416b:	0b 72 65             	or     esi,DWORD PTR [edx+0x65]
    416e:	73 00                	jae    4170 <sysEnter_Vector-0x12be90>
    4170:	01 0e                	add    DWORD PTR [esi],ecx
    4172:	b3 00                	mov    bl,0x0
    4174:	00 00                	add    BYTE PTR [eax],al
    4176:	02 91 68 0a 91 0b    	add    dl,BYTE PTR [ecx+0xb910a68]
    417c:	00 00                	add    BYTE PTR [eax],al
    417e:	01 10                	add    DWORD PTR [eax],edx
    4180:	7a 00                	jp     4182 <sysEnter_Vector-0x12be7e>
    4182:	00 00                	add    BYTE PTR [eax],al
    4184:	02 91 64 0a 8a 0b    	add    dl,BYTE PTR [ecx+0xb8a0a64]
    418a:	00 00                	add    BYTE PTR [eax],al
    418c:	01 12                	add    DWORD PTR [edx],edx
    418e:	b3 00                	mov    bl,0x0
    4190:	00 00                	add    BYTE PTR [eax],al
    4192:	02 91 60 00 0c 9b    	add    dl,BYTE PTR [ecx-0x64f3ffa0]
    4198:	0b 00                	or     eax,DWORD PTR [eax]
    419a:	00 01                	add    BYTE PTR [ecx],al
    419c:	2a b3 00 00 00 53    	sub    dh,BYTE PTR [ebx+0x53000000]
    41a2:	30 00                	xor    BYTE PTR [eax],al
    41a4:	9f                   	lahf   
    41a5:	26 00 00             	add    BYTE PTR es:[eax],al
    41a8:	00 01                	add    BYTE PTR [ecx],al
    41aa:	9c                   	pushf  
    41ab:	75 01                	jne    41ae <sysEnter_Vector-0x12be52>
    41ad:	00 00                	add    BYTE PTR [eax],al
    41af:	08 69 6e             	or     BYTE PTR [ecx+0x6e],ch
    41b2:	00 01                	add    BYTE PTR [ecx],al
    41b4:	2a 93 00 00 00 02    	sub    dl,BYTE PTR [ebx+0x2000000]
    41ba:	91                   	xchg   ecx,eax
    41bb:	00 09                	add    BYTE PTR [ecx],cl
    41bd:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    41be:	0b 00                	or     eax,DWORD PTR [eax]
    41c0:	00 01                	add    BYTE PTR [ecx],al
    41c2:	2a 93 00 00 00 02    	sub    dl,BYTE PTR [ebx+0x2000000]
    41c8:	91                   	xchg   ecx,eax
    41c9:	04 08                	add    al,0x8
    41cb:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    41ce:	01 2a                	add    DWORD PTR [edx],ebp
    41d0:	93                   	xchg   ebx,eax
    41d1:	00 00                	add    BYTE PTR [eax],al
    41d3:	00 02                	add    BYTE PTR [edx],al
    41d5:	91                   	xchg   ecx,eax
    41d6:	08 00                	or     BYTE PTR [eax],al
    41d8:	0d a3 00 00 00       	or     eax,0xa3
    41dd:	04 34                	add    al,0x34
    41df:	56                   	push   esi
    41e0:	00 00                	add    BYTE PTR [eax],al
    41e2:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    41e8:	9f                   	lahf   
    41e9:	0d 34 01 00 00       	or     eax,0x134
    41ee:	04 35                	add    al,0x35
    41f0:	56                   	push   esi
    41f1:	00 00                	add    BYTE PTR [eax],al
    41f3:	00 05 03 f0 61 00    	add    BYTE PTR ds:0x61f003,al
    41f9:	9f                   	lahf   
    41fa:	0d 7b 00 00 00       	or     eax,0x7b
    41ff:	04 36                	add    al,0x36
    4201:	56                   	push   esi
    4202:	00 00                	add    BYTE PTR [eax],al
    4204:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    420a:	9f                   	lahf   
    420b:	0d 7c 01 00 00       	or     eax,0x17c
    4210:	04 37                	add    al,0x37
    4212:	85 00                	test   DWORD PTR [eax],eax
    4214:	00 00                	add    BYTE PTR [eax],al
    4216:	05 03 f8 61 00       	add    eax,0x61f803
    421b:	9f                   	lahf   
    421c:	0d 6e 00 00 00       	or     eax,0x6e
    4221:	05 2f ca 01 00       	add    eax,0x1ca2f
    4226:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    422c:	9f                   	lahf   
    422d:	05 04 6f 00 00       	add    eax,0x6f04
    4232:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
    4238:	05 30 3a 00 00       	add    eax,0x3a30
    423d:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    4243:	9f                   	lahf   
    4244:	0d 41 00 00 00       	or     eax,0x41
    4249:	06                   	push   es
    424a:	53                   	push   ebx
    424b:	f2 01 00             	repnz add DWORD PTR [eax],eax
    424e:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    4254:	9f                   	lahf   
    4255:	05 04 b3 00 00       	add    eax,0xb304
    425a:	00 00                	add    BYTE PTR [eax],al
    425c:	39 02                	cmp    DWORD PTR [edx],eax
    425e:	00 00                	add    BYTE PTR [eax],al
    4260:	04 00                	add    al,0x0
    4262:	f2 15 00 00 04 01    	repnz adc eax,0x1040000
    4268:	ac                   	lods   al,BYTE PTR ds:[esi]
    4269:	00 00                	add    BYTE PTR [eax],al
    426b:	00 0c cb             	add    BYTE PTR [ebx+ecx*8],cl
    426e:	0b 00                	or     eax,DWORD PTR [eax]
    4270:	00 1e                	add    BYTE PTR [esi],bl
    4272:	00 00                	add    BYTE PTR [eax],al
    4274:	00 7c 30 00          	add    BYTE PTR [eax+esi*1+0x0],bh
    4278:	9f                   	lahf   
    4279:	29 01                	sub    DWORD PTR [ecx],eax
    427b:	00 00                	add    BYTE PTR [eax],al
    427d:	76 1d                	jbe    429c <sysEnter_Vector-0x12bd64>
    427f:	00 00                	add    BYTE PTR [eax],al
    4281:	02 01                	add    al,BYTE PTR [ecx]
    4283:	06                   	push   es
    4284:	8c 00                	mov    WORD PTR [eax],es
    4286:	00 00                	add    BYTE PTR [eax],al
    4288:	02 01                	add    al,BYTE PTR [ecx]
    428a:	06                   	push   es
    428b:	85 00                	test   DWORD PTR [eax],eax
    428d:	00 00                	add    BYTE PTR [eax],al
    428f:	02 02                	add    al,BYTE PTR [edx]
    4291:	05 72 01 00 00       	add    eax,0x172
    4296:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    429d:	02 08                	add    cl,BYTE PTR [eax]
    429f:	05 00 00 00 00       	add    eax,0x0
    42a4:	02 01                	add    al,BYTE PTR [ecx]
    42a6:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    42ac:	02 07                	add    al,BYTE PTR [edi]
    42ae:	19 01                	sbb    DWORD PTR [ecx],eax
    42b0:	00 00                	add    BYTE PTR [eax],al
    42b2:	04 0e                	add    al,0xe
    42b4:	00 00                	add    BYTE PTR [eax],al
    42b6:	00 02                	add    BYTE PTR [edx],al
    42b8:	34 61                	xor    al,0x61
    42ba:	00 00                	add    BYTE PTR [eax],al
    42bc:	00 02                	add    BYTE PTR [edx],al
    42be:	04 07                	add    al,0x7
    42c0:	61                   	popa   
    42c1:	00 00                	add    BYTE PTR [eax],al
    42c3:	00 02                	add    BYTE PTR [edx],al
    42c5:	08 07                	or     BYTE PTR [edi],al
    42c7:	57                   	push   edi
    42c8:	00 00                	add    BYTE PTR [eax],al
    42ca:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    42d1:	56                   	push   esi
    42d2:	61                   	popa   
    42d3:	00 00                	add    BYTE PTR [eax],al
    42d5:	00 02                	add    BYTE PTR [edx],al
    42d7:	04 05                	add    al,0x5
    42d9:	05 00 00 00 02       	add    eax,0x2000000
    42de:	0c 04                	or     al,0x4
    42e0:	66 01 00             	add    WORD PTR [eax],ax
    42e3:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    42e9:	00 06                	add    BYTE PTR [esi],al
    42eb:	25 00 00 00 02       	and    eax,0x2000000
    42f0:	01 02                	add    DWORD PTR [edx],eax
    42f2:	13 01                	adc    eax,DWORD PTR [ecx]
    42f4:	00 00                	add    BYTE PTR [eax],al
    42f6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    42f9:	83 01 00             	add    DWORD PTR [ecx],0x0
    42fc:	00 02                	add    BYTE PTR [edx],al
    42fe:	04 07                	add    al,0x7
    4300:	5c                   	pop    esp
    4301:	00 00                	add    BYTE PTR [eax],al
    4303:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4309:	00 07                	add    BYTE PTR [edi],al
    430b:	c2 0b 00             	ret    0xb
    430e:	00 01                	add    BYTE PTR [ecx],al
    4310:	33 a8 00 00 00 7c    	xor    ebp,DWORD PTR [eax+0x7c000000]
    4316:	30 00                	xor    BYTE PTR [eax],al
    4318:	9f                   	lahf   
    4319:	9e                   	sahf   
    431a:	00 00                	add    BYTE PTR [eax],al
    431c:	00 01                	add    BYTE PTR [ecx],al
    431e:	9c                   	pushf  
    431f:	16                   	push   ss
    4320:	01 00                	add    DWORD PTR [eax],eax
    4322:	00 08                	add    BYTE PTR [eax],cl
    4324:	e1 0b                	loope  4331 <sysEnter_Vector-0x12bccf>
    4326:	00 00                	add    BYTE PTR [eax],al
    4328:	01 33                	add    DWORD PTR [ebx],esi
    432a:	a8 00                	test   al,0x0
    432c:	00 00                	add    BYTE PTR [eax],al
    432e:	02 91 00 08 de 0b    	add    dl,BYTE PTR [ecx+0xbde0800]
    4334:	00 00                	add    BYTE PTR [eax],al
    4336:	01 33                	add    DWORD PTR [ebx],esi
    4338:	a8 00                	test   al,0x0
    433a:	00 00                	add    BYTE PTR [eax],al
    433c:	02 91 04 08 84 04    	add    dl,BYTE PTR [ecx+0x4840804]
    4342:	00 00                	add    BYTE PTR [eax],al
    4344:	01 33                	add    DWORD PTR [ebx],esi
    4346:	3a 00                	cmp    al,BYTE PTR [eax]
    4348:	00 00                	add    BYTE PTR [eax],al
    434a:	02 91 08 09 61 00    	add    dl,BYTE PTR [ecx+0x610908]
    4350:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4356:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4359:	62 00                	bound  eax,QWORD PTR [eax]
    435b:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4361:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    4364:	6c                   	ins    BYTE PTR es:[edi],dx
    4365:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    4367:	00 01                	add    BYTE PTR [ecx],al
    4369:	3b 3a                	cmp    edi,DWORD PTR [edx]
    436b:	00 00                	add    BYTE PTR [eax],al
    436d:	00 02                	add    BYTE PTR [edx],al
    436f:	91                   	xchg   ecx,eax
    4370:	6c                   	ins    BYTE PTR es:[edi],dx
    4371:	00 07                	add    BYTE PTR [edi],al
    4373:	ba 0b 00 00 01       	mov    edx,0x100000b
    4378:	57                   	push   edi
    4379:	a8 00                	test   al,0x0
    437b:	00 00                	add    BYTE PTR [eax],al
    437d:	1a 31                	sbb    dh,BYTE PTR [ecx]
    437f:	00 9f 6e 00 00 00    	add    BYTE PTR [edi+0x6e],bl
    4385:	01 9c 62 01 00 00 08 	add    DWORD PTR [edx+eiz*2+0x8000001],ebx
    438c:	e1 0b                	loope  4399 <sysEnter_Vector-0x12bc67>
    438e:	00 00                	add    BYTE PTR [eax],al
    4390:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    4393:	00 00                	add    BYTE PTR [eax],al
    4395:	00 02                	add    BYTE PTR [edx],al
    4397:	91                   	xchg   ecx,eax
    4398:	00 08                	add    BYTE PTR [eax],cl
    439a:	de 0b                	fimul  WORD PTR [ebx]
    439c:	00 00                	add    BYTE PTR [eax],al
    439e:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    43a1:	00 00                	add    BYTE PTR [eax],al
    43a3:	00 02                	add    BYTE PTR [edx],al
    43a5:	91                   	xchg   ecx,eax
    43a6:	04 09                	add    al,0x9
    43a8:	61                   	popa   
    43a9:	00 01                	add    BYTE PTR [ecx],al
    43ab:	59                   	pop    ecx
    43ac:	a8 00                	test   al,0x0
    43ae:	00 00                	add    BYTE PTR [eax],al
    43b0:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    43b3:	62 00                	bound  eax,QWORD PTR [eax]
    43b5:	01 59 a8             	add    DWORD PTR [ecx-0x58],ebx
    43b8:	00 00                	add    BYTE PTR [eax],al
    43ba:	00 01                	add    BYTE PTR [ecx],al
    43bc:	53                   	push   ebx
    43bd:	00 0a                	add    BYTE PTR [edx],cl
    43bf:	e8 0b 00 00 01       	call   10043cf <sysEnter_Vector+0xed43cf>
    43c4:	76 a8                	jbe    436e <sysEnter_Vector-0x12bc92>
    43c6:	00 00                	add    BYTE PTR [eax],al
    43c8:	00 88 31 00 9f 1d    	add    BYTE PTR [eax+0x1d9f0031],cl
    43ce:	00 00                	add    BYTE PTR [eax],al
    43d0:	00 01                	add    BYTE PTR [ecx],al
    43d2:	9c                   	pushf  
    43d3:	98                   	cwde   
    43d4:	01 00                	add    DWORD PTR [eax],eax
    43d6:	00 08                	add    BYTE PTR [eax],cl
    43d8:	e1 0b                	loope  43e5 <sysEnter_Vector-0x12bc1b>
    43da:	00 00                	add    BYTE PTR [eax],al
    43dc:	01 76 88             	add    DWORD PTR [esi-0x78],esi
    43df:	00 00                	add    BYTE PTR [eax],al
    43e1:	00 02                	add    BYTE PTR [edx],al
    43e3:	91                   	xchg   ecx,eax
    43e4:	00 08                	add    BYTE PTR [eax],cl
    43e6:	de 0b                	fimul  WORD PTR [ebx]
    43e8:	00 00                	add    BYTE PTR [eax],al
    43ea:	01 76 88             	add    DWORD PTR [esi-0x78],esi
    43ed:	00 00                	add    BYTE PTR [eax],al
    43ef:	00 02                	add    BYTE PTR [edx],al
    43f1:	91                   	xchg   ecx,eax
    43f2:	04 00                	add    al,0x0
    43f4:	0b 25 00 00 00 a8    	or     esp,DWORD PTR ds:0xa8000000
    43fa:	01 00                	add    DWORD PTR [eax],eax
    43fc:	00 0c 9a             	add    BYTE PTR [edx+ebx*4],cl
    43ff:	00 00                	add    BYTE PTR [eax],al
    4401:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    4404:	0d d8 0b 00 00       	or     eax,0xbd8
    4409:	01 19                	add    DWORD PTR [ecx],ebx
    440b:	98                   	cwde   
    440c:	01 00                	add    DWORD PTR [eax],eax
    440e:	00 05 03 60 60 00    	add    BYTE PTR ds:0x606003,al
    4414:	9f                   	lahf   
    4415:	0e                   	push   cs
    4416:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    441b:	34 56                	xor    al,0x56
    441d:	00 00                	add    BYTE PTR [eax],al
    441f:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    4425:	9f                   	lahf   
    4426:	0e                   	push   cs
    4427:	34 01                	xor    al,0x1
    4429:	00 00                	add    BYTE PTR [eax],al
    442b:	03 35 56 00 00 00    	add    esi,DWORD PTR ds:0x56
    4431:	05 03 f0 61 00       	add    eax,0x61f003
    4436:	9f                   	lahf   
    4437:	0e                   	push   cs
    4438:	7b 00                	jnp    443a <sysEnter_Vector-0x12bbc6>
    443a:	00 00                	add    BYTE PTR [eax],al
    443c:	03 36                	add    esi,DWORD PTR [esi]
    443e:	56                   	push   esi
    443f:	00 00                	add    BYTE PTR [eax],al
    4441:	00 05 03 e8 61 00    	add    BYTE PTR ds:0x61e803,al
    4447:	9f                   	lahf   
    4448:	0e                   	push   cs
    4449:	7c 01                	jl     444c <sysEnter_Vector-0x12bbb4>
    444b:	00 00                	add    BYTE PTR [eax],al
    444d:	03 37                	add    esi,DWORD PTR [edi]
    444f:	7a 00                	jp     4451 <sysEnter_Vector-0x12bbaf>
    4451:	00 00                	add    BYTE PTR [eax],al
    4453:	05 03 f8 61 00       	add    eax,0x61f803
    4458:	9f                   	lahf   
    4459:	0e                   	push   cs
    445a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    445b:	00 00                	add    BYTE PTR [eax],al
    445d:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    4460:	0e                   	push   cs
    4461:	02 00                	add    al,BYTE PTR [eax]
    4463:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    4469:	9f                   	lahf   
    446a:	05 04 6f 00 00       	add    eax,0x6f04
    446f:	00 0e                	add    BYTE PTR [esi],cl
    4471:	91                   	xchg   ecx,eax
    4472:	00 00                	add    BYTE PTR [eax],al
    4474:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    4477:	3a 00                	cmp    al,BYTE PTR [eax]
    4479:	00 00                	add    BYTE PTR [eax],al
    447b:	05 03 e0 61 00       	add    eax,0x61e003
    4480:	9f                   	lahf   
    4481:	0e                   	push   cs
    4482:	41                   	inc    ecx
    4483:	00 00                	add    BYTE PTR [eax],al
    4485:	00 05 53 36 02 00    	add    BYTE PTR ds:0x23653,al
    448b:	00 05 03 f4 61 00    	add    BYTE PTR ds:0x61f403,al
    4491:	9f                   	lahf   
    4492:	05 04 a8 00 00       	add    eax,0xa804
    4497:	00 00                	add    BYTE PTR [eax],al
    4499:	c9                   	leave  
    449a:	05 00 00 04 00       	add    eax,0x40000
    449f:	c1 16 00             	rcl    DWORD PTR [esi],0x0
    44a2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    44a5:	ac                   	lods   al,BYTE PTR ds:[esi]
    44a6:	00 00                	add    BYTE PTR [eax],al
    44a8:	00 0c ef             	add    BYTE PTR [edi+ebp*8],cl
    44ab:	0b 00                	or     eax,DWORD PTR [eax]
    44ad:	00 1e                	add    BYTE PTR [esi],bl
    44af:	00 00                	add    BYTE PTR [eax],al
    44b1:	00 a8 31 00 9f 17    	add    BYTE PTR [eax+0x179f0031],ch
    44b7:	0d 00 00 6d 1e       	or     eax,0x1e6d0000
    44bc:	00 00                	add    BYTE PTR [eax],al
    44be:	02 d8                	add    bl,al
    44c0:	03 00                	add    eax,DWORD PTR [eax]
    44c2:	00 04 f3             	add    BYTE PTR [ebx+esi*8],al
    44c5:	00 00                	add    BYTE PTR [eax],al
    44c7:	00 07                	add    BYTE PTR [edi],al
    44c9:	15 f3 00 00 00       	adc    eax,0xf3
    44ce:	03 8d 03 00 00 00    	add    ecx,DWORD PTR [ebp+0x3]
    44d4:	03 d7                	add    edx,edi
    44d6:	04 00                	add    al,0x0
    44d8:	00 01                	add    BYTE PTR [ecx],al
    44da:	03 fe                	add    edi,esi
    44dc:	02 00                	add    al,BYTE PTR [eax]
    44de:	00 02                	add    BYTE PTR [edx],al
    44e0:	03 c9                	add    ecx,ecx
    44e2:	04 00                	add    al,0x0
    44e4:	00 03                	add    BYTE PTR [ebx],al
    44e6:	03 35 03 00 00 04    	add    esi,DWORD PTR ds:0x4000003
    44ec:	03 27                	add    esp,DWORD PTR [edi]
    44ee:	03 00                	add    eax,DWORD PTR [eax]
    44f0:	00 05 03 a7 04 00    	add    BYTE PTR ds:0x4a703,al
    44f6:	00 06                	add    BYTE PTR [esi],al
    44f8:	03 1a                	add    ebx,DWORD PTR [edx]
    44fa:	04 00                	add    al,0x0
    44fc:	00 07                	add    BYTE PTR [edi],al
    44fe:	03 64 03 00          	add    esp,DWORD PTR [ebx+eax*1+0x0]
    4502:	00 08                	add    BYTE PTR [eax],cl
    4504:	03 0d 04 00 00 09    	add    ecx,DWORD PTR ds:0x9000004
    450a:	03 27                	add    esp,DWORD PTR [edi]
    450c:	04 00                	add    al,0x0
    450e:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    4511:	52                   	push   edx
    4512:	04 00                	add    al,0x0
    4514:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    4517:	bf 02 00 00 61       	mov    edi,0x61000002
    451c:	03 e8                	add    ebp,eax
    451e:	03 00                	add    eax,DWORD PTR [eax]
    4520:	00 97 04 ad 03 00    	add    BYTE PTR [edi+0x3ad04],dl
    4526:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    4529:	04 45                	add    al,0x45
    452b:	04 00                	add    al,0x0
    452d:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    4531:	76 04                	jbe    4537 <sysEnter_Vector-0x12bac9>
    4533:	00 00                	add    BYTE PTR [eax],al
    4535:	65 01 04 ea          	add    DWORD PTR gs:[edx+ebp*8],eax
    4539:	02 00                	add    al,BYTE PTR [eax]
    453b:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    453e:	04 4f                	add    al,0x4f
    4540:	03 00                	add    eax,DWORD PTR [eax]
    4542:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    4545:	04 42                	add    al,0x42
    4547:	03 00                	add    eax,DWORD PTR [eax]
    4549:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    454c:	04 f7                	add    al,0xf7
    454e:	04 00                	add    al,0x0
    4550:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    4553:	04 d2                	add    al,0xd2
    4555:	02 00                	add    al,BYTE PTR [eax]
    4557:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    455a:	04 17                	add    al,0x17
    455c:	03 00                	add    eax,DWORD PTR [eax]
    455e:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4561:	04 bb                	add    al,0xbb
    4563:	04 00                	add    al,0x0
    4565:	00 00                	add    BYTE PTR [eax],al
    4567:	03 04 36             	add    eax,DWORD PTR [esi+esi*1]
    456a:	04 00                	add    al,0x0
    456c:	00 01                	add    BYTE PTR [ecx],al
    456e:	03 04 c4             	add    eax,DWORD PTR [esp+eax*8]
    4571:	03 00                	add    eax,DWORD PTR [eax]
    4573:	00 02                	add    BYTE PTR [edx],al
    4575:	03 04 9d 03 00 00 03 	add    eax,DWORD PTR [ebx*4+0x3000003]
    457c:	03 04 fc             	add    eax,DWORD PTR [esp+edi*8]
    457f:	03 00                	add    eax,DWORD PTR [eax]
    4581:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4584:	04 66                	add    al,0x66
    4586:	04 00                	add    al,0x0
    4588:	00 05 03 00 05 04    	add    BYTE PTR ds:0x4050003,al
    458e:	07                   	pop    es
    458f:	61                   	popa   
    4590:	00 00                	add    BYTE PTR [eax],al
    4592:	00 06                	add    BYTE PTR [esi],al
    4594:	04 05                	add    al,0x5
    4596:	69 6e 74 00 05 01 06 	imul   ebp,DWORD PTR [esi+0x74],0x6010500
    459d:	8c 00                	mov    WORD PTR [eax],es
    459f:	00 00                	add    BYTE PTR [eax],al
    45a1:	05 01 06 85 00       	add    eax,0x850601
    45a6:	00 00                	add    BYTE PTR [eax],al
    45a8:	05 02 05 72 01       	add    eax,0x1720502
    45ad:	00 00                	add    BYTE PTR [eax],al
    45af:	05 08 05 00 00       	add    eax,0x508
    45b4:	00 00                	add    BYTE PTR [eax],al
    45b6:	05 01 08 83 00       	add    eax,0x830801
    45bb:	00 00                	add    BYTE PTR [eax],al
    45bd:	05 02 07 19 01       	add    eax,0x1190702
    45c2:	00 00                	add    BYTE PTR [eax],al
    45c4:	07                   	pop    es
    45c5:	0e                   	push   cs
    45c6:	00 00                	add    BYTE PTR [eax],al
    45c8:	00 02                	add    BYTE PTR [edx],al
    45ca:	34 f3                	xor    al,0xf3
    45cc:	00 00                	add    BYTE PTR [eax],al
    45ce:	00 05 08 07 57 00    	add    BYTE PTR ds:0x570708,al
    45d4:	00 00                	add    BYTE PTR [eax],al
    45d6:	07                   	pop    es
    45d7:	4d                   	dec    ebp
    45d8:	00 00                	add    BYTE PTR [eax],al
    45da:	00 02                	add    BYTE PTR [edx],al
    45dc:	56                   	push   esi
    45dd:	f3 00 00             	repz add BYTE PTR [eax],al
    45e0:	00 05 04 05 05 00    	add    BYTE PTR ds:0x50504,al
    45e6:	00 00                	add    BYTE PTR [eax],al
    45e8:	05 0c 04 66 01       	add    eax,0x166040c
    45ed:	00 00                	add    BYTE PTR [eax],al
    45ef:	07                   	pop    es
    45f0:	91                   	xchg   ecx,eax
    45f1:	0c 00                	or     al,0x0
    45f3:	00 03                	add    BYTE PTR [ebx],al
    45f5:	2a 48 01             	sub    cl,BYTE PTR [eax+0x1]
    45f8:	00 00                	add    BYTE PTR [eax],al
    45fa:	08 74 6d 00          	or     BYTE PTR [ebp+ebp*2+0x0],dh
    45fe:	2c 03                	sub    al,0x3
    4600:	2c f1                	sub    al,0xf1
    4602:	01 00                	add    DWORD PTR [eax],eax
    4604:	00 09                	add    BYTE PTR [ecx],cl
    4606:	d4 0c                	aam    0xc
    4608:	00 00                	add    BYTE PTR [eax],al
    460a:	03 2e                	add    ebp,DWORD PTR [esi]
    460c:	fa                   	cli    
    460d:	00 00                	add    BYTE PTR [eax],al
    460f:	00 00                	add    BYTE PTR [eax],al
    4611:	09 72 0c             	or     DWORD PTR [edx+0xc],esi
    4614:	00 00                	add    BYTE PTR [eax],al
    4616:	03 2f                	add    ebp,DWORD PTR [edi]
    4618:	fa                   	cli    
    4619:	00 00                	add    BYTE PTR [eax],al
    461b:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    461e:	04 0c                	add    al,0xc
    4620:	00 00                	add    BYTE PTR [eax],al
    4622:	03 30                	add    esi,DWORD PTR [eax]
    4624:	fa                   	cli    
    4625:	00 00                	add    BYTE PTR [eax],al
    4627:	00 08                	add    BYTE PTR [eax],cl
    4629:	09 cc                	or     esp,ecx
    462b:	0c 00                	or     al,0x0
    462d:	00 03                	add    BYTE PTR [ebx],al
    462f:	31 fa                	xor    edx,edi
    4631:	00 00                	add    BYTE PTR [eax],al
    4633:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    4636:	3c 0c                	cmp    al,0xc
    4638:	00 00                	add    BYTE PTR [eax],al
    463a:	03 32                	add    esi,DWORD PTR [edx]
    463c:	fa                   	cli    
    463d:	00 00                	add    BYTE PTR [eax],al
    463f:	00 10                	add    BYTE PTR [eax],dl
    4641:	09 43 0c             	or     DWORD PTR [ebx+0xc],eax
    4644:	00 00                	add    BYTE PTR [eax],al
    4646:	03 33                	add    esi,DWORD PTR [ebx]
    4648:	fa                   	cli    
    4649:	00 00                	add    BYTE PTR [eax],al
    464b:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    464e:	be 0c 00 00 03       	mov    esi,0x300000c
    4653:	34 fa                	xor    al,0xfa
    4655:	00 00                	add    BYTE PTR [eax],al
    4657:	00 18                	add    BYTE PTR [eax],bl
    4659:	09 79 0c             	or     DWORD PTR [ecx+0xc],edi
    465c:	00 00                	add    BYTE PTR [eax],al
    465e:	03 35 fa 00 00 00    	add    esi,DWORD PTR ds:0xfa
    4664:	1c 09                	sbb    al,0x9
    4666:	59                   	pop    ecx
    4667:	0c 00                	or     al,0x0
    4669:	00 03                	add    BYTE PTR [ebx],al
    466b:	36                   	ss
    466c:	fa                   	cli    
    466d:	00 00                	add    BYTE PTR [eax],al
    466f:	00 20                	add    BYTE PTR [eax],ah
    4671:	09 b4 0c 00 00 03 37 	or     DWORD PTR [esp+ecx*1+0x37030000],esi
    4678:	48                   	dec    eax
    4679:	01 00                	add    DWORD PTR [eax],eax
    467b:	00 24 09             	add    BYTE PTR [ecx+ecx*1],ah
    467e:	db 0c 00             	fisttp DWORD PTR [eax+eax*1]
    4681:	00 03                	add    BYTE PTR [ebx],al
    4683:	38 f1                	cmp    cl,dh
    4685:	01 00                	add    DWORD PTR [eax],eax
    4687:	00 28                	add    BYTE PTR [eax],ch
    4689:	00 0a                	add    BYTE PTR [edx],cl
    468b:	04 f7                	add    al,0xf7
    468d:	01 00                	add    DWORD PTR [eax],eax
    468f:	00 0b                	add    BYTE PTR [ebx],cl
    4691:	01 01                	add    DWORD PTR [ecx],eax
    4693:	00 00                	add    BYTE PTR [eax],al
    4695:	05 01 02 13 01       	add    eax,0x1130201
    469a:	00 00                	add    BYTE PTR [eax],al
    469c:	05 04 07 83 01       	add    eax,0x1830704
    46a1:	00 00                	add    BYTE PTR [eax],al
    46a3:	05 04 07 5c 00       	add    eax,0x5c0704
    46a8:	00 00                	add    BYTE PTR [eax],al
    46aa:	0a 04 01             	or     al,BYTE PTR [ecx+eax*1]
    46ad:	01 00                	add    DWORD PTR [eax],eax
    46af:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    46b2:	0c 00                	or     al,0x0
    46b4:	00 01                	add    BYTE PTR [ecx],al
    46b6:	17                   	pop    ss
    46b7:	56                   	push   esi
    46b8:	01 00                	add    DWORD PTR [eax],eax
    46ba:	00 a8 31 00 9f 44    	add    BYTE PTR [eax+0x449f0031],ch
    46c0:	00 00                	add    BYTE PTR [eax],al
    46c2:	00 01                	add    BYTE PTR [ecx],al
    46c4:	9c                   	pushf  
    46c5:	3f                   	aas    
    46c6:	02 00                	add    al,BYTE PTR [eax]
    46c8:	00 0d e3 02 00 00    	add    BYTE PTR ds:0x2e3,cl
    46ce:	01 19                	add    DWORD PTR [ecx],ebx
    46d0:	2b 01                	sub    eax,DWORD PTR [ecx]
    46d2:	00 00                	add    BYTE PTR [eax],al
    46d4:	02 91 6c 00 0e 68    	add    dl,BYTE PTR [ecx+0x680e006c]
    46da:	0c 00                	or     al,0x0
    46dc:	00 01                	add    BYTE PTR [ecx],al
    46de:	1f                   	pop    ds
    46df:	ad                   	lods   eax,DWORD PTR ds:[esi]
    46e0:	02 00                	add    al,BYTE PTR [eax]
    46e2:	00 ec                	add    ah,ch
    46e4:	31 00                	xor    DWORD PTR [eax],eax
    46e6:	9f                   	lahf   
    46e7:	19 03                	sbb    DWORD PTR [ebx],eax
    46e9:	00 00                	add    BYTE PTR [eax],al
    46eb:	01 9c ad 02 00 00 0f 	add    DWORD PTR [ebp+ebp*4+0xf000002],ebx
    46f2:	e3 0c                	jecxz  4700 <sysEnter_Vector-0x12b900>
    46f4:	00 00                	add    BYTE PTR [eax],al
    46f6:	01 1f                	add    DWORD PTR [edi],ebx
    46f8:	b3 02                	mov    bl,0x2
    46fa:	00 00                	add    BYTE PTR [eax],al
    46fc:	02 91 00 0f 8b 0c    	add    dl,BYTE PTR [ecx+0xc8b0f00]
    4702:	00 00                	add    BYTE PTR [eax],al
    4704:	01 1f                	add    DWORD PTR [edi],ebx
    4706:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4707:	02 00                	add    al,BYTE PTR [eax]
    4709:	00 02                	add    BYTE PTR [edx],al
    470b:	91                   	xchg   ecx,eax
    470c:	04 0d                	add    al,0xd
    470e:	af                   	scas   eax,DWORD PTR es:[edi]
    470f:	0c 00                	or     al,0x0
    4711:	00 01                	add    BYTE PTR [ecx],al
    4713:	21 56 01             	and    DWORD PTR [esi+0x1],edx
    4716:	00 00                	add    BYTE PTR [eax],al
    4718:	02 91 68 0d a4 0c    	add    dl,BYTE PTR [ecx+0xca40d68]
    471e:	00 00                	add    BYTE PTR [eax],al
    4720:	01 22                	add    DWORD PTR [edx],esp
    4722:	0a 02                	or     al,BYTE PTR [edx]
    4724:	00 00                	add    BYTE PTR [eax],al
    4726:	02 91 64 0d 62 0c    	add    dl,BYTE PTR [ecx+0xc620d64]
    472c:	00 00                	add    BYTE PTR [eax],al
    472e:	01 22                	add    DWORD PTR [edx],esp
    4730:	0a 02                	or     al,BYTE PTR [edx]
    4732:	00 00                	add    BYTE PTR [eax],al
    4734:	02 91 70 0d 46 0c    	add    dl,BYTE PTR [ecx+0xc460d70]
    473a:	00 00                	add    BYTE PTR [eax],al
    473c:	01 23                	add    DWORD PTR [ebx],esp
    473e:	fa                   	cli    
    473f:	00 00                	add    BYTE PTR [eax],al
    4741:	00 02                	add    BYTE PTR [edx],al
    4743:	91                   	xchg   ecx,eax
    4744:	6c                   	ins    BYTE PTR es:[edi],dx
    4745:	00 0a                	add    BYTE PTR [edx],cl
    4747:	04 61                	add    al,0x61
    4749:	01 00                	add    DWORD PTR [eax],eax
    474b:	00 0a                	add    BYTE PTR [edx],cl
    474d:	04 b9                	add    al,0xb9
    474f:	02 00                	add    al,BYTE PTR [eax]
    4751:	00 0b                	add    BYTE PTR [ebx],cl
    4753:	56                   	push   esi
    4754:	01 00                	add    DWORD PTR [eax],eax
    4756:	00 10                	add    BYTE PTR [eax],dl
    4758:	27                   	daa    
    4759:	0c 00                	or     al,0x0
    475b:	00 01                	add    BYTE PTR [ecx],al
    475d:	3c ad                	cmp    al,0xad
    475f:	02 00                	add    al,BYTE PTR [eax]
    4761:	00 05 35 00 9f 1d    	add    BYTE PTR ds:0x1d9f0035,al
    4767:	00 00                	add    BYTE PTR [eax],al
    4769:	00 01                	add    BYTE PTR [ecx],al
    476b:	9c                   	pushf  
    476c:	f4                   	hlt    
    476d:	02 00                	add    al,BYTE PTR [eax]
    476f:	00 0f                	add    BYTE PTR [edi],cl
    4771:	e3 0c                	jecxz  477f <sysEnter_Vector-0x12b881>
    4773:	00 00                	add    BYTE PTR [eax],al
    4775:	01 3c b3             	add    DWORD PTR [ebx+esi*4],edi
    4778:	02 00                	add    al,BYTE PTR [eax]
    477a:	00 02                	add    BYTE PTR [edx],al
    477c:	91                   	xchg   ecx,eax
    477d:	00 0f                	add    BYTE PTR [edi],cl
    477f:	8b 0c 00             	mov    ecx,DWORD PTR [eax+eax*1]
    4782:	00 01                	add    BYTE PTR [ecx],al
    4784:	3c ad                	cmp    al,0xad
    4786:	02 00                	add    al,BYTE PTR [eax]
    4788:	00 02                	add    BYTE PTR [edx],al
    478a:	91                   	xchg   ecx,eax
    478b:	04 00                	add    al,0x0
    478d:	10 fa                	adc    dl,bh
    478f:	0b 00                	or     eax,DWORD PTR [eax]
    4791:	00 01                	add    BYTE PTR [ecx],al
    4793:	41                   	inc    ecx
    4794:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4795:	02 00                	add    al,BYTE PTR [eax]
    4797:	00 22                	add    BYTE PTR [edx],ah
    4799:	35 00 9f 46 00       	xor    eax,0x469f00
    479e:	00 00                	add    BYTE PTR [eax],al
    47a0:	01 9c 28 03 00 00 0f 	add    DWORD PTR [eax+ebp*1+0xf000003],ebx
    47a7:	e3 0c                	jecxz  47b5 <sysEnter_Vector-0x12b84b>
    47a9:	00 00                	add    BYTE PTR [eax],al
    47ab:	01 41 b3             	add    DWORD PTR [ecx-0x4d],eax
    47ae:	02 00                	add    al,BYTE PTR [eax]
    47b0:	00 02                	add    BYTE PTR [edx],al
    47b2:	91                   	xchg   ecx,eax
    47b3:	00 11                	add    BYTE PTR [ecx],dl
    47b5:	74 00                	je     47b7 <sysEnter_Vector-0x12b849>
    47b7:	01 42 56             	add    DWORD PTR [edx+0x56],eax
    47ba:	01 00                	add    DWORD PTR [eax],eax
    47bc:	00 02                	add    BYTE PTR [edx],al
    47be:	91                   	xchg   ecx,eax
    47bf:	6c                   	ins    BYTE PTR es:[edi],dx
    47c0:	00 10                	add    BYTE PTR [eax],dl
    47c2:	e9 0c 00 00 01       	jmp    10047d3 <sysEnter_Vector+0xed47d3>
    47c7:	48                   	dec    eax
    47c8:	ad                   	lods   eax,DWORD PTR ds:[esi]
    47c9:	02 00                	add    al,BYTE PTR [eax]
    47cb:	00 68 35             	add    BYTE PTR [eax+0x35],ch
    47ce:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    47d4:	01 9c 6a 03 00 00 0f 	add    DWORD PTR [edx+ebp*2+0xf000003],ebx
    47db:	e3 0c                	jecxz  47e9 <sysEnter_Vector-0x12b817>
    47dd:	00 00                	add    BYTE PTR [eax],al
    47df:	01 48 b3             	add    DWORD PTR [eax-0x4d],ecx
    47e2:	02 00                	add    al,BYTE PTR [eax]
    47e4:	00 02                	add    BYTE PTR [edx],al
    47e6:	91                   	xchg   ecx,eax
    47e7:	00 0f                	add    BYTE PTR [edi],cl
    47e9:	8b 0c 00             	mov    ecx,DWORD PTR [eax+eax*1]
    47ec:	00 01                	add    BYTE PTR [ecx],al
    47ee:	48                   	dec    eax
    47ef:	ad                   	lods   eax,DWORD PTR ds:[esi]
    47f0:	02 00                	add    al,BYTE PTR [eax]
    47f2:	00 02                	add    BYTE PTR [edx],al
    47f4:	91                   	xchg   ecx,eax
    47f5:	04 11                	add    al,0x11
    47f7:	74 00                	je     47f9 <sysEnter_Vector-0x12b807>
    47f9:	01 4a 56             	add    DWORD PTR [edx+0x56],ecx
    47fc:	01 00                	add    DWORD PTR [eax],eax
    47fe:	00 02                	add    BYTE PTR [edx],al
    4800:	91                   	xchg   ecx,eax
    4801:	74 00                	je     4803 <sysEnter_Vector-0x12b7fd>
    4803:	10 98 0c 00 00 01    	adc    BYTE PTR [eax+0x100000c],bl
    4809:	50                   	push   eax
    480a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    480b:	02 00                	add    al,BYTE PTR [eax]
    480d:	00 9d 35 00 9f 1d    	add    BYTE PTR [ebp+0x1d9f0035],bl
    4813:	00 00                	add    BYTE PTR [eax],al
    4815:	00 01                	add    BYTE PTR [ecx],al
    4817:	9c                   	pushf  
    4818:	a0 03 00 00 0f       	mov    al,ds:0xf000003
    481d:	e3 0c                	jecxz  482b <sysEnter_Vector-0x12b7d5>
    481f:	00 00                	add    BYTE PTR [eax],al
    4821:	01 50 b3             	add    DWORD PTR [eax-0x4d],edx
    4824:	02 00                	add    al,BYTE PTR [eax]
    4826:	00 02                	add    BYTE PTR [edx],al
    4828:	91                   	xchg   ecx,eax
    4829:	00 0f                	add    BYTE PTR [edi],cl
    482b:	8b 0c 00             	mov    ecx,DWORD PTR [eax+eax*1]
    482e:	00 01                	add    BYTE PTR [ecx],al
    4830:	50                   	push   eax
    4831:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4832:	02 00                	add    al,BYTE PTR [eax]
    4834:	00 02                	add    BYTE PTR [edx],al
    4836:	91                   	xchg   ecx,eax
    4837:	04 00                	add    al,0x0
    4839:	0e                   	push   cs
    483a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    483b:	0c 00                	or     al,0x0
    483d:	00 01                	add    BYTE PTR [ecx],al
    483f:	54                   	push   esp
    4840:	56                   	push   esi
    4841:	01 00                	add    DWORD PTR [eax],eax
    4843:	00 ba 35 00 9f 57    	add    BYTE PTR [edx+0x579f0035],bh
    4849:	08 00                	or     BYTE PTR [eax],al
    484b:	00 01                	add    BYTE PTR [ecx],al
    484d:	9c                   	pushf  
    484e:	38 04 00             	cmp    BYTE PTR [eax+eax*1],al
    4851:	00 0f                	add    BYTE PTR [edi],cl
    4853:	8b 0c 00             	mov    ecx,DWORD PTR [eax+eax*1]
    4856:	00 01                	add    BYTE PTR [ecx],al
    4858:	54                   	push   esp
    4859:	ad                   	lods   eax,DWORD PTR ds:[esi]
    485a:	02 00                	add    al,BYTE PTR [eax]
    485c:	00 02                	add    BYTE PTR [edx],al
    485e:	91                   	xchg   ecx,eax
    485f:	00 11                	add    BYTE PTR [ecx],dl
    4861:	64                   	fs
    4862:	61                   	popa   
    4863:	79 00                	jns    4865 <sysEnter_Vector-0x12b79b>
    4865:	01 55 48             	add    DWORD PTR [ebp+0x48],edx
    4868:	01 00                	add    DWORD PTR [eax],eax
    486a:	00 02                	add    BYTE PTR [edx],al
    486c:	91                   	xchg   ecx,eax
    486d:	68 0d 46 0c 00       	push   0xc460d
    4872:	00 01                	add    BYTE PTR [ecx],al
    4874:	55                   	push   ebp
    4875:	48                   	dec    eax
    4876:	01 00                	add    DWORD PTR [eax],eax
    4878:	00 02                	add    BYTE PTR [edx],al
    487a:	91                   	xchg   ecx,eax
    487b:	54                   	push   esp
    487c:	0d 43 0c 00 00       	or     eax,0xc43
    4881:	01 56 fa             	add    DWORD PTR [esi-0x6],edx
    4884:	00 00                	add    BYTE PTR [eax],al
    4886:	00 02                	add    BYTE PTR [edx],al
    4888:	91                   	xchg   ecx,eax
    4889:	4c                   	dec    esp
    488a:	0d 7c 0c 00 00       	or     eax,0xc7c
    488f:	01 57 fa             	add    DWORD PTR [edi-0x6],edx
    4892:	00 00                	add    BYTE PTR [eax],al
    4894:	00 02                	add    BYTE PTR [edx],al
    4896:	91                   	xchg   ecx,eax
    4897:	64                   	fs
    4898:	0d 4b 0c 00 00       	or     eax,0xc4b
    489d:	01 57 fa             	add    DWORD PTR [edi-0x6],edx
    48a0:	00 00                	add    BYTE PTR [eax],al
    48a2:	00 02                	add    BYTE PTR [edx],al
    48a4:	91                   	xchg   ecx,eax
    48a5:	60                   	pusha  
    48a6:	0d e9 06 00 00       	or     eax,0x6e9
    48ab:	01 58 48             	add    DWORD PTR [eax+0x48],ebx
    48ae:	01 00                	add    DWORD PTR [eax],eax
    48b0:	00 02                	add    BYTE PTR [edx],al
    48b2:	91                   	xchg   ecx,eax
    48b3:	50                   	push   eax
    48b4:	0d 06 0d 00 00       	or     eax,0xd06
    48b9:	01 59 fa             	add    DWORD PTR [ecx-0x6],ebx
    48bc:	00 00                	add    BYTE PTR [eax],al
    48be:	00 02                	add    BYTE PTR [edx],al
    48c0:	91                   	xchg   ecx,eax
    48c1:	5c                   	pop    esp
    48c2:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    48c6:	00 01                	add    BYTE PTR [ecx],al
    48c8:	5a                   	pop    edx
    48c9:	48                   	dec    eax
    48ca:	01 00                	add    DWORD PTR [eax],eax
    48cc:	00 02                	add    BYTE PTR [edx],al
    48ce:	91                   	xchg   ecx,eax
    48cf:	58                   	pop    eax
    48d0:	00 10                	add    BYTE PTR [eax],dl
    48d2:	51                   	push   ecx
    48d3:	0c 00                	or     al,0x0
    48d5:	00 01                	add    BYTE PTR [ecx],al
    48d7:	bf ad 02 00 00       	mov    edi,0x2ad
    48dc:	11 3e                	adc    DWORD PTR [esi],edi
    48de:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    48e4:	01 9c 7c 04 00 00 0f 	add    DWORD PTR [esp+edi*2+0xf000004],ebx
    48eb:	af                   	scas   eax,DWORD PTR es:[edi]
    48ec:	0c 00                	or     al,0x0
    48ee:	00 01                	add    BYTE PTR [ecx],al
    48f0:	bf ad 02 00 00       	mov    edi,0x2ad
    48f5:	02 91 00 0f 81 0c    	add    dl,BYTE PTR [ecx+0xc810f00]
    48fb:	00 00                	add    BYTE PTR [eax],al
    48fd:	01 bf fc 01 00 00    	add    DWORD PTR [edi+0x1fc],edi
    4903:	02 91 5c 0d 0f 0c    	add    dl,BYTE PTR [ecx+0xc0f0d5c]
    4909:	00 00                	add    BYTE PTR [eax],al
    490b:	01 c1                	add    ecx,eax
    490d:	56                   	push   esi
    490e:	01 00                	add    DWORD PTR [eax],eax
    4910:	00 02                	add    BYTE PTR [edx],al
    4912:	91                   	xchg   ecx,eax
    4913:	6c                   	ins    BYTE PTR es:[edi],dx
    4914:	00 10                	add    BYTE PTR [eax],dl
    4916:	af                   	scas   eax,DWORD PTR es:[edi]
    4917:	0c 00                	or     al,0x0
    4919:	00 01                	add    BYTE PTR [ecx],al
    491b:	ca 56 01             	retf   0x156
    491e:	00 00                	add    BYTE PTR [eax],al
    4920:	7e 3e                	jle    4960 <sysEnter_Vector-0x12b6a0>
    4922:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
    4928:	01 9c b2 04 00 00 0f 	add    DWORD PTR [edx+esi*4+0xf000004],ebx
    492f:	ff 0c 00             	dec    DWORD PTR [eax+eax*1]
    4932:	00 01                	add    BYTE PTR [ecx],al
    4934:	ca b2 04             	retf   0x4b2
    4937:	00 00                	add    BYTE PTR [eax],al
    4939:	02 91 00 0d 0f 0c    	add    dl,BYTE PTR [ecx+0xc0f0d00]
    493f:	00 00                	add    BYTE PTR [eax],al
    4941:	01 cc                	add    esp,ecx
    4943:	2b 01                	sub    eax,DWORD PTR [ecx]
    4945:	00 00                	add    BYTE PTR [eax],al
    4947:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    494d:	56                   	push   esi
    494e:	01 00                	add    DWORD PTR [eax],eax
    4950:	00 12                	add    BYTE PTR [edx],dl
    4952:	a3 00 00 00 04       	mov    ds:0x4000000,eax
    4957:	34 2b                	xor    al,0x2b
    4959:	01 00                	add    DWORD PTR [eax],eax
    495b:	00 05 03 ec 61 00    	add    BYTE PTR ds:0x61ec03,al
    4961:	9f                   	lahf   
    4962:	12 34 01             	adc    dh,BYTE PTR [ecx+eax*1]
    4965:	00 00                	add    BYTE PTR [eax],al
    4967:	04 35                	add    al,0x35
    4969:	2b 01                	sub    eax,DWORD PTR [ecx]
    496b:	00 00                	add    BYTE PTR [eax],al
    496d:	05 03 f0 61 00       	add    eax,0x61f003
    4972:	9f                   	lahf   
    4973:	12 7b 00             	adc    bh,BYTE PTR [ebx+0x0]
    4976:	00 00                	add    BYTE PTR [eax],al
    4978:	04 36                	add    al,0x36
    497a:	2b 01                	sub    eax,DWORD PTR [ecx]
    497c:	00 00                	add    BYTE PTR [eax],al
    497e:	05 03 e8 61 00       	add    eax,0x61e803
    4983:	9f                   	lahf   
    4984:	12 7c 01 00          	adc    bh,BYTE PTR [ecx+eax*1+0x0]
    4988:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    498b:	48                   	dec    eax
    498c:	01 00                	add    DWORD PTR [eax],eax
    498e:	00 05 03 f8 61 00    	add    BYTE PTR ds:0x61f803,al
    4994:	9f                   	lahf   
    4995:	12 6e 00             	adc    ch,BYTE PTR [esi+0x0]
    4998:	00 00                	add    BYTE PTR [eax],al
    499a:	05 2f 0d 05 00       	add    eax,0x50d2f
    499f:	00 05 03 e4 61 00    	add    BYTE PTR ds:0x61e403,al
    49a5:	9f                   	lahf   
    49a6:	0a 04 3d 01 00 00 12 	or     al,BYTE PTR [edi*1+0x12000001]
    49ad:	91                   	xchg   ecx,eax
    49ae:	00 00                	add    BYTE PTR [eax],al
    49b0:	00 05 30 fa 00 00    	add    BYTE PTR ds:0xfa30,al
    49b6:	00 05 03 e0 61 00    	add    BYTE PTR ds:0x61e003,al
    49bc:	9f                   	lahf   
    49bd:	12 41 00             	adc    al,BYTE PTR [ecx+0x0]
    49c0:	00 00                	add    BYTE PTR [eax],al
    49c2:	06                   	push   es
    49c3:	53                   	push   ebx
    49c4:	35 05 00 00 05       	xor    eax,0x5000005
    49c9:	03 f4                	add    esi,esp
    49cb:	61                   	popa   
    49cc:	00 9f 0a 04 11 02    	add    BYTE PTR [edi+0x211040a],bl
    49d2:	00 00                	add    BYTE PTR [eax],al
    49d4:	12 15 0c 00 00 01    	adc    dl,BYTE PTR ds:0x100000c
    49da:	0c fa                	or     al,0xfa
    49dc:	00 00                	add    BYTE PTR [eax],al
    49de:	00 05 03 c8 60 00    	add    BYTE PTR ds:0x60c803,al
    49e4:	9f                   	lahf   
    49e5:	12 f6                	adc    dh,dh
    49e7:	0c 00                	or     al,0x0
    49e9:	00 01                	add    BYTE PTR [ecx],al
    49eb:	0d 48 01 00 00       	or     eax,0x148
    49f0:	05 03 20 62 00       	add    eax,0x622003
    49f5:	9f                   	lahf   
    49f6:	13 11                	adc    edx,DWORD PTR [ecx]
    49f8:	02 00                	add    al,BYTE PTR [eax]
    49fa:	00 6d 05             	add    BYTE PTR [ebp+0x5],ch
    49fd:	00 00                	add    BYTE PTR [eax],al
    49ff:	14 03                	adc    al,0x3
    4a01:	02 00                	add    al,BYTE PTR [eax]
    4a03:	00 01                	add    BYTE PTR [ecx],al
    4a05:	00 12                	add    BYTE PTR [edx],dl
    4a07:	1f                   	pop    ds
    4a08:	0c 00                	or     al,0x0
    4a0a:	00 01                	add    BYTE PTR [ecx],al
    4a0c:	0e                   	push   cs
    4a0d:	5d                   	pop    ebp
    4a0e:	05 00 00 05 03       	add    eax,0x3050000
    4a13:	cc                   	int3   
    4a14:	61                   	popa   
    4a15:	00 9f 12 30 0c 00    	add    BYTE PTR [edi+0xc3012],bl
    4a1b:	00 01                	add    BYTE PTR [ecx],al
    4a1d:	0f fa 00             	psubd  mm0,QWORD PTR [eax]
    4a20:	00 00                	add    BYTE PTR [eax],al
    4a22:	05 03 40 62 00       	add    eax,0x624003
    4a27:	9f                   	lahf   
    4a28:	12 8b 0c 00 00 01    	adc    cl,BYTE PTR [ebx+0x100000c]
    4a2e:	10 61 01             	adc    BYTE PTR [ecx+0x1],ah
    4a31:	00 00                	add    BYTE PTR [eax],al
    4a33:	05 03 60 62 00       	add    eax,0x626003
    4a38:	9f                   	lahf   
    4a39:	13 fa                	adc    edi,edx
    4a3b:	00 00                	add    BYTE PTR [eax],al
    4a3d:	00 b6 05 00 00 14    	add    BYTE PTR [esi+0x14000005],dh
    4a43:	03 02                	add    eax,DWORD PTR [edx]
    4a45:	00 00                	add    BYTE PTR [eax],al
    4a47:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
    4a4a:	02 00                	add    al,BYTE PTR [eax]
    4a4c:	00 0b                	add    BYTE PTR [ebx],cl
    4a4e:	00 12                	add    BYTE PTR [edx],dl
    4a50:	c6                   	(bad)  
    4a51:	0c 00                	or     al,0x0
    4a53:	00 01                	add    BYTE PTR [ecx],al
    4a55:	12 c7                	adc    al,bh
    4a57:	05 00 00 05 03       	add    eax,0x3050000
    4a5c:	e0 5e                	loopne 4abc <sysEnter_Vector-0x12b544>
    4a5e:	00 9f 0b a0 05 00    	add    BYTE PTR [edi+0x5a00b],bl
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 11                	sbb    DWORD PTR [ecx],edx
     2c1:	01 12                	add    DWORD PTR [edx],edx
     2c3:	06                   	push   es
     2c4:	40                   	inc    eax
     2c5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cb:	00 00                	add    BYTE PTR [eax],al
     2cd:	07                   	pop    es
     2ce:	05 00 03 08 3a       	add    eax,0x3a080300
     2d3:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2d8:	02 18                	add    bl,BYTE PTR [eax]
     2da:	00 00                	add    BYTE PTR [eax],al
     2dc:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2df:	03 08                	add    ecx,DWORD PTR [eax]
     2e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2e5:	49                   	dec    ecx
     2e6:	13 02                	adc    eax,DWORD PTR [edx]
     2e8:	18 00                	sbb    BYTE PTR [eax],al
     2ea:	00 09                	add    BYTE PTR [ecx],cl
     2ec:	34 00                	xor    al,0x0
     2ee:	03 0e                	add    ecx,DWORD PTR [esi]
     2f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f4:	49                   	dec    ecx
     2f5:	13 02                	adc    eax,DWORD PTR [edx]
     2f7:	18 00                	sbb    BYTE PTR [eax],al
     2f9:	00 0a                	add    BYTE PTR [edx],cl
     2fb:	01 01                	add    DWORD PTR [ecx],eax
     2fd:	49                   	dec    ecx
     2fe:	13 01                	adc    eax,DWORD PTR [ecx]
     300:	13 00                	adc    eax,DWORD PTR [eax]
     302:	00 0b                	add    BYTE PTR [ebx],cl
     304:	21 00                	and    DWORD PTR [eax],eax
     306:	49                   	dec    ecx
     307:	13 2f                	adc    ebp,DWORD PTR [edi]
     309:	0b 00                	or     eax,DWORD PTR [eax]
     30b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     30e:	01 3f                	add    DWORD PTR [edi],edi
     310:	19 03                	sbb    DWORD PTR [ebx],eax
     312:	0e                   	push   cs
     313:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     315:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     317:	11 01                	adc    DWORD PTR [ecx],eax
     319:	12 06                	adc    al,BYTE PTR [esi]
     31b:	40                   	inc    eax
     31c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	0d 34 00 03 0e       	or     eax,0xe030034
     329:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     32b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     32d:	49                   	dec    ecx
     32e:	13 3f                	adc    edi,DWORD PTR [edi]
     330:	19 02                	sbb    DWORD PTR [edx],eax
     332:	18 00                	sbb    BYTE PTR [eax],al
     334:	00 0e                	add    BYTE PTR [esi],cl
     336:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	00 01                	add    BYTE PTR [ecx],al
     33e:	11 01                	adc    DWORD PTR [ecx],eax
     340:	25 0e 13 0b 03       	and    eax,0x30b130e
     345:	0e                   	push   cs
     346:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     348:	11 01                	adc    DWORD PTR [ecx],eax
     34a:	12 06                	adc    al,BYTE PTR [esi]
     34c:	10 17                	adc    BYTE PTR [edi],dl
     34e:	00 00                	add    BYTE PTR [eax],al
     350:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     353:	0b 0b                	or     ecx,DWORD PTR [ebx]
     355:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     358:	0e                   	push   cs
     359:	00 00                	add    BYTE PTR [eax],al
     35b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     360:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     363:	08 00                	or     BYTE PTR [eax],al
     365:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     368:	00 03                	add    BYTE PTR [ebx],al
     36a:	0e                   	push   cs
     36b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36f:	49                   	dec    ecx
     370:	13 00                	adc    eax,DWORD PTR [eax]
     372:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     378:	49                   	dec    ecx
     379:	13 00                	adc    eax,DWORD PTR [eax]
     37b:	00 06                	add    BYTE PTR [esi],al
     37d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     380:	19 03                	sbb    DWORD PTR [ebx],eax
     382:	0e                   	push   cs
     383:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     385:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     387:	27                   	daa    
     388:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     38b:	11 01                	adc    DWORD PTR [ecx],eax
     38d:	12 06                	adc    al,BYTE PTR [esi]
     38f:	40                   	inc    eax
     390:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     396:	00 00                	add    BYTE PTR [eax],al
     398:	07                   	pop    es
     399:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     39e:	0b 3b                	or     edi,DWORD PTR [ebx]
     3a0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3a3:	02 18                	add    bl,BYTE PTR [eax]
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	08 0b                	or     BYTE PTR [ebx],cl
     3a9:	01 11                	add    DWORD PTR [ecx],edx
     3ab:	01 12                	add    DWORD PTR [edx],edx
     3ad:	06                   	push   es
     3ae:	00 00                	add    BYTE PTR [eax],al
     3b0:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     3b3:	03 08                	add    ecx,DWORD PTR [eax]
     3b5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b9:	49                   	dec    ecx
     3ba:	13 02                	adc    eax,DWORD PTR [edx]
     3bc:	18 00                	sbb    BYTE PTR [eax],al
     3be:	00 0a                	add    BYTE PTR [edx],cl
     3c0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3c3:	19 03                	sbb    DWORD PTR [ebx],eax
     3c5:	0e                   	push   cs
     3c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ca:	27                   	daa    
     3cb:	19 11                	sbb    DWORD PTR [ecx],edx
     3cd:	01 12                	add    DWORD PTR [edx],edx
     3cf:	06                   	push   es
     3d0:	40                   	inc    eax
     3d1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3d7:	00 00                	add    BYTE PTR [eax],al
     3d9:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	49                   	dec    ecx
     3e3:	13 02                	adc    eax,DWORD PTR [edx]
     3e5:	18 00                	sbb    BYTE PTR [eax],al
     3e7:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     3ea:	01 11                	add    DWORD PTR [ecx],edx
     3ec:	01 12                	add    DWORD PTR [edx],edx
     3ee:	06                   	push   es
     3ef:	01 13                	add    DWORD PTR [ebx],edx
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	0d 34 00 03 0e       	or     eax,0xe030034
     3f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fc:	49                   	dec    ecx
     3fd:	13 3f                	adc    edi,DWORD PTR [edi]
     3ff:	19 02                	sbb    DWORD PTR [edx],eax
     401:	18 00                	sbb    BYTE PTR [eax],al
     403:	00 00                	add    BYTE PTR [eax],al
     405:	01 11                	add    DWORD PTR [ecx],edx
     407:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40d:	0e                   	push   cs
     40e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     410:	11 01                	adc    DWORD PTR [ecx],eax
     412:	12 06                	adc    al,BYTE PTR [esi]
     414:	10 17                	adc    BYTE PTR [edi],dl
     416:	00 00                	add    BYTE PTR [eax],al
     418:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     41b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     420:	0e                   	push   cs
     421:	00 00                	add    BYTE PTR [eax],al
     423:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     426:	0b 0b                	or     ecx,DWORD PTR [ebx]
     428:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     42b:	08 00                	or     BYTE PTR [eax],al
     42d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     430:	00 03                	add    BYTE PTR [ebx],al
     432:	0e                   	push   cs
     433:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     435:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     437:	49                   	dec    ecx
     438:	13 00                	adc    eax,DWORD PTR [eax]
     43a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     440:	49                   	dec    ecx
     441:	13 00                	adc    eax,DWORD PTR [eax]
     443:	00 06                	add    BYTE PTR [esi],al
     445:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     449:	00 00                	add    BYTE PTR [eax],al
     44b:	07                   	pop    es
     44c:	04 01                	add    al,0x1
     44e:	03 0e                	add    ecx,DWORD PTR [esi]
     450:	0b 0b                	or     ecx,DWORD PTR [ebx]
     452:	49                   	dec    ecx
     453:	13 3a                	adc    edi,DWORD PTR [edx]
     455:	0b 3b                	or     edi,DWORD PTR [ebx]
     457:	0b 01                	or     eax,DWORD PTR [ecx]
     459:	13 00                	adc    eax,DWORD PTR [eax]
     45b:	00 08                	add    BYTE PTR [eax],cl
     45d:	28 00                	sub    BYTE PTR [eax],al
     45f:	03 0e                	add    ecx,DWORD PTR [esi]
     461:	1c 0b                	sbb    al,0xb
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 28                	or     DWORD PTR [eax],ebp
     467:	00 03                	add    BYTE PTR [ebx],al
     469:	0e                   	push   cs
     46a:	1c 05                	sbb    al,0x5
     46c:	00 00                	add    BYTE PTR [eax],al
     46e:	0a 0f                	or     cl,BYTE PTR [edi]
     470:	00 0b                	add    BYTE PTR [ebx],cl
     472:	0b 00                	or     eax,DWORD PTR [eax]
     474:	00 0b                	add    BYTE PTR [ebx],cl
     476:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     479:	19 03                	sbb    DWORD PTR [ebx],eax
     47b:	0e                   	push   cs
     47c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     47e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     480:	27                   	daa    
     481:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     484:	11 01                	adc    DWORD PTR [ecx],eax
     486:	12 06                	adc    al,BYTE PTR [esi]
     488:	40                   	inc    eax
     489:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     48f:	00 00                	add    BYTE PTR [eax],al
     491:	0c 05                	or     al,0x5
     493:	00 03                	add    BYTE PTR [ebx],al
     495:	0e                   	push   cs
     496:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     498:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     49a:	49                   	dec    ecx
     49b:	13 02                	adc    eax,DWORD PTR [edx]
     49d:	18 00                	sbb    BYTE PTR [eax],al
     49f:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     4a5:	03 0e                	add    ecx,DWORD PTR [esi]
     4a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4ab:	11 01                	adc    DWORD PTR [ecx],eax
     4ad:	12 06                	adc    al,BYTE PTR [esi]
     4af:	40                   	inc    eax
     4b0:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     4b6:	0e                   	push   cs
     4b7:	34 00                	xor    al,0x0
     4b9:	03 0e                	add    ecx,DWORD PTR [esi]
     4bb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4bd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4bf:	49                   	dec    ecx
     4c0:	13 02                	adc    eax,DWORD PTR [edx]
     4c2:	18 00                	sbb    BYTE PTR [eax],al
     4c4:	00 0f                	add    BYTE PTR [edi],cl
     4c6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c9:	19 03                	sbb    DWORD PTR [ebx],eax
     4cb:	0e                   	push   cs
     4cc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4d0:	27                   	daa    
     4d1:	19 11                	sbb    DWORD PTR [ecx],edx
     4d3:	01 12                	add    DWORD PTR [edx],edx
     4d5:	06                   	push   es
     4d6:	40                   	inc    eax
     4d7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4dd:	00 00                	add    BYTE PTR [eax],al
     4df:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4e2:	03 0e                	add    ecx,DWORD PTR [esi]
     4e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e8:	49                   	dec    ecx
     4e9:	13 3f                	adc    edi,DWORD PTR [edi]
     4eb:	19 02                	sbb    DWORD PTR [edx],eax
     4ed:	18 00                	sbb    BYTE PTR [eax],al
     4ef:	00 00                	add    BYTE PTR [eax],al
     4f1:	01 11                	add    DWORD PTR [ecx],edx
     4f3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     4f9:	0e                   	push   cs
     4fa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     4fc:	11 01                	adc    DWORD PTR [ecx],eax
     4fe:	12 06                	adc    al,BYTE PTR [esi]
     500:	10 17                	adc    BYTE PTR [edi],dl
     502:	00 00                	add    BYTE PTR [eax],al
     504:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     507:	0b 0b                	or     ecx,DWORD PTR [ebx]
     509:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     50c:	0e                   	push   cs
     50d:	00 00                	add    BYTE PTR [eax],al
     50f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     512:	0b 0b                	or     ecx,DWORD PTR [ebx]
     514:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     517:	08 00                	or     BYTE PTR [eax],al
     519:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     51c:	00 03                	add    BYTE PTR [ebx],al
     51e:	0e                   	push   cs
     51f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     521:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     523:	49                   	dec    ecx
     524:	13 00                	adc    eax,DWORD PTR [eax]
     526:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     52c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     52e:	49                   	dec    ecx
     52f:	13 3a                	adc    edi,DWORD PTR [edx]
     531:	0b 3b                	or     edi,DWORD PTR [ebx]
     533:	0b 01                	or     eax,DWORD PTR [ecx]
     535:	13 00                	adc    eax,DWORD PTR [eax]
     537:	00 06                	add    BYTE PTR [esi],al
     539:	28 00                	sub    BYTE PTR [eax],al
     53b:	03 0e                	add    ecx,DWORD PTR [esi]
     53d:	1c 0b                	sbb    al,0xb
     53f:	00 00                	add    BYTE PTR [eax],al
     541:	07                   	pop    es
     542:	28 00                	sub    BYTE PTR [eax],al
     544:	03 0e                	add    ecx,DWORD PTR [esi]
     546:	1c 05                	sbb    al,0x5
     548:	00 00                	add    BYTE PTR [eax],al
     54a:	08 0f                	or     BYTE PTR [edi],cl
     54c:	00 0b                	add    BYTE PTR [ebx],cl
     54e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     551:	00 00                	add    BYTE PTR [eax],al
     553:	09 2e                	or     DWORD PTR [esi],ebp
     555:	01 3f                	add    DWORD PTR [edi],edi
     557:	19 03                	sbb    DWORD PTR [ebx],eax
     559:	0e                   	push   cs
     55a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     55c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     55e:	27                   	daa    
     55f:	19 11                	sbb    DWORD PTR [ecx],edx
     561:	01 12                	add    DWORD PTR [edx],edx
     563:	06                   	push   es
     564:	40                   	inc    eax
     565:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     573:	0b 3b                	or     edi,DWORD PTR [ebx]
     575:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     578:	02 18                	add    bl,BYTE PTR [eax]
     57a:	00 00                	add    BYTE PTR [eax],al
     57c:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     582:	0b 3b                	or     edi,DWORD PTR [ebx]
     584:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     587:	02 18                	add    bl,BYTE PTR [eax]
     589:	00 00                	add    BYTE PTR [eax],al
     58b:	0c 34                	or     al,0x34
     58d:	00 03                	add    BYTE PTR [ebx],al
     58f:	0e                   	push   cs
     590:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     592:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     594:	49                   	dec    ecx
     595:	13 02                	adc    eax,DWORD PTR [edx]
     597:	18 00                	sbb    BYTE PTR [eax],al
     599:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     59f:	01 13                	add    DWORD PTR [ebx],edx
     5a1:	00 00                	add    BYTE PTR [eax],al
     5a3:	0e                   	push   cs
     5a4:	21 00                	and    DWORD PTR [eax],eax
     5a6:	49                   	dec    ecx
     5a7:	13 2f                	adc    ebp,DWORD PTR [edi]
     5a9:	0b 00                	or     eax,DWORD PTR [eax]
     5ab:	00 0f                	add    BYTE PTR [edi],cl
     5ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5b0:	19 03                	sbb    DWORD PTR [ebx],eax
     5b2:	0e                   	push   cs
     5b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5b7:	49                   	dec    ecx
     5b8:	13 11                	adc    edx,DWORD PTR [ecx]
     5ba:	01 12                	add    DWORD PTR [edx],edx
     5bc:	06                   	push   es
     5bd:	40                   	inc    eax
     5be:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5c4:	00 00                	add    BYTE PTR [eax],al
     5c6:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     5c9:	03 08                	add    ecx,DWORD PTR [eax]
     5cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5cf:	49                   	dec    ecx
     5d0:	13 02                	adc    eax,DWORD PTR [edx]
     5d2:	18 00                	sbb    BYTE PTR [eax],al
     5d4:	00 11                	add    BYTE PTR [ecx],dl
     5d6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5d9:	19 03                	sbb    DWORD PTR [ebx],eax
     5db:	0e                   	push   cs
     5dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e0:	27                   	daa    
     5e1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5e4:	11 01                	adc    DWORD PTR [ecx],eax
     5e6:	12 06                	adc    al,BYTE PTR [esi]
     5e8:	40                   	inc    eax
     5e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     5ef:	00 00                	add    BYTE PTR [eax],al
     5f1:	12 0a                	adc    cl,BYTE PTR [edx]
     5f3:	00 03                	add    BYTE PTR [ebx],al
     5f5:	0e                   	push   cs
     5f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5fa:	11 01                	adc    DWORD PTR [ecx],eax
     5fc:	00 00                	add    BYTE PTR [eax],al
     5fe:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     601:	03 0e                	add    ecx,DWORD PTR [esi]
     603:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     605:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     607:	49                   	dec    ecx
     608:	13 3f                	adc    edi,DWORD PTR [edi]
     60a:	19 02                	sbb    DWORD PTR [edx],eax
     60c:	18 00                	sbb    BYTE PTR [eax],al
     60e:	00 00                	add    BYTE PTR [eax],al
     610:	01 11                	add    DWORD PTR [ecx],edx
     612:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     618:	0e                   	push   cs
     619:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     61b:	11 01                	adc    DWORD PTR [ecx],eax
     61d:	12 06                	adc    al,BYTE PTR [esi]
     61f:	10 17                	adc    BYTE PTR [edi],dl
     621:	00 00                	add    BYTE PTR [eax],al
     623:	02 16                	add    dl,BYTE PTR [esi]
     625:	00 03                	add    BYTE PTR [ebx],al
     627:	0e                   	push   cs
     628:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     62a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     62c:	49                   	dec    ecx
     62d:	13 00                	adc    eax,DWORD PTR [eax]
     62f:	00 03                	add    BYTE PTR [ebx],al
     631:	0f 00 0b             	str    WORD PTR [ebx]
     634:	0b 03                	or     eax,DWORD PTR [ebx]
     636:	0e                   	push   cs
     637:	49                   	dec    ecx
     638:	13 00                	adc    eax,DWORD PTR [eax]
     63a:	00 04 24             	add    BYTE PTR [esp],al
     63d:	00 0b                	add    BYTE PTR [ebx],cl
     63f:	0b 3e                	or     edi,DWORD PTR [esi]
     641:	0b 03                	or     eax,DWORD PTR [ebx]
     643:	0e                   	push   cs
     644:	00 00                	add    BYTE PTR [eax],al
     646:	05 24 00 0b 0b       	add    eax,0xb0b0024
     64b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     64e:	08 00                	or     BYTE PTR [eax],al
     650:	00 06                	add    BYTE PTR [esi],al
     652:	0f 00 0b             	str    WORD PTR [ebx]
     655:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     658:	00 00                	add    BYTE PTR [eax],al
     65a:	07                   	pop    es
     65b:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     65f:	00 00                	add    BYTE PTR [eax],al
     661:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     664:	03 0e                	add    ecx,DWORD PTR [esi]
     666:	0b 0b                	or     ecx,DWORD PTR [ebx]
     668:	49                   	dec    ecx
     669:	13 3a                	adc    edi,DWORD PTR [edx]
     66b:	0b 3b                	or     edi,DWORD PTR [ebx]
     66d:	0b 01                	or     eax,DWORD PTR [ecx]
     66f:	13 00                	adc    eax,DWORD PTR [eax]
     671:	00 09                	add    BYTE PTR [ecx],cl
     673:	28 00                	sub    BYTE PTR [eax],al
     675:	03 0e                	add    ecx,DWORD PTR [esi]
     677:	1c 0b                	sbb    al,0xb
     679:	00 00                	add    BYTE PTR [eax],al
     67b:	0a 28                	or     ch,BYTE PTR [eax]
     67d:	00 03                	add    BYTE PTR [ebx],al
     67f:	0e                   	push   cs
     680:	1c 05                	sbb    al,0x5
     682:	00 00                	add    BYTE PTR [eax],al
     684:	0b 0f                	or     ecx,DWORD PTR [edi]
     686:	00 0b                	add    BYTE PTR [ebx],cl
     688:	0b 00                	or     eax,DWORD PTR [eax]
     68a:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     68d:	01 3f                	add    DWORD PTR [edi],edi
     68f:	19 03                	sbb    DWORD PTR [ebx],eax
     691:	0e                   	push   cs
     692:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     694:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     696:	27                   	daa    
     697:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     69a:	11 01                	adc    DWORD PTR [ecx],eax
     69c:	12 06                	adc    al,BYTE PTR [esi]
     69e:	40                   	inc    eax
     69f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     6a5:	00 00                	add    BYTE PTR [eax],al
     6a7:	0d 05 00 03 0e       	or     eax,0xe030005
     6ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6b0:	49                   	dec    ecx
     6b1:	13 02                	adc    eax,DWORD PTR [edx]
     6b3:	18 00                	sbb    BYTE PTR [eax],al
     6b5:	00 0e                	add    BYTE PTR [esi],cl
     6b7:	34 00                	xor    al,0x0
     6b9:	03 0e                	add    ecx,DWORD PTR [esi]
     6bb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6bd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6bf:	49                   	dec    ecx
     6c0:	13 02                	adc    eax,DWORD PTR [edx]
     6c2:	18 00                	sbb    BYTE PTR [eax],al
     6c4:	00 0f                	add    BYTE PTR [edi],cl
     6c6:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     6c9:	19 03                	sbb    DWORD PTR [ebx],eax
     6cb:	0e                   	push   cs
     6cc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6d0:	11 01                	adc    DWORD PTR [ecx],eax
     6d2:	12 06                	adc    al,BYTE PTR [esi]
     6d4:	40                   	inc    eax
     6d5:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6db:	10 2e                	adc    BYTE PTR [esi],ch
     6dd:	00 3f                	add    BYTE PTR [edi],bh
     6df:	19 03                	sbb    DWORD PTR [ebx],eax
     6e1:	0e                   	push   cs
     6e2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6e4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6e6:	27                   	daa    
     6e7:	19 11                	sbb    DWORD PTR [ecx],edx
     6e9:	01 12                	add    DWORD PTR [edx],edx
     6eb:	06                   	push   es
     6ec:	40                   	inc    eax
     6ed:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6f3:	11 2e                	adc    DWORD PTR [esi],ebp
     6f5:	01 3f                	add    DWORD PTR [edi],edi
     6f7:	19 03                	sbb    DWORD PTR [ebx],eax
     6f9:	0e                   	push   cs
     6fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6fe:	27                   	daa    
     6ff:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     702:	11 01                	adc    DWORD PTR [ecx],eax
     704:	12 06                	adc    al,BYTE PTR [esi]
     706:	40                   	inc    eax
     707:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     70d:	00 00                	add    BYTE PTR [eax],al
     70f:	12 18                	adc    bl,BYTE PTR [eax]
     711:	00 00                	add    BYTE PTR [eax],al
     713:	00 13                	add    BYTE PTR [ebx],dl
     715:	0b 01                	or     eax,DWORD PTR [ecx]
     717:	11 01                	adc    DWORD PTR [ecx],eax
     719:	12 06                	adc    al,BYTE PTR [esi]
     71b:	00 00                	add    BYTE PTR [eax],al
     71d:	14 34                	adc    al,0x34
     71f:	00 03                	add    BYTE PTR [ebx],al
     721:	08 3a                	or     BYTE PTR [edx],bh
     723:	0b 3b                	or     edi,DWORD PTR [ebx]
     725:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     728:	02 18                	add    bl,BYTE PTR [eax]
     72a:	00 00                	add    BYTE PTR [eax],al
     72c:	15 2e 01 3f 19       	adc    eax,0x193f012e
     731:	03 0e                	add    ecx,DWORD PTR [esi]
     733:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     735:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     737:	27                   	daa    
     738:	19 11                	sbb    DWORD PTR [ecx],edx
     73a:	01 12                	add    DWORD PTR [edx],edx
     73c:	06                   	push   es
     73d:	40                   	inc    eax
     73e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     744:	00 00                	add    BYTE PTR [eax],al
     746:	16                   	push   ss
     747:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     74a:	19 03                	sbb    DWORD PTR [ebx],eax
     74c:	0e                   	push   cs
     74d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     74f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     751:	49                   	dec    ecx
     752:	13 11                	adc    edx,DWORD PTR [ecx]
     754:	01 12                	add    DWORD PTR [edx],edx
     756:	06                   	push   es
     757:	40                   	inc    eax
     758:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	17                   	pop    ss
     761:	05 00 03 08 3a       	add    eax,0x3a080300
     766:	0b 3b                	or     edi,DWORD PTR [ebx]
     768:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     76b:	02 18                	add    bl,BYTE PTR [eax]
     76d:	00 00                	add    BYTE PTR [eax],al
     76f:	18 0b                	sbb    BYTE PTR [ebx],cl
     771:	01 11                	add    DWORD PTR [ecx],edx
     773:	01 12                	add    DWORD PTR [edx],edx
     775:	06                   	push   es
     776:	01 13                	add    DWORD PTR [ebx],edx
     778:	00 00                	add    BYTE PTR [eax],al
     77a:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     77d:	03 0e                	add    ecx,DWORD PTR [esi]
     77f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     781:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     787:	00 00                	add    BYTE PTR [eax],al
     789:	1a 2e                	sbb    ch,BYTE PTR [esi]
     78b:	01 3f                	add    DWORD PTR [edi],edi
     78d:	19 03                	sbb    DWORD PTR [ebx],eax
     78f:	0e                   	push   cs
     790:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     792:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     798:	11 01                	adc    DWORD PTR [ecx],eax
     79a:	12 06                	adc    al,BYTE PTR [esi]
     79c:	40                   	inc    eax
     79d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7a3:	00 00                	add    BYTE PTR [eax],al
     7a5:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     7ab:	0b 3b                	or     edi,DWORD PTR [ebx]
     7ad:	05 49 13 02 18       	add    eax,0x18021349
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	1c 34                	sbb    al,0x34
     7b6:	00 03                	add    BYTE PTR [ebx],al
     7b8:	08 3a                	or     BYTE PTR [edx],bh
     7ba:	0b 3b                	or     edi,DWORD PTR [ebx]
     7bc:	05 49 13 02 18       	add    eax,0x18021349
     7c1:	00 00                	add    BYTE PTR [eax],al
     7c3:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     7c8:	00 00                	add    BYTE PTR [eax],al
     7ca:	1e                   	push   ds
     7cb:	01 01                	add    DWORD PTR [ecx],eax
     7cd:	49                   	dec    ecx
     7ce:	13 01                	adc    eax,DWORD PTR [ecx]
     7d0:	13 00                	adc    eax,DWORD PTR [eax]
     7d2:	00 1f                	add    BYTE PTR [edi],bl
     7d4:	21 00                	and    DWORD PTR [eax],eax
     7d6:	49                   	dec    ecx
     7d7:	13 2f                	adc    ebp,DWORD PTR [edi]
     7d9:	05 00 00 20 21       	add    eax,0x21200000
     7de:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     7e1:	2f                   	das    
     7e2:	0b 00                	or     eax,DWORD PTR [eax]
     7e4:	00 21                	add    BYTE PTR [ecx],ah
     7e6:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     7e9:	19 03                	sbb    DWORD PTR [ebx],eax
     7eb:	0e                   	push   cs
     7ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ee:	3b 05 49 13 11 01    	cmp    eax,DWORD PTR ds:0x1111349
     7f4:	12 06                	adc    al,BYTE PTR [esi]
     7f6:	40                   	inc    eax
     7f7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7fd:	22 34 00             	and    dh,BYTE PTR [eax+eax*1]
     800:	03 0e                	add    ecx,DWORD PTR [esi]
     802:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     804:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     806:	49                   	dec    ecx
     807:	13 3f                	adc    edi,DWORD PTR [edi]
     809:	19 02                	sbb    DWORD PTR [edx],eax
     80b:	18 00                	sbb    BYTE PTR [eax],al
     80d:	00 00                	add    BYTE PTR [eax],al
     80f:	01 11                	add    DWORD PTR [ecx],edx
     811:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     817:	0e                   	push   cs
     818:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     81a:	11 01                	adc    DWORD PTR [ecx],eax
     81c:	12 06                	adc    al,BYTE PTR [esi]
     81e:	10 17                	adc    BYTE PTR [edi],dl
     820:	00 00                	add    BYTE PTR [eax],al
     822:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     825:	0b 0b                	or     ecx,DWORD PTR [ebx]
     827:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     82a:	0e                   	push   cs
     82b:	00 00                	add    BYTE PTR [eax],al
     82d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     830:	0b 0b                	or     ecx,DWORD PTR [ebx]
     832:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     835:	08 00                	or     BYTE PTR [eax],al
     837:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     83a:	00 03                	add    BYTE PTR [ebx],al
     83c:	0e                   	push   cs
     83d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     83f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     841:	49                   	dec    ecx
     842:	13 00                	adc    eax,DWORD PTR [eax]
     844:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     84a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     84c:	49                   	dec    ecx
     84d:	13 3a                	adc    edi,DWORD PTR [edx]
     84f:	0b 3b                	or     edi,DWORD PTR [ebx]
     851:	0b 01                	or     eax,DWORD PTR [ecx]
     853:	13 00                	adc    eax,DWORD PTR [eax]
     855:	00 06                	add    BYTE PTR [esi],al
     857:	28 00                	sub    BYTE PTR [eax],al
     859:	03 0e                	add    ecx,DWORD PTR [esi]
     85b:	1c 0b                	sbb    al,0xb
     85d:	00 00                	add    BYTE PTR [eax],al
     85f:	07                   	pop    es
     860:	28 00                	sub    BYTE PTR [eax],al
     862:	03 0e                	add    ecx,DWORD PTR [esi]
     864:	1c 05                	sbb    al,0x5
     866:	00 00                	add    BYTE PTR [eax],al
     868:	08 13                	or     BYTE PTR [ebx],dl
     86a:	01 03                	add    DWORD PTR [ebx],eax
     86c:	0e                   	push   cs
     86d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     86f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     871:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     873:	01 13                	add    DWORD PTR [ebx],edx
     875:	00 00                	add    BYTE PTR [eax],al
     877:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     87d:	0b 3b                	or     edi,DWORD PTR [ebx]
     87f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     882:	38 0b                	cmp    BYTE PTR [ebx],cl
     884:	00 00                	add    BYTE PTR [eax],al
     886:	0a 0d 00 03 08 3a    	or     cl,BYTE PTR ds:0x3a080300
     88c:	0b 3b                	or     edi,DWORD PTR [ebx]
     88e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     891:	38 0b                	cmp    BYTE PTR [ebx],cl
     893:	00 00                	add    BYTE PTR [eax],al
     895:	0b 0f                	or     ecx,DWORD PTR [edi]
     897:	00 0b                	add    BYTE PTR [ebx],cl
     899:	0b 00                	or     eax,DWORD PTR [eax]
     89b:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
     89e:	00 0b                	add    BYTE PTR [ebx],cl
     8a0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8a3:	00 00                	add    BYTE PTR [eax],al
     8a5:	0d 2e 01 3f 19       	or     eax,0x193f012e
     8aa:	03 0e                	add    ecx,DWORD PTR [esi]
     8ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b0:	27                   	daa    
     8b1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     8b4:	11 01                	adc    DWORD PTR [ecx],eax
     8b6:	12 06                	adc    al,BYTE PTR [esi]
     8b8:	40                   	inc    eax
     8b9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     8bf:	00 00                	add    BYTE PTR [eax],al
     8c1:	0e                   	push   cs
     8c2:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     8c7:	0b 3b                	or     edi,DWORD PTR [ebx]
     8c9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8cc:	02 18                	add    bl,BYTE PTR [eax]
     8ce:	00 00                	add    BYTE PTR [eax],al
     8d0:	0f 05                	syscall 
     8d2:	00 03                	add    BYTE PTR [ebx],al
     8d4:	08 3a                	or     BYTE PTR [edx],bh
     8d6:	0b 3b                	or     edi,DWORD PTR [ebx]
     8d8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8db:	02 18                	add    bl,BYTE PTR [eax]
     8dd:	00 00                	add    BYTE PTR [eax],al
     8df:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     8e2:	03 0e                	add    ecx,DWORD PTR [esi]
     8e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8e8:	49                   	dec    ecx
     8e9:	13 3f                	adc    edi,DWORD PTR [edi]
     8eb:	19 02                	sbb    DWORD PTR [edx],eax
     8ed:	18 00                	sbb    BYTE PTR [eax],al
     8ef:	00 00                	add    BYTE PTR [eax],al
     8f1:	01 11                	add    DWORD PTR [ecx],edx
     8f3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8f9:	0e                   	push   cs
     8fa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8fc:	11 01                	adc    DWORD PTR [ecx],eax
     8fe:	12 06                	adc    al,BYTE PTR [esi]
     900:	10 17                	adc    BYTE PTR [edi],dl
     902:	00 00                	add    BYTE PTR [eax],al
     904:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     907:	0b 0b                	or     ecx,DWORD PTR [ebx]
     909:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     90c:	0e                   	push   cs
     90d:	00 00                	add    BYTE PTR [eax],al
     90f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     912:	0b 0b                	or     ecx,DWORD PTR [ebx]
     914:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     917:	08 00                	or     BYTE PTR [eax],al
     919:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     91c:	00 03                	add    BYTE PTR [ebx],al
     91e:	0e                   	push   cs
     91f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     921:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     923:	49                   	dec    ecx
     924:	13 00                	adc    eax,DWORD PTR [eax]
     926:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     92c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     92e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     930:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     932:	01 13                	add    DWORD PTR [ebx],edx
     934:	00 00                	add    BYTE PTR [eax],al
     936:	06                   	push   es
     937:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     93c:	0b 3b                	or     edi,DWORD PTR [ebx]
     93e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     941:	38 0b                	cmp    BYTE PTR [ebx],cl
     943:	00 00                	add    BYTE PTR [eax],al
     945:	07                   	pop    es
     946:	0d 00 03 08 3a       	or     eax,0x3a080300
     94b:	0b 3b                	or     edi,DWORD PTR [ebx]
     94d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     950:	38 0b                	cmp    BYTE PTR [ebx],cl
     952:	00 00                	add    BYTE PTR [eax],al
     954:	08 0f                	or     BYTE PTR [edi],cl
     956:	00 0b                	add    BYTE PTR [ebx],cl
     958:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     95b:	00 00                	add    BYTE PTR [eax],al
     95d:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     960:	03 0e                	add    ecx,DWORD PTR [esi]
     962:	0b 0b                	or     ecx,DWORD PTR [ebx]
     964:	49                   	dec    ecx
     965:	13 3a                	adc    edi,DWORD PTR [edx]
     967:	0b 3b                	or     edi,DWORD PTR [ebx]
     969:	0b 01                	or     eax,DWORD PTR [ecx]
     96b:	13 00                	adc    eax,DWORD PTR [eax]
     96d:	00 0a                	add    BYTE PTR [edx],cl
     96f:	28 00                	sub    BYTE PTR [eax],al
     971:	03 0e                	add    ecx,DWORD PTR [esi]
     973:	1c 0b                	sbb    al,0xb
     975:	00 00                	add    BYTE PTR [eax],al
     977:	0b 28                	or     ebp,DWORD PTR [eax]
     979:	00 03                	add    BYTE PTR [ebx],al
     97b:	0e                   	push   cs
     97c:	1c 05                	sbb    al,0x5
     97e:	00 00                	add    BYTE PTR [eax],al
     980:	0c 0f                	or     al,0xf
     982:	00 0b                	add    BYTE PTR [ebx],cl
     984:	0b 00                	or     eax,DWORD PTR [eax]
     986:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     98c:	03 0e                	add    ecx,DWORD PTR [esi]
     98e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     990:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     992:	11 01                	adc    DWORD PTR [ecx],eax
     994:	12 06                	adc    al,BYTE PTR [esi]
     996:	40                   	inc    eax
     997:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     99d:	0e                   	push   cs
     99e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9a1:	19 03                	sbb    DWORD PTR [ebx],eax
     9a3:	0e                   	push   cs
     9a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9a8:	27                   	daa    
     9a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9ac:	11 01                	adc    DWORD PTR [ecx],eax
     9ae:	12 06                	adc    al,BYTE PTR [esi]
     9b0:	40                   	inc    eax
     9b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9b7:	00 00                	add    BYTE PTR [eax],al
     9b9:	0f 05                	syscall 
     9bb:	00 03                	add    BYTE PTR [ebx],al
     9bd:	0e                   	push   cs
     9be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9c2:	49                   	dec    ecx
     9c3:	13 02                	adc    eax,DWORD PTR [edx]
     9c5:	18 00                	sbb    BYTE PTR [eax],al
     9c7:	00 10                	add    BYTE PTR [eax],dl
     9c9:	34 00                	xor    al,0x0
     9cb:	03 0e                	add    ecx,DWORD PTR [esi]
     9cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d1:	49                   	dec    ecx
     9d2:	13 02                	adc    eax,DWORD PTR [edx]
     9d4:	18 00                	sbb    BYTE PTR [eax],al
     9d6:	00 11                	add    BYTE PTR [ecx],dl
     9d8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9db:	19 03                	sbb    DWORD PTR [ebx],eax
     9dd:	0e                   	push   cs
     9de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e2:	27                   	daa    
     9e3:	19 11                	sbb    DWORD PTR [ecx],edx
     9e5:	01 12                	add    DWORD PTR [edx],edx
     9e7:	06                   	push   es
     9e8:	40                   	inc    eax
     9e9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9ef:	00 00                	add    BYTE PTR [eax],al
     9f1:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     9f4:	03 08                	add    ecx,DWORD PTR [eax]
     9f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9fa:	49                   	dec    ecx
     9fb:	13 02                	adc    eax,DWORD PTR [edx]
     9fd:	18 00                	sbb    BYTE PTR [eax],al
     9ff:	00 13                	add    BYTE PTR [ebx],dl
     a01:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a04:	19 03                	sbb    DWORD PTR [ebx],eax
     a06:	0e                   	push   cs
     a07:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a09:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a0b:	27                   	daa    
     a0c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a0f:	11 01                	adc    DWORD PTR [ecx],eax
     a11:	12 06                	adc    al,BYTE PTR [esi]
     a13:	40                   	inc    eax
     a14:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a1a:	00 00                	add    BYTE PTR [eax],al
     a1c:	14 2e                	adc    al,0x2e
     a1e:	01 3f                	add    DWORD PTR [edi],edi
     a20:	19 03                	sbb    DWORD PTR [ebx],eax
     a22:	0e                   	push   cs
     a23:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a25:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a27:	27                   	daa    
     a28:	19 11                	sbb    DWORD PTR [ecx],edx
     a2a:	01 12                	add    DWORD PTR [edx],edx
     a2c:	06                   	push   es
     a2d:	40                   	inc    eax
     a2e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a34:	00 00                	add    BYTE PTR [eax],al
     a36:	15 34 00 03 0e       	adc    eax,0xe030034
     a3b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a3d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a3f:	49                   	dec    ecx
     a40:	13 3f                	adc    edi,DWORD PTR [edi]
     a42:	19 02                	sbb    DWORD PTR [edx],eax
     a44:	18 00                	sbb    BYTE PTR [eax],al
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	01 11                	add    DWORD PTR [ecx],edx
     a4a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a50:	0e                   	push   cs
     a51:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a53:	11 01                	adc    DWORD PTR [ecx],eax
     a55:	12 06                	adc    al,BYTE PTR [esi]
     a57:	10 17                	adc    BYTE PTR [edi],dl
     a59:	00 00                	add    BYTE PTR [eax],al
     a5b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a5e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a60:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a63:	0e                   	push   cs
     a64:	00 00                	add    BYTE PTR [eax],al
     a66:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a69:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a6b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a6e:	08 00                	or     BYTE PTR [eax],al
     a70:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     a73:	00 0b                	add    BYTE PTR [ebx],cl
     a75:	0b 00                	or     eax,DWORD PTR [eax]
     a77:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a7d:	49                   	dec    ecx
     a7e:	13 00                	adc    eax,DWORD PTR [eax]
     a80:	00 06                	add    BYTE PTR [esi],al
     a82:	16                   	push   ss
     a83:	00 03                	add    BYTE PTR [ebx],al
     a85:	0e                   	push   cs
     a86:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a88:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a8a:	49                   	dec    ecx
     a8b:	13 00                	adc    eax,DWORD PTR [eax]
     a8d:	00 07                	add    BYTE PTR [edi],al
     a8f:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     a93:	00 00                	add    BYTE PTR [eax],al
     a95:	08 2e                	or     BYTE PTR [esi],ch
     a97:	01 3f                	add    DWORD PTR [edi],edi
     a99:	19 03                	sbb    DWORD PTR [ebx],eax
     a9b:	0e                   	push   cs
     a9c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a9e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa0:	27                   	daa    
     aa1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     aa4:	11 01                	adc    DWORD PTR [ecx],eax
     aa6:	12 06                	adc    al,BYTE PTR [esi]
     aa8:	40                   	inc    eax
     aa9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     aaf:	00 00                	add    BYTE PTR [eax],al
     ab1:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     ab7:	0b 3b                	or     edi,DWORD PTR [ebx]
     ab9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     abc:	02 18                	add    bl,BYTE PTR [eax]
     abe:	00 00                	add    BYTE PTR [eax],al
     ac0:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     ac6:	0b 3b                	or     edi,DWORD PTR [ebx]
     ac8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     acb:	02 18                	add    bl,BYTE PTR [eax]
     acd:	00 00                	add    BYTE PTR [eax],al
     acf:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     ad2:	03 08                	add    ecx,DWORD PTR [eax]
     ad4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ad6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ad8:	49                   	dec    ecx
     ad9:	13 02                	adc    eax,DWORD PTR [edx]
     adb:	18 00                	sbb    BYTE PTR [eax],al
     add:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     ae0:	01 11                	add    DWORD PTR [ecx],edx
     ae2:	01 12                	add    DWORD PTR [edx],edx
     ae4:	06                   	push   es
     ae5:	01 13                	add    DWORD PTR [ebx],edx
     ae7:	00 00                	add    BYTE PTR [eax],al
     ae9:	0d 0b 01 11 01       	or     eax,0x111010b
     aee:	12 06                	adc    al,BYTE PTR [esi]
     af0:	00 00                	add    BYTE PTR [eax],al
     af2:	0e                   	push   cs
     af3:	26 00 00             	add    BYTE PTR es:[eax],al
     af6:	00 0f                	add    BYTE PTR [edi],cl
     af8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     afb:	19 03                	sbb    DWORD PTR [ebx],eax
     afd:	0e                   	push   cs
     afe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b00:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b02:	27                   	daa    
     b03:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b06:	11 01                	adc    DWORD PTR [ecx],eax
     b08:	12 06                	adc    al,BYTE PTR [esi]
     b0a:	40                   	inc    eax
     b0b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b11:	00 00                	add    BYTE PTR [eax],al
     b13:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     b16:	03 0e                	add    ecx,DWORD PTR [esi]
     b18:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b1a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b1c:	49                   	dec    ecx
     b1d:	13 3f                	adc    edi,DWORD PTR [edi]
     b1f:	19 02                	sbb    DWORD PTR [edx],eax
     b21:	18 00                	sbb    BYTE PTR [eax],al
     b23:	00 00                	add    BYTE PTR [eax],al
     b25:	01 11                	add    DWORD PTR [ecx],edx
     b27:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b2d:	0e                   	push   cs
     b2e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b30:	11 01                	adc    DWORD PTR [ecx],eax
     b32:	12 06                	adc    al,BYTE PTR [esi]
     b34:	10 17                	adc    BYTE PTR [edi],dl
     b36:	00 00                	add    BYTE PTR [eax],al
     b38:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b3b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b3d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b40:	0e                   	push   cs
     b41:	00 00                	add    BYTE PTR [eax],al
     b43:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b46:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b48:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b4b:	08 00                	or     BYTE PTR [eax],al
     b4d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b50:	00 03                	add    BYTE PTR [ebx],al
     b52:	0e                   	push   cs
     b53:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b55:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b57:	49                   	dec    ecx
     b58:	13 00                	adc    eax,DWORD PTR [eax]
     b5a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b60:	00 00                	add    BYTE PTR [eax],al
     b62:	06                   	push   es
     b63:	0f 00 0b             	str    WORD PTR [ebx]
     b66:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b69:	00 00                	add    BYTE PTR [eax],al
     b6b:	07                   	pop    es
     b6c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b6f:	19 03                	sbb    DWORD PTR [ebx],eax
     b71:	0e                   	push   cs
     b72:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b74:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b76:	27                   	daa    
     b77:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b7a:	11 01                	adc    DWORD PTR [ecx],eax
     b7c:	12 06                	adc    al,BYTE PTR [esi]
     b7e:	40                   	inc    eax
     b7f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b85:	00 00                	add    BYTE PTR [eax],al
     b87:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     b8d:	0b 3b                	or     edi,DWORD PTR [ebx]
     b8f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b92:	02 18                	add    bl,BYTE PTR [eax]
     b94:	00 00                	add    BYTE PTR [eax],al
     b96:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     b99:	03 08                	add    ecx,DWORD PTR [eax]
     b9b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b9f:	49                   	dec    ecx
     ba0:	13 02                	adc    eax,DWORD PTR [edx]
     ba2:	18 00                	sbb    BYTE PTR [eax],al
     ba4:	00 0a                	add    BYTE PTR [edx],cl
     ba6:	34 00                	xor    al,0x0
     ba8:	03 0e                	add    ecx,DWORD PTR [esi]
     baa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bae:	49                   	dec    ecx
     baf:	13 02                	adc    eax,DWORD PTR [edx]
     bb1:	18 00                	sbb    BYTE PTR [eax],al
     bb3:	00 0b                	add    BYTE PTR [ebx],cl
     bb5:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bb8:	19 03                	sbb    DWORD PTR [ebx],eax
     bba:	0e                   	push   cs
     bbb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bbd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bbf:	27                   	daa    
     bc0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bc3:	11 01                	adc    DWORD PTR [ecx],eax
     bc5:	12 06                	adc    al,BYTE PTR [esi]
     bc7:	40                   	inc    eax
     bc8:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bce:	00 00                	add    BYTE PTR [eax],al
     bd0:	0c 34                	or     al,0x34
     bd2:	00 03                	add    BYTE PTR [ebx],al
     bd4:	0e                   	push   cs
     bd5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bd7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bd9:	49                   	dec    ecx
     bda:	13 3f                	adc    edi,DWORD PTR [edi]
     bdc:	19 02                	sbb    DWORD PTR [edx],eax
     bde:	18 00                	sbb    BYTE PTR [eax],al
     be0:	00 00                	add    BYTE PTR [eax],al
     be2:	01 11                	add    DWORD PTR [ecx],edx
     be4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     bea:	0e                   	push   cs
     beb:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     bed:	11 01                	adc    DWORD PTR [ecx],eax
     bef:	12 06                	adc    al,BYTE PTR [esi]
     bf1:	10 17                	adc    BYTE PTR [edi],dl
     bf3:	00 00                	add    BYTE PTR [eax],al
     bf5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     bf8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bfa:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bfd:	0e                   	push   cs
     bfe:	00 00                	add    BYTE PTR [eax],al
     c00:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c03:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c05:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c08:	08 00                	or     BYTE PTR [eax],al
     c0a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c0d:	00 03                	add    BYTE PTR [ebx],al
     c0f:	0e                   	push   cs
     c10:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c12:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c14:	49                   	dec    ecx
     c15:	13 00                	adc    eax,DWORD PTR [eax]
     c17:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     c1d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c1f:	49                   	dec    ecx
     c20:	13 3a                	adc    edi,DWORD PTR [edx]
     c22:	0b 3b                	or     edi,DWORD PTR [ebx]
     c24:	0b 01                	or     eax,DWORD PTR [ecx]
     c26:	13 00                	adc    eax,DWORD PTR [eax]
     c28:	00 06                	add    BYTE PTR [esi],al
     c2a:	28 00                	sub    BYTE PTR [eax],al
     c2c:	03 0e                	add    ecx,DWORD PTR [esi]
     c2e:	1c 0b                	sbb    al,0xb
     c30:	00 00                	add    BYTE PTR [eax],al
     c32:	07                   	pop    es
     c33:	28 00                	sub    BYTE PTR [eax],al
     c35:	03 0e                	add    ecx,DWORD PTR [esi]
     c37:	1c 05                	sbb    al,0x5
     c39:	00 00                	add    BYTE PTR [eax],al
     c3b:	08 0f                	or     BYTE PTR [edi],cl
     c3d:	00 0b                	add    BYTE PTR [ebx],cl
     c3f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c42:	00 00                	add    BYTE PTR [eax],al
     c44:	09 2e                	or     DWORD PTR [esi],ebp
     c46:	01 3f                	add    DWORD PTR [edi],edi
     c48:	19 03                	sbb    DWORD PTR [ebx],eax
     c4a:	0e                   	push   cs
     c4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c4f:	27                   	daa    
     c50:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c53:	11 01                	adc    DWORD PTR [ecx],eax
     c55:	12 06                	adc    al,BYTE PTR [esi]
     c57:	40                   	inc    eax
     c58:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c5e:	00 00                	add    BYTE PTR [eax],al
     c60:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     c66:	0b 3b                	or     edi,DWORD PTR [ebx]
     c68:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c6b:	02 18                	add    bl,BYTE PTR [eax]
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c72:	03 0e                	add    ecx,DWORD PTR [esi]
     c74:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c76:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c78:	49                   	dec    ecx
     c79:	13 3f                	adc    edi,DWORD PTR [edi]
     c7b:	19 02                	sbb    DWORD PTR [edx],eax
     c7d:	18 00                	sbb    BYTE PTR [eax],al
     c7f:	00 00                	add    BYTE PTR [eax],al
     c81:	01 11                	add    DWORD PTR [ecx],edx
     c83:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c89:	0e                   	push   cs
     c8a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c8c:	11 01                	adc    DWORD PTR [ecx],eax
     c8e:	12 06                	adc    al,BYTE PTR [esi]
     c90:	10 17                	adc    BYTE PTR [edi],dl
     c92:	00 00                	add    BYTE PTR [eax],al
     c94:	02 16                	add    dl,BYTE PTR [esi]
     c96:	00 03                	add    BYTE PTR [ebx],al
     c98:	0e                   	push   cs
     c99:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c9b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c9d:	49                   	dec    ecx
     c9e:	13 00                	adc    eax,DWORD PTR [eax]
     ca0:	00 03                	add    BYTE PTR [ebx],al
     ca2:	0f 00 0b             	str    WORD PTR [ebx]
     ca5:	0b 03                	or     eax,DWORD PTR [ebx]
     ca7:	0e                   	push   cs
     ca8:	49                   	dec    ecx
     ca9:	13 00                	adc    eax,DWORD PTR [eax]
     cab:	00 04 24             	add    BYTE PTR [esp],al
     cae:	00 0b                	add    BYTE PTR [ebx],cl
     cb0:	0b 3e                	or     edi,DWORD PTR [esi]
     cb2:	0b 03                	or     eax,DWORD PTR [ebx]
     cb4:	0e                   	push   cs
     cb5:	00 00                	add    BYTE PTR [eax],al
     cb7:	05 24 00 0b 0b       	add    eax,0xb0b0024
     cbc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cbf:	08 00                	or     BYTE PTR [eax],al
     cc1:	00 06                	add    BYTE PTR [esi],al
     cc3:	0f 00 0b             	str    WORD PTR [ebx]
     cc6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cc9:	00 00                	add    BYTE PTR [eax],al
     ccb:	07                   	pop    es
     ccc:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     cd0:	00 00                	add    BYTE PTR [eax],al
     cd2:	08 2e                	or     BYTE PTR [esi],ch
     cd4:	01 03                	add    DWORD PTR [ebx],eax
     cd6:	0e                   	push   cs
     cd7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cd9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cdb:	27                   	daa    
     cdc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cdf:	11 01                	adc    DWORD PTR [ecx],eax
     ce1:	12 06                	adc    al,BYTE PTR [esi]
     ce3:	40                   	inc    eax
     ce4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     cea:	00 00                	add    BYTE PTR [eax],al
     cec:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     cf2:	0b 3b                	or     edi,DWORD PTR [ebx]
     cf4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cf7:	02 18                	add    bl,BYTE PTR [eax]
     cf9:	00 00                	add    BYTE PTR [eax],al
     cfb:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     cfe:	03 08                	add    ecx,DWORD PTR [eax]
     d00:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d02:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d04:	49                   	dec    ecx
     d05:	13 02                	adc    eax,DWORD PTR [edx]
     d07:	18 00                	sbb    BYTE PTR [eax],al
     d09:	00 0b                	add    BYTE PTR [ebx],cl
     d0b:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d10:	0b 3b                	or     edi,DWORD PTR [ebx]
     d12:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d15:	02 18                	add    bl,BYTE PTR [eax]
     d17:	00 00                	add    BYTE PTR [eax],al
     d19:	0c 34                	or     al,0x34
     d1b:	00 03                	add    BYTE PTR [ebx],al
     d1d:	0e                   	push   cs
     d1e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d20:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d22:	49                   	dec    ecx
     d23:	13 02                	adc    eax,DWORD PTR [edx]
     d25:	18 00                	sbb    BYTE PTR [eax],al
     d27:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     d2d:	12 06                	adc    al,BYTE PTR [esi]
     d2f:	00 00                	add    BYTE PTR [eax],al
     d31:	0e                   	push   cs
     d32:	01 01                	add    DWORD PTR [ecx],eax
     d34:	49                   	dec    ecx
     d35:	13 01                	adc    eax,DWORD PTR [ecx]
     d37:	13 00                	adc    eax,DWORD PTR [eax]
     d39:	00 0f                	add    BYTE PTR [edi],cl
     d3b:	21 00                	and    DWORD PTR [eax],eax
     d3d:	49                   	dec    ecx
     d3e:	13 2f                	adc    ebp,DWORD PTR [edi]
     d40:	0b 00                	or     eax,DWORD PTR [eax]
     d42:	00 10                	add    BYTE PTR [eax],dl
     d44:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d47:	19 03                	sbb    DWORD PTR [ebx],eax
     d49:	0e                   	push   cs
     d4a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d4c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d4e:	27                   	daa    
     d4f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d52:	11 01                	adc    DWORD PTR [ecx],eax
     d54:	12 06                	adc    al,BYTE PTR [esi]
     d56:	40                   	inc    eax
     d57:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d5d:	00 00                	add    BYTE PTR [eax],al
     d5f:	11 0a                	adc    DWORD PTR [edx],ecx
     d61:	00 03                	add    BYTE PTR [ebx],al
     d63:	0e                   	push   cs
     d64:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d66:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d68:	11 01                	adc    DWORD PTR [ecx],eax
     d6a:	00 00                	add    BYTE PTR [eax],al
     d6c:	12 0b                	adc    cl,BYTE PTR [ebx]
     d6e:	01 11                	add    DWORD PTR [ecx],edx
     d70:	01 12                	add    DWORD PTR [edx],edx
     d72:	06                   	push   es
     d73:	01 13                	add    DWORD PTR [ebx],edx
     d75:	00 00                	add    BYTE PTR [eax],al
     d77:	13 2e                	adc    ebp,DWORD PTR [esi]
     d79:	01 3f                	add    DWORD PTR [edi],edi
     d7b:	19 03                	sbb    DWORD PTR [ebx],eax
     d7d:	0e                   	push   cs
     d7e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d80:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     d86:	11 01                	adc    DWORD PTR [ecx],eax
     d88:	12 06                	adc    al,BYTE PTR [esi]
     d8a:	40                   	inc    eax
     d8b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d91:	00 00                	add    BYTE PTR [eax],al
     d93:	14 05                	adc    al,0x5
     d95:	00 03                	add    BYTE PTR [ebx],al
     d97:	08 3a                	or     BYTE PTR [edx],bh
     d99:	0b 3b                	or     edi,DWORD PTR [ebx]
     d9b:	05 49 13 02 18       	add    eax,0x18021349
     da0:	00 00                	add    BYTE PTR [eax],al
     da2:	15 18 00 00 00       	adc    eax,0x18
     da7:	16                   	push   ss
     da8:	34 00                	xor    al,0x0
     daa:	03 0e                	add    ecx,DWORD PTR [esi]
     dac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dae:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     db4:	00 00                	add    BYTE PTR [eax],al
     db6:	17                   	pop    ss
     db7:	34 00                	xor    al,0x0
     db9:	03 08                	add    ecx,DWORD PTR [eax]
     dbb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dbd:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     dc3:	00 00                	add    BYTE PTR [eax],al
     dc5:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     dc8:	03 0e                	add    ecx,DWORD PTR [esi]
     dca:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dcc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dce:	49                   	dec    ecx
     dcf:	13 3f                	adc    edi,DWORD PTR [edi]
     dd1:	19 02                	sbb    DWORD PTR [edx],eax
     dd3:	18 00                	sbb    BYTE PTR [eax],al
     dd5:	00 00                	add    BYTE PTR [eax],al
     dd7:	01 11                	add    DWORD PTR [ecx],edx
     dd9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ddf:	0e                   	push   cs
     de0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     de2:	11 01                	adc    DWORD PTR [ecx],eax
     de4:	12 06                	adc    al,BYTE PTR [esi]
     de6:	10 17                	adc    BYTE PTR [edi],dl
     de8:	00 00                	add    BYTE PTR [eax],al
     dea:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ded:	0b 0b                	or     ecx,DWORD PTR [ebx]
     def:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     df2:	0e                   	push   cs
     df3:	00 00                	add    BYTE PTR [eax],al
     df5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     df8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dfa:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dfd:	08 00                	or     BYTE PTR [eax],al
     dff:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     e02:	00 03                	add    BYTE PTR [ebx],al
     e04:	0e                   	push   cs
     e05:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e07:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e09:	49                   	dec    ecx
     e0a:	13 00                	adc    eax,DWORD PTR [eax]
     e0c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     e12:	49                   	dec    ecx
     e13:	13 00                	adc    eax,DWORD PTR [eax]
     e15:	00 06                	add    BYTE PTR [esi],al
     e17:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e1a:	19 03                	sbb    DWORD PTR [ebx],eax
     e1c:	0e                   	push   cs
     e1d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e1f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e21:	11 01                	adc    DWORD PTR [ecx],eax
     e23:	12 06                	adc    al,BYTE PTR [esi]
     e25:	40                   	inc    eax
     e26:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e2c:	00 00                	add    BYTE PTR [eax],al
     e2e:	07                   	pop    es
     e2f:	34 00                	xor    al,0x0
     e31:	03 0e                	add    ecx,DWORD PTR [esi]
     e33:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e35:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e37:	49                   	dec    ecx
     e38:	13 02                	adc    eax,DWORD PTR [edx]
     e3a:	18 00                	sbb    BYTE PTR [eax],al
     e3c:	00 08                	add    BYTE PTR [eax],cl
     e3e:	01 01                	add    DWORD PTR [ecx],eax
     e40:	49                   	dec    ecx
     e41:	13 01                	adc    eax,DWORD PTR [ecx]
     e43:	13 00                	adc    eax,DWORD PTR [eax]
     e45:	00 09                	add    BYTE PTR [ecx],cl
     e47:	21 00                	and    DWORD PTR [eax],eax
     e49:	49                   	dec    ecx
     e4a:	13 2f                	adc    ebp,DWORD PTR [edi]
     e4c:	0b 00                	or     eax,DWORD PTR [eax]
     e4e:	00 0a                	add    BYTE PTR [edx],cl
     e50:	34 00                	xor    al,0x0
     e52:	03 0e                	add    ecx,DWORD PTR [esi]
     e54:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e56:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e58:	49                   	dec    ecx
     e59:	13 3f                	adc    edi,DWORD PTR [edi]
     e5b:	19 02                	sbb    DWORD PTR [edx],eax
     e5d:	18 00                	sbb    BYTE PTR [eax],al
     e5f:	00 00                	add    BYTE PTR [eax],al
     e61:	01 11                	add    DWORD PTR [ecx],edx
     e63:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e69:	0e                   	push   cs
     e6a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e6c:	11 01                	adc    DWORD PTR [ecx],eax
     e6e:	12 06                	adc    al,BYTE PTR [esi]
     e70:	10 17                	adc    BYTE PTR [edi],dl
     e72:	00 00                	add    BYTE PTR [eax],al
     e74:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e77:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e79:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e7c:	0e                   	push   cs
     e7d:	00 00                	add    BYTE PTR [eax],al
     e7f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     e82:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e84:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e87:	08 00                	or     BYTE PTR [eax],al
     e89:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     e8c:	00 03                	add    BYTE PTR [ebx],al
     e8e:	0e                   	push   cs
     e8f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e91:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e93:	49                   	dec    ecx
     e94:	13 00                	adc    eax,DWORD PTR [eax]
     e96:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     e9c:	49                   	dec    ecx
     e9d:	13 00                	adc    eax,DWORD PTR [eax]
     e9f:	00 06                	add    BYTE PTR [esi],al
     ea1:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ea5:	00 00                	add    BYTE PTR [eax],al
     ea7:	07                   	pop    es
     ea8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     eab:	19 03                	sbb    DWORD PTR [ebx],eax
     ead:	0e                   	push   cs
     eae:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eb0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb2:	27                   	daa    
     eb3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     eb6:	11 01                	adc    DWORD PTR [ecx],eax
     eb8:	12 06                	adc    al,BYTE PTR [esi]
     eba:	40                   	inc    eax
     ebb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ec1:	00 00                	add    BYTE PTR [eax],al
     ec3:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     ec9:	0b 3b                	or     edi,DWORD PTR [ebx]
     ecb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ece:	02 18                	add    bl,BYTE PTR [eax]
     ed0:	00 00                	add    BYTE PTR [eax],al
     ed2:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     ed8:	0b 3b                	or     edi,DWORD PTR [ebx]
     eda:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     edd:	02 18                	add    bl,BYTE PTR [eax]
     edf:	00 00                	add    BYTE PTR [eax],al
     ee1:	0a 2e                	or     ch,BYTE PTR [esi]
     ee3:	01 3f                	add    DWORD PTR [edi],edi
     ee5:	19 03                	sbb    DWORD PTR [ebx],eax
     ee7:	0e                   	push   cs
     ee8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eec:	27                   	daa    
     eed:	19 11                	sbb    DWORD PTR [ecx],edx
     eef:	01 12                	add    DWORD PTR [edx],edx
     ef1:	06                   	push   es
     ef2:	40                   	inc    eax
     ef3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ef9:	00 00                	add    BYTE PTR [eax],al
     efb:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     efe:	03 08                	add    ecx,DWORD PTR [eax]
     f00:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f02:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f04:	49                   	dec    ecx
     f05:	13 02                	adc    eax,DWORD PTR [edx]
     f07:	18 00                	sbb    BYTE PTR [eax],al
     f09:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     f0c:	00 03                	add    BYTE PTR [ebx],al
     f0e:	0e                   	push   cs
     f0f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f11:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f13:	49                   	dec    ecx
     f14:	13 3f                	adc    edi,DWORD PTR [edi]
     f16:	19 02                	sbb    DWORD PTR [edx],eax
     f18:	18 00                	sbb    BYTE PTR [eax],al
     f1a:	00 00                	add    BYTE PTR [eax],al
     f1c:	01 11                	add    DWORD PTR [ecx],edx
     f1e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f24:	0e                   	push   cs
     f25:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f27:	11 01                	adc    DWORD PTR [ecx],eax
     f29:	12 06                	adc    al,BYTE PTR [esi]
     f2b:	10 17                	adc    BYTE PTR [edi],dl
     f2d:	00 00                	add    BYTE PTR [eax],al
     f2f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f32:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f34:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f37:	0e                   	push   cs
     f38:	00 00                	add    BYTE PTR [eax],al
     f3a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f3d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f3f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f42:	08 00                	or     BYTE PTR [eax],al
     f44:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f47:	00 03                	add    BYTE PTR [ebx],al
     f49:	0e                   	push   cs
     f4a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f4c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f4e:	49                   	dec    ecx
     f4f:	13 00                	adc    eax,DWORD PTR [eax]
     f51:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f57:	49                   	dec    ecx
     f58:	13 00                	adc    eax,DWORD PTR [eax]
     f5a:	00 06                	add    BYTE PTR [esi],al
     f5c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f60:	00 00                	add    BYTE PTR [eax],al
     f62:	07                   	pop    es
     f63:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f66:	19 03                	sbb    DWORD PTR [ebx],eax
     f68:	0e                   	push   cs
     f69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f6b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f6d:	27                   	daa    
     f6e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f71:	11 01                	adc    DWORD PTR [ecx],eax
     f73:	12 06                	adc    al,BYTE PTR [esi]
     f75:	40                   	inc    eax
     f76:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f7c:	00 00                	add    BYTE PTR [eax],al
     f7e:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     f84:	0b 3b                	or     edi,DWORD PTR [ebx]
     f86:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f89:	02 18                	add    bl,BYTE PTR [eax]
     f8b:	00 00                	add    BYTE PTR [eax],al
     f8d:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     f90:	03 08                	add    ecx,DWORD PTR [eax]
     f92:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f94:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f96:	49                   	dec    ecx
     f97:	13 02                	adc    eax,DWORD PTR [edx]
     f99:	18 00                	sbb    BYTE PTR [eax],al
     f9b:	00 0a                	add    BYTE PTR [edx],cl
     f9d:	34 00                	xor    al,0x0
     f9f:	03 0e                	add    ecx,DWORD PTR [esi]
     fa1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fa5:	49                   	dec    ecx
     fa6:	13 3f                	adc    edi,DWORD PTR [edi]
     fa8:	19 02                	sbb    DWORD PTR [edx],eax
     faa:	18 00                	sbb    BYTE PTR [eax],al
     fac:	00 00                	add    BYTE PTR [eax],al
     fae:	01 11                	add    DWORD PTR [ecx],edx
     fb0:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     fb6:	0e                   	push   cs
     fb7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fb9:	11 01                	adc    DWORD PTR [ecx],eax
     fbb:	12 06                	adc    al,BYTE PTR [esi]
     fbd:	10 17                	adc    BYTE PTR [edi],dl
     fbf:	00 00                	add    BYTE PTR [eax],al
     fc1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fc4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fc6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fc9:	0e                   	push   cs
     fca:	00 00                	add    BYTE PTR [eax],al
     fcc:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fcf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fd1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fd4:	08 00                	or     BYTE PTR [eax],al
     fd6:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     fd9:	00 03                	add    BYTE PTR [ebx],al
     fdb:	0e                   	push   cs
     fdc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fde:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fe0:	49                   	dec    ecx
     fe1:	13 00                	adc    eax,DWORD PTR [eax]
     fe3:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     fe9:	49                   	dec    ecx
     fea:	13 00                	adc    eax,DWORD PTR [eax]
     fec:	00 06                	add    BYTE PTR [esi],al
     fee:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ff2:	00 00                	add    BYTE PTR [eax],al
     ff4:	07                   	pop    es
     ff5:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ff8:	19 03                	sbb    DWORD PTR [ebx],eax
     ffa:	0e                   	push   cs
     ffb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ffd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fff:	27                   	daa    
    1000:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1003:	11 01                	adc    DWORD PTR [ecx],eax
    1005:	12 06                	adc    al,BYTE PTR [esi]
    1007:	40                   	inc    eax
    1008:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    100e:	00 00                	add    BYTE PTR [eax],al
    1010:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1016:	0b 3b                	or     edi,DWORD PTR [ebx]
    1018:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    101b:	02 18                	add    bl,BYTE PTR [eax]
    101d:	00 00                	add    BYTE PTR [eax],al
    101f:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1022:	03 08                	add    ecx,DWORD PTR [eax]
    1024:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1026:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1028:	49                   	dec    ecx
    1029:	13 02                	adc    eax,DWORD PTR [edx]
    102b:	18 00                	sbb    BYTE PTR [eax],al
    102d:	00 0a                	add    BYTE PTR [edx],cl
    102f:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1034:	0b 3b                	or     edi,DWORD PTR [ebx]
    1036:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1039:	02 18                	add    bl,BYTE PTR [eax]
    103b:	00 00                	add    BYTE PTR [eax],al
    103d:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    1040:	03 0e                	add    ecx,DWORD PTR [esi]
    1042:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1044:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1046:	49                   	dec    ecx
    1047:	13 3f                	adc    edi,DWORD PTR [edi]
    1049:	19 02                	sbb    DWORD PTR [edx],eax
    104b:	18 00                	sbb    BYTE PTR [eax],al
    104d:	00 00                	add    BYTE PTR [eax],al
    104f:	01 11                	add    DWORD PTR [ecx],edx
    1051:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1057:	0e                   	push   cs
    1058:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    105a:	11 01                	adc    DWORD PTR [ecx],eax
    105c:	12 06                	adc    al,BYTE PTR [esi]
    105e:	10 17                	adc    BYTE PTR [edi],dl
    1060:	00 00                	add    BYTE PTR [eax],al
    1062:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1065:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1067:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    106a:	0e                   	push   cs
    106b:	00 00                	add    BYTE PTR [eax],al
    106d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1070:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1072:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1075:	08 00                	or     BYTE PTR [eax],al
    1077:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    107a:	00 03                	add    BYTE PTR [ebx],al
    107c:	0e                   	push   cs
    107d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    107f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1081:	49                   	dec    ecx
    1082:	13 00                	adc    eax,DWORD PTR [eax]
    1084:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    108a:	49                   	dec    ecx
    108b:	13 00                	adc    eax,DWORD PTR [eax]
    108d:	00 06                	add    BYTE PTR [esi],al
    108f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1092:	19 03                	sbb    DWORD PTR [ebx],eax
    1094:	0e                   	push   cs
    1095:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1097:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1099:	27                   	daa    
    109a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    109d:	11 01                	adc    DWORD PTR [ecx],eax
    109f:	12 06                	adc    al,BYTE PTR [esi]
    10a1:	40                   	inc    eax
    10a2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10a8:	00 00                	add    BYTE PTR [eax],al
    10aa:	07                   	pop    es
    10ab:	05 00 03 08 3a       	add    eax,0x3a080300
    10b0:	0b 3b                	or     edi,DWORD PTR [ebx]
    10b2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10b5:	02 18                	add    bl,BYTE PTR [eax]
    10b7:	00 00                	add    BYTE PTR [eax],al
    10b9:	08 2e                	or     BYTE PTR [esi],ch
    10bb:	01 3f                	add    DWORD PTR [edi],edi
    10bd:	19 03                	sbb    DWORD PTR [ebx],eax
    10bf:	0e                   	push   cs
    10c0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10c4:	27                   	daa    
    10c5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10c8:	11 01                	adc    DWORD PTR [ecx],eax
    10ca:	12 06                	adc    al,BYTE PTR [esi]
    10cc:	40                   	inc    eax
    10cd:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    10d3:	00 00                	add    BYTE PTR [eax],al
    10d5:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    10d8:	03 08                	add    ecx,DWORD PTR [eax]
    10da:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10dc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10de:	49                   	dec    ecx
    10df:	13 02                	adc    eax,DWORD PTR [edx]
    10e1:	18 00                	sbb    BYTE PTR [eax],al
    10e3:	00 0a                	add    BYTE PTR [edx],cl
    10e5:	34 00                	xor    al,0x0
    10e7:	03 0e                	add    ecx,DWORD PTR [esi]
    10e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10ed:	49                   	dec    ecx
    10ee:	13 3f                	adc    edi,DWORD PTR [edi]
    10f0:	19 02                	sbb    DWORD PTR [edx],eax
    10f2:	18 00                	sbb    BYTE PTR [eax],al
    10f4:	00 00                	add    BYTE PTR [eax],al
    10f6:	01 11                	add    DWORD PTR [ecx],edx
    10f8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10fe:	0e                   	push   cs
    10ff:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1101:	11 01                	adc    DWORD PTR [ecx],eax
    1103:	12 06                	adc    al,BYTE PTR [esi]
    1105:	10 17                	adc    BYTE PTR [edi],dl
    1107:	00 00                	add    BYTE PTR [eax],al
    1109:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    110c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    110e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1111:	0e                   	push   cs
    1112:	00 00                	add    BYTE PTR [eax],al
    1114:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1117:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1119:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    111c:	08 00                	or     BYTE PTR [eax],al
    111e:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1121:	00 03                	add    BYTE PTR [ebx],al
    1123:	0e                   	push   cs
    1124:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1126:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1128:	49                   	dec    ecx
    1129:	13 00                	adc    eax,DWORD PTR [eax]
    112b:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1131:	49                   	dec    ecx
    1132:	13 00                	adc    eax,DWORD PTR [eax]
    1134:	00 06                	add    BYTE PTR [esi],al
    1136:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    113a:	00 00                	add    BYTE PTR [eax],al
    113c:	07                   	pop    es
    113d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1140:	19 03                	sbb    DWORD PTR [ebx],eax
    1142:	0e                   	push   cs
    1143:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1145:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1147:	27                   	daa    
    1148:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    114b:	11 01                	adc    DWORD PTR [ecx],eax
    114d:	12 06                	adc    al,BYTE PTR [esi]
    114f:	40                   	inc    eax
    1150:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1156:	00 00                	add    BYTE PTR [eax],al
    1158:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    115e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1160:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1163:	02 18                	add    bl,BYTE PTR [eax]
    1165:	00 00                	add    BYTE PTR [eax],al
    1167:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    116a:	03 08                	add    ecx,DWORD PTR [eax]
    116c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    116e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1170:	49                   	dec    ecx
    1171:	13 02                	adc    eax,DWORD PTR [edx]
    1173:	18 00                	sbb    BYTE PTR [eax],al
    1175:	00 0a                	add    BYTE PTR [edx],cl
    1177:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    117a:	19 03                	sbb    DWORD PTR [ebx],eax
    117c:	0e                   	push   cs
    117d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    117f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1181:	27                   	daa    
    1182:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1185:	11 01                	adc    DWORD PTR [ecx],eax
    1187:	12 06                	adc    al,BYTE PTR [esi]
    1189:	40                   	inc    eax
    118a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1190:	00 00                	add    BYTE PTR [eax],al
    1192:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    1198:	0b 3b                	or     edi,DWORD PTR [ebx]
    119a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    119d:	02 18                	add    bl,BYTE PTR [eax]
    119f:	00 00                	add    BYTE PTR [eax],al
    11a1:	0c 34                	or     al,0x34
    11a3:	00 03                	add    BYTE PTR [ebx],al
    11a5:	0e                   	push   cs
    11a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11aa:	49                   	dec    ecx
    11ab:	13 3f                	adc    edi,DWORD PTR [edi]
    11ad:	19 02                	sbb    DWORD PTR [edx],eax
    11af:	18 00                	sbb    BYTE PTR [eax],al
    11b1:	00 00                	add    BYTE PTR [eax],al
    11b3:	01 11                	add    DWORD PTR [ecx],edx
    11b5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11bb:	0e                   	push   cs
    11bc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11be:	11 01                	adc    DWORD PTR [ecx],eax
    11c0:	12 06                	adc    al,BYTE PTR [esi]
    11c2:	10 17                	adc    BYTE PTR [edi],dl
    11c4:	00 00                	add    BYTE PTR [eax],al
    11c6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11c9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11cb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11ce:	08 00                	or     BYTE PTR [eax],al
    11d0:	00 03                	add    BYTE PTR [ebx],al
    11d2:	16                   	push   ss
    11d3:	00 03                	add    BYTE PTR [ebx],al
    11d5:	0e                   	push   cs
    11d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11da:	49                   	dec    ecx
    11db:	13 00                	adc    eax,DWORD PTR [eax]
    11dd:	00 04 24             	add    BYTE PTR [esp],al
    11e0:	00 0b                	add    BYTE PTR [ebx],cl
    11e2:	0b 3e                	or     edi,DWORD PTR [esi]
    11e4:	0b 03                	or     eax,DWORD PTR [ebx]
    11e6:	0e                   	push   cs
    11e7:	00 00                	add    BYTE PTR [eax],al
    11e9:	05 2e 01 3f 19       	add    eax,0x193f012e
    11ee:	03 0e                	add    ecx,DWORD PTR [esi]
    11f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f4:	27                   	daa    
    11f5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11f8:	11 01                	adc    DWORD PTR [ecx],eax
    11fa:	12 06                	adc    al,BYTE PTR [esi]
    11fc:	40                   	inc    eax
    11fd:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1203:	00 00                	add    BYTE PTR [eax],al
    1205:	06                   	push   es
    1206:	05 00 03 08 3a       	add    eax,0x3a080300
    120b:	0b 3b                	or     edi,DWORD PTR [ebx]
    120d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1210:	02 18                	add    bl,BYTE PTR [eax]
    1212:	00 00                	add    BYTE PTR [eax],al
    1214:	07                   	pop    es
    1215:	0f 00 0b             	str    WORD PTR [ebx]
    1218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    121b:	00 00                	add    BYTE PTR [eax],al
    121d:	08 26                	or     BYTE PTR [esi],ah
    121f:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1222:	00 00                	add    BYTE PTR [eax],al
    1224:	09 2e                	or     DWORD PTR [esi],ebp
    1226:	01 3f                	add    DWORD PTR [edi],edi
    1228:	19 03                	sbb    DWORD PTR [ebx],eax
    122a:	0e                   	push   cs
    122b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    122d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    122f:	27                   	daa    
    1230:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1233:	11 01                	adc    DWORD PTR [ecx],eax
    1235:	12 06                	adc    al,BYTE PTR [esi]
    1237:	40                   	inc    eax
    1238:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    123e:	00 01                	add    BYTE PTR [ecx],al
    1240:	11 01                	adc    DWORD PTR [ecx],eax
    1242:	25 0e 13 0b 03       	and    eax,0x30b130e
    1247:	0e                   	push   cs
    1248:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    124a:	11 01                	adc    DWORD PTR [ecx],eax
    124c:	12 06                	adc    al,BYTE PTR [esi]
    124e:	10 17                	adc    BYTE PTR [edi],dl
    1250:	00 00                	add    BYTE PTR [eax],al
    1252:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1255:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1257:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    125a:	08 00                	or     BYTE PTR [eax],al
    125c:	00 03                	add    BYTE PTR [ebx],al
    125e:	16                   	push   ss
    125f:	00 03                	add    BYTE PTR [ebx],al
    1261:	0e                   	push   cs
    1262:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1264:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1266:	49                   	dec    ecx
    1267:	13 00                	adc    eax,DWORD PTR [eax]
    1269:	00 04 24             	add    BYTE PTR [esp],al
    126c:	00 0b                	add    BYTE PTR [ebx],cl
    126e:	0b 3e                	or     edi,DWORD PTR [esi]
    1270:	0b 03                	or     eax,DWORD PTR [ebx]
    1272:	0e                   	push   cs
    1273:	00 00                	add    BYTE PTR [eax],al
    1275:	05 2e 01 3f 19       	add    eax,0x193f012e
    127a:	03 0e                	add    ecx,DWORD PTR [esi]
    127c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    127e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1280:	27                   	daa    
    1281:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1284:	11 01                	adc    DWORD PTR [ecx],eax
    1286:	12 06                	adc    al,BYTE PTR [esi]
    1288:	40                   	inc    eax
    1289:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    128f:	00 00                	add    BYTE PTR [eax],al
    1291:	06                   	push   es
    1292:	05 00 03 08 3a       	add    eax,0x3a080300
    1297:	0b 3b                	or     edi,DWORD PTR [ebx]
    1299:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    129c:	02 18                	add    bl,BYTE PTR [eax]
    129e:	00 00                	add    BYTE PTR [eax],al
    12a0:	07                   	pop    es
    12a1:	34 00                	xor    al,0x0
    12a3:	03 08                	add    ecx,DWORD PTR [eax]
    12a5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12a7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12a9:	49                   	dec    ecx
    12aa:	13 02                	adc    eax,DWORD PTR [edx]
    12ac:	18 00                	sbb    BYTE PTR [eax],al
    12ae:	00 08                	add    BYTE PTR [eax],cl
    12b0:	0f 00 0b             	str    WORD PTR [ebx]
    12b3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12b6:	00 00                	add    BYTE PTR [eax],al
    12b8:	09 26                	or     DWORD PTR [esi],esp
    12ba:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12bd:	00 00                	add    BYTE PTR [eax],al
    12bf:	0a 2e                	or     ch,BYTE PTR [esi]
    12c1:	01 3f                	add    DWORD PTR [edi],edi
    12c3:	19 03                	sbb    DWORD PTR [ebx],eax
    12c5:	0e                   	push   cs
    12c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ca:	27                   	daa    
    12cb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12ce:	11 01                	adc    DWORD PTR [ecx],eax
    12d0:	12 06                	adc    al,BYTE PTR [esi]
    12d2:	40                   	inc    eax
    12d3:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    12d9:	00 01                	add    BYTE PTR [ecx],al
    12db:	11 01                	adc    DWORD PTR [ecx],eax
    12dd:	25 0e 13 0b 03       	and    eax,0x30b130e
    12e2:	0e                   	push   cs
    12e3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12e5:	11 01                	adc    DWORD PTR [ecx],eax
    12e7:	12 06                	adc    al,BYTE PTR [esi]
    12e9:	10 17                	adc    BYTE PTR [edi],dl
    12eb:	00 00                	add    BYTE PTR [eax],al
    12ed:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12f0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12f2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12f5:	0e                   	push   cs
    12f6:	00 00                	add    BYTE PTR [eax],al
    12f8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    12fb:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12fd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1300:	08 00                	or     BYTE PTR [eax],al
    1302:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1305:	00 03                	add    BYTE PTR [ebx],al
    1307:	0e                   	push   cs
    1308:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    130a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    130c:	49                   	dec    ecx
    130d:	13 00                	adc    eax,DWORD PTR [eax]
    130f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1315:	49                   	dec    ecx
    1316:	13 00                	adc    eax,DWORD PTR [eax]
    1318:	00 06                	add    BYTE PTR [esi],al
    131a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    131e:	00 00                	add    BYTE PTR [eax],al
    1320:	07                   	pop    es
    1321:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1324:	19 03                	sbb    DWORD PTR [ebx],eax
    1326:	0e                   	push   cs
    1327:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1329:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    132b:	27                   	daa    
    132c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    132f:	11 01                	adc    DWORD PTR [ecx],eax
    1331:	12 06                	adc    al,BYTE PTR [esi]
    1333:	40                   	inc    eax
    1334:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    133a:	00 00                	add    BYTE PTR [eax],al
    133c:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1342:	0b 3b                	or     edi,DWORD PTR [ebx]
    1344:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1347:	02 18                	add    bl,BYTE PTR [eax]
    1349:	00 00                	add    BYTE PTR [eax],al
    134b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    134e:	03 08                	add    ecx,DWORD PTR [eax]
    1350:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1352:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1354:	49                   	dec    ecx
    1355:	13 02                	adc    eax,DWORD PTR [edx]
    1357:	18 00                	sbb    BYTE PTR [eax],al
    1359:	00 0a                	add    BYTE PTR [edx],cl
    135b:	34 00                	xor    al,0x0
    135d:	03 0e                	add    ecx,DWORD PTR [esi]
    135f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1361:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1363:	49                   	dec    ecx
    1364:	13 00                	adc    eax,DWORD PTR [eax]
    1366:	00 0b                	add    BYTE PTR [ebx],cl
    1368:	34 00                	xor    al,0x0
    136a:	03 08                	add    ecx,DWORD PTR [eax]
    136c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    136e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1370:	49                   	dec    ecx
    1371:	13 00                	adc    eax,DWORD PTR [eax]
    1373:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1376:	00 03                	add    BYTE PTR [ebx],al
    1378:	0e                   	push   cs
    1379:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    137b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    137d:	49                   	dec    ecx
    137e:	13 02                	adc    eax,DWORD PTR [edx]
    1380:	18 00                	sbb    BYTE PTR [eax],al
    1382:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1388:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    138a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    138c:	49                   	dec    ecx
    138d:	13 3f                	adc    edi,DWORD PTR [edi]
    138f:	19 02                	sbb    DWORD PTR [edx],eax
    1391:	18 00                	sbb    BYTE PTR [eax],al
    1393:	00 00                	add    BYTE PTR [eax],al
    1395:	01 11                	add    DWORD PTR [ecx],edx
    1397:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    139d:	0e                   	push   cs
    139e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13a0:	11 01                	adc    DWORD PTR [ecx],eax
    13a2:	12 06                	adc    al,BYTE PTR [esi]
    13a4:	10 17                	adc    BYTE PTR [edi],dl
    13a6:	00 00                	add    BYTE PTR [eax],al
    13a8:	02 2e                	add    ch,BYTE PTR [esi]
    13aa:	01 3f                	add    DWORD PTR [edi],edi
    13ac:	19 03                	sbb    DWORD PTR [ebx],eax
    13ae:	0e                   	push   cs
    13af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b3:	27                   	daa    
    13b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13b7:	11 01                	adc    DWORD PTR [ecx],eax
    13b9:	12 06                	adc    al,BYTE PTR [esi]
    13bb:	40                   	inc    eax
    13bc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13c2:	00 00                	add    BYTE PTR [eax],al
    13c4:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    13ca:	0b 3b                	or     edi,DWORD PTR [ebx]
    13cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13cf:	02 18                	add    bl,BYTE PTR [eax]
    13d1:	00 00                	add    BYTE PTR [eax],al
    13d3:	04 0f                	add    al,0xf
    13d5:	00 0b                	add    BYTE PTR [ebx],cl
    13d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13da:	00 00                	add    BYTE PTR [eax],al
    13dc:	05 24 00 0b 0b       	add    eax,0xb0b0024
    13e1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13e4:	0e                   	push   cs
    13e5:	00 00                	add    BYTE PTR [eax],al
    13e7:	06                   	push   es
    13e8:	24 00                	and    al,0x0
    13ea:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13ec:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13ef:	08 00                	or     BYTE PTR [eax],al
    13f1:	00 00                	add    BYTE PTR [eax],al
    13f3:	01 11                	add    DWORD PTR [ecx],edx
    13f5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    13fb:	0e                   	push   cs
    13fc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13fe:	11 01                	adc    DWORD PTR [ecx],eax
    1400:	12 06                	adc    al,BYTE PTR [esi]
    1402:	10 17                	adc    BYTE PTR [edi],dl
    1404:	00 00                	add    BYTE PTR [eax],al
    1406:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1409:	0b 0b                	or     ecx,DWORD PTR [ebx]
    140b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    140e:	0e                   	push   cs
    140f:	00 00                	add    BYTE PTR [eax],al
    1411:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1414:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1416:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1419:	08 00                	or     BYTE PTR [eax],al
    141b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    141e:	00 03                	add    BYTE PTR [ebx],al
    1420:	0e                   	push   cs
    1421:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1423:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1425:	49                   	dec    ecx
    1426:	13 00                	adc    eax,DWORD PTR [eax]
    1428:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    142e:	49                   	dec    ecx
    142f:	13 00                	adc    eax,DWORD PTR [eax]
    1431:	00 06                	add    BYTE PTR [esi],al
    1433:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1437:	00 00                	add    BYTE PTR [eax],al
    1439:	07                   	pop    es
    143a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    143d:	19 03                	sbb    DWORD PTR [ebx],eax
    143f:	0e                   	push   cs
    1440:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1442:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1444:	27                   	daa    
    1445:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1448:	11 01                	adc    DWORD PTR [ecx],eax
    144a:	12 06                	adc    al,BYTE PTR [esi]
    144c:	40                   	inc    eax
    144d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1453:	00 00                	add    BYTE PTR [eax],al
    1455:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    145b:	0b 3b                	or     edi,DWORD PTR [ebx]
    145d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1460:	02 18                	add    bl,BYTE PTR [eax]
    1462:	00 00                	add    BYTE PTR [eax],al
    1464:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1467:	03 08                	add    ecx,DWORD PTR [eax]
    1469:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    146b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    146d:	49                   	dec    ecx
    146e:	13 02                	adc    eax,DWORD PTR [edx]
    1470:	18 00                	sbb    BYTE PTR [eax],al
    1472:	00 0a                	add    BYTE PTR [edx],cl
    1474:	34 00                	xor    al,0x0
    1476:	03 0e                	add    ecx,DWORD PTR [esi]
    1478:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    147a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    147c:	49                   	dec    ecx
    147d:	13 00                	adc    eax,DWORD PTR [eax]
    147f:	00 0b                	add    BYTE PTR [ebx],cl
    1481:	34 00                	xor    al,0x0
    1483:	03 08                	add    ecx,DWORD PTR [eax]
    1485:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1487:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1489:	49                   	dec    ecx
    148a:	13 00                	adc    eax,DWORD PTR [eax]
    148c:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    148f:	00 03                	add    BYTE PTR [ebx],al
    1491:	0e                   	push   cs
    1492:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1494:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1496:	49                   	dec    ecx
    1497:	13 3f                	adc    edi,DWORD PTR [edi]
    1499:	19 02                	sbb    DWORD PTR [edx],eax
    149b:	18 00                	sbb    BYTE PTR [eax],al
    149d:	00 00                	add    BYTE PTR [eax],al
    149f:	01 11                	add    DWORD PTR [ecx],edx
    14a1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14a7:	0e                   	push   cs
    14a8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14aa:	11 01                	adc    DWORD PTR [ecx],eax
    14ac:	12 06                	adc    al,BYTE PTR [esi]
    14ae:	10 17                	adc    BYTE PTR [edi],dl
    14b0:	00 00                	add    BYTE PTR [eax],al
    14b2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14b5:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14b7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14ba:	0e                   	push   cs
    14bb:	00 00                	add    BYTE PTR [eax],al
    14bd:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    14c0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14c2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14c5:	08 00                	or     BYTE PTR [eax],al
    14c7:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    14ca:	00 03                	add    BYTE PTR [ebx],al
    14cc:	0e                   	push   cs
    14cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14d1:	49                   	dec    ecx
    14d2:	13 00                	adc    eax,DWORD PTR [eax]
    14d4:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    14da:	49                   	dec    ecx
    14db:	13 00                	adc    eax,DWORD PTR [eax]
    14dd:	00 06                	add    BYTE PTR [esi],al
    14df:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    14e2:	19 03                	sbb    DWORD PTR [ebx],eax
    14e4:	0e                   	push   cs
    14e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14e9:	27                   	daa    
    14ea:	19 11                	sbb    DWORD PTR [ecx],edx
    14ec:	01 12                	add    DWORD PTR [edx],edx
    14ee:	06                   	push   es
    14ef:	40                   	inc    eax
    14f0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    14f6:	00 00                	add    BYTE PTR [eax],al
    14f8:	07                   	pop    es
    14f9:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    14fe:	0b 3b                	or     edi,DWORD PTR [ebx]
    1500:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1503:	02 18                	add    bl,BYTE PTR [eax]
    1505:	00 00                	add    BYTE PTR [eax],al
    1507:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    150a:	03 08                	add    ecx,DWORD PTR [eax]
    150c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    150e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1510:	49                   	dec    ecx
    1511:	13 02                	adc    eax,DWORD PTR [edx]
    1513:	18 00                	sbb    BYTE PTR [eax],al
    1515:	00 09                	add    BYTE PTR [ecx],cl
    1517:	34 00                	xor    al,0x0
    1519:	03 0e                	add    ecx,DWORD PTR [esi]
    151b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    151d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    151f:	49                   	dec    ecx
    1520:	13 3f                	adc    edi,DWORD PTR [edi]
    1522:	19 02                	sbb    DWORD PTR [edx],eax
    1524:	18 00                	sbb    BYTE PTR [eax],al
    1526:	00 00                	add    BYTE PTR [eax],al
    1528:	01 11                	add    DWORD PTR [ecx],edx
    152a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1530:	0e                   	push   cs
    1531:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1533:	11 01                	adc    DWORD PTR [ecx],eax
    1535:	12 06                	adc    al,BYTE PTR [esi]
    1537:	10 17                	adc    BYTE PTR [edi],dl
    1539:	00 00                	add    BYTE PTR [eax],al
    153b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    153e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1540:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1543:	0e                   	push   cs
    1544:	00 00                	add    BYTE PTR [eax],al
    1546:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1549:	0b 0b                	or     ecx,DWORD PTR [ebx]
    154b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    154e:	08 00                	or     BYTE PTR [eax],al
    1550:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1553:	00 03                	add    BYTE PTR [ebx],al
    1555:	0e                   	push   cs
    1556:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1558:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    155a:	49                   	dec    ecx
    155b:	13 00                	adc    eax,DWORD PTR [eax]
    155d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1563:	49                   	dec    ecx
    1564:	13 00                	adc    eax,DWORD PTR [eax]
    1566:	00 06                	add    BYTE PTR [esi],al
    1568:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    156c:	00 00                	add    BYTE PTR [eax],al
    156e:	07                   	pop    es
    156f:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    1572:	0e                   	push   cs
    1573:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1575:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1577:	27                   	daa    
    1578:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    157b:	11 01                	adc    DWORD PTR [ecx],eax
    157d:	12 06                	adc    al,BYTE PTR [esi]
    157f:	40                   	inc    eax
    1580:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1586:	00 00                	add    BYTE PTR [eax],al
    1588:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    158e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1590:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1593:	02 18                	add    bl,BYTE PTR [eax]
    1595:	00 00                	add    BYTE PTR [eax],al
    1597:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    159d:	0b 3b                	or     edi,DWORD PTR [ebx]
    159f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15a2:	02 18                	add    bl,BYTE PTR [eax]
    15a4:	00 00                	add    BYTE PTR [eax],al
    15a6:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    15a9:	03 0e                	add    ecx,DWORD PTR [esi]
    15ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15af:	49                   	dec    ecx
    15b0:	13 02                	adc    eax,DWORD PTR [edx]
    15b2:	18 00                	sbb    BYTE PTR [eax],al
    15b4:	00 0b                	add    BYTE PTR [ebx],cl
    15b6:	34 00                	xor    al,0x0
    15b8:	03 08                	add    ecx,DWORD PTR [eax]
    15ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15be:	49                   	dec    ecx
    15bf:	13 02                	adc    eax,DWORD PTR [edx]
    15c1:	18 00                	sbb    BYTE PTR [eax],al
    15c3:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
    15c6:	01 3f                	add    DWORD PTR [edi],edi
    15c8:	19 03                	sbb    DWORD PTR [ebx],eax
    15ca:	0e                   	push   cs
    15cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15cf:	27                   	daa    
    15d0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15d3:	11 01                	adc    DWORD PTR [ecx],eax
    15d5:	12 06                	adc    al,BYTE PTR [esi]
    15d7:	40                   	inc    eax
    15d8:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    15de:	00 00                	add    BYTE PTR [eax],al
    15e0:	0d 34 00 03 0e       	or     eax,0xe030034
    15e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15e9:	49                   	dec    ecx
    15ea:	13 3f                	adc    edi,DWORD PTR [edi]
    15ec:	19 02                	sbb    DWORD PTR [edx],eax
    15ee:	18 00                	sbb    BYTE PTR [eax],al
    15f0:	00 00                	add    BYTE PTR [eax],al
    15f2:	01 11                	add    DWORD PTR [ecx],edx
    15f4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    15fa:	0e                   	push   cs
    15fb:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    15fd:	11 01                	adc    DWORD PTR [ecx],eax
    15ff:	12 06                	adc    al,BYTE PTR [esi]
    1601:	10 17                	adc    BYTE PTR [edi],dl
    1603:	00 00                	add    BYTE PTR [eax],al
    1605:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1608:	0b 0b                	or     ecx,DWORD PTR [ebx]
    160a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    160d:	0e                   	push   cs
    160e:	00 00                	add    BYTE PTR [eax],al
    1610:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1613:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1615:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1618:	08 00                	or     BYTE PTR [eax],al
    161a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    161d:	00 03                	add    BYTE PTR [ebx],al
    161f:	0e                   	push   cs
    1620:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1622:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1624:	49                   	dec    ecx
    1625:	13 00                	adc    eax,DWORD PTR [eax]
    1627:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    162d:	49                   	dec    ecx
    162e:	13 00                	adc    eax,DWORD PTR [eax]
    1630:	00 06                	add    BYTE PTR [esi],al
    1632:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1636:	00 00                	add    BYTE PTR [eax],al
    1638:	07                   	pop    es
    1639:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    163c:	19 03                	sbb    DWORD PTR [ebx],eax
    163e:	0e                   	push   cs
    163f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1641:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1643:	27                   	daa    
    1644:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1647:	11 01                	adc    DWORD PTR [ecx],eax
    1649:	12 06                	adc    al,BYTE PTR [esi]
    164b:	40                   	inc    eax
    164c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1652:	00 00                	add    BYTE PTR [eax],al
    1654:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    165a:	0b 3b                	or     edi,DWORD PTR [ebx]
    165c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    165f:	02 18                	add    bl,BYTE PTR [eax]
    1661:	00 00                	add    BYTE PTR [eax],al
    1663:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1666:	03 08                	add    ecx,DWORD PTR [eax]
    1668:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    166a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    166c:	49                   	dec    ecx
    166d:	13 02                	adc    eax,DWORD PTR [edx]
    166f:	18 00                	sbb    BYTE PTR [eax],al
    1671:	00 0a                	add    BYTE PTR [edx],cl
    1673:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1676:	19 03                	sbb    DWORD PTR [ebx],eax
    1678:	0e                   	push   cs
    1679:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    167b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    167d:	27                   	daa    
    167e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1681:	11 01                	adc    DWORD PTR [ecx],eax
    1683:	12 06                	adc    al,BYTE PTR [esi]
    1685:	40                   	inc    eax
    1686:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    168c:	00 00                	add    BYTE PTR [eax],al
    168e:	0b 01                	or     eax,DWORD PTR [ecx]
    1690:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    1693:	01 13                	add    DWORD PTR [ebx],edx
    1695:	00 00                	add    BYTE PTR [eax],al
    1697:	0c 21                	or     al,0x21
    1699:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    169c:	2f                   	das    
    169d:	0b 00                	or     eax,DWORD PTR [eax]
    169f:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    16a5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16a7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16a9:	49                   	dec    ecx
    16aa:	13 02                	adc    eax,DWORD PTR [edx]
    16ac:	18 00                	sbb    BYTE PTR [eax],al
    16ae:	00 0e                	add    BYTE PTR [esi],cl
    16b0:	34 00                	xor    al,0x0
    16b2:	03 0e                	add    ecx,DWORD PTR [esi]
    16b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16b8:	49                   	dec    ecx
    16b9:	13 3f                	adc    edi,DWORD PTR [edi]
    16bb:	19 02                	sbb    DWORD PTR [edx],eax
    16bd:	18 00                	sbb    BYTE PTR [eax],al
    16bf:	00 00                	add    BYTE PTR [eax],al
    16c1:	01 11                	add    DWORD PTR [ecx],edx
    16c3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    16c9:	0e                   	push   cs
    16ca:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16cc:	11 01                	adc    DWORD PTR [ecx],eax
    16ce:	12 06                	adc    al,BYTE PTR [esi]
    16d0:	10 17                	adc    BYTE PTR [edi],dl
    16d2:	00 00                	add    BYTE PTR [eax],al
    16d4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16d7:	03 0e                	add    ecx,DWORD PTR [esi]
    16d9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16db:	49                   	dec    ecx
    16dc:	13 3a                	adc    edi,DWORD PTR [edx]
    16de:	0b 3b                	or     edi,DWORD PTR [ebx]
    16e0:	0b 01                	or     eax,DWORD PTR [ecx]
    16e2:	13 00                	adc    eax,DWORD PTR [eax]
    16e4:	00 03                	add    BYTE PTR [ebx],al
    16e6:	28 00                	sub    BYTE PTR [eax],al
    16e8:	03 0e                	add    ecx,DWORD PTR [esi]
    16ea:	1c 0b                	sbb    al,0xb
    16ec:	00 00                	add    BYTE PTR [eax],al
    16ee:	04 28                	add    al,0x28
    16f0:	00 03                	add    BYTE PTR [ebx],al
    16f2:	0e                   	push   cs
    16f3:	1c 05                	sbb    al,0x5
    16f5:	00 00                	add    BYTE PTR [eax],al
    16f7:	05 24 00 0b 0b       	add    eax,0xb0b0024
    16fc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16ff:	0e                   	push   cs
    1700:	00 00                	add    BYTE PTR [eax],al
    1702:	06                   	push   es
    1703:	24 00                	and    al,0x0
    1705:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1707:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    170a:	08 00                	or     BYTE PTR [eax],al
    170c:	00 07                	add    BYTE PTR [edi],al
    170e:	16                   	push   ss
    170f:	00 03                	add    BYTE PTR [ebx],al
    1711:	0e                   	push   cs
    1712:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1714:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1716:	49                   	dec    ecx
    1717:	13 00                	adc    eax,DWORD PTR [eax]
    1719:	00 08                	add    BYTE PTR [eax],cl
    171b:	13 01                	adc    eax,DWORD PTR [ecx]
    171d:	03 08                	add    ecx,DWORD PTR [eax]
    171f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1721:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1723:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1725:	01 13                	add    DWORD PTR [ebx],edx
    1727:	00 00                	add    BYTE PTR [eax],al
    1729:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    172f:	0b 3b                	or     edi,DWORD PTR [ebx]
    1731:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1734:	38 0b                	cmp    BYTE PTR [ebx],cl
    1736:	00 00                	add    BYTE PTR [eax],al
    1738:	0a 0f                	or     cl,BYTE PTR [edi]
    173a:	00 0b                	add    BYTE PTR [ebx],cl
    173c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    173f:	00 00                	add    BYTE PTR [eax],al
    1741:	0b 26                	or     esp,DWORD PTR [esi]
    1743:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1746:	00 00                	add    BYTE PTR [eax],al
    1748:	0c 2e                	or     al,0x2e
    174a:	01 3f                	add    DWORD PTR [edi],edi
    174c:	19 03                	sbb    DWORD PTR [ebx],eax
    174e:	0e                   	push   cs
    174f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1751:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1753:	49                   	dec    ecx
    1754:	13 11                	adc    edx,DWORD PTR [ecx]
    1756:	01 12                	add    DWORD PTR [edx],edx
    1758:	06                   	push   es
    1759:	40                   	inc    eax
    175a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1760:	00 00                	add    BYTE PTR [eax],al
    1762:	0d 34 00 03 0e       	or     eax,0xe030034
    1767:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1769:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    176b:	49                   	dec    ecx
    176c:	13 02                	adc    eax,DWORD PTR [edx]
    176e:	18 00                	sbb    BYTE PTR [eax],al
    1770:	00 0e                	add    BYTE PTR [esi],cl
    1772:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1775:	19 03                	sbb    DWORD PTR [ebx],eax
    1777:	0e                   	push   cs
    1778:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    177a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    177c:	27                   	daa    
    177d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1780:	11 01                	adc    DWORD PTR [ecx],eax
    1782:	12 06                	adc    al,BYTE PTR [esi]
    1784:	40                   	inc    eax
    1785:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    178b:	00 00                	add    BYTE PTR [eax],al
    178d:	0f 05                	syscall 
    178f:	00 03                	add    BYTE PTR [ebx],al
    1791:	0e                   	push   cs
    1792:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1794:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1796:	49                   	dec    ecx
    1797:	13 02                	adc    eax,DWORD PTR [edx]
    1799:	18 00                	sbb    BYTE PTR [eax],al
    179b:	00 10                	add    BYTE PTR [eax],dl
    179d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    17a0:	19 03                	sbb    DWORD PTR [ebx],eax
    17a2:	0e                   	push   cs
    17a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17a7:	27                   	daa    
    17a8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    17ab:	11 01                	adc    DWORD PTR [ecx],eax
    17ad:	12 06                	adc    al,BYTE PTR [esi]
    17af:	40                   	inc    eax
    17b0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    17b6:	00 00                	add    BYTE PTR [eax],al
    17b8:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    17bb:	03 08                	add    ecx,DWORD PTR [eax]
    17bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17c1:	49                   	dec    ecx
    17c2:	13 02                	adc    eax,DWORD PTR [edx]
    17c4:	18 00                	sbb    BYTE PTR [eax],al
    17c6:	00 12                	add    BYTE PTR [edx],dl
    17c8:	34 00                	xor    al,0x0
    17ca:	03 0e                	add    ecx,DWORD PTR [esi]
    17cc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17ce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17d0:	49                   	dec    ecx
    17d1:	13 3f                	adc    edi,DWORD PTR [edi]
    17d3:	19 02                	sbb    DWORD PTR [edx],eax
    17d5:	18 00                	sbb    BYTE PTR [eax],al
    17d7:	00 13                	add    BYTE PTR [ebx],dl
    17d9:	01 01                	add    DWORD PTR [ecx],eax
    17db:	49                   	dec    ecx
    17dc:	13 01                	adc    eax,DWORD PTR [ecx]
    17de:	13 00                	adc    eax,DWORD PTR [eax]
    17e0:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    17e3:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    17e6:	2f                   	das    
    17e7:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	96                   	xchg   esi,eax
  27:	01 00                	add    DWORD PTR [eax],eax
  29:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	e3 04                	jecxz  6c <sysEnter_Vector-0x12ff94>
  68:	00 00                	add    BYTE PTR [eax],al
  6a:	04 00                	add    al,0x0
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 9f 49 02 00 00    	add    BYTE PTR [edi+0x249],bl
	...
  80:	1c 00                	sbb    al,0x0
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	2c 07                	sub    al,0x7
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	9f                   	lahf   
  94:	6e                   	outs   dx,BYTE PTR ds:[esi]
  95:	01 00                	add    DWORD PTR [eax],eax
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	29 09                	sub    DWORD PTR [ecx],ecx
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	70 05                	jo     b7 <sysEnter_Vector-0x12ff49>
  b2:	00 9f 6b 02 00 00    	add    BYTE PTR [edi+0x26b],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	12 0b                	adc    cl,BYTE PTR [ebx]
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	dc 07                	fadd   QWORD PTR [edi]
  d2:	00 9f 3f 02 00 00    	add    BYTE PTR [edi+0x23f],bl
	...
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	4f                   	dec    edi
  e7:	0f 00 00             	sldt   WORD PTR [eax]
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	1c 0a                	sbb    al,0xa
  f2:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	47                   	inc    edi
 107:	12 00                	adc    al,BYTE PTR [eax]
 109:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	84 0b                	test   BYTE PTR [ebx],cl
 112:	00 9f ed 0b 00 00    	add    BYTE PTR [edi+0xbed],bl
	...
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	b5 1c                	mov    ch,0x1c
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	74 17                	je     149 <sysEnter_Vector-0x12feb7>
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	9f                   	lahf   
 147:	1f                   	pop    ds
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	e8 17 00 9f 33       	call   339f016c <sysEnter_Vector+0x338c016c>
 155:	04 00                	add    al,0x0
	...
 15f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	d0 23                	shl    BYTE PTR [ebx],1
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	1c 1c                	sbb    al,0x1c
 172:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
	...
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	33 26                	xor    esp,DWORD PTR [esi]
 188:	00 00                	add    BYTE PTR [eax],al
 18a:	04 00                	add    al,0x0
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	d8 1d 00 9f e7 00    	fcomp  DWORD PTR ds:0xe79f00
	...
 19e:	00 00                	add    BYTE PTR [eax],al
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	55                   	push   ebp
 1a7:	28 00                	sub    BYTE PTR [eax],al
 1a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	c0 1e 00             	rcr    BYTE PTR [esi],0x0
 1b3:	9f                   	lahf   
 1b4:	29 00                	sub    DWORD PTR [eax],eax
	...
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	78 2a                	js     1f2 <sysEnter_Vector-0x12fe0e>
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	ec                   	in     al,dx
 1d1:	1e                   	push   ds
 1d2:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	6c                   	ins    BYTE PTR es:[edi],dx
 1e7:	2e 00 00             	add    BYTE PTR cs:[eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	04 26                	add    al,0x26
 1f2:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
	...
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	d5 2f                	aad    0x2f
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	88 26                	mov    BYTE PTR [esi],ah
 212:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
	...
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	b9 31 00 00 04       	mov    ecx,0x4000031
 22b:	00 00                	add    BYTE PTR [eax],al
 22d:	00 00                	add    BYTE PTR [eax],al
 22f:	00 74 27 00          	add    BYTE PTR [edi+eiz*1+0x0],dh
 233:	9f                   	lahf   
 234:	5e                   	pop    esi
	...
 23d:	00 00                	add    BYTE PTR [eax],al
 23f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	5c                   	pop    esp
 247:	33 00                	xor    eax,DWORD PTR [eax]
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	d4 27                	aam    0x27
 252:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
	...
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	5c                   	pop    esp
 267:	35 00 00 04 00       	xor    eax,0x40000
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	9c                   	pushf  
 271:	28 00                	sub    BYTE PTR [eax],al
 273:	9f                   	lahf   
 274:	89 00                	mov    DWORD PTR [eax],eax
	...
 27e:	00 00                	add    BYTE PTR [eax],al
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	df 36                	fbstp  TBYTE PTR [esi]
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	28 29                	sub    BYTE PTR [ecx],ch
 292:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
	...
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	f4                   	hlt    
 2a7:	38 00                	cmp    BYTE PTR [eax],al
 2a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	cc                   	int3   
 2b1:	29 00                	sub    DWORD PTR [eax],eax
 2b3:	9f                   	lahf   
 2b4:	ce                   	into   
	...
 2bd:	00 00                	add    BYTE PTR [eax],al
 2bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	d6                   	(bad)  
 2c7:	39 00                	cmp    DWORD PTR [eax],eax
 2c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	9c                   	pushf  
 2d1:	2a 00                	sub    al,BYTE PTR [eax]
 2d3:	9f                   	lahf   
 2d4:	80 00 00             	add    BYTE PTR [eax],0x0
	...
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	ca 3a 00             	retf   0x3a
 2e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	1c 2b                	sbb    al,0x2b
 2f2:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
	...
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	93                   	xchg   ebx,eax
 307:	3c 00                	cmp    al,0x0
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	9c                   	pushf  
 311:	2c 00                	sub    al,0x0
 313:	9f                   	lahf   
 314:	1d 00 00 00 00       	sbb    eax,0x0
 319:	00 00                	add    BYTE PTR [eax],al
 31b:	00 00                	add    BYTE PTR [eax],al
 31d:	00 00                	add    BYTE PTR [eax],al
 31f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	03 3d 00 00 04 00    	add    edi,DWORD PTR ds:0x40000
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	bc 2c 00 9f 9c       	mov    esp,0x9c9f002c
 335:	01 00                	add    DWORD PTR [eax],eax
	...
 33f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	ca 3e 00             	retf   0x3e
 349:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	58                   	pop    eax
 351:	2e 00 9f b6 00 00 00 	add    BYTE PTR cs:[edi+0xb6],bl
	...
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	63 40 00             	arpl   WORD PTR [eax+0x0],ax
 369:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	10 2f                	adc    BYTE PTR [edi],ch
 372:	00 9f 69 01 00 00    	add    BYTE PTR [edi+0x169],bl
	...
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	5c                   	pop    esp
 387:	42                   	inc    edx
 388:	00 00                	add    BYTE PTR [eax],al
 38a:	04 00                	add    al,0x0
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	7c 30                	jl     3c2 <sysEnter_Vector-0x12fc3e>
 392:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	99                   	cdq    
 3a7:	44                   	inc    esp
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	a8 31                	test   al,0x31
 3b2:	00 9f 17 0d 00 00    	add    BYTE PTR [edi+0xd17],bl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	da 00                	fiadd  DWORD PTR [eax]
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	ba 00 00 00 01       	mov    edx,0x1000000
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	2f                   	das    
      3c:	68 6f 6d 65 2f       	push   0x2f656d6f
      41:	79 6f                	jns    b2 <sysEnter_Vector-0x12ff4e>
      43:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      4a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      4d:	73 73                	jae    c2 <sysEnter_Vector-0x12ff3e>
      4f:	2f                   	das    
      50:	6c                   	ins    BYTE PTR es:[edi],dx
      51:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      58:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      5e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      64:	78 2d                	js     93 <sysEnter_Vector-0x12ff6d>
      66:	67 6e                	outs   dx,BYTE PTR ds:[si]
      68:	75 2f                	jne    99 <sysEnter_Vector-0x12ff67>
      6a:	35 2e 33 2e 30       	xor    eax,0x302e332e
      6f:	2f                   	das    
      70:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      77:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
      7a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
      7e:	65 00 00             	add    BYTE PTR gs:[eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      8f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      96:	63 
      97:	2e                   	cs
      98:	68 00 02 00 00       	push   0x200
      9d:	6d                   	ins    DWORD PTR es:[edi],dx
      9e:	61                   	popa   
      9f:	6c                   	ins    BYTE PTR es:[edi],dx
      a0:	6c                   	ins    BYTE PTR es:[edi],dx
      a1:	6f                   	outs   dx,DWORD PTR ds:[esi]
      a2:	63 2e                	arpl   WORD PTR [esi],bp
      a4:	68 00 03 00 00       	push   0x300
      a9:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
      b0:	03 00                	add    eax,DWORD PTR [eax]
      b2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
      b6:	43                   	inc    ebx
      b7:	68 72 69 73 4f       	push   0x4f736972
      bc:	53                   	push   ebx
      bd:	2e                   	cs
      be:	68 00 03 00 00       	push   0x300
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	05 02 00 00 00       	add    eax,0x2
      ca:	9f                   	lahf   
      cb:	1a c9                	sbb    cl,cl
      cd:	2f                   	das    
      ce:	f3 72 cb             	repz jb 9c <sysEnter_Vector-0x12ff64>
      d1:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      d6:	72 cb                	jb     a3 <sysEnter_Vector-0x12ff5d>
      d8:	3d 02 02 00 01       	cmp    eax,0x1000202
      dd:	01 0d 01 00 00 02    	add    DWORD PTR ds:0x2000001,ecx
      e3:	00 bb 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],bh
      e9:	01 fb                	add    ebx,edi
      eb:	0e                   	push   cs
      ec:	0d 00 01 01 01       	or     eax,0x1010100
      f1:	01 00                	add    DWORD PTR [eax],eax
      f3:	00 00                	add    BYTE PTR [eax],al
      f5:	01 00                	add    DWORD PTR [eax],eax
      f7:	00 01                	add    BYTE PTR [ecx],al
      f9:	2e                   	cs
      fa:	2e                   	cs
      fb:	2f                   	das    
      fc:	2e                   	cs
      fd:	2e                   	cs
      fe:	2f                   	das    
      ff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     103:	6a 2f                	push   0x2f
     105:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     108:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     10f:	63 2f                	arpl   WORD PTR [edi],bp
     111:	73 74                	jae    187 <sysEnter_Vector-0x12fe79>
     113:	72 69                	jb     17e <sysEnter_Vector-0x12fe82>
     115:	6e                   	outs   dx,BYTE PTR ds:[esi]
     116:	67 73 00             	addr16 jae 119 <sysEnter_Vector-0x12fee7>
     119:	2f                   	das    
     11a:	68 6f 6d 65 2f       	push   0x2f656d6f
     11f:	79 6f                	jns    190 <sysEnter_Vector-0x12fe70>
     121:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     128:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     12b:	73 73                	jae    1a0 <sysEnter_Vector-0x12fe60>
     12d:	2f                   	das    
     12e:	6c                   	ins    BYTE PTR es:[edi],dx
     12f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     136:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     142:	78 2d                	js     171 <sysEnter_Vector-0x12fe8f>
     144:	67 6e                	outs   dx,BYTE PTR ds:[si]
     146:	75 2f                	jne    177 <sysEnter_Vector-0x12fe89>
     148:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14d:	2f                   	das    
     14e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     155:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     158:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     15c:	65 00 00             	add    BYTE PTR gs:[eax],al
     15f:	73 74                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     161:	72 63                	jb     1c6 <sysEnter_Vector-0x12fe3a>
     163:	73 70                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     165:	6e                   	outs   dx,BYTE PTR ds:[esi]
     166:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     175:	63 
     176:	2e                   	cs
     177:	68 00 02 00 00       	push   0x200
     17c:	6d                   	ins    DWORD PTR es:[edi],dx
     17d:	61                   	popa   
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	6c                   	ins    BYTE PTR es:[edi],dx
     180:	6f                   	outs   dx,DWORD PTR ds:[esi]
     181:	63 2e                	arpl   WORD PTR [esi],bp
     183:	68 00 03 00 00       	push   0x300
     188:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     18f:	03 00                	add    eax,DWORD PTR [eax]
     191:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     195:	43                   	inc    ebx
     196:	68 72 69 73 4f       	push   0x4f736972
     19b:	53                   	push   ebx
     19c:	2e                   	cs
     19d:	68 00 03 00 00       	push   0x300
     1a2:	00 00                	add    BYTE PTR [eax],al
     1a4:	05 02 70 00 00       	add    eax,0x7002
     1a9:	9f                   	lahf   
     1aa:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     1b0:	75 00                	jne    1b2 <sysEnter_Vector-0x12fe4e>
     1b2:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1b5:	aa                   	stos   BYTE PTR es:[edi],al
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	04 01                	add    al,0x1
     1ba:	06                   	push   es
     1bb:	3c 00                	cmp    al,0x0
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	06                   	push   es
     1c1:	73 00                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     1c3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1c6:	06                   	push   es
     1c7:	82                   	(bad)  
     1c8:	06                   	push   es
     1c9:	6d                   	ins    DWORD PTR es:[edi],dx
     1ca:	91                   	xchg   ecx,eax
     1cb:	4d                   	dec    ebp
     1cc:	e7 9f                	out    0x9f,eax
     1ce:	59                   	pop    ecx
     1cf:	75 00                	jne    1d1 <sysEnter_Vector-0x12fe2f>
     1d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1d4:	aa                   	stos   BYTE PTR es:[edi],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	04 01                	add    al,0x1
     1d9:	06                   	push   es
     1da:	3c 00                	cmp    al,0x0
     1dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1df:	06                   	push   es
     1e0:	73 00                	jae    1e2 <sysEnter_Vector-0x12fe1e>
     1e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1e5:	06                   	push   es
     1e6:	82                   	(bad)  
     1e7:	06                   	push   es
     1e8:	6d                   	ins    DWORD PTR es:[edi],dx
     1e9:	91                   	xchg   ecx,eax
     1ea:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ed:	01 01                	add    DWORD PTR [ecx],eax
     1ef:	de 00                	fiadd  WORD PTR [eax]
     1f1:	00 00                	add    BYTE PTR [eax],al
     1f3:	02 00                	add    al,BYTE PTR [eax]
     1f5:	ba 00 00 00 01       	mov    edx,0x1000000
     1fa:	01 fb                	add    ebx,edi
     1fc:	0e                   	push   cs
     1fd:	0d 00 01 01 01       	or     eax,0x1010100
     202:	01 00                	add    DWORD PTR [eax],eax
     204:	00 00                	add    BYTE PTR [eax],al
     206:	01 00                	add    DWORD PTR [eax],eax
     208:	00 01                	add    BYTE PTR [ecx],al
     20a:	2e                   	cs
     20b:	2e                   	cs
     20c:	2f                   	das    
     20d:	2e                   	cs
     20e:	2e                   	cs
     20f:	2f                   	das    
     210:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     214:	6a 2f                	push   0x2f
     216:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     219:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     220:	63 2f                	arpl   WORD PTR [edi],bp
     222:	73 74                	jae    298 <sysEnter_Vector-0x12fd68>
     224:	72 69                	jb     28f <sysEnter_Vector-0x12fd71>
     226:	6e                   	outs   dx,BYTE PTR ds:[esi]
     227:	67 73 00             	addr16 jae 22a <sysEnter_Vector-0x12fdd6>
     22a:	2f                   	das    
     22b:	68 6f 6d 65 2f       	push   0x2f656d6f
     230:	79 6f                	jns    2a1 <sysEnter_Vector-0x12fd5f>
     232:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     239:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     23c:	73 73                	jae    2b1 <sysEnter_Vector-0x12fd4f>
     23e:	2f                   	das    
     23f:	6c                   	ins    BYTE PTR es:[edi],dx
     240:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     247:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     24d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     253:	78 2d                	js     282 <sysEnter_Vector-0x12fd7e>
     255:	67 6e                	outs   dx,BYTE PTR ds:[si]
     257:	75 2f                	jne    288 <sysEnter_Vector-0x12fd78>
     259:	35 2e 33 2e 30       	xor    eax,0x302e332e
     25e:	2f                   	das    
     25f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     266:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     269:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     26d:	65 00 00             	add    BYTE PTR gs:[eax],al
     270:	73 74                	jae    2e6 <sysEnter_Vector-0x12fd1a>
     272:	72 74                	jb     2e8 <sysEnter_Vector-0x12fd18>
     274:	6f                   	outs   dx,DWORD PTR ds:[esi]
     275:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     278:	00 01                	add    BYTE PTR [ecx],al
     27a:	00 00                	add    BYTE PTR [eax],al
     27c:	73 74                	jae    2f2 <sysEnter_Vector-0x12fd0e>
     27e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     285:	63 
     286:	2e                   	cs
     287:	68 00 02 00 00       	push   0x200
     28c:	6d                   	ins    DWORD PTR es:[edi],dx
     28d:	61                   	popa   
     28e:	6c                   	ins    BYTE PTR es:[edi],dx
     28f:	6c                   	ins    BYTE PTR es:[edi],dx
     290:	6f                   	outs   dx,DWORD PTR ds:[esi]
     291:	63 2e                	arpl   WORD PTR [esi],bp
     293:	68 00 03 00 00       	push   0x300
     298:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     29f:	03 00                	add    eax,DWORD PTR [eax]
     2a1:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     2a5:	43                   	inc    ebx
     2a6:	68 72 69 73 4f       	push   0x4f736972
     2ab:	53                   	push   ebx
     2ac:	2e                   	cs
     2ad:	68 00 03 00 00       	push   0x300
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	05 02 1c 01 00       	add    eax,0x11c02
     2b9:	9f                   	lahf   
     2ba:	03 28                	add    ebp,DWORD PTR [eax]
     2bc:	01 f6                	add    esi,esi
     2be:	67 92                	addr16 xchg edx,eax
     2c0:	08 2f                	or     BYTE PTR [edi],ch
     2c2:	75 08                	jne    2cc <sysEnter_Vector-0x12fd34>
     2c4:	2f                   	das    
     2c5:	4b                   	dec    ebx
     2c6:	08 c9                	or     cl,cl
     2c8:	c9                   	leave  
     2c9:	08 21                	or     BYTE PTR [ecx],ah
     2cb:	3d 02 07 00 01       	cmp    eax,0x1000702
     2d0:	01 1a                	add    DWORD PTR [edx],ebx
     2d2:	01 00                	add    DWORD PTR [eax],eax
     2d4:	00 02                	add    BYTE PTR [edx],al
     2d6:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
     2dc:	01 fb                	add    ebx,edi
     2de:	0e                   	push   cs
     2df:	0d 00 01 01 01       	or     eax,0x1010100
     2e4:	01 00                	add    DWORD PTR [eax],eax
     2e6:	00 00                	add    BYTE PTR [eax],al
     2e8:	01 00                	add    DWORD PTR [eax],eax
     2ea:	00 01                	add    BYTE PTR [ecx],al
     2ec:	73 72                	jae    360 <sysEnter_Vector-0x12fca0>
     2ee:	63 00                	arpl   WORD PTR [eax],ax
     2f0:	2f                   	das    
     2f1:	68 6f 6d 65 2f       	push   0x2f656d6f
     2f6:	79 6f                	jns    367 <sysEnter_Vector-0x12fc99>
     2f8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2ff:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     302:	73 73                	jae    377 <sysEnter_Vector-0x12fc89>
     304:	2f                   	das    
     305:	6c                   	ins    BYTE PTR es:[edi],dx
     306:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     30d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     313:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     319:	78 2d                	js     348 <sysEnter_Vector-0x12fcb8>
     31b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     31d:	75 2f                	jne    34e <sysEnter_Vector-0x12fcb2>
     31f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     324:	2f                   	das    
     325:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     32c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     32f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     333:	65 00 00             	add    BYTE PTR gs:[eax],al
     336:	61                   	popa   
     337:	73 63                	jae    39c <sysEnter_Vector-0x12fc64>
     339:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     340:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     343:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     34a:	63 
     34b:	2e                   	cs
     34c:	68 00 02 00 00       	push   0x200
     351:	6d                   	ins    DWORD PTR es:[edi],dx
     352:	61                   	popa   
     353:	6c                   	ins    BYTE PTR es:[edi],dx
     354:	6c                   	ins    BYTE PTR es:[edi],dx
     355:	6f                   	outs   dx,DWORD PTR ds:[esi]
     356:	63 2e                	arpl   WORD PTR [esi],bp
     358:	68 00 03 00 00       	push   0x300
     35d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     364:	03 00                	add    eax,DWORD PTR [eax]
     366:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     36a:	43                   	inc    ebx
     36b:	68 72 69 73 4f       	push   0x4f736972
     370:	53                   	push   ebx
     371:	2e                   	cs
     372:	68 00 03 00 00       	push   0x300
     377:	00 00                	add    BYTE PTR [eax],al
     379:	05 02 b4 01 00       	add    eax,0x1b402
     37e:	9f                   	lahf   
     37f:	03 09                	add    ecx,DWORD PTR [ecx]
     381:	01 08                	add    DWORD PTR [eax],ecx
     383:	16                   	push   ss
     384:	00 02                	add    BYTE PTR [edx],al
     386:	04 03                	add    al,0x3
     388:	08 d7                	or     bh,dl
     38a:	00 02                	add    BYTE PTR [edx],al
     38c:	04 03                	add    al,0x3
     38e:	d7                   	xlat   BYTE PTR ds:[ebx]
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	04 03                	add    al,0x3
     393:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     396:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     399:	d3 00                	rol    DWORD PTR [eax],cl
     39b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39e:	06                   	push   es
     39f:	82                   	(bad)  
     3a0:	06                   	push   es
     3a1:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     3a4:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     3a9:	04 01                	add    al,0x1
     3ab:	76 00                	jbe    3ad <sysEnter_Vector-0x12fc53>
     3ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3b0:	02 3b                	add    bh,BYTE PTR [ebx]
     3b2:	13 08                	adc    ecx,DWORD PTR [eax]
     3b4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3b8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3b9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3ba:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     3c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c3:	76 00                	jbe    3c5 <sysEnter_Vector-0x12fc3b>
     3c5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c8:	02 3b                	add    bh,BYTE PTR [ebx]
     3ca:	13 08                	adc    ecx,DWORD PTR [eax]
     3cc:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3d0:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3d1:	d7                   	xlat   BYTE PTR ds:[ebx]
     3d2:	6a f3                	push   0xfffffff3
     3d4:	78 00                	js     3d6 <sysEnter_Vector-0x12fc2a>
     3d6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3d9:	91                   	xchg   ecx,eax
     3da:	00 02                	add    BYTE PTR [edx],al
     3dc:	04 03                	add    al,0x3
     3de:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3e1:	00 02                	add    BYTE PTR [edx],al
     3e3:	04 01                	add    al,0x1
     3e5:	06                   	push   es
     3e6:	4a                   	dec    edx
     3e7:	06                   	push   es
     3e8:	e8 3d 02 02 00       	call   2062a <sysEnter_Vector-0x10f9d6>
     3ed:	01 01                	add    DWORD PTR [ecx],eax
     3ef:	d8 00                	fadd   DWORD PTR [eax]
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 00                	add    al,BYTE PTR [eax]
     3f5:	9f                   	lahf   
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 01                	add    BYTE PTR [ecx],al
     3fa:	01 fb                	add    ebx,edi
     3fc:	0e                   	push   cs
     3fd:	0d 00 01 01 01       	or     eax,0x1010100
     402:	01 00                	add    DWORD PTR [eax],eax
     404:	00 00                	add    BYTE PTR [eax],al
     406:	01 00                	add    DWORD PTR [eax],eax
     408:	00 01                	add    BYTE PTR [ecx],al
     40a:	73 72                	jae    47e <sysEnter_Vector-0x12fb82>
     40c:	63 00                	arpl   WORD PTR [eax],ax
     40e:	2f                   	das    
     40f:	68 6f 6d 65 2f       	push   0x2f656d6f
     414:	79 6f                	jns    485 <sysEnter_Vector-0x12fb7b>
     416:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     41d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     420:	73 73                	jae    495 <sysEnter_Vector-0x12fb6b>
     422:	2f                   	das    
     423:	6c                   	ins    BYTE PTR es:[edi],dx
     424:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     42b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     431:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     437:	78 2d                	js     466 <sysEnter_Vector-0x12fb9a>
     439:	67 6e                	outs   dx,BYTE PTR ds:[si]
     43b:	75 2f                	jne    46c <sysEnter_Vector-0x12fb94>
     43d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     442:	2f                   	das    
     443:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     44a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     44d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     451:	65 00 00             	add    BYTE PTR gs:[eax],al
     454:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     457:	73 6f                	jae    4c8 <sysEnter_Vector-0x12fb38>
     459:	6c                   	ins    BYTE PTR es:[edi],dx
     45a:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     45e:	01 00                	add    DWORD PTR [eax],eax
     460:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     463:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     46a:	63 
     46b:	2e                   	cs
     46c:	68 00 02 00 00       	push   0x200
     471:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     478:	03 00                	add    eax,DWORD PTR [eax]
     47a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     47d:	6c                   	ins    BYTE PTR es:[edi],dx
     47e:	6c                   	ins    BYTE PTR es:[edi],dx
     47f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     480:	63 2e                	arpl   WORD PTR [esi],bp
     482:	68 00 03 00 00       	push   0x300
     487:	6c                   	ins    BYTE PTR es:[edi],dx
     488:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     48f:	4f                   	dec    edi
     490:	53                   	push   ebx
     491:	2e                   	cs
     492:	68 00 03 00 00       	push   0x300
     497:	00 00                	add    BYTE PTR [eax],al
     499:	05 02 00 04 00       	add    eax,0x40002
     49e:	9f                   	lahf   
     49f:	03 0d 01 08 24 08    	add    ecx,DWORD PTR ds:0x8240801
     4a5:	59                   	pop    ecx
     4a6:	08 21                	or     BYTE PTR [ecx],ah
     4a8:	08 2f                	or     BYTE PTR [edi],ch
     4aa:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4ad:	21 08                	and    DWORD PTR [eax],ecx
     4af:	2f                   	das    
     4b0:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     4b3:	59                   	pop    ecx
     4b4:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     4ba:	5a                   	pop    edx
     4bb:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     4be:	08 23                	or     BYTE PTR [ebx],ah
     4c0:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4c3:	5a                   	pop    edx
     4c4:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     4c7:	06                   	push   es
     4c8:	00 01                	add    BYTE PTR [ecx],al
     4ca:	01 10                	add    DWORD PTR [eax],edx
     4cc:	01 00                	add    DWORD PTR [eax],eax
     4ce:	00 02                	add    BYTE PTR [edx],al
     4d0:	00 a3 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],ah
     4d6:	01 fb                	add    ebx,edi
     4d8:	0e                   	push   cs
     4d9:	0d 00 01 01 01       	or     eax,0x1010100
     4de:	01 00                	add    DWORD PTR [eax],eax
     4e0:	00 00                	add    BYTE PTR [eax],al
     4e2:	01 00                	add    DWORD PTR [eax],eax
     4e4:	00 01                	add    BYTE PTR [ecx],al
     4e6:	73 72                	jae    55a <sysEnter_Vector-0x12faa6>
     4e8:	63 00                	arpl   WORD PTR [eax],ax
     4ea:	2f                   	das    
     4eb:	68 6f 6d 65 2f       	push   0x2f656d6f
     4f0:	79 6f                	jns    561 <sysEnter_Vector-0x12fa9f>
     4f2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     4f9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     4fc:	73 73                	jae    571 <sysEnter_Vector-0x12fa8f>
     4fe:	2f                   	das    
     4ff:	6c                   	ins    BYTE PTR es:[edi],dx
     500:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     507:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     50d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     513:	78 2d                	js     542 <sysEnter_Vector-0x12fabe>
     515:	67 6e                	outs   dx,BYTE PTR ds:[si]
     517:	75 2f                	jne    548 <sysEnter_Vector-0x12fab8>
     519:	35 2e 33 2e 30       	xor    eax,0x302e332e
     51e:	2f                   	das    
     51f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     526:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     529:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     52d:	65 00 00             	add    BYTE PTR gs:[eax],al
     530:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     532:	76 69                	jbe    59d <sysEnter_Vector-0x12fa63>
     534:	72 6f                	jb     5a5 <sysEnter_Vector-0x12fa5b>
     536:	6e                   	outs   dx,BYTE PTR ds:[esi]
     537:	6d                   	ins    DWORD PTR es:[edi],dx
     538:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     53a:	74 2e                	je     56a <sysEnter_Vector-0x12fa96>
     53c:	63 00                	arpl   WORD PTR [eax],ax
     53e:	01 00                	add    DWORD PTR [eax],eax
     540:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     543:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     54a:	63 
     54b:	2e                   	cs
     54c:	68 00 02 00 00       	push   0x200
     551:	6d                   	ins    DWORD PTR es:[edi],dx
     552:	61                   	popa   
     553:	6c                   	ins    BYTE PTR es:[edi],dx
     554:	6c                   	ins    BYTE PTR es:[edi],dx
     555:	6f                   	outs   dx,DWORD PTR ds:[esi]
     556:	63 2e                	arpl   WORD PTR [esi],bp
     558:	68 00 03 00 00       	push   0x300
     55d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     564:	03 00                	add    eax,DWORD PTR [eax]
     566:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     56a:	43                   	inc    ebx
     56b:	68 72 69 73 4f       	push   0x4f736972
     570:	53                   	push   ebx
     571:	2e                   	cs
     572:	68 00 03 00 00       	push   0x300
     577:	00 00                	add    BYTE PTR [eax],al
     579:	05 02 70 05 00       	add    eax,0x57002
     57e:	9f                   	lahf   
     57f:	03 09                	add    ecx,DWORD PTR [ecx]
     581:	01 08                	add    DWORD PTR [eax],ecx
     583:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     589:	39 13                	cmp    DWORD PTR [ebx],edx
     58b:	00 02                	add    BYTE PTR [edx],al
     58d:	04 02                	add    al,0x2
     58f:	7e 00                	jle    591 <sysEnter_Vector-0x12fa6f>
     591:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     594:	06                   	push   es
     595:	4a                   	dec    edx
     596:	06                   	push   es
     597:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     598:	59                   	pop    ecx
     599:	5b                   	pop    ebx
     59a:	08 21                	or     BYTE PTR [ecx],ah
     59c:	76 bb                	jbe    559 <sysEnter_Vector-0x12faa7>
     59e:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     5a4:	14 08                	adc    al,0x8
     5a6:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     5ad:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     5b0:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     5b3:	00 02                	add    BYTE PTR [edx],al
     5b5:	04 01                	add    al,0x1
     5b7:	06                   	push   es
     5b8:	4a                   	dec    edx
     5b9:	06                   	push   es
     5ba:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     5bd:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     5c2:	08 f3                	or     bl,dh
     5c4:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     5ca:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     5cd:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     5d0:	00 02                	add    BYTE PTR [edx],al
     5d2:	04 01                	add    al,0x1
     5d4:	06                   	push   es
     5d5:	4a                   	dec    edx
     5d6:	06                   	push   es
     5d7:	03 0b                	add    ecx,DWORD PTR [ebx]
     5d9:	9e                   	sahf   
     5da:	02 05 00 01 01 23    	add    al,BYTE PTR ds:0x23010100
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 02                	add    BYTE PTR [edx],al
     5e4:	00 d7                	add    bh,dl
     5e6:	00 00                	add    BYTE PTR [eax],al
     5e8:	00 01                	add    BYTE PTR [ecx],al
     5ea:	01 fb                	add    ebx,edi
     5ec:	0e                   	push   cs
     5ed:	0d 00 01 01 01       	or     eax,0x1010100
     5f2:	01 00                	add    DWORD PTR [eax],eax
     5f4:	00 00                	add    BYTE PTR [eax],al
     5f6:	01 00                	add    DWORD PTR [eax],eax
     5f8:	00 01                	add    BYTE PTR [ecx],al
     5fa:	73 72                	jae    66e <sysEnter_Vector-0x12f992>
     5fc:	63 00                	arpl   WORD PTR [eax],ax
     5fe:	2f                   	das    
     5ff:	68 6f 6d 65 2f       	push   0x2f656d6f
     604:	79 6f                	jns    675 <sysEnter_Vector-0x12f98b>
     606:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     60d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     610:	73 73                	jae    685 <sysEnter_Vector-0x12f97b>
     612:	2f                   	das    
     613:	6c                   	ins    BYTE PTR es:[edi],dx
     614:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     61b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     621:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     627:	78 2d                	js     656 <sysEnter_Vector-0x12f9aa>
     629:	67 6e                	outs   dx,BYTE PTR ds:[si]
     62b:	75 2f                	jne    65c <sysEnter_Vector-0x12f9a4>
     62d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     632:	2f                   	das    
     633:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     63a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     63d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     641:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     645:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     649:	65                   	gs
     64a:	2f                   	das    
     64b:	2e                   	cs
     64c:	2e                   	cs
     64d:	2f                   	das    
     64e:	2e                   	cs
     64f:	2e                   	cs
     650:	2f                   	das    
     651:	2e                   	cs
     652:	2e                   	cs
     653:	2f                   	das    
     654:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     658:	6a 2f                	push   0x2f
     65a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     65d:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     664:	6e                   	outs   dx,BYTE PTR ds:[esi]
     665:	65                   	gs
     666:	6c                   	ins    BYTE PTR es:[edi],dx
     667:	2f                   	das    
     668:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     66f:	00 00                	add    BYTE PTR [eax],al
     671:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     678:	01 00                	add    DWORD PTR [eax],eax
     67a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     67d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     684:	63 
     685:	2e                   	cs
     686:	68 00 02 00 00       	push   0x200
     68b:	6d                   	ins    DWORD PTR es:[edi],dx
     68c:	61                   	popa   
     68d:	6c                   	ins    BYTE PTR es:[edi],dx
     68e:	6c                   	ins    BYTE PTR es:[edi],dx
     68f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     690:	63 2e                	arpl   WORD PTR [esi],bp
     692:	68 00 03 00 00       	push   0x300
     697:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     69e:	03 00                	add    eax,DWORD PTR [eax]
     6a0:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     6a4:	43                   	inc    ebx
     6a5:	68 72 69 73 4f       	push   0x4f736972
     6aa:	53                   	push   ebx
     6ab:	2e                   	cs
     6ac:	68 00 03 00 00       	push   0x300
     6b1:	73 79                	jae    72c <sysEnter_Vector-0x12f8d4>
     6b3:	73 63                	jae    718 <sysEnter_Vector-0x12f8e8>
     6b5:	61                   	popa   
     6b6:	6c                   	ins    BYTE PTR es:[edi],dx
     6b7:	6c                   	ins    BYTE PTR es:[edi],dx
     6b8:	73 2e                	jae    6e8 <sysEnter_Vector-0x12f918>
     6ba:	68 00 04 00 00       	push   0x400
     6bf:	00 00                	add    BYTE PTR [eax],al
     6c1:	05 02 dc 07 00       	add    eax,0x7dc02
     6c6:	9f                   	lahf   
     6c7:	03 0a                	add    ecx,DWORD PTR [edx]
     6c9:	01 08                	add    DWORD PTR [eax],ecx
     6cb:	13 08                	adc    ecx,DWORD PTR [eax]
     6cd:	9f                   	lahf   
     6ce:	5b                   	pop    ebx
     6cf:	08 13                	or     BYTE PTR [ebx],dl
     6d1:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     6d4:	08 21                	or     BYTE PTR [ecx],ah
     6d6:	bb 2f 08 d5 bc       	mov    ebx,0xbcd5082f
     6db:	bb 69 08 2f 75       	mov    ebx,0x752f0869
     6e0:	08 83 67 75 bc 08    	or     BYTE PTR [ebx+0x8bc7567],al
     6e6:	67 bc 02 26 13 77    	addr16 mov esp,0x77132602
     6ec:	08 13                	or     BYTE PTR [ebx],dl
     6ee:	08 2f                	or     BYTE PTR [edi],ch
     6f0:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     6f6:	08 d7                	or     bh,dl
     6f8:	77 f3                	ja     6ed <sysEnter_Vector-0x12f913>
     6fa:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     700:	75 02                	jne    704 <sysEnter_Vector-0x12f8fc>
     702:	05 00 01 01 33       	add    eax,0x33010100
     707:	01 00                	add    DWORD PTR [eax],eax
     709:	00 02                	add    BYTE PTR [edx],al
     70b:	00 de                	add    dh,bl
     70d:	00 00                	add    BYTE PTR [eax],al
     70f:	00 01                	add    BYTE PTR [ecx],al
     711:	01 fb                	add    ebx,edi
     713:	0e                   	push   cs
     714:	0d 00 01 01 01       	or     eax,0x1010100
     719:	01 00                	add    DWORD PTR [eax],eax
     71b:	00 00                	add    BYTE PTR [eax],al
     71d:	01 00                	add    DWORD PTR [eax],eax
     71f:	00 01                	add    BYTE PTR [ecx],al
     721:	73 72                	jae    795 <sysEnter_Vector-0x12f86b>
     723:	63 2f                	arpl   WORD PTR [edi],bp
     725:	69 6e 70 75 74 00 2f 	imul   ebp,DWORD PTR [esi+0x70],0x2f007475
     72c:	68 6f 6d 65 2f       	push   0x2f656d6f
     731:	79 6f                	jns    7a2 <sysEnter_Vector-0x12f85e>
     733:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     73a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     73d:	73 73                	jae    7b2 <sysEnter_Vector-0x12f84e>
     73f:	2f                   	das    
     740:	6c                   	ins    BYTE PTR es:[edi],dx
     741:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     748:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     74e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     754:	78 2d                	js     783 <sysEnter_Vector-0x12f87d>
     756:	67 6e                	outs   dx,BYTE PTR ds:[si]
     758:	75 2f                	jne    789 <sysEnter_Vector-0x12f877>
     75a:	35 2e 33 2e 30       	xor    eax,0x302e332e
     75f:	2f                   	das    
     760:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     767:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     76a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     76e:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     772:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     776:	65                   	gs
     777:	2f                   	das    
     778:	2e                   	cs
     779:	2e                   	cs
     77a:	2f                   	das    
     77b:	2e                   	cs
     77c:	2e                   	cs
     77d:	2f                   	das    
     77e:	2e                   	cs
     77f:	2e                   	cs
     780:	2f                   	das    
     781:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     785:	6a 2f                	push   0x2f
     787:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     78a:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     791:	6e                   	outs   dx,BYTE PTR ds:[esi]
     792:	65                   	gs
     793:	6c                   	ins    BYTE PTR es:[edi],dx
     794:	2f                   	das    
     795:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     79c:	00 00                	add    BYTE PTR [eax],al
     79e:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     7a5:	00 01                	add    BYTE PTR [ecx],al
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	73 74                	jae    81f <sysEnter_Vector-0x12f7e1>
     7ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7b2:	63 
     7b3:	2e                   	cs
     7b4:	68 00 02 00 00       	push   0x200
     7b9:	6d                   	ins    DWORD PTR es:[edi],dx
     7ba:	61                   	popa   
     7bb:	6c                   	ins    BYTE PTR es:[edi],dx
     7bc:	6c                   	ins    BYTE PTR es:[edi],dx
     7bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7be:	63 2e                	arpl   WORD PTR [esi],bp
     7c0:	68 00 03 00 00       	push   0x300
     7c5:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     7cc:	03 00                	add    eax,DWORD PTR [eax]
     7ce:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     7d2:	43                   	inc    ebx
     7d3:	68 72 69 73 4f       	push   0x4f736972
     7d8:	53                   	push   ebx
     7d9:	2e                   	cs
     7da:	68 00 03 00 00       	push   0x300
     7df:	73 79                	jae    85a <sysEnter_Vector-0x12f7a6>
     7e1:	73 63                	jae    846 <sysEnter_Vector-0x12f7ba>
     7e3:	61                   	popa   
     7e4:	6c                   	ins    BYTE PTR es:[edi],dx
     7e5:	6c                   	ins    BYTE PTR es:[edi],dx
     7e6:	73 2e                	jae    816 <sysEnter_Vector-0x12f7ea>
     7e8:	68 00 04 00 00       	push   0x400
     7ed:	00 00                	add    BYTE PTR [eax],al
     7ef:	05 02 1c 0a 00       	add    eax,0xa1c02
     7f4:	9f                   	lahf   
     7f5:	03 0f                	add    ecx,DWORD PTR [edi]
     7f7:	01 d7                	add    edi,edx
     7f9:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     7ff:	75 4b                	jne    84c <sysEnter_Vector-0x12f7b4>
     801:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     807:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     80c:	6a 08                	push   0x8
     80e:	14 75                	adc    al,0x75
     810:	84 68 00             	test   BYTE PTR [eax+0x0],ch
     813:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     816:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     819:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     81f:	06                   	push   es
     820:	66 06                	pushw  es
     822:	68 ad 68 68 76       	push   0x766868ad
     827:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     82a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     82d:	06                   	push   es
     82e:	ac                   	lods   al,BYTE PTR ds:[esi]
     82f:	06                   	push   es
     830:	68 5b 00 02 04       	push   0x402005b
     835:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     83b:	01 01                	add    DWORD PTR [ecx],eax
     83d:	a2 02 00 00 02       	mov    ds:0x2000002,al
     842:	00 f5                	add    ch,dh
     844:	00 00                	add    BYTE PTR [eax],al
     846:	00 01                	add    BYTE PTR [ecx],al
     848:	01 fb                	add    ebx,edi
     84a:	0e                   	push   cs
     84b:	0d 00 01 01 01       	or     eax,0x1010100
     850:	01 00                	add    DWORD PTR [eax],eax
     852:	00 00                	add    BYTE PTR [eax],al
     854:	01 00                	add    DWORD PTR [eax],eax
     856:	00 01                	add    BYTE PTR [ecx],al
     858:	73 72                	jae    8cc <sysEnter_Vector-0x12f734>
     85a:	63 00                	arpl   WORD PTR [eax],ax
     85c:	2f                   	das    
     85d:	68 6f 6d 65 2f       	push   0x2f656d6f
     862:	79 6f                	jns    8d3 <sysEnter_Vector-0x12f72d>
     864:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     86b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     86e:	73 73                	jae    8e3 <sysEnter_Vector-0x12f71d>
     870:	2f                   	das    
     871:	6c                   	ins    BYTE PTR es:[edi],dx
     872:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     879:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     87f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     885:	78 2d                	js     8b4 <sysEnter_Vector-0x12f74c>
     887:	67 6e                	outs   dx,BYTE PTR ds:[si]
     889:	75 2f                	jne    8ba <sysEnter_Vector-0x12f746>
     88b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     890:	2f                   	das    
     891:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     898:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     89b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     89f:	65                   	gs
     8a0:	2f                   	das    
     8a1:	2e                   	cs
     8a2:	2e                   	cs
     8a3:	2f                   	das    
     8a4:	2e                   	cs
     8a5:	2e                   	cs
     8a6:	2f                   	das    
     8a7:	2e                   	cs
     8a8:	2e                   	cs
     8a9:	2f                   	das    
     8aa:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     8ae:	6a 2f                	push   0x2f
     8b0:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     8b3:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     8ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
     8bb:	65                   	gs
     8bc:	6c                   	ins    BYTE PTR es:[edi],dx
     8bd:	2f                   	das    
     8be:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     8c5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     8c8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     8cc:	65 00 00             	add    BYTE PTR gs:[eax],al
     8cf:	6c                   	ins    BYTE PTR es:[edi],dx
     8d0:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     8d7:	4f                   	dec    edi
     8d8:	53                   	push   ebx
     8d9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     8dc:	01 00                	add    DWORD PTR [eax],eax
     8de:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     8e1:	64                   	fs
     8e2:	61                   	popa   
     8e3:	72 67                	jb     94c <sysEnter_Vector-0x12f6b4>
     8e5:	2e                   	cs
     8e6:	68 00 02 00 00       	push   0x200
     8eb:	73 74                	jae    961 <sysEnter_Vector-0x12f69f>
     8ed:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     8f4:	63 
     8f5:	2e                   	cs
     8f6:	68 00 02 00 00       	push   0x200
     8fb:	73 74                	jae    971 <sysEnter_Vector-0x12f68f>
     8fd:	64                   	fs
     8fe:	64                   	fs
     8ff:	65                   	gs
     900:	66                   	data16
     901:	2e                   	cs
     902:	68 00 02 00 00       	push   0x200
     907:	73 79                	jae    982 <sysEnter_Vector-0x12f67e>
     909:	73 63                	jae    96e <sysEnter_Vector-0x12f692>
     90b:	61                   	popa   
     90c:	6c                   	ins    BYTE PTR es:[edi],dx
     90d:	6c                   	ins    BYTE PTR es:[edi],dx
     90e:	73 2e                	jae    93e <sysEnter_Vector-0x12f6c2>
     910:	68 00 03 00 00       	push   0x300
     915:	6d                   	ins    DWORD PTR es:[edi],dx
     916:	61                   	popa   
     917:	6c                   	ins    BYTE PTR es:[edi],dx
     918:	6c                   	ins    BYTE PTR es:[edi],dx
     919:	6f                   	outs   dx,DWORD PTR ds:[esi]
     91a:	63 2e                	arpl   WORD PTR [esi],bp
     91c:	68 00 04 00 00       	push   0x400
     921:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     928:	04 00                	add    al,0x0
     92a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     92e:	43                   	inc    ebx
     92f:	68 72 69 73 4f       	push   0x4f736972
     934:	53                   	push   ebx
     935:	2e                   	cs
     936:	68 00 04 00 00       	push   0x400
     93b:	00 00                	add    BYTE PTR [eax],al
     93d:	05 02 84 0b 00       	add    eax,0xb8402
     942:	9f                   	lahf   
     943:	03 11                	add    edx,DWORD PTR [ecx]
     945:	01 08                	add    DWORD PTR [eax],ecx
     947:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     94a:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     950:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     956:	75 08                	jne    960 <sysEnter_Vector-0x12f6a0>
     958:	9f                   	lahf   
     959:	3d 77 08 21 75       	cmp    eax,0x75210877
     95e:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     964:	75 08                	jne    96e <sysEnter_Vector-0x12f692>
     966:	d7                   	xlat   BYTE PTR ds:[ebx]
     967:	3d 77 08 21 08       	cmp    eax,0x8210877
     96c:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     970:	c9                   	leave  
     971:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     974:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     97a:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     97d:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     980:	77 08                	ja     98a <sysEnter_Vector-0x12f676>
     982:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     985:	c9                   	leave  
     986:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     98c:	68 08 c9 08 83       	push   0x8308c908
     991:	5b                   	pop    ebx
     992:	08 22                	or     BYTE PTR [edx],ah
     994:	68 08 c9 08 83       	push   0x8308c908
     999:	5b                   	pop    ebx
     99a:	f4                   	hlt    
     99b:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     99f:	31 f4                	xor    esp,esi
     9a1:	68 08 91 5a 31       	push   0x315a9108
     9a6:	08 21                	or     BYTE PTR [ecx],ah
     9a8:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     9ac:	77 c9                	ja     977 <sysEnter_Vector-0x12f689>
     9ae:	c9                   	leave  
     9af:	3f                   	aas    
     9b0:	c9                   	leave  
     9b1:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     9b7:	3d 31 f3 75 08       	cmp    eax,0x875f331
     9bc:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     9c1:	08 21                	or     BYTE PTR [ecx],ah
     9c3:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     9ca:	67 02 22             	add    ah,BYTE PTR [bp+si]
     9cd:	14 08                	adc    al,0x8
     9cf:	ae                   	scas   al,BYTE PTR es:[edi]
     9d0:	4c                   	dec    esp
     9d1:	ca 08 4b             	retf   0x4b08
     9d4:	91                   	xchg   ecx,eax
     9d5:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     9db:	67 02 2f             	add    ch,BYTE PTR [bx]
     9de:	14 00                	adc    al,0x0
     9e0:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     9e3:	02 31                	add    dh,BYTE PTR [ecx]
     9e5:	13 00                	adc    eax,DWORD PTR [eax]
     9e7:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     9ea:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     9f0:	bb 00 02 04 02       	mov    ebx,0x2040200
     9f5:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     9f8:	00 02                	add    BYTE PTR [edx],al
     9fa:	04 01                	add    al,0x1
     9fc:	06                   	push   es
     9fd:	4a                   	dec    edx
     9fe:	06                   	push   es
     9ff:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     a02:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     a08:	f3 75 08             	repz jne a13 <sysEnter_Vector-0x12f5ed>
     a0b:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     a10:	c9                   	leave  
     a11:	c9                   	leave  
     a12:	32 c9                	xor    cl,cl
     a14:	f3 40                	repz inc eax
     a16:	c9                   	leave  
     a17:	08 13                	or     BYTE PTR [ebx],dl
     a19:	32 f5                	xor    dh,ch
     a1b:	75 76                	jne    a93 <sysEnter_Vector-0x12f56d>
     a1d:	ad                   	lods   eax,DWORD PTR ds:[esi]
     a1e:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     a23:	67 75 91             	addr16 jne 9b7 <sysEnter_Vector-0x12f649>
     a26:	5a                   	pop    edx
     a27:	75 67                	jne    a90 <sysEnter_Vector-0x12f570>
     a29:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     a2c:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     a32:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     a37:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     a3b:	3c 44                	cmp    al,0x44
     a3d:	00 02                	add    BYTE PTR [edx],al
     a3f:	04 02                	add    al,0x2
     a41:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     a44:	00 02                	add    BYTE PTR [edx],al
     a46:	04 01                	add    al,0x1
     a48:	06                   	push   es
     a49:	4a                   	dec    edx
     a4a:	00 02                	add    BYTE PTR [edx],al
     a4c:	04 03                	add    al,0x3
     a4e:	82                   	(bad)  
     a4f:	06                   	push   es
     a50:	03 23                	add    esp,DWORD PTR [ebx]
     a52:	d6                   	(bad)  
     a53:	00 02                	add    BYTE PTR [edx],al
     a55:	04 01                	add    al,0x1
     a57:	06                   	push   es
     a58:	66 06                	pushw  es
     a5a:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     a5d:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     a62:	31 08                	xor    DWORD PTR [eax],ecx
     a64:	5b                   	pop    ebx
     a65:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     a6b:	08 23                	or     BYTE PTR [ebx],ah
     a6d:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     a73:	04 01                	add    al,0x1
     a75:	06                   	push   es
     a76:	66 06                	pushw  es
     a78:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     a7b:	f3 c9                	repz leave 
     a7d:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     a81:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     a84:	06                   	push   es
     a85:	66 06                	pushw  es
     a87:	9f                   	lahf   
     a88:	4c                   	dec    esp
     a89:	00 02                	add    BYTE PTR [edx],al
     a8b:	04 01                	add    al,0x1
     a8d:	06                   	push   es
     a8e:	66 06                	pushw  es
     a90:	d8 02                	fadd   DWORD PTR [edx]
     a92:	27                   	daa    
     a93:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     a99:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     a9f:	06                   	push   es
     aa0:	9e                   	sahf   
     aa1:	06                   	push   es
     aa2:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     aa5:	f3 c9                	repz leave 
     aa7:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     aaa:	79 02                	jns    aae <sysEnter_Vector-0x12f552>
     aac:	34 01                	xor    al,0x1
     aae:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     ab1:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     ab4:	02 2f                	add    ch,BYTE PTR [edi]
     ab6:	14 02                	adc    al,0x2
     ab8:	31 13                	xor    DWORD PTR [ebx],edx
     aba:	00 02                	add    BYTE PTR [edx],al
     abc:	04 02                	add    al,0x2
     abe:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     ac5:	00 02                	add    BYTE PTR [edx],al
     ac7:	04 02                	add    al,0x2
     ac9:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     acc:	00 02                	add    BYTE PTR [edx],al
     ace:	04 01                	add    al,0x1
     ad0:	06                   	push   es
     ad1:	4a                   	dec    edx
     ad2:	06                   	push   es
     ad3:	03 1b                	add    ebx,DWORD PTR [ebx]
     ad5:	d6                   	(bad)  
     ad6:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     adb:	31 c9                	xor    ecx,ecx
     add:	9f                   	lahf   
     ade:	02 02                	add    al,BYTE PTR [edx]
     ae0:	00 01                	add    BYTE PTR [ecx],al
     ae2:	01 11                	add    DWORD PTR [ecx],edx
     ae4:	01 00                	add    DWORD PTR [eax],eax
     ae6:	00 02                	add    BYTE PTR [edx],al
     ae8:	00 f2                	add    dl,dh
     aea:	00 00                	add    BYTE PTR [eax],al
     aec:	00 01                	add    BYTE PTR [ecx],al
     aee:	01 fb                	add    ebx,edi
     af0:	0e                   	push   cs
     af1:	0d 00 01 01 01       	or     eax,0x1010100
     af6:	01 00                	add    DWORD PTR [eax],eax
     af8:	00 00                	add    BYTE PTR [eax],al
     afa:	01 00                	add    DWORD PTR [eax],eax
     afc:	00 01                	add    BYTE PTR [ecx],al
     afe:	73 72                	jae    b72 <sysEnter_Vector-0x12f48e>
     b00:	63 00                	arpl   WORD PTR [eax],ax
     b02:	2f                   	das    
     b03:	68 6f 6d 65 2f       	push   0x2f656d6f
     b08:	79 6f                	jns    b79 <sysEnter_Vector-0x12f487>
     b0a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b11:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b14:	73 73                	jae    b89 <sysEnter_Vector-0x12f477>
     b16:	2f                   	das    
     b17:	6c                   	ins    BYTE PTR es:[edi],dx
     b18:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b1f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b25:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b2b:	78 2d                	js     b5a <sysEnter_Vector-0x12f4a6>
     b2d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b2f:	75 2f                	jne    b60 <sysEnter_Vector-0x12f4a0>
     b31:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b36:	2f                   	das    
     b37:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b3e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b41:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b45:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     b49:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b4d:	65                   	gs
     b4e:	2f                   	das    
     b4f:	2e                   	cs
     b50:	2e                   	cs
     b51:	2f                   	das    
     b52:	2e                   	cs
     b53:	2e                   	cs
     b54:	2f                   	das    
     b55:	2e                   	cs
     b56:	2e                   	cs
     b57:	2f                   	das    
     b58:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     b5c:	6a 2f                	push   0x2f
     b5e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     b61:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     b68:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b69:	65                   	gs
     b6a:	6c                   	ins    BYTE PTR es:[edi],dx
     b6b:	2f                   	das    
     b6c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b73:	00 00                	add    BYTE PTR [eax],al
     b75:	6c                   	ins    BYTE PTR es:[edi],dx
     b76:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     b7d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     b80:	01 00                	add    DWORD PTR [eax],eax
     b82:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b85:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b8c:	63 
     b8d:	2e                   	cs
     b8e:	68 00 02 00 00       	push   0x200
     b93:	73 74                	jae    c09 <sysEnter_Vector-0x12f3f7>
     b95:	64                   	fs
     b96:	64                   	fs
     b97:	65                   	gs
     b98:	66                   	data16
     b99:	2e                   	cs
     b9a:	68 00 02 00 00       	push   0x200
     b9f:	74 79                	je     c1a <sysEnter_Vector-0x12f3e6>
     ba1:	70 65                	jo     c08 <sysEnter_Vector-0x12f3f8>
     ba3:	73 2e                	jae    bd3 <sysEnter_Vector-0x12f42d>
     ba5:	68 00 03 00 00       	push   0x300
     baa:	73 79                	jae    c25 <sysEnter_Vector-0x12f3db>
     bac:	73 63                	jae    c11 <sysEnter_Vector-0x12f3ef>
     bae:	61                   	popa   
     baf:	6c                   	ins    BYTE PTR es:[edi],dx
     bb0:	6c                   	ins    BYTE PTR es:[edi],dx
     bb1:	73 2e                	jae    be1 <sysEnter_Vector-0x12f41f>
     bb3:	68 00 04 00 00       	push   0x400
     bb8:	6d                   	ins    DWORD PTR es:[edi],dx
     bb9:	61                   	popa   
     bba:	6c                   	ins    BYTE PTR es:[edi],dx
     bbb:	6c                   	ins    BYTE PTR es:[edi],dx
     bbc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     bbd:	63 2e                	arpl   WORD PTR [esi],bp
     bbf:	68 00 03 00 00       	push   0x300
     bc4:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     bcb:	03 00                	add    eax,DWORD PTR [eax]
     bcd:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     bd1:	43                   	inc    ebx
     bd2:	68 72 69 73 4f       	push   0x4f736972
     bd7:	53                   	push   ebx
     bd8:	2e                   	cs
     bd9:	68 00 03 00 00       	push   0x300
     bde:	00 00                	add    BYTE PTR [eax],al
     be0:	05 02 74 17 00       	add    eax,0x177402
     be5:	9f                   	lahf   
     be6:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     bec:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     bf1:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     bf4:	05 00 01 01 6e       	add    eax,0x6e010100
     bf9:	01 00                	add    DWORD PTR [eax],eax
     bfb:	00 02                	add    BYTE PTR [edx],al
     bfd:	00 e5                	add    ch,ah
     bff:	00 00                	add    BYTE PTR [eax],al
     c01:	00 01                	add    BYTE PTR [ecx],al
     c03:	01 fb                	add    ebx,edi
     c05:	0e                   	push   cs
     c06:	0d 00 01 01 01       	or     eax,0x1010100
     c0b:	01 00                	add    DWORD PTR [eax],eax
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	01 00                	add    DWORD PTR [eax],eax
     c11:	00 01                	add    BYTE PTR [ecx],al
     c13:	73 72                	jae    c87 <sysEnter_Vector-0x12f379>
     c15:	63 00                	arpl   WORD PTR [eax],ax
     c17:	2f                   	das    
     c18:	68 6f 6d 65 2f       	push   0x2f656d6f
     c1d:	79 6f                	jns    c8e <sysEnter_Vector-0x12f372>
     c1f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c26:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     c29:	73 73                	jae    c9e <sysEnter_Vector-0x12f362>
     c2b:	2f                   	das    
     c2c:	6c                   	ins    BYTE PTR es:[edi],dx
     c2d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     c34:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     c3a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     c40:	78 2d                	js     c6f <sysEnter_Vector-0x12f391>
     c42:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c44:	75 2f                	jne    c75 <sysEnter_Vector-0x12f38b>
     c46:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c4b:	2f                   	das    
     c4c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c53:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c56:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c5a:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     c5e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c62:	65                   	gs
     c63:	2f                   	das    
     c64:	2e                   	cs
     c65:	2e                   	cs
     c66:	2f                   	das    
     c67:	2e                   	cs
     c68:	2e                   	cs
     c69:	2f                   	das    
     c6a:	2e                   	cs
     c6b:	2e                   	cs
     c6c:	2f                   	das    
     c6d:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     c71:	6a 2f                	push   0x2f
     c73:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     c76:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     c7d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c7e:	65                   	gs
     c7f:	6c                   	ins    BYTE PTR es:[edi],dx
     c80:	2f                   	das    
     c81:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	6d                   	ins    DWORD PTR es:[edi],dx
     c8b:	61                   	popa   
     c8c:	6c                   	ins    BYTE PTR es:[edi],dx
     c8d:	6c                   	ins    BYTE PTR es:[edi],dx
     c8e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c8f:	63 2e                	arpl   WORD PTR [esi],bp
     c91:	63 00                	arpl   WORD PTR [eax],ax
     c93:	01 00                	add    DWORD PTR [eax],eax
     c95:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c98:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c9f:	63 
     ca0:	2e                   	cs
     ca1:	68 00 02 00 00       	push   0x200
     ca6:	73 74                	jae    d1c <sysEnter_Vector-0x12f2e4>
     ca8:	64                   	fs
     ca9:	64                   	fs
     caa:	65                   	gs
     cab:	66                   	data16
     cac:	2e                   	cs
     cad:	68 00 02 00 00       	push   0x200
     cb2:	6d                   	ins    DWORD PTR es:[edi],dx
     cb3:	61                   	popa   
     cb4:	6c                   	ins    BYTE PTR es:[edi],dx
     cb5:	6c                   	ins    BYTE PTR es:[edi],dx
     cb6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cb7:	63 2e                	arpl   WORD PTR [esi],bp
     cb9:	68 00 03 00 00       	push   0x300
     cbe:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     cc5:	03 00                	add    eax,DWORD PTR [eax]
     cc7:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     ccb:	43                   	inc    ebx
     ccc:	68 72 69 73 4f       	push   0x4f736972
     cd1:	53                   	push   ebx
     cd2:	2e                   	cs
     cd3:	68 00 03 00 00       	push   0x300
     cd8:	73 79                	jae    d53 <sysEnter_Vector-0x12f2ad>
     cda:	73 63                	jae    d3f <sysEnter_Vector-0x12f2c1>
     cdc:	61                   	popa   
     cdd:	6c                   	ins    BYTE PTR es:[edi],dx
     cde:	6c                   	ins    BYTE PTR es:[edi],dx
     cdf:	73 2e                	jae    d0f <sysEnter_Vector-0x12f2f1>
     ce1:	68 00 04 00 00       	push   0x400
     ce6:	00 00                	add    BYTE PTR [eax],al
     ce8:	05 02 e8 17 00       	add    eax,0x17e802
     ced:	9f                   	lahf   
     cee:	03 0d 01 08 21 02    	add    ecx,DWORD PTR ds:0x2210801
     cf4:	24 13                	and    al,0x13
     cf6:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     cfb:	f5                   	cmc    
     cfc:	92                   	xchg   edx,eax
     cfd:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     d03:	04 01                	add    al,0x1
     d05:	06                   	push   es
     d06:	66 06                	pushw  es
     d08:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     d0d:	59                   	pop    ecx
     d0e:	31 f5                	xor    ebp,esi
     d10:	00 02                	add    BYTE PTR [edx],al
     d12:	04 01                	add    al,0x1
     d14:	06                   	push   es
     d15:	c8 06 cb 68          	enter  0xcb06,0x68
     d19:	93                   	xchg   ebx,eax
     d1a:	bf 03 74 90 3f       	mov    edi,0x3f907403
     d1f:	43                   	inc    ebx
     d20:	23 31                	and    esi,DWORD PTR [ecx]
     d22:	08 27                	or     BYTE PTR [edi],ah
     d24:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     d2a:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     d2f:	f3 02 26             	repz add ah,BYTE PTR [esi]
     d32:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     d39:	e5 ad                	in     eax,0xad
     d3b:	91                   	xchg   ecx,eax
     d3c:	91                   	xchg   ecx,eax
     d3d:	75 08                	jne    d47 <sysEnter_Vector-0x12f2b9>
     d3f:	d7                   	xlat   BYTE PTR ds:[ebx]
     d40:	d7                   	xlat   BYTE PTR ds:[ebx]
     d41:	08 13                	or     BYTE PTR [ebx],dl
     d43:	91                   	xchg   ecx,eax
     d44:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     d47:	91                   	xchg   ecx,eax
     d48:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     d4d:	08 23                	or     BYTE PTR [ebx],ah
     d4f:	08 16                	or     BYTE PTR [esi],dl
     d51:	93                   	xchg   ebx,eax
     d52:	02 23                	add    ah,BYTE PTR [ebx]
     d54:	13 08                	adc    ecx,DWORD PTR [eax]
     d56:	e7 d7                	out    0xd7,eax
     d58:	3d 5b f3 08 13       	cmp    eax,0x1308f35b
     d5d:	31 c9                	xor    ecx,ecx
     d5f:	ad                   	lods   eax,DWORD PTR ds:[esi]
     d60:	3f                   	aas    
     d61:	08 13                	or     BYTE PTR [ebx],dl
     d63:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     d69:	01 f1                	add    ecx,esi
     d6b:	00 00                	add    BYTE PTR [eax],al
     d6d:	00 02                	add    BYTE PTR [edx],al
     d6f:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     d75:	01 fb                	add    ebx,edi
     d77:	0e                   	push   cs
     d78:	0d 00 01 01 01       	or     eax,0x1010100
     d7d:	01 00                	add    DWORD PTR [eax],eax
     d7f:	00 00                	add    BYTE PTR [eax],al
     d81:	01 00                	add    DWORD PTR [eax],eax
     d83:	00 01                	add    BYTE PTR [ecx],al
     d85:	73 72                	jae    df9 <sysEnter_Vector-0x12f207>
     d87:	63 00                	arpl   WORD PTR [eax],ax
     d89:	2f                   	das    
     d8a:	68 6f 6d 65 2f       	push   0x2f656d6f
     d8f:	79 6f                	jns    e00 <sysEnter_Vector-0x12f200>
     d91:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d98:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d9b:	73 73                	jae    e10 <sysEnter_Vector-0x12f1f0>
     d9d:	2f                   	das    
     d9e:	6c                   	ins    BYTE PTR es:[edi],dx
     d9f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     da6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     dac:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     db2:	78 2d                	js     de1 <sysEnter_Vector-0x12f21f>
     db4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     db6:	75 2f                	jne    de7 <sysEnter_Vector-0x12f219>
     db8:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dbd:	2f                   	das    
     dbe:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     dc5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     dc8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     dcc:	65 00 00             	add    BYTE PTR gs:[eax],al
     dcf:	6d                   	ins    DWORD PTR es:[edi],dx
     dd0:	65                   	gs
     dd1:	6d                   	ins    DWORD PTR es:[edi],dx
     dd2:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     dd5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     dd8:	01 00                	add    DWORD PTR [eax],eax
     dda:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ddd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     de4:	63 
     de5:	2e                   	cs
     de6:	68 00 02 00 00       	push   0x200
     deb:	73 74                	jae    e61 <sysEnter_Vector-0x12f19f>
     ded:	64                   	fs
     dee:	64                   	fs
     def:	65                   	gs
     df0:	66                   	data16
     df1:	2e                   	cs
     df2:	68 00 02 00 00       	push   0x200
     df7:	6d                   	ins    DWORD PTR es:[edi],dx
     df8:	61                   	popa   
     df9:	6c                   	ins    BYTE PTR es:[edi],dx
     dfa:	6c                   	ins    BYTE PTR es:[edi],dx
     dfb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dfc:	63 2e                	arpl   WORD PTR [esi],bp
     dfe:	68 00 03 00 00       	push   0x300
     e03:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     e0a:	03 00                	add    eax,DWORD PTR [eax]
     e0c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     e10:	43                   	inc    ebx
     e11:	68 72 69 73 4f       	push   0x4f736972
     e16:	53                   	push   ebx
     e17:	2e                   	cs
     e18:	68 00 03 00 00       	push   0x300
     e1d:	00 00                	add    BYTE PTR [eax],al
     e1f:	05 02 1c 1c 00       	add    eax,0x1c1c02
     e24:	9f                   	lahf   
     e25:	03 0b                	add    ecx,DWORD PTR [ebx]
     e27:	01 f5                	add    ebp,esi
     e29:	d7                   	xlat   BYTE PTR ds:[ebx]
     e2a:	d7                   	xlat   BYTE PTR ds:[ebx]
     e2b:	68 91 67 68 83       	push   0x83686791
     e30:	91                   	xchg   ecx,eax
     e31:	91                   	xchg   ecx,eax
     e32:	2f                   	das    
     e33:	08 1f                	or     BYTE PTR [edi],bl
     e35:	e8 08 57 ca 84       	call   84ca6542 <sysEnter_Vector+0x84b76542>
     e3a:	68 83 67 68 83       	push   0x83686783
     e3f:	91                   	xchg   ecx,eax
     e40:	91                   	xchg   ecx,eax
     e41:	2f                   	das    
     e42:	08 1f                	or     BYTE PTR [edi],bl
     e44:	e8 08 57 ca 5c       	call   5cca6551 <sysEnter_Vector+0x5cb76551>
     e49:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     e4f:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     e55:	3e                   	ds
     e56:	31 c9                	xor    ecx,ecx
     e58:	08 13                	or     BYTE PTR [ebx],dl
     e5a:	02 02                	add    al,BYTE PTR [edx]
     e5c:	00 01                	add    BYTE PTR [ecx],al
     e5e:	01 d4                	add    esp,edx
     e60:	00 00                	add    BYTE PTR [eax],al
     e62:	00 02                	add    BYTE PTR [edx],al
     e64:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     e6a:	01 fb                	add    ebx,edi
     e6c:	0e                   	push   cs
     e6d:	0d 00 01 01 01       	or     eax,0x1010100
     e72:	01 00                	add    DWORD PTR [eax],eax
     e74:	00 00                	add    BYTE PTR [eax],al
     e76:	01 00                	add    DWORD PTR [eax],eax
     e78:	00 01                	add    BYTE PTR [ecx],al
     e7a:	73 72                	jae    eee <sysEnter_Vector-0x12f112>
     e7c:	63 00                	arpl   WORD PTR [eax],ax
     e7e:	2f                   	das    
     e7f:	68 6f 6d 65 2f       	push   0x2f656d6f
     e84:	79 6f                	jns    ef5 <sysEnter_Vector-0x12f10b>
     e86:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e8d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e90:	73 73                	jae    f05 <sysEnter_Vector-0x12f0fb>
     e92:	2f                   	das    
     e93:	6c                   	ins    BYTE PTR es:[edi],dx
     e94:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e9b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ea1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ea7:	78 2d                	js     ed6 <sysEnter_Vector-0x12f12a>
     ea9:	67 6e                	outs   dx,BYTE PTR ds:[si]
     eab:	75 2f                	jne    edc <sysEnter_Vector-0x12f124>
     ead:	35 2e 33 2e 30       	xor    eax,0x302e332e
     eb2:	2f                   	das    
     eb3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     eba:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ebd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ec1:	65 00 00             	add    BYTE PTR gs:[eax],al
     ec4:	6d                   	ins    DWORD PTR es:[edi],dx
     ec5:	65                   	gs
     ec6:	6d                   	ins    DWORD PTR es:[edi],dx
     ec7:	73 65                	jae    f2e <sysEnter_Vector-0x12f0d2>
     ec9:	74 2e                	je     ef9 <sysEnter_Vector-0x12f107>
     ecb:	63 00                	arpl   WORD PTR [eax],ax
     ecd:	01 00                	add    DWORD PTR [eax],eax
     ecf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ed2:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ed9:	63 
     eda:	2e                   	cs
     edb:	68 00 02 00 00       	push   0x200
     ee0:	73 74                	jae    f56 <sysEnter_Vector-0x12f0aa>
     ee2:	64                   	fs
     ee3:	64                   	fs
     ee4:	65                   	gs
     ee5:	66                   	data16
     ee6:	2e                   	cs
     ee7:	68 00 02 00 00       	push   0x200
     eec:	6d                   	ins    DWORD PTR es:[edi],dx
     eed:	61                   	popa   
     eee:	6c                   	ins    BYTE PTR es:[edi],dx
     eef:	6c                   	ins    BYTE PTR es:[edi],dx
     ef0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ef1:	63 2e                	arpl   WORD PTR [esi],bp
     ef3:	68 00 03 00 00       	push   0x300
     ef8:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     eff:	03 00                	add    eax,DWORD PTR [eax]
     f01:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     f05:	43                   	inc    ebx
     f06:	68 72 69 73 4f       	push   0x4f736972
     f0b:	53                   	push   ebx
     f0c:	2e                   	cs
     f0d:	68 00 03 00 00       	push   0x300
     f12:	00 00                	add    BYTE PTR [eax],al
     f14:	05 02 d8 1d 00       	add    eax,0x1dd802
     f19:	9f                   	lahf   
     f1a:	1a f3                	sbb    dh,bl
     f1c:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     f22:	ca 9f 2f             	retf   0x2f9f
     f25:	d5 bd                	aad    0xbd
     f27:	9f                   	lahf   
     f28:	2f                   	das    
     f29:	f1                   	icebp  
     f2a:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     f2f:	c9                   	leave  
     f30:	08 13                	or     BYTE PTR [ebx],dl
     f32:	02 02                	add    al,BYTE PTR [edx]
     f34:	00 01                	add    BYTE PTR [ecx],al
     f36:	01 f0                	add    eax,esi
     f38:	00 00                	add    BYTE PTR [eax],al
     f3a:	00 02                	add    BYTE PTR [edx],al
     f3c:	00 d7                	add    bh,dl
     f3e:	00 00                	add    BYTE PTR [eax],al
     f40:	00 01                	add    BYTE PTR [ecx],al
     f42:	01 fb                	add    ebx,edi
     f44:	0e                   	push   cs
     f45:	0d 00 01 01 01       	or     eax,0x1010100
     f4a:	01 00                	add    DWORD PTR [eax],eax
     f4c:	00 00                	add    BYTE PTR [eax],al
     f4e:	01 00                	add    DWORD PTR [eax],eax
     f50:	00 01                	add    BYTE PTR [ecx],al
     f52:	73 72                	jae    fc6 <sysEnter_Vector-0x12f03a>
     f54:	63 00                	arpl   WORD PTR [eax],ax
     f56:	2f                   	das    
     f57:	68 6f 6d 65 2f       	push   0x2f656d6f
     f5c:	79 6f                	jns    fcd <sysEnter_Vector-0x12f033>
     f5e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f65:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f68:	73 73                	jae    fdd <sysEnter_Vector-0x12f023>
     f6a:	2f                   	das    
     f6b:	6c                   	ins    BYTE PTR es:[edi],dx
     f6c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f73:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f79:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f7f:	78 2d                	js     fae <sysEnter_Vector-0x12f052>
     f81:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f83:	75 2f                	jne    fb4 <sysEnter_Vector-0x12f04c>
     f85:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f8a:	2f                   	das    
     f8b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f92:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f95:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f99:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     f9d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     fa1:	65                   	gs
     fa2:	2f                   	das    
     fa3:	2e                   	cs
     fa4:	2e                   	cs
     fa5:	2f                   	das    
     fa6:	2e                   	cs
     fa7:	2e                   	cs
     fa8:	2f                   	das    
     fa9:	2e                   	cs
     faa:	2e                   	cs
     fab:	2f                   	das    
     fac:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     fb0:	6a 2f                	push   0x2f
     fb2:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     fb5:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     fbc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fbd:	65                   	gs
     fbe:	6c                   	ins    BYTE PTR es:[edi],dx
     fbf:	2f                   	das    
     fc0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     fc7:	00 00                	add    BYTE PTR [eax],al
     fc9:	70 69                	jo     1034 <sysEnter_Vector-0x12efcc>
     fcb:	70 65                	jo     1032 <sysEnter_Vector-0x12efce>
     fcd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     fd0:	01 00                	add    DWORD PTR [eax],eax
     fd2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fd5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     fdc:	63 
     fdd:	2e                   	cs
     fde:	68 00 02 00 00       	push   0x200
     fe3:	6d                   	ins    DWORD PTR es:[edi],dx
     fe4:	61                   	popa   
     fe5:	6c                   	ins    BYTE PTR es:[edi],dx
     fe6:	6c                   	ins    BYTE PTR es:[edi],dx
     fe7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fe8:	63 2e                	arpl   WORD PTR [esi],bp
     fea:	68 00 03 00 00       	push   0x300
     fef:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     ff6:	03 00                	add    eax,DWORD PTR [eax]
     ff8:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     ffc:	43                   	inc    ebx
     ffd:	68 72 69 73 4f       	push   0x4f736972
    1002:	53                   	push   ebx
    1003:	2e                   	cs
    1004:	68 00 03 00 00       	push   0x300
    1009:	73 79                	jae    1084 <sysEnter_Vector-0x12ef7c>
    100b:	73 63                	jae    1070 <sysEnter_Vector-0x12ef90>
    100d:	61                   	popa   
    100e:	6c                   	ins    BYTE PTR es:[edi],dx
    100f:	6c                   	ins    BYTE PTR es:[edi],dx
    1010:	73 2e                	jae    1040 <sysEnter_Vector-0x12efc0>
    1012:	68 00 04 00 00       	push   0x400
    1017:	00 00                	add    BYTE PTR [eax],al
    1019:	05 02 c0 1e 00       	add    eax,0x1ec002
    101e:	9f                   	lahf   
    101f:	03 0a                	add    ecx,DWORD PTR [edx]
    1021:	01 08                	add    DWORD PTR [eax],ecx
    1023:	13 08                	adc    ecx,DWORD PTR [eax]
    1025:	2f                   	das    
    1026:	02 05 00 01 01 e8    	add    al,BYTE PTR ds:0xe8010100
    102c:	01 00                	add    DWORD PTR [eax],eax
    102e:	00 02                	add    BYTE PTR [edx],al
    1030:	00 ab 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],ch
    1036:	01 fb                	add    ebx,edi
    1038:	0e                   	push   cs
    1039:	0d 00 01 01 01       	or     eax,0x1010100
    103e:	01 00                	add    DWORD PTR [eax],eax
    1040:	00 00                	add    BYTE PTR [eax],al
    1042:	01 00                	add    DWORD PTR [eax],eax
    1044:	00 01                	add    BYTE PTR [ecx],al
    1046:	73 72                	jae    10ba <sysEnter_Vector-0x12ef46>
    1048:	63 00                	arpl   WORD PTR [eax],ax
    104a:	2f                   	das    
    104b:	68 6f 6d 65 2f       	push   0x2f656d6f
    1050:	79 6f                	jns    10c1 <sysEnter_Vector-0x12ef3f>
    1052:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1059:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    105c:	73 73                	jae    10d1 <sysEnter_Vector-0x12ef2f>
    105e:	2f                   	das    
    105f:	6c                   	ins    BYTE PTR es:[edi],dx
    1060:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1067:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    106d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1073:	78 2d                	js     10a2 <sysEnter_Vector-0x12ef5e>
    1075:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1077:	75 2f                	jne    10a8 <sysEnter_Vector-0x12ef58>
    1079:	35 2e 33 2e 30       	xor    eax,0x302e332e
    107e:	2f                   	das    
    107f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1086:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1089:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    108d:	65 00 00             	add    BYTE PTR gs:[eax],al
    1090:	73 70                	jae    1102 <sysEnter_Vector-0x12eefe>
    1092:	72 69                	jb     10fd <sysEnter_Vector-0x12ef03>
    1094:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1095:	74 66                	je     10fd <sysEnter_Vector-0x12ef03>
    1097:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    109a:	01 00                	add    DWORD PTR [eax],eax
    109c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    109f:	64                   	fs
    10a0:	61                   	popa   
    10a1:	72 67                	jb     110a <sysEnter_Vector-0x12eef6>
    10a3:	2e                   	cs
    10a4:	68 00 02 00 00       	push   0x200
    10a9:	73 74                	jae    111f <sysEnter_Vector-0x12eee1>
    10ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    10b2:	63 
    10b3:	2e                   	cs
    10b4:	68 00 02 00 00       	push   0x200
    10b9:	6d                   	ins    DWORD PTR es:[edi],dx
    10ba:	61                   	popa   
    10bb:	6c                   	ins    BYTE PTR es:[edi],dx
    10bc:	6c                   	ins    BYTE PTR es:[edi],dx
    10bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
    10be:	63 2e                	arpl   WORD PTR [esi],bp
    10c0:	68 00 03 00 00       	push   0x300
    10c5:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    10cc:	03 00                	add    eax,DWORD PTR [eax]
    10ce:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    10d2:	43                   	inc    ebx
    10d3:	68 72 69 73 4f       	push   0x4f736972
    10d8:	53                   	push   ebx
    10d9:	2e                   	cs
    10da:	68 00 03 00 00       	push   0x300
    10df:	00 00                	add    BYTE PTR [eax],al
    10e1:	05 02 ec 1e 00       	add    eax,0x1eec02
    10e6:	9f                   	lahf   
    10e7:	03 0a                	add    ecx,DWORD PTR [edx]
    10e9:	01 08                	add    DWORD PTR [eax],ecx
    10eb:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    10ee:	02 29                	add    ch,BYTE PTR [ecx]
    10f0:	11 08                	adc    DWORD PTR [eax],ecx
    10f2:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    10f8:	0a 08                	or     cl,BYTE PTR [eax]
    10fa:	2e                   	cs
    10fb:	91                   	xchg   ecx,eax
    10fc:	9f                   	lahf   
    10fd:	4b                   	dec    ebx
    10fe:	00 02                	add    BYTE PTR [edx],al
    1100:	04 01                	add    al,0x1
    1102:	06                   	push   es
    1103:	66 06                	pushw  es
    1105:	67 9f                	addr16 lahf 
    1107:	00 02                	add    BYTE PTR [edx],al
    1109:	04 01                	add    al,0x1
    110b:	06                   	push   es
    110c:	9e                   	sahf   
    110d:	00 02                	add    BYTE PTR [edx],al
    110f:	04 02                	add    al,0x2
    1111:	74 00                	je     1113 <sysEnter_Vector-0x12eeed>
    1113:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1116:	58                   	pop    eax
    1117:	00 02                	add    BYTE PTR [edx],al
    1119:	04 04                	add    al,0x4
    111b:	06                   	push   es
    111c:	3d 00 02 04 04       	cmp    eax,0x4040200
    1121:	4b                   	dec    ebx
    1122:	9f                   	lahf   
    1123:	67 4b                	addr16 dec ebx
    1125:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    112a:	9f                   	lahf   
    112b:	4b                   	dec    ebx
    112c:	4d                   	dec    ebp
    112d:	9f                   	lahf   
    112e:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    1132:	75 67                	jne    119b <sysEnter_Vector-0x12ee65>
    1134:	f5                   	cmc    
    1135:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    113b:	67 9f                	addr16 lahf 
    113d:	2f                   	das    
    113e:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    1143:	67 d7                	xlat   BYTE PTR ds:[bx]
    1145:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    114b:	e3 ca                	jecxz  1117 <sysEnter_Vector-0x12eee9>
    114d:	2f                   	das    
    114e:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    1153:	ca 2f b9             	retf   0xb92f
    1156:	ca 00 02             	retf   0x200
    1159:	04 01                	add    al,0x1
    115b:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    1160:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    1166:	76 91                	jbe    10f9 <sysEnter_Vector-0x12ef07>
    1168:	08 d8                	or     al,bl
    116a:	4b                   	dec    ebx
    116b:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    116e:	4b                   	dec    ebx
    116f:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    1172:	4b                   	dec    ebx
    1173:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    1176:	13 08                	adc    ecx,DWORD PTR [eax]
    1178:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    117e:	4f                   	dec    edi
    117f:	75 9f                	jne    1120 <sysEnter_Vector-0x12eee0>
    1181:	91                   	xchg   ecx,eax
    1182:	08 13                	or     BYTE PTR [ebx],dl
    1184:	08 13                	or     BYTE PTR [ebx],dl
    1186:	9f                   	lahf   
    1187:	92                   	xchg   edx,eax
    1188:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    118b:	75 00                	jne    118d <sysEnter_Vector-0x12ee73>
    118d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1190:	06                   	push   es
    1191:	9e                   	sahf   
    1192:	00 02                	add    BYTE PTR [edx],al
    1194:	04 02                	add    al,0x2
    1196:	9e                   	sahf   
    1197:	06                   	push   es
    1198:	9f                   	lahf   
    1199:	bb 94 76 02 23       	mov    ebx,0x23027694
    119e:	14 9f                	adc    al,0x9f
    11a0:	2f                   	das    
    11a1:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    11a6:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    11ab:	08 30                	or     BYTE PTR [eax],dh
    11ad:	76 9f                	jbe    114e <sysEnter_Vector-0x12eeb2>
    11af:	2f                   	das    
    11b0:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    11b5:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    11bb:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    11be:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11c1:	06                   	push   es
    11c2:	4a                   	dec    edx
    11c3:	06                   	push   es
    11c4:	84 2f                	test   BYTE PTR [edi],ch
    11c6:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    11cb:	4d                   	dec    ebp
    11cc:	ab                   	stos   DWORD PTR es:[edi],eax
    11cd:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    11d3:	55                   	push   ebp
    11d4:	d7                   	xlat   BYTE PTR ds:[ebx]
    11d5:	ca 5b bb             	retf   0xbb5b
    11d8:	5c                   	pop    esp
    11d9:	75 31                	jne    120c <sysEnter_Vector-0x12edf4>
    11db:	4c                   	dec    esp
    11dc:	75 32                	jne    1210 <sysEnter_Vector-0x12edf0>
    11de:	4c                   	dec    esp
    11df:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    11e5:	91                   	xchg   ecx,eax
    11e6:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    11e9:	03 0a                	add    ecx,DWORD PTR [edx]
    11eb:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    11ee:	67 08 2f             	or     BYTE PTR [bx],ch
    11f1:	9f                   	lahf   
    11f2:	91                   	xchg   ecx,eax
    11f3:	9f                   	lahf   
    11f4:	f4                   	hlt    
    11f5:	d7                   	xlat   BYTE PTR ds:[ebx]
    11f6:	00 02                	add    BYTE PTR [edx],al
    11f8:	04 02                	add    al,0x2
    11fa:	03 e8                	add    ebp,eax
    11fc:	7e 08                	jle    1206 <sysEnter_Vector-0x12edfa>
    11fe:	f2 00 02             	repnz add BYTE PTR [edx],al
    1201:	04 01                	add    al,0x1
    1203:	06                   	push   es
    1204:	90                   	nop
    1205:	06                   	push   es
    1206:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    120c:	5b                   	pop    ebx
    120d:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    1210:	76 3d                	jbe    124f <sysEnter_Vector-0x12edb1>
    1212:	02 02                	add    al,BYTE PTR [edx]
    1214:	00 01                	add    BYTE PTR [ecx],al
    1216:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    121c:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    1222:	01 fb                	add    ebx,edi
    1224:	0e                   	push   cs
    1225:	0d 00 01 01 01       	or     eax,0x1010100
    122a:	01 00                	add    DWORD PTR [eax],eax
    122c:	00 00                	add    BYTE PTR [eax],al
    122e:	01 00                	add    DWORD PTR [eax],eax
    1230:	00 01                	add    BYTE PTR [ecx],al
    1232:	73 72                	jae    12a6 <sysEnter_Vector-0x12ed5a>
    1234:	63 00                	arpl   WORD PTR [eax],ax
    1236:	2f                   	das    
    1237:	68 6f 6d 65 2f       	push   0x2f656d6f
    123c:	79 6f                	jns    12ad <sysEnter_Vector-0x12ed53>
    123e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1245:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1248:	73 73                	jae    12bd <sysEnter_Vector-0x12ed43>
    124a:	2f                   	das    
    124b:	6c                   	ins    BYTE PTR es:[edi],dx
    124c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1253:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1259:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    125f:	78 2d                	js     128e <sysEnter_Vector-0x12ed72>
    1261:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1263:	75 2f                	jne    1294 <sysEnter_Vector-0x12ed6c>
    1265:	35 2e 33 2e 30       	xor    eax,0x302e332e
    126a:	2f                   	das    
    126b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1272:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1275:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1279:	65 00 00             	add    BYTE PTR gs:[eax],al
    127c:	73 74                	jae    12f2 <sysEnter_Vector-0x12ed0e>
    127e:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    1285:	00 
    1286:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1289:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1290:	63 
    1291:	2e                   	cs
    1292:	68 00 02 00 00       	push   0x200
    1297:	6d                   	ins    DWORD PTR es:[edi],dx
    1298:	61                   	popa   
    1299:	6c                   	ins    BYTE PTR es:[edi],dx
    129a:	6c                   	ins    BYTE PTR es:[edi],dx
    129b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    129c:	63 2e                	arpl   WORD PTR [esi],bp
    129e:	68 00 03 00 00       	push   0x300
    12a3:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    12aa:	03 00                	add    eax,DWORD PTR [eax]
    12ac:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    12b0:	43                   	inc    ebx
    12b1:	68 72 69 73 4f       	push   0x4f736972
    12b6:	53                   	push   ebx
    12b7:	2e                   	cs
    12b8:	68 00 03 00 00       	push   0x300
    12bd:	00 00                	add    BYTE PTR [eax],al
    12bf:	05 02 04 26 00       	add    eax,0x260402
    12c4:	9f                   	lahf   
    12c5:	03 10                	add    edx,DWORD PTR [eax]
    12c7:	01 08                	add    DWORD PTR [eax],ecx
    12c9:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    12cc:	31 d7                	xor    edi,edx
    12ce:	d7                   	xlat   BYTE PTR ds:[ebx]
    12cf:	d7                   	xlat   BYTE PTR ds:[ebx]
    12d0:	d7                   	xlat   BYTE PTR ds:[ebx]
    12d1:	ad                   	lods   eax,DWORD PTR ds:[esi]
    12d2:	e6 21                	out    0x21,al
    12d4:	02 05 00 01 01 d6    	add    al,BYTE PTR ds:0xd6010100
    12da:	00 00                	add    BYTE PTR [eax],al
    12dc:	00 02                	add    BYTE PTR [edx],al
    12de:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
    12e4:	01 fb                	add    ebx,edi
    12e6:	0e                   	push   cs
    12e7:	0d 00 01 01 01       	or     eax,0x1010100
    12ec:	01 00                	add    DWORD PTR [eax],eax
    12ee:	00 00                	add    BYTE PTR [eax],al
    12f0:	01 00                	add    DWORD PTR [eax],eax
    12f2:	00 01                	add    BYTE PTR [ecx],al
    12f4:	73 72                	jae    1368 <sysEnter_Vector-0x12ec98>
    12f6:	63 2f                	arpl   WORD PTR [edi],bp
    12f8:	73 74                	jae    136e <sysEnter_Vector-0x12ec92>
    12fa:	72 69                	jb     1365 <sysEnter_Vector-0x12ec9b>
    12fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12fd:	67 73 00             	addr16 jae 1300 <sysEnter_Vector-0x12ed00>
    1300:	2f                   	das    
    1301:	68 6f 6d 65 2f       	push   0x2f656d6f
    1306:	79 6f                	jns    1377 <sysEnter_Vector-0x12ec89>
    1308:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    130f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1312:	73 73                	jae    1387 <sysEnter_Vector-0x12ec79>
    1314:	2f                   	das    
    1315:	6c                   	ins    BYTE PTR es:[edi],dx
    1316:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    131d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1323:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1329:	78 2d                	js     1358 <sysEnter_Vector-0x12eca8>
    132b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    132d:	75 2f                	jne    135e <sysEnter_Vector-0x12eca2>
    132f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1334:	2f                   	das    
    1335:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    133c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    133f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1343:	65 00 00             	add    BYTE PTR gs:[eax],al
    1346:	73 74                	jae    13bc <sysEnter_Vector-0x12ec44>
    1348:	72 63                	jb     13ad <sysEnter_Vector-0x12ec53>
    134a:	61                   	popa   
    134b:	74 2e                	je     137b <sysEnter_Vector-0x12ec85>
    134d:	63 00                	arpl   WORD PTR [eax],ax
    134f:	01 00                	add    DWORD PTR [eax],eax
    1351:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1354:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    135b:	63 
    135c:	2e                   	cs
    135d:	68 00 02 00 00       	push   0x200
    1362:	6d                   	ins    DWORD PTR es:[edi],dx
    1363:	61                   	popa   
    1364:	6c                   	ins    BYTE PTR es:[edi],dx
    1365:	6c                   	ins    BYTE PTR es:[edi],dx
    1366:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1367:	63 2e                	arpl   WORD PTR [esi],bp
    1369:	68 00 03 00 00       	push   0x300
    136e:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1375:	03 00                	add    eax,DWORD PTR [eax]
    1377:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    137b:	43                   	inc    ebx
    137c:	68 72 69 73 4f       	push   0x4f736972
    1381:	53                   	push   ebx
    1382:	2e                   	cs
    1383:	68 00 03 00 00       	push   0x300
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	05 02 88 26 00       	add    eax,0x268802
    138f:	9f                   	lahf   
    1390:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    1396:	24 13                	and    al,0x13
    1398:	3d 5b 08 21 02       	cmp    eax,0x221085b
    139d:	24 13                	and    al,0x13
    139f:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
    13a4:	49                   	dec    ecx
    13a5:	e8 76 2f 08 4b       	call   4b084320 <sysEnter_Vector+0x4af54320>
    13aa:	4b                   	dec    ebx
    13ab:	47                   	inc    edi
    13ac:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
    13b3:	c5 00                	lds    eax,FWORD PTR [eax]
    13b5:	00 00                	add    BYTE PTR [eax],al
    13b7:	02 00                	add    al,BYTE PTR [eax]
    13b9:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    13ba:	00 00                	add    BYTE PTR [eax],al
    13bc:	00 01                	add    BYTE PTR [ecx],al
    13be:	01 fb                	add    ebx,edi
    13c0:	0e                   	push   cs
    13c1:	0d 00 01 01 01       	or     eax,0x1010100
    13c6:	01 00                	add    DWORD PTR [eax],eax
    13c8:	00 00                	add    BYTE PTR [eax],al
    13ca:	01 00                	add    DWORD PTR [eax],eax
    13cc:	00 01                	add    BYTE PTR [ecx],al
    13ce:	73 72                	jae    1442 <sysEnter_Vector-0x12ebbe>
    13d0:	63 2f                	arpl   WORD PTR [edi],bp
    13d2:	73 74                	jae    1448 <sysEnter_Vector-0x12ebb8>
    13d4:	72 69                	jb     143f <sysEnter_Vector-0x12ebc1>
    13d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13d7:	67 73 00             	addr16 jae 13da <sysEnter_Vector-0x12ec26>
    13da:	2f                   	das    
    13db:	68 6f 6d 65 2f       	push   0x2f656d6f
    13e0:	79 6f                	jns    1451 <sysEnter_Vector-0x12ebaf>
    13e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13ec:	73 73                	jae    1461 <sysEnter_Vector-0x12eb9f>
    13ee:	2f                   	das    
    13ef:	6c                   	ins    BYTE PTR es:[edi],dx
    13f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1403:	78 2d                	js     1432 <sysEnter_Vector-0x12ebce>
    1405:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1407:	75 2f                	jne    1438 <sysEnter_Vector-0x12ebc8>
    1409:	35 2e 33 2e 30       	xor    eax,0x302e332e
    140e:	2f                   	das    
    140f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1416:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1419:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    141d:	65 00 00             	add    BYTE PTR gs:[eax],al
    1420:	73 74                	jae    1496 <sysEnter_Vector-0x12eb6a>
    1422:	72 63                	jb     1487 <sysEnter_Vector-0x12eb79>
    1424:	6d                   	ins    DWORD PTR es:[edi],dx
    1425:	70 2e                	jo     1455 <sysEnter_Vector-0x12ebab>
    1427:	63 00                	arpl   WORD PTR [eax],ax
    1429:	01 00                	add    DWORD PTR [eax],eax
    142b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    142e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1435:	63 
    1436:	2e                   	cs
    1437:	68 00 02 00 00       	push   0x200
    143c:	6d                   	ins    DWORD PTR es:[edi],dx
    143d:	61                   	popa   
    143e:	6c                   	ins    BYTE PTR es:[edi],dx
    143f:	6c                   	ins    BYTE PTR es:[edi],dx
    1440:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1441:	63 2e                	arpl   WORD PTR [esi],bp
    1443:	68 00 03 00 00       	push   0x300
    1448:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    144f:	03 00                	add    eax,DWORD PTR [eax]
    1451:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1455:	43                   	inc    ebx
    1456:	68 72 69 73 4f       	push   0x4f736972
    145b:	53                   	push   ebx
    145c:	2e                   	cs
    145d:	68 00 03 00 00       	push   0x300
    1462:	00 00                	add    BYTE PTR [eax],al
    1464:	05 02 74 27 00       	add    eax,0x277402
    1469:	9f                   	lahf   
    146a:	03 18                	add    ebx,DWORD PTR [eax]
    146c:	01 08                	add    DWORD PTR [eax],ecx
    146e:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    1474:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
    147a:	01 01                	add    DWORD PTR [ecx],eax
    147c:	e6 00                	out    0x0,al
    147e:	00 00                	add    BYTE PTR [eax],al
    1480:	02 00                	add    al,BYTE PTR [eax]
    1482:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1483:	00 00                	add    BYTE PTR [eax],al
    1485:	00 01                	add    BYTE PTR [ecx],al
    1487:	01 fb                	add    ebx,edi
    1489:	0e                   	push   cs
    148a:	0d 00 01 01 01       	or     eax,0x1010100
    148f:	01 00                	add    DWORD PTR [eax],eax
    1491:	00 00                	add    BYTE PTR [eax],al
    1493:	01 00                	add    DWORD PTR [eax],eax
    1495:	00 01                	add    BYTE PTR [ecx],al
    1497:	73 72                	jae    150b <sysEnter_Vector-0x12eaf5>
    1499:	63 2f                	arpl   WORD PTR [edi],bp
    149b:	73 74                	jae    1511 <sysEnter_Vector-0x12eaef>
    149d:	72 69                	jb     1508 <sysEnter_Vector-0x12eaf8>
    149f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14a0:	67 73 00             	addr16 jae 14a3 <sysEnter_Vector-0x12eb5d>
    14a3:	2f                   	das    
    14a4:	68 6f 6d 65 2f       	push   0x2f656d6f
    14a9:	79 6f                	jns    151a <sysEnter_Vector-0x12eae6>
    14ab:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    14b2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    14b5:	73 73                	jae    152a <sysEnter_Vector-0x12ead6>
    14b7:	2f                   	das    
    14b8:	6c                   	ins    BYTE PTR es:[edi],dx
    14b9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    14c0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    14c6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    14cc:	78 2d                	js     14fb <sysEnter_Vector-0x12eb05>
    14ce:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14d0:	75 2f                	jne    1501 <sysEnter_Vector-0x12eaff>
    14d2:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14d7:	2f                   	das    
    14d8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14df:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    14e2:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    14e6:	65 00 00             	add    BYTE PTR gs:[eax],al
    14e9:	73 74                	jae    155f <sysEnter_Vector-0x12eaa1>
    14eb:	72 63                	jb     1550 <sysEnter_Vector-0x12eab0>
    14ed:	70 79                	jo     1568 <sysEnter_Vector-0x12ea98>
    14ef:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    14f2:	01 00                	add    DWORD PTR [eax],eax
    14f4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    14f7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    14fe:	63 
    14ff:	2e                   	cs
    1500:	68 00 02 00 00       	push   0x200
    1505:	6d                   	ins    DWORD PTR es:[edi],dx
    1506:	61                   	popa   
    1507:	6c                   	ins    BYTE PTR es:[edi],dx
    1508:	6c                   	ins    BYTE PTR es:[edi],dx
    1509:	6f                   	outs   dx,DWORD PTR ds:[esi]
    150a:	63 2e                	arpl   WORD PTR [esi],bp
    150c:	68 00 03 00 00       	push   0x300
    1511:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1518:	03 00                	add    eax,DWORD PTR [eax]
    151a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    151e:	43                   	inc    ebx
    151f:	68 72 69 73 4f       	push   0x4f736972
    1524:	53                   	push   ebx
    1525:	2e                   	cs
    1526:	68 00 03 00 00       	push   0x300
    152b:	00 00                	add    BYTE PTR [eax],al
    152d:	05 02 d4 27 00       	add    eax,0x27d402
    1532:	9f                   	lahf   
    1533:	16                   	push   ss
    1534:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1538:	04 01                	add    al,0x1
    153a:	06                   	push   es
    153b:	20 06                	and    BYTE PTR [esi],al
    153d:	08 ca                	or     dl,cl
    153f:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1545:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1548:	06                   	push   es
    1549:	20 06                	and    BYTE PTR [esi],al
    154b:	08 ca                	or     dl,cl
    154d:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1553:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1556:	06                   	push   es
    1557:	20 00                	and    BYTE PTR [eax],al
    1559:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    155c:	08 c8                	or     al,cl
    155e:	06                   	push   es
    155f:	ca 3d 02             	retf   0x23d
    1562:	02 00                	add    al,BYTE PTR [eax]
    1564:	01 01                	add    DWORD PTR [ecx],eax
    1566:	d5 00                	aad    0x0
    1568:	00 00                	add    BYTE PTR [eax],al
    156a:	02 00                	add    al,BYTE PTR [eax]
    156c:	a8 00                	test   al,0x0
    156e:	00 00                	add    BYTE PTR [eax],al
    1570:	01 01                	add    DWORD PTR [ecx],eax
    1572:	fb                   	sti    
    1573:	0e                   	push   cs
    1574:	0d 00 01 01 01       	or     eax,0x1010100
    1579:	01 00                	add    DWORD PTR [eax],eax
    157b:	00 00                	add    BYTE PTR [eax],al
    157d:	01 00                	add    DWORD PTR [eax],eax
    157f:	00 01                	add    BYTE PTR [ecx],al
    1581:	73 72                	jae    15f5 <sysEnter_Vector-0x12ea0b>
    1583:	63 2f                	arpl   WORD PTR [edi],bp
    1585:	73 74                	jae    15fb <sysEnter_Vector-0x12ea05>
    1587:	72 69                	jb     15f2 <sysEnter_Vector-0x12ea0e>
    1589:	6e                   	outs   dx,BYTE PTR ds:[esi]
    158a:	67 73 00             	addr16 jae 158d <sysEnter_Vector-0x12ea73>
    158d:	2f                   	das    
    158e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1593:	79 6f                	jns    1604 <sysEnter_Vector-0x12e9fc>
    1595:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    159c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    159f:	73 73                	jae    1614 <sysEnter_Vector-0x12e9ec>
    15a1:	2f                   	das    
    15a2:	6c                   	ins    BYTE PTR es:[edi],dx
    15a3:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    15aa:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    15b0:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    15b6:	78 2d                	js     15e5 <sysEnter_Vector-0x12ea1b>
    15b8:	67 6e                	outs   dx,BYTE PTR ds:[si]
    15ba:	75 2f                	jne    15eb <sysEnter_Vector-0x12ea15>
    15bc:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15c1:	2f                   	das    
    15c2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15c9:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    15cc:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    15d0:	65 00 00             	add    BYTE PTR gs:[eax],al
    15d3:	73 74                	jae    1649 <sysEnter_Vector-0x12e9b7>
    15d5:	72 69                	jb     1640 <sysEnter_Vector-0x12e9c0>
    15d7:	73 6e                	jae    1647 <sysEnter_Vector-0x12e9b9>
    15d9:	75 6d                	jne    1648 <sysEnter_Vector-0x12e9b8>
    15db:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15de:	01 00                	add    DWORD PTR [eax],eax
    15e0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15e3:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15ea:	63 
    15eb:	2e                   	cs
    15ec:	68 00 02 00 00       	push   0x200
    15f1:	6d                   	ins    DWORD PTR es:[edi],dx
    15f2:	61                   	popa   
    15f3:	6c                   	ins    BYTE PTR es:[edi],dx
    15f4:	6c                   	ins    BYTE PTR es:[edi],dx
    15f5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15f6:	63 2e                	arpl   WORD PTR [esi],bp
    15f8:	68 00 03 00 00       	push   0x300
    15fd:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1604:	03 00                	add    eax,DWORD PTR [eax]
    1606:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    160a:	43                   	inc    ebx
    160b:	68 72 69 73 4f       	push   0x4f736972
    1610:	53                   	push   ebx
    1611:	2e                   	cs
    1612:	68 00 03 00 00       	push   0x300
    1617:	00 00                	add    BYTE PTR [eax],al
    1619:	05 02 9c 28 00       	add    eax,0x289c02
    161e:	9f                   	lahf   
    161f:	1a 08                	sbb    cl,BYTE PTR [eax]
    1621:	59                   	pop    ecx
    1622:	00 02                	add    BYTE PTR [edx],al
    1624:	04 01                	add    al,0x1
    1626:	06                   	push   es
    1627:	66                   	data16
    1628:	00 02                	add    BYTE PTR [edx],al
    162a:	04 02                	add    al,0x2
    162c:	66 06                	pushw  es
    162e:	75 59                	jne    1689 <sysEnter_Vector-0x12e977>
    1630:	31 f3                	xor    ebx,esi
    1632:	76 2f                	jbe    1663 <sysEnter_Vector-0x12e99d>
    1634:	08 e5                	or     ch,ah
    1636:	72 08                	jb     1640 <sysEnter_Vector-0x12e9c0>
    1638:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    163b:	02 00                	add    al,BYTE PTR [eax]
    163d:	01 01                	add    DWORD PTR [ecx],eax
    163f:	df 00                	fild   WORD PTR [eax]
    1641:	00 00                	add    BYTE PTR [eax],al
    1643:	02 00                	add    al,BYTE PTR [eax]
    1645:	b2 00                	mov    dl,0x0
    1647:	00 00                	add    BYTE PTR [eax],al
    1649:	01 01                	add    DWORD PTR [ecx],eax
    164b:	fb                   	sti    
    164c:	0e                   	push   cs
    164d:	0d 00 01 01 01       	or     eax,0x1010100
    1652:	01 00                	add    DWORD PTR [eax],eax
    1654:	00 00                	add    BYTE PTR [eax],al
    1656:	01 00                	add    DWORD PTR [eax],eax
    1658:	00 01                	add    BYTE PTR [ecx],al
    165a:	73 72                	jae    16ce <sysEnter_Vector-0x12e932>
    165c:	63 2f                	arpl   WORD PTR [edi],bp
    165e:	73 74                	jae    16d4 <sysEnter_Vector-0x12e92c>
    1660:	72 69                	jb     16cb <sysEnter_Vector-0x12e935>
    1662:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1663:	67 73 00             	addr16 jae 1666 <sysEnter_Vector-0x12e99a>
    1666:	2f                   	das    
    1667:	68 6f 6d 65 2f       	push   0x2f656d6f
    166c:	79 6f                	jns    16dd <sysEnter_Vector-0x12e923>
    166e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1675:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1678:	73 73                	jae    16ed <sysEnter_Vector-0x12e913>
    167a:	2f                   	das    
    167b:	6c                   	ins    BYTE PTR es:[edi],dx
    167c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1683:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1689:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    168f:	78 2d                	js     16be <sysEnter_Vector-0x12e942>
    1691:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1693:	75 2f                	jne    16c4 <sysEnter_Vector-0x12e93c>
    1695:	35 2e 33 2e 30       	xor    eax,0x302e332e
    169a:	2f                   	das    
    169b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16a2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    16a5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    16a9:	65 00 00             	add    BYTE PTR gs:[eax],al
    16ac:	73 74                	jae    1722 <sysEnter_Vector-0x12e8de>
    16ae:	72 6c                	jb     171c <sysEnter_Vector-0x12e8e4>
    16b0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    16b2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    16b5:	01 00                	add    DWORD PTR [eax],eax
    16b7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    16ba:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    16c1:	63 
    16c2:	2e                   	cs
    16c3:	68 00 02 00 00       	push   0x200
    16c8:	73 74                	jae    173e <sysEnter_Vector-0x12e8c2>
    16ca:	64                   	fs
    16cb:	64                   	fs
    16cc:	65                   	gs
    16cd:	66                   	data16
    16ce:	2e                   	cs
    16cf:	68 00 02 00 00       	push   0x200
    16d4:	6d                   	ins    DWORD PTR es:[edi],dx
    16d5:	61                   	popa   
    16d6:	6c                   	ins    BYTE PTR es:[edi],dx
    16d7:	6c                   	ins    BYTE PTR es:[edi],dx
    16d8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    16d9:	63 2e                	arpl   WORD PTR [esi],bp
    16db:	68 00 03 00 00       	push   0x300
    16e0:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    16e7:	03 00                	add    eax,DWORD PTR [eax]
    16e9:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    16ed:	43                   	inc    ebx
    16ee:	68 72 69 73 4f       	push   0x4f736972
    16f3:	53                   	push   ebx
    16f4:	2e                   	cs
    16f5:	68 00 03 00 00       	push   0x300
    16fa:	00 00                	add    BYTE PTR [eax],al
    16fc:	05 02 28 29 00       	add    eax,0x292802
    1701:	9f                   	lahf   
    1702:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    1707:	e6 3d                	out    0x3d,al
    1709:	31 c9                	xor    ecx,ecx
    170b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    170c:	31 f3                	xor    ebx,esi
    170e:	75 2f                	jne    173f <sysEnter_Vector-0x12e8c1>
    1710:	49                   	dec    ecx
    1711:	00 02                	add    BYTE PTR [edx],al
    1713:	04 01                	add    al,0x1
    1715:	06                   	push   es
    1716:	e4 06                	in     al,0x6
    1718:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    171e:	02 00                	add    al,BYTE PTR [eax]
    1720:	01 01                	add    DWORD PTR [ecx],eax
    1722:	c1 00 00             	rol    DWORD PTR [eax],0x0
    1725:	00 02                	add    BYTE PTR [edx],al
    1727:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    172a:	00 00                	add    BYTE PTR [eax],al
    172c:	01 01                	add    DWORD PTR [ecx],eax
    172e:	fb                   	sti    
    172f:	0e                   	push   cs
    1730:	0d 00 01 01 01       	or     eax,0x1010100
    1735:	01 00                	add    DWORD PTR [eax],eax
    1737:	00 00                	add    BYTE PTR [eax],al
    1739:	01 00                	add    DWORD PTR [eax],eax
    173b:	00 01                	add    BYTE PTR [ecx],al
    173d:	73 72                	jae    17b1 <sysEnter_Vector-0x12e84f>
    173f:	63 2f                	arpl   WORD PTR [edi],bp
    1741:	73 74                	jae    17b7 <sysEnter_Vector-0x12e849>
    1743:	72 69                	jb     17ae <sysEnter_Vector-0x12e852>
    1745:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1746:	67 73 00             	addr16 jae 1749 <sysEnter_Vector-0x12e8b7>
    1749:	2f                   	das    
    174a:	68 6f 6d 65 2f       	push   0x2f656d6f
    174f:	79 6f                	jns    17c0 <sysEnter_Vector-0x12e840>
    1751:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1758:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    175b:	73 73                	jae    17d0 <sysEnter_Vector-0x12e830>
    175d:	2f                   	das    
    175e:	6c                   	ins    BYTE PTR es:[edi],dx
    175f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1766:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    176c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1772:	78 2d                	js     17a1 <sysEnter_Vector-0x12e85f>
    1774:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1776:	75 2f                	jne    17a7 <sysEnter_Vector-0x12e859>
    1778:	35 2e 33 2e 30       	xor    eax,0x302e332e
    177d:	2f                   	das    
    177e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1785:	00 00                	add    BYTE PTR [eax],al
    1787:	73 74                	jae    17fd <sysEnter_Vector-0x12e803>
    1789:	72 6e                	jb     17f9 <sysEnter_Vector-0x12e807>
    178b:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    178e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1791:	01 00                	add    DWORD PTR [eax],eax
    1793:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1796:	64                   	fs
    1797:	64                   	fs
    1798:	65                   	gs
    1799:	66                   	data16
    179a:	2e                   	cs
    179b:	68 00 02 00 00       	push   0x200
    17a0:	00 00                	add    BYTE PTR [eax],al
    17a2:	05 02 cc 29 00       	add    eax,0x29cc02
    17a7:	9f                   	lahf   
    17a8:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    17ab:	c9                   	leave  
    17ac:	2f                   	das    
    17ad:	f3 00 02             	repz add BYTE PTR [edx],al
    17b0:	04 01                	add    al,0x1
    17b2:	06                   	push   es
    17b3:	f2 00 02             	repnz add BYTE PTR [edx],al
    17b6:	04 02                	add    al,0x2
    17b8:	74 06                	je     17c0 <sysEnter_Vector-0x12e840>
    17ba:	75 9f                	jne    175b <sysEnter_Vector-0x12e8a5>
    17bc:	70 00                	jo     17be <sysEnter_Vector-0x12e842>
    17be:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17c1:	06                   	push   es
    17c2:	ba 06 6b 59 31       	mov    edx,0x31596b06
    17c7:	c9                   	leave  
    17c8:	2f                   	das    
    17c9:	f3 00 02             	repz add BYTE PTR [edx],al
    17cc:	04 01                	add    al,0x1
    17ce:	06                   	push   es
    17cf:	f2 00 02             	repnz add BYTE PTR [edx],al
    17d2:	04 02                	add    al,0x2
    17d4:	74 06                	je     17dc <sysEnter_Vector-0x12e824>
    17d6:	75 9f                	jne    1777 <sysEnter_Vector-0x12e889>
    17d8:	70 00                	jo     17da <sysEnter_Vector-0x12e826>
    17da:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17dd:	06                   	push   es
    17de:	ba 06 6b 59 02       	mov    edx,0x2596b06
    17e3:	02 00                	add    al,BYTE PTR [eax]
    17e5:	01 01                	add    DWORD PTR [ecx],eax
    17e7:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    17ec:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    17ef:	00 00                	add    BYTE PTR [eax],al
    17f1:	01 01                	add    DWORD PTR [ecx],eax
    17f3:	fb                   	sti    
    17f4:	0e                   	push   cs
    17f5:	0d 00 01 01 01       	or     eax,0x1010100
    17fa:	01 00                	add    DWORD PTR [eax],eax
    17fc:	00 00                	add    BYTE PTR [eax],al
    17fe:	01 00                	add    DWORD PTR [eax],eax
    1800:	00 01                	add    BYTE PTR [ecx],al
    1802:	73 72                	jae    1876 <sysEnter_Vector-0x12e78a>
    1804:	63 2f                	arpl   WORD PTR [edi],bp
    1806:	73 74                	jae    187c <sysEnter_Vector-0x12e784>
    1808:	72 69                	jb     1873 <sysEnter_Vector-0x12e78d>
    180a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    180b:	67 73 00             	addr16 jae 180e <sysEnter_Vector-0x12e7f2>
    180e:	2f                   	das    
    180f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1814:	79 6f                	jns    1885 <sysEnter_Vector-0x12e77b>
    1816:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    181d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1820:	73 73                	jae    1895 <sysEnter_Vector-0x12e76b>
    1822:	2f                   	das    
    1823:	6c                   	ins    BYTE PTR es:[edi],dx
    1824:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    182b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1831:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1837:	78 2d                	js     1866 <sysEnter_Vector-0x12e79a>
    1839:	67 6e                	outs   dx,BYTE PTR ds:[si]
    183b:	75 2f                	jne    186c <sysEnter_Vector-0x12e794>
    183d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1842:	2f                   	das    
    1843:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    184a:	00 00                	add    BYTE PTR [eax],al
    184c:	73 74                	jae    18c2 <sysEnter_Vector-0x12e73e>
    184e:	72 6e                	jb     18be <sysEnter_Vector-0x12e742>
    1850:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1853:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1856:	01 00                	add    DWORD PTR [eax],eax
    1858:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    185b:	64                   	fs
    185c:	64                   	fs
    185d:	65                   	gs
    185e:	66                   	data16
    185f:	2e                   	cs
    1860:	68 00 02 00 00       	push   0x200
    1865:	00 00                	add    BYTE PTR [eax],al
    1867:	05 02 9c 2a 00       	add    eax,0x2a9c02
    186c:	9f                   	lahf   
    186d:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    1873:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1876:	00 02                	add    BYTE PTR [edx],al
    1878:	04 01                	add    al,0x1
    187a:	06                   	push   es
    187b:	66 06                	pushw  es
    187d:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1882:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    1887:	02 02                	add    al,BYTE PTR [edx]
    1889:	00 01                	add    BYTE PTR [ecx],al
    188b:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    188e:	00 00                	add    BYTE PTR [eax],al
    1890:	02 00                	add    al,BYTE PTR [eax]
    1892:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1893:	00 00                	add    BYTE PTR [eax],al
    1895:	00 01                	add    BYTE PTR [ecx],al
    1897:	01 fb                	add    ebx,edi
    1899:	0e                   	push   cs
    189a:	0d 00 01 01 01       	or     eax,0x1010100
    189f:	01 00                	add    DWORD PTR [eax],eax
    18a1:	00 00                	add    BYTE PTR [eax],al
    18a3:	01 00                	add    DWORD PTR [eax],eax
    18a5:	00 01                	add    BYTE PTR [ecx],al
    18a7:	73 72                	jae    191b <sysEnter_Vector-0x12e6e5>
    18a9:	63 2f                	arpl   WORD PTR [edi],bp
    18ab:	73 74                	jae    1921 <sysEnter_Vector-0x12e6df>
    18ad:	72 69                	jb     1918 <sysEnter_Vector-0x12e6e8>
    18af:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18b0:	67 73 00             	addr16 jae 18b3 <sysEnter_Vector-0x12e74d>
    18b3:	2f                   	das    
    18b4:	68 6f 6d 65 2f       	push   0x2f656d6f
    18b9:	79 6f                	jns    192a <sysEnter_Vector-0x12e6d6>
    18bb:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    18c2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    18c5:	73 73                	jae    193a <sysEnter_Vector-0x12e6c6>
    18c7:	2f                   	das    
    18c8:	6c                   	ins    BYTE PTR es:[edi],dx
    18c9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    18d0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    18d6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    18dc:	78 2d                	js     190b <sysEnter_Vector-0x12e6f5>
    18de:	67 6e                	outs   dx,BYTE PTR ds:[si]
    18e0:	75 2f                	jne    1911 <sysEnter_Vector-0x12e6ef>
    18e2:	35 2e 33 2e 30       	xor    eax,0x302e332e
    18e7:	2f                   	das    
    18e8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18ef:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    18f2:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    18f6:	65 00 00             	add    BYTE PTR gs:[eax],al
    18f9:	73 74                	jae    196f <sysEnter_Vector-0x12e691>
    18fb:	72 6f                	jb     196c <sysEnter_Vector-0x12e694>
    18fd:	75 6c                	jne    196b <sysEnter_Vector-0x12e695>
    18ff:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1902:	01 00                	add    DWORD PTR [eax],eax
    1904:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1907:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    190e:	63 
    190f:	2e                   	cs
    1910:	68 00 02 00 00       	push   0x200
    1915:	6d                   	ins    DWORD PTR es:[edi],dx
    1916:	61                   	popa   
    1917:	6c                   	ins    BYTE PTR es:[edi],dx
    1918:	6c                   	ins    BYTE PTR es:[edi],dx
    1919:	6f                   	outs   dx,DWORD PTR ds:[esi]
    191a:	63 2e                	arpl   WORD PTR [esi],bp
    191c:	68 00 03 00 00       	push   0x300
    1921:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1928:	03 00                	add    eax,DWORD PTR [eax]
    192a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    192e:	43                   	inc    ebx
    192f:	68 72 69 73 4f       	push   0x4f736972
    1934:	53                   	push   ebx
    1935:	2e                   	cs
    1936:	68 00 03 00 00       	push   0x300
    193b:	00 00                	add    BYTE PTR [eax],al
    193d:	05 02 1c 2b 00       	add    eax,0x2b1c02
    1942:	9f                   	lahf   
    1943:	03 3b                	add    edi,DWORD PTR [ebx]
    1945:	01 08                	add    DWORD PTR [eax],ecx
    1947:	2f                   	das    
    1948:	40                   	inc    eax
    1949:	00 02                	add    BYTE PTR [edx],al
    194b:	04 01                	add    al,0x1
    194d:	7a 00                	jp     194f <sysEnter_Vector-0x12e6b1>
    194f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1952:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1953:	59                   	pop    ecx
    1954:	59                   	pop    ecx
    1955:	75 c9                	jne    1920 <sysEnter_Vector-0x12e6e0>
    1957:	59                   	pop    ecx
    1958:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1959:	00 02                	add    BYTE PTR [edx],al
    195b:	04 02                	add    al,0x2
    195d:	06                   	push   es
    195e:	66                   	data16
    195f:	00 02                	add    BYTE PTR [edx],al
    1961:	04 03                	add    al,0x3
    1963:	66 06                	pushw  es
    1965:	59                   	pop    ecx
    1966:	00 02                	add    BYTE PTR [edx],al
    1968:	04 01                	add    al,0x1
    196a:	06                   	push   es
    196b:	74 06                	je     1973 <sysEnter_Vector-0x12e68d>
    196d:	75 91                	jne    1900 <sysEnter_Vector-0x12e700>
    196f:	3d 76 67 00 02       	cmp    eax,0x2006776
    1974:	04 01                	add    al,0x1
    1976:	06                   	push   es
    1977:	58                   	pop    eax
    1978:	00 02                	add    BYTE PTR [edx],al
    197a:	04 02                	add    al,0x2
    197c:	74 00                	je     197e <sysEnter_Vector-0x12e682>
    197e:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1981:	58                   	pop    eax
    1982:	06                   	push   es
    1983:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1988:	9f                   	lahf   
    1989:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    198d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1990:	06                   	push   es
    1991:	58                   	pop    eax
    1992:	00 02                	add    BYTE PTR [edx],al
    1994:	04 03                	add    al,0x3
    1996:	58                   	pop    eax
    1997:	00 02                	add    BYTE PTR [edx],al
    1999:	04 04                	add    al,0x4
    199b:	74 00                	je     199d <sysEnter_Vector-0x12e663>
    199d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19a0:	58                   	pop    eax
    19a1:	06                   	push   es
    19a2:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    19a5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    19a8:	06                   	push   es
    19a9:	66                   	data16
    19aa:	00 02                	add    BYTE PTR [edx],al
    19ac:	04 02                	add    al,0x2
    19ae:	58                   	pop    eax
    19af:	00 02                	add    BYTE PTR [edx],al
    19b1:	04 03                	add    al,0x3
    19b3:	58                   	pop    eax
    19b4:	06                   	push   es
    19b5:	67 76 59             	addr16 jbe 1a11 <sysEnter_Vector-0x12e5ef>
    19b8:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    19bc:	03 10                	add    edx,DWORD PTR [eax]
    19be:	ac                   	lods   al,BYTE PTR ds:[esi]
    19bf:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    19c2:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    19c5:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    19c8:	67 2f                	addr16 das 
    19ca:	67 00 02             	add    BYTE PTR [bp+si],al
    19cd:	04 01                	add    al,0x1
    19cf:	06                   	push   es
    19d0:	66                   	data16
    19d1:	00 02                	add    BYTE PTR [edx],al
    19d3:	04 02                	add    al,0x2
    19d5:	58                   	pop    eax
    19d6:	00 02                	add    BYTE PTR [edx],al
    19d8:	04 04                	add    al,0x4
    19da:	3c 06                	cmp    al,0x6
    19dc:	59                   	pop    ecx
    19dd:	2f                   	das    
    19de:	02 08                	add    cl,BYTE PTR [eax]
    19e0:	00 01                	add    BYTE PTR [ecx],al
    19e2:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    19e5:	00 00                	add    BYTE PTR [eax],al
    19e7:	02 00                	add    al,BYTE PTR [eax]
    19e9:	2d 00 00 00 01       	sub    eax,0x1000000
    19ee:	01 fb                	add    ebx,edi
    19f0:	0e                   	push   cs
    19f1:	0d 00 01 01 01       	or     eax,0x1010100
    19f6:	01 00                	add    DWORD PTR [eax],eax
    19f8:	00 00                	add    BYTE PTR [eax],al
    19fa:	01 00                	add    DWORD PTR [eax],eax
    19fc:	00 01                	add    BYTE PTR [ecx],al
    19fe:	73 72                	jae    1a72 <sysEnter_Vector-0x12e58e>
    1a00:	63 2f                	arpl   WORD PTR [edi],bp
    1a02:	73 74                	jae    1a78 <sysEnter_Vector-0x12e588>
    1a04:	72 69                	jb     1a6f <sysEnter_Vector-0x12e591>
    1a06:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a07:	67 73 00             	addr16 jae 1a0a <sysEnter_Vector-0x12e5f6>
    1a0a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1a0d:	72 70                	jb     1a7f <sysEnter_Vector-0x12e581>
    1a0f:	61                   	popa   
    1a10:	72 74                	jb     1a86 <sysEnter_Vector-0x12e57a>
    1a12:	73 2e                	jae    1a42 <sysEnter_Vector-0x12e5be>
    1a14:	63 00                	arpl   WORD PTR [eax],ax
    1a16:	01 00                	add    DWORD PTR [eax],eax
    1a18:	00 00                	add    BYTE PTR [eax],al
    1a1a:	00 05 02 9c 2c 00    	add    BYTE PTR ds:0x2c9c02,al
    1a20:	9f                   	lahf   
    1a21:	13 c9                	adc    ecx,ecx
    1a23:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1a24:	3d 02 02 00 01       	cmp    eax,0x1000202
    1a29:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    1a2c:	00 00                	add    BYTE PTR [eax],al
    1a2e:	02 00                	add    al,BYTE PTR [eax]
    1a30:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1a31:	00 00                	add    BYTE PTR [eax],al
    1a33:	00 01                	add    BYTE PTR [ecx],al
    1a35:	01 fb                	add    ebx,edi
    1a37:	0e                   	push   cs
    1a38:	0d 00 01 01 01       	or     eax,0x1010100
    1a3d:	01 00                	add    DWORD PTR [eax],eax
    1a3f:	00 00                	add    BYTE PTR [eax],al
    1a41:	01 00                	add    DWORD PTR [eax],eax
    1a43:	00 01                	add    BYTE PTR [ecx],al
    1a45:	73 72                	jae    1ab9 <sysEnter_Vector-0x12e547>
    1a47:	63 2f                	arpl   WORD PTR [edi],bp
    1a49:	73 74                	jae    1abf <sysEnter_Vector-0x12e541>
    1a4b:	72 69                	jb     1ab6 <sysEnter_Vector-0x12e54a>
    1a4d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a4e:	67 73 00             	addr16 jae 1a51 <sysEnter_Vector-0x12e5af>
    1a51:	2f                   	das    
    1a52:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a57:	79 6f                	jns    1ac8 <sysEnter_Vector-0x12e538>
    1a59:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a60:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a63:	73 73                	jae    1ad8 <sysEnter_Vector-0x12e528>
    1a65:	2f                   	das    
    1a66:	6c                   	ins    BYTE PTR es:[edi],dx
    1a67:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a6e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a74:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a7a:	78 2d                	js     1aa9 <sysEnter_Vector-0x12e557>
    1a7c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a7e:	75 2f                	jne    1aaf <sysEnter_Vector-0x12e551>
    1a80:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a85:	2f                   	das    
    1a86:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a8d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a90:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a94:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a97:	73 74                	jae    1b0d <sysEnter_Vector-0x12e4f3>
    1a99:	72 74                	jb     1b0f <sysEnter_Vector-0x12e4f1>
    1a9b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a9c:	6c                   	ins    BYTE PTR es:[edi],dx
    1a9d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1aa0:	01 00                	add    DWORD PTR [eax],eax
    1aa2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1aa5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1aac:	63 
    1aad:	2e                   	cs
    1aae:	68 00 02 00 00       	push   0x200
    1ab3:	6d                   	ins    DWORD PTR es:[edi],dx
    1ab4:	61                   	popa   
    1ab5:	6c                   	ins    BYTE PTR es:[edi],dx
    1ab6:	6c                   	ins    BYTE PTR es:[edi],dx
    1ab7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1ab8:	63 2e                	arpl   WORD PTR [esi],bp
    1aba:	68 00 03 00 00       	push   0x300
    1abf:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1ac6:	03 00                	add    eax,DWORD PTR [eax]
    1ac8:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1acc:	43                   	inc    ebx
    1acd:	68 72 69 73 4f       	push   0x4f736972
    1ad2:	53                   	push   ebx
    1ad3:	2e                   	cs
    1ad4:	68 00 03 00 00       	push   0x300
    1ad9:	00 00                	add    BYTE PTR [eax],al
    1adb:	05 02 bc 2c 00       	add    eax,0x2cbc02
    1ae0:	9f                   	lahf   
    1ae1:	03 d7                	add    edx,edi
    1ae3:	00 01                	add    BYTE PTR [ecx],al
    1ae5:	08 2f                	or     BYTE PTR [edi],ch
    1ae7:	40                   	inc    eax
    1ae8:	00 02                	add    BYTE PTR [edx],al
    1aea:	04 01                	add    al,0x1
    1aec:	7c 00                	jl     1aee <sysEnter_Vector-0x12e512>
    1aee:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1af1:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1af2:	59                   	pop    ecx
    1af3:	59                   	pop    ecx
    1af4:	75 c9                	jne    1abf <sysEnter_Vector-0x12e541>
    1af6:	59                   	pop    ecx
    1af7:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1af8:	00 02                	add    BYTE PTR [edx],al
    1afa:	04 02                	add    al,0x2
    1afc:	06                   	push   es
    1afd:	66                   	data16
    1afe:	00 02                	add    BYTE PTR [edx],al
    1b00:	04 03                	add    al,0x3
    1b02:	66 06                	pushw  es
    1b04:	59                   	pop    ecx
    1b05:	00 02                	add    BYTE PTR [edx],al
    1b07:	04 01                	add    al,0x1
    1b09:	06                   	push   es
    1b0a:	74 06                	je     1b12 <sysEnter_Vector-0x12e4ee>
    1b0c:	75 91                	jne    1a9f <sysEnter_Vector-0x12e561>
    1b0e:	3d 76 67 00 02       	cmp    eax,0x2006776
    1b13:	04 01                	add    al,0x1
    1b15:	06                   	push   es
    1b16:	58                   	pop    eax
    1b17:	00 02                	add    BYTE PTR [edx],al
    1b19:	04 02                	add    al,0x2
    1b1b:	74 00                	je     1b1d <sysEnter_Vector-0x12e4e3>
    1b1d:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1b20:	58                   	pop    eax
    1b21:	06                   	push   es
    1b22:	03 13                	add    edx,DWORD PTR [ebx]
    1b24:	3c 00                	cmp    al,0x0
    1b26:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b29:	06                   	push   es
    1b2a:	66                   	data16
    1b2b:	00 02                	add    BYTE PTR [edx],al
    1b2d:	04 02                	add    al,0x2
    1b2f:	74 00                	je     1b31 <sysEnter_Vector-0x12e4cf>
    1b31:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1b34:	06                   	push   es
    1b35:	59                   	pop    ecx
    1b36:	00 02                	add    BYTE PTR [edx],al
    1b38:	04 04                	add    al,0x4
    1b3a:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1b40:	f3 9f                	repz lahf 
    1b42:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1b46:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b49:	06                   	push   es
    1b4a:	58                   	pop    eax
    1b4b:	00 02                	add    BYTE PTR [edx],al
    1b4d:	04 03                	add    al,0x3
    1b4f:	58                   	pop    eax
    1b50:	00 02                	add    BYTE PTR [edx],al
    1b52:	04 04                	add    al,0x4
    1b54:	74 00                	je     1b56 <sysEnter_Vector-0x12e4aa>
    1b56:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b59:	58                   	pop    eax
    1b5a:	06                   	push   es
    1b5b:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1b5e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b61:	06                   	push   es
    1b62:	66                   	data16
    1b63:	00 02                	add    BYTE PTR [edx],al
    1b65:	04 02                	add    al,0x2
    1b67:	58                   	pop    eax
    1b68:	00 02                	add    BYTE PTR [edx],al
    1b6a:	04 03                	add    al,0x3
    1b6c:	58                   	pop    eax
    1b6d:	06                   	push   es
    1b6e:	59                   	pop    ecx
    1b6f:	76 59                	jbe    1bca <sysEnter_Vector-0x12e436>
    1b71:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1b75:	03 10                	add    edx,DWORD PTR [eax]
    1b77:	ac                   	lods   al,BYTE PTR ds:[esi]
    1b78:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1b7b:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1b7e:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1b81:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b84:	06                   	push   es
    1b85:	66                   	data16
    1b86:	00 02                	add    BYTE PTR [edx],al
    1b88:	04 02                	add    al,0x2
    1b8a:	74 00                	je     1b8c <sysEnter_Vector-0x12e474>
    1b8c:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1b8f:	58                   	pop    eax
    1b90:	06                   	push   es
    1b91:	4b                   	dec    ebx
    1b92:	67 2f                	addr16 das 
    1b94:	67 00 02             	add    BYTE PTR [bp+si],al
    1b97:	04 01                	add    al,0x1
    1b99:	06                   	push   es
    1b9a:	66                   	data16
    1b9b:	00 02                	add    BYTE PTR [edx],al
    1b9d:	04 02                	add    al,0x2
    1b9f:	58                   	pop    eax
    1ba0:	00 02                	add    BYTE PTR [edx],al
    1ba2:	04 04                	add    al,0x4
    1ba4:	3c 06                	cmp    al,0x6
    1ba6:	59                   	pop    ecx
    1ba7:	2f                   	das    
    1ba8:	02 08                	add    cl,BYTE PTR [eax]
    1baa:	00 01                	add    BYTE PTR [ecx],al
    1bac:	01 d9                	add    ecx,ebx
    1bae:	00 00                	add    BYTE PTR [eax],al
    1bb0:	00 02                	add    BYTE PTR [edx],al
    1bb2:	00 a7 00 00 00 01    	add    BYTE PTR [edi+0x1000000],ah
    1bb8:	01 fb                	add    ebx,edi
    1bba:	0e                   	push   cs
    1bbb:	0d 00 01 01 01       	or     eax,0x1010100
    1bc0:	01 00                	add    DWORD PTR [eax],eax
    1bc2:	00 00                	add    BYTE PTR [eax],al
    1bc4:	01 00                	add    DWORD PTR [eax],eax
    1bc6:	00 01                	add    BYTE PTR [ecx],al
    1bc8:	73 72                	jae    1c3c <sysEnter_Vector-0x12e3c4>
    1bca:	63 2f                	arpl   WORD PTR [edi],bp
    1bcc:	73 74                	jae    1c42 <sysEnter_Vector-0x12e3be>
    1bce:	72 69                	jb     1c39 <sysEnter_Vector-0x12e3c7>
    1bd0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1bd1:	67 73 00             	addr16 jae 1bd4 <sysEnter_Vector-0x12e42c>
    1bd4:	2f                   	das    
    1bd5:	68 6f 6d 65 2f       	push   0x2f656d6f
    1bda:	79 6f                	jns    1c4b <sysEnter_Vector-0x12e3b5>
    1bdc:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1be3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1be6:	73 73                	jae    1c5b <sysEnter_Vector-0x12e3a5>
    1be8:	2f                   	das    
    1be9:	6c                   	ins    BYTE PTR es:[edi],dx
    1bea:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1bf1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1bf7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1bfd:	78 2d                	js     1c2c <sysEnter_Vector-0x12e3d4>
    1bff:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1c01:	75 2f                	jne    1c32 <sysEnter_Vector-0x12e3ce>
    1c03:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1c08:	2f                   	das    
    1c09:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1c10:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1c13:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1c17:	65 00 00             	add    BYTE PTR gs:[eax],al
    1c1a:	73 74                	jae    1c90 <sysEnter_Vector-0x12e370>
    1c1c:	72 74                	jb     1c92 <sysEnter_Vector-0x12e36e>
    1c1e:	72 69                	jb     1c89 <sysEnter_Vector-0x12e377>
    1c20:	6d                   	ins    DWORD PTR es:[edi],dx
    1c21:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1c24:	01 00                	add    DWORD PTR [eax],eax
    1c26:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c29:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1c30:	63 
    1c31:	2e                   	cs
    1c32:	68 00 02 00 00       	push   0x200
    1c37:	6d                   	ins    DWORD PTR es:[edi],dx
    1c38:	61                   	popa   
    1c39:	6c                   	ins    BYTE PTR es:[edi],dx
    1c3a:	6c                   	ins    BYTE PTR es:[edi],dx
    1c3b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c3c:	63 2e                	arpl   WORD PTR [esi],bp
    1c3e:	68 00 03 00 00       	push   0x300
    1c43:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1c4a:	03 00                	add    eax,DWORD PTR [eax]
    1c4c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1c50:	43                   	inc    ebx
    1c51:	68 72 69 73 4f       	push   0x4f736972
    1c56:	53                   	push   ebx
    1c57:	2e                   	cs
    1c58:	68 00 03 00 00       	push   0x300
    1c5d:	00 00                	add    BYTE PTR [eax],al
    1c5f:	05 02 58 2e 00       	add    eax,0x2e5802
    1c64:	9f                   	lahf   
    1c65:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1c6a:	48                   	dec    eax
    1c6b:	b3 08                	mov    bl,0x8
    1c6d:	9f                   	lahf   
    1c6e:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1c74:	06                   	push   es
    1c75:	82                   	(bad)  
    1c76:	06                   	push   es
    1c77:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1c78:	84 00                	test   BYTE PTR [eax],al
    1c7a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c7d:	06                   	push   es
    1c7e:	20 06                	and    BYTE PTR [esi],al
    1c80:	08 ca                	or     dl,cl
    1c82:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1c88:	01 01                	add    DWORD PTR [ecx],eax
    1c8a:	e8 00 00 00 02       	call   2001c8f <sysEnter_Vector+0x1ed1c8f>
    1c8f:	00 ae 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ch
    1c95:	01 fb                	add    ebx,edi
    1c97:	0e                   	push   cs
    1c98:	0d 00 01 01 01       	or     eax,0x1010100
    1c9d:	01 00                	add    DWORD PTR [eax],eax
    1c9f:	00 00                	add    BYTE PTR [eax],al
    1ca1:	01 00                	add    DWORD PTR [eax],eax
    1ca3:	00 01                	add    BYTE PTR [ecx],al
    1ca5:	73 72                	jae    1d19 <sysEnter_Vector-0x12e2e7>
    1ca7:	63 00                	arpl   WORD PTR [eax],ax
    1ca9:	2f                   	das    
    1caa:	68 6f 6d 65 2f       	push   0x2f656d6f
    1caf:	79 6f                	jns    1d20 <sysEnter_Vector-0x12e2e0>
    1cb1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1cb8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1cbb:	73 73                	jae    1d30 <sysEnter_Vector-0x12e2d0>
    1cbd:	2f                   	das    
    1cbe:	6c                   	ins    BYTE PTR es:[edi],dx
    1cbf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1cc6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1ccc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1cd2:	78 2d                	js     1d01 <sysEnter_Vector-0x12e2ff>
    1cd4:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1cd6:	75 2f                	jne    1d07 <sysEnter_Vector-0x12e2f9>
    1cd8:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1cdd:	2f                   	das    
    1cde:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1ce5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1ce8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1cec:	65 00 00             	add    BYTE PTR gs:[eax],al
    1cef:	73 74                	jae    1d65 <sysEnter_Vector-0x12e29b>
    1cf1:	72 72                	jb     1d65 <sysEnter_Vector-0x12e29b>
    1cf3:	65                   	gs
    1cf4:	70 6c                	jo     1d62 <sysEnter_Vector-0x12e29e>
    1cf6:	61                   	popa   
    1cf7:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1cfa:	63 00                	arpl   WORD PTR [eax],ax
    1cfc:	01 00                	add    DWORD PTR [eax],eax
    1cfe:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1d01:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1d08:	63 
    1d09:	2e                   	cs
    1d0a:	68 00 02 00 00       	push   0x200
    1d0f:	73 74                	jae    1d85 <sysEnter_Vector-0x12e27b>
    1d11:	64                   	fs
    1d12:	64                   	fs
    1d13:	65                   	gs
    1d14:	66                   	data16
    1d15:	2e                   	cs
    1d16:	68 00 02 00 00       	push   0x200
    1d1b:	6d                   	ins    DWORD PTR es:[edi],dx
    1d1c:	61                   	popa   
    1d1d:	6c                   	ins    BYTE PTR es:[edi],dx
    1d1e:	6c                   	ins    BYTE PTR es:[edi],dx
    1d1f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1d20:	63 2e                	arpl   WORD PTR [esi],bp
    1d22:	68 00 03 00 00       	push   0x300
    1d27:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1d2e:	03 00                	add    eax,DWORD PTR [eax]
    1d30:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1d34:	43                   	inc    ebx
    1d35:	68 72 69 73 4f       	push   0x4f736972
    1d3a:	53                   	push   ebx
    1d3b:	2e                   	cs
    1d3c:	68 00 03 00 00       	push   0x300
    1d41:	00 00                	add    BYTE PTR [eax],al
    1d43:	05 02 10 2f 00       	add    eax,0x2f1002
    1d48:	9f                   	lahf   
    1d49:	03 0a                	add    ecx,DWORD PTR [edx]
    1d4b:	01 08                	add    DWORD PTR [eax],ecx
    1d4d:	2f                   	das    
    1d4e:	08 3e                	or     BYTE PTR [esi],bh
    1d50:	08 14 77             	or     BYTE PTR [edi+esi*2],dl
    1d53:	5a                   	pop    edx
    1d54:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1d57:	cb                   	retf   
    1d58:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1d5b:	2a 13                	sub    dl,BYTE PTR [ebx]
    1d5d:	08 3f                	or     BYTE PTR [edi],bh
    1d5f:	02 28                	add    ch,BYTE PTR [eax]
    1d61:	13 03                	adc    eax,DWORD PTR [ebx]
    1d63:	72 08                	jb     1d6d <sysEnter_Vector-0x12e293>
    1d65:	12 03                	adc    al,BYTE PTR [ebx]
    1d67:	12 08                	adc    cl,BYTE PTR [eax]
    1d69:	c8 08 68 3d          	enter  0x6808,0x3d
    1d6d:	77 f3                	ja     1d62 <sysEnter_Vector-0x12e29e>
    1d6f:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1d75:	01 f3                	add    ebx,esi
    1d77:	00 00                	add    BYTE PTR [eax],al
    1d79:	00 02                	add    BYTE PTR [edx],al
    1d7b:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    1d81:	01 fb                	add    ebx,edi
    1d83:	0e                   	push   cs
    1d84:	0d 00 01 01 01       	or     eax,0x1010100
    1d89:	01 00                	add    DWORD PTR [eax],eax
    1d8b:	00 00                	add    BYTE PTR [eax],al
    1d8d:	01 00                	add    DWORD PTR [eax],eax
    1d8f:	00 01                	add    BYTE PTR [ecx],al
    1d91:	73 72                	jae    1e05 <sysEnter_Vector-0x12e1fb>
    1d93:	63 00                	arpl   WORD PTR [eax],ax
    1d95:	2f                   	das    
    1d96:	68 6f 6d 65 2f       	push   0x2f656d6f
    1d9b:	79 6f                	jns    1e0c <sysEnter_Vector-0x12e1f4>
    1d9d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1da4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1da7:	73 73                	jae    1e1c <sysEnter_Vector-0x12e1e4>
    1da9:	2f                   	das    
    1daa:	6c                   	ins    BYTE PTR es:[edi],dx
    1dab:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1db2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1db8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1dbe:	78 2d                	js     1ded <sysEnter_Vector-0x12e213>
    1dc0:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1dc2:	75 2f                	jne    1df3 <sysEnter_Vector-0x12e20d>
    1dc4:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1dc9:	2f                   	das    
    1dca:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1dd1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1dd4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1dd8:	65 00 00             	add    BYTE PTR gs:[eax],al
    1ddb:	73 74                	jae    1e51 <sysEnter_Vector-0x12e1af>
    1ddd:	72 73                	jb     1e52 <sysEnter_Vector-0x12e1ae>
    1ddf:	74 72                	je     1e53 <sysEnter_Vector-0x12e1ad>
    1de1:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1de4:	01 00                	add    DWORD PTR [eax],eax
    1de6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1de9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1df0:	63 
    1df1:	2e                   	cs
    1df2:	68 00 02 00 00       	push   0x200
    1df7:	6d                   	ins    DWORD PTR es:[edi],dx
    1df8:	61                   	popa   
    1df9:	6c                   	ins    BYTE PTR es:[edi],dx
    1dfa:	6c                   	ins    BYTE PTR es:[edi],dx
    1dfb:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1dfc:	63 2e                	arpl   WORD PTR [esi],bp
    1dfe:	68 00 03 00 00       	push   0x300
    1e03:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1e0a:	03 00                	add    eax,DWORD PTR [eax]
    1e0c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1e10:	43                   	inc    ebx
    1e11:	68 72 69 73 4f       	push   0x4f736972
    1e16:	53                   	push   ebx
    1e17:	2e                   	cs
    1e18:	68 00 03 00 00       	push   0x300
    1e1d:	00 00                	add    BYTE PTR [eax],al
    1e1f:	05 02 7c 30 00       	add    eax,0x307c02
    1e24:	9f                   	lahf   
    1e25:	03 33                	add    esi,DWORD PTR [ebx]
    1e27:	01 08                	add    DWORD PTR [eax],ecx
    1e29:	27                   	daa    
    1e2a:	68 3d 75 5b c9       	push   0xc95b753d
    1e2f:	c9                   	leave  
    1e30:	5b                   	pop    ebx
    1e31:	3e                   	ds
    1e32:	75 5a                	jne    1e8e <sysEnter_Vector-0x12e172>
    1e34:	c9                   	leave  
    1e35:	59                   	pop    ecx
    1e36:	08 3f                	or     BYTE PTR [edi],bh
    1e38:	2c 23                	sub    al,0x23
    1e3a:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1e3d:	1c 00                	sbb    al,0x0
    1e3f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1e42:	06                   	push   es
    1e43:	4a                   	dec    edx
    1e44:	06                   	push   es
    1e45:	03 13                	add    edx,DWORD PTR [ebx]
    1e47:	9e                   	sahf   
    1e48:	59                   	pop    ecx
    1e49:	77 ec                	ja     1e37 <sysEnter_Vector-0x12e1c9>
    1e4b:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1e50:	75 5a                	jne    1eac <sysEnter_Vector-0x12e154>
    1e52:	08 3f                	or     BYTE PTR [edi],bh
    1e54:	2c 23                	sub    al,0x23
    1e56:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1e59:	1e                   	push   ds
    1e5a:	00 02                	add    BYTE PTR [edx],al
    1e5c:	04 01                	add    al,0x1
    1e5e:	06                   	push   es
    1e5f:	4a                   	dec    edx
    1e60:	06                   	push   es
    1e61:	03 0f                	add    ecx,DWORD PTR [edi]
    1e63:	9e                   	sahf   
    1e64:	59                   	pop    ecx
    1e65:	4d                   	dec    ebp
    1e66:	c9                   	leave  
    1e67:	d7                   	xlat   BYTE PTR ds:[ebx]
    1e68:	02 02                	add    al,BYTE PTR [edx]
    1e6a:	00 01                	add    BYTE PTR [ecx],al
    1e6c:	01 4d 03             	add    DWORD PTR [ebp+0x3],ecx
    1e6f:	00 00                	add    BYTE PTR [eax],al
    1e71:	02 00                	add    al,BYTE PTR [eax]
    1e73:	d6                   	(bad)  
    1e74:	00 00                	add    BYTE PTR [eax],al
    1e76:	00 01                	add    BYTE PTR [ecx],al
    1e78:	01 fb                	add    ebx,edi
    1e7a:	0e                   	push   cs
    1e7b:	0d 00 01 01 01       	or     eax,0x1010100
    1e80:	01 00                	add    DWORD PTR [eax],eax
    1e82:	00 00                	add    BYTE PTR [eax],al
    1e84:	01 00                	add    DWORD PTR [eax],eax
    1e86:	00 01                	add    BYTE PTR [ecx],al
    1e88:	73 72                	jae    1efc <sysEnter_Vector-0x12e104>
    1e8a:	63 00                	arpl   WORD PTR [eax],ax
    1e8c:	2f                   	das    
    1e8d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1e92:	79 6f                	jns    1f03 <sysEnter_Vector-0x12e0fd>
    1e94:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1e9b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1e9e:	73 73                	jae    1f13 <sysEnter_Vector-0x12e0ed>
    1ea0:	2f                   	das    
    1ea1:	6c                   	ins    BYTE PTR es:[edi],dx
    1ea2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1ea9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1eaf:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1eb5:	78 2d                	js     1ee4 <sysEnter_Vector-0x12e11c>
    1eb7:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1eb9:	75 2f                	jne    1eea <sysEnter_Vector-0x12e116>
    1ebb:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1ec0:	2f                   	das    
    1ec1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1ec8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1ecb:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1ecf:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1ed2:	2e                   	cs
    1ed3:	2f                   	das    
    1ed4:	2e                   	cs
    1ed5:	2e                   	cs
    1ed6:	2f                   	das    
    1ed7:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1edb:	6a 2f                	push   0x2f
    1edd:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1ee0:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1ee7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1ee8:	65                   	gs
    1ee9:	6c                   	ins    BYTE PTR es:[edi],dx
    1eea:	2f                   	das    
    1eeb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1ef2:	00 00                	add    BYTE PTR [eax],al
    1ef4:	74 69                	je     1f5f <sysEnter_Vector-0x12e0a1>
    1ef6:	6d                   	ins    DWORD PTR es:[edi],dx
    1ef7:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1efb:	01 00                	add    DWORD PTR [eax],eax
    1efd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1f00:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1f07:	63 
    1f08:	2e                   	cs
    1f09:	68 00 02 00 00       	push   0x200
    1f0e:	74 69                	je     1f79 <sysEnter_Vector-0x12e087>
    1f10:	6d                   	ins    DWORD PTR es:[edi],dx
    1f11:	65                   	gs
    1f12:	2e                   	cs
    1f13:	68 00 03 00 00       	push   0x300
    1f18:	6d                   	ins    DWORD PTR es:[edi],dx
    1f19:	61                   	popa   
    1f1a:	6c                   	ins    BYTE PTR es:[edi],dx
    1f1b:	6c                   	ins    BYTE PTR es:[edi],dx
    1f1c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f1d:	63 2e                	arpl   WORD PTR [esi],bp
    1f1f:	68 00 03 00 00       	push   0x300
    1f24:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1f2b:	03 00                	add    eax,DWORD PTR [eax]
    1f2d:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1f31:	43                   	inc    ebx
    1f32:	68 72 69 73 4f       	push   0x4f736972
    1f37:	53                   	push   ebx
    1f38:	2e                   	cs
    1f39:	68 00 03 00 00       	push   0x300
    1f3e:	73 79                	jae    1fb9 <sysEnter_Vector-0x12e047>
    1f40:	73 63                	jae    1fa5 <sysEnter_Vector-0x12e05b>
    1f42:	61                   	popa   
    1f43:	6c                   	ins    BYTE PTR es:[edi],dx
    1f44:	6c                   	ins    BYTE PTR es:[edi],dx
    1f45:	73 2e                	jae    1f75 <sysEnter_Vector-0x12e08b>
    1f47:	68 00 04 00 00       	push   0x400
    1f4c:	00 00                	add    BYTE PTR [eax],al
    1f4e:	05 02 a8 31 00       	add    eax,0x31a802
    1f53:	9f                   	lahf   
    1f54:	03 17                	add    edx,DWORD PTR [edi]
    1f56:	01 08                	add    DWORD PTR [eax],ecx
    1f58:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1f5b:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1f61:	76 02                	jbe    1f65 <sysEnter_Vector-0x12e09b>
    1f63:	24 13                	and    al,0x13
    1f65:	08 22                	or     BYTE PTR [edx],ah
    1f67:	02 2e                	add    ch,BYTE PTR [esi]
    1f69:	13 02                	adc    eax,DWORD PTR [edx]
    1f6b:	2f                   	das    
    1f6c:	13 08                	adc    ecx,DWORD PTR [eax]
    1f6e:	67 02 2d             	add    ch,BYTE PTR [di]
    1f71:	13 2f                	adc    ebp,DWORD PTR [edi]
    1f73:	00 02                	add    BYTE PTR [edx],al
    1f75:	04 01                	add    al,0x1
    1f77:	06                   	push   es
    1f78:	9e                   	sahf   
    1f79:	00 02                	add    BYTE PTR [edx],al
    1f7b:	04 04                	add    al,0x4
    1f7d:	02 23                	add    ah,BYTE PTR [ebx]
    1f7f:	12 00                	adc    al,BYTE PTR [eax]
    1f81:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1f88:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1f8b:	74 00                	je     1f8d <sysEnter_Vector-0x12e073>
    1f8d:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1f90:	58                   	pop    eax
    1f91:	00 02                	add    BYTE PTR [edx],al
    1f93:	04 08                	add    al,0x8
    1f95:	06                   	push   es
    1f96:	3d 48 00 02 04       	cmp    eax,0x4020048
    1f9b:	01 06                	add    DWORD PTR [esi],eax
    1f9d:	9e                   	sahf   
    1f9e:	00 02                	add    BYTE PTR [edx],al
    1fa0:	04 04                	add    al,0x4
    1fa2:	02 23                	add    ah,BYTE PTR [ebx]
    1fa4:	12 00                	adc    al,BYTE PTR [eax]
    1fa6:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1fad:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1fb0:	74 00                	je     1fb2 <sysEnter_Vector-0x12e04e>
    1fb2:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1fb5:	58                   	pop    eax
    1fb6:	06                   	push   es
    1fb7:	94                   	xchg   esp,eax
    1fb8:	e5 91                	in     eax,0x91
    1fba:	9f                   	lahf   
    1fbb:	59                   	pop    ecx
    1fbc:	00 02                	add    BYTE PTR [edx],al
    1fbe:	04 01                	add    al,0x1
    1fc0:	06                   	push   es
    1fc1:	9e                   	sahf   
    1fc2:	00 02                	add    BYTE PTR [edx],al
    1fc4:	04 04                	add    al,0x4
    1fc6:	02 23                	add    ah,BYTE PTR [ebx]
    1fc8:	12 00                	adc    al,BYTE PTR [eax]
    1fca:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1fd1:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1fd4:	74 00                	je     1fd6 <sysEnter_Vector-0x12e02a>
    1fd6:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1fd9:	58                   	pop    eax
    1fda:	00 02                	add    BYTE PTR [edx],al
    1fdc:	04 08                	add    al,0x8
    1fde:	06                   	push   es
    1fdf:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1fe5:	01 06                	add    DWORD PTR [esi],eax
    1fe7:	9e                   	sahf   
    1fe8:	00 02                	add    BYTE PTR [edx],al
    1fea:	04 04                	add    al,0x4
    1fec:	02 23                	add    ah,BYTE PTR [ebx]
    1fee:	12 00                	adc    al,BYTE PTR [eax]
    1ff0:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1ff7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ffa:	74 00                	je     1ffc <sysEnter_Vector-0x12e004>
    1ffc:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1fff:	58                   	pop    eax
    2000:	06                   	push   es
    2001:	08 f6                	or     dh,dh
    2003:	d7                   	xlat   BYTE PTR ds:[ebx]
    2004:	9f                   	lahf   
    2005:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    200a:	08 15 08 75 08 75    	or     BYTE PTR ds:0x75087508,dl
    2010:	5b                   	pop    ebx
    2011:	f5                   	cmc    
    2012:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    2018:	30 08                	xor    BYTE PTR [eax],cl
    201a:	44                   	inc    esp
    201b:	02 2e                	add    ch,BYTE PTR [esi]
    201d:	13 02                	adc    eax,DWORD PTR [edx]
    201f:	3a 13                	cmp    dl,BYTE PTR [ebx]
    2021:	91                   	xchg   ecx,eax
    2022:	c9                   	leave  
    2023:	e6 02                	out    0x2,al
    2025:	2f                   	das    
    2026:	13 02                	adc    eax,DWORD PTR [edx]
    2028:	3c 13                	cmp    al,0x13
    202a:	9f                   	lahf   
    202b:	e5 e6                	in     eax,0xe6
    202d:	08 c9                	or     cl,cl
    202f:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    2032:	9f                   	lahf   
    2033:	e5 4c                	in     eax,0x4c
    2035:	02 29                	add    ch,BYTE PTR [ecx]
    2037:	13 02                	adc    eax,DWORD PTR [edx]
    2039:	2b 13                	sub    edx,DWORD PTR [ebx]
    203b:	9f                   	lahf   
    203c:	e5 e6                	in     eax,0xe6
    203e:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    2043:	a0 00 02 04 01       	mov    al,ds:0x1040200
    2048:	06                   	push   es
    2049:	c8 00 02 04          	enter  0x200,0x4
    204d:	04 02                	add    al,0x2
    204f:	2c 12                	sub    al,0x12
    2051:	00 02                	add    BYTE PTR [edx],al
    2053:	04 05                	add    al,0x5
    2055:	02 2f                	add    ch,BYTE PTR [edi]
    2057:	12 00                	adc    al,BYTE PTR [eax]
    2059:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    205c:	74 00                	je     205e <sysEnter_Vector-0x12dfa2>
    205e:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2061:	58                   	pop    eax
    2062:	06                   	push   es
    2063:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    2069:	04 01                	add    al,0x1
    206b:	06                   	push   es
    206c:	c8 00 02 04          	enter  0x200,0x4
    2070:	04 02                	add    al,0x2
    2072:	2c 12                	sub    al,0x12
    2074:	00 02                	add    BYTE PTR [edx],al
    2076:	04 05                	add    al,0x5
    2078:	02 2f                	add    ch,BYTE PTR [edi]
    207a:	12 00                	adc    al,BYTE PTR [eax]
    207c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    207f:	74 00                	je     2081 <sysEnter_Vector-0x12df7f>
    2081:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2084:	58                   	pop    eax
    2085:	00 02                	add    BYTE PTR [edx],al
    2087:	04 08                	add    al,0x8
    2089:	06                   	push   es
    208a:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    2090:	00 02                	add    BYTE PTR [edx],al
    2092:	04 01                	add    al,0x1
    2094:	06                   	push   es
    2095:	c8 00 02 04          	enter  0x200,0x4
    2099:	04 02                	add    al,0x2
    209b:	2c 12                	sub    al,0x12
    209d:	00 02                	add    BYTE PTR [edx],al
    209f:	04 05                	add    al,0x5
    20a1:	02 2f                	add    ch,BYTE PTR [edi]
    20a3:	12 00                	adc    al,BYTE PTR [eax]
    20a5:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    20a8:	74 00                	je     20aa <sysEnter_Vector-0x12df56>
    20aa:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    20ad:	58                   	pop    eax
    20ae:	06                   	push   es
    20af:	08 f9                	or     cl,bh
    20b1:	bb 75 00 02 04       	mov    ebx,0x4020075
    20b6:	01 06                	add    DWORD PTR [esi],eax
    20b8:	08 2e                	or     BYTE PTR [esi],ch
    20ba:	06                   	push   es
    20bb:	9f                   	lahf   
    20bc:	75 75                	jne    2133 <sysEnter_Vector-0x12decd>
    20be:	7b d8                	jnp    2098 <sysEnter_Vector-0x12df68>
    20c0:	00 02                	add    BYTE PTR [edx],al
    20c2:	04 01                	add    al,0x1
    20c4:	06                   	push   es
    20c5:	c8 06 75 e5          	enter  0x7506,0xe5
    20c9:	00 02                	add    BYTE PTR [edx],al
    20cb:	04 01                	add    al,0x1
    20cd:	06                   	push   es
    20ce:	02 22                	add    ah,BYTE PTR [edx]
    20d0:	12 06                	adc    al,BYTE PTR [esi]
    20d2:	4b                   	dec    ebx
    20d3:	00 02                	add    BYTE PTR [edx],al
    20d5:	04 01                	add    al,0x1
    20d7:	06                   	push   es
    20d8:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    20de:	02 22                	add    ah,BYTE PTR [edx]
    20e0:	12 00                	adc    al,BYTE PTR [eax]
    20e2:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    20e5:	74 00                	je     20e7 <sysEnter_Vector-0x12df19>
    20e7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    20ea:	58                   	pop    eax
    20eb:	00 02                	add    BYTE PTR [edx],al
    20ed:	04 06                	add    al,0x6
    20ef:	06                   	push   es
    20f0:	59                   	pop    ecx
    20f1:	00 02                	add    BYTE PTR [edx],al
    20f3:	04 01                	add    al,0x1
    20f5:	06                   	push   es
    20f6:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    20f9:	00 02                	add    BYTE PTR [edx],al
    20fb:	04 03                	add    al,0x3
    20fd:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    2100:	00 02                	add    BYTE PTR [edx],al
    2102:	04 04                	add    al,0x4
    2104:	74 00                	je     2106 <sysEnter_Vector-0x12defa>
    2106:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2109:	58                   	pop    eax
    210a:	00 02                	add    BYTE PTR [edx],al
    210c:	04 06                	add    al,0x6
    210e:	06                   	push   es
    210f:	59                   	pop    ecx
    2110:	00 02                	add    BYTE PTR [edx],al
    2112:	04 01                	add    al,0x1
    2114:	06                   	push   es
    2115:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    2118:	00 02                	add    BYTE PTR [edx],al
    211a:	04 03                	add    al,0x3
    211c:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    211f:	00 02                	add    BYTE PTR [edx],al
    2121:	04 04                	add    al,0x4
    2123:	74 00                	je     2125 <sysEnter_Vector-0x12dedb>
    2125:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2128:	58                   	pop    eax
    2129:	00 02                	add    BYTE PTR [edx],al
    212b:	04 06                	add    al,0x6
    212d:	06                   	push   es
    212e:	5a                   	pop    edx
    212f:	00 02                	add    BYTE PTR [edx],al
    2131:	04 06                	add    al,0x6
    2133:	c9                   	leave  
    2134:	2f                   	das    
    2135:	00 02                	add    BYTE PTR [edx],al
    2137:	04 01                	add    al,0x1
    2139:	06                   	push   es
    213a:	9e                   	sahf   
    213b:	00 02                	add    BYTE PTR [edx],al
    213d:	04 04                	add    al,0x4
    213f:	02 23                	add    ah,BYTE PTR [ebx]
    2141:	12 00                	adc    al,BYTE PTR [eax]
    2143:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    214a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    214d:	74 00                	je     214f <sysEnter_Vector-0x12deb1>
    214f:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2152:	58                   	pop    eax
    2153:	00 02                	add    BYTE PTR [edx],al
    2155:	04 08                	add    al,0x8
    2157:	06                   	push   es
    2158:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    215b:	e8 bb 00 02 04       	call   402221b <sysEnter_Vector+0x3ef221b>
    2160:	01 06                	add    DWORD PTR [esi],eax
    2162:	ba 06 4b 68 91       	mov    edx,0x91684b06
    2167:	02 31                	add    dh,BYTE PTR [ecx]
    2169:	14 02                	adc    al,0x2
    216b:	2c 14                	sub    al,0x14
    216d:	00 02                	add    BYTE PTR [edx],al
    216f:	04 01                	add    al,0x1
    2171:	06                   	push   es
    2172:	02 29                	add    ch,BYTE PTR [ecx]
    2174:	12 06                	adc    al,BYTE PTR [esi]
    2176:	4b                   	dec    ebx
    2177:	bd 00 02 04 01       	mov    ebp,0x1040200
    217c:	06                   	push   es
    217d:	ba 00 02 04 03       	mov    edx,0x3040200
    2182:	06                   	push   es
    2183:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    2186:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    2189:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    2190:	77 00                	ja     2192 <sysEnter_Vector-0x12de6e>
    2192:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    2195:	06                   	push   es
    2196:	82                   	(bad)  
    2197:	06                   	push   es
    2198:	4b                   	dec    ebx
    2199:	68 00 02 04 01       	push   0x1040200
    219e:	06                   	push   es
    219f:	66 06                	pushw  es
    21a1:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    21a7:	08 f3                	or     bl,dh
    21a9:	67 08 14             	or     BYTE PTR [si],dl
    21ac:	00 02                	add    BYTE PTR [edx],al
    21ae:	04 01                	add    al,0x1
    21b0:	e5 77                	in     eax,0x77
    21b2:	08 21                	or     BYTE PTR [ecx],ah
    21b4:	08 2f                	or     BYTE PTR [edi],ch
    21b6:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    21bc:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	75 69                	jne    79 <sysEnter_Vector-0x12ff87>
  10:	6e                   	outs   dx,BYTE PTR ds:[esi]
  11:	74 33                	je     46 <sysEnter_Vector-0x12ffba>
  13:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  16:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
  19:	72 63                	jb     7e <sysEnter_Vector-0x12ff82>
  1b:	68 72 00 2f 68       	push   0x682f0072
  20:	6f                   	outs   dx,DWORD PTR ds:[esi]
  21:	6d                   	ins    DWORD PTR es:[edi],dx
  22:	65                   	gs
  23:	2f                   	das    
  24:	79 6f                	jns    95 <sysEnter_Vector-0x12ff6b>
  26:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2e:	73 2f                	jae    5f <sysEnter_Vector-0x12ffa1>
  30:	61                   	popa   
  31:	70 72                	jo     a5 <sysEnter_Vector-0x12ff5b>
  33:	6f                   	outs   dx,DWORD PTR ds:[esi]
  34:	6a 2f                	push   0x2f
  36:	6c                   	ins    BYTE PTR es:[edi],dx
  37:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  3e:	4f                   	dec    edi
  3f:	53                   	push   ebx
  40:	00 70 72             	add    BYTE PTR [eax+0x72],dh
  43:	6f                   	outs   dx,DWORD PTR ds:[esi]
  44:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  47:	73 45                	jae    8e <sysEnter_Vector-0x12ff72>
  49:	6e                   	outs   dx,BYTE PTR ds:[esi]
  4a:	76 70                	jbe    bc <sysEnter_Vector-0x12ff44>
  4c:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
  4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
  50:	74 70                	je     c2 <sysEnter_Vector-0x12ff3e>
  52:	74 72                	je     c6 <sysEnter_Vector-0x12ff3a>
  54:	5f                   	pop    edi
  55:	74 00                	je     57 <sysEnter_Vector-0x12ffa9>
  57:	6c                   	ins    BYTE PTR es:[edi],dx
  58:	6f                   	outs   dx,DWORD PTR ds:[esi]
  59:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5a:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5f:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  63:	73 69                	jae    ce <sysEnter_Vector-0x12ff32>
  65:	67 6e                	outs   dx,BYTE PTR ds:[si]
  67:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  6c:	74 00                	je     6e <sysEnter_Vector-0x12ff92>
  6e:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  75:	43                   	inc    ebx
  76:	6c                   	ins    BYTE PTR es:[edi],dx
  77:	6f                   	outs   dx,DWORD PTR ds:[esi]
  78:	73 65                	jae    df <sysEnter_Vector-0x12ff21>
  7a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
  7d:	61                   	popa   
  7e:	70 45                	jo     c5 <sysEnter_Vector-0x12ff3b>
  80:	6e                   	outs   dx,BYTE PTR ds:[esi]
  81:	64 00 75 6e          	add    BYTE PTR fs:[ebp+0x6e],dh
  85:	73 69                	jae    f0 <sysEnter_Vector-0x12ff10>
  87:	67 6e                	outs   dx,BYTE PTR ds:[si]
  89:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  8e:	61                   	popa   
  8f:	72 00                	jb     91 <sysEnter_Vector-0x12ff6f>
  91:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  98:	43                   	inc    ebx
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9b:	73 65                	jae    102 <sysEnter_Vector-0x12fefe>
  9d:	43                   	inc    ebx
  9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9f:	75 6e                	jne    10f <sysEnter_Vector-0x12fef1>
  a1:	74 00                	je     a3 <sysEnter_Vector-0x12ff5d>
  a3:	68 65 61 70 42       	push   0x42706165
  a8:	61                   	popa   
  a9:	73 65                	jae    110 <sysEnter_Vector-0x12fef0>
  ab:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
  ae:	55                   	push   ebp
  af:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  b2:	31 20                	xor    DWORD PTR [eax],esp
  b4:	35 2e 33 2e 30       	xor    eax,0x302e332e
  b9:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
  bf:	3d 69 6e 74 65       	cmp    eax,0x65746e69
  c4:	6c                   	ins    BYTE PTR es:[edi],dx
  c5:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
  cb:	65                   	gs
  cc:	3d 67 65 6e 65       	cmp    eax,0x656e6567
  d1:	72 69                	jb     13c <sysEnter_Vector-0x12fec4>
  d3:	63 20                	arpl   WORD PTR [eax],sp
  d5:	2d 6d 61 72 63       	sub    eax,0x6372616d
  da:	68 3d 70 65 6e       	push   0x6e65703d
  df:	74 69                	je     14a <sysEnter_Vector-0x12feb6>
  e1:	75 6d                	jne    150 <sysEnter_Vector-0x12feb0>
  e3:	70 72                	jo     157 <sysEnter_Vector-0x12fea9>
  e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
  e6:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
  ec:	66                   	data16
  ed:	72 65                	jb     154 <sysEnter_Vector-0x12feac>
  ef:	65                   	gs
  f0:	73 74                	jae    166 <sysEnter_Vector-0x12fe9a>
  f2:	61                   	popa   
  f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
  f4:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
  fb:	76 
  fc:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 103:	74 79                	je     17e <sysEnter_Vector-0x12fe82>
 105:	3d 68 69 64 64       	cmp    eax,0x64646968
 10a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 10c:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 112:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
 115:	6f                   	outs   dx,DWORD PTR ds:[esi]
 116:	6f                   	outs   dx,DWORD PTR ds:[esi]
 117:	6c                   	ins    BYTE PTR es:[edi],dx
 118:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
 11b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 11c:	72 74                	jb     192 <sysEnter_Vector-0x12fe6e>
 11e:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
 121:	73 69                	jae    18c <sysEnter_Vector-0x12fe74>
 123:	67 6e                	outs   dx,BYTE PTR ds:[si]
 125:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
 12a:	74 00                	je     12c <sysEnter_Vector-0x12fed4>
 12c:	73 74                	jae    1a2 <sysEnter_Vector-0x12fe5e>
 12e:	72 63                	jb     193 <sysEnter_Vector-0x12fe6d>
 130:	68 72 49 00 68       	push   0x68004972
 135:	65                   	gs
 136:	61                   	popa   
 137:	70 43                	jo     17c <sysEnter_Vector-0x12fe84>
 139:	75 72                	jne    1ad <sysEnter_Vector-0x12fe53>
 13b:	72 00                	jb     13d <sysEnter_Vector-0x12fec3>
 13d:	2e                   	cs
 13e:	2e                   	cs
 13f:	2f                   	das    
 140:	2e                   	cs
 141:	2e                   	cs
 142:	2f                   	das    
 143:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 147:	6a 2f                	push   0x2f
 149:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 14c:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 153:	63 2f                	arpl   WORD PTR [edi],bp
 155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
 157:	72 69                	jb     1c2 <sysEnter_Vector-0x12fe3e>
 159:	6e                   	outs   dx,BYTE PTR ds:[esi]
 15a:	67 73 2f             	addr16 jae 18c <sysEnter_Vector-0x12fe74>
 15d:	73 74                	jae    1d3 <sysEnter_Vector-0x12fe2d>
 15f:	72 63                	jb     1c4 <sysEnter_Vector-0x12fe3c>
 161:	68 72 2e 63 00       	push   0x632e72
 166:	6c                   	ins    BYTE PTR es:[edi],dx
 167:	6f                   	outs   dx,DWORD PTR ds:[esi]
 168:	6e                   	outs   dx,BYTE PTR ds:[esi]
 169:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
 16d:	75 62                	jne    1d1 <sysEnter_Vector-0x12fe2f>
 16f:	6c                   	ins    BYTE PTR es:[edi],dx
 170:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
 174:	6f                   	outs   dx,DWORD PTR ds:[esi]
 175:	72 74                	jb     1eb <sysEnter_Vector-0x12fe15>
 177:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
 17a:	74 00                	je     17c <sysEnter_Vector-0x12fe84>
 17c:	6c                   	ins    BYTE PTR es:[edi],dx
 17d:	69 62 63 54 5a 00 73 	imul   esp,DWORD PTR [edx+0x63],0x73005a54
 184:	69 7a 65 74 79 70 65 	imul   edi,DWORD PTR [edx+0x65],0x65707974
 18b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 18e:	72 63                	jb     1f3 <sysEnter_Vector-0x12fe0d>
 190:	73 70                	jae    202 <sysEnter_Vector-0x12fdfe>
 192:	6e                   	outs   dx,BYTE PTR ds:[esi]
 193:	49                   	dec    ecx
 194:	00 2e                	add    BYTE PTR [esi],ch
 196:	2e                   	cs
 197:	2f                   	das    
 198:	2e                   	cs
 199:	2e                   	cs
 19a:	2f                   	das    
 19b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 19f:	6a 2f                	push   0x2f
 1a1:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1a4:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1ab:	63 2f                	arpl   WORD PTR [edi],bp
 1ad:	73 74                	jae    223 <sysEnter_Vector-0x12fddd>
 1af:	72 69                	jb     21a <sysEnter_Vector-0x12fde6>
 1b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1b2:	67 73 2f             	addr16 jae 1e4 <sysEnter_Vector-0x12fe1c>
 1b5:	73 74                	jae    22b <sysEnter_Vector-0x12fdd5>
 1b7:	72 63                	jb     21c <sysEnter_Vector-0x12fde4>
 1b9:	73 70                	jae    22b <sysEnter_Vector-0x12fdd5>
 1bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1bc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 1bf:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 1c2:	72 73                	jb     237 <sysEnter_Vector-0x12fdc9>
 1c4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1c7:	72 63                	jb     22c <sysEnter_Vector-0x12fdd4>
 1c9:	73 70                	jae    23b <sysEnter_Vector-0x12fdc5>
 1cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1cc:	00 2e                	add    BYTE PTR [esi],ch
 1ce:	2e                   	cs
 1cf:	2f                   	das    
 1d0:	2e                   	cs
 1d1:	2e                   	cs
 1d2:	2f                   	das    
 1d3:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1d7:	6a 2f                	push   0x2f
 1d9:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1dc:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1e3:	63 2f                	arpl   WORD PTR [edi],bp
 1e5:	73 74                	jae    25b <sysEnter_Vector-0x12fda5>
 1e7:	72 69                	jb     252 <sysEnter_Vector-0x12fdae>
 1e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1ea:	67 73 2f             	addr16 jae 21c <sysEnter_Vector-0x12fde4>
 1ed:	73 74                	jae    263 <sysEnter_Vector-0x12fd9d>
 1ef:	72 74                	jb     265 <sysEnter_Vector-0x12fd9b>
 1f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f2:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1f5:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1f9:	74 73                	je     26e <sysEnter_Vector-0x12fd92>
 1fb:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1ff:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 206:	6f                   	outs   dx,DWORD PTR ds:[esi]
 207:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 20a:	72 63                	jb     26f <sysEnter_Vector-0x12fd91>
 20c:	2f                   	das    
 20d:	61                   	popa   
 20e:	73 63                	jae    273 <sysEnter_Vector-0x12fd8d>
 210:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 217:	6f                   	outs   dx,DWORD PTR ds:[esi]
 218:	61                   	popa   
 219:	49                   	dec    ecx
 21a:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
 21d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 21e:	61                   	popa   
 21f:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 222:	76 65                	jbe    289 <sysEnter_Vector-0x12fd77>
 224:	72 73                	jb     299 <sysEnter_Vector-0x12fd67>
 226:	65                   	gs
 227:	49                   	dec    ecx
 228:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 22b:	67 6e                	outs   dx,BYTE PTR ds:[si]
 22d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 230:	63 2f                	arpl   WORD PTR [edi],bp
 232:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 235:	73 6f                	jae    2a6 <sysEnter_Vector-0x12fd5a>
 237:	6c                   	ins    BYTE PTR es:[edi],dx
 238:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 23c:	6d                   	ins    DWORD PTR es:[edi],dx
 23d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 23e:	76 65                	jbe    2a5 <sysEnter_Vector-0x12fd5b>
 240:	54                   	push   esp
 241:	6f                   	outs   dx,DWORD PTR ds:[esi]
 242:	58                   	pop    eax
 243:	59                   	pop    ecx
 244:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
 247:	76 65                	jbe    2ae <sysEnter_Vector-0x12fd52>
 249:	43                   	inc    ebx
 24a:	75 72                	jne    2be <sysEnter_Vector-0x12fd42>
 24c:	73 6f                	jae    2bd <sysEnter_Vector-0x12fd43>
 24e:	72 50                	jb     2a0 <sysEnter_Vector-0x12fd60>
 250:	6f                   	outs   dx,DWORD PTR ds:[esi]
 251:	73 69                	jae    2bc <sysEnter_Vector-0x12fd44>
 253:	74 69                	je     2be <sysEnter_Vector-0x12fd42>
 255:	6f                   	outs   dx,DWORD PTR ds:[esi]
 256:	6e                   	outs   dx,BYTE PTR ds:[esi]
 257:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 25a:	73 74                	jae    2d0 <sysEnter_Vector-0x12fd30>
 25c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 25d:	72 65                	jb     2c4 <sysEnter_Vector-0x12fd3c>
 25f:	43                   	inc    ebx
 260:	75 72                	jne    2d4 <sysEnter_Vector-0x12fd2c>
 262:	73 6f                	jae    2d3 <sysEnter_Vector-0x12fd2d>
 264:	72 50                	jb     2b6 <sysEnter_Vector-0x12fd4a>
 266:	6f                   	outs   dx,DWORD PTR ds:[esi]
 267:	73 69                	jae    2d2 <sysEnter_Vector-0x12fd2e>
 269:	74 69                	je     2d4 <sysEnter_Vector-0x12fd2c>
 26b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 26c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 26d:	00 78 73             	add    BYTE PTR [eax+0x73],bh
 270:	74 72                	je     2e4 <sysEnter_Vector-0x12fd1c>
 272:	00 61 6e             	add    BYTE PTR [ecx+0x6e],ah
 275:	73 69                	jae    2e0 <sysEnter_Vector-0x12fd20>
 277:	45                   	inc    ebp
 278:	73 63                	jae    2dd <sysEnter_Vector-0x12fd23>
 27a:	53                   	push   ebx
 27b:	65                   	gs
 27c:	71 00                	jno    27e <sysEnter_Vector-0x12fd82>
 27e:	79 73                	jns    2f3 <sysEnter_Vector-0x12fd0d>
 280:	74 72                	je     2f4 <sysEnter_Vector-0x12fd0c>
 282:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 285:	72 6e                	jb     2f5 <sysEnter_Vector-0x12fd0b>
 287:	61                   	popa   
 288:	6d                   	ins    DWORD PTR es:[edi],dx
 289:	65 00 6c 61 73       	add    BYTE PTR gs:[ecx+eiz*2+0x73],ch
 28e:	74 50                	je     2e0 <sysEnter_Vector-0x12fd20>
 290:	6f                   	outs   dx,DWORD PTR ds:[esi]
 291:	70 75                	jo     308 <sysEnter_Vector-0x12fcf8>
 293:	6c                   	ins    BYTE PTR es:[edi],dx
 294:	61                   	popa   
 295:	74 65                	je     2fc <sysEnter_Vector-0x12fd04>
 297:	64 00 73 72          	add    BYTE PTR fs:[ebx+0x72],dh
 29b:	63 2f                	arpl   WORD PTR [edi],bp
 29d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 29f:	76 69                	jbe    30a <sysEnter_Vector-0x12fcf6>
 2a1:	72 6f                	jb     312 <sysEnter_Vector-0x12fcee>
 2a3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 2a4:	6d                   	ins    DWORD PTR es:[edi],dx
 2a5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2a7:	74 2e                	je     2d7 <sysEnter_Vector-0x12fd29>
 2a9:	63 00                	arpl   WORD PTR [eax],ax
 2ab:	73 65                	jae    312 <sysEnter_Vector-0x12fcee>
 2ad:	74 65                	je     314 <sysEnter_Vector-0x12fcec>
 2af:	6e                   	outs   dx,BYTE PTR ds:[esi]
 2b0:	76 00                	jbe    2b2 <sysEnter_Vector-0x12fd4e>
 2b2:	76 61                	jbe    315 <sysEnter_Vector-0x12fceb>
 2b4:	6c                   	ins    BYTE PTR es:[edi],dx
 2b5:	75 65                	jne    31c <sysEnter_Vector-0x12fce4>
 2b7:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 2ba:	74 65                	je     321 <sysEnter_Vector-0x12fcdf>
 2bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 2bd:	76 00                	jbe    2bf <sysEnter_Vector-0x12fd41>
 2bf:	53                   	push   ebx
 2c0:	59                   	pop    ecx
 2c1:	53                   	push   ebx
 2c2:	43                   	inc    ebx
 2c3:	41                   	inc    ecx
 2c4:	4c                   	dec    esp
 2c5:	4c                   	dec    esp
 2c6:	5f                   	pop    edi
 2c7:	57                   	push   edi
 2c8:	41                   	inc    ecx
 2c9:	49                   	dec    ecx
 2ca:	54                   	push   esp
 2cb:	46                   	inc    esi
 2cc:	4f                   	dec    edi
 2cd:	52                   	push   edx
 2ce:	50                   	push   eax
 2cf:	49                   	dec    ecx
 2d0:	44                   	inc    esp
 2d1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d4:	53                   	push   ebx
 2d5:	43                   	inc    ebx
 2d6:	41                   	inc    ecx
 2d7:	4c                   	dec    esp
 2d8:	4c                   	dec    esp
 2d9:	5f                   	pop    edi
 2da:	47                   	inc    edi
 2db:	45                   	inc    ebp
 2dc:	54                   	push   esp
 2dd:	54                   	push   esp
 2de:	49                   	dec    ecx
 2df:	43                   	inc    ebx
 2e0:	4b                   	dec    ebx
 2e1:	53                   	push   ebx
 2e2:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 2e5:	74 56                	je     33d <sysEnter_Vector-0x12fcc3>
 2e7:	61                   	popa   
 2e8:	6c                   	ins    BYTE PTR es:[edi],dx
 2e9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2ec:	53                   	push   ebx
 2ed:	43                   	inc    ebx
 2ee:	41                   	inc    ecx
 2ef:	4c                   	dec    esp
 2f0:	4c                   	dec    esp
 2f1:	5f                   	pop    edi
 2f2:	53                   	push   ebx
 2f3:	4c                   	dec    esp
 2f4:	45                   	inc    ebp
 2f5:	45                   	inc    ebp
 2f6:	50                   	push   eax
 2f7:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
 2fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
 2fb:	73 65                	jae    362 <sysEnter_Vector-0x12fc9e>
 2fd:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 300:	53                   	push   ebx
 301:	43                   	inc    ebx
 302:	41                   	inc    ecx
 303:	4c                   	dec    esp
 304:	4c                   	dec    esp
 305:	5f                   	pop    edi
 306:	4f                   	dec    edi
 307:	50                   	push   eax
 308:	45                   	inc    ebp
 309:	4e                   	dec    esi
 30a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 30d:	72 65                	jb     374 <sysEnter_Vector-0x12fc8c>
 30f:	61                   	popa   
 310:	6d                   	ins    DWORD PTR es:[edi],dx
 311:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 314:	74 68                	je     37e <sysEnter_Vector-0x12fc82>
 316:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 319:	53                   	push   ebx
 31a:	43                   	inc    ebx
 31b:	41                   	inc    ecx
 31c:	4c                   	dec    esp
 31d:	4c                   	dec    esp
 31e:	5f                   	pop    edi
 31f:	47                   	inc    edi
 320:	45                   	inc    ebp
 321:	54                   	push   esp
 322:	54                   	push   esp
 323:	49                   	dec    ecx
 324:	4d                   	dec    ebp
 325:	45                   	inc    ebp
 326:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 329:	53                   	push   ebx
 32a:	43                   	inc    ebx
 32b:	41                   	inc    ecx
 32c:	4c                   	dec    esp
 32d:	4c                   	dec    esp
 32e:	5f                   	pop    edi
 32f:	57                   	push   edi
 330:	52                   	push   edx
 331:	49                   	dec    ecx
 332:	54                   	push   esp
 333:	45                   	inc    ebp
 334:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 337:	53                   	push   ebx
 338:	43                   	inc    ebx
 339:	41                   	inc    ecx
 33a:	4c                   	dec    esp
 33b:	4c                   	dec    esp
 33c:	5f                   	pop    edi
 33d:	52                   	push   edx
 33e:	45                   	inc    ebp
 33f:	41                   	inc    ecx
 340:	44                   	inc    esp
 341:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 344:	53                   	push   ebx
 345:	43                   	inc    ebx
 346:	41                   	inc    ecx
 347:	4c                   	dec    esp
 348:	4c                   	dec    esp
 349:	5f                   	pop    edi
 34a:	53                   	push   ebx
 34b:	54                   	push   esp
 34c:	4f                   	dec    edi
 34d:	50                   	push   eax
 34e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 351:	53                   	push   ebx
 352:	43                   	inc    ebx
 353:	41                   	inc    ecx
 354:	4c                   	dec    esp
 355:	4c                   	dec    esp
 356:	5f                   	pop    edi
 357:	53                   	push   ebx
 358:	45                   	inc    ebp
 359:	54                   	push   esp
 35a:	53                   	push   ebx
 35b:	49                   	dec    ecx
 35c:	47                   	inc    edi
 35d:	41                   	inc    ecx
 35e:	43                   	inc    ebx
 35f:	54                   	push   esp
 360:	49                   	dec    ecx
 361:	4f                   	dec    edi
 362:	4e                   	dec    esi
 363:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 366:	53                   	push   ebx
 367:	43                   	inc    ebx
 368:	41                   	inc    ecx
 369:	4c                   	dec    esp
 36a:	4c                   	dec    esp
 36b:	5f                   	pop    edi
 36c:	4d                   	dec    ebp
 36d:	4d                   	dec    ebp
 36e:	41                   	inc    ecx
 36f:	50                   	push   eax
 370:	00 70 6f             	add    BYTE PTR [eax+0x6f],dh
 373:	73 69                	jae    3de <sysEnter_Vector-0x12fc22>
 375:	74 69                	je     3e0 <sysEnter_Vector-0x12fc20>
 377:	6f                   	outs   dx,DWORD PTR ds:[esi]
 378:	6e                   	outs   dx,BYTE PTR ds:[esi]
 379:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 37c:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
 383:	65 
 384:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
 387:	68 65 6e 63 65       	push   0x65636e65
 38c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 38f:	53                   	push   ebx
 390:	43                   	inc    ebx
 391:	41                   	inc    ecx
 392:	4c                   	dec    esp
 393:	4c                   	dec    esp
 394:	5f                   	pop    edi
 395:	49                   	dec    ecx
 396:	4e                   	dec    esi
 397:	56                   	push   esi
 398:	41                   	inc    ecx
 399:	4c                   	dec    esp
 39a:	49                   	dec    ecx
 39b:	44                   	inc    esp
 39c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 39f:	53                   	push   ebx
 3a0:	43                   	inc    ebx
 3a1:	41                   	inc    ecx
 3a2:	4c                   	dec    esp
 3a3:	4c                   	dec    esp
 3a4:	5f                   	pop    edi
 3a5:	4d                   	dec    ebp
 3a6:	41                   	inc    ecx
 3a7:	53                   	push   ebx
 3a8:	4b                   	dec    ebx
 3a9:	53                   	push   ebx
 3aa:	49                   	dec    ecx
 3ab:	47                   	inc    edi
 3ac:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3af:	53                   	push   ebx
 3b0:	43                   	inc    ebx
 3b1:	41                   	inc    ecx
 3b2:	4c                   	dec    esp
 3b3:	4c                   	dec    esp
 3b4:	5f                   	pop    edi
 3b5:	52                   	push   edx
 3b6:	45                   	inc    ebp
 3b7:	47                   	inc    edi
 3b8:	45                   	inc    ebp
 3b9:	58                   	pop    eax
 3ba:	49                   	dec    ecx
 3bb:	54                   	push   esp
 3bc:	48                   	dec    eax
 3bd:	41                   	inc    ecx
 3be:	4e                   	dec    esi
 3bf:	44                   	inc    esp
 3c0:	4c                   	dec    esp
 3c1:	45                   	inc    ebp
 3c2:	52                   	push   edx
 3c3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3c6:	53                   	push   ebx
 3c7:	43                   	inc    ebx
 3c8:	41                   	inc    ecx
 3c9:	4c                   	dec    esp
 3ca:	4c                   	dec    esp
 3cb:	5f                   	pop    edi
 3cc:	48                   	dec    eax
 3cd:	4c                   	dec    esp
 3ce:	54                   	push   esp
 3cf:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 3d2:	65 6f                	outs   dx,DWORD PTR gs:[esi]
 3d4:	70 65                	jo     43b <sysEnter_Vector-0x12fbc5>
 3d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3d7:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 3da:	79 73                	jns    44f <sysEnter_Vector-0x12fbb1>
 3dc:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 3df:	6c                   	ins    BYTE PTR es:[edi],dx
 3e0:	73 00                	jae    3e2 <sysEnter_Vector-0x12fc1e>
 3e2:	77 72                	ja     456 <sysEnter_Vector-0x12fbaa>
 3e4:	69 74 65 00 53 59 53 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x43535953
 3eb:	43 
 3ec:	41                   	inc    ecx
 3ed:	4c                   	dec    esp
 3ee:	4c                   	dec    esp
 3ef:	5f                   	pop    edi
 3f0:	53                   	push   ebx
 3f1:	45                   	inc    ebp
 3f2:	54                   	push   esp
 3f3:	50                   	push   eax
 3f4:	52                   	push   edx
 3f5:	49                   	dec    ecx
 3f6:	4f                   	dec    edi
 3f7:	52                   	push   edx
 3f8:	49                   	dec    ecx
 3f9:	54                   	push   esp
 3fa:	59                   	pop    ecx
 3fb:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3fe:	53                   	push   ebx
 3ff:	43                   	inc    ebx
 400:	41                   	inc    ecx
 401:	4c                   	dec    esp
 402:	4c                   	dec    esp
 403:	5f                   	pop    edi
 404:	47                   	inc    edi
 405:	45                   	inc    ebp
 406:	54                   	push   esp
 407:	44                   	inc    esp
 408:	45                   	inc    ebp
 409:	4e                   	dec    esi
 40a:	54                   	push   esp
 40b:	53                   	push   ebx
 40c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 40f:	53                   	push   ebx
 410:	43                   	inc    ebx
 411:	41                   	inc    ecx
 412:	4c                   	dec    esp
 413:	4c                   	dec    esp
 414:	5f                   	pop    edi
 415:	53                   	push   ebx
 416:	45                   	inc    ebp
 417:	45                   	inc    ebp
 418:	4b                   	dec    ebx
 419:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 41c:	53                   	push   ebx
 41d:	43                   	inc    ebx
 41e:	41                   	inc    ecx
 41f:	4c                   	dec    esp
 420:	4c                   	dec    esp
 421:	5f                   	pop    edi
 422:	50                   	push   eax
 423:	49                   	dec    ecx
 424:	50                   	push   eax
 425:	45                   	inc    ebp
 426:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 429:	53                   	push   ebx
 42a:	43                   	inc    ebx
 42b:	41                   	inc    ecx
 42c:	4c                   	dec    esp
 42d:	4c                   	dec    esp
 42e:	5f                   	pop    edi
 42f:	47                   	inc    edi
 430:	45                   	inc    ebp
 431:	54                   	push   esp
 432:	43                   	inc    ebx
 433:	57                   	push   edi
 434:	44                   	inc    esp
 435:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 438:	53                   	push   ebx
 439:	43                   	inc    ebx
 43a:	41                   	inc    ecx
 43b:	4c                   	dec    esp
 43c:	4c                   	dec    esp
 43d:	5f                   	pop    edi
 43e:	50                   	push   eax
 43f:	52                   	push   edx
 440:	49                   	dec    ecx
 441:	4e                   	dec    esi
 442:	54                   	push   esp
 443:	44                   	inc    esp
 444:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 447:	53                   	push   ebx
 448:	43                   	inc    ebx
 449:	41                   	inc    ecx
 44a:	4c                   	dec    esp
 44b:	4c                   	dec    esp
 44c:	5f                   	pop    edi
 44d:	46                   	inc    esi
 44e:	52                   	push   edx
 44f:	45                   	inc    ebp
 450:	45                   	inc    ebp
 451:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 454:	53                   	push   ebx
 455:	43                   	inc    ebx
 456:	41                   	inc    ecx
 457:	4c                   	dec    esp
 458:	4c                   	dec    esp
 459:	5f                   	pop    edi
 45a:	45                   	inc    ebp
 45b:	58                   	pop    eax
 45c:	45                   	inc    ebp
 45d:	43                   	inc    ebx
 45e:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 461:	66                   	data16
 462:	6c                   	ins    BYTE PTR es:[edi],dx
 463:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 465:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 468:	53                   	push   ebx
 469:	43                   	inc    ebx
 46a:	41                   	inc    ecx
 46b:	4c                   	dec    esp
 46c:	4c                   	dec    esp
 46d:	5f                   	pop    edi
 46e:	45                   	inc    ebp
 46f:	58                   	pop    eax
 470:	45                   	inc    ebp
 471:	43                   	inc    ebx
 472:	4e                   	dec    esi
 473:	45                   	inc    ebp
 474:	57                   	push   edi
 475:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 478:	53                   	push   ebx
 479:	43                   	inc    ebx
 47a:	41                   	inc    ecx
 47b:	4c                   	dec    esp
 47c:	4c                   	dec    esp
 47d:	5f                   	pop    edi
 47e:	41                   	inc    ecx
 47f:	4c                   	dec    esp
 480:	4c                   	dec    esp
 481:	4f                   	dec    edi
 482:	43                   	inc    ebx
 483:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
 487:	67 74 68             	addr16 je 4f2 <sysEnter_Vector-0x12fb0e>
 48a:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 48d:	61                   	popa   
 48e:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
 492:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
 497:	66                   	data16
 498:	66                   	data16
 499:	65                   	gs
 49a:	72 00                	jb     49c <sysEnter_Vector-0x12fb64>
 49c:	73 72                	jae    510 <sysEnter_Vector-0x12faf0>
 49e:	63 2f                	arpl   WORD PTR [edi],bp
 4a0:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 4a7:	53                   	push   ebx
 4a8:	59                   	pop    ecx
 4a9:	53                   	push   ebx
 4aa:	43                   	inc    ebx
 4ab:	41                   	inc    ecx
 4ac:	4c                   	dec    esp
 4ad:	4c                   	dec    esp
 4ae:	5f                   	pop    edi
 4af:	46                   	inc    esi
 4b0:	4f                   	dec    edi
 4b1:	52                   	push   edx
 4b2:	4b                   	dec    ebx
 4b3:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 4b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4b7:	64                   	fs
 4b8:	6c                   	ins    BYTE PTR es:[edi],dx
 4b9:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 4bd:	53                   	push   ebx
 4be:	43                   	inc    ebx
 4bf:	41                   	inc    ecx
 4c0:	4c                   	dec    esp
 4c1:	4c                   	dec    esp
 4c2:	5f                   	pop    edi
 4c3:	50                   	push   eax
 4c4:	52                   	push   edx
 4c5:	49                   	dec    ecx
 4c6:	4e                   	dec    esi
 4c7:	54                   	push   esp
 4c8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4cb:	53                   	push   ebx
 4cc:	43                   	inc    ebx
 4cd:	41                   	inc    ecx
 4ce:	4c                   	dec    esp
 4cf:	4c                   	dec    esp
 4d0:	5f                   	pop    edi
 4d1:	43                   	inc    ebx
 4d2:	4c                   	dec    esp
 4d3:	4f                   	dec    edi
 4d4:	53                   	push   ebx
 4d5:	45                   	inc    ebp
 4d6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4d9:	53                   	push   ebx
 4da:	43                   	inc    ebx
 4db:	41                   	inc    ecx
 4dc:	4c                   	dec    esp
 4dd:	4c                   	dec    esp
 4de:	5f                   	pop    edi
 4df:	45                   	inc    ebp
 4e0:	4e                   	dec    esi
 4e1:	44                   	inc    esp
 4e2:	50                   	push   eax
 4e3:	52                   	push   edx
 4e4:	4f                   	dec    edi
 4e5:	43                   	inc    ebx
 4e6:	45                   	inc    ebp
 4e7:	53                   	push   ebx
 4e8:	53                   	push   ebx
 4e9:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 4ec:	6c                   	ins    BYTE PTR es:[edi],dx
 4ed:	65                   	gs
 4ee:	5f                   	pop    edi
 4ef:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
 4f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4f4:	75 70                	jne    566 <sysEnter_Vector-0x12fa9a>
 4f6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4f9:	53                   	push   ebx
 4fa:	43                   	inc    ebx
 4fb:	41                   	inc    ecx
 4fc:	4c                   	dec    esp
 4fd:	4c                   	dec    esp
 4fe:	5f                   	pop    edi
 4ff:	52                   	push   edx
 500:	45                   	inc    ebp
 501:	42                   	inc    edx
 502:	4f                   	dec    edi
 503:	4f                   	dec    edi
 504:	54                   	push   esp
 505:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 508:	74 64                	je     56e <sysEnter_Vector-0x12fa92>
 50a:	69 72 00 73 72 63 2f 	imul   esi,DWORD PTR [edx+0x0],0x2f637273
 511:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 518:	6e                   	outs   dx,BYTE PTR ds:[esi]
 519:	70 75                	jo     590 <sysEnter_Vector-0x12fa70>
 51b:	74 2e                	je     54b <sysEnter_Vector-0x12fab5>
 51d:	63 00                	arpl   WORD PTR [eax],ax
 51f:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 526:	67                   	addr16
 527:	65                   	gs
 528:	74 73                	je     59d <sysEnter_Vector-0x12fa63>
 52a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 52d:	78 6c                	js     59b <sysEnter_Vector-0x12fa65>
 52f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 531:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 534:	74 73                	je     5a9 <sysEnter_Vector-0x12fa57>
 536:	45                   	inc    ebp
 537:	72 72                	jb     5ab <sysEnter_Vector-0x12fa55>
 539:	6f                   	outs   dx,DWORD PTR ds:[esi]
 53a:	72 00                	jb     53c <sysEnter_Vector-0x12fac4>
 53c:	70 75                	jo     5b3 <sysEnter_Vector-0x12fa4d>
 53e:	74 63                	je     5a3 <sysEnter_Vector-0x12fa5d>
 540:	00 6c 62 75          	add    BYTE PTR [edx+eiz*2+0x75],ch
 544:	66                   	data16
 545:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 548:	74 73                	je     5bd <sysEnter_Vector-0x12fa43>
 54a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 54d:	74 63                	je     5b2 <sysEnter_Vector-0x12fa4e>
 54f:	68 61 72 00 70       	push   0x70007261
 554:	72 69                	jb     5bf <sysEnter_Vector-0x12fa41>
 556:	6e                   	outs   dx,BYTE PTR ds:[esi]
 557:	74 00                	je     559 <sysEnter_Vector-0x12faa7>
 559:	6c                   	ins    BYTE PTR es:[edi],dx
 55a:	61                   	popa   
 55b:	73 74                	jae    5d1 <sysEnter_Vector-0x12fa2f>
 55d:	53                   	push   ebx
 55e:	70 61                	jo     5c1 <sysEnter_Vector-0x12fa3f>
 560:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 563:	74 72                	je     5d7 <sysEnter_Vector-0x12fa29>
 565:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 568:	7a 65                	jp     5cf <sysEnter_Vector-0x12fa31>
 56a:	5f                   	pop    edi
 56b:	74 00                	je     56d <sysEnter_Vector-0x12fa93>
 56d:	73 69                	jae    5d8 <sysEnter_Vector-0x12fa28>
 56f:	67 44                	addr16 inc esp
 571:	61                   	popa   
 572:	74 61                	je     5d5 <sysEnter_Vector-0x12fa2b>
 574:	00 71 75             	add    BYTE PTR [ecx+0x75],dh
 577:	6f                   	outs   dx,DWORD PTR ds:[esi]
 578:	74 65                	je     5df <sysEnter_Vector-0x12fa21>
 57a:	50                   	push   eax
 57b:	74 72                	je     5ef <sysEnter_Vector-0x12fa11>
 57d:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 580:	67 76 50             	addr16 jbe 5d3 <sysEnter_Vector-0x12fa2d>
 583:	74 72                	je     5f7 <sysEnter_Vector-0x12fa09>
 585:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 588:	61                   	popa   
 589:	72 74                	jb     5ff <sysEnter_Vector-0x12fa01>
 58b:	5f                   	pop    edi
 58c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 58d:	66 5f                	pop    di
 58f:	77 6f                	ja     600 <sysEnter_Vector-0x12fa00>
 591:	72 64                	jb     5f7 <sysEnter_Vector-0x12fa09>
 593:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 596:	6f                   	outs   dx,DWORD PTR ds:[esi]
 597:	67 72 61             	addr16 jb 5fb <sysEnter_Vector-0x12fa05>
 59a:	6d                   	ins    DWORD PTR es:[edi],dx
 59b:	00 74 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],dh
 59f:	74 00                	je     5a1 <sysEnter_Vector-0x12fa5f>
 5a1:	6c                   	ins    BYTE PTR es:[edi],dx
 5a2:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
 5a9:	74 00                	je     5ab <sysEnter_Vector-0x12fa55>
 5ab:	73 74                	jae    621 <sysEnter_Vector-0x12f9df>
 5ad:	61                   	popa   
 5ae:	74 65                	je     615 <sysEnter_Vector-0x12f9eb>
 5b0:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 5b3:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 5b6:	6c                   	ins    BYTE PTR es:[edi],dx
 5b7:	74 69                	je     622 <sysEnter_Vector-0x12f9de>
 5b9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5ba:	5f                   	pop    edi
 5bb:	76 61                	jbe    61e <sysEnter_Vector-0x12f9e2>
 5bd:	5f                   	pop    edi
 5be:	6c                   	ins    BYTE PTR es:[edi],dx
 5bf:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 5c6:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 5cd:	00 
 5ce:	73 70                	jae    640 <sysEnter_Vector-0x12f9c0>
 5d0:	61                   	popa   
 5d1:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 5d4:	74 72                	je     648 <sysEnter_Vector-0x12f9b8>
 5d6:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
 5da:	70 00                	jo     5dc <sysEnter_Vector-0x12fa24>
 5dc:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 5df:	6c                   	ins    BYTE PTR es:[edi],dx
 5e0:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 5e7:	67 76 00             	addr16 jbe 5ea <sysEnter_Vector-0x12fa16>
 5ea:	77 61                	ja     64d <sysEnter_Vector-0x12f9b3>
 5ec:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 5f3:	65 
 5f4:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 5f7:	4c                   	dec    esp
 5f8:	65                   	gs
 5f9:	76 65                	jbe    660 <sysEnter_Vector-0x12f9a0>
 5fb:	6c                   	ins    BYTE PTR es:[edi],dx
 5fc:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 5ff:	6c                   	ins    BYTE PTR es:[edi],dx
 600:	6c                   	ins    BYTE PTR es:[edi],dx
 601:	6e                   	outs   dx,BYTE PTR ds:[esi]
 602:	75 6d                	jne    671 <sysEnter_Vector-0x12f98f>
 604:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
 608:	71 75                	jno    67f <sysEnter_Vector-0x12f981>
 60a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 60b:	74 65                	je     672 <sysEnter_Vector-0x12f98e>
 60d:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 610:	65                   	gs
 611:	65                   	gs
 612:	70 00                	jo     614 <sysEnter_Vector-0x12f9ec>
 614:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 617:	6c                   	ins    BYTE PTR es:[edi],dx
 618:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 61f:	67 76 49             	addr16 jbe 66b <sysEnter_Vector-0x12f995>
 622:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 626:	73 79                	jae    6a1 <sysEnter_Vector-0x12f95f>
 628:	73 63                	jae    68d <sysEnter_Vector-0x12f973>
 62a:	61                   	popa   
 62b:	6c                   	ins    BYTE PTR es:[edi],dx
 62c:	6c                   	ins    BYTE PTR es:[edi],dx
 62d:	30 00                	xor    BYTE PTR [eax],al
 62f:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 631:	5f                   	pop    edi
 632:	73 79                	jae    6ad <sysEnter_Vector-0x12f953>
 634:	73 63                	jae    699 <sysEnter_Vector-0x12f967>
 636:	61                   	popa   
 637:	6c                   	ins    BYTE PTR es:[edi],dx
 638:	6c                   	ins    BYTE PTR es:[edi],dx
 639:	31 00                	xor    DWORD PTR [eax],eax
 63b:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 63d:	5f                   	pop    edi
 63e:	73 79                	jae    6b9 <sysEnter_Vector-0x12f947>
 640:	73 63                	jae    6a5 <sysEnter_Vector-0x12f95b>
 642:	61                   	popa   
 643:	6c                   	ins    BYTE PTR es:[edi],dx
 644:	6c                   	ins    BYTE PTR es:[edi],dx
 645:	32 00                	xor    al,BYTE PTR [eax]
 647:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 649:	5f                   	pop    edi
 64a:	73 79                	jae    6c5 <sysEnter_Vector-0x12f93b>
 64c:	73 63                	jae    6b1 <sysEnter_Vector-0x12f94f>
 64e:	61                   	popa   
 64f:	6c                   	ins    BYTE PTR es:[edi],dx
 650:	6c                   	ins    BYTE PTR es:[edi],dx
 651:	33 00                	xor    eax,DWORD PTR [eax]
 653:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 655:	5f                   	pop    edi
 656:	73 79                	jae    6d1 <sysEnter_Vector-0x12f92f>
 658:	73 63                	jae    6bd <sysEnter_Vector-0x12f943>
 65a:	61                   	popa   
 65b:	6c                   	ins    BYTE PTR es:[edi],dx
 65c:	6c                   	ins    BYTE PTR es:[edi],dx
 65d:	34 00                	xor    al,0x0
 65f:	49                   	dec    ecx
 660:	4e                   	dec    esi
 661:	5f                   	pop    edi
 662:	57                   	push   edi
 663:	4f                   	dec    edi
 664:	52                   	push   edx
 665:	44                   	inc    esp
 666:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 669:	67 76 5f             	addr16 jbe 6cb <sysEnter_Vector-0x12f935>
 66c:	73 69                	jae    6d7 <sysEnter_Vector-0x12f929>
 66e:	7a 65                	jp     6d5 <sysEnter_Vector-0x12f92b>
 670:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 674:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 677:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 67e:	65 
 67f:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 683:	73 70                	jae    6f5 <sysEnter_Vector-0x12f90b>
 685:	61                   	popa   
 686:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 689:	5f                   	pop    edi
 68a:	5f                   	pop    edi
 68b:	67 6e                	outs   dx,BYTE PTR ds:[si]
 68d:	75 63                	jne    6f2 <sysEnter_Vector-0x12f90e>
 68f:	5f                   	pop    edi
 690:	76 61                	jbe    6f3 <sysEnter_Vector-0x12f90d>
 692:	5f                   	pop    edi
 693:	6c                   	ins    BYTE PTR es:[edi],dx
 694:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 69b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 69c:	74 64                	je     702 <sysEnter_Vector-0x12f8fe>
 69e:	49                   	dec    ecx
 69f:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 6a2:	72 61                	jb     705 <sysEnter_Vector-0x12f8fb>
 6a4:	6d                   	ins    DWORD PTR es:[edi],dx
 6a5:	31 00                	xor    DWORD PTR [eax],eax
 6a7:	70 61                	jo     70a <sysEnter_Vector-0x12f8f6>
 6a9:	72 61                	jb     70c <sysEnter_Vector-0x12f8f4>
 6ab:	6d                   	ins    DWORD PTR es:[edi],dx
 6ac:	32 00                	xor    al,BYTE PTR [eax]
 6ae:	70 61                	jo     711 <sysEnter_Vector-0x12f8ef>
 6b0:	72 61                	jb     713 <sysEnter_Vector-0x12f8ed>
 6b2:	6d                   	ins    DWORD PTR es:[edi],dx
 6b3:	33 00                	xor    eax,DWORD PTR [eax]
 6b5:	70 61                	jo     718 <sysEnter_Vector-0x12f8e8>
 6b7:	72 61                	jb     71a <sysEnter_Vector-0x12f8e6>
 6b9:	6d                   	ins    DWORD PTR es:[edi],dx
 6ba:	34 00                	xor    al,0x0
 6bc:	65                   	gs
 6bd:	78 65                	js     724 <sysEnter_Vector-0x12f8dc>
 6bf:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 6c2:	65                   	gs
 6c3:	78 65                	js     72a <sysEnter_Vector-0x12f8d6>
 6c5:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 6c8:	66 6f                	outs   dx,WORD PTR ds:[esi]
 6ca:	72 6d                	jb     739 <sysEnter_Vector-0x12f8c7>
 6cc:	61                   	popa   
 6cd:	74 00                	je     6cf <sysEnter_Vector-0x12f931>
 6cf:	70 72                	jo     743 <sysEnter_Vector-0x12f8bd>
 6d1:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 6d8:	65                   	gs
 6d9:	72 00                	jb     6db <sysEnter_Vector-0x12f925>
 6db:	73 69                	jae    746 <sysEnter_Vector-0x12f8ba>
 6dd:	67 6e                	outs   dx,BYTE PTR ds:[si]
 6df:	61                   	popa   
 6e0:	6c                   	ins    BYTE PTR es:[edi],dx
 6e1:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 6e4:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 6e7:	5f                   	pop    edi
 6e8:	5f                   	pop    edi
 6e9:	73 65                	jae    750 <sysEnter_Vector-0x12f8b0>
 6eb:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 6ee:	64                   	fs
 6ef:	73 00                	jae    6f1 <sysEnter_Vector-0x12f90f>
 6f1:	44                   	inc    esp
 6f2:	55                   	push   ebp
 6f3:	4c                   	dec    esp
 6f4:	4c                   	dec    esp
 6f5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 6f8:	61                   	popa   
 6f9:	74 65                	je     760 <sysEnter_Vector-0x12f8a0>
 6fb:	73 00                	jae    6fd <sysEnter_Vector-0x12f903>
 6fd:	49                   	dec    ecx
 6fe:	4e                   	dec    esi
 6ff:	5f                   	pop    edi
 700:	53                   	push   ebx
 701:	54                   	push   esp
 702:	52                   	push   edx
 703:	49                   	dec    ecx
 704:	4e                   	dec    esi
 705:	47                   	inc    edi
 706:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 709:	63 2f                	arpl   WORD PTR [edi],bp
 70b:	6c                   	ins    BYTE PTR es:[edi],dx
 70c:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 713:	4f                   	dec    edi
 714:	53                   	push   ebx
 715:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 718:	61                   	popa   
 719:	72 67                	jb     782 <sysEnter_Vector-0x12f87e>
 71b:	63 00                	arpl   WORD PTR [eax],ax
 71d:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 720:	6c                   	ins    BYTE PTR es:[edi],dx
 721:	69 6e 65 00 73 70 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c707300
 728:	69 74 49 00 70 72 69 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6e697270
 72f:	6e 
 730:	74 66                	je     798 <sysEnter_Vector-0x12f868>
 732:	49                   	dec    ecx
 733:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 737:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 73a:	6c                   	ins    BYTE PTR es:[edi],dx
 73b:	65                   	gs
 73c:	61                   	popa   
 73d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 73e:	75 70                	jne    7b0 <sysEnter_Vector-0x12f850>
 740:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 743:	67 76 00             	addr16 jbe 746 <sysEnter_Vector-0x12f8ba>
 746:	65                   	gs
 747:	78 69                	js     7b2 <sysEnter_Vector-0x12f84e>
 749:	74 00                	je     74b <sysEnter_Vector-0x12f8b5>
 74b:	73 74                	jae    7c1 <sysEnter_Vector-0x12f83f>
 74d:	61                   	popa   
 74e:	74 75                	je     7c5 <sysEnter_Vector-0x12f83b>
 750:	73 00                	jae    752 <sysEnter_Vector-0x12f8ae>
 752:	73 69                	jae    7bd <sysEnter_Vector-0x12f843>
 754:	67 48                	addr16 dec eax
 756:	61                   	popa   
 757:	6e                   	outs   dx,BYTE PTR ds:[esi]
 758:	64                   	fs
 759:	6c                   	ins    BYTE PTR es:[edi],dx
 75a:	65                   	gs
 75b:	72 00                	jb     75d <sysEnter_Vector-0x12f8a3>
 75d:	6d                   	ins    DWORD PTR es:[edi],dx
 75e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 75f:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 766:	6e 
 767:	61                   	popa   
 768:	6c                   	ins    BYTE PTR es:[edi],dx
 769:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 76c:	67 73 00             	addr16 jae 76f <sysEnter_Vector-0x12f891>
 76f:	70 72                	jo     7e3 <sysEnter_Vector-0x12f81d>
 771:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 778:	6f                   	outs   dx,DWORD PTR ds:[esi]
 779:	70 00                	jo     77b <sysEnter_Vector-0x12f885>
 77b:	67                   	addr16
 77c:	65                   	gs
 77d:	74 63                	je     7e2 <sysEnter_Vector-0x12f81e>
 77f:	77 64                	ja     7e5 <sysEnter_Vector-0x12f81b>
 781:	00 61 64             	add    BYTE PTR [ecx+0x64],ah
 784:	64                   	fs
 785:	72 00                	jb     787 <sysEnter_Vector-0x12f879>
 787:	6f                   	outs   dx,DWORD PTR ds:[esi]
 788:	66 66 5f             	data32 pop di
 78b:	74 00                	je     78d <sysEnter_Vector-0x12f873>
 78d:	70 72                	jo     801 <sysEnter_Vector-0x12f7ff>
 78f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 790:	74 00                	je     792 <sysEnter_Vector-0x12f86e>
 792:	73 4d                	jae    7e1 <sysEnter_Vector-0x12f81f>
 794:	4d                   	dec    ebp
 795:	61                   	popa   
 796:	70 53                	jo     7eb <sysEnter_Vector-0x12f815>
 798:	79 73                	jns    80d <sysEnter_Vector-0x12f7f3>
 79a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 79d:	6c                   	ins    BYTE PTR es:[edi],dx
 79e:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
 7a1:	61                   	popa   
 7a2:	70 00                	jo     7a4 <sysEnter_Vector-0x12f85c>
 7a4:	70 61                	jo     807 <sysEnter_Vector-0x12f7f9>
 7a6:	72 61                	jb     809 <sysEnter_Vector-0x12f7f7>
 7a8:	6d                   	ins    DWORD PTR es:[edi],dx
 7a9:	73 00                	jae    7ab <sysEnter_Vector-0x12f855>
 7ab:	73 72                	jae    81f <sysEnter_Vector-0x12f7e1>
 7ad:	63 2f                	arpl   WORD PTR [edi],bp
 7af:	6c                   	ins    BYTE PTR es:[edi],dx
 7b0:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
 7b7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 7ba:	66                   	data16
 7bb:	6c                   	ins    BYTE PTR es:[edi],dx
 7bc:	61                   	popa   
 7bd:	67 73 00             	addr16 jae 7c0 <sysEnter_Vector-0x12f840>
 7c0:	73 79                	jae    83b <sysEnter_Vector-0x12f7c5>
 7c2:	73 63                	jae    827 <sysEnter_Vector-0x12f7d9>
 7c4:	61                   	popa   
 7c5:	6c                   	ins    BYTE PTR es:[edi],dx
 7c6:	6c                   	ins    BYTE PTR es:[edi],dx
 7c7:	5f                   	pop    edi
 7c8:	6d                   	ins    DWORD PTR es:[edi],dx
 7c9:	6d                   	ins    DWORD PTR es:[edi],dx
 7ca:	61                   	popa   
 7cb:	70 5f                	jo     82c <sysEnter_Vector-0x12f7d4>
 7cd:	74 00                	je     7cf <sysEnter_Vector-0x12f831>
 7cf:	6d                   	ins    DWORD PTR es:[edi],dx
 7d0:	61                   	popa   
 7d1:	6c                   	ins    BYTE PTR es:[edi],dx
 7d2:	6c                   	ins    BYTE PTR es:[edi],dx
 7d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7d4:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 7d7:	70 72                	jo     84b <sysEnter_Vector-0x12f7b5>
 7d9:	65                   	gs
 7da:	76 00                	jbe    7dc <sysEnter_Vector-0x12f824>
 7dc:	66                   	data16
 7dd:	72 65                	jb     844 <sysEnter_Vector-0x12f7bc>
 7df:	65 00 68 65          	add    BYTE PTR gs:[eax+0x65],ch
 7e3:	61                   	popa   
 7e4:	70 72                	jo     858 <sysEnter_Vector-0x12f7a8>
 7e6:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 7ea:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 7ed:	65                   	gs
 7ee:	65                   	gs
 7ef:	49                   	dec    ecx
 7f0:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 7f3:	72 6b                	jb     860 <sysEnter_Vector-0x12f7a0>
 7f5:	65                   	gs
 7f6:	72 00                	jb     7f8 <sysEnter_Vector-0x12f808>
 7f8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7f9:	65                   	gs
 7fa:	77 48                	ja     844 <sysEnter_Vector-0x12f7bc>
 7fc:	65                   	gs
 7fd:	61                   	popa   
 7fe:	70 52                	jo     852 <sysEnter_Vector-0x12f7ae>
 800:	65                   	gs
 801:	71 75                	jno    878 <sysEnter_Vector-0x12f788>
 803:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 80a:	75 6c                	jne    878 <sysEnter_Vector-0x12f788>
 80c:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 813:	75 65                	jne    87a <sysEnter_Vector-0x12f786>
 815:	73 74                	jae    88b <sysEnter_Vector-0x12f775>
 817:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 81a:	55                   	push   ebp
 81b:	73 65                	jae    882 <sysEnter_Vector-0x12f77e>
 81d:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
 820:	65                   	gs
 821:	61                   	popa   
 822:	70 00                	jo     824 <sysEnter_Vector-0x12f7dc>
 824:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
 82b:	6c                   	ins    BYTE PTR es:[edi],dx
 82c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 82d:	63 00                	arpl   WORD PTR [eax],ax
 82f:	66 6f                	outs   dx,WORD PTR ds:[esi]
 831:	6c                   	ins    BYTE PTR es:[edi],dx
 832:	64                   	fs
 833:	70 74                	jo     8a9 <sysEnter_Vector-0x12f757>
 835:	72 00                	jb     837 <sysEnter_Vector-0x12f7c9>
 837:	6d                   	ins    DWORD PTR es:[edi],dx
 838:	61                   	popa   
 839:	6c                   	ins    BYTE PTR es:[edi],dx
 83a:	6c                   	ins    BYTE PTR es:[edi],dx
 83b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 83c:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 83f:	6c                   	ins    BYTE PTR es:[edi],dx
 840:	65                   	gs
 841:	61                   	popa   
 842:	6e                   	outs   dx,BYTE PTR ds:[esi]
 843:	75 70                	jne    8b5 <sysEnter_Vector-0x12f74b>
 845:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 848:	6c                   	ins    BYTE PTR es:[edi],dx
 849:	6f                   	outs   dx,DWORD PTR ds:[esi]
 84a:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 84d:	65                   	gs
 84e:	64                   	fs
 84f:	50                   	push   eax
 850:	74 72                	je     8c4 <sysEnter_Vector-0x12f73c>
 852:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 855:	77 6c                	ja     8c3 <sysEnter_Vector-0x12f73d>
 857:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 859:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 85c:	77 53                	ja     8b1 <sysEnter_Vector-0x12f74f>
 85e:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
 865:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
 86b:	61                   	popa   
 86c:	6c                   	ins    BYTE PTR es:[edi],dx
 86d:	6c                   	ins    BYTE PTR es:[edi],dx
 86e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 86f:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 872:	66                   	data16
 873:	6e                   	outs   dx,BYTE PTR ds:[esi]
 874:	65                   	gs
 875:	77 70                	ja     8e7 <sysEnter_Vector-0x12f719>
 877:	74 72                	je     8eb <sysEnter_Vector-0x12f715>
 879:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 87c:	63 2f                	arpl   WORD PTR [edi],bp
 87e:	6d                   	ins    DWORD PTR es:[edi],dx
 87f:	61                   	popa   
 880:	6c                   	ins    BYTE PTR es:[edi],dx
 881:	6c                   	ins    BYTE PTR es:[edi],dx
 882:	6f                   	outs   dx,DWORD PTR ds:[esi]
 883:	63 2e                	arpl   WORD PTR [esi],bp
 885:	63 00                	arpl   WORD PTR [eax],ax
 887:	68 65 61 70 50       	push   0x50706165
 88c:	74 72                	je     900 <sysEnter_Vector-0x12f700>
 88e:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 891:	6f                   	outs   dx,DWORD PTR ds:[esi]
 892:	69 6e 74 65 72 00 68 	imul   ebp,DWORD PTR [esi+0x74],0x68007265
 899:	65                   	gs
 89a:	61                   	popa   
 89b:	70 50                	jo     8ed <sysEnter_Vector-0x12f713>
 89d:	74 72                	je     911 <sysEnter_Vector-0x12f6ef>
 89f:	4e                   	dec    esi
 8a0:	65                   	gs
 8a1:	78 74                	js     917 <sysEnter_Vector-0x12f6e9>
 8a3:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 8a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a7:	74 38                	je     8e1 <sysEnter_Vector-0x12f71f>
 8a9:	5f                   	pop    edi
 8aa:	74 00                	je     8ac <sysEnter_Vector-0x12f754>
 8ac:	72 65                	jb     913 <sysEnter_Vector-0x12f6ed>
 8ae:	61                   	popa   
 8af:	6c                   	ins    BYTE PTR es:[edi],dx
 8b0:	6c                   	ins    BYTE PTR es:[edi],dx
 8b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8b2:	63 00                	arpl   WORD PTR [eax],ax
 8b4:	73 72                	jae    928 <sysEnter_Vector-0x12f6d8>
 8b6:	63 2f                	arpl   WORD PTR [edi],bp
 8b8:	6d                   	ins    DWORD PTR es:[edi],dx
 8b9:	65                   	gs
 8ba:	6d                   	ins    DWORD PTR es:[edi],dx
 8bb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 8be:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 8c1:	64                   	fs
 8c2:	65                   	gs
 8c3:	73 74                	jae    939 <sysEnter_Vector-0x12f6c7>
 8c5:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 8c8:	6d                   	ins    DWORD PTR es:[edi],dx
 8c9:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 8cc:	49                   	dec    ecx
 8cd:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 8d0:	6d                   	ins    DWORD PTR es:[edi],dx
 8d1:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 8d4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8d7:	63 2f                	arpl   WORD PTR [edi],bp
 8d9:	6d                   	ins    DWORD PTR es:[edi],dx
 8da:	65                   	gs
 8db:	6d                   	ins    DWORD PTR es:[edi],dx
 8dc:	73 65                	jae    943 <sysEnter_Vector-0x12f6bd>
 8de:	74 2e                	je     90e <sysEnter_Vector-0x12f6f2>
 8e0:	63 00                	arpl   WORD PTR [eax],ax
 8e2:	6d                   	ins    DWORD PTR es:[edi],dx
 8e3:	65                   	gs
 8e4:	6d                   	ins    DWORD PTR es:[edi],dx
 8e5:	73 65                	jae    94c <sysEnter_Vector-0x12f6b4>
 8e7:	74 00                	je     8e9 <sysEnter_Vector-0x12f717>
 8e9:	6d                   	ins    DWORD PTR es:[edi],dx
 8ea:	65                   	gs
 8eb:	6d                   	ins    DWORD PTR es:[edi],dx
 8ec:	73 65                	jae    953 <sysEnter_Vector-0x12f6ad>
 8ee:	74 49                	je     939 <sysEnter_Vector-0x12f6c7>
 8f0:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 8f3:	61                   	popa   
 8f4:	6c                   	ins    BYTE PTR es:[edi],dx
 8f5:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 8f8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8f9:	74 31                	je     92c <sysEnter_Vector-0x12f6d4>
 8fb:	36                   	ss
 8fc:	5f                   	pop    edi
 8fd:	74 00                	je     8ff <sysEnter_Vector-0x12f701>
 8ff:	66 56                	push   si
 901:	61                   	popa   
 902:	6c                   	ins    BYTE PTR es:[edi],dx
 903:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 906:	63 2f                	arpl   WORD PTR [edi],bp
 908:	70 69                	jo     973 <sysEnter_Vector-0x12f68d>
 90a:	70 65                	jo     971 <sysEnter_Vector-0x12f68f>
 90c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 90f:	70 69                	jo     97a <sysEnter_Vector-0x12f686>
 911:	70 65                	jo     978 <sysEnter_Vector-0x12f688>
 913:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 916:	70 65                	jo     97d <sysEnter_Vector-0x12f683>
 918:	66                   	data16
 919:	64 00 73 6b          	add    BYTE PTR fs:[ebx+0x6b],dh
 91d:	69 70 5f 61 74 6f 69 	imul   esi,DWORD PTR [eax+0x5f],0x696f7461
 924:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 928:	61                   	popa   
 929:	73 65                	jae    990 <sysEnter_Vector-0x12f670>
 92b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 92e:	63 2f                	arpl   WORD PTR [edi],bp
 930:	73 70                	jae    9a2 <sysEnter_Vector-0x12f65e>
 932:	72 69                	jb     99d <sysEnter_Vector-0x12f663>
 934:	6e                   	outs   dx,BYTE PTR ds:[esi]
 935:	74 66                	je     99d <sysEnter_Vector-0x12f663>
 937:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 93a:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 93d:	65 00 71 75          	add    BYTE PTR gs:[ecx+0x75],dh
 941:	61                   	popa   
 942:	6c                   	ins    BYTE PTR es:[edi],dx
 943:	69 66 69 65 72 00 72 	imul   esp,DWORD PTR [esi+0x69],0x72007265
 94a:	65                   	gs
 94b:	70 65                	jo     9b2 <sysEnter_Vector-0x12f64e>
 94d:	61                   	popa   
 94e:	74 00                	je     950 <sysEnter_Vector-0x12f6b0>
 950:	6e                   	outs   dx,BYTE PTR ds:[esi]
 951:	75 6d                	jne    9c0 <sysEnter_Vector-0x12f640>
 953:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
 956:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 959:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 95d:	69 6f 6e 00 64 69 67 	imul   ebp,DWORD PTR [edi+0x6e],0x67696400
 964:	69 74 73 00 66 69 65 	imul   esi,DWORD PTR [ebx+esi*2+0x0],0x6c656966
 96b:	6c 
 96c:	64                   	fs
 96d:	5f                   	pop    edi
 96e:	77 69                	ja     9d9 <sysEnter_Vector-0x12f627>
 970:	64                   	fs
 971:	74 68                	je     9db <sysEnter_Vector-0x12f625>
 973:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 976:	72 65                	jb     9dd <sysEnter_Vector-0x12f623>
 978:	73 00                	jae    97a <sysEnter_Vector-0x12f686>
 97a:	76 73                	jbe    9ef <sysEnter_Vector-0x12f611>
 97c:	70 72                	jo     9f0 <sysEnter_Vector-0x12f610>
 97e:	69 6e 74 66 00 73 72 	imul   ebp,DWORD PTR [esi+0x74],0x72730066
 985:	63 2f                	arpl   WORD PTR [edi],bp
 987:	73 74                	jae    9fd <sysEnter_Vector-0x12f603>
 989:	64 69 6f 2e 63 00 62 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x75620063
 990:	75 
 991:	66                   	data16
 992:	66                   	data16
 993:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 996:	73 65                	jae    9fd <sysEnter_Vector-0x12f603>
 998:	74 52                	je     9ec <sysEnter_Vector-0x12f614>
 99a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 99b:	77 00                	ja     99d <sysEnter_Vector-0x12f663>
 99d:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 9a0:	66 50                	push   ax
 9a2:	74 72                	je     a16 <sysEnter_Vector-0x12f5ea>
 9a4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9a7:	72 63                	jb     a0c <sysEnter_Vector-0x12f5f4>
 9a9:	61                   	popa   
 9aa:	74 49                	je     9f5 <sysEnter_Vector-0x12f60b>
 9ac:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9af:	72 63                	jb     a14 <sysEnter_Vector-0x12f5ec>
 9b1:	61                   	popa   
 9b2:	74 00                	je     9b4 <sysEnter_Vector-0x12f64c>
 9b4:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 9b7:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 9ba:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9bc:	61                   	popa   
 9bd:	74 65                	je     a24 <sysEnter_Vector-0x12f5dc>
 9bf:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9c2:	63 2f                	arpl   WORD PTR [edi],bp
 9c4:	73 74                	jae    a3a <sysEnter_Vector-0x12f5c6>
 9c6:	72 69                	jb     a31 <sysEnter_Vector-0x12f5cf>
 9c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9c9:	67 73 2f             	addr16 jae 9fb <sysEnter_Vector-0x12f605>
 9cc:	73 74                	jae    a42 <sysEnter_Vector-0x12f5be>
 9ce:	72 63                	jb     a33 <sysEnter_Vector-0x12f5cd>
 9d0:	61                   	popa   
 9d1:	74 2e                	je     a01 <sysEnter_Vector-0x12f5ff>
 9d3:	63 00                	arpl   WORD PTR [eax],ax
 9d5:	73 74                	jae    a4b <sysEnter_Vector-0x12f5b5>
 9d7:	72 63                	jb     a3c <sysEnter_Vector-0x12f5c4>
 9d9:	6d                   	ins    DWORD PTR es:[edi],dx
 9da:	70 00                	jo     9dc <sysEnter_Vector-0x12f624>
 9dc:	73 72                	jae    a50 <sysEnter_Vector-0x12f5b0>
 9de:	63 2f                	arpl   WORD PTR [edi],bp
 9e0:	73 74                	jae    a56 <sysEnter_Vector-0x12f5aa>
 9e2:	72 69                	jb     a4d <sysEnter_Vector-0x12f5b3>
 9e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e5:	67 73 2f             	addr16 jae a17 <sysEnter_Vector-0x12f5e9>
 9e8:	73 74                	jae    a5e <sysEnter_Vector-0x12f5a2>
 9ea:	72 63                	jb     a4f <sysEnter_Vector-0x12f5b1>
 9ec:	6d                   	ins    DWORD PTR es:[edi],dx
 9ed:	70 2e                	jo     a1d <sysEnter_Vector-0x12f5e3>
 9ef:	63 00                	arpl   WORD PTR [eax],ax
 9f1:	63 6f 75             	arpl   WORD PTR [edi+0x75],bp
 9f4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9f5:	74 00                	je     9f7 <sysEnter_Vector-0x12f609>
 9f7:	73 74                	jae    a6d <sysEnter_Vector-0x12f593>
 9f9:	72 63                	jb     a5e <sysEnter_Vector-0x12f5a2>
 9fb:	70 79                	jo     a76 <sysEnter_Vector-0x12f58a>
 9fd:	63 00                	arpl   WORD PTR [eax],ax
 9ff:	73 74                	jae    a75 <sysEnter_Vector-0x12f58b>
 a01:	72 63                	jb     a66 <sysEnter_Vector-0x12f59a>
 a03:	70 79                	jo     a7e <sysEnter_Vector-0x12f582>
 a05:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a08:	63 2f                	arpl   WORD PTR [edi],bp
 a0a:	73 74                	jae    a80 <sysEnter_Vector-0x12f580>
 a0c:	72 69                	jb     a77 <sysEnter_Vector-0x12f589>
 a0e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a0f:	67 73 2f             	addr16 jae a41 <sysEnter_Vector-0x12f5bf>
 a12:	73 74                	jae    a88 <sysEnter_Vector-0x12f578>
 a14:	72 63                	jb     a79 <sysEnter_Vector-0x12f587>
 a16:	70 79                	jo     a91 <sysEnter_Vector-0x12f56f>
 a18:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a1b:	73 74                	jae    a91 <sysEnter_Vector-0x12f56f>
 a1d:	72 63                	jb     a82 <sysEnter_Vector-0x12f57e>
 a1f:	70 79                	jo     a9a <sysEnter_Vector-0x12f566>
 a21:	49                   	dec    ecx
 a22:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a25:	72 69                	jb     a90 <sysEnter_Vector-0x12f570>
 a27:	73 6e                	jae    a97 <sysEnter_Vector-0x12f569>
 a29:	75 6d                	jne    a98 <sysEnter_Vector-0x12f568>
 a2b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a2e:	63 2f                	arpl   WORD PTR [edi],bp
 a30:	73 74                	jae    aa6 <sysEnter_Vector-0x12f55a>
 a32:	72 69                	jb     a9d <sysEnter_Vector-0x12f563>
 a34:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a35:	67 73 2f             	addr16 jae a67 <sysEnter_Vector-0x12f599>
 a38:	73 74                	jae    aae <sysEnter_Vector-0x12f552>
 a3a:	72 69                	jb     aa5 <sysEnter_Vector-0x12f55b>
 a3c:	73 6e                	jae    aac <sysEnter_Vector-0x12f554>
 a3e:	75 6d                	jne    aad <sysEnter_Vector-0x12f553>
 a40:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a43:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 a46:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 a49:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 a50:	74 
 a51:	72 6c                	jb     abf <sysEnter_Vector-0x12f541>
 a53:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a55:	49                   	dec    ecx
 a56:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a59:	72 6c                	jb     ac7 <sysEnter_Vector-0x12f539>
 a5b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a5d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a60:	72 6e                	jb     ad0 <sysEnter_Vector-0x12f530>
 a62:	6c                   	ins    BYTE PTR es:[edi],dx
 a63:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a65:	49                   	dec    ecx
 a66:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a69:	72 6e                	jb     ad9 <sysEnter_Vector-0x12f527>
 a6b:	6c                   	ins    BYTE PTR es:[edi],dx
 a6c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a6e:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a71:	63 2f                	arpl   WORD PTR [edi],bp
 a73:	73 74                	jae    ae9 <sysEnter_Vector-0x12f517>
 a75:	72 69                	jb     ae0 <sysEnter_Vector-0x12f520>
 a77:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a78:	67 73 2f             	addr16 jae aaa <sysEnter_Vector-0x12f556>
 a7b:	73 74                	jae    af1 <sysEnter_Vector-0x12f50f>
 a7d:	72 6c                	jb     aeb <sysEnter_Vector-0x12f515>
 a7f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a81:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a84:	73 74                	jae    afa <sysEnter_Vector-0x12f506>
 a86:	72 6e                	jb     af6 <sysEnter_Vector-0x12f50a>
 a88:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a8b:	49                   	dec    ecx
 a8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a8f:	72 6e                	jb     aff <sysEnter_Vector-0x12f501>
 a91:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a94:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a97:	63 2f                	arpl   WORD PTR [edi],bp
 a99:	73 74                	jae    b0f <sysEnter_Vector-0x12f4f1>
 a9b:	72 69                	jb     b06 <sysEnter_Vector-0x12f4fa>
 a9d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a9e:	67 73 2f             	addr16 jae ad0 <sysEnter_Vector-0x12f530>
 aa1:	73 74                	jae    b17 <sysEnter_Vector-0x12f4e9>
 aa3:	72 6e                	jb     b13 <sysEnter_Vector-0x12f4ed>
 aa5:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 aa8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 aab:	73 72                	jae    b1f <sysEnter_Vector-0x12f4e1>
 aad:	63 2f                	arpl   WORD PTR [edi],bp
 aaf:	73 74                	jae    b25 <sysEnter_Vector-0x12f4db>
 ab1:	72 69                	jb     b1c <sysEnter_Vector-0x12f4e4>
 ab3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ab4:	67 73 2f             	addr16 jae ae6 <sysEnter_Vector-0x12f51a>
 ab7:	73 74                	jae    b2d <sysEnter_Vector-0x12f4d3>
 ab9:	72 6e                	jb     b29 <sysEnter_Vector-0x12f4d7>
 abb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 abe:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ac1:	73 74                	jae    b37 <sysEnter_Vector-0x12f4c9>
 ac3:	72 6e                	jb     b33 <sysEnter_Vector-0x12f4cd>
 ac5:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 ac8:	49                   	dec    ecx
 ac9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 acc:	72 6e                	jb     b3c <sysEnter_Vector-0x12f4c4>
 ace:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 ad1:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 ad4:	64                   	fs
 ad5:	70 74                	jo     b4b <sysEnter_Vector-0x12f4b5>
 ad7:	72 00                	jb     ad9 <sysEnter_Vector-0x12f527>
 ad9:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 adc:	6c                   	ins    BYTE PTR es:[edi],dx
 add:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 ae4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ae5:	75 6c                	jne    b53 <sysEnter_Vector-0x12f4ad>
 ae7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 aea:	63 2f                	arpl   WORD PTR [edi],bp
 aec:	73 74                	jae    b62 <sysEnter_Vector-0x12f49e>
 aee:	72 69                	jb     b59 <sysEnter_Vector-0x12f4a7>
 af0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 af1:	67 73 2f             	addr16 jae b23 <sysEnter_Vector-0x12f4dd>
 af4:	73 74                	jae    b6a <sysEnter_Vector-0x12f496>
 af6:	72 6f                	jb     b67 <sysEnter_Vector-0x12f499>
 af8:	75 6c                	jne    b66 <sysEnter_Vector-0x12f49a>
 afa:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 afd:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 b00:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b01:	66                   	data16
 b02:	66                   	data16
 b03:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
 b06:	74 72                	je     b7a <sysEnter_Vector-0x12f486>
 b08:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b0b:	63 2f                	arpl   WORD PTR [edi],bp
 b0d:	73 74                	jae    b83 <sysEnter_Vector-0x12f47d>
 b0f:	72 69                	jb     b7a <sysEnter_Vector-0x12f486>
 b11:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b12:	67 73 2f             	addr16 jae b44 <sysEnter_Vector-0x12f4bc>
 b15:	73 74                	jae    b8b <sysEnter_Vector-0x12f475>
 b17:	72 70                	jb     b89 <sysEnter_Vector-0x12f477>
 b19:	61                   	popa   
 b1a:	72 74                	jb     b90 <sysEnter_Vector-0x12f470>
 b1c:	73 2e                	jae    b4c <sysEnter_Vector-0x12f4b4>
 b1e:	63 00                	arpl   WORD PTR [eax],ax
 b20:	73 74                	jae    b96 <sysEnter_Vector-0x12f46a>
 b22:	72 6c                	jb     b90 <sysEnter_Vector-0x12f470>
 b24:	65                   	gs
 b25:	66                   	data16
 b26:	74 00                	je     b28 <sysEnter_Vector-0x12f4d8>
 b28:	73 72                	jae    b9c <sysEnter_Vector-0x12f464>
 b2a:	63 2f                	arpl   WORD PTR [edi],bp
 b2c:	73 74                	jae    ba2 <sysEnter_Vector-0x12f45e>
 b2e:	72 69                	jb     b99 <sysEnter_Vector-0x12f467>
 b30:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b31:	67 73 2f             	addr16 jae b63 <sysEnter_Vector-0x12f49d>
 b34:	73 74                	jae    baa <sysEnter_Vector-0x12f456>
 b36:	72 74                	jb     bac <sysEnter_Vector-0x12f454>
 b38:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b39:	6c                   	ins    BYTE PTR es:[edi],dx
 b3a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b3d:	73 74                	jae    bb3 <sysEnter_Vector-0x12f44d>
 b3f:	72 74                	jb     bb5 <sysEnter_Vector-0x12f44b>
 b41:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b42:	6c                   	ins    BYTE PTR es:[edi],dx
 b43:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b46:	72 74                	jb     bbc <sysEnter_Vector-0x12f444>
 b48:	72 69                	jb     bb3 <sysEnter_Vector-0x12f44d>
 b4a:	6d                   	ins    DWORD PTR es:[edi],dx
 b4b:	49                   	dec    ecx
 b4c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 b4f:	70 75                	jo     bc6 <sysEnter_Vector-0x12f43a>
 b51:	74 00                	je     b53 <sysEnter_Vector-0x12f4ad>
 b53:	73 72                	jae    bc7 <sysEnter_Vector-0x12f439>
 b55:	63 2f                	arpl   WORD PTR [edi],bp
 b57:	73 74                	jae    bcd <sysEnter_Vector-0x12f433>
 b59:	72 69                	jb     bc4 <sysEnter_Vector-0x12f43c>
 b5b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b5c:	67 73 2f             	addr16 jae b8e <sysEnter_Vector-0x12f472>
 b5f:	73 74                	jae    bd5 <sysEnter_Vector-0x12f42b>
 b61:	72 74                	jb     bd7 <sysEnter_Vector-0x12f429>
 b63:	72 69                	jb     bce <sysEnter_Vector-0x12f432>
 b65:	6d                   	ins    DWORD PTR es:[edi],dx
 b66:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b69:	73 74                	jae    bdf <sysEnter_Vector-0x12f421>
 b6b:	72 74                	jb     be1 <sysEnter_Vector-0x12f41f>
 b6d:	72 69                	jb     bd8 <sysEnter_Vector-0x12f428>
 b6f:	6d                   	ins    DWORD PTR es:[edi],dx
 b70:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 b73:	74 73                	je     be8 <sysEnter_Vector-0x12f418>
 b75:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
 b7c:	2f                   	das    
 b7d:	73 74                	jae    bf3 <sysEnter_Vector-0x12f40d>
 b7f:	72 72                	jb     bf3 <sysEnter_Vector-0x12f40d>
 b81:	65                   	gs
 b82:	70 6c                	jo     bf0 <sysEnter_Vector-0x12f410>
 b84:	61                   	popa   
 b85:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
 b88:	63 00                	arpl   WORD PTR [eax],ax
 b8a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b8b:	65                   	gs
 b8c:	65                   	gs
 b8d:	64                   	fs
 b8e:	6c                   	ins    BYTE PTR es:[edi],dx
 b8f:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 b93:	73 6f                	jae    c04 <sysEnter_Vector-0x12f3fc>
 b95:	66                   	data16
 b96:	66                   	data16
 b97:	73 65                	jae    bfe <sysEnter_Vector-0x12f402>
 b99:	74 00                	je     b9b <sysEnter_Vector-0x12f465>
 b9b:	73 74                	jae    c11 <sysEnter_Vector-0x12f3ef>
 b9d:	72 72                	jb     c11 <sysEnter_Vector-0x12f3ef>
 b9f:	65                   	gs
 ba0:	70 6c                	jo     c0e <sysEnter_Vector-0x12f3f2>
 ba2:	61                   	popa   
 ba3:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 ba6:	70 61                	jo     c09 <sysEnter_Vector-0x12f3f7>
 ba8:	74 74                	je     c1e <sysEnter_Vector-0x12f3e2>
 baa:	65                   	gs
 bab:	72 6e                	jb     c1b <sysEnter_Vector-0x12f3e5>
 bad:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 bb0:	72 72                	jb     c24 <sysEnter_Vector-0x12f3dc>
 bb2:	65                   	gs
 bb3:	70 6c                	jo     c21 <sysEnter_Vector-0x12f3df>
 bb5:	61                   	popa   
 bb6:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
 bb9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 bbc:	72 73                	jb     c31 <sysEnter_Vector-0x12f3cf>
 bbe:	74 72                	je     c32 <sysEnter_Vector-0x12f3ce>
 bc0:	49                   	dec    ecx
 bc1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 bc4:	72 6e                	jb     c34 <sysEnter_Vector-0x12f3cc>
 bc6:	73 74                	jae    c3c <sysEnter_Vector-0x12f3c4>
 bc8:	72 49                	jb     c13 <sysEnter_Vector-0x12f3ed>
 bca:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 bcd:	63 2f                	arpl   WORD PTR [edi],bp
 bcf:	73 74                	jae    c45 <sysEnter_Vector-0x12f3bb>
 bd1:	72 73                	jb     c46 <sysEnter_Vector-0x12f3ba>
 bd3:	74 72                	je     c47 <sysEnter_Vector-0x12f3b9>
 bd5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 bd8:	72 63                	jb     c3d <sysEnter_Vector-0x12f3c3>
 bda:	73 69                	jae    c45 <sysEnter_Vector-0x12f3bb>
 bdc:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 be0:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 be3:	72 69                	jb     c4e <sysEnter_Vector-0x12f3b2>
 be5:	6e                   	outs   dx,BYTE PTR ds:[esi]
 be6:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 bea:	72 73                	jb     c5f <sysEnter_Vector-0x12f3a1>
 bec:	74 72                	je     c60 <sysEnter_Vector-0x12f3a0>
 bee:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 bf1:	63 2f                	arpl   WORD PTR [edi],bp
 bf3:	74 69                	je     c5e <sysEnter_Vector-0x12f3a2>
 bf5:	6d                   	ins    DWORD PTR es:[edi],dx
 bf6:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 bfa:	6c                   	ins    BYTE PTR es:[edi],dx
 bfb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bfc:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 bff:	74 69                	je     c6a <sysEnter_Vector-0x12f396>
 c01:	6d                   	ins    DWORD PTR es:[edi],dx
 c02:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 c07:	68 6f 75 72 00       	push   0x72756f
 c0c:	67                   	addr16
 c0d:	65                   	gs
 c0e:	74 74                	je     c84 <sysEnter_Vector-0x12f37c>
 c10:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 c17:	61                   	popa   
 c18:	79 6c                	jns    c86 <sysEnter_Vector-0x12f37a>
 c1a:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 c21:	7a 6e                	jp     c91 <sysEnter_Vector-0x12f36f>
 c23:	61                   	popa   
 c24:	6d                   	ins    DWORD PTR es:[edi],dx
 c25:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 c29:	74 69                	je     c94 <sysEnter_Vector-0x12f36c>
 c2b:	6d                   	ins    DWORD PTR es:[edi],dx
 c2c:	65                   	gs
 c2d:	5f                   	pop    edi
 c2e:	72 00                	jb     c30 <sysEnter_Vector-0x12f3d0>
 c30:	74 69                	je     c9b <sysEnter_Vector-0x12f365>
 c32:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 c35:	54                   	push   esp
 c36:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c37:	57                   	push   edi
 c38:	61                   	popa   
 c39:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 c40:	6f 
 c41:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c42:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c46:	79 65                	jns    cad <sysEnter_Vector-0x12f353>
 c48:	61                   	popa   
 c49:	72 00                	jb     c4b <sysEnter_Vector-0x12f3b5>
 c4b:	6d                   	ins    DWORD PTR es:[edi],dx
 c4c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c4d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c4e:	74 68                	je     cb8 <sysEnter_Vector-0x12f348>
 c50:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 c53:	74 74                	je     cc9 <sysEnter_Vector-0x12f337>
 c55:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 c5c:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 c63:	61                   	popa   
 c64:	79 6e                	jns    cd4 <sysEnter_Vector-0x12f32c>
 c66:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c67:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 c6a:	74 69                	je     cd5 <sysEnter_Vector-0x12f32b>
 c6c:	6d                   	ins    DWORD PTR es:[edi],dx
 c6d:	65                   	gs
 c6e:	5f                   	pop    edi
 c6f:	72 49                	jb     cba <sysEnter_Vector-0x12f346>
 c71:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c75:	6d                   	ins    DWORD PTR es:[edi],dx
 c76:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 c7d:	64                   	fs
 c7e:	61                   	popa   
 c7f:	79 00                	jns    c81 <sysEnter_Vector-0x12f37f>
 c81:	6c                   	ins    BYTE PTR es:[edi],dx
 c82:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c83:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c86:	54                   	push   esp
 c87:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 c8e:	75 66                	jne    cf6 <sysEnter_Vector-0x12f30a>
 c90:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 c94:	65                   	gs
 c95:	5f                   	pop    edi
 c96:	74 00                	je     c98 <sysEnter_Vector-0x12f368>
 c98:	6c                   	ins    BYTE PTR es:[edi],dx
 c99:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c9a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c9d:	74 69                	je     d08 <sysEnter_Vector-0x12f2f8>
 c9f:	6d                   	ins    DWORD PTR es:[edi],dx
 ca0:	65                   	gs
 ca1:	5f                   	pop    edi
 ca2:	72 00                	jb     ca4 <sysEnter_Vector-0x12f35c>
 ca4:	64                   	fs
 ca5:	61                   	popa   
 ca6:	79 63                	jns    d0b <sysEnter_Vector-0x12f2f5>
 ca8:	6c                   	ins    BYTE PTR es:[edi],dx
 ca9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 caa:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 cad:	6d                   	ins    DWORD PTR es:[edi],dx
 cae:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 cb3:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 cb7:	67 6d                	ins    DWORD PTR es:[di],dx
 cb9:	74 6f                	je     d2a <sysEnter_Vector-0x12f2d6>
 cbb:	66                   	data16
 cbc:	66                   	data16
 cbd:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 cc1:	77 64                	ja     d27 <sysEnter_Vector-0x12f2d9>
 cc3:	61                   	popa   
 cc4:	79 00                	jns    cc6 <sysEnter_Vector-0x12f33a>
 cc6:	5f                   	pop    edi
 cc7:	79 74                	jns    d3d <sysEnter_Vector-0x12f2c3>
 cc9:	61                   	popa   
 cca:	62 00                	bound  eax,QWORD PTR [eax]
 ccc:	74 6d                	je     d3b <sysEnter_Vector-0x12f2c5>
 cce:	5f                   	pop    edi
 ccf:	6d                   	ins    DWORD PTR es:[edi],dx
 cd0:	64                   	fs
 cd1:	61                   	popa   
 cd2:	79 00                	jns    cd4 <sysEnter_Vector-0x12f32c>
 cd4:	74 6d                	je     d43 <sysEnter_Vector-0x12f2bd>
 cd6:	5f                   	pop    edi
 cd7:	73 65                	jae    d3e <sysEnter_Vector-0x12f2c2>
 cd9:	63 00                	arpl   WORD PTR [eax],ax
 cdb:	74 6d                	je     d4a <sysEnter_Vector-0x12f2b6>
 cdd:	5f                   	pop    edi
 cde:	7a 6f                	jp     d4f <sysEnter_Vector-0x12f2b1>
 ce0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ce1:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 ce6:	65                   	gs
 ce7:	72 00                	jb     ce9 <sysEnter_Vector-0x12f317>
 ce9:	6c                   	ins    BYTE PTR es:[edi],dx
 cea:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ceb:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 cee:	74 69                	je     d59 <sysEnter_Vector-0x12f2a7>
 cf0:	6d                   	ins    DWORD PTR es:[edi],dx
 cf1:	65                   	gs
 cf2:	5f                   	pop    edi
 cf3:	72 49                	jb     d3e <sysEnter_Vector-0x12f2c2>
 cf5:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 cf8:	73 74                	jae    d6e <sysEnter_Vector-0x12f292>
 cfa:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 cfd:	73 00                	jae    cff <sysEnter_Vector-0x12f301>
 cff:	72 65                	jb     d66 <sysEnter_Vector-0x12f29a>
 d01:	73 75                	jae    d78 <sysEnter_Vector-0x12f288>
 d03:	6c                   	ins    BYTE PTR es:[edi],dx
 d04:	74 00                	je     d06 <sysEnter_Vector-0x12f2fa>
 d06:	6f                   	outs   dx,DWORD PTR ds:[esi]
 d07:	76 65                	jbe    d6e <sysEnter_Vector-0x12f292>
 d09:	72 66                	jb     d71 <sysEnter_Vector-0x12f28f>
 d0b:	6c                   	ins    BYTE PTR es:[edi],dx
 d0c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 d0d:	77 00                	ja     d0f <sysEnter_Vector-0x12f2f1>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	6f                   	outs   dx,DWORD PTR ds:[esi]
   1:	0a 00                	or     al,BYTE PTR [eax]
   3:	00 a9 0a 00 00 ae    	add    BYTE PTR [ecx-0x51fffff6],ch
   9:	0a 00                	or     al,BYTE PTR [eax]
   b:	00 e2                	add    dl,ah
   d:	0a 00                	or     al,BYTE PTR [eax]
	...
