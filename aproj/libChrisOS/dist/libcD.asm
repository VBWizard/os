
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 56 48 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000008:	05 94 71 00 00       	add    eax,0x7194
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 1e 48 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000040:	05 5c 71 00 00       	add    eax,0x715c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 e4 47 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00007a:	05 22 71 00 00       	add    eax,0x7122
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 8f 47 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0000cf:	05 cd 70 00 00       	add    eax,0x70cd
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 7a 47 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 76 70 00 00    	add    ebx,0x7076
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtokI+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtokI+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 40 00 00 00    	mov    DWORD PTR [ebx+0x40],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtokI+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 40 00 00 00    	mov    DWORD PTR [ebx+0x40],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    

9f0001b3 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:59

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b3:	55                   	push   ebp
9f0001b4:	89 e5                	mov    ebp,esp
9f0001b6:	56                   	push   esi
9f0001b7:	53                   	push   ebx
9f0001b8:	e8 e3 46 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0001bd:	81 c3 df 6f 00 00    	add    ebx,0x6fdf
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:63
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001c3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001c7:	75 09                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:64
	s = lasts;
9f0001c9:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f0001cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
    do {
	if ((ch = *s++) == '\0')
9f0001d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0001d8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001de:	0f be f0             	movsx  esi,al
9f0001e1:	85 f6                	test   esi,esi
9f0001e3:	75 07                	jne    9f0001ec <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:67
	    return 0;
9f0001e5:	b8 00 00 00 00       	mov    eax,0x0
9f0001ea:	eb 57                	jmp    9f000243 <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    } while (strchrI(delim, ch));
9f0001ec:	83 ec 08             	sub    esp,0x8
9f0001ef:	56                   	push   esi
9f0001f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001f3:	e8 40 fe ff ff       	call   9f000038 <strchrI>
9f0001f8:	83 c4 10             	add    esp,0x10
9f0001fb:	85 c0                	test   eax,eax
9f0001fd:	75 d3                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
    --s;
9f0001ff:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    lasts = s + strcspnI(s, delim);
9f000203:	83 ec 08             	sub    esp,0x8
9f000206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00020c:	e8 b4 fe ff ff       	call   9f0000c5 <strcspnI>
9f000211:	83 c4 10             	add    esp,0x10
9f000214:	89 c2                	mov    edx,eax
9f000216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000219:	01 d0                	add    eax,edx
9f00021b:	89 83 44 00 00 00    	mov    DWORD PTR [ebx+0x44],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    if (*lasts != 0)
9f000221:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f000227:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00022a:	84 c0                	test   al,al
9f00022c:	74 12                	je     9f000240 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
	*lasts++ = 0;
9f00022e:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f000234:	8d 50 01             	lea    edx,[eax+0x1]
9f000237:	89 93 44 00 00 00    	mov    DWORD PTR [ebx+0x44],edx
9f00023d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    return s;
9f000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
9f000243:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000246:	5b                   	pop    ebx
9f000247:	5e                   	pop    esi
9f000248:	5d                   	pop    ebp
9f000249:	c3                   	ret    
9f00024a:	66 90                	xchg   ax,ax

9f00024c <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f00024c:	55                   	push   ebp
9f00024d:	89 e5                	mov    ebp,esp
9f00024f:	53                   	push   ebx
9f000250:	83 ec 14             	sub    esp,0x14
9f000253:	e8 06 46 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000258:	05 44 6f 00 00       	add    eax,0x6f44
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f00025d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000264:	83 ec 0c             	sub    esp,0xc
9f000267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00026a:	89 c3                	mov    ebx,eax
9f00026c:	e8 7b 30 00 00       	call   9f0032ec <strlenI>
9f000271:	83 c4 10             	add    esp,0x10
9f000274:	83 e8 01             	sub    eax,0x1
9f000277:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00027a:	eb 39                	jmp    9f0002b5 <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f00027c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00027f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000282:	01 d0                	add    eax,edx
9f000284:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000287:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f00028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000290:	01 c2                	add    edx,eax
9f000292:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000298:	01 c8                	add    eax,ecx
9f00029a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00029d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f00029f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002a5:	01 c2                	add    edx,eax
9f0002a7:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002ab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002b1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f0002b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002bb:	7c bf                	jl     9f00027c <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f0002bd:	90                   	nop
9f0002be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002c1:	c9                   	leave  
9f0002c2:	c3                   	ret    

9f0002c3 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f0002c3:	55                   	push   ebp
9f0002c4:	89 e5                	mov    ebp,esp
9f0002c6:	53                   	push   ebx
9f0002c7:	83 ec 14             	sub    esp,0x14
9f0002ca:	e8 8f 45 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0002cf:	05 cd 6e 00 00       	add    eax,0x6ecd
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002de:	79 03                	jns    9f0002e3 <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f0002e0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f0002e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0002f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002f3:	89 c2                	mov    edx,eax
9f0002f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002f8:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0002fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fe:	ba 67 66 66 66       	mov    edx,0x66666667
9f000303:	89 c8                	mov    eax,ecx
9f000305:	f7 ea                	imul   edx
9f000307:	c1 fa 02             	sar    edx,0x2
9f00030a:	89 c8                	mov    eax,ecx
9f00030c:	c1 f8 1f             	sar    eax,0x1f
9f00030f:	29 c2                	sub    edx,eax
9f000311:	89 d0                	mov    eax,edx
9f000313:	c1 e0 02             	shl    eax,0x2
9f000316:	01 d0                	add    eax,edx
9f000318:	01 c0                	add    eax,eax
9f00031a:	29 c1                	sub    ecx,eax
9f00031c:	89 ca                	mov    edx,ecx
9f00031e:	89 d0                	mov    eax,edx
9f000320:	83 c0 30             	add    eax,0x30
9f000323:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000328:	ba 67 66 66 66       	mov    edx,0x66666667
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	f7 ea                	imul   edx
9f000331:	c1 fa 02             	sar    edx,0x2
9f000334:	89 c8                	mov    eax,ecx
9f000336:	c1 f8 1f             	sar    eax,0x1f
9f000339:	29 c2                	sub    edx,eax
9f00033b:	89 d0                	mov    eax,edx
9f00033d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000340:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000344:	7f a4                	jg     9f0002ea <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f000346:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00034a:	79 13                	jns    9f00035f <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f00034c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00034f:	8d 50 01             	lea    edx,[eax+0x1]
9f000352:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000355:	89 c2                	mov    edx,eax
9f000357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00035a:	01 d0                	add    eax,edx
9f00035c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f00035f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000365:	01 d0                	add    eax,edx
9f000367:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f00036a:	83 ec 0c             	sub    esp,0xc
9f00036d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000370:	e8 d7 fe ff ff       	call   9f00024c <reverseI>
9f000375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f000378:	90                   	nop
9f000379:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00037c:	c9                   	leave  
9f00037d:	c3                   	ret    

9f00037e <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f00037e:	55                   	push   ebp
9f00037f:	89 e5                	mov    ebp,esp
9f000381:	53                   	push   ebx
9f000382:	83 ec 14             	sub    esp,0x14
9f000385:	e8 d4 44 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00038a:	05 12 6e 00 00       	add    eax,0x6e12
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00038f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000392:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000395:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000399:	79 03                	jns    9f00039e <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f00039b:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f00039e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0003ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003ae:	89 c2                	mov    edx,eax
9f0003b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003b3:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	83 c0 30             	add    eax,0x30
9f0003de:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003e3:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003e8:	89 c8                	mov    eax,ecx
9f0003ea:	f7 ea                	imul   edx
9f0003ec:	c1 fa 02             	sar    edx,0x2
9f0003ef:	89 c8                	mov    eax,ecx
9f0003f1:	c1 f8 1f             	sar    eax,0x1f
9f0003f4:	29 c2                	sub    edx,eax
9f0003f6:	89 d0                	mov    eax,edx
9f0003f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0003fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0003ff:	7f a4                	jg     9f0003a5 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000401:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000405:	79 13                	jns    9f00041a <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f000407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00040a:	8d 50 01             	lea    edx,[eax+0x1]
9f00040d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000410:	89 c2                	mov    edx,eax
9f000412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000415:	01 d0                	add    eax,edx
9f000417:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f00041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00041d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000420:	01 d0                	add    eax,edx
9f000422:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f000425:	83 ec 0c             	sub    esp,0xc
9f000428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00042b:	e8 1c fe ff ff       	call   9f00024c <reverseI>
9f000430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f000433:	90                   	nop
9f000434:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000437:	c9                   	leave  
9f000438:	c3                   	ret    

9f000439 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f000439:	55                   	push   ebp
9f00043a:	89 e5                	mov    ebp,esp
9f00043c:	83 ec 10             	sub    esp,0x10
9f00043f:	e8 1a 44 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000444:	05 58 6d 00 00       	add    eax,0x6d58
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f000449:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000450:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f000457:	eb 28                	jmp    9f000481 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f000459:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00045c:	89 d0                	mov    eax,edx
9f00045e:	c1 e0 02             	shl    eax,0x2
9f000461:	01 d0                	add    eax,edx
9f000463:	01 c0                	add    eax,eax
9f000465:	89 c1                	mov    ecx,eax
9f000467:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00046a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00046d:	01 d0                	add    eax,edx
9f00046f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000472:	0f be c0             	movsx  eax,al
9f000475:	01 c8                	add    eax,ecx
9f000477:	83 e8 30             	sub    eax,0x30
9f00047a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f00047d:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f000481:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000487:	01 d0                	add    eax,edx
9f000489:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00048c:	84 c0                	test   al,al
9f00048e:	75 c9                	jne    9f000459 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f000490:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f000493:	c9                   	leave  
9f000494:	c3                   	ret    
9f000495:	66 90                	xchg   ax,ax
9f000497:	90                   	nop

9f000498 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:14
#include "console.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f000498:	55                   	push   ebp
9f000499:	89 e5                	mov    ebp,esp
9f00049b:	53                   	push   ebx
9f00049c:	83 ec 14             	sub    esp,0x14
9f00049f:	e8 fc 43 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0004a4:	81 c3 f8 6c 00 00    	add    ebx,0x6cf8
/home/yogi/src/os/aproj/libChrisOS/src/console.c:18
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004aa:	83 ec 08             	sub    esp,0x8
9f0004ad:	8d 83 84 f7 ff ff    	lea    eax,[ebx-0x87c]
9f0004b3:	50                   	push   eax
9f0004b4:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004b7:	50                   	push   eax
9f0004b8:	e8 1b 2d 00 00       	call   9f0031d8 <strcpyI>
9f0004bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:19
    itoaI(x,xstr);
9f0004c0:	83 ec 08             	sub    esp,0x8
9f0004c3:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004c6:	50                   	push   eax
9f0004c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004ca:	e8 af fe ff ff       	call   9f00037e <itoaI>
9f0004cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    strcatI(cmd,xstr);
9f0004d2:	83 ec 08             	sub    esp,0x8
9f0004d5:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004d8:	50                   	push   eax
9f0004d9:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004dc:	50                   	push   eax
9f0004dd:	e8 64 2b 00 00       	call   9f003046 <strcatI>
9f0004e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    strcatI(cmd,";");
9f0004e5:	83 ec 08             	sub    esp,0x8
9f0004e8:	8d 83 87 f7 ff ff    	lea    eax,[ebx-0x879]
9f0004ee:	50                   	push   eax
9f0004ef:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004f2:	50                   	push   eax
9f0004f3:	e8 4e 2b 00 00       	call   9f003046 <strcatI>
9f0004f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    itoaI(y,ystr);
9f0004fb:	83 ec 08             	sub    esp,0x8
9f0004fe:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000501:	50                   	push   eax
9f000502:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000505:	e8 74 fe ff ff       	call   9f00037e <itoaI>
9f00050a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,ystr);
9f00050d:	83 ec 08             	sub    esp,0x8
9f000510:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000513:	50                   	push   eax
9f000514:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000517:	50                   	push   eax
9f000518:	e8 29 2b 00 00       	call   9f003046 <strcatI>
9f00051d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    strcatI(cmd,"H");
9f000520:	83 ec 08             	sub    esp,0x8
9f000523:	8d 83 89 f7 ff ff    	lea    eax,[ebx-0x877]
9f000529:	50                   	push   eax
9f00052a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00052d:	50                   	push   eax
9f00052e:	e8 13 2b 00 00       	call   9f003046 <strcatI>
9f000533:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000536:	83 ec 08             	sub    esp,0x8
9f000539:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00053c:	50                   	push   eax
9f00053d:	8d 83 8b f7 ff ff    	lea    eax,[ebx-0x875]
9f000543:	50                   	push   eax
9f000544:	e8 d0 0f 00 00       	call   9f001519 <printfI>
9f000549:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:27
}
9f00054c:	90                   	nop
9f00054d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000550:	c9                   	leave  
9f000551:	c3                   	ret    

9f000552 <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:30

VISIBLE void saveCursorPosition()
{
9f000552:	55                   	push   ebp
9f000553:	89 e5                	mov    ebp,esp
9f000555:	53                   	push   ebx
9f000556:	83 ec 14             	sub    esp,0x14
9f000559:	e8 42 43 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f00055e:	81 c3 3e 6c 00 00    	add    ebx,0x6c3e
/home/yogi/src/os/aproj/libChrisOS/src/console.c:33
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000564:	83 ec 08             	sub    esp,0x8
9f000567:	8d 83 84 f7 ff ff    	lea    eax,[ebx-0x87c]
9f00056d:	50                   	push   eax
9f00056e:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000571:	50                   	push   eax
9f000572:	e8 61 2c 00 00       	call   9f0031d8 <strcpyI>
9f000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:34
    strcatI(cmd,"s");
9f00057a:	83 ec 08             	sub    esp,0x8
9f00057d:	8d 83 8e f7 ff ff    	lea    eax,[ebx-0x872]
9f000583:	50                   	push   eax
9f000584:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000587:	50                   	push   eax
9f000588:	e8 b9 2a 00 00       	call   9f003046 <strcatI>
9f00058d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000590:	83 ec 08             	sub    esp,0x8
9f000593:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000596:	50                   	push   eax
9f000597:	8d 83 8b f7 ff ff    	lea    eax,[ebx-0x875]
9f00059d:	50                   	push   eax
9f00059e:	e8 76 0f 00 00       	call   9f001519 <printfI>
9f0005a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:37
}
9f0005a6:	90                   	nop
9f0005a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005aa:	c9                   	leave  
9f0005ab:	c3                   	ret    

9f0005ac <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:40

VISIBLE void restoreCursorPosition()
{
9f0005ac:	55                   	push   ebp
9f0005ad:	89 e5                	mov    ebp,esp
9f0005af:	53                   	push   ebx
9f0005b0:	83 ec 14             	sub    esp,0x14
9f0005b3:	e8 e8 42 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0005b8:	81 c3 e4 6b 00 00    	add    ebx,0x6be4
/home/yogi/src/os/aproj/libChrisOS/src/console.c:43
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005be:	83 ec 08             	sub    esp,0x8
9f0005c1:	8d 83 84 f7 ff ff    	lea    eax,[ebx-0x87c]
9f0005c7:	50                   	push   eax
9f0005c8:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005cb:	50                   	push   eax
9f0005cc:	e8 07 2c 00 00       	call   9f0031d8 <strcpyI>
9f0005d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:44
    strcatI(cmd,"u");
9f0005d4:	83 ec 08             	sub    esp,0x8
9f0005d7:	8d 83 90 f7 ff ff    	lea    eax,[ebx-0x870]
9f0005dd:	50                   	push   eax
9f0005de:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005e1:	50                   	push   eax
9f0005e2:	e8 5f 2a 00 00       	call   9f003046 <strcatI>
9f0005e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005ea:	83 ec 08             	sub    esp,0x8
9f0005ed:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005f0:	50                   	push   eax
9f0005f1:	8d 83 8b f7 ff ff    	lea    eax,[ebx-0x875]
9f0005f7:	50                   	push   eax
9f0005f8:	e8 1c 0f 00 00       	call   9f001519 <printfI>
9f0005fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:47
}
9f000600:	90                   	nop
9f000601:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000604:	c9                   	leave  
9f000605:	c3                   	ret    
9f000606:	66 90                	xchg   ax,ax

9f000608 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
9f000608:	55                   	push   ebp
9f000609:	89 e5                	mov    ebp,esp
9f00060b:	53                   	push   ebx
9f00060c:	83 ec 14             	sub    esp,0x14
9f00060f:	e8 8c 42 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f000614:	81 c3 88 6b 00 00    	add    ebx,0x6b88
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f00061a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000621:	eb 7b                	jmp    9f00069e <getenvI+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000623:	83 ec 0c             	sub    esp,0xc
9f000626:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000629:	e8 be 2c 00 00       	call   9f0032ec <strlenI>
9f00062e:	83 c4 10             	add    esp,0x10
9f000631:	89 c1                	mov    ecx,eax
9f000633:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000639:	8b 00                	mov    eax,DWORD PTR [eax]
9f00063b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00063e:	c1 e2 02             	shl    edx,0x2
9f000641:	01 d0                	add    eax,edx
9f000643:	8b 00                	mov    eax,DWORD PTR [eax]
9f000645:	83 ec 04             	sub    esp,0x4
9f000648:	51                   	push   ecx
9f000649:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00064c:	50                   	push   eax
9f00064d:	e8 a5 2d 00 00       	call   9f0033f7 <strncmpI>
9f000652:	83 c4 10             	add    esp,0x10
9f000655:	85 c0                	test   eax,eax
9f000657:	75 41                	jne    9f00069a <getenvI+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000659:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000664:	c1 e2 02             	shl    edx,0x2
9f000667:	01 d0                	add    eax,edx
9f000669:	8b 00                	mov    eax,DWORD PTR [eax]
9f00066b:	83 ec 08             	sub    esp,0x8
9f00066e:	8d 93 92 f7 ff ff    	lea    edx,[ebx-0x86e]
9f000674:	52                   	push   edx
9f000675:	50                   	push   eax
9f000676:	e8 47 34 00 00       	call   9f003ac2 <strstrI>
9f00067b:	83 c4 10             	add    esp,0x10
9f00067e:	83 c0 01             	add    eax,0x1
9f000681:	83 ec 04             	sub    esp,0x4
9f000684:	6a 32                	push   0x32
9f000686:	50                   	push   eax
9f000687:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00068a:	e8 d1 2d 00 00       	call   9f003460 <strncpyI>
9f00068f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f000692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000695:	83 c0 01             	add    eax,0x1
9f000698:	eb 13                	jmp    9f0006ad <getenvI+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f00069a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f00069e:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f0006a2:	0f 8e 7b ff ff ff    	jle    9f000623 <getenvI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f0006a8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0006ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006b0:	c9                   	leave  
9f0006b1:	c3                   	ret    

9f0006b2 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE int getenv(char *varname, char *value)
{
9f0006b2:	55                   	push   ebp
9f0006b3:	89 e5                	mov    ebp,esp
9f0006b5:	83 ec 08             	sub    esp,0x8
9f0006b8:	e8 a1 41 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0006bd:	05 df 6a 00 00       	add    eax,0x6adf
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    return getenvI(varname, value);
9f0006c2:	83 ec 08             	sub    esp,0x8
9f0006c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006cb:	e8 38 ff ff ff       	call   9f000608 <getenvI>
9f0006d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
}
9f0006d3:	c9                   	leave  
9f0006d4:	c3                   	ret    

9f0006d5 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26

VISIBLE void  setenv(char *varname, char *value)
{
9f0006d5:	55                   	push   ebp
9f0006d6:	89 e5                	mov    ebp,esp
9f0006d8:	53                   	push   ebx
9f0006d9:	83 ec 14             	sub    esp,0x14
9f0006dc:	e8 bf 41 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0006e1:	81 c3 bb 6a 00 00    	add    ebx,0x6abb
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
    uint32_t lastPopulated = 0;
9f0006e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29
    
    for (int cnt=0;cnt<100;cnt++)
9f0006ee:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f0006f5:	e9 d5 00 00 00       	jmp    9f0007cf <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
        if (processEnvp[cnt]!=0)
9f0006fa:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000700:	8b 00                	mov    eax,DWORD PTR [eax]
9f000702:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000705:	c1 e2 02             	shl    edx,0x2
9f000708:	01 d0                	add    eax,edx
9f00070a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00070c:	85 c0                	test   eax,eax
9f00070e:	0f 84 b7 00 00 00    	je     9f0007cb <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000714:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00071a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00071c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00071f:	c1 e2 02             	shl    edx,0x2
9f000722:	01 d0                	add    eax,edx
9f000724:	8b 00                	mov    eax,DWORD PTR [eax]
9f000726:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000729:	83 ec 0c             	sub    esp,0xc
9f00072c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00072f:	e8 b8 2b 00 00       	call   9f0032ec <strlenI>
9f000734:	83 c4 10             	add    esp,0x10
9f000737:	89 c1                	mov    ecx,eax
9f000739:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00073f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000741:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000744:	c1 e2 02             	shl    edx,0x2
9f000747:	01 d0                	add    eax,edx
9f000749:	8b 00                	mov    eax,DWORD PTR [eax]
9f00074b:	83 ec 04             	sub    esp,0x4
9f00074e:	51                   	push   ecx
9f00074f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000752:	50                   	push   eax
9f000753:	e8 9f 2c 00 00       	call   9f0033f7 <strncmpI>
9f000758:	83 c4 10             	add    esp,0x10
9f00075b:	85 c0                	test   eax,eax
9f00075d:	75 6c                	jne    9f0007cb <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:35
            {
                strcpyI(processEnvp[cnt],varname);
9f00075f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00076a:	c1 e2 02             	shl    edx,0x2
9f00076d:	01 d0                	add    eax,edx
9f00076f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000771:	83 ec 08             	sub    esp,0x8
9f000774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000777:	50                   	push   eax
9f000778:	e8 5b 2a 00 00       	call   9f0031d8 <strcpyI>
9f00077d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
9f000780:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000786:	8b 00                	mov    eax,DWORD PTR [eax]
9f000788:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00078b:	c1 e2 02             	shl    edx,0x2
9f00078e:	01 d0                	add    eax,edx
9f000790:	8b 00                	mov    eax,DWORD PTR [eax]
9f000792:	83 ec 08             	sub    esp,0x8
9f000795:	8d 93 92 f7 ff ff    	lea    edx,[ebx-0x86e]
9f00079b:	52                   	push   edx
9f00079c:	50                   	push   eax
9f00079d:	e8 a4 28 00 00       	call   9f003046 <strcatI>
9f0007a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
                strcatI(processEnvp[cnt],value);
9f0007a5:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ad:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007b0:	c1 e2 02             	shl    edx,0x2
9f0007b3:	01 d0                	add    eax,edx
9f0007b5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007b7:	83 ec 08             	sub    esp,0x8
9f0007ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007bd:	50                   	push   eax
9f0007be:	e8 83 28 00 00       	call   9f003046 <strcatI>
9f0007c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
                return;
9f0007c6:	e9 c6 00 00 00       	jmp    9f000891 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f0007cb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 1)
9f0007cf:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f0007d3:	0f 8e 21 ff ff ff    	jle    9f0006fa <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007d9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0007e0:	e9 a2 00 00 00       	jmp    9f000887 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
        if (processEnvp[cnt]==0)
9f0007e5:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007eb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0007f0:	c1 e2 02             	shl    edx,0x2
9f0007f3:	01 d0                	add    eax,edx
9f0007f5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007f7:	85 c0                	test   eax,eax
9f0007f9:	0f 85 84 00 00 00    	jne    9f000883 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f0007ff:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000805:	8b 00                	mov    eax,DWORD PTR [eax]
9f000807:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00080a:	c1 e2 02             	shl    edx,0x2
9f00080d:	01 d0                	add    eax,edx
9f00080f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000812:	81 c2 00 02 00 00    	add    edx,0x200
9f000818:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:45
            strcpyI(processEnvp[cnt],varname);
9f00081a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000820:	8b 00                	mov    eax,DWORD PTR [eax]
9f000822:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000825:	c1 e2 02             	shl    edx,0x2
9f000828:	01 d0                	add    eax,edx
9f00082a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00082c:	83 ec 08             	sub    esp,0x8
9f00082f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000832:	50                   	push   eax
9f000833:	e8 a0 29 00 00       	call   9f0031d8 <strcpyI>
9f000838:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
            strcatI(processEnvp[cnt],"=");
9f00083b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000841:	8b 00                	mov    eax,DWORD PTR [eax]
9f000843:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000846:	c1 e2 02             	shl    edx,0x2
9f000849:	01 d0                	add    eax,edx
9f00084b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00084d:	83 ec 08             	sub    esp,0x8
9f000850:	8d 93 92 f7 ff ff    	lea    edx,[ebx-0x86e]
9f000856:	52                   	push   edx
9f000857:	50                   	push   eax
9f000858:	e8 e9 27 00 00       	call   9f003046 <strcatI>
9f00085d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
9f000860:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000866:	8b 00                	mov    eax,DWORD PTR [eax]
9f000868:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00086b:	c1 e2 02             	shl    edx,0x2
9f00086e:	01 d0                	add    eax,edx
9f000870:	8b 00                	mov    eax,DWORD PTR [eax]
9f000872:	83 ec 08             	sub    esp,0x8
9f000875:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000878:	50                   	push   eax
9f000879:	e8 c8 27 00 00       	call   9f003046 <strcatI>
9f00087e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:48
            return;
9f000881:	eb 0e                	jmp    9f000891 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000883:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 1)
9f000887:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f00088b:	0f 8e 54 ff ff ff    	jle    9f0007e5 <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:52
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f000891:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000894:	c9                   	leave  
9f000895:	c3                   	ret    

9f000896 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55

char* getcwdI(char* buf, size_t size)
{
9f000896:	55                   	push   ebp
9f000897:	89 e5                	mov    ebp,esp
9f000899:	53                   	push   ebx
9f00089a:	83 ec 04             	sub    esp,0x4
9f00089d:	e8 bc 3f 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0008a2:	05 fa 68 00 00       	add    eax,0x68fa
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:56
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0008a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008aa:	83 ec 04             	sub    esp,0x4
9f0008ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008b0:	52                   	push   edx
9f0008b1:	6a 4f                	push   0x4f
9f0008b3:	89 c3                	mov    ebx,eax
9f0008b5:	e8 04 0a 00 00       	call   9f0012be <do_syscall2>
9f0008ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58
    
}
9f0008bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008c0:	c9                   	leave  
9f0008c1:	c3                   	ret    

9f0008c2 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61

VISIBLE char* getcwd(char* buf, size_t size)
{
9f0008c2:	55                   	push   ebp
9f0008c3:	89 e5                	mov    ebp,esp
9f0008c5:	83 ec 08             	sub    esp,0x8
9f0008c8:	e8 91 3f 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0008cd:	05 cf 68 00 00       	add    eax,0x68cf
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
    return getcwdI(buf,size);
9f0008d2:	83 ec 08             	sub    esp,0x8
9f0008d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008db:	e8 b6 ff ff ff       	call   9f000896 <getcwdI>
9f0008e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:63
}
9f0008e3:	c9                   	leave  
9f0008e4:	c3                   	ret    
9f0008e5:	66 90                	xchg   ax,ax
9f0008e7:	90                   	nop

9f0008e8 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f0008e8:	55                   	push   ebp
9f0008e9:	89 e5                	mov    ebp,esp
9f0008eb:	53                   	push   ebx
9f0008ec:	83 ec 04             	sub    esp,0x4
9f0008ef:	e8 6a 3f 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0008f4:	05 a8 68 00 00       	add    eax,0x68a8
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f0008f9:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0008fc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0008ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000902:	53                   	push   ebx
9f000903:	51                   	push   ecx
9f000904:	52                   	push   edx
9f000905:	68 04 03 00 00       	push   0x304
9f00090a:	89 c3                	mov    ebx,eax
9f00090c:	e8 71 09 00 00       	call   9f001282 <do_syscall3>
9f000911:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
9f000914:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000917:	c9                   	leave  
9f000918:	c3                   	ret    

9f000919 <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE void* open(char* path, const char* mode)
{
9f000919:	55                   	push   ebp
9f00091a:	89 e5                	mov    ebp,esp
9f00091c:	53                   	push   ebx
9f00091d:	83 ec 04             	sub    esp,0x4
9f000920:	e8 39 3f 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000925:	05 77 68 00 00       	add    eax,0x6877
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f00092a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00092d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000930:	6a ff                	push   0xffffffff
9f000932:	51                   	push   ecx
9f000933:	52                   	push   edx
9f000934:	6a 02                	push   0x2
9f000936:	89 c3                	mov    ebx,eax
9f000938:	e8 45 09 00 00       	call   9f001282 <do_syscall3>
9f00093d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:23
}
9f000940:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000943:	c9                   	leave  
9f000944:	c3                   	ret    

9f000945 <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26

void file_cleanup()
{
9f000945:	55                   	push   ebp
9f000946:	89 e5                	mov    ebp,esp
9f000948:	53                   	push   ebx
9f000949:	83 ec 04             	sub    esp,0x4
9f00094c:	e8 4f 3f 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f000951:	81 c3 4b 68 00 00    	add    ebx,0x684b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    while (filesToClose)
9f000957:	eb 1f                	jmp    9f000978 <file_cleanup+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:28
        close(filesToClose++);
9f000959:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00095f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000961:	8d 48 04             	lea    ecx,[eax+0x4]
9f000964:	8b 93 d8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x28]
9f00096a:	89 0a                	mov    DWORD PTR [edx],ecx
9f00096c:	83 ec 0c             	sub    esp,0xc
9f00096f:	50                   	push   eax
9f000970:	e8 1b 3f 00 00       	call   9f004890 <__x86.get_pc_thunk.ax+0x32>
9f000975:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
}

void file_cleanup()
{
    while (filesToClose)
9f000978:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00097e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000980:	85 c0                	test   eax,eax
9f000982:	75 d5                	jne    9f000959 <file_cleanup+0x14>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29
        close(filesToClose++);
    freeI(filesToClose);
9f000984:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00098a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00098c:	83 ec 0c             	sub    esp,0xc
9f00098f:	50                   	push   eax
9f000990:	e8 de 16 00 00       	call   9f002073 <freeI>
9f000995:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:30
}
9f000998:	90                   	nop
9f000999:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00099c:	c9                   	leave  
9f00099d:	c3                   	ret    

9f00099e <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f00099e:	55                   	push   ebp
9f00099f:	89 e5                	mov    ebp,esp
9f0009a1:	56                   	push   esi
9f0009a2:	53                   	push   ebx
9f0009a3:	83 ec 10             	sub    esp,0x10
9f0009a6:	e8 f5 3e 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0009ab:	81 c3 f1 67 00 00    	add    ebx,0x67f1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:34
    void *retVal=0;
9f0009b1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f0009b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0009bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0009be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0009c1:	51                   	push   ecx
9f0009c2:	52                   	push   edx
9f0009c3:	50                   	push   eax
9f0009c4:	6a 02                	push   0x2
9f0009c6:	e8 b7 08 00 00       	call   9f001282 <do_syscall3>
9f0009cb:	83 c4 10             	add    esp,0x10
9f0009ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    if (retVal==NULL)
9f0009d1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0009d5:	75 07                	jne    9f0009de <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
        return (void*)-1;
9f0009d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0009dc:	eb 4c                	jmp    9f000a2a <freopen+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:38
    if (filesToClose==NULL)
9f0009de:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009e4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009e6:	85 c0                	test   eax,eax
9f0009e8:	75 17                	jne    9f000a01 <freopen+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f0009ea:	83 ec 0c             	sub    esp,0xc
9f0009ed:	6a 64                	push   0x64
9f0009ef:	e8 b7 17 00 00       	call   9f0021ab <mallocI>
9f0009f4:	83 c4 10             	add    esp,0x10
9f0009f7:	89 c2                	mov    edx,eax
9f0009f9:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009ff:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000a01:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a07:	8b 30                	mov    esi,DWORD PTR [eax]
9f000a09:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f000a0f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a11:	8d 48 01             	lea    ecx,[eax+0x1]
9f000a14:	8b 93 d0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x30]
9f000a1a:	89 0a                	mov    DWORD PTR [edx],ecx
9f000a1c:	c1 e0 02             	shl    eax,0x2
9f000a1f:	8d 14 06             	lea    edx,[esi+eax*1]
9f000a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a25:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
    return retVal;
9f000a27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f000a2a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a2d:	5b                   	pop    ebx
9f000a2e:	5e                   	pop    esi
9f000a2f:	5d                   	pop    ebp
9f000a30:	c3                   	ret    

9f000a31 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void close(void* handle)
{
9f000a31:	55                   	push   ebp
9f000a32:	89 e5                	mov    ebp,esp
9f000a34:	53                   	push   ebx
9f000a35:	83 ec 04             	sub    esp,0x4
9f000a38:	e8 21 3e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000a3d:	05 5f 67 00 00       	add    eax,0x675f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000a42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a45:	83 ec 08             	sub    esp,0x8
9f000a48:	52                   	push   edx
9f000a49:	6a 03                	push   0x3
9f000a4b:	89 c3                	mov    ebx,eax
9f000a4d:	e8 aa 08 00 00       	call   9f0012fc <do_syscall1>
9f000a52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
}
9f000a55:	90                   	nop
9f000a56:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a59:	c9                   	leave  
9f000a5a:	c3                   	ret    

9f000a5b <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52

int readI(void* handle, void *buffer, int size, int length)
{
9f000a5b:	55                   	push   ebp
9f000a5c:	89 e5                	mov    ebp,esp
9f000a5e:	56                   	push   esi
9f000a5f:	53                   	push   ebx
9f000a60:	e8 f9 3d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000a65:	05 37 67 00 00       	add    eax,0x6737
/home/yogi/src/os/aproj/libChrisOS/src/file.c:53
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000a6a:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000a6d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000a70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000a73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a76:	83 ec 0c             	sub    esp,0xc
9f000a79:	56                   	push   esi
9f000a7a:	53                   	push   ebx
9f000a7b:	51                   	push   ecx
9f000a7c:	52                   	push   edx
9f000a7d:	6a 04                	push   0x4
9f000a7f:	89 c3                	mov    ebx,eax
9f000a81:	e8 c2 07 00 00       	call   9f001248 <do_syscall4>
9f000a86:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
}
9f000a89:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a8c:	5b                   	pop    ebx
9f000a8d:	5e                   	pop    esi
9f000a8e:	5d                   	pop    ebp
9f000a8f:	c3                   	ret    

9f000a90 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000a90:	55                   	push   ebp
9f000a91:	89 e5                	mov    ebp,esp
9f000a93:	83 ec 08             	sub    esp,0x8
9f000a96:	e8 c3 3d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000a9b:	05 01 67 00 00       	add    eax,0x6701
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
    return readI(handle, buffer, size, length);
9f000aa0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000aa3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000aa6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000aa9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000aac:	e8 aa ff ff ff       	call   9f000a5b <readI>
9f000ab1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:59
}
9f000ab4:	c9                   	leave  
9f000ab5:	c3                   	ret    

9f000ab6 <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62

int writeI(void* handle, void *buffer, int size, int length)
{
9f000ab6:	55                   	push   ebp
9f000ab7:	89 e5                	mov    ebp,esp
9f000ab9:	56                   	push   esi
9f000aba:	53                   	push   ebx
9f000abb:	e8 9e 3d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000ac0:	05 dc 66 00 00       	add    eax,0x66dc
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000ac5:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000ac8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000acb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000ace:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ad1:	83 ec 0c             	sub    esp,0xc
9f000ad4:	56                   	push   esi
9f000ad5:	53                   	push   ebx
9f000ad6:	51                   	push   ecx
9f000ad7:	52                   	push   edx
9f000ad8:	6a 05                	push   0x5
9f000ada:	89 c3                	mov    ebx,eax
9f000adc:	e8 67 07 00 00       	call   9f001248 <do_syscall4>
9f000ae1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:64
}
9f000ae4:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000ae7:	5b                   	pop    ebx
9f000ae8:	5e                   	pop    esi
9f000ae9:	5d                   	pop    ebp
9f000aea:	c3                   	ret    

9f000aeb <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000aeb:	55                   	push   ebp
9f000aec:	89 e5                	mov    ebp,esp
9f000aee:	83 ec 08             	sub    esp,0x8
9f000af1:	e8 68 3d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000af6:	05 a6 66 00 00       	add    eax,0x66a6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
    return writeI(handle, buffer, size, length);
9f000afb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000afe:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b07:	e8 aa ff ff ff       	call   9f000ab6 <writeI>
9f000b0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:69
}
9f000b0f:	c9                   	leave  
9f000b10:	c3                   	ret    

9f000b11 <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72

int seekI(void* handle, long position, int whence)
{
9f000b11:	55                   	push   ebp
9f000b12:	89 e5                	mov    ebp,esp
9f000b14:	53                   	push   ebx
9f000b15:	83 ec 04             	sub    esp,0x4
9f000b18:	e8 41 3d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000b1d:	05 7f 66 00 00       	add    eax,0x667f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000b22:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000b25:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b28:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b2b:	53                   	push   ebx
9f000b2c:	51                   	push   ecx
9f000b2d:	52                   	push   edx
9f000b2e:	6a 0b                	push   0xb
9f000b30:	89 c3                	mov    ebx,eax
9f000b32:	e8 4b 07 00 00       	call   9f001282 <do_syscall3>
9f000b37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:74
}
9f000b3a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b3d:	c9                   	leave  
9f000b3e:	c3                   	ret    

9f000b3f <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77

VISIBLE int seek(void* handle, long position, int whence)
{
9f000b3f:	55                   	push   ebp
9f000b40:	89 e5                	mov    ebp,esp
9f000b42:	83 ec 08             	sub    esp,0x8
9f000b45:	e8 14 3d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000b4a:	05 52 66 00 00       	add    eax,0x6652
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
    return seekI(handle, position, whence);
9f000b4f:	83 ec 04             	sub    esp,0x4
9f000b52:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b5b:	e8 b1 ff ff ff       	call   9f000b11 <seekI>
9f000b60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:79
}
9f000b63:	c9                   	leave  
9f000b64:	c3                   	ret    

9f000b65 <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
int statI(char *path, fstat_t *stat)
{
9f000b65:	55                   	push   ebp
9f000b66:	89 e5                	mov    ebp,esp
9f000b68:	53                   	push   ebx
9f000b69:	83 ec 04             	sub    esp,0x4
9f000b6c:	e8 ed 3c 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000b71:	05 2b 66 00 00       	add    eax,0x662b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000b76:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b79:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b7c:	83 ec 04             	sub    esp,0x4
9f000b7f:	51                   	push   ecx
9f000b80:	52                   	push   edx
9f000b81:	6a 0a                	push   0xa
9f000b83:	89 c3                	mov    ebx,eax
9f000b85:	e8 34 07 00 00       	call   9f0012be <do_syscall2>
9f000b8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:83
}
9f000b8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b90:	c9                   	leave  
9f000b91:	c3                   	ret    

9f000b92 <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000b92:	55                   	push   ebp
9f000b93:	89 e5                	mov    ebp,esp
9f000b95:	83 ec 08             	sub    esp,0x8
9f000b98:	e8 c1 3c 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000b9d:	05 ff 65 00 00       	add    eax,0x65ff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
    return statI(path, stat);
9f000ba2:	83 ec 08             	sub    esp,0x8
9f000ba5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ba8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000bab:	e8 b5 ff ff ff       	call   9f000b65 <statI>
9f000bb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:88
}
9f000bb3:	c9                   	leave  
9f000bb4:	c3                   	ret    

9f000bb5 <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91

VISIBLE int resolvePath(const char *inPath, char *outPath)
{
9f000bb5:	55                   	push   ebp
9f000bb6:	89 e5                	mov    ebp,esp
9f000bb8:	53                   	push   ebx
9f000bb9:	83 ec 24             	sub    esp,0x24
9f000bbc:	e8 df 3c 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f000bc1:	81 c3 db 65 00 00    	add    ebx,0x65db
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
    char delim[2]=":";
9f000bc7:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:94
    char *token;
    int retVal=-1;
9f000bcd:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000bd4:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000bda:	8b 00                	mov    eax,DWORD PTR [eax]
9f000bdc:	85 c0                	test   eax,eax
9f000bde:	75 1a                	jne    9f000bfa <resolvePath+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:98
        resolvePath_envPath=mallocI(1024);
9f000be0:	83 ec 0c             	sub    esp,0xc
9f000be3:	68 00 04 00 00       	push   0x400
9f000be8:	e8 be 15 00 00       	call   9f0021ab <mallocI>
9f000bed:	83 c4 10             	add    esp,0x10
9f000bf0:	89 c2                	mov    edx,eax
9f000bf2:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000bf8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
    if (!resolvePath_cwd)
9f000bfa:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c00:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c02:	85 c0                	test   eax,eax
9f000c04:	75 1a                	jne    9f000c20 <resolvePath+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
        resolvePath_cwd=mallocI(1024);
9f000c06:	83 ec 0c             	sub    esp,0xc
9f000c09:	68 00 04 00 00       	push   0x400
9f000c0e:	e8 98 15 00 00       	call   9f0021ab <mallocI>
9f000c13:	83 c4 10             	add    esp,0x10
9f000c16:	89 c2                	mov    edx,eax
9f000c18:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c1e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
    if (!resolvePath_inPath)
9f000c20:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c26:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c28:	85 c0                	test   eax,eax
9f000c2a:	75 1a                	jne    9f000c46 <resolvePath+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:102
            resolvePath_inPath=mallocI(1024);
9f000c2c:	83 ec 0c             	sub    esp,0xc
9f000c2f:	68 00 04 00 00       	push   0x400
9f000c34:	e8 72 15 00 00       	call   9f0021ab <mallocI>
9f000c39:	83 c4 10             	add    esp,0x10
9f000c3c:	89 c2                	mov    edx,eax
9f000c3e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c44:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:103
    if (!resolvePath_resPath)
9f000c46:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000c4c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c4e:	85 c0                	test   eax,eax
9f000c50:	75 1a                	jne    9f000c6c <resolvePath+0xb7>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104
        resolvePath_resPath=mallocI(1024);
9f000c52:	83 ec 0c             	sub    esp,0xc
9f000c55:	68 00 04 00 00       	push   0x400
9f000c5a:	e8 4c 15 00 00       	call   9f0021ab <mallocI>
9f000c5f:	83 c4 10             	add    esp,0x10
9f000c62:	89 c2                	mov    edx,eax
9f000c64:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000c6a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    getenvI("PATH",resolvePath_envPath);
9f000c6c:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000c72:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c74:	83 ec 08             	sub    esp,0x8
9f000c77:	50                   	push   eax
9f000c78:	8d 83 94 f7 ff ff    	lea    eax,[ebx-0x86c]
9f000c7e:	50                   	push   eax
9f000c7f:	e8 84 f9 ff ff       	call   9f000608 <getenvI>
9f000c84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:111

    getcwdI(resolvePath_cwd,1024);
9f000c87:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c8d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c8f:	83 ec 08             	sub    esp,0x8
9f000c92:	68 00 04 00 00       	push   0x400
9f000c97:	50                   	push   eax
9f000c98:	e8 f9 fb ff ff       	call   9f000896 <getcwdI>
9f000c9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:113
    
    if (strstrI(inPath, "/"))
9f000ca0:	83 ec 08             	sub    esp,0x8
9f000ca3:	8d 83 99 f7 ff ff    	lea    eax,[ebx-0x867]
9f000ca9:	50                   	push   eax
9f000caa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cad:	e8 10 2e 00 00       	call   9f003ac2 <strstrI>
9f000cb2:	83 c4 10             	add    esp,0x10
9f000cb5:	85 c0                	test   eax,eax
9f000cb7:	74 53                	je     9f000d0c <resolvePath+0x157>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    {
        if (*inPath!='/')
9f000cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000cbc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000cbf:	3c 2f                	cmp    al,0x2f
9f000cc1:	74 2c                	je     9f000cef <resolvePath+0x13a>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
        {
            strcpyI(outPath,resolvePath_cwd);
9f000cc3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000cc9:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ccb:	83 ec 08             	sub    esp,0x8
9f000cce:	50                   	push   eax
9f000ccf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000cd2:	e8 01 25 00 00       	call   9f0031d8 <strcpyI>
9f000cd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
            strcatI(outPath,"/");
9f000cda:	83 ec 08             	sub    esp,0x8
9f000cdd:	8d 83 99 f7 ff ff    	lea    eax,[ebx-0x867]
9f000ce3:	50                   	push   eax
9f000ce4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ce7:	e8 5a 23 00 00       	call   9f003046 <strcatI>
9f000cec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
        }
        strcatI(outPath,inPath);
9f000cef:	83 ec 08             	sub    esp,0x8
9f000cf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000cf8:	e8 49 23 00 00       	call   9f003046 <strcatI>
9f000cfd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
        retVal=0;
9f000d00:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000d07:	e9 96 01 00 00       	jmp    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:125
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000d0c:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000d12:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d14:	83 ec 08             	sub    esp,0x8
9f000d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d1a:	50                   	push   eax
9f000d1b:	e8 b8 24 00 00       	call   9f0031d8 <strcpyI>
9f000d20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:126
        token=strtokI(resolvePath_envPath,delim);
9f000d23:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000d29:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d2b:	83 ec 08             	sub    esp,0x8
9f000d2e:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000d31:	52                   	push   edx
9f000d32:	50                   	push   eax
9f000d33:	e8 e4 f3 ff ff       	call   9f00011c <strtokI>
9f000d38:	83 c4 10             	add    esp,0x10
9f000d3b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127
        while (token!=NULL)
9f000d3e:	e9 bd 00 00 00       	jmp    9f000e00 <resolvePath+0x24b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:129
        {
            strcpyI(resolvePath_resPath,token);
9f000d43:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d49:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d4b:	83 ec 08             	sub    esp,0x8
9f000d4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000d51:	50                   	push   eax
9f000d52:	e8 81 24 00 00       	call   9f0031d8 <strcpyI>
9f000d57:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000d5a:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d60:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d62:	83 ec 08             	sub    esp,0x8
9f000d65:	8d 93 99 f7 ff ff    	lea    edx,[ebx-0x867]
9f000d6b:	52                   	push   edx
9f000d6c:	50                   	push   eax
9f000d6d:	e8 aa 23 00 00       	call   9f00311c <strcmpI>
9f000d72:	83 c4 10             	add    esp,0x10
9f000d75:	85 c0                	test   eax,eax
9f000d77:	74 1b                	je     9f000d94 <resolvePath+0x1df>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:131
                strcatI(resolvePath_resPath,"/");
9f000d79:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d7f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d81:	83 ec 08             	sub    esp,0x8
9f000d84:	8d 93 99 f7 ff ff    	lea    edx,[ebx-0x867]
9f000d8a:	52                   	push   edx
9f000d8b:	50                   	push   eax
9f000d8c:	e8 b5 22 00 00       	call   9f003046 <strcatI>
9f000d91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132
            strcatI(resolvePath_resPath,inPath);
9f000d94:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d9a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d9c:	83 ec 08             	sub    esp,0x8
9f000d9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000da2:	50                   	push   eax
9f000da3:	e8 9e 22 00 00       	call   9f003046 <strcatI>
9f000da8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:133
            int res=statI(resolvePath_resPath,&fstat);
9f000dab:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000db1:	8b 00                	mov    eax,DWORD PTR [eax]
9f000db3:	83 ec 08             	sub    esp,0x8
9f000db6:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000db9:	52                   	push   edx
9f000dba:	50                   	push   eax
9f000dbb:	e8 a5 fd ff ff       	call   9f000b65 <statI>
9f000dc0:	83 c4 10             	add    esp,0x10
9f000dc3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
            if (res==0)
9f000dc6:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000dca:	75 20                	jne    9f000dec <resolvePath+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
            {
                strcpyI(outPath,resolvePath_resPath);
9f000dcc:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000dd2:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dd4:	83 ec 08             	sub    esp,0x8
9f000dd7:	50                   	push   eax
9f000dd8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ddb:	e8 f8 23 00 00       	call   9f0031d8 <strcpyI>
9f000de0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:137
                retVal=0;
9f000de3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
                break;
9f000dea:	eb 1e                	jmp    9f000e0a <resolvePath+0x255>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:140
            }
            token=strtokI(NULL,delim);
9f000dec:	83 ec 08             	sub    esp,0x8
9f000def:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f000df2:	50                   	push   eax
9f000df3:	6a 00                	push   0x0
9f000df5:	e8 22 f3 ff ff       	call   9f00011c <strtokI>
9f000dfa:	83 c4 10             	add    esp,0x10
9f000dfd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
        token=strtokI(resolvePath_envPath,delim);
        while (token!=NULL)
9f000e00:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000e04:	0f 85 39 ff ff ff    	jne    9f000d43 <resolvePath+0x18e>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:143
                break;
            }
            token=strtokI(NULL,delim);
        }

        if (retVal==-1)
9f000e0a:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f000e0e:	0f 85 8e 00 00 00    	jne    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:145
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f000e14:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000e1a:	8b 10                	mov    edx,DWORD PTR [eax]
9f000e1c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e22:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e24:	83 ec 08             	sub    esp,0x8
9f000e27:	52                   	push   edx
9f000e28:	50                   	push   eax
9f000e29:	e8 aa 23 00 00       	call   9f0031d8 <strcpyI>
9f000e2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
            strcatI(resolvePath_resPath,"/");
9f000e31:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e37:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e39:	83 ec 08             	sub    esp,0x8
9f000e3c:	8d 93 99 f7 ff ff    	lea    edx,[ebx-0x867]
9f000e42:	52                   	push   edx
9f000e43:	50                   	push   eax
9f000e44:	e8 fd 21 00 00       	call   9f003046 <strcatI>
9f000e49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
            strcatI(resolvePath_resPath,inPath);
9f000e4c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e52:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e54:	83 ec 08             	sub    esp,0x8
9f000e57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e5a:	50                   	push   eax
9f000e5b:	e8 e6 21 00 00       	call   9f003046 <strcatI>
9f000e60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            int res=statI(resolvePath_resPath,&fstat);
9f000e63:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e69:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e6b:	83 ec 08             	sub    esp,0x8
9f000e6e:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000e71:	52                   	push   edx
9f000e72:	50                   	push   eax
9f000e73:	e8 ed fc ff ff       	call   9f000b65 <statI>
9f000e78:	83 c4 10             	add    esp,0x10
9f000e7b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:149
            if (res==0)
9f000e7e:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f000e82:	75 1e                	jne    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
            {
                strcpyI(outPath,resolvePath_resPath);
9f000e84:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e8a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e8c:	83 ec 08             	sub    esp,0x8
9f000e8f:	50                   	push   eax
9f000e90:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000e93:	e8 40 23 00 00       	call   9f0031d8 <strcpyI>
9f000e98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:152
                retVal=0;
9f000e9b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            }
        }
    }
    
    return retVal;
9f000ea2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
}
9f000ea5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ea8:	c9                   	leave  
9f000ea9:	c3                   	ret    

9f000eaa <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161

long tellI(void *stream)
{
9f000eaa:	55                   	push   ebp
9f000eab:	89 e5                	mov    ebp,esp
9f000ead:	53                   	push   ebx
9f000eae:	83 ec 04             	sub    esp,0x4
9f000eb1:	e8 a8 39 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000eb6:	05 e6 62 00 00       	add    eax,0x62e6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f000ebb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ebe:	83 ec 08             	sub    esp,0x8
9f000ec1:	52                   	push   edx
9f000ec2:	6a 0c                	push   0xc
9f000ec4:	89 c3                	mov    ebx,eax
9f000ec6:	e8 31 04 00 00       	call   9f0012fc <do_syscall1>
9f000ecb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:163
}
9f000ece:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ed1:	c9                   	leave  
9f000ed2:	c3                   	ret    

9f000ed3 <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:166

VISIBLE long tell(void *stream)
{
9f000ed3:	55                   	push   ebp
9f000ed4:	89 e5                	mov    ebp,esp
9f000ed6:	83 ec 08             	sub    esp,0x8
9f000ed9:	e8 80 39 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f000ede:	05 be 62 00 00       	add    eax,0x62be
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
    return tellI(stream);
9f000ee3:	83 ec 0c             	sub    esp,0xc
9f000ee6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ee9:	e8 bc ff ff ff       	call   9f000eaa <tellI>
9f000eee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:168
}
9f000ef1:	c9                   	leave  
9f000ef2:	c3                   	ret    

9f000ef3 <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f000ef3:	55                   	push   ebp
9f000ef4:	89 e5                	mov    ebp,esp
9f000ef6:	53                   	push   ebx
9f000ef7:	83 ec 24             	sub    esp,0x24
9f000efa:	e8 a1 39 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f000eff:	81 c3 9d 62 00 00    	add    ebx,0x629d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
    char *buffer;
    int bytesReturned=0;
9f000f05:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:174
    size_t bytesParsed=0;
9f000f0c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
    char *crPtr=NULL;
9f000f13:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
    char *lineToOutput=*lineptr;
9f000f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f1d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f1f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:177
    size_t lLinePtrLen=*n;
9f000f22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000f25:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f27:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:178
    int startFilePos=tellI(stream);
9f000f2a:	83 ec 0c             	sub    esp,0xc
9f000f2d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000f30:	e8 75 ff ff ff       	call   9f000eaa <tellI>
9f000f35:	83 c4 10             	add    esp,0x10
9f000f38:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:179
    int retVal=-1;
9f000f3b:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f000f42:	83 ec 0c             	sub    esp,0xc
9f000f45:	68 00 04 00 00       	push   0x400
9f000f4a:	e8 5c 12 00 00       	call   9f0021ab <mallocI>
9f000f4f:	83 c4 10             	add    esp,0x10
9f000f52:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:183
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f000f55:	e9 22 01 00 00       	jmp    9f00107c <getlineI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185
    {
        if (crPtr==strstrI(buffer,"\n"))
9f000f5a:	83 ec 08             	sub    esp,0x8
9f000f5d:	8d 83 9b f7 ff ff    	lea    eax,[ebx-0x865]
9f000f63:	50                   	push   eax
9f000f64:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000f67:	e8 56 2b 00 00       	call   9f003ac2 <strstrI>
9f000f6c:	83 c4 10             	add    esp,0x10
9f000f6f:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f000f72:	0f 85 cf 00 00 00    	jne    9f001047 <getlineI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f000f78:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000f7b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000f7e:	29 c2                	sub    edx,eax
9f000f80:	89 d0                	mov    eax,edx
9f000f82:	89 c2                	mov    edx,eax
9f000f84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000f87:	01 c2                	add    edx,eax
9f000f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000f8c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f8e:	39 c2                	cmp    edx,eax
9f000f90:	73 1f                	jae    9f000fb1 <getlineI+0xbe>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:188
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f000f92:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000f95:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000f98:	29 c2                	sub    edx,eax
9f000f9a:	89 d0                	mov    eax,edx
9f000f9c:	89 c2                	mov    edx,eax
9f000f9e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000fa1:	83 ec 04             	sub    esp,0x4
9f000fa4:	52                   	push   edx
9f000fa5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000fa8:	50                   	push   eax
9f000fa9:	e8 d6 20 00 00       	call   9f003084 <strncatI>
9f000fae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:189
            if (bytesParsed+(crPtr-buffer)>*n)
9f000fb1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fb4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000fb7:	29 c2                	sub    edx,eax
9f000fb9:	89 d0                	mov    eax,edx
9f000fbb:	89 c2                	mov    edx,eax
9f000fbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000fc0:	01 c2                	add    edx,eax
9f000fc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000fc5:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fc7:	39 c2                	cmp    edx,eax
9f000fc9:	76 21                	jbe    9f000fec <getlineI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f000fcb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fce:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000fd1:	29 c2                	sub    edx,eax
9f000fd3:	89 d0                	mov    eax,edx
9f000fd5:	89 c2                	mov    edx,eax
9f000fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000fda:	01 c2                	add    edx,eax
9f000fdc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000fdf:	83 ec 08             	sub    esp,0x8
9f000fe2:	52                   	push   edx
9f000fe3:	50                   	push   eax
9f000fe4:	e8 14 14 00 00       	call   9f0023fd <reallocI>
9f000fe9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f000fec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000ff2:	29 c2                	sub    edx,eax
9f000ff4:	89 d0                	mov    eax,edx
9f000ff6:	89 c2                	mov    edx,eax
9f000ff8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000ffb:	83 ec 04             	sub    esp,0x4
9f000ffe:	52                   	push   edx
9f000fff:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001002:	50                   	push   eax
9f001003:	e8 7c 20 00 00       	call   9f003084 <strncatI>
9f001008:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
            bytesParsed+=(crPtr-buffer);
9f00100b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00100e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001011:	29 c2                	sub    edx,eax
9f001013:	89 d0                	mov    eax,edx
9f001015:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:193
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f001018:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f00101b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00101e:	01 d0                	add    eax,edx
9f001020:	83 ec 04             	sub    esp,0x4
9f001023:	6a 00                	push   0x0
9f001025:	50                   	push   eax
9f001026:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001029:	e8 e3 fa ff ff       	call   9f000b11 <seekI>
9f00102e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:194
            *n=lLinePtrLen;
9f001031:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001034:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001037:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195
            lineptr=&lineToOutput;
9f001039:	8d 45 d8             	lea    eax,[ebp-0x28]
9f00103c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:196
            retVal=bytesParsed;
9f00103f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001042:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
            goto getlineReturn;
9f001045:	eb 57                	jmp    9f00109e <getlineI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001047:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00104a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
            bytesParsed+=bytesReturned;
9f00104d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001050:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
            reallocI(lineToOutput,lLinePtrLen);
9f001053:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001056:	83 ec 08             	sub    esp,0x8
9f001059:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00105c:	50                   	push   eax
9f00105d:	e8 9b 13 00 00       	call   9f0023fd <reallocI>
9f001062:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:204
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f001065:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001068:	83 ec 04             	sub    esp,0x4
9f00106b:	68 00 04 00 00       	push   0x400
9f001070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001073:	50                   	push   eax
9f001074:	e8 0b 20 00 00       	call   9f003084 <strncatI>
9f001079:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:183
    int startFilePos=tellI(stream);
    int retVal=-1;
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f00107c:	6a 01                	push   0x1
9f00107e:	68 00 04 00 00       	push   0x400
9f001083:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001086:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001089:	e8 cd f9 ff ff       	call   9f000a5b <readI>
9f00108e:	83 c4 10             	add    esp,0x10
9f001091:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f001094:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f001098:	0f 8f bc fe ff ff    	jg     9f000f5a <getlineI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
        }
    }

getlineReturn:    
    freeI(buffer);
9f00109e:	83 ec 0c             	sub    esp,0xc
9f0010a1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010a4:	e8 ca 0f 00 00       	call   9f002073 <freeI>
9f0010a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:210
    return retVal;
9f0010ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
}
9f0010af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0010b2:	c9                   	leave  
9f0010b3:	c3                   	ret    

9f0010b4 <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f0010b4:	55                   	push   ebp
9f0010b5:	89 e5                	mov    ebp,esp
9f0010b7:	83 ec 08             	sub    esp,0x8
9f0010ba:	e8 9f 37 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0010bf:	05 dd 60 00 00       	add    eax,0x60dd
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
    return getlineI(lineptr, n, stream);
9f0010c4:	83 ec 04             	sub    esp,0x4
9f0010c7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0010ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0010cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0010d0:	e8 1e fe ff ff       	call   9f000ef3 <getlineI>
9f0010d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
9f0010d8:	c9                   	leave  
9f0010d9:	c3                   	ret    
9f0010da:	66 90                	xchg   ax,ax

9f0010dc <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f0010dc:	55                   	push   ebp
9f0010dd:	89 e5                	mov    ebp,esp
9f0010df:	53                   	push   ebx
9f0010e0:	e8 79 37 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0010e5:	05 b7 60 00 00       	add    eax,0x60b7
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f0010ea:	b8 05 00 00 00       	mov    eax,0x5
9f0010ef:	bb 01 00 00 00       	mov    ebx,0x1
9f0010f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0010f7:	89 d1                	mov    ecx,edx
9f0010f9:	e8 fc ff ff ff       	call   9f0010fa <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f0010fe:	90                   	nop
9f0010ff:	5b                   	pop    ebx
9f001100:	5d                   	pop    ebp
9f001101:	c3                   	ret    

9f001102 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f001102:	55                   	push   ebp
9f001103:	89 e5                	mov    ebp,esp
9f001105:	53                   	push   ebx
9f001106:	83 ec 14             	sub    esp,0x14
9f001109:	e8 50 37 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00110e:	05 8e 60 00 00       	add    eax,0x608e
9f001113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001116:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f001119:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f00111f:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f001123:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f001126:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f00112a:	b8 05 00 00 00       	mov    eax,0x5
9f00112f:	bb 01 00 00 00       	mov    ebx,0x1
9f001134:	8d 55 fa             	lea    edx,[ebp-0x6]
9f001137:	89 d1                	mov    ecx,edx
9f001139:	e8 fc ff ff ff       	call   9f00113a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f00113e:	90                   	nop
9f00113f:	83 c4 14             	add    esp,0x14
9f001142:	5b                   	pop    ebx
9f001143:	5d                   	pop    ebp
9f001144:	c3                   	ret    

9f001145 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f001145:	55                   	push   ebp
9f001146:	89 e5                	mov    ebp,esp
9f001148:	53                   	push   ebx
9f001149:	83 ec 10             	sub    esp,0x10
9f00114c:	e8 0d 37 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001151:	05 4b 60 00 00       	add    eax,0x604b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f001156:	b8 04 00 00 00       	mov    eax,0x4
9f00115b:	ba 00 00 00 00       	mov    edx,0x0
9f001160:	89 d3                	mov    ebx,edx
9f001162:	e8 fc ff ff ff       	call   9f001163 <getchar+0x1e>
9f001167:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f00116a:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f00116e:	74 06                	je     9f001176 <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f001170:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f001174:	eb 0c                	jmp    9f001182 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001176:	b8 02 03 00 00       	mov    eax,0x302
9f00117b:	e8 fc ff ff ff       	call   9f00117c <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f001180:	eb d4                	jmp    9f001156 <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f001182:	83 c4 10             	add    esp,0x10
9f001185:	5b                   	pop    ebx
9f001186:	5d                   	pop    ebp
9f001187:	c3                   	ret    

9f001188 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f001188:	55                   	push   ebp
9f001189:	89 e5                	mov    ebp,esp
9f00118b:	53                   	push   ebx
9f00118c:	83 ec 14             	sub    esp,0x14
9f00118f:	e8 ca 36 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001194:	05 08 60 00 00       	add    eax,0x6008
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f001199:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f0011a0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f0011a4:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f0011a8:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f0011ab:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0011af:	74 19                	je     9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f0011b1:	83 ec 08             	sub    esp,0x8
9f0011b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0011b7:	8d 90 9d f7 ff ff    	lea    edx,[eax-0x863]
9f0011bd:	52                   	push   edx
9f0011be:	89 c3                	mov    ebx,eax
9f0011c0:	e8 a8 03 00 00       	call   9f00156d <printI>
9f0011c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f0011c8:	eb fe                	jmp    9f0011c8 <gets+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f0011ca:	b8 04 00 00 00       	mov    eax,0x4
9f0011cf:	ba 00 00 00 00       	mov    edx,0x0
9f0011d4:	89 d3                	mov    ebx,edx
9f0011d6:	e8 fc ff ff ff       	call   9f0011d7 <gets+0x4f>
9f0011db:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f0011de:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f0011e2:	75 17                	jne    9f0011fb <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f0011e4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0011e8:	7e 11                	jle    9f0011fb <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f0011ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0011ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011f0:	01 d0                	add    eax,edx
9f0011f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f0011f5:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f0011f9:	eb 43                	jmp    9f00123e <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f0011fb:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f0011ff:	74 33                	je     9f001234 <gets+0xac>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f001201:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001205:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f001208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00120b:	8d 50 01             	lea    edx,[eax+0x1]
9f00120e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001211:	89 c2                	mov    edx,eax
9f001213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001216:	01 c2                	add    edx,eax
9f001218:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f00121c:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f00121e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001221:	83 c0 01             	add    eax,0x1
9f001224:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f001227:	7d 06                	jge    9f00122f <gets+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f001229:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f00122d:	75 9b                	jne    9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f00122f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001232:	eb 0c                	jmp    9f001240 <gets+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001234:	b8 02 03 00 00       	mov    eax,0x302
9f001239:	e8 fc ff ff ff       	call   9f00123a <gets+0xb2>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f00123e:	eb 8a                	jmp    9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
}
9f001240:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001243:	c9                   	leave  
9f001244:	c3                   	ret    
9f001245:	66 90                	xchg   ax,ax
9f001247:	90                   	nop

9f001248 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f001248:	55                   	push   ebp
9f001249:	89 e5                	mov    ebp,esp
9f00124b:	56                   	push   esi
9f00124c:	53                   	push   ebx
9f00124d:	83 ec 10             	sub    esp,0x10
9f001250:	e8 09 36 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001255:	05 47 5f 00 00       	add    eax,0x5f47
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f00125a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f001261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001264:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001267:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00126a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00126d:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f001270:	e8 fc ff ff ff       	call   9f001271 <do_syscall4+0x29>
9f001275:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f001278:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f00127b:	83 c4 10             	add    esp,0x10
9f00127e:	5b                   	pop    ebx
9f00127f:	5e                   	pop    esi
9f001280:	5d                   	pop    ebp
9f001281:	c3                   	ret    

9f001282 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f001282:	55                   	push   ebp
9f001283:	89 e5                	mov    ebp,esp
9f001285:	56                   	push   esi
9f001286:	53                   	push   ebx
9f001287:	83 ec 10             	sub    esp,0x10
9f00128a:	e8 cf 35 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00128f:	05 0d 5f 00 00       	add    eax,0x5f0d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f001294:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f00129b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00129e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0012a1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0012a4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0012a7:	be 00 00 00 00       	mov    esi,0x0
9f0012ac:	e8 fc ff ff ff       	call   9f0012ad <do_syscall3+0x2b>
9f0012b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f0012b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f0012b7:	83 c4 10             	add    esp,0x10
9f0012ba:	5b                   	pop    ebx
9f0012bb:	5e                   	pop    esi
9f0012bc:	5d                   	pop    ebp
9f0012bd:	c3                   	ret    

9f0012be <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f0012be:	55                   	push   ebp
9f0012bf:	89 e5                	mov    ebp,esp
9f0012c1:	56                   	push   esi
9f0012c2:	53                   	push   ebx
9f0012c3:	83 ec 10             	sub    esp,0x10
9f0012c6:	e8 93 35 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0012cb:	05 d1 5e 00 00       	add    eax,0x5ed1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f0012d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f0012d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0012dd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0012e0:	ba 00 00 00 00       	mov    edx,0x0
9f0012e5:	be 00 00 00 00       	mov    esi,0x0
9f0012ea:	e8 fc ff ff ff       	call   9f0012eb <do_syscall2+0x2d>
9f0012ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f0012f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f0012f5:	83 c4 10             	add    esp,0x10
9f0012f8:	5b                   	pop    ebx
9f0012f9:	5e                   	pop    esi
9f0012fa:	5d                   	pop    ebp
9f0012fb:	c3                   	ret    

9f0012fc <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f0012fc:	55                   	push   ebp
9f0012fd:	89 e5                	mov    ebp,esp
9f0012ff:	56                   	push   esi
9f001300:	53                   	push   ebx
9f001301:	83 ec 10             	sub    esp,0x10
9f001304:	e8 55 35 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001309:	05 93 5e 00 00       	add    eax,0x5e93
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f00130e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f001315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001318:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00131b:	b9 00 00 00 00       	mov    ecx,0x0
9f001320:	ba 00 00 00 00       	mov    edx,0x0
9f001325:	be 00 00 00 00       	mov    esi,0x0
9f00132a:	e8 fc ff ff ff       	call   9f00132b <do_syscall1+0x2f>
9f00132f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f001332:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001335:	83 c4 10             	add    esp,0x10
9f001338:	5b                   	pop    ebx
9f001339:	5e                   	pop    esi
9f00133a:	5d                   	pop    ebp
9f00133b:	c3                   	ret    

9f00133c <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f00133c:	55                   	push   ebp
9f00133d:	89 e5                	mov    ebp,esp
9f00133f:	56                   	push   esi
9f001340:	53                   	push   ebx
9f001341:	83 ec 10             	sub    esp,0x10
9f001344:	e8 15 35 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001349:	05 53 5e 00 00       	add    eax,0x5e53
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f00134e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f001355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001358:	bb 00 00 00 00       	mov    ebx,0x0
9f00135d:	b9 00 00 00 00       	mov    ecx,0x0
9f001362:	ba 00 00 00 00       	mov    edx,0x0
9f001367:	be 00 00 00 00       	mov    esi,0x0
9f00136c:	e8 fc ff ff ff       	call   9f00136d <do_syscall0+0x31>
9f001371:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f001374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f001377:	83 c4 10             	add    esp,0x10
9f00137a:	5b                   	pop    ebx
9f00137b:	5e                   	pop    esi
9f00137c:	5d                   	pop    ebp
9f00137d:	c3                   	ret    

9f00137e <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f00137e:	55                   	push   ebp
9f00137f:	89 e5                	mov    ebp,esp
9f001381:	53                   	push   ebx
9f001382:	83 ec 04             	sub    esp,0x4
9f001385:	e8 16 35 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f00138a:	81 c3 12 5e 00 00    	add    ebx,0x5e12
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f001390:	83 ec 08             	sub    esp,0x8
9f001393:	8d 83 b8 f7 ff ff    	lea    eax,[ebx-0x848]
9f001399:	50                   	push   eax
9f00139a:	68 00 00 00 02       	push   0x2000000
9f00139f:	e8 34 02 00 00       	call   9f0015d8 <printdI>
9f0013a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f0013a7:	0f b6 83 58 00 00 00 	movzx  eax,BYTE PTR [ebx+0x58]
9f0013ae:	83 f0 01             	xor    eax,0x1
9f0013b1:	84 c0                	test   al,al
9f0013b3:	74 7c                	je     9f001431 <libc_init+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f0013b5:	e8 c6 0b 00 00       	call   9f001f80 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f0013ba:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f0013c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f0013c6:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f0013c9:	89 c2                	mov    edx,eax
9f0013cb:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0013d1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f0013d3:	83 ec 0c             	sub    esp,0xc
9f0013d6:	6a 00                	push   0x0
9f0013d8:	e8 5f ff ff ff       	call   9f00133c <do_syscall0>
9f0013dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f0013e0:	8d 83 ad a2 ff ff    	lea    eax,[ebx-0x5d53]
9f0013e6:	83 ec 08             	sub    esp,0x8
9f0013e9:	50                   	push   eax
9f0013ea:	68 63 01 00 00       	push   0x163
9f0013ef:	e8 08 ff ff ff       	call   9f0012fc <do_syscall1>
9f0013f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f0013f7:	c6 83 58 00 00 00 01 	mov    BYTE PTR [ebx+0x58],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f0013fe:	83 ec 0c             	sub    esp,0xc
9f001401:	68 00 10 00 00       	push   0x1000
9f001406:	e8 a0 0d 00 00       	call   9f0021ab <mallocI>
9f00140b:	83 c4 10             	add    esp,0x10
9f00140e:	89 c2                	mov    edx,eax
9f001410:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f001416:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f001418:	83 ec 08             	sub    esp,0x8
9f00141b:	8d 83 d0 f7 ff ff    	lea    eax,[ebx-0x830]
9f001421:	50                   	push   eax
9f001422:	68 00 00 00 02       	push   0x2000000
9f001427:	e8 ac 01 00 00       	call   9f0015d8 <printdI>
9f00142c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f00142f:	eb 12                	jmp    9f001443 <libc_init+0xc5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f001431:	83 ec 0c             	sub    esp,0xc
9f001434:	8d 83 e8 f7 ff ff    	lea    eax,[ebx-0x818]
9f00143a:	50                   	push   eax
9f00143b:	e8 2d 01 00 00       	call   9f00156d <printI>
9f001440:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f001443:	90                   	nop
9f001444:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001447:	c9                   	leave  
9f001448:	c3                   	ret    

9f001449 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f001449:	55                   	push   ebp
9f00144a:	89 e5                	mov    ebp,esp
9f00144c:	53                   	push   ebx
9f00144d:	83 ec 04             	sub    esp,0x4
9f001450:	e8 4b 34 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f001455:	81 c3 47 5d 00 00    	add    ebx,0x5d47
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f00145b:	e8 de 10 00 00       	call   9f00253e <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f001460:	e8 e0 f4 ff ff       	call   9f000945 <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f001465:	90                   	nop
9f001466:	83 c4 04             	add    esp,0x4
9f001469:	5b                   	pop    ebx
9f00146a:	5d                   	pop    ebp
9f00146b:	c3                   	ret    

9f00146c <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f00146c:	55                   	push   ebp
9f00146d:	89 e5                	mov    ebp,esp
9f00146f:	53                   	push   ebx
9f001470:	83 ec 14             	sub    esp,0x14
9f001473:	e8 28 34 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f001478:	81 c3 24 5d 00 00    	add    ebx,0x5d24
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f00147e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001481:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f001484:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001487:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00148d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00148f:	83 ec 04             	sub    esp,0x4
9f001492:	52                   	push   edx
9f001493:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001496:	50                   	push   eax
9f001497:	e8 6d 16 00 00       	call   9f002b09 <vsprintf>
9f00149c:	83 c4 10             	add    esp,0x10
9f00149f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0014a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014a5:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f0014ab:	8b 12                	mov    edx,DWORD PTR [edx]
9f0014ad:	50                   	push   eax
9f0014ae:	52                   	push   edx
9f0014af:	6a 01                	push   0x1
9f0014b1:	6a 05                	push   0x5
9f0014b3:	e8 ca fd ff ff       	call   9f001282 <do_syscall3>
9f0014b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f0014bb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f0014c0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0014c3:	c9                   	leave  
9f0014c4:	c3                   	ret    

9f0014c5 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f0014c5:	55                   	push   ebp
9f0014c6:	89 e5                	mov    ebp,esp
9f0014c8:	53                   	push   ebx
9f0014c9:	83 ec 14             	sub    esp,0x14
9f0014cc:	e8 cf 33 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0014d1:	81 c3 cb 5c 00 00    	add    ebx,0x5ccb
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f0014d7:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0014da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f0014dd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0014e0:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0014e6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0014e8:	83 ec 04             	sub    esp,0x4
9f0014eb:	52                   	push   edx
9f0014ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0014ef:	50                   	push   eax
9f0014f0:	e8 14 16 00 00       	call   9f002b09 <vsprintf>
9f0014f5:	83 c4 10             	add    esp,0x10
9f0014f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0014fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014fe:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001504:	8b 12                	mov    edx,DWORD PTR [edx]
9f001506:	50                   	push   eax
9f001507:	52                   	push   edx
9f001508:	6a 01                	push   0x1
9f00150a:	6a 05                	push   0x5
9f00150c:	e8 71 fd ff ff       	call   9f001282 <do_syscall3>
9f001511:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f001514:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001517:	c9                   	leave  
9f001518:	c3                   	ret    

9f001519 <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f001519:	55                   	push   ebp
9f00151a:	89 e5                	mov    ebp,esp
9f00151c:	53                   	push   ebx
9f00151d:	83 ec 14             	sub    esp,0x14
9f001520:	e8 7b 33 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f001525:	81 c3 77 5c 00 00    	add    ebx,0x5c77
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00152b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00152e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f001531:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001534:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00153a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00153c:	83 ec 04             	sub    esp,0x4
9f00153f:	52                   	push   edx
9f001540:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001543:	50                   	push   eax
9f001544:	e8 c0 15 00 00       	call   9f002b09 <vsprintf>
9f001549:	83 c4 10             	add    esp,0x10
9f00154c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f00154f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001552:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001558:	8b 12                	mov    edx,DWORD PTR [edx]
9f00155a:	50                   	push   eax
9f00155b:	52                   	push   edx
9f00155c:	6a 01                	push   0x1
9f00155e:	6a 05                	push   0x5
9f001560:	e8 1d fd ff ff       	call   9f001282 <do_syscall3>
9f001565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f001568:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00156b:	c9                   	leave  
9f00156c:	c3                   	ret    

9f00156d <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f00156d:	55                   	push   ebp
9f00156e:	89 e5                	mov    ebp,esp
9f001570:	83 ec 10             	sub    esp,0x10
9f001573:	e8 e6 32 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001578:	05 24 5c 00 00       	add    eax,0x5c24
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f00157d:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001580:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f001583:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001586:	89 c2                	mov    edx,eax
9f001588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00158b:	52                   	push   edx
9f00158c:	50                   	push   eax
9f00158d:	68 00 03 00 00       	push   0x300
9f001592:	e8 27 fd ff ff       	call   9f0012be <do_syscall2>
9f001597:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f00159a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f00159f:	c9                   	leave  
9f0015a0:	c3                   	ret    

9f0015a1 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f0015a1:	55                   	push   ebp
9f0015a2:	89 e5                	mov    ebp,esp
9f0015a4:	83 ec 10             	sub    esp,0x10
9f0015a7:	e8 b2 32 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0015ac:	05 f0 5b 00 00       	add    eax,0x5bf0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f0015b1:	8d 45 10             	lea    eax,[ebp+0x10]
9f0015b4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0015b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0015ba:	89 c2                	mov    edx,eax
9f0015bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0015bf:	52                   	push   edx
9f0015c0:	50                   	push   eax
9f0015c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015c4:	68 01 03 00 00       	push   0x301
9f0015c9:	e8 b4 fc ff ff       	call   9f001282 <do_syscall3>
9f0015ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f0015d1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f0015d6:	c9                   	leave  
9f0015d7:	c3                   	ret    

9f0015d8 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f0015d8:	55                   	push   ebp
9f0015d9:	89 e5                	mov    ebp,esp
9f0015db:	83 ec 10             	sub    esp,0x10
9f0015de:	e8 7b 32 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0015e3:	05 b9 5b 00 00       	add    eax,0x5bb9
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f0015e8:	8d 45 10             	lea    eax,[ebp+0x10]
9f0015eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0015ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0015f1:	89 c2                	mov    edx,eax
9f0015f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0015f6:	52                   	push   edx
9f0015f7:	50                   	push   eax
9f0015f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015fb:	68 01 03 00 00       	push   0x301
9f001600:	e8 7d fc ff ff       	call   9f001282 <do_syscall3>
9f001605:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f001608:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f00160d:	c9                   	leave  
9f00160e:	c3                   	ret    

9f00160f <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f00160f:	55                   	push   ebp
9f001610:	89 e5                	mov    ebp,esp
9f001612:	56                   	push   esi
9f001613:	53                   	push   ebx
9f001614:	83 ec 10             	sub    esp,0x10
9f001617:	e8 42 32 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00161c:	05 80 5b 00 00       	add    eax,0x5b80
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    return SLEEP_SECONDS(__seconds);
9f001621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001624:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001627:	b8 70 01 00 00       	mov    eax,0x170
9f00162c:	bb 00 00 00 00       	mov    ebx,0x0
9f001631:	b9 00 00 00 00       	mov    ecx,0x0
9f001636:	ba 00 00 00 00       	mov    edx,0x0
9f00163b:	be 00 00 00 00       	mov    esi,0x0
9f001640:	e8 fc ff ff ff       	call   9f001641 <sleep+0x32>
9f001645:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00164b:	6b d0 64             	imul   edx,eax,0x64
9f00164e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001651:	01 d0                	add    eax,edx
9f001653:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001656:	b8 66 01 00 00       	mov    eax,0x166
9f00165b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00165e:	b9 00 00 00 00       	mov    ecx,0x0
9f001663:	ba 00 00 00 00       	mov    edx,0x0
9f001668:	be 00 00 00 00       	mov    esi,0x0
9f00166d:	e8 fc ff ff ff       	call   9f00166e <sleep+0x5f>
9f001672:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
}
9f001678:	83 c4 10             	add    esp,0x10
9f00167b:	5b                   	pop    ebx
9f00167c:	5e                   	pop    esi
9f00167d:	5d                   	pop    ebp
9f00167e:	c3                   	ret    

9f00167f <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140

VISIBLE unsigned int sleepTicks(unsigned int __milliseconds)
{
9f00167f:	55                   	push   ebp
9f001680:	89 e5                	mov    ebp,esp
9f001682:	56                   	push   esi
9f001683:	53                   	push   ebx
9f001684:	83 ec 10             	sub    esp,0x10
9f001687:	e8 d2 31 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00168c:	05 10 5b 00 00       	add    eax,0x5b10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    return SLEEP_MS(__milliseconds);
9f001691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001694:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001697:	b8 70 01 00 00       	mov    eax,0x170
9f00169c:	bb 00 00 00 00       	mov    ebx,0x0
9f0016a1:	b9 00 00 00 00       	mov    ecx,0x0
9f0016a6:	ba 00 00 00 00       	mov    edx,0x0
9f0016ab:	be 00 00 00 00       	mov    esi,0x0
9f0016b0:	e8 fc ff ff ff       	call   9f0016b1 <sleepTicks+0x32>
9f0016b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0016b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0016bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0016be:	01 d0                	add    eax,edx
9f0016c0:	83 e8 01             	sub    eax,0x1
9f0016c3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0016c6:	b8 66 01 00 00       	mov    eax,0x166
9f0016cb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0016ce:	b9 00 00 00 00       	mov    ecx,0x0
9f0016d3:	ba 00 00 00 00       	mov    edx,0x0
9f0016d8:	be 00 00 00 00       	mov    esi,0x0
9f0016dd:	e8 fc ff ff ff       	call   9f0016de <sleepTicks+0x5f>
9f0016e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0016e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    
}
9f0016e8:	83 c4 10             	add    esp,0x10
9f0016eb:	5b                   	pop    ebx
9f0016ec:	5e                   	pop    esi
9f0016ed:	5d                   	pop    ebp
9f0016ee:	c3                   	ret    

9f0016ef <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

void stop()
{
9f0016ef:	55                   	push   ebp
9f0016f0:	89 e5                	mov    ebp,esp
9f0016f2:	e8 67 31 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0016f7:	05 a5 5a 00 00       	add    eax,0x5aa5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    do_syscall0(SYSCALL_STOP);
9f0016fc:	68 68 01 00 00       	push   0x168
9f001701:	e8 36 fc ff ff       	call   9f00133c <do_syscall0>
9f001706:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
}
9f001709:	90                   	nop
9f00170a:	c9                   	leave  
9f00170b:	c3                   	ret    

9f00170c <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f00170c:	55                   	push   ebp
9f00170d:	89 e5                	mov    ebp,esp
9f00170f:	e8 4a 31 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001714:	05 88 5a 00 00       	add    eax,0x5a88
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f001719:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00171c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00171f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001722:	51                   	push   ecx
9f001723:	52                   	push   edx
9f001724:	50                   	push   eax
9f001725:	68 67 01 00 00       	push   0x167
9f00172a:	e8 53 fb ff ff       	call   9f001282 <do_syscall3>
9f00172f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
}
9f001732:	90                   	nop
9f001733:	c9                   	leave  
9f001734:	c3                   	ret    

9f001735 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:156

VISIBLE int fork()
{
9f001735:	55                   	push   ebp
9f001736:	89 e5                	mov    ebp,esp
9f001738:	83 ec 10             	sub    esp,0x10
9f00173b:	e8 1e 31 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001740:	05 5c 5a 00 00       	add    eax,0x5a5c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
    uint32_t retVal = 0;
9f001745:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f00174c:	b8 0d 00 00 00       	mov    eax,0xd
9f001751:	e8 fc ff ff ff       	call   9f001752 <fork+0x1d>
9f001756:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    return retVal;
9f001759:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:161
}
9f00175c:	c9                   	leave  
9f00175d:	c3                   	ret    

9f00175e <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164

VISIBLE int exec(char* path, int argc, char** argv)
{
9f00175e:	55                   	push   ebp
9f00175f:	89 e5                	mov    ebp,esp
9f001761:	83 ec 10             	sub    esp,0x10
9f001764:	e8 f5 30 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001769:	05 33 5a 00 00       	add    eax,0x5a33
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
    int pid=0;
9f00176e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f001775:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001778:	8d 80 0e f8 ff ff    	lea    eax,[eax-0x7f2]
9f00177e:	50                   	push   eax
9f00177f:	68 00 00 00 02       	push   0x2000000
9f001784:	e8 4f fe ff ff       	call   9f0015d8 <printdI>
9f001789:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f00178c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00178f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001795:	51                   	push   ecx
9f001796:	52                   	push   edx
9f001797:	50                   	push   eax
9f001798:	6a 59                	push   0x59
9f00179a:	e8 e3 fa ff ff       	call   9f001282 <do_syscall3>
9f00179f:	83 c4 10             	add    esp,0x10
9f0017a2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    return pid;
9f0017a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169
}
9f0017a8:	c9                   	leave  
9f0017a9:	c3                   	ret    

9f0017aa <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172

VISIBLE int execb(char* path)
{
9f0017aa:	55                   	push   ebp
9f0017ab:	89 e5                	mov    ebp,esp
9f0017ad:	53                   	push   ebx
9f0017ae:	83 ec 24             	sub    esp,0x24
9f0017b1:	e8 ea 30 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0017b6:	81 c3 e6 59 00 00    	add    ebx,0x59e6
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    int pid=0, argc=0;
9f0017bc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f0017c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f0017ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017cd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0017d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    char* program;
    program=mallocI(512);
9f0017d6:	83 ec 0c             	sub    esp,0xc
9f0017d9:	68 00 02 00 00       	push   0x200
9f0017de:	e8 c8 09 00 00       	call   9f0021ab <mallocI>
9f0017e3:	83 c4 10             	add    esp,0x10
9f0017e6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f0017e9:	83 ec 08             	sub    esp,0x8
9f0017ec:	8d 83 21 f8 ff ff    	lea    eax,[ebx-0x7df]
9f0017f2:	50                   	push   eax
9f0017f3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0017f6:	e8 c7 22 00 00       	call   9f003ac2 <strstrI>
9f0017fb:	83 c4 10             	add    esp,0x10
9f0017fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
        if (argc==0)
9f001801:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001805:	75 44                	jne    9f00184b <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:183
        {
            if (spacePtr==0)
9f001807:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00180b:	75 22                	jne    9f00182f <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
                strncpyI(program, path, strlenI(path));
9f00180d:	83 ec 0c             	sub    esp,0xc
9f001810:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001813:	e8 d4 1a 00 00       	call   9f0032ec <strlenI>
9f001818:	83 c4 10             	add    esp,0x10
9f00181b:	83 ec 04             	sub    esp,0x4
9f00181e:	50                   	push   eax
9f00181f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001822:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001825:	e8 36 1c 00 00       	call   9f003460 <strncpyI>
9f00182a:	83 c4 10             	add    esp,0x10
9f00182d:	eb 1c                	jmp    9f00184b <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
            else
                strncpyI(program, path, spacePtr-path);
9f00182f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001835:	29 c2                	sub    edx,eax
9f001837:	89 d0                	mov    eax,edx
9f001839:	83 ec 04             	sub    esp,0x4
9f00183c:	50                   	push   eax
9f00183d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001840:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001843:	e8 18 1c 00 00       	call   9f003460 <strncpyI>
9f001848:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188
        }
        argc++;
9f00184b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
            
    } while (spacePtr++);
9f00184f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001852:	8d 50 01             	lea    edx,[eax+0x1]
9f001855:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001858:	85 c0                	test   eax,eax
9f00185a:	75 8d                	jne    9f0017e9 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192
    
    argv=mallocI((argc*50)+(argc*4));
9f00185c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00185f:	6b c0 36             	imul   eax,eax,0x36
9f001862:	83 ec 0c             	sub    esp,0xc
9f001865:	50                   	push   eax
9f001866:	e8 40 09 00 00       	call   9f0021ab <mallocI>
9f00186b:	83 c4 10             	add    esp,0x10
9f00186e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
    int argvPtr=4*argc;
9f001871:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001874:	c1 e0 02             	shl    eax,0x2
9f001877:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
    spacePtr=path;
9f00187a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00187d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
    for (int cnt=0;cnt<argc; cnt++)
9f001880:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001887:	e9 c8 00 00 00       	jmp    9f001954 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
    {
        argv[cnt]=(char*)argv+argvPtr;
9f00188c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00188f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001899:	01 d0                	add    eax,edx
9f00189b:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f00189e:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f0018a1:	01 ca                	add    edx,ecx
9f0018a3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:198
        spacePtr=strstrI(spacePtr," ");
9f0018a5:	83 ec 08             	sub    esp,0x8
9f0018a8:	8d 83 21 f8 ff ff    	lea    eax,[ebx-0x7df]
9f0018ae:	50                   	push   eax
9f0018af:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0018b2:	e8 0b 22 00 00       	call   9f003ac2 <strstrI>
9f0018b7:	83 c4 10             	add    esp,0x10
9f0018ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199
        if (spacePtr)
9f0018bd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0018c1:	74 2f                	je     9f0018f2 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f0018c3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0018c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0018c9:	29 c2                	sub    edx,eax
9f0018cb:	89 d0                	mov    eax,edx
9f0018cd:	89 c1                	mov    ecx,eax
9f0018cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0018d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0018d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0018dc:	01 d0                	add    eax,edx
9f0018de:	8b 00                	mov    eax,DWORD PTR [eax]
9f0018e0:	83 ec 04             	sub    esp,0x4
9f0018e3:	51                   	push   ecx
9f0018e4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0018e7:	50                   	push   eax
9f0018e8:	e8 73 1b 00 00       	call   9f003460 <strncpyI>
9f0018ed:	83 c4 10             	add    esp,0x10
9f0018f0:	eb 31                	jmp    9f001923 <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f0018f2:	83 ec 0c             	sub    esp,0xc
9f0018f5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0018f8:	e8 ef 19 00 00       	call   9f0032ec <strlenI>
9f0018fd:	83 c4 10             	add    esp,0x10
9f001900:	89 c2                	mov    edx,eax
9f001902:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001905:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f00190c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00190f:	01 c8                	add    eax,ecx
9f001911:	8b 00                	mov    eax,DWORD PTR [eax]
9f001913:	83 ec 04             	sub    esp,0x4
9f001916:	52                   	push   edx
9f001917:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00191a:	50                   	push   eax
9f00191b:	e8 40 1b 00 00       	call   9f003460 <strncpyI>
9f001920:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:203 (discriminator 2)
        strtrimI(argv[cnt]);
9f001923:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001926:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00192d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001930:	01 d0                	add    eax,edx
9f001932:	8b 00                	mov    eax,DWORD PTR [eax]
9f001934:	83 ec 0c             	sub    esp,0xc
9f001937:	50                   	push   eax
9f001938:	e8 eb 1e 00 00       	call   9f003828 <strtrimI>
9f00193d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001940:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001943:	8d 50 01             	lea    edx,[eax+0x1]
9f001946:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001949:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205 (discriminator 2)
        argvPtr+=50;
9f00194c:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f001950:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195 (discriminator 1)
9f001954:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001957:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00195a:	0f 8c 2c ff ff ff    	jl     9f00188c <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001960:	83 ec 04             	sub    esp,0x4
9f001963:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001966:	8d 83 23 f8 ff ff    	lea    eax,[ebx-0x7dd]
9f00196c:	50                   	push   eax
9f00196d:	68 00 00 00 02       	push   0x2000000
9f001972:	e8 61 fc ff ff       	call   9f0015d8 <printdI>
9f001977:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f00197a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f00197d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001980:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001983:	51                   	push   ecx
9f001984:	52                   	push   edx
9f001985:	50                   	push   eax
9f001986:	68 05 03 00 00       	push   0x305
9f00198b:	e8 f2 f8 ff ff       	call   9f001282 <do_syscall3>
9f001990:	83 c4 10             	add    esp,0x10
9f001993:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001996:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    freeI(argv);
    freeI(program);
}
9f001999:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00199c:	c9                   	leave  
9f00199d:	c3                   	ret    

9f00199e <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:218

VISIBLE int execa(char* path, int argc, char** argv)
{
9f00199e:	55                   	push   ebp
9f00199f:	89 e5                	mov    ebp,esp
9f0019a1:	83 ec 10             	sub    esp,0x10
9f0019a4:	e8 b5 2e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0019a9:	05 f3 57 00 00       	add    eax,0x57f3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
    int pid=0;
9f0019ae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:220
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f0019b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019b8:	8d 80 37 f8 ff ff    	lea    eax,[eax-0x7c9]
9f0019be:	50                   	push   eax
9f0019bf:	68 00 00 00 02       	push   0x2000000
9f0019c4:	e8 0f fc ff ff       	call   9f0015d8 <printdI>
9f0019c9:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f0019cc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0019cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0019d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019d5:	51                   	push   ecx
9f0019d6:	52                   	push   edx
9f0019d7:	50                   	push   eax
9f0019d8:	68 05 03 00 00       	push   0x305
9f0019dd:	e8 a0 f8 ff ff       	call   9f001282 <do_syscall3>
9f0019e2:	83 c4 10             	add    esp,0x10
9f0019e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    return pid;
9f0019e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:223
}
9f0019eb:	c9                   	leave  
9f0019ec:	c3                   	ret    

9f0019ed <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226

VISIBLE int waitpid(uint32_t pid)
{
9f0019ed:	55                   	push   ebp
9f0019ee:	89 e5                	mov    ebp,esp
9f0019f0:	e8 69 2e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0019f5:	05 a7 57 00 00       	add    eax,0x57a7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f0019fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019fd:	6a 61                	push   0x61
9f0019ff:	e8 f8 f8 ff ff       	call   9f0012fc <do_syscall1>
9f001a04:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
}
9f001a07:	c9                   	leave  
9f001a08:	c3                   	ret    

9f001a09 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232


VISIBLE void exit (int status)
{
9f001a09:	55                   	push   ebp
9f001a0a:	89 e5                	mov    ebp,esp
9f001a0c:	e8 4d 2e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001a11:	05 8b 57 00 00       	add    eax,0x578b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a19:	50                   	push   eax
9f001a1a:	6a 00                	push   0x0
9f001a1c:	6a 01                	push   0x1
9f001a1e:	e8 9b f8 ff ff       	call   9f0012be <do_syscall2>
9f001a23:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
}
9f001a26:	90                   	nop
9f001a27:	c9                   	leave  
9f001a28:	c3                   	ret    

9f001a29 <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001a29:	55                   	push   ebp
9f001a2a:	89 e5                	mov    ebp,esp
9f001a2c:	e8 2d 2e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001a31:	05 6b 57 00 00       	add    eax,0x576b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001a3c:	50                   	push   eax
9f001a3d:	6a 50                	push   0x50
9f001a3f:	e8 7a f8 ff ff       	call   9f0012be <do_syscall2>
9f001a44:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
}
9f001a47:	c9                   	leave  
9f001a48:	c3                   	ret    

9f001a49 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001a49:	55                   	push   ebp
9f001a4a:	89 e5                	mov    ebp,esp
9f001a4c:	83 ec 20             	sub    esp,0x20
9f001a4f:	e8 0a 2e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001a54:	05 48 57 00 00       	add    eax,0x5748
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001a59:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
    size_t argc = 0;
9f001a60:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a6a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001a6d:	e9 d8 00 00 00       	jmp    9f001b4a <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:249
        c = (unsigned char) *p;
9f001a72:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001a75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001a78:	0f b6 c0             	movzx  eax,al
9f001a7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250
        switch (state) {
9f001a7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001a81:	83 f8 01             	cmp    eax,0x1
9f001a84:	74 7e                	je     9f001b04 <splitI+0xbb>
9f001a86:	83 f8 01             	cmp    eax,0x1
9f001a89:	72 0a                	jb     9f001a95 <splitI+0x4c>
9f001a8b:	83 f8 02             	cmp    eax,0x2
9f001a8e:	74 45                	je     9f001ad5 <splitI+0x8c>
9f001a90:	e9 b1 00 00 00       	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
        case DULL:
            if (ISSPACE(c)) {
9f001a95:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001a99:	0f 94 c0             	sete   al
9f001a9c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001a9f:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001aa3:	84 c0                	test   al,al
9f001aa5:	0f 85 94 00 00 00    	jne    9f001b3f <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
                continue;
            }

            if (c == '"') {
9f001aab:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001aaf:	75 15                	jne    9f001ac6 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:257
                state = IN_STRING;
9f001ab1:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258
                start_of_word = p + 1; 
9f001ab8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001abb:	83 c0 01             	add    eax,0x1
9f001abe:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
                continue;
9f001ac1:	e9 80 00 00 00       	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
            }
            state = IN_WORD;
9f001ac6:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262
            start_of_word = p;
9f001acd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001ad0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
            continue;
9f001ad3:	eb 71                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:266

        case IN_STRING:
            if (c == '"') {
9f001ad5:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001ad9:	75 67                	jne    9f001b42 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
                *p = 0;
9f001adb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001ade:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
                argv[argc++] = start_of_word;
9f001ae1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001ae4:	8d 50 01             	lea    edx,[eax+0x1]
9f001ae7:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001aea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001af1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001af4:	01 c2                	add    edx,eax
9f001af6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001af9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
                state = DULL;
9f001afb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
            }
            continue;
9f001b02:	eb 3e                	jmp    9f001b42 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274

        case IN_WORD:
            if (ISSPACE(c)) {
9f001b04:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001b08:	0f 94 c0             	sete   al
9f001b0b:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001b0e:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001b12:	84 c0                	test   al,al
9f001b14:	74 2f                	je     9f001b45 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
                *p = 0;
9f001b16:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b19:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
                argv[argc++] = start_of_word;
9f001b1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b1f:	8d 50 01             	lea    edx,[eax+0x1]
9f001b22:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b2f:	01 c2                	add    edx,eax
9f001b31:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b34:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
                state = DULL;
9f001b36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
            }
            continue;
9f001b3d:	eb 06                	jmp    9f001b45 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f001b3f:	90                   	nop
9f001b40:	eb 04                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001b42:	90                   	nop
9f001b43:	eb 01                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001b45:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001b46:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 1)
9f001b4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b4d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001b50:	73 0e                	jae    9f001b60 <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 3)
9f001b52:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b55:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001b58:	84 c0                	test   al,al
9f001b5a:	0f 85 12 ff ff ff    	jne    9f001a72 <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f001b60:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001b64:	74 22                	je     9f001b88 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283 (discriminator 1)
9f001b66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b69:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001b6c:	73 1a                	jae    9f001b88 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
        argv[argc++] = start_of_word;
9f001b6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b71:	8d 50 01             	lea    edx,[eax+0x1]
9f001b74:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b77:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b81:	01 c2                	add    edx,eax
9f001b83:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b86:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286

    return argc;
9f001b88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
}
9f001b8b:	c9                   	leave  
9f001b8c:	c3                   	ret    

9f001b8d <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001b8d:	55                   	push   ebp
9f001b8e:	89 e5                	mov    ebp,esp
9f001b90:	e8 c9 2c 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001b95:	05 07 56 00 00       	add    eax,0x5607
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
    return splitI(buffer, argv, argv_size);
9f001b9a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001b9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ba0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ba3:	e8 a1 fe ff ff       	call   9f001a49 <splitI>
9f001ba8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
}
9f001bab:	c9                   	leave  
9f001bac:	c3                   	ret    

9f001bad <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001bad:	55                   	push   ebp
9f001bae:	89 e5                	mov    ebp,esp
9f001bb0:	56                   	push   esi
9f001bb1:	53                   	push   ebx
9f001bb2:	81 ec 30 04 00 00    	sub    esp,0x430
9f001bb8:	e8 e3 2c 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f001bbd:	81 c3 df 55 00 00    	add    ebx,0x55df
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001bc3:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bc9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001bcc:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bd2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001bd5:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bdb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
    char dblquote[2] = {'"',0};
9f001bde:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001be5:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:300
    *argc = 0;
9f001bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001bef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
    
    strncpyI(cmd,cmdline,1024);
9f001bf5:	83 ec 04             	sub    esp,0x4
9f001bf8:	68 00 04 00 00       	push   0x400
9f001bfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001c00:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001c06:	50                   	push   eax
9f001c07:	e8 54 18 00 00       	call   9f003460 <strncpyI>
9f001c0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
    strtrimI(cmd);
9f001c0f:	83 ec 0c             	sub    esp,0xc
9f001c12:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001c18:	50                   	push   eax
9f001c19:	e8 0a 1c 00 00       	call   9f003828 <strtrimI>
9f001c1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001c21:	83 ec 04             	sub    esp,0x4
9f001c24:	68 a0 0f 00 00       	push   0xfa0
9f001c29:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001c2f:	50                   	push   eax
9f001c30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001c33:	e8 ec 1d 00 00       	call   9f003a24 <strnstrI>
9f001c38:	83 c4 10             	add    esp,0x10
9f001c3b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
        spacePtr=strstrI(spacePtr," ");
9f001c3e:	83 ec 08             	sub    esp,0x8
9f001c41:	8d 83 21 f8 ff ff    	lea    eax,[ebx-0x7df]
9f001c47:	50                   	push   eax
9f001c48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001c4b:	e8 72 1e 00 00       	call   9f003ac2 <strstrI>
9f001c50:	83 c4 10             	add    esp,0x10
9f001c53:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001c56:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001c5a:	74 48                	je     9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308 (discriminator 1)
9f001c5c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c5f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c62:	77 40                	ja     9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
        {
            char *temp = spacePtr;
9f001c64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001c67:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001c6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c6d:	8d 50 01             	lea    edx,[eax+0x1]
9f001c70:	83 ec 04             	sub    esp,0x4
9f001c73:	68 a0 0f 00 00       	push   0xfa0
9f001c78:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001c7e:	50                   	push   eax
9f001c7f:	52                   	push   edx
9f001c80:	e8 9f 1d 00 00       	call   9f003a24 <strnstrI>
9f001c85:	83 c4 10             	add    esp,0x10
9f001c88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
            if (spacePtr>=quotePtr+4000)
9f001c8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c8e:	05 a0 0f 00 00       	add    eax,0xfa0
9f001c93:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c96:	77 08                	ja     9f001ca0 <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001c98:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001c9b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001c9e:	eb 04                	jmp    9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
            else
                spacePtr += 1;                              //Skip the closing quote
9f001ca0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
        }
        *argc+=1;
9f001ca4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ca7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ca9:	8d 50 01             	lea    edx,[eax+0x1]
9f001cac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001caf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
        if (spacePtr!=0 && *spacePtr)
9f001cb1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cb5:	74 0e                	je     9f001cc5 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318 (discriminator 1)
9f001cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001cba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cbd:	84 c0                	test   al,al
9f001cbf:	74 04                	je     9f001cc5 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
            spacePtr++;
9f001cc1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:321
    
    } while (spacePtr!=0 && *spacePtr);
9f001cc5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cc9:	74 0e                	je     9f001cd9 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:321 (discriminator 1)
9f001ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001cce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cd1:	84 c0                	test   al,al
9f001cd3:	0f 85 48 ff ff ff    	jne    9f001c21 <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:323
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cdc:	8b 10                	mov    edx,DWORD PTR [eax]
9f001cde:	89 d0                	mov    eax,edx
9f001ce0:	c1 e0 08             	shl    eax,0x8
9f001ce3:	29 d0                	sub    eax,edx
9f001ce5:	89 c2                	mov    edx,eax
9f001ce7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cea:	8b 00                	mov    eax,DWORD PTR [eax]
9f001cec:	c1 e0 02             	shl    eax,0x2
9f001cef:	01 d0                	add    eax,edx
9f001cf1:	83 ec 0c             	sub    esp,0xc
9f001cf4:	50                   	push   eax
9f001cf5:	e8 b1 04 00 00       	call   9f0021ab <mallocI>
9f001cfa:	83 c4 10             	add    esp,0x10
9f001cfd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
    int argvPtr=4* *argc;
9f001d00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d03:	8b 00                	mov    eax,DWORD PTR [eax]
9f001d05:	c1 e0 02             	shl    eax,0x2
9f001d08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
    spacePtr=cmd;
9f001d0b:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d11:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326
    for (int cnt=0;cnt<*argc; cnt++)
9f001d14:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f001d1b:	e9 72 01 00 00       	jmp    9f001e92 <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001d20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001d23:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001d2a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001d2d:	01 d0                	add    eax,edx
9f001d2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001d32:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f001d35:	01 ca                	add    edx,ecx
9f001d37:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f001d39:	83 ec 04             	sub    esp,0x4
9f001d3c:	68 a0 0f 00 00       	push   0xfa0
9f001d41:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d47:	50                   	push   eax
9f001d48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001d4b:	e8 d4 1c 00 00       	call   9f003a24 <strnstrI>
9f001d50:	83 c4 10             	add    esp,0x10
9f001d53:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f001d56:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001d5a:	0f 84 80 00 00 00    	je     9f001de0 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330 (discriminator 1)
9f001d60:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d63:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001d66:	77 78                	ja     9f001de0 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
        {
            char *temp = spacePtr;
9f001d68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d6b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f001d6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d71:	8d 50 01             	lea    edx,[eax+0x1]
9f001d74:	83 ec 04             	sub    esp,0x4
9f001d77:	68 a0 0f 00 00       	push   0xfa0
9f001d7c:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d82:	50                   	push   eax
9f001d83:	52                   	push   edx
9f001d84:	e8 9b 1c 00 00       	call   9f003a24 <strnstrI>
9f001d89:	83 c4 10             	add    esp,0x10
9f001d8c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:334
            if (spacePtr>=quotePtr+4000)
9f001d8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d92:	05 a0 0f 00 00       	add    eax,0xfa0
9f001d97:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001d9a:	77 0b                	ja     9f001da7 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f001d9c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001d9f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001da2:	e9 d4 00 00 00       	jmp    9f001e7b <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001da7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001daa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001dad:	29 c2                	sub    edx,eax
9f001daf:	89 d0                	mov    eax,edx
9f001db1:	83 e8 02             	sub    eax,0x2
9f001db4:	89 c6                	mov    esi,eax
9f001db6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001db9:	8d 50 01             	lea    edx,[eax+0x1]
9f001dbc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001dbf:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001dc6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001dc9:	01 c8                	add    eax,ecx
9f001dcb:	8b 00                	mov    eax,DWORD PTR [eax]
9f001dcd:	83 ec 04             	sub    esp,0x4
9f001dd0:	56                   	push   esi
9f001dd1:	52                   	push   edx
9f001dd2:	50                   	push   eax
9f001dd3:	e8 88 16 00 00       	call   9f003460 <strncpyI>
9f001dd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001ddb:	e9 9b 00 00 00       	jmp    9f001e7b <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f001de0:	83 ec 08             	sub    esp,0x8
9f001de3:	8d 83 21 f8 ff ff    	lea    eax,[ebx-0x7df]
9f001de9:	50                   	push   eax
9f001dea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001ded:	e8 d0 1c 00 00       	call   9f003ac2 <strstrI>
9f001df2:	83 c4 10             	add    esp,0x10
9f001df5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:344
            if (spacePtr)
9f001df8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001dfc:	74 2f                	je     9f001e2d <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:345
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001dfe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001e01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e04:	29 c2                	sub    edx,eax
9f001e06:	89 d0                	mov    eax,edx
9f001e08:	89 c1                	mov    ecx,eax
9f001e0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e0d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e17:	01 d0                	add    eax,edx
9f001e19:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e1b:	83 ec 04             	sub    esp,0x4
9f001e1e:	51                   	push   ecx
9f001e1f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e22:	50                   	push   eax
9f001e23:	e8 38 16 00 00       	call   9f003460 <strncpyI>
9f001e28:	83 c4 10             	add    esp,0x10
9f001e2b:	eb 31                	jmp    9f001e5e <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001e2d:	83 ec 0c             	sub    esp,0xc
9f001e30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e33:	e8 b4 14 00 00       	call   9f0032ec <strlenI>
9f001e38:	83 c4 10             	add    esp,0x10
9f001e3b:	89 c2                	mov    edx,eax
9f001e3d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e40:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001e47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e4a:	01 c8                	add    eax,ecx
9f001e4c:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e4e:	83 ec 04             	sub    esp,0x4
9f001e51:	52                   	push   edx
9f001e52:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e55:	50                   	push   eax
9f001e56:	e8 05 16 00 00       	call   9f003460 <strncpyI>
9f001e5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:348
            strtrimI(argv[cnt]);
9f001e5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e61:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e68:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e6b:	01 d0                	add    eax,edx
9f001e6d:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e6f:	83 ec 0c             	sub    esp,0xc
9f001e72:	50                   	push   eax
9f001e73:	e8 b0 19 00 00       	call   9f003828 <strtrimI>
9f001e78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f001e7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e7e:	8d 50 01             	lea    edx,[eax+0x1]
9f001e81:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001e84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:351 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001e87:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f001e8e:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326 (discriminator 1)
9f001e92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e95:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e97:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001e9a:	0f 8f 80 fe ff ff    	jg     9f001d20 <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:353
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f001ea0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:354
}
9f001ea3:	8d 65 f8             	lea    esp,[ebp-0x8]
9f001ea6:	5b                   	pop    ebx
9f001ea7:	5e                   	pop    esi
9f001ea8:	5d                   	pop    ebp
9f001ea9:	c3                   	ret    

9f001eaa <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f001eaa:	55                   	push   ebp
9f001eab:	89 e5                	mov    ebp,esp
9f001ead:	83 ec 08             	sub    esp,0x8
9f001eb0:	e8 a9 29 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001eb5:	05 e7 52 00 00       	add    eax,0x52e7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:358
    return cmdlineToArgvI(cmdline, argc);
9f001eba:	83 ec 08             	sub    esp,0x8
9f001ebd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ec0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ec3:	e8 e5 fc ff ff       	call   9f001bad <cmdlineToArgvI>
9f001ec8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:359
}
9f001ecb:	c9                   	leave  
9f001ecc:	c3                   	ret    

9f001ecd <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:362

VISIBLE int setSTD(int std, uint32_t filed)
{
9f001ecd:	55                   	push   ebp
9f001ece:	89 e5                	mov    ebp,esp
9f001ed0:	e8 89 29 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001ed5:	05 c7 52 00 00       	add    eax,0x52c7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:363
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f001eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001edd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ee0:	50                   	push   eax
9f001ee1:	68 06 03 00 00       	push   0x306
9f001ee6:	e8 d3 f3 ff ff       	call   9f0012be <do_syscall2>
9f001eeb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:364
}
9f001eee:	c9                   	leave  
9f001eef:	c3                   	ret    

9f001ef0 <takeADump>:
takeADump():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:367

VISIBLE void takeADump()
{
9f001ef0:	55                   	push   ebp
9f001ef1:	89 e5                	mov    ebp,esp
9f001ef3:	e8 66 29 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001ef8:	05 a4 52 00 00       	add    eax,0x52a4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:368
    return do_syscall0(SYSCALL_TAKEADUMP);
9f001efd:	68 00 09 00 00       	push   0x900
9f001f02:	e8 35 f4 ff ff       	call   9f00133c <do_syscall0>
9f001f07:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:369
9f001f0a:	c9                   	leave  
9f001f0b:	c3                   	ret    

9f001f0c <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f001f0c:	55                   	push   ebp
9f001f0d:	89 e5                	mov    ebp,esp
9f001f0f:	53                   	push   ebx
9f001f10:	83 ec 04             	sub    esp,0x4
9f001f13:	e8 46 29 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001f18:	05 84 52 00 00       	add    eax,0x5284
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f001f1d:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f23:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f001f26:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f001f28:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f001f2b:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f31:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f001f34:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f3a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001f3d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f001f40:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f46:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f001f49:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f001f4c:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f52:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f001f55:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f001f58:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f5e:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f001f61:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f001f64:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f6a:	83 ec 08             	sub    esp,0x8
9f001f6d:	52                   	push   edx
9f001f6e:	6a 10                	push   0x10
9f001f70:	89 c3                	mov    ebx,eax
9f001f72:	e8 85 f3 ff ff       	call   9f0012fc <do_syscall1>
9f001f77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f001f7a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001f7d:	c9                   	leave  
9f001f7e:	c3                   	ret    
9f001f7f:	90                   	nop

9f001f80 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_GET_NEXTr(s) ({s=(uint8_t*)s+s->len+sizeof(heaprec_t);s;})
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
9f001f80:	55                   	push   ebp
9f001f81:	89 e5                	mov    ebp,esp
9f001f83:	53                   	push   ebx
9f001f84:	83 ec 04             	sub    esp,0x4
9f001f87:	e8 14 29 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f001f8c:	81 c3 10 52 00 00    	add    ebx,0x5210
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f001f92:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001f98:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f9a:	50                   	push   eax
9f001f9b:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001fa1:	50                   	push   eax
9f001fa2:	8d 83 4c f8 ff ff    	lea    eax,[ebx-0x7b4]
9f001fa8:	50                   	push   eax
9f001fa9:	68 00 00 00 01       	push   0x1000000
9f001fae:	e8 25 f6 ff ff       	call   9f0015d8 <printdI>
9f001fb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapBase=0;
9f001fb6:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001fbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    heapCurr=0;
9f001fc2:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f001fc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:19
    heapEnd=0;
9f001fce:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f001fd4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20
    libcTZ=-5;
9f001fda:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f001fe0:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:22

}
9f001fe6:	90                   	nop
9f001fe7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001fea:	c9                   	leave  
9f001feb:	c3                   	ret    

9f001fec <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:25

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001fec:	55                   	push   ebp
9f001fed:	89 e5                	mov    ebp,esp
9f001fef:	83 ec 10             	sub    esp,0x10
9f001ff2:	e8 67 28 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f001ff7:	05 a5 51 00 00       	add    eax,0x51a5
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f001ffc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001fff:	83 c2 30             	add    edx,0x30
9f002002:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f002005:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00200b:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00200d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002010:	01 d1                	add    ecx,edx
9f002012:	8b 90 dc ff ff ff    	mov    edx,DWORD PTR [eax-0x24]
9f002018:	8b 12                	mov    edx,DWORD PTR [edx]
9f00201a:	39 d1                	cmp    ecx,edx
9f00201c:	76 4e                	jbe    9f00206c <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f00201e:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002024:	8b 12                	mov    edx,DWORD PTR [edx]
9f002026:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f00202c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00202e:	29 c2                	sub    edx,eax
9f002030:	89 d0                	mov    eax,edx
9f002032:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
        if (newSize== 0 || newSize%PAGE_SIZE)
9f002035:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f002039:	74 0c                	je     9f002047 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34 (discriminator 1)
9f00203b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00203e:	25 ff 0f 00 00       	and    eax,0xfff
9f002043:	85 c0                	test   eax,eax
9f002045:	74 10                	je     9f002057 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f002047:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00204a:	25 00 f0 ff ff       	and    eax,0xfffff000
9f00204f:	05 00 10 00 00       	add    eax,0x1000
9f002054:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f002057:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f00205e:	77 07                	ja     9f002067 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
            return ALLOC_REQUEST_SIZE;
9f002060:	b8 00 10 00 00       	mov    eax,0x1000
9f002065:	eb 0a                	jmp    9f002071 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
        else
            return newSize;
9f002067:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00206a:	eb 05                	jmp    9f002071 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
    }
    else
        return 0;
9f00206c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
}
9f002071:	c9                   	leave  
9f002072:	c3                   	ret    

9f002073 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:49

void freeI(void* fpointer)
{
9f002073:	55                   	push   ebp
9f002074:	89 e5                	mov    ebp,esp
9f002076:	83 ec 10             	sub    esp,0x10
9f002079:	e8 e0 27 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00207e:	05 1e 51 00 00       	add    eax,0x511e
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f002083:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f002086:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00208c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00208e:	39 d1                	cmp    ecx,edx
9f002090:	72 33                	jb     9f0020c5 <freeI+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52 (discriminator 1)
9f002092:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002095:	8b 80 e8 ff ff ff    	mov    eax,DWORD PTR [eax-0x18]
9f00209b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00209d:	39 c2                	cmp    edx,eax
9f00209f:	77 24                	ja     9f0020c5 <freeI+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
        return;
    
    if (fpointer==NULL)
9f0020a1:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0020a5:	74 21                	je     9f0020c8 <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:57
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f0020a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0020aa:	83 e8 18             	sub    eax,0x18
9f0020ad:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:60
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f0020b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020b3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0020b5:	3d 1f 2f 3f 4f       	cmp    eax,0x4f3f2f1f
9f0020ba:	75 0f                	jne    9f0020cb <freeI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
    }
    mp->inUse=false;
9f0020bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020bf:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f0020c3:	eb 07                	jmp    9f0020cc <freeI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
        return;
9f0020c5:	90                   	nop
9f0020c6:	eb 04                	jmp    9f0020cc <freeI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:56
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f0020c8:	90                   	nop
9f0020c9:	eb 01                	jmp    9f0020cc <freeI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
9f0020cb:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    }
    mp->inUse=false;
}
9f0020cc:	c9                   	leave  
9f0020cd:	c3                   	ret    

9f0020ce <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f0020ce:	55                   	push   ebp
9f0020cf:	89 e5                	mov    ebp,esp
9f0020d1:	83 ec 10             	sub    esp,0x10
9f0020d4:	e8 85 27 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0020d9:	05 c3 50 00 00       	add    eax,0x50c3
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:70
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f0020de:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0020e4:	8b 12                	mov    edx,DWORD PTR [edx]
9f0020e6:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    uint8_t *ptr=(uint8_t*)heapPtr;
9f0020e9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0020ec:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72
    heaprec_t *he=heapEnd;
9f0020ef:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f0020f5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0020f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size)
9f0020fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020fd:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
9f002101:	83 f0 01             	xor    eax,0x1
9f002104:	84 c0                	test   al,al
9f002106:	74 10                	je     9f002118 <mallocFindAvailableMemory+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75 (discriminator 1)
9f002108:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00210b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00210e:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
9f002111:	72 05                	jb     9f002118 <mallocFindAvailableMemory+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
            return heapPtr;
9f002113:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002116:	eb 2e                	jmp    9f002146 <mallocFindAvailableMemory+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
        if (heapPtr->next)
9f002118:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00211b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00211e:	85 c0                	test   eax,eax
9f002120:	74 09                	je     9f00212b <mallocFindAvailableMemory+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
            heapPtr=heapPtr->next;
9f002122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002125:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002128:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        
    }
    while(heapPtr->next && heapPtr->marker==ALLOC_MARKER_VALUE);
9f00212b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00212e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002131:	85 c0                	test   eax,eax
9f002133:	74 0c                	je     9f002141 <mallocFindAvailableMemory+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81 (discriminator 1)
9f002135:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002138:	8b 00                	mov    eax,DWORD PTR [eax]
9f00213a:	3d 1f 2f 3f 4f       	cmp    eax,0x4f3f2f1f
9f00213f:	74 b9                	je     9f0020fa <mallocFindAvailableMemory+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f002141:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
}
9f002146:	c9                   	leave  
9f002147:	c3                   	ret    

9f002148 <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:87

void mallocSanityCheck(heaprec_t *heaprec)
{
9f002148:	55                   	push   ebp
9f002149:	89 e5                	mov    ebp,esp
9f00214b:	53                   	push   ebx
9f00214c:	83 ec 14             	sub    esp,0x14
9f00214f:	e8 0a 27 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f002154:	05 48 50 00 00       	add    eax,0x5048
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:88
    heaprec_t *heapPtr=heaprec;
9f002159:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00215c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
    while (heapPtr>=heapBase && heapPtr->prev!=heapPtr)
9f00215f:	eb 2c                	jmp    9f00218d <mallocSanityCheck+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    {
        if (heapPtr->marker!=ALLOC_MARKER_VALUE)
9f002161:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002164:	8b 12                	mov    edx,DWORD PTR [edx]
9f002166:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f00216c:	74 16                	je     9f002184 <mallocSanityCheck+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
        {
            printfI("\n**************************malloc error!!!**************************\n");
9f00216e:	83 ec 0c             	sub    esp,0xc
9f002171:	8d 90 70 f8 ff ff    	lea    edx,[eax-0x790]
9f002177:	52                   	push   edx
9f002178:	89 c3                	mov    ebx,eax
9f00217a:	e8 9a f3 ff ff       	call   9f001519 <printfI>
9f00217f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95 (discriminator 1)
SanityLoop:
            goto SanityLoop;
9f002182:	eb fe                	jmp    9f002182 <mallocSanityCheck+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
        }
        heapPtr=heapPtr->prev;
9f002184:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002187:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f00218a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
}

void mallocSanityCheck(heaprec_t *heaprec)
{
    heaprec_t *heapPtr=heaprec;
    while (heapPtr>=heapBase && heapPtr->prev!=heapPtr)
9f00218d:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002193:	8b 12                	mov    edx,DWORD PTR [edx]
9f002195:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f002198:	72 0b                	jb     9f0021a5 <mallocSanityCheck+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 1)
9f00219a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00219d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f0021a0:	3b 55 f4             	cmp    edx,DWORD PTR [ebp-0xc]
9f0021a3:	75 bc                	jne    9f002161 <mallocSanityCheck+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
SanityLoop:
            goto SanityLoop;
        }
        heapPtr=heapPtr->prev;
    }
}
9f0021a5:	90                   	nop
9f0021a6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0021a9:	c9                   	leave  
9f0021aa:	c3                   	ret    

9f0021ab <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102

void*  mallocI(size_t size)
{
9f0021ab:	55                   	push   ebp
9f0021ac:	89 e5                	mov    ebp,esp
9f0021ae:	53                   	push   ebx
9f0021af:	83 ec 24             	sub    esp,0x24
9f0021b2:	e8 e9 26 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0021b7:	81 c3 e5 4f 00 00    	add    ebx,0x4fe5
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f0021bd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
    size_t requestSize=size;
9f0021c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0021c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
    uint8_t* heapPtrNext;
    static heaprec_t *lastHRCreated=NULL;

    if (size<ALLOC_MIN_MALLOC_SIZE)
9f0021ca:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f0021ce:	77 07                	ja     9f0021d7 <mallocI+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:113
        requestSize=ALLOC_MIN_MALLOC_SIZE;
9f0021d0:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f0021d7:	83 ec 04             	sub    esp,0x4
9f0021da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0021dd:	8d 83 b8 f8 ff ff    	lea    eax,[ebx-0x748]
9f0021e3:	50                   	push   eax
9f0021e4:	68 00 00 00 01       	push   0x1000000
9f0021e9:	e8 ea f3 ff ff       	call   9f0015d8 <printdI>
9f0021ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:126
            heapPtr->uses++;
            return ((void*)heapCurr)+sizeof(heaprec_t);
        }
    }
*/    
    needed = newHeapRequiredToFulfillRequest(requestSize);
9f0021f1:	83 ec 0c             	sub    esp,0xc
9f0021f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0021f7:	e8 f0 fd ff ff       	call   9f001fec <newHeapRequiredToFulfillRequest>
9f0021fc:	83 c4 10             	add    esp,0x10
9f0021ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f002202:	83 ec 04             	sub    esp,0x4
9f002205:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002208:	8d 83 df f8 ff ff    	lea    eax,[ebx-0x721]
9f00220e:	50                   	push   eax
9f00220f:	68 00 00 00 01       	push   0x1000000
9f002214:	e8 bf f3 ff ff       	call   9f0015d8 <printdI>
9f002219:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
    if (needed!=0)      //New heap required
9f00221c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f002220:	0f 84 e5 00 00 00    	je     9f00230b <mallocI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:130
    {
        if (heapCurr>0)
9f002226:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00222c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00222e:	85 c0                	test   eax,eax
9f002230:	74 17                	je     9f002249 <mallocI+0x9e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:131
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f002232:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002238:	8b 00                	mov    eax,DWORD PTR [eax]
9f00223a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00223d:	83 ec 0c             	sub    esp,0xc
9f002240:	50                   	push   eax
9f002241:	e8 02 ff ff ff       	call   9f002148 <mallocSanityCheck>
9f002246:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f002249:	83 ec 08             	sub    esp,0x8
9f00224c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00224f:	68 65 01 00 00       	push   0x165
9f002254:	e8 a3 f0 ff ff       	call   9f0012fc <do_syscall1>
9f002259:	83 c4 10             	add    esp,0x10
9f00225c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:134
        //This is needed to keep in sync with what the kernel thinks
        memset((char*)allocatedPtr,0,needed);
9f00225f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002262:	83 ec 04             	sub    esp,0x4
9f002265:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002268:	6a 00                	push   0x0
9f00226a:	50                   	push   eax
9f00226b:	e8 10 26 00 00       	call   9f004880 <__x86.get_pc_thunk.ax+0x22>
9f002270:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f002273:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002279:	8b 00                	mov    eax,DWORD PTR [eax]
9f00227b:	83 ec 04             	sub    esp,0x4
9f00227e:	50                   	push   eax
9f00227f:	8d 83 fb f8 ff ff    	lea    eax,[ebx-0x705]
9f002285:	50                   	push   eax
9f002286:	68 00 00 00 01       	push   0x1000000
9f00228b:	e8 48 f3 ff ff       	call   9f0015d8 <printdI>
9f002290:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136
        heapEnd=allocatedPtr+needed;
9f002293:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002296:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002299:	01 c2                	add    edx,eax
9f00229b:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022a1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0022a3:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022a9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022ab:	83 ec 0c             	sub    esp,0xc
9f0022ae:	50                   	push   eax
9f0022af:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0022b2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0022b5:	8d 83 18 f9 ff ff    	lea    eax,[ebx-0x6e8]
9f0022bb:	50                   	push   eax
9f0022bc:	68 00 00 00 01       	push   0x1000000
9f0022c1:	e8 12 f3 ff ff       	call   9f0015d8 <printdI>
9f0022c6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
        if (heapBase==0)    //Hasn't been initialized yet!
9f0022c9:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022cf:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022d1:	85 c0                	test   eax,eax
9f0022d3:	75 36                	jne    9f00230b <mallocI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:140
        {
            heapCurr=allocatedPtr;
9f0022d5:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0022db:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0022de:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:141
            heapBase=allocatedPtr;
9f0022e0:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022e6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0022e9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f0022eb:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0022f1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022f3:	83 ec 04             	sub    esp,0x4
9f0022f6:	50                   	push   eax
9f0022f7:	8d 83 58 f9 ff ff    	lea    eax,[ebx-0x6a8]
9f0022fd:	50                   	push   eax
9f0022fe:	68 00 00 00 01       	push   0x1000000
9f002303:	e8 d0 f2 ff ff       	call   9f0015d8 <printdI>
9f002308:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:145
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f00230b:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002311:	8b 00                	mov    eax,DWORD PTR [eax]
9f002313:	83 ec 04             	sub    esp,0x4
9f002316:	50                   	push   eax
9f002317:	8d 83 94 f9 ff ff    	lea    eax,[ebx-0x66c]
9f00231d:	50                   	push   eax
9f00231e:	68 00 00 00 01       	push   0x1000000
9f002323:	e8 b0 f2 ff ff       	call   9f0015d8 <printdI>
9f002328:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:146
    heapPtr = (heaprec_t*)heapCurr;
9f00232b:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002331:	8b 00                	mov    eax,DWORD PTR [eax]
9f002333:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:147
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f002336:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002339:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
    heapPtr->len=requestSize;
9f00233f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002342:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002345:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:149
    heapPtr->inUse=true;
9f002348:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00234b:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
    if (lastHRCreated!=NULL)
9f00234f:	8b 83 78 00 00 00    	mov    eax,DWORD PTR [ebx+0x78]
9f002355:	85 c0                	test   eax,eax
9f002357:	74 18                	je     9f002371 <mallocI+0x1c6>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:152
    {
        heapPtr->prev=lastHRCreated;
9f002359:	8b 93 78 00 00 00    	mov    edx,DWORD PTR [ebx+0x78]
9f00235f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002362:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
        heapPtr->prev->next=heapPtr;
9f002365:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002368:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00236b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00236e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:156
    }

    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f002371:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002377:	8b 00                	mov    eax,DWORD PTR [eax]
9f002379:	83 ec 04             	sub    esp,0x4
9f00237c:	50                   	push   eax
9f00237d:	8d 83 bc f9 ff ff    	lea    eax,[ebx-0x644]
9f002383:	50                   	push   eax
9f002384:	68 00 00 00 01       	push   0x1000000
9f002389:	e8 4a f2 ff ff       	call   9f0015d8 <printdI>
9f00238e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:157
    retVal=((void*)(heapPtr)+sizeof(heaprec_t));
9f002391:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002394:	83 c0 18             	add    eax,0x18
9f002397:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f00239a:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023a0:	8b 10                	mov    edx,DWORD PTR [eax]
9f0023a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0023a5:	01 d0                	add    eax,edx
9f0023a7:	8d 50 18             	lea    edx,[eax+0x18]
9f0023aa:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023b0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:159
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f0023b2:	83 ec 04             	sub    esp,0x4
9f0023b5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0023b8:	8d 83 da f9 ff ff    	lea    eax,[ebx-0x626]
9f0023be:	50                   	push   eax
9f0023bf:	68 00 00 00 01       	push   0x1000000
9f0023c4:	e8 0f f2 ff ff       	call   9f0015d8 <printdI>
9f0023c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:160
    lastHRCreated=heapPtr;
9f0023cc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023cf:	89 83 78 00 00 00    	mov    DWORD PTR [ebx+0x78],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
    return retVal;
9f0023d5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
}
9f0023d8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0023db:	c9                   	leave  
9f0023dc:	c3                   	ret    

9f0023dd <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:165

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f0023dd:	55                   	push   ebp
9f0023de:	89 e5                	mov    ebp,esp
9f0023e0:	83 ec 08             	sub    esp,0x8
9f0023e3:	e8 76 24 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0023e8:	05 b4 4d 00 00       	add    eax,0x4db4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    return mallocI(size);
9f0023ed:	83 ec 0c             	sub    esp,0xc
9f0023f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0023f3:	e8 b3 fd ff ff       	call   9f0021ab <mallocI>
9f0023f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
}
9f0023fb:	c9                   	leave  
9f0023fc:	c3                   	ret    

9f0023fd <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170

void* reallocI(void *foldptr, uint32_t newlen)
{
9f0023fd:	55                   	push   ebp
9f0023fe:	89 e5                	mov    ebp,esp
9f002400:	53                   	push   ebx
9f002401:	83 ec 14             	sub    esp,0x14
9f002404:	e8 97 24 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f002409:	81 c3 93 4d 00 00    	add    ebx,0x4d93
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:172
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f00240f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002412:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002415:	8d 83 f4 f9 ff ff    	lea    eax,[ebx-0x60c]
9f00241b:	50                   	push   eax
9f00241c:	68 00 00 00 01       	push   0x1000000
9f002421:	e8 b2 f1 ff ff       	call   9f0015d8 <printdI>
9f002426:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175

    //Get old heap pointer
    uint32_t realSize=newlen;
9f002429:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00242c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:177
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f00242f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002432:	83 e8 18             	sub    eax,0x18
9f002435:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179

    if (newlen==0)
9f002438:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f00243c:	75 17                	jne    9f002455 <reallocI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:180
        printdI(DEBUG_MALLOC,"libc_relloc: Request for 0 bytes, cannot fulfill\n");
9f00243e:	83 ec 08             	sub    esp,0x8
9f002441:	8d 83 34 fa ff ff    	lea    eax,[ebx-0x5cc]
9f002447:	50                   	push   eax
9f002448:	68 00 00 00 01       	push   0x1000000
9f00244d:	e8 86 f1 ff ff       	call   9f0015d8 <printdI>
9f002452:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:181
    if (newlen==0 || newlen<=mp->len)
9f002455:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002459:	74 0b                	je     9f002466 <reallocI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:181 (discriminator 1)
9f00245b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00245e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002461:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f002464:	72 08                	jb     9f00246e <reallocI+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:182
        return foldptr;
9f002466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002469:	e9 8d 00 00 00       	jmp    9f0024fb <reallocI+0xfe>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:184

    if (newlen<ALLOC_MIN_MALLOC_SIZE)
9f00246e:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f002472:	77 07                	ja     9f00247b <reallocI+0x7e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:185
        realSize=ALLOC_MIN_MALLOC_SIZE;
9f002474:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:188
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f00247b:	83 ec 0c             	sub    esp,0xc
9f00247e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002481:	e8 25 fd ff ff       	call   9f0021ab <mallocI>
9f002486:	83 c4 10             	add    esp,0x10
9f002489:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:189
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f00248c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00248f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002492:	83 ec 0c             	sub    esp,0xc
9f002495:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002498:	50                   	push   eax
9f002499:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00249c:	8d 83 68 fa ff ff    	lea    eax,[ebx-0x598]
9f0024a2:	50                   	push   eax
9f0024a3:	68 00 00 00 01       	push   0x1000000
9f0024a8:	e8 2b f1 ff ff       	call   9f0015d8 <printdI>
9f0024ad:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:194
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f0024b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024b3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f0024b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0024b9:	39 c2                	cmp    edx,eax
9f0024bb:	0f 46 c2             	cmovbe eax,edx
9f0024be:	83 ec 04             	sub    esp,0x4
9f0024c1:	50                   	push   eax
9f0024c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0024c5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0024c8:	e8 a3 00 00 00       	call   9f002570 <memcpyI>
9f0024cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:195
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer 0x%08x with old pointer data and cleared out remaing if applicable\n",fnewptr);
9f0024d0:	83 ec 04             	sub    esp,0x4
9f0024d3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0024d6:	8d 83 c0 fa ff ff    	lea    eax,[ebx-0x540]
9f0024dc:	50                   	push   eax
9f0024dd:	68 00 00 00 01       	push   0x1000000
9f0024e2:	e8 f1 f0 ff ff       	call   9f0015d8 <printdI>
9f0024e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198
    
   //free old pointer
    freeI(foldptr);
9f0024ea:	83 ec 0c             	sub    esp,0xc
9f0024ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0024f0:	e8 7e fb ff ff       	call   9f002073 <freeI>
9f0024f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:199
    return fnewptr;
9f0024f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:200
}
9f0024fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0024fe:	c9                   	leave  
9f0024ff:	c3                   	ret    

9f002500 <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:203

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f002500:	55                   	push   ebp
9f002501:	89 e5                	mov    ebp,esp
9f002503:	83 ec 08             	sub    esp,0x8
9f002506:	e8 53 23 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00250b:	05 91 4c 00 00       	add    eax,0x4c91
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:204
    return reallocI(foldptr, newlen);
9f002510:	83 ec 08             	sub    esp,0x8
9f002513:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002516:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002519:	e8 df fe ff ff       	call   9f0023fd <reallocI>
9f00251e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:205
}
9f002521:	c9                   	leave  
9f002522:	c3                   	ret    

9f002523 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:208

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f002523:	55                   	push   ebp
9f002524:	89 e5                	mov    ebp,esp
9f002526:	e8 33 23 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00252b:	05 71 4c 00 00       	add    eax,0x4c71
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:209
    freeI(fpointer);
9f002530:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002533:	e8 3b fb ff ff       	call   9f002073 <freeI>
9f002538:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:210
}
9f00253b:	90                   	nop
9f00253c:	c9                   	leave  
9f00253d:	c3                   	ret    

9f00253e <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:213

void malloc_cleanup()
{
9f00253e:	55                   	push   ebp
9f00253f:	89 e5                	mov    ebp,esp
9f002541:	53                   	push   ebx
9f002542:	83 ec 04             	sub    esp,0x4
9f002545:	e8 14 23 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00254a:	05 52 4c 00 00       	add    eax,0x4c52
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:214
    do_syscall1(SYSCALL_FREE, heapBase);
9f00254f:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002555:	8b 12                	mov    edx,DWORD PTR [edx]
9f002557:	83 ec 08             	sub    esp,0x8
9f00255a:	52                   	push   edx
9f00255b:	68 64 01 00 00       	push   0x164
9f002560:	89 c3                	mov    ebx,eax
9f002562:	e8 95 ed ff ff       	call   9f0012fc <do_syscall1>
9f002567:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:215
9f00256a:	90                   	nop
9f00256b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00256e:	c9                   	leave  
9f00256f:	c3                   	ret    

9f002570 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f002570:	55                   	push   ebp
9f002571:	89 e5                	mov    ebp,esp
9f002573:	83 ec 20             	sub    esp,0x20
9f002576:	e8 e3 22 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00257b:	05 21 4c 00 00       	add    eax,0x4c21
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f002580:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002583:	83 e0 03             	and    eax,0x3
9f002586:	85 c0                	test   eax,eax
9f002588:	0f 94 c0             	sete   al
9f00258b:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f00258e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002591:	83 e0 01             	and    eax,0x1
9f002594:	85 c0                	test   eax,eax
9f002596:	0f 94 c0             	sete   al
9f002599:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f00259c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f0025a0:	74 7d                	je     9f00261f <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f0025a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025a5:	c1 e8 02             	shr    eax,0x2
9f0025a8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f0025ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0025ae:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f0025b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0025b4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f0025b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0025ba:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0025bd:	73 4b                	jae    9f00260a <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f0025bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025c2:	c1 e0 02             	shl    eax,0x2
9f0025c5:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f0025c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025cb:	c1 e0 02             	shl    eax,0x2
9f0025ce:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f0025d1:	eb 12                	jmp    9f0025e5 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f0025d3:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f0025d7:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f0025db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0025de:	8b 10                	mov    edx,DWORD PTR [eax]
9f0025e0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0025e3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0025e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025e8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0025eb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0025ee:	85 c0                	test   eax,eax
9f0025f0:	75 e1                	jne    9f0025d3 <memcpyI+0x63>
9f0025f2:	eb 23                	jmp    9f002617 <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0025f4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0025f7:	8d 50 04             	lea    edx,[eax+0x4]
9f0025fa:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0025fd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002600:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002603:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f002606:	8b 12                	mov    edx,DWORD PTR [edx]
9f002608:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f00260a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00260d:	8d 50 ff             	lea    edx,[eax-0x1]
9f002610:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002613:	85 c0                	test   eax,eax
9f002615:	75 dd                	jne    9f0025f4 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f002617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00261a:	e9 ea 00 00 00       	jmp    9f002709 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f00261f:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f002623:	74 79                	je     9f00269e <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f002625:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002628:	d1 e8                	shr    eax,1
9f00262a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f00262d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002630:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f002633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002636:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f002639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00263c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00263f:	73 4b                	jae    9f00268c <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f002641:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002644:	c1 e0 02             	shl    eax,0x2
9f002647:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f00264a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00264d:	c1 e0 02             	shl    eax,0x2
9f002650:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f002653:	eb 12                	jmp    9f002667 <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f002655:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f002659:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f00265d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002660:	8b 10                	mov    edx,DWORD PTR [eax]
9f002662:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002665:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f002667:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00266a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00266d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002670:	85 c0                	test   eax,eax
9f002672:	75 e1                	jne    9f002655 <memcpyI+0xe5>
9f002674:	eb 23                	jmp    9f002699 <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f002676:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002679:	8d 50 04             	lea    edx,[eax+0x4]
9f00267c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f00267f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002682:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002685:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f002688:	8b 12                	mov    edx,DWORD PTR [edx]
9f00268a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f00268c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00268f:	8d 50 ff             	lea    edx,[eax-0x1]
9f002692:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002695:	85 c0                	test   eax,eax
9f002697:	75 dd                	jne    9f002676 <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f002699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00269c:	eb 6b                	jmp    9f002709 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f00269e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0026a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f0026a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026a7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f0026aa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0026ad:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0026b0:	73 47                	jae    9f0026f9 <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f0026b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026b5:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f0026b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026bb:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f0026be:	eb 13                	jmp    9f0026d3 <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f0026c0:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f0026c4:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f0026c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0026cb:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0026ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0026d1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f0026d3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026d6:	8d 50 ff             	lea    edx,[eax-0x1]
9f0026d9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0026dc:	85 c0                	test   eax,eax
9f0026de:	75 e0                	jne    9f0026c0 <memcpyI+0x150>
9f0026e0:	eb 24                	jmp    9f002706 <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f0026e2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0026e5:	8d 50 01             	lea    edx,[eax+0x1]
9f0026e8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0026eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0026ee:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0026f1:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f0026f4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0026f7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f0026f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026fc:	8d 50 ff             	lea    edx,[eax-0x1]
9f0026ff:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002702:	85 c0                	test   eax,eax
9f002704:	75 dc                	jne    9f0026e2 <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f002706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f002709:	c9                   	leave  
9f00270a:	c3                   	ret    

9f00270b <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f00270b:	55                   	push   ebp
9f00270c:	89 e5                	mov    ebp,esp
9f00270e:	e8 4b 21 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f002713:	05 89 4a 00 00       	add    eax,0x4a89
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f002718:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00271b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00271e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002721:	e8 4a fe ff ff       	call   9f002570 <memcpyI>
9f002726:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f002729:	c9                   	leave  
9f00272a:	c3                   	ret    
9f00272b:	90                   	nop

9f00272c <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f00272c:	55                   	push   ebp
9f00272d:	89 e5                	mov    ebp,esp
9f00272f:	83 ec 20             	sub    esp,0x20
9f002732:	e8 27 21 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f002737:	05 65 4a 00 00       	add    eax,0x4a65
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f00273c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00273f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f002742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002745:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f002748:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00274b:	c1 e0 10             	shl    eax,0x10
9f00274e:	89 c2                	mov    edx,eax
9f002750:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002753:	c1 e0 08             	shl    eax,0x8
9f002756:	09 c2                	or     edx,eax
9f002758:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00275b:	09 d0                	or     eax,edx
9f00275d:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f002761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002764:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f002767:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00276a:	c1 e0 18             	shl    eax,0x18
9f00276d:	89 c2                	mov    edx,eax
9f00276f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002772:	c1 e0 10             	shl    eax,0x10
9f002775:	09 c2                	or     edx,eax
9f002777:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00277a:	c1 e0 08             	shl    eax,0x8
9f00277d:	09 d0                	or     eax,edx
9f00277f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f002782:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f002785:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002788:	83 e0 03             	and    eax,0x3
9f00278b:	85 c0                	test   eax,eax
9f00278d:	75 1c                	jne    9f0027ab <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f00278f:	eb 0e                	jmp    9f00279f <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f002791:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002794:	8d 50 04             	lea    edx,[eax+0x4]
9f002797:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00279a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00279d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f00279f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f0027a3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0027a7:	75 e8                	jne    9f002791 <memsetI+0x65>
9f0027a9:	eb 43                	jmp    9f0027ee <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f0027ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027ae:	83 e0 01             	and    eax,0x1
9f0027b1:	85 c0                	test   eax,eax
9f0027b3:	75 2c                	jne    9f0027e1 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f0027b5:	eb 10                	jmp    9f0027c7 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f0027b7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0027ba:	8d 50 02             	lea    edx,[eax+0x2]
9f0027bd:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0027c0:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f0027c4:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f0027c7:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f0027cb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0027cf:	75 e6                	jne    9f0027b7 <memsetI+0x8b>
9f0027d1:	eb 1b                	jmp    9f0027ee <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f0027d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0027d6:	8d 50 01             	lea    edx,[eax+0x1]
9f0027d9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0027dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0027df:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f0027e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027e4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0027e7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0027ea:	85 c0                	test   eax,eax
9f0027ec:	75 e5                	jne    9f0027d3 <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f0027ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f0027f1:	c9                   	leave  
9f0027f2:	c3                   	ret    

9f0027f3 <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f0027f3:	55                   	push   ebp
9f0027f4:	89 e5                	mov    ebp,esp
9f0027f6:	e8 63 20 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0027fb:	05 a1 49 00 00       	add    eax,0x49a1
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f002800:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002806:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002809:	e8 1e ff ff ff       	call   9f00272c <memsetI>
9f00280e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f002811:	c9                   	leave  
9f002812:	c3                   	ret    
9f002813:	90                   	nop

9f002814 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f002814:	55                   	push   ebp
9f002815:	89 e5                	mov    ebp,esp
9f002817:	53                   	push   ebx
9f002818:	83 ec 04             	sub    esp,0x4
9f00281b:	e8 3e 20 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f002820:	05 7c 49 00 00       	add    eax,0x497c
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f002825:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002828:	83 ec 08             	sub    esp,0x8
9f00282b:	52                   	push   edx
9f00282c:	6a 0e                	push   0xe
9f00282e:	89 c3                	mov    ebx,eax
9f002830:	e8 c7 ea ff ff       	call   9f0012fc <do_syscall1>
9f002835:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f002838:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00283b:	c9                   	leave  
9f00283c:	c3                   	ret    

9f00283d <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f00283d:	55                   	push   ebp
9f00283e:	89 e5                	mov    ebp,esp
9f002840:	53                   	push   ebx
9f002841:	83 ec 04             	sub    esp,0x4
9f002844:	e8 15 20 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f002849:	05 53 49 00 00       	add    eax,0x4953
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f00284e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f002851:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002854:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002857:	53                   	push   ebx
9f002858:	51                   	push   ecx
9f002859:	52                   	push   edx
9f00285a:	6a 0f                	push   0xf
9f00285c:	89 c3                	mov    ebx,eax
9f00285e:	e8 1f ea ff ff       	call   9f001282 <do_syscall3>
9f002863:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f002866:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002869:	c9                   	leave  
9f00286a:	c3                   	ret    
9f00286b:	90                   	nop

9f00286c <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f00286c:	55                   	push   ebp
9f00286d:	89 e5                	mov    ebp,esp
9f00286f:	53                   	push   ebx
9f002870:	83 ec 10             	sub    esp,0x10
9f002873:	e8 e6 1f 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f002878:	05 24 49 00 00       	add    eax,0x4924
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f00287d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f002884:	eb 29                	jmp    9f0028af <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f002886:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002889:	89 d0                	mov    eax,edx
9f00288b:	c1 e0 02             	shl    eax,0x2
9f00288e:	01 d0                	add    eax,edx
9f002890:	01 c0                	add    eax,eax
9f002892:	89 c3                	mov    ebx,eax
9f002894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002897:	8b 00                	mov    eax,DWORD PTR [eax]
9f002899:	8d 48 01             	lea    ecx,[eax+0x1]
9f00289c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00289f:	89 0a                	mov    DWORD PTR [edx],ecx
9f0028a1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028a4:	0f be c0             	movsx  eax,al
9f0028a7:	01 d8                	add    eax,ebx
9f0028a9:	83 e8 30             	sub    eax,0x30
9f0028ac:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f0028af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028b2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0028b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028b7:	0f be c0             	movsx  eax,al
9f0028ba:	83 e8 30             	sub    eax,0x30
9f0028bd:	83 f8 09             	cmp    eax,0x9
9f0028c0:	76 c4                	jbe    9f002886 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f0028c2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f0028c5:	83 c4 10             	add    esp,0x10
9f0028c8:	5b                   	pop    ebx
9f0028c9:	5d                   	pop    ebp
9f0028ca:	c3                   	ret    

9f0028cb <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f0028cb:	55                   	push   ebp
9f0028cc:	89 e5                	mov    ebp,esp
9f0028ce:	56                   	push   esi
9f0028cf:	53                   	push   ebx
9f0028d0:	83 ec 60             	sub    esp,0x60
9f0028d3:	e8 c8 1f 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0028d8:	81 c3 c4 48 00 00    	add    ebx,0x48c4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f0028de:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0028e1:	83 e0 20             	and    eax,0x20
9f0028e4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f0028e7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0028ea:	83 e0 10             	and    eax,0x10
9f0028ed:	85 c0                	test   eax,eax
9f0028ef:	74 04                	je     9f0028f5 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f0028f1:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f0028f5:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0028f9:	7e 06                	jle    9f002901 <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f0028fb:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0028ff:	7e 0a                	jle    9f00290b <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f002901:	b8 00 00 00 00       	mov    eax,0x0
9f002906:	e9 f7 01 00 00       	jmp    9f002b02 <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f00290b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00290e:	83 e0 01             	and    eax,0x1
9f002911:	85 c0                	test   eax,eax
9f002913:	74 07                	je     9f00291c <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f002915:	b8 30 00 00 00       	mov    eax,0x30
9f00291a:	eb 05                	jmp    9f002921 <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f00291c:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f002921:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f002924:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f002928:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00292b:	83 e0 02             	and    eax,0x2
9f00292e:	85 c0                	test   eax,eax
9f002930:	74 39                	je     9f00296b <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f002932:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002936:	79 0d                	jns    9f002945 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f002938:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f00293c:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f00293f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f002943:	eb 26                	jmp    9f00296b <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f002945:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002948:	83 e0 04             	and    eax,0x4
9f00294b:	85 c0                	test   eax,eax
9f00294d:	74 0a                	je     9f002959 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f00294f:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f002953:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f002957:	eb 12                	jmp    9f00296b <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f002959:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00295c:	83 e0 08             	and    eax,0x8
9f00295f:	85 c0                	test   eax,eax
9f002961:	74 08                	je     9f00296b <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f002963:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f002967:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f00296b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00296e:	83 e0 40             	and    eax,0x40
9f002971:	85 c0                	test   eax,eax
9f002973:	74 16                	je     9f00298b <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f002975:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002979:	75 06                	jne    9f002981 <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f00297b:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f00297f:	eb 0a                	jmp    9f00298b <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f002981:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f002985:	75 04                	jne    9f00298b <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f002987:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f00298b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f002992:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002996:	75 4d                	jne    9f0029e5 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f002998:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00299b:	8d 50 01             	lea    edx,[eax+0x1]
9f00299e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0029a1:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f0029a6:	eb 43                	jmp    9f0029eb <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f0029a8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0029ab:	8d 41 01             	lea    eax,[ecx+0x1]
9f0029ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0029b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029b4:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0029b7:	ba 00 00 00 00       	mov    edx,0x0
9f0029bc:	f7 f6                	div    esi
9f0029be:	89 d0                	mov    eax,edx
9f0029c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0029c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029c6:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0029c9:	ba 00 00 00 00       	mov    edx,0x0
9f0029ce:	f7 f6                	div    esi
9f0029d0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f0029d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0029d6:	0f b6 84 03 bc fc ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x344]
9f0029dd:	ff 
9f0029de:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f0029e1:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f0029e5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0029e9:	75 bd                	jne    9f0029a8 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f0029eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0029ee:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f0029f1:	7e 06                	jle    9f0029f9 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f0029f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0029f6:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f0029f9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0029fc:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f0029ff:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002a02:	83 e0 11             	and    eax,0x11
9f002a05:	85 c0                	test   eax,eax
9f002a07:	75 1b                	jne    9f002a24 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f002a09:	eb 0c                	jmp    9f002a17 <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f002a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a0e:	8d 50 01             	lea    edx,[eax+0x1]
9f002a11:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a14:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f002a17:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002a1a:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a1d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002a20:	85 c0                	test   eax,eax
9f002a22:	7f e7                	jg     9f002a0b <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f002a24:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f002a28:	74 0f                	je     9f002a39 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f002a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a2d:	8d 50 01             	lea    edx,[eax+0x1]
9f002a30:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a33:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f002a37:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f002a39:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002a3c:	83 e0 40             	and    eax,0x40
9f002a3f:	85 c0                	test   eax,eax
9f002a41:	74 38                	je     9f002a7b <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f002a43:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f002a47:	75 0e                	jne    9f002a57 <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f002a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a4c:	8d 50 01             	lea    edx,[eax+0x1]
9f002a4f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a52:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f002a55:	eb 24                	jmp    9f002a7b <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f002a57:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002a5b:	75 1e                	jne    9f002a7b <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f002a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a60:	8d 50 01             	lea    edx,[eax+0x1]
9f002a63:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a66:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f002a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a6c:	8d 50 01             	lea    edx,[eax+0x1]
9f002a6f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a72:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f002a76:	83 ca 58             	or     edx,0x58
9f002a79:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f002a7b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002a7e:	83 e0 10             	and    eax,0x10
9f002a81:	85 c0                	test   eax,eax
9f002a83:	75 2c                	jne    9f002ab1 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f002a85:	eb 0f                	jmp    9f002a96 <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f002a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a8a:	8d 50 01             	lea    edx,[eax+0x1]
9f002a8d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a90:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f002a94:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f002a96:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002a99:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a9c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002a9f:	85 c0                	test   eax,eax
9f002aa1:	7f e4                	jg     9f002a87 <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f002aa3:	eb 0c                	jmp    9f002ab1 <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f002aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002aa8:	8d 50 01             	lea    edx,[eax+0x1]
9f002aab:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002aae:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f002ab1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f002ab4:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ab7:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f002aba:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002abd:	7f e6                	jg     9f002aa5 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f002abf:	eb 16                	jmp    9f002ad7 <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f002ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ac4:	8d 50 01             	lea    edx,[eax+0x1]
9f002ac7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002aca:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f002acd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002ad0:	01 ca                	add    edx,ecx
9f002ad2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002ad5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f002ad7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002ada:	8d 50 ff             	lea    edx,[eax-0x1]
9f002add:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002ae0:	85 c0                	test   eax,eax
9f002ae2:	7f dd                	jg     9f002ac1 <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f002ae4:	eb 0c                	jmp    9f002af2 <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f002ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ae9:	8d 50 01             	lea    edx,[eax+0x1]
9f002aec:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002aef:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f002af2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002af5:	8d 50 ff             	lea    edx,[eax-0x1]
9f002af8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002afb:	85 c0                	test   eax,eax
9f002afd:	7f e7                	jg     9f002ae6 <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f002aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f002b02:	83 c4 60             	add    esp,0x60
9f002b05:	5b                   	pop    ebx
9f002b06:	5e                   	pop    esi
9f002b07:	5d                   	pop    ebp
9f002b08:	c3                   	ret    

9f002b09 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f002b09:	55                   	push   ebp
9f002b0a:	89 e5                	mov    ebp,esp
9f002b0c:	53                   	push   ebx
9f002b0d:	83 ec 34             	sub    esp,0x34
9f002b10:	e8 8b 1d 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f002b15:	81 c3 87 46 00 00    	add    ebx,0x4687
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b1e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f002b21:	e9 08 04 00 00       	jmp    9f002f2e <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f002b26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b2c:	3c 25                	cmp    al,0x25
9f002b2e:	74 16                	je     9f002b46 <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f002b30:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002b33:	8d 50 01             	lea    edx,[eax+0x1]
9f002b36:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002b39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002b3c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002b3f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f002b41:	e9 df 03 00 00       	jmp    9f002f25 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f002b46:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f002b4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b50:	83 c0 01             	add    eax,0x1
9f002b53:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f002b56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b5c:	0f be c0             	movsx  eax,al
9f002b5f:	83 e8 20             	sub    eax,0x20
9f002b62:	83 f8 10             	cmp    eax,0x10
9f002b65:	77 2c                	ja     9f002b93 <.L43>
9f002b67:	c1 e0 02             	shl    eax,0x2
9f002b6a:	8b 84 18 28 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4d8]
9f002b71:	01 d8                	add    eax,ebx
9f002b73:	ff e0                	jmp    eax

9f002b75 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f002b75:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f002b79:	eb d2                	jmp    9f002b4d <vsprintf+0x44>

9f002b7b <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f002b7b:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f002b7f:	eb cc                	jmp    9f002b4d <vsprintf+0x44>

9f002b81 <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f002b81:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f002b85:	eb c6                	jmp    9f002b4d <vsprintf+0x44>

9f002b87 <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f002b87:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f002b8b:	eb c0                	jmp    9f002b4d <vsprintf+0x44>

9f002b8d <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f002b8d:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f002b91:	eb ba                	jmp    9f002b4d <vsprintf+0x44>

9f002b93 <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f002b93:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f002b9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b9d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ba0:	0f be c0             	movsx  eax,al
9f002ba3:	83 e8 30             	sub    eax,0x30
9f002ba6:	83 f8 09             	cmp    eax,0x9
9f002ba9:	77 11                	ja     9f002bbc <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f002bab:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002bae:	50                   	push   eax
9f002baf:	e8 b8 fc ff ff       	call   9f00286c <skip_atoi>
9f002bb4:	83 c4 04             	add    esp,0x4
9f002bb7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f002bba:	eb 2e                	jmp    9f002bea <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f002bbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bbf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bc2:	3c 2a                	cmp    al,0x2a
9f002bc4:	75 24                	jne    9f002bea <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f002bc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bc9:	83 c0 01             	add    eax,0x1
9f002bcc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f002bcf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002bd2:	8d 50 04             	lea    edx,[eax+0x4]
9f002bd5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002bd8:	8b 00                	mov    eax,DWORD PTR [eax]
9f002bda:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f002bdd:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002be1:	79 07                	jns    9f002bea <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f002be3:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f002be6:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f002bea:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f002bf1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bf4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bf7:	3c 2e                	cmp    al,0x2e
9f002bf9:	75 59                	jne    9f002c54 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f002bfb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bfe:	83 c0 01             	add    eax,0x1
9f002c01:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f002c04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c07:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c0a:	0f be c0             	movsx  eax,al
9f002c0d:	83 e8 30             	sub    eax,0x30
9f002c10:	83 f8 09             	cmp    eax,0x9
9f002c13:	77 11                	ja     9f002c26 <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f002c15:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002c18:	50                   	push   eax
9f002c19:	e8 4e fc ff ff       	call   9f00286c <skip_atoi>
9f002c1e:	83 c4 04             	add    esp,0x4
9f002c21:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f002c24:	eb 21                	jmp    9f002c47 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f002c26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c2c:	3c 2a                	cmp    al,0x2a
9f002c2e:	75 17                	jne    9f002c47 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f002c30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c33:	83 c0 01             	add    eax,0x1
9f002c36:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f002c39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002c3c:	8d 50 04             	lea    edx,[eax+0x4]
9f002c3f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002c42:	8b 00                	mov    eax,DWORD PTR [eax]
9f002c44:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f002c47:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f002c4b:	79 07                	jns    9f002c54 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f002c4d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f002c54:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f002c5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c5e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c61:	3c 68                	cmp    al,0x68
9f002c63:	74 14                	je     9f002c79 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f002c65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c6b:	3c 6c                	cmp    al,0x6c
9f002c6d:	74 0a                	je     9f002c79 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f002c6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c72:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c75:	3c 4c                	cmp    al,0x4c
9f002c77:	75 15                	jne    9f002c8e <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f002c79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c7c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c7f:	0f be c0             	movsx  eax,al
9f002c82:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f002c85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c88:	83 c0 01             	add    eax,0x1
9f002c8b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f002c8e:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f002c95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c9b:	0f be c0             	movsx  eax,al
9f002c9e:	83 e8 25             	sub    eax,0x25
9f002ca1:	83 f8 53             	cmp    eax,0x53
9f002ca4:	0f 87 b5 01 00 00    	ja     9f002e5f <.L57>
9f002caa:	c1 e0 02             	shl    eax,0x2
9f002cad:	8b 84 18 6c fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x494]
9f002cb4:	01 d8                	add    eax,ebx
9f002cb6:	ff e0                	jmp    eax

9f002cb8 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f002cb8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002cbb:	83 e0 10             	and    eax,0x10
9f002cbe:	85 c0                	test   eax,eax
9f002cc0:	75 18                	jne    9f002cda <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f002cc2:	eb 0c                	jmp    9f002cd0 <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f002cc4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002cc7:	8d 50 01             	lea    edx,[eax+0x1]
9f002cca:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002ccd:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f002cd0:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002cd4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002cd8:	7f ea                	jg     9f002cc4 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f002cda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002cdd:	8d 50 01             	lea    edx,[eax+0x1]
9f002ce0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002ce3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f002ce6:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002ce9:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f002cec:	8b 12                	mov    edx,DWORD PTR [edx]
9f002cee:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f002cf0:	eb 0c                	jmp    9f002cfe <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f002cf2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002cf5:	8d 50 01             	lea    edx,[eax+0x1]
9f002cf8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002cfb:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f002cfe:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002d02:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002d06:	7f ea                	jg     9f002cf2 <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f002d08:	e9 18 02 00 00       	jmp    9f002f25 <.L96+0x8c>

9f002d0d <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f002d0d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002d10:	8d 50 04             	lea    edx,[eax+0x4]
9f002d13:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002d16:	8b 00                	mov    eax,DWORD PTR [eax]
9f002d18:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f002d1b:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f002d1f:	74 13                	je     9f002d34 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f002d21:	83 ec 0c             	sub    esp,0xc
9f002d24:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f002d27:	e8 c0 05 00 00       	call   9f0032ec <strlenI>
9f002d2c:	83 c4 10             	add    esp,0x10
9f002d2f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f002d32:	eb 07                	jmp    9f002d3b <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f002d34:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f002d3b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002d3e:	83 e0 10             	and    eax,0x10
9f002d41:	85 c0                	test   eax,eax
9f002d43:	75 1c                	jne    9f002d61 <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f002d45:	eb 0c                	jmp    9f002d53 <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f002d47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d4a:	8d 50 01             	lea    edx,[eax+0x1]
9f002d4d:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d50:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f002d53:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002d56:	8d 50 ff             	lea    edx,[eax-0x1]
9f002d59:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002d5c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002d5f:	7f e6                	jg     9f002d47 <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002d61:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f002d68:	eb 1b                	jmp    9f002d85 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f002d6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d6d:	8d 50 01             	lea    edx,[eax+0x1]
9f002d70:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d73:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f002d76:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002d79:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f002d7c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002d7f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002d81:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f002d85:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002d88:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002d8b:	7c dd                	jl     9f002d6a <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f002d8d:	eb 0c                	jmp    9f002d9b <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f002d8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d92:	8d 50 01             	lea    edx,[eax+0x1]
9f002d95:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d98:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f002d9b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002d9e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002da1:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002da4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002da7:	7f e6                	jg     9f002d8f <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f002da9:	e9 77 01 00 00       	jmp    9f002f25 <.L96+0x8c>

9f002dae <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f002dae:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f002db2:	75 0b                	jne    9f002dbf <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f002db4:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f002dbb:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f002dbf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002dc2:	8d 50 04             	lea    edx,[eax+0x4]
9f002dc5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002dc8:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f002dca:	83 ec 08             	sub    esp,0x8
9f002dcd:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002dd0:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002dd3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002dd6:	6a 10                	push   0x10
9f002dd8:	50                   	push   eax
9f002dd9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002ddc:	e8 ea fa ff ff       	call   9f0028cb <number>
9f002de1:	83 c4 20             	add    esp,0x20
9f002de4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f002de7:	e9 39 01 00 00       	jmp    9f002f25 <.L96+0x8c>

9f002dec <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f002dec:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002df0:	75 20                	jne    9f002e12 <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f002df2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002df5:	8d 50 04             	lea    edx,[eax+0x4]
9f002df8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002dfb:	8b 00                	mov    eax,DWORD PTR [eax]
9f002dfd:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f002e00:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e06:	29 c2                	sub    edx,eax
9f002e08:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f002e0b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f002e0d:	e9 13 01 00 00       	jmp    9f002f25 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f002e12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002e15:	8d 50 04             	lea    edx,[eax+0x4]
9f002e18:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002e1b:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e1d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f002e20:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e26:	29 c2                	sub    edx,eax
9f002e28:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f002e2b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f002e2d:	e9 f3 00 00 00       	jmp    9f002f25 <.L96+0x8c>

9f002e32 <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f002e32:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002e35:	8d 50 01             	lea    edx,[eax+0x1]
9f002e38:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002e3b:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f002e3e:	e9 e2 00 00 00       	jmp    9f002f25 <.L96+0x8c>

9f002e43 <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f002e43:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f002e4a:	eb 4e                	jmp    9f002e9a <.L96+0x1>

9f002e4c <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f002e4c:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f002e50 <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f002e50:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f002e57:	eb 41                	jmp    9f002e9a <.L96+0x1>

9f002e59 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f002e59:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f002e5d:	eb 3a                	jmp    9f002e99 <.L96>

9f002e5f <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f002e5f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002e62:	8d 50 01             	lea    edx,[eax+0x1]
9f002e65:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002e68:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f002e6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002e6e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002e71:	84 c0                	test   al,al
9f002e73:	74 16                	je     9f002e8b <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f002e75:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002e78:	8d 50 01             	lea    edx,[eax+0x1]
9f002e7b:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002e7e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002e81:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002e84:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f002e86:	e9 9a 00 00 00       	jmp    9f002f25 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f002e8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002e8e:	83 e8 01             	sub    eax,0x1
9f002e91:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f002e94:	e9 8c 00 00 00       	jmp    9f002f25 <.L96+0x8c>

9f002e99 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f002e99:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f002e9a:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002e9e:	75 10                	jne    9f002eb0 <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f002ea0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ea3:	8d 50 04             	lea    edx,[eax+0x4]
9f002ea6:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002ea9:	8b 00                	mov    eax,DWORD PTR [eax]
9f002eab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002eae:	eb 54                	jmp    9f002f04 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f002eb0:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f002eb4:	75 26                	jne    9f002edc <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f002eb6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002eb9:	8d 50 04             	lea    edx,[eax+0x4]
9f002ebc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002ebf:	8b 00                	mov    eax,DWORD PTR [eax]
9f002ec1:	25 ff ff 00 00       	and    eax,0xffff
9f002ec6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f002ec9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002ecc:	83 e0 02             	and    eax,0x2
9f002ecf:	85 c0                	test   eax,eax
9f002ed1:	74 31                	je     9f002f04 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f002ed3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002ed6:	98                   	cwde   
9f002ed7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002eda:	eb 28                	jmp    9f002f04 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f002edc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002edf:	83 e0 02             	and    eax,0x2
9f002ee2:	85 c0                	test   eax,eax
9f002ee4:	74 10                	je     9f002ef6 <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f002ee6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ee9:	8d 50 04             	lea    edx,[eax+0x4]
9f002eec:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002eef:	8b 00                	mov    eax,DWORD PTR [eax]
9f002ef1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002ef4:	eb 0e                	jmp    9f002f04 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f002ef6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ef9:	8d 50 04             	lea    edx,[eax+0x4]
9f002efc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002eff:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f01:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f002f04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002f07:	83 ec 08             	sub    esp,0x8
9f002f0a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002f0d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002f10:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002f13:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002f16:	50                   	push   eax
9f002f17:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002f1a:	e8 ac f9 ff ff       	call   9f0028cb <number>
9f002f1f:	83 c4 20             	add    esp,0x20
9f002f22:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002f25:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002f28:	83 c0 01             	add    eax,0x1
9f002f2b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f002f2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002f31:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002f34:	84 c0                	test   al,al
9f002f36:	0f 85 ea fb ff ff    	jne    9f002b26 <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f002f3c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002f3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f002f42:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002f45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f48:	29 c2                	sub    edx,eax
9f002f4a:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f002f4c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002f4f:	c9                   	leave  
9f002f50:	c3                   	ret    

9f002f51 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

VISIBLE int sprintf(char *buf, const char *fmt, ...)
{
9f002f51:	55                   	push   ebp
9f002f52:	89 e5                	mov    ebp,esp
9f002f54:	83 ec 18             	sub    esp,0x18
9f002f57:	e8 02 19 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f002f5c:	05 40 42 00 00       	add    eax,0x4240
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f002f61:	8d 45 10             	lea    eax,[ebp+0x10]
9f002f64:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f002f67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002f6a:	83 ec 04             	sub    esp,0x4
9f002f6d:	50                   	push   eax
9f002f6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f74:	e8 90 fb ff ff       	call   9f002b09 <vsprintf>
9f002f79:	83 c4 10             	add    esp,0x10
9f002f7c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f002f7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f002f82:	c9                   	leave  
9f002f83:	c3                   	ret    

9f002f84 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:17
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f002f84:	55                   	push   ebp
9f002f85:	89 e5                	mov    ebp,esp
9f002f87:	53                   	push   ebx
9f002f88:	83 ec 14             	sub    esp,0x14
9f002f8b:	e8 10 19 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f002f90:	81 c3 0c 42 00 00    	add    ebx,0x420c
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
    char buff[5];
    int buffPtr=0;
9f002f96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21

    memsetI(buff,0,10);
9f002f9d:	83 ec 04             	sub    esp,0x4
9f002fa0:	6a 0a                	push   0xa
9f002fa2:	6a 00                	push   0x0
9f002fa4:	8d 45 ef             	lea    eax,[ebp-0x11]
9f002fa7:	50                   	push   eax
9f002fa8:	e8 7f f7 ff ff       	call   9f00272c <memsetI>
9f002fad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f002fb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fb3:	8d 50 01             	lea    edx,[eax+0x1]
9f002fb6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fb9:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    buff[buffPtr++] = '[';
9f002fbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fc1:	8d 50 01             	lea    edx,[eax+0x1]
9f002fc4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fc7:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '0';
9f002fcc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fcf:	8d 50 01             	lea    edx,[eax+0x1]
9f002fd2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fd5:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = 'K';
9f002fda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fdd:	8d 50 01             	lea    edx,[eax+0x1]
9f002fe0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fe3:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr] = '\0';
9f002fe8:	8d 55 ef             	lea    edx,[ebp-0x11]
9f002feb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fee:	01 d0                	add    eax,edx
9f002ff0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    printI(buff);
9f002ff3:	83 ec 0c             	sub    esp,0xc
9f002ff6:	8d 45 ef             	lea    eax,[ebp-0x11]
9f002ff9:	50                   	push   eax
9f002ffa:	e8 6e e5 ff ff       	call   9f00156d <printI>
9f002fff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:31
    
    return;
9f003002:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
}
9f003003:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003006:	c9                   	leave  
9f003007:	c3                   	ret    

9f003008 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f003008:	55                   	push   ebp
9f003009:	89 e5                	mov    ebp,esp
9f00300b:	53                   	push   ebx
9f00300c:	83 ec 04             	sub    esp,0x4
9f00300f:	e8 8c 18 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f003014:	81 c3 88 41 00 00    	add    ebx,0x4188
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f00301a:	83 ec 0c             	sub    esp,0xc
9f00301d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003020:	e8 c7 02 00 00       	call   9f0032ec <strlenI>
9f003025:	83 c4 10             	add    esp,0x10
9f003028:	89 c2                	mov    edx,eax
9f00302a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00302d:	01 d0                	add    eax,edx
9f00302f:	83 ec 08             	sub    esp,0x8
9f003032:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003035:	50                   	push   eax
9f003036:	e8 9d 01 00 00       	call   9f0031d8 <strcpyI>
9f00303b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f00303e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f003041:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003044:	c9                   	leave  
9f003045:	c3                   	ret    

9f003046 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f003046:	55                   	push   ebp
9f003047:	89 e5                	mov    ebp,esp
9f003049:	53                   	push   ebx
9f00304a:	83 ec 04             	sub    esp,0x4
9f00304d:	e8 4e 18 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f003052:	81 c3 4a 41 00 00    	add    ebx,0x414a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f003058:	83 ec 0c             	sub    esp,0xc
9f00305b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00305e:	e8 89 02 00 00       	call   9f0032ec <strlenI>
9f003063:	83 c4 10             	add    esp,0x10
9f003066:	89 c2                	mov    edx,eax
9f003068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00306b:	01 d0                	add    eax,edx
9f00306d:	83 ec 08             	sub    esp,0x8
9f003070:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003073:	50                   	push   eax
9f003074:	e8 5f 01 00 00       	call   9f0031d8 <strcpyI>
9f003079:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f00307c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f00307f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003082:	c9                   	leave  
9f003083:	c3                   	ret    

9f003084 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:42
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f003084:	55                   	push   ebp
9f003085:	89 e5                	mov    ebp,esp
9f003087:	53                   	push   ebx
9f003088:	83 ec 14             	sub    esp,0x14
9f00308b:	e8 10 18 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f003090:	81 c3 0c 41 00 00    	add    ebx,0x410c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
    size_t bytesToCopy=0;
9f003096:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t srcStringLen=strlenI(src);;
9f00309d:	83 ec 0c             	sub    esp,0xc
9f0030a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0030a3:	e8 44 02 00 00       	call   9f0032ec <strlenI>
9f0030a8:	83 c4 10             	add    esp,0x10
9f0030ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
    
    if (n<=srcStringLen)
9f0030ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0030b1:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0030b4:	77 08                	ja     9f0030be <strncatI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
        bytesToCopy=n;
9f0030b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0030b9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0030bc:	eb 06                	jmp    9f0030c4 <strncatI+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:49
    else
        bytesToCopy=srcStringLen;
9f0030be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0030c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:51
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f0030c4:	83 ec 0c             	sub    esp,0xc
9f0030c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0030ca:	e8 1d 02 00 00       	call   9f0032ec <strlenI>
9f0030cf:	83 c4 10             	add    esp,0x10
9f0030d2:	89 c2                	mov    edx,eax
9f0030d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030d7:	01 d0                	add    eax,edx
9f0030d9:	83 ec 04             	sub    esp,0x4
9f0030dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0030df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0030e2:	50                   	push   eax
9f0030e3:	e8 78 03 00 00       	call   9f003460 <strncpyI>
9f0030e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
     return dest;
9f0030eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
}
9f0030ee:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0030f1:	c9                   	leave  
9f0030f2:	c3                   	ret    

9f0030f3 <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:56

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f0030f3:	55                   	push   ebp
9f0030f4:	89 e5                	mov    ebp,esp
9f0030f6:	83 ec 08             	sub    esp,0x8
9f0030f9:	e8 60 17 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0030fe:	05 9e 40 00 00       	add    eax,0x409e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57
    return strncatI(dest, src, n);
9f003103:	83 ec 04             	sub    esp,0x4
9f003106:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003109:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00310c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00310f:	e8 70 ff ff ff       	call   9f003084 <strncatI>
9f003114:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
9f003117:	c9                   	leave  
9f003118:	c3                   	ret    
9f003119:	66 90                	xchg   ax,ax
9f00311b:	90                   	nop

9f00311c <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f00311c:	55                   	push   ebp
9f00311d:	89 e5                	mov    ebp,esp
9f00311f:	56                   	push   esi
9f003120:	53                   	push   ebx
9f003121:	83 ec 10             	sub    esp,0x10
9f003124:	e8 35 17 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003129:	05 73 40 00 00       	add    eax,0x4073
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f00312e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f003131:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f003134:	89 d8                	mov    eax,ebx
9f003136:	8d 58 01             	lea    ebx,[eax+0x1]
9f003139:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00313c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f00313f:	89 f0                	mov    eax,esi
9f003141:	8d 70 01             	lea    esi,[eax+0x1]
9f003144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003147:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f00314a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f00314e:	75 0e                	jne    9f00315e <strcmpI+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f003150:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003154:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f003158:	29 c2                	sub    edx,eax
9f00315a:	89 d0                	mov    eax,edx
9f00315c:	eb 15                	jmp    9f003173 <strcmpI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f00315e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f003162:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f003165:	74 cd                	je     9f003134 <strcmpI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f003167:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f00316b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f00316f:	29 c2                	sub    edx,eax
9f003171:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f003173:	83 c4 10             	add    esp,0x10
9f003176:	5b                   	pop    ebx
9f003177:	5e                   	pop    esi
9f003178:	5d                   	pop    ebp
9f003179:	c3                   	ret    

9f00317a <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f00317a:	55                   	push   ebp
9f00317b:	89 e5                	mov    ebp,esp
9f00317d:	e8 dc 16 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003182:	05 1a 40 00 00       	add    eax,0x401a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f003187:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00318a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00318d:	e8 8a ff ff ff       	call   9f00311c <strcmpI>
9f003192:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f003195:	c9                   	leave  
9f003196:	c3                   	ret    
9f003197:	90                   	nop

9f003198 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f003198:	55                   	push   ebp
9f003199:	89 e5                	mov    ebp,esp
9f00319b:	83 ec 10             	sub    esp,0x10
9f00319e:	e8 bb 16 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0031a3:	05 f9 3f 00 00       	add    eax,0x3ff9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f0031a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f0031ae:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f0031af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0031b2:	8d 50 01             	lea    edx,[eax+0x1]
9f0031b5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0031b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0031bb:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0031be:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0031c1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0031c4:	88 10                	mov    BYTE PTR [eax],dl
9f0031c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0031c9:	84 c0                	test   al,al
9f0031cb:	75 e2                	jne    9f0031af <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f0031cd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0031d0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f0031d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f0031d6:	c9                   	leave  
9f0031d7:	c3                   	ret    

9f0031d8 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f0031d8:	55                   	push   ebp
9f0031d9:	89 e5                	mov    ebp,esp
9f0031db:	83 ec 10             	sub    esp,0x10
9f0031de:	e8 7b 16 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0031e3:	05 b9 3f 00 00       	add    eax,0x3fb9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f0031e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f0031ee:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f0031ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0031f2:	8d 50 01             	lea    edx,[eax+0x1]
9f0031f5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0031f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0031fb:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0031fe:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003201:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003204:	88 10                	mov    BYTE PTR [eax],dl
9f003206:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003209:	84 c0                	test   al,al
9f00320b:	75 e2                	jne    9f0031ef <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f00320d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003210:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f003213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f003216:	c9                   	leave  
9f003217:	c3                   	ret    

9f003218 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f003218:	55                   	push   ebp
9f003219:	89 e5                	mov    ebp,esp
9f00321b:	83 ec 10             	sub    esp,0x10
9f00321e:	e8 3b 16 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003223:	05 79 3f 00 00       	add    eax,0x3f79
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f003228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00322b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f00322e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f00322f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003232:	8d 50 01             	lea    edx,[eax+0x1]
9f003235:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003238:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00323b:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00323e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003241:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003244:	88 10                	mov    BYTE PTR [eax],dl
9f003246:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003249:	84 c0                	test   al,al
9f00324b:	74 0d                	je     9f00325a <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f00324d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003250:	8d 50 ff             	lea    edx,[eax-0x1]
9f003253:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003256:	85 c0                	test   eax,eax
9f003258:	75 d5                	jne    9f00322f <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f00325a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f00325d:	c9                   	leave  
9f00325e:	c3                   	ret    
9f00325f:	90                   	nop

9f003260 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f003260:	55                   	push   ebp
9f003261:	89 e5                	mov    ebp,esp
9f003263:	83 ec 04             	sub    esp,0x4
9f003266:	e8 f3 15 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00326b:	05 31 3f 00 00       	add    eax,0x3f31
9f003270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003273:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f003276:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f00327a:	7e 0d                	jle    9f003289 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f00327c:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f003280:	7f 07                	jg     9f003289 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f003282:	b8 01 00 00 00       	mov    eax,0x1
9f003287:	eb 05                	jmp    9f00328e <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f003289:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f00328e:	c9                   	leave  
9f00328f:	c3                   	ret    

9f003290 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f003290:	55                   	push   ebp
9f003291:	89 e5                	mov    ebp,esp
9f003293:	83 ec 10             	sub    esp,0x10
9f003296:	e8 c3 15 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00329b:	05 01 3f 00 00       	add    eax,0x3f01
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f0032a0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f0032a7:	eb 27                	jmp    9f0032d0 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f0032a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032ac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0032af:	89 c2                	mov    edx,eax
9f0032b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0032b4:	01 d0                	add    eax,edx
9f0032b6:	0f be c0             	movsx  eax,al
9f0032b9:	50                   	push   eax
9f0032ba:	e8 a1 ff ff ff       	call   9f003260 <check_digit>
9f0032bf:	83 c4 04             	add    esp,0x4
9f0032c2:	83 f0 01             	xor    eax,0x1
9f0032c5:	84 c0                	test   al,al
9f0032c7:	74 07                	je     9f0032d0 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f0032c9:	b8 00 00 00 00       	mov    eax,0x0
9f0032ce:	eb 17                	jmp    9f0032e7 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f0032d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0032d6:	0f be d0             	movsx  edx,al
9f0032d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0032dc:	01 d0                	add    eax,edx
9f0032de:	85 c0                	test   eax,eax
9f0032e0:	75 c7                	jne    9f0032a9 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f0032e2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f0032e7:	c9                   	leave  
9f0032e8:	c3                   	ret    
9f0032e9:	66 90                	xchg   ax,ax
9f0032eb:	90                   	nop

9f0032ec <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f0032ec:	55                   	push   ebp
9f0032ed:	89 e5                	mov    ebp,esp
9f0032ef:	83 ec 10             	sub    esp,0x10
9f0032f2:	e8 67 15 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0032f7:	05 a5 3e 00 00       	add    eax,0x3ea5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f0032fc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f003303:	eb 04                	jmp    9f003309 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f003305:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f003309:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00330c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00330f:	01 d0                	add    eax,edx
9f003311:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003314:	84 c0                	test   al,al
9f003316:	75 ed                	jne    9f003305 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f003318:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f00331b:	c9                   	leave  
9f00331c:	c3                   	ret    

9f00331d <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f00331d:	55                   	push   ebp
9f00331e:	89 e5                	mov    ebp,esp
9f003320:	e8 39 15 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003325:	05 77 3e 00 00       	add    eax,0x3e77
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f00332a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00332d:	e8 ba ff ff ff       	call   9f0032ec <strlenI>
9f003332:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f003335:	c9                   	leave  
9f003336:	c3                   	ret    

9f003337 <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f003337:	55                   	push   ebp
9f003338:	89 e5                	mov    ebp,esp
9f00333a:	83 ec 10             	sub    esp,0x10
9f00333d:	e8 1c 15 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003342:	05 5a 3e 00 00       	add    eax,0x3e5a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f003347:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f00334e:	eb 04                	jmp    9f003354 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f003350:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f003354:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003357:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00335a:	01 d0                	add    eax,edx
9f00335c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00335f:	84 c0                	test   al,al
9f003361:	74 08                	je     9f00336b <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f003363:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003366:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f003369:	72 e5                	jb     9f003350 <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f00336b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f00336e:	c9                   	leave  
9f00336f:	c3                   	ret    

9f003370 <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f003370:	55                   	push   ebp
9f003371:	89 e5                	mov    ebp,esp
9f003373:	e8 e6 14 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003378:	05 24 3e 00 00       	add    eax,0x3e24
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f00337d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003380:	50                   	push   eax
9f003381:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003384:	e8 ae ff ff ff       	call   9f003337 <strnlenI>
9f003389:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f00338c:	c9                   	leave  
9f00338d:	c3                   	ret    
9f00338e:	66 90                	xchg   ax,ax

9f003390 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f003390:	55                   	push   ebp
9f003391:	89 e5                	mov    ebp,esp
9f003393:	e8 c6 14 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003398:	05 04 3e 00 00       	add    eax,0x3e04
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f00339d:	eb 4b                	jmp    9f0033ea <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f00339f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033a2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0033a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033ab:	38 c2                	cmp    dl,al
9f0033ad:	74 1e                	je     9f0033cd <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f0033af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033b2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0033b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033b8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033bb:	38 c2                	cmp    dl,al
9f0033bd:	73 07                	jae    9f0033c6 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f0033bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0033c4:	eb 2f                	jmp    9f0033f5 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f0033c6:	b8 01 00 00 00       	mov    eax,0x1
9f0033cb:	eb 28                	jmp    9f0033f5 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f0033cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033d3:	84 c0                	test   al,al
9f0033d5:	75 07                	jne    9f0033de <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f0033d7:	b8 00 00 00 00       	mov    eax,0x0
9f0033dc:	eb 17                	jmp    9f0033f5 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f0033de:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f0033e2:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f0033e6:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f0033ea:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0033ee:	75 af                	jne    9f00339f <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f0033f0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f0033f5:	5d                   	pop    ebp
9f0033f6:	c3                   	ret    

9f0033f7 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f0033f7:	55                   	push   ebp
9f0033f8:	89 e5                	mov    ebp,esp
9f0033fa:	e8 5f 14 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0033ff:	05 9d 3d 00 00       	add    eax,0x3d9d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f003404:	eb 4b                	jmp    9f003451 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f003406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003409:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00340c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00340f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003412:	38 c2                	cmp    dl,al
9f003414:	74 1e                	je     9f003434 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003419:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00341c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003422:	38 c2                	cmp    dl,al
9f003424:	73 07                	jae    9f00342d <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f003426:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f00342b:	eb 2f                	jmp    9f00345c <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f00342d:	b8 01 00 00 00       	mov    eax,0x1
9f003432:	eb 28                	jmp    9f00345c <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f003434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003437:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00343a:	84 c0                	test   al,al
9f00343c:	75 07                	jne    9f003445 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f00343e:	b8 00 00 00 00       	mov    eax,0x0
9f003443:	eb 17                	jmp    9f00345c <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f003445:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003449:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f00344d:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f003451:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003455:	75 af                	jne    9f003406 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f003457:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f00345c:	5d                   	pop    ebp
9f00345d:	c3                   	ret    
9f00345e:	66 90                	xchg   ax,ax

9f003460 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f003460:	55                   	push   ebp
9f003461:	89 e5                	mov    ebp,esp
9f003463:	83 ec 10             	sub    esp,0x10
9f003466:	e8 f3 13 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00346b:	05 31 3d 00 00       	add    eax,0x3d31
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f003470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003473:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f003476:	eb 1b                	jmp    9f003493 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f003478:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00347b:	8d 50 01             	lea    edx,[eax+0x1]
9f00347e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003481:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003484:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003487:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f00348a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00348d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f00348f:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f003493:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003497:	74 1c                	je     9f0034b5 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f003499:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00349c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00349f:	84 c0                	test   al,al
9f0034a1:	75 d5                	jne    9f003478 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0034a3:	eb 10                	jmp    9f0034b5 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f0034a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0034a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0034ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0034ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f0034b1:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0034b5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0034b9:	75 ea                	jne    9f0034a5 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    if (n==0)
9f0034bb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0034bf:	75 06                	jne    9f0034c7 <strncpyI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f0034c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0034c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f0034c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f0034ca:	c9                   	leave  
9f0034cb:	c3                   	ret    

9f0034cc <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f0034cc:	55                   	push   ebp
9f0034cd:	89 e5                	mov    ebp,esp
9f0034cf:	e8 8a 13 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0034d4:	05 c8 3c 00 00       	add    eax,0x3cc8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f0034d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0034dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0034df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0034e2:	e8 79 ff ff ff       	call   9f003460 <strncpyI>
9f0034e7:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f0034ea:	c9                   	leave  
9f0034eb:	c3                   	ret    

9f0034ec <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f0034ec:	55                   	push   ebp
9f0034ed:	89 e5                	mov    ebp,esp
9f0034ef:	57                   	push   edi
9f0034f0:	56                   	push   esi
9f0034f1:	53                   	push   ebx
9f0034f2:	83 ec 08             	sub    esp,0x8
9f0034f5:	e8 64 13 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0034fa:	05 a2 3c 00 00       	add    eax,0x3ca2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f0034ff:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003502:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f003509:	89 f0                	mov    eax,esi
9f00350b:	8d 70 01             	lea    esi,[eax+0x1]
9f00350e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003511:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f003514:	83 fb 20             	cmp    ebx,0x20
9f003517:	74 f0                	je     9f003509 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f003519:	83 fb 2d             	cmp    ebx,0x2d
9f00351c:	75 14                	jne    9f003532 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f00351e:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f003525:	89 f0                	mov    eax,esi
9f003527:	8d 70 01             	lea    esi,[eax+0x1]
9f00352a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00352d:	0f be d8             	movsx  ebx,al
9f003530:	eb 10                	jmp    9f003542 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f003532:	83 fb 2b             	cmp    ebx,0x2b
9f003535:	75 0b                	jne    9f003542 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f003537:	89 f0                	mov    eax,esi
9f003539:	8d 70 01             	lea    esi,[eax+0x1]
9f00353c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00353f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f003542:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003546:	74 06                	je     9f00354e <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f003548:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00354c:	75 26                	jne    9f003574 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f00354e:	83 fb 30             	cmp    ebx,0x30
9f003551:	75 21                	jne    9f003574 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f003553:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003556:	3c 78                	cmp    al,0x78
9f003558:	74 07                	je     9f003561 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f00355a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f00355d:	3c 58                	cmp    al,0x58
9f00355f:	75 13                	jne    9f003574 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f003561:	8d 46 01             	lea    eax,[esi+0x1]
9f003564:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003567:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f00356a:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f00356d:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f003574:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003578:	75 14                	jne    9f00358e <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f00357a:	83 fb 30             	cmp    ebx,0x30
9f00357d:	75 07                	jne    9f003586 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f00357f:	b8 08 00 00 00       	mov    eax,0x8
9f003584:	eb 05                	jmp    9f00358b <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f003586:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f00358b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f00358e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003591:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003596:	ba 00 00 00 00       	mov    edx,0x0
9f00359b:	f7 f1                	div    ecx
9f00359d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f0035a0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0035a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0035a8:	ba 00 00 00 00       	mov    edx,0x0
9f0035ad:	f7 f1                	div    ecx
9f0035af:	89 d0                	mov    eax,edx
9f0035b1:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f0035b3:	bf 00 00 00 00       	mov    edi,0x0
9f0035b8:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f0035bd:	8d 43 d0             	lea    eax,[ebx-0x30]
9f0035c0:	83 f8 09             	cmp    eax,0x9
9f0035c3:	77 05                	ja     9f0035ca <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f0035c5:	83 eb 30             	sub    ebx,0x30
9f0035c8:	eb 25                	jmp    9f0035ef <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f0035ca:	89 d8                	mov    eax,ebx
9f0035cc:	83 c8 20             	or     eax,0x20
9f0035cf:	83 e8 61             	sub    eax,0x61
9f0035d2:	83 f8 19             	cmp    eax,0x19
9f0035d5:	77 56                	ja     9f00362d <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0035d7:	83 fb 40             	cmp    ebx,0x40
9f0035da:	7e 0c                	jle    9f0035e8 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f0035dc:	83 fb 5a             	cmp    ebx,0x5a
9f0035df:	7f 07                	jg     9f0035e8 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f0035e1:	b8 37 00 00 00       	mov    eax,0x37
9f0035e6:	eb 05                	jmp    9f0035ed <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f0035e8:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f0035ed:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f0035ef:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0035f2:	7d 3c                	jge    9f003630 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f0035f4:	89 c8                	mov    eax,ecx
9f0035f6:	85 c0                	test   eax,eax
9f0035f8:	78 10                	js     9f00360a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f0035fa:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0035fd:	77 0b                	ja     9f00360a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f0035ff:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003602:	75 0d                	jne    9f003611 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f003604:	89 d0                	mov    eax,edx
9f003606:	39 c3                	cmp    ebx,eax
9f003608:	7e 07                	jle    9f003611 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f00360a:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f00360f:	eb 0f                	jmp    9f003620 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f003611:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f003616:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003619:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f00361c:	89 d8                	mov    eax,ebx
9f00361e:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f003620:	89 f0                	mov    eax,esi
9f003622:	8d 70 01             	lea    esi,[eax+0x1]
9f003625:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003628:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f00362b:	eb 90                	jmp    9f0035bd <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f00362d:	90                   	nop
9f00362e:	eb 01                	jmp    9f003631 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f003630:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f003631:	89 c8                	mov    eax,ecx
9f003633:	85 c0                	test   eax,eax
9f003635:	79 07                	jns    9f00363e <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f003637:	bf ff ff ff ff       	mov    edi,0xffffffff
9f00363c:	eb 08                	jmp    9f003646 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f00363e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003642:	74 02                	je     9f003646 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f003644:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f003646:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f00364a:	74 13                	je     9f00365f <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f00364c:	89 c8                	mov    eax,ecx
9f00364e:	85 c0                	test   eax,eax
9f003650:	74 05                	je     9f003657 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f003652:	8d 46 ff             	lea    eax,[esi-0x1]
9f003655:	eb 03                	jmp    9f00365a <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f003657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f00365a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00365d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f00365f:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f003661:	83 c4 08             	add    esp,0x8
9f003664:	5b                   	pop    ebx
9f003665:	5e                   	pop    esi
9f003666:	5f                   	pop    edi
9f003667:	5d                   	pop    ebp
9f003668:	c3                   	ret    
9f003669:	66 90                	xchg   ax,ax
9f00366b:	90                   	nop

9f00366c <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f00366c:	55                   	push   ebp
9f00366d:	89 e5                	mov    ebp,esp
9f00366f:	e8 ea 11 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003674:	05 28 3b 00 00       	add    eax,0x3b28
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f003679:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00367c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00367f:	01 d0                	add    eax,edx
9f003681:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f003684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f003687:	5d                   	pop    ebp
9f003688:	c3                   	ret    
9f003689:	66 90                	xchg   ax,ax
9f00368b:	90                   	nop

9f00368c <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f00368c:	55                   	push   ebp
9f00368d:	89 e5                	mov    ebp,esp
9f00368f:	57                   	push   edi
9f003690:	56                   	push   esi
9f003691:	53                   	push   ebx
9f003692:	83 ec 0c             	sub    esp,0xc
9f003695:	e8 c4 11 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f00369a:	05 02 3b 00 00       	add    eax,0x3b02
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f00369f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f0036a2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f0036a9:	89 f0                	mov    eax,esi
9f0036ab:	8d 70 01             	lea    esi,[eax+0x1]
9f0036ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036b1:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f0036b4:	83 fb 20             	cmp    ebx,0x20
9f0036b7:	74 f0                	je     9f0036a9 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f0036b9:	83 fb 2d             	cmp    ebx,0x2d
9f0036bc:	75 14                	jne    9f0036d2 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f0036be:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f0036c5:	89 f0                	mov    eax,esi
9f0036c7:	8d 70 01             	lea    esi,[eax+0x1]
9f0036ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036cd:	0f be d8             	movsx  ebx,al
9f0036d0:	eb 10                	jmp    9f0036e2 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f0036d2:	83 fb 2b             	cmp    ebx,0x2b
9f0036d5:	75 0b                	jne    9f0036e2 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f0036d7:	89 f0                	mov    eax,esi
9f0036d9:	8d 70 01             	lea    esi,[eax+0x1]
9f0036dc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036df:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f0036e2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0036e6:	74 06                	je     9f0036ee <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f0036e8:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0036ec:	75 26                	jne    9f003714 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f0036ee:	83 fb 30             	cmp    ebx,0x30
9f0036f1:	75 21                	jne    9f003714 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f0036f3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0036f6:	3c 78                	cmp    al,0x78
9f0036f8:	74 07                	je     9f003701 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f0036fa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0036fd:	3c 58                	cmp    al,0x58
9f0036ff:	75 13                	jne    9f003714 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f003701:	8d 46 01             	lea    eax,[esi+0x1]
9f003704:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003707:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f00370a:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f00370d:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f003714:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003718:	75 14                	jne    9f00372e <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f00371a:	83 fb 30             	cmp    ebx,0x30
9f00371d:	75 07                	jne    9f003726 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f00371f:	b8 08 00 00 00       	mov    eax,0x8
9f003724:	eb 05                	jmp    9f00372b <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f003726:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f00372b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f00372e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003732:	74 07                	je     9f00373b <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f003734:	b8 00 00 00 80       	mov    eax,0x80000000
9f003739:	eb 05                	jmp    9f003740 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f00373b:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f003740:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003743:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003746:	ba 00 00 00 00       	mov    edx,0x0
9f00374b:	f7 f1                	div    ecx
9f00374d:	89 d1                	mov    ecx,edx
9f00374f:	89 c8                	mov    eax,ecx
9f003751:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f003754:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f003757:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00375a:	ba 00 00 00 00       	mov    edx,0x0
9f00375f:	f7 f7                	div    edi
9f003761:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f003764:	bf 00 00 00 00       	mov    edi,0x0
9f003769:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f00376e:	8d 43 d0             	lea    eax,[ebx-0x30]
9f003771:	83 f8 09             	cmp    eax,0x9
9f003774:	77 05                	ja     9f00377b <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f003776:	83 eb 30             	sub    ebx,0x30
9f003779:	eb 25                	jmp    9f0037a0 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f00377b:	89 d8                	mov    eax,ebx
9f00377d:	83 c8 20             	or     eax,0x20
9f003780:	83 e8 61             	sub    eax,0x61
9f003783:	83 f8 19             	cmp    eax,0x19
9f003786:	77 55                	ja     9f0037dd <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f003788:	83 fb 40             	cmp    ebx,0x40
9f00378b:	7e 0c                	jle    9f003799 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f00378d:	83 fb 5a             	cmp    ebx,0x5a
9f003790:	7f 07                	jg     9f003799 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f003792:	b8 37 00 00 00       	mov    eax,0x37
9f003797:	eb 05                	jmp    9f00379e <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f003799:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f00379e:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f0037a0:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0037a3:	7d 3b                	jge    9f0037e0 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f0037a5:	89 c8                	mov    eax,ecx
9f0037a7:	85 c0                	test   eax,eax
9f0037a9:	78 0f                	js     9f0037ba <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f0037ab:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0037ae:	77 0a                	ja     9f0037ba <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f0037b0:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0037b3:	75 0c                	jne    9f0037c1 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f0037b5:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f0037b8:	7e 07                	jle    9f0037c1 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f0037ba:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f0037bf:	eb 0f                	jmp    9f0037d0 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f0037c1:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f0037c6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0037c9:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f0037cc:	89 d8                	mov    eax,ebx
9f0037ce:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f0037d0:	89 f0                	mov    eax,esi
9f0037d2:	8d 70 01             	lea    esi,[eax+0x1]
9f0037d5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0037d8:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f0037db:	eb 91                	jmp    9f00376e <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f0037dd:	90                   	nop
9f0037de:	eb 01                	jmp    9f0037e1 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f0037e0:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f0037e1:	89 c8                	mov    eax,ecx
9f0037e3:	85 c0                	test   eax,eax
9f0037e5:	79 16                	jns    9f0037fd <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f0037e7:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0037eb:	74 07                	je     9f0037f4 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f0037ed:	b8 00 00 00 80       	mov    eax,0x80000000
9f0037f2:	eb 05                	jmp    9f0037f9 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f0037f4:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f0037f9:	89 c7                	mov    edi,eax
9f0037fb:	eb 08                	jmp    9f003805 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f0037fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003801:	74 02                	je     9f003805 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f003803:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f003805:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003809:	74 13                	je     9f00381e <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f00380b:	89 c8                	mov    eax,ecx
9f00380d:	85 c0                	test   eax,eax
9f00380f:	74 05                	je     9f003816 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f003811:	8d 46 ff             	lea    eax,[esi-0x1]
9f003814:	eb 03                	jmp    9f003819 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f003816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f003819:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00381c:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f00381e:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f003820:	83 c4 0c             	add    esp,0xc
9f003823:	5b                   	pop    ebx
9f003824:	5e                   	pop    esi
9f003825:	5f                   	pop    edi
9f003826:	5d                   	pop    ebp
9f003827:	c3                   	ret    

9f003828 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f003828:	55                   	push   ebp
9f003829:	89 e5                	mov    ebp,esp
9f00382b:	53                   	push   ebx
9f00382c:	83 ec 14             	sub    esp,0x14
9f00382f:	e8 2a 10 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003834:	05 68 39 00 00       	add    eax,0x3968
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f003839:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00383c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00383f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003842:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f003845:	eb 04                	jmp    9f00384b <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f003847:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f00384b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00384e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003851:	80 fa 20             	cmp    dl,0x20
9f003854:	74 f1                	je     9f003847 <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f003856:	83 ec 0c             	sub    esp,0xc
9f003859:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00385c:	89 c3                	mov    ebx,eax
9f00385e:	e8 89 fa ff ff       	call   9f0032ec <strlenI>
9f003863:	83 c4 10             	add    esp,0x10
9f003866:	8d 50 ff             	lea    edx,[eax-0x1]
9f003869:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00386c:	01 d0                	add    eax,edx
9f00386e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f003871:	eb 0c                	jmp    9f00387f <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f003873:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003876:	8d 50 ff             	lea    edx,[eax-0x1]
9f003879:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f00387c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f00387f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003882:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003885:	76 0a                	jbe    9f003891 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f003887:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00388a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00388d:	3c 20                	cmp    al,0x20
9f00388f:	74 e2                	je     9f003873 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f003891:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003894:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f003897:	74 1f                	je     9f0038b8 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f003899:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f00389a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00389d:	8d 50 01             	lea    edx,[eax+0x1]
9f0038a0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0038a3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0038a6:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0038a9:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0038ac:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0038af:	88 10                	mov    BYTE PTR [eax],dl
9f0038b1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0038b4:	84 c0                	test   al,al
9f0038b6:	75 e2                	jne    9f00389a <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f0038b8:	90                   	nop
9f0038b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0038bc:	c9                   	leave  
9f0038bd:	c3                   	ret    

9f0038be <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f0038be:	55                   	push   ebp
9f0038bf:	89 e5                	mov    ebp,esp
9f0038c1:	83 ec 08             	sub    esp,0x8
9f0038c4:	e8 95 0f 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0038c9:	05 d3 38 00 00       	add    eax,0x38d3
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f0038ce:	83 ec 0c             	sub    esp,0xc
9f0038d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0038d4:	e8 4f ff ff ff       	call   9f003828 <strtrimI>
9f0038d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f0038dc:	c9                   	leave  
9f0038dd:	c3                   	ret    
9f0038de:	66 90                	xchg   ax,ax

9f0038e0 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14



///NOTE: outString has to be big enough to hold the modified string
char *strreplaceI(const char *in, const char *pattern, const char *by, char *outString)
{
9f0038e0:	55                   	push   ebp
9f0038e1:	89 e5                	mov    ebp,esp
9f0038e3:	56                   	push   esi
9f0038e4:	53                   	push   ebx
9f0038e5:	83 ec 10             	sub    esp,0x10
9f0038e8:	e8 b3 0f 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f0038ed:	81 c3 af 38 00 00    	add    ebx,0x38af
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:15
    size_t outsize = strlenI(in) + 1;
9f0038f3:	83 ec 0c             	sub    esp,0xc
9f0038f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0038f9:	e8 ee f9 ff ff       	call   9f0032ec <strlenI>
9f0038fe:	83 c4 10             	add    esp,0x10
9f003901:	83 c0 01             	add    eax,0x1
9f003904:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:18
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
9f003907:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f00390e:	e9 ac 00 00 00       	jmp    9f0039bf <strreplaceI+0xdf>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        // copy everything up to the pattern
        memcpyI(outString + resoffset, in, needle - in);
9f003913:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f003916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003919:	29 c2                	sub    edx,eax
9f00391b:	89 d0                	mov    eax,edx
9f00391d:	89 c1                	mov    ecx,eax
9f00391f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f003922:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003925:	01 d0                	add    eax,edx
9f003927:	83 ec 04             	sub    esp,0x4
9f00392a:	51                   	push   ecx
9f00392b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00392e:	50                   	push   eax
9f00392f:	e8 3c ec ff ff       	call   9f002570 <memcpyI>
9f003934:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:23
        resoffset += needle - in;
9f003937:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00393a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00393d:	29 c2                	sub    edx,eax
9f00393f:	89 d0                	mov    eax,edx
9f003941:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:26

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f003944:	83 ec 0c             	sub    esp,0xc
9f003947:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00394a:	e8 9d f9 ff ff       	call   9f0032ec <strlenI>
9f00394f:	83 c4 10             	add    esp,0x10
9f003952:	89 c2                	mov    edx,eax
9f003954:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003957:	01 d0                	add    eax,edx
9f003959:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f00395c:	83 ec 0c             	sub    esp,0xc
9f00395f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003962:	e8 85 f9 ff ff       	call   9f0032ec <strlenI>
9f003967:	83 c4 10             	add    esp,0x10
9f00396a:	89 c2                	mov    edx,eax
9f00396c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00396f:	29 d0                	sub    eax,edx
9f003971:	89 c6                	mov    esi,eax
9f003973:	83 ec 0c             	sub    esp,0xc
9f003976:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003979:	e8 6e f9 ff ff       	call   9f0032ec <strlenI>
9f00397e:	83 c4 10             	add    esp,0x10
9f003981:	01 f0                	add    eax,esi
9f003983:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(outString + resoffset, by, strlenI(by));
9f003986:	83 ec 0c             	sub    esp,0xc
9f003989:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00398c:	e8 5b f9 ff ff       	call   9f0032ec <strlenI>
9f003991:	83 c4 10             	add    esp,0x10
9f003994:	89 c1                	mov    ecx,eax
9f003996:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f003999:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00399c:	01 d0                	add    eax,edx
9f00399e:	83 ec 04             	sub    esp,0x4
9f0039a1:	51                   	push   ecx
9f0039a2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0039a5:	50                   	push   eax
9f0039a6:	e8 c5 eb ff ff       	call   9f002570 <memcpyI>
9f0039ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f0039ae:	83 ec 0c             	sub    esp,0xc
9f0039b1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0039b4:	e8 33 f9 ff ff       	call   9f0032ec <strlenI>
9f0039b9:	83 c4 10             	add    esp,0x10
9f0039bc:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    size_t outsize = strlenI(in) + 1;
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f0039bf:	83 ec 08             	sub    esp,0x8
9f0039c2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0039c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0039c8:	e8 f5 00 00 00       	call   9f003ac2 <strstrI>
9f0039cd:	83 c4 10             	add    esp,0x10
9f0039d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f0039d3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f0039d7:	0f 85 36 ff ff ff    	jne    9f003913 <strreplaceI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(outString + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(outString + resoffset, in);
9f0039dd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0039e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0039e3:	01 d0                	add    eax,edx
9f0039e5:	83 ec 08             	sub    esp,0x8
9f0039e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0039eb:	50                   	push   eax
9f0039ec:	e8 e7 f7 ff ff       	call   9f0031d8 <strcpyI>
9f0039f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return outString;
9f0039f4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f0039f7:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0039fa:	5b                   	pop    ebx
9f0039fb:	5e                   	pop    esi
9f0039fc:	5d                   	pop    ebp
9f0039fd:	c3                   	ret    

9f0039fe <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by, char *outString)
{
9f0039fe:	55                   	push   ebp
9f0039ff:	89 e5                	mov    ebp,esp
9f003a01:	83 ec 08             	sub    esp,0x8
9f003a04:	e8 55 0e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003a09:	05 93 37 00 00       	add    eax,0x3793
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by, outString);
9f003a0e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f003a11:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003a14:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003a17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a1a:	e8 c1 fe ff ff       	call   9f0038e0 <strreplaceI>
9f003a1f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f003a22:	c9                   	leave  
9f003a23:	c3                   	ret    

9f003a24 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strnstrI(char* string, char* substring, int length)
{
9f003a24:	55                   	push   ebp
9f003a25:	89 e5                	mov    ebp,esp
9f003a27:	56                   	push   esi
9f003a28:	53                   	push   ebx
9f003a29:	83 ec 10             	sub    esp,0x10
9f003a2c:	e8 2d 0e 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003a31:	05 6b 37 00 00       	add    eax,0x376b
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:59

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f003a36:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003a39:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    
    b = substring;
9f003a3c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    if (*b == 0) {
9f003a3f:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003a42:	84 c0                	test   al,al
9f003a44:	75 66                	jne    9f003aac <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
	return string;
9f003a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a49:	eb 70                	jmp    9f003abb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f003a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a4e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003a51:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003a54:	38 c2                	cmp    dl,al
9f003a56:	74 12                	je     9f003a6a <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
            if (len--<=0)
9f003a58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003a5b:	8d 50 ff             	lea    edx,[eax-0x1]
9f003a5e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003a61:	85 c0                	test   eax,eax
9f003a63:	7f 42                	jg     9f003aa7 <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
                return string;
9f003a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a68:	eb 51                	jmp    9f003abb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
	    continue;
	}
	a = string;
9f003a6a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	while (1) {
	    if (*b == 0) {
9f003a6d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003a70:	84 c0                	test   al,al
9f003a72:	75 05                	jne    9f003a79 <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
		return string;
9f003a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a77:	eb 42                	jmp    9f003abb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
	    }
            if (len--<=0)
9f003a79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003a7c:	8d 50 ff             	lea    edx,[eax-0x1]
9f003a7f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003a82:	85 c0                	test   eax,eax
9f003a84:	7f 05                	jg     9f003a8b <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
                return string;
9f003a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a89:	eb 30                	jmp    9f003abb <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
	    if (*a++ != *b++) {
9f003a8b:	89 f0                	mov    eax,esi
9f003a8d:	8d 70 01             	lea    esi,[eax+0x1]
9f003a90:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003a93:	89 d8                	mov    eax,ebx
9f003a95:	8d 58 01             	lea    ebx,[eax+0x1]
9f003a98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a9b:	38 c2                	cmp    dl,al
9f003a9d:	75 02                	jne    9f003aa1 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:81
		break;
	    }
	}
9f003a9f:	eb cc                	jmp    9f003a6d <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f003aa1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
	    }
	}
	b = substring;
9f003aa2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003aa5:	eb 01                	jmp    9f003aa8 <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f003aa7:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003aa8:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65 (discriminator 1)
9f003aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003aaf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ab2:	84 c0                	test   al,al
9f003ab4:	75 95                	jne    9f003a4b <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003ab6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f003abb:	83 c4 10             	add    esp,0x10
9f003abe:	5b                   	pop    ebx
9f003abf:	5e                   	pop    esi
9f003ac0:	5d                   	pop    ebp
9f003ac1:	c3                   	ret    

9f003ac2 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:88

char* strstrI(const char* string, const char* substring)
{
9f003ac2:	55                   	push   ebp
9f003ac3:	89 e5                	mov    ebp,esp
9f003ac5:	56                   	push   esi
9f003ac6:	53                   	push   ebx
9f003ac7:	e8 92 0d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003acc:	05 d0 36 00 00       	add    eax,0x36d0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:96
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f003ad1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    if (*b == 0) {
9f003ad4:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003ad7:	84 c0                	test   al,al
9f003ad9:	75 42                	jne    9f003b1d <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
	return string;
9f003adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ade:	eb 4c                	jmp    9f003b2c <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f003ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ae3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003ae6:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003ae9:	38 c2                	cmp    dl,al
9f003aeb:	75 2b                	jne    9f003b18 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:104
	    continue;
	}
	a = string;
9f003aed:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:106
	while (1) {
	    if (*b == 0) {
9f003af0:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003af3:	84 c0                	test   al,al
9f003af5:	75 05                	jne    9f003afc <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
		return string;
9f003af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003afa:	eb 30                	jmp    9f003b2c <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:109
	    }
	    if (*a++ != *b++) {
9f003afc:	89 f0                	mov    eax,esi
9f003afe:	8d 70 01             	lea    esi,[eax+0x1]
9f003b01:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b04:	89 d8                	mov    eax,ebx
9f003b06:	8d 58 01             	lea    ebx,[eax+0x1]
9f003b09:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b0c:	38 c2                	cmp    dl,al
9f003b0e:	75 02                	jne    9f003b12 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:112
		break;
	    }
	}
9f003b10:	eb de                	jmp    9f003af0 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f003b12:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
	    }
	}
	b = substring;
9f003b13:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003b16:	eb 01                	jmp    9f003b19 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f003b18:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003b19:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100 (discriminator 1)
9f003b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b20:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b23:	84 c0                	test   al,al
9f003b25:	75 b9                	jne    9f003ae0 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:115
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003b27:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
}
9f003b2c:	5b                   	pop    ebx
9f003b2d:	5e                   	pop    esi
9f003b2e:	5d                   	pop    ebp
9f003b2f:	c3                   	ret    

9f003b30 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:119

VISIBLE char* strstr(const char* string, const char* substring)
{
9f003b30:	55                   	push   ebp
9f003b31:	89 e5                	mov    ebp,esp
9f003b33:	e8 26 0d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003b38:	05 64 36 00 00       	add    eax,0x3664
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120
    return strstrI(string, substring);
9f003b3d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003b40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003b43:	e8 7a ff ff ff       	call   9f003ac2 <strstrI>
9f003b48:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
}
9f003b4b:	c9                   	leave  
9f003b4c:	c3                   	ret    
9f003b4d:	66 90                	xchg   ax,ax
9f003b4f:	90                   	nop

9f003b50 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f003b50:	55                   	push   ebp
9f003b51:	89 e5                	mov    ebp,esp
9f003b53:	56                   	push   esi
9f003b54:	53                   	push   ebx
9f003b55:	83 ec 10             	sub    esp,0x10
9f003b58:	e8 01 0d 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003b5d:	05 3f 36 00 00       	add    eax,0x363f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    uint32_t retVal=0;
9f003b62:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    GET_TICKS(retVal);
9f003b69:	b8 70 01 00 00       	mov    eax,0x170
9f003b6e:	bb 00 00 00 00       	mov    ebx,0x0
9f003b73:	b9 00 00 00 00       	mov    ecx,0x0
9f003b78:	ba 00 00 00 00       	mov    edx,0x0
9f003b7d:	be 00 00 00 00       	mov    esi,0x0
9f003b82:	e8 fc ff ff ff       	call   9f003b83 <getticks+0x33>
9f003b87:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
    return (time_t)retVal;
9f003b8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
}
9f003b8d:	83 c4 10             	add    esp,0x10
9f003b90:	5b                   	pop    ebx
9f003b91:	5e                   	pop    esi
9f003b92:	5d                   	pop    ebp
9f003b93:	c3                   	ret    

9f003b94 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003b94:	55                   	push   ebp
9f003b95:	89 e5                	mov    ebp,esp
9f003b97:	53                   	push   ebx
9f003b98:	83 ec 10             	sub    esp,0x10
9f003b9b:	e8 00 0d 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f003ba0:	81 c3 fc 35 00 00    	add    ebx,0x35fc
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  time_t time = *timer;
9f003ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ba9:	8b 00                	mov    eax,DWORD PTR [eax]
9f003bab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f003bae:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37

  dayclock = (unsigned long) time % SECS_DAY;
9f003bb5:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f003bb8:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003bbd:	89 c8                	mov    eax,ecx
9f003bbf:	f7 e2                	mul    edx
9f003bc1:	89 d0                	mov    eax,edx
9f003bc3:	c1 e8 10             	shr    eax,0x10
9f003bc6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003bc9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003bcc:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003bd2:	29 c1                	sub    ecx,eax
9f003bd4:	89 c8                	mov    eax,ecx
9f003bd6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  dayno = (unsigned long) time / SECS_DAY;
9f003bd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003bdc:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003be1:	f7 e2                	mul    edx
9f003be3:	89 d0                	mov    eax,edx
9f003be5:	c1 e8 10             	shr    eax,0x10
9f003be8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  tmbuf->tm_sec = dayclock % 60;
9f003beb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003bee:	ba 89 88 88 88       	mov    edx,0x88888889
9f003bf3:	89 c8                	mov    eax,ecx
9f003bf5:	f7 e2                	mul    edx
9f003bf7:	89 d0                	mov    eax,edx
9f003bf9:	c1 e8 05             	shr    eax,0x5
9f003bfc:	89 c2                	mov    edx,eax
9f003bfe:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003c05:	89 c2                	mov    edx,eax
9f003c07:	89 d0                	mov    eax,edx
9f003c09:	c1 e0 04             	shl    eax,0x4
9f003c0c:	29 d0                	sub    eax,edx
9f003c0e:	29 c1                	sub    ecx,eax
9f003c10:	89 c8                	mov    eax,ecx
9f003c12:	89 c2                	mov    edx,eax
9f003c14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c17:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f003c19:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003c1c:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003c21:	89 c8                	mov    eax,ecx
9f003c23:	f7 e2                	mul    edx
9f003c25:	89 d0                	mov    eax,edx
9f003c27:	c1 e8 0b             	shr    eax,0xb
9f003c2a:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f003c30:	29 c1                	sub    ecx,eax
9f003c32:	89 c8                	mov    eax,ecx
9f003c34:	ba 89 88 88 88       	mov    edx,0x88888889
9f003c39:	f7 e2                	mul    edx
9f003c3b:	89 d0                	mov    eax,edx
9f003c3d:	c1 e8 05             	shr    eax,0x5
9f003c40:	89 c2                	mov    edx,eax
9f003c42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c45:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_hour = dayclock / 3600;
9f003c48:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003c4b:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003c50:	f7 e2                	mul    edx
9f003c52:	89 d0                	mov    eax,edx
9f003c54:	c1 e8 0b             	shr    eax,0xb
9f003c57:	89 c2                	mov    edx,eax
9f003c59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c5c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f003c5f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003c62:	8d 48 04             	lea    ecx,[eax+0x4]
9f003c65:	ba 25 49 92 24       	mov    edx,0x24924925
9f003c6a:	89 c8                	mov    eax,ecx
9f003c6c:	f7 e2                	mul    edx
9f003c6e:	89 c8                	mov    eax,ecx
9f003c70:	29 d0                	sub    eax,edx
9f003c72:	d1 e8                	shr    eax,1
9f003c74:	01 d0                	add    eax,edx
9f003c76:	c1 e8 02             	shr    eax,0x2
9f003c79:	89 c2                	mov    edx,eax
9f003c7b:	c1 e2 03             	shl    edx,0x3
9f003c7e:	29 c2                	sub    edx,eax
9f003c80:	89 c8                	mov    eax,ecx
9f003c82:	29 d0                	sub    eax,edx
9f003c84:	89 c2                	mov    edx,eax
9f003c86:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c89:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f003c8c:	eb 66                	jmp    9f003cf4 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
    dayno -= YEARSIZE(year);
9f003c8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003c91:	83 e0 03             	and    eax,0x3
9f003c94:	85 c0                	test   eax,eax
9f003c96:	75 50                	jne    9f003ce8 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 1)
9f003c98:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003c9b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003ca0:	89 c8                	mov    eax,ecx
9f003ca2:	f7 ea                	imul   edx
9f003ca4:	c1 fa 05             	sar    edx,0x5
9f003ca7:	89 c8                	mov    eax,ecx
9f003ca9:	c1 f8 1f             	sar    eax,0x1f
9f003cac:	29 c2                	sub    edx,eax
9f003cae:	89 d0                	mov    eax,edx
9f003cb0:	6b c0 64             	imul   eax,eax,0x64
9f003cb3:	29 c1                	sub    ecx,eax
9f003cb5:	89 c8                	mov    eax,ecx
9f003cb7:	85 c0                	test   eax,eax
9f003cb9:	75 26                	jne    9f003ce1 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 4)
9f003cbb:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003cbe:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003cc3:	89 c8                	mov    eax,ecx
9f003cc5:	f7 ea                	imul   edx
9f003cc7:	c1 fa 07             	sar    edx,0x7
9f003cca:	89 c8                	mov    eax,ecx
9f003ccc:	c1 f8 1f             	sar    eax,0x1f
9f003ccf:	29 c2                	sub    edx,eax
9f003cd1:	89 d0                	mov    eax,edx
9f003cd3:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003cd9:	29 c1                	sub    ecx,eax
9f003cdb:	89 c8                	mov    eax,ecx
9f003cdd:	85 c0                	test   eax,eax
9f003cdf:	75 07                	jne    9f003ce8 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 5)
9f003ce1:	b8 6e 01 00 00       	mov    eax,0x16e
9f003ce6:	eb 05                	jmp    9f003ced <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 6)
9f003ce8:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
9f003ced:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46 (discriminator 8)
    year++;
9f003cf0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f003cf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003cf7:	83 e0 03             	and    eax,0x3
9f003cfa:	85 c0                	test   eax,eax
9f003cfc:	75 50                	jne    9f003d4e <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f003cfe:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d01:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d06:	89 c8                	mov    eax,ecx
9f003d08:	f7 ea                	imul   edx
9f003d0a:	c1 fa 05             	sar    edx,0x5
9f003d0d:	89 c8                	mov    eax,ecx
9f003d0f:	c1 f8 1f             	sar    eax,0x1f
9f003d12:	29 c2                	sub    edx,eax
9f003d14:	89 d0                	mov    eax,edx
9f003d16:	6b c0 64             	imul   eax,eax,0x64
9f003d19:	29 c1                	sub    ecx,eax
9f003d1b:	89 c8                	mov    eax,ecx
9f003d1d:	85 c0                	test   eax,eax
9f003d1f:	75 26                	jne    9f003d47 <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f003d21:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d24:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d29:	89 c8                	mov    eax,ecx
9f003d2b:	f7 ea                	imul   edx
9f003d2d:	c1 fa 07             	sar    edx,0x7
9f003d30:	89 c8                	mov    eax,ecx
9f003d32:	c1 f8 1f             	sar    eax,0x1f
9f003d35:	29 c2                	sub    edx,eax
9f003d37:	89 d0                	mov    eax,edx
9f003d39:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003d3f:	29 c1                	sub    ecx,eax
9f003d41:	89 c8                	mov    eax,ecx
9f003d43:	85 c0                	test   eax,eax
9f003d45:	75 07                	jne    9f003d4e <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f003d47:	b8 6e 01 00 00       	mov    eax,0x16e
9f003d4c:	eb 05                	jmp    9f003d53 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f003d4e:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f003d53:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003d56:	0f 86 32 ff ff ff    	jbe    9f003c8e <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f003d5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003d5f:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f003d65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d68:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_yday = dayno;
9f003d6b:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f003d6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d71:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  tmbuf->tm_mon = 0;
9f003d74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d77:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003d7e:	e9 89 00 00 00       	jmp    9f003e0c <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f003d83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003d86:	83 e0 03             	and    eax,0x3
9f003d89:	85 c0                	test   eax,eax
9f003d8b:	75 50                	jne    9f003ddd <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 1)
9f003d8d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d90:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d95:	89 c8                	mov    eax,ecx
9f003d97:	f7 ea                	imul   edx
9f003d99:	c1 fa 05             	sar    edx,0x5
9f003d9c:	89 c8                	mov    eax,ecx
9f003d9e:	c1 f8 1f             	sar    eax,0x1f
9f003da1:	29 c2                	sub    edx,eax
9f003da3:	89 d0                	mov    eax,edx
9f003da5:	6b c0 64             	imul   eax,eax,0x64
9f003da8:	29 c1                	sub    ecx,eax
9f003daa:	89 c8                	mov    eax,ecx
9f003dac:	85 c0                	test   eax,eax
9f003dae:	75 26                	jne    9f003dd6 <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 4)
9f003db0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003db3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003db8:	89 c8                	mov    eax,ecx
9f003dba:	f7 ea                	imul   edx
9f003dbc:	c1 fa 07             	sar    edx,0x7
9f003dbf:	89 c8                	mov    eax,ecx
9f003dc1:	c1 f8 1f             	sar    eax,0x1f
9f003dc4:	29 c2                	sub    edx,eax
9f003dc6:	89 d0                	mov    eax,edx
9f003dc8:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003dce:	29 c1                	sub    ecx,eax
9f003dd0:	89 c8                	mov    eax,ecx
9f003dd2:	85 c0                	test   eax,eax
9f003dd4:	75 07                	jne    9f003ddd <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 5)
9f003dd6:	ba 01 00 00 00       	mov    edx,0x1
9f003ddb:	eb 05                	jmp    9f003de2 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 6)
9f003ddd:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
9f003de2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003de5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003de8:	89 d0                	mov    eax,edx
9f003dea:	01 c0                	add    eax,eax
9f003dec:	01 d0                	add    eax,edx
9f003dee:	c1 e0 02             	shl    eax,0x2
9f003df1:	01 c8                	add    eax,ecx
9f003df3:	8b 84 83 04 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2fc]
9f003dfa:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53 (discriminator 8)
    tmbuf->tm_mon++;
9f003dfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003e03:	8d 50 01             	lea    edx,[eax+0x1]
9f003e06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e09:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003e0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003e0f:	83 e0 03             	and    eax,0x3
9f003e12:	85 c0                	test   eax,eax
9f003e14:	75 50                	jne    9f003e66 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f003e16:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003e19:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003e1e:	89 c8                	mov    eax,ecx
9f003e20:	f7 ea                	imul   edx
9f003e22:	c1 fa 05             	sar    edx,0x5
9f003e25:	89 c8                	mov    eax,ecx
9f003e27:	c1 f8 1f             	sar    eax,0x1f
9f003e2a:	29 c2                	sub    edx,eax
9f003e2c:	89 d0                	mov    eax,edx
9f003e2e:	6b c0 64             	imul   eax,eax,0x64
9f003e31:	29 c1                	sub    ecx,eax
9f003e33:	89 c8                	mov    eax,ecx
9f003e35:	85 c0                	test   eax,eax
9f003e37:	75 26                	jne    9f003e5f <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f003e39:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003e3c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003e41:	89 c8                	mov    eax,ecx
9f003e43:	f7 ea                	imul   edx
9f003e45:	c1 fa 07             	sar    edx,0x7
9f003e48:	89 c8                	mov    eax,ecx
9f003e4a:	c1 f8 1f             	sar    eax,0x1f
9f003e4d:	29 c2                	sub    edx,eax
9f003e4f:	89 d0                	mov    eax,edx
9f003e51:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003e57:	29 c1                	sub    ecx,eax
9f003e59:	89 c8                	mov    eax,ecx
9f003e5b:	85 c0                	test   eax,eax
9f003e5d:	75 07                	jne    9f003e66 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f003e5f:	ba 01 00 00 00       	mov    edx,0x1
9f003e64:	eb 05                	jmp    9f003e6b <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f003e66:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f003e6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e6e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003e71:	89 d0                	mov    eax,edx
9f003e73:	01 c0                	add    eax,eax
9f003e75:	01 d0                	add    eax,edx
9f003e77:	c1 e0 02             	shl    eax,0x2
9f003e7a:	01 c8                	add    eax,ecx
9f003e7c:	8b 84 83 04 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2fc]
9f003e83:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003e86:	0f 86 f7 fe ff ff    	jbe    9f003d83 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f003e8c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003e8f:	83 c0 01             	add    eax,0x1
9f003e92:	89 c2                	mov    edx,eax
9f003e94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e97:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  tmbuf->tm_isdst = 0;
9f003e9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e9d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
  return tmbuf;
9f003ea4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
}
9f003ea7:	83 c4 10             	add    esp,0x10
9f003eaa:	5b                   	pop    ebx
9f003eab:	5d                   	pop    ebp
9f003eac:	c3                   	ret    

9f003ead <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f003ead:	55                   	push   ebp
9f003eae:	89 e5                	mov    ebp,esp
9f003eb0:	e8 a9 09 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003eb5:	05 e7 32 00 00       	add    eax,0x32e7
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
    return gmtime_rI(timer, tmbuf);
9f003eba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003ebd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003ec0:	e8 cf fc ff ff       	call   9f003b94 <gmtime_rI>
9f003ec5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
}
9f003ec8:	c9                   	leave  
9f003ec9:	c3                   	ret    

9f003eca <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65

VISIBLE struct tm *localtime(const time_t *timer) {
9f003eca:	55                   	push   ebp
9f003ecb:	89 e5                	mov    ebp,esp
9f003ecd:	83 ec 10             	sub    esp,0x10
9f003ed0:	e8 89 09 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003ed5:	05 c7 32 00 00       	add    eax,0x32c7
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f003eda:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003edd:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f003edf:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f003ee5:	8b 12                	mov    edx,DWORD PTR [edx]
9f003ee7:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f003eed:	01 ca                	add    edx,ecx
9f003eef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_rI(&t, &tmbuf);
9f003ef2:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f003ef8:	50                   	push   eax
9f003ef9:	8d 45 fc             	lea    eax,[ebp-0x4]
9f003efc:	50                   	push   eax
9f003efd:	e8 92 fc ff ff       	call   9f003b94 <gmtime_rI>
9f003f02:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f003f05:	c9                   	leave  
9f003f06:	c3                   	ret    

9f003f07 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003f07:	55                   	push   ebp
9f003f08:	89 e5                	mov    ebp,esp
9f003f0a:	83 ec 10             	sub    esp,0x10
9f003f0d:	e8 4c 09 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003f12:	05 8a 32 00 00       	add    eax,0x328a
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f003f17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f1a:	8b 12                	mov    edx,DWORD PTR [edx]
9f003f1c:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f003f22:	8b 00                	mov    eax,DWORD PTR [eax]
9f003f24:	29 c2                	sub    edx,eax
9f003f26:	89 d0                	mov    eax,edx
9f003f28:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f003f2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003f2e:	8d 45 fc             	lea    eax,[ebp-0x4]
9f003f31:	50                   	push   eax
9f003f32:	e8 5d fc ff ff       	call   9f003b94 <gmtime_rI>
9f003f37:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f003f3a:	c9                   	leave  
9f003f3b:	c3                   	ret    

9f003f3c <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f003f3c:	55                   	push   ebp
9f003f3d:	89 e5                	mov    ebp,esp
9f003f3f:	e8 1a 09 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f003f44:	05 58 32 00 00       	add    eax,0x3258
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f003f49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003f4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003f4f:	e8 b3 ff ff ff       	call   9f003f07 <localtime_rI>
9f003f54:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f003f57:	c9                   	leave  
9f003f58:	c3                   	ret    

9f003f59 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f003f59:	55                   	push   ebp
9f003f5a:	89 e5                	mov    ebp,esp
9f003f5c:	57                   	push   edi
9f003f5d:	56                   	push   esi
9f003f5e:	53                   	push   ebx
9f003f5f:	83 ec 20             	sub    esp,0x20
9f003f62:	e8 3d 09 00 00       	call   9f0048a4 <__x86.get_pc_thunk.cx>
9f003f67:	81 c1 35 32 00 00    	add    ecx,0x3235
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f003f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003f70:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f003f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003f76:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003f78:	ba 89 88 88 88       	mov    edx,0x88888889
9f003f7d:	89 d8                	mov    eax,ebx
9f003f7f:	f7 ea                	imul   edx
9f003f81:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003f84:	c1 f8 05             	sar    eax,0x5
9f003f87:	89 c2                	mov    edx,eax
9f003f89:	89 d8                	mov    eax,ebx
9f003f8b:	c1 f8 1f             	sar    eax,0x1f
9f003f8e:	29 c2                	sub    edx,eax
9f003f90:	89 d0                	mov    eax,edx
9f003f92:	8d 14 06             	lea    edx,[esi+eax*1]
9f003f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f003f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003f9e:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003fa0:	ba 89 88 88 88       	mov    edx,0x88888889
9f003fa5:	89 d8                	mov    eax,ebx
9f003fa7:	f7 ea                	imul   edx
9f003fa9:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003fac:	c1 f8 05             	sar    eax,0x5
9f003faf:	89 c2                	mov    edx,eax
9f003fb1:	89 d8                	mov    eax,ebx
9f003fb3:	c1 f8 1f             	sar    eax,0x1f
9f003fb6:	29 c2                	sub    edx,eax
9f003fb8:	89 d0                	mov    eax,edx
9f003fba:	89 c2                	mov    edx,eax
9f003fbc:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003fc3:	89 c2                	mov    edx,eax
9f003fc5:	89 d0                	mov    eax,edx
9f003fc7:	c1 e0 04             	shl    eax,0x4
9f003fca:	29 d0                	sub    eax,edx
9f003fcc:	29 c3                	sub    ebx,eax
9f003fce:	89 d8                	mov    eax,ebx
9f003fd0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003fd3:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f003fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fd8:	8b 00                	mov    eax,DWORD PTR [eax]
9f003fda:	85 c0                	test   eax,eax
9f003fdc:	79 1c                	jns    9f003ffa <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f003fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fe1:	8b 00                	mov    eax,DWORD PTR [eax]
9f003fe3:	8d 50 3c             	lea    edx,[eax+0x3c]
9f003fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fe9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f003feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003ff1:	8d 50 ff             	lea    edx,[eax-0x1]
9f003ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ff7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f003ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ffd:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f004000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004003:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f004006:	ba 89 88 88 88       	mov    edx,0x88888889
9f00400b:	89 d8                	mov    eax,ebx
9f00400d:	f7 ea                	imul   edx
9f00400f:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004012:	c1 f8 05             	sar    eax,0x5
9f004015:	89 c2                	mov    edx,eax
9f004017:	89 d8                	mov    eax,ebx
9f004019:	c1 f8 1f             	sar    eax,0x1f
9f00401c:	29 c2                	sub    edx,eax
9f00401e:	89 d0                	mov    eax,edx
9f004020:	8d 14 06             	lea    edx,[esi+eax*1]
9f004023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004026:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f004029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00402c:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00402f:	ba 89 88 88 88       	mov    edx,0x88888889
9f004034:	89 d8                	mov    eax,ebx
9f004036:	f7 ea                	imul   edx
9f004038:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00403b:	c1 f8 05             	sar    eax,0x5
9f00403e:	89 c2                	mov    edx,eax
9f004040:	89 d8                	mov    eax,ebx
9f004042:	c1 f8 1f             	sar    eax,0x1f
9f004045:	29 c2                	sub    edx,eax
9f004047:	89 d0                	mov    eax,edx
9f004049:	89 c2                	mov    edx,eax
9f00404b:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f004052:	89 c2                	mov    edx,eax
9f004054:	89 d0                	mov    eax,edx
9f004056:	c1 e0 04             	shl    eax,0x4
9f004059:	29 d0                	sub    eax,edx
9f00405b:	29 c3                	sub    ebx,eax
9f00405d:	89 d8                	mov    eax,ebx
9f00405f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004062:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f004065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00406b:	85 c0                	test   eax,eax
9f00406d:	79 1e                	jns    9f00408d <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f00406f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004075:	8d 50 3c             	lea    edx,[eax+0x3c]
9f004078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00407b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f00407e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004081:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004084:	8d 50 ff             	lea    edx,[eax-0x1]
9f004087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00408a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f00408d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004090:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f004093:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004098:	89 d8                	mov    eax,ebx
9f00409a:	f7 ea                	imul   edx
9f00409c:	c1 fa 02             	sar    edx,0x2
9f00409f:	89 d8                	mov    eax,ebx
9f0040a1:	c1 f8 1f             	sar    eax,0x1f
9f0040a4:	29 c2                	sub    edx,eax
9f0040a6:	89 d0                	mov    eax,edx
9f0040a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f0040ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040ae:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0040b1:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0040b6:	89 d8                	mov    eax,ebx
9f0040b8:	f7 ea                	imul   edx
9f0040ba:	c1 fa 02             	sar    edx,0x2
9f0040bd:	89 d8                	mov    eax,ebx
9f0040bf:	c1 f8 1f             	sar    eax,0x1f
9f0040c2:	29 c2                	sub    edx,eax
9f0040c4:	89 d0                	mov    eax,edx
9f0040c6:	01 c0                	add    eax,eax
9f0040c8:	01 d0                	add    eax,edx
9f0040ca:	c1 e0 03             	shl    eax,0x3
9f0040cd:	29 c3                	sub    ebx,eax
9f0040cf:	89 da                	mov    edx,ebx
9f0040d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040d4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f0040d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0040dd:	85 c0                	test   eax,eax
9f0040df:	79 13                	jns    9f0040f4 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f0040e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0040e7:	8d 50 18             	lea    edx,[eax+0x18]
9f0040ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040ed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f0040f0:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f0040f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040f7:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f0040fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040fd:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004100:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004105:	89 d8                	mov    eax,ebx
9f004107:	f7 ea                	imul   edx
9f004109:	d1 fa                	sar    edx,1
9f00410b:	89 d8                	mov    eax,ebx
9f00410d:	c1 f8 1f             	sar    eax,0x1f
9f004110:	29 c2                	sub    edx,eax
9f004112:	89 d0                	mov    eax,edx
9f004114:	8d 14 06             	lea    edx,[esi+eax*1]
9f004117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00411a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f00411d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004120:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004123:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004128:	89 d8                	mov    eax,ebx
9f00412a:	f7 ea                	imul   edx
9f00412c:	d1 fa                	sar    edx,1
9f00412e:	89 d8                	mov    eax,ebx
9f004130:	c1 f8 1f             	sar    eax,0x1f
9f004133:	29 c2                	sub    edx,eax
9f004135:	89 d0                	mov    eax,edx
9f004137:	01 c0                	add    eax,eax
9f004139:	01 d0                	add    eax,edx
9f00413b:	c1 e0 02             	shl    eax,0x2
9f00413e:	29 c3                	sub    ebx,eax
9f004140:	89 da                	mov    edx,ebx
9f004142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004145:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f004148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00414b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00414e:	85 c0                	test   eax,eax
9f004150:	79 1e                	jns    9f004170 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f004152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004155:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004158:	8d 50 0c             	lea    edx,[eax+0xc]
9f00415b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00415e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f004161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004164:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004167:	8d 50 ff             	lea    edx,[eax-0x1]
9f00416a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00416d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f004170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004173:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f004176:	83 e8 01             	sub    eax,0x1
9f004179:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f00417c:	e9 c1 00 00 00       	jmp    9f004242 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f004181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004187:	8d 50 ff             	lea    edx,[eax-0x1]
9f00418a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00418d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004193:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004196:	85 c0                	test   eax,eax
9f004198:	79 19                	jns    9f0041b3 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f00419a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00419d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041a0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0041a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041a6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f0041a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041ac:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0041b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041b6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041b9:	83 e0 03             	and    eax,0x3
9f0041bc:	85 c0                	test   eax,eax
9f0041be:	75 62                	jne    9f004222 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f0041c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041c3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041c6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0041cc:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0041d1:	89 d8                	mov    eax,ebx
9f0041d3:	f7 ea                	imul   edx
9f0041d5:	c1 fa 05             	sar    edx,0x5
9f0041d8:	89 d8                	mov    eax,ebx
9f0041da:	c1 f8 1f             	sar    eax,0x1f
9f0041dd:	29 c2                	sub    edx,eax
9f0041df:	89 d0                	mov    eax,edx
9f0041e1:	6b c0 64             	imul   eax,eax,0x64
9f0041e4:	29 c3                	sub    ebx,eax
9f0041e6:	89 d8                	mov    eax,ebx
9f0041e8:	85 c0                	test   eax,eax
9f0041ea:	75 2f                	jne    9f00421b <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f0041ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041ef:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041f2:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0041f8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0041fd:	89 d8                	mov    eax,ebx
9f0041ff:	f7 ea                	imul   edx
9f004201:	c1 fa 07             	sar    edx,0x7
9f004204:	89 d8                	mov    eax,ebx
9f004206:	c1 f8 1f             	sar    eax,0x1f
9f004209:	29 c2                	sub    edx,eax
9f00420b:	89 d0                	mov    eax,edx
9f00420d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004213:	29 c3                	sub    ebx,eax
9f004215:	89 d8                	mov    eax,ebx
9f004217:	85 c0                	test   eax,eax
9f004219:	75 07                	jne    9f004222 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f00421b:	ba 01 00 00 00       	mov    edx,0x1
9f004220:	eb 05                	jmp    9f004227 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f004222:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f004227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00422a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f00422d:	89 d0                	mov    eax,edx
9f00422f:	01 c0                	add    eax,eax
9f004231:	01 d0                	add    eax,edx
9f004233:	c1 e0 02             	shl    eax,0x2
9f004236:	01 d8                	add    eax,ebx
9f004238:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f00423f:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f004242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f004246:	0f 88 35 ff ff ff    	js     9f004181 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f00424c:	e9 c2 00 00 00       	jmp    9f004313 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004254:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004257:	83 e0 03             	and    eax,0x3
9f00425a:	85 c0                	test   eax,eax
9f00425c:	75 62                	jne    9f0042c0 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f00425e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004261:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004264:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00426a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00426f:	89 d8                	mov    eax,ebx
9f004271:	f7 ea                	imul   edx
9f004273:	c1 fa 05             	sar    edx,0x5
9f004276:	89 d8                	mov    eax,ebx
9f004278:	c1 f8 1f             	sar    eax,0x1f
9f00427b:	29 c2                	sub    edx,eax
9f00427d:	89 d0                	mov    eax,edx
9f00427f:	6b c0 64             	imul   eax,eax,0x64
9f004282:	29 c3                	sub    ebx,eax
9f004284:	89 d8                	mov    eax,ebx
9f004286:	85 c0                	test   eax,eax
9f004288:	75 2f                	jne    9f0042b9 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f00428a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00428d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004290:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004296:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00429b:	89 d8                	mov    eax,ebx
9f00429d:	f7 ea                	imul   edx
9f00429f:	c1 fa 07             	sar    edx,0x7
9f0042a2:	89 d8                	mov    eax,ebx
9f0042a4:	c1 f8 1f             	sar    eax,0x1f
9f0042a7:	29 c2                	sub    edx,eax
9f0042a9:	89 d0                	mov    eax,edx
9f0042ab:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0042b1:	29 c3                	sub    ebx,eax
9f0042b3:	89 d8                	mov    eax,ebx
9f0042b5:	85 c0                	test   eax,eax
9f0042b7:	75 07                	jne    9f0042c0 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f0042b9:	ba 01 00 00 00       	mov    edx,0x1
9f0042be:	eb 05                	jmp    9f0042c5 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f0042c0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f0042c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042c8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0042cb:	89 d0                	mov    eax,edx
9f0042cd:	01 c0                	add    eax,eax
9f0042cf:	01 d0                	add    eax,edx
9f0042d1:	c1 e0 02             	shl    eax,0x2
9f0042d4:	01 d8                	add    eax,ebx
9f0042d6:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f0042dd:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f0042e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0042e6:	8d 50 01             	lea    edx,[eax+0x1]
9f0042e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042ec:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f0042ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0042f5:	83 f8 0c             	cmp    eax,0xc
9f0042f8:	75 19                	jne    9f004313 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f0042fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042fd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f004304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004307:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00430a:	8d 50 01             	lea    edx,[eax+0x1]
9f00430d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004310:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004316:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004319:	83 e0 03             	and    eax,0x3
9f00431c:	85 c0                	test   eax,eax
9f00431e:	75 62                	jne    9f004382 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f004320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004323:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004326:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00432c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004331:	89 d8                	mov    eax,ebx
9f004333:	f7 ea                	imul   edx
9f004335:	c1 fa 05             	sar    edx,0x5
9f004338:	89 d8                	mov    eax,ebx
9f00433a:	c1 f8 1f             	sar    eax,0x1f
9f00433d:	29 c2                	sub    edx,eax
9f00433f:	89 d0                	mov    eax,edx
9f004341:	6b c0 64             	imul   eax,eax,0x64
9f004344:	29 c3                	sub    ebx,eax
9f004346:	89 d8                	mov    eax,ebx
9f004348:	85 c0                	test   eax,eax
9f00434a:	75 2f                	jne    9f00437b <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f00434c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00434f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004352:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004358:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00435d:	89 d8                	mov    eax,ebx
9f00435f:	f7 ea                	imul   edx
9f004361:	c1 fa 07             	sar    edx,0x7
9f004364:	89 d8                	mov    eax,ebx
9f004366:	c1 f8 1f             	sar    eax,0x1f
9f004369:	29 c2                	sub    edx,eax
9f00436b:	89 d0                	mov    eax,edx
9f00436d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004373:	29 c3                	sub    ebx,eax
9f004375:	89 d8                	mov    eax,ebx
9f004377:	85 c0                	test   eax,eax
9f004379:	75 07                	jne    9f004382 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f00437b:	ba 01 00 00 00       	mov    edx,0x1
9f004380:	eb 05                	jmp    9f004387 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f004382:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f004387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00438a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f00438d:	89 d0                	mov    eax,edx
9f00438f:	01 c0                	add    eax,eax
9f004391:	01 d0                	add    eax,edx
9f004393:	c1 e0 02             	shl    eax,0x2
9f004396:	01 d8                	add    eax,ebx
9f004398:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f00439f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0043a2:	0f 8e a9 fe ff ff    	jle    9f004251 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f0043a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0043ab:	8d 50 01             	lea    edx,[eax+0x1]
9f0043ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f0043b4:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f0043bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043be:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0043c1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f0043c4:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f0043ca:	39 d0                	cmp    eax,edx
9f0043cc:	7d 0a                	jge    9f0043d8 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f0043ce:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f0043d3:	e9 d0 03 00 00       	jmp    9f0047a8 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f0043d8:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f0043df:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f0043e6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f0043ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0043f3:	05 6c 07 00 00       	add    eax,0x76c
9f0043f8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f0043fb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0043fe:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004401:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f004406:	7e 07                	jle    9f00440f <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f004408:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f00440f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004412:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004415:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f00441b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f00441e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004423:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f004426:	89 c2                	mov    edx,eax
9f004428:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00442b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00442e:	8d 58 03             	lea    ebx,[eax+0x3]
9f004431:	85 c0                	test   eax,eax
9f004433:	0f 48 c3             	cmovs  eax,ebx
9f004436:	c1 f8 02             	sar    eax,0x2
9f004439:	83 c0 01             	add    eax,0x1
9f00443c:	39 c2                	cmp    edx,eax
9f00443e:	7d 04                	jge    9f004444 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f004440:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f004444:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004447:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00444a:	8d 50 03             	lea    edx,[eax+0x3]
9f00444d:	85 c0                	test   eax,eax
9f00444f:	0f 48 c2             	cmovs  eax,edx
9f004452:	c1 f8 02             	sar    eax,0x2
9f004455:	89 c3                	mov    ebx,eax
9f004457:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00445a:	83 e0 03             	and    eax,0x3
9f00445d:	85 c0                	test   eax,eax
9f00445f:	74 29                	je     9f00448a <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f004461:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004464:	99                   	cdq    
9f004465:	c1 ea 1e             	shr    edx,0x1e
9f004468:	01 d0                	add    eax,edx
9f00446a:	83 e0 03             	and    eax,0x3
9f00446d:	29 d0                	sub    eax,edx
9f00446f:	89 c6                	mov    esi,eax
9f004471:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f004474:	99                   	cdq    
9f004475:	c1 ea 1e             	shr    edx,0x1e
9f004478:	01 d0                	add    eax,edx
9f00447a:	83 e0 03             	and    eax,0x3
9f00447d:	29 d0                	sub    eax,edx
9f00447f:	39 c6                	cmp    esi,eax
9f004481:	7d 07                	jge    9f00448a <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f004483:	b8 01 00 00 00       	mov    eax,0x1
9f004488:	eb 05                	jmp    9f00448f <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f00448a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f00448f:	01 d8                	add    eax,ebx
9f004491:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f004494:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004497:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00449a:	89 c3                	mov    ebx,eax
9f00449c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044a1:	89 d8                	mov    eax,ebx
9f0044a3:	f7 ea                	imul   edx
9f0044a5:	c1 fa 05             	sar    edx,0x5
9f0044a8:	89 d8                	mov    eax,ebx
9f0044aa:	c1 f8 1f             	sar    eax,0x1f
9f0044ad:	89 d7                	mov    edi,edx
9f0044af:	29 c7                	sub    edi,eax
9f0044b1:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0044b4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044b9:	89 d8                	mov    eax,ebx
9f0044bb:	f7 ea                	imul   edx
9f0044bd:	c1 fa 05             	sar    edx,0x5
9f0044c0:	89 d8                	mov    eax,ebx
9f0044c2:	c1 f8 1f             	sar    eax,0x1f
9f0044c5:	29 c2                	sub    edx,eax
9f0044c7:	89 d0                	mov    eax,edx
9f0044c9:	6b c0 64             	imul   eax,eax,0x64
9f0044cc:	29 c3                	sub    ebx,eax
9f0044ce:	89 d8                	mov    eax,ebx
9f0044d0:	85 c0                	test   eax,eax
9f0044d2:	74 49                	je     9f00451d <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f0044d4:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0044d7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044dc:	89 d8                	mov    eax,ebx
9f0044de:	f7 ea                	imul   edx
9f0044e0:	c1 fa 05             	sar    edx,0x5
9f0044e3:	89 d8                	mov    eax,ebx
9f0044e5:	c1 f8 1f             	sar    eax,0x1f
9f0044e8:	89 d6                	mov    esi,edx
9f0044ea:	29 c6                	sub    esi,eax
9f0044ec:	6b c6 64             	imul   eax,esi,0x64
9f0044ef:	89 de                	mov    esi,ebx
9f0044f1:	29 c6                	sub    esi,eax
9f0044f3:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f0044f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044fb:	89 d8                	mov    eax,ebx
9f0044fd:	f7 ea                	imul   edx
9f0044ff:	c1 fa 05             	sar    edx,0x5
9f004502:	89 d8                	mov    eax,ebx
9f004504:	c1 f8 1f             	sar    eax,0x1f
9f004507:	29 c2                	sub    edx,eax
9f004509:	89 d0                	mov    eax,edx
9f00450b:	6b c0 64             	imul   eax,eax,0x64
9f00450e:	29 c3                	sub    ebx,eax
9f004510:	89 d8                	mov    eax,ebx
9f004512:	39 c6                	cmp    esi,eax
9f004514:	7d 07                	jge    9f00451d <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f004516:	b8 01 00 00 00       	mov    eax,0x1
9f00451b:	eb 05                	jmp    9f004522 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f00451d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f004522:	01 f8                	add    eax,edi
9f004524:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f004527:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00452a:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00452d:	89 c3                	mov    ebx,eax
9f00452f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004534:	89 d8                	mov    eax,ebx
9f004536:	f7 ea                	imul   edx
9f004538:	c1 fa 07             	sar    edx,0x7
9f00453b:	89 d8                	mov    eax,ebx
9f00453d:	c1 f8 1f             	sar    eax,0x1f
9f004540:	89 d7                	mov    edi,edx
9f004542:	29 c7                	sub    edi,eax
9f004544:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004547:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00454c:	89 d8                	mov    eax,ebx
9f00454e:	f7 ea                	imul   edx
9f004550:	c1 fa 07             	sar    edx,0x7
9f004553:	89 d8                	mov    eax,ebx
9f004555:	c1 f8 1f             	sar    eax,0x1f
9f004558:	29 c2                	sub    edx,eax
9f00455a:	89 d0                	mov    eax,edx
9f00455c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004562:	29 c3                	sub    ebx,eax
9f004564:	89 d8                	mov    eax,ebx
9f004566:	85 c0                	test   eax,eax
9f004568:	74 4f                	je     9f0045b9 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f00456a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00456d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004572:	89 d8                	mov    eax,ebx
9f004574:	f7 ea                	imul   edx
9f004576:	c1 fa 07             	sar    edx,0x7
9f004579:	89 d8                	mov    eax,ebx
9f00457b:	c1 f8 1f             	sar    eax,0x1f
9f00457e:	89 d6                	mov    esi,edx
9f004580:	29 c6                	sub    esi,eax
9f004582:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f004588:	89 de                	mov    esi,ebx
9f00458a:	29 c6                	sub    esi,eax
9f00458c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f00458f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004594:	89 d8                	mov    eax,ebx
9f004596:	f7 ea                	imul   edx
9f004598:	c1 fa 07             	sar    edx,0x7
9f00459b:	89 d8                	mov    eax,ebx
9f00459d:	c1 f8 1f             	sar    eax,0x1f
9f0045a0:	29 c2                	sub    edx,eax
9f0045a2:	89 d0                	mov    eax,edx
9f0045a4:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0045aa:	29 c3                	sub    ebx,eax
9f0045ac:	89 d8                	mov    eax,ebx
9f0045ae:	39 c6                	cmp    esi,eax
9f0045b0:	7d 07                	jge    9f0045b9 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f0045b2:	b8 01 00 00 00       	mov    eax,0x1
9f0045b7:	eb 05                	jmp    9f0045be <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f0045b9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f0045be:	01 f8                	add    eax,edi
9f0045c0:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f0045c3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f0045ca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0045cd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f0045d0:	eb 7b                	jmp    9f00464d <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f0045d2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0045d5:	83 e0 03             	and    eax,0x3
9f0045d8:	85 c0                	test   eax,eax
9f0045da:	75 50                	jne    9f00462c <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f0045dc:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0045df:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045e4:	89 d8                	mov    eax,ebx
9f0045e6:	f7 ea                	imul   edx
9f0045e8:	c1 fa 05             	sar    edx,0x5
9f0045eb:	89 d8                	mov    eax,ebx
9f0045ed:	c1 f8 1f             	sar    eax,0x1f
9f0045f0:	29 c2                	sub    edx,eax
9f0045f2:	89 d0                	mov    eax,edx
9f0045f4:	6b c0 64             	imul   eax,eax,0x64
9f0045f7:	29 c3                	sub    ebx,eax
9f0045f9:	89 d8                	mov    eax,ebx
9f0045fb:	85 c0                	test   eax,eax
9f0045fd:	75 26                	jne    9f004625 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f0045ff:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004602:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004607:	89 d8                	mov    eax,ebx
9f004609:	f7 ea                	imul   edx
9f00460b:	c1 fa 07             	sar    edx,0x7
9f00460e:	89 d8                	mov    eax,ebx
9f004610:	c1 f8 1f             	sar    eax,0x1f
9f004613:	29 c2                	sub    edx,eax
9f004615:	89 d0                	mov    eax,edx
9f004617:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00461d:	29 c3                	sub    ebx,eax
9f00461f:	89 d8                	mov    eax,ebx
9f004621:	85 c0                	test   eax,eax
9f004623:	75 07                	jne    9f00462c <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f004625:	ba 01 00 00 00       	mov    edx,0x1
9f00462a:	eb 05                	jmp    9f004631 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f00462c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f004631:	89 d0                	mov    eax,edx
9f004633:	01 c0                	add    eax,eax
9f004635:	01 d0                	add    eax,edx
9f004637:	c1 e0 02             	shl    eax,0x2
9f00463a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f00463d:	01 d0                	add    eax,edx
9f00463f:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f004646:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f004649:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f00464d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004650:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004653:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f004656:	0f 8f 76 ff ff ff    	jg     9f0045d2 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f00465c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00465f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f004662:	83 e8 01             	sub    eax,0x1
9f004665:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f004668:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00466b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00466e:	01 d0                	add    eax,edx
9f004670:	85 c0                	test   eax,eax
9f004672:	79 04                	jns    9f004678 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f004674:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f004678:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00467b:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f00467e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004681:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f004684:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f004687:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00468a:	8d 58 04             	lea    ebx,[eax+0x4]
9f00468d:	ba 93 24 49 92       	mov    edx,0x92492493
9f004692:	89 d8                	mov    eax,ebx
9f004694:	f7 ea                	imul   edx
9f004696:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004699:	c1 f8 02             	sar    eax,0x2
9f00469c:	89 c2                	mov    edx,eax
9f00469e:	89 d8                	mov    eax,ebx
9f0046a0:	c1 f8 1f             	sar    eax,0x1f
9f0046a3:	29 c2                	sub    edx,eax
9f0046a5:	89 d0                	mov    eax,edx
9f0046a7:	89 c2                	mov    edx,eax
9f0046a9:	c1 e2 03             	shl    edx,0x3
9f0046ac:	29 c2                	sub    edx,eax
9f0046ae:	89 d8                	mov    eax,ebx
9f0046b0:	29 d0                	sub    eax,edx
9f0046b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0046b5:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f0046b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0046be:	c1 e0 02             	shl    eax,0x2
9f0046c1:	89 c2                	mov    edx,eax
9f0046c3:	c1 e2 04             	shl    edx,0x4
9f0046c6:	29 c2                	sub    edx,eax
9f0046c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0046ce:	01 d0                	add    eax,edx
9f0046d0:	c1 e0 02             	shl    eax,0x2
9f0046d3:	89 c2                	mov    edx,eax
9f0046d5:	c1 e2 04             	shl    edx,0x4
9f0046d8:	29 c2                	sub    edx,eax
9f0046da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046dd:	8b 00                	mov    eax,DWORD PTR [eax]
9f0046df:	01 d0                	add    eax,edx
9f0046e1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f0046e4:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f0046e9:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f0046ec:	89 c3                	mov    ebx,eax
9f0046ee:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f0046f3:	89 d8                	mov    eax,ebx
9f0046f5:	f7 ea                	imul   edx
9f0046f7:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0046fa:	c1 f8 10             	sar    eax,0x10
9f0046fd:	89 c2                	mov    edx,eax
9f0046ff:	89 d8                	mov    eax,ebx
9f004701:	c1 f8 1f             	sar    eax,0x1f
9f004704:	29 c2                	sub    edx,eax
9f004706:	89 d0                	mov    eax,edx
9f004708:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00470b:	7d 04                	jge    9f004711 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f00470d:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f004711:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004714:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f00471a:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f00471d:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004723:	8b 00                	mov    eax,DWORD PTR [eax]
9f004725:	85 c0                	test   eax,eax
9f004727:	7e 16                	jle    9f00473f <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f004729:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f00472f:	8b 00                	mov    eax,DWORD PTR [eax]
9f004731:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f004736:	29 c2                	sub    edx,eax
9f004738:	89 d0                	mov    eax,edx
9f00473a:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f00473d:	7c 1b                	jl     9f00475a <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f00473f:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004745:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f004747:	85 c0                	test   eax,eax
9f004749:	79 13                	jns    9f00475e <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f00474b:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004751:	8b 00                	mov    eax,DWORD PTR [eax]
9f004753:	f7 d8                	neg    eax
9f004755:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004758:	7e 04                	jle    9f00475e <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f00475a:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f00475e:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004764:	8b 00                	mov    eax,DWORD PTR [eax]
9f004766:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f004769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00476c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f00476f:	85 c0                	test   eax,eax
9f004771:	74 0b                	je     9f00477e <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f004773:	8b 81 7c 00 00 00    	mov    eax,DWORD PTR [ecx+0x7c]
9f004779:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f00477c:	eb 07                	jmp    9f004785 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f00477e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f004785:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004788:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f00478b:	7e 04                	jle    9f004791 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f00478d:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f004791:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004794:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f004797:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f00479b:	74 08                	je     9f0047a5 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f00479d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0047a0:	83 e8 02             	sub    eax,0x2
9f0047a3:	eb 03                	jmp    9f0047a8 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f0047a5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f0047a8:	83 c4 20             	add    esp,0x20
9f0047ab:	5b                   	pop    ebx
9f0047ac:	5e                   	pop    esi
9f0047ad:	5f                   	pop    edi
9f0047ae:	5d                   	pop    ebp
9f0047af:	c3                   	ret    

9f0047b0 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f0047b0:	55                   	push   ebp
9f0047b1:	89 e5                	mov    ebp,esp
9f0047b3:	56                   	push   esi
9f0047b4:	53                   	push   ebx
9f0047b5:	83 ec 14             	sub    esp,0x14
9f0047b8:	e8 a1 00 00 00       	call   9f00485e <__x86.get_pc_thunk.ax>
9f0047bd:	05 df 29 00 00       	add    eax,0x29df
9f0047c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0047c5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f0047c8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f0047cf:	b8 71 01 00 00       	mov    eax,0x171
9f0047d4:	bb 00 00 00 00       	mov    ebx,0x0
9f0047d9:	b9 00 00 00 00       	mov    ecx,0x0
9f0047de:	ba 00 00 00 00       	mov    edx,0x0
9f0047e3:	be 00 00 00 00       	mov    esi,0x0
9f0047e8:	e8 fc ff ff ff       	call   9f0047e9 <gettime+0x39>
9f0047ed:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f0047f0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f0047f4:	74 11                	je     9f004807 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f0047f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0047f9:	8d 45 f4             	lea    eax,[ebp-0xc]
9f0047fc:	50                   	push   eax
9f0047fd:	e8 05 f7 ff ff       	call   9f003f07 <localtime_rI>
9f004802:	83 c4 08             	add    esp,0x8
9f004805:	eb 0f                	jmp    9f004816 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f004807:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00480a:	8d 45 f4             	lea    eax,[ebp-0xc]
9f00480d:	50                   	push   eax
9f00480e:	e8 81 f3 ff ff       	call   9f003b94 <gmtime_rI>
9f004813:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f004816:	8d 65 f8             	lea    esp,[ebp-0x8]
9f004819:	5b                   	pop    ebx
9f00481a:	5e                   	pop    esi
9f00481b:	5d                   	pop    ebp
9f00481c:	c3                   	ret    

9f00481d <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203

VISIBLE time_t time (time_t *result)
{
9f00481d:	55                   	push   ebp
9f00481e:	89 e5                	mov    ebp,esp
9f004820:	53                   	push   ebx
9f004821:	83 ec 14             	sub    esp,0x14
9f004824:	e8 77 00 00 00       	call   9f0048a0 <__x86.get_pc_thunk.bx>
9f004829:	81 c3 73 29 00 00    	add    ebx,0x2973
/home/yogi/src/os/aproj/libChrisOS/src/time.c:204
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f00482f:	83 ec 0c             	sub    esp,0xc
9f004832:	68 71 01 00 00       	push   0x171
9f004837:	e8 00 cb ff ff       	call   9f00133c <do_syscall0>
9f00483c:	83 c4 10             	add    esp,0x10
9f00483f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:205
    memcpyI(result, &ticks, 4);
9f004842:	83 ec 04             	sub    esp,0x4
9f004845:	6a 04                	push   0x4
9f004847:	8d 45 f4             	lea    eax,[ebp-0xc]
9f00484a:	50                   	push   eax
9f00484b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00484e:	e8 1d dd ff ff       	call   9f002570 <memcpyI>
9f004853:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206
    return ticks;
9f004856:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
9f004859:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00485c:	c9                   	leave  
9f00485d:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f00485e <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f00485e:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f004861:	c3                   	ret    

Disassembly of section .plt:

9f004870 <.plt>:
9f004870:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f004876:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f00487c:	00 00                	add    BYTE PTR [eax],al
9f00487e:	00 00                	add    BYTE PTR [eax],al
9f004880:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f004886:	68 00 00 00 00       	push   0x0
9f00488b:	e9 e0 ff ff ff       	jmp    9f004870 <__x86.get_pc_thunk.ax+0x12>
9f004890:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
9f004896:	68 08 00 00 00       	push   0x8
9f00489b:	e9 d0 ff ff ff       	jmp    9f004870 <__x86.get_pc_thunk.ax+0x12>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f0048a0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f0048a0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f0048a3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f0048a4 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f0048a4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f0048a7:	c3                   	ret    

Disassembly of section .eh_frame:

9f0048a8 <.eh_frame>:
9f0048a8:	14 00                	adc    al,0x0
9f0048aa:	00 00                	add    BYTE PTR [eax],al
9f0048ac:	00 00                	add    BYTE PTR [eax],al
9f0048ae:	00 00                	add    BYTE PTR [eax],al
9f0048b0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0048b3:	00 01                	add    BYTE PTR [ecx],al
9f0048b5:	7c 08                	jl     9f0048bf <__x86.get_pc_thunk.cx+0x1b>
9f0048b7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0048b9:	0c 04                	or     al,0x4
9f0048bb:	04 88                	add    al,0x88
9f0048bd:	01 00                	add    DWORD PTR [eax],eax
9f0048bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0048c2:	00 00                	add    BYTE PTR [eax],al
9f0048c4:	1c 00                	sbb    al,0x0
9f0048c6:	00 00                	add    BYTE PTR [eax],al
9f0048c8:	38 b7 ff ff 38 00    	cmp    BYTE PTR [edi+0x38ffff],dh
9f0048ce:	00 00                	add    BYTE PTR [eax],al
9f0048d0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048d9:	74 c5                	je     9f0048a0 <__x86.get_pc_thunk.bx>
9f0048db:	0c 04                	or     al,0x4
9f0048dd:	04 00                	add    al,0x0
9f0048df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0048e2:	00 00                	add    BYTE PTR [eax],al
9f0048e4:	3c 00                	cmp    al,0x0
9f0048e6:	00 00                	add    BYTE PTR [eax],al
9f0048e8:	50                   	push   eax
9f0048e9:	b7 ff                	mov    bh,0xff
9f0048eb:	ff                   	(bad)  
9f0048ec:	38 00                	cmp    BYTE PTR [eax],al
9f0048ee:	00 00                	add    BYTE PTR [eax],al
9f0048f0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0048f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0048f9:	74 c5                	je     9f0048c0 <__x86.get_pc_thunk.cx+0x1c>
9f0048fb:	0c 04                	or     al,0x4
9f0048fd:	04 00                	add    al,0x0
9f0048ff:	00 10                	add    BYTE PTR [eax],dl
9f004901:	00 00                	add    BYTE PTR [eax],al
9f004903:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f004907:	00 56 ff             	add    BYTE PTR [esi-0x1],dl
9f00490a:	ff                   	(bad)  
9f00490b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00490e:	00 00                	add    BYTE PTR [eax],al
9f004910:	00 00                	add    BYTE PTR [eax],al
9f004912:	00 00                	add    BYTE PTR [eax],al
9f004914:	24 00                	and    al,0x0
9f004916:	00 00                	add    BYTE PTR [eax],al
9f004918:	70 00                	jo     9f00491a <__x86.get_pc_thunk.cx+0x76>
9f00491a:	00 00                	add    BYTE PTR [eax],al
9f00491c:	54                   	push   esp
9f00491d:	b7 ff                	mov    bh,0xff
9f00491f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f004922:	00 00                	add    BYTE PTR [eax],al
9f004924:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004927:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00492d:	42                   	inc    edx
9f00492e:	86 03                	xchg   BYTE PTR [ebx],al
9f004930:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f004934:	c3                   	ret    
9f004935:	41                   	inc    ecx
9f004936:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00493a:	04 04                	add    al,0x4
9f00493c:	24 00                	and    al,0x0
9f00493e:	00 00                	add    BYTE PTR [eax],al
9f004940:	98                   	cwde   
9f004941:	00 00                	add    BYTE PTR [eax],al
9f004943:	00 81 b7 ff ff 55    	add    BYTE PTR [ecx+0x55ffffb7],al
9f004949:	00 00                	add    BYTE PTR [eax],al
9f00494b:	00 00                	add    BYTE PTR [eax],al
9f00494d:	41                   	inc    ecx
9f00494e:	0e                   	push   cs
9f00494f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004955:	42                   	inc    edx
9f004956:	86 03                	xchg   BYTE PTR [ebx],al
9f004958:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f00495c:	c3                   	ret    
9f00495d:	41                   	inc    ecx
9f00495e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004962:	04 04                	add    al,0x4
9f004964:	24 00                	and    al,0x0
9f004966:	00 00                	add    BYTE PTR [eax],al
9f004968:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f00496b:	00 b0 b7 ff ff 97    	add    BYTE PTR [eax-0x68000049],dh
9f004971:	00 00                	add    BYTE PTR [eax],al
9f004973:	00 00                	add    BYTE PTR [eax],al
9f004975:	41                   	inc    ecx
9f004976:	0e                   	push   cs
9f004977:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00497d:	42                   	inc    edx
9f00497e:	86 03                	xchg   BYTE PTR [ebx],al
9f004980:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f004984:	c3                   	ret    
9f004985:	41                   	inc    ecx
9f004986:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00498a:	04 04                	add    al,0x4
9f00498c:	24 00                	and    al,0x0
9f00498e:	00 00                	add    BYTE PTR [eax],al
9f004990:	e8 00 00 00 1f       	call   be004995 <tmbuf+0x1effd755>
9f004995:	b8 ff ff 97 00       	mov    eax,0x97ffff
9f00499a:	00 00                	add    BYTE PTR [eax],al
9f00499c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00499f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049a5:	42                   	inc    edx
9f0049a6:	86 03                	xchg   BYTE PTR [ebx],al
9f0049a8:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0049ac:	c3                   	ret    
9f0049ad:	41                   	inc    ecx
9f0049ae:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0049b2:	04 04                	add    al,0x4
9f0049b4:	10 00                	adc    BYTE PTR [eax],al
9f0049b6:	00 00                	add    BYTE PTR [eax],al
9f0049b8:	10 01                	adc    BYTE PTR [ecx],al
9f0049ba:	00 00                	add    BYTE PTR [eax],al
9f0049bc:	e4 fe                	in     al,0xfe
9f0049be:	ff                   	(bad)  
9f0049bf:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0049c2:	00 00                	add    BYTE PTR [eax],al
9f0049c4:	00 00                	add    BYTE PTR [eax],al
9f0049c6:	00 00                	add    BYTE PTR [eax],al
9f0049c8:	20 00                	and    BYTE PTR [eax],al
9f0049ca:	00 00                	add    BYTE PTR [eax],al
9f0049cc:	24 01                	and    al,0x1
9f0049ce:	00 00                	add    BYTE PTR [eax],al
9f0049d0:	7c b8                	jl     9f00498a <__x86.get_pc_thunk.cx+0xe6>
9f0049d2:	ff                   	(bad)  
9f0049d3:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f0049d6:	00 00                	add    BYTE PTR [eax],al
9f0049d8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0049db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049e1:	44                   	inc    esp
9f0049e2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0049e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0049e6:	c5 c3 0c             	(bad)  
9f0049e9:	04 04                	add    al,0x4
9f0049eb:	00 20                	add    BYTE PTR [eax],ah
9f0049ed:	00 00                	add    BYTE PTR [eax],al
9f0049ef:	00 48 01             	add    BYTE PTR [eax+0x1],cl
9f0049f2:	00 00                	add    BYTE PTR [eax],al
9f0049f4:	cf                   	iret   
9f0049f5:	b8 ff ff bb 00       	mov    eax,0xbbffff
9f0049fa:	00 00                	add    BYTE PTR [eax],al
9f0049fc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0049ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a05:	44                   	inc    esp
9f004a06:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a09:	b3 c5                	mov    bl,0xc5
9f004a0b:	c3                   	ret    
9f004a0c:	0c 04                	or     al,0x4
9f004a0e:	04 00                	add    al,0x0
9f004a10:	20 00                	and    BYTE PTR [eax],al
9f004a12:	00 00                	add    BYTE PTR [eax],al
9f004a14:	6c                   	ins    BYTE PTR es:[edi],dx
9f004a15:	01 00                	add    DWORD PTR [eax],eax
9f004a17:	00 66 b9             	add    BYTE PTR [esi-0x47],ah
9f004a1a:	ff                   	(bad)  
9f004a1b:	ff                   	(bad)  
9f004a1c:	bb 00 00 00 00       	mov    ebx,0x0
9f004a21:	41                   	inc    ecx
9f004a22:	0e                   	push   cs
9f004a23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a29:	44                   	inc    esp
9f004a2a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a2d:	b3 c5                	mov    bl,0xc5
9f004a2f:	c3                   	ret    
9f004a30:	0c 04                	or     al,0x4
9f004a32:	04 00                	add    al,0x0
9f004a34:	1c 00                	sbb    al,0x0
9f004a36:	00 00                	add    BYTE PTR [eax],al
9f004a38:	90                   	nop
9f004a39:	01 00                	add    DWORD PTR [eax],eax
9f004a3b:	00 fd                	add    ch,bh
9f004a3d:	b9 ff ff 5c 00       	mov    ecx,0x5cffff
9f004a42:	00 00                	add    BYTE PTR [eax],al
9f004a44:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a4d:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f004a50:	0c 04                	or     al,0x4
9f004a52:	04 00                	add    al,0x0
9f004a54:	20 00                	and    BYTE PTR [eax],al
9f004a56:	00 00                	add    BYTE PTR [eax],al
9f004a58:	b0 01                	mov    al,0x1
9f004a5a:	00 00                	add    BYTE PTR [eax],al
9f004a5c:	3c ba                	cmp    al,0xba
9f004a5e:	ff                   	(bad)  
9f004a5f:	ff                   	(bad)  
9f004a60:	ba 00 00 00 00       	mov    edx,0x0
9f004a65:	41                   	inc    ecx
9f004a66:	0e                   	push   cs
9f004a67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a6d:	44                   	inc    esp
9f004a6e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a71:	b2 c5                	mov    dl,0xc5
9f004a73:	c3                   	ret    
9f004a74:	0c 04                	or     al,0x4
9f004a76:	04 00                	add    al,0x0
9f004a78:	20 00                	and    BYTE PTR [eax],al
9f004a7a:	00 00                	add    BYTE PTR [eax],al
9f004a7c:	d4 01                	aam    0x1
9f004a7e:	00 00                	add    BYTE PTR [eax],al
9f004a80:	d2 ba ff ff 5a 00    	sar    BYTE PTR [edx+0x5affff],cl
9f004a86:	00 00                	add    BYTE PTR [eax],al
9f004a88:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a91:	44                   	inc    esp
9f004a92:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a95:	52                   	push   edx
9f004a96:	c5 c3 0c             	(bad)  
9f004a99:	04 04                	add    al,0x4
9f004a9b:	00 20                	add    BYTE PTR [eax],ah
9f004a9d:	00 00                	add    BYTE PTR [eax],al
9f004a9f:	00 f8                	add    al,bh
9f004aa1:	01 00                	add    DWORD PTR [eax],eax
9f004aa3:	00 08                	add    BYTE PTR [eax],cl
9f004aa5:	bb ff ff 5a 00       	mov    ebx,0x5affff
9f004aaa:	00 00                	add    BYTE PTR [eax],al
9f004aac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004aaf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ab5:	44                   	inc    esp
9f004ab6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004ab9:	52                   	push   edx
9f004aba:	c5 c3 0c             	(bad)  
9f004abd:	04 04                	add    al,0x4
9f004abf:	00 20                	add    BYTE PTR [eax],ah
9f004ac1:	00 00                	add    BYTE PTR [eax],al
9f004ac3:	00 1c 02             	add    BYTE PTR [edx+eax*1],bl
9f004ac6:	00 00                	add    BYTE PTR [eax],al
9f004ac8:	40                   	inc    eax
9f004ac9:	bb ff ff aa 00       	mov    ebx,0xaaffff
9f004ace:	00 00                	add    BYTE PTR [eax],al
9f004ad0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ad3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ad9:	44                   	inc    esp
9f004ada:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004add:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f004ae2:	04 00                	add    al,0x0
9f004ae4:	1c 00                	sbb    al,0x0
9f004ae6:	00 00                	add    BYTE PTR [eax],al
9f004ae8:	40                   	inc    eax
9f004ae9:	02 00                	add    al,BYTE PTR [eax]
9f004aeb:	00 c6                	add    dh,al
9f004aed:	bb ff ff 23 00       	mov    ebx,0x23ffff
9f004af2:	00 00                	add    BYTE PTR [eax],al
9f004af4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004af7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004afd:	5f                   	pop    edi
9f004afe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b01:	04 00                	add    al,0x0
9f004b03:	00 20                	add    BYTE PTR [eax],ah
9f004b05:	00 00                	add    BYTE PTR [eax],al
9f004b07:	00 60 02             	add    BYTE PTR [eax+0x2],ah
9f004b0a:	00 00                	add    BYTE PTR [eax],al
9f004b0c:	c9                   	leave  
9f004b0d:	bb ff ff c1 01       	mov    ebx,0x1c1ffff
9f004b12:	00 00                	add    BYTE PTR [eax],al
9f004b14:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b1d:	44                   	inc    esp
9f004b1e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004b21:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f004b26:	04 04                	add    al,0x4
9f004b28:	20 00                	and    BYTE PTR [eax],al
9f004b2a:	00 00                	add    BYTE PTR [eax],al
9f004b2c:	84 02                	test   BYTE PTR [edx],al
9f004b2e:	00 00                	add    BYTE PTR [eax],al
9f004b30:	66 bd ff ff          	mov    bp,0xffff
9f004b34:	2c 00                	sub    al,0x0
9f004b36:	00 00                	add    BYTE PTR [eax],al
9f004b38:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b41:	44                   	inc    esp
9f004b42:	83 03 64             	add    DWORD PTR [ebx],0x64
9f004b45:	c5 c3 0c             	(bad)  
9f004b48:	04 04                	add    al,0x4
9f004b4a:	00 00                	add    BYTE PTR [eax],al
9f004b4c:	1c 00                	sbb    al,0x0
9f004b4e:	00 00                	add    BYTE PTR [eax],al
9f004b50:	a8 02                	test   al,0x2
9f004b52:	00 00                	add    BYTE PTR [eax],al
9f004b54:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004b55:	bd ff ff 23 00       	mov    ebp,0x23ffff
9f004b5a:	00 00                	add    BYTE PTR [eax],al
9f004b5c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b5f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b65:	5f                   	pop    edi
9f004b66:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b69:	04 00                	add    al,0x0
9f004b6b:	00 20                	add    BYTE PTR [eax],ah
9f004b6d:	00 00                	add    BYTE PTR [eax],al
9f004b6f:	00 c8                	add    al,cl
9f004b71:	02 00                	add    al,BYTE PTR [eax]
9f004b73:	00 74 bd ff          	add    BYTE PTR [ebp+edi*4-0x1],dh
9f004b77:	ff 31                	push   DWORD PTR [ecx]
9f004b79:	00 00                	add    BYTE PTR [eax],al
9f004b7b:	00 00                	add    BYTE PTR [eax],al
9f004b7d:	41                   	inc    ecx
9f004b7e:	0e                   	push   cs
9f004b7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b85:	44                   	inc    esp
9f004b86:	83 03 69             	add    DWORD PTR [ebx],0x69
9f004b89:	c5 c3 0c             	(bad)  
9f004b8c:	04 04                	add    al,0x4
9f004b8e:	00 00                	add    BYTE PTR [eax],al
9f004b90:	20 00                	and    BYTE PTR [eax],al
9f004b92:	00 00                	add    BYTE PTR [eax],al
9f004b94:	ec                   	in     al,dx
9f004b95:	02 00                	add    al,BYTE PTR [eax]
9f004b97:	00 81 bd ff ff 2c    	add    BYTE PTR [ecx+0x2cffffbd],al
9f004b9d:	00 00                	add    BYTE PTR [eax],al
9f004b9f:	00 00                	add    BYTE PTR [eax],al
9f004ba1:	41                   	inc    ecx
9f004ba2:	0e                   	push   cs
9f004ba3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ba9:	44                   	inc    esp
9f004baa:	83 03 64             	add    DWORD PTR [ebx],0x64
9f004bad:	c5 c3 0c             	(bad)  
9f004bb0:	04 04                	add    al,0x4
9f004bb2:	00 00                	add    BYTE PTR [eax],al
9f004bb4:	20 00                	and    BYTE PTR [eax],al
9f004bb6:	00 00                	add    BYTE PTR [eax],al
9f004bb8:	10 03                	adc    BYTE PTR [ebx],al
9f004bba:	00 00                	add    BYTE PTR [eax],al
9f004bbc:	89 bd ff ff 59 00    	mov    DWORD PTR [ebp+0x59ffff],edi
9f004bc2:	00 00                	add    BYTE PTR [eax],al
9f004bc4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bc7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bcd:	44                   	inc    esp
9f004bce:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004bd1:	51                   	push   ecx
9f004bd2:	c5 c3 0c             	(bad)  
9f004bd5:	04 04                	add    al,0x4
9f004bd7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004bda:	00 00                	add    BYTE PTR [eax],al
9f004bdc:	34 03                	xor    al,0x3
9f004bde:	00 00                	add    BYTE PTR [eax],al
9f004be0:	be bd ff ff 93       	mov    esi,0x93ffffbd
9f004be5:	00 00                	add    BYTE PTR [eax],al
9f004be7:	00 00                	add    BYTE PTR [eax],al
9f004be9:	41                   	inc    ecx
9f004bea:	0e                   	push   cs
9f004beb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bf1:	45                   	inc    ebp
9f004bf2:	86 03                	xchg   BYTE PTR [ebx],al
9f004bf4:	83 04 02 88          	add    DWORD PTR [edx+eax*1],0xffffff88
9f004bf8:	c3                   	ret    
9f004bf9:	41                   	inc    ecx
9f004bfa:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004bfe:	04 04                	add    al,0x4
9f004c00:	20 00                	and    BYTE PTR [eax],al
9f004c02:	00 00                	add    BYTE PTR [eax],al
9f004c04:	5c                   	pop    esp
9f004c05:	03 00                	add    eax,DWORD PTR [eax]
9f004c07:	00 29                	add    BYTE PTR [ecx],ch
9f004c09:	be ff ff 2a 00       	mov    esi,0x2affff
9f004c0e:	00 00                	add    BYTE PTR [eax],al
9f004c10:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c19:	44                   	inc    esp
9f004c1a:	83 03 62             	add    DWORD PTR [ebx],0x62
9f004c1d:	c5 c3 0c             	(bad)  
9f004c20:	04 04                	add    al,0x4
9f004c22:	00 00                	add    BYTE PTR [eax],al
9f004c24:	24 00                	and    al,0x0
9f004c26:	00 00                	add    BYTE PTR [eax],al
9f004c28:	80 03 00             	add    BYTE PTR [ebx],0x0
9f004c2b:	00 2f                	add    BYTE PTR [edi],ch
9f004c2d:	be ff ff 35 00       	mov    esi,0x35ffff
9f004c32:	00 00                	add    BYTE PTR [eax],al
9f004c34:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c3d:	42                   	inc    edx
9f004c3e:	86 03                	xchg   BYTE PTR [ebx],al
9f004c40:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004c47:	c5 
9f004c48:	0c 04                	or     al,0x4
9f004c4a:	04 00                	add    al,0x0
9f004c4c:	1c 00                	sbb    al,0x0
9f004c4e:	00 00                	add    BYTE PTR [eax],al
9f004c50:	a8 03                	test   al,0x3
9f004c52:	00 00                	add    BYTE PTR [eax],al
9f004c54:	3c be                	cmp    al,0xbe
9f004c56:	ff                   	(bad)  
9f004c57:	ff 26                	jmp    DWORD PTR [esi]
9f004c59:	00 00                	add    BYTE PTR [eax],al
9f004c5b:	00 00                	add    BYTE PTR [eax],al
9f004c5d:	41                   	inc    ecx
9f004c5e:	0e                   	push   cs
9f004c5f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c65:	62                   	(bad)  
9f004c66:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c69:	04 00                	add    al,0x0
9f004c6b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004c6e:	00 00                	add    BYTE PTR [eax],al
9f004c70:	c8 03 00 00          	enter  0x3,0x0
9f004c74:	42                   	inc    edx
9f004c75:	be ff ff 35 00       	mov    esi,0x35ffff
9f004c7a:	00 00                	add    BYTE PTR [eax],al
9f004c7c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c85:	42                   	inc    edx
9f004c86:	86 03                	xchg   BYTE PTR [ebx],al
9f004c88:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004c8f:	c5 
9f004c90:	0c 04                	or     al,0x4
9f004c92:	04 00                	add    al,0x0
9f004c94:	1c 00                	sbb    al,0x0
9f004c96:	00 00                	add    BYTE PTR [eax],al
9f004c98:	f0 03 00             	lock add eax,DWORD PTR [eax]
9f004c9b:	00 4f be             	add    BYTE PTR [edi-0x42],cl
9f004c9e:	ff                   	(bad)  
9f004c9f:	ff 26                	jmp    DWORD PTR [esi]
9f004ca1:	00 00                	add    BYTE PTR [eax],al
9f004ca3:	00 00                	add    BYTE PTR [eax],al
9f004ca5:	41                   	inc    ecx
9f004ca6:	0e                   	push   cs
9f004ca7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cad:	62                   	(bad)  
9f004cae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004cb1:	04 00                	add    al,0x0
9f004cb3:	00 20                	add    BYTE PTR [eax],ah
9f004cb5:	00 00                	add    BYTE PTR [eax],al
9f004cb7:	00 10                	add    BYTE PTR [eax],dl
9f004cb9:	04 00                	add    al,0x0
9f004cbb:	00 55 be             	add    BYTE PTR [ebp-0x42],dl
9f004cbe:	ff                   	(bad)  
9f004cbf:	ff 2e                	jmp    FWORD PTR [esi]
9f004cc1:	00 00                	add    BYTE PTR [eax],al
9f004cc3:	00 00                	add    BYTE PTR [eax],al
9f004cc5:	41                   	inc    ecx
9f004cc6:	0e                   	push   cs
9f004cc7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ccd:	44                   	inc    esp
9f004cce:	83 03 66             	add    DWORD PTR [ebx],0x66
9f004cd1:	c5 c3 0c             	(bad)  
9f004cd4:	04 04                	add    al,0x4
9f004cd6:	00 00                	add    BYTE PTR [eax],al
9f004cd8:	1c 00                	sbb    al,0x0
9f004cda:	00 00                	add    BYTE PTR [eax],al
9f004cdc:	34 04                	xor    al,0x4
9f004cde:	00 00                	add    BYTE PTR [eax],al
9f004ce0:	5f                   	pop    edi
9f004ce1:	be ff ff 26 00       	mov    esi,0x26ffff
9f004ce6:	00 00                	add    BYTE PTR [eax],al
9f004ce8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ceb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cf1:	62                   	(bad)  
9f004cf2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004cf5:	04 00                	add    al,0x0
9f004cf7:	00 20                	add    BYTE PTR [eax],ah
9f004cf9:	00 00                	add    BYTE PTR [eax],al
9f004cfb:	00 54 04 00          	add    BYTE PTR [esp+eax*1+0x0],dl
9f004cff:	00 65 be             	add    BYTE PTR [ebp-0x42],ah
9f004d02:	ff                   	(bad)  
9f004d03:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f004d09:	41                   	inc    ecx
9f004d0a:	0e                   	push   cs
9f004d0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d11:	44                   	inc    esp
9f004d12:	83 03 65             	add    DWORD PTR [ebx],0x65
9f004d15:	c5 c3 0c             	(bad)  
9f004d18:	04 04                	add    al,0x4
9f004d1a:	00 00                	add    BYTE PTR [eax],al
9f004d1c:	1c 00                	sbb    al,0x0
9f004d1e:	00 00                	add    BYTE PTR [eax],al
9f004d20:	78 04                	js     9f004d26 <__x86.get_pc_thunk.cx+0x482>
9f004d22:	00 00                	add    BYTE PTR [eax],al
9f004d24:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004d25:	be ff ff 23 00       	mov    esi,0x23ffff
9f004d2a:	00 00                	add    BYTE PTR [eax],al
9f004d2c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d35:	5f                   	pop    edi
9f004d36:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d39:	04 00                	add    al,0x0
9f004d3b:	00 20                	add    BYTE PTR [eax],ah
9f004d3d:	00 00                	add    BYTE PTR [eax],al
9f004d3f:	00 98 04 00 00 71    	add    BYTE PTR [eax+0x71000004],bl
9f004d45:	be ff ff f5 02       	mov    esi,0x2f5ffff
9f004d4a:	00 00                	add    BYTE PTR [eax],al
9f004d4c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d55:	44                   	inc    esp
9f004d56:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004d59:	ed                   	in     eax,dx
9f004d5a:	02 c5                	add    al,ch
9f004d5c:	c3                   	ret    
9f004d5d:	0c 04                	or     al,0x4
9f004d5f:	04 20                	add    al,0x20
9f004d61:	00 00                	add    BYTE PTR [eax],al
9f004d63:	00 bc 04 00 00 42 c1 	add    BYTE PTR [esp+eax*1-0x3ebe0000],bh
9f004d6a:	ff                   	(bad)  
9f004d6b:	ff 29                	jmp    FWORD PTR [ecx]
9f004d6d:	00 00                	add    BYTE PTR [eax],al
9f004d6f:	00 00                	add    BYTE PTR [eax],al
9f004d71:	41                   	inc    ecx
9f004d72:	0e                   	push   cs
9f004d73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d79:	44                   	inc    esp
9f004d7a:	83 03 61             	add    DWORD PTR [ebx],0x61
9f004d7d:	c5 c3 0c             	(bad)  
9f004d80:	04 04                	add    al,0x4
9f004d82:	00 00                	add    BYTE PTR [eax],al
9f004d84:	1c 00                	sbb    al,0x0
9f004d86:	00 00                	add    BYTE PTR [eax],al
9f004d88:	e0 04                	loopne 9f004d8e <__x86.get_pc_thunk.cx+0x4ea>
9f004d8a:	00 00                	add    BYTE PTR [eax],al
9f004d8c:	47                   	inc    edi
9f004d8d:	c1 ff ff             	sar    edi,0xff
9f004d90:	20 00                	and    BYTE PTR [eax],al
9f004d92:	00 00                	add    BYTE PTR [eax],al
9f004d94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d9d:	5c                   	pop    esp
9f004d9e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004da1:	04 00                	add    al,0x0
9f004da3:	00 20                	add    BYTE PTR [eax],ah
9f004da5:	00 00                	add    BYTE PTR [eax],al
9f004da7:	00 00                	add    BYTE PTR [eax],al
9f004da9:	05 00 00 47 c1       	add    eax,0xc1470000
9f004dae:	ff                   	(bad)  
9f004daf:	ff c1                	inc    ecx
9f004db1:	01 00                	add    DWORD PTR [eax],eax
9f004db3:	00 00                	add    BYTE PTR [eax],al
9f004db5:	41                   	inc    ecx
9f004db6:	0e                   	push   cs
9f004db7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004dbd:	44                   	inc    esp
9f004dbe:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004dc1:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f004dc6:	04 04                	add    al,0x4
9f004dc8:	1c 00                	sbb    al,0x0
9f004dca:	00 00                	add    BYTE PTR [eax],al
9f004dcc:	24 05                	and    al,0x5
9f004dce:	00 00                	add    BYTE PTR [eax],al
9f004dd0:	e4 c2                	in     al,0xc2
9f004dd2:	ff                   	(bad)  
9f004dd3:	ff 26                	jmp    DWORD PTR [esi]
9f004dd5:	00 00                	add    BYTE PTR [eax],al
9f004dd7:	00 00                	add    BYTE PTR [eax],al
9f004dd9:	41                   	inc    ecx
9f004dda:	0e                   	push   cs
9f004ddb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004de1:	62                   	(bad)  
9f004de2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004de5:	04 00                	add    al,0x0
9f004de7:	00 20                	add    BYTE PTR [eax],ah
9f004de9:	00 00                	add    BYTE PTR [eax],al
9f004deb:	00 44 05 00          	add    BYTE PTR [ebp+eax*1+0x0],al
9f004def:	00 ec                	add    ah,ch
9f004df1:	c2 ff ff             	ret    0xffff
9f004df4:	26 00 00             	add    BYTE PTR es:[eax],al
9f004df7:	00 00                	add    BYTE PTR [eax],al
9f004df9:	41                   	inc    ecx
9f004dfa:	0e                   	push   cs
9f004dfb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e01:	41                   	inc    ecx
9f004e02:	83 03 60             	add    DWORD PTR [ebx],0x60
9f004e05:	c3                   	ret    
9f004e06:	41                   	inc    ecx
9f004e07:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e0a:	04 00                	add    al,0x0
9f004e0c:	20 00                	and    BYTE PTR [eax],al
9f004e0e:	00 00                	add    BYTE PTR [eax],al
9f004e10:	68 05 00 00 ee       	push   0xee000005
9f004e15:	c2 ff ff             	ret    0xffff
9f004e18:	43                   	inc    ebx
9f004e19:	00 00                	add    BYTE PTR [eax],al
9f004e1b:	00 00                	add    BYTE PTR [eax],al
9f004e1d:	41                   	inc    ecx
9f004e1e:	0e                   	push   cs
9f004e1f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e25:	44                   	inc    esp
9f004e26:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004e29:	c3                   	ret    
9f004e2a:	41                   	inc    ecx
9f004e2b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e2e:	04 00                	add    al,0x0
9f004e30:	20 00                	and    BYTE PTR [eax],al
9f004e32:	00 00                	add    BYTE PTR [eax],al
9f004e34:	8c 05 00 00 0d c3    	mov    WORD PTR ds:0xc30d0000,es
9f004e3a:	ff                   	(bad)  
9f004e3b:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f004e3e:	00 00                	add    BYTE PTR [eax],al
9f004e40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e49:	44                   	inc    esp
9f004e4a:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004e4d:	c3                   	ret    
9f004e4e:	41                   	inc    ecx
9f004e4f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e52:	04 00                	add    al,0x0
9f004e54:	20 00                	and    BYTE PTR [eax],al
9f004e56:	00 00                	add    BYTE PTR [eax],al
9f004e58:	b0 05                	mov    al,0x5
9f004e5a:	00 00                	add    BYTE PTR [eax],al
9f004e5c:	2c c3                	sub    al,0xc3
9f004e5e:	ff                   	(bad)  
9f004e5f:	ff                   	(bad)  
9f004e60:	bd 00 00 00 00       	mov    ebp,0x0
9f004e65:	41                   	inc    ecx
9f004e66:	0e                   	push   cs
9f004e67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e6d:	44                   	inc    esp
9f004e6e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004e71:	b5 c5                	mov    ch,0xc5
9f004e73:	c3                   	ret    
9f004e74:	0c 04                	or     al,0x4
9f004e76:	04 00                	add    al,0x0
9f004e78:	24 00                	and    al,0x0
9f004e7a:	00 00                	add    BYTE PTR [eax],al
9f004e7c:	d4 05                	aam    0x5
9f004e7e:	00 00                	add    BYTE PTR [eax],al
9f004e80:	c8 c3 ff ff          	enter  0xffc3,0xff
9f004e84:	3a 00                	cmp    al,BYTE PTR [eax]
9f004e86:	00 00                	add    BYTE PTR [eax],al
9f004e88:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e8b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e91:	45                   	inc    ebp
9f004e92:	86 03                	xchg   BYTE PTR [ebx],al
9f004e94:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f004e98:	41                   	inc    ecx
9f004e99:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004e9d:	04 04                	add    al,0x4
9f004e9f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004ea2:	00 00                	add    BYTE PTR [eax],al
9f004ea4:	fc                   	cld    
9f004ea5:	05 00 00 da c3       	add    eax,0xc3da0000
9f004eaa:	ff                   	(bad)  
9f004eab:	ff                   	(bad)  
9f004eac:	3c 00                	cmp    al,0x0
9f004eae:	00 00                	add    BYTE PTR [eax],al
9f004eb0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004eb3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004eb9:	45                   	inc    ebp
9f004eba:	86 03                	xchg   BYTE PTR [ebx],al
9f004ebc:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f004ec0:	41                   	inc    ecx
9f004ec1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004ec5:	04 04                	add    al,0x4
9f004ec7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004eca:	00 00                	add    BYTE PTR [eax],al
9f004ecc:	24 06                	and    al,0x6
9f004ece:	00 00                	add    BYTE PTR [eax],al
9f004ed0:	ee                   	out    dx,al
9f004ed1:	c3                   	ret    
9f004ed2:	ff                   	(bad)  
9f004ed3:	ff                   	(bad)  
9f004ed4:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f004ed7:	00 00                	add    BYTE PTR [eax],al
9f004ed9:	41                   	inc    ecx
9f004eda:	0e                   	push   cs
9f004edb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ee1:	45                   	inc    ebp
9f004ee2:	86 03                	xchg   BYTE PTR [ebx],al
9f004ee4:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f004ee8:	41                   	inc    ecx
9f004ee9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004eed:	04 04                	add    al,0x4
9f004eef:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004ef2:	00 00                	add    BYTE PTR [eax],al
9f004ef4:	4c                   	dec    esp
9f004ef5:	06                   	push   es
9f004ef6:	00 00                	add    BYTE PTR [eax],al
9f004ef8:	04 c4                	add    al,0xc4
9f004efa:	ff                   	(bad)  
9f004efb:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004efe:	00 00                	add    BYTE PTR [eax],al
9f004f00:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004f03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f09:	45                   	inc    ebp
9f004f0a:	86 03                	xchg   BYTE PTR [ebx],al
9f004f0c:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f004f13:	c5 
9f004f14:	0c 04                	or     al,0x4
9f004f16:	04 00                	add    al,0x0
9f004f18:	24 00                	and    al,0x0
9f004f1a:	00 00                	add    BYTE PTR [eax],al
9f004f1c:	74 06                	je     9f004f24 <__x86.get_pc_thunk.cx+0x680>
9f004f1e:	00 00                	add    BYTE PTR [eax],al
9f004f20:	1c c4                	sbb    al,0xc4
9f004f22:	ff                   	(bad)  
9f004f23:	ff 42 00             	inc    DWORD PTR [edx+0x0]
9f004f26:	00 00                	add    BYTE PTR [eax],al
9f004f28:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004f2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f31:	45                   	inc    ebp
9f004f32:	86 03                	xchg   BYTE PTR [ebx],al
9f004f34:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f004f38:	41                   	inc    ecx
9f004f39:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004f3d:	04 04                	add    al,0x4
9f004f3f:	00 20                	add    BYTE PTR [eax],ah
9f004f41:	00 00                	add    BYTE PTR [eax],al
9f004f43:	00 9c 06 00 00 36 c4 	add    BYTE PTR [esi+eax*1-0x3bca0000],bl
9f004f4a:	ff                   	(bad)  
9f004f4b:	ff cb                	dec    ebx
9f004f4d:	00 00                	add    BYTE PTR [eax],al
9f004f4f:	00 00                	add    BYTE PTR [eax],al
9f004f51:	41                   	inc    ecx
9f004f52:	0e                   	push   cs
9f004f53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f59:	44                   	inc    esp
9f004f5a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004f5d:	c3                   	ret    
9f004f5e:	c5 c3 0c             	(bad)  
9f004f61:	04 04                	add    al,0x4
9f004f63:	00 20                	add    BYTE PTR [eax],ah
9f004f65:	00 00                	add    BYTE PTR [eax],al
9f004f67:	00 c0                	add    al,al
9f004f69:	06                   	push   es
9f004f6a:	00 00                	add    BYTE PTR [eax],al
9f004f6c:	dd c4                	ffree  st(4)
9f004f6e:	ff                   	(bad)  
9f004f6f:	ff 23                	jmp    DWORD PTR [ebx]
9f004f71:	00 00                	add    BYTE PTR [eax],al
9f004f73:	00 00                	add    BYTE PTR [eax],al
9f004f75:	41                   	inc    ecx
9f004f76:	0e                   	push   cs
9f004f77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f7d:	44                   	inc    esp
9f004f7e:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f004f81:	c3                   	ret    
9f004f82:	41                   	inc    ecx
9f004f83:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004f86:	04 00                	add    al,0x0
9f004f88:	20 00                	and    BYTE PTR [eax],al
9f004f8a:	00 00                	add    BYTE PTR [eax],al
9f004f8c:	e4 06                	in     al,0x6
9f004f8e:	00 00                	add    BYTE PTR [eax],al
9f004f90:	dc c4                	fadd   st(4),st
9f004f92:	ff                   	(bad)  
9f004f93:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f004f96:	00 00                	add    BYTE PTR [eax],al
9f004f98:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004f9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004fa1:	44                   	inc    esp
9f004fa2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004fa5:	51                   	push   ecx
9f004fa6:	c5 c3 0c             	(bad)  
9f004fa9:	04 04                	add    al,0x4
9f004fab:	00 20                	add    BYTE PTR [eax],ah
9f004fad:	00 00                	add    BYTE PTR [eax],al
9f004faf:	00 08                	add    BYTE PTR [eax],cl
9f004fb1:	07                   	pop    es
9f004fb2:	00 00                	add    BYTE PTR [eax],al
9f004fb4:	11 c5                	adc    ebp,eax
9f004fb6:	ff                   	(bad)  
9f004fb7:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f004fbb:	00 00                	add    BYTE PTR [eax],al
9f004fbd:	41                   	inc    ecx
9f004fbe:	0e                   	push   cs
9f004fbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004fc5:	44                   	inc    esp
9f004fc6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004fc9:	4c                   	dec    esp
9f004fca:	c5 c3 0c             	(bad)  
9f004fcd:	04 04                	add    al,0x4
9f004fcf:	00 20                	add    BYTE PTR [eax],ah
9f004fd1:	00 00                	add    BYTE PTR [eax],al
9f004fd3:	00 2c 07             	add    BYTE PTR [edi+eax*1],ch
9f004fd6:	00 00                	add    BYTE PTR [eax],al
9f004fd8:	41                   	inc    ecx
9f004fd9:	c5 ff ff             	(bad)  
9f004fdc:	54                   	push   esp
9f004fdd:	00 00                	add    BYTE PTR [eax],al
9f004fdf:	00 00                	add    BYTE PTR [eax],al
9f004fe1:	41                   	inc    ecx
9f004fe2:	0e                   	push   cs
9f004fe3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004fe9:	44                   	inc    esp
9f004fea:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004fed:	4c                   	dec    esp
9f004fee:	c5 c3 0c             	(bad)  
9f004ff1:	04 04                	add    al,0x4
9f004ff3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004ff6:	00 00                	add    BYTE PTR [eax],al
9f004ff8:	50                   	push   eax
9f004ff9:	07                   	pop    es
9f004ffa:	00 00                	add    BYTE PTR [eax],al
9f004ffc:	71 c5                	jno    9f004fc3 <__x86.get_pc_thunk.cx+0x71f>
9f004ffe:	ff                   	(bad)  
9f004fff:	ff 34 00             	push   DWORD PTR [eax+eax*1]
9f005002:	00 00                	add    BYTE PTR [eax],al
9f005004:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005007:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00500d:	70 c5                	jo     9f004fd4 <__x86.get_pc_thunk.cx+0x730>
9f00500f:	0c 04                	or     al,0x4
9f005011:	04 00                	add    al,0x0
9f005013:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005016:	00 00                	add    BYTE PTR [eax],al
9f005018:	70 07                	jo     9f005021 <__x86.get_pc_thunk.cx+0x77d>
9f00501a:	00 00                	add    BYTE PTR [eax],al
9f00501c:	85 c5                	test   ebp,eax
9f00501e:	ff                   	(bad)  
9f00501f:	ff 37                	push   DWORD PTR [edi]
9f005021:	00 00                	add    BYTE PTR [eax],al
9f005023:	00 00                	add    BYTE PTR [eax],al
9f005025:	41                   	inc    ecx
9f005026:	0e                   	push   cs
9f005027:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00502d:	73 c5                	jae    9f004ff4 <__x86.get_pc_thunk.cx+0x750>
9f00502f:	0c 04                	or     al,0x4
9f005031:	04 00                	add    al,0x0
9f005033:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005036:	00 00                	add    BYTE PTR [eax],al
9f005038:	90                   	nop
9f005039:	07                   	pop    es
9f00503a:	00 00                	add    BYTE PTR [eax],al
9f00503c:	9c                   	pushf  
9f00503d:	c5 ff ff             	(bad)  
9f005040:	37                   	aaa    
9f005041:	00 00                	add    BYTE PTR [eax],al
9f005043:	00 00                	add    BYTE PTR [eax],al
9f005045:	41                   	inc    ecx
9f005046:	0e                   	push   cs
9f005047:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00504d:	73 c5                	jae    9f005014 <__x86.get_pc_thunk.cx+0x770>
9f00504f:	0c 04                	or     al,0x4
9f005051:	04 00                	add    al,0x0
9f005053:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005056:	00 00                	add    BYTE PTR [eax],al
9f005058:	b0 07                	mov    al,0x7
9f00505a:	00 00                	add    BYTE PTR [eax],al
9f00505c:	b3 c5                	mov    bl,0xc5
9f00505e:	ff                   	(bad)  
9f00505f:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f005062:	00 00                	add    BYTE PTR [eax],al
9f005064:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005067:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00506d:	45                   	inc    ebp
9f00506e:	86 03                	xchg   BYTE PTR [ebx],al
9f005070:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f005074:	c3                   	ret    
9f005075:	41                   	inc    ecx
9f005076:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00507a:	04 04                	add    al,0x4
9f00507c:	24 00                	and    al,0x0
9f00507e:	00 00                	add    BYTE PTR [eax],al
9f005080:	d8 07                	fadd   DWORD PTR [edi]
9f005082:	00 00                	add    BYTE PTR [eax],al
9f005084:	fb                   	sti    
9f005085:	c5 ff ff             	(bad)  
9f005088:	70 00                	jo     9f00508a <__x86.get_pc_thunk.cx+0x7e6>
9f00508a:	00 00                	add    BYTE PTR [eax],al
9f00508c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00508f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005095:	45                   	inc    ebp
9f005096:	86 03                	xchg   BYTE PTR [ebx],al
9f005098:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f00509c:	c3                   	ret    
9f00509d:	41                   	inc    ecx
9f00509e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0050a2:	04 04                	add    al,0x4
9f0050a4:	1c 00                	sbb    al,0x0
9f0050a6:	00 00                	add    BYTE PTR [eax],al
9f0050a8:	00 08                	add    BYTE PTR [eax],cl
9f0050aa:	00 00                	add    BYTE PTR [eax],al
9f0050ac:	43                   	inc    ebx
9f0050ad:	c6                   	(bad)  
9f0050ae:	ff                   	(bad)  
9f0050af:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0050b5:	41                   	inc    ecx
9f0050b6:	0e                   	push   cs
9f0050b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050bd:	59                   	pop    ecx
9f0050be:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0050c1:	04 00                	add    al,0x0
9f0050c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0050c6:	00 00                	add    BYTE PTR [eax],al
9f0050c8:	20 08                	and    BYTE PTR [eax],cl
9f0050ca:	00 00                	add    BYTE PTR [eax],al
9f0050cc:	40                   	inc    eax
9f0050cd:	c6                   	(bad)  
9f0050ce:	ff                   	(bad)  
9f0050cf:	ff 29                	jmp    FWORD PTR [ecx]
9f0050d1:	00 00                	add    BYTE PTR [eax],al
9f0050d3:	00 00                	add    BYTE PTR [eax],al
9f0050d5:	41                   	inc    ecx
9f0050d6:	0e                   	push   cs
9f0050d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050dd:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f0050e1:	04 00                	add    al,0x0
9f0050e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0050e6:	00 00                	add    BYTE PTR [eax],al
9f0050e8:	40                   	inc    eax
9f0050e9:	08 00                	or     BYTE PTR [eax],al
9f0050eb:	00 49 c6             	add    BYTE PTR [ecx-0x3a],cl
9f0050ee:	ff                   	(bad)  
9f0050ef:	ff 29                	jmp    FWORD PTR [ecx]
9f0050f1:	00 00                	add    BYTE PTR [eax],al
9f0050f3:	00 00                	add    BYTE PTR [eax],al
9f0050f5:	41                   	inc    ecx
9f0050f6:	0e                   	push   cs
9f0050f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050fd:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f005101:	04 00                	add    al,0x0
9f005103:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005106:	00 00                	add    BYTE PTR [eax],al
9f005108:	60                   	pusha  
9f005109:	08 00                	or     BYTE PTR [eax],al
9f00510b:	00 52 c6             	add    BYTE PTR [edx-0x3a],dl
9f00510e:	ff                   	(bad)  
9f00510f:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f005113:	00 00                	add    BYTE PTR [eax],al
9f005115:	41                   	inc    ecx
9f005116:	0e                   	push   cs
9f005117:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00511d:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f005120:	0c 04                	or     al,0x4
9f005122:	04 00                	add    al,0x0
9f005124:	20 00                	and    BYTE PTR [eax],al
9f005126:	00 00                	add    BYTE PTR [eax],al
9f005128:	80 08 00             	or     BYTE PTR [eax],0x0
9f00512b:	00 7e c6             	add    BYTE PTR [esi-0x3a],bh
9f00512e:	ff                   	(bad)  
9f00512f:	ff f4                	push   esp
9f005131:	01 00                	add    DWORD PTR [eax],eax
9f005133:	00 00                	add    BYTE PTR [eax],al
9f005135:	41                   	inc    ecx
9f005136:	0e                   	push   cs
9f005137:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00513d:	44                   	inc    esp
9f00513e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005141:	ec                   	in     al,dx
9f005142:	01 c5                	add    ebp,eax
9f005144:	c3                   	ret    
9f005145:	0c 04                	or     al,0x4
9f005147:	04 1c                	add    al,0x1c
9f005149:	00 00                	add    BYTE PTR [eax],al
9f00514b:	00 a4 08 00 00 4e c8 	add    BYTE PTR [eax+ecx*1-0x37b20000],ah
9f005152:	ff                   	(bad)  
9f005153:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f005156:	00 00                	add    BYTE PTR [eax],al
9f005158:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00515b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005161:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f005164:	0c 04                	or     al,0x4
9f005166:	04 00                	add    al,0x0
9f005168:	1c 00                	sbb    al,0x0
9f00516a:	00 00                	add    BYTE PTR [eax],al
9f00516c:	c4 08                	les    ecx,FWORD PTR [eax]
9f00516e:	00 00                	add    BYTE PTR [eax],al
9f005170:	7d c8                	jge    9f00513a <__x86.get_pc_thunk.cx+0x896>
9f005172:	ff                   	(bad)  
9f005173:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f005176:	00 00                	add    BYTE PTR [eax],al
9f005178:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00517b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005181:	58                   	pop    eax
9f005182:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005185:	04 00                	add    al,0x0
9f005187:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00518a:	00 00                	add    BYTE PTR [eax],al
9f00518c:	e4 08                	in     al,0x8
9f00518e:	00 00                	add    BYTE PTR [eax],al
9f005190:	79 c8                	jns    9f00515a <__x86.get_pc_thunk.cx+0x8b6>
9f005192:	ff                   	(bad)  
9f005193:	ff 20                	jmp    DWORD PTR [eax]
9f005195:	00 00                	add    BYTE PTR [eax],al
9f005197:	00 00                	add    BYTE PTR [eax],al
9f005199:	41                   	inc    ecx
9f00519a:	0e                   	push   cs
9f00519b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051a1:	5c                   	pop    esp
9f0051a2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051a5:	04 00                	add    al,0x0
9f0051a7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0051aa:	00 00                	add    BYTE PTR [eax],al
9f0051ac:	04 09                	add    al,0x9
9f0051ae:	00 00                	add    BYTE PTR [eax],al
9f0051b0:	79 c8                	jns    9f00517a <__x86.get_pc_thunk.cx+0x8d6>
9f0051b2:	ff                   	(bad)  
9f0051b3:	ff 20                	jmp    DWORD PTR [eax]
9f0051b5:	00 00                	add    BYTE PTR [eax],al
9f0051b7:	00 00                	add    BYTE PTR [eax],al
9f0051b9:	41                   	inc    ecx
9f0051ba:	0e                   	push   cs
9f0051bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051c1:	5c                   	pop    esp
9f0051c2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051c5:	04 00                	add    al,0x0
9f0051c7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0051ca:	00 00                	add    BYTE PTR [eax],al
9f0051cc:	24 09                	and    al,0x9
9f0051ce:	00 00                	add    BYTE PTR [eax],al
9f0051d0:	79 c8                	jns    9f00519a <__x86.get_pc_thunk.cx+0x8f6>
9f0051d2:	ff                   	(bad)  
9f0051d3:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f0051d7:	00 00                	add    BYTE PTR [eax],al
9f0051d9:	41                   	inc    ecx
9f0051da:	0e                   	push   cs
9f0051db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051e1:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f0051e4:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051e7:	04 1c                	add    al,0x1c
9f0051e9:	00 00                	add    BYTE PTR [eax],al
9f0051eb:	00 44 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],al
9f0051ef:	00 9d c9 ff ff 20    	add    BYTE PTR [ebp+0x20ffffc9],bl
9f0051f5:	00 00                	add    BYTE PTR [eax],al
9f0051f7:	00 00                	add    BYTE PTR [eax],al
9f0051f9:	41                   	inc    ecx
9f0051fa:	0e                   	push   cs
9f0051fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005201:	5c                   	pop    esp
9f005202:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005205:	04 00                	add    al,0x0
9f005207:	00 28                	add    BYTE PTR [eax],ch
9f005209:	00 00                	add    BYTE PTR [eax],al
9f00520b:	00 64 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],ah
9f00520f:	00 9d c9 ff ff fd    	add    BYTE PTR [ebp-0x2000037],bl
9f005215:	02 00                	add    al,BYTE PTR [eax]
9f005217:	00 00                	add    BYTE PTR [eax],al
9f005219:	41                   	inc    ecx
9f00521a:	0e                   	push   cs
9f00521b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005221:	48                   	dec    eax
9f005222:	86 03                	xchg   BYTE PTR [ebx],al
9f005224:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f005228:	02 c3                	add    al,bl
9f00522a:	41                   	inc    ecx
9f00522b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00522f:	04 04                	add    al,0x4
9f005231:	00 00                	add    BYTE PTR [eax],al
9f005233:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005236:	00 00                	add    BYTE PTR [eax],al
9f005238:	90                   	nop
9f005239:	09 00                	or     DWORD PTR [eax],eax
9f00523b:	00 6e cc             	add    BYTE PTR [esi-0x34],ch
9f00523e:	ff                   	(bad)  
9f00523f:	ff 23                	jmp    DWORD PTR [ebx]
9f005241:	00 00                	add    BYTE PTR [eax],al
9f005243:	00 00                	add    BYTE PTR [eax],al
9f005245:	41                   	inc    ecx
9f005246:	0e                   	push   cs
9f005247:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00524d:	5f                   	pop    edi
9f00524e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005251:	04 00                	add    al,0x0
9f005253:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005256:	00 00                	add    BYTE PTR [eax],al
9f005258:	b0 09                	mov    al,0x9
9f00525a:	00 00                	add    BYTE PTR [eax],al
9f00525c:	71 cc                	jno    9f00522a <__x86.get_pc_thunk.cx+0x986>
9f00525e:	ff                   	(bad)  
9f00525f:	ff 23                	jmp    DWORD PTR [ebx]
9f005261:	00 00                	add    BYTE PTR [eax],al
9f005263:	00 00                	add    BYTE PTR [eax],al
9f005265:	41                   	inc    ecx
9f005266:	0e                   	push   cs
9f005267:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00526d:	5f                   	pop    edi
9f00526e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005271:	04 00                	add    al,0x0
9f005273:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005276:	00 00                	add    BYTE PTR [eax],al
9f005278:	d0 09                	ror    BYTE PTR [ecx],1
9f00527a:	00 00                	add    BYTE PTR [eax],al
9f00527c:	74 cc                	je     9f00524a <__x86.get_pc_thunk.cx+0x9a6>
9f00527e:	ff                   	(bad)  
9f00527f:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f005282:	00 00                	add    BYTE PTR [eax],al
9f005284:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005287:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00528d:	58                   	pop    eax
9f00528e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005291:	04 00                	add    al,0x0
9f005293:	00 20                	add    BYTE PTR [eax],ah
9f005295:	00 00                	add    BYTE PTR [eax],al
9f005297:	00 f0                	add    al,dh
9f005299:	09 00                	or     DWORD PTR [eax],eax
9f00529b:	00 70 cc             	add    BYTE PTR [eax-0x34],dh
9f00529e:	ff                   	(bad)  
9f00529f:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f0052a2:	00 00                	add    BYTE PTR [eax],al
9f0052a4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0052a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052ad:	44                   	inc    esp
9f0052ae:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0052b1:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f0052b4:	0c 04                	or     al,0x4
9f0052b6:	04 00                	add    al,0x0
9f0052b8:	20 00                	and    BYTE PTR [eax],al
9f0052ba:	00 00                	add    BYTE PTR [eax],al
9f0052bc:	14 0a                	adc    al,0xa
9f0052be:	00 00                	add    BYTE PTR [eax],al
9f0052c0:	c0 cc ff             	ror    ah,0xff
9f0052c3:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f0052c7:	00 00                	add    BYTE PTR [eax],al
9f0052c9:	41                   	inc    ecx
9f0052ca:	0e                   	push   cs
9f0052cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052d1:	44                   	inc    esp
9f0052d2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0052d5:	64                   	fs
9f0052d6:	c5 c3 0c             	(bad)  
9f0052d9:	04 04                	add    al,0x4
9f0052db:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0052de:	00 00                	add    BYTE PTR [eax],al
9f0052e0:	38 0a                	cmp    BYTE PTR [edx],cl
9f0052e2:	00 00                	add    BYTE PTR [eax],al
9f0052e4:	08 cd                	or     ch,cl
9f0052e6:	ff                   	(bad)  
9f0052e7:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f0052ed:	41                   	inc    ecx
9f0052ee:	0e                   	push   cs
9f0052ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052f5:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f0052fb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0052fe:	00 00                	add    BYTE PTR [eax],al
9f005300:	58                   	pop    eax
9f005301:	0a 00                	or     al,BYTE PTR [eax]
9f005303:	00 6f cd             	add    BYTE PTR [edi-0x33],ch
9f005306:	ff                   	(bad)  
9f005307:	ff 5b 00             	call   FWORD PTR [ebx+0x0]
9f00530a:	00 00                	add    BYTE PTR [eax],al
9f00530c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00530f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005315:	02 57 c5             	add    dl,BYTE PTR [edi-0x3b]
9f005318:	0c 04                	or     al,0x4
9f00531a:	04 00                	add    al,0x0
9f00531c:	1c 00                	sbb    al,0x0
9f00531e:	00 00                	add    BYTE PTR [eax],al
9f005320:	78 0a                	js     9f00532c <__x86.get_pc_thunk.cx+0xa88>
9f005322:	00 00                	add    BYTE PTR [eax],al
9f005324:	aa                   	stos   BYTE PTR es:[edi],al
9f005325:	cd ff                	int    0xff
9f005327:	ff                   	(bad)  
9f005328:	7a 00                	jp     9f00532a <__x86.get_pc_thunk.cx+0xa86>
9f00532a:	00 00                	add    BYTE PTR [eax],al
9f00532c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00532f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005335:	02 76 c5             	add    dh,BYTE PTR [esi-0x3b]
9f005338:	0c 04                	or     al,0x4
9f00533a:	04 00                	add    al,0x0
9f00533c:	20 00                	and    BYTE PTR [eax],al
9f00533e:	00 00                	add    BYTE PTR [eax],al
9f005340:	98                   	cwde   
9f005341:	0a 00                	or     al,BYTE PTR [eax]
9f005343:	00 04 ce             	add    BYTE PTR [esi+ecx*8],al
9f005346:	ff                   	(bad)  
9f005347:	ff 63 00             	jmp    DWORD PTR [ebx+0x0]
9f00534a:	00 00                	add    BYTE PTR [eax],al
9f00534c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00534f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005355:	44                   	inc    esp
9f005356:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005359:	5b                   	pop    ebx
9f00535a:	c5 c3 0c             	(bad)  
9f00535d:	04 04                	add    al,0x4
9f00535f:	00 20                	add    BYTE PTR [eax],ah
9f005361:	00 00                	add    BYTE PTR [eax],al
9f005363:	00 bc 0a 00 00 43 ce 	add    BYTE PTR [edx+ecx*1-0x31bd0000],bh
9f00536a:	ff                   	(bad)  
9f00536b:	ff 32                	push   DWORD PTR [edx]
9f00536d:	02 00                	add    al,BYTE PTR [eax]
9f00536f:	00 00                	add    BYTE PTR [eax],al
9f005371:	41                   	inc    ecx
9f005372:	0e                   	push   cs
9f005373:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005379:	44                   	inc    esp
9f00537a:	83 03 03             	add    DWORD PTR [ebx],0x3
9f00537d:	2a 02                	sub    al,BYTE PTR [edx]
9f00537f:	c5 c3 0c             	(bad)  
9f005382:	04 04                	add    al,0x4
9f005384:	1c 00                	sbb    al,0x0
9f005386:	00 00                	add    BYTE PTR [eax],al
9f005388:	e0 0a                	loopne 9f005394 <__x86.get_pc_thunk.cx+0xaf0>
9f00538a:	00 00                	add    BYTE PTR [eax],al
9f00538c:	51                   	push   ecx
9f00538d:	d0 ff                	sar    bh,1
9f00538f:	ff 20                	jmp    DWORD PTR [eax]
9f005391:	00 00                	add    BYTE PTR [eax],al
9f005393:	00 00                	add    BYTE PTR [eax],al
9f005395:	41                   	inc    ecx
9f005396:	0e                   	push   cs
9f005397:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00539d:	5c                   	pop    esp
9f00539e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0053a1:	04 00                	add    al,0x0
9f0053a3:	00 20                	add    BYTE PTR [eax],ah
9f0053a5:	00 00                	add    BYTE PTR [eax],al
9f0053a7:	00 00                	add    BYTE PTR [eax],al
9f0053a9:	0b 00                	or     eax,DWORD PTR [eax]
9f0053ab:	00 51 d0             	add    BYTE PTR [ecx-0x30],dl
9f0053ae:	ff                   	(bad)  
9f0053af:	ff 03                	inc    DWORD PTR [ebx]
9f0053b1:	01 00                	add    DWORD PTR [eax],eax
9f0053b3:	00 00                	add    BYTE PTR [eax],al
9f0053b5:	41                   	inc    ecx
9f0053b6:	0e                   	push   cs
9f0053b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053bd:	44                   	inc    esp
9f0053be:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0053c1:	fb                   	sti    
9f0053c2:	c5 c3 0c             	(bad)  
9f0053c5:	04 04                	add    al,0x4
9f0053c7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0053ca:	00 00                	add    BYTE PTR [eax],al
9f0053cc:	24 0b                	and    al,0xb
9f0053ce:	00 00                	add    BYTE PTR [eax],al
9f0053d0:	30 d1                	xor    cl,dl
9f0053d2:	ff                   	(bad)  
9f0053d3:	ff 23                	jmp    DWORD PTR [ebx]
9f0053d5:	00 00                	add    BYTE PTR [eax],al
9f0053d7:	00 00                	add    BYTE PTR [eax],al
9f0053d9:	41                   	inc    ecx
9f0053da:	0e                   	push   cs
9f0053db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053e1:	5f                   	pop    edi
9f0053e2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0053e5:	04 00                	add    al,0x0
9f0053e7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0053ea:	00 00                	add    BYTE PTR [eax],al
9f0053ec:	44                   	inc    esp
9f0053ed:	0b 00                	or     eax,DWORD PTR [eax]
9f0053ef:	00 33                	add    BYTE PTR [ebx],dh
9f0053f1:	d1 ff                	sar    edi,1
9f0053f3:	ff 1b                	call   FWORD PTR [ebx]
9f0053f5:	00 00                	add    BYTE PTR [eax],al
9f0053f7:	00 00                	add    BYTE PTR [eax],al
9f0053f9:	41                   	inc    ecx
9f0053fa:	0e                   	push   cs
9f0053fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005401:	57                   	push   edi
9f005402:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005405:	04 00                	add    al,0x0
9f005407:	00 20                	add    BYTE PTR [eax],ah
9f005409:	00 00                	add    BYTE PTR [eax],al
9f00540b:	00 64 0b 00          	add    BYTE PTR [ebx+ecx*1+0x0],ah
9f00540f:	00 2e                	add    BYTE PTR [esi],ch
9f005411:	d1 ff                	sar    edi,1
9f005413:	ff 32                	push   DWORD PTR [edx]
9f005415:	00 00                	add    BYTE PTR [eax],al
9f005417:	00 00                	add    BYTE PTR [eax],al
9f005419:	41                   	inc    ecx
9f00541a:	0e                   	push   cs
9f00541b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005421:	44                   	inc    esp
9f005422:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f005425:	c5 c3 0c             	(bad)  
9f005428:	04 04                	add    al,0x4
9f00542a:	00 00                	add    BYTE PTR [eax],al
9f00542c:	1c 00                	sbb    al,0x0
9f00542e:	00 00                	add    BYTE PTR [eax],al
9f005430:	88 0b                	mov    BYTE PTR [ebx],cl
9f005432:	00 00                	add    BYTE PTR [eax],al
9f005434:	3c d1                	cmp    al,0xd1
9f005436:	ff                   	(bad)  
9f005437:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
9f00543d:	41                   	inc    ecx
9f00543e:	0e                   	push   cs
9f00543f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005445:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f00544b:	04 1c                	add    al,0x1c
9f00544d:	00 00                	add    BYTE PTR [eax],al
9f00544f:	00 a8 0b 00 00 b7    	add    BYTE PTR [eax-0x48fffff5],ch
9f005455:	d2 ff                	sar    bh,cl
9f005457:	ff 20                	jmp    DWORD PTR [eax]
9f005459:	00 00                	add    BYTE PTR [eax],al
9f00545b:	00 00                	add    BYTE PTR [eax],al
9f00545d:	41                   	inc    ecx
9f00545e:	0e                   	push   cs
9f00545f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005465:	5c                   	pop    esp
9f005466:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005469:	04 00                	add    al,0x0
9f00546b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00546e:	00 00                	add    BYTE PTR [eax],al
9f005470:	c8 0b 00 00          	enter  0xb,0x0
9f005474:	b8 d2 ff ff c7       	mov    eax,0xc7ffffd2
9f005479:	00 00                	add    BYTE PTR [eax],al
9f00547b:	00 00                	add    BYTE PTR [eax],al
9f00547d:	41                   	inc    ecx
9f00547e:	0e                   	push   cs
9f00547f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005485:	02 c3                	add    al,bl
9f005487:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00548a:	04 00                	add    al,0x0
9f00548c:	1c 00                	sbb    al,0x0
9f00548e:	00 00                	add    BYTE PTR [eax],al
9f005490:	e8 0b 00 00 5f       	call   fe0054a0 <tmbuf+0x5effe260>
9f005495:	d3 ff                	sar    edi,cl
9f005497:	ff 20                	jmp    DWORD PTR [eax]
9f005499:	00 00                	add    BYTE PTR [eax],al
9f00549b:	00 00                	add    BYTE PTR [eax],al
9f00549d:	41                   	inc    ecx
9f00549e:	0e                   	push   cs
9f00549f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054a5:	5c                   	pop    esp
9f0054a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054a9:	04 00                	add    al,0x0
9f0054ab:	00 20                	add    BYTE PTR [eax],ah
9f0054ad:	00 00                	add    BYTE PTR [eax],al
9f0054af:	00 08                	add    BYTE PTR [eax],cl
9f0054b1:	0c 00                	or     al,0x0
9f0054b3:	00 60 d3             	add    BYTE PTR [eax-0x2d],ah
9f0054b6:	ff                   	(bad)  
9f0054b7:	ff 29                	jmp    FWORD PTR [ecx]
9f0054b9:	00 00                	add    BYTE PTR [eax],al
9f0054bb:	00 00                	add    BYTE PTR [eax],al
9f0054bd:	41                   	inc    ecx
9f0054be:	0e                   	push   cs
9f0054bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054c5:	44                   	inc    esp
9f0054c6:	83 03 61             	add    DWORD PTR [ebx],0x61
9f0054c9:	c5 c3 0c             	(bad)  
9f0054cc:	04 04                	add    al,0x4
9f0054ce:	00 00                	add    BYTE PTR [eax],al
9f0054d0:	20 00                	and    BYTE PTR [eax],al
9f0054d2:	00 00                	add    BYTE PTR [eax],al
9f0054d4:	2c 0c                	sub    al,0xc
9f0054d6:	00 00                	add    BYTE PTR [eax],al
9f0054d8:	65                   	gs
9f0054d9:	d3 ff                	sar    edi,cl
9f0054db:	ff 2e                	jmp    FWORD PTR [esi]
9f0054dd:	00 00                	add    BYTE PTR [eax],al
9f0054df:	00 00                	add    BYTE PTR [eax],al
9f0054e1:	41                   	inc    ecx
9f0054e2:	0e                   	push   cs
9f0054e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054e9:	44                   	inc    esp
9f0054ea:	83 03 66             	add    DWORD PTR [ebx],0x66
9f0054ed:	c5 c3 0c             	(bad)  
9f0054f0:	04 04                	add    al,0x4
9f0054f2:	00 00                	add    BYTE PTR [eax],al
9f0054f4:	20 00                	and    BYTE PTR [eax],al
9f0054f6:	00 00                	add    BYTE PTR [eax],al
9f0054f8:	50                   	push   eax
9f0054f9:	0c 00                	or     al,0x0
9f0054fb:	00 70 d3             	add    BYTE PTR [eax-0x2d],dh
9f0054fe:	ff                   	(bad)  
9f0054ff:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f005502:	00 00                	add    BYTE PTR [eax],al
9f005504:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005507:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00550d:	44                   	inc    esp
9f00550e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005511:	56                   	push   esi
9f005512:	c3                   	ret    
9f005513:	41                   	inc    ecx
9f005514:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005517:	04 28                	add    al,0x28
9f005519:	00 00                	add    BYTE PTR [eax],al
9f00551b:	00 74 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],dh
9f00551f:	00 ab d3 ff ff 3e    	add    BYTE PTR [ebx+0x3effffd3],ch
9f005525:	02 00                	add    al,BYTE PTR [eax]
9f005527:	00 00                	add    BYTE PTR [eax],al
9f005529:	41                   	inc    ecx
9f00552a:	0e                   	push   cs
9f00552b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005531:	45                   	inc    ebp
9f005532:	86 03                	xchg   BYTE PTR [ebx],al
9f005534:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f005538:	02 c3                	add    al,bl
9f00553a:	41                   	inc    ecx
9f00553b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00553f:	04 04                	add    al,0x4
9f005541:	00 00                	add    BYTE PTR [eax],al
9f005543:	00 20                	add    BYTE PTR [eax],ah
9f005545:	00 00                	add    BYTE PTR [eax],al
9f005547:	00 a0 0c 00 00 bd    	add    BYTE PTR [eax-0x42fffff4],ah
9f00554d:	d5 ff                	aad    0xff
9f00554f:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f005552:	00 00                	add    BYTE PTR [eax],al
9f005554:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005557:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00555d:	44                   	inc    esp
9f00555e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005561:	40                   	inc    eax
9f005562:	04 c5                	add    al,0xc5
9f005564:	c3                   	ret    
9f005565:	0c 04                	or     al,0x4
9f005567:	04 1c                	add    al,0x1c
9f005569:	00 00                	add    BYTE PTR [eax],al
9f00556b:	00 c4                	add    ah,al
9f00556d:	0c 00                	or     al,0x0
9f00556f:	00 e1                	add    cl,ah
9f005571:	d9 ff                	fcos   
9f005573:	ff 33                	push   DWORD PTR [ebx]
9f005575:	00 00                	add    BYTE PTR [eax],al
9f005577:	00 00                	add    BYTE PTR [eax],al
9f005579:	41                   	inc    ecx
9f00557a:	0e                   	push   cs
9f00557b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005581:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005582:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005585:	04 00                	add    al,0x0
9f005587:	00 20                	add    BYTE PTR [eax],ah
9f005589:	00 00                	add    BYTE PTR [eax],al
9f00558b:	00 e4                	add    ah,ah
9f00558d:	0c 00                	or     al,0x0
9f00558f:	00 f4                	add    ah,dh
9f005591:	d9 ff                	fcos   
9f005593:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f00559a:	0e                   	push   cs
9f00559b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055a1:	44                   	inc    esp
9f0055a2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0055a5:	7c c5                	jl     9f00556c <__x86.get_pc_thunk.cx+0xcc8>
9f0055a7:	c3                   	ret    
9f0055a8:	0c 04                	or     al,0x4
9f0055aa:	04 00                	add    al,0x0
9f0055ac:	20 00                	and    BYTE PTR [eax],al
9f0055ae:	00 00                	add    BYTE PTR [eax],al
9f0055b0:	08 0d 00 00 54 da    	or     BYTE PTR ds:0xda540000,cl
9f0055b6:	ff                   	(bad)  
9f0055b7:	ff                   	(bad)  
9f0055b8:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0055bb:	00 00                	add    BYTE PTR [eax],al
9f0055bd:	41                   	inc    ecx
9f0055be:	0e                   	push   cs
9f0055bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055c5:	44                   	inc    esp
9f0055c6:	83 03 76             	add    DWORD PTR [ebx],0x76
9f0055c9:	c5 c3 0c             	(bad)  
9f0055cc:	04 04                	add    al,0x4
9f0055ce:	00 00                	add    BYTE PTR [eax],al
9f0055d0:	20 00                	and    BYTE PTR [eax],al
9f0055d2:	00 00                	add    BYTE PTR [eax],al
9f0055d4:	2c 0d                	sub    al,0xd
9f0055d6:	00 00                	add    BYTE PTR [eax],al
9f0055d8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0055d9:	da ff                	(bad)  
9f0055db:	ff                   	(bad)  
9f0055dc:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0055df:	00 00                	add    BYTE PTR [eax],al
9f0055e1:	41                   	inc    ecx
9f0055e2:	0e                   	push   cs
9f0055e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055e9:	44                   	inc    esp
9f0055ea:	83 03 76             	add    DWORD PTR [ebx],0x76
9f0055ed:	c5 c3 0c             	(bad)  
9f0055f0:	04 04                	add    al,0x4
9f0055f2:	00 00                	add    BYTE PTR [eax],al
9f0055f4:	20 00                	and    BYTE PTR [eax],al
9f0055f6:	00 00                	add    BYTE PTR [eax],al
9f0055f8:	50                   	push   eax
9f0055f9:	0d 00 00 88 da       	or     eax,0xda880000
9f0055fe:	ff                   	(bad)  
9f0055ff:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f005602:	00 00                	add    BYTE PTR [eax],al
9f005604:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005607:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00560d:	44                   	inc    esp
9f00560e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005611:	67 c5 c3 0c          	addr16 (bad) 
9f005615:	04 04                	add    al,0x4
9f005617:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00561a:	00 00                	add    BYTE PTR [eax],al
9f00561c:	74 0d                	je     9f00562b <__x86.get_pc_thunk.cx+0xd87>
9f00561e:	00 00                	add    BYTE PTR [eax],al
9f005620:	d3 da                	rcr    edx,cl
9f005622:	ff                   	(bad)  
9f005623:	ff 26                	jmp    DWORD PTR [esi]
9f005625:	00 00                	add    BYTE PTR [eax],al
9f005627:	00 00                	add    BYTE PTR [eax],al
9f005629:	41                   	inc    ecx
9f00562a:	0e                   	push   cs
9f00562b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005631:	62                   	(bad)  
9f005632:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005635:	04 00                	add    al,0x0
9f005637:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00563a:	00 00                	add    BYTE PTR [eax],al
9f00563c:	94                   	xchg   esp,eax
9f00563d:	0d 00 00 dc da       	or     eax,0xdadc0000
9f005642:	ff                   	(bad)  
9f005643:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f005646:	00 00                	add    BYTE PTR [eax],al
9f005648:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00564b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005651:	45                   	inc    ebp
9f005652:	86 03                	xchg   BYTE PTR [ebx],al
9f005654:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f005658:	c3                   	ret    
9f005659:	41                   	inc    ecx
9f00565a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00565e:	04 04                	add    al,0x4
9f005660:	1c 00                	sbb    al,0x0
9f005662:	00 00                	add    BYTE PTR [eax],al
9f005664:	bc 0d 00 00 12       	mov    esp,0x1200000d
9f005669:	db ff                	(bad)  
9f00566b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005671:	41                   	inc    ecx
9f005672:	0e                   	push   cs
9f005673:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005679:	59                   	pop    ecx
9f00567a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00567d:	04 00                	add    al,0x0
9f00567f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005682:	00 00                	add    BYTE PTR [eax],al
9f005684:	dc 0d 00 00 10 db    	fmul   QWORD PTR ds:0xdb100000
9f00568a:	ff                   	(bad)  
9f00568b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f00568e:	00 00                	add    BYTE PTR [eax],al
9f005690:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005693:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005699:	7c c5                	jl     9f005660 <__x86.get_pc_thunk.cx+0xdbc>
9f00569b:	0c 04                	or     al,0x4
9f00569d:	04 00                	add    al,0x0
9f00569f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0056a2:	00 00                	add    BYTE PTR [eax],al
9f0056a4:	fc                   	cld    
9f0056a5:	0d 00 00 30 db       	or     eax,0xdb300000
9f0056aa:	ff                   	(bad)  
9f0056ab:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0056ae:	00 00                	add    BYTE PTR [eax],al
9f0056b0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056b9:	7c c5                	jl     9f005680 <__x86.get_pc_thunk.cx+0xddc>
9f0056bb:	0c 04                	or     al,0x4
9f0056bd:	04 00                	add    al,0x0
9f0056bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0056c2:	00 00                	add    BYTE PTR [eax],al
9f0056c4:	1c 0e                	sbb    al,0xe
9f0056c6:	00 00                	add    BYTE PTR [eax],al
9f0056c8:	50                   	push   eax
9f0056c9:	db ff                	(bad)  
9f0056cb:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f0056ce:	00 00                	add    BYTE PTR [eax],al
9f0056d0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056d9:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f0056dc:	0c 04                	or     al,0x4
9f0056de:	04 00                	add    al,0x0
9f0056e0:	1c 00                	sbb    al,0x0
9f0056e2:	00 00                	add    BYTE PTR [eax],al
9f0056e4:	3c 0e                	cmp    al,0xe
9f0056e6:	00 00                	add    BYTE PTR [eax],al
9f0056e8:	78 db                	js     9f0056c5 <__x86.get_pc_thunk.cx+0xe21>
9f0056ea:	ff                   	(bad)  
9f0056eb:	ff 30                	push   DWORD PTR [eax]
9f0056ed:	00 00                	add    BYTE PTR [eax],al
9f0056ef:	00 00                	add    BYTE PTR [eax],al
9f0056f1:	41                   	inc    ecx
9f0056f2:	0e                   	push   cs
9f0056f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056f9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0056fa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0056fd:	04 00                	add    al,0x0
9f0056ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005702:	00 00                	add    BYTE PTR [eax],al
9f005704:	5c                   	pop    esp
9f005705:	0e                   	push   cs
9f005706:	00 00                	add    BYTE PTR [eax],al
9f005708:	88 db                	mov    bl,bl
9f00570a:	ff                   	(bad)  
9f00570b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00570e:	00 00                	add    BYTE PTR [eax],al
9f005710:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005713:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005719:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f00571c:	0c 04                	or     al,0x4
9f00571e:	04 00                	add    al,0x0
9f005720:	1c 00                	sbb    al,0x0
9f005722:	00 00                	add    BYTE PTR [eax],al
9f005724:	7c 0e                	jl     9f005734 <__x86.get_pc_thunk.cx+0xe90>
9f005726:	00 00                	add    BYTE PTR [eax],al
9f005728:	c4                   	(bad)  
9f005729:	db ff                	(bad)  
9f00572b:	ff 31                	push   DWORD PTR [ecx]
9f00572d:	00 00                	add    BYTE PTR [eax],al
9f00572f:	00 00                	add    BYTE PTR [eax],al
9f005731:	41                   	inc    ecx
9f005732:	0e                   	push   cs
9f005733:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005739:	6d                   	ins    DWORD PTR es:[edi],dx
9f00573a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00573d:	04 00                	add    al,0x0
9f00573f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005742:	00 00                	add    BYTE PTR [eax],al
9f005744:	9c                   	pushf  
9f005745:	0e                   	push   cs
9f005746:	00 00                	add    BYTE PTR [eax],al
9f005748:	d5 db                	aad    0xdb
9f00574a:	ff                   	(bad)  
9f00574b:	ff 1a                	call   FWORD PTR [edx]
9f00574d:	00 00                	add    BYTE PTR [eax],al
9f00574f:	00 00                	add    BYTE PTR [eax],al
9f005751:	41                   	inc    ecx
9f005752:	0e                   	push   cs
9f005753:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005759:	56                   	push   esi
9f00575a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00575d:	04 00                	add    al,0x0
9f00575f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005762:	00 00                	add    BYTE PTR [eax],al
9f005764:	bc 0e 00 00 cf       	mov    esp,0xcf00000e
9f005769:	db ff                	(bad)  
9f00576b:	ff                   	(bad)  
9f00576c:	39 00                	cmp    DWORD PTR [eax],eax
9f00576e:	00 00                	add    BYTE PTR [eax],al
9f005770:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005773:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005779:	75 c5                	jne    9f005740 <__x86.get_pc_thunk.cx+0xe9c>
9f00577b:	0c 04                	or     al,0x4
9f00577d:	04 00                	add    al,0x0
9f00577f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005782:	00 00                	add    BYTE PTR [eax],al
9f005784:	dc 0e                	fmul   QWORD PTR [esi]
9f005786:	00 00                	add    BYTE PTR [eax],al
9f005788:	e8 db ff ff 1e       	call   be005768 <tmbuf+0x1effe528>
9f00578d:	00 00                	add    BYTE PTR [eax],al
9f00578f:	00 00                	add    BYTE PTR [eax],al
9f005791:	41                   	inc    ecx
9f005792:	0e                   	push   cs
9f005793:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005799:	5a                   	pop    edx
9f00579a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00579d:	04 00                	add    al,0x0
9f00579f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0057a2:	00 00                	add    BYTE PTR [eax],al
9f0057a4:	fc                   	cld    
9f0057a5:	0e                   	push   cs
9f0057a6:	00 00                	add    BYTE PTR [eax],al
9f0057a8:	e8 db ff ff 67       	call   7005788 <sysEnter_Vector+0x6ed5788>
9f0057ad:	00 00                	add    BYTE PTR [eax],al
9f0057af:	00 00                	add    BYTE PTR [eax],al
9f0057b1:	41                   	inc    ecx
9f0057b2:	0e                   	push   cs
9f0057b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057b9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0057bc:	0c 04                	or     al,0x4
9f0057be:	04 00                	add    al,0x0
9f0057c0:	1c 00                	sbb    al,0x0
9f0057c2:	00 00                	add    BYTE PTR [eax],al
9f0057c4:	1c 0f                	sbb    al,0xf
9f0057c6:	00 00                	add    BYTE PTR [eax],al
9f0057c8:	2f                   	das    
9f0057c9:	dc ff                	fdiv   st(7),st
9f0057cb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f0057ce:	00 00                	add    BYTE PTR [eax],al
9f0057d0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0057d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057d9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0057dc:	0c 04                	or     al,0x4
9f0057de:	04 00                	add    al,0x0
9f0057e0:	1c 00                	sbb    al,0x0
9f0057e2:	00 00                	add    BYTE PTR [eax],al
9f0057e4:	3c 0f                	cmp    al,0xf
9f0057e6:	00 00                	add    BYTE PTR [eax],al
9f0057e8:	78 dc                	js     9f0057c6 <__x86.get_pc_thunk.cx+0xf22>
9f0057ea:	ff                   	(bad)  
9f0057eb:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f0057ef:	00 00                	add    BYTE PTR [eax],al
9f0057f1:	41                   	inc    ecx
9f0057f2:	0e                   	push   cs
9f0057f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057f9:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f0057fc:	0c 04                	or     al,0x4
9f0057fe:	04 00                	add    al,0x0
9f005800:	1c 00                	sbb    al,0x0
9f005802:	00 00                	add    BYTE PTR [eax],al
9f005804:	5c                   	pop    esp
9f005805:	0f 00 00             	sldt   WORD PTR [eax]
9f005808:	c4                   	(bad)  
9f005809:	dc ff                	fdiv   st(7),st
9f00580b:	ff 20                	jmp    DWORD PTR [eax]
9f00580d:	00 00                	add    BYTE PTR [eax],al
9f00580f:	00 00                	add    BYTE PTR [eax],al
9f005811:	41                   	inc    ecx
9f005812:	0e                   	push   cs
9f005813:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005819:	5c                   	pop    esp
9f00581a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00581d:	04 00                	add    al,0x0
9f00581f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005822:	00 00                	add    BYTE PTR [eax],al
9f005824:	7c 0f                	jl     9f005835 <__x86.get_pc_thunk.cx+0xf91>
9f005826:	00 00                	add    BYTE PTR [eax],al
9f005828:	c4                   	(bad)  
9f005829:	dc ff                	fdiv   st(7),st
9f00582b:	ff                   	(bad)  
9f00582c:	7d 01                	jge    9f00582f <__x86.get_pc_thunk.cx+0xf8b>
9f00582e:	00 00                	add    BYTE PTR [eax],al
9f005830:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005833:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005839:	46                   	inc    esi
9f00583a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00583c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00583f:	05 03 70 01 c3       	add    eax,0xc3017003
9f005844:	41                   	inc    ecx
9f005845:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f005849:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00584c:	04 00                	add    al,0x0
9f00584e:	00 00                	add    BYTE PTR [eax],al
9f005850:	1c 00                	sbb    al,0x0
9f005852:	00 00                	add    BYTE PTR [eax],al
9f005854:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005855:	0f 00 00             	sldt   WORD PTR [eax]
9f005858:	14 de                	adc    al,0xde
9f00585a:	ff                   	(bad)  
9f00585b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005861:	41                   	inc    ecx
9f005862:	0e                   	push   cs
9f005863:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005869:	59                   	pop    ecx
9f00586a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00586d:	04 00                	add    al,0x0
9f00586f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005872:	00 00                	add    BYTE PTR [eax],al
9f005874:	cc                   	int3   
9f005875:	0f 00 00             	sldt   WORD PTR [eax]
9f005878:	14 de                	adc    al,0xde
9f00587a:	ff                   	(bad)  
9f00587b:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f005882:	0e                   	push   cs
9f005883:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005889:	46                   	inc    esi
9f00588a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00588c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00588f:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f005894:	41                   	inc    ecx
9f005895:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f005899:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00589c:	04 00                	add    al,0x0
9f00589e:	00 00                	add    BYTE PTR [eax],al
9f0058a0:	20 00                	and    BYTE PTR [eax],al
9f0058a2:	00 00                	add    BYTE PTR [eax],al
9f0058a4:	fc                   	cld    
9f0058a5:	0f 00 00             	sldt   WORD PTR [eax]
9f0058a8:	80 df ff             	sbb    bh,0xff
9f0058ab:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f0058b1:	41                   	inc    ecx
9f0058b2:	0e                   	push   cs
9f0058b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058b9:	44                   	inc    esp
9f0058ba:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0058bd:	8e c5                	mov    es,ebp
9f0058bf:	c3                   	ret    
9f0058c0:	0c 04                	or     al,0x4
9f0058c2:	04 00                	add    al,0x0
9f0058c4:	1c 00                	sbb    al,0x0
9f0058c6:	00 00                	add    BYTE PTR [eax],al
9f0058c8:	20 10                	and    BYTE PTR [eax],dl
9f0058ca:	00 00                	add    BYTE PTR [eax],al
9f0058cc:	f2 df ff             	repnz (bad) 
9f0058cf:	ff 20                	jmp    DWORD PTR [eax]
9f0058d1:	00 00                	add    BYTE PTR [eax],al
9f0058d3:	00 00                	add    BYTE PTR [eax],al
9f0058d5:	41                   	inc    ecx
9f0058d6:	0e                   	push   cs
9f0058d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058dd:	5c                   	pop    esp
9f0058de:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0058e1:	04 00                	add    al,0x0
9f0058e3:	00 28                	add    BYTE PTR [eax],ch
9f0058e5:	00 00                	add    BYTE PTR [eax],al
9f0058e7:	00 40 10             	add    BYTE PTR [eax+0x10],al
9f0058ea:	00 00                	add    BYTE PTR [eax],al
9f0058ec:	f4                   	hlt    
9f0058ed:	df ff                	(bad)  
9f0058ef:	ff 1e                	call   FWORD PTR [esi]
9f0058f1:	01 00                	add    DWORD PTR [eax],eax
9f0058f3:	00 00                	add    BYTE PTR [eax],al
9f0058f5:	41                   	inc    ecx
9f0058f6:	0e                   	push   cs
9f0058f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058fd:	45                   	inc    ebp
9f0058fe:	86 03                	xchg   BYTE PTR [ebx],al
9f005900:	83 04 03 13          	add    DWORD PTR [ebx+eax*1],0x13
9f005904:	01 c3                	add    ebx,eax
9f005906:	41                   	inc    ecx
9f005907:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00590b:	04 04                	add    al,0x4
9f00590d:	00 00                	add    BYTE PTR [eax],al
9f00590f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005912:	00 00                	add    BYTE PTR [eax],al
9f005914:	6c                   	ins    BYTE PTR es:[edi],dx
9f005915:	10 00                	adc    BYTE PTR [eax],al
9f005917:	00 e6                	add    dh,ah
9f005919:	e0 ff                	loopne 9f00591a <__x86.get_pc_thunk.cx+0x1076>
9f00591b:	ff 26                	jmp    DWORD PTR [esi]
9f00591d:	00 00                	add    BYTE PTR [eax],al
9f00591f:	00 00                	add    BYTE PTR [eax],al
9f005921:	41                   	inc    ecx
9f005922:	0e                   	push   cs
9f005923:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005929:	62                   	(bad)  
9f00592a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00592d:	04 00                	add    al,0x0
9f00592f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005932:	00 00                	add    BYTE PTR [eax],al
9f005934:	8c 10                	mov    WORD PTR [eax],ss
9f005936:	00 00                	add    BYTE PTR [eax],al
9f005938:	ec                   	in     al,dx
9f005939:	e0 ff                	loopne 9f00593a <__x86.get_pc_thunk.cx+0x1096>
9f00593b:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f005941:	41                   	inc    ecx
9f005942:	0e                   	push   cs
9f005943:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005949:	45                   	inc    ebp
9f00594a:	86 03                	xchg   BYTE PTR [ebx],al
9f00594c:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f005950:	c3                   	ret    
9f005951:	41                   	inc    ecx
9f005952:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005956:	04 04                	add    al,0x4
9f005958:	24 00                	and    al,0x0
9f00595a:	00 00                	add    BYTE PTR [eax],al
9f00595c:	b4 10                	mov    ah,0x10
9f00595e:	00 00                	add    BYTE PTR [eax],al
9f005960:	62                   	(bad)  
9f005961:	e1 ff                	loope  9f005962 <__x86.get_pc_thunk.cx+0x10be>
9f005963:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f005966:	00 00                	add    BYTE PTR [eax],al
9f005968:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00596b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005971:	42                   	inc    edx
9f005972:	86 03                	xchg   BYTE PTR [ebx],al
9f005974:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f005978:	c3                   	ret    
9f005979:	41                   	inc    ecx
9f00597a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00597e:	04 04                	add    al,0x4
9f005980:	1c 00                	sbb    al,0x0
9f005982:	00 00                	add    BYTE PTR [eax],al
9f005984:	dc 10                	fcom   QWORD PTR [eax]
9f005986:	00 00                	add    BYTE PTR [eax],al
9f005988:	a8 e1                	test   al,0xe1
9f00598a:	ff                   	(bad)  
9f00598b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005991:	41                   	inc    ecx
9f005992:	0e                   	push   cs
9f005993:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005999:	59                   	pop    ecx
9f00599a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00599d:	04 00                	add    al,0x0
9f00599f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0059a2:	00 00                	add    BYTE PTR [eax],al
9f0059a4:	fc                   	cld    
9f0059a5:	10 00                	adc    BYTE PTR [eax],al
9f0059a7:	00 a8 e1 ff ff 44    	add    BYTE PTR [eax+0x44ffffe1],ch
9f0059ad:	00 00                	add    BYTE PTR [eax],al
9f0059af:	00 00                	add    BYTE PTR [eax],al
9f0059b1:	41                   	inc    ecx
9f0059b2:	0e                   	push   cs
9f0059b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059b9:	45                   	inc    ebp
9f0059ba:	86 03                	xchg   BYTE PTR [ebx],al
9f0059bc:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f0059c0:	41                   	inc    ecx
9f0059c1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0059c5:	04 04                	add    al,0x4
9f0059c7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0059ca:	00 00                	add    BYTE PTR [eax],al
9f0059cc:	24 11                	and    al,0x11
9f0059ce:	00 00                	add    BYTE PTR [eax],al
9f0059d0:	c4 e1 ff ff          	(bad)  
9f0059d4:	19 03                	sbb    DWORD PTR [ebx],eax
9f0059d6:	00 00                	add    BYTE PTR [eax],al
9f0059d8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0059db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059e1:	44                   	inc    esp
9f0059e2:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0059e5:	10 03                	adc    BYTE PTR [ebx],al
9f0059e7:	c3                   	ret    
9f0059e8:	41                   	inc    ecx
9f0059e9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059ec:	04 00                	add    al,0x0
9f0059ee:	00 00                	add    BYTE PTR [eax],al
9f0059f0:	1c 00                	sbb    al,0x0
9f0059f2:	00 00                	add    BYTE PTR [eax],al
9f0059f4:	4c                   	dec    esp
9f0059f5:	11 00                	adc    DWORD PTR [eax],eax
9f0059f7:	00 b5 e4 ff ff 1d    	add    BYTE PTR [ebp+0x1dffffe4],dh
9f0059fd:	00 00                	add    BYTE PTR [eax],al
9f0059ff:	00 00                	add    BYTE PTR [eax],al
9f005a01:	41                   	inc    ecx
9f005a02:	0e                   	push   cs
9f005a03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a09:	59                   	pop    ecx
9f005a0a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a0d:	04 00                	add    al,0x0
9f005a0f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a12:	00 00                	add    BYTE PTR [eax],al
9f005a14:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a15:	11 00                	adc    DWORD PTR [eax],eax
9f005a17:	00 b2 e4 ff ff 3d    	add    BYTE PTR [edx+0x3dffffe4],dh
9f005a1d:	00 00                	add    BYTE PTR [eax],al
9f005a1f:	00 00                	add    BYTE PTR [eax],al
9f005a21:	41                   	inc    ecx
9f005a22:	0e                   	push   cs
9f005a23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a29:	79 c5                	jns    9f0059f0 <__x86.get_pc_thunk.cx+0x114c>
9f005a2b:	0c 04                	or     al,0x4
9f005a2d:	04 00                	add    al,0x0
9f005a2f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a32:	00 00                	add    BYTE PTR [eax],al
9f005a34:	8c 11                	mov    WORD PTR [ecx],ss
9f005a36:	00 00                	add    BYTE PTR [eax],al
9f005a38:	cf                   	iret   
9f005a39:	e4 ff                	in     al,0xff
9f005a3b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f005a41:	41                   	inc    ecx
9f005a42:	0e                   	push   cs
9f005a43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a49:	71 c5                	jno    9f005a10 <__x86.get_pc_thunk.cx+0x116c>
9f005a4b:	0c 04                	or     al,0x4
9f005a4d:	04 00                	add    al,0x0
9f005a4f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a52:	00 00                	add    BYTE PTR [eax],al
9f005a54:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005a55:	11 00                	adc    DWORD PTR [eax],eax
9f005a57:	00 e4                	add    ah,ah
9f005a59:	e4 ff                	in     al,0xff
9f005a5b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005a61:	41                   	inc    ecx
9f005a62:	0e                   	push   cs
9f005a63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a69:	59                   	pop    ecx
9f005a6a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a6d:	04 00                	add    al,0x0
9f005a6f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005a72:	00 00                	add    BYTE PTR [eax],al
9f005a74:	cc                   	int3   
9f005a75:	11 00                	adc    DWORD PTR [eax],eax
9f005a77:	00 e1                	add    cl,ah
9f005a79:	e4 ff                	in     al,0xff
9f005a7b:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f005a7e:	00 00                	add    BYTE PTR [eax],al
9f005a80:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a89:	46                   	inc    esi
9f005a8a:	87 03                	xchg   DWORD PTR [ebx],eax
9f005a8c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f005a8f:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f005a94:	41                   	inc    ecx
9f005a95:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f005a99:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a9c:	04 00                	add    al,0x0
9f005a9e:	00 00                	add    BYTE PTR [eax],al
9f005aa0:	24 00                	and    al,0x0
9f005aa2:	00 00                	add    BYTE PTR [eax],al
9f005aa4:	fc                   	cld    
9f005aa5:	11 00                	adc    DWORD PTR [eax],eax
9f005aa7:	00 08                	add    BYTE PTR [eax],cl
9f005aa9:	ed                   	in     eax,dx
9f005aaa:	ff                   	(bad)  
9f005aab:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f005aae:	00 00                	add    BYTE PTR [eax],al
9f005ab0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005ab3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ab9:	45                   	inc    ebp
9f005aba:	86 03                	xchg   BYTE PTR [ebx],al
9f005abc:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f005ac0:	c3                   	ret    
9f005ac1:	41                   	inc    ecx
9f005ac2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005ac6:	04 04                	add    al,0x4
9f005ac8:	20 00                	and    BYTE PTR [eax],al
9f005aca:	00 00                	add    BYTE PTR [eax],al
9f005acc:	24 12                	and    al,0x12
9f005ace:	00 00                	add    BYTE PTR [eax],al
9f005ad0:	4d                   	dec    ebp
9f005ad1:	ed                   	in     eax,dx
9f005ad2:	ff                   	(bad)  
9f005ad3:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f005ad6:	00 00                	add    BYTE PTR [eax],al
9f005ad8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005adb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ae1:	44                   	inc    esp
9f005ae2:	83 03 79             	add    DWORD PTR [ebx],0x79
9f005ae5:	c5 c3 0c             	(bad)  
9f005ae8:	04 04                	add    al,0x4
9f005aea:	00 00                	add    BYTE PTR [eax],al
9f005aec:	10 00                	adc    BYTE PTR [eax],al
9f005aee:	00 00                	add    BYTE PTR [eax],al
9f005af0:	48                   	dec    eax
9f005af1:	12 00                	adc    al,BYTE PTR [eax]
9f005af3:	00 b0 ed ff ff 04    	add    BYTE PTR [eax+0x4ffffed],dh
9f005af9:	00 00                	add    BYTE PTR [eax],al
9f005afb:	00 00                	add    BYTE PTR [eax],al
9f005afd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f005b00 <.dynsym>:
	...
9f005b10:	ae                   	scas   al,BYTE PTR es:[edi]
9f005b11:	01 00                	add    DWORD PTR [eax],eax
9f005b13:	00 98 31 00 9f 40    	add    BYTE PTR [eax+0x409f0031],bl
9f005b19:	00 00                	add    BYTE PTR [eax],al
9f005b1b:	00 12                	add    BYTE PTR [edx],dl
9f005b1d:	00 01                	add    BYTE PTR [ecx],al
9f005b1f:	00 1d 01 00 00 ed    	add    BYTE PTR ds:0xed000001,bl
9f005b25:	19 00                	sbb    DWORD PTR [eax],eax
9f005b27:	9f                   	lahf   
9f005b28:	1c 00                	sbb    al,0x0
9f005b2a:	00 00                	add    BYTE PTR [eax],al
9f005b2c:	12 00                	adc    al,BYTE PTR [eax]
9f005b2e:	01 00                	add    DWORD PTR [eax],eax
9f005b30:	dc 00                	fadd   QWORD PTR [eax]
9f005b32:	00 00                	add    BYTE PTR [eax],al
9f005b34:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b35:	14 00                	adc    al,0x0
9f005b37:	9f                   	lahf   
9f005b38:	59                   	pop    ecx
9f005b39:	00 00                	add    BYTE PTR [eax],al
9f005b3b:	00 12                	add    BYTE PTR [edx],dl
9f005b3d:	00 01                	add    BYTE PTR [ecx],al
9f005b3f:	00 88 01 00 00 c5    	add    BYTE PTR [eax-0x3affffff],cl
9f005b45:	14 00                	adc    al,0x0
9f005b47:	9f                   	lahf   
9f005b48:	54                   	push   esp
9f005b49:	00 00                	add    BYTE PTR [eax],al
9f005b4b:	00 12                	add    BYTE PTR [edx],dl
9f005b4d:	00 01                	add    BYTE PTR [ecx],al
9f005b4f:	00 3d 00 00 00 ac    	add    BYTE PTR ds:0xac000000,bh
9f005b55:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f005b5a:	00 00                	add    BYTE PTR [eax],al
9f005b5c:	12 00                	adc    al,BYTE PTR [eax]
9f005b5e:	01 00                	add    DWORD PTR [eax],eax
9f005b60:	bd 01 00 00 90       	mov    ebp,0x90000001
9f005b65:	32 00                	xor    al,BYTE PTR [eax]
9f005b67:	9f                   	lahf   
9f005b68:	59                   	pop    ecx
9f005b69:	00 00                	add    BYTE PTR [eax],al
9f005b6b:	00 12                	add    BYTE PTR [edx],dl
9f005b6d:	00 01                	add    BYTE PTR [ecx],al
9f005b6f:	00 8f 01 00 00 84    	add    BYTE PTR [edi-0x7bffffff],cl
9f005b75:	2f                   	das    
9f005b76:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f005b7c:	12 00                	adc    al,BYTE PTR [eax]
9f005b7e:	01 00                	add    DWORD PTR [eax],eax
9f005b80:	53                   	push   ebx
9f005b81:	00 00                	add    BYTE PTR [eax],al
9f005b83:	00 b2 06 00 9f 23    	add    BYTE PTR [edx+0x239f0006],dh
9f005b89:	00 00                	add    BYTE PTR [eax],al
9f005b8b:	00 12                	add    BYTE PTR [edx],dl
9f005b8d:	00 01                	add    BYTE PTR [ecx],al
9f005b8f:	00 82 01 00 00 3d    	add    BYTE PTR [edx+0x3d000001],al
9f005b95:	28 00                	sub    BYTE PTR [eax],al
9f005b97:	9f                   	lahf   
9f005b98:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f005b9b:	00 12                	add    BYTE PTR [edx],dl
9f005b9d:	00 01                	add    BYTE PTR [ecx],al
9f005b9f:	00 cd                	add    ch,cl
9f005ba1:	00 00                	add    BYTE PTR [eax],al
9f005ba3:	00 88 11 00 9f bd    	add    BYTE PTR [eax-0x4260ffef],cl
9f005ba9:	00 00                	add    BYTE PTR [eax],al
9f005bab:	00 12                	add    BYTE PTR [edx],dl
9f005bad:	00 01                	add    BYTE PTR [ecx],al
9f005baf:	00 92 00 00 00 b5    	add    BYTE PTR [edx-0x4b000000],dl
9f005bb5:	0b 00                	or     eax,DWORD PTR [eax]
9f005bb7:	9f                   	lahf   
9f005bb8:	f5                   	cmc    
9f005bb9:	02 00                	add    al,BYTE PTR [eax]
9f005bbb:	00 12                	add    BYTE PTR [edx],dl
9f005bbd:	00 01                	add    BYTE PTR [ecx],al
9f005bbf:	00 76 01             	add    BYTE PTR [esi+0x1],dh
9f005bc2:	00 00                	add    BYTE PTR [eax],al
9f005bc4:	0b 27                	or     esp,DWORD PTR [edi]
9f005bc6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005bcc:	12 00                	adc    al,BYTE PTR [eax]
9f005bce:	01 00                	add    DWORD PTR [eax],eax
9f005bd0:	31 01                	xor    DWORD PTR [ecx],eax
9f005bd2:	00 00                	add    BYTE PTR [eax],al
9f005bd4:	8d 1b                	lea    ebx,[ebx]
9f005bd6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005bdc:	12 00                	adc    al,BYTE PTR [eax]
9f005bde:	01 00                	add    DWORD PTR [eax],eax
9f005be0:	ab                   	stos   DWORD PTR es:[edi],eax
9f005be1:	00 00                	add    BYTE PTR [eax],al
9f005be3:	00 dc                	add    ah,bl
9f005be5:	10 00                	adc    BYTE PTR [eax],al
9f005be7:	9f                   	lahf   
9f005be8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005beb:	00 12                	add    BYTE PTR [edx],dl
9f005bed:	00 01                	add    BYTE PTR [ecx],al
9f005bef:	00 62 01             	add    BYTE PTR [edx+0x1],ah
9f005bf2:	00 00                	add    BYTE PTR [eax],al
9f005bf4:	dd 23                	frstor [ebx]
9f005bf6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005bfc:	12 00                	adc    al,BYTE PTR [eax]
9f005bfe:	01 00                	add    DWORD PTR [eax],eax
9f005c00:	e9 00 00 00 0f       	jmp    ae005c05 <tmbuf+0xeffe9c5>
9f005c05:	16                   	push   ss
9f005c06:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f005c0c:	12 00                	adc    al,BYTE PTR [eax]
9f005c0e:	01 00                	add    DWORD PTR [eax],eax
9f005c10:	37                   	aaa    
9f005c11:	01 00                	add    DWORD PTR [eax],eax
9f005c13:	00 aa 1e 00 9f 23    	add    BYTE PTR [edx+0x239f001e],ch
9f005c19:	00 00                	add    BYTE PTR [eax],al
9f005c1b:	00 12                	add    BYTE PTR [edx],dl
9f005c1d:	00 01                	add    BYTE PTR [ecx],al
9f005c1f:	00 e5                	add    ch,ah
9f005c21:	01 00                	add    DWORD PTR [eax],eax
9f005c23:	00 ec                	add    ah,ch
9f005c25:	34 00                	xor    al,0x0
9f005c27:	9f                   	lahf   
9f005c28:	7d 01                	jge    9f005c2b <__x86.get_pc_thunk.cx+0x1387>
9f005c2a:	00 00                	add    BYTE PTR [eax],al
9f005c2c:	12 00                	adc    al,BYTE PTR [eax]
9f005c2e:	01 00                	add    DWORD PTR [eax],eax
9f005c30:	17                   	pop    ss
9f005c31:	00 00                	add    BYTE PTR [eax],al
9f005c33:	00 c3                	add    bl,al
9f005c35:	02 00                	add    al,BYTE PTR [eax]
9f005c37:	9f                   	lahf   
9f005c38:	bb 00 00 00 12       	mov    ebx,0x12000000
9f005c3d:	00 01                	add    BYTE PTR [ecx],al
9f005c3f:	00 4c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],cl
9f005c43:	00 f0                	add    al,dh
9f005c45:	1e                   	push   ds
9f005c46:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f005c4c:	12 00                	adc    al,BYTE PTR [eax]
9f005c4e:	01 00                	add    DWORD PTR [eax],eax
9f005c50:	56                   	push   esi
9f005c51:	01 00                	add    DWORD PTR [eax],eax
9f005c53:	00 0c 1f             	add    BYTE PTR [edi+ebx*1],cl
9f005c56:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
9f005c5c:	12 00                	adc    al,BYTE PTR [eax]
9f005c5e:	01 00                	add    DWORD PTR [eax],eax
9f005c60:	1f                   	pop    ds
9f005c61:	02 00                	add    al,BYTE PTR [eax]
9f005c63:	00 ad 3e 00 9f 1d    	add    BYTE PTR [ebp+0x1d9f003e],ch
9f005c69:	00 00                	add    BYTE PTR [eax],al
9f005c6b:	00 12                	add    BYTE PTR [edx],dl
9f005c6d:	00 01                	add    BYTE PTR [ecx],al
9f005c6f:	00 f5                	add    ch,dh
9f005c71:	01 00                	add    DWORD PTR [eax],eax
9f005c73:	00 8c 36 00 9f 9c 01 	add    BYTE PTR [esi+esi*1+0x19c9f00],cl
9f005c7a:	00 00                	add    BYTE PTR [eax],al
9f005c7c:	12 00                	adc    al,BYTE PTR [eax]
9f005c7e:	01 00                	add    DWORD PTR [eax],eax
9f005c80:	d2 00                	rol    BYTE PTR [eax],cl
9f005c82:	00 00                	add    BYTE PTR [eax],al
9f005c84:	7e 13                	jle    9f005c99 <__x86.get_pc_thunk.cx+0x13f5>
9f005c86:	00 9f cb 00 00 00    	add    BYTE PTR [edi+0xcb],bl
9f005c8c:	12 00                	adc    al,BYTE PTR [eax]
9f005c8e:	01 00                	add    DWORD PTR [eax],eax
9f005c90:	7d 01                	jge    9f005c93 <__x86.get_pc_thunk.cx+0x13ef>
9f005c92:	00 00                	add    BYTE PTR [eax],al
9f005c94:	14 28                	adc    al,0x28
9f005c96:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f005c9c:	12 00                	adc    al,BYTE PTR [eax]
9f005c9e:	01 00                	add    DWORD PTR [eax],eax
9f005ca0:	cd 01                	int    0x1
9f005ca2:	00 00                	add    BYTE PTR [eax],al
9f005ca4:	70 33                	jo     9f005cd9 <__x86.get_pc_thunk.cx+0x1435>
9f005ca6:	00 9f 1e 00 00 00    	add    BYTE PTR [edi+0x1e],bl
9f005cac:	12 00                	adc    al,BYTE PTR [eax]
9f005cae:	01 00                	add    DWORD PTR [eax],eax
9f005cb0:	11 01                	adc    DWORD PTR [ecx],eax
9f005cb2:	00 00                	add    BYTE PTR [eax],al
9f005cb4:	aa                   	stos   BYTE PTR es:[edi],al
9f005cb5:	17                   	pop    ss
9f005cb6:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
9f005cbc:	12 00                	adc    al,BYTE PTR [eax]
9f005cbe:	01 00                	add    DWORD PTR [eax],eax
9f005cc0:	82                   	(bad)  
9f005cc1:	00 00                	add    BYTE PTR [eax],al
9f005cc3:	00 eb                	add    bl,ch
9f005cc5:	0a 00                	or     al,BYTE PTR [eax]
9f005cc7:	9f                   	lahf   
9f005cc8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005ccb:	00 12                	add    BYTE PTR [edx],dl
9f005ccd:	00 01                	add    BYTE PTR [ecx],al
9f005ccf:	00 ef                	add    bh,ch
9f005cd1:	00 00                	add    BYTE PTR [eax],al
9f005cd3:	00 7f 16             	add    BYTE PTR [edi+0x16],bh
9f005cd6:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f005cdc:	12 00                	adc    al,BYTE PTR [eax]
9f005cde:	01 00                	add    DWORD PTR [eax],eax
9f005ce0:	98                   	cwde   
9f005ce1:	01 00                	add    DWORD PTR [eax],eax
9f005ce3:	00 08                	add    BYTE PTR [eax],cl
9f005ce5:	30 00                	xor    BYTE PTR [eax],al
9f005ce7:	9f                   	lahf   
9f005ce8:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f005ceb:	00 12                	add    BYTE PTR [edx],dl
9f005ced:	00 01                	add    BYTE PTR [ecx],al
9f005cef:	00 16                	add    BYTE PTR [esi],dl
9f005cf1:	02 00                	add    al,BYTE PTR [eax]
9f005cf3:	00 50 3b             	add    BYTE PTR [eax+0x3b],dl
9f005cf6:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
9f005cfc:	12 00                	adc    al,BYTE PTR [eax]
9f005cfe:	01 00                	add    DWORD PTR [eax],eax
9f005d00:	9e                   	sahf   
9f005d01:	00 00                	add    BYTE PTR [eax],al
9f005d03:	00 d3                	add    bl,dl
9f005d05:	0e                   	push   cs
9f005d06:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005d0c:	12 00                	adc    al,BYTE PTR [eax]
9f005d0e:	01 00                	add    DWORD PTR [eax],eax
9f005d10:	0c 01                	or     al,0x1
9f005d12:	00 00                	add    BYTE PTR [eax],al
9f005d14:	5e                   	pop    esi
9f005d15:	17                   	pop    ss
9f005d16:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
9f005d1c:	12 00                	adc    al,BYTE PTR [eax]
9f005d1e:	01 00                	add    DWORD PTR [eax],eax
9f005d20:	68 00 00 00 e8       	push   0xe8000000
9f005d25:	08 00                	or     BYTE PTR [eax],al
9f005d27:	9f                   	lahf   
9f005d28:	31 00                	xor    DWORD PTR [eax],eax
9f005d2a:	00 00                	add    BYTE PTR [eax],al
9f005d2c:	12 00                	adc    al,BYTE PTR [eax]
9f005d2e:	01 00                	add    DWORD PTR [eax],eax
9f005d30:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f005d33:	00 59 3f             	add    BYTE PTR [ecx+0x3f],bl
9f005d36:	00 9f 57 08 00 00    	add    BYTE PTR [edi+0x857],bl
9f005d3c:	12 00                	adc    al,BYTE PTR [eax]
9f005d3e:	01 00                	add    DWORD PTR [eax],eax
9f005d40:	0f 02 00             	lar    eax,WORD PTR [eax]
9f005d43:	00 30                	add    BYTE PTR [eax],dh
9f005d45:	3b 00                	cmp    eax,DWORD PTR [eax]
9f005d47:	9f                   	lahf   
9f005d48:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005d4d:	00 01                	add    BYTE PTR [ecx],al
9f005d4f:	00 7d 00             	add    BYTE PTR [ebp+0x0],bh
9f005d52:	00 00                	add    BYTE PTR [eax],al
9f005d54:	90                   	nop
9f005d55:	0a 00                	or     al,BYTE PTR [eax]
9f005d57:	9f                   	lahf   
9f005d58:	26 00 00             	add    BYTE PTR es:[eax],al
9f005d5b:	00 12                	add    BYTE PTR [edx],dl
9f005d5d:	00 01                	add    BYTE PTR [ecx],al
9f005d5f:	00 d5                	add    ch,dl
9f005d61:	01 00                	add    DWORD PTR [eax],eax
9f005d63:	00 90 33 00 9f 67    	add    BYTE PTR [eax+0x679f0033],dl
9f005d69:	00 00                	add    BYTE PTR [eax],al
9f005d6b:	00 12                	add    BYTE PTR [edx],dl
9f005d6d:	00 01                	add    BYTE PTR [ecx],al
9f005d6f:	00 dd                	add    ch,bl
9f005d71:	01 00                	add    DWORD PTR [eax],eax
9f005d73:	00 cc                	add    ah,cl
9f005d75:	34 00                	xor    al,0x0
9f005d77:	9f                   	lahf   
9f005d78:	20 00                	and    BYTE PTR [eax],al
9f005d7a:	00 00                	add    BYTE PTR [eax],al
9f005d7c:	12 00                	adc    al,BYTE PTR [eax]
9f005d7e:	01 00                	add    DWORD PTR [eax],eax
9f005d80:	5a                   	pop    edx
9f005d81:	00 00                	add    BYTE PTR [eax],al
9f005d83:	00 d5                	add    ch,dl
9f005d85:	06                   	push   es
9f005d86:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f005d8c:	12 00                	adc    al,BYTE PTR [eax]
9f005d8e:	01 00                	add    DWORD PTR [eax],eax
9f005d90:	69 01 00 00 00 25    	imul   eax,DWORD PTR [ecx],0x25000000
9f005d96:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f005d9c:	12 00                	adc    al,BYTE PTR [eax]
9f005d9e:	01 00                	add    DWORD PTR [eax],eax
9f005da0:	10 00                	adc    BYTE PTR [eax],al
9f005da2:	00 00                	add    BYTE PTR [eax],al
9f005da4:	b3 01                	mov    bl,0x1
9f005da6:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f005dac:	12 00                	adc    al,BYTE PTR [eax]
9f005dae:	01 00                	add    DWORD PTR [eax],eax
9f005db0:	07                   	pop    es
9f005db1:	01 00                	add    DWORD PTR [eax],eax
9f005db3:	00 35 17 00 9f 29    	add    BYTE PTR ds:0x299f0017,dh
9f005db9:	00 00                	add    BYTE PTR [eax],al
9f005dbb:	00 12                	add    BYTE PTR [edx],dl
9f005dbd:	00 01                	add    BYTE PTR [ecx],al
9f005dbf:	00 9f 01 00 00 f3    	add    BYTE PTR [edi-0xcffffff],bl
9f005dc5:	30 00                	xor    BYTE PTR [eax],al
9f005dc7:	9f                   	lahf   
9f005dc8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005dcb:	00 12                	add    BYTE PTR [edx],dl
9f005dcd:	00 01                	add    BYTE PTR [ecx],al
9f005dcf:	00 b0 00 00 00 00    	add    BYTE PTR [eax+0x0],dh
9f005dd5:	00 13                	add    BYTE PTR [ebx],dl
9f005dd7:	00 00                	add    BYTE PTR [eax],al
9f005dd9:	00 00                	add    BYTE PTR [eax],al
9f005ddb:	00 10                	add    BYTE PTR [eax],dl
9f005ddd:	00 01                	add    BYTE PTR [ecx],al
9f005ddf:	00 2a                	add    BYTE PTR [edx],ch
9f005de1:	01 00                	add    DWORD PTR [eax],eax
9f005de3:	00 29                	add    BYTE PTR [ecx],ch
9f005de5:	1a 00                	sbb    al,BYTE PTR [eax]
9f005de7:	9f                   	lahf   
9f005de8:	20 00                	and    BYTE PTR [eax],al
9f005dea:	00 00                	add    BYTE PTR [eax],al
9f005dec:	12 00                	adc    al,BYTE PTR [eax]
9f005dee:	01 00                	add    DWORD PTR [eax],eax
9f005df0:	28 02                	sub    BYTE PTR [edx],al
9f005df2:	00 00                	add    BYTE PTR [eax],al
9f005df4:	ca 3e 00             	retf   0x3e
9f005df7:	9f                   	lahf   
9f005df8:	3d 00 00 00 12       	cmp    eax,0x12000000
9f005dfd:	00 01                	add    BYTE PTR [ecx],al
9f005dff:	00 5b 01             	add    BYTE PTR [ebx+0x1],bl
9f005e02:	00 00                	add    BYTE PTR [eax],al
9f005e04:	f3 27                	repz daa 
9f005e06:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005e0c:	12 00                	adc    al,BYTE PTR [eax]
9f005e0e:	01 00                	add    DWORD PTR [eax],eax
9f005e10:	fc                   	cld    
9f005e11:	01 00                	add    DWORD PTR [eax],eax
9f005e13:	00 be 38 00 9f 20    	add    BYTE PTR [esi+0x209f0038],bh
9f005e19:	00 00                	add    BYTE PTR [eax],al
9f005e1b:	00 12                	add    BYTE PTR [edx],dl
9f005e1d:	00 01                	add    BYTE PTR [ecx],al
9f005e1f:	00 c5                	add    ch,al
9f005e21:	00 00                	add    BYTE PTR [eax],al
9f005e23:	00 45 11             	add    BYTE PTR [ebp+0x11],al
9f005e26:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
9f005e2c:	12 00                	adc    al,BYTE PTR [eax]
9f005e2e:	01 00                	add    DWORD PTR [eax],eax
9f005e30:	40                   	inc    eax
9f005e31:	02 00                	add    al,BYTE PTR [eax]
9f005e33:	00 1d 48 00 9f 41    	add    BYTE PTR ds:0x419f0048,bl
9f005e39:	00 00                	add    BYTE PTR [eax],al
9f005e3b:	00 12                	add    BYTE PTR [edx],dl
9f005e3d:	00 01                	add    BYTE PTR [ecx],al
9f005e3f:	00 88 00 00 00 3f    	add    BYTE PTR [eax+0x3f000000],cl
9f005e45:	0b 00                	or     eax,DWORD PTR [eax]
9f005e47:	9f                   	lahf   
9f005e48:	26 00 00             	add    BYTE PTR es:[eax],al
9f005e4b:	00 12                	add    BYTE PTR [edx],dl
9f005e4d:	00 01                	add    BYTE PTR [ecx],al
9f005e4f:	00 c0                	add    al,al
9f005e51:	00 00                	add    BYTE PTR [eax],al
9f005e53:	00 02                	add    BYTE PTR [edx],al
9f005e55:	11 00                	adc    DWORD PTR [eax],eax
9f005e57:	9f                   	lahf   
9f005e58:	43                   	inc    ebx
9f005e59:	00 00                	add    BYTE PTR [eax],al
9f005e5b:	00 12                	add    BYTE PTR [edx],dl
9f005e5d:	00 01                	add    BYTE PTR [ecx],al
9f005e5f:	00 a7 01 00 00 7a    	add    BYTE PTR [edi+0x7a000001],ah
9f005e65:	31 00                	xor    DWORD PTR [eax],eax
9f005e67:	9f                   	lahf   
9f005e68:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005e6d:	00 01                	add    BYTE PTR [ecx],al
9f005e6f:	00 61 00             	add    BYTE PTR [ecx+0x0],ah
9f005e72:	00 00                	add    BYTE PTR [eax],al
9f005e74:	c2 08 00             	ret    0x8
9f005e77:	9f                   	lahf   
9f005e78:	23 00                	and    eax,DWORD PTR [eax]
9f005e7a:	00 00                	add    BYTE PTR [eax],al
9f005e7c:	12 00                	adc    al,BYTE PTR [eax]
9f005e7e:	01 00                	add    DWORD PTR [eax],eax
9f005e80:	87 01                	xchg   DWORD PTR [ecx],eax
9f005e82:	00 00                	add    BYTE PTR [eax],al
9f005e84:	51                   	push   ecx
9f005e85:	2f                   	das    
9f005e86:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
9f005e8c:	12 00                	adc    al,BYTE PTR [eax]
9f005e8e:	01 00                	add    DWORD PTR [eax],eax
9f005e90:	e2 00                	loop   9f005e92 <__x86.get_pc_thunk.cx+0x15ee>
9f005e92:	00 00                	add    BYTE PTR [eax],al
9f005e94:	a1 15 00 9f 37       	mov    eax,ds:0x379f0015
9f005e99:	00 00                	add    BYTE PTR [eax],al
9f005e9b:	00 12                	add    BYTE PTR [edx],dl
9f005e9d:	00 01                	add    BYTE PTR [ecx],al
9f005e9f:	00 08                	add    BYTE PTR [eax],cl
9f005ea1:	00 00                	add    BYTE PTR [eax],al
9f005ea3:	00 70 00             	add    BYTE PTR [eax+0x0],dh
9f005ea6:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f005eac:	12 00                	adc    al,BYTE PTR [eax]
9f005eae:	01 00                	add    DWORD PTR [eax],eax
9f005eb0:	b5 01                	mov    ch,0x1
9f005eb2:	00 00                	add    BYTE PTR [eax],al
9f005eb4:	18 32                	sbb    BYTE PTR [edx],dh
9f005eb6:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f005ebc:	12 00                	adc    al,BYTE PTR [eax]
9f005ebe:	01 00                	add    DWORD PTR [eax],eax
9f005ec0:	fa                   	cli    
9f005ec1:	00 00                	add    BYTE PTR [eax],al
9f005ec3:	00 0c 17             	add    BYTE PTR [edi+edx*1],cl
9f005ec6:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f005ecc:	12 00                	adc    al,BYTE PTR [eax]
9f005ece:	01 00                	add    DWORD PTR [eax],eax
9f005ed0:	32 02                	xor    al,BYTE PTR [edx]
9f005ed2:	00 00                	add    BYTE PTR [eax],al
9f005ed4:	3c 3f                	cmp    al,0x3f
9f005ed6:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f005edc:	12 00                	adc    al,BYTE PTR [eax]
9f005ede:	01 00                	add    DWORD PTR [eax],eax
9f005ee0:	8d 00                	lea    eax,[eax]
9f005ee2:	00 00                	add    BYTE PTR [eax],al
9f005ee4:	92                   	xchg   edx,eax
9f005ee5:	0b 00                	or     eax,DWORD PTR [eax]
9f005ee7:	9f                   	lahf   
9f005ee8:	23 00                	and    eax,DWORD PTR [eax]
9f005eea:	00 00                	add    BYTE PTR [eax],al
9f005eec:	12 00                	adc    al,BYTE PTR [eax]
9f005eee:	01 00                	add    DWORD PTR [eax],eax
9f005ef0:	45                   	inc    ebp
9f005ef1:	02 00                	add    al,BYTE PTR [eax]
9f005ef3:	00 b0 47 00 9f 6d    	add    BYTE PTR [eax+0x6d9f0047],dh
9f005ef9:	00 00                	add    BYTE PTR [eax],al
9f005efb:	00 12                	add    BYTE PTR [edx],dl
9f005efd:	00 01                	add    BYTE PTR [ecx],al
9f005eff:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
9f005f02:	00 00                	add    BYTE PTR [eax],al
9f005f04:	9e                   	sahf   
9f005f05:	09 00                	or     DWORD PTR [eax],eax
9f005f07:	9f                   	lahf   
9f005f08:	93                   	xchg   ebx,eax
9f005f09:	00 00                	add    BYTE PTR [eax],al
9f005f0b:	00 12                	add    BYTE PTR [edx],dl
9f005f0d:	00 01                	add    BYTE PTR [ecx],al
9f005f0f:	00 25 01 00 00 09    	add    BYTE PTR ds:0x9000001,ah
9f005f15:	1a 00                	sbb    al,BYTE PTR [eax]
9f005f17:	9f                   	lahf   
9f005f18:	20 00                	and    BYTE PTR [eax],al
9f005f1a:	00 00                	add    BYTE PTR [eax],al
9f005f1c:	12 00                	adc    al,BYTE PTR [eax]
9f005f1e:	01 00                	add    DWORD PTR [eax],eax
9f005f20:	1c 00                	sbb    al,0x0
9f005f22:	00 00                	add    BYTE PTR [eax],al
9f005f24:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
9f005f27:	9f                   	lahf   
9f005f28:	5c                   	pop    esp
9f005f29:	00 00                	add    BYTE PTR [eax],al
9f005f2b:	00 12                	add    BYTE PTR [edx],dl
9f005f2d:	00 01                	add    BYTE PTR [ecx],al
9f005f2f:	00 a3 00 00 00 b4    	add    BYTE PTR [ebx-0x4c000000],ah
9f005f35:	10 00                	adc    BYTE PTR [eax],al
9f005f37:	9f                   	lahf   
9f005f38:	26 00 00             	add    BYTE PTR es:[eax],al
9f005f3b:	00 12                	add    BYTE PTR [edx],dl
9f005f3d:	00 01                	add    BYTE PTR [ecx],al
9f005f3f:	00 45 01             	add    BYTE PTR [ebp+0x1],al
9f005f42:	00 00                	add    BYTE PTR [eax],al
9f005f44:	cd 1e                	int    0x1e
9f005f46:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f005f4c:	12 00                	adc    al,BYTE PTR [eax]
9f005f4e:	01 00                	add    DWORD PTR [eax],eax
9f005f50:	c6 01 00             	mov    BYTE PTR [ecx],0x0
9f005f53:	00 1d 33 00 9f 1a    	add    BYTE PTR ds:0x1a9f0033,bl
9f005f59:	00 00                	add    BYTE PTR [eax],al
9f005f5b:	00 12                	add    BYTE PTR [edx],dl
9f005f5d:	00 01                	add    BYTE PTR [ecx],al
9f005f5f:	00 78 00             	add    BYTE PTR [eax+0x0],bh
9f005f62:	00 00                	add    BYTE PTR [eax],al
9f005f64:	19 09                	sbb    DWORD PTR [ecx],ecx
9f005f66:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
9f005f6c:	12 00                	adc    al,BYTE PTR [eax]
9f005f6e:	01 00                	add    DWORD PTR [eax],eax
9f005f70:	2a 00                	sub    al,BYTE PTR [eax]
9f005f72:	00 00                	add    BYTE PTR [eax],al
9f005f74:	52                   	push   edx
9f005f75:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f005f7a:	00 00                	add    BYTE PTR [eax],al
9f005f7c:	12 00                	adc    al,BYTE PTR [eax]
9f005f7e:	01 00                	add    DWORD PTR [eax],eax
9f005f80:	17                   	pop    ss
9f005f81:	01 00                	add    DWORD PTR [eax],eax
9f005f83:	00 9e 19 00 9f 4f    	add    BYTE PTR [esi+0x4f9f0019],bl
9f005f89:	00 00                	add    BYTE PTR [eax],al
9f005f8b:	00 12                	add    BYTE PTR [edx],dl
9f005f8d:	00 01                	add    BYTE PTR [ecx],al
9f005f8f:	00 01                	add    BYTE PTR [ecx],al
9f005f91:	00 00                	add    BYTE PTR [eax],al
9f005f93:	00 00                	add    BYTE PTR [eax],al
9f005f95:	00 00                	add    BYTE PTR [eax],al
9f005f97:	9f                   	lahf   
9f005f98:	38 00                	cmp    BYTE PTR [eax],al
9f005f9a:	00 00                	add    BYTE PTR [eax],al
9f005f9c:	12 00                	adc    al,BYTE PTR [eax]
9f005f9e:	01 00                	add    DWORD PTR [eax],eax
9f005fa0:	ed                   	in     eax,dx
9f005fa1:	01 00                	add    DWORD PTR [eax],eax
9f005fa3:	00 6c 36 00          	add    BYTE PTR [esi+esi*1+0x0],ch
9f005fa7:	9f                   	lahf   
9f005fa8:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005fad:	00 01                	add    BYTE PTR [ecx],al
9f005faf:	00 04 02             	add    BYTE PTR [edx+eax*1],al
9f005fb2:	00 00                	add    BYTE PTR [eax],al
9f005fb4:	fe                   	(bad)  
9f005fb5:	39 00                	cmp    DWORD PTR [eax],eax
9f005fb7:	9f                   	lahf   
9f005fb8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005fbb:	00 12                	add    BYTE PTR [edx],dl
9f005fbd:	00 01                	add    BYTE PTR [ecx],al
9f005fbf:	00 6f 00             	add    BYTE PTR [edi+0x0],ch
9f005fc2:	00 00                	add    BYTE PTR [eax],al
9f005fc4:	31 0a                	xor    DWORD PTR [edx],ecx
9f005fc6:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f005fcc:	12 00                	adc    al,BYTE PTR [eax]
9f005fce:	01 00                	add    DWORD PTR [eax],eax
9f005fd0:	21 00                	and    DWORD PTR [eax],eax
9f005fd2:	00 00                	add    BYTE PTR [eax],al
9f005fd4:	98                   	cwde   
9f005fd5:	04 00                	add    al,0x0
9f005fd7:	9f                   	lahf   
9f005fd8:	ba 00 00 00 12       	mov    edx,0x12000000
9f005fdd:	00 01                	add    BYTE PTR [ecx],al
9f005fdf:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
9f005fe2:	00 00                	add    BYTE PTR [eax],al
9f005fe4:	23 25 00 9f 1b 00    	and    esp,DWORD PTR ds:0x1b9f00
9f005fea:	00 00                	add    BYTE PTR [eax],al
9f005fec:	12 00                	adc    al,BYTE PTR [eax]
9f005fee:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f005ff0 <.dynstr>:
9f005ff0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005ff3:	72 63                	jb     9f006058 <__x86.get_pc_thunk.cx+0x17b4>
9f005ff5:	68 72 00 73 74       	push   0x74730072
9f005ffa:	72 63                	jb     9f00605f <__x86.get_pc_thunk.cx+0x17bb>
9f005ffc:	73 70                	jae    9f00606e <__x86.get_pc_thunk.cx+0x17ca>
9f005ffe:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005fff:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006002:	72 74                	jb     9f006078 <__x86.get_pc_thunk.cx+0x17d4>
9f006004:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006005:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f006008:	74 6f                	je     9f006079 <__x86.get_pc_thunk.cx+0x17d5>
9f00600a:	61                   	popa   
9f00600b:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f00600e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00600f:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f006015:	54                   	push   esp
9f006016:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006017:	58                   	pop    eax
9f006018:	59                   	pop    ecx
9f006019:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f00601c:	76 65                	jbe    9f006083 <__x86.get_pc_thunk.cx+0x17df>
9f00601e:	43                   	inc    ebx
9f00601f:	75 72                	jne    9f006093 <__x86.get_pc_thunk.cx+0x17ef>
9f006021:	73 6f                	jae    9f006092 <__x86.get_pc_thunk.cx+0x17ee>
9f006023:	72 50                	jb     9f006075 <__x86.get_pc_thunk.cx+0x17d1>
9f006025:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006026:	73 69                	jae    9f006091 <__x86.get_pc_thunk.cx+0x17ed>
9f006028:	74 69                	je     9f006093 <__x86.get_pc_thunk.cx+0x17ef>
9f00602a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00602b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00602c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00602f:	73 74                	jae    9f0060a5 <__x86.get_pc_thunk.cx+0x1801>
9f006031:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006032:	72 65                	jb     9f006099 <__x86.get_pc_thunk.cx+0x17f5>
9f006034:	43                   	inc    ebx
9f006035:	75 72                	jne    9f0060a9 <__x86.get_pc_thunk.cx+0x1805>
9f006037:	73 6f                	jae    9f0060a8 <__x86.get_pc_thunk.cx+0x1804>
9f006039:	72 50                	jb     9f00608b <__x86.get_pc_thunk.cx+0x17e7>
9f00603b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00603c:	73 69                	jae    9f0060a7 <__x86.get_pc_thunk.cx+0x1803>
9f00603e:	74 69                	je     9f0060a9 <__x86.get_pc_thunk.cx+0x1805>
9f006040:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006041:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006042:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006045:	74 65                	je     9f0060ac <__x86.get_pc_thunk.cx+0x1808>
9f006047:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006048:	76 00                	jbe    9f00604a <__x86.get_pc_thunk.cx+0x17a6>
9f00604a:	73 65                	jae    9f0060b1 <__x86.get_pc_thunk.cx+0x180d>
9f00604c:	74 65                	je     9f0060b3 <__x86.get_pc_thunk.cx+0x180f>
9f00604e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00604f:	76 00                	jbe    9f006051 <__x86.get_pc_thunk.cx+0x17ad>
9f006051:	67                   	addr16
9f006052:	65                   	gs
9f006053:	74 63                	je     9f0060b8 <__x86.get_pc_thunk.cx+0x1814>
9f006055:	77 64                	ja     9f0060bb <__x86.get_pc_thunk.cx+0x1817>
9f006057:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00605a:	74 64                	je     9f0060c0 <__x86.get_pc_thunk.cx+0x181c>
9f00605c:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
9f006063:	65 00 66 72          	add    BYTE PTR gs:[esi+0x72],ah
9f006067:	65 6f                	outs   dx,DWORD PTR gs:[esi]
9f006069:	70 65                	jo     9f0060d0 <__x86.get_pc_thunk.cx+0x182c>
9f00606b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00606c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00606f:	61                   	popa   
9f006070:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f006074:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f00607b:	6b 
9f00607c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00607f:	61                   	popa   
9f006080:	74 00                	je     9f006082 <__x86.get_pc_thunk.cx+0x17de>
9f006082:	72 65                	jb     9f0060e9 <__x86.get_pc_thunk.cx+0x1845>
9f006084:	73 6f                	jae    9f0060f5 <__x86.get_pc_thunk.cx+0x1851>
9f006086:	6c                   	ins    BYTE PTR es:[edi],dx
9f006087:	76 65                	jbe    9f0060ee <__x86.get_pc_thunk.cx+0x184a>
9f006089:	50                   	push   eax
9f00608a:	61                   	popa   
9f00608b:	74 68                	je     9f0060f5 <__x86.get_pc_thunk.cx+0x1851>
9f00608d:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f006091:	6c                   	ins    BYTE PTR es:[edi],dx
9f006092:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006095:	74 6c                	je     9f006103 <__x86.get_pc_thunk.cx+0x185f>
9f006097:	69 6e 65 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x65],0x74757000
9f00609e:	73 00                	jae    9f0060a0 <__x86.get_pc_thunk.cx+0x17fc>
9f0060a0:	73 79                	jae    9f00611b <__x86.get_pc_thunk.cx+0x1877>
9f0060a2:	73 45                	jae    9f0060e9 <__x86.get_pc_thunk.cx+0x1845>
9f0060a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060a5:	74 65                	je     9f00610c <__x86.get_pc_thunk.cx+0x1868>
9f0060a7:	72 5f                	jb     9f006108 <__x86.get_pc_thunk.cx+0x1864>
9f0060a9:	56                   	push   esi
9f0060aa:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f0060af:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f0060b2:	74 63                	je     9f006117 <__x86.get_pc_thunk.cx+0x1873>
9f0060b4:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0060b7:	74 63                	je     9f00611c <__x86.get_pc_thunk.cx+0x1878>
9f0060b9:	68 61 72 00 67       	push   0x67007261
9f0060be:	65                   	gs
9f0060bf:	74 73                	je     9f006134 <__x86.get_pc_thunk.cx+0x1890>
9f0060c1:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0060c5:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f0060c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060c9:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f0060d0:	74 
9f0060d1:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f0060d4:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f0060db:	65                   	gs
9f0060dc:	65                   	gs
9f0060dd:	70 00                	jo     9f0060df <__x86.get_pc_thunk.cx+0x183b>
9f0060df:	73 6c                	jae    9f00614d <__x86.get_pc_thunk.cx+0x18a9>
9f0060e1:	65                   	gs
9f0060e2:	65                   	gs
9f0060e3:	70 54                	jo     9f006139 <__x86.get_pc_thunk.cx+0x1895>
9f0060e5:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f0060ec:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f0060f3:	6e 
9f0060f4:	61                   	popa   
9f0060f5:	6c                   	ins    BYTE PTR es:[edi],dx
9f0060f6:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f0060f9:	72 6b                	jb     9f006166 <__x86.get_pc_thunk.cx+0x18c2>
9f0060fb:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f0060fe:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f006101:	65                   	gs
9f006102:	78 65                	js     9f006169 <__x86.get_pc_thunk.cx+0x18c5>
9f006104:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f006107:	65                   	gs
9f006108:	78 65                	js     9f00616f <__x86.get_pc_thunk.cx+0x18cb>
9f00610a:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f00610d:	77 61                	ja     9f006170 <__x86.get_pc_thunk.cx+0x18cc>
9f00610f:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f006116:	78 
9f006117:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f00611e:	77 
9f00611f:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f006123:	6c                   	ins    BYTE PTR es:[edi],dx
9f006124:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f00612b:	69 
9f00612c:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00612d:	65                   	gs
9f00612e:	54                   	push   esp
9f00612f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006130:	41                   	inc    ecx
9f006131:	72 67                	jb     9f00619a <__x86.get_pc_thunk.cx+0x18f6>
9f006133:	76 00                	jbe    9f006135 <__x86.get_pc_thunk.cx+0x1891>
9f006135:	73 65                	jae    9f00619c <__x86.get_pc_thunk.cx+0x18f8>
9f006137:	74 53                	je     9f00618c <__x86.get_pc_thunk.cx+0x18e8>
9f006139:	54                   	push   esp
9f00613a:	44                   	inc    esp
9f00613b:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
9f00613f:	65                   	gs
9f006140:	41                   	inc    ecx
9f006141:	44                   	inc    esp
9f006142:	75 6d                	jne    9f0061b1 <__x86.get_pc_thunk.cx+0x190d>
9f006144:	70 00                	jo     9f006146 <__x86.get_pc_thunk.cx+0x18a2>
9f006146:	6d                   	ins    DWORD PTR es:[edi],dx
9f006147:	6d                   	ins    DWORD PTR es:[edi],dx
9f006148:	61                   	popa   
9f006149:	70 00                	jo     9f00614b <__x86.get_pc_thunk.cx+0x18a7>
9f00614b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00614c:	65                   	gs
9f00614d:	6d                   	ins    DWORD PTR es:[edi],dx
9f00614e:	73 65                	jae    9f0061b5 <__x86.get_pc_thunk.cx+0x1911>
9f006150:	74 00                	je     9f006152 <__x86.get_pc_thunk.cx+0x18ae>
9f006152:	6d                   	ins    DWORD PTR es:[edi],dx
9f006153:	61                   	popa   
9f006154:	6c                   	ins    BYTE PTR es:[edi],dx
9f006155:	6c                   	ins    BYTE PTR es:[edi],dx
9f006156:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006157:	63 00                	arpl   WORD PTR [eax],ax
9f006159:	72 65                	jb     9f0061c0 <__x86.get_pc_thunk.cx+0x191c>
9f00615b:	61                   	popa   
9f00615c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00615d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00615e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00615f:	63 00                	arpl   WORD PTR [eax],ax
9f006161:	66                   	data16
9f006162:	72 65                	jb     9f0061c9 <__x86.get_pc_thunk.cx+0x1925>
9f006164:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f006168:	6d                   	ins    DWORD PTR es:[edi],dx
9f006169:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f00616c:	00 70 69             	add    BYTE PTR [eax+0x69],dh
9f00616f:	70 65                	jo     9f0061d6 <__x86.get_pc_thunk.cx+0x1932>
9f006171:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f006175:	33 00                	xor    eax,DWORD PTR [eax]
9f006177:	73 70                	jae    9f0061e9 <__x86.get_pc_thunk.cx+0x1945>
9f006179:	72 69                	jb     9f0061e4 <__x86.get_pc_thunk.cx+0x1940>
9f00617b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00617c:	74 66                	je     9f0061e4 <__x86.get_pc_thunk.cx+0x1940>
9f00617e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006181:	73 65                	jae    9f0061e8 <__x86.get_pc_thunk.cx+0x1944>
9f006183:	74 52                	je     9f0061d7 <__x86.get_pc_thunk.cx+0x1933>
9f006185:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006186:	77 00                	ja     9f006188 <__x86.get_pc_thunk.cx+0x18e4>
9f006188:	73 74                	jae    9f0061fe <__x86.get_pc_thunk.cx+0x195a>
9f00618a:	72 63                	jb     9f0061ef <__x86.get_pc_thunk.cx+0x194b>
9f00618c:	61                   	popa   
9f00618d:	74 00                	je     9f00618f <__x86.get_pc_thunk.cx+0x18eb>
9f00618f:	73 74                	jae    9f006205 <__x86.get_pc_thunk.cx+0x1961>
9f006191:	72 6e                	jb     9f006201 <__x86.get_pc_thunk.cx+0x195d>
9f006193:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f006196:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006199:	72 63                	jb     9f0061fe <__x86.get_pc_thunk.cx+0x195a>
9f00619b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00619c:	70 00                	jo     9f00619e <__x86.get_pc_thunk.cx+0x18fa>
9f00619e:	73 74                	jae    9f006214 <__x86.get_pc_thunk.cx+0x1970>
9f0061a0:	72 63                	jb     9f006205 <__x86.get_pc_thunk.cx+0x1961>
9f0061a2:	70 79                	jo     9f00621d <__x86.get_pc_thunk.cx+0x1979>
9f0061a4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061a7:	72 63                	jb     9f00620c <__x86.get_pc_thunk.cx+0x1968>
9f0061a9:	70 79                	jo     9f006224 <__x86.get_pc_thunk.cx+0x1980>
9f0061ab:	63 00                	arpl   WORD PTR [eax],ax
9f0061ad:	73 74                	jae    9f006223 <__x86.get_pc_thunk.cx+0x197f>
9f0061af:	72 69                	jb     9f00621a <__x86.get_pc_thunk.cx+0x1976>
9f0061b1:	73 6e                	jae    9f006221 <__x86.get_pc_thunk.cx+0x197d>
9f0061b3:	75 6d                	jne    9f006222 <__x86.get_pc_thunk.cx+0x197e>
9f0061b5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061b8:	72 6c                	jb     9f006226 <__x86.get_pc_thunk.cx+0x1982>
9f0061ba:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f0061bc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061bf:	72 6e                	jb     9f00622f <__x86.get_pc_thunk.cx+0x198b>
9f0061c1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061c2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f0061c4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061c7:	72 6e                	jb     9f006237 <__x86.get_pc_thunk.cx+0x1993>
9f0061c9:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f0061cc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061cf:	72 6e                	jb     9f00623f <__x86.get_pc_thunk.cx+0x199b>
9f0061d1:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f0061d4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061d7:	72 74                	jb     9f00624d <__x86.get_pc_thunk.cx+0x19a9>
9f0061d9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0061da:	75 6c                	jne    9f006248 <__x86.get_pc_thunk.cx+0x19a4>
9f0061dc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061df:	72 6c                	jb     9f00624d <__x86.get_pc_thunk.cx+0x19a9>
9f0061e1:	65                   	gs
9f0061e2:	66                   	data16
9f0061e3:	74 00                	je     9f0061e5 <__x86.get_pc_thunk.cx+0x1941>
9f0061e5:	73 74                	jae    9f00625b <__x86.get_pc_thunk.cx+0x19b7>
9f0061e7:	72 74                	jb     9f00625d <__x86.get_pc_thunk.cx+0x19b9>
9f0061e9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0061ea:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061eb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061ee:	72 74                	jb     9f006264 <__x86.get_pc_thunk.cx+0x19c0>
9f0061f0:	72 69                	jb     9f00625b <__x86.get_pc_thunk.cx+0x19b7>
9f0061f2:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061f3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061f6:	72 72                	jb     9f00626a <__x86.get_pc_thunk.cx+0x19c6>
9f0061f8:	65                   	gs
9f0061f9:	70 6c                	jo     9f006267 <__x86.get_pc_thunk.cx+0x19c3>
9f0061fb:	61                   	popa   
9f0061fc:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f0061ff:	73 74                	jae    9f006275 <__x86.get_pc_thunk.cx+0x19d1>
9f006201:	72 73                	jb     9f006276 <__x86.get_pc_thunk.cx+0x19d2>
9f006203:	74 72                	je     9f006277 <__x86.get_pc_thunk.cx+0x19d3>
9f006205:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006208:	74 74                	je     9f00627e <__x86.get_pc_thunk.cx+0x19da>
9f00620a:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f006211:	74 69                	je     9f00627c <__x86.get_pc_thunk.cx+0x19d8>
9f006213:	6d                   	ins    DWORD PTR es:[edi],dx
9f006214:	65                   	gs
9f006215:	5f                   	pop    edi
9f006216:	72 00                	jb     9f006218 <__x86.get_pc_thunk.cx+0x1974>
9f006218:	6c                   	ins    BYTE PTR es:[edi],dx
9f006219:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00621a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f00621d:	74 69                	je     9f006288 <__x86.get_pc_thunk.cx+0x19e4>
9f00621f:	6d                   	ins    DWORD PTR es:[edi],dx
9f006220:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f006225:	61                   	popa   
9f006226:	6c                   	ins    BYTE PTR es:[edi],dx
9f006227:	74 69                	je     9f006292 <__x86.get_pc_thunk.cx+0x19ee>
9f006229:	6d                   	ins    DWORD PTR es:[edi],dx
9f00622a:	65                   	gs
9f00622b:	5f                   	pop    edi
9f00622c:	72 00                	jb     9f00622e <__x86.get_pc_thunk.cx+0x198a>
9f00622e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00622f:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f006234:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006237:	74 74                	je     9f0062ad <__x86.get_pc_thunk.cx+0x1a09>
9f006239:	69                   	.byte 0x69
9f00623a:	6d                   	ins    DWORD PTR es:[edi],dx
9f00623b:	65                   	gs
	...

Disassembly of section .hash:

9f006240 <.hash>:
9f006240:	43                   	inc    ebx
9f006241:	00 00                	add    BYTE PTR [eax],al
9f006243:	00 4f 00             	add    BYTE PTR [edi+0x0],cl
	...
9f006252:	00 00                	add    BYTE PTR [eax],al
9f006254:	1f                   	pop    ds
9f006255:	00 00                	add    BYTE PTR [eax],al
9f006257:	00 49 00             	add    BYTE PTR [ecx+0x0],cl
9f00625a:	00 00                	add    BYTE PTR [eax],al
9f00625c:	3d 00 00 00 3c       	cmp    eax,0x3c000000
9f006261:	00 00                	add    BYTE PTR [eax],al
9f006263:	00 1d 00 00 00 16    	add    BYTE PTR ds:0x16000000,bl
9f006269:	00 00                	add    BYTE PTR [eax],al
9f00626b:	00 00                	add    BYTE PTR [eax],al
9f00626d:	00 00                	add    BYTE PTR [eax],al
9f00626f:	00 12                	add    BYTE PTR [edx],dl
9f006271:	00 00                	add    BYTE PTR [eax],al
9f006273:	00 26                	add    BYTE PTR [esi],ah
9f006275:	00 00                	add    BYTE PTR [eax],al
9f006277:	00 00                	add    BYTE PTR [eax],al
9f006279:	00 00                	add    BYTE PTR [eax],al
9f00627b:	00 48 00             	add    BYTE PTR [eax+0x0],cl
9f00627e:	00 00                	add    BYTE PTR [eax],al
9f006280:	1b 00                	sbb    eax,DWORD PTR [eax]
9f006282:	00 00                	add    BYTE PTR [eax],al
9f006284:	36 00 00             	add    BYTE PTR ss:[eax],al
	...
9f00628f:	00 35 00 00 00 13    	add    BYTE PTR ds:0x13000000,dh
9f006295:	00 00                	add    BYTE PTR [eax],al
9f006297:	00 00                	add    BYTE PTR [eax],al
9f006299:	00 00                	add    BYTE PTR [eax],al
9f00629b:	00 33                	add    BYTE PTR [ebx],dh
9f00629d:	00 00                	add    BYTE PTR [eax],al
9f00629f:	00 42 00             	add    BYTE PTR [edx+0x0],al
9f0062a2:	00 00                	add    BYTE PTR [eax],al
9f0062a4:	00 00                	add    BYTE PTR [eax],al
9f0062a6:	00 00                	add    BYTE PTR [eax],al
9f0062a8:	2f                   	das    
9f0062a9:	00 00                	add    BYTE PTR [eax],al
9f0062ab:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
	...
9f0062b7:	00 1e                	add    BYTE PTR [esi],bl
9f0062b9:	00 00                	add    BYTE PTR [eax],al
9f0062bb:	00 00                	add    BYTE PTR [eax],al
9f0062bd:	00 00                	add    BYTE PTR [eax],al
9f0062bf:	00 4a 00             	add    BYTE PTR [edx+0x0],cl
9f0062c2:	00 00                	add    BYTE PTR [eax],al
9f0062c4:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f0062c7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0062ca:	00 00                	add    BYTE PTR [eax],al
9f0062cc:	44                   	inc    esp
9f0062cd:	00 00                	add    BYTE PTR [eax],al
9f0062cf:	00 18                	add    BYTE PTR [eax],bl
9f0062d1:	00 00                	add    BYTE PTR [eax],al
9f0062d3:	00 2d 00 00 00 00    	add    BYTE PTR ds:0x0,ch
9f0062d9:	00 00                	add    BYTE PTR [eax],al
9f0062db:	00 3a                	add    BYTE PTR [edx],bh
9f0062dd:	00 00                	add    BYTE PTR [eax],al
9f0062df:	00 3e                	add    BYTE PTR [esi],bh
9f0062e1:	00 00                	add    BYTE PTR [eax],al
9f0062e3:	00 2a                	add    BYTE PTR [edx],ch
9f0062e5:	00 00                	add    BYTE PTR [eax],al
9f0062e7:	00 3b                	add    BYTE PTR [ebx],bh
9f0062e9:	00 00                	add    BYTE PTR [eax],al
9f0062eb:	00 46 00             	add    BYTE PTR [esi+0x0],al
9f0062ee:	00 00                	add    BYTE PTR [eax],al
9f0062f0:	4d                   	dec    ebp
9f0062f1:	00 00                	add    BYTE PTR [eax],al
9f0062f3:	00 2b                	add    BYTE PTR [ebx],ch
9f0062f5:	00 00                	add    BYTE PTR [eax],al
9f0062f7:	00 47 00             	add    BYTE PTR [edi+0x0],al
9f0062fa:	00 00                	add    BYTE PTR [eax],al
9f0062fc:	45                   	inc    ebp
	...
9f006311:	00 00                	add    BYTE PTR [eax],al
9f006313:	00 3f                	add    BYTE PTR [edi],bh
	...
9f00631d:	00 00                	add    BYTE PTR [eax],al
9f00631f:	00 37                	add    BYTE PTR [edi],dh
9f006321:	00 00                	add    BYTE PTR [eax],al
9f006323:	00 00                	add    BYTE PTR [eax],al
9f006325:	00 00                	add    BYTE PTR [eax],al
9f006327:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f00632a:	00 00                	add    BYTE PTR [eax],al
9f00632c:	31 00                	xor    DWORD PTR [eax],eax
9f00632e:	00 00                	add    BYTE PTR [eax],al
9f006330:	00 00                	add    BYTE PTR [eax],al
9f006332:	00 00                	add    BYTE PTR [eax],al
9f006334:	41                   	inc    ecx
9f006335:	00 00                	add    BYTE PTR [eax],al
9f006337:	00 20                	add    BYTE PTR [eax],ah
9f006339:	00 00                	add    BYTE PTR [eax],al
9f00633b:	00 4e 00             	add    BYTE PTR [esi+0x0],cl
9f00633e:	00 00                	add    BYTE PTR [eax],al
9f006340:	0f 00 00             	sldt   WORD PTR [eax]
9f006343:	00 32                	add    BYTE PTR [edx],dh
9f006345:	00 00                	add    BYTE PTR [eax],al
9f006347:	00 15 00 00 00 43    	add    BYTE PTR ds:0x43000000,dl
9f00634d:	00 00                	add    BYTE PTR [eax],al
9f00634f:	00 09                	add    BYTE PTR [ecx],cl
	...
9f00637d:	00 00                	add    BYTE PTR [eax],al
9f00637f:	00 0a                	add    BYTE PTR [edx],cl
	...
9f006395:	00 00                	add    BYTE PTR [eax],al
9f006397:	00 01                	add    BYTE PTR [ecx],al
	...
9f0063a1:	00 00                	add    BYTE PTR [eax],al
9f0063a3:	00 08                	add    BYTE PTR [eax],cl
	...
9f0063b1:	00 00                	add    BYTE PTR [eax],al
9f0063b3:	00 0e                	add    BYTE PTR [esi],cl
	...
9f0063bd:	00 00                	add    BYTE PTR [eax],al
9f0063bf:	00 06                	add    BYTE PTR [esi],al
9f0063c1:	00 00                	add    BYTE PTR [eax],al
9f0063c3:	00 00                	add    BYTE PTR [eax],al
9f0063c5:	00 00                	add    BYTE PTR [eax],al
9f0063c7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f0063ca:	00 00                	add    BYTE PTR [eax],al
9f0063cc:	00 00                	add    BYTE PTR [eax],al
9f0063ce:	00 00                	add    BYTE PTR [eax],al
9f0063d0:	05 00 00 00 00       	add    eax,0x0
9f0063d5:	00 00                	add    BYTE PTR [eax],al
9f0063d7:	00 0d 00 00 00 19    	add    BYTE PTR ds:0x19000000,cl
9f0063dd:	00 00                	add    BYTE PTR [eax],al
9f0063df:	00 07                	add    BYTE PTR [edi],al
	...
9f0063e9:	00 00                	add    BYTE PTR [eax],al
9f0063eb:	00 0b                	add    BYTE PTR [ebx],cl
9f0063ed:	00 00                	add    BYTE PTR [eax],al
9f0063ef:	00 23                	add    BYTE PTR [ebx],ah
9f0063f1:	00 00                	add    BYTE PTR [eax],al
9f0063f3:	00 03                	add    BYTE PTR [ebx],al
9f0063f5:	00 00                	add    BYTE PTR [eax],al
9f0063f7:	00 00                	add    BYTE PTR [eax],al
9f0063f9:	00 00                	add    BYTE PTR [eax],al
9f0063fb:	00 27                	add    BYTE PTR [edi],ah
	...
9f006405:	00 00                	add    BYTE PTR [eax],al
9f006407:	00 29                	add    BYTE PTR [ecx],ch
	...
9f006411:	00 00                	add    BYTE PTR [eax],al
9f006413:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
	...
9f006422:	00 00                	add    BYTE PTR [eax],al
9f006424:	11 00                	adc    DWORD PTR [eax],eax
9f006426:	00 00                	add    BYTE PTR [eax],al
9f006428:	30 00                	xor    BYTE PTR [eax],al
9f00642a:	00 00                	add    BYTE PTR [eax],al
9f00642c:	28 00                	sub    BYTE PTR [eax],al
	...
9f006436:	00 00                	add    BYTE PTR [eax],al
9f006438:	34 00                	xor    al,0x0
9f00643a:	00 00                	add    BYTE PTR [eax],al
9f00643c:	00 00                	add    BYTE PTR [eax],al
9f00643e:	00 00                	add    BYTE PTR [eax],al
9f006440:	17                   	pop    ss
9f006441:	00 00                	add    BYTE PTR [eax],al
9f006443:	00 1a                	add    BYTE PTR [edx],bl
9f006445:	00 00                	add    BYTE PTR [eax],al
9f006447:	00 39                	add    BYTE PTR [ecx],bh
9f006449:	00 00                	add    BYTE PTR [eax],al
9f00644b:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
	...
9f006456:	00 00                	add    BYTE PTR [eax],al
9f006458:	25 00 00 00 00       	and    eax,0x0
9f00645d:	00 00                	add    BYTE PTR [eax],al
9f00645f:	00 00                	add    BYTE PTR [eax],al
9f006461:	00 00                	add    BYTE PTR [eax],al
9f006463:	00 22                	add    BYTE PTR [edx],ah
9f006465:	00 00                	add    BYTE PTR [eax],al
9f006467:	00 21                	add    BYTE PTR [ecx],ah
9f006469:	00 00                	add    BYTE PTR [eax],al
9f00646b:	00 00                	add    BYTE PTR [eax],al
9f00646d:	00 00                	add    BYTE PTR [eax],al
9f00646f:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f006472:	00 00                	add    BYTE PTR [eax],al
9f006474:	02 00                	add    al,BYTE PTR [eax]
9f006476:	00 00                	add    BYTE PTR [eax],al
9f006478:	24 00                	and    al,0x0
9f00647a:	00 00                	add    BYTE PTR [eax],al
9f00647c:	38 00                	cmp    BYTE PTR [eax],al
9f00647e:	00 00                	add    BYTE PTR [eax],al
9f006480:	00 00                	add    BYTE PTR [eax],al
9f006482:	00 00                	add    BYTE PTR [eax],al
9f006484:	10 00                	adc    BYTE PTR [eax],al
9f006486:	00 00                	add    BYTE PTR [eax],al
9f006488:	4b                   	dec    ebx
9f006489:	00 00                	add    BYTE PTR [eax],al
9f00648b:	00 00                	add    BYTE PTR [eax],al
9f00648d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f006490 <.eh_frame>:
9f006490:	14 00                	adc    al,0x0
9f006492:	00 00                	add    BYTE PTR [eax],al
9f006494:	00 00                	add    BYTE PTR [eax],al
9f006496:	00 00                	add    BYTE PTR [eax],al
9f006498:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f00649b:	00 01                	add    BYTE PTR [ecx],al
9f00649d:	7c 08                	jl     9f0064a7 <__x86.get_pc_thunk.cx+0x1c03>
9f00649f:	01 1b                	add    DWORD PTR [ebx],ebx
9f0064a1:	0c 04                	or     al,0x4
9f0064a3:	04 88                	add    al,0x88
9f0064a5:	01 00                	add    DWORD PTR [eax],eax
9f0064a7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0064aa:	00 00                	add    BYTE PTR [eax],al
9f0064ac:	1c 00                	sbb    al,0x0
9f0064ae:	00 00                	add    BYTE PTR [eax],al
9f0064b0:	c0 e3 ff             	shl    bl,0xff
9f0064b3:	ff 30                	push   DWORD PTR [eax]
9f0064b5:	00 00                	add    BYTE PTR [eax],al
9f0064b7:	00 00                	add    BYTE PTR [eax],al
9f0064b9:	0e                   	push   cs
9f0064ba:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f0064bd:	0c 4a                	or     al,0x4a
9f0064bf:	0f 0b                	ud2    
9f0064c1:	74 04                	je     9f0064c7 <__x86.get_pc_thunk.cx+0x1c23>
9f0064c3:	78 00                	js     9f0064c5 <__x86.get_pc_thunk.cx+0x1c21>
9f0064c5:	3f                   	aas    
9f0064c6:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f0064c8:	2a 32                	sub    dh,BYTE PTR [edx]
9f0064ca:	24 22                	and    al,0x22
9f0064cc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f0064d0 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f0064d0:	01 1b                	add    DWORD PTR [ebx],ebx
9f0064d2:	03 3b                	add    edi,DWORD PTR [ebx]
9f0064d4:	d4 e3                	aam    0xe3
9f0064d6:	ff                   	(bad)  
9f0064d7:	ff 86 00 00 00 30    	inc    DWORD PTR [esi+0x30000000]
9f0064dd:	9b                   	fwait
9f0064de:	ff                   	(bad)  
9f0064df:	ff f0                	push   eax
9f0064e1:	e3 ff                	jecxz  9f0064e2 <__GNU_EH_FRAME_HDR+0x12>
9f0064e3:	ff 68 9b             	jmp    FWORD PTR [eax-0x65]
9f0064e6:	ff                   	(bad)  
9f0064e7:	ff 10                	call   DWORD PTR [eax]
9f0064e9:	e4 ff                	in     al,0xff
9f0064eb:	ff a0 9b ff ff 44    	jmp    DWORD PTR [eax+0x44ffff9b]
9f0064f1:	e4 ff                	in     al,0xff
9f0064f3:	ff f5                	push   ebp
9f0064f5:	9b                   	fwait
9f0064f6:	ff                   	(bad)  
9f0064f7:	ff 6c e4 ff          	jmp    FWORD PTR [esp+eiz*8-0x1]
9f0064fb:	ff 4c 9c ff          	dec    DWORD PTR [esp+ebx*4-0x1]
9f0064ff:	ff 94 e4 ff ff e3 9c 	call   DWORD PTR [esp+eiz*8-0x631c0001]
9f006506:	ff                   	(bad)  
9f006507:	ff                   	(bad)  
9f006508:	bc e4 ff ff 7c       	mov    esp,0x7cffffe4
9f00650d:	9d                   	popf   
9f00650e:	ff                   	(bad)  
9f00650f:	ff                   	(bad)  
9f006510:	f8                   	clc    
9f006511:	e4 ff                	in     al,0xff
9f006513:	ff f3                	push   ebx
9f006515:	9d                   	popf   
9f006516:	ff                   	(bad)  
9f006517:	ff 1c e5 ff ff ae 9e 	call   FWORD PTR [eiz*8-0x61510001]
9f00651e:	ff                   	(bad)  
9f00651f:	ff 40 e5             	inc    DWORD PTR [eax-0x1b]
9f006522:	ff                   	(bad)  
9f006523:	ff 69 9f             	jmp    FWORD PTR [ecx-0x61]
9f006526:	ff                   	(bad)  
9f006527:	ff 64 e5 ff          	jmp    DWORD PTR [ebp+eiz*8-0x1]
9f00652b:	ff c8                	dec    eax
9f00652d:	9f                   	lahf   
9f00652e:	ff                   	(bad)  
9f00652f:	ff 84 e5 ff ff 82 a0 	inc    DWORD PTR [ebp+eiz*8-0x5f7d0001]
9f006536:	ff                   	(bad)  
9f006537:	ff a8 e5 ff ff dc    	jmp    FWORD PTR [eax-0x2300001b]
9f00653d:	a0 ff ff cc e5       	mov    al,ds:0xe5ccffff
9f006542:	ff                   	(bad)  
9f006543:	ff                   	(bad)  
9f006544:	38 a1 ff ff f0 e5    	cmp    BYTE PTR [ecx-0x1a0f0001],ah
9f00654a:	ff                   	(bad)  
9f00654b:	ff e2                	jmp    edx
9f00654d:	a1 ff ff 14 e6       	mov    eax,ds:0xe614ffff
9f006552:	ff                   	(bad)  
9f006553:	ff 05 a2 ff ff 34    	inc    DWORD PTR ds:0x34ffffa2
9f006559:	e6 ff                	out    0xff,al
9f00655b:	ff c6                	inc    esi
9f00655d:	a3 ff ff 58 e6       	mov    ds:0xe658ffff,eax
9f006562:	ff                   	(bad)  
9f006563:	ff f2                	push   edx
9f006565:	a3 ff ff 7c e6       	mov    ds:0xe67cffff,eax
9f00656a:	ff                   	(bad)  
9f00656b:	ff 18                	call   FWORD PTR [eax]
9f00656d:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f00656e:	ff                   	(bad)  
9f00656f:	ff 9c e6 ff ff 49 a4 	call   FWORD PTR [esi+eiz*8-0x5bb60001]
9f006576:	ff                   	(bad)  
9f006577:	ff c0                	inc    eax
9f006579:	e6 ff                	out    0xff,al
9f00657b:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
9f00657e:	ff                   	(bad)  
9f00657f:	ff e4                	jmp    esp
9f006581:	e6 ff                	out    0xff,al
9f006583:	ff ce                	dec    esi
9f006585:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006586:	ff                   	(bad)  
9f006587:	ff 08                	dec    DWORD PTR [eax]
9f006589:	e7 ff                	out    0xff,eax
9f00658b:	ff 61 a5             	jmp    DWORD PTR [ecx-0x5b]
9f00658e:	ff                   	(bad)  
9f00658f:	ff 30                	push   DWORD PTR [eax]
9f006591:	e7 ff                	out    0xff,eax
9f006593:	ff 8b a5 ff ff 54    	dec    DWORD PTR [ebx+0x54ffffa5]
9f006599:	e7 ff                	out    0xff,eax
9f00659b:	ff c0                	inc    eax
9f00659d:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f00659e:	ff                   	(bad)  
9f00659f:	ff                   	(bad)  
9f0065a0:	7c e7                	jl     9f006589 <__GNU_EH_FRAME_HDR+0xb9>
9f0065a2:	ff                   	(bad)  
9f0065a3:	ff e6                	jmp    esi
9f0065a5:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0065a6:	ff                   	(bad)  
9f0065a7:	ff 9c e7 ff ff 1b a6 	call   FWORD PTR [edi+eiz*8-0x59e40001]
9f0065ae:	ff                   	(bad)  
9f0065af:	ff c4                	inc    esp
9f0065b1:	e7 ff                	out    0xff,eax
9f0065b3:	ff 41 a6             	inc    DWORD PTR [ecx-0x5a]
9f0065b6:	ff                   	(bad)  
9f0065b7:	ff e4                	jmp    esp
9f0065b9:	e7 ff                	out    0xff,eax
9f0065bb:	ff 6f a6             	jmp    FWORD PTR [edi-0x5a]
9f0065be:	ff                   	(bad)  
9f0065bf:	ff 08                	dec    DWORD PTR [eax]
9f0065c1:	e8 ff ff 95 a6       	call   459665c5 <sysEnter_Vector+0x458365c5>
9f0065c6:	ff                   	(bad)  
9f0065c7:	ff 28                	jmp    FWORD PTR [eax]
9f0065c9:	e8 ff ff c2 a6       	call   45c365cd <sysEnter_Vector+0x45b065cd>
9f0065ce:	ff                   	(bad)  
9f0065cf:	ff 4c e8 ff          	dec    DWORD PTR [eax+ebp*8-0x1]
9f0065d3:	ff e5                	jmp    ebp
9f0065d5:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f0065d6:	ff                   	(bad)  
9f0065d7:	ff 6c e8 ff          	jmp    FWORD PTR [eax+ebp*8-0x1]
9f0065db:	ff da                	call   <internal disassembler error>
9f0065dd:	a9 ff ff 90 e8       	test   eax,0xe890ffff
9f0065e2:	ff                   	(bad)  
9f0065e3:	ff 03                	inc    DWORD PTR [ebx]
9f0065e5:	aa                   	stos   BYTE PTR es:[edi],al
9f0065e6:	ff                   	(bad)  
9f0065e7:	ff b4 e8 ff ff 23 aa 	push   DWORD PTR [eax+ebp*8-0x55dc0001]
9f0065ee:	ff                   	(bad)  
9f0065ef:	ff d4                	call   esp
9f0065f1:	e8 ff ff e4 ab       	call   4ae565f5 <sysEnter_Vector+0x4ad265f5>
9f0065f6:	ff                   	(bad)  
9f0065f7:	ff                   	(bad)  
9f0065f8:	f8                   	clc    
9f0065f9:	e8 ff ff 0c ac       	call   4b0d65fd <sysEnter_Vector+0x4afa65fd>
9f0065fe:	ff                   	(bad)  
9f0065ff:	ff 18                	call   FWORD PTR [eax]
9f006601:	e9 ff ff 32 ac       	jmp    4b336605 <sysEnter_Vector+0x4b206605>
9f006606:	ff                   	(bad)  
9f006607:	ff                   	(bad)  
9f006608:	3c e9                	cmp    al,0xe9
9f00660a:	ff                   	(bad)  
9f00660b:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
9f00660e:	ff                   	(bad)  
9f00660f:	ff 60 e9             	jmp    DWORD PTR [eax-0x17]
9f006612:	ff                   	(bad)  
9f006613:	ff                   	(bad)  
9f006614:	b8 ac ff ff 84       	mov    eax,0x84ffffac
9f006619:	e9 ff ff 78 ad       	jmp    4c79661d <sysEnter_Vector+0x4c66661d>
9f00661e:	ff                   	(bad)  
9f00661f:	ff a8 e9 ff ff b2    	jmp    FWORD PTR [eax-0x4d000017]
9f006625:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006626:	ff                   	(bad)  
9f006627:	ff d0                	call   eax
9f006629:	e9 ff ff ee ad       	jmp    4cef662d <sysEnter_Vector+0x4cdc662d>
9f00662e:	ff                   	(bad)  
9f00662f:	ff                   	(bad)  
9f006630:	f8                   	clc    
9f006631:	e9 ff ff 2c ae       	jmp    4d2d6635 <sysEnter_Vector+0x4d1a6635>
9f006636:	ff                   	(bad)  
9f006637:	ff 20                	jmp    DWORD PTR [eax]
9f006639:	ea ff ff 6c ae ff ff 	jmp    0xffff:0xae6cffff
9f006640:	48                   	dec    eax
9f006641:	ea ff ff ae ae ff ff 	jmp    0xffff:0xaeaeffff
9f006648:	70 ea                	jo     9f006634 <__GNU_EH_FRAME_HDR+0x164>
9f00664a:	ff                   	(bad)  
9f00664b:	ff                   	(bad)  
9f00664c:	79 af                	jns    9f0065fd <__GNU_EH_FRAME_HDR+0x12d>
9f00664e:	ff                   	(bad)  
9f00664f:	ff 94 ea ff ff 9c af 	call   DWORD PTR [edx+ebp*8-0x50630001]
9f006656:	ff                   	(bad)  
9f006657:	ff                   	(bad)  
9f006658:	b8 ea ff ff f5       	mov    eax,0xf5ffffea
9f00665d:	af                   	scas   eax,DWORD PTR es:[edi]
9f00665e:	ff                   	(bad)  
9f00665f:	ff dc                	call   <internal disassembler error>
9f006661:	ea ff ff 49 b0 ff ff 	jmp    0xffff:0xb049ffff
9f006668:	00 eb                	add    bl,ch
9f00666a:	ff                   	(bad)  
9f00666b:	ff 9d b0 ff ff 24    	call   FWORD PTR [ebp+0x24ffffb0]
9f006671:	eb ff                	jmp    9f006672 <__GNU_EH_FRAME_HDR+0x1a2>
9f006673:	ff d1                	call   ecx
9f006675:	b0 ff                	mov    al,0xff
9f006677:	ff 44 eb ff          	inc    DWORD PTR [ebx+ebp*8-0x1]
9f00667b:	ff 08                	dec    DWORD PTR [eax]
9f00667d:	b1 ff                	mov    cl,0xff
9f00667f:	ff 64 eb ff          	jmp    DWORD PTR [ebx+ebp*8-0x1]
9f006683:	ff                   	(bad)  
9f006684:	3f                   	aas    
9f006685:	b1 ff                	mov    cl,0xff
9f006687:	ff 84 eb ff ff af b1 	inc    DWORD PTR [ebx+ebp*8-0x4e500001]
9f00668e:	ff                   	(bad)  
9f00668f:	ff ac eb ff ff 1f b2 	jmp    FWORD PTR [ebx+ebp*8-0x4de00001]
9f006696:	ff                   	(bad)  
9f006697:	ff d4                	call   esp
9f006699:	eb ff                	jmp    9f00669a <__GNU_EH_FRAME_HDR+0x1ca>
9f00669b:	ff                   	(bad)  
9f00669c:	3c b2                	cmp    al,0xb2
9f00669e:	ff                   	(bad)  
9f00669f:	ff f4                	push   esp
9f0066a1:	eb ff                	jmp    9f0066a2 <__GNU_EH_FRAME_HDR+0x1d2>
9f0066a3:	ff 65 b2             	jmp    DWORD PTR [ebp-0x4e]
9f0066a6:	ff                   	(bad)  
9f0066a7:	ff 14 ec             	call   DWORD PTR [esp+ebp*8]
9f0066aa:	ff                   	(bad)  
9f0066ab:	ff 8e b2 ff ff 34    	dec    DWORD PTR [esi+0x34ffffb2]
9f0066b1:	ec                   	in     al,dx
9f0066b2:	ff                   	(bad)  
9f0066b3:	ff da                	call   <internal disassembler error>
9f0066b5:	b2 ff                	mov    dl,0xff
9f0066b7:	ff 54 ec ff          	call   DWORD PTR [esp+ebp*8-0x1]
9f0066bb:	ff ce                	dec    esi
9f0066bd:	b4 ff                	mov    ah,0xff
9f0066bf:	ff                   	(bad)  
9f0066c0:	78 ec                	js     9f0066ae <__GNU_EH_FRAME_HDR+0x1de>
9f0066c2:	ff                   	(bad)  
9f0066c3:	ff 1d b5 ff ff 98    	call   FWORD PTR ds:0x98ffffb5
9f0066c9:	ec                   	in     al,dx
9f0066ca:	ff                   	(bad)  
9f0066cb:	ff                   	(bad)  
9f0066cc:	39 b5 ff ff b8 ec    	cmp    DWORD PTR [ebp-0x13470001],esi
9f0066d2:	ff                   	(bad)  
9f0066d3:	ff 59 b5             	call   FWORD PTR [ecx-0x4b]
9f0066d6:	ff                   	(bad)  
9f0066d7:	ff d8                	call   <internal disassembler error>
9f0066d9:	ec                   	in     al,dx
9f0066da:	ff                   	(bad)  
9f0066db:	ff                   	(bad)  
9f0066dc:	79 b5                	jns    9f006693 <__GNU_EH_FRAME_HDR+0x1c3>
9f0066de:	ff                   	(bad)  
9f0066df:	ff                   	(bad)  
9f0066e0:	f8                   	clc    
9f0066e1:	ec                   	in     al,dx
9f0066e2:	ff                   	(bad)  
9f0066e3:	ff                   	(bad)  
9f0066e4:	bd b6 ff ff 18       	mov    ebp,0x18ffffb6
9f0066e9:	ed                   	in     eax,dx
9f0066ea:	ff                   	(bad)  
9f0066eb:	ff dd                	call   <internal disassembler error>
9f0066ed:	b6 ff                	mov    dh,0xff
9f0066ef:	ff                   	(bad)  
9f0066f0:	38 ed                	cmp    ch,ch
9f0066f2:	ff                   	(bad)  
9f0066f3:	ff da                	call   <internal disassembler error>
9f0066f5:	b9 ff ff 64 ed       	mov    ecx,0xed64ffff
9f0066fa:	ff                   	(bad)  
9f0066fb:	ff                   	(bad)  
9f0066fc:	fd                   	std    
9f0066fd:	b9 ff ff 84 ed       	mov    ecx,0xed84ffff
9f006702:	ff                   	(bad)  
9f006703:	ff 20                	jmp    DWORD PTR [eax]
9f006705:	ba ff ff a4 ed       	mov    edx,0xeda4ffff
9f00670a:	ff                   	(bad)  
9f00670b:	ff                   	(bad)  
9f00670c:	3c ba                	cmp    al,0xba
9f00670e:	ff                   	(bad)  
9f00670f:	ff c4                	inc    esp
9f006711:	ed                   	in     eax,dx
9f006712:	ff                   	(bad)  
9f006713:	ff b0 ba ff ff e8    	push   DWORD PTR [eax-0x17000046]
9f006719:	ed                   	in     eax,dx
9f00671a:	ff                   	(bad)  
9f00671b:	ff 1c bb             	call   FWORD PTR [ebx+edi*4]
9f00671e:	ff                   	(bad)  
9f00671f:	ff 0c ee             	dec    DWORD PTR [esi+ebp*8]
9f006722:	ff                   	(bad)  
9f006723:	ff a3 bb ff ff 2c    	jmp    DWORD PTR [ebx+0x2cffffbb]
9f006729:	ee                   	out    dx,al
9f00672a:	ff                   	(bad)  
9f00672b:	ff                   	(bad)  
9f00672c:	fe                   	(bad)  
9f00672d:	bb ff ff 4c ee       	mov    ebx,0xee4cffff
9f006732:	ff                   	(bad)  
9f006733:	ff                   	(bad)  
9f006734:	78 bc                	js     9f0066f2 <__GNU_EH_FRAME_HDR+0x222>
9f006736:	ff                   	(bad)  
9f006737:	ff 6c ee ff          	jmp    FWORD PTR [esi+ebp*8-0x1]
9f00673b:	ff db                	call   <internal disassembler error>
9f00673d:	bc ff ff 90 ee       	mov    esp,0xee90ffff
9f006742:	ff                   	(bad)  
9f006743:	ff 0d bf ff ff b4    	dec    DWORD PTR ds:0xb4ffffbf
9f006749:	ee                   	out    dx,al
9f00674a:	ff                   	(bad)  
9f00674b:	ff 2d bf ff ff d4    	jmp    FWORD PTR ds:0xd4ffffbf
9f006751:	ee                   	out    dx,al
9f006752:	ff                   	(bad)  
9f006753:	ff 30                	push   DWORD PTR [eax]
9f006755:	c0 ff ff             	sar    bh,0xff
9f006758:	f8                   	clc    
9f006759:	ee                   	out    dx,al
9f00675a:	ff                   	(bad)  
9f00675b:	ff 53 c0             	call   DWORD PTR [ebx-0x40]
9f00675e:	ff                   	(bad)  
9f00675f:	ff 18                	call   FWORD PTR [eax]
9f006761:	ef                   	out    dx,eax
9f006762:	ff                   	(bad)  
9f006763:	ff 6e c0             	jmp    FWORD PTR [esi-0x40]
9f006766:	ff                   	(bad)  
9f006767:	ff                   	(bad)  
9f006768:	38 ef                	cmp    bh,ch
9f00676a:	ff                   	(bad)  
9f00676b:	ff a0 c0 ff ff 5c    	jmp    DWORD PTR [eax+0x5cffffc0]
9f006771:	ef                   	out    dx,eax
9f006772:	ff                   	(bad)  
9f006773:	ff                   	(bad)  
9f006774:	3b c2                	cmp    eax,edx
9f006776:	ff                   	(bad)  
9f006777:	ff                   	(bad)  
9f006778:	7c ef                	jl     9f006769 <__GNU_EH_FRAME_HDR+0x299>
9f00677a:	ff                   	(bad)  
9f00677b:	ff 5c c2 ff          	call   FWORD PTR [edx+eax*8-0x1]
9f00677f:	ff 9c ef ff ff 23 c3 	call   FWORD PTR [edi+ebp*8-0x3cdc0001]
9f006786:	ff                   	(bad)  
9f006787:	ff                   	(bad)  
9f006788:	bc ef ff ff 44       	mov    esp,0x44ffffef
9f00678d:	c3                   	ret    
9f00678e:	ff                   	(bad)  
9f00678f:	ff dc                	call   <internal disassembler error>
9f006791:	ef                   	out    dx,eax
9f006792:	ff                   	(bad)  
9f006793:	ff 6d c3             	jmp    FWORD PTR [ebp-0x3d]
9f006796:	ff                   	(bad)  
9f006797:	ff 00                	inc    DWORD PTR [eax]
9f006799:	f0 ff                	lock (bad) 
9f00679b:	ff 9c c3 ff ff 24 f0 	call   FWORD PTR [ebx+eax*8-0xfdb0001]
9f0067a2:	ff                   	(bad)  
9f0067a3:	ff                   	(bad)  
9f0067a4:	fb                   	sti    
9f0067a5:	c3                   	ret    
9f0067a6:	ff                   	(bad)  
9f0067a7:	ff 48 f0             	dec    DWORD PTR [eax-0x10]
9f0067aa:	ff                   	(bad)  
9f0067ab:	ff                   	(bad)  
9f0067ac:	39 c6                	cmp    esi,eax
9f0067ae:	ff                   	(bad)  
9f0067af:	ff 74 f0 ff          	push   DWORD PTR [eax+esi*8-0x1]
9f0067b3:	ff 81 ca ff ff 98    	inc    DWORD PTR [ecx-0x67000036]
9f0067b9:	f0 ff                	lock (bad) 
9f0067bb:	ff b4 ca ff ff b8 f0 	push   DWORD PTR [edx+ecx*8-0xf470001]
9f0067c2:	ff                   	(bad)  
9f0067c3:	ff                   	(bad)  
9f0067c4:	38 cb                	cmp    bl,cl
9f0067c6:	ff                   	(bad)  
9f0067c7:	ff dc                	call   <internal disassembler error>
9f0067c9:	f0 ff                	lock (bad) 
9f0067cb:	ff 76 cb             	push   DWORD PTR [esi-0x35]
9f0067ce:	ff                   	(bad)  
9f0067cf:	ff 00                	inc    DWORD PTR [eax]
9f0067d1:	f1                   	icebp  
9f0067d2:	ff                   	(bad)  
9f0067d3:	ff b4 cb ff ff 24 f1 	push   DWORD PTR [ebx+ecx*8-0xedb0001]
9f0067da:	ff                   	(bad)  
9f0067db:	ff 23                	jmp    DWORD PTR [ebx]
9f0067dd:	cc                   	int3   
9f0067de:	ff                   	(bad)  
9f0067df:	ff 48 f1             	dec    DWORD PTR [eax-0xf]
9f0067e2:	ff                   	(bad)  
9f0067e3:	ff 4c cc ff          	dec    DWORD PTR [esp+ecx*8-0x1]
9f0067e7:	ff 68 f1             	jmp    FWORD PTR [eax-0xf]
9f0067ea:	ff                   	(bad)  
9f0067eb:	ff aa cc ff ff 90    	jmp    FWORD PTR [edx-0x6f000034]
9f0067f1:	f1                   	icebp  
9f0067f2:	ff                   	(bad)  
9f0067f3:	ff c8                	dec    eax
9f0067f5:	cc                   	int3   
9f0067f6:	ff                   	(bad)  
9f0067f7:	ff b0 f1 ff ff 08    	push   DWORD PTR [eax+0x8fffff1]
9f0067fd:	cd ff                	int    0xff
9f0067ff:	ff d0                	call   eax
9f006801:	f1                   	icebp  
9f006802:	ff                   	(bad)  
9f006803:	ff 48 cd             	dec    DWORD PTR [eax-0x33]
9f006806:	ff                   	(bad)  
9f006807:	ff f0                	push   eax
9f006809:	f1                   	icebp  
9f00680a:	ff                   	(bad)  
9f00680b:	ff 90 cd ff ff 10    	call   DWORD PTR [eax+0x10ffffcd]
9f006811:	f2 ff                	repnz (bad) 
9f006813:	ff c0                	inc    eax
9f006815:	cd ff                	int    0xff
9f006817:	ff 30                	push   DWORD PTR [eax]
9f006819:	f2 ff                	repnz (bad) 
9f00681b:	ff 1c ce             	call   FWORD PTR [esi+ecx*8]
9f00681e:	ff                   	(bad)  
9f00681f:	ff 50 f2             	call   DWORD PTR [eax-0xe]
9f006822:	ff                   	(bad)  
9f006823:	ff 4d ce             	dec    DWORD PTR [ebp-0x32]
9f006826:	ff                   	(bad)  
9f006827:	ff 70 f2             	push   DWORD PTR [eax-0xe]
9f00682a:	ff                   	(bad)  
9f00682b:	ff 67 ce             	jmp    DWORD PTR [edi-0x32]
9f00682e:	ff                   	(bad)  
9f00682f:	ff 90 f2 ff ff a0    	call   DWORD PTR [eax-0x5f00000e]
9f006835:	ce                   	into   
9f006836:	ff                   	(bad)  
9f006837:	ff b0 f2 ff ff c0    	push   DWORD PTR [eax-0x3f00000e]
9f00683d:	ce                   	into   
9f00683e:	ff                   	(bad)  
9f00683f:	ff d0                	call   eax
9f006841:	f2 ff                	repnz (bad) 
9f006843:	ff 27                	jmp    DWORD PTR [edi]
9f006845:	cf                   	iret   
9f006846:	ff                   	(bad)  
9f006847:	ff f0                	push   eax
9f006849:	f2 ff                	repnz (bad) 
9f00684b:	ff 90 cf ff ff 10    	call   DWORD PTR [eax+0x10ffffcf]
9f006851:	f3 ff                	repz (bad) 
9f006853:	ff                   	(bad)  
9f006854:	fc                   	cld    
9f006855:	cf                   	iret   
9f006856:	ff                   	(bad)  
9f006857:	ff 30                	push   DWORD PTR [eax]
9f006859:	f3 ff                	repz (bad) 
9f00685b:	ff 1c d0             	call   FWORD PTR [eax+edx*8]
9f00685e:	ff                   	(bad)  
9f00685f:	ff 50 f3             	call   DWORD PTR [eax-0xd]
9f006862:	ff                   	(bad)  
9f006863:	ff 9c d1 ff ff 80 f3 	call   FWORD PTR [ecx+edx*8-0xc7f0001]
9f00686a:	ff                   	(bad)  
9f00686b:	ff                   	(bad)  
9f00686c:	bc d1 ff ff a0       	mov    esp,0xa0ffffd1
9f006871:	f3 ff                	repz (bad) 
9f006873:	ff 58 d3             	call   FWORD PTR [eax-0x2d]
9f006876:	ff                   	(bad)  
9f006877:	ff d0                	call   eax
9f006879:	f3 ff                	repz (bad) 
9f00687b:	ff ee                	jmp    <internal disassembler error>
9f00687d:	d3 ff                	sar    edi,cl
9f00687f:	ff f4                	push   esp
9f006881:	f3 ff                	repz (bad) 
9f006883:	ff 10                	call   DWORD PTR [eax]
9f006885:	d4 ff                	aam    0xff
9f006887:	ff 14 f4             	call   DWORD PTR [esp+esi*8]
9f00688a:	ff                   	(bad)  
9f00688b:	ff 2e                	jmp    FWORD PTR [esi]
9f00688d:	d5 ff                	aad    0xff
9f00688f:	ff 40 f4             	inc    DWORD PTR [eax-0xc]
9f006892:	ff                   	(bad)  
9f006893:	ff 54 d5 ff          	call   DWORD PTR [ebp+edx*8-0x1]
9f006897:	ff 60 f4             	jmp    DWORD PTR [eax-0xc]
9f00689a:	ff                   	(bad)  
9f00689b:	ff f2                	push   edx
9f00689d:	d5 ff                	aad    0xff
9f00689f:	ff 88 f4 ff ff 60    	dec    DWORD PTR [eax+0x60fffff4]
9f0068a5:	d6                   	(bad)  
9f0068a6:	ff                   	(bad)  
9f0068a7:	ff b0 f4 ff ff 80    	push   DWORD PTR [eax-0x7f00000c]
9f0068ad:	d6                   	(bad)  
9f0068ae:	ff                   	(bad)  
9f0068af:	ff d0                	call   eax
9f0068b1:	f4                   	hlt    
9f0068b2:	ff                   	(bad)  
9f0068b3:	ff c4                	inc    esp
9f0068b5:	d6                   	(bad)  
9f0068b6:	ff                   	(bad)  
9f0068b7:	ff                   	(bad)  
9f0068b8:	f8                   	clc    
9f0068b9:	f4                   	hlt    
9f0068ba:	ff                   	(bad)  
9f0068bb:	ff dd                	call   <internal disassembler error>
9f0068bd:	d9 ff                	fcos   
9f0068bf:	ff 20                	jmp    DWORD PTR [eax]
9f0068c1:	f5                   	cmc    
9f0068c2:	ff                   	(bad)  
9f0068c3:	ff                   	(bad)  
9f0068c4:	fa                   	cli    
9f0068c5:	d9 ff                	fcos   
9f0068c7:	ff 40 f5             	inc    DWORD PTR [eax-0xb]
9f0068ca:	ff                   	(bad)  
9f0068cb:	ff 37                	push   DWORD PTR [edi]
9f0068cd:	da ff                	(bad)  
9f0068cf:	ff 60 f5             	jmp    DWORD PTR [eax-0xb]
9f0068d2:	ff                   	(bad)  
9f0068d3:	ff 6c da ff          	jmp    FWORD PTR [edx+ebx*8-0x1]
9f0068d7:	ff 80 f5 ff ff 89    	inc    DWORD PTR [eax-0x7600000b]
9f0068dd:	da ff                	(bad)  
9f0068df:	ff a0 f5 ff ff e0    	jmp    DWORD PTR [eax-0x1f00000b]
9f0068e5:	e2 ff                	loop   9f0068e6 <__GNU_EH_FRAME_HDR+0x416>
9f0068e7:	ff d0                	call   eax
9f0068e9:	f5                   	cmc    
9f0068ea:	ff                   	(bad)  
9f0068eb:	ff 4d e3             	dec    DWORD PTR [ebp-0x1d]
9f0068ee:	ff                   	(bad)  
9f0068ef:	ff                   	(bad)  
9f0068f0:	f8                   	clc    
9f0068f1:	f5                   	cmc    
9f0068f2:	ff                   	(bad)  
9f0068f3:	ff 8e e3 ff ff 30    	dec    DWORD PTR [esi+0x30ffffe3]
9f0068f9:	e4 ff                	in     al,0xff
9f0068fb:	ff d0                	call   eax
9f0068fd:	e3 ff                	jecxz  9f0068fe <__GNU_EH_FRAME_HDR+0x42e>
9f0068ff:	ff e4                	jmp    esp
9f006901:	e4 ff                	in     al,0xff
9f006903:	ff d4                	call   esp
9f006905:	e3 ff                	jecxz  9f006906 <__GNU_EH_FRAME_HDR+0x436>
9f006907:	ff 1c f6             	call   FWORD PTR [esi+esi*8]
9f00690a:	ff                   	(bad)  
9f00690b:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f006920 <ansiEscSeq>:
9f006920:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f006923:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006925:	48                   	dec    eax
9f006926:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f00692c:	75 00                	jne    9f00692e <ansiEscSeq+0xe>
9f00692e:	3d 00 50 41 54       	cmp    eax,0x54415000
9f006933:	48                   	dec    eax
9f006934:	00 2f                	add    BYTE PTR [edi],ch
9f006936:	00 0a                	add    BYTE PTR [edx],cl
9f006938:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f00693b:	72 65                	jb     9f0069a2 <ansiEscSeq+0x82>
9f00693d:	61                   	popa   
9f00693e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00693f:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f006945:	74 20                	je     9f006967 <ansiEscSeq+0x47>
9f006947:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f00694e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00694f:	74 65                	je     9f0069b6 <ansiEscSeq+0x96>
9f006951:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f006954:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006956:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f00695a:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f00695d:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00695e:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f006965:	65 
9f006966:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f006969:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00696b:	00 2a                	add    BYTE PTR [edx],ch
9f00696d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00696f:	6c                   	ins    BYTE PTR es:[edi],dx
9f006970:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f006977:	74 20                	je     9f006999 <ansiEscSeq+0x79>
9f006979:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00697c:	70 6c                	jo     9f0069ea <ansiEscSeq+0xca>
9f00697e:	65                   	gs
9f00697f:	74 65                	je     9f0069e6 <ansiEscSeq+0xc6>
9f006981:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f006984:	6c                   	ins    BYTE PTR es:[edi],dx
9f006985:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00698c:	74 20                	je     9f0069ae <ansiEscSeq+0x8e>
9f00698e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f006991:	6c                   	ins    BYTE PTR es:[edi],dx
9f006992:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f006997:	65                   	gs
9f006998:	76 69                	jbe    9f006a03 <ansiEscSeq+0xe3>
9f00699a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00699b:	75 73                	jne    9f006a10 <ansiEscSeq+0xf0>
9f00699d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00699e:	79 2c                	jns    9f0069cc <ansiEscSeq+0xac>
9f0069a0:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f0069a3:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f0069aa:	6c 
9f0069ab:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0069b2:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f0069b5:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0069b7:	72 20                	jb     9f0069d9 <ansiEscSeq+0xb9>
9f0069b9:	25 73 0a 00 20       	and    eax,0x20000a73
9f0069be:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0069c2:	63 3a                	arpl   WORD PTR [edx],di
9f0069c4:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f0069c7:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f0069cb:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0069cd:	72 20                	jb     9f0069ef <ansiEscSeq+0xcf>
9f0069cf:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f0069d4:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0069db:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f0069df:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0069e1:	72 20                	jb     9f006a03 <ansiEscSeq+0xe3>
9f0069e3:	25 73 0a 00 00       	and    eax,0xa73
9f0069e8:	68 65 61 70 42       	push   0x42706165
9f0069ed:	61                   	popa   
9f0069ee:	73 65                	jae    9f006a55 <ansiEscSeq+0x135>
9f0069f0:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f0069f3:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f0069f6:	30 38                	xor    BYTE PTR [eax],bh
9f0069f8:	58                   	pop    eax
9f0069f9:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f0069ff:	30 38                	xor    BYTE PTR [eax],bh
9f006a01:	58                   	pop    eax
9f006a02:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f006a05:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006a07:	72 65                	jb     9f006a6e <ansiEscSeq+0x14e>
9f006a09:	0a 00                	or     al,BYTE PTR [eax]
9f006a0b:	00 0a                	add    BYTE PTR [edx],cl
9f006a0d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a0f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a11:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a13:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a15:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a17:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a19:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a1b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a1d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a1f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a21:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a23:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a25:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a27:	6d                   	ins    DWORD PTR es:[edi],dx
9f006a28:	61                   	popa   
9f006a29:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a2a:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a2b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a2c:	63 20                	arpl   WORD PTR [eax],sp
9f006a2e:	65                   	gs
9f006a2f:	72 72                	jb     9f006aa3 <ansiEscSeq+0x183>
9f006a31:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a32:	72 21                	jb     9f006a55 <ansiEscSeq+0x135>
9f006a34:	21 21                	and    DWORD PTR [ecx],esp
9f006a36:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a38:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a3a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a3c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a3e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a40:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a42:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a44:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a46:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a48:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a4a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a4c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a4e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a50:	0a 00                	or     al,BYTE PTR [eax]
9f006a52:	00 00                	add    BYTE PTR [eax],al
9f006a54:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a55:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006a5c:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a5d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a5e:	63 3a                	arpl   WORD PTR [edx],di
9f006a60:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006a63:	71 75                	jno    9f006ada <ansiEscSeq+0x1ba>
9f006a65:	65                   	gs
9f006a66:	73 74                	jae    9f006adc <ansiEscSeq+0x1bc>
9f006a68:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f006a6b:	72 20                	jb     9f006a8d <ansiEscSeq+0x16d>
9f006a6d:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006a70:	30 38                	xor    BYTE PTR [eax],bh
9f006a72:	78 20                	js     9f006a94 <ansiEscSeq+0x174>
9f006a74:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f006a77:	65                   	gs
9f006a78:	73 0a                	jae    9f006a84 <ansiEscSeq+0x164>
9f006a7a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006a7e:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f006a81:	61                   	popa   
9f006a82:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a83:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a84:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a85:	63 3a                	arpl   WORD PTR [edx],di
9f006a87:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006a8a:	65                   	gs
9f006a8b:	64                   	fs
9f006a8c:	65                   	gs
9f006a8d:	64                   	fs
9f006a8e:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006a93:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006a96:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006a9a:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f006a9d:	61                   	popa   
9f006a9e:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a9f:	6c                   	ins    BYTE PTR es:[edi],dx
9f006aa0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006aa1:	63 3a                	arpl   WORD PTR [edx],di
9f006aa3:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f006aa6:	61                   	popa   
9f006aa7:	45                   	inc    ebp
9f006aa8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006aa9:	64                   	fs
9f006aaa:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006aaf:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006ab2:	00 00                	add    BYTE PTR [eax],al
9f006ab4:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ab5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006abc:	6c                   	ins    BYTE PTR es:[edi],dx
9f006abd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006abe:	63 3a                	arpl   WORD PTR [edx],di
9f006ac0:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006ac3:	71 20                	jno    9f006ae5 <ansiEscSeq+0x1c5>
9f006ac5:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006ac8:	30 38                	xor    BYTE PTR [eax],bh
9f006aca:	58                   	pop    eax
9f006acb:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f006ace:	74 65                	je     9f006b35 <ansiEscSeq+0x215>
9f006ad0:	73 2c                	jae    9f006afe <ansiEscSeq+0x1de>
9f006ad2:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006ad5:	74 20                	je     9f006af7 <ansiEscSeq+0x1d7>
9f006ad7:	77 61                	ja     9f006b3a <ansiEscSeq+0x21a>
9f006ad9:	73 20                	jae    9f006afb <ansiEscSeq+0x1db>
9f006adb:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006ade:	30 38                	xor    BYTE PTR [eax],bh
9f006ae0:	58                   	pop    eax
9f006ae1:	2c 20                	sub    al,0x20
9f006ae3:	68 65 61 70 45       	push   0x45706165
9f006ae8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006ae9:	64                   	fs
9f006aea:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006aef:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006af2:	00 00                	add    BYTE PTR [eax],al
9f006af4:	6c                   	ins    BYTE PTR es:[edi],dx
9f006af5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006afc:	6c                   	ins    BYTE PTR es:[edi],dx
9f006afd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006afe:	63 3a                	arpl   WORD PTR [edx],di
9f006b00:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f006b03:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f006b0a:	65 
9f006b0b:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f006b0f:	61                   	popa   
9f006b10:	70 43                	jo     9f006b55 <ansiEscSeq+0x235>
9f006b12:	75 72                	jne    9f006b86 <ansiEscSeq+0x266>
9f006b14:	72 20                	jb     9f006b36 <ansiEscSeq+0x216>
9f006b16:	61                   	popa   
9f006b17:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006b18:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f006b1c:	61                   	popa   
9f006b1d:	70 42                	jo     9f006b61 <ansiEscSeq+0x241>
9f006b1f:	61                   	popa   
9f006b20:	73 65                	jae    9f006b87 <ansiEscSeq+0x267>
9f006b22:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f006b26:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006b29:	30 38                	xor    BYTE PTR [eax],bh
9f006b2b:	58                   	pop    eax
9f006b2c:	0a 00                	or     al,BYTE PTR [eax]
9f006b2e:	00 00                	add    BYTE PTR [eax],al
9f006b30:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b31:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006b38:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b39:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b3a:	63 3a                	arpl   WORD PTR [edx],di
9f006b3c:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f006b3f:	61                   	popa   
9f006b40:	74 69                	je     9f006bab <ansiEscSeq+0x28b>
9f006b42:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006b43:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f006b47:	61                   	popa   
9f006b48:	70 20                	jo     9f006b6a <ansiEscSeq+0x24a>
9f006b4a:	72 65                	jb     9f006bb1 <ansiEscSeq+0x291>
9f006b4c:	63 20                	arpl   WORD PTR [eax],sp
9f006b4e:	40                   	inc    eax
9f006b4f:	20 30                	and    BYTE PTR [eax],dh
9f006b51:	78 25                	js     9f006b78 <ansiEscSeq+0x258>
9f006b53:	30 38                	xor    BYTE PTR [eax],bh
9f006b55:	58                   	pop    eax
9f006b56:	0a 00                	or     al,BYTE PTR [eax]
9f006b58:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b59:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006b60:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b61:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b62:	63 3a                	arpl   WORD PTR [edx],di
9f006b64:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f006b67:	61                   	popa   
9f006b68:	70 43                	jo     9f006bad <ansiEscSeq+0x28d>
9f006b6a:	75 72                	jne    9f006bde <ansiEscSeq+0x2be>
9f006b6c:	72 3d                	jb     9f006bab <ansiEscSeq+0x28b>
9f006b6e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006b71:	30 38                	xor    BYTE PTR [eax],bh
9f006b73:	78 0a                	js     9f006b7f <ansiEscSeq+0x25f>
9f006b75:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f006b78:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b79:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b7a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b7b:	63 3a                	arpl   WORD PTR [edx],di
9f006b7d:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006b80:	74 75                	je     9f006bf7 <ansiEscSeq+0x2d7>
9f006b82:	72 6e                	jb     9f006bf2 <ansiEscSeq+0x2d2>
9f006b84:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f006b8b:	30 38                	xor    BYTE PTR [eax],bh
9f006b8d:	58                   	pop    eax
9f006b8e:	0a 00                	or     al,BYTE PTR [eax]
9f006b90:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b91:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f006b98:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b99:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b9b:	63 3a                	arpl   WORD PTR [edx],di
9f006b9d:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f006ba0:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ba1:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ba2:	65 64 20 66 6f       	gs and BYTE PTR fs:gs:[esi+0x6f],ah
9f006ba7:	72 20                	jb     9f006bc9 <ansiEscSeq+0x2a9>
9f006ba9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006baa:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bab:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f006baf:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006bb6:	78 25                	js     9f006bdd <ansiEscSeq+0x2bd>
9f006bb8:	30 38                	xor    BYTE PTR [eax],bh
9f006bba:	78 2c                	js     9f006be8 <ansiEscSeq+0x2c8>
9f006bbc:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006bbf:	77 20                	ja     9f006be1 <ansiEscSeq+0x2c1>
9f006bc1:	73 69                	jae    9f006c2c <ansiEscSeq+0x30c>
9f006bc3:	7a 65                	jp     9f006c2a <ansiEscSeq+0x30a>
9f006bc5:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006bca:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f006bcd:	00 00                	add    BYTE PTR [eax],al
9f006bcf:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006bd3:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f006bd6:	65                   	gs
9f006bd7:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bd8:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bd9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bda:	63 3a                	arpl   WORD PTR [edx],di
9f006bdc:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006bdf:	71 75                	jno    9f006c56 <ansiEscSeq+0x336>
9f006be1:	65                   	gs
9f006be2:	73 74                	jae    9f006c58 <ansiEscSeq+0x338>
9f006be4:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f006be7:	72 20                	jb     9f006c09 <ansiEscSeq+0x2e9>
9f006be9:	30 20                	xor    BYTE PTR [eax],ah
9f006beb:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f006bee:	65                   	gs
9f006bef:	73 2c                	jae    9f006c1d <ansiEscSeq+0x2fd>
9f006bf1:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f006bf4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bf5:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bf6:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bf7:	74 20                	je     9f006c19 <ansiEscSeq+0x2f9>
9f006bf9:	66                   	data16
9f006bfa:	75 6c                	jne    9f006c68 <ansiEscSeq+0x348>
9f006bfc:	66 69 6c 6c 0a 00 00 	imul   bp,WORD PTR [esp+ebp*2+0xa],0x0
9f006c03:	00 09                	add    BYTE PTR [ecx],cl
9f006c05:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c06:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f006c0d:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c0e:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c0f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c10:	63 3a                	arpl   WORD PTR [edx],di
9f006c12:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006c15:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f006c18:	76 65                	jbe    9f006c7f <ansiEscSeq+0x35f>
9f006c1a:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f006c1e:	77 20                	ja     9f006c40 <ansiEscSeq+0x320>
9f006c20:	6d                   	ins    DWORD PTR es:[edi],dx
9f006c21:	61                   	popa   
9f006c22:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c23:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c24:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c25:	63 20                	arpl   WORD PTR [eax],sp
9f006c27:	70 6f                	jo     9f006c98 <ansiEscSeq+0x378>
9f006c29:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006c30:	78 25                	js     9f006c57 <ansiEscSeq+0x337>
9f006c32:	30 38                	xor    BYTE PTR [eax],bh
9f006c34:	78 2c                	js     9f006c62 <ansiEscSeq+0x342>
9f006c36:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f006c39:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f006c3d:	7a 65                	jp     9f006ca4 <ansiEscSeq+0x384>
9f006c3f:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006c44:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f006c47:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006c4a:	77 20                	ja     9f006c6c <ansiEscSeq+0x34c>
9f006c4c:	73 69                	jae    9f006cb7 <ansiEscSeq+0x397>
9f006c4e:	7a 65                	jp     9f006cb5 <ansiEscSeq+0x395>
9f006c50:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006c55:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f006c58:	00 00                	add    BYTE PTR [eax],al
9f006c5a:	00 00                	add    BYTE PTR [eax],al
9f006c5c:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f006c60:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f006c63:	65                   	gs
9f006c64:	61                   	popa   
9f006c65:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c66:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c67:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c68:	63 3a                	arpl   WORD PTR [edx],di
9f006c6a:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f006c6d:	64                   	fs
9f006c6e:	61                   	popa   
9f006c6f:	74 65                	je     9f006cd6 <ansiEscSeq+0x3b6>
9f006c71:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f006c75:	77 20                	ja     9f006c97 <ansiEscSeq+0x377>
9f006c77:	70 6f                	jo     9f006ce8 <ansiEscSeq+0x3c8>
9f006c79:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006c80:	78 25                	js     9f006ca7 <ansiEscSeq+0x387>
9f006c82:	30 38                	xor    BYTE PTR [eax],bh
9f006c84:	78 20                	js     9f006ca6 <ansiEscSeq+0x386>
9f006c86:	77 69                	ja     9f006cf1 <ansiEscSeq+0x3d1>
9f006c88:	74 68                	je     9f006cf2 <ansiEscSeq+0x3d2>
9f006c8a:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f006c8d:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f006c91:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f006c98:	61                   	popa   
9f006c99:	74 61                	je     9f006cfc <ansiEscSeq+0x3dc>
9f006c9b:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f006c9e:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f006ca2:	65                   	gs
9f006ca3:	61                   	popa   
9f006ca4:	72 65                	jb     9f006d0b <ansiEscSeq+0x3eb>
9f006ca6:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f006caa:	74 20                	je     9f006ccc <ansiEscSeq+0x3ac>
9f006cac:	72 65                	jb     9f006d13 <ansiEscSeq+0x3f3>
9f006cae:	6d                   	ins    DWORD PTR es:[edi],dx
9f006caf:	61                   	popa   
9f006cb0:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f006cb7:	61                   	popa   
9f006cb8:	70 70                	jo     9f006d2a <ansiEscSeq+0x40a>
9f006cba:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cbb:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f006cc2:	00 00                	add    BYTE PTR [eax],al
9f006cc4:	e5 b9                	in     eax,0xb9
9f006cc6:	ff                   	(bad)  
9f006cc7:	ff f7                	push   edi
9f006cc9:	b9 ff ff f7 b9       	mov    ecx,0xb9f7ffff
9f006cce:	ff                   	(bad)  
9f006ccf:	ff eb                	jmp    <internal disassembler error>
9f006cd1:	b9 ff ff f7 b9       	mov    ecx,0xb9f7ffff
9f006cd6:	ff                   	(bad)  
9f006cd7:	ff f7                	push   edi
9f006cd9:	b9 ff ff f7 b9       	mov    ecx,0xb9f7ffff
9f006cde:	ff                   	(bad)  
9f006cdf:	ff f7                	push   edi
9f006ce1:	b9 ff ff f7 b9       	mov    ecx,0xb9f7ffff
9f006ce6:	ff                   	(bad)  
9f006ce7:	ff f7                	push   edi
9f006ce9:	b9 ff ff f7 b9       	mov    ecx,0xb9f7ffff
9f006cee:	ff                   	(bad)  
9f006cef:	ff df                	call   <internal disassembler error>
9f006cf1:	b9 ff ff f7 b9       	mov    ecx,0xb9f7ffff
9f006cf6:	ff                   	(bad)  
9f006cf7:	ff d9                	call   <internal disassembler error>
9f006cf9:	b9 ff ff f7 b9       	mov    ecx,0xb9f7ffff
9f006cfe:	ff                   	(bad)  
9f006cff:	ff f7                	push   edi
9f006d01:	b9 ff ff f1 b9       	mov    ecx,0xb9f1ffff
9f006d06:	ff                   	(bad)  
9f006d07:	ff 96 bc ff ff c3    	call   DWORD PTR [esi-0x3c000044]
9f006d0d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d12:	ff                   	(bad)  
9f006d13:	ff c3                	inc    ebx
9f006d15:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d1a:	ff                   	(bad)  
9f006d1b:	ff c3                	inc    ebx
9f006d1d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d22:	ff                   	(bad)  
9f006d23:	ff c3                	inc    ebx
9f006d25:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d2a:	ff                   	(bad)  
9f006d2b:	ff c3                	inc    ebx
9f006d2d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d32:	ff                   	(bad)  
9f006d33:	ff c3                	inc    ebx
9f006d35:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d3a:	ff                   	(bad)  
9f006d3b:	ff c3                	inc    ebx
9f006d3d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d42:	ff                   	(bad)  
9f006d43:	ff c3                	inc    ebx
9f006d45:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d4a:	ff                   	(bad)  
9f006d4b:	ff c3                	inc    ebx
9f006d4d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d52:	ff                   	(bad)  
9f006d53:	ff c3                	inc    ebx
9f006d55:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d5a:	ff                   	(bad)  
9f006d5b:	ff c3                	inc    ebx
9f006d5d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d62:	ff                   	(bad)  
9f006d63:	ff c3                	inc    ebx
9f006d65:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d6a:	ff                   	(bad)  
9f006d6b:	ff c3                	inc    ebx
9f006d6d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d72:	ff                   	(bad)  
9f006d73:	ff c3                	inc    ebx
9f006d75:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d7a:	ff                   	(bad)  
9f006d7b:	ff c3                	inc    ebx
9f006d7d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d82:	ff                   	(bad)  
9f006d83:	ff c3                	inc    ebx
9f006d85:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d8a:	ff                   	(bad)  
9f006d8b:	ff c3                	inc    ebx
9f006d8d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d92:	ff                   	(bad)  
9f006d93:	ff c3                	inc    ebx
9f006d95:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006d9a:	ff                   	(bad)  
9f006d9b:	ff c3                	inc    ebx
9f006d9d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006da2:	ff                   	(bad)  
9f006da3:	ff c3                	inc    ebx
9f006da5:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006daa:	ff                   	(bad)  
9f006dab:	ff c3                	inc    ebx
9f006dad:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006db2:	ff                   	(bad)  
9f006db3:	ff c3                	inc    ebx
9f006db5:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006dba:	ff                   	(bad)  
9f006dbb:	ff c3                	inc    ebx
9f006dbd:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006dc2:	ff                   	(bad)  
9f006dc3:	ff c3                	inc    ebx
9f006dc5:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006dca:	ff                   	(bad)  
9f006dcb:	ff c3                	inc    ebx
9f006dcd:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006dd2:	ff                   	(bad)  
9f006dd3:	ff b4 bc ff ff c3 bc 	push   DWORD PTR [esp+edi*4-0x433c0001]
9f006dda:	ff                   	(bad)  
9f006ddb:	ff c3                	inc    ebx
9f006ddd:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006de2:	ff                   	(bad)  
9f006de3:	ff c3                	inc    ebx
9f006de5:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006dea:	ff                   	(bad)  
9f006deb:	ff c3                	inc    ebx
9f006ded:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006df2:	ff                   	(bad)  
9f006df3:	ff c3                	inc    ebx
9f006df5:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006dfa:	ff                   	(bad)  
9f006dfb:	ff c3                	inc    ebx
9f006dfd:	bc ff ff 1c bb       	mov    esp,0xbb1cffff
9f006e02:	ff                   	(bad)  
9f006e03:	ff                   	(bad)  
9f006e04:	bd bc ff ff c3       	mov    ebp,0xc3ffffbc
9f006e09:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006e0e:	ff                   	(bad)  
9f006e0f:	ff c3                	inc    ebx
9f006e11:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006e16:	ff                   	(bad)  
9f006e17:	ff                   	(bad)  
9f006e18:	bd bc ff ff c3       	mov    ebp,0xc3ffffbc
9f006e1d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006e22:	ff                   	(bad)  
9f006e23:	ff c3                	inc    ebx
9f006e25:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006e2a:	ff                   	(bad)  
9f006e2b:	ff 50 bc             	call   DWORD PTR [eax-0x44]
9f006e2e:	ff                   	(bad)  
9f006e2f:	ff a7 bc ff ff 12    	jmp    DWORD PTR [edi+0x12ffffbc]
9f006e35:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006e3a:	ff                   	(bad)  
9f006e3b:	ff c3                	inc    ebx
9f006e3d:	bc ff ff 71 bb       	mov    esp,0xbb71ffff
9f006e42:	ff                   	(bad)  
9f006e43:	ff c3                	inc    ebx
9f006e45:	bc ff ff fd bc       	mov    esp,0xbcfdffff
9f006e4a:	ff                   	(bad)  
9f006e4b:	ff c3                	inc    ebx
9f006e4d:	bc ff ff c3 bc       	mov    esp,0xbcc3ffff
9f006e52:	ff                   	(bad)  
9f006e53:	ff b0 bc ff ff 30    	push   DWORD PTR [eax+0x30ffffbc]

9f006e58 <digits.1547>:
9f006e58:	30 31                	xor    BYTE PTR [ecx],dh
9f006e5a:	32 33                	xor    dh,BYTE PTR [ebx]
9f006e5c:	34 35                	xor    al,0x35
9f006e5e:	36                   	ss
9f006e5f:	37                   	aaa    
9f006e60:	38 39                	cmp    BYTE PTR [ecx],bh
9f006e62:	41                   	inc    ecx
9f006e63:	42                   	inc    edx
9f006e64:	43                   	inc    ebx
9f006e65:	44                   	inc    esp
9f006e66:	45                   	inc    ebp
9f006e67:	46                   	inc    esi
	...
9f006e80:	47                   	inc    edi
9f006e81:	4d                   	dec    ebp
9f006e82:	54                   	push   esp
	...

9f006ea0 <_ytab>:
9f006ea0:	1f                   	pop    ds
9f006ea1:	00 00                	add    BYTE PTR [eax],al
9f006ea3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006ea6:	00 00                	add    BYTE PTR [eax],al
9f006ea8:	1f                   	pop    ds
9f006ea9:	00 00                	add    BYTE PTR [eax],al
9f006eab:	00 1e                	add    BYTE PTR [esi],bl
9f006ead:	00 00                	add    BYTE PTR [eax],al
9f006eaf:	00 1f                	add    BYTE PTR [edi],bl
9f006eb1:	00 00                	add    BYTE PTR [eax],al
9f006eb3:	00 1e                	add    BYTE PTR [esi],bl
9f006eb5:	00 00                	add    BYTE PTR [eax],al
9f006eb7:	00 1f                	add    BYTE PTR [edi],bl
9f006eb9:	00 00                	add    BYTE PTR [eax],al
9f006ebb:	00 1f                	add    BYTE PTR [edi],bl
9f006ebd:	00 00                	add    BYTE PTR [eax],al
9f006ebf:	00 1e                	add    BYTE PTR [esi],bl
9f006ec1:	00 00                	add    BYTE PTR [eax],al
9f006ec3:	00 1f                	add    BYTE PTR [edi],bl
9f006ec5:	00 00                	add    BYTE PTR [eax],al
9f006ec7:	00 1e                	add    BYTE PTR [esi],bl
9f006ec9:	00 00                	add    BYTE PTR [eax],al
9f006ecb:	00 1f                	add    BYTE PTR [edi],bl
9f006ecd:	00 00                	add    BYTE PTR [eax],al
9f006ecf:	00 1f                	add    BYTE PTR [edi],bl
9f006ed1:	00 00                	add    BYTE PTR [eax],al
9f006ed3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f006ed9:	00 00                	add    BYTE PTR [eax],al
9f006edb:	00 1e                	add    BYTE PTR [esi],bl
9f006edd:	00 00                	add    BYTE PTR [eax],al
9f006edf:	00 1f                	add    BYTE PTR [edi],bl
9f006ee1:	00 00                	add    BYTE PTR [eax],al
9f006ee3:	00 1e                	add    BYTE PTR [esi],bl
9f006ee5:	00 00                	add    BYTE PTR [eax],al
9f006ee7:	00 1f                	add    BYTE PTR [edi],bl
9f006ee9:	00 00                	add    BYTE PTR [eax],al
9f006eeb:	00 1f                	add    BYTE PTR [edi],bl
9f006eed:	00 00                	add    BYTE PTR [eax],al
9f006eef:	00 1e                	add    BYTE PTR [esi],bl
9f006ef1:	00 00                	add    BYTE PTR [eax],al
9f006ef3:	00 1f                	add    BYTE PTR [edi],bl
9f006ef5:	00 00                	add    BYTE PTR [eax],al
9f006ef7:	00 1e                	add    BYTE PTR [esi],bl
9f006ef9:	00 00                	add    BYTE PTR [eax],al
9f006efb:	00 1f                	add    BYTE PTR [edi],bl
9f006efd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f006f00 <.rel.dyn>:
9f006f00:	64                   	fs
9f006f01:	71 00                	jno    9f006f03 <_ytab+0x63>
9f006f03:	9f                   	lahf   
9f006f04:	08 00                	or     BYTE PTR [eax],al
9f006f06:	00 00                	add    BYTE PTR [eax],al
9f006f08:	68 71 00 9f 08       	push   0x89f0071
9f006f0d:	00 00                	add    BYTE PTR [eax],al
9f006f0f:	00 6c 71 00          	add    BYTE PTR [ecx+esi*2+0x0],ch
9f006f13:	9f                   	lahf   
9f006f14:	08 00                	or     BYTE PTR [eax],al
9f006f16:	00 00                	add    BYTE PTR [eax],al
9f006f18:	70 71                	jo     9f006f8b <_ytab+0xeb>
9f006f1a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006f20:	74 71                	je     9f006f93 <_ytab+0xf3>
9f006f22:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006f28:	78 71                	js     9f006f9b <_ytab+0xfb>
9f006f2a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006f30:	7c 71                	jl     9f006fa3 <_ytab+0x103>
9f006f32:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006f38:	80 71 00 9f          	xor    BYTE PTR [ecx+0x0],0x9f
9f006f3c:	08 00                	or     BYTE PTR [eax],al
9f006f3e:	00 00                	add    BYTE PTR [eax],al
9f006f40:	84 71 00             	test   BYTE PTR [ecx+0x0],dh
9f006f43:	9f                   	lahf   
9f006f44:	08 00                	or     BYTE PTR [eax],al
9f006f46:	00 00                	add    BYTE PTR [eax],al
9f006f48:	88 71 00             	mov    BYTE PTR [ecx+0x0],dh
9f006f4b:	9f                   	lahf   
9f006f4c:	08 00                	or     BYTE PTR [eax],al
9f006f4e:	00 00                	add    BYTE PTR [eax],al
9f006f50:	8c 71 00             	mov    WORD PTR [ecx+0x0],?
9f006f53:	9f                   	lahf   
9f006f54:	08 00                	or     BYTE PTR [eax],al
9f006f56:	00 00                	add    BYTE PTR [eax],al
9f006f58:	90                   	nop
9f006f59:	71 00                	jno    9f006f5b <_ytab+0xbb>
9f006f5b:	9f                   	lahf   
9f006f5c:	08 00                	or     BYTE PTR [eax],al
9f006f5e:	00 00                	add    BYTE PTR [eax],al
9f006f60:	94                   	xchg   esp,eax
9f006f61:	71 00                	jno    9f006f63 <_ytab+0xc3>
9f006f63:	9f                   	lahf   
9f006f64:	08 00                	or     BYTE PTR [eax],al
9f006f66:	00 00                	add    BYTE PTR [eax],al
9f006f68:	98                   	cwde   
9f006f69:	71 00                	jno    9f006f6b <_ytab+0xcb>
9f006f6b:	9f                   	lahf   
9f006f6c:	08 00                	or     BYTE PTR [eax],al
9f006f6e:	00 00                	add    BYTE PTR [eax],al
9f006f70:	b4 71                	mov    ah,0x71
9f006f72:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006f78:	b8 71 00 9f 08       	mov    eax,0x89f0071
9f006f7d:	00 00                	add    BYTE PTR [eax],al
9f006f7f:	00 bc 71 00 9f 08 00 	add    BYTE PTR [ecx+esi*2+0x89f00],bh
9f006f86:	00 00                	add    BYTE PTR [eax],al
9f006f88:	fa                   	cli    
9f006f89:	10 00                	adc    BYTE PTR [eax],al
9f006f8b:	9f                   	lahf   
9f006f8c:	02 2d 00 00 3a 11    	add    ch,BYTE PTR ds:0x113a0000
9f006f92:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006f98:	63 11                	arpl   WORD PTR [ecx],dx
9f006f9a:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006fa0:	7c 11                	jl     9f006fb3 <_ytab+0x113>
9f006fa2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006fa8:	d7                   	xlat   BYTE PTR ds:[ebx]
9f006fa9:	11 00                	adc    DWORD PTR [eax],eax
9f006fab:	9f                   	lahf   
9f006fac:	02 2d 00 00 3a 12    	add    ch,BYTE PTR ds:0x123a0000
9f006fb2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006fb8:	71 12                	jno    9f006fcc <_ytab+0x12c>
9f006fba:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006fc0:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006fc1:	12 00                	adc    al,BYTE PTR [eax]
9f006fc3:	9f                   	lahf   
9f006fc4:	02 2d 00 00 eb 12    	add    ch,BYTE PTR ds:0x12eb0000
9f006fca:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006fd0:	2b 13                	sub    edx,DWORD PTR [ebx]
9f006fd2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006fd8:	6d                   	ins    DWORD PTR es:[edi],dx
9f006fd9:	13 00                	adc    eax,DWORD PTR [eax]
9f006fdb:	9f                   	lahf   
9f006fdc:	02 2d 00 00 41 16    	add    ch,BYTE PTR ds:0x16410000
9f006fe2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006fe8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006fe9:	16                   	push   ss
9f006fea:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006ff0:	b1 16                	mov    cl,0x16
9f006ff2:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f006ff8:	de 16                	ficom  WORD PTR [esi]
9f006ffa:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007000:	52                   	push   edx
9f007001:	17                   	pop    ss
9f007002:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007008:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
9f00700b:	9f                   	lahf   
9f00700c:	02 2d 00 00 e9 47    	add    ch,BYTE PTR ds:0x47e90000
9f007012:	00 9f 02 2d 00 00    	add    BYTE PTR [edi+0x2d02],bl
9f007018:	b0 71                	mov    al,0x71
9f00701a:	00 9f 01 18 00 00    	add    BYTE PTR [edi+0x1801],bl
9f007020:	a8 71                	test   al,0x71
9f007022:	00 9f 07 30 00 00    	add    BYTE PTR [edi+0x3007],bl
9f007028:	ac                   	lods   al,BYTE PTR ds:[esi]
9f007029:	71 00                	jno    9f00702b <_ytab+0x18b>
9f00702b:	9f                   	lahf   
9f00702c:	07                   	pop    es
9f00702d:	4c                   	dec    esp
	...

Disassembly of section .data:

9f007040 <rcsid>:
9f007040:	24 48                	and    al,0x48
9f007042:	65                   	gs
9f007043:	61                   	popa   
9f007044:	64                   	fs
9f007045:	65                   	gs
9f007046:	72 3a                	jb     9f007082 <rcsid+0x42>
9f007048:	20 2f                	and    BYTE PTR [edi],ch
9f00704a:	75 73                	jne    9f0070bf <_DYNAMIC+0x13>
9f00704c:	65                   	gs
9f00704d:	72 36                	jb     9f007085 <rcsid+0x45>
9f00704f:	2f                   	das    
9f007050:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007051:	75 73                	jne    9f0070c6 <_DYNAMIC+0x1a>
9f007053:	74 65                	je     9f0070ba <_DYNAMIC+0xe>
9f007055:	72 2f                	jb     9f007086 <rcsid+0x46>
9f007057:	74 63                	je     9f0070bc <_DYNAMIC+0x10>
9f007059:	6c                   	ins    BYTE PTR es:[edi],dx
9f00705a:	2f                   	das    
9f00705b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00705e:	70 61                	jo     9f0070c1 <_DYNAMIC+0x15>
9f007060:	74 2f                	je     9f007091 <rcsid+0x51>
9f007062:	52                   	push   edx
9f007063:	43                   	inc    ebx
9f007064:	53                   	push   ebx
9f007065:	2f                   	das    
9f007066:	73 74                	jae    9f0070dc <_DYNAMIC+0x30>
9f007068:	72 73                	jb     9f0070dd <_DYNAMIC+0x31>
9f00706a:	74 72                	je     9f0070de <_DYNAMIC+0x32>
9f00706c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f007070:	20 31                	and    BYTE PTR [ecx],dh
9f007072:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f007075:	39 33                	cmp    DWORD PTR [ebx],esi
9f007077:	2f                   	das    
9f007078:	30 33                	xor    BYTE PTR [ebx],dh
9f00707a:	2f                   	das    
9f00707b:	31 39                	xor    DWORD PTR [ecx],edi
9f00707d:	20 31                	and    BYTE PTR [ecx],dh
9f00707f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f007084:	34 30                	xor    al,0x30
9f007086:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f007089:	73 74                	jae    9f0070ff <_DYNAMIC+0x53>
9f00708b:	65                   	gs
9f00708c:	72 20                	jb     9f0070ae <_DYNAMIC+0x2>
9f00708e:	45                   	inc    ebp
9f00708f:	78 70                	js     9f007101 <_DYNAMIC+0x55>
9f007091:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f007094:	53                   	push   ebx
9f007095:	50                   	push   eax
9f007096:	52                   	push   edx
9f007097:	49                   	dec    ecx
9f007098:	54                   	push   esp
9f007099:	45                   	inc    ebp
9f00709a:	20 28                	and    BYTE PTR [eax],ch
9f00709c:	42                   	inc    edx
9f00709d:	65                   	gs
9f00709e:	72 6b                	jb     9f00710b <_DYNAMIC+0x5f>
9f0070a0:	65                   	gs
9f0070a1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0070a2:	65                   	gs
9f0070a3:	79 29                	jns    9f0070ce <_DYNAMIC+0x22>
9f0070a5:	00 00                	add    BYTE PTR [eax],al
	...

9f0070a8 <_daylight>:
9f0070a8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f0070ac <_DYNAMIC>:
9f0070ac:	19 00                	sbb    DWORD PTR [eax],eax
9f0070ae:	00 00                	add    BYTE PTR [eax],al
9f0070b0:	b0 71                	mov    al,0x71
9f0070b2:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f0070b8:	04 00                	add    al,0x0
9f0070ba:	00 00                	add    BYTE PTR [eax],al
9f0070bc:	1a 00                	sbb    al,BYTE PTR [eax]
9f0070be:	00 00                	add    BYTE PTR [eax],al
9f0070c0:	b4 71                	mov    ah,0x71
9f0070c2:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f0070c8:	04 00                	add    al,0x0
9f0070ca:	00 00                	add    BYTE PTR [eax],al
9f0070cc:	04 00                	add    al,0x0
9f0070ce:	00 00                	add    BYTE PTR [eax],al
9f0070d0:	40                   	inc    eax
9f0070d1:	62 00                	bound  eax,QWORD PTR [eax]
9f0070d3:	9f                   	lahf   
9f0070d4:	05 00 00 00 f0       	add    eax,0xf0000000
9f0070d9:	5f                   	pop    edi
9f0070da:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f0070e0:	00 5b 00             	add    BYTE PTR [ebx+0x0],bl
9f0070e3:	9f                   	lahf   
9f0070e4:	0a 00                	or     al,BYTE PTR [eax]
9f0070e6:	00 00                	add    BYTE PTR [eax],al
9f0070e8:	4d                   	dec    ebp
9f0070e9:	02 00                	add    al,BYTE PTR [eax]
9f0070eb:	00 0b                	add    BYTE PTR [ebx],cl
9f0070ed:	00 00                	add    BYTE PTR [eax],al
9f0070ef:	00 10                	add    BYTE PTR [eax],dl
9f0070f1:	00 00                	add    BYTE PTR [eax],al
9f0070f3:	00 03                	add    BYTE PTR [ebx],al
9f0070f5:	00 00                	add    BYTE PTR [eax],al
9f0070f7:	00 9c 71 00 9f 02 00 	add    BYTE PTR [ecx+esi*2+0x29f00],bl
9f0070fe:	00 00                	add    BYTE PTR [eax],al
9f007100:	10 00                	adc    BYTE PTR [eax],al
9f007102:	00 00                	add    BYTE PTR [eax],al
9f007104:	14 00                	adc    al,0x0
9f007106:	00 00                	add    BYTE PTR [eax],al
9f007108:	11 00                	adc    DWORD PTR [eax],eax
9f00710a:	00 00                	add    BYTE PTR [eax],al
9f00710c:	17                   	pop    ss
9f00710d:	00 00                	add    BYTE PTR [eax],al
9f00710f:	00 20                	add    BYTE PTR [eax],ah
9f007111:	70 00                	jo     9f007113 <_DYNAMIC+0x67>
9f007113:	9f                   	lahf   
9f007114:	11 00                	adc    DWORD PTR [eax],eax
9f007116:	00 00                	add    BYTE PTR [eax],al
9f007118:	00 6f 00             	add    BYTE PTR [edi+0x0],ch
9f00711b:	9f                   	lahf   
9f00711c:	12 00                	adc    al,BYTE PTR [eax]
9f00711e:	00 00                	add    BYTE PTR [eax],al
9f007120:	20 01                	and    BYTE PTR [ecx],al
9f007122:	00 00                	add    BYTE PTR [eax],al
9f007124:	13 00                	adc    eax,DWORD PTR [eax]
9f007126:	00 00                	add    BYTE PTR [eax],al
9f007128:	08 00                	or     BYTE PTR [eax],al
9f00712a:	00 00                	add    BYTE PTR [eax],al
9f00712c:	16                   	push   ss
9f00712d:	00 00                	add    BYTE PTR [eax],al
9f00712f:	00 00                	add    BYTE PTR [eax],al
9f007131:	00 00                	add    BYTE PTR [eax],al
9f007133:	00 fa                	add    dl,bh
9f007135:	ff                   	(bad)  
9f007136:	ff 6f 11             	jmp    FWORD PTR [edi+0x11]
	...

Disassembly of section .got:

9f007164 <.got>:
9f007164:	e4 71                	in     al,0x71
9f007166:	00 9f fc 71 00 9f    	add    BYTE PTR [edi-0x60ff8e04],bl
9f00716c:	c0                   	(bad)  
9f00716d:	71 00                	jno    9f00716f <_DYNAMIC+0xc3>
9f00716f:	9f                   	lahf   
9f007170:	e8 71 00 9f c4       	call   639f71e6 <sysEnter_Vector+0x638c71e6>
9f007175:	71 00                	jno    9f007177 <_DYNAMIC+0xcb>
9f007177:	9f                   	lahf   
9f007178:	c8 71 00 9f          	enter  0x71,0x9f
9f00717c:	f8                   	clc    
9f00717d:	71 00                	jno    9f00717f <_DYNAMIC+0xd3>
9f00717f:	9f                   	lahf   
9f007180:	cc                   	int3   
9f007181:	71 00                	jno    9f007183 <_DYNAMIC+0xd7>
9f007183:	9f                   	lahf   
9f007184:	d0                   	(bad)  
9f007185:	71 00                	jno    9f007187 <_DYNAMIC+0xdb>
9f007187:	9f                   	lahf   
9f007188:	d4 71                	aam    0x71
9f00718a:	00 9f ec 71 00 9f    	add    BYTE PTR [edi-0x60ff8e14],bl
9f007190:	f0 71 00             	lock jno 9f007193 <_DYNAMIC+0xe7>
9f007193:	9f                   	lahf   
9f007194:	d8 71 00             	fdiv   DWORD PTR [ecx+0x0]
9f007197:	9f                   	lahf   
9f007198:	40                   	inc    eax
9f007199:	72 00                	jb     9f00719b <_DYNAMIC+0xef>
9f00719b:	9f                   	lahf   

Disassembly of section .got.plt:

9f00719c <_GLOBAL_OFFSET_TABLE_>:
9f00719c:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00719d:	70 00                	jo     9f00719f <_GLOBAL_OFFSET_TABLE_+0x3>
9f00719f:	9f                   	lahf   
	...
9f0071a8:	86 48 00             	xchg   BYTE PTR [eax+0x0],cl
9f0071ab:	9f                   	lahf   
9f0071ac:	96                   	xchg   esi,eax
9f0071ad:	48                   	dec    eax
9f0071ae:	00                   	.byte 0x0
9f0071af:	9f                   	lahf   

Disassembly of section .init_array:

9f0071b0 <.init_array>:
9f0071b0:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f0071b4 <.fini_array>:
9f0071b4:	49                   	dec    ecx
9f0071b5:	14 00                	adc    al,0x0
9f0071b7:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f0071b8 <_tzname>:
9f0071b8:	80 6e 00 9f          	sub    BYTE PTR [esi+0x0],0x9f
9f0071bc:	80 6e 00 9f          	sub    BYTE PTR [esi+0x0],0x9f

Disassembly of section .bss:

9f0071c0 <filesToCloseCount>:
9f0071c0:	00 00                	add    BYTE PTR [eax],al
	...

9f0071c4 <filesToClose>:
9f0071c4:	00 00                	add    BYTE PTR [eax],al
	...

9f0071c8 <heapEnd>:
9f0071c8:	00 00                	add    BYTE PTR [eax],al
	...

9f0071cc <heapBase>:
9f0071cc:	00 00                	add    BYTE PTR [eax],al
	...

9f0071d0 <heapCurr>:
9f0071d0:	00 00                	add    BYTE PTR [eax],al
	...

9f0071d4 <processEnvp>:
9f0071d4:	00 00                	add    BYTE PTR [eax],al
	...

9f0071d8 <libcTZ>:
9f0071d8:	00 00                	add    BYTE PTR [eax],al
	...

9f0071dc <lasts.1542>:
9f0071dc:	00 00                	add    BYTE PTR [eax],al
	...

9f0071e0 <lasts.1550>:
9f0071e0:	00 00                	add    BYTE PTR [eax],al
	...

9f0071e4 <resolvePath_envPath>:
9f0071e4:	00 00                	add    BYTE PTR [eax],al
	...

9f0071e8 <resolvePath_resPath>:
9f0071e8:	00 00                	add    BYTE PTR [eax],al
	...

9f0071ec <resolvePath_cwd>:
9f0071ec:	00 00                	add    BYTE PTR [eax],al
	...

9f0071f0 <resolvePath_inPath>:
9f0071f0:	00 00                	add    BYTE PTR [eax],al
	...

9f0071f4 <libcInitialized>:
9f0071f4:	00 00                	add    BYTE PTR [eax],al
	...

9f0071f8 <printBuffer>:
9f0071f8:	00 00                	add    BYTE PTR [eax],al
	...

9f0071fc <params>:
	...

9f007214 <lastHRCreated.1567>:
9f007214:	00 00                	add    BYTE PTR [eax],al
	...

9f007218 <_dstbias>:
	...

9f007220 <ticksToWait>:
	...

9f007240 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	92                   	xchg   edx,eax
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	ac                   	lods   al,BYTE PTR ds:[esi]
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c 3d 01 00 00 1e 	add    BYTE PTR [edi*1+0x1e000001],cl
      16:	00 00                	add    BYTE PTR [eax],al
      18:	00 00                	add    BYTE PTR [eax],al
      1a:	00 00                	add    BYTE PTR [eax],al
      1c:	9f                   	lahf   
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	8c 00                	mov    WORD PTR [eax],es
      2a:	00 00                	add    BYTE PTR [eax],al
      2c:	02 01                	add    al,BYTE PTR [ecx]
      2e:	06                   	push   es
      2f:	85 00                	test   DWORD PTR [eax],eax
      31:	00 00                	add    BYTE PTR [eax],al
      33:	02 02                	add    al,BYTE PTR [edx]
      35:	05 72 01 00 00       	add    eax,0x172
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
      50:	02 07                	add    al,BYTE PTR [edi]
      52:	19 01                	sbb    DWORD PTR [ecx],eax
      54:	00 00                	add    BYTE PTR [eax],al
      56:	04 0e                	add    al,0xe
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 02                	add    BYTE PTR [edx],al
      5c:	34 61                	xor    al,0x61
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	61                   	popa   
      65:	00 00                	add    BYTE PTR [eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	57                   	push   edi
      6c:	00 00                	add    BYTE PTR [eax],al
      6e:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
      75:	56                   	push   esi
      76:	61                   	popa   
      77:	00 00                	add    BYTE PTR [eax],al
      79:	00 02                	add    BYTE PTR [edx],al
      7b:	04 05                	add    al,0x5
      7d:	05 00 00 00 02       	add    eax,0x2000000
      82:	0c 04                	or     al,0x4
      84:	66 01 00             	add    WORD PTR [eax],ax
      87:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
      8d:	00 06                	add    BYTE PTR [esi],al
      8f:	25 00 00 00 02       	and    eax,0x2000000
      94:	01 02                	add    DWORD PTR [edx],eax
      96:	13 01                	adc    eax,DWORD PTR [ecx]
      98:	00 00                	add    BYTE PTR [eax],al
      9a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      9d:	83 01 00             	add    DWORD PTR [ecx],0x0
      a0:	00 02                	add    BYTE PTR [edx],al
      a2:	04 07                	add    al,0x7
      a4:	5c                   	pop    esp
      a5:	00 00                	add    BYTE PTR [eax],al
      a7:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
      ad:	00 07                	add    BYTE PTR [edi],al
      af:	17                   	pop    ss
      b0:	00 00                	add    BYTE PTR [eax],al
      b2:	00 01                	add    BYTE PTR [ecx],al
      b4:	08 a8 00 00 00 00    	or     BYTE PTR [eax+0x0],ch
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	9f                   	lahf   
      bd:	38 00                	cmp    BYTE PTR [eax],al
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	01 9c e0 00 00 00 08 	add    DWORD PTR [eax+eiz*8+0x8000000],ebx
      c8:	73 00                	jae    ca <sysEnter_Vector-0x12ff36>
      ca:	01 08                	add    DWORD PTR [eax],ecx
      cc:	88 00                	mov    BYTE PTR [eax],al
      ce:	00 00                	add    BYTE PTR [eax],al
      d0:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      d6:	01 08                	add    DWORD PTR [eax],ecx
      d8:	3a 00                	cmp    al,BYTE PTR [eax]
      da:	00 00                	add    BYTE PTR [eax],al
      dc:	02 91 04 00 07 2c    	add    dl,BYTE PTR [ecx+0x2c070004]
      e2:	01 00                	add    DWORD PTR [eax],eax
      e4:	00 01                	add    BYTE PTR [ecx],al
      e6:	10 a8 00 00 00 38    	adc    BYTE PTR [eax+0x38000000],ch
      ec:	00 00                	add    BYTE PTR [eax],al
      ee:	9f                   	lahf   
      ef:	38 00                	cmp    BYTE PTR [eax],al
      f1:	00 00                	add    BYTE PTR [eax],al
      f3:	01 9c 12 01 00 00 08 	add    DWORD PTR [edx+edx*1+0x8000001],ebx
      fa:	73 00                	jae    fc <sysEnter_Vector-0x12ff04>
      fc:	01 10                	add    DWORD PTR [eax],edx
      fe:	88 00                	mov    BYTE PTR [eax],al
     100:	00 00                	add    BYTE PTR [eax],al
     102:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
     108:	01 10                	add    DWORD PTR [eax],edx
     10a:	3a 00                	cmp    al,BYTE PTR [eax]
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	02 91 04 00 09 a3    	add    dl,BYTE PTR [ecx-0x5cf6fffc]
     114:	00 00                	add    BYTE PTR [eax],al
     116:	00 03                	add    BYTE PTR [ebx],al
     118:	37                   	aaa    
     119:	56                   	push   esi
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
     122:	9f                   	lahf   
     123:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     126:	00 00                	add    BYTE PTR [eax],al
     128:	03 38                	add    edi,DWORD PTR [eax]
     12a:	56                   	push   esi
     12b:	00 00                	add    BYTE PTR [eax],al
     12d:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
     133:	9f                   	lahf   
     134:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     137:	00 00                	add    BYTE PTR [eax],al
     139:	03 39                	add    edi,DWORD PTR [ecx]
     13b:	56                   	push   esi
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
     144:	9f                   	lahf   
     145:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     149:	00 03                	add    BYTE PTR [ebx],al
     14b:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	05 03 d8 71 00       	add    eax,0x71d803
     155:	9f                   	lahf   
     156:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	04 34                	add    al,0x34
     15d:	67 01 00             	add    DWORD PTR [bx+si],eax
     160:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
     166:	9f                   	lahf   
     167:	05 04 6f 00 00       	add    eax,0x6f04
     16c:	00 09                	add    BYTE PTR [ecx],cl
     16e:	91                   	xchg   ecx,eax
     16f:	00 00                	add    BYTE PTR [eax],al
     171:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     178:	05 03 c0 71 00       	add    eax,0x71c003
     17d:	9f                   	lahf   
     17e:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     181:	00 00                	add    BYTE PTR [eax],al
     183:	05 58 8f 01 00       	add    eax,0x18f58
     188:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
     18e:	9f                   	lahf   
     18f:	05 04 a8 00 00       	add    eax,0xa804
     194:	00 00                	add    BYTE PTR [eax],al
     196:	d1 01                	rol    DWORD PTR [ecx],1
     198:	00 00                	add    BYTE PTR [eax],al
     19a:	04 00                	add    al,0x0
     19c:	83 00 00             	add    DWORD PTR [eax],0x0
     19f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     1a2:	ac                   	lods   al,BYTE PTR ds:[esi]
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 0c 95 01 00 00 1e 	add    BYTE PTR [edx*4+0x1e000001],cl
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	00 70 00             	add    BYTE PTR [eax+0x0],dh
     1b1:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     1b7:	de 00                	fiadd  WORD PTR [eax]
     1b9:	00 00                	add    BYTE PTR [eax],al
     1bb:	02 01                	add    al,BYTE PTR [ecx]
     1bd:	06                   	push   es
     1be:	8c 00                	mov    WORD PTR [eax],es
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	02 01                	add    al,BYTE PTR [ecx]
     1c4:	06                   	push   es
     1c5:	85 00                	test   DWORD PTR [eax],eax
     1c7:	00 00                	add    BYTE PTR [eax],al
     1c9:	02 02                	add    al,BYTE PTR [edx]
     1cb:	05 72 01 00 00       	add    eax,0x172
     1d0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1d7:	02 08                	add    cl,BYTE PTR [eax]
     1d9:	05 00 00 00 00       	add    eax,0x0
     1de:	02 01                	add    al,BYTE PTR [ecx]
     1e0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     1e6:	02 07                	add    al,BYTE PTR [edi]
     1e8:	19 01                	sbb    DWORD PTR [ecx],eax
     1ea:	00 00                	add    BYTE PTR [eax],al
     1ec:	04 0e                	add    al,0xe
     1ee:	00 00                	add    BYTE PTR [eax],al
     1f0:	00 02                	add    BYTE PTR [edx],al
     1f2:	34 61                	xor    al,0x61
     1f4:	00 00                	add    BYTE PTR [eax],al
     1f6:	00 02                	add    BYTE PTR [edx],al
     1f8:	04 07                	add    al,0x7
     1fa:	61                   	popa   
     1fb:	00 00                	add    BYTE PTR [eax],al
     1fd:	00 02                	add    BYTE PTR [edx],al
     1ff:	08 07                	or     BYTE PTR [edi],al
     201:	57                   	push   edi
     202:	00 00                	add    BYTE PTR [eax],al
     204:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     20b:	56                   	push   esi
     20c:	61                   	popa   
     20d:	00 00                	add    BYTE PTR [eax],al
     20f:	00 02                	add    BYTE PTR [edx],al
     211:	04 05                	add    al,0x5
     213:	05 00 00 00 02       	add    eax,0x2000000
     218:	0c 04                	or     al,0x4
     21a:	66 01 00             	add    WORD PTR [eax],ax
     21d:	00 02                	add    BYTE PTR [edx],al
     21f:	01 02                	add    DWORD PTR [edx],eax
     221:	13 01                	adc    eax,DWORD PTR [ecx]
     223:	00 00                	add    BYTE PTR [eax],al
     225:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     228:	83 01 00             	add    DWORD PTR [ecx],0x0
     22b:	00 02                	add    BYTE PTR [edx],al
     22d:	04 07                	add    al,0x7
     22f:	5c                   	pop    esp
     230:	00 00                	add    BYTE PTR [eax],al
     232:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     238:	00 06                	add    BYTE PTR [esi],al
     23a:	c5 01                	lds    eax,FWORD PTR [ecx]
     23c:	00 00                	add    BYTE PTR [eax],al
     23e:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     244:	70 00                	jo     246 <sysEnter_Vector-0x12fdba>
     246:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     24c:	01 9c fa 00 00 00 07 	add    DWORD PTR [edx+edi*8+0x7000000],ebx
     253:	ca 0e 00             	retf   0xe
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	25 9d 00 00 00       	and    eax,0x9d
     25d:	02 91 00 07 bf 01    	add    dl,BYTE PTR [ecx+0x1bf0700]
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     26b:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     271:	01 27                	add    DWORD PTR [edi],esp
     273:	25 00 00 00 01       	and    eax,0x1000000
     278:	51                   	push   ecx
     279:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     27c:	01 27                	add    DWORD PTR [edi],esp
     27e:	9d                   	popf   
     27f:	00 00                	add    BYTE PTR [eax],al
     281:	00 01                	add    BYTE PTR [ecx],al
     283:	56                   	push   esi
     284:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     287:	01 27                	add    DWORD PTR [edi],esp
     289:	9d                   	popf   
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	00 01                	add    BYTE PTR [ecx],al
     28e:	53                   	push   ebx
     28f:	00 06                	add    BYTE PTR [esi],al
     291:	8c 01                	mov    WORD PTR [ecx],es
     293:	00 00                	add    BYTE PTR [eax],al
     295:	01 33                	add    DWORD PTR [ebx],esi
     297:	3a 00                	cmp    al,BYTE PTR [eax]
     299:	00 00                	add    BYTE PTR [eax],al
     29b:	c5 00                	lds    eax,FWORD PTR [eax]
     29d:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     2a3:	01 9c 51 01 00 00 07 	add    DWORD PTR [ecx+edx*2+0x7000001],ebx
     2aa:	ca 0e 00             	retf   0xe
     2ad:	00 01                	add    BYTE PTR [ecx],al
     2af:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     2b5:	91                   	xchg   ecx,eax
     2b6:	00 07                	add    BYTE PTR [edi],al
     2b8:	bf 01 00 00 01       	mov    edi,0x1000001
     2bd:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     2c3:	91                   	xchg   ecx,eax
     2c4:	04 08                	add    al,0x8
     2c6:	63 00                	arpl   WORD PTR [eax],ax
     2c8:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     2ce:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     2d1:	70 00                	jo     2d3 <sysEnter_Vector-0x12fd2d>
     2d3:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2d9:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     2dc:	73 00                	jae    2de <sysEnter_Vector-0x12fd22>
     2de:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2e4:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2e7:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
     2ed:	37                   	aaa    
     2ee:	56                   	push   esi
     2ef:	00 00                	add    BYTE PTR [eax],al
     2f1:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
     2f7:	9f                   	lahf   
     2f8:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     2fb:	00 00                	add    BYTE PTR [eax],al
     2fd:	03 38                	add    edi,DWORD PTR [eax]
     2ff:	56                   	push   esi
     300:	00 00                	add    BYTE PTR [eax],al
     302:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
     308:	9f                   	lahf   
     309:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     30c:	00 00                	add    BYTE PTR [eax],al
     30e:	03 39                	add    edi,DWORD PTR [ecx]
     310:	56                   	push   esi
     311:	00 00                	add    BYTE PTR [eax],al
     313:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
     319:	9f                   	lahf   
     31a:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     31e:	00 03                	add    BYTE PTR [ebx],al
     320:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     323:	00 00                	add    BYTE PTR [eax],al
     325:	05 03 d8 71 00       	add    eax,0x71d803
     32a:	9f                   	lahf   
     32b:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     32e:	00 00                	add    BYTE PTR [eax],al
     330:	04 34                	add    al,0x34
     332:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     333:	01 00                	add    DWORD PTR [eax],eax
     335:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
     33b:	9f                   	lahf   
     33c:	05 04 6f 00 00       	add    eax,0x6f04
     341:	00 09                	add    BYTE PTR [ecx],cl
     343:	91                   	xchg   ecx,eax
     344:	00 00                	add    BYTE PTR [eax],al
     346:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     34d:	05 03 c0 71 00       	add    eax,0x71c003
     352:	9f                   	lahf   
     353:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     356:	00 00                	add    BYTE PTR [eax],al
     358:	05 58 ce 01 00       	add    eax,0x1ce58
     35d:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
     363:	9f                   	lahf   
     364:	05 04 9d 00 00       	add    eax,0x9d04
     369:	00 00                	add    BYTE PTR [eax],al
     36b:	c5 01                	lds    eax,FWORD PTR [ecx]
     36d:	00 00                	add    BYTE PTR [eax],al
     36f:	04 00                	add    al,0x0
     371:	0e                   	push   cs
     372:	01 00                	add    DWORD PTR [eax],eax
     374:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     377:	ac                   	lods   al,BYTE PTR ds:[esi]
     378:	00 00                	add    BYTE PTR [eax],al
     37a:	00 0c cd 01 00 00 1e 	add    BYTE PTR [ecx*8+0x1e000001],cl
     381:	00 00                	add    BYTE PTR [eax],al
     383:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     386:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
     38c:	ef                   	out    dx,eax
     38d:	01 00                	add    DWORD PTR [eax],eax
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	01 06                	add    DWORD PTR [esi],eax
     393:	8c 00                	mov    WORD PTR [eax],es
     395:	00 00                	add    BYTE PTR [eax],al
     397:	02 01                	add    al,BYTE PTR [ecx]
     399:	06                   	push   es
     39a:	85 00                	test   DWORD PTR [eax],eax
     39c:	00 00                	add    BYTE PTR [eax],al
     39e:	02 02                	add    al,BYTE PTR [edx]
     3a0:	05 72 01 00 00       	add    eax,0x172
     3a5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ac:	02 08                	add    cl,BYTE PTR [eax]
     3ae:	05 00 00 00 00       	add    eax,0x0
     3b3:	02 01                	add    al,BYTE PTR [ecx]
     3b5:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     3bb:	02 07                	add    al,BYTE PTR [edi]
     3bd:	19 01                	sbb    DWORD PTR [ecx],eax
     3bf:	00 00                	add    BYTE PTR [eax],al
     3c1:	04 0e                	add    al,0xe
     3c3:	00 00                	add    BYTE PTR [eax],al
     3c5:	00 02                	add    BYTE PTR [edx],al
     3c7:	34 61                	xor    al,0x61
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	61                   	popa   
     3d0:	00 00                	add    BYTE PTR [eax],al
     3d2:	00 02                	add    BYTE PTR [edx],al
     3d4:	08 07                	or     BYTE PTR [edi],al
     3d6:	57                   	push   edi
     3d7:	00 00                	add    BYTE PTR [eax],al
     3d9:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     3e0:	56                   	push   esi
     3e1:	61                   	popa   
     3e2:	00 00                	add    BYTE PTR [eax],al
     3e4:	00 02                	add    BYTE PTR [edx],al
     3e6:	04 05                	add    al,0x5
     3e8:	05 00 00 00 02       	add    eax,0x2000000
     3ed:	0c 04                	or     al,0x4
     3ef:	66 01 00             	add    WORD PTR [eax],ax
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	01 02                	add    DWORD PTR [edx],eax
     3f6:	13 01                	adc    eax,DWORD PTR [ecx]
     3f8:	00 00                	add    BYTE PTR [eax],al
     3fa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3fd:	83 01 00             	add    DWORD PTR [ecx],0x0
     400:	00 02                	add    BYTE PTR [edx],al
     402:	04 07                	add    al,0x7
     404:	5c                   	pop    esp
     405:	00 00                	add    BYTE PTR [eax],al
     407:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     40d:	00 06                	add    BYTE PTR [esi],al
     40f:	09 02                	or     DWORD PTR [edx],eax
     411:	00 00                	add    BYTE PTR [eax],al
     413:	01 28                	add    DWORD PTR [eax],ebp
     415:	9d                   	popf   
     416:	00 00                	add    BYTE PTR [eax],al
     418:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     41b:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     421:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
     428:	73 00                	jae    42a <sysEnter_Vector-0x12fbd6>
     42a:	01 28                	add    DWORD PTR [eax],ebp
     42c:	9d                   	popf   
     42d:	00 00                	add    BYTE PTR [eax],al
     42f:	00 02                	add    BYTE PTR [edx],al
     431:	91                   	xchg   ecx,eax
     432:	00 08                	add    BYTE PTR [eax],cl
     434:	fc                   	cld    
     435:	01 00                	add    DWORD PTR [eax],eax
     437:	00 01                	add    BYTE PTR [ecx],al
     439:	28 9d 00 00 00 02    	sub    BYTE PTR [ebp+0x2000000],bl
     43f:	91                   	xchg   ecx,eax
     440:	04 09                	add    al,0x9
     442:	f6 01 00             	test   BYTE PTR [ecx],0x0
     445:	00 01                	add    BYTE PTR [ecx],al
     447:	2a 9d 00 00 00 05    	sub    bl,BYTE PTR [ebp+0x5000000]
     44d:	03 dc                	add    ebx,esp
     44f:	71 00                	jno    451 <sysEnter_Vector-0x12fbaf>
     451:	9f                   	lahf   
     452:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     455:	00 01                	add    BYTE PTR [ecx],al
     457:	2b 3a                	sub    edi,DWORD PTR [edx]
     459:	00 00                	add    BYTE PTR [eax],al
     45b:	00 01                	add    BYTE PTR [ecx],al
     45d:	56                   	push   esi
     45e:	00 06                	add    BYTE PTR [esi],al
     460:	02 02                	add    al,BYTE PTR [edx]
     462:	00 00                	add    BYTE PTR [eax],al
     464:	01 3a                	add    DWORD PTR [edx],edi
     466:	9d                   	popf   
     467:	00 00                	add    BYTE PTR [eax],al
     469:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
     46f:	00 00                	add    BYTE PTR [eax],al
     471:	00 01                	add    BYTE PTR [ecx],al
     473:	9c                   	pushf  
     474:	45                   	inc    ebp
     475:	01 00                	add    DWORD PTR [eax],eax
     477:	00 07                	add    BYTE PTR [edi],al
     479:	73 00                	jae    47b <sysEnter_Vector-0x12fb85>
     47b:	01 3a                	add    DWORD PTR [edx],edi
     47d:	9d                   	popf   
     47e:	00 00                	add    BYTE PTR [eax],al
     480:	00 02                	add    BYTE PTR [edx],al
     482:	91                   	xchg   ecx,eax
     483:	00 08                	add    BYTE PTR [eax],cl
     485:	fc                   	cld    
     486:	01 00                	add    DWORD PTR [eax],eax
     488:	00 01                	add    BYTE PTR [ecx],al
     48a:	3a 9d 00 00 00 02    	cmp    bl,BYTE PTR [ebp+0x2000000]
     490:	91                   	xchg   ecx,eax
     491:	04 09                	add    al,0x9
     493:	f6 01 00             	test   BYTE PTR [ecx],0x0
     496:	00 01                	add    BYTE PTR [ecx],al
     498:	3c 9d                	cmp    al,0x9d
     49a:	00 00                	add    BYTE PTR [eax],al
     49c:	00 05 03 e0 71 00    	add    BYTE PTR ds:0x71e003,al
     4a2:	9f                   	lahf   
     4a3:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     4a6:	00 01                	add    BYTE PTR [ecx],al
     4a8:	3d 3a 00 00 00       	cmp    eax,0x3a
     4ad:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     4b0:	0b a3 00 00 00 03    	or     esp,DWORD PTR [ebx+0x3000000]
     4b6:	37                   	aaa    
     4b7:	56                   	push   esi
     4b8:	00 00                	add    BYTE PTR [eax],al
     4ba:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
     4c0:	9f                   	lahf   
     4c1:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	03 38                	add    edi,DWORD PTR [eax]
     4c8:	56                   	push   esi
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
     4d1:	9f                   	lahf   
     4d2:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
     4d5:	00 00                	add    BYTE PTR [eax],al
     4d7:	03 39                	add    edi,DWORD PTR [ecx]
     4d9:	56                   	push   esi
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
     4e2:	9f                   	lahf   
     4e3:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
     4e7:	00 03                	add    BYTE PTR [ebx],al
     4e9:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     4ec:	00 00                	add    BYTE PTR [eax],al
     4ee:	05 03 d8 71 00       	add    eax,0x71d803
     4f3:	9f                   	lahf   
     4f4:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
     4f7:	00 00                	add    BYTE PTR [eax],al
     4f9:	04 34                	add    al,0x34
     4fb:	9a 01 00 00 05 03 c4 	call   0xc403:0x5000001
     502:	71 00                	jno    504 <sysEnter_Vector-0x12fafc>
     504:	9f                   	lahf   
     505:	05 04 6f 00 00       	add    eax,0x6f04
     50a:	00 0b                	add    BYTE PTR [ebx],cl
     50c:	91                   	xchg   ecx,eax
     50d:	00 00                	add    BYTE PTR [eax],al
     50f:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     516:	05 03 c0 71 00       	add    eax,0x71c003
     51b:	9f                   	lahf   
     51c:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
     51f:	00 00                	add    BYTE PTR [eax],al
     521:	05 58 c2 01 00       	add    eax,0x1c258
     526:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
     52c:	9f                   	lahf   
     52d:	05 04 9d 00 00       	add    eax,0x9d04
     532:	00 00                	add    BYTE PTR [eax],al
     534:	45                   	inc    ebp
     535:	02 00                	add    al,BYTE PTR [eax]
     537:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     53a:	b7 01                	mov    bh,0x1
     53c:	00 00                	add    BYTE PTR [eax],al
     53e:	04 01                	add    al,0x1
     540:	ac                   	lods   al,BYTE PTR ds:[esi]
     541:	00 00                	add    BYTE PTR [eax],al
     543:	00 0c 11             	add    BYTE PTR [ecx+edx*1],cl
     546:	02 00                	add    al,BYTE PTR [eax]
     548:	00 1e                	add    BYTE PTR [esi],bl
     54a:	00 00                	add    BYTE PTR [eax],al
     54c:	00 4c 02 00          	add    BYTE PTR [edx+eax*1+0x0],cl
     550:	9f                   	lahf   
     551:	49                   	dec    ecx
     552:	02 00                	add    al,BYTE PTR [eax]
     554:	00 e1                	add    cl,ah
     556:	02 00                	add    al,BYTE PTR [eax]
     558:	00 02                	add    BYTE PTR [edx],al
     55a:	01 06                	add    DWORD PTR [esi],eax
     55c:	8c 00                	mov    WORD PTR [eax],es
     55e:	00 00                	add    BYTE PTR [eax],al
     560:	02 01                	add    al,BYTE PTR [ecx]
     562:	06                   	push   es
     563:	85 00                	test   DWORD PTR [eax],eax
     565:	00 00                	add    BYTE PTR [eax],al
     567:	02 02                	add    al,BYTE PTR [edx]
     569:	05 72 01 00 00       	add    eax,0x172
     56e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     575:	02 08                	add    cl,BYTE PTR [eax]
     577:	05 00 00 00 00       	add    eax,0x0
     57c:	02 01                	add    al,BYTE PTR [ecx]
     57e:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     584:	02 07                	add    al,BYTE PTR [edi]
     586:	19 01                	sbb    DWORD PTR [ecx],eax
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	04 0e                	add    al,0xe
     58c:	00 00                	add    BYTE PTR [eax],al
     58e:	00 02                	add    BYTE PTR [edx],al
     590:	34 61                	xor    al,0x61
     592:	00 00                	add    BYTE PTR [eax],al
     594:	00 02                	add    BYTE PTR [edx],al
     596:	04 07                	add    al,0x7
     598:	61                   	popa   
     599:	00 00                	add    BYTE PTR [eax],al
     59b:	00 02                	add    BYTE PTR [edx],al
     59d:	08 07                	or     BYTE PTR [edi],al
     59f:	57                   	push   edi
     5a0:	00 00                	add    BYTE PTR [eax],al
     5a2:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     5a9:	56                   	push   esi
     5aa:	61                   	popa   
     5ab:	00 00                	add    BYTE PTR [eax],al
     5ad:	00 02                	add    BYTE PTR [edx],al
     5af:	04 05                	add    al,0x5
     5b1:	05 00 00 00 02       	add    eax,0x2000000
     5b6:	0c 04                	or     al,0x4
     5b8:	66 01 00             	add    WORD PTR [eax],ax
     5bb:	00 02                	add    BYTE PTR [edx],al
     5bd:	01 02                	add    DWORD PTR [edx],eax
     5bf:	13 01                	adc    eax,DWORD PTR [ecx]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     5c6:	83 01 00             	add    DWORD PTR [ecx],0x0
     5c9:	00 02                	add    BYTE PTR [edx],al
     5cb:	04 07                	add    al,0x7
     5cd:	5c                   	pop    esp
     5ce:	00 00                	add    BYTE PTR [eax],al
     5d0:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     5d6:	00 06                	add    BYTE PTR [esi],al
     5d8:	28 02                	sub    BYTE PTR [edx],al
     5da:	00 00                	add    BYTE PTR [eax],al
     5dc:	01 09                	add    DWORD PTR [ecx],ecx
     5de:	4c                   	dec    esp
     5df:	02 00                	add    al,BYTE PTR [eax]
     5e1:	9f                   	lahf   
     5e2:	77 00                	ja     5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     5ed:	73 00                	jae    5ef <sysEnter_Vector-0x12fa11>
     5ef:	01 09                	add    DWORD PTR [ecx],ecx
     5f1:	9d                   	popf   
     5f2:	00 00                	add    BYTE PTR [eax],al
     5f4:	00 02                	add    BYTE PTR [edx],al
     5f6:	91                   	xchg   ecx,eax
     5f7:	00 08                	add    BYTE PTR [eax],cl
     5f9:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     5ff:	00 00                	add    BYTE PTR [eax],al
     601:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     607:	01 0b                	add    DWORD PTR [ebx],ecx
     609:	3a 00                	cmp    al,BYTE PTR [eax]
     60b:	00 00                	add    BYTE PTR [eax],al
     60d:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     613:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     61a:	91                   	xchg   ecx,eax
     61b:	67 00 06 23 02       	add    BYTE PTR ds:0x223,al
     620:	00 00                	add    BYTE PTR [eax],al
     622:	01 15 c3 02 00 9f    	add    DWORD PTR ds:0x9f0002c3,edx
     628:	bb 00 00 00 01       	mov    ebx,0x1000000
     62d:	9c                   	pushf  
     62e:	31 01                	xor    DWORD PTR [ecx],eax
     630:	00 00                	add    BYTE PTR [eax],al
     632:	07                   	pop    es
     633:	6e                   	outs   dx,BYTE PTR ds:[esi]
     634:	00 01                	add    BYTE PTR [ecx],al
     636:	15 3a 00 00 00       	adc    eax,0x3a
     63b:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     641:	01 15 9d 00 00 00    	add    DWORD PTR ds:0x9d,edx
     647:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     64d:	01 17                	add    DWORD PTR [edi],edx
     64f:	3a 00                	cmp    al,BYTE PTR [eax]
     651:	00 00                	add    BYTE PTR [eax],al
     653:	02 91 6c 09 31 02    	add    dl,BYTE PTR [ecx+0x231096c]
     659:	00 00                	add    BYTE PTR [eax],al
     65b:	01 17                	add    DWORD PTR [edi],edx
     65d:	3a 00                	cmp    al,BYTE PTR [eax]
     65f:	00 00                	add    BYTE PTR [eax],al
     661:	02 91 68 00 06 1d    	add    dl,BYTE PTR [ecx+0x1d060068]
     667:	02 00                	add    al,BYTE PTR [eax]
     669:	00 01                	add    BYTE PTR [ecx],al
     66b:	25 7e 03 00 9f       	and    eax,0x9f00037e
     670:	bb 00 00 00 01       	mov    ebx,0x1000000
     675:	9c                   	pushf  
     676:	79 01                	jns    679 <sysEnter_Vector-0x12f987>
     678:	00 00                	add    BYTE PTR [eax],al
     67a:	07                   	pop    es
     67b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     67c:	00 01                	add    BYTE PTR [ecx],al
     67e:	25 3a 00 00 00       	and    eax,0x3a
     683:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     689:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     68f:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     695:	01 27                	add    DWORD PTR [edi],esp
     697:	3a 00                	cmp    al,BYTE PTR [eax]
     699:	00 00                	add    BYTE PTR [eax],al
     69b:	02 91 6c 09 31 02    	add    dl,BYTE PTR [ecx+0x231096c]
     6a1:	00 00                	add    BYTE PTR [eax],al
     6a3:	01 27                	add    DWORD PTR [edi],esp
     6a5:	3a 00                	cmp    al,BYTE PTR [eax]
     6a7:	00 00                	add    BYTE PTR [eax],al
     6a9:	02 91 68 00 0a d9    	add    dl,BYTE PTR [ecx-0x26f5ff98]
     6af:	0b 00                	or     eax,DWORD PTR [eax]
     6b1:	00 01                	add    BYTE PTR [ecx],al
     6b3:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     6b6:	00 00                	add    BYTE PTR [eax],al
     6b8:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
     6bb:	9f                   	lahf   
     6bc:	5c                   	pop    esp
     6bd:	00 00                	add    BYTE PTR [eax],al
     6bf:	00 01                	add    BYTE PTR [ecx],al
     6c1:	9c                   	pushf  
     6c2:	c5 01                	lds    eax,FWORD PTR [ecx]
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	07                   	pop    es
     6c7:	73 74                	jae    73d <sysEnter_Vector-0x12f8c3>
     6c9:	72 00                	jb     6cb <sysEnter_Vector-0x12f935>
     6cb:	01 36                	add    DWORD PTR [esi],esi
     6cd:	9d                   	popf   
     6ce:	00 00                	add    BYTE PTR [eax],al
     6d0:	00 02                	add    BYTE PTR [edx],al
     6d2:	91                   	xchg   ecx,eax
     6d3:	00 08                	add    BYTE PTR [eax],cl
     6d5:	72 65                	jb     73c <sysEnter_Vector-0x12f8c4>
     6d7:	73 00                	jae    6d9 <sysEnter_Vector-0x12f927>
     6d9:	01 38                	add    DWORD PTR [eax],edi
     6db:	3a 00                	cmp    al,BYTE PTR [eax]
     6dd:	00 00                	add    BYTE PTR [eax],al
     6df:	02 91 74 0b 50 04    	add    dl,BYTE PTR [ecx+0x4500b74]
     6e5:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     6eb:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     6ee:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     6f1:	00 00                	add    BYTE PTR [eax],al
     6f3:	00 02                	add    BYTE PTR [edx],al
     6f5:	91                   	xchg   ecx,eax
     6f6:	70 00                	jo     6f8 <sysEnter_Vector-0x12f908>
     6f8:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	00 03                	add    BYTE PTR [ebx],al
     6ff:	37                   	aaa    
     700:	56                   	push   esi
     701:	00 00                	add    BYTE PTR [eax],al
     703:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
     709:	9f                   	lahf   
     70a:	0c 34                	or     al,0x34
     70c:	01 00                	add    DWORD PTR [eax],eax
     70e:	00 03                	add    BYTE PTR [ebx],al
     710:	38 56 00             	cmp    BYTE PTR [esi+0x0],dl
     713:	00 00                	add    BYTE PTR [eax],al
     715:	05 03 d0 71 00       	add    eax,0x71d003
     71a:	9f                   	lahf   
     71b:	0c 7b                	or     al,0x7b
     71d:	00 00                	add    BYTE PTR [eax],al
     71f:	00 03                	add    BYTE PTR [ebx],al
     721:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
     724:	00 00                	add    BYTE PTR [eax],al
     726:	05 03 c8 71 00       	add    eax,0x71c803
     72b:	9f                   	lahf   
     72c:	0c 7c                	or     al,0x7c
     72e:	01 00                	add    DWORD PTR [eax],eax
     730:	00 03                	add    BYTE PTR [ebx],al
     732:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     735:	00 00                	add    BYTE PTR [eax],al
     737:	05 03 d8 71 00       	add    eax,0x71d803
     73c:	9f                   	lahf   
     73d:	0c 6e                	or     al,0x6e
     73f:	00 00                	add    BYTE PTR [eax],al
     741:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     744:	1a 02                	sbb    al,BYTE PTR [edx]
     746:	00 00                	add    BYTE PTR [eax],al
     748:	05 03 c4 71 00       	add    eax,0x71c403
     74d:	9f                   	lahf   
     74e:	05 04 6f 00 00       	add    eax,0x6f04
     753:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
     756:	00 00                	add    BYTE PTR [eax],al
     758:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     75f:	05 03 c0 71 00       	add    eax,0x71c003
     764:	9f                   	lahf   
     765:	0c 41                	or     al,0x41
     767:	00 00                	add    BYTE PTR [eax],al
     769:	00 05 58 42 02 00    	add    BYTE PTR ds:0x24258,al
     76f:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
     775:	9f                   	lahf   
     776:	05 04 9d 00 00       	add    eax,0x9d04
     77b:	00 00                	add    BYTE PTR [eax],al
     77d:	f9                   	stc    
     77e:	01 00                	add    DWORD PTR [eax],eax
     780:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     783:	74 02                	je     787 <sysEnter_Vector-0x12f879>
     785:	00 00                	add    BYTE PTR [eax],al
     787:	04 01                	add    al,0x1
     789:	ac                   	lods   al,BYTE PTR ds:[esi]
     78a:	00 00                	add    BYTE PTR [eax],al
     78c:	00 0c 36             	add    BYTE PTR [esi+esi*1],cl
     78f:	02 00                	add    al,BYTE PTR [eax]
     791:	00 1e                	add    BYTE PTR [esi],bl
     793:	00 00                	add    BYTE PTR [eax],al
     795:	00 98 04 00 9f 6e    	add    BYTE PTR [eax+0x6e9f0004],bl
     79b:	01 00                	add    DWORD PTR [eax],eax
     79d:	00 ff                	add    bh,bh
     79f:	03 00                	add    eax,DWORD PTR [eax]
     7a1:	00 02                	add    BYTE PTR [edx],al
     7a3:	01 06                	add    DWORD PTR [esi],eax
     7a5:	85 00                	test   DWORD PTR [eax],eax
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	02 02                	add    al,BYTE PTR [edx]
     7ab:	05 72 01 00 00       	add    eax,0x172
     7b0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     7b7:	02 08                	add    cl,BYTE PTR [eax]
     7b9:	05 00 00 00 00       	add    eax,0x0
     7be:	02 01                	add    al,BYTE PTR [ecx]
     7c0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     7c6:	02 07                	add    al,BYTE PTR [edi]
     7c8:	19 01                	sbb    DWORD PTR [ecx],eax
     7ca:	00 00                	add    BYTE PTR [eax],al
     7cc:	04 0e                	add    al,0xe
     7ce:	00 00                	add    BYTE PTR [eax],al
     7d0:	00 02                	add    BYTE PTR [edx],al
     7d2:	34 5a                	xor    al,0x5a
     7d4:	00 00                	add    BYTE PTR [eax],al
     7d6:	00 02                	add    BYTE PTR [edx],al
     7d8:	04 07                	add    al,0x7
     7da:	61                   	popa   
     7db:	00 00                	add    BYTE PTR [eax],al
     7dd:	00 02                	add    BYTE PTR [edx],al
     7df:	08 07                	or     BYTE PTR [edi],al
     7e1:	57                   	push   edi
     7e2:	00 00                	add    BYTE PTR [eax],al
     7e4:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     7eb:	56                   	push   esi
     7ec:	5a                   	pop    edx
     7ed:	00 00                	add    BYTE PTR [eax],al
     7ef:	00 02                	add    BYTE PTR [edx],al
     7f1:	04 05                	add    al,0x5
     7f3:	05 00 00 00 02       	add    eax,0x2000000
     7f8:	0c 04                	or     al,0x4
     7fa:	66 01 00             	add    WORD PTR [eax],ax
     7fd:	00 02                	add    BYTE PTR [edx],al
     7ff:	04 07                	add    al,0x7
     801:	83 01 00             	add    DWORD PTR [ecx],0x0
     804:	00 02                	add    BYTE PTR [edx],al
     806:	01 06                	add    DWORD PTR [esi],eax
     808:	8c 00                	mov    WORD PTR [eax],es
     80a:	00 00                	add    BYTE PTR [eax],al
     80c:	02 01                	add    al,BYTE PTR [ecx]
     80e:	02 13                	add    dl,BYTE PTR [ebx]
     810:	01 00                	add    DWORD PTR [eax],eax
     812:	00 02                	add    BYTE PTR [edx],al
     814:	04 07                	add    al,0x7
     816:	5c                   	pop    esp
     817:	00 00                	add    BYTE PTR [eax],al
     819:	00 05 04 88 00 00    	add    BYTE PTR ds:0x8804,al
     81f:	00 06                	add    BYTE PTR [esi],al
     821:	44                   	inc    esp
     822:	02 00                	add    al,BYTE PTR [eax]
     824:	00 01                	add    BYTE PTR [ecx],al
     826:	0d 98 04 00 9f       	or     eax,0x9f000498
     82b:	ba 00 00 00 01       	mov    edx,0x1000000
     830:	9c                   	pushf  
     831:	fb                   	sti    
     832:	00 00                	add    BYTE PTR [eax],al
     834:	00 07                	add    BYTE PTR [edi],al
     836:	78 00                	js     838 <sysEnter_Vector-0x12f7c8>
     838:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     83e:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     844:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     84a:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     850:	64 00 01             	add    BYTE PTR fs:[ecx],al
     853:	0f fb 00             	psubq  mm0,QWORD PTR [eax]
     856:	00 00                	add    BYTE PTR [eax],al
     858:	02 91 66 09 76 02    	add    dl,BYTE PTR [ecx+0x2760966]
     85e:	00 00                	add    BYTE PTR [eax],al
     860:	01 10                	add    DWORD PTR [eax],edx
     862:	0b 01                	or     eax,DWORD PTR [ecx]
     864:	00 00                	add    BYTE PTR [eax],al
     866:	02 91 63 09 86 02    	add    dl,BYTE PTR [ecx+0x2860963]
     86c:	00 00                	add    BYTE PTR [eax],al
     86e:	01 10                	add    DWORD PTR [eax],edx
     870:	0b 01                	or     eax,DWORD PTR [ecx]
     872:	00 00                	add    BYTE PTR [eax],al
     874:	02 91 60 00 0a 88    	add    dl,BYTE PTR [ecx-0x77f5ffa0]
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	00 0b                	add    BYTE PTR [ebx],cl
     87e:	01 00                	add    DWORD PTR [eax],eax
     880:	00 0b                	add    BYTE PTR [ebx],cl
     882:	81 00 00 00 09 00    	add    DWORD PTR [eax],0x90000
     888:	0a 88 00 00 00 1b    	or     cl,BYTE PTR [eax+0x1b000000]
     88e:	01 00                	add    DWORD PTR [eax],eax
     890:	00 0b                	add    BYTE PTR [ebx],cl
     892:	81 00 00 00 02 00    	add    DWORD PTR [eax],0x20000
     898:	0c 4d                	or     al,0x4d
     89a:	02 00                	add    al,BYTE PTR [eax]
     89c:	00 01                	add    BYTE PTR [ecx],al
     89e:	1d 52 05 00 9f       	sbb    eax,0x9f000552
     8a3:	5a                   	pop    edx
     8a4:	00 00                	add    BYTE PTR [eax],al
     8a6:	00 01                	add    BYTE PTR [ecx],al
     8a8:	9c                   	pushf  
     8a9:	3f                   	aas    
     8aa:	01 00                	add    DWORD PTR [eax],eax
     8ac:	00 08                	add    BYTE PTR [eax],cl
     8ae:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     8b1:	00 01                	add    BYTE PTR [ecx],al
     8b3:	1f                   	pop    ds
     8b4:	fb                   	sti    
     8b5:	00 00                	add    BYTE PTR [eax],al
     8b7:	00 02                	add    BYTE PTR [edx],al
     8b9:	91                   	xchg   ecx,eax
     8ba:	66                   	data16
     8bb:	00 0c 60             	add    BYTE PTR [eax+eiz*2],cl
     8be:	02 00                	add    al,BYTE PTR [eax]
     8c0:	00 01                	add    BYTE PTR [ecx],al
     8c2:	27                   	daa    
     8c3:	ac                   	lods   al,BYTE PTR ds:[esi]
     8c4:	05 00 9f 5a 00       	add    eax,0x5a9f00
     8c9:	00 00                	add    BYTE PTR [eax],al
     8cb:	01 9c 63 01 00 00 08 	add    DWORD PTR [ebx+eiz*2+0x8000001],ebx
     8d2:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     8d5:	00 01                	add    BYTE PTR [ecx],al
     8d7:	29 fb                	sub    ebx,edi
     8d9:	00 00                	add    BYTE PTR [eax],al
     8db:	00 02                	add    BYTE PTR [edx],al
     8dd:	91                   	xchg   ecx,eax
     8de:	66                   	data16
     8df:	00 0d 6e 00 00 00    	add    BYTE PTR ds:0x6e,cl
     8e5:	03 34 74             	add    esi,DWORD PTR [esp+esi*2]
     8e8:	01 00                	add    DWORD PTR [eax],eax
     8ea:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
     8f0:	9f                   	lahf   
     8f1:	05 04 68 00 00       	add    eax,0x6804
     8f6:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
     8fc:	03 35 4f 00 00 00    	add    esi,DWORD PTR ds:0x4f
     902:	05 03 c0 71 00       	add    eax,0x71c003
     907:	9f                   	lahf   
     908:	0d a3 00 00 00       	or     eax,0xa3
     90d:	04 37                	add    al,0x37
     90f:	4f                   	dec    edi
     910:	00 00                	add    BYTE PTR [eax],al
     912:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
     918:	9f                   	lahf   
     919:	0d 34 01 00 00       	or     eax,0x134
     91e:	04 38                	add    al,0x38
     920:	4f                   	dec    edi
     921:	00 00                	add    BYTE PTR [eax],al
     923:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
     929:	9f                   	lahf   
     92a:	0d 7b 00 00 00       	or     eax,0x7b
     92f:	04 39                	add    al,0x39
     931:	4f                   	dec    edi
     932:	00 00                	add    BYTE PTR [eax],al
     934:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
     93a:	9f                   	lahf   
     93b:	0d 7c 01 00 00       	or     eax,0x17c
     940:	04 3a                	add    al,0x3a
     942:	73 00                	jae    944 <sysEnter_Vector-0x12f6bc>
     944:	00 00                	add    BYTE PTR [eax],al
     946:	05 03 d8 71 00       	add    eax,0x71d803
     94b:	9f                   	lahf   
     94c:	0d 41 00 00 00       	or     eax,0x41
     951:	05 58 e0 01 00       	add    eax,0x1e058
     956:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
     95c:	9f                   	lahf   
     95d:	05 04 9d 00 00       	add    eax,0x9d04
     962:	00 0d 7b 02 00 00    	add    BYTE PTR ds:0x27b,cl
     968:	01 0b                	add    DWORD PTR [ebx],ecx
     96a:	f7 01 00 00 05 03    	test   DWORD PTR [ecx],0x3050000
     970:	20 69 00             	and    BYTE PTR [ecx+0x0],ch
     973:	9f                   	lahf   
     974:	0e                   	push   cs
     975:	0b 01                	or     eax,DWORD PTR [ecx]
     977:	00 00                	add    BYTE PTR [eax],al
     979:	00 86 03 00 00 04    	add    BYTE PTR [esi+0x4000003],al
     97f:	00 3d 03 00 00 04    	add    BYTE PTR ds:0x4000003,bh
     985:	01 ac 00 00 00 0c c4 	add    DWORD PTR [eax+eax*1-0x3bf40000],ebp
     98c:	02 00                	add    al,BYTE PTR [eax]
     98e:	00 1e                	add    BYTE PTR [esi],bl
     990:	00 00                	add    BYTE PTR [eax],al
     992:	00 08                	add    BYTE PTR [eax],cl
     994:	06                   	push   es
     995:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
     99b:	db 04 00             	fild   DWORD PTR [eax+eax*1]
     99e:	00 02                	add    BYTE PTR [edx],al
     9a0:	01 06                	add    DWORD PTR [esi],eax
     9a2:	8c 00                	mov    WORD PTR [eax],es
     9a4:	00 00                	add    BYTE PTR [eax],al
     9a6:	02 01                	add    al,BYTE PTR [ecx]
     9a8:	06                   	push   es
     9a9:	85 00                	test   DWORD PTR [eax],eax
     9ab:	00 00                	add    BYTE PTR [eax],al
     9ad:	02 02                	add    al,BYTE PTR [edx]
     9af:	05 72 01 00 00       	add    eax,0x172
     9b4:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     9bb:	02 08                	add    cl,BYTE PTR [eax]
     9bd:	05 00 00 00 00       	add    eax,0x0
     9c2:	02 01                	add    al,BYTE PTR [ecx]
     9c4:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     9ca:	02 07                	add    al,BYTE PTR [edi]
     9cc:	19 01                	sbb    DWORD PTR [ecx],eax
     9ce:	00 00                	add    BYTE PTR [eax],al
     9d0:	04 0e                	add    al,0xe
     9d2:	00 00                	add    BYTE PTR [eax],al
     9d4:	00 02                	add    BYTE PTR [edx],al
     9d6:	34 61                	xor    al,0x61
     9d8:	00 00                	add    BYTE PTR [eax],al
     9da:	00 02                	add    BYTE PTR [edx],al
     9dc:	04 07                	add    al,0x7
     9de:	61                   	popa   
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	00 02                	add    BYTE PTR [edx],al
     9e3:	08 07                	or     BYTE PTR [edi],al
     9e5:	57                   	push   edi
     9e6:	00 00                	add    BYTE PTR [eax],al
     9e8:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     9ef:	56                   	push   esi
     9f0:	61                   	popa   
     9f1:	00 00                	add    BYTE PTR [eax],al
     9f3:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
     9fa:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
     9fd:	00 00                	add    BYTE PTR [eax],al
     9ff:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     a06:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     a09:	66 01 00             	add    WORD PTR [eax],ax
     a0c:	00 02                	add    BYTE PTR [edx],al
     a0e:	01 02                	add    DWORD PTR [edx],eax
     a10:	13 01                	adc    eax,DWORD PTR [ecx]
     a12:	00 00                	add    BYTE PTR [eax],al
     a14:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     a17:	83 01 00             	add    DWORD PTR [ecx],0x0
     a1a:	00 05 d1 03 00 00    	add    BYTE PTR ds:0x3d1,al
     a20:	04 61                	add    al,0x61
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	00 07                	add    BYTE PTR [edi],al
     a26:	15 95 01 00 00       	adc    eax,0x195
     a2b:	06                   	push   es
     a2c:	71 03                	jno    a31 <sysEnter_Vector-0x12f5cf>
     a2e:	00 00                	add    BYTE PTR [eax],al
     a30:	00 06                	add    BYTE PTR [esi],al
     a32:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
     a35:	00 01                	add    BYTE PTR [ecx],al
     a37:	06                   	push   es
     a38:	d6                   	(bad)  
     a39:	02 00                	add    al,BYTE PTR [eax]
     a3b:	00 02                	add    BYTE PTR [edx],al
     a3d:	06                   	push   es
     a3e:	cf                   	iret   
     a3f:	04 00                	add    al,0x0
     a41:	00 03                	add    BYTE PTR [ebx],al
     a43:	06                   	push   es
     a44:	08 03                	or     BYTE PTR [ebx],al
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	04 06                	add    al,0x6
     a4a:	f3 02 00             	repz add al,BYTE PTR [eax]
     a4d:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
     a53:	00 0a                	add    BYTE PTR [edx],cl
     a55:	06                   	push   es
     a56:	45                   	inc    ebp
     a57:	04 00                	add    al,0x0
     a59:	00 0b                	add    BYTE PTR [ebx],cl
     a5b:	06                   	push   es
     a5c:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
     a62:	b4 04                	mov    ah,0x4
     a64:	00 00                	add    BYTE PTR [eax],al
     a66:	0d 06 52 04 00       	or     eax,0x45206
     a6b:	00 0e                	add    BYTE PTR [esi],cl
     a6d:	06                   	push   es
     a6e:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     a6f:	04 00                	add    al,0x0
     a71:	00 0f                	add    BYTE PTR [edi],cl
     a73:	06                   	push   es
     a74:	3f                   	aas    
     a75:	03 00                	add    eax,DWORD PTR [eax]
     a77:	00 10                	add    BYTE PTR [eax],dl
     a79:	06                   	push   es
     a7a:	5f                   	pop    edi
     a7b:	04 00                	add    al,0x0
     a7d:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     a80:	f1                   	icebp  
     a81:	03 00                	add    eax,DWORD PTR [eax]
     a83:	00 50 06             	add    BYTE PTR [eax+0x6],dl
     a86:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
     a89:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     a8c:	8b 02                	mov    eax,DWORD PTR [edx]
     a8e:	00 00                	add    BYTE PTR [eax],al
     a90:	61                   	popa   
     a91:	06                   	push   es
     a92:	0e                   	push   cs
     a93:	04 00                	add    al,0x0
     a95:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
     a9b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     a9e:	07                   	pop    es
     a9f:	7d 04                	jge    aa5 <sysEnter_Vector-0x12f55b>
     aa1:	00 00                	add    BYTE PTR [eax],al
     aa3:	64 01 07             	add    DWORD PTR fs:[edi],eax
     aa6:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
     aa9:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     aac:	07                   	pop    es
     aad:	af                   	scas   eax,DWORD PTR es:[edi]
     aae:	02 00                	add    al,BYTE PTR [eax]
     ab0:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     ab3:	07                   	pop    es
     ab4:	2a 03                	sub    al,BYTE PTR [ebx]
     ab6:	00 00                	add    BYTE PTR [eax],al
     ab8:	67 01 07             	add    DWORD PTR [bx],eax
     abb:	1d 03 00 00 68       	sbb    eax,0x68000003
     ac0:	01 07                	add    DWORD PTR [edi],eax
     ac2:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
     ac9:	9e                   	sahf   
     aca:	02 00                	add    al,BYTE PTR [eax]
     acc:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     acf:	07                   	pop    es
     ad0:	e3 02                	jecxz  ad4 <sysEnter_Vector-0x12f52c>
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	71 01                	jno    ad7 <sysEnter_Vector-0x12f529>
     ad6:	07                   	pop    es
     ad7:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
     adb:	00 03                	add    BYTE PTR [ebx],al
     add:	07                   	pop    es
     ade:	6e                   	outs   dx,BYTE PTR ds:[esi]
     adf:	04 00                	add    al,0x0
     ae1:	00 01                	add    BYTE PTR [ecx],al
     ae3:	03 07                	add    eax,DWORD PTR [edi]
     ae5:	bd 03 00 00 02       	mov    ebp,0x2000003
     aea:	03 07                	add    eax,DWORD PTR [edi]
     aec:	96                   	xchg   esi,eax
     aed:	03 00                	add    eax,DWORD PTR [eax]
     aef:	00 03                	add    BYTE PTR [ebx],al
     af1:	03 07                	add    eax,DWORD PTR [edi]
     af3:	34 04                	xor    al,0x4
     af5:	00 00                	add    BYTE PTR [eax],al
     af7:	04 03                	add    al,0x3
     af9:	07                   	pop    es
     afa:	97                   	xchg   edi,eax
     afb:	04 00                	add    al,0x0
     afd:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
     b03:	00 00                	add    BYTE PTR [eax],al
     b05:	06                   	push   es
     b06:	03 07                	add    eax,DWORD PTR [edi]
     b08:	52                   	push   edx
     b09:	03 00                	add    eax,DWORD PTR [eax]
     b0b:	00 00                	add    BYTE PTR [eax],al
     b0d:	09 00                	or     DWORD PTR [eax],eax
     b0f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     b12:	5c                   	pop    esp
     b13:	00 00                	add    BYTE PTR [eax],al
     b15:	00 08                	add    BYTE PTR [eax],cl
     b17:	04 25                	add    al,0x25
     b19:	00 00                	add    BYTE PTR [eax],al
     b1b:	00 09                	add    BYTE PTR [ecx],cl
     b1d:	15 03 00 00 01       	adc    eax,0x1000003
     b22:	09 3a                	or     DWORD PTR [edx],edi
     b24:	00 00                	add    BYTE PTR [eax],al
     b26:	00 08                	add    BYTE PTR [eax],cl
     b28:	06                   	push   es
     b29:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     b2f:	01 9c f0 01 00 00 0a 	add    DWORD PTR [eax+esi*8+0xa000001],ebx
     b36:	8e 03                	mov    es,WORD PTR [ebx]
     b38:	00 00                	add    BYTE PTR [eax],al
     b3a:	01 09                	add    DWORD PTR [ecx],ecx
     b3c:	9c                   	pushf  
     b3d:	01 00                	add    DWORD PTR [eax],eax
     b3f:	00 02                	add    BYTE PTR [edx],al
     b41:	91                   	xchg   ecx,eax
     b42:	00 0a                	add    BYTE PTR [edx],cl
     b44:	4c                   	dec    esp
     b45:	03 00                	add    eax,DWORD PTR [eax]
     b47:	00 01                	add    BYTE PTR [ecx],al
     b49:	09 9c 01 00 00 02 91 	or     DWORD PTR [ecx+eax*1-0x6efe0000],ebx
     b50:	04 0b                	add    al,0xb
     b52:	1a 06                	sbb    al,BYTE PTR [esi]
     b54:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
     b5a:	0c 63                	or     al,0x63
     b5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b5d:	74 00                	je     b5f <sysEnter_Vector-0x12f4a1>
     b5f:	01 0b                	add    DWORD PTR [ebx],ecx
     b61:	3a 00                	cmp    al,BYTE PTR [eax]
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	02 91 6c 00 00 09    	add    dl,BYTE PTR [ecx+0x900006c]
     b6b:	db 03                	fild   DWORD PTR [ebx]
     b6d:	00 00                	add    BYTE PTR [eax],al
     b6f:	01 14 3a             	add    DWORD PTR [edx+edi*1],edx
     b72:	00 00                	add    BYTE PTR [eax],al
     b74:	00 b2 06 00 9f 23    	add    BYTE PTR [edx+0x239f0006],dh
     b7a:	00 00                	add    BYTE PTR [eax],al
     b7c:	00 01                	add    BYTE PTR [ecx],al
     b7e:	9c                   	pushf  
     b7f:	26 02 00             	add    al,BYTE PTR es:[eax]
     b82:	00 0a                	add    BYTE PTR [edx],cl
     b84:	8e 03                	mov    es,WORD PTR [ebx]
     b86:	00 00                	add    BYTE PTR [eax],al
     b88:	01 14 9c             	add    DWORD PTR [esp+ebx*4],edx
     b8b:	01 00                	add    DWORD PTR [eax],eax
     b8d:	00 02                	add    BYTE PTR [edx],al
     b8f:	91                   	xchg   ecx,eax
     b90:	00 0a                	add    BYTE PTR [edx],cl
     b92:	4c                   	dec    esp
     b93:	03 00                	add    eax,DWORD PTR [eax]
     b95:	00 01                	add    BYTE PTR [ecx],al
     b97:	14 9c                	adc    al,0x9c
     b99:	01 00                	add    DWORD PTR [eax],eax
     b9b:	00 02                	add    BYTE PTR [edx],al
     b9d:	91                   	xchg   ecx,eax
     b9e:	04 00                	add    al,0x0
     ba0:	0d 01 03 00 00       	or     eax,0x301
     ba5:	01 19                	add    DWORD PTR [ecx],ebx
     ba7:	d5 06                	aad    0x6
     ba9:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     baf:	01 9c 9a 02 00 00 0a 	add    DWORD PTR [edx+ebx*4+0xa000002],ebx
     bb6:	8e 03                	mov    es,WORD PTR [ebx]
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	01 19                	add    DWORD PTR [ecx],ebx
     bbc:	9c                   	pushf  
     bbd:	01 00                	add    DWORD PTR [eax],eax
     bbf:	00 02                	add    BYTE PTR [edx],al
     bc1:	91                   	xchg   ecx,eax
     bc2:	00 0a                	add    BYTE PTR [edx],cl
     bc4:	4c                   	dec    esp
     bc5:	03 00                	add    eax,DWORD PTR [eax]
     bc7:	00 01                	add    BYTE PTR [ecx],al
     bc9:	19 9c 01 00 00 02 91 	sbb    DWORD PTR [ecx+eax*1-0x6efe0000],ebx
     bd0:	04 0e                	add    al,0xe
     bd2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     bd5:	00 01                	add    BYTE PTR [ecx],al
     bd7:	1b 56 00             	sbb    edx,DWORD PTR [esi+0x0]
     bda:	00 00                	add    BYTE PTR [eax],al
     bdc:	02 91 6c 0f ee 06    	add    dl,BYTE PTR [ecx+0x6ee0f6c]
     be2:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     be8:	81 02 00 00 0c 63    	add    DWORD PTR [edx],0x630c0000
     bee:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bef:	74 00                	je     bf1 <sysEnter_Vector-0x12f40f>
     bf1:	01 1d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebx
     bf7:	02 91 68 00 0b d9    	add    dl,BYTE PTR [ecx-0x26f4ff98]
     bfd:	07                   	pop    es
     bfe:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     c04:	0c 63                	or     al,0x63
     c06:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c07:	74 00                	je     c09 <sysEnter_Vector-0x12f3f7>
     c09:	01 29                	add    DWORD PTR [ecx],ebp
     c0b:	3a 00                	cmp    al,BYTE PTR [eax]
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	02 91 64 00 00 09    	add    dl,BYTE PTR [ecx+0x9000064]
     c15:	c9                   	leave  
     c16:	03 00                	add    eax,DWORD PTR [eax]
     c18:	00 01                	add    BYTE PTR [ecx],al
     c1a:	36                   	ss
     c1b:	9c                   	pushf  
     c1c:	01 00                	add    DWORD PTR [eax],eax
     c1e:	00 96 08 00 9f 2c    	add    BYTE PTR [esi+0x2c9f0008],dl
     c24:	00 00                	add    BYTE PTR [eax],al
     c26:	00 01                	add    BYTE PTR [ecx],al
     c28:	9c                   	pushf  
     c29:	d0 02                	rol    BYTE PTR [edx],1
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	10 62 75             	adc    BYTE PTR [edx+0x75],ah
     c30:	66                   	data16
     c31:	00 01                	add    BYTE PTR [ecx],al
     c33:	36                   	ss
     c34:	9c                   	pushf  
     c35:	01 00                	add    DWORD PTR [eax],eax
     c37:	00 02                	add    BYTE PTR [edx],al
     c39:	91                   	xchg   ecx,eax
     c3a:	00 0a                	add    BYTE PTR [edx],cl
     c3c:	ba 06 00 00 01       	mov    edx,0x1000006
     c41:	36                   	ss
     c42:	7a 00                	jp     c44 <sysEnter_Vector-0x12f3bc>
     c44:	00 00                	add    BYTE PTR [eax],al
     c46:	02 91 04 00 09 f0    	add    dl,BYTE PTR [ecx-0xff6fffc]
     c4c:	04 00                	add    al,0x0
     c4e:	00 01                	add    BYTE PTR [ecx],al
     c50:	3c 9c                	cmp    al,0x9c
     c52:	01 00                	add    DWORD PTR [eax],eax
     c54:	00 c2                	add    dl,al
     c56:	08 00                	or     BYTE PTR [eax],al
     c58:	9f                   	lahf   
     c59:	23 00                	and    eax,DWORD PTR [eax]
     c5b:	00 00                	add    BYTE PTR [eax],al
     c5d:	01 9c 06 03 00 00 10 	add    DWORD PTR [esi+eax*1+0x10000003],ebx
     c64:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     c67:	00 01                	add    BYTE PTR [ecx],al
     c69:	3c 9c                	cmp    al,0x9c
     c6b:	01 00                	add    DWORD PTR [eax],eax
     c6d:	00 02                	add    BYTE PTR [edx],al
     c6f:	91                   	xchg   ecx,eax
     c70:	00 0a                	add    BYTE PTR [edx],cl
     c72:	ba 06 00 00 01       	mov    edx,0x1000006
     c77:	3c 7a                	cmp    al,0x7a
     c79:	00 00                	add    BYTE PTR [eax],al
     c7b:	00 02                	add    BYTE PTR [edx],al
     c7d:	91                   	xchg   ecx,eax
     c7e:	04 00                	add    al,0x0
     c80:	11 a3 00 00 00 04    	adc    DWORD PTR [ebx+0x4000000],esp
     c86:	37                   	aaa    
     c87:	56                   	push   esi
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
     c90:	9f                   	lahf   
     c91:	11 34 01             	adc    DWORD PTR [ecx+eax*1],esi
     c94:	00 00                	add    BYTE PTR [eax],al
     c96:	04 38                	add    al,0x38
     c98:	56                   	push   esi
     c99:	00 00                	add    BYTE PTR [eax],al
     c9b:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
     ca1:	9f                   	lahf   
     ca2:	11 7b 00             	adc    DWORD PTR [ebx+0x0],edi
     ca5:	00 00                	add    BYTE PTR [eax],al
     ca7:	04 39                	add    al,0x39
     ca9:	56                   	push   esi
     caa:	00 00                	add    BYTE PTR [eax],al
     cac:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
     cb2:	9f                   	lahf   
     cb3:	11 7c 01 00          	adc    DWORD PTR [ecx+eax*1+0x0],edi
     cb7:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
     cba:	85 00                	test   DWORD PTR [eax],eax
     cbc:	00 00                	add    BYTE PTR [eax],al
     cbe:	05 03 d8 71 00       	add    eax,0x71d803
     cc3:	9f                   	lahf   
     cc4:	11 6e 00             	adc    DWORD PTR [esi+0x0],ebp
     cc7:	00 00                	add    BYTE PTR [eax],al
     cc9:	05 34 5b 03 00       	add    eax,0x35b34
     cce:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
     cd4:	9f                   	lahf   
     cd5:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
     cd8:	00 00                	add    BYTE PTR [eax],al
     cda:	00 11                	add    BYTE PTR [ecx],dl
     cdc:	91                   	xchg   ecx,eax
     cdd:	00 00                	add    BYTE PTR [eax],al
     cdf:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
     ce5:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
     ceb:	9f                   	lahf   
     cec:	11 41 00             	adc    DWORD PTR [ecx+0x0],eax
     cef:	00 00                	add    BYTE PTR [eax],al
     cf1:	06                   	push   es
     cf2:	58                   	pop    eax
     cf3:	83 03 00             	add    DWORD PTR [ebx],0x0
     cf6:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
     cfc:	9f                   	lahf   
     cfd:	08 04 9c             	or     BYTE PTR [esp+ebx*4],al
     d00:	01 00                	add    DWORD PTR [eax],eax
     d02:	00 00                	add    BYTE PTR [eax],al
     d04:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     d05:	08 00                	or     BYTE PTR [eax],al
     d07:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     d0a:	37                   	aaa    
     d0b:	04 00                	add    al,0x0
     d0d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     d10:	ac                   	lods   al,BYTE PTR ds:[esi]
     d11:	00 00                	add    BYTE PTR [eax],al
     d13:	00 0c a4             	add    BYTE PTR [esp+eiz*4],cl
     d16:	06                   	push   es
     d17:	00 00                	add    BYTE PTR [eax],al
     d19:	1e                   	push   ds
     d1a:	00 00                	add    BYTE PTR [eax],al
     d1c:	00 e8                	add    al,ch
     d1e:	08 00                	or     BYTE PTR [eax],al
     d20:	9f                   	lahf   
     d21:	f2 07                	repnz pop es
     d23:	00 00                	add    BYTE PTR [eax],al
     d25:	43                   	inc    ebx
     d26:	06                   	push   es
     d27:	00 00                	add    BYTE PTR [eax],al
     d29:	02 01                	add    al,BYTE PTR [ecx]
     d2b:	06                   	push   es
     d2c:	8c 00                	mov    WORD PTR [eax],es
     d2e:	00 00                	add    BYTE PTR [eax],al
     d30:	02 01                	add    al,BYTE PTR [ecx]
     d32:	06                   	push   es
     d33:	85 00                	test   DWORD PTR [eax],eax
     d35:	00 00                	add    BYTE PTR [eax],al
     d37:	02 02                	add    al,BYTE PTR [edx]
     d39:	05 72 01 00 00       	add    eax,0x172
     d3e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     d45:	02 08                	add    cl,BYTE PTR [eax]
     d47:	05 00 00 00 00       	add    eax,0x0
     d4c:	04 af                	add    al,0xaf
     d4e:	06                   	push   es
     d4f:	00 00                	add    BYTE PTR [eax],al
     d51:	02 2e                	add    ch,BYTE PTR [esi]
     d53:	53                   	push   ebx
     d54:	00 00                	add    BYTE PTR [eax],al
     d56:	00 02                	add    BYTE PTR [edx],al
     d58:	01 08                	add    DWORD PTR [eax],ecx
     d5a:	83 00 00             	add    DWORD PTR [eax],0x0
     d5d:	00 04 9f             	add    BYTE PTR [edi+ebx*4],al
     d60:	05 00 00 02 31       	add    eax,0x31020000
     d65:	65 00 00             	add    BYTE PTR gs:[eax],al
     d68:	00 02                	add    BYTE PTR [edx],al
     d6a:	02 07                	add    al,BYTE PTR [edi]
     d6c:	19 01                	sbb    DWORD PTR [ecx],eax
     d6e:	00 00                	add    BYTE PTR [eax],al
     d70:	04 0e                	add    al,0xe
     d72:	00 00                	add    BYTE PTR [eax],al
     d74:	00 02                	add    BYTE PTR [edx],al
     d76:	34 77                	xor    al,0x77
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	00 02                	add    BYTE PTR [edx],al
     d7c:	04 07                	add    al,0x7
     d7e:	61                   	popa   
     d7f:	00 00                	add    BYTE PTR [eax],al
     d81:	00 02                	add    BYTE PTR [edx],al
     d83:	08 07                	or     BYTE PTR [edi],al
     d85:	57                   	push   edi
     d86:	00 00                	add    BYTE PTR [eax],al
     d88:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     d8f:	56                   	push   esi
     d90:	77 00                	ja     d92 <sysEnter_Vector-0x12f26e>
     d92:	00 00                	add    BYTE PTR [eax],al
     d94:	04 bd                	add    al,0xbd
     d96:	02 00                	add    al,BYTE PTR [eax]
     d98:	00 03                	add    BYTE PTR [ebx],al
     d9a:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     da6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     da9:	66 01 00             	add    WORD PTR [eax],ax
     dac:	00 05 04 af 00 00    	add    BYTE PTR ds:0xaf04,al
     db2:	00 06                	add    BYTE PTR [esi],al
     db4:	25 00 00 00 02       	and    eax,0x2000000
     db9:	01 02                	add    DWORD PTR [edx],eax
     dbb:	13 01                	adc    eax,DWORD PTR [ecx]
     dbd:	00 00                	add    BYTE PTR [eax],al
     dbf:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     dc2:	83 01 00             	add    DWORD PTR [ecx],0x0
     dc5:	00 07                	add    BYTE PTR [edi],al
     dc7:	6b 06 00             	imul   eax,DWORD PTR [esi],0x0
     dca:	00 17                	add    BYTE PTR [edi],dl
     dcc:	01 04 1e             	add    DWORD PTR [esi+ebx*1],eax
     dcf:	44                   	inc    esp
     dd0:	01 00                	add    DWORD PTR [eax],eax
     dd2:	00 08                	add    BYTE PTR [eax],cl
     dd4:	3a 06                	cmp    al,BYTE PTR [esi]
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	04 20                	add    al,0x20
     dda:	44                   	inc    esp
     ddb:	01 00                	add    DWORD PTR [eax],eax
     ddd:	00 00                	add    BYTE PTR [eax],al
     ddf:	09 64 06 00          	or     DWORD PTR [esi+eax*1+0x0],esp
     de3:	00 04 21             	add    BYTE PTR [ecx+eiz*1],al
     de6:	48                   	dec    eax
     de7:	00 00                	add    BYTE PTR [eax],al
     de9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     dec:	09 11                	or     DWORD PTR [ecx],edx
     dee:	06                   	push   es
     def:	00 00                	add    BYTE PTR [eax],al
     df1:	04 22                	add    al,0x22
     df3:	6c                   	ins    BYTE PTR es:[edi],dx
     df4:	00 00                	add    BYTE PTR [eax],al
     df6:	00 05 01 09 ba 06    	add    BYTE PTR ds:0x6ba0901,al
     dfc:	00 00                	add    BYTE PTR [eax],al
     dfe:	04 23                	add    al,0x23
     e00:	6c                   	ins    BYTE PTR es:[edi],dx
     e01:	00 00                	add    BYTE PTR [eax],al
     e03:	00 09                	add    BYTE PTR [ecx],cl
     e05:	01 09                	add    DWORD PTR [ecx],ecx
     e07:	19 06                	sbb    DWORD PTR [esi],eax
     e09:	00 00                	add    BYTE PTR [eax],al
     e0b:	04 24                	add    al,0x24
     e0d:	5a                   	pop    edx
     e0e:	00 00                	add    BYTE PTR [eax],al
     e10:	00 0d 01 09 47 05    	add    BYTE PTR ds:0x5470901,cl
     e16:	00 00                	add    BYTE PTR [eax],al
     e18:	04 25                	add    al,0x25
     e1a:	5a                   	pop    edx
     e1b:	00 00                	add    BYTE PTR [eax],al
     e1d:	00 0f                	add    BYTE PTR [edi],cl
     e1f:	01 09                	add    DWORD PTR [ecx],ecx
     e21:	a8 05                	test   al,0x5
     e23:	00 00                	add    BYTE PTR [eax],al
     e25:	04 26                	add    al,0x26
     e27:	5a                   	pop    edx
     e28:	00 00                	add    BYTE PTR [eax],al
     e2a:	00 11                	add    BYTE PTR [ecx],dl
     e2c:	01 09                	add    DWORD PTR [ecx],ecx
     e2e:	8a 05 00 00 04 27    	mov    al,BYTE PTR ds:0x27040000
     e34:	5a                   	pop    edx
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	00 13                	add    BYTE PTR [ebx],dl
     e39:	01 09                	add    DWORD PTR [ecx],ecx
     e3b:	3b 05 00 00 04 28    	cmp    eax,DWORD PTR ds:0x28040000
     e41:	5a                   	pop    edx
     e42:	00 00                	add    BYTE PTR [eax],al
     e44:	00 15 01 00 0a 25    	add    BYTE PTR ds:0x250a0001,dl
     e4a:	00 00                	add    BYTE PTR [eax],al
     e4c:	00 55 01             	add    BYTE PTR [ebp+0x1],dl
     e4f:	00 00                	add    BYTE PTR [eax],al
     e51:	0b bb 00 00 00 03    	or     edi,DWORD PTR [ebx+0x3000000]
     e57:	01 00                	add    DWORD PTR [eax],eax
     e59:	0c 25                	or     al,0x25
     e5b:	06                   	push   es
     e5c:	00 00                	add    BYTE PTR [eax],al
     e5e:	08 04 2b             	or     BYTE PTR [ebx+ebp*1],al
     e61:	7a 01                	jp     e64 <sysEnter_Vector-0x12f19c>
     e63:	00 00                	add    BYTE PTR [eax],al
     e65:	08 b7 06 00 00 04    	or     BYTE PTR [edi+0x4000006],dh
     e6b:	2d 6c 00 00 00       	sub    eax,0x6c
     e70:	00 08                	add    BYTE PTR [eax],cl
     e72:	bf 05 00 00 04       	mov    edi,0x4000005
     e77:	2e                   	cs
     e78:	6c                   	ins    BYTE PTR es:[edi],dx
     e79:	00 00                	add    BYTE PTR [eax],al
     e7b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     e7e:	04 53                	add    al,0x53
     e80:	06                   	push   es
     e81:	00 00                	add    BYTE PTR [eax],al
     e83:	04 31                	add    al,0x31
     e85:	c2 00 00             	ret    0x0
     e88:	00 04 0d 05 00 00 04 	add    BYTE PTR [ecx*1+0x4000005],al
     e8f:	32 55 01             	xor    dl,BYTE PTR [ebp+0x1]
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	0d d1 03 00 00       	or     eax,0x3d1
     e99:	04 77                	add    al,0x77
     e9b:	00 00                	add    BYTE PTR [eax],al
     e9d:	00 07                	add    BYTE PTR [edi],al
     e9f:	15 84 02 00 00       	adc    eax,0x284
     ea4:	0e                   	push   cs
     ea5:	71 03                	jno    eaa <sysEnter_Vector-0x12f156>
     ea7:	00 00                	add    BYTE PTR [eax],al
     ea9:	00 0e                	add    BYTE PTR [esi],cl
     eab:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
     eae:	00 01                	add    BYTE PTR [ecx],al
     eb0:	0e                   	push   cs
     eb1:	d6                   	(bad)  
     eb2:	02 00                	add    al,BYTE PTR [eax]
     eb4:	00 02                	add    BYTE PTR [edx],al
     eb6:	0e                   	push   cs
     eb7:	cf                   	iret   
     eb8:	04 00                	add    al,0x0
     eba:	00 03                	add    BYTE PTR [ebx],al
     ebc:	0e                   	push   cs
     ebd:	08 03                	or     BYTE PTR [ebx],al
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	04 0e                	add    al,0xe
     ec3:	f3 02 00             	repz add al,BYTE PTR [eax]
     ec6:	00 05 0e 64 03 00    	add    BYTE PTR ds:0x3640e,al
     ecc:	00 0a                	add    BYTE PTR [edx],cl
     ece:	0e                   	push   cs
     ecf:	45                   	inc    ebp
     ed0:	04 00                	add    al,0x0
     ed2:	00 0b                	add    BYTE PTR [ebx],cl
     ed4:	0e                   	push   cs
     ed5:	81 03 00 00 0c 0e    	add    DWORD PTR [ebx],0xe0c0000
     edb:	b4 04                	mov    ah,0x4
     edd:	00 00                	add    BYTE PTR [eax],al
     edf:	0d 0e 52 04 00       	or     eax,0x4520e
     ee4:	00 0e                	add    BYTE PTR [esi],cl
     ee6:	0e                   	push   cs
     ee7:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     ee8:	04 00                	add    al,0x0
     eea:	00 0f                	add    BYTE PTR [edi],cl
     eec:	0e                   	push   cs
     eed:	3f                   	aas    
     eee:	03 00                	add    eax,DWORD PTR [eax]
     ef0:	00 10                	add    BYTE PTR [eax],dl
     ef2:	0e                   	push   cs
     ef3:	5f                   	pop    edi
     ef4:	04 00                	add    al,0x0
     ef6:	00 4f 0e             	add    BYTE PTR [edi+0xe],cl
     ef9:	f1                   	icebp  
     efa:	03 00                	add    eax,DWORD PTR [eax]
     efc:	00 50 0e             	add    BYTE PTR [eax+0xe],dl
     eff:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
     f02:	00 59 0e             	add    BYTE PTR [ecx+0xe],bl
     f05:	8b 02                	mov    eax,DWORD PTR [edx]
     f07:	00 00                	add    BYTE PTR [eax],al
     f09:	61                   	popa   
     f0a:	0e                   	push   cs
     f0b:	0e                   	push   cs
     f0c:	04 00                	add    al,0x0
     f0e:	00 97 0f a6 03 00    	add    BYTE PTR [edi+0x3a60f],dl
     f14:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     f17:	0f 7d                	(bad)  
     f19:	04 00                	add    al,0x0
     f1b:	00 64 01 0f          	add    BYTE PTR [ecx+eax*1+0xf],ah
     f1f:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
     f22:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     f25:	0f af 02             	imul   eax,DWORD PTR [edx]
     f28:	00 00                	add    BYTE PTR [eax],al
     f2a:	66 01 0f             	add    WORD PTR [edi],cx
     f2d:	2a 03                	sub    al,BYTE PTR [ebx]
     f2f:	00 00                	add    BYTE PTR [eax],al
     f31:	67 01 0f             	add    DWORD PTR [bx],ecx
     f34:	1d 03 00 00 68       	sbb    eax,0x68000003
     f39:	01 0f                	add    DWORD PTR [edi],ecx
     f3b:	f7 04 00 00 69 01 0f 	test   DWORD PTR [eax+eax*1],0xf016900
     f42:	9e                   	sahf   
     f43:	02 00                	add    al,BYTE PTR [eax]
     f45:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     f48:	0f e3 02             	pavgw  mm0,QWORD PTR [edx]
     f4b:	00 00                	add    BYTE PTR [eax],al
     f4d:	71 01                	jno    f50 <sysEnter_Vector-0x12f0b0>
     f4f:	0f c1 04 00          	xadd   DWORD PTR [eax+eax*1],eax
     f53:	00 00                	add    BYTE PTR [eax],al
     f55:	03 0f                	add    ecx,DWORD PTR [edi]
     f57:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f58:	04 00                	add    al,0x0
     f5a:	00 01                	add    BYTE PTR [ecx],al
     f5c:	03 0f                	add    ecx,DWORD PTR [edi]
     f5e:	bd 03 00 00 02       	mov    ebp,0x2000003
     f63:	03 0f                	add    ecx,DWORD PTR [edi]
     f65:	96                   	xchg   esi,eax
     f66:	03 00                	add    eax,DWORD PTR [eax]
     f68:	00 03                	add    BYTE PTR [ebx],al
     f6a:	03 0f                	add    ecx,DWORD PTR [edi]
     f6c:	34 04                	xor    al,0x4
     f6e:	00 00                	add    BYTE PTR [eax],al
     f70:	04 03                	add    al,0x3
     f72:	0f 97 04 00          	seta   BYTE PTR [eax+eax*1]
     f76:	00 05 03 0f e2 03    	add    BYTE PTR ds:0x3e20f03,al
     f7c:	00 00                	add    BYTE PTR [eax],al
     f7e:	06                   	push   es
     f7f:	03 0f                	add    ecx,DWORD PTR [edi]
     f81:	52                   	push   edx
     f82:	03 00                	add    eax,DWORD PTR [eax]
     f84:	00 00                	add    BYTE PTR [eax],al
     f86:	09 00                	or     DWORD PTR [eax],eax
     f88:	10 04 02             	adc    BYTE PTR [edx+eax*1],al
     f8b:	04 07                	add    al,0x7
     f8d:	5c                   	pop    esp
     f8e:	00 00                	add    BYTE PTR [eax],al
     f90:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     f96:	00 11                	add    BYTE PTR [ecx],dl
     f98:	10 07                	adc    BYTE PTR [edi],al
     f9a:	00 00                	add    BYTE PTR [eax],al
     f9c:	01 0e                	add    DWORD PTR [esi],ecx
     f9e:	3a 00                	cmp    al,BYTE PTR [eax]
     fa0:	00 00                	add    BYTE PTR [eax],al
     fa2:	e8 08 00 9f 31       	call   319f0faf <sysEnter_Vector+0x318c0faf>
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	00 01                	add    BYTE PTR [ecx],al
     fab:	9c                   	pushf  
     fac:	d7                   	xlat   BYTE PTR ds:[ebx]
     fad:	02 00                	add    al,BYTE PTR [eax]
     faf:	00 12                	add    BYTE PTR [edx],dl
     fb1:	36                   	ss
     fb2:	05 00 00 01 0e       	add    eax,0xe010000
     fb7:	8d 02                	lea    eax,[edx]
     fb9:	00 00                	add    BYTE PTR [eax],al
     fbb:	02 91 00 12 32 06    	add    dl,BYTE PTR [ecx+0x6321200]
     fc1:	00 00                	add    BYTE PTR [eax],al
     fc3:	01 0e                	add    DWORD PTR [esi],ecx
     fc5:	d7                   	xlat   BYTE PTR ds:[ebx]
     fc6:	02 00                	add    al,BYTE PTR [eax]
     fc8:	00 02                	add    BYTE PTR [edx],al
     fca:	91                   	xchg   ecx,eax
     fcb:	04 12                	add    al,0x12
     fcd:	17                   	pop    ss
     fce:	07                   	pop    es
     fcf:	00 00                	add    BYTE PTR [eax],al
     fd1:	01 0e                	add    DWORD PTR [esi],ecx
     fd3:	3a 00                	cmp    al,BYTE PTR [eax]
     fd5:	00 00                	add    BYTE PTR [eax],al
     fd7:	02 91 08 00 05 04    	add    dl,BYTE PTR [ecx+0x4050008]
     fdd:	7a 01                	jp     fe0 <sysEnter_Vector-0x12f020>
     fdf:	00 00                	add    BYTE PTR [eax],al
     fe1:	11 ff                	adc    edi,edi
     fe3:	05 00 00 01 13       	add    eax,0x13010000
     fe8:	84 02                	test   BYTE PTR [edx],al
     fea:	00 00                	add    BYTE PTR [eax],al
     fec:	19 09                	sbb    DWORD PTR [ecx],ecx
     fee:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
     ff4:	01 9c 13 03 00 00 12 	add    DWORD PTR [ebx+edx*1+0x12000003],ebx
     ffb:	36                   	ss
     ffc:	05 00 00 01 13       	add    eax,0x13010000
    1001:	8d 02                	lea    eax,[edx]
    1003:	00 00                	add    BYTE PTR [eax],al
    1005:	02 91 00 12 86 06    	add    dl,BYTE PTR [ecx+0x6861200]
    100b:	00 00                	add    BYTE PTR [eax],al
    100d:	01 13                	add    DWORD PTR [ebx],edx
    100f:	a9 00 00 00 02       	test   eax,0x2000000
    1014:	91                   	xchg   ecx,eax
    1015:	04 00                	add    al,0x0
    1017:	13 f5                	adc    esi,ebp
    1019:	06                   	push   es
    101a:	00 00                	add    BYTE PTR [eax],al
    101c:	01 19                	add    DWORD PTR [ecx],ebx
    101e:	45                   	inc    ebp
    101f:	09 00                	or     DWORD PTR [eax],eax
    1021:	9f                   	lahf   
    1022:	59                   	pop    ecx
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	00 01                	add    BYTE PTR [ecx],al
    1027:	9c                   	pushf  
    1028:	11 fc                	adc    esp,edi
    102a:	05 00 00 01 20       	add    eax,0x20010000
    102f:	84 02                	test   BYTE PTR [edx],al
    1031:	00 00                	add    BYTE PTR [eax],al
    1033:	9e                   	sahf   
    1034:	09 00                	or     DWORD PTR [eax],eax
    1036:	9f                   	lahf   
    1037:	93                   	xchg   ebx,eax
    1038:	00 00                	add    BYTE PTR [eax],al
    103a:	00 01                	add    BYTE PTR [ecx],al
    103c:	9c                   	pushf  
    103d:	76 03                	jbe    1042 <sysEnter_Vector-0x12efbe>
    103f:	00 00                	add    BYTE PTR [eax],al
    1041:	12 36                	adc    dh,BYTE PTR [esi]
    1043:	05 00 00 01 20       	add    eax,0x20010000
    1048:	8d 02                	lea    eax,[edx]
    104a:	00 00                	add    BYTE PTR [eax],al
    104c:	02 91 00 12 86 06    	add    dl,BYTE PTR [ecx+0x6861200]
    1052:	00 00                	add    BYTE PTR [eax],al
    1054:	01 20                	add    DWORD PTR [eax],esp
    1056:	a9 00 00 00 02       	test   eax,0x2000000
    105b:	91                   	xchg   ecx,eax
    105c:	04 12                	add    al,0x12
    105e:	2f                   	das    
    105f:	05 00 00 01 20       	add    eax,0x20010000
    1064:	84 02                	test   BYTE PTR [edx],al
    1066:	00 00                	add    BYTE PTR [eax],al
    1068:	02 91 08 14 06 05    	add    dl,BYTE PTR [ecx+0x5061408]
    106e:	00 00                	add    BYTE PTR [eax],al
    1070:	01 22                	add    DWORD PTR [edx],esp
    1072:	84 02                	test   BYTE PTR [edx],al
    1074:	00 00                	add    BYTE PTR [eax],al
    1076:	02 91 6c 00 15 15    	add    dl,BYTE PTR [ecx+0x1515006c]
    107c:	05 00 00 01 2e       	add    eax,0x2e010000
    1081:	31 0a                	xor    DWORD PTR [edx],ecx
    1083:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
    1089:	01 9c 9a 03 00 00 12 	add    DWORD PTR [edx+ebx*4+0x12000003],ebx
    1090:	cf                   	iret   
    1091:	06                   	push   es
    1092:	00 00                	add    BYTE PTR [eax],al
    1094:	01 2e                	add    DWORD PTR [esi],ebp
    1096:	84 02                	test   BYTE PTR [edx],al
    1098:	00 00                	add    BYTE PTR [eax],al
    109a:	02 91 00 00 11 74    	add    dl,BYTE PTR [ecx+0x74110000]
    10a0:	06                   	push   es
    10a1:	00 00                	add    BYTE PTR [eax],al
    10a3:	01 33                	add    DWORD PTR [ebx],esi
    10a5:	3a 00                	cmp    al,BYTE PTR [eax]
    10a7:	00 00                	add    BYTE PTR [eax],al
    10a9:	5b                   	pop    ebx
    10aa:	0a 00                	or     al,BYTE PTR [eax]
    10ac:	9f                   	lahf   
    10ad:	35 00 00 00 01       	xor    eax,0x1000000
    10b2:	9c                   	pushf  
    10b3:	ec                   	in     al,dx
    10b4:	03 00                	add    eax,DWORD PTR [eax]
    10b6:	00 12                	add    BYTE PTR [edx],dl
    10b8:	cf                   	iret   
    10b9:	06                   	push   es
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	01 33                	add    DWORD PTR [ebx],esi
    10be:	84 02                	test   BYTE PTR [edx],al
    10c0:	00 00                	add    BYTE PTR [eax],al
    10c2:	02 91 00 12 8b 06    	add    dl,BYTE PTR [ecx+0x68b1200]
    10c8:	00 00                	add    BYTE PTR [eax],al
    10ca:	01 33                	add    DWORD PTR [ebx],esi
    10cc:	84 02                	test   BYTE PTR [edx],al
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	02 91 04 12 ba 06    	add    dl,BYTE PTR [ecx+0x6ba1204]
    10d6:	00 00                	add    BYTE PTR [eax],al
    10d8:	01 33                	add    DWORD PTR [ebx],esi
    10da:	3a 00                	cmp    al,BYTE PTR [eax]
    10dc:	00 00                	add    BYTE PTR [eax],al
    10de:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    10e4:	00 00                	add    BYTE PTR [eax],al
    10e6:	01 33                	add    DWORD PTR [ebx],esi
    10e8:	3a 00                	cmp    al,BYTE PTR [eax]
    10ea:	00 00                	add    BYTE PTR [eax],al
    10ec:	02 91 0c 00 11 81    	add    dl,BYTE PTR [ecx-0x7eeefff4]
    10f2:	06                   	push   es
    10f3:	00 00                	add    BYTE PTR [eax],al
    10f5:	01 38                	add    DWORD PTR [eax],edi
    10f7:	3a 00                	cmp    al,BYTE PTR [eax]
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	90                   	nop
    10fc:	0a 00                	or     al,BYTE PTR [eax]
    10fe:	9f                   	lahf   
    10ff:	26 00 00             	add    BYTE PTR es:[eax],al
    1102:	00 01                	add    BYTE PTR [ecx],al
    1104:	9c                   	pushf  
    1105:	3e                   	ds
    1106:	04 00                	add    al,0x0
    1108:	00 12                	add    BYTE PTR [edx],dl
    110a:	cf                   	iret   
    110b:	06                   	push   es
    110c:	00 00                	add    BYTE PTR [eax],al
    110e:	01 38                	add    DWORD PTR [eax],edi
    1110:	84 02                	test   BYTE PTR [edx],al
    1112:	00 00                	add    BYTE PTR [eax],al
    1114:	02 91 00 12 8b 06    	add    dl,BYTE PTR [ecx+0x68b1200]
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	01 38                	add    DWORD PTR [eax],edi
    111e:	84 02                	test   BYTE PTR [edx],al
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	02 91 04 12 ba 06    	add    dl,BYTE PTR [ecx+0x6ba1204]
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	01 38                	add    DWORD PTR [eax],edi
    112c:	3a 00                	cmp    al,BYTE PTR [eax]
    112e:	00 00                	add    BYTE PTR [eax],al
    1130:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    1136:	00 00                	add    BYTE PTR [eax],al
    1138:	01 38                	add    DWORD PTR [eax],edi
    113a:	3a 00                	cmp    al,BYTE PTR [eax]
    113c:	00 00                	add    BYTE PTR [eax],al
    113e:	02 91 0c 00 11 d3    	add    dl,BYTE PTR [ecx-0x2ceefff4]
    1144:	05 00 00 01 3d       	add    eax,0x3d010000
    1149:	3a 00                	cmp    al,BYTE PTR [eax]
    114b:	00 00                	add    BYTE PTR [eax],al
    114d:	b6 0a                	mov    dh,0xa
    114f:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    1155:	01 9c 90 04 00 00 12 	add    DWORD PTR [eax+edx*4+0x12000004],ebx
    115c:	cf                   	iret   
    115d:	06                   	push   es
    115e:	00 00                	add    BYTE PTR [eax],al
    1160:	01 3d 84 02 00 00    	add    DWORD PTR ds:0x284,edi
    1166:	02 91 00 12 8b 06    	add    dl,BYTE PTR [ecx+0x68b1200]
    116c:	00 00                	add    BYTE PTR [eax],al
    116e:	01 3d 84 02 00 00    	add    DWORD PTR ds:0x284,edi
    1174:	02 91 04 12 ba 06    	add    dl,BYTE PTR [ecx+0x6ba1204]
    117a:	00 00                	add    BYTE PTR [eax],al
    117c:	01 3d 3a 00 00 00    	add    DWORD PTR ds:0x3a,edi
    1182:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    1188:	00 00                	add    BYTE PTR [eax],al
    118a:	01 3d 3a 00 00 00    	add    DWORD PTR ds:0x3a,edi
    1190:	02 91 0c 00 11 2c    	add    dl,BYTE PTR [ecx+0x2c11000c]
    1196:	06                   	push   es
    1197:	00 00                	add    BYTE PTR [eax],al
    1199:	01 42 3a             	add    DWORD PTR [edx+0x3a],eax
    119c:	00 00                	add    BYTE PTR [eax],al
    119e:	00 eb                	add    bl,ch
    11a0:	0a 00                	or     al,BYTE PTR [eax]
    11a2:	9f                   	lahf   
    11a3:	26 00 00             	add    BYTE PTR es:[eax],al
    11a6:	00 01                	add    BYTE PTR [ecx],al
    11a8:	9c                   	pushf  
    11a9:	e2 04                	loop   11af <sysEnter_Vector-0x12ee51>
    11ab:	00 00                	add    BYTE PTR [eax],al
    11ad:	12 cf                	adc    cl,bh
    11af:	06                   	push   es
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	01 42 84             	add    DWORD PTR [edx-0x7c],eax
    11b5:	02 00                	add    al,BYTE PTR [eax]
    11b7:	00 02                	add    BYTE PTR [edx],al
    11b9:	91                   	xchg   ecx,eax
    11ba:	00 12                	add    BYTE PTR [edx],dl
    11bc:	8b 06                	mov    eax,DWORD PTR [esi]
    11be:	00 00                	add    BYTE PTR [eax],al
    11c0:	01 42 84             	add    DWORD PTR [edx-0x7c],eax
    11c3:	02 00                	add    al,BYTE PTR [eax]
    11c5:	00 02                	add    BYTE PTR [edx],al
    11c7:	91                   	xchg   ecx,eax
    11c8:	04 12                	add    al,0x12
    11ca:	ba 06 00 00 01       	mov    edx,0x1000006
    11cf:	42                   	inc    edx
    11d0:	3a 00                	cmp    al,BYTE PTR [eax]
    11d2:	00 00                	add    BYTE PTR [eax],al
    11d4:	02 91 08 12 7a 06    	add    dl,BYTE PTR [ecx+0x67a1208]
    11da:	00 00                	add    BYTE PTR [eax],al
    11dc:	01 42 3a             	add    DWORD PTR [edx+0x3a],eax
    11df:	00 00                	add    BYTE PTR [eax],al
    11e1:	00 02                	add    BYTE PTR [edx],al
    11e3:	91                   	xchg   ecx,eax
    11e4:	0c 00                	or     al,0x0
    11e6:	11 9e 06 00 00 01    	adc    DWORD PTR [esi+0x1000006],ebx
    11ec:	47                   	inc    edi
    11ed:	3a 00                	cmp    al,BYTE PTR [eax]
    11ef:	00 00                	add    BYTE PTR [eax],al
    11f1:	11 0b                	adc    DWORD PTR [ebx],ecx
    11f3:	00 9f 2e 00 00 00    	add    BYTE PTR [edi+0x2e],bl
    11f9:	01 9c 26 05 00 00 12 	add    DWORD PTR [esi+eiz*1+0x12000005],ebx
    1200:	cf                   	iret   
    1201:	06                   	push   es
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	01 47 84             	add    DWORD PTR [edi-0x7c],eax
    1207:	02 00                	add    al,BYTE PTR [eax]
    1209:	00 02                	add    BYTE PTR [edx],al
    120b:	91                   	xchg   ecx,eax
    120c:	00 12                	add    BYTE PTR [edx],dl
    120e:	ca 05 00             	retf   0x5
    1211:	00 01                	add    BYTE PTR [ecx],al
    1213:	47                   	inc    edi
    1214:	9b                   	fwait
    1215:	00 00                	add    BYTE PTR [eax],al
    1217:	00 02                	add    BYTE PTR [edx],al
    1219:	91                   	xchg   ecx,eax
    121a:	04 12                	add    al,0x12
    121c:	df 05 00 00 01 47    	fild   WORD PTR ds:0x47010000
    1222:	3a 00                	cmp    al,BYTE PTR [eax]
    1224:	00 00                	add    BYTE PTR [eax],al
    1226:	02 91 08 00 11 da    	add    dl,BYTE PTR [ecx-0x25eefff8]
    122c:	05 00 00 01 4c       	add    eax,0x4c010000
    1231:	3a 00                	cmp    al,BYTE PTR [eax]
    1233:	00 00                	add    BYTE PTR [eax],al
    1235:	3f                   	aas    
    1236:	0b 00                	or     eax,DWORD PTR [eax]
    1238:	9f                   	lahf   
    1239:	26 00 00             	add    BYTE PTR es:[eax],al
    123c:	00 01                	add    BYTE PTR [ecx],al
    123e:	9c                   	pushf  
    123f:	6a 05                	push   0x5
    1241:	00 00                	add    BYTE PTR [eax],al
    1243:	12 cf                	adc    cl,bh
    1245:	06                   	push   es
    1246:	00 00                	add    BYTE PTR [eax],al
    1248:	01 4c 84 02          	add    DWORD PTR [esp+eax*4+0x2],ecx
    124c:	00 00                	add    BYTE PTR [eax],al
    124e:	02 91 00 12 ca 05    	add    dl,BYTE PTR [ecx+0x5ca1200]
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	01 4c 9b 00          	add    DWORD PTR [ebx+ebx*4+0x0],ecx
    125a:	00 00                	add    BYTE PTR [eax],al
    125c:	02 91 04 12 df 05    	add    dl,BYTE PTR [ecx+0x5df1204]
    1262:	00 00                	add    BYTE PTR [eax],al
    1264:	01 4c 3a 00          	add    DWORD PTR [edx+edi*1+0x0],ecx
    1268:	00 00                	add    BYTE PTR [eax],al
    126a:	02 91 08 00 11 65    	add    dl,BYTE PTR [ecx+0x65110008]
    1270:	05 00 00 01 50       	add    eax,0x50010000
    1275:	3a 00                	cmp    al,BYTE PTR [eax]
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	65 0b 00             	or     eax,DWORD PTR gs:[eax]
    127c:	9f                   	lahf   
    127d:	2d 00 00 00 01       	sub    eax,0x1000000
    1282:	9c                   	pushf  
    1283:	a0 05 00 00 12       	mov    al,ds:0x12000005
    1288:	36                   	ss
    1289:	05 00 00 01 50       	add    eax,0x50010000
    128e:	8d 02                	lea    eax,[edx]
    1290:	00 00                	add    BYTE PTR [eax],al
    1292:	02 91 00 12 27 06    	add    dl,BYTE PTR [ecx+0x6271200]
    1298:	00 00                	add    BYTE PTR [eax],al
    129a:	01 50 a0             	add    DWORD PTR [eax-0x60],edx
    129d:	05 00 00 02 91       	add    eax,0x91020000
    12a2:	04 00                	add    al,0x0
    12a4:	05 04 85 01 00       	add    eax,0x18504
    12a9:	00 11                	add    BYTE PTR [ecx],dl
    12ab:	27                   	daa    
    12ac:	06                   	push   es
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	01 55 3a             	add    DWORD PTR [ebp+0x3a],edx
    12b2:	00 00                	add    BYTE PTR [eax],al
    12b4:	00 92 0b 00 9f 23    	add    BYTE PTR [edx+0x239f000b],dl
    12ba:	00 00                	add    BYTE PTR [eax],al
    12bc:	00 01                	add    BYTE PTR [ecx],al
    12be:	9c                   	pushf  
    12bf:	dc 05 00 00 12 36    	fadd   QWORD PTR ds:0x36120000
    12c5:	05 00 00 01 55       	add    eax,0x55010000
    12ca:	8d 02                	lea    eax,[edx]
    12cc:	00 00                	add    BYTE PTR [eax],al
    12ce:	02 91 00 12 27 06    	add    dl,BYTE PTR [ecx+0x6271200]
    12d4:	00 00                	add    BYTE PTR [eax],al
    12d6:	01 55 a0             	add    DWORD PTR [ebp-0x60],edx
    12d9:	05 00 00 02 91       	add    eax,0x91020000
    12de:	04 00                	add    al,0x0
    12e0:	11 b3 05 00 00 01    	adc    DWORD PTR [ebx+0x1000005],esi
    12e6:	5a                   	pop    edx
    12e7:	3a 00                	cmp    al,BYTE PTR [eax]
    12e9:	00 00                	add    BYTE PTR [eax],al
    12eb:	b5 0b                	mov    ch,0xb
    12ed:	00 9f f5 02 00 00    	add    BYTE PTR [edi+0x2f5],bl
    12f3:	01 9c 7e 06 00 00 12 	add    DWORD PTR [esi+edi*2+0x12000006],ebx
    12fa:	e2 06                	loop   1302 <sysEnter_Vector-0x12ecfe>
    12fc:	00 00                	add    BYTE PTR [eax],al
    12fe:	01 5a a9             	add    DWORD PTR [edx-0x57],ebx
    1301:	00 00                	add    BYTE PTR [eax],al
    1303:	00 02                	add    BYTE PTR [edx],al
    1305:	91                   	xchg   ecx,eax
    1306:	00 12                	add    BYTE PTR [edx],dl
    1308:	43                   	inc    ebx
    1309:	06                   	push   es
    130a:	00 00                	add    BYTE PTR [eax],al
    130c:	01 5a 8d             	add    DWORD PTR [edx-0x73],ebx
    130f:	02 00                	add    al,BYTE PTR [eax]
    1311:	00 02                	add    BYTE PTR [edx],al
    1313:	91                   	xchg   ecx,eax
    1314:	04 14                	add    al,0x14
    1316:	fc                   	cld    
    1317:	01 00                	add    DWORD PTR [eax],eax
    1319:	00 01                	add    BYTE PTR [ecx],al
    131b:	5c                   	pop    esp
    131c:	7e 06                	jle    1324 <sysEnter_Vector-0x12ecdc>
    131e:	00 00                	add    BYTE PTR [eax],al
    1320:	02 91 5e 14 5e 06    	add    dl,BYTE PTR [ecx+0x65e145e]
    1326:	00 00                	add    BYTE PTR [eax],al
    1328:	01 5d 8d             	add    DWORD PTR [ebp-0x73],ebx
    132b:	02 00                	add    al,BYTE PTR [eax]
    132d:	00 02                	add    BYTE PTR [edx],al
    132f:	91                   	xchg   ecx,eax
    1330:	6c                   	ins    BYTE PTR es:[edi],dx
    1331:	14 06                	adc    al,0x6
    1333:	05 00 00 01 5e       	add    eax,0x5e010000
    1338:	3a 00                	cmp    al,BYTE PTR [eax]
    133a:	00 00                	add    BYTE PTR [eax],al
    133c:	02 91 68 14 26 06    	add    dl,BYTE PTR [ecx+0x6261468]
    1342:	00 00                	add    BYTE PTR [eax],al
    1344:	01 5f 85             	add    DWORD PTR [edi-0x7b],ebx
    1347:	01 00                	add    DWORD PTR [eax],eax
    1349:	00 02                	add    BYTE PTR [edx],al
    134b:	91                   	xchg   ecx,eax
    134c:	54                   	push   esp
    134d:	16                   	push   ss
    134e:	43                   	inc    ebx
    134f:	0d 00 9f bd 00       	or     eax,0xbd9f00
    1354:	00 00                	add    BYTE PTR [eax],al
    1356:	65                   	gs
    1357:	06                   	push   es
    1358:	00 00                	add    BYTE PTR [eax],al
    135a:	17                   	pop    ss
    135b:	72 65                	jb     13c2 <sysEnter_Vector-0x12ec3e>
    135d:	73 00                	jae    135f <sysEnter_Vector-0x12eca1>
    135f:	01 85 3a 00 00 00    	add    DWORD PTR [ebp+0x3a],eax
    1365:	02 91 64 00 18 14    	add    dl,BYTE PTR [ecx+0x14180064]
    136b:	0e                   	push   cs
    136c:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
    1372:	17                   	pop    ss
    1373:	72 65                	jb     13da <sysEnter_Vector-0x12ec26>
    1375:	73 00                	jae    1377 <sysEnter_Vector-0x12ec89>
    1377:	01 94 3a 00 00 00 02 	add    DWORD PTR [edx+edi*1+0x2000000],edx
    137e:	91                   	xchg   ecx,eax
    137f:	60                   	pusha  
    1380:	00 00                	add    BYTE PTR [eax],al
    1382:	0a 25 00 00 00 8e    	or     ah,BYTE PTR ds:0x8e000000
    1388:	06                   	push   es
    1389:	00 00                	add    BYTE PTR [eax],al
    138b:	19 bb 00 00 00 01    	sbb    DWORD PTR [ebx+0x1000000],edi
    1391:	00 11                	add    BYTE PTR [ecx],dl
    1393:	52                   	push   edx
    1394:	05 00 00 01 a0       	add    eax,0xa0010000
    1399:	9b                   	fwait
    139a:	00 00                	add    BYTE PTR [eax],al
    139c:	00 aa 0e 00 9f 29    	add    BYTE PTR [edx+0x299f000e],ch
    13a2:	00 00                	add    BYTE PTR [eax],al
    13a4:	00 01                	add    BYTE PTR [ecx],al
    13a6:	9c                   	pushf  
    13a7:	b6 06                	mov    dh,0x6
    13a9:	00 00                	add    BYTE PTR [eax],al
    13ab:	12 2f                	adc    ch,BYTE PTR [edi]
    13ad:	05 00 00 01 a0       	add    eax,0xa0010000
    13b2:	84 02                	test   BYTE PTR [edx],al
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	02 91 00 00 11 85    	add    dl,BYTE PTR [ecx-0x7aef0000]
    13bc:	05 00 00 01 a5       	add    eax,0xa5010000
    13c1:	9b                   	fwait
    13c2:	00 00                	add    BYTE PTR [eax],al
    13c4:	00 d3                	add    bl,dl
    13c6:	0e                   	push   cs
    13c7:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    13cd:	01 9c de 06 00 00 12 	add    DWORD PTR [esi+ebx*8+0x12000006],ebx
    13d4:	2f                   	das    
    13d5:	05 00 00 01 a5       	add    eax,0xa5010000
    13da:	84 02                	test   BYTE PTR [edx],al
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	02 91 00 00 11 96    	add    dl,BYTE PTR [ecx-0x69ef0000]
    13e4:	05 00 00 01 aa       	add    eax,0xaa010000
    13e9:	90                   	nop
    13ea:	00 00                	add    BYTE PTR [eax],al
    13ec:	00 f3                	add    bl,dh
    13ee:	0e                   	push   cs
    13ef:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
    13f5:	01 9c 9b 07 00 00 12 	add    DWORD PTR [ebx+ebx*4+0x12000007],ebx
    13fc:	4b                   	dec    ebx
    13fd:	06                   	push   es
    13fe:	00 00                	add    BYTE PTR [eax],al
    1400:	01 aa 9b 07 00 00    	add    DWORD PTR [edx+0x79b],ebp
    1406:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    140c:	01 aa a1 07 00 00    	add    DWORD PTR [edx+0x7a1],ebp
    1412:	02 91 04 12 2f 05    	add    dl,BYTE PTR [ecx+0x52f1204]
    1418:	00 00                	add    BYTE PTR [eax],al
    141a:	01 aa 84 02 00 00    	add    DWORD PTR [edx+0x284],ebp
    1420:	02 91 08 14 8b 06    	add    dl,BYTE PTR [ecx+0x68b1408]
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	01 ac 8d 02 00 00 02 	add    DWORD PTR [ebp+ecx*4+0x2000002],ebp
    142f:	91                   	xchg   ecx,eax
    1430:	54                   	push   esp
    1431:	14 02                	adc    al,0x2
    1433:	07                   	pop    es
    1434:	00 00                	add    BYTE PTR [eax],al
    1436:	01 ad 3a 00 00 00    	add    DWORD PTR [ebp+0x3a],ebp
    143c:	02 91 60 14 92 06    	add    dl,BYTE PTR [ecx+0x6921460]
    1442:	00 00                	add    BYTE PTR [eax],al
    1444:	01 ae 90 00 00 00    	add    DWORD PTR [esi+0x90],ebp
    144a:	02 91 6c 14 6b 05    	add    dl,BYTE PTR [ecx+0x56b146c]
    1450:	00 00                	add    BYTE PTR [eax],al
    1452:	01 af 8d 02 00 00    	add    DWORD PTR [edi+0x28d],ebp
    1458:	02 91 5c 14 04 06    	add    dl,BYTE PTR [ecx+0x604145c]
    145e:	00 00                	add    BYTE PTR [eax],al
    1460:	01 b0 8d 02 00 00    	add    DWORD PTR [eax+0x28d],esi
    1466:	02 91 50 14 e9 06    	add    dl,BYTE PTR [ecx+0x6e91450]
    146c:	00 00                	add    BYTE PTR [eax],al
    146e:	01 b1 90 00 00 00    	add    DWORD PTR [ecx+0x90],esi
    1474:	02 91 68 14 58 05    	add    dl,BYTE PTR [ecx+0x5581468]
    147a:	00 00                	add    BYTE PTR [eax],al
    147c:	01 b2 3a 00 00 00    	add    DWORD PTR [edx+0x3a],esi
    1482:	02 91 58 14 06 05    	add    dl,BYTE PTR [ecx+0x5061458]
    1488:	00 00                	add    BYTE PTR [eax],al
    148a:	01 b3 3a 00 00 00    	add    DWORD PTR [ebx+0x3a],esi
    1490:	02 91 64 1b ee 05    	add    dl,BYTE PTR [ecx+0x5ee1b64]
    1496:	00 00                	add    BYTE PTR [eax],al
    1498:	01 d0                	add    eax,edx
    149a:	9e                   	sahf   
    149b:	10 00                	adc    BYTE PTR [eax],al
    149d:	9f                   	lahf   
    149e:	00 05 04 8d 02 00    	add    BYTE PTR ds:0x28d04,al
    14a4:	00 05 04 90 00 00    	add    BYTE PTR ds:0x9004,al
    14aa:	00 11                	add    BYTE PTR [ecx],dl
    14ac:	e6 05                	out    0x5,al
    14ae:	00 00                	add    BYTE PTR [eax],al
    14b0:	01 d5                	add    ebp,edx
    14b2:	90                   	nop
    14b3:	00 00                	add    BYTE PTR [eax],al
    14b5:	00 b4 10 00 9f 26 00 	add    BYTE PTR [eax+edx*1+0x269f00],dh
    14bc:	00 00                	add    BYTE PTR [eax],al
    14be:	01 9c e9 07 00 00 12 	add    DWORD PTR [ecx+ebp*8+0x12000007],ebx
    14c5:	4b                   	dec    ebx
    14c6:	06                   	push   es
    14c7:	00 00                	add    BYTE PTR [eax],al
    14c9:	01 d5                	add    ebp,edx
    14cb:	9b                   	fwait
    14cc:	07                   	pop    es
    14cd:	00 00                	add    BYTE PTR [eax],al
    14cf:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    14d5:	01 d5                	add    ebp,edx
    14d7:	a1 07 00 00 02       	mov    eax,ds:0x2000007
    14dc:	91                   	xchg   ecx,eax
    14dd:	04 12                	add    al,0x12
    14df:	2f                   	das    
    14e0:	05 00 00 01 d5       	add    eax,0xd5010000
    14e5:	84 02                	test   BYTE PTR [edx],al
    14e7:	00 00                	add    BYTE PTR [eax],al
    14e9:	02 91 08 00 1c a3    	add    dl,BYTE PTR [ecx-0x5ce3fff8]
    14ef:	00 00                	add    BYTE PTR [eax],al
    14f1:	00 05 37 6c 00 00    	add    BYTE PTR ds:0x6c37,al
    14f7:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    14fd:	9f                   	lahf   
    14fe:	1c 34                	sbb    al,0x34
    1500:	01 00                	add    DWORD PTR [eax],eax
    1502:	00 05 38 6c 00 00    	add    BYTE PTR ds:0x6c38,al
    1508:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    150e:	9f                   	lahf   
    150f:	1c 7b                	sbb    al,0x7b
    1511:	00 00                	add    BYTE PTR [eax],al
    1513:	00 05 39 6c 00 00    	add    BYTE PTR ds:0x6c39,al
    1519:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    151f:	9f                   	lahf   
    1520:	1c 7c                	sbb    al,0x7c
    1522:	01 00                	add    DWORD PTR [eax],eax
    1524:	00 05 3a 9b 00 00    	add    BYTE PTR ds:0x9b3a,al
    152a:	00 05 03 d8 71 00    	add    BYTE PTR ds:0x71d803,al
    1530:	9f                   	lahf   
    1531:	1c 6e                	sbb    al,0x6e
    1533:	00 00                	add    BYTE PTR [eax],al
    1535:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1538:	3e 08 00             	or     BYTE PTR ds:[eax],al
    153b:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    1541:	9f                   	lahf   
    1542:	05 04 85 00 00       	add    eax,0x8504
    1547:	00 1c 91             	add    BYTE PTR [ecx+edx*4],bl
    154a:	00 00                	add    BYTE PTR [eax],al
    154c:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1553:	05 03 c0 71 00       	add    eax,0x71c003
    1558:	9f                   	lahf   
    1559:	1c 41                	sbb    al,0x41
    155b:	00 00                	add    BYTE PTR [eax],al
    155d:	00 06                	add    BYTE PTR [esi],al
    155f:	58                   	pop    eax
    1560:	9b                   	fwait
    1561:	07                   	pop    es
    1562:	00 00                	add    BYTE PTR [eax],al
    1564:	05 03 d4 71 00       	add    eax,0x71d403
    1569:	9f                   	lahf   
    156a:	1c 1b                	sbb    al,0x1b
    156c:	05 00 00 01 09       	add    eax,0x9010000
    1571:	8d 02                	lea    eax,[edx]
    1573:	00 00                	add    BYTE PTR [eax],al
    1575:	05 03 e4 71 00       	add    eax,0x71e403
    157a:	9f                   	lahf   
    157b:	1c d6                	sbb    al,0xd6
    157d:	06                   	push   es
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	01 0a                	add    DWORD PTR [edx],ecx
    1582:	8d 02                	lea    eax,[edx]
    1584:	00 00                	add    BYTE PTR [eax],al
    1586:	05 03 f0 71 00       	add    eax,0x71f003
    158b:	9f                   	lahf   
    158c:	1c 71                	sbb    al,0x71
    158e:	05 00 00 01 0b       	add    eax,0xb010000
    1593:	8d 02                	lea    eax,[edx]
    1595:	00 00                	add    BYTE PTR [eax],al
    1597:	05 03 e8 71 00       	add    eax,0x71e803
    159c:	9f                   	lahf   
    159d:	1c bf                	sbb    al,0xbf
    159f:	06                   	push   es
    15a0:	00 00                	add    BYTE PTR [eax],al
    15a2:	01 0c 8d 02 00 00 05 	add    DWORD PTR [ecx*4+0x5000002],ecx
    15a9:	03 ec                	add    ebp,esp
    15ab:	71 00                	jno    15ad <sysEnter_Vector-0x12ea53>
    15ad:	9f                   	lahf   
    15ae:	00 1a                	add    BYTE PTR [edx],bl
    15b0:	03 00                	add    eax,DWORD PTR [eax]
    15b2:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    15b5:	b9 05 00 00 04       	mov    ecx,0x4000005
    15ba:	01 ac 00 00 00 0c 23 	add    DWORD PTR [eax+eax*1+0x230c0000],ebp
    15c1:	07                   	pop    es
    15c2:	00 00                	add    BYTE PTR [eax],al
    15c4:	1e                   	push   ds
    15c5:	00 00                	add    BYTE PTR [eax],al
    15c7:	00 dc                	add    ah,bl
    15c9:	10 00                	adc    BYTE PTR [eax],al
    15cb:	9f                   	lahf   
    15cc:	69 01 00 00 0b 08    	imul   eax,DWORD PTR [ecx],0x80b0000
    15d2:	00 00                	add    BYTE PTR [eax],al
    15d4:	02 01                	add    al,BYTE PTR [ecx]
    15d6:	06                   	push   es
    15d7:	8c 00                	mov    WORD PTR [eax],es
    15d9:	00 00                	add    BYTE PTR [eax],al
    15db:	02 01                	add    al,BYTE PTR [ecx]
    15dd:	06                   	push   es
    15de:	85 00                	test   DWORD PTR [eax],eax
    15e0:	00 00                	add    BYTE PTR [eax],al
    15e2:	02 02                	add    al,BYTE PTR [edx]
    15e4:	05 72 01 00 00       	add    eax,0x172
    15e9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    15f0:	02 08                	add    cl,BYTE PTR [eax]
    15f2:	05 00 00 00 00       	add    eax,0x0
    15f7:	02 01                	add    al,BYTE PTR [ecx]
    15f9:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    15ff:	02 07                	add    al,BYTE PTR [edi]
    1601:	19 01                	sbb    DWORD PTR [ecx],eax
    1603:	00 00                	add    BYTE PTR [eax],al
    1605:	04 0e                	add    al,0xe
    1607:	00 00                	add    BYTE PTR [eax],al
    1609:	00 02                	add    BYTE PTR [edx],al
    160b:	34 61                	xor    al,0x61
    160d:	00 00                	add    BYTE PTR [eax],al
    160f:	00 02                	add    BYTE PTR [edx],al
    1611:	04 07                	add    al,0x7
    1613:	61                   	popa   
    1614:	00 00                	add    BYTE PTR [eax],al
    1616:	00 02                	add    BYTE PTR [edx],al
    1618:	08 07                	or     BYTE PTR [edi],al
    161a:	57                   	push   edi
    161b:	00 00                	add    BYTE PTR [eax],al
    161d:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    1624:	56                   	push   esi
    1625:	61                   	popa   
    1626:	00 00                	add    BYTE PTR [eax],al
    1628:	00 02                	add    BYTE PTR [edx],al
    162a:	04 05                	add    al,0x5
    162c:	05 00 00 00 02       	add    eax,0x2000000
    1631:	0c 04                	or     al,0x4
    1633:	66 01 00             	add    WORD PTR [eax],ax
    1636:	00 02                	add    BYTE PTR [edx],al
    1638:	01 02                	add    DWORD PTR [edx],eax
    163a:	13 01                	adc    eax,DWORD PTR [ecx]
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1641:	83 01 00             	add    DWORD PTR [ecx],0x0
    1644:	00 05 d1 03 00 00    	add    BYTE PTR ds:0x3d1,al
    164a:	04 61                	add    al,0x61
    164c:	00 00                	add    BYTE PTR [eax],al
    164e:	00 06                	add    BYTE PTR [esi],al
    1650:	15 8a 01 00 00       	adc    eax,0x18a
    1655:	06                   	push   es
    1656:	71 03                	jno    165b <sysEnter_Vector-0x12e9a5>
    1658:	00 00                	add    BYTE PTR [eax],al
    165a:	00 06                	add    BYTE PTR [esi],al
    165c:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    165f:	00 01                	add    BYTE PTR [ecx],al
    1661:	06                   	push   es
    1662:	d6                   	(bad)  
    1663:	02 00                	add    al,BYTE PTR [eax]
    1665:	00 02                	add    BYTE PTR [edx],al
    1667:	06                   	push   es
    1668:	cf                   	iret   
    1669:	04 00                	add    al,0x0
    166b:	00 03                	add    BYTE PTR [ebx],al
    166d:	06                   	push   es
    166e:	08 03                	or     BYTE PTR [ebx],al
    1670:	00 00                	add    BYTE PTR [eax],al
    1672:	04 06                	add    al,0x6
    1674:	f3 02 00             	repz add al,BYTE PTR [eax]
    1677:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
    167d:	00 0a                	add    BYTE PTR [edx],cl
    167f:	06                   	push   es
    1680:	45                   	inc    ebp
    1681:	04 00                	add    al,0x0
    1683:	00 0b                	add    BYTE PTR [ebx],cl
    1685:	06                   	push   es
    1686:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
    168c:	b4 04                	mov    ah,0x4
    168e:	00 00                	add    BYTE PTR [eax],al
    1690:	0d 06 52 04 00       	or     eax,0x45206
    1695:	00 0e                	add    BYTE PTR [esi],cl
    1697:	06                   	push   es
    1698:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    1699:	04 00                	add    al,0x0
    169b:	00 0f                	add    BYTE PTR [edi],cl
    169d:	06                   	push   es
    169e:	3f                   	aas    
    169f:	03 00                	add    eax,DWORD PTR [eax]
    16a1:	00 10                	add    BYTE PTR [eax],dl
    16a3:	06                   	push   es
    16a4:	5f                   	pop    edi
    16a5:	04 00                	add    al,0x0
    16a7:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    16aa:	f1                   	icebp  
    16ab:	03 00                	add    eax,DWORD PTR [eax]
    16ad:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    16b0:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    16b3:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    16b6:	8b 02                	mov    eax,DWORD PTR [edx]
    16b8:	00 00                	add    BYTE PTR [eax],al
    16ba:	61                   	popa   
    16bb:	06                   	push   es
    16bc:	0e                   	push   cs
    16bd:	04 00                	add    al,0x0
    16bf:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
    16c5:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    16c8:	07                   	pop    es
    16c9:	7d 04                	jge    16cf <sysEnter_Vector-0x12e931>
    16cb:	00 00                	add    BYTE PTR [eax],al
    16cd:	64 01 07             	add    DWORD PTR fs:[edi],eax
    16d0:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    16d3:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    16d6:	07                   	pop    es
    16d7:	af                   	scas   eax,DWORD PTR es:[edi]
    16d8:	02 00                	add    al,BYTE PTR [eax]
    16da:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    16dd:	07                   	pop    es
    16de:	2a 03                	sub    al,BYTE PTR [ebx]
    16e0:	00 00                	add    BYTE PTR [eax],al
    16e2:	67 01 07             	add    DWORD PTR [bx],eax
    16e5:	1d 03 00 00 68       	sbb    eax,0x68000003
    16ea:	01 07                	add    DWORD PTR [edi],eax
    16ec:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    16f3:	9e                   	sahf   
    16f4:	02 00                	add    al,BYTE PTR [eax]
    16f6:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    16f9:	07                   	pop    es
    16fa:	e3 02                	jecxz  16fe <sysEnter_Vector-0x12e902>
    16fc:	00 00                	add    BYTE PTR [eax],al
    16fe:	71 01                	jno    1701 <sysEnter_Vector-0x12e8ff>
    1700:	07                   	pop    es
    1701:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
    1705:	00 03                	add    BYTE PTR [ebx],al
    1707:	07                   	pop    es
    1708:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1709:	04 00                	add    al,0x0
    170b:	00 01                	add    BYTE PTR [ecx],al
    170d:	03 07                	add    eax,DWORD PTR [edi]
    170f:	bd 03 00 00 02       	mov    ebp,0x2000003
    1714:	03 07                	add    eax,DWORD PTR [edi]
    1716:	96                   	xchg   esi,eax
    1717:	03 00                	add    eax,DWORD PTR [eax]
    1719:	00 03                	add    BYTE PTR [ebx],al
    171b:	03 07                	add    eax,DWORD PTR [edi]
    171d:	34 04                	xor    al,0x4
    171f:	00 00                	add    BYTE PTR [eax],al
    1721:	04 03                	add    al,0x3
    1723:	07                   	pop    es
    1724:	97                   	xchg   edi,eax
    1725:	04 00                	add    al,0x0
    1727:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
    172d:	00 00                	add    BYTE PTR [eax],al
    172f:	06                   	push   es
    1730:	03 07                	add    eax,DWORD PTR [edi]
    1732:	52                   	push   edx
    1733:	03 00                	add    eax,DWORD PTR [eax]
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	09 00                	or     DWORD PTR [eax],eax
    1739:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    173c:	5c                   	pop    esp
    173d:	00 00                	add    BYTE PTR [eax],al
    173f:	00 08                	add    BYTE PTR [eax],cl
    1741:	04 25                	add    al,0x25
    1743:	00 00                	add    BYTE PTR [eax],al
    1745:	00 09                	add    BYTE PTR [ecx],cl
    1747:	5c                   	pop    esp
    1748:	07                   	pop    es
    1749:	00 00                	add    BYTE PTR [eax],al
    174b:	01 0f                	add    DWORD PTR [edi],ecx
    174d:	dc 10                	fcom   QWORD PTR [eax]
    174f:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    1755:	01 9c bb 01 00 00 0a 	add    DWORD PTR [ebx+edi*4+0xa000001],ebx
    175c:	8b 06                	mov    eax,DWORD PTR [esi]
    175e:	00 00                	add    BYTE PTR [eax],al
    1760:	01 0f                	add    DWORD PTR [edi],ecx
    1762:	91                   	xchg   ecx,eax
    1763:	01 00                	add    DWORD PTR [eax],eax
    1765:	00 02                	add    BYTE PTR [edx],al
    1767:	91                   	xchg   ecx,eax
    1768:	00 00                	add    BYTE PTR [eax],al
    176a:	09 52 07             	or     DWORD PTR [edx+0x7],edx
    176d:	00 00                	add    BYTE PTR [eax],al
    176f:	01 14 02             	add    DWORD PTR [edx+eax*1],edx
    1772:	11 00                	adc    DWORD PTR [eax],eax
    1774:	9f                   	lahf   
    1775:	43                   	inc    ebx
    1776:	00 00                	add    BYTE PTR [eax],al
    1778:	00 01                	add    BYTE PTR [ecx],al
    177a:	9c                   	pushf  
    177b:	eb 01                	jmp    177e <sysEnter_Vector-0x12e882>
    177d:	00 00                	add    BYTE PTR [eax],al
    177f:	0b 63 00             	or     esp,DWORD PTR [ebx+0x0]
    1782:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
    1789:	91                   	xchg   ecx,eax
    178a:	60                   	pusha  
    178b:	0c 8b                	or     al,0x8b
    178d:	06                   	push   es
    178e:	00 00                	add    BYTE PTR [eax],al
    1790:	01 16                	add    DWORD PTR [esi],edx
    1792:	eb 01                	jmp    1795 <sysEnter_Vector-0x12e86b>
    1794:	00 00                	add    BYTE PTR [eax],al
    1796:	02 91 72 00 0d 25    	add    dl,BYTE PTR [ecx+0x250d0072]
    179c:	00 00                	add    BYTE PTR [eax],al
    179e:	00 fb                	add    bl,bh
    17a0:	01 00                	add    DWORD PTR [eax],eax
    17a2:	00 0e                	add    BYTE PTR [esi],cl
    17a4:	8f 00                	pop    DWORD PTR [eax]
    17a6:	00 00                	add    BYTE PTR [eax],al
    17a8:	01 00                	add    DWORD PTR [eax],eax
    17aa:	0f 61 07             	punpcklwd mm0,DWORD PTR [edi]
    17ad:	00 00                	add    BYTE PTR [eax],al
    17af:	01 1f                	add    DWORD PTR [edi],ebx
    17b1:	25 00 00 00 45       	and    eax,0x45000000
    17b6:	11 00                	adc    DWORD PTR [eax],eax
    17b8:	9f                   	lahf   
    17b9:	43                   	inc    ebx
    17ba:	00 00                	add    BYTE PTR [eax],al
    17bc:	00 01                	add    BYTE PTR [ecx],al
    17be:	9c                   	pushf  
    17bf:	21 02                	and    DWORD PTR [edx],eax
    17c1:	00 00                	add    BYTE PTR [eax],al
    17c3:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
    17c6:	01 21                	add    DWORD PTR [ecx],esp
    17c8:	25 00 00 00 02       	and    eax,0x2000000
    17cd:	91                   	xchg   ecx,eax
    17ce:	73 00                	jae    17d0 <sysEnter_Vector-0x12e830>
    17d0:	11 3c 07             	adc    DWORD PTR [edi+eax*1],edi
    17d3:	00 00                	add    BYTE PTR [eax],al
    17d5:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    17db:	88 11                	mov    BYTE PTR [ecx],dl
    17dd:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
    17e3:	01 9c 9a 02 00 00 0a 	add    DWORD PTR [edx+ebx*4+0xa000002],ebx
    17ea:	8b 06                	mov    eax,DWORD PTR [esi]
    17ec:	00 00                	add    BYTE PTR [eax],al
    17ee:	01 2d 91 01 00 00    	add    DWORD PTR ds:0x191,ebp
    17f4:	02 91 00 0a 41 07    	add    dl,BYTE PTR [ecx+0x7410a00]
    17fa:	00 00                	add    BYTE PTR [eax],al
    17fc:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    1802:	02 91 04 0a 2f 05    	add    dl,BYTE PTR [ecx+0x52f0a04]
    1808:	00 00                	add    BYTE PTR [eax],al
    180a:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    1810:	02 91 08 0c 35 07    	add    dl,BYTE PTR [ecx+0x7350c08]
    1816:	00 00                	add    BYTE PTR [eax],al
    1818:	01 2f                	add    DWORD PTR [edi],ebp
    181a:	25 00 00 00 02       	and    eax,0x2000000
    181f:	91                   	xchg   ecx,eax
    1820:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
    1823:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1825:	00 01                	add    BYTE PTR [ecx],al
    1827:	30 3a                	xor    BYTE PTR [edx],bh
    1829:	00 00                	add    BYTE PTR [eax],al
    182b:	00 02                	add    BYTE PTR [edx],al
    182d:	91                   	xchg   ecx,eax
    182e:	6c                   	ins    BYTE PTR es:[edi],dx
    182f:	0c 57                	or     al,0x57
    1831:	07                   	pop    es
    1832:	00 00                	add    BYTE PTR [eax],al
    1834:	01 31                	add    DWORD PTR [ecx],esi
    1836:	eb 01                	jmp    1839 <sysEnter_Vector-0x12e7c7>
    1838:	00 00                	add    BYTE PTR [eax],al
    183a:	02 91 69 12 48 07    	add    dl,BYTE PTR [ecx+0x7481269]
    1840:	00 00                	add    BYTE PTR [eax],al
    1842:	01 37                	add    DWORD PTR [edi],esi
    1844:	c8 11 00 9f          	enter  0x11,0x9f
    1848:	00 13                	add    BYTE PTR [ebx],dl
    184a:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    184f:	37                   	aaa    
    1850:	56                   	push   esi
    1851:	00 00                	add    BYTE PTR [eax],al
    1853:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    1859:	9f                   	lahf   
    185a:	13 34 01             	adc    esi,DWORD PTR [ecx+eax*1]
    185d:	00 00                	add    BYTE PTR [eax],al
    185f:	03 38                	add    edi,DWORD PTR [eax]
    1861:	56                   	push   esi
    1862:	00 00                	add    BYTE PTR [eax],al
    1864:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    186a:	9f                   	lahf   
    186b:	13 7b 00             	adc    edi,DWORD PTR [ebx+0x0]
    186e:	00 00                	add    BYTE PTR [eax],al
    1870:	03 39                	add    edi,DWORD PTR [ecx]
    1872:	56                   	push   esi
    1873:	00 00                	add    BYTE PTR [eax],al
    1875:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    187b:	9f                   	lahf   
    187c:	13 7c 01 00          	adc    edi,DWORD PTR [ecx+eax*1+0x0]
    1880:	00 03                	add    BYTE PTR [ebx],al
    1882:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    1885:	00 00                	add    BYTE PTR [eax],al
    1887:	05 03 d8 71 00       	add    eax,0x71d803
    188c:	9f                   	lahf   
    188d:	13 6e 00             	adc    ebp,DWORD PTR [esi+0x0]
    1890:	00 00                	add    BYTE PTR [eax],al
    1892:	04 34                	add    al,0x34
    1894:	ef                   	out    dx,eax
    1895:	02 00                	add    al,BYTE PTR [eax]
    1897:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    189d:	9f                   	lahf   
    189e:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    18a1:	00 00                	add    BYTE PTR [eax],al
    18a3:	00 13                	add    BYTE PTR [ebx],dl
    18a5:	91                   	xchg   ecx,eax
    18a6:	00 00                	add    BYTE PTR [eax],al
    18a8:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    18af:	05 03 c0 71 00       	add    eax,0x71c003
    18b4:	9f                   	lahf   
    18b5:	13 41 00             	adc    eax,DWORD PTR [ecx+0x0]
    18b8:	00 00                	add    BYTE PTR [eax],al
    18ba:	05 58 17 03 00       	add    eax,0x31758
    18bf:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    18c5:	9f                   	lahf   
    18c6:	08 04 91             	or     BYTE PTR [ecx+edx*4],al
    18c9:	01 00                	add    DWORD PTR [eax],eax
    18cb:	00 00                	add    BYTE PTR [eax],al
    18cd:	56                   	push   esi
    18ce:	0b 00                	or     eax,DWORD PTR [eax]
    18d0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    18d3:	d8 06                	fadd   DWORD PTR [esi]
    18d5:	00 00                	add    BYTE PTR [eax],al
    18d7:	04 01                	add    al,0x1
    18d9:	ac                   	lods   al,BYTE PTR ds:[esi]
    18da:	00 00                	add    BYTE PTR [eax],al
    18dc:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
    18df:	09 00                	or     DWORD PTR [eax],eax
    18e1:	00 1e                	add    BYTE PTR [esi],bl
    18e3:	00 00                	add    BYTE PTR [eax],al
    18e5:	00 48 12             	add    BYTE PTR [eax+0x12],cl
    18e8:	00 9f c4 0c 00 00    	add    BYTE PTR [edi+0xcc4],bl
    18ee:	42                   	inc    edx
    18ef:	09 00                	or     DWORD PTR [eax],eax
    18f1:	00 02                	add    BYTE PTR [edx],al
    18f3:	92                   	xchg   edx,eax
    18f4:	08 00                	or     BYTE PTR [eax],al
    18f6:	00 02                	add    BYTE PTR [edx],al
    18f8:	28 30                	sub    BYTE PTR [eax],dh
    18fa:	00 00                	add    BYTE PTR [eax],al
    18fc:	00 03                	add    BYTE PTR [ebx],al
    18fe:	04 c6                	add    al,0xc6
    1900:	07                   	pop    es
    1901:	00 00                	add    BYTE PTR [eax],al
    1903:	3a 00                	cmp    al,BYTE PTR [eax]
    1905:	00 00                	add    BYTE PTR [eax],al
    1907:	04 01                	add    al,0x1
    1909:	06                   	push   es
    190a:	8c 00                	mov    WORD PTR [eax],es
    190c:	00 00                	add    BYTE PTR [eax],al
    190e:	02 99 08 00 00 02    	add    bl,BYTE PTR [ecx+0x2000008]
    1914:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    191a:	01 06                	add    DWORD PTR [esi],eax
    191c:	85 00                	test   DWORD PTR [eax],eax
    191e:	00 00                	add    BYTE PTR [eax],al
    1920:	04 02                	add    al,0x2
    1922:	05 72 01 00 00       	add    eax,0x172
    1927:	05 04 05 69 6e       	add    eax,0x6e690504
    192c:	74 00                	je     192e <sysEnter_Vector-0x12e6d2>
    192e:	04 08                	add    al,0x8
    1930:	05 00 00 00 00       	add    eax,0x0
    1935:	04 01                	add    al,0x1
    1937:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    193d:	02 07                	add    al,BYTE PTR [edi]
    193f:	19 01                	sbb    DWORD PTR [ecx],eax
    1941:	00 00                	add    BYTE PTR [eax],al
    1943:	02 0e                	add    cl,BYTE PTR [esi]
    1945:	00 00                	add    BYTE PTR [eax],al
    1947:	00 03                	add    BYTE PTR [ebx],al
    1949:	34 81                	xor    al,0x81
    194b:	00 00                	add    BYTE PTR [eax],al
    194d:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    1950:	07                   	pop    es
    1951:	61                   	popa   
    1952:	00 00                	add    BYTE PTR [eax],al
    1954:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    1957:	07                   	pop    es
    1958:	57                   	push   edi
    1959:	00 00                	add    BYTE PTR [eax],al
    195b:	00 02                	add    BYTE PTR [edx],al
    195d:	4d                   	dec    ebp
    195e:	00 00                	add    BYTE PTR [eax],al
    1960:	00 03                	add    BYTE PTR [ebx],al
    1962:	56                   	push   esi
    1963:	81 00 00 00 02 bd    	add    DWORD PTR [eax],0xbd020000
    1969:	02 00                	add    al,BYTE PTR [eax]
    196b:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    196e:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    1974:	05 05 00 00 00       	add    eax,0x5
    1979:	04 0c                	add    al,0xc
    197b:	04 66                	add    al,0x66
    197d:	01 00                	add    DWORD PTR [eax],eax
    197f:	00 06                	add    BYTE PTR [esi],al
    1981:	04 b9                	add    al,0xb9
    1983:	00 00                	add    BYTE PTR [eax],al
    1985:	00 07                	add    BYTE PTR [edi],al
    1987:	3a 00                	cmp    al,BYTE PTR [eax]
    1989:	00 00                	add    BYTE PTR [eax],al
    198b:	04 01                	add    al,0x1
    198d:	02 13                	add    dl,BYTE PTR [ebx]
    198f:	01 00                	add    DWORD PTR [eax],eax
    1991:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    1994:	07                   	pop    es
    1995:	83 01 00             	add    DWORD PTR [ecx],0x0
    1998:	00 08                	add    BYTE PTR [eax],cl
    199a:	d1 03                	rol    DWORD PTR [ebx],1
    199c:	00 00                	add    BYTE PTR [eax],al
    199e:	04 81                	add    al,0x81
    19a0:	00 00                	add    BYTE PTR [eax],al
    19a2:	00 05 15 c0 01 00    	add    BYTE PTR ds:0x1c015,al
    19a8:	00 09                	add    BYTE PTR [ecx],cl
    19aa:	71 03                	jno    19af <sysEnter_Vector-0x12e651>
    19ac:	00 00                	add    BYTE PTR [eax],al
    19ae:	00 09                	add    BYTE PTR [ecx],cl
    19b0:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    19b3:	00 01                	add    BYTE PTR [ecx],al
    19b5:	09 d6                	or     esi,edx
    19b7:	02 00                	add    al,BYTE PTR [eax]
    19b9:	00 02                	add    BYTE PTR [edx],al
    19bb:	09 cf                	or     edi,ecx
    19bd:	04 00                	add    al,0x0
    19bf:	00 03                	add    BYTE PTR [ebx],al
    19c1:	09 08                	or     DWORD PTR [eax],ecx
    19c3:	03 00                	add    eax,DWORD PTR [eax]
    19c5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    19c8:	f3 02 00             	repz add al,BYTE PTR [eax]
    19cb:	00 05 09 64 03 00    	add    BYTE PTR ds:0x36409,al
    19d1:	00 0a                	add    BYTE PTR [edx],cl
    19d3:	09 45 04             	or     DWORD PTR [ebp+0x4],eax
    19d6:	00 00                	add    BYTE PTR [eax],al
    19d8:	0b 09                	or     ecx,DWORD PTR [ecx]
    19da:	81 03 00 00 0c 09    	add    DWORD PTR [ebx],0x90c0000
    19e0:	b4 04                	mov    ah,0x4
    19e2:	00 00                	add    BYTE PTR [eax],al
    19e4:	0d 09 52 04 00       	or     eax,0x45209
    19e9:	00 0e                	add    BYTE PTR [esi],cl
    19eb:	09 a7 04 00 00 0f    	or     DWORD PTR [edi+0xf000004],esp
    19f1:	09 3f                	or     DWORD PTR [edi],edi
    19f3:	03 00                	add    eax,DWORD PTR [eax]
    19f5:	00 10                	add    BYTE PTR [eax],dl
    19f7:	09 5f 04             	or     DWORD PTR [edi+0x4],ebx
    19fa:	00 00                	add    BYTE PTR [eax],al
    19fc:	4f                   	dec    edi
    19fd:	09 f1                	or     ecx,esi
    19ff:	03 00                	add    eax,DWORD PTR [eax]
    1a01:	00 50 09             	add    BYTE PTR [eax+0x9],dl
    1a04:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    1a07:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    1a0a:	8b 02                	mov    eax,DWORD PTR [edx]
    1a0c:	00 00                	add    BYTE PTR [eax],al
    1a0e:	61                   	popa   
    1a0f:	09 0e                	or     DWORD PTR [esi],ecx
    1a11:	04 00                	add    al,0x0
    1a13:	00 97 0a a6 03 00    	add    BYTE PTR [edi+0x3a60a],dl
    1a19:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1a1c:	0a 7d 04             	or     bh,BYTE PTR [ebp+0x4]
    1a1f:	00 00                	add    BYTE PTR [eax],al
    1a21:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
    1a24:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    1a27:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1a2a:	0a af 02 00 00 66    	or     ch,BYTE PTR [edi+0x66000002]
    1a30:	01 0a                	add    DWORD PTR [edx],ecx
    1a32:	2a 03                	sub    al,BYTE PTR [ebx]
    1a34:	00 00                	add    BYTE PTR [eax],al
    1a36:	67 01 0a             	add    DWORD PTR [bp+si],ecx
    1a39:	1d 03 00 00 68       	sbb    eax,0x68000003
    1a3e:	01 0a                	add    DWORD PTR [edx],ecx
    1a40:	f7 04 00 00 69 01 0a 	test   DWORD PTR [eax+eax*1],0xa016900
    1a47:	9e                   	sahf   
    1a48:	02 00                	add    al,BYTE PTR [eax]
    1a4a:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    1a4d:	0a e3                	or     ah,bl
    1a4f:	02 00                	add    al,BYTE PTR [eax]
    1a51:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    1a54:	0a c1                	or     al,cl
    1a56:	04 00                	add    al,0x0
    1a58:	00 00                	add    BYTE PTR [eax],al
    1a5a:	03 0a                	add    ecx,DWORD PTR [edx]
    1a5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a5d:	04 00                	add    al,0x0
    1a5f:	00 01                	add    BYTE PTR [ecx],al
    1a61:	03 0a                	add    ecx,DWORD PTR [edx]
    1a63:	bd 03 00 00 02       	mov    ebp,0x2000003
    1a68:	03 0a                	add    ecx,DWORD PTR [edx]
    1a6a:	96                   	xchg   esi,eax
    1a6b:	03 00                	add    eax,DWORD PTR [eax]
    1a6d:	00 03                	add    BYTE PTR [ebx],al
    1a6f:	03 0a                	add    ecx,DWORD PTR [edx]
    1a71:	34 04                	xor    al,0x4
    1a73:	00 00                	add    BYTE PTR [eax],al
    1a75:	04 03                	add    al,0x3
    1a77:	0a 97 04 00 00 05    	or     dl,BYTE PTR [edi+0x5000004]
    1a7d:	03 0a                	add    ecx,DWORD PTR [edx]
    1a7f:	e2 03                	loop   1a84 <sysEnter_Vector-0x12e57c>
    1a81:	00 00                	add    BYTE PTR [eax],al
    1a83:	06                   	push   es
    1a84:	03 0a                	add    ecx,DWORD PTR [edx]
    1a86:	52                   	push   edx
    1a87:	03 00                	add    eax,DWORD PTR [eax]
    1a89:	00 00                	add    BYTE PTR [eax],al
    1a8b:	09 00                	or     DWORD PTR [eax],eax
    1a8d:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    1a90:	04 07                	add    al,0x7
    1a92:	5c                   	pop    esp
    1a93:	00 00                	add    BYTE PTR [eax],al
    1a95:	00 06                	add    BYTE PTR [esi],al
    1a97:	04 3a                	add    al,0x3a
    1a99:	00 00                	add    BYTE PTR [eax],al
    1a9b:	00 0c 5c             	add    BYTE PTR [esp+ebx*2],cl
    1a9e:	08 00                	or     BYTE PTR [eax],al
    1aa0:	00 01                	add    BYTE PTR [ecx],al
    1aa2:	11 5a 00             	adc    DWORD PTR [edx+0x0],ebx
    1aa5:	00 00                	add    BYTE PTR [eax],al
    1aa7:	48                   	dec    eax
    1aa8:	12 00                	adc    al,BYTE PTR [eax]
    1aaa:	9f                   	lahf   
    1aab:	3a 00                	cmp    al,BYTE PTR [eax]
    1aad:	00 00                	add    BYTE PTR [eax],al
    1aaf:	01 9c 3d 02 00 00 0d 	add    DWORD PTR [ebp+edi*1+0xd000002],ebx
    1ab6:	12 08                	adc    cl,BYTE PTR [eax]
    1ab8:	00 00                	add    BYTE PTR [eax],al
    1aba:	01 11                	add    DWORD PTR [ecx],edx
    1abc:	5a                   	pop    edx
    1abd:	00 00                	add    BYTE PTR [eax],al
    1abf:	00 02                	add    BYTE PTR [edx],al
    1ac1:	91                   	xchg   ecx,eax
    1ac2:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1ac8:	01 11                	add    DWORD PTR [ecx],edx
    1aca:	76 00                	jbe    1acc <sysEnter_Vector-0x12e534>
    1acc:	00 00                	add    BYTE PTR [eax],al
    1ace:	02 91 04 0d bf 08    	add    dl,BYTE PTR [ecx+0x8bf0d04]
    1ad4:	00 00                	add    BYTE PTR [eax],al
    1ad6:	01 11                	add    DWORD PTR [ecx],edx
    1ad8:	76 00                	jbe    1ada <sysEnter_Vector-0x12e526>
    1ada:	00 00                	add    BYTE PTR [eax],al
    1adc:	02 91 08 0d c6 08    	add    dl,BYTE PTR [ecx+0x8c60d08]
    1ae2:	00 00                	add    BYTE PTR [eax],al
    1ae4:	01 11                	add    DWORD PTR [ecx],edx
    1ae6:	76 00                	jbe    1ae8 <sysEnter_Vector-0x12e518>
    1ae8:	00 00                	add    BYTE PTR [eax],al
    1aea:	02 91 0c 0d cd 08    	add    dl,BYTE PTR [ecx+0x8cd0d0c]
    1af0:	00 00                	add    BYTE PTR [eax],al
    1af2:	01 11                	add    DWORD PTR [ecx],edx
    1af4:	76 00                	jbe    1af6 <sysEnter_Vector-0x12e50a>
    1af6:	00 00                	add    BYTE PTR [eax],al
    1af8:	02 91 10 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e10]
    1afe:	00 00                	add    BYTE PTR [eax],al
    1b00:	01 13                	add    DWORD PTR [ebx],edx
    1b02:	5a                   	pop    edx
    1b03:	00 00                	add    BYTE PTR [eax],al
    1b05:	00 02                	add    BYTE PTR [edx],al
    1b07:	91                   	xchg   ecx,eax
    1b08:	6c                   	ins    BYTE PTR es:[edi],dx
    1b09:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    1b0c:	08 00                	or     BYTE PTR [eax],al
    1b0e:	00 01                	add    BYTE PTR [ecx],al
    1b10:	18 5a 00             	sbb    BYTE PTR [edx+0x0],bl
    1b13:	00 00                	add    BYTE PTR [eax],al
    1b15:	82                   	(bad)  
    1b16:	12 00                	adc    al,BYTE PTR [eax]
    1b18:	9f                   	lahf   
    1b19:	3c 00                	cmp    al,0x0
    1b1b:	00 00                	add    BYTE PTR [eax],al
    1b1d:	01 9c 9d 02 00 00 0d 	add    DWORD PTR [ebp+ebx*4+0xd000002],ebx
    1b24:	12 08                	adc    cl,BYTE PTR [eax]
    1b26:	00 00                	add    BYTE PTR [eax],al
    1b28:	01 18                	add    DWORD PTR [eax],ebx
    1b2a:	5a                   	pop    edx
    1b2b:	00 00                	add    BYTE PTR [eax],al
    1b2d:	00 02                	add    BYTE PTR [edx],al
    1b2f:	91                   	xchg   ecx,eax
    1b30:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1b36:	01 18                	add    DWORD PTR [eax],ebx
    1b38:	76 00                	jbe    1b3a <sysEnter_Vector-0x12e4c6>
    1b3a:	00 00                	add    BYTE PTR [eax],al
    1b3c:	02 91 04 0d bf 08    	add    dl,BYTE PTR [ecx+0x8bf0d04]
    1b42:	00 00                	add    BYTE PTR [eax],al
    1b44:	01 18                	add    DWORD PTR [eax],ebx
    1b46:	76 00                	jbe    1b48 <sysEnter_Vector-0x12e4b8>
    1b48:	00 00                	add    BYTE PTR [eax],al
    1b4a:	02 91 08 0d c6 08    	add    dl,BYTE PTR [ecx+0x8c60d08]
    1b50:	00 00                	add    BYTE PTR [eax],al
    1b52:	01 18                	add    DWORD PTR [eax],ebx
    1b54:	76 00                	jbe    1b56 <sysEnter_Vector-0x12e4aa>
    1b56:	00 00                	add    BYTE PTR [eax],al
    1b58:	02 91 0c 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e0c]
    1b5e:	00 00                	add    BYTE PTR [eax],al
    1b60:	01 1a                	add    DWORD PTR [edx],ebx
    1b62:	5a                   	pop    edx
    1b63:	00 00                	add    BYTE PTR [eax],al
    1b65:	00 02                	add    BYTE PTR [edx],al
    1b67:	91                   	xchg   ecx,eax
    1b68:	6c                   	ins    BYTE PTR es:[edi],dx
    1b69:	00 0c 44             	add    BYTE PTR [esp+eax*2],cl
    1b6c:	08 00                	or     BYTE PTR [eax],al
    1b6e:	00 01                	add    BYTE PTR [ecx],al
    1b70:	1f                   	pop    ds
    1b71:	5a                   	pop    edx
    1b72:	00 00                	add    BYTE PTR [eax],al
    1b74:	00 be 12 00 9f 3e    	add    BYTE PTR [esi+0x3e9f0012],bh
    1b7a:	00 00                	add    BYTE PTR [eax],al
    1b7c:	00 01                	add    BYTE PTR [ecx],al
    1b7e:	9c                   	pushf  
    1b7f:	ef                   	out    dx,eax
    1b80:	02 00                	add    al,BYTE PTR [eax]
    1b82:	00 0d 12 08 00 00    	add    BYTE PTR ds:0x812,cl
    1b88:	01 1f                	add    DWORD PTR [edi],ebx
    1b8a:	5a                   	pop    edx
    1b8b:	00 00                	add    BYTE PTR [eax],al
    1b8d:	00 02                	add    BYTE PTR [edx],al
    1b8f:	91                   	xchg   ecx,eax
    1b90:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1b96:	01 1f                	add    DWORD PTR [edi],ebx
    1b98:	76 00                	jbe    1b9a <sysEnter_Vector-0x12e466>
    1b9a:	00 00                	add    BYTE PTR [eax],al
    1b9c:	02 91 04 0d bf 08    	add    dl,BYTE PTR [ecx+0x8bf0d04]
    1ba2:	00 00                	add    BYTE PTR [eax],al
    1ba4:	01 1f                	add    DWORD PTR [edi],ebx
    1ba6:	76 00                	jbe    1ba8 <sysEnter_Vector-0x12e458>
    1ba8:	00 00                	add    BYTE PTR [eax],al
    1baa:	02 91 08 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e08]
    1bb0:	00 00                	add    BYTE PTR [eax],al
    1bb2:	01 21                	add    DWORD PTR [ecx],esp
    1bb4:	5a                   	pop    edx
    1bb5:	00 00                	add    BYTE PTR [eax],al
    1bb7:	00 02                	add    BYTE PTR [edx],al
    1bb9:	91                   	xchg   ecx,eax
    1bba:	6c                   	ins    BYTE PTR es:[edi],dx
    1bbb:	00 0c 38             	add    BYTE PTR [eax+edi*1],cl
    1bbe:	08 00                	or     BYTE PTR [eax],al
    1bc0:	00 01                	add    BYTE PTR [ecx],al
    1bc2:	26                   	es
    1bc3:	5a                   	pop    edx
    1bc4:	00 00                	add    BYTE PTR [eax],al
    1bc6:	00 fc                	add    ah,bh
    1bc8:	12 00                	adc    al,BYTE PTR [eax]
    1bca:	9f                   	lahf   
    1bcb:	40                   	inc    eax
    1bcc:	00 00                	add    BYTE PTR [eax],al
    1bce:	00 01                	add    BYTE PTR [ecx],al
    1bd0:	9c                   	pushf  
    1bd1:	33 03                	xor    eax,DWORD PTR [ebx]
    1bd3:	00 00                	add    BYTE PTR [eax],al
    1bd5:	0d 12 08 00 00       	or     eax,0x812
    1bda:	01 26                	add    DWORD PTR [esi],esp
    1bdc:	5a                   	pop    edx
    1bdd:	00 00                	add    BYTE PTR [eax],al
    1bdf:	00 02                	add    BYTE PTR [edx],al
    1be1:	91                   	xchg   ecx,eax
    1be2:	00 0d b8 08 00 00    	add    BYTE PTR ds:0x8b8,cl
    1be8:	01 26                	add    DWORD PTR [esi],esp
    1bea:	76 00                	jbe    1bec <sysEnter_Vector-0x12e414>
    1bec:	00 00                	add    BYTE PTR [eax],al
    1bee:	02 91 04 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e04]
    1bf4:	00 00                	add    BYTE PTR [eax],al
    1bf6:	01 28                	add    DWORD PTR [eax],ebp
    1bf8:	5a                   	pop    edx
    1bf9:	00 00                	add    BYTE PTR [eax],al
    1bfb:	00 02                	add    BYTE PTR [edx],al
    1bfd:	91                   	xchg   ecx,eax
    1bfe:	6c                   	ins    BYTE PTR es:[edi],dx
    1bff:	00 0c 44             	add    BYTE PTR [esp+eax*2],cl
    1c02:	09 00                	or     DWORD PTR [eax],eax
    1c04:	00 01                	add    BYTE PTR [ecx],al
    1c06:	2d 5a 00 00 00       	sub    eax,0x5a
    1c0b:	3c 13                	cmp    al,0x13
    1c0d:	00 9f 42 00 00 00    	add    BYTE PTR [edi+0x42],bl
    1c13:	01 9c 69 03 00 00 0d 	add    DWORD PTR [ecx+ebp*2+0xd000003],ebx
    1c1a:	12 08                	adc    cl,BYTE PTR [eax]
    1c1c:	00 00                	add    BYTE PTR [eax],al
    1c1e:	01 2d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebp
    1c24:	02 91 00 0e 06 05    	add    dl,BYTE PTR [ecx+0x5060e00]
    1c2a:	00 00                	add    BYTE PTR [eax],al
    1c2c:	01 2f                	add    DWORD PTR [edi],ebp
    1c2e:	5a                   	pop    edx
    1c2f:	00 00                	add    BYTE PTR [eax],al
    1c31:	00 02                	add    BYTE PTR [edx],al
    1c33:	91                   	xchg   ecx,eax
    1c34:	6c                   	ins    BYTE PTR es:[edi],dx
    1c35:	00 0f                	add    BYTE PTR [edi],cl
    1c37:	b6 07                	mov    dh,0x7
    1c39:	00 00                	add    BYTE PTR [eax],al
    1c3b:	01 34 7e             	add    DWORD PTR [esi+edi*2],esi
    1c3e:	13 00                	adc    eax,DWORD PTR [eax]
    1c40:	9f                   	lahf   
    1c41:	cb                   	retf   
    1c42:	00 00                	add    BYTE PTR [eax],al
    1c44:	00 01                	add    BYTE PTR [ecx],al
    1c46:	9c                   	pushf  
    1c47:	10 5f 09             	adc    BYTE PTR [edi+0x9],bl
    1c4a:	00 00                	add    BYTE PTR [eax],al
    1c4c:	01 48 49             	add    DWORD PTR [eax+0x49],ecx
    1c4f:	14 00                	adc    al,0x0
    1c51:	9f                   	lahf   
    1c52:	23 00                	and    eax,DWORD PTR [eax]
    1c54:	00 00                	add    BYTE PTR [eax],al
    1c56:	01 9c 11 69 07 00 00 	add    DWORD PTR [ecx+edx*1+0x769],ebx
    1c5d:	01 4e 5a             	add    DWORD PTR [esi+0x5a],ecx
    1c60:	00 00                	add    BYTE PTR [eax],al
    1c62:	00 6c 14 00          	add    BYTE PTR [esp+edx*1+0x0],ch
    1c66:	9f                   	lahf   
    1c67:	59                   	pop    ecx
    1c68:	00 00                	add    BYTE PTR [eax],al
    1c6a:	00 01                	add    BYTE PTR [ecx],al
    1c6c:	9c                   	pushf  
    1c6d:	d0 03                	rol    BYTE PTR [ebx],1
    1c6f:	00 00                	add    BYTE PTR [eax],al
    1c71:	0d e7 08 00 00       	or     eax,0x8e7
    1c76:	01 4e b3             	add    DWORD PTR [esi-0x4d],ecx
    1c79:	00 00                	add    BYTE PTR [eax],al
    1c7b:	00 02                	add    BYTE PTR [edx],al
    1c7d:	91                   	xchg   ecx,eax
    1c7e:	00 12                	add    BYTE PTR [edx],dl
    1c80:	0e                   	push   cs
    1c81:	ac                   	lods   al,BYTE PTR ds:[esi]
    1c82:	09 00                	or     DWORD PTR [eax],eax
    1c84:	00 01                	add    BYTE PTR [ecx],al
    1c86:	50                   	push   eax
    1c87:	41                   	inc    ecx
    1c88:	00 00                	add    BYTE PTR [eax],al
    1c8a:	00 02                	add    BYTE PTR [edx],al
    1c8c:	91                   	xchg   ecx,eax
    1c8d:	68 0e ba 06 00       	push   0x6ba0e
    1c92:	00 01                	add    BYTE PTR [ecx],al
    1c94:	53                   	push   ebx
    1c95:	5a                   	pop    edx
    1c96:	00 00                	add    BYTE PTR [eax],al
    1c98:	00 02                	add    BYTE PTR [edx],al
    1c9a:	91                   	xchg   ecx,eax
    1c9b:	6c                   	ins    BYTE PTR es:[edi],dx
    1c9c:	00 11                	add    BYTE PTR [ecx],dl
    1c9e:	35 0c 00 00 01       	xor    eax,0x100000c
    1ca3:	58                   	pop    eax
    1ca4:	5a                   	pop    edx
    1ca5:	00 00                	add    BYTE PTR [eax],al
    1ca7:	00 c5                	add    ch,al
    1ca9:	14 00                	adc    al,0x0
    1cab:	9f                   	lahf   
    1cac:	54                   	push   esp
    1cad:	00 00                	add    BYTE PTR [eax],al
    1caf:	00 01                	add    BYTE PTR [ecx],al
    1cb1:	9c                   	pushf  
    1cb2:	15 04 00 00 0d       	adc    eax,0xd000004
    1cb7:	e7 08                	out    0x8,eax
    1cb9:	00 00                	add    BYTE PTR [eax],al
    1cbb:	01 58 b3             	add    DWORD PTR [eax-0x4d],ebx
    1cbe:	00 00                	add    BYTE PTR [eax],al
    1cc0:	00 02                	add    BYTE PTR [edx],al
    1cc2:	91                   	xchg   ecx,eax
    1cc3:	00 12                	add    BYTE PTR [edx],dl
    1cc5:	0e                   	push   cs
    1cc6:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cc7:	09 00                	or     DWORD PTR [eax],eax
    1cc9:	00 01                	add    BYTE PTR [ecx],al
    1ccb:	5a                   	pop    edx
    1ccc:	41                   	inc    ecx
    1ccd:	00 00                	add    BYTE PTR [eax],al
    1ccf:	00 02                	add    BYTE PTR [edx],al
    1cd1:	91                   	xchg   ecx,eax
    1cd2:	68 0e ba 06 00       	push   0x6ba0e
    1cd7:	00 01                	add    BYTE PTR [ecx],al
    1cd9:	5d                   	pop    ebp
    1cda:	5a                   	pop    edx
    1cdb:	00 00                	add    BYTE PTR [eax],al
    1cdd:	00 02                	add    BYTE PTR [edx],al
    1cdf:	91                   	xchg   ecx,eax
    1ce0:	6c                   	ins    BYTE PTR es:[edi],dx
    1ce1:	00 11                	add    BYTE PTR [ecx],dl
    1ce3:	57                   	push   edi
    1ce4:	09 00                	or     DWORD PTR [eax],eax
    1ce6:	00 01                	add    BYTE PTR [ecx],al
    1ce8:	61                   	popa   
    1ce9:	5a                   	pop    edx
    1cea:	00 00                	add    BYTE PTR [eax],al
    1cec:	00 19                	add    BYTE PTR [ecx],bl
    1cee:	15 00 9f 54 00       	adc    eax,0x549f00
    1cf3:	00 00                	add    BYTE PTR [eax],al
    1cf5:	01 9c 5a 04 00 00 0d 	add    DWORD PTR [edx+ebx*2+0xd000004],ebx
    1cfc:	e7 08                	out    0x8,eax
    1cfe:	00 00                	add    BYTE PTR [eax],al
    1d00:	01 61 b3             	add    DWORD PTR [ecx-0x4d],esp
    1d03:	00 00                	add    BYTE PTR [eax],al
    1d05:	00 02                	add    BYTE PTR [edx],al
    1d07:	91                   	xchg   ecx,eax
    1d08:	00 12                	add    BYTE PTR [edx],dl
    1d0a:	0e                   	push   cs
    1d0b:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d0c:	09 00                	or     DWORD PTR [eax],eax
    1d0e:	00 01                	add    BYTE PTR [ecx],al
    1d10:	63 41 00             	arpl   WORD PTR [ecx+0x0],ax
    1d13:	00 00                	add    BYTE PTR [eax],al
    1d15:	02 91 68 0e ba 06    	add    dl,BYTE PTR [ecx+0x6ba0e68]
    1d1b:	00 00                	add    BYTE PTR [eax],al
    1d1d:	01 66 5a             	add    DWORD PTR [esi+0x5a],esp
    1d20:	00 00                	add    BYTE PTR [eax],al
    1d22:	00 02                	add    BYTE PTR [edx],al
    1d24:	91                   	xchg   ecx,eax
    1d25:	6c                   	ins    BYTE PTR es:[edi],dx
    1d26:	00 11                	add    BYTE PTR [ecx],dl
    1d28:	b1 09                	mov    cl,0x9
    1d2a:	00 00                	add    BYTE PTR [eax],al
    1d2c:	01 6a 5a             	add    DWORD PTR [edx+0x5a],ebp
    1d2f:	00 00                	add    BYTE PTR [eax],al
    1d31:	00 6d 15             	add    BYTE PTR [ebp+0x15],ch
    1d34:	00 9f 34 00 00 00    	add    BYTE PTR [edi+0x34],bl
    1d3a:	01 9c 91 04 00 00 0d 	add    DWORD PTR [ecx+edx*4+0xd000004],ebx
    1d41:	e7 08                	out    0x8,eax
    1d43:	00 00                	add    BYTE PTR [eax],al
    1d45:	01 6a b3             	add    DWORD PTR [edx-0x4d],ebp
    1d48:	00 00                	add    BYTE PTR [eax],al
    1d4a:	00 02                	add    BYTE PTR [edx],al
    1d4c:	91                   	xchg   ecx,eax
    1d4d:	00 12                	add    BYTE PTR [edx],dl
    1d4f:	0e                   	push   cs
    1d50:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d51:	09 00                	or     DWORD PTR [eax],eax
    1d53:	00 01                	add    BYTE PTR [ecx],al
    1d55:	6c                   	ins    BYTE PTR es:[edi],dx
    1d56:	41                   	inc    ecx
    1d57:	00 00                	add    BYTE PTR [eax],al
    1d59:	00 02                	add    BYTE PTR [edx],al
    1d5b:	91                   	xchg   ecx,eax
    1d5c:	74 00                	je     1d5e <sysEnter_Vector-0x12e2a2>
    1d5e:	11 bd 09 00 00 01    	adc    DWORD PTR [ebp+0x1000009],edi
    1d64:	72 5a                	jb     1dc0 <sysEnter_Vector-0x12e240>
    1d66:	00 00                	add    BYTE PTR [eax],al
    1d68:	00 a1 15 00 9f 37    	add    BYTE PTR [ecx+0x379f0015],ah
    1d6e:	00 00                	add    BYTE PTR [eax],al
    1d70:	00 01                	add    BYTE PTR [ecx],al
    1d72:	9c                   	pushf  
    1d73:	d6                   	(bad)  
    1d74:	04 00                	add    al,0x0
    1d76:	00 0d 07 08 00 00    	add    BYTE PTR ds:0x807,cl
    1d7c:	01 72 76             	add    DWORD PTR [edx+0x76],esi
    1d7f:	00 00                	add    BYTE PTR [eax],al
    1d81:	00 02                	add    BYTE PTR [edx],al
    1d83:	91                   	xchg   ecx,eax
    1d84:	00 0d e7 08 00 00    	add    BYTE PTR ds:0x8e7,cl
    1d8a:	01 72 b3             	add    DWORD PTR [edx-0x4d],esi
    1d8d:	00 00                	add    BYTE PTR [eax],al
    1d8f:	00 02                	add    BYTE PTR [edx],al
    1d91:	91                   	xchg   ecx,eax
    1d92:	04 12                	add    al,0x12
    1d94:	0e                   	push   cs
    1d95:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d96:	09 00                	or     DWORD PTR [eax],eax
    1d98:	00 01                	add    BYTE PTR [ecx],al
    1d9a:	74 41                	je     1ddd <sysEnter_Vector-0x12e223>
    1d9c:	00 00                	add    BYTE PTR [eax],al
    1d9e:	00 02                	add    BYTE PTR [edx],al
    1da0:	91                   	xchg   ecx,eax
    1da1:	74 00                	je     1da3 <sysEnter_Vector-0x12e25d>
    1da3:	11 a1 08 00 00 01    	adc    DWORD PTR [ecx+0x1000008],esp
    1da9:	7c 5a                	jl     1e05 <sysEnter_Vector-0x12e1fb>
    1dab:	00 00                	add    BYTE PTR [eax],al
    1dad:	00 d8                	add    al,bl
    1daf:	15 00 9f 37 00       	adc    eax,0x379f00
    1db4:	00 00                	add    BYTE PTR [eax],al
    1db6:	01 9c 1b 05 00 00 0d 	add    DWORD PTR [ebx+ebx*1+0xd000005],ebx
    1dbd:	07                   	pop    es
    1dbe:	08 00                	or     BYTE PTR [eax],al
    1dc0:	00 01                	add    BYTE PTR [ecx],al
    1dc2:	7c 76                	jl     1e3a <sysEnter_Vector-0x12e1c6>
    1dc4:	00 00                	add    BYTE PTR [eax],al
    1dc6:	00 02                	add    BYTE PTR [edx],al
    1dc8:	91                   	xchg   ecx,eax
    1dc9:	00 0d e7 08 00 00    	add    BYTE PTR ds:0x8e7,cl
    1dcf:	01 7c b3 00          	add    DWORD PTR [ebx+esi*4+0x0],edi
    1dd3:	00 00                	add    BYTE PTR [eax],al
    1dd5:	02 91 04 12 0e ac    	add    dl,BYTE PTR [ecx-0x53f1edfc]
    1ddb:	09 00                	or     DWORD PTR [eax],eax
    1ddd:	00 01                	add    BYTE PTR [ecx],al
    1ddf:	7e 41                	jle    1e22 <sysEnter_Vector-0x12e1de>
    1de1:	00 00                	add    BYTE PTR [eax],al
    1de3:	00 02                	add    BYTE PTR [edx],al
    1de5:	91                   	xchg   ecx,eax
    1de6:	74 00                	je     1de8 <sysEnter_Vector-0x12e218>
    1de8:	0c 23                	or     al,0x23
    1dea:	08 00                	or     BYTE PTR [eax],al
    1dec:	00 01                	add    BYTE PTR [ecx],al
    1dee:	86 81 00 00 00 0f    	xchg   BYTE PTR [ecx+0xf000000],al
    1df4:	16                   	push   ss
    1df5:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1dfb:	01 9c 67 05 00 00 0d 	add    DWORD PTR [edi+eiz*2+0xd000005],ebx
    1e02:	06                   	push   es
    1e03:	09 00                	or     DWORD PTR [eax],eax
    1e05:	00 01                	add    BYTE PTR [ecx],al
    1e07:	86 81 00 00 00 02    	xchg   BYTE PTR [ecx+0x2000000],al
    1e0d:	91                   	xchg   ecx,eax
    1e0e:	00 13                	add    BYTE PTR [ebx],dl
    1e10:	21 16                	and    DWORD PTR [esi],edx
    1e12:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1e18:	14 73                	adc    al,0x73
    1e1a:	32 00                	xor    al,BYTE PTR [eax]
    1e1c:	01 88 76 00 00 00    	add    DWORD PTR [eax+0x76],ecx
    1e22:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1e28:	00 01                	add    BYTE PTR [ecx],al
    1e2a:	88 76 00             	mov    BYTE PTR [esi+0x0],dh
    1e2d:	00 00                	add    BYTE PTR [eax],al
    1e2f:	02 91 68 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000068]
    1e35:	84 07                	test   BYTE PTR [edi],al
    1e37:	00 00                	add    BYTE PTR [eax],al
    1e39:	01 8b 81 00 00 00    	add    DWORD PTR [ebx+0x81],ecx
    1e3f:	7f 16                	jg     1e57 <sysEnter_Vector-0x12e1a9>
    1e41:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1e47:	01 9c b3 05 00 00 0d 	add    DWORD PTR [ebx+esi*4+0xd000005],ebx
    1e4e:	a9 08 00 00 01       	test   eax,0x1000008
    1e53:	8b 81 00 00 00 02    	mov    eax,DWORD PTR [ecx+0x2000000]
    1e59:	91                   	xchg   ecx,eax
    1e5a:	00 13                	add    BYTE PTR [ebx],dl
    1e5c:	91                   	xchg   ecx,eax
    1e5d:	16                   	push   ss
    1e5e:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1e64:	14 73                	adc    al,0x73
    1e66:	32 00                	xor    al,BYTE PTR [eax]
    1e68:	01 8d 76 00 00 00    	add    DWORD PTR [ebp+0x76],ecx
    1e6e:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1e74:	00 01                	add    BYTE PTR [ecx],al
    1e76:	8d 76 00             	lea    esi,[esi+0x0]
    1e79:	00 00                	add    BYTE PTR [eax],al
    1e7b:	02 91 68 00 00 0f    	add    dl,BYTE PTR [ecx+0xf000068]
    1e81:	b8 09 00 00 01       	mov    eax,0x1000009
    1e86:	91                   	xchg   ecx,eax
    1e87:	ef                   	out    dx,eax
    1e88:	16                   	push   ss
    1e89:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    1e8f:	01 9c 15 9f 09 00 00 	add    DWORD PTR [ebp+edx*1+0x99f],ebx
    1e96:	01 96 0c 17 00 9f    	add    DWORD PTR [esi-0x60ffe8f4],edx
    1e9c:	29 00                	sub    DWORD PTR [eax],eax
    1e9e:	00 00                	add    BYTE PTR [eax],al
    1ea0:	01 9c 04 06 00 00 0d 	add    DWORD PTR [esp+eax*1+0xd000006],ebx
    1ea7:	fa                   	cli    
    1ea8:	08 00                	or     BYTE PTR [eax],al
    1eaa:	00 01                	add    BYTE PTR [ecx],al
    1eac:	96                   	xchg   esi,eax
    1ead:	5a                   	pop    edx
    1eae:	00 00                	add    BYTE PTR [eax],al
    1eb0:	00 02                	add    BYTE PTR [edx],al
    1eb2:	91                   	xchg   ecx,eax
    1eb3:	00 0d 84 09 00 00    	add    BYTE PTR ds:0x984,cl
    1eb9:	01 96 c0 01 00 00    	add    DWORD PTR [esi+0x1c0],edx
    1ebf:	02 91 04 0d 7c 07    	add    dl,BYTE PTR [ecx+0x77c0d04]
    1ec5:	00 00                	add    BYTE PTR [eax],al
    1ec7:	01 96 5a 00 00 00    	add    DWORD PTR [esi+0x5a],edx
    1ecd:	02 91 08 00 16 de    	add    dl,BYTE PTR [ecx-0x21e9fff8]
    1ed3:	07                   	pop    es
    1ed4:	00 00                	add    BYTE PTR [eax],al
    1ed6:	01 9b 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],ebx
    1edc:	35 17 00 9f 29       	xor    eax,0x299f0017
    1ee1:	00 00                	add    BYTE PTR [eax],al
    1ee3:	00 01                	add    BYTE PTR [ecx],al
    1ee5:	9c                   	pushf  
    1ee6:	2c 06                	sub    al,0x6
    1ee8:	00 00                	add    BYTE PTR [eax],al
    1eea:	0e                   	push   cs
    1eeb:	06                   	push   es
    1eec:	05 00 00 01 9d       	add    eax,0x9d010000
    1ef1:	76 00                	jbe    1ef3 <sysEnter_Vector-0x12e10d>
    1ef3:	00 00                	add    BYTE PTR [eax],al
    1ef5:	02 91 74 00 11 01    	add    dl,BYTE PTR [ecx+0x1110074]
    1efb:	09 00                	or     DWORD PTR [eax],eax
    1efd:	00 01                	add    BYTE PTR [ecx],al
    1eff:	a3 5a 00 00 00       	mov    ds:0x5a,eax
    1f04:	5e                   	pop    esi
    1f05:	17                   	pop    ss
    1f06:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
    1f0c:	01 9c 7e 06 00 00 0d 	add    DWORD PTR [esi+edi*2+0xd000006],ebx
    1f13:	36                   	ss
    1f14:	05 00 00 01 a3       	add    eax,0xa3010000
    1f19:	c9                   	leave  
    1f1a:	01 00                	add    DWORD PTR [eax],eax
    1f1c:	00 02                	add    BYTE PTR [edx],al
    1f1e:	91                   	xchg   ecx,eax
    1f1f:	00 0d 37 09 00 00    	add    BYTE PTR ds:0x937,cl
    1f25:	01 a3 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],esp
    1f2b:	02 91 04 0d 6c 09    	add    dl,BYTE PTR [ecx+0x96c0d04]
    1f31:	00 00                	add    BYTE PTR [eax],al
    1f33:	01 a3 7e 06 00 00    	add    DWORD PTR [ebx+0x67e],esp
    1f39:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1f3f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f42:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1f43:	5a                   	pop    edx
    1f44:	00 00                	add    BYTE PTR [eax],al
    1f46:	00 02                	add    BYTE PTR [edx],al
    1f48:	91                   	xchg   ecx,eax
    1f49:	74 00                	je     1f4b <sysEnter_Vector-0x12e0b5>
    1f4b:	06                   	push   es
    1f4c:	04 c9                	add    al,0xc9
    1f4e:	01 00                	add    DWORD PTR [eax],eax
    1f50:	00 11                	add    BYTE PTR [ecx],dl
    1f52:	e1 08                	loope  1f5c <sysEnter_Vector-0x12e0a4>
    1f54:	00 00                	add    BYTE PTR [eax],al
    1f56:	01 ab 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],ebp
    1f5c:	aa                   	stos   BYTE PTR es:[edi],al
    1f5d:	17                   	pop    ss
    1f5e:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
    1f64:	01 9c 26 07 00 00 0d 	add    DWORD PTR [esi+eiz*1+0xd000007],ebx
    1f6b:	36                   	ss
    1f6c:	05 00 00 01 ab       	add    eax,0xab010000
    1f71:	c9                   	leave  
    1f72:	01 00                	add    DWORD PTR [eax],eax
    1f74:	00 02                	add    BYTE PTR [edx],al
    1f76:	91                   	xchg   ecx,eax
    1f77:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    1f7a:	69 64 00 01 ad 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5aad
    1f81:	00 
    1f82:	00 02                	add    BYTE PTR [edx],al
    1f84:	91                   	xchg   ecx,eax
    1f85:	58                   	pop    eax
    1f86:	0e                   	push   cs
    1f87:	37                   	aaa    
    1f88:	09 00                	or     DWORD PTR [eax],eax
    1f8a:	00 01                	add    BYTE PTR [ecx],al
    1f8c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1f8d:	5a                   	pop    edx
    1f8e:	00 00                	add    BYTE PTR [eax],al
    1f90:	00 02                	add    BYTE PTR [edx],al
    1f92:	91                   	xchg   ecx,eax
    1f93:	6c                   	ins    BYTE PTR es:[edi],dx
    1f94:	0e                   	push   cs
    1f95:	6c                   	ins    BYTE PTR es:[edi],dx
    1f96:	09 00                	or     DWORD PTR [eax],eax
    1f98:	00 01                	add    BYTE PTR [ecx],al
    1f9a:	ae                   	scas   al,BYTE PTR es:[edi]
    1f9b:	7e 06                	jle    1fa3 <sysEnter_Vector-0x12e05d>
    1f9d:	00 00                	add    BYTE PTR [eax],al
    1f9f:	02 91 50 0e e3 07    	add    dl,BYTE PTR [ecx+0x7e30e50]
    1fa5:	00 00                	add    BYTE PTR [eax],al
    1fa7:	01 af c9 01 00 00    	add    DWORD PTR [edi+0x1c9],ebp
    1fad:	02 91 68 0e 6f 07    	add    dl,BYTE PTR [ecx+0x76f0e68]
    1fb3:	00 00                	add    BYTE PTR [eax],al
    1fb5:	01 af c9 01 00 00    	add    DWORD PTR [edi+0x1c9],ebp
    1fbb:	02 91 64 0e ae 07    	add    dl,BYTE PTR [ecx+0x7ae0e64]
    1fc1:	00 00                	add    BYTE PTR [eax],al
    1fc3:	01 b0 c9 01 00 00    	add    DWORD PTR [eax+0x1c9],esi
    1fc9:	02 91 54 0e 98 07    	add    dl,BYTE PTR [ecx+0x7980e54]
    1fcf:	00 00                	add    BYTE PTR [eax],al
    1fd1:	01 c1                	add    ecx,eax
    1fd3:	5a                   	pop    edx
    1fd4:	00 00                	add    BYTE PTR [eax],al
    1fd6:	00 02                	add    BYTE PTR [edx],al
    1fd8:	91                   	xchg   ecx,eax
    1fd9:	60                   	pusha  
    1fda:	13 80 18 00 9f e0    	adc    eax,DWORD PTR [eax-0x1f60ffe8]
    1fe0:	00 00                	add    BYTE PTR [eax],al
    1fe2:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    1fe5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1fe6:	74 00                	je     1fe8 <sysEnter_Vector-0x12e018>
    1fe8:	01 c3                	add    ebx,eax
    1fea:	5a                   	pop    edx
    1feb:	00 00                	add    BYTE PTR [eax],al
    1fed:	00 02                	add    BYTE PTR [edx],al
    1fef:	91                   	xchg   ecx,eax
    1ff0:	5c                   	pop    esp
    1ff1:	00 00                	add    BYTE PTR [eax],al
    1ff3:	11 db                	adc    ebx,ebx
    1ff5:	08 00                	or     BYTE PTR [eax],al
    1ff7:	00 01                	add    BYTE PTR [ecx],al
    1ff9:	d9 5a 00             	fstp   DWORD PTR [edx+0x0]
    1ffc:	00 00                	add    BYTE PTR [eax],al
    1ffe:	9e                   	sahf   
    1fff:	19 00                	sbb    DWORD PTR [eax],eax
    2001:	9f                   	lahf   
    2002:	4f                   	dec    edi
    2003:	00 00                	add    BYTE PTR [eax],al
    2005:	00 01                	add    BYTE PTR [ecx],al
    2007:	9c                   	pushf  
    2008:	78 07                	js     2011 <sysEnter_Vector-0x12dfef>
    200a:	00 00                	add    BYTE PTR [eax],al
    200c:	0d 36 05 00 00       	or     eax,0x536
    2011:	01 d9                	add    ecx,ebx
    2013:	c9                   	leave  
    2014:	01 00                	add    DWORD PTR [eax],eax
    2016:	00 02                	add    BYTE PTR [edx],al
    2018:	91                   	xchg   ecx,eax
    2019:	00 0d 37 09 00 00    	add    BYTE PTR ds:0x937,cl
    201f:	01 d9                	add    ecx,ebx
    2021:	5a                   	pop    edx
    2022:	00 00                	add    BYTE PTR [eax],al
    2024:	00 02                	add    BYTE PTR [edx],al
    2026:	91                   	xchg   ecx,eax
    2027:	04 0d                	add    al,0xd
    2029:	6c                   	ins    BYTE PTR es:[edi],dx
    202a:	09 00                	or     DWORD PTR [eax],eax
    202c:	00 01                	add    BYTE PTR [ecx],al
    202e:	d9 7e 06             	fnstcw WORD PTR [esi+0x6]
    2031:	00 00                	add    BYTE PTR [eax],al
    2033:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    2039:	64 00 01             	add    BYTE PTR fs:[ecx],al
    203c:	db 5a 00             	fistp  DWORD PTR [edx+0x0]
    203f:	00 00                	add    BYTE PTR [eax],al
    2041:	02 91 74 00 11 ff    	add    dl,BYTE PTR [ecx-0xeeff8c]
    2047:	07                   	pop    es
    2048:	00 00                	add    BYTE PTR [eax],al
    204a:	01 e1                	add    ecx,esp
    204c:	5a                   	pop    edx
    204d:	00 00                	add    BYTE PTR [eax],al
    204f:	00 ed                	add    ch,ch
    2051:	19 00                	sbb    DWORD PTR [eax],eax
    2053:	9f                   	lahf   
    2054:	1c 00                	sbb    al,0x0
    2056:	00 00                	add    BYTE PTR [eax],al
    2058:	01 9c a0 07 00 00 17 	add    DWORD PTR [eax+eiz*4+0x17000007],ebx
    205f:	70 69                	jo     20ca <sysEnter_Vector-0x12df36>
    2061:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2064:	e1 76                	loope  20dc <sysEnter_Vector-0x12df24>
    2066:	00 00                	add    BYTE PTR [eax],al
    2068:	00 02                	add    BYTE PTR [edx],al
    206a:	91                   	xchg   ecx,eax
    206b:	00 00                	add    BYTE PTR [eax],al
    206d:	15 71 09 00 00       	adc    eax,0x971
    2072:	01 e7                	add    edi,esp
    2074:	09 1a                	or     DWORD PTR [edx],ebx
    2076:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    207c:	01 9c c4 07 00 00 0d 	add    DWORD PTR [esp+eax*8+0xd000007],ebx
    2083:	76 09                	jbe    208e <sysEnter_Vector-0x12df72>
    2085:	00 00                	add    BYTE PTR [eax],al
    2087:	01 e7                	add    edi,esp
    2089:	5a                   	pop    edx
    208a:	00 00                	add    BYTE PTR [eax],al
    208c:	00 02                	add    BYTE PTR [edx],al
    208e:	91                   	xchg   ecx,eax
    208f:	00 00                	add    BYTE PTR [eax],al
    2091:	11 d4                	adc    esp,edx
    2093:	08 00                	or     BYTE PTR [eax],al
    2095:	00 01                	add    BYTE PTR [ecx],al
    2097:	ec                   	in     al,dx
    2098:	c9                   	leave  
    2099:	01 00                	add    DWORD PTR [eax],eax
    209b:	00 29                	add    BYTE PTR [ecx],ch
    209d:	1a 00                	sbb    al,BYTE PTR [eax]
    209f:	9f                   	lahf   
    20a0:	20 00                	and    BYTE PTR [eax],al
    20a2:	00 00                	add    BYTE PTR [eax],al
    20a4:	01 9c fa 07 00 00 17 	add    DWORD PTR [edx+edi*8+0x17000007],ebx
    20ab:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    20ae:	00 01                	add    BYTE PTR [ecx],al
    20b0:	ec                   	in     al,dx
    20b1:	c9                   	leave  
    20b2:	01 00                	add    DWORD PTR [eax],eax
    20b4:	00 02                	add    BYTE PTR [edx],al
    20b6:	91                   	xchg   ecx,eax
    20b7:	00 0d ba 06 00 00    	add    BYTE PTR ds:0x6ba,cl
    20bd:	01 ec                	add    esp,ebp
    20bf:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    20c6:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    20c9:	09 00                	or     DWORD PTR [eax],eax
    20cb:	00 01                	add    BYTE PTR [ecx],al
    20cd:	f1                   	icebp  
    20ce:	9a 00 00 00 49 1a 00 	call   0x1a:0x49000000
    20d5:	9f                   	lahf   
    20d6:	44                   	inc    esp
    20d7:	01 00                	add    DWORD PTR [eax],eax
    20d9:	00 01                	add    BYTE PTR [ecx],al
    20db:	9c                   	pushf  
    20dc:	d8 08                	fmul   DWORD PTR [eax]
    20de:	00 00                	add    BYTE PTR [eax],al
    20e0:	0d 8b 06 00 00       	or     eax,0x68b
    20e5:	01 f1                	add    ecx,esi
    20e7:	c9                   	leave  
    20e8:	01 00                	add    DWORD PTR [eax],eax
    20ea:	00 02                	add    BYTE PTR [edx],al
    20ec:	91                   	xchg   ecx,eax
    20ed:	00 0d 6c 09 00 00    	add    BYTE PTR ds:0x96c,cl
    20f3:	01 f1                	add    ecx,esi
    20f5:	7e 06                	jle    20fd <sysEnter_Vector-0x12df03>
    20f7:	00 00                	add    BYTE PTR [eax],al
    20f9:	02 91 04 0d 70 08    	add    dl,BYTE PTR [ecx+0x8700d04]
    20ff:	00 00                	add    BYTE PTR [eax],al
    2101:	01 f1                	add    ecx,esi
    2103:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    210a:	14 70                	adc    al,0x70
    210c:	00 01                	add    BYTE PTR [ecx],al
    210e:	f3 c9                	repz leave 
    2110:	01 00                	add    DWORD PTR [eax],eax
    2112:	00 02                	add    BYTE PTR [edx],al
    2114:	91                   	xchg   ecx,eax
    2115:	74 0e                	je     2125 <sysEnter_Vector-0x12dedb>
    2117:	a0 07 00 00 01       	mov    al,ds:0x1000007
    211c:	f3 c9                	repz leave 
    211e:	01 00                	add    DWORD PTR [eax],eax
    2120:	00 02                	add    BYTE PTR [edx],al
    2122:	91                   	xchg   ecx,eax
    2123:	70 14                	jo     2139 <sysEnter_Vector-0x12dec7>
    2125:	63 00                	arpl   WORD PTR [eax],ax
    2127:	01 f4                	add    esp,esi
    2129:	5a                   	pop    edx
    212a:	00 00                	add    BYTE PTR [eax],al
    212c:	00 02                	add    BYTE PTR [edx],al
    212e:	91                   	xchg   ecx,eax
    212f:	64 08 15 09 00 00 04 	or     BYTE PTR fs:0x4000009,dl
    2136:	81 00 00 00 01 f5    	add    DWORD PTR [eax],0xf5010000
    213c:	86 08                	xchg   BYTE PTR [eax],cl
    213e:	00 00                	add    BYTE PTR [eax],al
    2140:	09 10                	or     DWORD PTR [eax],edx
    2142:	09 00                	or     DWORD PTR [eax],eax
    2144:	00 00                	add    BYTE PTR [eax],al
    2146:	09 68 08             	or     DWORD PTR [eax+0x8],ebp
    2149:	00 00                	add    BYTE PTR [eax],al
    214b:	01 09                	add    DWORD PTR [ecx],ecx
    214d:	1c 09                	sbb    al,0x9
    214f:	00 00                	add    BYTE PTR [eax],al
    2151:	02 00                	add    al,BYTE PTR [eax]
    2153:	0e                   	push   cs
    2154:	c0 07 00             	rol    BYTE PTR [edi],0x0
    2157:	00 01                	add    BYTE PTR [ecx],al
    2159:	f5                   	cmc    
    215a:	63 08                	arpl   WORD PTR [eax],cx
    215c:	00 00                	add    BYTE PTR [eax],al
    215e:	02 91 6c 0e 37 09    	add    dl,BYTE PTR [ecx+0x9370e6c]
    2164:	00 00                	add    BYTE PTR [eax],al
    2166:	01 f6                	add    esi,esi
    2168:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    216f:	18 95 1a 00 9f 0e    	sbb    BYTE PTR [ebp+0xe9f001a],dl
    2175:	00 00                	add    BYTE PTR [eax],al
    2177:	00 be 08 00 00 0e    	add    BYTE PTR [esi+0xe000008],bh
    217d:	8a 08                	mov    cl,BYTE PTR [eax]
    217f:	00 00                	add    BYTE PTR [eax],al
    2181:	01 fc                	add    esp,edi
    2183:	be 00 00 00 02       	mov    esi,0x2000000
    2188:	91                   	xchg   ecx,eax
    2189:	63 00                	arpl   WORD PTR [eax],ax
    218b:	13 04 1b             	adc    eax,DWORD PTR [ebx+ebx*1]
    218e:	00 9f 0e 00 00 00    	add    BYTE PTR [edi+0xe],bl
    2194:	19 8a 08 00 00 01    	sbb    DWORD PTR [edx+0x1000008],ecx
    219a:	12 01                	adc    al,BYTE PTR [ecx]
    219c:	be 00 00 00 02       	mov    esi,0x2000000
    21a1:	91                   	xchg   ecx,eax
    21a2:	62 00                	bound  eax,QWORD PTR [eax]
    21a4:	00 1a                	add    BYTE PTR [edx],bl
    21a6:	d8 07                	fadd   DWORD PTR [edi]
    21a8:	00 00                	add    BYTE PTR [eax],al
    21aa:	01 21                	add    DWORD PTR [ecx],esp
    21ac:	01 9a 00 00 00 8d    	add    DWORD PTR [edx-0x73000000],ebx
    21b2:	1b 00                	sbb    eax,DWORD PTR [eax]
    21b4:	9f                   	lahf   
    21b5:	20 00                	and    BYTE PTR [eax],al
    21b7:	00 00                	add    BYTE PTR [eax],al
    21b9:	01 9c 20 09 00 00 1b 	add    DWORD PTR [eax+eiz*1+0x1b000009],ebx
    21c0:	8b 06                	mov    eax,DWORD PTR [esi]
    21c2:	00 00                	add    BYTE PTR [eax],al
    21c4:	01 21                	add    DWORD PTR [ecx],esp
    21c6:	01 c9                	add    ecx,ecx
    21c8:	01 00                	add    DWORD PTR [eax],eax
    21ca:	00 02                	add    BYTE PTR [edx],al
    21cc:	91                   	xchg   ecx,eax
    21cd:	00 1b                	add    BYTE PTR [ebx],bl
    21cf:	6c                   	ins    BYTE PTR es:[edi],dx
    21d0:	09 00                	or     DWORD PTR [eax],eax
    21d2:	00 01                	add    BYTE PTR [ecx],al
    21d4:	21 01                	and    DWORD PTR [ecx],eax
    21d6:	7e 06                	jle    21de <sysEnter_Vector-0x12de22>
    21d8:	00 00                	add    BYTE PTR [eax],al
    21da:	02 91 04 1b 70 08    	add    dl,BYTE PTR [ecx+0x8701b04]
    21e0:	00 00                	add    BYTE PTR [eax],al
    21e2:	01 21                	add    DWORD PTR [ecx],esp
    21e4:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    21ea:	91                   	xchg   ecx,eax
    21eb:	08 00                	or     BYTE PTR [eax],al
    21ed:	1a 29                	sbb    ch,BYTE PTR [ecx]
    21ef:	08 00                	or     BYTE PTR [eax],al
    21f1:	00 01                	add    BYTE PTR [ecx],al
    21f3:	26 01 7e 06          	add    DWORD PTR es:[esi+0x6],edi
    21f7:	00 00                	add    BYTE PTR [eax],al
    21f9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    21fa:	1b 00                	sbb    eax,DWORD PTR [eax]
    21fc:	9f                   	lahf   
    21fd:	fd                   	std    
    21fe:	02 00                	add    al,BYTE PTR [eax]
    2200:	00 01                	add    BYTE PTR [ecx],al
    2202:	9c                   	pushf  
    2203:	0f 0a                	(bad)  
    2205:	00 00                	add    BYTE PTR [eax],al
    2207:	1b 3c 09             	sbb    edi,DWORD PTR [ecx+ecx*1]
    220a:	00 00                	add    BYTE PTR [eax],al
    220c:	01 26                	add    DWORD PTR [esi],esp
    220e:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    2214:	91                   	xchg   ecx,eax
    2215:	00 1b                	add    BYTE PTR [ebx],bl
    2217:	37                   	aaa    
    2218:	09 00                	or     DWORD PTR [eax],eax
    221a:	00 01                	add    BYTE PTR [ecx],al
    221c:	26 01 0f             	add    DWORD PTR es:[edi],ecx
    221f:	0a 00                	or     al,BYTE PTR [eax]
    2221:	00 02                	add    BYTE PTR [edx],al
    2223:	91                   	xchg   ecx,eax
    2224:	04 19                	add    al,0x19
    2226:	6c                   	ins    BYTE PTR es:[edi],dx
    2227:	09 00                	or     DWORD PTR [eax],eax
    2229:	00 01                	add    BYTE PTR [ecx],al
    222b:	28 01                	sub    BYTE PTR [ecx],al
    222d:	7e 06                	jle    2235 <sysEnter_Vector-0x12ddcb>
    222f:	00 00                	add    BYTE PTR [eax],al
    2231:	02 91 54 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c54]
    2237:	64 00 01             	add    BYTE PTR fs:[ecx],al
    223a:	29 01                	sub    DWORD PTR [ecx],eax
    223c:	15 0a 00 00 03       	adc    eax,0x300000a
    2241:	91                   	xchg   ecx,eax
    2242:	d0                   	(bad)  
    2243:	77 19                	ja     225e <sysEnter_Vector-0x12dda2>
    2245:	e3 07                	jecxz  224e <sysEnter_Vector-0x12ddb2>
    2247:	00 00                	add    BYTE PTR [eax],al
    2249:	01 2a                	add    DWORD PTR [edx],ebp
    224b:	01 c9                	add    ecx,ecx
    224d:	01 00                	add    DWORD PTR [eax],eax
    224f:	00 02                	add    BYTE PTR [edx],al
    2251:	91                   	xchg   ecx,eax
    2252:	6c                   	ins    BYTE PTR es:[edi],dx
    2253:	19 6f 07             	sbb    DWORD PTR [edi+0x7],ebp
    2256:	00 00                	add    BYTE PTR [eax],al
    2258:	01 2a                	add    DWORD PTR [edx],ebp
    225a:	01 c9                	add    ecx,ecx
    225c:	01 00                	add    DWORD PTR [eax],eax
    225e:	00 02                	add    BYTE PTR [edx],al
    2260:	91                   	xchg   ecx,eax
    2261:	68 19 8f 07 00       	push   0x78f19
    2266:	00 01                	add    BYTE PTR [ecx],al
    2268:	2a 01                	sub    al,BYTE PTR [ecx]
    226a:	c9                   	leave  
    226b:	01 00                	add    DWORD PTR [eax],eax
    226d:	00 02                	add    BYTE PTR [edx],al
    226f:	91                   	xchg   ecx,eax
    2270:	5c                   	pop    esp
    2271:	19 1a                	sbb    DWORD PTR [edx],ebx
    2273:	08 00                	or     BYTE PTR [eax],al
    2275:	00 01                	add    BYTE PTR [ecx],al
    2277:	2b 01                	sub    eax,DWORD PTR [ecx]
    2279:	26 0a 00             	or     al,BYTE PTR es:[eax]
    227c:	00 03                	add    BYTE PTR [ebx],al
    227e:	91                   	xchg   ecx,eax
    227f:	ce                   	into   
    2280:	77 19                	ja     229b <sysEnter_Vector-0x12dd65>
    2282:	98                   	cwde   
    2283:	07                   	pop    es
    2284:	00 00                	add    BYTE PTR [eax],al
    2286:	01 44 01 5a          	add    DWORD PTR [ecx+eax*1+0x5a],eax
    228a:	00 00                	add    BYTE PTR [eax],al
    228c:	00 02                	add    BYTE PTR [edx],al
    228e:	91                   	xchg   ecx,eax
    228f:	64 18 64 1c 00       	sbb    BYTE PTR fs:[esp+ebx*1+0x0],ah
    2294:	9f                   	lahf   
    2295:	40                   	inc    eax
    2296:	00 00                	add    BYTE PTR [eax],al
    2298:	00 e0                	add    al,ah
    229a:	09 00                	or     DWORD PTR [eax],eax
    229c:	00 19                	add    BYTE PTR [ecx],bl
    229e:	ec                   	in     al,dx
    229f:	07                   	pop    es
    22a0:	00 00                	add    BYTE PTR [eax],al
    22a2:	01 36                	add    DWORD PTR [esi],esi
    22a4:	01 c9                	add    ecx,ecx
    22a6:	01 00                	add    DWORD PTR [eax],eax
    22a8:	00 02                	add    BYTE PTR [edx],al
    22aa:	91                   	xchg   ecx,eax
    22ab:	58                   	pop    eax
    22ac:	00 13                	add    BYTE PTR [ebx],dl
    22ae:	14 1d                	adc    al,0x1d
    22b0:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    22b6:	1c 63                	sbb    al,0x63
    22b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22b9:	74 00                	je     22bb <sysEnter_Vector-0x12dd45>
    22bb:	01 46 01             	add    DWORD PTR [esi+0x1],eax
    22be:	5a                   	pop    edx
    22bf:	00 00                	add    BYTE PTR [eax],al
    22c1:	00 02                	add    BYTE PTR [edx],al
    22c3:	91                   	xchg   ecx,eax
    22c4:	60                   	pusha  
    22c5:	1d 00 00 00 00       	sbb    eax,0x0
    22ca:	19 ec                	sbb    esp,ebp
    22cc:	07                   	pop    es
    22cd:	00 00                	add    BYTE PTR [eax],al
    22cf:	01 4c 01 c9          	add    DWORD PTR [ecx+eax*1-0x37],ecx
    22d3:	01 00                	add    DWORD PTR [eax],eax
    22d5:	00 02                	add    BYTE PTR [edx],al
    22d7:	91                   	xchg   ecx,eax
    22d8:	50                   	push   eax
    22d9:	00 00                	add    BYTE PTR [eax],al
    22db:	00 06                	add    BYTE PTR [esi],al
    22dd:	04 5a                	add    al,0x5a
    22df:	00 00                	add    BYTE PTR [eax],al
    22e1:	00 1e                	add    BYTE PTR [esi],bl
    22e3:	3a 00                	cmp    al,BYTE PTR [eax]
    22e5:	00 00                	add    BYTE PTR [eax],al
    22e7:	26 0a 00             	or     al,BYTE PTR es:[eax]
    22ea:	00 1f                	add    BYTE PTR [edi],bl
    22ec:	c5 00                	lds    eax,FWORD PTR [eax]
    22ee:	00 00                	add    BYTE PTR [eax],al
    22f0:	ff 03                	inc    DWORD PTR [ebx]
    22f2:	00 1e                	add    BYTE PTR [esi],bl
    22f4:	3a 00                	cmp    al,BYTE PTR [eax]
    22f6:	00 00                	add    BYTE PTR [eax],al
    22f8:	36 0a 00             	or     al,BYTE PTR ss:[eax]
    22fb:	00 20                	add    BYTE PTR [eax],ah
    22fd:	c5 00                	lds    eax,FWORD PTR [eax]
    22ff:	00 00                	add    BYTE PTR [eax],al
    2301:	01 00                	add    DWORD PTR [eax],eax
    2303:	1a f1                	sbb    dh,cl
    2305:	07                   	pop    es
    2306:	00 00                	add    BYTE PTR [eax],al
    2308:	01 64 01 7e          	add    DWORD PTR [ecx+eax*1+0x7e],esp
    230c:	06                   	push   es
    230d:	00 00                	add    BYTE PTR [eax],al
    230f:	aa                   	stos   BYTE PTR es:[edi],al
    2310:	1e                   	push   ds
    2311:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    2317:	01 9c 6f 0a 00 00 1b 	add    DWORD PTR [edi+ebp*2+0x1b00000a],ebx
    231e:	3c 09                	cmp    al,0x9
    2320:	00 00                	add    BYTE PTR [eax],al
    2322:	01 64 01 c9          	add    DWORD PTR [ecx+eax*1-0x37],esp
    2326:	01 00                	add    DWORD PTR [eax],eax
    2328:	00 02                	add    BYTE PTR [edx],al
    232a:	91                   	xchg   ecx,eax
    232b:	00 1b                	add    BYTE PTR [ebx],bl
    232d:	37                   	aaa    
    232e:	09 00                	or     DWORD PTR [eax],eax
    2330:	00 01                	add    BYTE PTR [ecx],al
    2332:	64 01 0f             	add    DWORD PTR fs:[edi],ecx
    2335:	0a 00                	or     al,BYTE PTR [eax]
    2337:	00 02                	add    BYTE PTR [edx],al
    2339:	91                   	xchg   ecx,eax
    233a:	04 00                	add    al,0x0
    233c:	1a 7d 09             	sbb    bh,BYTE PTR [ebp+0x9]
    233f:	00 00                	add    BYTE PTR [eax],al
    2341:	01 69 01             	add    DWORD PTR [ecx+0x1],ebp
    2344:	5a                   	pop    edx
    2345:	00 00                	add    BYTE PTR [eax],al
    2347:	00 cd                	add    ch,cl
    2349:	1e                   	push   ds
    234a:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    2350:	01 9c a8 0a 00 00 21 	add    DWORD PTR [eax+ebp*4+0x2100000a],ebx
    2357:	73 74                	jae    23cd <sysEnter_Vector-0x12dc33>
    2359:	64 00 01             	add    BYTE PTR fs:[ecx],al
    235c:	69 01 5a 00 00 00    	imul   eax,DWORD PTR [ecx],0x5a
    2362:	02 91 00 1b 99 09    	add    dl,BYTE PTR [ecx+0x9991b00]
    2368:	00 00                	add    BYTE PTR [eax],al
    236a:	01 69 01             	add    DWORD PTR [ecx+0x1],ebp
    236d:	76 00                	jbe    236f <sysEnter_Vector-0x12dc91>
    236f:	00 00                	add    BYTE PTR [eax],al
    2371:	02 91 04 00 22 8f    	add    dl,BYTE PTR [ecx-0x70ddfffc]
    2377:	09 00                	or     DWORD PTR [eax],eax
    2379:	00 01                	add    BYTE PTR [ecx],al
    237b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    237c:	01 f0                	add    eax,esi
    237e:	1e                   	push   ds
    237f:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
    2385:	01 9c 23 a3 00 00 00 	add    DWORD PTR [ebx+eiz*1+0xa3],ebx
    238c:	06                   	push   es
    238d:	37                   	aaa    
    238e:	76 00                	jbe    2390 <sysEnter_Vector-0x12dc70>
    2390:	00 00                	add    BYTE PTR [eax],al
    2392:	05 03 cc 71 00       	add    eax,0x71cc03
    2397:	9f                   	lahf   
    2398:	23 34 01             	and    esi,DWORD PTR [ecx+eax*1]
    239b:	00 00                	add    BYTE PTR [eax],al
    239d:	06                   	push   es
    239e:	38 76 00             	cmp    BYTE PTR [esi+0x0],dh
    23a1:	00 00                	add    BYTE PTR [eax],al
    23a3:	05 03 d0 71 00       	add    eax,0x71d003
    23a8:	9f                   	lahf   
    23a9:	23 7b 00             	and    edi,DWORD PTR [ebx+0x0]
    23ac:	00 00                	add    BYTE PTR [eax],al
    23ae:	06                   	push   es
    23af:	39 76 00             	cmp    DWORD PTR [esi+0x0],esi
    23b2:	00 00                	add    BYTE PTR [eax],al
    23b4:	05 03 c8 71 00       	add    eax,0x71c803
    23b9:	9f                   	lahf   
    23ba:	23 7c 01 00          	and    edi,DWORD PTR [ecx+eax*1+0x0]
    23be:	00 06                	add    BYTE PTR [esi],al
    23c0:	3a a5 00 00 00 05    	cmp    ah,BYTE PTR [ebp+0x5000000]
    23c6:	03 d8                	add    ebx,eax
    23c8:	71 00                	jno    23ca <sysEnter_Vector-0x12dc36>
    23ca:	9f                   	lahf   
    23cb:	23 6e 00             	and    ebp,DWORD PTR [esi+0x0]
    23ce:	00 00                	add    BYTE PTR [eax],al
    23d0:	07                   	pop    es
    23d1:	34 0f                	xor    al,0xf
    23d3:	0b 00                	or     eax,DWORD PTR [eax]
    23d5:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    23db:	9f                   	lahf   
    23dc:	06                   	push   es
    23dd:	04 8f                	add    al,0x8f
    23df:	00 00                	add    BYTE PTR [eax],al
    23e1:	00 23                	add    BYTE PTR [ebx],ah
    23e3:	91                   	xchg   ecx,eax
    23e4:	00 00                	add    BYTE PTR [eax],al
    23e6:	00 07                	add    BYTE PTR [edi],al
    23e8:	35 76 00 00 00       	xor    eax,0x76
    23ed:	05 03 c0 71 00       	add    eax,0x71c003
    23f2:	9f                   	lahf   
    23f3:	23 41 00             	and    eax,DWORD PTR [ecx+0x0]
    23f6:	00 00                	add    BYTE PTR [eax],al
    23f8:	08 58 7e             	or     BYTE PTR [eax+0x7e],bl
    23fb:	06                   	push   es
    23fc:	00 00                	add    BYTE PTR [eax],al
    23fe:	05 03 d4 71 00       	add    eax,0x71d403
    2403:	9f                   	lahf   
    2404:	23 7a 08             	and    edi,DWORD PTR [edx+0x8]
    2407:	00 00                	add    BYTE PTR [eax],al
    2409:	01 0d be 00 00 00    	add    DWORD PTR ds:0xbe,ecx
    240f:	05 03 f4 71 00       	add    eax,0x71f403
    2414:	9f                   	lahf   
    2415:	23 ee                	and    ebp,esi
    2417:	08 00                	or     BYTE PTR [eax],al
    2419:	00 01                	add    BYTE PTR [ecx],al
    241b:	0e                   	push   cs
    241c:	c9                   	leave  
    241d:	01 00                	add    DWORD PTR [eax],eax
    241f:	00 05 03 f8 71 00    	add    BYTE PTR ds:0x71f803,al
    2425:	9f                   	lahf   
    2426:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    2429:	00 00                	add    BYTE PTR [eax],al
    242b:	04 00                	add    al,0x0
    242d:	e4 08                	in     al,0x8
    242f:	00 00                	add    BYTE PTR [eax],al
    2431:	04 01                	add    al,0x1
    2433:	ac                   	lods   al,BYTE PTR ds:[esi]
    2434:	00 00                	add    BYTE PTR [eax],al
    2436:	00 0c ed 09 00 00 1e 	add    BYTE PTR [ebp*8+0x1e000009],cl
    243d:	00 00                	add    BYTE PTR [eax],al
    243f:	00 0c 1f             	add    BYTE PTR [edi+ebx*1],cl
    2442:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    2448:	f8                   	clc    
    2449:	0b 00                	or     eax,DWORD PTR [eax]
    244b:	00 02                	add    BYTE PTR [edx],al
    244d:	01 06                	add    DWORD PTR [esi],eax
    244f:	8c 00                	mov    WORD PTR [eax],es
    2451:	00 00                	add    BYTE PTR [eax],al
    2453:	02 01                	add    al,BYTE PTR [ecx]
    2455:	06                   	push   es
    2456:	85 00                	test   DWORD PTR [eax],eax
    2458:	00 00                	add    BYTE PTR [eax],al
    245a:	02 02                	add    al,BYTE PTR [edx]
    245c:	05 72 01 00 00       	add    eax,0x172
    2461:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2468:	02 08                	add    cl,BYTE PTR [eax]
    246a:	05 00 00 00 00       	add    eax,0x0
    246f:	02 01                	add    al,BYTE PTR [ecx]
    2471:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    2477:	02 07                	add    al,BYTE PTR [edi]
    2479:	19 01                	sbb    DWORD PTR [ecx],eax
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	04 0e                	add    al,0xe
    247f:	00 00                	add    BYTE PTR [eax],al
    2481:	00 02                	add    BYTE PTR [edx],al
    2483:	34 61                	xor    al,0x61
    2485:	00 00                	add    BYTE PTR [eax],al
    2487:	00 02                	add    BYTE PTR [edx],al
    2489:	04 07                	add    al,0x7
    248b:	61                   	popa   
    248c:	00 00                	add    BYTE PTR [eax],al
    248e:	00 02                	add    BYTE PTR [edx],al
    2490:	08 07                	or     BYTE PTR [edi],al
    2492:	57                   	push   edi
    2493:	00 00                	add    BYTE PTR [eax],al
    2495:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    249c:	56                   	push   esi
    249d:	61                   	popa   
    249e:	00 00                	add    BYTE PTR [eax],al
    24a0:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    24a7:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    24aa:	00 00                	add    BYTE PTR [eax],al
    24ac:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    24b3:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    24b6:	66 01 00             	add    WORD PTR [eax],ax
    24b9:	00 02                	add    BYTE PTR [edx],al
    24bb:	01 02                	add    DWORD PTR [edx],eax
    24bd:	13 01                	adc    eax,DWORD PTR [ecx]
    24bf:	00 00                	add    BYTE PTR [eax],al
    24c1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    24c4:	83 01 00             	add    DWORD PTR [ecx],0x0
    24c7:	00 04 ce             	add    BYTE PTR [esi+ecx*8],al
    24ca:	09 00                	or     DWORD PTR [eax],eax
    24cc:	00 04 15 85 00 00 00 	add    BYTE PTR [edx*1+0x85],al
    24d3:	05 d1 03 00 00       	add    eax,0x3d1
    24d8:	04 61                	add    al,0x61
    24da:	00 00                	add    BYTE PTR [eax],al
    24dc:	00 05 15 a0 01 00    	add    BYTE PTR ds:0x1a015,al
    24e2:	00 06                	add    BYTE PTR [esi],al
    24e4:	71 03                	jno    24e9 <sysEnter_Vector-0x12db17>
    24e6:	00 00                	add    BYTE PTR [eax],al
    24e8:	00 06                	add    BYTE PTR [esi],al
    24ea:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    24ed:	00 01                	add    BYTE PTR [ecx],al
    24ef:	06                   	push   es
    24f0:	d6                   	(bad)  
    24f1:	02 00                	add    al,BYTE PTR [eax]
    24f3:	00 02                	add    BYTE PTR [edx],al
    24f5:	06                   	push   es
    24f6:	cf                   	iret   
    24f7:	04 00                	add    al,0x0
    24f9:	00 03                	add    BYTE PTR [ebx],al
    24fb:	06                   	push   es
    24fc:	08 03                	or     BYTE PTR [ebx],al
    24fe:	00 00                	add    BYTE PTR [eax],al
    2500:	04 06                	add    al,0x6
    2502:	f3 02 00             	repz add al,BYTE PTR [eax]
    2505:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
    250b:	00 0a                	add    BYTE PTR [edx],cl
    250d:	06                   	push   es
    250e:	45                   	inc    ebp
    250f:	04 00                	add    al,0x0
    2511:	00 0b                	add    BYTE PTR [ebx],cl
    2513:	06                   	push   es
    2514:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
    251a:	b4 04                	mov    ah,0x4
    251c:	00 00                	add    BYTE PTR [eax],al
    251e:	0d 06 52 04 00       	or     eax,0x45206
    2523:	00 0e                	add    BYTE PTR [esi],cl
    2525:	06                   	push   es
    2526:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    2527:	04 00                	add    al,0x0
    2529:	00 0f                	add    BYTE PTR [edi],cl
    252b:	06                   	push   es
    252c:	3f                   	aas    
    252d:	03 00                	add    eax,DWORD PTR [eax]
    252f:	00 10                	add    BYTE PTR [eax],dl
    2531:	06                   	push   es
    2532:	5f                   	pop    edi
    2533:	04 00                	add    al,0x0
    2535:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    2538:	f1                   	icebp  
    2539:	03 00                	add    eax,DWORD PTR [eax]
    253b:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    253e:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    2541:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    2544:	8b 02                	mov    eax,DWORD PTR [edx]
    2546:	00 00                	add    BYTE PTR [eax],al
    2548:	61                   	popa   
    2549:	06                   	push   es
    254a:	0e                   	push   cs
    254b:	04 00                	add    al,0x0
    254d:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
    2553:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2556:	07                   	pop    es
    2557:	7d 04                	jge    255d <sysEnter_Vector-0x12daa3>
    2559:	00 00                	add    BYTE PTR [eax],al
    255b:	64 01 07             	add    DWORD PTR fs:[edi],eax
    255e:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    2561:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    2564:	07                   	pop    es
    2565:	af                   	scas   eax,DWORD PTR es:[edi]
    2566:	02 00                	add    al,BYTE PTR [eax]
    2568:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    256b:	07                   	pop    es
    256c:	2a 03                	sub    al,BYTE PTR [ebx]
    256e:	00 00                	add    BYTE PTR [eax],al
    2570:	67 01 07             	add    DWORD PTR [bx],eax
    2573:	1d 03 00 00 68       	sbb    eax,0x68000003
    2578:	01 07                	add    DWORD PTR [edi],eax
    257a:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    2581:	9e                   	sahf   
    2582:	02 00                	add    al,BYTE PTR [eax]
    2584:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2587:	07                   	pop    es
    2588:	e3 02                	jecxz  258c <sysEnter_Vector-0x12da74>
    258a:	00 00                	add    BYTE PTR [eax],al
    258c:	71 01                	jno    258f <sysEnter_Vector-0x12da71>
    258e:	07                   	pop    es
    258f:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
    2593:	00 03                	add    BYTE PTR [ebx],al
    2595:	07                   	pop    es
    2596:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2597:	04 00                	add    al,0x0
    2599:	00 01                	add    BYTE PTR [ecx],al
    259b:	03 07                	add    eax,DWORD PTR [edi]
    259d:	bd 03 00 00 02       	mov    ebp,0x2000003
    25a2:	03 07                	add    eax,DWORD PTR [edi]
    25a4:	96                   	xchg   esi,eax
    25a5:	03 00                	add    eax,DWORD PTR [eax]
    25a7:	00 03                	add    BYTE PTR [ebx],al
    25a9:	03 07                	add    eax,DWORD PTR [edi]
    25ab:	34 04                	xor    al,0x4
    25ad:	00 00                	add    BYTE PTR [eax],al
    25af:	04 03                	add    al,0x3
    25b1:	07                   	pop    es
    25b2:	97                   	xchg   edi,eax
    25b3:	04 00                	add    al,0x0
    25b5:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
    25bb:	00 00                	add    BYTE PTR [eax],al
    25bd:	06                   	push   es
    25be:	03 07                	add    eax,DWORD PTR [edi]
    25c0:	52                   	push   edx
    25c1:	03 00                	add    eax,DWORD PTR [eax]
    25c3:	00 00                	add    BYTE PTR [eax],al
    25c5:	09 00                	or     DWORD PTR [eax],eax
    25c7:	08 d9                	or     cl,bl
    25c9:	09 00                	or     DWORD PTR [eax],eax
    25cb:	00 18                	add    BYTE PTR [eax],bl
    25cd:	05 3c f4 01 00       	add    eax,0x1f43c
    25d2:	00 09                	add    BYTE PTR [ecx],cl
    25d4:	c4 09                	les    ecx,FWORD PTR [ecx]
    25d6:	00 00                	add    BYTE PTR [eax],al
    25d8:	05 3e f4 01 00       	add    eax,0x1f43e
    25dd:	00 00                	add    BYTE PTR [eax],al
    25df:	0a 6c 65 6e          	or     ch,BYTE PTR [ebp+eiz*2+0x6e]
    25e3:	00 05 3f 3a 00 00    	add    BYTE PTR ds:0x3a3f,al
    25e9:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    25ec:	d4 09                	aam    0x9
    25ee:	00 00                	add    BYTE PTR [eax],al
    25f0:	05 40 3a 00 00       	add    eax,0x3a40
    25f5:	00 08                	add    BYTE PTR [eax],cl
    25f7:	09 fc                	or     esp,edi
    25f9:	09 00                	or     DWORD PTR [eax],eax
    25fb:	00 05 41 3a 00 00    	add    BYTE PTR ds:0x3a41,al
    2601:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    2604:	66                   	data16
    2605:	64 00 05 42 3a 00 00 	add    BYTE PTR fs:0x3a42,al
    260c:	00 10                	add    BYTE PTR [eax],dl
    260e:	09 73 0e             	or     DWORD PTR [ebx+0xe],esi
    2611:	00 00                	add    BYTE PTR [eax],al
    2613:	05 43 3a 00 00       	add    eax,0x3a43
    2618:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    261b:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    261e:	02 0a                	add    cl,BYTE PTR [edx]
    2620:	00 00                	add    BYTE PTR [eax],al
    2622:	05 44 a0 01 00       	add    eax,0x1a044
    2627:	00 02                	add    BYTE PTR [edx],al
    2629:	04 07                	add    al,0x7
    262b:	5c                   	pop    esp
    262c:	00 00                	add    BYTE PTR [eax],al
    262e:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    2631:	25 00 00 00 0d       	and    eax,0xd000000
    2636:	c9                   	leave  
    2637:	09 00                	or     DWORD PTR [eax],eax
    2639:	00 01                	add    BYTE PTR [ecx],al
    263b:	0d f4 01 00 00       	or     eax,0x1f4
    2640:	0c 1f                	or     al,0x1f
    2642:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    2648:	01 9c 7b 02 00 00 0e 	add    DWORD PTR [ebx+edi*2+0xe000002],ebx
    264f:	c4 09                	les    ecx,FWORD PTR [ecx]
    2651:	00 00                	add    BYTE PTR [eax],al
    2653:	01 0d f4 01 00 00    	add    DWORD PTR ds:0x1f4,ecx
    2659:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    265f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2660:	00 01                	add    BYTE PTR [ecx],al
    2662:	0d 7a 00 00 00       	or     eax,0x7a
    2667:	02 91 04 0e d4 09    	add    dl,BYTE PTR [ecx+0x9d40e04]
    266d:	00 00                	add    BYTE PTR [eax],al
    266f:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    2675:	02 91 08 0e fc 09    	add    dl,BYTE PTR [ecx+0x9fc0e08]
    267b:	00 00                	add    BYTE PTR [eax],al
    267d:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    2683:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    2689:	00 01                	add    BYTE PTR [ecx],al
    268b:	0d 3a 00 00 00       	or     eax,0x3a
    2690:	02 91 10 0e 73 0e    	add    dl,BYTE PTR [ecx+0xe730e10]
    2696:	00 00                	add    BYTE PTR [eax],al
    2698:	01 0d a1 00 00 00    	add    DWORD PTR ds:0xa1,ecx
    269e:	02 91 14 00 10 a3    	add    dl,BYTE PTR [ecx-0x5cefffec]
    26a4:	00 00                	add    BYTE PTR [eax],al
    26a6:	00 06                	add    BYTE PTR [esi],al
    26a8:	37                   	aaa    
    26a9:	56                   	push   esi
    26aa:	00 00                	add    BYTE PTR [eax],al
    26ac:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    26b2:	9f                   	lahf   
    26b3:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
    26b6:	00 00                	add    BYTE PTR [eax],al
    26b8:	06                   	push   es
    26b9:	38 56 00             	cmp    BYTE PTR [esi+0x0],dl
    26bc:	00 00                	add    BYTE PTR [eax],al
    26be:	05 03 d0 71 00       	add    eax,0x71d003
    26c3:	9f                   	lahf   
    26c4:	10 7b 00             	adc    BYTE PTR [ebx+0x0],bh
    26c7:	00 00                	add    BYTE PTR [eax],al
    26c9:	06                   	push   es
    26ca:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    26cd:	00 00                	add    BYTE PTR [eax],al
    26cf:	05 03 c8 71 00       	add    eax,0x71c803
    26d4:	9f                   	lahf   
    26d5:	10 7c 01 00          	adc    BYTE PTR [ecx+eax*1+0x0],bh
    26d9:	00 06                	add    BYTE PTR [esi],al
    26db:	3a 85 00 00 00 05    	cmp    al,BYTE PTR [ebp+0x5000000]
    26e1:	03 d8                	add    ebx,eax
    26e3:	71 00                	jno    26e5 <sysEnter_Vector-0x12d91b>
    26e5:	9f                   	lahf   
    26e6:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
    26e9:	00 00                	add    BYTE PTR [eax],al
    26eb:	07                   	pop    es
    26ec:	34 d0                	xor    al,0xd0
    26ee:	02 00                	add    al,BYTE PTR [eax]
    26f0:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    26f6:	9f                   	lahf   
    26f7:	0c 04                	or     al,0x4
    26f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    26fa:	00 00                	add    BYTE PTR [eax],al
    26fc:	00 10                	add    BYTE PTR [eax],dl
    26fe:	91                   	xchg   ecx,eax
    26ff:	00 00                	add    BYTE PTR [eax],al
    2701:	00 07                	add    BYTE PTR [edi],al
    2703:	35 56 00 00 00       	xor    eax,0x56
    2708:	05 03 c0 71 00       	add    eax,0x71c003
    270d:	9f                   	lahf   
    270e:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    2711:	00 00                	add    BYTE PTR [eax],al
    2713:	08 58 f8             	or     BYTE PTR [eax-0x8],bl
    2716:	02 00                	add    al,BYTE PTR [eax]
    2718:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    271e:	9f                   	lahf   
    271f:	0c 04                	or     al,0x4
    2721:	08 02                	or     BYTE PTR [edx],al
    2723:	00 00                	add    BYTE PTR [eax],al
    2725:	10 e6                	adc    dh,ah
    2727:	09 00                	or     DWORD PTR [eax],eax
    2729:	00 01                	add    BYTE PTR [ecx],al
    272b:	0b f6                	or     esi,esi
    272d:	01 00                	add    DWORD PTR [eax],eax
    272f:	00 05 03 fc 71 00    	add    BYTE PTR ds:0x71fc03,al
    2735:	9f                   	lahf   
    2736:	00 4a 05             	add    BYTE PTR [edx+0x5],cl
    2739:	00 00                	add    BYTE PTR [eax],al
    273b:	04 00                	add    al,0x0
    273d:	c6                   	(bad)  
    273e:	09 00                	or     DWORD PTR [eax],eax
    2740:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2743:	ac                   	lods   al,BYTE PTR ds:[esi]
    2744:	00 00                	add    BYTE PTR [eax],al
    2746:	00 0c f6             	add    BYTE PTR [esi+esi*8],cl
    2749:	0a 00                	or     al,BYTE PTR [eax]
    274b:	00 1e                	add    BYTE PTR [esi],bl
    274d:	00 00                	add    BYTE PTR [eax],al
    274f:	00 80 1f 00 9f f0    	add    BYTE PTR [eax-0xf60ffe1],al
    2755:	05 00 00 0d 0d       	add    eax,0xd0d0000
    275a:	00 00                	add    BYTE PTR [eax],al
    275c:	02 01                	add    al,BYTE PTR [ecx]
    275e:	06                   	push   es
    275f:	85 00                	test   DWORD PTR [eax],eax
    2761:	00 00                	add    BYTE PTR [eax],al
    2763:	02 02                	add    al,BYTE PTR [edx]
    2765:	05 72 01 00 00       	add    eax,0x172
    276a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2771:	02 08                	add    cl,BYTE PTR [eax]
    2773:	05 00 00 00 00       	add    eax,0x0
    2778:	04 af                	add    al,0xaf
    277a:	06                   	push   es
    277b:	00 00                	add    BYTE PTR [eax],al
    277d:	02 2e                	add    ch,BYTE PTR [esi]
    277f:	4c                   	dec    esp
    2780:	00 00                	add    BYTE PTR [eax],al
    2782:	00 02                	add    BYTE PTR [edx],al
    2784:	01 08                	add    DWORD PTR [eax],ecx
    2786:	83 00 00             	add    DWORD PTR [eax],0x0
    2789:	00 04 9f             	add    BYTE PTR [edi+ebx*4],al
    278c:	05 00 00 02 31       	add    eax,0x31020000
    2791:	5e                   	pop    esi
    2792:	00 00                	add    BYTE PTR [eax],al
    2794:	00 02                	add    BYTE PTR [edx],al
    2796:	02 07                	add    al,BYTE PTR [edi]
    2798:	19 01                	sbb    DWORD PTR [ecx],eax
    279a:	00 00                	add    BYTE PTR [eax],al
    279c:	04 0e                	add    al,0xe
    279e:	00 00                	add    BYTE PTR [eax],al
    27a0:	00 02                	add    BYTE PTR [edx],al
    27a2:	34 70                	xor    al,0x70
    27a4:	00 00                	add    BYTE PTR [eax],al
    27a6:	00 02                	add    BYTE PTR [edx],al
    27a8:	04 07                	add    al,0x7
    27aa:	61                   	popa   
    27ab:	00 00                	add    BYTE PTR [eax],al
    27ad:	00 02                	add    BYTE PTR [edx],al
    27af:	08 07                	or     BYTE PTR [edi],al
    27b1:	57                   	push   edi
    27b2:	00 00                	add    BYTE PTR [eax],al
    27b4:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    27bb:	56                   	push   esi
    27bc:	70 00                	jo     27be <sysEnter_Vector-0x12d842>
    27be:	00 00                	add    BYTE PTR [eax],al
    27c0:	04 bd                	add    al,0xbd
    27c2:	02 00                	add    al,BYTE PTR [eax]
    27c4:	00 03                	add    BYTE PTR [ebx],al
    27c6:	d8 70 00             	fdiv   DWORD PTR [eax+0x0]
    27c9:	00 00                	add    BYTE PTR [eax],al
    27cb:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    27d2:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    27d5:	66 01 00             	add    WORD PTR [eax],ax
    27d8:	00 02                	add    BYTE PTR [edx],al
    27da:	01 06                	add    DWORD PTR [esi],eax
    27dc:	8c 00                	mov    WORD PTR [eax],es
    27de:	00 00                	add    BYTE PTR [eax],al
    27e0:	05 75 0a 00 00       	add    eax,0xa75
    27e5:	18 04 2d 0a 01 00 00 	sbb    BYTE PTR [ebp*1+0x10a],al
    27ec:	06                   	push   es
    27ed:	41                   	inc    ecx
    27ee:	0a 00                	or     al,BYTE PTR [eax]
    27f0:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    27f3:	65 00 00             	add    BYTE PTR gs:[eax],al
    27f6:	00 00                	add    BYTE PTR [eax],al
    27f8:	07                   	pop    es
    27f9:	6c                   	ins    BYTE PTR es:[edi],dx
    27fa:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    27fc:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    27ff:	65 00 00             	add    BYTE PTR gs:[eax],al
    2802:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    2805:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2806:	0a 00                	or     al,BYTE PTR [eax]
    2808:	00 04 31             	add    BYTE PTR [ecx+esi*1],al
    280b:	0a 01                	or     al,BYTE PTR [ecx]
    280d:	00 00                	add    BYTE PTR [eax],al
    280f:	08 06                	or     BYTE PTR [esi],al
    2811:	e1 0a                	loope  281d <sysEnter_Vector-0x12d7e3>
    2813:	00 00                	add    BYTE PTR [eax],al
    2815:	04 32                	add    al,0x32
    2817:	53                   	push   ebx
    2818:	00 00                	add    BYTE PTR [eax],al
    281a:	00 0a                	add    BYTE PTR [edx],cl
    281c:	06                   	push   es
    281d:	68 0a 00 00 04       	push   0x400000a
    2822:	33 11                	xor    edx,DWORD PTR [ecx]
    2824:	01 00                	add    DWORD PTR [eax],eax
    2826:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    2829:	19 0a                	sbb    DWORD PTR [edx],ecx
    282b:	00 00                	add    BYTE PTR [eax],al
    282d:	04 34                	add    al,0x34
    282f:	28 01                	sub    BYTE PTR [ecx],al
    2831:	00 00                	add    BYTE PTR [eax],al
    2833:	10 06                	adc    BYTE PTR [esi],al
    2835:	2c 0a                	sub    al,0xa
    2837:	00 00                	add    BYTE PTR [eax],al
    2839:	04 34                	add    al,0x34
    283b:	28 01                	sub    BYTE PTR [ecx],al
    283d:	00 00                	add    BYTE PTR [eax],al
    283f:	14 00                	adc    al,0x0
    2841:	02 01                	add    al,BYTE PTR [ecx]
    2843:	02 13                	add    dl,BYTE PTR [ebx]
    2845:	01 00                	add    DWORD PTR [eax],eax
    2847:	00 08                	add    BYTE PTR [eax],cl
    2849:	41                   	inc    ecx
    284a:	00 00                	add    BYTE PTR [eax],al
    284c:	00 21                	add    BYTE PTR [ecx],ah
    284e:	01 00                	add    DWORD PTR [eax],eax
    2850:	00 09                	add    BYTE PTR [ecx],cl
    2852:	21 01                	and    DWORD PTR [ecx],eax
    2854:	00 00                	add    BYTE PTR [eax],al
    2856:	00 00                	add    BYTE PTR [eax],al
    2858:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    285b:	83 01 00             	add    DWORD PTR [ecx],0x0
    285e:	00 0a                	add    BYTE PTR [edx],cl
    2860:	04 a9                	add    al,0xa9
    2862:	00 00                	add    BYTE PTR [eax],al
    2864:	00 04 31             	add    BYTE PTR [ecx+esi*1],al
    2867:	0a 00                	or     al,BYTE PTR [eax]
    2869:	00 04 35 a9 00 00 00 	add    BYTE PTR [esi*1+0xa9],al
    2870:	0b d1                	or     edx,ecx
    2872:	03 00                	add    eax,DWORD PTR [eax]
    2874:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2877:	00 00                	add    BYTE PTR [eax],al
    2879:	00 07                	add    BYTE PTR [edi],al
    287b:	15 2d 02 00 00       	adc    eax,0x22d
    2880:	0c 71                	or     al,0x71
    2882:	03 00                	add    eax,DWORD PTR [eax]
    2884:	00 00                	add    BYTE PTR [eax],al
    2886:	0c dd                	or     al,0xdd
    2888:	04 00                	add    al,0x0
    288a:	00 01                	add    BYTE PTR [ecx],al
    288c:	0c d6                	or     al,0xd6
    288e:	02 00                	add    al,BYTE PTR [eax]
    2890:	00 02                	add    BYTE PTR [edx],al
    2892:	0c cf                	or     al,0xcf
    2894:	04 00                	add    al,0x0
    2896:	00 03                	add    BYTE PTR [ebx],al
    2898:	0c 08                	or     al,0x8
    289a:	03 00                	add    eax,DWORD PTR [eax]
    289c:	00 04 0c             	add    BYTE PTR [esp+ecx*1],al
    289f:	f3 02 00             	repz add al,BYTE PTR [eax]
    28a2:	00 05 0c 64 03 00    	add    BYTE PTR ds:0x3640c,al
    28a8:	00 0a                	add    BYTE PTR [edx],cl
    28aa:	0c 45                	or     al,0x45
    28ac:	04 00                	add    al,0x0
    28ae:	00 0b                	add    BYTE PTR [ebx],cl
    28b0:	0c 81                	or     al,0x81
    28b2:	03 00                	add    eax,DWORD PTR [eax]
    28b4:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    28b7:	b4 04                	mov    ah,0x4
    28b9:	00 00                	add    BYTE PTR [eax],al
    28bb:	0d 0c 52 04 00       	or     eax,0x4520c
    28c0:	00 0e                	add    BYTE PTR [esi],cl
    28c2:	0c a7                	or     al,0xa7
    28c4:	04 00                	add    al,0x0
    28c6:	00 0f                	add    BYTE PTR [edi],cl
    28c8:	0c 3f                	or     al,0x3f
    28ca:	03 00                	add    eax,DWORD PTR [eax]
    28cc:	00 10                	add    BYTE PTR [eax],dl
    28ce:	0c 5f                	or     al,0x5f
    28d0:	04 00                	add    al,0x0
    28d2:	00 4f 0c             	add    BYTE PTR [edi+0xc],cl
    28d5:	f1                   	icebp  
    28d6:	03 00                	add    eax,DWORD PTR [eax]
    28d8:	00 50 0c             	add    BYTE PTR [eax+0xc],dl
    28db:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    28de:	00 59 0c             	add    BYTE PTR [ecx+0xc],bl
    28e1:	8b 02                	mov    eax,DWORD PTR [edx]
    28e3:	00 00                	add    BYTE PTR [eax],al
    28e5:	61                   	popa   
    28e6:	0c 0e                	or     al,0xe
    28e8:	04 00                	add    al,0x0
    28ea:	00 97 0d a6 03 00    	add    BYTE PTR [edi+0x3a60d],dl
    28f0:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    28f3:	0d 7d 04 00 00       	or     eax,0x47d
    28f8:	64 01 0d 22 04 00 00 	add    DWORD PTR fs:0x422,ecx
    28ff:	65 01 0d af 02 00 00 	add    DWORD PTR gs:0x2af,ecx
    2906:	66 01 0d 2a 03 00 00 	add    WORD PTR ds:0x32a,cx
    290d:	67 01 0d             	add    DWORD PTR [di],ecx
    2910:	1d 03 00 00 68       	sbb    eax,0x68000003
    2915:	01 0d f7 04 00 00    	add    DWORD PTR ds:0x4f7,ecx
    291b:	69 01 0d 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e0d
    2921:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2924:	0d e3 02 00 00       	or     eax,0x2e3
    2929:	71 01                	jno    292c <sysEnter_Vector-0x12d6d4>
    292b:	0d c1 04 00 00       	or     eax,0x4c1
    2930:	00 03                	add    BYTE PTR [ebx],al
    2932:	0d 6e 04 00 00       	or     eax,0x46e
    2937:	01 03                	add    DWORD PTR [ebx],eax
    2939:	0d bd 03 00 00       	or     eax,0x3bd
    293e:	02 03                	add    al,BYTE PTR [ebx]
    2940:	0d 96 03 00 00       	or     eax,0x396
    2945:	03 03                	add    eax,DWORD PTR [ebx]
    2947:	0d 34 04 00 00       	or     eax,0x434
    294c:	04 03                	add    al,0x3
    294e:	0d 97 04 00 00       	or     eax,0x497
    2953:	05 03 0d e2 03       	add    eax,0x3e20d03
    2958:	00 00                	add    BYTE PTR [eax],al
    295a:	06                   	push   es
    295b:	03 0d 52 03 00 00    	add    ecx,DWORD PTR ds:0x352
    2961:	00 09                	add    BYTE PTR [ecx],cl
    2963:	00 0e                	add    BYTE PTR [esi],cl
    2965:	04 02                	add    al,0x2
    2967:	04 07                	add    al,0x7
    2969:	5c                   	pop    esp
    296a:	00 00                	add    BYTE PTR [eax],al
    296c:	00 0a                	add    BYTE PTR [edx],cl
    296e:	04 a2                	add    al,0xa2
    2970:	00 00                	add    BYTE PTR [eax],al
    2972:	00 0f                	add    BYTE PTR [edi],cl
    2974:	7b 0a                	jnp    2980 <sysEnter_Vector-0x12d680>
    2976:	00 00                	add    BYTE PTR [eax],al
    2978:	01 0e                	add    DWORD PTR [esi],ecx
    297a:	80 1f 00             	sbb    BYTE PTR [edi],0x0
    297d:	9f                   	lahf   
    297e:	6c                   	ins    BYTE PTR es:[edi],dx
    297f:	00 00                	add    BYTE PTR [eax],al
    2981:	00 01                	add    BYTE PTR [ecx],al
    2983:	9c                   	pushf  
    2984:	10 48 0a             	adc    BYTE PTR [eax+0xa],cl
    2987:	00 00                	add    BYTE PTR [eax],al
    2989:	01 18                	add    DWORD PTR [eax],ebx
    298b:	65 00 00             	add    BYTE PTR gs:[eax],al
    298e:	00 ec                	add    ah,ch
    2990:	1f                   	pop    ds
    2991:	00 9f 87 00 00 00    	add    BYTE PTR [edi+0x87],bl
    2997:	01 9c 83 02 00 00 11 	add    DWORD PTR [ebx+eax*4+0x11000002],ebx
    299e:	ba 06 00 00 01       	mov    edx,0x1000006
    29a3:	18 89 00 00 00 02    	sbb    BYTE PTR [ecx+0x2000000],cl
    29a9:	91                   	xchg   ecx,eax
    29aa:	00 12                	add    BYTE PTR [edx],dl
    29ac:	c0 0a 00             	ror    BYTE PTR [edx],0x0
    29af:	00 01                	add    BYTE PTR [ecx],al
    29b1:	1c 65                	sbb    al,0x65
    29b3:	00 00                	add    BYTE PTR [eax],al
    29b5:	00 02                	add    BYTE PTR [edx],al
    29b7:	91                   	xchg   ecx,eax
    29b8:	74 00                	je     29ba <sysEnter_Vector-0x12d646>
    29ba:	13 3b                	adc    edi,DWORD PTR [ebx]
    29bc:	0a 00                	or     al,BYTE PTR [eax]
    29be:	00 01                	add    BYTE PTR [ecx],al
    29c0:	30 73 20             	xor    BYTE PTR [ebx+0x20],dh
    29c3:	00 9f 5b 00 00 00    	add    BYTE PTR [edi+0x5b],bl
    29c9:	01 9c b4 02 00 00 11 	add    DWORD PTR [esp+esi*4+0x11000002],ebx
    29d0:	18 0b                	sbb    BYTE PTR [ebx],cl
    29d2:	00 00                	add    BYTE PTR [eax],al
    29d4:	01 30                	add    DWORD PTR [eax],esi
    29d6:	2d 02 00 00 02       	sub    eax,0x2000002
    29db:	91                   	xchg   ecx,eax
    29dc:	00 14 6d 70 00 01 32 	add    BYTE PTR [ebp*2+0x32010070],dl
    29e3:	b4 02                	mov    ah,0x2
    29e5:	00 00                	add    BYTE PTR [eax],al
    29e7:	02 91 74 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a0074]
    29ed:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    29f0:	00 10                	add    BYTE PTR [eax],dl
    29f2:	2d 0b 00 00 01       	sub    eax,0x100000b
    29f7:	44                   	inc    esp
    29f8:	b4 02                	mov    ah,0x2
    29fa:	00 00                	add    BYTE PTR [eax],al
    29fc:	ce                   	into   
    29fd:	20 00                	and    BYTE PTR [eax],al
    29ff:	9f                   	lahf   
    2a00:	7a 00                	jp     2a02 <sysEnter_Vector-0x12d5fe>
    2a02:	00 00                	add    BYTE PTR [eax],al
    2a04:	01 9c 0b 03 00 00 11 	add    DWORD PTR [ebx+ecx*1+0x11000003],ebx
    2a0b:	ba 06 00 00 01       	mov    edx,0x1000006
    2a10:	44                   	inc    esp
    2a11:	89 00                	mov    DWORD PTR [eax],eax
    2a13:	00 00                	add    BYTE PTR [eax],al
    2a15:	02 91 00 12 03 0b    	add    dl,BYTE PTR [ecx+0xb031200]
    2a1b:	00 00                	add    BYTE PTR [eax],al
    2a1d:	01 46 b4             	add    DWORD PTR [esi-0x4c],eax
    2a20:	02 00                	add    al,BYTE PTR [eax]
    2a22:	00 02                	add    BYTE PTR [edx],al
    2a24:	91                   	xchg   ecx,eax
    2a25:	74 14                	je     2a3b <sysEnter_Vector-0x12d5c5>
    2a27:	70 74                	jo     2a9d <sysEnter_Vector-0x12d563>
    2a29:	72 00                	jb     2a2b <sysEnter_Vector-0x12d5d5>
    2a2b:	01 47 0b             	add    DWORD PTR [edi+0xb],eax
    2a2e:	03 00                	add    eax,DWORD PTR [eax]
    2a30:	00 02                	add    BYTE PTR [edx],al
    2a32:	91                   	xchg   ecx,eax
    2a33:	70 14                	jo     2a49 <sysEnter_Vector-0x12d5b7>
    2a35:	68 65 00 01 48       	push   0x48010065
    2a3a:	b4 02                	mov    ah,0x2
    2a3c:	00 00                	add    BYTE PTR [eax],al
    2a3e:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    2a44:	41                   	inc    ecx
    2a45:	00 00                	add    BYTE PTR [eax],al
    2a47:	00 15 4f 0b 00 00    	add    BYTE PTR ds:0xb4f,dl
    2a4d:	01 56 48             	add    DWORD PTR [esi+0x48],edx
    2a50:	21 00                	and    DWORD PTR [eax],eax
    2a52:	9f                   	lahf   
    2a53:	63 00                	arpl   WORD PTR [eax],ax
    2a55:	00 00                	add    BYTE PTR [eax],al
    2a57:	01 9c 4e 03 00 00 11 	add    DWORD PTR [esi+ecx*2+0x11000003],ebx
    2a5e:	e6 0a                	out    0xa,al
    2a60:	00 00                	add    BYTE PTR [eax],al
    2a62:	01 56 b4             	add    DWORD PTR [esi-0x4c],edx
    2a65:	02 00                	add    al,BYTE PTR [eax]
    2a67:	00 02                	add    BYTE PTR [edx],al
    2a69:	91                   	xchg   ecx,eax
    2a6a:	00 12                	add    BYTE PTR [edx],dl
    2a6c:	03 0b                	add    ecx,DWORD PTR [ebx]
    2a6e:	00 00                	add    BYTE PTR [eax],al
    2a70:	01 58 b4             	add    DWORD PTR [eax-0x4c],ebx
    2a73:	02 00                	add    al,BYTE PTR [eax]
    2a75:	00 02                	add    BYTE PTR [edx],al
    2a77:	91                   	xchg   ecx,eax
    2a78:	6c                   	ins    BYTE PTR es:[edi],dx
    2a79:	16                   	push   ss
    2a7a:	b5 0a                	mov    ch,0xa
    2a7c:	00 00                	add    BYTE PTR [eax],al
    2a7e:	01 5e 82             	add    DWORD PTR [esi-0x7e],ebx
    2a81:	21 00                	and    DWORD PTR [eax],eax
    2a83:	9f                   	lahf   
    2a84:	00 17                	add    BYTE PTR [edi],dl
    2a86:	11 0a                	adc    DWORD PTR [edx],ecx
    2a88:	00 00                	add    BYTE PTR [eax],al
    2a8a:	01 65 2d             	add    DWORD PTR [ebp+0x2d],esp
    2a8d:	02 00                	add    al,BYTE PTR [eax]
    2a8f:	00 ab 21 00 9f 32    	add    BYTE PTR [ebx+0x329f0021],ch
    2a95:	02 00                	add    al,BYTE PTR [eax]
    2a97:	00 01                	add    BYTE PTR [ecx],al
    2a99:	9c                   	pushf  
    2a9a:	d8 03                	fadd   DWORD PTR [ebx]
    2a9c:	00 00                	add    BYTE PTR [eax],al
    2a9e:	11 ba 06 00 00 01    	adc    DWORD PTR [edx+0x1000006],edi
    2aa4:	65 89 00             	mov    DWORD PTR gs:[eax],eax
    2aa7:	00 00                	add    BYTE PTR [eax],al
    2aa9:	02 91 00 12 06 05    	add    dl,BYTE PTR [ecx+0x5061200]
    2aaf:	00 00                	add    BYTE PTR [eax],al
    2ab1:	01 67 2d             	add    DWORD PTR [edi+0x2d],esp
    2ab4:	02 00                	add    al,BYTE PTR [eax]
    2ab6:	00 02                	add    BYTE PTR [edx],al
    2ab8:	91                   	xchg   ecx,eax
    2ab9:	5c                   	pop    esp
    2aba:	12 d1                	adc    dl,cl
    2abc:	0a 00                	or     al,BYTE PTR [eax]
    2abe:	00 01                	add    BYTE PTR [ecx],al
    2ac0:	69 65 00 00 00 02 91 	imul   esp,DWORD PTR [ebp+0x0],0x91020000
    2ac7:	64 12 a1 0a 00 00 01 	adc    ah,BYTE PTR fs:[ecx+0x100000a]
    2ace:	6a 65                	push   0x65
    2ad0:	00 00                	add    BYTE PTR [eax],al
    2ad2:	00 02                	add    BYTE PTR [edx],al
    2ad4:	91                   	xchg   ecx,eax
    2ad5:	60                   	pusha  
    2ad6:	12 03                	adc    al,BYTE PTR [ebx]
    2ad8:	0b 00                	or     eax,DWORD PTR [eax]
    2ada:	00 01                	add    BYTE PTR [ecx],al
    2adc:	6b b4 02 00 00 02 91 	imul   esi,DWORD PTR [edx+eax*1-0x6efe0000],0x68
    2ae3:	68 
    2ae4:	12 86 0a 00 00 01    	adc    al,BYTE PTR [esi+0x100000a]
    2aea:	6c                   	ins    BYTE PTR es:[edi],dx
    2aeb:	89 00                	mov    DWORD PTR [eax],eax
    2aed:	00 00                	add    BYTE PTR [eax],al
    2aef:	02 91 6c 18 21 0b    	add    dl,BYTE PTR [ecx+0xb21186c]
    2af5:	00 00                	add    BYTE PTR [eax],al
    2af7:	01 6d 0b             	add    DWORD PTR [ebp+0xb],ebp
    2afa:	03 00                	add    eax,DWORD PTR [eax]
    2afc:	00 12                	add    BYTE PTR [edx],dl
    2afe:	1e                   	push   ds
    2aff:	0a 00                	or     al,BYTE PTR [eax]
    2b01:	00 01                	add    BYTE PTR [ecx],al
    2b03:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2b04:	b4 02                	mov    ah,0x2
    2b06:	00 00                	add    BYTE PTR [eax],al
    2b08:	05 03 14 72 00       	add    eax,0x721403
    2b0d:	9f                   	lahf   
    2b0e:	00 17                	add    BYTE PTR [edi],dl
    2b10:	7f 0a                	jg     2b1c <sysEnter_Vector-0x12d4e4>
    2b12:	00 00                	add    BYTE PTR [eax],al
    2b14:	01 a4 2d 02 00 00 dd 	add    DWORD PTR [ebp+ebp*1-0x22fffffe],esp
    2b1b:	23 00                	and    eax,DWORD PTR [eax]
    2b1d:	9f                   	lahf   
    2b1e:	20 00                	and    BYTE PTR [eax],al
    2b20:	00 00                	add    BYTE PTR [eax],al
    2b22:	01 9c 00 04 00 00 11 	add    DWORD PTR [eax+eax*1+0x11000004],ebx
    2b29:	ba 06 00 00 01       	mov    edx,0x1000006
    2b2e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    2b2f:	89 00                	mov    DWORD PTR [eax],eax
    2b31:	00 00                	add    BYTE PTR [eax],al
    2b33:	02 91 00 00 17 d8    	add    dl,BYTE PTR [ecx-0x27e90000]
    2b39:	0a 00                	or     al,BYTE PTR [eax]
    2b3b:	00 01                	add    BYTE PTR [ecx],al
    2b3d:	a9 2d 02 00 00       	test   eax,0x22d
    2b42:	fd                   	std    
    2b43:	23 00                	and    eax,DWORD PTR [eax]
    2b45:	9f                   	lahf   
    2b46:	03 01                	add    eax,DWORD PTR [ecx]
    2b48:	00 00                	add    BYTE PTR [eax],al
    2b4a:	01 9c 5f 04 00 00 11 	add    DWORD PTR [edi+ebx*2+0x11000004],ebx
    2b51:	0b 0b                	or     ecx,DWORD PTR [ebx]
    2b53:	00 00                	add    BYTE PTR [eax],al
    2b55:	01 a9 2d 02 00 00    	add    DWORD PTR [ecx+0x22d],ebp
    2b5b:	02 91 00 11 ae 0a    	add    dl,BYTE PTR [ecx+0xaae1100]
    2b61:	00 00                	add    BYTE PTR [eax],al
    2b63:	01 a9 65 00 00 00    	add    DWORD PTR [ecx+0x65],ebp
    2b69:	02 91 04 12 c8 0a    	add    dl,BYTE PTR [ecx+0xac81204]
    2b6f:	00 00                	add    BYTE PTR [eax],al
    2b71:	01 af 65 00 00 00    	add    DWORD PTR [edi+0x65],ebp
    2b77:	02 91 6c 14 6d 70    	add    dl,BYTE PTR [ecx+0x706d146c]
    2b7d:	00 01                	add    BYTE PTR [ecx],al
    2b7f:	b0 b4                	mov    al,0xb4
    2b81:	02 00                	add    al,BYTE PTR [eax]
    2b83:	00 02                	add    BYTE PTR [edx],al
    2b85:	91                   	xchg   ecx,eax
    2b86:	68 12 ee 0a 00       	push   0xaee12
    2b8b:	00 01                	add    BYTE PTR [ecx],al
    2b8d:	bc 5f 04 00 00       	mov    esp,0x45f
    2b92:	02 91 64 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a0064]
    2b98:	7e 00                	jle    2b9a <sysEnter_Vector-0x12d466>
    2b9a:	00 00                	add    BYTE PTR [eax],al
    2b9c:	17                   	pop    ss
    2b9d:	47                   	inc    edi
    2b9e:	0b 00                	or     eax,DWORD PTR [eax]
    2ba0:	00 01                	add    BYTE PTR [ecx],al
    2ba2:	ca 2d 02             	retf   0x22d
    2ba5:	00 00                	add    BYTE PTR [eax],al
    2ba7:	00 25 00 9f 23 00    	add    BYTE PTR ds:0x239f00,ah
    2bad:	00 00                	add    BYTE PTR [eax],al
    2baf:	01 9c 9b 04 00 00 11 	add    DWORD PTR [ebx+ebx*4+0x11000004],ebx
    2bb6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    2bb8:	00 00                	add    BYTE PTR [eax],al
    2bba:	01 ca                	add    edx,ecx
    2bbc:	2d 02 00 00 02       	sub    eax,0x2000002
    2bc1:	91                   	xchg   ecx,eax
    2bc2:	00 11                	add    BYTE PTR [ecx],dl
    2bc4:	ae                   	scas   al,BYTE PTR es:[edi]
    2bc5:	0a 00                	or     al,BYTE PTR [eax]
    2bc7:	00 01                	add    BYTE PTR [ecx],al
    2bc9:	ca 65 00             	retf   0x65
    2bcc:	00 00                	add    BYTE PTR [eax],al
    2bce:	02 91 04 00 15 13    	add    dl,BYTE PTR [ecx+0x13150004]
    2bd4:	0b 00                	or     eax,DWORD PTR [eax]
    2bd6:	00 01                	add    BYTE PTR [ecx],al
    2bd8:	cf                   	iret   
    2bd9:	23 25 00 9f 1b 00    	and    esp,DWORD PTR ds:0x1b9f00
    2bdf:	00 00                	add    BYTE PTR [eax],al
    2be1:	01 9c bf 04 00 00 11 	add    DWORD PTR [edi+edi*4+0x11000004],ebx
    2be8:	18 0b                	sbb    BYTE PTR [ebx],cl
    2bea:	00 00                	add    BYTE PTR [eax],al
    2bec:	01 cf                	add    edi,ecx
    2bee:	2d 02 00 00 02       	sub    eax,0x2000002
    2bf3:	91                   	xchg   ecx,eax
    2bf4:	00 00                	add    BYTE PTR [eax],al
    2bf6:	0f 92 0a             	setb   BYTE PTR [edx]
    2bf9:	00 00                	add    BYTE PTR [eax],al
    2bfb:	01 d4                	add    esp,edx
    2bfd:	3e                   	ds
    2bfe:	25 00 9f 32 00       	and    eax,0x329f00
    2c03:	00 00                	add    BYTE PTR [eax],al
    2c05:	01 9c 19 a3 00 00 00 	add    DWORD PTR [ecx+ebx*1+0xa3],ebx
    2c0c:	04 37                	add    al,0x37
    2c0e:	65 00 00             	add    BYTE PTR gs:[eax],al
    2c11:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    2c17:	9f                   	lahf   
    2c18:	19 34 01             	sbb    DWORD PTR [ecx+eax*1],esi
    2c1b:	00 00                	add    BYTE PTR [eax],al
    2c1d:	04 38                	add    al,0x38
    2c1f:	65 00 00             	add    BYTE PTR gs:[eax],al
    2c22:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    2c28:	9f                   	lahf   
    2c29:	19 7b 00             	sbb    DWORD PTR [ebx+0x0],edi
    2c2c:	00 00                	add    BYTE PTR [eax],al
    2c2e:	04 39                	add    al,0x39
    2c30:	65 00 00             	add    BYTE PTR gs:[eax],al
    2c33:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    2c39:	9f                   	lahf   
    2c3a:	19 7c 01 00          	sbb    DWORD PTR [ecx+eax*1+0x0],edi
    2c3e:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    2c41:	94                   	xchg   esp,eax
    2c42:	00 00                	add    BYTE PTR [eax],al
    2c44:	00 05 03 d8 71 00    	add    BYTE PTR ds:0x71d803,al
    2c4a:	9f                   	lahf   
    2c4b:	19 6e 00             	sbb    DWORD PTR [esi+0x0],ebp
    2c4e:	00 00                	add    BYTE PTR [eax],al
    2c50:	05 34 5f 04 00       	add    eax,0x45f34
    2c55:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    2c5b:	9f                   	lahf   
    2c5c:	19 91 00 00 00 05    	sbb    DWORD PTR [ecx+0x5000000],edx
    2c62:	35 65 00 00 00       	xor    eax,0x65
    2c67:	05 03 c0 71 00       	add    eax,0x71c003
    2c6c:	9f                   	lahf   
    2c6d:	19 41 00             	sbb    DWORD PTR [ecx+0x0],eax
    2c70:	00 00                	add    BYTE PTR [eax],al
    2c72:	06                   	push   es
    2c73:	58                   	pop    eax
    2c74:	47                   	inc    edi
    2c75:	05 00 00 05 03       	add    eax,0x3050000
    2c7a:	d4 71                	aam    0x71
    2c7c:	00 9f 0a 04 36 02    	add    BYTE PTR [edi+0x236040a],bl
    2c82:	00 00                	add    BYTE PTR [eax],al
    2c84:	00 5f 02             	add    BYTE PTR [edi+0x2],bl
    2c87:	00 00                	add    BYTE PTR [eax],al
    2c89:	04 00                	add    al,0x0
    2c8b:	49                   	dec    ecx
    2c8c:	0b 00                	or     eax,DWORD PTR [eax]
    2c8e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2c91:	ac                   	lods   al,BYTE PTR ds:[esi]
    2c92:	00 00                	add    BYTE PTR [eax],al
    2c94:	00 0c 61             	add    BYTE PTR [ecx+eiz*2],cl
    2c97:	0b 00                	or     eax,DWORD PTR [eax]
    2c99:	00 1e                	add    BYTE PTR [esi],bl
    2c9b:	00 00                	add    BYTE PTR [eax],al
    2c9d:	00 70 25             	add    BYTE PTR [eax+0x25],dh
    2ca0:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
    2ca6:	d1 0e                	ror    DWORD PTR [esi],1
    2ca8:	00 00                	add    BYTE PTR [eax],al
    2caa:	02 01                	add    al,BYTE PTR [ecx]
    2cac:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    2cb2:	02 07                	add    al,BYTE PTR [edi]
    2cb4:	19 01                	sbb    DWORD PTR [ecx],eax
    2cb6:	00 00                	add    BYTE PTR [eax],al
    2cb8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2cbb:	61                   	popa   
    2cbc:	00 00                	add    BYTE PTR [eax],al
    2cbe:	00 02                	add    BYTE PTR [edx],al
    2cc0:	04 07                	add    al,0x7
    2cc2:	5c                   	pop    esp
    2cc3:	00 00                	add    BYTE PTR [eax],al
    2cc5:	00 02                	add    BYTE PTR [edx],al
    2cc7:	01 06                	add    DWORD PTR [esi],eax
    2cc9:	85 00                	test   DWORD PTR [eax],eax
    2ccb:	00 00                	add    BYTE PTR [eax],al
    2ccd:	02 02                	add    al,BYTE PTR [edx]
    2ccf:	05 72 01 00 00       	add    eax,0x172
    2cd4:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2cdb:	02 08                	add    cl,BYTE PTR [eax]
    2cdd:	05 00 00 00 00       	add    eax,0x0
    2ce2:	02 08                	add    cl,BYTE PTR [eax]
    2ce4:	07                   	pop    es
    2ce5:	57                   	push   edi
    2ce6:	00 00                	add    BYTE PTR [eax],al
    2ce8:	00 02                	add    BYTE PTR [edx],al
    2cea:	04 05                	add    al,0x5
    2cec:	05 00 00 00 02       	add    eax,0x2000000
    2cf1:	04 07                	add    al,0x7
    2cf3:	83 01 00             	add    DWORD PTR [ecx],0x0
    2cf6:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2cf9:	05 04 7a 00 00       	add    eax,0x7a04
    2cfe:	00 02                	add    BYTE PTR [edx],al
    2d00:	01 06                	add    DWORD PTR [esi],eax
    2d02:	8c 00                	mov    WORD PTR [eax],es
    2d04:	00 00                	add    BYTE PTR [eax],al
    2d06:	06                   	push   es
    2d07:	0e                   	push   cs
    2d08:	00 00                	add    BYTE PTR [eax],al
    2d0a:	00 02                	add    BYTE PTR [edx],al
    2d0c:	34 33                	xor    al,0x33
    2d0e:	00 00                	add    BYTE PTR [eax],al
    2d10:	00 06                	add    BYTE PTR [esi],al
    2d12:	4d                   	dec    ebp
    2d13:	00 00                	add    BYTE PTR [eax],al
    2d15:	00 02                	add    BYTE PTR [edx],al
    2d17:	56                   	push   esi
    2d18:	33 00                	xor    eax,DWORD PTR [eax]
    2d1a:	00 00                	add    BYTE PTR [eax],al
    2d1c:	05 04 9d 00 00       	add    eax,0x9d04
    2d21:	00 07                	add    BYTE PTR [edi],al
    2d23:	7a 00                	jp     2d25 <sysEnter_Vector-0x12d2db>
    2d25:	00 00                	add    BYTE PTR [eax],al
    2d27:	06                   	push   es
    2d28:	bd 02 00 00 03       	mov    ebp,0x3000002
    2d2d:	d8 33                	fdiv   DWORD PTR [ebx]
    2d2f:	00 00                	add    BYTE PTR [eax],al
    2d31:	00 02                	add    BYTE PTR [edx],al
    2d33:	0c 04                	or     al,0x4
    2d35:	66 01 00             	add    WORD PTR [eax],ax
    2d38:	00 02                	add    BYTE PTR [edx],al
    2d3a:	01 02                	add    DWORD PTR [edx],eax
    2d3c:	13 01                	adc    eax,DWORD PTR [ecx]
    2d3e:	00 00                	add    BYTE PTR [eax],al
    2d40:	08 73 0b             	or     BYTE PTR [ebx+0xb],dh
    2d43:	00 00                	add    BYTE PTR [eax],al
    2d45:	01 0b                	add    DWORD PTR [ebx],ecx
    2d47:	72 00                	jb     2d49 <sysEnter_Vector-0x12d2b7>
    2d49:	00 00                	add    BYTE PTR [eax],al
    2d4b:	70 25                	jo     2d72 <sysEnter_Vector-0x12d28e>
    2d4d:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    2d53:	01 9c 85 01 00 00 09 	add    DWORD PTR [ebp+eax*4+0x9000001],ebx
    2d5a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2d5b:	0b 00                	or     eax,DWORD PTR [eax]
    2d5d:	00 01                	add    BYTE PTR [ecx],al
    2d5f:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    2d62:	00 00                	add    BYTE PTR [eax],al
    2d64:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2d6a:	63 00                	arpl   WORD PTR [eax],ax
    2d6c:	01 0b                	add    DWORD PTR [ebx],ecx
    2d6e:	85 01                	test   DWORD PTR [ecx],eax
    2d70:	00 00                	add    BYTE PTR [eax],al
    2d72:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2d78:	01 0b                	add    DWORD PTR [ebx],ecx
    2d7a:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2d7f:	91                   	xchg   ecx,eax
    2d80:	08 0b                	or     BYTE PTR [ebx],cl
    2d82:	64                   	fs
    2d83:	77 00                	ja     2d85 <sysEnter_Vector-0x12d27b>
    2d85:	01 0d b4 00 00 00    	add    DWORD PTR ds:0xb4,ecx
    2d8b:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2d91:	00 01                	add    BYTE PTR [ecx],al
    2d93:	0d b4 00 00 00       	or     eax,0xb4
    2d98:	02 91 5f 0c a2 25    	add    dl,BYTE PTR [ecx+0x25a20c5f]
    2d9e:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    2da4:	3c 01                	cmp    al,0x1
    2da6:	00 00                	add    BYTE PTR [eax],al
    2da8:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2dab:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    2dae:	01 00                	add    DWORD PTR [eax],eax
    2db0:	00 02                	add    BYTE PTR [edx],al
    2db2:	91                   	xchg   ecx,eax
    2db3:	74 0b                	je     2dc0 <sysEnter_Vector-0x12d240>
    2db5:	74 00                	je     2db7 <sysEnter_Vector-0x12d249>
    2db7:	01 15 97 01 00 00    	add    DWORD PTR ds:0x197,edx
    2dbd:	02 91 70 00 0c 25    	add    dl,BYTE PTR [ecx+0x250c0070]
    2dc3:	26 00 9f 79 00 00 00 	add    BYTE PTR es:[edi+0x79],bl
    2dca:	62 01                	bound  eax,QWORD PTR [ecx]
    2dcc:	00 00                	add    BYTE PTR [eax],al
    2dce:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2dd1:	01 24 8c             	add    DWORD PTR [esp+ecx*4],esp
    2dd4:	01 00                	add    DWORD PTR [eax],eax
    2dd6:	00 02                	add    BYTE PTR [edx],al
    2dd8:	91                   	xchg   ecx,eax
    2dd9:	6c                   	ins    BYTE PTR es:[edi],dx
    2dda:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2dde:	25 97 01 00 00       	and    eax,0x197
    2de3:	02 91 68 00 0d 9e    	add    dl,BYTE PTR [ecx-0x61f2ff98]
    2de9:	26 00 9f 6b 00 00 00 	add    BYTE PTR es:[edi+0x6b],bl
    2df0:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2df3:	01 33                	add    DWORD PTR [ebx],esi
    2df5:	97                   	xchg   edi,eax
    2df6:	00 00                	add    BYTE PTR [eax],al
    2df8:	00 02                	add    BYTE PTR [edx],al
    2dfa:	91                   	xchg   ecx,eax
    2dfb:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    2e00:	34 74                	xor    al,0x74
    2e02:	00 00                	add    BYTE PTR [eax],al
    2e04:	00 02                	add    BYTE PTR [edx],al
    2e06:	91                   	xchg   ecx,eax
    2e07:	60                   	pusha  
    2e08:	00 00                	add    BYTE PTR [eax],al
    2e0a:	05 04 8b 01 00       	add    eax,0x18b04
    2e0f:	00 0e                	add    BYTE PTR [esi],cl
    2e11:	05 04 92 01 00       	add    eax,0x19204
    2e16:	00 07                	add    BYTE PTR [edi],al
    2e18:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2e1e:	81 00 00 00 0f 7b    	add    DWORD PTR [eax],0x7b0f0000
    2e24:	0b 00                	or     eax,DWORD PTR [eax]
    2e26:	00 01                	add    BYTE PTR [ecx],al
    2e28:	42                   	inc    edx
    2e29:	72 00                	jb     2e2b <sysEnter_Vector-0x12d1d5>
    2e2b:	00 00                	add    BYTE PTR [eax],al
    2e2d:	0b 27                	or     esp,DWORD PTR [edi]
    2e2f:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2e35:	01 9c df 01 00 00 09 	add    DWORD PTR [edi+ebx*8+0x9000001],ebx
    2e3c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e3d:	0b 00                	or     eax,DWORD PTR [eax]
    2e3f:	00 01                	add    BYTE PTR [ecx],al
    2e41:	42                   	inc    edx
    2e42:	72 00                	jb     2e44 <sysEnter_Vector-0x12d1bc>
    2e44:	00 00                	add    BYTE PTR [eax],al
    2e46:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2e4c:	63 00                	arpl   WORD PTR [eax],ax
    2e4e:	01 42 85             	add    DWORD PTR [edx-0x7b],eax
    2e51:	01 00                	add    DWORD PTR [eax],eax
    2e53:	00 02                	add    BYTE PTR [edx],al
    2e55:	91                   	xchg   ecx,eax
    2e56:	04 0a                	add    al,0xa
    2e58:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e59:	00 01                	add    BYTE PTR [ecx],al
    2e5b:	42                   	inc    edx
    2e5c:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2e61:	91                   	xchg   ecx,eax
    2e62:	08 00                	or     BYTE PTR [eax],al
    2e64:	10 a3 00 00 00 04    	adc    BYTE PTR [ebx+0x4000000],ah
    2e6a:	37                   	aaa    
    2e6b:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e71:	cc                   	int3   
    2e72:	71 00                	jno    2e74 <sysEnter_Vector-0x12d18c>
    2e74:	9f                   	lahf   
    2e75:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
    2e78:	00 00                	add    BYTE PTR [eax],al
    2e7a:	04 38                	add    al,0x38
    2e7c:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e82:	d0                   	(bad)  
    2e83:	71 00                	jno    2e85 <sysEnter_Vector-0x12d17b>
    2e85:	9f                   	lahf   
    2e86:	10 7b 00             	adc    BYTE PTR [ebx+0x0],bh
    2e89:	00 00                	add    BYTE PTR [eax],al
    2e8b:	04 39                	add    al,0x39
    2e8d:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e93:	c8 71 00 9f          	enter  0x71,0x9f
    2e97:	10 7c 01 00          	adc    BYTE PTR [ecx+eax*1+0x0],bh
    2e9b:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    2e9e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2ea1:	00 05 03 d8 71 00    	add    BYTE PTR ds:0x71d803,al
    2ea7:	9f                   	lahf   
    2ea8:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
    2eab:	00 00                	add    BYTE PTR [eax],al
    2ead:	05 34 34 02 00       	add    eax,0x23434
    2eb2:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    2eb8:	9f                   	lahf   
    2eb9:	05 04 8c 00 00       	add    eax,0x8c04
    2ebe:	00 10                	add    BYTE PTR [eax],dl
    2ec0:	91                   	xchg   ecx,eax
    2ec1:	00 00                	add    BYTE PTR [eax],al
    2ec3:	00 05 35 81 00 00    	add    BYTE PTR ds:0x8135,al
    2ec9:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    2ecf:	9f                   	lahf   
    2ed0:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    2ed3:	00 00                	add    BYTE PTR [eax],al
    2ed5:	06                   	push   es
    2ed6:	58                   	pop    eax
    2ed7:	5c                   	pop    esp
    2ed8:	02 00                	add    al,BYTE PTR [eax]
    2eda:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    2ee0:	9f                   	lahf   
    2ee1:	05 04 74 00 00       	add    eax,0x7404
    2ee6:	00 00                	add    BYTE PTR [eax],al
    2ee8:	1e                   	push   ds
    2ee9:	02 00                	add    al,BYTE PTR [eax]
    2eeb:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2eee:	26                   	es
    2eef:	0c 00                	or     al,0x0
    2ef1:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2ef4:	ac                   	lods   al,BYTE PTR ds:[esi]
    2ef5:	00 00                	add    BYTE PTR [eax],al
    2ef7:	00 0c 82             	add    BYTE PTR [edx+eax*4],cl
    2efa:	0b 00                	or     eax,DWORD PTR [eax]
    2efc:	00 1e                	add    BYTE PTR [esi],bl
    2efe:	00 00                	add    BYTE PTR [eax],al
    2f00:	00 2c 27             	add    BYTE PTR [edi+eiz*1],ch
    2f03:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
    2f09:	c6                   	(bad)  
    2f0a:	0f 00 00             	sldt   WORD PTR [eax]
    2f0d:	02 01                	add    al,BYTE PTR [ecx]
    2f0f:	06                   	push   es
    2f10:	8c 00                	mov    WORD PTR [eax],es
    2f12:	00 00                	add    BYTE PTR [eax],al
    2f14:	02 01                	add    al,BYTE PTR [ecx]
    2f16:	06                   	push   es
    2f17:	85 00                	test   DWORD PTR [eax],eax
    2f19:	00 00                	add    BYTE PTR [eax],al
    2f1b:	02 02                	add    al,BYTE PTR [edx]
    2f1d:	05 72 01 00 00       	add    eax,0x172
    2f22:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2f29:	02 08                	add    cl,BYTE PTR [eax]
    2f2b:	05 00 00 00 00       	add    eax,0x0
    2f30:	04 af                	add    al,0xaf
    2f32:	06                   	push   es
    2f33:	00 00                	add    BYTE PTR [eax],al
    2f35:	02 2e                	add    ch,BYTE PTR [esi]
    2f37:	53                   	push   ebx
    2f38:	00 00                	add    BYTE PTR [eax],al
    2f3a:	00 02                	add    BYTE PTR [edx],al
    2f3c:	01 08                	add    DWORD PTR [eax],ecx
    2f3e:	83 00 00             	add    DWORD PTR [eax],0x0
    2f41:	00 04 9f             	add    BYTE PTR [edi+ebx*4],al
    2f44:	05 00 00 02 31       	add    eax,0x31020000
    2f49:	65 00 00             	add    BYTE PTR gs:[eax],al
    2f4c:	00 02                	add    BYTE PTR [edx],al
    2f4e:	02 07                	add    al,BYTE PTR [edi]
    2f50:	19 01                	sbb    DWORD PTR [ecx],eax
    2f52:	00 00                	add    BYTE PTR [eax],al
    2f54:	04 0e                	add    al,0xe
    2f56:	00 00                	add    BYTE PTR [eax],al
    2f58:	00 02                	add    BYTE PTR [edx],al
    2f5a:	34 77                	xor    al,0x77
    2f5c:	00 00                	add    BYTE PTR [eax],al
    2f5e:	00 02                	add    BYTE PTR [edx],al
    2f60:	04 07                	add    al,0x7
    2f62:	61                   	popa   
    2f63:	00 00                	add    BYTE PTR [eax],al
    2f65:	00 02                	add    BYTE PTR [edx],al
    2f67:	08 07                	or     BYTE PTR [edi],al
    2f69:	57                   	push   edi
    2f6a:	00 00                	add    BYTE PTR [eax],al
    2f6c:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    2f73:	56                   	push   esi
    2f74:	77 00                	ja     2f76 <sysEnter_Vector-0x12d08a>
    2f76:	00 00                	add    BYTE PTR [eax],al
    2f78:	04 bd                	add    al,0xbd
    2f7a:	02 00                	add    al,BYTE PTR [eax]
    2f7c:	00 03                	add    BYTE PTR [ebx],al
    2f7e:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    2f81:	00 00                	add    BYTE PTR [eax],al
    2f83:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f8a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f8d:	66 01 00             	add    WORD PTR [eax],ax
    2f90:	00 02                	add    BYTE PTR [edx],al
    2f92:	01 02                	add    DWORD PTR [edx],eax
    2f94:	13 01                	adc    eax,DWORD PTR [ecx]
    2f96:	00 00                	add    BYTE PTR [eax],al
    2f98:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f9b:	83 01 00             	add    DWORD PTR [ecx],0x0
    2f9e:	00 05 04 02 04 07    	add    BYTE PTR ds:0x7040204,al
    2fa4:	5c                   	pop    esp
    2fa5:	00 00                	add    BYTE PTR [eax],al
    2fa7:	00 06                	add    BYTE PTR [esi],al
    2fa9:	04 25                	add    al,0x25
    2fab:	00 00                	add    BYTE PTR [eax],al
    2fad:	00 07                	add    BYTE PTR [edi],al
    2faf:	96                   	xchg   esi,eax
    2fb0:	0b 00                	or     eax,DWORD PTR [eax]
    2fb2:	00 01                	add    BYTE PTR [ecx],al
    2fb4:	08 b7 00 00 00 2c    	or     BYTE PTR [edi+0x2c000000],dh
    2fba:	27                   	daa    
    2fbb:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2fc1:	01 9c 49 01 00 00 08 	add    DWORD PTR [ecx+ecx*2+0x8000001],ebx
    2fc8:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2fcb:	01 08                	add    DWORD PTR [eax],ecx
    2fcd:	b7 00                	mov    bh,0x0
    2fcf:	00 00                	add    BYTE PTR [eax],al
    2fd1:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2fd7:	6c                   	ins    BYTE PTR es:[edi],dx
    2fd8:	00 01                	add    BYTE PTR [ecx],al
    2fda:	08 3a                	or     BYTE PTR [edx],bh
    2fdc:	00 00                	add    BYTE PTR [eax],al
    2fde:	00 02                	add    BYTE PTR [edx],al
    2fe0:	91                   	xchg   ecx,eax
    2fe1:	04 08                	add    al,0x8
    2fe3:	6c                   	ins    BYTE PTR es:[edi],dx
    2fe4:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2fe6:	00 01                	add    BYTE PTR [ecx],al
    2fe8:	08 90 00 00 00 02    	or     BYTE PTR [eax+0x2000000],dl
    2fee:	91                   	xchg   ecx,eax
    2fef:	08 09                	or     BYTE PTR [ecx],cl
    2ff1:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2ff4:	0a 49 01             	or     cl,BYTE PTR [ecx+0x1]
    2ff7:	00 00                	add    BYTE PTR [eax],al
    2ff9:	02 91 74 09 65 00    	add    dl,BYTE PTR [ecx+0x650974]
    2fff:	01 0b                	add    DWORD PTR [ebx],ecx
    3001:	4f                   	dec    edi
    3002:	01 00                	add    DWORD PTR [eax],eax
    3004:	00 02                	add    BYTE PTR [edx],al
    3006:	91                   	xchg   ecx,eax
    3007:	70 0a                	jo     3013 <sysEnter_Vector-0x12cfed>
    3009:	9e                   	sahf   
    300a:	0b 00                	or     eax,DWORD PTR [eax]
    300c:	00 01                	add    BYTE PTR [ecx],al
    300e:	0c 5a                	or     al,0x5a
    3010:	00 00                	add    BYTE PTR [eax],al
    3012:	00 02                	add    BYTE PTR [edx],al
    3014:	91                   	xchg   ecx,eax
    3015:	6a 09                	push   0x9
    3017:	66                   	data16
    3018:	00 01                	add    BYTE PTR [ecx],al
    301a:	0d 55 01 00 00       	or     eax,0x155
    301f:	02 91 6c 0a a3 0b    	add    dl,BYTE PTR [ecx+0xba30a6c]
    3025:	00 00                	add    BYTE PTR [eax],al
    3027:	01 0e                	add    DWORD PTR [esi],ecx
    3029:	6c                   	ins    BYTE PTR es:[edi],dx
    302a:	00 00                	add    BYTE PTR [eax],al
    302c:	00 02                	add    BYTE PTR [edx],al
    302e:	91                   	xchg   ecx,eax
    302f:	64 00 06             	add    BYTE PTR fs:[esi],al
    3032:	04 48                	add    al,0x48
    3034:	00 00                	add    BYTE PTR [eax],al
    3036:	00 06                	add    BYTE PTR [esi],al
    3038:	04 5a                	add    al,0x5a
    303a:	00 00                	add    BYTE PTR [eax],al
    303c:	00 06                	add    BYTE PTR [esi],al
    303e:	04 6c                	add    al,0x6c
    3040:	00 00                	add    BYTE PTR [eax],al
    3042:	00 0b                	add    BYTE PTR [ebx],cl
    3044:	8f                   	(bad)  
    3045:	0b 00                	or     eax,DWORD PTR [eax]
    3047:	00 01                	add    BYTE PTR [ecx],al
    3049:	1f                   	pop    ds
    304a:	b7 00                	mov    bh,0x0
    304c:	00 00                	add    BYTE PTR [eax],al
    304e:	f3 27                	repz daa 
    3050:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    3056:	01 9c 9e 01 00 00 08 	add    DWORD PTR [esi+ebx*4+0x8000001],ebx
    305d:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    3060:	01 1f                	add    DWORD PTR [edi],ebx
    3062:	b7 00                	mov    bh,0x0
    3064:	00 00                	add    BYTE PTR [eax],al
    3066:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    306c:	6c                   	ins    BYTE PTR es:[edi],dx
    306d:	00 01                	add    BYTE PTR [ecx],al
    306f:	1f                   	pop    ds
    3070:	3a 00                	cmp    al,BYTE PTR [eax]
    3072:	00 00                	add    BYTE PTR [eax],al
    3074:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    307a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    307b:	00 01                	add    BYTE PTR [ecx],al
    307d:	1f                   	pop    ds
    307e:	90                   	nop
    307f:	00 00                	add    BYTE PTR [eax],al
    3081:	00 02                	add    BYTE PTR [edx],al
    3083:	91                   	xchg   ecx,eax
    3084:	08 00                	or     BYTE PTR [eax],al
    3086:	0c a3                	or     al,0xa3
    3088:	00 00                	add    BYTE PTR [eax],al
    308a:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    308d:	6c                   	ins    BYTE PTR es:[edi],dx
    308e:	00 00                	add    BYTE PTR [eax],al
    3090:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    3096:	9f                   	lahf   
    3097:	0c 34                	or     al,0x34
    3099:	01 00                	add    DWORD PTR [eax],eax
    309b:	00 04 38             	add    BYTE PTR [eax+edi*1],al
    309e:	6c                   	ins    BYTE PTR es:[edi],dx
    309f:	00 00                	add    BYTE PTR [eax],al
    30a1:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    30a7:	9f                   	lahf   
    30a8:	0c 7b                	or     al,0x7b
    30aa:	00 00                	add    BYTE PTR [eax],al
    30ac:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    30af:	6c                   	ins    BYTE PTR es:[edi],dx
    30b0:	00 00                	add    BYTE PTR [eax],al
    30b2:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    30b8:	9f                   	lahf   
    30b9:	0c 7c                	or     al,0x7c
    30bb:	01 00                	add    DWORD PTR [eax],eax
    30bd:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    30c0:	9b                   	fwait
    30c1:	00 00                	add    BYTE PTR [eax],al
    30c3:	00 05 03 d8 71 00    	add    BYTE PTR ds:0x71d803,al
    30c9:	9f                   	lahf   
    30ca:	0c 6e                	or     al,0x6e
    30cc:	00 00                	add    BYTE PTR [eax],al
    30ce:	00 05 34 f3 01 00    	add    BYTE PTR ds:0x1f334,al
    30d4:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    30da:	9f                   	lahf   
    30db:	06                   	push   es
    30dc:	04 85                	add    al,0x85
    30de:	00 00                	add    BYTE PTR [eax],al
    30e0:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    30e3:	00 00                	add    BYTE PTR [eax],al
    30e5:	00 05 35 6c 00 00    	add    BYTE PTR ds:0x6c35,al
    30eb:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    30f1:	9f                   	lahf   
    30f2:	0c 41                	or     al,0x41
    30f4:	00 00                	add    BYTE PTR [eax],al
    30f6:	00 06                	add    BYTE PTR [esi],al
    30f8:	58                   	pop    eax
    30f9:	1b 02                	sbb    eax,DWORD PTR [edx]
    30fb:	00 00                	add    BYTE PTR [eax],al
    30fd:	05 03 d4 71 00       	add    eax,0x71d403
    3102:	9f                   	lahf   
    3103:	06                   	push   es
    3104:	04 c0                	add    al,0xc0
    3106:	00 00                	add    BYTE PTR [eax],al
    3108:	00 00                	add    BYTE PTR [eax],al
    310a:	89 02                	mov    DWORD PTR [edx],eax
    310c:	00 00                	add    BYTE PTR [eax],al
    310e:	04 00                	add    al,0x0
    3110:	e3 0c                	jecxz  311e <sysEnter_Vector-0x12cee2>
    3112:	00 00                	add    BYTE PTR [eax],al
    3114:	04 01                	add    al,0x1
    3116:	ac                   	lods   al,BYTE PTR ds:[esi]
    3117:	00 00                	add    BYTE PTR [eax],al
    3119:	00 0c a8             	add    BYTE PTR [eax+ebp*4],cl
    311c:	0b 00                	or     eax,DWORD PTR [eax]
    311e:	00 1e                	add    BYTE PTR [esi],bl
    3120:	00 00                	add    BYTE PTR [eax],al
    3122:	00 14 28             	add    BYTE PTR [eax+ebp*1],dl
    3125:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    312b:	9e                   	sahf   
    312c:	10 00                	adc    BYTE PTR [eax],al
    312e:	00 02                	add    BYTE PTR [edx],al
    3130:	01 06                	add    DWORD PTR [esi],eax
    3132:	8c 00                	mov    WORD PTR [eax],es
    3134:	00 00                	add    BYTE PTR [eax],al
    3136:	02 01                	add    al,BYTE PTR [ecx]
    3138:	06                   	push   es
    3139:	85 00                	test   DWORD PTR [eax],eax
    313b:	00 00                	add    BYTE PTR [eax],al
    313d:	02 02                	add    al,BYTE PTR [edx]
    313f:	05 72 01 00 00       	add    eax,0x172
    3144:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    314b:	02 08                	add    cl,BYTE PTR [eax]
    314d:	05 00 00 00 00       	add    eax,0x0
    3152:	02 01                	add    al,BYTE PTR [ecx]
    3154:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    315a:	02 07                	add    al,BYTE PTR [edi]
    315c:	19 01                	sbb    DWORD PTR [ecx],eax
    315e:	00 00                	add    BYTE PTR [eax],al
    3160:	04 0e                	add    al,0xe
    3162:	00 00                	add    BYTE PTR [eax],al
    3164:	00 02                	add    BYTE PTR [edx],al
    3166:	34 61                	xor    al,0x61
    3168:	00 00                	add    BYTE PTR [eax],al
    316a:	00 02                	add    BYTE PTR [edx],al
    316c:	04 07                	add    al,0x7
    316e:	61                   	popa   
    316f:	00 00                	add    BYTE PTR [eax],al
    3171:	00 02                	add    BYTE PTR [edx],al
    3173:	08 07                	or     BYTE PTR [edi],al
    3175:	57                   	push   edi
    3176:	00 00                	add    BYTE PTR [eax],al
    3178:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    317f:	56                   	push   esi
    3180:	61                   	popa   
    3181:	00 00                	add    BYTE PTR [eax],al
    3183:	00 02                	add    BYTE PTR [edx],al
    3185:	04 05                	add    al,0x5
    3187:	05 00 00 00 02       	add    eax,0x2000000
    318c:	0c 04                	or     al,0x4
    318e:	66 01 00             	add    WORD PTR [eax],ax
    3191:	00 02                	add    BYTE PTR [edx],al
    3193:	01 02                	add    DWORD PTR [edx],eax
    3195:	13 01                	adc    eax,DWORD PTR [ecx]
    3197:	00 00                	add    BYTE PTR [eax],al
    3199:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    319c:	83 01 00             	add    DWORD PTR [ecx],0x0
    319f:	00 05 d1 03 00 00    	add    BYTE PTR ds:0x3d1,al
    31a5:	04 61                	add    al,0x61
    31a7:	00 00                	add    BYTE PTR [eax],al
    31a9:	00 06                	add    BYTE PTR [esi],al
    31ab:	15 8a 01 00 00       	adc    eax,0x18a
    31b0:	06                   	push   es
    31b1:	71 03                	jno    31b6 <sysEnter_Vector-0x12ce4a>
    31b3:	00 00                	add    BYTE PTR [eax],al
    31b5:	00 06                	add    BYTE PTR [esi],al
    31b7:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    31ba:	00 01                	add    BYTE PTR [ecx],al
    31bc:	06                   	push   es
    31bd:	d6                   	(bad)  
    31be:	02 00                	add    al,BYTE PTR [eax]
    31c0:	00 02                	add    BYTE PTR [edx],al
    31c2:	06                   	push   es
    31c3:	cf                   	iret   
    31c4:	04 00                	add    al,0x0
    31c6:	00 03                	add    BYTE PTR [ebx],al
    31c8:	06                   	push   es
    31c9:	08 03                	or     BYTE PTR [ebx],al
    31cb:	00 00                	add    BYTE PTR [eax],al
    31cd:	04 06                	add    al,0x6
    31cf:	f3 02 00             	repz add al,BYTE PTR [eax]
    31d2:	00 05 06 64 03 00    	add    BYTE PTR ds:0x36406,al
    31d8:	00 0a                	add    BYTE PTR [edx],cl
    31da:	06                   	push   es
    31db:	45                   	inc    ebp
    31dc:	04 00                	add    al,0x0
    31de:	00 0b                	add    BYTE PTR [ebx],cl
    31e0:	06                   	push   es
    31e1:	81 03 00 00 0c 06    	add    DWORD PTR [ebx],0x60c0000
    31e7:	b4 04                	mov    ah,0x4
    31e9:	00 00                	add    BYTE PTR [eax],al
    31eb:	0d 06 52 04 00       	or     eax,0x45206
    31f0:	00 0e                	add    BYTE PTR [esi],cl
    31f2:	06                   	push   es
    31f3:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    31f4:	04 00                	add    al,0x0
    31f6:	00 0f                	add    BYTE PTR [edi],cl
    31f8:	06                   	push   es
    31f9:	3f                   	aas    
    31fa:	03 00                	add    eax,DWORD PTR [eax]
    31fc:	00 10                	add    BYTE PTR [eax],dl
    31fe:	06                   	push   es
    31ff:	5f                   	pop    edi
    3200:	04 00                	add    al,0x0
    3202:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    3205:	f1                   	icebp  
    3206:	03 00                	add    eax,DWORD PTR [eax]
    3208:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    320b:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    320e:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    3211:	8b 02                	mov    eax,DWORD PTR [edx]
    3213:	00 00                	add    BYTE PTR [eax],al
    3215:	61                   	popa   
    3216:	06                   	push   es
    3217:	0e                   	push   cs
    3218:	04 00                	add    al,0x0
    321a:	00 97 07 a6 03 00    	add    BYTE PTR [edi+0x3a607],dl
    3220:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3223:	07                   	pop    es
    3224:	7d 04                	jge    322a <sysEnter_Vector-0x12cdd6>
    3226:	00 00                	add    BYTE PTR [eax],al
    3228:	64 01 07             	add    DWORD PTR fs:[edi],eax
    322b:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    322e:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    3231:	07                   	pop    es
    3232:	af                   	scas   eax,DWORD PTR es:[edi]
    3233:	02 00                	add    al,BYTE PTR [eax]
    3235:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    3238:	07                   	pop    es
    3239:	2a 03                	sub    al,BYTE PTR [ebx]
    323b:	00 00                	add    BYTE PTR [eax],al
    323d:	67 01 07             	add    DWORD PTR [bx],eax
    3240:	1d 03 00 00 68       	sbb    eax,0x68000003
    3245:	01 07                	add    DWORD PTR [edi],eax
    3247:	f7 04 00 00 69 01 07 	test   DWORD PTR [eax+eax*1],0x7016900
    324e:	9e                   	sahf   
    324f:	02 00                	add    al,BYTE PTR [eax]
    3251:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3254:	07                   	pop    es
    3255:	e3 02                	jecxz  3259 <sysEnter_Vector-0x12cda7>
    3257:	00 00                	add    BYTE PTR [eax],al
    3259:	71 01                	jno    325c <sysEnter_Vector-0x12cda4>
    325b:	07                   	pop    es
    325c:	c1 04 00 00          	rol    DWORD PTR [eax+eax*1],0x0
    3260:	00 03                	add    BYTE PTR [ebx],al
    3262:	07                   	pop    es
    3263:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3264:	04 00                	add    al,0x0
    3266:	00 01                	add    BYTE PTR [ecx],al
    3268:	03 07                	add    eax,DWORD PTR [edi]
    326a:	bd 03 00 00 02       	mov    ebp,0x2000003
    326f:	03 07                	add    eax,DWORD PTR [edi]
    3271:	96                   	xchg   esi,eax
    3272:	03 00                	add    eax,DWORD PTR [eax]
    3274:	00 03                	add    BYTE PTR [ebx],al
    3276:	03 07                	add    eax,DWORD PTR [edi]
    3278:	34 04                	xor    al,0x4
    327a:	00 00                	add    BYTE PTR [eax],al
    327c:	04 03                	add    al,0x3
    327e:	07                   	pop    es
    327f:	97                   	xchg   edi,eax
    3280:	04 00                	add    al,0x0
    3282:	00 05 03 07 e2 03    	add    BYTE PTR ds:0x3e20703,al
    3288:	00 00                	add    BYTE PTR [eax],al
    328a:	06                   	push   es
    328b:	03 07                	add    eax,DWORD PTR [edi]
    328d:	52                   	push   edx
    328e:	03 00                	add    eax,DWORD PTR [eax]
    3290:	00 00                	add    BYTE PTR [eax],al
    3292:	09 00                	or     DWORD PTR [eax],eax
    3294:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3297:	5c                   	pop    esp
    3298:	00 00                	add    BYTE PTR [eax],al
    329a:	00 08                	add    BYTE PTR [eax],cl
    329c:	04 25                	add    al,0x25
    329e:	00 00                	add    BYTE PTR [eax],al
    32a0:	00 09                	add    BYTE PTR [ecx],cl
    32a2:	b7 0b                	mov    bh,0xb
    32a4:	00 00                	add    BYTE PTR [eax],al
    32a6:	01 0a                	add    DWORD PTR [edx],ecx
    32a8:	3a 00                	cmp    al,BYTE PTR [eax]
    32aa:	00 00                	add    BYTE PTR [eax],al
    32ac:	14 28                	adc    al,0x28
    32ae:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    32b4:	01 9c bf 01 00 00 0a 	add    DWORD PTR [edi+edi*4+0xa000001],ebx
    32bb:	c1 0b 00             	ror    DWORD PTR [ebx],0x0
    32be:	00 01                	add    BYTE PTR [ecx],al
    32c0:	0a bf 01 00 00 02    	or     bh,BYTE PTR [edi+0x2000001]
    32c6:	91                   	xchg   ecx,eax
    32c7:	00 00                	add    BYTE PTR [eax],al
    32c9:	08 04 3a             	or     BYTE PTR [edx+edi*1],al
    32cc:	00 00                	add    BYTE PTR [eax],al
    32ce:	00 09                	add    BYTE PTR [ecx],cl
    32d0:	bc 0b 00 00 01       	mov    esp,0x100000b
    32d5:	0f 3a 00             	(bad)  
    32d8:	00 00                	add    BYTE PTR [eax],al
    32da:	3d 28 00 9f 2e       	cmp    eax,0x2e9f0028
    32df:	00 00                	add    BYTE PTR [eax],al
    32e1:	00 01                	add    BYTE PTR [ecx],al
    32e3:	9c                   	pushf  
    32e4:	09 02                	or     DWORD PTR [edx],eax
    32e6:	00 00                	add    BYTE PTR [eax],al
    32e8:	0a ce                	or     cl,dh
    32ea:	0b 00                	or     eax,DWORD PTR [eax]
    32ec:	00 01                	add    BYTE PTR [ecx],al
    32ee:	0f 3a 00             	(bad)  
    32f1:	00 00                	add    BYTE PTR [eax],al
    32f3:	02 91 00 0a c8 0b    	add    dl,BYTE PTR [ecx+0xbc80a00]
    32f9:	00 00                	add    BYTE PTR [eax],al
    32fb:	01 0f                	add    DWORD PTR [edi],ecx
    32fd:	3a 00                	cmp    al,BYTE PTR [eax]
    32ff:	00 00                	add    BYTE PTR [eax],al
    3301:	02 91 04 0a fc 09    	add    dl,BYTE PTR [ecx+0x9fc0a04]
    3307:	00 00                	add    BYTE PTR [eax],al
    3309:	01 0f                	add    DWORD PTR [edi],ecx
    330b:	3a 00                	cmp    al,BYTE PTR [eax]
    330d:	00 00                	add    BYTE PTR [eax],al
    330f:	02 91 08 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff8]
    3315:	00 00                	add    BYTE PTR [eax],al
    3317:	00 03                	add    BYTE PTR [ebx],al
    3319:	37                   	aaa    
    331a:	56                   	push   esi
    331b:	00 00                	add    BYTE PTR [eax],al
    331d:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    3323:	9f                   	lahf   
    3324:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3327:	00 00                	add    BYTE PTR [eax],al
    3329:	03 38                	add    edi,DWORD PTR [eax]
    332b:	56                   	push   esi
    332c:	00 00                	add    BYTE PTR [eax],al
    332e:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    3334:	9f                   	lahf   
    3335:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3338:	00 00                	add    BYTE PTR [eax],al
    333a:	03 39                	add    edi,DWORD PTR [ecx]
    333c:	56                   	push   esi
    333d:	00 00                	add    BYTE PTR [eax],al
    333f:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    3345:	9f                   	lahf   
    3346:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    334a:	00 03                	add    BYTE PTR [ebx],al
    334c:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    334f:	00 00                	add    BYTE PTR [eax],al
    3351:	05 03 d8 71 00       	add    eax,0x71d803
    3356:	9f                   	lahf   
    3357:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    335a:	00 00                	add    BYTE PTR [eax],al
    335c:	04 34                	add    al,0x34
    335e:	5e                   	pop    esi
    335f:	02 00                	add    al,BYTE PTR [eax]
    3361:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    3367:	9f                   	lahf   
    3368:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    336b:	00 00                	add    BYTE PTR [eax],al
    336d:	00 0b                	add    BYTE PTR [ebx],cl
    336f:	91                   	xchg   ecx,eax
    3370:	00 00                	add    BYTE PTR [eax],al
    3372:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3379:	05 03 c0 71 00       	add    eax,0x71c003
    337e:	9f                   	lahf   
    337f:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3382:	00 00                	add    BYTE PTR [eax],al
    3384:	05 58 86 02 00       	add    eax,0x28658
    3389:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    338f:	9f                   	lahf   
    3390:	08 04 91             	or     BYTE PTR [ecx+edx*4],al
    3393:	01 00                	add    DWORD PTR [eax],eax
    3395:	00 00                	add    BYTE PTR [eax],al
    3397:	f0 03 00             	lock add eax,DWORD PTR [eax]
    339a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    339d:	82                   	(bad)  
    339e:	0d 00 00 04 01       	or     eax,0x1040000
    33a3:	ac                   	lods   al,BYTE PTR ds:[esi]
    33a4:	00 00                	add    BYTE PTR [eax],al
    33a6:	00 0c e5 0b 00 00 1e 	add    BYTE PTR [eiz*8+0x1e00000b],cl
    33ad:	00 00                	add    BYTE PTR [eax],al
    33af:	00 6c 28 00          	add    BYTE PTR [eax+ebp*1+0x0],ch
    33b3:	9f                   	lahf   
    33b4:	18 07                	sbb    BYTE PTR [edi],al
    33b6:	00 00                	add    BYTE PTR [eax],al
    33b8:	9b                   	fwait
    33b9:	11 00                	adc    DWORD PTR [eax],eax
    33bb:	00 02                	add    BYTE PTR [edx],al
    33bd:	92                   	xchg   edx,eax
    33be:	08 00                	or     BYTE PTR [eax],al
    33c0:	00 02                	add    BYTE PTR [edx],al
    33c2:	28 30                	sub    BYTE PTR [eax],dh
    33c4:	00 00                	add    BYTE PTR [eax],al
    33c6:	00 03                	add    BYTE PTR [ebx],al
    33c8:	04 c6                	add    al,0xc6
    33ca:	07                   	pop    es
    33cb:	00 00                	add    BYTE PTR [eax],al
    33cd:	3a 00                	cmp    al,BYTE PTR [eax]
    33cf:	00 00                	add    BYTE PTR [eax],al
    33d1:	04 01                	add    al,0x1
    33d3:	06                   	push   es
    33d4:	8c 00                	mov    WORD PTR [eax],es
    33d6:	00 00                	add    BYTE PTR [eax],al
    33d8:	02 99 08 00 00 02    	add    bl,BYTE PTR [ecx+0x2000008]
    33de:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    33e4:	01 06                	add    DWORD PTR [esi],eax
    33e6:	85 00                	test   DWORD PTR [eax],eax
    33e8:	00 00                	add    BYTE PTR [eax],al
    33ea:	04 02                	add    al,0x2
    33ec:	05 72 01 00 00       	add    eax,0x172
    33f1:	05 04 05 69 6e       	add    eax,0x6e690504
    33f6:	74 00                	je     33f8 <sysEnter_Vector-0x12cc08>
    33f8:	04 08                	add    al,0x8
    33fa:	05 00 00 00 00       	add    eax,0x0
    33ff:	04 01                	add    al,0x1
    3401:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    3407:	02 07                	add    al,BYTE PTR [edi]
    3409:	19 01                	sbb    DWORD PTR [ecx],eax
    340b:	00 00                	add    BYTE PTR [eax],al
    340d:	02 0e                	add    cl,BYTE PTR [esi]
    340f:	00 00                	add    BYTE PTR [eax],al
    3411:	00 03                	add    BYTE PTR [ebx],al
    3413:	34 81                	xor    al,0x81
    3415:	00 00                	add    BYTE PTR [eax],al
    3417:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    341a:	07                   	pop    es
    341b:	61                   	popa   
    341c:	00 00                	add    BYTE PTR [eax],al
    341e:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    3421:	07                   	pop    es
    3422:	57                   	push   edi
    3423:	00 00                	add    BYTE PTR [eax],al
    3425:	00 02                	add    BYTE PTR [edx],al
    3427:	4d                   	dec    ebp
    3428:	00 00                	add    BYTE PTR [eax],al
    342a:	00 03                	add    BYTE PTR [ebx],al
    342c:	56                   	push   esi
    342d:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    3433:	05 05 00 00 00       	add    eax,0x5
    3438:	04 0c                	add    al,0xc
    343a:	04 66                	add    al,0x66
    343c:	01 00                	add    DWORD PTR [eax],eax
    343e:	00 06                	add    BYTE PTR [esi],al
    3440:	04 ae                	add    al,0xae
    3442:	00 00                	add    BYTE PTR [eax],al
    3444:	00 07                	add    BYTE PTR [edi],al
    3446:	3a 00                	cmp    al,BYTE PTR [eax]
    3448:	00 00                	add    BYTE PTR [eax],al
    344a:	04 01                	add    al,0x1
    344c:	02 13                	add    dl,BYTE PTR [ebx]
    344e:	01 00                	add    DWORD PTR [eax],eax
    3450:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3453:	07                   	pop    es
    3454:	83 01 00             	add    DWORD PTR [ecx],0x0
    3457:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    345a:	07                   	pop    es
    345b:	5c                   	pop    esp
    345c:	00 00                	add    BYTE PTR [eax],al
    345e:	00 06                	add    BYTE PTR [esi],al
    3460:	04 3a                	add    al,0x3a
    3462:	00 00                	add    BYTE PTR [eax],al
    3464:	00 08                	add    BYTE PTR [eax],cl
    3466:	d4 0b                	aam    0xb
    3468:	00 00                	add    BYTE PTR [eax],al
    346a:	01 0a                	add    DWORD PTR [edx],ecx
    346c:	5a                   	pop    edx
    346d:	00 00                	add    BYTE PTR [eax],al
    346f:	00 6c 28 00          	add    BYTE PTR [eax+ebp*1+0x0],ch
    3473:	9f                   	lahf   
    3474:	5f                   	pop    edi
    3475:	00 00                	add    BYTE PTR [eax],al
    3477:	00 01                	add    BYTE PTR [ecx],al
    3479:	9c                   	pushf  
    347a:	00 01                	add    BYTE PTR [ecx],al
    347c:	00 00                	add    BYTE PTR [eax],al
    347e:	09 73 00             	or     DWORD PTR [ebx+0x0],esi
    3481:	01 0a                	add    DWORD PTR [edx],ecx
    3483:	00 01                	add    BYTE PTR [ecx],al
    3485:	00 00                	add    BYTE PTR [eax],al
    3487:	02 91 00 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a00]
    348d:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    3490:	00 00                	add    BYTE PTR [eax],al
    3492:	00 02                	add    BYTE PTR [edx],al
    3494:	91                   	xchg   ecx,eax
    3495:	70 00                	jo     3497 <sysEnter_Vector-0x12cb69>
    3497:	06                   	push   es
    3498:	04 a8                	add    al,0xa8
    349a:	00 00                	add    BYTE PTR [eax],al
    349c:	00 08                	add    BYTE PTR [eax],cl
    349e:	09 0c 00             	or     DWORD PTR [eax+eax*1],ecx
    34a1:	00 01                	add    BYTE PTR [ecx],al
    34a3:	21 c8                	and    eax,ecx
    34a5:	00 00                	add    BYTE PTR [eax],al
    34a7:	00 cb                	add    bl,cl
    34a9:	28 00                	sub    BYTE PTR [eax],al
    34ab:	9f                   	lahf   
    34ac:	3e 02 00             	add    al,BYTE PTR ds:[eax]
    34af:	00 01                	add    BYTE PTR [ecx],al
    34b1:	9c                   	pushf  
    34b2:	e0 01                	loopne 34b5 <sysEnter_Vector-0x12cb4b>
    34b4:	00 00                	add    BYTE PTR [eax],al
    34b6:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    34b9:	72 00                	jb     34bb <sysEnter_Vector-0x12cb45>
    34bb:	01 21                	add    DWORD PTR [ecx],esp
    34bd:	c8 00 00 00          	enter  0x0,0x0
    34c1:	02 91 00 09 6e 75    	add    dl,BYTE PTR [ecx+0x756e0900]
    34c7:	6d                   	ins    DWORD PTR es:[edi],dx
    34c8:	00 01                	add    BYTE PTR [ecx],al
    34ca:	21 9a 00 00 00 02    	and    DWORD PTR [edx+0x2000000],ebx
    34d0:	91                   	xchg   ecx,eax
    34d1:	04 0b                	add    al,0xb
    34d3:	f3 0b 00             	repz or eax,DWORD PTR [eax]
    34d6:	00 01                	add    BYTE PTR [ecx],al
    34d8:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    34db:	00 00                	add    BYTE PTR [eax],al
    34dd:	02 91 08 0b ba 06    	add    dl,BYTE PTR [ecx+0x6ba0b08]
    34e3:	00 00                	add    BYTE PTR [eax],al
    34e5:	01 21                	add    DWORD PTR [ecx],esp
    34e7:	5a                   	pop    edx
    34e8:	00 00                	add    BYTE PTR [eax],al
    34ea:	00 02                	add    BYTE PTR [edx],al
    34ec:	91                   	xchg   ecx,eax
    34ed:	0c 0b                	or     al,0xb
    34ef:	10 0c 00             	adc    BYTE PTR [eax+eax*1],cl
    34f2:	00 01                	add    BYTE PTR [ecx],al
    34f4:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    34f7:	00 00                	add    BYTE PTR [eax],al
    34f9:	02 91 10 0b 87 01    	add    dl,BYTE PTR [ecx+0x1870b10]
    34ff:	00 00                	add    BYTE PTR [eax],al
    3501:	01 22                	add    DWORD PTR [edx],esp
    3503:	5a                   	pop    edx
    3504:	00 00                	add    BYTE PTR [eax],al
    3506:	00 02                	add    BYTE PTR [edx],al
    3508:	91                   	xchg   ecx,eax
    3509:	14 0c                	adc    al,0xc
    350b:	1a 0c 00             	sbb    cl,BYTE PTR [eax+eax*1]
    350e:	00 01                	add    BYTE PTR [ecx],al
    3510:	25 f0 01 00 00       	and    eax,0x1f0
    3515:	05 03 58 6e 00       	add    eax,0x6e5803
    351a:	9f                   	lahf   
    351b:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    351f:	00 01                	add    BYTE PTR [ecx],al
    3521:	27                   	daa    
    3522:	f5                   	cmc    
    3523:	01 00                	add    DWORD PTR [eax],eax
    3525:	00 03                	add    BYTE PTR [ebx],al
    3527:	91                   	xchg   ecx,eax
    3528:	9e                   	sahf   
    3529:	7f 0a                	jg     3535 <sysEnter_Vector-0x12cacb>
    352b:	63 00                	arpl   WORD PTR [eax],ax
    352d:	01 28                	add    DWORD PTR [eax],ebp
    352f:	3a 00                	cmp    al,BYTE PTR [eax]
    3531:	00 00                	add    BYTE PTR [eax],al
    3533:	02 91 66 0c 31 02    	add    dl,BYTE PTR [ecx+0x2310c66]
    3539:	00 00                	add    BYTE PTR [eax],al
    353b:	01 28                	add    DWORD PTR [eax],ebp
    353d:	3a 00                	cmp    al,BYTE PTR [eax]
    353f:	00 00                	add    BYTE PTR [eax],al
    3541:	02 91 6f 0c de 0b    	add    dl,BYTE PTR [ecx+0xbde0c6f]
    3547:	00 00                	add    BYTE PTR [eax],al
    3549:	01 28                	add    DWORD PTR [eax],ebp
    354b:	3a 00                	cmp    al,BYTE PTR [eax]
    354d:	00 00                	add    BYTE PTR [eax],al
    354f:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    3555:	01 29                	add    DWORD PTR [ecx],ebp
    3557:	5a                   	pop    edx
    3558:	00 00                	add    BYTE PTR [eax],al
    355a:	00 02                	add    BYTE PTR [edx],al
    355c:	91                   	xchg   ecx,eax
    355d:	68 0d b1 29 00       	push   0x29b10d
    3562:	9f                   	lahf   
    3563:	25 00 00 00 0c       	and    eax,0xc000000
    3568:	2d 0c 00 00 01       	sub    eax,0x100000c
    356d:	4c                   	dec    esp
    356e:	5a                   	pop    edx
    356f:	00 00                	add    BYTE PTR [eax],al
    3571:	00 02                	add    BYTE PTR [edx],al
    3573:	91                   	xchg   ecx,eax
    3574:	60                   	pusha  
    3575:	00 00                	add    BYTE PTR [eax],al
    3577:	0e                   	push   cs
    3578:	3a 00                	cmp    al,BYTE PTR [eax]
    357a:	00 00                	add    BYTE PTR [eax],al
    357c:	f0 01 00             	lock add DWORD PTR [eax],eax
    357f:	00 0f                	add    BYTE PTR [edi],cl
    3581:	ba 00 00 00 0f       	mov    edx,0xf000000
    3586:	00 07                	add    BYTE PTR [edi],al
    3588:	e0 01                	loopne 358b <sysEnter_Vector-0x12ca75>
    358a:	00 00                	add    BYTE PTR [eax],al
    358c:	0e                   	push   cs
    358d:	3a 00                	cmp    al,BYTE PTR [eax]
    358f:	00 00                	add    BYTE PTR [eax],al
    3591:	05 02 00 00 0f       	add    eax,0xf000002
    3596:	ba 00 00 00 41       	mov    edx,0x41000000
    359b:	00 10                	add    BYTE PTR [eax],dl
    359d:	33 0c 00             	xor    ecx,DWORD PTR [eax+eax*1]
    35a0:	00 01                	add    BYTE PTR [ecx],al
    35a2:	68 5a 00 00 00       	push   0x5a
    35a7:	09 2b                	or     DWORD PTR [ebx],ebp
    35a9:	00 9f 48 04 00 00    	add    BYTE PTR [edi+0x448],bl
    35af:	01 9c 0e 03 00 00 09 	add    DWORD PTR [esi+ecx*1+0x9000003],ebx
    35b6:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    35b9:	00 01                	add    BYTE PTR [ecx],al
    35bb:	68 c8 00 00 00       	push   0xc8
    35c0:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    35c6:	74 00                	je     35c8 <sysEnter_Vector-0x12ca38>
    35c8:	01 68 a8             	add    DWORD PTR [eax-0x58],ebp
    35cb:	00 00                	add    BYTE PTR [eax],al
    35cd:	00 02                	add    BYTE PTR [edx],al
    35cf:	91                   	xchg   ecx,eax
    35d0:	04 0b                	add    al,0xb
    35d2:	ac                   	lods   al,BYTE PTR ds:[esi]
    35d3:	09 00                	or     DWORD PTR [eax],eax
    35d5:	00 01                	add    BYTE PTR [ecx],al
    35d7:	68 41 00 00 00       	push   0x41
    35dc:	02 91 08 0a 6c 65    	add    dl,BYTE PTR [ecx+0x656c0a08]
    35e2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    35e3:	00 01                	add    BYTE PTR [ecx],al
    35e5:	6a 5a                	push   0x5a
    35e7:	00 00                	add    BYTE PTR [eax],al
    35e9:	00 02                	add    BYTE PTR [edx],al
    35eb:	91                   	xchg   ecx,eax
    35ec:	6c                   	ins    BYTE PTR es:[edi],dx
    35ed:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    35f0:	6d                   	ins    DWORD PTR es:[edi],dx
    35f1:	00 01                	add    BYTE PTR [ecx],al
    35f3:	6b c1 00             	imul   eax,ecx,0x0
    35f6:	00 00                	add    BYTE PTR [eax],al
    35f8:	02 91 68 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a68]
    35fe:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    3602:	00 00                	add    BYTE PTR [eax],al
    3604:	02 91 64 0c f3 0b    	add    dl,BYTE PTR [ecx+0xbf30c64]
    360a:	00 00                	add    BYTE PTR [eax],al
    360c:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    3610:	00 00                	add    BYTE PTR [eax],al
    3612:	02 91 60 0a 73 74    	add    dl,BYTE PTR [ecx+0x74730a60]
    3618:	72 00                	jb     361a <sysEnter_Vector-0x12c9e6>
    361a:	01 6d c8             	add    DWORD PTR [ebp-0x38],ebp
    361d:	00 00                	add    BYTE PTR [eax],al
    361f:	00 02                	add    BYTE PTR [edx],al
    3621:	91                   	xchg   ecx,eax
    3622:	5c                   	pop    esp
    3623:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    3626:	01 6e a8             	add    DWORD PTR [esi-0x58],ebp
    3629:	00 00                	add    BYTE PTR [eax],al
    362b:	00 02                	add    BYTE PTR [edx],al
    362d:	91                   	xchg   ecx,eax
    362e:	58                   	pop    eax
    362f:	0c fc                	or     al,0xfc
    3631:	09 00                	or     DWORD PTR [eax],eax
    3633:	00 01                	add    BYTE PTR [ecx],al
    3635:	70 5a                	jo     3691 <sysEnter_Vector-0x12c96f>
    3637:	00 00                	add    BYTE PTR [eax],al
    3639:	00 02                	add    BYTE PTR [edx],al
    363b:	91                   	xchg   ecx,eax
    363c:	54                   	push   esp
    363d:	0c 21                	or     al,0x21
    363f:	0c 00                	or     al,0x0
    3641:	00 01                	add    BYTE PTR [ecx],al
    3643:	72 5a                	jb     369f <sysEnter_Vector-0x12c961>
    3645:	00 00                	add    BYTE PTR [eax],al
    3647:	00 02                	add    BYTE PTR [edx],al
    3649:	91                   	xchg   ecx,eax
    364a:	50                   	push   eax
    364b:	0c 10                	or     al,0x10
    364d:	0c 00                	or     al,0x0
    364f:	00 01                	add    BYTE PTR [ecx],al
    3651:	73 5a                	jae    36ad <sysEnter_Vector-0x12c953>
    3653:	00 00                	add    BYTE PTR [eax],al
    3655:	00 02                	add    BYTE PTR [edx],al
    3657:	91                   	xchg   ecx,eax
    3658:	4c                   	dec    esp
    3659:	0c f8                	or     al,0xf8
    365b:	0b 00                	or     eax,DWORD PTR [eax]
    365d:	00 01                	add    BYTE PTR [ecx],al
    365f:	75 5a                	jne    36bb <sysEnter_Vector-0x12c945>
    3661:	00 00                	add    BYTE PTR [eax],al
    3663:	00 02                	add    BYTE PTR [edx],al
    3665:	91                   	xchg   ecx,eax
    3666:	48                   	dec    eax
    3667:	11 02                	adc    DWORD PTR [edx],eax
    3669:	0c 00                	or     al,0x0
    366b:	00 01                	add    BYTE PTR [ecx],al
    366d:	7f 4d                	jg     36bc <sysEnter_Vector-0x12c944>
    366f:	2b 00                	sub    eax,DWORD PTR [eax]
    3671:	9f                   	lahf   
    3672:	12 f2                	adc    dh,dl
    3674:	2d 00 9f 1b 00       	sub    eax,0x1b9f00
    3679:	00 00                	add    BYTE PTR [eax],al
    367b:	f6 02 00             	test   BYTE PTR [edx],0x0
    367e:	00 0a                	add    BYTE PTR [edx],cl
    3680:	69 70 00 01 e0 0e 03 	imul   esi,DWORD PTR [eax+0x0],0x30ee001
    3687:	00 00                	add    BYTE PTR [eax],al
    3689:	02 91 44 00 0d 12    	add    dl,BYTE PTR [ecx+0x120d0044]
    368f:	2e 00 9f 1b 00 00 00 	add    BYTE PTR cs:[edi+0x1b],bl
    3696:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    3699:	00 01                	add    BYTE PTR [ecx],al
    369b:	e3 14                	jecxz  36b1 <sysEnter_Vector-0x12c94f>
    369d:	03 00                	add    eax,DWORD PTR [eax]
    369f:	00 02                	add    BYTE PTR [edx],al
    36a1:	91                   	xchg   ecx,eax
    36a2:	40                   	inc    eax
    36a3:	00 00                	add    BYTE PTR [eax],al
    36a5:	06                   	push   es
    36a6:	04 9a                	add    al,0x9a
    36a8:	00 00                	add    BYTE PTR [eax],al
    36aa:	00 06                	add    BYTE PTR [esi],al
    36ac:	04 5a                	add    al,0x5a
    36ae:	00 00                	add    BYTE PTR [eax],al
    36b0:	00 13                	add    BYTE PTR [ebx],dl
    36b2:	34 0c                	xor    al,0xc
    36b4:	00 00                	add    BYTE PTR [eax],al
    36b6:	01 15 01 5a 00 00    	add    DWORD PTR ds:0x5a01,edx
    36bc:	00 51 2f             	add    BYTE PTR [ecx+0x2f],dl
    36bf:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
    36c5:	01 9c 70 03 00 00 14 	add    DWORD PTR [eax+esi*2+0x14000003],ebx
    36cc:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    36cf:	00 01                	add    BYTE PTR [ecx],al
    36d1:	15 01 c8 00 00       	adc    eax,0xc801
    36d6:	00 02                	add    BYTE PTR [edx],al
    36d8:	91                   	xchg   ecx,eax
    36d9:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    36dc:	6d                   	ins    DWORD PTR es:[edi],dx
    36dd:	74 00                	je     36df <sysEnter_Vector-0x12c921>
    36df:	01 15 01 a8 00 00    	add    DWORD PTR ds:0xa801,edx
    36e5:	00 02                	add    BYTE PTR [edx],al
    36e7:	91                   	xchg   ecx,eax
    36e8:	04 15                	add    al,0x15
    36ea:	16                   	push   ss
    36eb:	ac                   	lods   al,BYTE PTR ds:[esi]
    36ec:	09 00                	or     DWORD PTR [eax],eax
    36ee:	00 01                	add    BYTE PTR [ecx],al
    36f0:	17                   	pop    ss
    36f1:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    36f4:	00 00                	add    BYTE PTR [eax],al
    36f6:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    36fc:	01 18                	add    DWORD PTR [eax],ebx
    36fe:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    3701:	00 00                	add    BYTE PTR [eax],al
    3703:	02 91 6c 00 18 a3    	add    dl,BYTE PTR [ecx-0x5ce7ff94]
    3709:	00 00                	add    BYTE PTR [eax],al
    370b:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    370e:	76 00                	jbe    3710 <sysEnter_Vector-0x12c8f0>
    3710:	00 00                	add    BYTE PTR [eax],al
    3712:	05 03 cc 71 00       	add    eax,0x71cc03
    3717:	9f                   	lahf   
    3718:	18 34 01             	sbb    BYTE PTR [ecx+eax*1],dh
    371b:	00 00                	add    BYTE PTR [eax],al
    371d:	04 38                	add    al,0x38
    371f:	76 00                	jbe    3721 <sysEnter_Vector-0x12c8df>
    3721:	00 00                	add    BYTE PTR [eax],al
    3723:	05 03 d0 71 00       	add    eax,0x71d003
    3728:	9f                   	lahf   
    3729:	18 7b 00             	sbb    BYTE PTR [ebx+0x0],bh
    372c:	00 00                	add    BYTE PTR [eax],al
    372e:	04 39                	add    al,0x39
    3730:	76 00                	jbe    3732 <sysEnter_Vector-0x12c8ce>
    3732:	00 00                	add    BYTE PTR [eax],al
    3734:	05 03 c8 71 00       	add    eax,0x71c803
    3739:	9f                   	lahf   
    373a:	18 7c 01 00          	sbb    BYTE PTR [ecx+eax*1+0x0],bh
    373e:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    3741:	9a 00 00 00 05 03 d8 	call   0xd803:0x5000000
    3748:	71 00                	jno    374a <sysEnter_Vector-0x12c8b6>
    374a:	9f                   	lahf   
    374b:	18 6e 00             	sbb    BYTE PTR [esi+0x0],ch
    374e:	00 00                	add    BYTE PTR [eax],al
    3750:	05 34 c5 03 00       	add    eax,0x3c534
    3755:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    375b:	9f                   	lahf   
    375c:	06                   	push   es
    375d:	04 8f                	add    al,0x8f
    375f:	00 00                	add    BYTE PTR [eax],al
    3761:	00 18                	add    BYTE PTR [eax],bl
    3763:	91                   	xchg   ecx,eax
    3764:	00 00                	add    BYTE PTR [eax],al
    3766:	00 05 35 76 00 00    	add    BYTE PTR ds:0x7635,al
    376c:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    3772:	9f                   	lahf   
    3773:	18 41 00             	sbb    BYTE PTR [ecx+0x0],al
    3776:	00 00                	add    BYTE PTR [eax],al
    3778:	06                   	push   es
    3779:	58                   	pop    eax
    377a:	ed                   	in     eax,dx
    377b:	03 00                	add    eax,DWORD PTR [eax]
    377d:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    3783:	9f                   	lahf   
    3784:	06                   	push   es
    3785:	04 c8                	add    al,0xc8
    3787:	00 00                	add    BYTE PTR [eax],al
    3789:	00 00                	add    BYTE PTR [eax],al
    378b:	65 01 00             	add    DWORD PTR gs:[eax],eax
    378e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3791:	d8 0e                	fmul   DWORD PTR [esi]
    3793:	00 00                	add    BYTE PTR [eax],al
    3795:	04 01                	add    al,0x1
    3797:	ac                   	lods   al,BYTE PTR ds:[esi]
    3798:	00 00                	add    BYTE PTR [eax],al
    379a:	00 0c 3c             	add    BYTE PTR [esp+edi*1],cl
    379d:	0c 00                	or     al,0x0
    379f:	00 1e                	add    BYTE PTR [esi],bl
    37a1:	00 00                	add    BYTE PTR [eax],al
    37a3:	00 84 2f 00 9f 84 00 	add    BYTE PTR [edi+ebp*1+0x849f00],al
    37aa:	00 00                	add    BYTE PTR [eax],al
    37ac:	87 13                	xchg   DWORD PTR [ebx],edx
    37ae:	00 00                	add    BYTE PTR [eax],al
    37b0:	02 01                	add    al,BYTE PTR [ecx]
    37b2:	06                   	push   es
    37b3:	8c 00                	mov    WORD PTR [eax],es
    37b5:	00 00                	add    BYTE PTR [eax],al
    37b7:	02 01                	add    al,BYTE PTR [ecx]
    37b9:	06                   	push   es
    37ba:	85 00                	test   DWORD PTR [eax],eax
    37bc:	00 00                	add    BYTE PTR [eax],al
    37be:	02 02                	add    al,BYTE PTR [edx]
    37c0:	05 72 01 00 00       	add    eax,0x172
    37c5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    37cc:	02 08                	add    cl,BYTE PTR [eax]
    37ce:	05 00 00 00 00       	add    eax,0x0
    37d3:	02 01                	add    al,BYTE PTR [ecx]
    37d5:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    37db:	02 07                	add    al,BYTE PTR [edi]
    37dd:	19 01                	sbb    DWORD PTR [ecx],eax
    37df:	00 00                	add    BYTE PTR [eax],al
    37e1:	04 0e                	add    al,0xe
    37e3:	00 00                	add    BYTE PTR [eax],al
    37e5:	00 02                	add    BYTE PTR [edx],al
    37e7:	34 61                	xor    al,0x61
    37e9:	00 00                	add    BYTE PTR [eax],al
    37eb:	00 02                	add    BYTE PTR [edx],al
    37ed:	04 07                	add    al,0x7
    37ef:	61                   	popa   
    37f0:	00 00                	add    BYTE PTR [eax],al
    37f2:	00 02                	add    BYTE PTR [edx],al
    37f4:	08 07                	or     BYTE PTR [edi],al
    37f6:	57                   	push   edi
    37f7:	00 00                	add    BYTE PTR [eax],al
    37f9:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3800:	56                   	push   esi
    3801:	61                   	popa   
    3802:	00 00                	add    BYTE PTR [eax],al
    3804:	00 02                	add    BYTE PTR [edx],al
    3806:	04 05                	add    al,0x5
    3808:	05 00 00 00 02       	add    eax,0x2000000
    380d:	0c 04                	or     al,0x4
    380f:	66 01 00             	add    WORD PTR [eax],ax
    3812:	00 02                	add    BYTE PTR [edx],al
    3814:	01 02                	add    DWORD PTR [edx],eax
    3816:	13 01                	adc    eax,DWORD PTR [ecx]
    3818:	00 00                	add    BYTE PTR [eax],al
    381a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    381d:	83 01 00             	add    DWORD PTR [ecx],0x0
    3820:	00 02                	add    BYTE PTR [edx],al
    3822:	04 07                	add    al,0x7
    3824:	5c                   	pop    esp
    3825:	00 00                	add    BYTE PTR [eax],al
    3827:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    382d:	00 06                	add    BYTE PTR [esi],al
    382f:	4d                   	dec    ebp
    3830:	0c 00                	or     al,0x0
    3832:	00 01                	add    BYTE PTR [ecx],al
    3834:	10 84 2f 00 9f 84 00 	adc    BYTE PTR [edi+ebp*1+0x849f00],al
    383b:	00 00                	add    BYTE PTR [eax],al
    383d:	01 9c d5 00 00 00 07 	add    DWORD PTR [ebp+edx*8+0x7000000],ebx
    3844:	48                   	dec    eax
    3845:	0c 00                	or     al,0x0
    3847:	00 01                	add    BYTE PTR [ecx],al
    3849:	12 d5                	adc    dl,ch
    384b:	00 00                	add    BYTE PTR [eax],al
    384d:	00 02                	add    BYTE PTR [edx],al
    384f:	91                   	xchg   ecx,eax
    3850:	67 07                	addr16 pop es
    3852:	56                   	push   esi
    3853:	0c 00                	or     al,0x0
    3855:	00 01                	add    BYTE PTR [ecx],al
    3857:	13 3a                	adc    edi,DWORD PTR [edx]
    3859:	00 00                	add    BYTE PTR [eax],al
    385b:	00 02                	add    BYTE PTR [edx],al
    385d:	91                   	xchg   ecx,eax
    385e:	6c                   	ins    BYTE PTR es:[edi],dx
    385f:	00 08                	add    BYTE PTR [eax],cl
    3861:	25 00 00 00 e5       	and    eax,0xe5000000
    3866:	00 00                	add    BYTE PTR [eax],al
    3868:	00 09                	add    BYTE PTR [ecx],cl
    386a:	8f 00                	pop    DWORD PTR [eax]
    386c:	00 00                	add    BYTE PTR [eax],al
    386e:	04 00                	add    al,0x0
    3870:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    3876:	37                   	aaa    
    3877:	56                   	push   esi
    3878:	00 00                	add    BYTE PTR [eax],al
    387a:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    3880:	9f                   	lahf   
    3881:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    3884:	00 00                	add    BYTE PTR [eax],al
    3886:	03 38                	add    edi,DWORD PTR [eax]
    3888:	56                   	push   esi
    3889:	00 00                	add    BYTE PTR [eax],al
    388b:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    3891:	9f                   	lahf   
    3892:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    3895:	00 00                	add    BYTE PTR [eax],al
    3897:	03 39                	add    edi,DWORD PTR [ecx]
    3899:	56                   	push   esi
    389a:	00 00                	add    BYTE PTR [eax],al
    389c:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    38a2:	9f                   	lahf   
    38a3:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    38a7:	00 03                	add    BYTE PTR [ebx],al
    38a9:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    38ac:	00 00                	add    BYTE PTR [eax],al
    38ae:	05 03 d8 71 00       	add    eax,0x71d803
    38b3:	9f                   	lahf   
    38b4:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    38b7:	00 00                	add    BYTE PTR [eax],al
    38b9:	04 34                	add    al,0x34
    38bb:	3a 01                	cmp    al,BYTE PTR [ecx]
    38bd:	00 00                	add    BYTE PTR [eax],al
    38bf:	05 03 c4 71 00       	add    eax,0x71c403
    38c4:	9f                   	lahf   
    38c5:	05 04 6f 00 00       	add    eax,0x6f04
    38ca:	00 0a                	add    BYTE PTR [edx],cl
    38cc:	91                   	xchg   ecx,eax
    38cd:	00 00                	add    BYTE PTR [eax],al
    38cf:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    38d6:	05 03 c0 71 00       	add    eax,0x71c003
    38db:	9f                   	lahf   
    38dc:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    38df:	00 00                	add    BYTE PTR [eax],al
    38e1:	05 58 62 01 00       	add    eax,0x16258
    38e6:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    38ec:	9f                   	lahf   
    38ed:	05 04 9d 00 00       	add    eax,0x9d04
    38f2:	00 00                	add    BYTE PTR [eax],al
    38f4:	45                   	inc    ebp
    38f5:	02 00                	add    al,BYTE PTR [eax]
    38f7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    38fa:	62 0f                	bound  ecx,QWORD PTR [edi]
    38fc:	00 00                	add    BYTE PTR [eax],al
    38fe:	04 01                	add    al,0x1
    3900:	ac                   	lods   al,BYTE PTR ds:[esi]
    3901:	00 00                	add    BYTE PTR [eax],al
    3903:	00 0c 97             	add    BYTE PTR [edi+edx*4],cl
    3906:	0c 00                	or     al,0x0
    3908:	00 1e                	add    BYTE PTR [esi],bl
    390a:	00 00                	add    BYTE PTR [eax],al
    390c:	00 08                	add    BYTE PTR [eax],cl
    390e:	30 00                	xor    BYTE PTR [eax],al
    3910:	9f                   	lahf   
    3911:	11 01                	adc    DWORD PTR [ecx],eax
    3913:	00 00                	add    BYTE PTR [eax],al
    3915:	49                   	dec    ecx
    3916:	14 00                	adc    al,0x0
    3918:	00 02                	add    BYTE PTR [edx],al
    391a:	01 06                	add    DWORD PTR [esi],eax
    391c:	8c 00                	mov    WORD PTR [eax],es
    391e:	00 00                	add    BYTE PTR [eax],al
    3920:	02 01                	add    al,BYTE PTR [ecx]
    3922:	06                   	push   es
    3923:	85 00                	test   DWORD PTR [eax],eax
    3925:	00 00                	add    BYTE PTR [eax],al
    3927:	02 02                	add    al,BYTE PTR [edx]
    3929:	05 72 01 00 00       	add    eax,0x172
    392e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3935:	02 08                	add    cl,BYTE PTR [eax]
    3937:	05 00 00 00 00       	add    eax,0x0
    393c:	02 01                	add    al,BYTE PTR [ecx]
    393e:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3944:	02 07                	add    al,BYTE PTR [edi]
    3946:	19 01                	sbb    DWORD PTR [ecx],eax
    3948:	00 00                	add    BYTE PTR [eax],al
    394a:	04 0e                	add    al,0xe
    394c:	00 00                	add    BYTE PTR [eax],al
    394e:	00 02                	add    BYTE PTR [edx],al
    3950:	34 61                	xor    al,0x61
    3952:	00 00                	add    BYTE PTR [eax],al
    3954:	00 02                	add    BYTE PTR [edx],al
    3956:	04 07                	add    al,0x7
    3958:	61                   	popa   
    3959:	00 00                	add    BYTE PTR [eax],al
    395b:	00 02                	add    BYTE PTR [edx],al
    395d:	08 07                	or     BYTE PTR [edi],al
    395f:	57                   	push   edi
    3960:	00 00                	add    BYTE PTR [eax],al
    3962:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3969:	56                   	push   esi
    396a:	61                   	popa   
    396b:	00 00                	add    BYTE PTR [eax],al
    396d:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    3974:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    3977:	00 00                	add    BYTE PTR [eax],al
    3979:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3980:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3983:	66 01 00             	add    WORD PTR [eax],ax
    3986:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    398c:	00 06                	add    BYTE PTR [esi],al
    398e:	25 00 00 00 02       	and    eax,0x2000000
    3993:	01 02                	add    DWORD PTR [edx],eax
    3995:	13 01                	adc    eax,DWORD PTR [ecx]
    3997:	00 00                	add    BYTE PTR [eax],al
    3999:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    399c:	83 01 00             	add    DWORD PTR [ecx],0x0
    399f:	00 02                	add    BYTE PTR [edx],al
    39a1:	04 07                	add    al,0x7
    39a3:	5c                   	pop    esp
    39a4:	00 00                	add    BYTE PTR [eax],al
    39a6:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    39ac:	00 07                	add    BYTE PTR [edi],al
    39ae:	66                   	data16
    39af:	0c 00                	or     al,0x0
    39b1:	00 01                	add    BYTE PTR [ecx],al
    39b3:	1d b3 00 00 00       	sbb    eax,0xb3
    39b8:	08 30                	or     BYTE PTR [eax],dh
    39ba:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    39c0:	01 9c ef 00 00 00 08 	add    DWORD PTR [edi+ebp*8+0x8000000],ebx
    39c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    39c8:	0b 00                	or     eax,DWORD PTR [eax]
    39ca:	00 01                	add    BYTE PTR [ecx],al
    39cc:	1d b3 00 00 00       	sbb    eax,0xb3
    39d1:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    39d7:	63 00                	arpl   WORD PTR [eax],ax
    39d9:	01 1d 93 00 00 00    	add    DWORD PTR ds:0x93,ebx
    39df:	02 91 04 00 07 5e    	add    dl,BYTE PTR [ecx+0x5e070004]
    39e5:	0c 00                	or     al,0x0
    39e7:	00 01                	add    BYTE PTR [ecx],al
    39e9:	23 b3 00 00 00 46    	and    esi,DWORD PTR [ebx+0x46000000]
    39ef:	30 00                	xor    BYTE PTR [eax],al
    39f1:	9f                   	lahf   
    39f2:	3e 00 00             	add    BYTE PTR ds:[eax],al
    39f5:	00 01                	add    BYTE PTR [ecx],al
    39f7:	9c                   	pushf  
    39f8:	25 01 00 00 08       	and    eax,0x8000001
    39fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    39fe:	0b 00                	or     eax,DWORD PTR [eax]
    3a00:	00 01                	add    BYTE PTR [ecx],al
    3a02:	23 b3 00 00 00 02    	and    esi,DWORD PTR [ebx+0x2000000]
    3a08:	91                   	xchg   ecx,eax
    3a09:	00 09                	add    BYTE PTR [ecx],cl
    3a0b:	73 72                	jae    3a7f <sysEnter_Vector-0x12c581>
    3a0d:	63 00                	arpl   WORD PTR [eax],ax
    3a0f:	01 23                	add    DWORD PTR [ebx],esp
    3a11:	93                   	xchg   ebx,eax
    3a12:	00 00                	add    BYTE PTR [eax],al
    3a14:	00 02                	add    BYTE PTR [edx],al
    3a16:	91                   	xchg   ecx,eax
    3a17:	04 00                	add    al,0x0
    3a19:	07                   	pop    es
    3a1a:	81 0c 00 00 01 29 b3 	or     DWORD PTR [eax+eax*1],0xb3290100
    3a21:	00 00                	add    BYTE PTR [eax],al
    3a23:	00 84 30 00 9f 6f 00 	add    BYTE PTR [eax+esi*1+0x6f9f00],al
    3a2a:	00 00                	add    BYTE PTR [eax],al
    3a2c:	01 9c 83 01 00 00 08 	add    DWORD PTR [ebx+eax*4+0x8000001],ebx
    3a33:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a34:	0b 00                	or     eax,DWORD PTR [eax]
    3a36:	00 01                	add    BYTE PTR [ecx],al
    3a38:	29 b3 00 00 00 02    	sub    DWORD PTR [ebx+0x2000000],esi
    3a3e:	91                   	xchg   ecx,eax
    3a3f:	00 09                	add    BYTE PTR [ecx],cl
    3a41:	73 72                	jae    3ab5 <sysEnter_Vector-0x12c54b>
    3a43:	63 00                	arpl   WORD PTR [eax],ax
    3a45:	01 29                	add    DWORD PTR [ecx],ebp
    3a47:	93                   	xchg   ebx,eax
    3a48:	00 00                	add    BYTE PTR [eax],al
    3a4a:	00 02                	add    BYTE PTR [edx],al
    3a4c:	91                   	xchg   ecx,eax
    3a4d:	04 09                	add    al,0x9
    3a4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a50:	00 01                	add    BYTE PTR [ecx],al
    3a52:	29 7a 00             	sub    DWORD PTR [edx+0x0],edi
    3a55:	00 00                	add    BYTE PTR [eax],al
    3a57:	02 91 08 0a 75 0c    	add    dl,BYTE PTR [ecx+0xc750a08]
    3a5d:	00 00                	add    BYTE PTR [eax],al
    3a5f:	01 2b                	add    DWORD PTR [ebx],ebp
    3a61:	7a 00                	jp     3a63 <sysEnter_Vector-0x12c59d>
    3a63:	00 00                	add    BYTE PTR [eax],al
    3a65:	02 91 6c 0a 8a 0c    	add    dl,BYTE PTR [ecx+0xc8a0a6c]
    3a6b:	00 00                	add    BYTE PTR [eax],al
    3a6d:	01 2c 7a             	add    DWORD PTR [edx+edi*2],ebp
    3a70:	00 00                	add    BYTE PTR [eax],al
    3a72:	00 02                	add    BYTE PTR [edx],al
    3a74:	91                   	xchg   ecx,eax
    3a75:	68 00 07 6d 0c       	push   0xc6d0700
    3a7a:	00 00                	add    BYTE PTR [eax],al
    3a7c:	01 37                	add    DWORD PTR [edi],esi
    3a7e:	b3 00                	mov    bl,0x0
    3a80:	00 00                	add    BYTE PTR [eax],al
    3a82:	f3 30 00             	repz xor BYTE PTR [eax],al
    3a85:	9f                   	lahf   
    3a86:	26 00 00             	add    BYTE PTR es:[eax],al
    3a89:	00 01                	add    BYTE PTR [ecx],al
    3a8b:	9c                   	pushf  
    3a8c:	c5 01                	lds    eax,FWORD PTR [ecx]
    3a8e:	00 00                	add    BYTE PTR [eax],al
    3a90:	08 6e 0b             	or     BYTE PTR [esi+0xb],ch
    3a93:	00 00                	add    BYTE PTR [eax],al
    3a95:	01 37                	add    DWORD PTR [edi],esi
    3a97:	b3 00                	mov    bl,0x0
    3a99:	00 00                	add    BYTE PTR [eax],al
    3a9b:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    3aa1:	63 00                	arpl   WORD PTR [eax],ax
    3aa3:	01 37                	add    DWORD PTR [edi],esi
    3aa5:	93                   	xchg   ebx,eax
    3aa6:	00 00                	add    BYTE PTR [eax],al
    3aa8:	00 02                	add    BYTE PTR [edx],al
    3aaa:	91                   	xchg   ecx,eax
    3aab:	04 09                	add    al,0x9
    3aad:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3aae:	00 01                	add    BYTE PTR [ecx],al
    3ab0:	37                   	aaa    
    3ab1:	7a 00                	jp     3ab3 <sysEnter_Vector-0x12c54d>
    3ab3:	00 00                	add    BYTE PTR [eax],al
    3ab5:	02 91 08 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff8]
    3abb:	00 00                	add    BYTE PTR [eax],al
    3abd:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3ac0:	56                   	push   esi
    3ac1:	00 00                	add    BYTE PTR [eax],al
    3ac3:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    3ac9:	9f                   	lahf   
    3aca:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3acd:	00 00                	add    BYTE PTR [eax],al
    3acf:	04 38                	add    al,0x38
    3ad1:	56                   	push   esi
    3ad2:	00 00                	add    BYTE PTR [eax],al
    3ad4:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    3ada:	9f                   	lahf   
    3adb:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3ade:	00 00                	add    BYTE PTR [eax],al
    3ae0:	04 39                	add    al,0x39
    3ae2:	56                   	push   esi
    3ae3:	00 00                	add    BYTE PTR [eax],al
    3ae5:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    3aeb:	9f                   	lahf   
    3aec:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3af0:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    3af3:	85 00                	test   DWORD PTR [eax],eax
    3af5:	00 00                	add    BYTE PTR [eax],al
    3af7:	05 03 d8 71 00       	add    eax,0x71d803
    3afc:	9f                   	lahf   
    3afd:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3b00:	00 00                	add    BYTE PTR [eax],al
    3b02:	05 34 1a 02 00       	add    eax,0x21a34
    3b07:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    3b0d:	9f                   	lahf   
    3b0e:	05 04 6f 00 00       	add    eax,0x6f04
    3b13:	00 0b                	add    BYTE PTR [ebx],cl
    3b15:	91                   	xchg   ecx,eax
    3b16:	00 00                	add    BYTE PTR [eax],al
    3b18:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    3b1e:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    3b24:	9f                   	lahf   
    3b25:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3b28:	00 00                	add    BYTE PTR [eax],al
    3b2a:	06                   	push   es
    3b2b:	58                   	pop    eax
    3b2c:	42                   	inc    edx
    3b2d:	02 00                	add    al,BYTE PTR [eax]
    3b2f:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    3b35:	9f                   	lahf   
    3b36:	05 04 b3 00 00       	add    eax,0xb304
    3b3b:	00 00                	add    BYTE PTR [eax],al
    3b3d:	d3 01                	rol    DWORD PTR [ecx],cl
    3b3f:	00 00                	add    BYTE PTR [eax],al
    3b41:	04 00                	add    al,0x0
    3b43:	03 10                	add    edx,DWORD PTR [eax]
    3b45:	00 00                	add    BYTE PTR [eax],al
    3b47:	04 01                	add    al,0x1
    3b49:	ac                   	lods   al,BYTE PTR ds:[esi]
    3b4a:	00 00                	add    BYTE PTR [eax],al
    3b4c:	00 0c bb             	add    BYTE PTR [ebx+edi*4],cl
    3b4f:	0c 00                	or     al,0x0
    3b51:	00 1e                	add    BYTE PTR [esi],bl
    3b53:	00 00                	add    BYTE PTR [eax],al
    3b55:	00 1c 31             	add    BYTE PTR [ecx+esi*1],bl
    3b58:	00 9f 7b 00 00 00    	add    BYTE PTR [edi+0x7b],bl
    3b5e:	32 15 00 00 02 01    	xor    dl,BYTE PTR ds:0x1020000
    3b64:	06                   	push   es
    3b65:	8c 00                	mov    WORD PTR [eax],es
    3b67:	00 00                	add    BYTE PTR [eax],al
    3b69:	02 01                	add    al,BYTE PTR [ecx]
    3b6b:	06                   	push   es
    3b6c:	85 00                	test   DWORD PTR [eax],eax
    3b6e:	00 00                	add    BYTE PTR [eax],al
    3b70:	02 02                	add    al,BYTE PTR [edx]
    3b72:	05 72 01 00 00       	add    eax,0x172
    3b77:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3b7e:	02 08                	add    cl,BYTE PTR [eax]
    3b80:	05 00 00 00 00       	add    eax,0x0
    3b85:	02 01                	add    al,BYTE PTR [ecx]
    3b87:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3b8d:	02 07                	add    al,BYTE PTR [edi]
    3b8f:	19 01                	sbb    DWORD PTR [ecx],eax
    3b91:	00 00                	add    BYTE PTR [eax],al
    3b93:	04 0e                	add    al,0xe
    3b95:	00 00                	add    BYTE PTR [eax],al
    3b97:	00 02                	add    BYTE PTR [edx],al
    3b99:	34 61                	xor    al,0x61
    3b9b:	00 00                	add    BYTE PTR [eax],al
    3b9d:	00 02                	add    BYTE PTR [edx],al
    3b9f:	04 07                	add    al,0x7
    3ba1:	61                   	popa   
    3ba2:	00 00                	add    BYTE PTR [eax],al
    3ba4:	00 02                	add    BYTE PTR [edx],al
    3ba6:	08 07                	or     BYTE PTR [edi],al
    3ba8:	57                   	push   edi
    3ba9:	00 00                	add    BYTE PTR [eax],al
    3bab:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3bb2:	56                   	push   esi
    3bb3:	61                   	popa   
    3bb4:	00 00                	add    BYTE PTR [eax],al
    3bb6:	00 02                	add    BYTE PTR [edx],al
    3bb8:	04 05                	add    al,0x5
    3bba:	05 00 00 00 02       	add    eax,0x2000000
    3bbf:	0c 04                	or     al,0x4
    3bc1:	66 01 00             	add    WORD PTR [eax],ax
    3bc4:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3bca:	00 06                	add    BYTE PTR [esi],al
    3bcc:	25 00 00 00 02       	and    eax,0x2000000
    3bd1:	01 02                	add    DWORD PTR [edx],eax
    3bd3:	13 01                	adc    eax,DWORD PTR [ecx]
    3bd5:	00 00                	add    BYTE PTR [eax],al
    3bd7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3bda:	83 01 00             	add    DWORD PTR [ecx],0x0
    3bdd:	00 02                	add    BYTE PTR [edx],al
    3bdf:	04 07                	add    al,0x7
    3be1:	5c                   	pop    esp
    3be2:	00 00                	add    BYTE PTR [eax],al
    3be4:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3bea:	00 07                	add    BYTE PTR [edi],al
    3bec:	ac                   	lods   al,BYTE PTR ds:[esi]
    3bed:	0c 00                	or     al,0x0
    3bef:	00 01                	add    BYTE PTR [ecx],al
    3bf1:	1a 3a                	sbb    bh,BYTE PTR [edx]
    3bf3:	00 00                	add    BYTE PTR [eax],al
    3bf5:	00 1c 31             	add    BYTE PTR [ecx+esi*1],bl
    3bf8:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
    3bfe:	01 9c 14 01 00 00 08 	add    DWORD PTR [esp+edx*1+0x8000001],ebx
    3c05:	70 31                	jo     3c38 <sysEnter_Vector-0x12c3c8>
    3c07:	00 01                	add    BYTE PTR [ecx],al
    3c09:	1a 88 00 00 00 02    	sbb    cl,BYTE PTR [eax+0x2000000]
    3c0f:	91                   	xchg   ecx,eax
    3c10:	00 08                	add    BYTE PTR [eax],cl
    3c12:	70 32                	jo     3c46 <sysEnter_Vector-0x12c3ba>
    3c14:	00 01                	add    BYTE PTR [ecx],al
    3c16:	1a 88 00 00 00 02    	sbb    cl,BYTE PTR [eax+0x2000000]
    3c1c:	91                   	xchg   ecx,eax
    3c1d:	04 09                	add    al,0x9
    3c1f:	73 31                	jae    3c52 <sysEnter_Vector-0x12c3ae>
    3c21:	00 01                	add    BYTE PTR [ecx],al
    3c23:	1c 14                	sbb    al,0x14
    3c25:	01 00                	add    DWORD PTR [eax],eax
    3c27:	00 01                	add    BYTE PTR [ecx],al
    3c29:	53                   	push   ebx
    3c2a:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    3c2d:	00 01                	add    BYTE PTR [ecx],al
    3c2f:	1d 14 01 00 00       	sbb    eax,0x114
    3c34:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3c37:	63 31                	arpl   WORD PTR [ecx],si
    3c39:	00 01                	add    BYTE PTR [ecx],al
    3c3b:	1e                   	push   ds
    3c3c:	48                   	dec    eax
    3c3d:	00 00                	add    BYTE PTR [eax],al
    3c3f:	00 02                	add    BYTE PTR [edx],al
    3c41:	91                   	xchg   ecx,eax
    3c42:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3c43:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    3c46:	00 01                	add    BYTE PTR [ecx],al
    3c48:	1e                   	push   ds
    3c49:	48                   	dec    eax
    3c4a:	00 00                	add    BYTE PTR [eax],al
    3c4c:	00 02                	add    BYTE PTR [edx],al
    3c4e:	91                   	xchg   ecx,eax
    3c4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3c50:	00 05 04 1a 01 00    	add    BYTE PTR ds:0x11a04,al
    3c56:	00 06                	add    BYTE PTR [esi],al
    3c58:	48                   	dec    eax
    3c59:	00 00                	add    BYTE PTR [eax],al
    3c5b:	00 0a                	add    BYTE PTR [edx],cl
    3c5d:	b4 0c                	mov    ah,0xc
    3c5f:	00 00                	add    BYTE PTR [eax],al
    3c61:	01 2c 3a             	add    DWORD PTR [edx+edi*1],ebp
    3c64:	00 00                	add    BYTE PTR [eax],al
    3c66:	00 7a 31             	add    BYTE PTR [edx+0x31],bh
    3c69:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    3c6f:	01 9c 53 01 00 00 08 	add    DWORD PTR [ebx+edx*2+0x8000001],ebx
    3c76:	70 31                	jo     3ca9 <sysEnter_Vector-0x12c357>
    3c78:	00 01                	add    BYTE PTR [ecx],al
    3c7a:	2c 88                	sub    al,0x88
    3c7c:	00 00                	add    BYTE PTR [eax],al
    3c7e:	00 02                	add    BYTE PTR [edx],al
    3c80:	91                   	xchg   ecx,eax
    3c81:	00 08                	add    BYTE PTR [eax],cl
    3c83:	70 32                	jo     3cb7 <sysEnter_Vector-0x12c349>
    3c85:	00 01                	add    BYTE PTR [ecx],al
    3c87:	2c 88                	sub    al,0x88
    3c89:	00 00                	add    BYTE PTR [eax],al
    3c8b:	00 02                	add    BYTE PTR [edx],al
    3c8d:	91                   	xchg   ecx,eax
    3c8e:	04 00                	add    al,0x0
    3c90:	0b a3 00 00 00 03    	or     esp,DWORD PTR [ebx+0x3000000]
    3c96:	37                   	aaa    
    3c97:	56                   	push   esi
    3c98:	00 00                	add    BYTE PTR [eax],al
    3c9a:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    3ca0:	9f                   	lahf   
    3ca1:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3ca4:	00 00                	add    BYTE PTR [eax],al
    3ca6:	03 38                	add    edi,DWORD PTR [eax]
    3ca8:	56                   	push   esi
    3ca9:	00 00                	add    BYTE PTR [eax],al
    3cab:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    3cb1:	9f                   	lahf   
    3cb2:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3cb5:	00 00                	add    BYTE PTR [eax],al
    3cb7:	03 39                	add    edi,DWORD PTR [ecx]
    3cb9:	56                   	push   esi
    3cba:	00 00                	add    BYTE PTR [eax],al
    3cbc:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    3cc2:	9f                   	lahf   
    3cc3:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3cc7:	00 03                	add    BYTE PTR [ebx],al
    3cc9:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    3ccc:	00 00                	add    BYTE PTR [eax],al
    3cce:	05 03 d8 71 00       	add    eax,0x71d803
    3cd3:	9f                   	lahf   
    3cd4:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3cd7:	00 00                	add    BYTE PTR [eax],al
    3cd9:	04 34                	add    al,0x34
    3cdb:	a8 01                	test   al,0x1
    3cdd:	00 00                	add    BYTE PTR [eax],al
    3cdf:	05 03 c4 71 00       	add    eax,0x71c403
    3ce4:	9f                   	lahf   
    3ce5:	05 04 6f 00 00       	add    eax,0x6f04
    3cea:	00 0b                	add    BYTE PTR [ebx],cl
    3cec:	91                   	xchg   ecx,eax
    3ced:	00 00                	add    BYTE PTR [eax],al
    3cef:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3cf6:	05 03 c0 71 00       	add    eax,0x71c003
    3cfb:	9f                   	lahf   
    3cfc:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3cff:	00 00                	add    BYTE PTR [eax],al
    3d01:	05 58 d0 01 00       	add    eax,0x1d058
    3d06:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    3d0c:	9f                   	lahf   
    3d0d:	05 04 a8 00 00       	add    eax,0xa804
    3d12:	00 00                	add    BYTE PTR [eax],al
    3d14:	fc                   	cld    
    3d15:	01 00                	add    DWORD PTR [eax],eax
    3d17:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3d1a:	b1 10                	mov    cl,0x10
    3d1c:	00 00                	add    BYTE PTR [eax],al
    3d1e:	04 01                	add    al,0x1
    3d20:	ac                   	lods   al,BYTE PTR ds:[esi]
    3d21:	00 00                	add    BYTE PTR [eax],al
    3d23:	00 0c e5 0c 00 00 1e 	add    BYTE PTR [eiz*8+0x1e00000c],cl
    3d2a:	00 00                	add    BYTE PTR [eax],al
    3d2c:	00 98 31 00 9f c7    	add    BYTE PTR [eax-0x3860ffcf],bl
    3d32:	00 00                	add    BYTE PTR [eax],al
    3d34:	00 fe                	add    dh,bh
    3d36:	15 00 00 02 01       	adc    eax,0x1020000
    3d3b:	06                   	push   es
    3d3c:	8c 00                	mov    WORD PTR [eax],es
    3d3e:	00 00                	add    BYTE PTR [eax],al
    3d40:	02 01                	add    al,BYTE PTR [ecx]
    3d42:	06                   	push   es
    3d43:	85 00                	test   DWORD PTR [eax],eax
    3d45:	00 00                	add    BYTE PTR [eax],al
    3d47:	02 02                	add    al,BYTE PTR [edx]
    3d49:	05 72 01 00 00       	add    eax,0x172
    3d4e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3d55:	02 08                	add    cl,BYTE PTR [eax]
    3d57:	05 00 00 00 00       	add    eax,0x0
    3d5c:	02 01                	add    al,BYTE PTR [ecx]
    3d5e:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3d64:	02 07                	add    al,BYTE PTR [edi]
    3d66:	19 01                	sbb    DWORD PTR [ecx],eax
    3d68:	00 00                	add    BYTE PTR [eax],al
    3d6a:	04 0e                	add    al,0xe
    3d6c:	00 00                	add    BYTE PTR [eax],al
    3d6e:	00 02                	add    BYTE PTR [edx],al
    3d70:	34 61                	xor    al,0x61
    3d72:	00 00                	add    BYTE PTR [eax],al
    3d74:	00 02                	add    BYTE PTR [edx],al
    3d76:	04 07                	add    al,0x7
    3d78:	61                   	popa   
    3d79:	00 00                	add    BYTE PTR [eax],al
    3d7b:	00 02                	add    BYTE PTR [edx],al
    3d7d:	08 07                	or     BYTE PTR [edi],al
    3d7f:	57                   	push   edi
    3d80:	00 00                	add    BYTE PTR [eax],al
    3d82:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3d89:	56                   	push   esi
    3d8a:	61                   	popa   
    3d8b:	00 00                	add    BYTE PTR [eax],al
    3d8d:	00 02                	add    BYTE PTR [edx],al
    3d8f:	04 05                	add    al,0x5
    3d91:	05 00 00 00 02       	add    eax,0x2000000
    3d96:	0c 04                	or     al,0x4
    3d98:	66 01 00             	add    WORD PTR [eax],ax
    3d9b:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3da1:	00 06                	add    BYTE PTR [esi],al
    3da3:	25 00 00 00 02       	and    eax,0x2000000
    3da8:	01 02                	add    DWORD PTR [edx],eax
    3daa:	13 01                	adc    eax,DWORD PTR [ecx]
    3dac:	00 00                	add    BYTE PTR [eax],al
    3dae:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3db1:	83 01 00             	add    DWORD PTR [ecx],0x0
    3db4:	00 02                	add    BYTE PTR [edx],al
    3db6:	04 07                	add    al,0x7
    3db8:	5c                   	pop    esp
    3db9:	00 00                	add    BYTE PTR [eax],al
    3dbb:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3dc1:	00 07                	add    BYTE PTR [edi],al
    3dc3:	de 0c 00             	fimul  WORD PTR [eax+eax*1]
    3dc6:	00 01                	add    BYTE PTR [ecx],al
    3dc8:	04 a8                	add    al,0xa8
    3dca:	00 00                	add    BYTE PTR [eax],al
    3dcc:	00 98 31 00 9f 40    	add    BYTE PTR [eax+0x409f0031],bl
    3dd2:	00 00                	add    BYTE PTR [eax],al
    3dd4:	00 01                	add    BYTE PTR [ecx],al
    3dd6:	9c                   	pushf  
    3dd7:	ee                   	out    dx,al
    3dd8:	00 00                	add    BYTE PTR [eax],al
    3dda:	00 08                	add    BYTE PTR [eax],cl
    3ddc:	73 31                	jae    3e0f <sysEnter_Vector-0x12c1f1>
    3dde:	00 01                	add    BYTE PTR [ecx],al
    3de0:	04 a8                	add    al,0xa8
    3de2:	00 00                	add    BYTE PTR [eax],al
    3de4:	00 02                	add    BYTE PTR [edx],al
    3de6:	91                   	xchg   ecx,eax
    3de7:	00 08                	add    BYTE PTR [eax],cl
    3de9:	73 32                	jae    3e1d <sysEnter_Vector-0x12c1e3>
    3deb:	00 01                	add    BYTE PTR [ecx],al
    3ded:	04 88                	add    al,0x88
    3def:	00 00                	add    BYTE PTR [eax],al
    3df1:	00 02                	add    BYTE PTR [edx],al
    3df3:	91                   	xchg   ecx,eax
    3df4:	04 09                	add    al,0x9
    3df6:	73 00                	jae    3df8 <sysEnter_Vector-0x12c208>
    3df8:	01 06                	add    DWORD PTR [esi],eax
    3dfa:	a8 00                	test   al,0x0
    3dfc:	00 00                	add    BYTE PTR [eax],al
    3dfe:	02 91 74 00 07 fa    	add    dl,BYTE PTR [ecx-0x5f8ff8c]
    3e04:	0c 00                	or     al,0x0
    3e06:	00 01                	add    BYTE PTR [ecx],al
    3e08:	0e                   	push   cs
    3e09:	a8 00                	test   al,0x0
    3e0b:	00 00                	add    BYTE PTR [eax],al
    3e0d:	d8 31                	fdiv   DWORD PTR [ecx]
    3e0f:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    3e15:	01 9c 2e 01 00 00 08 	add    DWORD PTR [esi+ebp*1+0x8000001],ebx
    3e1c:	73 31                	jae    3e4f <sysEnter_Vector-0x12c1b1>
    3e1e:	00 01                	add    BYTE PTR [ecx],al
    3e20:	0e                   	push   cs
    3e21:	a8 00                	test   al,0x0
    3e23:	00 00                	add    BYTE PTR [eax],al
    3e25:	02 91 00 08 73 32    	add    dl,BYTE PTR [ecx+0x32730800]
    3e2b:	00 01                	add    BYTE PTR [ecx],al
    3e2d:	0e                   	push   cs
    3e2e:	88 00                	mov    BYTE PTR [eax],al
    3e30:	00 00                	add    BYTE PTR [eax],al
    3e32:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    3e38:	01 10                	add    DWORD PTR [eax],edx
    3e3a:	a8 00                	test   al,0x0
    3e3c:	00 00                	add    BYTE PTR [eax],al
    3e3e:	02 91 74 00 07 d6    	add    dl,BYTE PTR [ecx-0x29f8ff8c]
    3e44:	0c 00                	or     al,0x0
    3e46:	00 01                	add    BYTE PTR [ecx],al
    3e48:	18 a8 00 00 00 18    	sbb    BYTE PTR [eax+0x18000000],ch
    3e4e:	32 00                	xor    al,BYTE PTR [eax]
    3e50:	9f                   	lahf   
    3e51:	47                   	inc    edi
    3e52:	00 00                	add    BYTE PTR [eax],al
    3e54:	00 01                	add    BYTE PTR [ecx],al
    3e56:	9c                   	pushf  
    3e57:	7c 01                	jl     3e5a <sysEnter_Vector-0x12c1a6>
    3e59:	00 00                	add    BYTE PTR [eax],al
    3e5b:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    3e5e:	00 01                	add    BYTE PTR [ecx],al
    3e60:	18 a8 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],ch
    3e66:	91                   	xchg   ecx,eax
    3e67:	00 08                	add    BYTE PTR [eax],cl
    3e69:	73 32                	jae    3e9d <sysEnter_Vector-0x12c163>
    3e6b:	00 01                	add    BYTE PTR [ecx],al
    3e6d:	18 88 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],cl
    3e73:	91                   	xchg   ecx,eax
    3e74:	04 0a                	add    al,0xa
    3e76:	d0 0c 00             	ror    BYTE PTR [eax+eax*1],1
    3e79:	00 01                	add    BYTE PTR [ecx],al
    3e7b:	18 61 00             	sbb    BYTE PTR [ecx+0x0],ah
    3e7e:	00 00                	add    BYTE PTR [eax],al
    3e80:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    3e86:	01 1a                	add    DWORD PTR [edx],ebx
    3e88:	a8 00                	test   al,0x0
    3e8a:	00 00                	add    BYTE PTR [eax],al
    3e8c:	02 91 74 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4ff8c]
    3e92:	00 00                	add    BYTE PTR [eax],al
    3e94:	00 03                	add    BYTE PTR [ebx],al
    3e96:	37                   	aaa    
    3e97:	56                   	push   esi
    3e98:	00 00                	add    BYTE PTR [eax],al
    3e9a:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    3ea0:	9f                   	lahf   
    3ea1:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3ea4:	00 00                	add    BYTE PTR [eax],al
    3ea6:	03 38                	add    edi,DWORD PTR [eax]
    3ea8:	56                   	push   esi
    3ea9:	00 00                	add    BYTE PTR [eax],al
    3eab:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    3eb1:	9f                   	lahf   
    3eb2:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3eb5:	00 00                	add    BYTE PTR [eax],al
    3eb7:	03 39                	add    edi,DWORD PTR [ecx]
    3eb9:	56                   	push   esi
    3eba:	00 00                	add    BYTE PTR [eax],al
    3ebc:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    3ec2:	9f                   	lahf   
    3ec3:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3ec7:	00 03                	add    BYTE PTR [ebx],al
    3ec9:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    3ecc:	00 00                	add    BYTE PTR [eax],al
    3ece:	05 03 d8 71 00       	add    eax,0x71d803
    3ed3:	9f                   	lahf   
    3ed4:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3ed7:	00 00                	add    BYTE PTR [eax],al
    3ed9:	04 34                	add    al,0x34
    3edb:	d1 01                	rol    DWORD PTR [ecx],1
    3edd:	00 00                	add    BYTE PTR [eax],al
    3edf:	05 03 c4 71 00       	add    eax,0x71c403
    3ee4:	9f                   	lahf   
    3ee5:	05 04 6f 00 00       	add    eax,0x6f04
    3eea:	00 0b                	add    BYTE PTR [ebx],cl
    3eec:	91                   	xchg   ecx,eax
    3eed:	00 00                	add    BYTE PTR [eax],al
    3eef:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3ef6:	05 03 c0 71 00       	add    eax,0x71c003
    3efb:	9f                   	lahf   
    3efc:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3eff:	00 00                	add    BYTE PTR [eax],al
    3f01:	05 58 f9 01 00       	add    eax,0x1f958
    3f06:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    3f0c:	9f                   	lahf   
    3f0d:	05 04 a8 00 00       	add    eax,0xa804
    3f12:	00 00                	add    BYTE PTR [eax],al
    3f14:	7f 01                	jg     3f17 <sysEnter_Vector-0x12c0e9>
    3f16:	00 00                	add    BYTE PTR [eax],al
    3f18:	04 00                	add    al,0x0
    3f1a:	52                   	push   edx
    3f1b:	11 00                	adc    DWORD PTR [eax],eax
    3f1d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3f20:	ac                   	lods   al,BYTE PTR ds:[esi]
    3f21:	00 00                	add    BYTE PTR [eax],al
    3f23:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
    3f26:	0d 00 00 1e 00       	or     eax,0x1e0000
    3f2b:	00 00                	add    BYTE PTR [eax],al
    3f2d:	60                   	pusha  
    3f2e:	32 00                	xor    al,BYTE PTR [eax]
    3f30:	9f                   	lahf   
    3f31:	89 00                	mov    DWORD PTR [eax],eax
    3f33:	00 00                	add    BYTE PTR [eax],al
    3f35:	e8 16 00 00 02       	call   2003f50 <sysEnter_Vector+0x1ed3f50>
    3f3a:	01 06                	add    DWORD PTR [esi],eax
    3f3c:	8c 00                	mov    WORD PTR [eax],es
    3f3e:	00 00                	add    BYTE PTR [eax],al
    3f40:	02 01                	add    al,BYTE PTR [ecx]
    3f42:	06                   	push   es
    3f43:	85 00                	test   DWORD PTR [eax],eax
    3f45:	00 00                	add    BYTE PTR [eax],al
    3f47:	02 02                	add    al,BYTE PTR [edx]
    3f49:	05 72 01 00 00       	add    eax,0x172
    3f4e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3f55:	02 08                	add    cl,BYTE PTR [eax]
    3f57:	05 00 00 00 00       	add    eax,0x0
    3f5c:	02 01                	add    al,BYTE PTR [ecx]
    3f5e:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3f64:	02 07                	add    al,BYTE PTR [edi]
    3f66:	19 01                	sbb    DWORD PTR [ecx],eax
    3f68:	00 00                	add    BYTE PTR [eax],al
    3f6a:	04 0e                	add    al,0xe
    3f6c:	00 00                	add    BYTE PTR [eax],al
    3f6e:	00 02                	add    BYTE PTR [edx],al
    3f70:	34 61                	xor    al,0x61
    3f72:	00 00                	add    BYTE PTR [eax],al
    3f74:	00 02                	add    BYTE PTR [edx],al
    3f76:	04 07                	add    al,0x7
    3f78:	61                   	popa   
    3f79:	00 00                	add    BYTE PTR [eax],al
    3f7b:	00 02                	add    BYTE PTR [edx],al
    3f7d:	08 07                	or     BYTE PTR [edi],al
    3f7f:	57                   	push   edi
    3f80:	00 00                	add    BYTE PTR [eax],al
    3f82:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3f89:	56                   	push   esi
    3f8a:	61                   	popa   
    3f8b:	00 00                	add    BYTE PTR [eax],al
    3f8d:	00 02                	add    BYTE PTR [edx],al
    3f8f:	04 05                	add    al,0x5
    3f91:	05 00 00 00 02       	add    eax,0x2000000
    3f96:	0c 04                	or     al,0x4
    3f98:	66 01 00             	add    WORD PTR [eax],ax
    3f9b:	00 02                	add    BYTE PTR [edx],al
    3f9d:	01 02                	add    DWORD PTR [edx],eax
    3f9f:	13 01                	adc    eax,DWORD PTR [ecx]
    3fa1:	00 00                	add    BYTE PTR [eax],al
    3fa3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3fa6:	83 01 00             	add    DWORD PTR [ecx],0x0
    3fa9:	00 02                	add    BYTE PTR [edx],al
    3fab:	04 07                	add    al,0x7
    3fad:	5c                   	pop    esp
    3fae:	00 00                	add    BYTE PTR [eax],al
    3fb0:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3fb6:	00 06                	add    BYTE PTR [esi],al
    3fb8:	22 0d 00 00 01 09    	and    cl,BYTE PTR ds:0x9010000
    3fbe:	88 00                	mov    BYTE PTR [eax],al
    3fc0:	00 00                	add    BYTE PTR [eax],al
    3fc2:	60                   	pusha  
    3fc3:	32 00                	xor    al,BYTE PTR [eax]
    3fc5:	9f                   	lahf   
    3fc6:	30 00                	xor    BYTE PTR [eax],al
    3fc8:	00 00                	add    BYTE PTR [eax],al
    3fca:	01 9c c9 00 00 00 07 	add    DWORD PTR [ecx+ecx*8+0x7000000],ebx
    3fd1:	63 00                	arpl   WORD PTR [eax],ax
    3fd3:	01 09                	add    DWORD PTR [ecx],ecx
    3fd5:	25 00 00 00 02       	and    eax,0x2000000
    3fda:	91                   	xchg   ecx,eax
    3fdb:	74 00                	je     3fdd <sysEnter_Vector-0x12c023>
    3fdd:	08 02                	or     BYTE PTR [edx],al
    3fdf:	0d 00 00 01 0e       	or     eax,0xe010000
    3fe4:	88 00                	mov    BYTE PTR [eax],al
    3fe6:	00 00                	add    BYTE PTR [eax],al
    3fe8:	90                   	nop
    3fe9:	32 00                	xor    al,BYTE PTR [eax]
    3feb:	9f                   	lahf   
    3fec:	59                   	pop    ecx
    3fed:	00 00                	add    BYTE PTR [eax],al
    3fef:	00 01                	add    BYTE PTR [ecx],al
    3ff1:	9c                   	pushf  
    3ff2:	ff 00                	inc    DWORD PTR [eax]
    3ff4:	00 00                	add    BYTE PTR [eax],al
    3ff6:	07                   	pop    es
    3ff7:	73 74                	jae    406d <sysEnter_Vector-0x12bf93>
    3ff9:	72 00                	jb     3ffb <sysEnter_Vector-0x12c005>
    3ffb:	01 0e                	add    DWORD PTR [esi],ecx
    3ffd:	9d                   	popf   
    3ffe:	00 00                	add    BYTE PTR [eax],al
    4000:	00 02                	add    BYTE PTR [edx],al
    4002:	91                   	xchg   ecx,eax
    4003:	00 09                	add    BYTE PTR [ecx],cl
    4005:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    4008:	00 01                	add    BYTE PTR [ecx],al
    400a:	10 3a                	adc    BYTE PTR [edx],bh
    400c:	00 00                	add    BYTE PTR [eax],al
    400e:	00 02                	add    BYTE PTR [edx],al
    4010:	91                   	xchg   ecx,eax
    4011:	74 00                	je     4013 <sysEnter_Vector-0x12bfed>
    4013:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    4019:	37                   	aaa    
    401a:	56                   	push   esi
    401b:	00 00                	add    BYTE PTR [eax],al
    401d:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    4023:	9f                   	lahf   
    4024:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    4027:	00 00                	add    BYTE PTR [eax],al
    4029:	03 38                	add    edi,DWORD PTR [eax]
    402b:	56                   	push   esi
    402c:	00 00                	add    BYTE PTR [eax],al
    402e:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    4034:	9f                   	lahf   
    4035:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    4038:	00 00                	add    BYTE PTR [eax],al
    403a:	03 39                	add    edi,DWORD PTR [ecx]
    403c:	56                   	push   esi
    403d:	00 00                	add    BYTE PTR [eax],al
    403f:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    4045:	9f                   	lahf   
    4046:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    404a:	00 03                	add    BYTE PTR [ebx],al
    404c:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    404f:	00 00                	add    BYTE PTR [eax],al
    4051:	05 03 d8 71 00       	add    eax,0x71d803
    4056:	9f                   	lahf   
    4057:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    405a:	00 00                	add    BYTE PTR [eax],al
    405c:	04 34                	add    al,0x34
    405e:	54                   	push   esp
    405f:	01 00                	add    DWORD PTR [eax],eax
    4061:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    4067:	9f                   	lahf   
    4068:	05 04 6f 00 00       	add    eax,0x6f04
    406d:	00 0a                	add    BYTE PTR [edx],cl
    406f:	91                   	xchg   ecx,eax
    4070:	00 00                	add    BYTE PTR [eax],al
    4072:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4079:	05 03 c0 71 00       	add    eax,0x71c003
    407e:	9f                   	lahf   
    407f:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    4082:	00 00                	add    BYTE PTR [eax],al
    4084:	05 58 7c 01 00       	add    eax,0x17c58
    4089:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    408f:	9f                   	lahf   
    4090:	05 04 9d 00 00       	add    eax,0x9d04
    4095:	00 00                	add    BYTE PTR [eax],al
    4097:	11 02                	adc    DWORD PTR [edx],eax
    4099:	00 00                	add    BYTE PTR [eax],al
    409b:	04 00                	add    al,0x0
    409d:	f9                   	stc    
    409e:	11 00                	adc    DWORD PTR [eax],eax
    40a0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    40a3:	ac                   	lods   al,BYTE PTR ds:[esi]
    40a4:	00 00                	add    BYTE PTR [eax],al
    40a6:	00 0c 4e             	add    BYTE PTR [esi+ecx*2],cl
    40a9:	0d 00 00 1e 00       	or     eax,0x1e0000
    40ae:	00 00                	add    BYTE PTR [eax],al
    40b0:	ec                   	in     al,dx
    40b1:	32 00                	xor    al,BYTE PTR [eax]
    40b3:	9f                   	lahf   
    40b4:	a2 00 00 00 c1       	mov    ds:0xc1000000,al
    40b9:	17                   	pop    ss
    40ba:	00 00                	add    BYTE PTR [eax],al
    40bc:	02 01                	add    al,BYTE PTR [ecx]
    40be:	06                   	push   es
    40bf:	8c 00                	mov    WORD PTR [eax],es
    40c1:	00 00                	add    BYTE PTR [eax],al
    40c3:	02 01                	add    al,BYTE PTR [ecx]
    40c5:	06                   	push   es
    40c6:	85 00                	test   DWORD PTR [eax],eax
    40c8:	00 00                	add    BYTE PTR [eax],al
    40ca:	02 02                	add    al,BYTE PTR [edx]
    40cc:	05 72 01 00 00       	add    eax,0x172
    40d1:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    40d8:	02 08                	add    cl,BYTE PTR [eax]
    40da:	05 00 00 00 00       	add    eax,0x0
    40df:	02 01                	add    al,BYTE PTR [ecx]
    40e1:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    40e7:	02 07                	add    al,BYTE PTR [edi]
    40e9:	19 01                	sbb    DWORD PTR [ecx],eax
    40eb:	00 00                	add    BYTE PTR [eax],al
    40ed:	04 0e                	add    al,0xe
    40ef:	00 00                	add    BYTE PTR [eax],al
    40f1:	00 02                	add    BYTE PTR [edx],al
    40f3:	34 61                	xor    al,0x61
    40f5:	00 00                	add    BYTE PTR [eax],al
    40f7:	00 02                	add    BYTE PTR [edx],al
    40f9:	04 07                	add    al,0x7
    40fb:	61                   	popa   
    40fc:	00 00                	add    BYTE PTR [eax],al
    40fe:	00 02                	add    BYTE PTR [edx],al
    4100:	08 07                	or     BYTE PTR [edi],al
    4102:	57                   	push   edi
    4103:	00 00                	add    BYTE PTR [eax],al
    4105:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    410c:	56                   	push   esi
    410d:	61                   	popa   
    410e:	00 00                	add    BYTE PTR [eax],al
    4110:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    4117:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    411a:	00 00                	add    BYTE PTR [eax],al
    411c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4123:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4126:	66 01 00             	add    WORD PTR [eax],ax
    4129:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    412f:	00 06                	add    BYTE PTR [esi],al
    4131:	25 00 00 00 02       	and    eax,0x2000000
    4136:	01 02                	add    DWORD PTR [edx],eax
    4138:	13 01                	adc    eax,DWORD PTR [ecx]
    413a:	00 00                	add    BYTE PTR [eax],al
    413c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    413f:	83 01 00             	add    DWORD PTR [ecx],0x0
    4142:	00 02                	add    BYTE PTR [edx],al
    4144:	04 07                	add    al,0x7
    4146:	5c                   	pop    esp
    4147:	00 00                	add    BYTE PTR [eax],al
    4149:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    414f:	00 07                	add    BYTE PTR [edi],al
    4151:	2e                   	cs
    4152:	0d 00 00 01 04       	or     eax,0x4010000
    4157:	7a 00                	jp     4159 <sysEnter_Vector-0x12bea7>
    4159:	00 00                	add    BYTE PTR [eax],al
    415b:	ec                   	in     al,dx
    415c:	32 00                	xor    al,BYTE PTR [eax]
    415e:	9f                   	lahf   
    415f:	31 00                	xor    DWORD PTR [eax],eax
    4161:	00 00                	add    BYTE PTR [eax],al
    4163:	01 9c ef 00 00 00 08 	add    DWORD PTR [edi+ebp*8+0x8000000],ebx
    416a:	73 74                	jae    41e0 <sysEnter_Vector-0x12be20>
    416c:	72 00                	jb     416e <sysEnter_Vector-0x12be92>
    416e:	01 04 93             	add    DWORD PTR [ebx+edx*4],eax
    4171:	00 00                	add    BYTE PTR [eax],al
    4173:	00 02                	add    BYTE PTR [edx],al
    4175:	91                   	xchg   ecx,eax
    4176:	00 09                	add    BYTE PTR [ecx],cl
    4178:	72 65                	jb     41df <sysEnter_Vector-0x12be21>
    417a:	74 00                	je     417c <sysEnter_Vector-0x12be84>
    417c:	01 05 7a 00 00 00    	add    DWORD PTR ds:0x7a,eax
    4182:	02 91 74 00 0a 36    	add    dl,BYTE PTR [ecx+0x360a0074]
    4188:	0d 00 00 01 0b       	or     eax,0xb010000
    418d:	7a 00                	jp     418f <sysEnter_Vector-0x12be71>
    418f:	00 00                	add    BYTE PTR [eax],al
    4191:	1d 33 00 9f 1a       	sbb    eax,0x1a9f0033
    4196:	00 00                	add    BYTE PTR [eax],al
    4198:	00 01                	add    BYTE PTR [ecx],al
    419a:	9c                   	pushf  
    419b:	17                   	pop    ss
    419c:	01 00                	add    DWORD PTR [eax],eax
    419e:	00 08                	add    BYTE PTR [eax],cl
    41a0:	73 74                	jae    4216 <sysEnter_Vector-0x12bdea>
    41a2:	72 00                	jb     41a4 <sysEnter_Vector-0x12be5c>
    41a4:	01 0b                	add    DWORD PTR [ebx],ecx
    41a6:	93                   	xchg   ebx,eax
    41a7:	00 00                	add    BYTE PTR [eax],al
    41a9:	00 02                	add    BYTE PTR [edx],al
    41ab:	91                   	xchg   ecx,eax
    41ac:	00 00                	add    BYTE PTR [eax],al
    41ae:	07                   	pop    es
    41af:	3d 0d 00 00 01       	cmp    eax,0x100000d
    41b4:	10 7a 00             	adc    BYTE PTR [edx+0x0],bh
    41b7:	00 00                	add    BYTE PTR [eax],al
    41b9:	37                   	aaa    
    41ba:	33 00                	xor    eax,DWORD PTR [eax]
    41bc:	9f                   	lahf   
    41bd:	39 00                	cmp    DWORD PTR [eax],eax
    41bf:	00 00                	add    BYTE PTR [eax],al
    41c1:	01 9c 5b 01 00 00 08 	add    DWORD PTR [ebx+ebx*2+0x8000001],ebx
    41c8:	73 74                	jae    423e <sysEnter_Vector-0x12bdc2>
    41ca:	72 00                	jb     41cc <sysEnter_Vector-0x12be34>
    41cc:	01 10                	add    DWORD PTR [eax],edx
    41ce:	93                   	xchg   ebx,eax
    41cf:	00 00                	add    BYTE PTR [eax],al
    41d1:	00 02                	add    BYTE PTR [edx],al
    41d3:	91                   	xchg   ecx,eax
    41d4:	00 0b                	add    BYTE PTR [ebx],cl
    41d6:	41                   	inc    ecx
    41d7:	07                   	pop    es
    41d8:	00 00                	add    BYTE PTR [eax],al
    41da:	01 10                	add    DWORD PTR [eax],edx
    41dc:	7a 00                	jp     41de <sysEnter_Vector-0x12be22>
    41de:	00 00                	add    BYTE PTR [eax],al
    41e0:	02 91 04 09 72 65    	add    dl,BYTE PTR [ecx+0x65720904]
    41e6:	74 00                	je     41e8 <sysEnter_Vector-0x12be18>
    41e8:	01 12                	add    DWORD PTR [edx],edx
    41ea:	7a 00                	jp     41ec <sysEnter_Vector-0x12be14>
    41ec:	00 00                	add    BYTE PTR [eax],al
    41ee:	02 91 74 00 0a 46    	add    dl,BYTE PTR [ecx+0x460a0074]
    41f4:	0d 00 00 01 18       	or     eax,0x18010000
    41f9:	7a 00                	jp     41fb <sysEnter_Vector-0x12be05>
    41fb:	00 00                	add    BYTE PTR [eax],al
    41fd:	70 33                	jo     4232 <sysEnter_Vector-0x12bdce>
    41ff:	00 9f 1e 00 00 00    	add    BYTE PTR [edi+0x1e],bl
    4205:	01 9c 91 01 00 00 08 	add    DWORD PTR [ecx+edx*4+0x8000001],ebx
    420c:	73 74                	jae    4282 <sysEnter_Vector-0x12bd7e>
    420e:	72 00                	jb     4210 <sysEnter_Vector-0x12bdf0>
    4210:	01 18                	add    DWORD PTR [eax],ebx
    4212:	93                   	xchg   ebx,eax
    4213:	00 00                	add    BYTE PTR [eax],al
    4215:	00 02                	add    BYTE PTR [edx],al
    4217:	91                   	xchg   ecx,eax
    4218:	00 0b                	add    BYTE PTR [ebx],cl
    421a:	41                   	inc    ecx
    421b:	07                   	pop    es
    421c:	00 00                	add    BYTE PTR [eax],al
    421e:	01 18                	add    DWORD PTR [eax],ebx
    4220:	3a 00                	cmp    al,BYTE PTR [eax]
    4222:	00 00                	add    BYTE PTR [eax],al
    4224:	02 91 04 00 0c a3    	add    dl,BYTE PTR [ecx-0x5cf3fffc]
    422a:	00 00                	add    BYTE PTR [eax],al
    422c:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    422f:	56                   	push   esi
    4230:	00 00                	add    BYTE PTR [eax],al
    4232:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    4238:	9f                   	lahf   
    4239:	0c 34                	or     al,0x34
    423b:	01 00                	add    DWORD PTR [eax],eax
    423d:	00 04 38             	add    BYTE PTR [eax+edi*1],al
    4240:	56                   	push   esi
    4241:	00 00                	add    BYTE PTR [eax],al
    4243:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    4249:	9f                   	lahf   
    424a:	0c 7b                	or     al,0x7b
    424c:	00 00                	add    BYTE PTR [eax],al
    424e:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    4251:	56                   	push   esi
    4252:	00 00                	add    BYTE PTR [eax],al
    4254:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    425a:	9f                   	lahf   
    425b:	0c 7c                	or     al,0x7c
    425d:	01 00                	add    DWORD PTR [eax],eax
    425f:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    4262:	85 00                	test   DWORD PTR [eax],eax
    4264:	00 00                	add    BYTE PTR [eax],al
    4266:	05 03 d8 71 00       	add    eax,0x71d803
    426b:	9f                   	lahf   
    426c:	0c 6e                	or     al,0x6e
    426e:	00 00                	add    BYTE PTR [eax],al
    4270:	00 05 34 e6 01 00    	add    BYTE PTR ds:0x1e634,al
    4276:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    427c:	9f                   	lahf   
    427d:	05 04 6f 00 00       	add    eax,0x6f04
    4282:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    4285:	00 00                	add    BYTE PTR [eax],al
    4287:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    428d:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    4293:	9f                   	lahf   
    4294:	0c 41                	or     al,0x41
    4296:	00 00                	add    BYTE PTR [eax],al
    4298:	00 06                	add    BYTE PTR [esi],al
    429a:	58                   	pop    eax
    429b:	0e                   	push   cs
    429c:	02 00                	add    al,BYTE PTR [eax]
    429e:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    42a4:	9f                   	lahf   
    42a5:	05 04 b3 00 00       	add    eax,0xb304
    42aa:	00 00                	add    BYTE PTR [eax],al
    42ac:	de 00                	fiadd  WORD PTR [eax]
    42ae:	00 00                	add    BYTE PTR [eax],al
    42b0:	04 00                	add    al,0x0
    42b2:	b6 12                	mov    dh,0x12
    42b4:	00 00                	add    BYTE PTR [eax],al
    42b6:	04 01                	add    al,0x1
    42b8:	ac                   	lods   al,BYTE PTR ds:[esi]
    42b9:	00 00                	add    BYTE PTR [eax],al
    42bb:	00 0c 74             	add    BYTE PTR [esp+esi*2],cl
    42be:	0d 00 00 1e 00       	or     eax,0x1e0000
    42c3:	00 00                	add    BYTE PTR [eax],al
    42c5:	90                   	nop
    42c6:	33 00                	xor    eax,DWORD PTR [eax]
    42c8:	9f                   	lahf   
    42c9:	ce                   	into   
    42ca:	00 00                	add    BYTE PTR [eax],al
    42cc:	00 a4 18 00 00 02 04 	add    BYTE PTR [eax+ebx*1+0x4020000],ah
    42d3:	05 69 6e 74 00       	add    eax,0x746e69
    42d8:	03 bd 02 00 00 02    	add    edi,DWORD PTR [ebp+0x2000002]
    42de:	d8 37                	fdiv   DWORD PTR [edi]
    42e0:	00 00                	add    BYTE PTR [eax],al
    42e2:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    42e5:	07                   	pop    es
    42e6:	61                   	popa   
    42e7:	00 00                	add    BYTE PTR [eax],al
    42e9:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    42ec:	05 05 00 00 00       	add    eax,0x5
    42f1:	04 08                	add    al,0x8
    42f3:	05 00 00 00 00       	add    eax,0x0
    42f8:	04 0c                	add    al,0xc
    42fa:	04 66                	add    al,0x66
    42fc:	01 00                	add    DWORD PTR [eax],eax
    42fe:	00 05 6c 0d 00 00    	add    BYTE PTR ds:0xd6c,al
    4304:	01 0c 25 00 00 00 90 	add    DWORD PTR [eiz*1-0x70000000],ecx
    430b:	33 00                	xor    eax,DWORD PTR [eax]
    430d:	9f                   	lahf   
    430e:	67 00 00             	add    BYTE PTR [bx+si],al
    4311:	00 01                	add    BYTE PTR [ecx],al
    4313:	9c                   	pushf  
    4314:	93                   	xchg   ebx,eax
    4315:	00 00                	add    BYTE PTR [eax],al
    4317:	00 06                	add    BYTE PTR [esi],al
    4319:	73 31                	jae    434c <sysEnter_Vector-0x12bcb4>
    431b:	00 01                	add    BYTE PTR [ecx],al
    431d:	0c 93                	or     al,0x93
    431f:	00 00                	add    BYTE PTR [eax],al
    4321:	00 02                	add    BYTE PTR [edx],al
    4323:	91                   	xchg   ecx,eax
    4324:	00 06                	add    BYTE PTR [esi],al
    4326:	73 32                	jae    435a <sysEnter_Vector-0x12bca6>
    4328:	00 01                	add    BYTE PTR [ecx],al
    432a:	0c 93                	or     al,0x93
    432c:	00 00                	add    BYTE PTR [eax],al
    432e:	00 02                	add    BYTE PTR [edx],al
    4330:	91                   	xchg   ecx,eax
    4331:	04 06                	add    al,0x6
    4333:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4334:	00 01                	add    BYTE PTR [ecx],al
    4336:	0c 2c                	or     al,0x2c
    4338:	00 00                	add    BYTE PTR [eax],al
    433a:	00 02                	add    BYTE PTR [edx],al
    433c:	91                   	xchg   ecx,eax
    433d:	08 00                	or     BYTE PTR [eax],al
    433f:	07                   	pop    es
    4340:	04 a0                	add    al,0xa0
    4342:	00 00                	add    BYTE PTR [eax],al
    4344:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4347:	06                   	push   es
    4348:	8c 00                	mov    WORD PTR [eax],es
    434a:	00 00                	add    BYTE PTR [eax],al
    434c:	08 99 00 00 00 09    	or     BYTE PTR [ecx+0x9000000],bl
    4352:	63 0d 00 00 01 16    	arpl   WORD PTR ds:0x16010000,cx
    4358:	25 00 00 00 f7       	and    eax,0xf7000000
    435d:	33 00                	xor    eax,DWORD PTR [eax]
    435f:	9f                   	lahf   
    4360:	67 00 00             	add    BYTE PTR [bx+si],al
    4363:	00 01                	add    BYTE PTR [ecx],al
    4365:	9c                   	pushf  
    4366:	06                   	push   es
    4367:	73 31                	jae    439a <sysEnter_Vector-0x12bc66>
    4369:	00 01                	add    BYTE PTR [ecx],al
    436b:	16                   	push   ss
    436c:	93                   	xchg   ebx,eax
    436d:	00 00                	add    BYTE PTR [eax],al
    436f:	00 02                	add    BYTE PTR [edx],al
    4371:	91                   	xchg   ecx,eax
    4372:	00 06                	add    BYTE PTR [esi],al
    4374:	73 32                	jae    43a8 <sysEnter_Vector-0x12bc58>
    4376:	00 01                	add    BYTE PTR [ecx],al
    4378:	16                   	push   ss
    4379:	93                   	xchg   ebx,eax
    437a:	00 00                	add    BYTE PTR [eax],al
    437c:	00 02                	add    BYTE PTR [edx],al
    437e:	91                   	xchg   ecx,eax
    437f:	04 06                	add    al,0x6
    4381:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4382:	00 01                	add    BYTE PTR [ecx],al
    4384:	16                   	push   ss
    4385:	2c 00                	sub    al,0x0
    4387:	00 00                	add    BYTE PTR [eax],al
    4389:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    438f:	00 00                	add    BYTE PTR [eax],al
    4391:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4394:	42                   	inc    edx
    4395:	13 00                	adc    eax,DWORD PTR [eax]
    4397:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    439a:	ac                   	lods   al,BYTE PTR ds:[esi]
    439b:	00 00                	add    BYTE PTR [eax],al
    439d:	00 0c 8a             	add    BYTE PTR [edx+ecx*4],cl
    43a0:	0d 00 00 1e 00       	or     eax,0x1e0000
    43a5:	00 00                	add    BYTE PTR [eax],al
    43a7:	60                   	pusha  
    43a8:	34 00                	xor    al,0x0
    43aa:	9f                   	lahf   
    43ab:	8c 00                	mov    WORD PTR [eax],es
    43ad:	00 00                	add    BYTE PTR [eax],al
    43af:	69 19 00 00 02 04    	imul   ebx,DWORD PTR [ecx],0x4020000
    43b5:	05 69 6e 74 00       	add    eax,0x746e69
    43ba:	03 bd 02 00 00 02    	add    edi,DWORD PTR [ebp+0x2000002]
    43c0:	d8 37                	fdiv   DWORD PTR [edi]
    43c2:	00 00                	add    BYTE PTR [eax],al
    43c4:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    43c7:	07                   	pop    es
    43c8:	61                   	popa   
    43c9:	00 00                	add    BYTE PTR [eax],al
    43cb:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    43ce:	05 05 00 00 00       	add    eax,0x5
    43d3:	04 08                	add    al,0x8
    43d5:	05 00 00 00 00       	add    eax,0x0
    43da:	04 0c                	add    al,0xc
    43dc:	04 66                	add    al,0x66
    43de:	01 00                	add    DWORD PTR [eax],eax
    43e0:	00 05 a0 0d 00 00    	add    BYTE PTR ds:0xda0,al
    43e6:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    43ec:	60                   	pusha  
    43ed:	34 00                	xor    al,0x0
    43ef:	9f                   	lahf   
    43f0:	6c                   	ins    BYTE PTR es:[edi],dx
    43f1:	00 00                	add    BYTE PTR [eax],al
    43f3:	00 01                	add    BYTE PTR [ecx],al
    43f5:	9c                   	pushf  
    43f6:	9f                   	lahf   
    43f7:	00 00                	add    BYTE PTR [eax],al
    43f9:	00 06                	add    BYTE PTR [esi],al
    43fb:	73 31                	jae    442e <sysEnter_Vector-0x12bbd2>
    43fd:	00 01                	add    BYTE PTR [ecx],al
    43ff:	0d 9f 00 00 00       	or     eax,0x9f
    4404:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    440a:	00 01                	add    BYTE PTR [ecx],al
    440c:	0d ac 00 00 00       	or     eax,0xac
    4411:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4417:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    441d:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    4423:	01 0f                	add    DWORD PTR [edi],ecx
    4425:	9f                   	lahf   
    4426:	00 00                	add    BYTE PTR [eax],al
    4428:	00 02                	add    BYTE PTR [edx],al
    442a:	91                   	xchg   ecx,eax
    442b:	74 00                	je     442d <sysEnter_Vector-0x12bbd3>
    442d:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    4434:	01 06                	add    DWORD PTR [esi],eax
    4436:	8c 00                	mov    WORD PTR [eax],es
    4438:	00 00                	add    BYTE PTR [eax],al
    443a:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    443d:	00 00                	add    BYTE PTR [eax],al
    443f:	00 09                	add    BYTE PTR [ecx],cl
    4441:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4442:	00 00                	add    BYTE PTR [eax],al
    4444:	00 0a                	add    BYTE PTR [edx],cl
    4446:	a9 0d 00 00 01       	test   eax,0x100000d
    444b:	1d 9f 00 00 00       	sbb    eax,0x9f
    4450:	cc                   	int3   
    4451:	34 00                	xor    al,0x0
    4453:	9f                   	lahf   
    4454:	20 00                	and    BYTE PTR [eax],al
    4456:	00 00                	add    BYTE PTR [eax],al
    4458:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    445f:	1d 9f 00 00 00       	sbb    eax,0x9f
    4464:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    446a:	00 01                	add    BYTE PTR [ecx],al
    446c:	1d ac 00 00 00       	sbb    eax,0xac
    4471:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4477:	01 1d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebx
    447d:	02 91 08 00 00 c5    	add    dl,BYTE PTR [ecx-0x3afffff8]
    4483:	01 00                	add    DWORD PTR [eax],eax
    4485:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4488:	dd 13                	fst    QWORD PTR [ebx]
    448a:	00 00                	add    BYTE PTR [eax],al
    448c:	04 01                	add    al,0x1
    448e:	ac                   	lods   al,BYTE PTR ds:[esi]
    448f:	00 00                	add    BYTE PTR [eax],al
    4491:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
    4494:	0d 00 00 1e 00       	or     eax,0x1e0000
    4499:	00 00                	add    BYTE PTR [eax],al
    449b:	ec                   	in     al,dx
    449c:	34 00                	xor    al,0x0
    449e:	9f                   	lahf   
    449f:	7d 01                	jge    44a2 <sysEnter_Vector-0x12bb5e>
    44a1:	00 00                	add    BYTE PTR [eax],al
    44a3:	10 1a                	adc    BYTE PTR [edx],bl
    44a5:	00 00                	add    BYTE PTR [eax],al
    44a7:	02 01                	add    al,BYTE PTR [ecx]
    44a9:	06                   	push   es
    44aa:	8c 00                	mov    WORD PTR [eax],es
    44ac:	00 00                	add    BYTE PTR [eax],al
    44ae:	02 01                	add    al,BYTE PTR [ecx]
    44b0:	06                   	push   es
    44b1:	85 00                	test   DWORD PTR [eax],eax
    44b3:	00 00                	add    BYTE PTR [eax],al
    44b5:	02 02                	add    al,BYTE PTR [edx]
    44b7:	05 72 01 00 00       	add    eax,0x172
    44bc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    44c3:	02 08                	add    cl,BYTE PTR [eax]
    44c5:	05 00 00 00 00       	add    eax,0x0
    44ca:	02 01                	add    al,BYTE PTR [ecx]
    44cc:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    44d2:	02 07                	add    al,BYTE PTR [edi]
    44d4:	19 01                	sbb    DWORD PTR [ecx],eax
    44d6:	00 00                	add    BYTE PTR [eax],al
    44d8:	04 0e                	add    al,0xe
    44da:	00 00                	add    BYTE PTR [eax],al
    44dc:	00 02                	add    BYTE PTR [edx],al
    44de:	34 61                	xor    al,0x61
    44e0:	00 00                	add    BYTE PTR [eax],al
    44e2:	00 02                	add    BYTE PTR [edx],al
    44e4:	04 07                	add    al,0x7
    44e6:	61                   	popa   
    44e7:	00 00                	add    BYTE PTR [eax],al
    44e9:	00 02                	add    BYTE PTR [edx],al
    44eb:	08 07                	or     BYTE PTR [edi],al
    44ed:	57                   	push   edi
    44ee:	00 00                	add    BYTE PTR [eax],al
    44f0:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    44f7:	56                   	push   esi
    44f8:	61                   	popa   
    44f9:	00 00                	add    BYTE PTR [eax],al
    44fb:	00 02                	add    BYTE PTR [edx],al
    44fd:	04 05                	add    al,0x5
    44ff:	05 00 00 00 02       	add    eax,0x2000000
    4504:	0c 04                	or     al,0x4
    4506:	66 01 00             	add    WORD PTR [eax],ax
    4509:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    450f:	00 06                	add    BYTE PTR [esi],al
    4511:	25 00 00 00 02       	and    eax,0x2000000
    4516:	01 02                	add    DWORD PTR [edx],eax
    4518:	13 01                	adc    eax,DWORD PTR [ecx]
    451a:	00 00                	add    BYTE PTR [eax],al
    451c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    451f:	83 01 00             	add    DWORD PTR [ecx],0x0
    4522:	00 02                	add    BYTE PTR [edx],al
    4524:	04 07                	add    al,0x7
    4526:	5c                   	pop    esp
    4527:	00 00                	add    BYTE PTR [eax],al
    4529:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    452f:	00 07                	add    BYTE PTR [edi],al
    4531:	bf 0d 00 00 01       	mov    edi,0x100000d
    4536:	3b a1 00 00 00 ec    	cmp    esp,DWORD PTR [ecx-0x14000000]
    453c:	34 00                	xor    al,0x0
    453e:	9f                   	lahf   
    453f:	7d 01                	jge    4542 <sysEnter_Vector-0x12babe>
    4541:	00 00                	add    BYTE PTR [eax],al
    4543:	01 9c 45 01 00 00 08 	add    DWORD PTR [ebp+eax*2+0x8000001],ebx
    454a:	e3 0d                	jecxz  4559 <sysEnter_Vector-0x12baa7>
    454c:	00 00                	add    BYTE PTR [eax],al
    454e:	01 3b                	add    DWORD PTR [ebx],edi
    4550:	88 00                	mov    BYTE PTR [eax],al
    4552:	00 00                	add    BYTE PTR [eax],al
    4554:	02 91 00 08 b1 0d    	add    dl,BYTE PTR [ecx+0xdb10800]
    455a:	00 00                	add    BYTE PTR [eax],al
    455c:	01 3b                	add    DWORD PTR [ebx],edi
    455e:	45                   	inc    ebp
    455f:	01 00                	add    DWORD PTR [eax],eax
    4561:	00 02                	add    BYTE PTR [edx],al
    4563:	91                   	xchg   ecx,eax
    4564:	04 08                	add    al,0x8
    4566:	f3 0b 00             	repz or eax,DWORD PTR [eax]
    4569:	00 01                	add    BYTE PTR [ecx],al
    456b:	3b 3a                	cmp    edi,DWORD PTR [edx]
    456d:	00 00                	add    BYTE PTR [eax],al
    456f:	00 02                	add    BYTE PTR [edx],al
    4571:	91                   	xchg   ecx,eax
    4572:	08 09                	or     BYTE PTR [ecx],cl
    4574:	73 00                	jae    4576 <sysEnter_Vector-0x12ba8a>
    4576:	01 3d 88 00 00 00    	add    DWORD PTR ds:0x88,edi
    457c:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    457f:	61                   	popa   
    4580:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4583:	01 3e                	add    DWORD PTR [esi],edi
    4585:	a1 00 00 00 01       	mov    eax,ds:0x1000000
    458a:	57                   	push   edi
    458b:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    458e:	01 3f                	add    DWORD PTR [edi],edi
    4590:	3a 00                	cmp    al,BYTE PTR [eax]
    4592:	00 00                	add    BYTE PTR [eax],al
    4594:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    4597:	dc 0d 00 00 01 40    	fmul   QWORD PTR ds:0x40010000
    459d:	a1 00 00 00 0b       	mov    eax,ds:0xb000000
    45a2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    45a3:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    45a7:	41                   	inc    ecx
    45a8:	3a 00                	cmp    al,BYTE PTR [eax]
    45aa:	00 00                	add    BYTE PTR [eax],al
    45ac:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    45af:	79 00                	jns    45b1 <sysEnter_Vector-0x12ba4f>
    45b1:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    45b4:	00 00                	add    BYTE PTR [eax],al
    45b6:	00 01                	add    BYTE PTR [ecx],al
    45b8:	51                   	push   ecx
    45b9:	0c b8                	or     al,0xb8
    45bb:	0d 00 00 01 41       	or     eax,0x41010000
    45c0:	3a 00                	cmp    al,BYTE PTR [eax]
    45c2:	00 00                	add    BYTE PTR [eax],al
    45c4:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    45c7:	05 04 a8 00 00       	add    eax,0xa804
    45cc:	00 0d a3 00 00 00    	add    BYTE PTR ds:0xa3,cl
    45d2:	03 37                	add    esi,DWORD PTR [edi]
    45d4:	56                   	push   esi
    45d5:	00 00                	add    BYTE PTR [eax],al
    45d7:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    45dd:	9f                   	lahf   
    45de:	0d 34 01 00 00       	or     eax,0x134
    45e3:	03 38                	add    edi,DWORD PTR [eax]
    45e5:	56                   	push   esi
    45e6:	00 00                	add    BYTE PTR [eax],al
    45e8:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    45ee:	9f                   	lahf   
    45ef:	0d 7b 00 00 00       	or     eax,0x7b
    45f4:	03 39                	add    edi,DWORD PTR [ecx]
    45f6:	56                   	push   esi
    45f7:	00 00                	add    BYTE PTR [eax],al
    45f9:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    45ff:	9f                   	lahf   
    4600:	0d 7c 01 00 00       	or     eax,0x17c
    4605:	03 3a                	add    edi,DWORD PTR [edx]
    4607:	7a 00                	jp     4609 <sysEnter_Vector-0x12b9f7>
    4609:	00 00                	add    BYTE PTR [eax],al
    460b:	05 03 d8 71 00       	add    eax,0x71d803
    4610:	9f                   	lahf   
    4611:	0d 6e 00 00 00       	or     eax,0x6e
    4616:	04 34                	add    al,0x34
    4618:	a0 01 00 00 05       	mov    al,ds:0x5000001
    461d:	03 c4                	add    eax,esp
    461f:	71 00                	jno    4621 <sysEnter_Vector-0x12b9df>
    4621:	9f                   	lahf   
    4622:	05 04 6f 00 00       	add    eax,0x6f04
    4627:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
    462d:	04 35                	add    al,0x35
    462f:	56                   	push   esi
    4630:	00 00                	add    BYTE PTR [eax],al
    4632:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    4638:	9f                   	lahf   
    4639:	0d 41 00 00 00       	or     eax,0x41
    463e:	05 58 45 01 00       	add    eax,0x14558
    4643:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    4649:	9f                   	lahf   
    464a:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    464e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4651:	98                   	cwde   
    4652:	14 00                	adc    al,0x0
    4654:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4657:	ac                   	lods   al,BYTE PTR ds:[esi]
    4658:	00 00                	add    BYTE PTR [eax],al
    465a:	00 0c e8             	add    BYTE PTR [eax+ebp*8],cl
    465d:	0d 00 00 1e 00       	or     eax,0x1e0000
    4662:	00 00                	add    BYTE PTR [eax],al
    4664:	6c                   	ins    BYTE PTR es:[edi],dx
    4665:	36 00 9f 1d 00 00 00 	add    BYTE PTR ss:[edi+0x1d],bl
    466c:	67 1b 00             	sbb    eax,DWORD PTR [bx+si]
    466f:	00 02                	add    BYTE PTR [edx],al
    4671:	ff 0d 00 00 01 01    	dec    DWORD PTR ds:0x1010000
    4677:	5b                   	pop    ebx
    4678:	00 00                	add    BYTE PTR [eax],al
    467a:	00 6c 36 00          	add    BYTE PTR [esi+esi*1+0x0],ch
    467e:	9f                   	lahf   
    467f:	1d 00 00 00 01       	sbb    eax,0x1000000
    4684:	9c                   	pushf  
    4685:	5b                   	pop    ebx
    4686:	00 00                	add    BYTE PTR [eax],al
    4688:	00 03                	add    BYTE PTR [ebx],al
    468a:	76 61                	jbe    46ed <sysEnter_Vector-0x12b913>
    468c:	6c                   	ins    BYTE PTR es:[edi],dx
    468d:	00 01                	add    BYTE PTR [ecx],al
    468f:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    4692:	00 00                	add    BYTE PTR [eax],al
    4694:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    469a:	74 00                	je     469c <sysEnter_Vector-0x12b964>
    469c:	01 01                	add    DWORD PTR [ecx],eax
    469e:	68 00 00 00 02       	push   0x2000000
    46a3:	91                   	xchg   ecx,eax
    46a4:	04 00                	add    al,0x0
    46a6:	04 04                	add    al,0x4
    46a8:	61                   	popa   
    46a9:	00 00                	add    BYTE PTR [eax],al
    46ab:	00 05 01 06 8c 00    	add    BYTE PTR ds:0x8c0601,al
    46b1:	00 00                	add    BYTE PTR [eax],al
    46b3:	06                   	push   es
    46b4:	04 05                	add    al,0x5
    46b6:	69 6e 74 00 00 c3 01 	imul   ebp,DWORD PTR [esi+0x74],0x1c30000
    46bd:	00 00                	add    BYTE PTR [eax],al
    46bf:	04 00                	add    al,0x0
    46c1:	f6 14 00             	not    BYTE PTR [eax+eax*1]
    46c4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    46c7:	ac                   	lods   al,BYTE PTR ds:[esi]
    46c8:	00 00                	add    BYTE PTR [eax],al
    46ca:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    46cd:	0e                   	push   cs
    46ce:	00 00                	add    BYTE PTR [eax],al
    46d0:	1e                   	push   ds
    46d1:	00 00                	add    BYTE PTR [eax],al
    46d3:	00 8c 36 00 9f 9c 01 	add    BYTE PTR [esi+esi*1+0x19c9f00],cl
    46da:	00 00                	add    BYTE PTR [eax],al
    46dc:	ae                   	scas   al,BYTE PTR es:[edi]
    46dd:	1b 00                	sbb    eax,DWORD PTR [eax]
    46df:	00 02                	add    BYTE PTR [edx],al
    46e1:	01 06                	add    DWORD PTR [esi],eax
    46e3:	8c 00                	mov    WORD PTR [eax],es
    46e5:	00 00                	add    BYTE PTR [eax],al
    46e7:	02 01                	add    al,BYTE PTR [ecx]
    46e9:	06                   	push   es
    46ea:	85 00                	test   DWORD PTR [eax],eax
    46ec:	00 00                	add    BYTE PTR [eax],al
    46ee:	02 02                	add    al,BYTE PTR [edx]
    46f0:	05 72 01 00 00       	add    eax,0x172
    46f5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    46fc:	02 08                	add    cl,BYTE PTR [eax]
    46fe:	05 00 00 00 00       	add    eax,0x0
    4703:	02 01                	add    al,BYTE PTR [ecx]
    4705:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    470b:	02 07                	add    al,BYTE PTR [edi]
    470d:	19 01                	sbb    DWORD PTR [ecx],eax
    470f:	00 00                	add    BYTE PTR [eax],al
    4711:	04 0e                	add    al,0xe
    4713:	00 00                	add    BYTE PTR [eax],al
    4715:	00 02                	add    BYTE PTR [edx],al
    4717:	34 61                	xor    al,0x61
    4719:	00 00                	add    BYTE PTR [eax],al
    471b:	00 02                	add    BYTE PTR [edx],al
    471d:	04 07                	add    al,0x7
    471f:	61                   	popa   
    4720:	00 00                	add    BYTE PTR [eax],al
    4722:	00 02                	add    BYTE PTR [edx],al
    4724:	08 07                	or     BYTE PTR [edi],al
    4726:	57                   	push   edi
    4727:	00 00                	add    BYTE PTR [eax],al
    4729:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    4730:	56                   	push   esi
    4731:	61                   	popa   
    4732:	00 00                	add    BYTE PTR [eax],al
    4734:	00 02                	add    BYTE PTR [edx],al
    4736:	04 05                	add    al,0x5
    4738:	05 00 00 00 02       	add    eax,0x2000000
    473d:	0c 04                	or     al,0x4
    473f:	66 01 00             	add    WORD PTR [eax],ax
    4742:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    4748:	00 06                	add    BYTE PTR [esi],al
    474a:	25 00 00 00 02       	and    eax,0x2000000
    474f:	01 02                	add    DWORD PTR [edx],eax
    4751:	13 01                	adc    eax,DWORD PTR [ecx]
    4753:	00 00                	add    BYTE PTR [eax],al
    4755:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4758:	83 01 00             	add    DWORD PTR [ecx],0x0
    475b:	00 02                	add    BYTE PTR [edx],al
    475d:	04 07                	add    al,0x7
    475f:	5c                   	pop    esp
    4760:	00 00                	add    BYTE PTR [eax],al
    4762:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4768:	00 07                	add    BYTE PTR [edi],al
    476a:	1c 0e                	sbb    al,0xe
    476c:	00 00                	add    BYTE PTR [eax],al
    476e:	01 57 7a             	add    DWORD PTR [edi+0x7a],edx
    4771:	00 00                	add    BYTE PTR [eax],al
    4773:	00 8c 36 00 9f 9c 01 	add    BYTE PTR [esi+esi*1+0x19c9f00],cl
    477a:	00 00                	add    BYTE PTR [eax],al
    477c:	01 9c 43 01 00 00 08 	add    DWORD PTR [ebx+eax*2+0x8000001],ebx
    4783:	e3 0d                	jecxz  4792 <sysEnter_Vector-0x12b86e>
    4785:	00 00                	add    BYTE PTR [eax],al
    4787:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    478a:	00 00                	add    BYTE PTR [eax],al
    478c:	00 02                	add    BYTE PTR [edx],al
    478e:	91                   	xchg   ecx,eax
    478f:	00 08                	add    BYTE PTR [eax],cl
    4791:	b1 0d                	mov    cl,0xd
    4793:	00 00                	add    BYTE PTR [eax],al
    4795:	01 57 43             	add    DWORD PTR [edi+0x43],edx
    4798:	01 00                	add    DWORD PTR [eax],eax
    479a:	00 02                	add    BYTE PTR [edx],al
    479c:	91                   	xchg   ecx,eax
    479d:	04 08                	add    al,0x8
    479f:	f3 0b 00             	repz or eax,DWORD PTR [eax]
    47a2:	00 01                	add    BYTE PTR [ecx],al
    47a4:	57                   	push   edi
    47a5:	3a 00                	cmp    al,BYTE PTR [eax]
    47a7:	00 00                	add    BYTE PTR [eax],al
    47a9:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    47af:	01 59 88             	add    DWORD PTR [ecx-0x78],ebx
    47b2:	00 00                	add    BYTE PTR [eax],al
    47b4:	00 01                	add    BYTE PTR [ecx],al
    47b6:	56                   	push   esi
    47b7:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    47ba:	63 00                	arpl   WORD PTR [eax],ax
    47bc:	01 5a a1             	add    DWORD PTR [edx-0x5f],ebx
    47bf:	00 00                	add    BYTE PTR [eax],al
    47c1:	00 01                	add    BYTE PTR [ecx],al
    47c3:	57                   	push   edi
    47c4:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    47c7:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    47ca:	00 00                	add    BYTE PTR [eax],al
    47cc:	00 01                	add    BYTE PTR [ecx],al
    47ce:	53                   	push   ebx
    47cf:	0a dc                	or     bl,ah
    47d1:	0d 00 00 01 5c       	or     eax,0x5c010000
    47d6:	a1 00 00 00 0b       	mov    eax,ds:0xb000000
    47db:	6e                   	outs   dx,BYTE PTR ds:[esi]
    47dc:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    47e0:	5d                   	pop    ebp
    47e1:	3a 00                	cmp    al,BYTE PTR [eax]
    47e3:	00 00                	add    BYTE PTR [eax],al
    47e5:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    47e8:	79 00                	jns    47ea <sysEnter_Vector-0x12b816>
    47ea:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    47ed:	00 00                	add    BYTE PTR [eax],al
    47ef:	00 01                	add    BYTE PTR [ecx],al
    47f1:	51                   	push   ecx
    47f2:	0a b8 0d 00 00 01    	or     bh,BYTE PTR [eax+0x100000d]
    47f8:	5d                   	pop    ebp
    47f9:	3a 00                	cmp    al,BYTE PTR [eax]
    47fb:	00 00                	add    BYTE PTR [eax],al
    47fd:	00 05 04 a8 00 00    	add    BYTE PTR ds:0xa804,al
    4803:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
    4806:	00 00                	add    BYTE PTR [eax],al
    4808:	00 03                	add    BYTE PTR [ebx],al
    480a:	37                   	aaa    
    480b:	56                   	push   esi
    480c:	00 00                	add    BYTE PTR [eax],al
    480e:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    4814:	9f                   	lahf   
    4815:	0c 34                	or     al,0x34
    4817:	01 00                	add    DWORD PTR [eax],eax
    4819:	00 03                	add    BYTE PTR [ebx],al
    481b:	38 56 00             	cmp    BYTE PTR [esi+0x0],dl
    481e:	00 00                	add    BYTE PTR [eax],al
    4820:	05 03 d0 71 00       	add    eax,0x71d003
    4825:	9f                   	lahf   
    4826:	0c 7b                	or     al,0x7b
    4828:	00 00                	add    BYTE PTR [eax],al
    482a:	00 03                	add    BYTE PTR [ebx],al
    482c:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    482f:	00 00                	add    BYTE PTR [eax],al
    4831:	05 03 c8 71 00       	add    eax,0x71c803
    4836:	9f                   	lahf   
    4837:	0c 7c                	or     al,0x7c
    4839:	01 00                	add    DWORD PTR [eax],eax
    483b:	00 03                	add    BYTE PTR [ebx],al
    483d:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    4840:	00 00                	add    BYTE PTR [eax],al
    4842:	05 03 d8 71 00       	add    eax,0x71d803
    4847:	9f                   	lahf   
    4848:	0c 6e                	or     al,0x6e
    484a:	00 00                	add    BYTE PTR [eax],al
    484c:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    484f:	9e                   	sahf   
    4850:	01 00                	add    DWORD PTR [eax],eax
    4852:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    4858:	9f                   	lahf   
    4859:	05 04 6f 00 00       	add    eax,0x6f04
    485e:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    4861:	00 00                	add    BYTE PTR [eax],al
    4863:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    486a:	05 03 c0 71 00       	add    eax,0x71c003
    486f:	9f                   	lahf   
    4870:	0c 41                	or     al,0x41
    4872:	00 00                	add    BYTE PTR [eax],al
    4874:	00 05 58 43 01 00    	add    BYTE PTR ds:0x14358,al
    487a:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    4880:	9f                   	lahf   
    4881:	00 95 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],dl
    4887:	00 a2 15 00 00 04    	add    BYTE PTR [edx+0x4000015],ah
    488d:	01 ac 00 00 00 0c 32 	add    DWORD PTR [eax+eax*1+0x320c0000],ebp
    4894:	0e                   	push   cs
    4895:	00 00                	add    BYTE PTR [eax],al
    4897:	1e                   	push   ds
    4898:	00 00                	add    BYTE PTR [eax],al
    489a:	00 28                	add    BYTE PTR [eax],ch
    489c:	38 00                	cmp    BYTE PTR [eax],al
    489e:	9f                   	lahf   
    489f:	b6 00                	mov    dh,0x0
    48a1:	00 00                	add    BYTE PTR [eax],al
    48a3:	31 1d 00 00 02 01    	xor    DWORD PTR ds:0x1020000,ebx
    48a9:	06                   	push   es
    48aa:	8c 00                	mov    WORD PTR [eax],es
    48ac:	00 00                	add    BYTE PTR [eax],al
    48ae:	02 01                	add    al,BYTE PTR [ecx]
    48b0:	06                   	push   es
    48b1:	85 00                	test   DWORD PTR [eax],eax
    48b3:	00 00                	add    BYTE PTR [eax],al
    48b5:	02 02                	add    al,BYTE PTR [edx]
    48b7:	05 72 01 00 00       	add    eax,0x172
    48bc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    48c3:	02 08                	add    cl,BYTE PTR [eax]
    48c5:	05 00 00 00 00       	add    eax,0x0
    48ca:	02 01                	add    al,BYTE PTR [ecx]
    48cc:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    48d2:	02 07                	add    al,BYTE PTR [edi]
    48d4:	19 01                	sbb    DWORD PTR [ecx],eax
    48d6:	00 00                	add    BYTE PTR [eax],al
    48d8:	04 0e                	add    al,0xe
    48da:	00 00                	add    BYTE PTR [eax],al
    48dc:	00 02                	add    BYTE PTR [edx],al
    48de:	34 61                	xor    al,0x61
    48e0:	00 00                	add    BYTE PTR [eax],al
    48e2:	00 02                	add    BYTE PTR [edx],al
    48e4:	04 07                	add    al,0x7
    48e6:	61                   	popa   
    48e7:	00 00                	add    BYTE PTR [eax],al
    48e9:	00 02                	add    BYTE PTR [edx],al
    48eb:	08 07                	or     BYTE PTR [edi],al
    48ed:	57                   	push   edi
    48ee:	00 00                	add    BYTE PTR [eax],al
    48f0:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    48f7:	56                   	push   esi
    48f8:	61                   	popa   
    48f9:	00 00                	add    BYTE PTR [eax],al
    48fb:	00 02                	add    BYTE PTR [edx],al
    48fd:	04 05                	add    al,0x5
    48ff:	05 00 00 00 02       	add    eax,0x2000000
    4904:	0c 04                	or     al,0x4
    4906:	66 01 00             	add    WORD PTR [eax],ax
    4909:	00 02                	add    BYTE PTR [edx],al
    490b:	01 02                	add    DWORD PTR [edx],eax
    490d:	13 01                	adc    eax,DWORD PTR [ecx]
    490f:	00 00                	add    BYTE PTR [eax],al
    4911:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4914:	83 01 00             	add    DWORD PTR [ecx],0x0
    4917:	00 02                	add    BYTE PTR [edx],al
    4919:	04 07                	add    al,0x7
    491b:	5c                   	pop    esp
    491c:	00 00                	add    BYTE PTR [eax],al
    491e:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4924:	00 06                	add    BYTE PTR [esi],al
    4926:	23 0e                	and    ecx,DWORD PTR [esi]
    4928:	00 00                	add    BYTE PTR [eax],al
    492a:	01 03                	add    DWORD PTR [ebx],eax
    492c:	28 38                	sub    BYTE PTR [eax],bh
    492e:	00 9f 96 00 00 00    	add    BYTE PTR [edi+0x96],bl
    4934:	01 9c f1 00 00 00 07 	add    DWORD PTR [ecx+esi*8+0x7000000],ebx
    493b:	2c 0e                	sub    al,0xe
    493d:	00 00                	add    BYTE PTR [eax],al
    493f:	01 03                	add    DWORD PTR [ebx],eax
    4941:	9d                   	popf   
    4942:	00 00                	add    BYTE PTR [eax],al
    4944:	00 02                	add    BYTE PTR [edx],al
    4946:	91                   	xchg   ecx,eax
    4947:	00 08                	add    BYTE PTR [eax],cl
    4949:	64                   	fs
    494a:	73 74                	jae    49c0 <sysEnter_Vector-0x12b640>
    494c:	00 01                	add    BYTE PTR [ecx],al
    494e:	05 9d 00 00 00       	add    eax,0x9d
    4953:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    4959:	63 00                	arpl   WORD PTR [eax],ax
    495b:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    4961:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    4967:	64 00 01             	add    BYTE PTR fs:[ecx],al
    496a:	06                   	push   es
    496b:	9d                   	popf   
    496c:	00 00                	add    BYTE PTR [eax],al
    496e:	00 02                	add    BYTE PTR [edx],al
    4970:	91                   	xchg   ecx,eax
    4971:	64 00 06             	add    BYTE PTR fs:[esi],al
    4974:	48                   	dec    eax
    4975:	0e                   	push   cs
    4976:	00 00                	add    BYTE PTR [eax],al
    4978:	01 1f                	add    DWORD PTR [edi],ebx
    497a:	be 38 00 9f 20       	mov    esi,0x209f0038
    497f:	00 00                	add    BYTE PTR [eax],al
    4981:	00 01                	add    BYTE PTR [ecx],al
    4983:	9c                   	pushf  
    4984:	15 01 00 00 07       	adc    eax,0x7000001
    4989:	2c 0e                	sub    al,0xe
    498b:	00 00                	add    BYTE PTR [eax],al
    498d:	01 1f                	add    DWORD PTR [edi],ebx
    498f:	9d                   	popf   
    4990:	00 00                	add    BYTE PTR [eax],al
    4992:	00 02                	add    BYTE PTR [edx],al
    4994:	91                   	xchg   ecx,eax
    4995:	00 00                	add    BYTE PTR [eax],al
    4997:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
    499d:	37                   	aaa    
    499e:	56                   	push   esi
    499f:	00 00                	add    BYTE PTR [eax],al
    49a1:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    49a7:	9f                   	lahf   
    49a8:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
    49ab:	00 00                	add    BYTE PTR [eax],al
    49ad:	03 38                	add    edi,DWORD PTR [eax]
    49af:	56                   	push   esi
    49b0:	00 00                	add    BYTE PTR [eax],al
    49b2:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    49b8:	9f                   	lahf   
    49b9:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
    49bc:	00 00                	add    BYTE PTR [eax],al
    49be:	03 39                	add    edi,DWORD PTR [ecx]
    49c0:	56                   	push   esi
    49c1:	00 00                	add    BYTE PTR [eax],al
    49c3:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    49c9:	9f                   	lahf   
    49ca:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
    49ce:	00 03                	add    BYTE PTR [ebx],al
    49d0:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    49d3:	00 00                	add    BYTE PTR [eax],al
    49d5:	05 03 d8 71 00       	add    eax,0x71d803
    49da:	9f                   	lahf   
    49db:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
    49de:	00 00                	add    BYTE PTR [eax],al
    49e0:	04 34                	add    al,0x34
    49e2:	6a 01                	push   0x1
    49e4:	00 00                	add    BYTE PTR [eax],al
    49e6:	05 03 c4 71 00       	add    eax,0x71c403
    49eb:	9f                   	lahf   
    49ec:	05 04 6f 00 00       	add    eax,0x6f04
    49f1:	00 09                	add    BYTE PTR [ecx],cl
    49f3:	91                   	xchg   ecx,eax
    49f4:	00 00                	add    BYTE PTR [eax],al
    49f6:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    49fd:	05 03 c0 71 00       	add    eax,0x71c003
    4a02:	9f                   	lahf   
    4a03:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
    4a06:	00 00                	add    BYTE PTR [eax],al
    4a08:	05 58 92 01 00       	add    eax,0x19258
    4a0d:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    4a13:	9f                   	lahf   
    4a14:	05 04 9d 00 00       	add    eax,0x9d04
    4a19:	00 00                	add    BYTE PTR [eax],al
    4a1b:	03 02                	add    eax,DWORD PTR [edx]
    4a1d:	00 00                	add    BYTE PTR [eax],al
    4a1f:	04 00                	add    al,0x0
    4a21:	2b 16                	sub    edx,DWORD PTR [esi]
    4a23:	00 00                	add    BYTE PTR [eax],al
    4a25:	04 01                	add    al,0x1
    4a27:	ac                   	lods   al,BYTE PTR ds:[esi]
    4a28:	00 00                	add    BYTE PTR [eax],al
    4a2a:	00 0c 58             	add    BYTE PTR [eax+ebx*2],cl
    4a2d:	0e                   	push   cs
    4a2e:	00 00                	add    BYTE PTR [eax],al
    4a30:	1e                   	push   ds
    4a31:	00 00                	add    BYTE PTR [eax],al
    4a33:	00 e0                	add    al,ah
    4a35:	38 00                	cmp    BYTE PTR [eax],al
    4a37:	9f                   	lahf   
    4a38:	44                   	inc    esp
    4a39:	01 00                	add    DWORD PTR [eax],eax
    4a3b:	00 0e                	add    BYTE PTR [esi],cl
    4a3d:	1e                   	push   ds
    4a3e:	00 00                	add    BYTE PTR [eax],al
    4a40:	02 01                	add    al,BYTE PTR [ecx]
    4a42:	06                   	push   es
    4a43:	8c 00                	mov    WORD PTR [eax],es
    4a45:	00 00                	add    BYTE PTR [eax],al
    4a47:	02 01                	add    al,BYTE PTR [ecx]
    4a49:	06                   	push   es
    4a4a:	85 00                	test   DWORD PTR [eax],eax
    4a4c:	00 00                	add    BYTE PTR [eax],al
    4a4e:	02 02                	add    al,BYTE PTR [edx]
    4a50:	05 72 01 00 00       	add    eax,0x172
    4a55:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4a5c:	02 08                	add    cl,BYTE PTR [eax]
    4a5e:	05 00 00 00 00       	add    eax,0x0
    4a63:	02 01                	add    al,BYTE PTR [ecx]
    4a65:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    4a6b:	02 07                	add    al,BYTE PTR [edi]
    4a6d:	19 01                	sbb    DWORD PTR [ecx],eax
    4a6f:	00 00                	add    BYTE PTR [eax],al
    4a71:	04 0e                	add    al,0xe
    4a73:	00 00                	add    BYTE PTR [eax],al
    4a75:	00 02                	add    BYTE PTR [edx],al
    4a77:	34 61                	xor    al,0x61
    4a79:	00 00                	add    BYTE PTR [eax],al
    4a7b:	00 02                	add    BYTE PTR [edx],al
    4a7d:	04 07                	add    al,0x7
    4a7f:	61                   	popa   
    4a80:	00 00                	add    BYTE PTR [eax],al
    4a82:	00 02                	add    BYTE PTR [edx],al
    4a84:	08 07                	or     BYTE PTR [edi],al
    4a86:	57                   	push   edi
    4a87:	00 00                	add    BYTE PTR [eax],al
    4a89:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    4a90:	56                   	push   esi
    4a91:	61                   	popa   
    4a92:	00 00                	add    BYTE PTR [eax],al
    4a94:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    4a9b:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    4a9e:	00 00                	add    BYTE PTR [eax],al
    4aa0:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4aa7:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4aaa:	66 01 00             	add    WORD PTR [eax],ax
    4aad:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    4ab3:	00 06                	add    BYTE PTR [esi],al
    4ab5:	25 00 00 00 02       	and    eax,0x2000000
    4aba:	01 02                	add    DWORD PTR [edx],eax
    4abc:	13 01                	adc    eax,DWORD PTR [ecx]
    4abe:	00 00                	add    BYTE PTR [eax],al
    4ac0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4ac3:	83 01 00             	add    DWORD PTR [ecx],0x0
    4ac6:	00 02                	add    BYTE PTR [edx],al
    4ac8:	04 07                	add    al,0x7
    4aca:	5c                   	pop    esp
    4acb:	00 00                	add    BYTE PTR [eax],al
    4acd:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4ad3:	00 07                	add    BYTE PTR [edi],al
    4ad5:	8d 0e                	lea    ecx,[esi]
    4ad7:	00 00                	add    BYTE PTR [eax],al
    4ad9:	01 0d b3 00 00 00    	add    DWORD PTR ds:0xb3,ecx
    4adf:	e0 38                	loopne 4b19 <sysEnter_Vector-0x12b4e7>
    4ae1:	00 9f 1e 01 00 00    	add    BYTE PTR [edi+0x11e],bl
    4ae7:	01 9c 33 01 00 00 08 	add    DWORD PTR [ebx+esi*1+0x8000001],ebx
    4aee:	69 6e 00 01 0d 93 00 	imul   ebp,DWORD PTR [esi+0x0],0x930d01
    4af5:	00 00                	add    BYTE PTR [eax],al
    4af7:	02 91 00 09 85 0e    	add    dl,BYTE PTR [ecx+0xe850900]
    4afd:	00 00                	add    BYTE PTR [eax],al
    4aff:	01 0d 93 00 00 00    	add    DWORD PTR ds:0x93,ecx
    4b05:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    4b0b:	00 01                	add    BYTE PTR [ecx],al
    4b0d:	0d 93 00 00 00       	or     eax,0x93
    4b12:	02 91 08 09 99 0e    	add    dl,BYTE PTR [ecx+0xe990908]
    4b18:	00 00                	add    BYTE PTR [eax],al
    4b1a:	01 0d b3 00 00 00    	add    DWORD PTR ds:0xb3,ecx
    4b20:	02 91 0c 0a 50 0e    	add    dl,BYTE PTR [ecx+0xe500a0c]
    4b26:	00 00                	add    BYTE PTR [eax],al
    4b28:	01 0f                	add    DWORD PTR [edi],ecx
    4b2a:	7a 00                	jp     4b2c <sysEnter_Vector-0x12b4d4>
    4b2c:	00 00                	add    BYTE PTR [eax],al
    4b2e:	02 91 6c 0a 70 0e    	add    dl,BYTE PTR [ecx+0xe700a6c]
    4b34:	00 00                	add    BYTE PTR [eax],al
    4b36:	01 12                	add    DWORD PTR [edx],edx
    4b38:	7a 00                	jp     4b3a <sysEnter_Vector-0x12b4c6>
    4b3a:	00 00                	add    BYTE PTR [eax],al
    4b3c:	02 91 68 0a 69 0e    	add    dl,BYTE PTR [ecx+0xe690a68]
    4b42:	00 00                	add    BYTE PTR [eax],al
    4b44:	01 13                	add    DWORD PTR [ebx],edx
    4b46:	b3 00                	mov    bl,0x0
    4b48:	00 00                	add    BYTE PTR [eax],al
    4b4a:	02 91 64 00 07 7a    	add    dl,BYTE PTR [ecx+0x7a070064]
    4b50:	0e                   	push   cs
    4b51:	00 00                	add    BYTE PTR [eax],al
    4b53:	01 2a                	add    DWORD PTR [edx],ebp
    4b55:	b3 00                	mov    bl,0x0
    4b57:	00 00                	add    BYTE PTR [eax],al
    4b59:	fe                   	(bad)  
    4b5a:	39 00                	cmp    DWORD PTR [eax],eax
    4b5c:	9f                   	lahf   
    4b5d:	26 00 00             	add    BYTE PTR es:[eax],al
    4b60:	00 01                	add    BYTE PTR [ecx],al
    4b62:	9c                   	pushf  
    4b63:	83 01 00             	add    DWORD PTR [ecx],0x0
    4b66:	00 08                	add    BYTE PTR [eax],cl
    4b68:	69 6e 00 01 2a 93 00 	imul   ebp,DWORD PTR [esi+0x0],0x932a01
    4b6f:	00 00                	add    BYTE PTR [eax],al
    4b71:	02 91 00 09 85 0e    	add    dl,BYTE PTR [ecx+0xe850900]
    4b77:	00 00                	add    BYTE PTR [eax],al
    4b79:	01 2a                	add    DWORD PTR [edx],ebp
    4b7b:	93                   	xchg   ebx,eax
    4b7c:	00 00                	add    BYTE PTR [eax],al
    4b7e:	00 02                	add    BYTE PTR [edx],al
    4b80:	91                   	xchg   ecx,eax
    4b81:	04 08                	add    al,0x8
    4b83:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4b86:	01 2a                	add    DWORD PTR [edx],ebp
    4b88:	93                   	xchg   ebx,eax
    4b89:	00 00                	add    BYTE PTR [eax],al
    4b8b:	00 02                	add    BYTE PTR [edx],al
    4b8d:	91                   	xchg   ecx,eax
    4b8e:	08 09                	or     BYTE PTR [ecx],cl
    4b90:	99                   	cdq    
    4b91:	0e                   	push   cs
    4b92:	00 00                	add    BYTE PTR [eax],al
    4b94:	01 2a                	add    DWORD PTR [edx],ebp
    4b96:	b3 00                	mov    bl,0x0
    4b98:	00 00                	add    BYTE PTR [eax],al
    4b9a:	02 91 0c 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff4]
    4ba0:	00 00                	add    BYTE PTR [eax],al
    4ba2:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    4ba5:	56                   	push   esi
    4ba6:	00 00                	add    BYTE PTR [eax],al
    4ba8:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    4bae:	9f                   	lahf   
    4baf:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    4bb2:	00 00                	add    BYTE PTR [eax],al
    4bb4:	04 38                	add    al,0x38
    4bb6:	56                   	push   esi
    4bb7:	00 00                	add    BYTE PTR [eax],al
    4bb9:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    4bbf:	9f                   	lahf   
    4bc0:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    4bc3:	00 00                	add    BYTE PTR [eax],al
    4bc5:	04 39                	add    al,0x39
    4bc7:	56                   	push   esi
    4bc8:	00 00                	add    BYTE PTR [eax],al
    4bca:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    4bd0:	9f                   	lahf   
    4bd1:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    4bd5:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    4bd8:	85 00                	test   DWORD PTR [eax],eax
    4bda:	00 00                	add    BYTE PTR [eax],al
    4bdc:	05 03 d8 71 00       	add    eax,0x71d803
    4be1:	9f                   	lahf   
    4be2:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    4be5:	00 00                	add    BYTE PTR [eax],al
    4be7:	05 34 d8 01 00       	add    eax,0x1d834
    4bec:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    4bf2:	9f                   	lahf   
    4bf3:	05 04 6f 00 00       	add    eax,0x6f04
    4bf8:	00 0b                	add    BYTE PTR [ebx],cl
    4bfa:	91                   	xchg   ecx,eax
    4bfb:	00 00                	add    BYTE PTR [eax],al
    4bfd:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    4c03:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    4c09:	9f                   	lahf   
    4c0a:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    4c0d:	00 00                	add    BYTE PTR [eax],al
    4c0f:	06                   	push   es
    4c10:	58                   	pop    eax
    4c11:	00 02                	add    BYTE PTR [edx],al
    4c13:	00 00                	add    BYTE PTR [eax],al
    4c15:	05 03 d4 71 00       	add    eax,0x71d403
    4c1a:	9f                   	lahf   
    4c1b:	05 04 b3 00 00       	add    eax,0xb304
    4c20:	00 00                	add    BYTE PTR [eax],al
    4c22:	39 02                	cmp    DWORD PTR [edx],eax
    4c24:	00 00                	add    BYTE PTR [eax],al
    4c26:	04 00                	add    al,0x0
    4c28:	cc                   	int3   
    4c29:	16                   	push   ss
    4c2a:	00 00                	add    BYTE PTR [eax],al
    4c2c:	04 01                	add    al,0x1
    4c2e:	ac                   	lods   al,BYTE PTR ds:[esi]
    4c2f:	00 00                	add    BYTE PTR [eax],al
    4c31:	00 0c b4             	add    BYTE PTR [esp+esi*4],cl
    4c34:	0e                   	push   cs
    4c35:	00 00                	add    BYTE PTR [eax],al
    4c37:	1e                   	push   ds
    4c38:	00 00                	add    BYTE PTR [eax],al
    4c3a:	00 24 3a             	add    BYTE PTR [edx+edi*1],ah
    4c3d:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
    4c43:	f6 1e                	neg    BYTE PTR [esi]
    4c45:	00 00                	add    BYTE PTR [eax],al
    4c47:	02 01                	add    al,BYTE PTR [ecx]
    4c49:	06                   	push   es
    4c4a:	8c 00                	mov    WORD PTR [eax],es
    4c4c:	00 00                	add    BYTE PTR [eax],al
    4c4e:	02 01                	add    al,BYTE PTR [ecx]
    4c50:	06                   	push   es
    4c51:	85 00                	test   DWORD PTR [eax],eax
    4c53:	00 00                	add    BYTE PTR [eax],al
    4c55:	02 02                	add    al,BYTE PTR [edx]
    4c57:	05 72 01 00 00       	add    eax,0x172
    4c5c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4c63:	02 08                	add    cl,BYTE PTR [eax]
    4c65:	05 00 00 00 00       	add    eax,0x0
    4c6a:	02 01                	add    al,BYTE PTR [ecx]
    4c6c:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    4c72:	02 07                	add    al,BYTE PTR [edi]
    4c74:	19 01                	sbb    DWORD PTR [ecx],eax
    4c76:	00 00                	add    BYTE PTR [eax],al
    4c78:	04 0e                	add    al,0xe
    4c7a:	00 00                	add    BYTE PTR [eax],al
    4c7c:	00 02                	add    BYTE PTR [edx],al
    4c7e:	34 61                	xor    al,0x61
    4c80:	00 00                	add    BYTE PTR [eax],al
    4c82:	00 02                	add    BYTE PTR [edx],al
    4c84:	04 07                	add    al,0x7
    4c86:	61                   	popa   
    4c87:	00 00                	add    BYTE PTR [eax],al
    4c89:	00 02                	add    BYTE PTR [edx],al
    4c8b:	08 07                	or     BYTE PTR [edi],al
    4c8d:	57                   	push   edi
    4c8e:	00 00                	add    BYTE PTR [eax],al
    4c90:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    4c97:	56                   	push   esi
    4c98:	61                   	popa   
    4c99:	00 00                	add    BYTE PTR [eax],al
    4c9b:	00 02                	add    BYTE PTR [edx],al
    4c9d:	04 05                	add    al,0x5
    4c9f:	05 00 00 00 02       	add    eax,0x2000000
    4ca4:	0c 04                	or     al,0x4
    4ca6:	66 01 00             	add    WORD PTR [eax],ax
    4ca9:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    4caf:	00 06                	add    BYTE PTR [esi],al
    4cb1:	25 00 00 00 02       	and    eax,0x2000000
    4cb6:	01 02                	add    DWORD PTR [edx],eax
    4cb8:	13 01                	adc    eax,DWORD PTR [ecx]
    4cba:	00 00                	add    BYTE PTR [eax],al
    4cbc:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4cbf:	83 01 00             	add    DWORD PTR [ecx],0x0
    4cc2:	00 02                	add    BYTE PTR [edx],al
    4cc4:	04 07                	add    al,0x7
    4cc6:	5c                   	pop    esp
    4cc7:	00 00                	add    BYTE PTR [eax],al
    4cc9:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4ccf:	00 07                	add    BYTE PTR [edi],al
    4cd1:	ab                   	stos   DWORD PTR es:[edi],eax
    4cd2:	0e                   	push   cs
    4cd3:	00 00                	add    BYTE PTR [eax],al
    4cd5:	01 33                	add    DWORD PTR [ebx],esi
    4cd7:	a8 00                	test   al,0x0
    4cd9:	00 00                	add    BYTE PTR [eax],al
    4cdb:	24 3a                	and    al,0x3a
    4cdd:	00 9f 9e 00 00 00    	add    BYTE PTR [edi+0x9e],bl
    4ce3:	01 9c 16 01 00 00 08 	add    DWORD PTR [esi+edx*1+0x8000001],ebx
    4cea:	ca 0e 00             	retf   0xe
    4ced:	00 01                	add    BYTE PTR [ecx],al
    4cef:	33 a8 00 00 00 02    	xor    ebp,DWORD PTR [eax+0x2000000]
    4cf5:	91                   	xchg   ecx,eax
    4cf6:	00 08                	add    BYTE PTR [eax],cl
    4cf8:	c7                   	(bad)  
    4cf9:	0e                   	push   cs
    4cfa:	00 00                	add    BYTE PTR [eax],al
    4cfc:	01 33                	add    DWORD PTR [ebx],esi
    4cfe:	a8 00                	test   al,0x0
    4d00:	00 00                	add    BYTE PTR [eax],al
    4d02:	02 91 04 08 7a 06    	add    dl,BYTE PTR [ecx+0x67a0804]
    4d08:	00 00                	add    BYTE PTR [eax],al
    4d0a:	01 33                	add    DWORD PTR [ebx],esi
    4d0c:	3a 00                	cmp    al,BYTE PTR [eax]
    4d0e:	00 00                	add    BYTE PTR [eax],al
    4d10:	02 91 08 09 61 00    	add    dl,BYTE PTR [ecx+0x610908]
    4d16:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4d1c:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4d1f:	62 00                	bound  eax,QWORD PTR [eax]
    4d21:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4d27:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    4d2a:	6c                   	ins    BYTE PTR es:[edi],dx
    4d2b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    4d2d:	00 01                	add    BYTE PTR [ecx],al
    4d2f:	3b 3a                	cmp    edi,DWORD PTR [edx]
    4d31:	00 00                	add    BYTE PTR [eax],al
    4d33:	00 02                	add    BYTE PTR [edx],al
    4d35:	91                   	xchg   ecx,eax
    4d36:	6c                   	ins    BYTE PTR es:[edi],dx
    4d37:	00 07                	add    BYTE PTR [edi],al
    4d39:	a3 0e 00 00 01       	mov    ds:0x100000e,eax
    4d3e:	57                   	push   edi
    4d3f:	a8 00                	test   al,0x0
    4d41:	00 00                	add    BYTE PTR [eax],al
    4d43:	c2 3a 00             	ret    0x3a
    4d46:	9f                   	lahf   
    4d47:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4d48:	00 00                	add    BYTE PTR [eax],al
    4d4a:	00 01                	add    BYTE PTR [ecx],al
    4d4c:	9c                   	pushf  
    4d4d:	62 01                	bound  eax,QWORD PTR [ecx]
    4d4f:	00 00                	add    BYTE PTR [eax],al
    4d51:	08 ca                	or     dl,cl
    4d53:	0e                   	push   cs
    4d54:	00 00                	add    BYTE PTR [eax],al
    4d56:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    4d59:	00 00                	add    BYTE PTR [eax],al
    4d5b:	00 02                	add    BYTE PTR [edx],al
    4d5d:	91                   	xchg   ecx,eax
    4d5e:	00 08                	add    BYTE PTR [eax],cl
    4d60:	c7                   	(bad)  
    4d61:	0e                   	push   cs
    4d62:	00 00                	add    BYTE PTR [eax],al
    4d64:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    4d67:	00 00                	add    BYTE PTR [eax],al
    4d69:	00 02                	add    BYTE PTR [edx],al
    4d6b:	91                   	xchg   ecx,eax
    4d6c:	04 09                	add    al,0x9
    4d6e:	61                   	popa   
    4d6f:	00 01                	add    BYTE PTR [ecx],al
    4d71:	59                   	pop    ecx
    4d72:	a8 00                	test   al,0x0
    4d74:	00 00                	add    BYTE PTR [eax],al
    4d76:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4d79:	62 00                	bound  eax,QWORD PTR [eax]
    4d7b:	01 59 a8             	add    DWORD PTR [ecx-0x58],ebx
    4d7e:	00 00                	add    BYTE PTR [eax],al
    4d80:	00 01                	add    BYTE PTR [ecx],al
    4d82:	53                   	push   ebx
    4d83:	00 0a                	add    BYTE PTR [edx],cl
    4d85:	d1 0e                	ror    DWORD PTR [esi],1
    4d87:	00 00                	add    BYTE PTR [eax],al
    4d89:	01 76 a8             	add    DWORD PTR [esi-0x58],esi
    4d8c:	00 00                	add    BYTE PTR [eax],al
    4d8e:	00 30                	add    BYTE PTR [eax],dh
    4d90:	3b 00                	cmp    eax,DWORD PTR [eax]
    4d92:	9f                   	lahf   
    4d93:	1d 00 00 00 01       	sbb    eax,0x1000000
    4d98:	9c                   	pushf  
    4d99:	98                   	cwde   
    4d9a:	01 00                	add    DWORD PTR [eax],eax
    4d9c:	00 08                	add    BYTE PTR [eax],cl
    4d9e:	ca 0e 00             	retf   0xe
    4da1:	00 01                	add    BYTE PTR [ecx],al
    4da3:	76 88                	jbe    4d2d <sysEnter_Vector-0x12b2d3>
    4da5:	00 00                	add    BYTE PTR [eax],al
    4da7:	00 02                	add    BYTE PTR [edx],al
    4da9:	91                   	xchg   ecx,eax
    4daa:	00 08                	add    BYTE PTR [eax],cl
    4dac:	c7                   	(bad)  
    4dad:	0e                   	push   cs
    4dae:	00 00                	add    BYTE PTR [eax],al
    4db0:	01 76 88             	add    DWORD PTR [esi-0x78],esi
    4db3:	00 00                	add    BYTE PTR [eax],al
    4db5:	00 02                	add    BYTE PTR [edx],al
    4db7:	91                   	xchg   ecx,eax
    4db8:	04 00                	add    al,0x0
    4dba:	0b 25 00 00 00 a8    	or     esp,DWORD PTR ds:0xa8000000
    4dc0:	01 00                	add    DWORD PTR [eax],eax
    4dc2:	00 0c 9a             	add    BYTE PTR [edx+ebx*4],cl
    4dc5:	00 00                	add    BYTE PTR [eax],al
    4dc7:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    4dca:	0d c1 0e 00 00       	or     eax,0xec1
    4dcf:	01 19                	add    DWORD PTR [ecx],ebx
    4dd1:	98                   	cwde   
    4dd2:	01 00                	add    DWORD PTR [eax],eax
    4dd4:	00 05 03 40 70 00    	add    BYTE PTR ds:0x704003,al
    4dda:	9f                   	lahf   
    4ddb:	0e                   	push   cs
    4ddc:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    4de1:	37                   	aaa    
    4de2:	56                   	push   esi
    4de3:	00 00                	add    BYTE PTR [eax],al
    4de5:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    4deb:	9f                   	lahf   
    4dec:	0e                   	push   cs
    4ded:	34 01                	xor    al,0x1
    4def:	00 00                	add    BYTE PTR [eax],al
    4df1:	03 38                	add    edi,DWORD PTR [eax]
    4df3:	56                   	push   esi
    4df4:	00 00                	add    BYTE PTR [eax],al
    4df6:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    4dfc:	9f                   	lahf   
    4dfd:	0e                   	push   cs
    4dfe:	7b 00                	jnp    4e00 <sysEnter_Vector-0x12b200>
    4e00:	00 00                	add    BYTE PTR [eax],al
    4e02:	03 39                	add    edi,DWORD PTR [ecx]
    4e04:	56                   	push   esi
    4e05:	00 00                	add    BYTE PTR [eax],al
    4e07:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    4e0d:	9f                   	lahf   
    4e0e:	0e                   	push   cs
    4e0f:	7c 01                	jl     4e12 <sysEnter_Vector-0x12b1ee>
    4e11:	00 00                	add    BYTE PTR [eax],al
    4e13:	03 3a                	add    edi,DWORD PTR [edx]
    4e15:	7a 00                	jp     4e17 <sysEnter_Vector-0x12b1e9>
    4e17:	00 00                	add    BYTE PTR [eax],al
    4e19:	05 03 d8 71 00       	add    eax,0x71d803
    4e1e:	9f                   	lahf   
    4e1f:	0e                   	push   cs
    4e20:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4e21:	00 00                	add    BYTE PTR [eax],al
    4e23:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    4e26:	0e                   	push   cs
    4e27:	02 00                	add    al,BYTE PTR [eax]
    4e29:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    4e2f:	9f                   	lahf   
    4e30:	05 04 6f 00 00       	add    eax,0x6f04
    4e35:	00 0e                	add    BYTE PTR [esi],cl
    4e37:	91                   	xchg   ecx,eax
    4e38:	00 00                	add    BYTE PTR [eax],al
    4e3a:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4e41:	05 03 c0 71 00       	add    eax,0x71c003
    4e46:	9f                   	lahf   
    4e47:	0e                   	push   cs
    4e48:	41                   	inc    ecx
    4e49:	00 00                	add    BYTE PTR [eax],al
    4e4b:	00 05 58 36 02 00    	add    BYTE PTR ds:0x23658,al
    4e51:	00 05 03 d4 71 00    	add    BYTE PTR ds:0x71d403,al
    4e57:	9f                   	lahf   
    4e58:	05 04 a8 00 00       	add    eax,0xa804
    4e5d:	00 00                	add    BYTE PTR [eax],al
    4e5f:	ef                   	out    dx,eax
    4e60:	05 00 00 04 00       	add    eax,0x40000
    4e65:	9b                   	fwait
    4e66:	17                   	pop    ss
    4e67:	00 00                	add    BYTE PTR [eax],al
    4e69:	04 01                	add    al,0x1
    4e6b:	ac                   	lods   al,BYTE PTR ds:[esi]
    4e6c:	00 00                	add    BYTE PTR [eax],al
    4e6e:	00 0c d8             	add    BYTE PTR [eax+ebx*8],cl
    4e71:	0e                   	push   cs
    4e72:	00 00                	add    BYTE PTR [eax],al
    4e74:	1e                   	push   ds
    4e75:	00 00                	add    BYTE PTR [eax],al
    4e77:	00 50 3b             	add    BYTE PTR [eax+0x3b],dl
    4e7a:	00 9f 0e 0d 00 00    	add    BYTE PTR [edi+0xd0e],bl
    4e80:	ed                   	in     eax,dx
    4e81:	1f                   	pop    ds
    4e82:	00 00                	add    BYTE PTR [eax],al
    4e84:	02 d1                	add    dl,cl
    4e86:	03 00                	add    eax,DWORD PTR [eax]
    4e88:	00 04 19             	add    BYTE PTR [ecx+ebx*1],al
    4e8b:	01 00                	add    DWORD PTR [eax],eax
    4e8d:	00 07                	add    BYTE PTR [edi],al
    4e8f:	15 19 01 00 00       	adc    eax,0x119
    4e94:	03 71 03             	add    esi,DWORD PTR [ecx+0x3]
    4e97:	00 00                	add    BYTE PTR [eax],al
    4e99:	00 03                	add    BYTE PTR [ebx],al
    4e9b:	dd 04 00             	fld    QWORD PTR [eax+eax*1]
    4e9e:	00 01                	add    BYTE PTR [ecx],al
    4ea0:	03 d6                	add    edx,esi
    4ea2:	02 00                	add    al,BYTE PTR [eax]
    4ea4:	00 02                	add    BYTE PTR [edx],al
    4ea6:	03 cf                	add    ecx,edi
    4ea8:	04 00                	add    al,0x0
    4eaa:	00 03                	add    BYTE PTR [ebx],al
    4eac:	03 08                	add    ecx,DWORD PTR [eax]
    4eae:	03 00                	add    eax,DWORD PTR [eax]
    4eb0:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4eb3:	f3 02 00             	repz add al,BYTE PTR [eax]
    4eb6:	00 05 03 64 03 00    	add    BYTE PTR ds:0x36403,al
    4ebc:	00 0a                	add    BYTE PTR [edx],cl
    4ebe:	03 45 04             	add    eax,DWORD PTR [ebp+0x4]
    4ec1:	00 00                	add    BYTE PTR [eax],al
    4ec3:	0b 03                	or     eax,DWORD PTR [ebx]
    4ec5:	81 03 00 00 0c 03    	add    DWORD PTR [ebx],0x30c0000
    4ecb:	b4 04                	mov    ah,0x4
    4ecd:	00 00                	add    BYTE PTR [eax],al
    4ecf:	0d 03 52 04 00       	or     eax,0x45203
    4ed4:	00 0e                	add    BYTE PTR [esi],cl
    4ed6:	03 a7 04 00 00 0f    	add    esp,DWORD PTR [edi+0xf000004]
    4edc:	03 3f                	add    edi,DWORD PTR [edi]
    4ede:	03 00                	add    eax,DWORD PTR [eax]
    4ee0:	00 10                	add    BYTE PTR [eax],dl
    4ee2:	03 5f 04             	add    ebx,DWORD PTR [edi+0x4]
    4ee5:	00 00                	add    BYTE PTR [eax],al
    4ee7:	4f                   	dec    edi
    4ee8:	03 f1                	add    esi,ecx
    4eea:	03 00                	add    eax,DWORD PTR [eax]
    4eec:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    4eef:	8a 04 00             	mov    al,BYTE PTR [eax+eax*1]
    4ef2:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    4ef5:	8b 02                	mov    eax,DWORD PTR [edx]
    4ef7:	00 00                	add    BYTE PTR [eax],al
    4ef9:	61                   	popa   
    4efa:	03 0e                	add    ecx,DWORD PTR [esi]
    4efc:	04 00                	add    al,0x0
    4efe:	00 97 04 a6 03 00    	add    BYTE PTR [edi+0x3a604],dl
    4f04:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    4f07:	04 7d                	add    al,0x7d
    4f09:	04 00                	add    al,0x0
    4f0b:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    4f0f:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    4f12:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    4f15:	04 af                	add    al,0xaf
    4f17:	02 00                	add    al,BYTE PTR [eax]
    4f19:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    4f1c:	04 2a                	add    al,0x2a
    4f1e:	03 00                	add    eax,DWORD PTR [eax]
    4f20:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    4f23:	04 1d                	add    al,0x1d
    4f25:	03 00                	add    eax,DWORD PTR [eax]
    4f27:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    4f2a:	04 f7                	add    al,0xf7
    4f2c:	04 00                	add    al,0x0
    4f2e:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    4f31:	04 9e                	add    al,0x9e
    4f33:	02 00                	add    al,BYTE PTR [eax]
    4f35:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4f38:	04 e3                	add    al,0xe3
    4f3a:	02 00                	add    al,BYTE PTR [eax]
    4f3c:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4f3f:	04 c1                	add    al,0xc1
    4f41:	04 00                	add    al,0x0
    4f43:	00 00                	add    BYTE PTR [eax],al
    4f45:	03 04 6e             	add    eax,DWORD PTR [esi+ebp*2]
    4f48:	04 00                	add    al,0x0
    4f4a:	00 01                	add    BYTE PTR [ecx],al
    4f4c:	03 04 bd 03 00 00 02 	add    eax,DWORD PTR [edi*4+0x2000003]
    4f53:	03 04 96             	add    eax,DWORD PTR [esi+edx*4]
    4f56:	03 00                	add    eax,DWORD PTR [eax]
    4f58:	00 03                	add    BYTE PTR [ebx],al
    4f5a:	03 04 34             	add    eax,DWORD PTR [esp+esi*1]
    4f5d:	04 00                	add    al,0x0
    4f5f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4f62:	04 97                	add    al,0x97
    4f64:	04 00                	add    al,0x0
    4f66:	00 05 03 04 e2 03    	add    BYTE PTR ds:0x3e20403,al
    4f6c:	00 00                	add    BYTE PTR [eax],al
    4f6e:	06                   	push   es
    4f6f:	03 04 52             	add    eax,DWORD PTR [edx+edx*2]
    4f72:	03 00                	add    eax,DWORD PTR [eax]
    4f74:	00 00                	add    BYTE PTR [eax],al
    4f76:	09 00                	or     DWORD PTR [eax],eax
    4f78:	05 04 07 61 00       	add    eax,0x610704
    4f7d:	00 00                	add    BYTE PTR [eax],al
    4f7f:	06                   	push   es
    4f80:	04 05                	add    al,0x5
    4f82:	69 6e 74 00 05 01 06 	imul   ebp,DWORD PTR [esi+0x74],0x6010500
    4f89:	8c 00                	mov    WORD PTR [eax],es
    4f8b:	00 00                	add    BYTE PTR [eax],al
    4f8d:	05 01 06 85 00       	add    eax,0x850601
    4f92:	00 00                	add    BYTE PTR [eax],al
    4f94:	05 02 05 72 01       	add    eax,0x1720502
    4f99:	00 00                	add    BYTE PTR [eax],al
    4f9b:	05 08 05 00 00       	add    eax,0x508
    4fa0:	00 00                	add    BYTE PTR [eax],al
    4fa2:	05 01 08 83 00       	add    eax,0x830801
    4fa7:	00 00                	add    BYTE PTR [eax],al
    4fa9:	05 02 07 19 01       	add    eax,0x1190702
    4fae:	00 00                	add    BYTE PTR [eax],al
    4fb0:	07                   	pop    es
    4fb1:	0e                   	push   cs
    4fb2:	00 00                	add    BYTE PTR [eax],al
    4fb4:	00 02                	add    BYTE PTR [edx],al
    4fb6:	34 19                	xor    al,0x19
    4fb8:	01 00                	add    DWORD PTR [eax],eax
    4fba:	00 05 08 07 57 00    	add    BYTE PTR ds:0x570708,al
    4fc0:	00 00                	add    BYTE PTR [eax],al
    4fc2:	07                   	pop    es
    4fc3:	4d                   	dec    ebp
    4fc4:	00 00                	add    BYTE PTR [eax],al
    4fc6:	00 02                	add    BYTE PTR [edx],al
    4fc8:	56                   	push   esi
    4fc9:	19 01                	sbb    DWORD PTR [ecx],eax
    4fcb:	00 00                	add    BYTE PTR [eax],al
    4fcd:	05 04 05 05 00       	add    eax,0x50504
    4fd2:	00 00                	add    BYTE PTR [eax],al
    4fd4:	05 0c 04 66 01       	add    eax,0x166040c
    4fd9:	00 00                	add    BYTE PTR [eax],al
    4fdb:	07                   	pop    es
    4fdc:	7a 0f                	jp     4fed <sysEnter_Vector-0x12b013>
    4fde:	00 00                	add    BYTE PTR [eax],al
    4fe0:	03 2a                	add    ebp,DWORD PTR [edx]
    4fe2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4fe3:	01 00                	add    DWORD PTR [eax],eax
    4fe5:	00 08                	add    BYTE PTR [eax],cl
    4fe7:	74 6d                	je     5056 <sysEnter_Vector-0x12afaa>
    4fe9:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    4fec:	2c 17                	sub    al,0x17
    4fee:	02 00                	add    al,BYTE PTR [eax]
    4ff0:	00 09                	add    BYTE PTR [ecx],cl
    4ff2:	bd 0f 00 00 03       	mov    ebp,0x300000f
    4ff7:	2e 20 01             	and    BYTE PTR cs:[ecx],al
    4ffa:	00 00                	add    BYTE PTR [eax],al
    4ffc:	00 09                	add    BYTE PTR [ecx],cl
    4ffe:	5b                   	pop    ebx
    4fff:	0f 00 00             	sldt   WORD PTR [eax]
    5002:	03 2f                	add    ebp,DWORD PTR [edi]
    5004:	20 01                	and    BYTE PTR [ecx],al
    5006:	00 00                	add    BYTE PTR [eax],al
    5008:	04 09                	add    al,0x9
    500a:	ed                   	in     eax,dx
    500b:	0e                   	push   cs
    500c:	00 00                	add    BYTE PTR [eax],al
    500e:	03 30                	add    esi,DWORD PTR [eax]
    5010:	20 01                	and    BYTE PTR [ecx],al
    5012:	00 00                	add    BYTE PTR [eax],al
    5014:	08 09                	or     BYTE PTR [ecx],cl
    5016:	b5 0f                	mov    ch,0xf
    5018:	00 00                	add    BYTE PTR [eax],al
    501a:	03 31                	add    esi,DWORD PTR [ecx]
    501c:	20 01                	and    BYTE PTR [ecx],al
    501e:	00 00                	add    BYTE PTR [eax],al
    5020:	0c 09                	or     al,0x9
    5022:	25 0f 00 00 03       	and    eax,0x300000f
    5027:	32 20                	xor    ah,BYTE PTR [eax]
    5029:	01 00                	add    DWORD PTR [eax],eax
    502b:	00 10                	add    BYTE PTR [eax],dl
    502d:	09 2c 0f             	or     DWORD PTR [edi+ecx*1],ebp
    5030:	00 00                	add    BYTE PTR [eax],al
    5032:	03 33                	add    esi,DWORD PTR [ebx]
    5034:	20 01                	and    BYTE PTR [ecx],al
    5036:	00 00                	add    BYTE PTR [eax],al
    5038:	14 09                	adc    al,0x9
    503a:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    503b:	0f 00 00             	sldt   WORD PTR [eax]
    503e:	03 34 20             	add    esi,DWORD PTR [eax+eiz*1]
    5041:	01 00                	add    DWORD PTR [eax],eax
    5043:	00 18                	add    BYTE PTR [eax],bl
    5045:	09 62 0f             	or     DWORD PTR [edx+0xf],esp
    5048:	00 00                	add    BYTE PTR [eax],al
    504a:	03 35 20 01 00 00    	add    esi,DWORD PTR ds:0x120
    5050:	1c 09                	sbb    al,0x9
    5052:	42                   	inc    edx
    5053:	0f 00 00             	sldt   WORD PTR [eax]
    5056:	03 36                	add    esi,DWORD PTR [esi]
    5058:	20 01                	and    BYTE PTR [ecx],al
    505a:	00 00                	add    BYTE PTR [eax],al
    505c:	20 09                	and    BYTE PTR [ecx],cl
    505e:	9d                   	popf   
    505f:	0f 00 00             	sldt   WORD PTR [eax]
    5062:	03 37                	add    esi,DWORD PTR [edi]
    5064:	6e                   	outs   dx,BYTE PTR ds:[esi]
    5065:	01 00                	add    DWORD PTR [eax],eax
    5067:	00 24 09             	add    BYTE PTR [ecx+ecx*1],ah
    506a:	c4 0f                	les    ecx,FWORD PTR [edi]
    506c:	00 00                	add    BYTE PTR [eax],al
    506e:	03 38                	add    edi,DWORD PTR [eax]
    5070:	17                   	pop    ss
    5071:	02 00                	add    al,BYTE PTR [eax]
    5073:	00 28                	add    BYTE PTR [eax],ch
    5075:	00 0a                	add    BYTE PTR [edx],cl
    5077:	04 1d                	add    al,0x1d
    5079:	02 00                	add    al,BYTE PTR [eax]
    507b:	00 0b                	add    BYTE PTR [ebx],cl
    507d:	27                   	daa    
    507e:	01 00                	add    DWORD PTR [eax],eax
    5080:	00 05 01 02 13 01    	add    BYTE PTR ds:0x1130201,al
    5086:	00 00                	add    BYTE PTR [eax],al
    5088:	05 04 07 83 01       	add    eax,0x1830704
    508d:	00 00                	add    BYTE PTR [eax],al
    508f:	05 04 07 5c 00       	add    eax,0x5c0704
    5094:	00 00                	add    BYTE PTR [eax],al
    5096:	0a 04 27             	or     al,BYTE PTR [edi+eiz*1]
    5099:	01 00                	add    DWORD PTR [eax],eax
    509b:	00 0c f5 0e 00 00 01 	add    BYTE PTR [esi*8+0x100000e],cl
    50a2:	17                   	pop    ss
    50a3:	7c 01                	jl     50a6 <sysEnter_Vector-0x12af5a>
    50a5:	00 00                	add    BYTE PTR [eax],al
    50a7:	50                   	push   eax
    50a8:	3b 00                	cmp    eax,DWORD PTR [eax]
    50aa:	9f                   	lahf   
    50ab:	44                   	inc    esp
    50ac:	00 00                	add    BYTE PTR [eax],al
    50ae:	00 01                	add    BYTE PTR [ecx],al
    50b0:	9c                   	pushf  
    50b1:	65 02 00             	add    al,BYTE PTR gs:[eax]
    50b4:	00 0d 06 05 00 00    	add    BYTE PTR ds:0x506,cl
    50ba:	01 19                	add    DWORD PTR [ecx],ebx
    50bc:	51                   	push   ecx
    50bd:	01 00                	add    DWORD PTR [eax],eax
    50bf:	00 02                	add    BYTE PTR [edx],al
    50c1:	91                   	xchg   ecx,eax
    50c2:	6c                   	ins    BYTE PTR es:[edi],dx
    50c3:	00 0e                	add    BYTE PTR [esi],cl
    50c5:	51                   	push   ecx
    50c6:	0f 00 00             	sldt   WORD PTR [eax]
    50c9:	01 1f                	add    DWORD PTR [edi],ebx
    50cb:	d3 02                	rol    DWORD PTR [edx],cl
    50cd:	00 00                	add    BYTE PTR [eax],al
    50cf:	94                   	xchg   esp,eax
    50d0:	3b 00                	cmp    eax,DWORD PTR [eax]
    50d2:	9f                   	lahf   
    50d3:	19 03                	sbb    DWORD PTR [ebx],eax
    50d5:	00 00                	add    BYTE PTR [eax],al
    50d7:	01 9c d3 02 00 00 0f 	add    DWORD PTR [ebx+edx*8+0xf000002],ebx
    50de:	cc                   	int3   
    50df:	0f 00 00             	sldt   WORD PTR [eax]
    50e2:	01 1f                	add    DWORD PTR [edi],ebx
    50e4:	d9 02                	fld    DWORD PTR [edx]
    50e6:	00 00                	add    BYTE PTR [eax],al
    50e8:	02 91 00 0f 74 0f    	add    dl,BYTE PTR [ecx+0xf740f00]
    50ee:	00 00                	add    BYTE PTR [eax],al
    50f0:	01 1f                	add    DWORD PTR [edi],ebx
    50f2:	d3 02                	rol    DWORD PTR [edx],cl
    50f4:	00 00                	add    BYTE PTR [eax],al
    50f6:	02 91 04 0d 42 05    	add    dl,BYTE PTR [ecx+0x5420d04]
    50fc:	00 00                	add    BYTE PTR [eax],al
    50fe:	01 21                	add    DWORD PTR [ecx],esp
    5100:	7c 01                	jl     5103 <sysEnter_Vector-0x12aefd>
    5102:	00 00                	add    BYTE PTR [eax],al
    5104:	02 91 68 0d 8d 0f    	add    dl,BYTE PTR [ecx+0xf8d0d68]
    510a:	00 00                	add    BYTE PTR [eax],al
    510c:	01 22                	add    DWORD PTR [edx],esp
    510e:	30 02                	xor    BYTE PTR [edx],al
    5110:	00 00                	add    BYTE PTR [eax],al
    5112:	02 91 64 0d 4b 0f    	add    dl,BYTE PTR [ecx+0xf4b0d64]
    5118:	00 00                	add    BYTE PTR [eax],al
    511a:	01 22                	add    DWORD PTR [edx],esp
    511c:	30 02                	xor    BYTE PTR [edx],al
    511e:	00 00                	add    BYTE PTR [eax],al
    5120:	02 91 70 0d 2f 0f    	add    dl,BYTE PTR [ecx+0xf2f0d70]
    5126:	00 00                	add    BYTE PTR [eax],al
    5128:	01 23                	add    DWORD PTR [ebx],esp
    512a:	20 01                	and    BYTE PTR [ecx],al
    512c:	00 00                	add    BYTE PTR [eax],al
    512e:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    5134:	87 01                	xchg   DWORD PTR [ecx],eax
    5136:	00 00                	add    BYTE PTR [eax],al
    5138:	0a 04 df             	or     al,BYTE PTR [edi+ebx*8]
    513b:	02 00                	add    al,BYTE PTR [eax]
    513d:	00 0b                	add    BYTE PTR [ebx],cl
    513f:	7c 01                	jl     5142 <sysEnter_Vector-0x12aebe>
    5141:	00 00                	add    BYTE PTR [eax],al
    5143:	10 10                	adc    BYTE PTR [eax],dl
    5145:	0f 00 00             	sldt   WORD PTR [eax]
    5148:	01 3c d3             	add    DWORD PTR [ebx+edx*8],edi
    514b:	02 00                	add    al,BYTE PTR [eax]
    514d:	00 ad 3e 00 9f 1d    	add    BYTE PTR [ebp+0x1d9f003e],ch
    5153:	00 00                	add    BYTE PTR [eax],al
    5155:	00 01                	add    BYTE PTR [ecx],al
    5157:	9c                   	pushf  
    5158:	1a 03                	sbb    al,BYTE PTR [ebx]
    515a:	00 00                	add    BYTE PTR [eax],al
    515c:	0f cc                	bswap  esp
    515e:	0f 00 00             	sldt   WORD PTR [eax]
    5161:	01 3c d9             	add    DWORD PTR [ecx+ebx*8],edi
    5164:	02 00                	add    al,BYTE PTR [eax]
    5166:	00 02                	add    BYTE PTR [edx],al
    5168:	91                   	xchg   ecx,eax
    5169:	00 0f                	add    BYTE PTR [edi],cl
    516b:	74 0f                	je     517c <sysEnter_Vector-0x12ae84>
    516d:	00 00                	add    BYTE PTR [eax],al
    516f:	01 3c d3             	add    DWORD PTR [ebx+edx*8],edi
    5172:	02 00                	add    al,BYTE PTR [eax]
    5174:	00 02                	add    BYTE PTR [edx],al
    5176:	91                   	xchg   ecx,eax
    5177:	04 00                	add    al,0x0
    5179:	10 e3                	adc    bl,ah
    517b:	0e                   	push   cs
    517c:	00 00                	add    BYTE PTR [eax],al
    517e:	01 41 d3             	add    DWORD PTR [ecx-0x2d],eax
    5181:	02 00                	add    al,BYTE PTR [eax]
    5183:	00 ca                	add    dl,cl
    5185:	3e 00 9f 3d 00 00 00 	add    BYTE PTR ds:[edi+0x3d],bl
    518c:	01 9c 4e 03 00 00 0f 	add    DWORD PTR [esi+ecx*2+0xf000003],ebx
    5193:	cc                   	int3   
    5194:	0f 00 00             	sldt   WORD PTR [eax]
    5197:	01 41 d9             	add    DWORD PTR [ecx-0x27],eax
    519a:	02 00                	add    al,BYTE PTR [eax]
    519c:	00 02                	add    BYTE PTR [edx],al
    519e:	91                   	xchg   ecx,eax
    519f:	00 11                	add    BYTE PTR [ecx],dl
    51a1:	74 00                	je     51a3 <sysEnter_Vector-0x12ae5d>
    51a3:	01 42 7c             	add    DWORD PTR [edx+0x7c],eax
    51a6:	01 00                	add    DWORD PTR [eax],eax
    51a8:	00 02                	add    BYTE PTR [edx],al
    51aa:	91                   	xchg   ecx,eax
    51ab:	74 00                	je     51ad <sysEnter_Vector-0x12ae53>
    51ad:	10 d2                	adc    dl,dl
    51af:	0f 00 00             	sldt   WORD PTR [eax]
    51b2:	01 48 d3             	add    DWORD PTR [eax-0x2d],ecx
    51b5:	02 00                	add    al,BYTE PTR [eax]
    51b7:	00 07                	add    BYTE PTR [edi],al
    51b9:	3f                   	aas    
    51ba:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    51c0:	01 9c 90 03 00 00 0f 	add    DWORD PTR [eax+edx*4+0xf000003],ebx
    51c7:	cc                   	int3   
    51c8:	0f 00 00             	sldt   WORD PTR [eax]
    51cb:	01 48 d9             	add    DWORD PTR [eax-0x27],ecx
    51ce:	02 00                	add    al,BYTE PTR [eax]
    51d0:	00 02                	add    BYTE PTR [edx],al
    51d2:	91                   	xchg   ecx,eax
    51d3:	00 0f                	add    BYTE PTR [edi],cl
    51d5:	74 0f                	je     51e6 <sysEnter_Vector-0x12ae1a>
    51d7:	00 00                	add    BYTE PTR [eax],al
    51d9:	01 48 d3             	add    DWORD PTR [eax-0x2d],ecx
    51dc:	02 00                	add    al,BYTE PTR [eax]
    51de:	00 02                	add    BYTE PTR [edx],al
    51e0:	91                   	xchg   ecx,eax
    51e1:	04 11                	add    al,0x11
    51e3:	74 00                	je     51e5 <sysEnter_Vector-0x12ae1b>
    51e5:	01 4a 7c             	add    DWORD PTR [edx+0x7c],ecx
    51e8:	01 00                	add    DWORD PTR [eax],eax
    51ea:	00 02                	add    BYTE PTR [edx],al
    51ec:	91                   	xchg   ecx,eax
    51ed:	74 00                	je     51ef <sysEnter_Vector-0x12ae11>
    51ef:	10 81 0f 00 00 01    	adc    BYTE PTR [ecx+0x100000f],al
    51f5:	50                   	push   eax
    51f6:	d3 02                	rol    DWORD PTR [edx],cl
    51f8:	00 00                	add    BYTE PTR [eax],al
    51fa:	3c 3f                	cmp    al,0x3f
    51fc:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    5202:	01 9c c6 03 00 00 0f 	add    DWORD PTR [esi+eax*8+0xf000003],ebx
    5209:	cc                   	int3   
    520a:	0f 00 00             	sldt   WORD PTR [eax]
    520d:	01 50 d9             	add    DWORD PTR [eax-0x27],edx
    5210:	02 00                	add    al,BYTE PTR [eax]
    5212:	00 02                	add    BYTE PTR [edx],al
    5214:	91                   	xchg   ecx,eax
    5215:	00 0f                	add    BYTE PTR [edi],cl
    5217:	74 0f                	je     5228 <sysEnter_Vector-0x12add8>
    5219:	00 00                	add    BYTE PTR [eax],al
    521b:	01 50 d3             	add    DWORD PTR [eax-0x2d],edx
    521e:	02 00                	add    al,BYTE PTR [eax]
    5220:	00 02                	add    BYTE PTR [edx],al
    5222:	91                   	xchg   ecx,eax
    5223:	04 00                	add    al,0x0
    5225:	0e                   	push   cs
    5226:	96                   	xchg   esi,eax
    5227:	0f 00 00             	sldt   WORD PTR [eax]
    522a:	01 54 7c 01          	add    DWORD PTR [esp+edi*2+0x1],edx
    522e:	00 00                	add    BYTE PTR [eax],al
    5230:	59                   	pop    ecx
    5231:	3f                   	aas    
    5232:	00 9f 57 08 00 00    	add    BYTE PTR [edi+0x857],bl
    5238:	01 9c 5e 04 00 00 0f 	add    DWORD PTR [esi+ebx*2+0xf000004],ebx
    523f:	74 0f                	je     5250 <sysEnter_Vector-0x12adb0>
    5241:	00 00                	add    BYTE PTR [eax],al
    5243:	01 54 d3 02          	add    DWORD PTR [ebx+edx*8+0x2],edx
    5247:	00 00                	add    BYTE PTR [eax],al
    5249:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    524f:	79 00                	jns    5251 <sysEnter_Vector-0x12adaf>
    5251:	01 55 6e             	add    DWORD PTR [ebp+0x6e],edx
    5254:	01 00                	add    DWORD PTR [eax],eax
    5256:	00 02                	add    BYTE PTR [edx],al
    5258:	91                   	xchg   ecx,eax
    5259:	68 0d 2f 0f 00       	push   0xf2f0d
    525e:	00 01                	add    BYTE PTR [ecx],al
    5260:	55                   	push   ebp
    5261:	6e                   	outs   dx,BYTE PTR ds:[esi]
    5262:	01 00                	add    DWORD PTR [eax],eax
    5264:	00 02                	add    BYTE PTR [edx],al
    5266:	91                   	xchg   ecx,eax
    5267:	54                   	push   esp
    5268:	0d 2c 0f 00 00       	or     eax,0xf2c
    526d:	01 56 20             	add    DWORD PTR [esi+0x20],edx
    5270:	01 00                	add    DWORD PTR [eax],eax
    5272:	00 02                	add    BYTE PTR [edx],al
    5274:	91                   	xchg   ecx,eax
    5275:	4c                   	dec    esp
    5276:	0d 65 0f 00 00       	or     eax,0xf65
    527b:	01 57 20             	add    DWORD PTR [edi+0x20],edx
    527e:	01 00                	add    DWORD PTR [eax],eax
    5280:	00 02                	add    BYTE PTR [edx],al
    5282:	91                   	xchg   ecx,eax
    5283:	64                   	fs
    5284:	0d 34 0f 00 00       	or     eax,0xf34
    5289:	01 57 20             	add    DWORD PTR [edi+0x20],edx
    528c:	01 00                	add    DWORD PTR [eax],eax
    528e:	00 02                	add    BYTE PTR [edx],al
    5290:	91                   	xchg   ecx,eax
    5291:	60                   	pusha  
    5292:	0d 08 09 00 00       	or     eax,0x908
    5297:	01 58 6e             	add    DWORD PTR [eax+0x6e],ebx
    529a:	01 00                	add    DWORD PTR [eax],eax
    529c:	00 02                	add    BYTE PTR [edx],al
    529e:	91                   	xchg   ecx,eax
    529f:	50                   	push   eax
    52a0:	0d ef 0f 00 00       	or     eax,0xfef
    52a5:	01 59 20             	add    DWORD PTR [ecx+0x20],ebx
    52a8:	01 00                	add    DWORD PTR [eax],eax
    52aa:	00 02                	add    BYTE PTR [edx],al
    52ac:	91                   	xchg   ecx,eax
    52ad:	5c                   	pop    esp
    52ae:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    52b2:	00 01                	add    BYTE PTR [ecx],al
    52b4:	5a                   	pop    edx
    52b5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    52b6:	01 00                	add    DWORD PTR [eax],eax
    52b8:	00 02                	add    BYTE PTR [edx],al
    52ba:	91                   	xchg   ecx,eax
    52bb:	58                   	pop    eax
    52bc:	00 10                	add    BYTE PTR [eax],dl
    52be:	3a 0f                	cmp    cl,BYTE PTR [edi]
    52c0:	00 00                	add    BYTE PTR [eax],al
    52c2:	01 bf d3 02 00 00    	add    DWORD PTR [edi+0x2d3],edi
    52c8:	b0 47                	mov    al,0x47
    52ca:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    52d0:	01 9c a2 04 00 00 0f 	add    DWORD PTR [edx+eiz*4+0xf000004],ebx
    52d7:	42                   	inc    edx
    52d8:	05 00 00 01 bf       	add    eax,0xbf010000
    52dd:	d3 02                	rol    DWORD PTR [edx],cl
    52df:	00 00                	add    BYTE PTR [eax],al
    52e1:	02 91 00 0f 6a 0f    	add    dl,BYTE PTR [ecx+0xf6a0f00]
    52e7:	00 00                	add    BYTE PTR [eax],al
    52e9:	01 bf 22 02 00 00    	add    DWORD PTR [edi+0x222],edi
    52ef:	02 91 5c 0d f8 0e    	add    dl,BYTE PTR [ecx+0xef80d5c]
    52f5:	00 00                	add    BYTE PTR [eax],al
    52f7:	01 c1                	add    ecx,eax
    52f9:	7c 01                	jl     52fc <sysEnter_Vector-0x12ad04>
    52fb:	00 00                	add    BYTE PTR [eax],al
    52fd:	02 91 6c 00 10 42    	add    dl,BYTE PTR [ecx+0x4210006c]
    5303:	05 00 00 01 ca       	add    eax,0xca010000
    5308:	7c 01                	jl     530b <sysEnter_Vector-0x12acf5>
    530a:	00 00                	add    BYTE PTR [eax],al
    530c:	1d 48 00 9f 41       	sbb    eax,0x419f0048
    5311:	00 00                	add    BYTE PTR [eax],al
    5313:	00 01                	add    BYTE PTR [ecx],al
    5315:	9c                   	pushf  
    5316:	d8 04 00             	fadd   DWORD PTR [eax+eax*1]
    5319:	00 0f                	add    BYTE PTR [edi],cl
    531b:	e8 0f 00 00 01       	call   100532f <sysEnter_Vector+0xed532f>
    5320:	ca d8 04             	retf   0x4d8
    5323:	00 00                	add    BYTE PTR [eax],al
    5325:	02 91 00 0d f8 0e    	add    dl,BYTE PTR [ecx+0xef80d00]
    532b:	00 00                	add    BYTE PTR [eax],al
    532d:	01 cc                	add    esp,ecx
    532f:	51                   	push   ecx
    5330:	01 00                	add    DWORD PTR [eax],eax
    5332:	00 02                	add    BYTE PTR [edx],al
    5334:	91                   	xchg   ecx,eax
    5335:	6c                   	ins    BYTE PTR es:[edi],dx
    5336:	00 0a                	add    BYTE PTR [edx],cl
    5338:	04 7c                	add    al,0x7c
    533a:	01 00                	add    DWORD PTR [eax],eax
    533c:	00 12                	add    BYTE PTR [edx],dl
    533e:	a3 00 00 00 04       	mov    ds:0x4000000,eax
    5343:	37                   	aaa    
    5344:	51                   	push   ecx
    5345:	01 00                	add    DWORD PTR [eax],eax
    5347:	00 05 03 cc 71 00    	add    BYTE PTR ds:0x71cc03,al
    534d:	9f                   	lahf   
    534e:	12 34 01             	adc    dh,BYTE PTR [ecx+eax*1]
    5351:	00 00                	add    BYTE PTR [eax],al
    5353:	04 38                	add    al,0x38
    5355:	51                   	push   ecx
    5356:	01 00                	add    DWORD PTR [eax],eax
    5358:	00 05 03 d0 71 00    	add    BYTE PTR ds:0x71d003,al
    535e:	9f                   	lahf   
    535f:	12 7b 00             	adc    bh,BYTE PTR [ebx+0x0]
    5362:	00 00                	add    BYTE PTR [eax],al
    5364:	04 39                	add    al,0x39
    5366:	51                   	push   ecx
    5367:	01 00                	add    DWORD PTR [eax],eax
    5369:	00 05 03 c8 71 00    	add    BYTE PTR ds:0x71c803,al
    536f:	9f                   	lahf   
    5370:	12 7c 01 00          	adc    bh,BYTE PTR [ecx+eax*1+0x0]
    5374:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    5377:	6e                   	outs   dx,BYTE PTR ds:[esi]
    5378:	01 00                	add    DWORD PTR [eax],eax
    537a:	00 05 03 d8 71 00    	add    BYTE PTR ds:0x71d803,al
    5380:	9f                   	lahf   
    5381:	12 6e 00             	adc    ch,BYTE PTR [esi+0x0]
    5384:	00 00                	add    BYTE PTR [eax],al
    5386:	05 34 33 05 00       	add    eax,0x53334
    538b:	00 05 03 c4 71 00    	add    BYTE PTR ds:0x71c403,al
    5391:	9f                   	lahf   
    5392:	0a 04 63             	or     al,BYTE PTR [ebx+eiz*2]
    5395:	01 00                	add    DWORD PTR [eax],eax
    5397:	00 12                	add    BYTE PTR [edx],dl
    5399:	91                   	xchg   ecx,eax
    539a:	00 00                	add    BYTE PTR [eax],al
    539c:	00 05 35 51 01 00    	add    BYTE PTR ds:0x15135,al
    53a2:	00 05 03 c0 71 00    	add    BYTE PTR ds:0x71c003,al
    53a8:	9f                   	lahf   
    53a9:	12 41 00             	adc    al,BYTE PTR [ecx+0x0]
    53ac:	00 00                	add    BYTE PTR [eax],al
    53ae:	06                   	push   es
    53af:	58                   	pop    eax
    53b0:	5b                   	pop    ebx
    53b1:	05 00 00 05 03       	add    eax,0x3050000
    53b6:	d4 71                	aam    0x71
    53b8:	00 9f 0a 04 37 02    	add    BYTE PTR [edi+0x237040a],bl
    53be:	00 00                	add    BYTE PTR [eax],al
    53c0:	12 fe                	adc    bh,dh
    53c2:	0e                   	push   cs
    53c3:	00 00                	add    BYTE PTR [eax],al
    53c5:	01 0c 20             	add    DWORD PTR [eax+eiz*1],ecx
    53c8:	01 00                	add    DWORD PTR [eax],eax
    53ca:	00 05 03 a8 70 00    	add    BYTE PTR ds:0x70a803,al
    53d0:	9f                   	lahf   
    53d1:	12 df                	adc    bl,bh
    53d3:	0f 00 00             	sldt   WORD PTR [eax]
    53d6:	01 0d 6e 01 00 00    	add    DWORD PTR ds:0x16e,ecx
    53dc:	05 03 18 72 00       	add    eax,0x721803
    53e1:	9f                   	lahf   
    53e2:	13 37                	adc    esi,DWORD PTR [edi]
    53e4:	02 00                	add    al,BYTE PTR [eax]
    53e6:	00 93 05 00 00 14    	add    BYTE PTR [ebx+0x14000005],dl
    53ec:	29 02                	sub    DWORD PTR [edx],eax
    53ee:	00 00                	add    BYTE PTR [eax],al
    53f0:	01 00                	add    DWORD PTR [eax],eax
    53f2:	12 08                	adc    cl,BYTE PTR [eax]
    53f4:	0f 00 00             	sldt   WORD PTR [eax]
    53f7:	01 0e                	add    DWORD PTR [esi],ecx
    53f9:	83 05 00 00 05 03 b8 	add    DWORD PTR ds:0x3050000,0xffffffb8
    5400:	71 00                	jno    5402 <sysEnter_Vector-0x12abfe>
    5402:	9f                   	lahf   
    5403:	12 19                	adc    bl,BYTE PTR [ecx]
    5405:	0f 00 00             	sldt   WORD PTR [eax]
    5408:	01 0f                	add    DWORD PTR [edi],ecx
    540a:	20 01                	and    BYTE PTR [ecx],al
    540c:	00 00                	add    BYTE PTR [eax],al
    540e:	05 03 20 72 00       	add    eax,0x722003
    5413:	9f                   	lahf   
    5414:	12 74 0f 00          	adc    dh,BYTE PTR [edi+ecx*1+0x0]
    5418:	00 01                	add    BYTE PTR [ecx],al
    541a:	10 87 01 00 00 05    	adc    BYTE PTR [edi+0x5000001],al
    5420:	03 40 72             	add    eax,DWORD PTR [eax+0x72]
    5423:	00 9f 13 20 01 00    	add    BYTE PTR [edi+0x12013],bl
    5429:	00 dc                	add    ah,bl
    542b:	05 00 00 14 29       	add    eax,0x29140000
    5430:	02 00                	add    al,BYTE PTR [eax]
    5432:	00 01                	add    BYTE PTR [ecx],al
    5434:	14 29                	adc    al,0x29
    5436:	02 00                	add    al,BYTE PTR [eax]
    5438:	00 0b                	add    BYTE PTR [ebx],cl
    543a:	00 12                	add    BYTE PTR [edx],dl
    543c:	af                   	scas   eax,DWORD PTR es:[edi]
    543d:	0f 00 00             	sldt   WORD PTR [eax]
    5440:	01 12                	add    DWORD PTR [edx],edx
    5442:	ed                   	in     eax,dx
    5443:	05 00 00 05 03       	add    eax,0x3050000
    5448:	a0 6e 00 9f 0b       	mov    al,ds:0xb9f006e
    544d:	c6                   	.byte 0xc6
    544e:	05                   	.byte 0x5
    544f:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 11                	sbb    DWORD PTR [ecx],edx
     2c1:	01 12                	add    DWORD PTR [edx],edx
     2c3:	06                   	push   es
     2c4:	40                   	inc    eax
     2c5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cb:	00 00                	add    BYTE PTR [eax],al
     2cd:	07                   	pop    es
     2ce:	05 00 03 08 3a       	add    eax,0x3a080300
     2d3:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2d8:	02 18                	add    bl,BYTE PTR [eax]
     2da:	00 00                	add    BYTE PTR [eax],al
     2dc:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2df:	03 08                	add    ecx,DWORD PTR [eax]
     2e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2e5:	49                   	dec    ecx
     2e6:	13 02                	adc    eax,DWORD PTR [edx]
     2e8:	18 00                	sbb    BYTE PTR [eax],al
     2ea:	00 09                	add    BYTE PTR [ecx],cl
     2ec:	34 00                	xor    al,0x0
     2ee:	03 0e                	add    ecx,DWORD PTR [esi]
     2f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f4:	49                   	dec    ecx
     2f5:	13 02                	adc    eax,DWORD PTR [edx]
     2f7:	18 00                	sbb    BYTE PTR [eax],al
     2f9:	00 0a                	add    BYTE PTR [edx],cl
     2fb:	01 01                	add    DWORD PTR [ecx],eax
     2fd:	49                   	dec    ecx
     2fe:	13 01                	adc    eax,DWORD PTR [ecx]
     300:	13 00                	adc    eax,DWORD PTR [eax]
     302:	00 0b                	add    BYTE PTR [ebx],cl
     304:	21 00                	and    DWORD PTR [eax],eax
     306:	49                   	dec    ecx
     307:	13 2f                	adc    ebp,DWORD PTR [edi]
     309:	0b 00                	or     eax,DWORD PTR [eax]
     30b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     30e:	01 3f                	add    DWORD PTR [edi],edi
     310:	19 03                	sbb    DWORD PTR [ebx],eax
     312:	0e                   	push   cs
     313:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     315:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     317:	11 01                	adc    DWORD PTR [ecx],eax
     319:	12 06                	adc    al,BYTE PTR [esi]
     31b:	40                   	inc    eax
     31c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	0d 34 00 03 0e       	or     eax,0xe030034
     329:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     32b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     32d:	49                   	dec    ecx
     32e:	13 3f                	adc    edi,DWORD PTR [edi]
     330:	19 02                	sbb    DWORD PTR [edx],eax
     332:	18 00                	sbb    BYTE PTR [eax],al
     334:	00 0e                	add    BYTE PTR [esi],cl
     336:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	00 01                	add    BYTE PTR [ecx],al
     33e:	11 01                	adc    DWORD PTR [ecx],eax
     340:	25 0e 13 0b 03       	and    eax,0x30b130e
     345:	0e                   	push   cs
     346:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     348:	11 01                	adc    DWORD PTR [ecx],eax
     34a:	12 06                	adc    al,BYTE PTR [esi]
     34c:	10 17                	adc    BYTE PTR [edi],dl
     34e:	00 00                	add    BYTE PTR [eax],al
     350:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     353:	0b 0b                	or     ecx,DWORD PTR [ebx]
     355:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     358:	0e                   	push   cs
     359:	00 00                	add    BYTE PTR [eax],al
     35b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     360:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     363:	08 00                	or     BYTE PTR [eax],al
     365:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     368:	00 03                	add    BYTE PTR [ebx],al
     36a:	0e                   	push   cs
     36b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36f:	49                   	dec    ecx
     370:	13 00                	adc    eax,DWORD PTR [eax]
     372:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     378:	0b 0b                	or     ecx,DWORD PTR [ebx]
     37a:	49                   	dec    ecx
     37b:	13 3a                	adc    edi,DWORD PTR [edx]
     37d:	0b 3b                	or     edi,DWORD PTR [ebx]
     37f:	0b 01                	or     eax,DWORD PTR [ecx]
     381:	13 00                	adc    eax,DWORD PTR [eax]
     383:	00 06                	add    BYTE PTR [esi],al
     385:	28 00                	sub    BYTE PTR [eax],al
     387:	03 0e                	add    ecx,DWORD PTR [esi]
     389:	1c 0b                	sbb    al,0xb
     38b:	00 00                	add    BYTE PTR [eax],al
     38d:	07                   	pop    es
     38e:	28 00                	sub    BYTE PTR [eax],al
     390:	03 0e                	add    ecx,DWORD PTR [esi]
     392:	1c 05                	sbb    al,0x5
     394:	00 00                	add    BYTE PTR [eax],al
     396:	08 0f                	or     BYTE PTR [edi],cl
     398:	00 0b                	add    BYTE PTR [ebx],cl
     39a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     39d:	00 00                	add    BYTE PTR [eax],al
     39f:	09 2e                	or     DWORD PTR [esi],ebp
     3a1:	01 3f                	add    DWORD PTR [edi],edi
     3a3:	19 03                	sbb    DWORD PTR [ebx],eax
     3a5:	0e                   	push   cs
     3a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3aa:	27                   	daa    
     3ab:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3ae:	11 01                	adc    DWORD PTR [ecx],eax
     3b0:	12 06                	adc    al,BYTE PTR [esi]
     3b2:	40                   	inc    eax
     3b3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3b9:	00 00                	add    BYTE PTR [eax],al
     3bb:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     3c1:	0b 3b                	or     edi,DWORD PTR [ebx]
     3c3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3c6:	02 18                	add    bl,BYTE PTR [eax]
     3c8:	00 00                	add    BYTE PTR [eax],al
     3ca:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3cc:	01 11                	add    DWORD PTR [ecx],edx
     3ce:	01 12                	add    DWORD PTR [edx],edx
     3d0:	06                   	push   es
     3d1:	00 00                	add    BYTE PTR [eax],al
     3d3:	0c 34                	or     al,0x34
     3d5:	00 03                	add    BYTE PTR [ebx],al
     3d7:	08 3a                	or     BYTE PTR [edx],bh
     3d9:	0b 3b                	or     edi,DWORD PTR [ebx]
     3db:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3de:	02 18                	add    bl,BYTE PTR [eax]
     3e0:	00 00                	add    BYTE PTR [eax],al
     3e2:	0d 2e 01 3f 19       	or     eax,0x193f012e
     3e7:	03 0e                	add    ecx,DWORD PTR [esi]
     3e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ed:	27                   	daa    
     3ee:	19 11                	sbb    DWORD PTR [ecx],edx
     3f0:	01 12                	add    DWORD PTR [edx],edx
     3f2:	06                   	push   es
     3f3:	40                   	inc    eax
     3f4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3fa:	00 00                	add    BYTE PTR [eax],al
     3fc:	0e                   	push   cs
     3fd:	34 00                	xor    al,0x0
     3ff:	03 0e                	add    ecx,DWORD PTR [esi]
     401:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     403:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     405:	49                   	dec    ecx
     406:	13 02                	adc    eax,DWORD PTR [edx]
     408:	18 00                	sbb    BYTE PTR [eax],al
     40a:	00 0f                	add    BYTE PTR [edi],cl
     40c:	0b 01                	or     eax,DWORD PTR [ecx]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	01 13                	add    DWORD PTR [ebx],edx
     414:	00 00                	add    BYTE PTR [eax],al
     416:	10 05 00 03 08 3a    	adc    BYTE PTR ds:0x3a080300,al
     41c:	0b 3b                	or     edi,DWORD PTR [ebx]
     41e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     421:	02 18                	add    bl,BYTE PTR [eax]
     423:	00 00                	add    BYTE PTR [eax],al
     425:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
     428:	03 0e                	add    ecx,DWORD PTR [esi]
     42a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     42c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     42e:	49                   	dec    ecx
     42f:	13 3f                	adc    edi,DWORD PTR [edi]
     431:	19 02                	sbb    DWORD PTR [edx],eax
     433:	18 00                	sbb    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	01 11                	add    DWORD PTR [ecx],edx
     439:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     43f:	0e                   	push   cs
     440:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     442:	11 01                	adc    DWORD PTR [ecx],eax
     444:	12 06                	adc    al,BYTE PTR [esi]
     446:	10 17                	adc    BYTE PTR [edi],dl
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     44d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     44f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     452:	0e                   	push   cs
     453:	00 00                	add    BYTE PTR [eax],al
     455:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     458:	0b 0b                	or     ecx,DWORD PTR [ebx]
     45a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     45d:	08 00                	or     BYTE PTR [eax],al
     45f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     462:	00 03                	add    BYTE PTR [ebx],al
     464:	0e                   	push   cs
     465:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     467:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     469:	49                   	dec    ecx
     46a:	13 00                	adc    eax,DWORD PTR [eax]
     46c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     472:	49                   	dec    ecx
     473:	13 00                	adc    eax,DWORD PTR [eax]
     475:	00 06                	add    BYTE PTR [esi],al
     477:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     47b:	00 00                	add    BYTE PTR [eax],al
     47d:	07                   	pop    es
     47e:	13 01                	adc    eax,DWORD PTR [ecx]
     480:	03 0e                	add    ecx,DWORD PTR [esi]
     482:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     488:	01 13                	add    DWORD PTR [ebx],edx
     48a:	00 00                	add    BYTE PTR [eax],al
     48c:	08 0d 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,cl
     492:	0b 3b                	or     edi,DWORD PTR [ebx]
     494:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     497:	38 0b                	cmp    BYTE PTR [ebx],cl
     499:	00 00                	add    BYTE PTR [eax],al
     49b:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     4a1:	0b 3b                	or     edi,DWORD PTR [ebx]
     4a3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4a6:	38 05 00 00 0a 01    	cmp    BYTE PTR ds:0x10a0000,al
     4ac:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     4af:	01 13                	add    DWORD PTR [ebx],edx
     4b1:	00 00                	add    BYTE PTR [eax],al
     4b3:	0b 21                	or     esp,DWORD PTR [ecx]
     4b5:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     4b8:	2f                   	das    
     4b9:	05 00 00 0c 13       	add    eax,0x130c0000
     4be:	01 03                	add    DWORD PTR [ebx],eax
     4c0:	0e                   	push   cs
     4c1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c7:	01 13                	add    DWORD PTR [ebx],edx
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	0d 04 01 03 0e       	or     eax,0xe030104
     4d0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4d2:	49                   	dec    ecx
     4d3:	13 3a                	adc    edi,DWORD PTR [edx]
     4d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     4d7:	0b 01                	or     eax,DWORD PTR [ecx]
     4d9:	13 00                	adc    eax,DWORD PTR [eax]
     4db:	00 0e                	add    BYTE PTR [esi],cl
     4dd:	28 00                	sub    BYTE PTR [eax],al
     4df:	03 0e                	add    ecx,DWORD PTR [esi]
     4e1:	1c 0b                	sbb    al,0xb
     4e3:	00 00                	add    BYTE PTR [eax],al
     4e5:	0f 28 00             	movaps xmm0,XMMWORD PTR [eax]
     4e8:	03 0e                	add    ecx,DWORD PTR [esi]
     4ea:	1c 05                	sbb    al,0x5
     4ec:	00 00                	add    BYTE PTR [eax],al
     4ee:	10 0f                	adc    BYTE PTR [edi],cl
     4f0:	00 0b                	add    BYTE PTR [ebx],cl
     4f2:	0b 00                	or     eax,DWORD PTR [eax]
     4f4:	00 11                	add    BYTE PTR [ecx],dl
     4f6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4f9:	19 03                	sbb    DWORD PTR [ebx],eax
     4fb:	0e                   	push   cs
     4fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     500:	27                   	daa    
     501:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     504:	11 01                	adc    DWORD PTR [ecx],eax
     506:	12 06                	adc    al,BYTE PTR [esi]
     508:	40                   	inc    eax
     509:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     50f:	00 00                	add    BYTE PTR [eax],al
     511:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
     517:	0b 3b                	or     edi,DWORD PTR [ebx]
     519:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     51c:	02 18                	add    bl,BYTE PTR [eax]
     51e:	00 00                	add    BYTE PTR [eax],al
     520:	13 2e                	adc    ebp,DWORD PTR [esi]
     522:	00 3f                	add    BYTE PTR [edi],bh
     524:	19 03                	sbb    DWORD PTR [ebx],eax
     526:	0e                   	push   cs
     527:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     529:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     52b:	11 01                	adc    DWORD PTR [ecx],eax
     52d:	12 06                	adc    al,BYTE PTR [esi]
     52f:	40                   	inc    eax
     530:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     536:	14 34                	adc    al,0x34
     538:	00 03                	add    BYTE PTR [ebx],al
     53a:	0e                   	push   cs
     53b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53f:	49                   	dec    ecx
     540:	13 02                	adc    eax,DWORD PTR [edx]
     542:	18 00                	sbb    BYTE PTR [eax],al
     544:	00 15 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,dl
     54a:	03 0e                	add    ecx,DWORD PTR [esi]
     54c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     54e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     550:	27                   	daa    
     551:	19 11                	sbb    DWORD PTR [ecx],edx
     553:	01 12                	add    DWORD PTR [edx],edx
     555:	06                   	push   es
     556:	40                   	inc    eax
     557:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     55d:	00 00                	add    BYTE PTR [eax],al
     55f:	16                   	push   ss
     560:	0b 01                	or     eax,DWORD PTR [ecx]
     562:	11 01                	adc    DWORD PTR [ecx],eax
     564:	12 06                	adc    al,BYTE PTR [esi]
     566:	01 13                	add    DWORD PTR [ebx],edx
     568:	00 00                	add    BYTE PTR [eax],al
     56a:	17                   	pop    ss
     56b:	34 00                	xor    al,0x0
     56d:	03 08                	add    ecx,DWORD PTR [eax]
     56f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     571:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     573:	49                   	dec    ecx
     574:	13 02                	adc    eax,DWORD PTR [edx]
     576:	18 00                	sbb    BYTE PTR [eax],al
     578:	00 18                	add    BYTE PTR [eax],bl
     57a:	0b 01                	or     eax,DWORD PTR [ecx]
     57c:	11 01                	adc    DWORD PTR [ecx],eax
     57e:	12 06                	adc    al,BYTE PTR [esi]
     580:	00 00                	add    BYTE PTR [eax],al
     582:	19 21                	sbb    DWORD PTR [ecx],esp
     584:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     587:	2f                   	das    
     588:	0b 00                	or     eax,DWORD PTR [eax]
     58a:	00 1a                	add    BYTE PTR [edx],bl
     58c:	05 00 03 08 3a       	add    eax,0x3a080300
     591:	0b 3b                	or     edi,DWORD PTR [ebx]
     593:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     596:	02 18                	add    bl,BYTE PTR [eax]
     598:	00 00                	add    BYTE PTR [eax],al
     59a:	1b 0a                	sbb    ecx,DWORD PTR [edx]
     59c:	00 03                	add    BYTE PTR [ebx],al
     59e:	0e                   	push   cs
     59f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a3:	11 01                	adc    DWORD PTR [ecx],eax
     5a5:	00 00                	add    BYTE PTR [eax],al
     5a7:	1c 34                	sbb    al,0x34
     5a9:	00 03                	add    BYTE PTR [ebx],al
     5ab:	0e                   	push   cs
     5ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5b0:	49                   	dec    ecx
     5b1:	13 3f                	adc    edi,DWORD PTR [edi]
     5b3:	19 02                	sbb    DWORD PTR [edx],eax
     5b5:	18 00                	sbb    BYTE PTR [eax],al
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	01 11                	add    DWORD PTR [ecx],edx
     5bb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5c1:	0e                   	push   cs
     5c2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5c4:	11 01                	adc    DWORD PTR [ecx],eax
     5c6:	12 06                	adc    al,BYTE PTR [esi]
     5c8:	10 17                	adc    BYTE PTR [edi],dl
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     5cf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5d1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5d4:	0e                   	push   cs
     5d5:	00 00                	add    BYTE PTR [eax],al
     5d7:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     5da:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5dc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5df:	08 00                	or     BYTE PTR [eax],al
     5e1:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     5e4:	00 03                	add    BYTE PTR [ebx],al
     5e6:	0e                   	push   cs
     5e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5eb:	49                   	dec    ecx
     5ec:	13 00                	adc    eax,DWORD PTR [eax]
     5ee:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     5f4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5f6:	49                   	dec    ecx
     5f7:	13 3a                	adc    edi,DWORD PTR [edx]
     5f9:	0b 3b                	or     edi,DWORD PTR [ebx]
     5fb:	0b 01                	or     eax,DWORD PTR [ecx]
     5fd:	13 00                	adc    eax,DWORD PTR [eax]
     5ff:	00 06                	add    BYTE PTR [esi],al
     601:	28 00                	sub    BYTE PTR [eax],al
     603:	03 0e                	add    ecx,DWORD PTR [esi]
     605:	1c 0b                	sbb    al,0xb
     607:	00 00                	add    BYTE PTR [eax],al
     609:	07                   	pop    es
     60a:	28 00                	sub    BYTE PTR [eax],al
     60c:	03 0e                	add    ecx,DWORD PTR [esi]
     60e:	1c 05                	sbb    al,0x5
     610:	00 00                	add    BYTE PTR [eax],al
     612:	08 0f                	or     BYTE PTR [edi],cl
     614:	00 0b                	add    BYTE PTR [ebx],cl
     616:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     619:	00 00                	add    BYTE PTR [eax],al
     61b:	09 2e                	or     DWORD PTR [esi],ebp
     61d:	01 3f                	add    DWORD PTR [edi],edi
     61f:	19 03                	sbb    DWORD PTR [ebx],eax
     621:	0e                   	push   cs
     622:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     624:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     626:	27                   	daa    
     627:	19 11                	sbb    DWORD PTR [ecx],edx
     629:	01 12                	add    DWORD PTR [edx],edx
     62b:	06                   	push   es
     62c:	40                   	inc    eax
     62d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     633:	00 00                	add    BYTE PTR [eax],al
     635:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     63b:	0b 3b                	or     edi,DWORD PTR [ebx]
     63d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     640:	02 18                	add    bl,BYTE PTR [eax]
     642:	00 00                	add    BYTE PTR [eax],al
     644:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     64a:	0b 3b                	or     edi,DWORD PTR [ebx]
     64c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     64f:	02 18                	add    bl,BYTE PTR [eax]
     651:	00 00                	add    BYTE PTR [eax],al
     653:	0c 34                	or     al,0x34
     655:	00 03                	add    BYTE PTR [ebx],al
     657:	0e                   	push   cs
     658:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     65a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     65c:	49                   	dec    ecx
     65d:	13 02                	adc    eax,DWORD PTR [edx]
     65f:	18 00                	sbb    BYTE PTR [eax],al
     661:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     667:	01 13                	add    DWORD PTR [ebx],edx
     669:	00 00                	add    BYTE PTR [eax],al
     66b:	0e                   	push   cs
     66c:	21 00                	and    DWORD PTR [eax],eax
     66e:	49                   	dec    ecx
     66f:	13 2f                	adc    ebp,DWORD PTR [edi]
     671:	0b 00                	or     eax,DWORD PTR [eax]
     673:	00 0f                	add    BYTE PTR [edi],cl
     675:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     678:	19 03                	sbb    DWORD PTR [ebx],eax
     67a:	0e                   	push   cs
     67b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     67d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     67f:	49                   	dec    ecx
     680:	13 11                	adc    edx,DWORD PTR [ecx]
     682:	01 12                	add    DWORD PTR [edx],edx
     684:	06                   	push   es
     685:	40                   	inc    eax
     686:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     691:	03 08                	add    ecx,DWORD PTR [eax]
     693:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     695:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     697:	49                   	dec    ecx
     698:	13 02                	adc    eax,DWORD PTR [edx]
     69a:	18 00                	sbb    BYTE PTR [eax],al
     69c:	00 11                	add    BYTE PTR [ecx],dl
     69e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     6a1:	19 03                	sbb    DWORD PTR [ebx],eax
     6a3:	0e                   	push   cs
     6a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6a8:	27                   	daa    
     6a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6ac:	11 01                	adc    DWORD PTR [ecx],eax
     6ae:	12 06                	adc    al,BYTE PTR [esi]
     6b0:	40                   	inc    eax
     6b1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6b7:	00 00                	add    BYTE PTR [eax],al
     6b9:	12 0a                	adc    cl,BYTE PTR [edx]
     6bb:	00 03                	add    BYTE PTR [ebx],al
     6bd:	0e                   	push   cs
     6be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c2:	11 01                	adc    DWORD PTR [ecx],eax
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     6c9:	03 0e                	add    ecx,DWORD PTR [esi]
     6cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6cf:	49                   	dec    ecx
     6d0:	13 3f                	adc    edi,DWORD PTR [edi]
     6d2:	19 02                	sbb    DWORD PTR [edx],eax
     6d4:	18 00                	sbb    BYTE PTR [eax],al
     6d6:	00 00                	add    BYTE PTR [eax],al
     6d8:	01 11                	add    DWORD PTR [ecx],edx
     6da:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6e0:	0e                   	push   cs
     6e1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6e3:	11 01                	adc    DWORD PTR [ecx],eax
     6e5:	12 06                	adc    al,BYTE PTR [esi]
     6e7:	10 17                	adc    BYTE PTR [edi],dl
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 16                	add    dl,BYTE PTR [esi]
     6ed:	00 03                	add    BYTE PTR [ebx],al
     6ef:	0e                   	push   cs
     6f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f4:	49                   	dec    ecx
     6f5:	13 00                	adc    eax,DWORD PTR [eax]
     6f7:	00 03                	add    BYTE PTR [ebx],al
     6f9:	0f 00 0b             	str    WORD PTR [ebx]
     6fc:	0b 03                	or     eax,DWORD PTR [ebx]
     6fe:	0e                   	push   cs
     6ff:	49                   	dec    ecx
     700:	13 00                	adc    eax,DWORD PTR [eax]
     702:	00 04 24             	add    BYTE PTR [esp],al
     705:	00 0b                	add    BYTE PTR [ebx],cl
     707:	0b 3e                	or     edi,DWORD PTR [esi]
     709:	0b 03                	or     eax,DWORD PTR [ebx]
     70b:	0e                   	push   cs
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	05 24 00 0b 0b       	add    eax,0xb0b0024
     713:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     716:	08 00                	or     BYTE PTR [eax],al
     718:	00 06                	add    BYTE PTR [esi],al
     71a:	0f 00 0b             	str    WORD PTR [ebx]
     71d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     720:	00 00                	add    BYTE PTR [eax],al
     722:	07                   	pop    es
     723:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     727:	00 00                	add    BYTE PTR [eax],al
     729:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     72c:	03 0e                	add    ecx,DWORD PTR [esi]
     72e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     730:	49                   	dec    ecx
     731:	13 3a                	adc    edi,DWORD PTR [edx]
     733:	0b 3b                	or     edi,DWORD PTR [ebx]
     735:	0b 01                	or     eax,DWORD PTR [ecx]
     737:	13 00                	adc    eax,DWORD PTR [eax]
     739:	00 09                	add    BYTE PTR [ecx],cl
     73b:	28 00                	sub    BYTE PTR [eax],al
     73d:	03 0e                	add    ecx,DWORD PTR [esi]
     73f:	1c 0b                	sbb    al,0xb
     741:	00 00                	add    BYTE PTR [eax],al
     743:	0a 28                	or     ch,BYTE PTR [eax]
     745:	00 03                	add    BYTE PTR [ebx],al
     747:	0e                   	push   cs
     748:	1c 05                	sbb    al,0x5
     74a:	00 00                	add    BYTE PTR [eax],al
     74c:	0b 0f                	or     ecx,DWORD PTR [edi]
     74e:	00 0b                	add    BYTE PTR [ebx],cl
     750:	0b 00                	or     eax,DWORD PTR [eax]
     752:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     755:	01 3f                	add    DWORD PTR [edi],edi
     757:	19 03                	sbb    DWORD PTR [ebx],eax
     759:	0e                   	push   cs
     75a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     75c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     75e:	27                   	daa    
     75f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     762:	11 01                	adc    DWORD PTR [ecx],eax
     764:	12 06                	adc    al,BYTE PTR [esi]
     766:	40                   	inc    eax
     767:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     76d:	00 00                	add    BYTE PTR [eax],al
     76f:	0d 05 00 03 0e       	or     eax,0xe030005
     774:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     776:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     778:	49                   	dec    ecx
     779:	13 02                	adc    eax,DWORD PTR [edx]
     77b:	18 00                	sbb    BYTE PTR [eax],al
     77d:	00 0e                	add    BYTE PTR [esi],cl
     77f:	34 00                	xor    al,0x0
     781:	03 0e                	add    ecx,DWORD PTR [esi]
     783:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     785:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     787:	49                   	dec    ecx
     788:	13 02                	adc    eax,DWORD PTR [edx]
     78a:	18 00                	sbb    BYTE PTR [eax],al
     78c:	00 0f                	add    BYTE PTR [edi],cl
     78e:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     791:	19 03                	sbb    DWORD PTR [ebx],eax
     793:	0e                   	push   cs
     794:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     796:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     798:	11 01                	adc    DWORD PTR [ecx],eax
     79a:	12 06                	adc    al,BYTE PTR [esi]
     79c:	40                   	inc    eax
     79d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7a3:	10 2e                	adc    BYTE PTR [esi],ch
     7a5:	00 3f                	add    BYTE PTR [edi],bh
     7a7:	19 03                	sbb    DWORD PTR [ebx],eax
     7a9:	0e                   	push   cs
     7aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ae:	27                   	daa    
     7af:	19 11                	sbb    DWORD PTR [ecx],edx
     7b1:	01 12                	add    DWORD PTR [edx],edx
     7b3:	06                   	push   es
     7b4:	40                   	inc    eax
     7b5:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7bb:	11 2e                	adc    DWORD PTR [esi],ebp
     7bd:	01 3f                	add    DWORD PTR [edi],edi
     7bf:	19 03                	sbb    DWORD PTR [ebx],eax
     7c1:	0e                   	push   cs
     7c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c6:	27                   	daa    
     7c7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7ca:	11 01                	adc    DWORD PTR [ecx],eax
     7cc:	12 06                	adc    al,BYTE PTR [esi]
     7ce:	40                   	inc    eax
     7cf:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7d5:	00 00                	add    BYTE PTR [eax],al
     7d7:	12 18                	adc    bl,BYTE PTR [eax]
     7d9:	00 00                	add    BYTE PTR [eax],al
     7db:	00 13                	add    BYTE PTR [ebx],dl
     7dd:	0b 01                	or     eax,DWORD PTR [ecx]
     7df:	11 01                	adc    DWORD PTR [ecx],eax
     7e1:	12 06                	adc    al,BYTE PTR [esi]
     7e3:	00 00                	add    BYTE PTR [eax],al
     7e5:	14 34                	adc    al,0x34
     7e7:	00 03                	add    BYTE PTR [ebx],al
     7e9:	08 3a                	or     BYTE PTR [edx],bh
     7eb:	0b 3b                	or     edi,DWORD PTR [ebx]
     7ed:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     7f0:	02 18                	add    bl,BYTE PTR [eax]
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7f9:	03 0e                	add    ecx,DWORD PTR [esi]
     7fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ff:	27                   	daa    
     800:	19 11                	sbb    DWORD PTR [ecx],edx
     802:	01 12                	add    DWORD PTR [edx],edx
     804:	06                   	push   es
     805:	40                   	inc    eax
     806:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     80c:	00 00                	add    BYTE PTR [eax],al
     80e:	16                   	push   ss
     80f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     812:	19 03                	sbb    DWORD PTR [ebx],eax
     814:	0e                   	push   cs
     815:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     817:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     819:	49                   	dec    ecx
     81a:	13 11                	adc    edx,DWORD PTR [ecx]
     81c:	01 12                	add    DWORD PTR [edx],edx
     81e:	06                   	push   es
     81f:	40                   	inc    eax
     820:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     826:	00 00                	add    BYTE PTR [eax],al
     828:	17                   	pop    ss
     829:	05 00 03 08 3a       	add    eax,0x3a080300
     82e:	0b 3b                	or     edi,DWORD PTR [ebx]
     830:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     833:	02 18                	add    bl,BYTE PTR [eax]
     835:	00 00                	add    BYTE PTR [eax],al
     837:	18 0b                	sbb    BYTE PTR [ebx],cl
     839:	01 11                	add    DWORD PTR [ecx],edx
     83b:	01 12                	add    DWORD PTR [edx],edx
     83d:	06                   	push   es
     83e:	01 13                	add    DWORD PTR [ebx],edx
     840:	00 00                	add    BYTE PTR [eax],al
     842:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     845:	03 0e                	add    ecx,DWORD PTR [esi]
     847:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     849:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     84f:	00 00                	add    BYTE PTR [eax],al
     851:	1a 2e                	sbb    ch,BYTE PTR [esi]
     853:	01 3f                	add    DWORD PTR [edi],edi
     855:	19 03                	sbb    DWORD PTR [ebx],eax
     857:	0e                   	push   cs
     858:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     85a:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     860:	11 01                	adc    DWORD PTR [ecx],eax
     862:	12 06                	adc    al,BYTE PTR [esi]
     864:	40                   	inc    eax
     865:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     86b:	00 00                	add    BYTE PTR [eax],al
     86d:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     873:	0b 3b                	or     edi,DWORD PTR [ebx]
     875:	05 49 13 02 18       	add    eax,0x18021349
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	1c 34                	sbb    al,0x34
     87e:	00 03                	add    BYTE PTR [ebx],al
     880:	08 3a                	or     BYTE PTR [edx],bh
     882:	0b 3b                	or     edi,DWORD PTR [ebx]
     884:	05 49 13 02 18       	add    eax,0x18021349
     889:	00 00                	add    BYTE PTR [eax],al
     88b:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     890:	00 00                	add    BYTE PTR [eax],al
     892:	1e                   	push   ds
     893:	01 01                	add    DWORD PTR [ecx],eax
     895:	49                   	dec    ecx
     896:	13 01                	adc    eax,DWORD PTR [ecx]
     898:	13 00                	adc    eax,DWORD PTR [eax]
     89a:	00 1f                	add    BYTE PTR [edi],bl
     89c:	21 00                	and    DWORD PTR [eax],eax
     89e:	49                   	dec    ecx
     89f:	13 2f                	adc    ebp,DWORD PTR [edi]
     8a1:	05 00 00 20 21       	add    eax,0x21200000
     8a6:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     8a9:	2f                   	das    
     8aa:	0b 00                	or     eax,DWORD PTR [eax]
     8ac:	00 21                	add    BYTE PTR [ecx],ah
     8ae:	05 00 03 08 3a       	add    eax,0x3a080300
     8b3:	0b 3b                	or     edi,DWORD PTR [ebx]
     8b5:	05 49 13 02 18       	add    eax,0x18021349
     8ba:	00 00                	add    BYTE PTR [eax],al
     8bc:	22 2e                	and    ch,BYTE PTR [esi]
     8be:	00 3f                	add    BYTE PTR [edi],bh
     8c0:	19 03                	sbb    DWORD PTR [ebx],eax
     8c2:	0e                   	push   cs
     8c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8c5:	3b 05 11 01 12 06    	cmp    eax,DWORD PTR ds:0x6120111
     8cb:	40                   	inc    eax
     8cc:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     8d2:	23 34 00             	and    esi,DWORD PTR [eax+eax*1]
     8d5:	03 0e                	add    ecx,DWORD PTR [esi]
     8d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8db:	49                   	dec    ecx
     8dc:	13 3f                	adc    edi,DWORD PTR [edi]
     8de:	19 02                	sbb    DWORD PTR [edx],eax
     8e0:	18 00                	sbb    BYTE PTR [eax],al
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	01 11                	add    DWORD PTR [ecx],edx
     8e6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8ec:	0e                   	push   cs
     8ed:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8ef:	11 01                	adc    DWORD PTR [ecx],eax
     8f1:	12 06                	adc    al,BYTE PTR [esi]
     8f3:	10 17                	adc    BYTE PTR [edi],dl
     8f5:	00 00                	add    BYTE PTR [eax],al
     8f7:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8fa:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8fc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8ff:	0e                   	push   cs
     900:	00 00                	add    BYTE PTR [eax],al
     902:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     905:	0b 0b                	or     ecx,DWORD PTR [ebx]
     907:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     90a:	08 00                	or     BYTE PTR [eax],al
     90c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     90f:	00 03                	add    BYTE PTR [ebx],al
     911:	0e                   	push   cs
     912:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     914:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     916:	49                   	dec    ecx
     917:	13 00                	adc    eax,DWORD PTR [eax]
     919:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     91f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     921:	49                   	dec    ecx
     922:	13 3a                	adc    edi,DWORD PTR [edx]
     924:	0b 3b                	or     edi,DWORD PTR [ebx]
     926:	0b 01                	or     eax,DWORD PTR [ecx]
     928:	13 00                	adc    eax,DWORD PTR [eax]
     92a:	00 06                	add    BYTE PTR [esi],al
     92c:	28 00                	sub    BYTE PTR [eax],al
     92e:	03 0e                	add    ecx,DWORD PTR [esi]
     930:	1c 0b                	sbb    al,0xb
     932:	00 00                	add    BYTE PTR [eax],al
     934:	07                   	pop    es
     935:	28 00                	sub    BYTE PTR [eax],al
     937:	03 0e                	add    ecx,DWORD PTR [esi]
     939:	1c 05                	sbb    al,0x5
     93b:	00 00                	add    BYTE PTR [eax],al
     93d:	08 13                	or     BYTE PTR [ebx],dl
     93f:	01 03                	add    DWORD PTR [ebx],eax
     941:	0e                   	push   cs
     942:	0b 0b                	or     ecx,DWORD PTR [ebx]
     944:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     946:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     948:	01 13                	add    DWORD PTR [ebx],edx
     94a:	00 00                	add    BYTE PTR [eax],al
     94c:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     952:	0b 3b                	or     edi,DWORD PTR [ebx]
     954:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     957:	38 0b                	cmp    BYTE PTR [ebx],cl
     959:	00 00                	add    BYTE PTR [eax],al
     95b:	0a 0d 00 03 08 3a    	or     cl,BYTE PTR ds:0x3a080300
     961:	0b 3b                	or     edi,DWORD PTR [ebx]
     963:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     966:	38 0b                	cmp    BYTE PTR [ebx],cl
     968:	00 00                	add    BYTE PTR [eax],al
     96a:	0b 0f                	or     ecx,DWORD PTR [edi]
     96c:	00 0b                	add    BYTE PTR [ebx],cl
     96e:	0b 00                	or     eax,DWORD PTR [eax]
     970:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
     973:	00 0b                	add    BYTE PTR [ebx],cl
     975:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     978:	00 00                	add    BYTE PTR [eax],al
     97a:	0d 2e 01 3f 19       	or     eax,0x193f012e
     97f:	03 0e                	add    ecx,DWORD PTR [esi]
     981:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     983:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     985:	27                   	daa    
     986:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     989:	11 01                	adc    DWORD PTR [ecx],eax
     98b:	12 06                	adc    al,BYTE PTR [esi]
     98d:	40                   	inc    eax
     98e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     994:	00 00                	add    BYTE PTR [eax],al
     996:	0e                   	push   cs
     997:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     99c:	0b 3b                	or     edi,DWORD PTR [ebx]
     99e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9a1:	02 18                	add    bl,BYTE PTR [eax]
     9a3:	00 00                	add    BYTE PTR [eax],al
     9a5:	0f 05                	syscall 
     9a7:	00 03                	add    BYTE PTR [ebx],al
     9a9:	08 3a                	or     BYTE PTR [edx],bh
     9ab:	0b 3b                	or     edi,DWORD PTR [ebx]
     9ad:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9b0:	02 18                	add    bl,BYTE PTR [eax]
     9b2:	00 00                	add    BYTE PTR [eax],al
     9b4:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     9b7:	03 0e                	add    ecx,DWORD PTR [esi]
     9b9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9bb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9bd:	49                   	dec    ecx
     9be:	13 3f                	adc    edi,DWORD PTR [edi]
     9c0:	19 02                	sbb    DWORD PTR [edx],eax
     9c2:	18 00                	sbb    BYTE PTR [eax],al
     9c4:	00 00                	add    BYTE PTR [eax],al
     9c6:	01 11                	add    DWORD PTR [ecx],edx
     9c8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9ce:	0e                   	push   cs
     9cf:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9d1:	11 01                	adc    DWORD PTR [ecx],eax
     9d3:	12 06                	adc    al,BYTE PTR [esi]
     9d5:	10 17                	adc    BYTE PTR [edi],dl
     9d7:	00 00                	add    BYTE PTR [eax],al
     9d9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9dc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9de:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9e1:	0e                   	push   cs
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9e7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9e9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9ec:	08 00                	or     BYTE PTR [eax],al
     9ee:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9f1:	00 03                	add    BYTE PTR [ebx],al
     9f3:	0e                   	push   cs
     9f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9f8:	49                   	dec    ecx
     9f9:	13 00                	adc    eax,DWORD PTR [eax]
     9fb:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     a01:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a07:	01 13                	add    DWORD PTR [ebx],edx
     a09:	00 00                	add    BYTE PTR [eax],al
     a0b:	06                   	push   es
     a0c:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     a11:	0b 3b                	or     edi,DWORD PTR [ebx]
     a13:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a16:	38 0b                	cmp    BYTE PTR [ebx],cl
     a18:	00 00                	add    BYTE PTR [eax],al
     a1a:	07                   	pop    es
     a1b:	0d 00 03 08 3a       	or     eax,0x3a080300
     a20:	0b 3b                	or     edi,DWORD PTR [ebx]
     a22:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a25:	38 0b                	cmp    BYTE PTR [ebx],cl
     a27:	00 00                	add    BYTE PTR [eax],al
     a29:	08 01                	or     BYTE PTR [ecx],al
     a2b:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     a2e:	01 13                	add    DWORD PTR [ebx],edx
     a30:	00 00                	add    BYTE PTR [eax],al
     a32:	09 21                	or     DWORD PTR [ecx],esp
     a34:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     a37:	2f                   	das    
     a38:	0b 00                	or     eax,DWORD PTR [eax]
     a3a:	00 0a                	add    BYTE PTR [edx],cl
     a3c:	0f 00 0b             	str    WORD PTR [ebx]
     a3f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a42:	00 00                	add    BYTE PTR [eax],al
     a44:	0b 04 01             	or     eax,DWORD PTR [ecx+eax*1]
     a47:	03 0e                	add    ecx,DWORD PTR [esi]
     a49:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a4b:	49                   	dec    ecx
     a4c:	13 3a                	adc    edi,DWORD PTR [edx]
     a4e:	0b 3b                	or     edi,DWORD PTR [ebx]
     a50:	0b 01                	or     eax,DWORD PTR [ecx]
     a52:	13 00                	adc    eax,DWORD PTR [eax]
     a54:	00 0c 28             	add    BYTE PTR [eax+ebp*1],cl
     a57:	00 03                	add    BYTE PTR [ebx],al
     a59:	0e                   	push   cs
     a5a:	1c 0b                	sbb    al,0xb
     a5c:	00 00                	add    BYTE PTR [eax],al
     a5e:	0d 28 00 03 0e       	or     eax,0xe030028
     a63:	1c 05                	sbb    al,0x5
     a65:	00 00                	add    BYTE PTR [eax],al
     a67:	0e                   	push   cs
     a68:	0f 00 0b             	str    WORD PTR [ebx]
     a6b:	0b 00                	or     eax,DWORD PTR [eax]
     a6d:	00 0f                	add    BYTE PTR [edi],cl
     a6f:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     a72:	19 03                	sbb    DWORD PTR [ebx],eax
     a74:	0e                   	push   cs
     a75:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a77:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a79:	11 01                	adc    DWORD PTR [ecx],eax
     a7b:	12 06                	adc    al,BYTE PTR [esi]
     a7d:	40                   	inc    eax
     a7e:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     a84:	10 2e                	adc    BYTE PTR [esi],ch
     a86:	01 3f                	add    DWORD PTR [edi],edi
     a88:	19 03                	sbb    DWORD PTR [ebx],eax
     a8a:	0e                   	push   cs
     a8b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a8d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a8f:	27                   	daa    
     a90:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a93:	11 01                	adc    DWORD PTR [ecx],eax
     a95:	12 06                	adc    al,BYTE PTR [esi]
     a97:	40                   	inc    eax
     a98:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     a9e:	00 00                	add    BYTE PTR [eax],al
     aa0:	11 05 00 03 0e 3a    	adc    DWORD PTR ds:0x3a0e0300,eax
     aa6:	0b 3b                	or     edi,DWORD PTR [ebx]
     aa8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     aab:	02 18                	add    bl,BYTE PTR [eax]
     aad:	00 00                	add    BYTE PTR [eax],al
     aaf:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     ab2:	03 0e                	add    ecx,DWORD PTR [esi]
     ab4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab8:	49                   	dec    ecx
     ab9:	13 02                	adc    eax,DWORD PTR [edx]
     abb:	18 00                	sbb    BYTE PTR [eax],al
     abd:	00 13                	add    BYTE PTR [ebx],dl
     abf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ac2:	19 03                	sbb    DWORD PTR [ebx],eax
     ac4:	0e                   	push   cs
     ac5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac9:	27                   	daa    
     aca:	19 11                	sbb    DWORD PTR [ecx],edx
     acc:	01 12                	add    DWORD PTR [edx],edx
     ace:	06                   	push   es
     acf:	40                   	inc    eax
     ad0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ad6:	00 00                	add    BYTE PTR [eax],al
     ad8:	14 34                	adc    al,0x34
     ada:	00 03                	add    BYTE PTR [ebx],al
     adc:	08 3a                	or     BYTE PTR [edx],bh
     ade:	0b 3b                	or     edi,DWORD PTR [ebx]
     ae0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ae3:	02 18                	add    bl,BYTE PTR [eax]
     ae5:	00 00                	add    BYTE PTR [eax],al
     ae7:	15 2e 01 3f 19       	adc    eax,0x193f012e
     aec:	03 0e                	add    ecx,DWORD PTR [esi]
     aee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     af0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     af2:	27                   	daa    
     af3:	19 11                	sbb    DWORD PTR [ecx],edx
     af5:	01 12                	add    DWORD PTR [edx],edx
     af7:	06                   	push   es
     af8:	40                   	inc    eax
     af9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     aff:	00 00                	add    BYTE PTR [eax],al
     b01:	16                   	push   ss
     b02:	0a 00                	or     al,BYTE PTR [eax]
     b04:	03 0e                	add    ecx,DWORD PTR [esi]
     b06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b0a:	11 01                	adc    DWORD PTR [ecx],eax
     b0c:	00 00                	add    BYTE PTR [eax],al
     b0e:	17                   	pop    ss
     b0f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b12:	19 03                	sbb    DWORD PTR [ebx],eax
     b14:	0e                   	push   cs
     b15:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b17:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b19:	27                   	daa    
     b1a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b1d:	11 01                	adc    DWORD PTR [ecx],eax
     b1f:	12 06                	adc    al,BYTE PTR [esi]
     b21:	40                   	inc    eax
     b22:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b28:	00 00                	add    BYTE PTR [eax],al
     b2a:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     b2d:	03 0e                	add    ecx,DWORD PTR [esi]
     b2f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b31:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b33:	49                   	dec    ecx
     b34:	13 00                	adc    eax,DWORD PTR [eax]
     b36:	00 19                	add    BYTE PTR [ecx],bl
     b38:	34 00                	xor    al,0x0
     b3a:	03 0e                	add    ecx,DWORD PTR [esi]
     b3c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b3e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b40:	49                   	dec    ecx
     b41:	13 3f                	adc    edi,DWORD PTR [edi]
     b43:	19 02                	sbb    DWORD PTR [edx],eax
     b45:	18 00                	sbb    BYTE PTR [eax],al
     b47:	00 00                	add    BYTE PTR [eax],al
     b49:	01 11                	add    DWORD PTR [ecx],edx
     b4b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b51:	0e                   	push   cs
     b52:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b54:	11 01                	adc    DWORD PTR [ecx],eax
     b56:	12 06                	adc    al,BYTE PTR [esi]
     b58:	10 17                	adc    BYTE PTR [edi],dl
     b5a:	00 00                	add    BYTE PTR [eax],al
     b5c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b5f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b61:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b64:	0e                   	push   cs
     b65:	00 00                	add    BYTE PTR [eax],al
     b67:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b6a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b6c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b6f:	08 00                	or     BYTE PTR [eax],al
     b71:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     b74:	00 0b                	add    BYTE PTR [ebx],cl
     b76:	0b 00                	or     eax,DWORD PTR [eax]
     b78:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b7e:	49                   	dec    ecx
     b7f:	13 00                	adc    eax,DWORD PTR [eax]
     b81:	00 06                	add    BYTE PTR [esi],al
     b83:	16                   	push   ss
     b84:	00 03                	add    BYTE PTR [ebx],al
     b86:	0e                   	push   cs
     b87:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b89:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b8b:	49                   	dec    ecx
     b8c:	13 00                	adc    eax,DWORD PTR [eax]
     b8e:	00 07                	add    BYTE PTR [edi],al
     b90:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b94:	00 00                	add    BYTE PTR [eax],al
     b96:	08 2e                	or     BYTE PTR [esi],ch
     b98:	01 3f                	add    DWORD PTR [edi],edi
     b9a:	19 03                	sbb    DWORD PTR [ebx],eax
     b9c:	0e                   	push   cs
     b9d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ba1:	27                   	daa    
     ba2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ba5:	11 01                	adc    DWORD PTR [ecx],eax
     ba7:	12 06                	adc    al,BYTE PTR [esi]
     ba9:	40                   	inc    eax
     baa:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     bb0:	00 00                	add    BYTE PTR [eax],al
     bb2:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     bb8:	0b 3b                	or     edi,DWORD PTR [ebx]
     bba:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bbd:	02 18                	add    bl,BYTE PTR [eax]
     bbf:	00 00                	add    BYTE PTR [eax],al
     bc1:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     bc7:	0b 3b                	or     edi,DWORD PTR [ebx]
     bc9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bcc:	02 18                	add    bl,BYTE PTR [eax]
     bce:	00 00                	add    BYTE PTR [eax],al
     bd0:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     bd3:	03 08                	add    ecx,DWORD PTR [eax]
     bd5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bd7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bd9:	49                   	dec    ecx
     bda:	13 02                	adc    eax,DWORD PTR [edx]
     bdc:	18 00                	sbb    BYTE PTR [eax],al
     bde:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     be1:	01 11                	add    DWORD PTR [ecx],edx
     be3:	01 12                	add    DWORD PTR [edx],edx
     be5:	06                   	push   es
     be6:	01 13                	add    DWORD PTR [ebx],edx
     be8:	00 00                	add    BYTE PTR [eax],al
     bea:	0d 0b 01 11 01       	or     eax,0x111010b
     bef:	12 06                	adc    al,BYTE PTR [esi]
     bf1:	00 00                	add    BYTE PTR [eax],al
     bf3:	0e                   	push   cs
     bf4:	26 00 00             	add    BYTE PTR es:[eax],al
     bf7:	00 0f                	add    BYTE PTR [edi],cl
     bf9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bfc:	19 03                	sbb    DWORD PTR [ebx],eax
     bfe:	0e                   	push   cs
     bff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c01:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c03:	27                   	daa    
     c04:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c07:	11 01                	adc    DWORD PTR [ecx],eax
     c09:	12 06                	adc    al,BYTE PTR [esi]
     c0b:	40                   	inc    eax
     c0c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c12:	00 00                	add    BYTE PTR [eax],al
     c14:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     c17:	03 0e                	add    ecx,DWORD PTR [esi]
     c19:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c1b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1d:	49                   	dec    ecx
     c1e:	13 3f                	adc    edi,DWORD PTR [edi]
     c20:	19 02                	sbb    DWORD PTR [edx],eax
     c22:	18 00                	sbb    BYTE PTR [eax],al
     c24:	00 00                	add    BYTE PTR [eax],al
     c26:	01 11                	add    DWORD PTR [ecx],edx
     c28:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c2e:	0e                   	push   cs
     c2f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c31:	11 01                	adc    DWORD PTR [ecx],eax
     c33:	12 06                	adc    al,BYTE PTR [esi]
     c35:	10 17                	adc    BYTE PTR [edi],dl
     c37:	00 00                	add    BYTE PTR [eax],al
     c39:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c3c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c3e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c41:	0e                   	push   cs
     c42:	00 00                	add    BYTE PTR [eax],al
     c44:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c47:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c49:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c4c:	08 00                	or     BYTE PTR [eax],al
     c4e:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c51:	00 03                	add    BYTE PTR [ebx],al
     c53:	0e                   	push   cs
     c54:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c56:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c58:	49                   	dec    ecx
     c59:	13 00                	adc    eax,DWORD PTR [eax]
     c5b:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c61:	00 00                	add    BYTE PTR [eax],al
     c63:	06                   	push   es
     c64:	0f 00 0b             	str    WORD PTR [ebx]
     c67:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c6a:	00 00                	add    BYTE PTR [eax],al
     c6c:	07                   	pop    es
     c6d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c70:	19 03                	sbb    DWORD PTR [ebx],eax
     c72:	0e                   	push   cs
     c73:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c75:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c77:	27                   	daa    
     c78:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c7b:	11 01                	adc    DWORD PTR [ecx],eax
     c7d:	12 06                	adc    al,BYTE PTR [esi]
     c7f:	40                   	inc    eax
     c80:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c86:	00 00                	add    BYTE PTR [eax],al
     c88:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c8e:	0b 3b                	or     edi,DWORD PTR [ebx]
     c90:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c93:	02 18                	add    bl,BYTE PTR [eax]
     c95:	00 00                	add    BYTE PTR [eax],al
     c97:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c9a:	03 08                	add    ecx,DWORD PTR [eax]
     c9c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c9e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca0:	49                   	dec    ecx
     ca1:	13 02                	adc    eax,DWORD PTR [edx]
     ca3:	18 00                	sbb    BYTE PTR [eax],al
     ca5:	00 0a                	add    BYTE PTR [edx],cl
     ca7:	34 00                	xor    al,0x0
     ca9:	03 0e                	add    ecx,DWORD PTR [esi]
     cab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     caf:	49                   	dec    ecx
     cb0:	13 02                	adc    eax,DWORD PTR [edx]
     cb2:	18 00                	sbb    BYTE PTR [eax],al
     cb4:	00 0b                	add    BYTE PTR [ebx],cl
     cb6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     cb9:	19 03                	sbb    DWORD PTR [ebx],eax
     cbb:	0e                   	push   cs
     cbc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cbe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cc0:	27                   	daa    
     cc1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cc4:	11 01                	adc    DWORD PTR [ecx],eax
     cc6:	12 06                	adc    al,BYTE PTR [esi]
     cc8:	40                   	inc    eax
     cc9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ccf:	00 00                	add    BYTE PTR [eax],al
     cd1:	0c 34                	or     al,0x34
     cd3:	00 03                	add    BYTE PTR [ebx],al
     cd5:	0e                   	push   cs
     cd6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cd8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cda:	49                   	dec    ecx
     cdb:	13 3f                	adc    edi,DWORD PTR [edi]
     cdd:	19 02                	sbb    DWORD PTR [edx],eax
     cdf:	18 00                	sbb    BYTE PTR [eax],al
     ce1:	00 00                	add    BYTE PTR [eax],al
     ce3:	01 11                	add    DWORD PTR [ecx],edx
     ce5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ceb:	0e                   	push   cs
     cec:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cee:	11 01                	adc    DWORD PTR [ecx],eax
     cf0:	12 06                	adc    al,BYTE PTR [esi]
     cf2:	10 17                	adc    BYTE PTR [edi],dl
     cf4:	00 00                	add    BYTE PTR [eax],al
     cf6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cf9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cfb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cfe:	0e                   	push   cs
     cff:	00 00                	add    BYTE PTR [eax],al
     d01:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d04:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d06:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d09:	08 00                	or     BYTE PTR [eax],al
     d0b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d0e:	00 03                	add    BYTE PTR [ebx],al
     d10:	0e                   	push   cs
     d11:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d13:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d15:	49                   	dec    ecx
     d16:	13 00                	adc    eax,DWORD PTR [eax]
     d18:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     d1e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d20:	49                   	dec    ecx
     d21:	13 3a                	adc    edi,DWORD PTR [edx]
     d23:	0b 3b                	or     edi,DWORD PTR [ebx]
     d25:	0b 01                	or     eax,DWORD PTR [ecx]
     d27:	13 00                	adc    eax,DWORD PTR [eax]
     d29:	00 06                	add    BYTE PTR [esi],al
     d2b:	28 00                	sub    BYTE PTR [eax],al
     d2d:	03 0e                	add    ecx,DWORD PTR [esi]
     d2f:	1c 0b                	sbb    al,0xb
     d31:	00 00                	add    BYTE PTR [eax],al
     d33:	07                   	pop    es
     d34:	28 00                	sub    BYTE PTR [eax],al
     d36:	03 0e                	add    ecx,DWORD PTR [esi]
     d38:	1c 05                	sbb    al,0x5
     d3a:	00 00                	add    BYTE PTR [eax],al
     d3c:	08 0f                	or     BYTE PTR [edi],cl
     d3e:	00 0b                	add    BYTE PTR [ebx],cl
     d40:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d43:	00 00                	add    BYTE PTR [eax],al
     d45:	09 2e                	or     DWORD PTR [esi],ebp
     d47:	01 3f                	add    DWORD PTR [edi],edi
     d49:	19 03                	sbb    DWORD PTR [ebx],eax
     d4b:	0e                   	push   cs
     d4c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d4e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d50:	27                   	daa    
     d51:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d54:	11 01                	adc    DWORD PTR [ecx],eax
     d56:	12 06                	adc    al,BYTE PTR [esi]
     d58:	40                   	inc    eax
     d59:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d5f:	00 00                	add    BYTE PTR [eax],al
     d61:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d67:	0b 3b                	or     edi,DWORD PTR [ebx]
     d69:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d6c:	02 18                	add    bl,BYTE PTR [eax]
     d6e:	00 00                	add    BYTE PTR [eax],al
     d70:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d73:	03 0e                	add    ecx,DWORD PTR [esi]
     d75:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d77:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d79:	49                   	dec    ecx
     d7a:	13 3f                	adc    edi,DWORD PTR [edi]
     d7c:	19 02                	sbb    DWORD PTR [edx],eax
     d7e:	18 00                	sbb    BYTE PTR [eax],al
     d80:	00 00                	add    BYTE PTR [eax],al
     d82:	01 11                	add    DWORD PTR [ecx],edx
     d84:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d8a:	0e                   	push   cs
     d8b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d8d:	11 01                	adc    DWORD PTR [ecx],eax
     d8f:	12 06                	adc    al,BYTE PTR [esi]
     d91:	10 17                	adc    BYTE PTR [edi],dl
     d93:	00 00                	add    BYTE PTR [eax],al
     d95:	02 16                	add    dl,BYTE PTR [esi]
     d97:	00 03                	add    BYTE PTR [ebx],al
     d99:	0e                   	push   cs
     d9a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d9c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d9e:	49                   	dec    ecx
     d9f:	13 00                	adc    eax,DWORD PTR [eax]
     da1:	00 03                	add    BYTE PTR [ebx],al
     da3:	0f 00 0b             	str    WORD PTR [ebx]
     da6:	0b 03                	or     eax,DWORD PTR [ebx]
     da8:	0e                   	push   cs
     da9:	49                   	dec    ecx
     daa:	13 00                	adc    eax,DWORD PTR [eax]
     dac:	00 04 24             	add    BYTE PTR [esp],al
     daf:	00 0b                	add    BYTE PTR [ebx],cl
     db1:	0b 3e                	or     edi,DWORD PTR [esi]
     db3:	0b 03                	or     eax,DWORD PTR [ebx]
     db5:	0e                   	push   cs
     db6:	00 00                	add    BYTE PTR [eax],al
     db8:	05 24 00 0b 0b       	add    eax,0xb0b0024
     dbd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dc0:	08 00                	or     BYTE PTR [eax],al
     dc2:	00 06                	add    BYTE PTR [esi],al
     dc4:	0f 00 0b             	str    WORD PTR [ebx]
     dc7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dca:	00 00                	add    BYTE PTR [eax],al
     dcc:	07                   	pop    es
     dcd:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     dd1:	00 00                	add    BYTE PTR [eax],al
     dd3:	08 2e                	or     BYTE PTR [esi],ch
     dd5:	01 03                	add    DWORD PTR [ebx],eax
     dd7:	0e                   	push   cs
     dd8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dda:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ddc:	27                   	daa    
     ddd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     de0:	11 01                	adc    DWORD PTR [ecx],eax
     de2:	12 06                	adc    al,BYTE PTR [esi]
     de4:	40                   	inc    eax
     de5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     df3:	0b 3b                	or     edi,DWORD PTR [ebx]
     df5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     df8:	02 18                	add    bl,BYTE PTR [eax]
     dfa:	00 00                	add    BYTE PTR [eax],al
     dfc:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     dff:	03 08                	add    ecx,DWORD PTR [eax]
     e01:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e03:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e05:	49                   	dec    ecx
     e06:	13 02                	adc    eax,DWORD PTR [edx]
     e08:	18 00                	sbb    BYTE PTR [eax],al
     e0a:	00 0b                	add    BYTE PTR [ebx],cl
     e0c:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     e11:	0b 3b                	or     edi,DWORD PTR [ebx]
     e13:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e16:	02 18                	add    bl,BYTE PTR [eax]
     e18:	00 00                	add    BYTE PTR [eax],al
     e1a:	0c 34                	or     al,0x34
     e1c:	00 03                	add    BYTE PTR [ebx],al
     e1e:	0e                   	push   cs
     e1f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e21:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e23:	49                   	dec    ecx
     e24:	13 02                	adc    eax,DWORD PTR [edx]
     e26:	18 00                	sbb    BYTE PTR [eax],al
     e28:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     e2e:	12 06                	adc    al,BYTE PTR [esi]
     e30:	00 00                	add    BYTE PTR [eax],al
     e32:	0e                   	push   cs
     e33:	01 01                	add    DWORD PTR [ecx],eax
     e35:	49                   	dec    ecx
     e36:	13 01                	adc    eax,DWORD PTR [ecx]
     e38:	13 00                	adc    eax,DWORD PTR [eax]
     e3a:	00 0f                	add    BYTE PTR [edi],cl
     e3c:	21 00                	and    DWORD PTR [eax],eax
     e3e:	49                   	dec    ecx
     e3f:	13 2f                	adc    ebp,DWORD PTR [edi]
     e41:	0b 00                	or     eax,DWORD PTR [eax]
     e43:	00 10                	add    BYTE PTR [eax],dl
     e45:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e48:	19 03                	sbb    DWORD PTR [ebx],eax
     e4a:	0e                   	push   cs
     e4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e4f:	27                   	daa    
     e50:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e53:	11 01                	adc    DWORD PTR [ecx],eax
     e55:	12 06                	adc    al,BYTE PTR [esi]
     e57:	40                   	inc    eax
     e58:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e5e:	00 00                	add    BYTE PTR [eax],al
     e60:	11 0a                	adc    DWORD PTR [edx],ecx
     e62:	00 03                	add    BYTE PTR [ebx],al
     e64:	0e                   	push   cs
     e65:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e67:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e69:	11 01                	adc    DWORD PTR [ecx],eax
     e6b:	00 00                	add    BYTE PTR [eax],al
     e6d:	12 0b                	adc    cl,BYTE PTR [ebx]
     e6f:	01 11                	add    DWORD PTR [ecx],edx
     e71:	01 12                	add    DWORD PTR [edx],edx
     e73:	06                   	push   es
     e74:	01 13                	add    DWORD PTR [ebx],edx
     e76:	00 00                	add    BYTE PTR [eax],al
     e78:	13 2e                	adc    ebp,DWORD PTR [esi]
     e7a:	01 3f                	add    DWORD PTR [edi],edi
     e7c:	19 03                	sbb    DWORD PTR [ebx],eax
     e7e:	0e                   	push   cs
     e7f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e81:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     e87:	11 01                	adc    DWORD PTR [ecx],eax
     e89:	12 06                	adc    al,BYTE PTR [esi]
     e8b:	40                   	inc    eax
     e8c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	14 05                	adc    al,0x5
     e96:	00 03                	add    BYTE PTR [ebx],al
     e98:	08 3a                	or     BYTE PTR [edx],bh
     e9a:	0b 3b                	or     edi,DWORD PTR [ebx]
     e9c:	05 49 13 02 18       	add    eax,0x18021349
     ea1:	00 00                	add    BYTE PTR [eax],al
     ea3:	15 18 00 00 00       	adc    eax,0x18
     ea8:	16                   	push   ss
     ea9:	34 00                	xor    al,0x0
     eab:	03 0e                	add    ecx,DWORD PTR [esi]
     ead:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eaf:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     eb5:	00 00                	add    BYTE PTR [eax],al
     eb7:	17                   	pop    ss
     eb8:	34 00                	xor    al,0x0
     eba:	03 08                	add    ecx,DWORD PTR [eax]
     ebc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ebe:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     ec4:	00 00                	add    BYTE PTR [eax],al
     ec6:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     ec9:	03 0e                	add    ecx,DWORD PTR [esi]
     ecb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ecd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ecf:	49                   	dec    ecx
     ed0:	13 3f                	adc    edi,DWORD PTR [edi]
     ed2:	19 02                	sbb    DWORD PTR [edx],eax
     ed4:	18 00                	sbb    BYTE PTR [eax],al
     ed6:	00 00                	add    BYTE PTR [eax],al
     ed8:	01 11                	add    DWORD PTR [ecx],edx
     eda:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ee0:	0e                   	push   cs
     ee1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ee3:	11 01                	adc    DWORD PTR [ecx],eax
     ee5:	12 06                	adc    al,BYTE PTR [esi]
     ee7:	10 17                	adc    BYTE PTR [edi],dl
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     eee:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ef0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ef3:	0e                   	push   cs
     ef4:	00 00                	add    BYTE PTR [eax],al
     ef6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ef9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     efb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     efe:	08 00                	or     BYTE PTR [eax],al
     f00:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f03:	00 03                	add    BYTE PTR [ebx],al
     f05:	0e                   	push   cs
     f06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f0a:	49                   	dec    ecx
     f0b:	13 00                	adc    eax,DWORD PTR [eax]
     f0d:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f13:	49                   	dec    ecx
     f14:	13 00                	adc    eax,DWORD PTR [eax]
     f16:	00 06                	add    BYTE PTR [esi],al
     f18:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f1b:	19 03                	sbb    DWORD PTR [ebx],eax
     f1d:	0e                   	push   cs
     f1e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f20:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f22:	11 01                	adc    DWORD PTR [ecx],eax
     f24:	12 06                	adc    al,BYTE PTR [esi]
     f26:	40                   	inc    eax
     f27:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f2d:	00 00                	add    BYTE PTR [eax],al
     f2f:	07                   	pop    es
     f30:	34 00                	xor    al,0x0
     f32:	03 0e                	add    ecx,DWORD PTR [esi]
     f34:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f36:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f38:	49                   	dec    ecx
     f39:	13 02                	adc    eax,DWORD PTR [edx]
     f3b:	18 00                	sbb    BYTE PTR [eax],al
     f3d:	00 08                	add    BYTE PTR [eax],cl
     f3f:	01 01                	add    DWORD PTR [ecx],eax
     f41:	49                   	dec    ecx
     f42:	13 01                	adc    eax,DWORD PTR [ecx]
     f44:	13 00                	adc    eax,DWORD PTR [eax]
     f46:	00 09                	add    BYTE PTR [ecx],cl
     f48:	21 00                	and    DWORD PTR [eax],eax
     f4a:	49                   	dec    ecx
     f4b:	13 2f                	adc    ebp,DWORD PTR [edi]
     f4d:	0b 00                	or     eax,DWORD PTR [eax]
     f4f:	00 0a                	add    BYTE PTR [edx],cl
     f51:	34 00                	xor    al,0x0
     f53:	03 0e                	add    ecx,DWORD PTR [esi]
     f55:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f57:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f59:	49                   	dec    ecx
     f5a:	13 3f                	adc    edi,DWORD PTR [edi]
     f5c:	19 02                	sbb    DWORD PTR [edx],eax
     f5e:	18 00                	sbb    BYTE PTR [eax],al
     f60:	00 00                	add    BYTE PTR [eax],al
     f62:	01 11                	add    DWORD PTR [ecx],edx
     f64:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f6a:	0e                   	push   cs
     f6b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f6d:	11 01                	adc    DWORD PTR [ecx],eax
     f6f:	12 06                	adc    al,BYTE PTR [esi]
     f71:	10 17                	adc    BYTE PTR [edi],dl
     f73:	00 00                	add    BYTE PTR [eax],al
     f75:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f78:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f7a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f7d:	0e                   	push   cs
     f7e:	00 00                	add    BYTE PTR [eax],al
     f80:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f83:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f85:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f88:	08 00                	or     BYTE PTR [eax],al
     f8a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f8d:	00 03                	add    BYTE PTR [ebx],al
     f8f:	0e                   	push   cs
     f90:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f92:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f94:	49                   	dec    ecx
     f95:	13 00                	adc    eax,DWORD PTR [eax]
     f97:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f9d:	49                   	dec    ecx
     f9e:	13 00                	adc    eax,DWORD PTR [eax]
     fa0:	00 06                	add    BYTE PTR [esi],al
     fa2:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     fa6:	00 00                	add    BYTE PTR [eax],al
     fa8:	07                   	pop    es
     fa9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     fac:	19 03                	sbb    DWORD PTR [ebx],eax
     fae:	0e                   	push   cs
     faf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb3:	27                   	daa    
     fb4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fb7:	11 01                	adc    DWORD PTR [ecx],eax
     fb9:	12 06                	adc    al,BYTE PTR [esi]
     fbb:	40                   	inc    eax
     fbc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     fc2:	00 00                	add    BYTE PTR [eax],al
     fc4:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     fca:	0b 3b                	or     edi,DWORD PTR [ebx]
     fcc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fcf:	02 18                	add    bl,BYTE PTR [eax]
     fd1:	00 00                	add    BYTE PTR [eax],al
     fd3:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     fd9:	0b 3b                	or     edi,DWORD PTR [ebx]
     fdb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fde:	02 18                	add    bl,BYTE PTR [eax]
     fe0:	00 00                	add    BYTE PTR [eax],al
     fe2:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     fe5:	03 0e                	add    ecx,DWORD PTR [esi]
     fe7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fe9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     feb:	49                   	dec    ecx
     fec:	13 02                	adc    eax,DWORD PTR [edx]
     fee:	18 00                	sbb    BYTE PTR [eax],al
     ff0:	00 0b                	add    BYTE PTR [ebx],cl
     ff2:	34 00                	xor    al,0x0
     ff4:	03 0e                	add    ecx,DWORD PTR [esi]
     ff6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ffa:	49                   	dec    ecx
     ffb:	13 3f                	adc    edi,DWORD PTR [edi]
     ffd:	19 02                	sbb    DWORD PTR [edx],eax
     fff:	18 00                	sbb    BYTE PTR [eax],al
    1001:	00 00                	add    BYTE PTR [eax],al
    1003:	01 11                	add    DWORD PTR [ecx],edx
    1005:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    100b:	0e                   	push   cs
    100c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    100e:	11 01                	adc    DWORD PTR [ecx],eax
    1010:	12 06                	adc    al,BYTE PTR [esi]
    1012:	10 17                	adc    BYTE PTR [edi],dl
    1014:	00 00                	add    BYTE PTR [eax],al
    1016:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1019:	0b 0b                	or     ecx,DWORD PTR [ebx]
    101b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    101e:	0e                   	push   cs
    101f:	00 00                	add    BYTE PTR [eax],al
    1021:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1024:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1026:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1029:	08 00                	or     BYTE PTR [eax],al
    102b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    102e:	00 03                	add    BYTE PTR [ebx],al
    1030:	0e                   	push   cs
    1031:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1033:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1035:	49                   	dec    ecx
    1036:	13 00                	adc    eax,DWORD PTR [eax]
    1038:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    103e:	49                   	dec    ecx
    103f:	13 00                	adc    eax,DWORD PTR [eax]
    1041:	00 06                	add    BYTE PTR [esi],al
    1043:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1047:	00 00                	add    BYTE PTR [eax],al
    1049:	07                   	pop    es
    104a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    104d:	19 03                	sbb    DWORD PTR [ebx],eax
    104f:	0e                   	push   cs
    1050:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1052:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1054:	27                   	daa    
    1055:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1058:	11 01                	adc    DWORD PTR [ecx],eax
    105a:	12 06                	adc    al,BYTE PTR [esi]
    105c:	40                   	inc    eax
    105d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1063:	00 00                	add    BYTE PTR [eax],al
    1065:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    106b:	0b 3b                	or     edi,DWORD PTR [ebx]
    106d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1070:	02 18                	add    bl,BYTE PTR [eax]
    1072:	00 00                	add    BYTE PTR [eax],al
    1074:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1077:	03 08                	add    ecx,DWORD PTR [eax]
    1079:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    107b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    107d:	49                   	dec    ecx
    107e:	13 02                	adc    eax,DWORD PTR [edx]
    1080:	18 00                	sbb    BYTE PTR [eax],al
    1082:	00 0a                	add    BYTE PTR [edx],cl
    1084:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1087:	19 03                	sbb    DWORD PTR [ebx],eax
    1089:	0e                   	push   cs
    108a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    108c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    108e:	27                   	daa    
    108f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1092:	11 01                	adc    DWORD PTR [ecx],eax
    1094:	12 06                	adc    al,BYTE PTR [esi]
    1096:	40                   	inc    eax
    1097:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    109d:	00 00                	add    BYTE PTR [eax],al
    109f:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    10a2:	03 0e                	add    ecx,DWORD PTR [esi]
    10a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10a8:	49                   	dec    ecx
    10a9:	13 3f                	adc    edi,DWORD PTR [edi]
    10ab:	19 02                	sbb    DWORD PTR [edx],eax
    10ad:	18 00                	sbb    BYTE PTR [eax],al
    10af:	00 00                	add    BYTE PTR [eax],al
    10b1:	01 11                	add    DWORD PTR [ecx],edx
    10b3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10b9:	0e                   	push   cs
    10ba:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10bc:	11 01                	adc    DWORD PTR [ecx],eax
    10be:	12 06                	adc    al,BYTE PTR [esi]
    10c0:	10 17                	adc    BYTE PTR [edi],dl
    10c2:	00 00                	add    BYTE PTR [eax],al
    10c4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10c7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10c9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10cc:	0e                   	push   cs
    10cd:	00 00                	add    BYTE PTR [eax],al
    10cf:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10d2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10d4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10d7:	08 00                	or     BYTE PTR [eax],al
    10d9:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    10dc:	00 03                	add    BYTE PTR [ebx],al
    10de:	0e                   	push   cs
    10df:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10e1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10e3:	49                   	dec    ecx
    10e4:	13 00                	adc    eax,DWORD PTR [eax]
    10e6:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    10ec:	49                   	dec    ecx
    10ed:	13 00                	adc    eax,DWORD PTR [eax]
    10ef:	00 06                	add    BYTE PTR [esi],al
    10f1:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    10f5:	00 00                	add    BYTE PTR [eax],al
    10f7:	07                   	pop    es
    10f8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    10fb:	19 03                	sbb    DWORD PTR [ebx],eax
    10fd:	0e                   	push   cs
    10fe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1100:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1102:	27                   	daa    
    1103:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1106:	11 01                	adc    DWORD PTR [ecx],eax
    1108:	12 06                	adc    al,BYTE PTR [esi]
    110a:	40                   	inc    eax
    110b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1111:	00 00                	add    BYTE PTR [eax],al
    1113:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1119:	0b 3b                	or     edi,DWORD PTR [ebx]
    111b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    111e:	02 18                	add    bl,BYTE PTR [eax]
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1125:	03 08                	add    ecx,DWORD PTR [eax]
    1127:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1129:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112b:	49                   	dec    ecx
    112c:	13 02                	adc    eax,DWORD PTR [edx]
    112e:	18 00                	sbb    BYTE PTR [eax],al
    1130:	00 0a                	add    BYTE PTR [edx],cl
    1132:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1137:	0b 3b                	or     edi,DWORD PTR [ebx]
    1139:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    113c:	02 18                	add    bl,BYTE PTR [eax]
    113e:	00 00                	add    BYTE PTR [eax],al
    1140:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    1143:	03 0e                	add    ecx,DWORD PTR [esi]
    1145:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1147:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1149:	49                   	dec    ecx
    114a:	13 3f                	adc    edi,DWORD PTR [edi]
    114c:	19 02                	sbb    DWORD PTR [edx],eax
    114e:	18 00                	sbb    BYTE PTR [eax],al
    1150:	00 00                	add    BYTE PTR [eax],al
    1152:	01 11                	add    DWORD PTR [ecx],edx
    1154:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    115a:	0e                   	push   cs
    115b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    115d:	11 01                	adc    DWORD PTR [ecx],eax
    115f:	12 06                	adc    al,BYTE PTR [esi]
    1161:	10 17                	adc    BYTE PTR [edi],dl
    1163:	00 00                	add    BYTE PTR [eax],al
    1165:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1168:	0b 0b                	or     ecx,DWORD PTR [ebx]
    116a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    116d:	0e                   	push   cs
    116e:	00 00                	add    BYTE PTR [eax],al
    1170:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1173:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1175:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1178:	08 00                	or     BYTE PTR [eax],al
    117a:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    117d:	00 03                	add    BYTE PTR [ebx],al
    117f:	0e                   	push   cs
    1180:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1182:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1184:	49                   	dec    ecx
    1185:	13 00                	adc    eax,DWORD PTR [eax]
    1187:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    118d:	49                   	dec    ecx
    118e:	13 00                	adc    eax,DWORD PTR [eax]
    1190:	00 06                	add    BYTE PTR [esi],al
    1192:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1195:	19 03                	sbb    DWORD PTR [ebx],eax
    1197:	0e                   	push   cs
    1198:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    119a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    119c:	27                   	daa    
    119d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11a0:	11 01                	adc    DWORD PTR [ecx],eax
    11a2:	12 06                	adc    al,BYTE PTR [esi]
    11a4:	40                   	inc    eax
    11a5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11ab:	00 00                	add    BYTE PTR [eax],al
    11ad:	07                   	pop    es
    11ae:	05 00 03 08 3a       	add    eax,0x3a080300
    11b3:	0b 3b                	or     edi,DWORD PTR [ebx]
    11b5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11b8:	02 18                	add    bl,BYTE PTR [eax]
    11ba:	00 00                	add    BYTE PTR [eax],al
    11bc:	08 2e                	or     BYTE PTR [esi],ch
    11be:	01 3f                	add    DWORD PTR [edi],edi
    11c0:	19 03                	sbb    DWORD PTR [ebx],eax
    11c2:	0e                   	push   cs
    11c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11c7:	27                   	daa    
    11c8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11cb:	11 01                	adc    DWORD PTR [ecx],eax
    11cd:	12 06                	adc    al,BYTE PTR [esi]
    11cf:	40                   	inc    eax
    11d0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11d6:	00 00                	add    BYTE PTR [eax],al
    11d8:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    11db:	03 08                	add    ecx,DWORD PTR [eax]
    11dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11e1:	49                   	dec    ecx
    11e2:	13 02                	adc    eax,DWORD PTR [edx]
    11e4:	18 00                	sbb    BYTE PTR [eax],al
    11e6:	00 0a                	add    BYTE PTR [edx],cl
    11e8:	34 00                	xor    al,0x0
    11ea:	03 0e                	add    ecx,DWORD PTR [esi]
    11ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f0:	49                   	dec    ecx
    11f1:	13 3f                	adc    edi,DWORD PTR [edi]
    11f3:	19 02                	sbb    DWORD PTR [edx],eax
    11f5:	18 00                	sbb    BYTE PTR [eax],al
    11f7:	00 00                	add    BYTE PTR [eax],al
    11f9:	01 11                	add    DWORD PTR [ecx],edx
    11fb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1201:	0e                   	push   cs
    1202:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1204:	11 01                	adc    DWORD PTR [ecx],eax
    1206:	12 06                	adc    al,BYTE PTR [esi]
    1208:	10 17                	adc    BYTE PTR [edi],dl
    120a:	00 00                	add    BYTE PTR [eax],al
    120c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    120f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1211:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1214:	0e                   	push   cs
    1215:	00 00                	add    BYTE PTR [eax],al
    1217:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    121a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    121c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    121f:	08 00                	or     BYTE PTR [eax],al
    1221:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1224:	00 03                	add    BYTE PTR [ebx],al
    1226:	0e                   	push   cs
    1227:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1229:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    122b:	49                   	dec    ecx
    122c:	13 00                	adc    eax,DWORD PTR [eax]
    122e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1234:	49                   	dec    ecx
    1235:	13 00                	adc    eax,DWORD PTR [eax]
    1237:	00 06                	add    BYTE PTR [esi],al
    1239:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    123d:	00 00                	add    BYTE PTR [eax],al
    123f:	07                   	pop    es
    1240:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1243:	19 03                	sbb    DWORD PTR [ebx],eax
    1245:	0e                   	push   cs
    1246:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1248:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    124a:	27                   	daa    
    124b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    124e:	11 01                	adc    DWORD PTR [ecx],eax
    1250:	12 06                	adc    al,BYTE PTR [esi]
    1252:	40                   	inc    eax
    1253:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1259:	00 00                	add    BYTE PTR [eax],al
    125b:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1261:	0b 3b                	or     edi,DWORD PTR [ebx]
    1263:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1266:	02 18                	add    bl,BYTE PTR [eax]
    1268:	00 00                	add    BYTE PTR [eax],al
    126a:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    126d:	03 08                	add    ecx,DWORD PTR [eax]
    126f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1271:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1273:	49                   	dec    ecx
    1274:	13 02                	adc    eax,DWORD PTR [edx]
    1276:	18 00                	sbb    BYTE PTR [eax],al
    1278:	00 0a                	add    BYTE PTR [edx],cl
    127a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    127d:	19 03                	sbb    DWORD PTR [ebx],eax
    127f:	0e                   	push   cs
    1280:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1282:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1284:	27                   	daa    
    1285:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1288:	11 01                	adc    DWORD PTR [ecx],eax
    128a:	12 06                	adc    al,BYTE PTR [esi]
    128c:	40                   	inc    eax
    128d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1293:	00 00                	add    BYTE PTR [eax],al
    1295:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    129b:	0b 3b                	or     edi,DWORD PTR [ebx]
    129d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12a0:	02 18                	add    bl,BYTE PTR [eax]
    12a2:	00 00                	add    BYTE PTR [eax],al
    12a4:	0c 34                	or     al,0x34
    12a6:	00 03                	add    BYTE PTR [ebx],al
    12a8:	0e                   	push   cs
    12a9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12ad:	49                   	dec    ecx
    12ae:	13 3f                	adc    edi,DWORD PTR [edi]
    12b0:	19 02                	sbb    DWORD PTR [edx],eax
    12b2:	18 00                	sbb    BYTE PTR [eax],al
    12b4:	00 00                	add    BYTE PTR [eax],al
    12b6:	01 11                	add    DWORD PTR [ecx],edx
    12b8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12be:	0e                   	push   cs
    12bf:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12c1:	11 01                	adc    DWORD PTR [ecx],eax
    12c3:	12 06                	adc    al,BYTE PTR [esi]
    12c5:	10 17                	adc    BYTE PTR [edi],dl
    12c7:	00 00                	add    BYTE PTR [eax],al
    12c9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12ce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12d1:	08 00                	or     BYTE PTR [eax],al
    12d3:	00 03                	add    BYTE PTR [ebx],al
    12d5:	16                   	push   ss
    12d6:	00 03                	add    BYTE PTR [ebx],al
    12d8:	0e                   	push   cs
    12d9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12db:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12dd:	49                   	dec    ecx
    12de:	13 00                	adc    eax,DWORD PTR [eax]
    12e0:	00 04 24             	add    BYTE PTR [esp],al
    12e3:	00 0b                	add    BYTE PTR [ebx],cl
    12e5:	0b 3e                	or     edi,DWORD PTR [esi]
    12e7:	0b 03                	or     eax,DWORD PTR [ebx]
    12e9:	0e                   	push   cs
    12ea:	00 00                	add    BYTE PTR [eax],al
    12ec:	05 2e 01 3f 19       	add    eax,0x193f012e
    12f1:	03 0e                	add    ecx,DWORD PTR [esi]
    12f3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12f5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12f7:	27                   	daa    
    12f8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12fb:	11 01                	adc    DWORD PTR [ecx],eax
    12fd:	12 06                	adc    al,BYTE PTR [esi]
    12ff:	40                   	inc    eax
    1300:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1306:	00 00                	add    BYTE PTR [eax],al
    1308:	06                   	push   es
    1309:	05 00 03 08 3a       	add    eax,0x3a080300
    130e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1310:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1313:	02 18                	add    bl,BYTE PTR [eax]
    1315:	00 00                	add    BYTE PTR [eax],al
    1317:	07                   	pop    es
    1318:	0f 00 0b             	str    WORD PTR [ebx]
    131b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    131e:	00 00                	add    BYTE PTR [eax],al
    1320:	08 26                	or     BYTE PTR [esi],ah
    1322:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1325:	00 00                	add    BYTE PTR [eax],al
    1327:	09 2e                	or     DWORD PTR [esi],ebp
    1329:	01 3f                	add    DWORD PTR [edi],edi
    132b:	19 03                	sbb    DWORD PTR [ebx],eax
    132d:	0e                   	push   cs
    132e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1330:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1332:	27                   	daa    
    1333:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1336:	11 01                	adc    DWORD PTR [ecx],eax
    1338:	12 06                	adc    al,BYTE PTR [esi]
    133a:	40                   	inc    eax
    133b:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1341:	00 01                	add    BYTE PTR [ecx],al
    1343:	11 01                	adc    DWORD PTR [ecx],eax
    1345:	25 0e 13 0b 03       	and    eax,0x30b130e
    134a:	0e                   	push   cs
    134b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    134d:	11 01                	adc    DWORD PTR [ecx],eax
    134f:	12 06                	adc    al,BYTE PTR [esi]
    1351:	10 17                	adc    BYTE PTR [edi],dl
    1353:	00 00                	add    BYTE PTR [eax],al
    1355:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1358:	0b 0b                	or     ecx,DWORD PTR [ebx]
    135a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    135d:	08 00                	or     BYTE PTR [eax],al
    135f:	00 03                	add    BYTE PTR [ebx],al
    1361:	16                   	push   ss
    1362:	00 03                	add    BYTE PTR [ebx],al
    1364:	0e                   	push   cs
    1365:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1367:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1369:	49                   	dec    ecx
    136a:	13 00                	adc    eax,DWORD PTR [eax]
    136c:	00 04 24             	add    BYTE PTR [esp],al
    136f:	00 0b                	add    BYTE PTR [ebx],cl
    1371:	0b 3e                	or     edi,DWORD PTR [esi]
    1373:	0b 03                	or     eax,DWORD PTR [ebx]
    1375:	0e                   	push   cs
    1376:	00 00                	add    BYTE PTR [eax],al
    1378:	05 2e 01 3f 19       	add    eax,0x193f012e
    137d:	03 0e                	add    ecx,DWORD PTR [esi]
    137f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1381:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1383:	27                   	daa    
    1384:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1387:	11 01                	adc    DWORD PTR [ecx],eax
    1389:	12 06                	adc    al,BYTE PTR [esi]
    138b:	40                   	inc    eax
    138c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1392:	00 00                	add    BYTE PTR [eax],al
    1394:	06                   	push   es
    1395:	05 00 03 08 3a       	add    eax,0x3a080300
    139a:	0b 3b                	or     edi,DWORD PTR [ebx]
    139c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    139f:	02 18                	add    bl,BYTE PTR [eax]
    13a1:	00 00                	add    BYTE PTR [eax],al
    13a3:	07                   	pop    es
    13a4:	34 00                	xor    al,0x0
    13a6:	03 08                	add    ecx,DWORD PTR [eax]
    13a8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13aa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13ac:	49                   	dec    ecx
    13ad:	13 02                	adc    eax,DWORD PTR [edx]
    13af:	18 00                	sbb    BYTE PTR [eax],al
    13b1:	00 08                	add    BYTE PTR [eax],cl
    13b3:	0f 00 0b             	str    WORD PTR [ebx]
    13b6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13b9:	00 00                	add    BYTE PTR [eax],al
    13bb:	09 26                	or     DWORD PTR [esi],esp
    13bd:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    13c0:	00 00                	add    BYTE PTR [eax],al
    13c2:	0a 2e                	or     ch,BYTE PTR [esi]
    13c4:	01 3f                	add    DWORD PTR [edi],edi
    13c6:	19 03                	sbb    DWORD PTR [ebx],eax
    13c8:	0e                   	push   cs
    13c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13cd:	27                   	daa    
    13ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13d1:	11 01                	adc    DWORD PTR [ecx],eax
    13d3:	12 06                	adc    al,BYTE PTR [esi]
    13d5:	40                   	inc    eax
    13d6:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    13dc:	00 01                	add    BYTE PTR [ecx],al
    13de:	11 01                	adc    DWORD PTR [ecx],eax
    13e0:	25 0e 13 0b 03       	and    eax,0x30b130e
    13e5:	0e                   	push   cs
    13e6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13e8:	11 01                	adc    DWORD PTR [ecx],eax
    13ea:	12 06                	adc    al,BYTE PTR [esi]
    13ec:	10 17                	adc    BYTE PTR [edi],dl
    13ee:	00 00                	add    BYTE PTR [eax],al
    13f0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    13f3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13f5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13f8:	0e                   	push   cs
    13f9:	00 00                	add    BYTE PTR [eax],al
    13fb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    13fe:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1400:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1403:	08 00                	or     BYTE PTR [eax],al
    1405:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1408:	00 03                	add    BYTE PTR [ebx],al
    140a:	0e                   	push   cs
    140b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    140d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    140f:	49                   	dec    ecx
    1410:	13 00                	adc    eax,DWORD PTR [eax]
    1412:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1418:	49                   	dec    ecx
    1419:	13 00                	adc    eax,DWORD PTR [eax]
    141b:	00 06                	add    BYTE PTR [esi],al
    141d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1421:	00 00                	add    BYTE PTR [eax],al
    1423:	07                   	pop    es
    1424:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1427:	19 03                	sbb    DWORD PTR [ebx],eax
    1429:	0e                   	push   cs
    142a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    142c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    142e:	27                   	daa    
    142f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1432:	11 01                	adc    DWORD PTR [ecx],eax
    1434:	12 06                	adc    al,BYTE PTR [esi]
    1436:	40                   	inc    eax
    1437:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    143d:	00 00                	add    BYTE PTR [eax],al
    143f:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1445:	0b 3b                	or     edi,DWORD PTR [ebx]
    1447:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    144a:	02 18                	add    bl,BYTE PTR [eax]
    144c:	00 00                	add    BYTE PTR [eax],al
    144e:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1451:	03 08                	add    ecx,DWORD PTR [eax]
    1453:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1455:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1457:	49                   	dec    ecx
    1458:	13 02                	adc    eax,DWORD PTR [edx]
    145a:	18 00                	sbb    BYTE PTR [eax],al
    145c:	00 0a                	add    BYTE PTR [edx],cl
    145e:	34 00                	xor    al,0x0
    1460:	03 0e                	add    ecx,DWORD PTR [esi]
    1462:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1464:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1466:	49                   	dec    ecx
    1467:	13 00                	adc    eax,DWORD PTR [eax]
    1469:	00 0b                	add    BYTE PTR [ebx],cl
    146b:	34 00                	xor    al,0x0
    146d:	03 08                	add    ecx,DWORD PTR [eax]
    146f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1471:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1473:	49                   	dec    ecx
    1474:	13 00                	adc    eax,DWORD PTR [eax]
    1476:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1479:	00 03                	add    BYTE PTR [ebx],al
    147b:	0e                   	push   cs
    147c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    147e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1480:	49                   	dec    ecx
    1481:	13 02                	adc    eax,DWORD PTR [edx]
    1483:	18 00                	sbb    BYTE PTR [eax],al
    1485:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    148b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    148d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    148f:	49                   	dec    ecx
    1490:	13 3f                	adc    edi,DWORD PTR [edi]
    1492:	19 02                	sbb    DWORD PTR [edx],eax
    1494:	18 00                	sbb    BYTE PTR [eax],al
    1496:	00 00                	add    BYTE PTR [eax],al
    1498:	01 11                	add    DWORD PTR [ecx],edx
    149a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14a0:	0e                   	push   cs
    14a1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14a3:	11 01                	adc    DWORD PTR [ecx],eax
    14a5:	12 06                	adc    al,BYTE PTR [esi]
    14a7:	10 17                	adc    BYTE PTR [edi],dl
    14a9:	00 00                	add    BYTE PTR [eax],al
    14ab:	02 2e                	add    ch,BYTE PTR [esi]
    14ad:	01 3f                	add    DWORD PTR [edi],edi
    14af:	19 03                	sbb    DWORD PTR [ebx],eax
    14b1:	0e                   	push   cs
    14b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14b6:	27                   	daa    
    14b7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14ba:	11 01                	adc    DWORD PTR [ecx],eax
    14bc:	12 06                	adc    al,BYTE PTR [esi]
    14be:	40                   	inc    eax
    14bf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    14c5:	00 00                	add    BYTE PTR [eax],al
    14c7:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    14cd:	0b 3b                	or     edi,DWORD PTR [ebx]
    14cf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14d2:	02 18                	add    bl,BYTE PTR [eax]
    14d4:	00 00                	add    BYTE PTR [eax],al
    14d6:	04 0f                	add    al,0xf
    14d8:	00 0b                	add    BYTE PTR [ebx],cl
    14da:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14dd:	00 00                	add    BYTE PTR [eax],al
    14df:	05 24 00 0b 0b       	add    eax,0xb0b0024
    14e4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14e7:	0e                   	push   cs
    14e8:	00 00                	add    BYTE PTR [eax],al
    14ea:	06                   	push   es
    14eb:	24 00                	and    al,0x0
    14ed:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14ef:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14f2:	08 00                	or     BYTE PTR [eax],al
    14f4:	00 00                	add    BYTE PTR [eax],al
    14f6:	01 11                	add    DWORD PTR [ecx],edx
    14f8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14fe:	0e                   	push   cs
    14ff:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1501:	11 01                	adc    DWORD PTR [ecx],eax
    1503:	12 06                	adc    al,BYTE PTR [esi]
    1505:	10 17                	adc    BYTE PTR [edi],dl
    1507:	00 00                	add    BYTE PTR [eax],al
    1509:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    150c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    150e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1511:	0e                   	push   cs
    1512:	00 00                	add    BYTE PTR [eax],al
    1514:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1517:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1519:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    151c:	08 00                	or     BYTE PTR [eax],al
    151e:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1521:	00 03                	add    BYTE PTR [ebx],al
    1523:	0e                   	push   cs
    1524:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1526:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1528:	49                   	dec    ecx
    1529:	13 00                	adc    eax,DWORD PTR [eax]
    152b:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1531:	49                   	dec    ecx
    1532:	13 00                	adc    eax,DWORD PTR [eax]
    1534:	00 06                	add    BYTE PTR [esi],al
    1536:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    153a:	00 00                	add    BYTE PTR [eax],al
    153c:	07                   	pop    es
    153d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1540:	19 03                	sbb    DWORD PTR [ebx],eax
    1542:	0e                   	push   cs
    1543:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1545:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1547:	27                   	daa    
    1548:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    154b:	11 01                	adc    DWORD PTR [ecx],eax
    154d:	12 06                	adc    al,BYTE PTR [esi]
    154f:	40                   	inc    eax
    1550:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1556:	00 00                	add    BYTE PTR [eax],al
    1558:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    155e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1560:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1563:	02 18                	add    bl,BYTE PTR [eax]
    1565:	00 00                	add    BYTE PTR [eax],al
    1567:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    156a:	03 08                	add    ecx,DWORD PTR [eax]
    156c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    156e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1570:	49                   	dec    ecx
    1571:	13 02                	adc    eax,DWORD PTR [edx]
    1573:	18 00                	sbb    BYTE PTR [eax],al
    1575:	00 0a                	add    BYTE PTR [edx],cl
    1577:	34 00                	xor    al,0x0
    1579:	03 0e                	add    ecx,DWORD PTR [esi]
    157b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    157d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    157f:	49                   	dec    ecx
    1580:	13 00                	adc    eax,DWORD PTR [eax]
    1582:	00 0b                	add    BYTE PTR [ebx],cl
    1584:	34 00                	xor    al,0x0
    1586:	03 08                	add    ecx,DWORD PTR [eax]
    1588:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    158a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    158c:	49                   	dec    ecx
    158d:	13 00                	adc    eax,DWORD PTR [eax]
    158f:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1592:	00 03                	add    BYTE PTR [ebx],al
    1594:	0e                   	push   cs
    1595:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1597:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1599:	49                   	dec    ecx
    159a:	13 3f                	adc    edi,DWORD PTR [edi]
    159c:	19 02                	sbb    DWORD PTR [edx],eax
    159e:	18 00                	sbb    BYTE PTR [eax],al
    15a0:	00 00                	add    BYTE PTR [eax],al
    15a2:	01 11                	add    DWORD PTR [ecx],edx
    15a4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    15aa:	0e                   	push   cs
    15ab:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    15ad:	11 01                	adc    DWORD PTR [ecx],eax
    15af:	12 06                	adc    al,BYTE PTR [esi]
    15b1:	10 17                	adc    BYTE PTR [edi],dl
    15b3:	00 00                	add    BYTE PTR [eax],al
    15b5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    15b8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15ba:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15bd:	0e                   	push   cs
    15be:	00 00                	add    BYTE PTR [eax],al
    15c0:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    15c3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15c5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15c8:	08 00                	or     BYTE PTR [eax],al
    15ca:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    15cd:	00 03                	add    BYTE PTR [ebx],al
    15cf:	0e                   	push   cs
    15d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15d4:	49                   	dec    ecx
    15d5:	13 00                	adc    eax,DWORD PTR [eax]
    15d7:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    15dd:	49                   	dec    ecx
    15de:	13 00                	adc    eax,DWORD PTR [eax]
    15e0:	00 06                	add    BYTE PTR [esi],al
    15e2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    15e5:	19 03                	sbb    DWORD PTR [ebx],eax
    15e7:	0e                   	push   cs
    15e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15ec:	27                   	daa    
    15ed:	19 11                	sbb    DWORD PTR [ecx],edx
    15ef:	01 12                	add    DWORD PTR [edx],edx
    15f1:	06                   	push   es
    15f2:	40                   	inc    eax
    15f3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    15f9:	00 00                	add    BYTE PTR [eax],al
    15fb:	07                   	pop    es
    15fc:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1601:	0b 3b                	or     edi,DWORD PTR [ebx]
    1603:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1606:	02 18                	add    bl,BYTE PTR [eax]
    1608:	00 00                	add    BYTE PTR [eax],al
    160a:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    160d:	03 08                	add    ecx,DWORD PTR [eax]
    160f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1611:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1613:	49                   	dec    ecx
    1614:	13 02                	adc    eax,DWORD PTR [edx]
    1616:	18 00                	sbb    BYTE PTR [eax],al
    1618:	00 09                	add    BYTE PTR [ecx],cl
    161a:	34 00                	xor    al,0x0
    161c:	03 0e                	add    ecx,DWORD PTR [esi]
    161e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1620:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1622:	49                   	dec    ecx
    1623:	13 3f                	adc    edi,DWORD PTR [edi]
    1625:	19 02                	sbb    DWORD PTR [edx],eax
    1627:	18 00                	sbb    BYTE PTR [eax],al
    1629:	00 00                	add    BYTE PTR [eax],al
    162b:	01 11                	add    DWORD PTR [ecx],edx
    162d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1633:	0e                   	push   cs
    1634:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1636:	11 01                	adc    DWORD PTR [ecx],eax
    1638:	12 06                	adc    al,BYTE PTR [esi]
    163a:	10 17                	adc    BYTE PTR [edi],dl
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1641:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1643:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1646:	0e                   	push   cs
    1647:	00 00                	add    BYTE PTR [eax],al
    1649:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    164c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    164e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1651:	08 00                	or     BYTE PTR [eax],al
    1653:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1656:	00 03                	add    BYTE PTR [ebx],al
    1658:	0e                   	push   cs
    1659:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    165b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    165d:	49                   	dec    ecx
    165e:	13 00                	adc    eax,DWORD PTR [eax]
    1660:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1666:	49                   	dec    ecx
    1667:	13 00                	adc    eax,DWORD PTR [eax]
    1669:	00 06                	add    BYTE PTR [esi],al
    166b:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    166f:	00 00                	add    BYTE PTR [eax],al
    1671:	07                   	pop    es
    1672:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1675:	19 03                	sbb    DWORD PTR [ebx],eax
    1677:	0e                   	push   cs
    1678:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    167a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    167c:	27                   	daa    
    167d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1680:	11 01                	adc    DWORD PTR [ecx],eax
    1682:	12 06                	adc    al,BYTE PTR [esi]
    1684:	40                   	inc    eax
    1685:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    168b:	00 00                	add    BYTE PTR [eax],al
    168d:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1693:	0b 3b                	or     edi,DWORD PTR [ebx]
    1695:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1698:	02 18                	add    bl,BYTE PTR [eax]
    169a:	00 00                	add    BYTE PTR [eax],al
    169c:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    16a2:	0b 3b                	or     edi,DWORD PTR [ebx]
    16a4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    16a7:	02 18                	add    bl,BYTE PTR [eax]
    16a9:	00 00                	add    BYTE PTR [eax],al
    16ab:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    16ae:	03 0e                	add    ecx,DWORD PTR [esi]
    16b0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16b2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16b4:	49                   	dec    ecx
    16b5:	13 02                	adc    eax,DWORD PTR [edx]
    16b7:	18 00                	sbb    BYTE PTR [eax],al
    16b9:	00 0b                	add    BYTE PTR [ebx],cl
    16bb:	34 00                	xor    al,0x0
    16bd:	03 0e                	add    ecx,DWORD PTR [esi]
    16bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16c3:	49                   	dec    ecx
    16c4:	13 3f                	adc    edi,DWORD PTR [edi]
    16c6:	19 02                	sbb    DWORD PTR [edx],eax
    16c8:	18 00                	sbb    BYTE PTR [eax],al
    16ca:	00 00                	add    BYTE PTR [eax],al
    16cc:	01 11                	add    DWORD PTR [ecx],edx
    16ce:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    16d4:	0e                   	push   cs
    16d5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16d7:	11 01                	adc    DWORD PTR [ecx],eax
    16d9:	12 06                	adc    al,BYTE PTR [esi]
    16db:	10 17                	adc    BYTE PTR [edi],dl
    16dd:	00 00                	add    BYTE PTR [eax],al
    16df:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    16e2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16e4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16e7:	0e                   	push   cs
    16e8:	00 00                	add    BYTE PTR [eax],al
    16ea:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    16ed:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16ef:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16f2:	08 00                	or     BYTE PTR [eax],al
    16f4:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    16f7:	00 03                	add    BYTE PTR [ebx],al
    16f9:	0e                   	push   cs
    16fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16fe:	49                   	dec    ecx
    16ff:	13 00                	adc    eax,DWORD PTR [eax]
    1701:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1707:	49                   	dec    ecx
    1708:	13 00                	adc    eax,DWORD PTR [eax]
    170a:	00 06                	add    BYTE PTR [esi],al
    170c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1710:	00 00                	add    BYTE PTR [eax],al
    1712:	07                   	pop    es
    1713:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1716:	19 03                	sbb    DWORD PTR [ebx],eax
    1718:	0e                   	push   cs
    1719:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    171b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    171d:	27                   	daa    
    171e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1721:	11 01                	adc    DWORD PTR [ecx],eax
    1723:	12 06                	adc    al,BYTE PTR [esi]
    1725:	40                   	inc    eax
    1726:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    172c:	00 00                	add    BYTE PTR [eax],al
    172e:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1734:	0b 3b                	or     edi,DWORD PTR [ebx]
    1736:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1739:	02 18                	add    bl,BYTE PTR [eax]
    173b:	00 00                	add    BYTE PTR [eax],al
    173d:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1740:	03 08                	add    ecx,DWORD PTR [eax]
    1742:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1744:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1746:	49                   	dec    ecx
    1747:	13 02                	adc    eax,DWORD PTR [edx]
    1749:	18 00                	sbb    BYTE PTR [eax],al
    174b:	00 0a                	add    BYTE PTR [edx],cl
    174d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1750:	19 03                	sbb    DWORD PTR [ebx],eax
    1752:	0e                   	push   cs
    1753:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1755:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1757:	27                   	daa    
    1758:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    175b:	11 01                	adc    DWORD PTR [ecx],eax
    175d:	12 06                	adc    al,BYTE PTR [esi]
    175f:	40                   	inc    eax
    1760:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1766:	00 00                	add    BYTE PTR [eax],al
    1768:	0b 01                	or     eax,DWORD PTR [ecx]
    176a:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    176d:	01 13                	add    DWORD PTR [ebx],edx
    176f:	00 00                	add    BYTE PTR [eax],al
    1771:	0c 21                	or     al,0x21
    1773:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1776:	2f                   	das    
    1777:	0b 00                	or     eax,DWORD PTR [eax]
    1779:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    177f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1781:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1783:	49                   	dec    ecx
    1784:	13 02                	adc    eax,DWORD PTR [edx]
    1786:	18 00                	sbb    BYTE PTR [eax],al
    1788:	00 0e                	add    BYTE PTR [esi],cl
    178a:	34 00                	xor    al,0x0
    178c:	03 0e                	add    ecx,DWORD PTR [esi]
    178e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1790:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1792:	49                   	dec    ecx
    1793:	13 3f                	adc    edi,DWORD PTR [edi]
    1795:	19 02                	sbb    DWORD PTR [edx],eax
    1797:	18 00                	sbb    BYTE PTR [eax],al
    1799:	00 00                	add    BYTE PTR [eax],al
    179b:	01 11                	add    DWORD PTR [ecx],edx
    179d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    17a3:	0e                   	push   cs
    17a4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    17a6:	11 01                	adc    DWORD PTR [ecx],eax
    17a8:	12 06                	adc    al,BYTE PTR [esi]
    17aa:	10 17                	adc    BYTE PTR [edi],dl
    17ac:	00 00                	add    BYTE PTR [eax],al
    17ae:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17b1:	03 0e                	add    ecx,DWORD PTR [esi]
    17b3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17b5:	49                   	dec    ecx
    17b6:	13 3a                	adc    edi,DWORD PTR [edx]
    17b8:	0b 3b                	or     edi,DWORD PTR [ebx]
    17ba:	0b 01                	or     eax,DWORD PTR [ecx]
    17bc:	13 00                	adc    eax,DWORD PTR [eax]
    17be:	00 03                	add    BYTE PTR [ebx],al
    17c0:	28 00                	sub    BYTE PTR [eax],al
    17c2:	03 0e                	add    ecx,DWORD PTR [esi]
    17c4:	1c 0b                	sbb    al,0xb
    17c6:	00 00                	add    BYTE PTR [eax],al
    17c8:	04 28                	add    al,0x28
    17ca:	00 03                	add    BYTE PTR [ebx],al
    17cc:	0e                   	push   cs
    17cd:	1c 05                	sbb    al,0x5
    17cf:	00 00                	add    BYTE PTR [eax],al
    17d1:	05 24 00 0b 0b       	add    eax,0xb0b0024
    17d6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    17d9:	0e                   	push   cs
    17da:	00 00                	add    BYTE PTR [eax],al
    17dc:	06                   	push   es
    17dd:	24 00                	and    al,0x0
    17df:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17e1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    17e4:	08 00                	or     BYTE PTR [eax],al
    17e6:	00 07                	add    BYTE PTR [edi],al
    17e8:	16                   	push   ss
    17e9:	00 03                	add    BYTE PTR [ebx],al
    17eb:	0e                   	push   cs
    17ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17f0:	49                   	dec    ecx
    17f1:	13 00                	adc    eax,DWORD PTR [eax]
    17f3:	00 08                	add    BYTE PTR [eax],cl
    17f5:	13 01                	adc    eax,DWORD PTR [ecx]
    17f7:	03 08                	add    ecx,DWORD PTR [eax]
    17f9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17ff:	01 13                	add    DWORD PTR [ebx],edx
    1801:	00 00                	add    BYTE PTR [eax],al
    1803:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1809:	0b 3b                	or     edi,DWORD PTR [ebx]
    180b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    180e:	38 0b                	cmp    BYTE PTR [ebx],cl
    1810:	00 00                	add    BYTE PTR [eax],al
    1812:	0a 0f                	or     cl,BYTE PTR [edi]
    1814:	00 0b                	add    BYTE PTR [ebx],cl
    1816:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1819:	00 00                	add    BYTE PTR [eax],al
    181b:	0b 26                	or     esp,DWORD PTR [esi]
    181d:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1820:	00 00                	add    BYTE PTR [eax],al
    1822:	0c 2e                	or     al,0x2e
    1824:	01 3f                	add    DWORD PTR [edi],edi
    1826:	19 03                	sbb    DWORD PTR [ebx],eax
    1828:	0e                   	push   cs
    1829:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    182b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    182d:	49                   	dec    ecx
    182e:	13 11                	adc    edx,DWORD PTR [ecx]
    1830:	01 12                	add    DWORD PTR [edx],edx
    1832:	06                   	push   es
    1833:	40                   	inc    eax
    1834:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    183a:	00 00                	add    BYTE PTR [eax],al
    183c:	0d 34 00 03 0e       	or     eax,0xe030034
    1841:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1843:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1845:	49                   	dec    ecx
    1846:	13 02                	adc    eax,DWORD PTR [edx]
    1848:	18 00                	sbb    BYTE PTR [eax],al
    184a:	00 0e                	add    BYTE PTR [esi],cl
    184c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    184f:	19 03                	sbb    DWORD PTR [ebx],eax
    1851:	0e                   	push   cs
    1852:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1854:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1856:	27                   	daa    
    1857:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    185a:	11 01                	adc    DWORD PTR [ecx],eax
    185c:	12 06                	adc    al,BYTE PTR [esi]
    185e:	40                   	inc    eax
    185f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1865:	00 00                	add    BYTE PTR [eax],al
    1867:	0f 05                	syscall 
    1869:	00 03                	add    BYTE PTR [ebx],al
    186b:	0e                   	push   cs
    186c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    186e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1870:	49                   	dec    ecx
    1871:	13 02                	adc    eax,DWORD PTR [edx]
    1873:	18 00                	sbb    BYTE PTR [eax],al
    1875:	00 10                	add    BYTE PTR [eax],dl
    1877:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    187a:	19 03                	sbb    DWORD PTR [ebx],eax
    187c:	0e                   	push   cs
    187d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    187f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1881:	27                   	daa    
    1882:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1885:	11 01                	adc    DWORD PTR [ecx],eax
    1887:	12 06                	adc    al,BYTE PTR [esi]
    1889:	40                   	inc    eax
    188a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1890:	00 00                	add    BYTE PTR [eax],al
    1892:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1895:	03 08                	add    ecx,DWORD PTR [eax]
    1897:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1899:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    189b:	49                   	dec    ecx
    189c:	13 02                	adc    eax,DWORD PTR [edx]
    189e:	18 00                	sbb    BYTE PTR [eax],al
    18a0:	00 12                	add    BYTE PTR [edx],dl
    18a2:	34 00                	xor    al,0x0
    18a4:	03 0e                	add    ecx,DWORD PTR [esi]
    18a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18aa:	49                   	dec    ecx
    18ab:	13 3f                	adc    edi,DWORD PTR [edi]
    18ad:	19 02                	sbb    DWORD PTR [edx],eax
    18af:	18 00                	sbb    BYTE PTR [eax],al
    18b1:	00 13                	add    BYTE PTR [ebx],dl
    18b3:	01 01                	add    DWORD PTR [ecx],eax
    18b5:	49                   	dec    ecx
    18b6:	13 01                	adc    eax,DWORD PTR [ecx]
    18b8:	13 00                	adc    eax,DWORD PTR [eax]
    18ba:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    18bd:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    18c0:	2f                   	das    
    18c1:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	96                   	xchg   esi,eax
  27:	01 00                	add    DWORD PTR [eax],eax
  29:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	34 05                	xor    al,0x5
  68:	00 00                	add    BYTE PTR [eax],al
  6a:	04 00                	add    al,0x0
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	4c                   	dec    esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	7d 07                	jge    8f <sysEnter_Vector-0x12ff71>
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	98                   	cwde   
  91:	04 00                	add    al,0x0
  93:	9f                   	lahf   
  94:	6e                   	outs   dx,BYTE PTR ds:[esi]
  95:	01 00                	add    DWORD PTR [eax],eax
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	7a 09                	jp     b1 <sysEnter_Vector-0x12ff4f>
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	08 06                	or     BYTE PTR [esi],al
  b2:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	04 0d                	add    al,0xd
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	e8 08 00 9f f2       	call   f29f00dd <tmbuf+0x539e8e9d>
  d5:	07                   	pop    es
	...
  de:	00 00                	add    BYTE PTR [eax],al
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	af                   	scas   eax,DWORD PTR es:[edi]
  e7:	15 00 00 04 00       	adc    eax,0x40000
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	dc 10                	fcom   QWORD PTR [eax]
  f2:	00 9f 69 01 00 00    	add    BYTE PTR [edi+0x169],bl
	...
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	cd 18                	int    0x18
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	48                   	dec    eax
 111:	12 00                	adc    al,BYTE PTR [eax]
 113:	9f                   	lahf   
 114:	c4 0c 00             	les    ecx,FWORD PTR [eax+eax*1]
	...
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	27                   	daa    
 127:	24 00                	and    al,0x0
 129:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	0c 1f                	or     al,0x1f
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	37                   	aaa    
 147:	27                   	daa    
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	80 1f 00             	sbb    BYTE PTR [edi],0x0
 153:	9f                   	lahf   
 154:	f0 05 00 00 00 00    	lock add eax,0x0
 15a:	00 00                	add    BYTE PTR [eax],al
 15c:	00 00                	add    BYTE PTR [eax],al
 15e:	00 00                	add    BYTE PTR [eax],al
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	85 2c 00             	test   DWORD PTR [eax+eax*1],ebp
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	70 25                	jo     197 <sysEnter_Vector-0x12fe69>
 172:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
	...
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	e8 2e 00 00 04       	call   40001b9 <sysEnter_Vector+0x3ed01b9>
 18b:	00 00                	add    BYTE PTR [eax],al
 18d:	00 00                	add    BYTE PTR [eax],al
 18f:	00 2c 27             	add    BYTE PTR [edi+eiz*1],ch
 192:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	0a 31                	or     dh,BYTE PTR [ecx]
 1a8:	00 00                	add    BYTE PTR [eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	14 28                	adc    al,0x28
 1b2:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
	...
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	97                   	xchg   edi,eax
 1c7:	33 00                	xor    eax,DWORD PTR [eax]
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	6c                   	ins    BYTE PTR es:[edi],dx
 1d1:	28 00                	sub    BYTE PTR [eax],al
 1d3:	9f                   	lahf   
 1d4:	18 07                	sbb    BYTE PTR [edi],al
	...
 1de:	00 00                	add    BYTE PTR [eax],al
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	8b 37                	mov    esi,DWORD PTR [edi]
 1e8:	00 00                	add    BYTE PTR [eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	84 2f                	test   BYTE PTR [edi],ch
 1f2:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
	...
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	f4                   	hlt    
 207:	38 00                	cmp    BYTE PTR [eax],al
 209:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	08 30                	or     BYTE PTR [eax],dh
 212:	00 9f 11 01 00 00    	add    BYTE PTR [edi+0x111],bl
	...
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	3d 3b 00 00 04       	cmp    eax,0x400003b
 22b:	00 00                	add    BYTE PTR [eax],al
 22d:	00 00                	add    BYTE PTR [eax],al
 22f:	00 1c 31             	add    BYTE PTR [ecx+esi*1],bl
 232:	00 9f 7b 00 00 00    	add    BYTE PTR [edi+0x7b],bl
	...
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	14 3d                	adc    al,0x3d
 248:	00 00                	add    BYTE PTR [eax],al
 24a:	04 00                	add    al,0x0
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	98                   	cwde   
 251:	31 00                	xor    DWORD PTR [eax],eax
 253:	9f                   	lahf   
 254:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 25a:	00 00                	add    BYTE PTR [eax],al
 25c:	00 00                	add    BYTE PTR [eax],al
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	14 3f                	adc    al,0x3f
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	60                   	pusha  
 271:	32 00                	xor    al,BYTE PTR [eax]
 273:	9f                   	lahf   
 274:	89 00                	mov    DWORD PTR [eax],eax
	...
 27e:	00 00                	add    BYTE PTR [eax],al
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	97                   	xchg   edi,eax
 287:	40                   	inc    eax
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	ec                   	in     al,dx
 291:	32 00                	xor    al,BYTE PTR [eax]
 293:	9f                   	lahf   
 294:	a2 00 00 00 00       	mov    ds:0x0,al
 299:	00 00                	add    BYTE PTR [eax],al
 29b:	00 00                	add    BYTE PTR [eax],al
 29d:	00 00                	add    BYTE PTR [eax],al
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	ac                   	lods   al,BYTE PTR ds:[esi]
 2a7:	42                   	inc    edx
 2a8:	00 00                	add    BYTE PTR [eax],al
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	90                   	nop
 2b1:	33 00                	xor    eax,DWORD PTR [eax]
 2b3:	9f                   	lahf   
 2b4:	ce                   	into   
	...
 2bd:	00 00                	add    BYTE PTR [eax],al
 2bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	8e 43 00             	mov    es,WORD PTR [ebx+0x0]
 2c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	60                   	pusha  
 2d1:	34 00                	xor    al,0x0
 2d3:	9f                   	lahf   
 2d4:	8c 00                	mov    WORD PTR [eax],es
	...
 2de:	00 00                	add    BYTE PTR [eax],al
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	82                   	(bad)  
 2e7:	44                   	inc    esp
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	ec                   	in     al,dx
 2f1:	34 00                	xor    al,0x0
 2f3:	9f                   	lahf   
 2f4:	7d 01                	jge    2f7 <sysEnter_Vector-0x12fd09>
	...
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	4b                   	dec    ebx
 307:	46                   	inc    esi
 308:	00 00                	add    BYTE PTR [eax],al
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	6c                   	ins    BYTE PTR es:[edi],dx
 311:	36 00 9f 1d 00 00 00 	add    BYTE PTR ss:[edi+0x1d],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	bb 46 00 00 04       	mov    ebx,0x4000046
 32b:	00 00                	add    BYTE PTR [eax],al
 32d:	00 00                	add    BYTE PTR [eax],al
 32f:	00 8c 36 00 9f 9c 01 	add    BYTE PTR [esi+esi*1+0x19c9f00],cl
	...
 33e:	00 00                	add    BYTE PTR [eax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	82                   	(bad)  
 347:	48                   	dec    eax
 348:	00 00                	add    BYTE PTR [eax],al
 34a:	04 00                	add    al,0x0
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	28 38                	sub    BYTE PTR [eax],bh
 352:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	1b 4a 00             	sbb    ecx,DWORD PTR [edx+0x0]
 369:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	e0 38                	loopne 3aa <sysEnter_Vector-0x12fc56>
 372:	00 9f 44 01 00 00    	add    BYTE PTR [edi+0x144],bl
	...
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	22 4c 00 00          	and    cl,BYTE PTR [eax+eax*1+0x0]
 38a:	04 00                	add    al,0x0
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	24 3a                	and    al,0x3a
 392:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	5f                   	pop    edi
 3a7:	4e                   	dec    esi
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	50                   	push   eax
 3b1:	3b 00                	cmp    eax,DWORD PTR [eax]
 3b3:	9f                   	lahf   
 3b4:	0e                   	push   cs
 3b5:	0d 00 00 00 00       	or     eax,0x0
 3ba:	00 00                	add    BYTE PTR [eax],al
 3bc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	da 00                	fiadd  DWORD PTR [eax]
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	ba 00 00 00 01       	mov    edx,0x1000000
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	2f                   	das    
      3c:	68 6f 6d 65 2f       	push   0x2f656d6f
      41:	79 6f                	jns    b2 <sysEnter_Vector-0x12ff4e>
      43:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      4a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      4d:	73 73                	jae    c2 <sysEnter_Vector-0x12ff3e>
      4f:	2f                   	das    
      50:	6c                   	ins    BYTE PTR es:[edi],dx
      51:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      58:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      5e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      64:	78 2d                	js     93 <sysEnter_Vector-0x12ff6d>
      66:	67 6e                	outs   dx,BYTE PTR ds:[si]
      68:	75 2f                	jne    99 <sysEnter_Vector-0x12ff67>
      6a:	35 2e 33 2e 30       	xor    eax,0x302e332e
      6f:	2f                   	das    
      70:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      77:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
      7a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
      7e:	65 00 00             	add    BYTE PTR gs:[eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      8f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      96:	63 
      97:	2e                   	cs
      98:	68 00 02 00 00       	push   0x200
      9d:	6d                   	ins    DWORD PTR es:[edi],dx
      9e:	61                   	popa   
      9f:	6c                   	ins    BYTE PTR es:[edi],dx
      a0:	6c                   	ins    BYTE PTR es:[edi],dx
      a1:	6f                   	outs   dx,DWORD PTR ds:[esi]
      a2:	63 2e                	arpl   WORD PTR [esi],bp
      a4:	68 00 03 00 00       	push   0x300
      a9:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
      b0:	03 00                	add    eax,DWORD PTR [eax]
      b2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
      b6:	43                   	inc    ebx
      b7:	68 72 69 73 4f       	push   0x4f736972
      bc:	53                   	push   ebx
      bd:	2e                   	cs
      be:	68 00 03 00 00       	push   0x300
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	05 02 00 00 00       	add    eax,0x2
      ca:	9f                   	lahf   
      cb:	1a c9                	sbb    cl,cl
      cd:	2f                   	das    
      ce:	f3 72 cb             	repz jb 9c <sysEnter_Vector-0x12ff64>
      d1:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      d6:	72 cb                	jb     a3 <sysEnter_Vector-0x12ff5d>
      d8:	3d 02 02 00 01       	cmp    eax,0x1000202
      dd:	01 0d 01 00 00 02    	add    DWORD PTR ds:0x2000001,ecx
      e3:	00 bb 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],bh
      e9:	01 fb                	add    ebx,edi
      eb:	0e                   	push   cs
      ec:	0d 00 01 01 01       	or     eax,0x1010100
      f1:	01 00                	add    DWORD PTR [eax],eax
      f3:	00 00                	add    BYTE PTR [eax],al
      f5:	01 00                	add    DWORD PTR [eax],eax
      f7:	00 01                	add    BYTE PTR [ecx],al
      f9:	2e                   	cs
      fa:	2e                   	cs
      fb:	2f                   	das    
      fc:	2e                   	cs
      fd:	2e                   	cs
      fe:	2f                   	das    
      ff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     103:	6a 2f                	push   0x2f
     105:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     108:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     10f:	63 2f                	arpl   WORD PTR [edi],bp
     111:	73 74                	jae    187 <sysEnter_Vector-0x12fe79>
     113:	72 69                	jb     17e <sysEnter_Vector-0x12fe82>
     115:	6e                   	outs   dx,BYTE PTR ds:[esi]
     116:	67 73 00             	addr16 jae 119 <sysEnter_Vector-0x12fee7>
     119:	2f                   	das    
     11a:	68 6f 6d 65 2f       	push   0x2f656d6f
     11f:	79 6f                	jns    190 <sysEnter_Vector-0x12fe70>
     121:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     128:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     12b:	73 73                	jae    1a0 <sysEnter_Vector-0x12fe60>
     12d:	2f                   	das    
     12e:	6c                   	ins    BYTE PTR es:[edi],dx
     12f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     136:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     142:	78 2d                	js     171 <sysEnter_Vector-0x12fe8f>
     144:	67 6e                	outs   dx,BYTE PTR ds:[si]
     146:	75 2f                	jne    177 <sysEnter_Vector-0x12fe89>
     148:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14d:	2f                   	das    
     14e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     155:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     158:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     15c:	65 00 00             	add    BYTE PTR gs:[eax],al
     15f:	73 74                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     161:	72 63                	jb     1c6 <sysEnter_Vector-0x12fe3a>
     163:	73 70                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     165:	6e                   	outs   dx,BYTE PTR ds:[esi]
     166:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     175:	63 
     176:	2e                   	cs
     177:	68 00 02 00 00       	push   0x200
     17c:	6d                   	ins    DWORD PTR es:[edi],dx
     17d:	61                   	popa   
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	6c                   	ins    BYTE PTR es:[edi],dx
     180:	6f                   	outs   dx,DWORD PTR ds:[esi]
     181:	63 2e                	arpl   WORD PTR [esi],bp
     183:	68 00 03 00 00       	push   0x300
     188:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     18f:	03 00                	add    eax,DWORD PTR [eax]
     191:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     195:	43                   	inc    ebx
     196:	68 72 69 73 4f       	push   0x4f736972
     19b:	53                   	push   ebx
     19c:	2e                   	cs
     19d:	68 00 03 00 00       	push   0x300
     1a2:	00 00                	add    BYTE PTR [eax],al
     1a4:	05 02 70 00 00       	add    eax,0x7002
     1a9:	9f                   	lahf   
     1aa:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     1b0:	75 00                	jne    1b2 <sysEnter_Vector-0x12fe4e>
     1b2:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1b5:	aa                   	stos   BYTE PTR es:[edi],al
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	04 01                	add    al,0x1
     1ba:	06                   	push   es
     1bb:	3c 00                	cmp    al,0x0
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	06                   	push   es
     1c1:	73 00                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     1c3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1c6:	06                   	push   es
     1c7:	82                   	(bad)  
     1c8:	06                   	push   es
     1c9:	6d                   	ins    DWORD PTR es:[edi],dx
     1ca:	91                   	xchg   ecx,eax
     1cb:	4d                   	dec    ebp
     1cc:	e7 9f                	out    0x9f,eax
     1ce:	59                   	pop    ecx
     1cf:	75 00                	jne    1d1 <sysEnter_Vector-0x12fe2f>
     1d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1d4:	aa                   	stos   BYTE PTR es:[edi],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	04 01                	add    al,0x1
     1d9:	06                   	push   es
     1da:	3c 00                	cmp    al,0x0
     1dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1df:	06                   	push   es
     1e0:	73 00                	jae    1e2 <sysEnter_Vector-0x12fe1e>
     1e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1e5:	06                   	push   es
     1e6:	82                   	(bad)  
     1e7:	06                   	push   es
     1e8:	6d                   	ins    DWORD PTR es:[edi],dx
     1e9:	91                   	xchg   ecx,eax
     1ea:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ed:	01 01                	add    DWORD PTR [ecx],eax
     1ef:	ee                   	out    dx,al
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	00 02                	add    BYTE PTR [edx],al
     1f4:	00 ba 00 00 00 01    	add    BYTE PTR [edx+0x1000000],bh
     1fa:	01 fb                	add    ebx,edi
     1fc:	0e                   	push   cs
     1fd:	0d 00 01 01 01       	or     eax,0x1010100
     202:	01 00                	add    DWORD PTR [eax],eax
     204:	00 00                	add    BYTE PTR [eax],al
     206:	01 00                	add    DWORD PTR [eax],eax
     208:	00 01                	add    BYTE PTR [ecx],al
     20a:	2e                   	cs
     20b:	2e                   	cs
     20c:	2f                   	das    
     20d:	2e                   	cs
     20e:	2e                   	cs
     20f:	2f                   	das    
     210:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     214:	6a 2f                	push   0x2f
     216:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     219:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     220:	63 2f                	arpl   WORD PTR [edi],bp
     222:	73 74                	jae    298 <sysEnter_Vector-0x12fd68>
     224:	72 69                	jb     28f <sysEnter_Vector-0x12fd71>
     226:	6e                   	outs   dx,BYTE PTR ds:[esi]
     227:	67 73 00             	addr16 jae 22a <sysEnter_Vector-0x12fdd6>
     22a:	2f                   	das    
     22b:	68 6f 6d 65 2f       	push   0x2f656d6f
     230:	79 6f                	jns    2a1 <sysEnter_Vector-0x12fd5f>
     232:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     239:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     23c:	73 73                	jae    2b1 <sysEnter_Vector-0x12fd4f>
     23e:	2f                   	das    
     23f:	6c                   	ins    BYTE PTR es:[edi],dx
     240:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     247:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     24d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     253:	78 2d                	js     282 <sysEnter_Vector-0x12fd7e>
     255:	67 6e                	outs   dx,BYTE PTR ds:[si]
     257:	75 2f                	jne    288 <sysEnter_Vector-0x12fd78>
     259:	35 2e 33 2e 30       	xor    eax,0x302e332e
     25e:	2f                   	das    
     25f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     266:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     269:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     26d:	65 00 00             	add    BYTE PTR gs:[eax],al
     270:	73 74                	jae    2e6 <sysEnter_Vector-0x12fd1a>
     272:	72 74                	jb     2e8 <sysEnter_Vector-0x12fd18>
     274:	6f                   	outs   dx,DWORD PTR ds:[esi]
     275:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     278:	00 01                	add    BYTE PTR [ecx],al
     27a:	00 00                	add    BYTE PTR [eax],al
     27c:	73 74                	jae    2f2 <sysEnter_Vector-0x12fd0e>
     27e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     285:	63 
     286:	2e                   	cs
     287:	68 00 02 00 00       	push   0x200
     28c:	6d                   	ins    DWORD PTR es:[edi],dx
     28d:	61                   	popa   
     28e:	6c                   	ins    BYTE PTR es:[edi],dx
     28f:	6c                   	ins    BYTE PTR es:[edi],dx
     290:	6f                   	outs   dx,DWORD PTR ds:[esi]
     291:	63 2e                	arpl   WORD PTR [esi],bp
     293:	68 00 03 00 00       	push   0x300
     298:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     29f:	03 00                	add    eax,DWORD PTR [eax]
     2a1:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     2a5:	43                   	inc    ebx
     2a6:	68 72 69 73 4f       	push   0x4f736972
     2ab:	53                   	push   ebx
     2ac:	2e                   	cs
     2ad:	68 00 03 00 00       	push   0x300
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	05 02 1c 01 00       	add    eax,0x11c02
     2b9:	9f                   	lahf   
     2ba:	03 28                	add    ebp,DWORD PTR [eax]
     2bc:	01 f6                	add    esi,esi
     2be:	67 92                	addr16 xchg edx,eax
     2c0:	08 2f                	or     BYTE PTR [edi],ch
     2c2:	75 08                	jne    2cc <sysEnter_Vector-0x12fd34>
     2c4:	2f                   	das    
     2c5:	4b                   	dec    ebx
     2c6:	08 c9                	or     cl,cl
     2c8:	c9                   	leave  
     2c9:	08 21                	or     BYTE PTR [ecx],ah
     2cb:	3d 77 f6 67 92       	cmp    eax,0x9267f677
     2d0:	08 2f                	or     BYTE PTR [edi],ch
     2d2:	75 08                	jne    2dc <sysEnter_Vector-0x12fd24>
     2d4:	2f                   	das    
     2d5:	4b                   	dec    ebx
     2d6:	08 c9                	or     cl,cl
     2d8:	c9                   	leave  
     2d9:	08 21                	or     BYTE PTR [ecx],ah
     2db:	3d 02 07 00 01       	cmp    eax,0x1000702
     2e0:	01 1a                	add    DWORD PTR [edx],ebx
     2e2:	01 00                	add    DWORD PTR [eax],eax
     2e4:	00 02                	add    BYTE PTR [edx],al
     2e6:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
     2ec:	01 fb                	add    ebx,edi
     2ee:	0e                   	push   cs
     2ef:	0d 00 01 01 01       	or     eax,0x1010100
     2f4:	01 00                	add    DWORD PTR [eax],eax
     2f6:	00 00                	add    BYTE PTR [eax],al
     2f8:	01 00                	add    DWORD PTR [eax],eax
     2fa:	00 01                	add    BYTE PTR [ecx],al
     2fc:	73 72                	jae    370 <sysEnter_Vector-0x12fc90>
     2fe:	63 00                	arpl   WORD PTR [eax],ax
     300:	2f                   	das    
     301:	68 6f 6d 65 2f       	push   0x2f656d6f
     306:	79 6f                	jns    377 <sysEnter_Vector-0x12fc89>
     308:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     30f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     312:	73 73                	jae    387 <sysEnter_Vector-0x12fc79>
     314:	2f                   	das    
     315:	6c                   	ins    BYTE PTR es:[edi],dx
     316:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     31d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     323:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     329:	78 2d                	js     358 <sysEnter_Vector-0x12fca8>
     32b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     32d:	75 2f                	jne    35e <sysEnter_Vector-0x12fca2>
     32f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     334:	2f                   	das    
     335:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     33c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     33f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     343:	65 00 00             	add    BYTE PTR gs:[eax],al
     346:	61                   	popa   
     347:	73 63                	jae    3ac <sysEnter_Vector-0x12fc54>
     349:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     350:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     353:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     35a:	63 
     35b:	2e                   	cs
     35c:	68 00 02 00 00       	push   0x200
     361:	6d                   	ins    DWORD PTR es:[edi],dx
     362:	61                   	popa   
     363:	6c                   	ins    BYTE PTR es:[edi],dx
     364:	6c                   	ins    BYTE PTR es:[edi],dx
     365:	6f                   	outs   dx,DWORD PTR ds:[esi]
     366:	63 2e                	arpl   WORD PTR [esi],bp
     368:	68 00 03 00 00       	push   0x300
     36d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     374:	03 00                	add    eax,DWORD PTR [eax]
     376:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     37a:	43                   	inc    ebx
     37b:	68 72 69 73 4f       	push   0x4f736972
     380:	53                   	push   ebx
     381:	2e                   	cs
     382:	68 00 03 00 00       	push   0x300
     387:	00 00                	add    BYTE PTR [eax],al
     389:	05 02 4c 02 00       	add    eax,0x24c02
     38e:	9f                   	lahf   
     38f:	03 09                	add    ecx,DWORD PTR [ecx]
     391:	01 08                	add    DWORD PTR [eax],ecx
     393:	16                   	push   ss
     394:	00 02                	add    BYTE PTR [edx],al
     396:	04 03                	add    al,0x3
     398:	08 d7                	or     bh,dl
     39a:	00 02                	add    BYTE PTR [edx],al
     39c:	04 03                	add    al,0x3
     39e:	d7                   	xlat   BYTE PTR ds:[ebx]
     39f:	00 02                	add    BYTE PTR [edx],al
     3a1:	04 03                	add    al,0x3
     3a3:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     3a6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3a9:	d3 00                	rol    DWORD PTR [eax],cl
     3ab:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3ae:	06                   	push   es
     3af:	82                   	(bad)  
     3b0:	06                   	push   es
     3b1:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     3b4:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     3b9:	04 01                	add    al,0x1
     3bb:	76 00                	jbe    3bd <sysEnter_Vector-0x12fc43>
     3bd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c0:	02 3b                	add    bh,BYTE PTR [ebx]
     3c2:	13 08                	adc    ecx,DWORD PTR [eax]
     3c4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3c8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3c9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3ca:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     3d0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3d3:	76 00                	jbe    3d5 <sysEnter_Vector-0x12fc2b>
     3d5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3d8:	02 3b                	add    bh,BYTE PTR [ebx]
     3da:	13 08                	adc    ecx,DWORD PTR [eax]
     3dc:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3e0:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3e1:	d7                   	xlat   BYTE PTR ds:[ebx]
     3e2:	6a f3                	push   0xfffffff3
     3e4:	78 00                	js     3e6 <sysEnter_Vector-0x12fc1a>
     3e6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3e9:	91                   	xchg   ecx,eax
     3ea:	00 02                	add    BYTE PTR [edx],al
     3ec:	04 03                	add    al,0x3
     3ee:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3f1:	00 02                	add    BYTE PTR [edx],al
     3f3:	04 01                	add    al,0x1
     3f5:	06                   	push   es
     3f6:	4a                   	dec    edx
     3f7:	06                   	push   es
     3f8:	e8 3d 02 02 00       	call   2063a <sysEnter_Vector-0x10f9c6>
     3fd:	01 01                	add    DWORD PTR [ecx],eax
     3ff:	d8 00                	fadd   DWORD PTR [eax]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	02 00                	add    al,BYTE PTR [eax]
     405:	9f                   	lahf   
     406:	00 00                	add    BYTE PTR [eax],al
     408:	00 01                	add    BYTE PTR [ecx],al
     40a:	01 fb                	add    ebx,edi
     40c:	0e                   	push   cs
     40d:	0d 00 01 01 01       	or     eax,0x1010100
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 00                	add    BYTE PTR [eax],al
     416:	01 00                	add    DWORD PTR [eax],eax
     418:	00 01                	add    BYTE PTR [ecx],al
     41a:	73 72                	jae    48e <sysEnter_Vector-0x12fb72>
     41c:	63 00                	arpl   WORD PTR [eax],ax
     41e:	2f                   	das    
     41f:	68 6f 6d 65 2f       	push   0x2f656d6f
     424:	79 6f                	jns    495 <sysEnter_Vector-0x12fb6b>
     426:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     42d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     430:	73 73                	jae    4a5 <sysEnter_Vector-0x12fb5b>
     432:	2f                   	das    
     433:	6c                   	ins    BYTE PTR es:[edi],dx
     434:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     43b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     441:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     447:	78 2d                	js     476 <sysEnter_Vector-0x12fb8a>
     449:	67 6e                	outs   dx,BYTE PTR ds:[si]
     44b:	75 2f                	jne    47c <sysEnter_Vector-0x12fb84>
     44d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     452:	2f                   	das    
     453:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     45a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     45d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     461:	65 00 00             	add    BYTE PTR gs:[eax],al
     464:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     467:	73 6f                	jae    4d8 <sysEnter_Vector-0x12fb28>
     469:	6c                   	ins    BYTE PTR es:[edi],dx
     46a:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     46e:	01 00                	add    DWORD PTR [eax],eax
     470:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     473:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     47a:	63 
     47b:	2e                   	cs
     47c:	68 00 02 00 00       	push   0x200
     481:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     488:	03 00                	add    eax,DWORD PTR [eax]
     48a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     48d:	6c                   	ins    BYTE PTR es:[edi],dx
     48e:	6c                   	ins    BYTE PTR es:[edi],dx
     48f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     490:	63 2e                	arpl   WORD PTR [esi],bp
     492:	68 00 03 00 00       	push   0x300
     497:	6c                   	ins    BYTE PTR es:[edi],dx
     498:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     49f:	4f                   	dec    edi
     4a0:	53                   	push   ebx
     4a1:	2e                   	cs
     4a2:	68 00 03 00 00       	push   0x300
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	05 02 98 04 00       	add    eax,0x49802
     4ae:	9f                   	lahf   
     4af:	03 0d 01 08 24 08    	add    ecx,DWORD PTR ds:0x8240801
     4b5:	59                   	pop    ecx
     4b6:	08 21                	or     BYTE PTR [ecx],ah
     4b8:	08 2f                	or     BYTE PTR [edi],ch
     4ba:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4bd:	21 08                	and    DWORD PTR [eax],ecx
     4bf:	2f                   	das    
     4c0:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     4c3:	59                   	pop    ecx
     4c4:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     4ca:	5a                   	pop    edx
     4cb:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     4ce:	08 23                	or     BYTE PTR [ebx],ah
     4d0:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4d3:	5a                   	pop    edx
     4d4:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     4d7:	06                   	push   es
     4d8:	00 01                	add    BYTE PTR [ecx],al
     4da:	01 64 01 00          	add    DWORD PTR [ecx+eax*1+0x0],esp
     4de:	00 02                	add    BYTE PTR [edx],al
     4e0:	00 ea                	add    dl,ch
     4e2:	00 00                	add    BYTE PTR [eax],al
     4e4:	00 01                	add    BYTE PTR [ecx],al
     4e6:	01 fb                	add    ebx,edi
     4e8:	0e                   	push   cs
     4e9:	0d 00 01 01 01       	or     eax,0x1010100
     4ee:	01 00                	add    DWORD PTR [eax],eax
     4f0:	00 00                	add    BYTE PTR [eax],al
     4f2:	01 00                	add    DWORD PTR [eax],eax
     4f4:	00 01                	add    BYTE PTR [ecx],al
     4f6:	73 72                	jae    56a <sysEnter_Vector-0x12fa96>
     4f8:	63 00                	arpl   WORD PTR [eax],ax
     4fa:	2f                   	das    
     4fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     500:	79 6f                	jns    571 <sysEnter_Vector-0x12fa8f>
     502:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     509:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50c:	73 73                	jae    581 <sysEnter_Vector-0x12fa7f>
     50e:	2f                   	das    
     50f:	6c                   	ins    BYTE PTR es:[edi],dx
     510:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     517:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     523:	78 2d                	js     552 <sysEnter_Vector-0x12faae>
     525:	67 6e                	outs   dx,BYTE PTR ds:[si]
     527:	75 2f                	jne    558 <sysEnter_Vector-0x12faa8>
     529:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52e:	2f                   	das    
     52f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     536:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     539:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53d:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     541:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     545:	65                   	gs
     546:	2f                   	das    
     547:	2e                   	cs
     548:	2e                   	cs
     549:	2f                   	das    
     54a:	2e                   	cs
     54b:	2e                   	cs
     54c:	2f                   	das    
     54d:	2e                   	cs
     54e:	2e                   	cs
     54f:	2f                   	das    
     550:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     554:	6a 2f                	push   0x2f
     556:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     559:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     560:	6e                   	outs   dx,BYTE PTR ds:[esi]
     561:	65                   	gs
     562:	6c                   	ins    BYTE PTR es:[edi],dx
     563:	2f                   	das    
     564:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     56f:	76 69                	jbe    5da <sysEnter_Vector-0x12fa26>
     571:	72 6f                	jb     5e2 <sysEnter_Vector-0x12fa1e>
     573:	6e                   	outs   dx,BYTE PTR ds:[esi]
     574:	6d                   	ins    DWORD PTR es:[edi],dx
     575:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     577:	74 2e                	je     5a7 <sysEnter_Vector-0x12fa59>
     579:	63 00                	arpl   WORD PTR [eax],ax
     57b:	01 00                	add    DWORD PTR [eax],eax
     57d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     580:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     587:	63 
     588:	2e                   	cs
     589:	68 00 02 00 00       	push   0x200
     58e:	73 74                	jae    604 <sysEnter_Vector-0x12f9fc>
     590:	64                   	fs
     591:	64                   	fs
     592:	65                   	gs
     593:	66                   	data16
     594:	2e                   	cs
     595:	68 00 02 00 00       	push   0x200
     59a:	6d                   	ins    DWORD PTR es:[edi],dx
     59b:	61                   	popa   
     59c:	6c                   	ins    BYTE PTR es:[edi],dx
     59d:	6c                   	ins    BYTE PTR es:[edi],dx
     59e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     59f:	63 2e                	arpl   WORD PTR [esi],bp
     5a1:	68 00 03 00 00       	push   0x300
     5a6:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     5ad:	03 00                	add    eax,DWORD PTR [eax]
     5af:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     5b3:	43                   	inc    ebx
     5b4:	68 72 69 73 4f       	push   0x4f736972
     5b9:	53                   	push   ebx
     5ba:	2e                   	cs
     5bb:	68 00 03 00 00       	push   0x300
     5c0:	73 79                	jae    63b <sysEnter_Vector-0x12f9c5>
     5c2:	73 63                	jae    627 <sysEnter_Vector-0x12f9d9>
     5c4:	61                   	popa   
     5c5:	6c                   	ins    BYTE PTR es:[edi],dx
     5c6:	6c                   	ins    BYTE PTR es:[edi],dx
     5c7:	73 2e                	jae    5f7 <sysEnter_Vector-0x12fa09>
     5c9:	68 00 04 00 00       	push   0x400
     5ce:	00 00                	add    BYTE PTR [eax],al
     5d0:	05 02 08 06 00       	add    eax,0x60802
     5d5:	9f                   	lahf   
     5d6:	03 09                	add    ecx,DWORD PTR [ecx]
     5d8:	01 08                	add    DWORD PTR [eax],ecx
     5da:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     5e0:	39 13                	cmp    DWORD PTR [ebx],edx
     5e2:	00 02                	add    BYTE PTR [edx],al
     5e4:	04 02                	add    al,0x2
     5e6:	7e 00                	jle    5e8 <sysEnter_Vector-0x12fa18>
     5e8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     5eb:	06                   	push   es
     5ec:	4a                   	dec    edx
     5ed:	06                   	push   es
     5ee:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     5ef:	59                   	pop    ecx
     5f0:	5b                   	pop    ebx
     5f1:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5f4:	31 08                	xor    DWORD PTR [eax],ecx
     5f6:	21 76 bb             	and    DWORD PTR [esi-0x45],esi
     5f9:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     5ff:	14 08                	adc    al,0x8
     601:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     608:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     60b:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     60e:	00 02                	add    BYTE PTR [edx],al
     610:	04 01                	add    al,0x1
     612:	06                   	push   es
     613:	4a                   	dec    edx
     614:	06                   	push   es
     615:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     618:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     61d:	08 f3                	or     bl,dh
     61f:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     625:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     628:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     62b:	00 02                	add    BYTE PTR [edx],al
     62d:	04 01                	add    al,0x1
     62f:	06                   	push   es
     630:	4a                   	dec    edx
     631:	06                   	push   es
     632:	03 0b                	add    ecx,DWORD PTR [ebx]
     634:	9e                   	sahf   
     635:	5b                   	pop    ebx
     636:	08 13                	or     BYTE PTR [ebx],dl
     638:	08 5a 5b             	or     BYTE PTR [edx+0x5b],bl
     63b:	f3 08 13             	repz or BYTE PTR [ebx],dl
     63e:	02 02                	add    al,BYTE PTR [edx]
     640:	00 01                	add    BYTE PTR [ecx],al
     642:	01 c4                	add    esp,eax
     644:	01 00                	add    DWORD PTR [eax],eax
     646:	00 02                	add    BYTE PTR [edx],al
     648:	00 e3                	add    bl,ah
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 01                	add    BYTE PTR [ecx],al
     64e:	01 fb                	add    ebx,edi
     650:	0e                   	push   cs
     651:	0d 00 01 01 01       	or     eax,0x1010100
     656:	01 00                	add    DWORD PTR [eax],eax
     658:	00 00                	add    BYTE PTR [eax],al
     65a:	01 00                	add    DWORD PTR [eax],eax
     65c:	00 01                	add    BYTE PTR [ecx],al
     65e:	73 72                	jae    6d2 <sysEnter_Vector-0x12f92e>
     660:	63 00                	arpl   WORD PTR [eax],ax
     662:	2f                   	das    
     663:	68 6f 6d 65 2f       	push   0x2f656d6f
     668:	79 6f                	jns    6d9 <sysEnter_Vector-0x12f927>
     66a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     671:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     674:	73 73                	jae    6e9 <sysEnter_Vector-0x12f917>
     676:	2f                   	das    
     677:	6c                   	ins    BYTE PTR es:[edi],dx
     678:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     67f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     685:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     68b:	78 2d                	js     6ba <sysEnter_Vector-0x12f946>
     68d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     68f:	75 2f                	jne    6c0 <sysEnter_Vector-0x12f940>
     691:	35 2e 33 2e 30       	xor    eax,0x302e332e
     696:	2f                   	das    
     697:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     69e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6a1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6a5:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     6a9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6ad:	65                   	gs
     6ae:	2f                   	das    
     6af:	2e                   	cs
     6b0:	2e                   	cs
     6b1:	2f                   	das    
     6b2:	2e                   	cs
     6b3:	2e                   	cs
     6b4:	2f                   	das    
     6b5:	2e                   	cs
     6b6:	2e                   	cs
     6b7:	2f                   	das    
     6b8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     6bc:	6a 2f                	push   0x2f
     6be:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     6c1:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     6c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6c9:	65                   	gs
     6ca:	6c                   	ins    BYTE PTR es:[edi],dx
     6cb:	2f                   	das    
     6cc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6d3:	00 00                	add    BYTE PTR [eax],al
     6d5:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     6dc:	01 00                	add    DWORD PTR [eax],eax
     6de:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     6e1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     6e8:	63 
     6e9:	2e                   	cs
     6ea:	68 00 02 00 00       	push   0x200
     6ef:	73 74                	jae    765 <sysEnter_Vector-0x12f89b>
     6f1:	64                   	fs
     6f2:	64                   	fs
     6f3:	65                   	gs
     6f4:	66                   	data16
     6f5:	2e                   	cs
     6f6:	68 00 02 00 00       	push   0x200
     6fb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     702:	03 00                	add    eax,DWORD PTR [eax]
     704:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     707:	6c                   	ins    BYTE PTR es:[edi],dx
     708:	6c                   	ins    BYTE PTR es:[edi],dx
     709:	6f                   	outs   dx,DWORD PTR ds:[esi]
     70a:	63 2e                	arpl   WORD PTR [esi],bp
     70c:	68 00 03 00 00       	push   0x300
     711:	6c                   	ins    BYTE PTR es:[edi],dx
     712:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     719:	4f                   	dec    edi
     71a:	53                   	push   ebx
     71b:	2e                   	cs
     71c:	68 00 03 00 00       	push   0x300
     721:	73 79                	jae    79c <sysEnter_Vector-0x12f864>
     723:	73 63                	jae    788 <sysEnter_Vector-0x12f878>
     725:	61                   	popa   
     726:	6c                   	ins    BYTE PTR es:[edi],dx
     727:	6c                   	ins    BYTE PTR es:[edi],dx
     728:	73 2e                	jae    758 <sysEnter_Vector-0x12f8a8>
     72a:	68 00 04 00 00       	push   0x400
     72f:	00 00                	add    BYTE PTR [eax],al
     731:	05 02 e8 08 00       	add    eax,0x8e802
     736:	9f                   	lahf   
     737:	03 0e                	add    ecx,DWORD PTR [esi]
     739:	01 08                	add    DWORD PTR [eax],ecx
     73b:	13 08                	adc    ecx,DWORD PTR [eax]
     73d:	9f                   	lahf   
     73e:	5b                   	pop    ebx
     73f:	08 14 08             	or     BYTE PTR [eax+ecx*1],dl
     742:	59                   	pop    ecx
     743:	5b                   	pop    ebx
     744:	08 21                	or     BYTE PTR [ecx],ah
     746:	2f                   	das    
     747:	08 d5                	or     ch,dl
     749:	bc 08 3d 69 08       	mov    esp,0x8693d08
     74e:	2f                   	das    
     74f:	75 08                	jne    759 <sysEnter_Vector-0x12f8a7>
     751:	83 67 75 bc          	and    DWORD PTR [edi+0x75],0xffffffbc
     755:	08 68 02             	or     BYTE PTR [eax+0x2],ch
     758:	26 13 3d 77 08 13 08 	adc    edi,DWORD PTR es:0x8130877
     75f:	2f                   	das    
     760:	69 e5 08 d7 77 f3    	imul   esp,ebp,0xf377d708
     766:	08 3d 31 e5 08 d7    	or     BYTE PTR ds:0xd708e531,bh
     76c:	77 f3                	ja     761 <sysEnter_Vector-0x12f89f>
     76e:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     774:	75 5b                	jne    7d1 <sysEnter_Vector-0x12f82f>
     776:	f3 08 3d 30 08 13 08 	repz or BYTE PTR ds:0x8130830,bh
     77d:	67 5b                	addr16 pop ebx
     77f:	f3 08 13             	repz or BYTE PTR [ebx],dl
     782:	31 08                	xor    DWORD PTR [eax],ecx
     784:	21 68 77             	and    DWORD PTR [eax+0x77],ebp
     787:	bb 08 91 bb 08       	mov    ebx,0x8bb9108
     78c:	91                   	xchg   ecx,eax
     78d:	bb 08 91 bb 08       	mov    ebx,0x8bb9108
     792:	95                   	xchg   ebp,eax
     793:	08 a0 08 84 08 84    	or     BYTE PTR [eax-0x7bf77bf8],ah
     799:	a0 08 67 08 4c       	mov    al,ds:0x4c086708
     79e:	08 13                	or     BYTE PTR [ebx],dl
     7a0:	be 08 67 08 9f       	mov    esi,0x9f086708
     7a5:	5a                   	pop    edx
     7a6:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     7a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     7aa:	08 9f 08 67 08 9f    	or     BYTE PTR [edi-0x60f798f8],bl
     7b0:	68 08 67 75 30       	push   0x30756708
     7b5:	03 73 08             	add    esi,DWORD PTR [ebx+0x8]
     7b8:	3c 03                	cmp    al,0x3
     7ba:	10 9e a0 08 bb 08    	adc    BYTE PTR [esi+0x8bb08a0],bl
     7c0:	9f                   	lahf   
     7c1:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     7c4:	9f                   	lahf   
     7c5:	68 08 67 79 3d       	push   0x3d796708
     7ca:	5b                   	pop    ebx
     7cb:	08 13                	or     BYTE PTR [ebx],dl
     7cd:	08 2f                	or     BYTE PTR [edi],ch
     7cf:	5b                   	pop    ebx
     7d0:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     7d2:	31 08                	xor    DWORD PTR [eax],ecx
     7d4:	22 75 75             	and    dh,BYTE PTR [ebp+0x75]
     7d7:	75 83                	jne    75c <sysEnter_Vector-0x12f8a4>
     7d9:	83 08 13             	or     DWORD PTR [eax],0x13
     7dc:	76 08                	jbe    7e6 <sysEnter_Vector-0x12f81a>
     7de:	30 5a 08             	xor    BYTE PTR [edx+0x8],bl
     7e1:	ca 08 91             	retf   0x9108
     7e4:	08 d7                	or     bh,dl
     7e6:	08 91 08 f3 08 d7    	or     BYTE PTR [ecx-0x28f70cf8],dl
     7ec:	c9                   	leave  
     7ed:	08 83 83 67 67 32    	or     BYTE PTR [ebx+0x32676783],al
     7f3:	67 67 08 21          	addr32 or BYTE PTR [bx+di],ah
     7f7:	03 6b 08             	add    ebp,DWORD PTR [ebx+0x8]
     7fa:	66 03 1a             	add    bx,WORD PTR [edx]
     7fd:	02 22                	add    ah,BYTE PTR [edx]
     7ff:	01 d7                	add    edi,edx
     801:	3d 5b f3 08 3d       	cmp    eax,0x3d08f35b
     806:	02 02                	add    al,BYTE PTR [edx]
     808:	00 01                	add    BYTE PTR [ecx],al
     80a:	01 33                	add    DWORD PTR [ebx],esi
     80c:	01 00                	add    DWORD PTR [eax],eax
     80e:	00 02                	add    BYTE PTR [edx],al
     810:	00 de                	add    dh,bl
     812:	00 00                	add    BYTE PTR [eax],al
     814:	00 01                	add    BYTE PTR [ecx],al
     816:	01 fb                	add    ebx,edi
     818:	0e                   	push   cs
     819:	0d 00 01 01 01       	or     eax,0x1010100
     81e:	01 00                	add    DWORD PTR [eax],eax
     820:	00 00                	add    BYTE PTR [eax],al
     822:	01 00                	add    DWORD PTR [eax],eax
     824:	00 01                	add    BYTE PTR [ecx],al
     826:	73 72                	jae    89a <sysEnter_Vector-0x12f766>
     828:	63 2f                	arpl   WORD PTR [edi],bp
     82a:	69 6e 70 75 74 00 2f 	imul   ebp,DWORD PTR [esi+0x70],0x2f007475
     831:	68 6f 6d 65 2f       	push   0x2f656d6f
     836:	79 6f                	jns    8a7 <sysEnter_Vector-0x12f759>
     838:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     83f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     842:	73 73                	jae    8b7 <sysEnter_Vector-0x12f749>
     844:	2f                   	das    
     845:	6c                   	ins    BYTE PTR es:[edi],dx
     846:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     84d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     853:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     859:	78 2d                	js     888 <sysEnter_Vector-0x12f778>
     85b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     85d:	75 2f                	jne    88e <sysEnter_Vector-0x12f772>
     85f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     864:	2f                   	das    
     865:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     86c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     86f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     873:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     877:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     87b:	65                   	gs
     87c:	2f                   	das    
     87d:	2e                   	cs
     87e:	2e                   	cs
     87f:	2f                   	das    
     880:	2e                   	cs
     881:	2e                   	cs
     882:	2f                   	das    
     883:	2e                   	cs
     884:	2e                   	cs
     885:	2f                   	das    
     886:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     88a:	6a 2f                	push   0x2f
     88c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     88f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     896:	6e                   	outs   dx,BYTE PTR ds:[esi]
     897:	65                   	gs
     898:	6c                   	ins    BYTE PTR es:[edi],dx
     899:	2f                   	das    
     89a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     8a1:	00 00                	add    BYTE PTR [eax],al
     8a3:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     8aa:	00 01                	add    BYTE PTR [ecx],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	73 74                	jae    924 <sysEnter_Vector-0x12f6dc>
     8b0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     8b7:	63 
     8b8:	2e                   	cs
     8b9:	68 00 02 00 00       	push   0x200
     8be:	6d                   	ins    DWORD PTR es:[edi],dx
     8bf:	61                   	popa   
     8c0:	6c                   	ins    BYTE PTR es:[edi],dx
     8c1:	6c                   	ins    BYTE PTR es:[edi],dx
     8c2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8c3:	63 2e                	arpl   WORD PTR [esi],bp
     8c5:	68 00 03 00 00       	push   0x300
     8ca:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     8d1:	03 00                	add    eax,DWORD PTR [eax]
     8d3:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     8d7:	43                   	inc    ebx
     8d8:	68 72 69 73 4f       	push   0x4f736972
     8dd:	53                   	push   ebx
     8de:	2e                   	cs
     8df:	68 00 03 00 00       	push   0x300
     8e4:	73 79                	jae    95f <sysEnter_Vector-0x12f6a1>
     8e6:	73 63                	jae    94b <sysEnter_Vector-0x12f6b5>
     8e8:	61                   	popa   
     8e9:	6c                   	ins    BYTE PTR es:[edi],dx
     8ea:	6c                   	ins    BYTE PTR es:[edi],dx
     8eb:	73 2e                	jae    91b <sysEnter_Vector-0x12f6e5>
     8ed:	68 00 04 00 00       	push   0x400
     8f2:	00 00                	add    BYTE PTR [eax],al
     8f4:	05 02 dc 10 00       	add    eax,0x10dc02
     8f9:	9f                   	lahf   
     8fa:	03 0f                	add    ecx,DWORD PTR [edi]
     8fc:	01 d7                	add    edi,edx
     8fe:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     904:	75 4b                	jne    951 <sysEnter_Vector-0x12f6af>
     906:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     90c:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     911:	6a 08                	push   0x8
     913:	14 77                	adc    al,0x77
     915:	ad                   	lods   eax,DWORD PTR ds:[esi]
     916:	68 00 02 04 01       	push   0x1040200
     91b:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     91e:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     924:	06                   	push   es
     925:	66 06                	pushw  es
     927:	68 ad 68 68 76       	push   0x766868ad
     92c:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     92f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     932:	06                   	push   es
     933:	ac                   	lods   al,BYTE PTR ds:[esi]
     934:	06                   	push   es
     935:	68 5b 00 02 04       	push   0x402005b
     93a:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     940:	01 01                	add    DWORD PTR [ecx],eax
     942:	b2 02                	mov    dl,0x2
     944:	00 00                	add    BYTE PTR [eax],al
     946:	02 00                	add    al,BYTE PTR [eax]
     948:	f5                   	cmc    
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	00 01                	add    BYTE PTR [ecx],al
     94d:	01 fb                	add    ebx,edi
     94f:	0e                   	push   cs
     950:	0d 00 01 01 01       	or     eax,0x1010100
     955:	01 00                	add    DWORD PTR [eax],eax
     957:	00 00                	add    BYTE PTR [eax],al
     959:	01 00                	add    DWORD PTR [eax],eax
     95b:	00 01                	add    BYTE PTR [ecx],al
     95d:	73 72                	jae    9d1 <sysEnter_Vector-0x12f62f>
     95f:	63 00                	arpl   WORD PTR [eax],ax
     961:	2f                   	das    
     962:	68 6f 6d 65 2f       	push   0x2f656d6f
     967:	79 6f                	jns    9d8 <sysEnter_Vector-0x12f628>
     969:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     970:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     973:	73 73                	jae    9e8 <sysEnter_Vector-0x12f618>
     975:	2f                   	das    
     976:	6c                   	ins    BYTE PTR es:[edi],dx
     977:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     97e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     984:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     98a:	78 2d                	js     9b9 <sysEnter_Vector-0x12f647>
     98c:	67 6e                	outs   dx,BYTE PTR ds:[si]
     98e:	75 2f                	jne    9bf <sysEnter_Vector-0x12f641>
     990:	35 2e 33 2e 30       	xor    eax,0x302e332e
     995:	2f                   	das    
     996:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     99d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9a0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9a4:	65                   	gs
     9a5:	2f                   	das    
     9a6:	2e                   	cs
     9a7:	2e                   	cs
     9a8:	2f                   	das    
     9a9:	2e                   	cs
     9aa:	2e                   	cs
     9ab:	2f                   	das    
     9ac:	2e                   	cs
     9ad:	2e                   	cs
     9ae:	2f                   	das    
     9af:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     9b3:	6a 2f                	push   0x2f
     9b5:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     9b8:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     9bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9c0:	65                   	gs
     9c1:	6c                   	ins    BYTE PTR es:[edi],dx
     9c2:	2f                   	das    
     9c3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9ca:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9cd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9d1:	65 00 00             	add    BYTE PTR gs:[eax],al
     9d4:	6c                   	ins    BYTE PTR es:[edi],dx
     9d5:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     9dc:	4f                   	dec    edi
     9dd:	53                   	push   ebx
     9de:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     9e1:	01 00                	add    DWORD PTR [eax],eax
     9e3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     9e6:	64                   	fs
     9e7:	61                   	popa   
     9e8:	72 67                	jb     a51 <sysEnter_Vector-0x12f5af>
     9ea:	2e                   	cs
     9eb:	68 00 02 00 00       	push   0x200
     9f0:	73 74                	jae    a66 <sysEnter_Vector-0x12f59a>
     9f2:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     9f9:	63 
     9fa:	2e                   	cs
     9fb:	68 00 02 00 00       	push   0x200
     a00:	73 74                	jae    a76 <sysEnter_Vector-0x12f58a>
     a02:	64                   	fs
     a03:	64                   	fs
     a04:	65                   	gs
     a05:	66                   	data16
     a06:	2e                   	cs
     a07:	68 00 02 00 00       	push   0x200
     a0c:	73 79                	jae    a87 <sysEnter_Vector-0x12f579>
     a0e:	73 63                	jae    a73 <sysEnter_Vector-0x12f58d>
     a10:	61                   	popa   
     a11:	6c                   	ins    BYTE PTR es:[edi],dx
     a12:	6c                   	ins    BYTE PTR es:[edi],dx
     a13:	73 2e                	jae    a43 <sysEnter_Vector-0x12f5bd>
     a15:	68 00 03 00 00       	push   0x300
     a1a:	6d                   	ins    DWORD PTR es:[edi],dx
     a1b:	61                   	popa   
     a1c:	6c                   	ins    BYTE PTR es:[edi],dx
     a1d:	6c                   	ins    BYTE PTR es:[edi],dx
     a1e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a1f:	63 2e                	arpl   WORD PTR [esi],bp
     a21:	68 00 04 00 00       	push   0x400
     a26:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     a2d:	04 00                	add    al,0x0
     a2f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     a33:	43                   	inc    ebx
     a34:	68 72 69 73 4f       	push   0x4f736972
     a39:	53                   	push   ebx
     a3a:	2e                   	cs
     a3b:	68 00 04 00 00       	push   0x400
     a40:	00 00                	add    BYTE PTR [eax],al
     a42:	05 02 48 12 00       	add    eax,0x124802
     a47:	9f                   	lahf   
     a48:	03 11                	add    edx,DWORD PTR [ecx]
     a4a:	01 08                	add    DWORD PTR [eax],ecx
     a4c:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     a4f:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     a55:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     a5b:	75 08                	jne    a65 <sysEnter_Vector-0x12f59b>
     a5d:	9f                   	lahf   
     a5e:	3d 77 08 21 75       	cmp    eax,0x75210877
     a63:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     a69:	75 08                	jne    a73 <sysEnter_Vector-0x12f58d>
     a6b:	d7                   	xlat   BYTE PTR ds:[ebx]
     a6c:	3d 77 08 21 08       	cmp    eax,0x8210877
     a71:	67 d8 59 bd          	fcomp  DWORD PTR [bx+di-0x43]
     a75:	c9                   	leave  
     a76:	c9                   	leave  
     a77:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     a7a:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     a80:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     a83:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     a86:	77 08                	ja     a90 <sysEnter_Vector-0x12f570>
     a88:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     a8b:	c9                   	leave  
     a8c:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     a92:	68 08 c9 08 83       	push   0x8308c908
     a97:	5b                   	pop    ebx
     a98:	08 22                	or     BYTE PTR [edx],ah
     a9a:	68 08 c9 08 83       	push   0x8308c908
     a9f:	5b                   	pop    ebx
     aa0:	f4                   	hlt    
     aa1:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     aa5:	31 f4                	xor    esp,esi
     aa7:	68 08 91 5a 31       	push   0x315a9108
     aac:	f4                   	hlt    
     aad:	68 08 91 5a 31       	push   0x315a9108
     ab2:	08 21                	or     BYTE PTR [ecx],ah
     ab4:	02 57 13             	add    dl,BYTE PTR [edi+0x13]
     ab7:	77 08                	ja     ac1 <sysEnter_Vector-0x12f53f>
     ab9:	21 02                	and    DWORD PTR [edx],eax
     abb:	57                   	push   edi
     abc:	14 77                	adc    al,0x77
     abe:	c9                   	leave  
     abf:	c9                   	leave  
     ac0:	3f                   	aas    
     ac1:	c9                   	leave  
     ac2:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     ac8:	3d 31 f3 75 08       	cmp    eax,0x875f331
     acd:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     ad2:	08 21                	or     BYTE PTR [ecx],ah
     ad4:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     adb:	67 02 22             	add    ah,BYTE PTR [bp+si]
     ade:	14 08                	adc    al,0x8
     ae0:	ae                   	scas   al,BYTE PTR es:[edi]
     ae1:	4c                   	dec    esp
     ae2:	ca 08 4b             	retf   0x4b08
     ae5:	91                   	xchg   ecx,eax
     ae6:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     aec:	67 02 2f             	add    ch,BYTE PTR [bx]
     aef:	14 00                	adc    al,0x0
     af1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     af4:	02 31                	add    dh,BYTE PTR [ecx]
     af6:	13 00                	adc    eax,DWORD PTR [eax]
     af8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     afb:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     b01:	bb 00 02 04 02       	mov    ebx,0x2040200
     b06:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     b09:	00 02                	add    BYTE PTR [edx],al
     b0b:	04 01                	add    al,0x1
     b0d:	06                   	push   es
     b0e:	4a                   	dec    edx
     b0f:	06                   	push   es
     b10:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     b13:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     b19:	f3 75 08             	repz jne b24 <sysEnter_Vector-0x12f4dc>
     b1c:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     b21:	c9                   	leave  
     b22:	c9                   	leave  
     b23:	32 c9                	xor    cl,cl
     b25:	f3 3f                	repz aas 
     b27:	c9                   	leave  
     b28:	08 13                	or     BYTE PTR [ebx],dl
     b2a:	31 f5                	xor    ebp,esi
     b2c:	75 76                	jne    ba4 <sysEnter_Vector-0x12f45c>
     b2e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b2f:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     b34:	67 75 91             	addr16 jne ac8 <sysEnter_Vector-0x12f538>
     b37:	5a                   	pop    edx
     b38:	75 67                	jne    ba1 <sysEnter_Vector-0x12f45f>
     b3a:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     b3d:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     b43:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     b48:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     b4c:	3c 44                	cmp    al,0x44
     b4e:	00 02                	add    BYTE PTR [edx],al
     b50:	04 02                	add    al,0x2
     b52:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     b55:	00 02                	add    BYTE PTR [edx],al
     b57:	04 01                	add    al,0x1
     b59:	06                   	push   es
     b5a:	4a                   	dec    edx
     b5b:	00 02                	add    BYTE PTR [edx],al
     b5d:	04 03                	add    al,0x3
     b5f:	82                   	(bad)  
     b60:	06                   	push   es
     b61:	03 23                	add    esp,DWORD PTR [ebx]
     b63:	d6                   	(bad)  
     b64:	00 02                	add    BYTE PTR [edx],al
     b66:	04 01                	add    al,0x1
     b68:	06                   	push   es
     b69:	66 06                	pushw  es
     b6b:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     b6e:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     b73:	31 08                	xor    DWORD PTR [eax],ecx
     b75:	5b                   	pop    ebx
     b76:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     b7c:	08 23                	or     BYTE PTR [ebx],ah
     b7e:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     b84:	04 01                	add    al,0x1
     b86:	06                   	push   es
     b87:	66 06                	pushw  es
     b89:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     b8c:	f3 c9                	repz leave 
     b8e:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     b92:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     b95:	06                   	push   es
     b96:	66 06                	pushw  es
     b98:	9f                   	lahf   
     b99:	4c                   	dec    esp
     b9a:	00 02                	add    BYTE PTR [edx],al
     b9c:	04 01                	add    al,0x1
     b9e:	06                   	push   es
     b9f:	66 06                	pushw  es
     ba1:	d8 02                	fadd   DWORD PTR [edx]
     ba3:	27                   	daa    
     ba4:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     baa:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     bb0:	06                   	push   es
     bb1:	9e                   	sahf   
     bb2:	06                   	push   es
     bb3:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     bb6:	f3 c9                	repz leave 
     bb8:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     bbb:	79 02                	jns    bbf <sysEnter_Vector-0x12f441>
     bbd:	34 01                	xor    al,0x1
     bbf:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     bc2:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     bc5:	02 2f                	add    ch,BYTE PTR [edi]
     bc7:	14 02                	adc    al,0x2
     bc9:	31 13                	xor    DWORD PTR [ebx],edx
     bcb:	00 02                	add    BYTE PTR [edx],al
     bcd:	04 02                	add    al,0x2
     bcf:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     bd6:	00 02                	add    BYTE PTR [edx],al
     bd8:	04 02                	add    al,0x2
     bda:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     bdd:	00 02                	add    BYTE PTR [edx],al
     bdf:	04 01                	add    al,0x1
     be1:	06                   	push   es
     be2:	4a                   	dec    edx
     be3:	06                   	push   es
     be4:	03 1b                	add    ebx,DWORD PTR [ebx]
     be6:	d6                   	(bad)  
     be7:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     bec:	31 c9                	xor    ecx,ecx
     bee:	08 3d 31 c9 c9 02    	or     BYTE PTR ds:0x2c9c931,bh
     bf4:	02 00                	add    al,BYTE PTR [eax]
     bf6:	01 01                	add    DWORD PTR [ecx],eax
     bf8:	11 01                	adc    DWORD PTR [ecx],eax
     bfa:	00 00                	add    BYTE PTR [eax],al
     bfc:	02 00                	add    al,BYTE PTR [eax]
     bfe:	f2 00 00             	repnz add BYTE PTR [eax],al
     c01:	00 01                	add    BYTE PTR [ecx],al
     c03:	01 fb                	add    ebx,edi
     c05:	0e                   	push   cs
     c06:	0d 00 01 01 01       	or     eax,0x1010100
     c0b:	01 00                	add    DWORD PTR [eax],eax
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	01 00                	add    DWORD PTR [eax],eax
     c11:	00 01                	add    BYTE PTR [ecx],al
     c13:	73 72                	jae    c87 <sysEnter_Vector-0x12f379>
     c15:	63 00                	arpl   WORD PTR [eax],ax
     c17:	2f                   	das    
     c18:	68 6f 6d 65 2f       	push   0x2f656d6f
     c1d:	79 6f                	jns    c8e <sysEnter_Vector-0x12f372>
     c1f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c26:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     c29:	73 73                	jae    c9e <sysEnter_Vector-0x12f362>
     c2b:	2f                   	das    
     c2c:	6c                   	ins    BYTE PTR es:[edi],dx
     c2d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     c34:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     c3a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     c40:	78 2d                	js     c6f <sysEnter_Vector-0x12f391>
     c42:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c44:	75 2f                	jne    c75 <sysEnter_Vector-0x12f38b>
     c46:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c4b:	2f                   	das    
     c4c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c53:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c56:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c5a:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     c5e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c62:	65                   	gs
     c63:	2f                   	das    
     c64:	2e                   	cs
     c65:	2e                   	cs
     c66:	2f                   	das    
     c67:	2e                   	cs
     c68:	2e                   	cs
     c69:	2f                   	das    
     c6a:	2e                   	cs
     c6b:	2e                   	cs
     c6c:	2f                   	das    
     c6d:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     c71:	6a 2f                	push   0x2f
     c73:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     c76:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     c7d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c7e:	65                   	gs
     c7f:	6c                   	ins    BYTE PTR es:[edi],dx
     c80:	2f                   	das    
     c81:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	6c                   	ins    BYTE PTR es:[edi],dx
     c8b:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     c92:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c95:	01 00                	add    DWORD PTR [eax],eax
     c97:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c9a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ca1:	63 
     ca2:	2e                   	cs
     ca3:	68 00 02 00 00       	push   0x200
     ca8:	73 74                	jae    d1e <sysEnter_Vector-0x12f2e2>
     caa:	64                   	fs
     cab:	64                   	fs
     cac:	65                   	gs
     cad:	66                   	data16
     cae:	2e                   	cs
     caf:	68 00 02 00 00       	push   0x200
     cb4:	74 79                	je     d2f <sysEnter_Vector-0x12f2d1>
     cb6:	70 65                	jo     d1d <sysEnter_Vector-0x12f2e3>
     cb8:	73 2e                	jae    ce8 <sysEnter_Vector-0x12f318>
     cba:	68 00 03 00 00       	push   0x300
     cbf:	73 79                	jae    d3a <sysEnter_Vector-0x12f2c6>
     cc1:	73 63                	jae    d26 <sysEnter_Vector-0x12f2da>
     cc3:	61                   	popa   
     cc4:	6c                   	ins    BYTE PTR es:[edi],dx
     cc5:	6c                   	ins    BYTE PTR es:[edi],dx
     cc6:	73 2e                	jae    cf6 <sysEnter_Vector-0x12f30a>
     cc8:	68 00 04 00 00       	push   0x400
     ccd:	6d                   	ins    DWORD PTR es:[edi],dx
     cce:	61                   	popa   
     ccf:	6c                   	ins    BYTE PTR es:[edi],dx
     cd0:	6c                   	ins    BYTE PTR es:[edi],dx
     cd1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cd2:	63 2e                	arpl   WORD PTR [esi],bp
     cd4:	68 00 03 00 00       	push   0x300
     cd9:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     ce0:	03 00                	add    eax,DWORD PTR [eax]
     ce2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     ce6:	43                   	inc    ebx
     ce7:	68 72 69 73 4f       	push   0x4f736972
     cec:	53                   	push   ebx
     ced:	2e                   	cs
     cee:	68 00 03 00 00       	push   0x300
     cf3:	00 00                	add    BYTE PTR [eax],al
     cf5:	05 02 0c 1f 00       	add    eax,0x1f0c02
     cfa:	9f                   	lahf   
     cfb:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     d01:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     d06:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     d09:	05 00 01 01 c0       	add    eax,0xc0010100
     d0e:	01 00                	add    DWORD PTR [eax],eax
     d10:	00 02                	add    BYTE PTR [edx],al
     d12:	00 e5                	add    ch,ah
     d14:	00 00                	add    BYTE PTR [eax],al
     d16:	00 01                	add    BYTE PTR [ecx],al
     d18:	01 fb                	add    ebx,edi
     d1a:	0e                   	push   cs
     d1b:	0d 00 01 01 01       	or     eax,0x1010100
     d20:	01 00                	add    DWORD PTR [eax],eax
     d22:	00 00                	add    BYTE PTR [eax],al
     d24:	01 00                	add    DWORD PTR [eax],eax
     d26:	00 01                	add    BYTE PTR [ecx],al
     d28:	73 72                	jae    d9c <sysEnter_Vector-0x12f264>
     d2a:	63 00                	arpl   WORD PTR [eax],ax
     d2c:	2f                   	das    
     d2d:	68 6f 6d 65 2f       	push   0x2f656d6f
     d32:	79 6f                	jns    da3 <sysEnter_Vector-0x12f25d>
     d34:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d3b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d3e:	73 73                	jae    db3 <sysEnter_Vector-0x12f24d>
     d40:	2f                   	das    
     d41:	6c                   	ins    BYTE PTR es:[edi],dx
     d42:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d49:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d4f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d55:	78 2d                	js     d84 <sysEnter_Vector-0x12f27c>
     d57:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d59:	75 2f                	jne    d8a <sysEnter_Vector-0x12f276>
     d5b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d60:	2f                   	das    
     d61:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d68:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d6b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d6f:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     d73:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d77:	65                   	gs
     d78:	2f                   	das    
     d79:	2e                   	cs
     d7a:	2e                   	cs
     d7b:	2f                   	das    
     d7c:	2e                   	cs
     d7d:	2e                   	cs
     d7e:	2f                   	das    
     d7f:	2e                   	cs
     d80:	2e                   	cs
     d81:	2f                   	das    
     d82:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d86:	6a 2f                	push   0x2f
     d88:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d8b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d92:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d93:	65                   	gs
     d94:	6c                   	ins    BYTE PTR es:[edi],dx
     d95:	2f                   	das    
     d96:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	6d                   	ins    DWORD PTR es:[edi],dx
     da0:	61                   	popa   
     da1:	6c                   	ins    BYTE PTR es:[edi],dx
     da2:	6c                   	ins    BYTE PTR es:[edi],dx
     da3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     da4:	63 2e                	arpl   WORD PTR [esi],bp
     da6:	63 00                	arpl   WORD PTR [eax],ax
     da8:	01 00                	add    DWORD PTR [eax],eax
     daa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     dad:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     db4:	63 
     db5:	2e                   	cs
     db6:	68 00 02 00 00       	push   0x200
     dbb:	73 74                	jae    e31 <sysEnter_Vector-0x12f1cf>
     dbd:	64                   	fs
     dbe:	64                   	fs
     dbf:	65                   	gs
     dc0:	66                   	data16
     dc1:	2e                   	cs
     dc2:	68 00 02 00 00       	push   0x200
     dc7:	6d                   	ins    DWORD PTR es:[edi],dx
     dc8:	61                   	popa   
     dc9:	6c                   	ins    BYTE PTR es:[edi],dx
     dca:	6c                   	ins    BYTE PTR es:[edi],dx
     dcb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dcc:	63 2e                	arpl   WORD PTR [esi],bp
     dce:	68 00 03 00 00       	push   0x300
     dd3:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     dda:	03 00                	add    eax,DWORD PTR [eax]
     ddc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     de0:	43                   	inc    ebx
     de1:	68 72 69 73 4f       	push   0x4f736972
     de6:	53                   	push   ebx
     de7:	2e                   	cs
     de8:	68 00 03 00 00       	push   0x300
     ded:	73 79                	jae    e68 <sysEnter_Vector-0x12f198>
     def:	73 63                	jae    e54 <sysEnter_Vector-0x12f1ac>
     df1:	61                   	popa   
     df2:	6c                   	ins    BYTE PTR es:[edi],dx
     df3:	6c                   	ins    BYTE PTR es:[edi],dx
     df4:	73 2e                	jae    e24 <sysEnter_Vector-0x12f1dc>
     df6:	68 00 04 00 00       	push   0x400
     dfb:	00 00                	add    BYTE PTR [eax],al
     dfd:	05 02 80 1f 00       	add    eax,0x1f8002
     e02:	9f                   	lahf   
     e03:	03 0e                	add    ecx,DWORD PTR [esi]
     e05:	01 08                	add    DWORD PTR [eax],ecx
     e07:	21 02                	and    DWORD PTR [edx],eax
     e09:	24 13                	and    al,0x13
     e0b:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     e10:	f5                   	cmc    
     e11:	92                   	xchg   edx,eax
     e12:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     e18:	04 01                	add    al,0x1
     e1a:	06                   	push   es
     e1b:	66 06                	pushw  es
     e1d:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     e22:	59                   	pop    ecx
     e23:	31 f5                	xor    ebp,esi
     e25:	00 02                	add    BYTE PTR [edx],al
     e27:	04 01                	add    al,0x1
     e29:	06                   	push   es
     e2a:	e4 06                	in     al,0x6
     e2c:	e7 68                	out    0x68,eax
     e2e:	93                   	xchg   ebx,eax
     e2f:	bf 03 74 90 3f       	mov    edi,0x3f907403
     e34:	43                   	inc    ebx
     e35:	23 31                	and    esi,DWORD PTR [ecx]
     e37:	f3 ad                	rep lods eax,DWORD PTR ds:[esi]
     e39:	67 af                	scas   eax,DWORD PTR es:[di]
     e3b:	00 02                	add    BYTE PTR [edx],al
     e3d:	04 01                	add    al,0x1
     e3f:	06                   	push   es
     e40:	d6                   	(bad)  
     e41:	06                   	push   es
     e42:	ad                   	lods   eax,DWORD PTR ds:[esi]
     e43:	59                   	pop    ecx
     e44:	9f                   	lahf   
     e45:	93                   	xchg   ebx,eax
     e46:	00 02                	add    BYTE PTR [edx],al
     e48:	04 01                	add    al,0x1
     e4a:	06                   	push   es
     e4b:	9e                   	sahf   
     e4c:	06                   	push   es
     e4d:	bc 59 31 08 13       	mov    esp,0x13083159
     e52:	67 30 ca             	addr16 xor dl,cl
     e55:	00 02                	add    BYTE PTR [edx],al
     e57:	04 01                	add    al,0x1
     e59:	08 3e                	or     BYTE PTR [esi],bh
     e5b:	30 03                	xor    BYTE PTR [ebx],al
     e5d:	78 90                	js     def <sysEnter_Vector-0x12f211>
     e5f:	00 02                	add    BYTE PTR [edx],al
     e61:	04 01                	add    al,0x1
     e63:	06                   	push   es
     e64:	c8 06 03 0a          	enter  0x306,0xa
     e68:	ac                   	lods   al,BYTE PTR ds:[esi]
     e69:	69 08 25 75 6a 67    	imul   ecx,DWORD PTR [eax],0x676a7525
     e6f:	75 03                	jne    e74 <sysEnter_Vector-0x12f18c>
     e71:	0c 08                	or     al,0x8
     e73:	90                   	nop
     e74:	08 13                	or     BYTE PTR [ebx],dl
     e76:	08 91 a0 bb 08 67    	or     BYTE PTR [ecx+0x6708bba0],dl
     e7c:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     e7f:	3d 08 e5 f3 02       	cmp    eax,0x2f3e508
     e84:	26 13 bc ad ad 08 e7 	adc    edi,DWORD PTR es:[ebp+ebp*4+0x8e708ad]
     e8b:	08 
     e8c:	e5 ad                	in     eax,0xad
     e8e:	91                   	xchg   ecx,eax
     e8f:	91                   	xchg   ecx,eax
     e90:	75 a0                	jne    e32 <sysEnter_Vector-0x12f1ce>
     e92:	bb bd 08 e5 91       	mov    ebx,0x91e508bd
     e97:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     e9a:	91                   	xchg   ecx,eax
     e9b:	91                   	xchg   ecx,eax
     e9c:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     ea1:	08 22                	or     BYTE PTR [edx],ah
     ea3:	08 93 68 92 67 08    	or     BYTE PTR [ebx+0x8679268],dl
     ea9:	67 00 02             	add    BYTE PTR [bp+si],al
     eac:	04 01                	add    al,0x1
     eae:	06                   	push   es
     eaf:	66 06                	pushw  es
     eb1:	ad                   	lods   eax,DWORD PTR ds:[esi]
     eb2:	84 67 77             	test   BYTE PTR [edi+0x77],ah
     eb5:	08 13                	or     BYTE PTR [ebx],dl
     eb7:	02 24 17             	add    ah,BYTE PTR [edi+edx*1]
     eba:	08 e5                	or     ch,ah
     ebc:	08 93 d7 3d 5b f3    	or     BYTE PTR [ebx-0xca4c229],dl
     ec2:	08 13                	or     BYTE PTR [ebx],dl
     ec4:	31 c9                	xor    ecx,ecx
     ec6:	ad                   	lods   eax,DWORD PTR ds:[esi]
     ec7:	3f                   	aas    
     ec8:	08 13                	or     BYTE PTR [ebx],dl
     eca:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     ed0:	01 f1                	add    ecx,esi
     ed2:	00 00                	add    BYTE PTR [eax],al
     ed4:	00 02                	add    BYTE PTR [edx],al
     ed6:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     edc:	01 fb                	add    ebx,edi
     ede:	0e                   	push   cs
     edf:	0d 00 01 01 01       	or     eax,0x1010100
     ee4:	01 00                	add    DWORD PTR [eax],eax
     ee6:	00 00                	add    BYTE PTR [eax],al
     ee8:	01 00                	add    DWORD PTR [eax],eax
     eea:	00 01                	add    BYTE PTR [ecx],al
     eec:	73 72                	jae    f60 <sysEnter_Vector-0x12f0a0>
     eee:	63 00                	arpl   WORD PTR [eax],ax
     ef0:	2f                   	das    
     ef1:	68 6f 6d 65 2f       	push   0x2f656d6f
     ef6:	79 6f                	jns    f67 <sysEnter_Vector-0x12f099>
     ef8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     eff:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f02:	73 73                	jae    f77 <sysEnter_Vector-0x12f089>
     f04:	2f                   	das    
     f05:	6c                   	ins    BYTE PTR es:[edi],dx
     f06:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f0d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f13:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f19:	78 2d                	js     f48 <sysEnter_Vector-0x12f0b8>
     f1b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f1d:	75 2f                	jne    f4e <sysEnter_Vector-0x12f0b2>
     f1f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f24:	2f                   	das    
     f25:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f2c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f2f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f33:	65 00 00             	add    BYTE PTR gs:[eax],al
     f36:	6d                   	ins    DWORD PTR es:[edi],dx
     f37:	65                   	gs
     f38:	6d                   	ins    DWORD PTR es:[edi],dx
     f39:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     f3c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f3f:	01 00                	add    DWORD PTR [eax],eax
     f41:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f44:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f4b:	63 
     f4c:	2e                   	cs
     f4d:	68 00 02 00 00       	push   0x200
     f52:	73 74                	jae    fc8 <sysEnter_Vector-0x12f038>
     f54:	64                   	fs
     f55:	64                   	fs
     f56:	65                   	gs
     f57:	66                   	data16
     f58:	2e                   	cs
     f59:	68 00 02 00 00       	push   0x200
     f5e:	6d                   	ins    DWORD PTR es:[edi],dx
     f5f:	61                   	popa   
     f60:	6c                   	ins    BYTE PTR es:[edi],dx
     f61:	6c                   	ins    BYTE PTR es:[edi],dx
     f62:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f63:	63 2e                	arpl   WORD PTR [esi],bp
     f65:	68 00 03 00 00       	push   0x300
     f6a:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     f71:	03 00                	add    eax,DWORD PTR [eax]
     f73:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     f77:	43                   	inc    ebx
     f78:	68 72 69 73 4f       	push   0x4f736972
     f7d:	53                   	push   ebx
     f7e:	2e                   	cs
     f7f:	68 00 03 00 00       	push   0x300
     f84:	00 00                	add    BYTE PTR [eax],al
     f86:	05 02 70 25 00       	add    eax,0x257002
     f8b:	9f                   	lahf   
     f8c:	03 0b                	add    ecx,DWORD PTR [ebx]
     f8e:	01 f5                	add    ebp,esi
     f90:	d7                   	xlat   BYTE PTR ds:[ebx]
     f91:	d7                   	xlat   BYTE PTR ds:[ebx]
     f92:	68 91 67 68 83       	push   0x83686791
     f97:	91                   	xchg   ecx,eax
     f98:	91                   	xchg   ecx,eax
     f99:	2f                   	das    
     f9a:	08 1f                	or     BYTE PTR [edi],bl
     f9c:	e8 08 57 ca 84       	call   84ca66a9 <sysEnter_Vector+0x84b766a9>
     fa1:	68 83 67 68 83       	push   0x83686783
     fa6:	91                   	xchg   ecx,eax
     fa7:	91                   	xchg   ecx,eax
     fa8:	2f                   	das    
     fa9:	08 1f                	or     BYTE PTR [edi],bl
     fab:	e8 08 57 ca 5c       	call   5cca66b8 <sysEnter_Vector+0x5cb766b8>
     fb0:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     fb6:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     fbc:	3e                   	ds
     fbd:	31 c9                	xor    ecx,ecx
     fbf:	08 13                	or     BYTE PTR [ebx],dl
     fc1:	02 02                	add    al,BYTE PTR [edx]
     fc3:	00 01                	add    BYTE PTR [ecx],al
     fc5:	01 d4                	add    esp,edx
     fc7:	00 00                	add    BYTE PTR [eax],al
     fc9:	00 02                	add    BYTE PTR [edx],al
     fcb:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     fd1:	01 fb                	add    ebx,edi
     fd3:	0e                   	push   cs
     fd4:	0d 00 01 01 01       	or     eax,0x1010100
     fd9:	01 00                	add    DWORD PTR [eax],eax
     fdb:	00 00                	add    BYTE PTR [eax],al
     fdd:	01 00                	add    DWORD PTR [eax],eax
     fdf:	00 01                	add    BYTE PTR [ecx],al
     fe1:	73 72                	jae    1055 <sysEnter_Vector-0x12efab>
     fe3:	63 00                	arpl   WORD PTR [eax],ax
     fe5:	2f                   	das    
     fe6:	68 6f 6d 65 2f       	push   0x2f656d6f
     feb:	79 6f                	jns    105c <sysEnter_Vector-0x12efa4>
     fed:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ff4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ff7:	73 73                	jae    106c <sysEnter_Vector-0x12ef94>
     ff9:	2f                   	das    
     ffa:	6c                   	ins    BYTE PTR es:[edi],dx
     ffb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1002:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1008:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    100e:	78 2d                	js     103d <sysEnter_Vector-0x12efc3>
    1010:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1012:	75 2f                	jne    1043 <sysEnter_Vector-0x12efbd>
    1014:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1019:	2f                   	das    
    101a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1021:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1024:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1028:	65 00 00             	add    BYTE PTR gs:[eax],al
    102b:	6d                   	ins    DWORD PTR es:[edi],dx
    102c:	65                   	gs
    102d:	6d                   	ins    DWORD PTR es:[edi],dx
    102e:	73 65                	jae    1095 <sysEnter_Vector-0x12ef6b>
    1030:	74 2e                	je     1060 <sysEnter_Vector-0x12efa0>
    1032:	63 00                	arpl   WORD PTR [eax],ax
    1034:	01 00                	add    DWORD PTR [eax],eax
    1036:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1039:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1040:	63 
    1041:	2e                   	cs
    1042:	68 00 02 00 00       	push   0x200
    1047:	73 74                	jae    10bd <sysEnter_Vector-0x12ef43>
    1049:	64                   	fs
    104a:	64                   	fs
    104b:	65                   	gs
    104c:	66                   	data16
    104d:	2e                   	cs
    104e:	68 00 02 00 00       	push   0x200
    1053:	6d                   	ins    DWORD PTR es:[edi],dx
    1054:	61                   	popa   
    1055:	6c                   	ins    BYTE PTR es:[edi],dx
    1056:	6c                   	ins    BYTE PTR es:[edi],dx
    1057:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1058:	63 2e                	arpl   WORD PTR [esi],bp
    105a:	68 00 03 00 00       	push   0x300
    105f:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1066:	03 00                	add    eax,DWORD PTR [eax]
    1068:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    106c:	43                   	inc    ebx
    106d:	68 72 69 73 4f       	push   0x4f736972
    1072:	53                   	push   ebx
    1073:	2e                   	cs
    1074:	68 00 03 00 00       	push   0x300
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	05 02 2c 27 00       	add    eax,0x272c02
    1080:	9f                   	lahf   
    1081:	1a f3                	sbb    dh,bl
    1083:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
    1089:	ca 9f 2f             	retf   0x2f9f
    108c:	d5 bd                	aad    0xbd
    108e:	9f                   	lahf   
    108f:	2f                   	das    
    1090:	f1                   	icebp  
    1091:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
    1096:	c9                   	leave  
    1097:	08 13                	or     BYTE PTR [ebx],dl
    1099:	02 02                	add    al,BYTE PTR [edx]
    109b:	00 01                	add    BYTE PTR [ecx],al
    109d:	01 f9                	add    ecx,edi
    109f:	00 00                	add    BYTE PTR [eax],al
    10a1:	00 02                	add    BYTE PTR [edx],al
    10a3:	00 db                	add    bl,bl
    10a5:	00 00                	add    BYTE PTR [eax],al
    10a7:	00 01                	add    BYTE PTR [ecx],al
    10a9:	01 fb                	add    ebx,edi
    10ab:	0e                   	push   cs
    10ac:	0d 00 01 01 01       	or     eax,0x1010100
    10b1:	01 00                	add    DWORD PTR [eax],eax
    10b3:	00 00                	add    BYTE PTR [eax],al
    10b5:	01 00                	add    DWORD PTR [eax],eax
    10b7:	00 01                	add    BYTE PTR [ecx],al
    10b9:	73 72                	jae    112d <sysEnter_Vector-0x12eed3>
    10bb:	63 00                	arpl   WORD PTR [eax],ax
    10bd:	2f                   	das    
    10be:	68 6f 6d 65 2f       	push   0x2f656d6f
    10c3:	79 6f                	jns    1134 <sysEnter_Vector-0x12eecc>
    10c5:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    10cc:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    10cf:	73 73                	jae    1144 <sysEnter_Vector-0x12eebc>
    10d1:	2f                   	das    
    10d2:	6c                   	ins    BYTE PTR es:[edi],dx
    10d3:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10da:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10e0:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10e6:	78 2d                	js     1115 <sysEnter_Vector-0x12eeeb>
    10e8:	67 6e                	outs   dx,BYTE PTR ds:[si]
    10ea:	75 2f                	jne    111b <sysEnter_Vector-0x12eee5>
    10ec:	35 2e 33 2e 30       	xor    eax,0x302e332e
    10f1:	2f                   	das    
    10f2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10f9:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    10fc:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1100:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
    1104:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1108:	65                   	gs
    1109:	2f                   	das    
    110a:	2e                   	cs
    110b:	2e                   	cs
    110c:	2f                   	das    
    110d:	2e                   	cs
    110e:	2e                   	cs
    110f:	2f                   	das    
    1110:	2e                   	cs
    1111:	2e                   	cs
    1112:	2f                   	das    
    1113:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1117:	6a 2f                	push   0x2f
    1119:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    111c:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1123:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1124:	65                   	gs
    1125:	6c                   	ins    BYTE PTR es:[edi],dx
    1126:	2f                   	das    
    1127:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    112e:	00 00                	add    BYTE PTR [eax],al
    1130:	70 69                	jo     119b <sysEnter_Vector-0x12ee65>
    1132:	70 65                	jo     1199 <sysEnter_Vector-0x12ee67>
    1134:	5f                   	pop    edi
    1135:	6c                   	ins    BYTE PTR es:[edi],dx
    1136:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
    113d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1140:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1147:	63 
    1148:	2e                   	cs
    1149:	68 00 02 00 00       	push   0x200
    114e:	6d                   	ins    DWORD PTR es:[edi],dx
    114f:	61                   	popa   
    1150:	6c                   	ins    BYTE PTR es:[edi],dx
    1151:	6c                   	ins    BYTE PTR es:[edi],dx
    1152:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1153:	63 2e                	arpl   WORD PTR [esi],bp
    1155:	68 00 03 00 00       	push   0x300
    115a:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1161:	03 00                	add    eax,DWORD PTR [eax]
    1163:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1167:	43                   	inc    ebx
    1168:	68 72 69 73 4f       	push   0x4f736972
    116d:	53                   	push   ebx
    116e:	2e                   	cs
    116f:	68 00 03 00 00       	push   0x300
    1174:	73 79                	jae    11ef <sysEnter_Vector-0x12ee11>
    1176:	73 63                	jae    11db <sysEnter_Vector-0x12ee25>
    1178:	61                   	popa   
    1179:	6c                   	ins    BYTE PTR es:[edi],dx
    117a:	6c                   	ins    BYTE PTR es:[edi],dx
    117b:	73 2e                	jae    11ab <sysEnter_Vector-0x12ee55>
    117d:	68 00 04 00 00       	push   0x400
    1182:	00 00                	add    BYTE PTR [eax],al
    1184:	05 02 14 28 00       	add    eax,0x281402
    1189:	9f                   	lahf   
    118a:	03 0a                	add    ecx,DWORD PTR [edx]
    118c:	01 08                	add    DWORD PTR [eax],ecx
    118e:	13 08                	adc    ecx,DWORD PTR [eax]
    1190:	2f                   	das    
    1191:	5b                   	pop    ebx
    1192:	08 13                	or     BYTE PTR [ebx],dl
    1194:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
    1197:	05 00 01 01 e8       	add    eax,0xe8010100
    119c:	01 00                	add    DWORD PTR [eax],eax
    119e:	00 02                	add    BYTE PTR [edx],al
    11a0:	00 ab 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],ch
    11a6:	01 fb                	add    ebx,edi
    11a8:	0e                   	push   cs
    11a9:	0d 00 01 01 01       	or     eax,0x1010100
    11ae:	01 00                	add    DWORD PTR [eax],eax
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	01 00                	add    DWORD PTR [eax],eax
    11b4:	00 01                	add    BYTE PTR [ecx],al
    11b6:	73 72                	jae    122a <sysEnter_Vector-0x12edd6>
    11b8:	63 00                	arpl   WORD PTR [eax],ax
    11ba:	2f                   	das    
    11bb:	68 6f 6d 65 2f       	push   0x2f656d6f
    11c0:	79 6f                	jns    1231 <sysEnter_Vector-0x12edcf>
    11c2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11c9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11cc:	73 73                	jae    1241 <sysEnter_Vector-0x12edbf>
    11ce:	2f                   	das    
    11cf:	6c                   	ins    BYTE PTR es:[edi],dx
    11d0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11d7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11dd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11e3:	78 2d                	js     1212 <sysEnter_Vector-0x12edee>
    11e5:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11e7:	75 2f                	jne    1218 <sysEnter_Vector-0x12ede8>
    11e9:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11ee:	2f                   	das    
    11ef:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11f6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    11f9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    11fd:	65 00 00             	add    BYTE PTR gs:[eax],al
    1200:	73 70                	jae    1272 <sysEnter_Vector-0x12ed8e>
    1202:	72 69                	jb     126d <sysEnter_Vector-0x12ed93>
    1204:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1205:	74 66                	je     126d <sysEnter_Vector-0x12ed93>
    1207:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    120a:	01 00                	add    DWORD PTR [eax],eax
    120c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    120f:	64                   	fs
    1210:	61                   	popa   
    1211:	72 67                	jb     127a <sysEnter_Vector-0x12ed86>
    1213:	2e                   	cs
    1214:	68 00 02 00 00       	push   0x200
    1219:	73 74                	jae    128f <sysEnter_Vector-0x12ed71>
    121b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1222:	63 
    1223:	2e                   	cs
    1224:	68 00 02 00 00       	push   0x200
    1229:	6d                   	ins    DWORD PTR es:[edi],dx
    122a:	61                   	popa   
    122b:	6c                   	ins    BYTE PTR es:[edi],dx
    122c:	6c                   	ins    BYTE PTR es:[edi],dx
    122d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    122e:	63 2e                	arpl   WORD PTR [esi],bp
    1230:	68 00 03 00 00       	push   0x300
    1235:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    123c:	03 00                	add    eax,DWORD PTR [eax]
    123e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1242:	43                   	inc    ebx
    1243:	68 72 69 73 4f       	push   0x4f736972
    1248:	53                   	push   ebx
    1249:	2e                   	cs
    124a:	68 00 03 00 00       	push   0x300
    124f:	00 00                	add    BYTE PTR [eax],al
    1251:	05 02 6c 28 00       	add    eax,0x286c02
    1256:	9f                   	lahf   
    1257:	03 0a                	add    ecx,DWORD PTR [edx]
    1259:	01 08                	add    DWORD PTR [eax],ecx
    125b:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    125e:	02 29                	add    ch,BYTE PTR [ecx]
    1260:	11 08                	adc    DWORD PTR [eax],ecx
    1262:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    1268:	0a 08                	or     cl,BYTE PTR [eax]
    126a:	2e                   	cs
    126b:	91                   	xchg   ecx,eax
    126c:	9f                   	lahf   
    126d:	4b                   	dec    ebx
    126e:	00 02                	add    BYTE PTR [edx],al
    1270:	04 01                	add    al,0x1
    1272:	06                   	push   es
    1273:	66 06                	pushw  es
    1275:	67 9f                	addr16 lahf 
    1277:	00 02                	add    BYTE PTR [edx],al
    1279:	04 01                	add    al,0x1
    127b:	06                   	push   es
    127c:	9e                   	sahf   
    127d:	00 02                	add    BYTE PTR [edx],al
    127f:	04 02                	add    al,0x2
    1281:	74 00                	je     1283 <sysEnter_Vector-0x12ed7d>
    1283:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1286:	58                   	pop    eax
    1287:	00 02                	add    BYTE PTR [edx],al
    1289:	04 04                	add    al,0x4
    128b:	06                   	push   es
    128c:	3d 00 02 04 04       	cmp    eax,0x4040200
    1291:	4b                   	dec    ebx
    1292:	9f                   	lahf   
    1293:	67 4b                	addr16 dec ebx
    1295:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    129a:	9f                   	lahf   
    129b:	4b                   	dec    ebx
    129c:	4d                   	dec    ebp
    129d:	9f                   	lahf   
    129e:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    12a2:	75 67                	jne    130b <sysEnter_Vector-0x12ecf5>
    12a4:	f5                   	cmc    
    12a5:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    12ab:	67 9f                	addr16 lahf 
    12ad:	2f                   	das    
    12ae:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    12b3:	67 d7                	xlat   BYTE PTR ds:[bx]
    12b5:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    12bb:	e3 ca                	jecxz  1287 <sysEnter_Vector-0x12ed79>
    12bd:	2f                   	das    
    12be:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    12c3:	ca 2f b9             	retf   0xb92f
    12c6:	ca 00 02             	retf   0x200
    12c9:	04 01                	add    al,0x1
    12cb:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    12d0:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    12d6:	76 91                	jbe    1269 <sysEnter_Vector-0x12ed97>
    12d8:	08 d8                	or     al,bl
    12da:	4b                   	dec    ebx
    12db:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    12de:	4b                   	dec    ebx
    12df:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    12e2:	4b                   	dec    ebx
    12e3:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    12e6:	13 08                	adc    ecx,DWORD PTR [eax]
    12e8:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    12ee:	4f                   	dec    edi
    12ef:	75 9f                	jne    1290 <sysEnter_Vector-0x12ed70>
    12f1:	91                   	xchg   ecx,eax
    12f2:	08 13                	or     BYTE PTR [ebx],dl
    12f4:	08 13                	or     BYTE PTR [ebx],dl
    12f6:	9f                   	lahf   
    12f7:	92                   	xchg   edx,eax
    12f8:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    12fb:	75 00                	jne    12fd <sysEnter_Vector-0x12ed03>
    12fd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1300:	06                   	push   es
    1301:	9e                   	sahf   
    1302:	00 02                	add    BYTE PTR [edx],al
    1304:	04 02                	add    al,0x2
    1306:	9e                   	sahf   
    1307:	06                   	push   es
    1308:	9f                   	lahf   
    1309:	bb 94 76 02 23       	mov    ebx,0x23027694
    130e:	14 9f                	adc    al,0x9f
    1310:	2f                   	das    
    1311:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    1316:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    131b:	08 30                	or     BYTE PTR [eax],dh
    131d:	76 9f                	jbe    12be <sysEnter_Vector-0x12ed42>
    131f:	2f                   	das    
    1320:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    1325:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    132b:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    132e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1331:	06                   	push   es
    1332:	4a                   	dec    edx
    1333:	06                   	push   es
    1334:	84 2f                	test   BYTE PTR [edi],ch
    1336:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    133b:	4d                   	dec    ebp
    133c:	ab                   	stos   DWORD PTR es:[edi],eax
    133d:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    1343:	55                   	push   ebp
    1344:	d7                   	xlat   BYTE PTR ds:[ebx]
    1345:	ca 5b bb             	retf   0xbb5b
    1348:	5c                   	pop    esp
    1349:	75 31                	jne    137c <sysEnter_Vector-0x12ec84>
    134b:	4c                   	dec    esp
    134c:	75 32                	jne    1380 <sysEnter_Vector-0x12ec80>
    134e:	4c                   	dec    esp
    134f:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    1355:	91                   	xchg   ecx,eax
    1356:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    1359:	03 0a                	add    ecx,DWORD PTR [edx]
    135b:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    135e:	67 08 2f             	or     BYTE PTR [bx],ch
    1361:	9f                   	lahf   
    1362:	91                   	xchg   ecx,eax
    1363:	9f                   	lahf   
    1364:	f4                   	hlt    
    1365:	d7                   	xlat   BYTE PTR ds:[ebx]
    1366:	00 02                	add    BYTE PTR [edx],al
    1368:	04 02                	add    al,0x2
    136a:	03 e8                	add    ebp,eax
    136c:	7e 08                	jle    1376 <sysEnter_Vector-0x12ec8a>
    136e:	f2 00 02             	repnz add BYTE PTR [edx],al
    1371:	04 01                	add    al,0x1
    1373:	06                   	push   es
    1374:	90                   	nop
    1375:	06                   	push   es
    1376:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    137c:	5b                   	pop    ebx
    137d:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    1380:	76 3d                	jbe    13bf <sysEnter_Vector-0x12ec41>
    1382:	02 02                	add    al,BYTE PTR [edx]
    1384:	00 01                	add    BYTE PTR [ecx],al
    1386:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    138c:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    1392:	01 fb                	add    ebx,edi
    1394:	0e                   	push   cs
    1395:	0d 00 01 01 01       	or     eax,0x1010100
    139a:	01 00                	add    DWORD PTR [eax],eax
    139c:	00 00                	add    BYTE PTR [eax],al
    139e:	01 00                	add    DWORD PTR [eax],eax
    13a0:	00 01                	add    BYTE PTR [ecx],al
    13a2:	73 72                	jae    1416 <sysEnter_Vector-0x12ebea>
    13a4:	63 00                	arpl   WORD PTR [eax],ax
    13a6:	2f                   	das    
    13a7:	68 6f 6d 65 2f       	push   0x2f656d6f
    13ac:	79 6f                	jns    141d <sysEnter_Vector-0x12ebe3>
    13ae:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13b5:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13b8:	73 73                	jae    142d <sysEnter_Vector-0x12ebd3>
    13ba:	2f                   	das    
    13bb:	6c                   	ins    BYTE PTR es:[edi],dx
    13bc:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13c3:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13c9:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13cf:	78 2d                	js     13fe <sysEnter_Vector-0x12ec02>
    13d1:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13d3:	75 2f                	jne    1404 <sysEnter_Vector-0x12ebfc>
    13d5:	35 2e 33 2e 30       	xor    eax,0x302e332e
    13da:	2f                   	das    
    13db:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13e2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    13e5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    13e9:	65 00 00             	add    BYTE PTR gs:[eax],al
    13ec:	73 74                	jae    1462 <sysEnter_Vector-0x12eb9e>
    13ee:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    13f5:	00 
    13f6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    13f9:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1400:	63 
    1401:	2e                   	cs
    1402:	68 00 02 00 00       	push   0x200
    1407:	6d                   	ins    DWORD PTR es:[edi],dx
    1408:	61                   	popa   
    1409:	6c                   	ins    BYTE PTR es:[edi],dx
    140a:	6c                   	ins    BYTE PTR es:[edi],dx
    140b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    140c:	63 2e                	arpl   WORD PTR [esi],bp
    140e:	68 00 03 00 00       	push   0x300
    1413:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    141a:	03 00                	add    eax,DWORD PTR [eax]
    141c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1420:	43                   	inc    ebx
    1421:	68 72 69 73 4f       	push   0x4f736972
    1426:	53                   	push   ebx
    1427:	2e                   	cs
    1428:	68 00 03 00 00       	push   0x300
    142d:	00 00                	add    BYTE PTR [eax],al
    142f:	05 02 84 2f 00       	add    eax,0x2f8402
    1434:	9f                   	lahf   
    1435:	03 10                	add    edx,DWORD PTR [eax]
    1437:	01 08                	add    DWORD PTR [eax],ecx
    1439:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    143c:	31 d7                	xor    edi,edx
    143e:	d7                   	xlat   BYTE PTR ds:[ebx]
    143f:	d7                   	xlat   BYTE PTR ds:[ebx]
    1440:	d7                   	xlat   BYTE PTR ds:[ebx]
    1441:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1442:	e6 21                	out    0x21,al
    1444:	02 05 00 01 01 e5    	add    al,BYTE PTR ds:0xe5010100
    144a:	00 00                	add    BYTE PTR [eax],al
    144c:	00 02                	add    BYTE PTR [edx],al
    144e:	00 b2 00 00 00 01    	add    BYTE PTR [edx+0x1000000],dh
    1454:	01 fb                	add    ebx,edi
    1456:	0e                   	push   cs
    1457:	0d 00 01 01 01       	or     eax,0x1010100
    145c:	01 00                	add    DWORD PTR [eax],eax
    145e:	00 00                	add    BYTE PTR [eax],al
    1460:	01 00                	add    DWORD PTR [eax],eax
    1462:	00 01                	add    BYTE PTR [ecx],al
    1464:	73 72                	jae    14d8 <sysEnter_Vector-0x12eb28>
    1466:	63 2f                	arpl   WORD PTR [edi],bp
    1468:	73 74                	jae    14de <sysEnter_Vector-0x12eb22>
    146a:	72 69                	jb     14d5 <sysEnter_Vector-0x12eb2b>
    146c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    146d:	67 73 00             	addr16 jae 1470 <sysEnter_Vector-0x12eb90>
    1470:	2f                   	das    
    1471:	68 6f 6d 65 2f       	push   0x2f656d6f
    1476:	79 6f                	jns    14e7 <sysEnter_Vector-0x12eb19>
    1478:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    147f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1482:	73 73                	jae    14f7 <sysEnter_Vector-0x12eb09>
    1484:	2f                   	das    
    1485:	6c                   	ins    BYTE PTR es:[edi],dx
    1486:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    148d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1493:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1499:	78 2d                	js     14c8 <sysEnter_Vector-0x12eb38>
    149b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    149d:	75 2f                	jne    14ce <sysEnter_Vector-0x12eb32>
    149f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14a4:	2f                   	das    
    14a5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14ac:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    14af:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    14b3:	65 00 00             	add    BYTE PTR gs:[eax],al
    14b6:	73 74                	jae    152c <sysEnter_Vector-0x12ead4>
    14b8:	72 63                	jb     151d <sysEnter_Vector-0x12eae3>
    14ba:	61                   	popa   
    14bb:	74 2e                	je     14eb <sysEnter_Vector-0x12eb15>
    14bd:	63 00                	arpl   WORD PTR [eax],ax
    14bf:	01 00                	add    DWORD PTR [eax],eax
    14c1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    14c4:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    14cb:	63 
    14cc:	2e                   	cs
    14cd:	68 00 02 00 00       	push   0x200
    14d2:	73 74                	jae    1548 <sysEnter_Vector-0x12eab8>
    14d4:	64                   	fs
    14d5:	64                   	fs
    14d6:	65                   	gs
    14d7:	66                   	data16
    14d8:	2e                   	cs
    14d9:	68 00 02 00 00       	push   0x200
    14de:	6d                   	ins    DWORD PTR es:[edi],dx
    14df:	61                   	popa   
    14e0:	6c                   	ins    BYTE PTR es:[edi],dx
    14e1:	6c                   	ins    BYTE PTR es:[edi],dx
    14e2:	6f                   	outs   dx,DWORD PTR ds:[esi]
    14e3:	63 2e                	arpl   WORD PTR [esi],bp
    14e5:	68 00 03 00 00       	push   0x300
    14ea:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    14f1:	03 00                	add    eax,DWORD PTR [eax]
    14f3:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    14f7:	43                   	inc    ebx
    14f8:	68 72 69 73 4f       	push   0x4f736972
    14fd:	53                   	push   ebx
    14fe:	2e                   	cs
    14ff:	68 00 03 00 00       	push   0x300
    1504:	00 00                	add    BYTE PTR [eax],al
    1506:	05 02 08 30 00       	add    eax,0x300802
    150b:	9f                   	lahf   
    150c:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    1512:	24 13                	and    al,0x13
    1514:	3d 5b 08 21 02       	cmp    eax,0x221085b
    1519:	24 13                	and    al,0x13
    151b:	3d 5b 08 21 75       	cmp    eax,0x7521085b
    1520:	08 14 83             	or     BYTE PTR [ebx+eax*4],dl
    1523:	84 68 02             	test   BYTE PTR [eax+0x2],ch
    1526:	27                   	daa    
    1527:	13 3d 5b f3 08 3d    	adc    edi,DWORD PTR ds:0x3d08f35b
    152d:	02 02                	add    al,BYTE PTR [edx]
    152f:	00 01                	add    BYTE PTR [ecx],al
    1531:	01 c8                	add    eax,ecx
    1533:	00 00                	add    BYTE PTR [eax],al
    1535:	00 02                	add    BYTE PTR [edx],al
    1537:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
    153d:	01 fb                	add    ebx,edi
    153f:	0e                   	push   cs
    1540:	0d 00 01 01 01       	or     eax,0x1010100
    1545:	01 00                	add    DWORD PTR [eax],eax
    1547:	00 00                	add    BYTE PTR [eax],al
    1549:	01 00                	add    DWORD PTR [eax],eax
    154b:	00 01                	add    BYTE PTR [ecx],al
    154d:	73 72                	jae    15c1 <sysEnter_Vector-0x12ea3f>
    154f:	63 2f                	arpl   WORD PTR [edi],bp
    1551:	73 74                	jae    15c7 <sysEnter_Vector-0x12ea39>
    1553:	72 69                	jb     15be <sysEnter_Vector-0x12ea42>
    1555:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1556:	67 73 00             	addr16 jae 1559 <sysEnter_Vector-0x12eaa7>
    1559:	2f                   	das    
    155a:	68 6f 6d 65 2f       	push   0x2f656d6f
    155f:	79 6f                	jns    15d0 <sysEnter_Vector-0x12ea30>
    1561:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1568:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    156b:	73 73                	jae    15e0 <sysEnter_Vector-0x12ea20>
    156d:	2f                   	das    
    156e:	6c                   	ins    BYTE PTR es:[edi],dx
    156f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1576:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    157c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1582:	78 2d                	js     15b1 <sysEnter_Vector-0x12ea4f>
    1584:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1586:	75 2f                	jne    15b7 <sysEnter_Vector-0x12ea49>
    1588:	35 2e 33 2e 30       	xor    eax,0x302e332e
    158d:	2f                   	das    
    158e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1595:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1598:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    159c:	65 00 00             	add    BYTE PTR gs:[eax],al
    159f:	73 74                	jae    1615 <sysEnter_Vector-0x12e9eb>
    15a1:	72 63                	jb     1606 <sysEnter_Vector-0x12e9fa>
    15a3:	6d                   	ins    DWORD PTR es:[edi],dx
    15a4:	70 2e                	jo     15d4 <sysEnter_Vector-0x12ea2c>
    15a6:	63 00                	arpl   WORD PTR [eax],ax
    15a8:	01 00                	add    DWORD PTR [eax],eax
    15aa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15ad:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15b4:	63 
    15b5:	2e                   	cs
    15b6:	68 00 02 00 00       	push   0x200
    15bb:	6d                   	ins    DWORD PTR es:[edi],dx
    15bc:	61                   	popa   
    15bd:	6c                   	ins    BYTE PTR es:[edi],dx
    15be:	6c                   	ins    BYTE PTR es:[edi],dx
    15bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15c0:	63 2e                	arpl   WORD PTR [esi],bp
    15c2:	68 00 03 00 00       	push   0x300
    15c7:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    15ce:	03 00                	add    eax,DWORD PTR [eax]
    15d0:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    15d4:	43                   	inc    ebx
    15d5:	68 72 69 73 4f       	push   0x4f736972
    15da:	53                   	push   ebx
    15db:	2e                   	cs
    15dc:	68 00 03 00 00       	push   0x300
    15e1:	00 00                	add    BYTE PTR [eax],al
    15e3:	05 02 1c 31 00       	add    eax,0x311c02
    15e8:	9f                   	lahf   
    15e9:	03 1a                	add    ebx,DWORD PTR [edx]
    15eb:	01 08                	add    DWORD PTR [eax],ecx
    15ed:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    15f3:	d8 92 bb 77 c9 d7    	fcom   DWORD PTR [edx-0x28368845]
    15f9:	02 02                	add    al,BYTE PTR [edx]
    15fb:	00 01                	add    BYTE PTR [ecx],al
    15fd:	01 e6                	add    esi,esp
    15ff:	00 00                	add    BYTE PTR [eax],al
    1601:	00 02                	add    BYTE PTR [edx],al
    1603:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
    1609:	01 fb                	add    ebx,edi
    160b:	0e                   	push   cs
    160c:	0d 00 01 01 01       	or     eax,0x1010100
    1611:	01 00                	add    DWORD PTR [eax],eax
    1613:	00 00                	add    BYTE PTR [eax],al
    1615:	01 00                	add    DWORD PTR [eax],eax
    1617:	00 01                	add    BYTE PTR [ecx],al
    1619:	73 72                	jae    168d <sysEnter_Vector-0x12e973>
    161b:	63 2f                	arpl   WORD PTR [edi],bp
    161d:	73 74                	jae    1693 <sysEnter_Vector-0x12e96d>
    161f:	72 69                	jb     168a <sysEnter_Vector-0x12e976>
    1621:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1622:	67 73 00             	addr16 jae 1625 <sysEnter_Vector-0x12e9db>
    1625:	2f                   	das    
    1626:	68 6f 6d 65 2f       	push   0x2f656d6f
    162b:	79 6f                	jns    169c <sysEnter_Vector-0x12e964>
    162d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1634:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1637:	73 73                	jae    16ac <sysEnter_Vector-0x12e954>
    1639:	2f                   	das    
    163a:	6c                   	ins    BYTE PTR es:[edi],dx
    163b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1642:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1648:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    164e:	78 2d                	js     167d <sysEnter_Vector-0x12e983>
    1650:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1652:	75 2f                	jne    1683 <sysEnter_Vector-0x12e97d>
    1654:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1659:	2f                   	das    
    165a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1661:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1664:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1668:	65 00 00             	add    BYTE PTR gs:[eax],al
    166b:	73 74                	jae    16e1 <sysEnter_Vector-0x12e91f>
    166d:	72 63                	jb     16d2 <sysEnter_Vector-0x12e92e>
    166f:	70 79                	jo     16ea <sysEnter_Vector-0x12e916>
    1671:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1674:	01 00                	add    DWORD PTR [eax],eax
    1676:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1679:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1680:	63 
    1681:	2e                   	cs
    1682:	68 00 02 00 00       	push   0x200
    1687:	6d                   	ins    DWORD PTR es:[edi],dx
    1688:	61                   	popa   
    1689:	6c                   	ins    BYTE PTR es:[edi],dx
    168a:	6c                   	ins    BYTE PTR es:[edi],dx
    168b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    168c:	63 2e                	arpl   WORD PTR [esi],bp
    168e:	68 00 03 00 00       	push   0x300
    1693:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    169a:	03 00                	add    eax,DWORD PTR [eax]
    169c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    16a0:	43                   	inc    ebx
    16a1:	68 72 69 73 4f       	push   0x4f736972
    16a6:	53                   	push   ebx
    16a7:	2e                   	cs
    16a8:	68 00 03 00 00       	push   0x300
    16ad:	00 00                	add    BYTE PTR [eax],al
    16af:	05 02 98 31 00       	add    eax,0x319802
    16b4:	9f                   	lahf   
    16b5:	16                   	push   ss
    16b6:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    16ba:	04 01                	add    al,0x1
    16bc:	06                   	push   es
    16bd:	20 06                	and    BYTE PTR [esi],al
    16bf:	08 ca                	or     dl,cl
    16c1:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    16c7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16ca:	06                   	push   es
    16cb:	20 06                	and    BYTE PTR [esi],al
    16cd:	08 ca                	or     dl,cl
    16cf:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    16d5:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    16d8:	06                   	push   es
    16d9:	20 00                	and    BYTE PTR [eax],al
    16db:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16de:	08 c8                	or     al,cl
    16e0:	06                   	push   es
    16e1:	ca 3d 02             	retf   0x23d
    16e4:	02 00                	add    al,BYTE PTR [eax]
    16e6:	01 01                	add    DWORD PTR [ecx],eax
    16e8:	d5 00                	aad    0x0
    16ea:	00 00                	add    BYTE PTR [eax],al
    16ec:	02 00                	add    al,BYTE PTR [eax]
    16ee:	a8 00                	test   al,0x0
    16f0:	00 00                	add    BYTE PTR [eax],al
    16f2:	01 01                	add    DWORD PTR [ecx],eax
    16f4:	fb                   	sti    
    16f5:	0e                   	push   cs
    16f6:	0d 00 01 01 01       	or     eax,0x1010100
    16fb:	01 00                	add    DWORD PTR [eax],eax
    16fd:	00 00                	add    BYTE PTR [eax],al
    16ff:	01 00                	add    DWORD PTR [eax],eax
    1701:	00 01                	add    BYTE PTR [ecx],al
    1703:	73 72                	jae    1777 <sysEnter_Vector-0x12e889>
    1705:	63 2f                	arpl   WORD PTR [edi],bp
    1707:	73 74                	jae    177d <sysEnter_Vector-0x12e883>
    1709:	72 69                	jb     1774 <sysEnter_Vector-0x12e88c>
    170b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    170c:	67 73 00             	addr16 jae 170f <sysEnter_Vector-0x12e8f1>
    170f:	2f                   	das    
    1710:	68 6f 6d 65 2f       	push   0x2f656d6f
    1715:	79 6f                	jns    1786 <sysEnter_Vector-0x12e87a>
    1717:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    171e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1721:	73 73                	jae    1796 <sysEnter_Vector-0x12e86a>
    1723:	2f                   	das    
    1724:	6c                   	ins    BYTE PTR es:[edi],dx
    1725:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    172c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1732:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1738:	78 2d                	js     1767 <sysEnter_Vector-0x12e899>
    173a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    173c:	75 2f                	jne    176d <sysEnter_Vector-0x12e893>
    173e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1743:	2f                   	das    
    1744:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    174b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    174e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1752:	65 00 00             	add    BYTE PTR gs:[eax],al
    1755:	73 74                	jae    17cb <sysEnter_Vector-0x12e835>
    1757:	72 69                	jb     17c2 <sysEnter_Vector-0x12e83e>
    1759:	73 6e                	jae    17c9 <sysEnter_Vector-0x12e837>
    175b:	75 6d                	jne    17ca <sysEnter_Vector-0x12e836>
    175d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1760:	01 00                	add    DWORD PTR [eax],eax
    1762:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1765:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    176c:	63 
    176d:	2e                   	cs
    176e:	68 00 02 00 00       	push   0x200
    1773:	6d                   	ins    DWORD PTR es:[edi],dx
    1774:	61                   	popa   
    1775:	6c                   	ins    BYTE PTR es:[edi],dx
    1776:	6c                   	ins    BYTE PTR es:[edi],dx
    1777:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1778:	63 2e                	arpl   WORD PTR [esi],bp
    177a:	68 00 03 00 00       	push   0x300
    177f:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1786:	03 00                	add    eax,DWORD PTR [eax]
    1788:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    178c:	43                   	inc    ebx
    178d:	68 72 69 73 4f       	push   0x4f736972
    1792:	53                   	push   ebx
    1793:	2e                   	cs
    1794:	68 00 03 00 00       	push   0x300
    1799:	00 00                	add    BYTE PTR [eax],al
    179b:	05 02 60 32 00       	add    eax,0x326002
    17a0:	9f                   	lahf   
    17a1:	1a 08                	sbb    cl,BYTE PTR [eax]
    17a3:	59                   	pop    ecx
    17a4:	00 02                	add    BYTE PTR [edx],al
    17a6:	04 01                	add    al,0x1
    17a8:	06                   	push   es
    17a9:	66                   	data16
    17aa:	00 02                	add    BYTE PTR [edx],al
    17ac:	04 02                	add    al,0x2
    17ae:	66 06                	pushw  es
    17b0:	75 59                	jne    180b <sysEnter_Vector-0x12e7f5>
    17b2:	31 f3                	xor    ebx,esi
    17b4:	76 2f                	jbe    17e5 <sysEnter_Vector-0x12e81b>
    17b6:	08 e5                	or     ch,ah
    17b8:	72 08                	jb     17c2 <sysEnter_Vector-0x12e83e>
    17ba:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    17bd:	02 00                	add    al,BYTE PTR [eax]
    17bf:	01 01                	add    DWORD PTR [ecx],eax
    17c1:	df 00                	fild   WORD PTR [eax]
    17c3:	00 00                	add    BYTE PTR [eax],al
    17c5:	02 00                	add    al,BYTE PTR [eax]
    17c7:	b2 00                	mov    dl,0x0
    17c9:	00 00                	add    BYTE PTR [eax],al
    17cb:	01 01                	add    DWORD PTR [ecx],eax
    17cd:	fb                   	sti    
    17ce:	0e                   	push   cs
    17cf:	0d 00 01 01 01       	or     eax,0x1010100
    17d4:	01 00                	add    DWORD PTR [eax],eax
    17d6:	00 00                	add    BYTE PTR [eax],al
    17d8:	01 00                	add    DWORD PTR [eax],eax
    17da:	00 01                	add    BYTE PTR [ecx],al
    17dc:	73 72                	jae    1850 <sysEnter_Vector-0x12e7b0>
    17de:	63 2f                	arpl   WORD PTR [edi],bp
    17e0:	73 74                	jae    1856 <sysEnter_Vector-0x12e7aa>
    17e2:	72 69                	jb     184d <sysEnter_Vector-0x12e7b3>
    17e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17e5:	67 73 00             	addr16 jae 17e8 <sysEnter_Vector-0x12e818>
    17e8:	2f                   	das    
    17e9:	68 6f 6d 65 2f       	push   0x2f656d6f
    17ee:	79 6f                	jns    185f <sysEnter_Vector-0x12e7a1>
    17f0:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17f7:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17fa:	73 73                	jae    186f <sysEnter_Vector-0x12e791>
    17fc:	2f                   	das    
    17fd:	6c                   	ins    BYTE PTR es:[edi],dx
    17fe:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1805:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    180b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1811:	78 2d                	js     1840 <sysEnter_Vector-0x12e7c0>
    1813:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1815:	75 2f                	jne    1846 <sysEnter_Vector-0x12e7ba>
    1817:	35 2e 33 2e 30       	xor    eax,0x302e332e
    181c:	2f                   	das    
    181d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1824:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1827:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    182b:	65 00 00             	add    BYTE PTR gs:[eax],al
    182e:	73 74                	jae    18a4 <sysEnter_Vector-0x12e75c>
    1830:	72 6c                	jb     189e <sysEnter_Vector-0x12e762>
    1832:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1834:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1837:	01 00                	add    DWORD PTR [eax],eax
    1839:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    183c:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1843:	63 
    1844:	2e                   	cs
    1845:	68 00 02 00 00       	push   0x200
    184a:	73 74                	jae    18c0 <sysEnter_Vector-0x12e740>
    184c:	64                   	fs
    184d:	64                   	fs
    184e:	65                   	gs
    184f:	66                   	data16
    1850:	2e                   	cs
    1851:	68 00 02 00 00       	push   0x200
    1856:	6d                   	ins    DWORD PTR es:[edi],dx
    1857:	61                   	popa   
    1858:	6c                   	ins    BYTE PTR es:[edi],dx
    1859:	6c                   	ins    BYTE PTR es:[edi],dx
    185a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    185b:	63 2e                	arpl   WORD PTR [esi],bp
    185d:	68 00 03 00 00       	push   0x300
    1862:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1869:	03 00                	add    eax,DWORD PTR [eax]
    186b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    186f:	43                   	inc    ebx
    1870:	68 72 69 73 4f       	push   0x4f736972
    1875:	53                   	push   ebx
    1876:	2e                   	cs
    1877:	68 00 03 00 00       	push   0x300
    187c:	00 00                	add    BYTE PTR [eax],al
    187e:	05 02 ec 32 00       	add    eax,0x32ec02
    1883:	9f                   	lahf   
    1884:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    1889:	e6 3d                	out    0x3d,al
    188b:	31 c9                	xor    ecx,ecx
    188d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    188e:	31 f3                	xor    ebx,esi
    1890:	75 2f                	jne    18c1 <sysEnter_Vector-0x12e73f>
    1892:	49                   	dec    ecx
    1893:	00 02                	add    BYTE PTR [edx],al
    1895:	04 01                	add    al,0x1
    1897:	06                   	push   es
    1898:	e4 06                	in     al,0x6
    189a:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    18a0:	02 00                	add    al,BYTE PTR [eax]
    18a2:	01 01                	add    DWORD PTR [ecx],eax
    18a4:	c1 00 00             	rol    DWORD PTR [eax],0x0
    18a7:	00 02                	add    BYTE PTR [edx],al
    18a9:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    18ac:	00 00                	add    BYTE PTR [eax],al
    18ae:	01 01                	add    DWORD PTR [ecx],eax
    18b0:	fb                   	sti    
    18b1:	0e                   	push   cs
    18b2:	0d 00 01 01 01       	or     eax,0x1010100
    18b7:	01 00                	add    DWORD PTR [eax],eax
    18b9:	00 00                	add    BYTE PTR [eax],al
    18bb:	01 00                	add    DWORD PTR [eax],eax
    18bd:	00 01                	add    BYTE PTR [ecx],al
    18bf:	73 72                	jae    1933 <sysEnter_Vector-0x12e6cd>
    18c1:	63 2f                	arpl   WORD PTR [edi],bp
    18c3:	73 74                	jae    1939 <sysEnter_Vector-0x12e6c7>
    18c5:	72 69                	jb     1930 <sysEnter_Vector-0x12e6d0>
    18c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18c8:	67 73 00             	addr16 jae 18cb <sysEnter_Vector-0x12e735>
    18cb:	2f                   	das    
    18cc:	68 6f 6d 65 2f       	push   0x2f656d6f
    18d1:	79 6f                	jns    1942 <sysEnter_Vector-0x12e6be>
    18d3:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    18da:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    18dd:	73 73                	jae    1952 <sysEnter_Vector-0x12e6ae>
    18df:	2f                   	das    
    18e0:	6c                   	ins    BYTE PTR es:[edi],dx
    18e1:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    18e8:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    18ee:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    18f4:	78 2d                	js     1923 <sysEnter_Vector-0x12e6dd>
    18f6:	67 6e                	outs   dx,BYTE PTR ds:[si]
    18f8:	75 2f                	jne    1929 <sysEnter_Vector-0x12e6d7>
    18fa:	35 2e 33 2e 30       	xor    eax,0x302e332e
    18ff:	2f                   	das    
    1900:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1907:	00 00                	add    BYTE PTR [eax],al
    1909:	73 74                	jae    197f <sysEnter_Vector-0x12e681>
    190b:	72 6e                	jb     197b <sysEnter_Vector-0x12e685>
    190d:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1910:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1913:	01 00                	add    DWORD PTR [eax],eax
    1915:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1918:	64                   	fs
    1919:	64                   	fs
    191a:	65                   	gs
    191b:	66                   	data16
    191c:	2e                   	cs
    191d:	68 00 02 00 00       	push   0x200
    1922:	00 00                	add    BYTE PTR [eax],al
    1924:	05 02 90 33 00       	add    eax,0x339002
    1929:	9f                   	lahf   
    192a:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    192d:	c9                   	leave  
    192e:	2f                   	das    
    192f:	f3 00 02             	repz add BYTE PTR [edx],al
    1932:	04 01                	add    al,0x1
    1934:	06                   	push   es
    1935:	f2 00 02             	repnz add BYTE PTR [edx],al
    1938:	04 02                	add    al,0x2
    193a:	74 06                	je     1942 <sysEnter_Vector-0x12e6be>
    193c:	75 9f                	jne    18dd <sysEnter_Vector-0x12e723>
    193e:	70 00                	jo     1940 <sysEnter_Vector-0x12e6c0>
    1940:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1943:	06                   	push   es
    1944:	ba 06 6b 59 31       	mov    edx,0x31596b06
    1949:	c9                   	leave  
    194a:	2f                   	das    
    194b:	f3 00 02             	repz add BYTE PTR [edx],al
    194e:	04 01                	add    al,0x1
    1950:	06                   	push   es
    1951:	f2 00 02             	repnz add BYTE PTR [edx],al
    1954:	04 02                	add    al,0x2
    1956:	74 06                	je     195e <sysEnter_Vector-0x12e6a2>
    1958:	75 9f                	jne    18f9 <sysEnter_Vector-0x12e707>
    195a:	70 00                	jo     195c <sysEnter_Vector-0x12e6a4>
    195c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    195f:	06                   	push   es
    1960:	ba 06 6b 59 02       	mov    edx,0x2596b06
    1965:	02 00                	add    al,BYTE PTR [eax]
    1967:	01 01                	add    DWORD PTR [ecx],eax
    1969:	a3 00 00 00 02       	mov    ds:0x2000000,eax
    196e:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1971:	00 00                	add    BYTE PTR [eax],al
    1973:	01 01                	add    DWORD PTR [ecx],eax
    1975:	fb                   	sti    
    1976:	0e                   	push   cs
    1977:	0d 00 01 01 01       	or     eax,0x1010100
    197c:	01 00                	add    DWORD PTR [eax],eax
    197e:	00 00                	add    BYTE PTR [eax],al
    1980:	01 00                	add    DWORD PTR [eax],eax
    1982:	00 01                	add    BYTE PTR [ecx],al
    1984:	73 72                	jae    19f8 <sysEnter_Vector-0x12e608>
    1986:	63 2f                	arpl   WORD PTR [edi],bp
    1988:	73 74                	jae    19fe <sysEnter_Vector-0x12e602>
    198a:	72 69                	jb     19f5 <sysEnter_Vector-0x12e60b>
    198c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    198d:	67 73 00             	addr16 jae 1990 <sysEnter_Vector-0x12e670>
    1990:	2f                   	das    
    1991:	68 6f 6d 65 2f       	push   0x2f656d6f
    1996:	79 6f                	jns    1a07 <sysEnter_Vector-0x12e5f9>
    1998:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    199f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    19a2:	73 73                	jae    1a17 <sysEnter_Vector-0x12e5e9>
    19a4:	2f                   	das    
    19a5:	6c                   	ins    BYTE PTR es:[edi],dx
    19a6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    19ad:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    19b3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    19b9:	78 2d                	js     19e8 <sysEnter_Vector-0x12e618>
    19bb:	67 6e                	outs   dx,BYTE PTR ds:[si]
    19bd:	75 2f                	jne    19ee <sysEnter_Vector-0x12e612>
    19bf:	35 2e 33 2e 30       	xor    eax,0x302e332e
    19c4:	2f                   	das    
    19c5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    19cc:	00 00                	add    BYTE PTR [eax],al
    19ce:	73 74                	jae    1a44 <sysEnter_Vector-0x12e5bc>
    19d0:	72 6e                	jb     1a40 <sysEnter_Vector-0x12e5c0>
    19d2:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    19d5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19d8:	01 00                	add    DWORD PTR [eax],eax
    19da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    19dd:	64                   	fs
    19de:	64                   	fs
    19df:	65                   	gs
    19e0:	66                   	data16
    19e1:	2e                   	cs
    19e2:	68 00 02 00 00       	push   0x200
    19e7:	00 00                	add    BYTE PTR [eax],al
    19e9:	05 02 60 34 00       	add    eax,0x346002
    19ee:	9f                   	lahf   
    19ef:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    19f5:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    19f8:	00 02                	add    BYTE PTR [edx],al
    19fa:	04 01                	add    al,0x1
    19fc:	06                   	push   es
    19fd:	66 06                	pushw  es
    19ff:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1a04:	67 67 3d 31 c9 08 13 	addr32 addr16 cmp eax,0x1308c931
    1a0b:	02 02                	add    al,BYTE PTR [edx]
    1a0d:	00 01                	add    BYTE PTR [ecx],al
    1a0f:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    1a12:	00 00                	add    BYTE PTR [eax],al
    1a14:	02 00                	add    al,BYTE PTR [eax]
    1a16:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1a17:	00 00                	add    BYTE PTR [eax],al
    1a19:	00 01                	add    BYTE PTR [ecx],al
    1a1b:	01 fb                	add    ebx,edi
    1a1d:	0e                   	push   cs
    1a1e:	0d 00 01 01 01       	or     eax,0x1010100
    1a23:	01 00                	add    DWORD PTR [eax],eax
    1a25:	00 00                	add    BYTE PTR [eax],al
    1a27:	01 00                	add    DWORD PTR [eax],eax
    1a29:	00 01                	add    BYTE PTR [ecx],al
    1a2b:	73 72                	jae    1a9f <sysEnter_Vector-0x12e561>
    1a2d:	63 2f                	arpl   WORD PTR [edi],bp
    1a2f:	73 74                	jae    1aa5 <sysEnter_Vector-0x12e55b>
    1a31:	72 69                	jb     1a9c <sysEnter_Vector-0x12e564>
    1a33:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a34:	67 73 00             	addr16 jae 1a37 <sysEnter_Vector-0x12e5c9>
    1a37:	2f                   	das    
    1a38:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a3d:	79 6f                	jns    1aae <sysEnter_Vector-0x12e552>
    1a3f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a46:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a49:	73 73                	jae    1abe <sysEnter_Vector-0x12e542>
    1a4b:	2f                   	das    
    1a4c:	6c                   	ins    BYTE PTR es:[edi],dx
    1a4d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a54:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a5a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a60:	78 2d                	js     1a8f <sysEnter_Vector-0x12e571>
    1a62:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a64:	75 2f                	jne    1a95 <sysEnter_Vector-0x12e56b>
    1a66:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a6b:	2f                   	das    
    1a6c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a73:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a76:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a7a:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a7d:	73 74                	jae    1af3 <sysEnter_Vector-0x12e50d>
    1a7f:	72 6f                	jb     1af0 <sysEnter_Vector-0x12e510>
    1a81:	75 6c                	jne    1aef <sysEnter_Vector-0x12e511>
    1a83:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1a86:	01 00                	add    DWORD PTR [eax],eax
    1a88:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1a8b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1a92:	63 
    1a93:	2e                   	cs
    1a94:	68 00 02 00 00       	push   0x200
    1a99:	6d                   	ins    DWORD PTR es:[edi],dx
    1a9a:	61                   	popa   
    1a9b:	6c                   	ins    BYTE PTR es:[edi],dx
    1a9c:	6c                   	ins    BYTE PTR es:[edi],dx
    1a9d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a9e:	63 2e                	arpl   WORD PTR [esi],bp
    1aa0:	68 00 03 00 00       	push   0x300
    1aa5:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1aac:	03 00                	add    eax,DWORD PTR [eax]
    1aae:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1ab2:	43                   	inc    ebx
    1ab3:	68 72 69 73 4f       	push   0x4f736972
    1ab8:	53                   	push   ebx
    1ab9:	2e                   	cs
    1aba:	68 00 03 00 00       	push   0x300
    1abf:	00 00                	add    BYTE PTR [eax],al
    1ac1:	05 02 ec 34 00       	add    eax,0x34ec02
    1ac6:	9f                   	lahf   
    1ac7:	03 3b                	add    edi,DWORD PTR [ebx]
    1ac9:	01 08                	add    DWORD PTR [eax],ecx
    1acb:	2f                   	das    
    1acc:	40                   	inc    eax
    1acd:	00 02                	add    BYTE PTR [edx],al
    1acf:	04 01                	add    al,0x1
    1ad1:	7a 00                	jp     1ad3 <sysEnter_Vector-0x12e52d>
    1ad3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1ad6:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1ad7:	59                   	pop    ecx
    1ad8:	59                   	pop    ecx
    1ad9:	75 c9                	jne    1aa4 <sysEnter_Vector-0x12e55c>
    1adb:	59                   	pop    ecx
    1adc:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1add:	00 02                	add    BYTE PTR [edx],al
    1adf:	04 02                	add    al,0x2
    1ae1:	06                   	push   es
    1ae2:	66                   	data16
    1ae3:	00 02                	add    BYTE PTR [edx],al
    1ae5:	04 03                	add    al,0x3
    1ae7:	66 06                	pushw  es
    1ae9:	59                   	pop    ecx
    1aea:	00 02                	add    BYTE PTR [edx],al
    1aec:	04 01                	add    al,0x1
    1aee:	06                   	push   es
    1aef:	74 06                	je     1af7 <sysEnter_Vector-0x12e509>
    1af1:	75 91                	jne    1a84 <sysEnter_Vector-0x12e57c>
    1af3:	3d 76 67 00 02       	cmp    eax,0x2006776
    1af8:	04 01                	add    al,0x1
    1afa:	06                   	push   es
    1afb:	58                   	pop    eax
    1afc:	00 02                	add    BYTE PTR [edx],al
    1afe:	04 02                	add    al,0x2
    1b00:	74 00                	je     1b02 <sysEnter_Vector-0x12e4fe>
    1b02:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1b05:	58                   	pop    eax
    1b06:	06                   	push   es
    1b07:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1b0c:	9f                   	lahf   
    1b0d:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1b11:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b14:	06                   	push   es
    1b15:	58                   	pop    eax
    1b16:	00 02                	add    BYTE PTR [edx],al
    1b18:	04 03                	add    al,0x3
    1b1a:	58                   	pop    eax
    1b1b:	00 02                	add    BYTE PTR [edx],al
    1b1d:	04 04                	add    al,0x4
    1b1f:	74 00                	je     1b21 <sysEnter_Vector-0x12e4df>
    1b21:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b24:	58                   	pop    eax
    1b25:	06                   	push   es
    1b26:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1b29:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b2c:	06                   	push   es
    1b2d:	66                   	data16
    1b2e:	00 02                	add    BYTE PTR [edx],al
    1b30:	04 02                	add    al,0x2
    1b32:	58                   	pop    eax
    1b33:	00 02                	add    BYTE PTR [edx],al
    1b35:	04 03                	add    al,0x3
    1b37:	58                   	pop    eax
    1b38:	06                   	push   es
    1b39:	67 76 59             	addr16 jbe 1b95 <sysEnter_Vector-0x12e46b>
    1b3c:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1b40:	03 10                	add    edx,DWORD PTR [eax]
    1b42:	ac                   	lods   al,BYTE PTR ds:[esi]
    1b43:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1b46:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1b49:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1b4c:	67 2f                	addr16 das 
    1b4e:	67 00 02             	add    BYTE PTR [bp+si],al
    1b51:	04 01                	add    al,0x1
    1b53:	06                   	push   es
    1b54:	66                   	data16
    1b55:	00 02                	add    BYTE PTR [edx],al
    1b57:	04 02                	add    al,0x2
    1b59:	58                   	pop    eax
    1b5a:	00 02                	add    BYTE PTR [edx],al
    1b5c:	04 04                	add    al,0x4
    1b5e:	3c 06                	cmp    al,0x6
    1b60:	59                   	pop    ecx
    1b61:	2f                   	das    
    1b62:	02 08                	add    cl,BYTE PTR [eax]
    1b64:	00 01                	add    BYTE PTR [ecx],al
    1b66:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1b69:	00 00                	add    BYTE PTR [eax],al
    1b6b:	02 00                	add    al,BYTE PTR [eax]
    1b6d:	2d 00 00 00 01       	sub    eax,0x1000000
    1b72:	01 fb                	add    ebx,edi
    1b74:	0e                   	push   cs
    1b75:	0d 00 01 01 01       	or     eax,0x1010100
    1b7a:	01 00                	add    DWORD PTR [eax],eax
    1b7c:	00 00                	add    BYTE PTR [eax],al
    1b7e:	01 00                	add    DWORD PTR [eax],eax
    1b80:	00 01                	add    BYTE PTR [ecx],al
    1b82:	73 72                	jae    1bf6 <sysEnter_Vector-0x12e40a>
    1b84:	63 2f                	arpl   WORD PTR [edi],bp
    1b86:	73 74                	jae    1bfc <sysEnter_Vector-0x12e404>
    1b88:	72 69                	jb     1bf3 <sysEnter_Vector-0x12e40d>
    1b8a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b8b:	67 73 00             	addr16 jae 1b8e <sysEnter_Vector-0x12e472>
    1b8e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1b91:	72 70                	jb     1c03 <sysEnter_Vector-0x12e3fd>
    1b93:	61                   	popa   
    1b94:	72 74                	jb     1c0a <sysEnter_Vector-0x12e3f6>
    1b96:	73 2e                	jae    1bc6 <sysEnter_Vector-0x12e43a>
    1b98:	63 00                	arpl   WORD PTR [eax],ax
    1b9a:	01 00                	add    DWORD PTR [eax],eax
    1b9c:	00 00                	add    BYTE PTR [eax],al
    1b9e:	00 05 02 6c 36 00    	add    BYTE PTR ds:0x366c02,al
    1ba4:	9f                   	lahf   
    1ba5:	13 c9                	adc    ecx,ecx
    1ba7:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1ba8:	3d 02 02 00 01       	cmp    eax,0x1000202
    1bad:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    1bb0:	00 00                	add    BYTE PTR [eax],al
    1bb2:	02 00                	add    al,BYTE PTR [eax]
    1bb4:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1bb5:	00 00                	add    BYTE PTR [eax],al
    1bb7:	00 01                	add    BYTE PTR [ecx],al
    1bb9:	01 fb                	add    ebx,edi
    1bbb:	0e                   	push   cs
    1bbc:	0d 00 01 01 01       	or     eax,0x1010100
    1bc1:	01 00                	add    DWORD PTR [eax],eax
    1bc3:	00 00                	add    BYTE PTR [eax],al
    1bc5:	01 00                	add    DWORD PTR [eax],eax
    1bc7:	00 01                	add    BYTE PTR [ecx],al
    1bc9:	73 72                	jae    1c3d <sysEnter_Vector-0x12e3c3>
    1bcb:	63 2f                	arpl   WORD PTR [edi],bp
    1bcd:	73 74                	jae    1c43 <sysEnter_Vector-0x12e3bd>
    1bcf:	72 69                	jb     1c3a <sysEnter_Vector-0x12e3c6>
    1bd1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1bd2:	67 73 00             	addr16 jae 1bd5 <sysEnter_Vector-0x12e42b>
    1bd5:	2f                   	das    
    1bd6:	68 6f 6d 65 2f       	push   0x2f656d6f
    1bdb:	79 6f                	jns    1c4c <sysEnter_Vector-0x12e3b4>
    1bdd:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1be4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1be7:	73 73                	jae    1c5c <sysEnter_Vector-0x12e3a4>
    1be9:	2f                   	das    
    1bea:	6c                   	ins    BYTE PTR es:[edi],dx
    1beb:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1bf2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1bf8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1bfe:	78 2d                	js     1c2d <sysEnter_Vector-0x12e3d3>
    1c00:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1c02:	75 2f                	jne    1c33 <sysEnter_Vector-0x12e3cd>
    1c04:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1c09:	2f                   	das    
    1c0a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1c11:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1c14:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1c18:	65 00 00             	add    BYTE PTR gs:[eax],al
    1c1b:	73 74                	jae    1c91 <sysEnter_Vector-0x12e36f>
    1c1d:	72 74                	jb     1c93 <sysEnter_Vector-0x12e36d>
    1c1f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c20:	6c                   	ins    BYTE PTR es:[edi],dx
    1c21:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1c24:	01 00                	add    DWORD PTR [eax],eax
    1c26:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c29:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1c30:	63 
    1c31:	2e                   	cs
    1c32:	68 00 02 00 00       	push   0x200
    1c37:	6d                   	ins    DWORD PTR es:[edi],dx
    1c38:	61                   	popa   
    1c39:	6c                   	ins    BYTE PTR es:[edi],dx
    1c3a:	6c                   	ins    BYTE PTR es:[edi],dx
    1c3b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c3c:	63 2e                	arpl   WORD PTR [esi],bp
    1c3e:	68 00 03 00 00       	push   0x300
    1c43:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1c4a:	03 00                	add    eax,DWORD PTR [eax]
    1c4c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1c50:	43                   	inc    ebx
    1c51:	68 72 69 73 4f       	push   0x4f736972
    1c56:	53                   	push   ebx
    1c57:	2e                   	cs
    1c58:	68 00 03 00 00       	push   0x300
    1c5d:	00 00                	add    BYTE PTR [eax],al
    1c5f:	05 02 8c 36 00       	add    eax,0x368c02
    1c64:	9f                   	lahf   
    1c65:	03 d7                	add    edx,edi
    1c67:	00 01                	add    BYTE PTR [ecx],al
    1c69:	08 2f                	or     BYTE PTR [edi],ch
    1c6b:	40                   	inc    eax
    1c6c:	00 02                	add    BYTE PTR [edx],al
    1c6e:	04 01                	add    al,0x1
    1c70:	7c 00                	jl     1c72 <sysEnter_Vector-0x12e38e>
    1c72:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c75:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c76:	59                   	pop    ecx
    1c77:	59                   	pop    ecx
    1c78:	75 c9                	jne    1c43 <sysEnter_Vector-0x12e3bd>
    1c7a:	59                   	pop    ecx
    1c7b:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c7c:	00 02                	add    BYTE PTR [edx],al
    1c7e:	04 02                	add    al,0x2
    1c80:	06                   	push   es
    1c81:	66                   	data16
    1c82:	00 02                	add    BYTE PTR [edx],al
    1c84:	04 03                	add    al,0x3
    1c86:	66 06                	pushw  es
    1c88:	59                   	pop    ecx
    1c89:	00 02                	add    BYTE PTR [edx],al
    1c8b:	04 01                	add    al,0x1
    1c8d:	06                   	push   es
    1c8e:	74 06                	je     1c96 <sysEnter_Vector-0x12e36a>
    1c90:	75 91                	jne    1c23 <sysEnter_Vector-0x12e3dd>
    1c92:	3d 76 67 00 02       	cmp    eax,0x2006776
    1c97:	04 01                	add    al,0x1
    1c99:	06                   	push   es
    1c9a:	58                   	pop    eax
    1c9b:	00 02                	add    BYTE PTR [edx],al
    1c9d:	04 02                	add    al,0x2
    1c9f:	74 00                	je     1ca1 <sysEnter_Vector-0x12e35f>
    1ca1:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1ca4:	58                   	pop    eax
    1ca5:	06                   	push   es
    1ca6:	03 13                	add    edx,DWORD PTR [ebx]
    1ca8:	3c 00                	cmp    al,0x0
    1caa:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1cad:	06                   	push   es
    1cae:	66                   	data16
    1caf:	00 02                	add    BYTE PTR [edx],al
    1cb1:	04 02                	add    al,0x2
    1cb3:	74 00                	je     1cb5 <sysEnter_Vector-0x12e34b>
    1cb5:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1cb8:	06                   	push   es
    1cb9:	59                   	pop    ecx
    1cba:	00 02                	add    BYTE PTR [edx],al
    1cbc:	04 04                	add    al,0x4
    1cbe:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1cc4:	f3 9f                	repz lahf 
    1cc6:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1cca:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1ccd:	06                   	push   es
    1cce:	58                   	pop    eax
    1ccf:	00 02                	add    BYTE PTR [edx],al
    1cd1:	04 03                	add    al,0x3
    1cd3:	58                   	pop    eax
    1cd4:	00 02                	add    BYTE PTR [edx],al
    1cd6:	04 04                	add    al,0x4
    1cd8:	74 00                	je     1cda <sysEnter_Vector-0x12e326>
    1cda:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cdd:	58                   	pop    eax
    1cde:	06                   	push   es
    1cdf:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1ce2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1ce5:	06                   	push   es
    1ce6:	66                   	data16
    1ce7:	00 02                	add    BYTE PTR [edx],al
    1ce9:	04 02                	add    al,0x2
    1ceb:	58                   	pop    eax
    1cec:	00 02                	add    BYTE PTR [edx],al
    1cee:	04 03                	add    al,0x3
    1cf0:	58                   	pop    eax
    1cf1:	06                   	push   es
    1cf2:	59                   	pop    ecx
    1cf3:	76 59                	jbe    1d4e <sysEnter_Vector-0x12e2b2>
    1cf5:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1cf9:	03 10                	add    edx,DWORD PTR [eax]
    1cfb:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cfc:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1cff:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1d02:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1d05:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d08:	06                   	push   es
    1d09:	66                   	data16
    1d0a:	00 02                	add    BYTE PTR [edx],al
    1d0c:	04 02                	add    al,0x2
    1d0e:	74 00                	je     1d10 <sysEnter_Vector-0x12e2f0>
    1d10:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1d13:	58                   	pop    eax
    1d14:	06                   	push   es
    1d15:	4b                   	dec    ebx
    1d16:	67 2f                	addr16 das 
    1d18:	67 00 02             	add    BYTE PTR [bp+si],al
    1d1b:	04 01                	add    al,0x1
    1d1d:	06                   	push   es
    1d1e:	66                   	data16
    1d1f:	00 02                	add    BYTE PTR [edx],al
    1d21:	04 02                	add    al,0x2
    1d23:	58                   	pop    eax
    1d24:	00 02                	add    BYTE PTR [edx],al
    1d26:	04 04                	add    al,0x4
    1d28:	3c 06                	cmp    al,0x6
    1d2a:	59                   	pop    ecx
    1d2b:	2f                   	das    
    1d2c:	02 08                	add    cl,BYTE PTR [eax]
    1d2e:	00 01                	add    BYTE PTR [ecx],al
    1d30:	01 d9                	add    ecx,ebx
    1d32:	00 00                	add    BYTE PTR [eax],al
    1d34:	00 02                	add    BYTE PTR [edx],al
    1d36:	00 a7 00 00 00 01    	add    BYTE PTR [edi+0x1000000],ah
    1d3c:	01 fb                	add    ebx,edi
    1d3e:	0e                   	push   cs
    1d3f:	0d 00 01 01 01       	or     eax,0x1010100
    1d44:	01 00                	add    DWORD PTR [eax],eax
    1d46:	00 00                	add    BYTE PTR [eax],al
    1d48:	01 00                	add    DWORD PTR [eax],eax
    1d4a:	00 01                	add    BYTE PTR [ecx],al
    1d4c:	73 72                	jae    1dc0 <sysEnter_Vector-0x12e240>
    1d4e:	63 2f                	arpl   WORD PTR [edi],bp
    1d50:	73 74                	jae    1dc6 <sysEnter_Vector-0x12e23a>
    1d52:	72 69                	jb     1dbd <sysEnter_Vector-0x12e243>
    1d54:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d55:	67 73 00             	addr16 jae 1d58 <sysEnter_Vector-0x12e2a8>
    1d58:	2f                   	das    
    1d59:	68 6f 6d 65 2f       	push   0x2f656d6f
    1d5e:	79 6f                	jns    1dcf <sysEnter_Vector-0x12e231>
    1d60:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1d67:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1d6a:	73 73                	jae    1ddf <sysEnter_Vector-0x12e221>
    1d6c:	2f                   	das    
    1d6d:	6c                   	ins    BYTE PTR es:[edi],dx
    1d6e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1d75:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1d7b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1d81:	78 2d                	js     1db0 <sysEnter_Vector-0x12e250>
    1d83:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1d85:	75 2f                	jne    1db6 <sysEnter_Vector-0x12e24a>
    1d87:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1d8c:	2f                   	das    
    1d8d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1d94:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1d97:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1d9b:	65 00 00             	add    BYTE PTR gs:[eax],al
    1d9e:	73 74                	jae    1e14 <sysEnter_Vector-0x12e1ec>
    1da0:	72 74                	jb     1e16 <sysEnter_Vector-0x12e1ea>
    1da2:	72 69                	jb     1e0d <sysEnter_Vector-0x12e1f3>
    1da4:	6d                   	ins    DWORD PTR es:[edi],dx
    1da5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1da8:	01 00                	add    DWORD PTR [eax],eax
    1daa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1dad:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1db4:	63 
    1db5:	2e                   	cs
    1db6:	68 00 02 00 00       	push   0x200
    1dbb:	6d                   	ins    DWORD PTR es:[edi],dx
    1dbc:	61                   	popa   
    1dbd:	6c                   	ins    BYTE PTR es:[edi],dx
    1dbe:	6c                   	ins    BYTE PTR es:[edi],dx
    1dbf:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1dc0:	63 2e                	arpl   WORD PTR [esi],bp
    1dc2:	68 00 03 00 00       	push   0x300
    1dc7:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1dce:	03 00                	add    eax,DWORD PTR [eax]
    1dd0:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1dd4:	43                   	inc    ebx
    1dd5:	68 72 69 73 4f       	push   0x4f736972
    1dda:	53                   	push   ebx
    1ddb:	2e                   	cs
    1ddc:	68 00 03 00 00       	push   0x300
    1de1:	00 00                	add    BYTE PTR [eax],al
    1de3:	05 02 28 38 00       	add    eax,0x382802
    1de8:	9f                   	lahf   
    1de9:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1dee:	48                   	dec    eax
    1def:	b3 08                	mov    bl,0x8
    1df1:	9f                   	lahf   
    1df2:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1df8:	06                   	push   es
    1df9:	82                   	(bad)  
    1dfa:	06                   	push   es
    1dfb:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1dfc:	84 00                	test   BYTE PTR [eax],al
    1dfe:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1e01:	06                   	push   es
    1e02:	20 06                	and    BYTE PTR [esi],al
    1e04:	08 ca                	or     dl,cl
    1e06:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1e0c:	01 01                	add    DWORD PTR [ecx],eax
    1e0e:	e4 00                	in     al,0x0
    1e10:	00 00                	add    BYTE PTR [eax],al
    1e12:	02 00                	add    al,BYTE PTR [eax]
    1e14:	ae                   	scas   al,BYTE PTR es:[edi]
    1e15:	00 00                	add    BYTE PTR [eax],al
    1e17:	00 01                	add    BYTE PTR [ecx],al
    1e19:	01 fb                	add    ebx,edi
    1e1b:	0e                   	push   cs
    1e1c:	0d 00 01 01 01       	or     eax,0x1010100
    1e21:	01 00                	add    DWORD PTR [eax],eax
    1e23:	00 00                	add    BYTE PTR [eax],al
    1e25:	01 00                	add    DWORD PTR [eax],eax
    1e27:	00 01                	add    BYTE PTR [ecx],al
    1e29:	73 72                	jae    1e9d <sysEnter_Vector-0x12e163>
    1e2b:	63 00                	arpl   WORD PTR [eax],ax
    1e2d:	2f                   	das    
    1e2e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1e33:	79 6f                	jns    1ea4 <sysEnter_Vector-0x12e15c>
    1e35:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1e3c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1e3f:	73 73                	jae    1eb4 <sysEnter_Vector-0x12e14c>
    1e41:	2f                   	das    
    1e42:	6c                   	ins    BYTE PTR es:[edi],dx
    1e43:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1e4a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1e50:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1e56:	78 2d                	js     1e85 <sysEnter_Vector-0x12e17b>
    1e58:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1e5a:	75 2f                	jne    1e8b <sysEnter_Vector-0x12e175>
    1e5c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1e61:	2f                   	das    
    1e62:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1e69:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1e6c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1e70:	65 00 00             	add    BYTE PTR gs:[eax],al
    1e73:	73 74                	jae    1ee9 <sysEnter_Vector-0x12e117>
    1e75:	72 72                	jb     1ee9 <sysEnter_Vector-0x12e117>
    1e77:	65                   	gs
    1e78:	70 6c                	jo     1ee6 <sysEnter_Vector-0x12e11a>
    1e7a:	61                   	popa   
    1e7b:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1e7e:	63 00                	arpl   WORD PTR [eax],ax
    1e80:	01 00                	add    DWORD PTR [eax],eax
    1e82:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1e85:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1e8c:	63 
    1e8d:	2e                   	cs
    1e8e:	68 00 02 00 00       	push   0x200
    1e93:	73 74                	jae    1f09 <sysEnter_Vector-0x12e0f7>
    1e95:	64                   	fs
    1e96:	64                   	fs
    1e97:	65                   	gs
    1e98:	66                   	data16
    1e99:	2e                   	cs
    1e9a:	68 00 02 00 00       	push   0x200
    1e9f:	6d                   	ins    DWORD PTR es:[edi],dx
    1ea0:	61                   	popa   
    1ea1:	6c                   	ins    BYTE PTR es:[edi],dx
    1ea2:	6c                   	ins    BYTE PTR es:[edi],dx
    1ea3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1ea4:	63 2e                	arpl   WORD PTR [esi],bp
    1ea6:	68 00 03 00 00       	push   0x300
    1eab:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1eb2:	03 00                	add    eax,DWORD PTR [eax]
    1eb4:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1eb8:	43                   	inc    ebx
    1eb9:	68 72 69 73 4f       	push   0x4f736972
    1ebe:	53                   	push   ebx
    1ebf:	2e                   	cs
    1ec0:	68 00 03 00 00       	push   0x300
    1ec5:	00 00                	add    BYTE PTR [eax],al
    1ec7:	05 02 e0 38 00       	add    eax,0x38e002
    1ecc:	9f                   	lahf   
    1ecd:	03 0d 01 08 2f 08    	add    ecx,DWORD PTR ds:0x82f0801
    1ed3:	3f                   	aas    
    1ed4:	76 5a                	jbe    1f30 <sysEnter_Vector-0x12e0d0>
    1ed6:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1ed9:	cb                   	retf   
    1eda:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1edd:	2a 15 02 28 13 03    	sub    dl,BYTE PTR ds:0x3132802
    1ee3:	73 08                	jae    1eed <sysEnter_Vector-0x12e113>
    1ee5:	12 03                	adc    al,BYTE PTR [ebx]
    1ee7:	11 08                	adc    DWORD PTR [eax],ecx
    1ee9:	c8 08 68 3d          	enter  0x6808,0x3d
    1eed:	77 f3                	ja     1ee2 <sysEnter_Vector-0x12e11e>
    1eef:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1ef5:	01 f3                	add    ebx,esi
    1ef7:	00 00                	add    BYTE PTR [eax],al
    1ef9:	00 02                	add    BYTE PTR [edx],al
    1efb:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    1f01:	01 fb                	add    ebx,edi
    1f03:	0e                   	push   cs
    1f04:	0d 00 01 01 01       	or     eax,0x1010100
    1f09:	01 00                	add    DWORD PTR [eax],eax
    1f0b:	00 00                	add    BYTE PTR [eax],al
    1f0d:	01 00                	add    DWORD PTR [eax],eax
    1f0f:	00 01                	add    BYTE PTR [ecx],al
    1f11:	73 72                	jae    1f85 <sysEnter_Vector-0x12e07b>
    1f13:	63 00                	arpl   WORD PTR [eax],ax
    1f15:	2f                   	das    
    1f16:	68 6f 6d 65 2f       	push   0x2f656d6f
    1f1b:	79 6f                	jns    1f8c <sysEnter_Vector-0x12e074>
    1f1d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1f24:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1f27:	73 73                	jae    1f9c <sysEnter_Vector-0x12e064>
    1f29:	2f                   	das    
    1f2a:	6c                   	ins    BYTE PTR es:[edi],dx
    1f2b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1f32:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1f38:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1f3e:	78 2d                	js     1f6d <sysEnter_Vector-0x12e093>
    1f40:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1f42:	75 2f                	jne    1f73 <sysEnter_Vector-0x12e08d>
    1f44:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1f49:	2f                   	das    
    1f4a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1f51:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1f54:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1f58:	65 00 00             	add    BYTE PTR gs:[eax],al
    1f5b:	73 74                	jae    1fd1 <sysEnter_Vector-0x12e02f>
    1f5d:	72 73                	jb     1fd2 <sysEnter_Vector-0x12e02e>
    1f5f:	74 72                	je     1fd3 <sysEnter_Vector-0x12e02d>
    1f61:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1f64:	01 00                	add    DWORD PTR [eax],eax
    1f66:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1f69:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1f70:	63 
    1f71:	2e                   	cs
    1f72:	68 00 02 00 00       	push   0x200
    1f77:	6d                   	ins    DWORD PTR es:[edi],dx
    1f78:	61                   	popa   
    1f79:	6c                   	ins    BYTE PTR es:[edi],dx
    1f7a:	6c                   	ins    BYTE PTR es:[edi],dx
    1f7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f7c:	63 2e                	arpl   WORD PTR [esi],bp
    1f7e:	68 00 03 00 00       	push   0x300
    1f83:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1f8a:	03 00                	add    eax,DWORD PTR [eax]
    1f8c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1f90:	43                   	inc    ebx
    1f91:	68 72 69 73 4f       	push   0x4f736972
    1f96:	53                   	push   ebx
    1f97:	2e                   	cs
    1f98:	68 00 03 00 00       	push   0x300
    1f9d:	00 00                	add    BYTE PTR [eax],al
    1f9f:	05 02 24 3a 00       	add    eax,0x3a2402
    1fa4:	9f                   	lahf   
    1fa5:	03 33                	add    esi,DWORD PTR [ebx]
    1fa7:	01 08                	add    DWORD PTR [eax],ecx
    1fa9:	27                   	daa    
    1faa:	68 3d 75 5b c9       	push   0xc95b753d
    1faf:	c9                   	leave  
    1fb0:	5b                   	pop    ebx
    1fb1:	3e                   	ds
    1fb2:	75 5a                	jne    200e <sysEnter_Vector-0x12dff2>
    1fb4:	c9                   	leave  
    1fb5:	59                   	pop    ecx
    1fb6:	08 3f                	or     BYTE PTR [edi],bh
    1fb8:	2c 23                	sub    al,0x23
    1fba:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1fbd:	1c 00                	sbb    al,0x0
    1fbf:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1fc2:	06                   	push   es
    1fc3:	4a                   	dec    edx
    1fc4:	06                   	push   es
    1fc5:	03 13                	add    edx,DWORD PTR [ebx]
    1fc7:	9e                   	sahf   
    1fc8:	59                   	pop    ecx
    1fc9:	77 ec                	ja     1fb7 <sysEnter_Vector-0x12e049>
    1fcb:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1fd0:	75 5a                	jne    202c <sysEnter_Vector-0x12dfd4>
    1fd2:	08 3f                	or     BYTE PTR [edi],bh
    1fd4:	2c 23                	sub    al,0x23
    1fd6:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1fd9:	1e                   	push   ds
    1fda:	00 02                	add    BYTE PTR [edx],al
    1fdc:	04 01                	add    al,0x1
    1fde:	06                   	push   es
    1fdf:	4a                   	dec    edx
    1fe0:	06                   	push   es
    1fe1:	03 0f                	add    ecx,DWORD PTR [edi]
    1fe3:	9e                   	sahf   
    1fe4:	59                   	pop    ecx
    1fe5:	4d                   	dec    ebp
    1fe6:	c9                   	leave  
    1fe7:	d7                   	xlat   BYTE PTR ds:[ebx]
    1fe8:	02 02                	add    al,BYTE PTR [edx]
    1fea:	00 01                	add    BYTE PTR [ecx],al
    1fec:	01 4c 03 00          	add    DWORD PTR [ebx+eax*1+0x0],ecx
    1ff0:	00 02                	add    BYTE PTR [edx],al
    1ff2:	00 d6                	add    dh,dl
    1ff4:	00 00                	add    BYTE PTR [eax],al
    1ff6:	00 01                	add    BYTE PTR [ecx],al
    1ff8:	01 fb                	add    ebx,edi
    1ffa:	0e                   	push   cs
    1ffb:	0d 00 01 01 01       	or     eax,0x1010100
    2000:	01 00                	add    DWORD PTR [eax],eax
    2002:	00 00                	add    BYTE PTR [eax],al
    2004:	01 00                	add    DWORD PTR [eax],eax
    2006:	00 01                	add    BYTE PTR [ecx],al
    2008:	73 72                	jae    207c <sysEnter_Vector-0x12df84>
    200a:	63 00                	arpl   WORD PTR [eax],ax
    200c:	2f                   	das    
    200d:	68 6f 6d 65 2f       	push   0x2f656d6f
    2012:	79 6f                	jns    2083 <sysEnter_Vector-0x12df7d>
    2014:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    201b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    201e:	73 73                	jae    2093 <sysEnter_Vector-0x12df6d>
    2020:	2f                   	das    
    2021:	6c                   	ins    BYTE PTR es:[edi],dx
    2022:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2029:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    202f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    2035:	78 2d                	js     2064 <sysEnter_Vector-0x12df9c>
    2037:	67 6e                	outs   dx,BYTE PTR ds:[si]
    2039:	75 2f                	jne    206a <sysEnter_Vector-0x12df96>
    203b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    2040:	2f                   	das    
    2041:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2048:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    204b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    204f:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    2052:	2e                   	cs
    2053:	2f                   	das    
    2054:	2e                   	cs
    2055:	2e                   	cs
    2056:	2f                   	das    
    2057:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    205b:	6a 2f                	push   0x2f
    205d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    2060:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    2067:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2068:	65                   	gs
    2069:	6c                   	ins    BYTE PTR es:[edi],dx
    206a:	2f                   	das    
    206b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2072:	00 00                	add    BYTE PTR [eax],al
    2074:	74 69                	je     20df <sysEnter_Vector-0x12df21>
    2076:	6d                   	ins    DWORD PTR es:[edi],dx
    2077:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    207b:	01 00                	add    DWORD PTR [eax],eax
    207d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    2080:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    2087:	63 
    2088:	2e                   	cs
    2089:	68 00 02 00 00       	push   0x200
    208e:	74 69                	je     20f9 <sysEnter_Vector-0x12df07>
    2090:	6d                   	ins    DWORD PTR es:[edi],dx
    2091:	65                   	gs
    2092:	2e                   	cs
    2093:	68 00 03 00 00       	push   0x300
    2098:	6d                   	ins    DWORD PTR es:[edi],dx
    2099:	61                   	popa   
    209a:	6c                   	ins    BYTE PTR es:[edi],dx
    209b:	6c                   	ins    BYTE PTR es:[edi],dx
    209c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    209d:	63 2e                	arpl   WORD PTR [esi],bp
    209f:	68 00 03 00 00       	push   0x300
    20a4:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    20ab:	03 00                	add    eax,DWORD PTR [eax]
    20ad:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    20b1:	43                   	inc    ebx
    20b2:	68 72 69 73 4f       	push   0x4f736972
    20b7:	53                   	push   ebx
    20b8:	2e                   	cs
    20b9:	68 00 03 00 00       	push   0x300
    20be:	73 79                	jae    2139 <sysEnter_Vector-0x12dec7>
    20c0:	73 63                	jae    2125 <sysEnter_Vector-0x12dedb>
    20c2:	61                   	popa   
    20c3:	6c                   	ins    BYTE PTR es:[edi],dx
    20c4:	6c                   	ins    BYTE PTR es:[edi],dx
    20c5:	73 2e                	jae    20f5 <sysEnter_Vector-0x12df0b>
    20c7:	68 00 04 00 00       	push   0x400
    20cc:	00 00                	add    BYTE PTR [eax],al
    20ce:	05 02 50 3b 00       	add    eax,0x3b5002
    20d3:	9f                   	lahf   
    20d4:	03 17                	add    edx,DWORD PTR [edi]
    20d6:	01 08                	add    DWORD PTR [eax],ecx
    20d8:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    20db:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    20e1:	76 02                	jbe    20e5 <sysEnter_Vector-0x12df1b>
    20e3:	24 13                	and    al,0x13
    20e5:	08 22                	or     BYTE PTR [edx],ah
    20e7:	02 2e                	add    ch,BYTE PTR [esi]
    20e9:	13 02                	adc    eax,DWORD PTR [edx]
    20eb:	2f                   	das    
    20ec:	13 08                	adc    ecx,DWORD PTR [eax]
    20ee:	67 02 2d             	add    ch,BYTE PTR [di]
    20f1:	13 2f                	adc    ebp,DWORD PTR [edi]
    20f3:	00 02                	add    BYTE PTR [edx],al
    20f5:	04 01                	add    al,0x1
    20f7:	06                   	push   es
    20f8:	9e                   	sahf   
    20f9:	00 02                	add    BYTE PTR [edx],al
    20fb:	04 04                	add    al,0x4
    20fd:	02 23                	add    ah,BYTE PTR [ebx]
    20ff:	12 00                	adc    al,BYTE PTR [eax]
    2101:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2108:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    210b:	74 00                	je     210d <sysEnter_Vector-0x12def3>
    210d:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2110:	58                   	pop    eax
    2111:	00 02                	add    BYTE PTR [edx],al
    2113:	04 08                	add    al,0x8
    2115:	06                   	push   es
    2116:	3d 48 00 02 04       	cmp    eax,0x4020048
    211b:	01 06                	add    DWORD PTR [esi],eax
    211d:	9e                   	sahf   
    211e:	00 02                	add    BYTE PTR [edx],al
    2120:	04 04                	add    al,0x4
    2122:	02 23                	add    ah,BYTE PTR [ebx]
    2124:	12 00                	adc    al,BYTE PTR [eax]
    2126:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    212d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2130:	74 00                	je     2132 <sysEnter_Vector-0x12dece>
    2132:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2135:	58                   	pop    eax
    2136:	06                   	push   es
    2137:	94                   	xchg   esp,eax
    2138:	e5 91                	in     eax,0x91
    213a:	9f                   	lahf   
    213b:	59                   	pop    ecx
    213c:	00 02                	add    BYTE PTR [edx],al
    213e:	04 01                	add    al,0x1
    2140:	06                   	push   es
    2141:	9e                   	sahf   
    2142:	00 02                	add    BYTE PTR [edx],al
    2144:	04 04                	add    al,0x4
    2146:	02 23                	add    ah,BYTE PTR [ebx]
    2148:	12 00                	adc    al,BYTE PTR [eax]
    214a:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2151:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2154:	74 00                	je     2156 <sysEnter_Vector-0x12deaa>
    2156:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2159:	58                   	pop    eax
    215a:	00 02                	add    BYTE PTR [edx],al
    215c:	04 08                	add    al,0x8
    215e:	06                   	push   es
    215f:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    2165:	01 06                	add    DWORD PTR [esi],eax
    2167:	9e                   	sahf   
    2168:	00 02                	add    BYTE PTR [edx],al
    216a:	04 04                	add    al,0x4
    216c:	02 23                	add    ah,BYTE PTR [ebx]
    216e:	12 00                	adc    al,BYTE PTR [eax]
    2170:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2177:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    217a:	74 00                	je     217c <sysEnter_Vector-0x12de84>
    217c:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    217f:	58                   	pop    eax
    2180:	06                   	push   es
    2181:	08 f6                	or     dh,dh
    2183:	d7                   	xlat   BYTE PTR ds:[ebx]
    2184:	9f                   	lahf   
    2185:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    218a:	f5                   	cmc    
    218b:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
    218e:	2f                   	das    
    218f:	31 f5                	xor    ebp,esi
    2191:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    2197:	30 08                	xor    BYTE PTR [eax],cl
    2199:	44                   	inc    esp
    219a:	02 2e                	add    ch,BYTE PTR [esi]
    219c:	13 02                	adc    eax,DWORD PTR [edx]
    219e:	3a 13                	cmp    dl,BYTE PTR [ebx]
    21a0:	91                   	xchg   ecx,eax
    21a1:	c9                   	leave  
    21a2:	e6 02                	out    0x2,al
    21a4:	2f                   	das    
    21a5:	13 02                	adc    eax,DWORD PTR [edx]
    21a7:	3c 13                	cmp    al,0x13
    21a9:	9f                   	lahf   
    21aa:	e5 e6                	in     eax,0xe6
    21ac:	08 c9                	or     cl,cl
    21ae:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    21b1:	9f                   	lahf   
    21b2:	e5 4c                	in     eax,0x4c
    21b4:	02 29                	add    ch,BYTE PTR [ecx]
    21b6:	13 02                	adc    eax,DWORD PTR [edx]
    21b8:	2b 13                	sub    edx,DWORD PTR [ebx]
    21ba:	9f                   	lahf   
    21bb:	e5 e6                	in     eax,0xe6
    21bd:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    21c2:	a0 00 02 04 01       	mov    al,ds:0x1040200
    21c7:	06                   	push   es
    21c8:	c8 00 02 04          	enter  0x200,0x4
    21cc:	04 02                	add    al,0x2
    21ce:	2c 12                	sub    al,0x12
    21d0:	00 02                	add    BYTE PTR [edx],al
    21d2:	04 05                	add    al,0x5
    21d4:	02 2f                	add    ch,BYTE PTR [edi]
    21d6:	12 00                	adc    al,BYTE PTR [eax]
    21d8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21db:	74 00                	je     21dd <sysEnter_Vector-0x12de23>
    21dd:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    21e0:	58                   	pop    eax
    21e1:	06                   	push   es
    21e2:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    21e8:	04 01                	add    al,0x1
    21ea:	06                   	push   es
    21eb:	c8 00 02 04          	enter  0x200,0x4
    21ef:	04 02                	add    al,0x2
    21f1:	2c 12                	sub    al,0x12
    21f3:	00 02                	add    BYTE PTR [edx],al
    21f5:	04 05                	add    al,0x5
    21f7:	02 2f                	add    ch,BYTE PTR [edi]
    21f9:	12 00                	adc    al,BYTE PTR [eax]
    21fb:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21fe:	74 00                	je     2200 <sysEnter_Vector-0x12de00>
    2200:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2203:	58                   	pop    eax
    2204:	00 02                	add    BYTE PTR [edx],al
    2206:	04 08                	add    al,0x8
    2208:	06                   	push   es
    2209:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    220f:	00 02                	add    BYTE PTR [edx],al
    2211:	04 01                	add    al,0x1
    2213:	06                   	push   es
    2214:	c8 00 02 04          	enter  0x200,0x4
    2218:	04 02                	add    al,0x2
    221a:	2c 12                	sub    al,0x12
    221c:	00 02                	add    BYTE PTR [edx],al
    221e:	04 05                	add    al,0x5
    2220:	02 2f                	add    ch,BYTE PTR [edi]
    2222:	12 00                	adc    al,BYTE PTR [eax]
    2224:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2227:	74 00                	je     2229 <sysEnter_Vector-0x12ddd7>
    2229:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    222c:	58                   	pop    eax
    222d:	06                   	push   es
    222e:	08 f9                	or     cl,bh
    2230:	bb 75 00 02 04       	mov    ebx,0x4020075
    2235:	01 06                	add    DWORD PTR [esi],eax
    2237:	08 2e                	or     BYTE PTR [esi],ch
    2239:	06                   	push   es
    223a:	9f                   	lahf   
    223b:	75 75                	jne    22b2 <sysEnter_Vector-0x12dd4e>
    223d:	7b d8                	jnp    2217 <sysEnter_Vector-0x12dde9>
    223f:	00 02                	add    BYTE PTR [edx],al
    2241:	04 01                	add    al,0x1
    2243:	06                   	push   es
    2244:	c8 06 75 e5          	enter  0x7506,0xe5
    2248:	00 02                	add    BYTE PTR [edx],al
    224a:	04 01                	add    al,0x1
    224c:	06                   	push   es
    224d:	02 22                	add    ah,BYTE PTR [edx]
    224f:	12 06                	adc    al,BYTE PTR [esi]
    2251:	4b                   	dec    ebx
    2252:	00 02                	add    BYTE PTR [edx],al
    2254:	04 01                	add    al,0x1
    2256:	06                   	push   es
    2257:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    225d:	02 22                	add    ah,BYTE PTR [edx]
    225f:	12 00                	adc    al,BYTE PTR [eax]
    2261:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    2264:	74 00                	je     2266 <sysEnter_Vector-0x12dd9a>
    2266:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2269:	58                   	pop    eax
    226a:	00 02                	add    BYTE PTR [edx],al
    226c:	04 06                	add    al,0x6
    226e:	06                   	push   es
    226f:	59                   	pop    ecx
    2270:	00 02                	add    BYTE PTR [edx],al
    2272:	04 01                	add    al,0x1
    2274:	06                   	push   es
    2275:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    2278:	00 02                	add    BYTE PTR [edx],al
    227a:	04 03                	add    al,0x3
    227c:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    227f:	00 02                	add    BYTE PTR [edx],al
    2281:	04 04                	add    al,0x4
    2283:	74 00                	je     2285 <sysEnter_Vector-0x12dd7b>
    2285:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2288:	58                   	pop    eax
    2289:	00 02                	add    BYTE PTR [edx],al
    228b:	04 06                	add    al,0x6
    228d:	06                   	push   es
    228e:	59                   	pop    ecx
    228f:	00 02                	add    BYTE PTR [edx],al
    2291:	04 01                	add    al,0x1
    2293:	06                   	push   es
    2294:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    2297:	00 02                	add    BYTE PTR [edx],al
    2299:	04 03                	add    al,0x3
    229b:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    229e:	00 02                	add    BYTE PTR [edx],al
    22a0:	04 04                	add    al,0x4
    22a2:	74 00                	je     22a4 <sysEnter_Vector-0x12dd5c>
    22a4:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22a7:	58                   	pop    eax
    22a8:	00 02                	add    BYTE PTR [edx],al
    22aa:	04 06                	add    al,0x6
    22ac:	06                   	push   es
    22ad:	5a                   	pop    edx
    22ae:	00 02                	add    BYTE PTR [edx],al
    22b0:	04 06                	add    al,0x6
    22b2:	c9                   	leave  
    22b3:	2f                   	das    
    22b4:	00 02                	add    BYTE PTR [edx],al
    22b6:	04 01                	add    al,0x1
    22b8:	06                   	push   es
    22b9:	9e                   	sahf   
    22ba:	00 02                	add    BYTE PTR [edx],al
    22bc:	04 04                	add    al,0x4
    22be:	02 23                	add    ah,BYTE PTR [ebx]
    22c0:	12 00                	adc    al,BYTE PTR [eax]
    22c2:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    22c9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22cc:	74 00                	je     22ce <sysEnter_Vector-0x12dd32>
    22ce:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    22d1:	58                   	pop    eax
    22d2:	00 02                	add    BYTE PTR [edx],al
    22d4:	04 08                	add    al,0x8
    22d6:	06                   	push   es
    22d7:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    22da:	e8 bb 00 02 04       	call   402239a <sysEnter_Vector+0x3ef239a>
    22df:	01 06                	add    DWORD PTR [esi],eax
    22e1:	ba 06 4b 68 91       	mov    edx,0x91684b06
    22e6:	02 31                	add    dh,BYTE PTR [ecx]
    22e8:	14 02                	adc    al,0x2
    22ea:	2c 14                	sub    al,0x14
    22ec:	00 02                	add    BYTE PTR [edx],al
    22ee:	04 01                	add    al,0x1
    22f0:	06                   	push   es
    22f1:	02 29                	add    ch,BYTE PTR [ecx]
    22f3:	12 06                	adc    al,BYTE PTR [esi]
    22f5:	4b                   	dec    ebx
    22f6:	bd 00 02 04 01       	mov    ebp,0x1040200
    22fb:	06                   	push   es
    22fc:	ba 00 02 04 03       	mov    edx,0x3040200
    2301:	06                   	push   es
    2302:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    2305:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    2308:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    230f:	77 00                	ja     2311 <sysEnter_Vector-0x12dcef>
    2311:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    2314:	06                   	push   es
    2315:	82                   	(bad)  
    2316:	06                   	push   es
    2317:	4b                   	dec    ebx
    2318:	68 00 02 04 01       	push   0x1040200
    231d:	06                   	push   es
    231e:	66 06                	pushw  es
    2320:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    2326:	08 f3                	or     bl,dh
    2328:	67 08 14             	or     BYTE PTR [si],dl
    232b:	00 02                	add    BYTE PTR [edx],al
    232d:	04 01                	add    al,0x1
    232f:	e5 77                	in     eax,0x77
    2331:	08 21                	or     BYTE PTR [ecx],ah
    2333:	08 2f                	or     BYTE PTR [edi],ch
    2335:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    233b:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	75 69                	jne    79 <sysEnter_Vector-0x12ff87>
  10:	6e                   	outs   dx,BYTE PTR ds:[esi]
  11:	74 33                	je     46 <sysEnter_Vector-0x12ffba>
  13:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  16:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
  19:	72 63                	jb     7e <sysEnter_Vector-0x12ff82>
  1b:	68 72 00 2f 68       	push   0x682f0072
  20:	6f                   	outs   dx,DWORD PTR ds:[esi]
  21:	6d                   	ins    DWORD PTR es:[edi],dx
  22:	65                   	gs
  23:	2f                   	das    
  24:	79 6f                	jns    95 <sysEnter_Vector-0x12ff6b>
  26:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2e:	73 2f                	jae    5f <sysEnter_Vector-0x12ffa1>
  30:	61                   	popa   
  31:	70 72                	jo     a5 <sysEnter_Vector-0x12ff5b>
  33:	6f                   	outs   dx,DWORD PTR ds:[esi]
  34:	6a 2f                	push   0x2f
  36:	6c                   	ins    BYTE PTR es:[edi],dx
  37:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  3e:	4f                   	dec    edi
  3f:	53                   	push   ebx
  40:	00 70 72             	add    BYTE PTR [eax+0x72],dh
  43:	6f                   	outs   dx,DWORD PTR ds:[esi]
  44:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  47:	73 45                	jae    8e <sysEnter_Vector-0x12ff72>
  49:	6e                   	outs   dx,BYTE PTR ds:[esi]
  4a:	76 70                	jbe    bc <sysEnter_Vector-0x12ff44>
  4c:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
  4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
  50:	74 70                	je     c2 <sysEnter_Vector-0x12ff3e>
  52:	74 72                	je     c6 <sysEnter_Vector-0x12ff3a>
  54:	5f                   	pop    edi
  55:	74 00                	je     57 <sysEnter_Vector-0x12ffa9>
  57:	6c                   	ins    BYTE PTR es:[edi],dx
  58:	6f                   	outs   dx,DWORD PTR ds:[esi]
  59:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5a:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5f:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  63:	73 69                	jae    ce <sysEnter_Vector-0x12ff32>
  65:	67 6e                	outs   dx,BYTE PTR ds:[si]
  67:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  6c:	74 00                	je     6e <sysEnter_Vector-0x12ff92>
  6e:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  75:	43                   	inc    ebx
  76:	6c                   	ins    BYTE PTR es:[edi],dx
  77:	6f                   	outs   dx,DWORD PTR ds:[esi]
  78:	73 65                	jae    df <sysEnter_Vector-0x12ff21>
  7a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
  7d:	61                   	popa   
  7e:	70 45                	jo     c5 <sysEnter_Vector-0x12ff3b>
  80:	6e                   	outs   dx,BYTE PTR ds:[esi]
  81:	64 00 75 6e          	add    BYTE PTR fs:[ebp+0x6e],dh
  85:	73 69                	jae    f0 <sysEnter_Vector-0x12ff10>
  87:	67 6e                	outs   dx,BYTE PTR ds:[si]
  89:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  8e:	61                   	popa   
  8f:	72 00                	jb     91 <sysEnter_Vector-0x12ff6f>
  91:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  98:	43                   	inc    ebx
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9b:	73 65                	jae    102 <sysEnter_Vector-0x12fefe>
  9d:	43                   	inc    ebx
  9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9f:	75 6e                	jne    10f <sysEnter_Vector-0x12fef1>
  a1:	74 00                	je     a3 <sysEnter_Vector-0x12ff5d>
  a3:	68 65 61 70 42       	push   0x42706165
  a8:	61                   	popa   
  a9:	73 65                	jae    110 <sysEnter_Vector-0x12fef0>
  ab:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
  ae:	55                   	push   ebp
  af:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  b2:	31 20                	xor    DWORD PTR [eax],esp
  b4:	35 2e 33 2e 30       	xor    eax,0x302e332e
  b9:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
  bf:	3d 69 6e 74 65       	cmp    eax,0x65746e69
  c4:	6c                   	ins    BYTE PTR es:[edi],dx
  c5:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
  cb:	65                   	gs
  cc:	3d 67 65 6e 65       	cmp    eax,0x656e6567
  d1:	72 69                	jb     13c <sysEnter_Vector-0x12fec4>
  d3:	63 20                	arpl   WORD PTR [eax],sp
  d5:	2d 6d 61 72 63       	sub    eax,0x6372616d
  da:	68 3d 70 65 6e       	push   0x6e65703d
  df:	74 69                	je     14a <sysEnter_Vector-0x12feb6>
  e1:	75 6d                	jne    150 <sysEnter_Vector-0x12feb0>
  e3:	70 72                	jo     157 <sysEnter_Vector-0x12fea9>
  e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
  e6:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
  ec:	66                   	data16
  ed:	72 65                	jb     154 <sysEnter_Vector-0x12feac>
  ef:	65                   	gs
  f0:	73 74                	jae    166 <sysEnter_Vector-0x12fe9a>
  f2:	61                   	popa   
  f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
  f4:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
  fb:	76 
  fc:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 103:	74 79                	je     17e <sysEnter_Vector-0x12fe82>
 105:	3d 68 69 64 64       	cmp    eax,0x64646968
 10a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 10c:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 112:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
 115:	6f                   	outs   dx,DWORD PTR ds:[esi]
 116:	6f                   	outs   dx,DWORD PTR ds:[esi]
 117:	6c                   	ins    BYTE PTR es:[edi],dx
 118:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
 11b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 11c:	72 74                	jb     192 <sysEnter_Vector-0x12fe6e>
 11e:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
 121:	73 69                	jae    18c <sysEnter_Vector-0x12fe74>
 123:	67 6e                	outs   dx,BYTE PTR ds:[si]
 125:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
 12a:	74 00                	je     12c <sysEnter_Vector-0x12fed4>
 12c:	73 74                	jae    1a2 <sysEnter_Vector-0x12fe5e>
 12e:	72 63                	jb     193 <sysEnter_Vector-0x12fe6d>
 130:	68 72 49 00 68       	push   0x68004972
 135:	65                   	gs
 136:	61                   	popa   
 137:	70 43                	jo     17c <sysEnter_Vector-0x12fe84>
 139:	75 72                	jne    1ad <sysEnter_Vector-0x12fe53>
 13b:	72 00                	jb     13d <sysEnter_Vector-0x12fec3>
 13d:	2e                   	cs
 13e:	2e                   	cs
 13f:	2f                   	das    
 140:	2e                   	cs
 141:	2e                   	cs
 142:	2f                   	das    
 143:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 147:	6a 2f                	push   0x2f
 149:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 14c:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 153:	63 2f                	arpl   WORD PTR [edi],bp
 155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
 157:	72 69                	jb     1c2 <sysEnter_Vector-0x12fe3e>
 159:	6e                   	outs   dx,BYTE PTR ds:[esi]
 15a:	67 73 2f             	addr16 jae 18c <sysEnter_Vector-0x12fe74>
 15d:	73 74                	jae    1d3 <sysEnter_Vector-0x12fe2d>
 15f:	72 63                	jb     1c4 <sysEnter_Vector-0x12fe3c>
 161:	68 72 2e 63 00       	push   0x632e72
 166:	6c                   	ins    BYTE PTR es:[edi],dx
 167:	6f                   	outs   dx,DWORD PTR ds:[esi]
 168:	6e                   	outs   dx,BYTE PTR ds:[esi]
 169:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
 16d:	75 62                	jne    1d1 <sysEnter_Vector-0x12fe2f>
 16f:	6c                   	ins    BYTE PTR es:[edi],dx
 170:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
 174:	6f                   	outs   dx,DWORD PTR ds:[esi]
 175:	72 74                	jb     1eb <sysEnter_Vector-0x12fe15>
 177:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
 17a:	74 00                	je     17c <sysEnter_Vector-0x12fe84>
 17c:	6c                   	ins    BYTE PTR es:[edi],dx
 17d:	69 62 63 54 5a 00 73 	imul   esp,DWORD PTR [edx+0x63],0x73005a54
 184:	69 7a 65 74 79 70 65 	imul   edi,DWORD PTR [edx+0x65],0x65707974
 18b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 18e:	72 63                	jb     1f3 <sysEnter_Vector-0x12fe0d>
 190:	73 70                	jae    202 <sysEnter_Vector-0x12fdfe>
 192:	6e                   	outs   dx,BYTE PTR ds:[esi]
 193:	49                   	dec    ecx
 194:	00 2e                	add    BYTE PTR [esi],ch
 196:	2e                   	cs
 197:	2f                   	das    
 198:	2e                   	cs
 199:	2e                   	cs
 19a:	2f                   	das    
 19b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 19f:	6a 2f                	push   0x2f
 1a1:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1a4:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1ab:	63 2f                	arpl   WORD PTR [edi],bp
 1ad:	73 74                	jae    223 <sysEnter_Vector-0x12fddd>
 1af:	72 69                	jb     21a <sysEnter_Vector-0x12fde6>
 1b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1b2:	67 73 2f             	addr16 jae 1e4 <sysEnter_Vector-0x12fe1c>
 1b5:	73 74                	jae    22b <sysEnter_Vector-0x12fdd5>
 1b7:	72 63                	jb     21c <sysEnter_Vector-0x12fde4>
 1b9:	73 70                	jae    22b <sysEnter_Vector-0x12fdd5>
 1bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1bc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 1bf:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 1c2:	72 73                	jb     237 <sysEnter_Vector-0x12fdc9>
 1c4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1c7:	72 63                	jb     22c <sysEnter_Vector-0x12fdd4>
 1c9:	73 70                	jae    23b <sysEnter_Vector-0x12fdc5>
 1cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1cc:	00 2e                	add    BYTE PTR [esi],ch
 1ce:	2e                   	cs
 1cf:	2f                   	das    
 1d0:	2e                   	cs
 1d1:	2e                   	cs
 1d2:	2f                   	das    
 1d3:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1d7:	6a 2f                	push   0x2f
 1d9:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1dc:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1e3:	63 2f                	arpl   WORD PTR [edi],bp
 1e5:	73 74                	jae    25b <sysEnter_Vector-0x12fda5>
 1e7:	72 69                	jb     252 <sysEnter_Vector-0x12fdae>
 1e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1ea:	67 73 2f             	addr16 jae 21c <sysEnter_Vector-0x12fde4>
 1ed:	73 74                	jae    263 <sysEnter_Vector-0x12fd9d>
 1ef:	72 74                	jb     265 <sysEnter_Vector-0x12fd9b>
 1f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f2:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1f5:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1f9:	74 73                	je     26e <sysEnter_Vector-0x12fd92>
 1fb:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1ff:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 206:	6f                   	outs   dx,DWORD PTR ds:[esi]
 207:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 20a:	74 72                	je     27e <sysEnter_Vector-0x12fd82>
 20c:	74 6f                	je     27d <sysEnter_Vector-0x12fd83>
 20e:	6b 49 00 73          	imul   ecx,DWORD PTR [ecx+0x0],0x73
 212:	72 63                	jb     277 <sysEnter_Vector-0x12fd89>
 214:	2f                   	das    
 215:	61                   	popa   
 216:	73 63                	jae    27b <sysEnter_Vector-0x12fd85>
 218:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 21f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 220:	61                   	popa   
 221:	49                   	dec    ecx
 222:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
 225:	6f                   	outs   dx,DWORD PTR ds:[esi]
 226:	61                   	popa   
 227:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 22a:	76 65                	jbe    291 <sysEnter_Vector-0x12fd6f>
 22c:	72 73                	jb     2a1 <sysEnter_Vector-0x12fd5f>
 22e:	65                   	gs
 22f:	49                   	dec    ecx
 230:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 233:	67 6e                	outs   dx,BYTE PTR ds:[si]
 235:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 238:	63 2f                	arpl   WORD PTR [edi],bp
 23a:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 23d:	73 6f                	jae    2ae <sysEnter_Vector-0x12fd52>
 23f:	6c                   	ins    BYTE PTR es:[edi],dx
 240:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 244:	6d                   	ins    DWORD PTR es:[edi],dx
 245:	6f                   	outs   dx,DWORD PTR ds:[esi]
 246:	76 65                	jbe    2ad <sysEnter_Vector-0x12fd53>
 248:	54                   	push   esp
 249:	6f                   	outs   dx,DWORD PTR ds:[esi]
 24a:	58                   	pop    eax
 24b:	59                   	pop    ecx
 24c:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
 24f:	76 65                	jbe    2b6 <sysEnter_Vector-0x12fd4a>
 251:	43                   	inc    ebx
 252:	75 72                	jne    2c6 <sysEnter_Vector-0x12fd3a>
 254:	73 6f                	jae    2c5 <sysEnter_Vector-0x12fd3b>
 256:	72 50                	jb     2a8 <sysEnter_Vector-0x12fd58>
 258:	6f                   	outs   dx,DWORD PTR ds:[esi]
 259:	73 69                	jae    2c4 <sysEnter_Vector-0x12fd3c>
 25b:	74 69                	je     2c6 <sysEnter_Vector-0x12fd3a>
 25d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 25e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 25f:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 262:	73 74                	jae    2d8 <sysEnter_Vector-0x12fd28>
 264:	6f                   	outs   dx,DWORD PTR ds:[esi]
 265:	72 65                	jb     2cc <sysEnter_Vector-0x12fd34>
 267:	43                   	inc    ebx
 268:	75 72                	jne    2dc <sysEnter_Vector-0x12fd24>
 26a:	73 6f                	jae    2db <sysEnter_Vector-0x12fd25>
 26c:	72 50                	jb     2be <sysEnter_Vector-0x12fd42>
 26e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 26f:	73 69                	jae    2da <sysEnter_Vector-0x12fd26>
 271:	74 69                	je     2dc <sysEnter_Vector-0x12fd24>
 273:	6f                   	outs   dx,DWORD PTR ds:[esi]
 274:	6e                   	outs   dx,BYTE PTR ds:[esi]
 275:	00 78 73             	add    BYTE PTR [eax+0x73],bh
 278:	74 72                	je     2ec <sysEnter_Vector-0x12fd14>
 27a:	00 61 6e             	add    BYTE PTR [ecx+0x6e],ah
 27d:	73 69                	jae    2e8 <sysEnter_Vector-0x12fd18>
 27f:	45                   	inc    ebp
 280:	73 63                	jae    2e5 <sysEnter_Vector-0x12fd1b>
 282:	53                   	push   ebx
 283:	65                   	gs
 284:	71 00                	jno    286 <sysEnter_Vector-0x12fd7a>
 286:	79 73                	jns    2fb <sysEnter_Vector-0x12fd05>
 288:	74 72                	je     2fc <sysEnter_Vector-0x12fd04>
 28a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 28d:	53                   	push   ebx
 28e:	43                   	inc    ebx
 28f:	41                   	inc    ecx
 290:	4c                   	dec    esp
 291:	4c                   	dec    esp
 292:	5f                   	pop    edi
 293:	57                   	push   edi
 294:	41                   	inc    ecx
 295:	49                   	dec    ecx
 296:	54                   	push   esp
 297:	46                   	inc    esi
 298:	4f                   	dec    edi
 299:	52                   	push   edx
 29a:	50                   	push   eax
 29b:	49                   	dec    ecx
 29c:	44                   	inc    esp
 29d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2a0:	53                   	push   ebx
 2a1:	43                   	inc    ebx
 2a2:	41                   	inc    ecx
 2a3:	4c                   	dec    esp
 2a4:	4c                   	dec    esp
 2a5:	5f                   	pop    edi
 2a6:	47                   	inc    edi
 2a7:	45                   	inc    ebp
 2a8:	54                   	push   esp
 2a9:	54                   	push   esp
 2aa:	49                   	dec    ecx
 2ab:	43                   	inc    ebx
 2ac:	4b                   	dec    ebx
 2ad:	53                   	push   ebx
 2ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b1:	53                   	push   ebx
 2b2:	43                   	inc    ebx
 2b3:	41                   	inc    ecx
 2b4:	4c                   	dec    esp
 2b5:	4c                   	dec    esp
 2b6:	5f                   	pop    edi
 2b7:	53                   	push   ebx
 2b8:	4c                   	dec    esp
 2b9:	45                   	inc    ebp
 2ba:	45                   	inc    ebp
 2bb:	50                   	push   eax
 2bc:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 2bf:	7a 65                	jp     326 <sysEnter_Vector-0x12fcda>
 2c1:	5f                   	pop    edi
 2c2:	74 00                	je     2c4 <sysEnter_Vector-0x12fd3c>
 2c4:	73 72                	jae    338 <sysEnter_Vector-0x12fcc8>
 2c6:	63 2f                	arpl   WORD PTR [edi],bp
 2c8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2ca:	76 69                	jbe    335 <sysEnter_Vector-0x12fccb>
 2cc:	72 6f                	jb     33d <sysEnter_Vector-0x12fcc3>
 2ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
 2cf:	6d                   	ins    DWORD PTR es:[edi],dx
 2d0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2d2:	74 2e                	je     302 <sysEnter_Vector-0x12fcfe>
 2d4:	63 00                	arpl   WORD PTR [eax],ax
 2d6:	53                   	push   ebx
 2d7:	59                   	pop    ecx
 2d8:	53                   	push   ebx
 2d9:	43                   	inc    ebx
 2da:	41                   	inc    ecx
 2db:	4c                   	dec    esp
 2dc:	4c                   	dec    esp
 2dd:	5f                   	pop    edi
 2de:	4f                   	dec    edi
 2df:	50                   	push   eax
 2e0:	45                   	inc    ebp
 2e1:	4e                   	dec    esi
 2e2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e5:	53                   	push   ebx
 2e6:	43                   	inc    ebx
 2e7:	41                   	inc    ecx
 2e8:	4c                   	dec    esp
 2e9:	4c                   	dec    esp
 2ea:	5f                   	pop    edi
 2eb:	47                   	inc    edi
 2ec:	45                   	inc    ebp
 2ed:	54                   	push   esp
 2ee:	54                   	push   esp
 2ef:	49                   	dec    ecx
 2f0:	4d                   	dec    ebp
 2f1:	45                   	inc    ebp
 2f2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f5:	53                   	push   ebx
 2f6:	43                   	inc    ebx
 2f7:	41                   	inc    ecx
 2f8:	4c                   	dec    esp
 2f9:	4c                   	dec    esp
 2fa:	5f                   	pop    edi
 2fb:	57                   	push   edi
 2fc:	52                   	push   edx
 2fd:	49                   	dec    ecx
 2fe:	54                   	push   esp
 2ff:	45                   	inc    ebp
 300:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
 303:	74 65                	je     36a <sysEnter_Vector-0x12fc96>
 305:	6e                   	outs   dx,BYTE PTR ds:[esi]
 306:	76 00                	jbe    308 <sysEnter_Vector-0x12fcf8>
 308:	53                   	push   ebx
 309:	59                   	pop    ecx
 30a:	53                   	push   ebx
 30b:	43                   	inc    ebx
 30c:	41                   	inc    ecx
 30d:	4c                   	dec    esp
 30e:	4c                   	dec    esp
 30f:	5f                   	pop    edi
 310:	52                   	push   edx
 311:	45                   	inc    ebp
 312:	41                   	inc    ecx
 313:	44                   	inc    esp
 314:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 317:	74 65                	je     37e <sysEnter_Vector-0x12fc82>
 319:	6e                   	outs   dx,BYTE PTR ds:[esi]
 31a:	76 49                	jbe    365 <sysEnter_Vector-0x12fc9b>
 31c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 31f:	53                   	push   ebx
 320:	43                   	inc    ebx
 321:	41                   	inc    ecx
 322:	4c                   	dec    esp
 323:	4c                   	dec    esp
 324:	5f                   	pop    edi
 325:	53                   	push   ebx
 326:	54                   	push   esp
 327:	4f                   	dec    edi
 328:	50                   	push   eax
 329:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 32c:	53                   	push   ebx
 32d:	43                   	inc    ebx
 32e:	41                   	inc    ecx
 32f:	4c                   	dec    esp
 330:	4c                   	dec    esp
 331:	5f                   	pop    edi
 332:	53                   	push   ebx
 333:	45                   	inc    ebp
 334:	54                   	push   esp
 335:	53                   	push   ebx
 336:	49                   	dec    ecx
 337:	47                   	inc    edi
 338:	41                   	inc    ecx
 339:	43                   	inc    ebx
 33a:	54                   	push   esp
 33b:	49                   	dec    ecx
 33c:	4f                   	dec    edi
 33d:	4e                   	dec    esi
 33e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 341:	53                   	push   ebx
 342:	43                   	inc    ebx
 343:	41                   	inc    ecx
 344:	4c                   	dec    esp
 345:	4c                   	dec    esp
 346:	5f                   	pop    edi
 347:	4d                   	dec    ebp
 348:	4d                   	dec    ebp
 349:	41                   	inc    ecx
 34a:	50                   	push   eax
 34b:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 34e:	6c                   	ins    BYTE PTR es:[edi],dx
 34f:	75 65                	jne    3b6 <sysEnter_Vector-0x12fc4a>
 351:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 354:	53                   	push   ebx
 355:	43                   	inc    ebx
 356:	41                   	inc    ecx
 357:	4c                   	dec    esp
 358:	4c                   	dec    esp
 359:	5f                   	pop    edi
 35a:	54                   	push   esp
 35b:	41                   	inc    ecx
 35c:	4b                   	dec    ebx
 35d:	45                   	inc    ebp
 35e:	41                   	inc    ecx
 35f:	44                   	inc    esp
 360:	55                   	push   ebp
 361:	4d                   	dec    ebp
 362:	50                   	push   eax
 363:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 366:	53                   	push   ebx
 367:	43                   	inc    ebx
 368:	41                   	inc    ecx
 369:	4c                   	dec    esp
 36a:	4c                   	dec    esp
 36b:	5f                   	pop    edi
 36c:	53                   	push   ebx
 36d:	54                   	push   esp
 36e:	41                   	inc    ecx
 36f:	54                   	push   esp
 370:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 373:	53                   	push   ebx
 374:	43                   	inc    ebx
 375:	41                   	inc    ecx
 376:	4c                   	dec    esp
 377:	4c                   	dec    esp
 378:	5f                   	pop    edi
 379:	49                   	dec    ecx
 37a:	4e                   	dec    esi
 37b:	56                   	push   esi
 37c:	41                   	inc    ecx
 37d:	4c                   	dec    esp
 37e:	49                   	dec    ecx
 37f:	44                   	inc    esp
 380:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 383:	53                   	push   ebx
 384:	43                   	inc    ebx
 385:	41                   	inc    ecx
 386:	4c                   	dec    esp
 387:	4c                   	dec    esp
 388:	5f                   	pop    edi
 389:	54                   	push   esp
 38a:	45                   	inc    ebp
 38b:	4c                   	dec    esp
 38c:	4c                   	dec    esp
 38d:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 390:	72 6e                	jb     400 <sysEnter_Vector-0x12fc00>
 392:	61                   	popa   
 393:	6d                   	ins    DWORD PTR es:[edi],dx
 394:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 398:	53                   	push   ebx
 399:	43                   	inc    ebx
 39a:	41                   	inc    ecx
 39b:	4c                   	dec    esp
 39c:	4c                   	dec    esp
 39d:	5f                   	pop    edi
 39e:	4d                   	dec    ebp
 39f:	41                   	inc    ecx
 3a0:	53                   	push   ebx
 3a1:	4b                   	dec    ebx
 3a2:	53                   	push   ebx
 3a3:	49                   	dec    ecx
 3a4:	47                   	inc    edi
 3a5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a8:	53                   	push   ebx
 3a9:	43                   	inc    ebx
 3aa:	41                   	inc    ecx
 3ab:	4c                   	dec    esp
 3ac:	4c                   	dec    esp
 3ad:	5f                   	pop    edi
 3ae:	52                   	push   edx
 3af:	45                   	inc    ebp
 3b0:	47                   	inc    edi
 3b1:	45                   	inc    ebp
 3b2:	58                   	pop    eax
 3b3:	49                   	dec    ecx
 3b4:	54                   	push   esp
 3b5:	48                   	dec    eax
 3b6:	41                   	inc    ecx
 3b7:	4e                   	dec    esi
 3b8:	44                   	inc    esp
 3b9:	4c                   	dec    esp
 3ba:	45                   	inc    ebp
 3bb:	52                   	push   edx
 3bc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3bf:	53                   	push   ebx
 3c0:	43                   	inc    ebx
 3c1:	41                   	inc    ecx
 3c2:	4c                   	dec    esp
 3c3:	4c                   	dec    esp
 3c4:	5f                   	pop    edi
 3c5:	48                   	dec    eax
 3c6:	4c                   	dec    esp
 3c7:	54                   	push   esp
 3c8:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 3cb:	74 63                	je     430 <sysEnter_Vector-0x12fbd0>
 3cd:	77 64                	ja     433 <sysEnter_Vector-0x12fbcd>
 3cf:	49                   	dec    ecx
 3d0:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 3d3:	79 73                	jns    448 <sysEnter_Vector-0x12fbb8>
 3d5:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 3d8:	6c                   	ins    BYTE PTR es:[edi],dx
 3d9:	73 00                	jae    3db <sysEnter_Vector-0x12fc25>
 3db:	67                   	addr16
 3dc:	65                   	gs
 3dd:	74 65                	je     444 <sysEnter_Vector-0x12fbbc>
 3df:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3e0:	76 00                	jbe    3e2 <sysEnter_Vector-0x12fc1e>
 3e2:	53                   	push   ebx
 3e3:	59                   	pop    ecx
 3e4:	53                   	push   ebx
 3e5:	43                   	inc    ebx
 3e6:	41                   	inc    ecx
 3e7:	4c                   	dec    esp
 3e8:	4c                   	dec    esp
 3e9:	5f                   	pop    edi
 3ea:	53                   	push   ebx
 3eb:	45                   	inc    ebp
 3ec:	54                   	push   esp
 3ed:	53                   	push   ebx
 3ee:	54                   	push   esp
 3ef:	44                   	inc    esp
 3f0:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f3:	53                   	push   ebx
 3f4:	43                   	inc    ebx
 3f5:	41                   	inc    ecx
 3f6:	4c                   	dec    esp
 3f7:	4c                   	dec    esp
 3f8:	5f                   	pop    edi
 3f9:	53                   	push   ebx
 3fa:	45                   	inc    ebp
 3fb:	54                   	push   esp
 3fc:	43                   	inc    ebx
 3fd:	57                   	push   edi
 3fe:	44                   	inc    esp
 3ff:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 403:	74 50                	je     455 <sysEnter_Vector-0x12fbab>
 405:	6f                   	outs   dx,DWORD PTR ds:[esi]
 406:	70 75                	jo     47d <sysEnter_Vector-0x12fb83>
 408:	6c                   	ins    BYTE PTR es:[edi],dx
 409:	61                   	popa   
 40a:	74 65                	je     471 <sysEnter_Vector-0x12fb8f>
 40c:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 410:	53                   	push   ebx
 411:	43                   	inc    ebx
 412:	41                   	inc    ecx
 413:	4c                   	dec    esp
 414:	4c                   	dec    esp
 415:	5f                   	pop    edi
 416:	53                   	push   ebx
 417:	45                   	inc    ebp
 418:	54                   	push   esp
 419:	50                   	push   eax
 41a:	52                   	push   edx
 41b:	49                   	dec    ecx
 41c:	4f                   	dec    edi
 41d:	52                   	push   edx
 41e:	49                   	dec    ecx
 41f:	54                   	push   esp
 420:	59                   	pop    ecx
 421:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 424:	53                   	push   ebx
 425:	43                   	inc    ebx
 426:	41                   	inc    ecx
 427:	4c                   	dec    esp
 428:	4c                   	dec    esp
 429:	5f                   	pop    edi
 42a:	41                   	inc    ecx
 42b:	4c                   	dec    esp
 42c:	4c                   	dec    esp
 42d:	4f                   	dec    edi
 42e:	43                   	inc    ebx
 42f:	48                   	dec    eax
 430:	45                   	inc    ebp
 431:	41                   	inc    ecx
 432:	50                   	push   eax
 433:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 436:	53                   	push   ebx
 437:	43                   	inc    ebx
 438:	41                   	inc    ecx
 439:	4c                   	dec    esp
 43a:	4c                   	dec    esp
 43b:	5f                   	pop    edi
 43c:	47                   	inc    edi
 43d:	45                   	inc    ebp
 43e:	54                   	push   esp
 43f:	44                   	inc    esp
 440:	45                   	inc    ebp
 441:	4e                   	dec    esi
 442:	54                   	push   esp
 443:	53                   	push   ebx
 444:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 447:	53                   	push   ebx
 448:	43                   	inc    ebx
 449:	41                   	inc    ecx
 44a:	4c                   	dec    esp
 44b:	4c                   	dec    esp
 44c:	5f                   	pop    edi
 44d:	53                   	push   ebx
 44e:	45                   	inc    ebp
 44f:	45                   	inc    ebp
 450:	4b                   	dec    ebx
 451:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 454:	53                   	push   ebx
 455:	43                   	inc    ebx
 456:	41                   	inc    ecx
 457:	4c                   	dec    esp
 458:	4c                   	dec    esp
 459:	5f                   	pop    edi
 45a:	50                   	push   eax
 45b:	49                   	dec    ecx
 45c:	50                   	push   eax
 45d:	45                   	inc    ebp
 45e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 461:	53                   	push   ebx
 462:	43                   	inc    ebx
 463:	41                   	inc    ecx
 464:	4c                   	dec    esp
 465:	4c                   	dec    esp
 466:	5f                   	pop    edi
 467:	47                   	inc    edi
 468:	45                   	inc    ebp
 469:	54                   	push   esp
 46a:	43                   	inc    ebx
 46b:	57                   	push   edi
 46c:	44                   	inc    esp
 46d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 470:	53                   	push   ebx
 471:	43                   	inc    ebx
 472:	41                   	inc    ecx
 473:	4c                   	dec    esp
 474:	4c                   	dec    esp
 475:	5f                   	pop    edi
 476:	50                   	push   eax
 477:	52                   	push   edx
 478:	49                   	dec    ecx
 479:	4e                   	dec    esi
 47a:	54                   	push   esp
 47b:	44                   	inc    esp
 47c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 47f:	53                   	push   ebx
 480:	43                   	inc    ebx
 481:	41                   	inc    ecx
 482:	4c                   	dec    esp
 483:	4c                   	dec    esp
 484:	5f                   	pop    edi
 485:	46                   	inc    esi
 486:	52                   	push   edx
 487:	45                   	inc    ebp
 488:	45                   	inc    ebp
 489:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 48c:	53                   	push   ebx
 48d:	43                   	inc    ebx
 48e:	41                   	inc    ecx
 48f:	4c                   	dec    esp
 490:	4c                   	dec    esp
 491:	5f                   	pop    edi
 492:	45                   	inc    ebp
 493:	58                   	pop    eax
 494:	45                   	inc    ebp
 495:	43                   	inc    ebx
 496:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 499:	53                   	push   ebx
 49a:	43                   	inc    ebx
 49b:	41                   	inc    ecx
 49c:	4c                   	dec    esp
 49d:	4c                   	dec    esp
 49e:	5f                   	pop    edi
 49f:	45                   	inc    ebp
 4a0:	58                   	pop    eax
 4a1:	45                   	inc    ebp
 4a2:	43                   	inc    ebx
 4a3:	4e                   	dec    esi
 4a4:	45                   	inc    ebp
 4a5:	57                   	push   edi
 4a6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4a9:	53                   	push   ebx
 4aa:	43                   	inc    ebx
 4ab:	41                   	inc    ecx
 4ac:	4c                   	dec    esp
 4ad:	4c                   	dec    esp
 4ae:	5f                   	pop    edi
 4af:	44                   	inc    esp
 4b0:	55                   	push   ebp
 4b1:	50                   	push   eax
 4b2:	33 00                	xor    eax,DWORD PTR [eax]
 4b4:	53                   	push   ebx
 4b5:	59                   	pop    ecx
 4b6:	53                   	push   ebx
 4b7:	43                   	inc    ebx
 4b8:	41                   	inc    ecx
 4b9:	4c                   	dec    esp
 4ba:	4c                   	dec    esp
 4bb:	5f                   	pop    edi
 4bc:	46                   	inc    esi
 4bd:	4f                   	dec    edi
 4be:	52                   	push   edx
 4bf:	4b                   	dec    ebx
 4c0:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4c3:	53                   	push   ebx
 4c4:	43                   	inc    ebx
 4c5:	41                   	inc    ecx
 4c6:	4c                   	dec    esp
 4c7:	4c                   	dec    esp
 4c8:	5f                   	pop    edi
 4c9:	50                   	push   eax
 4ca:	52                   	push   edx
 4cb:	49                   	dec    ecx
 4cc:	4e                   	dec    esi
 4cd:	54                   	push   esp
 4ce:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4d1:	53                   	push   ebx
 4d2:	43                   	inc    ebx
 4d3:	41                   	inc    ecx
 4d4:	4c                   	dec    esp
 4d5:	4c                   	dec    esp
 4d6:	5f                   	pop    edi
 4d7:	43                   	inc    ebx
 4d8:	4c                   	dec    esp
 4d9:	4f                   	dec    edi
 4da:	53                   	push   ebx
 4db:	45                   	inc    ebp
 4dc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4df:	53                   	push   ebx
 4e0:	43                   	inc    ebx
 4e1:	41                   	inc    ecx
 4e2:	4c                   	dec    esp
 4e3:	4c                   	dec    esp
 4e4:	5f                   	pop    edi
 4e5:	45                   	inc    ebp
 4e6:	4e                   	dec    esi
 4e7:	44                   	inc    esp
 4e8:	50                   	push   eax
 4e9:	52                   	push   edx
 4ea:	4f                   	dec    edi
 4eb:	43                   	inc    ebx
 4ec:	45                   	inc    ebp
 4ed:	53                   	push   ebx
 4ee:	53                   	push   ebx
 4ef:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 4f2:	74 63                	je     557 <sysEnter_Vector-0x12faa9>
 4f4:	77 64                	ja     55a <sysEnter_Vector-0x12faa6>
 4f6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4f9:	53                   	push   ebx
 4fa:	43                   	inc    ebx
 4fb:	41                   	inc    ecx
 4fc:	4c                   	dec    esp
 4fd:	4c                   	dec    esp
 4fe:	5f                   	pop    edi
 4ff:	52                   	push   edx
 500:	45                   	inc    ebp
 501:	42                   	inc    edx
 502:	4f                   	dec    edi
 503:	4f                   	dec    edi
 504:	54                   	push   esp
 505:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 508:	74 56                	je     560 <sysEnter_Vector-0x12faa0>
 50a:	61                   	popa   
 50b:	6c                   	ins    BYTE PTR es:[edi],dx
 50c:	00 66 73             	add    BYTE PTR [esi+0x73],ah
 50f:	74 61                	je     572 <sysEnter_Vector-0x12fa8e>
 511:	74 5f                	je     572 <sysEnter_Vector-0x12fa8e>
 513:	74 00                	je     515 <sysEnter_Vector-0x12faeb>
 515:	63 6c 6f 73          	arpl   WORD PTR [edi+ebp*2+0x73],bp
 519:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 51d:	73 6f                	jae    58e <sysEnter_Vector-0x12fa72>
 51f:	6c                   	ins    BYTE PTR es:[edi],dx
 520:	76 65                	jbe    587 <sysEnter_Vector-0x12fa79>
 522:	50                   	push   eax
 523:	61                   	popa   
 524:	74 68                	je     58e <sysEnter_Vector-0x12fa72>
 526:	5f                   	pop    edi
 527:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 529:	76 50                	jbe    57b <sysEnter_Vector-0x12fa85>
 52b:	61                   	popa   
 52c:	74 68                	je     596 <sysEnter_Vector-0x12fa6a>
 52e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 531:	72 65                	jb     598 <sysEnter_Vector-0x12fa68>
 533:	61                   	popa   
 534:	6d                   	ins    DWORD PTR es:[edi],dx
 535:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 538:	74 68                	je     5a2 <sysEnter_Vector-0x12fa5e>
 53a:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 53d:	65                   	gs
 53e:	61                   	popa   
 53f:	74 65                	je     5a6 <sysEnter_Vector-0x12fa5a>
 541:	5f                   	pop    edi
 542:	74 69                	je     5ad <sysEnter_Vector-0x12fa53>
 544:	6d                   	ins    DWORD PTR es:[edi],dx
 545:	65 00 77 72          	add    BYTE PTR gs:[edi+0x72],dh
 549:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
 550:	65 
 551:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
 555:	6c                   	ins    BYTE PTR es:[edi],dx
 556:	49                   	dec    ecx
 557:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 55a:	61                   	popa   
 55b:	72 74                	jb     5d1 <sysEnter_Vector-0x12fa2f>
 55d:	46                   	inc    esi
 55e:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
 565:	73 
 566:	74 61                	je     5c9 <sysEnter_Vector-0x12fa37>
 568:	74 49                	je     5b3 <sysEnter_Vector-0x12fa4d>
 56a:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 56d:	50                   	push   eax
 56e:	74 72                	je     5e2 <sysEnter_Vector-0x12fa1e>
 570:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 573:	73 6f                	jae    5e4 <sysEnter_Vector-0x12fa1c>
 575:	6c                   	ins    BYTE PTR es:[edi],dx
 576:	76 65                	jbe    5dd <sysEnter_Vector-0x12fa23>
 578:	50                   	push   eax
 579:	61                   	popa   
 57a:	74 68                	je     5e4 <sysEnter_Vector-0x12fa1c>
 57c:	5f                   	pop    edi
 57d:	72 65                	jb     5e4 <sysEnter_Vector-0x12fa1c>
 57f:	73 50                	jae    5d1 <sysEnter_Vector-0x12fa2f>
 581:	61                   	popa   
 582:	74 68                	je     5ec <sysEnter_Vector-0x12fa14>
 584:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
 588:	6c                   	ins    BYTE PTR es:[edi],dx
 589:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 58c:	65                   	gs
 58d:	61                   	popa   
 58e:	74 65                	je     5f5 <sysEnter_Vector-0x12fa0b>
 590:	5f                   	pop    edi
 591:	64                   	fs
 592:	61                   	popa   
 593:	74 65                	je     5fa <sysEnter_Vector-0x12fa06>
 595:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 598:	74 6c                	je     606 <sysEnter_Vector-0x12f9fa>
 59a:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
 5a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5a2:	74 31                	je     5d5 <sysEnter_Vector-0x12fa2b>
 5a4:	36                   	ss
 5a5:	5f                   	pop    edi
 5a6:	74 00                	je     5a8 <sysEnter_Vector-0x12fa58>
 5a8:	77 72                	ja     61c <sysEnter_Vector-0x12f9e4>
 5aa:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
 5b1:	65 
 5b2:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 5b5:	73 6f                	jae    626 <sysEnter_Vector-0x12f9da>
 5b7:	6c                   	ins    BYTE PTR es:[edi],dx
 5b8:	76 65                	jbe    61f <sysEnter_Vector-0x12f9e1>
 5ba:	50                   	push   eax
 5bb:	61                   	popa   
 5bc:	74 68                	je     626 <sysEnter_Vector-0x12f9da>
 5be:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 5c1:	5f                   	pop    edi
 5c2:	6c                   	ins    BYTE PTR es:[edi],dx
 5c3:	61                   	popa   
 5c4:	73 74                	jae    63a <sysEnter_Vector-0x12f9c6>
 5c6:	6d                   	ins    DWORD PTR es:[edi],dx
 5c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5c8:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
 5cc:	73 69                	jae    637 <sysEnter_Vector-0x12f9c9>
 5ce:	74 69                	je     639 <sysEnter_Vector-0x12f9c7>
 5d0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5d2:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 5d5:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
 5dc:	65 
 5dd:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
 5e0:	68 65 6e 63 65       	push   0x65636e65
 5e5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 5e8:	74 6c                	je     656 <sysEnter_Vector-0x12f9aa>
 5ea:	69 6e 65 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x65],0x74656700
 5f1:	6c                   	ins    BYTE PTR es:[edi],dx
 5f2:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
 5f9:	72 6e                	jb     669 <sysEnter_Vector-0x12f997>
 5fb:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 5fe:	65 6f                	outs   dx,DWORD PTR gs:[esi]
 600:	70 65                	jo     667 <sysEnter_Vector-0x12f999>
 602:	6e                   	outs   dx,BYTE PTR ds:[esi]
 603:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
 607:	65                   	gs
 608:	54                   	push   esp
 609:	6f                   	outs   dx,DWORD PTR ds:[esi]
 60a:	4f                   	dec    edi
 60b:	75 74                	jne    681 <sysEnter_Vector-0x12f97f>
 60d:	70 75                	jo     684 <sysEnter_Vector-0x12f97c>
 60f:	74 00                	je     611 <sysEnter_Vector-0x12f9ef>
 611:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
 615:	74 65                	je     67c <sysEnter_Vector-0x12f984>
 617:	72 00                	jb     619 <sysEnter_Vector-0x12f9e7>
 619:	61                   	popa   
 61a:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
 61d:	73 73                	jae    692 <sysEnter_Vector-0x12f96e>
 61f:	5f                   	pop    edi
 620:	64                   	fs
 621:	61                   	popa   
 622:	74 65                	je     689 <sysEnter_Vector-0x12f977>
 624:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
 627:	73 74                	jae    69d <sysEnter_Vector-0x12f963>
 629:	61                   	popa   
 62a:	74 00                	je     62c <sysEnter_Vector-0x12f9d4>
 62c:	77 72                	ja     6a0 <sysEnter_Vector-0x12f960>
 62e:	69 74 65 00 65 6e 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x72746e65
 635:	72 
 636:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
 63d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 63f:	61                   	popa   
 640:	6d                   	ins    DWORD PTR es:[edi],dx
 641:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
 645:	74 50                	je     697 <sysEnter_Vector-0x12f969>
 647:	61                   	popa   
 648:	74 68                	je     6b2 <sysEnter_Vector-0x12f94e>
 64a:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
 64e:	65                   	gs
 64f:	70 74                	jo     6c5 <sysEnter_Vector-0x12f93b>
 651:	72 00                	jb     653 <sysEnter_Vector-0x12f9ad>
 653:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
 65a:	79 
 65b:	5f                   	pop    edi
 65c:	74 00                	je     65e <sysEnter_Vector-0x12f9a2>
 65e:	74 6f                	je     6cf <sysEnter_Vector-0x12f931>
 660:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
 664:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
 66b:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
 672:	79 
 673:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 676:	61                   	popa   
 677:	64                   	fs
 678:	49                   	dec    ecx
 679:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
 67d:	67 74 68             	addr16 je 6e8 <sysEnter_Vector-0x12f918>
 680:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 683:	61                   	popa   
 684:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
 688:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
 68d:	66                   	data16
 68e:	66                   	data16
 68f:	65                   	gs
 690:	72 00                	jb     692 <sysEnter_Vector-0x12f96e>
 692:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
 695:	65                   	gs
 696:	73 50                	jae    6e8 <sysEnter_Vector-0x12f918>
 698:	61                   	popa   
 699:	72 73                	jb     70e <sysEnter_Vector-0x12f8f2>
 69b:	65 64 00 73 65       	gs add BYTE PTR fs:gs:[ebx+0x65],dh
 6a0:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
 6a5:	72 63                	jb     70a <sysEnter_Vector-0x12f8f6>
 6a7:	2f                   	das    
 6a8:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 6af:	75 69                	jne    71a <sysEnter_Vector-0x12f8e6>
 6b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6b2:	74 38                	je     6ec <sysEnter_Vector-0x12f914>
 6b4:	5f                   	pop    edi
 6b5:	74 00                	je     6b7 <sysEnter_Vector-0x12f949>
 6b7:	73 74                	jae    72d <sysEnter_Vector-0x12f8d3>
 6b9:	5f                   	pop    edi
 6ba:	73 69                	jae    725 <sysEnter_Vector-0x12f8db>
 6bc:	7a 65                	jp     723 <sysEnter_Vector-0x12f8dd>
 6be:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 6c1:	73 6f                	jae    732 <sysEnter_Vector-0x12f8ce>
 6c3:	6c                   	ins    BYTE PTR es:[edi],dx
 6c4:	76 65                	jbe    72b <sysEnter_Vector-0x12f8d5>
 6c6:	50                   	push   eax
 6c7:	61                   	popa   
 6c8:	74 68                	je     732 <sysEnter_Vector-0x12f8ce>
 6ca:	5f                   	pop    edi
 6cb:	63 77 64             	arpl   WORD PTR [edi+0x64],si
 6ce:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 6d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6d2:	64                   	fs
 6d3:	6c                   	ins    BYTE PTR es:[edi],dx
 6d4:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 6d8:	73 6f                	jae    749 <sysEnter_Vector-0x12f8b7>
 6da:	6c                   	ins    BYTE PTR es:[edi],dx
 6db:	76 65                	jbe    742 <sysEnter_Vector-0x12f8be>
 6dd:	50                   	push   eax
 6de:	61                   	popa   
 6df:	74 68                	je     749 <sysEnter_Vector-0x12f8b7>
 6e1:	5f                   	pop    edi
 6e2:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
 6e9:	6c                   	ins    BYTE PTR es:[edi],dx
 6ea:	4c                   	dec    esp
 6eb:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
 6f2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 6f4:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 6f7:	6c                   	ins    BYTE PTR es:[edi],dx
 6f8:	65                   	gs
 6f9:	5f                   	pop    edi
 6fa:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
 6fe:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6ff:	75 70                	jne    771 <sysEnter_Vector-0x12f88f>
 701:	00 62 79             	add    BYTE PTR [edx+0x79],ah
 704:	74 65                	je     76b <sysEnter_Vector-0x12f895>
 706:	73 52                	jae    75a <sysEnter_Vector-0x12f8a6>
 708:	65                   	gs
 709:	74 75                	je     780 <sysEnter_Vector-0x12f880>
 70b:	72 6e                	jb     77b <sysEnter_Vector-0x12f885>
 70d:	65 64 00 67 65       	gs add BYTE PTR fs:gs:[edi+0x65],ah
 712:	74 64                	je     778 <sysEnter_Vector-0x12f888>
 714:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
 71b:	65                   	gs
 71c:	72 43                	jb     761 <sysEnter_Vector-0x12f89f>
 71e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 71f:	75 6e                	jne    78f <sysEnter_Vector-0x12f871>
 721:	74 00                	je     723 <sysEnter_Vector-0x12f8dd>
 723:	73 72                	jae    797 <sysEnter_Vector-0x12f869>
 725:	63 2f                	arpl   WORD PTR [edi],bp
 727:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 72e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 72f:	70 75                	jo     7a6 <sysEnter_Vector-0x12f85a>
 731:	74 2e                	je     761 <sysEnter_Vector-0x12f89f>
 733:	63 00                	arpl   WORD PTR [eax],ax
 735:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 73c:	67                   	addr16
 73d:	65                   	gs
 73e:	74 73                	je     7b3 <sysEnter_Vector-0x12f84d>
 740:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 743:	78 6c                	js     7b1 <sysEnter_Vector-0x12f84f>
 745:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 747:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 74a:	74 73                	je     7bf <sysEnter_Vector-0x12f841>
 74c:	45                   	inc    ebp
 74d:	72 72                	jb     7c1 <sysEnter_Vector-0x12f83f>
 74f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 750:	72 00                	jb     752 <sysEnter_Vector-0x12f8ae>
 752:	70 75                	jo     7c9 <sysEnter_Vector-0x12f837>
 754:	74 63                	je     7b9 <sysEnter_Vector-0x12f847>
 756:	00 6c 62 75          	add    BYTE PTR [edx+eiz*2+0x75],ch
 75a:	66                   	data16
 75b:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 75e:	74 73                	je     7d3 <sysEnter_Vector-0x12f82d>
 760:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 763:	74 63                	je     7c8 <sysEnter_Vector-0x12f838>
 765:	68 61 72 00 70       	push   0x70007261
 76a:	72 69                	jb     7d5 <sysEnter_Vector-0x12f82b>
 76c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 76d:	74 00                	je     76f <sysEnter_Vector-0x12f891>
 76f:	6c                   	ins    BYTE PTR es:[edi],dx
 770:	61                   	popa   
 771:	73 74                	jae    7e7 <sysEnter_Vector-0x12f819>
 773:	53                   	push   ebx
 774:	70 61                	jo     7d7 <sysEnter_Vector-0x12f829>
 776:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 779:	74 72                	je     7ed <sysEnter_Vector-0x12f813>
 77b:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 77e:	67 44                	addr16 inc esp
 780:	61                   	popa   
 781:	74 61                	je     7e4 <sysEnter_Vector-0x12f81c>
 783:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 786:	65                   	gs
 787:	65                   	gs
 788:	70 54                	jo     7de <sysEnter_Vector-0x12f822>
 78a:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
 791:	6f                   	outs   dx,DWORD PTR ds:[esi]
 792:	74 65                	je     7f9 <sysEnter_Vector-0x12f807>
 794:	50                   	push   eax
 795:	74 72                	je     809 <sysEnter_Vector-0x12f7f7>
 797:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 79a:	67 76 50             	addr16 jbe 7ed <sysEnter_Vector-0x12f813>
 79d:	74 72                	je     811 <sysEnter_Vector-0x12f7ef>
 79f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 7a2:	61                   	popa   
 7a3:	72 74                	jb     819 <sysEnter_Vector-0x12f7e7>
 7a5:	5f                   	pop    edi
 7a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7a7:	66 5f                	pop    di
 7a9:	77 6f                	ja     81a <sysEnter_Vector-0x12f7e6>
 7ab:	72 64                	jb     811 <sysEnter_Vector-0x12f7ef>
 7ad:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 7b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7b1:	67 72 61             	addr16 jb 815 <sysEnter_Vector-0x12f7eb>
 7b4:	6d                   	ins    DWORD PTR es:[edi],dx
 7b5:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 7b9:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 7bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7bd:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
 7c4:	65 
 7c5:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 7c8:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 7cb:	6c                   	ins    BYTE PTR es:[edi],dx
 7cc:	74 69                	je     837 <sysEnter_Vector-0x12f7c9>
 7ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7cf:	5f                   	pop    edi
 7d0:	76 61                	jbe    833 <sysEnter_Vector-0x12f7cd>
 7d2:	5f                   	pop    edi
 7d3:	6c                   	ins    BYTE PTR es:[edi],dx
 7d4:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 7db:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 7e2:	00 
 7e3:	73 70                	jae    855 <sysEnter_Vector-0x12f7ab>
 7e5:	61                   	popa   
 7e6:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 7e9:	74 72                	je     85d <sysEnter_Vector-0x12f7a3>
 7eb:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
 7ef:	70 00                	jo     7f1 <sysEnter_Vector-0x12f80f>
 7f1:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 7f4:	6c                   	ins    BYTE PTR es:[edi],dx
 7f5:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 7fc:	67 76 00             	addr16 jbe 7ff <sysEnter_Vector-0x12f801>
 7ff:	77 61                	ja     862 <sysEnter_Vector-0x12f79e>
 801:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 808:	65 
 809:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 80c:	4c                   	dec    esp
 80d:	65                   	gs
 80e:	76 65                	jbe    875 <sysEnter_Vector-0x12f78b>
 810:	6c                   	ins    BYTE PTR es:[edi],dx
 811:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 814:	6c                   	ins    BYTE PTR es:[edi],dx
 815:	6c                   	ins    BYTE PTR es:[edi],dx
 816:	6e                   	outs   dx,BYTE PTR ds:[esi]
 817:	75 6d                	jne    886 <sysEnter_Vector-0x12f77a>
 819:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
 81d:	71 75                	jno    894 <sysEnter_Vector-0x12f76c>
 81f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 820:	74 65                	je     887 <sysEnter_Vector-0x12f779>
 822:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 825:	65                   	gs
 826:	65                   	gs
 827:	70 00                	jo     829 <sysEnter_Vector-0x12f7d7>
 829:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 82c:	6c                   	ins    BYTE PTR es:[edi],dx
 82d:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 834:	67 76 49             	addr16 jbe 880 <sysEnter_Vector-0x12f780>
 837:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 83b:	73 79                	jae    8b6 <sysEnter_Vector-0x12f74a>
 83d:	73 63                	jae    8a2 <sysEnter_Vector-0x12f75e>
 83f:	61                   	popa   
 840:	6c                   	ins    BYTE PTR es:[edi],dx
 841:	6c                   	ins    BYTE PTR es:[edi],dx
 842:	31 00                	xor    DWORD PTR [eax],eax
 844:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 846:	5f                   	pop    edi
 847:	73 79                	jae    8c2 <sysEnter_Vector-0x12f73e>
 849:	73 63                	jae    8ae <sysEnter_Vector-0x12f752>
 84b:	61                   	popa   
 84c:	6c                   	ins    BYTE PTR es:[edi],dx
 84d:	6c                   	ins    BYTE PTR es:[edi],dx
 84e:	32 00                	xor    al,BYTE PTR [eax]
 850:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 852:	5f                   	pop    edi
 853:	73 79                	jae    8ce <sysEnter_Vector-0x12f732>
 855:	73 63                	jae    8ba <sysEnter_Vector-0x12f746>
 857:	61                   	popa   
 858:	6c                   	ins    BYTE PTR es:[edi],dx
 859:	6c                   	ins    BYTE PTR es:[edi],dx
 85a:	33 00                	xor    eax,DWORD PTR [eax]
 85c:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 85e:	5f                   	pop    edi
 85f:	73 79                	jae    8da <sysEnter_Vector-0x12f726>
 861:	73 63                	jae    8c6 <sysEnter_Vector-0x12f73a>
 863:	61                   	popa   
 864:	6c                   	ins    BYTE PTR es:[edi],dx
 865:	6c                   	ins    BYTE PTR es:[edi],dx
 866:	34 00                	xor    al,0x0
 868:	49                   	dec    ecx
 869:	4e                   	dec    esi
 86a:	5f                   	pop    edi
 86b:	57                   	push   edi
 86c:	4f                   	dec    edi
 86d:	52                   	push   edx
 86e:	44                   	inc    esp
 86f:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 872:	67 76 5f             	addr16 jbe 8d4 <sysEnter_Vector-0x12f72c>
 875:	73 69                	jae    8e0 <sysEnter_Vector-0x12f720>
 877:	7a 65                	jp     8de <sysEnter_Vector-0x12f722>
 879:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 87d:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 880:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 887:	65 
 888:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 88c:	73 70                	jae    8fe <sysEnter_Vector-0x12f702>
 88e:	61                   	popa   
 88f:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 892:	5f                   	pop    edi
 893:	5f                   	pop    edi
 894:	67 6e                	outs   dx,BYTE PTR ds:[si]
 896:	75 63                	jne    8fb <sysEnter_Vector-0x12f705>
 898:	5f                   	pop    edi
 899:	76 61                	jbe    8fc <sysEnter_Vector-0x12f704>
 89b:	5f                   	pop    edi
 89c:	6c                   	ins    BYTE PTR es:[edi],dx
 89d:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 8a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a5:	74 64                	je     90b <sysEnter_Vector-0x12f6f5>
 8a7:	49                   	dec    ecx
 8a8:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 8ab:	6d                   	ins    DWORD PTR es:[edi],dx
 8ac:	69 6c 6c 69 73 65 63 	imul   ebp,DWORD PTR [esp+ebp*2+0x69],0x6f636573
 8b3:	6f 
 8b4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8b5:	64                   	fs
 8b6:	73 00                	jae    8b8 <sysEnter_Vector-0x12f748>
 8b8:	70 61                	jo     91b <sysEnter_Vector-0x12f6e5>
 8ba:	72 61                	jb     91d <sysEnter_Vector-0x12f6e3>
 8bc:	6d                   	ins    DWORD PTR es:[edi],dx
 8bd:	31 00                	xor    DWORD PTR [eax],eax
 8bf:	70 61                	jo     922 <sysEnter_Vector-0x12f6de>
 8c1:	72 61                	jb     924 <sysEnter_Vector-0x12f6dc>
 8c3:	6d                   	ins    DWORD PTR es:[edi],dx
 8c4:	32 00                	xor    al,BYTE PTR [eax]
 8c6:	70 61                	jo     929 <sysEnter_Vector-0x12f6d7>
 8c8:	72 61                	jb     92b <sysEnter_Vector-0x12f6d5>
 8ca:	6d                   	ins    DWORD PTR es:[edi],dx
 8cb:	33 00                	xor    eax,DWORD PTR [eax]
 8cd:	70 61                	jo     930 <sysEnter_Vector-0x12f6d0>
 8cf:	72 61                	jb     932 <sysEnter_Vector-0x12f6ce>
 8d1:	6d                   	ins    DWORD PTR es:[edi],dx
 8d2:	34 00                	xor    al,0x0
 8d4:	73 65                	jae    93b <sysEnter_Vector-0x12f6c5>
 8d6:	74 63                	je     93b <sysEnter_Vector-0x12f6c5>
 8d8:	77 64                	ja     93e <sysEnter_Vector-0x12f6c2>
 8da:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 8dd:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
 8e1:	65                   	gs
 8e2:	78 65                	js     949 <sysEnter_Vector-0x12f6b7>
 8e4:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 8e7:	66 6f                	outs   dx,WORD PTR ds:[esi]
 8e9:	72 6d                	jb     958 <sysEnter_Vector-0x12f6a8>
 8eb:	61                   	popa   
 8ec:	74 00                	je     8ee <sysEnter_Vector-0x12f712>
 8ee:	70 72                	jo     962 <sysEnter_Vector-0x12f69e>
 8f0:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 8f7:	65                   	gs
 8f8:	72 00                	jb     8fa <sysEnter_Vector-0x12f706>
 8fa:	73 69                	jae    965 <sysEnter_Vector-0x12f69b>
 8fc:	67 6e                	outs   dx,BYTE PTR ds:[si]
 8fe:	61                   	popa   
 8ff:	6c                   	ins    BYTE PTR es:[edi],dx
 900:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 903:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 906:	5f                   	pop    edi
 907:	5f                   	pop    edi
 908:	73 65                	jae    96f <sysEnter_Vector-0x12f691>
 90a:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 90d:	64                   	fs
 90e:	73 00                	jae    910 <sysEnter_Vector-0x12f6f0>
 910:	44                   	inc    esp
 911:	55                   	push   ebp
 912:	4c                   	dec    esp
 913:	4c                   	dec    esp
 914:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 917:	61                   	popa   
 918:	74 65                	je     97f <sysEnter_Vector-0x12f681>
 91a:	73 00                	jae    91c <sysEnter_Vector-0x12f6e4>
 91c:	49                   	dec    ecx
 91d:	4e                   	dec    esi
 91e:	5f                   	pop    edi
 91f:	53                   	push   ebx
 920:	54                   	push   esp
 921:	52                   	push   edx
 922:	49                   	dec    ecx
 923:	4e                   	dec    esi
 924:	47                   	inc    edi
 925:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 928:	63 2f                	arpl   WORD PTR [edi],bp
 92a:	6c                   	ins    BYTE PTR es:[edi],dx
 92b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 932:	4f                   	dec    edi
 933:	53                   	push   ebx
 934:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 937:	61                   	popa   
 938:	72 67                	jb     9a1 <sysEnter_Vector-0x12f65f>
 93a:	63 00                	arpl   WORD PTR [eax],ax
 93c:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 93f:	6c                   	ins    BYTE PTR es:[edi],dx
 940:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
 947:	73 79                	jae    9c2 <sysEnter_Vector-0x12f63e>
 949:	73 63                	jae    9ae <sysEnter_Vector-0x12f652>
 94b:	61                   	popa   
 94c:	6c                   	ins    BYTE PTR es:[edi],dx
 94d:	6c                   	ins    BYTE PTR es:[edi],dx
 94e:	30 00                	xor    BYTE PTR [eax],al
 950:	73 70                	jae    9c2 <sysEnter_Vector-0x12f63e>
 952:	6c                   	ins    BYTE PTR es:[edi],dx
 953:	69 74 49 00 70 72 69 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6e697270
 95a:	6e 
 95b:	74 66                	je     9c3 <sysEnter_Vector-0x12f63d>
 95d:	49                   	dec    ecx
 95e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 962:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 965:	6c                   	ins    BYTE PTR es:[edi],dx
 966:	65                   	gs
 967:	61                   	popa   
 968:	6e                   	outs   dx,BYTE PTR ds:[esi]
 969:	75 70                	jne    9db <sysEnter_Vector-0x12f625>
 96b:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 96e:	67 76 00             	addr16 jbe 971 <sysEnter_Vector-0x12f68f>
 971:	65                   	gs
 972:	78 69                	js     9dd <sysEnter_Vector-0x12f623>
 974:	74 00                	je     976 <sysEnter_Vector-0x12f68a>
 976:	73 74                	jae    9ec <sysEnter_Vector-0x12f614>
 978:	61                   	popa   
 979:	74 75                	je     9f0 <sysEnter_Vector-0x12f610>
 97b:	73 00                	jae    97d <sysEnter_Vector-0x12f683>
 97d:	73 65                	jae    9e4 <sysEnter_Vector-0x12f61c>
 97f:	74 53                	je     9d4 <sysEnter_Vector-0x12f62c>
 981:	54                   	push   esp
 982:	44                   	inc    esp
 983:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 986:	67 48                	addr16 dec eax
 988:	61                   	popa   
 989:	6e                   	outs   dx,BYTE PTR ds:[esi]
 98a:	64                   	fs
 98b:	6c                   	ins    BYTE PTR es:[edi],dx
 98c:	65                   	gs
 98d:	72 00                	jb     98f <sysEnter_Vector-0x12f671>
 98f:	74 61                	je     9f2 <sysEnter_Vector-0x12f60e>
 991:	6b 65 41 44          	imul   esp,DWORD PTR [ebp+0x41],0x44
 995:	75 6d                	jne    a04 <sysEnter_Vector-0x12f5fc>
 997:	70 00                	jo     999 <sysEnter_Vector-0x12f667>
 999:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
 9a0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9a1:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 9a8:	6e 
 9a9:	61                   	popa   
 9aa:	6c                   	ins    BYTE PTR es:[edi],dx
 9ab:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 9ae:	67 73 00             	addr16 jae 9b1 <sysEnter_Vector-0x12f64f>
 9b1:	70 72                	jo     a25 <sysEnter_Vector-0x12f5db>
 9b3:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 9ba:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9bb:	70 00                	jo     9bd <sysEnter_Vector-0x12f643>
 9bd:	70 72                	jo     a31 <sysEnter_Vector-0x12f5cf>
 9bf:	69 6e 74 64 00 61 64 	imul   ebp,DWORD PTR [esi+0x74],0x64610064
 9c6:	64                   	fs
 9c7:	72 00                	jb     9c9 <sysEnter_Vector-0x12f637>
 9c9:	6d                   	ins    DWORD PTR es:[edi],dx
 9ca:	6d                   	ins    DWORD PTR es:[edi],dx
 9cb:	61                   	popa   
 9cc:	70 00                	jo     9ce <sysEnter_Vector-0x12f632>
 9ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9cf:	66 66 5f             	data32 pop di
 9d2:	74 00                	je     9d4 <sysEnter_Vector-0x12f62c>
 9d4:	70 72                	jo     a48 <sysEnter_Vector-0x12f5b8>
 9d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9d7:	74 00                	je     9d9 <sysEnter_Vector-0x12f627>
 9d9:	73 4d                	jae    a28 <sysEnter_Vector-0x12f5d8>
 9db:	4d                   	dec    ebp
 9dc:	61                   	popa   
 9dd:	70 53                	jo     a32 <sysEnter_Vector-0x12f5ce>
 9df:	79 73                	jns    a54 <sysEnter_Vector-0x12f5ac>
 9e1:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 9e4:	6c                   	ins    BYTE PTR es:[edi],dx
 9e5:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 9e8:	72 61                	jb     a4b <sysEnter_Vector-0x12f5b5>
 9ea:	6d                   	ins    DWORD PTR es:[edi],dx
 9eb:	73 00                	jae    9ed <sysEnter_Vector-0x12f613>
 9ed:	73 72                	jae    a61 <sysEnter_Vector-0x12f59f>
 9ef:	63 2f                	arpl   WORD PTR [edi],bp
 9f1:	6c                   	ins    BYTE PTR es:[edi],dx
 9f2:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
 9f9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9fc:	66                   	data16
 9fd:	6c                   	ins    BYTE PTR es:[edi],dx
 9fe:	61                   	popa   
 9ff:	67 73 00             	addr16 jae a02 <sysEnter_Vector-0x12f5fe>
 a02:	73 79                	jae    a7d <sysEnter_Vector-0x12f583>
 a04:	73 63                	jae    a69 <sysEnter_Vector-0x12f597>
 a06:	61                   	popa   
 a07:	6c                   	ins    BYTE PTR es:[edi],dx
 a08:	6c                   	ins    BYTE PTR es:[edi],dx
 a09:	5f                   	pop    edi
 a0a:	6d                   	ins    DWORD PTR es:[edi],dx
 a0b:	6d                   	ins    DWORD PTR es:[edi],dx
 a0c:	61                   	popa   
 a0d:	70 5f                	jo     a6e <sysEnter_Vector-0x12f592>
 a0f:	74 00                	je     a11 <sysEnter_Vector-0x12f5ef>
 a11:	6d                   	ins    DWORD PTR es:[edi],dx
 a12:	61                   	popa   
 a13:	6c                   	ins    BYTE PTR es:[edi],dx
 a14:	6c                   	ins    BYTE PTR es:[edi],dx
 a15:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a16:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 a19:	70 72                	jo     a8d <sysEnter_Vector-0x12f573>
 a1b:	65                   	gs
 a1c:	76 00                	jbe    a1e <sysEnter_Vector-0x12f5e2>
 a1e:	6c                   	ins    BYTE PTR es:[edi],dx
 a1f:	61                   	popa   
 a20:	73 74                	jae    a96 <sysEnter_Vector-0x12f56a>
 a22:	48                   	dec    eax
 a23:	52                   	push   edx
 a24:	43                   	inc    ebx
 a25:	72 65                	jb     a8c <sysEnter_Vector-0x12f574>
 a27:	61                   	popa   
 a28:	74 65                	je     a8f <sysEnter_Vector-0x12f571>
 a2a:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 a2e:	78 74                	js     aa4 <sysEnter_Vector-0x12f55c>
 a30:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 a33:	61                   	popa   
 a34:	70 72                	jo     aa8 <sysEnter_Vector-0x12f558>
 a36:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 a3a:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 a3d:	65                   	gs
 a3e:	65                   	gs
 a3f:	49                   	dec    ecx
 a40:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 a43:	72 6b                	jb     ab0 <sysEnter_Vector-0x12f550>
 a45:	65                   	gs
 a46:	72 00                	jb     a48 <sysEnter_Vector-0x12f5b8>
 a48:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a49:	65                   	gs
 a4a:	77 48                	ja     a94 <sysEnter_Vector-0x12f56c>
 a4c:	65                   	gs
 a4d:	61                   	popa   
 a4e:	70 52                	jo     aa2 <sysEnter_Vector-0x12f55e>
 a50:	65                   	gs
 a51:	71 75                	jno    ac8 <sysEnter_Vector-0x12f538>
 a53:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 a5a:	75 6c                	jne    ac8 <sysEnter_Vector-0x12f538>
 a5c:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 a63:	75 65                	jne    aca <sysEnter_Vector-0x12f536>
 a65:	73 74                	jae    adb <sysEnter_Vector-0x12f525>
 a67:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 a6a:	6c                   	ins    BYTE PTR es:[edi],dx
 a6b:	6c                   	ins    BYTE PTR es:[edi],dx
 a6c:	65                   	gs
 a6d:	72 00                	jb     a6f <sysEnter_Vector-0x12f591>
 a6f:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
 a76:	68 65 61 70 00       	push   0x706165
 a7b:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
 a82:	6c                   	ins    BYTE PTR es:[edi],dx
 a83:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a84:	63 00                	arpl   WORD PTR [eax],ax
 a86:	72 65                	jb     aed <sysEnter_Vector-0x12f513>
 a88:	71 75                	jno    aff <sysEnter_Vector-0x12f501>
 a8a:	65                   	gs
 a8b:	73 74                	jae    b01 <sysEnter_Vector-0x12f4ff>
 a8d:	53                   	push   ebx
 a8e:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 a95:	6c                   	ins    BYTE PTR es:[edi],dx
 a96:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a97:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 a9a:	6c                   	ins    BYTE PTR es:[edi],dx
 a9b:	65                   	gs
 a9c:	61                   	popa   
 a9d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a9e:	75 70                	jne    b10 <sysEnter_Vector-0x12f4f0>
 aa0:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 aa3:	6c                   	ins    BYTE PTR es:[edi],dx
 aa4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aa5:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 aa8:	65                   	gs
 aa9:	64                   	fs
 aaa:	50                   	push   eax
 aab:	74 72                	je     b1f <sysEnter_Vector-0x12f4e1>
 aad:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 ab0:	77 6c                	ja     b1e <sysEnter_Vector-0x12f4e2>
 ab2:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 ab4:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
 ab7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ab8:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
 abf:	00 
 ac0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ac1:	65                   	gs
 ac2:	77 53                	ja     b17 <sysEnter_Vector-0x12f4e9>
 ac4:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
 acb:	6c                   	ins    BYTE PTR es:[edi],dx
 acc:	53                   	push   ebx
 acd:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
 ad4:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
 ada:	61                   	popa   
 adb:	6c                   	ins    BYTE PTR es:[edi],dx
 adc:	6c                   	ins    BYTE PTR es:[edi],dx
 add:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ade:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 ae1:	75 73                	jne    b56 <sysEnter_Vector-0x12f4aa>
 ae3:	65                   	gs
 ae4:	73 00                	jae    ae6 <sysEnter_Vector-0x12f51a>
 ae6:	68 65 61 70 72       	push   0x72706165
 aeb:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 aee:	66                   	data16
 aef:	6e                   	outs   dx,BYTE PTR ds:[esi]
 af0:	65                   	gs
 af1:	77 70                	ja     b63 <sysEnter_Vector-0x12f49d>
 af3:	74 72                	je     b67 <sysEnter_Vector-0x12f499>
 af5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 af8:	63 2f                	arpl   WORD PTR [edi],bp
 afa:	6d                   	ins    DWORD PTR es:[edi],dx
 afb:	61                   	popa   
 afc:	6c                   	ins    BYTE PTR es:[edi],dx
 afd:	6c                   	ins    BYTE PTR es:[edi],dx
 afe:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aff:	63 2e                	arpl   WORD PTR [esi],bp
 b01:	63 00                	arpl   WORD PTR [eax],ax
 b03:	68 65 61 70 50       	push   0x50706165
 b08:	74 72                	je     b7c <sysEnter_Vector-0x12f484>
 b0a:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
 b0d:	6c                   	ins    BYTE PTR es:[edi],dx
 b0e:	64                   	fs
 b0f:	70 74                	jo     b85 <sysEnter_Vector-0x12f47b>
 b11:	72 00                	jb     b13 <sysEnter_Vector-0x12f4ed>
 b13:	66                   	data16
 b14:	72 65                	jb     b7b <sysEnter_Vector-0x12f485>
 b16:	65 00 66 70          	add    BYTE PTR gs:[esi+0x70],ah
 b1a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b1b:	69 6e 74 65 72 00 68 	imul   ebp,DWORD PTR [esi+0x74],0x68007265
 b22:	65                   	gs
 b23:	61                   	popa   
 b24:	70 50                	jo     b76 <sysEnter_Vector-0x12f48a>
 b26:	74 72                	je     b9a <sysEnter_Vector-0x12f466>
 b28:	4e                   	dec    esi
 b29:	65                   	gs
 b2a:	78 74                	js     ba0 <sysEnter_Vector-0x12f460>
 b2c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 b2f:	6c                   	ins    BYTE PTR es:[edi],dx
 b30:	6c                   	ins    BYTE PTR es:[edi],dx
 b31:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b32:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
 b35:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b36:	64                   	fs
 b37:	41                   	inc    ecx
 b38:	76 61                	jbe    b9b <sysEnter_Vector-0x12f465>
 b3a:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
 b41:	65 
 b42:	6d                   	ins    DWORD PTR es:[edi],dx
 b43:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b44:	72 79                	jb     bbf <sysEnter_Vector-0x12f441>
 b46:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 b49:	61                   	popa   
 b4a:	6c                   	ins    BYTE PTR es:[edi],dx
 b4b:	6c                   	ins    BYTE PTR es:[edi],dx
 b4c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b4d:	63 00                	arpl   WORD PTR [eax],ax
 b4f:	6d                   	ins    DWORD PTR es:[edi],dx
 b50:	61                   	popa   
 b51:	6c                   	ins    BYTE PTR es:[edi],dx
 b52:	6c                   	ins    BYTE PTR es:[edi],dx
 b53:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b54:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
 b57:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b58:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
 b5f:	6b 
 b60:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b63:	63 2f                	arpl   WORD PTR [edi],bp
 b65:	6d                   	ins    DWORD PTR es:[edi],dx
 b66:	65                   	gs
 b67:	6d                   	ins    DWORD PTR es:[edi],dx
 b68:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b6b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b6e:	64                   	fs
 b6f:	65                   	gs
 b70:	73 74                	jae    be6 <sysEnter_Vector-0x12f41a>
 b72:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 b75:	6d                   	ins    DWORD PTR es:[edi],dx
 b76:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b79:	49                   	dec    ecx
 b7a:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 b7d:	6d                   	ins    DWORD PTR es:[edi],dx
 b7e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b81:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b84:	63 2f                	arpl   WORD PTR [edi],bp
 b86:	6d                   	ins    DWORD PTR es:[edi],dx
 b87:	65                   	gs
 b88:	6d                   	ins    DWORD PTR es:[edi],dx
 b89:	73 65                	jae    bf0 <sysEnter_Vector-0x12f410>
 b8b:	74 2e                	je     bbb <sysEnter_Vector-0x12f445>
 b8d:	63 00                	arpl   WORD PTR [eax],ax
 b8f:	6d                   	ins    DWORD PTR es:[edi],dx
 b90:	65                   	gs
 b91:	6d                   	ins    DWORD PTR es:[edi],dx
 b92:	73 65                	jae    bf9 <sysEnter_Vector-0x12f407>
 b94:	74 00                	je     b96 <sysEnter_Vector-0x12f46a>
 b96:	6d                   	ins    DWORD PTR es:[edi],dx
 b97:	65                   	gs
 b98:	6d                   	ins    DWORD PTR es:[edi],dx
 b99:	73 65                	jae    c00 <sysEnter_Vector-0x12f400>
 b9b:	74 49                	je     be6 <sysEnter_Vector-0x12f41a>
 b9d:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 ba0:	61                   	popa   
 ba1:	6c                   	ins    BYTE PTR es:[edi],dx
 ba2:	00 66 56             	add    BYTE PTR [esi+0x56],ah
 ba5:	61                   	popa   
 ba6:	6c                   	ins    BYTE PTR es:[edi],dx
 ba7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 baa:	63 2f                	arpl   WORD PTR [edi],bp
 bac:	70 69                	jo     c17 <sysEnter_Vector-0x12f3e9>
 bae:	70 65                	jo     c15 <sysEnter_Vector-0x12f3eb>
 bb0:	5f                   	pop    edi
 bb1:	6c                   	ins    BYTE PTR es:[edi],dx
 bb2:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
 bb9:	70 65                	jo     c20 <sysEnter_Vector-0x12f3e0>
 bbb:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
 bbf:	33 00                	xor    eax,DWORD PTR [eax]
 bc1:	70 69                	jo     c2c <sysEnter_Vector-0x12f3d4>
 bc3:	70 65                	jo     c2a <sysEnter_Vector-0x12f3d6>
 bc5:	66                   	data16
 bc6:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 bca:	77 66                	ja     c32 <sysEnter_Vector-0x12f3ce>
 bcc:	64 00 6f 6c          	add    BYTE PTR fs:[edi+0x6c],ch
 bd0:	64                   	fs
 bd1:	66                   	data16
 bd2:	64 00 73 6b          	add    BYTE PTR fs:[ebx+0x6b],dh
 bd6:	69 70 5f 61 74 6f 69 	imul   esi,DWORD PTR [eax+0x5f],0x696f7461
 bdd:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 be1:	61                   	popa   
 be2:	73 65                	jae    c49 <sysEnter_Vector-0x12f3b7>
 be4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 be7:	63 2f                	arpl   WORD PTR [edi],bp
 be9:	73 70                	jae    c5b <sysEnter_Vector-0x12f3a5>
 beb:	72 69                	jb     c56 <sysEnter_Vector-0x12f3aa>
 bed:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bee:	74 66                	je     c56 <sysEnter_Vector-0x12f3aa>
 bf0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 bf3:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 bf6:	65 00 71 75          	add    BYTE PTR gs:[ecx+0x75],dh
 bfa:	61                   	popa   
 bfb:	6c                   	ins    BYTE PTR es:[edi],dx
 bfc:	69 66 69 65 72 00 72 	imul   esp,DWORD PTR [esi+0x69],0x72007265
 c03:	65                   	gs
 c04:	70 65                	jo     c6b <sysEnter_Vector-0x12f395>
 c06:	61                   	popa   
 c07:	74 00                	je     c09 <sysEnter_Vector-0x12f3f7>
 c09:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c0a:	75 6d                	jne    c79 <sysEnter_Vector-0x12f387>
 c0c:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
 c0f:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 c12:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 c16:	69 6f 6e 00 64 69 67 	imul   ebp,DWORD PTR [edi+0x6e],0x67696400
 c1d:	69 74 73 00 66 69 65 	imul   esi,DWORD PTR [ebx+esi*2+0x0],0x6c656966
 c24:	6c 
 c25:	64                   	fs
 c26:	5f                   	pop    edi
 c27:	77 69                	ja     c92 <sysEnter_Vector-0x12f36e>
 c29:	64                   	fs
 c2a:	74 68                	je     c94 <sysEnter_Vector-0x12f36c>
 c2c:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 c2f:	72 65                	jb     c96 <sysEnter_Vector-0x12f36a>
 c31:	73 00                	jae    c33 <sysEnter_Vector-0x12f3cd>
 c33:	76 73                	jbe    ca8 <sysEnter_Vector-0x12f358>
 c35:	70 72                	jo     ca9 <sysEnter_Vector-0x12f357>
 c37:	69 6e 74 66 00 73 72 	imul   ebp,DWORD PTR [esi+0x74],0x72730066
 c3e:	63 2f                	arpl   WORD PTR [edi],bp
 c40:	73 74                	jae    cb6 <sysEnter_Vector-0x12f34a>
 c42:	64 69 6f 2e 63 00 62 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x75620063
 c49:	75 
 c4a:	66                   	data16
 c4b:	66                   	data16
 c4c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 c4f:	73 65                	jae    cb6 <sysEnter_Vector-0x12f34a>
 c51:	74 52                	je     ca5 <sysEnter_Vector-0x12f35b>
 c53:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c54:	77 00                	ja     c56 <sysEnter_Vector-0x12f3aa>
 c56:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 c59:	66 50                	push   ax
 c5b:	74 72                	je     ccf <sysEnter_Vector-0x12f331>
 c5d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c60:	72 63                	jb     cc5 <sysEnter_Vector-0x12f33b>
 c62:	61                   	popa   
 c63:	74 49                	je     cae <sysEnter_Vector-0x12f352>
 c65:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c68:	72 63                	jb     ccd <sysEnter_Vector-0x12f333>
 c6a:	61                   	popa   
 c6b:	74 00                	je     c6d <sysEnter_Vector-0x12f393>
 c6d:	73 74                	jae    ce3 <sysEnter_Vector-0x12f31d>
 c6f:	72 6e                	jb     cdf <sysEnter_Vector-0x12f321>
 c71:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 c74:	00 62 79             	add    BYTE PTR [edx+0x79],ah
 c77:	74 65                	je     cde <sysEnter_Vector-0x12f322>
 c79:	73 54                	jae    ccf <sysEnter_Vector-0x12f331>
 c7b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c7c:	43                   	inc    ebx
 c7d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c7e:	70 79                	jo     cf9 <sysEnter_Vector-0x12f307>
 c80:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c83:	72 6e                	jb     cf3 <sysEnter_Vector-0x12f30d>
 c85:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 c88:	49                   	dec    ecx
 c89:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c8c:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
 c8f:	72 69                	jb     cfa <sysEnter_Vector-0x12f306>
 c91:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c92:	67 4c                	addr16 dec esp
 c94:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 c96:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c99:	63 2f                	arpl   WORD PTR [edi],bp
 c9b:	73 74                	jae    d11 <sysEnter_Vector-0x12f2ef>
 c9d:	72 69                	jb     d08 <sysEnter_Vector-0x12f2f8>
 c9f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ca0:	67 73 2f             	addr16 jae cd2 <sysEnter_Vector-0x12f32e>
 ca3:	73 74                	jae    d19 <sysEnter_Vector-0x12f2e7>
 ca5:	72 63                	jb     d0a <sysEnter_Vector-0x12f2f6>
 ca7:	61                   	popa   
 ca8:	74 2e                	je     cd8 <sysEnter_Vector-0x12f328>
 caa:	63 00                	arpl   WORD PTR [eax],ax
 cac:	73 74                	jae    d22 <sysEnter_Vector-0x12f2de>
 cae:	72 63                	jb     d13 <sysEnter_Vector-0x12f2ed>
 cb0:	6d                   	ins    DWORD PTR es:[edi],dx
 cb1:	70 49                	jo     cfc <sysEnter_Vector-0x12f304>
 cb3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 cb6:	72 63                	jb     d1b <sysEnter_Vector-0x12f2e5>
 cb8:	6d                   	ins    DWORD PTR es:[edi],dx
 cb9:	70 00                	jo     cbb <sysEnter_Vector-0x12f345>
 cbb:	73 72                	jae    d2f <sysEnter_Vector-0x12f2d1>
 cbd:	63 2f                	arpl   WORD PTR [edi],bp
 cbf:	73 74                	jae    d35 <sysEnter_Vector-0x12f2cb>
 cc1:	72 69                	jb     d2c <sysEnter_Vector-0x12f2d4>
 cc3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cc4:	67 73 2f             	addr16 jae cf6 <sysEnter_Vector-0x12f30a>
 cc7:	73 74                	jae    d3d <sysEnter_Vector-0x12f2c3>
 cc9:	72 63                	jb     d2e <sysEnter_Vector-0x12f2d2>
 ccb:	6d                   	ins    DWORD PTR es:[edi],dx
 ccc:	70 2e                	jo     cfc <sysEnter_Vector-0x12f304>
 cce:	63 00                	arpl   WORD PTR [eax],ax
 cd0:	63 6f 75             	arpl   WORD PTR [edi+0x75],bp
 cd3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cd4:	74 00                	je     cd6 <sysEnter_Vector-0x12f32a>
 cd6:	73 74                	jae    d4c <sysEnter_Vector-0x12f2b4>
 cd8:	72 63                	jb     d3d <sysEnter_Vector-0x12f2c3>
 cda:	70 79                	jo     d55 <sysEnter_Vector-0x12f2ab>
 cdc:	63 00                	arpl   WORD PTR [eax],ax
 cde:	73 74                	jae    d54 <sysEnter_Vector-0x12f2ac>
 ce0:	72 63                	jb     d45 <sysEnter_Vector-0x12f2bb>
 ce2:	70 79                	jo     d5d <sysEnter_Vector-0x12f2a3>
 ce4:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 ce7:	63 2f                	arpl   WORD PTR [edi],bp
 ce9:	73 74                	jae    d5f <sysEnter_Vector-0x12f2a1>
 ceb:	72 69                	jb     d56 <sysEnter_Vector-0x12f2aa>
 ced:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cee:	67 73 2f             	addr16 jae d20 <sysEnter_Vector-0x12f2e0>
 cf1:	73 74                	jae    d67 <sysEnter_Vector-0x12f299>
 cf3:	72 63                	jb     d58 <sysEnter_Vector-0x12f2a8>
 cf5:	70 79                	jo     d70 <sysEnter_Vector-0x12f290>
 cf7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 cfa:	73 74                	jae    d70 <sysEnter_Vector-0x12f290>
 cfc:	72 63                	jb     d61 <sysEnter_Vector-0x12f29f>
 cfe:	70 79                	jo     d79 <sysEnter_Vector-0x12f287>
 d00:	49                   	dec    ecx
 d01:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d04:	72 69                	jb     d6f <sysEnter_Vector-0x12f291>
 d06:	73 6e                	jae    d76 <sysEnter_Vector-0x12f28a>
 d08:	75 6d                	jne    d77 <sysEnter_Vector-0x12f289>
 d0a:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d0d:	63 2f                	arpl   WORD PTR [edi],bp
 d0f:	73 74                	jae    d85 <sysEnter_Vector-0x12f27b>
 d11:	72 69                	jb     d7c <sysEnter_Vector-0x12f284>
 d13:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d14:	67 73 2f             	addr16 jae d46 <sysEnter_Vector-0x12f2ba>
 d17:	73 74                	jae    d8d <sysEnter_Vector-0x12f273>
 d19:	72 69                	jb     d84 <sysEnter_Vector-0x12f27c>
 d1b:	73 6e                	jae    d8b <sysEnter_Vector-0x12f275>
 d1d:	75 6d                	jne    d8c <sysEnter_Vector-0x12f274>
 d1f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d22:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 d25:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 d28:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 d2f:	74 
 d30:	72 6c                	jb     d9e <sysEnter_Vector-0x12f262>
 d32:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d34:	49                   	dec    ecx
 d35:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d38:	72 6c                	jb     da6 <sysEnter_Vector-0x12f25a>
 d3a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d3c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d3f:	72 6e                	jb     daf <sysEnter_Vector-0x12f251>
 d41:	6c                   	ins    BYTE PTR es:[edi],dx
 d42:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d44:	49                   	dec    ecx
 d45:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d48:	72 6e                	jb     db8 <sysEnter_Vector-0x12f248>
 d4a:	6c                   	ins    BYTE PTR es:[edi],dx
 d4b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d4d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d50:	63 2f                	arpl   WORD PTR [edi],bp
 d52:	73 74                	jae    dc8 <sysEnter_Vector-0x12f238>
 d54:	72 69                	jb     dbf <sysEnter_Vector-0x12f241>
 d56:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d57:	67 73 2f             	addr16 jae d89 <sysEnter_Vector-0x12f277>
 d5a:	73 74                	jae    dd0 <sysEnter_Vector-0x12f230>
 d5c:	72 6c                	jb     dca <sysEnter_Vector-0x12f236>
 d5e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d60:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d63:	73 74                	jae    dd9 <sysEnter_Vector-0x12f227>
 d65:	72 6e                	jb     dd5 <sysEnter_Vector-0x12f22b>
 d67:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d6a:	49                   	dec    ecx
 d6b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d6e:	72 6e                	jb     dde <sysEnter_Vector-0x12f222>
 d70:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d73:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d76:	63 2f                	arpl   WORD PTR [edi],bp
 d78:	73 74                	jae    dee <sysEnter_Vector-0x12f212>
 d7a:	72 69                	jb     de5 <sysEnter_Vector-0x12f21b>
 d7c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d7d:	67 73 2f             	addr16 jae daf <sysEnter_Vector-0x12f251>
 d80:	73 74                	jae    df6 <sysEnter_Vector-0x12f20a>
 d82:	72 6e                	jb     df2 <sysEnter_Vector-0x12f20e>
 d84:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d87:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d8a:	73 72                	jae    dfe <sysEnter_Vector-0x12f202>
 d8c:	63 2f                	arpl   WORD PTR [edi],bp
 d8e:	73 74                	jae    e04 <sysEnter_Vector-0x12f1fc>
 d90:	72 69                	jb     dfb <sysEnter_Vector-0x12f205>
 d92:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d93:	67 73 2f             	addr16 jae dc5 <sysEnter_Vector-0x12f23b>
 d96:	73 74                	jae    e0c <sysEnter_Vector-0x12f1f4>
 d98:	72 6e                	jb     e08 <sysEnter_Vector-0x12f1f8>
 d9a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 d9d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 da0:	73 74                	jae    e16 <sysEnter_Vector-0x12f1ea>
 da2:	72 6e                	jb     e12 <sysEnter_Vector-0x12f1ee>
 da4:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 da7:	49                   	dec    ecx
 da8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 dab:	72 6e                	jb     e1b <sysEnter_Vector-0x12f1e5>
 dad:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 db0:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 db3:	64                   	fs
 db4:	70 74                	jo     e2a <sysEnter_Vector-0x12f1d6>
 db6:	72 00                	jb     db8 <sysEnter_Vector-0x12f248>
 db8:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 dbb:	6c                   	ins    BYTE PTR es:[edi],dx
 dbc:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 dc3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 dc4:	75 6c                	jne    e32 <sysEnter_Vector-0x12f1ce>
 dc6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 dc9:	63 2f                	arpl   WORD PTR [edi],bp
 dcb:	73 74                	jae    e41 <sysEnter_Vector-0x12f1bf>
 dcd:	72 69                	jb     e38 <sysEnter_Vector-0x12f1c8>
 dcf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 dd0:	67 73 2f             	addr16 jae e02 <sysEnter_Vector-0x12f1fe>
 dd3:	73 74                	jae    e49 <sysEnter_Vector-0x12f1b7>
 dd5:	72 6f                	jb     e46 <sysEnter_Vector-0x12f1ba>
 dd7:	75 6c                	jne    e45 <sysEnter_Vector-0x12f1bb>
 dd9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ddc:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 ddf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 de0:	66                   	data16
 de1:	66                   	data16
 de2:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
 de5:	74 72                	je     e59 <sysEnter_Vector-0x12f1a7>
 de7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 dea:	63 2f                	arpl   WORD PTR [edi],bp
 dec:	73 74                	jae    e62 <sysEnter_Vector-0x12f19e>
 dee:	72 69                	jb     e59 <sysEnter_Vector-0x12f1a7>
 df0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 df1:	67 73 2f             	addr16 jae e23 <sysEnter_Vector-0x12f1dd>
 df4:	73 74                	jae    e6a <sysEnter_Vector-0x12f196>
 df6:	72 70                	jb     e68 <sysEnter_Vector-0x12f198>
 df8:	61                   	popa   
 df9:	72 74                	jb     e6f <sysEnter_Vector-0x12f191>
 dfb:	73 2e                	jae    e2b <sysEnter_Vector-0x12f1d5>
 dfd:	63 00                	arpl   WORD PTR [eax],ax
 dff:	73 74                	jae    e75 <sysEnter_Vector-0x12f18b>
 e01:	72 6c                	jb     e6f <sysEnter_Vector-0x12f191>
 e03:	65                   	gs
 e04:	66                   	data16
 e05:	74 00                	je     e07 <sysEnter_Vector-0x12f1f9>
 e07:	73 72                	jae    e7b <sysEnter_Vector-0x12f185>
 e09:	63 2f                	arpl   WORD PTR [edi],bp
 e0b:	73 74                	jae    e81 <sysEnter_Vector-0x12f17f>
 e0d:	72 69                	jb     e78 <sysEnter_Vector-0x12f188>
 e0f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e10:	67 73 2f             	addr16 jae e42 <sysEnter_Vector-0x12f1be>
 e13:	73 74                	jae    e89 <sysEnter_Vector-0x12f177>
 e15:	72 74                	jb     e8b <sysEnter_Vector-0x12f175>
 e17:	6f                   	outs   dx,DWORD PTR ds:[esi]
 e18:	6c                   	ins    BYTE PTR es:[edi],dx
 e19:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 e1c:	73 74                	jae    e92 <sysEnter_Vector-0x12f16e>
 e1e:	72 74                	jb     e94 <sysEnter_Vector-0x12f16c>
 e20:	6f                   	outs   dx,DWORD PTR ds:[esi]
 e21:	6c                   	ins    BYTE PTR es:[edi],dx
 e22:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e25:	72 74                	jb     e9b <sysEnter_Vector-0x12f165>
 e27:	72 69                	jb     e92 <sysEnter_Vector-0x12f16e>
 e29:	6d                   	ins    DWORD PTR es:[edi],dx
 e2a:	49                   	dec    ecx
 e2b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 e2e:	70 75                	jo     ea5 <sysEnter_Vector-0x12f15b>
 e30:	74 00                	je     e32 <sysEnter_Vector-0x12f1ce>
 e32:	73 72                	jae    ea6 <sysEnter_Vector-0x12f15a>
 e34:	63 2f                	arpl   WORD PTR [edi],bp
 e36:	73 74                	jae    eac <sysEnter_Vector-0x12f154>
 e38:	72 69                	jb     ea3 <sysEnter_Vector-0x12f15d>
 e3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e3b:	67 73 2f             	addr16 jae e6d <sysEnter_Vector-0x12f193>
 e3e:	73 74                	jae    eb4 <sysEnter_Vector-0x12f14c>
 e40:	72 74                	jb     eb6 <sysEnter_Vector-0x12f14a>
 e42:	72 69                	jb     ead <sysEnter_Vector-0x12f153>
 e44:	6d                   	ins    DWORD PTR es:[edi],dx
 e45:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 e48:	73 74                	jae    ebe <sysEnter_Vector-0x12f142>
 e4a:	72 74                	jb     ec0 <sysEnter_Vector-0x12f140>
 e4c:	72 69                	jb     eb7 <sysEnter_Vector-0x12f149>
 e4e:	6d                   	ins    DWORD PTR es:[edi],dx
 e4f:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 e52:	74 73                	je     ec7 <sysEnter_Vector-0x12f139>
 e54:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
 e5b:	2f                   	das    
 e5c:	73 74                	jae    ed2 <sysEnter_Vector-0x12f12e>
 e5e:	72 72                	jb     ed2 <sysEnter_Vector-0x12f12e>
 e60:	65                   	gs
 e61:	70 6c                	jo     ecf <sysEnter_Vector-0x12f131>
 e63:	61                   	popa   
 e64:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
 e67:	63 00                	arpl   WORD PTR [eax],ax
 e69:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e6a:	65                   	gs
 e6b:	65                   	gs
 e6c:	64                   	fs
 e6d:	6c                   	ins    BYTE PTR es:[edi],dx
 e6e:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 e72:	73 6f                	jae    ee3 <sysEnter_Vector-0x12f11d>
 e74:	66                   	data16
 e75:	66                   	data16
 e76:	73 65                	jae    edd <sysEnter_Vector-0x12f123>
 e78:	74 00                	je     e7a <sysEnter_Vector-0x12f186>
 e7a:	73 74                	jae    ef0 <sysEnter_Vector-0x12f110>
 e7c:	72 72                	jb     ef0 <sysEnter_Vector-0x12f110>
 e7e:	65                   	gs
 e7f:	70 6c                	jo     eed <sysEnter_Vector-0x12f113>
 e81:	61                   	popa   
 e82:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 e85:	70 61                	jo     ee8 <sysEnter_Vector-0x12f118>
 e87:	74 74                	je     efd <sysEnter_Vector-0x12f103>
 e89:	65                   	gs
 e8a:	72 6e                	jb     efa <sysEnter_Vector-0x12f106>
 e8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e8f:	72 72                	jb     f03 <sysEnter_Vector-0x12f0fd>
 e91:	65                   	gs
 e92:	70 6c                	jo     f00 <sysEnter_Vector-0x12f100>
 e94:	61                   	popa   
 e95:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
 e98:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 e9b:	74 53                	je     ef0 <sysEnter_Vector-0x12f110>
 e9d:	74 72                	je     f11 <sysEnter_Vector-0x12f0ef>
 e9f:	69 6e 67 00 73 74 72 	imul   ebp,DWORD PTR [esi+0x67],0x72747300
 ea6:	73 74                	jae    f1c <sysEnter_Vector-0x12f0e4>
 ea8:	72 49                	jb     ef3 <sysEnter_Vector-0x12f10d>
 eaa:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 ead:	72 6e                	jb     f1d <sysEnter_Vector-0x12f0e3>
 eaf:	73 74                	jae    f25 <sysEnter_Vector-0x12f0db>
 eb1:	72 49                	jb     efc <sysEnter_Vector-0x12f104>
 eb3:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 eb6:	63 2f                	arpl   WORD PTR [edi],bp
 eb8:	73 74                	jae    f2e <sysEnter_Vector-0x12f0d2>
 eba:	72 73                	jb     f2f <sysEnter_Vector-0x12f0d1>
 ebc:	74 72                	je     f30 <sysEnter_Vector-0x12f0d0>
 ebe:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ec1:	72 63                	jb     f26 <sysEnter_Vector-0x12f0da>
 ec3:	73 69                	jae    f2e <sysEnter_Vector-0x12f0d2>
 ec5:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 ec9:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 ecc:	72 69                	jb     f37 <sysEnter_Vector-0x12f0c9>
 ece:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ecf:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 ed3:	72 73                	jb     f48 <sysEnter_Vector-0x12f0b8>
 ed5:	74 72                	je     f49 <sysEnter_Vector-0x12f0b7>
 ed7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 eda:	63 2f                	arpl   WORD PTR [edi],bp
 edc:	74 69                	je     f47 <sysEnter_Vector-0x12f0b9>
 ede:	6d                   	ins    DWORD PTR es:[edi],dx
 edf:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 ee3:	6c                   	ins    BYTE PTR es:[edi],dx
 ee4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ee5:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ee8:	74 69                	je     f53 <sysEnter_Vector-0x12f0ad>
 eea:	6d                   	ins    DWORD PTR es:[edi],dx
 eeb:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 ef0:	68 6f 75 72 00       	push   0x72756f
 ef5:	67                   	addr16
 ef6:	65                   	gs
 ef7:	74 74                	je     f6d <sysEnter_Vector-0x12f093>
 ef9:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 f00:	61                   	popa   
 f01:	79 6c                	jns    f6f <sysEnter_Vector-0x12f091>
 f03:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 f0a:	7a 6e                	jp     f7a <sysEnter_Vector-0x12f086>
 f0c:	61                   	popa   
 f0d:	6d                   	ins    DWORD PTR es:[edi],dx
 f0e:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 f12:	74 69                	je     f7d <sysEnter_Vector-0x12f083>
 f14:	6d                   	ins    DWORD PTR es:[edi],dx
 f15:	65                   	gs
 f16:	5f                   	pop    edi
 f17:	72 00                	jb     f19 <sysEnter_Vector-0x12f0e7>
 f19:	74 69                	je     f84 <sysEnter_Vector-0x12f07c>
 f1b:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 f1e:	54                   	push   esp
 f1f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f20:	57                   	push   edi
 f21:	61                   	popa   
 f22:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 f29:	6f 
 f2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 f2b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f2f:	79 65                	jns    f96 <sysEnter_Vector-0x12f06a>
 f31:	61                   	popa   
 f32:	72 00                	jb     f34 <sysEnter_Vector-0x12f0cc>
 f34:	6d                   	ins    DWORD PTR es:[edi],dx
 f35:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f36:	6e                   	outs   dx,BYTE PTR ds:[esi]
 f37:	74 68                	je     fa1 <sysEnter_Vector-0x12f05f>
 f39:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 f3c:	74 74                	je     fb2 <sysEnter_Vector-0x12f04e>
 f3e:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 f45:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 f4c:	61                   	popa   
 f4d:	79 6e                	jns    fbd <sysEnter_Vector-0x12f043>
 f4f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f50:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 f53:	74 69                	je     fbe <sysEnter_Vector-0x12f042>
 f55:	6d                   	ins    DWORD PTR es:[edi],dx
 f56:	65                   	gs
 f57:	5f                   	pop    edi
 f58:	72 49                	jb     fa3 <sysEnter_Vector-0x12f05d>
 f5a:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f5e:	6d                   	ins    DWORD PTR es:[edi],dx
 f5f:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 f66:	64                   	fs
 f67:	61                   	popa   
 f68:	79 00                	jns    f6a <sysEnter_Vector-0x12f096>
 f6a:	6c                   	ins    BYTE PTR es:[edi],dx
 f6b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f6c:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 f6f:	54                   	push   esp
 f70:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 f77:	75 66                	jne    fdf <sysEnter_Vector-0x12f021>
 f79:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 f7d:	65                   	gs
 f7e:	5f                   	pop    edi
 f7f:	74 00                	je     f81 <sysEnter_Vector-0x12f07f>
 f81:	6c                   	ins    BYTE PTR es:[edi],dx
 f82:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f83:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 f86:	74 69                	je     ff1 <sysEnter_Vector-0x12f00f>
 f88:	6d                   	ins    DWORD PTR es:[edi],dx
 f89:	65                   	gs
 f8a:	5f                   	pop    edi
 f8b:	72 00                	jb     f8d <sysEnter_Vector-0x12f073>
 f8d:	64                   	fs
 f8e:	61                   	popa   
 f8f:	79 63                	jns    ff4 <sysEnter_Vector-0x12f00c>
 f91:	6c                   	ins    BYTE PTR es:[edi],dx
 f92:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f93:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 f96:	6d                   	ins    DWORD PTR es:[edi],dx
 f97:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 f9c:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 fa0:	67 6d                	ins    DWORD PTR es:[di],dx
 fa2:	74 6f                	je     1013 <sysEnter_Vector-0x12efed>
 fa4:	66                   	data16
 fa5:	66                   	data16
 fa6:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 faa:	77 64                	ja     1010 <sysEnter_Vector-0x12eff0>
 fac:	61                   	popa   
 fad:	79 00                	jns    faf <sysEnter_Vector-0x12f051>
 faf:	5f                   	pop    edi
 fb0:	79 74                	jns    1026 <sysEnter_Vector-0x12efda>
 fb2:	61                   	popa   
 fb3:	62 00                	bound  eax,QWORD PTR [eax]
 fb5:	74 6d                	je     1024 <sysEnter_Vector-0x12efdc>
 fb7:	5f                   	pop    edi
 fb8:	6d                   	ins    DWORD PTR es:[edi],dx
 fb9:	64                   	fs
 fba:	61                   	popa   
 fbb:	79 00                	jns    fbd <sysEnter_Vector-0x12f043>
 fbd:	74 6d                	je     102c <sysEnter_Vector-0x12efd4>
 fbf:	5f                   	pop    edi
 fc0:	73 65                	jae    1027 <sysEnter_Vector-0x12efd9>
 fc2:	63 00                	arpl   WORD PTR [eax],ax
 fc4:	74 6d                	je     1033 <sysEnter_Vector-0x12efcd>
 fc6:	5f                   	pop    edi
 fc7:	7a 6f                	jp     1038 <sysEnter_Vector-0x12efc8>
 fc9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 fca:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 fcf:	65                   	gs
 fd0:	72 00                	jb     fd2 <sysEnter_Vector-0x12f02e>
 fd2:	6c                   	ins    BYTE PTR es:[edi],dx
 fd3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 fd4:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 fd7:	74 69                	je     1042 <sysEnter_Vector-0x12efbe>
 fd9:	6d                   	ins    DWORD PTR es:[edi],dx
 fda:	65                   	gs
 fdb:	5f                   	pop    edi
 fdc:	72 49                	jb     1027 <sysEnter_Vector-0x12efd9>
 fde:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 fe1:	73 74                	jae    1057 <sysEnter_Vector-0x12efa9>
 fe3:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 fe6:	73 00                	jae    fe8 <sysEnter_Vector-0x12f018>
 fe8:	72 65                	jb     104f <sysEnter_Vector-0x12efb1>
 fea:	73 75                	jae    1061 <sysEnter_Vector-0x12ef9f>
 fec:	6c                   	ins    BYTE PTR es:[edi],dx
 fed:	74 00                	je     fef <sysEnter_Vector-0x12f011>
 fef:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ff0:	76 65                	jbe    1057 <sysEnter_Vector-0x12efa9>
 ff2:	72 66                	jb     105a <sysEnter_Vector-0x12efa6>
 ff4:	6c                   	ins    BYTE PTR es:[edi],dx
 ff5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ff6:	77 00                	ja     ff8 <sysEnter_Vector-0x12f008>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20 0b                	and    BYTE PTR [ebx],cl
   2:	00 00                	add    BYTE PTR [eax],al
   4:	5a                   	pop    edx
   5:	0b 00                	or     eax,DWORD PTR [eax]
   7:	00 5f 0b             	add    BYTE PTR [edi+0xb],bl
   a:	00 00                	add    BYTE PTR [eax],al
   c:	93                   	xchg   ebx,eax
   d:	0b 00                	or     eax,DWORD PTR [eax]
	...
