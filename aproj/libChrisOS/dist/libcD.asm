
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 ea 24 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000008:	05 74 3b 00 00       	add    eax,0x3b74
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 b2 24 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000040:	05 3c 3b 00 00       	add    eax,0x3b3c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 78 24 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
3000007a:	05 02 3b 00 00       	add    eax,0x3b02
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 23 24 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300000cf:	05 ad 3a 00 00       	add    eax,0x3aad
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 2a 24 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
30000126:	81 c3 56 3a 00 00    	add    ebx,0x3a56
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 3c 00 00 00    	mov    eax,DWORD PTR [ebx+0x3c]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 3c 00 00 00    	mov    DWORD PTR [ebx+0x3c],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 3c 00 00 00    	mov    eax,DWORD PTR [ebx+0x3c]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 3c 00 00 00    	mov    eax,DWORD PTR [ebx+0x3c]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 3c 00 00 00    	mov    DWORD PTR [ebx+0x3c],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:11

#include "ascii.h"
#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 32 23 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300001c0:	05 bc 39 00 00       	add    eax,0x39bc
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 c4 11 00 00       	call   3000139d <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:18 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:20
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:23

 void itoaI(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 bb 22 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000237:	05 45 39 00 00       	add    eax,0x3945
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:28
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:36
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:40

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	83 ec 10             	sub    esp,0x10
300002ec:	e8 01 22 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300002f1:	05 8b 38 00 00       	add    eax,0x388b
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
    int res = 0; // Initialize result
300002f6:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300002fd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
30000304:	eb 28                	jmp    3000032e <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 3)
        res = res*10 + str[i] - '0';
30000306:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000309:	89 d0                	mov    eax,edx
3000030b:	c1 e0 02             	shl    eax,0x2
3000030e:	01 d0                	add    eax,edx
30000310:	01 c0                	add    eax,eax
30000312:	89 c1                	mov    ecx,eax
30000314:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30000317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000031a:	01 d0                	add    eax,edx
3000031c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000031f:	0f be c0             	movsx  eax,al
30000322:	01 c8                	add    eax,ecx
30000324:	83 e8 30             	sub    eax,0x30
30000327:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
3000032a:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
3000032e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30000331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000334:	01 d0                	add    eax,edx
30000336:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000339:	84 c0                	test   al,al
3000033b:	75 c9                	jne    30000306 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
3000033d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
30000340:	c9                   	leave  
30000341:	c3                   	ret    
30000342:	66 90                	xchg   ax,ax

30000344 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
30000344:	55                   	push   ebp
30000345:	89 e5                	mov    ebp,esp
30000347:	53                   	push   ebx
30000348:	e8 a5 21 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
3000034d:	05 2f 38 00 00       	add    eax,0x382f
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
30000352:	b8 04 00 00 00       	mov    eax,0x4
30000357:	bb 01 00 00 00       	mov    ebx,0x1
3000035c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000035f:	89 d1                	mov    ecx,edx
30000361:	e8 fc ff ff ff       	call   30000362 <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
30000366:	90                   	nop
30000367:	5b                   	pop    ebx
30000368:	5d                   	pop    ebp
30000369:	c3                   	ret    

3000036a <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
3000036a:	55                   	push   ebp
3000036b:	89 e5                	mov    ebp,esp
3000036d:	53                   	push   ebx
3000036e:	83 ec 14             	sub    esp,0x14
30000371:	e8 7c 21 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000376:	05 06 38 00 00       	add    eax,0x3806
3000037b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000037e:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
30000381:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
30000387:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
3000038b:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
3000038e:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
30000392:	b8 04 00 00 00       	mov    eax,0x4
30000397:	bb 01 00 00 00       	mov    ebx,0x1
3000039c:	8d 55 fa             	lea    edx,[ebp-0x6]
3000039f:	89 d1                	mov    ecx,edx
300003a1:	e8 fc ff ff ff       	call   300003a2 <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
300003a6:	90                   	nop
300003a7:	83 c4 14             	add    esp,0x14
300003aa:	5b                   	pop    ebx
300003ab:	5d                   	pop    ebp
300003ac:	c3                   	ret    

300003ad <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
300003ad:	55                   	push   ebp
300003ae:	89 e5                	mov    ebp,esp
300003b0:	53                   	push   ebx
300003b1:	83 ec 10             	sub    esp,0x10
300003b4:	e8 39 21 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300003b9:	05 c3 37 00 00       	add    eax,0x37c3
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300003be:	b8 03 00 00 00       	mov    eax,0x3
300003c3:	ba 00 00 00 00       	mov    edx,0x0
300003c8:	89 d3                	mov    ebx,edx
300003ca:	e8 fc ff ff ff       	call   300003cb <getc+0x1e>
300003cf:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300003d2:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300003d6:	83 c4 10             	add    esp,0x10
300003d9:	5b                   	pop    ebx
300003da:	5d                   	pop    ebp
300003db:	c3                   	ret    

300003dc <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300003dc:	55                   	push   ebp
300003dd:	89 e5                	mov    ebp,esp
300003df:	53                   	push   ebx
300003e0:	83 ec 14             	sub    esp,0x14
300003e3:	e8 0a 21 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300003e8:	05 94 37 00 00       	add    eax,0x3794
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
300003ed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
300003f4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
300003f8:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
300003fc:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
30000400:	74 19                	je     3000041b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
30000402:	83 ec 08             	sub    esp,0x8
30000405:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30000408:	8d 90 04 fb ff ff    	lea    edx,[eax-0x4fc]
3000040e:	52                   	push   edx
3000040f:	89 c3                	mov    ebx,eax
30000411:	e8 31 02 00 00       	call   30000647 <printI>
30000416:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000419:	eb fe                	jmp    30000419 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
3000041b:	b8 03 00 00 00       	mov    eax,0x3
30000420:	ba 00 00 00 00       	mov    edx,0x0
30000425:	89 d3                	mov    ebx,edx
30000427:	e8 fc ff ff ff       	call   30000428 <gets+0x4c>
3000042c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
3000042f:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
30000433:	75 17                	jne    3000044c <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
30000435:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000439:	7e 11                	jle    3000044c <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
3000043b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000043e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000441:	01 d0                	add    eax,edx
30000443:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
30000446:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
3000044a:	eb 43                	jmp    3000048f <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
3000044c:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
30000450:	74 33                	je     30000485 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
30000452:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000456:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000459:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000045c:	8d 50 01             	lea    edx,[eax+0x1]
3000045f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000462:	89 c2                	mov    edx,eax
30000464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000467:	01 c2                	add    edx,eax
30000469:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
3000046d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
3000046f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000472:	83 c0 01             	add    eax,0x1
30000475:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000478:	7d 06                	jge    30000480 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
3000047a:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
3000047e:	75 9b                	jne    3000041b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
30000480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000483:	eb 0c                	jmp    30000491 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
30000485:	b8 02 03 00 00       	mov    eax,0x302
3000048a:	e8 fc ff ff ff       	call   3000048b <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
3000048f:	eb 8a                	jmp    3000041b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
30000491:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000494:	c9                   	leave  
30000495:	c3                   	ret    
30000496:	66 90                	xchg   ax,ax

30000498 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:16

extern void sysEnter_Vector();
bool libcInitialized = false;

int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
30000498:	55                   	push   ebp
30000499:	89 e5                	mov    ebp,esp
3000049b:	53                   	push   ebx
3000049c:	83 ec 10             	sub    esp,0x10
3000049f:	e8 4e 20 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300004a4:	05 d8 36 00 00       	add    eax,0x36d8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
    int retVal=0;
300004a9:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    SYSCALL4(callnum, param1, param2, param3, retVal);
300004b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300004b3:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300004b6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300004b9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300004bc:	e8 fc ff ff ff       	call   300004bd <do_syscall4+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    return retVal;
300004c1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
}
300004c4:	83 c4 10             	add    esp,0x10
300004c7:	5b                   	pop    ebx
300004c8:	5d                   	pop    ebp
300004c9:	c3                   	ret    

300004ca <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:23

int do_syscall3(int callnum, uint32_t param1, uint32_t param2)
{
300004ca:	55                   	push   ebp
300004cb:	89 e5                	mov    ebp,esp
300004cd:	53                   	push   ebx
300004ce:	83 ec 10             	sub    esp,0x10
300004d1:	e8 1c 20 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300004d6:	05 a6 36 00 00       	add    eax,0x36a6
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24
    int retVal=0;
300004db:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    SYSCALL3(callnum, param1, param2, retVal);
300004e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300004e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300004e8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300004eb:	89 d3                	mov    ebx,edx
300004ed:	e8 fc ff ff ff       	call   300004ee <do_syscall3+0x24>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    return retVal;
300004f2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
}
300004f5:	83 c4 10             	add    esp,0x10
300004f8:	5b                   	pop    ebx
300004f9:	5d                   	pop    ebp
300004fa:	c3                   	ret    

300004fb <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:30

int do_syscall2(int callnum, uint32_t param1)
{
300004fb:	55                   	push   ebp
300004fc:	89 e5                	mov    ebp,esp
300004fe:	53                   	push   ebx
300004ff:	83 ec 10             	sub    esp,0x10
30000502:	e8 eb 1f 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000507:	05 75 36 00 00       	add    eax,0x3675
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31
    int retVal=0;
3000050c:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    SYSCALL2(callnum, param1, retVal);
30000513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000516:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000519:	89 d3                	mov    ebx,edx
3000051b:	e8 fc ff ff ff       	call   3000051c <do_syscall2+0x21>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    return retVal;
30000520:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
}
30000523:	83 c4 10             	add    esp,0x10
30000526:	5b                   	pop    ebx
30000527:	5d                   	pop    ebp
30000528:	c3                   	ret    

30000529 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:37

int do_syscall1(int callnum)
{
30000529:	55                   	push   ebp
3000052a:	89 e5                	mov    ebp,esp
3000052c:	83 ec 10             	sub    esp,0x10
3000052f:	e8 be 1f 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000534:	05 48 36 00 00       	add    eax,0x3648
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38
    int retVal=0;
30000539:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    SYSCALL1(callnum, retVal);
30000540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000543:	e8 fc ff ff ff       	call   30000544 <do_syscall1+0x1b>
30000548:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    return retVal;
3000054b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
}
3000054e:	c9                   	leave  
3000054f:	c3                   	ret    

30000550 <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:44

VISIBLE void __attribute__((constructor)) libc_init(void)
{
30000550:	55                   	push   ebp
30000551:	89 e5                	mov    ebp,esp
30000553:	53                   	push   ebx
30000554:	83 ec 04             	sub    esp,0x4
30000557:	e8 f4 1f 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
3000055c:	81 c3 20 36 00 00    	add    ebx,0x3620
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45
    printdI(DEBUG_LIBC,"***libc_init called\n***");
30000562:	83 ec 08             	sub    esp,0x8
30000565:	8d 83 20 fb ff ff    	lea    eax,[ebx-0x4e0]
3000056b:	50                   	push   eax
3000056c:	68 00 00 00 02       	push   0x2000000
30000571:	e8 05 01 00 00       	call   3000067b <printdI>
30000576:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    if (!libcInitialized)
30000579:	0f b6 83 40 00 00 00 	movzx  eax,BYTE PTR [ebx+0x40]
30000580:	83 f0 01             	xor    eax,0x1
30000583:	84 c0                	test   al,al
30000585:	74 55                	je     300005dc <libc_init+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    {
        initmalloc();
30000587:	e8 7c 02 00 00       	call   30000808 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
        libcTZ=-4;
3000058c:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
30000592:	c7 00 fc ff ff ff    	mov    DWORD PTR [eax],0xfffffffc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
        do_syscall1(SYSCALL_INVALID);
30000598:	83 ec 0c             	sub    esp,0xc
3000059b:	6a 00                	push   0x0
3000059d:	e8 87 ff ff ff       	call   30000529 <do_syscall1>
300005a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:51
        do_syscall2(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
300005a5:	8d 83 78 ca ff ff    	lea    eax,[ebx-0x3588]
300005ab:	83 ec 08             	sub    esp,0x8
300005ae:	50                   	push   eax
300005af:	68 63 01 00 00       	push   0x163
300005b4:	e8 42 ff ff ff       	call   300004fb <do_syscall2>
300005b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52
        libcInitialized = true;
300005bc:	c6 83 40 00 00 00 01 	mov    BYTE PTR [ebx+0x40],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
        printdI(DEBUG_LIBC,"***libc_init completed\n");
300005c3:	83 ec 08             	sub    esp,0x8
300005c6:	8d 83 38 fb ff ff    	lea    eax,[ebx-0x4c8]
300005cc:	50                   	push   eax
300005cd:	68 00 00 00 02       	push   0x2000000
300005d2:	e8 a4 00 00 00       	call   3000067b <printdI>
300005d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    }
    else
        printI("libc_init called previously, exiting\n");
}
300005da:	eb 12                	jmp    300005ee <libc_init+0x9e>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
        do_syscall2(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
300005dc:	83 ec 0c             	sub    esp,0xc
300005df:	8d 83 50 fb ff ff    	lea    eax,[ebx-0x4b0]
300005e5:	50                   	push   eax
300005e6:	e8 5c 00 00 00       	call   30000647 <printI>
300005eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
}
300005ee:	90                   	nop
300005ef:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300005f2:	c9                   	leave  
300005f3:	c3                   	ret    

300005f4 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60

void __attribute__((destructor)) libc_cleanup(void)
{
300005f4:	55                   	push   ebp
300005f5:	89 e5                	mov    ebp,esp
300005f7:	53                   	push   ebx
300005f8:	83 ec 04             	sub    esp,0x4
300005fb:	e8 f2 1e 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000600:	05 7c 35 00 00       	add    eax,0x357c
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
    malloc_cleanup();
30000605:	89 c3                	mov    ebx,eax
30000607:	e8 fc 04 00 00       	call   30000b08 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
}
3000060c:	90                   	nop
3000060d:	83 c4 04             	add    esp,0x4
30000610:	5b                   	pop    ebx
30000611:	5d                   	pop    ebp
30000612:	c3                   	ret    

30000613 <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65

VISIBLE int print(const char *format, ...)
{
30000613:	55                   	push   ebp
30000614:	89 e5                	mov    ebp,esp
30000616:	83 ec 10             	sub    esp,0x10
30000619:	e8 d4 1e 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
3000061e:	05 5e 35 00 00       	add    eax,0x355e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
    va_list args;
    va_start( args, format );
30000623:	8d 45 0c             	lea    eax,[ebp+0xc]
30000626:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:68
    do_syscall3(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000629:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000062c:	89 c2                	mov    edx,eax
3000062e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000631:	52                   	push   edx
30000632:	50                   	push   eax
30000633:	68 00 03 00 00       	push   0x300
30000638:	e8 8d fe ff ff       	call   300004ca <do_syscall3>
3000063d:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
    return 0;
30000640:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
30000645:	c9                   	leave  
30000646:	c3                   	ret    

30000647 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

int printI(const char *format, ...)
{
30000647:	55                   	push   ebp
30000648:	89 e5                	mov    ebp,esp
3000064a:	83 ec 10             	sub    esp,0x10
3000064d:	e8 a0 1e 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000652:	05 2a 35 00 00       	add    eax,0x352a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    va_list args;
    va_start( args, format );
30000657:	8d 45 0c             	lea    eax,[ebp+0xc]
3000065a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
    do_syscall3(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
3000065d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000660:	89 c2                	mov    edx,eax
30000662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000665:	52                   	push   edx
30000666:	50                   	push   eax
30000667:	68 00 03 00 00       	push   0x300
3000066c:	e8 59 fe ff ff       	call   300004ca <do_syscall3>
30000671:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    return 0;
30000674:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
}
30000679:	c9                   	leave  
3000067a:	c3                   	ret    

3000067b <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81

int printdI(uint32_t DebugLevel, const char *format, ...)
{
3000067b:	55                   	push   ebp
3000067c:	89 e5                	mov    ebp,esp
3000067e:	53                   	push   ebx
3000067f:	83 ec 10             	sub    esp,0x10
30000682:	e8 6b 1e 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000687:	05 f5 34 00 00       	add    eax,0x34f5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    va_list args;
    va_start( args, format );
3000068c:	8d 45 10             	lea    eax,[ebp+0x10]
3000068f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    
    SYSCALL4(SYSCALL_PRINTD, DebugLevel, format, args, NULL);
30000692:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30000695:	b8 01 03 00 00       	mov    eax,0x301
3000069a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
3000069d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006a0:	e8 fc ff ff ff       	call   300006a1 <printdI+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
    return 0;
300006a5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
}
300006aa:	83 c4 10             	add    esp,0x10
300006ad:	5b                   	pop    ebx
300006ae:	5d                   	pop    ebp
300006af:	c3                   	ret    

300006b0 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90

VISIBLE unsigned int sleep (unsigned int __seconds)
{
300006b0:	55                   	push   ebp
300006b1:	89 e5                	mov    ebp,esp
300006b3:	53                   	push   ebx
300006b4:	83 ec 10             	sub    esp,0x10
300006b7:	e8 36 1e 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300006bc:	05 c0 34 00 00       	add    eax,0x34c0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    SLEEP_SECONDS(__seconds)
300006c1:	b8 70 01 00 00       	mov    eax,0x170
300006c6:	e8 fc ff ff ff       	call   300006c7 <sleep+0x17>
300006cb:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
300006ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300006d1:	6b d0 64             	imul   edx,eax,0x64
300006d4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
300006d7:	01 d0                	add    eax,edx
300006d9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300006dc:	b8 66 01 00 00       	mov    eax,0x166
300006e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006e4:	89 d3                	mov    ebx,edx
300006e6:	e8 fc ff ff ff       	call   300006e7 <sleep+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    return 0;
300006eb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
}
300006f0:	83 c4 10             	add    esp,0x10
300006f3:	5b                   	pop    ebx
300006f4:	5d                   	pop    ebp
300006f5:	c3                   	ret    

300006f6 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:96

void stop()
{
300006f6:	55                   	push   ebp
300006f7:	89 e5                	mov    ebp,esp
300006f9:	e8 f4 1d 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300006fe:	05 7e 34 00 00       	add    eax,0x347e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97
    do_syscall1(SYSCALL_STOP);
30000703:	68 68 01 00 00       	push   0x168
30000708:	e8 1c fe ff ff       	call   30000529 <do_syscall1>
3000070d:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98
}
30000710:	90                   	nop
30000711:	c9                   	leave  
30000712:	c3                   	ret    

30000713 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000713:	55                   	push   ebp
30000714:	89 e5                	mov    ebp,esp
30000716:	e8 d7 1d 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
3000071b:	05 61 34 00 00       	add    eax,0x3461
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    do_syscall4(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000720:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000723:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000729:	51                   	push   ecx
3000072a:	52                   	push   edx
3000072b:	50                   	push   eax
3000072c:	68 67 01 00 00       	push   0x167
30000731:	e8 62 fd ff ff       	call   30000498 <do_syscall4>
30000736:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
}
30000739:	90                   	nop
3000073a:	c9                   	leave  
3000073b:	c3                   	ret    

3000073c <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106

VISIBLE int exec(char* path, int argc, char** argv)
{
3000073c:	55                   	push   ebp
3000073d:	89 e5                	mov    ebp,esp
3000073f:	53                   	push   ebx
30000740:	83 ec 10             	sub    esp,0x10
30000743:	e8 aa 1d 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000748:	05 34 34 00 00       	add    eax,0x3434
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    int pid=0;
3000074d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    //Using the syscall is breaking the stack
//    SYSCALL4(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000754:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000757:	8d 80 76 fb ff ff    	lea    eax,[eax-0x48a]
3000075d:	50                   	push   eax
3000075e:	68 00 00 00 02       	push   0x2000000
30000763:	e8 13 ff ff ff       	call   3000067b <printdI>
30000768:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    __asm__("push ds\nint 0x80\npop ds\n"
3000076b:	b8 59 00 00 00       	mov    eax,0x59
30000770:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000773:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000776:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
30000779:	1e                   	push   ds
3000077a:	cd 80                	int    0x80
3000077c:	1f                   	pop    ds
3000077d:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:114
            :"=a" (pid)
            :"a" (0x59),"b" (path),"c" (argc),"d" (argv));
    return pid;
30000780:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115
}
30000783:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000786:	c9                   	leave  
30000787:	c3                   	ret    

30000788 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:118

VISIBLE void waitpid(uint32_t pid)
{
30000788:	55                   	push   ebp
30000789:	89 e5                	mov    ebp,esp
3000078b:	e8 62 1d 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000790:	05 ec 33 00 00       	add    eax,0x33ec
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    do_syscall2(SYSCALL_WAITFORPID,pid);
30000795:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000798:	6a 61                	push   0x61
3000079a:	e8 5c fd ff ff       	call   300004fb <do_syscall2>
3000079f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
}
300007a2:	90                   	nop
300007a3:	c9                   	leave  
300007a4:	c3                   	ret    

300007a5 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:123

VISIBLE struct tm* gettime()
{
300007a5:	55                   	push   ebp
300007a6:	89 e5                	mov    ebp,esp
300007a8:	53                   	push   ebx
300007a9:	83 ec 34             	sub    esp,0x34
300007ac:	e8 a3 1d 00 00       	call   30002554 <__x86.get_pc_thunk.dx>
300007b1:	81 c2 cb 33 00 00    	add    edx,0x33cb
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
    uint32_t ticks=0;
300007b7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    struct tm theTime;
    
    GET_TICKS(ticks);
300007be:	b8 70 01 00 00       	mov    eax,0x170
300007c3:	e8 fc ff ff ff       	call   300007c4 <gettime+0x1f>
300007c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:128
    return gmtime_r((time_t*)&ticks,&theTime);
300007cb:	83 ec 08             	sub    esp,0x8
300007ce:	8d 45 c8             	lea    eax,[ebp-0x38]
300007d1:	50                   	push   eax
300007d2:	8d 45 f4             	lea    eax,[ebp-0xc]
300007d5:	50                   	push   eax
300007d6:	89 d3                	mov    ebx,edx
300007d8:	e8 53 1d 00 00       	call   30002530 <__x86.get_pc_thunk.ax+0x3e>
300007dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
}
300007e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300007e3:	c9                   	leave  
300007e4:	c3                   	ret    

300007e5 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132

VISIBLE char* getcwd(char* buf, size_t size)
{
300007e5:	55                   	push   ebp
300007e6:	89 e5                	mov    ebp,esp
300007e8:	e8 05 1d 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300007ed:	05 8f 33 00 00       	add    eax,0x338f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133
    return (char*)do_syscall3(SYSCALL_GETCWD,(uint32_t)buf,size);
300007f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300007f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300007f8:	50                   	push   eax
300007f9:	6a 4f                	push   0x4f
300007fb:	e8 ca fc ff ff       	call   300004ca <do_syscall3>
30000800:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
}
30000803:	c9                   	leave  
30000804:	c3                   	ret    
30000805:	66 90                	xchg   ax,ax
30000807:	90                   	nop

30000808 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30000808:	55                   	push   ebp
30000809:	89 e5                	mov    ebp,esp
3000080b:	53                   	push   ebx
3000080c:	83 ec 04             	sub    esp,0x4
3000080f:	e8 3c 1d 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
30000814:	81 c3 68 33 00 00    	add    ebx,0x3368
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
3000081a:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000820:	8b 00                	mov    eax,DWORD PTR [eax]
30000822:	50                   	push   eax
30000823:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000829:	50                   	push   eax
3000082a:	8d 83 8c fb ff ff    	lea    eax,[ebx-0x474]
30000830:	50                   	push   eax
30000831:	68 00 00 00 01       	push   0x1000000
30000836:	e8 40 fe ff ff       	call   3000067b <printdI>
3000083b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
3000083e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000844:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
3000084a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000850:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
30000856:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
3000085c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
}
30000862:	90                   	nop
30000863:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000866:	c9                   	leave  
30000867:	c3                   	ret    

30000868 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:21

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
30000868:	55                   	push   ebp
30000869:	89 e5                	mov    ebp,esp
3000086b:	83 ec 10             	sub    esp,0x10
3000086e:	e8 7f 1c 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000873:	05 09 33 00 00       	add    eax,0x3309
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
30000878:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000087b:	83 c2 20             	add    edx,0x20
3000087e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30000881:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
30000887:	8b 0a                	mov    ecx,DWORD PTR [edx]
30000889:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
3000088c:	01 d1                	add    ecx,edx
3000088e:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
30000894:	8b 12                	mov    edx,DWORD PTR [edx]
30000896:	39 d1                	cmp    ecx,edx
30000898:	76 4e                	jbe    300008e8 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:29
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
3000089a:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
300008a0:	8b 12                	mov    edx,DWORD PTR [edx]
300008a2:	8b 80 f0 ff ff ff    	mov    eax,DWORD PTR [eax-0x10]
300008a8:	8b 00                	mov    eax,DWORD PTR [eax]
300008aa:	29 c2                	sub    edx,eax
300008ac:	89 d0                	mov    eax,edx
300008ae:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30
        if (newSize== 0 || newSize%PAGE_SIZE)
300008b1:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
300008b5:	74 0c                	je     300008c3 <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30 (discriminator 1)
300008b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300008ba:	25 ff 0f 00 00       	and    eax,0xfff
300008bf:	85 c0                	test   eax,eax
300008c1:	74 10                	je     300008d3 <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
300008c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300008c6:	25 00 f0 ff ff       	and    eax,0xfffff000
300008cb:	05 00 10 00 00       	add    eax,0x1000
300008d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:35
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
300008d3:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
300008da:	77 07                	ja     300008e3 <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
            return ALLOC_REQUEST_SIZE;
300008dc:	b8 00 20 03 00       	mov    eax,0x32000
300008e1:	eb 0a                	jmp    300008ed <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
        else
            return newSize;
300008e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300008e6:	eb 05                	jmp    300008ed <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:41
    }
    else
        return 0;
300008e8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
}
300008ed:	c9                   	leave  
300008ee:	c3                   	ret    

300008ef <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
300008ef:	55                   	push   ebp
300008f0:	89 e5                	mov    ebp,esp
300008f2:	56                   	push   esi
300008f3:	53                   	push   ebx
300008f4:	83 ec 20             	sub    esp,0x20
300008f7:	e8 5c 1c 00 00       	call   30002558 <__x86.get_pc_thunk.si>
300008fc:	81 c6 80 32 00 00    	add    esi,0x3280
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
30000902:	83 ec 04             	sub    esp,0x4
30000905:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000908:	8d 86 af fb ff ff    	lea    eax,[esi-0x451]
3000090e:	50                   	push   eax
3000090f:	68 00 00 00 01       	push   0x1000000
30000914:	89 f3                	mov    ebx,esi
30000916:	e8 60 fd ff ff       	call   3000067b <printdI>
3000091b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53
    needed = newHeapRequiredToFulfillRequest(size);
3000091e:	83 ec 0c             	sub    esp,0xc
30000921:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000924:	e8 3f ff ff ff       	call   30000868 <newHeapRequiredToFulfillRequest>
30000929:	83 c4 10             	add    esp,0x10
3000092c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:54
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
3000092f:	83 ec 04             	sub    esp,0x4
30000932:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30000935:	8d 86 bf fb ff ff    	lea    eax,[esi-0x441]
3000093b:	50                   	push   eax
3000093c:	68 00 00 00 01       	push   0x1000000
30000941:	89 f3                	mov    ebx,esi
30000943:	e8 33 fd ff ff       	call   3000067b <printdI>
30000948:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    if (needed!=0)      //New heap required
3000094b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
3000094f:	0f 84 ad 00 00 00    	je     30000a02 <malloc+0x113>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:57
    {
        SYSCALL2(SYSCALL_ALLOC, needed, allocatedPtr);
30000955:	b8 65 01 00 00       	mov    eax,0x165
3000095a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000095d:	89 d3                	mov    ebx,edx
3000095f:	e8 fc ff ff ff       	call   30000960 <malloc+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
30000964:	8b 86 f0 ff ff ff    	mov    eax,DWORD PTR [esi-0x10]
3000096a:	8b 00                	mov    eax,DWORD PTR [eax]
3000096c:	83 ec 04             	sub    esp,0x4
3000096f:	50                   	push   eax
30000970:	8d 86 db fb ff ff    	lea    eax,[esi-0x425]
30000976:	50                   	push   eax
30000977:	68 00 00 00 01       	push   0x1000000
3000097c:	89 f3                	mov    ebx,esi
3000097e:	e8 f8 fc ff ff       	call   3000067b <printdI>
30000983:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:60
        heapEnd=allocatedPtr+needed;
30000986:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000989:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000098c:	01 c2                	add    edx,eax
3000098e:	8b 86 f0 ff ff ff    	mov    eax,DWORD PTR [esi-0x10]
30000994:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
30000996:	8b 86 f0 ff ff ff    	mov    eax,DWORD PTR [esi-0x10]
3000099c:	8b 00                	mov    eax,DWORD PTR [eax]
3000099e:	83 ec 0c             	sub    esp,0xc
300009a1:	50                   	push   eax
300009a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
300009a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
300009a8:	8d 86 f8 fb ff ff    	lea    eax,[esi-0x408]
300009ae:	50                   	push   eax
300009af:	68 00 00 00 01       	push   0x1000000
300009b4:	89 f3                	mov    ebx,esi
300009b6:	e8 c0 fc ff ff       	call   3000067b <printdI>
300009bb:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        if (heapBase==0)    //Hasn't been initialized yet!
300009be:	8b 86 f4 ff ff ff    	mov    eax,DWORD PTR [esi-0xc]
300009c4:	8b 00                	mov    eax,DWORD PTR [eax]
300009c6:	85 c0                	test   eax,eax
300009c8:	75 38                	jne    30000a02 <malloc+0x113>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:64
        {
            heapCurr=allocatedPtr;
300009ca:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
300009d0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300009d3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65
            heapBase=allocatedPtr;
300009d5:	8b 86 f4 ff ff ff    	mov    eax,DWORD PTR [esi-0xc]
300009db:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300009de:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
300009e0:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
300009e6:	8b 00                	mov    eax,DWORD PTR [eax]
300009e8:	83 ec 04             	sub    esp,0x4
300009eb:	50                   	push   eax
300009ec:	8d 86 38 fc ff ff    	lea    eax,[esi-0x3c8]
300009f2:	50                   	push   eax
300009f3:	68 00 00 00 01       	push   0x1000000
300009f8:	89 f3                	mov    ebx,esi
300009fa:	e8 7c fc ff ff       	call   3000067b <printdI>
300009ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
30000a02:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
30000a08:	8b 00                	mov    eax,DWORD PTR [eax]
30000a0a:	83 ec 04             	sub    esp,0x4
30000a0d:	50                   	push   eax
30000a0e:	8d 86 74 fc ff ff    	lea    eax,[esi-0x38c]
30000a14:	50                   	push   eax
30000a15:	68 00 00 00 01       	push   0x1000000
30000a1a:	89 f3                	mov    ebx,esi
30000a1c:	e8 5a fc ff ff       	call   3000067b <printdI>
30000a21:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:70
    heapPtr = (heaprec_t*)heapCurr;
30000a24:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
30000a2a:	8b 00                	mov    eax,DWORD PTR [eax]
30000a2c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    heapPtr->marker=ALLOC_MARKER_VALUE;
30000a2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000a32:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72
    heapPtr->len=size;
30000a38:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000a3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000a3e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    heapPtr->inUse=true;
30000a41:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000a44:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
30000a48:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
30000a4e:	8b 00                	mov    eax,DWORD PTR [eax]
30000a50:	6a 10                	push   0x10
30000a52:	50                   	push   eax
30000a53:	8d 86 9c fc ff ff    	lea    eax,[esi-0x364]
30000a59:	50                   	push   eax
30000a5a:	68 00 00 00 01       	push   0x1000000
30000a5f:	89 f3                	mov    ebx,esi
30000a61:	e8 15 fc ff ff       	call   3000067b <printdI>
30000a66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
30000a69:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
30000a6f:	8b 00                	mov    eax,DWORD PTR [eax]
30000a71:	83 c0 10             	add    eax,0x10
30000a74:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
30000a77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000a7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30000a7d:	8d 50 10             	lea    edx,[eax+0x10]
30000a80:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000a83:	01 d0                	add    eax,edx
30000a85:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
30000a88:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000a8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000a8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
    heapCurr+=size+(sizeof(heaprec_t));
30000a91:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
30000a97:	8b 10                	mov    edx,DWORD PTR [eax]
30000a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000a9c:	01 d0                	add    eax,edx
30000a9e:	8d 50 10             	lea    edx,[eax+0x10]
30000aa1:	8b 86 f8 ff ff ff    	mov    eax,DWORD PTR [esi-0x8]
30000aa7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
30000aa9:	83 ec 04             	sub    esp,0x4
30000aac:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
30000aaf:	8d 86 d4 fc ff ff    	lea    eax,[esi-0x32c]
30000ab5:	50                   	push   eax
30000ab6:	68 00 00 00 01       	push   0x1000000
30000abb:	89 f3                	mov    ebx,esi
30000abd:	e8 b9 fb ff ff       	call   3000067b <printdI>
30000ac2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    return retVal;
30000ac5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
}
30000ac8:	8d 65 f8             	lea    esp,[ebp-0x8]
30000acb:	5b                   	pop    ebx
30000acc:	5e                   	pop    esi
30000acd:	5d                   	pop    ebp
30000ace:	c3                   	ret    

30000acf <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84

__attribute__((visibility("default"))) void free(void* fpointer)
{
30000acf:	55                   	push   ebp
30000ad0:	89 e5                	mov    ebp,esp
30000ad2:	83 ec 10             	sub    esp,0x10
30000ad5:	e8 18 1a 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000ada:	05 a2 30 00 00       	add    eax,0x30a2
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:87
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30000adf:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000ae3:	74 20                	je     30000b05 <free+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30000ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000ae8:	83 e8 10             	sub    eax,0x10
30000aeb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
30000aee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000af1:	8b 00                	mov    eax,DWORD PTR [eax]
30000af3:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
30000af8:	74 02                	je     30000afc <free+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
30000afa:	eb fe                	jmp    30000afa <free+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    }
    mp->inUse=false;
30000afc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000aff:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
30000b03:	eb 01                	jmp    30000b06 <free+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:88
__attribute__((visibility("default"))) void free(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
30000b05:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
30000b06:	c9                   	leave  
30000b07:	c3                   	ret    

30000b08 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102

void malloc_cleanup()
{
30000b08:	55                   	push   ebp
30000b09:	89 e5                	mov    ebp,esp
30000b0b:	53                   	push   ebx
30000b0c:	e8 e1 19 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000b11:	05 6b 30 00 00       	add    eax,0x306b
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:103
    asm("mov eax,0x164\ncall sysEnter_Vector\n"::"b" (heapBase));
30000b16:	8b 80 f4 ff ff ff    	mov    eax,DWORD PTR [eax-0xc]
30000b1c:	8b 00                	mov    eax,DWORD PTR [eax]
30000b1e:	89 c3                	mov    ebx,eax
30000b20:	b8 64 01 00 00       	mov    eax,0x164
30000b25:	e8 fc ff ff ff       	call   30000b26 <malloc_cleanup+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104
30000b2a:	90                   	nop
30000b2b:	5b                   	pop    ebx
30000b2c:	5d                   	pop    ebp
30000b2d:	c3                   	ret    
30000b2e:	66 90                	xchg   ax,ax

30000b30 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
30000b30:	55                   	push   ebp
30000b31:	89 e5                	mov    ebp,esp
30000b33:	83 ec 20             	sub    esp,0x20
30000b36:	e8 b7 19 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000b3b:	05 41 30 00 00       	add    eax,0x3041
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
30000b40:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000b43:	83 e0 03             	and    eax,0x3
30000b46:	85 c0                	test   eax,eax
30000b48:	0f 94 c0             	sete   al
30000b4b:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
30000b4e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000b51:	83 e0 01             	and    eax,0x1
30000b54:	85 c0                	test   eax,eax
30000b56:	0f 94 c0             	sete   al
30000b59:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
30000b5c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
30000b60:	74 7d                	je     30000bdf <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
30000b62:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000b65:	c1 e8 02             	shr    eax,0x2
30000b68:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
30000b6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000b6e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
30000b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b74:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
30000b77:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b7a:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30000b7d:	73 4b                	jae    30000bca <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
30000b7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000b82:	c1 e0 02             	shl    eax,0x2
30000b85:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30000b88:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000b8b:	c1 e0 02             	shl    eax,0x2
30000b8e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30000b91:	eb 12                	jmp    30000ba5 <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
30000b93:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
30000b97:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
30000b9b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b9e:	8b 10                	mov    edx,DWORD PTR [eax]
30000ba0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30000ba3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30000ba5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000ba8:	8d 50 ff             	lea    edx,[eax-0x1]
30000bab:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000bae:	85 c0                	test   eax,eax
30000bb0:	75 e1                	jne    30000b93 <memcpy+0x63>
30000bb2:	eb 23                	jmp    30000bd7 <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30000bb4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30000bb7:	8d 50 04             	lea    edx,[eax+0x4]
30000bba:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30000bbd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000bc0:	8d 4a 04             	lea    ecx,[edx+0x4]
30000bc3:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
30000bc6:	8b 12                	mov    edx,DWORD PTR [edx]
30000bc8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
30000bca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000bcd:	8d 50 ff             	lea    edx,[eax-0x1]
30000bd0:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000bd3:	85 c0                	test   eax,eax
30000bd5:	75 dd                	jne    30000bb4 <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
30000bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bda:	e9 ea 00 00 00       	jmp    30000cc9 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
30000bdf:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
30000be3:	74 79                	je     30000c5e <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
30000be5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000be8:	d1 e8                	shr    eax,1
30000bea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
30000bed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000bf0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
30000bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bf6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
30000bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000bfc:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000bff:	73 4b                	jae    30000c4c <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
30000c01:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000c04:	c1 e0 02             	shl    eax,0x2
30000c07:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
30000c0a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000c0d:	c1 e0 02             	shl    eax,0x2
30000c10:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
30000c13:	eb 12                	jmp    30000c27 <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
30000c15:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
30000c19:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
30000c1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000c20:	8b 10                	mov    edx,DWORD PTR [eax]
30000c22:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000c25:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
30000c27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000c2a:	8d 50 ff             	lea    edx,[eax-0x1]
30000c2d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000c30:	85 c0                	test   eax,eax
30000c32:	75 e1                	jne    30000c15 <memcpy+0xe5>
30000c34:	eb 23                	jmp    30000c59 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
30000c36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000c39:	8d 50 04             	lea    edx,[eax+0x4]
30000c3c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000c3f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000c42:	8d 4a 04             	lea    ecx,[edx+0x4]
30000c45:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
30000c48:	8b 12                	mov    edx,DWORD PTR [edx]
30000c4a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
30000c4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000c4f:	8d 50 ff             	lea    edx,[eax-0x1]
30000c52:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000c55:	85 c0                	test   eax,eax
30000c57:	75 dd                	jne    30000c36 <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
30000c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c5c:	eb 6b                	jmp    30000cc9 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
30000c5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000c61:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
30000c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c67:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
30000c6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000c6d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30000c70:	73 47                	jae    30000cb9 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
30000c72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000c75:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
30000c78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000c7b:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
30000c7e:	eb 13                	jmp    30000c93 <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
30000c80:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
30000c84:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
30000c88:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000c8b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30000c8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30000c91:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
30000c93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000c96:	8d 50 ff             	lea    edx,[eax-0x1]
30000c99:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000c9c:	85 c0                	test   eax,eax
30000c9e:	75 e0                	jne    30000c80 <memcpy+0x150>
30000ca0:	eb 24                	jmp    30000cc6 <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
30000ca2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30000ca5:	8d 50 01             	lea    edx,[eax+0x1]
30000ca8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
30000cab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000cae:	8d 4a 01             	lea    ecx,[edx+0x1]
30000cb1:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
30000cb4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30000cb7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
30000cb9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000cbc:	8d 50 ff             	lea    edx,[eax-0x1]
30000cbf:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000cc2:	85 c0                	test   eax,eax
30000cc4:	75 dc                	jne    30000ca2 <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
30000cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
30000cc9:	c9                   	leave  
30000cca:	c3                   	ret    
30000ccb:	90                   	nop

30000ccc <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

VISIBLE void *memset(void *d1, int val, size_t len)
{
30000ccc:	55                   	push   ebp
30000ccd:	89 e5                	mov    ebp,esp
30000ccf:	83 ec 20             	sub    esp,0x20
30000cd2:	e8 1b 18 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000cd7:	05 a5 2e 00 00       	add    eax,0x2ea5
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
30000cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cdf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
30000ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000ce5:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
30000ce8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000ceb:	c1 e0 10             	shl    eax,0x10
30000cee:	89 c2                	mov    edx,eax
30000cf0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000cf3:	c1 e0 08             	shl    eax,0x8
30000cf6:	09 c2                	or     edx,eax
30000cf8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000cfb:	09 d0                	or     eax,edx
30000cfd:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
30000d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000d04:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
30000d07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000d0a:	c1 e0 18             	shl    eax,0x18
30000d0d:	89 c2                	mov    edx,eax
30000d0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000d12:	c1 e0 10             	shl    eax,0x10
30000d15:	09 c2                	or     edx,eax
30000d17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000d1a:	c1 e0 08             	shl    eax,0x8
30000d1d:	09 d0                	or     eax,edx
30000d1f:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
30000d22:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
30000d25:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000d28:	83 e0 03             	and    eax,0x3
30000d2b:	85 c0                	test   eax,eax
30000d2d:	75 1c                	jne    30000d4b <memset+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
30000d2f:	eb 0e                	jmp    30000d3f <memset+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30000d31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000d34:	8d 50 04             	lea    edx,[eax+0x4]
30000d37:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000d3a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000d3d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
30000d3f:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
30000d43:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30000d47:	75 e8                	jne    30000d31 <memset+0x65>
30000d49:	eb 43                	jmp    30000d8e <memset+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
30000d4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000d4e:	83 e0 01             	and    eax,0x1
30000d51:	85 c0                	test   eax,eax
30000d53:	75 2c                	jne    30000d81 <memset+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
30000d55:	eb 10                	jmp    30000d67 <memset+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
30000d57:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30000d5a:	8d 50 02             	lea    edx,[eax+0x2]
30000d5d:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30000d60:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
30000d64:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
30000d67:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
30000d6b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30000d6f:	75 e6                	jne    30000d57 <memset+0x8b>
30000d71:	eb 1b                	jmp    30000d8e <memset+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
30000d73:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000d76:	8d 50 01             	lea    edx,[eax+0x1]
30000d79:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30000d7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000d7f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30000d81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000d84:	8d 50 ff             	lea    edx,[eax-0x1]
30000d87:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000d8a:	85 c0                	test   eax,eax
30000d8c:	75 e5                	jne    30000d73 <memset+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
30000d8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
30000d91:	c9                   	leave  
30000d92:	c3                   	ret    

30000d93 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

void *memsetI(void *d1, int val, size_t len)
{
30000d93:	55                   	push   ebp
30000d94:	89 e5                	mov    ebp,esp
30000d96:	83 ec 20             	sub    esp,0x20
30000d99:	e8 54 17 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000d9e:	05 de 2d 00 00       	add    eax,0x2dde
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    uint8_t *d = d1;
30000da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000da6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
    uint16_t*e = d1;
30000da9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000dac:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:35
    uint16_t eVal=(val << 16) | (val << 8) | val;
30000daf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000db2:	c1 e0 10             	shl    eax,0x10
30000db5:	89 c2                	mov    edx,eax
30000db7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000dba:	c1 e0 08             	shl    eax,0x8
30000dbd:	09 c2                	or     edx,eax
30000dbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000dc2:	09 d0                	or     eax,edx
30000dc4:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:36
    uint32_t*f = d1;
30000dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000dcb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:37
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
30000dce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000dd1:	c1 e0 18             	shl    eax,0x18
30000dd4:	89 c2                	mov    edx,eax
30000dd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000dd9:	c1 e0 10             	shl    eax,0x10
30000ddc:	09 c2                	or     edx,eax
30000dde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000de1:	c1 e0 08             	shl    eax,0x8
30000de4:	09 d0                	or     eax,edx
30000de6:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
30000de9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:39
    
    if ((len%4)==0)
30000dec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000def:	83 e0 03             	and    eax,0x3
30000df2:	85 c0                	test   eax,eax
30000df4:	75 1c                	jne    30000e12 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:40
    while (len-=4) {
30000df6:	eb 0e                	jmp    30000e06 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:41
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30000df8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000dfb:	8d 50 04             	lea    edx,[eax+0x4]
30000dfe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000e01:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000e04:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:40
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
30000e06:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
30000e0a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30000e0e:	75 e8                	jne    30000df8 <memsetI+0x65>
30000e10:	eb 43                	jmp    30000e55 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:43
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
30000e12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000e15:	83 e0 01             	and    eax,0x1
30000e18:	85 c0                	test   eax,eax
30000e1a:	75 2c                	jne    30000e48 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:44
    while (len-=2) {
30000e1c:	eb 10                	jmp    30000e2e <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:45
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
30000e1e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30000e21:	8d 50 02             	lea    edx,[eax+0x2]
30000e24:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30000e27:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
30000e2b:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:44
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
30000e2e:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
30000e32:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30000e36:	75 e6                	jne    30000e1e <memsetI+0x8b>
30000e38:	eb 1b                	jmp    30000e55 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:49
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
30000e3a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000e3d:	8d 50 01             	lea    edx,[eax+0x1]
30000e40:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30000e43:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000e46:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:48
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30000e48:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30000e4b:	8d 50 ff             	lea    edx,[eax-0x1]
30000e4e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30000e51:	85 c0                	test   eax,eax
30000e53:	75 e5                	jne    30000e3a <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:51
        *d++ = val;
    }
    return d1;
30000e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:52
}
30000e58:	c9                   	leave  
30000e59:	c3                   	ret    
30000e5a:	66 90                	xchg   ax,ax

30000e5c <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:10
 */
#include "libChrisOS.h"
#include "types.h"

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset) //memory map pages either to a file or anonymously
{
30000e5c:	55                   	push   ebp
30000e5d:	89 e5                	mov    ebp,esp
30000e5f:	e8 8e 16 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000e64:	05 18 2d 00 00       	add    eax,0x2d18
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:12
    
}
30000e69:	90                   	nop
30000e6a:	5d                   	pop    ebp
30000e6b:	c3                   	ret    

30000e6c <readConsole>:
readConsole():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
file_operations_t fops;
inode_t console_node={.i_dev=1,.i_mode=0};
file_t console_file;

size_t readConsole (struct file * fptr, char *buffer, size_t size, uint64_t* whatever) 
{
30000e6c:	55                   	push   ebp
30000e6d:	89 e5                	mov    ebp,esp
30000e6f:	53                   	push   ebx
30000e70:	83 ec 04             	sub    esp,0x4
30000e73:	e8 7a 16 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000e78:	05 04 2d 00 00       	add    eax,0x2d04
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    return gets(buffer,size,1);
30000e7d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
30000e80:	83 ec 04             	sub    esp,0x4
30000e83:	6a 01                	push   0x1
30000e85:	52                   	push   edx
30000e86:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000e89:	89 c3                	mov    ebx,eax
30000e8b:	e8 90 16 00 00       	call   30002520 <__x86.get_pc_thunk.ax+0x2e>
30000e90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21
}
30000e93:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000e96:	c9                   	leave  
30000e97:	c3                   	ret    

30000e98 <writeConsole>:
writeConsole():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24

size_t writeConsole(struct file * fptr, const char *buffer, size_t size, uint64_t *whatever)
{
30000e98:	55                   	push   ebp
30000e99:	89 e5                	mov    ebp,esp
30000e9b:	53                   	push   ebx
30000e9c:	83 ec 04             	sub    esp,0x4
30000e9f:	e8 4e 16 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30000ea4:	05 d8 2c 00 00       	add    eax,0x2cd8
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    return printI(buffer);
30000ea9:	83 ec 0c             	sub    esp,0xc
30000eac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000eaf:	89 c3                	mov    ebx,eax
30000eb1:	e8 91 f7 ff ff       	call   30000647 <printI>
30000eb6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
}
30000eb9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000ebc:	c9                   	leave  
30000ebd:	c3                   	ret    

30000ebe <moveTo>:
moveTo():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29

VISIBLE void moveTo(int row, int col)
{
30000ebe:	55                   	push   ebp
30000ebf:	89 e5                	mov    ebp,esp
30000ec1:	53                   	push   ebx
30000ec2:	83 ec 24             	sub    esp,0x24
30000ec5:	e8 86 16 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
30000eca:	81 c3 b2 2c 00 00    	add    ebx,0x2cb2
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    char buff[10];
    char rowString[3], colString[3];
    int buffPtr=0;
30000ed0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:35
    

    memsetI(buff,0,10);
30000ed7:	83 ec 04             	sub    esp,0x4
30000eda:	6a 0a                	push   0xa
30000edc:	6a 00                	push   0x0
30000ede:	8d 45 de             	lea    eax,[ebp-0x22]
30000ee1:	50                   	push   eax
30000ee2:	e8 ac fe ff ff       	call   30000d93 <memsetI>
30000ee7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:37
    //Convert row and column values to strings
    itoaI(row, rowString);
30000eea:	83 ec 08             	sub    esp,0x8
30000eed:	8d 45 db             	lea    eax,[ebp-0x25]
30000ef0:	50                   	push   eax
30000ef1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000ef4:	e8 32 f3 ff ff       	call   3000022b <itoaI>
30000ef9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:38
    itoaI(col, colString);
30000efc:	83 ec 08             	sub    esp,0x8
30000eff:	8d 45 d8             	lea    eax,[ebp-0x28]
30000f02:	50                   	push   eax
30000f03:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000f06:	e8 20 f3 ff ff       	call   3000022b <itoaI>
30000f0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:41
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
30000f0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000f11:	8d 50 01             	lea    edx,[eax+0x1]
30000f14:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000f17:	c6 44 05 de 1b       	mov    BYTE PTR [ebp+eax*1-0x22],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:42
    buff[buffPtr++] = '[';
30000f1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000f1f:	8d 50 01             	lea    edx,[eax+0x1]
30000f22:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000f25:	c6 44 05 de 5b       	mov    BYTE PTR [ebp+eax*1-0x22],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45

    
    for (int cnt=0;cnt<3;cnt++)
30000f2a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
30000f31:	eb 2b                	jmp    30000f5e <moveTo+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:46
        if (rowString[cnt]!=0)
30000f33:	8d 55 db             	lea    edx,[ebp-0x25]
30000f36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000f39:	01 d0                	add    eax,edx
30000f3b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000f3e:	84 c0                	test   al,al
30000f40:	74 24                	je     30000f66 <moveTo+0xa8>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:47
            buff[buffPtr++]=rowString[cnt];
30000f42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000f45:	8d 50 01             	lea    edx,[eax+0x1]
30000f48:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000f4b:	8d 4d db             	lea    ecx,[ebp-0x25]
30000f4e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000f51:	01 ca                	add    edx,ecx
30000f53:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30000f56:	88 54 05 de          	mov    BYTE PTR [ebp+eax*1-0x22],dl
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
    buff[buffPtr++] = '[';

    
    for (int cnt=0;cnt<3;cnt++)
30000f5a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:45 (discriminator 1)
30000f5e:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
30000f62:	7e cf                	jle    30000f33 <moveTo+0x75>
30000f64:	eb 01                	jmp    30000f67 <moveTo+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:49
        if (rowString[cnt]!=0)
            buff[buffPtr++]=rowString[cnt];
        else
            break;
30000f66:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:50
    buff[buffPtr++] = ';';
30000f67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000f6a:	8d 50 01             	lea    edx,[eax+0x1]
30000f6d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000f70:	c6 44 05 de 3b       	mov    BYTE PTR [ebp+eax*1-0x22],0x3b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51
    for (int cnt=0;cnt<3;cnt++)
30000f75:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
30000f7c:	eb 2b                	jmp    30000fa9 <moveTo+0xeb>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:52
        if (colString[cnt]!=0)
30000f7e:	8d 55 d8             	lea    edx,[ebp-0x28]
30000f81:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000f84:	01 d0                	add    eax,edx
30000f86:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000f89:	84 c0                	test   al,al
30000f8b:	74 24                	je     30000fb1 <moveTo+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:53
            buff[buffPtr++]=colString[cnt];
30000f8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000f90:	8d 50 01             	lea    edx,[eax+0x1]
30000f93:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000f96:	8d 4d d8             	lea    ecx,[ebp-0x28]
30000f99:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000f9c:	01 ca                	add    edx,ecx
30000f9e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30000fa1:	88 54 05 de          	mov    BYTE PTR [ebp+eax*1-0x22],dl
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51
        if (rowString[cnt]!=0)
            buff[buffPtr++]=rowString[cnt];
        else
            break;
    buff[buffPtr++] = ';';
    for (int cnt=0;cnt<3;cnt++)
30000fa5:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:51 (discriminator 1)
30000fa9:	83 7d ec 02          	cmp    DWORD PTR [ebp-0x14],0x2
30000fad:	7e cf                	jle    30000f7e <moveTo+0xc0>
30000faf:	eb 01                	jmp    30000fb2 <moveTo+0xf4>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:55
        if (colString[cnt]!=0)
            buff[buffPtr++]=colString[cnt];
        else
            break;
30000fb1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:56
    buff[buffPtr++] = 'H';
30000fb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000fb5:	8d 50 01             	lea    edx,[eax+0x1]
30000fb8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000fbb:	c6 44 05 de 48       	mov    BYTE PTR [ebp+eax*1-0x22],0x48
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57
    for (int cnt=buffPtr;cnt<10;cnt++)
30000fc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000fc3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
30000fc6:	eb 12                	jmp    30000fda <moveTo+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:58 (discriminator 3)
        buff[buffPtr++]=0;
30000fc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000fcb:	8d 50 01             	lea    edx,[eax+0x1]
30000fce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000fd1:	c6 44 05 de 00       	mov    BYTE PTR [ebp+eax*1-0x22],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57 (discriminator 3)
        if (colString[cnt]!=0)
            buff[buffPtr++]=colString[cnt];
        else
            break;
    buff[buffPtr++] = 'H';
    for (int cnt=buffPtr;cnt<10;cnt++)
30000fd6:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:57 (discriminator 1)
30000fda:	83 7d e8 09          	cmp    DWORD PTR [ebp-0x18],0x9
30000fde:	7e e8                	jle    30000fc8 <moveTo+0x10a>
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:60
        buff[buffPtr++]=0;
    
    printI(buff);
30000fe0:	83 ec 0c             	sub    esp,0xc
30000fe3:	8d 45 de             	lea    eax,[ebp-0x22]
30000fe6:	50                   	push   eax
30000fe7:	e8 5b f6 ff ff       	call   30000647 <printI>
30000fec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:62
    
    return;
30000fef:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:63
}
30000ff0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000ff3:	c9                   	leave  
30000ff4:	c3                   	ret    

30000ff5 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:67

//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
30000ff5:	55                   	push   ebp
30000ff6:	89 e5                	mov    ebp,esp
30000ff8:	53                   	push   ebx
30000ff9:	83 ec 14             	sub    esp,0x14
30000ffc:	e8 4f 15 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
30001001:	81 c3 7b 2b 00 00    	add    ebx,0x2b7b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:69
    char buff[5];
    int buffPtr=0;
30001007:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:71

    memsetI(buff,0,10);
3000100e:	83 ec 04             	sub    esp,0x4
30001011:	6a 0a                	push   0xa
30001013:	6a 00                	push   0x0
30001015:	8d 45 ef             	lea    eax,[ebp-0x11]
30001018:	50                   	push   eax
30001019:	e8 75 fd ff ff       	call   30000d93 <memsetI>
3000101e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:74
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
30001021:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001024:	8d 50 01             	lea    edx,[eax+0x1]
30001027:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000102a:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    buff[buffPtr++] = '[';
3000102f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001032:	8d 50 01             	lea    edx,[eax+0x1]
30001035:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001038:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '0';
3000103d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001040:	8d 50 01             	lea    edx,[eax+0x1]
30001043:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001046:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = 'K';
3000104b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000104e:	8d 50 01             	lea    edx,[eax+0x1]
30001051:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001054:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr] = '\0';
30001059:	8d 55 ef             	lea    edx,[ebp-0x11]
3000105c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000105f:	01 d0                	add    eax,edx
30001061:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    printI(buff);
30001064:	83 ec 0c             	sub    esp,0xc
30001067:	8d 45 ef             	lea    eax,[ebp-0x11]
3000106a:	50                   	push   eax
3000106b:	e8 d7 f5 ff ff       	call   30000647 <printI>
30001070:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:81
    
    return;
30001073:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
}
30001074:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001077:	c9                   	leave  
30001078:	c3                   	ret    

30001079 <ioInit>:
ioInit():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:85

void ioInit()
{
30001079:	55                   	push   ebp
3000107a:	89 e5                	mov    ebp,esp
3000107c:	e8 71 14 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001081:	05 fb 2a 00 00       	add    eax,0x2afb
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:86
    console_file.f_inode=&console_node;
30001086:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
3000108c:	8d 88 84 fe ff ff    	lea    ecx,[eax-0x17c]
30001092:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:87
    fops.read=readConsole;
30001095:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
3000109b:	8d 88 f0 d2 ff ff    	lea    ecx,[eax-0x2d10]
300010a1:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:88
    fops.write=writeConsole;
300010a3:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
300010a9:	8d 88 1c d3 ff ff    	lea    ecx,[eax-0x2ce4]
300010af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:89
    console_file.fops=fops;
300010b2:	8b 88 ec ff ff ff    	mov    ecx,DWORD PTR [eax-0x14]
300010b8:	8b 80 e8 ff ff ff    	mov    eax,DWORD PTR [eax-0x18]
300010be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
300010c1:	8b 00                	mov    eax,DWORD PTR [eax]
300010c3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
300010c6:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:90
300010c9:	90                   	nop
300010ca:	5d                   	pop    ebp
300010cb:	c3                   	ret    

300010cc <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
300010cc:	55                   	push   ebp
300010cd:	89 e5                	mov    ebp,esp
300010cf:	53                   	push   ebx
300010d0:	83 ec 04             	sub    esp,0x4
300010d3:	e8 78 14 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
300010d8:	81 c3 a4 2a 00 00    	add    ebx,0x2aa4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
300010de:	83 ec 0c             	sub    esp,0xc
300010e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300010e4:	e8 b4 02 00 00       	call   3000139d <strlenI>
300010e9:	83 c4 10             	add    esp,0x10
300010ec:	89 c2                	mov    edx,eax
300010ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300010f1:	01 d0                	add    eax,edx
300010f3:	83 ec 08             	sub    esp,0x8
300010f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300010f9:	50                   	push   eax
300010fa:	e8 59 01 00 00       	call   30001258 <strcpyI>
300010ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
30001102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
30001105:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001108:	c9                   	leave  
30001109:	c3                   	ret    

3000110a <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
3000110a:	55                   	push   ebp
3000110b:	89 e5                	mov    ebp,esp
3000110d:	53                   	push   ebx
3000110e:	83 ec 04             	sub    esp,0x4
30001111:	e8 3a 14 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
30001116:	81 c3 66 2a 00 00    	add    ebx,0x2a66
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpy (dest + strlen (dest), src);
3000111c:	83 ec 0c             	sub    esp,0xc
3000111f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001122:	e8 19 14 00 00       	call   30002540 <__x86.get_pc_thunk.ax+0x4e>
30001127:	83 c4 10             	add    esp,0x10
3000112a:	89 c2                	mov    edx,eax
3000112c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000112f:	01 d0                	add    eax,edx
30001131:	83 ec 08             	sub    esp,0x8
30001134:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001137:	50                   	push   eax
30001138:	e8 d3 13 00 00       	call   30002510 <__x86.get_pc_thunk.ax+0x1e>
3000113d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
30001140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
30001143:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001146:	c9                   	leave  
30001147:	c3                   	ret    

30001148 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
30001148:	55                   	push   ebp
30001149:	89 e5                	mov    ebp,esp
3000114b:	83 ec 10             	sub    esp,0x10
3000114e:	e8 9f 13 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001153:	05 29 2a 00 00       	add    eax,0x2a29
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
30001158:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
3000115f:	eb 04                	jmp    30001165 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
30001161:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
30001165:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000116b:	01 d0                	add    eax,edx
3000116d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001170:	84 c0                	test   al,al
30001172:	75 ed                	jne    30001161 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
30001174:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
3000117b:	eb 1d                	jmp    3000119a <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
3000117d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001183:	01 c2                	add    edx,eax
30001185:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
30001188:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000118b:	01 c8                	add    eax,ecx
3000118d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001190:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
30001192:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
30001196:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
3000119a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
3000119d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300011a0:	01 d0                	add    eax,edx
300011a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300011a5:	84 c0                	test   al,al
300011a7:	75 d4                	jne    3000117d <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
300011a9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300011ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300011af:	01 d0                	add    eax,edx
300011b1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
300011b4:	90                   	nop
300011b5:	c9                   	leave  
300011b6:	c3                   	ret    
300011b7:	90                   	nop

300011b8 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
300011b8:	55                   	push   ebp
300011b9:	89 e5                	mov    ebp,esp
300011bb:	56                   	push   esi
300011bc:	53                   	push   ebx
300011bd:	83 ec 10             	sub    esp,0x10
300011c0:	e8 2d 13 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300011c5:	05 b7 29 00 00       	add    eax,0x29b7
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
300011ca:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
300011cd:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
300011d0:	89 d8                	mov    eax,ebx
300011d2:	8d 58 01             	lea    ebx,[eax+0x1]
300011d5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300011d8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
300011db:	89 f0                	mov    eax,esi
300011dd:	8d 70 01             	lea    esi,[eax+0x1]
300011e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300011e3:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
300011e6:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
300011ea:	75 0e                	jne    300011fa <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
300011ec:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
300011f0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
300011f4:	29 c2                	sub    edx,eax
300011f6:	89 d0                	mov    eax,edx
300011f8:	eb 15                	jmp    3000120f <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
300011fa:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
300011fe:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
30001201:	74 cd                	je     300011d0 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
30001203:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001207:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
3000120b:	29 c2                	sub    edx,eax
3000120d:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
3000120f:	83 c4 10             	add    esp,0x10
30001212:	5b                   	pop    ebx
30001213:	5e                   	pop    esi
30001214:	5d                   	pop    ebp
30001215:	c3                   	ret    
30001216:	66 90                	xchg   ax,ax

30001218 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
30001218:	55                   	push   ebp
30001219:	89 e5                	mov    ebp,esp
3000121b:	83 ec 10             	sub    esp,0x10
3000121e:	e8 cf 12 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001223:	05 59 29 00 00       	add    eax,0x2959
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
30001228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000122b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
3000122e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
3000122f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001232:	8d 50 01             	lea    edx,[eax+0x1]
30001235:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001238:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000123b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000123e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001241:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001244:	88 10                	mov    BYTE PTR [eax],dl
30001246:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001249:	84 c0                	test   al,al
3000124b:	75 e2                	jne    3000122f <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
3000124d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001250:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
30001253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
30001256:	c9                   	leave  
30001257:	c3                   	ret    

30001258 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
30001258:	55                   	push   ebp
30001259:	89 e5                	mov    ebp,esp
3000125b:	83 ec 10             	sub    esp,0x10
3000125e:	e8 8f 12 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001263:	05 19 29 00 00       	add    eax,0x2919
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
30001268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000126b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
3000126e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
3000126f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001272:	8d 50 01             	lea    edx,[eax+0x1]
30001275:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001278:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000127b:	8d 4a 01             	lea    ecx,[edx+0x1]
3000127e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001281:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001284:	88 10                	mov    BYTE PTR [eax],dl
30001286:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001289:	84 c0                	test   al,al
3000128b:	75 e2                	jne    3000126f <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
3000128d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001290:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
30001293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
30001296:	c9                   	leave  
30001297:	c3                   	ret    

30001298 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
30001298:	55                   	push   ebp
30001299:	89 e5                	mov    ebp,esp
3000129b:	83 ec 10             	sub    esp,0x10
3000129e:	e8 4f 12 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300012a3:	05 d9 28 00 00       	add    eax,0x28d9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
300012a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
300012ae:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
300012af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300012b2:	8d 50 01             	lea    edx,[eax+0x1]
300012b5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300012b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300012bb:	8d 4a 01             	lea    ecx,[edx+0x1]
300012be:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300012c1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300012c4:	88 10                	mov    BYTE PTR [eax],dl
300012c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300012c9:	84 c0                	test   al,al
300012cb:	74 0d                	je     300012da <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
300012cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012d0:	8d 50 ff             	lea    edx,[eax-0x1]
300012d3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300012d6:	85 c0                	test   eax,eax
300012d8:	75 d5                	jne    300012af <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
300012da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
300012dd:	c9                   	leave  
300012de:	c3                   	ret    
300012df:	90                   	nop

300012e0 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
300012e0:	55                   	push   ebp
300012e1:	89 e5                	mov    ebp,esp
300012e3:	83 ec 04             	sub    esp,0x4
300012e6:	e8 07 12 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300012eb:	05 91 28 00 00       	add    eax,0x2891
300012f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012f3:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
300012f6:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
300012fa:	7e 0d                	jle    30001309 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
300012fc:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
30001300:	7f 07                	jg     30001309 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
30001302:	b8 01 00 00 00       	mov    eax,0x1
30001307:	eb 05                	jmp    3000130e <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
30001309:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
3000130e:	c9                   	leave  
3000130f:	c3                   	ret    

30001310 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
30001310:	55                   	push   ebp
30001311:	89 e5                	mov    ebp,esp
30001313:	83 ec 10             	sub    esp,0x10
30001316:	e8 d7 11 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
3000131b:	05 61 28 00 00       	add    eax,0x2861
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
30001320:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
30001327:	eb 27                	jmp    30001350 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
30001329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000132c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000132f:	89 c2                	mov    edx,eax
30001331:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001334:	01 d0                	add    eax,edx
30001336:	0f be c0             	movsx  eax,al
30001339:	50                   	push   eax
3000133a:	e8 a1 ff ff ff       	call   300012e0 <check_digit>
3000133f:	83 c4 04             	add    esp,0x4
30001342:	83 f0 01             	xor    eax,0x1
30001345:	84 c0                	test   al,al
30001347:	74 07                	je     30001350 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
30001349:	b8 00 00 00 00       	mov    eax,0x0
3000134e:	eb 17                	jmp    30001367 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
30001350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001353:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001356:	0f be d0             	movsx  edx,al
30001359:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000135c:	01 d0                	add    eax,edx
3000135e:	85 c0                	test   eax,eax
30001360:	75 c7                	jne    30001329 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
30001362:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
30001367:	c9                   	leave  
30001368:	c3                   	ret    
30001369:	66 90                	xchg   ax,ax
3000136b:	90                   	nop

3000136c <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
3000136c:	55                   	push   ebp
3000136d:	89 e5                	mov    ebp,esp
3000136f:	83 ec 10             	sub    esp,0x10
30001372:	e8 7b 11 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001377:	05 05 28 00 00       	add    eax,0x2805
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
3000137c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
30001383:	eb 04                	jmp    30001389 <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
30001385:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
30001389:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000138c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000138f:	01 d0                	add    eax,edx
30001391:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001394:	84 c0                	test   al,al
30001396:	75 ed                	jne    30001385 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
30001398:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
3000139b:	c9                   	leave  
3000139c:	c3                   	ret    

3000139d <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
3000139d:	55                   	push   ebp
3000139e:	89 e5                	mov    ebp,esp
300013a0:	83 ec 10             	sub    esp,0x10
300013a3:	e8 4a 11 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300013a8:	05 d4 27 00 00       	add    eax,0x27d4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
300013ad:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
300013b4:	eb 04                	jmp    300013ba <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
300013b6:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
300013ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300013bd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300013c0:	01 d0                	add    eax,edx
300013c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300013c5:	84 c0                	test   al,al
300013c7:	75 ed                	jne    300013b6 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
300013c9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
300013cc:	c9                   	leave  
300013cd:	c3                   	ret    
300013ce:	66 90                	xchg   ax,ax

300013d0 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
300013d0:	55                   	push   ebp
300013d1:	89 e5                	mov    ebp,esp
300013d3:	e8 1a 11 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300013d8:	05 a4 27 00 00       	add    eax,0x27a4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
300013dd:	eb 4b                	jmp    3000142a <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
300013df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013e2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300013e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300013eb:	38 c2                	cmp    dl,al
300013ed:	74 1e                	je     3000140d <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
300013ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013f2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300013f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013f8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300013fb:	38 c2                	cmp    dl,al
300013fd:	73 07                	jae    30001406 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
300013ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001404:	eb 2f                	jmp    30001435 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
30001406:	b8 01 00 00 00       	mov    eax,0x1
3000140b:	eb 28                	jmp    30001435 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
3000140d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001410:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001413:	84 c0                	test   al,al
30001415:	75 07                	jne    3000141e <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
30001417:	b8 00 00 00 00       	mov    eax,0x0
3000141c:	eb 17                	jmp    30001435 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
3000141e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
30001422:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001426:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
3000142a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000142e:	75 af                	jne    300013df <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
30001430:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
30001435:	5d                   	pop    ebp
30001436:	c3                   	ret    
30001437:	90                   	nop

30001438 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001438:	55                   	push   ebp
30001439:	89 e5                	mov    ebp,esp
3000143b:	83 ec 10             	sub    esp,0x10
3000143e:	e8 af 10 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001443:	05 39 27 00 00       	add    eax,0x2739
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
30001448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000144b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
3000144e:	eb 1b                	jmp    3000146b <strncpy+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
30001450:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001453:	8d 50 01             	lea    edx,[eax+0x1]
30001456:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001459:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000145c:	8d 4a 01             	lea    ecx,[edx+0x1]
3000145f:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001462:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001465:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
30001467:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
3000146b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000146f:	74 1c                	je     3000148d <strncpy+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
30001471:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001474:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001477:	84 c0                	test   al,al
30001479:	75 d5                	jne    30001450 <strncpy+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
3000147b:	eb 10                	jmp    3000148d <strncpy+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
3000147d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001480:	8d 50 01             	lea    edx,[eax+0x1]
30001483:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001486:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001489:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
3000148d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001491:	75 ea                	jne    3000147d <strncpy+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
30001493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
30001496:	c9                   	leave  
30001497:	c3                   	ret    

30001498 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
30001498:	55                   	push   ebp
30001499:	89 e5                	mov    ebp,esp
3000149b:	57                   	push   edi
3000149c:	56                   	push   esi
3000149d:	53                   	push   ebx
3000149e:	83 ec 08             	sub    esp,0x8
300014a1:	e8 4c 10 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300014a6:	05 d6 26 00 00       	add    eax,0x26d6
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
300014ab:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
300014ae:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
300014b5:	89 f0                	mov    eax,esi
300014b7:	8d 70 01             	lea    esi,[eax+0x1]
300014ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300014bd:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
300014c0:	83 fb 20             	cmp    ebx,0x20
300014c3:	74 f0                	je     300014b5 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
300014c5:	83 fb 2d             	cmp    ebx,0x2d
300014c8:	75 14                	jne    300014de <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
300014ca:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
300014d1:	89 f0                	mov    eax,esi
300014d3:	8d 70 01             	lea    esi,[eax+0x1]
300014d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300014d9:	0f be d8             	movsx  ebx,al
300014dc:	eb 10                	jmp    300014ee <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
300014de:	83 fb 2b             	cmp    ebx,0x2b
300014e1:	75 0b                	jne    300014ee <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
300014e3:	89 f0                	mov    eax,esi
300014e5:	8d 70 01             	lea    esi,[eax+0x1]
300014e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300014eb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
300014ee:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300014f2:	74 06                	je     300014fa <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
300014f4:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
300014f8:	75 26                	jne    30001520 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
300014fa:	83 fb 30             	cmp    ebx,0x30
300014fd:	75 21                	jne    30001520 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
300014ff:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001502:	3c 78                	cmp    al,0x78
30001504:	74 07                	je     3000150d <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
30001506:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001509:	3c 58                	cmp    al,0x58
3000150b:	75 13                	jne    30001520 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
3000150d:	8d 46 01             	lea    eax,[esi+0x1]
30001510:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001513:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
30001516:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
30001519:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
30001520:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001524:	75 14                	jne    3000153a <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
30001526:	83 fb 30             	cmp    ebx,0x30
30001529:	75 07                	jne    30001532 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
3000152b:	b8 08 00 00 00       	mov    eax,0x8
30001530:	eb 05                	jmp    30001537 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
30001532:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
30001537:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
3000153a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
3000153d:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001542:	ba 00 00 00 00       	mov    edx,0x0
30001547:	f7 f1                	div    ecx
30001549:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
3000154c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
3000154f:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001554:	ba 00 00 00 00       	mov    edx,0x0
30001559:	f7 f1                	div    ecx
3000155b:	89 d0                	mov    eax,edx
3000155d:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
3000155f:	bf 00 00 00 00       	mov    edi,0x0
30001564:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001569:	8d 43 d0             	lea    eax,[ebx-0x30]
3000156c:	83 f8 09             	cmp    eax,0x9
3000156f:	77 05                	ja     30001576 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001571:	83 eb 30             	sub    ebx,0x30
30001574:	eb 25                	jmp    3000159b <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001576:	89 d8                	mov    eax,ebx
30001578:	83 c8 20             	or     eax,0x20
3000157b:	83 e8 61             	sub    eax,0x61
3000157e:	83 f8 19             	cmp    eax,0x19
30001581:	77 56                	ja     300015d9 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001583:	83 fb 40             	cmp    ebx,0x40
30001586:	7e 0c                	jle    30001594 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001588:	83 fb 5a             	cmp    ebx,0x5a
3000158b:	7f 07                	jg     30001594 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
3000158d:	b8 37 00 00 00       	mov    eax,0x37
30001592:	eb 05                	jmp    30001599 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001594:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001599:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
3000159b:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
3000159e:	7d 3c                	jge    300015dc <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
300015a0:	89 c8                	mov    eax,ecx
300015a2:	85 c0                	test   eax,eax
300015a4:	78 10                	js     300015b6 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
300015a6:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
300015a9:	77 0b                	ja     300015b6 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
300015ab:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
300015ae:	75 0d                	jne    300015bd <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
300015b0:	89 d0                	mov    eax,edx
300015b2:	39 c3                	cmp    ebx,eax
300015b4:	7e 07                	jle    300015bd <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
300015b6:	b9 ff ff ff ff       	mov    ecx,0xffffffff
300015bb:	eb 0f                	jmp    300015cc <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
300015bd:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
300015c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300015c5:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
300015c8:	89 d8                	mov    eax,ebx
300015ca:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
300015cc:	89 f0                	mov    eax,esi
300015ce:	8d 70 01             	lea    esi,[eax+0x1]
300015d1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300015d4:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
300015d7:	eb 90                	jmp    30001569 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
300015d9:	90                   	nop
300015da:	eb 01                	jmp    300015dd <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
300015dc:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
300015dd:	89 c8                	mov    eax,ecx
300015df:	85 c0                	test   eax,eax
300015e1:	79 07                	jns    300015ea <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
300015e3:	bf ff ff ff ff       	mov    edi,0xffffffff
300015e8:	eb 08                	jmp    300015f2 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
300015ea:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300015ee:	74 02                	je     300015f2 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
300015f0:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
300015f2:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
300015f6:	74 13                	je     3000160b <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
300015f8:	89 c8                	mov    eax,ecx
300015fa:	85 c0                	test   eax,eax
300015fc:	74 05                	je     30001603 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
300015fe:	8d 46 ff             	lea    eax,[esi-0x1]
30001601:	eb 03                	jmp    30001606 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001606:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001609:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
3000160b:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
3000160d:	83 c4 08             	add    esp,0x8
30001610:	5b                   	pop    ebx
30001611:	5e                   	pop    esi
30001612:	5f                   	pop    edi
30001613:	5d                   	pop    ebp
30001614:	c3                   	ret    
30001615:	66 90                	xchg   ax,ax
30001617:	90                   	nop

30001618 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001618:	55                   	push   ebp
30001619:	89 e5                	mov    ebp,esp
3000161b:	e8 d2 0e 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001620:	05 5c 25 00 00       	add    eax,0x255c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001625:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000162b:	01 d0                	add    eax,edx
3000162d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001633:	5d                   	pop    ebp
30001634:	c3                   	ret    
30001635:	66 90                	xchg   ax,ax
30001637:	90                   	nop

30001638 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001638:	55                   	push   ebp
30001639:	89 e5                	mov    ebp,esp
3000163b:	57                   	push   edi
3000163c:	56                   	push   esi
3000163d:	53                   	push   ebx
3000163e:	83 ec 0c             	sub    esp,0xc
30001641:	e8 ac 0e 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001646:	05 36 25 00 00       	add    eax,0x2536
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
3000164b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
3000164e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001655:	89 f0                	mov    eax,esi
30001657:	8d 70 01             	lea    esi,[eax+0x1]
3000165a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000165d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001660:	83 fb 20             	cmp    ebx,0x20
30001663:	74 f0                	je     30001655 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001665:	83 fb 2d             	cmp    ebx,0x2d
30001668:	75 14                	jne    3000167e <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
3000166a:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001671:	89 f0                	mov    eax,esi
30001673:	8d 70 01             	lea    esi,[eax+0x1]
30001676:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001679:	0f be d8             	movsx  ebx,al
3000167c:	eb 10                	jmp    3000168e <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
3000167e:	83 fb 2b             	cmp    ebx,0x2b
30001681:	75 0b                	jne    3000168e <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001683:	89 f0                	mov    eax,esi
30001685:	8d 70 01             	lea    esi,[eax+0x1]
30001688:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000168b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
3000168e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001692:	74 06                	je     3000169a <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001694:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001698:	75 26                	jne    300016c0 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
3000169a:	83 fb 30             	cmp    ebx,0x30
3000169d:	75 21                	jne    300016c0 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
3000169f:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300016a2:	3c 78                	cmp    al,0x78
300016a4:	74 07                	je     300016ad <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
300016a6:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300016a9:	3c 58                	cmp    al,0x58
300016ab:	75 13                	jne    300016c0 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
300016ad:	8d 46 01             	lea    eax,[esi+0x1]
300016b0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016b3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
300016b6:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
300016b9:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
300016c0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300016c4:	75 14                	jne    300016da <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
300016c6:	83 fb 30             	cmp    ebx,0x30
300016c9:	75 07                	jne    300016d2 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
300016cb:	b8 08 00 00 00       	mov    eax,0x8
300016d0:	eb 05                	jmp    300016d7 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
300016d2:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
300016d7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
300016da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300016de:	74 07                	je     300016e7 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
300016e0:	b8 00 00 00 80       	mov    eax,0x80000000
300016e5:	eb 05                	jmp    300016ec <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
300016e7:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
300016ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300016ef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
300016f2:	ba 00 00 00 00       	mov    edx,0x0
300016f7:	f7 f1                	div    ecx
300016f9:	89 d1                	mov    ecx,edx
300016fb:	89 c8                	mov    eax,ecx
300016fd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001700:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001703:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001706:	ba 00 00 00 00       	mov    edx,0x0
3000170b:	f7 f7                	div    edi
3000170d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30001710:	bf 00 00 00 00       	mov    edi,0x0
30001715:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
3000171a:	8d 43 d0             	lea    eax,[ebx-0x30]
3000171d:	83 f8 09             	cmp    eax,0x9
30001720:	77 05                	ja     30001727 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30001722:	83 eb 30             	sub    ebx,0x30
30001725:	eb 25                	jmp    3000174c <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30001727:	89 d8                	mov    eax,ebx
30001729:	83 c8 20             	or     eax,0x20
3000172c:	83 e8 61             	sub    eax,0x61
3000172f:	83 f8 19             	cmp    eax,0x19
30001732:	77 55                	ja     30001789 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001734:	83 fb 40             	cmp    ebx,0x40
30001737:	7e 0c                	jle    30001745 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30001739:	83 fb 5a             	cmp    ebx,0x5a
3000173c:	7f 07                	jg     30001745 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
3000173e:	b8 37 00 00 00       	mov    eax,0x37
30001743:	eb 05                	jmp    3000174a <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30001745:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
3000174a:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
3000174c:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
3000174f:	7d 3b                	jge    3000178c <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001751:	89 c8                	mov    eax,ecx
30001753:	85 c0                	test   eax,eax
30001755:	78 0f                	js     30001766 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30001757:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
3000175a:	77 0a                	ja     30001766 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
3000175c:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
3000175f:	75 0c                	jne    3000176d <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30001761:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30001764:	7e 07                	jle    3000176d <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30001766:	b9 ff ff ff ff       	mov    ecx,0xffffffff
3000176b:	eb 0f                	jmp    3000177c <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
3000176d:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30001772:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001775:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30001778:	89 d8                	mov    eax,ebx
3000177a:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
3000177c:	89 f0                	mov    eax,esi
3000177e:	8d 70 01             	lea    esi,[eax+0x1]
30001781:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001784:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001787:	eb 91                	jmp    3000171a <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001789:	90                   	nop
3000178a:	eb 01                	jmp    3000178d <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
3000178c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
3000178d:	89 c8                	mov    eax,ecx
3000178f:	85 c0                	test   eax,eax
30001791:	79 16                	jns    300017a9 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30001793:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001797:	74 07                	je     300017a0 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30001799:	b8 00 00 00 80       	mov    eax,0x80000000
3000179e:	eb 05                	jmp    300017a5 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
300017a0:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
300017a5:	89 c7                	mov    edi,eax
300017a7:	eb 08                	jmp    300017b1 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
300017a9:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300017ad:	74 02                	je     300017b1 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
300017af:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
300017b1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
300017b5:	74 13                	je     300017ca <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
300017b7:	89 c8                	mov    eax,ecx
300017b9:	85 c0                	test   eax,eax
300017bb:	74 05                	je     300017c2 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
300017bd:	8d 46 ff             	lea    eax,[esi-0x1]
300017c0:	eb 03                	jmp    300017c5 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
300017c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
300017c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300017c8:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
300017ca:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
300017cc:	83 c4 0c             	add    esp,0xc
300017cf:	5b                   	pop    ebx
300017d0:	5e                   	pop    esi
300017d1:	5f                   	pop    edi
300017d2:	5d                   	pop    ebp
300017d3:	c3                   	ret    

300017d4 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

__attribute__((visibility("default"))) void strtrim(char *input)
{
300017d4:	55                   	push   ebp
300017d5:	89 e5                	mov    ebp,esp
300017d7:	53                   	push   ebx
300017d8:	83 ec 14             	sub    esp,0x14
300017db:	e8 12 0d 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300017e0:	05 9c 23 00 00       	add    eax,0x239c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
300017e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300017e8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300017eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300017ee:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
300017f1:	eb 04                	jmp    300017f7 <strtrim+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
300017f3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
300017f7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300017fa:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300017fd:	80 fa 20             	cmp    dl,0x20
30001800:	74 f1                	je     300017f3 <strtrim+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
30001802:	83 ec 0c             	sub    esp,0xc
30001805:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001808:	89 c3                	mov    ebx,eax
3000180a:	e8 8e fb ff ff       	call   3000139d <strlenI>
3000180f:	83 c4 10             	add    esp,0x10
30001812:	8d 50 ff             	lea    edx,[eax-0x1]
30001815:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001818:	01 d0                	add    eax,edx
3000181a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
3000181d:	eb 0c                	jmp    3000182b <strtrim+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
3000181f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001822:	8d 50 ff             	lea    edx,[eax-0x1]
30001825:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30001828:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
3000182b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000182e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30001831:	76 0a                	jbe    3000183d <strtrim+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30001833:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001836:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001839:	3c 20                	cmp    al,0x20
3000183b:	74 e2                	je     3000181f <strtrim+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
3000183d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001840:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30001843:	74 1f                	je     30001864 <strtrim+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30001845:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30001846:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001849:	8d 50 01             	lea    edx,[eax+0x1]
3000184c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000184f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001852:	8d 4a 01             	lea    ecx,[edx+0x1]
30001855:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30001858:	0f b6 12             	movzx  edx,BYTE PTR [edx]
3000185b:	88 10                	mov    BYTE PTR [eax],dl
3000185d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001860:	84 c0                	test   al,al
30001862:	75 e2                	jne    30001846 <strtrim+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30001864:	90                   	nop
30001865:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001868:	c9                   	leave  
30001869:	c3                   	ret    
3000186a:	66 90                	xchg   ax,ax

3000186c <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

VISIBLE char* strstr(char* string, char* substring)
{
3000186c:	55                   	push   ebp
3000186d:	89 e5                	mov    ebp,esp
3000186f:	56                   	push   esi
30001870:	53                   	push   ebx
30001871:	e8 7c 0c 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001876:	05 06 23 00 00       	add    eax,0x2306
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
3000187b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
3000187e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001881:	84 c0                	test   al,al
30001883:	75 42                	jne    300018c7 <strstr+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
30001885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001888:	eb 4c                	jmp    300018d6 <strstr+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
3000188a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000188d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001890:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001893:	38 c2                	cmp    dl,al
30001895:	75 2b                	jne    300018c2 <strstr+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
30001897:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
3000189a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
3000189d:	84 c0                	test   al,al
3000189f:	75 05                	jne    300018a6 <strstr+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
300018a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018a4:	eb 30                	jmp    300018d6 <strstr+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
300018a6:	89 f0                	mov    eax,esi
300018a8:	8d 70 01             	lea    esi,[eax+0x1]
300018ab:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300018ae:	89 d8                	mov    eax,ebx
300018b0:	8d 58 01             	lea    ebx,[eax+0x1]
300018b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018b6:	38 c2                	cmp    dl,al
300018b8:	75 02                	jne    300018bc <strstr+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
300018ba:	eb de                	jmp    3000189a <strstr+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
300018bc:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
300018bd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300018c0:	eb 01                	jmp    300018c3 <strstr+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
300018c2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
300018c3:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
300018c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018cd:	84 c0                	test   al,al
300018cf:	75 b9                	jne    3000188a <strstr+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
300018d1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
300018d6:	5b                   	pop    ebx
300018d7:	5e                   	pop    esi
300018d8:	5d                   	pop    ebp
300018d9:	c3                   	ret    
300018da:	66 90                	xchg   ax,ax

300018dc <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t time(/*time_t* arg*/)
{
300018dc:	55                   	push   ebp
300018dd:	89 e5                	mov    ebp,esp
300018df:	83 ec 10             	sub    esp,0x10
300018e2:	e8 0b 0c 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
300018e7:	05 95 22 00 00       	add    eax,0x2295
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
300018ec:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    __asm__("call sysEnter_Vector\n":"=a" (retVal):"a" (SYSCALL_GETTICKS));
300018f3:	b8 70 01 00 00       	mov    eax,0x170
300018f8:	e8 fc ff ff ff       	call   300018f9 <time+0x1d>
300018fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
30001900:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
30001903:	c9                   	leave  
30001904:	c3                   	ret    

30001905 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30


VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
30001905:	55                   	push   ebp
30001906:	89 e5                	mov    ebp,esp
30001908:	53                   	push   ebx
30001909:	83 ec 10             	sub    esp,0x10
3000190c:	e8 3f 0c 00 00       	call   30002550 <__x86.get_pc_thunk.bx>
30001911:	81 c3 6b 22 00 00    	add    ebx,0x226b
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
  time_t time = *timer;
30001917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000191a:	8b 00                	mov    eax,DWORD PTR [eax]
3000191c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
3000191f:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35

  dayclock = (unsigned long) time % SECS_DAY;
30001926:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
30001929:	ba 07 45 2e c2       	mov    edx,0xc22e4507
3000192e:	89 c8                	mov    eax,ecx
30001930:	f7 e2                	mul    edx
30001932:	89 d0                	mov    eax,edx
30001934:	c1 e8 10             	shr    eax,0x10
30001937:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
3000193a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000193d:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30001943:	29 c1                	sub    ecx,eax
30001945:	89 c8                	mov    eax,ecx
30001947:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  dayno = (unsigned long) time / SECS_DAY;
3000194a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
3000194d:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001952:	f7 e2                	mul    edx
30001954:	89 d0                	mov    eax,edx
30001956:	c1 e8 10             	shr    eax,0x10
30001959:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38

  tmbuf->tm_sec = dayclock % 60;
3000195c:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
3000195f:	ba 89 88 88 88       	mov    edx,0x88888889
30001964:	89 c8                	mov    eax,ecx
30001966:	f7 e2                	mul    edx
30001968:	89 d0                	mov    eax,edx
3000196a:	c1 e8 05             	shr    eax,0x5
3000196d:	89 c2                	mov    edx,eax
3000196f:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001976:	89 c2                	mov    edx,eax
30001978:	89 d0                	mov    eax,edx
3000197a:	c1 e0 04             	shl    eax,0x4
3000197d:	29 d0                	sub    eax,edx
3000197f:	29 c1                	sub    ecx,eax
30001981:	89 c8                	mov    eax,ecx
30001983:	89 c2                	mov    edx,eax
30001985:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001988:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39
  tmbuf->tm_min = (dayclock % 3600) / 60;
3000198a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
3000198d:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001992:	89 c8                	mov    eax,ecx
30001994:	f7 e2                	mul    edx
30001996:	89 d0                	mov    eax,edx
30001998:	c1 e8 0b             	shr    eax,0xb
3000199b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
300019a1:	29 c1                	sub    ecx,eax
300019a3:	89 c8                	mov    eax,ecx
300019a5:	ba 89 88 88 88       	mov    edx,0x88888889
300019aa:	f7 e2                	mul    edx
300019ac:	89 d0                	mov    eax,edx
300019ae:	c1 e8 05             	shr    eax,0x5
300019b1:	89 c2                	mov    edx,eax
300019b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300019b6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_hour = dayclock / 3600;
300019b9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300019bc:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
300019c1:	f7 e2                	mul    edx
300019c3:	89 d0                	mov    eax,edx
300019c5:	c1 e8 0b             	shr    eax,0xb
300019c8:	89 c2                	mov    edx,eax
300019ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300019cd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
300019d0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
300019d3:	8d 48 04             	lea    ecx,[eax+0x4]
300019d6:	ba 25 49 92 24       	mov    edx,0x24924925
300019db:	89 c8                	mov    eax,ecx
300019dd:	f7 e2                	mul    edx
300019df:	89 c8                	mov    eax,ecx
300019e1:	29 d0                	sub    eax,edx
300019e3:	d1 e8                	shr    eax,1
300019e5:	01 d0                	add    eax,edx
300019e7:	c1 e8 02             	shr    eax,0x2
300019ea:	89 c2                	mov    edx,eax
300019ec:	c1 e2 03             	shl    edx,0x3
300019ef:	29 c2                	sub    edx,eax
300019f1:	89 c8                	mov    eax,ecx
300019f3:	29 d0                	sub    eax,edx
300019f5:	89 c2                	mov    edx,eax
300019f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300019fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  while (dayno >= (unsigned long) YEARSIZE(year)) {
300019fd:	eb 66                	jmp    30001a65 <gmtime_r+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
    dayno -= YEARSIZE(year);
300019ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001a02:	83 e0 03             	and    eax,0x3
30001a05:	85 c0                	test   eax,eax
30001a07:	75 50                	jne    30001a59 <gmtime_r+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
30001a09:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001a0c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001a11:	89 c8                	mov    eax,ecx
30001a13:	f7 ea                	imul   edx
30001a15:	c1 fa 05             	sar    edx,0x5
30001a18:	89 c8                	mov    eax,ecx
30001a1a:	c1 f8 1f             	sar    eax,0x1f
30001a1d:	29 c2                	sub    edx,eax
30001a1f:	89 d0                	mov    eax,edx
30001a21:	6b c0 64             	imul   eax,eax,0x64
30001a24:	29 c1                	sub    ecx,eax
30001a26:	89 c8                	mov    eax,ecx
30001a28:	85 c0                	test   eax,eax
30001a2a:	75 26                	jne    30001a52 <gmtime_r+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
30001a2c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001a2f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001a34:	89 c8                	mov    eax,ecx
30001a36:	f7 ea                	imul   edx
30001a38:	c1 fa 07             	sar    edx,0x7
30001a3b:	89 c8                	mov    eax,ecx
30001a3d:	c1 f8 1f             	sar    eax,0x1f
30001a40:	29 c2                	sub    edx,eax
30001a42:	89 d0                	mov    eax,edx
30001a44:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001a4a:	29 c1                	sub    ecx,eax
30001a4c:	89 c8                	mov    eax,ecx
30001a4e:	85 c0                	test   eax,eax
30001a50:	75 07                	jne    30001a59 <gmtime_r+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
30001a52:	b8 6e 01 00 00       	mov    eax,0x16e
30001a57:	eb 05                	jmp    30001a5e <gmtime_r+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
30001a59:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
30001a5e:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
    year++;
30001a61:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001a65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001a68:	83 e0 03             	and    eax,0x3
30001a6b:	85 c0                	test   eax,eax
30001a6d:	75 50                	jne    30001abf <gmtime_r+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 1)
30001a6f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001a72:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001a77:	89 c8                	mov    eax,ecx
30001a79:	f7 ea                	imul   edx
30001a7b:	c1 fa 05             	sar    edx,0x5
30001a7e:	89 c8                	mov    eax,ecx
30001a80:	c1 f8 1f             	sar    eax,0x1f
30001a83:	29 c2                	sub    edx,eax
30001a85:	89 d0                	mov    eax,edx
30001a87:	6b c0 64             	imul   eax,eax,0x64
30001a8a:	29 c1                	sub    ecx,eax
30001a8c:	89 c8                	mov    eax,ecx
30001a8e:	85 c0                	test   eax,eax
30001a90:	75 26                	jne    30001ab8 <gmtime_r+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 4)
30001a92:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001a95:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001a9a:	89 c8                	mov    eax,ecx
30001a9c:	f7 ea                	imul   edx
30001a9e:	c1 fa 07             	sar    edx,0x7
30001aa1:	89 c8                	mov    eax,ecx
30001aa3:	c1 f8 1f             	sar    eax,0x1f
30001aa6:	29 c2                	sub    edx,eax
30001aa8:	89 d0                	mov    eax,edx
30001aaa:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001ab0:	29 c1                	sub    ecx,eax
30001ab2:	89 c8                	mov    eax,ecx
30001ab4:	85 c0                	test   eax,eax
30001ab6:	75 07                	jne    30001abf <gmtime_r+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 5)
30001ab8:	b8 6e 01 00 00       	mov    eax,0x16e
30001abd:	eb 05                	jmp    30001ac4 <gmtime_r+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 6)
30001abf:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42 (discriminator 8)
30001ac4:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30001ac7:	0f 86 32 ff ff ff    	jbe    300019ff <gmtime_r+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
30001acd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001ad0:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
30001ad6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ad9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  tmbuf->tm_yday = dayno;
30001adc:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30001adf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ae2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_mon = 0;
30001ae5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001ae8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30001aef:	e9 89 00 00 00       	jmp    30001b7d <gmtime_r+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
30001af4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001af7:	83 e0 03             	and    eax,0x3
30001afa:	85 c0                	test   eax,eax
30001afc:	75 50                	jne    30001b4e <gmtime_r+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
30001afe:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001b01:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001b06:	89 c8                	mov    eax,ecx
30001b08:	f7 ea                	imul   edx
30001b0a:	c1 fa 05             	sar    edx,0x5
30001b0d:	89 c8                	mov    eax,ecx
30001b0f:	c1 f8 1f             	sar    eax,0x1f
30001b12:	29 c2                	sub    edx,eax
30001b14:	89 d0                	mov    eax,edx
30001b16:	6b c0 64             	imul   eax,eax,0x64
30001b19:	29 c1                	sub    ecx,eax
30001b1b:	89 c8                	mov    eax,ecx
30001b1d:	85 c0                	test   eax,eax
30001b1f:	75 26                	jne    30001b47 <gmtime_r+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
30001b21:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001b24:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001b29:	89 c8                	mov    eax,ecx
30001b2b:	f7 ea                	imul   edx
30001b2d:	c1 fa 07             	sar    edx,0x7
30001b30:	89 c8                	mov    eax,ecx
30001b32:	c1 f8 1f             	sar    eax,0x1f
30001b35:	29 c2                	sub    edx,eax
30001b37:	89 d0                	mov    eax,edx
30001b39:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001b3f:	29 c1                	sub    ecx,eax
30001b41:	89 c8                	mov    eax,ecx
30001b43:	85 c0                	test   eax,eax
30001b45:	75 07                	jne    30001b4e <gmtime_r+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
30001b47:	ba 01 00 00 00       	mov    edx,0x1
30001b4c:	eb 05                	jmp    30001b53 <gmtime_r+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
30001b4e:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
30001b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001b56:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30001b59:	89 d0                	mov    eax,edx
30001b5b:	01 c0                	add    eax,eax
30001b5d:	01 d0                	add    eax,edx
30001b5f:	c1 e0 02             	shl    eax,0x2
30001b62:	01 c8                	add    eax,ecx
30001b64:	8b 84 83 24 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2dc]
30001b6b:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
    tmbuf->tm_mon++;
30001b6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001b71:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30001b74:	8d 50 01             	lea    edx,[eax+0x1]
30001b77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001b7a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30001b7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001b80:	83 e0 03             	and    eax,0x3
30001b83:	85 c0                	test   eax,eax
30001b85:	75 50                	jne    30001bd7 <gmtime_r+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 1)
30001b87:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001b8a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001b8f:	89 c8                	mov    eax,ecx
30001b91:	f7 ea                	imul   edx
30001b93:	c1 fa 05             	sar    edx,0x5
30001b96:	89 c8                	mov    eax,ecx
30001b98:	c1 f8 1f             	sar    eax,0x1f
30001b9b:	29 c2                	sub    edx,eax
30001b9d:	89 d0                	mov    eax,edx
30001b9f:	6b c0 64             	imul   eax,eax,0x64
30001ba2:	29 c1                	sub    ecx,eax
30001ba4:	89 c8                	mov    eax,ecx
30001ba6:	85 c0                	test   eax,eax
30001ba8:	75 26                	jne    30001bd0 <gmtime_r+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 4)
30001baa:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001bad:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001bb2:	89 c8                	mov    eax,ecx
30001bb4:	f7 ea                	imul   edx
30001bb6:	c1 fa 07             	sar    edx,0x7
30001bb9:	89 c8                	mov    eax,ecx
30001bbb:	c1 f8 1f             	sar    eax,0x1f
30001bbe:	29 c2                	sub    edx,eax
30001bc0:	89 d0                	mov    eax,edx
30001bc2:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001bc8:	29 c1                	sub    ecx,eax
30001bca:	89 c8                	mov    eax,ecx
30001bcc:	85 c0                	test   eax,eax
30001bce:	75 07                	jne    30001bd7 <gmtime_r+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 5)
30001bd0:	ba 01 00 00 00       	mov    edx,0x1
30001bd5:	eb 05                	jmp    30001bdc <gmtime_r+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 6)
30001bd7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
30001bdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001bdf:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30001be2:	89 d0                	mov    eax,edx
30001be4:	01 c0                	add    eax,eax
30001be6:	01 d0                	add    eax,edx
30001be8:	c1 e0 02             	shl    eax,0x2
30001beb:	01 c8                	add    eax,ecx
30001bed:	8b 84 83 24 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2dc]
30001bf4:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30001bf7:	0f 86 f7 fe ff ff    	jbe    30001af4 <gmtime_r+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
30001bfd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001c00:	83 c0 01             	add    eax,0x1
30001c03:	89 c2                	mov    edx,eax
30001c05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001c08:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  tmbuf->tm_isdst = 0;
30001c0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001c0e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  return tmbuf;
30001c15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
}
30001c18:	83 c4 10             	add    esp,0x10
30001c1b:	5b                   	pop    ebx
30001c1c:	5d                   	pop    ebp
30001c1d:	c3                   	ret    

30001c1e <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58

VISIBLE struct tm *localtime(const time_t *timer) {
30001c1e:	55                   	push   ebp
30001c1f:	89 e5                	mov    ebp,esp
30001c21:	53                   	push   ebx
30001c22:	83 ec 34             	sub    esp,0x34
30001c25:	e8 c8 08 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001c2a:	05 52 1f 00 00       	add    eax,0x1f52
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
30001c2f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001c32:	8b 0a                	mov    ecx,DWORD PTR [edx]
30001c34:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
30001c3a:	8b 12                	mov    edx,DWORD PTR [edx]
30001c3c:	29 d1                	sub    ecx,edx
30001c3e:	89 ca                	mov    edx,ecx
30001c40:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
  return gmtime_r(&t, &tmbuf);
30001c43:	83 ec 08             	sub    esp,0x8
30001c46:	8d 55 c8             	lea    edx,[ebp-0x38]
30001c49:	52                   	push   edx
30001c4a:	8d 55 f4             	lea    edx,[ebp-0xc]
30001c4d:	52                   	push   edx
30001c4e:	89 c3                	mov    ebx,eax
30001c50:	e8 db 08 00 00       	call   30002530 <__x86.get_pc_thunk.ax+0x3e>
30001c55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64
}
30001c58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001c5b:	c9                   	leave  
30001c5c:	c3                   	ret    

30001c5d <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
30001c5d:	55                   	push   ebp
30001c5e:	89 e5                	mov    ebp,esp
30001c60:	53                   	push   ebx
30001c61:	83 ec 14             	sub    esp,0x14
30001c64:	e8 89 08 00 00       	call   300024f2 <__x86.get_pc_thunk.ax>
30001c69:	05 13 1f 00 00       	add    eax,0x1f13
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  time_t t;

  t = *timer - libcTZ;
30001c6e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001c71:	8b 0a                	mov    ecx,DWORD PTR [edx]
30001c73:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
30001c79:	8b 12                	mov    edx,DWORD PTR [edx]
30001c7b:	29 d1                	sub    ecx,edx
30001c7d:	89 ca                	mov    edx,ecx
30001c7f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
  return gmtime_r(&t, tmbuf);
30001c82:	83 ec 08             	sub    esp,0x8
30001c85:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001c88:	8d 55 f4             	lea    edx,[ebp-0xc]
30001c8b:	52                   	push   edx
30001c8c:	89 c3                	mov    ebx,eax
30001c8e:	e8 9d 08 00 00       	call   30002530 <__x86.get_pc_thunk.ax+0x3e>
30001c93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
}
30001c96:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001c99:	c9                   	leave  
30001c9a:	c3                   	ret    

30001c9b <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

VISIBLE time_t mktime(struct tm *tmbuf) {
30001c9b:	55                   	push   ebp
30001c9c:	89 e5                	mov    ebp,esp
30001c9e:	57                   	push   edi
30001c9f:	56                   	push   esi
30001ca0:	53                   	push   ebx
30001ca1:	83 ec 20             	sub    esp,0x20
30001ca4:	e8 b3 08 00 00       	call   3000255c <__x86.get_pc_thunk.cx>
30001ca9:	81 c1 d3 1e 00 00    	add    ecx,0x1ed3
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
30001caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001cb2:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
30001cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001cb8:	8b 18                	mov    ebx,DWORD PTR [eax]
30001cba:	ba 89 88 88 88       	mov    edx,0x88888889
30001cbf:	89 d8                	mov    eax,ebx
30001cc1:	f7 ea                	imul   edx
30001cc3:	8d 04 1a             	lea    eax,[edx+ebx*1]
30001cc6:	c1 f8 05             	sar    eax,0x5
30001cc9:	89 c2                	mov    edx,eax
30001ccb:	89 d8                	mov    eax,ebx
30001ccd:	c1 f8 1f             	sar    eax,0x1f
30001cd0:	29 c2                	sub    edx,eax
30001cd2:	89 d0                	mov    eax,edx
30001cd4:	8d 14 06             	lea    edx,[esi+eax*1]
30001cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001cda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
  tmbuf->tm_sec %= 60;
30001cdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ce0:	8b 18                	mov    ebx,DWORD PTR [eax]
30001ce2:	ba 89 88 88 88       	mov    edx,0x88888889
30001ce7:	89 d8                	mov    eax,ebx
30001ce9:	f7 ea                	imul   edx
30001ceb:	8d 04 1a             	lea    eax,[edx+ebx*1]
30001cee:	c1 f8 05             	sar    eax,0x5
30001cf1:	89 c2                	mov    edx,eax
30001cf3:	89 d8                	mov    eax,ebx
30001cf5:	c1 f8 1f             	sar    eax,0x1f
30001cf8:	29 c2                	sub    edx,eax
30001cfa:	89 d0                	mov    eax,edx
30001cfc:	89 c2                	mov    edx,eax
30001cfe:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001d05:	89 c2                	mov    edx,eax
30001d07:	89 d0                	mov    eax,edx
30001d09:	c1 e0 04             	shl    eax,0x4
30001d0c:	29 d0                	sub    eax,edx
30001d0e:	29 c3                	sub    ebx,eax
30001d10:	89 d8                	mov    eax,ebx
30001d12:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001d15:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83
  if (tmbuf->tm_sec < 0) {
30001d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d1a:	8b 00                	mov    eax,DWORD PTR [eax]
30001d1c:	85 c0                	test   eax,eax
30001d1e:	79 1c                	jns    30001d3c <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    tmbuf->tm_sec += 60;
30001d20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d23:	8b 00                	mov    eax,DWORD PTR [eax]
30001d25:	8d 50 3c             	lea    edx,[eax+0x3c]
30001d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d2b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
    tmbuf->tm_min--;
30001d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30001d33:	8d 50 ff             	lea    edx,[eax-0x1]
30001d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d39:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
30001d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d3f:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
30001d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d45:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30001d48:	ba 89 88 88 88       	mov    edx,0x88888889
30001d4d:	89 d8                	mov    eax,ebx
30001d4f:	f7 ea                	imul   edx
30001d51:	8d 04 1a             	lea    eax,[edx+ebx*1]
30001d54:	c1 f8 05             	sar    eax,0x5
30001d57:	89 c2                	mov    edx,eax
30001d59:	89 d8                	mov    eax,ebx
30001d5b:	c1 f8 1f             	sar    eax,0x1f
30001d5e:	29 c2                	sub    edx,eax
30001d60:	89 d0                	mov    eax,edx
30001d62:	8d 14 06             	lea    edx,[esi+eax*1]
30001d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d68:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:88
  tmbuf->tm_min = tmbuf->tm_min % 60;
30001d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001d6e:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30001d71:	ba 89 88 88 88       	mov    edx,0x88888889
30001d76:	89 d8                	mov    eax,ebx
30001d78:	f7 ea                	imul   edx
30001d7a:	8d 04 1a             	lea    eax,[edx+ebx*1]
30001d7d:	c1 f8 05             	sar    eax,0x5
30001d80:	89 c2                	mov    edx,eax
30001d82:	89 d8                	mov    eax,ebx
30001d84:	c1 f8 1f             	sar    eax,0x1f
30001d87:	29 c2                	sub    edx,eax
30001d89:	89 d0                	mov    eax,edx
30001d8b:	89 c2                	mov    edx,eax
30001d8d:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001d94:	89 c2                	mov    edx,eax
30001d96:	89 d0                	mov    eax,edx
30001d98:	c1 e0 04             	shl    eax,0x4
30001d9b:	29 d0                	sub    eax,edx
30001d9d:	29 c3                	sub    ebx,eax
30001d9f:	89 d8                	mov    eax,ebx
30001da1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001da4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:89
  if (tmbuf->tm_min < 0) {
30001da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001daa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30001dad:	85 c0                	test   eax,eax
30001daf:	79 1e                	jns    30001dcf <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:90
    tmbuf->tm_min += 60;
30001db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30001db7:	8d 50 3c             	lea    edx,[eax+0x3c]
30001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001dbd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:91
    tmbuf->tm_hour--;
30001dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001dc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30001dc6:	8d 50 ff             	lea    edx,[eax-0x1]
30001dc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001dcc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  }
  day = tmbuf->tm_hour / 24;
30001dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001dd2:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30001dd5:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30001dda:	89 d8                	mov    eax,ebx
30001ddc:	f7 ea                	imul   edx
30001dde:	c1 fa 02             	sar    edx,0x2
30001de1:	89 d8                	mov    eax,ebx
30001de3:	c1 f8 1f             	sar    eax,0x1f
30001de6:	29 c2                	sub    edx,eax
30001de8:	89 d0                	mov    eax,edx
30001dea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
30001ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001df0:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30001df3:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30001df8:	89 d8                	mov    eax,ebx
30001dfa:	f7 ea                	imul   edx
30001dfc:	c1 fa 02             	sar    edx,0x2
30001dff:	89 d8                	mov    eax,ebx
30001e01:	c1 f8 1f             	sar    eax,0x1f
30001e04:	29 c2                	sub    edx,eax
30001e06:	89 d0                	mov    eax,edx
30001e08:	01 c0                	add    eax,eax
30001e0a:	01 d0                	add    eax,edx
30001e0c:	c1 e0 03             	shl    eax,0x3
30001e0f:	29 c3                	sub    ebx,eax
30001e11:	89 da                	mov    edx,ebx
30001e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  if (tmbuf->tm_hour < 0) {
30001e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30001e1f:	85 c0                	test   eax,eax
30001e21:	79 13                	jns    30001e36 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_hour += 24;
30001e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e26:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30001e29:	8d 50 18             	lea    edx,[eax+0x18]
30001e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e2f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
    day--;
30001e32:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
30001e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e39:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
30001e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e3f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30001e42:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30001e47:	89 d8                	mov    eax,ebx
30001e49:	f7 ea                	imul   edx
30001e4b:	d1 fa                	sar    edx,1
30001e4d:	89 d8                	mov    eax,ebx
30001e4f:	c1 f8 1f             	sar    eax,0x1f
30001e52:	29 c2                	sub    edx,eax
30001e54:	89 d0                	mov    eax,edx
30001e56:	8d 14 06             	lea    edx,[esi+eax*1]
30001e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e5c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  tmbuf->tm_mon %= 12;
30001e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e62:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30001e65:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30001e6a:	89 d8                	mov    eax,ebx
30001e6c:	f7 ea                	imul   edx
30001e6e:	d1 fa                	sar    edx,1
30001e70:	89 d8                	mov    eax,ebx
30001e72:	c1 f8 1f             	sar    eax,0x1f
30001e75:	29 c2                	sub    edx,eax
30001e77:	89 d0                	mov    eax,edx
30001e79:	01 c0                	add    eax,eax
30001e7b:	01 d0                	add    eax,edx
30001e7d:	c1 e0 02             	shl    eax,0x2
30001e80:	29 c3                	sub    ebx,eax
30001e82:	89 da                	mov    edx,ebx
30001e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e87:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  if (tmbuf->tm_mon < 0) {
30001e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e8d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30001e90:	85 c0                	test   eax,eax
30001e92:	79 1e                	jns    30001eb2 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_mon += 12;
30001e94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30001e9a:	8d 50 0c             	lea    edx,[eax+0xc]
30001e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ea0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
    tmbuf->tm_year--;
30001ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ea6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001ea9:	8d 50 ff             	lea    edx,[eax-0x1]
30001eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001eaf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  }
  day += (tmbuf->tm_mday - 1);
30001eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001eb5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
30001eb8:	83 e8 01             	sub    eax,0x1
30001ebb:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  while (day < 0) {
30001ebe:	e9 c1 00 00 00       	jmp    30001f84 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    if(--tmbuf->tm_mon < 0) {
30001ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ec6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30001ec9:	8d 50 ff             	lea    edx,[eax-0x1]
30001ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ecf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30001ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ed5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30001ed8:	85 c0                	test   eax,eax
30001eda:	79 19                	jns    30001ef5 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
      tmbuf->tm_year--;
30001edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001edf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001ee2:	8d 50 ff             	lea    edx,[eax-0x1]
30001ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ee8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
      tmbuf->tm_mon = 11;
30001eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001eee:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30001ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001ef8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001efb:	83 e0 03             	and    eax,0x3
30001efe:	85 c0                	test   eax,eax
30001f00:	75 62                	jne    30001f64 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 1)
30001f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001f05:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001f08:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30001f0e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f13:	89 d8                	mov    eax,ebx
30001f15:	f7 ea                	imul   edx
30001f17:	c1 fa 05             	sar    edx,0x5
30001f1a:	89 d8                	mov    eax,ebx
30001f1c:	c1 f8 1f             	sar    eax,0x1f
30001f1f:	29 c2                	sub    edx,eax
30001f21:	89 d0                	mov    eax,edx
30001f23:	6b c0 64             	imul   eax,eax,0x64
30001f26:	29 c3                	sub    ebx,eax
30001f28:	89 d8                	mov    eax,ebx
30001f2a:	85 c0                	test   eax,eax
30001f2c:	75 2f                	jne    30001f5d <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 4)
30001f2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001f31:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001f34:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30001f3a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f3f:	89 d8                	mov    eax,ebx
30001f41:	f7 ea                	imul   edx
30001f43:	c1 fa 07             	sar    edx,0x7
30001f46:	89 d8                	mov    eax,ebx
30001f48:	c1 f8 1f             	sar    eax,0x1f
30001f4b:	29 c2                	sub    edx,eax
30001f4d:	89 d0                	mov    eax,edx
30001f4f:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001f55:	29 c3                	sub    ebx,eax
30001f57:	89 d8                	mov    eax,ebx
30001f59:	85 c0                	test   eax,eax
30001f5b:	75 07                	jne    30001f64 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 5)
30001f5d:	ba 01 00 00 00       	mov    edx,0x1
30001f62:	eb 05                	jmp    30001f69 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 6)
30001f64:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111 (discriminator 8)
30001f69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001f6c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30001f6f:	89 d0                	mov    eax,edx
30001f71:	01 c0                	add    eax,eax
30001f73:	01 d0                	add    eax,edx
30001f75:	c1 e0 02             	shl    eax,0x2
30001f78:	01 d8                	add    eax,ebx
30001f7a:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
30001f81:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
30001f84:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001f88:	0f 88 35 ff ff ff    	js     30001ec3 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30001f8e:	e9 c2 00 00 00       	jmp    30002055 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30001f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001f96:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001f99:	83 e0 03             	and    eax,0x3
30001f9c:	85 c0                	test   eax,eax
30001f9e:	75 62                	jne    30002002 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 1)
30001fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001fa3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001fa6:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30001fac:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001fb1:	89 d8                	mov    eax,ebx
30001fb3:	f7 ea                	imul   edx
30001fb5:	c1 fa 05             	sar    edx,0x5
30001fb8:	89 d8                	mov    eax,ebx
30001fba:	c1 f8 1f             	sar    eax,0x1f
30001fbd:	29 c2                	sub    edx,eax
30001fbf:	89 d0                	mov    eax,edx
30001fc1:	6b c0 64             	imul   eax,eax,0x64
30001fc4:	29 c3                	sub    ebx,eax
30001fc6:	89 d8                	mov    eax,ebx
30001fc8:	85 c0                	test   eax,eax
30001fca:	75 2f                	jne    30001ffb <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 4)
30001fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001fcf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30001fd2:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30001fd8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001fdd:	89 d8                	mov    eax,ebx
30001fdf:	f7 ea                	imul   edx
30001fe1:	c1 fa 07             	sar    edx,0x7
30001fe4:	89 d8                	mov    eax,ebx
30001fe6:	c1 f8 1f             	sar    eax,0x1f
30001fe9:	29 c2                	sub    edx,eax
30001feb:	89 d0                	mov    eax,edx
30001fed:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001ff3:	29 c3                	sub    ebx,eax
30001ff5:	89 d8                	mov    eax,ebx
30001ff7:	85 c0                	test   eax,eax
30001ff9:	75 07                	jne    30002002 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 5)
30001ffb:	ba 01 00 00 00       	mov    edx,0x1
30002000:	eb 05                	jmp    30002007 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 6)
30002002:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114 (discriminator 8)
30002007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000200a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
3000200d:	89 d0                	mov    eax,edx
3000200f:	01 c0                	add    eax,eax
30002011:	01 d0                	add    eax,edx
30002013:	c1 e0 02             	shl    eax,0x2
30002016:	01 d8                	add    eax,ebx
30002018:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
3000201f:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
30002022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002025:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002028:	8d 50 01             	lea    edx,[eax+0x1]
3000202b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000202e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002034:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002037:	83 f8 0c             	cmp    eax,0xc
3000203a:	75 19                	jne    30002055 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
      tmbuf->tm_mon = 0;
3000203c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000203f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
      tmbuf->tm_year++;
30002046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002049:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000204c:	8d 50 01             	lea    edx,[eax+0x1]
3000204f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002052:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002058:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000205b:	83 e0 03             	and    eax,0x3
3000205e:	85 c0                	test   eax,eax
30002060:	75 62                	jne    300020c4 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 1)
30002062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002065:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002068:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000206e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002073:	89 d8                	mov    eax,ebx
30002075:	f7 ea                	imul   edx
30002077:	c1 fa 05             	sar    edx,0x5
3000207a:	89 d8                	mov    eax,ebx
3000207c:	c1 f8 1f             	sar    eax,0x1f
3000207f:	29 c2                	sub    edx,eax
30002081:	89 d0                	mov    eax,edx
30002083:	6b c0 64             	imul   eax,eax,0x64
30002086:	29 c3                	sub    ebx,eax
30002088:	89 d8                	mov    eax,ebx
3000208a:	85 c0                	test   eax,eax
3000208c:	75 2f                	jne    300020bd <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 4)
3000208e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002091:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002094:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000209a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000209f:	89 d8                	mov    eax,ebx
300020a1:	f7 ea                	imul   edx
300020a3:	c1 fa 07             	sar    edx,0x7
300020a6:	89 d8                	mov    eax,ebx
300020a8:	c1 f8 1f             	sar    eax,0x1f
300020ab:	29 c2                	sub    edx,eax
300020ad:	89 d0                	mov    eax,edx
300020af:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300020b5:	29 c3                	sub    ebx,eax
300020b7:	89 d8                	mov    eax,ebx
300020b9:	85 c0                	test   eax,eax
300020bb:	75 07                	jne    300020c4 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 5)
300020bd:	ba 01 00 00 00       	mov    edx,0x1
300020c2:	eb 05                	jmp    300020c9 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 6)
300020c4:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113 (discriminator 8)
300020c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300020cc:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300020cf:	89 d0                	mov    eax,edx
300020d1:	01 c0                	add    eax,eax
300020d3:	01 d0                	add    eax,edx
300020d5:	c1 e0 02             	shl    eax,0x2
300020d8:	01 d8                	add    eax,ebx
300020da:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
300020e1:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300020e4:	0f 8e a9 fe ff ff    	jle    30001f93 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
300020ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300020ed:	8d 50 01             	lea    edx,[eax+0x1]
300020f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300020f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
  year = EPOCH_YR;
300020f6:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
300020fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002100:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002103:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
30002106:	81 ea 6c 07 00 00    	sub    edx,0x76c
3000210c:	39 d0                	cmp    eax,edx
3000210e:	7d 0a                	jge    3000211a <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
30002110:	b8 19 fc ff ff       	mov    eax,0xfffffc19
30002115:	e9 d0 03 00 00       	jmp    300024ea <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
  seconds = 0;
3000211a:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
  day = 0;                      // Means days since day 0 now
30002121:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
  overflow = 0;
30002128:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
3000212f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002132:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002135:	05 6c 07 00 00       	add    eax,0x76c
3000213a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
3000213d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002140:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002143:	3d 7c c6 59 00       	cmp    eax,0x59c67c
30002148:	7e 07                	jle    30002151 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134 (discriminator 1)
3000214a:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = (tm_year - year) * 365;
30002151:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002154:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002157:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
3000215d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
30002160:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
30002165:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
30002168:	89 c2                	mov    edx,eax
3000216a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000216d:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002170:	8d 58 03             	lea    ebx,[eax+0x3]
30002173:	85 c0                	test   eax,eax
30002175:	0f 48 c3             	cmovs  eax,ebx
30002178:	c1 f8 02             	sar    eax,0x2
3000217b:	83 c0 01             	add    eax,0x1
3000217e:	39 c2                	cmp    edx,eax
30002180:	7d 04                	jge    30002186 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
30002182:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
30002186:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002189:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000218c:	8d 50 03             	lea    edx,[eax+0x3]
3000218f:	85 c0                	test   eax,eax
30002191:	0f 48 c2             	cmovs  eax,edx
30002194:	c1 f8 02             	sar    eax,0x2
30002197:	89 c3                	mov    ebx,eax
30002199:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000219c:	83 e0 03             	and    eax,0x3
3000219f:	85 c0                	test   eax,eax
300021a1:	74 29                	je     300021cc <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 1)
300021a3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300021a6:	99                   	cdq    
300021a7:	c1 ea 1e             	shr    edx,0x1e
300021aa:	01 d0                	add    eax,edx
300021ac:	83 e0 03             	and    eax,0x3
300021af:	29 d0                	sub    eax,edx
300021b1:	89 c6                	mov    esi,eax
300021b3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
300021b6:	99                   	cdq    
300021b7:	c1 ea 1e             	shr    edx,0x1e
300021ba:	01 d0                	add    eax,edx
300021bc:	83 e0 03             	and    eax,0x3
300021bf:	29 d0                	sub    eax,edx
300021c1:	39 c6                	cmp    esi,eax
300021c3:	7d 07                	jge    300021cc <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 3)
300021c5:	b8 01 00 00 00       	mov    eax,0x1
300021ca:	eb 05                	jmp    300021d1 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 4)
300021cc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137 (discriminator 6)
300021d1:	01 d8                	add    eax,ebx
300021d3:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
300021d6:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300021d9:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300021dc:	89 c3                	mov    ebx,eax
300021de:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300021e3:	89 d8                	mov    eax,ebx
300021e5:	f7 ea                	imul   edx
300021e7:	c1 fa 05             	sar    edx,0x5
300021ea:	89 d8                	mov    eax,ebx
300021ec:	c1 f8 1f             	sar    eax,0x1f
300021ef:	89 d7                	mov    edi,edx
300021f1:	29 c7                	sub    edi,eax
300021f3:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300021f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300021fb:	89 d8                	mov    eax,ebx
300021fd:	f7 ea                	imul   edx
300021ff:	c1 fa 05             	sar    edx,0x5
30002202:	89 d8                	mov    eax,ebx
30002204:	c1 f8 1f             	sar    eax,0x1f
30002207:	29 c2                	sub    edx,eax
30002209:	89 d0                	mov    eax,edx
3000220b:	6b c0 64             	imul   eax,eax,0x64
3000220e:	29 c3                	sub    ebx,eax
30002210:	89 d8                	mov    eax,ebx
30002212:	85 c0                	test   eax,eax
30002214:	74 49                	je     3000225f <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 1)
30002216:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002219:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000221e:	89 d8                	mov    eax,ebx
30002220:	f7 ea                	imul   edx
30002222:	c1 fa 05             	sar    edx,0x5
30002225:	89 d8                	mov    eax,ebx
30002227:	c1 f8 1f             	sar    eax,0x1f
3000222a:	89 d6                	mov    esi,edx
3000222c:	29 c6                	sub    esi,eax
3000222e:	6b c6 64             	imul   eax,esi,0x64
30002231:	89 de                	mov    esi,ebx
30002233:	29 c6                	sub    esi,eax
30002235:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002238:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000223d:	89 d8                	mov    eax,ebx
3000223f:	f7 ea                	imul   edx
30002241:	c1 fa 05             	sar    edx,0x5
30002244:	89 d8                	mov    eax,ebx
30002246:	c1 f8 1f             	sar    eax,0x1f
30002249:	29 c2                	sub    edx,eax
3000224b:	89 d0                	mov    eax,edx
3000224d:	6b c0 64             	imul   eax,eax,0x64
30002250:	29 c3                	sub    ebx,eax
30002252:	89 d8                	mov    eax,ebx
30002254:	39 c6                	cmp    esi,eax
30002256:	7d 07                	jge    3000225f <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 3)
30002258:	b8 01 00 00 00       	mov    eax,0x1
3000225d:	eb 05                	jmp    30002264 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 4)
3000225f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138 (discriminator 6)
30002264:	01 f8                	add    eax,edi
30002266:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
30002269:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000226c:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
3000226f:	89 c3                	mov    ebx,eax
30002271:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002276:	89 d8                	mov    eax,ebx
30002278:	f7 ea                	imul   edx
3000227a:	c1 fa 07             	sar    edx,0x7
3000227d:	89 d8                	mov    eax,ebx
3000227f:	c1 f8 1f             	sar    eax,0x1f
30002282:	89 d7                	mov    edi,edx
30002284:	29 c7                	sub    edi,eax
30002286:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002289:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000228e:	89 d8                	mov    eax,ebx
30002290:	f7 ea                	imul   edx
30002292:	c1 fa 07             	sar    edx,0x7
30002295:	89 d8                	mov    eax,ebx
30002297:	c1 f8 1f             	sar    eax,0x1f
3000229a:	29 c2                	sub    edx,eax
3000229c:	89 d0                	mov    eax,edx
3000229e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300022a4:	29 c3                	sub    ebx,eax
300022a6:	89 d8                	mov    eax,ebx
300022a8:	85 c0                	test   eax,eax
300022aa:	74 4f                	je     300022fb <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 1)
300022ac:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300022af:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300022b4:	89 d8                	mov    eax,ebx
300022b6:	f7 ea                	imul   edx
300022b8:	c1 fa 07             	sar    edx,0x7
300022bb:	89 d8                	mov    eax,ebx
300022bd:	c1 f8 1f             	sar    eax,0x1f
300022c0:	89 d6                	mov    esi,edx
300022c2:	29 c6                	sub    esi,eax
300022c4:	69 c6 90 01 00 00    	imul   eax,esi,0x190
300022ca:	89 de                	mov    esi,ebx
300022cc:	29 c6                	sub    esi,eax
300022ce:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
300022d1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300022d6:	89 d8                	mov    eax,ebx
300022d8:	f7 ea                	imul   edx
300022da:	c1 fa 07             	sar    edx,0x7
300022dd:	89 d8                	mov    eax,ebx
300022df:	c1 f8 1f             	sar    eax,0x1f
300022e2:	29 c2                	sub    edx,eax
300022e4:	89 d0                	mov    eax,edx
300022e6:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300022ec:	29 c3                	sub    ebx,eax
300022ee:	89 d8                	mov    eax,ebx
300022f0:	39 c6                	cmp    esi,eax
300022f2:	7d 07                	jge    300022fb <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 3)
300022f4:	b8 01 00 00 00       	mov    eax,0x1
300022f9:	eb 05                	jmp    30002300 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 4)
300022fb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139 (discriminator 6)
30002300:	01 f8                	add    eax,edi
30002302:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:141 (discriminator 6)

  yday = month = 0;
30002305:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
3000230c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
3000230f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:142 (discriminator 6)
  while (month < tmbuf->tm_mon) {
30002312:	eb 7b                	jmp    3000238f <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
    yday += _ytab[LEAPYEAR(tm_year)][month];
30002314:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002317:	83 e0 03             	and    eax,0x3
3000231a:	85 c0                	test   eax,eax
3000231c:	75 50                	jne    3000236e <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 1)
3000231e:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002321:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002326:	89 d8                	mov    eax,ebx
30002328:	f7 ea                	imul   edx
3000232a:	c1 fa 05             	sar    edx,0x5
3000232d:	89 d8                	mov    eax,ebx
3000232f:	c1 f8 1f             	sar    eax,0x1f
30002332:	29 c2                	sub    edx,eax
30002334:	89 d0                	mov    eax,edx
30002336:	6b c0 64             	imul   eax,eax,0x64
30002339:	29 c3                	sub    ebx,eax
3000233b:	89 d8                	mov    eax,ebx
3000233d:	85 c0                	test   eax,eax
3000233f:	75 26                	jne    30002367 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 4)
30002341:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002344:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002349:	89 d8                	mov    eax,ebx
3000234b:	f7 ea                	imul   edx
3000234d:	c1 fa 07             	sar    edx,0x7
30002350:	89 d8                	mov    eax,ebx
30002352:	c1 f8 1f             	sar    eax,0x1f
30002355:	29 c2                	sub    edx,eax
30002357:	89 d0                	mov    eax,edx
30002359:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000235f:	29 c3                	sub    ebx,eax
30002361:	89 d8                	mov    eax,ebx
30002363:	85 c0                	test   eax,eax
30002365:	75 07                	jne    3000236e <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 5)
30002367:	ba 01 00 00 00       	mov    edx,0x1
3000236c:	eb 05                	jmp    30002373 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 6)
3000236e:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143 (discriminator 8)
30002373:	89 d0                	mov    eax,edx
30002375:	01 c0                	add    eax,eax
30002377:	01 d0                	add    eax,edx
30002379:	c1 e0 02             	shl    eax,0x2
3000237c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
3000237f:	01 d0                	add    eax,edx
30002381:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
30002388:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:144 (discriminator 8)
    month++;
3000238b:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:142
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
3000238f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002392:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002395:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30002398:	0f 8f 76 ff ff ff    	jg     30002314 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
3000239e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
300023a4:	83 e8 01             	sub    eax,0x1
300023a7:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (day + yday < 0) overflow|=4;
300023aa:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300023ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300023b0:	01 d0                	add    eax,edx
300023b2:	85 c0                	test   eax,eax
300023b4:	79 04                	jns    300023ba <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
300023b6:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += yday;
300023ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
300023bd:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150

  tmbuf->tm_yday = yday;
300023c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023c3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300023c6:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
300023c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300023cc:	8d 58 04             	lea    ebx,[eax+0x4]
300023cf:	ba 93 24 49 92       	mov    edx,0x92492493
300023d4:	89 d8                	mov    eax,ebx
300023d6:	f7 ea                	imul   edx
300023d8:	8d 04 1a             	lea    eax,[edx+ebx*1]
300023db:	c1 f8 02             	sar    eax,0x2
300023de:	89 c2                	mov    edx,eax
300023e0:	89 d8                	mov    eax,ebx
300023e2:	c1 f8 1f             	sar    eax,0x1f
300023e5:	29 c2                	sub    edx,eax
300023e7:	89 d0                	mov    eax,edx
300023e9:	89 c2                	mov    edx,eax
300023eb:	c1 e2 03             	shl    edx,0x3
300023ee:	29 c2                	sub    edx,eax
300023f0:	89 d8                	mov    eax,ebx
300023f2:	29 d0                	sub    eax,edx
300023f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300023f7:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
300023fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002400:	c1 e0 02             	shl    eax,0x2
30002403:	89 c2                	mov    edx,eax
30002405:	c1 e2 04             	shl    edx,0x4
30002408:	29 c2                	sub    edx,eax
3000240a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000240d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002410:	01 d0                	add    eax,edx
30002412:	c1 e0 02             	shl    eax,0x2
30002415:	89 c2                	mov    edx,eax
30002417:	c1 e2 04             	shl    edx,0x4
3000241a:	29 c2                	sub    edx,eax
3000241c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000241f:	8b 00                	mov    eax,DWORD PTR [eax]
30002421:	01 d0                	add    eax,edx
30002423:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
30002426:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
3000242b:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
3000242e:	89 c3                	mov    ebx,eax
30002430:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30002435:	89 d8                	mov    eax,ebx
30002437:	f7 ea                	imul   edx
30002439:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000243c:	c1 f8 10             	sar    eax,0x10
3000243f:	89 c2                	mov    edx,eax
30002441:	89 d8                	mov    eax,ebx
30002443:	c1 f8 1f             	sar    eax,0x1f
30002446:	29 c2                	sub    edx,eax
30002448:	89 d0                	mov    eax,edx
3000244a:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
3000244d:	7d 04                	jge    30002453 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 1)
3000244f:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  seconds += day * SECS_DAY;
30002453:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002456:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
3000245c:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
3000245f:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002465:	8b 00                	mov    eax,DWORD PTR [eax]
30002467:	85 c0                	test   eax,eax
30002469:	7e 16                	jle    30002481 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159 (discriminator 1)
3000246b:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002471:	8b 00                	mov    eax,DWORD PTR [eax]
30002473:	ba ff ff ff 7f       	mov    edx,0x7fffffff
30002478:	29 c2                	sub    edx,eax
3000247a:	89 d0                	mov    eax,edx
3000247c:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
3000247f:	7c 1b                	jl     3000249c <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
30002481:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002487:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
30002489:	85 c0                	test   eax,eax
3000248b:	79 13                	jns    300024a0 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
      ((libcTZ < 0) && (seconds < -libcTZ))) {
3000248d:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002493:	8b 00                	mov    eax,DWORD PTR [eax]
30002495:	f7 d8                	neg    eax
30002497:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
3000249a:	7e 04                	jle    300024a0 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
          overflow|=16;
3000249c:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:163
  }
  seconds += libcTZ;
300024a0:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
300024a6:	8b 00                	mov    eax,DWORD PTR [eax]
300024a8:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165

  if (tmbuf->tm_isdst) {
300024ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
300024b1:	85 c0                	test   eax,eax
300024b3:	74 0b                	je     300024c0 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166
    dst = _dstbias;
300024b5:	8b 81 5c 00 00 00    	mov    eax,DWORD PTR [ecx+0x5c]
300024bb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
300024be:	eb 07                	jmp    300024c7 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:168
  } else {
    dst = 0;
300024c0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
300024c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
300024ca:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
300024cd:	7e 04                	jle    300024d3 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 1)
300024cf:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
  seconds -= dst;
300024d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
300024d6:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174

  if (overflow) return (time_t) overflow-2;
300024d9:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
300024dd:	74 08                	je     300024e7 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 1)
300024df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
300024e2:	83 e8 02             	sub    eax,0x2
300024e5:	eb 03                	jmp    300024ea <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
300024e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:178
}
300024ea:	83 c4 20             	add    esp,0x20
300024ed:	5b                   	pop    ebx
300024ee:	5e                   	pop    esi
300024ef:	5f                   	pop    edi
300024f0:	5d                   	pop    ebp
300024f1:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

300024f2 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
300024f2:	8b 04 24             	mov    eax,DWORD PTR [esp]
300024f5:	c3                   	ret    

Disassembly of section .plt:

30002500 <.plt>:
30002500:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002506:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
3000250c:	00 00                	add    BYTE PTR [eax],al
3000250e:	00 00                	add    BYTE PTR [eax],al
30002510:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002516:	68 00 00 00 00       	push   0x0
3000251b:	e9 e0 ff ff ff       	jmp    30002500 <__x86.get_pc_thunk.ax+0xe>
30002520:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
30002526:	68 08 00 00 00       	push   0x8
3000252b:	e9 d0 ff ff ff       	jmp    30002500 <__x86.get_pc_thunk.ax+0xe>
30002530:	ff a3 14 00 00 00    	jmp    DWORD PTR [ebx+0x14]
30002536:	68 10 00 00 00       	push   0x10
3000253b:	e9 c0 ff ff ff       	jmp    30002500 <__x86.get_pc_thunk.ax+0xe>
30002540:	ff a3 18 00 00 00    	jmp    DWORD PTR [ebx+0x18]
30002546:	68 18 00 00 00       	push   0x18
3000254b:	e9 b0 ff ff ff       	jmp    30002500 <__x86.get_pc_thunk.ax+0xe>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002550 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002550:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002553:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.dx:

30002554 <__x86.get_pc_thunk.dx>:
__x86.get_pc_thunk.dx():
30002554:	8b 14 24             	mov    edx,DWORD PTR [esp]
30002557:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.si:

30002558 <__x86.get_pc_thunk.si>:
__x86.get_pc_thunk.si():
30002558:	8b 34 24             	mov    esi,DWORD PTR [esp]
3000255b:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

3000255c <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
3000255c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
3000255f:	c3                   	ret    

Disassembly of section .eh_frame:

30002560 <.eh_frame>:
30002560:	14 00                	adc    al,0x0
30002562:	00 00                	add    BYTE PTR [eax],al
30002564:	00 00                	add    BYTE PTR [eax],al
30002566:	00 00                	add    BYTE PTR [eax],al
30002568:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
3000256b:	00 01                	add    BYTE PTR [ecx],al
3000256d:	7c 08                	jl     30002577 <__x86.get_pc_thunk.cx+0x1b>
3000256f:	01 1b                	add    DWORD PTR [ebx],ebx
30002571:	0c 04                	or     al,0x4
30002573:	04 88                	add    al,0x88
30002575:	01 00                	add    DWORD PTR [eax],eax
30002577:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000257a:	00 00                	add    BYTE PTR [eax],al
3000257c:	1c 00                	sbb    al,0x0
3000257e:	00 00                	add    BYTE PTR [eax],al
30002580:	80 da ff             	sbb    dl,0xff
30002583:	ff                   	(bad)  
30002584:	38 00                	cmp    BYTE PTR [eax],al
30002586:	00 00                	add    BYTE PTR [eax],al
30002588:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000258b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002591:	74 c5                	je     30002558 <__x86.get_pc_thunk.si>
30002593:	0c 04                	or     al,0x4
30002595:	04 00                	add    al,0x0
30002597:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000259a:	00 00                	add    BYTE PTR [eax],al
3000259c:	3c 00                	cmp    al,0x0
3000259e:	00 00                	add    BYTE PTR [eax],al
300025a0:	98                   	cwde   
300025a1:	da ff                	(bad)  
300025a3:	ff                   	(bad)  
300025a4:	38 00                	cmp    BYTE PTR [eax],al
300025a6:	00 00                	add    BYTE PTR [eax],al
300025a8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300025ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300025b1:	74 c5                	je     30002578 <__x86.get_pc_thunk.cx+0x1c>
300025b3:	0c 04                	or     al,0x4
300025b5:	04 00                	add    al,0x0
300025b7:	00 10                	add    BYTE PTR [eax],dl
300025b9:	00 00                	add    BYTE PTR [eax],al
300025bb:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
300025bf:	00 32                	add    BYTE PTR [edx],dh
300025c1:	ff                   	(bad)  
300025c2:	ff                   	(bad)  
300025c3:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
300025c6:	00 00                	add    BYTE PTR [eax],al
300025c8:	00 00                	add    BYTE PTR [eax],al
300025ca:	00 00                	add    BYTE PTR [eax],al
300025cc:	24 00                	and    al,0x0
300025ce:	00 00                	add    BYTE PTR [eax],al
300025d0:	70 00                	jo     300025d2 <__x86.get_pc_thunk.cx+0x76>
300025d2:	00 00                	add    BYTE PTR [eax],al
300025d4:	9c                   	pushf  
300025d5:	da ff                	(bad)  
300025d7:	ff 55 00             	call   DWORD PTR [ebp+0x0]
300025da:	00 00                	add    BYTE PTR [eax],al
300025dc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300025df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300025e5:	42                   	inc    edx
300025e6:	86 03                	xchg   BYTE PTR [ebx],al
300025e8:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
300025ec:	c3                   	ret    
300025ed:	41                   	inc    ecx
300025ee:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300025f2:	04 04                	add    al,0x4
300025f4:	24 00                	and    al,0x0
300025f6:	00 00                	add    BYTE PTR [eax],al
300025f8:	98                   	cwde   
300025f9:	00 00                	add    BYTE PTR [eax],al
300025fb:	00 c9                	add    cl,cl
300025fd:	da ff                	(bad)  
300025ff:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002602:	00 00                	add    BYTE PTR [eax],al
30002604:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002607:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000260d:	42                   	inc    edx
3000260e:	86 03                	xchg   BYTE PTR [ebx],al
30002610:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002614:	c3                   	ret    
30002615:	41                   	inc    ecx
30002616:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
3000261a:	04 04                	add    al,0x4
3000261c:	24 00                	and    al,0x0
3000261e:	00 00                	add    BYTE PTR [eax],al
30002620:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002623:	00 f8                	add    al,bh
30002625:	da ff                	(bad)  
30002627:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
3000262d:	41                   	inc    ecx
3000262e:	0e                   	push   cs
3000262f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002635:	42                   	inc    edx
30002636:	86 03                	xchg   BYTE PTR [ebx],al
30002638:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
3000263c:	c3                   	ret    
3000263d:	41                   	inc    ecx
3000263e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002642:	04 04                	add    al,0x4
30002644:	10 00                	adc    BYTE PTR [eax],al
30002646:	00 00                	add    BYTE PTR [eax],al
30002648:	e8 00 00 00 04       	call   3400264d <ticksToWait+0x3ffea71>
3000264d:	ff                   	(bad)  
3000264e:	ff                   	(bad)  
3000264f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002652:	00 00                	add    BYTE PTR [eax],al
30002654:	00 00                	add    BYTE PTR [eax],al
30002656:	00 00                	add    BYTE PTR [eax],al
30002658:	20 00                	and    BYTE PTR [eax],al
3000265a:	00 00                	add    BYTE PTR [eax],al
3000265c:	fc                   	cld    
3000265d:	00 00                	add    BYTE PTR [eax],al
3000265f:	00 54 db ff          	add    BYTE PTR [ebx+ebx*8-0x1],dl
30002663:	ff 77 00             	push   DWORD PTR [edi+0x0]
30002666:	00 00                	add    BYTE PTR [eax],al
30002668:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000266b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002671:	44                   	inc    esp
30002672:	83 03 02             	add    DWORD PTR [ebx],0x2
30002675:	6f                   	outs   dx,DWORD PTR ds:[esi]
30002676:	c5 c3 0c             	(bad)  
30002679:	04 04                	add    al,0x4
3000267b:	00 20                	add    BYTE PTR [eax],ah
3000267d:	00 00                	add    BYTE PTR [eax],al
3000267f:	00 20                	add    BYTE PTR [eax],ah
30002681:	01 00                	add    DWORD PTR [eax],eax
30002683:	00 a7 db ff ff bb    	add    BYTE PTR [edi-0x44000025],ah
30002689:	00 00                	add    BYTE PTR [eax],al
3000268b:	00 00                	add    BYTE PTR [eax],al
3000268d:	41                   	inc    ecx
3000268e:	0e                   	push   cs
3000268f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002695:	44                   	inc    esp
30002696:	83 03 02             	add    DWORD PTR [ebx],0x2
30002699:	b3 c5                	mov    bl,0xc5
3000269b:	c3                   	ret    
3000269c:	0c 04                	or     al,0x4
3000269e:	04 00                	add    al,0x0
300026a0:	1c 00                	sbb    al,0x0
300026a2:	00 00                	add    BYTE PTR [eax],al
300026a4:	44                   	inc    esp
300026a5:	01 00                	add    DWORD PTR [eax],eax
300026a7:	00 3e                	add    BYTE PTR [esi],bh
300026a9:	dc ff                	fdiv   st(7),st
300026ab:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
300026af:	00 00                	add    BYTE PTR [eax],al
300026b1:	41                   	inc    ecx
300026b2:	0e                   	push   cs
300026b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300026b9:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
300026bc:	0c 04                	or     al,0x4
300026be:	04 00                	add    al,0x0
300026c0:	20 00                	and    BYTE PTR [eax],al
300026c2:	00 00                	add    BYTE PTR [eax],al
300026c4:	64 01 00             	add    DWORD PTR fs:[eax],eax
300026c7:	00 7c dc ff          	add    BYTE PTR [esp+ebx*8-0x1],bh
300026cb:	ff 26                	jmp    DWORD PTR [esi]
300026cd:	00 00                	add    BYTE PTR [eax],al
300026cf:	00 00                	add    BYTE PTR [eax],al
300026d1:	41                   	inc    ecx
300026d2:	0e                   	push   cs
300026d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300026d9:	41                   	inc    ecx
300026da:	83 03 60             	add    DWORD PTR [ebx],0x60
300026dd:	c3                   	ret    
300026de:	41                   	inc    ecx
300026df:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300026e2:	04 00                	add    al,0x0
300026e4:	20 00                	and    BYTE PTR [eax],al
300026e6:	00 00                	add    BYTE PTR [eax],al
300026e8:	88 01                	mov    BYTE PTR [ecx],al
300026ea:	00 00                	add    BYTE PTR [eax],al
300026ec:	7e dc                	jle    300026ca <__x86.get_pc_thunk.cx+0x16e>
300026ee:	ff                   	(bad)  
300026ef:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
300026f2:	00 00                	add    BYTE PTR [eax],al
300026f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300026f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300026fd:	44                   	inc    esp
300026fe:	83 03 7a             	add    DWORD PTR [ebx],0x7a
30002701:	c3                   	ret    
30002702:	41                   	inc    ecx
30002703:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002706:	04 00                	add    al,0x0
30002708:	20 00                	and    BYTE PTR [eax],al
3000270a:	00 00                	add    BYTE PTR [eax],al
3000270c:	ac                   	lods   al,BYTE PTR ds:[esi]
3000270d:	01 00                	add    DWORD PTR [eax],eax
3000270f:	00 9d dc ff ff 2f    	add    BYTE PTR [ebp+0x2fffffdc],bl
30002715:	00 00                	add    BYTE PTR [eax],al
30002717:	00 00                	add    BYTE PTR [eax],al
30002719:	41                   	inc    ecx
3000271a:	0e                   	push   cs
3000271b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002721:	44                   	inc    esp
30002722:	83 03 66             	add    DWORD PTR [ebx],0x66
30002725:	c3                   	ret    
30002726:	41                   	inc    ecx
30002727:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000272a:	04 00                	add    al,0x0
3000272c:	20 00                	and    BYTE PTR [eax],al
3000272e:	00 00                	add    BYTE PTR [eax],al
30002730:	d0 01                	rol    BYTE PTR [ecx],1
30002732:	00 00                	add    BYTE PTR [eax],al
30002734:	a8 dc                	test   al,0xdc
30002736:	ff                   	(bad)  
30002737:	ff                   	(bad)  
30002738:	ba 00 00 00 00       	mov    edx,0x0
3000273d:	41                   	inc    ecx
3000273e:	0e                   	push   cs
3000273f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002745:	44                   	inc    esp
30002746:	83 03 02             	add    DWORD PTR [ebx],0x2
30002749:	b2 c5                	mov    dl,0xc5
3000274b:	c3                   	ret    
3000274c:	0c 04                	or     al,0x4
3000274e:	04 00                	add    al,0x0
30002750:	20 00                	and    BYTE PTR [eax],al
30002752:	00 00                	add    BYTE PTR [eax],al
30002754:	f4                   	hlt    
30002755:	01 00                	add    DWORD PTR [eax],eax
30002757:	00 40 dd             	add    BYTE PTR [eax-0x23],al
3000275a:	ff                   	(bad)  
3000275b:	ff 32                	push   DWORD PTR [edx]
3000275d:	00 00                	add    BYTE PTR [eax],al
3000275f:	00 00                	add    BYTE PTR [eax],al
30002761:	41                   	inc    ecx
30002762:	0e                   	push   cs
30002763:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002769:	44                   	inc    esp
3000276a:	83 03 69             	add    DWORD PTR [ebx],0x69
3000276d:	c3                   	ret    
3000276e:	41                   	inc    ecx
3000276f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002772:	04 00                	add    al,0x0
30002774:	20 00                	and    BYTE PTR [eax],al
30002776:	00 00                	add    BYTE PTR [eax],al
30002778:	18 02                	sbb    BYTE PTR [edx],al
3000277a:	00 00                	add    BYTE PTR [eax],al
3000277c:	4e                   	dec    esi
3000277d:	dd ff                	(bad)  
3000277f:	ff 31                	push   DWORD PTR [ecx]
30002781:	00 00                	add    BYTE PTR [eax],al
30002783:	00 00                	add    BYTE PTR [eax],al
30002785:	41                   	inc    ecx
30002786:	0e                   	push   cs
30002787:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000278d:	44                   	inc    esp
3000278e:	83 03 68             	add    DWORD PTR [ebx],0x68
30002791:	c3                   	ret    
30002792:	41                   	inc    ecx
30002793:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002796:	04 00                	add    al,0x0
30002798:	20 00                	and    BYTE PTR [eax],al
3000279a:	00 00                	add    BYTE PTR [eax],al
3000279c:	3c 02                	cmp    al,0x2
3000279e:	00 00                	add    BYTE PTR [eax],al
300027a0:	5b                   	pop    ebx
300027a1:	dd ff                	(bad)  
300027a3:	ff 2e                	jmp    FWORD PTR [esi]
300027a5:	00 00                	add    BYTE PTR [eax],al
300027a7:	00 00                	add    BYTE PTR [eax],al
300027a9:	41                   	inc    ecx
300027aa:	0e                   	push   cs
300027ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300027b1:	44                   	inc    esp
300027b2:	83 03 65             	add    DWORD PTR [ebx],0x65
300027b5:	c3                   	ret    
300027b6:	41                   	inc    ecx
300027b7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300027ba:	04 00                	add    al,0x0
300027bc:	1c 00                	sbb    al,0x0
300027be:	00 00                	add    BYTE PTR [eax],al
300027c0:	60                   	pusha  
300027c1:	02 00                	add    al,BYTE PTR [eax]
300027c3:	00 65 dd             	add    BYTE PTR [ebp-0x23],ah
300027c6:	ff                   	(bad)  
300027c7:	ff 27                	jmp    DWORD PTR [edi]
300027c9:	00 00                	add    BYTE PTR [eax],al
300027cb:	00 00                	add    BYTE PTR [eax],al
300027cd:	41                   	inc    ecx
300027ce:	0e                   	push   cs
300027cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300027d5:	63 c5                	arpl   bp,ax
300027d7:	0c 04                	or     al,0x4
300027d9:	04 00                	add    al,0x0
300027db:	00 20                	add    BYTE PTR [eax],ah
300027dd:	00 00                	add    BYTE PTR [eax],al
300027df:	00 80 02 00 00 6c    	add    BYTE PTR [eax+0x6c000002],al
300027e5:	dd ff                	(bad)  
300027e7:	ff a4 00 00 00 00 41 	jmp    DWORD PTR [eax+eax*1+0x41000000]
300027ee:	0e                   	push   cs
300027ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300027f5:	44                   	inc    esp
300027f6:	83 03 02             	add    DWORD PTR [ebx],0x2
300027f9:	9c                   	pushf  
300027fa:	c5 c3 0c             	(bad)  
300027fd:	04 04                	add    al,0x4
300027ff:	00 20                	add    BYTE PTR [eax],ah
30002801:	00 00                	add    BYTE PTR [eax],al
30002803:	00 a4 02 00 00 ec dd 	add    BYTE PTR [edx+eax*1-0x22140000],ah
3000280a:	ff                   	(bad)  
3000280b:	ff 1f                	call   FWORD PTR [edi]
3000280d:	00 00                	add    BYTE PTR [eax],al
3000280f:	00 00                	add    BYTE PTR [eax],al
30002811:	41                   	inc    ecx
30002812:	0e                   	push   cs
30002813:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002819:	44                   	inc    esp
3000281a:	83 03 56             	add    DWORD PTR [ebx],0x56
3000281d:	c3                   	ret    
3000281e:	41                   	inc    ecx
3000281f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002822:	04 00                	add    al,0x0
30002824:	1c 00                	sbb    al,0x0
30002826:	00 00                	add    BYTE PTR [eax],al
30002828:	c8 02 00 00          	enter  0x2,0x0
3000282c:	e7 dd                	out    0xdd,eax
3000282e:	ff                   	(bad)  
3000282f:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002832:	00 00                	add    BYTE PTR [eax],al
30002834:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002837:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000283d:	70 c5                	jo     30002804 <__x86.get_pc_thunk.cx+0x2a8>
3000283f:	0c 04                	or     al,0x4
30002841:	04 00                	add    al,0x0
30002843:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002846:	00 00                	add    BYTE PTR [eax],al
30002848:	e8 02 00 00 fb       	call   2b00284f <sysEnter_Vector+0x2aed284f>
3000284d:	dd ff                	(bad)  
3000284f:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002852:	00 00                	add    BYTE PTR [eax],al
30002854:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002857:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000285d:	70 c5                	jo     30002824 <__x86.get_pc_thunk.cx+0x2c8>
3000285f:	0c 04                	or     al,0x4
30002861:	04 00                	add    al,0x0
30002863:	00 20                	add    BYTE PTR [eax],ah
30002865:	00 00                	add    BYTE PTR [eax],al
30002867:	00 08                	add    BYTE PTR [eax],cl
30002869:	03 00                	add    eax,DWORD PTR [eax]
3000286b:	00 0f                	add    BYTE PTR [edi],cl
3000286d:	de ff                	fdivp  st(7),st
3000286f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002875:	41                   	inc    ecx
30002876:	0e                   	push   cs
30002877:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000287d:	44                   	inc    esp
3000287e:	83 03 6c             	add    DWORD PTR [ebx],0x6c
30002881:	c3                   	ret    
30002882:	41                   	inc    ecx
30002883:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002886:	04 00                	add    al,0x0
30002888:	20 00                	and    BYTE PTR [eax],al
3000288a:	00 00                	add    BYTE PTR [eax],al
3000288c:	2c 03                	sub    al,0x3
3000288e:	00 00                	add    BYTE PTR [eax],al
30002890:	20 de                	and    dh,bl
30002892:	ff                   	(bad)  
30002893:	ff 46 00             	inc    DWORD PTR [esi+0x0]
30002896:	00 00                	add    BYTE PTR [eax],al
30002898:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000289b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300028a1:	44                   	inc    esp
300028a2:	83 03 7d             	add    DWORD PTR [ebx],0x7d
300028a5:	c3                   	ret    
300028a6:	41                   	inc    ecx
300028a7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300028aa:	04 00                	add    al,0x0
300028ac:	1c 00                	sbb    al,0x0
300028ae:	00 00                	add    BYTE PTR [eax],al
300028b0:	50                   	push   eax
300028b1:	03 00                	add    eax,DWORD PTR [eax]
300028b3:	00 42 de             	add    BYTE PTR [edx-0x22],al
300028b6:	ff                   	(bad)  
300028b7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300028bd:	41                   	inc    ecx
300028be:	0e                   	push   cs
300028bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300028c5:	59                   	pop    ecx
300028c6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300028c9:	04 00                	add    al,0x0
300028cb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300028ce:	00 00                	add    BYTE PTR [eax],al
300028d0:	70 03                	jo     300028d5 <__x86.get_pc_thunk.cx+0x379>
300028d2:	00 00                	add    BYTE PTR [eax],al
300028d4:	3f                   	aas    
300028d5:	de ff                	fdivp  st(7),st
300028d7:	ff 29                	jmp    FWORD PTR [ecx]
300028d9:	00 00                	add    BYTE PTR [eax],al
300028db:	00 00                	add    BYTE PTR [eax],al
300028dd:	41                   	inc    ecx
300028de:	0e                   	push   cs
300028df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300028e5:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
300028e9:	04 00                	add    al,0x0
300028eb:	00 20                	add    BYTE PTR [eax],ah
300028ed:	00 00                	add    BYTE PTR [eax],al
300028ef:	00 90 03 00 00 48    	add    BYTE PTR [eax+0x48000003],dl
300028f5:	de ff                	fdivp  st(7),st
300028f7:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
300028fb:	00 00                	add    BYTE PTR [eax],al
300028fd:	41                   	inc    ecx
300028fe:	0e                   	push   cs
300028ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002905:	44                   	inc    esp
30002906:	83 03 02             	add    DWORD PTR [ebx],0x2
30002909:	44                   	inc    esp
3000290a:	c5 c3 0c             	(bad)  
3000290d:	04 04                	add    al,0x4
3000290f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002912:	00 00                	add    BYTE PTR [eax],al
30002914:	b4 03                	mov    ah,0x3
30002916:	00 00                	add    BYTE PTR [eax],al
30002918:	70 de                	jo     300028f8 <__x86.get_pc_thunk.cx+0x39c>
3000291a:	ff                   	(bad)  
3000291b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30002921:	41                   	inc    ecx
30002922:	0e                   	push   cs
30002923:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002929:	59                   	pop    ecx
3000292a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000292d:	04 00                	add    al,0x0
3000292f:	00 20                	add    BYTE PTR [eax],ah
30002931:	00 00                	add    BYTE PTR [eax],al
30002933:	00 d4                	add    ah,dl
30002935:	03 00                	add    eax,DWORD PTR [eax]
30002937:	00 6d de             	add    BYTE PTR [ebp-0x22],ch
3000293a:	ff                   	(bad)  
3000293b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
3000293e:	00 00                	add    BYTE PTR [eax],al
30002940:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002943:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002949:	44                   	inc    esp
3000294a:	83 03 78             	add    DWORD PTR [ebx],0x78
3000294d:	c5 c3 0c             	(bad)  
30002950:	04 04                	add    al,0x4
30002952:	00 00                	add    BYTE PTR [eax],al
30002954:	1c 00                	sbb    al,0x0
30002956:	00 00                	add    BYTE PTR [eax],al
30002958:	f8                   	clc    
30002959:	03 00                	add    eax,DWORD PTR [eax]
3000295b:	00 89 de ff ff 20    	add    BYTE PTR [ecx+0x20ffffde],cl
30002961:	00 00                	add    BYTE PTR [eax],al
30002963:	00 00                	add    BYTE PTR [eax],al
30002965:	41                   	inc    ecx
30002966:	0e                   	push   cs
30002967:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000296d:	5c                   	pop    esp
3000296e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002971:	04 00                	add    al,0x0
30002973:	00 10                	add    BYTE PTR [eax],dl
30002975:	00 00                	add    BYTE PTR [eax],al
30002977:	00 18                	add    BYTE PTR [eax],bl
30002979:	04 00                	add    al,0x0
3000297b:	00 d8                	add    al,bl
3000297d:	fb                   	sti    
3000297e:	ff                   	(bad)  
3000297f:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002982:	00 00                	add    BYTE PTR [eax],al
30002984:	00 00                	add    BYTE PTR [eax],al
30002986:	00 00                	add    BYTE PTR [eax],al
30002988:	20 00                	and    BYTE PTR [eax],al
3000298a:	00 00                	add    BYTE PTR [eax],al
3000298c:	2c 04                	sub    al,0x4
3000298e:	00 00                	add    BYTE PTR [eax],al
30002990:	78 de                	js     30002970 <__x86.get_pc_thunk.cx+0x414>
30002992:	ff                   	(bad)  
30002993:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
30002996:	00 00                	add    BYTE PTR [eax],al
30002998:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000299b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300029a1:	44                   	inc    esp
300029a2:	83 03 02             	add    DWORD PTR [ebx],0x2
300029a5:	58                   	pop    eax
300029a6:	c5 c3 0c             	(bad)  
300029a9:	04 04                	add    al,0x4
300029ab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300029ae:	00 00                	add    BYTE PTR [eax],al
300029b0:	50                   	push   eax
300029b1:	04 00                	add    al,0x0
300029b3:	00 b4 de ff ff 87 00 	add    BYTE PTR [esi+ebx*8+0x87ffff],dh
300029ba:	00 00                	add    BYTE PTR [eax],al
300029bc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300029bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300029c5:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
300029cb:	00 28                	add    BYTE PTR [eax],ch
300029cd:	00 00                	add    BYTE PTR [eax],al
300029cf:	00 70 04             	add    BYTE PTR [eax+0x4],dh
300029d2:	00 00                	add    BYTE PTR [eax],al
300029d4:	1b df                	sbb    ebx,edi
300029d6:	ff                   	(bad)  
300029d7:	ff e0                	jmp    eax
300029d9:	01 00                	add    DWORD PTR [eax],eax
300029db:	00 00                	add    BYTE PTR [eax],al
300029dd:	41                   	inc    ecx
300029de:	0e                   	push   cs
300029df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300029e5:	45                   	inc    ebp
300029e6:	86 03                	xchg   BYTE PTR [ebx],al
300029e8:	83 04 03 d5          	add    DWORD PTR [ebx+eax*1],0xffffffd5
300029ec:	01 c3                	add    ebx,eax
300029ee:	41                   	inc    ecx
300029ef:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300029f3:	04 04                	add    al,0x4
300029f5:	00 00                	add    BYTE PTR [eax],al
300029f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300029fa:	00 00                	add    BYTE PTR [eax],al
300029fc:	9c                   	pushf  
300029fd:	04 00                	add    al,0x0
300029ff:	00 cf                	add    bh,cl
30002a01:	e0 ff                	loopne 30002a02 <__x86.get_pc_thunk.cx+0x4a6>
30002a03:	ff                   	(bad)  
30002a04:	39 00                	cmp    DWORD PTR [eax],eax
30002a06:	00 00                	add    BYTE PTR [eax],al
30002a08:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002a0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002a11:	75 c5                	jne    300029d8 <__x86.get_pc_thunk.cx+0x47c>
30002a13:	0c 04                	or     al,0x4
30002a15:	04 00                	add    al,0x0
30002a17:	00 20                	add    BYTE PTR [eax],ah
30002a19:	00 00                	add    BYTE PTR [eax],al
30002a1b:	00 bc 04 00 00 e8 e0 	add    BYTE PTR [esp+eax*1-0x1f180000],bh
30002a22:	ff                   	(bad)  
30002a23:	ff 26                	jmp    DWORD PTR [esi]
30002a25:	00 00                	add    BYTE PTR [eax],al
30002a27:	00 00                	add    BYTE PTR [eax],al
30002a29:	41                   	inc    ecx
30002a2a:	0e                   	push   cs
30002a2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002a31:	41                   	inc    ecx
30002a32:	83 03 60             	add    DWORD PTR [ebx],0x60
30002a35:	c3                   	ret    
30002a36:	41                   	inc    ecx
30002a37:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002a3a:	04 00                	add    al,0x0
30002a3c:	10 00                	adc    BYTE PTR [eax],al
30002a3e:	00 00                	add    BYTE PTR [eax],al
30002a40:	e0 04                	loopne 30002a46 <__x86.get_pc_thunk.cx+0x4ea>
30002a42:	00 00                	add    BYTE PTR [eax],al
30002a44:	14 fb                	adc    al,0xfb
30002a46:	ff                   	(bad)  
30002a47:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002a4a:	00 00                	add    BYTE PTR [eax],al
30002a4c:	00 00                	add    BYTE PTR [eax],al
30002a4e:	00 00                	add    BYTE PTR [eax],al
30002a50:	1c 00                	sbb    al,0x0
30002a52:	00 00                	add    BYTE PTR [eax],al
30002a54:	f4                   	hlt    
30002a55:	04 00                	add    al,0x0
30002a57:	00 d8                	add    al,bl
30002a59:	e0 ff                	loopne 30002a5a <__x86.get_pc_thunk.cx+0x4fe>
30002a5b:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
30002a61:	41                   	inc    ecx
30002a62:	0e                   	push   cs
30002a63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002a69:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
30002a6f:	04 1c                	add    al,0x1c
30002a71:	00 00                	add    BYTE PTR [eax],al
30002a73:	00 14 05 00 00 54 e2 	add    BYTE PTR [eax*1-0x1dac0000],dl
30002a7a:	ff                   	(bad)  
30002a7b:	ff c7                	inc    edi
30002a7d:	00 00                	add    BYTE PTR [eax],al
30002a7f:	00 00                	add    BYTE PTR [eax],al
30002a81:	41                   	inc    ecx
30002a82:	0e                   	push   cs
30002a83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002a89:	02 c3                	add    al,bl
30002a8b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002a8e:	04 00                	add    al,0x0
30002a90:	1c 00                	sbb    al,0x0
30002a92:	00 00                	add    BYTE PTR [eax],al
30002a94:	34 05                	xor    al,0x5
30002a96:	00 00                	add    BYTE PTR [eax],al
30002a98:	fb                   	sti    
30002a99:	e2 ff                	loop   30002a9a <__x86.get_pc_thunk.cx+0x53e>
30002a9b:	ff c7                	inc    edi
30002a9d:	00 00                	add    BYTE PTR [eax],al
30002a9f:	00 00                	add    BYTE PTR [eax],al
30002aa1:	41                   	inc    ecx
30002aa2:	0e                   	push   cs
30002aa3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002aa9:	02 c3                	add    al,bl
30002aab:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002aae:	04 00                	add    al,0x0
30002ab0:	1c 00                	sbb    al,0x0
30002ab2:	00 00                	add    BYTE PTR [eax],al
30002ab4:	54                   	push   esp
30002ab5:	05 00 00 a4 e3       	add    eax,0xe3a40000
30002aba:	ff                   	(bad)  
30002abb:	ff 10                	call   DWORD PTR [eax]
30002abd:	00 00                	add    BYTE PTR [eax],al
30002abf:	00 00                	add    BYTE PTR [eax],al
30002ac1:	41                   	inc    ecx
30002ac2:	0e                   	push   cs
30002ac3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ac9:	4c                   	dec    esp
30002aca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002acd:	04 00                	add    al,0x0
30002acf:	00 20                	add    BYTE PTR [eax],ah
30002ad1:	00 00                	add    BYTE PTR [eax],al
30002ad3:	00 74 05 00          	add    BYTE PTR [ebp+eax*1+0x0],dh
30002ad7:	00 94 e3 ff ff 2c 00 	add    BYTE PTR [ebx+eiz*8+0x2cffff],dl
30002ade:	00 00                	add    BYTE PTR [eax],al
30002ae0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ae3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ae9:	44                   	inc    esp
30002aea:	83 03 64             	add    DWORD PTR [ebx],0x64
30002aed:	c5 c3 0c             	(bad)  
30002af0:	04 04                	add    al,0x4
30002af2:	00 00                	add    BYTE PTR [eax],al
30002af4:	20 00                	and    BYTE PTR [eax],al
30002af6:	00 00                	add    BYTE PTR [eax],al
30002af8:	98                   	cwde   
30002af9:	05 00 00 9c e3       	add    eax,0xe39c0000
30002afe:	ff                   	(bad)  
30002aff:	ff 26                	jmp    DWORD PTR [esi]
30002b01:	00 00                	add    BYTE PTR [eax],al
30002b03:	00 00                	add    BYTE PTR [eax],al
30002b05:	41                   	inc    ecx
30002b06:	0e                   	push   cs
30002b07:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b0d:	44                   	inc    esp
30002b0e:	83 03 5e             	add    DWORD PTR [ebx],0x5e
30002b11:	c5 c3 0c             	(bad)  
30002b14:	04 04                	add    al,0x4
30002b16:	00 00                	add    BYTE PTR [eax],al
30002b18:	20 00                	and    BYTE PTR [eax],al
30002b1a:	00 00                	add    BYTE PTR [eax],al
30002b1c:	bc 05 00 00 9e       	mov    esp,0x9e000005
30002b21:	e3 ff                	jecxz  30002b22 <__x86.get_pc_thunk.cx+0x5c6>
30002b23:	ff 37                	push   DWORD PTR [edi]
30002b25:	01 00                	add    DWORD PTR [eax],eax
30002b27:	00 00                	add    BYTE PTR [eax],al
30002b29:	41                   	inc    ecx
30002b2a:	0e                   	push   cs
30002b2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b31:	44                   	inc    esp
30002b32:	83 03 03             	add    DWORD PTR [ebx],0x3
30002b35:	2f                   	das    
30002b36:	01 c5                	add    ebp,eax
30002b38:	c3                   	ret    
30002b39:	0c 04                	or     al,0x4
30002b3b:	04 20                	add    al,0x20
30002b3d:	00 00                	add    BYTE PTR [eax],al
30002b3f:	00 e0                	add    al,ah
30002b41:	05 00 00 b1 e4       	add    eax,0xe4b10000
30002b46:	ff                   	(bad)  
30002b47:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
30002b4e:	0e                   	push   cs
30002b4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b55:	44                   	inc    esp
30002b56:	83 03 02             	add    DWORD PTR [ebx],0x2
30002b59:	7c c5                	jl     30002b20 <__x86.get_pc_thunk.cx+0x5c4>
30002b5b:	c3                   	ret    
30002b5c:	0c 04                	or     al,0x4
30002b5e:	04 00                	add    al,0x0
30002b60:	1c 00                	sbb    al,0x0
30002b62:	00 00                	add    BYTE PTR [eax],al
30002b64:	04 06                	add    al,0x6
30002b66:	00 00                	add    BYTE PTR [eax],al
30002b68:	11 e5                	adc    ebp,esp
30002b6a:	ff                   	(bad)  
30002b6b:	ff 53 00             	call   DWORD PTR [ebx+0x0]
30002b6e:	00 00                	add    BYTE PTR [eax],al
30002b70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002b73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b79:	02 4f c5             	add    cl,BYTE PTR [edi-0x3b]
30002b7c:	0c 04                	or     al,0x4
30002b7e:	04 00                	add    al,0x0
30002b80:	20 00                	and    BYTE PTR [eax],al
30002b82:	00 00                	add    BYTE PTR [eax],al
30002b84:	24 06                	and    al,0x6
30002b86:	00 00                	add    BYTE PTR [eax],al
30002b88:	44                   	inc    esp
30002b89:	e5 ff                	in     eax,0xff
30002b8b:	ff                   	(bad)  
30002b8c:	3e 00 00             	add    BYTE PTR ds:[eax],al
30002b8f:	00 00                	add    BYTE PTR [eax],al
30002b91:	41                   	inc    ecx
30002b92:	0e                   	push   cs
30002b93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b99:	44                   	inc    esp
30002b9a:	83 03 76             	add    DWORD PTR [ebx],0x76
30002b9d:	c5 c3 0c             	(bad)  
30002ba0:	04 04                	add    al,0x4
30002ba2:	00 00                	add    BYTE PTR [eax],al
30002ba4:	20 00                	and    BYTE PTR [eax],al
30002ba6:	00 00                	add    BYTE PTR [eax],al
30002ba8:	48                   	dec    eax
30002ba9:	06                   	push   es
30002baa:	00 00                	add    BYTE PTR [eax],al
30002bac:	5e                   	pop    esi
30002bad:	e5 ff                	in     eax,0xff
30002baf:	ff                   	(bad)  
30002bb0:	3e 00 00             	add    BYTE PTR ds:[eax],al
30002bb3:	00 00                	add    BYTE PTR [eax],al
30002bb5:	41                   	inc    ecx
30002bb6:	0e                   	push   cs
30002bb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bbd:	44                   	inc    esp
30002bbe:	83 03 76             	add    DWORD PTR [ebx],0x76
30002bc1:	c5 c3 0c             	(bad)  
30002bc4:	04 04                	add    al,0x4
30002bc6:	00 00                	add    BYTE PTR [eax],al
30002bc8:	1c 00                	sbb    al,0x0
30002bca:	00 00                	add    BYTE PTR [eax],al
30002bcc:	6c                   	ins    BYTE PTR es:[edi],dx
30002bcd:	06                   	push   es
30002bce:	00 00                	add    BYTE PTR [eax],al
30002bd0:	78 e5                	js     30002bb7 <__x86.get_pc_thunk.cx+0x65b>
30002bd2:	ff                   	(bad)  
30002bd3:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
30002bd6:	00 00                	add    BYTE PTR [eax],al
30002bd8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002bdb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002be1:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
30002be4:	0c 04                	or     al,0x4
30002be6:	04 00                	add    al,0x0
30002be8:	24 00                	and    al,0x0
30002bea:	00 00                	add    BYTE PTR [eax],al
30002bec:	8c 06                	mov    WORD PTR [esi],es
30002bee:	00 00                	add    BYTE PTR [eax],al
30002bf0:	c8 e5 ff ff          	enter  0xffe5,0xff
30002bf4:	5e                   	pop    esi
30002bf5:	00 00                	add    BYTE PTR [eax],al
30002bf7:	00 00                	add    BYTE PTR [eax],al
30002bf9:	41                   	inc    ecx
30002bfa:	0e                   	push   cs
30002bfb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c01:	45                   	inc    ebp
30002c02:	86 03                	xchg   BYTE PTR [ebx],al
30002c04:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
30002c08:	c3                   	ret    
30002c09:	41                   	inc    ecx
30002c0a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002c0e:	04 04                	add    al,0x4
30002c10:	1c 00                	sbb    al,0x0
30002c12:	00 00                	add    BYTE PTR [eax],al
30002c14:	b4 06                	mov    ah,0x6
30002c16:	00 00                	add    BYTE PTR [eax],al
30002c18:	00 e6                	add    dh,ah
30002c1a:	ff                   	(bad)  
30002c1b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30002c1e:	00 00                	add    BYTE PTR [eax],al
30002c20:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c29:	7c c5                	jl     30002bf0 <__x86.get_pc_thunk.cx+0x694>
30002c2b:	0c 04                	or     al,0x4
30002c2d:	04 00                	add    al,0x0
30002c2f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002c32:	00 00                	add    BYTE PTR [eax],al
30002c34:	d4 06                	aam    0x6
30002c36:	00 00                	add    BYTE PTR [eax],al
30002c38:	20 e6                	and    dh,ah
30002c3a:	ff                   	(bad)  
30002c3b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
30002c3e:	00 00                	add    BYTE PTR [eax],al
30002c40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c49:	7c c5                	jl     30002c10 <__x86.get_pc_thunk.cx+0x6b4>
30002c4b:	0c 04                	or     al,0x4
30002c4d:	04 00                	add    al,0x0
30002c4f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002c52:	00 00                	add    BYTE PTR [eax],al
30002c54:	f4                   	hlt    
30002c55:	06                   	push   es
30002c56:	00 00                	add    BYTE PTR [eax],al
30002c58:	40                   	inc    eax
30002c59:	e6 ff                	out    0xff,al
30002c5b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
30002c5e:	00 00                	add    BYTE PTR [eax],al
30002c60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c69:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
30002c6c:	0c 04                	or     al,0x4
30002c6e:	04 00                	add    al,0x0
30002c70:	1c 00                	sbb    al,0x0
30002c72:	00 00                	add    BYTE PTR [eax],al
30002c74:	14 07                	adc    al,0x7
30002c76:	00 00                	add    BYTE PTR [eax],al
30002c78:	68 e6 ff ff 30       	push   0x30ffffe6
30002c7d:	00 00                	add    BYTE PTR [eax],al
30002c7f:	00 00                	add    BYTE PTR [eax],al
30002c81:	41                   	inc    ecx
30002c82:	0e                   	push   cs
30002c83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c89:	6c                   	ins    BYTE PTR es:[edi],dx
30002c8a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002c8d:	04 00                	add    al,0x0
30002c8f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002c92:	00 00                	add    BYTE PTR [eax],al
30002c94:	34 07                	xor    al,0x7
30002c96:	00 00                	add    BYTE PTR [eax],al
30002c98:	78 e6                	js     30002c80 <__x86.get_pc_thunk.cx+0x724>
30002c9a:	ff                   	(bad)  
30002c9b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
30002c9e:	00 00                	add    BYTE PTR [eax],al
30002ca0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ca3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ca9:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
30002cac:	0c 04                	or     al,0x4
30002cae:	04 00                	add    al,0x0
30002cb0:	1c 00                	sbb    al,0x0
30002cb2:	00 00                	add    BYTE PTR [eax],al
30002cb4:	54                   	push   esp
30002cb5:	07                   	pop    es
30002cb6:	00 00                	add    BYTE PTR [eax],al
30002cb8:	b4 e6                	mov    ah,0xe6
30002cba:	ff                   	(bad)  
30002cbb:	ff 31                	push   DWORD PTR [ecx]
30002cbd:	00 00                	add    BYTE PTR [eax],al
30002cbf:	00 00                	add    BYTE PTR [eax],al
30002cc1:	41                   	inc    ecx
30002cc2:	0e                   	push   cs
30002cc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cc9:	6d                   	ins    DWORD PTR es:[edi],dx
30002cca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002ccd:	04 00                	add    al,0x0
30002ccf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002cd2:	00 00                	add    BYTE PTR [eax],al
30002cd4:	74 07                	je     30002cdd <__x86.get_pc_thunk.cx+0x781>
30002cd6:	00 00                	add    BYTE PTR [eax],al
30002cd8:	c5 e6 ff             	(bad)  
30002cdb:	ff 31                	push   DWORD PTR [ecx]
30002cdd:	00 00                	add    BYTE PTR [eax],al
30002cdf:	00 00                	add    BYTE PTR [eax],al
30002ce1:	41                   	inc    ecx
30002ce2:	0e                   	push   cs
30002ce3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ce9:	6d                   	ins    DWORD PTR es:[edi],dx
30002cea:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002ced:	04 00                	add    al,0x0
30002cef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002cf2:	00 00                	add    BYTE PTR [eax],al
30002cf4:	94                   	xchg   esp,eax
30002cf5:	07                   	pop    es
30002cf6:	00 00                	add    BYTE PTR [eax],al
30002cf8:	d8 e6                	fsub   st,st(6)
30002cfa:	ff                   	(bad)  
30002cfb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
30002cfe:	00 00                	add    BYTE PTR [eax],al
30002d00:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d09:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
30002d0c:	0c 04                	or     al,0x4
30002d0e:	04 00                	add    al,0x0
30002d10:	1c 00                	sbb    al,0x0
30002d12:	00 00                	add    BYTE PTR [eax],al
30002d14:	b4 07                	mov    ah,0x7
30002d16:	00 00                	add    BYTE PTR [eax],al
30002d18:	20 e7                	and    bh,ah
30002d1a:	ff                   	(bad)  
30002d1b:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
30002d1e:	00 00                	add    BYTE PTR [eax],al
30002d20:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d29:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
30002d2d:	04 04                	add    al,0x4
30002d2f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30002d32:	00 00                	add    BYTE PTR [eax],al
30002d34:	d4 07                	aam    0x7
30002d36:	00 00                	add    BYTE PTR [eax],al
30002d38:	60                   	pusha  
30002d39:	e7 ff                	out    0xff,eax
30002d3b:	ff                   	(bad)  
30002d3c:	7d 01                	jge    30002d3f <__x86.get_pc_thunk.cx+0x7e3>
30002d3e:	00 00                	add    BYTE PTR [eax],al
30002d40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d49:	46                   	inc    esi
30002d4a:	87 03                	xchg   DWORD PTR [ebx],eax
30002d4c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30002d4f:	05 03 70 01 c3       	add    eax,0xc3017003
30002d54:	41                   	inc    ecx
30002d55:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30002d59:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d5c:	04 00                	add    al,0x0
30002d5e:	00 00                	add    BYTE PTR [eax],al
30002d60:	1c 00                	sbb    al,0x0
30002d62:	00 00                	add    BYTE PTR [eax],al
30002d64:	04 08                	add    al,0x8
30002d66:	00 00                	add    BYTE PTR [eax],al
30002d68:	b0 e8                	mov    al,0xe8
30002d6a:	ff                   	(bad)  
30002d6b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30002d71:	41                   	inc    ecx
30002d72:	0e                   	push   cs
30002d73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d79:	59                   	pop    ecx
30002d7a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002d7d:	04 00                	add    al,0x0
30002d7f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30002d82:	00 00                	add    BYTE PTR [eax],al
30002d84:	24 08                	and    al,0x8
30002d86:	00 00                	add    BYTE PTR [eax],al
30002d88:	b0 e8                	mov    al,0xe8
30002d8a:	ff                   	(bad)  
30002d8b:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
30002d92:	0e                   	push   cs
30002d93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d99:	46                   	inc    esi
30002d9a:	87 03                	xchg   DWORD PTR [ebx],eax
30002d9c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30002d9f:	05 03 8f 01 c3       	add    eax,0xc3018f03
30002da4:	41                   	inc    ecx
30002da5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30002da9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002dac:	04 00                	add    al,0x0
30002dae:	00 00                	add    BYTE PTR [eax],al
30002db0:	20 00                	and    BYTE PTR [eax],al
30002db2:	00 00                	add    BYTE PTR [eax],al
30002db4:	54                   	push   esp
30002db5:	08 00                	or     BYTE PTR [eax],al
30002db7:	00 1c ea             	add    BYTE PTR [edx+ebp*8],bl
30002dba:	ff                   	(bad)  
30002dbb:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
30002dc1:	41                   	inc    ecx
30002dc2:	0e                   	push   cs
30002dc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002dc9:	44                   	inc    esp
30002dca:	83 03 02             	add    DWORD PTR [ebx],0x2
30002dcd:	8e c5                	mov    es,ebp
30002dcf:	c3                   	ret    
30002dd0:	0c 04                	or     al,0x4
30002dd2:	04 00                	add    al,0x0
30002dd4:	24 00                	and    al,0x0
30002dd6:	00 00                	add    BYTE PTR [eax],al
30002dd8:	78 08                	js     30002de2 <__x86.get_pc_thunk.cx+0x886>
30002dda:	00 00                	add    BYTE PTR [eax],al
30002ddc:	90                   	nop
30002ddd:	ea ff ff 6e 00 00 00 	jmp    0x0:0x6effff
30002de4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002de7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ded:	42                   	inc    edx
30002dee:	86 03                	xchg   BYTE PTR [ebx],al
30002df0:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
30002df4:	c3                   	ret    
30002df5:	41                   	inc    ecx
30002df6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002dfa:	04 04                	add    al,0x4
30002dfc:	1c 00                	sbb    al,0x0
30002dfe:	00 00                	add    BYTE PTR [eax],al
30002e00:	a0 08 00 00 d8       	mov    al,ds:0xd8000008
30002e05:	ea ff ff 29 00 00 00 	jmp    0x0:0x29ffff
30002e0c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e15:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30002e19:	04 00                	add    al,0x0
30002e1b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002e1e:	00 00                	add    BYTE PTR [eax],al
30002e20:	c0 08 00             	ror    BYTE PTR [eax],0x0
30002e23:	00 e1                	add    cl,ah
30002e25:	ea ff ff 19 03 00 00 	jmp    0x0:0x319ffff
30002e2c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e35:	44                   	inc    esp
30002e36:	83 03 03             	add    DWORD PTR [ebx],0x3
30002e39:	10 03                	adc    BYTE PTR [ebx],al
30002e3b:	c3                   	ret    
30002e3c:	41                   	inc    ecx
30002e3d:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002e40:	04 00                	add    al,0x0
30002e42:	00 00                	add    BYTE PTR [eax],al
30002e44:	20 00                	and    BYTE PTR [eax],al
30002e46:	00 00                	add    BYTE PTR [eax],al
30002e48:	e8 08 00 00 d2       	call   2002e55 <sysEnter_Vector+0x1ed2e55>
30002e4d:	ed                   	in     eax,dx
30002e4e:	ff                   	(bad)  
30002e4f:	ff                   	(bad)  
30002e50:	3f                   	aas    
30002e51:	00 00                	add    BYTE PTR [eax],al
30002e53:	00 00                	add    BYTE PTR [eax],al
30002e55:	41                   	inc    ecx
30002e56:	0e                   	push   cs
30002e57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e5d:	44                   	inc    esp
30002e5e:	83 03 77             	add    DWORD PTR [ebx],0x77
30002e61:	c5 c3 0c             	(bad)  
30002e64:	04 04                	add    al,0x4
30002e66:	00 00                	add    BYTE PTR [eax],al
30002e68:	20 00                	and    BYTE PTR [eax],al
30002e6a:	00 00                	add    BYTE PTR [eax],al
30002e6c:	0c 09                	or     al,0x9
30002e6e:	00 00                	add    BYTE PTR [eax],al
30002e70:	ed                   	in     eax,dx
30002e71:	ed                   	in     eax,dx
30002e72:	ff                   	(bad)  
30002e73:	ff                   	(bad)  
30002e74:	3e 00 00             	add    BYTE PTR ds:[eax],al
30002e77:	00 00                	add    BYTE PTR [eax],al
30002e79:	41                   	inc    ecx
30002e7a:	0e                   	push   cs
30002e7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e81:	44                   	inc    esp
30002e82:	83 03 76             	add    DWORD PTR [ebx],0x76
30002e85:	c5 c3 0c             	(bad)  
30002e88:	04 04                	add    al,0x4
30002e8a:	00 00                	add    BYTE PTR [eax],al
30002e8c:	2c 00                	sub    al,0x0
30002e8e:	00 00                	add    BYTE PTR [eax],al
30002e90:	30 09                	xor    BYTE PTR [ecx],cl
30002e92:	00 00                	add    BYTE PTR [eax],al
30002e94:	07                   	pop    es
30002e95:	ee                   	out    dx,al
30002e96:	ff                   	(bad)  
30002e97:	ff 57 08             	call   DWORD PTR [edi+0x8]
30002e9a:	00 00                	add    BYTE PTR [eax],al
30002e9c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e9f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ea5:	46                   	inc    esi
30002ea6:	87 03                	xchg   DWORD PTR [ebx],eax
30002ea8:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
30002eab:	05 03 4a 08 c3       	add    eax,0xc3084a03
30002eb0:	41                   	inc    ecx
30002eb1:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30002eb5:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002eb8:	04 00                	add    al,0x0
30002eba:	00 00                	add    BYTE PTR [eax],al
30002ebc:	10 00                	adc    BYTE PTR [eax],al
30002ebe:	00 00                	add    BYTE PTR [eax],al
30002ec0:	60                   	pusha  
30002ec1:	09 00                	or     DWORD PTR [eax],eax
30002ec3:	00 98 f6 ff ff 04    	add    BYTE PTR [eax+0x4fffff6],bl
30002ec9:	00 00                	add    BYTE PTR [eax],al
30002ecb:	00 00                	add    BYTE PTR [eax],al
30002ecd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

30002ed0 <.dynsym>:
	...
30002ee0:	c5 00                	lds    eax,FWORD PTR [eax]
30002ee2:	00 00                	add    BYTE PTR [eax],al
30002ee4:	18 12                	sbb    BYTE PTR [edx],dl
30002ee6:	00 30                	add    BYTE PTR [eax],dh
30002ee8:	40                   	inc    eax
30002ee9:	00 00                	add    BYTE PTR [eax],al
30002eeb:	00 12                	add    BYTE PTR [edx],dl
30002eed:	00 01                	add    BYTE PTR [ecx],al
30002eef:	00 68 00             	add    BYTE PTR [eax+0x0],ch
30002ef2:	00 00                	add    BYTE PTR [eax],al
30002ef4:	88 07                	mov    BYTE PTR [edi],al
30002ef6:	00 30                	add    BYTE PTR [eax],dh
30002ef8:	1d 00 00 00 12       	sbb    eax,0x12000000
30002efd:	00 01                	add    BYTE PTR [ecx],al
30002eff:	00 4a 00             	add    BYTE PTR [edx+0x0],cl
30002f02:	00 00                	add    BYTE PTR [eax],al
30002f04:	13 06                	adc    eax,DWORD PTR [esi]
30002f06:	00 30                	add    BYTE PTR [eax],dh
30002f08:	34 00                	xor    al,0x0
30002f0a:	00 00                	add    BYTE PTR [eax],al
30002f0c:	12 00                	adc    al,BYTE PTR [eax]
30002f0e:	01 00                	add    DWORD PTR [eax],eax
30002f10:	db 00                	fild   DWORD PTR [eax]
30002f12:	00 00                	add    BYTE PTR [eax],al
30002f14:	10 13                	adc    BYTE PTR [ebx],dl
30002f16:	00 30                	add    BYTE PTR [eax],dh
30002f18:	59                   	pop    ecx
30002f19:	00 00                	add    BYTE PTR [eax],al
30002f1b:	00 12                	add    BYTE PTR [edx],dl
30002f1d:	00 01                	add    BYTE PTR [ecx],al
30002f1f:	00 ae 00 00 00 f5    	add    BYTE PTR [esi-0xb000000],ch
30002f25:	0f 00                	(bad)  
30002f27:	30 84 00 00 00 12 00 	xor    BYTE PTR [eax+eax*1+0x120000],al
30002f2e:	01 00                	add    DWORD PTR [eax],eax
30002f30:	3b 00                	cmp    eax,DWORD PTR [eax]
30002f32:	00 00                	add    BYTE PTR [eax],al
30002f34:	dc 03                	fadd   QWORD PTR [ebx]
30002f36:	00 30                	add    BYTE PTR [eax],dh
30002f38:	ba 00 00 00 12       	mov    edx,0x12000000
30002f3d:	00 01                	add    BYTE PTR [ecx],al
30002f3f:	00 36                	add    BYTE PTR [esi],dh
30002f41:	00 00                	add    BYTE PTR [eax],al
30002f43:	00 ad 03 00 30 2f    	add    BYTE PTR [ebp+0x2f300003],ch
30002f49:	00 00                	add    BYTE PTR [eax],al
30002f4b:	00 12                	add    BYTE PTR [edx],dl
30002f4d:	00 01                	add    BYTE PTR [ecx],al
30002f4f:	00 94 00 00 00 30 0b 	add    BYTE PTR [eax+eax*1+0xb300000],dl
30002f56:	00 30                	add    BYTE PTR [eax],dh
30002f58:	9b                   	fwait
30002f59:	01 00                	add    DWORD PTR [eax],eax
30002f5b:	00 12                	add    BYTE PTR [edx],dl
30002f5d:	00 01                	add    BYTE PTR [ecx],al
30002f5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f62:	00 00                	add    BYTE PTR [eax],al
30002f64:	44                   	inc    esp
30002f65:	03 00                	add    eax,DWORD PTR [eax]
30002f67:	30 26                	xor    BYTE PTR [esi],ah
30002f69:	00 00                	add    BYTE PTR [eax],al
30002f6b:	00 12                	add    BYTE PTR [edx],dl
30002f6d:	00 01                	add    BYTE PTR [ecx],al
30002f6f:	00 88 00 00 00 ef    	add    BYTE PTR [eax-0x11000000],cl
30002f75:	08 00                	or     BYTE PTR [eax],al
30002f77:	30 e0                	xor    al,ah
30002f79:	01 00                	add    DWORD PTR [eax],eax
30002f7b:	00 12                	add    BYTE PTR [edx],dl
30002f7d:	00 01                	add    BYTE PTR [ecx],al
30002f7f:	00 50 00             	add    BYTE PTR [eax+0x0],dl
30002f82:	00 00                	add    BYTE PTR [eax],al
30002f84:	b0 06                	mov    al,0x6
30002f86:	00 30                	add    BYTE PTR [eax],dh
30002f88:	46                   	inc    esi
30002f89:	00 00                	add    BYTE PTR [eax],al
30002f8b:	00 12                	add    BYTE PTR [edx],dl
30002f8d:	00 01                	add    BYTE PTR [ecx],al
30002f8f:	00 f4                	add    ah,dh
30002f91:	00 00                	add    BYTE PTR [eax],al
30002f93:	00 98 14 00 30 7d    	add    BYTE PTR [eax+0x7d300014],bl
30002f99:	01 00                	add    DWORD PTR [eax],eax
30002f9b:	00 12                	add    BYTE PTR [edx],dl
30002f9d:	00 01                	add    BYTE PTR [ecx],al
30002f9f:	00 a2 00 00 00 5c    	add    BYTE PTR [edx+0x5c000000],ah
30002fa5:	0e                   	push   cs
30002fa6:	00 30                	add    BYTE PTR [eax],dh
30002fa8:	10 00                	adc    BYTE PTR [eax],al
30002faa:	00 00                	add    BYTE PTR [eax],al
30002fac:	12 00                	adc    al,BYTE PTR [eax]
30002fae:	01 00                	add    DWORD PTR [eax],eax
30002fb0:	78 00                	js     30002fb2 <__x86.get_pc_thunk.cx+0xa56>
30002fb2:	00 00                	add    BYTE PTR [eax],al
30002fb4:	05 19 00 30 19       	add    eax,0x19300019
30002fb9:	03 00                	add    eax,DWORD PTR [eax]
30002fbb:	00 12                	add    BYTE PTR [edx],dl
30002fbd:	00 01                	add    BYTE PTR [ecx],al
30002fbf:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
30002fc2:	00 00                	add    BYTE PTR [eax],al
30002fc4:	38 16                	cmp    BYTE PTR [esi],dl
30002fc6:	00 30                	add    BYTE PTR [eax],dh
30002fc8:	9c                   	pushf  
30002fc9:	01 00                	add    DWORD PTR [eax],eax
30002fcb:	00 12                	add    BYTE PTR [edx],dl
30002fcd:	00 01                	add    BYTE PTR [ecx],al
30002fcf:	00 40 00             	add    BYTE PTR [eax+0x0],al
30002fd2:	00 00                	add    BYTE PTR [eax],al
30002fd4:	50                   	push   eax
30002fd5:	05 00 30 a4 00       	add    eax,0xa43000
30002fda:	00 00                	add    BYTE PTR [eax],al
30002fdc:	12 00                	adc    al,BYTE PTR [eax]
30002fde:	01 00                	add    DWORD PTR [eax],eax
30002fe0:	b7 00                	mov    bh,0x0
30002fe2:	00 00                	add    BYTE PTR [eax],al
30002fe4:	cc                   	int3   
30002fe5:	10 00                	adc    BYTE PTR [eax],al
30002fe7:	30 3e                	xor    BYTE PTR [esi],bh
30002fe9:	00 00                	add    BYTE PTR [eax],al
30002feb:	00 12                	add    BYTE PTR [edx],dl
30002fed:	00 01                	add    BYTE PTR [ecx],al
30002fef:	00 63 00             	add    BYTE PTR [ebx+0x0],ah
30002ff2:	00 00                	add    BYTE PTR [eax],al
30002ff4:	3c 07                	cmp    al,0x7
30002ff6:	00 30                	add    BYTE PTR [eax],dh
30002ff8:	4c                   	dec    esp
30002ff9:	00 00                	add    BYTE PTR [eax],al
30002ffb:	00 12                	add    BYTE PTR [edx],dl
30002ffd:	00 01                	add    BYTE PTR [ecx],al
30002fff:	00 30                	add    BYTE PTR [eax],dh
30003001:	01 00                	add    DWORD PTR [eax],eax
30003003:	00 9b 1c 00 30 57    	add    BYTE PTR [ebx+0x5730001c],bl
30003009:	08 00                	or     BYTE PTR [eax],al
3000300b:	00 12                	add    BYTE PTR [edx],dl
3000300d:	00 01                	add    BYTE PTR [ecx],al
3000300f:	00 13                	add    BYTE PTR [ebx],dl
30003011:	01 00                	add    DWORD PTR [eax],eax
30003013:	00 6c 18 00          	add    BYTE PTR [eax+ebx*1+0x0],ch
30003017:	30 6e 00             	xor    BYTE PTR [esi+0x0],ch
3000301a:	00 00                	add    BYTE PTR [eax],al
3000301c:	12 00                	adc    al,BYTE PTR [eax]
3000301e:	01 00                	add    DWORD PTR [eax],eax
30003020:	e4 00                	in     al,0x0
30003022:	00 00                	add    BYTE PTR [eax],al
30003024:	d0 13                	rcl    BYTE PTR [ebx],1
30003026:	00 30                	add    BYTE PTR [eax],dh
30003028:	67 00 00             	add    BYTE PTR [bx+si],al
3000302b:	00 12                	add    BYTE PTR [edx],dl
3000302d:	00 01                	add    BYTE PTR [ecx],al
3000302f:	00 ec                	add    ah,ch
30003031:	00 00                	add    BYTE PTR [eax],al
30003033:	00 38                	add    BYTE PTR [eax],bh
30003035:	14 00                	adc    al,0x0
30003037:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
3000303a:	00 00                	add    BYTE PTR [eax],al
3000303c:	12 00                	adc    al,BYTE PTR [eax]
3000303e:	01 00                	add    DWORD PTR [eax],eax
30003040:	10 00                	adc    BYTE PTR [eax],al
30003042:	00 00                	add    BYTE PTR [eax],al
30003044:	1c 01                	sbb    al,0x1
30003046:	00 30                	add    BYTE PTR [eax],dh
30003048:	97                   	xchg   edi,eax
30003049:	00 00                	add    BYTE PTR [eax],al
3000304b:	00 12                	add    BYTE PTR [edx],dl
3000304d:	00 01                	add    BYTE PTR [ecx],al
3000304f:	00 21                	add    BYTE PTR [ecx],ah
30003051:	00 00                	add    BYTE PTR [eax],al
30003053:	00 00                	add    BYTE PTR [eax],al
30003055:	00 13                	add    BYTE PTR [ebx],dl
30003057:	00 00                	add    BYTE PTR [eax],al
30003059:	00 00                	add    BYTE PTR [eax],al
3000305b:	00 10                	add    BYTE PTR [eax],dl
3000305d:	00 01                	add    BYTE PTR [ecx],al
3000305f:	00 1a                	add    BYTE PTR [edx],bl
30003061:	01 00                	add    DWORD PTR [eax],eax
30003063:	00 1e                	add    BYTE PTR [esi],bl
30003065:	1c 00                	sbb    al,0x0
30003067:	30 3f                	xor    BYTE PTR [edi],bh
30003069:	00 00                	add    BYTE PTR [eax],al
3000306b:	00 12                	add    BYTE PTR [edx],dl
3000306d:	00 01                	add    BYTE PTR [ecx],al
3000306f:	00 9b 00 00 00 cc    	add    BYTE PTR [ebx-0x34000000],bl
30003075:	0c 00                	or     al,0x0
30003077:	30 c7                	xor    bh,al
30003079:	00 00                	add    BYTE PTR [eax],al
3000307b:	00 12                	add    BYTE PTR [edx],dl
3000307d:	00 01                	add    BYTE PTR [ecx],al
3000307f:	00 0b                	add    BYTE PTR [ebx],cl
30003081:	01 00                	add    DWORD PTR [eax],eax
30003083:	00 d4                	add    ah,dl
30003085:	17                   	pop    ss
30003086:	00 30                	add    BYTE PTR [eax],dh
30003088:	96                   	xchg   esi,eax
30003089:	00 00                	add    BYTE PTR [eax],al
3000308b:	00 12                	add    BYTE PTR [edx],dl
3000308d:	00 01                	add    BYTE PTR [ecx],al
3000308f:	00 32                	add    BYTE PTR [edx],dh
30003091:	01 00                	add    DWORD PTR [eax],eax
30003093:	00 dc                	add    ah,bl
30003095:	18 00                	sbb    BYTE PTR [eax],al
30003097:	30 29                	xor    BYTE PTR [ecx],ch
30003099:	00 00                	add    BYTE PTR [eax],al
3000309b:	00 12                	add    BYTE PTR [edx],dl
3000309d:	00 01                	add    BYTE PTR [ecx],al
3000309f:	00 31                	add    BYTE PTR [ecx],dh
300030a1:	00 00                	add    BYTE PTR [eax],al
300030a3:	00 6a 03             	add    BYTE PTR [edx+0x3],ch
300030a6:	00 30                	add    BYTE PTR [eax],dh
300030a8:	43                   	inc    ebx
300030a9:	00 00                	add    BYTE PTR [eax],al
300030ab:	00 12                	add    BYTE PTR [edx],dl
300030ad:	00 01                	add    BYTE PTR [ecx],al
300030af:	00 cc                	add    ah,cl
300030b1:	00 00                	add    BYTE PTR [eax],al
300030b3:	00 b8 11 00 30 5e    	add    BYTE PTR [eax+0x5e300011],bh
300030b9:	00 00                	add    BYTE PTR [eax],al
300030bb:	00 12                	add    BYTE PTR [edx],dl
300030bd:	00 01                	add    BYTE PTR [ecx],al
300030bf:	00 81 00 00 00 e5    	add    BYTE PTR [ecx-0x1b000000],al
300030c5:	07                   	pop    es
300030c6:	00 30                	add    BYTE PTR [eax],dh
300030c8:	20 00                	and    BYTE PTR [eax],al
300030ca:	00 00                	add    BYTE PTR [eax],al
300030cc:	12 00                	adc    al,BYTE PTR [eax]
300030ce:	01 00                	add    DWORD PTR [eax],eax
300030d0:	08 00                	or     BYTE PTR [eax],al
300030d2:	00 00                	add    BYTE PTR [eax],al
300030d4:	70 00                	jo     300030d6 <__x86.get_pc_thunk.cx+0xb7a>
300030d6:	00 30                	add    BYTE PTR [eax],dh
300030d8:	55                   	push   ebp
300030d9:	00 00                	add    BYTE PTR [eax],al
300030db:	00 12                	add    BYTE PTR [edx],dl
300030dd:	00 01                	add    BYTE PTR [ecx],al
300030df:	00 d3                	add    bl,dl
300030e1:	00 00                	add    BYTE PTR [eax],al
300030e3:	00 98 12 00 30 47    	add    BYTE PTR [eax+0x47300012],bl
300030e9:	00 00                	add    BYTE PTR [eax],al
300030eb:	00 12                	add    BYTE PTR [edx],dl
300030ed:	00 01                	add    BYTE PTR [ecx],al
300030ef:	00 56 00             	add    BYTE PTR [esi+0x0],dl
300030f2:	00 00                	add    BYTE PTR [eax],al
300030f4:	13 07                	adc    eax,DWORD PTR [edi]
300030f6:	00 30                	add    BYTE PTR [eax],dh
300030f8:	29 00                	sub    DWORD PTR [eax],eax
300030fa:	00 00                	add    BYTE PTR [eax],al
300030fc:	12 00                	adc    al,BYTE PTR [eax]
300030fe:	01 00                	add    DWORD PTR [eax],eax
30003100:	24 01                	and    al,0x1
30003102:	00 00                	add    BYTE PTR [eax],al
30003104:	5d                   	pop    ebp
30003105:	1c 00                	sbb    al,0x0
30003107:	30 3e                	xor    BYTE PTR [esi],bh
30003109:	00 00                	add    BYTE PTR [eax],al
3000310b:	00 12                	add    BYTE PTR [edx],dl
3000310d:	00 01                	add    BYTE PTR [ecx],al
3000310f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
30003112:	00 00                	add    BYTE PTR [eax],al
30003114:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
30003115:	07                   	pop    es
30003116:	00 30                	add    BYTE PTR [eax],dh
30003118:	40                   	inc    eax
30003119:	00 00                	add    BYTE PTR [eax],al
3000311b:	00 12                	add    BYTE PTR [edx],dl
3000311d:	00 01                	add    BYTE PTR [ecx],al
3000311f:	00 17                	add    BYTE PTR [edi],dl
30003121:	00 00                	add    BYTE PTR [eax],al
30003123:	00 e6                	add    dh,ah
30003125:	02 00                	add    al,BYTE PTR [eax]
30003127:	30 5c 00 00          	xor    BYTE PTR [eax+eax*1+0x0],bl
3000312b:	00 12                	add    BYTE PTR [edx],dl
3000312d:	00 01                	add    BYTE PTR [ecx],al
3000312f:	00 a7 00 00 00 be    	add    BYTE PTR [edi-0x42000000],ah
30003135:	0e                   	push   cs
30003136:	00 30                	add    BYTE PTR [eax],dh
30003138:	37                   	aaa    
30003139:	01 00                	add    DWORD PTR [eax],eax
3000313b:	00 12                	add    BYTE PTR [edx],dl
3000313d:	00 01                	add    BYTE PTR [ecx],al
3000313f:	00 be 00 00 00 6c    	add    BYTE PTR [esi+0x6c000000],bh
30003145:	13 00                	adc    eax,DWORD PTR [eax]
30003147:	30 31                	xor    BYTE PTR [ecx],dh
30003149:	00 00                	add    BYTE PTR [eax],al
3000314b:	00 12                	add    BYTE PTR [edx],dl
3000314d:	00 01                	add    BYTE PTR [ecx],al
3000314f:	00 01                	add    BYTE PTR [ecx],al
30003151:	00 00                	add    BYTE PTR [eax],al
30003153:	00 00                	add    BYTE PTR [eax],al
30003155:	00 00                	add    BYTE PTR [eax],al
30003157:	30 38                	xor    BYTE PTR [eax],bh
30003159:	00 00                	add    BYTE PTR [eax],al
3000315b:	00 12                	add    BYTE PTR [edx],dl
3000315d:	00 01                	add    BYTE PTR [ecx],al
3000315f:	00 fc                	add    ah,bh
30003161:	00 00                	add    BYTE PTR [eax],al
30003163:	00 18                	add    BYTE PTR [eax],bl
30003165:	16                   	push   ss
30003166:	00 30                	add    BYTE PTR [eax],dh
30003168:	1d 00 00 00 12       	sbb    eax,0x12000000
3000316d:	00 01                	add    BYTE PTR [ecx],al
3000316f:	00 8f 00 00 00 cf    	add    BYTE PTR [edi-0x31000000],cl
30003175:	0a 00                	or     al,BYTE PTR [eax]
30003177:	30 39                	xor    BYTE PTR [ecx],bh
30003179:	00 00                	add    BYTE PTR [eax],al
3000317b:	00 12                	add    BYTE PTR [edx],dl
3000317d:	00 01                	add    BYTE PTR [ecx],al
	...

Disassembly of section .dynstr:

30003180 <.dynstr>:
30003180:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003183:	72 63                	jb     300031e8 <__x86.get_pc_thunk.cx+0xc8c>
30003185:	68 72 00 73 74       	push   0x74730072
3000318a:	72 63                	jb     300031ef <__x86.get_pc_thunk.cx+0xc93>
3000318c:	73 70                	jae    300031fe <__x86.get_pc_thunk.cx+0xca2>
3000318e:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000318f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003192:	72 74                	jb     30003208 <__x86.get_pc_thunk.cx+0xcac>
30003194:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003195:	6b 00 61             	imul   eax,DWORD PTR [eax],0x61
30003198:	74 6f                	je     30003209 <__x86.get_pc_thunk.cx+0xcad>
3000319a:	69 00 70 75 74 73    	imul   eax,DWORD PTR [eax],0x73747570
300031a0:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
300031a3:	73 45                	jae    300031ea <__x86.get_pc_thunk.cx+0xc8e>
300031a5:	6e                   	outs   dx,BYTE PTR ds:[esi]
300031a6:	74 65                	je     3000320d <__x86.get_pc_thunk.cx+0xcb1>
300031a8:	72 5f                	jb     30003209 <__x86.get_pc_thunk.cx+0xcad>
300031aa:	56                   	push   esi
300031ab:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
300031b0:	00 70 75             	add    BYTE PTR [eax+0x75],dh
300031b3:	74 63                	je     30003218 <__x86.get_pc_thunk.cx+0xcbc>
300031b5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
300031b8:	74 63                	je     3000321d <__x86.get_pc_thunk.cx+0xcc1>
300031ba:	00 67 65             	add    BYTE PTR [edi+0x65],ah
300031bd:	74 73                	je     30003232 <__x86.get_pc_thunk.cx+0xcd6>
300031bf:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300031c3:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
300031c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
300031c7:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
300031ce:	74 
300031cf:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
300031d2:	65                   	gs
300031d3:	65                   	gs
300031d4:	70 00                	jo     300031d6 <__x86.get_pc_thunk.cx+0xc7a>
300031d6:	6d                   	ins    DWORD PTR es:[edi],dx
300031d7:	6f                   	outs   dx,DWORD PTR ds:[esi]
300031d8:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
300031df:	6e 
300031e0:	61                   	popa   
300031e1:	6c                   	ins    BYTE PTR es:[edi],dx
300031e2:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
300031e5:	65 63 00             	arpl   WORD PTR gs:[eax],ax
300031e8:	77 61                	ja     3000324b <__x86.get_pc_thunk.cx+0xcef>
300031ea:	69 74 70 69 64 00 67 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65670064
300031f1:	65 
300031f2:	74 74                	je     30003268 <__x86.get_pc_thunk.cx+0xd0c>
300031f4:	69 6d 65 00 67 6d 74 	imul   ebp,DWORD PTR [ebp+0x65],0x746d6700
300031fb:	69 6d 65 5f 72 00 67 	imul   ebp,DWORD PTR [ebp+0x65],0x6700725f
30003202:	65                   	gs
30003203:	74 63                	je     30003268 <__x86.get_pc_thunk.cx+0xd0c>
30003205:	77 64                	ja     3000326b <__x86.get_pc_thunk.cx+0xd0f>
30003207:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
3000320a:	6c                   	ins    BYTE PTR es:[edi],dx
3000320b:	6c                   	ins    BYTE PTR es:[edi],dx
3000320c:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000320d:	63 00                	arpl   WORD PTR [eax],ax
3000320f:	66                   	data16
30003210:	72 65                	jb     30003277 <__x86.get_pc_thunk.cx+0xd1b>
30003212:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
30003216:	6d                   	ins    DWORD PTR es:[edi],dx
30003217:	63 70 79             	arpl   WORD PTR [eax+0x79],si
3000321a:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
3000321d:	6d                   	ins    DWORD PTR es:[edi],dx
3000321e:	73 65                	jae    30003285 <__x86.get_pc_thunk.cx+0xd29>
30003220:	74 00                	je     30003222 <__x86.get_pc_thunk.cx+0xcc6>
30003222:	6d                   	ins    DWORD PTR es:[edi],dx
30003223:	6d                   	ins    DWORD PTR es:[edi],dx
30003224:	61                   	popa   
30003225:	70 00                	jo     30003227 <__x86.get_pc_thunk.cx+0xccb>
30003227:	6d                   	ins    DWORD PTR es:[edi],dx
30003228:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003229:	76 65                	jbe    30003290 <__x86.get_pc_thunk.cx+0xd34>
3000322b:	54                   	push   esp
3000322c:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000322d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003230:	73 65                	jae    30003297 <__x86.get_pc_thunk.cx+0xd3b>
30003232:	74 52                	je     30003286 <__x86.get_pc_thunk.cx+0xd2a>
30003234:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003235:	77 00                	ja     30003237 <__x86.get_pc_thunk.cx+0xcdb>
30003237:	73 74                	jae    300032ad <__x86.get_pc_thunk.cx+0xd51>
30003239:	72 63                	jb     3000329e <__x86.get_pc_thunk.cx+0xd42>
3000323b:	61                   	popa   
3000323c:	74 00                	je     3000323e <__x86.get_pc_thunk.cx+0xce2>
3000323e:	73 74                	jae    300032b4 <__x86.get_pc_thunk.cx+0xd58>
30003240:	72 6c                	jb     300032ae <__x86.get_pc_thunk.cx+0xd52>
30003242:	65 6e                	outs   dx,BYTE PTR gs:[esi]
30003244:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003247:	72 63                	jb     300032ac <__x86.get_pc_thunk.cx+0xd50>
30003249:	70 79                	jo     300032c4 <__x86.get_pc_thunk.cx+0xd68>
3000324b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000324e:	72 63                	jb     300032b3 <__x86.get_pc_thunk.cx+0xd57>
30003250:	6d                   	ins    DWORD PTR es:[edi],dx
30003251:	70 00                	jo     30003253 <__x86.get_pc_thunk.cx+0xcf7>
30003253:	73 74                	jae    300032c9 <__x86.get_pc_thunk.cx+0xd6d>
30003255:	72 63                	jb     300032ba <__x86.get_pc_thunk.cx+0xd5e>
30003257:	70 79                	jo     300032d2 <__x86.get_pc_thunk.cx+0xd76>
30003259:	63 00                	arpl   WORD PTR [eax],ax
3000325b:	73 74                	jae    300032d1 <__x86.get_pc_thunk.cx+0xd75>
3000325d:	72 69                	jb     300032c8 <__x86.get_pc_thunk.cx+0xd6c>
3000325f:	73 6e                	jae    300032cf <__x86.get_pc_thunk.cx+0xd73>
30003261:	75 6d                	jne    300032d0 <__x86.get_pc_thunk.cx+0xd74>
30003263:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003266:	72 6e                	jb     300032d6 <__x86.get_pc_thunk.cx+0xd7a>
30003268:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
3000326b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000326e:	72 6e                	jb     300032de <__x86.get_pc_thunk.cx+0xd82>
30003270:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003273:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003276:	72 74                	jb     300032ec <__x86.get_pc_thunk.cx+0xd90>
30003278:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003279:	75 6c                	jne    300032e7 <__x86.get_pc_thunk.cx+0xd8b>
3000327b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000327e:	72 6c                	jb     300032ec <__x86.get_pc_thunk.cx+0xd90>
30003280:	65                   	gs
30003281:	66                   	data16
30003282:	74 00                	je     30003284 <__x86.get_pc_thunk.cx+0xd28>
30003284:	73 74                	jae    300032fa <__x86.get_pc_thunk.cx+0xd9e>
30003286:	72 74                	jb     300032fc <__x86.get_pc_thunk.cx+0xda0>
30003288:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003289:	6c                   	ins    BYTE PTR es:[edi],dx
3000328a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
3000328d:	72 74                	jb     30003303 <__x86.get_pc_thunk.cx+0xda7>
3000328f:	72 69                	jb     300032fa <__x86.get_pc_thunk.cx+0xd9e>
30003291:	6d                   	ins    DWORD PTR es:[edi],dx
30003292:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003295:	72 73                	jb     3000330a <__x86.get_pc_thunk.cx+0xdae>
30003297:	74 72                	je     3000330b <__x86.get_pc_thunk.cx+0xdaf>
30003299:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
3000329d:	61                   	popa   
3000329e:	6c                   	ins    BYTE PTR es:[edi],dx
3000329f:	74 69                	je     3000330a <__x86.get_pc_thunk.cx+0xdae>
300032a1:	6d                   	ins    DWORD PTR es:[edi],dx
300032a2:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
300032a7:	61                   	popa   
300032a8:	6c                   	ins    BYTE PTR es:[edi],dx
300032a9:	74 69                	je     30003314 <__x86.get_pc_thunk.cx+0xdb8>
300032ab:	6d                   	ins    DWORD PTR es:[edi],dx
300032ac:	65                   	gs
300032ad:	5f                   	pop    edi
300032ae:	72 00                	jb     300032b0 <__x86.get_pc_thunk.cx+0xd54>
300032b0:	6d                   	ins    DWORD PTR es:[edi],dx
300032b1:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
	...

Disassembly of section .hash:

300032b8 <.hash>:
300032b8:	25 00 00 00 2b       	and    eax,0x2b000000
300032bd:	00 00                	add    BYTE PTR [eax],al
300032bf:	00 15 00 00 00 1e    	add    BYTE PTR ds:0x1e000000,dl
300032c5:	00 00                	add    BYTE PTR [eax],al
300032c7:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
300032cd:	00 00                	add    BYTE PTR [eax],al
300032cf:	00 19                	add    BYTE PTR [ecx],bl
	...
300032e5:	00 00                	add    BYTE PTR [eax],al
300032e7:	00 26                	add    BYTE PTR [esi],ah
	...
300032f5:	00 00                	add    BYTE PTR [eax],al
300032f7:	00 17                	add    BYTE PTR [edi],dl
300032f9:	00 00                	add    BYTE PTR [eax],al
300032fb:	00 0f                	add    BYTE PTR [edi],cl
300032fd:	00 00                	add    BYTE PTR [eax],al
300032ff:	00 00                	add    BYTE PTR [eax],al
30003301:	00 00                	add    BYTE PTR [eax],al
30003303:	00 21                	add    BYTE PTR [ecx],ah
30003305:	00 00                	add    BYTE PTR [eax],al
30003307:	00 20                	add    BYTE PTR [eax],ah
30003309:	00 00                	add    BYTE PTR [eax],al
3000330b:	00 00                	add    BYTE PTR [eax],al
3000330d:	00 00                	add    BYTE PTR [eax],al
3000330f:	00 03                	add    BYTE PTR [ebx],al
30003311:	00 00                	add    BYTE PTR [eax],al
30003313:	00 23                	add    BYTE PTR [ebx],ah
30003315:	00 00                	add    BYTE PTR [eax],al
30003317:	00 25 00 00 00 0a    	add    BYTE PTR ds:0xa000000,ah
3000331d:	00 00                	add    BYTE PTR [eax],al
3000331f:	00 29                	add    BYTE PTR [ecx],ch
	...
30003329:	00 00                	add    BYTE PTR [eax],al
3000332b:	00 0d 00 00 00 10    	add    BYTE PTR ds:0x10000000,cl
30003331:	00 00                	add    BYTE PTR [eax],al
30003333:	00 27                	add    BYTE PTR [edi],ah
30003335:	00 00                	add    BYTE PTR [eax],al
30003337:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
3000333a:	00 00                	add    BYTE PTR [eax],al
3000333c:	2a 00                	sub    al,BYTE PTR [eax]
3000333e:	00 00                	add    BYTE PTR [eax],al
30003340:	1c 00                	sbb    al,0x0
30003342:	00 00                	add    BYTE PTR [eax],al
30003344:	00 00                	add    BYTE PTR [eax],al
30003346:	00 00                	add    BYTE PTR [eax],al
30003348:	28 00                	sub    BYTE PTR [eax],al
3000334a:	00 00                	add    BYTE PTR [eax],al
3000334c:	16                   	push   ss
	...
30003365:	00 00                	add    BYTE PTR [eax],al
30003367:	00 02                	add    BYTE PTR [edx],al
30003369:	00 00                	add    BYTE PTR [eax],al
3000336b:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
	...
30003381:	00 00                	add    BYTE PTR [eax],al
30003383:	00 06                	add    BYTE PTR [esi],al
30003385:	00 00                	add    BYTE PTR [eax],al
30003387:	00 00                	add    BYTE PTR [eax],al
30003389:	00 00                	add    BYTE PTR [eax],al
3000338b:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
	...
300033aa:	00 00                	add    BYTE PTR [eax],al
300033ac:	11 00                	adc    DWORD PTR [eax],eax
300033ae:	00 00                	add    BYTE PTR [eax],al
300033b0:	0b 00                	or     eax,DWORD PTR [eax]
300033b2:	00 00                	add    BYTE PTR [eax],al
300033b4:	13 00                	adc    eax,DWORD PTR [eax]
300033b6:	00 00                	add    BYTE PTR [eax],al
300033b8:	18 00                	sbb    BYTE PTR [eax],al
300033ba:	00 00                	add    BYTE PTR [eax],al
300033bc:	00 00                	add    BYTE PTR [eax],al
300033be:	00 00                	add    BYTE PTR [eax],al
300033c0:	12 00                	adc    al,BYTE PTR [eax]
300033c2:	00 00                	add    BYTE PTR [eax],al
300033c4:	1a 00                	sbb    al,BYTE PTR [eax]
300033c6:	00 00                	add    BYTE PTR [eax],al
300033c8:	08 00                	or     BYTE PTR [eax],al
300033ca:	00 00                	add    BYTE PTR [eax],al
300033cc:	07                   	pop    es
300033cd:	00 00                	add    BYTE PTR [eax],al
300033cf:	00 00                	add    BYTE PTR [eax],al
300033d1:	00 00                	add    BYTE PTR [eax],al
300033d3:	00 09                	add    BYTE PTR [ecx],cl
300033d5:	00 00                	add    BYTE PTR [eax],al
300033d7:	00 0e                	add    BYTE PTR [esi],cl
300033d9:	00 00                	add    BYTE PTR [eax],al
300033db:	00 00                	add    BYTE PTR [eax],al
300033dd:	00 00                	add    BYTE PTR [eax],al
300033df:	00 01                	add    BYTE PTR [ecx],al
300033e1:	00 00                	add    BYTE PTR [eax],al
300033e3:	00 00                	add    BYTE PTR [eax],al
300033e5:	00 00                	add    BYTE PTR [eax],al
300033e7:	00 1b                	add    BYTE PTR [ebx],bl
	...
300033f1:	00 00                	add    BYTE PTR [eax],al
300033f3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
300033f6:	00 00                	add    BYTE PTR [eax],al
300033f8:	04 00                	add    al,0x0
300033fa:	00 00                	add    BYTE PTR [eax],al
300033fc:	22 00                	and    al,BYTE PTR [eax]
	...

Disassembly of section .eh_frame:

30003400 <.eh_frame>:
30003400:	14 00                	adc    al,0x0
30003402:	00 00                	add    BYTE PTR [eax],al
30003404:	00 00                	add    BYTE PTR [eax],al
30003406:	00 00                	add    BYTE PTR [eax],al
30003408:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
3000340b:	00 01                	add    BYTE PTR [ecx],al
3000340d:	7c 08                	jl     30003417 <__x86.get_pc_thunk.cx+0xebb>
3000340f:	01 1b                	add    DWORD PTR [ebx],ebx
30003411:	0c 04                	or     al,0x4
30003413:	04 88                	add    al,0x88
30003415:	01 00                	add    DWORD PTR [eax],eax
30003417:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000341a:	00 00                	add    BYTE PTR [eax],al
3000341c:	1c 00                	sbb    al,0x0
3000341e:	00 00                	add    BYTE PTR [eax],al
30003420:	e0 f0                	loopne 30003412 <__x86.get_pc_thunk.cx+0xeb6>
30003422:	ff                   	(bad)  
30003423:	ff 50 00             	call   DWORD PTR [eax+0x0]
30003426:	00 00                	add    BYTE PTR [eax],al
30003428:	00 0e                	add    BYTE PTR [esi],cl
3000342a:	08 46 0e             	or     BYTE PTR [esi+0xe],al
3000342d:	0c 4a                	or     al,0x4a
3000342f:	0f 0b                	ud2    
30003431:	74 04                	je     30003437 <__x86.get_pc_thunk.cx+0xedb>
30003433:	78 00                	js     30003435 <__x86.get_pc_thunk.cx+0xed9>
30003435:	3f                   	aas    
30003436:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30003438:	2a 32                	sub    dh,BYTE PTR [edx]
3000343a:	24 22                	and    al,0x22
3000343c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

30003440 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
30003440:	01 1b                	add    DWORD PTR [ebx],ebx
30003442:	03 3b                	add    edi,DWORD PTR [ebx]
30003444:	1c f1                	sbb    al,0xf1
30003446:	ff                   	(bad)  
30003447:	ff 46 00             	inc    DWORD PTR [esi+0x0]
3000344a:	00 00                	add    BYTE PTR [eax],al
3000344c:	c0 cb ff             	ror    bl,0xff
3000344f:	ff                   	(bad)  
30003450:	38 f1                	cmp    cl,dh
30003452:	ff                   	(bad)  
30003453:	ff                   	(bad)  
30003454:	f8                   	clc    
30003455:	cb                   	retf   
30003456:	ff                   	(bad)  
30003457:	ff 58 f1             	call   FWORD PTR [eax-0xf]
3000345a:	ff                   	(bad)  
3000345b:	ff 30                	push   DWORD PTR [eax]
3000345d:	cc                   	int3   
3000345e:	ff                   	(bad)  
3000345f:	ff 8c f1 ff ff 85 cc 	dec    DWORD PTR [ecx+esi*8-0x337a0001]
30003466:	ff                   	(bad)  
30003467:	ff b4 f1 ff ff dc cc 	push   DWORD PTR [ecx+esi*8-0x33230001]
3000346e:	ff                   	(bad)  
3000346f:	ff dc                	call   <internal disassembler error>
30003471:	f1                   	icebp  
30003472:	ff                   	(bad)  
30003473:	ff 74 cd ff          	push   DWORD PTR [ebp+ecx*8-0x1]
30003477:	ff 18                	call   FWORD PTR [eax]
30003479:	f2 ff                	repnz (bad) 
3000347b:	ff eb                	jmp    <internal disassembler error>
3000347d:	cd ff                	int    0xff
3000347f:	ff                   	(bad)  
30003480:	3c f2                	cmp    al,0xf2
30003482:	ff                   	(bad)  
30003483:	ff a6 ce ff ff 60    	jmp    DWORD PTR [esi+0x60ffffce]
30003489:	f2 ff                	repnz (bad) 
3000348b:	ff 04 cf             	inc    DWORD PTR [edi+ecx*8]
3000348e:	ff                   	(bad)  
3000348f:	ff 80 f2 ff ff 2a    	inc    DWORD PTR [eax+0x2afffff2]
30003495:	cf                   	iret   
30003496:	ff                   	(bad)  
30003497:	ff a4 f2 ff ff 6d cf 	jmp    DWORD PTR [edx+esi*8-0x30920001]
3000349e:	ff                   	(bad)  
3000349f:	ff c8                	dec    eax
300034a1:	f2 ff                	repnz (bad) 
300034a3:	ff 9c cf ff ff ec f2 	call   FWORD PTR [edi+ecx*8-0xd130001]
300034aa:	ff                   	(bad)  
300034ab:	ff 58 d0             	call   FWORD PTR [eax-0x30]
300034ae:	ff                   	(bad)  
300034af:	ff 10                	call   DWORD PTR [eax]
300034b1:	f3 ff                	repz (bad) 
300034b3:	ff 8a d0 ff ff 34    	dec    DWORD PTR [edx+0x34ffffd0]
300034b9:	f3 ff                	repz (bad) 
300034bb:	ff                   	(bad)  
300034bc:	bb d0 ff ff 58       	mov    ebx,0x58ffffd0
300034c1:	f3 ff                	repz (bad) 
300034c3:	ff e9                	jmp    <internal disassembler error>
300034c5:	d0 ff                	sar    bh,1
300034c7:	ff                   	(bad)  
300034c8:	7c f3                	jl     300034bd <__GNU_EH_FRAME_HDR+0x7d>
300034ca:	ff                   	(bad)  
300034cb:	ff 10                	call   DWORD PTR [eax]
300034cd:	d1 ff                	sar    edi,1
300034cf:	ff 9c f3 ff ff b4 d1 	call   FWORD PTR [ebx+esi*8-0x2e4b0001]
300034d6:	ff                   	(bad)  
300034d7:	ff c0                	inc    eax
300034d9:	f3 ff                	repz (bad) 
300034db:	ff d3                	call   ebx
300034dd:	d1 ff                	sar    edi,1
300034df:	ff e4                	jmp    esp
300034e1:	f3 ff                	repz (bad) 
300034e3:	ff 07                	inc    DWORD PTR [edi]
300034e5:	d2 ff                	sar    bh,cl
300034e7:	ff 04 f4             	inc    DWORD PTR [esp+esi*8]
300034ea:	ff                   	(bad)  
300034eb:	ff                   	(bad)  
300034ec:	3b d2                	cmp    edx,edx
300034ee:	ff                   	(bad)  
300034ef:	ff 24 f4             	jmp    DWORD PTR [esp+esi*8]
300034f2:	ff                   	(bad)  
300034f3:	ff 70 d2             	push   DWORD PTR [eax-0x2e]
300034f6:	ff                   	(bad)  
300034f7:	ff 48 f4             	dec    DWORD PTR [eax-0xc]
300034fa:	ff                   	(bad)  
300034fb:	ff b6 d2 ff ff 6c    	push   DWORD PTR [esi+0x6cffffd2]
30003501:	f4                   	hlt    
30003502:	ff                   	(bad)  
30003503:	ff d3                	call   ebx
30003505:	d2 ff                	sar    bh,cl
30003507:	ff 8c f4 ff ff fc d2 	dec    DWORD PTR [esp+esi*8-0x2d030001]
3000350e:	ff                   	(bad)  
3000350f:	ff ac f4 ff ff 48 d3 	jmp    FWORD PTR [esp+esi*8-0x2cb70001]
30003516:	ff                   	(bad)  
30003517:	ff d0                	call   eax
30003519:	f4                   	hlt    
3000351a:	ff                   	(bad)  
3000351b:	ff 65 d3             	jmp    DWORD PTR [ebp-0x2d]
3000351e:	ff                   	(bad)  
3000351f:	ff f0                	push   eax
30003521:	f4                   	hlt    
30003522:	ff                   	(bad)  
30003523:	ff a5 d3 ff ff 14    	jmp    DWORD PTR [ebp+0x14ffffd3]
30003529:	f5                   	cmc    
3000352a:	ff                   	(bad)  
3000352b:	ff c8                	dec    eax
3000352d:	d3 ff                	sar    edi,cl
3000352f:	ff 48 f5             	dec    DWORD PTR [eax-0xb]
30003532:	ff                   	(bad)  
30003533:	ff 28                	jmp    FWORD PTR [eax]
30003535:	d4 ff                	aam    0xff
30003537:	ff 6c f5 ff          	jmp    FWORD PTR [ebp+esi*8-0x1]
3000353b:	ff af d4 ff ff 8c    	jmp    FWORD PTR [edi-0x7300002c]
30003541:	f5                   	cmc    
30003542:	ff                   	(bad)  
30003543:	ff 8f d6 ff ff b8    	dec    DWORD PTR [edi-0x4700002a]
30003549:	f5                   	cmc    
3000354a:	ff                   	(bad)  
3000354b:	ff c8                	dec    eax
3000354d:	d6                   	(bad)  
3000354e:	ff                   	(bad)  
3000354f:	ff d8                	call   <internal disassembler error>
30003551:	f5                   	cmc    
30003552:	ff                   	(bad)  
30003553:	ff f0                	push   eax
30003555:	d6                   	(bad)  
30003556:	ff                   	(bad)  
30003557:	ff 10                	call   DWORD PTR [eax]
30003559:	f6 ff                	idiv   bh
3000355b:	ff 8c d8 ff ff 30 f6 	dec    DWORD PTR [eax+ebx*8-0x9cf0001]
30003562:	ff                   	(bad)  
30003563:	ff 53 d9             	call   DWORD PTR [ebx-0x27]
30003566:	ff                   	(bad)  
30003567:	ff 50 f6             	call   DWORD PTR [eax-0xa]
3000356a:	ff                   	(bad)  
3000356b:	ff 1c da             	call   FWORD PTR [edx+ebx*8]
3000356e:	ff                   	(bad)  
3000356f:	ff 70 f6             	push   DWORD PTR [eax-0xa]
30003572:	ff                   	(bad)  
30003573:	ff 2c da             	jmp    FWORD PTR [edx+ebx*8]
30003576:	ff                   	(bad)  
30003577:	ff 90 f6 ff ff 58    	call   DWORD PTR [eax+0x58fffff6]
3000357d:	da ff                	(bad)  
3000357f:	ff b4 f6 ff ff 7e da 	push   DWORD PTR [esi+esi*8-0x25810001]
30003586:	ff                   	(bad)  
30003587:	ff d8                	call   <internal disassembler error>
30003589:	f6 ff                	idiv   bh
3000358b:	ff b5 db ff ff fc    	push   DWORD PTR [ebp-0x3000025]
30003591:	f6 ff                	idiv   bh
30003593:	ff                   	(bad)  
30003594:	39 dc                	cmp    esp,ebx
30003596:	ff                   	(bad)  
30003597:	ff 20                	jmp    DWORD PTR [eax]
30003599:	f7 ff                	idiv   edi
3000359b:	ff 8c dc ff ff 40 f7 	dec    DWORD PTR [esp+ebx*8-0x8bf0001]
300035a2:	ff                   	(bad)  
300035a3:	ff ca                	dec    edx
300035a5:	dc ff                	fdiv   st(7),st
300035a7:	ff 64 f7 ff          	jmp    DWORD PTR [edi+esi*8-0x1]
300035ab:	ff 08                	dec    DWORD PTR [eax]
300035ad:	dd ff                	(bad)  
300035af:	ff 88 f7 ff ff 78    	dec    DWORD PTR [eax+0x78fffff7]
300035b5:	dd ff                	(bad)  
300035b7:	ff a8 f7 ff ff d8    	jmp    FWORD PTR [eax-0x27000009]
300035bd:	dd ff                	(bad)  
300035bf:	ff d0                	call   eax
300035c1:	f7 ff                	idiv   edi
300035c3:	ff 18                	call   FWORD PTR [eax]
300035c5:	de ff                	fdivp  st(7),st
300035c7:	ff f0                	push   eax
300035c9:	f7 ff                	idiv   edi
300035cb:	ff 58 de             	call   FWORD PTR [eax-0x22]
300035ce:	ff                   	(bad)  
300035cf:	ff 10                	call   DWORD PTR [eax]
300035d1:	f8                   	clc    
300035d2:	ff                   	(bad)  
300035d3:	ff a0 de ff ff 30    	jmp    DWORD PTR [eax+0x30ffffde]
300035d9:	f8                   	clc    
300035da:	ff                   	(bad)  
300035db:	ff d0                	call   eax
300035dd:	de ff                	fdivp  st(7),st
300035df:	ff 50 f8             	call   DWORD PTR [eax-0x8]
300035e2:	ff                   	(bad)  
300035e3:	ff 2c df             	jmp    FWORD PTR [edi+ebx*8]
300035e6:	ff                   	(bad)  
300035e7:	ff 70 f8             	push   DWORD PTR [eax-0x8]
300035ea:	ff                   	(bad)  
300035eb:	ff 5d df             	call   FWORD PTR [ebp-0x21]
300035ee:	ff                   	(bad)  
300035ef:	ff 90 f8 ff ff 90    	call   DWORD PTR [eax-0x6f000008]
300035f5:	df ff                	(bad)  
300035f7:	ff b0 f8 ff ff f8    	push   DWORD PTR [eax-0x7000008]
300035fd:	df ff                	(bad)  
300035ff:	ff d0                	call   eax
30003601:	f8                   	clc    
30003602:	ff                   	(bad)  
30003603:	ff 58 e0             	call   FWORD PTR [eax-0x20]
30003606:	ff                   	(bad)  
30003607:	ff f0                	push   eax
30003609:	f8                   	clc    
3000360a:	ff                   	(bad)  
3000360b:	ff d8                	call   <internal disassembler error>
3000360d:	e1 ff                	loope  3000360e <__GNU_EH_FRAME_HDR+0x1ce>
3000360f:	ff 20                	jmp    DWORD PTR [eax]
30003611:	f9                   	stc    
30003612:	ff                   	(bad)  
30003613:	ff                   	(bad)  
30003614:	f8                   	clc    
30003615:	e1 ff                	loope  30003616 <__GNU_EH_FRAME_HDR+0x1d6>
30003617:	ff 40 f9             	inc    DWORD PTR [eax-0x7]
3000361a:	ff                   	(bad)  
3000361b:	ff 94 e3 ff ff 70 f9 	call   DWORD PTR [ebx+eiz*8-0x68f0001]
30003622:	ff                   	(bad)  
30003623:	ff 2c e4             	jmp    FWORD PTR [esp+eiz*8]
30003626:	ff                   	(bad)  
30003627:	ff 94 f9 ff ff 9c e4 	call   DWORD PTR [ecx+edi*8-0x1b630001]
3000362e:	ff                   	(bad)  
3000362f:	ff                   	(bad)  
30003630:	bc f9 ff ff c5       	mov    esp,0xc5fffff9
30003635:	e4 ff                	in     al,0xff
30003637:	ff dc                	call   <internal disassembler error>
30003639:	f9                   	stc    
3000363a:	ff                   	(bad)  
3000363b:	ff de                	call   <internal disassembler error>
3000363d:	e7 ff                	out    0xff,eax
3000363f:	ff 04 fa             	inc    DWORD PTR [edx+edi*8]
30003642:	ff                   	(bad)  
30003643:	ff 1d e8 ff ff 28    	call   FWORD PTR ds:0x28ffffe8
30003649:	fa                   	cli    
3000364a:	ff                   	(bad)  
3000364b:	ff 5b e8             	call   FWORD PTR [ebx-0x18]
3000364e:	ff                   	(bad)  
3000364f:	ff 4c fa ff          	dec    DWORD PTR [edx+edi*8-0x1]
30003653:	ff b2 f0 ff ff 78    	push   DWORD PTR [edx+0x78fffff0]
30003659:	f1                   	icebp  
3000365a:	ff                   	(bad)  
3000365b:	ff 10                	call   DWORD PTR [eax]
3000365d:	f1                   	icebp  
3000365e:	ff                   	(bad)  
3000365f:	ff 04 f2             	inc    DWORD PTR [edx+esi*8]
30003662:	ff                   	(bad)  
30003663:	ff 14 f1             	call   DWORD PTR [ecx+esi*8]
30003666:	ff                   	(bad)  
30003667:	ff 34 f5 ff ff 18 f1 	push   DWORD PTR [esi*8-0xee70001]
3000366e:	ff                   	(bad)  
3000366f:	ff                   	(bad)  
30003670:	fc                   	cld    
30003671:	f5                   	cmc    
30003672:	ff                   	(bad)  
30003673:	ff 1c f1             	call   FWORD PTR [ecx+esi*8]
30003676:	ff                   	(bad)  
30003677:	ff                   	(bad)  
30003678:	7c fa                	jl     30003674 <__GNU_EH_FRAME_HDR+0x234>
3000367a:	ff                   	(bad)  
3000367b:	ff                   	.byte 0xff

Disassembly of section .rodata:

30003680 <_ytab-0x220>:
30003680:	53                   	push   ebx
30003681:	74 72                	je     300036f5 <__GNU_EH_FRAME_HDR+0x2b5>
30003683:	65                   	gs
30003684:	61                   	popa   
30003685:	6d                   	ins    DWORD PTR es:[edi],dx
30003686:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
3000368c:	74 20                	je     300036ae <__GNU_EH_FRAME_HDR+0x26e>
3000368e:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30003695:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003696:	74 65                	je     300036fd <__GNU_EH_FRAME_HDR+0x2bd>
30003698:	64 0a 00             	or     al,BYTE PTR fs:[eax]
3000369b:	00 2a                	add    BYTE PTR [edx],ch
3000369d:	2a 2a                	sub    ch,BYTE PTR [edx]
3000369f:	6c                   	ins    BYTE PTR es:[edi],dx
300036a0:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
300036a7:	74 20                	je     300036c9 <__GNU_EH_FRAME_HDR+0x289>
300036a9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
300036ac:	6c                   	ins    BYTE PTR es:[edi],dx
300036ad:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
300036b1:	2a 2a                	sub    ch,BYTE PTR [edx]
300036b3:	00 2a                	add    BYTE PTR [edx],ch
300036b5:	2a 2a                	sub    ch,BYTE PTR [edx]
300036b7:	6c                   	ins    BYTE PTR es:[edi],dx
300036b8:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
300036bf:	74 20                	je     300036e1 <__GNU_EH_FRAME_HDR+0x2a1>
300036c1:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
300036c4:	70 6c                	jo     30003732 <__GNU_EH_FRAME_HDR+0x2f2>
300036c6:	65                   	gs
300036c7:	74 65                	je     3000372e <__GNU_EH_FRAME_HDR+0x2ee>
300036c9:	64 0a 00             	or     al,BYTE PTR fs:[eax]
300036cc:	6c                   	ins    BYTE PTR es:[edi],dx
300036cd:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
300036d4:	74 20                	je     300036f6 <__GNU_EH_FRAME_HDR+0x2b6>
300036d6:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
300036d9:	6c                   	ins    BYTE PTR es:[edi],dx
300036da:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
300036df:	65                   	gs
300036e0:	76 69                	jbe    3000374b <__GNU_EH_FRAME_HDR+0x30b>
300036e2:	6f                   	outs   dx,DWORD PTR ds:[esi]
300036e3:	75 73                	jne    30003758 <__GNU_EH_FRAME_HDR+0x318>
300036e5:	6c                   	ins    BYTE PTR es:[edi],dx
300036e6:	79 2c                	jns    30003714 <__GNU_EH_FRAME_HDR+0x2d4>
300036e8:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
300036eb:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
300036f2:	6c 
300036f3:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
300036fa:	65 63 20             	arpl   WORD PTR gs:[eax],sp
300036fd:	66 6f                	outs   dx,WORD PTR ds:[esi]
300036ff:	72 20                	jb     30003721 <__GNU_EH_FRAME_HDR+0x2e1>
30003701:	25 73 0a 00 00       	and    eax,0xa73
30003706:	00 00                	add    BYTE PTR [eax],al
30003708:	68 65 61 70 42       	push   0x42706165
3000370d:	61                   	popa   
3000370e:	73 65                	jae    30003775 <__GNU_EH_FRAME_HDR+0x335>
30003710:	20 40 20             	and    BYTE PTR [eax+0x20],al
30003713:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
30003716:	30 38                	xor    BYTE PTR [eax],bh
30003718:	58                   	pop    eax
30003719:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
3000371f:	30 38                	xor    BYTE PTR [eax],bh
30003721:	58                   	pop    eax
30003722:	20 62 65             	and    BYTE PTR [edx+0x65],ah
30003725:	66 6f                	outs   dx,WORD PTR ds:[esi]
30003727:	72 65                	jb     3000378e <__GNU_EH_FRAME_HDR+0x34e>
30003729:	0a 00                	or     al,BYTE PTR [eax]
3000372b:	6d                   	ins    DWORD PTR es:[edi],dx
3000372c:	61                   	popa   
3000372d:	6c                   	ins    BYTE PTR es:[edi],dx
3000372e:	6c                   	ins    BYTE PTR es:[edi],dx
3000372f:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003730:	63 28                	arpl   WORD PTR [eax],bp
30003732:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003735:	30 38                	xor    BYTE PTR [eax],bh
30003737:	58                   	pop    eax
30003738:	29 0a                	sub    DWORD PTR [edx],ecx
3000373a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
3000373e:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
30003741:	61                   	popa   
30003742:	6c                   	ins    BYTE PTR es:[edi],dx
30003743:	6c                   	ins    BYTE PTR es:[edi],dx
30003744:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003745:	63 3a                	arpl   WORD PTR [edx],di
30003747:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
3000374a:	65                   	gs
3000374b:	64                   	fs
3000374c:	65                   	gs
3000374d:	64                   	fs
3000374e:	3d 30 78 25 30       	cmp    eax,0x30257830
30003753:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003756:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
3000375a:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
3000375d:	61                   	popa   
3000375e:	6c                   	ins    BYTE PTR es:[edi],dx
3000375f:	6c                   	ins    BYTE PTR es:[edi],dx
30003760:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003761:	63 3a                	arpl   WORD PTR [edx],di
30003763:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30003766:	61                   	popa   
30003767:	45                   	inc    ebp
30003768:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003769:	64                   	fs
3000376a:	3d 30 78 25 30       	cmp    eax,0x30257830
3000376f:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
30003772:	00 00                	add    BYTE PTR [eax],al
30003774:	6c                   	ins    BYTE PTR es:[edi],dx
30003775:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
3000377c:	6c                   	ins    BYTE PTR es:[edi],dx
3000377d:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000377e:	63 3a                	arpl   WORD PTR [edx],di
30003780:	20 52 65             	and    BYTE PTR [edx+0x65],dl
30003783:	71 20                	jno    300037a5 <__GNU_EH_FRAME_HDR+0x365>
30003785:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003788:	30 38                	xor    BYTE PTR [eax],bh
3000378a:	58                   	pop    eax
3000378b:	20 62 79             	and    BYTE PTR [edx+0x79],ah
3000378e:	74 65                	je     300037f5 <__GNU_EH_FRAME_HDR+0x3b5>
30003790:	73 2c                	jae    300037be <__GNU_EH_FRAME_HDR+0x37e>
30003792:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30003795:	74 20                	je     300037b7 <__GNU_EH_FRAME_HDR+0x377>
30003797:	77 61                	ja     300037fa <__GNU_EH_FRAME_HDR+0x3ba>
30003799:	73 20                	jae    300037bb <__GNU_EH_FRAME_HDR+0x37b>
3000379b:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000379e:	30 38                	xor    BYTE PTR [eax],bh
300037a0:	58                   	pop    eax
300037a1:	2c 20                	sub    al,0x20
300037a3:	68 65 61 70 45       	push   0x45706165
300037a8:	6e                   	outs   dx,BYTE PTR ds:[esi]
300037a9:	64                   	fs
300037aa:	3d 30 78 25 30       	cmp    eax,0x30257830
300037af:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300037b2:	00 00                	add    BYTE PTR [eax],al
300037b4:	6c                   	ins    BYTE PTR es:[edi],dx
300037b5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300037bc:	6c                   	ins    BYTE PTR es:[edi],dx
300037bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
300037be:	63 3a                	arpl   WORD PTR [edx],di
300037c0:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
300037c3:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
300037ca:	65 
300037cb:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
300037cf:	61                   	popa   
300037d0:	70 43                	jo     30003815 <__GNU_EH_FRAME_HDR+0x3d5>
300037d2:	75 72                	jne    30003846 <__GNU_EH_FRAME_HDR+0x406>
300037d4:	72 20                	jb     300037f6 <__GNU_EH_FRAME_HDR+0x3b6>
300037d6:	61                   	popa   
300037d7:	6e                   	outs   dx,BYTE PTR ds:[esi]
300037d8:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
300037dc:	61                   	popa   
300037dd:	70 42                	jo     30003821 <__GNU_EH_FRAME_HDR+0x3e1>
300037df:	61                   	popa   
300037e0:	73 65                	jae    30003847 <__GNU_EH_FRAME_HDR+0x407>
300037e2:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
300037e6:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300037e9:	30 38                	xor    BYTE PTR [eax],bh
300037eb:	58                   	pop    eax
300037ec:	0a 00                	or     al,BYTE PTR [eax]
300037ee:	00 00                	add    BYTE PTR [eax],al
300037f0:	6c                   	ins    BYTE PTR es:[edi],dx
300037f1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300037f8:	6c                   	ins    BYTE PTR es:[edi],dx
300037f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
300037fa:	63 3a                	arpl   WORD PTR [edx],di
300037fc:	63 72 65             	arpl   WORD PTR [edx+0x65],si
300037ff:	61                   	popa   
30003800:	74 69                	je     3000386b <__GNU_EH_FRAME_HDR+0x42b>
30003802:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003803:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
30003807:	61                   	popa   
30003808:	70 20                	jo     3000382a <__GNU_EH_FRAME_HDR+0x3ea>
3000380a:	72 65                	jb     30003871 <__GNU_EH_FRAME_HDR+0x431>
3000380c:	63 20                	arpl   WORD PTR [eax],sp
3000380e:	40                   	inc    eax
3000380f:	20 30                	and    BYTE PTR [eax],dh
30003811:	78 25                	js     30003838 <__GNU_EH_FRAME_HDR+0x3f8>
30003813:	30 38                	xor    BYTE PTR [eax],bh
30003815:	58                   	pop    eax
30003816:	0a 00                	or     al,BYTE PTR [eax]
30003818:	6c                   	ins    BYTE PTR es:[edi],dx
30003819:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30003820:	6c                   	ins    BYTE PTR es:[edi],dx
30003821:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003822:	63 3a                	arpl   WORD PTR [edx],di
30003824:	20 68 65             	and    BYTE PTR [eax+0x65],ch
30003827:	61                   	popa   
30003828:	70 43                	jo     3000386d <__GNU_EH_FRAME_HDR+0x42d>
3000382a:	75 72                	jne    3000389e <__GNU_EH_FRAME_HDR+0x45e>
3000382c:	72 3d                	jb     3000386b <__GNU_EH_FRAME_HDR+0x42b>
3000382e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30003831:	30 38                	xor    BYTE PTR [eax],bh
30003833:	58                   	pop    eax
30003834:	2c 20                	sub    al,0x20
30003836:	73 69                	jae    300038a1 <_ytab+0x1>
30003838:	7a 65                	jp     3000389f <__GNU_EH_FRAME_HDR+0x45f>
3000383a:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000383b:	66                   	data16
3000383c:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
3000383f:	61                   	popa   
30003840:	70 72                	jo     300038b4 <_ytab+0x14>
30003842:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
30003846:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
3000384c:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000384f:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
30003852:	6c                   	ins    BYTE PTR es:[edi],dx
30003853:	6c                   	ins    BYTE PTR es:[edi],dx
30003854:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003855:	63 3a                	arpl   WORD PTR [edx],di
30003857:	20 72 65             	and    BYTE PTR [edx+0x65],dh
3000385a:	74 75                	je     300038d1 <_ytab+0x31>
3000385c:	72 6e                	jb     300038cc <_ytab+0x2c>
3000385e:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
30003865:	30 38                	xor    BYTE PTR [eax],bh
30003867:	58                   	pop    eax
30003868:	0a 00                	or     al,BYTE PTR [eax]
	...
3000387e:	00 00                	add    BYTE PTR [eax],al
30003880:	47                   	inc    edi
30003881:	4d                   	dec    ebp
30003882:	54                   	push   esp
	...

300038a0 <_ytab>:
300038a0:	1f                   	pop    ds
300038a1:	00 00                	add    BYTE PTR [eax],al
300038a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300038a6:	00 00                	add    BYTE PTR [eax],al
300038a8:	1f                   	pop    ds
300038a9:	00 00                	add    BYTE PTR [eax],al
300038ab:	00 1e                	add    BYTE PTR [esi],bl
300038ad:	00 00                	add    BYTE PTR [eax],al
300038af:	00 1f                	add    BYTE PTR [edi],bl
300038b1:	00 00                	add    BYTE PTR [eax],al
300038b3:	00 1e                	add    BYTE PTR [esi],bl
300038b5:	00 00                	add    BYTE PTR [eax],al
300038b7:	00 1f                	add    BYTE PTR [edi],bl
300038b9:	00 00                	add    BYTE PTR [eax],al
300038bb:	00 1f                	add    BYTE PTR [edi],bl
300038bd:	00 00                	add    BYTE PTR [eax],al
300038bf:	00 1e                	add    BYTE PTR [esi],bl
300038c1:	00 00                	add    BYTE PTR [eax],al
300038c3:	00 1f                	add    BYTE PTR [edi],bl
300038c5:	00 00                	add    BYTE PTR [eax],al
300038c7:	00 1e                	add    BYTE PTR [esi],bl
300038c9:	00 00                	add    BYTE PTR [eax],al
300038cb:	00 1f                	add    BYTE PTR [edi],bl
300038cd:	00 00                	add    BYTE PTR [eax],al
300038cf:	00 1f                	add    BYTE PTR [edi],bl
300038d1:	00 00                	add    BYTE PTR [eax],al
300038d3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
300038d9:	00 00                	add    BYTE PTR [eax],al
300038db:	00 1e                	add    BYTE PTR [esi],bl
300038dd:	00 00                	add    BYTE PTR [eax],al
300038df:	00 1f                	add    BYTE PTR [edi],bl
300038e1:	00 00                	add    BYTE PTR [eax],al
300038e3:	00 1e                	add    BYTE PTR [esi],bl
300038e5:	00 00                	add    BYTE PTR [eax],al
300038e7:	00 1f                	add    BYTE PTR [edi],bl
300038e9:	00 00                	add    BYTE PTR [eax],al
300038eb:	00 1f                	add    BYTE PTR [edi],bl
300038ed:	00 00                	add    BYTE PTR [eax],al
300038ef:	00 1e                	add    BYTE PTR [esi],bl
300038f1:	00 00                	add    BYTE PTR [eax],al
300038f3:	00 1f                	add    BYTE PTR [edi],bl
300038f5:	00 00                	add    BYTE PTR [eax],al
300038f7:	00 1e                	add    BYTE PTR [esi],bl
300038f9:	00 00                	add    BYTE PTR [eax],al
300038fb:	00 1f                	add    BYTE PTR [edi],bl
300038fd:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

30003900 <.rel.dyn>:
30003900:	64 3b 00             	cmp    eax,DWORD PTR fs:[eax]
30003903:	30 08                	xor    BYTE PTR [eax],cl
30003905:	00 00                	add    BYTE PTR [eax],al
30003907:	00 68 3b             	add    BYTE PTR [eax+0x3b],ch
3000390a:	00 30                	add    BYTE PTR [eax],dh
3000390c:	08 00                	or     BYTE PTR [eax],al
3000390e:	00 00                	add    BYTE PTR [eax],al
30003910:	6c                   	ins    BYTE PTR es:[edi],dx
30003911:	3b 00                	cmp    eax,DWORD PTR [eax]
30003913:	30 08                	xor    BYTE PTR [eax],cl
30003915:	00 00                	add    BYTE PTR [eax],al
30003917:	00 70 3b             	add    BYTE PTR [eax+0x3b],dh
3000391a:	00 30                	add    BYTE PTR [eax],dh
3000391c:	08 00                	or     BYTE PTR [eax],al
3000391e:	00 00                	add    BYTE PTR [eax],al
30003920:	74 3b                	je     3000395d <_ytab+0xbd>
30003922:	00 30                	add    BYTE PTR [eax],dh
30003924:	08 00                	or     BYTE PTR [eax],al
30003926:	00 00                	add    BYTE PTR [eax],al
30003928:	78 3b                	js     30003965 <_ytab+0xc5>
3000392a:	00 30                	add    BYTE PTR [eax],dh
3000392c:	08 00                	or     BYTE PTR [eax],al
3000392e:	00 00                	add    BYTE PTR [eax],al
30003930:	9c                   	pushf  
30003931:	3b 00                	cmp    eax,DWORD PTR [eax]
30003933:	30 08                	xor    BYTE PTR [eax],cl
30003935:	00 00                	add    BYTE PTR [eax],al
30003937:	00 a0 3b 00 30 08    	add    BYTE PTR [eax+0x830003b],ah
3000393d:	00 00                	add    BYTE PTR [eax],al
3000393f:	00 a4 3b 00 30 08 00 	add    BYTE PTR [ebx+edi*1+0x83000],ah
30003946:	00 00                	add    BYTE PTR [eax],al
30003948:	62 03                	bound  eax,QWORD PTR [ebx]
3000394a:	00 30                	add    BYTE PTR [eax],dh
3000394c:	02 18                	add    bl,BYTE PTR [eax]
3000394e:	00 00                	add    BYTE PTR [eax],al
30003950:	a2 03 00 30 02       	mov    ds:0x2300003,al
30003955:	18 00                	sbb    BYTE PTR [eax],al
30003957:	00 cb                	add    bl,cl
30003959:	03 00                	add    eax,DWORD PTR [eax]
3000395b:	30 02                	xor    BYTE PTR [edx],al
3000395d:	18 00                	sbb    BYTE PTR [eax],al
3000395f:	00 28                	add    BYTE PTR [eax],ch
30003961:	04 00                	add    al,0x0
30003963:	30 02                	xor    BYTE PTR [edx],al
30003965:	18 00                	sbb    BYTE PTR [eax],al
30003967:	00 8b 04 00 30 02    	add    BYTE PTR [ebx+0x2300004],cl
3000396d:	18 00                	sbb    BYTE PTR [eax],al
3000396f:	00 bd 04 00 30 02    	add    BYTE PTR [ebp+0x2300004],bh
30003975:	18 00                	sbb    BYTE PTR [eax],al
30003977:	00 ee                	add    dh,ch
30003979:	04 00                	add    al,0x0
3000397b:	30 02                	xor    BYTE PTR [edx],al
3000397d:	18 00                	sbb    BYTE PTR [eax],al
3000397f:	00 1c 05 00 30 02 18 	add    BYTE PTR [eax*1+0x18023000],bl
30003986:	00 00                	add    BYTE PTR [eax],al
30003988:	44                   	inc    esp
30003989:	05 00 30 02 18       	add    eax,0x18023000
3000398e:	00 00                	add    BYTE PTR [eax],al
30003990:	a1 06 00 30 02       	mov    eax,ds:0x2300006
30003995:	18 00                	sbb    BYTE PTR [eax],al
30003997:	00 c7                	add    bh,al
30003999:	06                   	push   es
3000399a:	00 30                	add    BYTE PTR [eax],dh
3000399c:	02 18                	add    bl,BYTE PTR [eax]
3000399e:	00 00                	add    BYTE PTR [eax],al
300039a0:	e7 06                	out    0x6,eax
300039a2:	00 30                	add    BYTE PTR [eax],dh
300039a4:	02 18                	add    bl,BYTE PTR [eax]
300039a6:	00 00                	add    BYTE PTR [eax],al
300039a8:	c4 07                	les    eax,FWORD PTR [edi]
300039aa:	00 30                	add    BYTE PTR [eax],dh
300039ac:	02 18                	add    bl,BYTE PTR [eax]
300039ae:	00 00                	add    BYTE PTR [eax],al
300039b0:	60                   	pusha  
300039b1:	09 00                	or     DWORD PTR [eax],eax
300039b3:	30 02                	xor    BYTE PTR [edx],al
300039b5:	18 00                	sbb    BYTE PTR [eax],al
300039b7:	00 26                	add    BYTE PTR [esi],ah
300039b9:	0b 00                	or     eax,DWORD PTR [eax]
300039bb:	30 02                	xor    BYTE PTR [edx],al
300039bd:	18 00                	sbb    BYTE PTR [eax],al
300039bf:	00 f9                	add    cl,bh
300039c1:	18 00                	sbb    BYTE PTR [eax],al
300039c3:	30 02                	xor    BYTE PTR [edx],al
300039c5:	18 00                	sbb    BYTE PTR [eax],al
300039c7:	00 98 3b 00 30 01    	add    BYTE PTR [eax+0x130003b],bl
300039cd:	10 00                	adc    BYTE PTR [eax],al
300039cf:	00 88 3b 00 30 07    	add    BYTE PTR [eax+0x730003b],cl
300039d5:	01 00                	add    DWORD PTR [eax],eax
300039d7:	00 8c 3b 00 30 07 06 	add    BYTE PTR [ebx+edi*1+0x6073000],cl
300039de:	00 00                	add    BYTE PTR [eax],al
300039e0:	90                   	nop
300039e1:	3b 00                	cmp    eax,DWORD PTR [eax]
300039e3:	30 07                	xor    BYTE PTR [edi],al
300039e5:	0e                   	push   cs
300039e6:	00 00                	add    BYTE PTR [eax],al
300039e8:	94                   	xchg   esp,eax
300039e9:	3b 00                	cmp    eax,DWORD PTR [eax]
300039eb:	30 07                	xor    BYTE PTR [edi],al
300039ed:	27                   	daa    
	...

Disassembly of section .data:

30003a00 <console_node>:
30003a00:	01 00                	add    DWORD PTR [eax],eax
	...

30003a40 <rcsid>:
30003a40:	24 48                	and    al,0x48
30003a42:	65                   	gs
30003a43:	61                   	popa   
30003a44:	64                   	fs
30003a45:	65                   	gs
30003a46:	72 3a                	jb     30003a82 <rcsid+0x42>
30003a48:	20 2f                	and    BYTE PTR [edi],ch
30003a4a:	75 73                	jne    30003abf <_DYNAMIC+0x13>
30003a4c:	65                   	gs
30003a4d:	72 36                	jb     30003a85 <rcsid+0x45>
30003a4f:	2f                   	das    
30003a50:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a51:	75 73                	jne    30003ac6 <_DYNAMIC+0x1a>
30003a53:	74 65                	je     30003aba <_DYNAMIC+0xe>
30003a55:	72 2f                	jb     30003a86 <rcsid+0x46>
30003a57:	74 63                	je     30003abc <_DYNAMIC+0x10>
30003a59:	6c                   	ins    BYTE PTR es:[edi],dx
30003a5a:	2f                   	das    
30003a5b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
30003a5e:	70 61                	jo     30003ac1 <_DYNAMIC+0x15>
30003a60:	74 2f                	je     30003a91 <rcsid+0x51>
30003a62:	52                   	push   edx
30003a63:	43                   	inc    ebx
30003a64:	53                   	push   ebx
30003a65:	2f                   	das    
30003a66:	73 74                	jae    30003adc <_DYNAMIC+0x30>
30003a68:	72 73                	jb     30003add <_DYNAMIC+0x31>
30003a6a:	74 72                	je     30003ade <_DYNAMIC+0x32>
30003a6c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
30003a70:	20 31                	and    BYTE PTR [ecx],dh
30003a72:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
30003a75:	39 33                	cmp    DWORD PTR [ebx],esi
30003a77:	2f                   	das    
30003a78:	30 33                	xor    BYTE PTR [ebx],dh
30003a7a:	2f                   	das    
30003a7b:	31 39                	xor    DWORD PTR [ecx],edi
30003a7d:	20 31                	and    BYTE PTR [ecx],dh
30003a7f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
30003a84:	34 30                	xor    al,0x30
30003a86:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
30003a89:	73 74                	jae    30003aff <_DYNAMIC+0x53>
30003a8b:	65                   	gs
30003a8c:	72 20                	jb     30003aae <_DYNAMIC+0x2>
30003a8e:	45                   	inc    ebp
30003a8f:	78 70                	js     30003b01 <_DYNAMIC+0x55>
30003a91:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
30003a94:	53                   	push   ebx
30003a95:	50                   	push   eax
30003a96:	52                   	push   edx
30003a97:	49                   	dec    ecx
30003a98:	54                   	push   esp
30003a99:	45                   	inc    ebp
30003a9a:	20 28                	and    BYTE PTR [eax],ch
30003a9c:	42                   	inc    edx
30003a9d:	65                   	gs
30003a9e:	72 6b                	jb     30003b0b <_DYNAMIC+0x5f>
30003aa0:	65                   	gs
30003aa1:	6c                   	ins    BYTE PTR es:[edi],dx
30003aa2:	65                   	gs
30003aa3:	79 29                	jns    30003ace <_DYNAMIC+0x22>
30003aa5:	00 00                	add    BYTE PTR [eax],al
	...

30003aa8 <_daylight>:
30003aa8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

30003aac <_DYNAMIC>:
30003aac:	19 00                	sbb    DWORD PTR [eax],eax
30003aae:	00 00                	add    BYTE PTR [eax],al
30003ab0:	98                   	cwde   
30003ab1:	3b 00                	cmp    eax,DWORD PTR [eax]
30003ab3:	30 1b                	xor    BYTE PTR [ebx],bl
30003ab5:	00 00                	add    BYTE PTR [eax],al
30003ab7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003aba:	00 00                	add    BYTE PTR [eax],al
30003abc:	1a 00                	sbb    al,BYTE PTR [eax]
30003abe:	00 00                	add    BYTE PTR [eax],al
30003ac0:	9c                   	pushf  
30003ac1:	3b 00                	cmp    eax,DWORD PTR [eax]
30003ac3:	30 1c 00             	xor    BYTE PTR [eax+eax*1],bl
30003ac6:	00 00                	add    BYTE PTR [eax],al
30003ac8:	04 00                	add    al,0x0
30003aca:	00 00                	add    BYTE PTR [eax],al
30003acc:	04 00                	add    al,0x0
30003ace:	00 00                	add    BYTE PTR [eax],al
30003ad0:	b8 32 00 30 05       	mov    eax,0x5300032
30003ad5:	00 00                	add    BYTE PTR [eax],al
30003ad7:	00 80 31 00 30 06    	add    BYTE PTR [eax+0x6300031],al
30003add:	00 00                	add    BYTE PTR [eax],al
30003adf:	00 d0                	add    al,dl
30003ae1:	2e 00 30             	add    BYTE PTR cs:[eax],dh
30003ae4:	0a 00                	or     al,BYTE PTR [eax]
30003ae6:	00 00                	add    BYTE PTR [eax],al
30003ae8:	37                   	aaa    
30003ae9:	01 00                	add    DWORD PTR [eax],eax
30003aeb:	00 0b                	add    BYTE PTR [ebx],cl
30003aed:	00 00                	add    BYTE PTR [eax],al
30003aef:	00 10                	add    BYTE PTR [eax],dl
30003af1:	00 00                	add    BYTE PTR [eax],al
30003af3:	00 03                	add    BYTE PTR [ebx],al
30003af5:	00 00                	add    BYTE PTR [eax],al
30003af7:	00 7c 3b 00          	add    BYTE PTR [ebx+edi*1+0x0],bh
30003afb:	30 02                	xor    BYTE PTR [edx],al
30003afd:	00 00                	add    BYTE PTR [eax],al
30003aff:	00 20                	add    BYTE PTR [eax],ah
30003b01:	00 00                	add    BYTE PTR [eax],al
30003b03:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
30003b06:	00 00                	add    BYTE PTR [eax],al
30003b08:	11 00                	adc    DWORD PTR [eax],eax
30003b0a:	00 00                	add    BYTE PTR [eax],al
30003b0c:	17                   	pop    ss
30003b0d:	00 00                	add    BYTE PTR [eax],al
30003b0f:	00 d0                	add    al,dl
30003b11:	39 00                	cmp    DWORD PTR [eax],eax
30003b13:	30 11                	xor    BYTE PTR [ecx],dl
30003b15:	00 00                	add    BYTE PTR [eax],al
30003b17:	00 00                	add    BYTE PTR [eax],al
30003b19:	39 00                	cmp    DWORD PTR [eax],eax
30003b1b:	30 12                	xor    BYTE PTR [edx],dl
30003b1d:	00 00                	add    BYTE PTR [eax],al
30003b1f:	00 d0                	add    al,dl
30003b21:	00 00                	add    BYTE PTR [eax],al
30003b23:	00 13                	add    BYTE PTR [ebx],dl
30003b25:	00 00                	add    BYTE PTR [eax],al
30003b27:	00 08                	add    BYTE PTR [eax],cl
30003b29:	00 00                	add    BYTE PTR [eax],al
30003b2b:	00 16                	add    BYTE PTR [esi],dl
30003b2d:	00 00                	add    BYTE PTR [eax],al
30003b2f:	00 00                	add    BYTE PTR [eax],al
30003b31:	00 00                	add    BYTE PTR [eax],al
30003b33:	00 fa                	add    dl,bh
30003b35:	ff                   	(bad)  
30003b36:	ff 6f 09             	jmp    FWORD PTR [edi+0x9]
	...

Disassembly of section .got:

30003b64 <.got>:
30003b64:	c0 3b 00             	sar    BYTE PTR [ebx],0x0
30003b67:	30 c8                	xor    al,cl
30003b69:	3b 00                	cmp    eax,DWORD PTR [eax]
30003b6b:	30 a8 3b 00 30 ac    	xor    BYTE PTR [eax-0x53cfffc5],ch
30003b71:	3b 00                	cmp    eax,DWORD PTR [eax]
30003b73:	30 b0 3b 00 30 b4    	xor    BYTE PTR [eax-0x4bcfffc5],dh
30003b79:	3b 00                	cmp    eax,DWORD PTR [eax]
30003b7b:	30                   	.byte 0x30

Disassembly of section .got.plt:

30003b7c <_GLOBAL_OFFSET_TABLE_>:
30003b7c:	ac                   	lods   al,BYTE PTR ds:[esi]
30003b7d:	3a 00                	cmp    al,BYTE PTR [eax]
30003b7f:	30 00                	xor    BYTE PTR [eax],al
30003b81:	00 00                	add    BYTE PTR [eax],al
30003b83:	00 00                	add    BYTE PTR [eax],al
30003b85:	00 00                	add    BYTE PTR [eax],al
30003b87:	00 16                	add    BYTE PTR [esi],dl
30003b89:	25 00 30 26 25       	and    eax,0x25263000
30003b8e:	00 30                	add    BYTE PTR [eax],dh
30003b90:	36                   	ss
30003b91:	25 00 30 46 25       	and    eax,0x25463000
30003b96:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .init_array:

30003b98 <.init_array>:
30003b98:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

30003b9c <.fini_array>:
30003b9c:	f4                   	hlt    
30003b9d:	05                   	.byte 0x5
30003b9e:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .data.rel.local:

30003ba0 <_tzname>:
30003ba0:	80 38 00             	cmp    BYTE PTR [eax],0x0
30003ba3:	30                   	.byte 0x30
30003ba4:	80 38 00             	cmp    BYTE PTR [eax],0x0
30003ba7:	30                   	.byte 0x30

Disassembly of section .bss:

30003ba8 <heapEnd>:
30003ba8:	00 00                	add    BYTE PTR [eax],al
	...

30003bac <heapBase>:
30003bac:	00 00                	add    BYTE PTR [eax],al
	...

30003bb0 <heapCurr>:
30003bb0:	00 00                	add    BYTE PTR [eax],al
	...

30003bb4 <libcTZ>:
30003bb4:	00 00                	add    BYTE PTR [eax],al
	...

30003bb8 <lasts.1277>:
30003bb8:	00 00                	add    BYTE PTR [eax],al
	...

30003bbc <libcInitialized>:
30003bbc:	00 00                	add    BYTE PTR [eax],al
	...

30003bc0 <fops>:
	...

30003bc8 <console_file>:
	...

30003bd8 <_dstbias>:
30003bd8:	00 00                	add    BYTE PTR [eax],al
	...

30003bdc <ticksToWait>:
30003bdc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	53                   	push   ebx
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	ef                   	out    dx,eax
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b3             	add    BYTE PTR [ebx+esi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	58                   	pop    eax
      29:	00 00                	add    BYTE PTR [eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	51                   	push   ecx
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 02                	add    BYTE PTR [edx],al
      5c:	34 61                	xor    al,0x61
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	32 00                	xor    al,BYTE PTR [eax]
      66:	00 00                	add    BYTE PTR [eax],al
      68:	02 08                	add    cl,BYTE PTR [eax]
      6a:	07                   	pop    es
      6b:	28 00                	sub    BYTE PTR [eax],al
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	96                   	xchg   esi,eax
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 02                	add    BYTE PTR [edx],al
      7e:	01 02                	add    DWORD PTR [edx],eax
      80:	90                   	nop
      81:	00 00                	add    BYTE PTR [eax],al
      83:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
      8a:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
      8d:	00 00                	add    BYTE PTR [eax],al
      8f:	05 04 95 00 00       	add    eax,0x9504
      94:	00 06                	add    BYTE PTR [esi],al
      96:	25 00 00 00 02       	and    eax,0x2000000
      9b:	04 07                	add    al,0x7
      9d:	2d 00 00 00 02       	sub    eax,0x2000000
      a2:	04 07                	add    al,0x7
      a4:	dc 00                	fadd   QWORD PTR [eax]
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	05 04 25 00 00       	add    eax,0x2504
      ad:	00 07                	add    BYTE PTR [edi],al
      af:	21 00                	and    DWORD PTR [eax],eax
      b1:	00 00                	add    BYTE PTR [eax],al
      b3:	01 08                	add    DWORD PTR [eax],ecx
      b5:	a8 00                	test   al,0x0
      b7:	00 00                	add    BYTE PTR [eax],al
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	00 30                	add    BYTE PTR [eax],dh
      bd:	38 00                	cmp    BYTE PTR [eax],al
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	01 9c e0 00 00 00 08 	add    DWORD PTR [eax+eiz*8+0x8000000],ebx
      c8:	73 00                	jae    ca <sysEnter_Vector-0x12ff36>
      ca:	01 08                	add    DWORD PTR [eax],ecx
      cc:	8f 00                	pop    DWORD PTR [eax]
      ce:	00 00                	add    BYTE PTR [eax],al
      d0:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      d6:	01 08                	add    DWORD PTR [eax],ecx
      d8:	3a 00                	cmp    al,BYTE PTR [eax]
      da:	00 00                	add    BYTE PTR [eax],al
      dc:	02 91 04 00 07 a2    	add    dl,BYTE PTR [ecx-0x5df8fffc]
      e2:	00 00                	add    BYTE PTR [eax],al
      e4:	00 01                	add    BYTE PTR [ecx],al
      e6:	10 a8 00 00 00 38    	adc    BYTE PTR [eax+0x38000000],ch
      ec:	00 00                	add    BYTE PTR [eax],al
      ee:	30 38                	xor    BYTE PTR [eax],bh
      f0:	00 00                	add    BYTE PTR [eax],al
      f2:	00 01                	add    BYTE PTR [ecx],al
      f4:	9c                   	pushf  
      f5:	12 01                	adc    al,BYTE PTR [ecx]
      f7:	00 00                	add    BYTE PTR [eax],al
      f9:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      fc:	01 10                	add    DWORD PTR [eax],edx
      fe:	8f 00                	pop    DWORD PTR [eax]
     100:	00 00                	add    BYTE PTR [eax],al
     102:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
     108:	01 10                	add    DWORD PTR [eax],edx
     10a:	3a 00                	cmp    al,BYTE PTR [eax]
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	02 91 04 00 09 3f    	add    dl,BYTE PTR [ecx+0x3f090004]
     114:	00 00                	add    BYTE PTR [eax],al
     116:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     119:	56                   	push   esi
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
     122:	30 09                	xor    BYTE PTR [ecx],cl
     124:	aa                   	stos   BYTE PTR es:[edi],al
     125:	00 00                	add    BYTE PTR [eax],al
     127:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     12e:	05 03 b0 3b 00       	add    eax,0x3bb003
     133:	30 09                	xor    BYTE PTR [ecx],cl
     135:	56                   	push   esi
     136:	01 00                	add    DWORD PTR [eax],eax
     138:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     13b:	56                   	push   esi
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
     144:	30 09                	xor    BYTE PTR [ecx],cl
     146:	48                   	dec    eax
     147:	00 00                	add    BYTE PTR [eax],al
     149:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
     14f:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
     155:	30 00                	xor    BYTE PTR [eax],al
     157:	92                   	xchg   edx,eax
     158:	01 00                	add    DWORD PTR [eax],eax
     15a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     15d:	83 00 00             	add    DWORD PTR [eax],0x0
     160:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     163:	ef                   	out    dx,eax
     164:	00 00                	add    BYTE PTR [eax],al
     166:	00 0c 64             	add    BYTE PTR [esp+eiz*2],cl
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
     16e:	00 00                	add    BYTE PTR [eax],al
     170:	70 00                	jo     172 <sysEnter_Vector-0x12fe8e>
     172:	00 30                	add    BYTE PTR [eax],dh
     174:	aa                   	stos   BYTE PTR es:[edi],al
     175:	00 00                	add    BYTE PTR [eax],al
     177:	00 de                	add    dh,bl
     179:	00 00                	add    BYTE PTR [eax],al
     17b:	00 02                	add    BYTE PTR [edx],al
     17d:	01 06                	add    DWORD PTR [esi],eax
     17f:	58                   	pop    eax
     180:	00 00                	add    BYTE PTR [eax],al
     182:	00 02                	add    BYTE PTR [edx],al
     184:	01 06                	add    DWORD PTR [esi],eax
     186:	51                   	push   ecx
     187:	00 00                	add    BYTE PTR [eax],al
     189:	00 02                	add    BYTE PTR [edx],al
     18b:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
     191:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     198:	02 08                	add    cl,BYTE PTR [eax]
     19a:	05 00 00 00 00       	add    eax,0x0
     19f:	02 01                	add    al,BYTE PTR [ecx]
     1a1:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
     1a4:	00 00                	add    BYTE PTR [eax],al
     1a6:	02 02                	add    al,BYTE PTR [edx]
     1a8:	07                   	pop    es
     1a9:	0e                   	push   cs
     1aa:	00 00                	add    BYTE PTR [eax],al
     1ac:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
     1af:	00 00                	add    BYTE PTR [eax],al
     1b1:	00 02                	add    BYTE PTR [edx],al
     1b3:	34 61                	xor    al,0x61
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	00 02                	add    BYTE PTR [edx],al
     1b9:	04 07                	add    al,0x7
     1bb:	32 00                	xor    al,BYTE PTR [eax]
     1bd:	00 00                	add    BYTE PTR [eax],al
     1bf:	02 08                	add    cl,BYTE PTR [eax]
     1c1:	07                   	pop    es
     1c2:	28 00                	sub    BYTE PTR [eax],al
     1c4:	00 00                	add    BYTE PTR [eax],al
     1c6:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1cd:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1d0:	96                   	xchg   esi,eax
     1d1:	00 00                	add    BYTE PTR [eax],al
     1d3:	00 02                	add    BYTE PTR [edx],al
     1d5:	01 02                	add    DWORD PTR [edx],eax
     1d7:	90                   	nop
     1d8:	00 00                	add    BYTE PTR [eax],al
     1da:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
     1e1:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1e9:	2d 00 00 00 02       	sub    eax,0x2000000
     1ee:	04 07                	add    al,0x7
     1f0:	dc 00                	fadd   QWORD PTR [eax]
     1f2:	00 00                	add    BYTE PTR [eax],al
     1f4:	05 04 25 00 00       	add    eax,0x2504
     1f9:	00 06                	add    BYTE PTR [esi],al
     1fb:	8e 01                	mov    es,WORD PTR [ecx]
     1fd:	00 00                	add    BYTE PTR [eax],al
     1ff:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     205:	70 00                	jo     207 <sysEnter_Vector-0x12fdf9>
     207:	00 30                	add    BYTE PTR [eax],dh
     209:	55                   	push   ebp
     20a:	00 00                	add    BYTE PTR [eax],al
     20c:	00 01                	add    BYTE PTR [ecx],al
     20e:	9c                   	pushf  
     20f:	fa                   	cli    
     210:	00 00                	add    BYTE PTR [eax],al
     212:	00 07                	add    BYTE PTR [edi],al
     214:	f0 09 00             	lock or DWORD PTR [eax],eax
     217:	00 01                	add    BYTE PTR [ecx],al
     219:	25 9d 00 00 00       	and    eax,0x9d
     21e:	02 91 00 07 5e 01    	add    dl,BYTE PTR [ecx+0x15e0700]
     224:	00 00                	add    BYTE PTR [eax],al
     226:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     22c:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     232:	01 27                	add    DWORD PTR [edi],esp
     234:	25 00 00 00 01       	and    eax,0x1000000
     239:	51                   	push   ecx
     23a:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23d:	01 27                	add    DWORD PTR [edi],esp
     23f:	9d                   	popf   
     240:	00 00                	add    BYTE PTR [eax],al
     242:	00 01                	add    BYTE PTR [ecx],al
     244:	56                   	push   esi
     245:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     248:	01 27                	add    DWORD PTR [edi],esp
     24a:	9d                   	popf   
     24b:	00 00                	add    BYTE PTR [eax],al
     24d:	00 01                	add    BYTE PTR [ecx],al
     24f:	53                   	push   ebx
     250:	00 06                	add    BYTE PTR [esi],al
     252:	96                   	xchg   esi,eax
     253:	01 00                	add    DWORD PTR [eax],eax
     255:	00 01                	add    BYTE PTR [ecx],al
     257:	33 3a                	xor    edi,DWORD PTR [edx]
     259:	00 00                	add    BYTE PTR [eax],al
     25b:	00 c5                	add    ch,al
     25d:	00 00                	add    BYTE PTR [eax],al
     25f:	30 55 00             	xor    BYTE PTR [ebp+0x0],dl
     262:	00 00                	add    BYTE PTR [eax],al
     264:	01 9c 51 01 00 00 07 	add    DWORD PTR [ecx+edx*2+0x7000001],ebx
     26b:	f0 09 00             	lock or DWORD PTR [eax],eax
     26e:	00 01                	add    BYTE PTR [ecx],al
     270:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     276:	91                   	xchg   ecx,eax
     277:	00 07                	add    BYTE PTR [edi],al
     279:	5e                   	pop    esi
     27a:	01 00                	add    DWORD PTR [eax],eax
     27c:	00 01                	add    BYTE PTR [ecx],al
     27e:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     284:	91                   	xchg   ecx,eax
     285:	04 08                	add    al,0x8
     287:	63 00                	arpl   WORD PTR [eax],ax
     289:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     28f:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     292:	70 00                	jo     294 <sysEnter_Vector-0x12fd6c>
     294:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     29a:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29d:	73 00                	jae    29f <sysEnter_Vector-0x12fd61>
     29f:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2a5:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a8:	09 3f                	or     DWORD PTR [edi],edi
     2aa:	00 00                	add    BYTE PTR [eax],al
     2ac:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     2af:	56                   	push   esi
     2b0:	00 00                	add    BYTE PTR [eax],al
     2b2:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
     2b8:	30 09                	xor    BYTE PTR [ecx],cl
     2ba:	aa                   	stos   BYTE PTR es:[edi],al
     2bb:	00 00                	add    BYTE PTR [eax],al
     2bd:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     2c4:	05 03 b0 3b 00       	add    eax,0x3bb003
     2c9:	30 09                	xor    BYTE PTR [ecx],cl
     2cb:	56                   	push   esi
     2cc:	01 00                	add    DWORD PTR [eax],eax
     2ce:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     2d1:	56                   	push   esi
     2d2:	00 00                	add    BYTE PTR [eax],al
     2d4:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
     2da:	30 09                	xor    BYTE PTR [ecx],cl
     2dc:	48                   	dec    eax
     2dd:	00 00                	add    BYTE PTR [eax],al
     2df:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
     2e5:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
     2eb:	30 00                	xor    BYTE PTR [eax],al
     2ed:	35 01 00 00 04       	xor    eax,0x4000001
     2f2:	00 0e                	add    BYTE PTR [esi],cl
     2f4:	01 00                	add    DWORD PTR [eax],eax
     2f6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     2f9:	ef                   	out    dx,eax
     2fa:	00 00                	add    BYTE PTR [eax],al
     2fc:	00 0c 9f             	add    BYTE PTR [edi+ebx*4],cl
     2ff:	01 00                	add    DWORD PTR [eax],eax
     301:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
     304:	00 00                	add    BYTE PTR [eax],al
     306:	1c 01                	sbb    al,0x1
     308:	00 30                	add    BYTE PTR [eax],dh
     30a:	97                   	xchg   edi,eax
     30b:	00 00                	add    BYTE PTR [eax],al
     30d:	00 ef                	add    bh,ch
     30f:	01 00                	add    DWORD PTR [eax],eax
     311:	00 02                	add    BYTE PTR [edx],al
     313:	01 06                	add    DWORD PTR [esi],eax
     315:	58                   	pop    eax
     316:	00 00                	add    BYTE PTR [eax],al
     318:	00 02                	add    BYTE PTR [edx],al
     31a:	01 06                	add    DWORD PTR [esi],eax
     31c:	51                   	push   ecx
     31d:	00 00                	add    BYTE PTR [eax],al
     31f:	00 02                	add    BYTE PTR [edx],al
     321:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
     327:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     32e:	02 08                	add    cl,BYTE PTR [eax]
     330:	05 00 00 00 00       	add    eax,0x0
     335:	02 01                	add    al,BYTE PTR [ecx]
     337:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	02 02                	add    al,BYTE PTR [edx]
     33e:	07                   	pop    es
     33f:	0e                   	push   cs
     340:	00 00                	add    BYTE PTR [eax],al
     342:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
     345:	00 00                	add    BYTE PTR [eax],al
     347:	00 02                	add    BYTE PTR [edx],al
     349:	34 61                	xor    al,0x61
     34b:	00 00                	add    BYTE PTR [eax],al
     34d:	00 02                	add    BYTE PTR [edx],al
     34f:	04 07                	add    al,0x7
     351:	32 00                	xor    al,BYTE PTR [eax]
     353:	00 00                	add    BYTE PTR [eax],al
     355:	02 08                	add    cl,BYTE PTR [eax]
     357:	07                   	pop    es
     358:	28 00                	sub    BYTE PTR [eax],al
     35a:	00 00                	add    BYTE PTR [eax],al
     35c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     363:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     366:	96                   	xchg   esi,eax
     367:	00 00                	add    BYTE PTR [eax],al
     369:	00 02                	add    BYTE PTR [edx],al
     36b:	01 02                	add    DWORD PTR [edx],eax
     36d:	90                   	nop
     36e:	00 00                	add    BYTE PTR [eax],al
     370:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
     377:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     37a:	00 00                	add    BYTE PTR [eax],al
     37c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     37f:	2d 00 00 00 02       	sub    eax,0x2000000
     384:	04 07                	add    al,0x7
     386:	dc 00                	fadd   QWORD PTR [eax]
     388:	00 00                	add    BYTE PTR [eax],al
     38a:	05 04 25 00 00       	add    eax,0x2504
     38f:	00 06                	add    BYTE PTR [esi],al
     391:	d4 01                	aam    0x1
     393:	00 00                	add    BYTE PTR [eax],al
     395:	01 28                	add    DWORD PTR [eax],ebp
     397:	9d                   	popf   
     398:	00 00                	add    BYTE PTR [eax],al
     39a:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     39d:	00 30                	add    BYTE PTR [eax],dh
     39f:	97                   	xchg   edi,eax
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	00 01                	add    BYTE PTR [ecx],al
     3a4:	9c                   	pushf  
     3a5:	f4                   	hlt    
     3a6:	00 00                	add    BYTE PTR [eax],al
     3a8:	00 07                	add    BYTE PTR [edi],al
     3aa:	73 00                	jae    3ac <sysEnter_Vector-0x12fc54>
     3ac:	01 28                	add    DWORD PTR [eax],ebp
     3ae:	9d                   	popf   
     3af:	00 00                	add    BYTE PTR [eax],al
     3b1:	00 02                	add    BYTE PTR [edx],al
     3b3:	91                   	xchg   ecx,eax
     3b4:	00 08                	add    BYTE PTR [eax],cl
     3b6:	c8 01 00 00          	enter  0x1,0x0
     3ba:	01 28                	add    DWORD PTR [eax],ebp
     3bc:	9d                   	popf   
     3bd:	00 00                	add    BYTE PTR [eax],al
     3bf:	00 02                	add    BYTE PTR [edx],al
     3c1:	91                   	xchg   ecx,eax
     3c2:	04 09                	add    al,0x9
     3c4:	ce                   	into   
     3c5:	01 00                	add    DWORD PTR [eax],eax
     3c7:	00 01                	add    BYTE PTR [ecx],al
     3c9:	2a 9d 00 00 00 05    	sub    bl,BYTE PTR [ebp+0x5000000]
     3cf:	03 b8 3b 00 30 0a    	add    edi,DWORD PTR [eax+0xa30003b]
     3d5:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     3d8:	01 2b                	add    DWORD PTR [ebx],ebp
     3da:	3a 00                	cmp    al,BYTE PTR [eax]
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     3e1:	0b 3f                	or     edi,DWORD PTR [edi]
     3e3:	00 00                	add    BYTE PTR [eax],al
     3e5:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     3e8:	56                   	push   esi
     3e9:	00 00                	add    BYTE PTR [eax],al
     3eb:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
     3f1:	30 0b                	xor    BYTE PTR [ebx],cl
     3f3:	aa                   	stos   BYTE PTR es:[edi],al
     3f4:	00 00                	add    BYTE PTR [eax],al
     3f6:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     3fd:	05 03 b0 3b 00       	add    eax,0x3bb003
     402:	30 0b                	xor    BYTE PTR [ebx],cl
     404:	56                   	push   esi
     405:	01 00                	add    DWORD PTR [eax],eax
     407:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     40a:	56                   	push   esi
     40b:	00 00                	add    BYTE PTR [eax],al
     40d:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
     413:	30 0b                	xor    BYTE PTR [ebx],cl
     415:	48                   	dec    eax
     416:	00 00                	add    BYTE PTR [eax],al
     418:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
     41e:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
     424:	30 00                	xor    BYTE PTR [eax],al
     426:	d5 01                	aad    0x1
     428:	00 00                	add    BYTE PTR [eax],al
     42a:	04 00                	add    al,0x0
     42c:	b7 01                	mov    bh,0x1
     42e:	00 00                	add    BYTE PTR [eax],al
     430:	04 01                	add    al,0x1
     432:	ef                   	out    dx,eax
     433:	00 00                	add    BYTE PTR [eax],al
     435:	00 0c e1             	add    BYTE PTR [ecx+eiz*8],cl
     438:	01 00                	add    DWORD PTR [eax],eax
     43a:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
     43d:	00 00                	add    BYTE PTR [eax],al
     43f:	b4 01                	mov    ah,0x1
     441:	00 30                	add    BYTE PTR [eax],dh
     443:	8e 01                	mov    es,WORD PTR [ecx]
     445:	00 00                	add    BYTE PTR [eax],al
     447:	d1 02                	rol    DWORD PTR [edx],1
     449:	00 00                	add    BYTE PTR [eax],al
     44b:	02 01                	add    al,BYTE PTR [ecx]
     44d:	06                   	push   es
     44e:	58                   	pop    eax
     44f:	00 00                	add    BYTE PTR [eax],al
     451:	00 02                	add    BYTE PTR [edx],al
     453:	01 06                	add    DWORD PTR [esi],eax
     455:	51                   	push   ecx
     456:	00 00                	add    BYTE PTR [eax],al
     458:	00 02                	add    BYTE PTR [edx],al
     45a:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
     460:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     467:	02 08                	add    cl,BYTE PTR [eax]
     469:	05 00 00 00 00       	add    eax,0x0
     46e:	02 01                	add    al,BYTE PTR [ecx]
     470:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
     473:	00 00                	add    BYTE PTR [eax],al
     475:	02 02                	add    al,BYTE PTR [edx]
     477:	07                   	pop    es
     478:	0e                   	push   cs
     479:	00 00                	add    BYTE PTR [eax],al
     47b:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
     47e:	00 00                	add    BYTE PTR [eax],al
     480:	00 02                	add    BYTE PTR [edx],al
     482:	34 61                	xor    al,0x61
     484:	00 00                	add    BYTE PTR [eax],al
     486:	00 02                	add    BYTE PTR [edx],al
     488:	04 07                	add    al,0x7
     48a:	32 00                	xor    al,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	02 08                	add    cl,BYTE PTR [eax]
     490:	07                   	pop    es
     491:	28 00                	sub    BYTE PTR [eax],al
     493:	00 00                	add    BYTE PTR [eax],al
     495:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     49c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     49f:	96                   	xchg   esi,eax
     4a0:	00 00                	add    BYTE PTR [eax],al
     4a2:	00 02                	add    BYTE PTR [edx],al
     4a4:	01 02                	add    DWORD PTR [edx],eax
     4a6:	90                   	nop
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
     4b0:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4b8:	2d 00 00 00 02       	sub    eax,0x2000000
     4bd:	04 07                	add    al,0x7
     4bf:	dc 00                	fadd   QWORD PTR [eax]
     4c1:	00 00                	add    BYTE PTR [eax],al
     4c3:	05 04 25 00 00       	add    eax,0x2504
     4c8:	00 06                	add    BYTE PTR [esi],al
     4ca:	fa                   	cli    
     4cb:	01 00                	add    DWORD PTR [eax],eax
     4cd:	00 01                	add    BYTE PTR [ecx],al
     4cf:	0a b4 01 00 30 77 00 	or     dh,BYTE PTR [ecx+eax*1+0x773000]
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	01 9c 00 01 00 00 07 	add    DWORD PTR [eax+eax*1+0x7000001],ebx
     4df:	73 00                	jae    4e1 <sysEnter_Vector-0x12fb1f>
     4e1:	01 0a                	add    DWORD PTR [edx],ecx
     4e3:	9d                   	popf   
     4e4:	00 00                	add    BYTE PTR [eax],al
     4e6:	00 02                	add    BYTE PTR [edx],al
     4e8:	91                   	xchg   ecx,eax
     4e9:	00 08                	add    BYTE PTR [eax],cl
     4eb:	69 00 01 0c 3a 00    	imul   eax,DWORD PTR [eax],0x3a0c01
     4f1:	00 00                	add    BYTE PTR [eax],al
     4f3:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     4f9:	01 0c 3a             	add    DWORD PTR [edx+edi*1],ecx
     4fc:	00 00                	add    BYTE PTR [eax],al
     4fe:	00 02                	add    BYTE PTR [edx],al
     500:	91                   	xchg   ecx,eax
     501:	68 08 63 00 01       	push   0x1006308
     506:	0d 25 00 00 00       	or     eax,0x25
     50b:	02 91 67 09 c5 01    	add    dl,BYTE PTR [ecx+0x1c50967]
     511:	00 30                	add    BYTE PTR [eax],dh
     513:	60                   	pusha  
     514:	00 00                	add    BYTE PTR [eax],al
     516:	00 0a                	add    BYTE PTR [edx],cl
     518:	f2 01 00             	repnz add DWORD PTR [eax],eax
     51b:	00 01                	add    BYTE PTR [ecx],al
     51d:	0f 3a 00             	(bad)  
     520:	00 00                	add    BYTE PTR [eax],al
     522:	0b 00                	or     eax,DWORD PTR [eax]
     524:	00 00                	add    BYTE PTR [eax],al
     526:	06                   	push   es
     527:	db 01                	fild   DWORD PTR [ecx]
     529:	00 00                	add    BYTE PTR [eax],al
     52b:	01 16                	add    DWORD PTR [esi],edx
     52d:	2b 02                	sub    eax,DWORD PTR [edx]
     52f:	00 30                	add    BYTE PTR [eax],dh
     531:	bb 00 00 00 01       	mov    ebx,0x1000000
     536:	9c                   	pushf  
     537:	48                   	dec    eax
     538:	01 00                	add    DWORD PTR [eax],eax
     53a:	00 07                	add    BYTE PTR [edi],al
     53c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53d:	00 01                	add    BYTE PTR [ecx],al
     53f:	16                   	push   ss
     540:	3a 00                	cmp    al,BYTE PTR [eax]
     542:	00 00                	add    BYTE PTR [eax],al
     544:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54a:	01 16                	add    DWORD PTR [esi],edx
     54c:	9d                   	popf   
     54d:	00 00                	add    BYTE PTR [eax],al
     54f:	00 02                	add    BYTE PTR [edx],al
     551:	91                   	xchg   ecx,eax
     552:	04 08                	add    al,0x8
     554:	69 00 01 18 3a 00    	imul   eax,DWORD PTR [eax],0x3a1801
     55a:	00 00                	add    BYTE PTR [eax],al
     55c:	02 91 6c 0c 03 02    	add    dl,BYTE PTR [ecx+0x2030c6c]
     562:	00 00                	add    BYTE PTR [eax],al
     564:	01 18                	add    DWORD PTR [eax],ebx
     566:	3a 00                	cmp    al,BYTE PTR [eax]
     568:	00 00                	add    BYTE PTR [eax],al
     56a:	02 91 68 00 0d ed    	add    dl,BYTE PTR [ecx-0x12f2ff98]
     570:	01 00                	add    DWORD PTR [eax],eax
     572:	00 01                	add    BYTE PTR [ecx],al
     574:	27                   	daa    
     575:	3a 00                	cmp    al,BYTE PTR [eax]
     577:	00 00                	add    BYTE PTR [eax],al
     579:	e6 02                	out    0x2,al
     57b:	00 30                	add    BYTE PTR [eax],dh
     57d:	5c                   	pop    esp
     57e:	00 00                	add    BYTE PTR [eax],al
     580:	00 01                	add    BYTE PTR [ecx],al
     582:	9c                   	pushf  
     583:	94                   	xchg   esp,eax
     584:	01 00                	add    DWORD PTR [eax],eax
     586:	00 07                	add    BYTE PTR [edi],al
     588:	73 74                	jae    5fe <sysEnter_Vector-0x12fa02>
     58a:	72 00                	jb     58c <sysEnter_Vector-0x12fa74>
     58c:	01 27                	add    DWORD PTR [edi],esp
     58e:	9d                   	popf   
     58f:	00 00                	add    BYTE PTR [eax],al
     591:	00 02                	add    BYTE PTR [edx],al
     593:	91                   	xchg   ecx,eax
     594:	00 08                	add    BYTE PTR [eax],cl
     596:	72 65                	jb     5fd <sysEnter_Vector-0x12fa03>
     598:	73 00                	jae    59a <sysEnter_Vector-0x12fa66>
     59a:	01 29                	add    DWORD PTR [ecx],ebp
     59c:	3a 00                	cmp    al,BYTE PTR [eax]
     59e:	00 00                	add    BYTE PTR [eax],al
     5a0:	02 91 74 09 fd 02    	add    dl,BYTE PTR [ecx+0x2fd0974]
     5a6:	00 30                	add    BYTE PTR [eax],dh
     5a8:	40                   	inc    eax
     5a9:	00 00                	add    BYTE PTR [eax],al
     5ab:	00 08                	add    BYTE PTR [eax],cl
     5ad:	69 00 01 2d 3a 00    	imul   eax,DWORD PTR [eax],0x3a2d01
     5b3:	00 00                	add    BYTE PTR [eax],al
     5b5:	02 91 70 00 00 0e    	add    dl,BYTE PTR [ecx+0xe000070]
     5bb:	3f                   	aas    
     5bc:	00 00                	add    BYTE PTR [eax],al
     5be:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     5c1:	56                   	push   esi
     5c2:	00 00                	add    BYTE PTR [eax],al
     5c4:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
     5ca:	30 0e                	xor    BYTE PTR [esi],cl
     5cc:	aa                   	stos   BYTE PTR es:[edi],al
     5cd:	00 00                	add    BYTE PTR [eax],al
     5cf:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     5d6:	05 03 b0 3b 00       	add    eax,0x3bb003
     5db:	30 0e                	xor    BYTE PTR [esi],cl
     5dd:	56                   	push   esi
     5de:	01 00                	add    DWORD PTR [eax],eax
     5e0:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     5e3:	56                   	push   esi
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
     5ec:	30 0e                	xor    BYTE PTR [esi],cl
     5ee:	48                   	dec    eax
     5ef:	00 00                	add    BYTE PTR [eax],al
     5f1:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
     5f7:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
     5fd:	30 00                	xor    BYTE PTR [eax],al
     5ff:	7c 02                	jl     603 <sysEnter_Vector-0x12f9fd>
     601:	00 00                	add    BYTE PTR [eax],al
     603:	04 00                	add    al,0x0
     605:	8a 02                	mov    al,BYTE PTR [edx]
     607:	00 00                	add    BYTE PTR [eax],al
     609:	04 01                	add    al,0x1
     60b:	ef                   	out    dx,eax
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
     611:	02 00                	add    al,BYTE PTR [eax]
     613:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
     616:	00 00                	add    BYTE PTR [eax],al
     618:	44                   	inc    esp
     619:	03 00                	add    eax,DWORD PTR [eax]
     61b:	30 52 01             	xor    BYTE PTR [edx+0x1],dl
     61e:	00 00                	add    BYTE PTR [eax],al
     620:	d7                   	xlat   BYTE PTR ds:[ebx]
     621:	03 00                	add    eax,DWORD PTR [eax]
     623:	00 02                	add    BYTE PTR [edx],al
     625:	01 06                	add    DWORD PTR [esi],eax
     627:	58                   	pop    eax
     628:	00 00                	add    BYTE PTR [eax],al
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	01 06                	add    DWORD PTR [esi],eax
     62e:	51                   	push   ecx
     62f:	00 00                	add    BYTE PTR [eax],al
     631:	00 02                	add    BYTE PTR [edx],al
     633:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
     639:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     640:	02 08                	add    cl,BYTE PTR [eax]
     642:	05 00 00 00 00       	add    eax,0x0
     647:	02 01                	add    al,BYTE PTR [ecx]
     649:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
     64c:	00 00                	add    BYTE PTR [eax],al
     64e:	02 02                	add    al,BYTE PTR [edx]
     650:	07                   	pop    es
     651:	0e                   	push   cs
     652:	00 00                	add    BYTE PTR [eax],al
     654:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
     657:	00 00                	add    BYTE PTR [eax],al
     659:	00 02                	add    BYTE PTR [edx],al
     65b:	34 61                	xor    al,0x61
     65d:	00 00                	add    BYTE PTR [eax],al
     65f:	00 02                	add    BYTE PTR [edx],al
     661:	04 07                	add    al,0x7
     663:	32 00                	xor    al,BYTE PTR [eax]
     665:	00 00                	add    BYTE PTR [eax],al
     667:	02 08                	add    cl,BYTE PTR [eax]
     669:	07                   	pop    es
     66a:	28 00                	sub    BYTE PTR [eax],al
     66c:	00 00                	add    BYTE PTR [eax],al
     66e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     675:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     678:	96                   	xchg   esi,eax
     679:	00 00                	add    BYTE PTR [eax],al
     67b:	00 02                	add    BYTE PTR [edx],al
     67d:	01 02                	add    DWORD PTR [edx],eax
     67f:	90                   	nop
     680:	00 00                	add    BYTE PTR [eax],al
     682:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
     689:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	05 63 02 00 00       	add    eax,0x263
     693:	04 61                	add    al,0x61
     695:	00 00                	add    BYTE PTR [eax],al
     697:	00 06                	add    BYTE PTR [esi],al
     699:	15 24 01 00 00       	adc    eax,0x124
     69e:	06                   	push   es
     69f:	49                   	dec    ecx
     6a0:	03 00                	add    eax,DWORD PTR [eax]
     6a2:	00 00                	add    BYTE PTR [eax],al
     6a4:	06                   	push   es
     6a5:	f2 02 00             	repnz add al,BYTE PTR [eax]
     6a8:	00 01                	add    BYTE PTR [ecx],al
     6aa:	06                   	push   es
     6ab:	d8 02                	fadd   DWORD PTR [edx]
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	03 06                	add    eax,DWORD PTR [esi]
     6b1:	3b 03                	cmp    eax,DWORD PTR [ebx]
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	04 06                	add    al,0x6
     6b7:	42                   	inc    edx
     6b8:	02 00                	add    al,BYTE PTR [eax]
     6ba:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     6bd:	e5 02                	in     eax,0x2
     6bf:	00 00                	add    BYTE PTR [eax],al
     6c1:	59                   	pop    ecx
     6c2:	06                   	push   es
     6c3:	6d                   	ins    DWORD PTR es:[edi],dx
     6c4:	02 00                	add    al,BYTE PTR [eax]
     6c6:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     6c9:	68 03 00 00 97       	push   0x97000003
     6ce:	07                   	pop    es
     6cf:	0a 03                	or     al,BYTE PTR [ebx]
     6d1:	00 00                	add    BYTE PTR [eax],al
     6d3:	63 01                	arpl   WORD PTR [ecx],ax
     6d5:	07                   	pop    es
     6d6:	21 03                	and    DWORD PTR [ebx],eax
     6d8:	00 00                	add    BYTE PTR [eax],al
     6da:	64 01 07             	add    DWORD PTR fs:[edi],eax
     6dd:	c5 02                	lds    eax,FWORD PTR [edx]
     6df:	00 00                	add    BYTE PTR [eax],al
     6e1:	65 01 07             	add    DWORD PTR gs:[edi],eax
     6e4:	9c                   	pushf  
     6e5:	02 00                	add    al,BYTE PTR [eax]
     6e7:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     6ea:	07                   	pop    es
     6eb:	80 02 00             	add    BYTE PTR [edx],0x0
     6ee:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     6f1:	07                   	pop    es
     6f2:	2e 03 00             	add    eax,DWORD PTR cs:[eax]
     6f5:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     6f8:	07                   	pop    es
     6f9:	59                   	pop    ecx
     6fa:	03 00                	add    eax,DWORD PTR [eax]
     6fc:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     6ff:	07                   	pop    es
     700:	0f 02 00             	lar    eax,WORD PTR [eax]
     703:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     706:	07                   	pop    es
     707:	91                   	xchg   ecx,eax
     708:	03 00                	add    eax,DWORD PTR [eax]
     70a:	00 00                	add    BYTE PTR [eax],al
     70c:	03 07                	add    eax,DWORD PTR [edi]
     70e:	b6 02                	mov    dh,0x2
     710:	00 00                	add    BYTE PTR [eax],al
     712:	01 03                	add    DWORD PTR [ebx],eax
     714:	07                   	pop    es
     715:	20 02                	and    BYTE PTR [edx],al
     717:	00 00                	add    BYTE PTR [eax],al
     719:	02 03                	add    al,BYTE PTR [ebx]
     71b:	07                   	pop    es
     71c:	7c 03                	jl     721 <sysEnter_Vector-0x12f8df>
     71e:	00 00                	add    BYTE PTR [eax],al
     720:	03 03                	add    eax,DWORD PTR [ebx]
     722:	00 02                	add    BYTE PTR [edx],al
     724:	04 07                	add    al,0x7
     726:	2d 00 00 00 02       	sub    eax,0x2000000
     72b:	04 07                	add    al,0x7
     72d:	dc 00                	fadd   QWORD PTR [eax]
     72f:	00 00                	add    BYTE PTR [eax],al
     731:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     738:	8c 03                	mov    WORD PTR [ebx],es
     73a:	00 00                	add    BYTE PTR [eax],al
     73c:	01 0f                	add    DWORD PTR [edi],ecx
     73e:	44                   	inc    esp
     73f:	03 00                	add    eax,DWORD PTR [eax]
     741:	30 26                	xor    BYTE PTR [esi],ah
     743:	00 00                	add    BYTE PTR [eax],al
     745:	00 01                	add    BYTE PTR [ecx],al
     747:	9c                   	pushf  
     748:	5c                   	pop    esp
     749:	01 00                	add    DWORD PTR [eax],eax
     74b:	00 0a                	add    BYTE PTR [edx],cl
     74d:	2c 02                	sub    al,0x2
     74f:	00 00                	add    BYTE PTR [eax],al
     751:	01 0f                	add    DWORD PTR [edi],ecx
     753:	32 01                	xor    al,BYTE PTR [ecx]
     755:	00 00                	add    BYTE PTR [eax],al
     757:	02 91 00 00 09 05    	add    dl,BYTE PTR [ecx+0x5090000]
     75d:	03 00                	add    eax,DWORD PTR [eax]
     75f:	00 01                	add    BYTE PTR [ecx],al
     761:	14 6a                	adc    al,0x6a
     763:	03 00                	add    eax,DWORD PTR [eax]
     765:	30 43 00             	xor    BYTE PTR [ebx+0x0],al
     768:	00 00                	add    BYTE PTR [eax],al
     76a:	01 9c 8c 01 00 00 0b 	add    DWORD PTR [esp+ecx*4+0xb000001],ebx
     771:	63 00                	arpl   WORD PTR [eax],ax
     773:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     77a:	91                   	xchg   ecx,eax
     77b:	60                   	pusha  
     77c:	0c 2c                	or     al,0x2c
     77e:	02 00                	add    al,BYTE PTR [eax]
     780:	00 01                	add    BYTE PTR [ecx],al
     782:	16                   	push   ss
     783:	8c 01                	mov    WORD PTR [ecx],es
     785:	00 00                	add    BYTE PTR [eax],al
     787:	02 91 72 00 0d 25    	add    dl,BYTE PTR [ecx+0x250d0072]
     78d:	00 00                	add    BYTE PTR [eax],al
     78f:	00 9c 01 00 00 0e 2b 	add    BYTE PTR [ecx+eax*1+0x2b0e0000],bl
     796:	01 00                	add    DWORD PTR [eax],eax
     798:	00 01                	add    BYTE PTR [ecx],al
     79a:	00 0f                	add    BYTE PTR [edi],cl
     79c:	aa                   	stos   BYTE PTR es:[edi],al
     79d:	02 00                	add    al,BYTE PTR [eax]
     79f:	00 01                	add    BYTE PTR [ecx],al
     7a1:	1d 25 00 00 00       	sbb    eax,0x25
     7a6:	ad                   	lods   eax,DWORD PTR ds:[esi]
     7a7:	03 00                	add    eax,DWORD PTR [eax]
     7a9:	30 2f                	xor    BYTE PTR [edi],ch
     7ab:	00 00                	add    BYTE PTR [eax],al
     7ad:	00 01                	add    BYTE PTR [ecx],al
     7af:	9c                   	pushf  
     7b0:	c2 01 00             	ret    0x1
     7b3:	00 10                	add    BYTE PTR [eax],dl
     7b5:	63 00                	arpl   WORD PTR [eax],ax
     7b7:	01 1f                	add    DWORD PTR [edi],ebx
     7b9:	25 00 00 00 02       	and    eax,0x2000000
     7be:	91                   	xchg   ecx,eax
     7bf:	73 00                	jae    7c1 <sysEnter_Vector-0x12f83f>
     7c1:	11 d3                	adc    ebx,edx
     7c3:	02 00                	add    al,BYTE PTR [eax]
     7c5:	00 01                	add    BYTE PTR [ecx],al
     7c7:	25 3a 00 00 00       	and    eax,0x3a
     7cc:	dc 03                	fadd   QWORD PTR [ebx]
     7ce:	00 30                	add    BYTE PTR [eax],dh
     7d0:	ba 00 00 00 01       	mov    edx,0x1000000
     7d5:	9c                   	pushf  
     7d6:	3b 02                	cmp    eax,DWORD PTR [edx]
     7d8:	00 00                	add    BYTE PTR [eax],al
     7da:	0a 2c 02             	or     ch,BYTE PTR [edx+eax*1]
     7dd:	00 00                	add    BYTE PTR [eax],al
     7df:	01 25 32 01 00 00    	add    DWORD PTR ds:0x132,esp
     7e5:	02 91 00 0a af 02    	add    dl,BYTE PTR [ecx+0x2af0a00]
     7eb:	00 00                	add    BYTE PTR [eax],al
     7ed:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     7f3:	02 91 04 0a 08 02    	add    dl,BYTE PTR [ecx+0x2080a04]
     7f9:	00 00                	add    BYTE PTR [eax],al
     7fb:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     801:	02 91 08 0c 95 02    	add    dl,BYTE PTR [ecx+0x2950c08]
     807:	00 00                	add    BYTE PTR [eax],al
     809:	01 27                	add    DWORD PTR [edi],esp
     80b:	25 00 00 00 02       	and    eax,0x2000000
     810:	91                   	xchg   ecx,eax
     811:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     814:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     816:	00 01                	add    BYTE PTR [ecx],al
     818:	28 3a                	sub    BYTE PTR [edx],bh
     81a:	00 00                	add    BYTE PTR [eax],al
     81c:	00 02                	add    BYTE PTR [edx],al
     81e:	91                   	xchg   ecx,eax
     81f:	6c                   	ins    BYTE PTR es:[edi],dx
     820:	0c 3d                	or     al,0x3d
     822:	02 00                	add    al,BYTE PTR [eax]
     824:	00 01                	add    BYTE PTR [ecx],al
     826:	29 8c 01 00 00 02 91 	sub    DWORD PTR [ecx+eax*1-0x6efe0000],ecx
     82d:	69 12 33 02 00 00    	imul   edx,DWORD PTR [edx],0x233
     833:	01 2e                	add    DWORD PTR [esi],ebp
     835:	19 04 00             	sbb    DWORD PTR [eax+eax*1],eax
     838:	30 00                	xor    BYTE PTR [eax],al
     83a:	13 3f                	adc    edi,DWORD PTR [edi]
     83c:	00 00                	add    BYTE PTR [eax],al
     83e:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     841:	56                   	push   esi
     842:	00 00                	add    BYTE PTR [eax],al
     844:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
     84a:	30 13                	xor    BYTE PTR [ebx],dl
     84c:	aa                   	stos   BYTE PTR es:[edi],al
     84d:	00 00                	add    BYTE PTR [eax],al
     84f:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     856:	05 03 b0 3b 00       	add    eax,0x3bb003
     85b:	30 13                	xor    BYTE PTR [ebx],dl
     85d:	56                   	push   esi
     85e:	01 00                	add    DWORD PTR [eax],eax
     860:	00 04 36             	add    BYTE PTR [esi+esi*1],al
     863:	56                   	push   esi
     864:	00 00                	add    BYTE PTR [eax],al
     866:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
     86c:	30 13                	xor    BYTE PTR [ebx],dl
     86e:	48                   	dec    eax
     86f:	00 00                	add    BYTE PTR [eax],al
     871:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
     877:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
     87d:	30 00                	xor    BYTE PTR [eax],al
     87f:	d1 05 00 00 04 00    	rol    DWORD PTR ds:0x40000,1
     885:	a9 03 00 00 04       	test   eax,0x4000003
     88a:	01 ef                	add    edi,ebp
     88c:	00 00                	add    BYTE PTR [eax],al
     88e:	00 0c dd 04 00 00 6d 	add    BYTE PTR [ebx*8+0x6d000004],cl
     895:	00 00                	add    BYTE PTR [eax],al
     897:	00 98 04 00 30 6d    	add    BYTE PTR [eax+0x6d300004],bl
     89d:	03 00                	add    eax,DWORD PTR [eax]
     89f:	00 00                	add    BYTE PTR [eax],al
     8a1:	05 00 00 02 8a       	add    eax,0x8a020000
     8a6:	04 00                	add    al,0x0
     8a8:	00 02                	add    BYTE PTR [edx],al
     8aa:	28 30                	sub    BYTE PTR [eax],dh
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 03                	add    BYTE PTR [ebx],al
     8b0:	04 e8                	add    al,0xe8
     8b2:	03 00                	add    eax,DWORD PTR [eax]
     8b4:	00 3a                	add    BYTE PTR [edx],bh
     8b6:	00 00                	add    BYTE PTR [eax],al
     8b8:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     8bb:	06                   	push   es
     8bc:	58                   	pop    eax
     8bd:	00 00                	add    BYTE PTR [eax],al
     8bf:	00 02                	add    BYTE PTR [edx],al
     8c1:	91                   	xchg   ecx,eax
     8c2:	04 00                	add    al,0x0
     8c4:	00 02                	add    BYTE PTR [edx],al
     8c6:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
     8cc:	01 06                	add    DWORD PTR [esi],eax
     8ce:	51                   	push   ecx
     8cf:	00 00                	add    BYTE PTR [eax],al
     8d1:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     8d4:	05 e5 00 00 00       	add    eax,0xe5
     8d9:	05 04 05 69 6e       	add    eax,0x6e690504
     8de:	74 00                	je     8e0 <sysEnter_Vector-0x12f720>
     8e0:	04 08                	add    al,0x8
     8e2:	05 00 00 00 00       	add    eax,0x0
     8e7:	04 01                	add    al,0x1
     8e9:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
     8ec:	00 00                	add    BYTE PTR [eax],al
     8ee:	04 02                	add    al,0x2
     8f0:	07                   	pop    es
     8f1:	0e                   	push   cs
     8f2:	00 00                	add    BYTE PTR [eax],al
     8f4:	00 02                	add    BYTE PTR [edx],al
     8f6:	64 00 00             	add    BYTE PTR fs:[eax],al
     8f9:	00 03                	add    BYTE PTR [ebx],al
     8fb:	34 81                	xor    al,0x81
     8fd:	00 00                	add    BYTE PTR [eax],al
     8ff:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     902:	07                   	pop    es
     903:	32 00                	xor    al,BYTE PTR [eax]
     905:	00 00                	add    BYTE PTR [eax],al
     907:	04 08                	add    al,0x8
     909:	07                   	pop    es
     90a:	28 00                	sub    BYTE PTR [eax],al
     90c:	00 00                	add    BYTE PTR [eax],al
     90e:	02 ae 03 00 00 04    	add    ch,BYTE PTR [esi+0x4000003]
     914:	d8 81 00 00 00 04    	fadd   DWORD PTR [ecx+0x4000000]
     91a:	04 05                	add    al,0x5
     91c:	05 00 00 00 04       	add    eax,0x4000000
     921:	0c 04                	or     al,0x4
     923:	96                   	xchg   esi,eax
     924:	00 00                	add    BYTE PTR [eax],al
     926:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     929:	02 90 00 00 00 02    	add    dl,BYTE PTR [eax+0x2000000]
     92f:	5d                   	pop    ebp
     930:	00 00                	add    BYTE PTR [eax],al
     932:	00 05 2a 9a 00 00    	add    BYTE PTR ds:0x9a2a,al
     938:	00 06                	add    BYTE PTR [esi],al
     93a:	74 6d                	je     9a9 <sysEnter_Vector-0x12f657>
     93c:	00 2c 05 2c 4a 01 00 	add    BYTE PTR [eax*1+0x14a2c],ch
     943:	00 07                	add    BYTE PTR [edi],al
     945:	10 05 00 00 05 2e    	adc    BYTE PTR ds:0x2e050000,al
     94b:	5a                   	pop    edx
     94c:	00 00                	add    BYTE PTR [eax],al
     94e:	00 00                	add    BYTE PTR [eax],al
     950:	07                   	pop    es
     951:	75 04                	jne    957 <sysEnter_Vector-0x12f6a9>
     953:	00 00                	add    BYTE PTR [eax],al
     955:	05 2f 5a 00 00       	add    eax,0x5a2f
     95a:	00 04 07             	add    BYTE PTR [edi+eax*1],al
     95d:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     95e:	03 00                	add    eax,DWORD PTR [eax]
     960:	00 05 30 5a 00 00    	add    BYTE PTR ds:0x5a30,al
     966:	00 08                	add    BYTE PTR [eax],cl
     968:	07                   	pop    es
     969:	fb                   	sti    
     96a:	04 00                	add    al,0x0
     96c:	00 05 31 5a 00 00    	add    BYTE PTR ds:0x5a31,al
     972:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
     975:	fa                   	cli    
     976:	03 00                	add    eax,DWORD PTR [eax]
     978:	00 05 32 5a 00 00    	add    BYTE PTR ds:0x5a32,al
     97e:	00 10                	add    BYTE PTR [eax],dl
     980:	07                   	pop    es
     981:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
     984:	00 05 33 5a 00 00    	add    BYTE PTR ds:0x5a33,al
     98a:	00 14 07             	add    BYTE PTR [edi+eax*1],dl
     98d:	f3 04 00             	repz add al,0x0
     990:	00 05 34 5a 00 00    	add    BYTE PTR ds:0x5a34,al
     996:	00 18                	add    BYTE PTR [eax],bl
     998:	07                   	pop    es
     999:	82                   	(bad)  
     99a:	04 00                	add    al,0x0
     99c:	00 05 35 5a 00 00    	add    BYTE PTR ds:0x5a35,al
     9a2:	00 1c 07             	add    BYTE PTR [edi+eax*1],bl
     9a5:	2c 04                	sub    al,0x4
     9a7:	00 00                	add    BYTE PTR [eax],al
     9a9:	05 36 5a 00 00       	add    eax,0x5a36
     9ae:	00 20                	add    BYTE PTR [eax],ah
     9b0:	07                   	pop    es
     9b1:	bd 04 00 00 05       	mov    ebp,0x5000004
     9b6:	37                   	aaa    
     9b7:	9a 00 00 00 24 07 cb 	call   0xcb07:0x24000000
     9be:	03 00                	add    eax,DWORD PTR [eax]
     9c0:	00 05 38 4a 01 00    	add    BYTE PTR ds:0x14a38,al
     9c6:	00 28                	add    BYTE PTR [eax],ch
     9c8:	00 08                	add    BYTE PTR [eax],cl
     9ca:	04 50                	add    al,0x50
     9cc:	01 00                	add    DWORD PTR [eax],eax
     9ce:	00 09                	add    BYTE PTR [ecx],cl
     9d0:	3a 00                	cmp    al,BYTE PTR [eax]
     9d2:	00 00                	add    BYTE PTR [eax],al
     9d4:	0a 63 02             	or     ah,BYTE PTR [ebx+0x2]
     9d7:	00 00                	add    BYTE PTR [eax],al
     9d9:	04 81                	add    al,0x81
     9db:	00 00                	add    BYTE PTR [eax],al
     9dd:	00 08                	add    BYTE PTR [eax],cl
     9df:	15 ea 01 00 00       	adc    eax,0x1ea
     9e4:	0b 49 03             	or     ecx,DWORD PTR [ecx+0x3]
     9e7:	00 00                	add    BYTE PTR [eax],al
     9e9:	00 0b                	add    BYTE PTR [ebx],cl
     9eb:	f2 02 00             	repnz add al,BYTE PTR [eax]
     9ee:	00 01                	add    BYTE PTR [ecx],al
     9f0:	0b d8                	or     ebx,eax
     9f2:	02 00                	add    al,BYTE PTR [eax]
     9f4:	00 03                	add    BYTE PTR [ebx],al
     9f6:	0b 3b                	or     edi,DWORD PTR [ebx]
     9f8:	03 00                	add    eax,DWORD PTR [eax]
     9fa:	00 04 0b             	add    BYTE PTR [ebx+ecx*1],al
     9fd:	42                   	inc    edx
     9fe:	02 00                	add    al,BYTE PTR [eax]
     a00:	00 4f 0b             	add    BYTE PTR [edi+0xb],cl
     a03:	e5 02                	in     eax,0x2
     a05:	00 00                	add    BYTE PTR [eax],al
     a07:	59                   	pop    ecx
     a08:	0b 6d 02             	or     ebp,DWORD PTR [ebp+0x2]
     a0b:	00 00                	add    BYTE PTR [eax],al
     a0d:	61                   	popa   
     a0e:	0b 68 03             	or     ebp,DWORD PTR [eax+0x3]
     a11:	00 00                	add    BYTE PTR [eax],al
     a13:	97                   	xchg   edi,eax
     a14:	0c 0a                	or     al,0xa
     a16:	03 00                	add    eax,DWORD PTR [eax]
     a18:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     a1b:	0c 21                	or     al,0x21
     a1d:	03 00                	add    eax,DWORD PTR [eax]
     a1f:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
     a23:	c5 02                	lds    eax,FWORD PTR [edx]
     a25:	00 00                	add    BYTE PTR [eax],al
     a27:	65 01 0c 9c          	add    DWORD PTR gs:[esp+ebx*4],ecx
     a2b:	02 00                	add    al,BYTE PTR [eax]
     a2d:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     a30:	0c 80                	or     al,0x80
     a32:	02 00                	add    al,BYTE PTR [eax]
     a34:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     a37:	0c 2e                	or     al,0x2e
     a39:	03 00                	add    eax,DWORD PTR [eax]
     a3b:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     a3e:	0c 59                	or     al,0x59
     a40:	03 00                	add    eax,DWORD PTR [eax]
     a42:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     a45:	0c 0f                	or     al,0xf
     a47:	02 00                	add    al,BYTE PTR [eax]
     a49:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     a4c:	0c 91                	or     al,0x91
     a4e:	03 00                	add    eax,DWORD PTR [eax]
     a50:	00 00                	add    BYTE PTR [eax],al
     a52:	03 0c b6             	add    ecx,DWORD PTR [esi+esi*4]
     a55:	02 00                	add    al,BYTE PTR [eax]
     a57:	00 01                	add    BYTE PTR [ecx],al
     a59:	03 0c 20             	add    ecx,DWORD PTR [eax+eiz*1]
     a5c:	02 00                	add    al,BYTE PTR [eax]
     a5e:	00 02                	add    BYTE PTR [edx],al
     a60:	03 0c 7c             	add    ecx,DWORD PTR [esp+edi*2]
     a63:	03 00                	add    eax,DWORD PTR [eax]
     a65:	00 03                	add    BYTE PTR [ebx],al
     a67:	03 00                	add    eax,DWORD PTR [eax]
     a69:	04 04                	add    al,0x4
     a6b:	07                   	pop    es
     a6c:	2d 00 00 00 04       	sub    eax,0x4000000
     a71:	04 07                	add    al,0x7
     a73:	dc 00                	fadd   QWORD PTR [eax]
     a75:	00 00                	add    BYTE PTR [eax],al
     a77:	0d 04 08 04 3a       	or     eax,0x3a040804
     a7c:	00 00                	add    BYTE PTR [eax],al
     a7e:	00 0e                	add    BYTE PTR [esi],cl
     a80:	59                   	pop    ecx
     a81:	04 00                	add    al,0x0
     a83:	00 01                	add    BYTE PTR [ecx],al
     a85:	0f 5a 00             	cvtps2pd xmm0,QWORD PTR [eax]
     a88:	00 00                	add    BYTE PTR [eax],al
     a8a:	98                   	cwde   
     a8b:	04 00                	add    al,0x0
     a8d:	30 32                	xor    BYTE PTR [edx],dh
     a8f:	00 00                	add    BYTE PTR [eax],al
     a91:	00 01                	add    BYTE PTR [ecx],al
     a93:	9c                   	pushf  
     a94:	60                   	pusha  
     a95:	02 00                	add    al,BYTE PTR [eax]
     a97:	00 0f                	add    BYTE PTR [edi],cl
     a99:	24 04                	and    al,0x4
     a9b:	00 00                	add    BYTE PTR [eax],al
     a9d:	01 0f                	add    DWORD PTR [edi],ecx
     a9f:	5a                   	pop    edx
     aa0:	00 00                	add    BYTE PTR [eax],al
     aa2:	00 02                	add    BYTE PTR [edx],al
     aa4:	91                   	xchg   ecx,eax
     aa5:	00 0f                	add    BYTE PTR [edi],cl
     aa7:	a1 04 00 00 01       	mov    eax,ds:0x1000004
     aac:	0f 76 00             	pcmpeqd mm0,QWORD PTR [eax]
     aaf:	00 00                	add    BYTE PTR [eax],al
     ab1:	02 91 04 0f a8 04    	add    dl,BYTE PTR [ecx+0x4a80f04]
     ab7:	00 00                	add    BYTE PTR [eax],al
     ab9:	01 0f                	add    DWORD PTR [edi],ecx
     abb:	76 00                	jbe    abd <sysEnter_Vector-0x12f543>
     abd:	00 00                	add    BYTE PTR [eax],al
     abf:	02 91 08 0f af 04    	add    dl,BYTE PTR [ecx+0x4af0f08]
     ac5:	00 00                	add    BYTE PTR [eax],al
     ac7:	01 0f                	add    DWORD PTR [edi],ecx
     ac9:	76 00                	jbe    acb <sysEnter_Vector-0x12f535>
     acb:	00 00                	add    BYTE PTR [eax],al
     acd:	02 91 0c 10 9f 03    	add    dl,BYTE PTR [ecx+0x39f100c]
     ad3:	00 00                	add    BYTE PTR [eax],al
     ad5:	01 11                	add    DWORD PTR [ecx],edx
     ad7:	5a                   	pop    edx
     ad8:	00 00                	add    BYTE PTR [eax],al
     ada:	00 02                	add    BYTE PTR [edx],al
     adc:	91                   	xchg   ecx,eax
     add:	70 00                	jo     adf <sysEnter_Vector-0x12f521>
     adf:	0e                   	push   cs
     ae0:	4d                   	dec    ebp
     ae1:	04 00                	add    al,0x0
     ae3:	00 01                	add    BYTE PTR [ecx],al
     ae5:	16                   	push   ss
     ae6:	5a                   	pop    edx
     ae7:	00 00                	add    BYTE PTR [eax],al
     ae9:	00 ca                	add    dl,cl
     aeb:	04 00                	add    al,0x0
     aed:	30 31                	xor    BYTE PTR [ecx],dh
     aef:	00 00                	add    BYTE PTR [eax],al
     af1:	00 01                	add    BYTE PTR [ecx],al
     af3:	9c                   	pushf  
     af4:	b2 02                	mov    dl,0x2
     af6:	00 00                	add    BYTE PTR [eax],al
     af8:	0f 24                	(bad)  
     afa:	04 00                	add    al,0x0
     afc:	00 01                	add    BYTE PTR [ecx],al
     afe:	16                   	push   ss
     aff:	5a                   	pop    edx
     b00:	00 00                	add    BYTE PTR [eax],al
     b02:	00 02                	add    BYTE PTR [edx],al
     b04:	91                   	xchg   ecx,eax
     b05:	00 0f                	add    BYTE PTR [edi],cl
     b07:	a1 04 00 00 01       	mov    eax,ds:0x1000004
     b0c:	16                   	push   ss
     b0d:	76 00                	jbe    b0f <sysEnter_Vector-0x12f4f1>
     b0f:	00 00                	add    BYTE PTR [eax],al
     b11:	02 91 04 0f a8 04    	add    dl,BYTE PTR [ecx+0x4a80f04]
     b17:	00 00                	add    BYTE PTR [eax],al
     b19:	01 16                	add    DWORD PTR [esi],edx
     b1b:	76 00                	jbe    b1d <sysEnter_Vector-0x12f4e3>
     b1d:	00 00                	add    BYTE PTR [eax],al
     b1f:	02 91 08 10 9f 03    	add    dl,BYTE PTR [ecx+0x39f1008]
     b25:	00 00                	add    BYTE PTR [eax],al
     b27:	01 18                	add    DWORD PTR [eax],ebx
     b29:	5a                   	pop    edx
     b2a:	00 00                	add    BYTE PTR [eax],al
     b2c:	00 02                	add    BYTE PTR [edx],al
     b2e:	91                   	xchg   ecx,eax
     b2f:	70 00                	jo     b31 <sysEnter_Vector-0x12f4cf>
     b31:	0e                   	push   cs
     b32:	41                   	inc    ecx
     b33:	04 00                	add    al,0x0
     b35:	00 01                	add    BYTE PTR [ecx],al
     b37:	1d 5a 00 00 00       	sbb    eax,0x5a
     b3c:	fb                   	sti    
     b3d:	04 00                	add    al,0x0
     b3f:	30 2e                	xor    BYTE PTR [esi],ch
     b41:	00 00                	add    BYTE PTR [eax],al
     b43:	00 01                	add    BYTE PTR [ecx],al
     b45:	9c                   	pushf  
     b46:	f6 02 00             	test   BYTE PTR [edx],0x0
     b49:	00 0f                	add    BYTE PTR [edi],cl
     b4b:	24 04                	and    al,0x4
     b4d:	00 00                	add    BYTE PTR [eax],al
     b4f:	01 1d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebx
     b55:	02 91 00 0f a1 04    	add    dl,BYTE PTR [ecx+0x4a10f00]
     b5b:	00 00                	add    BYTE PTR [eax],al
     b5d:	01 1d 76 00 00 00    	add    DWORD PTR ds:0x76,ebx
     b63:	02 91 04 10 9f 03    	add    dl,BYTE PTR [ecx+0x39f1004]
     b69:	00 00                	add    BYTE PTR [eax],al
     b6b:	01 1f                	add    DWORD PTR [edi],ebx
     b6d:	5a                   	pop    edx
     b6e:	00 00                	add    BYTE PTR [eax],al
     b70:	00 02                	add    BYTE PTR [edx],al
     b72:	91                   	xchg   ecx,eax
     b73:	70 00                	jo     b75 <sysEnter_Vector-0x12f48b>
     b75:	0e                   	push   cs
     b76:	35 04 00 00 01       	xor    eax,0x1000004
     b7b:	24 5a                	and    al,0x5a
     b7d:	00 00                	add    BYTE PTR [eax],al
     b7f:	00 29                	add    BYTE PTR [ecx],ch
     b81:	05 00 30 27 00       	add    eax,0x273000
     b86:	00 00                	add    BYTE PTR [eax],al
     b88:	01 9c 2c 03 00 00 0f 	add    DWORD PTR [esp+ebp*1+0xf000003],ebx
     b8f:	24 04                	and    al,0x4
     b91:	00 00                	add    BYTE PTR [eax],al
     b93:	01 24 5a             	add    DWORD PTR [edx+ebx*2],esp
     b96:	00 00                	add    BYTE PTR [eax],al
     b98:	00 02                	add    BYTE PTR [edx],al
     b9a:	91                   	xchg   ecx,eax
     b9b:	00 10                	add    BYTE PTR [eax],dl
     b9d:	9f                   	lahf   
     b9e:	03 00                	add    eax,DWORD PTR [eax]
     ba0:	00 01                	add    BYTE PTR [ecx],al
     ba2:	26                   	es
     ba3:	5a                   	pop    edx
     ba4:	00 00                	add    BYTE PTR [eax],al
     ba6:	00 02                	add    BYTE PTR [edx],al
     ba8:	91                   	xchg   ecx,eax
     ba9:	74 00                	je     bab <sysEnter_Vector-0x12f455>
     bab:	11 d8                	adc    eax,ebx
     bad:	03 00                	add    eax,DWORD PTR [eax]
     baf:	00 01                	add    BYTE PTR [ecx],al
     bb1:	2b 50 05             	sub    edx,DWORD PTR [eax+0x5]
     bb4:	00 30                	add    BYTE PTR [eax],dh
     bb6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     bb7:	00 00                	add    BYTE PTR [eax],al
     bb9:	00 01                	add    BYTE PTR [ecx],al
     bbb:	9c                   	pushf  
     bbc:	11 03                	adc    DWORD PTR [ebx],eax
     bbe:	05 00 00 01 3b       	add    eax,0x3b010000
     bc3:	f4                   	hlt    
     bc4:	05 00 30 1f 00       	add    eax,0x1f3000
     bc9:	00 00                	add    BYTE PTR [eax],al
     bcb:	01 9c 12 e2 03 00 00 	add    DWORD PTR [edx+edx*1+0x3e2],ebx
     bd2:	01 40 5a             	add    DWORD PTR [eax+0x5a],eax
     bd5:	00 00                	add    BYTE PTR [eax],al
     bd7:	00 13                	add    BYTE PTR [ebx],dl
     bd9:	06                   	push   es
     bda:	00 30                	add    BYTE PTR [eax],dh
     bdc:	34 00                	xor    al,0x0
     bde:	00 00                	add    BYTE PTR [eax],al
     be0:	01 9c 85 03 00 00 0f 	add    DWORD PTR [ebp+eax*4+0xf000003],ebx
     be7:	b6 04                	mov    dh,0x4
     be9:	00 00                	add    BYTE PTR [eax],al
     beb:	01 40 4a             	add    DWORD PTR [eax+0x4a],eax
     bee:	01 00                	add    DWORD PTR [eax],eax
     bf0:	00 02                	add    BYTE PTR [edx],al
     bf2:	91                   	xchg   ecx,eax
     bf3:	00 13                	add    BYTE PTR [ebx],dl
     bf5:	10 34 05 00 00 01 42 	adc    BYTE PTR [eax*1+0x42010000],dh
     bfc:	41                   	inc    ecx
     bfd:	00 00                	add    BYTE PTR [eax],al
     bff:	00 02                	add    BYTE PTR [edx],al
     c01:	91                   	xchg   ecx,eax
     c02:	74 00                	je     c04 <sysEnter_Vector-0x12f3fc>
     c04:	12 39                	adc    bh,BYTE PTR [ecx]
     c06:	05 00 00 01 48       	add    eax,0x48010000
     c0b:	5a                   	pop    edx
     c0c:	00 00                	add    BYTE PTR [eax],al
     c0e:	00 47 06             	add    BYTE PTR [edi+0x6],al
     c11:	00 30                	add    BYTE PTR [eax],dh
     c13:	34 00                	xor    al,0x0
     c15:	00 00                	add    BYTE PTR [eax],al
     c17:	01 9c bc 03 00 00 0f 	add    DWORD PTR [esp+edi*4+0xf000003],ebx
     c1e:	b6 04                	mov    dh,0x4
     c20:	00 00                	add    BYTE PTR [eax],al
     c22:	01 48 4a             	add    DWORD PTR [eax+0x4a],ecx
     c25:	01 00                	add    DWORD PTR [eax],eax
     c27:	00 02                	add    BYTE PTR [edx],al
     c29:	91                   	xchg   ecx,eax
     c2a:	00 13                	add    BYTE PTR [ebx],dl
     c2c:	10 34 05 00 00 01 4a 	adc    BYTE PTR [eax*1+0x4a010000],dh
     c33:	41                   	inc    ecx
     c34:	00 00                	add    BYTE PTR [eax],al
     c36:	00 02                	add    BYTE PTR [edx],al
     c38:	91                   	xchg   ecx,eax
     c39:	74 00                	je     c3b <sysEnter_Vector-0x12f3c5>
     c3b:	0e                   	push   cs
     c3c:	99                   	cdq    
     c3d:	04 00                	add    al,0x0
     c3f:	00 01                	add    BYTE PTR [ecx],al
     c41:	50                   	push   eax
     c42:	5a                   	pop    edx
     c43:	00 00                	add    BYTE PTR [eax],al
     c45:	00 7b 06             	add    BYTE PTR [ebx+0x6],bh
     c48:	00 30                	add    BYTE PTR [eax],dh
     c4a:	35 00 00 00 01       	xor    eax,0x1000000
     c4f:	9c                   	pushf  
     c50:	01 04 00             	add    DWORD PTR [eax+eax*1],eax
     c53:	00 0f                	add    BYTE PTR [edi],cl
     c55:	19 04 00             	sbb    DWORD PTR [eax+eax*1],eax
     c58:	00 01                	add    BYTE PTR [ecx],al
     c5a:	50                   	push   eax
     c5b:	76 00                	jbe    c5d <sysEnter_Vector-0x12f3a3>
     c5d:	00 00                	add    BYTE PTR [eax],al
     c5f:	02 91 00 0f b6 04    	add    dl,BYTE PTR [ecx+0x4b60f00]
     c65:	00 00                	add    BYTE PTR [eax],al
     c67:	01 50 4a             	add    DWORD PTR [eax+0x4a],edx
     c6a:	01 00                	add    DWORD PTR [eax],eax
     c6c:	00 02                	add    BYTE PTR [edx],al
     c6e:	91                   	xchg   ecx,eax
     c6f:	04 13                	add    al,0x13
     c71:	10 34 05 00 00 01 52 	adc    BYTE PTR [eax*1+0x52010000],dh
     c78:	41                   	inc    ecx
     c79:	00 00                	add    BYTE PTR [eax],al
     c7b:	00 02                	add    BYTE PTR [edx],al
     c7d:	91                   	xchg   ecx,eax
     c7e:	70 00                	jo     c80 <sysEnter_Vector-0x12f380>
     c80:	0e                   	push   cs
     c81:	b5 03                	mov    ch,0x3
     c83:	00 00                	add    BYTE PTR [eax],al
     c85:	01 59 81             	add    DWORD PTR [ecx-0x7f],ebx
     c88:	00 00                	add    BYTE PTR [eax],al
     c8a:	00 b0 06 00 30 46    	add    BYTE PTR [eax+0x46300006],dh
     c90:	00 00                	add    BYTE PTR [eax],al
     c92:	00 01                	add    BYTE PTR [ecx],al
     c94:	9c                   	pushf  
     c95:	40                   	inc    eax
     c96:	04 00                	add    al,0x0
     c98:	00 0f                	add    BYTE PTR [edi],cl
     c9a:	d3 04 00             	rol    DWORD PTR [eax+eax*1],cl
     c9d:	00 01                	add    BYTE PTR [ecx],al
     c9f:	59                   	pop    ecx
     ca0:	81 00 00 00 02 91    	add    DWORD PTR [eax],0x91020000
     ca6:	00 14 c1             	add    BYTE PTR [ecx+eax*8],dl
     ca9:	06                   	push   es
     caa:	00 30                	add    BYTE PTR [eax],dh
     cac:	2a 00                	sub    al,BYTE PTR [eax]
     cae:	00 00                	add    BYTE PTR [eax],al
     cb0:	15 63 74 00 01       	adc    eax,0x1007463
     cb5:	5b                   	pop    ebx
     cb6:	76 00                	jbe    cb8 <sysEnter_Vector-0x12f348>
     cb8:	00 00                	add    BYTE PTR [eax],al
     cba:	02 91 70 00 00 16    	add    dl,BYTE PTR [ecx+0x16000070]
     cc0:	40                   	inc    eax
     cc1:	05 00 00 01 5f       	add    eax,0x5f010000
     cc6:	f6 06 00             	test   BYTE PTR [esi],0x0
     cc9:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
     ccf:	9c                   	pushf  
     cd0:	17                   	pop    ss
     cd1:	27                   	daa    
     cd2:	05 00 00 01 64       	add    eax,0x64010000
     cd7:	13 07                	adc    eax,DWORD PTR [edi]
     cd9:	00 30                	add    BYTE PTR [eax],dh
     cdb:	29 00                	sub    DWORD PTR [eax],eax
     cdd:	00 00                	add    BYTE PTR [eax],al
     cdf:	01 9c 91 04 00 00 0f 	add    DWORD PTR [ecx+edx*4+0xf000004],ebx
     ce6:	c7 04 00 00 01 64 5a 	mov    DWORD PTR [eax+eax*1],0x5a640100
     ced:	00 00                	add    BYTE PTR [eax],al
     cef:	00 02                	add    BYTE PTR [edx],al
     cf1:	91                   	xchg   ecx,eax
     cf2:	00 0f                	add    BYTE PTR [edi],cl
     cf4:	1c 05                	sbb    al,0x5
     cf6:	00 00                	add    BYTE PTR [eax],al
     cf8:	01 64 f8 01          	add    DWORD PTR [eax+edi*8+0x1],esp
     cfc:	00 00                	add    BYTE PTR [eax],al
     cfe:	02 91 04 0f bb 03    	add    dl,BYTE PTR [ecx+0x3bb0f04]
     d04:	00 00                	add    BYTE PTR [eax],al
     d06:	01 64 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],esp
     d0a:	00 00                	add    BYTE PTR [eax],al
     d0c:	02 91 08 00 12 ce    	add    dl,BYTE PTR [ecx-0x31edfff8]
     d12:	04 00                	add    al,0x0
     d14:	00 01                	add    BYTE PTR [ecx],al
     d16:	69 5a 00 00 00 3c 07 	imul   ebx,DWORD PTR [edx+0x0],0x73c0000
     d1d:	00 30                	add    BYTE PTR [eax],dh
     d1f:	4c                   	dec    esp
     d20:	00 00                	add    BYTE PTR [eax],al
     d22:	00 01                	add    BYTE PTR [ecx],al
     d24:	9c                   	pushf  
     d25:	e3 04                	jecxz  d2b <sysEnter_Vector-0x12f2d5>
     d27:	00 00                	add    BYTE PTR [eax],al
     d29:	0f 20                	(bad)  
     d2b:	08 00                	or     BYTE PTR [eax],al
     d2d:	00 01                	add    BYTE PTR [ecx],al
     d2f:	69 fa 01 00 00 02    	imul   edi,edx,0x2000001
     d35:	91                   	xchg   ecx,eax
     d36:	00 0f                	add    BYTE PTR [edi],cl
     d38:	ee                   	out    dx,al
     d39:	04 00                	add    al,0x0
     d3b:	00 01                	add    BYTE PTR [ecx],al
     d3d:	69 5a 00 00 00 02 91 	imul   ebx,DWORD PTR [edx+0x0],0x91020000
     d44:	04 0f                	add    al,0xf
     d46:	17                   	pop    ss
     d47:	05 00 00 01 69       	add    eax,0x69010000
     d4c:	e3 04                	jecxz  d52 <sysEnter_Vector-0x12f2ae>
     d4e:	00 00                	add    BYTE PTR [eax],al
     d50:	02 91 08 15 70 69    	add    dl,BYTE PTR [ecx+0x69701508]
     d56:	64 00 01             	add    BYTE PTR fs:[ecx],al
     d59:	6b 5a 00 00          	imul   ebx,DWORD PTR [edx+0x0],0x0
     d5d:	00 02                	add    BYTE PTR [edx],al
     d5f:	91                   	xchg   ecx,eax
     d60:	70 00                	jo     d62 <sysEnter_Vector-0x12f29e>
     d62:	08 04 fa             	or     BYTE PTR [edx+edi*8],al
     d65:	01 00                	add    DWORD PTR [eax],eax
     d67:	00 17                	add    BYTE PTR [edi],dl
     d69:	11 04 00             	adc    DWORD PTR [eax+eax*1],eax
     d6c:	00 01                	add    BYTE PTR [ecx],al
     d6e:	75 88                	jne    cf8 <sysEnter_Vector-0x12f308>
     d70:	07                   	pop    es
     d71:	00 30                	add    BYTE PTR [eax],dh
     d73:	1d 00 00 00 01       	sbb    eax,0x1000000
     d78:	9c                   	pushf  
     d79:	0d 05 00 00 18       	or     eax,0x18000005
     d7e:	70 69                	jo     de9 <sysEnter_Vector-0x12f217>
     d80:	64 00 01             	add    BYTE PTR fs:[ecx],al
     d83:	75 76                	jne    dfb <sysEnter_Vector-0x12f205>
     d85:	00 00                	add    BYTE PTR [eax],al
     d87:	00 02                	add    BYTE PTR [edx],al
     d89:	91                   	xchg   ecx,eax
     d8a:	00 00                	add    BYTE PTR [eax],al
     d8c:	19 09                	sbb    DWORD PTR [ecx],ecx
     d8e:	04 00                	add    al,0x0
     d90:	00 01                	add    BYTE PTR [ecx],al
     d92:	7a 43                	jp     dd7 <sysEnter_Vector-0x12f229>
     d94:	05 00 00 a5 07       	add    eax,0x7a50000
     d99:	00 30                	add    BYTE PTR [eax],dh
     d9b:	40                   	inc    eax
     d9c:	00 00                	add    BYTE PTR [eax],al
     d9e:	00 01                	add    BYTE PTR [ecx],al
     da0:	9c                   	pushf  
     da1:	43                   	inc    ebx
     da2:	05 00 00 10 7c       	add    eax,0x7c100000
     da7:	04 00                	add    al,0x0
     da9:	00 01                	add    BYTE PTR [ecx],al
     dab:	7c 76                	jl     e23 <sysEnter_Vector-0x12f1dd>
     dad:	00 00                	add    BYTE PTR [eax],al
     daf:	00 02                	add    BYTE PTR [edx],al
     db1:	91                   	xchg   ecx,eax
     db2:	6c                   	ins    BYTE PTR es:[edi],dx
     db3:	10 c3                	adc    bl,al
     db5:	03 00                	add    eax,DWORD PTR [eax]
     db7:	00 01                	add    BYTE PTR [ecx],al
     db9:	7d ba                	jge    d75 <sysEnter_Vector-0x12f28b>
     dbb:	00 00                	add    BYTE PTR [eax],al
     dbd:	00 02                	add    BYTE PTR [edx],al
     dbf:	91                   	xchg   ecx,eax
     dc0:	40                   	inc    eax
     dc1:	00 08                	add    BYTE PTR [eax],cl
     dc3:	04 ba                	add    al,0xba
     dc5:	00 00                	add    BYTE PTR [eax],al
     dc7:	00 12                	add    BYTE PTR [edx],dl
     dc9:	45                   	inc    ebp
     dca:	05 00 00 01 83       	add    eax,0x83010000
     dcf:	fa                   	cli    
     dd0:	01 00                	add    DWORD PTR [eax],eax
     dd2:	00 e5                	add    ch,ah
     dd4:	07                   	pop    es
     dd5:	00 30                	add    BYTE PTR [eax],dh
     dd7:	20 00                	and    BYTE PTR [eax],al
     dd9:	00 00                	add    BYTE PTR [eax],al
     ddb:	01 9c 7f 05 00 00 18 	add    DWORD PTR [edi+edi*2+0x18000005],ebx
     de2:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     de5:	00 01                	add    BYTE PTR [ecx],al
     de7:	83 fa 01             	cmp    edx,0x1
     dea:	00 00                	add    BYTE PTR [eax],al
     dec:	02 91 00 0f d3 03    	add    dl,BYTE PTR [ecx+0x3d30f00]
     df2:	00 00                	add    BYTE PTR [eax],al
     df4:	01 83 8f 00 00 00    	add    DWORD PTR [ebx+0x8f],eax
     dfa:	02 91 04 00 1a 3f    	add    dl,BYTE PTR [ecx+0x3f1a0004]
     e00:	00 00                	add    BYTE PTR [eax],al
     e02:	00 06                	add    BYTE PTR [esi],al
     e04:	34 76                	xor    al,0x76
     e06:	00 00                	add    BYTE PTR [eax],al
     e08:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
     e0e:	30 1a                	xor    BYTE PTR [edx],bl
     e10:	aa                   	stos   BYTE PTR es:[edi],al
     e11:	00 00                	add    BYTE PTR [eax],al
     e13:	00 06                	add    BYTE PTR [esi],al
     e15:	35 76 00 00 00       	xor    eax,0x76
     e1a:	05 03 b0 3b 00       	add    eax,0x3bb003
     e1f:	30 1a                	xor    BYTE PTR [edx],bl
     e21:	56                   	push   esi
     e22:	01 00                	add    DWORD PTR [eax],eax
     e24:	00 06                	add    BYTE PTR [esi],al
     e26:	36                   	ss
     e27:	76 00                	jbe    e29 <sysEnter_Vector-0x12f1d7>
     e29:	00 00                	add    BYTE PTR [eax],al
     e2b:	05 03 a8 3b 00       	add    eax,0x3ba803
     e30:	30 1a                	xor    BYTE PTR [edx],bl
     e32:	48                   	dec    eax
     e33:	00 00                	add    BYTE PTR [eax],al
     e35:	00 07                	add    BYTE PTR [edi],al
     e37:	3b af 00 00 00 05    	cmp    ebp,DWORD PTR [edi+0x5000000]
     e3d:	03 b4 3b 00 30 1a 65 	add    esi,DWORD PTR [ebx+edi*1+0x651a3000]
     e44:	04 00                	add    al,0x0
     e46:	00 01                	add    BYTE PTR [ecx],al
     e48:	0d a8 00 00 00       	or     eax,0xa8
     e4d:	05 03 bc 3b 00       	add    eax,0x3bbc03
     e52:	30 00                	xor    BYTE PTR [eax],al
     e54:	e7 02                	out    0x2,eax
     e56:	00 00                	add    BYTE PTR [eax],al
     e58:	04 00                	add    al,0x0
     e5a:	38 05 00 00 04 01    	cmp    BYTE PTR ds:0x1040000,al
     e60:	ef                   	out    dx,eax
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	00 0c e8             	add    BYTE PTR [eax+ebp*8],cl
     e66:	05 00 00 6d 00       	add    eax,0x6d0000
     e6b:	00 00                	add    BYTE PTR [eax],al
     e6d:	08 08                	or     BYTE PTR [eax],cl
     e6f:	00 30                	add    BYTE PTR [eax],dh
     e71:	26 03 00             	add    eax,DWORD PTR es:[eax]
     e74:	00 67 06             	add    BYTE PTR [edi+0x6],ah
     e77:	00 00                	add    BYTE PTR [eax],al
     e79:	02 01                	add    al,BYTE PTR [ecx]
     e7b:	06                   	push   es
     e7c:	51                   	push   ecx
     e7d:	00 00                	add    BYTE PTR [eax],al
     e7f:	00 02                	add    BYTE PTR [edx],al
     e81:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
     e87:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     e8e:	02 08                	add    cl,BYTE PTR [eax]
     e90:	05 00 00 00 00       	add    eax,0x0
     e95:	04 80                	add    al,0x80
     e97:	05 00 00 02 2e       	add    eax,0x2e020000
     e9c:	4c                   	dec    esp
     e9d:	00 00                	add    BYTE PTR [eax],al
     e9f:	00 02                	add    BYTE PTR [edx],al
     ea1:	01 08                	add    DWORD PTR [eax],ecx
     ea3:	4f                   	dec    edi
     ea4:	00 00                	add    BYTE PTR [eax],al
     ea6:	00 02                	add    BYTE PTR [edx],al
     ea8:	02 07                	add    al,BYTE PTR [edi]
     eaa:	0e                   	push   cs
     eab:	00 00                	add    BYTE PTR [eax],al
     ead:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
     eb0:	00 00                	add    BYTE PTR [eax],al
     eb2:	00 02                	add    BYTE PTR [edx],al
     eb4:	34 65                	xor    al,0x65
     eb6:	00 00                	add    BYTE PTR [eax],al
     eb8:	00 02                	add    BYTE PTR [edx],al
     eba:	04 07                	add    al,0x7
     ebc:	32 00                	xor    al,BYTE PTR [eax]
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	02 08                	add    cl,BYTE PTR [eax]
     ec2:	07                   	pop    es
     ec3:	28 00                	sub    BYTE PTR [eax],al
     ec5:	00 00                	add    BYTE PTR [eax],al
     ec7:	04 ae                	add    al,0xae
     ec9:	03 00                	add    eax,DWORD PTR [eax]
     ecb:	00 03                	add    BYTE PTR [ebx],al
     ecd:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
     ed0:	00 00                	add    BYTE PTR [eax],al
     ed2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     ed9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     edc:	96                   	xchg   esi,eax
     edd:	00 00                	add    BYTE PTR [eax],al
     edf:	00 05 9c 05 00 00    	add    BYTE PTR ds:0x59c,al
     ee5:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
     ee8:	c9                   	leave  
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	00 06                	add    BYTE PTR [esi],al
     eed:	79 05                	jns    ef4 <sysEnter_Vector-0x12f10c>
     eef:	00 00                	add    BYTE PTR [eax],al
     ef1:	04 2e                	add    al,0x2e
     ef3:	5a                   	pop    edx
     ef4:	00 00                	add    BYTE PTR [eax],al
     ef6:	00 00                	add    BYTE PTR [eax],al
     ef8:	07                   	pop    es
     ef9:	6c                   	ins    BYTE PTR es:[edi],dx
     efa:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     efc:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
     eff:	5a                   	pop    edx
     f00:	00 00                	add    BYTE PTR [eax],al
     f02:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     f05:	a2 05 00 00 04       	mov    ds:0x4000005,al
     f0a:	30 c9                	xor    cl,cl
     f0c:	00 00                	add    BYTE PTR [eax],al
     f0e:	00 08                	add    BYTE PTR [eax],cl
     f10:	06                   	push   es
     f11:	f5                   	cmc    
     f12:	05 00 00 04 31       	add    eax,0x31040000
     f17:	d0 00                	rol    BYTE PTR [eax],1
     f19:	00 00                	add    BYTE PTR [eax],al
     f1b:	0c 00                	or     al,0x0
     f1d:	02 01                	add    al,BYTE PTR [ecx]
     f1f:	02 90 00 00 00 08    	add    dl,BYTE PTR [eax+0x8000000]
     f25:	04 8c                	add    al,0x8c
     f27:	00 00                	add    BYTE PTR [eax],al
     f29:	00 04 fa             	add    BYTE PTR [edx+edi*8],al
     f2c:	05 00 00 04 32       	add    eax,0x32040000
     f31:	8c 00                	mov    WORD PTR [eax],es
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	02 01                	add    al,BYTE PTR [ecx]
     f37:	06                   	push   es
     f38:	58                   	pop    eax
     f39:	00 00                	add    BYTE PTR [eax],al
     f3b:	00 04 5d 00 00 00 05 	add    BYTE PTR [ebx*2+0x5000000],al
     f42:	2a 7e 00             	sub    bh,BYTE PTR [esi+0x0]
     f45:	00 00                	add    BYTE PTR [eax],al
     f47:	09 63 02             	or     DWORD PTR [ebx+0x2],esp
     f4a:	00 00                	add    BYTE PTR [eax],al
     f4c:	04 65                	add    al,0x65
     f4e:	00 00                	add    BYTE PTR [eax],al
     f50:	00 07                	add    BYTE PTR [edi],al
     f52:	15 88 01 00 00       	adc    eax,0x188
     f57:	0a 49 03             	or     cl,BYTE PTR [ecx+0x3]
     f5a:	00 00                	add    BYTE PTR [eax],al
     f5c:	00 0a                	add    BYTE PTR [edx],cl
     f5e:	f2 02 00             	repnz add al,BYTE PTR [eax]
     f61:	00 01                	add    BYTE PTR [ecx],al
     f63:	0a d8                	or     bl,al
     f65:	02 00                	add    al,BYTE PTR [eax]
     f67:	00 03                	add    BYTE PTR [ebx],al
     f69:	0a 3b                	or     bh,BYTE PTR [ebx]
     f6b:	03 00                	add    eax,DWORD PTR [eax]
     f6d:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
     f70:	42                   	inc    edx
     f71:	02 00                	add    al,BYTE PTR [eax]
     f73:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
     f76:	e5 02                	in     eax,0x2
     f78:	00 00                	add    BYTE PTR [eax],al
     f7a:	59                   	pop    ecx
     f7b:	0a 6d 02             	or     ch,BYTE PTR [ebp+0x2]
     f7e:	00 00                	add    BYTE PTR [eax],al
     f80:	61                   	popa   
     f81:	0a 68 03             	or     ch,BYTE PTR [eax+0x3]
     f84:	00 00                	add    BYTE PTR [eax],al
     f86:	97                   	xchg   edi,eax
     f87:	0b 0a                	or     ecx,DWORD PTR [edx]
     f89:	03 00                	add    eax,DWORD PTR [eax]
     f8b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     f8e:	0b 21                	or     esp,DWORD PTR [ecx]
     f90:	03 00                	add    eax,DWORD PTR [eax]
     f92:	00 64 01 0b          	add    BYTE PTR [ecx+eax*1+0xb],ah
     f96:	c5 02                	lds    eax,FWORD PTR [edx]
     f98:	00 00                	add    BYTE PTR [eax],al
     f9a:	65 01 0b             	add    DWORD PTR gs:[ebx],ecx
     f9d:	9c                   	pushf  
     f9e:	02 00                	add    al,BYTE PTR [eax]
     fa0:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     fa3:	0b 80 02 00 00 67    	or     eax,DWORD PTR [eax+0x67000002]
     fa9:	01 0b                	add    DWORD PTR [ebx],ecx
     fab:	2e 03 00             	add    eax,DWORD PTR cs:[eax]
     fae:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     fb1:	0b 59 03             	or     ebx,DWORD PTR [ecx+0x3]
     fb4:	00 00                	add    BYTE PTR [eax],al
     fb6:	69 01 0b 0f 02 00    	imul   eax,DWORD PTR [ecx],0x20f0b
     fbc:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     fbf:	0b 91 03 00 00 00    	or     edx,DWORD PTR [ecx+0x3]
     fc5:	03 0b                	add    ecx,DWORD PTR [ebx]
     fc7:	b6 02                	mov    dh,0x2
     fc9:	00 00                	add    BYTE PTR [eax],al
     fcb:	01 03                	add    DWORD PTR [ebx],eax
     fcd:	0b 20                	or     esp,DWORD PTR [eax]
     fcf:	02 00                	add    al,BYTE PTR [eax]
     fd1:	00 02                	add    BYTE PTR [edx],al
     fd3:	03 0b                	add    ecx,DWORD PTR [ebx]
     fd5:	7c 03                	jl     fda <sysEnter_Vector-0x12f026>
     fd7:	00 00                	add    BYTE PTR [eax],al
     fd9:	03 03                	add    eax,DWORD PTR [ebx]
     fdb:	00 02                	add    BYTE PTR [edx],al
     fdd:	04 07                	add    al,0x7
     fdf:	2d 00 00 00 02       	sub    eax,0x2000000
     fe4:	04 07                	add    al,0x7
     fe6:	dc 00                	fadd   QWORD PTR [eax]
     fe8:	00 00                	add    BYTE PTR [eax],al
     fea:	0c 04                	or     al,0x4
     fec:	0d a8 05 00 00       	or     eax,0x5a8
     ff1:	01 0c 08             	add    DWORD PTR [eax+ecx*1],ecx
     ff4:	08 00                	or     BYTE PTR [eax],al
     ff6:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
     ff9:	00 00                	add    BYTE PTR [eax],al
     ffb:	01 9c 0e c8 05 00 00 	add    DWORD PTR [esi+ecx*1+0x5c8],ebx
    1002:	01 14 5a             	add    DWORD PTR [edx+ebx*2],edx
    1005:	00 00                	add    BYTE PTR [eax],al
    1007:	00 68 08             	add    BYTE PTR [eax+0x8],ch
    100a:	00 30                	add    BYTE PTR [eax],dh
    100c:	87 00                	xchg   DWORD PTR [eax],eax
    100e:	00 00                	add    BYTE PTR [eax],al
    1010:	01 9c df 01 00 00 0f 	add    DWORD PTR [edi+ebx*8+0xf000001],ebx
    1017:	d3 03                	rol    DWORD PTR [ebx],cl
    1019:	00 00                	add    BYTE PTR [eax],al
    101b:	01 14 73             	add    DWORD PTR [ebx+esi*2],edx
    101e:	00 00                	add    BYTE PTR [eax],al
    1020:	00 02                	add    BYTE PTR [edx],al
    1022:	91                   	xchg   ecx,eax
    1023:	00 10                	add    BYTE PTR [eax],dl
    1025:	62 05 00 00 01 18    	bound  eax,QWORD PTR ds:0x18010000
    102b:	5a                   	pop    edx
    102c:	00 00                	add    BYTE PTR [eax],al
    102e:	00 02                	add    BYTE PTR [edx],al
    1030:	91                   	xchg   ecx,eax
    1031:	74 00                	je     1033 <sysEnter_Vector-0x12efcd>
    1033:	11 ac 05 00 00 01 2c 	adc    DWORD PTR [ebp+eax*1+0x2c010000],ebp
    103a:	96                   	xchg   esi,eax
    103b:	01 00                	add    DWORD PTR [eax],eax
    103d:	00 ef                	add    bh,ch
    103f:	08 00                	or     BYTE PTR [eax],al
    1041:	30 e0                	xor    al,ah
    1043:	01 00                	add    DWORD PTR [eax],eax
    1045:	00 01                	add    BYTE PTR [ecx],al
    1047:	9c                   	pushf  
    1048:	4d                   	dec    ebp
    1049:	02 00                	add    al,BYTE PTR [eax]
    104b:	00 0f                	add    BYTE PTR [edi],cl
    104d:	d3 03                	rol    DWORD PTR [ebx],cl
    104f:	00 00                	add    BYTE PTR [eax],al
    1051:	01 2c 73             	add    DWORD PTR [ebx+esi*2],ebp
    1054:	00 00                	add    BYTE PTR [eax],al
    1056:	00 02                	add    BYTE PTR [edx],al
    1058:	91                   	xchg   ecx,eax
    1059:	00 10                	add    BYTE PTR [eax],dl
    105b:	9f                   	lahf   
    105c:	03 00                	add    eax,DWORD PTR [eax]
    105e:	00 01                	add    BYTE PTR [ecx],al
    1060:	2e                   	cs
    1061:	96                   	xchg   esi,eax
    1062:	01 00                	add    DWORD PTR [eax],eax
    1064:	00 02                	add    BYTE PTR [edx],al
    1066:	91                   	xchg   ecx,eax
    1067:	60                   	pusha  
    1068:	10 95 05 00 00 01    	adc    BYTE PTR [ebp+0x1000005],dl
    106e:	30 5a 00             	xor    BYTE PTR [edx+0x0],bl
    1071:	00 00                	add    BYTE PTR [eax],al
    1073:	02 91 6c 10 4c 05    	add    dl,BYTE PTR [ecx+0x54c106c]
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	01 31                	add    DWORD PTR [ecx],esi
    107d:	5a                   	pop    edx
    107e:	00 00                	add    BYTE PTR [eax],al
    1080:	00 02                	add    BYTE PTR [edx],al
    1082:	91                   	xchg   ecx,eax
    1083:	68 10 8d 05 00       	push   0x58d10
    1088:	00 01                	add    BYTE PTR [ecx],al
    108a:	32 4d 02             	xor    cl,BYTE PTR [ebp+0x2]
    108d:	00 00                	add    BYTE PTR [eax],al
    108f:	02 91 64 10 bc 05    	add    dl,BYTE PTR [ecx+0x5bc1064]
    1095:	00 00                	add    BYTE PTR [eax],al
    1097:	01 33                	add    DWORD PTR [ebx],esi
    1099:	53                   	push   ebx
    109a:	02 00                	add    al,BYTE PTR [eax]
    109c:	00 02                	add    BYTE PTR [edx],al
    109e:	91                   	xchg   ecx,eax
    109f:	5c                   	pop    esp
    10a0:	00 08                	add    BYTE PTR [eax],cl
    10a2:	04 d6                	add    al,0xd6
    10a4:	00 00                	add    BYTE PTR [eax],al
    10a6:	00 08                	add    BYTE PTR [eax],cl
    10a8:	04 41                	add    al,0x41
    10aa:	00 00                	add    BYTE PTR [eax],al
    10ac:	00 12                	add    BYTE PTR [edx],dl
    10ae:	88 05 00 00 01 53    	mov    BYTE PTR ds:0x53010000,al
    10b4:	cf                   	iret   
    10b5:	0a 00                	or     al,BYTE PTR [eax]
    10b7:	30 39                	xor    BYTE PTR [ecx],bh
    10b9:	00 00                	add    BYTE PTR [eax],al
    10bb:	00 01                	add    BYTE PTR [ecx],al
    10bd:	9c                   	pushf  
    10be:	95                   	xchg   ebp,eax
    10bf:	02 00                	add    al,BYTE PTR [eax]
    10c1:	00 0f                	add    BYTE PTR [edi],cl
    10c3:	59                   	pop    ecx
    10c4:	05 00 00 01 53       	add    eax,0x53010000
    10c9:	96                   	xchg   esi,eax
    10ca:	01 00                	add    DWORD PTR [eax],eax
    10cc:	00 02                	add    BYTE PTR [edx],al
    10ce:	91                   	xchg   ecx,eax
    10cf:	00 13                	add    BYTE PTR [ebx],dl
    10d1:	6d                   	ins    DWORD PTR es:[edi],dx
    10d2:	70 00                	jo     10d4 <sysEnter_Vector-0x12ef2c>
    10d4:	01 55 4d             	add    DWORD PTR [ebp+0x4d],edx
    10d7:	02 00                	add    al,BYTE PTR [eax]
    10d9:	00 02                	add    BYTE PTR [edx],al
    10db:	91                   	xchg   ecx,eax
    10dc:	74 14                	je     10f2 <sysEnter_Vector-0x12ef0e>
    10de:	b3 05                	mov    bl,0x5
    10e0:	00 00                	add    BYTE PTR [eax],al
    10e2:	01 5f fa             	add    DWORD PTR [edi-0x6],ebx
    10e5:	0a 00                	or     al,BYTE PTR [eax]
    10e7:	30 00                	xor    BYTE PTR [eax],al
    10e9:	15 6a 05 00 00       	adc    eax,0x56a
    10ee:	01 65 08             	add    DWORD PTR [ebp+0x8],esp
    10f1:	0b 00                	or     eax,DWORD PTR [eax]
    10f3:	30 26                	xor    BYTE PTR [esi],ah
    10f5:	00 00                	add    BYTE PTR [eax],al
    10f7:	00 01                	add    BYTE PTR [ecx],al
    10f9:	9c                   	pushf  
    10fa:	16                   	push   ss
    10fb:	3f                   	aas    
    10fc:	00 00                	add    BYTE PTR [eax],al
    10fe:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1101:	5a                   	pop    edx
    1102:	00 00                	add    BYTE PTR [eax],al
    1104:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    110a:	30 16                	xor    BYTE PTR [esi],dl
    110c:	aa                   	stos   BYTE PTR es:[edi],al
    110d:	00 00                	add    BYTE PTR [eax],al
    110f:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    1116:	05 03 b0 3b 00       	add    eax,0x3bb003
    111b:	30 16                	xor    BYTE PTR [esi],dl
    111d:	56                   	push   esi
    111e:	01 00                	add    DWORD PTR [eax],eax
    1120:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1123:	5a                   	pop    edx
    1124:	00 00                	add    BYTE PTR [eax],al
    1126:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    112c:	30 16                	xor    BYTE PTR [esi],dl
    112e:	48                   	dec    eax
    112f:	00 00                	add    BYTE PTR [eax],al
    1131:	00 06                	add    BYTE PTR [esi],al
    1133:	3b e8                	cmp    ebp,eax
    1135:	00 00                	add    BYTE PTR [eax],al
    1137:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    113d:	30 00                	xor    BYTE PTR [eax],al
    113f:	de 01                	fiadd  WORD PTR [ecx]
    1141:	00 00                	add    BYTE PTR [eax],al
    1143:	04 00                	add    al,0x0
    1145:	98                   	cwde   
    1146:	06                   	push   es
    1147:	00 00                	add    BYTE PTR [eax],al
    1149:	04 01                	add    al,0x1
    114b:	ef                   	out    dx,eax
    114c:	00 00                	add    BYTE PTR [eax],al
    114e:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    1151:	06                   	push   es
    1152:	00 00                	add    BYTE PTR [eax],al
    1154:	6d                   	ins    DWORD PTR es:[edi],dx
    1155:	00 00                	add    BYTE PTR [eax],al
    1157:	00 30                	add    BYTE PTR [eax],dh
    1159:	0b 00                	or     eax,DWORD PTR [eax]
    115b:	30 9b 01 00 00 b4    	xor    BYTE PTR [ebx-0x4bffffff],bl
    1161:	07                   	pop    es
    1162:	00 00                	add    BYTE PTR [eax],al
    1164:	02 01                	add    al,BYTE PTR [ecx]
    1166:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    1169:	00 00                	add    BYTE PTR [eax],al
    116b:	02 02                	add    al,BYTE PTR [edx]
    116d:	07                   	pop    es
    116e:	0e                   	push   cs
    116f:	00 00                	add    BYTE PTR [eax],al
    1171:	00 02                	add    BYTE PTR [edx],al
    1173:	04 07                	add    al,0x7
    1175:	32 00                	xor    al,BYTE PTR [eax]
    1177:	00 00                	add    BYTE PTR [eax],al
    1179:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    117c:	2d 00 00 00 02       	sub    eax,0x2000000
    1181:	01 06                	add    DWORD PTR [esi],eax
    1183:	51                   	push   ecx
    1184:	00 00                	add    BYTE PTR [eax],al
    1186:	00 02                	add    BYTE PTR [edx],al
    1188:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    118e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1195:	02 08                	add    cl,BYTE PTR [eax]
    1197:	05 00 00 00 00       	add    eax,0x0
    119c:	02 08                	add    cl,BYTE PTR [eax]
    119e:	07                   	pop    es
    119f:	28 00                	sub    BYTE PTR [eax],al
    11a1:	00 00                	add    BYTE PTR [eax],al
    11a3:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    11aa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    11ad:	dc 00                	fadd   QWORD PTR [eax]
    11af:	00 00                	add    BYTE PTR [eax],al
    11b1:	04 04                	add    al,0x4
    11b3:	05 04 7a 00 00       	add    eax,0x7a04
    11b8:	00 02                	add    BYTE PTR [edx],al
    11ba:	01 06                	add    DWORD PTR [esi],eax
    11bc:	58                   	pop    eax
    11bd:	00 00                	add    BYTE PTR [eax],al
    11bf:	00 06                	add    BYTE PTR [esi],al
    11c1:	64 00 00             	add    BYTE PTR fs:[eax],al
    11c4:	00 02                	add    BYTE PTR [edx],al
    11c6:	34 33                	xor    al,0x33
    11c8:	00 00                	add    BYTE PTR [eax],al
    11ca:	00 06                	add    BYTE PTR [esi],al
    11cc:	5d                   	pop    ebp
    11cd:	00 00                	add    BYTE PTR [eax],al
    11cf:	00 03                	add    BYTE PTR [ebx],al
    11d1:	2a 64 00 00          	sub    ah,BYTE PTR [eax+eax*1+0x0]
    11d5:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    11db:	00 07                	add    BYTE PTR [edi],al
    11dd:	7a 00                	jp     11df <sysEnter_Vector-0x12ee21>
    11df:	00 00                	add    BYTE PTR [eax],al
    11e1:	06                   	push   es
    11e2:	ae                   	scas   al,BYTE PTR es:[edi]
    11e3:	03 00                	add    eax,DWORD PTR [eax]
    11e5:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    11e8:	33 00                	xor    eax,DWORD PTR [eax]
    11ea:	00 00                	add    BYTE PTR [eax],al
    11ec:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    11ef:	96                   	xchg   esi,eax
    11f0:	00 00                	add    BYTE PTR [eax],al
    11f2:	00 02                	add    BYTE PTR [edx],al
    11f4:	01 02                	add    DWORD PTR [edx],eax
    11f6:	90                   	nop
    11f7:	00 00                	add    BYTE PTR [eax],al
    11f9:	00 08                	add    BYTE PTR [eax],cl
    11fb:	16                   	push   ss
    11fc:	06                   	push   es
    11fd:	00 00                	add    BYTE PTR [eax],al
    11ff:	01 0a                	add    DWORD PTR [edx],ecx
    1201:	72 00                	jb     1203 <sysEnter_Vector-0x12edfd>
    1203:	00 00                	add    BYTE PTR [eax],al
    1205:	30 0b                	xor    BYTE PTR [ebx],cl
    1207:	00 30                	add    BYTE PTR [eax],dh
    1209:	9b                   	fwait
    120a:	01 00                	add    DWORD PTR [eax],eax
    120c:	00 01                	add    BYTE PTR [ecx],al
    120e:	9c                   	pushf  
    120f:	85 01                	test   DWORD PTR [ecx],eax
    1211:	00 00                	add    BYTE PTR [eax],al
    1213:	09 11                	or     DWORD PTR [ecx],edx
    1215:	06                   	push   es
    1216:	00 00                	add    BYTE PTR [eax],al
    1218:	01 0a                	add    DWORD PTR [edx],ecx
    121a:	72 00                	jb     121c <sysEnter_Vector-0x12ede4>
    121c:	00 00                	add    BYTE PTR [eax],al
    121e:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1224:	63 00                	arpl   WORD PTR [eax],ax
    1226:	01 0a                	add    DWORD PTR [edx],ecx
    1228:	85 01                	test   DWORD PTR [ecx],eax
    122a:	00 00                	add    BYTE PTR [eax],al
    122c:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    1232:	01 0a                	add    DWORD PTR [edx],ecx
    1234:	a2 00 00 00 02       	mov    ds:0x2000000,al
    1239:	91                   	xchg   ecx,eax
    123a:	08 0b                	or     BYTE PTR [ebx],cl
    123c:	64                   	fs
    123d:	77 00                	ja     123f <sysEnter_Vector-0x12edc1>
    123f:	01 0c b4             	add    DWORD PTR [esp+esi*4],ecx
    1242:	00 00                	add    BYTE PTR [eax],al
    1244:	00 02                	add    BYTE PTR [edx],al
    1246:	91                   	xchg   ecx,eax
    1247:	5e                   	pop    esi
    1248:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    124c:	01 0c b4             	add    DWORD PTR [esp+esi*4],ecx
    124f:	00 00                	add    BYTE PTR [eax],al
    1251:	00 02                	add    BYTE PTR [edx],al
    1253:	91                   	xchg   ecx,eax
    1254:	5f                   	pop    edi
    1255:	0c 62                	or     al,0x62
    1257:	0b 00                	or     eax,DWORD PTR [eax]
    1259:	30 7d 00             	xor    BYTE PTR [ebp+0x0],bh
    125c:	00 00                	add    BYTE PTR [eax],al
    125e:	3c 01                	cmp    al,0x1
    1260:	00 00                	add    BYTE PTR [eax],al
    1262:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1265:	01 13                	add    DWORD PTR [ebx],edx
    1267:	8c 01                	mov    WORD PTR [ecx],es
    1269:	00 00                	add    BYTE PTR [eax],al
    126b:	02 91 74 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b74]
    1271:	01 14 97             	add    DWORD PTR [edi+edx*4],edx
    1274:	01 00                	add    DWORD PTR [eax],eax
    1276:	00 02                	add    BYTE PTR [edx],al
    1278:	91                   	xchg   ecx,eax
    1279:	70 00                	jo     127b <sysEnter_Vector-0x12ed85>
    127b:	0c e5                	or     al,0xe5
    127d:	0b 00                	or     eax,DWORD PTR [eax]
    127f:	30 79 00             	xor    BYTE PTR [ecx+0x0],bh
    1282:	00 00                	add    BYTE PTR [eax],al
    1284:	62 01                	bound  eax,QWORD PTR [ecx]
    1286:	00 00                	add    BYTE PTR [eax],al
    1288:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    128b:	01 23                	add    DWORD PTR [ebx],esp
    128d:	8c 01                	mov    WORD PTR [ecx],es
    128f:	00 00                	add    BYTE PTR [eax],al
    1291:	02 91 6c 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b6c]
    1297:	01 24 97             	add    DWORD PTR [edi+edx*4],esp
    129a:	01 00                	add    DWORD PTR [eax],eax
    129c:	00 02                	add    BYTE PTR [edx],al
    129e:	91                   	xchg   ecx,eax
    129f:	68 00 0d 5e 0c       	push   0xc5e0d00
    12a4:	00 30                	add    BYTE PTR [eax],dh
    12a6:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    12a9:	00 0b                	add    BYTE PTR [ebx],cl
    12ab:	66                   	data16
    12ac:	00 01                	add    BYTE PTR [ecx],al
    12ae:	32 97 00 00 00 02    	xor    dl,BYTE PTR [edi+0x2000000]
    12b4:	91                   	xchg   ecx,eax
    12b5:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    12ba:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    12be:	00 02                	add    BYTE PTR [edx],al
    12c0:	91                   	xchg   ecx,eax
    12c1:	60                   	pusha  
    12c2:	00 00                	add    BYTE PTR [eax],al
    12c4:	05 04 8b 01 00       	add    eax,0x18b04
    12c9:	00 0e                	add    BYTE PTR [esi],cl
    12cb:	05 04 92 01 00       	add    eax,0x19204
    12d0:	00 07                	add    BYTE PTR [edi],al
    12d2:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    12d8:	81 00 00 00 0f 3f    	add    DWORD PTR [eax],0x3f0f0000
    12de:	00 00                	add    BYTE PTR [eax],al
    12e0:	00 05 34 81 00 00    	add    BYTE PTR ds:0x8134,al
    12e6:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    12ec:	30 0f                	xor    BYTE PTR [edi],cl
    12ee:	aa                   	stos   BYTE PTR es:[edi],al
    12ef:	00 00                	add    BYTE PTR [eax],al
    12f1:	00 05 35 81 00 00    	add    BYTE PTR ds:0x8135,al
    12f7:	00 05 03 b0 3b 00    	add    BYTE PTR ds:0x3bb003,al
    12fd:	30 0f                	xor    BYTE PTR [edi],cl
    12ff:	56                   	push   esi
    1300:	01 00                	add    DWORD PTR [eax],eax
    1302:	00 05 36 81 00 00    	add    BYTE PTR ds:0x8136,al
    1308:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    130e:	30 0f                	xor    BYTE PTR [edi],cl
    1310:	48                   	dec    eax
    1311:	00 00                	add    BYTE PTR [eax],al
    1313:	00 06                	add    BYTE PTR [esi],al
    1315:	3b 8c 00 00 00 05 03 	cmp    ecx,DWORD PTR [eax+eax*1+0x3050000]
    131c:	b4 3b                	mov    ah,0x3b
    131e:	00 30                	add    BYTE PTR [eax],dh
    1320:	00 19                	add    BYTE PTR [ecx],bl
    1322:	02 00                	add    al,BYTE PTR [eax]
    1324:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1327:	59                   	pop    ecx
    1328:	07                   	pop    es
    1329:	00 00                	add    BYTE PTR [eax],al
    132b:	04 01                	add    al,0x1
    132d:	ef                   	out    dx,eax
    132e:	00 00                	add    BYTE PTR [eax],al
    1330:	00 0c 29             	add    BYTE PTR [ecx+ebp*1],cl
    1333:	06                   	push   es
    1334:	00 00                	add    BYTE PTR [eax],al
    1336:	6d                   	ins    DWORD PTR es:[edi],dx
    1337:	00 00                	add    BYTE PTR [eax],al
    1339:	00 cc                	add    ah,cl
    133b:	0c 00                	or     al,0x0
    133d:	30 8e 01 00 00 a5    	xor    BYTE PTR [esi-0x5affffff],cl
    1343:	08 00                	or     BYTE PTR [eax],al
    1345:	00 02                	add    BYTE PTR [edx],al
    1347:	01 06                	add    DWORD PTR [esi],eax
    1349:	58                   	pop    eax
    134a:	00 00                	add    BYTE PTR [eax],al
    134c:	00 02                	add    BYTE PTR [edx],al
    134e:	01 06                	add    DWORD PTR [esi],eax
    1350:	51                   	push   ecx
    1351:	00 00                	add    BYTE PTR [eax],al
    1353:	00 02                	add    BYTE PTR [edx],al
    1355:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    135b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1362:	02 08                	add    cl,BYTE PTR [eax]
    1364:	05 00 00 00 00       	add    eax,0x0
    1369:	04 80                	add    al,0x80
    136b:	05 00 00 02 2e       	add    eax,0x2e020000
    1370:	53                   	push   ebx
    1371:	00 00                	add    BYTE PTR [eax],al
    1373:	00 02                	add    BYTE PTR [edx],al
    1375:	01 08                	add    DWORD PTR [eax],ecx
    1377:	4f                   	dec    edi
    1378:	00 00                	add    BYTE PTR [eax],al
    137a:	00 04 43             	add    BYTE PTR [ebx+eax*2],al
    137d:	06                   	push   es
    137e:	00 00                	add    BYTE PTR [eax],al
    1380:	02 31                	add    dh,BYTE PTR [ecx]
    1382:	65 00 00             	add    BYTE PTR gs:[eax],al
    1385:	00 02                	add    BYTE PTR [edx],al
    1387:	02 07                	add    al,BYTE PTR [edi]
    1389:	0e                   	push   cs
    138a:	00 00                	add    BYTE PTR [eax],al
    138c:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    138f:	00 00                	add    BYTE PTR [eax],al
    1391:	00 02                	add    BYTE PTR [edx],al
    1393:	34 77                	xor    al,0x77
    1395:	00 00                	add    BYTE PTR [eax],al
    1397:	00 02                	add    BYTE PTR [edx],al
    1399:	04 07                	add    al,0x7
    139b:	32 00                	xor    al,BYTE PTR [eax]
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	02 08                	add    cl,BYTE PTR [eax]
    13a1:	07                   	pop    es
    13a2:	28 00                	sub    BYTE PTR [eax],al
    13a4:	00 00                	add    BYTE PTR [eax],al
    13a6:	04 ae                	add    al,0xae
    13a8:	03 00                	add    eax,DWORD PTR [eax]
    13aa:	00 03                	add    BYTE PTR [ebx],al
    13ac:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    13af:	00 00                	add    BYTE PTR [eax],al
    13b1:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    13b8:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    13bb:	96                   	xchg   esi,eax
    13bc:	00 00                	add    BYTE PTR [eax],al
    13be:	00 02                	add    BYTE PTR [edx],al
    13c0:	01 02                	add    DWORD PTR [edx],eax
    13c2:	90                   	nop
    13c3:	00 00                	add    BYTE PTR [eax],al
    13c5:	00 04 5d 00 00 00 04 	add    BYTE PTR [ebx*2+0x4000000],al
    13cc:	2a 90 00 00 00 02    	sub    dl,BYTE PTR [eax+0x2000000]
    13d2:	04 07                	add    al,0x7
    13d4:	2d 00 00 00 02       	sub    eax,0x2000000
    13d9:	04 07                	add    al,0x7
    13db:	dc 00                	fadd   QWORD PTR [eax]
    13dd:	00 00                	add    BYTE PTR [eax],al
    13df:	05 04 06 22 06       	add    eax,0x6220604
    13e4:	00 00                	add    BYTE PTR [eax],al
    13e6:	01 08                	add    DWORD PTR [eax],ecx
    13e8:	be 00 00 00 cc       	mov    esi,0xcc000000
    13ed:	0c 00                	or     al,0x0
    13ef:	30 c7                	xor    bh,al
    13f1:	00 00                	add    BYTE PTR [eax],al
    13f3:	00 01                	add    BYTE PTR [ecx],al
    13f5:	9c                   	pushf  
    13f6:	43                   	inc    ebx
    13f7:	01 00                	add    DWORD PTR [eax],eax
    13f9:	00 07                	add    BYTE PTR [edi],al
    13fb:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    13fe:	01 08                	add    DWORD PTR [eax],ecx
    1400:	be 00 00 00 02       	mov    esi,0x2000000
    1405:	91                   	xchg   ecx,eax
    1406:	00 07                	add    BYTE PTR [edi],al
    1408:	76 61                	jbe    146b <sysEnter_Vector-0x12eb95>
    140a:	6c                   	ins    BYTE PTR es:[edi],dx
    140b:	00 01                	add    BYTE PTR [ecx],al
    140d:	08 3a                	or     BYTE PTR [edx],bh
    140f:	00 00                	add    BYTE PTR [eax],al
    1411:	00 02                	add    BYTE PTR [edx],al
    1413:	91                   	xchg   ecx,eax
    1414:	04 07                	add    al,0x7
    1416:	6c                   	ins    BYTE PTR es:[edi],dx
    1417:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1419:	00 01                	add    BYTE PTR [ecx],al
    141b:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1421:	91                   	xchg   ecx,eax
    1422:	08 08                	or     BYTE PTR [eax],cl
    1424:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1427:	0a 43 01             	or     al,BYTE PTR [ebx+0x1]
    142a:	00 00                	add    BYTE PTR [eax],al
    142c:	02 91 74 08 65 00    	add    dl,BYTE PTR [ecx+0x650874]
    1432:	01 0b                	add    DWORD PTR [ebx],ecx
    1434:	49                   	dec    ecx
    1435:	01 00                	add    DWORD PTR [eax],eax
    1437:	00 02                	add    BYTE PTR [edx],al
    1439:	91                   	xchg   ecx,eax
    143a:	70 09                	jo     1445 <sysEnter_Vector-0x12ebbb>
    143c:	1d 06 00 00 01       	sbb    eax,0x1000006
    1441:	0c 5a                	or     al,0x5a
    1443:	00 00                	add    BYTE PTR [eax],al
    1445:	00 02                	add    BYTE PTR [edx],al
    1447:	91                   	xchg   ecx,eax
    1448:	6a 08                	push   0x8
    144a:	66                   	data16
    144b:	00 01                	add    BYTE PTR [ecx],al
    144d:	0d 4f 01 00 00       	or     eax,0x14f
    1452:	02 91 6c 09 36 06    	add    dl,BYTE PTR [ecx+0x636096c]
    1458:	00 00                	add    BYTE PTR [eax],al
    145a:	01 0e                	add    DWORD PTR [esi],ecx
    145c:	6c                   	ins    BYTE PTR es:[edi],dx
    145d:	00 00                	add    BYTE PTR [eax],al
    145f:	00 02                	add    BYTE PTR [edx],al
    1461:	91                   	xchg   ecx,eax
    1462:	64 00 0a             	add    BYTE PTR fs:[edx],cl
    1465:	04 48                	add    al,0x48
    1467:	00 00                	add    BYTE PTR [eax],al
    1469:	00 0a                	add    BYTE PTR [edx],cl
    146b:	04 5a                	add    al,0x5a
    146d:	00 00                	add    BYTE PTR [eax],al
    146f:	00 0a                	add    BYTE PTR [edx],cl
    1471:	04 6c                	add    al,0x6c
    1473:	00 00                	add    BYTE PTR [eax],al
    1475:	00 06                	add    BYTE PTR [esi],al
    1477:	3b 06                	cmp    eax,DWORD PTR [esi]
    1479:	00 00                	add    BYTE PTR [eax],al
    147b:	01 1f                	add    DWORD PTR [edi],ebx
    147d:	be 00 00 00 93       	mov    esi,0x93000000
    1482:	0d 00 30 c7 00       	or     eax,0xc73000
    1487:	00 00                	add    BYTE PTR [eax],al
    1489:	01 9c d8 01 00 00 07 	add    DWORD PTR [eax+ebx*8+0x7000001],ebx
    1490:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1493:	01 1f                	add    DWORD PTR [edi],ebx
    1495:	be 00 00 00 02       	mov    esi,0x2000000
    149a:	91                   	xchg   ecx,eax
    149b:	00 07                	add    BYTE PTR [edi],al
    149d:	76 61                	jbe    1500 <sysEnter_Vector-0x12eb00>
    149f:	6c                   	ins    BYTE PTR es:[edi],dx
    14a0:	00 01                	add    BYTE PTR [ecx],al
    14a2:	1f                   	pop    ds
    14a3:	3a 00                	cmp    al,BYTE PTR [eax]
    14a5:	00 00                	add    BYTE PTR [eax],al
    14a7:	02 91 04 07 6c 65    	add    dl,BYTE PTR [ecx+0x656c0704]
    14ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14ae:	00 01                	add    BYTE PTR [ecx],al
    14b0:	1f                   	pop    ds
    14b1:	85 00                	test   DWORD PTR [eax],eax
    14b3:	00 00                	add    BYTE PTR [eax],al
    14b5:	02 91 08 08 64 00    	add    dl,BYTE PTR [ecx+0x640808]
    14bb:	01 21                	add    DWORD PTR [ecx],esp
    14bd:	43                   	inc    ebx
    14be:	01 00                	add    DWORD PTR [eax],eax
    14c0:	00 02                	add    BYTE PTR [edx],al
    14c2:	91                   	xchg   ecx,eax
    14c3:	74 08                	je     14cd <sysEnter_Vector-0x12eb33>
    14c5:	65 00 01             	add    BYTE PTR gs:[ecx],al
    14c8:	22 49 01             	and    cl,BYTE PTR [ecx+0x1]
    14cb:	00 00                	add    BYTE PTR [eax],al
    14cd:	02 91 70 09 1d 06    	add    dl,BYTE PTR [ecx+0x61d0970]
    14d3:	00 00                	add    BYTE PTR [eax],al
    14d5:	01 23                	add    DWORD PTR [ebx],esp
    14d7:	5a                   	pop    edx
    14d8:	00 00                	add    BYTE PTR [eax],al
    14da:	00 02                	add    BYTE PTR [edx],al
    14dc:	91                   	xchg   ecx,eax
    14dd:	6a 08                	push   0x8
    14df:	66                   	data16
    14e0:	00 01                	add    BYTE PTR [ecx],al
    14e2:	24 4f                	and    al,0x4f
    14e4:	01 00                	add    DWORD PTR [eax],eax
    14e6:	00 02                	add    BYTE PTR [edx],al
    14e8:	91                   	xchg   ecx,eax
    14e9:	6c                   	ins    BYTE PTR es:[edi],dx
    14ea:	09 36                	or     DWORD PTR [esi],esi
    14ec:	06                   	push   es
    14ed:	00 00                	add    BYTE PTR [eax],al
    14ef:	01 25 6c 00 00 00    	add    DWORD PTR ds:0x6c,esp
    14f5:	02 91 64 00 0b 3f    	add    dl,BYTE PTR [ecx+0x3f0b0064]
    14fb:	00 00                	add    BYTE PTR [eax],al
    14fd:	00 05 34 6c 00 00    	add    BYTE PTR ds:0x6c34,al
    1503:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    1509:	30 0b                	xor    BYTE PTR [ebx],cl
    150b:	aa                   	stos   BYTE PTR es:[edi],al
    150c:	00 00                	add    BYTE PTR [eax],al
    150e:	00 05 35 6c 00 00    	add    BYTE PTR ds:0x6c35,al
    1514:	00 05 03 b0 3b 00    	add    BYTE PTR ds:0x3bb003,al
    151a:	30 0b                	xor    BYTE PTR [ebx],cl
    151c:	56                   	push   esi
    151d:	01 00                	add    DWORD PTR [eax],eax
    151f:	00 05 36 6c 00 00    	add    BYTE PTR ds:0x6c36,al
    1525:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    152b:	30 0b                	xor    BYTE PTR [ebx],cl
    152d:	48                   	dec    eax
    152e:	00 00                	add    BYTE PTR [eax],al
    1530:	00 06                	add    BYTE PTR [esi],al
    1532:	3b a5 00 00 00 05    	cmp    esp,DWORD PTR [ebp+0x5000000]
    1538:	03 b4 3b 00 30 00 63 	add    esi,DWORD PTR [ebx+edi*1+0x63003000]
    153f:	01 00                	add    DWORD PTR [eax],eax
    1541:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1544:	fa                   	cli    
    1545:	07                   	pop    es
    1546:	00 00                	add    BYTE PTR [eax],al
    1548:	04 01                	add    al,0x1
    154a:	ef                   	out    dx,eax
    154b:	00 00                	add    BYTE PTR [eax],al
    154d:	00 0c 68             	add    BYTE PTR [eax+ebp*2],cl
    1550:	06                   	push   es
    1551:	00 00                	add    BYTE PTR [eax],al
    1553:	6d                   	ins    DWORD PTR es:[edi],dx
    1554:	00 00                	add    BYTE PTR [eax],al
    1556:	00 5c 0e 00          	add    BYTE PTR [esi+ecx*1+0x0],bl
    155a:	30 10                	xor    BYTE PTR [eax],dl
    155c:	00 00                	add    BYTE PTR [eax],al
    155e:	00 8d 09 00 00 02    	add    BYTE PTR [ebp+0x2000009],cl
    1564:	01 06                	add    DWORD PTR [esi],eax
    1566:	58                   	pop    eax
    1567:	00 00                	add    BYTE PTR [eax],al
    1569:	00 02                	add    BYTE PTR [edx],al
    156b:	01 06                	add    DWORD PTR [esi],eax
    156d:	51                   	push   ecx
    156e:	00 00                	add    BYTE PTR [eax],al
    1570:	00 02                	add    BYTE PTR [edx],al
    1572:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    1578:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    157f:	02 08                	add    cl,BYTE PTR [eax]
    1581:	05 00 00 00 00       	add    eax,0x0
    1586:	02 01                	add    al,BYTE PTR [ecx]
    1588:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    158b:	00 00                	add    BYTE PTR [eax],al
    158d:	02 02                	add    al,BYTE PTR [edx]
    158f:	07                   	pop    es
    1590:	0e                   	push   cs
    1591:	00 00                	add    BYTE PTR [eax],al
    1593:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    1596:	00 00                	add    BYTE PTR [eax],al
    1598:	00 02                	add    BYTE PTR [edx],al
    159a:	34 61                	xor    al,0x61
    159c:	00 00                	add    BYTE PTR [eax],al
    159e:	00 02                	add    BYTE PTR [edx],al
    15a0:	04 07                	add    al,0x7
    15a2:	32 00                	xor    al,BYTE PTR [eax]
    15a4:	00 00                	add    BYTE PTR [eax],al
    15a6:	02 08                	add    cl,BYTE PTR [eax]
    15a8:	07                   	pop    es
    15a9:	28 00                	sub    BYTE PTR [eax],al
    15ab:	00 00                	add    BYTE PTR [eax],al
    15ad:	04 ae                	add    al,0xae
    15af:	03 00                	add    eax,DWORD PTR [eax]
    15b1:	00 03                	add    BYTE PTR [ebx],al
    15b3:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    15b6:	00 00                	add    BYTE PTR [eax],al
    15b8:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    15bf:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    15c2:	96                   	xchg   esi,eax
    15c3:	00 00                	add    BYTE PTR [eax],al
    15c5:	00 02                	add    BYTE PTR [edx],al
    15c7:	01 02                	add    DWORD PTR [edx],eax
    15c9:	90                   	nop
    15ca:	00 00                	add    BYTE PTR [eax],al
    15cc:	00 04 5d 00 00 00 04 	add    BYTE PTR [ebx*2+0x4000000],al
    15d3:	2a 7a 00             	sub    bh,BYTE PTR [edx+0x0]
    15d6:	00 00                	add    BYTE PTR [eax],al
    15d8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    15db:	2d 00 00 00 02       	sub    eax,0x2000000
    15e0:	04 07                	add    al,0x7
    15e2:	dc 00                	fadd   QWORD PTR [eax]
    15e4:	00 00                	add    BYTE PTR [eax],al
    15e6:	05 04 04 51 06       	add    eax,0x6510404
    15eb:	00 00                	add    BYTE PTR [eax],al
    15ed:	05 15 7a 00 00       	add    eax,0x7a15
    15f2:	00 06                	add    BYTE PTR [esi],al
    15f4:	63 06                	arpl   WORD PTR [esi],ax
    15f6:	00 00                	add    BYTE PTR [eax],al
    15f8:	01 09                	add    DWORD PTR [ecx],ecx
    15fa:	a8 00                	test   al,0x0
    15fc:	00 00                	add    BYTE PTR [eax],al
    15fe:	5c                   	pop    esp
    15ff:	0e                   	push   cs
    1600:	00 30                	add    BYTE PTR [eax],dh
    1602:	10 00                	adc    BYTE PTR [eax],al
    1604:	00 00                	add    BYTE PTR [eax],al
    1606:	01 9c 22 01 00 00 07 	add    DWORD PTR [edx+eiz*1+0x7000001],ebx
    160d:	4c                   	dec    esp
    160e:	06                   	push   es
    160f:	00 00                	add    BYTE PTR [eax],al
    1611:	01 09                	add    DWORD PTR [ecx],ecx
    1613:	a8 00                	test   al,0x0
    1615:	00 00                	add    BYTE PTR [eax],al
    1617:	02 91 00 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0800]
    161d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    161e:	00 01                	add    BYTE PTR [ecx],al
    1620:	09 6f 00             	or     DWORD PTR [edi+0x0],ebp
    1623:	00 00                	add    BYTE PTR [eax],al
    1625:	02 91 04 07 57 06    	add    dl,BYTE PTR [ecx+0x6570704]
    162b:	00 00                	add    BYTE PTR [eax],al
    162d:	01 09                	add    DWORD PTR [ecx],ecx
    162f:	3a 00                	cmp    al,BYTE PTR [eax]
    1631:	00 00                	add    BYTE PTR [eax],al
    1633:	02 91 08 07 b2 07    	add    dl,BYTE PTR [ecx+0x7b20708]
    1639:	00 00                	add    BYTE PTR [eax],al
    163b:	01 09                	add    DWORD PTR [ecx],ecx
    163d:	3a 00                	cmp    al,BYTE PTR [eax]
    163f:	00 00                	add    BYTE PTR [eax],al
    1641:	02 91 0c 08 66 64    	add    dl,BYTE PTR [ecx+0x6466080c]
    1647:	00 01                	add    BYTE PTR [ecx],al
    1649:	09 3a                	or     DWORD PTR [edx],edi
    164b:	00 00                	add    BYTE PTR [eax],al
    164d:	00 02                	add    BYTE PTR [edx],al
    164f:	91                   	xchg   ecx,eax
    1650:	10 07                	adc    BYTE PTR [edi],al
    1652:	5c                   	pop    esp
    1653:	06                   	push   es
    1654:	00 00                	add    BYTE PTR [eax],al
    1656:	01 09                	add    DWORD PTR [ecx],ecx
    1658:	aa                   	stos   BYTE PTR es:[edi],al
    1659:	00 00                	add    BYTE PTR [eax],al
    165b:	00 02                	add    BYTE PTR [edx],al
    165d:	91                   	xchg   ecx,eax
    165e:	14 00                	adc    al,0x0
    1660:	09 3f                	or     DWORD PTR [edi],edi
    1662:	00 00                	add    BYTE PTR [eax],al
    1664:	00 06                	add    BYTE PTR [esi],al
    1666:	34 56                	xor    al,0x56
    1668:	00 00                	add    BYTE PTR [eax],al
    166a:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    1670:	30 09                	xor    BYTE PTR [ecx],cl
    1672:	aa                   	stos   BYTE PTR es:[edi],al
    1673:	00 00                	add    BYTE PTR [eax],al
    1675:	00 06                	add    BYTE PTR [esi],al
    1677:	35 56 00 00 00       	xor    eax,0x56
    167c:	05 03 b0 3b 00       	add    eax,0x3bb003
    1681:	30 09                	xor    BYTE PTR [ecx],cl
    1683:	56                   	push   esi
    1684:	01 00                	add    DWORD PTR [eax],eax
    1686:	00 06                	add    BYTE PTR [esi],al
    1688:	36                   	ss
    1689:	56                   	push   esi
    168a:	00 00                	add    BYTE PTR [eax],al
    168c:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    1692:	30 09                	xor    BYTE PTR [ecx],cl
    1694:	48                   	dec    eax
    1695:	00 00                	add    BYTE PTR [eax],al
    1697:	00 07                	add    BYTE PTR [edi],al
    1699:	3b 8f 00 00 00 05    	cmp    ecx,DWORD PTR [edi+0x5000000]
    169f:	03 b4 3b 00 30 00 f9 	add    esi,DWORD PTR [ebx+edi*1-0x6ffd000]
    16a6:	05 00 00 04 00       	add    eax,0x40000
    16ab:	83 08 00             	or     DWORD PTR [eax],0x0
    16ae:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    16b1:	ef                   	out    dx,eax
    16b2:	00 00                	add    BYTE PTR [eax],al
    16b4:	00 0c df             	add    BYTE PTR [edi+ebx*8],cl
    16b7:	06                   	push   es
    16b8:	00 00                	add    BYTE PTR [eax],al
    16ba:	6d                   	ins    DWORD PTR es:[edi],dx
    16bb:	00 00                	add    BYTE PTR [eax],al
    16bd:	00 6c 0e 00          	add    BYTE PTR [esi+ecx*1+0x0],ch
    16c1:	30 60 02             	xor    BYTE PTR [eax+0x2],ah
    16c4:	00 00                	add    BYTE PTR [eax],al
    16c6:	5a                   	pop    edx
    16c7:	0a 00                	or     al,BYTE PTR [eax]
    16c9:	00 02                	add    BYTE PTR [edx],al
    16cb:	01 06                	add    DWORD PTR [esi],eax
    16cd:	58                   	pop    eax
    16ce:	00 00                	add    BYTE PTR [eax],al
    16d0:	00 02                	add    BYTE PTR [edx],al
    16d2:	01 06                	add    DWORD PTR [esi],eax
    16d4:	51                   	push   ecx
    16d5:	00 00                	add    BYTE PTR [eax],al
    16d7:	00 02                	add    BYTE PTR [edx],al
    16d9:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    16df:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    16e6:	02 08                	add    cl,BYTE PTR [eax]
    16e8:	05 00 00 00 00       	add    eax,0x0
    16ed:	02 01                	add    al,BYTE PTR [ecx]
    16ef:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    16f2:	00 00                	add    BYTE PTR [eax],al
    16f4:	02 02                	add    al,BYTE PTR [edx]
    16f6:	07                   	pop    es
    16f7:	0e                   	push   cs
    16f8:	00 00                	add    BYTE PTR [eax],al
    16fa:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    16fd:	00 00                	add    BYTE PTR [eax],al
    16ff:	00 02                	add    BYTE PTR [edx],al
    1701:	34 61                	xor    al,0x61
    1703:	00 00                	add    BYTE PTR [eax],al
    1705:	00 02                	add    BYTE PTR [edx],al
    1707:	04 07                	add    al,0x7
    1709:	32 00                	xor    al,BYTE PTR [eax]
    170b:	00 00                	add    BYTE PTR [eax],al
    170d:	04 79                	add    al,0x79
    170f:	06                   	push   es
    1710:	00 00                	add    BYTE PTR [eax],al
    1712:	02 37                	add    dh,BYTE PTR [edi]
    1714:	73 00                	jae    1716 <sysEnter_Vector-0x12e8ea>
    1716:	00 00                	add    BYTE PTR [eax],al
    1718:	02 08                	add    cl,BYTE PTR [eax]
    171a:	07                   	pop    es
    171b:	28 00                	sub    BYTE PTR [eax],al
    171d:	00 00                	add    BYTE PTR [eax],al
    171f:	04 ae                	add    al,0xae
    1721:	03 00                	add    eax,DWORD PTR [eax]
    1723:	00 03                	add    BYTE PTR [ebx],al
    1725:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1728:	00 00                	add    BYTE PTR [eax],al
    172a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1731:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1734:	96                   	xchg   esi,eax
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	00 02                	add    BYTE PTR [edx],al
    1739:	01 02                	add    DWORD PTR [edx],eax
    173b:	90                   	nop
    173c:	00 00                	add    BYTE PTR [eax],al
    173e:	00 04 5d 00 00 00 04 	add    BYTE PTR [ebx*2+0x4000000],al
    1745:	2a 85 00 00 00 05    	sub    al,BYTE PTR [ebp+0x5000000]
    174b:	04 ab                	add    al,0xab
    174d:	00 00                	add    BYTE PTR [eax],al
    174f:	00 06                	add    BYTE PTR [esi],al
    1751:	25 00 00 00 02       	and    eax,0x2000000
    1756:	04 07                	add    al,0x7
    1758:	2d 00 00 00 02       	sub    eax,0x2000000
    175d:	04 07                	add    al,0x7
    175f:	dc 00                	fadd   QWORD PTR [eax]
    1761:	00 00                	add    BYTE PTR [eax],al
    1763:	07                   	pop    es
    1764:	04 05                	add    al,0x5
    1766:	04 25                	add    al,0x25
    1768:	00 00                	add    BYTE PTR [eax],al
    176a:	00 08                	add    BYTE PTR [eax],cl
    176c:	85 07                	test   DWORD PTR [edi],eax
    176e:	00 00                	add    BYTE PTR [eax],al
    1770:	0c 05                	or     al,0x5
    1772:	17                   	pop    ss
    1773:	f7 00 00 00 09 9c    	test   DWORD PTR [eax],0x9c090000
    1779:	06                   	push   es
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	05 19 f7 00 00       	add    eax,0xf719
    1781:	00 00                	add    BYTE PTR [eax],al
    1783:	09 f5                	or     ebp,esi
    1785:	05 00 00 05 19       	add    eax,0x19050000
    178a:	f7 00 00 00 04 09    	test   DWORD PTR [eax],0x9040000
    1790:	7d 07                	jge    1799 <sysEnter_Vector-0x12e867>
    1792:	00 00                	add    BYTE PTR [eax],al
    1794:	05 1a be 00 00       	add    eax,0xbe1a
    1799:	00 08                	add    BYTE PTR [eax],cl
    179b:	00 05 04 c6 00 00    	add    BYTE PTR ds:0xc604,al
    17a1:	00 04 0e             	add    BYTE PTR [esi+ecx*1],al
    17a4:	07                   	pop    es
    17a5:	00 00                	add    BYTE PTR [eax],al
    17a7:	05 1b c6 00 00       	add    eax,0xc61b
    17ac:	00 08                	add    BYTE PTR [eax],cl
    17ae:	ba 06 00 00 14       	mov    edx,0x14000006
    17b3:	06                   	push   es
    17b4:	1b 39                	sbb    edi,DWORD PTR [ecx]
    17b6:	01 00                	add    DWORD PTR [eax],eax
    17b8:	00 09                	add    BYTE PTR [ecx],cl
    17ba:	b3 06                	mov    bl,0x6
    17bc:	00 00                	add    BYTE PTR [eax],al
    17be:	06                   	push   es
    17bf:	1d fd 00 00 00       	sbb    eax,0xfd
    17c4:	00 09                	add    BYTE PTR [ecx],cl
    17c6:	73 06                	jae    17ce <sysEnter_Vector-0x12e832>
    17c8:	00 00                	add    BYTE PTR [eax],al
    17ca:	06                   	push   es
    17cb:	1e                   	push   ds
    17cc:	61                   	popa   
    17cd:	00 00                	add    BYTE PTR [eax],al
    17cf:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    17d2:	f0 07                	lock pop es
    17d4:	00 00                	add    BYTE PTR [eax],al
    17d6:	06                   	push   es
    17d7:	1f                   	pop    ds
    17d8:	6a 01                	push   0x1
    17da:	00 00                	add    BYTE PTR [eax],al
    17dc:	10 00                	adc    BYTE PTR [eax],al
    17de:	08 eb                	or     bl,ch
    17e0:	06                   	push   es
    17e1:	00 00                	add    BYTE PTR [eax],al
    17e3:	0c 06                	or     al,0x6
    17e5:	37                   	aaa    
    17e6:	6a 01                	push   0x1
    17e8:	00 00                	add    BYTE PTR [eax],al
    17ea:	09 d8                	or     eax,ebx
    17ec:	06                   	push   es
    17ed:	00 00                	add    BYTE PTR [eax],al
    17ef:	06                   	push   es
    17f0:	39 c0                	cmp    eax,eax
    17f2:	00 00                	add    BYTE PTR [eax],al
    17f4:	00 00                	add    BYTE PTR [eax],al
    17f6:	09 f7                	or     edi,esi
    17f8:	07                   	pop    es
    17f9:	00 00                	add    BYTE PTR [eax],al
    17fb:	06                   	push   es
    17fc:	3a 73 02             	cmp    dh,BYTE PTR [ebx+0x2]
    17ff:	00 00                	add    BYTE PTR [eax],al
    1801:	04 09                	add    al,0x9
    1803:	0d 08 00 00 06       	or     eax,0x6000008
    1808:	3b 6a 01             	cmp    ebp,DWORD PTR [edx+0x1]
    180b:	00 00                	add    BYTE PTR [eax],al
    180d:	08 00                	or     BYTE PTR [eax],al
    180f:	05 04 39 01 00       	add    eax,0x13904
    1814:	00 08                	add    BYTE PTR [eax],cl
    1816:	c8 06 00 00          	enter  0x6,0x0
    181a:	0c 06                	or     al,0x6
    181c:	22 a1 01 00 00 09    	and    ah,BYTE PTR [ecx+0x9000001]
    1822:	94                   	xchg   esp,eax
    1823:	07                   	pop    es
    1824:	00 00                	add    BYTE PTR [eax],al
    1826:	06                   	push   es
    1827:	24 6a                	and    al,0x6a
    1829:	01 00                	add    DWORD PTR [eax],eax
    182b:	00 00                	add    BYTE PTR [eax],al
    182d:	09 ac 06 00 00 06 25 	or     DWORD PTR [esi+eax*1+0x25060000],ebp
    1834:	a1 01 00 00 04       	mov    eax,ds:0x4000001
    1839:	09 82 06 00 00 06    	or     DWORD PTR [edx+0x6000006],eax
    183f:	26 3a 00             	cmp    al,BYTE PTR es:[eax]
    1842:	00 00                	add    BYTE PTR [eax],al
    1844:	08 00                	or     BYTE PTR [eax],al
    1846:	05 04 08 01 00       	add    eax,0x10804
    184b:	00 08                	add    BYTE PTR [eax],cl
    184d:	f9                   	stc    
    184e:	07                   	pop    es
    184f:	00 00                	add    BYTE PTR [eax],al
    1851:	24 06                	and    al,0x6
    1853:	29 14 02             	sub    DWORD PTR [edx+eax*1],edx
    1856:	00 00                	add    BYTE PTR [eax],al
    1858:	09 58 07             	or     DWORD PTR [eax+0x7],ebx
    185b:	00 00                	add    BYTE PTR [eax],al
    185d:	06                   	push   es
    185e:	2b 61 00             	sub    esp,DWORD PTR [ecx+0x0]
    1861:	00 00                	add    BYTE PTR [eax],al
    1863:	00 09                	add    BYTE PTR [ecx],cl
    1865:	c7 07 00 00 06 2c    	mov    DWORD PTR [edi],0x2c060000
    186b:	4f                   	dec    edi
    186c:	00 00                	add    BYTE PTR [eax],al
    186e:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1871:	34 07                	xor    al,0x7
    1873:	00 00                	add    BYTE PTR [eax],al
    1875:	06                   	push   es
    1876:	2d 4f 00 00 00       	sub    eax,0x4f
    187b:	06                   	push   es
    187c:	09 c1                	or     ecx,eax
    187e:	07                   	pop    es
    187f:	00 00                	add    BYTE PTR [eax],al
    1881:	06                   	push   es
    1882:	2e                   	cs
    1883:	61                   	popa   
    1884:	00 00                	add    BYTE PTR [eax],al
    1886:	00 08                	add    BYTE PTR [eax],cl
    1888:	09 08                	or     DWORD PTR [eax],ecx
    188a:	07                   	pop    es
    188b:	00 00                	add    BYTE PTR [eax],al
    188d:	06                   	push   es
    188e:	2f                   	das    
    188f:	61                   	popa   
    1890:	00 00                	add    BYTE PTR [eax],al
    1892:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1895:	b0 07                	mov    al,0x7
    1897:	00 00                	add    BYTE PTR [eax],al
    1899:	06                   	push   es
    189a:	30 61 00             	xor    BYTE PTR [ecx+0x0],ah
    189d:	00 00                	add    BYTE PTR [eax],al
    189f:	10 09                	adc    BYTE PTR [ecx],cl
    18a1:	8f 07                	pop    DWORD PTR [edi]
    18a3:	00 00                	add    BYTE PTR [eax],al
    18a5:	06                   	push   es
    18a6:	31 5d 02             	xor    DWORD PTR [ebp+0x2],ebx
    18a9:	00 00                	add    BYTE PTR [eax],al
    18ab:	14 09                	adc    al,0x9
    18ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
    18b0:	00 06                	add    BYTE PTR [esi],al
    18b2:	32 70 01             	xor    dh,BYTE PTR [eax+0x1]
    18b5:	00 00                	add    BYTE PTR [eax],al
    18b7:	18 00                	sbb    BYTE PTR [eax],al
    18b9:	08 23                	or     BYTE PTR [ebx],ah
    18bb:	07                   	pop    es
    18bc:	00 00                	add    BYTE PTR [eax],al
    18be:	14 06                	adc    al,0x6
    18c0:	3e                   	ds
    18c1:	5d                   	pop    ebp
    18c2:	02 00                	add    al,BYTE PTR [eax]
    18c4:	00 09                	add    BYTE PTR [ecx],cl
    18c6:	2f                   	das    
    18c7:	08 00                	or     BYTE PTR [eax],al
    18c9:	00 06                	add    BYTE PTR [esi],al
    18cb:	40                   	inc    eax
    18cc:	8d 02                	lea    eax,[edx]
    18ce:	00 00                	add    BYTE PTR [eax],al
    18d0:	00 09                	add    BYTE PTR [ecx],cl
    18d2:	a1 06 00 00 06       	mov    eax,ds:0x6000006
    18d7:	41                   	inc    ecx
    18d8:	8d 02                	lea    eax,[edx]
    18da:	00 00                	add    BYTE PTR [eax],al
    18dc:	04 09                	add    al,0x9
    18de:	02 07                	add    al,BYTE PTR [edi]
    18e0:	00 00                	add    BYTE PTR [eax],al
    18e2:	06                   	push   es
    18e3:	42                   	inc    edx
    18e4:	8d 02                	lea    eax,[edx]
    18e6:	00 00                	add    BYTE PTR [eax],al
    18e8:	08 09                	or     BYTE PTR [ecx],cl
    18ea:	96                   	xchg   esi,eax
    18eb:	06                   	push   es
    18ec:	00 00                	add    BYTE PTR [eax],al
    18ee:	06                   	push   es
    18ef:	43                   	inc    ebx
    18f0:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    18f1:	02 00                	add    al,BYTE PTR [eax]
    18f3:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    18f6:	d1 06                	rol    DWORD PTR [esi],1
    18f8:	00 00                	add    BYTE PTR [eax],al
    18fa:	06                   	push   es
    18fb:	44                   	inc    esp
    18fc:	d0 02                	rol    BYTE PTR [edx],1
    18fe:	00 00                	add    BYTE PTR [eax],al
    1900:	10 00                	adc    BYTE PTR [eax],al
    1902:	05 04 63 02 00       	add    eax,0x26304
    1907:	00 06                	add    BYTE PTR [esi],al
    1909:	14 02                	adc    al,0x2
    190b:	00 00                	add    BYTE PTR [eax],al
    190d:	04 db                	add    al,0xdb
    190f:	07                   	pop    es
    1910:	00 00                	add    BYTE PTR [eax],al
    1912:	06                   	push   es
    1913:	35 a7 01 00 00       	xor    eax,0x1a7
    1918:	05 04 a7 01 00       	add    eax,0x1a704
    191d:	00 0a                	add    BYTE PTR [edx],cl
    191f:	3a 00                	cmp    al,BYTE PTR [eax]
    1921:	00 00                	add    BYTE PTR [eax],al
    1923:	8d 02                	lea    eax,[edx]
    1925:	00 00                	add    BYTE PTR [eax],al
    1927:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    192a:	00 00                	add    BYTE PTR [eax],al
    192c:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    192f:	00 00                	add    BYTE PTR [eax],al
    1931:	00 05 04 79 02 00    	add    BYTE PTR ds:0x27904,al
    1937:	00 0a                	add    BYTE PTR [edx],cl
    1939:	3a 00                	cmp    al,BYTE PTR [eax]
    193b:	00 00                	add    BYTE PTR [eax],al
    193d:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    193e:	02 00                	add    al,BYTE PTR [eax]
    1940:	00 0b                	add    BYTE PTR [ebx],cl
    1942:	73 02                	jae    1946 <sysEnter_Vector-0x12e6ba>
    1944:	00 00                	add    BYTE PTR [eax],al
    1946:	0b 39                	or     edi,DWORD PTR [ecx]
    1948:	01 00                	add    DWORD PTR [eax],eax
    194a:	00 00                	add    BYTE PTR [eax],al
    194c:	05 04 93 02 00       	add    eax,0x29304
    1951:	00 0a                	add    BYTE PTR [edx],cl
    1953:	3a 00                	cmp    al,BYTE PTR [eax]
    1955:	00 00                	add    BYTE PTR [eax],al
    1957:	d0 02                	rol    BYTE PTR [edx],1
    1959:	00 00                	add    BYTE PTR [eax],al
    195b:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    195e:	00 00                	add    BYTE PTR [eax],al
    1960:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    1963:	00 00                	add    BYTE PTR [eax],al
    1965:	0b 73 02             	or     esi,DWORD PTR [ebx+0x2]
    1968:	00 00                	add    BYTE PTR [eax],al
    196a:	0b 6a 01             	or     ebp,DWORD PTR [edx+0x1]
    196d:	00 00                	add    BYTE PTR [eax],al
    196f:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    1972:	00 00                	add    BYTE PTR [eax],al
    1974:	00 05 04 ad 02 00    	add    BYTE PTR ds:0x2ad04,al
    197a:	00 04 a9             	add    BYTE PTR [ecx+ebp*4],al
    197d:	07                   	pop    es
    197e:	00 00                	add    BYTE PTR [eax],al
    1980:	06                   	push   es
    1981:	47                   	inc    edi
    1982:	e1 02                	loope  1986 <sysEnter_Vector-0x12e67a>
    1984:	00 00                	add    BYTE PTR [eax],al
    1986:	08 eb                	or     bl,ch
    1988:	07                   	pop    es
    1989:	00 00                	add    BYTE PTR [eax],al
    198b:	10 06                	adc    BYTE PTR [esi],al
    198d:	4f                   	dec    edi
    198e:	12 03                	adc    al,BYTE PTR [ebx]
    1990:	00 00                	add    BYTE PTR [eax],al
    1992:	09 1e                	or     DWORD PTR [esi],ebx
    1994:	08 00                	or     BYTE PTR [eax],al
    1996:	00 06                	add    BYTE PTR [esi],al
    1998:	51                   	push   ecx
    1999:	c0 00 00             	rol    BYTE PTR [eax],0x0
    199c:	00 00                	add    BYTE PTR [eax],al
    199e:	09 16                	or     DWORD PTR [esi],edx
    19a0:	08 00                	or     BYTE PTR [eax],al
    19a2:	00 06                	add    BYTE PTR [esi],al
    19a4:	52                   	push   edx
    19a5:	73 02                	jae    19a9 <sysEnter_Vector-0x12e657>
    19a7:	00 00                	add    BYTE PTR [eax],al
    19a9:	04 09                	add    al,0x9
    19ab:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    19ac:	07                   	pop    es
    19ad:	00 00                	add    BYTE PTR [eax],al
    19af:	06                   	push   es
    19b0:	53                   	push   ebx
    19b1:	12 03                	adc    al,BYTE PTR [ebx]
    19b3:	00 00                	add    BYTE PTR [eax],al
    19b5:	08 00                	or     BYTE PTR [eax],al
    19b7:	08 f2                	or     dl,dh
    19b9:	06                   	push   es
    19ba:	00 00                	add    BYTE PTR [eax],al
    19bc:	08 06                	or     BYTE PTR [esi],al
    19be:	49                   	dec    ecx
    19bf:	37                   	aaa    
    19c0:	03 00                	add    eax,DWORD PTR [eax]
    19c2:	00 09                	add    BYTE PTR [ecx],cl
    19c4:	ff 07                	inc    DWORD PTR [edi]
    19c6:	00 00                	add    BYTE PTR [eax],al
    19c8:	06                   	push   es
    19c9:	4b                   	dec    ebx
    19ca:	61                   	popa   
    19cb:	03 00                	add    eax,DWORD PTR [eax]
    19cd:	00 00                	add    BYTE PTR [eax],al
    19cf:	09 65 07             	or     DWORD PTR [ebp+0x7],esp
    19d2:	00 00                	add    BYTE PTR [eax],al
    19d4:	06                   	push   es
    19d5:	4c                   	dec    esp
    19d6:	85 03                	test   DWORD PTR [ebx],eax
    19d8:	00 00                	add    BYTE PTR [eax],al
    19da:	04 00                	add    al,0x0
    19dc:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    19df:	00 00                	add    BYTE PTR [eax],al
    19e1:	55                   	push   ebp
    19e2:	03 00                	add    eax,DWORD PTR [eax]
    19e4:	00 0b                	add    BYTE PTR [ebx],cl
    19e6:	55                   	push   ebp
    19e7:	03 00                	add    eax,DWORD PTR [eax]
    19e9:	00 0b                	add    BYTE PTR [ebx],cl
    19eb:	c0 00 00             	rol    BYTE PTR [eax],0x0
    19ee:	00 0b                	add    BYTE PTR [ebx],cl
    19f0:	7a 00                	jp     19f2 <sysEnter_Vector-0x12e60e>
    19f2:	00 00                	add    BYTE PTR [eax],al
    19f4:	0b 5b 03             	or     ebx,DWORD PTR [ebx+0x3]
    19f7:	00 00                	add    BYTE PTR [eax],al
    19f9:	00 05 04 e1 02 00    	add    BYTE PTR ds:0x2e104,al
    19ff:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    1a05:	00 05 04 37 03 00    	add    BYTE PTR ds:0x33704,al
    1a0b:	00 0a                	add    BYTE PTR [edx],cl
    1a0d:	7a 00                	jp     1a0f <sysEnter_Vector-0x12e5f1>
    1a0f:	00 00                	add    BYTE PTR [eax],al
    1a11:	85 03                	test   DWORD PTR [ebx],eax
    1a13:	00 00                	add    BYTE PTR [eax],al
    1a15:	0b 55 03             	or     edx,DWORD PTR [ebp+0x3]
    1a18:	00 00                	add    BYTE PTR [eax],al
    1a1a:	0b a5 00 00 00 0b    	or     esp,DWORD PTR [ebp+0xb000000]
    1a20:	7a 00                	jp     1a22 <sysEnter_Vector-0x12e5de>
    1a22:	00 00                	add    BYTE PTR [eax],al
    1a24:	0b 5b 03             	or     ebx,DWORD PTR [ebx+0x3]
    1a27:	00 00                	add    BYTE PTR [eax],al
    1a29:	00 05 04 67 03 00    	add    BYTE PTR ds:0x36704,al
    1a2f:	00 04 3e             	add    BYTE PTR [esi+edi*1],al
    1a32:	07                   	pop    es
    1a33:	00 00                	add    BYTE PTR [eax],al
    1a35:	06                   	push   es
    1a36:	4d                   	dec    ebp
    1a37:	12 03                	adc    al,BYTE PTR [ebx]
    1a39:	00 00                	add    BYTE PTR [eax],al
    1a3b:	0c 17                	or     al,0x17
    1a3d:	07                   	pop    es
    1a3e:	00 00                	add    BYTE PTR [eax],al
    1a40:	01 12                	add    DWORD PTR [edx],edx
    1a42:	7a 00                	jp     1a44 <sysEnter_Vector-0x12e5bc>
    1a44:	00 00                	add    BYTE PTR [eax],al
    1a46:	6c                   	ins    BYTE PTR es:[edi],dx
    1a47:	0e                   	push   cs
    1a48:	00 30                	add    BYTE PTR [eax],dh
    1a4a:	2c 00                	sub    al,0x0
    1a4c:	00 00                	add    BYTE PTR [eax],al
    1a4e:	01 9c e8 03 00 00 0d 	add    DWORD PTR [eax+ebp*8+0xd000003],ebx
    1a55:	6b 07 00             	imul   eax,DWORD PTR [edi],0x0
    1a58:	00 01                	add    BYTE PTR [ecx],al
    1a5a:	12 55 03             	adc    dl,BYTE PTR [ebp+0x3]
    1a5d:	00 00                	add    BYTE PTR [eax],al
    1a5f:	02 91 00 0d 2c 02    	add    dl,BYTE PTR [ecx+0x22c0d00]
    1a65:	00 00                	add    BYTE PTR [eax],al
    1a67:	01 12                	add    DWORD PTR [edx],edx
    1a69:	c0 00 00             	rol    BYTE PTR [eax],0x0
    1a6c:	00 02                	add    BYTE PTR [edx],al
    1a6e:	91                   	xchg   ecx,eax
    1a6f:	04 0d                	add    al,0xd
    1a71:	d3 03                	rol    DWORD PTR [ebx],cl
    1a73:	00 00                	add    BYTE PTR [eax],al
    1a75:	01 12                	add    DWORD PTR [edx],edx
    1a77:	7a 00                	jp     1a79 <sysEnter_Vector-0x12e587>
    1a79:	00 00                	add    BYTE PTR [eax],al
    1a7b:	02 91 08 0d b8 07    	add    dl,BYTE PTR [ecx+0x7b80d08]
    1a81:	00 00                	add    BYTE PTR [eax],al
    1a83:	01 12                	add    DWORD PTR [edx],edx
    1a85:	5b                   	pop    ebx
    1a86:	03 00                	add    eax,DWORD PTR [eax]
    1a88:	00 02                	add    BYTE PTR [edx],al
    1a8a:	91                   	xchg   ecx,eax
    1a8b:	0c 00                	or     al,0x0
    1a8d:	0c 70                	or     al,0x70
    1a8f:	07                   	pop    es
    1a90:	00 00                	add    BYTE PTR [eax],al
    1a92:	01 17                	add    DWORD PTR [edi],edx
    1a94:	7a 00                	jp     1a96 <sysEnter_Vector-0x12e56a>
    1a96:	00 00                	add    BYTE PTR [eax],al
    1a98:	98                   	cwde   
    1a99:	0e                   	push   cs
    1a9a:	00 30                	add    BYTE PTR [eax],dh
    1a9c:	26 00 00             	add    BYTE PTR es:[eax],al
    1a9f:	00 01                	add    BYTE PTR [ecx],al
    1aa1:	9c                   	pushf  
    1aa2:	3a 04 00             	cmp    al,BYTE PTR [eax+eax*1]
    1aa5:	00 0d 6b 07 00 00    	add    BYTE PTR ds:0x76b,cl
    1aab:	01 17                	add    DWORD PTR [edi],edx
    1aad:	55                   	push   ebp
    1aae:	03 00                	add    eax,DWORD PTR [eax]
    1ab0:	00 02                	add    BYTE PTR [edx],al
    1ab2:	91                   	xchg   ecx,eax
    1ab3:	00 0d 2c 02 00 00    	add    BYTE PTR ds:0x22c,cl
    1ab9:	01 17                	add    DWORD PTR [edi],edx
    1abb:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1abc:	00 00                	add    BYTE PTR [eax],al
    1abe:	00 02                	add    BYTE PTR [edx],al
    1ac0:	91                   	xchg   ecx,eax
    1ac1:	04 0d                	add    al,0xd
    1ac3:	d3 03                	rol    DWORD PTR [ebx],cl
    1ac5:	00 00                	add    BYTE PTR [eax],al
    1ac7:	01 17                	add    DWORD PTR [edi],edx
    1ac9:	7a 00                	jp     1acb <sysEnter_Vector-0x12e535>
    1acb:	00 00                	add    BYTE PTR [eax],al
    1acd:	02 91 08 0d b8 07    	add    dl,BYTE PTR [ecx+0x7b80d08]
    1ad3:	00 00                	add    BYTE PTR [eax],al
    1ad5:	01 17                	add    DWORD PTR [edi],edx
    1ad7:	5b                   	pop    ebx
    1ad8:	03 00                	add    eax,DWORD PTR [eax]
    1ada:	00 02                	add    BYTE PTR [edx],al
    1adc:	91                   	xchg   ecx,eax
    1add:	0c 00                	or     al,0x0
    1adf:	0e                   	push   cs
    1ae0:	5e                   	pop    esi
    1ae1:	07                   	pop    es
    1ae2:	00 00                	add    BYTE PTR [eax],al
    1ae4:	01 1c be             	add    DWORD PTR [esi+edi*4],ebx
    1ae7:	0e                   	push   cs
    1ae8:	00 30                	add    BYTE PTR [eax],dh
    1aea:	37                   	aaa    
    1aeb:	01 00                	add    DWORD PTR [eax],eax
    1aed:	00 01                	add    BYTE PTR [ecx],al
    1aef:	9c                   	pushf  
    1af0:	05 05 00 00 0f       	add    eax,0xf000005
    1af5:	72 6f                	jb     1b66 <sysEnter_Vector-0x12e49a>
    1af7:	77 00                	ja     1af9 <sysEnter_Vector-0x12e507>
    1af9:	01 1c 3a             	add    DWORD PTR [edx+edi*1],ebx
    1afc:	00 00                	add    BYTE PTR [eax],al
    1afe:	00 02                	add    BYTE PTR [edx],al
    1b00:	91                   	xchg   ecx,eax
    1b01:	00 0f                	add    BYTE PTR [edi],cl
    1b03:	63 6f 6c             	arpl   WORD PTR [edi+0x6c],bp
    1b06:	00 01                	add    BYTE PTR [ecx],al
    1b08:	1c 3a                	sbb    al,0x3a
    1b0a:	00 00                	add    BYTE PTR [eax],al
    1b0c:	00 02                	add    BYTE PTR [edx],al
    1b0e:	91                   	xchg   ecx,eax
    1b0f:	04 10                	add    al,0x10
    1b11:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    1b12:	06                   	push   es
    1b13:	00 00                	add    BYTE PTR [eax],al
    1b15:	01 1e                	add    DWORD PTR [esi],ebx
    1b17:	05 05 00 00 02       	add    eax,0x2000005
    1b1c:	91                   	xchg   ecx,eax
    1b1d:	56                   	push   esi
    1b1e:	10 25 08 00 00 01    	adc    BYTE PTR ds:0x1000008,ah
    1b24:	1f                   	pop    ds
    1b25:	15 05 00 00 02       	adc    eax,0x2000005
    1b2a:	91                   	xchg   ecx,eax
    1b2b:	53                   	push   ebx
    1b2c:	10 8c 06 00 00 01 1f 	adc    BYTE PTR [esi+eax*1+0x1f010000],cl
    1b33:	15 05 00 00 02       	adc    eax,0x2000005
    1b38:	91                   	xchg   ecx,eax
    1b39:	50                   	push   eax
    1b3a:	10 50 07             	adc    BYTE PTR [eax+0x7],dl
    1b3d:	00 00                	add    BYTE PTR [eax],al
    1b3f:	01 20                	add    DWORD PTR [eax],esp
    1b41:	3a 00                	cmp    al,BYTE PTR [eax]
    1b43:	00 00                	add    BYTE PTR [eax],al
    1b45:	02 91 6c 11 3b 06    	add    dl,BYTE PTR [ecx+0x63b116c]
    1b4b:	00 00                	add    BYTE PTR [eax],al
    1b4d:	01 23                	add    DWORD PTR [ebx],esp
    1b4f:	3a 00                	cmp    al,BYTE PTR [eax]
    1b51:	00 00                	add    BYTE PTR [eax],al
    1b53:	b4 04                	mov    ah,0x4
    1b55:	00 00                	add    BYTE PTR [eax],al
    1b57:	12 00                	adc    al,BYTE PTR [eax]
    1b59:	13 2a                	adc    ebp,DWORD PTR [edx]
    1b5b:	0f 00                	(bad)  
    1b5d:	30 3d 00 00 00 d0    	xor    BYTE PTR ds:0xd0000000,bh
    1b63:	04 00                	add    al,0x0
    1b65:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    1b68:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b69:	74 00                	je     1b6b <sysEnter_Vector-0x12e495>
    1b6b:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    1b71:	02 91 68 00 13 75    	add    dl,BYTE PTR [ecx+0x75130068]
    1b77:	0f 00                	(bad)  
    1b79:	30 3d 00 00 00 ec    	xor    BYTE PTR ds:0xec000000,bh
    1b7f:	04 00                	add    al,0x0
    1b81:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    1b84:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b85:	74 00                	je     1b87 <sysEnter_Vector-0x12e479>
    1b87:	01 33                	add    DWORD PTR [ebx],esi
    1b89:	3a 00                	cmp    al,BYTE PTR [eax]
    1b8b:	00 00                	add    BYTE PTR [eax],al
    1b8d:	02 91 64 00 15 c0    	add    dl,BYTE PTR [ecx-0x3feaff9c]
    1b93:	0f 00                	(bad)  
    1b95:	30 20                	xor    BYTE PTR [eax],ah
    1b97:	00 00                	add    BYTE PTR [eax],al
    1b99:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    1b9c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b9d:	74 00                	je     1b9f <sysEnter_Vector-0x12e461>
    1b9f:	01 39                	add    DWORD PTR [ecx],edi
    1ba1:	3a 00                	cmp    al,BYTE PTR [eax]
    1ba3:	00 00                	add    BYTE PTR [eax],al
    1ba5:	02 91 60 00 00 16    	add    dl,BYTE PTR [ecx+0x16000060]
    1bab:	25 00 00 00 15       	and    eax,0x15000000
    1bb0:	05 00 00 17 b7       	add    eax,0xb7170000
    1bb5:	00 00                	add    BYTE PTR [eax],al
    1bb7:	00 09                	add    BYTE PTR [ecx],cl
    1bb9:	00 16                	add    BYTE PTR [esi],dl
    1bbb:	25 00 00 00 25       	and    eax,0x25000000
    1bc0:	05 00 00 17 b7       	add    eax,0xb7170000
    1bc5:	00 00                	add    BYTE PTR [eax],al
    1bc7:	00 02                	add    BYTE PTR [edx],al
    1bc9:	00 18                	add    BYTE PTR [eax],bl
    1bcb:	04 08                	add    al,0x8
    1bcd:	00 00                	add    BYTE PTR [eax],al
    1bcf:	01 42 f5             	add    DWORD PTR [edx-0xb],eax
    1bd2:	0f 00                	(bad)  
    1bd4:	30 84 00 00 00 01 9c 	xor    BYTE PTR [eax+eax*1-0x63ff0000],al
    1bdb:	64                   	fs
    1bdc:	05 00 00 10 a7       	add    eax,0xa7100000
    1be1:	06                   	push   es
    1be2:	00 00                	add    BYTE PTR [eax],al
    1be4:	01 44 64 05          	add    DWORD PTR [esp+eiz*2+0x5],eax
    1be8:	00 00                	add    BYTE PTR [eax],al
    1bea:	02 91 67 10 50 07    	add    dl,BYTE PTR [ecx+0x7501067]
    1bf0:	00 00                	add    BYTE PTR [eax],al
    1bf2:	01 45 3a             	add    DWORD PTR [ebp+0x3a],eax
    1bf5:	00 00                	add    BYTE PTR [eax],al
    1bf7:	00 02                	add    BYTE PTR [edx],al
    1bf9:	91                   	xchg   ecx,eax
    1bfa:	6c                   	ins    BYTE PTR es:[edi],dx
    1bfb:	19 3b                	sbb    DWORD PTR [ebx],edi
    1bfd:	06                   	push   es
    1bfe:	00 00                	add    BYTE PTR [eax],al
    1c00:	01 23                	add    DWORD PTR [ebx],esp
    1c02:	3a 00                	cmp    al,BYTE PTR [eax]
    1c04:	00 00                	add    BYTE PTR [eax],al
    1c06:	12 00                	adc    al,BYTE PTR [eax]
    1c08:	00 16                	add    BYTE PTR [esi],dl
    1c0a:	25 00 00 00 74       	and    eax,0x74000000
    1c0f:	05 00 00 17 b7       	add    eax,0xb7170000
    1c14:	00 00                	add    BYTE PTR [eax],al
    1c16:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1c19:	1a 9d 07 00 00 01    	sbb    bl,BYTE PTR [ebp+0x1000007]
    1c1f:	54                   	push   esp
    1c20:	79 10                	jns    1c32 <sysEnter_Vector-0x12e3ce>
    1c22:	00 30                	add    BYTE PTR [eax],dh
    1c24:	53                   	push   ebx
    1c25:	00 00                	add    BYTE PTR [eax],al
    1c27:	00 01                	add    BYTE PTR [ecx],al
    1c29:	9c                   	pushf  
    1c2a:	1b 3f                	sbb    edi,DWORD PTR [edi]
    1c2c:	00 00                	add    BYTE PTR [eax],al
    1c2e:	00 07                	add    BYTE PTR [edi],al
    1c30:	34 56                	xor    al,0x56
    1c32:	00 00                	add    BYTE PTR [eax],al
    1c34:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    1c3a:	30 1b                	xor    BYTE PTR [ebx],bl
    1c3c:	aa                   	stos   BYTE PTR es:[edi],al
    1c3d:	00 00                	add    BYTE PTR [eax],al
    1c3f:	00 07                	add    BYTE PTR [edi],al
    1c41:	35 56 00 00 00       	xor    eax,0x56
    1c46:	05 03 b0 3b 00       	add    eax,0x3bb003
    1c4b:	30 1b                	xor    BYTE PTR [ebx],bl
    1c4d:	56                   	push   esi
    1c4e:	01 00                	add    DWORD PTR [eax],eax
    1c50:	00 07                	add    BYTE PTR [edi],al
    1c52:	36                   	ss
    1c53:	56                   	push   esi
    1c54:	00 00                	add    BYTE PTR [eax],al
    1c56:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    1c5c:	30 1b                	xor    BYTE PTR [ebx],bl
    1c5e:	48                   	dec    eax
    1c5f:	00 00                	add    BYTE PTR [eax],al
    1c61:	00 08                	add    BYTE PTR [eax],cl
    1c63:	3b 9a 00 00 00 05    	cmp    ebx,DWORD PTR [edx+0x5000000]
    1c69:	03 b4 3b 00 30 1b a4 	add    esi,DWORD PTR [ebx+edi*1-0x5be4d000]
    1c70:	07                   	pop    es
    1c71:	00 00                	add    BYTE PTR [eax],al
    1c73:	01 0e                	add    DWORD PTR [esi],ecx
    1c75:	8b 03                	mov    eax,DWORD PTR [ebx]
    1c77:	00 00                	add    BYTE PTR [eax],al
    1c79:	05 03 c0 3b 00       	add    eax,0x3bc003
    1c7e:	30 1b                	xor    BYTE PTR [ebx],bl
    1c80:	ce                   	into   
    1c81:	07                   	pop    es
    1c82:	00 00                	add    BYTE PTR [eax],al
    1c84:	01 0f                	add    DWORD PTR [edi],ecx
    1c86:	68 02 00 00 05       	push   0x5000002
    1c8b:	03 00                	add    eax,DWORD PTR [eax]
    1c8d:	3a 00                	cmp    al,BYTE PTR [eax]
    1c8f:	30 1b                	xor    BYTE PTR [ebx],bl
    1c91:	e3 07                	jecxz  1c9a <sysEnter_Vector-0x12e366>
    1c93:	00 00                	add    BYTE PTR [eax],al
    1c95:	01 10                	add    DWORD PTR [eax],edx
    1c97:	d6                   	(bad)  
    1c98:	02 00                	add    al,BYTE PTR [eax]
    1c9a:	00 05 03 c8 3b 00    	add    BYTE PTR ds:0x3bc803,al
    1ca0:	30 00                	xor    BYTE PTR [eax],al
    1ca2:	ae                   	scas   al,BYTE PTR es:[edi]
    1ca3:	01 00                	add    DWORD PTR [eax],eax
    1ca5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1ca8:	01 0a                	add    DWORD PTR [edx],ecx
    1caa:	00 00                	add    BYTE PTR [eax],al
    1cac:	04 01                	add    al,0x1
    1cae:	ef                   	out    dx,eax
    1caf:	00 00                	add    BYTE PTR [eax],al
    1cb1:	00 0c 51             	add    BYTE PTR [ecx+edx*2],cl
    1cb4:	08 00                	or     BYTE PTR [eax],al
    1cb6:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    1cb9:	00 00                	add    BYTE PTR [eax],al
    1cbb:	cc                   	int3   
    1cbc:	10 00                	adc    BYTE PTR [eax],al
    1cbe:	30 eb                	xor    bl,ch
    1cc0:	00 00                	add    BYTE PTR [eax],al
    1cc2:	00 ad 0b 00 00 02    	add    BYTE PTR [ebp+0x200000b],ch
    1cc8:	01 06                	add    DWORD PTR [esi],eax
    1cca:	58                   	pop    eax
    1ccb:	00 00                	add    BYTE PTR [eax],al
    1ccd:	00 02                	add    BYTE PTR [edx],al
    1ccf:	01 06                	add    DWORD PTR [esi],eax
    1cd1:	51                   	push   ecx
    1cd2:	00 00                	add    BYTE PTR [eax],al
    1cd4:	00 02                	add    BYTE PTR [edx],al
    1cd6:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    1cdc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1ce3:	02 08                	add    cl,BYTE PTR [eax]
    1ce5:	05 00 00 00 00       	add    eax,0x0
    1cea:	02 01                	add    al,BYTE PTR [ecx]
    1cec:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    1cef:	00 00                	add    BYTE PTR [eax],al
    1cf1:	02 02                	add    al,BYTE PTR [edx]
    1cf3:	07                   	pop    es
    1cf4:	0e                   	push   cs
    1cf5:	00 00                	add    BYTE PTR [eax],al
    1cf7:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    1cfa:	00 00                	add    BYTE PTR [eax],al
    1cfc:	00 02                	add    BYTE PTR [edx],al
    1cfe:	34 61                	xor    al,0x61
    1d00:	00 00                	add    BYTE PTR [eax],al
    1d02:	00 02                	add    BYTE PTR [edx],al
    1d04:	04 07                	add    al,0x7
    1d06:	32 00                	xor    al,BYTE PTR [eax]
    1d08:	00 00                	add    BYTE PTR [eax],al
    1d0a:	02 08                	add    cl,BYTE PTR [eax]
    1d0c:	07                   	pop    es
    1d0d:	28 00                	sub    BYTE PTR [eax],al
    1d0f:	00 00                	add    BYTE PTR [eax],al
    1d11:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1d18:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1d1b:	96                   	xchg   esi,eax
    1d1c:	00 00                	add    BYTE PTR [eax],al
    1d1e:	00 02                	add    BYTE PTR [edx],al
    1d20:	01 02                	add    DWORD PTR [edx],eax
    1d22:	90                   	nop
    1d23:	00 00                	add    BYTE PTR [eax],al
    1d25:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    1d2c:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    1d2f:	00 00                	add    BYTE PTR [eax],al
    1d31:	05 04 95 00 00       	add    eax,0x9504
    1d36:	00 06                	add    BYTE PTR [esi],al
    1d38:	25 00 00 00 02       	and    eax,0x2000000
    1d3d:	04 07                	add    al,0x7
    1d3f:	2d 00 00 00 02       	sub    eax,0x2000000
    1d44:	04 07                	add    al,0x7
    1d46:	dc 00                	fadd   QWORD PTR [eax]
    1d48:	00 00                	add    BYTE PTR [eax],al
    1d4a:	05 04 25 00 00       	add    eax,0x2504
    1d4f:	00 07                	add    BYTE PTR [edi],al
    1d51:	4a                   	dec    edx
    1d52:	08 00                	or     BYTE PTR [eax],al
    1d54:	00 01                	add    BYTE PTR [ecx],al
    1d56:	1d a8 00 00 00       	sbb    eax,0xa8
    1d5b:	cc                   	int3   
    1d5c:	10 00                	adc    BYTE PTR [eax],al
    1d5e:	30 3e                	xor    BYTE PTR [esi],bh
    1d60:	00 00                	add    BYTE PTR [eax],al
    1d62:	00 01                	add    BYTE PTR [ecx],al
    1d64:	9c                   	pushf  
    1d65:	f1                   	icebp  
    1d66:	00 00                	add    BYTE PTR [eax],al
    1d68:	00 08                	add    BYTE PTR [eax],cl
    1d6a:	11 06                	adc    DWORD PTR [esi],eax
    1d6c:	00 00                	add    BYTE PTR [eax],al
    1d6e:	01 1d a8 00 00 00    	add    DWORD PTR ds:0xa8,ebx
    1d74:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    1d7a:	63 00                	arpl   WORD PTR [eax],ax
    1d7c:	01 1d 8f 00 00 00    	add    DWORD PTR ds:0x8f,ebx
    1d82:	02 91 04 0a f2 01    	add    dl,BYTE PTR [ecx+0x1f20a04]
    1d88:	00 00                	add    BYTE PTR [eax],al
    1d8a:	01 1f                	add    DWORD PTR [edi],ebx
    1d8c:	3a 00                	cmp    al,BYTE PTR [eax]
    1d8e:	00 00                	add    BYTE PTR [eax],al
    1d90:	0b 00                	or     eax,DWORD PTR [eax]
    1d92:	00 07                	add    BYTE PTR [edi],al
    1d94:	42                   	inc    edx
    1d95:	08 00                	or     BYTE PTR [eax],al
    1d97:	00 01                	add    BYTE PTR [ecx],al
    1d99:	23 a8 00 00 00 0a    	and    ebp,DWORD PTR [eax+0xa000000]
    1d9f:	11 00                	adc    DWORD PTR [eax],eax
    1da1:	30 3e                	xor    BYTE PTR [esi],bh
    1da3:	00 00                	add    BYTE PTR [eax],al
    1da5:	00 01                	add    BYTE PTR [ecx],al
    1da7:	9c                   	pushf  
    1da8:	27                   	daa    
    1da9:	01 00                	add    DWORD PTR [eax],eax
    1dab:	00 08                	add    BYTE PTR [eax],cl
    1dad:	11 06                	adc    DWORD PTR [esi],eax
    1daf:	00 00                	add    BYTE PTR [eax],al
    1db1:	01 23                	add    DWORD PTR [ebx],esp
    1db3:	a8 00                	test   al,0x0
    1db5:	00 00                	add    BYTE PTR [eax],al
    1db7:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    1dbd:	63 00                	arpl   WORD PTR [eax],ax
    1dbf:	01 23                	add    DWORD PTR [ebx],esp
    1dc1:	8f 00                	pop    DWORD PTR [eax]
    1dc3:	00 00                	add    BYTE PTR [eax],al
    1dc5:	02 91 04 00 0c 36    	add    dl,BYTE PTR [ecx+0x360c0004]
    1dcb:	08 00                	or     BYTE PTR [eax],al
    1dcd:	00 01                	add    BYTE PTR [ecx],al
    1dcf:	29 48 11             	sub    DWORD PTR [eax+0x11],ecx
    1dd2:	00 30                	add    BYTE PTR [eax],dh
    1dd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1dd5:	00 00                	add    BYTE PTR [eax],al
    1dd7:	00 01                	add    BYTE PTR [ecx],al
    1dd9:	9c                   	pushf  
    1dda:	6d                   	ins    DWORD PTR es:[edi],dx
    1ddb:	01 00                	add    DWORD PTR [eax],eax
    1ddd:	00 09                	add    BYTE PTR [ecx],cl
    1ddf:	70 00                	jo     1de1 <sysEnter_Vector-0x12e21f>
    1de1:	01 29                	add    DWORD PTR [ecx],ebp
    1de3:	a8 00                	test   al,0x0
    1de5:	00 00                	add    BYTE PTR [eax],al
    1de7:	02 91 00 09 71 00    	add    dl,BYTE PTR [ecx+0x710900]
    1ded:	01 29                	add    DWORD PTR [ecx],ebp
    1def:	a8 00                	test   al,0x0
    1df1:	00 00                	add    BYTE PTR [eax],al
    1df3:	02 91 04 0d 63 00    	add    dl,BYTE PTR [ecx+0x630d04]
    1df9:	01 2a                	add    DWORD PTR [edx],ebp
    1dfb:	3a 00                	cmp    al,BYTE PTR [eax]
    1dfd:	00 00                	add    BYTE PTR [eax],al
    1dff:	02 91 74 0d 64 00    	add    dl,BYTE PTR [ecx+0x640d74]
    1e05:	01 2a                	add    DWORD PTR [edx],ebp
    1e07:	3a 00                	cmp    al,BYTE PTR [eax]
    1e09:	00 00                	add    BYTE PTR [eax],al
    1e0b:	02 91 70 00 0e 3f    	add    dl,BYTE PTR [ecx+0x3f0e0070]
    1e11:	00 00                	add    BYTE PTR [eax],al
    1e13:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1e16:	56                   	push   esi
    1e17:	00 00                	add    BYTE PTR [eax],al
    1e19:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    1e1f:	30 0e                	xor    BYTE PTR [esi],cl
    1e21:	aa                   	stos   BYTE PTR es:[edi],al
    1e22:	00 00                	add    BYTE PTR [eax],al
    1e24:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    1e2b:	05 03 b0 3b 00       	add    eax,0x3bb003
    1e30:	30 0e                	xor    BYTE PTR [esi],cl
    1e32:	56                   	push   esi
    1e33:	01 00                	add    DWORD PTR [eax],eax
    1e35:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1e38:	56                   	push   esi
    1e39:	00 00                	add    BYTE PTR [eax],al
    1e3b:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    1e41:	30 0e                	xor    BYTE PTR [esi],cl
    1e43:	48                   	dec    eax
    1e44:	00 00                	add    BYTE PTR [eax],al
    1e46:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
    1e4c:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    1e52:	30 00                	xor    BYTE PTR [eax],al
    1e54:	5a                   	pop    edx
    1e55:	01 00                	add    DWORD PTR [eax],eax
    1e57:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1e5a:	d2 0a                	ror    BYTE PTR [edx],cl
    1e5c:	00 00                	add    BYTE PTR [eax],al
    1e5e:	04 01                	add    al,0x1
    1e60:	ef                   	out    dx,eax
    1e61:	00 00                	add    BYTE PTR [eax],al
    1e63:	00 0c 6d 08 00 00 6d 	add    BYTE PTR [ebp*2+0x6d000008],cl
    1e6a:	00 00                	add    BYTE PTR [eax],al
    1e6c:	00 b8 11 00 30 5e    	add    BYTE PTR [eax+0x5e300011],bh
    1e72:	00 00                	add    BYTE PTR [eax],al
    1e74:	00 87 0c 00 00 02    	add    BYTE PTR [edi+0x200000c],al
    1e7a:	01 06                	add    DWORD PTR [esi],eax
    1e7c:	58                   	pop    eax
    1e7d:	00 00                	add    BYTE PTR [eax],al
    1e7f:	00 02                	add    BYTE PTR [edx],al
    1e81:	01 06                	add    DWORD PTR [esi],eax
    1e83:	51                   	push   ecx
    1e84:	00 00                	add    BYTE PTR [eax],al
    1e86:	00 02                	add    BYTE PTR [edx],al
    1e88:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    1e8e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1e95:	02 08                	add    cl,BYTE PTR [eax]
    1e97:	05 00 00 00 00       	add    eax,0x0
    1e9c:	02 01                	add    al,BYTE PTR [ecx]
    1e9e:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    1ea1:	00 00                	add    BYTE PTR [eax],al
    1ea3:	02 02                	add    al,BYTE PTR [edx]
    1ea5:	07                   	pop    es
    1ea6:	0e                   	push   cs
    1ea7:	00 00                	add    BYTE PTR [eax],al
    1ea9:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    1eac:	00 00                	add    BYTE PTR [eax],al
    1eae:	00 02                	add    BYTE PTR [edx],al
    1eb0:	34 61                	xor    al,0x61
    1eb2:	00 00                	add    BYTE PTR [eax],al
    1eb4:	00 02                	add    BYTE PTR [edx],al
    1eb6:	04 07                	add    al,0x7
    1eb8:	32 00                	xor    al,BYTE PTR [eax]
    1eba:	00 00                	add    BYTE PTR [eax],al
    1ebc:	02 08                	add    cl,BYTE PTR [eax]
    1ebe:	07                   	pop    es
    1ebf:	28 00                	sub    BYTE PTR [eax],al
    1ec1:	00 00                	add    BYTE PTR [eax],al
    1ec3:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1eca:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1ecd:	96                   	xchg   esi,eax
    1ece:	00 00                	add    BYTE PTR [eax],al
    1ed0:	00 02                	add    BYTE PTR [edx],al
    1ed2:	01 02                	add    DWORD PTR [edx],eax
    1ed4:	90                   	nop
    1ed5:	00 00                	add    BYTE PTR [eax],al
    1ed7:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    1ede:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    1ee1:	00 00                	add    BYTE PTR [eax],al
    1ee3:	05 04 95 00 00       	add    eax,0x9504
    1ee8:	00 06                	add    BYTE PTR [esi],al
    1eea:	25 00 00 00 02       	and    eax,0x2000000
    1eef:	04 07                	add    al,0x7
    1ef1:	2d 00 00 00 02       	sub    eax,0x2000000
    1ef6:	04 07                	add    al,0x7
    1ef8:	dc 00                	fadd   QWORD PTR [eax]
    1efa:	00 00                	add    BYTE PTR [eax],al
    1efc:	07                   	pop    es
    1efd:	66                   	data16
    1efe:	08 00                	or     BYTE PTR [eax],al
    1f00:	00 01                	add    BYTE PTR [ecx],al
    1f02:	18 3a                	sbb    BYTE PTR [edx],bh
    1f04:	00 00                	add    BYTE PTR [eax],al
    1f06:	00 b8 11 00 30 5e    	add    BYTE PTR [eax+0x5e300011],bh
    1f0c:	00 00                	add    BYTE PTR [eax],al
    1f0e:	00 01                	add    BYTE PTR [ecx],al
    1f10:	9c                   	pushf  
    1f11:	0e                   	push   cs
    1f12:	01 00                	add    DWORD PTR [eax],eax
    1f14:	00 08                	add    BYTE PTR [eax],cl
    1f16:	70 31                	jo     1f49 <sysEnter_Vector-0x12e0b7>
    1f18:	00 01                	add    BYTE PTR [ecx],al
    1f1a:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    1f20:	91                   	xchg   ecx,eax
    1f21:	00 08                	add    BYTE PTR [eax],cl
    1f23:	70 32                	jo     1f57 <sysEnter_Vector-0x12e0a9>
    1f25:	00 01                	add    BYTE PTR [ecx],al
    1f27:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    1f2d:	91                   	xchg   ecx,eax
    1f2e:	04 09                	add    al,0x9
    1f30:	73 31                	jae    1f63 <sysEnter_Vector-0x12e09d>
    1f32:	00 01                	add    BYTE PTR [ecx],al
    1f34:	1a 0e                	sbb    cl,BYTE PTR [esi]
    1f36:	01 00                	add    DWORD PTR [eax],eax
    1f38:	00 01                	add    BYTE PTR [ecx],al
    1f3a:	53                   	push   ebx
    1f3b:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    1f3e:	00 01                	add    BYTE PTR [ecx],al
    1f40:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1f42:	01 00                	add    DWORD PTR [eax],eax
    1f44:	00 01                	add    BYTE PTR [ecx],al
    1f46:	56                   	push   esi
    1f47:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    1f4a:	00 01                	add    BYTE PTR [ecx],al
    1f4c:	1c 48                	sbb    al,0x48
    1f4e:	00 00                	add    BYTE PTR [eax],al
    1f50:	00 02                	add    BYTE PTR [edx],al
    1f52:	91                   	xchg   ecx,eax
    1f53:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f54:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    1f57:	00 01                	add    BYTE PTR [ecx],al
    1f59:	1c 48                	sbb    al,0x48
    1f5b:	00 00                	add    BYTE PTR [eax],al
    1f5d:	00 02                	add    BYTE PTR [edx],al
    1f5f:	91                   	xchg   ecx,eax
    1f60:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1f61:	00 05 04 14 01 00    	add    BYTE PTR ds:0x11404,al
    1f67:	00 06                	add    BYTE PTR [esi],al
    1f69:	48                   	dec    eax
    1f6a:	00 00                	add    BYTE PTR [eax],al
    1f6c:	00 0a                	add    BYTE PTR [edx],cl
    1f6e:	3f                   	aas    
    1f6f:	00 00                	add    BYTE PTR [eax],al
    1f71:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1f74:	56                   	push   esi
    1f75:	00 00                	add    BYTE PTR [eax],al
    1f77:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    1f7d:	30 0a                	xor    BYTE PTR [edx],cl
    1f7f:	aa                   	stos   BYTE PTR es:[edi],al
    1f80:	00 00                	add    BYTE PTR [eax],al
    1f82:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    1f89:	05 03 b0 3b 00       	add    eax,0x3bb003
    1f8e:	30 0a                	xor    BYTE PTR [edx],cl
    1f90:	56                   	push   esi
    1f91:	01 00                	add    DWORD PTR [eax],eax
    1f93:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1f96:	56                   	push   esi
    1f97:	00 00                	add    BYTE PTR [eax],al
    1f99:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    1f9f:	30 0a                	xor    BYTE PTR [edx],cl
    1fa1:	48                   	dec    eax
    1fa2:	00 00                	add    BYTE PTR [eax],al
    1fa4:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
    1faa:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    1fb0:	30 00                	xor    BYTE PTR [eax],al
    1fb2:	bd 01 00 00 04       	mov    ebp,0x4000001
    1fb7:	00 64 0b 00          	add    BYTE PTR [ebx+ecx*1+0x0],ah
    1fbb:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1fbe:	ef                   	out    dx,eax
    1fbf:	00 00                	add    BYTE PTR [eax],al
    1fc1:	00 0c 9f             	add    BYTE PTR [edi+ebx*4],cl
    1fc4:	08 00                	or     BYTE PTR [eax],al
    1fc6:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    1fc9:	00 00                	add    BYTE PTR [eax],al
    1fcb:	18 12                	sbb    BYTE PTR [edx],dl
    1fcd:	00 30                	add    BYTE PTR [eax],dh
    1fcf:	c7 00 00 00 50 0d    	mov    DWORD PTR [eax],0xd500000
    1fd5:	00 00                	add    BYTE PTR [eax],al
    1fd7:	02 01                	add    al,BYTE PTR [ecx]
    1fd9:	06                   	push   es
    1fda:	58                   	pop    eax
    1fdb:	00 00                	add    BYTE PTR [eax],al
    1fdd:	00 02                	add    BYTE PTR [edx],al
    1fdf:	01 06                	add    DWORD PTR [esi],eax
    1fe1:	51                   	push   ecx
    1fe2:	00 00                	add    BYTE PTR [eax],al
    1fe4:	00 02                	add    BYTE PTR [edx],al
    1fe6:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    1fec:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1ff3:	02 08                	add    cl,BYTE PTR [eax]
    1ff5:	05 00 00 00 00       	add    eax,0x0
    1ffa:	02 01                	add    al,BYTE PTR [ecx]
    1ffc:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    1fff:	00 00                	add    BYTE PTR [eax],al
    2001:	02 02                	add    al,BYTE PTR [edx]
    2003:	07                   	pop    es
    2004:	0e                   	push   cs
    2005:	00 00                	add    BYTE PTR [eax],al
    2007:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    200a:	00 00                	add    BYTE PTR [eax],al
    200c:	00 02                	add    BYTE PTR [edx],al
    200e:	34 61                	xor    al,0x61
    2010:	00 00                	add    BYTE PTR [eax],al
    2012:	00 02                	add    BYTE PTR [edx],al
    2014:	04 07                	add    al,0x7
    2016:	32 00                	xor    al,BYTE PTR [eax]
    2018:	00 00                	add    BYTE PTR [eax],al
    201a:	02 08                	add    cl,BYTE PTR [eax]
    201c:	07                   	pop    es
    201d:	28 00                	sub    BYTE PTR [eax],al
    201f:	00 00                	add    BYTE PTR [eax],al
    2021:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2028:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    202b:	96                   	xchg   esi,eax
    202c:	00 00                	add    BYTE PTR [eax],al
    202e:	00 02                	add    BYTE PTR [edx],al
    2030:	01 02                	add    DWORD PTR [edx],eax
    2032:	90                   	nop
    2033:	00 00                	add    BYTE PTR [eax],al
    2035:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    203c:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    203f:	00 00                	add    BYTE PTR [eax],al
    2041:	05 04 95 00 00       	add    eax,0x9504
    2046:	00 06                	add    BYTE PTR [esi],al
    2048:	25 00 00 00 02       	and    eax,0x2000000
    204d:	04 07                	add    al,0x7
    204f:	2d 00 00 00 02       	sub    eax,0x2000000
    2054:	04 07                	add    al,0x7
    2056:	dc 00                	fadd   QWORD PTR [eax]
    2058:	00 00                	add    BYTE PTR [eax],al
    205a:	05 04 25 00 00       	add    eax,0x2504
    205f:	00 07                	add    BYTE PTR [edi],al
    2061:	82                   	(bad)  
    2062:	08 00                	or     BYTE PTR [eax],al
    2064:	00 01                	add    BYTE PTR [ecx],al
    2066:	04 a8                	add    al,0xa8
    2068:	00 00                	add    BYTE PTR [eax],al
    206a:	00 18                	add    BYTE PTR [eax],bl
    206c:	12 00                	adc    al,BYTE PTR [eax]
    206e:	30 40 00             	xor    BYTE PTR [eax+0x0],al
    2071:	00 00                	add    BYTE PTR [eax],al
    2073:	01 9c ee 00 00 00 08 	add    DWORD PTR [esi+ebp*8+0x8000000],ebx
    207a:	73 31                	jae    20ad <sysEnter_Vector-0x12df53>
    207c:	00 01                	add    BYTE PTR [ecx],al
    207e:	04 a8                	add    al,0xa8
    2080:	00 00                	add    BYTE PTR [eax],al
    2082:	00 02                	add    BYTE PTR [edx],al
    2084:	91                   	xchg   ecx,eax
    2085:	00 08                	add    BYTE PTR [eax],cl
    2087:	73 32                	jae    20bb <sysEnter_Vector-0x12df45>
    2089:	00 01                	add    BYTE PTR [ecx],al
    208b:	04 8f                	add    al,0x8f
    208d:	00 00                	add    BYTE PTR [eax],al
    208f:	00 02                	add    BYTE PTR [edx],al
    2091:	91                   	xchg   ecx,eax
    2092:	04 09                	add    al,0x9
    2094:	73 00                	jae    2096 <sysEnter_Vector-0x12df6a>
    2096:	01 06                	add    DWORD PTR [esi],eax
    2098:	a8 00                	test   al,0x0
    209a:	00 00                	add    BYTE PTR [eax],al
    209c:	02 91 74 00 07 97    	add    dl,BYTE PTR [ecx-0x68f8ff8c]
    20a2:	08 00                	or     BYTE PTR [eax],al
    20a4:	00 01                	add    BYTE PTR [ecx],al
    20a6:	0e                   	push   cs
    20a7:	a8 00                	test   al,0x0
    20a9:	00 00                	add    BYTE PTR [eax],al
    20ab:	58                   	pop    eax
    20ac:	12 00                	adc    al,BYTE PTR [eax]
    20ae:	30 40 00             	xor    BYTE PTR [eax+0x0],al
    20b1:	00 00                	add    BYTE PTR [eax],al
    20b3:	01 9c 2e 01 00 00 08 	add    DWORD PTR [esi+ebp*1+0x8000001],ebx
    20ba:	73 31                	jae    20ed <sysEnter_Vector-0x12df13>
    20bc:	00 01                	add    BYTE PTR [ecx],al
    20be:	0e                   	push   cs
    20bf:	a8 00                	test   al,0x0
    20c1:	00 00                	add    BYTE PTR [eax],al
    20c3:	02 91 00 08 73 32    	add    dl,BYTE PTR [ecx+0x32730800]
    20c9:	00 01                	add    BYTE PTR [ecx],al
    20cb:	0e                   	push   cs
    20cc:	8f 00                	pop    DWORD PTR [eax]
    20ce:	00 00                	add    BYTE PTR [eax],al
    20d0:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    20d6:	01 10                	add    DWORD PTR [eax],edx
    20d8:	a8 00                	test   al,0x0
    20da:	00 00                	add    BYTE PTR [eax],al
    20dc:	02 91 74 00 07 8f    	add    dl,BYTE PTR [ecx-0x70f8ff8c]
    20e2:	08 00                	or     BYTE PTR [eax],al
    20e4:	00 01                	add    BYTE PTR [ecx],al
    20e6:	18 a8 00 00 00 98    	sbb    BYTE PTR [eax-0x68000000],ch
    20ec:	12 00                	adc    al,BYTE PTR [eax]
    20ee:	30 47 00             	xor    BYTE PTR [edi+0x0],al
    20f1:	00 00                	add    BYTE PTR [eax],al
    20f3:	01 9c 7c 01 00 00 08 	add    DWORD PTR [esp+edi*2+0x8000001],ebx
    20fa:	73 31                	jae    212d <sysEnter_Vector-0x12ded3>
    20fc:	00 01                	add    BYTE PTR [ecx],al
    20fe:	18 a8 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],ch
    2104:	91                   	xchg   ecx,eax
    2105:	00 08                	add    BYTE PTR [eax],cl
    2107:	73 32                	jae    213b <sysEnter_Vector-0x12dec5>
    2109:	00 01                	add    BYTE PTR [ecx],al
    210b:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    2111:	91                   	xchg   ecx,eax
    2112:	04 0a                	add    al,0xa
    2114:	89 08                	mov    DWORD PTR [eax],ecx
    2116:	00 00                	add    BYTE PTR [eax],al
    2118:	01 18                	add    DWORD PTR [eax],ebx
    211a:	61                   	popa   
    211b:	00 00                	add    BYTE PTR [eax],al
    211d:	00 02                	add    BYTE PTR [edx],al
    211f:	91                   	xchg   ecx,eax
    2120:	08 09                	or     BYTE PTR [ecx],cl
    2122:	73 00                	jae    2124 <sysEnter_Vector-0x12dedc>
    2124:	01 1a                	add    DWORD PTR [edx],ebx
    2126:	a8 00                	test   al,0x0
    2128:	00 00                	add    BYTE PTR [eax],al
    212a:	02 91 74 00 0b 3f    	add    dl,BYTE PTR [ecx+0x3f0b0074]
    2130:	00 00                	add    BYTE PTR [eax],al
    2132:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2135:	56                   	push   esi
    2136:	00 00                	add    BYTE PTR [eax],al
    2138:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    213e:	30 0b                	xor    BYTE PTR [ebx],cl
    2140:	aa                   	stos   BYTE PTR es:[edi],al
    2141:	00 00                	add    BYTE PTR [eax],al
    2143:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    214a:	05 03 b0 3b 00       	add    eax,0x3bb003
    214f:	30 0b                	xor    BYTE PTR [ebx],cl
    2151:	56                   	push   esi
    2152:	01 00                	add    DWORD PTR [eax],eax
    2154:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2157:	56                   	push   esi
    2158:	00 00                	add    BYTE PTR [eax],al
    215a:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    2160:	30 0b                	xor    BYTE PTR [ebx],cl
    2162:	48                   	dec    eax
    2163:	00 00                	add    BYTE PTR [eax],al
    2165:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
    216b:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    2171:	30 00                	xor    BYTE PTR [eax],al
    2173:	40                   	inc    eax
    2174:	01 00                	add    DWORD PTR [eax],eax
    2176:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2179:	05 0c 00 00 04       	add    eax,0x400000c
    217e:	01 ef                	add    edi,ebp
    2180:	00 00                	add    BYTE PTR [eax],al
    2182:	00 0c c9             	add    BYTE PTR [ecx+ecx*8],cl
    2185:	08 00                	or     BYTE PTR [eax],al
    2187:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    218a:	00 00                	add    BYTE PTR [eax],al
    218c:	e0 12                	loopne 21a0 <sysEnter_Vector-0x12de60>
    218e:	00 30                	add    BYTE PTR [eax],dh
    2190:	89 00                	mov    DWORD PTR [eax],eax
    2192:	00 00                	add    BYTE PTR [eax],al
    2194:	3a 0e                	cmp    cl,BYTE PTR [esi]
    2196:	00 00                	add    BYTE PTR [eax],al
    2198:	02 01                	add    al,BYTE PTR [ecx]
    219a:	06                   	push   es
    219b:	58                   	pop    eax
    219c:	00 00                	add    BYTE PTR [eax],al
    219e:	00 02                	add    BYTE PTR [edx],al
    21a0:	01 06                	add    DWORD PTR [esi],eax
    21a2:	51                   	push   ecx
    21a3:	00 00                	add    BYTE PTR [eax],al
    21a5:	00 02                	add    BYTE PTR [edx],al
    21a7:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    21ad:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    21b4:	02 08                	add    cl,BYTE PTR [eax]
    21b6:	05 00 00 00 00       	add    eax,0x0
    21bb:	02 01                	add    al,BYTE PTR [ecx]
    21bd:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    21c0:	00 00                	add    BYTE PTR [eax],al
    21c2:	02 02                	add    al,BYTE PTR [edx]
    21c4:	07                   	pop    es
    21c5:	0e                   	push   cs
    21c6:	00 00                	add    BYTE PTR [eax],al
    21c8:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    21cb:	00 00                	add    BYTE PTR [eax],al
    21cd:	00 02                	add    BYTE PTR [edx],al
    21cf:	34 61                	xor    al,0x61
    21d1:	00 00                	add    BYTE PTR [eax],al
    21d3:	00 02                	add    BYTE PTR [edx],al
    21d5:	04 07                	add    al,0x7
    21d7:	32 00                	xor    al,BYTE PTR [eax]
    21d9:	00 00                	add    BYTE PTR [eax],al
    21db:	02 08                	add    cl,BYTE PTR [eax]
    21dd:	07                   	pop    es
    21de:	28 00                	sub    BYTE PTR [eax],al
    21e0:	00 00                	add    BYTE PTR [eax],al
    21e2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    21e9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    21ec:	96                   	xchg   esi,eax
    21ed:	00 00                	add    BYTE PTR [eax],al
    21ef:	00 02                	add    BYTE PTR [edx],al
    21f1:	01 02                	add    DWORD PTR [edx],eax
    21f3:	90                   	nop
    21f4:	00 00                	add    BYTE PTR [eax],al
    21f6:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    21fd:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2200:	00 00                	add    BYTE PTR [eax],al
    2202:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2205:	2d 00 00 00 02       	sub    eax,0x2000000
    220a:	04 07                	add    al,0x7
    220c:	dc 00                	fadd   QWORD PTR [eax]
    220e:	00 00                	add    BYTE PTR [eax],al
    2210:	05 04 25 00 00       	add    eax,0x2504
    2215:	00 06                	add    BYTE PTR [esi],al
    2217:	b4 08                	mov    ah,0x8
    2219:	00 00                	add    BYTE PTR [eax],al
    221b:	01 09                	add    DWORD PTR [ecx],ecx
    221d:	7d 00                	jge    221f <sysEnter_Vector-0x12dde1>
    221f:	00 00                	add    BYTE PTR [eax],al
    2221:	e0 12                	loopne 2235 <sysEnter_Vector-0x12ddcb>
    2223:	00 30                	add    BYTE PTR [eax],dh
    2225:	30 00                	xor    BYTE PTR [eax],al
    2227:	00 00                	add    BYTE PTR [eax],al
    2229:	01 9c c9 00 00 00 07 	add    DWORD PTR [ecx+ecx*8+0x7000000],ebx
    2230:	63 00                	arpl   WORD PTR [eax],ax
    2232:	01 09                	add    DWORD PTR [ecx],ecx
    2234:	25 00 00 00 02       	and    eax,0x2000000
    2239:	91                   	xchg   ecx,eax
    223a:	74 00                	je     223c <sysEnter_Vector-0x12ddc4>
    223c:	08 c0                	or     al,al
    223e:	08 00                	or     BYTE PTR [eax],al
    2240:	00 01                	add    BYTE PTR [ecx],al
    2242:	0e                   	push   cs
    2243:	7d 00                	jge    2245 <sysEnter_Vector-0x12ddbb>
    2245:	00 00                	add    BYTE PTR [eax],al
    2247:	10 13                	adc    BYTE PTR [ebx],dl
    2249:	00 30                	add    BYTE PTR [eax],dh
    224b:	59                   	pop    ecx
    224c:	00 00                	add    BYTE PTR [eax],al
    224e:	00 01                	add    BYTE PTR [ecx],al
    2250:	9c                   	pushf  
    2251:	ff 00                	inc    DWORD PTR [eax]
    2253:	00 00                	add    BYTE PTR [eax],al
    2255:	07                   	pop    es
    2256:	73 74                	jae    22cc <sysEnter_Vector-0x12dd34>
    2258:	72 00                	jb     225a <sysEnter_Vector-0x12dda6>
    225a:	01 0e                	add    DWORD PTR [esi],ecx
    225c:	9d                   	popf   
    225d:	00 00                	add    BYTE PTR [eax],al
    225f:	00 02                	add    BYTE PTR [edx],al
    2261:	91                   	xchg   ecx,eax
    2262:	00 09                	add    BYTE PTR [ecx],cl
    2264:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    2267:	00 01                	add    BYTE PTR [ecx],al
    2269:	10 3a                	adc    BYTE PTR [edx],bh
    226b:	00 00                	add    BYTE PTR [eax],al
    226d:	00 02                	add    BYTE PTR [edx],al
    226f:	91                   	xchg   ecx,eax
    2270:	74 00                	je     2272 <sysEnter_Vector-0x12dd8e>
    2272:	0a 3f                	or     bh,BYTE PTR [edi]
    2274:	00 00                	add    BYTE PTR [eax],al
    2276:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2279:	56                   	push   esi
    227a:	00 00                	add    BYTE PTR [eax],al
    227c:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    2282:	30 0a                	xor    BYTE PTR [edx],cl
    2284:	aa                   	stos   BYTE PTR es:[edi],al
    2285:	00 00                	add    BYTE PTR [eax],al
    2287:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    228e:	05 03 b0 3b 00       	add    eax,0x3bb003
    2293:	30 0a                	xor    BYTE PTR [edx],cl
    2295:	56                   	push   esi
    2296:	01 00                	add    DWORD PTR [eax],eax
    2298:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    229b:	56                   	push   esi
    229c:	00 00                	add    BYTE PTR [eax],al
    229e:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    22a4:	30 0a                	xor    BYTE PTR [edx],cl
    22a6:	48                   	dec    eax
    22a7:	00 00                	add    BYTE PTR [eax],al
    22a9:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
    22af:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    22b5:	30 00                	xor    BYTE PTR [eax],al
    22b7:	ca 00 00             	retf   0x0
    22ba:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    22bd:	ac                   	lods   al,BYTE PTR ds:[esi]
    22be:	0c 00                	or     al,0x0
    22c0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    22c3:	ef                   	out    dx,eax
    22c4:	00 00                	add    BYTE PTR [eax],al
    22c6:	00 0c e7             	add    BYTE PTR [edi+eiz*8],cl
    22c9:	08 00                	or     BYTE PTR [eax],al
    22cb:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    22ce:	00 00                	add    BYTE PTR [eax],al
    22d0:	6c                   	ins    BYTE PTR es:[edi],dx
    22d1:	13 00                	adc    eax,DWORD PTR [eax]
    22d3:	30 62 00             	xor    BYTE PTR [edx+0x0],ah
    22d6:	00 00                	add    BYTE PTR [eax],al
    22d8:	13 0f                	adc    ecx,DWORD PTR [edi]
    22da:	00 00                	add    BYTE PTR [eax],al
    22dc:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    22e3:	03 ae 03 00 00 02    	add    ebp,DWORD PTR [esi+0x2000003]
    22e9:	d8 37                	fdiv   DWORD PTR [edi]
    22eb:	00 00                	add    BYTE PTR [eax],al
    22ed:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    22f0:	07                   	pop    es
    22f1:	32 00                	xor    al,BYTE PTR [eax]
    22f3:	00 00                	add    BYTE PTR [eax],al
    22f5:	04 04                	add    al,0x4
    22f7:	05 05 00 00 00       	add    eax,0x5
    22fc:	04 08                	add    al,0x8
    22fe:	05 00 00 00 00       	add    eax,0x0
    2303:	04 0c                	add    al,0xc
    2305:	04 96                	add    al,0x96
    2307:	00 00                	add    BYTE PTR [eax],al
    2309:	00 05 e0 08 00 00    	add    BYTE PTR ds:0x8e0,al
    230f:	01 03                	add    DWORD PTR [ebx],eax
    2311:	2c 00                	sub    al,0x0
    2313:	00 00                	add    BYTE PTR [eax],al
    2315:	6c                   	ins    BYTE PTR es:[edi],dx
    2316:	13 00                	adc    eax,DWORD PTR [eax]
    2318:	30 31                	xor    BYTE PTR [ecx],dh
    231a:	00 00                	add    BYTE PTR [eax],al
    231c:	00 01                	add    BYTE PTR [ecx],al
    231e:	9c                   	pushf  
    231f:	89 00                	mov    DWORD PTR [eax],eax
    2321:	00 00                	add    BYTE PTR [eax],al
    2323:	06                   	push   es
    2324:	73 74                	jae    239a <sysEnter_Vector-0x12dc66>
    2326:	72 00                	jb     2328 <sysEnter_Vector-0x12dcd8>
    2328:	01 03                	add    DWORD PTR [ebx],eax
    232a:	89 00                	mov    DWORD PTR [eax],eax
    232c:	00 00                	add    BYTE PTR [eax],al
    232e:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2334:	74 00                	je     2336 <sysEnter_Vector-0x12dcca>
    2336:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    2339:	00 00                	add    BYTE PTR [eax],al
    233b:	00 02                	add    BYTE PTR [edx],al
    233d:	91                   	xchg   ecx,eax
    233e:	74 00                	je     2340 <sysEnter_Vector-0x12dcc0>
    2340:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    2343:	00 00                	add    BYTE PTR [eax],al
    2345:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2348:	06                   	push   es
    2349:	58                   	pop    eax
    234a:	00 00                	add    BYTE PTR [eax],al
    234c:	00 09                	add    BYTE PTR [ecx],cl
    234e:	8f 00                	pop    DWORD PTR [eax]
    2350:	00 00                	add    BYTE PTR [eax],al
    2352:	0a f2                	or     dh,dl
    2354:	01 00                	add    DWORD PTR [eax],eax
    2356:	00 01                	add    BYTE PTR [ecx],al
    2358:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    235b:	00 00                	add    BYTE PTR [eax],al
    235d:	9d                   	popf   
    235e:	13 00                	adc    eax,DWORD PTR [eax]
    2360:	30 31                	xor    BYTE PTR [ecx],dh
    2362:	00 00                	add    BYTE PTR [eax],al
    2364:	00 01                	add    BYTE PTR [ecx],al
    2366:	9c                   	pushf  
    2367:	06                   	push   es
    2368:	73 74                	jae    23de <sysEnter_Vector-0x12dc22>
    236a:	72 00                	jb     236c <sysEnter_Vector-0x12dc94>
    236c:	01 0a                	add    DWORD PTR [edx],ecx
    236e:	89 00                	mov    DWORD PTR [eax],eax
    2370:	00 00                	add    BYTE PTR [eax],al
    2372:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2378:	74 00                	je     237a <sysEnter_Vector-0x12dc86>
    237a:	01 0b                	add    DWORD PTR [ebx],ecx
    237c:	2c 00                	sub    al,0x0
    237e:	00 00                	add    BYTE PTR [eax],al
    2380:	02 91 74 00 00 a2    	add    dl,BYTE PTR [ecx-0x5dffff8c]
    2386:	00 00                	add    BYTE PTR [eax],al
    2388:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    238b:	47                   	inc    edi
    238c:	0d 00 00 04 01       	or     eax,0x1040000
    2391:	ef                   	out    dx,eax
    2392:	00 00                	add    BYTE PTR [eax],al
    2394:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    2397:	09 00                	or     DWORD PTR [eax],eax
    2399:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    239c:	00 00                	add    BYTE PTR [eax],al
    239e:	d0 13                	rcl    BYTE PTR [ebx],1
    23a0:	00 30                	add    BYTE PTR [eax],dh
    23a2:	67 00 00             	add    BYTE PTR [bx+si],al
    23a5:	00 ab 0f 00 00 02    	add    BYTE PTR [ebx+0x200000f],ch
    23ab:	04 05                	add    al,0x5
    23ad:	69 6e 74 00 03 ae 03 	imul   ebp,DWORD PTR [esi+0x74],0x3ae0300
    23b4:	00 00                	add    BYTE PTR [eax],al
    23b6:	02 d8                	add    bl,al
    23b8:	37                   	aaa    
    23b9:	00 00                	add    BYTE PTR [eax],al
    23bb:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    23be:	07                   	pop    es
    23bf:	32 00                	xor    al,BYTE PTR [eax]
    23c1:	00 00                	add    BYTE PTR [eax],al
    23c3:	04 04                	add    al,0x4
    23c5:	05 05 00 00 00       	add    eax,0x5
    23ca:	04 08                	add    al,0x8
    23cc:	05 00 00 00 00       	add    eax,0x0
    23d1:	04 0c                	add    al,0xc
    23d3:	04 96                	add    al,0x96
    23d5:	00 00                	add    BYTE PTR [eax],al
    23d7:	00 05 fc 08 00 00    	add    BYTE PTR ds:0x8fc,al
    23dd:	01 0c 25 00 00 00 d0 	add    DWORD PTR [eiz*1-0x30000000],ecx
    23e4:	13 00                	adc    eax,DWORD PTR [eax]
    23e6:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    23e9:	00 00                	add    BYTE PTR [eax],al
    23eb:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    23f2:	73 31                	jae    2425 <sysEnter_Vector-0x12dbdb>
    23f4:	00 01                	add    BYTE PTR [ecx],al
    23f6:	0c 93                	or     al,0x93
    23f8:	00 00                	add    BYTE PTR [eax],al
    23fa:	00 02                	add    BYTE PTR [edx],al
    23fc:	91                   	xchg   ecx,eax
    23fd:	00 06                	add    BYTE PTR [esi],al
    23ff:	73 32                	jae    2433 <sysEnter_Vector-0x12dbcd>
    2401:	00 01                	add    BYTE PTR [ecx],al
    2403:	0c 93                	or     al,0x93
    2405:	00 00                	add    BYTE PTR [eax],al
    2407:	00 02                	add    BYTE PTR [edx],al
    2409:	91                   	xchg   ecx,eax
    240a:	04 06                	add    al,0x6
    240c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    240d:	00 01                	add    BYTE PTR [ecx],al
    240f:	0c 2c                	or     al,0x2c
    2411:	00 00                	add    BYTE PTR [eax],al
    2413:	00 02                	add    BYTE PTR [edx],al
    2415:	91                   	xchg   ecx,eax
    2416:	08 00                	or     BYTE PTR [eax],al
    2418:	07                   	pop    es
    2419:	04 a0                	add    al,0xa0
    241b:	00 00                	add    BYTE PTR [eax],al
    241d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2420:	06                   	push   es
    2421:	58                   	pop    eax
    2422:	00 00                	add    BYTE PTR [eax],al
    2424:	00 08                	add    BYTE PTR [eax],cl
    2426:	99                   	cdq    
    2427:	00 00                	add    BYTE PTR [eax],al
    2429:	00 00                	add    BYTE PTR [eax],al
    242b:	b4 00                	mov    ah,0x0
    242d:	00 00                	add    BYTE PTR [eax],al
    242f:	04 00                	add    al,0x0
    2431:	b9 0d 00 00 04       	mov    ecx,0x400000d
    2436:	01 ef                	add    edi,ebp
    2438:	00 00                	add    BYTE PTR [eax],al
    243a:	00 0c 1a             	add    BYTE PTR [edx+ebx*1],cl
    243d:	09 00                	or     DWORD PTR [eax],eax
    243f:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    2442:	00 00                	add    BYTE PTR [eax],al
    2444:	38 14 00             	cmp    BYTE PTR [eax+eax*1],dl
    2447:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
    244a:	00 00                	add    BYTE PTR [eax],al
    244c:	54                   	push   esp
    244d:	10 00                	adc    BYTE PTR [eax],al
    244f:	00 02                	add    BYTE PTR [edx],al
    2451:	04 05                	add    al,0x5
    2453:	69 6e 74 00 03 ae 03 	imul   ebp,DWORD PTR [esi+0x74],0x3ae0300
    245a:	00 00                	add    BYTE PTR [eax],al
    245c:	02 d8                	add    bl,al
    245e:	37                   	aaa    
    245f:	00 00                	add    BYTE PTR [eax],al
    2461:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2464:	07                   	pop    es
    2465:	32 00                	xor    al,BYTE PTR [eax]
    2467:	00 00                	add    BYTE PTR [eax],al
    2469:	04 04                	add    al,0x4
    246b:	05 05 00 00 00       	add    eax,0x5
    2470:	04 08                	add    al,0x8
    2472:	05 00 00 00 00       	add    eax,0x0
    2477:	04 0c                	add    al,0xc
    2479:	04 96                	add    al,0x96
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	00 05 30 09 00 00    	add    BYTE PTR ds:0x930,al
    2483:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2489:	38 14 00             	cmp    BYTE PTR [eax+eax*1],dl
    248c:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
    248f:	00 00                	add    BYTE PTR [eax],al
    2491:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    2498:	73 31                	jae    24cb <sysEnter_Vector-0x12db35>
    249a:	00 01                	add    BYTE PTR [ecx],al
    249c:	0d 9f 00 00 00       	or     eax,0x9f
    24a1:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    24a7:	00 01                	add    BYTE PTR [ecx],al
    24a9:	0d ac 00 00 00       	or     eax,0xac
    24ae:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    24b4:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    24ba:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    24c0:	01 0f                	add    DWORD PTR [edi],ecx
    24c2:	9f                   	lahf   
    24c3:	00 00                	add    BYTE PTR [eax],al
    24c5:	00 02                	add    BYTE PTR [edx],al
    24c7:	91                   	xchg   ecx,eax
    24c8:	74 00                	je     24ca <sysEnter_Vector-0x12db36>
    24ca:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    24d1:	01 06                	add    DWORD PTR [esi],eax
    24d3:	58                   	pop    eax
    24d4:	00 00                	add    BYTE PTR [eax],al
    24d6:	00 08                	add    BYTE PTR [eax],cl
    24d8:	04 b2                	add    al,0xb2
    24da:	00 00                	add    BYTE PTR [eax],al
    24dc:	00 09                	add    BYTE PTR [ecx],cl
    24de:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    24df:	00 00                	add    BYTE PTR [eax],al
    24e1:	00 00                	add    BYTE PTR [eax],al
    24e3:	8c 01                	mov    WORD PTR [ecx],es
    24e5:	00 00                	add    BYTE PTR [eax],al
    24e7:	04 00                	add    al,0x0
    24e9:	3a 0e                	cmp    cl,BYTE PTR [esi]
    24eb:	00 00                	add    BYTE PTR [eax],al
    24ed:	04 01                	add    al,0x1
    24ef:	ef                   	out    dx,eax
    24f0:	00 00                	add    BYTE PTR [eax],al
    24f2:	00 0c 38             	add    BYTE PTR [eax+edi*1],cl
    24f5:	09 00                	or     DWORD PTR [eax],eax
    24f7:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    24fa:	00 00                	add    BYTE PTR [eax],al
    24fc:	98                   	cwde   
    24fd:	14 00                	adc    al,0x0
    24ff:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2502:	00 00                	add    BYTE PTR [eax],al
    2504:	f5                   	cmc    
    2505:	10 00                	adc    BYTE PTR [eax],al
    2507:	00 02                	add    BYTE PTR [edx],al
    2509:	01 06                	add    DWORD PTR [esi],eax
    250b:	58                   	pop    eax
    250c:	00 00                	add    BYTE PTR [eax],al
    250e:	00 02                	add    BYTE PTR [edx],al
    2510:	01 06                	add    DWORD PTR [esi],eax
    2512:	51                   	push   ecx
    2513:	00 00                	add    BYTE PTR [eax],al
    2515:	00 02                	add    BYTE PTR [edx],al
    2517:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    251d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2524:	02 08                	add    cl,BYTE PTR [eax]
    2526:	05 00 00 00 00       	add    eax,0x0
    252b:	02 01                	add    al,BYTE PTR [ecx]
    252d:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    2530:	00 00                	add    BYTE PTR [eax],al
    2532:	02 02                	add    al,BYTE PTR [edx]
    2534:	07                   	pop    es
    2535:	0e                   	push   cs
    2536:	00 00                	add    BYTE PTR [eax],al
    2538:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    253b:	00 00                	add    BYTE PTR [eax],al
    253d:	00 02                	add    BYTE PTR [edx],al
    253f:	34 61                	xor    al,0x61
    2541:	00 00                	add    BYTE PTR [eax],al
    2543:	00 02                	add    BYTE PTR [edx],al
    2545:	04 07                	add    al,0x7
    2547:	32 00                	xor    al,BYTE PTR [eax]
    2549:	00 00                	add    BYTE PTR [eax],al
    254b:	02 08                	add    cl,BYTE PTR [eax]
    254d:	07                   	pop    es
    254e:	28 00                	sub    BYTE PTR [eax],al
    2550:	00 00                	add    BYTE PTR [eax],al
    2552:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2559:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    255c:	96                   	xchg   esi,eax
    255d:	00 00                	add    BYTE PTR [eax],al
    255f:	00 02                	add    BYTE PTR [edx],al
    2561:	01 02                	add    DWORD PTR [edx],eax
    2563:	90                   	nop
    2564:	00 00                	add    BYTE PTR [eax],al
    2566:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    256d:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2570:	00 00                	add    BYTE PTR [eax],al
    2572:	05 04 95 00 00       	add    eax,0x9504
    2577:	00 06                	add    BYTE PTR [esi],al
    2579:	25 00 00 00 02       	and    eax,0x2000000
    257e:	04 07                	add    al,0x7
    2580:	2d 00 00 00 02       	sub    eax,0x2000000
    2585:	04 07                	add    al,0x7
    2587:	dc 00                	fadd   QWORD PTR [eax]
    2589:	00 00                	add    BYTE PTR [eax],al
    258b:	05 04 25 00 00       	add    eax,0x2504
    2590:	00 07                	add    BYTE PTR [edi],al
    2592:	5b                   	pop    ebx
    2593:	09 00                	or     DWORD PTR [eax],eax
    2595:	00 01                	add    BYTE PTR [ecx],al
    2597:	3b 9a 00 00 00 98    	cmp    ebx,DWORD PTR [edx-0x68000000]
    259d:	14 00                	adc    al,0x0
    259f:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    25a2:	00 00                	add    BYTE PTR [eax],al
    25a4:	01 9c 45 01 00 00 08 	add    DWORD PTR [ebp+eax*2+0x8000001],ebx
    25ab:	6a 09                	push   0x9
    25ad:	00 00                	add    BYTE PTR [eax],al
    25af:	01 3b                	add    DWORD PTR [ebx],edi
    25b1:	8f 00                	pop    DWORD PTR [eax]
    25b3:	00 00                	add    BYTE PTR [eax],al
    25b5:	02 91 00 08 63 09    	add    dl,BYTE PTR [ecx+0x9630800]
    25bb:	00 00                	add    BYTE PTR [eax],al
    25bd:	01 3b                	add    DWORD PTR [ebx],edi
    25bf:	45                   	inc    ebp
    25c0:	01 00                	add    DWORD PTR [eax],eax
    25c2:	00 02                	add    BYTE PTR [edx],al
    25c4:	91                   	xchg   ecx,eax
    25c5:	04 08                	add    al,0x8
    25c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    25c8:	09 00                	or     DWORD PTR [eax],eax
    25ca:	00 01                	add    BYTE PTR [ecx],al
    25cc:	3b 3a                	cmp    edi,DWORD PTR [edx]
    25ce:	00 00                	add    BYTE PTR [eax],al
    25d0:	00 02                	add    BYTE PTR [edx],al
    25d2:	91                   	xchg   ecx,eax
    25d3:	08 09                	or     BYTE PTR [ecx],cl
    25d5:	73 00                	jae    25d7 <sysEnter_Vector-0x12da29>
    25d7:	01 3d 8f 00 00 00    	add    DWORD PTR ds:0x8f,edi
    25dd:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    25e0:	61                   	popa   
    25e1:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    25e4:	01 3e                	add    DWORD PTR [esi],edi
    25e6:	9a 00 00 00 01 57 09 	call   0x957:0x1000000
    25ed:	63 00                	arpl   WORD PTR [eax],ax
    25ef:	01 3f                	add    DWORD PTR [edi],edi
    25f1:	3a 00                	cmp    al,BYTE PTR [eax]
    25f3:	00 00                	add    BYTE PTR [eax],al
    25f5:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    25f8:	4d                   	dec    ebp
    25f9:	09 00                	or     DWORD PTR [eax],eax
    25fb:	00 01                	add    BYTE PTR [ecx],al
    25fd:	40                   	inc    eax
    25fe:	9a 00 00 00 0b 6e 65 	call   0x656e:0xb000000
    2605:	67 00 01             	add    BYTE PTR [bx+di],al
    2608:	41                   	inc    ecx
    2609:	3a 00                	cmp    al,BYTE PTR [eax]
    260b:	00 00                	add    BYTE PTR [eax],al
    260d:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2610:	79 00                	jns    2612 <sysEnter_Vector-0x12d9ee>
    2612:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2615:	00 00                	add    BYTE PTR [eax],al
    2617:	00 01                	add    BYTE PTR [ecx],al
    2619:	51                   	push   ecx
    261a:	0c 54                	or     al,0x54
    261c:	09 00                	or     DWORD PTR [eax],eax
    261e:	00 01                	add    BYTE PTR [ecx],al
    2620:	41                   	inc    ecx
    2621:	3a 00                	cmp    al,BYTE PTR [eax]
    2623:	00 00                	add    BYTE PTR [eax],al
    2625:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2628:	05 04 a8 00 00       	add    eax,0xa804
    262d:	00 0d 3f 00 00 00    	add    BYTE PTR ds:0x3f,cl
    2633:	04 34                	add    al,0x34
    2635:	56                   	push   esi
    2636:	00 00                	add    BYTE PTR [eax],al
    2638:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    263e:	30 0d aa 00 00 00    	xor    BYTE PTR ds:0xaa,cl
    2644:	04 35                	add    al,0x35
    2646:	56                   	push   esi
    2647:	00 00                	add    BYTE PTR [eax],al
    2649:	00 05 03 b0 3b 00    	add    BYTE PTR ds:0x3bb003,al
    264f:	30 0d 56 01 00 00    	xor    BYTE PTR ds:0x156,cl
    2655:	04 36                	add    al,0x36
    2657:	56                   	push   esi
    2658:	00 00                	add    BYTE PTR [eax],al
    265a:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    2660:	30 0d 48 00 00 00    	xor    BYTE PTR ds:0x48,cl
    2666:	05 3b 84 00 00       	add    eax,0x843b
    266b:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    2671:	30 00                	xor    BYTE PTR [eax],al
    2673:	6c                   	ins    BYTE PTR es:[edi],dx
    2674:	00 00                	add    BYTE PTR [eax],al
    2676:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2679:	f5                   	cmc    
    267a:	0e                   	push   cs
    267b:	00 00                	add    BYTE PTR [eax],al
    267d:	04 01                	add    al,0x1
    267f:	ef                   	out    dx,eax
    2680:	00 00                	add    BYTE PTR [eax],al
    2682:	00 0c 74             	add    BYTE PTR [esp+esi*2],cl
    2685:	09 00                	or     DWORD PTR [eax],eax
    2687:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    268a:	00 00                	add    BYTE PTR [eax],al
    268c:	18 16                	sbb    BYTE PTR [esi],dl
    268e:	00 30                	add    BYTE PTR [eax],dh
    2690:	1d 00 00 00 4c       	sbb    eax,0x4c000000
    2695:	12 00                	adc    al,BYTE PTR [eax]
    2697:	00 02                	add    BYTE PTR [edx],al
    2699:	8b 09                	mov    ecx,DWORD PTR [ecx]
    269b:	00 00                	add    BYTE PTR [eax],al
    269d:	01 01                	add    DWORD PTR [ecx],eax
    269f:	5b                   	pop    ebx
    26a0:	00 00                	add    BYTE PTR [eax],al
    26a2:	00 18                	add    BYTE PTR [eax],bl
    26a4:	16                   	push   ss
    26a5:	00 30                	add    BYTE PTR [eax],dh
    26a7:	1d 00 00 00 01       	sbb    eax,0x1000000
    26ac:	9c                   	pushf  
    26ad:	5b                   	pop    ebx
    26ae:	00 00                	add    BYTE PTR [eax],al
    26b0:	00 03                	add    BYTE PTR [ebx],al
    26b2:	76 61                	jbe    2715 <sysEnter_Vector-0x12d8eb>
    26b4:	6c                   	ins    BYTE PTR es:[edi],dx
    26b5:	00 01                	add    BYTE PTR [ecx],al
    26b7:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    26ba:	00 00                	add    BYTE PTR [eax],al
    26bc:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    26c2:	74 00                	je     26c4 <sysEnter_Vector-0x12d93c>
    26c4:	01 01                	add    DWORD PTR [ecx],eax
    26c6:	68 00 00 00 02       	push   0x2000000
    26cb:	91                   	xchg   ecx,eax
    26cc:	04 00                	add    al,0x0
    26ce:	04 04                	add    al,0x4
    26d0:	61                   	popa   
    26d1:	00 00                	add    BYTE PTR [eax],al
    26d3:	00 05 01 06 58 00    	add    BYTE PTR ds:0x580601,al
    26d9:	00 00                	add    BYTE PTR [eax],al
    26db:	06                   	push   es
    26dc:	04 05                	add    al,0x5
    26de:	69 6e 74 00 00 8a 01 	imul   ebp,DWORD PTR [esi+0x74],0x18a0000
    26e5:	00 00                	add    BYTE PTR [eax],al
    26e7:	04 00                	add    al,0x0
    26e9:	53                   	push   ebx
    26ea:	0f 00 00             	sldt   WORD PTR [eax]
    26ed:	04 01                	add    al,0x1
    26ef:	ef                   	out    dx,eax
    26f0:	00 00                	add    BYTE PTR [eax],al
    26f2:	00 0c 93             	add    BYTE PTR [ebx+edx*4],cl
    26f5:	09 00                	or     DWORD PTR [eax],eax
    26f7:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    26fa:	00 00                	add    BYTE PTR [eax],al
    26fc:	38 16                	cmp    BYTE PTR [esi],dl
    26fe:	00 30                	add    BYTE PTR [eax],dh
    2700:	9c                   	pushf  
    2701:	01 00                	add    DWORD PTR [eax],eax
    2703:	00 93 12 00 00 02    	add    BYTE PTR [ebx+0x2000012],dl
    2709:	01 06                	add    DWORD PTR [esi],eax
    270b:	58                   	pop    eax
    270c:	00 00                	add    BYTE PTR [eax],al
    270e:	00 02                	add    BYTE PTR [edx],al
    2710:	01 06                	add    DWORD PTR [esi],eax
    2712:	51                   	push   ecx
    2713:	00 00                	add    BYTE PTR [eax],al
    2715:	00 02                	add    BYTE PTR [edx],al
    2717:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    271d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2724:	02 08                	add    cl,BYTE PTR [eax]
    2726:	05 00 00 00 00       	add    eax,0x0
    272b:	02 01                	add    al,BYTE PTR [ecx]
    272d:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    2730:	00 00                	add    BYTE PTR [eax],al
    2732:	02 02                	add    al,BYTE PTR [edx]
    2734:	07                   	pop    es
    2735:	0e                   	push   cs
    2736:	00 00                	add    BYTE PTR [eax],al
    2738:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    273b:	00 00                	add    BYTE PTR [eax],al
    273d:	00 02                	add    BYTE PTR [edx],al
    273f:	34 61                	xor    al,0x61
    2741:	00 00                	add    BYTE PTR [eax],al
    2743:	00 02                	add    BYTE PTR [edx],al
    2745:	04 07                	add    al,0x7
    2747:	32 00                	xor    al,BYTE PTR [eax]
    2749:	00 00                	add    BYTE PTR [eax],al
    274b:	02 08                	add    cl,BYTE PTR [eax]
    274d:	07                   	pop    es
    274e:	28 00                	sub    BYTE PTR [eax],al
    2750:	00 00                	add    BYTE PTR [eax],al
    2752:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2759:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    275c:	96                   	xchg   esi,eax
    275d:	00 00                	add    BYTE PTR [eax],al
    275f:	00 02                	add    BYTE PTR [edx],al
    2761:	01 02                	add    DWORD PTR [edx],eax
    2763:	90                   	nop
    2764:	00 00                	add    BYTE PTR [eax],al
    2766:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    276d:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2770:	00 00                	add    BYTE PTR [eax],al
    2772:	05 04 95 00 00       	add    eax,0x9504
    2777:	00 06                	add    BYTE PTR [esi],al
    2779:	25 00 00 00 02       	and    eax,0x2000000
    277e:	04 07                	add    al,0x7
    2780:	2d 00 00 00 02       	sub    eax,0x2000000
    2785:	04 07                	add    al,0x7
    2787:	dc 00                	fadd   QWORD PTR [eax]
    2789:	00 00                	add    BYTE PTR [eax],al
    278b:	05 04 25 00 00       	add    eax,0x2504
    2790:	00 07                	add    BYTE PTR [edi],al
    2792:	a8 09                	test   al,0x9
    2794:	00 00                	add    BYTE PTR [eax],al
    2796:	01 57 6f             	add    DWORD PTR [edi+0x6f],edx
    2799:	00 00                	add    BYTE PTR [eax],al
    279b:	00 38                	add    BYTE PTR [eax],bh
    279d:	16                   	push   ss
    279e:	00 30                	add    BYTE PTR [eax],dh
    27a0:	9c                   	pushf  
    27a1:	01 00                	add    DWORD PTR [eax],eax
    27a3:	00 01                	add    BYTE PTR [ecx],al
    27a5:	9c                   	pushf  
    27a6:	43                   	inc    ebx
    27a7:	01 00                	add    DWORD PTR [eax],eax
    27a9:	00 08                	add    BYTE PTR [eax],cl
    27ab:	6a 09                	push   0x9
    27ad:	00 00                	add    BYTE PTR [eax],al
    27af:	01 57 8f             	add    DWORD PTR [edi-0x71],edx
    27b2:	00 00                	add    BYTE PTR [eax],al
    27b4:	00 02                	add    BYTE PTR [edx],al
    27b6:	91                   	xchg   ecx,eax
    27b7:	00 08                	add    BYTE PTR [eax],cl
    27b9:	63 09                	arpl   WORD PTR [ecx],cx
    27bb:	00 00                	add    BYTE PTR [eax],al
    27bd:	01 57 43             	add    DWORD PTR [edi+0x43],edx
    27c0:	01 00                	add    DWORD PTR [eax],eax
    27c2:	00 02                	add    BYTE PTR [edx],al
    27c4:	91                   	xchg   ecx,eax
    27c5:	04 08                	add    al,0x8
    27c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    27c8:	09 00                	or     DWORD PTR [eax],eax
    27ca:	00 01                	add    BYTE PTR [ecx],al
    27cc:	57                   	push   edi
    27cd:	3a 00                	cmp    al,BYTE PTR [eax]
    27cf:	00 00                	add    BYTE PTR [eax],al
    27d1:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    27d7:	01 59 8f             	add    DWORD PTR [ecx-0x71],ebx
    27da:	00 00                	add    BYTE PTR [eax],al
    27dc:	00 01                	add    BYTE PTR [ecx],al
    27de:	56                   	push   esi
    27df:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    27e2:	63 00                	arpl   WORD PTR [eax],ax
    27e4:	01 5a 9a             	add    DWORD PTR [edx-0x66],ebx
    27e7:	00 00                	add    BYTE PTR [eax],al
    27e9:	00 01                	add    BYTE PTR [ecx],al
    27eb:	57                   	push   edi
    27ec:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    27ef:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    27f2:	00 00                	add    BYTE PTR [eax],al
    27f4:	00 01                	add    BYTE PTR [ecx],al
    27f6:	53                   	push   ebx
    27f7:	0a 4d 09             	or     cl,BYTE PTR [ebp+0x9]
    27fa:	00 00                	add    BYTE PTR [eax],al
    27fc:	01 5c 9a 00          	add    DWORD PTR [edx+ebx*4+0x0],ebx
    2800:	00 00                	add    BYTE PTR [eax],al
    2802:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2805:	67 00 01             	add    BYTE PTR [bx+di],al
    2808:	5d                   	pop    ebp
    2809:	3a 00                	cmp    al,BYTE PTR [eax]
    280b:	00 00                	add    BYTE PTR [eax],al
    280d:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2810:	79 00                	jns    2812 <sysEnter_Vector-0x12d7ee>
    2812:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    2815:	00 00                	add    BYTE PTR [eax],al
    2817:	00 01                	add    BYTE PTR [ecx],al
    2819:	51                   	push   ecx
    281a:	0a 54 09 00          	or     dl,BYTE PTR [ecx+ecx*1+0x0]
    281e:	00 01                	add    BYTE PTR [ecx],al
    2820:	5d                   	pop    ebp
    2821:	3a 00                	cmp    al,BYTE PTR [eax]
    2823:	00 00                	add    BYTE PTR [eax],al
    2825:	00 05 04 a8 00 00    	add    BYTE PTR ds:0xa804,al
    282b:	00 0c 3f             	add    BYTE PTR [edi+edi*1],cl
    282e:	00 00                	add    BYTE PTR [eax],al
    2830:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2833:	56                   	push   esi
    2834:	00 00                	add    BYTE PTR [eax],al
    2836:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    283c:	30 0c aa             	xor    BYTE PTR [edx+ebp*4],cl
    283f:	00 00                	add    BYTE PTR [eax],al
    2841:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    2848:	05 03 b0 3b 00       	add    eax,0x3bb003
    284d:	30 0c 56             	xor    BYTE PTR [esi+edx*2],cl
    2850:	01 00                	add    DWORD PTR [eax],eax
    2852:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2855:	56                   	push   esi
    2856:	00 00                	add    BYTE PTR [eax],al
    2858:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    285e:	30 0c 48             	xor    BYTE PTR [eax+ecx*2],cl
    2861:	00 00                	add    BYTE PTR [eax],al
    2863:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
    2869:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    286f:	30 00                	xor    BYTE PTR [eax],al
    2871:	3f                   	aas    
    2872:	01 00                	add    DWORD PTR [eax],eax
    2874:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2877:	ff 0f                	dec    DWORD PTR [edi]
    2879:	00 00                	add    BYTE PTR [eax],al
    287b:	04 01                	add    al,0x1
    287d:	ef                   	out    dx,eax
    287e:	00 00                	add    BYTE PTR [eax],al
    2880:	00 0c b5 09 00 00 6d 	add    BYTE PTR [esi*4+0x6d000009],cl
    2887:	00 00                	add    BYTE PTR [eax],al
    2889:	00 d4                	add    ah,dl
    288b:	17                   	pop    ss
    288c:	00 30                	add    BYTE PTR [eax],dh
    288e:	96                   	xchg   esi,eax
    288f:	00 00                	add    BYTE PTR [eax],al
    2891:	00 16                	add    BYTE PTR [esi],dl
    2893:	14 00                	adc    al,0x0
    2895:	00 02                	add    BYTE PTR [edx],al
    2897:	01 06                	add    DWORD PTR [esi],eax
    2899:	58                   	pop    eax
    289a:	00 00                	add    BYTE PTR [eax],al
    289c:	00 02                	add    BYTE PTR [edx],al
    289e:	01 06                	add    DWORD PTR [esi],eax
    28a0:	51                   	push   ecx
    28a1:	00 00                	add    BYTE PTR [eax],al
    28a3:	00 02                	add    BYTE PTR [edx],al
    28a5:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    28ab:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    28b2:	02 08                	add    cl,BYTE PTR [eax]
    28b4:	05 00 00 00 00       	add    eax,0x0
    28b9:	02 01                	add    al,BYTE PTR [ecx]
    28bb:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    28be:	00 00                	add    BYTE PTR [eax],al
    28c0:	02 02                	add    al,BYTE PTR [edx]
    28c2:	07                   	pop    es
    28c3:	0e                   	push   cs
    28c4:	00 00                	add    BYTE PTR [eax],al
    28c6:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    28c9:	00 00                	add    BYTE PTR [eax],al
    28cb:	00 02                	add    BYTE PTR [edx],al
    28cd:	34 61                	xor    al,0x61
    28cf:	00 00                	add    BYTE PTR [eax],al
    28d1:	00 02                	add    BYTE PTR [edx],al
    28d3:	04 07                	add    al,0x7
    28d5:	32 00                	xor    al,BYTE PTR [eax]
    28d7:	00 00                	add    BYTE PTR [eax],al
    28d9:	02 08                	add    cl,BYTE PTR [eax]
    28db:	07                   	pop    es
    28dc:	28 00                	sub    BYTE PTR [eax],al
    28de:	00 00                	add    BYTE PTR [eax],al
    28e0:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    28e7:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    28ea:	96                   	xchg   esi,eax
    28eb:	00 00                	add    BYTE PTR [eax],al
    28ed:	00 02                	add    BYTE PTR [edx],al
    28ef:	01 02                	add    DWORD PTR [edx],eax
    28f1:	90                   	nop
    28f2:	00 00                	add    BYTE PTR [eax],al
    28f4:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    28fb:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    28fe:	00 00                	add    BYTE PTR [eax],al
    2900:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2903:	2d 00 00 00 02       	sub    eax,0x2000000
    2908:	04 07                	add    al,0x7
    290a:	dc 00                	fadd   QWORD PTR [eax]
    290c:	00 00                	add    BYTE PTR [eax],al
    290e:	05 04 25 00 00       	add    eax,0x2504
    2913:	00 06                	add    BYTE PTR [esi],al
    2915:	cb                   	retf   
    2916:	09 00                	or     DWORD PTR [eax],eax
    2918:	00 01                	add    BYTE PTR [ecx],al
    291a:	03 d4                	add    edx,esp
    291c:	17                   	pop    ss
    291d:	00 30                	add    BYTE PTR [eax],dh
    291f:	96                   	xchg   esi,eax
    2920:	00 00                	add    BYTE PTR [eax],al
    2922:	00 01                	add    BYTE PTR [ecx],al
    2924:	9c                   	pushf  
    2925:	fe 00                	inc    BYTE PTR [eax]
    2927:	00 00                	add    BYTE PTR [eax],al
    2929:	07                   	pop    es
    292a:	af                   	scas   eax,DWORD PTR es:[edi]
    292b:	09 00                	or     DWORD PTR [eax],eax
    292d:	00 01                	add    BYTE PTR [ecx],al
    292f:	03 9d 00 00 00 02    	add    ebx,DWORD PTR [ebp+0x2000000]
    2935:	91                   	xchg   ecx,eax
    2936:	00 08                	add    BYTE PTR [eax],cl
    2938:	64                   	fs
    2939:	73 74                	jae    29af <sysEnter_Vector-0x12d651>
    293b:	00 01                	add    BYTE PTR [ecx],al
    293d:	05 9d 00 00 00       	add    eax,0x9d
    2942:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    2948:	63 00                	arpl   WORD PTR [eax],ax
    294a:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    2950:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    2956:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2959:	06                   	push   es
    295a:	9d                   	popf   
    295b:	00 00                	add    BYTE PTR [eax],al
    295d:	00 02                	add    BYTE PTR [edx],al
    295f:	91                   	xchg   ecx,eax
    2960:	64                   	fs
    2961:	09 f2                	or     edx,esi
    2963:	01 00                	add    DWORD PTR [eax],eax
    2965:	00 01                	add    BYTE PTR [ecx],al
    2967:	11 3a                	adc    DWORD PTR [edx],edi
    2969:	00 00                	add    BYTE PTR [eax],al
    296b:	00 0a                	add    BYTE PTR [edx],cl
    296d:	00 00                	add    BYTE PTR [eax],al
    296f:	0b 3f                	or     edi,DWORD PTR [edi]
    2971:	00 00                	add    BYTE PTR [eax],al
    2973:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2976:	56                   	push   esi
    2977:	00 00                	add    BYTE PTR [eax],al
    2979:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    297f:	30 0b                	xor    BYTE PTR [ebx],cl
    2981:	aa                   	stos   BYTE PTR es:[edi],al
    2982:	00 00                	add    BYTE PTR [eax],al
    2984:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    298b:	05 03 b0 3b 00       	add    eax,0x3bb003
    2990:	30 0b                	xor    BYTE PTR [ebx],cl
    2992:	56                   	push   esi
    2993:	01 00                	add    DWORD PTR [eax],eax
    2995:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2998:	56                   	push   esi
    2999:	00 00                	add    BYTE PTR [eax],al
    299b:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    29a1:	30 0b                	xor    BYTE PTR [ebx],cl
    29a3:	48                   	dec    eax
    29a4:	00 00                	add    BYTE PTR [eax],al
    29a6:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
    29ac:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    29b2:	30 00                	xor    BYTE PTR [eax],al
    29b4:	51                   	push   ecx
    29b5:	01 00                	add    DWORD PTR [eax],eax
    29b7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    29ba:	9e                   	sahf   
    29bb:	10 00                	adc    BYTE PTR [eax],al
    29bd:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    29c0:	ef                   	out    dx,eax
    29c1:	00 00                	add    BYTE PTR [eax],al
    29c3:	00 0c d3             	add    BYTE PTR [ebx+edx*8],cl
    29c6:	09 00                	or     DWORD PTR [eax],eax
    29c8:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    29cb:	00 00                	add    BYTE PTR [eax],al
    29cd:	6c                   	ins    BYTE PTR es:[edi],dx
    29ce:	18 00                	sbb    BYTE PTR [eax],al
    29d0:	30 6e 00             	xor    BYTE PTR [esi+0x0],ch
    29d3:	00 00                	add    BYTE PTR [eax],al
    29d5:	f0 14 00             	lock adc al,0x0
    29d8:	00 02                	add    BYTE PTR [edx],al
    29da:	01 06                	add    DWORD PTR [esi],eax
    29dc:	58                   	pop    eax
    29dd:	00 00                	add    BYTE PTR [eax],al
    29df:	00 02                	add    BYTE PTR [edx],al
    29e1:	01 06                	add    DWORD PTR [esi],eax
    29e3:	51                   	push   ecx
    29e4:	00 00                	add    BYTE PTR [eax],al
    29e6:	00 02                	add    BYTE PTR [edx],al
    29e8:	02 05 e5 00 00 00    	add    al,BYTE PTR ds:0xe5
    29ee:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    29f5:	02 08                	add    cl,BYTE PTR [eax]
    29f7:	05 00 00 00 00       	add    eax,0x0
    29fc:	02 01                	add    al,BYTE PTR [ecx]
    29fe:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    2a01:	00 00                	add    BYTE PTR [eax],al
    2a03:	02 02                	add    al,BYTE PTR [edx]
    2a05:	07                   	pop    es
    2a06:	0e                   	push   cs
    2a07:	00 00                	add    BYTE PTR [eax],al
    2a09:	00 04 64             	add    BYTE PTR [esp+eiz*2],al
    2a0c:	00 00                	add    BYTE PTR [eax],al
    2a0e:	00 02                	add    BYTE PTR [edx],al
    2a10:	34 61                	xor    al,0x61
    2a12:	00 00                	add    BYTE PTR [eax],al
    2a14:	00 02                	add    BYTE PTR [edx],al
    2a16:	04 07                	add    al,0x7
    2a18:	32 00                	xor    al,BYTE PTR [eax]
    2a1a:	00 00                	add    BYTE PTR [eax],al
    2a1c:	02 08                	add    cl,BYTE PTR [eax]
    2a1e:	07                   	pop    es
    2a1f:	28 00                	sub    BYTE PTR [eax],al
    2a21:	00 00                	add    BYTE PTR [eax],al
    2a23:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2a2a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2a2d:	96                   	xchg   esi,eax
    2a2e:	00 00                	add    BYTE PTR [eax],al
    2a30:	00 02                	add    BYTE PTR [edx],al
    2a32:	01 02                	add    DWORD PTR [edx],eax
    2a34:	90                   	nop
    2a35:	00 00                	add    BYTE PTR [eax],al
    2a37:	00 04 5d 00 00 00 03 	add    BYTE PTR [ebx*2+0x3000000],al
    2a3e:	2a 6f 00             	sub    ch,BYTE PTR [edi+0x0]
    2a41:	00 00                	add    BYTE PTR [eax],al
    2a43:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2a46:	2d 00 00 00 02       	sub    eax,0x2000000
    2a4b:	04 07                	add    al,0x7
    2a4d:	dc 00                	fadd   QWORD PTR [eax]
    2a4f:	00 00                	add    BYTE PTR [eax],al
    2a51:	05 04 25 00 00       	add    eax,0x2504
    2a56:	00 06                	add    BYTE PTR [esi],al
    2a58:	e0 09                	loopne 2a63 <sysEnter_Vector-0x12d59d>
    2a5a:	00 00                	add    BYTE PTR [eax],al
    2a5c:	01 33                	add    DWORD PTR [ebx],esi
    2a5e:	9d                   	popf   
    2a5f:	00 00                	add    BYTE PTR [eax],al
    2a61:	00 6c 18 00          	add    BYTE PTR [eax+ebx*1+0x0],ch
    2a65:	30 6e 00             	xor    BYTE PTR [esi+0x0],ch
    2a68:	00 00                	add    BYTE PTR [eax],al
    2a6a:	01 9c ef 00 00 00 07 	add    DWORD PTR [edi+ebp*8+0x7000000],ebx
    2a71:	f0 09 00             	lock or DWORD PTR [eax],eax
    2a74:	00 01                	add    BYTE PTR [ecx],al
    2a76:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
    2a7c:	91                   	xchg   ecx,eax
    2a7d:	00 07                	add    BYTE PTR [edi],al
    2a7f:	ed                   	in     eax,dx
    2a80:	09 00                	or     DWORD PTR [eax],eax
    2a82:	00 01                	add    BYTE PTR [ecx],al
    2a84:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
    2a8a:	91                   	xchg   ecx,eax
    2a8b:	04 08                	add    al,0x8
    2a8d:	61                   	popa   
    2a8e:	00 01                	add    BYTE PTR [ecx],al
    2a90:	35 9d 00 00 00       	xor    eax,0x9d
    2a95:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    2a98:	62 00                	bound  eax,QWORD PTR [eax]
    2a9a:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
    2aa0:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    2aa3:	09 25 00 00 00 ff    	or     DWORD PTR ds:0xff000000,esp
    2aa9:	00 00                	add    BYTE PTR [eax],al
    2aab:	00 0a                	add    BYTE PTR [edx],cl
    2aad:	96                   	xchg   esi,eax
    2aae:	00 00                	add    BYTE PTR [eax],al
    2ab0:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    2ab3:	0b e7                	or     esp,edi
    2ab5:	09 00                	or     DWORD PTR [eax],eax
    2ab7:	00 01                	add    BYTE PTR [ecx],al
    2ab9:	19 ef                	sbb    edi,ebp
    2abb:	00 00                	add    BYTE PTR [eax],al
    2abd:	00 05 03 40 3a 00    	add    BYTE PTR ds:0x3a4003,al
    2ac3:	30 0c 3f             	xor    BYTE PTR [edi+edi*1],cl
    2ac6:	00 00                	add    BYTE PTR [eax],al
    2ac8:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2acb:	56                   	push   esi
    2acc:	00 00                	add    BYTE PTR [eax],al
    2ace:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    2ad4:	30 0c aa             	xor    BYTE PTR [edx+ebp*4],cl
    2ad7:	00 00                	add    BYTE PTR [eax],al
    2ad9:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    2ae0:	05 03 b0 3b 00       	add    eax,0x3bb003
    2ae5:	30 0c 56             	xor    BYTE PTR [esi+edx*2],cl
    2ae8:	01 00                	add    DWORD PTR [eax],eax
    2aea:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2aed:	56                   	push   esi
    2aee:	00 00                	add    BYTE PTR [eax],al
    2af0:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    2af6:	30 0c 48             	xor    BYTE PTR [eax+ecx*2],cl
    2af9:	00 00                	add    BYTE PTR [eax],al
    2afb:	00 05 3b 84 00 00    	add    BYTE PTR ds:0x843b,al
    2b01:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    2b07:	30 00                	xor    BYTE PTR [eax],al
    2b09:	57                   	push   edi
    2b0a:	04 00                	add    al,0x0
    2b0c:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b0f:	4a                   	dec    edx
    2b10:	11 00                	adc    DWORD PTR [eax],eax
    2b12:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2b15:	ef                   	out    dx,eax
    2b16:	00 00                	add    BYTE PTR [eax],al
    2b18:	00 0c 74             	add    BYTE PTR [esp+esi*2],cl
    2b1b:	0a 00                	or     al,BYTE PTR [eax]
    2b1d:	00 6d 00             	add    BYTE PTR [ebp+0x0],ch
    2b20:	00 00                	add    BYTE PTR [eax],al
    2b22:	dc 18                	fcomp  QWORD PTR [eax]
    2b24:	00 30                	add    BYTE PTR [eax],dh
    2b26:	16                   	push   ss
    2b27:	0c 00                	or     al,0x0
    2b29:	00 c2                	add    dl,al
    2b2b:	15 00 00 02 63       	adc    eax,0x63020000
    2b30:	02 00                	add    al,BYTE PTR [eax]
    2b32:	00 04 ba             	add    BYTE PTR [edx+edi*4],al
    2b35:	00 00                	add    BYTE PTR [eax],al
    2b37:	00 06                	add    BYTE PTR [esi],al
    2b39:	15 ba 00 00 00       	adc    eax,0xba
    2b3e:	03 49 03             	add    ecx,DWORD PTR [ecx+0x3]
    2b41:	00 00                	add    BYTE PTR [eax],al
    2b43:	00 03                	add    BYTE PTR [ebx],al
    2b45:	f2 02 00             	repnz add al,BYTE PTR [eax]
    2b48:	00 01                	add    BYTE PTR [ecx],al
    2b4a:	03 d8                	add    ebx,eax
    2b4c:	02 00                	add    al,BYTE PTR [eax]
    2b4e:	00 03                	add    BYTE PTR [ebx],al
    2b50:	03 3b                	add    edi,DWORD PTR [ebx]
    2b52:	03 00                	add    eax,DWORD PTR [eax]
    2b54:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    2b57:	42                   	inc    edx
    2b58:	02 00                	add    al,BYTE PTR [eax]
    2b5a:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    2b5d:	e5 02                	in     eax,0x2
    2b5f:	00 00                	add    BYTE PTR [eax],al
    2b61:	59                   	pop    ecx
    2b62:	03 6d 02             	add    ebp,DWORD PTR [ebp+0x2]
    2b65:	00 00                	add    BYTE PTR [eax],al
    2b67:	61                   	popa   
    2b68:	03 68 03             	add    ebp,DWORD PTR [eax+0x3]
    2b6b:	00 00                	add    BYTE PTR [eax],al
    2b6d:	97                   	xchg   edi,eax
    2b6e:	04 0a                	add    al,0xa
    2b70:	03 00                	add    eax,DWORD PTR [eax]
    2b72:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2b75:	04 21                	add    al,0x21
    2b77:	03 00                	add    eax,DWORD PTR [eax]
    2b79:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    2b7d:	c5 02                	lds    eax,FWORD PTR [edx]
    2b7f:	00 00                	add    BYTE PTR [eax],al
    2b81:	65 01 04 9c          	add    DWORD PTR gs:[esp+ebx*4],eax
    2b85:	02 00                	add    al,BYTE PTR [eax]
    2b87:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    2b8a:	04 80                	add    al,0x80
    2b8c:	02 00                	add    al,BYTE PTR [eax]
    2b8e:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    2b91:	04 2e                	add    al,0x2e
    2b93:	03 00                	add    eax,DWORD PTR [eax]
    2b95:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    2b98:	04 59                	add    al,0x59
    2b9a:	03 00                	add    eax,DWORD PTR [eax]
    2b9c:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    2b9f:	04 0f                	add    al,0xf
    2ba1:	02 00                	add    al,BYTE PTR [eax]
    2ba3:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2ba6:	04 91                	add    al,0x91
    2ba8:	03 00                	add    eax,DWORD PTR [eax]
    2baa:	00 00                	add    BYTE PTR [eax],al
    2bac:	03 04 b6             	add    eax,DWORD PTR [esi+esi*4]
    2baf:	02 00                	add    al,BYTE PTR [eax]
    2bb1:	00 01                	add    BYTE PTR [ecx],al
    2bb3:	03 04 20             	add    eax,DWORD PTR [eax+eiz*1]
    2bb6:	02 00                	add    al,BYTE PTR [eax]
    2bb8:	00 02                	add    BYTE PTR [edx],al
    2bba:	03 04 7c             	add    eax,DWORD PTR [esp+edi*2]
    2bbd:	03 00                	add    eax,DWORD PTR [eax]
    2bbf:	00 03                	add    BYTE PTR [ebx],al
    2bc1:	03 00                	add    eax,DWORD PTR [eax]
    2bc3:	05 04 07 32 00       	add    eax,0x320704
    2bc8:	00 00                	add    BYTE PTR [eax],al
    2bca:	05 01 06 58 00       	add    eax,0x580601
    2bcf:	00 00                	add    BYTE PTR [eax],al
    2bd1:	05 01 06 51 00       	add    eax,0x510601
    2bd6:	00 00                	add    BYTE PTR [eax],al
    2bd8:	05 02 05 e5 00       	add    eax,0xe50502
    2bdd:	00 00                	add    BYTE PTR [eax],al
    2bdf:	06                   	push   es
    2be0:	04 05                	add    al,0x5
    2be2:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    2be9:	00 00                	add    BYTE PTR [eax],al
    2beb:	00 00                	add    BYTE PTR [eax],al
    2bed:	05 01 08 4f 00       	add    eax,0x4f0801
    2bf2:	00 00                	add    BYTE PTR [eax],al
    2bf4:	05 02 07 0e 00       	add    eax,0xe0702
    2bf9:	00 00                	add    BYTE PTR [eax],al
    2bfb:	07                   	pop    es
    2bfc:	64 00 00             	add    BYTE PTR fs:[eax],al
    2bff:	00 02                	add    BYTE PTR [edx],al
    2c01:	34 ba                	xor    al,0xba
    2c03:	00 00                	add    BYTE PTR [eax],al
    2c05:	00 05 08 07 28 00    	add    BYTE PTR ds:0x280708,al
    2c0b:	00 00                	add    BYTE PTR [eax],al
    2c0d:	05 04 05 05 00       	add    eax,0x50504
    2c12:	00 00                	add    BYTE PTR [eax],al
    2c14:	05 0c 04 96 00       	add    eax,0x96040c
    2c19:	00 00                	add    BYTE PTR [eax],al
    2c1b:	05 01 02 90 00       	add    eax,0x900201
    2c20:	00 00                	add    BYTE PTR [eax],al
    2c22:	07                   	pop    es
    2c23:	5d                   	pop    ebp
    2c24:	00 00                	add    BYTE PTR [eax],al
    2c26:	00 03                	add    BYTE PTR [ebx],al
    2c28:	2a 04 01             	sub    al,BYTE PTR [ecx+eax*1]
    2c2b:	00 00                	add    BYTE PTR [eax],al
    2c2d:	08 74 6d 00          	or     BYTE PTR [ebp+ebp*2+0x0],dh
    2c31:	2c 03                	sub    al,0x3
    2c33:	2c b4                	sub    al,0xb4
    2c35:	01 00                	add    DWORD PTR [eax],eax
    2c37:	00 09                	add    BYTE PTR [ecx],cl
    2c39:	10 05 00 00 03 2e    	adc    BYTE PTR ds:0x2e030000,al
    2c3f:	d6                   	(bad)  
    2c40:	00 00                	add    BYTE PTR [eax],al
    2c42:	00 00                	add    BYTE PTR [eax],al
    2c44:	09 75 04             	or     DWORD PTR [ebp+0x4],esi
    2c47:	00 00                	add    BYTE PTR [eax],al
    2c49:	03 2f                	add    ebp,DWORD PTR [edi]
    2c4b:	d6                   	(bad)  
    2c4c:	00 00                	add    BYTE PTR [eax],al
    2c4e:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2c51:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    2c52:	03 00                	add    eax,DWORD PTR [eax]
    2c54:	00 03                	add    BYTE PTR [ebx],al
    2c56:	30 d6                	xor    dh,dl
    2c58:	00 00                	add    BYTE PTR [eax],al
    2c5a:	00 08                	add    BYTE PTR [eax],cl
    2c5c:	09 fb                	or     ebx,edi
    2c5e:	04 00                	add    al,0x0
    2c60:	00 03                	add    BYTE PTR [ebx],al
    2c62:	31 d6                	xor    esi,edx
    2c64:	00 00                	add    BYTE PTR [eax],al
    2c66:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2c69:	fa                   	cli    
    2c6a:	03 00                	add    eax,DWORD PTR [eax]
    2c6c:	00 03                	add    BYTE PTR [ebx],al
    2c6e:	32 d6                	xor    dl,dh
    2c70:	00 00                	add    BYTE PTR [eax],al
    2c72:	00 10                	add    BYTE PTR [eax],dl
    2c74:	09 01                	or     DWORD PTR [ecx],eax
    2c76:	04 00                	add    al,0x0
    2c78:	00 03                	add    BYTE PTR [ebx],al
    2c7a:	33 d6                	xor    edx,esi
    2c7c:	00 00                	add    BYTE PTR [eax],al
    2c7e:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    2c81:	f3 04 00             	repz add al,0x0
    2c84:	00 03                	add    BYTE PTR [ebx],al
    2c86:	34 d6                	xor    al,0xd6
    2c88:	00 00                	add    BYTE PTR [eax],al
    2c8a:	00 18                	add    BYTE PTR [eax],bl
    2c8c:	09 82 04 00 00 03    	or     DWORD PTR [edx+0x3000004],eax
    2c92:	35 d6 00 00 00       	xor    eax,0xd6
    2c97:	1c 09                	sbb    al,0x9
    2c99:	2c 04                	sub    al,0x4
    2c9b:	00 00                	add    BYTE PTR [eax],al
    2c9d:	03 36                	add    esi,DWORD PTR [esi]
    2c9f:	d6                   	(bad)  
    2ca0:	00 00                	add    BYTE PTR [eax],al
    2ca2:	00 20                	add    BYTE PTR [eax],ah
    2ca4:	09 bd 04 00 00 03    	or     DWORD PTR [ebp+0x3000004],edi
    2caa:	37                   	aaa    
    2cab:	04 01                	add    al,0x1
    2cad:	00 00                	add    BYTE PTR [eax],al
    2caf:	24 09                	and    al,0x9
    2cb1:	cb                   	retf   
    2cb2:	03 00                	add    eax,DWORD PTR [eax]
    2cb4:	00 03                	add    BYTE PTR [ebx],al
    2cb6:	38 b4 01 00 00 28 00 	cmp    BYTE PTR [ecx+eax*1+0x280000],dh
    2cbd:	0a 04 ba             	or     al,BYTE PTR [edx+edi*4]
    2cc0:	01 00                	add    DWORD PTR [eax],eax
    2cc2:	00 0b                	add    BYTE PTR [ebx],cl
    2cc4:	c1 00 00             	rol    DWORD PTR [eax],0x0
    2cc7:	00 05 04 07 2d 00    	add    BYTE PTR ds:0x2d0704,al
    2ccd:	00 00                	add    BYTE PTR [eax],al
    2ccf:	05 04 07 dc 00       	add    eax,0xdc0704
    2cd4:	00 00                	add    BYTE PTR [eax],al
    2cd6:	0a 04 c1             	or     al,BYTE PTR [ecx+eax*8]
    2cd9:	00 00                	add    BYTE PTR [eax],al
    2cdb:	00 0c 47             	add    BYTE PTR [edi+eax*2],cl
    2cde:	0a 00                	or     al,BYTE PTR [eax]
    2ce0:	00 01                	add    BYTE PTR [ecx],al
    2ce2:	16                   	push   ss
    2ce3:	19 01                	sbb    DWORD PTR [ecx],eax
    2ce5:	00 00                	add    BYTE PTR [eax],al
    2ce7:	dc 18                	fcomp  QWORD PTR [eax]
    2ce9:	00 30                	add    BYTE PTR [eax],dh
    2ceb:	29 00                	sub    DWORD PTR [eax],eax
    2ced:	00 00                	add    BYTE PTR [eax],al
    2cef:	01 9c fb 01 00 00 0d 	add    DWORD PTR [ebx+edi*8+0xd000001],ebx
    2cf6:	9f                   	lahf   
    2cf7:	03 00                	add    eax,DWORD PTR [eax]
    2cf9:	00 01                	add    BYTE PTR [ecx],al
    2cfb:	18 f2                	sbb    dl,dh
    2cfd:	00 00                	add    BYTE PTR [eax],al
    2cff:	00 02                	add    BYTE PTR [edx],al
    2d01:	91                   	xchg   ecx,eax
    2d02:	74 00                	je     2d04 <sysEnter_Vector-0x12d2fc>
    2d04:	0e                   	push   cs
    2d05:	10 0a                	adc    BYTE PTR [edx],cl
    2d07:	00 00                	add    BYTE PTR [eax],al
    2d09:	01 1e                	add    DWORD PTR [esi],ebx
    2d0b:	69 02 00 00 05 19    	imul   eax,DWORD PTR [edx],0x19050000
    2d11:	00 30                	add    BYTE PTR [eax],dh
    2d13:	19 03                	sbb    DWORD PTR [ebx],eax
    2d15:	00 00                	add    BYTE PTR [eax],al
    2d17:	01 9c 69 02 00 00 0f 	add    DWORD PTR [ecx+ebp*2+0xf000002],ebx
    2d1e:	19 0a                	sbb    DWORD PTR [edx],ecx
    2d20:	00 00                	add    BYTE PTR [eax],al
    2d22:	01 1e                	add    DWORD PTR [esi],ebx
    2d24:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2d25:	02 00                	add    al,BYTE PTR [eax]
    2d27:	00 02                	add    BYTE PTR [edx],al
    2d29:	91                   	xchg   ecx,eax
    2d2a:	00 0f                	add    BYTE PTR [edi],cl
    2d2c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2d2d:	0a 00                	or     al,BYTE PTR [eax]
    2d2f:	00 01                	add    BYTE PTR [ecx],al
    2d31:	1e                   	push   ds
    2d32:	69 02 00 00 02 91    	imul   eax,DWORD PTR [edx],0x91020000
    2d38:	04 0d                	add    al,0xd
    2d3a:	47                   	inc    edi
    2d3b:	0a 00                	or     al,BYTE PTR [eax]
    2d3d:	00 01                	add    BYTE PTR [ecx],al
    2d3f:	1f                   	pop    ds
    2d40:	19 01                	sbb    DWORD PTR [ecx],eax
    2d42:	00 00                	add    BYTE PTR [eax],al
    2d44:	02 91 68 0d 4c 0a    	add    dl,BYTE PTR [ecx+0xa4c0d68]
    2d4a:	00 00                	add    BYTE PTR [eax],al
    2d4c:	01 20                	add    DWORD PTR [eax],esp
    2d4e:	bf 01 00 00 02       	mov    edi,0x2000001
    2d53:	91                   	xchg   ecx,eax
    2d54:	64                   	fs
    2d55:	0d 01 0a 00 00       	or     eax,0xa01
    2d5a:	01 20                	add    DWORD PTR [eax],esp
    2d5c:	bf 01 00 00 02       	mov    edi,0x2000001
    2d61:	91                   	xchg   ecx,eax
    2d62:	70 0d                	jo     2d71 <sysEnter_Vector-0x12d28f>
    2d64:	04 04                	add    al,0x4
    2d66:	00 00                	add    BYTE PTR [eax],al
    2d68:	01 21                	add    DWORD PTR [ecx],esp
    2d6a:	d6                   	(bad)  
    2d6b:	00 00                	add    BYTE PTR [eax],al
    2d6d:	00 02                	add    BYTE PTR [edx],al
    2d6f:	91                   	xchg   ecx,eax
    2d70:	6c                   	ins    BYTE PTR es:[edi],dx
    2d71:	00 0a                	add    BYTE PTR [edx],cl
    2d73:	04 24                	add    al,0x24
    2d75:	01 00                	add    DWORD PTR [eax],eax
    2d77:	00 0a                	add    BYTE PTR [edx],cl
    2d79:	04 75                	add    al,0x75
    2d7b:	02 00                	add    al,BYTE PTR [eax]
    2d7d:	00 0b                	add    BYTE PTR [ebx],cl
    2d7f:	19 01                	sbb    DWORD PTR [ecx],eax
    2d81:	00 00                	add    BYTE PTR [eax],al
    2d83:	10 f7                	adc    bh,dh
    2d85:	09 00                	or     DWORD PTR [eax],eax
    2d87:	00 01                	add    BYTE PTR [ecx],al
    2d89:	3a 69 02             	cmp    ch,BYTE PTR [ecx+0x2]
    2d8c:	00 00                	add    BYTE PTR [eax],al
    2d8e:	1e                   	push   ds
    2d8f:	1c 00                	sbb    al,0x0
    2d91:	30 3f                	xor    BYTE PTR [edi],bh
    2d93:	00 00                	add    BYTE PTR [eax],al
    2d95:	00 01                	add    BYTE PTR [ecx],al
    2d97:	9c                   	pushf  
    2d98:	bc 02 00 00 0f       	mov    esp,0xf000002
    2d9d:	19 0a                	sbb    DWORD PTR [edx],ecx
    2d9f:	00 00                	add    BYTE PTR [eax],al
    2da1:	01 3a                	add    DWORD PTR [edx],edi
    2da3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2da4:	02 00                	add    al,BYTE PTR [eax]
    2da6:	00 02                	add    BYTE PTR [edx],al
    2da8:	91                   	xchg   ecx,eax
    2da9:	00 11                	add    BYTE PTR [ecx],dl
    2dab:	74 00                	je     2dad <sysEnter_Vector-0x12d253>
    2dad:	01 3b                	add    DWORD PTR [ebx],edi
    2daf:	19 01                	sbb    DWORD PTR [ecx],eax
    2db1:	00 00                	add    BYTE PTR [eax],al
    2db3:	02 91 6c 0d 6e 0a    	add    dl,BYTE PTR [ecx+0xa6e0d6c]
    2db9:	00 00                	add    BYTE PTR [eax],al
    2dbb:	01 3c 24             	add    DWORD PTR [esp],edi
    2dbe:	01 00                	add    DWORD PTR [eax],eax
    2dc0:	00 02                	add    BYTE PTR [edx],al
    2dc2:	91                   	xchg   ecx,eax
    2dc3:	40                   	inc    eax
    2dc4:	00 10                	add    BYTE PTR [eax],dl
    2dc6:	1f                   	pop    ds
    2dc7:	0a 00                	or     al,BYTE PTR [eax]
    2dc9:	00 01                	add    BYTE PTR [ecx],al
    2dcb:	42                   	inc    edx
    2dcc:	69 02 00 00 5d 1c    	imul   eax,DWORD PTR [edx],0x1c5d0000
    2dd2:	00 30                	add    BYTE PTR [eax],dh
    2dd4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2dd7:	00 01                	add    BYTE PTR [ecx],al
    2dd9:	9c                   	pushf  
    2dda:	fe 02                	inc    BYTE PTR [edx]
    2ddc:	00 00                	add    BYTE PTR [eax],al
    2dde:	0f 19 0a             	nop    DWORD PTR [edx]
    2de1:	00 00                	add    BYTE PTR [eax],al
    2de3:	01 42 6f             	add    DWORD PTR [edx+0x6f],eax
    2de6:	02 00                	add    al,BYTE PTR [eax]
    2de8:	00 02                	add    BYTE PTR [edx],al
    2dea:	91                   	xchg   ecx,eax
    2deb:	00 0f                	add    BYTE PTR [edi],cl
    2ded:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2dee:	0a 00                	or     al,BYTE PTR [eax]
    2df0:	00 01                	add    BYTE PTR [ecx],al
    2df2:	42                   	inc    edx
    2df3:	69 02 00 00 02 91    	imul   eax,DWORD PTR [edx],0x91020000
    2df9:	04 11                	add    al,0x11
    2dfb:	74 00                	je     2dfd <sysEnter_Vector-0x12d203>
    2dfd:	01 43 19             	add    DWORD PTR [ebx+0x19],eax
    2e00:	01 00                	add    DWORD PTR [eax],eax
    2e02:	00 02                	add    BYTE PTR [edx],al
    2e04:	91                   	xchg   ecx,eax
    2e05:	6c                   	ins    BYTE PTR es:[edi],dx
    2e06:	00 0e                	add    BYTE PTR [esi],cl
    2e08:	45                   	inc    ebp
    2e09:	0a 00                	or     al,BYTE PTR [eax]
    2e0b:	00 01                	add    BYTE PTR [ecx],al
    2e0d:	49                   	dec    ecx
    2e0e:	19 01                	sbb    DWORD PTR [ecx],eax
    2e10:	00 00                	add    BYTE PTR [eax],al
    2e12:	9b                   	fwait
    2e13:	1c 00                	sbb    al,0x0
    2e15:	30 57 08             	xor    BYTE PTR [edi+0x8],dl
    2e18:	00 00                	add    BYTE PTR [eax],al
    2e1a:	01 9c 96 03 00 00 0f 	add    DWORD PTR [esi+edx*4+0xf000003],ebx
    2e21:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e22:	0a 00                	or     al,BYTE PTR [eax]
    2e24:	00 01                	add    BYTE PTR [ecx],al
    2e26:	49                   	dec    ecx
    2e27:	69 02 00 00 02 91    	imul   eax,DWORD PTR [edx],0x91020000
    2e2d:	00 11                	add    BYTE PTR [ecx],dl
    2e2f:	64                   	fs
    2e30:	61                   	popa   
    2e31:	79 00                	jns    2e33 <sysEnter_Vector-0x12d1cd>
    2e33:	01 4a 04             	add    DWORD PTR [edx+0x4],ecx
    2e36:	01 00                	add    DWORD PTR [eax],eax
    2e38:	00 02                	add    BYTE PTR [edx],al
    2e3a:	91                   	xchg   ecx,eax
    2e3b:	68 0d 04 04 00       	push   0x4040d
    2e40:	00 01                	add    BYTE PTR [ecx],al
    2e42:	4a                   	dec    edx
    2e43:	04 01                	add    al,0x1
    2e45:	00 00                	add    BYTE PTR [eax],al
    2e47:	02 91 54 0d 01 04    	add    dl,BYTE PTR [ecx+0x4010d54]
    2e4d:	00 00                	add    BYTE PTR [eax],al
    2e4f:	01 4b d6             	add    DWORD PTR [ebx-0x2a],ecx
    2e52:	00 00                	add    BYTE PTR [eax],al
    2e54:	00 02                	add    BYTE PTR [edx],al
    2e56:	91                   	xchg   ecx,eax
    2e57:	4c                   	dec    esp
    2e58:	0d 85 04 00 00       	or     eax,0x485
    2e5d:	01 4c d6 00          	add    DWORD PTR [esi+edx*8+0x0],ecx
    2e61:	00 00                	add    BYTE PTR [eax],al
    2e63:	02 91 64 0d 68 0a    	add    dl,BYTE PTR [ecx+0xa680d64]
    2e69:	00 00                	add    BYTE PTR [eax],al
    2e6b:	01 4c d6 00          	add    DWORD PTR [esi+edx*8+0x0],ecx
    2e6f:	00 00                	add    BYTE PTR [eax],al
    2e71:	02 91 60 0d d5 04    	add    dl,BYTE PTR [ecx+0x4d50d60]
    2e77:	00 00                	add    BYTE PTR [eax],al
    2e79:	01 4d 04             	add    DWORD PTR [ebp+0x4],ecx
    2e7c:	01 00                	add    DWORD PTR [eax],eax
    2e7e:	00 02                	add    BYTE PTR [edx],al
    2e80:	91                   	xchg   ecx,eax
    2e81:	50                   	push   eax
    2e82:	0d 5f 0a 00 00       	or     eax,0xa5f
    2e87:	01 4e d6             	add    DWORD PTR [esi-0x2a],ecx
    2e8a:	00 00                	add    BYTE PTR [eax],al
    2e8c:	00 02                	add    BYTE PTR [edx],al
    2e8e:	91                   	xchg   ecx,eax
    2e8f:	5c                   	pop    esp
    2e90:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    2e94:	00 01                	add    BYTE PTR [ecx],al
    2e96:	4f                   	dec    edi
    2e97:	04 01                	add    al,0x1
    2e99:	00 00                	add    BYTE PTR [eax],al
    2e9b:	02 91 58 00 12 3f    	add    dl,BYTE PTR [ecx+0x3f120058]
    2ea1:	00 00                	add    BYTE PTR [eax],al
    2ea3:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2ea6:	f2 00 00             	repnz add BYTE PTR [eax],al
    2ea9:	00 05 03 ac 3b 00    	add    BYTE PTR ds:0x3bac03,al
    2eaf:	30 12                	xor    BYTE PTR [edx],dl
    2eb1:	aa                   	stos   BYTE PTR es:[edi],al
    2eb2:	00 00                	add    BYTE PTR [eax],al
    2eb4:	00 04 35 f2 00 00 00 	add    BYTE PTR [esi*1+0xf2],al
    2ebb:	05 03 b0 3b 00       	add    eax,0x3bb003
    2ec0:	30 12                	xor    BYTE PTR [edx],dl
    2ec2:	56                   	push   esi
    2ec3:	01 00                	add    DWORD PTR [eax],eax
    2ec5:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2ec8:	f2 00 00             	repnz add BYTE PTR [eax],al
    2ecb:	00 05 03 a8 3b 00    	add    BYTE PTR ds:0x3ba803,al
    2ed1:	30 12                	xor    BYTE PTR [edx],dl
    2ed3:	48                   	dec    eax
    2ed4:	00 00                	add    BYTE PTR [eax],al
    2ed6:	00 05 3b 19 01 00    	add    BYTE PTR ds:0x1193b,al
    2edc:	00 05 03 b4 3b 00    	add    BYTE PTR ds:0x3bb403,al
    2ee2:	30 12                	xor    BYTE PTR [edx],dl
    2ee4:	55                   	push   ebp
    2ee5:	0a 00                	or     al,BYTE PTR [eax]
    2ee7:	00 01                	add    BYTE PTR [ecx],al
    2ee9:	0c d6                	or     al,0xd6
    2eeb:	00 00                	add    BYTE PTR [eax],al
    2eed:	00 05 03 a8 3a 00    	add    BYTE PTR ds:0x3aa803,al
    2ef3:	30 12                	xor    BYTE PTR [edx],dl
    2ef5:	07                   	pop    es
    2ef6:	0a 00                	or     al,BYTE PTR [eax]
    2ef8:	00 01                	add    BYTE PTR [ecx],al
    2efa:	0d 04 01 00 00       	or     eax,0x104
    2eff:	05 03 d8 3b 00       	add    eax,0x3bd803
    2f04:	30 13                	xor    BYTE PTR [ebx],dl
    2f06:	cd 01                	int    0x1
    2f08:	00 00                	add    BYTE PTR [eax],al
    2f0a:	0c 04                	or     al,0x4
    2f0c:	00 00                	add    BYTE PTR [eax],al
    2f0e:	14 c6                	adc    al,0xc6
    2f10:	01 00                	add    DWORD PTR [eax],eax
    2f12:	00 01                	add    BYTE PTR [ecx],al
    2f14:	00 12                	add    BYTE PTR [edx],dl
    2f16:	2b 0a                	sub    ecx,DWORD PTR [edx]
    2f18:	00 00                	add    BYTE PTR [eax],al
    2f1a:	01 0e                	add    DWORD PTR [esi],ecx
    2f1c:	fc                   	cld    
    2f1d:	03 00                	add    eax,DWORD PTR [eax]
    2f1f:	00 05 03 a0 3b 00    	add    BYTE PTR ds:0x3ba003,al
    2f25:	30 12                	xor    BYTE PTR [edx],dl
    2f27:	39 0a                	cmp    DWORD PTR [edx],ecx
    2f29:	00 00                	add    BYTE PTR [eax],al
    2f2b:	01 0f                	add    DWORD PTR [edi],ecx
    2f2d:	d6                   	(bad)  
    2f2e:	00 00                	add    BYTE PTR [eax],al
    2f30:	00 05 03 dc 3b 00    	add    BYTE PTR ds:0x3bdc03,al
    2f36:	30 13                	xor    BYTE PTR [ebx],dl
    2f38:	d6                   	(bad)  
    2f39:	00 00                	add    BYTE PTR [eax],al
    2f3b:	00 44 04 00          	add    BYTE PTR [esp+eax*1+0x0],al
    2f3f:	00 14 c6             	add    BYTE PTR [esi+eax*8],dl
    2f42:	01 00                	add    DWORD PTR [eax],eax
    2f44:	00 01                	add    BYTE PTR [ecx],al
    2f46:	14 c6                	adc    al,0xc6
    2f48:	01 00                	add    DWORD PTR [eax],eax
    2f4a:	00 0b                	add    BYTE PTR [ebx],cl
    2f4c:	00 12                	add    BYTE PTR [edx],dl
    2f4e:	33 0a                	xor    ecx,DWORD PTR [edx]
    2f50:	00 00                	add    BYTE PTR [eax],al
    2f52:	01 11                	add    DWORD PTR [ecx],edx
    2f54:	55                   	push   ebp
    2f55:	04 00                	add    al,0x0
    2f57:	00 05 03 a0 38 00    	add    BYTE PTR ds:0x38a003,al
    2f5d:	30 0b                	xor    BYTE PTR [ebx],cl
    2f5f:	2e                   	cs
    2f60:	04 00                	add    al,0x0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	0b 01                	or     eax,DWORD PTR [ecx]
     231:	11 01                	adc    DWORD PTR [ecx],eax
     233:	12 06                	adc    al,BYTE PTR [esi]
     235:	00 00                	add    BYTE PTR [eax],al
     237:	0a 2e                	or     ch,BYTE PTR [esi]
     239:	01 3f                	add    DWORD PTR [edi],edi
     23b:	19 03                	sbb    DWORD PTR [ebx],eax
     23d:	0e                   	push   cs
     23e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     240:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     242:	49                   	dec    ecx
     243:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     246:	00 00                	add    BYTE PTR [eax],al
     248:	0b 18                	or     ebx,DWORD PTR [eax]
     24a:	00 00                	add    BYTE PTR [eax],al
     24c:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     24f:	00 03                	add    BYTE PTR [ebx],al
     251:	0e                   	push   cs
     252:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     254:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     256:	49                   	dec    ecx
     257:	13 02                	adc    eax,DWORD PTR [edx]
     259:	18 00                	sbb    BYTE PTR [eax],al
     25b:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     261:	03 0e                	add    ecx,DWORD PTR [esi]
     263:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     265:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     267:	27                   	daa    
     268:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     26b:	11 01                	adc    DWORD PTR [ecx],eax
     26d:	12 06                	adc    al,BYTE PTR [esi]
     26f:	40                   	inc    eax
     270:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     276:	00 00                	add    BYTE PTR [eax],al
     278:	0e                   	push   cs
     279:	34 00                	xor    al,0x0
     27b:	03 0e                	add    ecx,DWORD PTR [esi]
     27d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     27f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     281:	49                   	dec    ecx
     282:	13 3f                	adc    edi,DWORD PTR [edi]
     284:	19 02                	sbb    DWORD PTR [edx],eax
     286:	18 00                	sbb    BYTE PTR [eax],al
     288:	00 00                	add    BYTE PTR [eax],al
     28a:	01 11                	add    DWORD PTR [ecx],edx
     28c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     292:	0e                   	push   cs
     293:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     295:	11 01                	adc    DWORD PTR [ecx],eax
     297:	12 06                	adc    al,BYTE PTR [esi]
     299:	10 17                	adc    BYTE PTR [edi],dl
     29b:	00 00                	add    BYTE PTR [eax],al
     29d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     2a0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     2a2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     2a5:	0e                   	push   cs
     2a6:	00 00                	add    BYTE PTR [eax],al
     2a8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     2ab:	0b 0b                	or     ecx,DWORD PTR [ebx]
     2ad:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     2b0:	08 00                	or     BYTE PTR [eax],al
     2b2:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     2b5:	00 03                	add    BYTE PTR [ebx],al
     2b7:	0e                   	push   cs
     2b8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ba:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2bc:	49                   	dec    ecx
     2bd:	13 00                	adc    eax,DWORD PTR [eax]
     2bf:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     2c5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     2c7:	49                   	dec    ecx
     2c8:	13 3a                	adc    edi,DWORD PTR [edx]
     2ca:	0b 3b                	or     edi,DWORD PTR [ebx]
     2cc:	0b 01                	or     eax,DWORD PTR [ecx]
     2ce:	13 00                	adc    eax,DWORD PTR [eax]
     2d0:	00 06                	add    BYTE PTR [esi],al
     2d2:	28 00                	sub    BYTE PTR [eax],al
     2d4:	03 0e                	add    ecx,DWORD PTR [esi]
     2d6:	1c 0b                	sbb    al,0xb
     2d8:	00 00                	add    BYTE PTR [eax],al
     2da:	07                   	pop    es
     2db:	28 00                	sub    BYTE PTR [eax],al
     2dd:	03 0e                	add    ecx,DWORD PTR [esi]
     2df:	1c 05                	sbb    al,0x5
     2e1:	00 00                	add    BYTE PTR [eax],al
     2e3:	08 0f                	or     BYTE PTR [edi],cl
     2e5:	00 0b                	add    BYTE PTR [ebx],cl
     2e7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2ea:	00 00                	add    BYTE PTR [eax],al
     2ec:	09 2e                	or     DWORD PTR [esi],ebp
     2ee:	01 3f                	add    DWORD PTR [edi],edi
     2f0:	19 03                	sbb    DWORD PTR [ebx],eax
     2f2:	0e                   	push   cs
     2f3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2f5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f7:	27                   	daa    
     2f8:	19 11                	sbb    DWORD PTR [ecx],edx
     2fa:	01 12                	add    DWORD PTR [edx],edx
     2fc:	06                   	push   es
     2fd:	40                   	inc    eax
     2fe:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     304:	00 00                	add    BYTE PTR [eax],al
     306:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     30c:	0b 3b                	or     edi,DWORD PTR [ebx]
     30e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     311:	02 18                	add    bl,BYTE PTR [eax]
     313:	00 00                	add    BYTE PTR [eax],al
     315:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     31b:	0b 3b                	or     edi,DWORD PTR [ebx]
     31d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     320:	02 18                	add    bl,BYTE PTR [eax]
     322:	00 00                	add    BYTE PTR [eax],al
     324:	0c 34                	or     al,0x34
     326:	00 03                	add    BYTE PTR [ebx],al
     328:	0e                   	push   cs
     329:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     32b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     32d:	49                   	dec    ecx
     32e:	13 02                	adc    eax,DWORD PTR [edx]
     330:	18 00                	sbb    BYTE PTR [eax],al
     332:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     338:	01 13                	add    DWORD PTR [ebx],edx
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	0e                   	push   cs
     33d:	21 00                	and    DWORD PTR [eax],eax
     33f:	49                   	dec    ecx
     340:	13 2f                	adc    ebp,DWORD PTR [edi]
     342:	0b 00                	or     eax,DWORD PTR [eax]
     344:	00 0f                	add    BYTE PTR [edi],cl
     346:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     349:	19 03                	sbb    DWORD PTR [ebx],eax
     34b:	0e                   	push   cs
     34c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     34e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     350:	49                   	dec    ecx
     351:	13 11                	adc    edx,DWORD PTR [ecx]
     353:	01 12                	add    DWORD PTR [edx],edx
     355:	06                   	push   es
     356:	40                   	inc    eax
     357:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     362:	03 08                	add    ecx,DWORD PTR [eax]
     364:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     366:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     368:	49                   	dec    ecx
     369:	13 02                	adc    eax,DWORD PTR [edx]
     36b:	18 00                	sbb    BYTE PTR [eax],al
     36d:	00 11                	add    BYTE PTR [ecx],dl
     36f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     372:	19 03                	sbb    DWORD PTR [ebx],eax
     374:	0e                   	push   cs
     375:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     377:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     379:	27                   	daa    
     37a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     37d:	11 01                	adc    DWORD PTR [ecx],eax
     37f:	12 06                	adc    al,BYTE PTR [esi]
     381:	40                   	inc    eax
     382:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     388:	00 00                	add    BYTE PTR [eax],al
     38a:	12 0a                	adc    cl,BYTE PTR [edx]
     38c:	00 03                	add    BYTE PTR [ebx],al
     38e:	0e                   	push   cs
     38f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     391:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     393:	11 01                	adc    DWORD PTR [ecx],eax
     395:	00 00                	add    BYTE PTR [eax],al
     397:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     39a:	03 0e                	add    ecx,DWORD PTR [esi]
     39c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     39e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3a0:	49                   	dec    ecx
     3a1:	13 3f                	adc    edi,DWORD PTR [edi]
     3a3:	19 02                	sbb    DWORD PTR [edx],eax
     3a5:	18 00                	sbb    BYTE PTR [eax],al
     3a7:	00 00                	add    BYTE PTR [eax],al
     3a9:	01 11                	add    DWORD PTR [ecx],edx
     3ab:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     3b1:	0e                   	push   cs
     3b2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     3b4:	11 01                	adc    DWORD PTR [ecx],eax
     3b6:	12 06                	adc    al,BYTE PTR [esi]
     3b8:	10 17                	adc    BYTE PTR [edi],dl
     3ba:	00 00                	add    BYTE PTR [eax],al
     3bc:	02 16                	add    dl,BYTE PTR [esi]
     3be:	00 03                	add    BYTE PTR [ebx],al
     3c0:	0e                   	push   cs
     3c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3c5:	49                   	dec    ecx
     3c6:	13 00                	adc    eax,DWORD PTR [eax]
     3c8:	00 03                	add    BYTE PTR [ebx],al
     3ca:	0f 00 0b             	str    WORD PTR [ebx]
     3cd:	0b 03                	or     eax,DWORD PTR [ebx]
     3cf:	0e                   	push   cs
     3d0:	49                   	dec    ecx
     3d1:	13 00                	adc    eax,DWORD PTR [eax]
     3d3:	00 04 24             	add    BYTE PTR [esp],al
     3d6:	00 0b                	add    BYTE PTR [ebx],cl
     3d8:	0b 3e                	or     edi,DWORD PTR [esi]
     3da:	0b 03                	or     eax,DWORD PTR [ebx]
     3dc:	0e                   	push   cs
     3dd:	00 00                	add    BYTE PTR [eax],al
     3df:	05 24 00 0b 0b       	add    eax,0xb0b0024
     3e4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     3e7:	08 00                	or     BYTE PTR [eax],al
     3e9:	00 06                	add    BYTE PTR [esi],al
     3eb:	13 01                	adc    eax,DWORD PTR [ecx]
     3ed:	03 08                	add    ecx,DWORD PTR [eax]
     3ef:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3f5:	01 13                	add    DWORD PTR [ebx],edx
     3f7:	00 00                	add    BYTE PTR [eax],al
     3f9:	07                   	pop    es
     3fa:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     3ff:	0b 3b                	or     edi,DWORD PTR [ebx]
     401:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     404:	38 0b                	cmp    BYTE PTR [ebx],cl
     406:	00 00                	add    BYTE PTR [eax],al
     408:	08 0f                	or     BYTE PTR [edi],cl
     40a:	00 0b                	add    BYTE PTR [ebx],cl
     40c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     40f:	00 00                	add    BYTE PTR [eax],al
     411:	09 26                	or     DWORD PTR [esi],esp
     413:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     416:	00 00                	add    BYTE PTR [eax],al
     418:	0a 04 01             	or     al,BYTE PTR [ecx+eax*1]
     41b:	03 0e                	add    ecx,DWORD PTR [esi]
     41d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41f:	49                   	dec    ecx
     420:	13 3a                	adc    edi,DWORD PTR [edx]
     422:	0b 3b                	or     edi,DWORD PTR [ebx]
     424:	0b 01                	or     eax,DWORD PTR [ecx]
     426:	13 00                	adc    eax,DWORD PTR [eax]
     428:	00 0b                	add    BYTE PTR [ebx],cl
     42a:	28 00                	sub    BYTE PTR [eax],al
     42c:	03 0e                	add    ecx,DWORD PTR [esi]
     42e:	1c 0b                	sbb    al,0xb
     430:	00 00                	add    BYTE PTR [eax],al
     432:	0c 28                	or     al,0x28
     434:	00 03                	add    BYTE PTR [ebx],al
     436:	0e                   	push   cs
     437:	1c 05                	sbb    al,0x5
     439:	00 00                	add    BYTE PTR [eax],al
     43b:	0d 0f 00 0b 0b       	or     eax,0xb0b000f
     440:	00 00                	add    BYTE PTR [eax],al
     442:	0e                   	push   cs
     443:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     446:	19 03                	sbb    DWORD PTR [ebx],eax
     448:	0e                   	push   cs
     449:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     44b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     44d:	27                   	daa    
     44e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     451:	11 01                	adc    DWORD PTR [ecx],eax
     453:	12 06                	adc    al,BYTE PTR [esi]
     455:	40                   	inc    eax
     456:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     45c:	00 00                	add    BYTE PTR [eax],al
     45e:	0f 05                	syscall 
     460:	00 03                	add    BYTE PTR [ebx],al
     462:	0e                   	push   cs
     463:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     465:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     467:	49                   	dec    ecx
     468:	13 02                	adc    eax,DWORD PTR [edx]
     46a:	18 00                	sbb    BYTE PTR [eax],al
     46c:	00 10                	add    BYTE PTR [eax],dl
     46e:	34 00                	xor    al,0x0
     470:	03 0e                	add    ecx,DWORD PTR [esi]
     472:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     474:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     476:	49                   	dec    ecx
     477:	13 02                	adc    eax,DWORD PTR [edx]
     479:	18 00                	sbb    BYTE PTR [eax],al
     47b:	00 11                	add    BYTE PTR [ecx],dl
     47d:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     480:	19 03                	sbb    DWORD PTR [ebx],eax
     482:	0e                   	push   cs
     483:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     485:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     487:	27                   	daa    
     488:	19 11                	sbb    DWORD PTR [ecx],edx
     48a:	01 12                	add    DWORD PTR [edx],edx
     48c:	06                   	push   es
     48d:	40                   	inc    eax
     48e:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     494:	12 2e                	adc    ch,BYTE PTR [esi]
     496:	01 3f                	add    DWORD PTR [edi],edi
     498:	19 03                	sbb    DWORD PTR [ebx],eax
     49a:	0e                   	push   cs
     49b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     49d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     49f:	27                   	daa    
     4a0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4a3:	11 01                	adc    DWORD PTR [ecx],eax
     4a5:	12 06                	adc    al,BYTE PTR [esi]
     4a7:	40                   	inc    eax
     4a8:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4ae:	00 00                	add    BYTE PTR [eax],al
     4b0:	13 18                	adc    ebx,DWORD PTR [eax]
     4b2:	00 00                	add    BYTE PTR [eax],al
     4b4:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     4b7:	01 11                	add    DWORD PTR [ecx],edx
     4b9:	01 12                	add    DWORD PTR [edx],edx
     4bb:	06                   	push   es
     4bc:	00 00                	add    BYTE PTR [eax],al
     4be:	15 34 00 03 08       	adc    eax,0x8030034
     4c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c7:	49                   	dec    ecx
     4c8:	13 02                	adc    eax,DWORD PTR [edx]
     4ca:	18 00                	sbb    BYTE PTR [eax],al
     4cc:	00 16                	add    BYTE PTR [esi],dl
     4ce:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     4d1:	19 03                	sbb    DWORD PTR [ebx],eax
     4d3:	0e                   	push   cs
     4d4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4d6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4d8:	11 01                	adc    DWORD PTR [ecx],eax
     4da:	12 06                	adc    al,BYTE PTR [esi]
     4dc:	40                   	inc    eax
     4dd:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     4e3:	17                   	pop    ss
     4e4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4e7:	19 03                	sbb    DWORD PTR [ebx],eax
     4e9:	0e                   	push   cs
     4ea:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ec:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4ee:	27                   	daa    
     4ef:	19 11                	sbb    DWORD PTR [ecx],edx
     4f1:	01 12                	add    DWORD PTR [edx],edx
     4f3:	06                   	push   es
     4f4:	40                   	inc    eax
     4f5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4fb:	00 00                	add    BYTE PTR [eax],al
     4fd:	18 05 00 03 08 3a    	sbb    BYTE PTR ds:0x3a080300,al
     503:	0b 3b                	or     edi,DWORD PTR [ebx]
     505:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     508:	02 18                	add    bl,BYTE PTR [eax]
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	19 2e                	sbb    DWORD PTR [esi],ebp
     50e:	01 3f                	add    DWORD PTR [edi],edi
     510:	19 03                	sbb    DWORD PTR [ebx],eax
     512:	0e                   	push   cs
     513:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     515:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     517:	49                   	dec    ecx
     518:	13 11                	adc    edx,DWORD PTR [ecx]
     51a:	01 12                	add    DWORD PTR [edx],edx
     51c:	06                   	push   es
     51d:	40                   	inc    eax
     51e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     524:	00 00                	add    BYTE PTR [eax],al
     526:	1a 34 00             	sbb    dh,BYTE PTR [eax+eax*1]
     529:	03 0e                	add    ecx,DWORD PTR [esi]
     52b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     52d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     52f:	49                   	dec    ecx
     530:	13 3f                	adc    edi,DWORD PTR [edi]
     532:	19 02                	sbb    DWORD PTR [edx],eax
     534:	18 00                	sbb    BYTE PTR [eax],al
     536:	00 00                	add    BYTE PTR [eax],al
     538:	01 11                	add    DWORD PTR [ecx],edx
     53a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     540:	0e                   	push   cs
     541:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     543:	11 01                	adc    DWORD PTR [ecx],eax
     545:	12 06                	adc    al,BYTE PTR [esi]
     547:	10 17                	adc    BYTE PTR [edi],dl
     549:	00 00                	add    BYTE PTR [eax],al
     54b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     54e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     550:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     553:	0e                   	push   cs
     554:	00 00                	add    BYTE PTR [eax],al
     556:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     559:	0b 0b                	or     ecx,DWORD PTR [ebx]
     55b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     55e:	08 00                	or     BYTE PTR [eax],al
     560:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     563:	00 03                	add    BYTE PTR [ebx],al
     565:	0e                   	push   cs
     566:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     568:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     56a:	49                   	dec    ecx
     56b:	13 00                	adc    eax,DWORD PTR [eax]
     56d:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     573:	0b 0b                	or     ecx,DWORD PTR [ebx]
     575:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     577:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     579:	01 13                	add    DWORD PTR [ebx],edx
     57b:	00 00                	add    BYTE PTR [eax],al
     57d:	06                   	push   es
     57e:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     583:	0b 3b                	or     edi,DWORD PTR [ebx]
     585:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     588:	38 0b                	cmp    BYTE PTR [ebx],cl
     58a:	00 00                	add    BYTE PTR [eax],al
     58c:	07                   	pop    es
     58d:	0d 00 03 08 3a       	or     eax,0x3a080300
     592:	0b 3b                	or     edi,DWORD PTR [ebx]
     594:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     597:	38 0b                	cmp    BYTE PTR [ebx],cl
     599:	00 00                	add    BYTE PTR [eax],al
     59b:	08 0f                	or     BYTE PTR [edi],cl
     59d:	00 0b                	add    BYTE PTR [ebx],cl
     59f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     5a2:	00 00                	add    BYTE PTR [eax],al
     5a4:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     5a7:	03 0e                	add    ecx,DWORD PTR [esi]
     5a9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5ab:	49                   	dec    ecx
     5ac:	13 3a                	adc    edi,DWORD PTR [edx]
     5ae:	0b 3b                	or     edi,DWORD PTR [ebx]
     5b0:	0b 01                	or     eax,DWORD PTR [ecx]
     5b2:	13 00                	adc    eax,DWORD PTR [eax]
     5b4:	00 0a                	add    BYTE PTR [edx],cl
     5b6:	28 00                	sub    BYTE PTR [eax],al
     5b8:	03 0e                	add    ecx,DWORD PTR [esi]
     5ba:	1c 0b                	sbb    al,0xb
     5bc:	00 00                	add    BYTE PTR [eax],al
     5be:	0b 28                	or     ebp,DWORD PTR [eax]
     5c0:	00 03                	add    BYTE PTR [ebx],al
     5c2:	0e                   	push   cs
     5c3:	1c 05                	sbb    al,0x5
     5c5:	00 00                	add    BYTE PTR [eax],al
     5c7:	0c 0f                	or     al,0xf
     5c9:	00 0b                	add    BYTE PTR [ebx],cl
     5cb:	0b 00                	or     eax,DWORD PTR [eax]
     5cd:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     5d3:	03 0e                	add    ecx,DWORD PTR [esi]
     5d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5d7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d9:	11 01                	adc    DWORD PTR [ecx],eax
     5db:	12 06                	adc    al,BYTE PTR [esi]
     5dd:	40                   	inc    eax
     5de:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5e4:	0e                   	push   cs
     5e5:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     5e8:	19 03                	sbb    DWORD PTR [ebx],eax
     5ea:	0e                   	push   cs
     5eb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ed:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5ef:	27                   	daa    
     5f0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5f3:	11 01                	adc    DWORD PTR [ecx],eax
     5f5:	12 06                	adc    al,BYTE PTR [esi]
     5f7:	40                   	inc    eax
     5f8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5fe:	00 00                	add    BYTE PTR [eax],al
     600:	0f 05                	syscall 
     602:	00 03                	add    BYTE PTR [ebx],al
     604:	0e                   	push   cs
     605:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     607:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     609:	49                   	dec    ecx
     60a:	13 02                	adc    eax,DWORD PTR [edx]
     60c:	18 00                	sbb    BYTE PTR [eax],al
     60e:	00 10                	add    BYTE PTR [eax],dl
     610:	34 00                	xor    al,0x0
     612:	03 0e                	add    ecx,DWORD PTR [esi]
     614:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     616:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     618:	49                   	dec    ecx
     619:	13 02                	adc    eax,DWORD PTR [edx]
     61b:	18 00                	sbb    BYTE PTR [eax],al
     61d:	00 11                	add    BYTE PTR [ecx],dl
     61f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     622:	19 03                	sbb    DWORD PTR [ebx],eax
     624:	0e                   	push   cs
     625:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     627:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     629:	27                   	daa    
     62a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     62d:	11 01                	adc    DWORD PTR [ecx],eax
     62f:	12 06                	adc    al,BYTE PTR [esi]
     631:	40                   	inc    eax
     632:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     638:	00 00                	add    BYTE PTR [eax],al
     63a:	12 2e                	adc    ch,BYTE PTR [esi]
     63c:	01 3f                	add    DWORD PTR [edi],edi
     63e:	19 03                	sbb    DWORD PTR [ebx],eax
     640:	0e                   	push   cs
     641:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     643:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     645:	27                   	daa    
     646:	19 11                	sbb    DWORD PTR [ecx],edx
     648:	01 12                	add    DWORD PTR [edx],edx
     64a:	06                   	push   es
     64b:	40                   	inc    eax
     64c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     652:	00 00                	add    BYTE PTR [eax],al
     654:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     657:	03 08                	add    ecx,DWORD PTR [eax]
     659:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     65b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     65d:	49                   	dec    ecx
     65e:	13 02                	adc    eax,DWORD PTR [edx]
     660:	18 00                	sbb    BYTE PTR [eax],al
     662:	00 14 0a             	add    BYTE PTR [edx+ecx*1],dl
     665:	00 03                	add    BYTE PTR [ebx],al
     667:	0e                   	push   cs
     668:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     66a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     66c:	11 01                	adc    DWORD PTR [ecx],eax
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	15 2e 00 3f 19       	adc    eax,0x193f002e
     675:	03 0e                	add    ecx,DWORD PTR [esi]
     677:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     679:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     67b:	11 01                	adc    DWORD PTR [ecx],eax
     67d:	12 06                	adc    al,BYTE PTR [esi]
     67f:	40                   	inc    eax
     680:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     686:	16                   	push   ss
     687:	34 00                	xor    al,0x0
     689:	03 0e                	add    ecx,DWORD PTR [esi]
     68b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     68d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     68f:	49                   	dec    ecx
     690:	13 3f                	adc    edi,DWORD PTR [edi]
     692:	19 02                	sbb    DWORD PTR [edx],eax
     694:	18 00                	sbb    BYTE PTR [eax],al
     696:	00 00                	add    BYTE PTR [eax],al
     698:	01 11                	add    DWORD PTR [ecx],edx
     69a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6a0:	0e                   	push   cs
     6a1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6a3:	11 01                	adc    DWORD PTR [ecx],eax
     6a5:	12 06                	adc    al,BYTE PTR [esi]
     6a7:	10 17                	adc    BYTE PTR [edi],dl
     6a9:	00 00                	add    BYTE PTR [eax],al
     6ab:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6ae:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6b0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6b3:	0e                   	push   cs
     6b4:	00 00                	add    BYTE PTR [eax],al
     6b6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6b9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6bb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6be:	08 00                	or     BYTE PTR [eax],al
     6c0:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     6c3:	00 0b                	add    BYTE PTR [ebx],cl
     6c5:	0b 00                	or     eax,DWORD PTR [eax]
     6c7:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     6cd:	49                   	dec    ecx
     6ce:	13 00                	adc    eax,DWORD PTR [eax]
     6d0:	00 06                	add    BYTE PTR [esi],al
     6d2:	16                   	push   ss
     6d3:	00 03                	add    BYTE PTR [ebx],al
     6d5:	0e                   	push   cs
     6d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6da:	49                   	dec    ecx
     6db:	13 00                	adc    eax,DWORD PTR [eax]
     6dd:	00 07                	add    BYTE PTR [edi],al
     6df:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     6e3:	00 00                	add    BYTE PTR [eax],al
     6e5:	08 2e                	or     BYTE PTR [esi],ch
     6e7:	01 3f                	add    DWORD PTR [edi],edi
     6e9:	19 03                	sbb    DWORD PTR [ebx],eax
     6eb:	0e                   	push   cs
     6ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f0:	27                   	daa    
     6f1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6f4:	11 01                	adc    DWORD PTR [ecx],eax
     6f6:	12 06                	adc    al,BYTE PTR [esi]
     6f8:	40                   	inc    eax
     6f9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     6ff:	00 00                	add    BYTE PTR [eax],al
     701:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     707:	0b 3b                	or     edi,DWORD PTR [ebx]
     709:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     70c:	02 18                	add    bl,BYTE PTR [eax]
     70e:	00 00                	add    BYTE PTR [eax],al
     710:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     716:	0b 3b                	or     edi,DWORD PTR [ebx]
     718:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     71b:	02 18                	add    bl,BYTE PTR [eax]
     71d:	00 00                	add    BYTE PTR [eax],al
     71f:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     722:	03 08                	add    ecx,DWORD PTR [eax]
     724:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     726:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     728:	49                   	dec    ecx
     729:	13 02                	adc    eax,DWORD PTR [edx]
     72b:	18 00                	sbb    BYTE PTR [eax],al
     72d:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     730:	01 11                	add    DWORD PTR [ecx],edx
     732:	01 12                	add    DWORD PTR [edx],edx
     734:	06                   	push   es
     735:	01 13                	add    DWORD PTR [ebx],edx
     737:	00 00                	add    BYTE PTR [eax],al
     739:	0d 0b 01 11 01       	or     eax,0x111010b
     73e:	12 06                	adc    al,BYTE PTR [esi]
     740:	00 00                	add    BYTE PTR [eax],al
     742:	0e                   	push   cs
     743:	26 00 00             	add    BYTE PTR es:[eax],al
     746:	00 0f                	add    BYTE PTR [edi],cl
     748:	34 00                	xor    al,0x0
     74a:	03 0e                	add    ecx,DWORD PTR [esi]
     74c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     74e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     750:	49                   	dec    ecx
     751:	13 3f                	adc    edi,DWORD PTR [edi]
     753:	19 02                	sbb    DWORD PTR [edx],eax
     755:	18 00                	sbb    BYTE PTR [eax],al
     757:	00 00                	add    BYTE PTR [eax],al
     759:	01 11                	add    DWORD PTR [ecx],edx
     75b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     761:	0e                   	push   cs
     762:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     764:	11 01                	adc    DWORD PTR [ecx],eax
     766:	12 06                	adc    al,BYTE PTR [esi]
     768:	10 17                	adc    BYTE PTR [edi],dl
     76a:	00 00                	add    BYTE PTR [eax],al
     76c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     76f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     771:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     774:	0e                   	push   cs
     775:	00 00                	add    BYTE PTR [eax],al
     777:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     77a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     77c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     77f:	08 00                	or     BYTE PTR [eax],al
     781:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     784:	00 03                	add    BYTE PTR [ebx],al
     786:	0e                   	push   cs
     787:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     789:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     78b:	49                   	dec    ecx
     78c:	13 00                	adc    eax,DWORD PTR [eax]
     78e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     794:	00 00                	add    BYTE PTR [eax],al
     796:	06                   	push   es
     797:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     79a:	19 03                	sbb    DWORD PTR [ebx],eax
     79c:	0e                   	push   cs
     79d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     79f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a1:	27                   	daa    
     7a2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7a5:	11 01                	adc    DWORD PTR [ecx],eax
     7a7:	12 06                	adc    al,BYTE PTR [esi]
     7a9:	40                   	inc    eax
     7aa:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7b0:	00 00                	add    BYTE PTR [eax],al
     7b2:	07                   	pop    es
     7b3:	05 00 03 08 3a       	add    eax,0x3a080300
     7b8:	0b 3b                	or     edi,DWORD PTR [ebx]
     7ba:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     7bd:	02 18                	add    bl,BYTE PTR [eax]
     7bf:	00 00                	add    BYTE PTR [eax],al
     7c1:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     7c4:	03 08                	add    ecx,DWORD PTR [eax]
     7c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ca:	49                   	dec    ecx
     7cb:	13 02                	adc    eax,DWORD PTR [edx]
     7cd:	18 00                	sbb    BYTE PTR [eax],al
     7cf:	00 09                	add    BYTE PTR [ecx],cl
     7d1:	34 00                	xor    al,0x0
     7d3:	03 0e                	add    ecx,DWORD PTR [esi]
     7d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d9:	49                   	dec    ecx
     7da:	13 02                	adc    eax,DWORD PTR [edx]
     7dc:	18 00                	sbb    BYTE PTR [eax],al
     7de:	00 0a                	add    BYTE PTR [edx],cl
     7e0:	0f 00 0b             	str    WORD PTR [ebx]
     7e3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     7e6:	00 00                	add    BYTE PTR [eax],al
     7e8:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     7eb:	03 0e                	add    ecx,DWORD PTR [esi]
     7ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7f1:	49                   	dec    ecx
     7f2:	13 3f                	adc    edi,DWORD PTR [edi]
     7f4:	19 02                	sbb    DWORD PTR [edx],eax
     7f6:	18 00                	sbb    BYTE PTR [eax],al
     7f8:	00 00                	add    BYTE PTR [eax],al
     7fa:	01 11                	add    DWORD PTR [ecx],edx
     7fc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     802:	0e                   	push   cs
     803:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     805:	11 01                	adc    DWORD PTR [ecx],eax
     807:	12 06                	adc    al,BYTE PTR [esi]
     809:	10 17                	adc    BYTE PTR [edi],dl
     80b:	00 00                	add    BYTE PTR [eax],al
     80d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     810:	0b 0b                	or     ecx,DWORD PTR [ebx]
     812:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     815:	0e                   	push   cs
     816:	00 00                	add    BYTE PTR [eax],al
     818:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     81b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     81d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     820:	08 00                	or     BYTE PTR [eax],al
     822:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     825:	00 03                	add    BYTE PTR [ebx],al
     827:	0e                   	push   cs
     828:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     82a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     82c:	49                   	dec    ecx
     82d:	13 00                	adc    eax,DWORD PTR [eax]
     82f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     835:	00 00                	add    BYTE PTR [eax],al
     837:	06                   	push   es
     838:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     83b:	19 03                	sbb    DWORD PTR [ebx],eax
     83d:	0e                   	push   cs
     83e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     840:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     842:	27                   	daa    
     843:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     846:	11 01                	adc    DWORD PTR [ecx],eax
     848:	12 06                	adc    al,BYTE PTR [esi]
     84a:	40                   	inc    eax
     84b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     851:	00 00                	add    BYTE PTR [eax],al
     853:	07                   	pop    es
     854:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     859:	0b 3b                	or     edi,DWORD PTR [ebx]
     85b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     85e:	02 18                	add    bl,BYTE PTR [eax]
     860:	00 00                	add    BYTE PTR [eax],al
     862:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     868:	0b 3b                	or     edi,DWORD PTR [ebx]
     86a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     86d:	02 18                	add    bl,BYTE PTR [eax]
     86f:	00 00                	add    BYTE PTR [eax],al
     871:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     874:	03 0e                	add    ecx,DWORD PTR [esi]
     876:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     878:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     87a:	49                   	dec    ecx
     87b:	13 3f                	adc    edi,DWORD PTR [edi]
     87d:	19 02                	sbb    DWORD PTR [edx],eax
     87f:	18 00                	sbb    BYTE PTR [eax],al
     881:	00 00                	add    BYTE PTR [eax],al
     883:	01 11                	add    DWORD PTR [ecx],edx
     885:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     88b:	0e                   	push   cs
     88c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     88e:	11 01                	adc    DWORD PTR [ecx],eax
     890:	12 06                	adc    al,BYTE PTR [esi]
     892:	10 17                	adc    BYTE PTR [edi],dl
     894:	00 00                	add    BYTE PTR [eax],al
     896:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     899:	0b 0b                	or     ecx,DWORD PTR [ebx]
     89b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     89e:	0e                   	push   cs
     89f:	00 00                	add    BYTE PTR [eax],al
     8a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8a9:	08 00                	or     BYTE PTR [eax],al
     8ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8ae:	00 03                	add    BYTE PTR [ebx],al
     8b0:	0e                   	push   cs
     8b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b5:	49                   	dec    ecx
     8b6:	13 00                	adc    eax,DWORD PTR [eax]
     8b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8be:	49                   	dec    ecx
     8bf:	13 00                	adc    eax,DWORD PTR [eax]
     8c1:	00 06                	add    BYTE PTR [esi],al
     8c3:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     8c7:	00 00                	add    BYTE PTR [eax],al
     8c9:	07                   	pop    es
     8ca:	0f 00 0b             	str    WORD PTR [ebx]
     8cd:	0b 00                	or     eax,DWORD PTR [eax]
     8cf:	00 08                	add    BYTE PTR [eax],cl
     8d1:	13 01                	adc    eax,DWORD PTR [ecx]
     8d3:	03 0e                	add    ecx,DWORD PTR [esi]
     8d5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8db:	01 13                	add    DWORD PTR [ebx],edx
     8dd:	00 00                	add    BYTE PTR [eax],al
     8df:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     8e5:	0b 3b                	or     edi,DWORD PTR [ebx]
     8e7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8ea:	38 0b                	cmp    BYTE PTR [ebx],cl
     8ec:	00 00                	add    BYTE PTR [eax],al
     8ee:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     8f4:	13 01                	adc    eax,DWORD PTR [ecx]
     8f6:	13 00                	adc    eax,DWORD PTR [eax]
     8f8:	00 0b                	add    BYTE PTR [ebx],cl
     8fa:	05 00 49 13 00       	add    eax,0x134900
     8ff:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     902:	01 3f                	add    DWORD PTR [edi],edi
     904:	19 03                	sbb    DWORD PTR [ebx],eax
     906:	0e                   	push   cs
     907:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     909:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     90b:	27                   	daa    
     90c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     90f:	11 01                	adc    DWORD PTR [ecx],eax
     911:	12 06                	adc    al,BYTE PTR [esi]
     913:	40                   	inc    eax
     914:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     91a:	00 00                	add    BYTE PTR [eax],al
     91c:	0d 05 00 03 0e       	or     eax,0xe030005
     921:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     923:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     925:	49                   	dec    ecx
     926:	13 02                	adc    eax,DWORD PTR [edx]
     928:	18 00                	sbb    BYTE PTR [eax],al
     92a:	00 0e                	add    BYTE PTR [esi],cl
     92c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     92f:	19 03                	sbb    DWORD PTR [ebx],eax
     931:	0e                   	push   cs
     932:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     934:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     936:	27                   	daa    
     937:	19 11                	sbb    DWORD PTR [ecx],edx
     939:	01 12                	add    DWORD PTR [edx],edx
     93b:	06                   	push   es
     93c:	40                   	inc    eax
     93d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     943:	00 00                	add    BYTE PTR [eax],al
     945:	0f 05                	syscall 
     947:	00 03                	add    BYTE PTR [ebx],al
     949:	08 3a                	or     BYTE PTR [edx],bh
     94b:	0b 3b                	or     edi,DWORD PTR [ebx]
     94d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     950:	02 18                	add    bl,BYTE PTR [eax]
     952:	00 00                	add    BYTE PTR [eax],al
     954:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     957:	03 0e                	add    ecx,DWORD PTR [esi]
     959:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     95b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     95d:	49                   	dec    ecx
     95e:	13 02                	adc    eax,DWORD PTR [edx]
     960:	18 00                	sbb    BYTE PTR [eax],al
     962:	00 11                	add    BYTE PTR [ecx],dl
     964:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     967:	19 03                	sbb    DWORD PTR [ebx],eax
     969:	0e                   	push   cs
     96a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     96c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96e:	49                   	dec    ecx
     96f:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     972:	01 13                	add    DWORD PTR [ebx],edx
     974:	00 00                	add    BYTE PTR [eax],al
     976:	12 18                	adc    bl,BYTE PTR [eax]
     978:	00 00                	add    BYTE PTR [eax],al
     97a:	00 13                	add    BYTE PTR [ebx],dl
     97c:	0b 01                	or     eax,DWORD PTR [ecx]
     97e:	11 01                	adc    DWORD PTR [ecx],eax
     980:	12 06                	adc    al,BYTE PTR [esi]
     982:	01 13                	add    DWORD PTR [ebx],edx
     984:	00 00                	add    BYTE PTR [eax],al
     986:	14 34                	adc    al,0x34
     988:	00 03                	add    BYTE PTR [ebx],al
     98a:	08 3a                	or     BYTE PTR [edx],bh
     98c:	0b 3b                	or     edi,DWORD PTR [ebx]
     98e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     991:	02 18                	add    bl,BYTE PTR [eax]
     993:	00 00                	add    BYTE PTR [eax],al
     995:	15 0b 01 11 01       	adc    eax,0x111010b
     99a:	12 06                	adc    al,BYTE PTR [esi]
     99c:	00 00                	add    BYTE PTR [eax],al
     99e:	16                   	push   ss
     99f:	01 01                	add    DWORD PTR [ecx],eax
     9a1:	49                   	dec    ecx
     9a2:	13 01                	adc    eax,DWORD PTR [ecx]
     9a4:	13 00                	adc    eax,DWORD PTR [eax]
     9a6:	00 17                	add    BYTE PTR [edi],dl
     9a8:	21 00                	and    DWORD PTR [eax],eax
     9aa:	49                   	dec    ecx
     9ab:	13 2f                	adc    ebp,DWORD PTR [edi]
     9ad:	0b 00                	or     eax,DWORD PTR [eax]
     9af:	00 18                	add    BYTE PTR [eax],bl
     9b1:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9b4:	19 03                	sbb    DWORD PTR [ebx],eax
     9b6:	0e                   	push   cs
     9b7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9b9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9bb:	11 01                	adc    DWORD PTR [ecx],eax
     9bd:	12 06                	adc    al,BYTE PTR [esi]
     9bf:	40                   	inc    eax
     9c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9c6:	00 00                	add    BYTE PTR [eax],al
     9c8:	19 2e                	sbb    DWORD PTR [esi],ebp
     9ca:	01 3f                	add    DWORD PTR [edi],edi
     9cc:	19 03                	sbb    DWORD PTR [ebx],eax
     9ce:	0e                   	push   cs
     9cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d3:	49                   	dec    ecx
     9d4:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     9d7:	00 00                	add    BYTE PTR [eax],al
     9d9:	1a 2e                	sbb    ch,BYTE PTR [esi]
     9db:	00 3f                	add    BYTE PTR [edi],bh
     9dd:	19 03                	sbb    DWORD PTR [ebx],eax
     9df:	0e                   	push   cs
     9e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e4:	11 01                	adc    DWORD PTR [ecx],eax
     9e6:	12 06                	adc    al,BYTE PTR [esi]
     9e8:	40                   	inc    eax
     9e9:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     9ef:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
     9f2:	03 0e                	add    ecx,DWORD PTR [esi]
     9f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9f8:	49                   	dec    ecx
     9f9:	13 3f                	adc    edi,DWORD PTR [edi]
     9fb:	19 02                	sbb    DWORD PTR [edx],eax
     9fd:	18 00                	sbb    BYTE PTR [eax],al
     9ff:	00 00                	add    BYTE PTR [eax],al
     a01:	01 11                	add    DWORD PTR [ecx],edx
     a03:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a09:	0e                   	push   cs
     a0a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a0c:	11 01                	adc    DWORD PTR [ecx],eax
     a0e:	12 06                	adc    al,BYTE PTR [esi]
     a10:	10 17                	adc    BYTE PTR [edi],dl
     a12:	00 00                	add    BYTE PTR [eax],al
     a14:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a17:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a19:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a1c:	0e                   	push   cs
     a1d:	00 00                	add    BYTE PTR [eax],al
     a1f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a22:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a24:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a27:	08 00                	or     BYTE PTR [eax],al
     a29:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a2c:	00 03                	add    BYTE PTR [ebx],al
     a2e:	0e                   	push   cs
     a2f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a31:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a33:	49                   	dec    ecx
     a34:	13 00                	adc    eax,DWORD PTR [eax]
     a36:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a3c:	49                   	dec    ecx
     a3d:	13 00                	adc    eax,DWORD PTR [eax]
     a3f:	00 06                	add    BYTE PTR [esi],al
     a41:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     a45:	00 00                	add    BYTE PTR [eax],al
     a47:	07                   	pop    es
     a48:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a4b:	19 03                	sbb    DWORD PTR [ebx],eax
     a4d:	0e                   	push   cs
     a4e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a50:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a52:	27                   	daa    
     a53:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a56:	11 01                	adc    DWORD PTR [ecx],eax
     a58:	12 06                	adc    al,BYTE PTR [esi]
     a5a:	40                   	inc    eax
     a5b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a61:	00 00                	add    BYTE PTR [eax],al
     a63:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     a69:	0b 3b                	or     edi,DWORD PTR [ebx]
     a6b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a6e:	02 18                	add    bl,BYTE PTR [eax]
     a70:	00 00                	add    BYTE PTR [eax],al
     a72:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     a78:	0b 3b                	or     edi,DWORD PTR [ebx]
     a7a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a7d:	02 18                	add    bl,BYTE PTR [eax]
     a7f:	00 00                	add    BYTE PTR [eax],al
     a81:	0a 2e                	or     ch,BYTE PTR [esi]
     a83:	01 3f                	add    DWORD PTR [edi],edi
     a85:	19 03                	sbb    DWORD PTR [ebx],eax
     a87:	0e                   	push   cs
     a88:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a8a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a8c:	49                   	dec    ecx
     a8d:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
     a90:	00 00                	add    BYTE PTR [eax],al
     a92:	0b 18                	or     ebx,DWORD PTR [eax]
     a94:	00 00                	add    BYTE PTR [eax],al
     a96:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     a99:	01 3f                	add    DWORD PTR [edi],edi
     a9b:	19 03                	sbb    DWORD PTR [ebx],eax
     a9d:	0e                   	push   cs
     a9e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa2:	27                   	daa    
     aa3:	19 11                	sbb    DWORD PTR [ecx],edx
     aa5:	01 12                	add    DWORD PTR [edx],edx
     aa7:	06                   	push   es
     aa8:	40                   	inc    eax
     aa9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     aaf:	00 00                	add    BYTE PTR [eax],al
     ab1:	0d 34 00 03 08       	or     eax,0x8030034
     ab6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aba:	49                   	dec    ecx
     abb:	13 02                	adc    eax,DWORD PTR [edx]
     abd:	18 00                	sbb    BYTE PTR [eax],al
     abf:	00 0e                	add    BYTE PTR [esi],cl
     ac1:	34 00                	xor    al,0x0
     ac3:	03 0e                	add    ecx,DWORD PTR [esi]
     ac5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac9:	49                   	dec    ecx
     aca:	13 3f                	adc    edi,DWORD PTR [edi]
     acc:	19 02                	sbb    DWORD PTR [edx],eax
     ace:	18 00                	sbb    BYTE PTR [eax],al
     ad0:	00 00                	add    BYTE PTR [eax],al
     ad2:	01 11                	add    DWORD PTR [ecx],edx
     ad4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ada:	0e                   	push   cs
     adb:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     add:	11 01                	adc    DWORD PTR [ecx],eax
     adf:	12 06                	adc    al,BYTE PTR [esi]
     ae1:	10 17                	adc    BYTE PTR [edi],dl
     ae3:	00 00                	add    BYTE PTR [eax],al
     ae5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ae8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     aea:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     aed:	0e                   	push   cs
     aee:	00 00                	add    BYTE PTR [eax],al
     af0:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     af3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     af5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     af8:	08 00                	or     BYTE PTR [eax],al
     afa:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     afd:	00 03                	add    BYTE PTR [ebx],al
     aff:	0e                   	push   cs
     b00:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b02:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b04:	49                   	dec    ecx
     b05:	13 00                	adc    eax,DWORD PTR [eax]
     b07:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b0d:	49                   	dec    ecx
     b0e:	13 00                	adc    eax,DWORD PTR [eax]
     b10:	00 06                	add    BYTE PTR [esi],al
     b12:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b16:	00 00                	add    BYTE PTR [eax],al
     b18:	07                   	pop    es
     b19:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     b1c:	19 03                	sbb    DWORD PTR [ebx],eax
     b1e:	0e                   	push   cs
     b1f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b21:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b23:	27                   	daa    
     b24:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b27:	11 01                	adc    DWORD PTR [ecx],eax
     b29:	12 06                	adc    al,BYTE PTR [esi]
     b2b:	40                   	inc    eax
     b2c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b32:	00 00                	add    BYTE PTR [eax],al
     b34:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     b3a:	0b 3b                	or     edi,DWORD PTR [ebx]
     b3c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b3f:	02 18                	add    bl,BYTE PTR [eax]
     b41:	00 00                	add    BYTE PTR [eax],al
     b43:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     b46:	03 08                	add    ecx,DWORD PTR [eax]
     b48:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b4a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b4c:	49                   	dec    ecx
     b4d:	13 02                	adc    eax,DWORD PTR [edx]
     b4f:	18 00                	sbb    BYTE PTR [eax],al
     b51:	00 0a                	add    BYTE PTR [edx],cl
     b53:	34 00                	xor    al,0x0
     b55:	03 0e                	add    ecx,DWORD PTR [esi]
     b57:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b59:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b5b:	49                   	dec    ecx
     b5c:	13 3f                	adc    edi,DWORD PTR [edi]
     b5e:	19 02                	sbb    DWORD PTR [edx],eax
     b60:	18 00                	sbb    BYTE PTR [eax],al
     b62:	00 00                	add    BYTE PTR [eax],al
     b64:	01 11                	add    DWORD PTR [ecx],edx
     b66:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b6c:	0e                   	push   cs
     b6d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b6f:	11 01                	adc    DWORD PTR [ecx],eax
     b71:	12 06                	adc    al,BYTE PTR [esi]
     b73:	10 17                	adc    BYTE PTR [edi],dl
     b75:	00 00                	add    BYTE PTR [eax],al
     b77:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b7a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b7c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b7f:	0e                   	push   cs
     b80:	00 00                	add    BYTE PTR [eax],al
     b82:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b85:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b87:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b8a:	08 00                	or     BYTE PTR [eax],al
     b8c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b8f:	00 03                	add    BYTE PTR [ebx],al
     b91:	0e                   	push   cs
     b92:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b94:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b96:	49                   	dec    ecx
     b97:	13 00                	adc    eax,DWORD PTR [eax]
     b99:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b9f:	49                   	dec    ecx
     ba0:	13 00                	adc    eax,DWORD PTR [eax]
     ba2:	00 06                	add    BYTE PTR [esi],al
     ba4:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ba8:	00 00                	add    BYTE PTR [eax],al
     baa:	07                   	pop    es
     bab:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bae:	19 03                	sbb    DWORD PTR [ebx],eax
     bb0:	0e                   	push   cs
     bb1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bb3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bb5:	27                   	daa    
     bb6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bb9:	11 01                	adc    DWORD PTR [ecx],eax
     bbb:	12 06                	adc    al,BYTE PTR [esi]
     bbd:	40                   	inc    eax
     bbe:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     bc4:	00 00                	add    BYTE PTR [eax],al
     bc6:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     bcc:	0b 3b                	or     edi,DWORD PTR [ebx]
     bce:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bd1:	02 18                	add    bl,BYTE PTR [eax]
     bd3:	00 00                	add    BYTE PTR [eax],al
     bd5:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     bd8:	03 08                	add    ecx,DWORD PTR [eax]
     bda:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bdc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bde:	49                   	dec    ecx
     bdf:	13 02                	adc    eax,DWORD PTR [edx]
     be1:	18 00                	sbb    BYTE PTR [eax],al
     be3:	00 0a                	add    BYTE PTR [edx],cl
     be5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     bea:	0b 3b                	or     edi,DWORD PTR [ebx]
     bec:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bef:	02 18                	add    bl,BYTE PTR [eax]
     bf1:	00 00                	add    BYTE PTR [eax],al
     bf3:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     bf6:	03 0e                	add    ecx,DWORD PTR [esi]
     bf8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bfa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bfc:	49                   	dec    ecx
     bfd:	13 3f                	adc    edi,DWORD PTR [edi]
     bff:	19 02                	sbb    DWORD PTR [edx],eax
     c01:	18 00                	sbb    BYTE PTR [eax],al
     c03:	00 00                	add    BYTE PTR [eax],al
     c05:	01 11                	add    DWORD PTR [ecx],edx
     c07:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c0d:	0e                   	push   cs
     c0e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c10:	11 01                	adc    DWORD PTR [ecx],eax
     c12:	12 06                	adc    al,BYTE PTR [esi]
     c14:	10 17                	adc    BYTE PTR [edi],dl
     c16:	00 00                	add    BYTE PTR [eax],al
     c18:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c1b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c1d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c20:	0e                   	push   cs
     c21:	00 00                	add    BYTE PTR [eax],al
     c23:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c26:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c28:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c2b:	08 00                	or     BYTE PTR [eax],al
     c2d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c30:	00 03                	add    BYTE PTR [ebx],al
     c32:	0e                   	push   cs
     c33:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c35:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c37:	49                   	dec    ecx
     c38:	13 00                	adc    eax,DWORD PTR [eax]
     c3a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c40:	49                   	dec    ecx
     c41:	13 00                	adc    eax,DWORD PTR [eax]
     c43:	00 06                	add    BYTE PTR [esi],al
     c45:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c48:	19 03                	sbb    DWORD PTR [ebx],eax
     c4a:	0e                   	push   cs
     c4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c4f:	27                   	daa    
     c50:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c53:	11 01                	adc    DWORD PTR [ecx],eax
     c55:	12 06                	adc    al,BYTE PTR [esi]
     c57:	40                   	inc    eax
     c58:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c5e:	00 00                	add    BYTE PTR [eax],al
     c60:	07                   	pop    es
     c61:	05 00 03 08 3a       	add    eax,0x3a080300
     c66:	0b 3b                	or     edi,DWORD PTR [ebx]
     c68:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c6b:	02 18                	add    bl,BYTE PTR [eax]
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	08 2e                	or     BYTE PTR [esi],ch
     c71:	01 3f                	add    DWORD PTR [edi],edi
     c73:	19 03                	sbb    DWORD PTR [ebx],eax
     c75:	0e                   	push   cs
     c76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c7a:	27                   	daa    
     c7b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c7e:	11 01                	adc    DWORD PTR [ecx],eax
     c80:	12 06                	adc    al,BYTE PTR [esi]
     c82:	40                   	inc    eax
     c83:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c89:	00 00                	add    BYTE PTR [eax],al
     c8b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c8e:	03 08                	add    ecx,DWORD PTR [eax]
     c90:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c92:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c94:	49                   	dec    ecx
     c95:	13 02                	adc    eax,DWORD PTR [edx]
     c97:	18 00                	sbb    BYTE PTR [eax],al
     c99:	00 0a                	add    BYTE PTR [edx],cl
     c9b:	34 00                	xor    al,0x0
     c9d:	03 0e                	add    ecx,DWORD PTR [esi]
     c9f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ca1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca3:	49                   	dec    ecx
     ca4:	13 3f                	adc    edi,DWORD PTR [edi]
     ca6:	19 02                	sbb    DWORD PTR [edx],eax
     ca8:	18 00                	sbb    BYTE PTR [eax],al
     caa:	00 00                	add    BYTE PTR [eax],al
     cac:	01 11                	add    DWORD PTR [ecx],edx
     cae:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cb4:	0e                   	push   cs
     cb5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cb7:	11 01                	adc    DWORD PTR [ecx],eax
     cb9:	12 06                	adc    al,BYTE PTR [esi]
     cbb:	10 17                	adc    BYTE PTR [edi],dl
     cbd:	00 00                	add    BYTE PTR [eax],al
     cbf:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     cc2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cc4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cc7:	08 00                	or     BYTE PTR [eax],al
     cc9:	00 03                	add    BYTE PTR [ebx],al
     ccb:	16                   	push   ss
     ccc:	00 03                	add    BYTE PTR [ebx],al
     cce:	0e                   	push   cs
     ccf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cd1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cd3:	49                   	dec    ecx
     cd4:	13 00                	adc    eax,DWORD PTR [eax]
     cd6:	00 04 24             	add    BYTE PTR [esp],al
     cd9:	00 0b                	add    BYTE PTR [ebx],cl
     cdb:	0b 3e                	or     edi,DWORD PTR [esi]
     cdd:	0b 03                	or     eax,DWORD PTR [ebx]
     cdf:	0e                   	push   cs
     ce0:	00 00                	add    BYTE PTR [eax],al
     ce2:	05 2e 01 3f 19       	add    eax,0x193f012e
     ce7:	03 0e                	add    ecx,DWORD PTR [esi]
     ce9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ceb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ced:	27                   	daa    
     cee:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cf1:	11 01                	adc    DWORD PTR [ecx],eax
     cf3:	12 06                	adc    al,BYTE PTR [esi]
     cf5:	40                   	inc    eax
     cf6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     cfc:	00 00                	add    BYTE PTR [eax],al
     cfe:	06                   	push   es
     cff:	05 00 03 08 3a       	add    eax,0x3a080300
     d04:	0b 3b                	or     edi,DWORD PTR [ebx]
     d06:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d09:	02 18                	add    bl,BYTE PTR [eax]
     d0b:	00 00                	add    BYTE PTR [eax],al
     d0d:	07                   	pop    es
     d0e:	34 00                	xor    al,0x0
     d10:	03 08                	add    ecx,DWORD PTR [eax]
     d12:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d14:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d16:	49                   	dec    ecx
     d17:	13 02                	adc    eax,DWORD PTR [edx]
     d19:	18 00                	sbb    BYTE PTR [eax],al
     d1b:	00 08                	add    BYTE PTR [eax],cl
     d1d:	0f 00 0b             	str    WORD PTR [ebx]
     d20:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d23:	00 00                	add    BYTE PTR [eax],al
     d25:	09 26                	or     DWORD PTR [esi],esp
     d27:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     d2a:	00 00                	add    BYTE PTR [eax],al
     d2c:	0a 2e                	or     ch,BYTE PTR [esi]
     d2e:	01 3f                	add    DWORD PTR [edi],edi
     d30:	19 03                	sbb    DWORD PTR [ebx],eax
     d32:	0e                   	push   cs
     d33:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d35:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d37:	27                   	daa    
     d38:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d3b:	11 01                	adc    DWORD PTR [ecx],eax
     d3d:	12 06                	adc    al,BYTE PTR [esi]
     d3f:	40                   	inc    eax
     d40:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     d46:	00 01                	add    BYTE PTR [ecx],al
     d48:	11 01                	adc    DWORD PTR [ecx],eax
     d4a:	25 0e 13 0b 03       	and    eax,0x30b130e
     d4f:	0e                   	push   cs
     d50:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d52:	11 01                	adc    DWORD PTR [ecx],eax
     d54:	12 06                	adc    al,BYTE PTR [esi]
     d56:	10 17                	adc    BYTE PTR [edi],dl
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d5d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d5f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d62:	08 00                	or     BYTE PTR [eax],al
     d64:	00 03                	add    BYTE PTR [ebx],al
     d66:	16                   	push   ss
     d67:	00 03                	add    BYTE PTR [ebx],al
     d69:	0e                   	push   cs
     d6a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d6c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d6e:	49                   	dec    ecx
     d6f:	13 00                	adc    eax,DWORD PTR [eax]
     d71:	00 04 24             	add    BYTE PTR [esp],al
     d74:	00 0b                	add    BYTE PTR [ebx],cl
     d76:	0b 3e                	or     edi,DWORD PTR [esi]
     d78:	0b 03                	or     eax,DWORD PTR [ebx]
     d7a:	0e                   	push   cs
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	05 2e 01 3f 19       	add    eax,0x193f012e
     d82:	03 0e                	add    ecx,DWORD PTR [esi]
     d84:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d86:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d88:	27                   	daa    
     d89:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d8c:	11 01                	adc    DWORD PTR [ecx],eax
     d8e:	12 06                	adc    al,BYTE PTR [esi]
     d90:	40                   	inc    eax
     d91:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d97:	00 00                	add    BYTE PTR [eax],al
     d99:	06                   	push   es
     d9a:	05 00 03 08 3a       	add    eax,0x3a080300
     d9f:	0b 3b                	or     edi,DWORD PTR [ebx]
     da1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     da4:	02 18                	add    bl,BYTE PTR [eax]
     da6:	00 00                	add    BYTE PTR [eax],al
     da8:	07                   	pop    es
     da9:	0f 00 0b             	str    WORD PTR [ebx]
     dac:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     daf:	00 00                	add    BYTE PTR [eax],al
     db1:	08 26                	or     BYTE PTR [esi],ah
     db3:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     db6:	00 00                	add    BYTE PTR [eax],al
     db8:	00 01                	add    BYTE PTR [ecx],al
     dba:	11 01                	adc    DWORD PTR [ecx],eax
     dbc:	25 0e 13 0b 03       	and    eax,0x30b130e
     dc1:	0e                   	push   cs
     dc2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     dc4:	11 01                	adc    DWORD PTR [ecx],eax
     dc6:	12 06                	adc    al,BYTE PTR [esi]
     dc8:	10 17                	adc    BYTE PTR [edi],dl
     dca:	00 00                	add    BYTE PTR [eax],al
     dcc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     dcf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dd1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dd4:	08 00                	or     BYTE PTR [eax],al
     dd6:	00 03                	add    BYTE PTR [ebx],al
     dd8:	16                   	push   ss
     dd9:	00 03                	add    BYTE PTR [ebx],al
     ddb:	0e                   	push   cs
     ddc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dde:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     de0:	49                   	dec    ecx
     de1:	13 00                	adc    eax,DWORD PTR [eax]
     de3:	00 04 24             	add    BYTE PTR [esp],al
     de6:	00 0b                	add    BYTE PTR [ebx],cl
     de8:	0b 3e                	or     edi,DWORD PTR [esi]
     dea:	0b 03                	or     eax,DWORD PTR [ebx]
     dec:	0e                   	push   cs
     ded:	00 00                	add    BYTE PTR [eax],al
     def:	05 2e 01 3f 19       	add    eax,0x193f012e
     df4:	03 0e                	add    ecx,DWORD PTR [esi]
     df6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     df8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dfa:	27                   	daa    
     dfb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dfe:	11 01                	adc    DWORD PTR [ecx],eax
     e00:	12 06                	adc    al,BYTE PTR [esi]
     e02:	40                   	inc    eax
     e03:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e09:	00 00                	add    BYTE PTR [eax],al
     e0b:	06                   	push   es
     e0c:	05 00 03 08 3a       	add    eax,0x3a080300
     e11:	0b 3b                	or     edi,DWORD PTR [ebx]
     e13:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e16:	02 18                	add    bl,BYTE PTR [eax]
     e18:	00 00                	add    BYTE PTR [eax],al
     e1a:	07                   	pop    es
     e1b:	34 00                	xor    al,0x0
     e1d:	03 08                	add    ecx,DWORD PTR [eax]
     e1f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e21:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e23:	49                   	dec    ecx
     e24:	13 02                	adc    eax,DWORD PTR [edx]
     e26:	18 00                	sbb    BYTE PTR [eax],al
     e28:	00 08                	add    BYTE PTR [eax],cl
     e2a:	0f 00 0b             	str    WORD PTR [ebx]
     e2d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e30:	00 00                	add    BYTE PTR [eax],al
     e32:	09 26                	or     DWORD PTR [esi],esp
     e34:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e37:	00 00                	add    BYTE PTR [eax],al
     e39:	00 01                	add    BYTE PTR [ecx],al
     e3b:	11 01                	adc    DWORD PTR [ecx],eax
     e3d:	25 0e 13 0b 03       	and    eax,0x30b130e
     e42:	0e                   	push   cs
     e43:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e45:	11 01                	adc    DWORD PTR [ecx],eax
     e47:	12 06                	adc    al,BYTE PTR [esi]
     e49:	10 17                	adc    BYTE PTR [edi],dl
     e4b:	00 00                	add    BYTE PTR [eax],al
     e4d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e50:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e52:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e55:	0e                   	push   cs
     e56:	00 00                	add    BYTE PTR [eax],al
     e58:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     e5b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e5d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e60:	08 00                	or     BYTE PTR [eax],al
     e62:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     e65:	00 03                	add    BYTE PTR [ebx],al
     e67:	0e                   	push   cs
     e68:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e6a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e6c:	49                   	dec    ecx
     e6d:	13 00                	adc    eax,DWORD PTR [eax]
     e6f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     e75:	49                   	dec    ecx
     e76:	13 00                	adc    eax,DWORD PTR [eax]
     e78:	00 06                	add    BYTE PTR [esi],al
     e7a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     e7e:	00 00                	add    BYTE PTR [eax],al
     e80:	07                   	pop    es
     e81:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e84:	19 03                	sbb    DWORD PTR [ebx],eax
     e86:	0e                   	push   cs
     e87:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e89:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e8b:	27                   	daa    
     e8c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e8f:	11 01                	adc    DWORD PTR [ecx],eax
     e91:	12 06                	adc    al,BYTE PTR [esi]
     e93:	40                   	inc    eax
     e94:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e9a:	00 00                	add    BYTE PTR [eax],al
     e9c:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     ea2:	0b 3b                	or     edi,DWORD PTR [ebx]
     ea4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ea7:	02 18                	add    bl,BYTE PTR [eax]
     ea9:	00 00                	add    BYTE PTR [eax],al
     eab:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     eae:	03 08                	add    ecx,DWORD PTR [eax]
     eb0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eb2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb4:	49                   	dec    ecx
     eb5:	13 02                	adc    eax,DWORD PTR [edx]
     eb7:	18 00                	sbb    BYTE PTR [eax],al
     eb9:	00 0a                	add    BYTE PTR [edx],cl
     ebb:	34 00                	xor    al,0x0
     ebd:	03 0e                	add    ecx,DWORD PTR [esi]
     ebf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ec3:	49                   	dec    ecx
     ec4:	13 00                	adc    eax,DWORD PTR [eax]
     ec6:	00 0b                	add    BYTE PTR [ebx],cl
     ec8:	34 00                	xor    al,0x0
     eca:	03 08                	add    ecx,DWORD PTR [eax]
     ecc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ece:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ed0:	49                   	dec    ecx
     ed1:	13 00                	adc    eax,DWORD PTR [eax]
     ed3:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     ed6:	00 03                	add    BYTE PTR [ebx],al
     ed8:	0e                   	push   cs
     ed9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     edb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     edd:	49                   	dec    ecx
     ede:	13 02                	adc    eax,DWORD PTR [edx]
     ee0:	18 00                	sbb    BYTE PTR [eax],al
     ee2:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
     ee8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eec:	49                   	dec    ecx
     eed:	13 3f                	adc    edi,DWORD PTR [edi]
     eef:	19 02                	sbb    DWORD PTR [edx],eax
     ef1:	18 00                	sbb    BYTE PTR [eax],al
     ef3:	00 00                	add    BYTE PTR [eax],al
     ef5:	01 11                	add    DWORD PTR [ecx],edx
     ef7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     efd:	0e                   	push   cs
     efe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f00:	11 01                	adc    DWORD PTR [ecx],eax
     f02:	12 06                	adc    al,BYTE PTR [esi]
     f04:	10 17                	adc    BYTE PTR [edi],dl
     f06:	00 00                	add    BYTE PTR [eax],al
     f08:	02 2e                	add    ch,BYTE PTR [esi]
     f0a:	01 3f                	add    DWORD PTR [edi],edi
     f0c:	19 03                	sbb    DWORD PTR [ebx],eax
     f0e:	0e                   	push   cs
     f0f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f11:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f13:	27                   	daa    
     f14:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f17:	11 01                	adc    DWORD PTR [ecx],eax
     f19:	12 06                	adc    al,BYTE PTR [esi]
     f1b:	40                   	inc    eax
     f1c:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f22:	00 00                	add    BYTE PTR [eax],al
     f24:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
     f2a:	0b 3b                	or     edi,DWORD PTR [ebx]
     f2c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f2f:	02 18                	add    bl,BYTE PTR [eax]
     f31:	00 00                	add    BYTE PTR [eax],al
     f33:	04 0f                	add    al,0xf
     f35:	00 0b                	add    BYTE PTR [ebx],cl
     f37:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f3a:	00 00                	add    BYTE PTR [eax],al
     f3c:	05 24 00 0b 0b       	add    eax,0xb0b0024
     f41:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f44:	0e                   	push   cs
     f45:	00 00                	add    BYTE PTR [eax],al
     f47:	06                   	push   es
     f48:	24 00                	and    al,0x0
     f4a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f4c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f4f:	08 00                	or     BYTE PTR [eax],al
     f51:	00 00                	add    BYTE PTR [eax],al
     f53:	01 11                	add    DWORD PTR [ecx],edx
     f55:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f5b:	0e                   	push   cs
     f5c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f5e:	11 01                	adc    DWORD PTR [ecx],eax
     f60:	12 06                	adc    al,BYTE PTR [esi]
     f62:	10 17                	adc    BYTE PTR [edi],dl
     f64:	00 00                	add    BYTE PTR [eax],al
     f66:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f69:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f6b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f6e:	0e                   	push   cs
     f6f:	00 00                	add    BYTE PTR [eax],al
     f71:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f74:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f76:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f79:	08 00                	or     BYTE PTR [eax],al
     f7b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f7e:	00 03                	add    BYTE PTR [ebx],al
     f80:	0e                   	push   cs
     f81:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f83:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f85:	49                   	dec    ecx
     f86:	13 00                	adc    eax,DWORD PTR [eax]
     f88:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f8e:	49                   	dec    ecx
     f8f:	13 00                	adc    eax,DWORD PTR [eax]
     f91:	00 06                	add    BYTE PTR [esi],al
     f93:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f97:	00 00                	add    BYTE PTR [eax],al
     f99:	07                   	pop    es
     f9a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f9d:	19 03                	sbb    DWORD PTR [ebx],eax
     f9f:	0e                   	push   cs
     fa0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fa4:	27                   	daa    
     fa5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fa8:	11 01                	adc    DWORD PTR [ecx],eax
     faa:	12 06                	adc    al,BYTE PTR [esi]
     fac:	40                   	inc    eax
     fad:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     fb3:	00 00                	add    BYTE PTR [eax],al
     fb5:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     fbb:	0b 3b                	or     edi,DWORD PTR [ebx]
     fbd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fc0:	02 18                	add    bl,BYTE PTR [eax]
     fc2:	00 00                	add    BYTE PTR [eax],al
     fc4:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     fc7:	03 08                	add    ecx,DWORD PTR [eax]
     fc9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fcb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fcd:	49                   	dec    ecx
     fce:	13 02                	adc    eax,DWORD PTR [edx]
     fd0:	18 00                	sbb    BYTE PTR [eax],al
     fd2:	00 0a                	add    BYTE PTR [edx],cl
     fd4:	34 00                	xor    al,0x0
     fd6:	03 0e                	add    ecx,DWORD PTR [esi]
     fd8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fda:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fdc:	49                   	dec    ecx
     fdd:	13 00                	adc    eax,DWORD PTR [eax]
     fdf:	00 0b                	add    BYTE PTR [ebx],cl
     fe1:	34 00                	xor    al,0x0
     fe3:	03 08                	add    ecx,DWORD PTR [eax]
     fe5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fe7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fe9:	49                   	dec    ecx
     fea:	13 00                	adc    eax,DWORD PTR [eax]
     fec:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     fef:	00 03                	add    BYTE PTR [ebx],al
     ff1:	0e                   	push   cs
     ff2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff6:	49                   	dec    ecx
     ff7:	13 3f                	adc    edi,DWORD PTR [edi]
     ff9:	19 02                	sbb    DWORD PTR [edx],eax
     ffb:	18 00                	sbb    BYTE PTR [eax],al
     ffd:	00 00                	add    BYTE PTR [eax],al
     fff:	01 11                	add    DWORD PTR [ecx],edx
    1001:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1007:	0e                   	push   cs
    1008:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    100a:	11 01                	adc    DWORD PTR [ecx],eax
    100c:	12 06                	adc    al,BYTE PTR [esi]
    100e:	10 17                	adc    BYTE PTR [edi],dl
    1010:	00 00                	add    BYTE PTR [eax],al
    1012:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1015:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1017:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    101a:	0e                   	push   cs
    101b:	00 00                	add    BYTE PTR [eax],al
    101d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1020:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1022:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1025:	08 00                	or     BYTE PTR [eax],al
    1027:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    102a:	00 03                	add    BYTE PTR [ebx],al
    102c:	0e                   	push   cs
    102d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    102f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1031:	49                   	dec    ecx
    1032:	13 00                	adc    eax,DWORD PTR [eax]
    1034:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    103a:	49                   	dec    ecx
    103b:	13 00                	adc    eax,DWORD PTR [eax]
    103d:	00 06                	add    BYTE PTR [esi],al
    103f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1042:	19 03                	sbb    DWORD PTR [ebx],eax
    1044:	0e                   	push   cs
    1045:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1047:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1049:	27                   	daa    
    104a:	19 11                	sbb    DWORD PTR [ecx],edx
    104c:	01 12                	add    DWORD PTR [edx],edx
    104e:	06                   	push   es
    104f:	40                   	inc    eax
    1050:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1056:	00 00                	add    BYTE PTR [eax],al
    1058:	07                   	pop    es
    1059:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    105e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1060:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1063:	02 18                	add    bl,BYTE PTR [eax]
    1065:	00 00                	add    BYTE PTR [eax],al
    1067:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    106a:	03 08                	add    ecx,DWORD PTR [eax]
    106c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    106e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1070:	49                   	dec    ecx
    1071:	13 02                	adc    eax,DWORD PTR [edx]
    1073:	18 00                	sbb    BYTE PTR [eax],al
    1075:	00 09                	add    BYTE PTR [ecx],cl
    1077:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    107a:	19 03                	sbb    DWORD PTR [ebx],eax
    107c:	0e                   	push   cs
    107d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    107f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1081:	49                   	dec    ecx
    1082:	13 3c 19             	adc    edi,DWORD PTR [ecx+ebx*1]
    1085:	00 00                	add    BYTE PTR [eax],al
    1087:	0a 18                	or     bl,BYTE PTR [eax]
    1089:	00 00                	add    BYTE PTR [eax],al
    108b:	00 0b                	add    BYTE PTR [ebx],cl
    108d:	34 00                	xor    al,0x0
    108f:	03 0e                	add    ecx,DWORD PTR [esi]
    1091:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1093:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1095:	49                   	dec    ecx
    1096:	13 3f                	adc    edi,DWORD PTR [edi]
    1098:	19 02                	sbb    DWORD PTR [edx],eax
    109a:	18 00                	sbb    BYTE PTR [eax],al
    109c:	00 00                	add    BYTE PTR [eax],al
    109e:	01 11                	add    DWORD PTR [ecx],edx
    10a0:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10a6:	0e                   	push   cs
    10a7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10a9:	11 01                	adc    DWORD PTR [ecx],eax
    10ab:	12 06                	adc    al,BYTE PTR [esi]
    10ad:	10 17                	adc    BYTE PTR [edi],dl
    10af:	00 00                	add    BYTE PTR [eax],al
    10b1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10b4:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10b6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10b9:	0e                   	push   cs
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10bf:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10c1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10c4:	08 00                	or     BYTE PTR [eax],al
    10c6:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    10c9:	00 03                	add    BYTE PTR [ebx],al
    10cb:	0e                   	push   cs
    10cc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10ce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10d0:	49                   	dec    ecx
    10d1:	13 00                	adc    eax,DWORD PTR [eax]
    10d3:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    10d9:	49                   	dec    ecx
    10da:	13 00                	adc    eax,DWORD PTR [eax]
    10dc:	00 06                	add    BYTE PTR [esi],al
    10de:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    10e1:	19 03                	sbb    DWORD PTR [ebx],eax
    10e3:	0e                   	push   cs
    10e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10e8:	27                   	daa    
    10e9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10ec:	11 01                	adc    DWORD PTR [ecx],eax
    10ee:	12 06                	adc    al,BYTE PTR [esi]
    10f0:	40                   	inc    eax
    10f1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10f7:	00 00                	add    BYTE PTR [eax],al
    10f9:	07                   	pop    es
    10fa:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    10ff:	0b 3b                	or     edi,DWORD PTR [ebx]
    1101:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1104:	02 18                	add    bl,BYTE PTR [eax]
    1106:	00 00                	add    BYTE PTR [eax],al
    1108:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    110b:	03 08                	add    ecx,DWORD PTR [eax]
    110d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    110f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1111:	49                   	dec    ecx
    1112:	13 02                	adc    eax,DWORD PTR [edx]
    1114:	18 00                	sbb    BYTE PTR [eax],al
    1116:	00 09                	add    BYTE PTR [ecx],cl
    1118:	01 01                	add    DWORD PTR [ecx],eax
    111a:	49                   	dec    ecx
    111b:	13 01                	adc    eax,DWORD PTR [ecx]
    111d:	13 00                	adc    eax,DWORD PTR [eax]
    111f:	00 0a                	add    BYTE PTR [edx],cl
    1121:	21 00                	and    DWORD PTR [eax],eax
    1123:	49                   	dec    ecx
    1124:	13 2f                	adc    ebp,DWORD PTR [edi]
    1126:	0b 00                	or     eax,DWORD PTR [eax]
    1128:	00 0b                	add    BYTE PTR [ebx],cl
    112a:	34 00                	xor    al,0x0
    112c:	03 0e                	add    ecx,DWORD PTR [esi]
    112e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1130:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1132:	49                   	dec    ecx
    1133:	13 02                	adc    eax,DWORD PTR [edx]
    1135:	18 00                	sbb    BYTE PTR [eax],al
    1137:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    113a:	00 03                	add    BYTE PTR [ebx],al
    113c:	0e                   	push   cs
    113d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    113f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1141:	49                   	dec    ecx
    1142:	13 3f                	adc    edi,DWORD PTR [edi]
    1144:	19 02                	sbb    DWORD PTR [edx],eax
    1146:	18 00                	sbb    BYTE PTR [eax],al
    1148:	00 00                	add    BYTE PTR [eax],al
    114a:	01 11                	add    DWORD PTR [ecx],edx
    114c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1152:	0e                   	push   cs
    1153:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1155:	11 01                	adc    DWORD PTR [ecx],eax
    1157:	12 06                	adc    al,BYTE PTR [esi]
    1159:	10 17                	adc    BYTE PTR [edi],dl
    115b:	00 00                	add    BYTE PTR [eax],al
    115d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1160:	03 0e                	add    ecx,DWORD PTR [esi]
    1162:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1164:	49                   	dec    ecx
    1165:	13 3a                	adc    edi,DWORD PTR [edx]
    1167:	0b 3b                	or     edi,DWORD PTR [ebx]
    1169:	0b 01                	or     eax,DWORD PTR [ecx]
    116b:	13 00                	adc    eax,DWORD PTR [eax]
    116d:	00 03                	add    BYTE PTR [ebx],al
    116f:	28 00                	sub    BYTE PTR [eax],al
    1171:	03 0e                	add    ecx,DWORD PTR [esi]
    1173:	1c 0b                	sbb    al,0xb
    1175:	00 00                	add    BYTE PTR [eax],al
    1177:	04 28                	add    al,0x28
    1179:	00 03                	add    BYTE PTR [ebx],al
    117b:	0e                   	push   cs
    117c:	1c 05                	sbb    al,0x5
    117e:	00 00                	add    BYTE PTR [eax],al
    1180:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1185:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1188:	0e                   	push   cs
    1189:	00 00                	add    BYTE PTR [eax],al
    118b:	06                   	push   es
    118c:	24 00                	and    al,0x0
    118e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1190:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1193:	08 00                	or     BYTE PTR [eax],al
    1195:	00 07                	add    BYTE PTR [edi],al
    1197:	16                   	push   ss
    1198:	00 03                	add    BYTE PTR [ebx],al
    119a:	0e                   	push   cs
    119b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    119d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    119f:	49                   	dec    ecx
    11a0:	13 00                	adc    eax,DWORD PTR [eax]
    11a2:	00 08                	add    BYTE PTR [eax],cl
    11a4:	13 01                	adc    eax,DWORD PTR [ecx]
    11a6:	03 08                	add    ecx,DWORD PTR [eax]
    11a8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11ae:	01 13                	add    DWORD PTR [ebx],edx
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    11b8:	0b 3b                	or     edi,DWORD PTR [ebx]
    11ba:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11bd:	38 0b                	cmp    BYTE PTR [ebx],cl
    11bf:	00 00                	add    BYTE PTR [eax],al
    11c1:	0a 0f                	or     cl,BYTE PTR [edi]
    11c3:	00 0b                	add    BYTE PTR [ebx],cl
    11c5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11c8:	00 00                	add    BYTE PTR [eax],al
    11ca:	0b 26                	or     esp,DWORD PTR [esi]
    11cc:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    11cf:	00 00                	add    BYTE PTR [eax],al
    11d1:	0c 2e                	or     al,0x2e
    11d3:	01 3f                	add    DWORD PTR [edi],edi
    11d5:	19 03                	sbb    DWORD PTR [ebx],eax
    11d7:	0e                   	push   cs
    11d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11dc:	49                   	dec    ecx
    11dd:	13 11                	adc    edx,DWORD PTR [ecx]
    11df:	01 12                	add    DWORD PTR [edx],edx
    11e1:	06                   	push   es
    11e2:	40                   	inc    eax
    11e3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11e9:	00 00                	add    BYTE PTR [eax],al
    11eb:	0d 34 00 03 0e       	or     eax,0xe030034
    11f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f4:	49                   	dec    ecx
    11f5:	13 02                	adc    eax,DWORD PTR [edx]
    11f7:	18 00                	sbb    BYTE PTR [eax],al
    11f9:	00 0e                	add    BYTE PTR [esi],cl
    11fb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11fe:	19 03                	sbb    DWORD PTR [ebx],eax
    1200:	0e                   	push   cs
    1201:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1203:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1205:	27                   	daa    
    1206:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1209:	11 01                	adc    DWORD PTR [ecx],eax
    120b:	12 06                	adc    al,BYTE PTR [esi]
    120d:	40                   	inc    eax
    120e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1214:	00 00                	add    BYTE PTR [eax],al
    1216:	0f 05                	syscall 
    1218:	00 03                	add    BYTE PTR [ebx],al
    121a:	0e                   	push   cs
    121b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    121d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    121f:	49                   	dec    ecx
    1220:	13 02                	adc    eax,DWORD PTR [edx]
    1222:	18 00                	sbb    BYTE PTR [eax],al
    1224:	00 10                	add    BYTE PTR [eax],dl
    1226:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1229:	19 03                	sbb    DWORD PTR [ebx],eax
    122b:	0e                   	push   cs
    122c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    122e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1230:	27                   	daa    
    1231:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1234:	11 01                	adc    DWORD PTR [ecx],eax
    1236:	12 06                	adc    al,BYTE PTR [esi]
    1238:	40                   	inc    eax
    1239:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    123f:	00 00                	add    BYTE PTR [eax],al
    1241:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1244:	03 08                	add    ecx,DWORD PTR [eax]
    1246:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1248:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    124a:	49                   	dec    ecx
    124b:	13 02                	adc    eax,DWORD PTR [edx]
    124d:	18 00                	sbb    BYTE PTR [eax],al
    124f:	00 12                	add    BYTE PTR [edx],dl
    1251:	34 00                	xor    al,0x0
    1253:	03 0e                	add    ecx,DWORD PTR [esi]
    1255:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1257:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1259:	49                   	dec    ecx
    125a:	13 3f                	adc    edi,DWORD PTR [edi]
    125c:	19 02                	sbb    DWORD PTR [edx],eax
    125e:	18 00                	sbb    BYTE PTR [eax],al
    1260:	00 13                	add    BYTE PTR [ebx],dl
    1262:	01 01                	add    DWORD PTR [ecx],eax
    1264:	49                   	dec    ecx
    1265:	13 01                	adc    eax,DWORD PTR [ecx]
    1267:	13 00                	adc    eax,DWORD PTR [eax]
    1269:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    126c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    126f:	2f                   	das    
    1270:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	57                   	push   edi
  27:	01 00                	add    DWORD PTR [eax],eax
  29:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	ed                   	in     eax,dx
  47:	02 00                	add    al,BYTE PTR [eax]
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	26                   	es
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	8e 01                	mov    es,WORD PTR [ecx]
	...
  7e:	00 00                	add    BYTE PTR [eax],al
  80:	1c 00                	sbb    al,0x0
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	ff 05 00 00 04 00    	inc    DWORD PTR ds:0x40000
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	44                   	inc    esp
  91:	03 00                	add    eax,DWORD PTR [eax]
  93:	30 52 01             	xor    BYTE PTR [edx+0x1],dl
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	7f 08                	jg     b0 <sysEnter_Vector-0x12ff50>
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	98                   	cwde   
  b1:	04 00                	add    al,0x0
  b3:	30 6d 03             	xor    BYTE PTR [ebp+0x3],ch
	...
  be:	00 00                	add    BYTE PTR [eax],al
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	54                   	push   esp
  c7:	0e                   	push   cs
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	08 08                	or     BYTE PTR [eax],cl
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	26 03 00             	add    eax,DWORD PTR es:[eax]
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	3f                   	aas    
  e7:	11 00                	adc    DWORD PTR [eax],eax
  e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	30 0b                	xor    BYTE PTR [ebx],cl
  f2:	00 30                	add    BYTE PTR [eax],dh
  f4:	9b                   	fwait
  f5:	01 00                	add    DWORD PTR [eax],eax
	...
  ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	21 13                	and    DWORD PTR [ebx],edx
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	cc                   	int3   
 111:	0c 00                	or     al,0x0
 113:	30 8e 01 00 00 00    	xor    BYTE PTR [esi+0x1],cl
 119:	00 00                	add    BYTE PTR [eax],al
 11b:	00 00                	add    BYTE PTR [eax],al
 11d:	00 00                	add    BYTE PTR [eax],al
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	3e                   	ds
 127:	15 00 00 04 00       	adc    eax,0x40000
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	5c                   	pop    esp
 131:	0e                   	push   cs
 132:	00 30                	add    BYTE PTR [eax],dh
 134:	10 00                	adc    BYTE PTR [eax],al
	...
 13e:	00 00                	add    BYTE PTR [eax],al
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
 147:	16                   	push   ss
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	6c                   	ins    BYTE PTR es:[edi],dx
 151:	0e                   	push   cs
 152:	00 30                	add    BYTE PTR [eax],dh
 154:	60                   	pusha  
 155:	02 00                	add    al,BYTE PTR [eax]
	...
 15f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	a2 1c 00 00 04       	mov    ds:0x400001c,al
 16b:	00 00                	add    BYTE PTR [eax],al
 16d:	00 00                	add    BYTE PTR [eax],al
 16f:	00 cc                	add    ah,cl
 171:	10 00                	adc    BYTE PTR [eax],al
 173:	30 eb                	xor    bl,ch
	...
 17d:	00 00                	add    BYTE PTR [eax],al
 17f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	54                   	push   esp
 187:	1e                   	push   ds
 188:	00 00                	add    BYTE PTR [eax],al
 18a:	04 00                	add    al,0x0
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	b8 11 00 30 5e       	mov    eax,0x5e300011
	...
 19d:	00 00                	add    BYTE PTR [eax],al
 19f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	b2 1f                	mov    dl,0x1f
 1a8:	00 00                	add    BYTE PTR [eax],al
 1aa:	04 00                	add    al,0x0
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	18 12                	sbb    BYTE PTR [edx],dl
 1b2:	00 30                	add    BYTE PTR [eax],dh
 1b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 1ba:	00 00                	add    BYTE PTR [eax],al
 1bc:	00 00                	add    BYTE PTR [eax],al
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	73 21                	jae    1e9 <sysEnter_Vector-0x12fe17>
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	e0 12                	loopne 1e4 <sysEnter_Vector-0x12fe1c>
 1d2:	00 30                	add    BYTE PTR [eax],dh
 1d4:	89 00                	mov    DWORD PTR [eax],eax
	...
 1de:	00 00                	add    BYTE PTR [eax],al
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	b7 22                	mov    bh,0x22
 1e8:	00 00                	add    BYTE PTR [eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	6c                   	ins    BYTE PTR es:[edi],dx
 1f1:	13 00                	adc    eax,DWORD PTR [eax]
 1f3:	30 62 00             	xor    BYTE PTR [edx+0x0],ah
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	85 23                	test   DWORD PTR [ebx],esp
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	d0 13                	rcl    BYTE PTR [ebx],1
 212:	00 30                	add    BYTE PTR [eax],dh
 214:	67 00 00             	add    BYTE PTR [bx+si],al
	...
 21f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	2b 24 00             	sub    esp,DWORD PTR [eax+eax*1]
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	38 14 00             	cmp    BYTE PTR [eax+eax*1],dl
 233:	30 60 00             	xor    BYTE PTR [eax+0x0],ah
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	e3 24                	jecxz  26c <sysEnter_Vector-0x12fd94>
 248:	00 00                	add    BYTE PTR [eax],al
 24a:	04 00                	add    al,0x0
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	98                   	cwde   
 251:	14 00                	adc    al,0x0
 253:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
	...
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	73 26                	jae    28e <sysEnter_Vector-0x12fd72>
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	18 16                	sbb    BYTE PTR [esi],dl
 272:	00 30                	add    BYTE PTR [eax],dh
 274:	1d 00 00 00 00       	sbb    eax,0x0
 279:	00 00                	add    BYTE PTR [eax],al
 27b:	00 00                	add    BYTE PTR [eax],al
 27d:	00 00                	add    BYTE PTR [eax],al
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	e3 26                	jecxz  2ae <sysEnter_Vector-0x12fd52>
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	38 16                	cmp    BYTE PTR [esi],dl
 292:	00 30                	add    BYTE PTR [eax],dh
 294:	9c                   	pushf  
 295:	01 00                	add    DWORD PTR [eax],eax
	...
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	71 28                	jno    2d0 <sysEnter_Vector-0x12fd30>
 2a8:	00 00                	add    BYTE PTR [eax],al
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	d4 17                	aam    0x17
 2b2:	00 30                	add    BYTE PTR [eax],dh
 2b4:	96                   	xchg   esi,eax
	...
 2bd:	00 00                	add    BYTE PTR [eax],al
 2bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	b4 29                	mov    ah,0x29
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	6c                   	ins    BYTE PTR es:[edi],dx
 2d1:	18 00                	sbb    BYTE PTR [eax],al
 2d3:	30 6e 00             	xor    BYTE PTR [esi+0x0],ch
	...
 2de:	00 00                	add    BYTE PTR [eax],al
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	09 2b                	or     DWORD PTR [ebx],ebp
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	dc 18                	fcomp  QWORD PTR [eax]
 2f2:	00 30                	add    BYTE PTR [eax],dh
 2f4:	16                   	push   ss
 2f5:	0c 00                	or     al,0x0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	da 00                	fiadd  DWORD PTR [eax]
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	ba 00 00 00 01       	mov    edx,0x1000000
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	2f                   	das    
      3c:	68 6f 6d 65 2f       	push   0x2f656d6f
      41:	79 6f                	jns    b2 <sysEnter_Vector-0x12ff4e>
      43:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      4a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      4d:	73 73                	jae    c2 <sysEnter_Vector-0x12ff3e>
      4f:	2f                   	das    
      50:	6c                   	ins    BYTE PTR es:[edi],dx
      51:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      58:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      5e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      64:	78 2d                	js     93 <sysEnter_Vector-0x12ff6d>
      66:	67 6e                	outs   dx,BYTE PTR ds:[si]
      68:	75 2f                	jne    99 <sysEnter_Vector-0x12ff67>
      6a:	35 2e 33 2e 30       	xor    eax,0x302e332e
      6f:	2f                   	das    
      70:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      77:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
      7a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
      7e:	65 00 00             	add    BYTE PTR gs:[eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      8f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      96:	63 
      97:	2e                   	cs
      98:	68 00 02 00 00       	push   0x200
      9d:	74 69                	je     108 <sysEnter_Vector-0x12fef8>
      9f:	6d                   	ins    DWORD PTR es:[edi],dx
      a0:	65                   	gs
      a1:	2e                   	cs
      a2:	68 00 03 00 00       	push   0x300
      a7:	6d                   	ins    DWORD PTR es:[edi],dx
      a8:	61                   	popa   
      a9:	6c                   	ins    BYTE PTR es:[edi],dx
      aa:	6c                   	ins    BYTE PTR es:[edi],dx
      ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
      ac:	63 2e                	arpl   WORD PTR [esi],bp
      ae:	68 00 03 00 00       	push   0x300
      b3:	6c                   	ins    BYTE PTR es:[edi],dx
      b4:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      bb:	4f                   	dec    edi
      bc:	53                   	push   ebx
      bd:	2e                   	cs
      be:	68 00 03 00 00       	push   0x300
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	05 02 00 00 00       	add    eax,0x2
      ca:	30 1a                	xor    BYTE PTR [edx],bl
      cc:	c9                   	leave  
      cd:	2f                   	das    
      ce:	f3 72 cb             	repz jb 9c <sysEnter_Vector-0x12ff64>
      d1:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      d6:	72 cb                	jb     a3 <sysEnter_Vector-0x12ff5d>
      d8:	3d 02 02 00 01       	cmp    eax,0x1000202
      dd:	01 0d 01 00 00 02    	add    DWORD PTR ds:0x2000001,ecx
      e3:	00 bb 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],bh
      e9:	01 fb                	add    ebx,edi
      eb:	0e                   	push   cs
      ec:	0d 00 01 01 01       	or     eax,0x1010100
      f1:	01 00                	add    DWORD PTR [eax],eax
      f3:	00 00                	add    BYTE PTR [eax],al
      f5:	01 00                	add    DWORD PTR [eax],eax
      f7:	00 01                	add    BYTE PTR [ecx],al
      f9:	2e                   	cs
      fa:	2e                   	cs
      fb:	2f                   	das    
      fc:	2e                   	cs
      fd:	2e                   	cs
      fe:	2f                   	das    
      ff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     103:	6a 2f                	push   0x2f
     105:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     108:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     10f:	63 2f                	arpl   WORD PTR [edi],bp
     111:	73 74                	jae    187 <sysEnter_Vector-0x12fe79>
     113:	72 69                	jb     17e <sysEnter_Vector-0x12fe82>
     115:	6e                   	outs   dx,BYTE PTR ds:[esi]
     116:	67 73 00             	addr16 jae 119 <sysEnter_Vector-0x12fee7>
     119:	2f                   	das    
     11a:	68 6f 6d 65 2f       	push   0x2f656d6f
     11f:	79 6f                	jns    190 <sysEnter_Vector-0x12fe70>
     121:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     128:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     12b:	73 73                	jae    1a0 <sysEnter_Vector-0x12fe60>
     12d:	2f                   	das    
     12e:	6c                   	ins    BYTE PTR es:[edi],dx
     12f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     136:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     142:	78 2d                	js     171 <sysEnter_Vector-0x12fe8f>
     144:	67 6e                	outs   dx,BYTE PTR ds:[si]
     146:	75 2f                	jne    177 <sysEnter_Vector-0x12fe89>
     148:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14d:	2f                   	das    
     14e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     155:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     158:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     15c:	65 00 00             	add    BYTE PTR gs:[eax],al
     15f:	73 74                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     161:	72 63                	jb     1c6 <sysEnter_Vector-0x12fe3a>
     163:	73 70                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     165:	6e                   	outs   dx,BYTE PTR ds:[esi]
     166:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     175:	63 
     176:	2e                   	cs
     177:	68 00 02 00 00       	push   0x200
     17c:	74 69                	je     1e7 <sysEnter_Vector-0x12fe19>
     17e:	6d                   	ins    DWORD PTR es:[edi],dx
     17f:	65                   	gs
     180:	2e                   	cs
     181:	68 00 03 00 00       	push   0x300
     186:	6d                   	ins    DWORD PTR es:[edi],dx
     187:	61                   	popa   
     188:	6c                   	ins    BYTE PTR es:[edi],dx
     189:	6c                   	ins    BYTE PTR es:[edi],dx
     18a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     18b:	63 2e                	arpl   WORD PTR [esi],bp
     18d:	68 00 03 00 00       	push   0x300
     192:	6c                   	ins    BYTE PTR es:[edi],dx
     193:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     19a:	4f                   	dec    edi
     19b:	53                   	push   ebx
     19c:	2e                   	cs
     19d:	68 00 03 00 00       	push   0x300
     1a2:	00 00                	add    BYTE PTR [eax],al
     1a4:	05 02 70 00 00       	add    eax,0x7002
     1a9:	30 03                	xor    BYTE PTR [ebx],al
     1ab:	25 01 e7 9f 59       	and    eax,0x599fe701
     1b0:	75 00                	jne    1b2 <sysEnter_Vector-0x12fe4e>
     1b2:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1b5:	aa                   	stos   BYTE PTR es:[edi],al
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	04 01                	add    al,0x1
     1ba:	06                   	push   es
     1bb:	3c 00                	cmp    al,0x0
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	06                   	push   es
     1c1:	73 00                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     1c3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1c6:	06                   	push   es
     1c7:	82                   	(bad)  
     1c8:	06                   	push   es
     1c9:	6d                   	ins    DWORD PTR es:[edi],dx
     1ca:	91                   	xchg   ecx,eax
     1cb:	4d                   	dec    ebp
     1cc:	e7 9f                	out    0x9f,eax
     1ce:	59                   	pop    ecx
     1cf:	75 00                	jne    1d1 <sysEnter_Vector-0x12fe2f>
     1d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1d4:	aa                   	stos   BYTE PTR es:[edi],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	04 01                	add    al,0x1
     1d9:	06                   	push   es
     1da:	3c 00                	cmp    al,0x0
     1dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1df:	06                   	push   es
     1e0:	73 00                	jae    1e2 <sysEnter_Vector-0x12fe1e>
     1e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1e5:	06                   	push   es
     1e6:	82                   	(bad)  
     1e7:	06                   	push   es
     1e8:	6d                   	ins    DWORD PTR es:[edi],dx
     1e9:	91                   	xchg   ecx,eax
     1ea:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ed:	01 01                	add    DWORD PTR [ecx],eax
     1ef:	de 00                	fiadd  WORD PTR [eax]
     1f1:	00 00                	add    BYTE PTR [eax],al
     1f3:	02 00                	add    al,BYTE PTR [eax]
     1f5:	ba 00 00 00 01       	mov    edx,0x1000000
     1fa:	01 fb                	add    ebx,edi
     1fc:	0e                   	push   cs
     1fd:	0d 00 01 01 01       	or     eax,0x1010100
     202:	01 00                	add    DWORD PTR [eax],eax
     204:	00 00                	add    BYTE PTR [eax],al
     206:	01 00                	add    DWORD PTR [eax],eax
     208:	00 01                	add    BYTE PTR [ecx],al
     20a:	2e                   	cs
     20b:	2e                   	cs
     20c:	2f                   	das    
     20d:	2e                   	cs
     20e:	2e                   	cs
     20f:	2f                   	das    
     210:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     214:	6a 2f                	push   0x2f
     216:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     219:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     220:	63 2f                	arpl   WORD PTR [edi],bp
     222:	73 74                	jae    298 <sysEnter_Vector-0x12fd68>
     224:	72 69                	jb     28f <sysEnter_Vector-0x12fd71>
     226:	6e                   	outs   dx,BYTE PTR ds:[esi]
     227:	67 73 00             	addr16 jae 22a <sysEnter_Vector-0x12fdd6>
     22a:	2f                   	das    
     22b:	68 6f 6d 65 2f       	push   0x2f656d6f
     230:	79 6f                	jns    2a1 <sysEnter_Vector-0x12fd5f>
     232:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     239:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     23c:	73 73                	jae    2b1 <sysEnter_Vector-0x12fd4f>
     23e:	2f                   	das    
     23f:	6c                   	ins    BYTE PTR es:[edi],dx
     240:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     247:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     24d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     253:	78 2d                	js     282 <sysEnter_Vector-0x12fd7e>
     255:	67 6e                	outs   dx,BYTE PTR ds:[si]
     257:	75 2f                	jne    288 <sysEnter_Vector-0x12fd78>
     259:	35 2e 33 2e 30       	xor    eax,0x302e332e
     25e:	2f                   	das    
     25f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     266:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     269:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     26d:	65 00 00             	add    BYTE PTR gs:[eax],al
     270:	73 74                	jae    2e6 <sysEnter_Vector-0x12fd1a>
     272:	72 74                	jb     2e8 <sysEnter_Vector-0x12fd18>
     274:	6f                   	outs   dx,DWORD PTR ds:[esi]
     275:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     278:	00 01                	add    BYTE PTR [ecx],al
     27a:	00 00                	add    BYTE PTR [eax],al
     27c:	73 74                	jae    2f2 <sysEnter_Vector-0x12fd0e>
     27e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     285:	63 
     286:	2e                   	cs
     287:	68 00 02 00 00       	push   0x200
     28c:	74 69                	je     2f7 <sysEnter_Vector-0x12fd09>
     28e:	6d                   	ins    DWORD PTR es:[edi],dx
     28f:	65                   	gs
     290:	2e                   	cs
     291:	68 00 03 00 00       	push   0x300
     296:	6d                   	ins    DWORD PTR es:[edi],dx
     297:	61                   	popa   
     298:	6c                   	ins    BYTE PTR es:[edi],dx
     299:	6c                   	ins    BYTE PTR es:[edi],dx
     29a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     29b:	63 2e                	arpl   WORD PTR [esi],bp
     29d:	68 00 03 00 00       	push   0x300
     2a2:	6c                   	ins    BYTE PTR es:[edi],dx
     2a3:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     2aa:	4f                   	dec    edi
     2ab:	53                   	push   ebx
     2ac:	2e                   	cs
     2ad:	68 00 03 00 00       	push   0x300
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	05 02 1c 01 00       	add    eax,0x11c02
     2b9:	30 03                	xor    BYTE PTR [ebx],al
     2bb:	28 01                	sub    BYTE PTR [ecx],al
     2bd:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2c0:	08 2f                	or     BYTE PTR [edi],ch
     2c2:	75 08                	jne    2cc <sysEnter_Vector-0x12fd34>
     2c4:	2f                   	das    
     2c5:	4b                   	dec    ebx
     2c6:	08 c9                	or     cl,cl
     2c8:	c9                   	leave  
     2c9:	08 21                	or     BYTE PTR [ecx],ah
     2cb:	3d 02 07 00 01       	cmp    eax,0x1000702
     2d0:	01 02                	add    DWORD PTR [edx],eax
     2d2:	01 00                	add    DWORD PTR [eax],eax
     2d4:	00 02                	add    BYTE PTR [edx],al
     2d6:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
     2dc:	01 fb                	add    ebx,edi
     2de:	0e                   	push   cs
     2df:	0d 00 01 01 01       	or     eax,0x1010100
     2e4:	01 00                	add    DWORD PTR [eax],eax
     2e6:	00 00                	add    BYTE PTR [eax],al
     2e8:	01 00                	add    DWORD PTR [eax],eax
     2ea:	00 01                	add    BYTE PTR [ecx],al
     2ec:	73 72                	jae    360 <sysEnter_Vector-0x12fca0>
     2ee:	63 00                	arpl   WORD PTR [eax],ax
     2f0:	2f                   	das    
     2f1:	68 6f 6d 65 2f       	push   0x2f656d6f
     2f6:	79 6f                	jns    367 <sysEnter_Vector-0x12fc99>
     2f8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2ff:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     302:	73 73                	jae    377 <sysEnter_Vector-0x12fc89>
     304:	2f                   	das    
     305:	6c                   	ins    BYTE PTR es:[edi],dx
     306:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     30d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     313:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     319:	78 2d                	js     348 <sysEnter_Vector-0x12fcb8>
     31b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     31d:	75 2f                	jne    34e <sysEnter_Vector-0x12fcb2>
     31f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     324:	2f                   	das    
     325:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     32c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     32f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     333:	65 00 00             	add    BYTE PTR gs:[eax],al
     336:	61                   	popa   
     337:	73 63                	jae    39c <sysEnter_Vector-0x12fc64>
     339:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     340:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     343:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     34a:	63 
     34b:	2e                   	cs
     34c:	68 00 02 00 00       	push   0x200
     351:	74 69                	je     3bc <sysEnter_Vector-0x12fc44>
     353:	6d                   	ins    DWORD PTR es:[edi],dx
     354:	65                   	gs
     355:	2e                   	cs
     356:	68 00 03 00 00       	push   0x300
     35b:	6d                   	ins    DWORD PTR es:[edi],dx
     35c:	61                   	popa   
     35d:	6c                   	ins    BYTE PTR es:[edi],dx
     35e:	6c                   	ins    BYTE PTR es:[edi],dx
     35f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     360:	63 2e                	arpl   WORD PTR [esi],bp
     362:	68 00 03 00 00       	push   0x300
     367:	6c                   	ins    BYTE PTR es:[edi],dx
     368:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     36f:	4f                   	dec    edi
     370:	53                   	push   ebx
     371:	2e                   	cs
     372:	68 00 03 00 00       	push   0x300
     377:	00 00                	add    BYTE PTR [eax],al
     379:	05 02 b4 01 00       	add    eax,0x1b402
     37e:	30 03                	xor    BYTE PTR [ebx],al
     380:	0a 01                	or     al,BYTE PTR [ecx]
     382:	08 16                	or     BYTE PTR [esi],dl
     384:	00 02                	add    BYTE PTR [edx],al
     386:	04 03                	add    al,0x3
     388:	08 d7                	or     bh,dl
     38a:	00 02                	add    BYTE PTR [edx],al
     38c:	04 03                	add    al,0x3
     38e:	d7                   	xlat   BYTE PTR ds:[ebx]
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	04 03                	add    al,0x3
     393:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     396:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     399:	d3 00                	rol    DWORD PTR [eax],cl
     39b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39e:	06                   	push   es
     39f:	82                   	(bad)  
     3a0:	06                   	push   es
     3a1:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     3a4:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     3a9:	04 01                	add    al,0x1
     3ab:	76 00                	jbe    3ad <sysEnter_Vector-0x12fc53>
     3ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3b0:	02 3b                	add    bh,BYTE PTR [ebx]
     3b2:	13 08                	adc    ecx,DWORD PTR [eax]
     3b4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3b8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3b9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3ba:	6a f3                	push   0xfffffff3
     3bc:	78 00                	js     3be <sysEnter_Vector-0x12fc42>
     3be:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3c1:	91                   	xchg   ecx,eax
     3c2:	00 02                	add    BYTE PTR [edx],al
     3c4:	04 03                	add    al,0x3
     3c6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3c9:	00 02                	add    BYTE PTR [edx],al
     3cb:	04 01                	add    al,0x1
     3cd:	06                   	push   es
     3ce:	4a                   	dec    edx
     3cf:	06                   	push   es
     3d0:	e8 3d 02 02 00       	call   20612 <sysEnter_Vector-0x10f9ee>
     3d5:	01 01                	add    DWORD PTR [ecx],eax
     3d7:	25 01 00 00 02       	and    eax,0x2000001
     3dc:	00 d3                	add    bl,dl
     3de:	00 00                	add    BYTE PTR [eax],al
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	01 fb                	add    ebx,edi
     3e4:	0e                   	push   cs
     3e5:	0d 00 01 01 01       	or     eax,0x1010100
     3ea:	01 00                	add    DWORD PTR [eax],eax
     3ec:	00 00                	add    BYTE PTR [eax],al
     3ee:	01 00                	add    DWORD PTR [eax],eax
     3f0:	00 01                	add    BYTE PTR [ecx],al
     3f2:	73 72                	jae    466 <sysEnter_Vector-0x12fb9a>
     3f4:	63 2f                	arpl   WORD PTR [edi],bp
     3f6:	69 6e 70 75 74 00 2f 	imul   ebp,DWORD PTR [esi+0x70],0x2f007475
     3fd:	68 6f 6d 65 2f       	push   0x2f656d6f
     402:	79 6f                	jns    473 <sysEnter_Vector-0x12fb8d>
     404:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     40b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     40e:	73 73                	jae    483 <sysEnter_Vector-0x12fb7d>
     410:	2f                   	das    
     411:	6c                   	ins    BYTE PTR es:[edi],dx
     412:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     419:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     41f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     425:	78 2d                	js     454 <sysEnter_Vector-0x12fbac>
     427:	67 6e                	outs   dx,BYTE PTR ds:[si]
     429:	75 2f                	jne    45a <sysEnter_Vector-0x12fba6>
     42b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     430:	2f                   	das    
     431:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     438:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     43b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     43f:	65 00 2e             	add    BYTE PTR gs:[esi],ch
     442:	2e                   	cs
     443:	2f                   	das    
     444:	2e                   	cs
     445:	2e                   	cs
     446:	2f                   	das    
     447:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     44b:	6a 2f                	push   0x2f
     44d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     450:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     457:	6e                   	outs   dx,BYTE PTR ds:[esi]
     458:	65                   	gs
     459:	6c                   	ins    BYTE PTR es:[edi],dx
     45a:	2f                   	das    
     45b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     462:	00 00                	add    BYTE PTR [eax],al
     464:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     46b:	00 01                	add    BYTE PTR [ecx],al
     46d:	00 00                	add    BYTE PTR [eax],al
     46f:	73 74                	jae    4e5 <sysEnter_Vector-0x12fb1b>
     471:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     478:	63 
     479:	2e                   	cs
     47a:	68 00 02 00 00       	push   0x200
     47f:	74 69                	je     4ea <sysEnter_Vector-0x12fb16>
     481:	6d                   	ins    DWORD PTR es:[edi],dx
     482:	65                   	gs
     483:	2e                   	cs
     484:	68 00 03 00 00       	push   0x300
     489:	6d                   	ins    DWORD PTR es:[edi],dx
     48a:	61                   	popa   
     48b:	6c                   	ins    BYTE PTR es:[edi],dx
     48c:	6c                   	ins    BYTE PTR es:[edi],dx
     48d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     48e:	63 2e                	arpl   WORD PTR [esi],bp
     490:	68 00 03 00 00       	push   0x300
     495:	6c                   	ins    BYTE PTR es:[edi],dx
     496:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     49d:	4f                   	dec    edi
     49e:	53                   	push   ebx
     49f:	2e                   	cs
     4a0:	68 00 03 00 00       	push   0x300
     4a5:	73 79                	jae    520 <sysEnter_Vector-0x12fae0>
     4a7:	73 63                	jae    50c <sysEnter_Vector-0x12faf4>
     4a9:	61                   	popa   
     4aa:	6c                   	ins    BYTE PTR es:[edi],dx
     4ab:	6c                   	ins    BYTE PTR es:[edi],dx
     4ac:	73 2e                	jae    4dc <sysEnter_Vector-0x12fb24>
     4ae:	68 00 04 00 00       	push   0x400
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	05 02 44 03 00       	add    eax,0x34402
     4ba:	30 03                	xor    BYTE PTR [ebx],al
     4bc:	0f 01                	(bad)  
     4be:	d7                   	xlat   BYTE PTR ds:[ebx]
     4bf:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     4c5:	75 4b                	jne    512 <sysEnter_Vector-0x12faee>
     4c7:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     4cd:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     4d2:	75 84                	jne    458 <sysEnter_Vector-0x12fba8>
     4d4:	68 00 02 04 01       	push   0x1040200
     4d9:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     4dc:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     4e2:	06                   	push   es
     4e3:	66 06                	pushw  es
     4e5:	68 ad 68 68 76       	push   0x766868ad
     4ea:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     4ed:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     4f0:	06                   	push   es
     4f1:	ac                   	lods   al,BYTE PTR ds:[esi]
     4f2:	06                   	push   es
     4f3:	68 5b 00 02 04       	push   0x402005b
     4f8:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     4fe:	01 01                	add    DWORD PTR [ecx],eax
     500:	63 01                	arpl   WORD PTR [ecx],ax
     502:	00 00                	add    BYTE PTR [eax],al
     504:	02 00                	add    al,BYTE PTR [eax]
     506:	ea 00 00 00 01 01 fb 	jmp    0xfb01:0x1000000
     50d:	0e                   	push   cs
     50e:	0d 00 01 01 01       	or     eax,0x1010100
     513:	01 00                	add    DWORD PTR [eax],eax
     515:	00 00                	add    BYTE PTR [eax],al
     517:	01 00                	add    DWORD PTR [eax],eax
     519:	00 01                	add    BYTE PTR [ecx],al
     51b:	73 72                	jae    58f <sysEnter_Vector-0x12fa71>
     51d:	63 00                	arpl   WORD PTR [eax],ax
     51f:	2f                   	das    
     520:	68 6f 6d 65 2f       	push   0x2f656d6f
     525:	79 6f                	jns    596 <sysEnter_Vector-0x12fa6a>
     527:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     52e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     531:	73 73                	jae    5a6 <sysEnter_Vector-0x12fa5a>
     533:	2f                   	das    
     534:	6c                   	ins    BYTE PTR es:[edi],dx
     535:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     53c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     542:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     548:	78 2d                	js     577 <sysEnter_Vector-0x12fa89>
     54a:	67 6e                	outs   dx,BYTE PTR ds:[si]
     54c:	75 2f                	jne    57d <sysEnter_Vector-0x12fa83>
     54e:	35 2e 33 2e 30       	xor    eax,0x302e332e
     553:	2f                   	das    
     554:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     55b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     55e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     562:	65 00 2e             	add    BYTE PTR gs:[esi],ch
     565:	2e                   	cs
     566:	2f                   	das    
     567:	2e                   	cs
     568:	2e                   	cs
     569:	2f                   	das    
     56a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     56e:	6a 2f                	push   0x2f
     570:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     573:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     57a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     57b:	65                   	gs
     57c:	6c                   	ins    BYTE PTR es:[edi],dx
     57d:	2f                   	das    
     57e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     585:	00 00                	add    BYTE PTR [eax],al
     587:	6c                   	ins    BYTE PTR es:[edi],dx
     588:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     58f:	4f                   	dec    edi
     590:	53                   	push   ebx
     591:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     594:	01 00                	add    DWORD PTR [eax],eax
     596:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     599:	64                   	fs
     59a:	61                   	popa   
     59b:	72 67                	jb     604 <sysEnter_Vector-0x12f9fc>
     59d:	2e                   	cs
     59e:	68 00 02 00 00       	push   0x200
     5a3:	73 74                	jae    619 <sysEnter_Vector-0x12f9e7>
     5a5:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     5ac:	63 
     5ad:	2e                   	cs
     5ae:	68 00 02 00 00       	push   0x200
     5b3:	73 74                	jae    629 <sysEnter_Vector-0x12f9d7>
     5b5:	64                   	fs
     5b6:	64                   	fs
     5b7:	65                   	gs
     5b8:	66                   	data16
     5b9:	2e                   	cs
     5ba:	68 00 02 00 00       	push   0x200
     5bf:	74 69                	je     62a <sysEnter_Vector-0x12f9d6>
     5c1:	6d                   	ins    DWORD PTR es:[edi],dx
     5c2:	65                   	gs
     5c3:	2e                   	cs
     5c4:	68 00 03 00 00       	push   0x300
     5c9:	6d                   	ins    DWORD PTR es:[edi],dx
     5ca:	61                   	popa   
     5cb:	6c                   	ins    BYTE PTR es:[edi],dx
     5cc:	6c                   	ins    BYTE PTR es:[edi],dx
     5cd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5ce:	63 2e                	arpl   WORD PTR [esi],bp
     5d0:	68 00 03 00 00       	push   0x300
     5d5:	6c                   	ins    BYTE PTR es:[edi],dx
     5d6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     5dd:	4f                   	dec    edi
     5de:	53                   	push   ebx
     5df:	2e                   	cs
     5e0:	68 00 03 00 00       	push   0x300
     5e5:	73 79                	jae    660 <sysEnter_Vector-0x12f9a0>
     5e7:	73 63                	jae    64c <sysEnter_Vector-0x12f9b4>
     5e9:	61                   	popa   
     5ea:	6c                   	ins    BYTE PTR es:[edi],dx
     5eb:	6c                   	ins    BYTE PTR es:[edi],dx
     5ec:	73 2e                	jae    61c <sysEnter_Vector-0x12f9e4>
     5ee:	68 00 04 00 00       	push   0x400
     5f3:	00 00                	add    BYTE PTR [eax],al
     5f5:	05 02 98 04 00       	add    eax,0x49802
     5fa:	30 03                	xor    BYTE PTR [ebx],al
     5fc:	0f 01 08             	sidtd  [eax]
     5ff:	13 75 08             	adc    esi,DWORD PTR [ebp+0x8]
     602:	13 3d 69 08 13 75    	adc    edi,DWORD PTR ds:0x75130869
     608:	f3 3d 69 08 13 75    	repz cmp eax,0x75130869
     60e:	c9                   	leave  
     60f:	3d 69 f3 75 ad       	cmp    eax,0xad75f369
     614:	3d 31 08 21 08       	cmp    eax,0x8210831
     619:	67 d8 59 bb          	fcomp  DWORD PTR [bx+di-0x45]
     61d:	c9                   	leave  
     61e:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     621:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     624:	08 21                	or     BYTE PTR [ecx],ah
     626:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     62c:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     630:	31 f4                	xor    esp,esi
     632:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     636:	31 08                	xor    DWORD PTR [eax],ecx
     638:	14 68                	adc    al,0x68
     63a:	08 2f                	or     BYTE PTR [edi],ch
     63c:	59                   	pop    ecx
     63d:	69 08 13 02 2a 13    	imul   ecx,DWORD PTR [eax],0x132a0213
     643:	59                   	pop    ecx
     644:	69 c9 c9 3f c9 08    	imul   ecx,ecx,0x8c93fc9
     64a:	83 3f 08             	cmp    DWORD PTR [edi],0x8
     64d:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     650:	67 08 4d 3d          	or     BYTE PTR [di+0x3d],cl
     654:	5b                   	pop    ebx
     655:	c9                   	leave  
     656:	c9                   	leave  
     657:	3f                   	aas    
     658:	08 21                	or     BYTE PTR [ecx],ah
     65a:	77 c9                	ja     625 <sysEnter_Vector-0x12f9db>
     65c:	08 4b 5b             	or     BYTE PTR [ebx+0x5b],cl
     65f:	c9                   	leave  
     660:	08 13                	or     BYTE PTR [ebx],dl
     662:	02 02                	add    al,BYTE PTR [edx]
     664:	00 01                	add    BYTE PTR [ecx],al
     666:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
     669:	00 00                	add    BYTE PTR [eax],al
     66b:	02 00                	add    al,BYTE PTR [eax]
     66d:	da 00                	fiadd  DWORD PTR [eax]
     66f:	00 00                	add    BYTE PTR [eax],al
     671:	01 01                	add    DWORD PTR [ecx],eax
     673:	fb                   	sti    
     674:	0e                   	push   cs
     675:	0d 00 01 01 01       	or     eax,0x1010100
     67a:	01 00                	add    DWORD PTR [eax],eax
     67c:	00 00                	add    BYTE PTR [eax],al
     67e:	01 00                	add    DWORD PTR [eax],eax
     680:	00 01                	add    BYTE PTR [ecx],al
     682:	73 72                	jae    6f6 <sysEnter_Vector-0x12f90a>
     684:	63 00                	arpl   WORD PTR [eax],ax
     686:	2f                   	das    
     687:	68 6f 6d 65 2f       	push   0x2f656d6f
     68c:	79 6f                	jns    6fd <sysEnter_Vector-0x12f903>
     68e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     695:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     698:	73 73                	jae    70d <sysEnter_Vector-0x12f8f3>
     69a:	2f                   	das    
     69b:	6c                   	ins    BYTE PTR es:[edi],dx
     69c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     6a3:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     6a9:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     6af:	78 2d                	js     6de <sysEnter_Vector-0x12f922>
     6b1:	67 6e                	outs   dx,BYTE PTR ds:[si]
     6b3:	75 2f                	jne    6e4 <sysEnter_Vector-0x12f91c>
     6b5:	35 2e 33 2e 30       	xor    eax,0x302e332e
     6ba:	2f                   	das    
     6bb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6c2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6c5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6c9:	65 00 2e             	add    BYTE PTR gs:[esi],ch
     6cc:	2e                   	cs
     6cd:	2f                   	das    
     6ce:	2e                   	cs
     6cf:	2e                   	cs
     6d0:	2f                   	das    
     6d1:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     6d5:	6a 2f                	push   0x2f
     6d7:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     6da:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     6e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6e2:	65                   	gs
     6e3:	6c                   	ins    BYTE PTR es:[edi],dx
     6e4:	2f                   	das    
     6e5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6ec:	00 00                	add    BYTE PTR [eax],al
     6ee:	6d                   	ins    DWORD PTR es:[edi],dx
     6ef:	61                   	popa   
     6f0:	6c                   	ins    BYTE PTR es:[edi],dx
     6f1:	6c                   	ins    BYTE PTR es:[edi],dx
     6f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6f3:	63 2e                	arpl   WORD PTR [esi],bp
     6f5:	63 00                	arpl   WORD PTR [eax],ax
     6f7:	01 00                	add    DWORD PTR [eax],eax
     6f9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     6fc:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     703:	63 
     704:	2e                   	cs
     705:	68 00 02 00 00       	push   0x200
     70a:	73 74                	jae    780 <sysEnter_Vector-0x12f880>
     70c:	64                   	fs
     70d:	64                   	fs
     70e:	65                   	gs
     70f:	66                   	data16
     710:	2e                   	cs
     711:	68 00 02 00 00       	push   0x200
     716:	6d                   	ins    DWORD PTR es:[edi],dx
     717:	61                   	popa   
     718:	6c                   	ins    BYTE PTR es:[edi],dx
     719:	6c                   	ins    BYTE PTR es:[edi],dx
     71a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     71b:	63 2e                	arpl   WORD PTR [esi],bp
     71d:	68 00 03 00 00       	push   0x300
     722:	74 69                	je     78d <sysEnter_Vector-0x12f873>
     724:	6d                   	ins    DWORD PTR es:[edi],dx
     725:	65                   	gs
     726:	2e                   	cs
     727:	68 00 03 00 00       	push   0x300
     72c:	6c                   	ins    BYTE PTR es:[edi],dx
     72d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     734:	4f                   	dec    edi
     735:	53                   	push   ebx
     736:	2e                   	cs
     737:	68 00 03 00 00       	push   0x300
     73c:	73 79                	jae    7b7 <sysEnter_Vector-0x12f849>
     73e:	73 63                	jae    7a3 <sysEnter_Vector-0x12f85d>
     740:	61                   	popa   
     741:	6c                   	ins    BYTE PTR es:[edi],dx
     742:	6c                   	ins    BYTE PTR es:[edi],dx
     743:	73 2e                	jae    773 <sysEnter_Vector-0x12f88d>
     745:	68 00 04 00 00       	push   0x400
     74a:	00 00                	add    BYTE PTR [eax],al
     74c:	05 02 08 08 00       	add    eax,0x80802
     751:	30 03                	xor    BYTE PTR [ebx],al
     753:	0c 01                	or     al,0x1
     755:	08 21                	or     BYTE PTR [ecx],ah
     757:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     75a:	bb bb bb 69 f5       	mov    ebx,0xf569bbbb
     75f:	92                   	xchg   edx,eax
     760:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     766:	04 01                	add    al,0x1
     768:	06                   	push   es
     769:	66 06                	pushw  es
     76b:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     770:	59                   	pop    ecx
     771:	31 08                	xor    DWORD PTR [eax],ecx
     773:	35 08 ad 08 13       	xor    eax,0x1308ad08
     778:	08 ad a0 e6 02 22    	or     BYTE PTR [ebp+0x2202e6a0],ch
     77e:	13 f3                	adc    esi,ebx
     780:	02 28                	add    ch,BYTE PTR [eax]
     782:	13 bc ad ad 02 22 15 	adc    edi,DWORD PTR [ebp+ebp*4+0x152202ad]
     789:	02 22                	add    ah,BYTE PTR [edx]
     78b:	13 ad 91 91 75 08    	adc    ebp,DWORD PTR [ebp+0x8759191]
     791:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     793:	08 13                	or     BYTE PTR [ebx],dl
     795:	91                   	xchg   ecx,eax
     796:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     799:	ad                   	lods   eax,DWORD PTR ds:[esi]
     79a:	3d 77 f5 68 93       	cmp    eax,0x9368f577
     79f:	00 02                	add    BYTE PTR [edx],al
     7a1:	04 02                	add    al,0x2
     7a3:	be 30 03 76 90       	mov    esi,0x90760330
     7a8:	03 0b                	add    ecx,DWORD PTR [ebx]
     7aa:	20 31                	and    BYTE PTR [ecx],dh
     7ac:	d7                   	xlat   BYTE PTR ds:[ebx]
     7ad:	08 3d 02 04 00 01    	or     BYTE PTR ds:0x1000402,bh
     7b3:	01 ed                	add    ebp,ebp
     7b5:	00 00                	add    BYTE PTR [eax],al
     7b7:	00 02                	add    BYTE PTR [edx],al
     7b9:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     7bf:	01 fb                	add    ebx,edi
     7c1:	0e                   	push   cs
     7c2:	0d 00 01 01 01       	or     eax,0x1010100
     7c7:	01 00                	add    DWORD PTR [eax],eax
     7c9:	00 00                	add    BYTE PTR [eax],al
     7cb:	01 00                	add    DWORD PTR [eax],eax
     7cd:	00 01                	add    BYTE PTR [ecx],al
     7cf:	73 72                	jae    843 <sysEnter_Vector-0x12f7bd>
     7d1:	63 00                	arpl   WORD PTR [eax],ax
     7d3:	2f                   	das    
     7d4:	68 6f 6d 65 2f       	push   0x2f656d6f
     7d9:	79 6f                	jns    84a <sysEnter_Vector-0x12f7b6>
     7db:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     7e2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     7e5:	73 73                	jae    85a <sysEnter_Vector-0x12f7a6>
     7e7:	2f                   	das    
     7e8:	6c                   	ins    BYTE PTR es:[edi],dx
     7e9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     7f0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     7f6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     7fc:	78 2d                	js     82b <sysEnter_Vector-0x12f7d5>
     7fe:	67 6e                	outs   dx,BYTE PTR ds:[si]
     800:	75 2f                	jne    831 <sysEnter_Vector-0x12f7cf>
     802:	35 2e 33 2e 30       	xor    eax,0x302e332e
     807:	2f                   	das    
     808:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     80f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     812:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     816:	65 00 00             	add    BYTE PTR gs:[eax],al
     819:	6d                   	ins    DWORD PTR es:[edi],dx
     81a:	65                   	gs
     81b:	6d                   	ins    DWORD PTR es:[edi],dx
     81c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     81f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     822:	01 00                	add    DWORD PTR [eax],eax
     824:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     827:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     82e:	63 
     82f:	2e                   	cs
     830:	68 00 02 00 00       	push   0x200
     835:	74 69                	je     8a0 <sysEnter_Vector-0x12f760>
     837:	6d                   	ins    DWORD PTR es:[edi],dx
     838:	65                   	gs
     839:	2e                   	cs
     83a:	68 00 03 00 00       	push   0x300
     83f:	73 74                	jae    8b5 <sysEnter_Vector-0x12f74b>
     841:	64                   	fs
     842:	64                   	fs
     843:	65                   	gs
     844:	66                   	data16
     845:	2e                   	cs
     846:	68 00 02 00 00       	push   0x200
     84b:	6d                   	ins    DWORD PTR es:[edi],dx
     84c:	61                   	popa   
     84d:	6c                   	ins    BYTE PTR es:[edi],dx
     84e:	6c                   	ins    BYTE PTR es:[edi],dx
     84f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     850:	63 2e                	arpl   WORD PTR [esi],bp
     852:	68 00 03 00 00       	push   0x300
     857:	6c                   	ins    BYTE PTR es:[edi],dx
     858:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     85f:	4f                   	dec    edi
     860:	53                   	push   ebx
     861:	2e                   	cs
     862:	68 00 03 00 00       	push   0x300
     867:	00 00                	add    BYTE PTR [eax],al
     869:	05 02 30 0b 00       	add    eax,0xb3002
     86e:	30 03                	xor    BYTE PTR [ebx],al
     870:	0a 01                	or     al,BYTE PTR [ecx]
     872:	f5                   	cmc    
     873:	d7                   	xlat   BYTE PTR ds:[ebx]
     874:	d7                   	xlat   BYTE PTR ds:[ebx]
     875:	68 91 67 68 83       	push   0x83686791
     87a:	91                   	xchg   ecx,eax
     87b:	91                   	xchg   ecx,eax
     87c:	2f                   	das    
     87d:	08 1f                	or     BYTE PTR [edi],bl
     87f:	e8 08 57 ca 84       	call   84ca5f8c <ticksToWait+0x54ca23b0>
     884:	68 83 67 68 83       	push   0x83686783
     889:	91                   	xchg   ecx,eax
     88a:	91                   	xchg   ecx,eax
     88b:	2f                   	das    
     88c:	08 1f                	or     BYTE PTR [edi],bl
     88e:	e8 08 57 ca 5c       	call   5cca5f9b <ticksToWait+0x2cca23bf>
     893:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     899:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     89f:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     8a2:	00 01                	add    BYTE PTR [ecx],al
     8a4:	01 e4                	add    esp,esp
     8a6:	00 00                	add    BYTE PTR [eax],al
     8a8:	00 02                	add    BYTE PTR [edx],al
     8aa:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     8b0:	01 fb                	add    ebx,edi
     8b2:	0e                   	push   cs
     8b3:	0d 00 01 01 01       	or     eax,0x1010100
     8b8:	01 00                	add    DWORD PTR [eax],eax
     8ba:	00 00                	add    BYTE PTR [eax],al
     8bc:	01 00                	add    DWORD PTR [eax],eax
     8be:	00 01                	add    BYTE PTR [ecx],al
     8c0:	73 72                	jae    934 <sysEnter_Vector-0x12f6cc>
     8c2:	63 00                	arpl   WORD PTR [eax],ax
     8c4:	2f                   	das    
     8c5:	68 6f 6d 65 2f       	push   0x2f656d6f
     8ca:	79 6f                	jns    93b <sysEnter_Vector-0x12f6c5>
     8cc:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     8d3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     8d6:	73 73                	jae    94b <sysEnter_Vector-0x12f6b5>
     8d8:	2f                   	das    
     8d9:	6c                   	ins    BYTE PTR es:[edi],dx
     8da:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     8e1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     8e7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     8ed:	78 2d                	js     91c <sysEnter_Vector-0x12f6e4>
     8ef:	67 6e                	outs   dx,BYTE PTR ds:[si]
     8f1:	75 2f                	jne    922 <sysEnter_Vector-0x12f6de>
     8f3:	35 2e 33 2e 30       	xor    eax,0x302e332e
     8f8:	2f                   	das    
     8f9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     900:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     903:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     907:	65 00 00             	add    BYTE PTR gs:[eax],al
     90a:	6d                   	ins    DWORD PTR es:[edi],dx
     90b:	65                   	gs
     90c:	6d                   	ins    DWORD PTR es:[edi],dx
     90d:	73 65                	jae    974 <sysEnter_Vector-0x12f68c>
     90f:	74 2e                	je     93f <sysEnter_Vector-0x12f6c1>
     911:	63 00                	arpl   WORD PTR [eax],ax
     913:	01 00                	add    DWORD PTR [eax],eax
     915:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     918:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     91f:	63 
     920:	2e                   	cs
     921:	68 00 02 00 00       	push   0x200
     926:	73 74                	jae    99c <sysEnter_Vector-0x12f664>
     928:	64                   	fs
     929:	64                   	fs
     92a:	65                   	gs
     92b:	66                   	data16
     92c:	2e                   	cs
     92d:	68 00 02 00 00       	push   0x200
     932:	74 69                	je     99d <sysEnter_Vector-0x12f663>
     934:	6d                   	ins    DWORD PTR es:[edi],dx
     935:	65                   	gs
     936:	2e                   	cs
     937:	68 00 03 00 00       	push   0x300
     93c:	6d                   	ins    DWORD PTR es:[edi],dx
     93d:	61                   	popa   
     93e:	6c                   	ins    BYTE PTR es:[edi],dx
     93f:	6c                   	ins    BYTE PTR es:[edi],dx
     940:	6f                   	outs   dx,DWORD PTR ds:[esi]
     941:	63 2e                	arpl   WORD PTR [esi],bp
     943:	68 00 03 00 00       	push   0x300
     948:	6c                   	ins    BYTE PTR es:[edi],dx
     949:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     950:	4f                   	dec    edi
     951:	53                   	push   ebx
     952:	2e                   	cs
     953:	68 00 03 00 00       	push   0x300
     958:	00 00                	add    BYTE PTR [eax],al
     95a:	05 02 cc 0c 00       	add    eax,0xccc02
     95f:	30 1a                	xor    BYTE PTR [edx],bl
     961:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     968:	ca 9f 2f             	retf   0x2f9f
     96b:	d5 bd                	aad    0xbd
     96d:	9f                   	lahf   
     96e:	2f                   	das    
     96f:	f1                   	icebp  
     970:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     975:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     97c:	ca 9f 2f             	retf   0x2f9f
     97f:	d5 bd                	aad    0xbd
     981:	9f                   	lahf   
     982:	2f                   	das    
     983:	f1                   	icebp  
     984:	bf d5 cb 3d 02       	mov    edi,0x23dcbd5
     989:	02 00                	add    al,BYTE PTR [eax]
     98b:	01 01                	add    DWORD PTR [ecx],eax
     98d:	c9                   	leave  
     98e:	00 00                	add    BYTE PTR [eax],al
     990:	00 02                	add    BYTE PTR [edx],al
     992:	00 b3 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dh
     998:	01 fb                	add    ebx,edi
     99a:	0e                   	push   cs
     99b:	0d 00 01 01 01       	or     eax,0x1010100
     9a0:	01 00                	add    DWORD PTR [eax],eax
     9a2:	00 00                	add    BYTE PTR [eax],al
     9a4:	01 00                	add    DWORD PTR [eax],eax
     9a6:	00 01                	add    BYTE PTR [ecx],al
     9a8:	73 72                	jae    a1c <sysEnter_Vector-0x12f5e4>
     9aa:	63 00                	arpl   WORD PTR [eax],ax
     9ac:	2f                   	das    
     9ad:	68 6f 6d 65 2f       	push   0x2f656d6f
     9b2:	79 6f                	jns    a23 <sysEnter_Vector-0x12f5dd>
     9b4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     9bb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     9be:	73 73                	jae    a33 <sysEnter_Vector-0x12f5cd>
     9c0:	2f                   	das    
     9c1:	6c                   	ins    BYTE PTR es:[edi],dx
     9c2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     9c9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     9cf:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     9d5:	78 2d                	js     a04 <sysEnter_Vector-0x12f5fc>
     9d7:	67 6e                	outs   dx,BYTE PTR ds:[si]
     9d9:	75 2f                	jne    a0a <sysEnter_Vector-0x12f5f6>
     9db:	35 2e 33 2e 30       	xor    eax,0x302e332e
     9e0:	2f                   	das    
     9e1:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9e8:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9eb:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9ef:	65 00 00             	add    BYTE PTR gs:[eax],al
     9f2:	6d                   	ins    DWORD PTR es:[edi],dx
     9f3:	6d                   	ins    DWORD PTR es:[edi],dx
     9f4:	61                   	popa   
     9f5:	70 2e                	jo     a25 <sysEnter_Vector-0x12f5db>
     9f7:	63 00                	arpl   WORD PTR [eax],ax
     9f9:	01 00                	add    DWORD PTR [eax],eax
     9fb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     9fe:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a05:	63 
     a06:	2e                   	cs
     a07:	68 00 02 00 00       	push   0x200
     a0c:	73 74                	jae    a82 <sysEnter_Vector-0x12f57e>
     a0e:	64                   	fs
     a0f:	64                   	fs
     a10:	65                   	gs
     a11:	66                   	data16
     a12:	2e                   	cs
     a13:	68 00 02 00 00       	push   0x200
     a18:	74 69                	je     a83 <sysEnter_Vector-0x12f57d>
     a1a:	6d                   	ins    DWORD PTR es:[edi],dx
     a1b:	65                   	gs
     a1c:	2e                   	cs
     a1d:	68 00 03 00 00       	push   0x300
     a22:	74 79                	je     a9d <sysEnter_Vector-0x12f563>
     a24:	70 65                	jo     a8b <sysEnter_Vector-0x12f575>
     a26:	73 2e                	jae    a56 <sysEnter_Vector-0x12f5aa>
     a28:	68 00 03 00 00       	push   0x300
     a2d:	6d                   	ins    DWORD PTR es:[edi],dx
     a2e:	61                   	popa   
     a2f:	6c                   	ins    BYTE PTR es:[edi],dx
     a30:	6c                   	ins    BYTE PTR es:[edi],dx
     a31:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a32:	63 2e                	arpl   WORD PTR [esi],bp
     a34:	68 00 03 00 00       	push   0x300
     a39:	6c                   	ins    BYTE PTR es:[edi],dx
     a3a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     a41:	4f                   	dec    edi
     a42:	53                   	push   ebx
     a43:	2e                   	cs
     a44:	68 00 03 00 00       	push   0x300
     a49:	00 00                	add    BYTE PTR [eax],al
     a4b:	05 02 5c 0e 00       	add    eax,0xe5c02
     a50:	30 03                	xor    BYTE PTR [ebx],al
     a52:	09 01                	or     DWORD PTR [ecx],eax
     a54:	ca 02 03             	retf   0x302
     a57:	00 01                	add    BYTE PTR [ecx],al
     a59:	01 4f 01             	add    DWORD PTR [edi+0x1],ecx
     a5c:	00 00                	add    BYTE PTR [eax],al
     a5e:	02 00                	add    al,BYTE PTR [eax]
     a60:	e2 00                	loop   a62 <sysEnter_Vector-0x12f59e>
     a62:	00 00                	add    BYTE PTR [eax],al
     a64:	01 01                	add    DWORD PTR [ecx],eax
     a66:	fb                   	sti    
     a67:	0e                   	push   cs
     a68:	0d 00 01 01 01       	or     eax,0x1010100
     a6d:	01 00                	add    DWORD PTR [eax],eax
     a6f:	00 00                	add    BYTE PTR [eax],al
     a71:	01 00                	add    DWORD PTR [eax],eax
     a73:	00 01                	add    BYTE PTR [ecx],al
     a75:	73 72                	jae    ae9 <sysEnter_Vector-0x12f517>
     a77:	63 00                	arpl   WORD PTR [eax],ax
     a79:	2f                   	das    
     a7a:	68 6f 6d 65 2f       	push   0x2f656d6f
     a7f:	79 6f                	jns    af0 <sysEnter_Vector-0x12f510>
     a81:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a88:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a8b:	73 73                	jae    b00 <sysEnter_Vector-0x12f500>
     a8d:	2f                   	das    
     a8e:	6c                   	ins    BYTE PTR es:[edi],dx
     a8f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a96:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a9c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     aa2:	78 2d                	js     ad1 <sysEnter_Vector-0x12f52f>
     aa4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     aa6:	75 2f                	jne    ad7 <sysEnter_Vector-0x12f529>
     aa8:	35 2e 33 2e 30       	xor    eax,0x302e332e
     aad:	2f                   	das    
     aae:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ab5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ab8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     abc:	65 00 2e             	add    BYTE PTR gs:[esi],ch
     abf:	2e                   	cs
     ac0:	2f                   	das    
     ac1:	2e                   	cs
     ac2:	2e                   	cs
     ac3:	2f                   	das    
     ac4:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     ac8:	6a 2f                	push   0x2f
     aca:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     acd:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     ad4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ad5:	65                   	gs
     ad6:	6c                   	ins    BYTE PTR es:[edi],dx
     ad7:	2f                   	das    
     ad8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     adf:	00 00                	add    BYTE PTR [eax],al
     ae1:	73 74                	jae    b57 <sysEnter_Vector-0x12f4a9>
     ae3:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     aea:	00 
     aeb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     aee:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     af5:	63 
     af6:	2e                   	cs
     af7:	68 00 02 00 00       	push   0x200
     afc:	73 74                	jae    b72 <sysEnter_Vector-0x12f48e>
     afe:	64                   	fs
     aff:	64                   	fs
     b00:	65                   	gs
     b01:	66                   	data16
     b02:	2e                   	cs
     b03:	68 00 02 00 00       	push   0x200
     b08:	74 69                	je     b73 <sysEnter_Vector-0x12f48d>
     b0a:	6d                   	ins    DWORD PTR es:[edi],dx
     b0b:	65                   	gs
     b0c:	2e                   	cs
     b0d:	68 00 03 00 00       	push   0x300
     b12:	64                   	fs
     b13:	6c                   	ins    BYTE PTR es:[edi],dx
     b14:	6c                   	ins    BYTE PTR es:[edi],dx
     b15:	69 73 74 2e 68 00 04 	imul   esi,DWORD PTR [ebx+0x74],0x400682e
     b1c:	00 00                	add    BYTE PTR [eax],al
     b1e:	73 74                	jae    b94 <sysEnter_Vector-0x12f46c>
     b20:	64 69 6f 2e 68 00 03 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x30068
     b27:	00 
     b28:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     b2b:	6c                   	ins    BYTE PTR es:[edi],dx
     b2c:	6c                   	ins    BYTE PTR es:[edi],dx
     b2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b2e:	63 2e                	arpl   WORD PTR [esi],bp
     b30:	68 00 03 00 00       	push   0x300
     b35:	6c                   	ins    BYTE PTR es:[edi],dx
     b36:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b3d:	4f                   	dec    edi
     b3e:	53                   	push   ebx
     b3f:	2e                   	cs
     b40:	68 00 03 00 00       	push   0x300
     b45:	00 00                	add    BYTE PTR [eax],al
     b47:	05 02 6c 0e 00       	add    eax,0xe6c02
     b4c:	30 03                	xor    BYTE PTR [ebx],al
     b4e:	12 01                	adc    al,BYTE PTR [ecx]
     b50:	08 13                	or     BYTE PTR [ebx],dl
     b52:	08 59 5b             	or     BYTE PTR [ecx+0x5b],bl
     b55:	08 13                	or     BYTE PTR [ebx],dl
     b57:	f3 5b                	repz pop ebx
     b59:	08 23                	or     BYTE PTR [ebx],ah
     b5b:	77 08                	ja     b65 <sysEnter_Vector-0x12f49b>
     b5d:	30 08                	xor    BYTE PTR [eax],cl
     b5f:	21 08                	and    DWORD PTR [eax],ecx
     b61:	23 d7                	and    edx,edi
     b63:	d9 91 e5 08 72 00    	fst    DWORD PTR [ecx+0x7208e5]
     b69:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     b6c:	06                   	push   es
     b6d:	4a                   	dec    edx
     b6e:	06                   	push   es
     b6f:	86 21                	xchg   BYTE PTR [ecx],ah
     b71:	d7                   	xlat   BYTE PTR ds:[ebx]
     b72:	91                   	xchg   ecx,eax
     b73:	e5 08                	in     eax,0x8
     b75:	72 00                	jb     b77 <sysEnter_Vector-0x12f489>
     b77:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     b7a:	06                   	push   es
     b7b:	4a                   	dec    edx
     b7c:	06                   	push   es
     b7d:	86 21                	xchg   BYTE PTR [ecx],ah
     b7f:	d7                   	xlat   BYTE PTR ds:[ebx]
     b80:	00 02                	add    BYTE PTR [edx],al
     b82:	04 03                	add    al,0x3
     b84:	83 00 02             	add    DWORD PTR [eax],0x2
     b87:	04 03                	add    al,0x3
     b89:	d5 00                	aad    0x0
     b8b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     b8e:	06                   	push   es
     b8f:	4a                   	dec    edx
     b90:	06                   	push   es
     b91:	69 e6 21 5c 08 22    	imul   esp,esi,0x22085c21
     b97:	76 08                	jbe    ba1 <sysEnter_Vector-0x12f45f>
     b99:	31 d7                	xor    edi,edx
     b9b:	d7                   	xlat   BYTE PTR ds:[ebx]
     b9c:	d7                   	xlat   BYTE PTR ds:[ebx]
     b9d:	d7                   	xlat   BYTE PTR ds:[ebx]
     b9e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b9f:	e6 21                	out    0x21,al
     ba1:	5b                   	pop    ebx
     ba2:	c9                   	leave  
     ba3:	e5 d7                	in     eax,0xd7
     ba5:	e5 08                	in     eax,0x8
     ba7:	67 02 03             	add    al,BYTE PTR [bp+di]
     baa:	00 01                	add    BYTE PTR [ecx],al
     bac:	01 d6                	add    esi,edx
     bae:	00 00                	add    BYTE PTR [eax],al
     bb0:	00 02                	add    BYTE PTR [edx],al
     bb2:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
     bb8:	01 fb                	add    ebx,edi
     bba:	0e                   	push   cs
     bbb:	0d 00 01 01 01       	or     eax,0x1010100
     bc0:	01 00                	add    DWORD PTR [eax],eax
     bc2:	00 00                	add    BYTE PTR [eax],al
     bc4:	01 00                	add    DWORD PTR [eax],eax
     bc6:	00 01                	add    BYTE PTR [ecx],al
     bc8:	73 72                	jae    c3c <sysEnter_Vector-0x12f3c4>
     bca:	63 2f                	arpl   WORD PTR [edi],bp
     bcc:	73 74                	jae    c42 <sysEnter_Vector-0x12f3be>
     bce:	72 69                	jb     c39 <sysEnter_Vector-0x12f3c7>
     bd0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bd1:	67 73 00             	addr16 jae bd4 <sysEnter_Vector-0x12f42c>
     bd4:	2f                   	das    
     bd5:	68 6f 6d 65 2f       	push   0x2f656d6f
     bda:	79 6f                	jns    c4b <sysEnter_Vector-0x12f3b5>
     bdc:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     be3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     be6:	73 73                	jae    c5b <sysEnter_Vector-0x12f3a5>
     be8:	2f                   	das    
     be9:	6c                   	ins    BYTE PTR es:[edi],dx
     bea:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bf1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bf7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     bfd:	78 2d                	js     c2c <sysEnter_Vector-0x12f3d4>
     bff:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c01:	75 2f                	jne    c32 <sysEnter_Vector-0x12f3ce>
     c03:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c08:	2f                   	das    
     c09:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c10:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c13:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c17:	65 00 00             	add    BYTE PTR gs:[eax],al
     c1a:	73 74                	jae    c90 <sysEnter_Vector-0x12f370>
     c1c:	72 63                	jb     c81 <sysEnter_Vector-0x12f37f>
     c1e:	61                   	popa   
     c1f:	74 2e                	je     c4f <sysEnter_Vector-0x12f3b1>
     c21:	63 00                	arpl   WORD PTR [eax],ax
     c23:	01 00                	add    DWORD PTR [eax],eax
     c25:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c28:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c2f:	63 
     c30:	2e                   	cs
     c31:	68 00 02 00 00       	push   0x200
     c36:	74 69                	je     ca1 <sysEnter_Vector-0x12f35f>
     c38:	6d                   	ins    DWORD PTR es:[edi],dx
     c39:	65                   	gs
     c3a:	2e                   	cs
     c3b:	68 00 03 00 00       	push   0x300
     c40:	6d                   	ins    DWORD PTR es:[edi],dx
     c41:	61                   	popa   
     c42:	6c                   	ins    BYTE PTR es:[edi],dx
     c43:	6c                   	ins    BYTE PTR es:[edi],dx
     c44:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c45:	63 2e                	arpl   WORD PTR [esi],bp
     c47:	68 00 03 00 00       	push   0x300
     c4c:	6c                   	ins    BYTE PTR es:[edi],dx
     c4d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c54:	4f                   	dec    edi
     c55:	53                   	push   ebx
     c56:	2e                   	cs
     c57:	68 00 03 00 00       	push   0x300
     c5c:	00 00                	add    BYTE PTR [eax],al
     c5e:	05 02 cc 10 00       	add    eax,0x10cc02
     c63:	30 03                	xor    BYTE PTR [ebx],al
     c65:	1d 01 08 21 02       	sbb    eax,0x2210801
     c6a:	24 13                	and    al,0x13
     c6c:	3d 5b 08 21 02       	cmp    eax,0x221085b
     c71:	24 13                	and    al,0x13
     c73:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     c78:	49                   	dec    ecx
     c79:	e8 76 2f 08 4b       	call   4b083bf4 <ticksToWait+0x1b080018>
     c7e:	4b                   	dec    ebx
     c7f:	47                   	inc    edi
     c80:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     c87:	c5 00                	lds    eax,FWORD PTR [eax]
     c89:	00 00                	add    BYTE PTR [eax],al
     c8b:	02 00                	add    al,BYTE PTR [eax]
     c8d:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     c8e:	00 00                	add    BYTE PTR [eax],al
     c90:	00 01                	add    BYTE PTR [ecx],al
     c92:	01 fb                	add    ebx,edi
     c94:	0e                   	push   cs
     c95:	0d 00 01 01 01       	or     eax,0x1010100
     c9a:	01 00                	add    DWORD PTR [eax],eax
     c9c:	00 00                	add    BYTE PTR [eax],al
     c9e:	01 00                	add    DWORD PTR [eax],eax
     ca0:	00 01                	add    BYTE PTR [ecx],al
     ca2:	73 72                	jae    d16 <sysEnter_Vector-0x12f2ea>
     ca4:	63 2f                	arpl   WORD PTR [edi],bp
     ca6:	73 74                	jae    d1c <sysEnter_Vector-0x12f2e4>
     ca8:	72 69                	jb     d13 <sysEnter_Vector-0x12f2ed>
     caa:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cab:	67 73 00             	addr16 jae cae <sysEnter_Vector-0x12f352>
     cae:	2f                   	das    
     caf:	68 6f 6d 65 2f       	push   0x2f656d6f
     cb4:	79 6f                	jns    d25 <sysEnter_Vector-0x12f2db>
     cb6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     cbd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     cc0:	73 73                	jae    d35 <sysEnter_Vector-0x12f2cb>
     cc2:	2f                   	das    
     cc3:	6c                   	ins    BYTE PTR es:[edi],dx
     cc4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ccb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cd1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cd7:	78 2d                	js     d06 <sysEnter_Vector-0x12f2fa>
     cd9:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cdb:	75 2f                	jne    d0c <sysEnter_Vector-0x12f2f4>
     cdd:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ce2:	2f                   	das    
     ce3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cea:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ced:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     cf1:	65 00 00             	add    BYTE PTR gs:[eax],al
     cf4:	73 74                	jae    d6a <sysEnter_Vector-0x12f296>
     cf6:	72 63                	jb     d5b <sysEnter_Vector-0x12f2a5>
     cf8:	6d                   	ins    DWORD PTR es:[edi],dx
     cf9:	70 2e                	jo     d29 <sysEnter_Vector-0x12f2d7>
     cfb:	63 00                	arpl   WORD PTR [eax],ax
     cfd:	01 00                	add    DWORD PTR [eax],eax
     cff:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d02:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d09:	63 
     d0a:	2e                   	cs
     d0b:	68 00 02 00 00       	push   0x200
     d10:	74 69                	je     d7b <sysEnter_Vector-0x12f285>
     d12:	6d                   	ins    DWORD PTR es:[edi],dx
     d13:	65                   	gs
     d14:	2e                   	cs
     d15:	68 00 03 00 00       	push   0x300
     d1a:	6d                   	ins    DWORD PTR es:[edi],dx
     d1b:	61                   	popa   
     d1c:	6c                   	ins    BYTE PTR es:[edi],dx
     d1d:	6c                   	ins    BYTE PTR es:[edi],dx
     d1e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d1f:	63 2e                	arpl   WORD PTR [esi],bp
     d21:	68 00 03 00 00       	push   0x300
     d26:	6c                   	ins    BYTE PTR es:[edi],dx
     d27:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d2e:	4f                   	dec    edi
     d2f:	53                   	push   ebx
     d30:	2e                   	cs
     d31:	68 00 03 00 00       	push   0x300
     d36:	00 00                	add    BYTE PTR [eax],al
     d38:	05 02 b8 11 00       	add    eax,0x11b802
     d3d:	30 03                	xor    BYTE PTR [ebx],al
     d3f:	18 01                	sbb    BYTE PTR [ecx],al
     d41:	08 21                	or     BYTE PTR [ecx],ah
     d43:	3d 41 ad ad 67       	cmp    eax,0x67adad41
     d48:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
     d4e:	01 01                	add    DWORD PTR [ecx],eax
     d50:	e6 00                	out    0x0,al
     d52:	00 00                	add    BYTE PTR [eax],al
     d54:	02 00                	add    al,BYTE PTR [eax]
     d56:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     d57:	00 00                	add    BYTE PTR [eax],al
     d59:	00 01                	add    BYTE PTR [ecx],al
     d5b:	01 fb                	add    ebx,edi
     d5d:	0e                   	push   cs
     d5e:	0d 00 01 01 01       	or     eax,0x1010100
     d63:	01 00                	add    DWORD PTR [eax],eax
     d65:	00 00                	add    BYTE PTR [eax],al
     d67:	01 00                	add    DWORD PTR [eax],eax
     d69:	00 01                	add    BYTE PTR [ecx],al
     d6b:	73 72                	jae    ddf <sysEnter_Vector-0x12f221>
     d6d:	63 2f                	arpl   WORD PTR [edi],bp
     d6f:	73 74                	jae    de5 <sysEnter_Vector-0x12f21b>
     d71:	72 69                	jb     ddc <sysEnter_Vector-0x12f224>
     d73:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d74:	67 73 00             	addr16 jae d77 <sysEnter_Vector-0x12f289>
     d77:	2f                   	das    
     d78:	68 6f 6d 65 2f       	push   0x2f656d6f
     d7d:	79 6f                	jns    dee <sysEnter_Vector-0x12f212>
     d7f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d86:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d89:	73 73                	jae    dfe <sysEnter_Vector-0x12f202>
     d8b:	2f                   	das    
     d8c:	6c                   	ins    BYTE PTR es:[edi],dx
     d8d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d94:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d9a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     da0:	78 2d                	js     dcf <sysEnter_Vector-0x12f231>
     da2:	67 6e                	outs   dx,BYTE PTR ds:[si]
     da4:	75 2f                	jne    dd5 <sysEnter_Vector-0x12f22b>
     da6:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dab:	2f                   	das    
     dac:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     db3:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     db6:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     dba:	65 00 00             	add    BYTE PTR gs:[eax],al
     dbd:	73 74                	jae    e33 <sysEnter_Vector-0x12f1cd>
     dbf:	72 63                	jb     e24 <sysEnter_Vector-0x12f1dc>
     dc1:	70 79                	jo     e3c <sysEnter_Vector-0x12f1c4>
     dc3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     dc6:	01 00                	add    DWORD PTR [eax],eax
     dc8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     dcb:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     dd2:	63 
     dd3:	2e                   	cs
     dd4:	68 00 02 00 00       	push   0x200
     dd9:	74 69                	je     e44 <sysEnter_Vector-0x12f1bc>
     ddb:	6d                   	ins    DWORD PTR es:[edi],dx
     ddc:	65                   	gs
     ddd:	2e                   	cs
     dde:	68 00 03 00 00       	push   0x300
     de3:	6d                   	ins    DWORD PTR es:[edi],dx
     de4:	61                   	popa   
     de5:	6c                   	ins    BYTE PTR es:[edi],dx
     de6:	6c                   	ins    BYTE PTR es:[edi],dx
     de7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     de8:	63 2e                	arpl   WORD PTR [esi],bp
     dea:	68 00 03 00 00       	push   0x300
     def:	6c                   	ins    BYTE PTR es:[edi],dx
     df0:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     df7:	4f                   	dec    edi
     df8:	53                   	push   ebx
     df9:	2e                   	cs
     dfa:	68 00 03 00 00       	push   0x300
     dff:	00 00                	add    BYTE PTR [eax],al
     e01:	05 02 18 12 00       	add    eax,0x121802
     e06:	30 16                	xor    BYTE PTR [esi],dl
     e08:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
     e0c:	04 01                	add    al,0x1
     e0e:	06                   	push   es
     e0f:	20 06                	and    BYTE PTR [esi],al
     e11:	08 ca                	or     dl,cl
     e13:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
     e19:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     e1c:	06                   	push   es
     e1d:	20 06                	and    BYTE PTR [esi],al
     e1f:	08 ca                	or     dl,cl
     e21:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
     e27:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     e2a:	06                   	push   es
     e2b:	20 00                	and    BYTE PTR [eax],al
     e2d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     e30:	08 c8                	or     al,cl
     e32:	06                   	push   es
     e33:	ca 3d 02             	retf   0x23d
     e36:	02 00                	add    al,BYTE PTR [eax]
     e38:	01 01                	add    DWORD PTR [ecx],eax
     e3a:	d5 00                	aad    0x0
     e3c:	00 00                	add    BYTE PTR [eax],al
     e3e:	02 00                	add    al,BYTE PTR [eax]
     e40:	a8 00                	test   al,0x0
     e42:	00 00                	add    BYTE PTR [eax],al
     e44:	01 01                	add    DWORD PTR [ecx],eax
     e46:	fb                   	sti    
     e47:	0e                   	push   cs
     e48:	0d 00 01 01 01       	or     eax,0x1010100
     e4d:	01 00                	add    DWORD PTR [eax],eax
     e4f:	00 00                	add    BYTE PTR [eax],al
     e51:	01 00                	add    DWORD PTR [eax],eax
     e53:	00 01                	add    BYTE PTR [ecx],al
     e55:	73 72                	jae    ec9 <sysEnter_Vector-0x12f137>
     e57:	63 2f                	arpl   WORD PTR [edi],bp
     e59:	73 74                	jae    ecf <sysEnter_Vector-0x12f131>
     e5b:	72 69                	jb     ec6 <sysEnter_Vector-0x12f13a>
     e5d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e5e:	67 73 00             	addr16 jae e61 <sysEnter_Vector-0x12f19f>
     e61:	2f                   	das    
     e62:	68 6f 6d 65 2f       	push   0x2f656d6f
     e67:	79 6f                	jns    ed8 <sysEnter_Vector-0x12f128>
     e69:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e70:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e73:	73 73                	jae    ee8 <sysEnter_Vector-0x12f118>
     e75:	2f                   	das    
     e76:	6c                   	ins    BYTE PTR es:[edi],dx
     e77:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e7e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e84:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e8a:	78 2d                	js     eb9 <sysEnter_Vector-0x12f147>
     e8c:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e8e:	75 2f                	jne    ebf <sysEnter_Vector-0x12f141>
     e90:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e95:	2f                   	das    
     e96:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e9d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ea0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ea4:	65 00 00             	add    BYTE PTR gs:[eax],al
     ea7:	73 74                	jae    f1d <sysEnter_Vector-0x12f0e3>
     ea9:	72 69                	jb     f14 <sysEnter_Vector-0x12f0ec>
     eab:	73 6e                	jae    f1b <sysEnter_Vector-0x12f0e5>
     ead:	75 6d                	jne    f1c <sysEnter_Vector-0x12f0e4>
     eaf:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     eb2:	01 00                	add    DWORD PTR [eax],eax
     eb4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     eb7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ebe:	63 
     ebf:	2e                   	cs
     ec0:	68 00 02 00 00       	push   0x200
     ec5:	74 69                	je     f30 <sysEnter_Vector-0x12f0d0>
     ec7:	6d                   	ins    DWORD PTR es:[edi],dx
     ec8:	65                   	gs
     ec9:	2e                   	cs
     eca:	68 00 03 00 00       	push   0x300
     ecf:	6d                   	ins    DWORD PTR es:[edi],dx
     ed0:	61                   	popa   
     ed1:	6c                   	ins    BYTE PTR es:[edi],dx
     ed2:	6c                   	ins    BYTE PTR es:[edi],dx
     ed3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ed4:	63 2e                	arpl   WORD PTR [esi],bp
     ed6:	68 00 03 00 00       	push   0x300
     edb:	6c                   	ins    BYTE PTR es:[edi],dx
     edc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ee3:	4f                   	dec    edi
     ee4:	53                   	push   ebx
     ee5:	2e                   	cs
     ee6:	68 00 03 00 00       	push   0x300
     eeb:	00 00                	add    BYTE PTR [eax],al
     eed:	05 02 e0 12 00       	add    eax,0x12e002
     ef2:	30 1a                	xor    BYTE PTR [edx],bl
     ef4:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
     ef7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     efa:	06                   	push   es
     efb:	66                   	data16
     efc:	00 02                	add    BYTE PTR [edx],al
     efe:	04 02                	add    al,0x2
     f00:	66 06                	pushw  es
     f02:	75 59                	jne    f5d <sysEnter_Vector-0x12f0a3>
     f04:	31 f3                	xor    ebx,esi
     f06:	76 2f                	jbe    f37 <sysEnter_Vector-0x12f0c9>
     f08:	08 e5                	or     ch,ah
     f0a:	72 08                	jb     f14 <sysEnter_Vector-0x12f0ec>
     f0c:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
     f0f:	02 00                	add    al,BYTE PTR [eax]
     f11:	01 01                	add    DWORD PTR [ecx],eax
     f13:	94                   	xchg   esp,eax
     f14:	00 00                	add    BYTE PTR [eax],al
     f16:	00 02                	add    BYTE PTR [edx],al
     f18:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
     f1c:	00 01                	add    BYTE PTR [ecx],al
     f1e:	01 fb                	add    ebx,edi
     f20:	0e                   	push   cs
     f21:	0d 00 01 01 01       	or     eax,0x1010100
     f26:	01 00                	add    DWORD PTR [eax],eax
     f28:	00 00                	add    BYTE PTR [eax],al
     f2a:	01 00                	add    DWORD PTR [eax],eax
     f2c:	00 01                	add    BYTE PTR [ecx],al
     f2e:	73 72                	jae    fa2 <sysEnter_Vector-0x12f05e>
     f30:	63 2f                	arpl   WORD PTR [edi],bp
     f32:	73 74                	jae    fa8 <sysEnter_Vector-0x12f058>
     f34:	72 69                	jb     f9f <sysEnter_Vector-0x12f061>
     f36:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f37:	67 73 00             	addr16 jae f3a <sysEnter_Vector-0x12f0c6>
     f3a:	2f                   	das    
     f3b:	68 6f 6d 65 2f       	push   0x2f656d6f
     f40:	79 6f                	jns    fb1 <sysEnter_Vector-0x12f04f>
     f42:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f49:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f4c:	73 73                	jae    fc1 <sysEnter_Vector-0x12f03f>
     f4e:	2f                   	das    
     f4f:	6c                   	ins    BYTE PTR es:[edi],dx
     f50:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f57:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f5d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f63:	78 2d                	js     f92 <sysEnter_Vector-0x12f06e>
     f65:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f67:	75 2f                	jne    f98 <sysEnter_Vector-0x12f068>
     f69:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f6e:	2f                   	das    
     f6f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f76:	00 00                	add    BYTE PTR [eax],al
     f78:	73 74                	jae    fee <sysEnter_Vector-0x12f012>
     f7a:	72 6c                	jb     fe8 <sysEnter_Vector-0x12f018>
     f7c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f7e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f81:	01 00                	add    DWORD PTR [eax],eax
     f83:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f86:	64                   	fs
     f87:	64                   	fs
     f88:	65                   	gs
     f89:	66                   	data16
     f8a:	2e                   	cs
     f8b:	68 00 02 00 00       	push   0x200
     f90:	00 00                	add    BYTE PTR [eax],al
     f92:	05 02 6c 13 00       	add    eax,0x136c02
     f97:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
     f9a:	75 2f                	jne    fcb <sysEnter_Vector-0x12f035>
     f9c:	49                   	dec    ecx
     f9d:	e6 3d                	out    0x3d,al
     f9f:	30 f3                	xor    bl,dh
     fa1:	75 2f                	jne    fd2 <sysEnter_Vector-0x12f02e>
     fa3:	49                   	dec    ecx
     fa4:	e6 3d                	out    0x3d,al
     fa6:	02 02                	add    al,BYTE PTR [edx]
     fa8:	00 01                	add    BYTE PTR [ecx],al
     faa:	01 a5 00 00 00 02    	add    DWORD PTR [ebp+0x2000000],esp
     fb0:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
     fb3:	00 00                	add    BYTE PTR [eax],al
     fb5:	01 01                	add    DWORD PTR [ecx],eax
     fb7:	fb                   	sti    
     fb8:	0e                   	push   cs
     fb9:	0d 00 01 01 01       	or     eax,0x1010100
     fbe:	01 00                	add    DWORD PTR [eax],eax
     fc0:	00 00                	add    BYTE PTR [eax],al
     fc2:	01 00                	add    DWORD PTR [eax],eax
     fc4:	00 01                	add    BYTE PTR [ecx],al
     fc6:	73 72                	jae    103a <sysEnter_Vector-0x12efc6>
     fc8:	63 2f                	arpl   WORD PTR [edi],bp
     fca:	73 74                	jae    1040 <sysEnter_Vector-0x12efc0>
     fcc:	72 69                	jb     1037 <sysEnter_Vector-0x12efc9>
     fce:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fcf:	67 73 00             	addr16 jae fd2 <sysEnter_Vector-0x12f02e>
     fd2:	2f                   	das    
     fd3:	68 6f 6d 65 2f       	push   0x2f656d6f
     fd8:	79 6f                	jns    1049 <sysEnter_Vector-0x12efb7>
     fda:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fe1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     fe4:	73 73                	jae    1059 <sysEnter_Vector-0x12efa7>
     fe6:	2f                   	das    
     fe7:	6c                   	ins    BYTE PTR es:[edi],dx
     fe8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     fef:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ff5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ffb:	78 2d                	js     102a <sysEnter_Vector-0x12efd6>
     ffd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     fff:	75 2f                	jne    1030 <sysEnter_Vector-0x12efd0>
    1001:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1006:	2f                   	das    
    1007:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    100e:	00 00                	add    BYTE PTR [eax],al
    1010:	73 74                	jae    1086 <sysEnter_Vector-0x12ef7a>
    1012:	72 6e                	jb     1082 <sysEnter_Vector-0x12ef7e>
    1014:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1017:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    101a:	01 00                	add    DWORD PTR [eax],eax
    101c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    101f:	64                   	fs
    1020:	64                   	fs
    1021:	65                   	gs
    1022:	66                   	data16
    1023:	2e                   	cs
    1024:	68 00 02 00 00       	push   0x200
    1029:	00 00                	add    BYTE PTR [eax],al
    102b:	05 02 d0 13 00       	add    eax,0x13d002
    1030:	30 03                	xor    BYTE PTR [ebx],al
    1032:	0c 01                	or     al,0x1
    1034:	c9                   	leave  
    1035:	2f                   	das    
    1036:	f3 00 02             	repz add BYTE PTR [edx],al
    1039:	04 01                	add    al,0x1
    103b:	06                   	push   es
    103c:	f2 00 02             	repnz add BYTE PTR [edx],al
    103f:	04 02                	add    al,0x2
    1041:	74 06                	je     1049 <sysEnter_Vector-0x12efb7>
    1043:	75 9f                	jne    fe4 <sysEnter_Vector-0x12f01c>
    1045:	70 00                	jo     1047 <sysEnter_Vector-0x12efb9>
    1047:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    104a:	06                   	push   es
    104b:	ba 06 6b 59 02       	mov    edx,0x2596b06
    1050:	02 00                	add    al,BYTE PTR [eax]
    1052:	01 01                	add    DWORD PTR [ecx],eax
    1054:	9d                   	popf   
    1055:	00 00                	add    BYTE PTR [eax],al
    1057:	00 02                	add    BYTE PTR [edx],al
    1059:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    105c:	00 00                	add    BYTE PTR [eax],al
    105e:	01 01                	add    DWORD PTR [ecx],eax
    1060:	fb                   	sti    
    1061:	0e                   	push   cs
    1062:	0d 00 01 01 01       	or     eax,0x1010100
    1067:	01 00                	add    DWORD PTR [eax],eax
    1069:	00 00                	add    BYTE PTR [eax],al
    106b:	01 00                	add    DWORD PTR [eax],eax
    106d:	00 01                	add    BYTE PTR [ecx],al
    106f:	73 72                	jae    10e3 <sysEnter_Vector-0x12ef1d>
    1071:	63 2f                	arpl   WORD PTR [edi],bp
    1073:	73 74                	jae    10e9 <sysEnter_Vector-0x12ef17>
    1075:	72 69                	jb     10e0 <sysEnter_Vector-0x12ef20>
    1077:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1078:	67 73 00             	addr16 jae 107b <sysEnter_Vector-0x12ef85>
    107b:	2f                   	das    
    107c:	68 6f 6d 65 2f       	push   0x2f656d6f
    1081:	79 6f                	jns    10f2 <sysEnter_Vector-0x12ef0e>
    1083:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    108a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    108d:	73 73                	jae    1102 <sysEnter_Vector-0x12eefe>
    108f:	2f                   	das    
    1090:	6c                   	ins    BYTE PTR es:[edi],dx
    1091:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1098:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    109e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10a4:	78 2d                	js     10d3 <sysEnter_Vector-0x12ef2d>
    10a6:	67 6e                	outs   dx,BYTE PTR ds:[si]
    10a8:	75 2f                	jne    10d9 <sysEnter_Vector-0x12ef27>
    10aa:	35 2e 33 2e 30       	xor    eax,0x302e332e
    10af:	2f                   	das    
    10b0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10b7:	00 00                	add    BYTE PTR [eax],al
    10b9:	73 74                	jae    112f <sysEnter_Vector-0x12eed1>
    10bb:	72 6e                	jb     112b <sysEnter_Vector-0x12eed5>
    10bd:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    10c0:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10c3:	01 00                	add    DWORD PTR [eax],eax
    10c5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10c8:	64                   	fs
    10c9:	64                   	fs
    10ca:	65                   	gs
    10cb:	66                   	data16
    10cc:	2e                   	cs
    10cd:	68 00 02 00 00       	push   0x200
    10d2:	00 00                	add    BYTE PTR [eax],al
    10d4:	05 02 38 14 00       	add    eax,0x143802
    10d9:	30 03                	xor    BYTE PTR [ebx],al
    10db:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    10e0:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    10e3:	00 02                	add    BYTE PTR [edx],al
    10e5:	04 01                	add    al,0x1
    10e7:	06                   	push   es
    10e8:	66 06                	pushw  es
    10ea:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    10ef:	3d 02 02 00 01       	cmp    eax,0x1000202
    10f4:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    10f7:	00 00                	add    BYTE PTR [eax],al
    10f9:	02 00                	add    al,BYTE PTR [eax]
    10fb:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    10fc:	00 00                	add    BYTE PTR [eax],al
    10fe:	00 01                	add    BYTE PTR [ecx],al
    1100:	01 fb                	add    ebx,edi
    1102:	0e                   	push   cs
    1103:	0d 00 01 01 01       	or     eax,0x1010100
    1108:	01 00                	add    DWORD PTR [eax],eax
    110a:	00 00                	add    BYTE PTR [eax],al
    110c:	01 00                	add    DWORD PTR [eax],eax
    110e:	00 01                	add    BYTE PTR [ecx],al
    1110:	73 72                	jae    1184 <sysEnter_Vector-0x12ee7c>
    1112:	63 2f                	arpl   WORD PTR [edi],bp
    1114:	73 74                	jae    118a <sysEnter_Vector-0x12ee76>
    1116:	72 69                	jb     1181 <sysEnter_Vector-0x12ee7f>
    1118:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1119:	67 73 00             	addr16 jae 111c <sysEnter_Vector-0x12eee4>
    111c:	2f                   	das    
    111d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1122:	79 6f                	jns    1193 <sysEnter_Vector-0x12ee6d>
    1124:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    112b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    112e:	73 73                	jae    11a3 <sysEnter_Vector-0x12ee5d>
    1130:	2f                   	das    
    1131:	6c                   	ins    BYTE PTR es:[edi],dx
    1132:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1139:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    113f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1145:	78 2d                	js     1174 <sysEnter_Vector-0x12ee8c>
    1147:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1149:	75 2f                	jne    117a <sysEnter_Vector-0x12ee86>
    114b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1150:	2f                   	das    
    1151:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1158:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    115b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    115f:	65 00 00             	add    BYTE PTR gs:[eax],al
    1162:	73 74                	jae    11d8 <sysEnter_Vector-0x12ee28>
    1164:	72 6f                	jb     11d5 <sysEnter_Vector-0x12ee2b>
    1166:	75 6c                	jne    11d4 <sysEnter_Vector-0x12ee2c>
    1168:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    116b:	01 00                	add    DWORD PTR [eax],eax
    116d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1170:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1177:	63 
    1178:	2e                   	cs
    1179:	68 00 02 00 00       	push   0x200
    117e:	74 69                	je     11e9 <sysEnter_Vector-0x12ee17>
    1180:	6d                   	ins    DWORD PTR es:[edi],dx
    1181:	65                   	gs
    1182:	2e                   	cs
    1183:	68 00 03 00 00       	push   0x300
    1188:	6d                   	ins    DWORD PTR es:[edi],dx
    1189:	61                   	popa   
    118a:	6c                   	ins    BYTE PTR es:[edi],dx
    118b:	6c                   	ins    BYTE PTR es:[edi],dx
    118c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    118d:	63 2e                	arpl   WORD PTR [esi],bp
    118f:	68 00 03 00 00       	push   0x300
    1194:	6c                   	ins    BYTE PTR es:[edi],dx
    1195:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    119c:	4f                   	dec    edi
    119d:	53                   	push   ebx
    119e:	2e                   	cs
    119f:	68 00 03 00 00       	push   0x300
    11a4:	00 00                	add    BYTE PTR [eax],al
    11a6:	05 02 98 14 00       	add    eax,0x149802
    11ab:	30 03                	xor    BYTE PTR [ebx],al
    11ad:	3b 01                	cmp    eax,DWORD PTR [ecx]
    11af:	08 2f                	or     BYTE PTR [edi],ch
    11b1:	40                   	inc    eax
    11b2:	00 02                	add    BYTE PTR [edx],al
    11b4:	04 01                	add    al,0x1
    11b6:	7a 00                	jp     11b8 <sysEnter_Vector-0x12ee48>
    11b8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11bb:	ad                   	lods   eax,DWORD PTR ds:[esi]
    11bc:	59                   	pop    ecx
    11bd:	59                   	pop    ecx
    11be:	75 c9                	jne    1189 <sysEnter_Vector-0x12ee77>
    11c0:	59                   	pop    ecx
    11c1:	ad                   	lods   eax,DWORD PTR ds:[esi]
    11c2:	00 02                	add    BYTE PTR [edx],al
    11c4:	04 02                	add    al,0x2
    11c6:	06                   	push   es
    11c7:	66                   	data16
    11c8:	00 02                	add    BYTE PTR [edx],al
    11ca:	04 03                	add    al,0x3
    11cc:	66 06                	pushw  es
    11ce:	59                   	pop    ecx
    11cf:	00 02                	add    BYTE PTR [edx],al
    11d1:	04 01                	add    al,0x1
    11d3:	06                   	push   es
    11d4:	74 06                	je     11dc <sysEnter_Vector-0x12ee24>
    11d6:	75 91                	jne    1169 <sysEnter_Vector-0x12ee97>
    11d8:	3d 76 67 00 02       	cmp    eax,0x2006776
    11dd:	04 01                	add    al,0x1
    11df:	06                   	push   es
    11e0:	58                   	pop    eax
    11e1:	00 02                	add    BYTE PTR [edx],al
    11e3:	04 02                	add    al,0x2
    11e5:	74 00                	je     11e7 <sysEnter_Vector-0x12ee19>
    11e7:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    11ea:	58                   	pop    eax
    11eb:	06                   	push   es
    11ec:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    11f1:	9f                   	lahf   
    11f2:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    11f6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11f9:	06                   	push   es
    11fa:	58                   	pop    eax
    11fb:	00 02                	add    BYTE PTR [edx],al
    11fd:	04 03                	add    al,0x3
    11ff:	58                   	pop    eax
    1200:	00 02                	add    BYTE PTR [edx],al
    1202:	04 04                	add    al,0x4
    1204:	74 00                	je     1206 <sysEnter_Vector-0x12edfa>
    1206:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1209:	58                   	pop    eax
    120a:	06                   	push   es
    120b:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    120e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1211:	06                   	push   es
    1212:	66                   	data16
    1213:	00 02                	add    BYTE PTR [edx],al
    1215:	04 02                	add    al,0x2
    1217:	58                   	pop    eax
    1218:	00 02                	add    BYTE PTR [edx],al
    121a:	04 03                	add    al,0x3
    121c:	58                   	pop    eax
    121d:	06                   	push   es
    121e:	67 76 59             	addr16 jbe 127a <sysEnter_Vector-0x12ed86>
    1221:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1225:	03 10                	add    edx,DWORD PTR [eax]
    1227:	ac                   	lods   al,BYTE PTR ds:[esi]
    1228:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    122b:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    122e:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1231:	67 2f                	addr16 das 
    1233:	67 00 02             	add    BYTE PTR [bp+si],al
    1236:	04 01                	add    al,0x1
    1238:	06                   	push   es
    1239:	66                   	data16
    123a:	00 02                	add    BYTE PTR [edx],al
    123c:	04 02                	add    al,0x2
    123e:	58                   	pop    eax
    123f:	00 02                	add    BYTE PTR [edx],al
    1241:	04 04                	add    al,0x4
    1243:	3c 06                	cmp    al,0x6
    1245:	59                   	pop    ecx
    1246:	2f                   	das    
    1247:	02 08                	add    cl,BYTE PTR [eax]
    1249:	00 01                	add    BYTE PTR [ecx],al
    124b:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    124e:	00 00                	add    BYTE PTR [eax],al
    1250:	02 00                	add    al,BYTE PTR [eax]
    1252:	2d 00 00 00 01       	sub    eax,0x1000000
    1257:	01 fb                	add    ebx,edi
    1259:	0e                   	push   cs
    125a:	0d 00 01 01 01       	or     eax,0x1010100
    125f:	01 00                	add    DWORD PTR [eax],eax
    1261:	00 00                	add    BYTE PTR [eax],al
    1263:	01 00                	add    DWORD PTR [eax],eax
    1265:	00 01                	add    BYTE PTR [ecx],al
    1267:	73 72                	jae    12db <sysEnter_Vector-0x12ed25>
    1269:	63 2f                	arpl   WORD PTR [edi],bp
    126b:	73 74                	jae    12e1 <sysEnter_Vector-0x12ed1f>
    126d:	72 69                	jb     12d8 <sysEnter_Vector-0x12ed28>
    126f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1270:	67 73 00             	addr16 jae 1273 <sysEnter_Vector-0x12ed8d>
    1273:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1276:	72 70                	jb     12e8 <sysEnter_Vector-0x12ed18>
    1278:	61                   	popa   
    1279:	72 74                	jb     12ef <sysEnter_Vector-0x12ed11>
    127b:	73 2e                	jae    12ab <sysEnter_Vector-0x12ed55>
    127d:	63 00                	arpl   WORD PTR [eax],ax
    127f:	01 00                	add    DWORD PTR [eax],eax
    1281:	00 00                	add    BYTE PTR [eax],al
    1283:	00 05 02 18 16 00    	add    BYTE PTR ds:0x161802,al
    1289:	30 13                	xor    BYTE PTR [ebx],dl
    128b:	c9                   	leave  
    128c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    128d:	3d 02 02 00 01       	cmp    eax,0x1000202
    1292:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    1295:	00 00                	add    BYTE PTR [eax],al
    1297:	02 00                	add    al,BYTE PTR [eax]
    1299:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    129a:	00 00                	add    BYTE PTR [eax],al
    129c:	00 01                	add    BYTE PTR [ecx],al
    129e:	01 fb                	add    ebx,edi
    12a0:	0e                   	push   cs
    12a1:	0d 00 01 01 01       	or     eax,0x1010100
    12a6:	01 00                	add    DWORD PTR [eax],eax
    12a8:	00 00                	add    BYTE PTR [eax],al
    12aa:	01 00                	add    DWORD PTR [eax],eax
    12ac:	00 01                	add    BYTE PTR [ecx],al
    12ae:	73 72                	jae    1322 <sysEnter_Vector-0x12ecde>
    12b0:	63 2f                	arpl   WORD PTR [edi],bp
    12b2:	73 74                	jae    1328 <sysEnter_Vector-0x12ecd8>
    12b4:	72 69                	jb     131f <sysEnter_Vector-0x12ece1>
    12b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12b7:	67 73 00             	addr16 jae 12ba <sysEnter_Vector-0x12ed46>
    12ba:	2f                   	das    
    12bb:	68 6f 6d 65 2f       	push   0x2f656d6f
    12c0:	79 6f                	jns    1331 <sysEnter_Vector-0x12eccf>
    12c2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    12c9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    12cc:	73 73                	jae    1341 <sysEnter_Vector-0x12ecbf>
    12ce:	2f                   	das    
    12cf:	6c                   	ins    BYTE PTR es:[edi],dx
    12d0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    12d7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    12dd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12e3:	78 2d                	js     1312 <sysEnter_Vector-0x12ecee>
    12e5:	67 6e                	outs   dx,BYTE PTR ds:[si]
    12e7:	75 2f                	jne    1318 <sysEnter_Vector-0x12ece8>
    12e9:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12ee:	2f                   	das    
    12ef:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12f6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    12f9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    12fd:	65 00 00             	add    BYTE PTR gs:[eax],al
    1300:	73 74                	jae    1376 <sysEnter_Vector-0x12ec8a>
    1302:	72 74                	jb     1378 <sysEnter_Vector-0x12ec88>
    1304:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1305:	6c                   	ins    BYTE PTR es:[edi],dx
    1306:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1309:	01 00                	add    DWORD PTR [eax],eax
    130b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    130e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1315:	63 
    1316:	2e                   	cs
    1317:	68 00 02 00 00       	push   0x200
    131c:	74 69                	je     1387 <sysEnter_Vector-0x12ec79>
    131e:	6d                   	ins    DWORD PTR es:[edi],dx
    131f:	65                   	gs
    1320:	2e                   	cs
    1321:	68 00 03 00 00       	push   0x300
    1326:	6d                   	ins    DWORD PTR es:[edi],dx
    1327:	61                   	popa   
    1328:	6c                   	ins    BYTE PTR es:[edi],dx
    1329:	6c                   	ins    BYTE PTR es:[edi],dx
    132a:	6f                   	outs   dx,DWORD PTR ds:[esi]
    132b:	63 2e                	arpl   WORD PTR [esi],bp
    132d:	68 00 03 00 00       	push   0x300
    1332:	6c                   	ins    BYTE PTR es:[edi],dx
    1333:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    133a:	4f                   	dec    edi
    133b:	53                   	push   ebx
    133c:	2e                   	cs
    133d:	68 00 03 00 00       	push   0x300
    1342:	00 00                	add    BYTE PTR [eax],al
    1344:	05 02 38 16 00       	add    eax,0x163802
    1349:	30 03                	xor    BYTE PTR [ebx],al
    134b:	d7                   	xlat   BYTE PTR ds:[ebx]
    134c:	00 01                	add    BYTE PTR [ecx],al
    134e:	08 2f                	or     BYTE PTR [edi],ch
    1350:	40                   	inc    eax
    1351:	00 02                	add    BYTE PTR [edx],al
    1353:	04 01                	add    al,0x1
    1355:	7c 00                	jl     1357 <sysEnter_Vector-0x12eca9>
    1357:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    135a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    135b:	59                   	pop    ecx
    135c:	59                   	pop    ecx
    135d:	75 c9                	jne    1328 <sysEnter_Vector-0x12ecd8>
    135f:	59                   	pop    ecx
    1360:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1361:	00 02                	add    BYTE PTR [edx],al
    1363:	04 02                	add    al,0x2
    1365:	06                   	push   es
    1366:	66                   	data16
    1367:	00 02                	add    BYTE PTR [edx],al
    1369:	04 03                	add    al,0x3
    136b:	66 06                	pushw  es
    136d:	59                   	pop    ecx
    136e:	00 02                	add    BYTE PTR [edx],al
    1370:	04 01                	add    al,0x1
    1372:	06                   	push   es
    1373:	74 06                	je     137b <sysEnter_Vector-0x12ec85>
    1375:	75 91                	jne    1308 <sysEnter_Vector-0x12ecf8>
    1377:	3d 76 67 00 02       	cmp    eax,0x2006776
    137c:	04 01                	add    al,0x1
    137e:	06                   	push   es
    137f:	58                   	pop    eax
    1380:	00 02                	add    BYTE PTR [edx],al
    1382:	04 02                	add    al,0x2
    1384:	74 00                	je     1386 <sysEnter_Vector-0x12ec7a>
    1386:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1389:	58                   	pop    eax
    138a:	06                   	push   es
    138b:	03 13                	add    edx,DWORD PTR [ebx]
    138d:	3c 00                	cmp    al,0x0
    138f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1392:	06                   	push   es
    1393:	66                   	data16
    1394:	00 02                	add    BYTE PTR [edx],al
    1396:	04 02                	add    al,0x2
    1398:	74 00                	je     139a <sysEnter_Vector-0x12ec66>
    139a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    139d:	06                   	push   es
    139e:	59                   	pop    ecx
    139f:	00 02                	add    BYTE PTR [edx],al
    13a1:	04 04                	add    al,0x4
    13a3:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    13a9:	f3 9f                	repz lahf 
    13ab:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    13af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13b2:	06                   	push   es
    13b3:	58                   	pop    eax
    13b4:	00 02                	add    BYTE PTR [edx],al
    13b6:	04 03                	add    al,0x3
    13b8:	58                   	pop    eax
    13b9:	00 02                	add    BYTE PTR [edx],al
    13bb:	04 04                	add    al,0x4
    13bd:	74 00                	je     13bf <sysEnter_Vector-0x12ec41>
    13bf:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    13c2:	58                   	pop    eax
    13c3:	06                   	push   es
    13c4:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    13c7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13ca:	06                   	push   es
    13cb:	66                   	data16
    13cc:	00 02                	add    BYTE PTR [edx],al
    13ce:	04 02                	add    al,0x2
    13d0:	58                   	pop    eax
    13d1:	00 02                	add    BYTE PTR [edx],al
    13d3:	04 03                	add    al,0x3
    13d5:	58                   	pop    eax
    13d6:	06                   	push   es
    13d7:	59                   	pop    ecx
    13d8:	76 59                	jbe    1433 <sysEnter_Vector-0x12ebcd>
    13da:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    13de:	03 10                	add    edx,DWORD PTR [eax]
    13e0:	ac                   	lods   al,BYTE PTR ds:[esi]
    13e1:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    13e4:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    13e7:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    13ea:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    13ed:	06                   	push   es
    13ee:	66                   	data16
    13ef:	00 02                	add    BYTE PTR [edx],al
    13f1:	04 02                	add    al,0x2
    13f3:	74 00                	je     13f5 <sysEnter_Vector-0x12ec0b>
    13f5:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    13f8:	58                   	pop    eax
    13f9:	06                   	push   es
    13fa:	4b                   	dec    ebx
    13fb:	67 2f                	addr16 das 
    13fd:	67 00 02             	add    BYTE PTR [bp+si],al
    1400:	04 01                	add    al,0x1
    1402:	06                   	push   es
    1403:	66                   	data16
    1404:	00 02                	add    BYTE PTR [edx],al
    1406:	04 02                	add    al,0x2
    1408:	58                   	pop    eax
    1409:	00 02                	add    BYTE PTR [edx],al
    140b:	04 04                	add    al,0x4
    140d:	3c 06                	cmp    al,0x6
    140f:	59                   	pop    ecx
    1410:	2f                   	das    
    1411:	02 08                	add    cl,BYTE PTR [eax]
    1413:	00 01                	add    BYTE PTR [ecx],al
    1415:	01 d6                	add    esi,edx
    1417:	00 00                	add    BYTE PTR [eax],al
    1419:	00 02                	add    BYTE PTR [edx],al
    141b:	00 a7 00 00 00 01    	add    BYTE PTR [edi+0x1000000],ah
    1421:	01 fb                	add    ebx,edi
    1423:	0e                   	push   cs
    1424:	0d 00 01 01 01       	or     eax,0x1010100
    1429:	01 00                	add    DWORD PTR [eax],eax
    142b:	00 00                	add    BYTE PTR [eax],al
    142d:	01 00                	add    DWORD PTR [eax],eax
    142f:	00 01                	add    BYTE PTR [ecx],al
    1431:	73 72                	jae    14a5 <sysEnter_Vector-0x12eb5b>
    1433:	63 2f                	arpl   WORD PTR [edi],bp
    1435:	73 74                	jae    14ab <sysEnter_Vector-0x12eb55>
    1437:	72 69                	jb     14a2 <sysEnter_Vector-0x12eb5e>
    1439:	6e                   	outs   dx,BYTE PTR ds:[esi]
    143a:	67 73 00             	addr16 jae 143d <sysEnter_Vector-0x12ebc3>
    143d:	2f                   	das    
    143e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1443:	79 6f                	jns    14b4 <sysEnter_Vector-0x12eb4c>
    1445:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    144c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    144f:	73 73                	jae    14c4 <sysEnter_Vector-0x12eb3c>
    1451:	2f                   	das    
    1452:	6c                   	ins    BYTE PTR es:[edi],dx
    1453:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    145a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1460:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1466:	78 2d                	js     1495 <sysEnter_Vector-0x12eb6b>
    1468:	67 6e                	outs   dx,BYTE PTR ds:[si]
    146a:	75 2f                	jne    149b <sysEnter_Vector-0x12eb65>
    146c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1471:	2f                   	das    
    1472:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1479:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    147c:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1480:	65 00 00             	add    BYTE PTR gs:[eax],al
    1483:	73 74                	jae    14f9 <sysEnter_Vector-0x12eb07>
    1485:	72 74                	jb     14fb <sysEnter_Vector-0x12eb05>
    1487:	72 69                	jb     14f2 <sysEnter_Vector-0x12eb0e>
    1489:	6d                   	ins    DWORD PTR es:[edi],dx
    148a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    148d:	01 00                	add    DWORD PTR [eax],eax
    148f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1492:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1499:	63 
    149a:	2e                   	cs
    149b:	68 00 02 00 00       	push   0x200
    14a0:	74 69                	je     150b <sysEnter_Vector-0x12eaf5>
    14a2:	6d                   	ins    DWORD PTR es:[edi],dx
    14a3:	65                   	gs
    14a4:	2e                   	cs
    14a5:	68 00 03 00 00       	push   0x300
    14aa:	6d                   	ins    DWORD PTR es:[edi],dx
    14ab:	61                   	popa   
    14ac:	6c                   	ins    BYTE PTR es:[edi],dx
    14ad:	6c                   	ins    BYTE PTR es:[edi],dx
    14ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
    14af:	63 2e                	arpl   WORD PTR [esi],bp
    14b1:	68 00 03 00 00       	push   0x300
    14b6:	6c                   	ins    BYTE PTR es:[edi],dx
    14b7:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    14be:	4f                   	dec    edi
    14bf:	53                   	push   ebx
    14c0:	2e                   	cs
    14c1:	68 00 03 00 00       	push   0x300
    14c6:	00 00                	add    BYTE PTR [eax],al
    14c8:	05 02 d4 17 00       	add    eax,0x17d402
    14cd:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    14d3:	48                   	dec    eax
    14d4:	b3 08                	mov    bl,0x8
    14d6:	9f                   	lahf   
    14d7:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    14dd:	06                   	push   es
    14de:	82                   	(bad)  
    14df:	06                   	push   es
    14e0:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    14e1:	84 00                	test   BYTE PTR [eax],al
    14e3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14e6:	06                   	push   es
    14e7:	20 06                	and    BYTE PTR [esi],al
    14e9:	08 ca                	or     dl,cl
    14eb:	02 06                	add    al,BYTE PTR [esi]
    14ed:	00 01                	add    BYTE PTR [ecx],al
    14ef:	01 ce                	add    esi,ecx
    14f1:	00 00                	add    BYTE PTR [eax],al
    14f3:	00 02                	add    BYTE PTR [edx],al
    14f5:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    14fb:	01 fb                	add    ebx,edi
    14fd:	0e                   	push   cs
    14fe:	0d 00 01 01 01       	or     eax,0x1010100
    1503:	01 00                	add    DWORD PTR [eax],eax
    1505:	00 00                	add    BYTE PTR [eax],al
    1507:	01 00                	add    DWORD PTR [eax],eax
    1509:	00 01                	add    BYTE PTR [ecx],al
    150b:	73 72                	jae    157f <sysEnter_Vector-0x12ea81>
    150d:	63 00                	arpl   WORD PTR [eax],ax
    150f:	2f                   	das    
    1510:	68 6f 6d 65 2f       	push   0x2f656d6f
    1515:	79 6f                	jns    1586 <sysEnter_Vector-0x12ea7a>
    1517:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    151e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1521:	73 73                	jae    1596 <sysEnter_Vector-0x12ea6a>
    1523:	2f                   	das    
    1524:	6c                   	ins    BYTE PTR es:[edi],dx
    1525:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    152c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1532:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1538:	78 2d                	js     1567 <sysEnter_Vector-0x12ea99>
    153a:	67 6e                	outs   dx,BYTE PTR ds:[si]
    153c:	75 2f                	jne    156d <sysEnter_Vector-0x12ea93>
    153e:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1543:	2f                   	das    
    1544:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    154b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    154e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1552:	65 00 00             	add    BYTE PTR gs:[eax],al
    1555:	73 74                	jae    15cb <sysEnter_Vector-0x12ea35>
    1557:	72 73                	jb     15cc <sysEnter_Vector-0x12ea34>
    1559:	74 72                	je     15cd <sysEnter_Vector-0x12ea33>
    155b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    155e:	01 00                	add    DWORD PTR [eax],eax
    1560:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1563:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    156a:	63 
    156b:	2e                   	cs
    156c:	68 00 02 00 00       	push   0x200
    1571:	74 69                	je     15dc <sysEnter_Vector-0x12ea24>
    1573:	6d                   	ins    DWORD PTR es:[edi],dx
    1574:	65                   	gs
    1575:	2e                   	cs
    1576:	68 00 03 00 00       	push   0x300
    157b:	6d                   	ins    DWORD PTR es:[edi],dx
    157c:	61                   	popa   
    157d:	6c                   	ins    BYTE PTR es:[edi],dx
    157e:	6c                   	ins    BYTE PTR es:[edi],dx
    157f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1580:	63 2e                	arpl   WORD PTR [esi],bp
    1582:	68 00 03 00 00       	push   0x300
    1587:	6c                   	ins    BYTE PTR es:[edi],dx
    1588:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    158f:	4f                   	dec    edi
    1590:	53                   	push   ebx
    1591:	2e                   	cs
    1592:	68 00 03 00 00       	push   0x300
    1597:	00 00                	add    BYTE PTR [eax],al
    1599:	05 02 6c 18 00       	add    eax,0x186c02
    159e:	30 03                	xor    BYTE PTR [ebx],al
    15a0:	33 01                	xor    eax,DWORD PTR [ecx]
    15a2:	ec                   	in     al,dx
    15a3:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    15a8:	75 5a                	jne    1604 <sysEnter_Vector-0x12e9fc>
    15aa:	08 3f                	or     BYTE PTR [edi],bh
    15ac:	2c 23                	sub    al,0x23
    15ae:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    15b1:	1e                   	push   ds
    15b2:	00 02                	add    BYTE PTR [edx],al
    15b4:	04 01                	add    al,0x1
    15b6:	06                   	push   es
    15b7:	4a                   	dec    edx
    15b8:	06                   	push   es
    15b9:	03 0f                	add    ecx,DWORD PTR [edi]
    15bb:	9e                   	sahf   
    15bc:	59                   	pop    ecx
    15bd:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
    15c0:	01 01                	add    DWORD PTR [ecx],eax
    15c2:	27                   	daa    
    15c3:	03 00                	add    eax,DWORD PTR [eax]
    15c5:	00 02                	add    BYTE PTR [edx],al
    15c7:	00 cc                	add    ah,cl
    15c9:	00 00                	add    BYTE PTR [eax],al
    15cb:	00 01                	add    BYTE PTR [ecx],al
    15cd:	01 fb                	add    ebx,edi
    15cf:	0e                   	push   cs
    15d0:	0d 00 01 01 01       	or     eax,0x1010100
    15d5:	01 00                	add    DWORD PTR [eax],eax
    15d7:	00 00                	add    BYTE PTR [eax],al
    15d9:	01 00                	add    DWORD PTR [eax],eax
    15db:	00 01                	add    BYTE PTR [ecx],al
    15dd:	73 72                	jae    1651 <sysEnter_Vector-0x12e9af>
    15df:	63 00                	arpl   WORD PTR [eax],ax
    15e1:	2f                   	das    
    15e2:	68 6f 6d 65 2f       	push   0x2f656d6f
    15e7:	79 6f                	jns    1658 <sysEnter_Vector-0x12e9a8>
    15e9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    15f0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    15f3:	73 73                	jae    1668 <sysEnter_Vector-0x12e998>
    15f5:	2f                   	das    
    15f6:	6c                   	ins    BYTE PTR es:[edi],dx
    15f7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    15fe:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1604:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    160a:	78 2d                	js     1639 <sysEnter_Vector-0x12e9c7>
    160c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    160e:	75 2f                	jne    163f <sysEnter_Vector-0x12e9c1>
    1610:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1615:	2f                   	das    
    1616:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    161d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1620:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1624:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1627:	2e                   	cs
    1628:	2f                   	das    
    1629:	2e                   	cs
    162a:	2e                   	cs
    162b:	2f                   	das    
    162c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1630:	6a 2f                	push   0x2f
    1632:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1635:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    163c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    163d:	65                   	gs
    163e:	6c                   	ins    BYTE PTR es:[edi],dx
    163f:	2f                   	das    
    1640:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1647:	00 00                	add    BYTE PTR [eax],al
    1649:	74 69                	je     16b4 <sysEnter_Vector-0x12e94c>
    164b:	6d                   	ins    DWORD PTR es:[edi],dx
    164c:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1650:	01 00                	add    DWORD PTR [eax],eax
    1652:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1655:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    165c:	63 
    165d:	2e                   	cs
    165e:	68 00 02 00 00       	push   0x200
    1663:	74 69                	je     16ce <sysEnter_Vector-0x12e932>
    1665:	6d                   	ins    DWORD PTR es:[edi],dx
    1666:	65                   	gs
    1667:	2e                   	cs
    1668:	68 00 03 00 00       	push   0x300
    166d:	6d                   	ins    DWORD PTR es:[edi],dx
    166e:	61                   	popa   
    166f:	6c                   	ins    BYTE PTR es:[edi],dx
    1670:	6c                   	ins    BYTE PTR es:[edi],dx
    1671:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1672:	63 2e                	arpl   WORD PTR [esi],bp
    1674:	68 00 03 00 00       	push   0x300
    1679:	6c                   	ins    BYTE PTR es:[edi],dx
    167a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1681:	4f                   	dec    edi
    1682:	53                   	push   ebx
    1683:	2e                   	cs
    1684:	68 00 03 00 00       	push   0x300
    1689:	73 79                	jae    1704 <sysEnter_Vector-0x12e8fc>
    168b:	73 63                	jae    16f0 <sysEnter_Vector-0x12e910>
    168d:	61                   	popa   
    168e:	6c                   	ins    BYTE PTR es:[edi],dx
    168f:	6c                   	ins    BYTE PTR es:[edi],dx
    1690:	73 2e                	jae    16c0 <sysEnter_Vector-0x12e940>
    1692:	68 00 04 00 00       	push   0x400
    1697:	00 00                	add    BYTE PTR [eax],al
    1699:	05 02 dc 18 00       	add    eax,0x18dc02
    169e:	30 03                	xor    BYTE PTR [ebx],al
    16a0:	16                   	push   ss
    16a1:	01 f3                	add    ebx,esi
    16a3:	75 c9                	jne    166e <sysEnter_Vector-0x12e992>
    16a5:	3d 31 08 21 84       	cmp    eax,0x84210831
    16aa:	76 02                	jbe    16ae <sysEnter_Vector-0x12e952>
    16ac:	24 13                	and    al,0x13
    16ae:	08 22                	or     BYTE PTR [edx],ah
    16b0:	02 2e                	add    ch,BYTE PTR [esi]
    16b2:	13 02                	adc    eax,DWORD PTR [edx]
    16b4:	2f                   	das    
    16b5:	13 08                	adc    ecx,DWORD PTR [eax]
    16b7:	67 02 2d             	add    ch,BYTE PTR [di]
    16ba:	13 2f                	adc    ebp,DWORD PTR [edi]
    16bc:	00 02                	add    BYTE PTR [edx],al
    16be:	04 01                	add    al,0x1
    16c0:	06                   	push   es
    16c1:	9e                   	sahf   
    16c2:	00 02                	add    BYTE PTR [edx],al
    16c4:	04 04                	add    al,0x4
    16c6:	02 23                	add    ah,BYTE PTR [ebx]
    16c8:	12 00                	adc    al,BYTE PTR [eax]
    16ca:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    16d1:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    16d4:	74 00                	je     16d6 <sysEnter_Vector-0x12e92a>
    16d6:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    16d9:	58                   	pop    eax
    16da:	00 02                	add    BYTE PTR [edx],al
    16dc:	04 08                	add    al,0x8
    16de:	06                   	push   es
    16df:	3d 48 00 02 04       	cmp    eax,0x4020048
    16e4:	01 06                	add    DWORD PTR [esi],eax
    16e6:	9e                   	sahf   
    16e7:	00 02                	add    BYTE PTR [edx],al
    16e9:	04 04                	add    al,0x4
    16eb:	02 23                	add    ah,BYTE PTR [ebx]
    16ed:	12 00                	adc    al,BYTE PTR [eax]
    16ef:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    16f6:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    16f9:	74 00                	je     16fb <sysEnter_Vector-0x12e905>
    16fb:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    16fe:	58                   	pop    eax
    16ff:	06                   	push   es
    1700:	94                   	xchg   esp,eax
    1701:	e5 91                	in     eax,0x91
    1703:	9f                   	lahf   
    1704:	59                   	pop    ecx
    1705:	00 02                	add    BYTE PTR [edx],al
    1707:	04 01                	add    al,0x1
    1709:	06                   	push   es
    170a:	9e                   	sahf   
    170b:	00 02                	add    BYTE PTR [edx],al
    170d:	04 04                	add    al,0x4
    170f:	02 23                	add    ah,BYTE PTR [ebx]
    1711:	12 00                	adc    al,BYTE PTR [eax]
    1713:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    171a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    171d:	74 00                	je     171f <sysEnter_Vector-0x12e8e1>
    171f:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1722:	58                   	pop    eax
    1723:	00 02                	add    BYTE PTR [edx],al
    1725:	04 08                	add    al,0x8
    1727:	06                   	push   es
    1728:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    172e:	01 06                	add    DWORD PTR [esi],eax
    1730:	9e                   	sahf   
    1731:	00 02                	add    BYTE PTR [edx],al
    1733:	04 04                	add    al,0x4
    1735:	02 23                	add    ah,BYTE PTR [ebx]
    1737:	12 00                	adc    al,BYTE PTR [eax]
    1739:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1740:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1743:	74 00                	je     1745 <sysEnter_Vector-0x12e8bb>
    1745:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1748:	58                   	pop    eax
    1749:	06                   	push   es
    174a:	08 f6                	or     dh,dh
    174c:	d7                   	xlat   BYTE PTR ds:[ebx]
    174d:	9f                   	lahf   
    174e:	3d 68 08 16 08       	cmp    eax,0x8160868
    1753:	3d 08 4b 5a 08       	cmp    eax,0x85a4b08
    1758:	15 08 3d 08 3d       	adc    eax,0x3d083d08
    175d:	5a                   	pop    edx
    175e:	08 44 02 2e          	or     BYTE PTR [edx+eax*1+0x2e],al
    1762:	13 02                	adc    eax,DWORD PTR [edx]
    1764:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1766:	91                   	xchg   ecx,eax
    1767:	c9                   	leave  
    1768:	e6 02                	out    0x2,al
    176a:	2f                   	das    
    176b:	13 02                	adc    eax,DWORD PTR [edx]
    176d:	3c 13                	cmp    al,0x13
    176f:	9f                   	lahf   
    1770:	e5 e6                	in     eax,0xe6
    1772:	08 c9                	or     cl,cl
    1774:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1777:	9f                   	lahf   
    1778:	e5 4c                	in     eax,0x4c
    177a:	02 29                	add    ch,BYTE PTR [ecx]
    177c:	13 02                	adc    eax,DWORD PTR [edx]
    177e:	2b 13                	sub    edx,DWORD PTR [ebx]
    1780:	9f                   	lahf   
    1781:	e5 e6                	in     eax,0xe6
    1783:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1788:	a0 00 02 04 01       	mov    al,ds:0x1040200
    178d:	06                   	push   es
    178e:	c8 00 02 04          	enter  0x200,0x4
    1792:	04 02                	add    al,0x2
    1794:	2c 12                	sub    al,0x12
    1796:	00 02                	add    BYTE PTR [edx],al
    1798:	04 05                	add    al,0x5
    179a:	02 2f                	add    ch,BYTE PTR [edi]
    179c:	12 00                	adc    al,BYTE PTR [eax]
    179e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    17a1:	74 00                	je     17a3 <sysEnter_Vector-0x12e85d>
    17a3:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    17a6:	58                   	pop    eax
    17a7:	06                   	push   es
    17a8:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    17ae:	04 01                	add    al,0x1
    17b0:	06                   	push   es
    17b1:	c8 00 02 04          	enter  0x200,0x4
    17b5:	04 02                	add    al,0x2
    17b7:	2c 12                	sub    al,0x12
    17b9:	00 02                	add    BYTE PTR [edx],al
    17bb:	04 05                	add    al,0x5
    17bd:	02 2f                	add    ch,BYTE PTR [edi]
    17bf:	12 00                	adc    al,BYTE PTR [eax]
    17c1:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    17c4:	74 00                	je     17c6 <sysEnter_Vector-0x12e83a>
    17c6:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    17c9:	58                   	pop    eax
    17ca:	00 02                	add    BYTE PTR [edx],al
    17cc:	04 08                	add    al,0x8
    17ce:	06                   	push   es
    17cf:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    17d5:	00 02                	add    BYTE PTR [edx],al
    17d7:	04 01                	add    al,0x1
    17d9:	06                   	push   es
    17da:	c8 00 02 04          	enter  0x200,0x4
    17de:	04 02                	add    al,0x2
    17e0:	2c 12                	sub    al,0x12
    17e2:	00 02                	add    BYTE PTR [edx],al
    17e4:	04 05                	add    al,0x5
    17e6:	02 2f                	add    ch,BYTE PTR [edi]
    17e8:	12 00                	adc    al,BYTE PTR [eax]
    17ea:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    17ed:	74 00                	je     17ef <sysEnter_Vector-0x12e811>
    17ef:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    17f2:	58                   	pop    eax
    17f3:	06                   	push   es
    17f4:	08 f9                	or     cl,bh
    17f6:	bb 75 00 02 04       	mov    ebx,0x4020075
    17fb:	01 06                	add    DWORD PTR [esi],eax
    17fd:	08 2e                	or     BYTE PTR [esi],ch
    17ff:	06                   	push   es
    1800:	9f                   	lahf   
    1801:	75 75                	jne    1878 <sysEnter_Vector-0x12e788>
    1803:	7b d8                	jnp    17dd <sysEnter_Vector-0x12e823>
    1805:	00 02                	add    BYTE PTR [edx],al
    1807:	04 01                	add    al,0x1
    1809:	06                   	push   es
    180a:	c8 06 75 e5          	enter  0x7506,0xe5
    180e:	00 02                	add    BYTE PTR [edx],al
    1810:	04 01                	add    al,0x1
    1812:	06                   	push   es
    1813:	02 22                	add    ah,BYTE PTR [edx]
    1815:	12 06                	adc    al,BYTE PTR [esi]
    1817:	4b                   	dec    ebx
    1818:	00 02                	add    BYTE PTR [edx],al
    181a:	04 01                	add    al,0x1
    181c:	06                   	push   es
    181d:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1823:	02 22                	add    ah,BYTE PTR [edx]
    1825:	12 00                	adc    al,BYTE PTR [eax]
    1827:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    182a:	74 00                	je     182c <sysEnter_Vector-0x12e7d4>
    182c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    182f:	58                   	pop    eax
    1830:	00 02                	add    BYTE PTR [edx],al
    1832:	04 06                	add    al,0x6
    1834:	06                   	push   es
    1835:	59                   	pop    ecx
    1836:	00 02                	add    BYTE PTR [edx],al
    1838:	04 01                	add    al,0x1
    183a:	06                   	push   es
    183b:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    183e:	00 02                	add    BYTE PTR [edx],al
    1840:	04 03                	add    al,0x3
    1842:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1845:	00 02                	add    BYTE PTR [edx],al
    1847:	04 04                	add    al,0x4
    1849:	74 00                	je     184b <sysEnter_Vector-0x12e7b5>
    184b:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    184e:	58                   	pop    eax
    184f:	00 02                	add    BYTE PTR [edx],al
    1851:	04 06                	add    al,0x6
    1853:	06                   	push   es
    1854:	59                   	pop    ecx
    1855:	00 02                	add    BYTE PTR [edx],al
    1857:	04 01                	add    al,0x1
    1859:	06                   	push   es
    185a:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    185d:	00 02                	add    BYTE PTR [edx],al
    185f:	04 03                	add    al,0x3
    1861:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1864:	00 02                	add    BYTE PTR [edx],al
    1866:	04 04                	add    al,0x4
    1868:	74 00                	je     186a <sysEnter_Vector-0x12e796>
    186a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    186d:	58                   	pop    eax
    186e:	00 02                	add    BYTE PTR [edx],al
    1870:	04 06                	add    al,0x6
    1872:	06                   	push   es
    1873:	5a                   	pop    edx
    1874:	00 02                	add    BYTE PTR [edx],al
    1876:	04 06                	add    al,0x6
    1878:	c9                   	leave  
    1879:	2f                   	das    
    187a:	00 02                	add    BYTE PTR [edx],al
    187c:	04 01                	add    al,0x1
    187e:	06                   	push   es
    187f:	9e                   	sahf   
    1880:	00 02                	add    BYTE PTR [edx],al
    1882:	04 04                	add    al,0x4
    1884:	02 23                	add    ah,BYTE PTR [ebx]
    1886:	12 00                	adc    al,BYTE PTR [eax]
    1888:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    188f:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1892:	74 00                	je     1894 <sysEnter_Vector-0x12e76c>
    1894:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1897:	58                   	pop    eax
    1898:	00 02                	add    BYTE PTR [edx],al
    189a:	04 08                	add    al,0x8
    189c:	06                   	push   es
    189d:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    18a0:	e8 bb 00 02 04       	call   4021960 <sysEnter_Vector+0x3ef1960>
    18a5:	01 06                	add    DWORD PTR [esi],eax
    18a7:	ba 06 4b 68 91       	mov    edx,0x91684b06
    18ac:	02 31                	add    dh,BYTE PTR [ecx]
    18ae:	14 02                	adc    al,0x2
    18b0:	2c 14                	sub    al,0x14
    18b2:	00 02                	add    BYTE PTR [edx],al
    18b4:	04 01                	add    al,0x1
    18b6:	06                   	push   es
    18b7:	02 29                	add    ch,BYTE PTR [ecx]
    18b9:	12 06                	adc    al,BYTE PTR [esi]
    18bb:	4b                   	dec    ebx
    18bc:	bd 00 02 04 01       	mov    ebp,0x1040200
    18c1:	06                   	push   es
    18c2:	ba 00 02 04 03       	mov    edx,0x3040200
    18c7:	06                   	push   es
    18c8:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    18cb:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    18ce:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    18d5:	77 00                	ja     18d7 <sysEnter_Vector-0x12e729>
    18d7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18da:	06                   	push   es
    18db:	82                   	(bad)  
    18dc:	06                   	push   es
    18dd:	4b                   	dec    ebx
    18de:	68 00 02 04 01       	push   0x1040200
    18e3:	06                   	push   es
    18e4:	66 06                	pushw  es
    18e6:	85 3d 02 08 00 01    	test   DWORD PTR ds:0x1000802,edi
    18ec:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 6c 6f       	push   0x6f6c0072
  2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
  2b:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
  30:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  34:	73 69                	jae    9f <sysEnter_Vector-0x12ff61>
  36:	67 6e                	outs   dx,BYTE PTR ds:[si]
  38:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  3d:	74 00                	je     3f <sysEnter_Vector-0x12ffc1>
  3f:	68 65 61 70 42       	push   0x42706165
  44:	61                   	popa   
  45:	73 65                	jae    ac <sysEnter_Vector-0x12ff54>
  47:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  4b:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  4f:	75 6e                	jne    bf <sysEnter_Vector-0x12ff41>
  51:	73 69                	jae    bc <sysEnter_Vector-0x12ff44>
  53:	67 6e                	outs   dx,BYTE PTR ds:[si]
  55:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  5a:	61                   	popa   
  5b:	72 00                	jb     5d <sysEnter_Vector-0x12ffa3>
  5d:	74 69                	je     c8 <sysEnter_Vector-0x12ff38>
  5f:	6d                   	ins    DWORD PTR es:[edi],dx
  60:	65                   	gs
  61:	5f                   	pop    edi
  62:	74 00                	je     64 <sysEnter_Vector-0x12ff9c>
  64:	75 69                	jne    cf <sysEnter_Vector-0x12ff31>
  66:	6e                   	outs   dx,BYTE PTR ds:[esi]
  67:	74 33                	je     9c <sysEnter_Vector-0x12ff64>
  69:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  6c:	00 2f                	add    BYTE PTR [edi],ch
  6e:	68 6f 6d 65 2f       	push   0x2f656d6f
  73:	79 6f                	jns    e4 <sysEnter_Vector-0x12ff1c>
  75:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  7c:	6f                   	outs   dx,DWORD PTR ds:[esi]
  7d:	73 2f                	jae    ae <sysEnter_Vector-0x12ff52>
  7f:	61                   	popa   
  80:	70 72                	jo     f4 <sysEnter_Vector-0x12ff0c>
  82:	6f                   	outs   dx,DWORD PTR ds:[esi]
  83:	6a 2f                	push   0x2f
  85:	6c                   	ins    BYTE PTR es:[edi],dx
  86:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  8d:	4f                   	dec    edi
  8e:	53                   	push   ebx
  8f:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  92:	6f                   	outs   dx,DWORD PTR ds:[esi]
  93:	6f                   	outs   dx,DWORD PTR ds:[esi]
  94:	6c                   	ins    BYTE PTR es:[edi],dx
  95:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  99:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  9d:	75 62                	jne    101 <sysEnter_Vector-0x12feff>
  9f:	6c                   	ins    BYTE PTR es:[edi],dx
  a0:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a4:	72 63                	jb     109 <sysEnter_Vector-0x12fef7>
  a6:	68 72 49 00 68       	push   0x68004972
  ab:	65                   	gs
  ac:	61                   	popa   
  ad:	70 43                	jo     f2 <sysEnter_Vector-0x12ff0e>
  af:	75 72                	jne    123 <sysEnter_Vector-0x12fedd>
  b1:	72 00                	jb     b3 <sysEnter_Vector-0x12ff4d>
  b3:	2e                   	cs
  b4:	2e                   	cs
  b5:	2f                   	das    
  b6:	2e                   	cs
  b7:	2e                   	cs
  b8:	2f                   	das    
  b9:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  bd:	6a 2f                	push   0x2f
  bf:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c2:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  c9:	63 2f                	arpl   WORD PTR [edi],bp
  cb:	73 74                	jae    141 <sysEnter_Vector-0x12febf>
  cd:	72 69                	jb     138 <sysEnter_Vector-0x12fec8>
  cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d0:	67 73 2f             	addr16 jae 102 <sysEnter_Vector-0x12fefe>
  d3:	73 74                	jae    149 <sysEnter_Vector-0x12feb7>
  d5:	72 63                	jb     13a <sysEnter_Vector-0x12fec6>
  d7:	68 72 2e 63 00       	push   0x632e72
  dc:	73 69                	jae    147 <sysEnter_Vector-0x12feb9>
  de:	7a 65                	jp     145 <sysEnter_Vector-0x12febb>
  e0:	74 79                	je     15b <sysEnter_Vector-0x12fea5>
  e2:	70 65                	jo     149 <sysEnter_Vector-0x12feb7>
  e4:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  e7:	6f                   	outs   dx,DWORD PTR ds:[esi]
  e8:	72 74                	jb     15e <sysEnter_Vector-0x12fea2>
  ea:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  ed:	74 00                	je     ef <sysEnter_Vector-0x12ff11>
  ef:	47                   	inc    edi
  f0:	4e                   	dec    esi
  f1:	55                   	push   ebp
  f2:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  f5:	31 20                	xor    DWORD PTR [eax],esp
  f7:	35 2e 33 2e 30       	xor    eax,0x302e332e
  fc:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 102:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 107:	6c                   	ins    BYTE PTR es:[edi],dx
 108:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 10e:	65                   	gs
 10f:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 114:	72 69                	jb     17f <sysEnter_Vector-0x12fe81>
 116:	63 20                	arpl   WORD PTR [eax],sp
 118:	2d 6d 61 72 63       	sub    eax,0x6372616d
 11d:	68 3d 70 65 6e       	push   0x6e65703d
 122:	74 69                	je     18d <sysEnter_Vector-0x12fe73>
 124:	75 6d                	jne    193 <sysEnter_Vector-0x12fe6d>
 126:	70 72                	jo     19a <sysEnter_Vector-0x12fe66>
 128:	6f                   	outs   dx,DWORD PTR ds:[esi]
 129:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 12f:	66                   	data16
 130:	72 65                	jb     197 <sysEnter_Vector-0x12fe69>
 132:	65                   	gs
 133:	73 74                	jae    1a9 <sysEnter_Vector-0x12fe57>
 135:	61                   	popa   
 136:	6e                   	outs   dx,BYTE PTR ds:[esi]
 137:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 13e:	76 
 13f:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 146:	74 79                	je     1c1 <sysEnter_Vector-0x12fe3f>
 148:	3d 68 69 64 64       	cmp    eax,0x64646968
 14d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 14f:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 155:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 158:	61                   	popa   
 159:	70 45                	jo     1a0 <sysEnter_Vector-0x12fe60>
 15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 15c:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 160:	61                   	popa   
 161:	72 73                	jb     1d6 <sysEnter_Vector-0x12fe2a>
 163:	00 2e                	add    BYTE PTR [esi],ch
 165:	2e                   	cs
 166:	2f                   	das    
 167:	2e                   	cs
 168:	2e                   	cs
 169:	2f                   	das    
 16a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 16e:	6a 2f                	push   0x2f
 170:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 173:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17a:	63 2f                	arpl   WORD PTR [edi],bp
 17c:	73 74                	jae    1f2 <sysEnter_Vector-0x12fe0e>
 17e:	72 69                	jb     1e9 <sysEnter_Vector-0x12fe17>
 180:	6e                   	outs   dx,BYTE PTR ds:[esi]
 181:	67 73 2f             	addr16 jae 1b3 <sysEnter_Vector-0x12fe4d>
 184:	73 74                	jae    1fa <sysEnter_Vector-0x12fe06>
 186:	72 63                	jb     1eb <sysEnter_Vector-0x12fe15>
 188:	73 70                	jae    1fa <sysEnter_Vector-0x12fe06>
 18a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 18b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 18e:	73 74                	jae    204 <sysEnter_Vector-0x12fdfc>
 190:	72 63                	jb     1f5 <sysEnter_Vector-0x12fe0b>
 192:	73 70                	jae    204 <sysEnter_Vector-0x12fdfc>
 194:	6e                   	outs   dx,BYTE PTR ds:[esi]
 195:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 198:	72 63                	jb     1fd <sysEnter_Vector-0x12fe03>
 19a:	73 70                	jae    20c <sysEnter_Vector-0x12fdf4>
 19c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19d:	49                   	dec    ecx
 19e:	00 2e                	add    BYTE PTR [esi],ch
 1a0:	2e                   	cs
 1a1:	2f                   	das    
 1a2:	2e                   	cs
 1a3:	2e                   	cs
 1a4:	2f                   	das    
 1a5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1a9:	6a 2f                	push   0x2f
 1ab:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1ae:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1b5:	63 2f                	arpl   WORD PTR [edi],bp
 1b7:	73 74                	jae    22d <sysEnter_Vector-0x12fdd3>
 1b9:	72 69                	jb     224 <sysEnter_Vector-0x12fddc>
 1bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1bc:	67 73 2f             	addr16 jae 1ee <sysEnter_Vector-0x12fe12>
 1bf:	73 74                	jae    235 <sysEnter_Vector-0x12fdcb>
 1c1:	72 74                	jb     237 <sysEnter_Vector-0x12fdc9>
 1c3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1c4:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1c7:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1cb:	69 6d 00 6c 61 73 74 	imul   ebp,DWORD PTR [ebp+0x0],0x7473616c
 1d2:	73 00                	jae    1d4 <sysEnter_Vector-0x12fe2c>
 1d4:	73 74                	jae    24a <sysEnter_Vector-0x12fdb6>
 1d6:	72 74                	jb     24c <sysEnter_Vector-0x12fdb4>
 1d8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1d9:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1dc:	74 6f                	je     24d <sysEnter_Vector-0x12fdb3>
 1de:	61                   	popa   
 1df:	49                   	dec    ecx
 1e0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e3:	63 2f                	arpl   WORD PTR [edi],bp
 1e5:	61                   	popa   
 1e6:	73 63                	jae    24b <sysEnter_Vector-0x12fdb5>
 1e8:	69 69 2e 63 00 61 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74610063
 1ef:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f0:	69 00 73 74 72 6c    	imul   eax,DWORD PTR [eax],0x6c727473
 1f6:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 1f8:	49                   	dec    ecx
 1f9:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 1fc:	76 65                	jbe    263 <sysEnter_Vector-0x12fd9d>
 1fe:	72 73                	jb     273 <sysEnter_Vector-0x12fd8d>
 200:	65                   	gs
 201:	49                   	dec    ecx
 202:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 205:	67 6e                	outs   dx,BYTE PTR ds:[si]
 207:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 20a:	72 65                	jb     271 <sysEnter_Vector-0x12fd8f>
 20c:	61                   	popa   
 20d:	6d                   	ins    DWORD PTR es:[edi],dx
 20e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 211:	53                   	push   ebx
 212:	43                   	inc    ebx
 213:	41                   	inc    ecx
 214:	4c                   	dec    esp
 215:	4c                   	dec    esp
 216:	5f                   	pop    edi
 217:	47                   	inc    edi
 218:	45                   	inc    ebp
 219:	54                   	push   esp
 21a:	54                   	push   esp
 21b:	49                   	dec    ecx
 21c:	43                   	inc    ebx
 21d:	4b                   	dec    ebx
 21e:	53                   	push   ebx
 21f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 222:	53                   	push   ebx
 223:	43                   	inc    ebx
 224:	41                   	inc    ecx
 225:	4c                   	dec    esp
 226:	4c                   	dec    esp
 227:	5f                   	pop    edi
 228:	48                   	dec    eax
 229:	4c                   	dec    esp
 22a:	54                   	push   esp
 22b:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 22e:	66                   	data16
 22f:	66                   	data16
 230:	65                   	gs
 231:	72 00                	jb     233 <sysEnter_Vector-0x12fdcd>
 233:	67                   	addr16
 234:	65                   	gs
 235:	74 73                	je     2aa <sysEnter_Vector-0x12fd56>
 237:	45                   	inc    ebp
 238:	72 72                	jb     2ac <sysEnter_Vector-0x12fd54>
 23a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 23b:	72 00                	jb     23d <sysEnter_Vector-0x12fdc3>
 23d:	6c                   	ins    BYTE PTR es:[edi],dx
 23e:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 241:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 244:	53                   	push   ebx
 245:	43                   	inc    ebx
 246:	41                   	inc    ecx
 247:	4c                   	dec    esp
 248:	4c                   	dec    esp
 249:	5f                   	pop    edi
 24a:	47                   	inc    edi
 24b:	45                   	inc    ebp
 24c:	54                   	push   esp
 24d:	43                   	inc    ebx
 24e:	57                   	push   edi
 24f:	44                   	inc    esp
 250:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 253:	63 2f                	arpl   WORD PTR [edi],bp
 255:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 25c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 25d:	70 75                	jo     2d4 <sysEnter_Vector-0x12fd2c>
 25f:	74 2e                	je     28f <sysEnter_Vector-0x12fd71>
 261:	63 00                	arpl   WORD PTR [eax],ax
 263:	65                   	gs
 264:	73 79                	jae    2df <sysEnter_Vector-0x12fd21>
 266:	73 63                	jae    2cb <sysEnter_Vector-0x12fd35>
 268:	61                   	popa   
 269:	6c                   	ins    BYTE PTR es:[edi],dx
 26a:	6c                   	ins    BYTE PTR es:[edi],dx
 26b:	73 00                	jae    26d <sysEnter_Vector-0x12fd93>
 26d:	53                   	push   ebx
 26e:	59                   	pop    ecx
 26f:	53                   	push   ebx
 270:	43                   	inc    ebx
 271:	41                   	inc    ecx
 272:	4c                   	dec    esp
 273:	4c                   	dec    esp
 274:	5f                   	pop    edi
 275:	57                   	push   edi
 276:	41                   	inc    ecx
 277:	49                   	dec    ecx
 278:	54                   	push   esp
 279:	46                   	inc    esi
 27a:	4f                   	dec    edi
 27b:	52                   	push   edx
 27c:	50                   	push   eax
 27d:	49                   	dec    ecx
 27e:	44                   	inc    esp
 27f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 282:	53                   	push   ebx
 283:	43                   	inc    ebx
 284:	41                   	inc    ecx
 285:	4c                   	dec    esp
 286:	4c                   	dec    esp
 287:	5f                   	pop    edi
 288:	53                   	push   ebx
 289:	45                   	inc    ebp
 28a:	54                   	push   esp
 28b:	53                   	push   ebx
 28c:	49                   	dec    ecx
 28d:	47                   	inc    edi
 28e:	41                   	inc    ecx
 28f:	43                   	inc    ebx
 290:	54                   	push   esp
 291:	49                   	dec    ecx
 292:	4f                   	dec    edi
 293:	4e                   	dec    esi
 294:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 297:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 29a:	72 00                	jb     29c <sysEnter_Vector-0x12fd64>
 29c:	53                   	push   ebx
 29d:	59                   	pop    ecx
 29e:	53                   	push   ebx
 29f:	43                   	inc    ebx
 2a0:	41                   	inc    ecx
 2a1:	4c                   	dec    esp
 2a2:	4c                   	dec    esp
 2a3:	5f                   	pop    edi
 2a4:	53                   	push   ebx
 2a5:	4c                   	dec    esp
 2a6:	45                   	inc    ebp
 2a7:	45                   	inc    ebp
 2a8:	50                   	push   eax
 2a9:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 2ac:	74 63                	je     311 <sysEnter_Vector-0x12fcef>
 2ae:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 2b1:	78 6c                	js     31f <sysEnter_Vector-0x12fce1>
 2b3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2b5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b8:	53                   	push   ebx
 2b9:	43                   	inc    ebx
 2ba:	41                   	inc    ecx
 2bb:	4c                   	dec    esp
 2bc:	4c                   	dec    esp
 2bd:	5f                   	pop    edi
 2be:	50                   	push   eax
 2bf:	52                   	push   edx
 2c0:	49                   	dec    ecx
 2c1:	4e                   	dec    esi
 2c2:	54                   	push   esp
 2c3:	44                   	inc    esp
 2c4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c7:	53                   	push   ebx
 2c8:	43                   	inc    ebx
 2c9:	41                   	inc    ecx
 2ca:	4c                   	dec    esp
 2cb:	4c                   	dec    esp
 2cc:	5f                   	pop    edi
 2cd:	41                   	inc    ecx
 2ce:	4c                   	dec    esp
 2cf:	4c                   	dec    esp
 2d0:	4f                   	dec    edi
 2d1:	43                   	inc    ebx
 2d2:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 2d5:	74 73                	je     34a <sysEnter_Vector-0x12fcb6>
 2d7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2da:	53                   	push   ebx
 2db:	43                   	inc    ebx
 2dc:	41                   	inc    ecx
 2dd:	4c                   	dec    esp
 2de:	4c                   	dec    esp
 2df:	5f                   	pop    edi
 2e0:	52                   	push   edx
 2e1:	45                   	inc    ebp
 2e2:	41                   	inc    ecx
 2e3:	44                   	inc    esp
 2e4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e7:	53                   	push   ebx
 2e8:	43                   	inc    ebx
 2e9:	41                   	inc    ecx
 2ea:	4c                   	dec    esp
 2eb:	4c                   	dec    esp
 2ec:	5f                   	pop    edi
 2ed:	45                   	inc    ebp
 2ee:	58                   	pop    eax
 2ef:	45                   	inc    ebp
 2f0:	43                   	inc    ebx
 2f1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f4:	53                   	push   ebx
 2f5:	43                   	inc    ebx
 2f6:	41                   	inc    ecx
 2f7:	4c                   	dec    esp
 2f8:	4c                   	dec    esp
 2f9:	5f                   	pop    edi
 2fa:	45                   	inc    ebp
 2fb:	4e                   	dec    esi
 2fc:	44                   	inc    esp
 2fd:	50                   	push   eax
 2fe:	52                   	push   edx
 2ff:	4f                   	dec    edi
 300:	43                   	inc    ebx
 301:	45                   	inc    ebp
 302:	53                   	push   ebx
 303:	53                   	push   ebx
 304:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 307:	74 63                	je     36c <sysEnter_Vector-0x12fc94>
 309:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 30c:	53                   	push   ebx
 30d:	43                   	inc    ebx
 30e:	41                   	inc    ecx
 30f:	4c                   	dec    esp
 310:	4c                   	dec    esp
 311:	5f                   	pop    edi
 312:	52                   	push   edx
 313:	45                   	inc    ebp
 314:	47                   	inc    edi
 315:	45                   	inc    ebp
 316:	58                   	pop    eax
 317:	49                   	dec    ecx
 318:	54                   	push   esp
 319:	48                   	dec    eax
 31a:	41                   	inc    ecx
 31b:	4e                   	dec    esi
 31c:	44                   	inc    esp
 31d:	4c                   	dec    esp
 31e:	45                   	inc    ebp
 31f:	52                   	push   edx
 320:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 323:	53                   	push   ebx
 324:	43                   	inc    ebx
 325:	41                   	inc    ecx
 326:	4c                   	dec    esp
 327:	4c                   	dec    esp
 328:	5f                   	pop    edi
 329:	46                   	inc    esi
 32a:	52                   	push   edx
 32b:	45                   	inc    ebp
 32c:	45                   	inc    ebp
 32d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 330:	53                   	push   ebx
 331:	43                   	inc    ebx
 332:	41                   	inc    ecx
 333:	4c                   	dec    esp
 334:	4c                   	dec    esp
 335:	5f                   	pop    edi
 336:	53                   	push   ebx
 337:	54                   	push   esp
 338:	4f                   	dec    edi
 339:	50                   	push   eax
 33a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 33d:	53                   	push   ebx
 33e:	43                   	inc    ebx
 33f:	41                   	inc    ecx
 340:	4c                   	dec    esp
 341:	4c                   	dec    esp
 342:	5f                   	pop    edi
 343:	57                   	push   edi
 344:	52                   	push   edx
 345:	49                   	dec    ecx
 346:	54                   	push   esp
 347:	45                   	inc    ebp
 348:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 34b:	53                   	push   ebx
 34c:	43                   	inc    ebx
 34d:	41                   	inc    ecx
 34e:	4c                   	dec    esp
 34f:	4c                   	dec    esp
 350:	5f                   	pop    edi
 351:	49                   	dec    ecx
 352:	4e                   	dec    esi
 353:	56                   	push   esi
 354:	41                   	inc    ecx
 355:	4c                   	dec    esp
 356:	49                   	dec    ecx
 357:	44                   	inc    esp
 358:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 35b:	53                   	push   ebx
 35c:	43                   	inc    ebx
 35d:	41                   	inc    ecx
 35e:	4c                   	dec    esp
 35f:	4c                   	dec    esp
 360:	5f                   	pop    edi
 361:	52                   	push   edx
 362:	45                   	inc    ebp
 363:	42                   	inc    edx
 364:	4f                   	dec    edi
 365:	4f                   	dec    edi
 366:	54                   	push   esp
 367:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36a:	53                   	push   ebx
 36b:	43                   	inc    ebx
 36c:	41                   	inc    ecx
 36d:	4c                   	dec    esp
 36e:	4c                   	dec    esp
 36f:	5f                   	pop    edi
 370:	53                   	push   ebx
 371:	45                   	inc    ebp
 372:	54                   	push   esp
 373:	50                   	push   eax
 374:	52                   	push   edx
 375:	49                   	dec    ecx
 376:	4f                   	dec    edi
 377:	52                   	push   edx
 378:	49                   	dec    ecx
 379:	54                   	push   esp
 37a:	59                   	pop    ecx
 37b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37e:	53                   	push   ebx
 37f:	43                   	inc    ebx
 380:	41                   	inc    ecx
 381:	4c                   	dec    esp
 382:	4c                   	dec    esp
 383:	5f                   	pop    edi
 384:	4d                   	dec    ebp
 385:	41                   	inc    ecx
 386:	53                   	push   ebx
 387:	4b                   	dec    ebx
 388:	53                   	push   ebx
 389:	49                   	dec    ecx
 38a:	47                   	inc    edi
 38b:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 38e:	74 73                	je     403 <sysEnter_Vector-0x12fbfd>
 390:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 393:	53                   	push   ebx
 394:	43                   	inc    ebx
 395:	41                   	inc    ecx
 396:	4c                   	dec    esp
 397:	4c                   	dec    esp
 398:	5f                   	pop    edi
 399:	50                   	push   eax
 39a:	52                   	push   edx
 39b:	49                   	dec    ecx
 39c:	4e                   	dec    esi
 39d:	54                   	push   esp
 39e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 3a1:	74 56                	je     3f9 <sysEnter_Vector-0x12fc07>
 3a3:	61                   	popa   
 3a4:	6c                   	ins    BYTE PTR es:[edi],dx
 3a5:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 3a9:	68 6f 75 72 00       	push   0x72756f
 3ae:	73 69                	jae    419 <sysEnter_Vector-0x12fbe7>
 3b0:	7a 65                	jp     417 <sysEnter_Vector-0x12fbe9>
 3b2:	5f                   	pop    edi
 3b3:	74 00                	je     3b5 <sysEnter_Vector-0x12fc4b>
 3b5:	73 6c                	jae    423 <sysEnter_Vector-0x12fbdd>
 3b7:	65                   	gs
 3b8:	65                   	gs
 3b9:	70 00                	jo     3bb <sysEnter_Vector-0x12fc45>
 3bb:	73 69                	jae    426 <sysEnter_Vector-0x12fbda>
 3bd:	67 44                	addr16 inc esp
 3bf:	61                   	popa   
 3c0:	74 61                	je     423 <sysEnter_Vector-0x12fbdd>
 3c2:	00 74 68 65          	add    BYTE PTR [eax+ebp*2+0x65],dh
 3c6:	54                   	push   esp
 3c7:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 3ce:	7a 6f                	jp     43f <sysEnter_Vector-0x12fbc1>
 3d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3d1:	65 00 73 69          	add    BYTE PTR gs:[ebx+0x69],dh
 3d5:	7a 65                	jp     43c <sysEnter_Vector-0x12fbc4>
 3d7:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 3db:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 3de:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3df:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
 3e6:	74 
 3e7:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 3ea:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 3ed:	6c                   	ins    BYTE PTR es:[edi],dx
 3ee:	74 69                	je     459 <sysEnter_Vector-0x12fba7>
 3f0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3f1:	5f                   	pop    edi
 3f2:	76 61                	jbe    455 <sysEnter_Vector-0x12fbab>
 3f4:	5f                   	pop    edi
 3f5:	6c                   	ins    BYTE PTR es:[edi],dx
 3f6:	69 73 74 00 74 6d 5f 	imul   esi,DWORD PTR [ebx+0x74],0x5f6d7400
 3fd:	6d                   	ins    DWORD PTR es:[edi],dx
 3fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
 3ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
 400:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 404:	79 65                	jns    46b <sysEnter_Vector-0x12fb95>
 406:	61                   	popa   
 407:	72 00                	jb     409 <sysEnter_Vector-0x12fbf7>
 409:	67                   	addr16
 40a:	65                   	gs
 40b:	74 74                	je     481 <sysEnter_Vector-0x12fb7f>
 40d:	69 6d 65 00 77 61 69 	imul   ebp,DWORD PTR [ebp+0x65],0x69617700
 414:	74 70                	je     486 <sysEnter_Vector-0x12fb7a>
 416:	69 64 00 44 65 62 75 	imul   esp,DWORD PTR [eax+eax*1+0x44],0x67756265
 41d:	67 
 41e:	4c                   	dec    esp
 41f:	65                   	gs
 420:	76 65                	jbe    487 <sysEnter_Vector-0x12fb79>
 422:	6c                   	ins    BYTE PTR es:[edi],dx
 423:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 426:	6c                   	ins    BYTE PTR es:[edi],dx
 427:	6c                   	ins    BYTE PTR es:[edi],dx
 428:	6e                   	outs   dx,BYTE PTR ds:[esi]
 429:	75 6d                	jne    498 <sysEnter_Vector-0x12fb68>
 42b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 42f:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 436:	6f                   	outs   dx,DWORD PTR ds:[esi]
 437:	5f                   	pop    edi
 438:	73 79                	jae    4b3 <sysEnter_Vector-0x12fb4d>
 43a:	73 63                	jae    49f <sysEnter_Vector-0x12fb61>
 43c:	61                   	popa   
 43d:	6c                   	ins    BYTE PTR es:[edi],dx
 43e:	6c                   	ins    BYTE PTR es:[edi],dx
 43f:	31 00                	xor    DWORD PTR [eax],eax
 441:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 443:	5f                   	pop    edi
 444:	73 79                	jae    4bf <sysEnter_Vector-0x12fb41>
 446:	73 63                	jae    4ab <sysEnter_Vector-0x12fb55>
 448:	61                   	popa   
 449:	6c                   	ins    BYTE PTR es:[edi],dx
 44a:	6c                   	ins    BYTE PTR es:[edi],dx
 44b:	32 00                	xor    al,BYTE PTR [eax]
 44d:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 44f:	5f                   	pop    edi
 450:	73 79                	jae    4cb <sysEnter_Vector-0x12fb35>
 452:	73 63                	jae    4b7 <sysEnter_Vector-0x12fb49>
 454:	61                   	popa   
 455:	6c                   	ins    BYTE PTR es:[edi],dx
 456:	6c                   	ins    BYTE PTR es:[edi],dx
 457:	33 00                	xor    eax,DWORD PTR [eax]
 459:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 45b:	5f                   	pop    edi
 45c:	73 79                	jae    4d7 <sysEnter_Vector-0x12fb29>
 45e:	73 63                	jae    4c3 <sysEnter_Vector-0x12fb3d>
 460:	61                   	popa   
 461:	6c                   	ins    BYTE PTR es:[edi],dx
 462:	6c                   	ins    BYTE PTR es:[edi],dx
 463:	34 00                	xor    al,0x0
 465:	6c                   	ins    BYTE PTR es:[edi],dx
 466:	69 62 63 49 6e 69 74 	imul   esp,DWORD PTR [edx+0x63],0x74696e49
 46d:	69 61 6c 69 7a 65 64 	imul   esp,DWORD PTR [ecx+0x6c],0x64657a69
 474:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 478:	6d                   	ins    DWORD PTR es:[edi],dx
 479:	69 6e 00 74 69 63 6b 	imul   ebp,DWORD PTR [esi+0x0],0x6b636974
 480:	73 00                	jae    482 <sysEnter_Vector-0x12fb7e>
 482:	74 6d                	je     4f1 <sysEnter_Vector-0x12fb0f>
 484:	5f                   	pop    edi
 485:	79 64                	jns    4eb <sysEnter_Vector-0x12fb15>
 487:	61                   	popa   
 488:	79 00                	jns    48a <sysEnter_Vector-0x12fb76>
 48a:	5f                   	pop    edi
 48b:	5f                   	pop    edi
 48c:	67 6e                	outs   dx,BYTE PTR ds:[si]
 48e:	75 63                	jne    4f3 <sysEnter_Vector-0x12fb0d>
 490:	5f                   	pop    edi
 491:	76 61                	jbe    4f4 <sysEnter_Vector-0x12fb0c>
 493:	5f                   	pop    edi
 494:	6c                   	ins    BYTE PTR es:[edi],dx
 495:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 49c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 49d:	74 64                	je     503 <sysEnter_Vector-0x12fafd>
 49f:	49                   	dec    ecx
 4a0:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 4a3:	72 61                	jb     506 <sysEnter_Vector-0x12fafa>
 4a5:	6d                   	ins    DWORD PTR es:[edi],dx
 4a6:	31 00                	xor    DWORD PTR [eax],eax
 4a8:	70 61                	jo     50b <sysEnter_Vector-0x12faf5>
 4aa:	72 61                	jb     50d <sysEnter_Vector-0x12faf3>
 4ac:	6d                   	ins    DWORD PTR es:[edi],dx
 4ad:	32 00                	xor    al,BYTE PTR [eax]
 4af:	70 61                	jo     512 <sysEnter_Vector-0x12faee>
 4b1:	72 61                	jb     514 <sysEnter_Vector-0x12faec>
 4b3:	6d                   	ins    DWORD PTR es:[edi],dx
 4b4:	33 00                	xor    eax,DWORD PTR [eax]
 4b6:	66 6f                	outs   dx,WORD PTR ds:[esi]
 4b8:	72 6d                	jb     527 <sysEnter_Vector-0x12fad9>
 4ba:	61                   	popa   
 4bb:	74 00                	je     4bd <sysEnter_Vector-0x12fb43>
 4bd:	74 6d                	je     52c <sysEnter_Vector-0x12fad4>
 4bf:	5f                   	pop    edi
 4c0:	67 6d                	ins    DWORD PTR es:[di],dx
 4c2:	74 6f                	je     533 <sysEnter_Vector-0x12facd>
 4c4:	66                   	data16
 4c5:	66                   	data16
 4c6:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 4c9:	67 6e                	outs   dx,BYTE PTR ds:[si]
 4cb:	61                   	popa   
 4cc:	6c                   	ins    BYTE PTR es:[edi],dx
 4cd:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 4d0:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 4d3:	5f                   	pop    edi
 4d4:	5f                   	pop    edi
 4d5:	73 65                	jae    53c <sysEnter_Vector-0x12fac4>
 4d7:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 4da:	64                   	fs
 4db:	73 00                	jae    4dd <sysEnter_Vector-0x12fb23>
 4dd:	73 72                	jae    551 <sysEnter_Vector-0x12faaf>
 4df:	63 2f                	arpl   WORD PTR [edi],bp
 4e1:	6c                   	ins    BYTE PTR es:[edi],dx
 4e2:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 4e9:	4f                   	dec    edi
 4ea:	53                   	push   ebx
 4eb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 4ee:	61                   	popa   
 4ef:	72 67                	jb     558 <sysEnter_Vector-0x12faa8>
 4f1:	63 00                	arpl   WORD PTR [eax],ax
 4f3:	74 6d                	je     562 <sysEnter_Vector-0x12fa9e>
 4f5:	5f                   	pop    edi
 4f6:	77 64                	ja     55c <sysEnter_Vector-0x12faa4>
 4f8:	61                   	popa   
 4f9:	79 00                	jns    4fb <sysEnter_Vector-0x12fb05>
 4fb:	74 6d                	je     56a <sysEnter_Vector-0x12fa96>
 4fd:	5f                   	pop    edi
 4fe:	6d                   	ins    DWORD PTR es:[edi],dx
 4ff:	64                   	fs
 500:	61                   	popa   
 501:	79 00                	jns    503 <sysEnter_Vector-0x12fafd>
 503:	6c                   	ins    BYTE PTR es:[edi],dx
 504:	69 62 63 5f 63 6c 65 	imul   esp,DWORD PTR [edx+0x63],0x656c635f
 50b:	61                   	popa   
 50c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 50d:	75 70                	jne    57f <sysEnter_Vector-0x12fa81>
 50f:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 513:	73 65                	jae    57a <sysEnter_Vector-0x12fa86>
 515:	63 00                	arpl   WORD PTR [eax],ax
 517:	61                   	popa   
 518:	72 67                	jb     581 <sysEnter_Vector-0x12fa7f>
 51a:	76 00                	jbe    51c <sysEnter_Vector-0x12fae4>
 51c:	73 69                	jae    587 <sysEnter_Vector-0x12fa79>
 51e:	67 48                	addr16 dec eax
 520:	61                   	popa   
 521:	6e                   	outs   dx,BYTE PTR ds:[esi]
 522:	64                   	fs
 523:	6c                   	ins    BYTE PTR es:[edi],dx
 524:	65                   	gs
 525:	72 00                	jb     527 <sysEnter_Vector-0x12fad9>
 527:	6d                   	ins    DWORD PTR es:[edi],dx
 528:	6f                   	outs   dx,DWORD PTR ds:[esi]
 529:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 530:	6e 
 531:	61                   	popa   
 532:	6c                   	ins    BYTE PTR es:[edi],dx
 533:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 536:	67 73 00             	addr16 jae 539 <sysEnter_Vector-0x12fac7>
 539:	70 72                	jo     5ad <sysEnter_Vector-0x12fa53>
 53b:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 542:	6f                   	outs   dx,DWORD PTR ds:[esi]
 543:	70 00                	jo     545 <sysEnter_Vector-0x12fabb>
 545:	67                   	addr16
 546:	65                   	gs
 547:	74 63                	je     5ac <sysEnter_Vector-0x12fa54>
 549:	77 64                	ja     5af <sysEnter_Vector-0x12fa51>
 54b:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 54e:	6c                   	ins    BYTE PTR es:[edi],dx
 54f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 550:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 553:	65                   	gs
 554:	64                   	fs
 555:	50                   	push   eax
 556:	74 72                	je     5ca <sysEnter_Vector-0x12fa36>
 558:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 55b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 55c:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 563:	65                   	gs
 564:	77 53                	ja     5b9 <sysEnter_Vector-0x12fa47>
 566:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 56d:	6c                   	ins    BYTE PTR es:[edi],dx
 56e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 56f:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 572:	6c                   	ins    BYTE PTR es:[edi],dx
 573:	65                   	gs
 574:	61                   	popa   
 575:	6e                   	outs   dx,BYTE PTR ds:[esi]
 576:	75 70                	jne    5e8 <sysEnter_Vector-0x12fa18>
 578:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 57b:	72 6b                	jb     5e8 <sysEnter_Vector-0x12fa18>
 57d:	65                   	gs
 57e:	72 00                	jb     580 <sysEnter_Vector-0x12fa80>
 580:	75 69                	jne    5eb <sysEnter_Vector-0x12fa15>
 582:	6e                   	outs   dx,BYTE PTR ds:[esi]
 583:	74 38                	je     5bd <sysEnter_Vector-0x12fa43>
 585:	5f                   	pop    edi
 586:	74 00                	je     588 <sysEnter_Vector-0x12fa78>
 588:	66                   	data16
 589:	72 65                	jb     5f0 <sysEnter_Vector-0x12fa10>
 58b:	65 00 68 65          	add    BYTE PTR gs:[eax+0x65],ch
 58f:	61                   	popa   
 590:	70 50                	jo     5e2 <sysEnter_Vector-0x12fa1e>
 592:	74 72                	je     606 <sysEnter_Vector-0x12f9fa>
 594:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 597:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 59e:	65                   	gs
 59f:	61                   	popa   
 5a0:	70 00                	jo     5a2 <sysEnter_Vector-0x12fa5e>
 5a2:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 5a9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5aa:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 5b1:	63 
 5b2:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 5b5:	74 6f                	je     626 <sysEnter_Vector-0x12f9da>
 5b7:	48                   	dec    eax
 5b8:	65                   	gs
 5b9:	72 65                	jb     620 <sysEnter_Vector-0x12f9e0>
 5bb:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 5be:	61                   	popa   
 5bf:	70 50                	jo     611 <sysEnter_Vector-0x12f9ef>
 5c1:	74 72                	je     635 <sysEnter_Vector-0x12f9cb>
 5c3:	4e                   	dec    esi
 5c4:	65                   	gs
 5c5:	78 74                	js     63b <sysEnter_Vector-0x12f9c5>
 5c7:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 5ca:	77 48                	ja     614 <sysEnter_Vector-0x12f9ec>
 5cc:	65                   	gs
 5cd:	61                   	popa   
 5ce:	70 52                	jo     622 <sysEnter_Vector-0x12f9de>
 5d0:	65                   	gs
 5d1:	71 75                	jno    648 <sysEnter_Vector-0x12f9b8>
 5d3:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 5da:	75 6c                	jne    648 <sysEnter_Vector-0x12f9b8>
 5dc:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 5e3:	75 65                	jne    64a <sysEnter_Vector-0x12f9b6>
 5e5:	73 74                	jae    65b <sysEnter_Vector-0x12f9a5>
 5e7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 5ea:	63 2f                	arpl   WORD PTR [edi],bp
 5ec:	6d                   	ins    DWORD PTR es:[edi],dx
 5ed:	61                   	popa   
 5ee:	6c                   	ins    BYTE PTR es:[edi],dx
 5ef:	6c                   	ins    BYTE PTR es:[edi],dx
 5f0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5f1:	63 2e                	arpl   WORD PTR [esi],bp
 5f3:	63 00                	arpl   WORD PTR [eax],ax
 5f5:	70 72                	jo     669 <sysEnter_Vector-0x12f997>
 5f7:	65                   	gs
 5f8:	76 00                	jbe    5fa <sysEnter_Vector-0x12fa06>
 5fa:	68 65 61 70 72       	push   0x72706165
 5ff:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 603:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 606:	63 2f                	arpl   WORD PTR [edi],bp
 608:	6d                   	ins    DWORD PTR es:[edi],dx
 609:	65                   	gs
 60a:	6d                   	ins    DWORD PTR es:[edi],dx
 60b:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 60e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 611:	64                   	fs
 612:	65                   	gs
 613:	73 74                	jae    689 <sysEnter_Vector-0x12f977>
 615:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 618:	6d                   	ins    DWORD PTR es:[edi],dx
 619:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 61c:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 61f:	61                   	popa   
 620:	6c                   	ins    BYTE PTR es:[edi],dx
 621:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 624:	6d                   	ins    DWORD PTR es:[edi],dx
 625:	73 65                	jae    68c <sysEnter_Vector-0x12f974>
 627:	74 00                	je     629 <sysEnter_Vector-0x12f9d7>
 629:	73 72                	jae    69d <sysEnter_Vector-0x12f963>
 62b:	63 2f                	arpl   WORD PTR [edi],bp
 62d:	6d                   	ins    DWORD PTR es:[edi],dx
 62e:	65                   	gs
 62f:	6d                   	ins    DWORD PTR es:[edi],dx
 630:	73 65                	jae    697 <sysEnter_Vector-0x12f969>
 632:	74 2e                	je     662 <sysEnter_Vector-0x12f99e>
 634:	63 00                	arpl   WORD PTR [eax],ax
 636:	66 56                	push   si
 638:	61                   	popa   
 639:	6c                   	ins    BYTE PTR es:[edi],dx
 63a:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 63d:	6d                   	ins    DWORD PTR es:[edi],dx
 63e:	73 65                	jae    6a5 <sysEnter_Vector-0x12f95b>
 640:	74 49                	je     68b <sysEnter_Vector-0x12f975>
 642:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 645:	6e                   	outs   dx,BYTE PTR ds:[esi]
 646:	74 31                	je     679 <sysEnter_Vector-0x12f987>
 648:	36                   	ss
 649:	5f                   	pop    edi
 64a:	74 00                	je     64c <sysEnter_Vector-0x12f9b4>
 64c:	61                   	popa   
 64d:	64                   	fs
 64e:	64                   	fs
 64f:	72 00                	jb     651 <sysEnter_Vector-0x12f9af>
 651:	6f                   	outs   dx,DWORD PTR ds:[esi]
 652:	66 66 5f             	data32 pop di
 655:	74 00                	je     657 <sysEnter_Vector-0x12f9a9>
 657:	70 72                	jo     6cb <sysEnter_Vector-0x12f935>
 659:	6f                   	outs   dx,DWORD PTR ds:[esi]
 65a:	74 00                	je     65c <sysEnter_Vector-0x12f9a4>
 65c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 65d:	66                   	data16
 65e:	66                   	data16
 65f:	73 65                	jae    6c6 <sysEnter_Vector-0x12f93a>
 661:	74 00                	je     663 <sysEnter_Vector-0x12f99d>
 663:	6d                   	ins    DWORD PTR es:[edi],dx
 664:	6d                   	ins    DWORD PTR es:[edi],dx
 665:	61                   	popa   
 666:	70 00                	jo     668 <sysEnter_Vector-0x12f998>
 668:	73 72                	jae    6dc <sysEnter_Vector-0x12f924>
 66a:	63 2f                	arpl   WORD PTR [edi],bp
 66c:	6d                   	ins    DWORD PTR es:[edi],dx
 66d:	6d                   	ins    DWORD PTR es:[edi],dx
 66e:	61                   	popa   
 66f:	70 2e                	jo     69f <sysEnter_Vector-0x12f961>
 671:	63 00                	arpl   WORD PTR [eax],ax
 673:	73 5f                	jae    6d4 <sysEnter_Vector-0x12f92c>
 675:	64                   	fs
 676:	65                   	gs
 677:	76 00                	jbe    679 <sysEnter_Vector-0x12f987>
 679:	75 69                	jne    6e4 <sysEnter_Vector-0x12f91c>
 67b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 67c:	74 36                	je     6b4 <sysEnter_Vector-0x12f94c>
 67e:	34 5f                	xor    al,0x5f
 680:	74 00                	je     682 <sysEnter_Vector-0x12f97e>
 682:	6d                   	ins    DWORD PTR es:[edi],dx
 683:	6e                   	outs   dx,BYTE PTR ds:[esi]
 684:	74 5f                	je     6e5 <sysEnter_Vector-0x12f91b>
 686:	66                   	data16
 687:	6c                   	ins    BYTE PTR es:[edi],dx
 688:	61                   	popa   
 689:	67 73 00             	addr16 jae 68c <sysEnter_Vector-0x12f974>
 68c:	63 6f 6c             	arpl   WORD PTR [edi+0x6c],bp
 68f:	53                   	push   ebx
 690:	74 72                	je     704 <sysEnter_Vector-0x12f8fc>
 692:	69 6e 67 00 6d 6b 6e 	imul   ebp,DWORD PTR [esi+0x67],0x6e6b6d00
 699:	6f                   	outs   dx,DWORD PTR ds:[esi]
 69a:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 69e:	78 74                	js     714 <sysEnter_Vector-0x12f8ec>
 6a0:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 6a3:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 6aa:	66 
 6ab:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 6ae:	74 5f                	je     70f <sysEnter_Vector-0x12f8f1>
 6b0:	73 62                	jae    714 <sysEnter_Vector-0x12f8ec>
 6b2:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 6b5:	6c                   	ins    BYTE PTR es:[edi],dx
 6b6:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 6bd:	65                   	gs
 6be:	72 5f                	jb     71f <sysEnter_Vector-0x12f8e1>
 6c0:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 6c4:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 6c7:	5f                   	pop    edi
 6c8:	76 66                	jbe    730 <sysEnter_Vector-0x12f8d0>
 6ca:	73 6d                	jae    739 <sysEnter_Vector-0x12f8c7>
 6cc:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6cd:	75 6e                	jne    73d <sysEnter_Vector-0x12f8c3>
 6cf:	74 00                	je     6d1 <sysEnter_Vector-0x12f92f>
 6d1:	72 65                	jb     738 <sysEnter_Vector-0x12f8c8>
 6d3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6d4:	61                   	popa   
 6d5:	6d                   	ins    DWORD PTR es:[edi],dx
 6d6:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 6db:	61                   	popa   
 6dc:	6d                   	ins    DWORD PTR es:[edi],dx
 6dd:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 6e1:	63 2f                	arpl   WORD PTR [edi],bp
 6e3:	73 74                	jae    759 <sysEnter_Vector-0x12f8a7>
 6e5:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 6ec:	65 
 6ed:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6ee:	74 72                	je     762 <sysEnter_Vector-0x12f89e>
 6f0:	79 00                	jns    6f2 <sysEnter_Vector-0x12f90e>
 6f2:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 6f9:	65                   	gs
 6fa:	72 61                	jb     75d <sysEnter_Vector-0x12f8a3>
 6fc:	74 69                	je     767 <sysEnter_Vector-0x12f899>
 6fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
 700:	73 00                	jae    702 <sysEnter_Vector-0x12f8fe>
 702:	72 6d                	jb     771 <sysEnter_Vector-0x12f88f>
 704:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 70b:	69 
 70c:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 711:	69 73 74 5f 74 00 72 	imul   esi,DWORD PTR [ebx+0x74],0x7200745f
 718:	65                   	gs
 719:	61                   	popa   
 71a:	64                   	fs
 71b:	43                   	inc    ebx
 71c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 71d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 71e:	73 6f                	jae    78f <sysEnter_Vector-0x12f871>
 720:	6c                   	ins    BYTE PTR es:[edi],dx
 721:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
 725:	6f                   	outs   dx,DWORD PTR ds:[esi]
 726:	64                   	fs
 727:	65                   	gs
 728:	5f                   	pop    edi
 729:	6f                   	outs   dx,DWORD PTR ds:[esi]
 72a:	70 65                	jo     791 <sysEnter_Vector-0x12f86f>
 72c:	72 61                	jb     78f <sysEnter_Vector-0x12f871>
 72e:	74 69                	je     799 <sysEnter_Vector-0x12f867>
 730:	6f                   	outs   dx,DWORD PTR ds:[esi]
 731:	6e                   	outs   dx,BYTE PTR ds:[esi]
 732:	73 00                	jae    734 <sysEnter_Vector-0x12f8cc>
 734:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 73b:	67 73 00             	addr16 jae 73e <sysEnter_Vector-0x12f8c2>
 73e:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 745:	65                   	gs
 746:	72 61                	jb     7a9 <sysEnter_Vector-0x12f857>
 748:	74 69                	je     7b3 <sysEnter_Vector-0x12f84d>
 74a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 74b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 74c:	73 5f                	jae    7ad <sysEnter_Vector-0x12f853>
 74e:	74 00                	je     750 <sysEnter_Vector-0x12f8b0>
 750:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 753:	66 50                	push   ax
 755:	74 72                	je     7c9 <sysEnter_Vector-0x12f837>
 757:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 75a:	64                   	fs
 75b:	65                   	gs
 75c:	76 00                	jbe    75e <sysEnter_Vector-0x12f8a2>
 75e:	6d                   	ins    DWORD PTR es:[edi],dx
 75f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 760:	76 65                	jbe    7c7 <sysEnter_Vector-0x12f839>
 762:	54                   	push   esp
 763:	6f                   	outs   dx,DWORD PTR ds:[esi]
 764:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 767:	69 74 65 00 66 70 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x72747066
 76e:	72 
 76f:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 772:	69 74 65 43 6f 6e 73 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x6f736e6f
 779:	6f 
 77a:	6c                   	ins    BYTE PTR es:[edi],dx
 77b:	65 00 70 61          	add    BYTE PTR gs:[eax+0x61],dh
 77f:	79 6c                	jns    7ed <sysEnter_Vector-0x12f813>
 781:	6f                   	outs   dx,DWORD PTR ds:[esi]
 782:	61                   	popa   
 783:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 787:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 78e:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 791:	6f                   	outs   dx,DWORD PTR ds:[esi]
 792:	70 00                	jo     794 <sysEnter_Vector-0x12f86c>
 794:	6d                   	ins    DWORD PTR es:[edi],dx
 795:	6e                   	outs   dx,BYTE PTR ds:[esi]
 796:	74 5f                	je     7f7 <sysEnter_Vector-0x12f809>
 798:	72 6f                	jb     809 <sysEnter_Vector-0x12f7f7>
 79a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 79b:	74 00                	je     79d <sysEnter_Vector-0x12f863>
 79d:	69 6f 49 6e 69 74 00 	imul   ebp,DWORD PTR [edi+0x49],0x74696e
 7a4:	66 6f                	outs   dx,WORD PTR ds:[esi]
 7a6:	70 73                	jo     81b <sysEnter_Vector-0x12f7e5>
 7a8:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 7ab:	6c                   	ins    BYTE PTR es:[edi],dx
 7ac:	65                   	gs
 7ad:	5f                   	pop    edi
 7ae:	74 00                	je     7b0 <sysEnter_Vector-0x12f850>
 7b0:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 7b7:	00 77 68             	add    BYTE PTR [edi+0x68],dh
 7ba:	61                   	popa   
 7bb:	74 65                	je     822 <sysEnter_Vector-0x12f7de>
 7bd:	76 65                	jbe    824 <sysEnter_Vector-0x12f7dc>
 7bf:	72 00                	jb     7c1 <sysEnter_Vector-0x12f83f>
 7c1:	69 5f 75 69 64 00 69 	imul   ebx,DWORD PTR [edi+0x75],0x69006469
 7c8:	5f                   	pop    edi
 7c9:	6d                   	ins    DWORD PTR es:[edi],dx
 7ca:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7cb:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 7d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7d1:	73 6f                	jae    842 <sysEnter_Vector-0x12f7be>
 7d3:	6c                   	ins    BYTE PTR es:[edi],dx
 7d4:	65                   	gs
 7d5:	5f                   	pop    edi
 7d6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7d7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7d8:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 7dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7de:	64                   	fs
 7df:	65                   	gs
 7e0:	5f                   	pop    edi
 7e1:	74 00                	je     7e3 <sysEnter_Vector-0x12f81d>
 7e3:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 7e6:	73 6f                	jae    857 <sysEnter_Vector-0x12f7a9>
 7e8:	6c                   	ins    BYTE PTR es:[edi],dx
 7e9:	65                   	gs
 7ea:	5f                   	pop    edi
 7eb:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 7f2:	72 6f                	jb     863 <sysEnter_Vector-0x12f79d>
 7f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7f5:	74 00                	je     7f7 <sysEnter_Vector-0x12f809>
 7f7:	64                   	fs
 7f8:	5f                   	pop    edi
 7f9:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 800:	65                   	gs
 801:	61                   	popa   
 802:	64 00 72 65          	add    BYTE PTR fs:[edx+0x65],dh
 806:	73 65                	jae    86d <sysEnter_Vector-0x12f793>
 808:	74 52                	je     85c <sysEnter_Vector-0x12f7a4>
 80a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 80b:	77 00                	ja     80d <sysEnter_Vector-0x12f7f3>
 80d:	64                   	fs
 80e:	5f                   	pop    edi
 80f:	70 61                	jo     872 <sysEnter_Vector-0x12f78e>
 811:	72 65                	jb     878 <sysEnter_Vector-0x12f788>
 813:	6e                   	outs   dx,BYTE PTR ds:[esi]
 814:	74 00                	je     816 <sysEnter_Vector-0x12f7ea>
 816:	66 5f                	pop    di
 818:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 81f:	5f                   	pop    edi
 820:	70 61                	jo     883 <sysEnter_Vector-0x12f77d>
 822:	74 68                	je     88c <sysEnter_Vector-0x12f774>
 824:	00 72 6f             	add    BYTE PTR [edx+0x6f],dh
 827:	77 53                	ja     87c <sysEnter_Vector-0x12f784>
 829:	74 72                	je     89d <sysEnter_Vector-0x12f763>
 82b:	69 6e 67 00 63 72 65 	imul   ebp,DWORD PTR [esi+0x67],0x65726300
 832:	61                   	popa   
 833:	74 65                	je     89a <sysEnter_Vector-0x12f766>
 835:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 838:	6e                   	outs   dx,BYTE PTR ds:[esi]
 839:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 83c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 83e:	61                   	popa   
 83f:	74 65                	je     8a6 <sysEnter_Vector-0x12f75a>
 841:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 844:	72 63                	jb     8a9 <sysEnter_Vector-0x12f757>
 846:	61                   	popa   
 847:	74 49                	je     892 <sysEnter_Vector-0x12f76e>
 849:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 84c:	72 63                	jb     8b1 <sysEnter_Vector-0x12f74f>
 84e:	61                   	popa   
 84f:	74 00                	je     851 <sysEnter_Vector-0x12f7af>
 851:	73 72                	jae    8c5 <sysEnter_Vector-0x12f73b>
 853:	63 2f                	arpl   WORD PTR [edi],bp
 855:	73 74                	jae    8cb <sysEnter_Vector-0x12f735>
 857:	72 69                	jb     8c2 <sysEnter_Vector-0x12f73e>
 859:	6e                   	outs   dx,BYTE PTR ds:[esi]
 85a:	67 73 2f             	addr16 jae 88c <sysEnter_Vector-0x12f774>
 85d:	73 74                	jae    8d3 <sysEnter_Vector-0x12f72d>
 85f:	72 63                	jb     8c4 <sysEnter_Vector-0x12f73c>
 861:	61                   	popa   
 862:	74 2e                	je     892 <sysEnter_Vector-0x12f76e>
 864:	63 00                	arpl   WORD PTR [eax],ax
 866:	73 74                	jae    8dc <sysEnter_Vector-0x12f724>
 868:	72 63                	jb     8cd <sysEnter_Vector-0x12f733>
 86a:	6d                   	ins    DWORD PTR es:[edi],dx
 86b:	70 00                	jo     86d <sysEnter_Vector-0x12f793>
 86d:	73 72                	jae    8e1 <sysEnter_Vector-0x12f71f>
 86f:	63 2f                	arpl   WORD PTR [edi],bp
 871:	73 74                	jae    8e7 <sysEnter_Vector-0x12f719>
 873:	72 69                	jb     8de <sysEnter_Vector-0x12f722>
 875:	6e                   	outs   dx,BYTE PTR ds:[esi]
 876:	67 73 2f             	addr16 jae 8a8 <sysEnter_Vector-0x12f758>
 879:	73 74                	jae    8ef <sysEnter_Vector-0x12f711>
 87b:	72 63                	jb     8e0 <sysEnter_Vector-0x12f720>
 87d:	6d                   	ins    DWORD PTR es:[edi],dx
 87e:	70 2e                	jo     8ae <sysEnter_Vector-0x12f752>
 880:	63 00                	arpl   WORD PTR [eax],ax
 882:	73 74                	jae    8f8 <sysEnter_Vector-0x12f708>
 884:	72 63                	jb     8e9 <sysEnter_Vector-0x12f717>
 886:	70 79                	jo     901 <sysEnter_Vector-0x12f6ff>
 888:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 88b:	75 6e                	jne    8fb <sysEnter_Vector-0x12f705>
 88d:	74 00                	je     88f <sysEnter_Vector-0x12f771>
 88f:	73 74                	jae    905 <sysEnter_Vector-0x12f6fb>
 891:	72 63                	jb     8f6 <sysEnter_Vector-0x12f70a>
 893:	70 79                	jo     90e <sysEnter_Vector-0x12f6f2>
 895:	63 00                	arpl   WORD PTR [eax],ax
 897:	73 74                	jae    90d <sysEnter_Vector-0x12f6f3>
 899:	72 63                	jb     8fe <sysEnter_Vector-0x12f702>
 89b:	70 79                	jo     916 <sysEnter_Vector-0x12f6ea>
 89d:	49                   	dec    ecx
 89e:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8a1:	63 2f                	arpl   WORD PTR [edi],bp
 8a3:	73 74                	jae    919 <sysEnter_Vector-0x12f6e7>
 8a5:	72 69                	jb     910 <sysEnter_Vector-0x12f6f0>
 8a7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a8:	67 73 2f             	addr16 jae 8da <sysEnter_Vector-0x12f726>
 8ab:	73 74                	jae    921 <sysEnter_Vector-0x12f6df>
 8ad:	72 63                	jb     912 <sysEnter_Vector-0x12f6ee>
 8af:	70 79                	jo     92a <sysEnter_Vector-0x12f6d6>
 8b1:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 8b4:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 8b7:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 8ba:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 8c1:	74 
 8c2:	72 69                	jb     92d <sysEnter_Vector-0x12f6d3>
 8c4:	73 6e                	jae    934 <sysEnter_Vector-0x12f6cc>
 8c6:	75 6d                	jne    935 <sysEnter_Vector-0x12f6cb>
 8c8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8cb:	63 2f                	arpl   WORD PTR [edi],bp
 8cd:	73 74                	jae    943 <sysEnter_Vector-0x12f6bd>
 8cf:	72 69                	jb     93a <sysEnter_Vector-0x12f6c6>
 8d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8d2:	67 73 2f             	addr16 jae 904 <sysEnter_Vector-0x12f6fc>
 8d5:	73 74                	jae    94b <sysEnter_Vector-0x12f6b5>
 8d7:	72 69                	jb     942 <sysEnter_Vector-0x12f6be>
 8d9:	73 6e                	jae    949 <sysEnter_Vector-0x12f6b7>
 8db:	75 6d                	jne    94a <sysEnter_Vector-0x12f6b6>
 8dd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 8e0:	73 74                	jae    956 <sysEnter_Vector-0x12f6aa>
 8e2:	72 6c                	jb     950 <sysEnter_Vector-0x12f6b0>
 8e4:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 8e6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 8e9:	63 2f                	arpl   WORD PTR [edi],bp
 8eb:	73 74                	jae    961 <sysEnter_Vector-0x12f69f>
 8ed:	72 69                	jb     958 <sysEnter_Vector-0x12f6a8>
 8ef:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8f0:	67 73 2f             	addr16 jae 922 <sysEnter_Vector-0x12f6de>
 8f3:	73 74                	jae    969 <sysEnter_Vector-0x12f697>
 8f5:	72 6c                	jb     963 <sysEnter_Vector-0x12f69d>
 8f7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 8f9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 8fc:	73 74                	jae    972 <sysEnter_Vector-0x12f68e>
 8fe:	72 6e                	jb     96e <sysEnter_Vector-0x12f692>
 900:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 903:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 906:	63 2f                	arpl   WORD PTR [edi],bp
 908:	73 74                	jae    97e <sysEnter_Vector-0x12f682>
 90a:	72 69                	jb     975 <sysEnter_Vector-0x12f68b>
 90c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 90d:	67 73 2f             	addr16 jae 93f <sysEnter_Vector-0x12f6c1>
 910:	73 74                	jae    986 <sysEnter_Vector-0x12f67a>
 912:	72 6e                	jb     982 <sysEnter_Vector-0x12f67e>
 914:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 917:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 91a:	73 72                	jae    98e <sysEnter_Vector-0x12f672>
 91c:	63 2f                	arpl   WORD PTR [edi],bp
 91e:	73 74                	jae    994 <sysEnter_Vector-0x12f66c>
 920:	72 69                	jb     98b <sysEnter_Vector-0x12f675>
 922:	6e                   	outs   dx,BYTE PTR ds:[esi]
 923:	67 73 2f             	addr16 jae 955 <sysEnter_Vector-0x12f6ab>
 926:	73 74                	jae    99c <sysEnter_Vector-0x12f664>
 928:	72 6e                	jb     998 <sysEnter_Vector-0x12f668>
 92a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 92d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 930:	73 74                	jae    9a6 <sysEnter_Vector-0x12f65a>
 932:	72 6e                	jb     9a2 <sysEnter_Vector-0x12f65e>
 934:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 937:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 93a:	63 2f                	arpl   WORD PTR [edi],bp
 93c:	73 74                	jae    9b2 <sysEnter_Vector-0x12f64e>
 93e:	72 69                	jb     9a9 <sysEnter_Vector-0x12f657>
 940:	6e                   	outs   dx,BYTE PTR ds:[esi]
 941:	67 73 2f             	addr16 jae 973 <sysEnter_Vector-0x12f68d>
 944:	73 74                	jae    9ba <sysEnter_Vector-0x12f646>
 946:	72 6f                	jb     9b7 <sysEnter_Vector-0x12f649>
 948:	75 6c                	jne    9b6 <sysEnter_Vector-0x12f64a>
 94a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 94d:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 950:	6f                   	outs   dx,DWORD PTR ds:[esi]
 951:	66                   	data16
 952:	66                   	data16
 953:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 956:	74 6c                	je     9c4 <sysEnter_Vector-0x12f63c>
 958:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 95f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 960:	75 6c                	jne    9ce <sysEnter_Vector-0x12f632>
 962:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 965:	64                   	fs
 966:	70 74                	jo     9dc <sysEnter_Vector-0x12f624>
 968:	72 00                	jb     96a <sysEnter_Vector-0x12f696>
 96a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 96b:	70 74                	jo     9e1 <sysEnter_Vector-0x12f61f>
 96d:	72 00                	jb     96f <sysEnter_Vector-0x12f691>
 96f:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 972:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 976:	63 2f                	arpl   WORD PTR [edi],bp
 978:	73 74                	jae    9ee <sysEnter_Vector-0x12f612>
 97a:	72 69                	jb     9e5 <sysEnter_Vector-0x12f61b>
 97c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 97d:	67 73 2f             	addr16 jae 9af <sysEnter_Vector-0x12f651>
 980:	73 74                	jae    9f6 <sysEnter_Vector-0x12f60a>
 982:	72 70                	jb     9f4 <sysEnter_Vector-0x12f60c>
 984:	61                   	popa   
 985:	72 74                	jb     9fb <sysEnter_Vector-0x12f605>
 987:	73 2e                	jae    9b7 <sysEnter_Vector-0x12f649>
 989:	63 00                	arpl   WORD PTR [eax],ax
 98b:	73 74                	jae    a01 <sysEnter_Vector-0x12f5ff>
 98d:	72 6c                	jb     9fb <sysEnter_Vector-0x12f605>
 98f:	65                   	gs
 990:	66                   	data16
 991:	74 00                	je     993 <sysEnter_Vector-0x12f66d>
 993:	73 72                	jae    a07 <sysEnter_Vector-0x12f5f9>
 995:	63 2f                	arpl   WORD PTR [edi],bp
 997:	73 74                	jae    a0d <sysEnter_Vector-0x12f5f3>
 999:	72 69                	jb     a04 <sysEnter_Vector-0x12f5fc>
 99b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 99c:	67 73 2f             	addr16 jae 9ce <sysEnter_Vector-0x12f632>
 99f:	73 74                	jae    a15 <sysEnter_Vector-0x12f5eb>
 9a1:	72 74                	jb     a17 <sysEnter_Vector-0x12f5e9>
 9a3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9a4:	6c                   	ins    BYTE PTR es:[edi],dx
 9a5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9a8:	73 74                	jae    a1e <sysEnter_Vector-0x12f5e2>
 9aa:	72 74                	jb     a20 <sysEnter_Vector-0x12f5e0>
 9ac:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9ad:	6c                   	ins    BYTE PTR es:[edi],dx
 9ae:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 9b1:	70 75                	jo     a28 <sysEnter_Vector-0x12f5d8>
 9b3:	74 00                	je     9b5 <sysEnter_Vector-0x12f64b>
 9b5:	73 72                	jae    a29 <sysEnter_Vector-0x12f5d7>
 9b7:	63 2f                	arpl   WORD PTR [edi],bp
 9b9:	73 74                	jae    a2f <sysEnter_Vector-0x12f5d1>
 9bb:	72 69                	jb     a26 <sysEnter_Vector-0x12f5da>
 9bd:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9be:	67 73 2f             	addr16 jae 9f0 <sysEnter_Vector-0x12f610>
 9c1:	73 74                	jae    a37 <sysEnter_Vector-0x12f5c9>
 9c3:	72 74                	jb     a39 <sysEnter_Vector-0x12f5c7>
 9c5:	72 69                	jb     a30 <sysEnter_Vector-0x12f5d0>
 9c7:	6d                   	ins    DWORD PTR es:[edi],dx
 9c8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9cb:	73 74                	jae    a41 <sysEnter_Vector-0x12f5bf>
 9cd:	72 74                	jb     a43 <sysEnter_Vector-0x12f5bd>
 9cf:	72 69                	jb     a3a <sysEnter_Vector-0x12f5c6>
 9d1:	6d                   	ins    DWORD PTR es:[edi],dx
 9d2:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9d5:	63 2f                	arpl   WORD PTR [edi],bp
 9d7:	73 74                	jae    a4d <sysEnter_Vector-0x12f5b3>
 9d9:	72 73                	jb     a4e <sysEnter_Vector-0x12f5b2>
 9db:	74 72                	je     a4f <sysEnter_Vector-0x12f5b1>
 9dd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9e0:	73 74                	jae    a56 <sysEnter_Vector-0x12f5aa>
 9e2:	72 73                	jb     a57 <sysEnter_Vector-0x12f5a9>
 9e4:	74 72                	je     a58 <sysEnter_Vector-0x12f5a8>
 9e6:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 9e9:	73 69                	jae    a54 <sysEnter_Vector-0x12f5ac>
 9eb:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 9ef:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 9f2:	72 69                	jb     a5d <sysEnter_Vector-0x12f5a3>
 9f4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9f5:	67 00 6c 6f          	add    BYTE PTR [si+0x6f],ch
 9f9:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 9fc:	74 69                	je     a67 <sysEnter_Vector-0x12f599>
 9fe:	6d                   	ins    DWORD PTR es:[edi],dx
 9ff:	65 00 64 61 79       	add    BYTE PTR gs:[ecx+eiz*2+0x79],ah
 a04:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a05:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a06:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 a09:	73 74                	jae    a7f <sysEnter_Vector-0x12f581>
 a0b:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 a0e:	73 00                	jae    a10 <sysEnter_Vector-0x12f5f0>
 a10:	67 6d                	ins    DWORD PTR es:[di],dx
 a12:	74 69                	je     a7d <sysEnter_Vector-0x12f583>
 a14:	6d                   	ins    DWORD PTR es:[edi],dx
 a15:	65                   	gs
 a16:	5f                   	pop    edi
 a17:	72 00                	jb     a19 <sysEnter_Vector-0x12f5e7>
 a19:	74 69                	je     a84 <sysEnter_Vector-0x12f57c>
 a1b:	6d                   	ins    DWORD PTR es:[edi],dx
 a1c:	65                   	gs
 a1d:	72 00                	jb     a1f <sysEnter_Vector-0x12f5e1>
 a1f:	6c                   	ins    BYTE PTR es:[edi],dx
 a20:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a21:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 a24:	74 69                	je     a8f <sysEnter_Vector-0x12f571>
 a26:	6d                   	ins    DWORD PTR es:[edi],dx
 a27:	65                   	gs
 a28:	5f                   	pop    edi
 a29:	72 00                	jb     a2b <sysEnter_Vector-0x12f5d5>
 a2b:	5f                   	pop    edi
 a2c:	74 7a                	je     aa8 <sysEnter_Vector-0x12f558>
 a2e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a2f:	61                   	popa   
 a30:	6d                   	ins    DWORD PTR es:[edi],dx
 a31:	65 00 5f 79          	add    BYTE PTR gs:[edi+0x79],bl
 a35:	74 61                	je     a98 <sysEnter_Vector-0x12f568>
 a37:	62 00                	bound  eax,QWORD PTR [eax]
 a39:	74 69                	je     aa4 <sysEnter_Vector-0x12f55c>
 a3b:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 a3e:	54                   	push   esp
 a3f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a40:	57                   	push   edi
 a41:	61                   	popa   
 a42:	69 74 00 6d 6b 74 69 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x6d69746b
 a49:	6d 
 a4a:	65 00 64 61 79       	add    BYTE PTR gs:[ecx+eiz*2+0x79],ah
 a4f:	63 6c 6f 63          	arpl   WORD PTR [edi+ebp*2+0x63],bp
 a53:	6b 00 5f             	imul   eax,DWORD PTR [eax],0x5f
 a56:	64                   	fs
 a57:	61                   	popa   
 a58:	79 6c                	jns    ac6 <sysEnter_Vector-0x12f53a>
 a5a:	69 67 68 74 00 6f 76 	imul   esp,DWORD PTR [edi+0x68],0x766f0074
 a61:	65                   	gs
 a62:	72 66                	jb     aca <sysEnter_Vector-0x12f536>
 a64:	6c                   	ins    BYTE PTR es:[edi],dx
 a65:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a66:	77 00                	ja     a68 <sysEnter_Vector-0x12f598>
 a68:	6d                   	ins    DWORD PTR es:[edi],dx
 a69:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a6b:	74 68                	je     ad5 <sysEnter_Vector-0x12f52b>
 a6d:	00 74 6d 62          	add    BYTE PTR [ebp+ebp*2+0x62],dh
 a71:	75 66                	jne    ad9 <sysEnter_Vector-0x12f527>
 a73:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a76:	63 2f                	arpl   WORD PTR [edi],bp
 a78:	74 69                	je     ae3 <sysEnter_Vector-0x12f51d>
 a7a:	6d                   	ins    DWORD PTR es:[edi],dx
 a7b:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
