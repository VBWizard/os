
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 8a 48 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000008:	05 34 71 00 00       	add    eax,0x7134
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 52 48 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000040:	05 fc 70 00 00       	add    eax,0x70fc
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 18 48 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00007a:	05 c2 70 00 00       	add    eax,0x70c2
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 c3 47 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0000cf:	05 6d 70 00 00       	add    eax,0x706d
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 aa 47 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 16 70 00 00    	add    ebx,0x7016
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtokI+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtokI+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 40 00 00 00    	mov    DWORD PTR [ebx+0x40],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtokI+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 40 00 00 00    	mov    eax,DWORD PTR [ebx+0x40]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 40 00 00 00    	mov    DWORD PTR [ebx+0x40],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    

9f0001b3 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:59

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b3:	55                   	push   ebp
9f0001b4:	89 e5                	mov    ebp,esp
9f0001b6:	56                   	push   esi
9f0001b7:	53                   	push   ebx
9f0001b8:	e8 13 47 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0001bd:	81 c3 7f 6f 00 00    	add    ebx,0x6f7f
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:63
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001c3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001c7:	75 09                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:64
	s = lasts;
9f0001c9:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f0001cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
    do {
	if ((ch = *s++) == '\0')
9f0001d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0001d8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001de:	0f be f0             	movsx  esi,al
9f0001e1:	85 f6                	test   esi,esi
9f0001e3:	75 07                	jne    9f0001ec <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:67
	    return 0;
9f0001e5:	b8 00 00 00 00       	mov    eax,0x0
9f0001ea:	eb 57                	jmp    9f000243 <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    } while (strchrI(delim, ch));
9f0001ec:	83 ec 08             	sub    esp,0x8
9f0001ef:	56                   	push   esi
9f0001f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001f3:	e8 40 fe ff ff       	call   9f000038 <strchrI>
9f0001f8:	83 c4 10             	add    esp,0x10
9f0001fb:	85 c0                	test   eax,eax
9f0001fd:	75 d3                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
    --s;
9f0001ff:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    lasts = s + strcspnI(s, delim);
9f000203:	83 ec 08             	sub    esp,0x8
9f000206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00020c:	e8 b4 fe ff ff       	call   9f0000c5 <strcspnI>
9f000211:	83 c4 10             	add    esp,0x10
9f000214:	89 c2                	mov    edx,eax
9f000216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000219:	01 d0                	add    eax,edx
9f00021b:	89 83 44 00 00 00    	mov    DWORD PTR [ebx+0x44],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    if (*lasts != 0)
9f000221:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f000227:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00022a:	84 c0                	test   al,al
9f00022c:	74 12                	je     9f000240 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
	*lasts++ = 0;
9f00022e:	8b 83 44 00 00 00    	mov    eax,DWORD PTR [ebx+0x44]
9f000234:	8d 50 01             	lea    edx,[eax+0x1]
9f000237:	89 93 44 00 00 00    	mov    DWORD PTR [ebx+0x44],edx
9f00023d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    return s;
9f000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
9f000243:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000246:	5b                   	pop    ebx
9f000247:	5e                   	pop    esi
9f000248:	5d                   	pop    ebp
9f000249:	c3                   	ret    
9f00024a:	66 90                	xchg   ax,ax

9f00024c <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f00024c:	55                   	push   ebp
9f00024d:	89 e5                	mov    ebp,esp
9f00024f:	53                   	push   ebx
9f000250:	83 ec 14             	sub    esp,0x14
9f000253:	e8 3a 46 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000258:	05 e4 6e 00 00       	add    eax,0x6ee4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f00025d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000264:	83 ec 0c             	sub    esp,0xc
9f000267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00026a:	89 c3                	mov    ebx,eax
9f00026c:	e8 87 30 00 00       	call   9f0032f8 <strlenI>
9f000271:	83 c4 10             	add    esp,0x10
9f000274:	83 e8 01             	sub    eax,0x1
9f000277:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00027a:	eb 39                	jmp    9f0002b5 <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f00027c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00027f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000282:	01 d0                	add    eax,edx
9f000284:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000287:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f00028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000290:	01 c2                	add    edx,eax
9f000292:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000298:	01 c8                	add    eax,ecx
9f00029a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00029d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f00029f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002a5:	01 c2                	add    edx,eax
9f0002a7:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002ab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002b1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f0002b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002bb:	7c bf                	jl     9f00027c <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f0002bd:	90                   	nop
9f0002be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002c1:	c9                   	leave  
9f0002c2:	c3                   	ret    

9f0002c3 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f0002c3:	55                   	push   ebp
9f0002c4:	89 e5                	mov    ebp,esp
9f0002c6:	53                   	push   ebx
9f0002c7:	83 ec 14             	sub    esp,0x14
9f0002ca:	e8 c3 45 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0002cf:	05 6d 6e 00 00       	add    eax,0x6e6d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002de:	79 03                	jns    9f0002e3 <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f0002e0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f0002e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0002f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002f3:	89 c2                	mov    edx,eax
9f0002f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002f8:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0002fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fe:	ba 67 66 66 66       	mov    edx,0x66666667
9f000303:	89 c8                	mov    eax,ecx
9f000305:	f7 ea                	imul   edx
9f000307:	c1 fa 02             	sar    edx,0x2
9f00030a:	89 c8                	mov    eax,ecx
9f00030c:	c1 f8 1f             	sar    eax,0x1f
9f00030f:	29 c2                	sub    edx,eax
9f000311:	89 d0                	mov    eax,edx
9f000313:	c1 e0 02             	shl    eax,0x2
9f000316:	01 d0                	add    eax,edx
9f000318:	01 c0                	add    eax,eax
9f00031a:	29 c1                	sub    ecx,eax
9f00031c:	89 ca                	mov    edx,ecx
9f00031e:	89 d0                	mov    eax,edx
9f000320:	83 c0 30             	add    eax,0x30
9f000323:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000328:	ba 67 66 66 66       	mov    edx,0x66666667
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	f7 ea                	imul   edx
9f000331:	c1 fa 02             	sar    edx,0x2
9f000334:	89 c8                	mov    eax,ecx
9f000336:	c1 f8 1f             	sar    eax,0x1f
9f000339:	29 c2                	sub    edx,eax
9f00033b:	89 d0                	mov    eax,edx
9f00033d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000340:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000344:	7f a4                	jg     9f0002ea <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f000346:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00034a:	79 13                	jns    9f00035f <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f00034c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00034f:	8d 50 01             	lea    edx,[eax+0x1]
9f000352:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000355:	89 c2                	mov    edx,eax
9f000357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00035a:	01 d0                	add    eax,edx
9f00035c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f00035f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000365:	01 d0                	add    eax,edx
9f000367:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f00036a:	83 ec 0c             	sub    esp,0xc
9f00036d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000370:	e8 d7 fe ff ff       	call   9f00024c <reverseI>
9f000375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f000378:	90                   	nop
9f000379:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00037c:	c9                   	leave  
9f00037d:	c3                   	ret    

9f00037e <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f00037e:	55                   	push   ebp
9f00037f:	89 e5                	mov    ebp,esp
9f000381:	53                   	push   ebx
9f000382:	83 ec 14             	sub    esp,0x14
9f000385:	e8 08 45 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00038a:	05 b2 6d 00 00       	add    eax,0x6db2
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00038f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000392:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000395:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000399:	79 03                	jns    9f00039e <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f00039b:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f00039e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0003ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003ae:	89 c2                	mov    edx,eax
9f0003b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003b3:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	83 c0 30             	add    eax,0x30
9f0003de:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003e3:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003e8:	89 c8                	mov    eax,ecx
9f0003ea:	f7 ea                	imul   edx
9f0003ec:	c1 fa 02             	sar    edx,0x2
9f0003ef:	89 c8                	mov    eax,ecx
9f0003f1:	c1 f8 1f             	sar    eax,0x1f
9f0003f4:	29 c2                	sub    edx,eax
9f0003f6:	89 d0                	mov    eax,edx
9f0003f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0003fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0003ff:	7f a4                	jg     9f0003a5 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000401:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000405:	79 13                	jns    9f00041a <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f000407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00040a:	8d 50 01             	lea    edx,[eax+0x1]
9f00040d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000410:	89 c2                	mov    edx,eax
9f000412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000415:	01 d0                	add    eax,edx
9f000417:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f00041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00041d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000420:	01 d0                	add    eax,edx
9f000422:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f000425:	83 ec 0c             	sub    esp,0xc
9f000428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00042b:	e8 1c fe ff ff       	call   9f00024c <reverseI>
9f000430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f000433:	90                   	nop
9f000434:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000437:	c9                   	leave  
9f000438:	c3                   	ret    

9f000439 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f000439:	55                   	push   ebp
9f00043a:	89 e5                	mov    ebp,esp
9f00043c:	83 ec 10             	sub    esp,0x10
9f00043f:	e8 4e 44 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000444:	05 f8 6c 00 00       	add    eax,0x6cf8
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f000449:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000450:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f000457:	eb 28                	jmp    9f000481 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f000459:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00045c:	89 d0                	mov    eax,edx
9f00045e:	c1 e0 02             	shl    eax,0x2
9f000461:	01 d0                	add    eax,edx
9f000463:	01 c0                	add    eax,eax
9f000465:	89 c1                	mov    ecx,eax
9f000467:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00046a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00046d:	01 d0                	add    eax,edx
9f00046f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000472:	0f be c0             	movsx  eax,al
9f000475:	01 c8                	add    eax,ecx
9f000477:	83 e8 30             	sub    eax,0x30
9f00047a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f00047d:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f000481:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000487:	01 d0                	add    eax,edx
9f000489:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00048c:	84 c0                	test   al,al
9f00048e:	75 c9                	jne    9f000459 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f000490:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f000493:	c9                   	leave  
9f000494:	c3                   	ret    
9f000495:	66 90                	xchg   ax,ax
9f000497:	90                   	nop

9f000498 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:14
#include "console.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f000498:	55                   	push   ebp
9f000499:	89 e5                	mov    ebp,esp
9f00049b:	53                   	push   ebx
9f00049c:	83 ec 14             	sub    esp,0x14
9f00049f:	e8 2c 44 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0004a4:	81 c3 98 6c 00 00    	add    ebx,0x6c98
/home/yogi/src/os/aproj/libChrisOS/src/console.c:18
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004aa:	83 ec 08             	sub    esp,0x8
9f0004ad:	8d 83 c4 f7 ff ff    	lea    eax,[ebx-0x83c]
9f0004b3:	50                   	push   eax
9f0004b4:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004b7:	50                   	push   eax
9f0004b8:	e8 27 2d 00 00       	call   9f0031e4 <strcpyI>
9f0004bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:19
    itoaI(x,xstr);
9f0004c0:	83 ec 08             	sub    esp,0x8
9f0004c3:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004c6:	50                   	push   eax
9f0004c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004ca:	e8 af fe ff ff       	call   9f00037e <itoaI>
9f0004cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    strcatI(cmd,xstr);
9f0004d2:	83 ec 08             	sub    esp,0x8
9f0004d5:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004d8:	50                   	push   eax
9f0004d9:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004dc:	50                   	push   eax
9f0004dd:	e8 70 2b 00 00       	call   9f003052 <strcatI>
9f0004e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    strcatI(cmd,";");
9f0004e5:	83 ec 08             	sub    esp,0x8
9f0004e8:	8d 83 c7 f7 ff ff    	lea    eax,[ebx-0x839]
9f0004ee:	50                   	push   eax
9f0004ef:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004f2:	50                   	push   eax
9f0004f3:	e8 5a 2b 00 00       	call   9f003052 <strcatI>
9f0004f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    itoaI(y,ystr);
9f0004fb:	83 ec 08             	sub    esp,0x8
9f0004fe:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000501:	50                   	push   eax
9f000502:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000505:	e8 74 fe ff ff       	call   9f00037e <itoaI>
9f00050a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,ystr);
9f00050d:	83 ec 08             	sub    esp,0x8
9f000510:	8d 45 e8             	lea    eax,[ebp-0x18]
9f000513:	50                   	push   eax
9f000514:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000517:	50                   	push   eax
9f000518:	e8 35 2b 00 00       	call   9f003052 <strcatI>
9f00051d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    strcatI(cmd,"H");
9f000520:	83 ec 08             	sub    esp,0x8
9f000523:	8d 83 c9 f7 ff ff    	lea    eax,[ebx-0x837]
9f000529:	50                   	push   eax
9f00052a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00052d:	50                   	push   eax
9f00052e:	e8 1f 2b 00 00       	call   9f003052 <strcatI>
9f000533:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000536:	83 ec 08             	sub    esp,0x8
9f000539:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00053c:	50                   	push   eax
9f00053d:	8d 83 cb f7 ff ff    	lea    eax,[ebx-0x835]
9f000543:	50                   	push   eax
9f000544:	e8 d0 0f 00 00       	call   9f001519 <printfI>
9f000549:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:27
}
9f00054c:	90                   	nop
9f00054d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000550:	c9                   	leave  
9f000551:	c3                   	ret    

9f000552 <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:30

VISIBLE void saveCursorPosition()
{
9f000552:	55                   	push   ebp
9f000553:	89 e5                	mov    ebp,esp
9f000555:	53                   	push   ebx
9f000556:	83 ec 14             	sub    esp,0x14
9f000559:	e8 72 43 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f00055e:	81 c3 de 6b 00 00    	add    ebx,0x6bde
/home/yogi/src/os/aproj/libChrisOS/src/console.c:33
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000564:	83 ec 08             	sub    esp,0x8
9f000567:	8d 83 c4 f7 ff ff    	lea    eax,[ebx-0x83c]
9f00056d:	50                   	push   eax
9f00056e:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000571:	50                   	push   eax
9f000572:	e8 6d 2c 00 00       	call   9f0031e4 <strcpyI>
9f000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:34
    strcatI(cmd,"s");
9f00057a:	83 ec 08             	sub    esp,0x8
9f00057d:	8d 83 ce f7 ff ff    	lea    eax,[ebx-0x832]
9f000583:	50                   	push   eax
9f000584:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000587:	50                   	push   eax
9f000588:	e8 c5 2a 00 00       	call   9f003052 <strcatI>
9f00058d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000590:	83 ec 08             	sub    esp,0x8
9f000593:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000596:	50                   	push   eax
9f000597:	8d 83 cb f7 ff ff    	lea    eax,[ebx-0x835]
9f00059d:	50                   	push   eax
9f00059e:	e8 76 0f 00 00       	call   9f001519 <printfI>
9f0005a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:37
}
9f0005a6:	90                   	nop
9f0005a7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005aa:	c9                   	leave  
9f0005ab:	c3                   	ret    

9f0005ac <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:40

VISIBLE void restoreCursorPosition()
{
9f0005ac:	55                   	push   ebp
9f0005ad:	89 e5                	mov    ebp,esp
9f0005af:	53                   	push   ebx
9f0005b0:	83 ec 14             	sub    esp,0x14
9f0005b3:	e8 18 43 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0005b8:	81 c3 84 6b 00 00    	add    ebx,0x6b84
/home/yogi/src/os/aproj/libChrisOS/src/console.c:43
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005be:	83 ec 08             	sub    esp,0x8
9f0005c1:	8d 83 c4 f7 ff ff    	lea    eax,[ebx-0x83c]
9f0005c7:	50                   	push   eax
9f0005c8:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005cb:	50                   	push   eax
9f0005cc:	e8 13 2c 00 00       	call   9f0031e4 <strcpyI>
9f0005d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:44
    strcatI(cmd,"u");
9f0005d4:	83 ec 08             	sub    esp,0x8
9f0005d7:	8d 83 d0 f7 ff ff    	lea    eax,[ebx-0x830]
9f0005dd:	50                   	push   eax
9f0005de:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005e1:	50                   	push   eax
9f0005e2:	e8 6b 2a 00 00       	call   9f003052 <strcatI>
9f0005e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005ea:	83 ec 08             	sub    esp,0x8
9f0005ed:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005f0:	50                   	push   eax
9f0005f1:	8d 83 cb f7 ff ff    	lea    eax,[ebx-0x835]
9f0005f7:	50                   	push   eax
9f0005f8:	e8 1c 0f 00 00       	call   9f001519 <printfI>
9f0005fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:47
}
9f000600:	90                   	nop
9f000601:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000604:	c9                   	leave  
9f000605:	c3                   	ret    
9f000606:	66 90                	xchg   ax,ax

9f000608 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
9f000608:	55                   	push   ebp
9f000609:	89 e5                	mov    ebp,esp
9f00060b:	53                   	push   ebx
9f00060c:	83 ec 14             	sub    esp,0x14
9f00060f:	e8 bc 42 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f000614:	81 c3 28 6b 00 00    	add    ebx,0x6b28
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f00061a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000621:	eb 7b                	jmp    9f00069e <getenvI+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000623:	83 ec 0c             	sub    esp,0xc
9f000626:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000629:	e8 ca 2c 00 00       	call   9f0032f8 <strlenI>
9f00062e:	83 c4 10             	add    esp,0x10
9f000631:	89 c1                	mov    ecx,eax
9f000633:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000639:	8b 00                	mov    eax,DWORD PTR [eax]
9f00063b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00063e:	c1 e2 02             	shl    edx,0x2
9f000641:	01 d0                	add    eax,edx
9f000643:	8b 00                	mov    eax,DWORD PTR [eax]
9f000645:	83 ec 04             	sub    esp,0x4
9f000648:	51                   	push   ecx
9f000649:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00064c:	50                   	push   eax
9f00064d:	e8 b1 2d 00 00       	call   9f003403 <strncmpI>
9f000652:	83 c4 10             	add    esp,0x10
9f000655:	85 c0                	test   eax,eax
9f000657:	75 41                	jne    9f00069a <getenvI+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000659:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000664:	c1 e2 02             	shl    edx,0x2
9f000667:	01 d0                	add    eax,edx
9f000669:	8b 00                	mov    eax,DWORD PTR [eax]
9f00066b:	83 ec 08             	sub    esp,0x8
9f00066e:	8d 93 d2 f7 ff ff    	lea    edx,[ebx-0x82e]
9f000674:	52                   	push   edx
9f000675:	50                   	push   eax
9f000676:	e8 7b 34 00 00       	call   9f003af6 <strstrI>
9f00067b:	83 c4 10             	add    esp,0x10
9f00067e:	83 c0 01             	add    eax,0x1
9f000681:	83 ec 04             	sub    esp,0x4
9f000684:	6a 32                	push   0x32
9f000686:	50                   	push   eax
9f000687:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00068a:	e8 dd 2d 00 00       	call   9f00346c <strncpyI>
9f00068f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f000692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000695:	83 c0 01             	add    eax,0x1
9f000698:	eb 13                	jmp    9f0006ad <getenvI+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f00069a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f00069e:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f0006a2:	0f 8e 7b ff ff ff    	jle    9f000623 <getenvI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f0006a8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0006ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006b0:	c9                   	leave  
9f0006b1:	c3                   	ret    

9f0006b2 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE int getenv(char *varname, char *value)
{
9f0006b2:	55                   	push   ebp
9f0006b3:	89 e5                	mov    ebp,esp
9f0006b5:	83 ec 08             	sub    esp,0x8
9f0006b8:	e8 d5 41 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0006bd:	05 7f 6a 00 00       	add    eax,0x6a7f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    return getenvI(varname, value);
9f0006c2:	83 ec 08             	sub    esp,0x8
9f0006c5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006cb:	e8 38 ff ff ff       	call   9f000608 <getenvI>
9f0006d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
}
9f0006d3:	c9                   	leave  
9f0006d4:	c3                   	ret    

9f0006d5 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26

VISIBLE void  setenv(char *varname, char *value)
{
9f0006d5:	55                   	push   ebp
9f0006d6:	89 e5                	mov    ebp,esp
9f0006d8:	53                   	push   ebx
9f0006d9:	83 ec 14             	sub    esp,0x14
9f0006dc:	e8 ef 41 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0006e1:	81 c3 5b 6a 00 00    	add    ebx,0x6a5b
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
    uint32_t lastPopulated = 0;
9f0006e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29
    
    for (int cnt=0;cnt<100;cnt++)
9f0006ee:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f0006f5:	e9 d5 00 00 00       	jmp    9f0007cf <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
        if (processEnvp[cnt]!=0)
9f0006fa:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000700:	8b 00                	mov    eax,DWORD PTR [eax]
9f000702:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000705:	c1 e2 02             	shl    edx,0x2
9f000708:	01 d0                	add    eax,edx
9f00070a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00070c:	85 c0                	test   eax,eax
9f00070e:	0f 84 b7 00 00 00    	je     9f0007cb <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000714:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00071a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00071c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00071f:	c1 e2 02             	shl    edx,0x2
9f000722:	01 d0                	add    eax,edx
9f000724:	8b 00                	mov    eax,DWORD PTR [eax]
9f000726:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000729:	83 ec 0c             	sub    esp,0xc
9f00072c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00072f:	e8 c4 2b 00 00       	call   9f0032f8 <strlenI>
9f000734:	83 c4 10             	add    esp,0x10
9f000737:	89 c1                	mov    ecx,eax
9f000739:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00073f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000741:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000744:	c1 e2 02             	shl    edx,0x2
9f000747:	01 d0                	add    eax,edx
9f000749:	8b 00                	mov    eax,DWORD PTR [eax]
9f00074b:	83 ec 04             	sub    esp,0x4
9f00074e:	51                   	push   ecx
9f00074f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000752:	50                   	push   eax
9f000753:	e8 ab 2c 00 00       	call   9f003403 <strncmpI>
9f000758:	83 c4 10             	add    esp,0x10
9f00075b:	85 c0                	test   eax,eax
9f00075d:	75 6c                	jne    9f0007cb <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:35
            {
                strcpyI(processEnvp[cnt],varname);
9f00075f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00076a:	c1 e2 02             	shl    edx,0x2
9f00076d:	01 d0                	add    eax,edx
9f00076f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000771:	83 ec 08             	sub    esp,0x8
9f000774:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000777:	50                   	push   eax
9f000778:	e8 67 2a 00 00       	call   9f0031e4 <strcpyI>
9f00077d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
9f000780:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000786:	8b 00                	mov    eax,DWORD PTR [eax]
9f000788:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00078b:	c1 e2 02             	shl    edx,0x2
9f00078e:	01 d0                	add    eax,edx
9f000790:	8b 00                	mov    eax,DWORD PTR [eax]
9f000792:	83 ec 08             	sub    esp,0x8
9f000795:	8d 93 d2 f7 ff ff    	lea    edx,[ebx-0x82e]
9f00079b:	52                   	push   edx
9f00079c:	50                   	push   eax
9f00079d:	e8 b0 28 00 00       	call   9f003052 <strcatI>
9f0007a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
                strcatI(processEnvp[cnt],value);
9f0007a5:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007ab:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ad:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007b0:	c1 e2 02             	shl    edx,0x2
9f0007b3:	01 d0                	add    eax,edx
9f0007b5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007b7:	83 ec 08             	sub    esp,0x8
9f0007ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007bd:	50                   	push   eax
9f0007be:	e8 8f 28 00 00       	call   9f003052 <strcatI>
9f0007c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
                return;
9f0007c6:	e9 c6 00 00 00       	jmp    9f000891 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f0007cb:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 1)
9f0007cf:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f0007d3:	0f 8e 21 ff ff ff    	jle    9f0006fa <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007d9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0007e0:	e9 a2 00 00 00       	jmp    9f000887 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
        if (processEnvp[cnt]==0)
9f0007e5:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007eb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ed:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0007f0:	c1 e2 02             	shl    edx,0x2
9f0007f3:	01 d0                	add    eax,edx
9f0007f5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007f7:	85 c0                	test   eax,eax
9f0007f9:	0f 85 84 00 00 00    	jne    9f000883 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f0007ff:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000805:	8b 00                	mov    eax,DWORD PTR [eax]
9f000807:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00080a:	c1 e2 02             	shl    edx,0x2
9f00080d:	01 d0                	add    eax,edx
9f00080f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000812:	81 c2 00 02 00 00    	add    edx,0x200
9f000818:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:45
            strcpyI(processEnvp[cnt],varname);
9f00081a:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000820:	8b 00                	mov    eax,DWORD PTR [eax]
9f000822:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000825:	c1 e2 02             	shl    edx,0x2
9f000828:	01 d0                	add    eax,edx
9f00082a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00082c:	83 ec 08             	sub    esp,0x8
9f00082f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000832:	50                   	push   eax
9f000833:	e8 ac 29 00 00       	call   9f0031e4 <strcpyI>
9f000838:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
            strcatI(processEnvp[cnt],"=");
9f00083b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000841:	8b 00                	mov    eax,DWORD PTR [eax]
9f000843:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000846:	c1 e2 02             	shl    edx,0x2
9f000849:	01 d0                	add    eax,edx
9f00084b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00084d:	83 ec 08             	sub    esp,0x8
9f000850:	8d 93 d2 f7 ff ff    	lea    edx,[ebx-0x82e]
9f000856:	52                   	push   edx
9f000857:	50                   	push   eax
9f000858:	e8 f5 27 00 00       	call   9f003052 <strcatI>
9f00085d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
9f000860:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000866:	8b 00                	mov    eax,DWORD PTR [eax]
9f000868:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00086b:	c1 e2 02             	shl    edx,0x2
9f00086e:	01 d0                	add    eax,edx
9f000870:	8b 00                	mov    eax,DWORD PTR [eax]
9f000872:	83 ec 08             	sub    esp,0x8
9f000875:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000878:	50                   	push   eax
9f000879:	e8 d4 27 00 00       	call   9f003052 <strcatI>
9f00087e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:48
            return;
9f000881:	eb 0e                	jmp    9f000891 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000883:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 1)
9f000887:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f00088b:	0f 8e 54 ff ff ff    	jle    9f0007e5 <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:52
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f000891:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000894:	c9                   	leave  
9f000895:	c3                   	ret    

9f000896 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55

char* getcwdI(char* buf, size_t size)
{
9f000896:	55                   	push   ebp
9f000897:	89 e5                	mov    ebp,esp
9f000899:	53                   	push   ebx
9f00089a:	83 ec 04             	sub    esp,0x4
9f00089d:	e8 f0 3f 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0008a2:	05 9a 68 00 00       	add    eax,0x689a
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:56
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0008a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008aa:	83 ec 04             	sub    esp,0x4
9f0008ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008b0:	52                   	push   edx
9f0008b1:	6a 4f                	push   0x4f
9f0008b3:	89 c3                	mov    ebx,eax
9f0008b5:	e8 04 0a 00 00       	call   9f0012be <do_syscall2>
9f0008ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58
    
}
9f0008bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008c0:	c9                   	leave  
9f0008c1:	c3                   	ret    

9f0008c2 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61

VISIBLE char* getcwd(char* buf, size_t size)
{
9f0008c2:	55                   	push   ebp
9f0008c3:	89 e5                	mov    ebp,esp
9f0008c5:	83 ec 08             	sub    esp,0x8
9f0008c8:	e8 c5 3f 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0008cd:	05 6f 68 00 00       	add    eax,0x686f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
    return getcwdI(buf,size);
9f0008d2:	83 ec 08             	sub    esp,0x8
9f0008d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008db:	e8 b6 ff ff ff       	call   9f000896 <getcwdI>
9f0008e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:63
}
9f0008e3:	c9                   	leave  
9f0008e4:	c3                   	ret    
9f0008e5:	66 90                	xchg   ax,ax
9f0008e7:	90                   	nop

9f0008e8 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f0008e8:	55                   	push   ebp
9f0008e9:	89 e5                	mov    ebp,esp
9f0008eb:	53                   	push   ebx
9f0008ec:	83 ec 04             	sub    esp,0x4
9f0008ef:	e8 9e 3f 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0008f4:	05 48 68 00 00       	add    eax,0x6848
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f0008f9:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0008fc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0008ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000902:	53                   	push   ebx
9f000903:	51                   	push   ecx
9f000904:	52                   	push   edx
9f000905:	68 04 03 00 00       	push   0x304
9f00090a:	89 c3                	mov    ebx,eax
9f00090c:	e8 71 09 00 00       	call   9f001282 <do_syscall3>
9f000911:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
9f000914:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000917:	c9                   	leave  
9f000918:	c3                   	ret    

9f000919 <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE void* open(char* path, const char* mode)
{
9f000919:	55                   	push   ebp
9f00091a:	89 e5                	mov    ebp,esp
9f00091c:	53                   	push   ebx
9f00091d:	83 ec 04             	sub    esp,0x4
9f000920:	e8 6d 3f 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000925:	05 17 68 00 00       	add    eax,0x6817
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f00092a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00092d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000930:	6a ff                	push   0xffffffff
9f000932:	51                   	push   ecx
9f000933:	52                   	push   edx
9f000934:	6a 02                	push   0x2
9f000936:	89 c3                	mov    ebx,eax
9f000938:	e8 45 09 00 00       	call   9f001282 <do_syscall3>
9f00093d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:23
}
9f000940:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000943:	c9                   	leave  
9f000944:	c3                   	ret    

9f000945 <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26

void file_cleanup()
{
9f000945:	55                   	push   ebp
9f000946:	89 e5                	mov    ebp,esp
9f000948:	53                   	push   ebx
9f000949:	83 ec 04             	sub    esp,0x4
9f00094c:	e8 7f 3f 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f000951:	81 c3 eb 67 00 00    	add    ebx,0x67eb
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    while (filesToClose)
9f000957:	eb 1f                	jmp    9f000978 <file_cleanup+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:28
        close(filesToClose++);
9f000959:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00095f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000961:	8d 48 04             	lea    ecx,[eax+0x4]
9f000964:	8b 93 d8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x28]
9f00096a:	89 0a                	mov    DWORD PTR [edx],ecx
9f00096c:	83 ec 0c             	sub    esp,0xc
9f00096f:	50                   	push   eax
9f000970:	e8 4b 3f 00 00       	call   9f0048c0 <__x86.get_pc_thunk.ax+0x2e>
9f000975:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
}

void file_cleanup()
{
    while (filesToClose)
9f000978:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00097e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000980:	85 c0                	test   eax,eax
9f000982:	75 d5                	jne    9f000959 <file_cleanup+0x14>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29
        close(filesToClose++);
    freeI(filesToClose);
9f000984:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f00098a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00098c:	83 ec 0c             	sub    esp,0xc
9f00098f:	50                   	push   eax
9f000990:	e8 c2 16 00 00       	call   9f002057 <freeI>
9f000995:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:30
}
9f000998:	90                   	nop
9f000999:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00099c:	c9                   	leave  
9f00099d:	c3                   	ret    

9f00099e <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f00099e:	55                   	push   ebp
9f00099f:	89 e5                	mov    ebp,esp
9f0009a1:	56                   	push   esi
9f0009a2:	53                   	push   ebx
9f0009a3:	83 ec 10             	sub    esp,0x10
9f0009a6:	e8 25 3f 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0009ab:	81 c3 91 67 00 00    	add    ebx,0x6791
/home/yogi/src/os/aproj/libChrisOS/src/file.c:34
    void *retVal=0;
9f0009b1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f0009b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0009bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0009be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0009c1:	51                   	push   ecx
9f0009c2:	52                   	push   edx
9f0009c3:	50                   	push   eax
9f0009c4:	6a 02                	push   0x2
9f0009c6:	e8 b7 08 00 00       	call   9f001282 <do_syscall3>
9f0009cb:	83 c4 10             	add    esp,0x10
9f0009ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    if (retVal==NULL)
9f0009d1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0009d5:	75 07                	jne    9f0009de <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
        return (void*)-1;
9f0009d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0009dc:	eb 4c                	jmp    9f000a2a <freopen+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:38
    if (filesToClose==NULL)
9f0009de:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009e4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009e6:	85 c0                	test   eax,eax
9f0009e8:	75 17                	jne    9f000a01 <freopen+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f0009ea:	83 ec 0c             	sub    esp,0xc
9f0009ed:	6a 64                	push   0x64
9f0009ef:	e8 9b 17 00 00       	call   9f00218f <mallocI>
9f0009f4:	83 c4 10             	add    esp,0x10
9f0009f7:	89 c2                	mov    edx,eax
9f0009f9:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009ff:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000a01:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a07:	8b 30                	mov    esi,DWORD PTR [eax]
9f000a09:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f000a0f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a11:	8d 48 01             	lea    ecx,[eax+0x1]
9f000a14:	8b 93 d0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x30]
9f000a1a:	89 0a                	mov    DWORD PTR [edx],ecx
9f000a1c:	c1 e0 02             	shl    eax,0x2
9f000a1f:	8d 14 06             	lea    edx,[esi+eax*1]
9f000a22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a25:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
    return retVal;
9f000a27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f000a2a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a2d:	5b                   	pop    ebx
9f000a2e:	5e                   	pop    esi
9f000a2f:	5d                   	pop    ebp
9f000a30:	c3                   	ret    

9f000a31 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void close(void* handle)
{
9f000a31:	55                   	push   ebp
9f000a32:	89 e5                	mov    ebp,esp
9f000a34:	53                   	push   ebx
9f000a35:	83 ec 04             	sub    esp,0x4
9f000a38:	e8 55 3e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000a3d:	05 ff 66 00 00       	add    eax,0x66ff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000a42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a45:	83 ec 08             	sub    esp,0x8
9f000a48:	52                   	push   edx
9f000a49:	6a 03                	push   0x3
9f000a4b:	89 c3                	mov    ebx,eax
9f000a4d:	e8 aa 08 00 00       	call   9f0012fc <do_syscall1>
9f000a52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
}
9f000a55:	90                   	nop
9f000a56:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a59:	c9                   	leave  
9f000a5a:	c3                   	ret    

9f000a5b <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52

int readI(void* handle, void *buffer, int size, int length)
{
9f000a5b:	55                   	push   ebp
9f000a5c:	89 e5                	mov    ebp,esp
9f000a5e:	56                   	push   esi
9f000a5f:	53                   	push   ebx
9f000a60:	e8 2d 3e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000a65:	05 d7 66 00 00       	add    eax,0x66d7
/home/yogi/src/os/aproj/libChrisOS/src/file.c:53
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000a6a:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000a6d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000a70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000a73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000a76:	83 ec 0c             	sub    esp,0xc
9f000a79:	56                   	push   esi
9f000a7a:	53                   	push   ebx
9f000a7b:	51                   	push   ecx
9f000a7c:	52                   	push   edx
9f000a7d:	6a 04                	push   0x4
9f000a7f:	89 c3                	mov    ebx,eax
9f000a81:	e8 c2 07 00 00       	call   9f001248 <do_syscall4>
9f000a86:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
}
9f000a89:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a8c:	5b                   	pop    ebx
9f000a8d:	5e                   	pop    esi
9f000a8e:	5d                   	pop    ebp
9f000a8f:	c3                   	ret    

9f000a90 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000a90:	55                   	push   ebp
9f000a91:	89 e5                	mov    ebp,esp
9f000a93:	83 ec 08             	sub    esp,0x8
9f000a96:	e8 f7 3d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000a9b:	05 a1 66 00 00       	add    eax,0x66a1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
    return readI(handle, buffer, size, length);
9f000aa0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000aa3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000aa6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000aa9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000aac:	e8 aa ff ff ff       	call   9f000a5b <readI>
9f000ab1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:59
}
9f000ab4:	c9                   	leave  
9f000ab5:	c3                   	ret    

9f000ab6 <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62

int writeI(void* handle, void *buffer, int size, int length)
{
9f000ab6:	55                   	push   ebp
9f000ab7:	89 e5                	mov    ebp,esp
9f000ab9:	56                   	push   esi
9f000aba:	53                   	push   ebx
9f000abb:	e8 d2 3d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000ac0:	05 7c 66 00 00       	add    eax,0x667c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000ac5:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000ac8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000acb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000ace:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ad1:	83 ec 0c             	sub    esp,0xc
9f000ad4:	56                   	push   esi
9f000ad5:	53                   	push   ebx
9f000ad6:	51                   	push   ecx
9f000ad7:	52                   	push   edx
9f000ad8:	6a 05                	push   0x5
9f000ada:	89 c3                	mov    ebx,eax
9f000adc:	e8 67 07 00 00       	call   9f001248 <do_syscall4>
9f000ae1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:64
}
9f000ae4:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000ae7:	5b                   	pop    ebx
9f000ae8:	5e                   	pop    esi
9f000ae9:	5d                   	pop    ebp
9f000aea:	c3                   	ret    

9f000aeb <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000aeb:	55                   	push   ebp
9f000aec:	89 e5                	mov    ebp,esp
9f000aee:	83 ec 08             	sub    esp,0x8
9f000af1:	e8 9c 3d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000af6:	05 46 66 00 00       	add    eax,0x6646
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
    return writeI(handle, buffer, size, length);
9f000afb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000afe:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b07:	e8 aa ff ff ff       	call   9f000ab6 <writeI>
9f000b0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:69
}
9f000b0f:	c9                   	leave  
9f000b10:	c3                   	ret    

9f000b11 <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72

int seekI(void* handle, long position, int whence)
{
9f000b11:	55                   	push   ebp
9f000b12:	89 e5                	mov    ebp,esp
9f000b14:	53                   	push   ebx
9f000b15:	83 ec 04             	sub    esp,0x4
9f000b18:	e8 75 3d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000b1d:	05 1f 66 00 00       	add    eax,0x661f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000b22:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000b25:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b28:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b2b:	53                   	push   ebx
9f000b2c:	51                   	push   ecx
9f000b2d:	52                   	push   edx
9f000b2e:	6a 0b                	push   0xb
9f000b30:	89 c3                	mov    ebx,eax
9f000b32:	e8 4b 07 00 00       	call   9f001282 <do_syscall3>
9f000b37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:74
}
9f000b3a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b3d:	c9                   	leave  
9f000b3e:	c3                   	ret    

9f000b3f <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77

VISIBLE int seek(void* handle, long position, int whence)
{
9f000b3f:	55                   	push   ebp
9f000b40:	89 e5                	mov    ebp,esp
9f000b42:	83 ec 08             	sub    esp,0x8
9f000b45:	e8 48 3d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000b4a:	05 f2 65 00 00       	add    eax,0x65f2
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
    return seekI(handle, position, whence);
9f000b4f:	83 ec 04             	sub    esp,0x4
9f000b52:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b5b:	e8 b1 ff ff ff       	call   9f000b11 <seekI>
9f000b60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:79
}
9f000b63:	c9                   	leave  
9f000b64:	c3                   	ret    

9f000b65 <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
int statI(char *path, fstat_t *stat)
{
9f000b65:	55                   	push   ebp
9f000b66:	89 e5                	mov    ebp,esp
9f000b68:	53                   	push   ebx
9f000b69:	83 ec 04             	sub    esp,0x4
9f000b6c:	e8 21 3d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000b71:	05 cb 65 00 00       	add    eax,0x65cb
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000b76:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b79:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b7c:	83 ec 04             	sub    esp,0x4
9f000b7f:	51                   	push   ecx
9f000b80:	52                   	push   edx
9f000b81:	6a 0a                	push   0xa
9f000b83:	89 c3                	mov    ebx,eax
9f000b85:	e8 34 07 00 00       	call   9f0012be <do_syscall2>
9f000b8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:83
}
9f000b8d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b90:	c9                   	leave  
9f000b91:	c3                   	ret    

9f000b92 <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000b92:	55                   	push   ebp
9f000b93:	89 e5                	mov    ebp,esp
9f000b95:	83 ec 08             	sub    esp,0x8
9f000b98:	e8 f5 3c 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000b9d:	05 9f 65 00 00       	add    eax,0x659f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
    return statI(path, stat);
9f000ba2:	83 ec 08             	sub    esp,0x8
9f000ba5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ba8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000bab:	e8 b5 ff ff ff       	call   9f000b65 <statI>
9f000bb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:88
}
9f000bb3:	c9                   	leave  
9f000bb4:	c3                   	ret    

9f000bb5 <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91

VISIBLE int resolvePath(const char *inPath, char *outPath)
{
9f000bb5:	55                   	push   ebp
9f000bb6:	89 e5                	mov    ebp,esp
9f000bb8:	53                   	push   ebx
9f000bb9:	83 ec 24             	sub    esp,0x24
9f000bbc:	e8 0f 3d 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f000bc1:	81 c3 7b 65 00 00    	add    ebx,0x657b
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
    char delim[2]=":";
9f000bc7:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:94
    char *token;
    int retVal=-1;
9f000bcd:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000bd4:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000bda:	8b 00                	mov    eax,DWORD PTR [eax]
9f000bdc:	85 c0                	test   eax,eax
9f000bde:	75 1a                	jne    9f000bfa <resolvePath+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:98
        resolvePath_envPath=mallocI(1024);
9f000be0:	83 ec 0c             	sub    esp,0xc
9f000be3:	68 00 04 00 00       	push   0x400
9f000be8:	e8 a2 15 00 00       	call   9f00218f <mallocI>
9f000bed:	83 c4 10             	add    esp,0x10
9f000bf0:	89 c2                	mov    edx,eax
9f000bf2:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000bf8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
    if (!resolvePath_cwd)
9f000bfa:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c00:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c02:	85 c0                	test   eax,eax
9f000c04:	75 1a                	jne    9f000c20 <resolvePath+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
        resolvePath_cwd=mallocI(1024);
9f000c06:	83 ec 0c             	sub    esp,0xc
9f000c09:	68 00 04 00 00       	push   0x400
9f000c0e:	e8 7c 15 00 00       	call   9f00218f <mallocI>
9f000c13:	83 c4 10             	add    esp,0x10
9f000c16:	89 c2                	mov    edx,eax
9f000c18:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c1e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
    if (!resolvePath_inPath)
9f000c20:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c26:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c28:	85 c0                	test   eax,eax
9f000c2a:	75 1a                	jne    9f000c46 <resolvePath+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:102
            resolvePath_inPath=mallocI(1024);
9f000c2c:	83 ec 0c             	sub    esp,0xc
9f000c2f:	68 00 04 00 00       	push   0x400
9f000c34:	e8 56 15 00 00       	call   9f00218f <mallocI>
9f000c39:	83 c4 10             	add    esp,0x10
9f000c3c:	89 c2                	mov    edx,eax
9f000c3e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000c44:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:103
    if (!resolvePath_resPath)
9f000c46:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000c4c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c4e:	85 c0                	test   eax,eax
9f000c50:	75 1a                	jne    9f000c6c <resolvePath+0xb7>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104
        resolvePath_resPath=mallocI(1024);
9f000c52:	83 ec 0c             	sub    esp,0xc
9f000c55:	68 00 04 00 00       	push   0x400
9f000c5a:	e8 30 15 00 00       	call   9f00218f <mallocI>
9f000c5f:	83 c4 10             	add    esp,0x10
9f000c62:	89 c2                	mov    edx,eax
9f000c64:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000c6a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    getenvI("PATH",resolvePath_envPath);
9f000c6c:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000c72:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c74:	83 ec 08             	sub    esp,0x8
9f000c77:	50                   	push   eax
9f000c78:	8d 83 d4 f7 ff ff    	lea    eax,[ebx-0x82c]
9f000c7e:	50                   	push   eax
9f000c7f:	e8 84 f9 ff ff       	call   9f000608 <getenvI>
9f000c84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:111

    getcwdI(resolvePath_cwd,1024);
9f000c87:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c8d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c8f:	83 ec 08             	sub    esp,0x8
9f000c92:	68 00 04 00 00       	push   0x400
9f000c97:	50                   	push   eax
9f000c98:	e8 f9 fb ff ff       	call   9f000896 <getcwdI>
9f000c9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:113
    
    if (strstrI(inPath, "/"))
9f000ca0:	83 ec 08             	sub    esp,0x8
9f000ca3:	8d 83 d9 f7 ff ff    	lea    eax,[ebx-0x827]
9f000ca9:	50                   	push   eax
9f000caa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cad:	e8 44 2e 00 00       	call   9f003af6 <strstrI>
9f000cb2:	83 c4 10             	add    esp,0x10
9f000cb5:	85 c0                	test   eax,eax
9f000cb7:	74 53                	je     9f000d0c <resolvePath+0x157>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    {
        if (*inPath!='/')
9f000cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000cbc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000cbf:	3c 2f                	cmp    al,0x2f
9f000cc1:	74 2c                	je     9f000cef <resolvePath+0x13a>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
        {
            strcpyI(outPath,resolvePath_cwd);
9f000cc3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000cc9:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ccb:	83 ec 08             	sub    esp,0x8
9f000cce:	50                   	push   eax
9f000ccf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000cd2:	e8 0d 25 00 00       	call   9f0031e4 <strcpyI>
9f000cd7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
            strcatI(outPath,"/");
9f000cda:	83 ec 08             	sub    esp,0x8
9f000cdd:	8d 83 d9 f7 ff ff    	lea    eax,[ebx-0x827]
9f000ce3:	50                   	push   eax
9f000ce4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ce7:	e8 66 23 00 00       	call   9f003052 <strcatI>
9f000cec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
        }
        strcatI(outPath,inPath);
9f000cef:	83 ec 08             	sub    esp,0x8
9f000cf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000cf8:	e8 55 23 00 00       	call   9f003052 <strcatI>
9f000cfd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
        retVal=0;
9f000d00:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000d07:	e9 96 01 00 00       	jmp    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:125
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000d0c:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000d12:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d14:	83 ec 08             	sub    esp,0x8
9f000d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d1a:	50                   	push   eax
9f000d1b:	e8 c4 24 00 00       	call   9f0031e4 <strcpyI>
9f000d20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:126
        token=strtokI(resolvePath_envPath,delim);
9f000d23:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000d29:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d2b:	83 ec 08             	sub    esp,0x8
9f000d2e:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000d31:	52                   	push   edx
9f000d32:	50                   	push   eax
9f000d33:	e8 e4 f3 ff ff       	call   9f00011c <strtokI>
9f000d38:	83 c4 10             	add    esp,0x10
9f000d3b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127
        while (token!=NULL)
9f000d3e:	e9 bd 00 00 00       	jmp    9f000e00 <resolvePath+0x24b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:129
        {
            strcpyI(resolvePath_resPath,token);
9f000d43:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d49:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d4b:	83 ec 08             	sub    esp,0x8
9f000d4e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000d51:	50                   	push   eax
9f000d52:	e8 8d 24 00 00       	call   9f0031e4 <strcpyI>
9f000d57:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000d5a:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d60:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d62:	83 ec 08             	sub    esp,0x8
9f000d65:	8d 93 d9 f7 ff ff    	lea    edx,[ebx-0x827]
9f000d6b:	52                   	push   edx
9f000d6c:	50                   	push   eax
9f000d6d:	e8 b6 23 00 00       	call   9f003128 <strcmpI>
9f000d72:	83 c4 10             	add    esp,0x10
9f000d75:	85 c0                	test   eax,eax
9f000d77:	74 1b                	je     9f000d94 <resolvePath+0x1df>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:131
                strcatI(resolvePath_resPath,"/");
9f000d79:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d7f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d81:	83 ec 08             	sub    esp,0x8
9f000d84:	8d 93 d9 f7 ff ff    	lea    edx,[ebx-0x827]
9f000d8a:	52                   	push   edx
9f000d8b:	50                   	push   eax
9f000d8c:	e8 c1 22 00 00       	call   9f003052 <strcatI>
9f000d91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132
            strcatI(resolvePath_resPath,inPath);
9f000d94:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000d9a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d9c:	83 ec 08             	sub    esp,0x8
9f000d9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000da2:	50                   	push   eax
9f000da3:	e8 aa 22 00 00       	call   9f003052 <strcatI>
9f000da8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:133
            int res=statI(resolvePath_resPath,&fstat);
9f000dab:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000db1:	8b 00                	mov    eax,DWORD PTR [eax]
9f000db3:	83 ec 08             	sub    esp,0x8
9f000db6:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000db9:	52                   	push   edx
9f000dba:	50                   	push   eax
9f000dbb:	e8 a5 fd ff ff       	call   9f000b65 <statI>
9f000dc0:	83 c4 10             	add    esp,0x10
9f000dc3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
            if (res==0)
9f000dc6:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000dca:	75 20                	jne    9f000dec <resolvePath+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
            {
                strcpyI(outPath,resolvePath_resPath);
9f000dcc:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000dd2:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dd4:	83 ec 08             	sub    esp,0x8
9f000dd7:	50                   	push   eax
9f000dd8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000ddb:	e8 04 24 00 00       	call   9f0031e4 <strcpyI>
9f000de0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:137
                retVal=0;
9f000de3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
                break;
9f000dea:	eb 1e                	jmp    9f000e0a <resolvePath+0x255>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:140
            }
            token=strtokI(NULL,delim);
9f000dec:	83 ec 08             	sub    esp,0x8
9f000def:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f000df2:	50                   	push   eax
9f000df3:	6a 00                	push   0x0
9f000df5:	e8 22 f3 ff ff       	call   9f00011c <strtokI>
9f000dfa:	83 c4 10             	add    esp,0x10
9f000dfd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
        token=strtokI(resolvePath_envPath,delim);
        while (token!=NULL)
9f000e00:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000e04:	0f 85 39 ff ff ff    	jne    9f000d43 <resolvePath+0x18e>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:143
                break;
            }
            token=strtokI(NULL,delim);
        }

        if (retVal==-1)
9f000e0a:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f000e0e:	0f 85 8e 00 00 00    	jne    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:145
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f000e14:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000e1a:	8b 10                	mov    edx,DWORD PTR [eax]
9f000e1c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e22:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e24:	83 ec 08             	sub    esp,0x8
9f000e27:	52                   	push   edx
9f000e28:	50                   	push   eax
9f000e29:	e8 b6 23 00 00       	call   9f0031e4 <strcpyI>
9f000e2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
            strcatI(resolvePath_resPath,"/");
9f000e31:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e37:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e39:	83 ec 08             	sub    esp,0x8
9f000e3c:	8d 93 d9 f7 ff ff    	lea    edx,[ebx-0x827]
9f000e42:	52                   	push   edx
9f000e43:	50                   	push   eax
9f000e44:	e8 09 22 00 00       	call   9f003052 <strcatI>
9f000e49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
            strcatI(resolvePath_resPath,inPath);
9f000e4c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e52:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e54:	83 ec 08             	sub    esp,0x8
9f000e57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e5a:	50                   	push   eax
9f000e5b:	e8 f2 21 00 00       	call   9f003052 <strcatI>
9f000e60:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            int res=statI(resolvePath_resPath,&fstat);
9f000e63:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e69:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e6b:	83 ec 08             	sub    esp,0x8
9f000e6e:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000e71:	52                   	push   edx
9f000e72:	50                   	push   eax
9f000e73:	e8 ed fc ff ff       	call   9f000b65 <statI>
9f000e78:	83 c4 10             	add    esp,0x10
9f000e7b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:149
            if (res==0)
9f000e7e:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f000e82:	75 1e                	jne    9f000ea2 <resolvePath+0x2ed>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
            {
                strcpyI(outPath,resolvePath_resPath);
9f000e84:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e8a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e8c:	83 ec 08             	sub    esp,0x8
9f000e8f:	50                   	push   eax
9f000e90:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000e93:	e8 4c 23 00 00       	call   9f0031e4 <strcpyI>
9f000e98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:152
                retVal=0;
9f000e9b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            }
        }
    }
    
    return retVal;
9f000ea2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
}
9f000ea5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ea8:	c9                   	leave  
9f000ea9:	c3                   	ret    

9f000eaa <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161

long tellI(void *stream)
{
9f000eaa:	55                   	push   ebp
9f000eab:	89 e5                	mov    ebp,esp
9f000ead:	53                   	push   ebx
9f000eae:	83 ec 04             	sub    esp,0x4
9f000eb1:	e8 dc 39 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000eb6:	05 86 62 00 00       	add    eax,0x6286
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f000ebb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000ebe:	83 ec 08             	sub    esp,0x8
9f000ec1:	52                   	push   edx
9f000ec2:	6a 0c                	push   0xc
9f000ec4:	89 c3                	mov    ebx,eax
9f000ec6:	e8 31 04 00 00       	call   9f0012fc <do_syscall1>
9f000ecb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:163
}
9f000ece:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000ed1:	c9                   	leave  
9f000ed2:	c3                   	ret    

9f000ed3 <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:166

VISIBLE long tell(void *stream)
{
9f000ed3:	55                   	push   ebp
9f000ed4:	89 e5                	mov    ebp,esp
9f000ed6:	83 ec 08             	sub    esp,0x8
9f000ed9:	e8 b4 39 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f000ede:	05 5e 62 00 00       	add    eax,0x625e
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
    return tellI(stream);
9f000ee3:	83 ec 0c             	sub    esp,0xc
9f000ee6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ee9:	e8 bc ff ff ff       	call   9f000eaa <tellI>
9f000eee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:168
}
9f000ef1:	c9                   	leave  
9f000ef2:	c3                   	ret    

9f000ef3 <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f000ef3:	55                   	push   ebp
9f000ef4:	89 e5                	mov    ebp,esp
9f000ef6:	53                   	push   ebx
9f000ef7:	83 ec 24             	sub    esp,0x24
9f000efa:	e8 d1 39 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f000eff:	81 c3 3d 62 00 00    	add    ebx,0x623d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
    char *buffer;
    int bytesReturned=0;
9f000f05:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:174
    size_t bytesParsed=0;
9f000f0c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
    char *crPtr=NULL;
9f000f13:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
    char *lineToOutput=*lineptr;
9f000f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f1d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f1f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:177
    size_t lLinePtrLen=*n;
9f000f22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000f25:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f27:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:178
    int startFilePos=tellI(stream);
9f000f2a:	83 ec 0c             	sub    esp,0xc
9f000f2d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000f30:	e8 75 ff ff ff       	call   9f000eaa <tellI>
9f000f35:	83 c4 10             	add    esp,0x10
9f000f38:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:179
    int retVal=-1;
9f000f3b:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f000f42:	83 ec 0c             	sub    esp,0xc
9f000f45:	68 00 04 00 00       	push   0x400
9f000f4a:	e8 40 12 00 00       	call   9f00218f <mallocI>
9f000f4f:	83 c4 10             	add    esp,0x10
9f000f52:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:183
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f000f55:	e9 22 01 00 00       	jmp    9f00107c <getlineI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185
    {
        if (crPtr==strstrI(buffer,"\n"))
9f000f5a:	83 ec 08             	sub    esp,0x8
9f000f5d:	8d 83 db f7 ff ff    	lea    eax,[ebx-0x825]
9f000f63:	50                   	push   eax
9f000f64:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000f67:	e8 8a 2b 00 00       	call   9f003af6 <strstrI>
9f000f6c:	83 c4 10             	add    esp,0x10
9f000f6f:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f000f72:	0f 85 cf 00 00 00    	jne    9f001047 <getlineI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f000f78:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000f7b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000f7e:	29 c2                	sub    edx,eax
9f000f80:	89 d0                	mov    eax,edx
9f000f82:	89 c2                	mov    edx,eax
9f000f84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000f87:	01 c2                	add    edx,eax
9f000f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000f8c:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f8e:	39 c2                	cmp    edx,eax
9f000f90:	73 1f                	jae    9f000fb1 <getlineI+0xbe>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:188
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f000f92:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000f95:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000f98:	29 c2                	sub    edx,eax
9f000f9a:	89 d0                	mov    eax,edx
9f000f9c:	89 c2                	mov    edx,eax
9f000f9e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000fa1:	83 ec 04             	sub    esp,0x4
9f000fa4:	52                   	push   edx
9f000fa5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000fa8:	50                   	push   eax
9f000fa9:	e8 e2 20 00 00       	call   9f003090 <strncatI>
9f000fae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:189
            if (bytesParsed+(crPtr-buffer)>*n)
9f000fb1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fb4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000fb7:	29 c2                	sub    edx,eax
9f000fb9:	89 d0                	mov    eax,edx
9f000fbb:	89 c2                	mov    edx,eax
9f000fbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000fc0:	01 c2                	add    edx,eax
9f000fc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000fc5:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fc7:	39 c2                	cmp    edx,eax
9f000fc9:	76 21                	jbe    9f000fec <getlineI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f000fcb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fce:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000fd1:	29 c2                	sub    edx,eax
9f000fd3:	89 d0                	mov    eax,edx
9f000fd5:	89 c2                	mov    edx,eax
9f000fd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000fda:	01 c2                	add    edx,eax
9f000fdc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000fdf:	83 ec 08             	sub    esp,0x8
9f000fe2:	52                   	push   edx
9f000fe3:	50                   	push   eax
9f000fe4:	e8 48 14 00 00       	call   9f002431 <reallocI>
9f000fe9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f000fec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f000fef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000ff2:	29 c2                	sub    edx,eax
9f000ff4:	89 d0                	mov    eax,edx
9f000ff6:	89 c2                	mov    edx,eax
9f000ff8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000ffb:	83 ec 04             	sub    esp,0x4
9f000ffe:	52                   	push   edx
9f000fff:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001002:	50                   	push   eax
9f001003:	e8 88 20 00 00       	call   9f003090 <strncatI>
9f001008:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
            bytesParsed+=(crPtr-buffer);
9f00100b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00100e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001011:	29 c2                	sub    edx,eax
9f001013:	89 d0                	mov    eax,edx
9f001015:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:193
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f001018:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f00101b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00101e:	01 d0                	add    eax,edx
9f001020:	83 ec 04             	sub    esp,0x4
9f001023:	6a 00                	push   0x0
9f001025:	50                   	push   eax
9f001026:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001029:	e8 e3 fa ff ff       	call   9f000b11 <seekI>
9f00102e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:194
            *n=lLinePtrLen;
9f001031:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001034:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001037:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195
            lineptr=&lineToOutput;
9f001039:	8d 45 d8             	lea    eax,[ebp-0x28]
9f00103c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:196
            retVal=bytesParsed;
9f00103f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001042:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
            goto getlineReturn;
9f001045:	eb 57                	jmp    9f00109e <getlineI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001047:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00104a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
            bytesParsed+=bytesReturned;
9f00104d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001050:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
            reallocI(lineToOutput,lLinePtrLen);
9f001053:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001056:	83 ec 08             	sub    esp,0x8
9f001059:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00105c:	50                   	push   eax
9f00105d:	e8 cf 13 00 00       	call   9f002431 <reallocI>
9f001062:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:204
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f001065:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001068:	83 ec 04             	sub    esp,0x4
9f00106b:	68 00 04 00 00       	push   0x400
9f001070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001073:	50                   	push   eax
9f001074:	e8 17 20 00 00       	call   9f003090 <strncatI>
9f001079:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:183
    int startFilePos=tellI(stream);
    int retVal=-1;
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f00107c:	6a 01                	push   0x1
9f00107e:	68 00 04 00 00       	push   0x400
9f001083:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001086:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001089:	e8 cd f9 ff ff       	call   9f000a5b <readI>
9f00108e:	83 c4 10             	add    esp,0x10
9f001091:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f001094:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f001098:	0f 8f bc fe ff ff    	jg     9f000f5a <getlineI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
        }
    }

getlineReturn:    
    freeI(buffer);
9f00109e:	83 ec 0c             	sub    esp,0xc
9f0010a1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010a4:	e8 ae 0f 00 00       	call   9f002057 <freeI>
9f0010a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:210
    return retVal;
9f0010ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
}
9f0010af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0010b2:	c9                   	leave  
9f0010b3:	c3                   	ret    

9f0010b4 <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f0010b4:	55                   	push   ebp
9f0010b5:	89 e5                	mov    ebp,esp
9f0010b7:	83 ec 08             	sub    esp,0x8
9f0010ba:	e8 d3 37 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0010bf:	05 7d 60 00 00       	add    eax,0x607d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
    return getlineI(lineptr, n, stream);
9f0010c4:	83 ec 04             	sub    esp,0x4
9f0010c7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0010ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0010cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0010d0:	e8 1e fe ff ff       	call   9f000ef3 <getlineI>
9f0010d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
9f0010d8:	c9                   	leave  
9f0010d9:	c3                   	ret    
9f0010da:	66 90                	xchg   ax,ax

9f0010dc <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f0010dc:	55                   	push   ebp
9f0010dd:	89 e5                	mov    ebp,esp
9f0010df:	53                   	push   ebx
9f0010e0:	e8 ad 37 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0010e5:	05 57 60 00 00       	add    eax,0x6057
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f0010ea:	b8 05 00 00 00       	mov    eax,0x5
9f0010ef:	bb 01 00 00 00       	mov    ebx,0x1
9f0010f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0010f7:	89 d1                	mov    ecx,edx
9f0010f9:	e8 fc ff ff ff       	call   9f0010fa <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f0010fe:	90                   	nop
9f0010ff:	5b                   	pop    ebx
9f001100:	5d                   	pop    ebp
9f001101:	c3                   	ret    

9f001102 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f001102:	55                   	push   ebp
9f001103:	89 e5                	mov    ebp,esp
9f001105:	53                   	push   ebx
9f001106:	83 ec 14             	sub    esp,0x14
9f001109:	e8 84 37 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00110e:	05 2e 60 00 00       	add    eax,0x602e
9f001113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001116:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f001119:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f00111f:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f001123:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f001126:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f00112a:	b8 05 00 00 00       	mov    eax,0x5
9f00112f:	bb 01 00 00 00       	mov    ebx,0x1
9f001134:	8d 55 fa             	lea    edx,[ebp-0x6]
9f001137:	89 d1                	mov    ecx,edx
9f001139:	e8 fc ff ff ff       	call   9f00113a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f00113e:	90                   	nop
9f00113f:	83 c4 14             	add    esp,0x14
9f001142:	5b                   	pop    ebx
9f001143:	5d                   	pop    ebp
9f001144:	c3                   	ret    

9f001145 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f001145:	55                   	push   ebp
9f001146:	89 e5                	mov    ebp,esp
9f001148:	53                   	push   ebx
9f001149:	83 ec 10             	sub    esp,0x10
9f00114c:	e8 41 37 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001151:	05 eb 5f 00 00       	add    eax,0x5feb
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f001156:	b8 04 00 00 00       	mov    eax,0x4
9f00115b:	ba 00 00 00 00       	mov    edx,0x0
9f001160:	89 d3                	mov    ebx,edx
9f001162:	e8 fc ff ff ff       	call   9f001163 <getchar+0x1e>
9f001167:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f00116a:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f00116e:	74 06                	je     9f001176 <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f001170:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f001174:	eb 0c                	jmp    9f001182 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001176:	b8 02 03 00 00       	mov    eax,0x302
9f00117b:	e8 fc ff ff ff       	call   9f00117c <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f001180:	eb d4                	jmp    9f001156 <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f001182:	83 c4 10             	add    esp,0x10
9f001185:	5b                   	pop    ebx
9f001186:	5d                   	pop    ebp
9f001187:	c3                   	ret    

9f001188 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f001188:	55                   	push   ebp
9f001189:	89 e5                	mov    ebp,esp
9f00118b:	53                   	push   ebx
9f00118c:	83 ec 14             	sub    esp,0x14
9f00118f:	e8 fe 36 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001194:	05 a8 5f 00 00       	add    eax,0x5fa8
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f001199:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f0011a0:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f0011a4:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f0011a8:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f0011ab:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0011af:	74 19                	je     9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f0011b1:	83 ec 08             	sub    esp,0x8
9f0011b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0011b7:	8d 90 dd f7 ff ff    	lea    edx,[eax-0x823]
9f0011bd:	52                   	push   edx
9f0011be:	89 c3                	mov    ebx,eax
9f0011c0:	e8 a8 03 00 00       	call   9f00156d <printI>
9f0011c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f0011c8:	eb fe                	jmp    9f0011c8 <gets+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f0011ca:	b8 04 00 00 00       	mov    eax,0x4
9f0011cf:	ba 00 00 00 00       	mov    edx,0x0
9f0011d4:	89 d3                	mov    ebx,edx
9f0011d6:	e8 fc ff ff ff       	call   9f0011d7 <gets+0x4f>
9f0011db:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f0011de:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f0011e2:	75 17                	jne    9f0011fb <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f0011e4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0011e8:	7e 11                	jle    9f0011fb <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f0011ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0011ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011f0:	01 d0                	add    eax,edx
9f0011f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f0011f5:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f0011f9:	eb 43                	jmp    9f00123e <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f0011fb:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f0011ff:	74 33                	je     9f001234 <gets+0xac>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f001201:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f001205:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f001208:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00120b:	8d 50 01             	lea    edx,[eax+0x1]
9f00120e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001211:	89 c2                	mov    edx,eax
9f001213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001216:	01 c2                	add    edx,eax
9f001218:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f00121c:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f00121e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001221:	83 c0 01             	add    eax,0x1
9f001224:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f001227:	7d 06                	jge    9f00122f <gets+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f001229:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f00122d:	75 9b                	jne    9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f00122f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001232:	eb 0c                	jmp    9f001240 <gets+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001234:	b8 02 03 00 00       	mov    eax,0x302
9f001239:	e8 fc ff ff ff       	call   9f00123a <gets+0xb2>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f00123e:	eb 8a                	jmp    9f0011ca <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
}
9f001240:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001243:	c9                   	leave  
9f001244:	c3                   	ret    
9f001245:	66 90                	xchg   ax,ax
9f001247:	90                   	nop

9f001248 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f001248:	55                   	push   ebp
9f001249:	89 e5                	mov    ebp,esp
9f00124b:	56                   	push   esi
9f00124c:	53                   	push   ebx
9f00124d:	83 ec 10             	sub    esp,0x10
9f001250:	e8 3d 36 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001255:	05 e7 5e 00 00       	add    eax,0x5ee7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f00125a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f001261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001264:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001267:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00126a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00126d:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f001270:	e8 fc ff ff ff       	call   9f001271 <do_syscall4+0x29>
9f001275:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f001278:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f00127b:	83 c4 10             	add    esp,0x10
9f00127e:	5b                   	pop    ebx
9f00127f:	5e                   	pop    esi
9f001280:	5d                   	pop    ebp
9f001281:	c3                   	ret    

9f001282 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f001282:	55                   	push   ebp
9f001283:	89 e5                	mov    ebp,esp
9f001285:	56                   	push   esi
9f001286:	53                   	push   ebx
9f001287:	83 ec 10             	sub    esp,0x10
9f00128a:	e8 03 36 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00128f:	05 ad 5e 00 00       	add    eax,0x5ead
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f001294:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f00129b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00129e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0012a1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0012a4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0012a7:	be 00 00 00 00       	mov    esi,0x0
9f0012ac:	e8 fc ff ff ff       	call   9f0012ad <do_syscall3+0x2b>
9f0012b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f0012b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f0012b7:	83 c4 10             	add    esp,0x10
9f0012ba:	5b                   	pop    ebx
9f0012bb:	5e                   	pop    esi
9f0012bc:	5d                   	pop    ebp
9f0012bd:	c3                   	ret    

9f0012be <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f0012be:	55                   	push   ebp
9f0012bf:	89 e5                	mov    ebp,esp
9f0012c1:	56                   	push   esi
9f0012c2:	53                   	push   ebx
9f0012c3:	83 ec 10             	sub    esp,0x10
9f0012c6:	e8 c7 35 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0012cb:	05 71 5e 00 00       	add    eax,0x5e71
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f0012d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f0012d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012da:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0012dd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0012e0:	ba 00 00 00 00       	mov    edx,0x0
9f0012e5:	be 00 00 00 00       	mov    esi,0x0
9f0012ea:	e8 fc ff ff ff       	call   9f0012eb <do_syscall2+0x2d>
9f0012ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f0012f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f0012f5:	83 c4 10             	add    esp,0x10
9f0012f8:	5b                   	pop    ebx
9f0012f9:	5e                   	pop    esi
9f0012fa:	5d                   	pop    ebp
9f0012fb:	c3                   	ret    

9f0012fc <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f0012fc:	55                   	push   ebp
9f0012fd:	89 e5                	mov    ebp,esp
9f0012ff:	56                   	push   esi
9f001300:	53                   	push   ebx
9f001301:	83 ec 10             	sub    esp,0x10
9f001304:	e8 89 35 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001309:	05 33 5e 00 00       	add    eax,0x5e33
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f00130e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f001315:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001318:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00131b:	b9 00 00 00 00       	mov    ecx,0x0
9f001320:	ba 00 00 00 00       	mov    edx,0x0
9f001325:	be 00 00 00 00       	mov    esi,0x0
9f00132a:	e8 fc ff ff ff       	call   9f00132b <do_syscall1+0x2f>
9f00132f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f001332:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001335:	83 c4 10             	add    esp,0x10
9f001338:	5b                   	pop    ebx
9f001339:	5e                   	pop    esi
9f00133a:	5d                   	pop    ebp
9f00133b:	c3                   	ret    

9f00133c <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f00133c:	55                   	push   ebp
9f00133d:	89 e5                	mov    ebp,esp
9f00133f:	56                   	push   esi
9f001340:	53                   	push   ebx
9f001341:	83 ec 10             	sub    esp,0x10
9f001344:	e8 49 35 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001349:	05 f3 5d 00 00       	add    eax,0x5df3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f00134e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f001355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001358:	bb 00 00 00 00       	mov    ebx,0x0
9f00135d:	b9 00 00 00 00       	mov    ecx,0x0
9f001362:	ba 00 00 00 00       	mov    edx,0x0
9f001367:	be 00 00 00 00       	mov    esi,0x0
9f00136c:	e8 fc ff ff ff       	call   9f00136d <do_syscall0+0x31>
9f001371:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f001374:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f001377:	83 c4 10             	add    esp,0x10
9f00137a:	5b                   	pop    ebx
9f00137b:	5e                   	pop    esi
9f00137c:	5d                   	pop    ebp
9f00137d:	c3                   	ret    

9f00137e <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f00137e:	55                   	push   ebp
9f00137f:	89 e5                	mov    ebp,esp
9f001381:	53                   	push   ebx
9f001382:	83 ec 04             	sub    esp,0x4
9f001385:	e8 46 35 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f00138a:	81 c3 b2 5d 00 00    	add    ebx,0x5db2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f001390:	83 ec 08             	sub    esp,0x8
9f001393:	8d 83 f8 f7 ff ff    	lea    eax,[ebx-0x808]
9f001399:	50                   	push   eax
9f00139a:	68 00 00 00 02       	push   0x2000000
9f00139f:	e8 34 02 00 00       	call   9f0015d8 <printdI>
9f0013a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f0013a7:	0f b6 83 58 00 00 00 	movzx  eax,BYTE PTR [ebx+0x58]
9f0013ae:	83 f0 01             	xor    eax,0x1
9f0013b1:	84 c0                	test   al,al
9f0013b3:	74 7c                	je     9f001431 <libc_init+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f0013b5:	e8 aa 0b 00 00       	call   9f001f64 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f0013ba:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f0013c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f0013c6:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f0013c9:	89 c2                	mov    edx,eax
9f0013cb:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0013d1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f0013d3:	83 ec 0c             	sub    esp,0xc
9f0013d6:	6a 00                	push   0x0
9f0013d8:	e8 5f ff ff ff       	call   9f00133c <do_syscall0>
9f0013dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f0013e0:	8d 83 0d a3 ff ff    	lea    eax,[ebx-0x5cf3]
9f0013e6:	83 ec 08             	sub    esp,0x8
9f0013e9:	50                   	push   eax
9f0013ea:	68 63 01 00 00       	push   0x163
9f0013ef:	e8 08 ff ff ff       	call   9f0012fc <do_syscall1>
9f0013f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f0013f7:	c6 83 58 00 00 00 01 	mov    BYTE PTR [ebx+0x58],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f0013fe:	83 ec 0c             	sub    esp,0xc
9f001401:	68 00 10 00 00       	push   0x1000
9f001406:	e8 84 0d 00 00       	call   9f00218f <mallocI>
9f00140b:	83 c4 10             	add    esp,0x10
9f00140e:	89 c2                	mov    edx,eax
9f001410:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f001416:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f001418:	83 ec 08             	sub    esp,0x8
9f00141b:	8d 83 10 f8 ff ff    	lea    eax,[ebx-0x7f0]
9f001421:	50                   	push   eax
9f001422:	68 00 00 00 02       	push   0x2000000
9f001427:	e8 ac 01 00 00       	call   9f0015d8 <printdI>
9f00142c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f00142f:	eb 12                	jmp    9f001443 <libc_init+0xc5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f001431:	83 ec 0c             	sub    esp,0xc
9f001434:	8d 83 28 f8 ff ff    	lea    eax,[ebx-0x7d8]
9f00143a:	50                   	push   eax
9f00143b:	e8 2d 01 00 00       	call   9f00156d <printI>
9f001440:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f001443:	90                   	nop
9f001444:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001447:	c9                   	leave  
9f001448:	c3                   	ret    

9f001449 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f001449:	55                   	push   ebp
9f00144a:	89 e5                	mov    ebp,esp
9f00144c:	53                   	push   ebx
9f00144d:	83 ec 04             	sub    esp,0x4
9f001450:	e8 7b 34 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f001455:	81 c3 e7 5c 00 00    	add    ebx,0x5ce7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f00145b:	e8 e7 10 00 00       	call   9f002547 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f001460:	e8 e0 f4 ff ff       	call   9f000945 <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f001465:	90                   	nop
9f001466:	83 c4 04             	add    esp,0x4
9f001469:	5b                   	pop    ebx
9f00146a:	5d                   	pop    ebp
9f00146b:	c3                   	ret    

9f00146c <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f00146c:	55                   	push   ebp
9f00146d:	89 e5                	mov    ebp,esp
9f00146f:	53                   	push   ebx
9f001470:	83 ec 14             	sub    esp,0x14
9f001473:	e8 58 34 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f001478:	81 c3 c4 5c 00 00    	add    ebx,0x5cc4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f00147e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001481:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f001484:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001487:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00148d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00148f:	83 ec 04             	sub    esp,0x4
9f001492:	52                   	push   edx
9f001493:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001496:	50                   	push   eax
9f001497:	e8 79 16 00 00       	call   9f002b15 <vsprintf>
9f00149c:	83 c4 10             	add    esp,0x10
9f00149f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0014a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014a5:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f0014ab:	8b 12                	mov    edx,DWORD PTR [edx]
9f0014ad:	50                   	push   eax
9f0014ae:	52                   	push   edx
9f0014af:	6a 01                	push   0x1
9f0014b1:	6a 05                	push   0x5
9f0014b3:	e8 ca fd ff ff       	call   9f001282 <do_syscall3>
9f0014b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f0014bb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f0014c0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0014c3:	c9                   	leave  
9f0014c4:	c3                   	ret    

9f0014c5 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f0014c5:	55                   	push   ebp
9f0014c6:	89 e5                	mov    ebp,esp
9f0014c8:	53                   	push   ebx
9f0014c9:	83 ec 14             	sub    esp,0x14
9f0014cc:	e8 ff 33 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0014d1:	81 c3 6b 5c 00 00    	add    ebx,0x5c6b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f0014d7:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0014da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f0014dd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0014e0:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0014e6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0014e8:	83 ec 04             	sub    esp,0x4
9f0014eb:	52                   	push   edx
9f0014ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0014ef:	50                   	push   eax
9f0014f0:	e8 20 16 00 00       	call   9f002b15 <vsprintf>
9f0014f5:	83 c4 10             	add    esp,0x10
9f0014f8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f0014fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014fe:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001504:	8b 12                	mov    edx,DWORD PTR [edx]
9f001506:	50                   	push   eax
9f001507:	52                   	push   edx
9f001508:	6a 01                	push   0x1
9f00150a:	6a 05                	push   0x5
9f00150c:	e8 71 fd ff ff       	call   9f001282 <do_syscall3>
9f001511:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f001514:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001517:	c9                   	leave  
9f001518:	c3                   	ret    

9f001519 <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f001519:	55                   	push   ebp
9f00151a:	89 e5                	mov    ebp,esp
9f00151c:	53                   	push   ebx
9f00151d:	83 ec 14             	sub    esp,0x14
9f001520:	e8 ab 33 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f001525:	81 c3 17 5c 00 00    	add    ebx,0x5c17
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00152b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00152e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f001531:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001534:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00153a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00153c:	83 ec 04             	sub    esp,0x4
9f00153f:	52                   	push   edx
9f001540:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001543:	50                   	push   eax
9f001544:	e8 cc 15 00 00       	call   9f002b15 <vsprintf>
9f001549:	83 c4 10             	add    esp,0x10
9f00154c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f00154f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001552:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001558:	8b 12                	mov    edx,DWORD PTR [edx]
9f00155a:	50                   	push   eax
9f00155b:	52                   	push   edx
9f00155c:	6a 01                	push   0x1
9f00155e:	6a 05                	push   0x5
9f001560:	e8 1d fd ff ff       	call   9f001282 <do_syscall3>
9f001565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f001568:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00156b:	c9                   	leave  
9f00156c:	c3                   	ret    

9f00156d <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f00156d:	55                   	push   ebp
9f00156e:	89 e5                	mov    ebp,esp
9f001570:	83 ec 10             	sub    esp,0x10
9f001573:	e8 1a 33 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001578:	05 c4 5b 00 00       	add    eax,0x5bc4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f00157d:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001580:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f001583:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001586:	89 c2                	mov    edx,eax
9f001588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00158b:	52                   	push   edx
9f00158c:	50                   	push   eax
9f00158d:	68 00 03 00 00       	push   0x300
9f001592:	e8 27 fd ff ff       	call   9f0012be <do_syscall2>
9f001597:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f00159a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f00159f:	c9                   	leave  
9f0015a0:	c3                   	ret    

9f0015a1 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f0015a1:	55                   	push   ebp
9f0015a2:	89 e5                	mov    ebp,esp
9f0015a4:	83 ec 10             	sub    esp,0x10
9f0015a7:	e8 e6 32 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0015ac:	05 90 5b 00 00       	add    eax,0x5b90
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f0015b1:	8d 45 10             	lea    eax,[ebp+0x10]
9f0015b4:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0015b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0015ba:	89 c2                	mov    edx,eax
9f0015bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0015bf:	52                   	push   edx
9f0015c0:	50                   	push   eax
9f0015c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015c4:	68 01 03 00 00       	push   0x301
9f0015c9:	e8 b4 fc ff ff       	call   9f001282 <do_syscall3>
9f0015ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f0015d1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f0015d6:	c9                   	leave  
9f0015d7:	c3                   	ret    

9f0015d8 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f0015d8:	55                   	push   ebp
9f0015d9:	89 e5                	mov    ebp,esp
9f0015db:	83 ec 10             	sub    esp,0x10
9f0015de:	e8 af 32 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0015e3:	05 59 5b 00 00       	add    eax,0x5b59
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f0015e8:	8d 45 10             	lea    eax,[ebp+0x10]
9f0015eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0015ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0015f1:	89 c2                	mov    edx,eax
9f0015f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0015f6:	52                   	push   edx
9f0015f7:	50                   	push   eax
9f0015f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015fb:	68 01 03 00 00       	push   0x301
9f001600:	e8 7d fc ff ff       	call   9f001282 <do_syscall3>
9f001605:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f001608:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f00160d:	c9                   	leave  
9f00160e:	c3                   	ret    

9f00160f <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f00160f:	55                   	push   ebp
9f001610:	89 e5                	mov    ebp,esp
9f001612:	56                   	push   esi
9f001613:	53                   	push   ebx
9f001614:	83 ec 10             	sub    esp,0x10
9f001617:	e8 76 32 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00161c:	05 20 5b 00 00       	add    eax,0x5b20
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    return SLEEP_SECONDS(__seconds);
9f001621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001624:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001627:	b8 70 01 00 00       	mov    eax,0x170
9f00162c:	bb 00 00 00 00       	mov    ebx,0x0
9f001631:	b9 00 00 00 00       	mov    ecx,0x0
9f001636:	ba 00 00 00 00       	mov    edx,0x0
9f00163b:	be 00 00 00 00       	mov    esi,0x0
9f001640:	e8 fc ff ff ff       	call   9f001641 <sleep+0x32>
9f001645:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00164b:	6b d0 64             	imul   edx,eax,0x64
9f00164e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001651:	01 d0                	add    eax,edx
9f001653:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f001656:	b8 66 01 00 00       	mov    eax,0x166
9f00165b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f00165e:	b9 00 00 00 00       	mov    ecx,0x0
9f001663:	ba 00 00 00 00       	mov    edx,0x0
9f001668:	be 00 00 00 00       	mov    esi,0x0
9f00166d:	e8 fc ff ff ff       	call   9f00166e <sleep+0x5f>
9f001672:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
}
9f001678:	83 c4 10             	add    esp,0x10
9f00167b:	5b                   	pop    ebx
9f00167c:	5e                   	pop    esi
9f00167d:	5d                   	pop    ebp
9f00167e:	c3                   	ret    

9f00167f <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140

VISIBLE unsigned int sleepTicks(unsigned int __milliseconds)
{
9f00167f:	55                   	push   ebp
9f001680:	89 e5                	mov    ebp,esp
9f001682:	56                   	push   esi
9f001683:	53                   	push   ebx
9f001684:	83 ec 10             	sub    esp,0x10
9f001687:	e8 06 32 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00168c:	05 b0 5a 00 00       	add    eax,0x5ab0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    return SLEEP_MS(__milliseconds);
9f001691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001694:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001697:	b8 70 01 00 00       	mov    eax,0x170
9f00169c:	bb 00 00 00 00       	mov    ebx,0x0
9f0016a1:	b9 00 00 00 00       	mov    ecx,0x0
9f0016a6:	ba 00 00 00 00       	mov    edx,0x0
9f0016ab:	be 00 00 00 00       	mov    esi,0x0
9f0016b0:	e8 fc ff ff ff       	call   9f0016b1 <sleepTicks+0x32>
9f0016b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0016b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0016bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0016be:	01 d0                	add    eax,edx
9f0016c0:	83 e8 01             	sub    eax,0x1
9f0016c3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0016c6:	b8 66 01 00 00       	mov    eax,0x166
9f0016cb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0016ce:	b9 00 00 00 00       	mov    ecx,0x0
9f0016d3:	ba 00 00 00 00       	mov    edx,0x0
9f0016d8:	be 00 00 00 00       	mov    esi,0x0
9f0016dd:	e8 fc ff ff ff       	call   9f0016de <sleepTicks+0x5f>
9f0016e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0016e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    
}
9f0016e8:	83 c4 10             	add    esp,0x10
9f0016eb:	5b                   	pop    ebx
9f0016ec:	5e                   	pop    esi
9f0016ed:	5d                   	pop    ebp
9f0016ee:	c3                   	ret    

9f0016ef <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

void stop()
{
9f0016ef:	55                   	push   ebp
9f0016f0:	89 e5                	mov    ebp,esp
9f0016f2:	e8 9b 31 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0016f7:	05 45 5a 00 00       	add    eax,0x5a45
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    do_syscall0(SYSCALL_STOP);
9f0016fc:	68 68 01 00 00       	push   0x168
9f001701:	e8 36 fc ff ff       	call   9f00133c <do_syscall0>
9f001706:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
}
9f001709:	90                   	nop
9f00170a:	c9                   	leave  
9f00170b:	c3                   	ret    

9f00170c <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f00170c:	55                   	push   ebp
9f00170d:	89 e5                	mov    ebp,esp
9f00170f:	e8 7e 31 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001714:	05 28 5a 00 00       	add    eax,0x5a28
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f001719:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00171c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00171f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001722:	51                   	push   ecx
9f001723:	52                   	push   edx
9f001724:	50                   	push   eax
9f001725:	68 67 01 00 00       	push   0x167
9f00172a:	e8 53 fb ff ff       	call   9f001282 <do_syscall3>
9f00172f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
}
9f001732:	90                   	nop
9f001733:	c9                   	leave  
9f001734:	c3                   	ret    

9f001735 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:156

VISIBLE int fork()
{
9f001735:	55                   	push   ebp
9f001736:	89 e5                	mov    ebp,esp
9f001738:	83 ec 10             	sub    esp,0x10
9f00173b:	e8 52 31 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001740:	05 fc 59 00 00       	add    eax,0x59fc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
    uint32_t retVal = 0;
9f001745:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f00174c:	b8 0d 00 00 00       	mov    eax,0xd
9f001751:	e8 fc ff ff ff       	call   9f001752 <fork+0x1d>
9f001756:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
    return retVal;
9f001759:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:161
}
9f00175c:	c9                   	leave  
9f00175d:	c3                   	ret    

9f00175e <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164

VISIBLE int exec(char* path, int argc, char** argv)
{
9f00175e:	55                   	push   ebp
9f00175f:	89 e5                	mov    ebp,esp
9f001761:	83 ec 10             	sub    esp,0x10
9f001764:	e8 29 31 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001769:	05 d3 59 00 00       	add    eax,0x59d3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
    int pid=0;
9f00176e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f001775:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001778:	8d 80 4e f8 ff ff    	lea    eax,[eax-0x7b2]
9f00177e:	50                   	push   eax
9f00177f:	68 00 00 00 02       	push   0x2000000
9f001784:	e8 4f fe ff ff       	call   9f0015d8 <printdI>
9f001789:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f00178c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00178f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001795:	51                   	push   ecx
9f001796:	52                   	push   edx
9f001797:	50                   	push   eax
9f001798:	6a 59                	push   0x59
9f00179a:	e8 e3 fa ff ff       	call   9f001282 <do_syscall3>
9f00179f:	83 c4 10             	add    esp,0x10
9f0017a2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    return pid;
9f0017a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169
}
9f0017a8:	c9                   	leave  
9f0017a9:	c3                   	ret    

9f0017aa <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172

VISIBLE int execb(char* path)
{
9f0017aa:	55                   	push   ebp
9f0017ab:	89 e5                	mov    ebp,esp
9f0017ad:	53                   	push   ebx
9f0017ae:	83 ec 24             	sub    esp,0x24
9f0017b1:	e8 1a 31 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0017b6:	81 c3 86 59 00 00    	add    ebx,0x5986
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    int pid=0, argc=0;
9f0017bc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f0017c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f0017ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017cd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0017d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
    char* program;
    program=mallocI(512);
9f0017d6:	83 ec 0c             	sub    esp,0xc
9f0017d9:	68 00 02 00 00       	push   0x200
9f0017de:	e8 ac 09 00 00       	call   9f00218f <mallocI>
9f0017e3:	83 c4 10             	add    esp,0x10
9f0017e6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f0017e9:	83 ec 08             	sub    esp,0x8
9f0017ec:	8d 83 61 f8 ff ff    	lea    eax,[ebx-0x79f]
9f0017f2:	50                   	push   eax
9f0017f3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0017f6:	e8 fb 22 00 00       	call   9f003af6 <strstrI>
9f0017fb:	83 c4 10             	add    esp,0x10
9f0017fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
        if (argc==0)
9f001801:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001805:	75 44                	jne    9f00184b <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:183
        {
            if (spacePtr==0)
9f001807:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00180b:	75 22                	jne    9f00182f <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
                strncpyI(program, path, strlenI(path));
9f00180d:	83 ec 0c             	sub    esp,0xc
9f001810:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001813:	e8 e0 1a 00 00       	call   9f0032f8 <strlenI>
9f001818:	83 c4 10             	add    esp,0x10
9f00181b:	83 ec 04             	sub    esp,0x4
9f00181e:	50                   	push   eax
9f00181f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001822:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001825:	e8 42 1c 00 00       	call   9f00346c <strncpyI>
9f00182a:	83 c4 10             	add    esp,0x10
9f00182d:	eb 1c                	jmp    9f00184b <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
            else
                strncpyI(program, path, spacePtr-path);
9f00182f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001835:	29 c2                	sub    edx,eax
9f001837:	89 d0                	mov    eax,edx
9f001839:	83 ec 04             	sub    esp,0x4
9f00183c:	50                   	push   eax
9f00183d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001840:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001843:	e8 24 1c 00 00       	call   9f00346c <strncpyI>
9f001848:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188
        }
        argc++;
9f00184b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
            
    } while (spacePtr++);
9f00184f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001852:	8d 50 01             	lea    edx,[eax+0x1]
9f001855:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001858:	85 c0                	test   eax,eax
9f00185a:	75 8d                	jne    9f0017e9 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192
    
    argv=mallocI((argc*50)+(argc*4));
9f00185c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00185f:	6b c0 36             	imul   eax,eax,0x36
9f001862:	83 ec 0c             	sub    esp,0xc
9f001865:	50                   	push   eax
9f001866:	e8 24 09 00 00       	call   9f00218f <mallocI>
9f00186b:	83 c4 10             	add    esp,0x10
9f00186e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
    int argvPtr=4*argc;
9f001871:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001874:	c1 e0 02             	shl    eax,0x2
9f001877:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
    spacePtr=path;
9f00187a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00187d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
    for (int cnt=0;cnt<argc; cnt++)
9f001880:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f001887:	e9 c8 00 00 00       	jmp    9f001954 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
    {
        argv[cnt]=(char*)argv+argvPtr;
9f00188c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00188f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001899:	01 d0                	add    eax,edx
9f00189b:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f00189e:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f0018a1:	01 ca                	add    edx,ecx
9f0018a3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:198
        spacePtr=strstrI(spacePtr," ");
9f0018a5:	83 ec 08             	sub    esp,0x8
9f0018a8:	8d 83 61 f8 ff ff    	lea    eax,[ebx-0x79f]
9f0018ae:	50                   	push   eax
9f0018af:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0018b2:	e8 3f 22 00 00       	call   9f003af6 <strstrI>
9f0018b7:	83 c4 10             	add    esp,0x10
9f0018ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199
        if (spacePtr)
9f0018bd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0018c1:	74 2f                	je     9f0018f2 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f0018c3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0018c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0018c9:	29 c2                	sub    edx,eax
9f0018cb:	89 d0                	mov    eax,edx
9f0018cd:	89 c1                	mov    ecx,eax
9f0018cf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0018d2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0018d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0018dc:	01 d0                	add    eax,edx
9f0018de:	8b 00                	mov    eax,DWORD PTR [eax]
9f0018e0:	83 ec 04             	sub    esp,0x4
9f0018e3:	51                   	push   ecx
9f0018e4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0018e7:	50                   	push   eax
9f0018e8:	e8 7f 1b 00 00       	call   9f00346c <strncpyI>
9f0018ed:	83 c4 10             	add    esp,0x10
9f0018f0:	eb 31                	jmp    9f001923 <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f0018f2:	83 ec 0c             	sub    esp,0xc
9f0018f5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0018f8:	e8 fb 19 00 00       	call   9f0032f8 <strlenI>
9f0018fd:	83 c4 10             	add    esp,0x10
9f001900:	89 c2                	mov    edx,eax
9f001902:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001905:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f00190c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00190f:	01 c8                	add    eax,ecx
9f001911:	8b 00                	mov    eax,DWORD PTR [eax]
9f001913:	83 ec 04             	sub    esp,0x4
9f001916:	52                   	push   edx
9f001917:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00191a:	50                   	push   eax
9f00191b:	e8 4c 1b 00 00       	call   9f00346c <strncpyI>
9f001920:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:203 (discriminator 2)
        strtrimI(argv[cnt]);
9f001923:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001926:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00192d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001930:	01 d0                	add    eax,edx
9f001932:	8b 00                	mov    eax,DWORD PTR [eax]
9f001934:	83 ec 0c             	sub    esp,0xc
9f001937:	50                   	push   eax
9f001938:	e8 f7 1e 00 00       	call   9f003834 <strtrimI>
9f00193d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001940:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001943:	8d 50 01             	lea    edx,[eax+0x1]
9f001946:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001949:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205 (discriminator 2)
        argvPtr+=50;
9f00194c:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f001950:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195 (discriminator 1)
9f001954:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001957:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00195a:	0f 8c 2c ff ff ff    	jl     9f00188c <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001960:	83 ec 04             	sub    esp,0x4
9f001963:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001966:	8d 83 63 f8 ff ff    	lea    eax,[ebx-0x79d]
9f00196c:	50                   	push   eax
9f00196d:	68 00 00 00 02       	push   0x2000000
9f001972:	e8 61 fc ff ff       	call   9f0015d8 <printdI>
9f001977:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f00197a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f00197d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001980:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001983:	51                   	push   ecx
9f001984:	52                   	push   edx
9f001985:	50                   	push   eax
9f001986:	68 05 03 00 00       	push   0x305
9f00198b:	e8 f2 f8 ff ff       	call   9f001282 <do_syscall3>
9f001990:	83 c4 10             	add    esp,0x10
9f001993:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001996:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    freeI(argv);
    freeI(program);
}
9f001999:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00199c:	c9                   	leave  
9f00199d:	c3                   	ret    

9f00199e <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:218

VISIBLE int execa(char* path, int argc, char** argv)
{
9f00199e:	55                   	push   ebp
9f00199f:	89 e5                	mov    ebp,esp
9f0019a1:	83 ec 10             	sub    esp,0x10
9f0019a4:	e8 e9 2e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0019a9:	05 93 57 00 00       	add    eax,0x5793
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
    int pid=0;
9f0019ae:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:220
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f0019b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019b8:	8d 80 77 f8 ff ff    	lea    eax,[eax-0x789]
9f0019be:	50                   	push   eax
9f0019bf:	68 00 00 00 02       	push   0x2000000
9f0019c4:	e8 0f fc ff ff       	call   9f0015d8 <printdI>
9f0019c9:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f0019cc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0019cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0019d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019d5:	51                   	push   ecx
9f0019d6:	52                   	push   edx
9f0019d7:	50                   	push   eax
9f0019d8:	68 05 03 00 00       	push   0x305
9f0019dd:	e8 a0 f8 ff ff       	call   9f001282 <do_syscall3>
9f0019e2:	83 c4 10             	add    esp,0x10
9f0019e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    return pid;
9f0019e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:223
}
9f0019eb:	c9                   	leave  
9f0019ec:	c3                   	ret    

9f0019ed <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226

VISIBLE int waitpid(uint32_t pid)
{
9f0019ed:	55                   	push   ebp
9f0019ee:	89 e5                	mov    ebp,esp
9f0019f0:	e8 9d 2e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0019f5:	05 47 57 00 00       	add    eax,0x5747
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f0019fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019fd:	6a 61                	push   0x61
9f0019ff:	e8 f8 f8 ff ff       	call   9f0012fc <do_syscall1>
9f001a04:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
}
9f001a07:	c9                   	leave  
9f001a08:	c3                   	ret    

9f001a09 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232


VISIBLE void exit (int status)
{
9f001a09:	55                   	push   ebp
9f001a0a:	89 e5                	mov    ebp,esp
9f001a0c:	e8 81 2e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001a11:	05 2b 57 00 00       	add    eax,0x572b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a19:	50                   	push   eax
9f001a1a:	6a 00                	push   0x0
9f001a1c:	6a 01                	push   0x1
9f001a1e:	e8 9b f8 ff ff       	call   9f0012be <do_syscall2>
9f001a23:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
}
9f001a26:	90                   	nop
9f001a27:	c9                   	leave  
9f001a28:	c3                   	ret    

9f001a29 <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001a29:	55                   	push   ebp
9f001a2a:	89 e5                	mov    ebp,esp
9f001a2c:	e8 61 2e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001a31:	05 0b 57 00 00       	add    eax,0x570b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001a3c:	50                   	push   eax
9f001a3d:	6a 50                	push   0x50
9f001a3f:	e8 7a f8 ff ff       	call   9f0012be <do_syscall2>
9f001a44:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
}
9f001a47:	c9                   	leave  
9f001a48:	c3                   	ret    

9f001a49 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001a49:	55                   	push   ebp
9f001a4a:	89 e5                	mov    ebp,esp
9f001a4c:	83 ec 20             	sub    esp,0x20
9f001a4f:	e8 3e 2e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001a54:	05 e8 56 00 00       	add    eax,0x56e8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001a59:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
    size_t argc = 0;
9f001a60:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001a6a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001a6d:	e9 d8 00 00 00       	jmp    9f001b4a <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:249
        c = (unsigned char) *p;
9f001a72:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001a75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001a78:	0f b6 c0             	movzx  eax,al
9f001a7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250
        switch (state) {
9f001a7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001a81:	83 f8 01             	cmp    eax,0x1
9f001a84:	74 7e                	je     9f001b04 <splitI+0xbb>
9f001a86:	83 f8 01             	cmp    eax,0x1
9f001a89:	72 0a                	jb     9f001a95 <splitI+0x4c>
9f001a8b:	83 f8 02             	cmp    eax,0x2
9f001a8e:	74 45                	je     9f001ad5 <splitI+0x8c>
9f001a90:	e9 b1 00 00 00       	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
        case DULL:
            if (ISSPACE(c)) {
9f001a95:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001a99:	0f 94 c0             	sete   al
9f001a9c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001a9f:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001aa3:	84 c0                	test   al,al
9f001aa5:	0f 85 94 00 00 00    	jne    9f001b3f <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
                continue;
            }

            if (c == '"') {
9f001aab:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001aaf:	75 15                	jne    9f001ac6 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:257
                state = IN_STRING;
9f001ab1:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:258
                start_of_word = p + 1; 
9f001ab8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001abb:	83 c0 01             	add    eax,0x1
9f001abe:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
                continue;
9f001ac1:	e9 80 00 00 00       	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:261
            }
            state = IN_WORD;
9f001ac6:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262
            start_of_word = p;
9f001acd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001ad0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
            continue;
9f001ad3:	eb 71                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:266

        case IN_STRING:
            if (c == '"') {
9f001ad5:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001ad9:	75 67                	jne    9f001b42 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
                *p = 0;
9f001adb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001ade:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
                argv[argc++] = start_of_word;
9f001ae1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001ae4:	8d 50 01             	lea    edx,[eax+0x1]
9f001ae7:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001aea:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001af1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001af4:	01 c2                	add    edx,eax
9f001af6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001af9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
                state = DULL;
9f001afb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
            }
            continue;
9f001b02:	eb 3e                	jmp    9f001b42 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274

        case IN_WORD:
            if (ISSPACE(c)) {
9f001b04:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001b08:	0f 94 c0             	sete   al
9f001b0b:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001b0e:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001b12:	84 c0                	test   al,al
9f001b14:	74 2f                	je     9f001b45 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
                *p = 0;
9f001b16:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b19:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
                argv[argc++] = start_of_word;
9f001b1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b1f:	8d 50 01             	lea    edx,[eax+0x1]
9f001b22:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b25:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b2f:	01 c2                	add    edx,eax
9f001b31:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b34:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
                state = DULL;
9f001b36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
            }
            continue;
9f001b3d:	eb 06                	jmp    9f001b45 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f001b3f:	90                   	nop
9f001b40:	eb 04                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001b42:	90                   	nop
9f001b43:	eb 01                	jmp    9f001b46 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:279
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001b45:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001b46:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 1)
9f001b4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b4d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001b50:	73 0e                	jae    9f001b60 <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:248 (discriminator 3)
9f001b52:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001b55:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001b58:	84 c0                	test   al,al
9f001b5a:	0f 85 12 ff ff ff    	jne    9f001a72 <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f001b60:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001b64:	74 22                	je     9f001b88 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283 (discriminator 1)
9f001b66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b69:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001b6c:	73 1a                	jae    9f001b88 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
        argv[argc++] = start_of_word;
9f001b6e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001b71:	8d 50 01             	lea    edx,[eax+0x1]
9f001b74:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001b77:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001b7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001b81:	01 c2                	add    edx,eax
9f001b83:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001b86:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286

    return argc;
9f001b88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
}
9f001b8b:	c9                   	leave  
9f001b8c:	c3                   	ret    

9f001b8d <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001b8d:	55                   	push   ebp
9f001b8e:	89 e5                	mov    ebp,esp
9f001b90:	e8 fd 2c 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001b95:	05 a7 55 00 00       	add    eax,0x55a7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
    return splitI(buffer, argv, argv_size);
9f001b9a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001b9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ba0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ba3:	e8 a1 fe ff ff       	call   9f001a49 <splitI>
9f001ba8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
}
9f001bab:	c9                   	leave  
9f001bac:	c3                   	ret    

9f001bad <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:295

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001bad:	55                   	push   ebp
9f001bae:	89 e5                	mov    ebp,esp
9f001bb0:	56                   	push   esi
9f001bb1:	53                   	push   ebx
9f001bb2:	81 ec 30 04 00 00    	sub    esp,0x430
9f001bb8:	e8 13 2d 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f001bbd:	81 c3 7f 55 00 00    	add    ebx,0x557f
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001bc3:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bc9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001bcc:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bd2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001bd5:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001bdb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
    char dblquote[2] = {'"',0};
9f001bde:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001be5:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:300
    *argc = 0;
9f001bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001bef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
    
    strncpyI(cmd,cmdline,1024);
9f001bf5:	83 ec 04             	sub    esp,0x4
9f001bf8:	68 00 04 00 00       	push   0x400
9f001bfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001c00:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001c06:	50                   	push   eax
9f001c07:	e8 60 18 00 00       	call   9f00346c <strncpyI>
9f001c0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:303
    strtrimI(cmd);
9f001c0f:	83 ec 0c             	sub    esp,0xc
9f001c12:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001c18:	50                   	push   eax
9f001c19:	e8 16 1c 00 00       	call   9f003834 <strtrimI>
9f001c1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001c21:	83 ec 04             	sub    esp,0x4
9f001c24:	68 a0 0f 00 00       	push   0xfa0
9f001c29:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001c2f:	50                   	push   eax
9f001c30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001c33:	e8 20 1e 00 00       	call   9f003a58 <strnstrI>
9f001c38:	83 c4 10             	add    esp,0x10
9f001c3b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
        spacePtr=strstrI(spacePtr," ");
9f001c3e:	83 ec 08             	sub    esp,0x8
9f001c41:	8d 83 61 f8 ff ff    	lea    eax,[ebx-0x79f]
9f001c47:	50                   	push   eax
9f001c48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001c4b:	e8 a6 1e 00 00       	call   9f003af6 <strstrI>
9f001c50:	83 c4 10             	add    esp,0x10
9f001c53:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001c56:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001c5a:	74 48                	je     9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308 (discriminator 1)
9f001c5c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c5f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c62:	77 40                	ja     9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
        {
            char *temp = spacePtr;
9f001c64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001c67:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:311
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001c6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c6d:	8d 50 01             	lea    edx,[eax+0x1]
9f001c70:	83 ec 04             	sub    esp,0x4
9f001c73:	68 a0 0f 00 00       	push   0xfa0
9f001c78:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001c7e:	50                   	push   eax
9f001c7f:	52                   	push   edx
9f001c80:	e8 d3 1d 00 00       	call   9f003a58 <strnstrI>
9f001c85:	83 c4 10             	add    esp,0x10
9f001c88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312
            if (spacePtr>=quotePtr+4000)
9f001c8b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c8e:	05 a0 0f 00 00       	add    eax,0xfa0
9f001c93:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001c96:	77 08                	ja     9f001ca0 <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001c98:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001c9b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001c9e:	eb 04                	jmp    9f001ca4 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
            else
                spacePtr += 1;                              //Skip the closing quote
9f001ca0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
        }
        *argc+=1;
9f001ca4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ca7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ca9:	8d 50 01             	lea    edx,[eax+0x1]
9f001cac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001caf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
        if (spacePtr!=0 && *spacePtr)
9f001cb1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cb5:	74 0e                	je     9f001cc5 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318 (discriminator 1)
9f001cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001cba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cbd:	84 c0                	test   al,al
9f001cbf:	74 04                	je     9f001cc5 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
            spacePtr++;
9f001cc1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:321
    
    } while (spacePtr!=0 && *spacePtr);
9f001cc5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cc9:	74 0e                	je     9f001cd9 <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:321 (discriminator 1)
9f001ccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001cce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cd1:	84 c0                	test   al,al
9f001cd3:	0f 85 48 ff ff ff    	jne    9f001c21 <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:323
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cdc:	8b 10                	mov    edx,DWORD PTR [eax]
9f001cde:	89 d0                	mov    eax,edx
9f001ce0:	c1 e0 08             	shl    eax,0x8
9f001ce3:	29 d0                	sub    eax,edx
9f001ce5:	89 c2                	mov    edx,eax
9f001ce7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cea:	8b 00                	mov    eax,DWORD PTR [eax]
9f001cec:	c1 e0 02             	shl    eax,0x2
9f001cef:	01 d0                	add    eax,edx
9f001cf1:	83 ec 0c             	sub    esp,0xc
9f001cf4:	50                   	push   eax
9f001cf5:	e8 95 04 00 00       	call   9f00218f <mallocI>
9f001cfa:	83 c4 10             	add    esp,0x10
9f001cfd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
    int argvPtr=4* *argc;
9f001d00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d03:	8b 00                	mov    eax,DWORD PTR [eax]
9f001d05:	c1 e0 02             	shl    eax,0x2
9f001d08:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
    spacePtr=cmd;
9f001d0b:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d11:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326
    for (int cnt=0;cnt<*argc; cnt++)
9f001d14:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f001d1b:	e9 72 01 00 00       	jmp    9f001e92 <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001d20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001d23:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001d2a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001d2d:	01 d0                	add    eax,edx
9f001d2f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001d32:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f001d35:	01 ca                	add    edx,ecx
9f001d37:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:329
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f001d39:	83 ec 04             	sub    esp,0x4
9f001d3c:	68 a0 0f 00 00       	push   0xfa0
9f001d41:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d47:	50                   	push   eax
9f001d48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001d4b:	e8 08 1d 00 00       	call   9f003a58 <strnstrI>
9f001d50:	83 c4 10             	add    esp,0x10
9f001d53:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f001d56:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001d5a:	0f 84 80 00 00 00    	je     9f001de0 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330 (discriminator 1)
9f001d60:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d63:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001d66:	77 78                	ja     9f001de0 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
        {
            char *temp = spacePtr;
9f001d68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001d6b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f001d6e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d71:	8d 50 01             	lea    edx,[eax+0x1]
9f001d74:	83 ec 04             	sub    esp,0x4
9f001d77:	68 a0 0f 00 00       	push   0xfa0
9f001d7c:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d82:	50                   	push   eax
9f001d83:	52                   	push   edx
9f001d84:	e8 cf 1c 00 00       	call   9f003a58 <strnstrI>
9f001d89:	83 c4 10             	add    esp,0x10
9f001d8c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:334
            if (spacePtr>=quotePtr+4000)
9f001d8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001d92:	05 a0 0f 00 00       	add    eax,0xfa0
9f001d97:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001d9a:	77 0b                	ja     9f001da7 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f001d9c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001d9f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001da2:	e9 d4 00 00 00       	jmp    9f001e7b <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001da7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001daa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001dad:	29 c2                	sub    edx,eax
9f001daf:	89 d0                	mov    eax,edx
9f001db1:	83 e8 02             	sub    eax,0x2
9f001db4:	89 c6                	mov    esi,eax
9f001db6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001db9:	8d 50 01             	lea    edx,[eax+0x1]
9f001dbc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001dbf:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001dc6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001dc9:	01 c8                	add    eax,ecx
9f001dcb:	8b 00                	mov    eax,DWORD PTR [eax]
9f001dcd:	83 ec 04             	sub    esp,0x4
9f001dd0:	56                   	push   esi
9f001dd1:	52                   	push   edx
9f001dd2:	50                   	push   eax
9f001dd3:	e8 94 16 00 00       	call   9f00346c <strncpyI>
9f001dd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001ddb:	e9 9b 00 00 00       	jmp    9f001e7b <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:343
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f001de0:	83 ec 08             	sub    esp,0x8
9f001de3:	8d 83 61 f8 ff ff    	lea    eax,[ebx-0x79f]
9f001de9:	50                   	push   eax
9f001dea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001ded:	e8 04 1d 00 00       	call   9f003af6 <strstrI>
9f001df2:	83 c4 10             	add    esp,0x10
9f001df5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:344
            if (spacePtr)
9f001df8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001dfc:	74 2f                	je     9f001e2d <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:345
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001dfe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001e01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001e04:	29 c2                	sub    edx,eax
9f001e06:	89 d0                	mov    eax,edx
9f001e08:	89 c1                	mov    ecx,eax
9f001e0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e0d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e17:	01 d0                	add    eax,edx
9f001e19:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e1b:	83 ec 04             	sub    esp,0x4
9f001e1e:	51                   	push   ecx
9f001e1f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e22:	50                   	push   eax
9f001e23:	e8 44 16 00 00       	call   9f00346c <strncpyI>
9f001e28:	83 c4 10             	add    esp,0x10
9f001e2b:	eb 31                	jmp    9f001e5e <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:347
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001e2d:	83 ec 0c             	sub    esp,0xc
9f001e30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e33:	e8 c0 14 00 00       	call   9f0032f8 <strlenI>
9f001e38:	83 c4 10             	add    esp,0x10
9f001e3b:	89 c2                	mov    edx,eax
9f001e3d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e40:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001e47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e4a:	01 c8                	add    eax,ecx
9f001e4c:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e4e:	83 ec 04             	sub    esp,0x4
9f001e51:	52                   	push   edx
9f001e52:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001e55:	50                   	push   eax
9f001e56:	e8 11 16 00 00       	call   9f00346c <strncpyI>
9f001e5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:348
            strtrimI(argv[cnt]);
9f001e5e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e61:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e68:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e6b:	01 d0                	add    eax,edx
9f001e6d:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e6f:	83 ec 0c             	sub    esp,0xc
9f001e72:	50                   	push   eax
9f001e73:	e8 bc 19 00 00       	call   9f003834 <strtrimI>
9f001e78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f001e7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e7e:	8d 50 01             	lea    edx,[eax+0x1]
9f001e81:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001e84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:351 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001e87:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f001e8e:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326 (discriminator 1)
9f001e92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e95:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e97:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001e9a:	0f 8f 80 fe ff ff    	jg     9f001d20 <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:353
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f001ea0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:354
}
9f001ea3:	8d 65 f8             	lea    esp,[ebp-0x8]
9f001ea6:	5b                   	pop    ebx
9f001ea7:	5e                   	pop    esi
9f001ea8:	5d                   	pop    ebp
9f001ea9:	c3                   	ret    

9f001eaa <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f001eaa:	55                   	push   ebp
9f001eab:	89 e5                	mov    ebp,esp
9f001ead:	83 ec 08             	sub    esp,0x8
9f001eb0:	e8 dd 29 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001eb5:	05 87 52 00 00       	add    eax,0x5287
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:358
    return cmdlineToArgvI(cmdline, argc);
9f001eba:	83 ec 08             	sub    esp,0x8
9f001ebd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ec0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ec3:	e8 e5 fc ff ff       	call   9f001bad <cmdlineToArgvI>
9f001ec8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:359
}
9f001ecb:	c9                   	leave  
9f001ecc:	c3                   	ret    

9f001ecd <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:362

VISIBLE int setSTD(int std, uint32_t filed)
{
9f001ecd:	55                   	push   ebp
9f001ece:	89 e5                	mov    ebp,esp
9f001ed0:	e8 bd 29 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001ed5:	05 67 52 00 00       	add    eax,0x5267
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:363
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f001eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001edd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001ee0:	50                   	push   eax
9f001ee1:	68 06 03 00 00       	push   0x306
9f001ee6:	e8 d3 f3 ff ff       	call   9f0012be <do_syscall2>
9f001eeb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:364
9f001eee:	c9                   	leave  
9f001eef:	c3                   	ret    

9f001ef0 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f001ef0:	55                   	push   ebp
9f001ef1:	89 e5                	mov    ebp,esp
9f001ef3:	53                   	push   ebx
9f001ef4:	83 ec 04             	sub    esp,0x4
9f001ef7:	e8 96 29 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001efc:	05 40 52 00 00       	add    eax,0x5240
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f001f01:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f07:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f001f0a:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f001f0c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f001f0f:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f15:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f001f18:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f1e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001f21:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f001f24:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f2a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f001f2d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f001f30:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f36:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f001f39:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f001f3c:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f42:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f001f45:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f001f48:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f001f4e:	83 ec 08             	sub    esp,0x8
9f001f51:	52                   	push   edx
9f001f52:	6a 10                	push   0x10
9f001f54:	89 c3                	mov    ebx,eax
9f001f56:	e8 a1 f3 ff ff       	call   9f0012fc <do_syscall1>
9f001f5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f001f5e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001f61:	c9                   	leave  
9f001f62:	c3                   	ret    
9f001f63:	90                   	nop

9f001f64 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_GET_NEXTr(s) ({s=(uint8_t*)s+s->len+sizeof(heaprec_t);s;})
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
9f001f64:	55                   	push   ebp
9f001f65:	89 e5                	mov    ebp,esp
9f001f67:	53                   	push   ebx
9f001f68:	83 ec 04             	sub    esp,0x4
9f001f6b:	e8 60 29 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f001f70:	81 c3 cc 51 00 00    	add    ebx,0x51cc
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f001f76:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001f7c:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f7e:	50                   	push   eax
9f001f7f:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001f85:	50                   	push   eax
9f001f86:	8d 83 8c f8 ff ff    	lea    eax,[ebx-0x774]
9f001f8c:	50                   	push   eax
9f001f8d:	68 00 00 00 01       	push   0x1000000
9f001f92:	e8 41 f6 ff ff       	call   9f0015d8 <printdI>
9f001f97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapBase=0;
9f001f9a:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f001fa0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    heapCurr=0;
9f001fa6:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f001fac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:19
    heapEnd=0;
9f001fb2:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f001fb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20
    libcTZ=-5;
9f001fbe:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f001fc4:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:22

}
9f001fca:	90                   	nop
9f001fcb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001fce:	c9                   	leave  
9f001fcf:	c3                   	ret    

9f001fd0 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:25

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001fd0:	55                   	push   ebp
9f001fd1:	89 e5                	mov    ebp,esp
9f001fd3:	83 ec 10             	sub    esp,0x10
9f001fd6:	e8 b7 28 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f001fdb:	05 61 51 00 00       	add    eax,0x5161
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f001fe0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001fe3:	83 c2 30             	add    edx,0x30
9f001fe6:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:30
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f001fe9:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f001fef:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f001ff1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001ff4:	01 d1                	add    ecx,edx
9f001ff6:	8b 90 dc ff ff ff    	mov    edx,DWORD PTR [eax-0x24]
9f001ffc:	8b 12                	mov    edx,DWORD PTR [edx]
9f001ffe:	39 d1                	cmp    ecx,edx
9f002000:	76 4e                	jbe    9f002050 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:33
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f002002:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002008:	8b 12                	mov    edx,DWORD PTR [edx]
9f00200a:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f002010:	8b 00                	mov    eax,DWORD PTR [eax]
9f002012:	29 c2                	sub    edx,eax
9f002014:	89 d0                	mov    eax,edx
9f002016:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
        if (newSize== 0 || newSize%PAGE_SIZE)
9f002019:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f00201d:	74 0c                	je     9f00202b <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34 (discriminator 1)
9f00201f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002022:	25 ff 0f 00 00       	and    eax,0xfff
9f002027:	85 c0                	test   eax,eax
9f002029:	74 10                	je     9f00203b <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f00202b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00202e:	25 00 f0 ff ff       	and    eax,0xfffff000
9f002033:	05 00 10 00 00       	add    eax,0x1000
9f002038:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f00203b:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f002042:	77 07                	ja     9f00204b <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
            return ALLOC_REQUEST_SIZE;
9f002044:	b8 00 10 00 00       	mov    eax,0x1000
9f002049:	eb 0a                	jmp    9f002055 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
        else
            return newSize;
9f00204b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00204e:	eb 05                	jmp    9f002055 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
    }
    else
        return 0;
9f002050:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
}
9f002055:	c9                   	leave  
9f002056:	c3                   	ret    

9f002057 <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:49

void freeI(void* fpointer)
{
9f002057:	55                   	push   ebp
9f002058:	89 e5                	mov    ebp,esp
9f00205a:	83 ec 10             	sub    esp,0x10
9f00205d:	e8 30 28 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002062:	05 da 50 00 00       	add    eax,0x50da
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f002067:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00206a:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002070:	8b 12                	mov    edx,DWORD PTR [edx]
9f002072:	39 d1                	cmp    ecx,edx
9f002074:	72 33                	jb     9f0020a9 <freeI+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52 (discriminator 1)
9f002076:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002079:	8b 80 e8 ff ff ff    	mov    eax,DWORD PTR [eax-0x18]
9f00207f:	8b 00                	mov    eax,DWORD PTR [eax]
9f002081:	39 c2                	cmp    edx,eax
9f002083:	77 24                	ja     9f0020a9 <freeI+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
        return;
    
    if (fpointer==NULL)
9f002085:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f002089:	74 21                	je     9f0020ac <freeI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:57
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f00208b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00208e:	83 e8 18             	sub    eax,0x18
9f002091:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:60
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f002094:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002097:	8b 00                	mov    eax,DWORD PTR [eax]
9f002099:	3d 1f 2f 3f 4f       	cmp    eax,0x4f3f2f1f
9f00209e:	75 0f                	jne    9f0020af <freeI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
    }
    mp->inUse=false;
9f0020a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020a3:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f0020a7:	eb 07                	jmp    9f0020b0 <freeI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:53
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
        return;
9f0020a9:	90                   	nop
9f0020aa:	eb 04                	jmp    9f0020b0 <freeI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:56
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f0020ac:	90                   	nop
9f0020ad:	eb 01                	jmp    9f0020b0 <freeI+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
    {
        //print("malloc: marker not found error!!!\n");
        return; //Return silently ... for now
9f0020af:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    }
    mp->inUse=false;
}
9f0020b0:	c9                   	leave  
9f0020b1:	c3                   	ret    

9f0020b2 <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f0020b2:	55                   	push   ebp
9f0020b3:	89 e5                	mov    ebp,esp
9f0020b5:	83 ec 10             	sub    esp,0x10
9f0020b8:	e8 d5 27 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0020bd:	05 7f 50 00 00       	add    eax,0x507f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:70
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f0020c2:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0020c8:	8b 12                	mov    edx,DWORD PTR [edx]
9f0020ca:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    uint8_t *ptr=(uint8_t*)heapPtr;
9f0020cd:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0020d0:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72
    heaprec_t *he=heapEnd;
9f0020d3:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f0020d9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0020db:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size)
9f0020de:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020e1:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
9f0020e5:	83 f0 01             	xor    eax,0x1
9f0020e8:	84 c0                	test   al,al
9f0020ea:	74 10                	je     9f0020fc <mallocFindAvailableMemory+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75 (discriminator 1)
9f0020ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0020f2:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
9f0020f5:	72 05                	jb     9f0020fc <mallocFindAvailableMemory+0x4a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
            return heapPtr;
9f0020f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020fa:	eb 2e                	jmp    9f00212a <mallocFindAvailableMemory+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
        if (heapPtr->next)
9f0020fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0020ff:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002102:	85 c0                	test   eax,eax
9f002104:	74 09                	je     9f00210f <mallocFindAvailableMemory+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:78
            heapPtr=heapPtr->next;
9f002106:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002109:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00210c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        
    }
    while(heapPtr->next && heapPtr->marker==ALLOC_MARKER_VALUE);
9f00210f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002112:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002115:	85 c0                	test   eax,eax
9f002117:	74 0c                	je     9f002125 <mallocFindAvailableMemory+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81 (discriminator 1)
9f002119:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00211c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00211e:	3d 1f 2f 3f 4f       	cmp    eax,0x4f3f2f1f
9f002123:	74 b9                	je     9f0020de <mallocFindAvailableMemory+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f002125:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
}
9f00212a:	c9                   	leave  
9f00212b:	c3                   	ret    

9f00212c <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:87

void mallocSanityCheck(heaprec_t *heaprec)
{
9f00212c:	55                   	push   ebp
9f00212d:	89 e5                	mov    ebp,esp
9f00212f:	53                   	push   ebx
9f002130:	83 ec 14             	sub    esp,0x14
9f002133:	e8 5a 27 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002138:	05 04 50 00 00       	add    eax,0x5004
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:88
    heaprec_t *heapPtr=heaprec;
9f00213d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002140:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
    while (heapPtr>=heapBase && heapPtr->prev!=heapPtr)
9f002143:	eb 2c                	jmp    9f002171 <mallocSanityCheck+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    {
        if (heapPtr->marker!=ALLOC_MARKER_VALUE)
9f002145:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002148:	8b 12                	mov    edx,DWORD PTR [edx]
9f00214a:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002150:	74 16                	je     9f002168 <mallocSanityCheck+0x3c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
        {
            printfI("\n**************************malloc error!!!**************************\n");
9f002152:	83 ec 0c             	sub    esp,0xc
9f002155:	8d 90 b0 f8 ff ff    	lea    edx,[eax-0x750]
9f00215b:	52                   	push   edx
9f00215c:	89 c3                	mov    ebx,eax
9f00215e:	e8 b6 f3 ff ff       	call   9f001519 <printfI>
9f002163:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95 (discriminator 1)
SanityLoop:
            goto SanityLoop;
9f002166:	eb fe                	jmp    9f002166 <mallocSanityCheck+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
        }
        heapPtr=heapPtr->prev;
9f002168:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00216b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f00216e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
}

void mallocSanityCheck(heaprec_t *heaprec)
{
    heaprec_t *heapPtr=heaprec;
    while (heapPtr>=heapBase && heapPtr->prev!=heapPtr)
9f002171:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002177:	8b 12                	mov    edx,DWORD PTR [edx]
9f002179:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f00217c:	72 0b                	jb     9f002189 <mallocSanityCheck+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 1)
9f00217e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002181:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f002184:	3b 55 f4             	cmp    edx,DWORD PTR [ebp-0xc]
9f002187:	75 bc                	jne    9f002145 <mallocSanityCheck+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
SanityLoop:
            goto SanityLoop;
        }
        heapPtr=heapPtr->prev;
    }
}
9f002189:	90                   	nop
9f00218a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00218d:	c9                   	leave  
9f00218e:	c3                   	ret    

9f00218f <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102

void*  mallocI(size_t size)
{
9f00218f:	55                   	push   ebp
9f002190:	89 e5                	mov    ebp,esp
9f002192:	53                   	push   ebx
9f002193:	83 ec 24             	sub    esp,0x24
9f002196:	e8 35 27 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f00219b:	81 c3 a1 4f 00 00    	add    ebx,0x4fa1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:107
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f0021a1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
    size_t requestSize=size;
9f0021a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0021ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
    uint8_t* heapPtrNext;
    static heaprec_t *lastHRCreated=NULL;

    if (size<ALLOC_MIN_MALLOC_SIZE)
9f0021ae:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f0021b2:	77 07                	ja     9f0021bb <mallocI+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:113
        requestSize=ALLOC_MIN_MALLOC_SIZE;
9f0021b4:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f0021bb:	83 ec 04             	sub    esp,0x4
9f0021be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0021c1:	8d 83 f8 f8 ff ff    	lea    eax,[ebx-0x708]
9f0021c7:	50                   	push   eax
9f0021c8:	68 00 00 00 01       	push   0x1000000
9f0021cd:	e8 06 f4 ff ff       	call   9f0015d8 <printdI>
9f0021d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
    
        if (heapBase>0)
9f0021d5:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0021db:	8b 00                	mov    eax,DWORD PTR [eax]
9f0021dd:	85 c0                	test   eax,eax
9f0021df:	74 3f                	je     9f002220 <mallocI+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:118
        {
            heapPtr=mallocFindAvailableMemory(requestSize);
9f0021e1:	83 ec 0c             	sub    esp,0xc
9f0021e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0021e7:	e8 c6 fe ff ff       	call   9f0020b2 <mallocFindAvailableMemory>
9f0021ec:	83 c4 10             	add    esp,0x10
9f0021ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:119
            if (heapPtr!=NULL)
9f0021f2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0021f6:	74 28                	je     9f002220 <mallocI+0x91>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:121
            {
                heapPtr->inUse=true;
9f0021f8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0021fb:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:122
                heapPtr->uses++;
9f0021ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002202:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f002206:	8d 50 01             	lea    edx,[eax+0x1]
9f002209:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00220c:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
                return ((void*)heapCurr)+sizeof(heaprec_t);
9f002210:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002216:	8b 00                	mov    eax,DWORD PTR [eax]
9f002218:	83 c0 18             	add    eax,0x18
9f00221b:	e9 ec 01 00 00       	jmp    9f00240c <mallocI+0x27d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
            }
        }
    
        needed = newHeapRequiredToFulfillRequest(requestSize);
9f002220:	83 ec 0c             	sub    esp,0xc
9f002223:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002226:	e8 a5 fd ff ff       	call   9f001fd0 <newHeapRequiredToFulfillRequest>
9f00222b:	83 c4 10             	add    esp,0x10
9f00222e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f002231:	83 ec 04             	sub    esp,0x4
9f002234:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002237:	8d 83 1f f9 ff ff    	lea    eax,[ebx-0x6e1]
9f00223d:	50                   	push   eax
9f00223e:	68 00 00 00 01       	push   0x1000000
9f002243:	e8 90 f3 ff ff       	call   9f0015d8 <printdI>
9f002248:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:129
    if (needed!=0)      //New heap required
9f00224b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f00224f:	0f 84 e5 00 00 00    	je     9f00233a <mallocI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:131
    {
        if (heapCurr>0)
9f002255:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00225b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00225d:	85 c0                	test   eax,eax
9f00225f:	74 17                	je     9f002278 <mallocI+0xe9>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f002261:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002267:	8b 00                	mov    eax,DWORD PTR [eax]
9f002269:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00226c:	83 ec 0c             	sub    esp,0xc
9f00226f:	50                   	push   eax
9f002270:	e8 b7 fe ff ff       	call   9f00212c <mallocSanityCheck>
9f002275:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f002278:	83 ec 08             	sub    esp,0x8
9f00227b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f00227e:	68 65 01 00 00       	push   0x165
9f002283:	e8 74 f0 ff ff       	call   9f0012fc <do_syscall1>
9f002288:	83 c4 10             	add    esp,0x10
9f00228b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
        //This is needed to keep in sync with what the kernel thinks
        memset((char*)allocatedPtr,0,needed);
9f00228e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002291:	83 ec 04             	sub    esp,0x4
9f002294:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002297:	6a 00                	push   0x0
9f002299:	50                   	push   eax
9f00229a:	e8 11 26 00 00       	call   9f0048b0 <__x86.get_pc_thunk.ax+0x1e>
9f00229f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0022a2:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022a8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022aa:	83 ec 04             	sub    esp,0x4
9f0022ad:	50                   	push   eax
9f0022ae:	8d 83 3b f9 ff ff    	lea    eax,[ebx-0x6c5]
9f0022b4:	50                   	push   eax
9f0022b5:	68 00 00 00 01       	push   0x1000000
9f0022ba:	e8 19 f3 ff ff       	call   9f0015d8 <printdI>
9f0022bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
        heapEnd=allocatedPtr+needed;
9f0022c2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0022c5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0022c8:	01 c2                	add    edx,eax
9f0022ca:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022d0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0022d2:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0022d8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0022da:	83 ec 0c             	sub    esp,0xc
9f0022dd:	50                   	push   eax
9f0022de:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0022e1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0022e4:	8d 83 58 f9 ff ff    	lea    eax,[ebx-0x6a8]
9f0022ea:	50                   	push   eax
9f0022eb:	68 00 00 00 01       	push   0x1000000
9f0022f0:	e8 e3 f2 ff ff       	call   9f0015d8 <printdI>
9f0022f5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:139
        if (heapBase==0)    //Hasn't been initialized yet!
9f0022f8:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0022fe:	8b 00                	mov    eax,DWORD PTR [eax]
9f002300:	85 c0                	test   eax,eax
9f002302:	75 36                	jne    9f00233a <mallocI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:141
        {
            heapCurr=allocatedPtr;
9f002304:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00230a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f00230d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
            heapBase=allocatedPtr;
9f00230f:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002315:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002318:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f00231a:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002320:	8b 00                	mov    eax,DWORD PTR [eax]
9f002322:	83 ec 04             	sub    esp,0x4
9f002325:	50                   	push   eax
9f002326:	8d 83 98 f9 ff ff    	lea    eax,[ebx-0x668]
9f00232c:	50                   	push   eax
9f00232d:	68 00 00 00 01       	push   0x1000000
9f002332:	e8 a1 f2 ff ff       	call   9f0015d8 <printdI>
9f002337:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:146
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f00233a:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002340:	8b 00                	mov    eax,DWORD PTR [eax]
9f002342:	83 ec 04             	sub    esp,0x4
9f002345:	50                   	push   eax
9f002346:	8d 83 d4 f9 ff ff    	lea    eax,[ebx-0x62c]
9f00234c:	50                   	push   eax
9f00234d:	68 00 00 00 01       	push   0x1000000
9f002352:	e8 81 f2 ff ff       	call   9f0015d8 <printdI>
9f002357:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:147
    heapPtr = (heaprec_t*)heapCurr;
9f00235a:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002360:	8b 00                	mov    eax,DWORD PTR [eax]
9f002362:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f002365:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002368:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:149
    heapPtr->len=requestSize;
9f00236e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002371:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002374:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
    heapPtr->inUse=true;
9f002377:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00237a:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:151
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f00237e:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002384:	8b 00                	mov    eax,DWORD PTR [eax]
9f002386:	83 ec 04             	sub    esp,0x4
9f002389:	50                   	push   eax
9f00238a:	8d 83 fc f9 ff ff    	lea    eax,[ebx-0x604]
9f002390:	50                   	push   eax
9f002391:	68 00 00 00 01       	push   0x1000000
9f002396:	e8 3d f2 ff ff       	call   9f0015d8 <printdI>
9f00239b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:152
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
9f00239e:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0023a6:	83 c0 18             	add    eax,0x18
9f0023a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
    if (lastHRCreated!=NULL)
9f0023ac:	8b 83 78 00 00 00    	mov    eax,DWORD PTR [ebx+0x78]
9f0023b2:	85 c0                	test   eax,eax
9f0023b4:	74 18                	je     9f0023ce <mallocI+0x23f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:155
    {
        heapPtr->prev=lastHRCreated;
9f0023b6:	8b 93 78 00 00 00    	mov    edx,DWORD PTR [ebx+0x78]
9f0023bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023bf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:156
        heapPtr->prev->next=heapPtr;
9f0023c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0023c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0023cb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
    }
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f0023ce:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023d4:	8b 10                	mov    edx,DWORD PTR [eax]
9f0023d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0023d9:	01 d0                	add    eax,edx
9f0023db:	8d 50 18             	lea    edx,[eax+0x18]
9f0023de:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023e4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:159
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f0023e6:	83 ec 04             	sub    esp,0x4
9f0023e9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0023ec:	8d 83 1a fa ff ff    	lea    eax,[ebx-0x5e6]
9f0023f2:	50                   	push   eax
9f0023f3:	68 00 00 00 01       	push   0x1000000
9f0023f8:	e8 db f1 ff ff       	call   9f0015d8 <printdI>
9f0023fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:160
    lastHRCreated=heapPtr;
9f002400:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002403:	89 83 78 00 00 00    	mov    DWORD PTR [ebx+0x78],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
    return retVal;
9f002409:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
}
9f00240c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00240f:	c9                   	leave  
9f002410:	c3                   	ret    

9f002411 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:165

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f002411:	55                   	push   ebp
9f002412:	89 e5                	mov    ebp,esp
9f002414:	83 ec 08             	sub    esp,0x8
9f002417:	e8 76 24 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00241c:	05 20 4d 00 00       	add    eax,0x4d20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    return mallocI(size);
9f002421:	83 ec 0c             	sub    esp,0xc
9f002424:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002427:	e8 63 fd ff ff       	call   9f00218f <mallocI>
9f00242c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
}
9f00242f:	c9                   	leave  
9f002430:	c3                   	ret    

9f002431 <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170

void* reallocI(void *foldptr, uint32_t newlen)
{
9f002431:	55                   	push   ebp
9f002432:	89 e5                	mov    ebp,esp
9f002434:	53                   	push   ebx
9f002435:	83 ec 14             	sub    esp,0x14
9f002438:	e8 93 24 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f00243d:	81 c3 ff 4c 00 00    	add    ebx,0x4cff
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:172
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f002443:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002446:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002449:	8d 83 34 fa ff ff    	lea    eax,[ebx-0x5cc]
9f00244f:	50                   	push   eax
9f002450:	68 00 00 00 01       	push   0x1000000
9f002455:	e8 7e f1 ff ff       	call   9f0015d8 <printdI>
9f00245a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:174

    if (newlen==0)
9f00245d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002461:	75 08                	jne    9f00246b <reallocI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175
        return foldptr;
9f002463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002466:	e9 99 00 00 00       	jmp    9f002504 <reallocI+0xd3>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:177
    //Get old heap pointer
    uint32_t realSize=newlen;
9f00246b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00246e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f002471:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002474:	83 e8 18             	sub    eax,0x18
9f002477:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:181

    if (newlen<ALLOC_MIN_MALLOC_SIZE)
9f00247a:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f00247e:	77 07                	ja     9f002487 <reallocI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:182
        realSize=ALLOC_MIN_MALLOC_SIZE;
9f002480:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:185
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f002487:	83 ec 0c             	sub    esp,0xc
9f00248a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00248d:	e8 fd fc ff ff       	call   9f00218f <mallocI>
9f002492:	83 c4 10             	add    esp,0x10
9f002495:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:186
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f002498:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00249b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00249e:	83 ec 0c             	sub    esp,0xc
9f0024a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0024a4:	50                   	push   eax
9f0024a5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0024a8:	8d 83 74 fa ff ff    	lea    eax,[ebx-0x58c]
9f0024ae:	50                   	push   eax
9f0024af:	68 00 00 00 01       	push   0x1000000
9f0024b4:	e8 1f f1 ff ff       	call   9f0015d8 <printdI>
9f0024b9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:191
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f0024bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0024bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f0024c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0024c5:	39 c2                	cmp    edx,eax
9f0024c7:	0f 46 c2             	cmovbe eax,edx
9f0024ca:	83 ec 04             	sub    esp,0x4
9f0024cd:	50                   	push   eax
9f0024ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0024d1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0024d4:	e8 a3 00 00 00       	call   9f00257c <memcpyI>
9f0024d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:192
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer with old pointer data and cleared out remaing if applicable\n");
9f0024dc:	83 ec 08             	sub    esp,0x8
9f0024df:	8d 83 cc fa ff ff    	lea    eax,[ebx-0x534]
9f0024e5:	50                   	push   eax
9f0024e6:	68 00 00 00 01       	push   0x1000000
9f0024eb:	e8 e8 f0 ff ff       	call   9f0015d8 <printdI>
9f0024f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:195
    
   //free old pointer
    freeI(foldptr);
9f0024f3:	83 ec 0c             	sub    esp,0xc
9f0024f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0024f9:	e8 59 fb ff ff       	call   9f002057 <freeI>
9f0024fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:196
    return fnewptr;
9f002501:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:197
}
9f002504:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002507:	c9                   	leave  
9f002508:	c3                   	ret    

9f002509 <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:200

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f002509:	55                   	push   ebp
9f00250a:	89 e5                	mov    ebp,esp
9f00250c:	83 ec 08             	sub    esp,0x8
9f00250f:	e8 7e 23 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002514:	05 28 4c 00 00       	add    eax,0x4c28
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:201
    return reallocI(foldptr, newlen);
9f002519:	83 ec 08             	sub    esp,0x8
9f00251c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00251f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002522:	e8 0a ff ff ff       	call   9f002431 <reallocI>
9f002527:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:202
}
9f00252a:	c9                   	leave  
9f00252b:	c3                   	ret    

9f00252c <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:205

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f00252c:	55                   	push   ebp
9f00252d:	89 e5                	mov    ebp,esp
9f00252f:	e8 5e 23 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002534:	05 08 4c 00 00       	add    eax,0x4c08
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:206
    freeI(fpointer);
9f002539:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00253c:	e8 16 fb ff ff       	call   9f002057 <freeI>
9f002541:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:207
}
9f002544:	90                   	nop
9f002545:	c9                   	leave  
9f002546:	c3                   	ret    

9f002547 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:210

void malloc_cleanup()
{
9f002547:	55                   	push   ebp
9f002548:	89 e5                	mov    ebp,esp
9f00254a:	53                   	push   ebx
9f00254b:	83 ec 04             	sub    esp,0x4
9f00254e:	e8 3f 23 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002553:	05 e9 4b 00 00       	add    eax,0x4be9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:211
    do_syscall1(SYSCALL_FREE, heapBase);
9f002558:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f00255e:	8b 12                	mov    edx,DWORD PTR [edx]
9f002560:	83 ec 08             	sub    esp,0x8
9f002563:	52                   	push   edx
9f002564:	68 64 01 00 00       	push   0x164
9f002569:	89 c3                	mov    ebx,eax
9f00256b:	e8 8c ed ff ff       	call   9f0012fc <do_syscall1>
9f002570:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:212
9f002573:	90                   	nop
9f002574:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002577:	c9                   	leave  
9f002578:	c3                   	ret    
9f002579:	66 90                	xchg   ax,ax
9f00257b:	90                   	nop

9f00257c <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f00257c:	55                   	push   ebp
9f00257d:	89 e5                	mov    ebp,esp
9f00257f:	83 ec 20             	sub    esp,0x20
9f002582:	e8 0b 23 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002587:	05 b5 4b 00 00       	add    eax,0x4bb5
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f00258c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00258f:	83 e0 03             	and    eax,0x3
9f002592:	85 c0                	test   eax,eax
9f002594:	0f 94 c0             	sete   al
9f002597:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f00259a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00259d:	83 e0 01             	and    eax,0x1
9f0025a0:	85 c0                	test   eax,eax
9f0025a2:	0f 94 c0             	sete   al
9f0025a5:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f0025a8:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f0025ac:	74 7d                	je     9f00262b <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f0025ae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025b1:	c1 e8 02             	shr    eax,0x2
9f0025b4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f0025b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0025ba:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f0025bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0025c0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f0025c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0025c6:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0025c9:	73 4b                	jae    9f002616 <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f0025cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025ce:	c1 e0 02             	shl    eax,0x2
9f0025d1:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f0025d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025d7:	c1 e0 02             	shl    eax,0x2
9f0025da:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f0025dd:	eb 12                	jmp    9f0025f1 <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f0025df:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f0025e3:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f0025e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0025ea:	8b 10                	mov    edx,DWORD PTR [eax]
9f0025ec:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0025ef:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0025f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0025f4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0025f7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0025fa:	85 c0                	test   eax,eax
9f0025fc:	75 e1                	jne    9f0025df <memcpyI+0x63>
9f0025fe:	eb 23                	jmp    9f002623 <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f002600:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002603:	8d 50 04             	lea    edx,[eax+0x4]
9f002606:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002609:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00260c:	8d 4a 04             	lea    ecx,[edx+0x4]
9f00260f:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f002612:	8b 12                	mov    edx,DWORD PTR [edx]
9f002614:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f002616:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002619:	8d 50 ff             	lea    edx,[eax-0x1]
9f00261c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00261f:	85 c0                	test   eax,eax
9f002621:	75 dd                	jne    9f002600 <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f002623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002626:	e9 ea 00 00 00       	jmp    9f002715 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f00262b:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f00262f:	74 79                	je     9f0026aa <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f002631:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002634:	d1 e8                	shr    eax,1
9f002636:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f002639:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00263c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f00263f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002642:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f002645:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002648:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00264b:	73 4b                	jae    9f002698 <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f00264d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002650:	c1 e0 02             	shl    eax,0x2
9f002653:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f002656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002659:	c1 e0 02             	shl    eax,0x2
9f00265c:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f00265f:	eb 12                	jmp    9f002673 <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f002661:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f002665:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f002669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00266c:	8b 10                	mov    edx,DWORD PTR [eax]
9f00266e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002671:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f002673:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002676:	8d 50 ff             	lea    edx,[eax-0x1]
9f002679:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00267c:	85 c0                	test   eax,eax
9f00267e:	75 e1                	jne    9f002661 <memcpyI+0xe5>
9f002680:	eb 23                	jmp    9f0026a5 <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f002682:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002685:	8d 50 04             	lea    edx,[eax+0x4]
9f002688:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f00268b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00268e:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002691:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f002694:	8b 12                	mov    edx,DWORD PTR [edx]
9f002696:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f002698:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00269b:	8d 50 ff             	lea    edx,[eax-0x1]
9f00269e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0026a1:	85 c0                	test   eax,eax
9f0026a3:	75 dd                	jne    9f002682 <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f0026a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026a8:	eb 6b                	jmp    9f002715 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f0026aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0026ad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f0026b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f0026b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0026b9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0026bc:	73 47                	jae    9f002705 <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f0026be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026c1:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f0026c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026c7:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f0026ca:	eb 13                	jmp    9f0026df <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f0026cc:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f0026d0:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f0026d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0026d7:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0026da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0026dd:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f0026df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0026e2:	8d 50 ff             	lea    edx,[eax-0x1]
9f0026e5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0026e8:	85 c0                	test   eax,eax
9f0026ea:	75 e0                	jne    9f0026cc <memcpyI+0x150>
9f0026ec:	eb 24                	jmp    9f002712 <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f0026ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0026f1:	8d 50 01             	lea    edx,[eax+0x1]
9f0026f4:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f0026f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0026fa:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0026fd:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f002700:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002703:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f002705:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002708:	8d 50 ff             	lea    edx,[eax-0x1]
9f00270b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00270e:	85 c0                	test   eax,eax
9f002710:	75 dc                	jne    9f0026ee <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f002712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f002715:	c9                   	leave  
9f002716:	c3                   	ret    

9f002717 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f002717:	55                   	push   ebp
9f002718:	89 e5                	mov    ebp,esp
9f00271a:	e8 73 21 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00271f:	05 1d 4a 00 00       	add    eax,0x4a1d
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f002724:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002727:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00272a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00272d:	e8 4a fe ff ff       	call   9f00257c <memcpyI>
9f002732:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f002735:	c9                   	leave  
9f002736:	c3                   	ret    
9f002737:	90                   	nop

9f002738 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f002738:	55                   	push   ebp
9f002739:	89 e5                	mov    ebp,esp
9f00273b:	83 ec 20             	sub    esp,0x20
9f00273e:	e8 4f 21 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002743:	05 f9 49 00 00       	add    eax,0x49f9
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f002748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00274b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f00274e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002751:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f002754:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002757:	c1 e0 10             	shl    eax,0x10
9f00275a:	89 c2                	mov    edx,eax
9f00275c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00275f:	c1 e0 08             	shl    eax,0x8
9f002762:	09 c2                	or     edx,eax
9f002764:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002767:	09 d0                	or     eax,edx
9f002769:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f00276d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002770:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f002773:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002776:	c1 e0 18             	shl    eax,0x18
9f002779:	89 c2                	mov    edx,eax
9f00277b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00277e:	c1 e0 10             	shl    eax,0x10
9f002781:	09 c2                	or     edx,eax
9f002783:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002786:	c1 e0 08             	shl    eax,0x8
9f002789:	09 d0                	or     eax,edx
9f00278b:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f00278e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f002791:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002794:	83 e0 03             	and    eax,0x3
9f002797:	85 c0                	test   eax,eax
9f002799:	75 1c                	jne    9f0027b7 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f00279b:	eb 0e                	jmp    9f0027ab <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f00279d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0027a0:	8d 50 04             	lea    edx,[eax+0x4]
9f0027a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0027a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0027a9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f0027ab:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f0027af:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0027b3:	75 e8                	jne    9f00279d <memsetI+0x65>
9f0027b5:	eb 43                	jmp    9f0027fa <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f0027b7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027ba:	83 e0 01             	and    eax,0x1
9f0027bd:	85 c0                	test   eax,eax
9f0027bf:	75 2c                	jne    9f0027ed <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f0027c1:	eb 10                	jmp    9f0027d3 <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f0027c3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0027c6:	8d 50 02             	lea    edx,[eax+0x2]
9f0027c9:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0027cc:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f0027d0:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f0027d3:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f0027d7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0027db:	75 e6                	jne    9f0027c3 <memsetI+0x8b>
9f0027dd:	eb 1b                	jmp    9f0027fa <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f0027df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0027e2:	8d 50 01             	lea    edx,[eax+0x1]
9f0027e5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0027e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0027eb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f0027ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027f0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0027f3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0027f6:	85 c0                	test   eax,eax
9f0027f8:	75 e5                	jne    9f0027df <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f0027fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f0027fd:	c9                   	leave  
9f0027fe:	c3                   	ret    

9f0027ff <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f0027ff:	55                   	push   ebp
9f002800:	89 e5                	mov    ebp,esp
9f002802:	e8 8b 20 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002807:	05 35 49 00 00       	add    eax,0x4935
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f00280c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00280f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002812:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002815:	e8 1e ff ff ff       	call   9f002738 <memsetI>
9f00281a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f00281d:	c9                   	leave  
9f00281e:	c3                   	ret    
9f00281f:	90                   	nop

9f002820 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f002820:	55                   	push   ebp
9f002821:	89 e5                	mov    ebp,esp
9f002823:	53                   	push   ebx
9f002824:	83 ec 04             	sub    esp,0x4
9f002827:	e8 66 20 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00282c:	05 10 49 00 00       	add    eax,0x4910
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f002831:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002834:	83 ec 08             	sub    esp,0x8
9f002837:	52                   	push   edx
9f002838:	6a 0e                	push   0xe
9f00283a:	89 c3                	mov    ebx,eax
9f00283c:	e8 bb ea ff ff       	call   9f0012fc <do_syscall1>
9f002841:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f002844:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002847:	c9                   	leave  
9f002848:	c3                   	ret    

9f002849 <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f002849:	55                   	push   ebp
9f00284a:	89 e5                	mov    ebp,esp
9f00284c:	53                   	push   ebx
9f00284d:	83 ec 04             	sub    esp,0x4
9f002850:	e8 3d 20 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002855:	05 e7 48 00 00       	add    eax,0x48e7
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f00285a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f00285d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002860:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002863:	53                   	push   ebx
9f002864:	51                   	push   ecx
9f002865:	52                   	push   edx
9f002866:	6a 0f                	push   0xf
9f002868:	89 c3                	mov    ebx,eax
9f00286a:	e8 13 ea ff ff       	call   9f001282 <do_syscall3>
9f00286f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f002872:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002875:	c9                   	leave  
9f002876:	c3                   	ret    
9f002877:	90                   	nop

9f002878 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f002878:	55                   	push   ebp
9f002879:	89 e5                	mov    ebp,esp
9f00287b:	53                   	push   ebx
9f00287c:	83 ec 10             	sub    esp,0x10
9f00287f:	e8 0e 20 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002884:	05 b8 48 00 00       	add    eax,0x48b8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f002889:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f002890:	eb 29                	jmp    9f0028bb <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f002892:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002895:	89 d0                	mov    eax,edx
9f002897:	c1 e0 02             	shl    eax,0x2
9f00289a:	01 d0                	add    eax,edx
9f00289c:	01 c0                	add    eax,eax
9f00289e:	89 c3                	mov    ebx,eax
9f0028a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028a3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0028a5:	8d 48 01             	lea    ecx,[eax+0x1]
9f0028a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0028ab:	89 0a                	mov    DWORD PTR [edx],ecx
9f0028ad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028b0:	0f be c0             	movsx  eax,al
9f0028b3:	01 d8                	add    eax,ebx
9f0028b5:	83 e8 30             	sub    eax,0x30
9f0028b8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f0028bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028be:	8b 00                	mov    eax,DWORD PTR [eax]
9f0028c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028c3:	0f be c0             	movsx  eax,al
9f0028c6:	83 e8 30             	sub    eax,0x30
9f0028c9:	83 f8 09             	cmp    eax,0x9
9f0028cc:	76 c4                	jbe    9f002892 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f0028ce:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f0028d1:	83 c4 10             	add    esp,0x10
9f0028d4:	5b                   	pop    ebx
9f0028d5:	5d                   	pop    ebp
9f0028d6:	c3                   	ret    

9f0028d7 <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f0028d7:	55                   	push   ebp
9f0028d8:	89 e5                	mov    ebp,esp
9f0028da:	56                   	push   esi
9f0028db:	53                   	push   ebx
9f0028dc:	83 ec 60             	sub    esp,0x60
9f0028df:	e8 ec 1f 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0028e4:	81 c3 58 48 00 00    	add    ebx,0x4858
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f0028ea:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0028ed:	83 e0 20             	and    eax,0x20
9f0028f0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f0028f3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0028f6:	83 e0 10             	and    eax,0x10
9f0028f9:	85 c0                	test   eax,eax
9f0028fb:	74 04                	je     9f002901 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f0028fd:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f002901:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f002905:	7e 06                	jle    9f00290d <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f002907:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00290b:	7e 0a                	jle    9f002917 <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f00290d:	b8 00 00 00 00       	mov    eax,0x0
9f002912:	e9 f7 01 00 00       	jmp    9f002b0e <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f002917:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00291a:	83 e0 01             	and    eax,0x1
9f00291d:	85 c0                	test   eax,eax
9f00291f:	74 07                	je     9f002928 <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f002921:	b8 30 00 00 00       	mov    eax,0x30
9f002926:	eb 05                	jmp    9f00292d <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f002928:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f00292d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f002930:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f002934:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002937:	83 e0 02             	and    eax,0x2
9f00293a:	85 c0                	test   eax,eax
9f00293c:	74 39                	je     9f002977 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f00293e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002942:	79 0d                	jns    9f002951 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f002944:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f002948:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f00294b:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f00294f:	eb 26                	jmp    9f002977 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f002951:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002954:	83 e0 04             	and    eax,0x4
9f002957:	85 c0                	test   eax,eax
9f002959:	74 0a                	je     9f002965 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f00295b:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f00295f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f002963:	eb 12                	jmp    9f002977 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f002965:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002968:	83 e0 08             	and    eax,0x8
9f00296b:	85 c0                	test   eax,eax
9f00296d:	74 08                	je     9f002977 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f00296f:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f002973:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f002977:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00297a:	83 e0 40             	and    eax,0x40
9f00297d:	85 c0                	test   eax,eax
9f00297f:	74 16                	je     9f002997 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f002981:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002985:	75 06                	jne    9f00298d <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f002987:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f00298b:	eb 0a                	jmp    9f002997 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f00298d:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f002991:	75 04                	jne    9f002997 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f002993:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f002997:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f00299e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0029a2:	75 4d                	jne    9f0029f1 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f0029a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0029a7:	8d 50 01             	lea    edx,[eax+0x1]
9f0029aa:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0029ad:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f0029b2:	eb 43                	jmp    9f0029f7 <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f0029b4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0029b7:	8d 41 01             	lea    eax,[ecx+0x1]
9f0029ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0029bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029c0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0029c3:	ba 00 00 00 00       	mov    edx,0x0
9f0029c8:	f7 f6                	div    esi
9f0029ca:	89 d0                	mov    eax,edx
9f0029cc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0029cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029d2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0029d5:	ba 00 00 00 00       	mov    edx,0x0
9f0029da:	f7 f6                	div    esi
9f0029dc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f0029df:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0029e2:	0f b6 84 03 c0 fc ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x340]
9f0029e9:	ff 
9f0029ea:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f0029ed:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f0029f1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0029f5:	75 bd                	jne    9f0029b4 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f0029f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0029fa:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f0029fd:	7e 06                	jle    9f002a05 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f0029ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a02:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f002a05:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f002a08:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f002a0b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002a0e:	83 e0 11             	and    eax,0x11
9f002a11:	85 c0                	test   eax,eax
9f002a13:	75 1b                	jne    9f002a30 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f002a15:	eb 0c                	jmp    9f002a23 <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f002a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a1a:	8d 50 01             	lea    edx,[eax+0x1]
9f002a1d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a20:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f002a23:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002a26:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a29:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002a2c:	85 c0                	test   eax,eax
9f002a2e:	7f e7                	jg     9f002a17 <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f002a30:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f002a34:	74 0f                	je     9f002a45 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f002a36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a39:	8d 50 01             	lea    edx,[eax+0x1]
9f002a3c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a3f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f002a43:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f002a45:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002a48:	83 e0 40             	and    eax,0x40
9f002a4b:	85 c0                	test   eax,eax
9f002a4d:	74 38                	je     9f002a87 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f002a4f:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f002a53:	75 0e                	jne    9f002a63 <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f002a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a58:	8d 50 01             	lea    edx,[eax+0x1]
9f002a5b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a5e:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f002a61:	eb 24                	jmp    9f002a87 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f002a63:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002a67:	75 1e                	jne    9f002a87 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f002a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a6c:	8d 50 01             	lea    edx,[eax+0x1]
9f002a6f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a72:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f002a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a78:	8d 50 01             	lea    edx,[eax+0x1]
9f002a7b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a7e:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f002a82:	83 ca 58             	or     edx,0x58
9f002a85:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f002a87:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f002a8a:	83 e0 10             	and    eax,0x10
9f002a8d:	85 c0                	test   eax,eax
9f002a8f:	75 2c                	jne    9f002abd <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f002a91:	eb 0f                	jmp    9f002aa2 <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f002a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a96:	8d 50 01             	lea    edx,[eax+0x1]
9f002a99:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002a9c:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f002aa0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f002aa2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002aa5:	8d 50 ff             	lea    edx,[eax-0x1]
9f002aa8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002aab:	85 c0                	test   eax,eax
9f002aad:	7f e4                	jg     9f002a93 <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f002aaf:	eb 0c                	jmp    9f002abd <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f002ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ab4:	8d 50 01             	lea    edx,[eax+0x1]
9f002ab7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002aba:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f002abd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f002ac0:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ac3:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f002ac6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002ac9:	7f e6                	jg     9f002ab1 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f002acb:	eb 16                	jmp    9f002ae3 <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f002acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ad0:	8d 50 01             	lea    edx,[eax+0x1]
9f002ad3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002ad6:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f002ad9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f002adc:	01 ca                	add    edx,ecx
9f002ade:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002ae1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f002ae3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002ae6:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ae9:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f002aec:	85 c0                	test   eax,eax
9f002aee:	7f dd                	jg     9f002acd <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f002af0:	eb 0c                	jmp    9f002afe <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f002af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002af5:	8d 50 01             	lea    edx,[eax+0x1]
9f002af8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f002afb:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f002afe:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f002b01:	8d 50 ff             	lea    edx,[eax-0x1]
9f002b04:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f002b07:	85 c0                	test   eax,eax
9f002b09:	7f e7                	jg     9f002af2 <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f002b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f002b0e:	83 c4 60             	add    esp,0x60
9f002b11:	5b                   	pop    ebx
9f002b12:	5e                   	pop    esi
9f002b13:	5d                   	pop    ebp
9f002b14:	c3                   	ret    

9f002b15 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f002b15:	55                   	push   ebp
9f002b16:	89 e5                	mov    ebp,esp
9f002b18:	53                   	push   ebx
9f002b19:	83 ec 34             	sub    esp,0x34
9f002b1c:	e8 af 1d 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f002b21:	81 c3 1b 46 00 00    	add    ebx,0x461b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b2a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f002b2d:	e9 08 04 00 00       	jmp    9f002f3a <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f002b32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b35:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b38:	3c 25                	cmp    al,0x25
9f002b3a:	74 16                	je     9f002b52 <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f002b3c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002b3f:	8d 50 01             	lea    edx,[eax+0x1]
9f002b42:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002b45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002b48:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002b4b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f002b4d:	e9 df 03 00 00       	jmp    9f002f31 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f002b52:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f002b59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b5c:	83 c0 01             	add    eax,0x1
9f002b5f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f002b62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002b65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002b68:	0f be c0             	movsx  eax,al
9f002b6b:	83 e8 20             	sub    eax,0x20
9f002b6e:	83 f8 10             	cmp    eax,0x10
9f002b71:	77 2c                	ja     9f002b9f <.L43>
9f002b73:	c1 e0 02             	shl    eax,0x2
9f002b76:	8b 84 18 2c fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4d4]
9f002b7d:	01 d8                	add    eax,ebx
9f002b7f:	ff e0                	jmp    eax

9f002b81 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f002b81:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f002b85:	eb d2                	jmp    9f002b59 <vsprintf+0x44>

9f002b87 <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f002b87:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f002b8b:	eb cc                	jmp    9f002b59 <vsprintf+0x44>

9f002b8d <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f002b8d:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f002b91:	eb c6                	jmp    9f002b59 <vsprintf+0x44>

9f002b93 <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f002b93:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f002b97:	eb c0                	jmp    9f002b59 <vsprintf+0x44>

9f002b99 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f002b99:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f002b9d:	eb ba                	jmp    9f002b59 <vsprintf+0x44>

9f002b9f <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f002b9f:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f002ba6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ba9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bac:	0f be c0             	movsx  eax,al
9f002baf:	83 e8 30             	sub    eax,0x30
9f002bb2:	83 f8 09             	cmp    eax,0x9
9f002bb5:	77 11                	ja     9f002bc8 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f002bb7:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002bba:	50                   	push   eax
9f002bbb:	e8 b8 fc ff ff       	call   9f002878 <skip_atoi>
9f002bc0:	83 c4 04             	add    esp,0x4
9f002bc3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f002bc6:	eb 2e                	jmp    9f002bf6 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f002bc8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bcb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002bce:	3c 2a                	cmp    al,0x2a
9f002bd0:	75 24                	jne    9f002bf6 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f002bd2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bd5:	83 c0 01             	add    eax,0x1
9f002bd8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f002bdb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002bde:	8d 50 04             	lea    edx,[eax+0x4]
9f002be1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002be4:	8b 00                	mov    eax,DWORD PTR [eax]
9f002be6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f002be9:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002bed:	79 07                	jns    9f002bf6 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f002bef:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f002bf2:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f002bf6:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f002bfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c00:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c03:	3c 2e                	cmp    al,0x2e
9f002c05:	75 59                	jne    9f002c60 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f002c07:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c0a:	83 c0 01             	add    eax,0x1
9f002c0d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f002c10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c16:	0f be c0             	movsx  eax,al
9f002c19:	83 e8 30             	sub    eax,0x30
9f002c1c:	83 f8 09             	cmp    eax,0x9
9f002c1f:	77 11                	ja     9f002c32 <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f002c21:	8d 45 0c             	lea    eax,[ebp+0xc]
9f002c24:	50                   	push   eax
9f002c25:	e8 4e fc ff ff       	call   9f002878 <skip_atoi>
9f002c2a:	83 c4 04             	add    esp,0x4
9f002c2d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f002c30:	eb 21                	jmp    9f002c53 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f002c32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c35:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c38:	3c 2a                	cmp    al,0x2a
9f002c3a:	75 17                	jne    9f002c53 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f002c3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c3f:	83 c0 01             	add    eax,0x1
9f002c42:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f002c45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002c48:	8d 50 04             	lea    edx,[eax+0x4]
9f002c4b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002c4e:	8b 00                	mov    eax,DWORD PTR [eax]
9f002c50:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f002c53:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f002c57:	79 07                	jns    9f002c60 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f002c59:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f002c60:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f002c67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c6a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c6d:	3c 68                	cmp    al,0x68
9f002c6f:	74 14                	je     9f002c85 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f002c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c74:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c77:	3c 6c                	cmp    al,0x6c
9f002c79:	74 0a                	je     9f002c85 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f002c7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c81:	3c 4c                	cmp    al,0x4c
9f002c83:	75 15                	jne    9f002c9a <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f002c85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c88:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002c8b:	0f be c0             	movsx  eax,al
9f002c8e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f002c91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c94:	83 c0 01             	add    eax,0x1
9f002c97:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f002c9a:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f002ca1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ca4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002ca7:	0f be c0             	movsx  eax,al
9f002caa:	83 e8 25             	sub    eax,0x25
9f002cad:	83 f8 53             	cmp    eax,0x53
9f002cb0:	0f 87 b5 01 00 00    	ja     9f002e6b <.L57>
9f002cb6:	c1 e0 02             	shl    eax,0x2
9f002cb9:	8b 84 18 70 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x490]
9f002cc0:	01 d8                	add    eax,ebx
9f002cc2:	ff e0                	jmp    eax

9f002cc4 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f002cc4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002cc7:	83 e0 10             	and    eax,0x10
9f002cca:	85 c0                	test   eax,eax
9f002ccc:	75 18                	jne    9f002ce6 <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f002cce:	eb 0c                	jmp    9f002cdc <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f002cd0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002cd3:	8d 50 01             	lea    edx,[eax+0x1]
9f002cd6:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002cd9:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f002cdc:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002ce0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002ce4:	7f ea                	jg     9f002cd0 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f002ce6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002ce9:	8d 50 01             	lea    edx,[eax+0x1]
9f002cec:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002cef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f002cf2:	8d 4a 04             	lea    ecx,[edx+0x4]
9f002cf5:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f002cf8:	8b 12                	mov    edx,DWORD PTR [edx]
9f002cfa:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f002cfc:	eb 0c                	jmp    9f002d0a <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f002cfe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d01:	8d 50 01             	lea    edx,[eax+0x1]
9f002d04:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d07:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f002d0a:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f002d0e:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f002d12:	7f ea                	jg     9f002cfe <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f002d14:	e9 18 02 00 00       	jmp    9f002f31 <.L96+0x8c>

9f002d19 <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f002d19:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002d1c:	8d 50 04             	lea    edx,[eax+0x4]
9f002d1f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002d22:	8b 00                	mov    eax,DWORD PTR [eax]
9f002d24:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f002d27:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f002d2b:	74 13                	je     9f002d40 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f002d2d:	83 ec 0c             	sub    esp,0xc
9f002d30:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f002d33:	e8 c0 05 00 00       	call   9f0032f8 <strlenI>
9f002d38:	83 c4 10             	add    esp,0x10
9f002d3b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f002d3e:	eb 07                	jmp    9f002d47 <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f002d40:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f002d47:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002d4a:	83 e0 10             	and    eax,0x10
9f002d4d:	85 c0                	test   eax,eax
9f002d4f:	75 1c                	jne    9f002d6d <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f002d51:	eb 0c                	jmp    9f002d5f <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f002d53:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d56:	8d 50 01             	lea    edx,[eax+0x1]
9f002d59:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d5c:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f002d5f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002d62:	8d 50 ff             	lea    edx,[eax-0x1]
9f002d65:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002d68:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002d6b:	7f e6                	jg     9f002d53 <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002d6d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f002d74:	eb 1b                	jmp    9f002d91 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f002d76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d79:	8d 50 01             	lea    edx,[eax+0x1]
9f002d7c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002d7f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f002d82:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002d85:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f002d88:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002d8b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f002d8d:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f002d91:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002d94:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002d97:	7c dd                	jl     9f002d76 <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f002d99:	eb 0c                	jmp    9f002da7 <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f002d9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002d9e:	8d 50 01             	lea    edx,[eax+0x1]
9f002da1:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002da4:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f002da7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f002daa:	8d 50 ff             	lea    edx,[eax-0x1]
9f002dad:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f002db0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f002db3:	7f e6                	jg     9f002d9b <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f002db5:	e9 77 01 00 00       	jmp    9f002f31 <.L96+0x8c>

9f002dba <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f002dba:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f002dbe:	75 0b                	jne    9f002dcb <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f002dc0:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f002dc7:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f002dcb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002dce:	8d 50 04             	lea    edx,[eax+0x4]
9f002dd1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002dd4:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f002dd6:	83 ec 08             	sub    esp,0x8
9f002dd9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002ddc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002ddf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002de2:	6a 10                	push   0x10
9f002de4:	50                   	push   eax
9f002de5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002de8:	e8 ea fa ff ff       	call   9f0028d7 <number>
9f002ded:	83 c4 20             	add    esp,0x20
9f002df0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f002df3:	e9 39 01 00 00       	jmp    9f002f31 <.L96+0x8c>

9f002df8 <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f002df8:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002dfc:	75 20                	jne    9f002e1e <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f002dfe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002e01:	8d 50 04             	lea    edx,[eax+0x4]
9f002e04:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002e07:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e09:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f002e0c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e12:	29 c2                	sub    edx,eax
9f002e14:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f002e17:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f002e19:	e9 13 01 00 00       	jmp    9f002f31 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f002e1e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002e21:	8d 50 04             	lea    edx,[eax+0x4]
9f002e24:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002e27:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e29:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f002e2c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e32:	29 c2                	sub    edx,eax
9f002e34:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f002e37:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f002e39:	e9 f3 00 00 00       	jmp    9f002f31 <.L96+0x8c>

9f002e3e <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f002e3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002e41:	8d 50 01             	lea    edx,[eax+0x1]
9f002e44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002e47:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f002e4a:	e9 e2 00 00 00       	jmp    9f002f31 <.L96+0x8c>

9f002e4f <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f002e4f:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f002e56:	eb 4e                	jmp    9f002ea6 <.L96+0x1>

9f002e58 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f002e58:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f002e5c <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f002e5c:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f002e63:	eb 41                	jmp    9f002ea6 <.L96+0x1>

9f002e65 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f002e65:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f002e69:	eb 3a                	jmp    9f002ea5 <.L96>

9f002e6b <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f002e6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002e6e:	8d 50 01             	lea    edx,[eax+0x1]
9f002e71:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002e74:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f002e77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002e7a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002e7d:	84 c0                	test   al,al
9f002e7f:	74 16                	je     9f002e97 <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f002e81:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002e84:	8d 50 01             	lea    edx,[eax+0x1]
9f002e87:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f002e8a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002e8d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f002e90:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f002e92:	e9 9a 00 00 00       	jmp    9f002f31 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f002e97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002e9a:	83 e8 01             	sub    eax,0x1
9f002e9d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f002ea0:	e9 8c 00 00 00       	jmp    9f002f31 <.L96+0x8c>

9f002ea5 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f002ea5:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f002ea6:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f002eaa:	75 10                	jne    9f002ebc <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f002eac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002eaf:	8d 50 04             	lea    edx,[eax+0x4]
9f002eb2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002eb5:	8b 00                	mov    eax,DWORD PTR [eax]
9f002eb7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002eba:	eb 54                	jmp    9f002f10 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f002ebc:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f002ec0:	75 26                	jne    9f002ee8 <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f002ec2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ec5:	8d 50 04             	lea    edx,[eax+0x4]
9f002ec8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002ecb:	8b 00                	mov    eax,DWORD PTR [eax]
9f002ecd:	25 ff ff 00 00       	and    eax,0xffff
9f002ed2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f002ed5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002ed8:	83 e0 02             	and    eax,0x2
9f002edb:	85 c0                	test   eax,eax
9f002edd:	74 31                	je     9f002f10 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f002edf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002ee2:	98                   	cwde   
9f002ee3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002ee6:	eb 28                	jmp    9f002f10 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f002ee8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f002eeb:	83 e0 02             	and    eax,0x2
9f002eee:	85 c0                	test   eax,eax
9f002ef0:	74 10                	je     9f002f02 <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f002ef2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002ef5:	8d 50 04             	lea    edx,[eax+0x4]
9f002ef8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002efb:	8b 00                	mov    eax,DWORD PTR [eax]
9f002efd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f002f00:	eb 0e                	jmp    9f002f10 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f002f02:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002f05:	8d 50 04             	lea    edx,[eax+0x4]
9f002f08:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002f0b:	8b 00                	mov    eax,DWORD PTR [eax]
9f002f0d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f002f10:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002f13:	83 ec 08             	sub    esp,0x8
9f002f16:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f002f19:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f002f1c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f002f1f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002f22:	50                   	push   eax
9f002f23:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f002f26:	e8 ac f9 ff ff       	call   9f0028d7 <number>
9f002f2b:	83 c4 20             	add    esp,0x20
9f002f2e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002f31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002f34:	83 c0 01             	add    eax,0x1
9f002f37:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f002f3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002f3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002f40:	84 c0                	test   al,al
9f002f42:	0f 85 ea fb ff ff    	jne    9f002b32 <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f002f48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f002f4b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f002f4e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f54:	29 c2                	sub    edx,eax
9f002f56:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f002f58:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002f5b:	c9                   	leave  
9f002f5c:	c3                   	ret    

9f002f5d <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

VISIBLE int sprintf(char *buf, const char *fmt, ...)
{
9f002f5d:	55                   	push   ebp
9f002f5e:	89 e5                	mov    ebp,esp
9f002f60:	83 ec 18             	sub    esp,0x18
9f002f63:	e8 2a 19 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f002f68:	05 d4 41 00 00       	add    eax,0x41d4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f002f6d:	8d 45 10             	lea    eax,[ebp+0x10]
9f002f70:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f002f73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002f76:	83 ec 04             	sub    esp,0x4
9f002f79:	50                   	push   eax
9f002f7a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002f7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002f80:	e8 90 fb ff ff       	call   9f002b15 <vsprintf>
9f002f85:	83 c4 10             	add    esp,0x10
9f002f88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f002f8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f002f8e:	c9                   	leave  
9f002f8f:	c3                   	ret    

9f002f90 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:17
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f002f90:	55                   	push   ebp
9f002f91:	89 e5                	mov    ebp,esp
9f002f93:	53                   	push   ebx
9f002f94:	83 ec 14             	sub    esp,0x14
9f002f97:	e8 34 19 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f002f9c:	81 c3 a0 41 00 00    	add    ebx,0x41a0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:19
    char buff[5];
    int buffPtr=0;
9f002fa2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:21

    memsetI(buff,0,10);
9f002fa9:	83 ec 04             	sub    esp,0x4
9f002fac:	6a 0a                	push   0xa
9f002fae:	6a 00                	push   0x0
9f002fb0:	8d 45 ef             	lea    eax,[ebp-0x11]
9f002fb3:	50                   	push   eax
9f002fb4:	e8 7f f7 ff ff       	call   9f002738 <memsetI>
9f002fb9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:24
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f002fbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fbf:	8d 50 01             	lea    edx,[eax+0x1]
9f002fc2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fc5:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    buff[buffPtr++] = '[';
9f002fca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fcd:	8d 50 01             	lea    edx,[eax+0x1]
9f002fd0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fd3:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '0';
9f002fd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fdb:	8d 50 01             	lea    edx,[eax+0x1]
9f002fde:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fe1:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = 'K';
9f002fe6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002fe9:	8d 50 01             	lea    edx,[eax+0x1]
9f002fec:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002fef:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr] = '\0';
9f002ff4:	8d 55 ef             	lea    edx,[ebp-0x11]
9f002ff7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002ffa:	01 d0                	add    eax,edx
9f002ffc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    printI(buff);
9f002fff:	83 ec 0c             	sub    esp,0xc
9f003002:	8d 45 ef             	lea    eax,[ebp-0x11]
9f003005:	50                   	push   eax
9f003006:	e8 62 e5 ff ff       	call   9f00156d <printI>
9f00300b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:31
    
    return;
9f00300e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
}
9f00300f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003012:	c9                   	leave  
9f003013:	c3                   	ret    

9f003014 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f003014:	55                   	push   ebp
9f003015:	89 e5                	mov    ebp,esp
9f003017:	53                   	push   ebx
9f003018:	83 ec 04             	sub    esp,0x4
9f00301b:	e8 b0 18 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f003020:	81 c3 1c 41 00 00    	add    ebx,0x411c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f003026:	83 ec 0c             	sub    esp,0xc
9f003029:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00302c:	e8 c7 02 00 00       	call   9f0032f8 <strlenI>
9f003031:	83 c4 10             	add    esp,0x10
9f003034:	89 c2                	mov    edx,eax
9f003036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003039:	01 d0                	add    eax,edx
9f00303b:	83 ec 08             	sub    esp,0x8
9f00303e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003041:	50                   	push   eax
9f003042:	e8 9d 01 00 00       	call   9f0031e4 <strcpyI>
9f003047:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f00304a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f00304d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003050:	c9                   	leave  
9f003051:	c3                   	ret    

9f003052 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f003052:	55                   	push   ebp
9f003053:	89 e5                	mov    ebp,esp
9f003055:	53                   	push   ebx
9f003056:	83 ec 04             	sub    esp,0x4
9f003059:	e8 72 18 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f00305e:	81 c3 de 40 00 00    	add    ebx,0x40de
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f003064:	83 ec 0c             	sub    esp,0xc
9f003067:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00306a:	e8 89 02 00 00       	call   9f0032f8 <strlenI>
9f00306f:	83 c4 10             	add    esp,0x10
9f003072:	89 c2                	mov    edx,eax
9f003074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003077:	01 d0                	add    eax,edx
9f003079:	83 ec 08             	sub    esp,0x8
9f00307c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00307f:	50                   	push   eax
9f003080:	e8 5f 01 00 00       	call   9f0031e4 <strcpyI>
9f003085:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f003088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f00308b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00308e:	c9                   	leave  
9f00308f:	c3                   	ret    

9f003090 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:42
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f003090:	55                   	push   ebp
9f003091:	89 e5                	mov    ebp,esp
9f003093:	53                   	push   ebx
9f003094:	83 ec 14             	sub    esp,0x14
9f003097:	e8 34 18 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f00309c:	81 c3 a0 40 00 00    	add    ebx,0x40a0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
    size_t bytesToCopy=0;
9f0030a2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t srcStringLen=strlenI(src);;
9f0030a9:	83 ec 0c             	sub    esp,0xc
9f0030ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0030af:	e8 44 02 00 00       	call   9f0032f8 <strlenI>
9f0030b4:	83 c4 10             	add    esp,0x10
9f0030b7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
    
    if (n<=srcStringLen)
9f0030ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0030bd:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0030c0:	77 08                	ja     9f0030ca <strncatI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
        bytesToCopy=n;
9f0030c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0030c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0030c8:	eb 06                	jmp    9f0030d0 <strncatI+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:49
    else
        bytesToCopy=srcStringLen;
9f0030ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0030cd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:51
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f0030d0:	83 ec 0c             	sub    esp,0xc
9f0030d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0030d6:	e8 1d 02 00 00       	call   9f0032f8 <strlenI>
9f0030db:	83 c4 10             	add    esp,0x10
9f0030de:	89 c2                	mov    edx,eax
9f0030e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030e3:	01 d0                	add    eax,edx
9f0030e5:	83 ec 04             	sub    esp,0x4
9f0030e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0030eb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0030ee:	50                   	push   eax
9f0030ef:	e8 78 03 00 00       	call   9f00346c <strncpyI>
9f0030f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
     return dest;
9f0030f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
}
9f0030fa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0030fd:	c9                   	leave  
9f0030fe:	c3                   	ret    

9f0030ff <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:56

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f0030ff:	55                   	push   ebp
9f003100:	89 e5                	mov    ebp,esp
9f003102:	83 ec 08             	sub    esp,0x8
9f003105:	e8 88 17 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00310a:	05 32 40 00 00       	add    eax,0x4032
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57
    return strncatI(dest, src, n);
9f00310f:	83 ec 04             	sub    esp,0x4
9f003112:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003115:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003118:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00311b:	e8 70 ff ff ff       	call   9f003090 <strncatI>
9f003120:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
9f003123:	c9                   	leave  
9f003124:	c3                   	ret    
9f003125:	66 90                	xchg   ax,ax
9f003127:	90                   	nop

9f003128 <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f003128:	55                   	push   ebp
9f003129:	89 e5                	mov    ebp,esp
9f00312b:	56                   	push   esi
9f00312c:	53                   	push   ebx
9f00312d:	83 ec 10             	sub    esp,0x10
9f003130:	e8 5d 17 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003135:	05 07 40 00 00       	add    eax,0x4007
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f00313a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f00313d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f003140:	89 d8                	mov    eax,ebx
9f003142:	8d 58 01             	lea    ebx,[eax+0x1]
9f003145:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003148:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f00314b:	89 f0                	mov    eax,esi
9f00314d:	8d 70 01             	lea    esi,[eax+0x1]
9f003150:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003153:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f003156:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f00315a:	75 0e                	jne    9f00316a <strcmpI+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f00315c:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003160:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f003164:	29 c2                	sub    edx,eax
9f003166:	89 d0                	mov    eax,edx
9f003168:	eb 15                	jmp    9f00317f <strcmpI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f00316a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f00316e:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f003171:	74 cd                	je     9f003140 <strcmpI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f003173:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003177:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f00317b:	29 c2                	sub    edx,eax
9f00317d:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f00317f:	83 c4 10             	add    esp,0x10
9f003182:	5b                   	pop    ebx
9f003183:	5e                   	pop    esi
9f003184:	5d                   	pop    ebp
9f003185:	c3                   	ret    

9f003186 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f003186:	55                   	push   ebp
9f003187:	89 e5                	mov    ebp,esp
9f003189:	e8 04 17 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00318e:	05 ae 3f 00 00       	add    eax,0x3fae
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f003193:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003196:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003199:	e8 8a ff ff ff       	call   9f003128 <strcmpI>
9f00319e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f0031a1:	c9                   	leave  
9f0031a2:	c3                   	ret    
9f0031a3:	90                   	nop

9f0031a4 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f0031a4:	55                   	push   ebp
9f0031a5:	89 e5                	mov    ebp,esp
9f0031a7:	83 ec 10             	sub    esp,0x10
9f0031aa:	e8 e3 16 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0031af:	05 8d 3f 00 00       	add    eax,0x3f8d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f0031b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031b7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f0031ba:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f0031bb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0031be:	8d 50 01             	lea    edx,[eax+0x1]
9f0031c1:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0031c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0031c7:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0031ca:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0031cd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0031d0:	88 10                	mov    BYTE PTR [eax],dl
9f0031d2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0031d5:	84 c0                	test   al,al
9f0031d7:	75 e2                	jne    9f0031bb <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f0031d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0031dc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f0031df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f0031e2:	c9                   	leave  
9f0031e3:	c3                   	ret    

9f0031e4 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f0031e4:	55                   	push   ebp
9f0031e5:	89 e5                	mov    ebp,esp
9f0031e7:	83 ec 10             	sub    esp,0x10
9f0031ea:	e8 a3 16 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0031ef:	05 4d 3f 00 00       	add    eax,0x3f4d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f0031f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f0031fa:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f0031fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0031fe:	8d 50 01             	lea    edx,[eax+0x1]
9f003201:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003204:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003207:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00320a:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f00320d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003210:	88 10                	mov    BYTE PTR [eax],dl
9f003212:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003215:	84 c0                	test   al,al
9f003217:	75 e2                	jne    9f0031fb <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003219:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00321c:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f00321f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f003222:	c9                   	leave  
9f003223:	c3                   	ret    

9f003224 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f003224:	55                   	push   ebp
9f003225:	89 e5                	mov    ebp,esp
9f003227:	83 ec 10             	sub    esp,0x10
9f00322a:	e8 63 16 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00322f:	05 0d 3f 00 00       	add    eax,0x3f0d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f003234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003237:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f00323a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f00323b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00323e:	8d 50 01             	lea    edx,[eax+0x1]
9f003241:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003244:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003247:	8d 4a 01             	lea    ecx,[edx+0x1]
9f00324a:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f00324d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003250:	88 10                	mov    BYTE PTR [eax],dl
9f003252:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003255:	84 c0                	test   al,al
9f003257:	74 0d                	je     9f003266 <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f003259:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00325c:	8d 50 ff             	lea    edx,[eax-0x1]
9f00325f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003262:	85 c0                	test   eax,eax
9f003264:	75 d5                	jne    9f00323b <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f003266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f003269:	c9                   	leave  
9f00326a:	c3                   	ret    
9f00326b:	90                   	nop

9f00326c <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f00326c:	55                   	push   ebp
9f00326d:	89 e5                	mov    ebp,esp
9f00326f:	83 ec 04             	sub    esp,0x4
9f003272:	e8 1b 16 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003277:	05 c5 3e 00 00       	add    eax,0x3ec5
9f00327c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00327f:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f003282:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f003286:	7e 0d                	jle    9f003295 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f003288:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f00328c:	7f 07                	jg     9f003295 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f00328e:	b8 01 00 00 00       	mov    eax,0x1
9f003293:	eb 05                	jmp    9f00329a <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f003295:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f00329a:	c9                   	leave  
9f00329b:	c3                   	ret    

9f00329c <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f00329c:	55                   	push   ebp
9f00329d:	89 e5                	mov    ebp,esp
9f00329f:	83 ec 10             	sub    esp,0x10
9f0032a2:	e8 eb 15 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0032a7:	05 95 3e 00 00       	add    eax,0x3e95
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f0032ac:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f0032b3:	eb 27                	jmp    9f0032dc <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f0032b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032b8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0032bb:	89 c2                	mov    edx,eax
9f0032bd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0032c0:	01 d0                	add    eax,edx
9f0032c2:	0f be c0             	movsx  eax,al
9f0032c5:	50                   	push   eax
9f0032c6:	e8 a1 ff ff ff       	call   9f00326c <check_digit>
9f0032cb:	83 c4 04             	add    esp,0x4
9f0032ce:	83 f0 01             	xor    eax,0x1
9f0032d1:	84 c0                	test   al,al
9f0032d3:	74 07                	je     9f0032dc <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f0032d5:	b8 00 00 00 00       	mov    eax,0x0
9f0032da:	eb 17                	jmp    9f0032f3 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f0032dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0032e2:	0f be d0             	movsx  edx,al
9f0032e5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0032e8:	01 d0                	add    eax,edx
9f0032ea:	85 c0                	test   eax,eax
9f0032ec:	75 c7                	jne    9f0032b5 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f0032ee:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f0032f3:	c9                   	leave  
9f0032f4:	c3                   	ret    
9f0032f5:	66 90                	xchg   ax,ax
9f0032f7:	90                   	nop

9f0032f8 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f0032f8:	55                   	push   ebp
9f0032f9:	89 e5                	mov    ebp,esp
9f0032fb:	83 ec 10             	sub    esp,0x10
9f0032fe:	e8 8f 15 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003303:	05 39 3e 00 00       	add    eax,0x3e39
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f003308:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f00330f:	eb 04                	jmp    9f003315 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f003311:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f003315:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003318:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00331b:	01 d0                	add    eax,edx
9f00331d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003320:	84 c0                	test   al,al
9f003322:	75 ed                	jne    9f003311 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f003324:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f003327:	c9                   	leave  
9f003328:	c3                   	ret    

9f003329 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f003329:	55                   	push   ebp
9f00332a:	89 e5                	mov    ebp,esp
9f00332c:	e8 61 15 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003331:	05 0b 3e 00 00       	add    eax,0x3e0b
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f003336:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003339:	e8 ba ff ff ff       	call   9f0032f8 <strlenI>
9f00333e:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f003341:	c9                   	leave  
9f003342:	c3                   	ret    

9f003343 <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f003343:	55                   	push   ebp
9f003344:	89 e5                	mov    ebp,esp
9f003346:	83 ec 10             	sub    esp,0x10
9f003349:	e8 44 15 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00334e:	05 ee 3d 00 00       	add    eax,0x3dee
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f003353:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f00335a:	eb 04                	jmp    9f003360 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f00335c:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f003360:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003363:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003366:	01 d0                	add    eax,edx
9f003368:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00336b:	84 c0                	test   al,al
9f00336d:	74 08                	je     9f003377 <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f00336f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003372:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f003375:	72 e5                	jb     9f00335c <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f003377:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f00337a:	c9                   	leave  
9f00337b:	c3                   	ret    

9f00337c <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f00337c:	55                   	push   ebp
9f00337d:	89 e5                	mov    ebp,esp
9f00337f:	e8 0e 15 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003384:	05 b8 3d 00 00       	add    eax,0x3db8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f003389:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00338c:	50                   	push   eax
9f00338d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003390:	e8 ae ff ff ff       	call   9f003343 <strnlenI>
9f003395:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f003398:	c9                   	leave  
9f003399:	c3                   	ret    
9f00339a:	66 90                	xchg   ax,ax

9f00339c <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f00339c:	55                   	push   ebp
9f00339d:	89 e5                	mov    ebp,esp
9f00339f:	e8 ee 14 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0033a4:	05 98 3d 00 00       	add    eax,0x3d98
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f0033a9:	eb 4b                	jmp    9f0033f6 <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f0033ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033ae:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0033b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033b7:	38 c2                	cmp    dl,al
9f0033b9:	74 1e                	je     9f0033d9 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f0033bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033be:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0033c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033c4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033c7:	38 c2                	cmp    dl,al
9f0033c9:	73 07                	jae    9f0033d2 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f0033cb:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0033d0:	eb 2f                	jmp    9f003401 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f0033d2:	b8 01 00 00 00       	mov    eax,0x1
9f0033d7:	eb 28                	jmp    9f003401 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f0033d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0033dc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033df:	84 c0                	test   al,al
9f0033e1:	75 07                	jne    9f0033ea <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f0033e3:	b8 00 00 00 00       	mov    eax,0x0
9f0033e8:	eb 17                	jmp    9f003401 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f0033ea:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f0033ee:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f0033f2:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f0033f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0033fa:	75 af                	jne    9f0033ab <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f0033fc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f003401:	5d                   	pop    ebp
9f003402:	c3                   	ret    

9f003403 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f003403:	55                   	push   ebp
9f003404:	89 e5                	mov    ebp,esp
9f003406:	e8 87 14 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f00340b:	05 31 3d 00 00       	add    eax,0x3d31
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f003410:	eb 4b                	jmp    9f00345d <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f003412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003415:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003418:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00341b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00341e:	38 c2                	cmp    dl,al
9f003420:	74 1e                	je     9f003440 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003425:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003428:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00342b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00342e:	38 c2                	cmp    dl,al
9f003430:	73 07                	jae    9f003439 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f003432:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003437:	eb 2f                	jmp    9f003468 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f003439:	b8 01 00 00 00       	mov    eax,0x1
9f00343e:	eb 28                	jmp    9f003468 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f003440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003443:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003446:	84 c0                	test   al,al
9f003448:	75 07                	jne    9f003451 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f00344a:	b8 00 00 00 00       	mov    eax,0x0
9f00344f:	eb 17                	jmp    9f003468 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f003451:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003455:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f003459:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f00345d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003461:	75 af                	jne    9f003412 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f003463:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f003468:	5d                   	pop    ebp
9f003469:	c3                   	ret    
9f00346a:	66 90                	xchg   ax,ax

9f00346c <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f00346c:	55                   	push   ebp
9f00346d:	89 e5                	mov    ebp,esp
9f00346f:	83 ec 10             	sub    esp,0x10
9f003472:	e8 1b 14 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003477:	05 c5 3c 00 00       	add    eax,0x3cc5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f00347c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00347f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f003482:	eb 1b                	jmp    9f00349f <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f003484:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003487:	8d 50 01             	lea    edx,[eax+0x1]
9f00348a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f00348d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003490:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003493:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003496:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003499:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f00349b:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f00349f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0034a3:	74 1c                	je     9f0034c1 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f0034a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0034ab:	84 c0                	test   al,al
9f0034ad:	75 d5                	jne    9f003484 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0034af:	eb 10                	jmp    9f0034c1 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f0034b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0034b4:	8d 50 01             	lea    edx,[eax+0x1]
9f0034b7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0034ba:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f0034bd:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0034c1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0034c5:	75 ea                	jne    9f0034b1 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    if (n==0)
9f0034c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0034cb:	75 06                	jne    9f0034d3 <strncpyI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f0034cd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0034d0:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f0034d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f0034d6:	c9                   	leave  
9f0034d7:	c3                   	ret    

9f0034d8 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f0034d8:	55                   	push   ebp
9f0034d9:	89 e5                	mov    ebp,esp
9f0034db:	e8 b2 13 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0034e0:	05 5c 3c 00 00       	add    eax,0x3c5c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f0034e5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0034e8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0034eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0034ee:	e8 79 ff ff ff       	call   9f00346c <strncpyI>
9f0034f3:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f0034f6:	c9                   	leave  
9f0034f7:	c3                   	ret    

9f0034f8 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f0034f8:	55                   	push   ebp
9f0034f9:	89 e5                	mov    ebp,esp
9f0034fb:	57                   	push   edi
9f0034fc:	56                   	push   esi
9f0034fd:	53                   	push   ebx
9f0034fe:	83 ec 08             	sub    esp,0x8
9f003501:	e8 8c 13 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003506:	05 36 3c 00 00       	add    eax,0x3c36
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f00350b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f00350e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f003515:	89 f0                	mov    eax,esi
9f003517:	8d 70 01             	lea    esi,[eax+0x1]
9f00351a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00351d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f003520:	83 fb 20             	cmp    ebx,0x20
9f003523:	74 f0                	je     9f003515 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f003525:	83 fb 2d             	cmp    ebx,0x2d
9f003528:	75 14                	jne    9f00353e <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f00352a:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f003531:	89 f0                	mov    eax,esi
9f003533:	8d 70 01             	lea    esi,[eax+0x1]
9f003536:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003539:	0f be d8             	movsx  ebx,al
9f00353c:	eb 10                	jmp    9f00354e <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f00353e:	83 fb 2b             	cmp    ebx,0x2b
9f003541:	75 0b                	jne    9f00354e <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f003543:	89 f0                	mov    eax,esi
9f003545:	8d 70 01             	lea    esi,[eax+0x1]
9f003548:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00354b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f00354e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003552:	74 06                	je     9f00355a <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f003554:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003558:	75 26                	jne    9f003580 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f00355a:	83 fb 30             	cmp    ebx,0x30
9f00355d:	75 21                	jne    9f003580 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f00355f:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003562:	3c 78                	cmp    al,0x78
9f003564:	74 07                	je     9f00356d <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f003566:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003569:	3c 58                	cmp    al,0x58
9f00356b:	75 13                	jne    9f003580 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f00356d:	8d 46 01             	lea    eax,[esi+0x1]
9f003570:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003573:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f003576:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f003579:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f003580:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003584:	75 14                	jne    9f00359a <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f003586:	83 fb 30             	cmp    ebx,0x30
9f003589:	75 07                	jne    9f003592 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f00358b:	b8 08 00 00 00       	mov    eax,0x8
9f003590:	eb 05                	jmp    9f003597 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f003592:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f003597:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f00359a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00359d:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0035a2:	ba 00 00 00 00       	mov    edx,0x0
9f0035a7:	f7 f1                	div    ecx
9f0035a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f0035ac:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0035af:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0035b4:	ba 00 00 00 00       	mov    edx,0x0
9f0035b9:	f7 f1                	div    ecx
9f0035bb:	89 d0                	mov    eax,edx
9f0035bd:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f0035bf:	bf 00 00 00 00       	mov    edi,0x0
9f0035c4:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f0035c9:	8d 43 d0             	lea    eax,[ebx-0x30]
9f0035cc:	83 f8 09             	cmp    eax,0x9
9f0035cf:	77 05                	ja     9f0035d6 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f0035d1:	83 eb 30             	sub    ebx,0x30
9f0035d4:	eb 25                	jmp    9f0035fb <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f0035d6:	89 d8                	mov    eax,ebx
9f0035d8:	83 c8 20             	or     eax,0x20
9f0035db:	83 e8 61             	sub    eax,0x61
9f0035de:	83 f8 19             	cmp    eax,0x19
9f0035e1:	77 56                	ja     9f003639 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0035e3:	83 fb 40             	cmp    ebx,0x40
9f0035e6:	7e 0c                	jle    9f0035f4 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f0035e8:	83 fb 5a             	cmp    ebx,0x5a
9f0035eb:	7f 07                	jg     9f0035f4 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f0035ed:	b8 37 00 00 00       	mov    eax,0x37
9f0035f2:	eb 05                	jmp    9f0035f9 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f0035f4:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f0035f9:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f0035fb:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0035fe:	7d 3c                	jge    9f00363c <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003600:	89 c8                	mov    eax,ecx
9f003602:	85 c0                	test   eax,eax
9f003604:	78 10                	js     9f003616 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f003606:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003609:	77 0b                	ja     9f003616 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f00360b:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f00360e:	75 0d                	jne    9f00361d <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f003610:	89 d0                	mov    eax,edx
9f003612:	39 c3                	cmp    ebx,eax
9f003614:	7e 07                	jle    9f00361d <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f003616:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f00361b:	eb 0f                	jmp    9f00362c <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f00361d:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f003622:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003625:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f003628:	89 d8                	mov    eax,ebx
9f00362a:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f00362c:	89 f0                	mov    eax,esi
9f00362e:	8d 70 01             	lea    esi,[eax+0x1]
9f003631:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003634:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f003637:	eb 90                	jmp    9f0035c9 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f003639:	90                   	nop
9f00363a:	eb 01                	jmp    9f00363d <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f00363c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f00363d:	89 c8                	mov    eax,ecx
9f00363f:	85 c0                	test   eax,eax
9f003641:	79 07                	jns    9f00364a <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f003643:	bf ff ff ff ff       	mov    edi,0xffffffff
9f003648:	eb 08                	jmp    9f003652 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f00364a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00364e:	74 02                	je     9f003652 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f003650:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f003652:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003656:	74 13                	je     9f00366b <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f003658:	89 c8                	mov    eax,ecx
9f00365a:	85 c0                	test   eax,eax
9f00365c:	74 05                	je     9f003663 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f00365e:	8d 46 ff             	lea    eax,[esi-0x1]
9f003661:	eb 03                	jmp    9f003666 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f003663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f003666:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003669:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f00366b:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f00366d:	83 c4 08             	add    esp,0x8
9f003670:	5b                   	pop    ebx
9f003671:	5e                   	pop    esi
9f003672:	5f                   	pop    edi
9f003673:	5d                   	pop    ebp
9f003674:	c3                   	ret    
9f003675:	66 90                	xchg   ax,ax
9f003677:	90                   	nop

9f003678 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f003678:	55                   	push   ebp
9f003679:	89 e5                	mov    ebp,esp
9f00367b:	e8 12 12 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003680:	05 bc 3a 00 00       	add    eax,0x3abc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f003685:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00368b:	01 d0                	add    eax,edx
9f00368d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f003690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f003693:	5d                   	pop    ebp
9f003694:	c3                   	ret    
9f003695:	66 90                	xchg   ax,ax
9f003697:	90                   	nop

9f003698 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f003698:	55                   	push   ebp
9f003699:	89 e5                	mov    ebp,esp
9f00369b:	57                   	push   edi
9f00369c:	56                   	push   esi
9f00369d:	53                   	push   ebx
9f00369e:	83 ec 0c             	sub    esp,0xc
9f0036a1:	e8 ec 11 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0036a6:	05 96 3a 00 00       	add    eax,0x3a96
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f0036ab:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f0036ae:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f0036b5:	89 f0                	mov    eax,esi
9f0036b7:	8d 70 01             	lea    esi,[eax+0x1]
9f0036ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036bd:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f0036c0:	83 fb 20             	cmp    ebx,0x20
9f0036c3:	74 f0                	je     9f0036b5 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f0036c5:	83 fb 2d             	cmp    ebx,0x2d
9f0036c8:	75 14                	jne    9f0036de <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f0036ca:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f0036d1:	89 f0                	mov    eax,esi
9f0036d3:	8d 70 01             	lea    esi,[eax+0x1]
9f0036d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036d9:	0f be d8             	movsx  ebx,al
9f0036dc:	eb 10                	jmp    9f0036ee <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f0036de:	83 fb 2b             	cmp    ebx,0x2b
9f0036e1:	75 0b                	jne    9f0036ee <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f0036e3:	89 f0                	mov    eax,esi
9f0036e5:	8d 70 01             	lea    esi,[eax+0x1]
9f0036e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0036eb:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f0036ee:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0036f2:	74 06                	je     9f0036fa <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f0036f4:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0036f8:	75 26                	jne    9f003720 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f0036fa:	83 fb 30             	cmp    ebx,0x30
9f0036fd:	75 21                	jne    9f003720 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f0036ff:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003702:	3c 78                	cmp    al,0x78
9f003704:	74 07                	je     9f00370d <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f003706:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003709:	3c 58                	cmp    al,0x58
9f00370b:	75 13                	jne    9f003720 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f00370d:	8d 46 01             	lea    eax,[esi+0x1]
9f003710:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003713:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f003716:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f003719:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f003720:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003724:	75 14                	jne    9f00373a <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f003726:	83 fb 30             	cmp    ebx,0x30
9f003729:	75 07                	jne    9f003732 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f00372b:	b8 08 00 00 00       	mov    eax,0x8
9f003730:	eb 05                	jmp    9f003737 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f003732:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f003737:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f00373a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00373e:	74 07                	je     9f003747 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f003740:	b8 00 00 00 80       	mov    eax,0x80000000
9f003745:	eb 05                	jmp    9f00374c <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f003747:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f00374c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00374f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003752:	ba 00 00 00 00       	mov    edx,0x0
9f003757:	f7 f1                	div    ecx
9f003759:	89 d1                	mov    ecx,edx
9f00375b:	89 c8                	mov    eax,ecx
9f00375d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f003760:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f003763:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003766:	ba 00 00 00 00       	mov    edx,0x0
9f00376b:	f7 f7                	div    edi
9f00376d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f003770:	bf 00 00 00 00       	mov    edi,0x0
9f003775:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f00377a:	8d 43 d0             	lea    eax,[ebx-0x30]
9f00377d:	83 f8 09             	cmp    eax,0x9
9f003780:	77 05                	ja     9f003787 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f003782:	83 eb 30             	sub    ebx,0x30
9f003785:	eb 25                	jmp    9f0037ac <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f003787:	89 d8                	mov    eax,ebx
9f003789:	83 c8 20             	or     eax,0x20
9f00378c:	83 e8 61             	sub    eax,0x61
9f00378f:	83 f8 19             	cmp    eax,0x19
9f003792:	77 55                	ja     9f0037e9 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f003794:	83 fb 40             	cmp    ebx,0x40
9f003797:	7e 0c                	jle    9f0037a5 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f003799:	83 fb 5a             	cmp    ebx,0x5a
9f00379c:	7f 07                	jg     9f0037a5 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f00379e:	b8 37 00 00 00       	mov    eax,0x37
9f0037a3:	eb 05                	jmp    9f0037aa <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f0037a5:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f0037aa:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f0037ac:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0037af:	7d 3b                	jge    9f0037ec <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f0037b1:	89 c8                	mov    eax,ecx
9f0037b3:	85 c0                	test   eax,eax
9f0037b5:	78 0f                	js     9f0037c6 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f0037b7:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0037ba:	77 0a                	ja     9f0037c6 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f0037bc:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0037bf:	75 0c                	jne    9f0037cd <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f0037c1:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f0037c4:	7e 07                	jle    9f0037cd <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f0037c6:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f0037cb:	eb 0f                	jmp    9f0037dc <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f0037cd:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f0037d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0037d5:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f0037d8:	89 d8                	mov    eax,ebx
9f0037da:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f0037dc:	89 f0                	mov    eax,esi
9f0037de:	8d 70 01             	lea    esi,[eax+0x1]
9f0037e1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0037e4:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f0037e7:	eb 91                	jmp    9f00377a <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f0037e9:	90                   	nop
9f0037ea:	eb 01                	jmp    9f0037ed <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f0037ec:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f0037ed:	89 c8                	mov    eax,ecx
9f0037ef:	85 c0                	test   eax,eax
9f0037f1:	79 16                	jns    9f003809 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f0037f3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0037f7:	74 07                	je     9f003800 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f0037f9:	b8 00 00 00 80       	mov    eax,0x80000000
9f0037fe:	eb 05                	jmp    9f003805 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f003800:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f003805:	89 c7                	mov    edi,eax
9f003807:	eb 08                	jmp    9f003811 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f003809:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00380d:	74 02                	je     9f003811 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f00380f:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f003811:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003815:	74 13                	je     9f00382a <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f003817:	89 c8                	mov    eax,ecx
9f003819:	85 c0                	test   eax,eax
9f00381b:	74 05                	je     9f003822 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f00381d:	8d 46 ff             	lea    eax,[esi-0x1]
9f003820:	eb 03                	jmp    9f003825 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f003822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f003825:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003828:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f00382a:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f00382c:	83 c4 0c             	add    esp,0xc
9f00382f:	5b                   	pop    ebx
9f003830:	5e                   	pop    esi
9f003831:	5f                   	pop    edi
9f003832:	5d                   	pop    ebp
9f003833:	c3                   	ret    

9f003834 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f003834:	55                   	push   ebp
9f003835:	89 e5                	mov    ebp,esp
9f003837:	53                   	push   ebx
9f003838:	83 ec 14             	sub    esp,0x14
9f00383b:	e8 52 10 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003840:	05 fc 38 00 00       	add    eax,0x38fc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f003845:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003848:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00384b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00384e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f003851:	eb 04                	jmp    9f003857 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f003853:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f003857:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00385a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00385d:	80 fa 20             	cmp    dl,0x20
9f003860:	74 f1                	je     9f003853 <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f003862:	83 ec 0c             	sub    esp,0xc
9f003865:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f003868:	89 c3                	mov    ebx,eax
9f00386a:	e8 89 fa ff ff       	call   9f0032f8 <strlenI>
9f00386f:	83 c4 10             	add    esp,0x10
9f003872:	8d 50 ff             	lea    edx,[eax-0x1]
9f003875:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003878:	01 d0                	add    eax,edx
9f00387a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f00387d:	eb 0c                	jmp    9f00388b <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f00387f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003882:	8d 50 ff             	lea    edx,[eax-0x1]
9f003885:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f003888:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f00388b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00388e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003891:	76 0a                	jbe    9f00389d <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f003893:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003896:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003899:	3c 20                	cmp    al,0x20
9f00389b:	74 e2                	je     9f00387f <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f00389d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0038a0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0038a3:	74 1f                	je     9f0038c4 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f0038a5:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f0038a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0038a9:	8d 50 01             	lea    edx,[eax+0x1]
9f0038ac:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0038af:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0038b2:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0038b5:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0038b8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0038bb:	88 10                	mov    BYTE PTR [eax],dl
9f0038bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0038c0:	84 c0                	test   al,al
9f0038c2:	75 e2                	jne    9f0038a6 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f0038c4:	90                   	nop
9f0038c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0038c8:	c9                   	leave  
9f0038c9:	c3                   	ret    

9f0038ca <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f0038ca:	55                   	push   ebp
9f0038cb:	89 e5                	mov    ebp,esp
9f0038cd:	83 ec 08             	sub    esp,0x8
9f0038d0:	e8 bd 0f 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0038d5:	05 67 38 00 00       	add    eax,0x3867
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f0038da:	83 ec 0c             	sub    esp,0xc
9f0038dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0038e0:	e8 4f ff ff ff       	call   9f003834 <strtrimI>
9f0038e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f0038e8:	c9                   	leave  
9f0038e9:	c3                   	ret    
9f0038ea:	66 90                	xchg   ax,ax

9f0038ec <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:11
#include "strings.h"
#include "libChrisOS.h"

///NOTE: Output pointer has to be freed!!!
static char *strreplaceI(const char *in, const char *pattern, const char *by)
{
9f0038ec:	55                   	push   ebp
9f0038ed:	89 e5                	mov    ebp,esp
9f0038ef:	56                   	push   esi
9f0038f0:	53                   	push   ebx
9f0038f1:	83 ec 10             	sub    esp,0x10
9f0038f4:	e8 d7 0f 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f0038f9:	81 c3 43 38 00 00    	add    ebx,0x3843
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:12
    size_t outsize = strlenI(in) + 1;
9f0038ff:	83 ec 0c             	sub    esp,0xc
9f003902:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003905:	e8 ee f9 ff ff       	call   9f0032f8 <strlenI>
9f00390a:	83 c4 10             	add    esp,0x10
9f00390d:	83 c0 01             	add    eax,0x1
9f003910:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    char *res = mallocI(outsize);
9f003913:	83 ec 0c             	sub    esp,0xc
9f003916:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f003919:	e8 71 e8 ff ff       	call   9f00218f <mallocI>
9f00391e:	83 c4 10             	add    esp,0x10
9f003921:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:16
    // use this to iterate over the output
    size_t resoffset = 0;
9f003924:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f00392b:	e9 c0 00 00 00       	jmp    9f0039f0 <strreplaceI+0x104>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:21
        // copy everything up to the pattern
        memcpyI(res + resoffset, in, needle - in);
9f003930:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f003933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003936:	29 c2                	sub    edx,eax
9f003938:	89 d0                	mov    eax,edx
9f00393a:	89 c1                	mov    ecx,eax
9f00393c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00393f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003942:	01 d0                	add    eax,edx
9f003944:	83 ec 04             	sub    esp,0x4
9f003947:	51                   	push   ecx
9f003948:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00394b:	50                   	push   eax
9f00394c:	e8 2b ec ff ff       	call   9f00257c <memcpyI>
9f003951:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        resoffset += needle - in;
9f003954:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f003957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00395a:	29 c2                	sub    edx,eax
9f00395c:	89 d0                	mov    eax,edx
9f00395e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:25

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f003961:	83 ec 0c             	sub    esp,0xc
9f003964:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003967:	e8 8c f9 ff ff       	call   9f0032f8 <strlenI>
9f00396c:	83 c4 10             	add    esp,0x10
9f00396f:	89 c2                	mov    edx,eax
9f003971:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003974:	01 d0                	add    eax,edx
9f003976:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:28

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f003979:	83 ec 0c             	sub    esp,0xc
9f00397c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00397f:	e8 74 f9 ff ff       	call   9f0032f8 <strlenI>
9f003984:	83 c4 10             	add    esp,0x10
9f003987:	89 c2                	mov    edx,eax
9f003989:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00398c:	29 d0                	sub    eax,edx
9f00398e:	89 c6                	mov    esi,eax
9f003990:	83 ec 0c             	sub    esp,0xc
9f003993:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003996:	e8 5d f9 ff ff       	call   9f0032f8 <strlenI>
9f00399b:	83 c4 10             	add    esp,0x10
9f00399e:	01 f0                	add    eax,esi
9f0039a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29
        res = reallocI(res, outsize);
9f0039a3:	83 ec 08             	sub    esp,0x8
9f0039a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0039a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0039ac:	e8 80 ea ff ff       	call   9f002431 <reallocI>
9f0039b1:	83 c4 10             	add    esp,0x10
9f0039b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(res + resoffset, by, strlenI(by));
9f0039b7:	83 ec 0c             	sub    esp,0xc
9f0039ba:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0039bd:	e8 36 f9 ff ff       	call   9f0032f8 <strlenI>
9f0039c2:	83 c4 10             	add    esp,0x10
9f0039c5:	89 c1                	mov    ecx,eax
9f0039c7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0039ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0039cd:	01 d0                	add    eax,edx
9f0039cf:	83 ec 04             	sub    esp,0x4
9f0039d2:	51                   	push   ecx
9f0039d3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0039d6:	50                   	push   eax
9f0039d7:	e8 a0 eb ff ff       	call   9f00257c <memcpyI>
9f0039dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f0039df:	83 ec 0c             	sub    esp,0xc
9f0039e2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0039e5:	e8 0e f9 ff ff       	call   9f0032f8 <strlenI>
9f0039ea:	83 c4 10             	add    esp,0x10
9f0039ed:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:19
    char *res = mallocI(outsize);
    // use this to iterate over the output
    size_t resoffset = 0;

    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f0039f0:	83 ec 08             	sub    esp,0x8
9f0039f3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0039f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0039f9:	e8 f8 00 00 00       	call   9f003af6 <strstrI>
9f0039fe:	83 c4 10             	add    esp,0x10
9f003a01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f003a04:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f003a08:	0f 85 22 ff ff ff    	jne    9f003930 <strreplaceI+0x44>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(res + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(res + resoffset, in);
9f003a0e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f003a11:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003a14:	01 d0                	add    eax,edx
9f003a16:	83 ec 08             	sub    esp,0x8
9f003a19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a1c:	50                   	push   eax
9f003a1d:	e8 c2 f7 ff ff       	call   9f0031e4 <strcpyI>
9f003a22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return res;
9f003a25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f003a28:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003a2b:	5b                   	pop    ebx
9f003a2c:	5e                   	pop    esi
9f003a2d:	5d                   	pop    ebp
9f003a2e:	c3                   	ret    

9f003a2f <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by)
{
9f003a2f:	55                   	push   ebp
9f003a30:	89 e5                	mov    ebp,esp
9f003a32:	83 ec 08             	sub    esp,0x8
9f003a35:	e8 58 0e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003a3a:	05 02 37 00 00       	add    eax,0x3702
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by);
9f003a3f:	83 ec 04             	sub    esp,0x4
9f003a42:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003a45:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003a48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003a4b:	e8 9c fe ff ff       	call   9f0038ec <strreplaceI>
9f003a50:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f003a53:	c9                   	leave  
9f003a54:	c3                   	ret    
9f003a55:	66 90                	xchg   ax,ax
9f003a57:	90                   	nop

9f003a58 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strnstrI(char* string, char* substring, int length)
{
9f003a58:	55                   	push   ebp
9f003a59:	89 e5                	mov    ebp,esp
9f003a5b:	56                   	push   esi
9f003a5c:	53                   	push   ebx
9f003a5d:	83 ec 10             	sub    esp,0x10
9f003a60:	e8 2d 0e 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003a65:	05 d7 36 00 00       	add    eax,0x36d7
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:59

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f003a6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003a6d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    
    b = substring;
9f003a70:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    if (*b == 0) {
9f003a73:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003a76:	84 c0                	test   al,al
9f003a78:	75 66                	jne    9f003ae0 <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
	return string;
9f003a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a7d:	eb 70                	jmp    9f003aef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f003a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a82:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003a85:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003a88:	38 c2                	cmp    dl,al
9f003a8a:	74 12                	je     9f003a9e <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
            if (len--<=0)
9f003a8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003a8f:	8d 50 ff             	lea    edx,[eax-0x1]
9f003a92:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003a95:	85 c0                	test   eax,eax
9f003a97:	7f 42                	jg     9f003adb <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
                return string;
9f003a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a9c:	eb 51                	jmp    9f003aef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
	    continue;
	}
	a = string;
9f003a9e:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	while (1) {
	    if (*b == 0) {
9f003aa1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003aa4:	84 c0                	test   al,al
9f003aa6:	75 05                	jne    9f003aad <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
		return string;
9f003aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003aab:	eb 42                	jmp    9f003aef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
	    }
            if (len--<=0)
9f003aad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003ab0:	8d 50 ff             	lea    edx,[eax-0x1]
9f003ab3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003ab6:	85 c0                	test   eax,eax
9f003ab8:	7f 05                	jg     9f003abf <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
                return string;
9f003aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003abd:	eb 30                	jmp    9f003aef <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
	    if (*a++ != *b++) {
9f003abf:	89 f0                	mov    eax,esi
9f003ac1:	8d 70 01             	lea    esi,[eax+0x1]
9f003ac4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003ac7:	89 d8                	mov    eax,ebx
9f003ac9:	8d 58 01             	lea    ebx,[eax+0x1]
9f003acc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003acf:	38 c2                	cmp    dl,al
9f003ad1:	75 02                	jne    9f003ad5 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:81
		break;
	    }
	}
9f003ad3:	eb cc                	jmp    9f003aa1 <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f003ad5:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
	    }
	}
	b = substring;
9f003ad6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003ad9:	eb 01                	jmp    9f003adc <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f003adb:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003adc:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65 (discriminator 1)
9f003ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ae3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003ae6:	84 c0                	test   al,al
9f003ae8:	75 95                	jne    9f003a7f <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003aea:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f003aef:	83 c4 10             	add    esp,0x10
9f003af2:	5b                   	pop    ebx
9f003af3:	5e                   	pop    esi
9f003af4:	5d                   	pop    ebp
9f003af5:	c3                   	ret    

9f003af6 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:88

char* strstrI(const char* string, const char* substring)
{
9f003af6:	55                   	push   ebp
9f003af7:	89 e5                	mov    ebp,esp
9f003af9:	56                   	push   esi
9f003afa:	53                   	push   ebx
9f003afb:	e8 92 0d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003b00:	05 3c 36 00 00       	add    eax,0x363c
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:96
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f003b05:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    if (*b == 0) {
9f003b08:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003b0b:	84 c0                	test   al,al
9f003b0d:	75 42                	jne    9f003b51 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
	return string;
9f003b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b12:	eb 4c                	jmp    9f003b60 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f003b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b17:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b1a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003b1d:	38 c2                	cmp    dl,al
9f003b1f:	75 2b                	jne    9f003b4c <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:104
	    continue;
	}
	a = string;
9f003b21:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:106
	while (1) {
	    if (*b == 0) {
9f003b24:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f003b27:	84 c0                	test   al,al
9f003b29:	75 05                	jne    9f003b30 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
		return string;
9f003b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b2e:	eb 30                	jmp    9f003b60 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:109
	    }
	    if (*a++ != *b++) {
9f003b30:	89 f0                	mov    eax,esi
9f003b32:	8d 70 01             	lea    esi,[eax+0x1]
9f003b35:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003b38:	89 d8                	mov    eax,ebx
9f003b3a:	8d 58 01             	lea    ebx,[eax+0x1]
9f003b3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b40:	38 c2                	cmp    dl,al
9f003b42:	75 02                	jne    9f003b46 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:112
		break;
	    }
	}
9f003b44:	eb de                	jmp    9f003b24 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f003b46:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
	    }
	}
	b = substring;
9f003b47:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f003b4a:	eb 01                	jmp    9f003b4d <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f003b4c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f003b4d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:100 (discriminator 1)
9f003b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b54:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b57:	84 c0                	test   al,al
9f003b59:	75 b9                	jne    9f003b14 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:115
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f003b5b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
}
9f003b60:	5b                   	pop    ebx
9f003b61:	5e                   	pop    esi
9f003b62:	5d                   	pop    ebp
9f003b63:	c3                   	ret    

9f003b64 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:119

VISIBLE char* strstr(const char* string, const char* substring)
{
9f003b64:	55                   	push   ebp
9f003b65:	89 e5                	mov    ebp,esp
9f003b67:	e8 26 0d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003b6c:	05 d0 35 00 00       	add    eax,0x35d0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120
    return strstrI(string, substring);
9f003b71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003b74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003b77:	e8 7a ff ff ff       	call   9f003af6 <strstrI>
9f003b7c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
}
9f003b7f:	c9                   	leave  
9f003b80:	c3                   	ret    
9f003b81:	66 90                	xchg   ax,ax
9f003b83:	90                   	nop

9f003b84 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f003b84:	55                   	push   ebp
9f003b85:	89 e5                	mov    ebp,esp
9f003b87:	56                   	push   esi
9f003b88:	53                   	push   ebx
9f003b89:	83 ec 10             	sub    esp,0x10
9f003b8c:	e8 01 0d 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003b91:	05 ab 35 00 00       	add    eax,0x35ab
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    uint32_t retVal=0;
9f003b96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    GET_TICKS(retVal);
9f003b9d:	b8 70 01 00 00       	mov    eax,0x170
9f003ba2:	bb 00 00 00 00       	mov    ebx,0x0
9f003ba7:	b9 00 00 00 00       	mov    ecx,0x0
9f003bac:	ba 00 00 00 00       	mov    edx,0x0
9f003bb1:	be 00 00 00 00       	mov    esi,0x0
9f003bb6:	e8 fc ff ff ff       	call   9f003bb7 <getticks+0x33>
9f003bbb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
    return (time_t)retVal;
9f003bbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
}
9f003bc1:	83 c4 10             	add    esp,0x10
9f003bc4:	5b                   	pop    ebx
9f003bc5:	5e                   	pop    esi
9f003bc6:	5d                   	pop    ebp
9f003bc7:	c3                   	ret    

9f003bc8 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003bc8:	55                   	push   ebp
9f003bc9:	89 e5                	mov    ebp,esp
9f003bcb:	53                   	push   ebx
9f003bcc:	83 ec 10             	sub    esp,0x10
9f003bcf:	e8 fc 0c 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f003bd4:	81 c3 68 35 00 00    	add    ebx,0x3568
/home/yogi/src/os/aproj/libChrisOS/src/time.c:33
  time_t time = *timer;
9f003bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bdd:	8b 00                	mov    eax,DWORD PTR [eax]
9f003bdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f003be2:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37

  dayclock = (unsigned long) time % SECS_DAY;
9f003be9:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f003bec:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003bf1:	89 c8                	mov    eax,ecx
9f003bf3:	f7 e2                	mul    edx
9f003bf5:	89 d0                	mov    eax,edx
9f003bf7:	c1 e8 10             	shr    eax,0x10
9f003bfa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003bfd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003c00:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003c06:	29 c1                	sub    ecx,eax
9f003c08:	89 c8                	mov    eax,ecx
9f003c0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  dayno = (unsigned long) time / SECS_DAY;
9f003c0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003c10:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f003c15:	f7 e2                	mul    edx
9f003c17:	89 d0                	mov    eax,edx
9f003c19:	c1 e8 10             	shr    eax,0x10
9f003c1c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  tmbuf->tm_sec = dayclock % 60;
9f003c1f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003c22:	ba 89 88 88 88       	mov    edx,0x88888889
9f003c27:	89 c8                	mov    eax,ecx
9f003c29:	f7 e2                	mul    edx
9f003c2b:	89 d0                	mov    eax,edx
9f003c2d:	c1 e8 05             	shr    eax,0x5
9f003c30:	89 c2                	mov    edx,eax
9f003c32:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003c39:	89 c2                	mov    edx,eax
9f003c3b:	89 d0                	mov    eax,edx
9f003c3d:	c1 e0 04             	shl    eax,0x4
9f003c40:	29 d0                	sub    eax,edx
9f003c42:	29 c1                	sub    ecx,eax
9f003c44:	89 c8                	mov    eax,ecx
9f003c46:	89 c2                	mov    edx,eax
9f003c48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c4b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f003c4d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f003c50:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003c55:	89 c8                	mov    eax,ecx
9f003c57:	f7 e2                	mul    edx
9f003c59:	89 d0                	mov    eax,edx
9f003c5b:	c1 e8 0b             	shr    eax,0xb
9f003c5e:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f003c64:	29 c1                	sub    ecx,eax
9f003c66:	89 c8                	mov    eax,ecx
9f003c68:	ba 89 88 88 88       	mov    edx,0x88888889
9f003c6d:	f7 e2                	mul    edx
9f003c6f:	89 d0                	mov    eax,edx
9f003c71:	c1 e8 05             	shr    eax,0x5
9f003c74:	89 c2                	mov    edx,eax
9f003c76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c79:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_hour = dayclock / 3600;
9f003c7c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003c7f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f003c84:	f7 e2                	mul    edx
9f003c86:	89 d0                	mov    eax,edx
9f003c88:	c1 e8 0b             	shr    eax,0xb
9f003c8b:	89 c2                	mov    edx,eax
9f003c8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c90:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f003c93:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003c96:	8d 48 04             	lea    ecx,[eax+0x4]
9f003c99:	ba 25 49 92 24       	mov    edx,0x24924925
9f003c9e:	89 c8                	mov    eax,ecx
9f003ca0:	f7 e2                	mul    edx
9f003ca2:	89 c8                	mov    eax,ecx
9f003ca4:	29 d0                	sub    eax,edx
9f003ca6:	d1 e8                	shr    eax,1
9f003ca8:	01 d0                	add    eax,edx
9f003caa:	c1 e8 02             	shr    eax,0x2
9f003cad:	89 c2                	mov    edx,eax
9f003caf:	c1 e2 03             	shl    edx,0x3
9f003cb2:	29 c2                	sub    edx,eax
9f003cb4:	89 c8                	mov    eax,ecx
9f003cb6:	29 d0                	sub    eax,edx
9f003cb8:	89 c2                	mov    edx,eax
9f003cba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003cbd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f003cc0:	eb 66                	jmp    9f003d28 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
    dayno -= YEARSIZE(year);
9f003cc2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003cc5:	83 e0 03             	and    eax,0x3
9f003cc8:	85 c0                	test   eax,eax
9f003cca:	75 50                	jne    9f003d1c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 1)
9f003ccc:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003ccf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003cd4:	89 c8                	mov    eax,ecx
9f003cd6:	f7 ea                	imul   edx
9f003cd8:	c1 fa 05             	sar    edx,0x5
9f003cdb:	89 c8                	mov    eax,ecx
9f003cdd:	c1 f8 1f             	sar    eax,0x1f
9f003ce0:	29 c2                	sub    edx,eax
9f003ce2:	89 d0                	mov    eax,edx
9f003ce4:	6b c0 64             	imul   eax,eax,0x64
9f003ce7:	29 c1                	sub    ecx,eax
9f003ce9:	89 c8                	mov    eax,ecx
9f003ceb:	85 c0                	test   eax,eax
9f003ced:	75 26                	jne    9f003d15 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 4)
9f003cef:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003cf2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003cf7:	89 c8                	mov    eax,ecx
9f003cf9:	f7 ea                	imul   edx
9f003cfb:	c1 fa 07             	sar    edx,0x7
9f003cfe:	89 c8                	mov    eax,ecx
9f003d00:	c1 f8 1f             	sar    eax,0x1f
9f003d03:	29 c2                	sub    edx,eax
9f003d05:	89 d0                	mov    eax,edx
9f003d07:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003d0d:	29 c1                	sub    ecx,eax
9f003d0f:	89 c8                	mov    eax,ecx
9f003d11:	85 c0                	test   eax,eax
9f003d13:	75 07                	jne    9f003d1c <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 5)
9f003d15:	b8 6e 01 00 00       	mov    eax,0x16e
9f003d1a:	eb 05                	jmp    9f003d21 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 6)
9f003d1c:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
9f003d21:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46 (discriminator 8)
    year++;
9f003d24:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f003d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003d2b:	83 e0 03             	and    eax,0x3
9f003d2e:	85 c0                	test   eax,eax
9f003d30:	75 50                	jne    9f003d82 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f003d32:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d35:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d3a:	89 c8                	mov    eax,ecx
9f003d3c:	f7 ea                	imul   edx
9f003d3e:	c1 fa 05             	sar    edx,0x5
9f003d41:	89 c8                	mov    eax,ecx
9f003d43:	c1 f8 1f             	sar    eax,0x1f
9f003d46:	29 c2                	sub    edx,eax
9f003d48:	89 d0                	mov    eax,edx
9f003d4a:	6b c0 64             	imul   eax,eax,0x64
9f003d4d:	29 c1                	sub    ecx,eax
9f003d4f:	89 c8                	mov    eax,ecx
9f003d51:	85 c0                	test   eax,eax
9f003d53:	75 26                	jne    9f003d7b <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f003d55:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003d58:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003d5d:	89 c8                	mov    eax,ecx
9f003d5f:	f7 ea                	imul   edx
9f003d61:	c1 fa 07             	sar    edx,0x7
9f003d64:	89 c8                	mov    eax,ecx
9f003d66:	c1 f8 1f             	sar    eax,0x1f
9f003d69:	29 c2                	sub    edx,eax
9f003d6b:	89 d0                	mov    eax,edx
9f003d6d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003d73:	29 c1                	sub    ecx,eax
9f003d75:	89 c8                	mov    eax,ecx
9f003d77:	85 c0                	test   eax,eax
9f003d79:	75 07                	jne    9f003d82 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f003d7b:	b8 6e 01 00 00       	mov    eax,0x16e
9f003d80:	eb 05                	jmp    9f003d87 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f003d82:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f003d87:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003d8a:	0f 86 32 ff ff ff    	jbe    9f003cc2 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f003d90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003d93:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f003d99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003d9c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_yday = dayno;
9f003d9f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f003da2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003da5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  tmbuf->tm_mon = 0;
9f003da8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003dab:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003db2:	e9 89 00 00 00       	jmp    9f003e40 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f003db7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003dba:	83 e0 03             	and    eax,0x3
9f003dbd:	85 c0                	test   eax,eax
9f003dbf:	75 50                	jne    9f003e11 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 1)
9f003dc1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003dc4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003dc9:	89 c8                	mov    eax,ecx
9f003dcb:	f7 ea                	imul   edx
9f003dcd:	c1 fa 05             	sar    edx,0x5
9f003dd0:	89 c8                	mov    eax,ecx
9f003dd2:	c1 f8 1f             	sar    eax,0x1f
9f003dd5:	29 c2                	sub    edx,eax
9f003dd7:	89 d0                	mov    eax,edx
9f003dd9:	6b c0 64             	imul   eax,eax,0x64
9f003ddc:	29 c1                	sub    ecx,eax
9f003dde:	89 c8                	mov    eax,ecx
9f003de0:	85 c0                	test   eax,eax
9f003de2:	75 26                	jne    9f003e0a <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 4)
9f003de4:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003de7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003dec:	89 c8                	mov    eax,ecx
9f003dee:	f7 ea                	imul   edx
9f003df0:	c1 fa 07             	sar    edx,0x7
9f003df3:	89 c8                	mov    eax,ecx
9f003df5:	c1 f8 1f             	sar    eax,0x1f
9f003df8:	29 c2                	sub    edx,eax
9f003dfa:	89 d0                	mov    eax,edx
9f003dfc:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003e02:	29 c1                	sub    ecx,eax
9f003e04:	89 c8                	mov    eax,ecx
9f003e06:	85 c0                	test   eax,eax
9f003e08:	75 07                	jne    9f003e11 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 5)
9f003e0a:	ba 01 00 00 00       	mov    edx,0x1
9f003e0f:	eb 05                	jmp    9f003e16 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 6)
9f003e11:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
9f003e16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e19:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003e1c:	89 d0                	mov    eax,edx
9f003e1e:	01 c0                	add    eax,eax
9f003e20:	01 d0                	add    eax,edx
9f003e22:	c1 e0 02             	shl    eax,0x2
9f003e25:	01 c8                	add    eax,ecx
9f003e27:	8b 84 83 04 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2fc]
9f003e2e:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53 (discriminator 8)
    tmbuf->tm_mon++;
9f003e31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e34:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003e37:	8d 50 01             	lea    edx,[eax+0x1]
9f003e3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003e3d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f003e40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003e43:	83 e0 03             	and    eax,0x3
9f003e46:	85 c0                	test   eax,eax
9f003e48:	75 50                	jne    9f003e9a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f003e4a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003e4d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003e52:	89 c8                	mov    eax,ecx
9f003e54:	f7 ea                	imul   edx
9f003e56:	c1 fa 05             	sar    edx,0x5
9f003e59:	89 c8                	mov    eax,ecx
9f003e5b:	c1 f8 1f             	sar    eax,0x1f
9f003e5e:	29 c2                	sub    edx,eax
9f003e60:	89 d0                	mov    eax,edx
9f003e62:	6b c0 64             	imul   eax,eax,0x64
9f003e65:	29 c1                	sub    ecx,eax
9f003e67:	89 c8                	mov    eax,ecx
9f003e69:	85 c0                	test   eax,eax
9f003e6b:	75 26                	jne    9f003e93 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f003e6d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f003e70:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003e75:	89 c8                	mov    eax,ecx
9f003e77:	f7 ea                	imul   edx
9f003e79:	c1 fa 07             	sar    edx,0x7
9f003e7c:	89 c8                	mov    eax,ecx
9f003e7e:	c1 f8 1f             	sar    eax,0x1f
9f003e81:	29 c2                	sub    edx,eax
9f003e83:	89 d0                	mov    eax,edx
9f003e85:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003e8b:	29 c1                	sub    ecx,eax
9f003e8d:	89 c8                	mov    eax,ecx
9f003e8f:	85 c0                	test   eax,eax
9f003e91:	75 07                	jne    9f003e9a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f003e93:	ba 01 00 00 00       	mov    edx,0x1
9f003e98:	eb 05                	jmp    9f003e9f <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f003e9a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f003e9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ea2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f003ea5:	89 d0                	mov    eax,edx
9f003ea7:	01 c0                	add    eax,eax
9f003ea9:	01 d0                	add    eax,edx
9f003eab:	c1 e0 02             	shl    eax,0x2
9f003eae:	01 c8                	add    eax,ecx
9f003eb0:	8b 84 83 04 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2fc]
9f003eb7:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f003eba:	0f 86 f7 fe ff ff    	jbe    9f003db7 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f003ec0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f003ec3:	83 c0 01             	add    eax,0x1
9f003ec6:	89 c2                	mov    edx,eax
9f003ec8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ecb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  tmbuf->tm_isdst = 0;
9f003ece:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003ed1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
  return tmbuf;
9f003ed8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
}
9f003edb:	83 c4 10             	add    esp,0x10
9f003ede:	5b                   	pop    ebx
9f003edf:	5d                   	pop    ebp
9f003ee0:	c3                   	ret    

9f003ee1 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f003ee1:	55                   	push   ebp
9f003ee2:	89 e5                	mov    ebp,esp
9f003ee4:	e8 a9 09 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003ee9:	05 53 32 00 00       	add    eax,0x3253
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
    return gmtime_rI(timer, tmbuf);
9f003eee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003ef1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003ef4:	e8 cf fc ff ff       	call   9f003bc8 <gmtime_rI>
9f003ef9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:63
}
9f003efc:	c9                   	leave  
9f003efd:	c3                   	ret    

9f003efe <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65

VISIBLE struct tm *localtime(const time_t *timer) {
9f003efe:	55                   	push   ebp
9f003eff:	89 e5                	mov    ebp,esp
9f003f01:	83 ec 10             	sub    esp,0x10
9f003f04:	e8 89 09 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003f09:	05 33 32 00 00       	add    eax,0x3233
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f003f0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f11:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f003f13:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f003f19:	8b 12                	mov    edx,DWORD PTR [edx]
9f003f1b:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f003f21:	01 ca                	add    edx,ecx
9f003f23:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_rI(&t, &tmbuf);
9f003f26:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f003f2c:	50                   	push   eax
9f003f2d:	8d 45 fc             	lea    eax,[ebp-0x4]
9f003f30:	50                   	push   eax
9f003f31:	e8 92 fc ff ff       	call   9f003bc8 <gmtime_rI>
9f003f36:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f003f39:	c9                   	leave  
9f003f3a:	c3                   	ret    

9f003f3b <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f003f3b:	55                   	push   ebp
9f003f3c:	89 e5                	mov    ebp,esp
9f003f3e:	83 ec 10             	sub    esp,0x10
9f003f41:	e8 4c 09 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003f46:	05 f6 31 00 00       	add    eax,0x31f6
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f003f4b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003f4e:	8b 12                	mov    edx,DWORD PTR [edx]
9f003f50:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f003f56:	8b 00                	mov    eax,DWORD PTR [eax]
9f003f58:	29 c2                	sub    edx,eax
9f003f5a:	89 d0                	mov    eax,edx
9f003f5c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f003f5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003f62:	8d 45 fc             	lea    eax,[ebp-0x4]
9f003f65:	50                   	push   eax
9f003f66:	e8 5d fc ff ff       	call   9f003bc8 <gmtime_rI>
9f003f6b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f003f6e:	c9                   	leave  
9f003f6f:	c3                   	ret    

9f003f70 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f003f70:	55                   	push   ebp
9f003f71:	89 e5                	mov    ebp,esp
9f003f73:	e8 1a 09 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f003f78:	05 c4 31 00 00       	add    eax,0x31c4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f003f7d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003f80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003f83:	e8 b3 ff ff ff       	call   9f003f3b <localtime_rI>
9f003f88:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f003f8b:	c9                   	leave  
9f003f8c:	c3                   	ret    

9f003f8d <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f003f8d:	55                   	push   ebp
9f003f8e:	89 e5                	mov    ebp,esp
9f003f90:	57                   	push   edi
9f003f91:	56                   	push   esi
9f003f92:	53                   	push   ebx
9f003f93:	83 ec 20             	sub    esp,0x20
9f003f96:	e8 39 09 00 00       	call   9f0048d4 <__x86.get_pc_thunk.cx>
9f003f9b:	81 c1 a1 31 00 00    	add    ecx,0x31a1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f003fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fa4:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f003fa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003faa:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003fac:	ba 89 88 88 88       	mov    edx,0x88888889
9f003fb1:	89 d8                	mov    eax,ebx
9f003fb3:	f7 ea                	imul   edx
9f003fb5:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003fb8:	c1 f8 05             	sar    eax,0x5
9f003fbb:	89 c2                	mov    edx,eax
9f003fbd:	89 d8                	mov    eax,ebx
9f003fbf:	c1 f8 1f             	sar    eax,0x1f
9f003fc2:	29 c2                	sub    edx,eax
9f003fc4:	89 d0                	mov    eax,edx
9f003fc6:	8d 14 06             	lea    edx,[esi+eax*1]
9f003fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f003fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003fd2:	8b 18                	mov    ebx,DWORD PTR [eax]
9f003fd4:	ba 89 88 88 88       	mov    edx,0x88888889
9f003fd9:	89 d8                	mov    eax,ebx
9f003fdb:	f7 ea                	imul   edx
9f003fdd:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003fe0:	c1 f8 05             	sar    eax,0x5
9f003fe3:	89 c2                	mov    edx,eax
9f003fe5:	89 d8                	mov    eax,ebx
9f003fe7:	c1 f8 1f             	sar    eax,0x1f
9f003fea:	29 c2                	sub    edx,eax
9f003fec:	89 d0                	mov    eax,edx
9f003fee:	89 c2                	mov    edx,eax
9f003ff0:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f003ff7:	89 c2                	mov    edx,eax
9f003ff9:	89 d0                	mov    eax,edx
9f003ffb:	c1 e0 04             	shl    eax,0x4
9f003ffe:	29 d0                	sub    eax,edx
9f004000:	29 c3                	sub    ebx,eax
9f004002:	89 d8                	mov    eax,ebx
9f004004:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004007:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f004009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00400c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00400e:	85 c0                	test   eax,eax
9f004010:	79 1c                	jns    9f00402e <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f004012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004015:	8b 00                	mov    eax,DWORD PTR [eax]
9f004017:	8d 50 3c             	lea    edx,[eax+0x3c]
9f00401a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00401d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f00401f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004025:	8d 50 ff             	lea    edx,[eax-0x1]
9f004028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00402b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f00402e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004031:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f004034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004037:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00403a:	ba 89 88 88 88       	mov    edx,0x88888889
9f00403f:	89 d8                	mov    eax,ebx
9f004041:	f7 ea                	imul   edx
9f004043:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004046:	c1 f8 05             	sar    eax,0x5
9f004049:	89 c2                	mov    edx,eax
9f00404b:	89 d8                	mov    eax,ebx
9f00404d:	c1 f8 1f             	sar    eax,0x1f
9f004050:	29 c2                	sub    edx,eax
9f004052:	89 d0                	mov    eax,edx
9f004054:	8d 14 06             	lea    edx,[esi+eax*1]
9f004057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00405a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f00405d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004060:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f004063:	ba 89 88 88 88       	mov    edx,0x88888889
9f004068:	89 d8                	mov    eax,ebx
9f00406a:	f7 ea                	imul   edx
9f00406c:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00406f:	c1 f8 05             	sar    eax,0x5
9f004072:	89 c2                	mov    edx,eax
9f004074:	89 d8                	mov    eax,ebx
9f004076:	c1 f8 1f             	sar    eax,0x1f
9f004079:	29 c2                	sub    edx,eax
9f00407b:	89 d0                	mov    eax,edx
9f00407d:	89 c2                	mov    edx,eax
9f00407f:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f004086:	89 c2                	mov    edx,eax
9f004088:	89 d0                	mov    eax,edx
9f00408a:	c1 e0 04             	shl    eax,0x4
9f00408d:	29 d0                	sub    eax,edx
9f00408f:	29 c3                	sub    ebx,eax
9f004091:	89 d8                	mov    eax,ebx
9f004093:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004096:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f004099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00409c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f00409f:	85 c0                	test   eax,eax
9f0040a1:	79 1e                	jns    9f0040c1 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f0040a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0040a9:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0040ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f0040b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0040b8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0040bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f0040c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040c4:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0040c7:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0040cc:	89 d8                	mov    eax,ebx
9f0040ce:	f7 ea                	imul   edx
9f0040d0:	c1 fa 02             	sar    edx,0x2
9f0040d3:	89 d8                	mov    eax,ebx
9f0040d5:	c1 f8 1f             	sar    eax,0x1f
9f0040d8:	29 c2                	sub    edx,eax
9f0040da:	89 d0                	mov    eax,edx
9f0040dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f0040df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0040e2:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0040e5:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0040ea:	89 d8                	mov    eax,ebx
9f0040ec:	f7 ea                	imul   edx
9f0040ee:	c1 fa 02             	sar    edx,0x2
9f0040f1:	89 d8                	mov    eax,ebx
9f0040f3:	c1 f8 1f             	sar    eax,0x1f
9f0040f6:	29 c2                	sub    edx,eax
9f0040f8:	89 d0                	mov    eax,edx
9f0040fa:	01 c0                	add    eax,eax
9f0040fc:	01 d0                	add    eax,edx
9f0040fe:	c1 e0 03             	shl    eax,0x3
9f004101:	29 c3                	sub    ebx,eax
9f004103:	89 da                	mov    edx,ebx
9f004105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004108:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f00410b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00410e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004111:	85 c0                	test   eax,eax
9f004113:	79 13                	jns    9f004128 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f004115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004118:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f00411b:	8d 50 18             	lea    edx,[eax+0x18]
9f00411e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004121:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f004124:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f004128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00412b:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f00412e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004131:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004134:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004139:	89 d8                	mov    eax,ebx
9f00413b:	f7 ea                	imul   edx
9f00413d:	d1 fa                	sar    edx,1
9f00413f:	89 d8                	mov    eax,ebx
9f004141:	c1 f8 1f             	sar    eax,0x1f
9f004144:	29 c2                	sub    edx,eax
9f004146:	89 d0                	mov    eax,edx
9f004148:	8d 14 06             	lea    edx,[esi+eax*1]
9f00414b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00414e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f004151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004154:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004157:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f00415c:	89 d8                	mov    eax,ebx
9f00415e:	f7 ea                	imul   edx
9f004160:	d1 fa                	sar    edx,1
9f004162:	89 d8                	mov    eax,ebx
9f004164:	c1 f8 1f             	sar    eax,0x1f
9f004167:	29 c2                	sub    edx,eax
9f004169:	89 d0                	mov    eax,edx
9f00416b:	01 c0                	add    eax,eax
9f00416d:	01 d0                	add    eax,edx
9f00416f:	c1 e0 02             	shl    eax,0x2
9f004172:	29 c3                	sub    ebx,eax
9f004174:	89 da                	mov    edx,ebx
9f004176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004179:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f00417c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00417f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004182:	85 c0                	test   eax,eax
9f004184:	79 1e                	jns    9f0041a4 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f004186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004189:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00418c:	8d 50 0c             	lea    edx,[eax+0xc]
9f00418f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004192:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f004195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004198:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00419b:	8d 50 ff             	lea    edx,[eax-0x1]
9f00419e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041a1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f0041a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0041aa:	83 e8 01             	sub    eax,0x1
9f0041ad:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f0041b0:	e9 c1 00 00 00       	jmp    9f004276 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f0041b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0041bb:	8d 50 ff             	lea    edx,[eax-0x1]
9f0041be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f0041c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0041ca:	85 c0                	test   eax,eax
9f0041cc:	79 19                	jns    9f0041e7 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f0041ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041d1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041d4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0041d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041da:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f0041dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041e0:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0041e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041ea:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041ed:	83 e0 03             	and    eax,0x3
9f0041f0:	85 c0                	test   eax,eax
9f0041f2:	75 62                	jne    9f004256 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f0041f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0041f7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0041fa:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004200:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004205:	89 d8                	mov    eax,ebx
9f004207:	f7 ea                	imul   edx
9f004209:	c1 fa 05             	sar    edx,0x5
9f00420c:	89 d8                	mov    eax,ebx
9f00420e:	c1 f8 1f             	sar    eax,0x1f
9f004211:	29 c2                	sub    edx,eax
9f004213:	89 d0                	mov    eax,edx
9f004215:	6b c0 64             	imul   eax,eax,0x64
9f004218:	29 c3                	sub    ebx,eax
9f00421a:	89 d8                	mov    eax,ebx
9f00421c:	85 c0                	test   eax,eax
9f00421e:	75 2f                	jne    9f00424f <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f004220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004223:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004226:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00422c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004231:	89 d8                	mov    eax,ebx
9f004233:	f7 ea                	imul   edx
9f004235:	c1 fa 07             	sar    edx,0x7
9f004238:	89 d8                	mov    eax,ebx
9f00423a:	c1 f8 1f             	sar    eax,0x1f
9f00423d:	29 c2                	sub    edx,eax
9f00423f:	89 d0                	mov    eax,edx
9f004241:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004247:	29 c3                	sub    ebx,eax
9f004249:	89 d8                	mov    eax,ebx
9f00424b:	85 c0                	test   eax,eax
9f00424d:	75 07                	jne    9f004256 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f00424f:	ba 01 00 00 00       	mov    edx,0x1
9f004254:	eb 05                	jmp    9f00425b <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f004256:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f00425b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00425e:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004261:	89 d0                	mov    eax,edx
9f004263:	01 c0                	add    eax,eax
9f004265:	01 d0                	add    eax,edx
9f004267:	c1 e0 02             	shl    eax,0x2
9f00426a:	01 d8                	add    eax,ebx
9f00426c:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f004273:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f004276:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00427a:	0f 88 35 ff ff ff    	js     9f0041b5 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004280:	e9 c2 00 00 00       	jmp    9f004347 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004288:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00428b:	83 e0 03             	and    eax,0x3
9f00428e:	85 c0                	test   eax,eax
9f004290:	75 62                	jne    9f0042f4 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f004292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004295:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004298:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00429e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0042a3:	89 d8                	mov    eax,ebx
9f0042a5:	f7 ea                	imul   edx
9f0042a7:	c1 fa 05             	sar    edx,0x5
9f0042aa:	89 d8                	mov    eax,ebx
9f0042ac:	c1 f8 1f             	sar    eax,0x1f
9f0042af:	29 c2                	sub    edx,eax
9f0042b1:	89 d0                	mov    eax,edx
9f0042b3:	6b c0 64             	imul   eax,eax,0x64
9f0042b6:	29 c3                	sub    ebx,eax
9f0042b8:	89 d8                	mov    eax,ebx
9f0042ba:	85 c0                	test   eax,eax
9f0042bc:	75 2f                	jne    9f0042ed <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f0042be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042c1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0042c4:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0042ca:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0042cf:	89 d8                	mov    eax,ebx
9f0042d1:	f7 ea                	imul   edx
9f0042d3:	c1 fa 07             	sar    edx,0x7
9f0042d6:	89 d8                	mov    eax,ebx
9f0042d8:	c1 f8 1f             	sar    eax,0x1f
9f0042db:	29 c2                	sub    edx,eax
9f0042dd:	89 d0                	mov    eax,edx
9f0042df:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0042e5:	29 c3                	sub    ebx,eax
9f0042e7:	89 d8                	mov    eax,ebx
9f0042e9:	85 c0                	test   eax,eax
9f0042eb:	75 07                	jne    9f0042f4 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f0042ed:	ba 01 00 00 00       	mov    edx,0x1
9f0042f2:	eb 05                	jmp    9f0042f9 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f0042f4:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f0042f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042fc:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0042ff:	89 d0                	mov    eax,edx
9f004301:	01 c0                	add    eax,eax
9f004303:	01 d0                	add    eax,edx
9f004305:	c1 e0 02             	shl    eax,0x2
9f004308:	01 d8                	add    eax,ebx
9f00430a:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f004311:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f004314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004317:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00431a:	8d 50 01             	lea    edx,[eax+0x1]
9f00431d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004320:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004326:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004329:	83 f8 0c             	cmp    eax,0xc
9f00432c:	75 19                	jne    9f004347 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f00432e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004331:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f004338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00433b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00433e:	8d 50 01             	lea    edx,[eax+0x1]
9f004341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00434a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00434d:	83 e0 03             	and    eax,0x3
9f004350:	85 c0                	test   eax,eax
9f004352:	75 62                	jne    9f0043b6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f004354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004357:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00435a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004360:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004365:	89 d8                	mov    eax,ebx
9f004367:	f7 ea                	imul   edx
9f004369:	c1 fa 05             	sar    edx,0x5
9f00436c:	89 d8                	mov    eax,ebx
9f00436e:	c1 f8 1f             	sar    eax,0x1f
9f004371:	29 c2                	sub    edx,eax
9f004373:	89 d0                	mov    eax,edx
9f004375:	6b c0 64             	imul   eax,eax,0x64
9f004378:	29 c3                	sub    ebx,eax
9f00437a:	89 d8                	mov    eax,ebx
9f00437c:	85 c0                	test   eax,eax
9f00437e:	75 2f                	jne    9f0043af <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f004380:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004383:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004386:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f00438c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004391:	89 d8                	mov    eax,ebx
9f004393:	f7 ea                	imul   edx
9f004395:	c1 fa 07             	sar    edx,0x7
9f004398:	89 d8                	mov    eax,ebx
9f00439a:	c1 f8 1f             	sar    eax,0x1f
9f00439d:	29 c2                	sub    edx,eax
9f00439f:	89 d0                	mov    eax,edx
9f0043a1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0043a7:	29 c3                	sub    ebx,eax
9f0043a9:	89 d8                	mov    eax,ebx
9f0043ab:	85 c0                	test   eax,eax
9f0043ad:	75 07                	jne    9f0043b6 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f0043af:	ba 01 00 00 00       	mov    edx,0x1
9f0043b4:	eb 05                	jmp    9f0043bb <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f0043b6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f0043bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043be:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0043c1:	89 d0                	mov    eax,edx
9f0043c3:	01 c0                	add    eax,eax
9f0043c5:	01 d0                	add    eax,edx
9f0043c7:	c1 e0 02             	shl    eax,0x2
9f0043ca:	01 d8                	add    eax,ebx
9f0043cc:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f0043d3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0043d6:	0f 8e a9 fe ff ff    	jle    9f004285 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f0043dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0043df:	8d 50 01             	lea    edx,[eax+0x1]
9f0043e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f0043e8:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f0043ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0043f5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f0043f8:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f0043fe:	39 d0                	cmp    eax,edx
9f004400:	7d 0a                	jge    9f00440c <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f004402:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f004407:	e9 d0 03 00 00       	jmp    9f0047dc <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f00440c:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f004413:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f00441a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f004421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004424:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004427:	05 6c 07 00 00       	add    eax,0x76c
9f00442c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f00442f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004432:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004435:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f00443a:	7e 07                	jle    9f004443 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f00443c:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f004443:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004446:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004449:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f00444f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f004452:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004457:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f00445a:	89 c2                	mov    edx,eax
9f00445c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00445f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004462:	8d 58 03             	lea    ebx,[eax+0x3]
9f004465:	85 c0                	test   eax,eax
9f004467:	0f 48 c3             	cmovs  eax,ebx
9f00446a:	c1 f8 02             	sar    eax,0x2
9f00446d:	83 c0 01             	add    eax,0x1
9f004470:	39 c2                	cmp    edx,eax
9f004472:	7d 04                	jge    9f004478 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f004474:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f004478:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00447b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00447e:	8d 50 03             	lea    edx,[eax+0x3]
9f004481:	85 c0                	test   eax,eax
9f004483:	0f 48 c2             	cmovs  eax,edx
9f004486:	c1 f8 02             	sar    eax,0x2
9f004489:	89 c3                	mov    ebx,eax
9f00448b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00448e:	83 e0 03             	and    eax,0x3
9f004491:	85 c0                	test   eax,eax
9f004493:	74 29                	je     9f0044be <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f004495:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004498:	99                   	cdq    
9f004499:	c1 ea 1e             	shr    edx,0x1e
9f00449c:	01 d0                	add    eax,edx
9f00449e:	83 e0 03             	and    eax,0x3
9f0044a1:	29 d0                	sub    eax,edx
9f0044a3:	89 c6                	mov    esi,eax
9f0044a5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0044a8:	99                   	cdq    
9f0044a9:	c1 ea 1e             	shr    edx,0x1e
9f0044ac:	01 d0                	add    eax,edx
9f0044ae:	83 e0 03             	and    eax,0x3
9f0044b1:	29 d0                	sub    eax,edx
9f0044b3:	39 c6                	cmp    esi,eax
9f0044b5:	7d 07                	jge    9f0044be <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f0044b7:	b8 01 00 00 00       	mov    eax,0x1
9f0044bc:	eb 05                	jmp    9f0044c3 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f0044be:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f0044c3:	01 d8                	add    eax,ebx
9f0044c5:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f0044c8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0044cb:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0044ce:	89 c3                	mov    ebx,eax
9f0044d0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044d5:	89 d8                	mov    eax,ebx
9f0044d7:	f7 ea                	imul   edx
9f0044d9:	c1 fa 05             	sar    edx,0x5
9f0044dc:	89 d8                	mov    eax,ebx
9f0044de:	c1 f8 1f             	sar    eax,0x1f
9f0044e1:	89 d7                	mov    edi,edx
9f0044e3:	29 c7                	sub    edi,eax
9f0044e5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0044e8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044ed:	89 d8                	mov    eax,ebx
9f0044ef:	f7 ea                	imul   edx
9f0044f1:	c1 fa 05             	sar    edx,0x5
9f0044f4:	89 d8                	mov    eax,ebx
9f0044f6:	c1 f8 1f             	sar    eax,0x1f
9f0044f9:	29 c2                	sub    edx,eax
9f0044fb:	89 d0                	mov    eax,edx
9f0044fd:	6b c0 64             	imul   eax,eax,0x64
9f004500:	29 c3                	sub    ebx,eax
9f004502:	89 d8                	mov    eax,ebx
9f004504:	85 c0                	test   eax,eax
9f004506:	74 49                	je     9f004551 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f004508:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00450b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004510:	89 d8                	mov    eax,ebx
9f004512:	f7 ea                	imul   edx
9f004514:	c1 fa 05             	sar    edx,0x5
9f004517:	89 d8                	mov    eax,ebx
9f004519:	c1 f8 1f             	sar    eax,0x1f
9f00451c:	89 d6                	mov    esi,edx
9f00451e:	29 c6                	sub    esi,eax
9f004520:	6b c6 64             	imul   eax,esi,0x64
9f004523:	89 de                	mov    esi,ebx
9f004525:	29 c6                	sub    esi,eax
9f004527:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f00452a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00452f:	89 d8                	mov    eax,ebx
9f004531:	f7 ea                	imul   edx
9f004533:	c1 fa 05             	sar    edx,0x5
9f004536:	89 d8                	mov    eax,ebx
9f004538:	c1 f8 1f             	sar    eax,0x1f
9f00453b:	29 c2                	sub    edx,eax
9f00453d:	89 d0                	mov    eax,edx
9f00453f:	6b c0 64             	imul   eax,eax,0x64
9f004542:	29 c3                	sub    ebx,eax
9f004544:	89 d8                	mov    eax,ebx
9f004546:	39 c6                	cmp    esi,eax
9f004548:	7d 07                	jge    9f004551 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f00454a:	b8 01 00 00 00       	mov    eax,0x1
9f00454f:	eb 05                	jmp    9f004556 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f004551:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f004556:	01 f8                	add    eax,edi
9f004558:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f00455b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00455e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004561:	89 c3                	mov    ebx,eax
9f004563:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004568:	89 d8                	mov    eax,ebx
9f00456a:	f7 ea                	imul   edx
9f00456c:	c1 fa 07             	sar    edx,0x7
9f00456f:	89 d8                	mov    eax,ebx
9f004571:	c1 f8 1f             	sar    eax,0x1f
9f004574:	89 d7                	mov    edi,edx
9f004576:	29 c7                	sub    edi,eax
9f004578:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00457b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004580:	89 d8                	mov    eax,ebx
9f004582:	f7 ea                	imul   edx
9f004584:	c1 fa 07             	sar    edx,0x7
9f004587:	89 d8                	mov    eax,ebx
9f004589:	c1 f8 1f             	sar    eax,0x1f
9f00458c:	29 c2                	sub    edx,eax
9f00458e:	89 d0                	mov    eax,edx
9f004590:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004596:	29 c3                	sub    ebx,eax
9f004598:	89 d8                	mov    eax,ebx
9f00459a:	85 c0                	test   eax,eax
9f00459c:	74 4f                	je     9f0045ed <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f00459e:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0045a1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045a6:	89 d8                	mov    eax,ebx
9f0045a8:	f7 ea                	imul   edx
9f0045aa:	c1 fa 07             	sar    edx,0x7
9f0045ad:	89 d8                	mov    eax,ebx
9f0045af:	c1 f8 1f             	sar    eax,0x1f
9f0045b2:	89 d6                	mov    esi,edx
9f0045b4:	29 c6                	sub    esi,eax
9f0045b6:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f0045bc:	89 de                	mov    esi,ebx
9f0045be:	29 c6                	sub    esi,eax
9f0045c0:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f0045c3:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045c8:	89 d8                	mov    eax,ebx
9f0045ca:	f7 ea                	imul   edx
9f0045cc:	c1 fa 07             	sar    edx,0x7
9f0045cf:	89 d8                	mov    eax,ebx
9f0045d1:	c1 f8 1f             	sar    eax,0x1f
9f0045d4:	29 c2                	sub    edx,eax
9f0045d6:	89 d0                	mov    eax,edx
9f0045d8:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0045de:	29 c3                	sub    ebx,eax
9f0045e0:	89 d8                	mov    eax,ebx
9f0045e2:	39 c6                	cmp    esi,eax
9f0045e4:	7d 07                	jge    9f0045ed <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f0045e6:	b8 01 00 00 00       	mov    eax,0x1
9f0045eb:	eb 05                	jmp    9f0045f2 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f0045ed:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f0045f2:	01 f8                	add    eax,edi
9f0045f4:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f0045f7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f0045fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004601:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f004604:	eb 7b                	jmp    9f004681 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f004606:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004609:	83 e0 03             	and    eax,0x3
9f00460c:	85 c0                	test   eax,eax
9f00460e:	75 50                	jne    9f004660 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f004610:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004613:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004618:	89 d8                	mov    eax,ebx
9f00461a:	f7 ea                	imul   edx
9f00461c:	c1 fa 05             	sar    edx,0x5
9f00461f:	89 d8                	mov    eax,ebx
9f004621:	c1 f8 1f             	sar    eax,0x1f
9f004624:	29 c2                	sub    edx,eax
9f004626:	89 d0                	mov    eax,edx
9f004628:	6b c0 64             	imul   eax,eax,0x64
9f00462b:	29 c3                	sub    ebx,eax
9f00462d:	89 d8                	mov    eax,ebx
9f00462f:	85 c0                	test   eax,eax
9f004631:	75 26                	jne    9f004659 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f004633:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004636:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00463b:	89 d8                	mov    eax,ebx
9f00463d:	f7 ea                	imul   edx
9f00463f:	c1 fa 07             	sar    edx,0x7
9f004642:	89 d8                	mov    eax,ebx
9f004644:	c1 f8 1f             	sar    eax,0x1f
9f004647:	29 c2                	sub    edx,eax
9f004649:	89 d0                	mov    eax,edx
9f00464b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004651:	29 c3                	sub    ebx,eax
9f004653:	89 d8                	mov    eax,ebx
9f004655:	85 c0                	test   eax,eax
9f004657:	75 07                	jne    9f004660 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f004659:	ba 01 00 00 00       	mov    edx,0x1
9f00465e:	eb 05                	jmp    9f004665 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f004660:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f004665:	89 d0                	mov    eax,edx
9f004667:	01 c0                	add    eax,eax
9f004669:	01 d0                	add    eax,edx
9f00466b:	c1 e0 02             	shl    eax,0x2
9f00466e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f004671:	01 d0                	add    eax,edx
9f004673:	8b 84 81 04 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2fc]
9f00467a:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f00467d:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f004681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004684:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004687:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f00468a:	0f 8f 76 ff ff ff    	jg     9f004606 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f004690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004693:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f004696:	83 e8 01             	sub    eax,0x1
9f004699:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f00469c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00469f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0046a2:	01 d0                	add    eax,edx
9f0046a4:	85 c0                	test   eax,eax
9f0046a6:	79 04                	jns    9f0046ac <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f0046a8:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f0046ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0046af:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f0046b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046b5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0046b8:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f0046bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0046be:	8d 58 04             	lea    ebx,[eax+0x4]
9f0046c1:	ba 93 24 49 92       	mov    edx,0x92492493
9f0046c6:	89 d8                	mov    eax,ebx
9f0046c8:	f7 ea                	imul   edx
9f0046ca:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0046cd:	c1 f8 02             	sar    eax,0x2
9f0046d0:	89 c2                	mov    edx,eax
9f0046d2:	89 d8                	mov    eax,ebx
9f0046d4:	c1 f8 1f             	sar    eax,0x1f
9f0046d7:	29 c2                	sub    edx,eax
9f0046d9:	89 d0                	mov    eax,edx
9f0046db:	89 c2                	mov    edx,eax
9f0046dd:	c1 e2 03             	shl    edx,0x3
9f0046e0:	29 c2                	sub    edx,eax
9f0046e2:	89 d8                	mov    eax,ebx
9f0046e4:	29 d0                	sub    eax,edx
9f0046e6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0046e9:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f0046ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0046f2:	c1 e0 02             	shl    eax,0x2
9f0046f5:	89 c2                	mov    edx,eax
9f0046f7:	c1 e2 04             	shl    edx,0x4
9f0046fa:	29 c2                	sub    edx,eax
9f0046fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0046ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004702:	01 d0                	add    eax,edx
9f004704:	c1 e0 02             	shl    eax,0x2
9f004707:	89 c2                	mov    edx,eax
9f004709:	c1 e2 04             	shl    edx,0x4
9f00470c:	29 c2                	sub    edx,eax
9f00470e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004711:	8b 00                	mov    eax,DWORD PTR [eax]
9f004713:	01 d0                	add    eax,edx
9f004715:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f004718:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f00471d:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f004720:	89 c3                	mov    ebx,eax
9f004722:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004727:	89 d8                	mov    eax,ebx
9f004729:	f7 ea                	imul   edx
9f00472b:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00472e:	c1 f8 10             	sar    eax,0x10
9f004731:	89 c2                	mov    edx,eax
9f004733:	89 d8                	mov    eax,ebx
9f004735:	c1 f8 1f             	sar    eax,0x1f
9f004738:	29 c2                	sub    edx,eax
9f00473a:	89 d0                	mov    eax,edx
9f00473c:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00473f:	7d 04                	jge    9f004745 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f004741:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f004745:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004748:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f00474e:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f004751:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004757:	8b 00                	mov    eax,DWORD PTR [eax]
9f004759:	85 c0                	test   eax,eax
9f00475b:	7e 16                	jle    9f004773 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f00475d:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004763:	8b 00                	mov    eax,DWORD PTR [eax]
9f004765:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f00476a:	29 c2                	sub    edx,eax
9f00476c:	89 d0                	mov    eax,edx
9f00476e:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004771:	7c 1b                	jl     9f00478e <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f004773:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004779:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f00477b:	85 c0                	test   eax,eax
9f00477d:	79 13                	jns    9f004792 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f00477f:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004785:	8b 00                	mov    eax,DWORD PTR [eax]
9f004787:	f7 d8                	neg    eax
9f004789:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f00478c:	7e 04                	jle    9f004792 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f00478e:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f004792:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004798:	8b 00                	mov    eax,DWORD PTR [eax]
9f00479a:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f00479d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f0047a3:	85 c0                	test   eax,eax
9f0047a5:	74 0b                	je     9f0047b2 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f0047a7:	8b 81 7c 00 00 00    	mov    eax,DWORD PTR [ecx+0x7c]
9f0047ad:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f0047b0:	eb 07                	jmp    9f0047b9 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f0047b2:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f0047b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0047bc:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0047bf:	7e 04                	jle    9f0047c5 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f0047c1:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f0047c5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0047c8:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f0047cb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f0047cf:	74 08                	je     9f0047d9 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f0047d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0047d4:	83 e8 02             	sub    eax,0x2
9f0047d7:	eb 03                	jmp    9f0047dc <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f0047d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f0047dc:	83 c4 20             	add    esp,0x20
9f0047df:	5b                   	pop    ebx
9f0047e0:	5e                   	pop    esi
9f0047e1:	5f                   	pop    edi
9f0047e2:	5d                   	pop    ebp
9f0047e3:	c3                   	ret    

9f0047e4 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f0047e4:	55                   	push   ebp
9f0047e5:	89 e5                	mov    ebp,esp
9f0047e7:	56                   	push   esi
9f0047e8:	53                   	push   ebx
9f0047e9:	83 ec 14             	sub    esp,0x14
9f0047ec:	e8 a1 00 00 00       	call   9f004892 <__x86.get_pc_thunk.ax>
9f0047f1:	05 4b 29 00 00       	add    eax,0x294b
9f0047f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0047f9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f0047fc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f004803:	b8 71 01 00 00       	mov    eax,0x171
9f004808:	bb 00 00 00 00       	mov    ebx,0x0
9f00480d:	b9 00 00 00 00       	mov    ecx,0x0
9f004812:	ba 00 00 00 00       	mov    edx,0x0
9f004817:	be 00 00 00 00       	mov    esi,0x0
9f00481c:	e8 fc ff ff ff       	call   9f00481d <gettime+0x39>
9f004821:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f004824:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f004828:	74 11                	je     9f00483b <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f00482a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00482d:	8d 45 f4             	lea    eax,[ebp-0xc]
9f004830:	50                   	push   eax
9f004831:	e8 05 f7 ff ff       	call   9f003f3b <localtime_rI>
9f004836:	83 c4 08             	add    esp,0x8
9f004839:	eb 0f                	jmp    9f00484a <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f00483b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00483e:	8d 45 f4             	lea    eax,[ebp-0xc]
9f004841:	50                   	push   eax
9f004842:	e8 81 f3 ff ff       	call   9f003bc8 <gmtime_rI>
9f004847:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f00484a:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00484d:	5b                   	pop    ebx
9f00484e:	5e                   	pop    esi
9f00484f:	5d                   	pop    ebp
9f004850:	c3                   	ret    

9f004851 <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203

VISIBLE time_t time (time_t *result)
{
9f004851:	55                   	push   ebp
9f004852:	89 e5                	mov    ebp,esp
9f004854:	53                   	push   ebx
9f004855:	83 ec 14             	sub    esp,0x14
9f004858:	e8 73 00 00 00       	call   9f0048d0 <__x86.get_pc_thunk.bx>
9f00485d:	81 c3 df 28 00 00    	add    ebx,0x28df
/home/yogi/src/os/aproj/libChrisOS/src/time.c:204
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f004863:	83 ec 0c             	sub    esp,0xc
9f004866:	68 71 01 00 00       	push   0x171
9f00486b:	e8 cc ca ff ff       	call   9f00133c <do_syscall0>
9f004870:	83 c4 10             	add    esp,0x10
9f004873:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:205
    memcpyI(result, &ticks, 4);
9f004876:	83 ec 04             	sub    esp,0x4
9f004879:	6a 04                	push   0x4
9f00487b:	8d 45 f4             	lea    eax,[ebp-0xc]
9f00487e:	50                   	push   eax
9f00487f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004882:	e8 f5 dc ff ff       	call   9f00257c <memcpyI>
9f004887:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206
    return ticks;
9f00488a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
9f00488d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f004890:	c9                   	leave  
9f004891:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f004892 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f004892:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f004895:	c3                   	ret    

Disassembly of section .plt:

9f0048a0 <.plt>:
9f0048a0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f0048a6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f0048ac:	00 00                	add    BYTE PTR [eax],al
9f0048ae:	00 00                	add    BYTE PTR [eax],al
9f0048b0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f0048b6:	68 00 00 00 00       	push   0x0
9f0048bb:	e9 e0 ff ff ff       	jmp    9f0048a0 <__x86.get_pc_thunk.ax+0xe>
9f0048c0:	ff a3 10 00 00 00    	jmp    DWORD PTR [ebx+0x10]
9f0048c6:	68 08 00 00 00       	push   0x8
9f0048cb:	e9 d0 ff ff ff       	jmp    9f0048a0 <__x86.get_pc_thunk.ax+0xe>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f0048d0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f0048d0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f0048d3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f0048d4 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f0048d4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f0048d7:	c3                   	ret    

Disassembly of section .eh_frame:

9f0048d8 <.eh_frame>:
9f0048d8:	14 00                	adc    al,0x0
9f0048da:	00 00                	add    BYTE PTR [eax],al
9f0048dc:	00 00                	add    BYTE PTR [eax],al
9f0048de:	00 00                	add    BYTE PTR [eax],al
9f0048e0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0048e3:	00 01                	add    BYTE PTR [ecx],al
9f0048e5:	7c 08                	jl     9f0048ef <__x86.get_pc_thunk.cx+0x1b>
9f0048e7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0048e9:	0c 04                	or     al,0x4
9f0048eb:	04 88                	add    al,0x88
9f0048ed:	01 00                	add    DWORD PTR [eax],eax
9f0048ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0048f2:	00 00                	add    BYTE PTR [eax],al
9f0048f4:	1c 00                	sbb    al,0x0
9f0048f6:	00 00                	add    BYTE PTR [eax],al
9f0048f8:	08 b7 ff ff 38 00    	or     BYTE PTR [edi+0x38ffff],dh
9f0048fe:	00 00                	add    BYTE PTR [eax],al
9f004900:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004903:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004909:	74 c5                	je     9f0048d0 <__x86.get_pc_thunk.bx>
9f00490b:	0c 04                	or     al,0x4
9f00490d:	04 00                	add    al,0x0
9f00490f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004912:	00 00                	add    BYTE PTR [eax],al
9f004914:	3c 00                	cmp    al,0x0
9f004916:	00 00                	add    BYTE PTR [eax],al
9f004918:	20 b7 ff ff 38 00    	and    BYTE PTR [edi+0x38ffff],dh
9f00491e:	00 00                	add    BYTE PTR [eax],al
9f004920:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004923:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004929:	74 c5                	je     9f0048f0 <__x86.get_pc_thunk.cx+0x1c>
9f00492b:	0c 04                	or     al,0x4
9f00492d:	04 00                	add    al,0x0
9f00492f:	00 10                	add    BYTE PTR [eax],dl
9f004931:	00 00                	add    BYTE PTR [eax],al
9f004933:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f004937:	00 5a ff             	add    BYTE PTR [edx-0x1],bl
9f00493a:	ff                   	(bad)  
9f00493b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00493e:	00 00                	add    BYTE PTR [eax],al
9f004940:	00 00                	add    BYTE PTR [eax],al
9f004942:	00 00                	add    BYTE PTR [eax],al
9f004944:	24 00                	and    al,0x0
9f004946:	00 00                	add    BYTE PTR [eax],al
9f004948:	70 00                	jo     9f00494a <__x86.get_pc_thunk.cx+0x76>
9f00494a:	00 00                	add    BYTE PTR [eax],al
9f00494c:	24 b7                	and    al,0xb7
9f00494e:	ff                   	(bad)  
9f00494f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f004952:	00 00                	add    BYTE PTR [eax],al
9f004954:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004957:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00495d:	42                   	inc    edx
9f00495e:	86 03                	xchg   BYTE PTR [ebx],al
9f004960:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f004964:	c3                   	ret    
9f004965:	41                   	inc    ecx
9f004966:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00496a:	04 04                	add    al,0x4
9f00496c:	24 00                	and    al,0x0
9f00496e:	00 00                	add    BYTE PTR [eax],al
9f004970:	98                   	cwde   
9f004971:	00 00                	add    BYTE PTR [eax],al
9f004973:	00 51 b7             	add    BYTE PTR [ecx-0x49],dl
9f004976:	ff                   	(bad)  
9f004977:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f00497a:	00 00                	add    BYTE PTR [eax],al
9f00497c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00497f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004985:	42                   	inc    edx
9f004986:	86 03                	xchg   BYTE PTR [ebx],al
9f004988:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f00498c:	c3                   	ret    
9f00498d:	41                   	inc    ecx
9f00498e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004992:	04 04                	add    al,0x4
9f004994:	24 00                	and    al,0x0
9f004996:	00 00                	add    BYTE PTR [eax],al
9f004998:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f00499b:	00 80 b7 ff ff 97    	add    BYTE PTR [eax-0x68000049],al
9f0049a1:	00 00                	add    BYTE PTR [eax],al
9f0049a3:	00 00                	add    BYTE PTR [eax],al
9f0049a5:	41                   	inc    ecx
9f0049a6:	0e                   	push   cs
9f0049a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049ad:	42                   	inc    edx
9f0049ae:	86 03                	xchg   BYTE PTR [ebx],al
9f0049b0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0049b4:	c3                   	ret    
9f0049b5:	41                   	inc    ecx
9f0049b6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0049ba:	04 04                	add    al,0x4
9f0049bc:	24 00                	and    al,0x0
9f0049be:	00 00                	add    BYTE PTR [eax],al
9f0049c0:	e8 00 00 00 ef       	call   8e0049c5 <sysEnter_Vector+0x8ded49c5>
9f0049c5:	b7 ff                	mov    bh,0xff
9f0049c7:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0049cd:	41                   	inc    ecx
9f0049ce:	0e                   	push   cs
9f0049cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0049d5:	42                   	inc    edx
9f0049d6:	86 03                	xchg   BYTE PTR [ebx],al
9f0049d8:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0049dc:	c3                   	ret    
9f0049dd:	41                   	inc    ecx
9f0049de:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0049e2:	04 04                	add    al,0x4
9f0049e4:	10 00                	adc    BYTE PTR [eax],al
9f0049e6:	00 00                	add    BYTE PTR [eax],al
9f0049e8:	10 01                	adc    BYTE PTR [ecx],al
9f0049ea:	00 00                	add    BYTE PTR [eax],al
9f0049ec:	e4 fe                	in     al,0xfe
9f0049ee:	ff                   	(bad)  
9f0049ef:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0049f2:	00 00                	add    BYTE PTR [eax],al
9f0049f4:	00 00                	add    BYTE PTR [eax],al
9f0049f6:	00 00                	add    BYTE PTR [eax],al
9f0049f8:	20 00                	and    BYTE PTR [eax],al
9f0049fa:	00 00                	add    BYTE PTR [eax],al
9f0049fc:	24 01                	and    al,0x1
9f0049fe:	00 00                	add    BYTE PTR [eax],al
9f004a00:	4c                   	dec    esp
9f004a01:	b8 ff ff 77 00       	mov    eax,0x77ffff
9f004a06:	00 00                	add    BYTE PTR [eax],al
9f004a08:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a11:	44                   	inc    esp
9f004a12:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a15:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004a16:	c5 c3 0c             	(bad)  
9f004a19:	04 04                	add    al,0x4
9f004a1b:	00 20                	add    BYTE PTR [eax],ah
9f004a1d:	00 00                	add    BYTE PTR [eax],al
9f004a1f:	00 48 01             	add    BYTE PTR [eax+0x1],cl
9f004a22:	00 00                	add    BYTE PTR [eax],al
9f004a24:	9f                   	lahf   
9f004a25:	b8 ff ff bb 00       	mov    eax,0xbbffff
9f004a2a:	00 00                	add    BYTE PTR [eax],al
9f004a2c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a35:	44                   	inc    esp
9f004a36:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a39:	b3 c5                	mov    bl,0xc5
9f004a3b:	c3                   	ret    
9f004a3c:	0c 04                	or     al,0x4
9f004a3e:	04 00                	add    al,0x0
9f004a40:	20 00                	and    BYTE PTR [eax],al
9f004a42:	00 00                	add    BYTE PTR [eax],al
9f004a44:	6c                   	ins    BYTE PTR es:[edi],dx
9f004a45:	01 00                	add    DWORD PTR [eax],eax
9f004a47:	00 36                	add    BYTE PTR [esi],dh
9f004a49:	b9 ff ff bb 00       	mov    ecx,0xbbffff
9f004a4e:	00 00                	add    BYTE PTR [eax],al
9f004a50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a59:	44                   	inc    esp
9f004a5a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004a5d:	b3 c5                	mov    bl,0xc5
9f004a5f:	c3                   	ret    
9f004a60:	0c 04                	or     al,0x4
9f004a62:	04 00                	add    al,0x0
9f004a64:	1c 00                	sbb    al,0x0
9f004a66:	00 00                	add    BYTE PTR [eax],al
9f004a68:	90                   	nop
9f004a69:	01 00                	add    DWORD PTR [eax],eax
9f004a6b:	00 cd                	add    ch,cl
9f004a6d:	b9 ff ff 5c 00       	mov    ecx,0x5cffff
9f004a72:	00 00                	add    BYTE PTR [eax],al
9f004a74:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004a77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a7d:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f004a80:	0c 04                	or     al,0x4
9f004a82:	04 00                	add    al,0x0
9f004a84:	20 00                	and    BYTE PTR [eax],al
9f004a86:	00 00                	add    BYTE PTR [eax],al
9f004a88:	b0 01                	mov    al,0x1
9f004a8a:	00 00                	add    BYTE PTR [eax],al
9f004a8c:	0c ba                	or     al,0xba
9f004a8e:	ff                   	(bad)  
9f004a8f:	ff                   	(bad)  
9f004a90:	ba 00 00 00 00       	mov    edx,0x0
9f004a95:	41                   	inc    ecx
9f004a96:	0e                   	push   cs
9f004a97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004a9d:	44                   	inc    esp
9f004a9e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004aa1:	b2 c5                	mov    dl,0xc5
9f004aa3:	c3                   	ret    
9f004aa4:	0c 04                	or     al,0x4
9f004aa6:	04 00                	add    al,0x0
9f004aa8:	20 00                	and    BYTE PTR [eax],al
9f004aaa:	00 00                	add    BYTE PTR [eax],al
9f004aac:	d4 01                	aam    0x1
9f004aae:	00 00                	add    BYTE PTR [eax],al
9f004ab0:	a2 ba ff ff 5a       	mov    ds:0x5affffba,al
9f004ab5:	00 00                	add    BYTE PTR [eax],al
9f004ab7:	00 00                	add    BYTE PTR [eax],al
9f004ab9:	41                   	inc    ecx
9f004aba:	0e                   	push   cs
9f004abb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ac1:	44                   	inc    esp
9f004ac2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004ac5:	52                   	push   edx
9f004ac6:	c5 c3 0c             	(bad)  
9f004ac9:	04 04                	add    al,0x4
9f004acb:	00 20                	add    BYTE PTR [eax],ah
9f004acd:	00 00                	add    BYTE PTR [eax],al
9f004acf:	00 f8                	add    al,bh
9f004ad1:	01 00                	add    DWORD PTR [eax],eax
9f004ad3:	00 d8                	add    al,bl
9f004ad5:	ba ff ff 5a 00       	mov    edx,0x5affff
9f004ada:	00 00                	add    BYTE PTR [eax],al
9f004adc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004adf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ae5:	44                   	inc    esp
9f004ae6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004ae9:	52                   	push   edx
9f004aea:	c5 c3 0c             	(bad)  
9f004aed:	04 04                	add    al,0x4
9f004aef:	00 20                	add    BYTE PTR [eax],ah
9f004af1:	00 00                	add    BYTE PTR [eax],al
9f004af3:	00 1c 02             	add    BYTE PTR [edx+eax*1],bl
9f004af6:	00 00                	add    BYTE PTR [eax],al
9f004af8:	10 bb ff ff aa 00    	adc    BYTE PTR [ebx+0xaaffff],bh
9f004afe:	00 00                	add    BYTE PTR [eax],al
9f004b00:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b09:	44                   	inc    esp
9f004b0a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004b0d:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f004b12:	04 00                	add    al,0x0
9f004b14:	1c 00                	sbb    al,0x0
9f004b16:	00 00                	add    BYTE PTR [eax],al
9f004b18:	40                   	inc    eax
9f004b19:	02 00                	add    al,BYTE PTR [eax]
9f004b1b:	00 96 bb ff ff 23    	add    BYTE PTR [esi+0x23ffffbb],dl
9f004b21:	00 00                	add    BYTE PTR [eax],al
9f004b23:	00 00                	add    BYTE PTR [eax],al
9f004b25:	41                   	inc    ecx
9f004b26:	0e                   	push   cs
9f004b27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b2d:	5f                   	pop    edi
9f004b2e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b31:	04 00                	add    al,0x0
9f004b33:	00 20                	add    BYTE PTR [eax],ah
9f004b35:	00 00                	add    BYTE PTR [eax],al
9f004b37:	00 60 02             	add    BYTE PTR [eax+0x2],ah
9f004b3a:	00 00                	add    BYTE PTR [eax],al
9f004b3c:	99                   	cdq    
9f004b3d:	bb ff ff c1 01       	mov    ebx,0x1c1ffff
9f004b42:	00 00                	add    BYTE PTR [eax],al
9f004b44:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b4d:	44                   	inc    esp
9f004b4e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004b51:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f004b56:	04 04                	add    al,0x4
9f004b58:	20 00                	and    BYTE PTR [eax],al
9f004b5a:	00 00                	add    BYTE PTR [eax],al
9f004b5c:	84 02                	test   BYTE PTR [edx],al
9f004b5e:	00 00                	add    BYTE PTR [eax],al
9f004b60:	36                   	ss
9f004b61:	bd ff ff 2c 00       	mov    ebp,0x2cffff
9f004b66:	00 00                	add    BYTE PTR [eax],al
9f004b68:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b71:	44                   	inc    esp
9f004b72:	83 03 64             	add    DWORD PTR [ebx],0x64
9f004b75:	c5 c3 0c             	(bad)  
9f004b78:	04 04                	add    al,0x4
9f004b7a:	00 00                	add    BYTE PTR [eax],al
9f004b7c:	1c 00                	sbb    al,0x0
9f004b7e:	00 00                	add    BYTE PTR [eax],al
9f004b80:	a8 02                	test   al,0x2
9f004b82:	00 00                	add    BYTE PTR [eax],al
9f004b84:	3e                   	ds
9f004b85:	bd ff ff 23 00       	mov    ebp,0x23ffff
9f004b8a:	00 00                	add    BYTE PTR [eax],al
9f004b8c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004b8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004b95:	5f                   	pop    edi
9f004b96:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004b99:	04 00                	add    al,0x0
9f004b9b:	00 20                	add    BYTE PTR [eax],ah
9f004b9d:	00 00                	add    BYTE PTR [eax],al
9f004b9f:	00 c8                	add    al,cl
9f004ba1:	02 00                	add    al,BYTE PTR [eax]
9f004ba3:	00 44 bd ff          	add    BYTE PTR [ebp+edi*4-0x1],al
9f004ba7:	ff 31                	push   DWORD PTR [ecx]
9f004ba9:	00 00                	add    BYTE PTR [eax],al
9f004bab:	00 00                	add    BYTE PTR [eax],al
9f004bad:	41                   	inc    ecx
9f004bae:	0e                   	push   cs
9f004baf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bb5:	44                   	inc    esp
9f004bb6:	83 03 69             	add    DWORD PTR [ebx],0x69
9f004bb9:	c5 c3 0c             	(bad)  
9f004bbc:	04 04                	add    al,0x4
9f004bbe:	00 00                	add    BYTE PTR [eax],al
9f004bc0:	20 00                	and    BYTE PTR [eax],al
9f004bc2:	00 00                	add    BYTE PTR [eax],al
9f004bc4:	ec                   	in     al,dx
9f004bc5:	02 00                	add    al,BYTE PTR [eax]
9f004bc7:	00 51 bd             	add    BYTE PTR [ecx-0x43],dl
9f004bca:	ff                   	(bad)  
9f004bcb:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
9f004bce:	00 00                	add    BYTE PTR [eax],al
9f004bd0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bd9:	44                   	inc    esp
9f004bda:	83 03 64             	add    DWORD PTR [ebx],0x64
9f004bdd:	c5 c3 0c             	(bad)  
9f004be0:	04 04                	add    al,0x4
9f004be2:	00 00                	add    BYTE PTR [eax],al
9f004be4:	20 00                	and    BYTE PTR [eax],al
9f004be6:	00 00                	add    BYTE PTR [eax],al
9f004be8:	10 03                	adc    BYTE PTR [ebx],al
9f004bea:	00 00                	add    BYTE PTR [eax],al
9f004bec:	59                   	pop    ecx
9f004bed:	bd ff ff 59 00       	mov    ebp,0x59ffff
9f004bf2:	00 00                	add    BYTE PTR [eax],al
9f004bf4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004bf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004bfd:	44                   	inc    esp
9f004bfe:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004c01:	51                   	push   ecx
9f004c02:	c5 c3 0c             	(bad)  
9f004c05:	04 04                	add    al,0x4
9f004c07:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004c0a:	00 00                	add    BYTE PTR [eax],al
9f004c0c:	34 03                	xor    al,0x3
9f004c0e:	00 00                	add    BYTE PTR [eax],al
9f004c10:	8e bd ff ff 93 00    	mov    ?,WORD PTR [ebp+0x93ffff]
9f004c16:	00 00                	add    BYTE PTR [eax],al
9f004c18:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c21:	45                   	inc    ebp
9f004c22:	86 03                	xchg   BYTE PTR [ebx],al
9f004c24:	83 04 02 88          	add    DWORD PTR [edx+eax*1],0xffffff88
9f004c28:	c3                   	ret    
9f004c29:	41                   	inc    ecx
9f004c2a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004c2e:	04 04                	add    al,0x4
9f004c30:	20 00                	and    BYTE PTR [eax],al
9f004c32:	00 00                	add    BYTE PTR [eax],al
9f004c34:	5c                   	pop    esp
9f004c35:	03 00                	add    eax,DWORD PTR [eax]
9f004c37:	00 f9                	add    cl,bh
9f004c39:	bd ff ff 2a 00       	mov    ebp,0x2affff
9f004c3e:	00 00                	add    BYTE PTR [eax],al
9f004c40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c49:	44                   	inc    esp
9f004c4a:	83 03 62             	add    DWORD PTR [ebx],0x62
9f004c4d:	c5 c3 0c             	(bad)  
9f004c50:	04 04                	add    al,0x4
9f004c52:	00 00                	add    BYTE PTR [eax],al
9f004c54:	24 00                	and    al,0x0
9f004c56:	00 00                	add    BYTE PTR [eax],al
9f004c58:	80 03 00             	add    BYTE PTR [ebx],0x0
9f004c5b:	00 ff                	add    bh,bh
9f004c5d:	bd ff ff 35 00       	mov    ebp,0x35ffff
9f004c62:	00 00                	add    BYTE PTR [eax],al
9f004c64:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004c67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c6d:	42                   	inc    edx
9f004c6e:	86 03                	xchg   BYTE PTR [ebx],al
9f004c70:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004c77:	c5 
9f004c78:	0c 04                	or     al,0x4
9f004c7a:	04 00                	add    al,0x0
9f004c7c:	1c 00                	sbb    al,0x0
9f004c7e:	00 00                	add    BYTE PTR [eax],al
9f004c80:	a8 03                	test   al,0x3
9f004c82:	00 00                	add    BYTE PTR [eax],al
9f004c84:	0c be                	or     al,0xbe
9f004c86:	ff                   	(bad)  
9f004c87:	ff 26                	jmp    DWORD PTR [esi]
9f004c89:	00 00                	add    BYTE PTR [eax],al
9f004c8b:	00 00                	add    BYTE PTR [eax],al
9f004c8d:	41                   	inc    ecx
9f004c8e:	0e                   	push   cs
9f004c8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004c95:	62                   	(bad)  
9f004c96:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004c99:	04 00                	add    al,0x0
9f004c9b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004c9e:	00 00                	add    BYTE PTR [eax],al
9f004ca0:	c8 03 00 00          	enter  0x3,0x0
9f004ca4:	12 be ff ff 35 00    	adc    bh,BYTE PTR [esi+0x35ffff]
9f004caa:	00 00                	add    BYTE PTR [eax],al
9f004cac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004caf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cb5:	42                   	inc    edx
9f004cb6:	86 03                	xchg   BYTE PTR [ebx],al
9f004cb8:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f004cbf:	c5 
9f004cc0:	0c 04                	or     al,0x4
9f004cc2:	04 00                	add    al,0x0
9f004cc4:	1c 00                	sbb    al,0x0
9f004cc6:	00 00                	add    BYTE PTR [eax],al
9f004cc8:	f0 03 00             	lock add eax,DWORD PTR [eax]
9f004ccb:	00 1f                	add    BYTE PTR [edi],bl
9f004ccd:	be ff ff 26 00       	mov    esi,0x26ffff
9f004cd2:	00 00                	add    BYTE PTR [eax],al
9f004cd4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004cd7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cdd:	62                   	(bad)  
9f004cde:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004ce1:	04 00                	add    al,0x0
9f004ce3:	00 20                	add    BYTE PTR [eax],ah
9f004ce5:	00 00                	add    BYTE PTR [eax],al
9f004ce7:	00 10                	add    BYTE PTR [eax],dl
9f004ce9:	04 00                	add    al,0x0
9f004ceb:	00 25 be ff ff 2e    	add    BYTE PTR ds:0x2effffbe,ah
9f004cf1:	00 00                	add    BYTE PTR [eax],al
9f004cf3:	00 00                	add    BYTE PTR [eax],al
9f004cf5:	41                   	inc    ecx
9f004cf6:	0e                   	push   cs
9f004cf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004cfd:	44                   	inc    esp
9f004cfe:	83 03 66             	add    DWORD PTR [ebx],0x66
9f004d01:	c5 c3 0c             	(bad)  
9f004d04:	04 04                	add    al,0x4
9f004d06:	00 00                	add    BYTE PTR [eax],al
9f004d08:	1c 00                	sbb    al,0x0
9f004d0a:	00 00                	add    BYTE PTR [eax],al
9f004d0c:	34 04                	xor    al,0x4
9f004d0e:	00 00                	add    BYTE PTR [eax],al
9f004d10:	2f                   	das    
9f004d11:	be ff ff 26 00       	mov    esi,0x26ffff
9f004d16:	00 00                	add    BYTE PTR [eax],al
9f004d18:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d21:	62                   	(bad)  
9f004d22:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d25:	04 00                	add    al,0x0
9f004d27:	00 20                	add    BYTE PTR [eax],ah
9f004d29:	00 00                	add    BYTE PTR [eax],al
9f004d2b:	00 54 04 00          	add    BYTE PTR [esp+eax*1+0x0],dl
9f004d2f:	00 35 be ff ff 2d    	add    BYTE PTR ds:0x2dffffbe,dh
9f004d35:	00 00                	add    BYTE PTR [eax],al
9f004d37:	00 00                	add    BYTE PTR [eax],al
9f004d39:	41                   	inc    ecx
9f004d3a:	0e                   	push   cs
9f004d3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d41:	44                   	inc    esp
9f004d42:	83 03 65             	add    DWORD PTR [ebx],0x65
9f004d45:	c5 c3 0c             	(bad)  
9f004d48:	04 04                	add    al,0x4
9f004d4a:	00 00                	add    BYTE PTR [eax],al
9f004d4c:	1c 00                	sbb    al,0x0
9f004d4e:	00 00                	add    BYTE PTR [eax],al
9f004d50:	78 04                	js     9f004d56 <__x86.get_pc_thunk.cx+0x482>
9f004d52:	00 00                	add    BYTE PTR [eax],al
9f004d54:	3e                   	ds
9f004d55:	be ff ff 23 00       	mov    esi,0x23ffff
9f004d5a:	00 00                	add    BYTE PTR [eax],al
9f004d5c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d5f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d65:	5f                   	pop    edi
9f004d66:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004d69:	04 00                	add    al,0x0
9f004d6b:	00 20                	add    BYTE PTR [eax],ah
9f004d6d:	00 00                	add    BYTE PTR [eax],al
9f004d6f:	00 98 04 00 00 41    	add    BYTE PTR [eax+0x41000004],bl
9f004d75:	be ff ff f5 02       	mov    esi,0x2f5ffff
9f004d7a:	00 00                	add    BYTE PTR [eax],al
9f004d7c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004d7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004d85:	44                   	inc    esp
9f004d86:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004d89:	ed                   	in     eax,dx
9f004d8a:	02 c5                	add    al,ch
9f004d8c:	c3                   	ret    
9f004d8d:	0c 04                	or     al,0x4
9f004d8f:	04 20                	add    al,0x20
9f004d91:	00 00                	add    BYTE PTR [eax],al
9f004d93:	00 bc 04 00 00 12 c1 	add    BYTE PTR [esp+eax*1-0x3eee0000],bh
9f004d9a:	ff                   	(bad)  
9f004d9b:	ff 29                	jmp    FWORD PTR [ecx]
9f004d9d:	00 00                	add    BYTE PTR [eax],al
9f004d9f:	00 00                	add    BYTE PTR [eax],al
9f004da1:	41                   	inc    ecx
9f004da2:	0e                   	push   cs
9f004da3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004da9:	44                   	inc    esp
9f004daa:	83 03 61             	add    DWORD PTR [ebx],0x61
9f004dad:	c5 c3 0c             	(bad)  
9f004db0:	04 04                	add    al,0x4
9f004db2:	00 00                	add    BYTE PTR [eax],al
9f004db4:	1c 00                	sbb    al,0x0
9f004db6:	00 00                	add    BYTE PTR [eax],al
9f004db8:	e0 04                	loopne 9f004dbe <__x86.get_pc_thunk.cx+0x4ea>
9f004dba:	00 00                	add    BYTE PTR [eax],al
9f004dbc:	17                   	pop    ss
9f004dbd:	c1 ff ff             	sar    edi,0xff
9f004dc0:	20 00                	and    BYTE PTR [eax],al
9f004dc2:	00 00                	add    BYTE PTR [eax],al
9f004dc4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004dc7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004dcd:	5c                   	pop    esp
9f004dce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004dd1:	04 00                	add    al,0x0
9f004dd3:	00 20                	add    BYTE PTR [eax],ah
9f004dd5:	00 00                	add    BYTE PTR [eax],al
9f004dd7:	00 00                	add    BYTE PTR [eax],al
9f004dd9:	05 00 00 17 c1       	add    eax,0xc1170000
9f004dde:	ff                   	(bad)  
9f004ddf:	ff c1                	inc    ecx
9f004de1:	01 00                	add    DWORD PTR [eax],eax
9f004de3:	00 00                	add    BYTE PTR [eax],al
9f004de5:	41                   	inc    ecx
9f004de6:	0e                   	push   cs
9f004de7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ded:	44                   	inc    esp
9f004dee:	83 03 03             	add    DWORD PTR [ebx],0x3
9f004df1:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f004df6:	04 04                	add    al,0x4
9f004df8:	1c 00                	sbb    al,0x0
9f004dfa:	00 00                	add    BYTE PTR [eax],al
9f004dfc:	24 05                	and    al,0x5
9f004dfe:	00 00                	add    BYTE PTR [eax],al
9f004e00:	b4 c2                	mov    ah,0xc2
9f004e02:	ff                   	(bad)  
9f004e03:	ff 26                	jmp    DWORD PTR [esi]
9f004e05:	00 00                	add    BYTE PTR [eax],al
9f004e07:	00 00                	add    BYTE PTR [eax],al
9f004e09:	41                   	inc    ecx
9f004e0a:	0e                   	push   cs
9f004e0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e11:	62                   	(bad)  
9f004e12:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e15:	04 00                	add    al,0x0
9f004e17:	00 20                	add    BYTE PTR [eax],ah
9f004e19:	00 00                	add    BYTE PTR [eax],al
9f004e1b:	00 44 05 00          	add    BYTE PTR [ebp+eax*1+0x0],al
9f004e1f:	00 bc c2 ff ff 26 00 	add    BYTE PTR [edx+eax*8+0x26ffff],bh
9f004e26:	00 00                	add    BYTE PTR [eax],al
9f004e28:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e31:	41                   	inc    ecx
9f004e32:	83 03 60             	add    DWORD PTR [ebx],0x60
9f004e35:	c3                   	ret    
9f004e36:	41                   	inc    ecx
9f004e37:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e3a:	04 00                	add    al,0x0
9f004e3c:	20 00                	and    BYTE PTR [eax],al
9f004e3e:	00 00                	add    BYTE PTR [eax],al
9f004e40:	68 05 00 00 be       	push   0xbe000005
9f004e45:	c2 ff ff             	ret    0xffff
9f004e48:	43                   	inc    ebx
9f004e49:	00 00                	add    BYTE PTR [eax],al
9f004e4b:	00 00                	add    BYTE PTR [eax],al
9f004e4d:	41                   	inc    ecx
9f004e4e:	0e                   	push   cs
9f004e4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e55:	44                   	inc    esp
9f004e56:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004e59:	c3                   	ret    
9f004e5a:	41                   	inc    ecx
9f004e5b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e5e:	04 00                	add    al,0x0
9f004e60:	20 00                	and    BYTE PTR [eax],al
9f004e62:	00 00                	add    BYTE PTR [eax],al
9f004e64:	8c 05 00 00 dd c2    	mov    WORD PTR ds:0xc2dd0000,es
9f004e6a:	ff                   	(bad)  
9f004e6b:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f004e6e:	00 00                	add    BYTE PTR [eax],al
9f004e70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004e73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e79:	44                   	inc    esp
9f004e7a:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f004e7d:	c3                   	ret    
9f004e7e:	41                   	inc    ecx
9f004e7f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004e82:	04 00                	add    al,0x0
9f004e84:	20 00                	and    BYTE PTR [eax],al
9f004e86:	00 00                	add    BYTE PTR [eax],al
9f004e88:	b0 05                	mov    al,0x5
9f004e8a:	00 00                	add    BYTE PTR [eax],al
9f004e8c:	fc                   	cld    
9f004e8d:	c2 ff ff             	ret    0xffff
9f004e90:	bd 00 00 00 00       	mov    ebp,0x0
9f004e95:	41                   	inc    ecx
9f004e96:	0e                   	push   cs
9f004e97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004e9d:	44                   	inc    esp
9f004e9e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004ea1:	b5 c5                	mov    ch,0xc5
9f004ea3:	c3                   	ret    
9f004ea4:	0c 04                	or     al,0x4
9f004ea6:	04 00                	add    al,0x0
9f004ea8:	24 00                	and    al,0x0
9f004eaa:	00 00                	add    BYTE PTR [eax],al
9f004eac:	d4 05                	aam    0x5
9f004eae:	00 00                	add    BYTE PTR [eax],al
9f004eb0:	98                   	cwde   
9f004eb1:	c3                   	ret    
9f004eb2:	ff                   	(bad)  
9f004eb3:	ff                   	(bad)  
9f004eb4:	3a 00                	cmp    al,BYTE PTR [eax]
9f004eb6:	00 00                	add    BYTE PTR [eax],al
9f004eb8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ebb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ec1:	45                   	inc    ebp
9f004ec2:	86 03                	xchg   BYTE PTR [ebx],al
9f004ec4:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f004ec8:	41                   	inc    ecx
9f004ec9:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004ecd:	04 04                	add    al,0x4
9f004ecf:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004ed2:	00 00                	add    BYTE PTR [eax],al
9f004ed4:	fc                   	cld    
9f004ed5:	05 00 00 aa c3       	add    eax,0xc3aa0000
9f004eda:	ff                   	(bad)  
9f004edb:	ff                   	(bad)  
9f004edc:	3c 00                	cmp    al,0x0
9f004ede:	00 00                	add    BYTE PTR [eax],al
9f004ee0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004ee3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ee9:	45                   	inc    ebp
9f004eea:	86 03                	xchg   BYTE PTR [ebx],al
9f004eec:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f004ef0:	41                   	inc    ecx
9f004ef1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004ef5:	04 04                	add    al,0x4
9f004ef7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004efa:	00 00                	add    BYTE PTR [eax],al
9f004efc:	24 06                	and    al,0x6
9f004efe:	00 00                	add    BYTE PTR [eax],al
9f004f00:	be c3 ff ff 3e       	mov    esi,0x3effffc3
9f004f05:	00 00                	add    BYTE PTR [eax],al
9f004f07:	00 00                	add    BYTE PTR [eax],al
9f004f09:	41                   	inc    ecx
9f004f0a:	0e                   	push   cs
9f004f0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f11:	45                   	inc    ebp
9f004f12:	86 03                	xchg   BYTE PTR [ebx],al
9f004f14:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f004f18:	41                   	inc    ecx
9f004f19:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004f1d:	04 04                	add    al,0x4
9f004f1f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004f22:	00 00                	add    BYTE PTR [eax],al
9f004f24:	4c                   	dec    esp
9f004f25:	06                   	push   es
9f004f26:	00 00                	add    BYTE PTR [eax],al
9f004f28:	d4 c3                	aam    0xc3
9f004f2a:	ff                   	(bad)  
9f004f2b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f004f2e:	00 00                	add    BYTE PTR [eax],al
9f004f30:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004f33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f39:	45                   	inc    ebp
9f004f3a:	86 03                	xchg   BYTE PTR [ebx],al
9f004f3c:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f004f43:	c5 
9f004f44:	0c 04                	or     al,0x4
9f004f46:	04 00                	add    al,0x0
9f004f48:	24 00                	and    al,0x0
9f004f4a:	00 00                	add    BYTE PTR [eax],al
9f004f4c:	74 06                	je     9f004f54 <__x86.get_pc_thunk.cx+0x680>
9f004f4e:	00 00                	add    BYTE PTR [eax],al
9f004f50:	ec                   	in     al,dx
9f004f51:	c3                   	ret    
9f004f52:	ff                   	(bad)  
9f004f53:	ff 42 00             	inc    DWORD PTR [edx+0x0]
9f004f56:	00 00                	add    BYTE PTR [eax],al
9f004f58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004f5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f61:	45                   	inc    ebp
9f004f62:	86 03                	xchg   BYTE PTR [ebx],al
9f004f64:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f004f68:	41                   	inc    ecx
9f004f69:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f004f6d:	04 04                	add    al,0x4
9f004f6f:	00 20                	add    BYTE PTR [eax],ah
9f004f71:	00 00                	add    BYTE PTR [eax],al
9f004f73:	00 9c 06 00 00 06 c4 	add    BYTE PTR [esi+eax*1-0x3bfa0000],bl
9f004f7a:	ff                   	(bad)  
9f004f7b:	ff cb                	dec    ebx
9f004f7d:	00 00                	add    BYTE PTR [eax],al
9f004f7f:	00 00                	add    BYTE PTR [eax],al
9f004f81:	41                   	inc    ecx
9f004f82:	0e                   	push   cs
9f004f83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004f89:	44                   	inc    esp
9f004f8a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004f8d:	c3                   	ret    
9f004f8e:	c5 c3 0c             	(bad)  
9f004f91:	04 04                	add    al,0x4
9f004f93:	00 20                	add    BYTE PTR [eax],ah
9f004f95:	00 00                	add    BYTE PTR [eax],al
9f004f97:	00 c0                	add    al,al
9f004f99:	06                   	push   es
9f004f9a:	00 00                	add    BYTE PTR [eax],al
9f004f9c:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f004f9d:	c4                   	(bad)  
9f004f9e:	ff                   	(bad)  
9f004f9f:	ff 23                	jmp    DWORD PTR [ebx]
9f004fa1:	00 00                	add    BYTE PTR [eax],al
9f004fa3:	00 00                	add    BYTE PTR [eax],al
9f004fa5:	41                   	inc    ecx
9f004fa6:	0e                   	push   cs
9f004fa7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004fad:	44                   	inc    esp
9f004fae:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f004fb1:	c3                   	ret    
9f004fb2:	41                   	inc    ecx
9f004fb3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004fb6:	04 00                	add    al,0x0
9f004fb8:	20 00                	and    BYTE PTR [eax],al
9f004fba:	00 00                	add    BYTE PTR [eax],al
9f004fbc:	e4 06                	in     al,0x6
9f004fbe:	00 00                	add    BYTE PTR [eax],al
9f004fc0:	ac                   	lods   al,BYTE PTR ds:[esi]
9f004fc1:	c4                   	(bad)  
9f004fc2:	ff                   	(bad)  
9f004fc3:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f004fc6:	00 00                	add    BYTE PTR [eax],al
9f004fc8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004fcb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004fd1:	44                   	inc    esp
9f004fd2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004fd5:	51                   	push   ecx
9f004fd6:	c5 c3 0c             	(bad)  
9f004fd9:	04 04                	add    al,0x4
9f004fdb:	00 20                	add    BYTE PTR [eax],ah
9f004fdd:	00 00                	add    BYTE PTR [eax],al
9f004fdf:	00 08                	add    BYTE PTR [eax],cl
9f004fe1:	07                   	pop    es
9f004fe2:	00 00                	add    BYTE PTR [eax],al
9f004fe4:	e1 c4                	loope  9f004faa <__x86.get_pc_thunk.cx+0x6d6>
9f004fe6:	ff                   	(bad)  
9f004fe7:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f004feb:	00 00                	add    BYTE PTR [eax],al
9f004fed:	41                   	inc    ecx
9f004fee:	0e                   	push   cs
9f004fef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004ff5:	44                   	inc    esp
9f004ff6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f004ff9:	4c                   	dec    esp
9f004ffa:	c5 c3 0c             	(bad)  
9f004ffd:	04 04                	add    al,0x4
9f004fff:	00 20                	add    BYTE PTR [eax],ah
9f005001:	00 00                	add    BYTE PTR [eax],al
9f005003:	00 2c 07             	add    BYTE PTR [edi+eax*1],ch
9f005006:	00 00                	add    BYTE PTR [eax],al
9f005008:	11 c5                	adc    ebp,eax
9f00500a:	ff                   	(bad)  
9f00500b:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f00500f:	00 00                	add    BYTE PTR [eax],al
9f005011:	41                   	inc    ecx
9f005012:	0e                   	push   cs
9f005013:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005019:	44                   	inc    esp
9f00501a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00501d:	4c                   	dec    esp
9f00501e:	c5 c3 0c             	(bad)  
9f005021:	04 04                	add    al,0x4
9f005023:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005026:	00 00                	add    BYTE PTR [eax],al
9f005028:	50                   	push   eax
9f005029:	07                   	pop    es
9f00502a:	00 00                	add    BYTE PTR [eax],al
9f00502c:	41                   	inc    ecx
9f00502d:	c5 ff ff             	(bad)  
9f005030:	34 00                	xor    al,0x0
9f005032:	00 00                	add    BYTE PTR [eax],al
9f005034:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005037:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00503d:	70 c5                	jo     9f005004 <__x86.get_pc_thunk.cx+0x730>
9f00503f:	0c 04                	or     al,0x4
9f005041:	04 00                	add    al,0x0
9f005043:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005046:	00 00                	add    BYTE PTR [eax],al
9f005048:	70 07                	jo     9f005051 <__x86.get_pc_thunk.cx+0x77d>
9f00504a:	00 00                	add    BYTE PTR [eax],al
9f00504c:	55                   	push   ebp
9f00504d:	c5 ff ff             	(bad)  
9f005050:	37                   	aaa    
9f005051:	00 00                	add    BYTE PTR [eax],al
9f005053:	00 00                	add    BYTE PTR [eax],al
9f005055:	41                   	inc    ecx
9f005056:	0e                   	push   cs
9f005057:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00505d:	73 c5                	jae    9f005024 <__x86.get_pc_thunk.cx+0x750>
9f00505f:	0c 04                	or     al,0x4
9f005061:	04 00                	add    al,0x0
9f005063:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005066:	00 00                	add    BYTE PTR [eax],al
9f005068:	90                   	nop
9f005069:	07                   	pop    es
9f00506a:	00 00                	add    BYTE PTR [eax],al
9f00506c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00506d:	c5 ff ff             	(bad)  
9f005070:	37                   	aaa    
9f005071:	00 00                	add    BYTE PTR [eax],al
9f005073:	00 00                	add    BYTE PTR [eax],al
9f005075:	41                   	inc    ecx
9f005076:	0e                   	push   cs
9f005077:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00507d:	73 c5                	jae    9f005044 <__x86.get_pc_thunk.cx+0x770>
9f00507f:	0c 04                	or     al,0x4
9f005081:	04 00                	add    al,0x0
9f005083:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005086:	00 00                	add    BYTE PTR [eax],al
9f005088:	b0 07                	mov    al,0x7
9f00508a:	00 00                	add    BYTE PTR [eax],al
9f00508c:	83 c5 ff             	add    ebp,0xffffffff
9f00508f:	ff 70 00             	push   DWORD PTR [eax+0x0]
9f005092:	00 00                	add    BYTE PTR [eax],al
9f005094:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005097:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00509d:	45                   	inc    ebp
9f00509e:	86 03                	xchg   BYTE PTR [ebx],al
9f0050a0:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f0050a4:	c3                   	ret    
9f0050a5:	41                   	inc    ecx
9f0050a6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0050aa:	04 04                	add    al,0x4
9f0050ac:	24 00                	and    al,0x0
9f0050ae:	00 00                	add    BYTE PTR [eax],al
9f0050b0:	d8 07                	fadd   DWORD PTR [edi]
9f0050b2:	00 00                	add    BYTE PTR [eax],al
9f0050b4:	cb                   	retf   
9f0050b5:	c5 ff ff             	(bad)  
9f0050b8:	70 00                	jo     9f0050ba <__x86.get_pc_thunk.cx+0x7e6>
9f0050ba:	00 00                	add    BYTE PTR [eax],al
9f0050bc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0050bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050c5:	45                   	inc    ebp
9f0050c6:	86 03                	xchg   BYTE PTR [ebx],al
9f0050c8:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f0050cc:	c3                   	ret    
9f0050cd:	41                   	inc    ecx
9f0050ce:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0050d2:	04 04                	add    al,0x4
9f0050d4:	1c 00                	sbb    al,0x0
9f0050d6:	00 00                	add    BYTE PTR [eax],al
9f0050d8:	00 08                	add    BYTE PTR [eax],cl
9f0050da:	00 00                	add    BYTE PTR [eax],al
9f0050dc:	13 c6                	adc    eax,esi
9f0050de:	ff                   	(bad)  
9f0050df:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0050e5:	41                   	inc    ecx
9f0050e6:	0e                   	push   cs
9f0050e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050ed:	59                   	pop    ecx
9f0050ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0050f1:	04 00                	add    al,0x0
9f0050f3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0050f6:	00 00                	add    BYTE PTR [eax],al
9f0050f8:	20 08                	and    BYTE PTR [eax],cl
9f0050fa:	00 00                	add    BYTE PTR [eax],al
9f0050fc:	10 c6                	adc    dh,al
9f0050fe:	ff                   	(bad)  
9f0050ff:	ff 29                	jmp    FWORD PTR [ecx]
9f005101:	00 00                	add    BYTE PTR [eax],al
9f005103:	00 00                	add    BYTE PTR [eax],al
9f005105:	41                   	inc    ecx
9f005106:	0e                   	push   cs
9f005107:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00510d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f005111:	04 00                	add    al,0x0
9f005113:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005116:	00 00                	add    BYTE PTR [eax],al
9f005118:	40                   	inc    eax
9f005119:	08 00                	or     BYTE PTR [eax],al
9f00511b:	00 19                	add    BYTE PTR [ecx],bl
9f00511d:	c6                   	(bad)  
9f00511e:	ff                   	(bad)  
9f00511f:	ff 29                	jmp    FWORD PTR [ecx]
9f005121:	00 00                	add    BYTE PTR [eax],al
9f005123:	00 00                	add    BYTE PTR [eax],al
9f005125:	41                   	inc    ecx
9f005126:	0e                   	push   cs
9f005127:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00512d:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f005131:	04 00                	add    al,0x0
9f005133:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005136:	00 00                	add    BYTE PTR [eax],al
9f005138:	60                   	pusha  
9f005139:	08 00                	or     BYTE PTR [eax],al
9f00513b:	00 22                	add    BYTE PTR [edx],ah
9f00513d:	c6                   	(bad)  
9f00513e:	ff                   	(bad)  
9f00513f:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f005143:	00 00                	add    BYTE PTR [eax],al
9f005145:	41                   	inc    ecx
9f005146:	0e                   	push   cs
9f005147:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00514d:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f005150:	0c 04                	or     al,0x4
9f005152:	04 00                	add    al,0x0
9f005154:	20 00                	and    BYTE PTR [eax],al
9f005156:	00 00                	add    BYTE PTR [eax],al
9f005158:	80 08 00             	or     BYTE PTR [eax],0x0
9f00515b:	00 4e c6             	add    BYTE PTR [esi-0x3a],cl
9f00515e:	ff                   	(bad)  
9f00515f:	ff f4                	push   esp
9f005161:	01 00                	add    DWORD PTR [eax],eax
9f005163:	00 00                	add    BYTE PTR [eax],al
9f005165:	41                   	inc    ecx
9f005166:	0e                   	push   cs
9f005167:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00516d:	44                   	inc    esp
9f00516e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005171:	ec                   	in     al,dx
9f005172:	01 c5                	add    ebp,eax
9f005174:	c3                   	ret    
9f005175:	0c 04                	or     al,0x4
9f005177:	04 1c                	add    al,0x1c
9f005179:	00 00                	add    BYTE PTR [eax],al
9f00517b:	00 a4 08 00 00 1e c8 	add    BYTE PTR [eax+ecx*1-0x37e20000],ah
9f005182:	ff                   	(bad)  
9f005183:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f005186:	00 00                	add    BYTE PTR [eax],al
9f005188:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00518b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005191:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f005194:	0c 04                	or     al,0x4
9f005196:	04 00                	add    al,0x0
9f005198:	1c 00                	sbb    al,0x0
9f00519a:	00 00                	add    BYTE PTR [eax],al
9f00519c:	c4 08                	les    ecx,FWORD PTR [eax]
9f00519e:	00 00                	add    BYTE PTR [eax],al
9f0051a0:	4d                   	dec    ebp
9f0051a1:	c8 ff ff 1c          	enter  0xffff,0x1c
9f0051a5:	00 00                	add    BYTE PTR [eax],al
9f0051a7:	00 00                	add    BYTE PTR [eax],al
9f0051a9:	41                   	inc    ecx
9f0051aa:	0e                   	push   cs
9f0051ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051b1:	58                   	pop    eax
9f0051b2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051b5:	04 00                	add    al,0x0
9f0051b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0051ba:	00 00                	add    BYTE PTR [eax],al
9f0051bc:	e4 08                	in     al,0x8
9f0051be:	00 00                	add    BYTE PTR [eax],al
9f0051c0:	49                   	dec    ecx
9f0051c1:	c8 ff ff 20          	enter  0xffff,0x20
9f0051c5:	00 00                	add    BYTE PTR [eax],al
9f0051c7:	00 00                	add    BYTE PTR [eax],al
9f0051c9:	41                   	inc    ecx
9f0051ca:	0e                   	push   cs
9f0051cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051d1:	5c                   	pop    esp
9f0051d2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051d5:	04 00                	add    al,0x0
9f0051d7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0051da:	00 00                	add    BYTE PTR [eax],al
9f0051dc:	04 09                	add    al,0x9
9f0051de:	00 00                	add    BYTE PTR [eax],al
9f0051e0:	49                   	dec    ecx
9f0051e1:	c8 ff ff 20          	enter  0xffff,0x20
9f0051e5:	00 00                	add    BYTE PTR [eax],al
9f0051e7:	00 00                	add    BYTE PTR [eax],al
9f0051e9:	41                   	inc    ecx
9f0051ea:	0e                   	push   cs
9f0051eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051f1:	5c                   	pop    esp
9f0051f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0051f5:	04 00                	add    al,0x0
9f0051f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0051fa:	00 00                	add    BYTE PTR [eax],al
9f0051fc:	24 09                	and    al,0x9
9f0051fe:	00 00                	add    BYTE PTR [eax],al
9f005200:	49                   	dec    ecx
9f005201:	c8 ff ff 44          	enter  0xffff,0x44
9f005205:	01 00                	add    DWORD PTR [eax],eax
9f005207:	00 00                	add    BYTE PTR [eax],al
9f005209:	41                   	inc    ecx
9f00520a:	0e                   	push   cs
9f00520b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005211:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f005214:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005217:	04 1c                	add    al,0x1c
9f005219:	00 00                	add    BYTE PTR [eax],al
9f00521b:	00 44 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],al
9f00521f:	00 6d c9             	add    BYTE PTR [ebp-0x37],ch
9f005222:	ff                   	(bad)  
9f005223:	ff 20                	jmp    DWORD PTR [eax]
9f005225:	00 00                	add    BYTE PTR [eax],al
9f005227:	00 00                	add    BYTE PTR [eax],al
9f005229:	41                   	inc    ecx
9f00522a:	0e                   	push   cs
9f00522b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005231:	5c                   	pop    esp
9f005232:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005235:	04 00                	add    al,0x0
9f005237:	00 28                	add    BYTE PTR [eax],ch
9f005239:	00 00                	add    BYTE PTR [eax],al
9f00523b:	00 64 09 00          	add    BYTE PTR [ecx+ecx*1+0x0],ah
9f00523f:	00 6d c9             	add    BYTE PTR [ebp-0x37],ch
9f005242:	ff                   	(bad)  
9f005243:	ff                   	(bad)  
9f005244:	fd                   	std    
9f005245:	02 00                	add    al,BYTE PTR [eax]
9f005247:	00 00                	add    BYTE PTR [eax],al
9f005249:	41                   	inc    ecx
9f00524a:	0e                   	push   cs
9f00524b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005251:	48                   	dec    eax
9f005252:	86 03                	xchg   BYTE PTR [ebx],al
9f005254:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f005258:	02 c3                	add    al,bl
9f00525a:	41                   	inc    ecx
9f00525b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00525f:	04 04                	add    al,0x4
9f005261:	00 00                	add    BYTE PTR [eax],al
9f005263:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005266:	00 00                	add    BYTE PTR [eax],al
9f005268:	90                   	nop
9f005269:	09 00                	or     DWORD PTR [eax],eax
9f00526b:	00 3e                	add    BYTE PTR [esi],bh
9f00526d:	cc                   	int3   
9f00526e:	ff                   	(bad)  
9f00526f:	ff 23                	jmp    DWORD PTR [ebx]
9f005271:	00 00                	add    BYTE PTR [eax],al
9f005273:	00 00                	add    BYTE PTR [eax],al
9f005275:	41                   	inc    ecx
9f005276:	0e                   	push   cs
9f005277:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00527d:	5f                   	pop    edi
9f00527e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005281:	04 00                	add    al,0x0
9f005283:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005286:	00 00                	add    BYTE PTR [eax],al
9f005288:	b0 09                	mov    al,0x9
9f00528a:	00 00                	add    BYTE PTR [eax],al
9f00528c:	41                   	inc    ecx
9f00528d:	cc                   	int3   
9f00528e:	ff                   	(bad)  
9f00528f:	ff 23                	jmp    DWORD PTR [ebx]
9f005291:	00 00                	add    BYTE PTR [eax],al
9f005293:	00 00                	add    BYTE PTR [eax],al
9f005295:	41                   	inc    ecx
9f005296:	0e                   	push   cs
9f005297:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00529d:	5f                   	pop    edi
9f00529e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0052a1:	04 00                	add    al,0x0
9f0052a3:	00 20                	add    BYTE PTR [eax],ah
9f0052a5:	00 00                	add    BYTE PTR [eax],al
9f0052a7:	00 d0                	add    al,dl
9f0052a9:	09 00                	or     DWORD PTR [eax],eax
9f0052ab:	00 44 cc ff          	add    BYTE PTR [esp+ecx*8-0x1],al
9f0052af:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f0052b2:	00 00                	add    BYTE PTR [eax],al
9f0052b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0052b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052bd:	44                   	inc    esp
9f0052be:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0052c1:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f0052c4:	0c 04                	or     al,0x4
9f0052c6:	04 00                	add    al,0x0
9f0052c8:	20 00                	and    BYTE PTR [eax],al
9f0052ca:	00 00                	add    BYTE PTR [eax],al
9f0052cc:	f4                   	hlt    
9f0052cd:	09 00                	or     DWORD PTR [eax],eax
9f0052cf:	00 94 cc ff ff 6c 00 	add    BYTE PTR [esp+ecx*8+0x6cffff],dl
9f0052d6:	00 00                	add    BYTE PTR [eax],al
9f0052d8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0052db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052e1:	44                   	inc    esp
9f0052e2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0052e5:	64                   	fs
9f0052e6:	c5 c3 0c             	(bad)  
9f0052e9:	04 04                	add    al,0x4
9f0052eb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0052ee:	00 00                	add    BYTE PTR [eax],al
9f0052f0:	18 0a                	sbb    BYTE PTR [edx],cl
9f0052f2:	00 00                	add    BYTE PTR [eax],al
9f0052f4:	dc cc                	fmul   st(4),st
9f0052f6:	ff                   	(bad)  
9f0052f7:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f0052fd:	41                   	inc    ecx
9f0052fe:	0e                   	push   cs
9f0052ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005305:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f00530b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00530e:	00 00                	add    BYTE PTR [eax],al
9f005310:	38 0a                	cmp    BYTE PTR [edx],cl
9f005312:	00 00                	add    BYTE PTR [eax],al
9f005314:	43                   	inc    ebx
9f005315:	cd ff                	int    0xff
9f005317:	ff 5b 00             	call   FWORD PTR [ebx+0x0]
9f00531a:	00 00                	add    BYTE PTR [eax],al
9f00531c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00531f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005325:	02 57 c5             	add    dl,BYTE PTR [edi-0x3b]
9f005328:	0c 04                	or     al,0x4
9f00532a:	04 00                	add    al,0x0
9f00532c:	1c 00                	sbb    al,0x0
9f00532e:	00 00                	add    BYTE PTR [eax],al
9f005330:	58                   	pop    eax
9f005331:	0a 00                	or     al,BYTE PTR [eax]
9f005333:	00 7e cd             	add    BYTE PTR [esi-0x33],bh
9f005336:	ff                   	(bad)  
9f005337:	ff                   	(bad)  
9f005338:	7a 00                	jp     9f00533a <__x86.get_pc_thunk.cx+0xa66>
9f00533a:	00 00                	add    BYTE PTR [eax],al
9f00533c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00533f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005345:	02 76 c5             	add    dh,BYTE PTR [esi-0x3b]
9f005348:	0c 04                	or     al,0x4
9f00534a:	04 00                	add    al,0x0
9f00534c:	20 00                	and    BYTE PTR [eax],al
9f00534e:	00 00                	add    BYTE PTR [eax],al
9f005350:	78 0a                	js     9f00535c <__x86.get_pc_thunk.cx+0xa88>
9f005352:	00 00                	add    BYTE PTR [eax],al
9f005354:	d8 cd                	fmul   st,st(5)
9f005356:	ff                   	(bad)  
9f005357:	ff 63 00             	jmp    DWORD PTR [ebx+0x0]
9f00535a:	00 00                	add    BYTE PTR [eax],al
9f00535c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00535f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005365:	44                   	inc    esp
9f005366:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005369:	5b                   	pop    ebx
9f00536a:	c5 c3 0c             	(bad)  
9f00536d:	04 04                	add    al,0x4
9f00536f:	00 20                	add    BYTE PTR [eax],ah
9f005371:	00 00                	add    BYTE PTR [eax],al
9f005373:	00 9c 0a 00 00 17 ce 	add    BYTE PTR [edx+ecx*1-0x31e90000],bl
9f00537a:	ff                   	(bad)  
9f00537b:	ff 82 02 00 00 00    	inc    DWORD PTR [edx+0x2]
9f005381:	41                   	inc    ecx
9f005382:	0e                   	push   cs
9f005383:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005389:	44                   	inc    esp
9f00538a:	83 03 03             	add    DWORD PTR [ebx],0x3
9f00538d:	7a 02                	jp     9f005391 <__x86.get_pc_thunk.cx+0xabd>
9f00538f:	c5 c3 0c             	(bad)  
9f005392:	04 04                	add    al,0x4
9f005394:	1c 00                	sbb    al,0x0
9f005396:	00 00                	add    BYTE PTR [eax],al
9f005398:	c0 0a 00             	ror    BYTE PTR [edx],0x0
9f00539b:	00 75 d0             	add    BYTE PTR [ebp-0x30],dh
9f00539e:	ff                   	(bad)  
9f00539f:	ff 20                	jmp    DWORD PTR [eax]
9f0053a1:	00 00                	add    BYTE PTR [eax],al
9f0053a3:	00 00                	add    BYTE PTR [eax],al
9f0053a5:	41                   	inc    ecx
9f0053a6:	0e                   	push   cs
9f0053a7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053ad:	5c                   	pop    esp
9f0053ae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0053b1:	04 00                	add    al,0x0
9f0053b3:	00 20                	add    BYTE PTR [eax],ah
9f0053b5:	00 00                	add    BYTE PTR [eax],al
9f0053b7:	00 e0                	add    al,ah
9f0053b9:	0a 00                	or     al,BYTE PTR [eax]
9f0053bb:	00 75 d0             	add    BYTE PTR [ebp-0x30],dh
9f0053be:	ff                   	(bad)  
9f0053bf:	ff d8                	call   <internal disassembler error>
9f0053c1:	00 00                	add    BYTE PTR [eax],al
9f0053c3:	00 00                	add    BYTE PTR [eax],al
9f0053c5:	41                   	inc    ecx
9f0053c6:	0e                   	push   cs
9f0053c7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053cd:	44                   	inc    esp
9f0053ce:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0053d1:	d0 c5                	rol    ch,1
9f0053d3:	c3                   	ret    
9f0053d4:	0c 04                	or     al,0x4
9f0053d6:	04 00                	add    al,0x0
9f0053d8:	1c 00                	sbb    al,0x0
9f0053da:	00 00                	add    BYTE PTR [eax],al
9f0053dc:	04 0b                	add    al,0xb
9f0053de:	00 00                	add    BYTE PTR [eax],al
9f0053e0:	29 d1                	sub    ecx,edx
9f0053e2:	ff                   	(bad)  
9f0053e3:	ff 23                	jmp    DWORD PTR [ebx]
9f0053e5:	00 00                	add    BYTE PTR [eax],al
9f0053e7:	00 00                	add    BYTE PTR [eax],al
9f0053e9:	41                   	inc    ecx
9f0053ea:	0e                   	push   cs
9f0053eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053f1:	5f                   	pop    edi
9f0053f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0053f5:	04 00                	add    al,0x0
9f0053f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0053fa:	00 00                	add    BYTE PTR [eax],al
9f0053fc:	24 0b                	and    al,0xb
9f0053fe:	00 00                	add    BYTE PTR [eax],al
9f005400:	2c d1                	sub    al,0xd1
9f005402:	ff                   	(bad)  
9f005403:	ff 1b                	call   FWORD PTR [ebx]
9f005405:	00 00                	add    BYTE PTR [eax],al
9f005407:	00 00                	add    BYTE PTR [eax],al
9f005409:	41                   	inc    ecx
9f00540a:	0e                   	push   cs
9f00540b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005411:	57                   	push   edi
9f005412:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005415:	04 00                	add    al,0x0
9f005417:	00 20                	add    BYTE PTR [eax],ah
9f005419:	00 00                	add    BYTE PTR [eax],al
9f00541b:	00 44 0b 00          	add    BYTE PTR [ebx+ecx*1+0x0],al
9f00541f:	00 27                	add    BYTE PTR [edi],ah
9f005421:	d1 ff                	sar    edi,1
9f005423:	ff 32                	push   DWORD PTR [edx]
9f005425:	00 00                	add    BYTE PTR [eax],al
9f005427:	00 00                	add    BYTE PTR [eax],al
9f005429:	41                   	inc    ecx
9f00542a:	0e                   	push   cs
9f00542b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005431:	44                   	inc    esp
9f005432:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f005435:	c5 c3 0c             	(bad)  
9f005438:	04 04                	add    al,0x4
9f00543a:	00 00                	add    BYTE PTR [eax],al
9f00543c:	1c 00                	sbb    al,0x0
9f00543e:	00 00                	add    BYTE PTR [eax],al
9f005440:	68 0b 00 00 38       	push   0x3800000b
9f005445:	d1 ff                	sar    edi,1
9f005447:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
9f00544d:	41                   	inc    ecx
9f00544e:	0e                   	push   cs
9f00544f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005455:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f00545b:	04 1c                	add    al,0x1c
9f00545d:	00 00                	add    BYTE PTR [eax],al
9f00545f:	00 88 0b 00 00 b3    	add    BYTE PTR [eax-0x4cfffff5],cl
9f005465:	d2 ff                	sar    bh,cl
9f005467:	ff 20                	jmp    DWORD PTR [eax]
9f005469:	00 00                	add    BYTE PTR [eax],al
9f00546b:	00 00                	add    BYTE PTR [eax],al
9f00546d:	41                   	inc    ecx
9f00546e:	0e                   	push   cs
9f00546f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005475:	5c                   	pop    esp
9f005476:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005479:	04 00                	add    al,0x0
9f00547b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00547e:	00 00                	add    BYTE PTR [eax],al
9f005480:	a8 0b                	test   al,0xb
9f005482:	00 00                	add    BYTE PTR [eax],al
9f005484:	b4 d2                	mov    ah,0xd2
9f005486:	ff                   	(bad)  
9f005487:	ff c7                	inc    edi
9f005489:	00 00                	add    BYTE PTR [eax],al
9f00548b:	00 00                	add    BYTE PTR [eax],al
9f00548d:	41                   	inc    ecx
9f00548e:	0e                   	push   cs
9f00548f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005495:	02 c3                	add    al,bl
9f005497:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00549a:	04 00                	add    al,0x0
9f00549c:	1c 00                	sbb    al,0x0
9f00549e:	00 00                	add    BYTE PTR [eax],al
9f0054a0:	c8 0b 00 00          	enter  0xb,0x0
9f0054a4:	5b                   	pop    ebx
9f0054a5:	d3 ff                	sar    edi,cl
9f0054a7:	ff 20                	jmp    DWORD PTR [eax]
9f0054a9:	00 00                	add    BYTE PTR [eax],al
9f0054ab:	00 00                	add    BYTE PTR [eax],al
9f0054ad:	41                   	inc    ecx
9f0054ae:	0e                   	push   cs
9f0054af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054b5:	5c                   	pop    esp
9f0054b6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054b9:	04 00                	add    al,0x0
9f0054bb:	00 20                	add    BYTE PTR [eax],ah
9f0054bd:	00 00                	add    BYTE PTR [eax],al
9f0054bf:	00 e8                	add    al,ch
9f0054c1:	0b 00                	or     eax,DWORD PTR [eax]
9f0054c3:	00 5c d3 ff          	add    BYTE PTR [ebx+edx*8-0x1],bl
9f0054c7:	ff 29                	jmp    FWORD PTR [ecx]
9f0054c9:	00 00                	add    BYTE PTR [eax],al
9f0054cb:	00 00                	add    BYTE PTR [eax],al
9f0054cd:	41                   	inc    ecx
9f0054ce:	0e                   	push   cs
9f0054cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054d5:	44                   	inc    esp
9f0054d6:	83 03 61             	add    DWORD PTR [ebx],0x61
9f0054d9:	c5 c3 0c             	(bad)  
9f0054dc:	04 04                	add    al,0x4
9f0054de:	00 00                	add    BYTE PTR [eax],al
9f0054e0:	20 00                	and    BYTE PTR [eax],al
9f0054e2:	00 00                	add    BYTE PTR [eax],al
9f0054e4:	0c 0c                	or     al,0xc
9f0054e6:	00 00                	add    BYTE PTR [eax],al
9f0054e8:	61                   	popa   
9f0054e9:	d3 ff                	sar    edi,cl
9f0054eb:	ff 2e                	jmp    FWORD PTR [esi]
9f0054ed:	00 00                	add    BYTE PTR [eax],al
9f0054ef:	00 00                	add    BYTE PTR [eax],al
9f0054f1:	41                   	inc    ecx
9f0054f2:	0e                   	push   cs
9f0054f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054f9:	44                   	inc    esp
9f0054fa:	83 03 66             	add    DWORD PTR [ebx],0x66
9f0054fd:	c5 c3 0c             	(bad)  
9f005500:	04 04                	add    al,0x4
9f005502:	00 00                	add    BYTE PTR [eax],al
9f005504:	20 00                	and    BYTE PTR [eax],al
9f005506:	00 00                	add    BYTE PTR [eax],al
9f005508:	30 0c 00             	xor    BYTE PTR [eax+eax*1],cl
9f00550b:	00 6c d3 ff          	add    BYTE PTR [ebx+edx*8-0x1],ch
9f00550f:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f005512:	00 00                	add    BYTE PTR [eax],al
9f005514:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005517:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00551d:	44                   	inc    esp
9f00551e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005521:	56                   	push   esi
9f005522:	c3                   	ret    
9f005523:	41                   	inc    ecx
9f005524:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005527:	04 28                	add    al,0x28
9f005529:	00 00                	add    BYTE PTR [eax],al
9f00552b:	00 54 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],dl
9f00552f:	00 a7 d3 ff ff 3e    	add    BYTE PTR [edi+0x3effffd3],ah
9f005535:	02 00                	add    al,BYTE PTR [eax]
9f005537:	00 00                	add    BYTE PTR [eax],al
9f005539:	41                   	inc    ecx
9f00553a:	0e                   	push   cs
9f00553b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005541:	45                   	inc    ebp
9f005542:	86 03                	xchg   BYTE PTR [ebx],al
9f005544:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f005548:	02 c3                	add    al,bl
9f00554a:	41                   	inc    ecx
9f00554b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00554f:	04 04                	add    al,0x4
9f005551:	00 00                	add    BYTE PTR [eax],al
9f005553:	00 20                	add    BYTE PTR [eax],ah
9f005555:	00 00                	add    BYTE PTR [eax],al
9f005557:	00 80 0c 00 00 b9    	add    BYTE PTR [eax-0x46fffff4],al
9f00555d:	d5 ff                	aad    0xff
9f00555f:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f005562:	00 00                	add    BYTE PTR [eax],al
9f005564:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005567:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00556d:	44                   	inc    esp
9f00556e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005571:	40                   	inc    eax
9f005572:	04 c5                	add    al,0xc5
9f005574:	c3                   	ret    
9f005575:	0c 04                	or     al,0x4
9f005577:	04 1c                	add    al,0x1c
9f005579:	00 00                	add    BYTE PTR [eax],al
9f00557b:	00 a4 0c 00 00 dd d9 	add    BYTE PTR [esp+ecx*1-0x26230000],ah
9f005582:	ff                   	(bad)  
9f005583:	ff 33                	push   DWORD PTR [ebx]
9f005585:	00 00                	add    BYTE PTR [eax],al
9f005587:	00 00                	add    BYTE PTR [eax],al
9f005589:	41                   	inc    ecx
9f00558a:	0e                   	push   cs
9f00558b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005591:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005592:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005595:	04 00                	add    al,0x0
9f005597:	00 20                	add    BYTE PTR [eax],ah
9f005599:	00 00                	add    BYTE PTR [eax],al
9f00559b:	00 c4                	add    ah,al
9f00559d:	0c 00                	or     al,0x0
9f00559f:	00 f0                	add    al,dh
9f0055a1:	d9 ff                	fcos   
9f0055a3:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f0055aa:	0e                   	push   cs
9f0055ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055b1:	44                   	inc    esp
9f0055b2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0055b5:	7c c5                	jl     9f00557c <__x86.get_pc_thunk.cx+0xca8>
9f0055b7:	c3                   	ret    
9f0055b8:	0c 04                	or     al,0x4
9f0055ba:	04 00                	add    al,0x0
9f0055bc:	20 00                	and    BYTE PTR [eax],al
9f0055be:	00 00                	add    BYTE PTR [eax],al
9f0055c0:	e8 0c 00 00 50       	call   ef0055d1 <tmbuf+0x4fffe3f1>
9f0055c5:	da ff                	(bad)  
9f0055c7:	ff                   	(bad)  
9f0055c8:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0055cb:	00 00                	add    BYTE PTR [eax],al
9f0055cd:	41                   	inc    ecx
9f0055ce:	0e                   	push   cs
9f0055cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055d5:	44                   	inc    esp
9f0055d6:	83 03 76             	add    DWORD PTR [ebx],0x76
9f0055d9:	c5 c3 0c             	(bad)  
9f0055dc:	04 04                	add    al,0x4
9f0055de:	00 00                	add    BYTE PTR [eax],al
9f0055e0:	20 00                	and    BYTE PTR [eax],al
9f0055e2:	00 00                	add    BYTE PTR [eax],al
9f0055e4:	0c 0d                	or     al,0xd
9f0055e6:	00 00                	add    BYTE PTR [eax],al
9f0055e8:	6a da                	push   0xffffffda
9f0055ea:	ff                   	(bad)  
9f0055eb:	ff                   	(bad)  
9f0055ec:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f0055ef:	00 00                	add    BYTE PTR [eax],al
9f0055f1:	41                   	inc    ecx
9f0055f2:	0e                   	push   cs
9f0055f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055f9:	44                   	inc    esp
9f0055fa:	83 03 76             	add    DWORD PTR [ebx],0x76
9f0055fd:	c5 c3 0c             	(bad)  
9f005600:	04 04                	add    al,0x4
9f005602:	00 00                	add    BYTE PTR [eax],al
9f005604:	20 00                	and    BYTE PTR [eax],al
9f005606:	00 00                	add    BYTE PTR [eax],al
9f005608:	30 0d 00 00 84 da    	xor    BYTE PTR ds:0xda840000,cl
9f00560e:	ff                   	(bad)  
9f00560f:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f005612:	00 00                	add    BYTE PTR [eax],al
9f005614:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005617:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00561d:	44                   	inc    esp
9f00561e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005621:	67 c5 c3 0c          	addr16 (bad) 
9f005625:	04 04                	add    al,0x4
9f005627:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00562a:	00 00                	add    BYTE PTR [eax],al
9f00562c:	54                   	push   esp
9f00562d:	0d 00 00 cf da       	or     eax,0xdacf0000
9f005632:	ff                   	(bad)  
9f005633:	ff 26                	jmp    DWORD PTR [esi]
9f005635:	00 00                	add    BYTE PTR [eax],al
9f005637:	00 00                	add    BYTE PTR [eax],al
9f005639:	41                   	inc    ecx
9f00563a:	0e                   	push   cs
9f00563b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005641:	62                   	(bad)  
9f005642:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005645:	04 00                	add    al,0x0
9f005647:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00564a:	00 00                	add    BYTE PTR [eax],al
9f00564c:	74 0d                	je     9f00565b <__x86.get_pc_thunk.cx+0xd87>
9f00564e:	00 00                	add    BYTE PTR [eax],al
9f005650:	d8 da                	fcomp  st(2)
9f005652:	ff                   	(bad)  
9f005653:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f005656:	00 00                	add    BYTE PTR [eax],al
9f005658:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00565b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005661:	45                   	inc    ebp
9f005662:	86 03                	xchg   BYTE PTR [ebx],al
9f005664:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f005668:	c3                   	ret    
9f005669:	41                   	inc    ecx
9f00566a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00566e:	04 04                	add    al,0x4
9f005670:	1c 00                	sbb    al,0x0
9f005672:	00 00                	add    BYTE PTR [eax],al
9f005674:	9c                   	pushf  
9f005675:	0d 00 00 0e db       	or     eax,0xdb0e0000
9f00567a:	ff                   	(bad)  
9f00567b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005681:	41                   	inc    ecx
9f005682:	0e                   	push   cs
9f005683:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005689:	59                   	pop    ecx
9f00568a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00568d:	04 00                	add    al,0x0
9f00568f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005692:	00 00                	add    BYTE PTR [eax],al
9f005694:	bc 0d 00 00 0c       	mov    esp,0xc00000d
9f005699:	db ff                	(bad)  
9f00569b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f00569e:	00 00                	add    BYTE PTR [eax],al
9f0056a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056a9:	7c c5                	jl     9f005670 <__x86.get_pc_thunk.cx+0xd9c>
9f0056ab:	0c 04                	or     al,0x4
9f0056ad:	04 00                	add    al,0x0
9f0056af:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0056b2:	00 00                	add    BYTE PTR [eax],al
9f0056b4:	dc 0d 00 00 2c db    	fmul   QWORD PTR ds:0xdb2c0000
9f0056ba:	ff                   	(bad)  
9f0056bb:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0056be:	00 00                	add    BYTE PTR [eax],al
9f0056c0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056c9:	7c c5                	jl     9f005690 <__x86.get_pc_thunk.cx+0xdbc>
9f0056cb:	0c 04                	or     al,0x4
9f0056cd:	04 00                	add    al,0x0
9f0056cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0056d2:	00 00                	add    BYTE PTR [eax],al
9f0056d4:	fc                   	cld    
9f0056d5:	0d 00 00 4c db       	or     eax,0xdb4c0000
9f0056da:	ff                   	(bad)  
9f0056db:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f0056de:	00 00                	add    BYTE PTR [eax],al
9f0056e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056e9:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f0056ec:	0c 04                	or     al,0x4
9f0056ee:	04 00                	add    al,0x0
9f0056f0:	1c 00                	sbb    al,0x0
9f0056f2:	00 00                	add    BYTE PTR [eax],al
9f0056f4:	1c 0e                	sbb    al,0xe
9f0056f6:	00 00                	add    BYTE PTR [eax],al
9f0056f8:	74 db                	je     9f0056d5 <__x86.get_pc_thunk.cx+0xe01>
9f0056fa:	ff                   	(bad)  
9f0056fb:	ff 30                	push   DWORD PTR [eax]
9f0056fd:	00 00                	add    BYTE PTR [eax],al
9f0056ff:	00 00                	add    BYTE PTR [eax],al
9f005701:	41                   	inc    ecx
9f005702:	0e                   	push   cs
9f005703:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005709:	6c                   	ins    BYTE PTR es:[edi],dx
9f00570a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00570d:	04 00                	add    al,0x0
9f00570f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005712:	00 00                	add    BYTE PTR [eax],al
9f005714:	3c 0e                	cmp    al,0xe
9f005716:	00 00                	add    BYTE PTR [eax],al
9f005718:	84 db                	test   bl,bl
9f00571a:	ff                   	(bad)  
9f00571b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00571e:	00 00                	add    BYTE PTR [eax],al
9f005720:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005723:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005729:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f00572c:	0c 04                	or     al,0x4
9f00572e:	04 00                	add    al,0x0
9f005730:	1c 00                	sbb    al,0x0
9f005732:	00 00                	add    BYTE PTR [eax],al
9f005734:	5c                   	pop    esp
9f005735:	0e                   	push   cs
9f005736:	00 00                	add    BYTE PTR [eax],al
9f005738:	c0 db ff             	rcr    bl,0xff
9f00573b:	ff 31                	push   DWORD PTR [ecx]
9f00573d:	00 00                	add    BYTE PTR [eax],al
9f00573f:	00 00                	add    BYTE PTR [eax],al
9f005741:	41                   	inc    ecx
9f005742:	0e                   	push   cs
9f005743:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005749:	6d                   	ins    DWORD PTR es:[edi],dx
9f00574a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00574d:	04 00                	add    al,0x0
9f00574f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005752:	00 00                	add    BYTE PTR [eax],al
9f005754:	7c 0e                	jl     9f005764 <__x86.get_pc_thunk.cx+0xe90>
9f005756:	00 00                	add    BYTE PTR [eax],al
9f005758:	d1 db                	rcr    ebx,1
9f00575a:	ff                   	(bad)  
9f00575b:	ff 1a                	call   FWORD PTR [edx]
9f00575d:	00 00                	add    BYTE PTR [eax],al
9f00575f:	00 00                	add    BYTE PTR [eax],al
9f005761:	41                   	inc    ecx
9f005762:	0e                   	push   cs
9f005763:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005769:	56                   	push   esi
9f00576a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00576d:	04 00                	add    al,0x0
9f00576f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005772:	00 00                	add    BYTE PTR [eax],al
9f005774:	9c                   	pushf  
9f005775:	0e                   	push   cs
9f005776:	00 00                	add    BYTE PTR [eax],al
9f005778:	cb                   	retf   
9f005779:	db ff                	(bad)  
9f00577b:	ff                   	(bad)  
9f00577c:	39 00                	cmp    DWORD PTR [eax],eax
9f00577e:	00 00                	add    BYTE PTR [eax],al
9f005780:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005783:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005789:	75 c5                	jne    9f005750 <__x86.get_pc_thunk.cx+0xe7c>
9f00578b:	0c 04                	or     al,0x4
9f00578d:	04 00                	add    al,0x0
9f00578f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005792:	00 00                	add    BYTE PTR [eax],al
9f005794:	bc 0e 00 00 e4       	mov    esp,0xe400000e
9f005799:	db ff                	(bad)  
9f00579b:	ff 1e                	call   FWORD PTR [esi]
9f00579d:	00 00                	add    BYTE PTR [eax],al
9f00579f:	00 00                	add    BYTE PTR [eax],al
9f0057a1:	41                   	inc    ecx
9f0057a2:	0e                   	push   cs
9f0057a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057a9:	5a                   	pop    edx
9f0057aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0057ad:	04 00                	add    al,0x0
9f0057af:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0057b2:	00 00                	add    BYTE PTR [eax],al
9f0057b4:	dc 0e                	fmul   QWORD PTR [esi]
9f0057b6:	00 00                	add    BYTE PTR [eax],al
9f0057b8:	e4 db                	in     al,0xdb
9f0057ba:	ff                   	(bad)  
9f0057bb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f0057be:	00 00                	add    BYTE PTR [eax],al
9f0057c0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0057c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057c9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0057cc:	0c 04                	or     al,0x4
9f0057ce:	04 00                	add    al,0x0
9f0057d0:	1c 00                	sbb    al,0x0
9f0057d2:	00 00                	add    BYTE PTR [eax],al
9f0057d4:	fc                   	cld    
9f0057d5:	0e                   	push   cs
9f0057d6:	00 00                	add    BYTE PTR [eax],al
9f0057d8:	2b dc                	sub    ebx,esp
9f0057da:	ff                   	(bad)  
9f0057db:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f0057de:	00 00                	add    BYTE PTR [eax],al
9f0057e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0057e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057e9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f0057ec:	0c 04                	or     al,0x4
9f0057ee:	04 00                	add    al,0x0
9f0057f0:	1c 00                	sbb    al,0x0
9f0057f2:	00 00                	add    BYTE PTR [eax],al
9f0057f4:	1c 0f                	sbb    al,0xf
9f0057f6:	00 00                	add    BYTE PTR [eax],al
9f0057f8:	74 dc                	je     9f0057d6 <__x86.get_pc_thunk.cx+0xf02>
9f0057fa:	ff                   	(bad)  
9f0057fb:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f0057ff:	00 00                	add    BYTE PTR [eax],al
9f005801:	41                   	inc    ecx
9f005802:	0e                   	push   cs
9f005803:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005809:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f00580c:	0c 04                	or     al,0x4
9f00580e:	04 00                	add    al,0x0
9f005810:	1c 00                	sbb    al,0x0
9f005812:	00 00                	add    BYTE PTR [eax],al
9f005814:	3c 0f                	cmp    al,0xf
9f005816:	00 00                	add    BYTE PTR [eax],al
9f005818:	c0 dc ff             	rcr    ah,0xff
9f00581b:	ff 20                	jmp    DWORD PTR [eax]
9f00581d:	00 00                	add    BYTE PTR [eax],al
9f00581f:	00 00                	add    BYTE PTR [eax],al
9f005821:	41                   	inc    ecx
9f005822:	0e                   	push   cs
9f005823:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005829:	5c                   	pop    esp
9f00582a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00582d:	04 00                	add    al,0x0
9f00582f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005832:	00 00                	add    BYTE PTR [eax],al
9f005834:	5c                   	pop    esp
9f005835:	0f 00 00             	sldt   WORD PTR [eax]
9f005838:	c0 dc ff             	rcr    ah,0xff
9f00583b:	ff                   	(bad)  
9f00583c:	7d 01                	jge    9f00583f <__x86.get_pc_thunk.cx+0xf6b>
9f00583e:	00 00                	add    BYTE PTR [eax],al
9f005840:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005843:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005849:	46                   	inc    esi
9f00584a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00584c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00584f:	05 03 70 01 c3       	add    eax,0xc3017003
9f005854:	41                   	inc    ecx
9f005855:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f005859:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00585c:	04 00                	add    al,0x0
9f00585e:	00 00                	add    BYTE PTR [eax],al
9f005860:	1c 00                	sbb    al,0x0
9f005862:	00 00                	add    BYTE PTR [eax],al
9f005864:	8c 0f                	mov    WORD PTR [edi],cs
9f005866:	00 00                	add    BYTE PTR [eax],al
9f005868:	10 de                	adc    dh,bl
9f00586a:	ff                   	(bad)  
9f00586b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005871:	41                   	inc    ecx
9f005872:	0e                   	push   cs
9f005873:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005879:	59                   	pop    ecx
9f00587a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00587d:	04 00                	add    al,0x0
9f00587f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005882:	00 00                	add    BYTE PTR [eax],al
9f005884:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005885:	0f 00 00             	sldt   WORD PTR [eax]
9f005888:	10 de                	adc    dh,bl
9f00588a:	ff                   	(bad)  
9f00588b:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f005892:	0e                   	push   cs
9f005893:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005899:	46                   	inc    esi
9f00589a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00589c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00589f:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f0058a4:	41                   	inc    ecx
9f0058a5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0058a9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0058ac:	04 00                	add    al,0x0
9f0058ae:	00 00                	add    BYTE PTR [eax],al
9f0058b0:	20 00                	and    BYTE PTR [eax],al
9f0058b2:	00 00                	add    BYTE PTR [eax],al
9f0058b4:	dc 0f                	fmul   QWORD PTR [edi]
9f0058b6:	00 00                	add    BYTE PTR [eax],al
9f0058b8:	7c df                	jl     9f005899 <__x86.get_pc_thunk.cx+0xfc5>
9f0058ba:	ff                   	(bad)  
9f0058bb:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f0058c1:	41                   	inc    ecx
9f0058c2:	0e                   	push   cs
9f0058c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058c9:	44                   	inc    esp
9f0058ca:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0058cd:	8e c5                	mov    es,ebp
9f0058cf:	c3                   	ret    
9f0058d0:	0c 04                	or     al,0x4
9f0058d2:	04 00                	add    al,0x0
9f0058d4:	1c 00                	sbb    al,0x0
9f0058d6:	00 00                	add    BYTE PTR [eax],al
9f0058d8:	00 10                	add    BYTE PTR [eax],dl
9f0058da:	00 00                	add    BYTE PTR [eax],al
9f0058dc:	ee                   	out    dx,al
9f0058dd:	df ff                	(bad)  
9f0058df:	ff 20                	jmp    DWORD PTR [eax]
9f0058e1:	00 00                	add    BYTE PTR [eax],al
9f0058e3:	00 00                	add    BYTE PTR [eax],al
9f0058e5:	41                   	inc    ecx
9f0058e6:	0e                   	push   cs
9f0058e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058ed:	5c                   	pop    esp
9f0058ee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0058f1:	04 00                	add    al,0x0
9f0058f3:	00 28                	add    BYTE PTR [eax],ch
9f0058f5:	00 00                	add    BYTE PTR [eax],al
9f0058f7:	00 20                	add    BYTE PTR [eax],ah
9f0058f9:	10 00                	adc    BYTE PTR [eax],al
9f0058fb:	00 f0                	add    al,dh
9f0058fd:	df ff                	(bad)  
9f0058ff:	ff 43 01             	inc    DWORD PTR [ebx+0x1]
9f005902:	00 00                	add    BYTE PTR [eax],al
9f005904:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005907:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00590d:	45                   	inc    ebp
9f00590e:	86 03                	xchg   BYTE PTR [ebx],al
9f005910:	83 04 03 38          	add    DWORD PTR [ebx+eax*1],0x38
9f005914:	01 c3                	add    ebx,eax
9f005916:	41                   	inc    ecx
9f005917:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00591b:	04 04                	add    al,0x4
9f00591d:	00 00                	add    BYTE PTR [eax],al
9f00591f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005922:	00 00                	add    BYTE PTR [eax],al
9f005924:	4c                   	dec    esp
9f005925:	10 00                	adc    BYTE PTR [eax],al
9f005927:	00 07                	add    BYTE PTR [edi],al
9f005929:	e1 ff                	loope  9f00592a <__x86.get_pc_thunk.cx+0x1056>
9f00592b:	ff 26                	jmp    DWORD PTR [esi]
9f00592d:	00 00                	add    BYTE PTR [eax],al
9f00592f:	00 00                	add    BYTE PTR [eax],al
9f005931:	41                   	inc    ecx
9f005932:	0e                   	push   cs
9f005933:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005939:	62                   	(bad)  
9f00593a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00593d:	04 00                	add    al,0x0
9f00593f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005942:	00 00                	add    BYTE PTR [eax],al
9f005944:	6c                   	ins    BYTE PTR es:[edi],dx
9f005945:	10 00                	adc    BYTE PTR [eax],al
9f005947:	00 10                	add    BYTE PTR [eax],dl
9f005949:	e1 ff                	loope  9f00594a <__x86.get_pc_thunk.cx+0x1076>
9f00594b:	ff 9e 00 00 00 00    	call   FWORD PTR [esi+0x0]
9f005951:	41                   	inc    ecx
9f005952:	0e                   	push   cs
9f005953:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005959:	45                   	inc    ebp
9f00595a:	86 03                	xchg   BYTE PTR [ebx],al
9f00595c:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f005960:	c3                   	ret    
9f005961:	41                   	inc    ecx
9f005962:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005966:	04 04                	add    al,0x4
9f005968:	24 00                	and    al,0x0
9f00596a:	00 00                	add    BYTE PTR [eax],al
9f00596c:	94                   	xchg   esp,eax
9f00596d:	10 00                	adc    BYTE PTR [eax],al
9f00596f:	00 86 e1 ff ff 6e    	add    BYTE PTR [esi+0x6effffe1],al
9f005975:	00 00                	add    BYTE PTR [eax],al
9f005977:	00 00                	add    BYTE PTR [eax],al
9f005979:	41                   	inc    ecx
9f00597a:	0e                   	push   cs
9f00597b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005981:	42                   	inc    edx
9f005982:	86 03                	xchg   BYTE PTR [ebx],al
9f005984:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f005988:	c3                   	ret    
9f005989:	41                   	inc    ecx
9f00598a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00598e:	04 04                	add    al,0x4
9f005990:	1c 00                	sbb    al,0x0
9f005992:	00 00                	add    BYTE PTR [eax],al
9f005994:	bc 10 00 00 cc       	mov    esp,0xcc000010
9f005999:	e1 ff                	loope  9f00599a <__x86.get_pc_thunk.cx+0x10c6>
9f00599b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0059a1:	41                   	inc    ecx
9f0059a2:	0e                   	push   cs
9f0059a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059a9:	59                   	pop    ecx
9f0059aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059ad:	04 00                	add    al,0x0
9f0059af:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0059b2:	00 00                	add    BYTE PTR [eax],al
9f0059b4:	dc 10                	fcom   QWORD PTR [eax]
9f0059b6:	00 00                	add    BYTE PTR [eax],al
9f0059b8:	cc                   	int3   
9f0059b9:	e1 ff                	loope  9f0059ba <__x86.get_pc_thunk.cx+0x10e6>
9f0059bb:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f0059bf:	00 00                	add    BYTE PTR [eax],al
9f0059c1:	41                   	inc    ecx
9f0059c2:	0e                   	push   cs
9f0059c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059c9:	45                   	inc    ebp
9f0059ca:	86 03                	xchg   BYTE PTR [ebx],al
9f0059cc:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f0059d0:	41                   	inc    ecx
9f0059d1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0059d5:	04 04                	add    al,0x4
9f0059d7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0059da:	00 00                	add    BYTE PTR [eax],al
9f0059dc:	04 11                	add    al,0x11
9f0059de:	00 00                	add    BYTE PTR [eax],al
9f0059e0:	e8 e1 ff ff 19       	call   b90059c6 <tmbuf+0x19ffe7e6>
9f0059e5:	03 00                	add    eax,DWORD PTR [eax]
9f0059e7:	00 00                	add    BYTE PTR [eax],al
9f0059e9:	41                   	inc    ecx
9f0059ea:	0e                   	push   cs
9f0059eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059f1:	44                   	inc    esp
9f0059f2:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0059f5:	10 03                	adc    BYTE PTR [ebx],al
9f0059f7:	c3                   	ret    
9f0059f8:	41                   	inc    ecx
9f0059f9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059fc:	04 00                	add    al,0x0
9f0059fe:	00 00                	add    BYTE PTR [eax],al
9f005a00:	1c 00                	sbb    al,0x0
9f005a02:	00 00                	add    BYTE PTR [eax],al
9f005a04:	2c 11                	sub    al,0x11
9f005a06:	00 00                	add    BYTE PTR [eax],al
9f005a08:	d9 e4                	ftst   
9f005a0a:	ff                   	(bad)  
9f005a0b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005a11:	41                   	inc    ecx
9f005a12:	0e                   	push   cs
9f005a13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a19:	59                   	pop    ecx
9f005a1a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a1d:	04 00                	add    al,0x0
9f005a1f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a22:	00 00                	add    BYTE PTR [eax],al
9f005a24:	4c                   	dec    esp
9f005a25:	11 00                	adc    DWORD PTR [eax],eax
9f005a27:	00 d6                	add    dh,dl
9f005a29:	e4 ff                	in     al,0xff
9f005a2b:	ff                   	(bad)  
9f005a2c:	3d 00 00 00 00       	cmp    eax,0x0
9f005a31:	41                   	inc    ecx
9f005a32:	0e                   	push   cs
9f005a33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a39:	79 c5                	jns    9f005a00 <__x86.get_pc_thunk.cx+0x112c>
9f005a3b:	0c 04                	or     al,0x4
9f005a3d:	04 00                	add    al,0x0
9f005a3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a42:	00 00                	add    BYTE PTR [eax],al
9f005a44:	6c                   	ins    BYTE PTR es:[edi],dx
9f005a45:	11 00                	adc    DWORD PTR [eax],eax
9f005a47:	00 f3                	add    bl,dh
9f005a49:	e4 ff                	in     al,0xff
9f005a4b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f005a51:	41                   	inc    ecx
9f005a52:	0e                   	push   cs
9f005a53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a59:	71 c5                	jno    9f005a20 <__x86.get_pc_thunk.cx+0x114c>
9f005a5b:	0c 04                	or     al,0x4
9f005a5d:	04 00                	add    al,0x0
9f005a5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a62:	00 00                	add    BYTE PTR [eax],al
9f005a64:	8c 11                	mov    WORD PTR [ecx],ss
9f005a66:	00 00                	add    BYTE PTR [eax],al
9f005a68:	08 e5                	or     ch,ah
9f005a6a:	ff                   	(bad)  
9f005a6b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005a71:	41                   	inc    ecx
9f005a72:	0e                   	push   cs
9f005a73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a79:	59                   	pop    ecx
9f005a7a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a7d:	04 00                	add    al,0x0
9f005a7f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f005a82:	00 00                	add    BYTE PTR [eax],al
9f005a84:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005a85:	11 00                	adc    DWORD PTR [eax],eax
9f005a87:	00 05 e5 ff ff 57    	add    BYTE PTR ds:0x57ffffe5,al
9f005a8d:	08 00                	or     BYTE PTR [eax],al
9f005a8f:	00 00                	add    BYTE PTR [eax],al
9f005a91:	41                   	inc    ecx
9f005a92:	0e                   	push   cs
9f005a93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a99:	46                   	inc    esi
9f005a9a:	87 03                	xchg   DWORD PTR [ebx],eax
9f005a9c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f005a9f:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f005aa4:	41                   	inc    ecx
9f005aa5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f005aa9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005aac:	04 00                	add    al,0x0
9f005aae:	00 00                	add    BYTE PTR [eax],al
9f005ab0:	24 00                	and    al,0x0
9f005ab2:	00 00                	add    BYTE PTR [eax],al
9f005ab4:	dc 11                	fcom   QWORD PTR [ecx]
9f005ab6:	00 00                	add    BYTE PTR [eax],al
9f005ab8:	2c ed                	sub    al,0xed
9f005aba:	ff                   	(bad)  
9f005abb:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
9f005abe:	00 00                	add    BYTE PTR [eax],al
9f005ac0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005ac3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ac9:	45                   	inc    ebp
9f005aca:	86 03                	xchg   BYTE PTR [ebx],al
9f005acc:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f005ad0:	c3                   	ret    
9f005ad1:	41                   	inc    ecx
9f005ad2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005ad6:	04 04                	add    al,0x4
9f005ad8:	20 00                	and    BYTE PTR [eax],al
9f005ada:	00 00                	add    BYTE PTR [eax],al
9f005adc:	04 12                	add    al,0x12
9f005ade:	00 00                	add    BYTE PTR [eax],al
9f005ae0:	71 ed                	jno    9f005acf <__x86.get_pc_thunk.cx+0x11fb>
9f005ae2:	ff                   	(bad)  
9f005ae3:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f005ae6:	00 00                	add    BYTE PTR [eax],al
9f005ae8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005aeb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005af1:	44                   	inc    esp
9f005af2:	83 03 79             	add    DWORD PTR [ebx],0x79
9f005af5:	c5 c3 0c             	(bad)  
9f005af8:	04 04                	add    al,0x4
9f005afa:	00 00                	add    BYTE PTR [eax],al
9f005afc:	10 00                	adc    BYTE PTR [eax],al
9f005afe:	00 00                	add    BYTE PTR [eax],al
9f005b00:	28 12                	sub    BYTE PTR [edx],dl
9f005b02:	00 00                	add    BYTE PTR [eax],al
9f005b04:	d0 ed                	shr    ch,1
9f005b06:	ff                   	(bad)  
9f005b07:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f005b0a:	00 00                	add    BYTE PTR [eax],al
9f005b0c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f005b10 <.dynsym>:
	...
9f005b20:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005b21:	01 00                	add    DWORD PTR [eax],eax
9f005b23:	00 a4 31 00 9f 40 00 	add    BYTE PTR [ecx+esi*1+0x409f00],ah
9f005b2a:	00 00                	add    BYTE PTR [eax],al
9f005b2c:	12 00                	adc    al,BYTE PTR [eax]
9f005b2e:	01 00                	add    DWORD PTR [eax],eax
9f005b30:	1d 01 00 00 ed       	sbb    eax,0xed000001
9f005b35:	19 00                	sbb    DWORD PTR [eax],eax
9f005b37:	9f                   	lahf   
9f005b38:	1c 00                	sbb    al,0x0
9f005b3a:	00 00                	add    BYTE PTR [eax],al
9f005b3c:	12 00                	adc    al,BYTE PTR [eax]
9f005b3e:	01 00                	add    DWORD PTR [eax],eax
9f005b40:	dc 00                	fadd   QWORD PTR [eax]
9f005b42:	00 00                	add    BYTE PTR [eax],al
9f005b44:	6c                   	ins    BYTE PTR es:[edi],dx
9f005b45:	14 00                	adc    al,0x0
9f005b47:	9f                   	lahf   
9f005b48:	59                   	pop    ecx
9f005b49:	00 00                	add    BYTE PTR [eax],al
9f005b4b:	00 12                	add    BYTE PTR [edx],dl
9f005b4d:	00 01                	add    BYTE PTR [ecx],al
9f005b4f:	00 7e 01             	add    BYTE PTR [esi+0x1],bh
9f005b52:	00 00                	add    BYTE PTR [eax],al
9f005b54:	c5 14 00             	lds    edx,FWORD PTR [eax+eax*1]
9f005b57:	9f                   	lahf   
9f005b58:	54                   	push   esp
9f005b59:	00 00                	add    BYTE PTR [eax],al
9f005b5b:	00 12                	add    BYTE PTR [edx],dl
9f005b5d:	00 01                	add    BYTE PTR [ecx],al
9f005b5f:	00 3d 00 00 00 ac    	add    BYTE PTR ds:0xac000000,bh
9f005b65:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f005b6a:	00 00                	add    BYTE PTR [eax],al
9f005b6c:	12 00                	adc    al,BYTE PTR [eax]
9f005b6e:	01 00                	add    DWORD PTR [eax],eax
9f005b70:	b3 01                	mov    bl,0x1
9f005b72:	00 00                	add    BYTE PTR [eax],al
9f005b74:	9c                   	pushf  
9f005b75:	32 00                	xor    al,BYTE PTR [eax]
9f005b77:	9f                   	lahf   
9f005b78:	59                   	pop    ecx
9f005b79:	00 00                	add    BYTE PTR [eax],al
9f005b7b:	00 12                	add    BYTE PTR [edx],dl
9f005b7d:	00 01                	add    BYTE PTR [ecx],al
9f005b7f:	00 85 01 00 00 90    	add    BYTE PTR [ebp-0x6fffffff],al
9f005b85:	2f                   	das    
9f005b86:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f005b8c:	12 00                	adc    al,BYTE PTR [eax]
9f005b8e:	01 00                	add    DWORD PTR [eax],eax
9f005b90:	53                   	push   ebx
9f005b91:	00 00                	add    BYTE PTR [eax],al
9f005b93:	00 b2 06 00 9f 23    	add    BYTE PTR [edx+0x239f0006],dh
9f005b99:	00 00                	add    BYTE PTR [eax],al
9f005b9b:	00 12                	add    BYTE PTR [edx],dl
9f005b9d:	00 01                	add    BYTE PTR [ecx],al
9f005b9f:	00 78 01             	add    BYTE PTR [eax+0x1],bh
9f005ba2:	00 00                	add    BYTE PTR [eax],al
9f005ba4:	49                   	dec    ecx
9f005ba5:	28 00                	sub    BYTE PTR [eax],al
9f005ba7:	9f                   	lahf   
9f005ba8:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f005bab:	00 12                	add    BYTE PTR [edx],dl
9f005bad:	00 01                	add    BYTE PTR [ecx],al
9f005baf:	00 cd                	add    ch,cl
9f005bb1:	00 00                	add    BYTE PTR [eax],al
9f005bb3:	00 88 11 00 9f bd    	add    BYTE PTR [eax-0x4260ffef],cl
9f005bb9:	00 00                	add    BYTE PTR [eax],al
9f005bbb:	00 12                	add    BYTE PTR [edx],dl
9f005bbd:	00 01                	add    BYTE PTR [ecx],al
9f005bbf:	00 92 00 00 00 b5    	add    BYTE PTR [edx-0x4b000000],dl
9f005bc5:	0b 00                	or     eax,DWORD PTR [eax]
9f005bc7:	9f                   	lahf   
9f005bc8:	f5                   	cmc    
9f005bc9:	02 00                	add    al,BYTE PTR [eax]
9f005bcb:	00 12                	add    BYTE PTR [edx],dl
9f005bcd:	00 01                	add    BYTE PTR [ecx],al
9f005bcf:	00 6c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],ch
9f005bd3:	00 17                	add    BYTE PTR [edi],dl
9f005bd5:	27                   	daa    
9f005bd6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005bdc:	12 00                	adc    al,BYTE PTR [eax]
9f005bde:	01 00                	add    DWORD PTR [eax],eax
9f005be0:	31 01                	xor    DWORD PTR [ecx],eax
9f005be2:	00 00                	add    BYTE PTR [eax],al
9f005be4:	8d 1b                	lea    ebx,[ebx]
9f005be6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005bec:	12 00                	adc    al,BYTE PTR [eax]
9f005bee:	01 00                	add    DWORD PTR [eax],eax
9f005bf0:	ab                   	stos   DWORD PTR es:[edi],eax
9f005bf1:	00 00                	add    BYTE PTR [eax],al
9f005bf3:	00 dc                	add    ah,bl
9f005bf5:	10 00                	adc    BYTE PTR [eax],al
9f005bf7:	9f                   	lahf   
9f005bf8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005bfb:	00 12                	add    BYTE PTR [edx],dl
9f005bfd:	00 01                	add    BYTE PTR [ecx],al
9f005bff:	00 58 01             	add    BYTE PTR [eax+0x1],bl
9f005c02:	00 00                	add    BYTE PTR [eax],al
9f005c04:	11 24 00             	adc    DWORD PTR [eax+eax*1],esp
9f005c07:	9f                   	lahf   
9f005c08:	20 00                	and    BYTE PTR [eax],al
9f005c0a:	00 00                	add    BYTE PTR [eax],al
9f005c0c:	12 00                	adc    al,BYTE PTR [eax]
9f005c0e:	01 00                	add    DWORD PTR [eax],eax
9f005c10:	e9 00 00 00 0f       	jmp    ae005c15 <tmbuf+0xeffea35>
9f005c15:	16                   	push   ss
9f005c16:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f005c1c:	12 00                	adc    al,BYTE PTR [eax]
9f005c1e:	01 00                	add    DWORD PTR [eax],eax
9f005c20:	37                   	aaa    
9f005c21:	01 00                	add    DWORD PTR [eax],eax
9f005c23:	00 aa 1e 00 9f 23    	add    BYTE PTR [edx+0x239f001e],ch
9f005c29:	00 00                	add    BYTE PTR [eax],al
9f005c2b:	00 12                	add    BYTE PTR [edx],dl
9f005c2d:	00 01                	add    BYTE PTR [ecx],al
9f005c2f:	00 db                	add    bl,bl
9f005c31:	01 00                	add    DWORD PTR [eax],eax
9f005c33:	00 f8                	add    al,bh
9f005c35:	34 00                	xor    al,0x0
9f005c37:	9f                   	lahf   
9f005c38:	7d 01                	jge    9f005c3b <__x86.get_pc_thunk.cx+0x1367>
9f005c3a:	00 00                	add    BYTE PTR [eax],al
9f005c3c:	12 00                	adc    al,BYTE PTR [eax]
9f005c3e:	01 00                	add    DWORD PTR [eax],eax
9f005c40:	17                   	pop    ss
9f005c41:	00 00                	add    BYTE PTR [eax],al
9f005c43:	00 c3                	add    bl,al
9f005c45:	02 00                	add    al,BYTE PTR [eax]
9f005c47:	9f                   	lahf   
9f005c48:	bb 00 00 00 12       	mov    ebx,0x12000000
9f005c4d:	00 01                	add    BYTE PTR [ecx],al
9f005c4f:	00 4c 01 00          	add    BYTE PTR [ecx+eax*1+0x0],cl
9f005c53:	00 f0                	add    al,dh
9f005c55:	1e                   	push   ds
9f005c56:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
9f005c5c:	12 00                	adc    al,BYTE PTR [eax]
9f005c5e:	01 00                	add    DWORD PTR [eax],eax
9f005c60:	15 02 00 00 e1       	adc    eax,0xe1000002
9f005c65:	3e 00 9f 1d 00 00 00 	add    BYTE PTR ds:[edi+0x1d],bl
9f005c6c:	12 00                	adc    al,BYTE PTR [eax]
9f005c6e:	01 00                	add    DWORD PTR [eax],eax
9f005c70:	eb 01                	jmp    9f005c73 <__x86.get_pc_thunk.cx+0x139f>
9f005c72:	00 00                	add    BYTE PTR [eax],al
9f005c74:	98                   	cwde   
9f005c75:	36 00 9f 9c 01 00 00 	add    BYTE PTR ss:[edi+0x19c],bl
9f005c7c:	12 00                	adc    al,BYTE PTR [eax]
9f005c7e:	01 00                	add    DWORD PTR [eax],eax
9f005c80:	d2 00                	rol    BYTE PTR [eax],cl
9f005c82:	00 00                	add    BYTE PTR [eax],al
9f005c84:	7e 13                	jle    9f005c99 <__x86.get_pc_thunk.cx+0x13c5>
9f005c86:	00 9f cb 00 00 00    	add    BYTE PTR [edi+0xcb],bl
9f005c8c:	12 00                	adc    al,BYTE PTR [eax]
9f005c8e:	01 00                	add    DWORD PTR [eax],eax
9f005c90:	73 01                	jae    9f005c93 <__x86.get_pc_thunk.cx+0x13bf>
9f005c92:	00 00                	add    BYTE PTR [eax],al
9f005c94:	20 28                	and    BYTE PTR [eax],ch
9f005c96:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f005c9c:	12 00                	adc    al,BYTE PTR [eax]
9f005c9e:	01 00                	add    DWORD PTR [eax],eax
9f005ca0:	c3                   	ret    
9f005ca1:	01 00                	add    DWORD PTR [eax],eax
9f005ca3:	00 7c 33 00          	add    BYTE PTR [ebx+esi*1+0x0],bh
9f005ca7:	9f                   	lahf   
9f005ca8:	1e                   	push   ds
9f005ca9:	00 00                	add    BYTE PTR [eax],al
9f005cab:	00 12                	add    BYTE PTR [edx],dl
9f005cad:	00 01                	add    BYTE PTR [ecx],al
9f005caf:	00 11                	add    BYTE PTR [ecx],dl
9f005cb1:	01 00                	add    DWORD PTR [eax],eax
9f005cb3:	00 aa 17 00 9f f4    	add    BYTE PTR [edx-0xb60ffe9],ch
9f005cb9:	01 00                	add    DWORD PTR [eax],eax
9f005cbb:	00 12                	add    BYTE PTR [edx],dl
9f005cbd:	00 01                	add    BYTE PTR [ecx],al
9f005cbf:	00 82 00 00 00 eb    	add    BYTE PTR [edx-0x15000000],al
9f005cc5:	0a 00                	or     al,BYTE PTR [eax]
9f005cc7:	9f                   	lahf   
9f005cc8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005ccb:	00 12                	add    BYTE PTR [edx],dl
9f005ccd:	00 01                	add    BYTE PTR [ecx],al
9f005ccf:	00 ef                	add    bh,ch
9f005cd1:	00 00                	add    BYTE PTR [eax],al
9f005cd3:	00 7f 16             	add    BYTE PTR [edi+0x16],bh
9f005cd6:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f005cdc:	12 00                	adc    al,BYTE PTR [eax]
9f005cde:	01 00                	add    DWORD PTR [eax],eax
9f005ce0:	8e 01                	mov    es,WORD PTR [ecx]
9f005ce2:	00 00                	add    BYTE PTR [eax],al
9f005ce4:	14 30                	adc    al,0x30
9f005ce6:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f005cec:	12 00                	adc    al,BYTE PTR [eax]
9f005cee:	01 00                	add    DWORD PTR [eax],eax
9f005cf0:	0c 02                	or     al,0x2
9f005cf2:	00 00                	add    BYTE PTR [eax],al
9f005cf4:	84 3b                	test   BYTE PTR [ebx],bh
9f005cf6:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
9f005cfc:	12 00                	adc    al,BYTE PTR [eax]
9f005cfe:	01 00                	add    DWORD PTR [eax],eax
9f005d00:	9e                   	sahf   
9f005d01:	00 00                	add    BYTE PTR [eax],al
9f005d03:	00 d3                	add    bl,dl
9f005d05:	0e                   	push   cs
9f005d06:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005d0c:	12 00                	adc    al,BYTE PTR [eax]
9f005d0e:	01 00                	add    DWORD PTR [eax],eax
9f005d10:	0c 01                	or     al,0x1
9f005d12:	00 00                	add    BYTE PTR [eax],al
9f005d14:	5e                   	pop    esi
9f005d15:	17                   	pop    ss
9f005d16:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
9f005d1c:	12 00                	adc    al,BYTE PTR [eax]
9f005d1e:	01 00                	add    DWORD PTR [eax],eax
9f005d20:	68 00 00 00 e8       	push   0xe8000000
9f005d25:	08 00                	or     BYTE PTR [eax],al
9f005d27:	9f                   	lahf   
9f005d28:	31 00                	xor    DWORD PTR [eax],eax
9f005d2a:	00 00                	add    BYTE PTR [eax],al
9f005d2c:	12 00                	adc    al,BYTE PTR [eax]
9f005d2e:	01 00                	add    DWORD PTR [eax],eax
9f005d30:	34 02                	xor    al,0x2
9f005d32:	00 00                	add    BYTE PTR [eax],al
9f005d34:	8d 3f                	lea    edi,[edi]
9f005d36:	00 9f 57 08 00 00    	add    BYTE PTR [edi+0x857],bl
9f005d3c:	12 00                	adc    al,BYTE PTR [eax]
9f005d3e:	01 00                	add    DWORD PTR [eax],eax
9f005d40:	05 02 00 00 64       	add    eax,0x64000002
9f005d45:	3b 00                	cmp    eax,DWORD PTR [eax]
9f005d47:	9f                   	lahf   
9f005d48:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005d4d:	00 01                	add    BYTE PTR [ecx],al
9f005d4f:	00 7d 00             	add    BYTE PTR [ebp+0x0],bh
9f005d52:	00 00                	add    BYTE PTR [eax],al
9f005d54:	90                   	nop
9f005d55:	0a 00                	or     al,BYTE PTR [eax]
9f005d57:	9f                   	lahf   
9f005d58:	26 00 00             	add    BYTE PTR es:[eax],al
9f005d5b:	00 12                	add    BYTE PTR [edx],dl
9f005d5d:	00 01                	add    BYTE PTR [ecx],al
9f005d5f:	00 cb                	add    bl,cl
9f005d61:	01 00                	add    DWORD PTR [eax],eax
9f005d63:	00 9c 33 00 9f 67 00 	add    BYTE PTR [ebx+esi*1+0x679f00],bl
9f005d6a:	00 00                	add    BYTE PTR [eax],al
9f005d6c:	12 00                	adc    al,BYTE PTR [eax]
9f005d6e:	01 00                	add    DWORD PTR [eax],eax
9f005d70:	d3 01                	rol    DWORD PTR [ecx],cl
9f005d72:	00 00                	add    BYTE PTR [eax],al
9f005d74:	d8 34 00             	fdiv   DWORD PTR [eax+eax*1]
9f005d77:	9f                   	lahf   
9f005d78:	20 00                	and    BYTE PTR [eax],al
9f005d7a:	00 00                	add    BYTE PTR [eax],al
9f005d7c:	12 00                	adc    al,BYTE PTR [eax]
9f005d7e:	01 00                	add    DWORD PTR [eax],eax
9f005d80:	5a                   	pop    edx
9f005d81:	00 00                	add    BYTE PTR [eax],al
9f005d83:	00 d5                	add    ch,dl
9f005d85:	06                   	push   es
9f005d86:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f005d8c:	12 00                	adc    al,BYTE PTR [eax]
9f005d8e:	01 00                	add    DWORD PTR [eax],eax
9f005d90:	5f                   	pop    edi
9f005d91:	01 00                	add    DWORD PTR [eax],eax
9f005d93:	00 09                	add    BYTE PTR [ecx],cl
9f005d95:	25 00 9f 23 00       	and    eax,0x239f00
9f005d9a:	00 00                	add    BYTE PTR [eax],al
9f005d9c:	12 00                	adc    al,BYTE PTR [eax]
9f005d9e:	01 00                	add    DWORD PTR [eax],eax
9f005da0:	10 00                	adc    BYTE PTR [eax],al
9f005da2:	00 00                	add    BYTE PTR [eax],al
9f005da4:	b3 01                	mov    bl,0x1
9f005da6:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f005dac:	12 00                	adc    al,BYTE PTR [eax]
9f005dae:	01 00                	add    DWORD PTR [eax],eax
9f005db0:	07                   	pop    es
9f005db1:	01 00                	add    DWORD PTR [eax],eax
9f005db3:	00 35 17 00 9f 29    	add    BYTE PTR ds:0x299f0017,dh
9f005db9:	00 00                	add    BYTE PTR [eax],al
9f005dbb:	00 12                	add    BYTE PTR [edx],dl
9f005dbd:	00 01                	add    BYTE PTR [ecx],al
9f005dbf:	00 95 01 00 00 ff    	add    BYTE PTR [ebp-0xffffff],dl
9f005dc5:	30 00                	xor    BYTE PTR [eax],al
9f005dc7:	9f                   	lahf   
9f005dc8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005dcb:	00 12                	add    BYTE PTR [edx],dl
9f005dcd:	00 01                	add    BYTE PTR [ecx],al
9f005dcf:	00 b0 00 00 00 00    	add    BYTE PTR [eax+0x0],dh
9f005dd5:	00 13                	add    BYTE PTR [ebx],dl
9f005dd7:	00 00                	add    BYTE PTR [eax],al
9f005dd9:	00 00                	add    BYTE PTR [eax],al
9f005ddb:	00 10                	add    BYTE PTR [eax],dl
9f005ddd:	00 01                	add    BYTE PTR [ecx],al
9f005ddf:	00 2a                	add    BYTE PTR [edx],ch
9f005de1:	01 00                	add    DWORD PTR [eax],eax
9f005de3:	00 29                	add    BYTE PTR [ecx],ch
9f005de5:	1a 00                	sbb    al,BYTE PTR [eax]
9f005de7:	9f                   	lahf   
9f005de8:	20 00                	and    BYTE PTR [eax],al
9f005dea:	00 00                	add    BYTE PTR [eax],al
9f005dec:	12 00                	adc    al,BYTE PTR [eax]
9f005dee:	01 00                	add    DWORD PTR [eax],eax
9f005df0:	1e                   	push   ds
9f005df1:	02 00                	add    al,BYTE PTR [eax]
9f005df3:	00 fe                	add    dh,bh
9f005df5:	3e 00 9f 3d 00 00 00 	add    BYTE PTR ds:[edi+0x3d],bl
9f005dfc:	12 00                	adc    al,BYTE PTR [eax]
9f005dfe:	01 00                	add    DWORD PTR [eax],eax
9f005e00:	51                   	push   ecx
9f005e01:	01 00                	add    DWORD PTR [eax],eax
9f005e03:	00 ff                	add    bh,bh
9f005e05:	27                   	daa    
9f005e06:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f005e0c:	12 00                	adc    al,BYTE PTR [eax]
9f005e0e:	01 00                	add    DWORD PTR [eax],eax
9f005e10:	f2 01 00             	repnz add DWORD PTR [eax],eax
9f005e13:	00 ca                	add    dl,cl
9f005e15:	38 00                	cmp    BYTE PTR [eax],al
9f005e17:	9f                   	lahf   
9f005e18:	20 00                	and    BYTE PTR [eax],al
9f005e1a:	00 00                	add    BYTE PTR [eax],al
9f005e1c:	12 00                	adc    al,BYTE PTR [eax]
9f005e1e:	01 00                	add    DWORD PTR [eax],eax
9f005e20:	c5 00                	lds    eax,FWORD PTR [eax]
9f005e22:	00 00                	add    BYTE PTR [eax],al
9f005e24:	45                   	inc    ebp
9f005e25:	11 00                	adc    DWORD PTR [eax],eax
9f005e27:	9f                   	lahf   
9f005e28:	43                   	inc    ebx
9f005e29:	00 00                	add    BYTE PTR [eax],al
9f005e2b:	00 12                	add    BYTE PTR [edx],dl
9f005e2d:	00 01                	add    BYTE PTR [ecx],al
9f005e2f:	00 36                	add    BYTE PTR [esi],dh
9f005e31:	02 00                	add    al,BYTE PTR [eax]
9f005e33:	00 51 48             	add    BYTE PTR [ecx+0x48],dl
9f005e36:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
9f005e3c:	12 00                	adc    al,BYTE PTR [eax]
9f005e3e:	01 00                	add    DWORD PTR [eax],eax
9f005e40:	88 00                	mov    BYTE PTR [eax],al
9f005e42:	00 00                	add    BYTE PTR [eax],al
9f005e44:	3f                   	aas    
9f005e45:	0b 00                	or     eax,DWORD PTR [eax]
9f005e47:	9f                   	lahf   
9f005e48:	26 00 00             	add    BYTE PTR es:[eax],al
9f005e4b:	00 12                	add    BYTE PTR [edx],dl
9f005e4d:	00 01                	add    BYTE PTR [ecx],al
9f005e4f:	00 c0                	add    al,al
9f005e51:	00 00                	add    BYTE PTR [eax],al
9f005e53:	00 02                	add    BYTE PTR [edx],al
9f005e55:	11 00                	adc    DWORD PTR [eax],eax
9f005e57:	9f                   	lahf   
9f005e58:	43                   	inc    ebx
9f005e59:	00 00                	add    BYTE PTR [eax],al
9f005e5b:	00 12                	add    BYTE PTR [edx],dl
9f005e5d:	00 01                	add    BYTE PTR [ecx],al
9f005e5f:	00 9d 01 00 00 86    	add    BYTE PTR [ebp-0x79ffffff],bl
9f005e65:	31 00                	xor    DWORD PTR [eax],eax
9f005e67:	9f                   	lahf   
9f005e68:	1d 00 00 00 12       	sbb    eax,0x12000000
9f005e6d:	00 01                	add    BYTE PTR [ecx],al
9f005e6f:	00 61 00             	add    BYTE PTR [ecx+0x0],ah
9f005e72:	00 00                	add    BYTE PTR [eax],al
9f005e74:	c2 08 00             	ret    0x8
9f005e77:	9f                   	lahf   
9f005e78:	23 00                	and    eax,DWORD PTR [eax]
9f005e7a:	00 00                	add    BYTE PTR [eax],al
9f005e7c:	12 00                	adc    al,BYTE PTR [eax]
9f005e7e:	01 00                	add    DWORD PTR [eax],eax
9f005e80:	7d 01                	jge    9f005e83 <__x86.get_pc_thunk.cx+0x15af>
9f005e82:	00 00                	add    BYTE PTR [eax],al
9f005e84:	5d                   	pop    ebp
9f005e85:	2f                   	das    
9f005e86:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
9f005e8c:	12 00                	adc    al,BYTE PTR [eax]
9f005e8e:	01 00                	add    DWORD PTR [eax],eax
9f005e90:	e2 00                	loop   9f005e92 <__x86.get_pc_thunk.cx+0x15be>
9f005e92:	00 00                	add    BYTE PTR [eax],al
9f005e94:	a1 15 00 9f 37       	mov    eax,ds:0x379f0015
9f005e99:	00 00                	add    BYTE PTR [eax],al
9f005e9b:	00 12                	add    BYTE PTR [edx],dl
9f005e9d:	00 01                	add    BYTE PTR [ecx],al
9f005e9f:	00 08                	add    BYTE PTR [eax],cl
9f005ea1:	00 00                	add    BYTE PTR [eax],al
9f005ea3:	00 70 00             	add    BYTE PTR [eax+0x0],dh
9f005ea6:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f005eac:	12 00                	adc    al,BYTE PTR [eax]
9f005eae:	01 00                	add    DWORD PTR [eax],eax
9f005eb0:	ab                   	stos   DWORD PTR es:[edi],eax
9f005eb1:	01 00                	add    DWORD PTR [eax],eax
9f005eb3:	00 24 32             	add    BYTE PTR [edx+esi*1],ah
9f005eb6:	00 9f 47 00 00 00    	add    BYTE PTR [edi+0x47],bl
9f005ebc:	12 00                	adc    al,BYTE PTR [eax]
9f005ebe:	01 00                	add    DWORD PTR [eax],eax
9f005ec0:	fa                   	cli    
9f005ec1:	00 00                	add    BYTE PTR [eax],al
9f005ec3:	00 0c 17             	add    BYTE PTR [edi+edx*1],cl
9f005ec6:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f005ecc:	12 00                	adc    al,BYTE PTR [eax]
9f005ece:	01 00                	add    DWORD PTR [eax],eax
9f005ed0:	28 02                	sub    BYTE PTR [edx],al
9f005ed2:	00 00                	add    BYTE PTR [eax],al
9f005ed4:	70 3f                	jo     9f005f15 <__x86.get_pc_thunk.cx+0x1641>
9f005ed6:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f005edc:	12 00                	adc    al,BYTE PTR [eax]
9f005ede:	01 00                	add    DWORD PTR [eax],eax
9f005ee0:	8d 00                	lea    eax,[eax]
9f005ee2:	00 00                	add    BYTE PTR [eax],al
9f005ee4:	92                   	xchg   edx,eax
9f005ee5:	0b 00                	or     eax,DWORD PTR [eax]
9f005ee7:	9f                   	lahf   
9f005ee8:	23 00                	and    eax,DWORD PTR [eax]
9f005eea:	00 00                	add    BYTE PTR [eax],al
9f005eec:	12 00                	adc    al,BYTE PTR [eax]
9f005eee:	01 00                	add    DWORD PTR [eax],eax
9f005ef0:	3b 02                	cmp    eax,DWORD PTR [edx]
9f005ef2:	00 00                	add    BYTE PTR [eax],al
9f005ef4:	e4 47                	in     al,0x47
9f005ef6:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
9f005efc:	12 00                	adc    al,BYTE PTR [eax]
9f005efe:	01 00                	add    DWORD PTR [eax],eax
9f005f00:	75 00                	jne    9f005f02 <__x86.get_pc_thunk.cx+0x162e>
9f005f02:	00 00                	add    BYTE PTR [eax],al
9f005f04:	9e                   	sahf   
9f005f05:	09 00                	or     DWORD PTR [eax],eax
9f005f07:	9f                   	lahf   
9f005f08:	93                   	xchg   ebx,eax
9f005f09:	00 00                	add    BYTE PTR [eax],al
9f005f0b:	00 12                	add    BYTE PTR [edx],dl
9f005f0d:	00 01                	add    BYTE PTR [ecx],al
9f005f0f:	00 25 01 00 00 09    	add    BYTE PTR ds:0x9000001,ah
9f005f15:	1a 00                	sbb    al,BYTE PTR [eax]
9f005f17:	9f                   	lahf   
9f005f18:	20 00                	and    BYTE PTR [eax],al
9f005f1a:	00 00                	add    BYTE PTR [eax],al
9f005f1c:	12 00                	adc    al,BYTE PTR [eax]
9f005f1e:	01 00                	add    DWORD PTR [eax],eax
9f005f20:	1c 00                	sbb    al,0x0
9f005f22:	00 00                	add    BYTE PTR [eax],al
9f005f24:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
9f005f27:	9f                   	lahf   
9f005f28:	5c                   	pop    esp
9f005f29:	00 00                	add    BYTE PTR [eax],al
9f005f2b:	00 12                	add    BYTE PTR [edx],dl
9f005f2d:	00 01                	add    BYTE PTR [ecx],al
9f005f2f:	00 a3 00 00 00 b4    	add    BYTE PTR [ebx-0x4c000000],ah
9f005f35:	10 00                	adc    BYTE PTR [eax],al
9f005f37:	9f                   	lahf   
9f005f38:	26 00 00             	add    BYTE PTR es:[eax],al
9f005f3b:	00 12                	add    BYTE PTR [edx],dl
9f005f3d:	00 01                	add    BYTE PTR [ecx],al
9f005f3f:	00 45 01             	add    BYTE PTR [ebp+0x1],al
9f005f42:	00 00                	add    BYTE PTR [eax],al
9f005f44:	cd 1e                	int    0x1e
9f005f46:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f005f4c:	12 00                	adc    al,BYTE PTR [eax]
9f005f4e:	01 00                	add    DWORD PTR [eax],eax
9f005f50:	bc 01 00 00 29       	mov    esp,0x29000001
9f005f55:	33 00                	xor    eax,DWORD PTR [eax]
9f005f57:	9f                   	lahf   
9f005f58:	1a 00                	sbb    al,BYTE PTR [eax]
9f005f5a:	00 00                	add    BYTE PTR [eax],al
9f005f5c:	12 00                	adc    al,BYTE PTR [eax]
9f005f5e:	01 00                	add    DWORD PTR [eax],eax
9f005f60:	78 00                	js     9f005f62 <__x86.get_pc_thunk.cx+0x168e>
9f005f62:	00 00                	add    BYTE PTR [eax],al
9f005f64:	19 09                	sbb    DWORD PTR [ecx],ecx
9f005f66:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
9f005f6c:	12 00                	adc    al,BYTE PTR [eax]
9f005f6e:	01 00                	add    DWORD PTR [eax],eax
9f005f70:	2a 00                	sub    al,BYTE PTR [eax]
9f005f72:	00 00                	add    BYTE PTR [eax],al
9f005f74:	52                   	push   edx
9f005f75:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f005f7a:	00 00                	add    BYTE PTR [eax],al
9f005f7c:	12 00                	adc    al,BYTE PTR [eax]
9f005f7e:	01 00                	add    DWORD PTR [eax],eax
9f005f80:	17                   	pop    ss
9f005f81:	01 00                	add    DWORD PTR [eax],eax
9f005f83:	00 9e 19 00 9f 4f    	add    BYTE PTR [esi+0x4f9f0019],bl
9f005f89:	00 00                	add    BYTE PTR [eax],al
9f005f8b:	00 12                	add    BYTE PTR [edx],dl
9f005f8d:	00 01                	add    BYTE PTR [ecx],al
9f005f8f:	00 01                	add    BYTE PTR [ecx],al
9f005f91:	00 00                	add    BYTE PTR [eax],al
9f005f93:	00 00                	add    BYTE PTR [eax],al
9f005f95:	00 00                	add    BYTE PTR [eax],al
9f005f97:	9f                   	lahf   
9f005f98:	38 00                	cmp    BYTE PTR [eax],al
9f005f9a:	00 00                	add    BYTE PTR [eax],al
9f005f9c:	12 00                	adc    al,BYTE PTR [eax]
9f005f9e:	01 00                	add    DWORD PTR [eax],eax
9f005fa0:	e3 01                	jecxz  9f005fa3 <__x86.get_pc_thunk.cx+0x16cf>
9f005fa2:	00 00                	add    BYTE PTR [eax],al
9f005fa4:	78 36                	js     9f005fdc <__x86.get_pc_thunk.cx+0x1708>
9f005fa6:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f005fac:	12 00                	adc    al,BYTE PTR [eax]
9f005fae:	01 00                	add    DWORD PTR [eax],eax
9f005fb0:	fa                   	cli    
9f005fb1:	01 00                	add    DWORD PTR [eax],eax
9f005fb3:	00 2f                	add    BYTE PTR [edi],ch
9f005fb5:	3a 00                	cmp    al,BYTE PTR [eax]
9f005fb7:	9f                   	lahf   
9f005fb8:	26 00 00             	add    BYTE PTR es:[eax],al
9f005fbb:	00 12                	add    BYTE PTR [edx],dl
9f005fbd:	00 01                	add    BYTE PTR [ecx],al
9f005fbf:	00 6f 00             	add    BYTE PTR [edi+0x0],ch
9f005fc2:	00 00                	add    BYTE PTR [eax],al
9f005fc4:	31 0a                	xor    DWORD PTR [edx],ecx
9f005fc6:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f005fcc:	12 00                	adc    al,BYTE PTR [eax]
9f005fce:	01 00                	add    DWORD PTR [eax],eax
9f005fd0:	21 00                	and    DWORD PTR [eax],eax
9f005fd2:	00 00                	add    BYTE PTR [eax],al
9f005fd4:	98                   	cwde   
9f005fd5:	04 00                	add    al,0x0
9f005fd7:	9f                   	lahf   
9f005fd8:	ba 00 00 00 12       	mov    edx,0x12000000
9f005fdd:	00 01                	add    BYTE PTR [ecx],al
9f005fdf:	00 67 01             	add    BYTE PTR [edi+0x1],ah
9f005fe2:	00 00                	add    BYTE PTR [eax],al
9f005fe4:	2c 25                	sub    al,0x25
9f005fe6:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f005fec:	12 00                	adc    al,BYTE PTR [eax]
9f005fee:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f005ff0 <.dynstr>:
9f005ff0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f005ff3:	72 63                	jb     9f006058 <__x86.get_pc_thunk.cx+0x1784>
9f005ff5:	68 72 00 73 74       	push   0x74730072
9f005ffa:	72 63                	jb     9f00605f <__x86.get_pc_thunk.cx+0x178b>
9f005ffc:	73 70                	jae    9f00606e <__x86.get_pc_thunk.cx+0x179a>
9f005ffe:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f005fff:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006002:	72 74                	jb     9f006078 <__x86.get_pc_thunk.cx+0x17a4>
9f006004:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006005:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f006008:	74 6f                	je     9f006079 <__x86.get_pc_thunk.cx+0x17a5>
9f00600a:	61                   	popa   
9f00600b:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f00600e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00600f:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f006015:	54                   	push   esp
9f006016:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006017:	58                   	pop    eax
9f006018:	59                   	pop    ecx
9f006019:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f00601c:	76 65                	jbe    9f006083 <__x86.get_pc_thunk.cx+0x17af>
9f00601e:	43                   	inc    ebx
9f00601f:	75 72                	jne    9f006093 <__x86.get_pc_thunk.cx+0x17bf>
9f006021:	73 6f                	jae    9f006092 <__x86.get_pc_thunk.cx+0x17be>
9f006023:	72 50                	jb     9f006075 <__x86.get_pc_thunk.cx+0x17a1>
9f006025:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006026:	73 69                	jae    9f006091 <__x86.get_pc_thunk.cx+0x17bd>
9f006028:	74 69                	je     9f006093 <__x86.get_pc_thunk.cx+0x17bf>
9f00602a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00602b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00602c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00602f:	73 74                	jae    9f0060a5 <__x86.get_pc_thunk.cx+0x17d1>
9f006031:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006032:	72 65                	jb     9f006099 <__x86.get_pc_thunk.cx+0x17c5>
9f006034:	43                   	inc    ebx
9f006035:	75 72                	jne    9f0060a9 <__x86.get_pc_thunk.cx+0x17d5>
9f006037:	73 6f                	jae    9f0060a8 <__x86.get_pc_thunk.cx+0x17d4>
9f006039:	72 50                	jb     9f00608b <__x86.get_pc_thunk.cx+0x17b7>
9f00603b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00603c:	73 69                	jae    9f0060a7 <__x86.get_pc_thunk.cx+0x17d3>
9f00603e:	74 69                	je     9f0060a9 <__x86.get_pc_thunk.cx+0x17d5>
9f006040:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006041:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006042:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006045:	74 65                	je     9f0060ac <__x86.get_pc_thunk.cx+0x17d8>
9f006047:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006048:	76 00                	jbe    9f00604a <__x86.get_pc_thunk.cx+0x1776>
9f00604a:	73 65                	jae    9f0060b1 <__x86.get_pc_thunk.cx+0x17dd>
9f00604c:	74 65                	je     9f0060b3 <__x86.get_pc_thunk.cx+0x17df>
9f00604e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00604f:	76 00                	jbe    9f006051 <__x86.get_pc_thunk.cx+0x177d>
9f006051:	67                   	addr16
9f006052:	65                   	gs
9f006053:	74 63                	je     9f0060b8 <__x86.get_pc_thunk.cx+0x17e4>
9f006055:	77 64                	ja     9f0060bb <__x86.get_pc_thunk.cx+0x17e7>
9f006057:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00605a:	74 64                	je     9f0060c0 <__x86.get_pc_thunk.cx+0x17ec>
9f00605c:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
9f006063:	65 00 66 72          	add    BYTE PTR gs:[esi+0x72],ah
9f006067:	65 6f                	outs   dx,DWORD PTR gs:[esi]
9f006069:	70 65                	jo     9f0060d0 <__x86.get_pc_thunk.cx+0x17fc>
9f00606b:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00606c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00606f:	61                   	popa   
9f006070:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f006074:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f00607b:	6b 
9f00607c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00607f:	61                   	popa   
9f006080:	74 00                	je     9f006082 <__x86.get_pc_thunk.cx+0x17ae>
9f006082:	72 65                	jb     9f0060e9 <__x86.get_pc_thunk.cx+0x1815>
9f006084:	73 6f                	jae    9f0060f5 <__x86.get_pc_thunk.cx+0x1821>
9f006086:	6c                   	ins    BYTE PTR es:[edi],dx
9f006087:	76 65                	jbe    9f0060ee <__x86.get_pc_thunk.cx+0x181a>
9f006089:	50                   	push   eax
9f00608a:	61                   	popa   
9f00608b:	74 68                	je     9f0060f5 <__x86.get_pc_thunk.cx+0x1821>
9f00608d:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f006091:	6c                   	ins    BYTE PTR es:[edi],dx
9f006092:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006095:	74 6c                	je     9f006103 <__x86.get_pc_thunk.cx+0x182f>
9f006097:	69 6e 65 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x65],0x74757000
9f00609e:	73 00                	jae    9f0060a0 <__x86.get_pc_thunk.cx+0x17cc>
9f0060a0:	73 79                	jae    9f00611b <__x86.get_pc_thunk.cx+0x1847>
9f0060a2:	73 45                	jae    9f0060e9 <__x86.get_pc_thunk.cx+0x1815>
9f0060a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060a5:	74 65                	je     9f00610c <__x86.get_pc_thunk.cx+0x1838>
9f0060a7:	72 5f                	jb     9f006108 <__x86.get_pc_thunk.cx+0x1834>
9f0060a9:	56                   	push   esi
9f0060aa:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f0060af:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f0060b2:	74 63                	je     9f006117 <__x86.get_pc_thunk.cx+0x1843>
9f0060b4:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0060b7:	74 63                	je     9f00611c <__x86.get_pc_thunk.cx+0x1848>
9f0060b9:	68 61 72 00 67       	push   0x67007261
9f0060be:	65                   	gs
9f0060bf:	74 73                	je     9f006134 <__x86.get_pc_thunk.cx+0x1860>
9f0060c1:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0060c5:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f0060c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0060c9:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f0060d0:	74 
9f0060d1:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f0060d4:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f0060db:	65                   	gs
9f0060dc:	65                   	gs
9f0060dd:	70 00                	jo     9f0060df <__x86.get_pc_thunk.cx+0x180b>
9f0060df:	73 6c                	jae    9f00614d <__x86.get_pc_thunk.cx+0x1879>
9f0060e1:	65                   	gs
9f0060e2:	65                   	gs
9f0060e3:	70 54                	jo     9f006139 <__x86.get_pc_thunk.cx+0x1865>
9f0060e5:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f0060ec:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f0060f3:	6e 
9f0060f4:	61                   	popa   
9f0060f5:	6c                   	ins    BYTE PTR es:[edi],dx
9f0060f6:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f0060f9:	72 6b                	jb     9f006166 <__x86.get_pc_thunk.cx+0x1892>
9f0060fb:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f0060fe:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f006101:	65                   	gs
9f006102:	78 65                	js     9f006169 <__x86.get_pc_thunk.cx+0x1895>
9f006104:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f006107:	65                   	gs
9f006108:	78 65                	js     9f00616f <__x86.get_pc_thunk.cx+0x189b>
9f00610a:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f00610d:	77 61                	ja     9f006170 <__x86.get_pc_thunk.cx+0x189c>
9f00610f:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f006116:	78 
9f006117:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f00611e:	77 
9f00611f:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f006123:	6c                   	ins    BYTE PTR es:[edi],dx
9f006124:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f00612b:	69 
9f00612c:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00612d:	65                   	gs
9f00612e:	54                   	push   esp
9f00612f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006130:	41                   	inc    ecx
9f006131:	72 67                	jb     9f00619a <__x86.get_pc_thunk.cx+0x18c6>
9f006133:	76 00                	jbe    9f006135 <__x86.get_pc_thunk.cx+0x1861>
9f006135:	73 65                	jae    9f00619c <__x86.get_pc_thunk.cx+0x18c8>
9f006137:	74 53                	je     9f00618c <__x86.get_pc_thunk.cx+0x18b8>
9f006139:	54                   	push   esp
9f00613a:	44                   	inc    esp
9f00613b:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f00613e:	61                   	popa   
9f00613f:	70 00                	jo     9f006141 <__x86.get_pc_thunk.cx+0x186d>
9f006141:	6d                   	ins    DWORD PTR es:[edi],dx
9f006142:	65                   	gs
9f006143:	6d                   	ins    DWORD PTR es:[edi],dx
9f006144:	73 65                	jae    9f0061ab <__x86.get_pc_thunk.cx+0x18d7>
9f006146:	74 00                	je     9f006148 <__x86.get_pc_thunk.cx+0x1874>
9f006148:	6d                   	ins    DWORD PTR es:[edi],dx
9f006149:	61                   	popa   
9f00614a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00614b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00614c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00614d:	63 00                	arpl   WORD PTR [eax],ax
9f00614f:	72 65                	jb     9f0061b6 <__x86.get_pc_thunk.cx+0x18e2>
9f006151:	61                   	popa   
9f006152:	6c                   	ins    BYTE PTR es:[edi],dx
9f006153:	6c                   	ins    BYTE PTR es:[edi],dx
9f006154:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006155:	63 00                	arpl   WORD PTR [eax],ax
9f006157:	66                   	data16
9f006158:	72 65                	jb     9f0061bf <__x86.get_pc_thunk.cx+0x18eb>
9f00615a:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f00615e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00615f:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006162:	00 70 69             	add    BYTE PTR [eax+0x69],dh
9f006165:	70 65                	jo     9f0061cc <__x86.get_pc_thunk.cx+0x18f8>
9f006167:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f00616b:	33 00                	xor    eax,DWORD PTR [eax]
9f00616d:	73 70                	jae    9f0061df <__x86.get_pc_thunk.cx+0x190b>
9f00616f:	72 69                	jb     9f0061da <__x86.get_pc_thunk.cx+0x1906>
9f006171:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006172:	74 66                	je     9f0061da <__x86.get_pc_thunk.cx+0x1906>
9f006174:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006177:	73 65                	jae    9f0061de <__x86.get_pc_thunk.cx+0x190a>
9f006179:	74 52                	je     9f0061cd <__x86.get_pc_thunk.cx+0x18f9>
9f00617b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00617c:	77 00                	ja     9f00617e <__x86.get_pc_thunk.cx+0x18aa>
9f00617e:	73 74                	jae    9f0061f4 <__x86.get_pc_thunk.cx+0x1920>
9f006180:	72 63                	jb     9f0061e5 <__x86.get_pc_thunk.cx+0x1911>
9f006182:	61                   	popa   
9f006183:	74 00                	je     9f006185 <__x86.get_pc_thunk.cx+0x18b1>
9f006185:	73 74                	jae    9f0061fb <__x86.get_pc_thunk.cx+0x1927>
9f006187:	72 6e                	jb     9f0061f7 <__x86.get_pc_thunk.cx+0x1923>
9f006189:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f00618c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00618f:	72 63                	jb     9f0061f4 <__x86.get_pc_thunk.cx+0x1920>
9f006191:	6d                   	ins    DWORD PTR es:[edi],dx
9f006192:	70 00                	jo     9f006194 <__x86.get_pc_thunk.cx+0x18c0>
9f006194:	73 74                	jae    9f00620a <__x86.get_pc_thunk.cx+0x1936>
9f006196:	72 63                	jb     9f0061fb <__x86.get_pc_thunk.cx+0x1927>
9f006198:	70 79                	jo     9f006213 <__x86.get_pc_thunk.cx+0x193f>
9f00619a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00619d:	72 63                	jb     9f006202 <__x86.get_pc_thunk.cx+0x192e>
9f00619f:	70 79                	jo     9f00621a <__x86.get_pc_thunk.cx+0x1946>
9f0061a1:	63 00                	arpl   WORD PTR [eax],ax
9f0061a3:	73 74                	jae    9f006219 <__x86.get_pc_thunk.cx+0x1945>
9f0061a5:	72 69                	jb     9f006210 <__x86.get_pc_thunk.cx+0x193c>
9f0061a7:	73 6e                	jae    9f006217 <__x86.get_pc_thunk.cx+0x1943>
9f0061a9:	75 6d                	jne    9f006218 <__x86.get_pc_thunk.cx+0x1944>
9f0061ab:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061ae:	72 6c                	jb     9f00621c <__x86.get_pc_thunk.cx+0x1948>
9f0061b0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f0061b2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061b5:	72 6e                	jb     9f006225 <__x86.get_pc_thunk.cx+0x1951>
9f0061b7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061b8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f0061ba:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061bd:	72 6e                	jb     9f00622d <__x86.get_pc_thunk.cx+0x1959>
9f0061bf:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f0061c2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061c5:	72 6e                	jb     9f006235 <__x86.get_pc_thunk.cx+0x1961>
9f0061c7:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f0061ca:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061cd:	72 74                	jb     9f006243 <__x86.get_pc_thunk.cx+0x196f>
9f0061cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0061d0:	75 6c                	jne    9f00623e <__x86.get_pc_thunk.cx+0x196a>
9f0061d2:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061d5:	72 6c                	jb     9f006243 <__x86.get_pc_thunk.cx+0x196f>
9f0061d7:	65                   	gs
9f0061d8:	66                   	data16
9f0061d9:	74 00                	je     9f0061db <__x86.get_pc_thunk.cx+0x1907>
9f0061db:	73 74                	jae    9f006251 <__x86.get_pc_thunk.cx+0x197d>
9f0061dd:	72 74                	jb     9f006253 <__x86.get_pc_thunk.cx+0x197f>
9f0061df:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0061e0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0061e1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061e4:	72 74                	jb     9f00625a <__x86.get_pc_thunk.cx+0x1986>
9f0061e6:	72 69                	jb     9f006251 <__x86.get_pc_thunk.cx+0x197d>
9f0061e8:	6d                   	ins    DWORD PTR es:[edi],dx
9f0061e9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0061ec:	72 72                	jb     9f006260 <__x86.get_pc_thunk.cx+0x198c>
9f0061ee:	65                   	gs
9f0061ef:	70 6c                	jo     9f00625d <__x86.get_pc_thunk.cx+0x1989>
9f0061f1:	61                   	popa   
9f0061f2:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f0061f5:	73 74                	jae    9f00626b <__x86.get_pc_thunk.cx+0x1997>
9f0061f7:	72 73                	jb     9f00626c <__x86.get_pc_thunk.cx+0x1998>
9f0061f9:	74 72                	je     9f00626d <__x86.get_pc_thunk.cx+0x1999>
9f0061fb:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0061fe:	74 74                	je     9f006274 <__x86.get_pc_thunk.cx+0x19a0>
9f006200:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f006207:	74 69                	je     9f006272 <__x86.get_pc_thunk.cx+0x199e>
9f006209:	6d                   	ins    DWORD PTR es:[edi],dx
9f00620a:	65                   	gs
9f00620b:	5f                   	pop    edi
9f00620c:	72 00                	jb     9f00620e <__x86.get_pc_thunk.cx+0x193a>
9f00620e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00620f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006210:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f006213:	74 69                	je     9f00627e <__x86.get_pc_thunk.cx+0x19aa>
9f006215:	6d                   	ins    DWORD PTR es:[edi],dx
9f006216:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f00621b:	61                   	popa   
9f00621c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00621d:	74 69                	je     9f006288 <__x86.get_pc_thunk.cx+0x19b4>
9f00621f:	6d                   	ins    DWORD PTR es:[edi],dx
9f006220:	65                   	gs
9f006221:	5f                   	pop    edi
9f006222:	72 00                	jb     9f006224 <__x86.get_pc_thunk.cx+0x1950>
9f006224:	6d                   	ins    DWORD PTR es:[edi],dx
9f006225:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f00622a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f00622d:	74 74                	je     9f0062a3 <__x86.get_pc_thunk.cx+0x19cf>
9f00622f:	69                   	.byte 0x69
9f006230:	6d                   	ins    DWORD PTR es:[edi],dx
9f006231:	65                   	gs
	...

Disassembly of section .hash:

9f006234 <.hash>:
9f006234:	43                   	inc    ebx
9f006235:	00 00                	add    BYTE PTR [eax],al
9f006237:	00 4e 00             	add    BYTE PTR [esi+0x0],cl
	...
9f006246:	00 00                	add    BYTE PTR [eax],al
9f006248:	1e                   	push   ds
9f006249:	00 00                	add    BYTE PTR [eax],al
9f00624b:	00 48 00             	add    BYTE PTR [eax+0x0],cl
9f00624e:	00 00                	add    BYTE PTR [eax],al
9f006250:	3c 00                	cmp    al,0x0
9f006252:	00 00                	add    BYTE PTR [eax],al
9f006254:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006256:	00 00                	add    BYTE PTR [eax],al
9f006258:	1c 00                	sbb    al,0x0
9f00625a:	00 00                	add    BYTE PTR [eax],al
9f00625c:	15 00 00 00 00       	adc    eax,0x0
9f006261:	00 00                	add    BYTE PTR [eax],al
9f006263:	00 12                	add    BYTE PTR [edx],dl
9f006265:	00 00                	add    BYTE PTR [eax],al
9f006267:	00 25 00 00 00 00    	add    BYTE PTR ds:0x0,ah
9f00626d:	00 00                	add    BYTE PTR [eax],al
9f00626f:	00 47 00             	add    BYTE PTR [edi+0x0],al
9f006272:	00 00                	add    BYTE PTR [eax],al
9f006274:	1a 00                	sbb    al,BYTE PTR [eax]
9f006276:	00 00                	add    BYTE PTR [eax],al
9f006278:	35 00 00 00 00       	xor    eax,0x0
9f00627d:	00 00                	add    BYTE PTR [eax],al
9f00627f:	00 00                	add    BYTE PTR [eax],al
9f006281:	00 00                	add    BYTE PTR [eax],al
9f006283:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
9f006286:	00 00                	add    BYTE PTR [eax],al
9f006288:	13 00                	adc    eax,DWORD PTR [eax]
9f00628a:	00 00                	add    BYTE PTR [eax],al
9f00628c:	00 00                	add    BYTE PTR [eax],al
9f00628e:	00 00                	add    BYTE PTR [eax],al
9f006290:	32 00                	xor    al,BYTE PTR [eax]
9f006292:	00 00                	add    BYTE PTR [eax],al
9f006294:	41                   	inc    ecx
9f006295:	00 00                	add    BYTE PTR [eax],al
9f006297:	00 00                	add    BYTE PTR [eax],al
9f006299:	00 00                	add    BYTE PTR [eax],al
9f00629b:	00 2e                	add    BYTE PTR [esi],ch
9f00629d:	00 00                	add    BYTE PTR [eax],al
9f00629f:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
	...
9f0062aa:	00 00                	add    BYTE PTR [eax],al
9f0062ac:	1d 00 00 00 00       	sbb    eax,0x0
9f0062b1:	00 00                	add    BYTE PTR [eax],al
9f0062b3:	00 49 00             	add    BYTE PTR [ecx+0x0],cl
9f0062b6:	00 00                	add    BYTE PTR [eax],al
9f0062b8:	2d 00 00 00 1b       	sub    eax,0x1b000000
9f0062bd:	00 00                	add    BYTE PTR [eax],al
9f0062bf:	00 43 00             	add    BYTE PTR [ebx+0x0],al
9f0062c2:	00 00                	add    BYTE PTR [eax],al
9f0062c4:	17                   	pop    ss
9f0062c5:	00 00                	add    BYTE PTR [eax],al
9f0062c7:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0062ca:	00 00                	add    BYTE PTR [eax],al
9f0062cc:	00 00                	add    BYTE PTR [eax],al
9f0062ce:	00 00                	add    BYTE PTR [eax],al
9f0062d0:	39 00                	cmp    DWORD PTR [eax],eax
9f0062d2:	00 00                	add    BYTE PTR [eax],al
9f0062d4:	3d 00 00 00 29       	cmp    eax,0x29000000
9f0062d9:	00 00                	add    BYTE PTR [eax],al
9f0062db:	00 3a                	add    BYTE PTR [edx],bh
9f0062dd:	00 00                	add    BYTE PTR [eax],al
9f0062df:	00 45 00             	add    BYTE PTR [ebp+0x0],al
9f0062e2:	00 00                	add    BYTE PTR [eax],al
9f0062e4:	4c                   	dec    esp
9f0062e5:	00 00                	add    BYTE PTR [eax],al
9f0062e7:	00 2a                	add    BYTE PTR [edx],ch
9f0062e9:	00 00                	add    BYTE PTR [eax],al
9f0062eb:	00 46 00             	add    BYTE PTR [esi+0x0],al
9f0062ee:	00 00                	add    BYTE PTR [eax],al
9f0062f0:	44                   	inc    esp
	...
9f006305:	00 00                	add    BYTE PTR [eax],al
9f006307:	00 3e                	add    BYTE PTR [esi],bh
	...
9f006311:	00 00                	add    BYTE PTR [eax],al
9f006313:	00 36                	add    BYTE PTR [esi],dh
9f006315:	00 00                	add    BYTE PTR [eax],al
9f006317:	00 00                	add    BYTE PTR [eax],al
9f006319:	00 00                	add    BYTE PTR [eax],al
9f00631b:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
9f00631e:	00 00                	add    BYTE PTR [eax],al
9f006320:	30 00                	xor    BYTE PTR [eax],al
9f006322:	00 00                	add    BYTE PTR [eax],al
9f006324:	00 00                	add    BYTE PTR [eax],al
9f006326:	00 00                	add    BYTE PTR [eax],al
9f006328:	40                   	inc    eax
9f006329:	00 00                	add    BYTE PTR [eax],al
9f00632b:	00 1f                	add    BYTE PTR [edi],bl
9f00632d:	00 00                	add    BYTE PTR [eax],al
9f00632f:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
9f006332:	00 00                	add    BYTE PTR [eax],al
9f006334:	0f 00 00             	sldt   WORD PTR [eax]
9f006337:	00 31                	add    BYTE PTR [ecx],dh
9f006339:	00 00                	add    BYTE PTR [eax],al
9f00633b:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f00633e:	00 00                	add    BYTE PTR [eax],al
9f006340:	42                   	inc    edx
9f006341:	00 00                	add    BYTE PTR [eax],al
9f006343:	00 09                	add    BYTE PTR [ecx],cl
	...
9f006371:	00 00                	add    BYTE PTR [eax],al
9f006373:	00 0a                	add    BYTE PTR [edx],cl
	...
9f006389:	00 00                	add    BYTE PTR [eax],al
9f00638b:	00 01                	add    BYTE PTR [ecx],al
	...
9f0063a1:	00 00                	add    BYTE PTR [eax],al
9f0063a3:	00 0e                	add    BYTE PTR [esi],cl
	...
9f0063ad:	00 00                	add    BYTE PTR [eax],al
9f0063af:	00 06                	add    BYTE PTR [esi],al
9f0063b1:	00 00                	add    BYTE PTR [eax],al
9f0063b3:	00 00                	add    BYTE PTR [eax],al
9f0063b5:	00 00                	add    BYTE PTR [eax],al
9f0063b7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f0063ba:	00 00                	add    BYTE PTR [eax],al
9f0063bc:	00 00                	add    BYTE PTR [eax],al
9f0063be:	00 00                	add    BYTE PTR [eax],al
9f0063c0:	05 00 00 00 00       	add    eax,0x0
9f0063c5:	00 00                	add    BYTE PTR [eax],al
9f0063c7:	00 0d 00 00 00 18    	add    BYTE PTR ds:0x18000000,cl
9f0063cd:	00 00                	add    BYTE PTR [eax],al
9f0063cf:	00 07                	add    BYTE PTR [edi],al
	...
9f0063d9:	00 00                	add    BYTE PTR [eax],al
9f0063db:	00 0b                	add    BYTE PTR [ebx],cl
9f0063dd:	00 00                	add    BYTE PTR [eax],al
9f0063df:	00 22                	add    BYTE PTR [edx],ah
9f0063e1:	00 00                	add    BYTE PTR [eax],al
9f0063e3:	00 03                	add    BYTE PTR [ebx],al
9f0063e5:	00 00                	add    BYTE PTR [eax],al
9f0063e7:	00 00                	add    BYTE PTR [eax],al
9f0063e9:	00 00                	add    BYTE PTR [eax],al
9f0063eb:	00 26                	add    BYTE PTR [esi],ah
	...
9f0063f5:	00 00                	add    BYTE PTR [eax],al
9f0063f7:	00 28                	add    BYTE PTR [eax],ch
	...
9f006401:	00 00                	add    BYTE PTR [eax],al
9f006403:	00 2b                	add    BYTE PTR [ebx],ch
	...
9f006411:	00 00                	add    BYTE PTR [eax],al
9f006413:	00 11                	add    BYTE PTR [ecx],dl
9f006415:	00 00                	add    BYTE PTR [eax],al
9f006417:	00 2f                	add    BYTE PTR [edi],ch
9f006419:	00 00                	add    BYTE PTR [eax],al
9f00641b:	00 27                	add    BYTE PTR [edi],ah
	...
9f006425:	00 00                	add    BYTE PTR [eax],al
9f006427:	00 33                	add    BYTE PTR [ebx],dh
9f006429:	00 00                	add    BYTE PTR [eax],al
9f00642b:	00 00                	add    BYTE PTR [eax],al
9f00642d:	00 00                	add    BYTE PTR [eax],al
9f00642f:	00 16                	add    BYTE PTR [esi],dl
9f006431:	00 00                	add    BYTE PTR [eax],al
9f006433:	00 19                	add    BYTE PTR [ecx],bl
9f006435:	00 00                	add    BYTE PTR [eax],al
9f006437:	00 38                	add    BYTE PTR [eax],bh
9f006439:	00 00                	add    BYTE PTR [eax],al
9f00643b:	00 08                	add    BYTE PTR [eax],cl
	...
9f006445:	00 00                	add    BYTE PTR [eax],al
9f006447:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
	...
9f006452:	00 00                	add    BYTE PTR [eax],al
9f006454:	21 00                	and    DWORD PTR [eax],eax
9f006456:	00 00                	add    BYTE PTR [eax],al
9f006458:	20 00                	and    BYTE PTR [eax],al
9f00645a:	00 00                	add    BYTE PTR [eax],al
9f00645c:	00 00                	add    BYTE PTR [eax],al
9f00645e:	00 00                	add    BYTE PTR [eax],al
9f006460:	3f                   	aas    
9f006461:	00 00                	add    BYTE PTR [eax],al
9f006463:	00 02                	add    BYTE PTR [edx],al
9f006465:	00 00                	add    BYTE PTR [eax],al
9f006467:	00 23                	add    BYTE PTR [ebx],ah
9f006469:	00 00                	add    BYTE PTR [eax],al
9f00646b:	00 37                	add    BYTE PTR [edi],dh
9f00646d:	00 00                	add    BYTE PTR [eax],al
9f00646f:	00 00                	add    BYTE PTR [eax],al
9f006471:	00 00                	add    BYTE PTR [eax],al
9f006473:	00 10                	add    BYTE PTR [eax],dl
9f006475:	00 00                	add    BYTE PTR [eax],al
9f006477:	00 4a 00             	add    BYTE PTR [edx+0x0],cl
9f00647a:	00 00                	add    BYTE PTR [eax],al
9f00647c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f006480 <.eh_frame>:
9f006480:	14 00                	adc    al,0x0
9f006482:	00 00                	add    BYTE PTR [eax],al
9f006484:	00 00                	add    BYTE PTR [eax],al
9f006486:	00 00                	add    BYTE PTR [eax],al
9f006488:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f00648b:	00 01                	add    BYTE PTR [ecx],al
9f00648d:	7c 08                	jl     9f006497 <__x86.get_pc_thunk.cx+0x1bc3>
9f00648f:	01 1b                	add    DWORD PTR [ebx],ebx
9f006491:	0c 04                	or     al,0x4
9f006493:	04 88                	add    al,0x88
9f006495:	01 00                	add    DWORD PTR [eax],eax
9f006497:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00649a:	00 00                	add    BYTE PTR [eax],al
9f00649c:	1c 00                	sbb    al,0x0
9f00649e:	00 00                	add    BYTE PTR [eax],al
9f0064a0:	00 e4                	add    ah,ah
9f0064a2:	ff                   	(bad)  
9f0064a3:	ff 30                	push   DWORD PTR [eax]
9f0064a5:	00 00                	add    BYTE PTR [eax],al
9f0064a7:	00 00                	add    BYTE PTR [eax],al
9f0064a9:	0e                   	push   cs
9f0064aa:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f0064ad:	0c 4a                	or     al,0x4a
9f0064af:	0f 0b                	ud2    
9f0064b1:	74 04                	je     9f0064b7 <__x86.get_pc_thunk.cx+0x1be3>
9f0064b3:	78 00                	js     9f0064b5 <__x86.get_pc_thunk.cx+0x1be1>
9f0064b5:	3f                   	aas    
9f0064b6:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f0064b8:	2a 32                	sub    dh,BYTE PTR [edx]
9f0064ba:	24 22                	and    al,0x22
9f0064bc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f0064c0 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f0064c0:	01 1b                	add    DWORD PTR [ebx],ebx
9f0064c2:	03 3b                	add    edi,DWORD PTR [ebx]
9f0064c4:	14 e4                	adc    al,0xe4
9f0064c6:	ff                   	(bad)  
9f0064c7:	ff 85 00 00 00 40    	inc    DWORD PTR [ebp+0x40000000]
9f0064cd:	9b                   	fwait
9f0064ce:	ff                   	(bad)  
9f0064cf:	ff 30                	push   DWORD PTR [eax]
9f0064d1:	e4 ff                	in     al,0xff
9f0064d3:	ff                   	(bad)  
9f0064d4:	78 9b                	js     9f006471 <__x86.get_pc_thunk.cx+0x1b9d>
9f0064d6:	ff                   	(bad)  
9f0064d7:	ff 50 e4             	call   DWORD PTR [eax-0x1c]
9f0064da:	ff                   	(bad)  
9f0064db:	ff b0 9b ff ff 84    	push   DWORD PTR [eax-0x7b000065]
9f0064e1:	e4 ff                	in     al,0xff
9f0064e3:	ff 05 9c ff ff ac    	inc    DWORD PTR ds:0xacffff9c
9f0064e9:	e4 ff                	in     al,0xff
9f0064eb:	ff 5c 9c ff          	call   FWORD PTR [esp+ebx*4-0x1]
9f0064ef:	ff d4                	call   esp
9f0064f1:	e4 ff                	in     al,0xff
9f0064f3:	ff f3                	push   ebx
9f0064f5:	9c                   	pushf  
9f0064f6:	ff                   	(bad)  
9f0064f7:	ff                   	(bad)  
9f0064f8:	fc                   	cld    
9f0064f9:	e4 ff                	in     al,0xff
9f0064fb:	ff 8c 9d ff ff 38 e5 	dec    DWORD PTR [ebp+ebx*4-0x1ac70001]
9f006502:	ff                   	(bad)  
9f006503:	ff 03                	inc    DWORD PTR [ebx]
9f006505:	9e                   	sahf   
9f006506:	ff                   	(bad)  
9f006507:	ff 5c e5 ff          	call   FWORD PTR [ebp+eiz*8-0x1]
9f00650b:	ff                   	(bad)  
9f00650c:	be 9e ff ff 80       	mov    esi,0x80ffff9e
9f006511:	e5 ff                	in     eax,0xff
9f006513:	ff                   	(bad)  
9f006514:	79 9f                	jns    9f0064b5 <__x86.get_pc_thunk.cx+0x1be1>
9f006516:	ff                   	(bad)  
9f006517:	ff a4 e5 ff ff d8 9f 	jmp    DWORD PTR [ebp+eiz*8-0x60270001]
9f00651e:	ff                   	(bad)  
9f00651f:	ff c4                	inc    esp
9f006521:	e5 ff                	in     eax,0xff
9f006523:	ff 92 a0 ff ff e8    	call   DWORD PTR [edx-0x17000060]
9f006529:	e5 ff                	in     eax,0xff
9f00652b:	ff ec                	jmp    <internal disassembler error>
9f00652d:	a0 ff ff 0c e6       	mov    al,ds:0xe60cffff
9f006532:	ff                   	(bad)  
9f006533:	ff 48 a1             	dec    DWORD PTR [eax-0x5f]
9f006536:	ff                   	(bad)  
9f006537:	ff 30                	push   DWORD PTR [eax]
9f006539:	e6 ff                	out    0xff,al
9f00653b:	ff f2                	push   edx
9f00653d:	a1 ff ff 54 e6       	mov    eax,ds:0xe654ffff
9f006542:	ff                   	(bad)  
9f006543:	ff 15 a2 ff ff 74    	call   DWORD PTR ds:0x74ffffa2
9f006549:	e6 ff                	out    0xff,al
9f00654b:	ff d6                	call   esi
9f00654d:	a3 ff ff 98 e6       	mov    ds:0xe698ffff,eax
9f006552:	ff                   	(bad)  
9f006553:	ff 02                	inc    DWORD PTR [edx]
9f006555:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006556:	ff                   	(bad)  
9f006557:	ff                   	(bad)  
9f006558:	bc e6 ff ff 28       	mov    esp,0x28ffffe6
9f00655d:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f00655e:	ff                   	(bad)  
9f00655f:	ff dc                	call   <internal disassembler error>
9f006561:	e6 ff                	out    0xff,al
9f006563:	ff 59 a4             	call   FWORD PTR [ecx-0x5c]
9f006566:	ff                   	(bad)  
9f006567:	ff 00                	inc    DWORD PTR [eax]
9f006569:	e7 ff                	out    0xff,eax
9f00656b:	ff 85 a4 ff ff 24    	inc    DWORD PTR [ebp+0x24ffffa4]
9f006571:	e7 ff                	out    0xff,eax
9f006573:	ff de                	call   <internal disassembler error>
9f006575:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006576:	ff                   	(bad)  
9f006577:	ff 48 e7             	dec    DWORD PTR [eax-0x19]
9f00657a:	ff                   	(bad)  
9f00657b:	ff 71 a5             	push   DWORD PTR [ecx-0x5b]
9f00657e:	ff                   	(bad)  
9f00657f:	ff 70 e7             	push   DWORD PTR [eax-0x19]
9f006582:	ff                   	(bad)  
9f006583:	ff 9b a5 ff ff 94    	call   FWORD PTR [ebx-0x6b00005b]
9f006589:	e7 ff                	out    0xff,eax
9f00658b:	ff d0                	call   eax
9f00658d:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f00658e:	ff                   	(bad)  
9f00658f:	ff                   	(bad)  
9f006590:	bc e7 ff ff f6       	mov    esp,0xf6ffffe7
9f006595:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f006596:	ff                   	(bad)  
9f006597:	ff dc                	call   <internal disassembler error>
9f006599:	e7 ff                	out    0xff,eax
9f00659b:	ff 2b                	jmp    FWORD PTR [ebx]
9f00659d:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f00659e:	ff                   	(bad)  
9f00659f:	ff 04 e8             	inc    DWORD PTR [eax+ebp*8]
9f0065a2:	ff                   	(bad)  
9f0065a3:	ff 51 a6             	call   DWORD PTR [ecx-0x5a]
9f0065a6:	ff                   	(bad)  
9f0065a7:	ff 24 e8             	jmp    DWORD PTR [eax+ebp*8]
9f0065aa:	ff                   	(bad)  
9f0065ab:	ff                   	(bad)  
9f0065ac:	7f a6                	jg     9f006554 <__GNU_EH_FRAME_HDR+0x94>
9f0065ae:	ff                   	(bad)  
9f0065af:	ff 48 e8             	dec    DWORD PTR [eax-0x18]
9f0065b2:	ff                   	(bad)  
9f0065b3:	ff a5 a6 ff ff 68    	jmp    DWORD PTR [ebp+0x68ffffa6]
9f0065b9:	e8 ff ff d2 a6       	call   45d365bd <sysEnter_Vector+0x45c065bd>
9f0065be:	ff                   	(bad)  
9f0065bf:	ff 8c e8 ff ff f5 a6 	dec    DWORD PTR [eax+ebp*8-0x590a0001]
9f0065c6:	ff                   	(bad)  
9f0065c7:	ff ac e8 ff ff ea a9 	jmp    FWORD PTR [eax+ebp*8-0x56150001]
9f0065ce:	ff                   	(bad)  
9f0065cf:	ff d0                	call   eax
9f0065d1:	e8 ff ff 13 aa       	call   491465d5 <sysEnter_Vector+0x490165d5>
9f0065d6:	ff                   	(bad)  
9f0065d7:	ff f4                	push   esp
9f0065d9:	e8 ff ff 33 aa       	call   493465dd <sysEnter_Vector+0x492165dd>
9f0065de:	ff                   	(bad)  
9f0065df:	ff 14 e9             	call   DWORD PTR [ecx+ebp*8]
9f0065e2:	ff                   	(bad)  
9f0065e3:	ff f4                	push   esp
9f0065e5:	ab                   	stos   DWORD PTR es:[edi],eax
9f0065e6:	ff                   	(bad)  
9f0065e7:	ff                   	(bad)  
9f0065e8:	38 e9                	cmp    cl,ch
9f0065ea:	ff                   	(bad)  
9f0065eb:	ff 1c ac             	call   FWORD PTR [esp+ebp*4]
9f0065ee:	ff                   	(bad)  
9f0065ef:	ff 58 e9             	call   FWORD PTR [eax-0x17]
9f0065f2:	ff                   	(bad)  
9f0065f3:	ff 42 ac             	inc    DWORD PTR [edx-0x54]
9f0065f6:	ff                   	(bad)  
9f0065f7:	ff                   	(bad)  
9f0065f8:	7c e9                	jl     9f0065e3 <__GNU_EH_FRAME_HDR+0x123>
9f0065fa:	ff                   	(bad)  
9f0065fb:	ff 85 ac ff ff a0    	inc    DWORD PTR [ebp-0x5f000054]
9f006601:	e9 ff ff c8 ac       	jmp    4bc96605 <sysEnter_Vector+0x4bb66605>
9f006606:	ff                   	(bad)  
9f006607:	ff c4                	inc    esp
9f006609:	e9 ff ff 88 ad       	jmp    4c89660d <sysEnter_Vector+0x4c76660d>
9f00660e:	ff                   	(bad)  
9f00660f:	ff e8                	jmp    <internal disassembler error>
9f006611:	e9 ff ff c2 ad       	jmp    4cc36615 <sysEnter_Vector+0x4cb06615>
9f006616:	ff                   	(bad)  
9f006617:	ff 10                	call   DWORD PTR [eax]
9f006619:	ea ff ff fe ad ff ff 	jmp    0xffff:0xadfeffff
9f006620:	38 ea                	cmp    dl,ch
9f006622:	ff                   	(bad)  
9f006623:	ff                   	(bad)  
9f006624:	3c ae                	cmp    al,0xae
9f006626:	ff                   	(bad)  
9f006627:	ff 60 ea             	jmp    DWORD PTR [eax-0x16]
9f00662a:	ff                   	(bad)  
9f00662b:	ff                   	(bad)  
9f00662c:	7c ae                	jl     9f0065dc <__GNU_EH_FRAME_HDR+0x11c>
9f00662e:	ff                   	(bad)  
9f00662f:	ff 88 ea ff ff be    	dec    DWORD PTR [eax-0x41000016]
9f006635:	ae                   	scas   al,BYTE PTR es:[edi]
9f006636:	ff                   	(bad)  
9f006637:	ff b0 ea ff ff 89    	push   DWORD PTR [eax-0x76000016]
9f00663d:	af                   	scas   eax,DWORD PTR es:[edi]
9f00663e:	ff                   	(bad)  
9f00663f:	ff d4                	call   esp
9f006641:	ea ff ff ac af ff ff 	jmp    0xffff:0xafacffff
9f006648:	f8                   	clc    
9f006649:	ea ff ff 05 b0 ff ff 	jmp    0xffff:0xb005ffff
9f006650:	1c eb                	sbb    al,0xeb
9f006652:	ff                   	(bad)  
9f006653:	ff 59 b0             	call   FWORD PTR [ecx-0x50]
9f006656:	ff                   	(bad)  
9f006657:	ff 40 eb             	inc    DWORD PTR [eax-0x15]
9f00665a:	ff                   	(bad)  
9f00665b:	ff ad b0 ff ff 64    	jmp    FWORD PTR [ebp+0x64ffffb0]
9f006661:	eb ff                	jmp    9f006662 <__GNU_EH_FRAME_HDR+0x1a2>
9f006663:	ff e1                	jmp    ecx
9f006665:	b0 ff                	mov    al,0xff
9f006667:	ff 84 eb ff ff 18 b1 	inc    DWORD PTR [ebx+ebp*8-0x4ee70001]
9f00666e:	ff                   	(bad)  
9f00666f:	ff a4 eb ff ff 4f b1 	jmp    DWORD PTR [ebx+ebp*8-0x4eb00001]
9f006676:	ff                   	(bad)  
9f006677:	ff c4                	inc    esp
9f006679:	eb ff                	jmp    9f00667a <__GNU_EH_FRAME_HDR+0x1ba>
9f00667b:	ff                   	(bad)  
9f00667c:	bf b1 ff ff ec       	mov    edi,0xecffffb1
9f006681:	eb ff                	jmp    9f006682 <__GNU_EH_FRAME_HDR+0x1c2>
9f006683:	ff 2f                	jmp    FWORD PTR [edi]
9f006685:	b2 ff                	mov    dl,0xff
9f006687:	ff 14 ec             	call   DWORD PTR [esp+ebp*8]
9f00668a:	ff                   	(bad)  
9f00668b:	ff 4c b2 ff          	dec    DWORD PTR [edx+esi*4-0x1]
9f00668f:	ff 34 ec             	push   DWORD PTR [esp+ebp*8]
9f006692:	ff                   	(bad)  
9f006693:	ff 75 b2             	push   DWORD PTR [ebp-0x4e]
9f006696:	ff                   	(bad)  
9f006697:	ff 54 ec ff          	call   DWORD PTR [esp+ebp*8-0x1]
9f00669b:	ff 9e b2 ff ff 74    	call   FWORD PTR [esi+0x74ffffb2]
9f0066a1:	ec                   	in     al,dx
9f0066a2:	ff                   	(bad)  
9f0066a3:	ff ea                	jmp    <internal disassembler error>
9f0066a5:	b2 ff                	mov    dl,0xff
9f0066a7:	ff 94 ec ff ff de b4 	call   DWORD PTR [esp+ebp*8-0x4b210001]
9f0066ae:	ff                   	(bad)  
9f0066af:	ff                   	(bad)  
9f0066b0:	b8 ec ff ff 2d       	mov    eax,0x2dffffec
9f0066b5:	b5 ff                	mov    ch,0xff
9f0066b7:	ff d8                	call   <internal disassembler error>
9f0066b9:	ec                   	in     al,dx
9f0066ba:	ff                   	(bad)  
9f0066bb:	ff 49 b5             	dec    DWORD PTR [ecx-0x4b]
9f0066be:	ff                   	(bad)  
9f0066bf:	ff                   	(bad)  
9f0066c0:	f8                   	clc    
9f0066c1:	ec                   	in     al,dx
9f0066c2:	ff                   	(bad)  
9f0066c3:	ff 69 b5             	jmp    FWORD PTR [ecx-0x4b]
9f0066c6:	ff                   	(bad)  
9f0066c7:	ff 18                	call   FWORD PTR [eax]
9f0066c9:	ed                   	in     eax,dx
9f0066ca:	ff                   	(bad)  
9f0066cb:	ff 89 b5 ff ff 38    	dec    DWORD PTR [ecx+0x38ffffb5]
9f0066d1:	ed                   	in     eax,dx
9f0066d2:	ff                   	(bad)  
9f0066d3:	ff cd                	dec    ebp
9f0066d5:	b6 ff                	mov    dh,0xff
9f0066d7:	ff 58 ed             	call   FWORD PTR [eax-0x13]
9f0066da:	ff                   	(bad)  
9f0066db:	ff ed                	jmp    <internal disassembler error>
9f0066dd:	b6 ff                	mov    dh,0xff
9f0066df:	ff                   	(bad)  
9f0066e0:	78 ed                	js     9f0066cf <__GNU_EH_FRAME_HDR+0x20f>
9f0066e2:	ff                   	(bad)  
9f0066e3:	ff ea                	jmp    <internal disassembler error>
9f0066e5:	b9 ff ff a4 ed       	mov    ecx,0xeda4ffff
9f0066ea:	ff                   	(bad)  
9f0066eb:	ff 0d ba ff ff c4    	dec    DWORD PTR ds:0xc4ffffba
9f0066f1:	ed                   	in     eax,dx
9f0066f2:	ff                   	(bad)  
9f0066f3:	ff 30                	push   DWORD PTR [eax]
9f0066f5:	ba ff ff e4 ed       	mov    edx,0xede4ffff
9f0066fa:	ff                   	(bad)  
9f0066fb:	ff a4 ba ff ff 08 ee 	jmp    DWORD PTR [edx+edi*4-0x11f70001]
9f006702:	ff                   	(bad)  
9f006703:	ff 10                	call   DWORD PTR [eax]
9f006705:	bb ff ff 2c ee       	mov    ebx,0xee2cffff
9f00670a:	ff                   	(bad)  
9f00670b:	ff 97 bb ff ff 4c    	call   DWORD PTR [edi+0x4cffffbb]
9f006711:	ee                   	out    dx,al
9f006712:	ff                   	(bad)  
9f006713:	ff f2                	push   edx
9f006715:	bb ff ff 6c ee       	mov    ebx,0xee6cffff
9f00671a:	ff                   	(bad)  
9f00671b:	ff 6c bc ff          	jmp    FWORD PTR [esp+edi*4-0x1]
9f00671f:	ff 8c ee ff ff cf bc 	dec    DWORD PTR [esi+ebp*8-0x43300001]
9f006726:	ff                   	(bad)  
9f006727:	ff b0 ee ff ff 51    	push   DWORD PTR [eax+0x51ffffee]
9f00672d:	bf ff ff d4 ee       	mov    edi,0xeed4ffff
9f006732:	ff                   	(bad)  
9f006733:	ff 71 bf             	push   DWORD PTR [ecx-0x41]
9f006736:	ff                   	(bad)  
9f006737:	ff f4                	push   esp
9f006739:	ee                   	out    dx,al
9f00673a:	ff                   	(bad)  
9f00673b:	ff 49 c0             	dec    DWORD PTR [ecx-0x40]
9f00673e:	ff                   	(bad)  
9f00673f:	ff 18                	call   FWORD PTR [eax]
9f006741:	ef                   	out    dx,eax
9f006742:	ff                   	(bad)  
9f006743:	ff 6c c0 ff          	jmp    FWORD PTR [eax+eax*8-0x1]
9f006747:	ff                   	(bad)  
9f006748:	38 ef                	cmp    bh,ch
9f00674a:	ff                   	(bad)  
9f00674b:	ff 87 c0 ff ff 58    	inc    DWORD PTR [edi+0x58ffffc0]
9f006751:	ef                   	out    dx,eax
9f006752:	ff                   	(bad)  
9f006753:	ff                   	(bad)  
9f006754:	bc c0 ff ff 7c       	mov    esp,0x7cffffc0
9f006759:	ef                   	out    dx,eax
9f00675a:	ff                   	(bad)  
9f00675b:	ff 57 c2             	call   DWORD PTR [edi-0x3e]
9f00675e:	ff                   	(bad)  
9f00675f:	ff 9c ef ff ff 78 c2 	call   FWORD PTR [edi+ebp*8-0x3d870001]
9f006766:	ff                   	(bad)  
9f006767:	ff                   	(bad)  
9f006768:	bc ef ff ff 3f       	mov    esp,0x3fffffef
9f00676d:	c3                   	ret    
9f00676e:	ff                   	(bad)  
9f00676f:	ff dc                	call   <internal disassembler error>
9f006771:	ef                   	out    dx,eax
9f006772:	ff                   	(bad)  
9f006773:	ff 60 c3             	jmp    DWORD PTR [eax-0x3d]
9f006776:	ff                   	(bad)  
9f006777:	ff                   	(bad)  
9f006778:	fc                   	cld    
9f006779:	ef                   	out    dx,eax
9f00677a:	ff                   	(bad)  
9f00677b:	ff 89 c3 ff ff 20    	dec    DWORD PTR [ecx+0x20ffffc3]
9f006781:	f0 ff                	lock (bad) 
9f006783:	ff                   	(bad)  
9f006784:	b8 c3 ff ff 44       	mov    eax,0x44ffffc3
9f006789:	f0 ff                	lock (bad) 
9f00678b:	ff 17                	call   DWORD PTR [edi]
9f00678d:	c4                   	(bad)  
9f00678e:	ff                   	(bad)  
9f00678f:	ff 68 f0             	jmp    FWORD PTR [eax-0x10]
9f006792:	ff                   	(bad)  
9f006793:	ff 55 c6             	call   DWORD PTR [ebp-0x3a]
9f006796:	ff                   	(bad)  
9f006797:	ff 94 f0 ff ff 9d ca 	call   DWORD PTR [eax+esi*8-0x35620001]
9f00679e:	ff                   	(bad)  
9f00679f:	ff                   	(bad)  
9f0067a0:	b8 f0 ff ff d0       	mov    eax,0xd0fffff0
9f0067a5:	ca ff ff             	retf   0xffff
9f0067a8:	d8 f0                	fdiv   st,st(0)
9f0067aa:	ff                   	(bad)  
9f0067ab:	ff 54 cb ff          	call   DWORD PTR [ebx+ecx*8-0x1]
9f0067af:	ff                   	(bad)  
9f0067b0:	fc                   	cld    
9f0067b1:	f0 ff                	lock (bad) 
9f0067b3:	ff 92 cb ff ff 20    	call   DWORD PTR [edx+0x20ffffcb]
9f0067b9:	f1                   	icebp  
9f0067ba:	ff                   	(bad)  
9f0067bb:	ff d0                	call   eax
9f0067bd:	cb                   	retf   
9f0067be:	ff                   	(bad)  
9f0067bf:	ff 44 f1 ff          	inc    DWORD PTR [ecx+esi*8-0x1]
9f0067c3:	ff                   	(bad)  
9f0067c4:	3f                   	aas    
9f0067c5:	cc                   	int3   
9f0067c6:	ff                   	(bad)  
9f0067c7:	ff 68 f1             	jmp    FWORD PTR [eax-0xf]
9f0067ca:	ff                   	(bad)  
9f0067cb:	ff 68 cc             	jmp    FWORD PTR [eax-0x34]
9f0067ce:	ff                   	(bad)  
9f0067cf:	ff 88 f1 ff ff c6    	dec    DWORD PTR [eax-0x3900000f]
9f0067d5:	cc                   	int3   
9f0067d6:	ff                   	(bad)  
9f0067d7:	ff b0 f1 ff ff e4    	push   DWORD PTR [eax-0x1b00000f]
9f0067dd:	cc                   	int3   
9f0067de:	ff                   	(bad)  
9f0067df:	ff d0                	call   eax
9f0067e1:	f1                   	icebp  
9f0067e2:	ff                   	(bad)  
9f0067e3:	ff 24 cd ff ff f0 f1 	jmp    DWORD PTR [ecx*8-0xe0f0001]
9f0067ea:	ff                   	(bad)  
9f0067eb:	ff 64 cd ff          	jmp    DWORD PTR [ebp+ecx*8-0x1]
9f0067ef:	ff 10                	call   DWORD PTR [eax]
9f0067f1:	f2 ff                	repnz (bad) 
9f0067f3:	ff ac cd ff ff 30 f2 	jmp    FWORD PTR [ebp+ecx*8-0xdcf0001]
9f0067fa:	ff                   	(bad)  
9f0067fb:	ff dc                	call   <internal disassembler error>
9f0067fd:	cd ff                	int    0xff
9f0067ff:	ff 50 f2             	call   DWORD PTR [eax-0xe]
9f006802:	ff                   	(bad)  
9f006803:	ff                   	(bad)  
9f006804:	38 ce                	cmp    dh,cl
9f006806:	ff                   	(bad)  
9f006807:	ff 70 f2             	push   DWORD PTR [eax-0xe]
9f00680a:	ff                   	(bad)  
9f00680b:	ff 69 ce             	jmp    FWORD PTR [ecx-0x32]
9f00680e:	ff                   	(bad)  
9f00680f:	ff 90 f2 ff ff 83    	call   DWORD PTR [eax-0x7c00000e]
9f006815:	ce                   	into   
9f006816:	ff                   	(bad)  
9f006817:	ff b0 f2 ff ff bc    	push   DWORD PTR [eax-0x4300000e]
9f00681d:	ce                   	into   
9f00681e:	ff                   	(bad)  
9f00681f:	ff d0                	call   eax
9f006821:	f2 ff                	repnz (bad) 
9f006823:	ff dc                	call   <internal disassembler error>
9f006825:	ce                   	into   
9f006826:	ff                   	(bad)  
9f006827:	ff f0                	push   eax
9f006829:	f2 ff                	repnz (bad) 
9f00682b:	ff 43 cf             	inc    DWORD PTR [ebx-0x31]
9f00682e:	ff                   	(bad)  
9f00682f:	ff 10                	call   DWORD PTR [eax]
9f006831:	f3 ff                	repz (bad) 
9f006833:	ff ac cf ff ff 30 f3 	jmp    FWORD PTR [edi+ecx*8-0xccf0001]
9f00683a:	ff                   	(bad)  
9f00683b:	ff 18                	call   FWORD PTR [eax]
9f00683d:	d0 ff                	sar    bh,1
9f00683f:	ff 50 f3             	call   DWORD PTR [eax-0xd]
9f006842:	ff                   	(bad)  
9f006843:	ff                   	(bad)  
9f006844:	38 d0                	cmp    al,dl
9f006846:	ff                   	(bad)  
9f006847:	ff 70 f3             	push   DWORD PTR [eax-0xd]
9f00684a:	ff                   	(bad)  
9f00684b:	ff                   	(bad)  
9f00684c:	b8 d1 ff ff a0       	mov    eax,0xa0ffffd1
9f006851:	f3 ff                	repz (bad) 
9f006853:	ff d8                	call   <internal disassembler error>
9f006855:	d1 ff                	sar    edi,1
9f006857:	ff c0                	inc    eax
9f006859:	f3 ff                	repz (bad) 
9f00685b:	ff 74 d3 ff          	push   DWORD PTR [ebx+edx*8-0x1]
9f00685f:	ff f0                	push   eax
9f006861:	f3 ff                	repz (bad) 
9f006863:	ff 0a                	dec    DWORD PTR [edx]
9f006865:	d4 ff                	aam    0xff
9f006867:	ff 14 f4             	call   DWORD PTR [esp+esi*8]
9f00686a:	ff                   	(bad)  
9f00686b:	ff 2c d4             	jmp    FWORD PTR [esp+edx*8]
9f00686e:	ff                   	(bad)  
9f00686f:	ff 34 f4             	push   DWORD PTR [esp+esi*8]
9f006872:	ff                   	(bad)  
9f006873:	ff 6f d5             	jmp    FWORD PTR [edi-0x2b]
9f006876:	ff                   	(bad)  
9f006877:	ff 60 f4             	jmp    DWORD PTR [eax-0xc]
9f00687a:	ff                   	(bad)  
9f00687b:	ff 98 d5 ff ff 80    	call   FWORD PTR [eax-0x7f00002b]
9f006881:	f4                   	hlt    
9f006882:	ff                   	(bad)  
9f006883:	ff 36                	push   DWORD PTR [esi]
9f006885:	d6                   	(bad)  
9f006886:	ff                   	(bad)  
9f006887:	ff a8 f4 ff ff a4    	jmp    FWORD PTR [eax-0x5b00000c]
9f00688d:	d6                   	(bad)  
9f00688e:	ff                   	(bad)  
9f00688f:	ff d0                	call   eax
9f006891:	f4                   	hlt    
9f006892:	ff                   	(bad)  
9f006893:	ff c4                	inc    esp
9f006895:	d6                   	(bad)  
9f006896:	ff                   	(bad)  
9f006897:	ff f0                	push   eax
9f006899:	f4                   	hlt    
9f00689a:	ff                   	(bad)  
9f00689b:	ff 08                	dec    DWORD PTR [eax]
9f00689d:	d7                   	xlat   BYTE PTR ds:[ebx]
9f00689e:	ff                   	(bad)  
9f00689f:	ff 18                	call   FWORD PTR [eax]
9f0068a1:	f5                   	cmc    
9f0068a2:	ff                   	(bad)  
9f0068a3:	ff 21                	jmp    DWORD PTR [ecx]
9f0068a5:	da ff                	(bad)  
9f0068a7:	ff 40 f5             	inc    DWORD PTR [eax-0xb]
9f0068aa:	ff                   	(bad)  
9f0068ab:	ff                   	(bad)  
9f0068ac:	3e                   	ds
9f0068ad:	da ff                	(bad)  
9f0068af:	ff 60 f5             	jmp    DWORD PTR [eax-0xb]
9f0068b2:	ff                   	(bad)  
9f0068b3:	ff                   	(bad)  
9f0068b4:	7b da                	jnp    9f006890 <__GNU_EH_FRAME_HDR+0x3d0>
9f0068b6:	ff                   	(bad)  
9f0068b7:	ff 80 f5 ff ff b0    	inc    DWORD PTR [eax-0x4f00000b]
9f0068bd:	da ff                	(bad)  
9f0068bf:	ff a0 f5 ff ff cd    	jmp    DWORD PTR [eax-0x3200000b]
9f0068c5:	da ff                	(bad)  
9f0068c7:	ff c0                	inc    eax
9f0068c9:	f5                   	cmc    
9f0068ca:	ff                   	(bad)  
9f0068cb:	ff 24 e3             	jmp    DWORD PTR [ebx+eiz*8]
9f0068ce:	ff                   	(bad)  
9f0068cf:	ff f0                	push   eax
9f0068d1:	f5                   	cmc    
9f0068d2:	ff                   	(bad)  
9f0068d3:	ff 91 e3 ff ff 18    	call   DWORD PTR [ecx+0x18ffffe3]
9f0068d9:	f6 ff                	idiv   bh
9f0068db:	ff d2                	call   edx
9f0068dd:	e3 ff                	jecxz  9f0068de <__GNU_EH_FRAME_HDR+0x41e>
9f0068df:	ff 70 e4             	push   DWORD PTR [eax-0x1c]
9f0068e2:	ff                   	(bad)  
9f0068e3:	ff 10                	call   DWORD PTR [eax]
9f0068e5:	e4 ff                	in     al,0xff
9f0068e7:	ff 24 e5 ff ff 14 e4 	jmp    DWORD PTR [eiz*8-0x1beb0001]
9f0068ee:	ff                   	(bad)  
9f0068ef:	ff                   	(bad)  
9f0068f0:	3c f6                	cmp    al,0xf6
9f0068f2:	ff                   	(bad)  
9f0068f3:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f006900 <ansiEscSeq>:
9f006900:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f006903:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006905:	48                   	dec    eax
9f006906:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f00690c:	75 00                	jne    9f00690e <ansiEscSeq+0xe>
9f00690e:	3d 00 50 41 54       	cmp    eax,0x54415000
9f006913:	48                   	dec    eax
9f006914:	00 2f                	add    BYTE PTR [edi],ch
9f006916:	00 0a                	add    BYTE PTR [edx],cl
9f006918:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f00691b:	72 65                	jb     9f006982 <ansiEscSeq+0x82>
9f00691d:	61                   	popa   
9f00691e:	6d                   	ins    DWORD PTR es:[edi],dx
9f00691f:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f006925:	74 20                	je     9f006947 <ansiEscSeq+0x47>
9f006927:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f00692e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00692f:	74 65                	je     9f006996 <ansiEscSeq+0x96>
9f006931:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f006934:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006936:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f00693a:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f00693d:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00693e:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f006945:	65 
9f006946:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f006949:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00694b:	00 2a                	add    BYTE PTR [edx],ch
9f00694d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00694f:	6c                   	ins    BYTE PTR es:[edi],dx
9f006950:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f006957:	74 20                	je     9f006979 <ansiEscSeq+0x79>
9f006959:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00695c:	70 6c                	jo     9f0069ca <ansiEscSeq+0xca>
9f00695e:	65                   	gs
9f00695f:	74 65                	je     9f0069c6 <ansiEscSeq+0xc6>
9f006961:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f006964:	6c                   	ins    BYTE PTR es:[edi],dx
9f006965:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00696c:	74 20                	je     9f00698e <ansiEscSeq+0x8e>
9f00696e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f006971:	6c                   	ins    BYTE PTR es:[edi],dx
9f006972:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f006977:	65                   	gs
9f006978:	76 69                	jbe    9f0069e3 <ansiEscSeq+0xe3>
9f00697a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00697b:	75 73                	jne    9f0069f0 <ansiEscSeq+0xf0>
9f00697d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00697e:	79 2c                	jns    9f0069ac <ansiEscSeq+0xac>
9f006980:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f006983:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f00698a:	6c 
9f00698b:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f006992:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f006995:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006997:	72 20                	jb     9f0069b9 <ansiEscSeq+0xb9>
9f006999:	25 73 0a 00 20       	and    eax,0x20000a73
9f00699e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0069a2:	63 3a                	arpl   WORD PTR [edx],di
9f0069a4:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f0069a7:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f0069ab:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0069ad:	72 20                	jb     9f0069cf <ansiEscSeq+0xcf>
9f0069af:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f0069b4:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f0069bb:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f0069bf:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0069c1:	72 20                	jb     9f0069e3 <ansiEscSeq+0xe3>
9f0069c3:	25 73 0a 00 00       	and    eax,0xa73
9f0069c8:	68 65 61 70 42       	push   0x42706165
9f0069cd:	61                   	popa   
9f0069ce:	73 65                	jae    9f006a35 <ansiEscSeq+0x135>
9f0069d0:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f0069d3:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f0069d6:	30 38                	xor    BYTE PTR [eax],bh
9f0069d8:	58                   	pop    eax
9f0069d9:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f0069df:	30 38                	xor    BYTE PTR [eax],bh
9f0069e1:	58                   	pop    eax
9f0069e2:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f0069e5:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0069e7:	72 65                	jb     9f006a4e <ansiEscSeq+0x14e>
9f0069e9:	0a 00                	or     al,BYTE PTR [eax]
9f0069eb:	00 0a                	add    BYTE PTR [edx],cl
9f0069ed:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069ef:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069f1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069f3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069f5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069f7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069f9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069fb:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069fd:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0069ff:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a01:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a03:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a05:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a07:	6d                   	ins    DWORD PTR es:[edi],dx
9f006a08:	61                   	popa   
9f006a09:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a0a:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a0b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a0c:	63 20                	arpl   WORD PTR [eax],sp
9f006a0e:	65                   	gs
9f006a0f:	72 72                	jb     9f006a83 <ansiEscSeq+0x183>
9f006a11:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a12:	72 21                	jb     9f006a35 <ansiEscSeq+0x135>
9f006a14:	21 21                	and    DWORD PTR [ecx],esp
9f006a16:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a18:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a1a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a1c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a1e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a20:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a22:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a24:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a26:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a28:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a2a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a2c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a2e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f006a30:	0a 00                	or     al,BYTE PTR [eax]
9f006a32:	00 00                	add    BYTE PTR [eax],al
9f006a34:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a35:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006a3c:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a3d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a3e:	63 3a                	arpl   WORD PTR [edx],di
9f006a40:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006a43:	71 75                	jno    9f006aba <ansiEscSeq+0x1ba>
9f006a45:	65                   	gs
9f006a46:	73 74                	jae    9f006abc <ansiEscSeq+0x1bc>
9f006a48:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f006a4b:	72 20                	jb     9f006a6d <ansiEscSeq+0x16d>
9f006a4d:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006a50:	30 38                	xor    BYTE PTR [eax],bh
9f006a52:	78 20                	js     9f006a74 <ansiEscSeq+0x174>
9f006a54:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f006a57:	65                   	gs
9f006a58:	73 0a                	jae    9f006a64 <ansiEscSeq+0x164>
9f006a5a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006a5e:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f006a61:	61                   	popa   
9f006a62:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a63:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a64:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a65:	63 3a                	arpl   WORD PTR [edx],di
9f006a67:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006a6a:	65                   	gs
9f006a6b:	64                   	fs
9f006a6c:	65                   	gs
9f006a6d:	64                   	fs
9f006a6e:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006a73:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006a76:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006a7a:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f006a7d:	61                   	popa   
9f006a7e:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a7f:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a80:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a81:	63 3a                	arpl   WORD PTR [edx],di
9f006a83:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f006a86:	61                   	popa   
9f006a87:	45                   	inc    ebp
9f006a88:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a89:	64                   	fs
9f006a8a:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006a8f:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006a92:	00 00                	add    BYTE PTR [eax],al
9f006a94:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a95:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006a9c:	6c                   	ins    BYTE PTR es:[edi],dx
9f006a9d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a9e:	63 3a                	arpl   WORD PTR [edx],di
9f006aa0:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f006aa3:	71 20                	jno    9f006ac5 <ansiEscSeq+0x1c5>
9f006aa5:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006aa8:	30 38                	xor    BYTE PTR [eax],bh
9f006aaa:	58                   	pop    eax
9f006aab:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f006aae:	74 65                	je     9f006b15 <ansiEscSeq+0x215>
9f006ab0:	73 2c                	jae    9f006ade <ansiEscSeq+0x1de>
9f006ab2:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006ab5:	74 20                	je     9f006ad7 <ansiEscSeq+0x1d7>
9f006ab7:	77 61                	ja     9f006b1a <ansiEscSeq+0x21a>
9f006ab9:	73 20                	jae    9f006adb <ansiEscSeq+0x1db>
9f006abb:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006abe:	30 38                	xor    BYTE PTR [eax],bh
9f006ac0:	58                   	pop    eax
9f006ac1:	2c 20                	sub    al,0x20
9f006ac3:	68 65 61 70 45       	push   0x45706165
9f006ac8:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006ac9:	64                   	fs
9f006aca:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006acf:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f006ad2:	00 00                	add    BYTE PTR [eax],al
9f006ad4:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ad5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006adc:	6c                   	ins    BYTE PTR es:[edi],dx
9f006add:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ade:	63 3a                	arpl   WORD PTR [edx],di
9f006ae0:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f006ae3:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f006aea:	65 
9f006aeb:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f006aef:	61                   	popa   
9f006af0:	70 43                	jo     9f006b35 <ansiEscSeq+0x235>
9f006af2:	75 72                	jne    9f006b66 <ansiEscSeq+0x266>
9f006af4:	72 20                	jb     9f006b16 <ansiEscSeq+0x216>
9f006af6:	61                   	popa   
9f006af7:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006af8:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f006afc:	61                   	popa   
9f006afd:	70 42                	jo     9f006b41 <ansiEscSeq+0x241>
9f006aff:	61                   	popa   
9f006b00:	73 65                	jae    9f006b67 <ansiEscSeq+0x267>
9f006b02:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f006b06:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006b09:	30 38                	xor    BYTE PTR [eax],bh
9f006b0b:	58                   	pop    eax
9f006b0c:	0a 00                	or     al,BYTE PTR [eax]
9f006b0e:	00 00                	add    BYTE PTR [eax],al
9f006b10:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b11:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006b18:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b19:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b1a:	63 3a                	arpl   WORD PTR [edx],di
9f006b1c:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f006b1f:	61                   	popa   
9f006b20:	74 69                	je     9f006b8b <ansiEscSeq+0x28b>
9f006b22:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006b23:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f006b27:	61                   	popa   
9f006b28:	70 20                	jo     9f006b4a <ansiEscSeq+0x24a>
9f006b2a:	72 65                	jb     9f006b91 <ansiEscSeq+0x291>
9f006b2c:	63 20                	arpl   WORD PTR [eax],sp
9f006b2e:	40                   	inc    eax
9f006b2f:	20 30                	and    BYTE PTR [eax],dh
9f006b31:	78 25                	js     9f006b58 <ansiEscSeq+0x258>
9f006b33:	30 38                	xor    BYTE PTR [eax],bh
9f006b35:	58                   	pop    eax
9f006b36:	0a 00                	or     al,BYTE PTR [eax]
9f006b38:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b39:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f006b40:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b41:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b42:	63 3a                	arpl   WORD PTR [edx],di
9f006b44:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f006b47:	61                   	popa   
9f006b48:	70 43                	jo     9f006b8d <ansiEscSeq+0x28d>
9f006b4a:	75 72                	jne    9f006bbe <ansiEscSeq+0x2be>
9f006b4c:	72 3d                	jb     9f006b8b <ansiEscSeq+0x28b>
9f006b4e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f006b51:	30 38                	xor    BYTE PTR [eax],bh
9f006b53:	78 0a                	js     9f006b5f <ansiEscSeq+0x25f>
9f006b55:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f006b58:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b59:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b5a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b5b:	63 3a                	arpl   WORD PTR [edx],di
9f006b5d:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006b60:	74 75                	je     9f006bd7 <ansiEscSeq+0x2d7>
9f006b62:	72 6e                	jb     9f006bd2 <ansiEscSeq+0x2d2>
9f006b64:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f006b6b:	30 38                	xor    BYTE PTR [eax],bh
9f006b6d:	58                   	pop    eax
9f006b6e:	0a 00                	or     al,BYTE PTR [eax]
9f006b70:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b71:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f006b78:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b79:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b7a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b7b:	63 3a                	arpl   WORD PTR [edx],di
9f006b7d:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f006b80:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b81:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b82:	65 64 20 66 6f       	gs and BYTE PTR fs:gs:[esi+0x6f],ah
9f006b87:	72 20                	jb     9f006ba9 <ansiEscSeq+0x2a9>
9f006b89:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b8a:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b8b:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f006b8f:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006b96:	78 25                	js     9f006bbd <ansiEscSeq+0x2bd>
9f006b98:	30 38                	xor    BYTE PTR [eax],bh
9f006b9a:	78 2c                	js     9f006bc8 <ansiEscSeq+0x2c8>
9f006b9c:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006b9f:	77 20                	ja     9f006bc1 <ansiEscSeq+0x2c1>
9f006ba1:	73 69                	jae    9f006c0c <ansiEscSeq+0x30c>
9f006ba3:	7a 65                	jp     9f006c0a <ansiEscSeq+0x30a>
9f006ba5:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006baa:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f006bad:	00 00                	add    BYTE PTR [eax],al
9f006baf:	00 09                	add    BYTE PTR [ecx],cl
9f006bb1:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bb2:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f006bb9:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bba:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bbb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bbc:	63 3a                	arpl   WORD PTR [edx],di
9f006bbe:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f006bc1:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f006bc4:	76 65                	jbe    9f006c2b <ansiEscSeq+0x32b>
9f006bc6:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f006bca:	77 20                	ja     9f006bec <ansiEscSeq+0x2ec>
9f006bcc:	6d                   	ins    DWORD PTR es:[edi],dx
9f006bcd:	61                   	popa   
9f006bce:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bcf:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bd0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bd1:	63 20                	arpl   WORD PTR [eax],sp
9f006bd3:	70 6f                	jo     9f006c44 <ansiEscSeq+0x344>
9f006bd5:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f006bdc:	78 25                	js     9f006c03 <ansiEscSeq+0x303>
9f006bde:	30 38                	xor    BYTE PTR [eax],bh
9f006be0:	78 2c                	js     9f006c0e <ansiEscSeq+0x30e>
9f006be2:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f006be5:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f006be9:	7a 65                	jp     9f006c50 <ansiEscSeq+0x350>
9f006beb:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006bf0:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f006bf3:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f006bf6:	77 20                	ja     9f006c18 <ansiEscSeq+0x318>
9f006bf8:	73 69                	jae    9f006c63 <ansiEscSeq+0x363>
9f006bfa:	7a 65                	jp     9f006c61 <ansiEscSeq+0x361>
9f006bfc:	3d 30 78 25 30       	cmp    eax,0x30257830
9f006c01:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f006c04:	00 00                	add    BYTE PTR [eax],al
9f006c06:	00 00                	add    BYTE PTR [eax],al
9f006c08:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f006c0c:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f006c0f:	65                   	gs
9f006c10:	61                   	popa   
9f006c11:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c12:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c13:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c14:	63 3a                	arpl   WORD PTR [edx],di
9f006c16:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f006c19:	64                   	fs
9f006c1a:	61                   	popa   
9f006c1b:	74 65                	je     9f006c82 <ansiEscSeq+0x382>
9f006c1d:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f006c21:	77 20                	ja     9f006c43 <ansiEscSeq+0x343>
9f006c23:	70 6f                	jo     9f006c94 <ansiEscSeq+0x394>
9f006c25:	69 6e 74 65 72 20 77 	imul   ebp,DWORD PTR [esi+0x74],0x77207265
9f006c2c:	69 74 68 20 6f 6c 64 	imul   esi,DWORD PTR [eax+ebp*2+0x20],0x20646c6f
9f006c33:	20 
9f006c34:	70 6f                	jo     9f006ca5 <ansiEscSeq+0x3a5>
9f006c36:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f006c3d:	61                   	popa   
9f006c3e:	74 61                	je     9f006ca1 <ansiEscSeq+0x3a1>
9f006c40:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f006c43:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f006c47:	65                   	gs
9f006c48:	61                   	popa   
9f006c49:	72 65                	jb     9f006cb0 <ansiEscSeq+0x3b0>
9f006c4b:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f006c4f:	74 20                	je     9f006c71 <ansiEscSeq+0x371>
9f006c51:	72 65                	jb     9f006cb8 <ansiEscSeq+0x3b8>
9f006c53:	6d                   	ins    DWORD PTR es:[edi],dx
9f006c54:	61                   	popa   
9f006c55:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f006c5c:	61                   	popa   
9f006c5d:	70 70                	jo     9f006ccf <ansiEscSeq+0x3cf>
9f006c5f:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c60:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f006c67:	00 51 ba             	add    BYTE PTR [ecx-0x46],dl
9f006c6a:	ff                   	(bad)  
9f006c6b:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c6e:	ff                   	(bad)  
9f006c6f:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c72:	ff                   	(bad)  
9f006c73:	ff 57 ba             	call   DWORD PTR [edi-0x46]
9f006c76:	ff                   	(bad)  
9f006c77:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c7a:	ff                   	(bad)  
9f006c7b:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c7e:	ff                   	(bad)  
9f006c7f:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c82:	ff                   	(bad)  
9f006c83:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c86:	ff                   	(bad)  
9f006c87:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c8a:	ff                   	(bad)  
9f006c8b:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c8e:	ff                   	(bad)  
9f006c8f:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c92:	ff                   	(bad)  
9f006c93:	ff 4b ba             	dec    DWORD PTR [ebx-0x46]
9f006c96:	ff                   	(bad)  
9f006c97:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006c9a:	ff                   	(bad)  
9f006c9b:	ff 45 ba             	inc    DWORD PTR [ebp-0x46]
9f006c9e:	ff                   	(bad)  
9f006c9f:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006ca2:	ff                   	(bad)  
9f006ca3:	ff 63 ba             	jmp    DWORD PTR [ebx-0x46]
9f006ca6:	ff                   	(bad)  
9f006ca7:	ff 5d ba             	call   FWORD PTR [ebp-0x46]
9f006caa:	ff                   	(bad)  
9f006cab:	ff 02                	inc    DWORD PTR [edx]
9f006cad:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cb2:	ff                   	(bad)  
9f006cb3:	ff 2f                	jmp    FWORD PTR [edi]
9f006cb5:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cba:	ff                   	(bad)  
9f006cbb:	ff 2f                	jmp    FWORD PTR [edi]
9f006cbd:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cc2:	ff                   	(bad)  
9f006cc3:	ff 2f                	jmp    FWORD PTR [edi]
9f006cc5:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cca:	ff                   	(bad)  
9f006ccb:	ff 2f                	jmp    FWORD PTR [edi]
9f006ccd:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cd2:	ff                   	(bad)  
9f006cd3:	ff 2f                	jmp    FWORD PTR [edi]
9f006cd5:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cda:	ff                   	(bad)  
9f006cdb:	ff 2f                	jmp    FWORD PTR [edi]
9f006cdd:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006ce2:	ff                   	(bad)  
9f006ce3:	ff 2f                	jmp    FWORD PTR [edi]
9f006ce5:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cea:	ff                   	(bad)  
9f006ceb:	ff 2f                	jmp    FWORD PTR [edi]
9f006ced:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cf2:	ff                   	(bad)  
9f006cf3:	ff 2f                	jmp    FWORD PTR [edi]
9f006cf5:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006cfa:	ff                   	(bad)  
9f006cfb:	ff 2f                	jmp    FWORD PTR [edi]
9f006cfd:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d02:	ff                   	(bad)  
9f006d03:	ff 2f                	jmp    FWORD PTR [edi]
9f006d05:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d0a:	ff                   	(bad)  
9f006d0b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d0d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d12:	ff                   	(bad)  
9f006d13:	ff 2f                	jmp    FWORD PTR [edi]
9f006d15:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d1a:	ff                   	(bad)  
9f006d1b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d1d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d22:	ff                   	(bad)  
9f006d23:	ff 2f                	jmp    FWORD PTR [edi]
9f006d25:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d2a:	ff                   	(bad)  
9f006d2b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d2d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d32:	ff                   	(bad)  
9f006d33:	ff 2f                	jmp    FWORD PTR [edi]
9f006d35:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d3a:	ff                   	(bad)  
9f006d3b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d3d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d42:	ff                   	(bad)  
9f006d43:	ff 2f                	jmp    FWORD PTR [edi]
9f006d45:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d4a:	ff                   	(bad)  
9f006d4b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d4d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d52:	ff                   	(bad)  
9f006d53:	ff 2f                	jmp    FWORD PTR [edi]
9f006d55:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d5a:	ff                   	(bad)  
9f006d5b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d5d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d62:	ff                   	(bad)  
9f006d63:	ff 2f                	jmp    FWORD PTR [edi]
9f006d65:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d6a:	ff                   	(bad)  
9f006d6b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d6d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d72:	ff                   	(bad)  
9f006d73:	ff 2f                	jmp    FWORD PTR [edi]
9f006d75:	bd ff ff 20 bd       	mov    ebp,0xbd20ffff
9f006d7a:	ff                   	(bad)  
9f006d7b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d7d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d82:	ff                   	(bad)  
9f006d83:	ff 2f                	jmp    FWORD PTR [edi]
9f006d85:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d8a:	ff                   	(bad)  
9f006d8b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d8d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d92:	ff                   	(bad)  
9f006d93:	ff 2f                	jmp    FWORD PTR [edi]
9f006d95:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006d9a:	ff                   	(bad)  
9f006d9b:	ff 2f                	jmp    FWORD PTR [edi]
9f006d9d:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006da2:	ff                   	(bad)  
9f006da3:	ff 88 bb ff ff 29    	dec    DWORD PTR [eax+0x29ffffbb]
9f006da9:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006dae:	ff                   	(bad)  
9f006daf:	ff 2f                	jmp    FWORD PTR [edi]
9f006db1:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006db6:	ff                   	(bad)  
9f006db7:	ff 2f                	jmp    FWORD PTR [edi]
9f006db9:	bd ff ff 29 bd       	mov    ebp,0xbd29ffff
9f006dbe:	ff                   	(bad)  
9f006dbf:	ff 2f                	jmp    FWORD PTR [edi]
9f006dc1:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006dc6:	ff                   	(bad)  
9f006dc7:	ff 2f                	jmp    FWORD PTR [edi]
9f006dc9:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006dce:	ff                   	(bad)  
9f006dcf:	ff                   	(bad)  
9f006dd0:	bc bc ff ff 13       	mov    esp,0x13ffffbc
9f006dd5:	bd ff ff 7e bc       	mov    ebp,0xbc7effff
9f006dda:	ff                   	(bad)  
9f006ddb:	ff 2f                	jmp    FWORD PTR [edi]
9f006ddd:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006de2:	ff                   	(bad)  
9f006de3:	ff dd                	call   <internal disassembler error>
9f006de5:	bb ff ff 2f bd       	mov    ebx,0xbd2fffff
9f006dea:	ff                   	(bad)  
9f006deb:	ff 69 bd             	jmp    FWORD PTR [ecx-0x43]
9f006dee:	ff                   	(bad)  
9f006def:	ff 2f                	jmp    FWORD PTR [edi]
9f006df1:	bd ff ff 2f bd       	mov    ebp,0xbd2fffff
9f006df6:	ff                   	(bad)  
9f006df7:	ff 1c bd ff ff 30 31 	call   FWORD PTR [edi*4+0x3130ffff]

9f006dfc <digits.1544>:
9f006dfc:	30 31                	xor    BYTE PTR [ecx],dh
9f006dfe:	32 33                	xor    dh,BYTE PTR [ebx]
9f006e00:	34 35                	xor    al,0x35
9f006e02:	36                   	ss
9f006e03:	37                   	aaa    
9f006e04:	38 39                	cmp    BYTE PTR [ecx],bh
9f006e06:	41                   	inc    ecx
9f006e07:	42                   	inc    edx
9f006e08:	43                   	inc    ebx
9f006e09:	44                   	inc    esp
9f006e0a:	45                   	inc    ebp
9f006e0b:	46                   	inc    esi
	...
9f006e20:	47                   	inc    edi
9f006e21:	4d                   	dec    ebp
9f006e22:	54                   	push   esp
	...

9f006e40 <_ytab>:
9f006e40:	1f                   	pop    ds
9f006e41:	00 00                	add    BYTE PTR [eax],al
9f006e43:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006e46:	00 00                	add    BYTE PTR [eax],al
9f006e48:	1f                   	pop    ds
9f006e49:	00 00                	add    BYTE PTR [eax],al
9f006e4b:	00 1e                	add    BYTE PTR [esi],bl
9f006e4d:	00 00                	add    BYTE PTR [eax],al
9f006e4f:	00 1f                	add    BYTE PTR [edi],bl
9f006e51:	00 00                	add    BYTE PTR [eax],al
9f006e53:	00 1e                	add    BYTE PTR [esi],bl
9f006e55:	00 00                	add    BYTE PTR [eax],al
9f006e57:	00 1f                	add    BYTE PTR [edi],bl
9f006e59:	00 00                	add    BYTE PTR [eax],al
9f006e5b:	00 1f                	add    BYTE PTR [edi],bl
9f006e5d:	00 00                	add    BYTE PTR [eax],al
9f006e5f:	00 1e                	add    BYTE PTR [esi],bl
9f006e61:	00 00                	add    BYTE PTR [eax],al
9f006e63:	00 1f                	add    BYTE PTR [edi],bl
9f006e65:	00 00                	add    BYTE PTR [eax],al
9f006e67:	00 1e                	add    BYTE PTR [esi],bl
9f006e69:	00 00                	add    BYTE PTR [eax],al
9f006e6b:	00 1f                	add    BYTE PTR [edi],bl
9f006e6d:	00 00                	add    BYTE PTR [eax],al
9f006e6f:	00 1f                	add    BYTE PTR [edi],bl
9f006e71:	00 00                	add    BYTE PTR [eax],al
9f006e73:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f006e79:	00 00                	add    BYTE PTR [eax],al
9f006e7b:	00 1e                	add    BYTE PTR [esi],bl
9f006e7d:	00 00                	add    BYTE PTR [eax],al
9f006e7f:	00 1f                	add    BYTE PTR [edi],bl
9f006e81:	00 00                	add    BYTE PTR [eax],al
9f006e83:	00 1e                	add    BYTE PTR [esi],bl
9f006e85:	00 00                	add    BYTE PTR [eax],al
9f006e87:	00 1f                	add    BYTE PTR [edi],bl
9f006e89:	00 00                	add    BYTE PTR [eax],al
9f006e8b:	00 1f                	add    BYTE PTR [edi],bl
9f006e8d:	00 00                	add    BYTE PTR [eax],al
9f006e8f:	00 1e                	add    BYTE PTR [esi],bl
9f006e91:	00 00                	add    BYTE PTR [eax],al
9f006e93:	00 1f                	add    BYTE PTR [edi],bl
9f006e95:	00 00                	add    BYTE PTR [eax],al
9f006e97:	00 1e                	add    BYTE PTR [esi],bl
9f006e99:	00 00                	add    BYTE PTR [eax],al
9f006e9b:	00 1f                	add    BYTE PTR [edi],bl
9f006e9d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f006ea0 <.rel.dyn>:
9f006ea0:	04 71                	add    al,0x71
9f006ea2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006ea8:	08 71 00             	or     BYTE PTR [ecx+0x0],dh
9f006eab:	9f                   	lahf   
9f006eac:	08 00                	or     BYTE PTR [eax],al
9f006eae:	00 00                	add    BYTE PTR [eax],al
9f006eb0:	0c 71                	or     al,0x71
9f006eb2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006eb8:	10 71 00             	adc    BYTE PTR [ecx+0x0],dh
9f006ebb:	9f                   	lahf   
9f006ebc:	08 00                	or     BYTE PTR [eax],al
9f006ebe:	00 00                	add    BYTE PTR [eax],al
9f006ec0:	14 71                	adc    al,0x71
9f006ec2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006ec8:	18 71 00             	sbb    BYTE PTR [ecx+0x0],dh
9f006ecb:	9f                   	lahf   
9f006ecc:	08 00                	or     BYTE PTR [eax],al
9f006ece:	00 00                	add    BYTE PTR [eax],al
9f006ed0:	1c 71                	sbb    al,0x71
9f006ed2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006ed8:	20 71 00             	and    BYTE PTR [ecx+0x0],dh
9f006edb:	9f                   	lahf   
9f006edc:	08 00                	or     BYTE PTR [eax],al
9f006ede:	00 00                	add    BYTE PTR [eax],al
9f006ee0:	24 71                	and    al,0x71
9f006ee2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006ee8:	28 71 00             	sub    BYTE PTR [ecx+0x0],dh
9f006eeb:	9f                   	lahf   
9f006eec:	08 00                	or     BYTE PTR [eax],al
9f006eee:	00 00                	add    BYTE PTR [eax],al
9f006ef0:	2c 71                	sub    al,0x71
9f006ef2:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006ef8:	30 71 00             	xor    BYTE PTR [ecx+0x0],dh
9f006efb:	9f                   	lahf   
9f006efc:	08 00                	or     BYTE PTR [eax],al
9f006efe:	00 00                	add    BYTE PTR [eax],al
9f006f00:	34 71                	xor    al,0x71
9f006f02:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f006f08:	38 71 00             	cmp    BYTE PTR [ecx+0x0],dh
9f006f0b:	9f                   	lahf   
9f006f0c:	08 00                	or     BYTE PTR [eax],al
9f006f0e:	00 00                	add    BYTE PTR [eax],al
9f006f10:	54                   	push   esp
9f006f11:	71 00                	jno    9f006f13 <_ytab+0xd3>
9f006f13:	9f                   	lahf   
9f006f14:	08 00                	or     BYTE PTR [eax],al
9f006f16:	00 00                	add    BYTE PTR [eax],al
9f006f18:	58                   	pop    eax
9f006f19:	71 00                	jno    9f006f1b <_ytab+0xdb>
9f006f1b:	9f                   	lahf   
9f006f1c:	08 00                	or     BYTE PTR [eax],al
9f006f1e:	00 00                	add    BYTE PTR [eax],al
9f006f20:	5c                   	pop    esp
9f006f21:	71 00                	jno    9f006f23 <_ytab+0xe3>
9f006f23:	9f                   	lahf   
9f006f24:	08 00                	or     BYTE PTR [eax],al
9f006f26:	00 00                	add    BYTE PTR [eax],al
9f006f28:	fa                   	cli    
9f006f29:	10 00                	adc    BYTE PTR [eax],al
9f006f2b:	9f                   	lahf   
9f006f2c:	02 2c 00             	add    ch,BYTE PTR [eax+eax*1]
9f006f2f:	00 3a                	add    BYTE PTR [edx],bh
9f006f31:	11 00                	adc    DWORD PTR [eax],eax
9f006f33:	9f                   	lahf   
9f006f34:	02 2c 00             	add    ch,BYTE PTR [eax+eax*1]
9f006f37:	00 63 11             	add    BYTE PTR [ebx+0x11],ah
9f006f3a:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006f40:	7c 11                	jl     9f006f53 <_ytab+0x113>
9f006f42:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006f48:	d7                   	xlat   BYTE PTR ds:[ebx]
9f006f49:	11 00                	adc    DWORD PTR [eax],eax
9f006f4b:	9f                   	lahf   
9f006f4c:	02 2c 00             	add    ch,BYTE PTR [eax+eax*1]
9f006f4f:	00 3a                	add    BYTE PTR [edx],bh
9f006f51:	12 00                	adc    al,BYTE PTR [eax]
9f006f53:	9f                   	lahf   
9f006f54:	02 2c 00             	add    ch,BYTE PTR [eax+eax*1]
9f006f57:	00 71 12             	add    BYTE PTR [ecx+0x12],dh
9f006f5a:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006f60:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f006f61:	12 00                	adc    al,BYTE PTR [eax]
9f006f63:	9f                   	lahf   
9f006f64:	02 2c 00             	add    ch,BYTE PTR [eax+eax*1]
9f006f67:	00 eb                	add    bl,ch
9f006f69:	12 00                	adc    al,BYTE PTR [eax]
9f006f6b:	9f                   	lahf   
9f006f6c:	02 2c 00             	add    ch,BYTE PTR [eax+eax*1]
9f006f6f:	00 2b                	add    BYTE PTR [ebx],ch
9f006f71:	13 00                	adc    eax,DWORD PTR [eax]
9f006f73:	9f                   	lahf   
9f006f74:	02 2c 00             	add    ch,BYTE PTR [eax+eax*1]
9f006f77:	00 6d 13             	add    BYTE PTR [ebp+0x13],ch
9f006f7a:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006f80:	41                   	inc    ecx
9f006f81:	16                   	push   ss
9f006f82:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006f88:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006f89:	16                   	push   ss
9f006f8a:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006f90:	b1 16                	mov    cl,0x16
9f006f92:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006f98:	de 16                	ficom  WORD PTR [esi]
9f006f9a:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006fa0:	52                   	push   edx
9f006fa1:	17                   	pop    ss
9f006fa2:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006fa8:	b7 3b                	mov    bh,0x3b
9f006faa:	00 9f 02 2c 00 00    	add    BYTE PTR [edi+0x2c02],bl
9f006fb0:	1d 48 00 9f 02       	sbb    eax,0x29f0048
9f006fb5:	2c 00                	sub    al,0x0
9f006fb7:	00 50 71             	add    BYTE PTR [eax+0x71],dl
9f006fba:	00 9f 01 17 00 00    	add    BYTE PTR [edi+0x1701],bl
9f006fc0:	48                   	dec    eax
9f006fc1:	71 00                	jno    9f006fc3 <_ytab+0x183>
9f006fc3:	9f                   	lahf   
9f006fc4:	07                   	pop    es
9f006fc5:	2f                   	das    
9f006fc6:	00 00                	add    BYTE PTR [eax],al
9f006fc8:	4c                   	dec    esp
9f006fc9:	71 00                	jno    9f006fcb <_ytab+0x18b>
9f006fcb:	9f                   	lahf   
9f006fcc:	07                   	pop    es
9f006fcd:	4b                   	dec    ebx
	...

Disassembly of section .data:

9f006fe0 <rcsid>:
9f006fe0:	24 48                	and    al,0x48
9f006fe2:	65                   	gs
9f006fe3:	61                   	popa   
9f006fe4:	64                   	fs
9f006fe5:	65                   	gs
9f006fe6:	72 3a                	jb     9f007022 <rcsid+0x42>
9f006fe8:	20 2f                	and    BYTE PTR [edi],ch
9f006fea:	75 73                	jne    9f00705f <_DYNAMIC+0x13>
9f006fec:	65                   	gs
9f006fed:	72 36                	jb     9f007025 <rcsid+0x45>
9f006fef:	2f                   	das    
9f006ff0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ff1:	75 73                	jne    9f007066 <_DYNAMIC+0x1a>
9f006ff3:	74 65                	je     9f00705a <_DYNAMIC+0xe>
9f006ff5:	72 2f                	jb     9f007026 <rcsid+0x46>
9f006ff7:	74 63                	je     9f00705c <_DYNAMIC+0x10>
9f006ff9:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ffa:	2f                   	das    
9f006ffb:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f006ffe:	70 61                	jo     9f007061 <_DYNAMIC+0x15>
9f007000:	74 2f                	je     9f007031 <rcsid+0x51>
9f007002:	52                   	push   edx
9f007003:	43                   	inc    ebx
9f007004:	53                   	push   ebx
9f007005:	2f                   	das    
9f007006:	73 74                	jae    9f00707c <_DYNAMIC+0x30>
9f007008:	72 73                	jb     9f00707d <_DYNAMIC+0x31>
9f00700a:	74 72                	je     9f00707e <_DYNAMIC+0x32>
9f00700c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f007010:	20 31                	and    BYTE PTR [ecx],dh
9f007012:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f007015:	39 33                	cmp    DWORD PTR [ebx],esi
9f007017:	2f                   	das    
9f007018:	30 33                	xor    BYTE PTR [ebx],dh
9f00701a:	2f                   	das    
9f00701b:	31 39                	xor    DWORD PTR [ecx],edi
9f00701d:	20 31                	and    BYTE PTR [ecx],dh
9f00701f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f007024:	34 30                	xor    al,0x30
9f007026:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f007029:	73 74                	jae    9f00709f <_DYNAMIC+0x53>
9f00702b:	65                   	gs
9f00702c:	72 20                	jb     9f00704e <_DYNAMIC+0x2>
9f00702e:	45                   	inc    ebp
9f00702f:	78 70                	js     9f0070a1 <_DYNAMIC+0x55>
9f007031:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f007034:	53                   	push   ebx
9f007035:	50                   	push   eax
9f007036:	52                   	push   edx
9f007037:	49                   	dec    ecx
9f007038:	54                   	push   esp
9f007039:	45                   	inc    ebp
9f00703a:	20 28                	and    BYTE PTR [eax],ch
9f00703c:	42                   	inc    edx
9f00703d:	65                   	gs
9f00703e:	72 6b                	jb     9f0070ab <_DYNAMIC+0x5f>
9f007040:	65                   	gs
9f007041:	6c                   	ins    BYTE PTR es:[edi],dx
9f007042:	65                   	gs
9f007043:	79 29                	jns    9f00706e <_DYNAMIC+0x22>
9f007045:	00 00                	add    BYTE PTR [eax],al
	...

9f007048 <_daylight>:
9f007048:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f00704c <_DYNAMIC>:
9f00704c:	19 00                	sbb    DWORD PTR [eax],eax
9f00704e:	00 00                	add    BYTE PTR [eax],al
9f007050:	50                   	push   eax
9f007051:	71 00                	jno    9f007053 <_DYNAMIC+0x7>
9f007053:	9f                   	lahf   
9f007054:	1b 00                	sbb    eax,DWORD PTR [eax]
9f007056:	00 00                	add    BYTE PTR [eax],al
9f007058:	04 00                	add    al,0x0
9f00705a:	00 00                	add    BYTE PTR [eax],al
9f00705c:	1a 00                	sbb    al,BYTE PTR [eax]
9f00705e:	00 00                	add    BYTE PTR [eax],al
9f007060:	54                   	push   esp
9f007061:	71 00                	jno    9f007063 <_DYNAMIC+0x17>
9f007063:	9f                   	lahf   
9f007064:	1c 00                	sbb    al,0x0
9f007066:	00 00                	add    BYTE PTR [eax],al
9f007068:	04 00                	add    al,0x0
9f00706a:	00 00                	add    BYTE PTR [eax],al
9f00706c:	04 00                	add    al,0x0
9f00706e:	00 00                	add    BYTE PTR [eax],al
9f007070:	34 62                	xor    al,0x62
9f007072:	00 9f 05 00 00 00    	add    BYTE PTR [edi+0x5],bl
9f007078:	f0 5f                	lock pop edi
9f00707a:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f007080:	10 5b 00             	adc    BYTE PTR [ebx+0x0],bl
9f007083:	9f                   	lahf   
9f007084:	0a 00                	or     al,BYTE PTR [eax]
9f007086:	00 00                	add    BYTE PTR [eax],al
9f007088:	43                   	inc    ebx
9f007089:	02 00                	add    al,BYTE PTR [eax]
9f00708b:	00 0b                	add    BYTE PTR [ebx],cl
9f00708d:	00 00                	add    BYTE PTR [eax],al
9f00708f:	00 10                	add    BYTE PTR [eax],dl
9f007091:	00 00                	add    BYTE PTR [eax],al
9f007093:	00 03                	add    BYTE PTR [ebx],al
9f007095:	00 00                	add    BYTE PTR [eax],al
9f007097:	00 3c 71             	add    BYTE PTR [ecx+esi*2],bh
9f00709a:	00 9f 02 00 00 00    	add    BYTE PTR [edi+0x2],bl
9f0070a0:	10 00                	adc    BYTE PTR [eax],al
9f0070a2:	00 00                	add    BYTE PTR [eax],al
9f0070a4:	14 00                	adc    al,0x0
9f0070a6:	00 00                	add    BYTE PTR [eax],al
9f0070a8:	11 00                	adc    DWORD PTR [eax],eax
9f0070aa:	00 00                	add    BYTE PTR [eax],al
9f0070ac:	17                   	pop    ss
9f0070ad:	00 00                	add    BYTE PTR [eax],al
9f0070af:	00 c0                	add    al,al
9f0070b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0070b2:	00 9f 11 00 00 00    	add    BYTE PTR [edi+0x11],bl
9f0070b8:	a0 6e 00 9f 12       	mov    al,ds:0x129f006e
9f0070bd:	00 00                	add    BYTE PTR [eax],al
9f0070bf:	00 20                	add    BYTE PTR [eax],ah
9f0070c1:	01 00                	add    DWORD PTR [eax],eax
9f0070c3:	00 13                	add    BYTE PTR [ebx],dl
9f0070c5:	00 00                	add    BYTE PTR [eax],al
9f0070c7:	00 08                	add    BYTE PTR [eax],cl
9f0070c9:	00 00                	add    BYTE PTR [eax],al
9f0070cb:	00 16                	add    BYTE PTR [esi],dl
9f0070cd:	00 00                	add    BYTE PTR [eax],al
9f0070cf:	00 00                	add    BYTE PTR [eax],al
9f0070d1:	00 00                	add    BYTE PTR [eax],al
9f0070d3:	00 fa                	add    dl,bh
9f0070d5:	ff                   	(bad)  
9f0070d6:	ff 6f 11             	jmp    FWORD PTR [edi+0x11]
	...

Disassembly of section .got:

9f007104 <.got>:
9f007104:	84 71 00             	test   BYTE PTR [ecx+0x0],dh
9f007107:	9f                   	lahf   
9f007108:	9c                   	pushf  
9f007109:	71 00                	jno    9f00710b <_DYNAMIC+0xbf>
9f00710b:	9f                   	lahf   
9f00710c:	60                   	pusha  
9f00710d:	71 00                	jno    9f00710f <_DYNAMIC+0xc3>
9f00710f:	9f                   	lahf   
9f007110:	88 71 00             	mov    BYTE PTR [ecx+0x0],dh
9f007113:	9f                   	lahf   
9f007114:	64                   	fs
9f007115:	71 00                	jno    9f007117 <_DYNAMIC+0xcb>
9f007117:	9f                   	lahf   
9f007118:	68 71 00 9f 98       	push   0x989f0071
9f00711d:	71 00                	jno    9f00711f <_DYNAMIC+0xd3>
9f00711f:	9f                   	lahf   
9f007120:	6c                   	ins    BYTE PTR es:[edi],dx
9f007121:	71 00                	jno    9f007123 <_DYNAMIC+0xd7>
9f007123:	9f                   	lahf   
9f007124:	70 71                	jo     9f007197 <libcInitialized+0x3>
9f007126:	00 9f 74 71 00 9f    	add    BYTE PTR [edi-0x60ff8e8c],bl
9f00712c:	8c 71 00             	mov    WORD PTR [ecx+0x0],?
9f00712f:	9f                   	lahf   
9f007130:	90                   	nop
9f007131:	71 00                	jno    9f007133 <_DYNAMIC+0xe7>
9f007133:	9f                   	lahf   
9f007134:	78 71                	js     9f0071a7 <params+0xb>
9f007136:	00 9f e0 71 00 9f    	add    BYTE PTR [edi-0x60ff8e20],bl

Disassembly of section .got.plt:

9f00713c <_GLOBAL_OFFSET_TABLE_>:
9f00713c:	4c                   	dec    esp
9f00713d:	70 00                	jo     9f00713f <_GLOBAL_OFFSET_TABLE_+0x3>
9f00713f:	9f                   	lahf   
	...
9f007148:	b6 48                	mov    dh,0x48
9f00714a:	00 9f c6 48 00 9f    	add    BYTE PTR [edi-0x60ffb73a],bl

Disassembly of section .init_array:

9f007150 <.init_array>:
9f007150:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f007154 <.fini_array>:
9f007154:	49                   	dec    ecx
9f007155:	14 00                	adc    al,0x0
9f007157:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f007158 <_tzname>:
9f007158:	20 6e 00             	and    BYTE PTR [esi+0x0],ch
9f00715b:	9f                   	lahf   
9f00715c:	20 6e 00             	and    BYTE PTR [esi+0x0],ch
9f00715f:	9f                   	lahf   

Disassembly of section .bss:

9f007160 <filesToCloseCount>:
9f007160:	00 00                	add    BYTE PTR [eax],al
	...

9f007164 <filesToClose>:
9f007164:	00 00                	add    BYTE PTR [eax],al
	...

9f007168 <heapEnd>:
9f007168:	00 00                	add    BYTE PTR [eax],al
	...

9f00716c <heapBase>:
9f00716c:	00 00                	add    BYTE PTR [eax],al
	...

9f007170 <heapCurr>:
9f007170:	00 00                	add    BYTE PTR [eax],al
	...

9f007174 <processEnvp>:
9f007174:	00 00                	add    BYTE PTR [eax],al
	...

9f007178 <libcTZ>:
9f007178:	00 00                	add    BYTE PTR [eax],al
	...

9f00717c <lasts.1539>:
9f00717c:	00 00                	add    BYTE PTR [eax],al
	...

9f007180 <lasts.1547>:
9f007180:	00 00                	add    BYTE PTR [eax],al
	...

9f007184 <resolvePath_envPath>:
9f007184:	00 00                	add    BYTE PTR [eax],al
	...

9f007188 <resolvePath_resPath>:
9f007188:	00 00                	add    BYTE PTR [eax],al
	...

9f00718c <resolvePath_cwd>:
9f00718c:	00 00                	add    BYTE PTR [eax],al
	...

9f007190 <resolvePath_inPath>:
9f007190:	00 00                	add    BYTE PTR [eax],al
	...

9f007194 <libcInitialized>:
9f007194:	00 00                	add    BYTE PTR [eax],al
	...

9f007198 <printBuffer>:
9f007198:	00 00                	add    BYTE PTR [eax],al
	...

9f00719c <params>:
	...

9f0071b4 <lastHRCreated.1564>:
9f0071b4:	00 00                	add    BYTE PTR [eax],al
	...

9f0071b8 <_dstbias>:
	...

9f0071c0 <ticksToWait>:
	...

9f0071e0 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	92                   	xchg   edx,eax
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	ac                   	lods   al,BYTE PTR ds:[esi]
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c 3d 01 00 00 1e 	add    BYTE PTR [edi*1+0x1e000001],cl
      16:	00 00                	add    BYTE PTR [eax],al
      18:	00 00                	add    BYTE PTR [eax],al
      1a:	00 00                	add    BYTE PTR [eax],al
      1c:	9f                   	lahf   
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	8c 00                	mov    WORD PTR [eax],es
      2a:	00 00                	add    BYTE PTR [eax],al
      2c:	02 01                	add    al,BYTE PTR [ecx]
      2e:	06                   	push   es
      2f:	85 00                	test   DWORD PTR [eax],eax
      31:	00 00                	add    BYTE PTR [eax],al
      33:	02 02                	add    al,BYTE PTR [edx]
      35:	05 72 01 00 00       	add    eax,0x172
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
      50:	02 07                	add    al,BYTE PTR [edi]
      52:	19 01                	sbb    DWORD PTR [ecx],eax
      54:	00 00                	add    BYTE PTR [eax],al
      56:	04 0e                	add    al,0xe
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 02                	add    BYTE PTR [edx],al
      5c:	34 61                	xor    al,0x61
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	61                   	popa   
      65:	00 00                	add    BYTE PTR [eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	57                   	push   edi
      6c:	00 00                	add    BYTE PTR [eax],al
      6e:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
      75:	56                   	push   esi
      76:	61                   	popa   
      77:	00 00                	add    BYTE PTR [eax],al
      79:	00 02                	add    BYTE PTR [edx],al
      7b:	04 05                	add    al,0x5
      7d:	05 00 00 00 02       	add    eax,0x2000000
      82:	0c 04                	or     al,0x4
      84:	66 01 00             	add    WORD PTR [eax],ax
      87:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
      8d:	00 06                	add    BYTE PTR [esi],al
      8f:	25 00 00 00 02       	and    eax,0x2000000
      94:	01 02                	add    DWORD PTR [edx],eax
      96:	13 01                	adc    eax,DWORD PTR [ecx]
      98:	00 00                	add    BYTE PTR [eax],al
      9a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      9d:	83 01 00             	add    DWORD PTR [ecx],0x0
      a0:	00 02                	add    BYTE PTR [edx],al
      a2:	04 07                	add    al,0x7
      a4:	5c                   	pop    esp
      a5:	00 00                	add    BYTE PTR [eax],al
      a7:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
      ad:	00 07                	add    BYTE PTR [edi],al
      af:	17                   	pop    ss
      b0:	00 00                	add    BYTE PTR [eax],al
      b2:	00 01                	add    BYTE PTR [ecx],al
      b4:	08 a8 00 00 00 00    	or     BYTE PTR [eax+0x0],ch
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	9f                   	lahf   
      bd:	38 00                	cmp    BYTE PTR [eax],al
      bf:	00 00                	add    BYTE PTR [eax],al
      c1:	01 9c e0 00 00 00 08 	add    DWORD PTR [eax+eiz*8+0x8000000],ebx
      c8:	73 00                	jae    ca <sysEnter_Vector-0x12ff36>
      ca:	01 08                	add    DWORD PTR [eax],ecx
      cc:	88 00                	mov    BYTE PTR [eax],al
      ce:	00 00                	add    BYTE PTR [eax],al
      d0:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      d6:	01 08                	add    DWORD PTR [eax],ecx
      d8:	3a 00                	cmp    al,BYTE PTR [eax]
      da:	00 00                	add    BYTE PTR [eax],al
      dc:	02 91 04 00 07 2c    	add    dl,BYTE PTR [ecx+0x2c070004]
      e2:	01 00                	add    DWORD PTR [eax],eax
      e4:	00 01                	add    BYTE PTR [ecx],al
      e6:	10 a8 00 00 00 38    	adc    BYTE PTR [eax+0x38000000],ch
      ec:	00 00                	add    BYTE PTR [eax],al
      ee:	9f                   	lahf   
      ef:	38 00                	cmp    BYTE PTR [eax],al
      f1:	00 00                	add    BYTE PTR [eax],al
      f3:	01 9c 12 01 00 00 08 	add    DWORD PTR [edx+edx*1+0x8000001],ebx
      fa:	73 00                	jae    fc <sysEnter_Vector-0x12ff04>
      fc:	01 10                	add    DWORD PTR [eax],edx
      fe:	88 00                	mov    BYTE PTR [eax],al
     100:	00 00                	add    BYTE PTR [eax],al
     102:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
     108:	01 10                	add    DWORD PTR [eax],edx
     10a:	3a 00                	cmp    al,BYTE PTR [eax]
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	02 91 04 00 09 a3    	add    dl,BYTE PTR [ecx-0x5cf6fffc]
     114:	00 00                	add    BYTE PTR [eax],al
     116:	00 03                	add    BYTE PTR [ebx],al
     118:	37                   	aaa    
     119:	56                   	push   esi
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
     122:	9f                   	lahf   
     123:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     126:	00 00                	add    BYTE PTR [eax],al
     128:	03 38                	add    edi,DWORD PTR [eax]
     12a:	56                   	push   esi
     12b:	00 00                	add    BYTE PTR [eax],al
     12d:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
     133:	9f                   	lahf   
     134:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     137:	00 00                	add    BYTE PTR [eax],al
     139:	03 39                	add    edi,DWORD PTR [ecx]
     13b:	56                   	push   esi
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
     144:	9f                   	lahf   
     145:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     149:	00 03                	add    BYTE PTR [ebx],al
     14b:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	05 03 78 71 00       	add    eax,0x717803
     155:	9f                   	lahf   
     156:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	04 34                	add    al,0x34
     15d:	67 01 00             	add    DWORD PTR [bx+si],eax
     160:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
     166:	9f                   	lahf   
     167:	05 04 6f 00 00       	add    eax,0x6f04
     16c:	00 09                	add    BYTE PTR [ecx],cl
     16e:	91                   	xchg   ecx,eax
     16f:	00 00                	add    BYTE PTR [eax],al
     171:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     178:	05 03 60 71 00       	add    eax,0x716003
     17d:	9f                   	lahf   
     17e:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     181:	00 00                	add    BYTE PTR [eax],al
     183:	05 58 8f 01 00       	add    eax,0x18f58
     188:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
     18e:	9f                   	lahf   
     18f:	05 04 a8 00 00       	add    eax,0xa804
     194:	00 00                	add    BYTE PTR [eax],al
     196:	d1 01                	rol    DWORD PTR [ecx],1
     198:	00 00                	add    BYTE PTR [eax],al
     19a:	04 00                	add    al,0x0
     19c:	83 00 00             	add    DWORD PTR [eax],0x0
     19f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     1a2:	ac                   	lods   al,BYTE PTR ds:[esi]
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 0c 95 01 00 00 1e 	add    BYTE PTR [edx*4+0x1e000001],cl
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	00 70 00             	add    BYTE PTR [eax+0x0],dh
     1b1:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     1b7:	de 00                	fiadd  WORD PTR [eax]
     1b9:	00 00                	add    BYTE PTR [eax],al
     1bb:	02 01                	add    al,BYTE PTR [ecx]
     1bd:	06                   	push   es
     1be:	8c 00                	mov    WORD PTR [eax],es
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	02 01                	add    al,BYTE PTR [ecx]
     1c4:	06                   	push   es
     1c5:	85 00                	test   DWORD PTR [eax],eax
     1c7:	00 00                	add    BYTE PTR [eax],al
     1c9:	02 02                	add    al,BYTE PTR [edx]
     1cb:	05 72 01 00 00       	add    eax,0x172
     1d0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1d7:	02 08                	add    cl,BYTE PTR [eax]
     1d9:	05 00 00 00 00       	add    eax,0x0
     1de:	02 01                	add    al,BYTE PTR [ecx]
     1e0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     1e6:	02 07                	add    al,BYTE PTR [edi]
     1e8:	19 01                	sbb    DWORD PTR [ecx],eax
     1ea:	00 00                	add    BYTE PTR [eax],al
     1ec:	04 0e                	add    al,0xe
     1ee:	00 00                	add    BYTE PTR [eax],al
     1f0:	00 02                	add    BYTE PTR [edx],al
     1f2:	34 61                	xor    al,0x61
     1f4:	00 00                	add    BYTE PTR [eax],al
     1f6:	00 02                	add    BYTE PTR [edx],al
     1f8:	04 07                	add    al,0x7
     1fa:	61                   	popa   
     1fb:	00 00                	add    BYTE PTR [eax],al
     1fd:	00 02                	add    BYTE PTR [edx],al
     1ff:	08 07                	or     BYTE PTR [edi],al
     201:	57                   	push   edi
     202:	00 00                	add    BYTE PTR [eax],al
     204:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     20b:	56                   	push   esi
     20c:	61                   	popa   
     20d:	00 00                	add    BYTE PTR [eax],al
     20f:	00 02                	add    BYTE PTR [edx],al
     211:	04 05                	add    al,0x5
     213:	05 00 00 00 02       	add    eax,0x2000000
     218:	0c 04                	or     al,0x4
     21a:	66 01 00             	add    WORD PTR [eax],ax
     21d:	00 02                	add    BYTE PTR [edx],al
     21f:	01 02                	add    DWORD PTR [edx],eax
     221:	13 01                	adc    eax,DWORD PTR [ecx]
     223:	00 00                	add    BYTE PTR [eax],al
     225:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     228:	83 01 00             	add    DWORD PTR [ecx],0x0
     22b:	00 02                	add    BYTE PTR [edx],al
     22d:	04 07                	add    al,0x7
     22f:	5c                   	pop    esp
     230:	00 00                	add    BYTE PTR [eax],al
     232:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     238:	00 06                	add    BYTE PTR [esi],al
     23a:	c5 01                	lds    eax,FWORD PTR [ecx]
     23c:	00 00                	add    BYTE PTR [eax],al
     23e:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     244:	70 00                	jo     246 <sysEnter_Vector-0x12fdba>
     246:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     24c:	01 9c fa 00 00 00 07 	add    DWORD PTR [edx+edi*8+0x7000000],ebx
     253:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     254:	0e                   	push   cs
     255:	00 00                	add    BYTE PTR [eax],al
     257:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     25d:	02 91 00 07 bf 01    	add    dl,BYTE PTR [ecx+0x1bf0700]
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     26b:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     271:	01 27                	add    DWORD PTR [edi],esp
     273:	25 00 00 00 01       	and    eax,0x1000000
     278:	51                   	push   ecx
     279:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     27c:	01 27                	add    DWORD PTR [edi],esp
     27e:	9d                   	popf   
     27f:	00 00                	add    BYTE PTR [eax],al
     281:	00 01                	add    BYTE PTR [ecx],al
     283:	56                   	push   esi
     284:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     287:	01 27                	add    DWORD PTR [edi],esp
     289:	9d                   	popf   
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	00 01                	add    BYTE PTR [ecx],al
     28e:	53                   	push   ebx
     28f:	00 06                	add    BYTE PTR [esi],al
     291:	8c 01                	mov    WORD PTR [ecx],es
     293:	00 00                	add    BYTE PTR [eax],al
     295:	01 33                	add    DWORD PTR [ebx],esi
     297:	3a 00                	cmp    al,BYTE PTR [eax]
     299:	00 00                	add    BYTE PTR [eax],al
     29b:	c5 00                	lds    eax,FWORD PTR [eax]
     29d:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     2a3:	01 9c 51 01 00 00 07 	add    DWORD PTR [ecx+edx*2+0x7000001],ebx
     2aa:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     2ab:	0e                   	push   cs
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	01 33                	add    DWORD PTR [ebx],esi
     2b0:	9d                   	popf   
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 02                	add    BYTE PTR [edx],al
     2b5:	91                   	xchg   ecx,eax
     2b6:	00 07                	add    BYTE PTR [edi],al
     2b8:	bf 01 00 00 01       	mov    edi,0x1000001
     2bd:	33 9d 00 00 00 02    	xor    ebx,DWORD PTR [ebp+0x2000000]
     2c3:	91                   	xchg   ecx,eax
     2c4:	04 08                	add    al,0x8
     2c6:	63 00                	arpl   WORD PTR [eax],ax
     2c8:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     2ce:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     2d1:	70 00                	jo     2d3 <sysEnter_Vector-0x12fd2d>
     2d3:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2d9:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     2dc:	73 00                	jae    2de <sysEnter_Vector-0x12fd22>
     2de:	01 35 9d 00 00 00    	add    DWORD PTR ds:0x9d,esi
     2e4:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2e7:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
     2ed:	37                   	aaa    
     2ee:	56                   	push   esi
     2ef:	00 00                	add    BYTE PTR [eax],al
     2f1:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
     2f7:	9f                   	lahf   
     2f8:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
     2fb:	00 00                	add    BYTE PTR [eax],al
     2fd:	03 38                	add    edi,DWORD PTR [eax]
     2ff:	56                   	push   esi
     300:	00 00                	add    BYTE PTR [eax],al
     302:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
     308:	9f                   	lahf   
     309:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
     30c:	00 00                	add    BYTE PTR [eax],al
     30e:	03 39                	add    edi,DWORD PTR [ecx]
     310:	56                   	push   esi
     311:	00 00                	add    BYTE PTR [eax],al
     313:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
     319:	9f                   	lahf   
     31a:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
     31e:	00 03                	add    BYTE PTR [ebx],al
     320:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     323:	00 00                	add    BYTE PTR [eax],al
     325:	05 03 78 71 00       	add    eax,0x717803
     32a:	9f                   	lahf   
     32b:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
     32e:	00 00                	add    BYTE PTR [eax],al
     330:	04 34                	add    al,0x34
     332:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
     333:	01 00                	add    DWORD PTR [eax],eax
     335:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
     33b:	9f                   	lahf   
     33c:	05 04 6f 00 00       	add    eax,0x6f04
     341:	00 09                	add    BYTE PTR [ecx],cl
     343:	91                   	xchg   ecx,eax
     344:	00 00                	add    BYTE PTR [eax],al
     346:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     34d:	05 03 60 71 00       	add    eax,0x716003
     352:	9f                   	lahf   
     353:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
     356:	00 00                	add    BYTE PTR [eax],al
     358:	05 58 ce 01 00       	add    eax,0x1ce58
     35d:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
     363:	9f                   	lahf   
     364:	05 04 9d 00 00       	add    eax,0x9d04
     369:	00 00                	add    BYTE PTR [eax],al
     36b:	c5 01                	lds    eax,FWORD PTR [ecx]
     36d:	00 00                	add    BYTE PTR [eax],al
     36f:	04 00                	add    al,0x0
     371:	0e                   	push   cs
     372:	01 00                	add    DWORD PTR [eax],eax
     374:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     377:	ac                   	lods   al,BYTE PTR ds:[esi]
     378:	00 00                	add    BYTE PTR [eax],al
     37a:	00 0c cd 01 00 00 1e 	add    BYTE PTR [ecx*8+0x1e000001],cl
     381:	00 00                	add    BYTE PTR [eax],al
     383:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     386:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
     38c:	ef                   	out    dx,eax
     38d:	01 00                	add    DWORD PTR [eax],eax
     38f:	00 02                	add    BYTE PTR [edx],al
     391:	01 06                	add    DWORD PTR [esi],eax
     393:	8c 00                	mov    WORD PTR [eax],es
     395:	00 00                	add    BYTE PTR [eax],al
     397:	02 01                	add    al,BYTE PTR [ecx]
     399:	06                   	push   es
     39a:	85 00                	test   DWORD PTR [eax],eax
     39c:	00 00                	add    BYTE PTR [eax],al
     39e:	02 02                	add    al,BYTE PTR [edx]
     3a0:	05 72 01 00 00       	add    eax,0x172
     3a5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ac:	02 08                	add    cl,BYTE PTR [eax]
     3ae:	05 00 00 00 00       	add    eax,0x0
     3b3:	02 01                	add    al,BYTE PTR [ecx]
     3b5:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     3bb:	02 07                	add    al,BYTE PTR [edi]
     3bd:	19 01                	sbb    DWORD PTR [ecx],eax
     3bf:	00 00                	add    BYTE PTR [eax],al
     3c1:	04 0e                	add    al,0xe
     3c3:	00 00                	add    BYTE PTR [eax],al
     3c5:	00 02                	add    BYTE PTR [edx],al
     3c7:	34 61                	xor    al,0x61
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	61                   	popa   
     3d0:	00 00                	add    BYTE PTR [eax],al
     3d2:	00 02                	add    BYTE PTR [edx],al
     3d4:	08 07                	or     BYTE PTR [edi],al
     3d6:	57                   	push   edi
     3d7:	00 00                	add    BYTE PTR [eax],al
     3d9:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     3e0:	56                   	push   esi
     3e1:	61                   	popa   
     3e2:	00 00                	add    BYTE PTR [eax],al
     3e4:	00 02                	add    BYTE PTR [edx],al
     3e6:	04 05                	add    al,0x5
     3e8:	05 00 00 00 02       	add    eax,0x2000000
     3ed:	0c 04                	or     al,0x4
     3ef:	66 01 00             	add    WORD PTR [eax],ax
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	01 02                	add    DWORD PTR [edx],eax
     3f6:	13 01                	adc    eax,DWORD PTR [ecx]
     3f8:	00 00                	add    BYTE PTR [eax],al
     3fa:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3fd:	83 01 00             	add    DWORD PTR [ecx],0x0
     400:	00 02                	add    BYTE PTR [edx],al
     402:	04 07                	add    al,0x7
     404:	5c                   	pop    esp
     405:	00 00                	add    BYTE PTR [eax],al
     407:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     40d:	00 06                	add    BYTE PTR [esi],al
     40f:	09 02                	or     DWORD PTR [edx],eax
     411:	00 00                	add    BYTE PTR [eax],al
     413:	01 28                	add    DWORD PTR [eax],ebp
     415:	9d                   	popf   
     416:	00 00                	add    BYTE PTR [eax],al
     418:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     41b:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     421:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
     428:	73 00                	jae    42a <sysEnter_Vector-0x12fbd6>
     42a:	01 28                	add    DWORD PTR [eax],ebp
     42c:	9d                   	popf   
     42d:	00 00                	add    BYTE PTR [eax],al
     42f:	00 02                	add    BYTE PTR [edx],al
     431:	91                   	xchg   ecx,eax
     432:	00 08                	add    BYTE PTR [eax],cl
     434:	fc                   	cld    
     435:	01 00                	add    DWORD PTR [eax],eax
     437:	00 01                	add    BYTE PTR [ecx],al
     439:	28 9d 00 00 00 02    	sub    BYTE PTR [ebp+0x2000000],bl
     43f:	91                   	xchg   ecx,eax
     440:	04 09                	add    al,0x9
     442:	f6 01 00             	test   BYTE PTR [ecx],0x0
     445:	00 01                	add    BYTE PTR [ecx],al
     447:	2a 9d 00 00 00 05    	sub    bl,BYTE PTR [ebp+0x5000000]
     44d:	03 7c 71 00          	add    edi,DWORD PTR [ecx+esi*2+0x0]
     451:	9f                   	lahf   
     452:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     455:	00 01                	add    BYTE PTR [ecx],al
     457:	2b 3a                	sub    edi,DWORD PTR [edx]
     459:	00 00                	add    BYTE PTR [eax],al
     45b:	00 01                	add    BYTE PTR [ecx],al
     45d:	56                   	push   esi
     45e:	00 06                	add    BYTE PTR [esi],al
     460:	02 02                	add    al,BYTE PTR [edx]
     462:	00 00                	add    BYTE PTR [eax],al
     464:	01 3a                	add    DWORD PTR [edx],edi
     466:	9d                   	popf   
     467:	00 00                	add    BYTE PTR [eax],al
     469:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
     46f:	00 00                	add    BYTE PTR [eax],al
     471:	00 01                	add    BYTE PTR [ecx],al
     473:	9c                   	pushf  
     474:	45                   	inc    ebp
     475:	01 00                	add    DWORD PTR [eax],eax
     477:	00 07                	add    BYTE PTR [edi],al
     479:	73 00                	jae    47b <sysEnter_Vector-0x12fb85>
     47b:	01 3a                	add    DWORD PTR [edx],edi
     47d:	9d                   	popf   
     47e:	00 00                	add    BYTE PTR [eax],al
     480:	00 02                	add    BYTE PTR [edx],al
     482:	91                   	xchg   ecx,eax
     483:	00 08                	add    BYTE PTR [eax],cl
     485:	fc                   	cld    
     486:	01 00                	add    DWORD PTR [eax],eax
     488:	00 01                	add    BYTE PTR [ecx],al
     48a:	3a 9d 00 00 00 02    	cmp    bl,BYTE PTR [ebp+0x2000000]
     490:	91                   	xchg   ecx,eax
     491:	04 09                	add    al,0x9
     493:	f6 01 00             	test   BYTE PTR [ecx],0x0
     496:	00 01                	add    BYTE PTR [ecx],al
     498:	3c 9d                	cmp    al,0x9d
     49a:	00 00                	add    BYTE PTR [eax],al
     49c:	00 05 03 80 71 00    	add    BYTE PTR ds:0x718003,al
     4a2:	9f                   	lahf   
     4a3:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     4a6:	00 01                	add    BYTE PTR [ecx],al
     4a8:	3d 3a 00 00 00       	cmp    eax,0x3a
     4ad:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     4b0:	0b a3 00 00 00 03    	or     esp,DWORD PTR [ebx+0x3000000]
     4b6:	37                   	aaa    
     4b7:	56                   	push   esi
     4b8:	00 00                	add    BYTE PTR [eax],al
     4ba:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
     4c0:	9f                   	lahf   
     4c1:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	03 38                	add    edi,DWORD PTR [eax]
     4c8:	56                   	push   esi
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
     4d1:	9f                   	lahf   
     4d2:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
     4d5:	00 00                	add    BYTE PTR [eax],al
     4d7:	03 39                	add    edi,DWORD PTR [ecx]
     4d9:	56                   	push   esi
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
     4e2:	9f                   	lahf   
     4e3:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
     4e7:	00 03                	add    BYTE PTR [ebx],al
     4e9:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     4ec:	00 00                	add    BYTE PTR [eax],al
     4ee:	05 03 78 71 00       	add    eax,0x717803
     4f3:	9f                   	lahf   
     4f4:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
     4f7:	00 00                	add    BYTE PTR [eax],al
     4f9:	04 34                	add    al,0x34
     4fb:	9a 01 00 00 05 03 64 	call   0x6403:0x5000001
     502:	71 00                	jno    504 <sysEnter_Vector-0x12fafc>
     504:	9f                   	lahf   
     505:	05 04 6f 00 00       	add    eax,0x6f04
     50a:	00 0b                	add    BYTE PTR [ebx],cl
     50c:	91                   	xchg   ecx,eax
     50d:	00 00                	add    BYTE PTR [eax],al
     50f:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     516:	05 03 60 71 00       	add    eax,0x716003
     51b:	9f                   	lahf   
     51c:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
     51f:	00 00                	add    BYTE PTR [eax],al
     521:	05 58 c2 01 00       	add    eax,0x1c258
     526:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
     52c:	9f                   	lahf   
     52d:	05 04 9d 00 00       	add    eax,0x9d04
     532:	00 00                	add    BYTE PTR [eax],al
     534:	45                   	inc    ebp
     535:	02 00                	add    al,BYTE PTR [eax]
     537:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     53a:	b7 01                	mov    bh,0x1
     53c:	00 00                	add    BYTE PTR [eax],al
     53e:	04 01                	add    al,0x1
     540:	ac                   	lods   al,BYTE PTR ds:[esi]
     541:	00 00                	add    BYTE PTR [eax],al
     543:	00 0c 11             	add    BYTE PTR [ecx+edx*1],cl
     546:	02 00                	add    al,BYTE PTR [eax]
     548:	00 1e                	add    BYTE PTR [esi],bl
     54a:	00 00                	add    BYTE PTR [eax],al
     54c:	00 4c 02 00          	add    BYTE PTR [edx+eax*1+0x0],cl
     550:	9f                   	lahf   
     551:	49                   	dec    ecx
     552:	02 00                	add    al,BYTE PTR [eax]
     554:	00 e1                	add    cl,ah
     556:	02 00                	add    al,BYTE PTR [eax]
     558:	00 02                	add    BYTE PTR [edx],al
     55a:	01 06                	add    DWORD PTR [esi],eax
     55c:	8c 00                	mov    WORD PTR [eax],es
     55e:	00 00                	add    BYTE PTR [eax],al
     560:	02 01                	add    al,BYTE PTR [ecx]
     562:	06                   	push   es
     563:	85 00                	test   DWORD PTR [eax],eax
     565:	00 00                	add    BYTE PTR [eax],al
     567:	02 02                	add    al,BYTE PTR [edx]
     569:	05 72 01 00 00       	add    eax,0x172
     56e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     575:	02 08                	add    cl,BYTE PTR [eax]
     577:	05 00 00 00 00       	add    eax,0x0
     57c:	02 01                	add    al,BYTE PTR [ecx]
     57e:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     584:	02 07                	add    al,BYTE PTR [edi]
     586:	19 01                	sbb    DWORD PTR [ecx],eax
     588:	00 00                	add    BYTE PTR [eax],al
     58a:	04 0e                	add    al,0xe
     58c:	00 00                	add    BYTE PTR [eax],al
     58e:	00 02                	add    BYTE PTR [edx],al
     590:	34 61                	xor    al,0x61
     592:	00 00                	add    BYTE PTR [eax],al
     594:	00 02                	add    BYTE PTR [edx],al
     596:	04 07                	add    al,0x7
     598:	61                   	popa   
     599:	00 00                	add    BYTE PTR [eax],al
     59b:	00 02                	add    BYTE PTR [edx],al
     59d:	08 07                	or     BYTE PTR [edi],al
     59f:	57                   	push   edi
     5a0:	00 00                	add    BYTE PTR [eax],al
     5a2:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     5a9:	56                   	push   esi
     5aa:	61                   	popa   
     5ab:	00 00                	add    BYTE PTR [eax],al
     5ad:	00 02                	add    BYTE PTR [edx],al
     5af:	04 05                	add    al,0x5
     5b1:	05 00 00 00 02       	add    eax,0x2000000
     5b6:	0c 04                	or     al,0x4
     5b8:	66 01 00             	add    WORD PTR [eax],ax
     5bb:	00 02                	add    BYTE PTR [edx],al
     5bd:	01 02                	add    DWORD PTR [edx],eax
     5bf:	13 01                	adc    eax,DWORD PTR [ecx]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     5c6:	83 01 00             	add    DWORD PTR [ecx],0x0
     5c9:	00 02                	add    BYTE PTR [edx],al
     5cb:	04 07                	add    al,0x7
     5cd:	5c                   	pop    esp
     5ce:	00 00                	add    BYTE PTR [eax],al
     5d0:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     5d6:	00 06                	add    BYTE PTR [esi],al
     5d8:	28 02                	sub    BYTE PTR [edx],al
     5da:	00 00                	add    BYTE PTR [eax],al
     5dc:	01 09                	add    DWORD PTR [ecx],ecx
     5de:	4c                   	dec    esp
     5df:	02 00                	add    al,BYTE PTR [eax]
     5e1:	9f                   	lahf   
     5e2:	77 00                	ja     5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     5ed:	73 00                	jae    5ef <sysEnter_Vector-0x12fa11>
     5ef:	01 09                	add    DWORD PTR [ecx],ecx
     5f1:	9d                   	popf   
     5f2:	00 00                	add    BYTE PTR [eax],al
     5f4:	00 02                	add    BYTE PTR [edx],al
     5f6:	91                   	xchg   ecx,eax
     5f7:	00 08                	add    BYTE PTR [eax],cl
     5f9:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     5ff:	00 00                	add    BYTE PTR [eax],al
     601:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     607:	01 0b                	add    DWORD PTR [ebx],ecx
     609:	3a 00                	cmp    al,BYTE PTR [eax]
     60b:	00 00                	add    BYTE PTR [eax],al
     60d:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     613:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     61a:	91                   	xchg   ecx,eax
     61b:	67 00 06 23 02       	add    BYTE PTR ds:0x223,al
     620:	00 00                	add    BYTE PTR [eax],al
     622:	01 15 c3 02 00 9f    	add    DWORD PTR ds:0x9f0002c3,edx
     628:	bb 00 00 00 01       	mov    ebx,0x1000000
     62d:	9c                   	pushf  
     62e:	31 01                	xor    DWORD PTR [ecx],eax
     630:	00 00                	add    BYTE PTR [eax],al
     632:	07                   	pop    es
     633:	6e                   	outs   dx,BYTE PTR ds:[esi]
     634:	00 01                	add    BYTE PTR [ecx],al
     636:	15 3a 00 00 00       	adc    eax,0x3a
     63b:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     641:	01 15 9d 00 00 00    	add    DWORD PTR ds:0x9d,edx
     647:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     64d:	01 17                	add    DWORD PTR [edi],edx
     64f:	3a 00                	cmp    al,BYTE PTR [eax]
     651:	00 00                	add    BYTE PTR [eax],al
     653:	02 91 6c 09 31 02    	add    dl,BYTE PTR [ecx+0x231096c]
     659:	00 00                	add    BYTE PTR [eax],al
     65b:	01 17                	add    DWORD PTR [edi],edx
     65d:	3a 00                	cmp    al,BYTE PTR [eax]
     65f:	00 00                	add    BYTE PTR [eax],al
     661:	02 91 68 00 06 1d    	add    dl,BYTE PTR [ecx+0x1d060068]
     667:	02 00                	add    al,BYTE PTR [eax]
     669:	00 01                	add    BYTE PTR [ecx],al
     66b:	25 7e 03 00 9f       	and    eax,0x9f00037e
     670:	bb 00 00 00 01       	mov    ebx,0x1000000
     675:	9c                   	pushf  
     676:	79 01                	jns    679 <sysEnter_Vector-0x12f987>
     678:	00 00                	add    BYTE PTR [eax],al
     67a:	07                   	pop    es
     67b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     67c:	00 01                	add    BYTE PTR [ecx],al
     67e:	25 3a 00 00 00       	and    eax,0x3a
     683:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     689:	01 25 9d 00 00 00    	add    DWORD PTR ds:0x9d,esp
     68f:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     695:	01 27                	add    DWORD PTR [edi],esp
     697:	3a 00                	cmp    al,BYTE PTR [eax]
     699:	00 00                	add    BYTE PTR [eax],al
     69b:	02 91 6c 09 31 02    	add    dl,BYTE PTR [ecx+0x231096c]
     6a1:	00 00                	add    BYTE PTR [eax],al
     6a3:	01 27                	add    DWORD PTR [edi],esp
     6a5:	3a 00                	cmp    al,BYTE PTR [eax]
     6a7:	00 00                	add    BYTE PTR [eax],al
     6a9:	02 91 68 00 0a bd    	add    dl,BYTE PTR [ecx-0x42f5ff98]
     6af:	0b 00                	or     eax,DWORD PTR [eax]
     6b1:	00 01                	add    BYTE PTR [ecx],al
     6b3:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     6b6:	00 00                	add    BYTE PTR [eax],al
     6b8:	39 04 00             	cmp    DWORD PTR [eax+eax*1],eax
     6bb:	9f                   	lahf   
     6bc:	5c                   	pop    esp
     6bd:	00 00                	add    BYTE PTR [eax],al
     6bf:	00 01                	add    BYTE PTR [ecx],al
     6c1:	9c                   	pushf  
     6c2:	c5 01                	lds    eax,FWORD PTR [ecx]
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	07                   	pop    es
     6c7:	73 74                	jae    73d <sysEnter_Vector-0x12f8c3>
     6c9:	72 00                	jb     6cb <sysEnter_Vector-0x12f935>
     6cb:	01 36                	add    DWORD PTR [esi],esi
     6cd:	9d                   	popf   
     6ce:	00 00                	add    BYTE PTR [eax],al
     6d0:	00 02                	add    BYTE PTR [edx],al
     6d2:	91                   	xchg   ecx,eax
     6d3:	00 08                	add    BYTE PTR [eax],cl
     6d5:	72 65                	jb     73c <sysEnter_Vector-0x12f8c4>
     6d7:	73 00                	jae    6d9 <sysEnter_Vector-0x12f927>
     6d9:	01 38                	add    DWORD PTR [eax],edi
     6db:	3a 00                	cmp    al,BYTE PTR [eax]
     6dd:	00 00                	add    BYTE PTR [eax],al
     6df:	02 91 74 0b 50 04    	add    dl,BYTE PTR [ecx+0x4500b74]
     6e5:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     6eb:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     6ee:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     6f1:	00 00                	add    BYTE PTR [eax],al
     6f3:	00 02                	add    BYTE PTR [edx],al
     6f5:	91                   	xchg   ecx,eax
     6f6:	70 00                	jo     6f8 <sysEnter_Vector-0x12f908>
     6f8:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	00 03                	add    BYTE PTR [ebx],al
     6ff:	37                   	aaa    
     700:	56                   	push   esi
     701:	00 00                	add    BYTE PTR [eax],al
     703:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
     709:	9f                   	lahf   
     70a:	0c 34                	or     al,0x34
     70c:	01 00                	add    DWORD PTR [eax],eax
     70e:	00 03                	add    BYTE PTR [ebx],al
     710:	38 56 00             	cmp    BYTE PTR [esi+0x0],dl
     713:	00 00                	add    BYTE PTR [eax],al
     715:	05 03 70 71 00       	add    eax,0x717003
     71a:	9f                   	lahf   
     71b:	0c 7b                	or     al,0x7b
     71d:	00 00                	add    BYTE PTR [eax],al
     71f:	00 03                	add    BYTE PTR [ebx],al
     721:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
     724:	00 00                	add    BYTE PTR [eax],al
     726:	05 03 68 71 00       	add    eax,0x716803
     72b:	9f                   	lahf   
     72c:	0c 7c                	or     al,0x7c
     72e:	01 00                	add    DWORD PTR [eax],eax
     730:	00 03                	add    BYTE PTR [ebx],al
     732:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
     735:	00 00                	add    BYTE PTR [eax],al
     737:	05 03 78 71 00       	add    eax,0x717803
     73c:	9f                   	lahf   
     73d:	0c 6e                	or     al,0x6e
     73f:	00 00                	add    BYTE PTR [eax],al
     741:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     744:	1a 02                	sbb    al,BYTE PTR [edx]
     746:	00 00                	add    BYTE PTR [eax],al
     748:	05 03 64 71 00       	add    eax,0x716403
     74d:	9f                   	lahf   
     74e:	05 04 6f 00 00       	add    eax,0x6f04
     753:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
     756:	00 00                	add    BYTE PTR [eax],al
     758:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
     75f:	05 03 60 71 00       	add    eax,0x716003
     764:	9f                   	lahf   
     765:	0c 41                	or     al,0x41
     767:	00 00                	add    BYTE PTR [eax],al
     769:	00 05 58 42 02 00    	add    BYTE PTR ds:0x24258,al
     76f:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
     775:	9f                   	lahf   
     776:	05 04 9d 00 00       	add    eax,0x9d04
     77b:	00 00                	add    BYTE PTR [eax],al
     77d:	f9                   	stc    
     77e:	01 00                	add    DWORD PTR [eax],eax
     780:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     783:	74 02                	je     787 <sysEnter_Vector-0x12f879>
     785:	00 00                	add    BYTE PTR [eax],al
     787:	04 01                	add    al,0x1
     789:	ac                   	lods   al,BYTE PTR ds:[esi]
     78a:	00 00                	add    BYTE PTR [eax],al
     78c:	00 0c 36             	add    BYTE PTR [esi+esi*1],cl
     78f:	02 00                	add    al,BYTE PTR [eax]
     791:	00 1e                	add    BYTE PTR [esi],bl
     793:	00 00                	add    BYTE PTR [eax],al
     795:	00 98 04 00 9f 6e    	add    BYTE PTR [eax+0x6e9f0004],bl
     79b:	01 00                	add    DWORD PTR [eax],eax
     79d:	00 ff                	add    bh,bh
     79f:	03 00                	add    eax,DWORD PTR [eax]
     7a1:	00 02                	add    BYTE PTR [edx],al
     7a3:	01 06                	add    DWORD PTR [esi],eax
     7a5:	85 00                	test   DWORD PTR [eax],eax
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	02 02                	add    al,BYTE PTR [edx]
     7ab:	05 72 01 00 00       	add    eax,0x172
     7b0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     7b7:	02 08                	add    cl,BYTE PTR [eax]
     7b9:	05 00 00 00 00       	add    eax,0x0
     7be:	02 01                	add    al,BYTE PTR [ecx]
     7c0:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     7c6:	02 07                	add    al,BYTE PTR [edi]
     7c8:	19 01                	sbb    DWORD PTR [ecx],eax
     7ca:	00 00                	add    BYTE PTR [eax],al
     7cc:	04 0e                	add    al,0xe
     7ce:	00 00                	add    BYTE PTR [eax],al
     7d0:	00 02                	add    BYTE PTR [edx],al
     7d2:	34 5a                	xor    al,0x5a
     7d4:	00 00                	add    BYTE PTR [eax],al
     7d6:	00 02                	add    BYTE PTR [edx],al
     7d8:	04 07                	add    al,0x7
     7da:	61                   	popa   
     7db:	00 00                	add    BYTE PTR [eax],al
     7dd:	00 02                	add    BYTE PTR [edx],al
     7df:	08 07                	or     BYTE PTR [edi],al
     7e1:	57                   	push   edi
     7e2:	00 00                	add    BYTE PTR [eax],al
     7e4:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     7eb:	56                   	push   esi
     7ec:	5a                   	pop    edx
     7ed:	00 00                	add    BYTE PTR [eax],al
     7ef:	00 02                	add    BYTE PTR [edx],al
     7f1:	04 05                	add    al,0x5
     7f3:	05 00 00 00 02       	add    eax,0x2000000
     7f8:	0c 04                	or     al,0x4
     7fa:	66 01 00             	add    WORD PTR [eax],ax
     7fd:	00 02                	add    BYTE PTR [edx],al
     7ff:	04 07                	add    al,0x7
     801:	83 01 00             	add    DWORD PTR [ecx],0x0
     804:	00 02                	add    BYTE PTR [edx],al
     806:	01 06                	add    DWORD PTR [esi],eax
     808:	8c 00                	mov    WORD PTR [eax],es
     80a:	00 00                	add    BYTE PTR [eax],al
     80c:	02 01                	add    al,BYTE PTR [ecx]
     80e:	02 13                	add    dl,BYTE PTR [ebx]
     810:	01 00                	add    DWORD PTR [eax],eax
     812:	00 02                	add    BYTE PTR [edx],al
     814:	04 07                	add    al,0x7
     816:	5c                   	pop    esp
     817:	00 00                	add    BYTE PTR [eax],al
     819:	00 05 04 88 00 00    	add    BYTE PTR ds:0x8804,al
     81f:	00 06                	add    BYTE PTR [esi],al
     821:	44                   	inc    esp
     822:	02 00                	add    al,BYTE PTR [eax]
     824:	00 01                	add    BYTE PTR [ecx],al
     826:	0d 98 04 00 9f       	or     eax,0x9f000498
     82b:	ba 00 00 00 01       	mov    edx,0x1000000
     830:	9c                   	pushf  
     831:	fb                   	sti    
     832:	00 00                	add    BYTE PTR [eax],al
     834:	00 07                	add    BYTE PTR [edi],al
     836:	78 00                	js     838 <sysEnter_Vector-0x12f7c8>
     838:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     83e:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     844:	01 0d 33 00 00 00    	add    DWORD PTR ds:0x33,ecx
     84a:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     850:	64 00 01             	add    BYTE PTR fs:[ecx],al
     853:	0f fb 00             	psubq  mm0,QWORD PTR [eax]
     856:	00 00                	add    BYTE PTR [eax],al
     858:	02 91 66 09 76 02    	add    dl,BYTE PTR [ecx+0x2760966]
     85e:	00 00                	add    BYTE PTR [eax],al
     860:	01 10                	add    DWORD PTR [eax],edx
     862:	0b 01                	or     eax,DWORD PTR [ecx]
     864:	00 00                	add    BYTE PTR [eax],al
     866:	02 91 63 09 86 02    	add    dl,BYTE PTR [ecx+0x2860963]
     86c:	00 00                	add    BYTE PTR [eax],al
     86e:	01 10                	add    DWORD PTR [eax],edx
     870:	0b 01                	or     eax,DWORD PTR [ecx]
     872:	00 00                	add    BYTE PTR [eax],al
     874:	02 91 60 00 0a 88    	add    dl,BYTE PTR [ecx-0x77f5ffa0]
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	00 0b                	add    BYTE PTR [ebx],cl
     87e:	01 00                	add    DWORD PTR [eax],eax
     880:	00 0b                	add    BYTE PTR [ebx],cl
     882:	81 00 00 00 09 00    	add    DWORD PTR [eax],0x90000
     888:	0a 88 00 00 00 1b    	or     cl,BYTE PTR [eax+0x1b000000]
     88e:	01 00                	add    DWORD PTR [eax],eax
     890:	00 0b                	add    BYTE PTR [ebx],cl
     892:	81 00 00 00 02 00    	add    DWORD PTR [eax],0x20000
     898:	0c 4d                	or     al,0x4d
     89a:	02 00                	add    al,BYTE PTR [eax]
     89c:	00 01                	add    BYTE PTR [ecx],al
     89e:	1d 52 05 00 9f       	sbb    eax,0x9f000552
     8a3:	5a                   	pop    edx
     8a4:	00 00                	add    BYTE PTR [eax],al
     8a6:	00 01                	add    BYTE PTR [ecx],al
     8a8:	9c                   	pushf  
     8a9:	3f                   	aas    
     8aa:	01 00                	add    DWORD PTR [eax],eax
     8ac:	00 08                	add    BYTE PTR [eax],cl
     8ae:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     8b1:	00 01                	add    BYTE PTR [ecx],al
     8b3:	1f                   	pop    ds
     8b4:	fb                   	sti    
     8b5:	00 00                	add    BYTE PTR [eax],al
     8b7:	00 02                	add    BYTE PTR [edx],al
     8b9:	91                   	xchg   ecx,eax
     8ba:	66                   	data16
     8bb:	00 0c 60             	add    BYTE PTR [eax+eiz*2],cl
     8be:	02 00                	add    al,BYTE PTR [eax]
     8c0:	00 01                	add    BYTE PTR [ecx],al
     8c2:	27                   	daa    
     8c3:	ac                   	lods   al,BYTE PTR ds:[esi]
     8c4:	05 00 9f 5a 00       	add    eax,0x5a9f00
     8c9:	00 00                	add    BYTE PTR [eax],al
     8cb:	01 9c 63 01 00 00 08 	add    DWORD PTR [ebx+eiz*2+0x8000001],ebx
     8d2:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     8d5:	00 01                	add    BYTE PTR [ecx],al
     8d7:	29 fb                	sub    ebx,edi
     8d9:	00 00                	add    BYTE PTR [eax],al
     8db:	00 02                	add    BYTE PTR [edx],al
     8dd:	91                   	xchg   ecx,eax
     8de:	66                   	data16
     8df:	00 0d 6e 00 00 00    	add    BYTE PTR ds:0x6e,cl
     8e5:	03 34 74             	add    esi,DWORD PTR [esp+esi*2]
     8e8:	01 00                	add    DWORD PTR [eax],eax
     8ea:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
     8f0:	9f                   	lahf   
     8f1:	05 04 68 00 00       	add    eax,0x6804
     8f6:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
     8fc:	03 35 4f 00 00 00    	add    esi,DWORD PTR ds:0x4f
     902:	05 03 60 71 00       	add    eax,0x716003
     907:	9f                   	lahf   
     908:	0d a3 00 00 00       	or     eax,0xa3
     90d:	04 37                	add    al,0x37
     90f:	4f                   	dec    edi
     910:	00 00                	add    BYTE PTR [eax],al
     912:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
     918:	9f                   	lahf   
     919:	0d 34 01 00 00       	or     eax,0x134
     91e:	04 38                	add    al,0x38
     920:	4f                   	dec    edi
     921:	00 00                	add    BYTE PTR [eax],al
     923:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
     929:	9f                   	lahf   
     92a:	0d 7b 00 00 00       	or     eax,0x7b
     92f:	04 39                	add    al,0x39
     931:	4f                   	dec    edi
     932:	00 00                	add    BYTE PTR [eax],al
     934:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
     93a:	9f                   	lahf   
     93b:	0d 7c 01 00 00       	or     eax,0x17c
     940:	04 3a                	add    al,0x3a
     942:	73 00                	jae    944 <sysEnter_Vector-0x12f6bc>
     944:	00 00                	add    BYTE PTR [eax],al
     946:	05 03 78 71 00       	add    eax,0x717803
     94b:	9f                   	lahf   
     94c:	0d 41 00 00 00       	or     eax,0x41
     951:	05 58 e0 01 00       	add    eax,0x1e058
     956:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
     95c:	9f                   	lahf   
     95d:	05 04 9d 00 00       	add    eax,0x9d04
     962:	00 0d 7b 02 00 00    	add    BYTE PTR ds:0x27b,cl
     968:	01 0b                	add    DWORD PTR [ebx],ecx
     96a:	f7 01 00 00 05 03    	test   DWORD PTR [ecx],0x3050000
     970:	00 69 00             	add    BYTE PTR [ecx+0x0],ch
     973:	9f                   	lahf   
     974:	0e                   	push   cs
     975:	0b 01                	or     eax,DWORD PTR [ecx]
     977:	00 00                	add    BYTE PTR [eax],al
     979:	00 7f 03             	add    BYTE PTR [edi+0x3],bh
     97c:	00 00                	add    BYTE PTR [eax],al
     97e:	04 00                	add    al,0x0
     980:	3d 03 00 00 04       	cmp    eax,0x4000003
     985:	01 ac 00 00 00 0c c4 	add    DWORD PTR [eax+eax*1-0x3bf40000],ebp
     98c:	02 00                	add    al,BYTE PTR [eax]
     98e:	00 1e                	add    BYTE PTR [esi],bl
     990:	00 00                	add    BYTE PTR [eax],al
     992:	00 08                	add    BYTE PTR [eax],cl
     994:	06                   	push   es
     995:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
     99b:	db 04 00             	fild   DWORD PTR [eax+eax*1]
     99e:	00 02                	add    BYTE PTR [edx],al
     9a0:	01 06                	add    DWORD PTR [esi],eax
     9a2:	8c 00                	mov    WORD PTR [eax],es
     9a4:	00 00                	add    BYTE PTR [eax],al
     9a6:	02 01                	add    al,BYTE PTR [ecx]
     9a8:	06                   	push   es
     9a9:	85 00                	test   DWORD PTR [eax],eax
     9ab:	00 00                	add    BYTE PTR [eax],al
     9ad:	02 02                	add    al,BYTE PTR [edx]
     9af:	05 72 01 00 00       	add    eax,0x172
     9b4:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     9bb:	02 08                	add    cl,BYTE PTR [eax]
     9bd:	05 00 00 00 00       	add    eax,0x0
     9c2:	02 01                	add    al,BYTE PTR [ecx]
     9c4:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
     9ca:	02 07                	add    al,BYTE PTR [edi]
     9cc:	19 01                	sbb    DWORD PTR [ecx],eax
     9ce:	00 00                	add    BYTE PTR [eax],al
     9d0:	04 0e                	add    al,0xe
     9d2:	00 00                	add    BYTE PTR [eax],al
     9d4:	00 02                	add    BYTE PTR [edx],al
     9d6:	34 61                	xor    al,0x61
     9d8:	00 00                	add    BYTE PTR [eax],al
     9da:	00 02                	add    BYTE PTR [edx],al
     9dc:	04 07                	add    al,0x7
     9de:	61                   	popa   
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	00 02                	add    BYTE PTR [edx],al
     9e3:	08 07                	or     BYTE PTR [edi],al
     9e5:	57                   	push   edi
     9e6:	00 00                	add    BYTE PTR [eax],al
     9e8:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     9ef:	56                   	push   esi
     9f0:	61                   	popa   
     9f1:	00 00                	add    BYTE PTR [eax],al
     9f3:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
     9fa:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
     9fd:	00 00                	add    BYTE PTR [eax],al
     9ff:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     a06:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     a09:	66 01 00             	add    WORD PTR [eax],ax
     a0c:	00 02                	add    BYTE PTR [edx],al
     a0e:	01 02                	add    DWORD PTR [edx],eax
     a10:	13 01                	adc    eax,DWORD PTR [ecx]
     a12:	00 00                	add    BYTE PTR [eax],al
     a14:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     a17:	83 01 00             	add    DWORD PTR [ecx],0x0
     a1a:	00 05 bf 03 00 00    	add    BYTE PTR ds:0x3bf,al
     a20:	04 61                	add    al,0x61
     a22:	00 00                	add    BYTE PTR [eax],al
     a24:	00 07                	add    BYTE PTR [edi],al
     a26:	15 8e 01 00 00       	adc    eax,0x18e
     a2b:	06                   	push   es
     a2c:	5f                   	pop    edi
     a2d:	03 00                	add    eax,DWORD PTR [eax]
     a2f:	00 00                	add    BYTE PTR [eax],al
     a31:	06                   	push   es
     a32:	cb                   	retf   
     a33:	04 00                	add    al,0x0
     a35:	00 01                	add    BYTE PTR [ecx],al
     a37:	06                   	push   es
     a38:	d6                   	(bad)  
     a39:	02 00                	add    al,BYTE PTR [eax]
     a3b:	00 02                	add    BYTE PTR [edx],al
     a3d:	06                   	push   es
     a3e:	bd 04 00 00 03       	mov    ebp,0x3000004
     a43:	06                   	push   es
     a44:	08 03                	or     BYTE PTR [ebx],al
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	04 06                	add    al,0x6
     a4a:	f3 02 00             	repz add al,BYTE PTR [eax]
     a4d:	00 05 06 52 03 00    	add    BYTE PTR ds:0x35206,al
     a53:	00 0a                	add    BYTE PTR [edx],cl
     a55:	06                   	push   es
     a56:	33 04 00             	xor    eax,DWORD PTR [eax+eax*1]
     a59:	00 0b                	add    BYTE PTR [ebx],cl
     a5b:	06                   	push   es
     a5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a5d:	03 00                	add    eax,DWORD PTR [eax]
     a5f:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
     a62:	a2 04 00 00 0d       	mov    ds:0xd000004,al
     a67:	06                   	push   es
     a68:	40                   	inc    eax
     a69:	04 00                	add    al,0x0
     a6b:	00 0e                	add    BYTE PTR [esi],cl
     a6d:	06                   	push   es
     a6e:	95                   	xchg   ebp,eax
     a6f:	04 00                	add    al,0x0
     a71:	00 0f                	add    BYTE PTR [edi],cl
     a73:	06                   	push   es
     a74:	3f                   	aas    
     a75:	03 00                	add    eax,DWORD PTR [eax]
     a77:	00 10                	add    BYTE PTR [eax],dl
     a79:	06                   	push   es
     a7a:	4d                   	dec    ebp
     a7b:	04 00                	add    al,0x0
     a7d:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     a80:	df 03                	fild   WORD PTR [ebx]
     a82:	00 00                	add    BYTE PTR [eax],al
     a84:	50                   	push   eax
     a85:	06                   	push   es
     a86:	78 04                	js     a8c <sysEnter_Vector-0x12f574>
     a88:	00 00                	add    BYTE PTR [eax],al
     a8a:	59                   	pop    ecx
     a8b:	06                   	push   es
     a8c:	8b 02                	mov    eax,DWORD PTR [edx]
     a8e:	00 00                	add    BYTE PTR [eax],al
     a90:	61                   	popa   
     a91:	06                   	push   es
     a92:	fc                   	cld    
     a93:	03 00                	add    eax,DWORD PTR [eax]
     a95:	00 97 07 94 03 00    	add    BYTE PTR [edi+0x39407],dl
     a9b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     a9e:	07                   	pop    es
     a9f:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
     aa3:	64 01 07             	add    DWORD PTR fs:[edi],eax
     aa6:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
     aa9:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     aac:	07                   	pop    es
     aad:	af                   	scas   eax,DWORD PTR es:[edi]
     aae:	02 00                	add    al,BYTE PTR [eax]
     ab0:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     ab3:	07                   	pop    es
     ab4:	2a 03                	sub    al,BYTE PTR [ebx]
     ab6:	00 00                	add    BYTE PTR [eax],al
     ab8:	67 01 07             	add    DWORD PTR [bx],eax
     abb:	1d 03 00 00 68       	sbb    eax,0x68000003
     ac0:	01 07                	add    DWORD PTR [edi],eax
     ac2:	e5 04                	in     eax,0x4
     ac4:	00 00                	add    BYTE PTR [eax],al
     ac6:	69 01 07 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e07
     acc:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     acf:	07                   	pop    es
     ad0:	e3 02                	jecxz  ad4 <sysEnter_Vector-0x12f52c>
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	71 01                	jno    ad7 <sysEnter_Vector-0x12f529>
     ad6:	07                   	pop    es
     ad7:	af                   	scas   eax,DWORD PTR es:[edi]
     ad8:	04 00                	add    al,0x0
     ada:	00 00                	add    BYTE PTR [eax],al
     adc:	03 07                	add    eax,DWORD PTR [edi]
     ade:	5c                   	pop    esp
     adf:	04 00                	add    al,0x0
     ae1:	00 01                	add    BYTE PTR [ecx],al
     ae3:	03 07                	add    eax,DWORD PTR [edi]
     ae5:	ab                   	stos   DWORD PTR es:[edi],eax
     ae6:	03 00                	add    eax,DWORD PTR [eax]
     ae8:	00 02                	add    BYTE PTR [edx],al
     aea:	03 07                	add    eax,DWORD PTR [edi]
     aec:	84 03                	test   BYTE PTR [ebx],al
     aee:	00 00                	add    BYTE PTR [eax],al
     af0:	03 03                	add    eax,DWORD PTR [ebx]
     af2:	07                   	pop    es
     af3:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
     af6:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     af9:	07                   	pop    es
     afa:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
     afd:	00 05 03 07 d0 03    	add    BYTE PTR ds:0x3d00703,al
     b03:	00 00                	add    BYTE PTR [eax],al
     b05:	06                   	push   es
     b06:	03 00                	add    eax,DWORD PTR [eax]
     b08:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     b0b:	5c                   	pop    esp
     b0c:	00 00                	add    BYTE PTR [eax],al
     b0e:	00 08                	add    BYTE PTR [eax],cl
     b10:	04 25                	add    al,0x25
     b12:	00 00                	add    BYTE PTR [eax],al
     b14:	00 09                	add    BYTE PTR [ecx],cl
     b16:	15 03 00 00 01       	adc    eax,0x1000003
     b1b:	09 3a                	or     DWORD PTR [edx],edi
     b1d:	00 00                	add    BYTE PTR [eax],al
     b1f:	00 08                	add    BYTE PTR [eax],cl
     b21:	06                   	push   es
     b22:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     b28:	01 9c e9 01 00 00 0a 	add    DWORD PTR [ecx+ebp*8+0xa000001],ebx
     b2f:	7c 03                	jl     b34 <sysEnter_Vector-0x12f4cc>
     b31:	00 00                	add    BYTE PTR [eax],al
     b33:	01 09                	add    DWORD PTR [ecx],ecx
     b35:	95                   	xchg   ebp,eax
     b36:	01 00                	add    DWORD PTR [eax],eax
     b38:	00 02                	add    BYTE PTR [edx],al
     b3a:	91                   	xchg   ecx,eax
     b3b:	00 0a                	add    BYTE PTR [edx],cl
     b3d:	4c                   	dec    esp
     b3e:	03 00                	add    eax,DWORD PTR [eax]
     b40:	00 01                	add    BYTE PTR [ecx],al
     b42:	09 95 01 00 00 02    	or     DWORD PTR [ebp+0x2000001],edx
     b48:	91                   	xchg   ecx,eax
     b49:	04 0b                	add    al,0xb
     b4b:	1a 06                	sbb    al,BYTE PTR [esi]
     b4d:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
     b53:	0c 63                	or     al,0x63
     b55:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b56:	74 00                	je     b58 <sysEnter_Vector-0x12f4a8>
     b58:	01 0b                	add    DWORD PTR [ebx],ecx
     b5a:	3a 00                	cmp    al,BYTE PTR [eax]
     b5c:	00 00                	add    BYTE PTR [eax],al
     b5e:	02 91 6c 00 00 09    	add    dl,BYTE PTR [ecx+0x900006c]
     b64:	c9                   	leave  
     b65:	03 00                	add    eax,DWORD PTR [eax]
     b67:	00 01                	add    BYTE PTR [ecx],al
     b69:	14 3a                	adc    al,0x3a
     b6b:	00 00                	add    BYTE PTR [eax],al
     b6d:	00 b2 06 00 9f 23    	add    BYTE PTR [edx+0x239f0006],dh
     b73:	00 00                	add    BYTE PTR [eax],al
     b75:	00 01                	add    BYTE PTR [ecx],al
     b77:	9c                   	pushf  
     b78:	1f                   	pop    ds
     b79:	02 00                	add    al,BYTE PTR [eax]
     b7b:	00 0a                	add    BYTE PTR [edx],cl
     b7d:	7c 03                	jl     b82 <sysEnter_Vector-0x12f47e>
     b7f:	00 00                	add    BYTE PTR [eax],al
     b81:	01 14 95 01 00 00 02 	add    DWORD PTR [edx*4+0x2000001],edx
     b88:	91                   	xchg   ecx,eax
     b89:	00 0a                	add    BYTE PTR [edx],cl
     b8b:	4c                   	dec    esp
     b8c:	03 00                	add    eax,DWORD PTR [eax]
     b8e:	00 01                	add    BYTE PTR [ecx],al
     b90:	14 95                	adc    al,0x95
     b92:	01 00                	add    DWORD PTR [eax],eax
     b94:	00 02                	add    BYTE PTR [edx],al
     b96:	91                   	xchg   ecx,eax
     b97:	04 00                	add    al,0x0
     b99:	0d 01 03 00 00       	or     eax,0x301
     b9e:	01 19                	add    DWORD PTR [ecx],ebx
     ba0:	d5 06                	aad    0x6
     ba2:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     ba8:	01 9c 93 02 00 00 0a 	add    DWORD PTR [ebx+edx*4+0xa000002],ebx
     baf:	7c 03                	jl     bb4 <sysEnter_Vector-0x12f44c>
     bb1:	00 00                	add    BYTE PTR [eax],al
     bb3:	01 19                	add    DWORD PTR [ecx],ebx
     bb5:	95                   	xchg   ebp,eax
     bb6:	01 00                	add    DWORD PTR [eax],eax
     bb8:	00 02                	add    BYTE PTR [edx],al
     bba:	91                   	xchg   ecx,eax
     bbb:	00 0a                	add    BYTE PTR [edx],cl
     bbd:	4c                   	dec    esp
     bbe:	03 00                	add    eax,DWORD PTR [eax]
     bc0:	00 01                	add    BYTE PTR [ecx],al
     bc2:	19 95 01 00 00 02    	sbb    DWORD PTR [ebp+0x2000001],edx
     bc8:	91                   	xchg   ecx,eax
     bc9:	04 0e                	add    al,0xe
     bcb:	ee                   	out    dx,al
     bcc:	03 00                	add    eax,DWORD PTR [eax]
     bce:	00 01                	add    BYTE PTR [ecx],al
     bd0:	1b 56 00             	sbb    edx,DWORD PTR [esi+0x0]
     bd3:	00 00                	add    BYTE PTR [eax],al
     bd5:	02 91 6c 0f ee 06    	add    dl,BYTE PTR [ecx+0x6ee0f6c]
     bdb:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     be1:	7a 02                	jp     be5 <sysEnter_Vector-0x12f41b>
     be3:	00 00                	add    BYTE PTR [eax],al
     be5:	0c 63                	or     al,0x63
     be7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     be8:	74 00                	je     bea <sysEnter_Vector-0x12f416>
     bea:	01 1d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebx
     bf0:	02 91 68 00 0b d9    	add    dl,BYTE PTR [ecx-0x26f4ff98]
     bf6:	07                   	pop    es
     bf7:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     bfd:	0c 63                	or     al,0x63
     bff:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c00:	74 00                	je     c02 <sysEnter_Vector-0x12f3fe>
     c02:	01 29                	add    DWORD PTR [ecx],ebp
     c04:	3a 00                	cmp    al,BYTE PTR [eax]
     c06:	00 00                	add    BYTE PTR [eax],al
     c08:	02 91 64 00 00 09    	add    dl,BYTE PTR [ecx+0x9000064]
     c0e:	b7 03                	mov    bh,0x3
     c10:	00 00                	add    BYTE PTR [eax],al
     c12:	01 36                	add    DWORD PTR [esi],esi
     c14:	95                   	xchg   ebp,eax
     c15:	01 00                	add    DWORD PTR [eax],eax
     c17:	00 96 08 00 9f 2c    	add    BYTE PTR [esi+0x2c9f0008],dl
     c1d:	00 00                	add    BYTE PTR [eax],al
     c1f:	00 01                	add    BYTE PTR [ecx],al
     c21:	9c                   	pushf  
     c22:	c9                   	leave  
     c23:	02 00                	add    al,BYTE PTR [eax]
     c25:	00 10                	add    BYTE PTR [eax],dl
     c27:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     c2a:	00 01                	add    BYTE PTR [ecx],al
     c2c:	36                   	ss
     c2d:	95                   	xchg   ebp,eax
     c2e:	01 00                	add    DWORD PTR [eax],eax
     c30:	00 02                	add    BYTE PTR [edx],al
     c32:	91                   	xchg   ecx,eax
     c33:	00 0a                	add    BYTE PTR [edx],cl
     c35:	a8 06                	test   al,0x6
     c37:	00 00                	add    BYTE PTR [eax],al
     c39:	01 36                	add    DWORD PTR [esi],esi
     c3b:	7a 00                	jp     c3d <sysEnter_Vector-0x12f3c3>
     c3d:	00 00                	add    BYTE PTR [eax],al
     c3f:	02 91 04 00 09 de    	add    dl,BYTE PTR [ecx-0x21f6fffc]
     c45:	04 00                	add    al,0x0
     c47:	00 01                	add    BYTE PTR [ecx],al
     c49:	3c 95                	cmp    al,0x95
     c4b:	01 00                	add    DWORD PTR [eax],eax
     c4d:	00 c2                	add    dl,al
     c4f:	08 00                	or     BYTE PTR [eax],al
     c51:	9f                   	lahf   
     c52:	23 00                	and    eax,DWORD PTR [eax]
     c54:	00 00                	add    BYTE PTR [eax],al
     c56:	01 9c ff 02 00 00 10 	add    DWORD PTR [edi+edi*8+0x10000002],ebx
     c5d:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     c60:	00 01                	add    BYTE PTR [ecx],al
     c62:	3c 95                	cmp    al,0x95
     c64:	01 00                	add    DWORD PTR [eax],eax
     c66:	00 02                	add    BYTE PTR [edx],al
     c68:	91                   	xchg   ecx,eax
     c69:	00 0a                	add    BYTE PTR [edx],cl
     c6b:	a8 06                	test   al,0x6
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	01 3c 7a             	add    DWORD PTR [edx+edi*2],edi
     c72:	00 00                	add    BYTE PTR [eax],al
     c74:	00 02                	add    BYTE PTR [edx],al
     c76:	91                   	xchg   ecx,eax
     c77:	04 00                	add    al,0x0
     c79:	11 a3 00 00 00 04    	adc    DWORD PTR [ebx+0x4000000],esp
     c7f:	37                   	aaa    
     c80:	56                   	push   esi
     c81:	00 00                	add    BYTE PTR [eax],al
     c83:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
     c89:	9f                   	lahf   
     c8a:	11 34 01             	adc    DWORD PTR [ecx+eax*1],esi
     c8d:	00 00                	add    BYTE PTR [eax],al
     c8f:	04 38                	add    al,0x38
     c91:	56                   	push   esi
     c92:	00 00                	add    BYTE PTR [eax],al
     c94:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
     c9a:	9f                   	lahf   
     c9b:	11 7b 00             	adc    DWORD PTR [ebx+0x0],edi
     c9e:	00 00                	add    BYTE PTR [eax],al
     ca0:	04 39                	add    al,0x39
     ca2:	56                   	push   esi
     ca3:	00 00                	add    BYTE PTR [eax],al
     ca5:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
     cab:	9f                   	lahf   
     cac:	11 7c 01 00          	adc    DWORD PTR [ecx+eax*1+0x0],edi
     cb0:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
     cb3:	85 00                	test   DWORD PTR [eax],eax
     cb5:	00 00                	add    BYTE PTR [eax],al
     cb7:	05 03 78 71 00       	add    eax,0x717803
     cbc:	9f                   	lahf   
     cbd:	11 6e 00             	adc    DWORD PTR [esi+0x0],ebp
     cc0:	00 00                	add    BYTE PTR [eax],al
     cc2:	05 34 54 03 00       	add    eax,0x35434
     cc7:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
     ccd:	9f                   	lahf   
     cce:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
     cd1:	00 00                	add    BYTE PTR [eax],al
     cd3:	00 11                	add    BYTE PTR [ecx],dl
     cd5:	91                   	xchg   ecx,eax
     cd6:	00 00                	add    BYTE PTR [eax],al
     cd8:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
     cde:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
     ce4:	9f                   	lahf   
     ce5:	11 41 00             	adc    DWORD PTR [ecx+0x0],eax
     ce8:	00 00                	add    BYTE PTR [eax],al
     cea:	06                   	push   es
     ceb:	58                   	pop    eax
     cec:	7c 03                	jl     cf1 <sysEnter_Vector-0x12f30f>
     cee:	00 00                	add    BYTE PTR [eax],al
     cf0:	05 03 74 71 00       	add    eax,0x717403
     cf5:	9f                   	lahf   
     cf6:	08 04 95 01 00 00 00 	or     BYTE PTR [edx*4+0x1],al
     cfd:	a0 08 00 00 04       	mov    al,ds:0x4000008
     d02:	00 37                	add    BYTE PTR [edi],dh
     d04:	04 00                	add    al,0x0
     d06:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     d09:	ac                   	lods   al,BYTE PTR ds:[esi]
     d0a:	00 00                	add    BYTE PTR [eax],al
     d0c:	00 0c 92             	add    BYTE PTR [edx+edx*4],cl
     d0f:	06                   	push   es
     d10:	00 00                	add    BYTE PTR [eax],al
     d12:	1e                   	push   ds
     d13:	00 00                	add    BYTE PTR [eax],al
     d15:	00 e8                	add    al,ch
     d17:	08 00                	or     BYTE PTR [eax],al
     d19:	9f                   	lahf   
     d1a:	f2 07                	repnz pop es
     d1c:	00 00                	add    BYTE PTR [eax],al
     d1e:	43                   	inc    ebx
     d1f:	06                   	push   es
     d20:	00 00                	add    BYTE PTR [eax],al
     d22:	02 01                	add    al,BYTE PTR [ecx]
     d24:	06                   	push   es
     d25:	8c 00                	mov    WORD PTR [eax],es
     d27:	00 00                	add    BYTE PTR [eax],al
     d29:	02 01                	add    al,BYTE PTR [ecx]
     d2b:	06                   	push   es
     d2c:	85 00                	test   DWORD PTR [eax],eax
     d2e:	00 00                	add    BYTE PTR [eax],al
     d30:	02 02                	add    al,BYTE PTR [edx]
     d32:	05 72 01 00 00       	add    eax,0x172
     d37:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     d3e:	02 08                	add    cl,BYTE PTR [eax]
     d40:	05 00 00 00 00       	add    eax,0x0
     d45:	04 9d                	add    al,0x9d
     d47:	06                   	push   es
     d48:	00 00                	add    BYTE PTR [eax],al
     d4a:	02 2e                	add    ch,BYTE PTR [esi]
     d4c:	53                   	push   ebx
     d4d:	00 00                	add    BYTE PTR [eax],al
     d4f:	00 02                	add    BYTE PTR [edx],al
     d51:	01 08                	add    DWORD PTR [eax],ecx
     d53:	83 00 00             	add    DWORD PTR [eax],0x0
     d56:	00 04 8d 05 00 00 02 	add    BYTE PTR [ecx*4+0x2000005],al
     d5d:	31 65 00             	xor    DWORD PTR [ebp+0x0],esp
     d60:	00 00                	add    BYTE PTR [eax],al
     d62:	02 02                	add    al,BYTE PTR [edx]
     d64:	07                   	pop    es
     d65:	19 01                	sbb    DWORD PTR [ecx],eax
     d67:	00 00                	add    BYTE PTR [eax],al
     d69:	04 0e                	add    al,0xe
     d6b:	00 00                	add    BYTE PTR [eax],al
     d6d:	00 02                	add    BYTE PTR [edx],al
     d6f:	34 77                	xor    al,0x77
     d71:	00 00                	add    BYTE PTR [eax],al
     d73:	00 02                	add    BYTE PTR [edx],al
     d75:	04 07                	add    al,0x7
     d77:	61                   	popa   
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	00 02                	add    BYTE PTR [edx],al
     d7c:	08 07                	or     BYTE PTR [edi],al
     d7e:	57                   	push   edi
     d7f:	00 00                	add    BYTE PTR [eax],al
     d81:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
     d88:	56                   	push   esi
     d89:	77 00                	ja     d8b <sysEnter_Vector-0x12f275>
     d8b:	00 00                	add    BYTE PTR [eax],al
     d8d:	04 bd                	add    al,0xbd
     d8f:	02 00                	add    al,BYTE PTR [eax]
     d91:	00 03                	add    BYTE PTR [ebx],al
     d93:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
     d96:	00 00                	add    BYTE PTR [eax],al
     d98:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     d9f:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     da2:	66 01 00             	add    WORD PTR [eax],ax
     da5:	00 05 04 af 00 00    	add    BYTE PTR ds:0xaf04,al
     dab:	00 06                	add    BYTE PTR [esi],al
     dad:	25 00 00 00 02       	and    eax,0x2000000
     db2:	01 02                	add    DWORD PTR [edx],eax
     db4:	13 01                	adc    eax,DWORD PTR [ecx]
     db6:	00 00                	add    BYTE PTR [eax],al
     db8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     dbb:	83 01 00             	add    DWORD PTR [ecx],0x0
     dbe:	00 07                	add    BYTE PTR [edi],al
     dc0:	59                   	pop    ecx
     dc1:	06                   	push   es
     dc2:	00 00                	add    BYTE PTR [eax],al
     dc4:	17                   	pop    ss
     dc5:	01 04 1e             	add    DWORD PTR [esi+ebx*1],eax
     dc8:	44                   	inc    esp
     dc9:	01 00                	add    DWORD PTR [eax],eax
     dcb:	00 08                	add    BYTE PTR [eax],cl
     dcd:	28 06                	sub    BYTE PTR [esi],al
     dcf:	00 00                	add    BYTE PTR [eax],al
     dd1:	04 20                	add    al,0x20
     dd3:	44                   	inc    esp
     dd4:	01 00                	add    DWORD PTR [eax],eax
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	09 52 06             	or     DWORD PTR [edx+0x6],edx
     ddb:	00 00                	add    BYTE PTR [eax],al
     ddd:	04 21                	add    al,0x21
     ddf:	48                   	dec    eax
     de0:	00 00                	add    BYTE PTR [eax],al
     de2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     de5:	09 ff                	or     edi,edi
     de7:	05 00 00 04 22       	add    eax,0x22040000
     dec:	6c                   	ins    BYTE PTR es:[edi],dx
     ded:	00 00                	add    BYTE PTR [eax],al
     def:	00 05 01 09 a8 06    	add    BYTE PTR ds:0x6a80901,al
     df5:	00 00                	add    BYTE PTR [eax],al
     df7:	04 23                	add    al,0x23
     df9:	6c                   	ins    BYTE PTR es:[edi],dx
     dfa:	00 00                	add    BYTE PTR [eax],al
     dfc:	00 09                	add    BYTE PTR [ecx],cl
     dfe:	01 09                	add    DWORD PTR [ecx],ecx
     e00:	07                   	pop    es
     e01:	06                   	push   es
     e02:	00 00                	add    BYTE PTR [eax],al
     e04:	04 24                	add    al,0x24
     e06:	5a                   	pop    edx
     e07:	00 00                	add    BYTE PTR [eax],al
     e09:	00 0d 01 09 35 05    	add    BYTE PTR ds:0x5350901,cl
     e0f:	00 00                	add    BYTE PTR [eax],al
     e11:	04 25                	add    al,0x25
     e13:	5a                   	pop    edx
     e14:	00 00                	add    BYTE PTR [eax],al
     e16:	00 0f                	add    BYTE PTR [edi],cl
     e18:	01 09                	add    DWORD PTR [ecx],ecx
     e1a:	96                   	xchg   esi,eax
     e1b:	05 00 00 04 26       	add    eax,0x26040000
     e20:	5a                   	pop    edx
     e21:	00 00                	add    BYTE PTR [eax],al
     e23:	00 11                	add    BYTE PTR [ecx],dl
     e25:	01 09                	add    DWORD PTR [ecx],ecx
     e27:	78 05                	js     e2e <sysEnter_Vector-0x12f1d2>
     e29:	00 00                	add    BYTE PTR [eax],al
     e2b:	04 27                	add    al,0x27
     e2d:	5a                   	pop    edx
     e2e:	00 00                	add    BYTE PTR [eax],al
     e30:	00 13                	add    BYTE PTR [ebx],dl
     e32:	01 09                	add    DWORD PTR [ecx],ecx
     e34:	29 05 00 00 04 28    	sub    DWORD PTR ds:0x28040000,eax
     e3a:	5a                   	pop    edx
     e3b:	00 00                	add    BYTE PTR [eax],al
     e3d:	00 15 01 00 0a 25    	add    BYTE PTR ds:0x250a0001,dl
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	00 55 01             	add    BYTE PTR [ebp+0x1],dl
     e48:	00 00                	add    BYTE PTR [eax],al
     e4a:	0b bb 00 00 00 03    	or     edi,DWORD PTR [ebx+0x3000000]
     e50:	01 00                	add    DWORD PTR [eax],eax
     e52:	0c 13                	or     al,0x13
     e54:	06                   	push   es
     e55:	00 00                	add    BYTE PTR [eax],al
     e57:	08 04 2b             	or     BYTE PTR [ebx+ebp*1],al
     e5a:	7a 01                	jp     e5d <sysEnter_Vector-0x12f1a3>
     e5c:	00 00                	add    BYTE PTR [eax],al
     e5e:	08 a5 06 00 00 04    	or     BYTE PTR [ebp+0x4000006],ah
     e64:	2d 6c 00 00 00       	sub    eax,0x6c
     e69:	00 08                	add    BYTE PTR [eax],cl
     e6b:	ad                   	lods   eax,DWORD PTR ds:[esi]
     e6c:	05 00 00 04 2e       	add    eax,0x2e040000
     e71:	6c                   	ins    BYTE PTR es:[edi],dx
     e72:	00 00                	add    BYTE PTR [eax],al
     e74:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     e77:	04 41                	add    al,0x41
     e79:	06                   	push   es
     e7a:	00 00                	add    BYTE PTR [eax],al
     e7c:	04 31                	add    al,0x31
     e7e:	c2 00 00             	ret    0x0
     e81:	00 04 fb             	add    BYTE PTR [ebx+edi*8],al
     e84:	04 00                	add    al,0x0
     e86:	00 04 32             	add    BYTE PTR [edx+esi*1],al
     e89:	55                   	push   ebp
     e8a:	01 00                	add    DWORD PTR [eax],eax
     e8c:	00 0d bf 03 00 00    	add    BYTE PTR ds:0x3bf,cl
     e92:	04 77                	add    al,0x77
     e94:	00 00                	add    BYTE PTR [eax],al
     e96:	00 07                	add    BYTE PTR [edi],al
     e98:	15 7d 02 00 00       	adc    eax,0x27d
     e9d:	0e                   	push   cs
     e9e:	5f                   	pop    edi
     e9f:	03 00                	add    eax,DWORD PTR [eax]
     ea1:	00 00                	add    BYTE PTR [eax],al
     ea3:	0e                   	push   cs
     ea4:	cb                   	retf   
     ea5:	04 00                	add    al,0x0
     ea7:	00 01                	add    BYTE PTR [ecx],al
     ea9:	0e                   	push   cs
     eaa:	d6                   	(bad)  
     eab:	02 00                	add    al,BYTE PTR [eax]
     ead:	00 02                	add    BYTE PTR [edx],al
     eaf:	0e                   	push   cs
     eb0:	bd 04 00 00 03       	mov    ebp,0x3000004
     eb5:	0e                   	push   cs
     eb6:	08 03                	or     BYTE PTR [ebx],al
     eb8:	00 00                	add    BYTE PTR [eax],al
     eba:	04 0e                	add    al,0xe
     ebc:	f3 02 00             	repz add al,BYTE PTR [eax]
     ebf:	00 05 0e 52 03 00    	add    BYTE PTR ds:0x3520e,al
     ec5:	00 0a                	add    BYTE PTR [edx],cl
     ec7:	0e                   	push   cs
     ec8:	33 04 00             	xor    eax,DWORD PTR [eax+eax*1]
     ecb:	00 0b                	add    BYTE PTR [ebx],cl
     ecd:	0e                   	push   cs
     ece:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ecf:	03 00                	add    eax,DWORD PTR [eax]
     ed1:	00 0c 0e             	add    BYTE PTR [esi+ecx*1],cl
     ed4:	a2 04 00 00 0d       	mov    ds:0xd000004,al
     ed9:	0e                   	push   cs
     eda:	40                   	inc    eax
     edb:	04 00                	add    al,0x0
     edd:	00 0e                	add    BYTE PTR [esi],cl
     edf:	0e                   	push   cs
     ee0:	95                   	xchg   ebp,eax
     ee1:	04 00                	add    al,0x0
     ee3:	00 0f                	add    BYTE PTR [edi],cl
     ee5:	0e                   	push   cs
     ee6:	3f                   	aas    
     ee7:	03 00                	add    eax,DWORD PTR [eax]
     ee9:	00 10                	add    BYTE PTR [eax],dl
     eeb:	0e                   	push   cs
     eec:	4d                   	dec    ebp
     eed:	04 00                	add    al,0x0
     eef:	00 4f 0e             	add    BYTE PTR [edi+0xe],cl
     ef2:	df 03                	fild   WORD PTR [ebx]
     ef4:	00 00                	add    BYTE PTR [eax],al
     ef6:	50                   	push   eax
     ef7:	0e                   	push   cs
     ef8:	78 04                	js     efe <sysEnter_Vector-0x12f102>
     efa:	00 00                	add    BYTE PTR [eax],al
     efc:	59                   	pop    ecx
     efd:	0e                   	push   cs
     efe:	8b 02                	mov    eax,DWORD PTR [edx]
     f00:	00 00                	add    BYTE PTR [eax],al
     f02:	61                   	popa   
     f03:	0e                   	push   cs
     f04:	fc                   	cld    
     f05:	03 00                	add    eax,DWORD PTR [eax]
     f07:	00 97 0f 94 03 00    	add    BYTE PTR [edi+0x3940f],dl
     f0d:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     f10:	0f 6b 04 00          	packssdw mm0,QWORD PTR [eax+eax*1]
     f14:	00 64 01 0f          	add    BYTE PTR [ecx+eax*1+0xf],ah
     f18:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
     f1b:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     f1e:	0f af 02             	imul   eax,DWORD PTR [edx]
     f21:	00 00                	add    BYTE PTR [eax],al
     f23:	66 01 0f             	add    WORD PTR [edi],cx
     f26:	2a 03                	sub    al,BYTE PTR [ebx]
     f28:	00 00                	add    BYTE PTR [eax],al
     f2a:	67 01 0f             	add    DWORD PTR [bx],ecx
     f2d:	1d 03 00 00 68       	sbb    eax,0x68000003
     f32:	01 0f                	add    DWORD PTR [edi],ecx
     f34:	e5 04                	in     eax,0x4
     f36:	00 00                	add    BYTE PTR [eax],al
     f38:	69 01 0f 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e0f
     f3e:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     f41:	0f e3 02             	pavgw  mm0,QWORD PTR [edx]
     f44:	00 00                	add    BYTE PTR [eax],al
     f46:	71 01                	jno    f49 <sysEnter_Vector-0x12f0b7>
     f48:	0f af 04 00          	imul   eax,DWORD PTR [eax+eax*1]
     f4c:	00 00                	add    BYTE PTR [eax],al
     f4e:	03 0f                	add    ecx,DWORD PTR [edi]
     f50:	5c                   	pop    esp
     f51:	04 00                	add    al,0x0
     f53:	00 01                	add    BYTE PTR [ecx],al
     f55:	03 0f                	add    ecx,DWORD PTR [edi]
     f57:	ab                   	stos   DWORD PTR es:[edi],eax
     f58:	03 00                	add    eax,DWORD PTR [eax]
     f5a:	00 02                	add    BYTE PTR [edx],al
     f5c:	03 0f                	add    ecx,DWORD PTR [edi]
     f5e:	84 03                	test   BYTE PTR [ebx],al
     f60:	00 00                	add    BYTE PTR [eax],al
     f62:	03 03                	add    eax,DWORD PTR [ebx]
     f64:	0f 22                	(bad)  
     f66:	04 00                	add    al,0x0
     f68:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f6b:	0f 85 04 00 00 05    	jne    5000f75 <sysEnter_Vector+0x4ed0f75>
     f71:	03 0f                	add    ecx,DWORD PTR [edi]
     f73:	d0 03                	rol    BYTE PTR [ebx],1
     f75:	00 00                	add    BYTE PTR [eax],al
     f77:	06                   	push   es
     f78:	03 00                	add    eax,DWORD PTR [eax]
     f7a:	10 04 02             	adc    BYTE PTR [edx+eax*1],al
     f7d:	04 07                	add    al,0x7
     f7f:	5c                   	pop    esp
     f80:	00 00                	add    BYTE PTR [eax],al
     f82:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
     f88:	00 11                	add    BYTE PTR [ecx],dl
     f8a:	fe 06                	inc    BYTE PTR [esi]
     f8c:	00 00                	add    BYTE PTR [eax],al
     f8e:	01 0e                	add    DWORD PTR [esi],ecx
     f90:	3a 00                	cmp    al,BYTE PTR [eax]
     f92:	00 00                	add    BYTE PTR [eax],al
     f94:	e8 08 00 9f 31       	call   319f0fa1 <sysEnter_Vector+0x318c0fa1>
     f99:	00 00                	add    BYTE PTR [eax],al
     f9b:	00 01                	add    BYTE PTR [ecx],al
     f9d:	9c                   	pushf  
     f9e:	d0 02                	rol    BYTE PTR [edx],1
     fa0:	00 00                	add    BYTE PTR [eax],al
     fa2:	12 24 05 00 00 01 0e 	adc    ah,BYTE PTR [eax*1+0xe010000]
     fa9:	86 02                	xchg   BYTE PTR [edx],al
     fab:	00 00                	add    BYTE PTR [eax],al
     fad:	02 91 00 12 20 06    	add    dl,BYTE PTR [ecx+0x6201200]
     fb3:	00 00                	add    BYTE PTR [eax],al
     fb5:	01 0e                	add    DWORD PTR [esi],ecx
     fb7:	d0 02                	rol    BYTE PTR [edx],1
     fb9:	00 00                	add    BYTE PTR [eax],al
     fbb:	02 91 04 12 05 07    	add    dl,BYTE PTR [ecx+0x7051204]
     fc1:	00 00                	add    BYTE PTR [eax],al
     fc3:	01 0e                	add    DWORD PTR [esi],ecx
     fc5:	3a 00                	cmp    al,BYTE PTR [eax]
     fc7:	00 00                	add    BYTE PTR [eax],al
     fc9:	02 91 08 00 05 04    	add    dl,BYTE PTR [ecx+0x4050008]
     fcf:	7a 01                	jp     fd2 <sysEnter_Vector-0x12f02e>
     fd1:	00 00                	add    BYTE PTR [eax],al
     fd3:	11 ed                	adc    ebp,ebp
     fd5:	05 00 00 01 13       	add    eax,0x13010000
     fda:	7d 02                	jge    fde <sysEnter_Vector-0x12f022>
     fdc:	00 00                	add    BYTE PTR [eax],al
     fde:	19 09                	sbb    DWORD PTR [ecx],ecx
     fe0:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
     fe6:	01 9c 0c 03 00 00 12 	add    DWORD PTR [esp+ecx*1+0x12000003],ebx
     fed:	24 05                	and    al,0x5
     fef:	00 00                	add    BYTE PTR [eax],al
     ff1:	01 13                	add    DWORD PTR [ebx],edx
     ff3:	86 02                	xchg   BYTE PTR [edx],al
     ff5:	00 00                	add    BYTE PTR [eax],al
     ff7:	02 91 00 12 74 06    	add    dl,BYTE PTR [ecx+0x6741200]
     ffd:	00 00                	add    BYTE PTR [eax],al
     fff:	01 13                	add    DWORD PTR [ebx],edx
    1001:	a9 00 00 00 02       	test   eax,0x2000000
    1006:	91                   	xchg   ecx,eax
    1007:	04 00                	add    al,0x0
    1009:	13 e3                	adc    esp,ebx
    100b:	06                   	push   es
    100c:	00 00                	add    BYTE PTR [eax],al
    100e:	01 19                	add    DWORD PTR [ecx],ebx
    1010:	45                   	inc    ebp
    1011:	09 00                	or     DWORD PTR [eax],eax
    1013:	9f                   	lahf   
    1014:	59                   	pop    ecx
    1015:	00 00                	add    BYTE PTR [eax],al
    1017:	00 01                	add    BYTE PTR [ecx],al
    1019:	9c                   	pushf  
    101a:	11 ea                	adc    edx,ebp
    101c:	05 00 00 01 20       	add    eax,0x20010000
    1021:	7d 02                	jge    1025 <sysEnter_Vector-0x12efdb>
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	9e                   	sahf   
    1026:	09 00                	or     DWORD PTR [eax],eax
    1028:	9f                   	lahf   
    1029:	93                   	xchg   ebx,eax
    102a:	00 00                	add    BYTE PTR [eax],al
    102c:	00 01                	add    BYTE PTR [ecx],al
    102e:	9c                   	pushf  
    102f:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1030:	03 00                	add    eax,DWORD PTR [eax]
    1032:	00 12                	add    BYTE PTR [edx],dl
    1034:	24 05                	and    al,0x5
    1036:	00 00                	add    BYTE PTR [eax],al
    1038:	01 20                	add    DWORD PTR [eax],esp
    103a:	86 02                	xchg   BYTE PTR [edx],al
    103c:	00 00                	add    BYTE PTR [eax],al
    103e:	02 91 00 12 74 06    	add    dl,BYTE PTR [ecx+0x6741200]
    1044:	00 00                	add    BYTE PTR [eax],al
    1046:	01 20                	add    DWORD PTR [eax],esp
    1048:	a9 00 00 00 02       	test   eax,0x2000000
    104d:	91                   	xchg   ecx,eax
    104e:	04 12                	add    al,0x12
    1050:	1d 05 00 00 01       	sbb    eax,0x1000005
    1055:	20 7d 02             	and    BYTE PTR [ebp+0x2],bh
    1058:	00 00                	add    BYTE PTR [eax],al
    105a:	02 91 08 14 f4 04    	add    dl,BYTE PTR [ecx+0x4f41408]
    1060:	00 00                	add    BYTE PTR [eax],al
    1062:	01 22                	add    DWORD PTR [edx],esp
    1064:	7d 02                	jge    1068 <sysEnter_Vector-0x12ef98>
    1066:	00 00                	add    BYTE PTR [eax],al
    1068:	02 91 6c 00 15 03    	add    dl,BYTE PTR [ecx+0x315006c]
    106e:	05 00 00 01 2e       	add    eax,0x2e010000
    1073:	31 0a                	xor    DWORD PTR [edx],ecx
    1075:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
    107b:	01 9c 93 03 00 00 12 	add    DWORD PTR [ebx+edx*4+0x12000003],ebx
    1082:	bd 06 00 00 01       	mov    ebp,0x1000006
    1087:	2e                   	cs
    1088:	7d 02                	jge    108c <sysEnter_Vector-0x12ef74>
    108a:	00 00                	add    BYTE PTR [eax],al
    108c:	02 91 00 00 11 62    	add    dl,BYTE PTR [ecx+0x62110000]
    1092:	06                   	push   es
    1093:	00 00                	add    BYTE PTR [eax],al
    1095:	01 33                	add    DWORD PTR [ebx],esi
    1097:	3a 00                	cmp    al,BYTE PTR [eax]
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	5b                   	pop    ebx
    109c:	0a 00                	or     al,BYTE PTR [eax]
    109e:	9f                   	lahf   
    109f:	35 00 00 00 01       	xor    eax,0x1000000
    10a4:	9c                   	pushf  
    10a5:	e5 03                	in     eax,0x3
    10a7:	00 00                	add    BYTE PTR [eax],al
    10a9:	12 bd 06 00 00 01    	adc    bh,BYTE PTR [ebp+0x1000006]
    10af:	33 7d 02             	xor    edi,DWORD PTR [ebp+0x2]
    10b2:	00 00                	add    BYTE PTR [eax],al
    10b4:	02 91 00 12 79 06    	add    dl,BYTE PTR [ecx+0x6791200]
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	01 33                	add    DWORD PTR [ebx],esi
    10be:	7d 02                	jge    10c2 <sysEnter_Vector-0x12ef3e>
    10c0:	00 00                	add    BYTE PTR [eax],al
    10c2:	02 91 04 12 a8 06    	add    dl,BYTE PTR [ecx+0x6a81204]
    10c8:	00 00                	add    BYTE PTR [eax],al
    10ca:	01 33                	add    DWORD PTR [ebx],esi
    10cc:	3a 00                	cmp    al,BYTE PTR [eax]
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	02 91 08 12 68 06    	add    dl,BYTE PTR [ecx+0x6681208]
    10d6:	00 00                	add    BYTE PTR [eax],al
    10d8:	01 33                	add    DWORD PTR [ebx],esi
    10da:	3a 00                	cmp    al,BYTE PTR [eax]
    10dc:	00 00                	add    BYTE PTR [eax],al
    10de:	02 91 0c 00 11 6f    	add    dl,BYTE PTR [ecx+0x6f11000c]
    10e4:	06                   	push   es
    10e5:	00 00                	add    BYTE PTR [eax],al
    10e7:	01 38                	add    DWORD PTR [eax],edi
    10e9:	3a 00                	cmp    al,BYTE PTR [eax]
    10eb:	00 00                	add    BYTE PTR [eax],al
    10ed:	90                   	nop
    10ee:	0a 00                	or     al,BYTE PTR [eax]
    10f0:	9f                   	lahf   
    10f1:	26 00 00             	add    BYTE PTR es:[eax],al
    10f4:	00 01                	add    BYTE PTR [ecx],al
    10f6:	9c                   	pushf  
    10f7:	37                   	aaa    
    10f8:	04 00                	add    al,0x0
    10fa:	00 12                	add    BYTE PTR [edx],dl
    10fc:	bd 06 00 00 01       	mov    ebp,0x1000006
    1101:	38 7d 02             	cmp    BYTE PTR [ebp+0x2],bh
    1104:	00 00                	add    BYTE PTR [eax],al
    1106:	02 91 00 12 79 06    	add    dl,BYTE PTR [ecx+0x6791200]
    110c:	00 00                	add    BYTE PTR [eax],al
    110e:	01 38                	add    DWORD PTR [eax],edi
    1110:	7d 02                	jge    1114 <sysEnter_Vector-0x12eeec>
    1112:	00 00                	add    BYTE PTR [eax],al
    1114:	02 91 04 12 a8 06    	add    dl,BYTE PTR [ecx+0x6a81204]
    111a:	00 00                	add    BYTE PTR [eax],al
    111c:	01 38                	add    DWORD PTR [eax],edi
    111e:	3a 00                	cmp    al,BYTE PTR [eax]
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	02 91 08 12 68 06    	add    dl,BYTE PTR [ecx+0x6681208]
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	01 38                	add    DWORD PTR [eax],edi
    112c:	3a 00                	cmp    al,BYTE PTR [eax]
    112e:	00 00                	add    BYTE PTR [eax],al
    1130:	02 91 0c 00 11 c1    	add    dl,BYTE PTR [ecx-0x3eeefff4]
    1136:	05 00 00 01 3d       	add    eax,0x3d010000
    113b:	3a 00                	cmp    al,BYTE PTR [eax]
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	b6 0a                	mov    dh,0xa
    1141:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    1147:	01 9c 89 04 00 00 12 	add    DWORD PTR [ecx+ecx*4+0x12000004],ebx
    114e:	bd 06 00 00 01       	mov    ebp,0x1000006
    1153:	3d 7d 02 00 00       	cmp    eax,0x27d
    1158:	02 91 00 12 79 06    	add    dl,BYTE PTR [ecx+0x6791200]
    115e:	00 00                	add    BYTE PTR [eax],al
    1160:	01 3d 7d 02 00 00    	add    DWORD PTR ds:0x27d,edi
    1166:	02 91 04 12 a8 06    	add    dl,BYTE PTR [ecx+0x6a81204]
    116c:	00 00                	add    BYTE PTR [eax],al
    116e:	01 3d 3a 00 00 00    	add    DWORD PTR ds:0x3a,edi
    1174:	02 91 08 12 68 06    	add    dl,BYTE PTR [ecx+0x6681208]
    117a:	00 00                	add    BYTE PTR [eax],al
    117c:	01 3d 3a 00 00 00    	add    DWORD PTR ds:0x3a,edi
    1182:	02 91 0c 00 11 1a    	add    dl,BYTE PTR [ecx+0x1a11000c]
    1188:	06                   	push   es
    1189:	00 00                	add    BYTE PTR [eax],al
    118b:	01 42 3a             	add    DWORD PTR [edx+0x3a],eax
    118e:	00 00                	add    BYTE PTR [eax],al
    1190:	00 eb                	add    bl,ch
    1192:	0a 00                	or     al,BYTE PTR [eax]
    1194:	9f                   	lahf   
    1195:	26 00 00             	add    BYTE PTR es:[eax],al
    1198:	00 01                	add    BYTE PTR [ecx],al
    119a:	9c                   	pushf  
    119b:	db 04 00             	fild   DWORD PTR [eax+eax*1]
    119e:	00 12                	add    BYTE PTR [edx],dl
    11a0:	bd 06 00 00 01       	mov    ebp,0x1000006
    11a5:	42                   	inc    edx
    11a6:	7d 02                	jge    11aa <sysEnter_Vector-0x12ee56>
    11a8:	00 00                	add    BYTE PTR [eax],al
    11aa:	02 91 00 12 79 06    	add    dl,BYTE PTR [ecx+0x6791200]
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	01 42 7d             	add    DWORD PTR [edx+0x7d],eax
    11b5:	02 00                	add    al,BYTE PTR [eax]
    11b7:	00 02                	add    BYTE PTR [edx],al
    11b9:	91                   	xchg   ecx,eax
    11ba:	04 12                	add    al,0x12
    11bc:	a8 06                	test   al,0x6
    11be:	00 00                	add    BYTE PTR [eax],al
    11c0:	01 42 3a             	add    DWORD PTR [edx+0x3a],eax
    11c3:	00 00                	add    BYTE PTR [eax],al
    11c5:	00 02                	add    BYTE PTR [edx],al
    11c7:	91                   	xchg   ecx,eax
    11c8:	08 12                	or     BYTE PTR [edx],dl
    11ca:	68 06 00 00 01       	push   0x1000006
    11cf:	42                   	inc    edx
    11d0:	3a 00                	cmp    al,BYTE PTR [eax]
    11d2:	00 00                	add    BYTE PTR [eax],al
    11d4:	02 91 0c 00 11 8c    	add    dl,BYTE PTR [ecx-0x73eefff4]
    11da:	06                   	push   es
    11db:	00 00                	add    BYTE PTR [eax],al
    11dd:	01 47 3a             	add    DWORD PTR [edi+0x3a],eax
    11e0:	00 00                	add    BYTE PTR [eax],al
    11e2:	00 11                	add    BYTE PTR [ecx],dl
    11e4:	0b 00                	or     eax,DWORD PTR [eax]
    11e6:	9f                   	lahf   
    11e7:	2e 00 00             	add    BYTE PTR cs:[eax],al
    11ea:	00 01                	add    BYTE PTR [ecx],al
    11ec:	9c                   	pushf  
    11ed:	1f                   	pop    ds
    11ee:	05 00 00 12 bd       	add    eax,0xbd120000
    11f3:	06                   	push   es
    11f4:	00 00                	add    BYTE PTR [eax],al
    11f6:	01 47 7d             	add    DWORD PTR [edi+0x7d],eax
    11f9:	02 00                	add    al,BYTE PTR [eax]
    11fb:	00 02                	add    BYTE PTR [edx],al
    11fd:	91                   	xchg   ecx,eax
    11fe:	00 12                	add    BYTE PTR [edx],dl
    1200:	b8 05 00 00 01       	mov    eax,0x1000005
    1205:	47                   	inc    edi
    1206:	9b                   	fwait
    1207:	00 00                	add    BYTE PTR [eax],al
    1209:	00 02                	add    BYTE PTR [edx],al
    120b:	91                   	xchg   ecx,eax
    120c:	04 12                	add    al,0x12
    120e:	cd 05                	int    0x5
    1210:	00 00                	add    BYTE PTR [eax],al
    1212:	01 47 3a             	add    DWORD PTR [edi+0x3a],eax
    1215:	00 00                	add    BYTE PTR [eax],al
    1217:	00 02                	add    BYTE PTR [edx],al
    1219:	91                   	xchg   ecx,eax
    121a:	08 00                	or     BYTE PTR [eax],al
    121c:	11 c8                	adc    eax,ecx
    121e:	05 00 00 01 4c       	add    eax,0x4c010000
    1223:	3a 00                	cmp    al,BYTE PTR [eax]
    1225:	00 00                	add    BYTE PTR [eax],al
    1227:	3f                   	aas    
    1228:	0b 00                	or     eax,DWORD PTR [eax]
    122a:	9f                   	lahf   
    122b:	26 00 00             	add    BYTE PTR es:[eax],al
    122e:	00 01                	add    BYTE PTR [ecx],al
    1230:	9c                   	pushf  
    1231:	63 05 00 00 12 bd    	arpl   WORD PTR ds:0xbd120000,ax
    1237:	06                   	push   es
    1238:	00 00                	add    BYTE PTR [eax],al
    123a:	01 4c 7d 02          	add    DWORD PTR [ebp+edi*2+0x2],ecx
    123e:	00 00                	add    BYTE PTR [eax],al
    1240:	02 91 00 12 b8 05    	add    dl,BYTE PTR [ecx+0x5b81200]
    1246:	00 00                	add    BYTE PTR [eax],al
    1248:	01 4c 9b 00          	add    DWORD PTR [ebx+ebx*4+0x0],ecx
    124c:	00 00                	add    BYTE PTR [eax],al
    124e:	02 91 04 12 cd 05    	add    dl,BYTE PTR [ecx+0x5cd1204]
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	01 4c 3a 00          	add    DWORD PTR [edx+edi*1+0x0],ecx
    125a:	00 00                	add    BYTE PTR [eax],al
    125c:	02 91 08 00 11 53    	add    dl,BYTE PTR [ecx+0x53110008]
    1262:	05 00 00 01 50       	add    eax,0x50010000
    1267:	3a 00                	cmp    al,BYTE PTR [eax]
    1269:	00 00                	add    BYTE PTR [eax],al
    126b:	65 0b 00             	or     eax,DWORD PTR gs:[eax]
    126e:	9f                   	lahf   
    126f:	2d 00 00 00 01       	sub    eax,0x1000000
    1274:	9c                   	pushf  
    1275:	99                   	cdq    
    1276:	05 00 00 12 24       	add    eax,0x24120000
    127b:	05 00 00 01 50       	add    eax,0x50010000
    1280:	86 02                	xchg   BYTE PTR [edx],al
    1282:	00 00                	add    BYTE PTR [eax],al
    1284:	02 91 00 12 15 06    	add    dl,BYTE PTR [ecx+0x6151200]
    128a:	00 00                	add    BYTE PTR [eax],al
    128c:	01 50 99             	add    DWORD PTR [eax-0x67],edx
    128f:	05 00 00 02 91       	add    eax,0x91020000
    1294:	04 00                	add    al,0x0
    1296:	05 04 85 01 00       	add    eax,0x18504
    129b:	00 11                	add    BYTE PTR [ecx],dl
    129d:	15 06 00 00 01       	adc    eax,0x1000006
    12a2:	55                   	push   ebp
    12a3:	3a 00                	cmp    al,BYTE PTR [eax]
    12a5:	00 00                	add    BYTE PTR [eax],al
    12a7:	92                   	xchg   edx,eax
    12a8:	0b 00                	or     eax,DWORD PTR [eax]
    12aa:	9f                   	lahf   
    12ab:	23 00                	and    eax,DWORD PTR [eax]
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	01 9c d5 05 00 00 12 	add    DWORD PTR [ebp+edx*8+0x12000005],ebx
    12b6:	24 05                	and    al,0x5
    12b8:	00 00                	add    BYTE PTR [eax],al
    12ba:	01 55 86             	add    DWORD PTR [ebp-0x7a],edx
    12bd:	02 00                	add    al,BYTE PTR [eax]
    12bf:	00 02                	add    BYTE PTR [edx],al
    12c1:	91                   	xchg   ecx,eax
    12c2:	00 12                	add    BYTE PTR [edx],dl
    12c4:	15 06 00 00 01       	adc    eax,0x1000006
    12c9:	55                   	push   ebp
    12ca:	99                   	cdq    
    12cb:	05 00 00 02 91       	add    eax,0x91020000
    12d0:	04 00                	add    al,0x0
    12d2:	11 a1 05 00 00 01    	adc    DWORD PTR [ecx+0x1000005],esp
    12d8:	5a                   	pop    edx
    12d9:	3a 00                	cmp    al,BYTE PTR [eax]
    12db:	00 00                	add    BYTE PTR [eax],al
    12dd:	b5 0b                	mov    ch,0xb
    12df:	00 9f f5 02 00 00    	add    BYTE PTR [edi+0x2f5],bl
    12e5:	01 9c 77 06 00 00 12 	add    DWORD PTR [edi+esi*2+0x12000006],ebx
    12ec:	d0 06                	rol    BYTE PTR [esi],1
    12ee:	00 00                	add    BYTE PTR [eax],al
    12f0:	01 5a a9             	add    DWORD PTR [edx-0x57],ebx
    12f3:	00 00                	add    BYTE PTR [eax],al
    12f5:	00 02                	add    BYTE PTR [edx],al
    12f7:	91                   	xchg   ecx,eax
    12f8:	00 12                	add    BYTE PTR [edx],dl
    12fa:	31 06                	xor    DWORD PTR [esi],eax
    12fc:	00 00                	add    BYTE PTR [eax],al
    12fe:	01 5a 86             	add    DWORD PTR [edx-0x7a],ebx
    1301:	02 00                	add    al,BYTE PTR [eax]
    1303:	00 02                	add    BYTE PTR [edx],al
    1305:	91                   	xchg   ecx,eax
    1306:	04 14                	add    al,0x14
    1308:	fc                   	cld    
    1309:	01 00                	add    DWORD PTR [eax],eax
    130b:	00 01                	add    BYTE PTR [ecx],al
    130d:	5c                   	pop    esp
    130e:	77 06                	ja     1316 <sysEnter_Vector-0x12ecea>
    1310:	00 00                	add    BYTE PTR [eax],al
    1312:	02 91 5e 14 4c 06    	add    dl,BYTE PTR [ecx+0x64c145e]
    1318:	00 00                	add    BYTE PTR [eax],al
    131a:	01 5d 86             	add    DWORD PTR [ebp-0x7a],ebx
    131d:	02 00                	add    al,BYTE PTR [eax]
    131f:	00 02                	add    BYTE PTR [edx],al
    1321:	91                   	xchg   ecx,eax
    1322:	6c                   	ins    BYTE PTR es:[edi],dx
    1323:	14 f4                	adc    al,0xf4
    1325:	04 00                	add    al,0x0
    1327:	00 01                	add    BYTE PTR [ecx],al
    1329:	5e                   	pop    esi
    132a:	3a 00                	cmp    al,BYTE PTR [eax]
    132c:	00 00                	add    BYTE PTR [eax],al
    132e:	02 91 68 14 14 06    	add    dl,BYTE PTR [ecx+0x6141468]
    1334:	00 00                	add    BYTE PTR [eax],al
    1336:	01 5f 85             	add    DWORD PTR [edi-0x7b],ebx
    1339:	01 00                	add    DWORD PTR [eax],eax
    133b:	00 02                	add    BYTE PTR [edx],al
    133d:	91                   	xchg   ecx,eax
    133e:	54                   	push   esp
    133f:	16                   	push   ss
    1340:	43                   	inc    ebx
    1341:	0d 00 9f bd 00       	or     eax,0xbd9f00
    1346:	00 00                	add    BYTE PTR [eax],al
    1348:	5e                   	pop    esi
    1349:	06                   	push   es
    134a:	00 00                	add    BYTE PTR [eax],al
    134c:	17                   	pop    ss
    134d:	72 65                	jb     13b4 <sysEnter_Vector-0x12ec4c>
    134f:	73 00                	jae    1351 <sysEnter_Vector-0x12ecaf>
    1351:	01 85 3a 00 00 00    	add    DWORD PTR [ebp+0x3a],eax
    1357:	02 91 64 00 18 14    	add    dl,BYTE PTR [ecx+0x14180064]
    135d:	0e                   	push   cs
    135e:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
    1364:	17                   	pop    ss
    1365:	72 65                	jb     13cc <sysEnter_Vector-0x12ec34>
    1367:	73 00                	jae    1369 <sysEnter_Vector-0x12ec97>
    1369:	01 94 3a 00 00 00 02 	add    DWORD PTR [edx+edi*1+0x2000000],edx
    1370:	91                   	xchg   ecx,eax
    1371:	60                   	pusha  
    1372:	00 00                	add    BYTE PTR [eax],al
    1374:	0a 25 00 00 00 87    	or     ah,BYTE PTR ds:0x87000000
    137a:	06                   	push   es
    137b:	00 00                	add    BYTE PTR [eax],al
    137d:	19 bb 00 00 00 01    	sbb    DWORD PTR [ebx+0x1000000],edi
    1383:	00 11                	add    BYTE PTR [ecx],dl
    1385:	40                   	inc    eax
    1386:	05 00 00 01 a0       	add    eax,0xa0010000
    138b:	9b                   	fwait
    138c:	00 00                	add    BYTE PTR [eax],al
    138e:	00 aa 0e 00 9f 29    	add    BYTE PTR [edx+0x299f000e],ch
    1394:	00 00                	add    BYTE PTR [eax],al
    1396:	00 01                	add    BYTE PTR [ecx],al
    1398:	9c                   	pushf  
    1399:	af                   	scas   eax,DWORD PTR es:[edi]
    139a:	06                   	push   es
    139b:	00 00                	add    BYTE PTR [eax],al
    139d:	12 1d 05 00 00 01    	adc    bl,BYTE PTR ds:0x1000005
    13a3:	a0 7d 02 00 00       	mov    al,ds:0x27d
    13a8:	02 91 00 00 11 73    	add    dl,BYTE PTR [ecx+0x73110000]
    13ae:	05 00 00 01 a5       	add    eax,0xa5010000
    13b3:	9b                   	fwait
    13b4:	00 00                	add    BYTE PTR [eax],al
    13b6:	00 d3                	add    bl,dl
    13b8:	0e                   	push   cs
    13b9:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    13bf:	01 9c d7 06 00 00 12 	add    DWORD PTR [edi+edx*8+0x12000006],ebx
    13c6:	1d 05 00 00 01       	sbb    eax,0x1000005
    13cb:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    13cc:	7d 02                	jge    13d0 <sysEnter_Vector-0x12ec30>
    13ce:	00 00                	add    BYTE PTR [eax],al
    13d0:	02 91 00 00 11 84    	add    dl,BYTE PTR [ecx-0x7bef0000]
    13d6:	05 00 00 01 aa       	add    eax,0xaa010000
    13db:	90                   	nop
    13dc:	00 00                	add    BYTE PTR [eax],al
    13de:	00 f3                	add    bl,dh
    13e0:	0e                   	push   cs
    13e1:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
    13e7:	01 9c 94 07 00 00 12 	add    DWORD PTR [esp+edx*4+0x12000007],ebx
    13ee:	39 06                	cmp    DWORD PTR [esi],eax
    13f0:	00 00                	add    BYTE PTR [eax],al
    13f2:	01 aa 94 07 00 00    	add    DWORD PTR [edx+0x794],ebp
    13f8:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    13fe:	01 aa 9a 07 00 00    	add    DWORD PTR [edx+0x79a],ebp
    1404:	02 91 04 12 1d 05    	add    dl,BYTE PTR [ecx+0x51d1204]
    140a:	00 00                	add    BYTE PTR [eax],al
    140c:	01 aa 7d 02 00 00    	add    DWORD PTR [edx+0x27d],ebp
    1412:	02 91 08 14 79 06    	add    dl,BYTE PTR [ecx+0x6791408]
    1418:	00 00                	add    BYTE PTR [eax],al
    141a:	01 ac 86 02 00 00 02 	add    DWORD PTR [esi+eax*4+0x2000002],ebp
    1421:	91                   	xchg   ecx,eax
    1422:	54                   	push   esp
    1423:	14 f0                	adc    al,0xf0
    1425:	06                   	push   es
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	01 ad 3a 00 00 00    	add    DWORD PTR [ebp+0x3a],ebp
    142e:	02 91 60 14 80 06    	add    dl,BYTE PTR [ecx+0x6801460]
    1434:	00 00                	add    BYTE PTR [eax],al
    1436:	01 ae 90 00 00 00    	add    DWORD PTR [esi+0x90],ebp
    143c:	02 91 6c 14 59 05    	add    dl,BYTE PTR [ecx+0x559146c]
    1442:	00 00                	add    BYTE PTR [eax],al
    1444:	01 af 86 02 00 00    	add    DWORD PTR [edi+0x286],ebp
    144a:	02 91 5c 14 f2 05    	add    dl,BYTE PTR [ecx+0x5f2145c]
    1450:	00 00                	add    BYTE PTR [eax],al
    1452:	01 b0 86 02 00 00    	add    DWORD PTR [eax+0x286],esi
    1458:	02 91 50 14 d7 06    	add    dl,BYTE PTR [ecx+0x6d71450]
    145e:	00 00                	add    BYTE PTR [eax],al
    1460:	01 b1 90 00 00 00    	add    DWORD PTR [ecx+0x90],esi
    1466:	02 91 68 14 46 05    	add    dl,BYTE PTR [ecx+0x5461468]
    146c:	00 00                	add    BYTE PTR [eax],al
    146e:	01 b2 3a 00 00 00    	add    DWORD PTR [edx+0x3a],esi
    1474:	02 91 58 14 f4 04    	add    dl,BYTE PTR [ecx+0x4f41458]
    147a:	00 00                	add    BYTE PTR [eax],al
    147c:	01 b3 3a 00 00 00    	add    DWORD PTR [ebx+0x3a],esi
    1482:	02 91 64 1b dc 05    	add    dl,BYTE PTR [ecx+0x5dc1b64]
    1488:	00 00                	add    BYTE PTR [eax],al
    148a:	01 d0                	add    eax,edx
    148c:	9e                   	sahf   
    148d:	10 00                	adc    BYTE PTR [eax],al
    148f:	9f                   	lahf   
    1490:	00 05 04 86 02 00    	add    BYTE PTR ds:0x28604,al
    1496:	00 05 04 90 00 00    	add    BYTE PTR ds:0x9004,al
    149c:	00 11                	add    BYTE PTR [ecx],dl
    149e:	d4 05                	aam    0x5
    14a0:	00 00                	add    BYTE PTR [eax],al
    14a2:	01 d5                	add    ebp,edx
    14a4:	90                   	nop
    14a5:	00 00                	add    BYTE PTR [eax],al
    14a7:	00 b4 10 00 9f 26 00 	add    BYTE PTR [eax+edx*1+0x269f00],dh
    14ae:	00 00                	add    BYTE PTR [eax],al
    14b0:	01 9c e2 07 00 00 12 	add    DWORD PTR [edx+eiz*8+0x12000007],ebx
    14b7:	39 06                	cmp    DWORD PTR [esi],eax
    14b9:	00 00                	add    BYTE PTR [eax],al
    14bb:	01 d5                	add    ebp,edx
    14bd:	94                   	xchg   esp,eax
    14be:	07                   	pop    es
    14bf:	00 00                	add    BYTE PTR [eax],al
    14c1:	02 91 00 1a 6e 00    	add    dl,BYTE PTR [ecx+0x6e1a00]
    14c7:	01 d5                	add    ebp,edx
    14c9:	9a 07 00 00 02 91 04 	call   0x491:0x2000007
    14d0:	12 1d 05 00 00 01    	adc    bl,BYTE PTR ds:0x1000005
    14d6:	d5 7d                	aad    0x7d
    14d8:	02 00                	add    al,BYTE PTR [eax]
    14da:	00 02                	add    BYTE PTR [edx],al
    14dc:	91                   	xchg   ecx,eax
    14dd:	08 00                	or     BYTE PTR [eax],al
    14df:	1c a3                	sbb    al,0xa3
    14e1:	00 00                	add    BYTE PTR [eax],al
    14e3:	00 05 37 6c 00 00    	add    BYTE PTR ds:0x6c37,al
    14e9:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    14ef:	9f                   	lahf   
    14f0:	1c 34                	sbb    al,0x34
    14f2:	01 00                	add    DWORD PTR [eax],eax
    14f4:	00 05 38 6c 00 00    	add    BYTE PTR ds:0x6c38,al
    14fa:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    1500:	9f                   	lahf   
    1501:	1c 7b                	sbb    al,0x7b
    1503:	00 00                	add    BYTE PTR [eax],al
    1505:	00 05 39 6c 00 00    	add    BYTE PTR ds:0x6c39,al
    150b:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    1511:	9f                   	lahf   
    1512:	1c 7c                	sbb    al,0x7c
    1514:	01 00                	add    DWORD PTR [eax],eax
    1516:	00 05 3a 9b 00 00    	add    BYTE PTR ds:0x9b3a,al
    151c:	00 05 03 78 71 00    	add    BYTE PTR ds:0x717803,al
    1522:	9f                   	lahf   
    1523:	1c 6e                	sbb    al,0x6e
    1525:	00 00                	add    BYTE PTR [eax],al
    1527:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    152a:	37                   	aaa    
    152b:	08 00                	or     BYTE PTR [eax],al
    152d:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    1533:	9f                   	lahf   
    1534:	05 04 85 00 00       	add    eax,0x8504
    1539:	00 1c 91             	add    BYTE PTR [ecx+edx*4],bl
    153c:	00 00                	add    BYTE PTR [eax],al
    153e:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1545:	05 03 60 71 00       	add    eax,0x716003
    154a:	9f                   	lahf   
    154b:	1c 41                	sbb    al,0x41
    154d:	00 00                	add    BYTE PTR [eax],al
    154f:	00 06                	add    BYTE PTR [esi],al
    1551:	58                   	pop    eax
    1552:	94                   	xchg   esp,eax
    1553:	07                   	pop    es
    1554:	00 00                	add    BYTE PTR [eax],al
    1556:	05 03 74 71 00       	add    eax,0x717403
    155b:	9f                   	lahf   
    155c:	1c 09                	sbb    al,0x9
    155e:	05 00 00 01 09       	add    eax,0x9010000
    1563:	86 02                	xchg   BYTE PTR [edx],al
    1565:	00 00                	add    BYTE PTR [eax],al
    1567:	05 03 84 71 00       	add    eax,0x718403
    156c:	9f                   	lahf   
    156d:	1c c4                	sbb    al,0xc4
    156f:	06                   	push   es
    1570:	00 00                	add    BYTE PTR [eax],al
    1572:	01 0a                	add    DWORD PTR [edx],ecx
    1574:	86 02                	xchg   BYTE PTR [edx],al
    1576:	00 00                	add    BYTE PTR [eax],al
    1578:	05 03 90 71 00       	add    eax,0x719003
    157d:	9f                   	lahf   
    157e:	1c 5f                	sbb    al,0x5f
    1580:	05 00 00 01 0b       	add    eax,0xb010000
    1585:	86 02                	xchg   BYTE PTR [edx],al
    1587:	00 00                	add    BYTE PTR [eax],al
    1589:	05 03 88 71 00       	add    eax,0x718803
    158e:	9f                   	lahf   
    158f:	1c ad                	sbb    al,0xad
    1591:	06                   	push   es
    1592:	00 00                	add    BYTE PTR [eax],al
    1594:	01 0c 86             	add    DWORD PTR [esi+eax*4],ecx
    1597:	02 00                	add    al,BYTE PTR [eax]
    1599:	00 05 03 8c 71 00    	add    BYTE PTR ds:0x718c03,al
    159f:	9f                   	lahf   
    15a0:	00 13                	add    BYTE PTR [ebx],dl
    15a2:	03 00                	add    eax,DWORD PTR [eax]
    15a4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    15a7:	b9 05 00 00 04       	mov    ecx,0x4000005
    15ac:	01 ac 00 00 00 0c 11 	add    DWORD PTR [eax+eax*1+0x110c0000],ebp
    15b3:	07                   	pop    es
    15b4:	00 00                	add    BYTE PTR [eax],al
    15b6:	1e                   	push   ds
    15b7:	00 00                	add    BYTE PTR [eax],al
    15b9:	00 dc                	add    ah,bl
    15bb:	10 00                	adc    BYTE PTR [eax],al
    15bd:	9f                   	lahf   
    15be:	69 01 00 00 0b 08    	imul   eax,DWORD PTR [ecx],0x80b0000
    15c4:	00 00                	add    BYTE PTR [eax],al
    15c6:	02 01                	add    al,BYTE PTR [ecx]
    15c8:	06                   	push   es
    15c9:	8c 00                	mov    WORD PTR [eax],es
    15cb:	00 00                	add    BYTE PTR [eax],al
    15cd:	02 01                	add    al,BYTE PTR [ecx]
    15cf:	06                   	push   es
    15d0:	85 00                	test   DWORD PTR [eax],eax
    15d2:	00 00                	add    BYTE PTR [eax],al
    15d4:	02 02                	add    al,BYTE PTR [edx]
    15d6:	05 72 01 00 00       	add    eax,0x172
    15db:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    15e2:	02 08                	add    cl,BYTE PTR [eax]
    15e4:	05 00 00 00 00       	add    eax,0x0
    15e9:	02 01                	add    al,BYTE PTR [ecx]
    15eb:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    15f1:	02 07                	add    al,BYTE PTR [edi]
    15f3:	19 01                	sbb    DWORD PTR [ecx],eax
    15f5:	00 00                	add    BYTE PTR [eax],al
    15f7:	04 0e                	add    al,0xe
    15f9:	00 00                	add    BYTE PTR [eax],al
    15fb:	00 02                	add    BYTE PTR [edx],al
    15fd:	34 61                	xor    al,0x61
    15ff:	00 00                	add    BYTE PTR [eax],al
    1601:	00 02                	add    BYTE PTR [edx],al
    1603:	04 07                	add    al,0x7
    1605:	61                   	popa   
    1606:	00 00                	add    BYTE PTR [eax],al
    1608:	00 02                	add    BYTE PTR [edx],al
    160a:	08 07                	or     BYTE PTR [edi],al
    160c:	57                   	push   edi
    160d:	00 00                	add    BYTE PTR [eax],al
    160f:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    1616:	56                   	push   esi
    1617:	61                   	popa   
    1618:	00 00                	add    BYTE PTR [eax],al
    161a:	00 02                	add    BYTE PTR [edx],al
    161c:	04 05                	add    al,0x5
    161e:	05 00 00 00 02       	add    eax,0x2000000
    1623:	0c 04                	or     al,0x4
    1625:	66 01 00             	add    WORD PTR [eax],ax
    1628:	00 02                	add    BYTE PTR [edx],al
    162a:	01 02                	add    DWORD PTR [edx],eax
    162c:	13 01                	adc    eax,DWORD PTR [ecx]
    162e:	00 00                	add    BYTE PTR [eax],al
    1630:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1633:	83 01 00             	add    DWORD PTR [ecx],0x0
    1636:	00 05 bf 03 00 00    	add    BYTE PTR ds:0x3bf,al
    163c:	04 61                	add    al,0x61
    163e:	00 00                	add    BYTE PTR [eax],al
    1640:	00 06                	add    BYTE PTR [esi],al
    1642:	15 83 01 00 00       	adc    eax,0x183
    1647:	06                   	push   es
    1648:	5f                   	pop    edi
    1649:	03 00                	add    eax,DWORD PTR [eax]
    164b:	00 00                	add    BYTE PTR [eax],al
    164d:	06                   	push   es
    164e:	cb                   	retf   
    164f:	04 00                	add    al,0x0
    1651:	00 01                	add    BYTE PTR [ecx],al
    1653:	06                   	push   es
    1654:	d6                   	(bad)  
    1655:	02 00                	add    al,BYTE PTR [eax]
    1657:	00 02                	add    BYTE PTR [edx],al
    1659:	06                   	push   es
    165a:	bd 04 00 00 03       	mov    ebp,0x3000004
    165f:	06                   	push   es
    1660:	08 03                	or     BYTE PTR [ebx],al
    1662:	00 00                	add    BYTE PTR [eax],al
    1664:	04 06                	add    al,0x6
    1666:	f3 02 00             	repz add al,BYTE PTR [eax]
    1669:	00 05 06 52 03 00    	add    BYTE PTR ds:0x35206,al
    166f:	00 0a                	add    BYTE PTR [edx],cl
    1671:	06                   	push   es
    1672:	33 04 00             	xor    eax,DWORD PTR [eax+eax*1]
    1675:	00 0b                	add    BYTE PTR [ebx],cl
    1677:	06                   	push   es
    1678:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1679:	03 00                	add    eax,DWORD PTR [eax]
    167b:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    167e:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    1683:	06                   	push   es
    1684:	40                   	inc    eax
    1685:	04 00                	add    al,0x0
    1687:	00 0e                	add    BYTE PTR [esi],cl
    1689:	06                   	push   es
    168a:	95                   	xchg   ebp,eax
    168b:	04 00                	add    al,0x0
    168d:	00 0f                	add    BYTE PTR [edi],cl
    168f:	06                   	push   es
    1690:	3f                   	aas    
    1691:	03 00                	add    eax,DWORD PTR [eax]
    1693:	00 10                	add    BYTE PTR [eax],dl
    1695:	06                   	push   es
    1696:	4d                   	dec    ebp
    1697:	04 00                	add    al,0x0
    1699:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    169c:	df 03                	fild   WORD PTR [ebx]
    169e:	00 00                	add    BYTE PTR [eax],al
    16a0:	50                   	push   eax
    16a1:	06                   	push   es
    16a2:	78 04                	js     16a8 <sysEnter_Vector-0x12e958>
    16a4:	00 00                	add    BYTE PTR [eax],al
    16a6:	59                   	pop    ecx
    16a7:	06                   	push   es
    16a8:	8b 02                	mov    eax,DWORD PTR [edx]
    16aa:	00 00                	add    BYTE PTR [eax],al
    16ac:	61                   	popa   
    16ad:	06                   	push   es
    16ae:	fc                   	cld    
    16af:	03 00                	add    eax,DWORD PTR [eax]
    16b1:	00 97 07 94 03 00    	add    BYTE PTR [edi+0x39407],dl
    16b7:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    16ba:	07                   	pop    es
    16bb:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    16bf:	64 01 07             	add    DWORD PTR fs:[edi],eax
    16c2:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
    16c5:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    16c8:	07                   	pop    es
    16c9:	af                   	scas   eax,DWORD PTR es:[edi]
    16ca:	02 00                	add    al,BYTE PTR [eax]
    16cc:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    16cf:	07                   	pop    es
    16d0:	2a 03                	sub    al,BYTE PTR [ebx]
    16d2:	00 00                	add    BYTE PTR [eax],al
    16d4:	67 01 07             	add    DWORD PTR [bx],eax
    16d7:	1d 03 00 00 68       	sbb    eax,0x68000003
    16dc:	01 07                	add    DWORD PTR [edi],eax
    16de:	e5 04                	in     eax,0x4
    16e0:	00 00                	add    BYTE PTR [eax],al
    16e2:	69 01 07 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e07
    16e8:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    16eb:	07                   	pop    es
    16ec:	e3 02                	jecxz  16f0 <sysEnter_Vector-0x12e910>
    16ee:	00 00                	add    BYTE PTR [eax],al
    16f0:	71 01                	jno    16f3 <sysEnter_Vector-0x12e90d>
    16f2:	07                   	pop    es
    16f3:	af                   	scas   eax,DWORD PTR es:[edi]
    16f4:	04 00                	add    al,0x0
    16f6:	00 00                	add    BYTE PTR [eax],al
    16f8:	03 07                	add    eax,DWORD PTR [edi]
    16fa:	5c                   	pop    esp
    16fb:	04 00                	add    al,0x0
    16fd:	00 01                	add    BYTE PTR [ecx],al
    16ff:	03 07                	add    eax,DWORD PTR [edi]
    1701:	ab                   	stos   DWORD PTR es:[edi],eax
    1702:	03 00                	add    eax,DWORD PTR [eax]
    1704:	00 02                	add    BYTE PTR [edx],al
    1706:	03 07                	add    eax,DWORD PTR [edi]
    1708:	84 03                	test   BYTE PTR [ebx],al
    170a:	00 00                	add    BYTE PTR [eax],al
    170c:	03 03                	add    eax,DWORD PTR [ebx]
    170e:	07                   	pop    es
    170f:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    1712:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1715:	07                   	pop    es
    1716:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    1719:	00 05 03 07 d0 03    	add    BYTE PTR ds:0x3d00703,al
    171f:	00 00                	add    BYTE PTR [eax],al
    1721:	06                   	push   es
    1722:	03 00                	add    eax,DWORD PTR [eax]
    1724:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1727:	5c                   	pop    esp
    1728:	00 00                	add    BYTE PTR [eax],al
    172a:	00 08                	add    BYTE PTR [eax],cl
    172c:	04 25                	add    al,0x25
    172e:	00 00                	add    BYTE PTR [eax],al
    1730:	00 09                	add    BYTE PTR [ecx],cl
    1732:	4a                   	dec    edx
    1733:	07                   	pop    es
    1734:	00 00                	add    BYTE PTR [eax],al
    1736:	01 0f                	add    DWORD PTR [edi],ecx
    1738:	dc 10                	fcom   QWORD PTR [eax]
    173a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    1740:	01 9c b4 01 00 00 0a 	add    DWORD PTR [esp+esi*4+0xa000001],ebx
    1747:	79 06                	jns    174f <sysEnter_Vector-0x12e8b1>
    1749:	00 00                	add    BYTE PTR [eax],al
    174b:	01 0f                	add    DWORD PTR [edi],ecx
    174d:	8a 01                	mov    al,BYTE PTR [ecx]
    174f:	00 00                	add    BYTE PTR [eax],al
    1751:	02 91 00 00 09 40    	add    dl,BYTE PTR [ecx+0x40090000]
    1757:	07                   	pop    es
    1758:	00 00                	add    BYTE PTR [eax],al
    175a:	01 14 02             	add    DWORD PTR [edx+eax*1],edx
    175d:	11 00                	adc    DWORD PTR [eax],eax
    175f:	9f                   	lahf   
    1760:	43                   	inc    ebx
    1761:	00 00                	add    BYTE PTR [eax],al
    1763:	00 01                	add    BYTE PTR [ecx],al
    1765:	9c                   	pushf  
    1766:	e4 01                	in     al,0x1
    1768:	00 00                	add    BYTE PTR [eax],al
    176a:	0b 63 00             	or     esp,DWORD PTR [ebx+0x0]
    176d:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
    1774:	91                   	xchg   ecx,eax
    1775:	60                   	pusha  
    1776:	0c 79                	or     al,0x79
    1778:	06                   	push   es
    1779:	00 00                	add    BYTE PTR [eax],al
    177b:	01 16                	add    DWORD PTR [esi],edx
    177d:	e4 01                	in     al,0x1
    177f:	00 00                	add    BYTE PTR [eax],al
    1781:	02 91 72 00 0d 25    	add    dl,BYTE PTR [ecx+0x250d0072]
    1787:	00 00                	add    BYTE PTR [eax],al
    1789:	00 f4                	add    ah,dh
    178b:	01 00                	add    DWORD PTR [eax],eax
    178d:	00 0e                	add    BYTE PTR [esi],cl
    178f:	8f 00                	pop    DWORD PTR [eax]
    1791:	00 00                	add    BYTE PTR [eax],al
    1793:	01 00                	add    DWORD PTR [eax],eax
    1795:	0f 4f 07             	cmovg  eax,DWORD PTR [edi]
    1798:	00 00                	add    BYTE PTR [eax],al
    179a:	01 1f                	add    DWORD PTR [edi],ebx
    179c:	25 00 00 00 45       	and    eax,0x45000000
    17a1:	11 00                	adc    DWORD PTR [eax],eax
    17a3:	9f                   	lahf   
    17a4:	43                   	inc    ebx
    17a5:	00 00                	add    BYTE PTR [eax],al
    17a7:	00 01                	add    BYTE PTR [ecx],al
    17a9:	9c                   	pushf  
    17aa:	1a 02                	sbb    al,BYTE PTR [edx]
    17ac:	00 00                	add    BYTE PTR [eax],al
    17ae:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
    17b1:	01 21                	add    DWORD PTR [ecx],esp
    17b3:	25 00 00 00 02       	and    eax,0x2000000
    17b8:	91                   	xchg   ecx,eax
    17b9:	73 00                	jae    17bb <sysEnter_Vector-0x12e845>
    17bb:	11 2a                	adc    DWORD PTR [edx],ebp
    17bd:	07                   	pop    es
    17be:	00 00                	add    BYTE PTR [eax],al
    17c0:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    17c6:	88 11                	mov    BYTE PTR [ecx],dl
    17c8:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
    17ce:	01 9c 93 02 00 00 0a 	add    DWORD PTR [ebx+edx*4+0xa000002],ebx
    17d5:	79 06                	jns    17dd <sysEnter_Vector-0x12e823>
    17d7:	00 00                	add    BYTE PTR [eax],al
    17d9:	01 2d 8a 01 00 00    	add    DWORD PTR ds:0x18a,ebp
    17df:	02 91 00 0a 2f 07    	add    dl,BYTE PTR [ecx+0x72f0a00]
    17e5:	00 00                	add    BYTE PTR [eax],al
    17e7:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    17ed:	02 91 04 0a 1d 05    	add    dl,BYTE PTR [ecx+0x51d0a04]
    17f3:	00 00                	add    BYTE PTR [eax],al
    17f5:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
    17fb:	02 91 08 0c 23 07    	add    dl,BYTE PTR [ecx+0x7230c08]
    1801:	00 00                	add    BYTE PTR [eax],al
    1803:	01 2f                	add    DWORD PTR [edi],ebp
    1805:	25 00 00 00 02       	and    eax,0x2000000
    180a:	91                   	xchg   ecx,eax
    180b:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
    180e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1810:	00 01                	add    BYTE PTR [ecx],al
    1812:	30 3a                	xor    BYTE PTR [edx],bh
    1814:	00 00                	add    BYTE PTR [eax],al
    1816:	00 02                	add    BYTE PTR [edx],al
    1818:	91                   	xchg   ecx,eax
    1819:	6c                   	ins    BYTE PTR es:[edi],dx
    181a:	0c 45                	or     al,0x45
    181c:	07                   	pop    es
    181d:	00 00                	add    BYTE PTR [eax],al
    181f:	01 31                	add    DWORD PTR [ecx],esi
    1821:	e4 01                	in     al,0x1
    1823:	00 00                	add    BYTE PTR [eax],al
    1825:	02 91 69 12 36 07    	add    dl,BYTE PTR [ecx+0x7361269]
    182b:	00 00                	add    BYTE PTR [eax],al
    182d:	01 37                	add    DWORD PTR [edi],esi
    182f:	c8 11 00 9f          	enter  0x11,0x9f
    1833:	00 13                	add    BYTE PTR [ebx],dl
    1835:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    183a:	37                   	aaa    
    183b:	56                   	push   esi
    183c:	00 00                	add    BYTE PTR [eax],al
    183e:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    1844:	9f                   	lahf   
    1845:	13 34 01             	adc    esi,DWORD PTR [ecx+eax*1]
    1848:	00 00                	add    BYTE PTR [eax],al
    184a:	03 38                	add    edi,DWORD PTR [eax]
    184c:	56                   	push   esi
    184d:	00 00                	add    BYTE PTR [eax],al
    184f:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    1855:	9f                   	lahf   
    1856:	13 7b 00             	adc    edi,DWORD PTR [ebx+0x0]
    1859:	00 00                	add    BYTE PTR [eax],al
    185b:	03 39                	add    edi,DWORD PTR [ecx]
    185d:	56                   	push   esi
    185e:	00 00                	add    BYTE PTR [eax],al
    1860:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    1866:	9f                   	lahf   
    1867:	13 7c 01 00          	adc    edi,DWORD PTR [ecx+eax*1+0x0]
    186b:	00 03                	add    BYTE PTR [ebx],al
    186d:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    1870:	00 00                	add    BYTE PTR [eax],al
    1872:	05 03 78 71 00       	add    eax,0x717803
    1877:	9f                   	lahf   
    1878:	13 6e 00             	adc    ebp,DWORD PTR [esi+0x0]
    187b:	00 00                	add    BYTE PTR [eax],al
    187d:	04 34                	add    al,0x34
    187f:	e8 02 00 00 05       	call   5001886 <sysEnter_Vector+0x4ed1886>
    1884:	03 64 71 00          	add    esp,DWORD PTR [ecx+esi*2+0x0]
    1888:	9f                   	lahf   
    1889:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    188c:	00 00                	add    BYTE PTR [eax],al
    188e:	00 13                	add    BYTE PTR [ebx],dl
    1890:	91                   	xchg   ecx,eax
    1891:	00 00                	add    BYTE PTR [eax],al
    1893:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    189a:	05 03 60 71 00       	add    eax,0x716003
    189f:	9f                   	lahf   
    18a0:	13 41 00             	adc    eax,DWORD PTR [ecx+0x0]
    18a3:	00 00                	add    BYTE PTR [eax],al
    18a5:	05 58 10 03 00       	add    eax,0x31058
    18aa:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    18b0:	9f                   	lahf   
    18b1:	08 04 8a             	or     BYTE PTR [edx+ecx*4],al
    18b4:	01 00                	add    DWORD PTR [eax],eax
    18b6:	00 00                	add    BYTE PTR [eax],al
    18b8:	3d 0b 00 00 04       	cmp    eax,0x400000b
    18bd:	00 d8                	add    al,bl
    18bf:	06                   	push   es
    18c0:	00 00                	add    BYTE PTR [eax],al
    18c2:	04 01                	add    al,0x1
    18c4:	ac                   	lods   al,BYTE PTR ds:[esi]
    18c5:	00 00                	add    BYTE PTR [eax],al
    18c7:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
    18ca:	09 00                	or     DWORD PTR [eax],eax
    18cc:	00 1e                	add    BYTE PTR [esi],bl
    18ce:	00 00                	add    BYTE PTR [eax],al
    18d0:	00 48 12             	add    BYTE PTR [eax+0x12],cl
    18d3:	00 9f a8 0c 00 00    	add    BYTE PTR [edi+0xca8],bl
    18d9:	42                   	inc    edx
    18da:	09 00                	or     DWORD PTR [eax],eax
    18dc:	00 02                	add    BYTE PTR [edx],al
    18de:	80 08 00             	or     BYTE PTR [eax],0x0
    18e1:	00 02                	add    BYTE PTR [edx],al
    18e3:	28 30                	sub    BYTE PTR [eax],dh
    18e5:	00 00                	add    BYTE PTR [eax],al
    18e7:	00 03                	add    BYTE PTR [ebx],al
    18e9:	04 b4                	add    al,0xb4
    18eb:	07                   	pop    es
    18ec:	00 00                	add    BYTE PTR [eax],al
    18ee:	3a 00                	cmp    al,BYTE PTR [eax]
    18f0:	00 00                	add    BYTE PTR [eax],al
    18f2:	04 01                	add    al,0x1
    18f4:	06                   	push   es
    18f5:	8c 00                	mov    WORD PTR [eax],es
    18f7:	00 00                	add    BYTE PTR [eax],al
    18f9:	02 87 08 00 00 02    	add    al,BYTE PTR [edi+0x2000008]
    18ff:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    1905:	01 06                	add    DWORD PTR [esi],eax
    1907:	85 00                	test   DWORD PTR [eax],eax
    1909:	00 00                	add    BYTE PTR [eax],al
    190b:	04 02                	add    al,0x2
    190d:	05 72 01 00 00       	add    eax,0x172
    1912:	05 04 05 69 6e       	add    eax,0x6e690504
    1917:	74 00                	je     1919 <sysEnter_Vector-0x12e6e7>
    1919:	04 08                	add    al,0x8
    191b:	05 00 00 00 00       	add    eax,0x0
    1920:	04 01                	add    al,0x1
    1922:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    1928:	02 07                	add    al,BYTE PTR [edi]
    192a:	19 01                	sbb    DWORD PTR [ecx],eax
    192c:	00 00                	add    BYTE PTR [eax],al
    192e:	02 0e                	add    cl,BYTE PTR [esi]
    1930:	00 00                	add    BYTE PTR [eax],al
    1932:	00 03                	add    BYTE PTR [ebx],al
    1934:	34 81                	xor    al,0x81
    1936:	00 00                	add    BYTE PTR [eax],al
    1938:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    193b:	07                   	pop    es
    193c:	61                   	popa   
    193d:	00 00                	add    BYTE PTR [eax],al
    193f:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    1942:	07                   	pop    es
    1943:	57                   	push   edi
    1944:	00 00                	add    BYTE PTR [eax],al
    1946:	00 02                	add    BYTE PTR [edx],al
    1948:	4d                   	dec    ebp
    1949:	00 00                	add    BYTE PTR [eax],al
    194b:	00 03                	add    BYTE PTR [ebx],al
    194d:	56                   	push   esi
    194e:	81 00 00 00 02 bd    	add    DWORD PTR [eax],0xbd020000
    1954:	02 00                	add    al,BYTE PTR [eax]
    1956:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    1959:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    195f:	05 05 00 00 00       	add    eax,0x5
    1964:	04 0c                	add    al,0xc
    1966:	04 66                	add    al,0x66
    1968:	01 00                	add    DWORD PTR [eax],eax
    196a:	00 06                	add    BYTE PTR [esi],al
    196c:	04 b9                	add    al,0xb9
    196e:	00 00                	add    BYTE PTR [eax],al
    1970:	00 07                	add    BYTE PTR [edi],al
    1972:	3a 00                	cmp    al,BYTE PTR [eax]
    1974:	00 00                	add    BYTE PTR [eax],al
    1976:	04 01                	add    al,0x1
    1978:	02 13                	add    dl,BYTE PTR [ebx]
    197a:	01 00                	add    DWORD PTR [eax],eax
    197c:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    197f:	07                   	pop    es
    1980:	83 01 00             	add    DWORD PTR [ecx],0x0
    1983:	00 08                	add    BYTE PTR [eax],cl
    1985:	bf 03 00 00 04       	mov    edi,0x4000003
    198a:	81 00 00 00 05 15    	add    DWORD PTR [eax],0x15050000
    1990:	b9 01 00 00 09       	mov    ecx,0x9000001
    1995:	5f                   	pop    edi
    1996:	03 00                	add    eax,DWORD PTR [eax]
    1998:	00 00                	add    BYTE PTR [eax],al
    199a:	09 cb                	or     ebx,ecx
    199c:	04 00                	add    al,0x0
    199e:	00 01                	add    BYTE PTR [ecx],al
    19a0:	09 d6                	or     esi,edx
    19a2:	02 00                	add    al,BYTE PTR [eax]
    19a4:	00 02                	add    BYTE PTR [edx],al
    19a6:	09 bd 04 00 00 03    	or     DWORD PTR [ebp+0x3000004],edi
    19ac:	09 08                	or     DWORD PTR [eax],ecx
    19ae:	03 00                	add    eax,DWORD PTR [eax]
    19b0:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    19b3:	f3 02 00             	repz add al,BYTE PTR [eax]
    19b6:	00 05 09 52 03 00    	add    BYTE PTR ds:0x35209,al
    19bc:	00 0a                	add    BYTE PTR [edx],cl
    19be:	09 33                	or     DWORD PTR [ebx],esi
    19c0:	04 00                	add    al,0x0
    19c2:	00 0b                	add    BYTE PTR [ebx],cl
    19c4:	09 6f 03             	or     DWORD PTR [edi+0x3],ebp
    19c7:	00 00                	add    BYTE PTR [eax],al
    19c9:	0c 09                	or     al,0x9
    19cb:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    19d0:	09 40 04             	or     DWORD PTR [eax+0x4],eax
    19d3:	00 00                	add    BYTE PTR [eax],al
    19d5:	0e                   	push   cs
    19d6:	09 95 04 00 00 0f    	or     DWORD PTR [ebp+0xf000004],edx
    19dc:	09 3f                	or     DWORD PTR [edi],edi
    19de:	03 00                	add    eax,DWORD PTR [eax]
    19e0:	00 10                	add    BYTE PTR [eax],dl
    19e2:	09 4d 04             	or     DWORD PTR [ebp+0x4],ecx
    19e5:	00 00                	add    BYTE PTR [eax],al
    19e7:	4f                   	dec    edi
    19e8:	09 df                	or     edi,ebx
    19ea:	03 00                	add    eax,DWORD PTR [eax]
    19ec:	00 50 09             	add    BYTE PTR [eax+0x9],dl
    19ef:	78 04                	js     19f5 <sysEnter_Vector-0x12e60b>
    19f1:	00 00                	add    BYTE PTR [eax],al
    19f3:	59                   	pop    ecx
    19f4:	09 8b 02 00 00 61    	or     DWORD PTR [ebx+0x61000002],ecx
    19fa:	09 fc                	or     esp,edi
    19fc:	03 00                	add    eax,DWORD PTR [eax]
    19fe:	00 97 0a 94 03 00    	add    BYTE PTR [edi+0x3940a],dl
    1a04:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1a07:	0a 6b 04             	or     ch,BYTE PTR [ebx+0x4]
    1a0a:	00 00                	add    BYTE PTR [eax],al
    1a0c:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
    1a0f:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
    1a12:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    1a15:	0a af 02 00 00 66    	or     ch,BYTE PTR [edi+0x66000002]
    1a1b:	01 0a                	add    DWORD PTR [edx],ecx
    1a1d:	2a 03                	sub    al,BYTE PTR [ebx]
    1a1f:	00 00                	add    BYTE PTR [eax],al
    1a21:	67 01 0a             	add    DWORD PTR [bp+si],ecx
    1a24:	1d 03 00 00 68       	sbb    eax,0x68000003
    1a29:	01 0a                	add    DWORD PTR [edx],ecx
    1a2b:	e5 04                	in     eax,0x4
    1a2d:	00 00                	add    BYTE PTR [eax],al
    1a2f:	69 01 0a 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e0a
    1a35:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    1a38:	0a e3                	or     ah,bl
    1a3a:	02 00                	add    al,BYTE PTR [eax]
    1a3c:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    1a3f:	0a af 04 00 00 00    	or     ch,BYTE PTR [edi+0x4]
    1a45:	03 0a                	add    ecx,DWORD PTR [edx]
    1a47:	5c                   	pop    esp
    1a48:	04 00                	add    al,0x0
    1a4a:	00 01                	add    BYTE PTR [ecx],al
    1a4c:	03 0a                	add    ecx,DWORD PTR [edx]
    1a4e:	ab                   	stos   DWORD PTR es:[edi],eax
    1a4f:	03 00                	add    eax,DWORD PTR [eax]
    1a51:	00 02                	add    BYTE PTR [edx],al
    1a53:	03 0a                	add    ecx,DWORD PTR [edx]
    1a55:	84 03                	test   BYTE PTR [ebx],al
    1a57:	00 00                	add    BYTE PTR [eax],al
    1a59:	03 03                	add    eax,DWORD PTR [ebx]
    1a5b:	0a 22                	or     ah,BYTE PTR [edx]
    1a5d:	04 00                	add    al,0x0
    1a5f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1a62:	0a 85 04 00 00 05    	or     al,BYTE PTR [ebp+0x5000004]
    1a68:	03 0a                	add    ecx,DWORD PTR [edx]
    1a6a:	d0 03                	rol    BYTE PTR [ebx],1
    1a6c:	00 00                	add    BYTE PTR [eax],al
    1a6e:	06                   	push   es
    1a6f:	03 00                	add    eax,DWORD PTR [eax]
    1a71:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    1a74:	04 07                	add    al,0x7
    1a76:	5c                   	pop    esp
    1a77:	00 00                	add    BYTE PTR [eax],al
    1a79:	00 06                	add    BYTE PTR [esi],al
    1a7b:	04 3a                	add    al,0x3a
    1a7d:	00 00                	add    BYTE PTR [eax],al
    1a7f:	00 0c 4a             	add    BYTE PTR [edx+ecx*2],cl
    1a82:	08 00                	or     BYTE PTR [eax],al
    1a84:	00 01                	add    BYTE PTR [ecx],al
    1a86:	11 5a 00             	adc    DWORD PTR [edx+0x0],ebx
    1a89:	00 00                	add    BYTE PTR [eax],al
    1a8b:	48                   	dec    eax
    1a8c:	12 00                	adc    al,BYTE PTR [eax]
    1a8e:	9f                   	lahf   
    1a8f:	3a 00                	cmp    al,BYTE PTR [eax]
    1a91:	00 00                	add    BYTE PTR [eax],al
    1a93:	01 9c 36 02 00 00 0d 	add    DWORD PTR [esi+esi*1+0xd000002],ebx
    1a9a:	00 08                	add    BYTE PTR [eax],cl
    1a9c:	00 00                	add    BYTE PTR [eax],al
    1a9e:	01 11                	add    DWORD PTR [ecx],edx
    1aa0:	5a                   	pop    edx
    1aa1:	00 00                	add    BYTE PTR [eax],al
    1aa3:	00 02                	add    BYTE PTR [edx],al
    1aa5:	91                   	xchg   ecx,eax
    1aa6:	00 0d a6 08 00 00    	add    BYTE PTR ds:0x8a6,cl
    1aac:	01 11                	add    DWORD PTR [ecx],edx
    1aae:	76 00                	jbe    1ab0 <sysEnter_Vector-0x12e550>
    1ab0:	00 00                	add    BYTE PTR [eax],al
    1ab2:	02 91 04 0d ad 08    	add    dl,BYTE PTR [ecx+0x8ad0d04]
    1ab8:	00 00                	add    BYTE PTR [eax],al
    1aba:	01 11                	add    DWORD PTR [ecx],edx
    1abc:	76 00                	jbe    1abe <sysEnter_Vector-0x12e542>
    1abe:	00 00                	add    BYTE PTR [eax],al
    1ac0:	02 91 08 0d b4 08    	add    dl,BYTE PTR [ecx+0x8b40d08]
    1ac6:	00 00                	add    BYTE PTR [eax],al
    1ac8:	01 11                	add    DWORD PTR [ecx],edx
    1aca:	76 00                	jbe    1acc <sysEnter_Vector-0x12e534>
    1acc:	00 00                	add    BYTE PTR [eax],al
    1ace:	02 91 0c 0d bb 08    	add    dl,BYTE PTR [ecx+0x8bb0d0c]
    1ad4:	00 00                	add    BYTE PTR [eax],al
    1ad6:	01 11                	add    DWORD PTR [ecx],edx
    1ad8:	76 00                	jbe    1ada <sysEnter_Vector-0x12e526>
    1ada:	00 00                	add    BYTE PTR [eax],al
    1adc:	02 91 10 0e f4 04    	add    dl,BYTE PTR [ecx+0x4f40e10]
    1ae2:	00 00                	add    BYTE PTR [eax],al
    1ae4:	01 13                	add    DWORD PTR [ebx],edx
    1ae6:	5a                   	pop    edx
    1ae7:	00 00                	add    BYTE PTR [eax],al
    1ae9:	00 02                	add    BYTE PTR [edx],al
    1aeb:	91                   	xchg   ecx,eax
    1aec:	6c                   	ins    BYTE PTR es:[edi],dx
    1aed:	00 0c 3e             	add    BYTE PTR [esi+edi*1],cl
    1af0:	08 00                	or     BYTE PTR [eax],al
    1af2:	00 01                	add    BYTE PTR [ecx],al
    1af4:	18 5a 00             	sbb    BYTE PTR [edx+0x0],bl
    1af7:	00 00                	add    BYTE PTR [eax],al
    1af9:	82                   	(bad)  
    1afa:	12 00                	adc    al,BYTE PTR [eax]
    1afc:	9f                   	lahf   
    1afd:	3c 00                	cmp    al,0x0
    1aff:	00 00                	add    BYTE PTR [eax],al
    1b01:	01 9c 96 02 00 00 0d 	add    DWORD PTR [esi+edx*4+0xd000002],ebx
    1b08:	00 08                	add    BYTE PTR [eax],cl
    1b0a:	00 00                	add    BYTE PTR [eax],al
    1b0c:	01 18                	add    DWORD PTR [eax],ebx
    1b0e:	5a                   	pop    edx
    1b0f:	00 00                	add    BYTE PTR [eax],al
    1b11:	00 02                	add    BYTE PTR [edx],al
    1b13:	91                   	xchg   ecx,eax
    1b14:	00 0d a6 08 00 00    	add    BYTE PTR ds:0x8a6,cl
    1b1a:	01 18                	add    DWORD PTR [eax],ebx
    1b1c:	76 00                	jbe    1b1e <sysEnter_Vector-0x12e4e2>
    1b1e:	00 00                	add    BYTE PTR [eax],al
    1b20:	02 91 04 0d ad 08    	add    dl,BYTE PTR [ecx+0x8ad0d04]
    1b26:	00 00                	add    BYTE PTR [eax],al
    1b28:	01 18                	add    DWORD PTR [eax],ebx
    1b2a:	76 00                	jbe    1b2c <sysEnter_Vector-0x12e4d4>
    1b2c:	00 00                	add    BYTE PTR [eax],al
    1b2e:	02 91 08 0d b4 08    	add    dl,BYTE PTR [ecx+0x8b40d08]
    1b34:	00 00                	add    BYTE PTR [eax],al
    1b36:	01 18                	add    DWORD PTR [eax],ebx
    1b38:	76 00                	jbe    1b3a <sysEnter_Vector-0x12e4c6>
    1b3a:	00 00                	add    BYTE PTR [eax],al
    1b3c:	02 91 0c 0e f4 04    	add    dl,BYTE PTR [ecx+0x4f40e0c]
    1b42:	00 00                	add    BYTE PTR [eax],al
    1b44:	01 1a                	add    DWORD PTR [edx],ebx
    1b46:	5a                   	pop    edx
    1b47:	00 00                	add    BYTE PTR [eax],al
    1b49:	00 02                	add    BYTE PTR [edx],al
    1b4b:	91                   	xchg   ecx,eax
    1b4c:	6c                   	ins    BYTE PTR es:[edi],dx
    1b4d:	00 0c 32             	add    BYTE PTR [edx+esi*1],cl
    1b50:	08 00                	or     BYTE PTR [eax],al
    1b52:	00 01                	add    BYTE PTR [ecx],al
    1b54:	1f                   	pop    ds
    1b55:	5a                   	pop    edx
    1b56:	00 00                	add    BYTE PTR [eax],al
    1b58:	00 be 12 00 9f 3e    	add    BYTE PTR [esi+0x3e9f0012],bh
    1b5e:	00 00                	add    BYTE PTR [eax],al
    1b60:	00 01                	add    BYTE PTR [ecx],al
    1b62:	9c                   	pushf  
    1b63:	e8 02 00 00 0d       	call   d001b6a <sysEnter_Vector+0xced1b6a>
    1b68:	00 08                	add    BYTE PTR [eax],cl
    1b6a:	00 00                	add    BYTE PTR [eax],al
    1b6c:	01 1f                	add    DWORD PTR [edi],ebx
    1b6e:	5a                   	pop    edx
    1b6f:	00 00                	add    BYTE PTR [eax],al
    1b71:	00 02                	add    BYTE PTR [edx],al
    1b73:	91                   	xchg   ecx,eax
    1b74:	00 0d a6 08 00 00    	add    BYTE PTR ds:0x8a6,cl
    1b7a:	01 1f                	add    DWORD PTR [edi],ebx
    1b7c:	76 00                	jbe    1b7e <sysEnter_Vector-0x12e482>
    1b7e:	00 00                	add    BYTE PTR [eax],al
    1b80:	02 91 04 0d ad 08    	add    dl,BYTE PTR [ecx+0x8ad0d04]
    1b86:	00 00                	add    BYTE PTR [eax],al
    1b88:	01 1f                	add    DWORD PTR [edi],ebx
    1b8a:	76 00                	jbe    1b8c <sysEnter_Vector-0x12e474>
    1b8c:	00 00                	add    BYTE PTR [eax],al
    1b8e:	02 91 08 0e f4 04    	add    dl,BYTE PTR [ecx+0x4f40e08]
    1b94:	00 00                	add    BYTE PTR [eax],al
    1b96:	01 21                	add    DWORD PTR [ecx],esp
    1b98:	5a                   	pop    edx
    1b99:	00 00                	add    BYTE PTR [eax],al
    1b9b:	00 02                	add    BYTE PTR [edx],al
    1b9d:	91                   	xchg   ecx,eax
    1b9e:	6c                   	ins    BYTE PTR es:[edi],dx
    1b9f:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
    1ba2:	08 00                	or     BYTE PTR [eax],al
    1ba4:	00 01                	add    BYTE PTR [ecx],al
    1ba6:	26                   	es
    1ba7:	5a                   	pop    edx
    1ba8:	00 00                	add    BYTE PTR [eax],al
    1baa:	00 fc                	add    ah,bh
    1bac:	12 00                	adc    al,BYTE PTR [eax]
    1bae:	9f                   	lahf   
    1baf:	40                   	inc    eax
    1bb0:	00 00                	add    BYTE PTR [eax],al
    1bb2:	00 01                	add    BYTE PTR [ecx],al
    1bb4:	9c                   	pushf  
    1bb5:	2c 03                	sub    al,0x3
    1bb7:	00 00                	add    BYTE PTR [eax],al
    1bb9:	0d 00 08 00 00       	or     eax,0x800
    1bbe:	01 26                	add    DWORD PTR [esi],esp
    1bc0:	5a                   	pop    edx
    1bc1:	00 00                	add    BYTE PTR [eax],al
    1bc3:	00 02                	add    BYTE PTR [edx],al
    1bc5:	91                   	xchg   ecx,eax
    1bc6:	00 0d a6 08 00 00    	add    BYTE PTR ds:0x8a6,cl
    1bcc:	01 26                	add    DWORD PTR [esi],esp
    1bce:	76 00                	jbe    1bd0 <sysEnter_Vector-0x12e430>
    1bd0:	00 00                	add    BYTE PTR [eax],al
    1bd2:	02 91 04 0e f4 04    	add    dl,BYTE PTR [ecx+0x4f40e04]
    1bd8:	00 00                	add    BYTE PTR [eax],al
    1bda:	01 28                	add    DWORD PTR [eax],ebp
    1bdc:	5a                   	pop    edx
    1bdd:	00 00                	add    BYTE PTR [eax],al
    1bdf:	00 02                	add    BYTE PTR [edx],al
    1be1:	91                   	xchg   ecx,eax
    1be2:	6c                   	ins    BYTE PTR es:[edi],dx
    1be3:	00 0c 32             	add    BYTE PTR [edx+esi*1],cl
    1be6:	09 00                	or     DWORD PTR [eax],eax
    1be8:	00 01                	add    BYTE PTR [ecx],al
    1bea:	2d 5a 00 00 00       	sub    eax,0x5a
    1bef:	3c 13                	cmp    al,0x13
    1bf1:	00 9f 42 00 00 00    	add    BYTE PTR [edi+0x42],bl
    1bf7:	01 9c 62 03 00 00 0d 	add    DWORD PTR [edx+eiz*2+0xd000003],ebx
    1bfe:	00 08                	add    BYTE PTR [eax],cl
    1c00:	00 00                	add    BYTE PTR [eax],al
    1c02:	01 2d 5a 00 00 00    	add    DWORD PTR ds:0x5a,ebp
    1c08:	02 91 00 0e f4 04    	add    dl,BYTE PTR [ecx+0x4f40e00]
    1c0e:	00 00                	add    BYTE PTR [eax],al
    1c10:	01 2f                	add    DWORD PTR [edi],ebp
    1c12:	5a                   	pop    edx
    1c13:	00 00                	add    BYTE PTR [eax],al
    1c15:	00 02                	add    BYTE PTR [edx],al
    1c17:	91                   	xchg   ecx,eax
    1c18:	6c                   	ins    BYTE PTR es:[edi],dx
    1c19:	00 0f                	add    BYTE PTR [edi],cl
    1c1b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1c1c:	07                   	pop    es
    1c1d:	00 00                	add    BYTE PTR [eax],al
    1c1f:	01 34 7e             	add    DWORD PTR [esi+edi*2],esi
    1c22:	13 00                	adc    eax,DWORD PTR [eax]
    1c24:	9f                   	lahf   
    1c25:	cb                   	retf   
    1c26:	00 00                	add    BYTE PTR [eax],al
    1c28:	00 01                	add    BYTE PTR [ecx],al
    1c2a:	9c                   	pushf  
    1c2b:	10 4d 09             	adc    BYTE PTR [ebp+0x9],cl
    1c2e:	00 00                	add    BYTE PTR [eax],al
    1c30:	01 48 49             	add    DWORD PTR [eax+0x49],ecx
    1c33:	14 00                	adc    al,0x0
    1c35:	9f                   	lahf   
    1c36:	23 00                	and    eax,DWORD PTR [eax]
    1c38:	00 00                	add    BYTE PTR [eax],al
    1c3a:	01 9c 11 57 07 00 00 	add    DWORD PTR [ecx+edx*1+0x757],ebx
    1c41:	01 4e 5a             	add    DWORD PTR [esi+0x5a],ecx
    1c44:	00 00                	add    BYTE PTR [eax],al
    1c46:	00 6c 14 00          	add    BYTE PTR [esp+edx*1+0x0],ch
    1c4a:	9f                   	lahf   
    1c4b:	59                   	pop    ecx
    1c4c:	00 00                	add    BYTE PTR [eax],al
    1c4e:	00 01                	add    BYTE PTR [ecx],al
    1c50:	9c                   	pushf  
    1c51:	c9                   	leave  
    1c52:	03 00                	add    eax,DWORD PTR [eax]
    1c54:	00 0d d5 08 00 00    	add    BYTE PTR ds:0x8d5,cl
    1c5a:	01 4e b3             	add    DWORD PTR [esi-0x4d],ecx
    1c5d:	00 00                	add    BYTE PTR [eax],al
    1c5f:	00 02                	add    BYTE PTR [edx],al
    1c61:	91                   	xchg   ecx,eax
    1c62:	00 12                	add    BYTE PTR [edx],dl
    1c64:	0e                   	push   cs
    1c65:	90                   	nop
    1c66:	09 00                	or     DWORD PTR [eax],eax
    1c68:	00 01                	add    BYTE PTR [ecx],al
    1c6a:	50                   	push   eax
    1c6b:	41                   	inc    ecx
    1c6c:	00 00                	add    BYTE PTR [eax],al
    1c6e:	00 02                	add    BYTE PTR [edx],al
    1c70:	91                   	xchg   ecx,eax
    1c71:	68 0e a8 06 00       	push   0x6a80e
    1c76:	00 01                	add    BYTE PTR [ecx],al
    1c78:	53                   	push   ebx
    1c79:	5a                   	pop    edx
    1c7a:	00 00                	add    BYTE PTR [eax],al
    1c7c:	00 02                	add    BYTE PTR [edx],al
    1c7e:	91                   	xchg   ecx,eax
    1c7f:	6c                   	ins    BYTE PTR es:[edi],dx
    1c80:	00 11                	add    BYTE PTR [ecx],dl
    1c82:	19 0c 00             	sbb    DWORD PTR [eax+eax*1],ecx
    1c85:	00 01                	add    BYTE PTR [ecx],al
    1c87:	58                   	pop    eax
    1c88:	5a                   	pop    edx
    1c89:	00 00                	add    BYTE PTR [eax],al
    1c8b:	00 c5                	add    ch,al
    1c8d:	14 00                	adc    al,0x0
    1c8f:	9f                   	lahf   
    1c90:	54                   	push   esp
    1c91:	00 00                	add    BYTE PTR [eax],al
    1c93:	00 01                	add    BYTE PTR [ecx],al
    1c95:	9c                   	pushf  
    1c96:	0e                   	push   cs
    1c97:	04 00                	add    al,0x0
    1c99:	00 0d d5 08 00 00    	add    BYTE PTR ds:0x8d5,cl
    1c9f:	01 58 b3             	add    DWORD PTR [eax-0x4d],ebx
    1ca2:	00 00                	add    BYTE PTR [eax],al
    1ca4:	00 02                	add    BYTE PTR [edx],al
    1ca6:	91                   	xchg   ecx,eax
    1ca7:	00 12                	add    BYTE PTR [edx],dl
    1ca9:	0e                   	push   cs
    1caa:	90                   	nop
    1cab:	09 00                	or     DWORD PTR [eax],eax
    1cad:	00 01                	add    BYTE PTR [ecx],al
    1caf:	5a                   	pop    edx
    1cb0:	41                   	inc    ecx
    1cb1:	00 00                	add    BYTE PTR [eax],al
    1cb3:	00 02                	add    BYTE PTR [edx],al
    1cb5:	91                   	xchg   ecx,eax
    1cb6:	68 0e a8 06 00       	push   0x6a80e
    1cbb:	00 01                	add    BYTE PTR [ecx],al
    1cbd:	5d                   	pop    ebp
    1cbe:	5a                   	pop    edx
    1cbf:	00 00                	add    BYTE PTR [eax],al
    1cc1:	00 02                	add    BYTE PTR [edx],al
    1cc3:	91                   	xchg   ecx,eax
    1cc4:	6c                   	ins    BYTE PTR es:[edi],dx
    1cc5:	00 11                	add    BYTE PTR [ecx],dl
    1cc7:	45                   	inc    ebp
    1cc8:	09 00                	or     DWORD PTR [eax],eax
    1cca:	00 01                	add    BYTE PTR [ecx],al
    1ccc:	61                   	popa   
    1ccd:	5a                   	pop    edx
    1cce:	00 00                	add    BYTE PTR [eax],al
    1cd0:	00 19                	add    BYTE PTR [ecx],bl
    1cd2:	15 00 9f 54 00       	adc    eax,0x549f00
    1cd7:	00 00                	add    BYTE PTR [eax],al
    1cd9:	01 9c 53 04 00 00 0d 	add    DWORD PTR [ebx+edx*2+0xd000004],ebx
    1ce0:	d5 08                	aad    0x8
    1ce2:	00 00                	add    BYTE PTR [eax],al
    1ce4:	01 61 b3             	add    DWORD PTR [ecx-0x4d],esp
    1ce7:	00 00                	add    BYTE PTR [eax],al
    1ce9:	00 02                	add    BYTE PTR [edx],al
    1ceb:	91                   	xchg   ecx,eax
    1cec:	00 12                	add    BYTE PTR [edx],dl
    1cee:	0e                   	push   cs
    1cef:	90                   	nop
    1cf0:	09 00                	or     DWORD PTR [eax],eax
    1cf2:	00 01                	add    BYTE PTR [ecx],al
    1cf4:	63 41 00             	arpl   WORD PTR [ecx+0x0],ax
    1cf7:	00 00                	add    BYTE PTR [eax],al
    1cf9:	02 91 68 0e a8 06    	add    dl,BYTE PTR [ecx+0x6a80e68]
    1cff:	00 00                	add    BYTE PTR [eax],al
    1d01:	01 66 5a             	add    DWORD PTR [esi+0x5a],esp
    1d04:	00 00                	add    BYTE PTR [eax],al
    1d06:	00 02                	add    BYTE PTR [edx],al
    1d08:	91                   	xchg   ecx,eax
    1d09:	6c                   	ins    BYTE PTR es:[edi],dx
    1d0a:	00 11                	add    BYTE PTR [ecx],dl
    1d0c:	95                   	xchg   ebp,eax
    1d0d:	09 00                	or     DWORD PTR [eax],eax
    1d0f:	00 01                	add    BYTE PTR [ecx],al
    1d11:	6a 5a                	push   0x5a
    1d13:	00 00                	add    BYTE PTR [eax],al
    1d15:	00 6d 15             	add    BYTE PTR [ebp+0x15],ch
    1d18:	00 9f 34 00 00 00    	add    BYTE PTR [edi+0x34],bl
    1d1e:	01 9c 8a 04 00 00 0d 	add    DWORD PTR [edx+ecx*4+0xd000004],ebx
    1d25:	d5 08                	aad    0x8
    1d27:	00 00                	add    BYTE PTR [eax],al
    1d29:	01 6a b3             	add    DWORD PTR [edx-0x4d],ebp
    1d2c:	00 00                	add    BYTE PTR [eax],al
    1d2e:	00 02                	add    BYTE PTR [edx],al
    1d30:	91                   	xchg   ecx,eax
    1d31:	00 12                	add    BYTE PTR [edx],dl
    1d33:	0e                   	push   cs
    1d34:	90                   	nop
    1d35:	09 00                	or     DWORD PTR [eax],eax
    1d37:	00 01                	add    BYTE PTR [ecx],al
    1d39:	6c                   	ins    BYTE PTR es:[edi],dx
    1d3a:	41                   	inc    ecx
    1d3b:	00 00                	add    BYTE PTR [eax],al
    1d3d:	00 02                	add    BYTE PTR [edx],al
    1d3f:	91                   	xchg   ecx,eax
    1d40:	74 00                	je     1d42 <sysEnter_Vector-0x12e2be>
    1d42:	11 a1 09 00 00 01    	adc    DWORD PTR [ecx+0x1000009],esp
    1d48:	72 5a                	jb     1da4 <sysEnter_Vector-0x12e25c>
    1d4a:	00 00                	add    BYTE PTR [eax],al
    1d4c:	00 a1 15 00 9f 37    	add    BYTE PTR [ecx+0x379f0015],ah
    1d52:	00 00                	add    BYTE PTR [eax],al
    1d54:	00 01                	add    BYTE PTR [ecx],al
    1d56:	9c                   	pushf  
    1d57:	cf                   	iret   
    1d58:	04 00                	add    al,0x0
    1d5a:	00 0d f5 07 00 00    	add    BYTE PTR ds:0x7f5,cl
    1d60:	01 72 76             	add    DWORD PTR [edx+0x76],esi
    1d63:	00 00                	add    BYTE PTR [eax],al
    1d65:	00 02                	add    BYTE PTR [edx],al
    1d67:	91                   	xchg   ecx,eax
    1d68:	00 0d d5 08 00 00    	add    BYTE PTR ds:0x8d5,cl
    1d6e:	01 72 b3             	add    DWORD PTR [edx-0x4d],esi
    1d71:	00 00                	add    BYTE PTR [eax],al
    1d73:	00 02                	add    BYTE PTR [edx],al
    1d75:	91                   	xchg   ecx,eax
    1d76:	04 12                	add    al,0x12
    1d78:	0e                   	push   cs
    1d79:	90                   	nop
    1d7a:	09 00                	or     DWORD PTR [eax],eax
    1d7c:	00 01                	add    BYTE PTR [ecx],al
    1d7e:	74 41                	je     1dc1 <sysEnter_Vector-0x12e23f>
    1d80:	00 00                	add    BYTE PTR [eax],al
    1d82:	00 02                	add    BYTE PTR [edx],al
    1d84:	91                   	xchg   ecx,eax
    1d85:	74 00                	je     1d87 <sysEnter_Vector-0x12e279>
    1d87:	11 8f 08 00 00 01    	adc    DWORD PTR [edi+0x1000008],ecx
    1d8d:	7c 5a                	jl     1de9 <sysEnter_Vector-0x12e217>
    1d8f:	00 00                	add    BYTE PTR [eax],al
    1d91:	00 d8                	add    al,bl
    1d93:	15 00 9f 37 00       	adc    eax,0x379f00
    1d98:	00 00                	add    BYTE PTR [eax],al
    1d9a:	01 9c 14 05 00 00 0d 	add    DWORD PTR [esp+edx*1+0xd000005],ebx
    1da1:	f5                   	cmc    
    1da2:	07                   	pop    es
    1da3:	00 00                	add    BYTE PTR [eax],al
    1da5:	01 7c 76 00          	add    DWORD PTR [esi+esi*2+0x0],edi
    1da9:	00 00                	add    BYTE PTR [eax],al
    1dab:	02 91 00 0d d5 08    	add    dl,BYTE PTR [ecx+0x8d50d00]
    1db1:	00 00                	add    BYTE PTR [eax],al
    1db3:	01 7c b3 00          	add    DWORD PTR [ebx+esi*4+0x0],edi
    1db7:	00 00                	add    BYTE PTR [eax],al
    1db9:	02 91 04 12 0e 90    	add    dl,BYTE PTR [ecx-0x6ff1edfc]
    1dbf:	09 00                	or     DWORD PTR [eax],eax
    1dc1:	00 01                	add    BYTE PTR [ecx],al
    1dc3:	7e 41                	jle    1e06 <sysEnter_Vector-0x12e1fa>
    1dc5:	00 00                	add    BYTE PTR [eax],al
    1dc7:	00 02                	add    BYTE PTR [edx],al
    1dc9:	91                   	xchg   ecx,eax
    1dca:	74 00                	je     1dcc <sysEnter_Vector-0x12e234>
    1dcc:	0c 11                	or     al,0x11
    1dce:	08 00                	or     BYTE PTR [eax],al
    1dd0:	00 01                	add    BYTE PTR [ecx],al
    1dd2:	86 81 00 00 00 0f    	xchg   BYTE PTR [ecx+0xf000000],al
    1dd8:	16                   	push   ss
    1dd9:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1ddf:	01 9c 60 05 00 00 0d 	add    DWORD PTR [eax+eiz*2+0xd000005],ebx
    1de6:	f4                   	hlt    
    1de7:	08 00                	or     BYTE PTR [eax],al
    1de9:	00 01                	add    BYTE PTR [ecx],al
    1deb:	86 81 00 00 00 02    	xchg   BYTE PTR [ecx+0x2000000],al
    1df1:	91                   	xchg   ecx,eax
    1df2:	00 13                	add    BYTE PTR [ebx],dl
    1df4:	21 16                	and    DWORD PTR [esi],edx
    1df6:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1dfc:	14 73                	adc    al,0x73
    1dfe:	32 00                	xor    al,BYTE PTR [eax]
    1e00:	01 88 76 00 00 00    	add    DWORD PTR [eax+0x76],ecx
    1e06:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1e0c:	00 01                	add    BYTE PTR [ecx],al
    1e0e:	88 76 00             	mov    BYTE PTR [esi+0x0],dh
    1e11:	00 00                	add    BYTE PTR [eax],al
    1e13:	02 91 68 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000068]
    1e19:	72 07                	jb     1e22 <sysEnter_Vector-0x12e1de>
    1e1b:	00 00                	add    BYTE PTR [eax],al
    1e1d:	01 8b 81 00 00 00    	add    DWORD PTR [ebx+0x81],ecx
    1e23:	7f 16                	jg     1e3b <sysEnter_Vector-0x12e1c5>
    1e25:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1e2b:	01 9c ac 05 00 00 0d 	add    DWORD PTR [esp+ebp*4+0xd000005],ebx
    1e32:	97                   	xchg   edi,eax
    1e33:	08 00                	or     BYTE PTR [eax],al
    1e35:	00 01                	add    BYTE PTR [ecx],al
    1e37:	8b 81 00 00 00 02    	mov    eax,DWORD PTR [ecx+0x2000000]
    1e3d:	91                   	xchg   ecx,eax
    1e3e:	00 13                	add    BYTE PTR [ebx],dl
    1e40:	91                   	xchg   ecx,eax
    1e41:	16                   	push   ss
    1e42:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1e48:	14 73                	adc    al,0x73
    1e4a:	32 00                	xor    al,BYTE PTR [eax]
    1e4c:	01 8d 76 00 00 00    	add    DWORD PTR [ebp+0x76],ecx
    1e52:	02 91 6c 14 63 74    	add    dl,BYTE PTR [ecx+0x7463146c]
    1e58:	00 01                	add    BYTE PTR [ecx],al
    1e5a:	8d 76 00             	lea    esi,[esi+0x0]
    1e5d:	00 00                	add    BYTE PTR [eax],al
    1e5f:	02 91 68 00 00 0f    	add    dl,BYTE PTR [ecx+0xf000068]
    1e65:	9c                   	pushf  
    1e66:	09 00                	or     DWORD PTR [eax],eax
    1e68:	00 01                	add    BYTE PTR [ecx],al
    1e6a:	91                   	xchg   ecx,eax
    1e6b:	ef                   	out    dx,eax
    1e6c:	16                   	push   ss
    1e6d:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    1e73:	01 9c 15 83 09 00 00 	add    DWORD PTR [ebp+edx*1+0x983],ebx
    1e7a:	01 96 0c 17 00 9f    	add    DWORD PTR [esi-0x60ffe8f4],edx
    1e80:	29 00                	sub    DWORD PTR [eax],eax
    1e82:	00 00                	add    BYTE PTR [eax],al
    1e84:	01 9c fd 05 00 00 0d 	add    DWORD PTR [ebp+edi*8+0xd000005],ebx
    1e8b:	e8 08 00 00 01       	call   1001e98 <sysEnter_Vector+0xed1e98>
    1e90:	96                   	xchg   esi,eax
    1e91:	5a                   	pop    edx
    1e92:	00 00                	add    BYTE PTR [eax],al
    1e94:	00 02                	add    BYTE PTR [edx],al
    1e96:	91                   	xchg   ecx,eax
    1e97:	00 0d 72 09 00 00    	add    BYTE PTR ds:0x972,cl
    1e9d:	01 96 b9 01 00 00    	add    DWORD PTR [esi+0x1b9],edx
    1ea3:	02 91 04 0d 6a 07    	add    dl,BYTE PTR [ecx+0x76a0d04]
    1ea9:	00 00                	add    BYTE PTR [eax],al
    1eab:	01 96 5a 00 00 00    	add    DWORD PTR [esi+0x5a],edx
    1eb1:	02 91 08 00 16 cc    	add    dl,BYTE PTR [ecx-0x33e9fff8]
    1eb7:	07                   	pop    es
    1eb8:	00 00                	add    BYTE PTR [eax],al
    1eba:	01 9b 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],ebx
    1ec0:	35 17 00 9f 29       	xor    eax,0x299f0017
    1ec5:	00 00                	add    BYTE PTR [eax],al
    1ec7:	00 01                	add    BYTE PTR [ecx],al
    1ec9:	9c                   	pushf  
    1eca:	25 06 00 00 0e       	and    eax,0xe000006
    1ecf:	f4                   	hlt    
    1ed0:	04 00                	add    al,0x0
    1ed2:	00 01                	add    BYTE PTR [ecx],al
    1ed4:	9d                   	popf   
    1ed5:	76 00                	jbe    1ed7 <sysEnter_Vector-0x12e129>
    1ed7:	00 00                	add    BYTE PTR [eax],al
    1ed9:	02 91 74 00 11 ef    	add    dl,BYTE PTR [ecx-0x10eeff8c]
    1edf:	08 00                	or     BYTE PTR [eax],al
    1ee1:	00 01                	add    BYTE PTR [ecx],al
    1ee3:	a3 5a 00 00 00       	mov    ds:0x5a,eax
    1ee8:	5e                   	pop    esi
    1ee9:	17                   	pop    ss
    1eea:	00 9f 4c 00 00 00    	add    BYTE PTR [edi+0x4c],bl
    1ef0:	01 9c 77 06 00 00 0d 	add    DWORD PTR [edi+esi*2+0xd000006],ebx
    1ef7:	24 05                	and    al,0x5
    1ef9:	00 00                	add    BYTE PTR [eax],al
    1efb:	01 a3 c2 01 00 00    	add    DWORD PTR [ebx+0x1c2],esp
    1f01:	02 91 00 0d 25 09    	add    dl,BYTE PTR [ecx+0x9250d00]
    1f07:	00 00                	add    BYTE PTR [eax],al
    1f09:	01 a3 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],esp
    1f0f:	02 91 04 0d 5a 09    	add    dl,BYTE PTR [ecx+0x95a0d04]
    1f15:	00 00                	add    BYTE PTR [eax],al
    1f17:	01 a3 77 06 00 00    	add    DWORD PTR [ebx+0x677],esp
    1f1d:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1f23:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f26:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1f27:	5a                   	pop    edx
    1f28:	00 00                	add    BYTE PTR [eax],al
    1f2a:	00 02                	add    BYTE PTR [edx],al
    1f2c:	91                   	xchg   ecx,eax
    1f2d:	74 00                	je     1f2f <sysEnter_Vector-0x12e0d1>
    1f2f:	06                   	push   es
    1f30:	04 c2                	add    al,0xc2
    1f32:	01 00                	add    DWORD PTR [eax],eax
    1f34:	00 11                	add    BYTE PTR [ecx],dl
    1f36:	cf                   	iret   
    1f37:	08 00                	or     BYTE PTR [eax],al
    1f39:	00 01                	add    BYTE PTR [ecx],al
    1f3b:	ab                   	stos   DWORD PTR es:[edi],eax
    1f3c:	5a                   	pop    edx
    1f3d:	00 00                	add    BYTE PTR [eax],al
    1f3f:	00 aa 17 00 9f f4    	add    BYTE PTR [edx-0xb60ffe9],ch
    1f45:	01 00                	add    DWORD PTR [eax],eax
    1f47:	00 01                	add    BYTE PTR [ecx],al
    1f49:	9c                   	pushf  
    1f4a:	1f                   	pop    ds
    1f4b:	07                   	pop    es
    1f4c:	00 00                	add    BYTE PTR [eax],al
    1f4e:	0d 24 05 00 00       	or     eax,0x524
    1f53:	01 ab c2 01 00 00    	add    DWORD PTR [ebx+0x1c2],ebp
    1f59:	02 91 00 14 70 69    	add    dl,BYTE PTR [ecx+0x69701400]
    1f5f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1f62:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1f63:	5a                   	pop    edx
    1f64:	00 00                	add    BYTE PTR [eax],al
    1f66:	00 02                	add    BYTE PTR [edx],al
    1f68:	91                   	xchg   ecx,eax
    1f69:	58                   	pop    eax
    1f6a:	0e                   	push   cs
    1f6b:	25 09 00 00 01       	and    eax,0x1000009
    1f70:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1f71:	5a                   	pop    edx
    1f72:	00 00                	add    BYTE PTR [eax],al
    1f74:	00 02                	add    BYTE PTR [edx],al
    1f76:	91                   	xchg   ecx,eax
    1f77:	6c                   	ins    BYTE PTR es:[edi],dx
    1f78:	0e                   	push   cs
    1f79:	5a                   	pop    edx
    1f7a:	09 00                	or     DWORD PTR [eax],eax
    1f7c:	00 01                	add    BYTE PTR [ecx],al
    1f7e:	ae                   	scas   al,BYTE PTR es:[edi]
    1f7f:	77 06                	ja     1f87 <sysEnter_Vector-0x12e079>
    1f81:	00 00                	add    BYTE PTR [eax],al
    1f83:	02 91 50 0e d1 07    	add    dl,BYTE PTR [ecx+0x7d10e50]
    1f89:	00 00                	add    BYTE PTR [eax],al
    1f8b:	01 af c2 01 00 00    	add    DWORD PTR [edi+0x1c2],ebp
    1f91:	02 91 68 0e 5d 07    	add    dl,BYTE PTR [ecx+0x75d0e68]
    1f97:	00 00                	add    BYTE PTR [eax],al
    1f99:	01 af c2 01 00 00    	add    DWORD PTR [edi+0x1c2],ebp
    1f9f:	02 91 64 0e 9c 07    	add    dl,BYTE PTR [ecx+0x79c0e64]
    1fa5:	00 00                	add    BYTE PTR [eax],al
    1fa7:	01 b0 c2 01 00 00    	add    DWORD PTR [eax+0x1c2],esi
    1fad:	02 91 54 0e 86 07    	add    dl,BYTE PTR [ecx+0x7860e54]
    1fb3:	00 00                	add    BYTE PTR [eax],al
    1fb5:	01 c1                	add    ecx,eax
    1fb7:	5a                   	pop    edx
    1fb8:	00 00                	add    BYTE PTR [eax],al
    1fba:	00 02                	add    BYTE PTR [edx],al
    1fbc:	91                   	xchg   ecx,eax
    1fbd:	60                   	pusha  
    1fbe:	13 80 18 00 9f e0    	adc    eax,DWORD PTR [eax-0x1f60ffe8]
    1fc4:	00 00                	add    BYTE PTR [eax],al
    1fc6:	00 14 63             	add    BYTE PTR [ebx+eiz*2],dl
    1fc9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1fca:	74 00                	je     1fcc <sysEnter_Vector-0x12e034>
    1fcc:	01 c3                	add    ebx,eax
    1fce:	5a                   	pop    edx
    1fcf:	00 00                	add    BYTE PTR [eax],al
    1fd1:	00 02                	add    BYTE PTR [edx],al
    1fd3:	91                   	xchg   ecx,eax
    1fd4:	5c                   	pop    esp
    1fd5:	00 00                	add    BYTE PTR [eax],al
    1fd7:	11 c9                	adc    ecx,ecx
    1fd9:	08 00                	or     BYTE PTR [eax],al
    1fdb:	00 01                	add    BYTE PTR [ecx],al
    1fdd:	d9 5a 00             	fstp   DWORD PTR [edx+0x0]
    1fe0:	00 00                	add    BYTE PTR [eax],al
    1fe2:	9e                   	sahf   
    1fe3:	19 00                	sbb    DWORD PTR [eax],eax
    1fe5:	9f                   	lahf   
    1fe6:	4f                   	dec    edi
    1fe7:	00 00                	add    BYTE PTR [eax],al
    1fe9:	00 01                	add    BYTE PTR [ecx],al
    1feb:	9c                   	pushf  
    1fec:	71 07                	jno    1ff5 <sysEnter_Vector-0x12e00b>
    1fee:	00 00                	add    BYTE PTR [eax],al
    1ff0:	0d 24 05 00 00       	or     eax,0x524
    1ff5:	01 d9                	add    ecx,ebx
    1ff7:	c2 01 00             	ret    0x1
    1ffa:	00 02                	add    BYTE PTR [edx],al
    1ffc:	91                   	xchg   ecx,eax
    1ffd:	00 0d 25 09 00 00    	add    BYTE PTR ds:0x925,cl
    2003:	01 d9                	add    ecx,ebx
    2005:	5a                   	pop    edx
    2006:	00 00                	add    BYTE PTR [eax],al
    2008:	00 02                	add    BYTE PTR [edx],al
    200a:	91                   	xchg   ecx,eax
    200b:	04 0d                	add    al,0xd
    200d:	5a                   	pop    edx
    200e:	09 00                	or     DWORD PTR [eax],eax
    2010:	00 01                	add    BYTE PTR [ecx],al
    2012:	d9 77 06             	fnstenv [edi+0x6]
    2015:	00 00                	add    BYTE PTR [eax],al
    2017:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    201d:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2020:	db 5a 00             	fistp  DWORD PTR [edx+0x0]
    2023:	00 00                	add    BYTE PTR [eax],al
    2025:	02 91 74 00 11 ed    	add    dl,BYTE PTR [ecx-0x12eeff8c]
    202b:	07                   	pop    es
    202c:	00 00                	add    BYTE PTR [eax],al
    202e:	01 e1                	add    ecx,esp
    2030:	5a                   	pop    edx
    2031:	00 00                	add    BYTE PTR [eax],al
    2033:	00 ed                	add    ch,ch
    2035:	19 00                	sbb    DWORD PTR [eax],eax
    2037:	9f                   	lahf   
    2038:	1c 00                	sbb    al,0x0
    203a:	00 00                	add    BYTE PTR [eax],al
    203c:	01 9c 99 07 00 00 17 	add    DWORD PTR [ecx+ebx*4+0x17000007],ebx
    2043:	70 69                	jo     20ae <sysEnter_Vector-0x12df52>
    2045:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2048:	e1 76                	loope  20c0 <sysEnter_Vector-0x12df40>
    204a:	00 00                	add    BYTE PTR [eax],al
    204c:	00 02                	add    BYTE PTR [edx],al
    204e:	91                   	xchg   ecx,eax
    204f:	00 00                	add    BYTE PTR [eax],al
    2051:	15 5f 09 00 00       	adc    eax,0x95f
    2056:	01 e7                	add    edi,esp
    2058:	09 1a                	or     DWORD PTR [edx],ebx
    205a:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2060:	01 9c bd 07 00 00 0d 	add    DWORD PTR [ebp+edi*4+0xd000007],ebx
    2067:	64 09 00             	or     DWORD PTR fs:[eax],eax
    206a:	00 01                	add    BYTE PTR [ecx],al
    206c:	e7 5a                	out    0x5a,eax
    206e:	00 00                	add    BYTE PTR [eax],al
    2070:	00 02                	add    BYTE PTR [edx],al
    2072:	91                   	xchg   ecx,eax
    2073:	00 00                	add    BYTE PTR [eax],al
    2075:	11 c2                	adc    edx,eax
    2077:	08 00                	or     BYTE PTR [eax],al
    2079:	00 01                	add    BYTE PTR [ecx],al
    207b:	ec                   	in     al,dx
    207c:	c2 01 00             	ret    0x1
    207f:	00 29                	add    BYTE PTR [ecx],ch
    2081:	1a 00                	sbb    al,BYTE PTR [eax]
    2083:	9f                   	lahf   
    2084:	20 00                	and    BYTE PTR [eax],al
    2086:	00 00                	add    BYTE PTR [eax],al
    2088:	01 9c f3 07 00 00 17 	add    DWORD PTR [ebx+esi*8+0x17000007],ebx
    208f:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    2092:	00 01                	add    BYTE PTR [ecx],al
    2094:	ec                   	in     al,dx
    2095:	c2 01 00             	ret    0x1
    2098:	00 02                	add    BYTE PTR [edx],al
    209a:	91                   	xchg   ecx,eax
    209b:	00 0d a8 06 00 00    	add    BYTE PTR ds:0x6a8,cl
    20a1:	01 ec                	add    esp,ebp
    20a3:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    20aa:	00 0c 3e             	add    BYTE PTR [esi+edi*1],cl
    20ad:	09 00                	or     DWORD PTR [eax],eax
    20af:	00 01                	add    BYTE PTR [ecx],al
    20b1:	f1                   	icebp  
    20b2:	9a 00 00 00 49 1a 00 	call   0x1a:0x49000000
    20b9:	9f                   	lahf   
    20ba:	44                   	inc    esp
    20bb:	01 00                	add    DWORD PTR [eax],eax
    20bd:	00 01                	add    BYTE PTR [ecx],al
    20bf:	9c                   	pushf  
    20c0:	d1 08                	ror    DWORD PTR [eax],1
    20c2:	00 00                	add    BYTE PTR [eax],al
    20c4:	0d 79 06 00 00       	or     eax,0x679
    20c9:	01 f1                	add    ecx,esi
    20cb:	c2 01 00             	ret    0x1
    20ce:	00 02                	add    BYTE PTR [edx],al
    20d0:	91                   	xchg   ecx,eax
    20d1:	00 0d 5a 09 00 00    	add    BYTE PTR ds:0x95a,cl
    20d7:	01 f1                	add    ecx,esi
    20d9:	77 06                	ja     20e1 <sysEnter_Vector-0x12df1f>
    20db:	00 00                	add    BYTE PTR [eax],al
    20dd:	02 91 04 0d 5e 08    	add    dl,BYTE PTR [ecx+0x85e0d04]
    20e3:	00 00                	add    BYTE PTR [eax],al
    20e5:	01 f1                	add    ecx,esi
    20e7:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    20ee:	14 70                	adc    al,0x70
    20f0:	00 01                	add    BYTE PTR [ecx],al
    20f2:	f3 c2 01 00          	repz ret 0x1
    20f6:	00 02                	add    BYTE PTR [edx],al
    20f8:	91                   	xchg   ecx,eax
    20f9:	74 0e                	je     2109 <sysEnter_Vector-0x12def7>
    20fb:	8e 07                	mov    es,WORD PTR [edi]
    20fd:	00 00                	add    BYTE PTR [eax],al
    20ff:	01 f3                	add    ebx,esi
    2101:	c2 01 00             	ret    0x1
    2104:	00 02                	add    BYTE PTR [edx],al
    2106:	91                   	xchg   ecx,eax
    2107:	70 14                	jo     211d <sysEnter_Vector-0x12dee3>
    2109:	63 00                	arpl   WORD PTR [eax],ax
    210b:	01 f4                	add    esp,esi
    210d:	5a                   	pop    edx
    210e:	00 00                	add    BYTE PTR [eax],al
    2110:	00 02                	add    BYTE PTR [edx],al
    2112:	91                   	xchg   ecx,eax
    2113:	64 08 03             	or     BYTE PTR fs:[ebx],al
    2116:	09 00                	or     DWORD PTR [eax],eax
    2118:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
    211b:	00 00                	add    BYTE PTR [eax],al
    211d:	00 01                	add    BYTE PTR [ecx],al
    211f:	f5                   	cmc    
    2120:	7f 08                	jg     212a <sysEnter_Vector-0x12ded6>
    2122:	00 00                	add    BYTE PTR [eax],al
    2124:	09 fe                	or     esi,edi
    2126:	08 00                	or     BYTE PTR [eax],al
    2128:	00 00                	add    BYTE PTR [eax],al
    212a:	09 56 08             	or     DWORD PTR [esi+0x8],edx
    212d:	00 00                	add    BYTE PTR [eax],al
    212f:	01 09                	add    DWORD PTR [ecx],ecx
    2131:	0a 09                	or     cl,BYTE PTR [ecx]
    2133:	00 00                	add    BYTE PTR [eax],al
    2135:	02 00                	add    al,BYTE PTR [eax]
    2137:	0e                   	push   cs
    2138:	ae                   	scas   al,BYTE PTR es:[edi]
    2139:	07                   	pop    es
    213a:	00 00                	add    BYTE PTR [eax],al
    213c:	01 f5                	add    ebp,esi
    213e:	5c                   	pop    esp
    213f:	08 00                	or     BYTE PTR [eax],al
    2141:	00 02                	add    BYTE PTR [edx],al
    2143:	91                   	xchg   ecx,eax
    2144:	6c                   	ins    BYTE PTR es:[edi],dx
    2145:	0e                   	push   cs
    2146:	25 09 00 00 01       	and    eax,0x1000009
    214b:	f6 9a 00 00 00 02    	neg    BYTE PTR [edx+0x2000000]
    2151:	91                   	xchg   ecx,eax
    2152:	68 18 95 1a 00       	push   0x1a9518
    2157:	9f                   	lahf   
    2158:	0e                   	push   cs
    2159:	00 00                	add    BYTE PTR [eax],al
    215b:	00 b7 08 00 00 0e    	add    BYTE PTR [edi+0xe000008],dh
    2161:	78 08                	js     216b <sysEnter_Vector-0x12de95>
    2163:	00 00                	add    BYTE PTR [eax],al
    2165:	01 fc                	add    esp,edi
    2167:	be 00 00 00 02       	mov    esi,0x2000000
    216c:	91                   	xchg   ecx,eax
    216d:	63 00                	arpl   WORD PTR [eax],ax
    216f:	13 04 1b             	adc    eax,DWORD PTR [ebx+ebx*1]
    2172:	00 9f 0e 00 00 00    	add    BYTE PTR [edi+0xe],bl
    2178:	19 78 08             	sbb    DWORD PTR [eax+0x8],edi
    217b:	00 00                	add    BYTE PTR [eax],al
    217d:	01 12                	add    DWORD PTR [edx],edx
    217f:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    2185:	91                   	xchg   ecx,eax
    2186:	62 00                	bound  eax,QWORD PTR [eax]
    2188:	00 1a                	add    BYTE PTR [edx],bl
    218a:	c6 07 00             	mov    BYTE PTR [edi],0x0
    218d:	00 01                	add    BYTE PTR [ecx],al
    218f:	21 01                	and    DWORD PTR [ecx],eax
    2191:	9a 00 00 00 8d 1b 00 	call   0x1b:0x8d000000
    2198:	9f                   	lahf   
    2199:	20 00                	and    BYTE PTR [eax],al
    219b:	00 00                	add    BYTE PTR [eax],al
    219d:	01 9c 19 09 00 00 1b 	add    DWORD PTR [ecx+ebx*1+0x1b000009],ebx
    21a4:	79 06                	jns    21ac <sysEnter_Vector-0x12de54>
    21a6:	00 00                	add    BYTE PTR [eax],al
    21a8:	01 21                	add    DWORD PTR [ecx],esp
    21aa:	01 c2                	add    edx,eax
    21ac:	01 00                	add    DWORD PTR [eax],eax
    21ae:	00 02                	add    BYTE PTR [edx],al
    21b0:	91                   	xchg   ecx,eax
    21b1:	00 1b                	add    BYTE PTR [ebx],bl
    21b3:	5a                   	pop    edx
    21b4:	09 00                	or     DWORD PTR [eax],eax
    21b6:	00 01                	add    BYTE PTR [ecx],al
    21b8:	21 01                	and    DWORD PTR [ecx],eax
    21ba:	77 06                	ja     21c2 <sysEnter_Vector-0x12de3e>
    21bc:	00 00                	add    BYTE PTR [eax],al
    21be:	02 91 04 1b 5e 08    	add    dl,BYTE PTR [ecx+0x85e1b04]
    21c4:	00 00                	add    BYTE PTR [eax],al
    21c6:	01 21                	add    DWORD PTR [ecx],esp
    21c8:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    21ce:	91                   	xchg   ecx,eax
    21cf:	08 00                	or     BYTE PTR [eax],al
    21d1:	1a 17                	sbb    dl,BYTE PTR [edi]
    21d3:	08 00                	or     BYTE PTR [eax],al
    21d5:	00 01                	add    BYTE PTR [ecx],al
    21d7:	26 01 77 06          	add    DWORD PTR es:[edi+0x6],esi
    21db:	00 00                	add    BYTE PTR [eax],al
    21dd:	ad                   	lods   eax,DWORD PTR ds:[esi]
    21de:	1b 00                	sbb    eax,DWORD PTR [eax]
    21e0:	9f                   	lahf   
    21e1:	fd                   	std    
    21e2:	02 00                	add    al,BYTE PTR [eax]
    21e4:	00 01                	add    BYTE PTR [ecx],al
    21e6:	9c                   	pushf  
    21e7:	08 0a                	or     BYTE PTR [edx],cl
    21e9:	00 00                	add    BYTE PTR [eax],al
    21eb:	1b 2a                	sbb    ebp,DWORD PTR [edx]
    21ed:	09 00                	or     DWORD PTR [eax],eax
    21ef:	00 01                	add    BYTE PTR [ecx],al
    21f1:	26 01 b3 00 00 00 02 	add    DWORD PTR es:[ebx+0x2000000],esi
    21f8:	91                   	xchg   ecx,eax
    21f9:	00 1b                	add    BYTE PTR [ebx],bl
    21fb:	25 09 00 00 01       	and    eax,0x1000009
    2200:	26 01 08             	add    DWORD PTR es:[eax],ecx
    2203:	0a 00                	or     al,BYTE PTR [eax]
    2205:	00 02                	add    BYTE PTR [edx],al
    2207:	91                   	xchg   ecx,eax
    2208:	04 19                	add    al,0x19
    220a:	5a                   	pop    edx
    220b:	09 00                	or     DWORD PTR [eax],eax
    220d:	00 01                	add    BYTE PTR [ecx],al
    220f:	28 01                	sub    BYTE PTR [ecx],al
    2211:	77 06                	ja     2219 <sysEnter_Vector-0x12dde7>
    2213:	00 00                	add    BYTE PTR [eax],al
    2215:	02 91 54 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c54]
    221b:	64 00 01             	add    BYTE PTR fs:[ecx],al
    221e:	29 01                	sub    DWORD PTR [ecx],eax
    2220:	0e                   	push   cs
    2221:	0a 00                	or     al,BYTE PTR [eax]
    2223:	00 03                	add    BYTE PTR [ebx],al
    2225:	91                   	xchg   ecx,eax
    2226:	d0                   	(bad)  
    2227:	77 19                	ja     2242 <sysEnter_Vector-0x12ddbe>
    2229:	d1 07                	rol    DWORD PTR [edi],1
    222b:	00 00                	add    BYTE PTR [eax],al
    222d:	01 2a                	add    DWORD PTR [edx],ebp
    222f:	01 c2                	add    edx,eax
    2231:	01 00                	add    DWORD PTR [eax],eax
    2233:	00 02                	add    BYTE PTR [edx],al
    2235:	91                   	xchg   ecx,eax
    2236:	6c                   	ins    BYTE PTR es:[edi],dx
    2237:	19 5d 07             	sbb    DWORD PTR [ebp+0x7],ebx
    223a:	00 00                	add    BYTE PTR [eax],al
    223c:	01 2a                	add    DWORD PTR [edx],ebp
    223e:	01 c2                	add    edx,eax
    2240:	01 00                	add    DWORD PTR [eax],eax
    2242:	00 02                	add    BYTE PTR [edx],al
    2244:	91                   	xchg   ecx,eax
    2245:	68 19 7d 07 00       	push   0x77d19
    224a:	00 01                	add    BYTE PTR [ecx],al
    224c:	2a 01                	sub    al,BYTE PTR [ecx]
    224e:	c2 01 00             	ret    0x1
    2251:	00 02                	add    BYTE PTR [edx],al
    2253:	91                   	xchg   ecx,eax
    2254:	5c                   	pop    esp
    2255:	19 08                	sbb    DWORD PTR [eax],ecx
    2257:	08 00                	or     BYTE PTR [eax],al
    2259:	00 01                	add    BYTE PTR [ecx],al
    225b:	2b 01                	sub    eax,DWORD PTR [ecx]
    225d:	1f                   	pop    ds
    225e:	0a 00                	or     al,BYTE PTR [eax]
    2260:	00 03                	add    BYTE PTR [ebx],al
    2262:	91                   	xchg   ecx,eax
    2263:	ce                   	into   
    2264:	77 19                	ja     227f <sysEnter_Vector-0x12dd81>
    2266:	86 07                	xchg   BYTE PTR [edi],al
    2268:	00 00                	add    BYTE PTR [eax],al
    226a:	01 44 01 5a          	add    DWORD PTR [ecx+eax*1+0x5a],eax
    226e:	00 00                	add    BYTE PTR [eax],al
    2270:	00 02                	add    BYTE PTR [edx],al
    2272:	91                   	xchg   ecx,eax
    2273:	64 18 64 1c 00       	sbb    BYTE PTR fs:[esp+ebx*1+0x0],ah
    2278:	9f                   	lahf   
    2279:	40                   	inc    eax
    227a:	00 00                	add    BYTE PTR [eax],al
    227c:	00 d9                	add    cl,bl
    227e:	09 00                	or     DWORD PTR [eax],eax
    2280:	00 19                	add    BYTE PTR [ecx],bl
    2282:	da 07                	fiadd  DWORD PTR [edi]
    2284:	00 00                	add    BYTE PTR [eax],al
    2286:	01 36                	add    DWORD PTR [esi],esi
    2288:	01 c2                	add    edx,eax
    228a:	01 00                	add    DWORD PTR [eax],eax
    228c:	00 02                	add    BYTE PTR [edx],al
    228e:	91                   	xchg   ecx,eax
    228f:	58                   	pop    eax
    2290:	00 13                	add    BYTE PTR [ebx],dl
    2292:	14 1d                	adc    al,0x1d
    2294:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    229a:	1c 63                	sbb    al,0x63
    229c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    229d:	74 00                	je     229f <sysEnter_Vector-0x12dd61>
    229f:	01 46 01             	add    DWORD PTR [esi+0x1],eax
    22a2:	5a                   	pop    edx
    22a3:	00 00                	add    BYTE PTR [eax],al
    22a5:	00 02                	add    BYTE PTR [edx],al
    22a7:	91                   	xchg   ecx,eax
    22a8:	60                   	pusha  
    22a9:	1d 00 00 00 00       	sbb    eax,0x0
    22ae:	19 da                	sbb    edx,ebx
    22b0:	07                   	pop    es
    22b1:	00 00                	add    BYTE PTR [eax],al
    22b3:	01 4c 01 c2          	add    DWORD PTR [ecx+eax*1-0x3e],ecx
    22b7:	01 00                	add    DWORD PTR [eax],eax
    22b9:	00 02                	add    BYTE PTR [edx],al
    22bb:	91                   	xchg   ecx,eax
    22bc:	50                   	push   eax
    22bd:	00 00                	add    BYTE PTR [eax],al
    22bf:	00 06                	add    BYTE PTR [esi],al
    22c1:	04 5a                	add    al,0x5a
    22c3:	00 00                	add    BYTE PTR [eax],al
    22c5:	00 1e                	add    BYTE PTR [esi],bl
    22c7:	3a 00                	cmp    al,BYTE PTR [eax]
    22c9:	00 00                	add    BYTE PTR [eax],al
    22cb:	1f                   	pop    ds
    22cc:	0a 00                	or     al,BYTE PTR [eax]
    22ce:	00 1f                	add    BYTE PTR [edi],bl
    22d0:	c5 00                	lds    eax,FWORD PTR [eax]
    22d2:	00 00                	add    BYTE PTR [eax],al
    22d4:	ff 03                	inc    DWORD PTR [ebx]
    22d6:	00 1e                	add    BYTE PTR [esi],bl
    22d8:	3a 00                	cmp    al,BYTE PTR [eax]
    22da:	00 00                	add    BYTE PTR [eax],al
    22dc:	2f                   	das    
    22dd:	0a 00                	or     al,BYTE PTR [eax]
    22df:	00 20                	add    BYTE PTR [eax],ah
    22e1:	c5 00                	lds    eax,FWORD PTR [eax]
    22e3:	00 00                	add    BYTE PTR [eax],al
    22e5:	01 00                	add    DWORD PTR [eax],eax
    22e7:	1a df                	sbb    bl,bh
    22e9:	07                   	pop    es
    22ea:	00 00                	add    BYTE PTR [eax],al
    22ec:	01 64 01 77          	add    DWORD PTR [ecx+eax*1+0x77],esp
    22f0:	06                   	push   es
    22f1:	00 00                	add    BYTE PTR [eax],al
    22f3:	aa                   	stos   BYTE PTR es:[edi],al
    22f4:	1e                   	push   ds
    22f5:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    22fb:	01 9c 68 0a 00 00 1b 	add    DWORD PTR [eax+ebp*2+0x1b00000a],ebx
    2302:	2a 09                	sub    cl,BYTE PTR [ecx]
    2304:	00 00                	add    BYTE PTR [eax],al
    2306:	01 64 01 c2          	add    DWORD PTR [ecx+eax*1-0x3e],esp
    230a:	01 00                	add    DWORD PTR [eax],eax
    230c:	00 02                	add    BYTE PTR [edx],al
    230e:	91                   	xchg   ecx,eax
    230f:	00 1b                	add    BYTE PTR [ebx],bl
    2311:	25 09 00 00 01       	and    eax,0x1000009
    2316:	64 01 08             	add    DWORD PTR fs:[eax],ecx
    2319:	0a 00                	or     al,BYTE PTR [eax]
    231b:	00 02                	add    BYTE PTR [edx],al
    231d:	91                   	xchg   ecx,eax
    231e:	04 00                	add    al,0x0
    2320:	1a 6b 09             	sbb    ch,BYTE PTR [ebx+0x9]
    2323:	00 00                	add    BYTE PTR [eax],al
    2325:	01 69 01             	add    DWORD PTR [ecx+0x1],ebp
    2328:	5a                   	pop    edx
    2329:	00 00                	add    BYTE PTR [eax],al
    232b:	00 cd                	add    ch,cl
    232d:	1e                   	push   ds
    232e:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    2334:	01 9c a1 0a 00 00 21 	add    DWORD PTR [ecx+eiz*4+0x2100000a],ebx
    233b:	73 74                	jae    23b1 <sysEnter_Vector-0x12dc4f>
    233d:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2340:	69 01 5a 00 00 00    	imul   eax,DWORD PTR [ecx],0x5a
    2346:	02 91 00 1b 7d 09    	add    dl,BYTE PTR [ecx+0x97d1b00]
    234c:	00 00                	add    BYTE PTR [eax],al
    234e:	01 69 01             	add    DWORD PTR [ecx+0x1],ebp
    2351:	76 00                	jbe    2353 <sysEnter_Vector-0x12dcad>
    2353:	00 00                	add    BYTE PTR [eax],al
    2355:	02 91 04 00 22 a3    	add    dl,BYTE PTR [ecx-0x5cddfffc]
    235b:	00 00                	add    BYTE PTR [eax],al
    235d:	00 06                	add    BYTE PTR [esi],al
    235f:	37                   	aaa    
    2360:	76 00                	jbe    2362 <sysEnter_Vector-0x12dc9e>
    2362:	00 00                	add    BYTE PTR [eax],al
    2364:	05 03 6c 71 00       	add    eax,0x716c03
    2369:	9f                   	lahf   
    236a:	22 34 01             	and    dh,BYTE PTR [ecx+eax*1]
    236d:	00 00                	add    BYTE PTR [eax],al
    236f:	06                   	push   es
    2370:	38 76 00             	cmp    BYTE PTR [esi+0x0],dh
    2373:	00 00                	add    BYTE PTR [eax],al
    2375:	05 03 70 71 00       	add    eax,0x717003
    237a:	9f                   	lahf   
    237b:	22 7b 00             	and    bh,BYTE PTR [ebx+0x0]
    237e:	00 00                	add    BYTE PTR [eax],al
    2380:	06                   	push   es
    2381:	39 76 00             	cmp    DWORD PTR [esi+0x0],esi
    2384:	00 00                	add    BYTE PTR [eax],al
    2386:	05 03 68 71 00       	add    eax,0x716803
    238b:	9f                   	lahf   
    238c:	22 7c 01 00          	and    bh,BYTE PTR [ecx+eax*1+0x0]
    2390:	00 06                	add    BYTE PTR [esi],al
    2392:	3a a5 00 00 00 05    	cmp    ah,BYTE PTR [ebp+0x5000000]
    2398:	03 78 71             	add    edi,DWORD PTR [eax+0x71]
    239b:	00 9f 22 6e 00 00    	add    BYTE PTR [edi+0x6e22],bl
    23a1:	00 07                	add    BYTE PTR [edi],al
    23a3:	34 f6                	xor    al,0xf6
    23a5:	0a 00                	or     al,BYTE PTR [eax]
    23a7:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    23ad:	9f                   	lahf   
    23ae:	06                   	push   es
    23af:	04 8f                	add    al,0x8f
    23b1:	00 00                	add    BYTE PTR [eax],al
    23b3:	00 22                	add    BYTE PTR [edx],ah
    23b5:	91                   	xchg   ecx,eax
    23b6:	00 00                	add    BYTE PTR [eax],al
    23b8:	00 07                	add    BYTE PTR [edi],al
    23ba:	35 76 00 00 00       	xor    eax,0x76
    23bf:	05 03 60 71 00       	add    eax,0x716003
    23c4:	9f                   	lahf   
    23c5:	22 41 00             	and    al,BYTE PTR [ecx+0x0]
    23c8:	00 00                	add    BYTE PTR [eax],al
    23ca:	08 58 77             	or     BYTE PTR [eax+0x77],bl
    23cd:	06                   	push   es
    23ce:	00 00                	add    BYTE PTR [eax],al
    23d0:	05 03 74 71 00       	add    eax,0x717403
    23d5:	9f                   	lahf   
    23d6:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
    23d9:	00 00                	add    BYTE PTR [eax],al
    23db:	01 0d be 00 00 00    	add    DWORD PTR ds:0xbe,ecx
    23e1:	05 03 94 71 00       	add    eax,0x719403
    23e6:	9f                   	lahf   
    23e7:	22 dc                	and    bl,ah
    23e9:	08 00                	or     BYTE PTR [eax],al
    23eb:	00 01                	add    BYTE PTR [ecx],al
    23ed:	0e                   	push   cs
    23ee:	c2 01 00             	ret    0x1
    23f1:	00 05 03 98 71 00    	add    BYTE PTR ds:0x719803,al
    23f7:	9f                   	lahf   
    23f8:	00 05 03 00 00 04    	add    BYTE PTR ds:0x4000003,al
    23fe:	00 ce                	add    dh,cl
    2400:	08 00                	or     BYTE PTR [eax],al
    2402:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2405:	ac                   	lods   al,BYTE PTR ds:[esi]
    2406:	00 00                	add    BYTE PTR [eax],al
    2408:	00 0c d1             	add    BYTE PTR [ecx+edx*8],cl
    240b:	09 00                	or     DWORD PTR [eax],eax
    240d:	00 1e                	add    BYTE PTR [esi],bl
    240f:	00 00                	add    BYTE PTR [eax],al
    2411:	00 f0                	add    al,dh
    2413:	1e                   	push   ds
    2414:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    241a:	f5                   	cmc    
    241b:	0b 00                	or     eax,DWORD PTR [eax]
    241d:	00 02                	add    BYTE PTR [edx],al
    241f:	01 06                	add    DWORD PTR [esi],eax
    2421:	8c 00                	mov    WORD PTR [eax],es
    2423:	00 00                	add    BYTE PTR [eax],al
    2425:	02 01                	add    al,BYTE PTR [ecx]
    2427:	06                   	push   es
    2428:	85 00                	test   DWORD PTR [eax],eax
    242a:	00 00                	add    BYTE PTR [eax],al
    242c:	02 02                	add    al,BYTE PTR [edx]
    242e:	05 72 01 00 00       	add    eax,0x172
    2433:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    243a:	02 08                	add    cl,BYTE PTR [eax]
    243c:	05 00 00 00 00       	add    eax,0x0
    2441:	02 01                	add    al,BYTE PTR [ecx]
    2443:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    2449:	02 07                	add    al,BYTE PTR [edi]
    244b:	19 01                	sbb    DWORD PTR [ecx],eax
    244d:	00 00                	add    BYTE PTR [eax],al
    244f:	04 0e                	add    al,0xe
    2451:	00 00                	add    BYTE PTR [eax],al
    2453:	00 02                	add    BYTE PTR [edx],al
    2455:	34 61                	xor    al,0x61
    2457:	00 00                	add    BYTE PTR [eax],al
    2459:	00 02                	add    BYTE PTR [edx],al
    245b:	04 07                	add    al,0x7
    245d:	61                   	popa   
    245e:	00 00                	add    BYTE PTR [eax],al
    2460:	00 02                	add    BYTE PTR [edx],al
    2462:	08 07                	or     BYTE PTR [edi],al
    2464:	57                   	push   edi
    2465:	00 00                	add    BYTE PTR [eax],al
    2467:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    246e:	56                   	push   esi
    246f:	61                   	popa   
    2470:	00 00                	add    BYTE PTR [eax],al
    2472:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    2479:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    247c:	00 00                	add    BYTE PTR [eax],al
    247e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2485:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2488:	66 01 00             	add    WORD PTR [eax],ax
    248b:	00 02                	add    BYTE PTR [edx],al
    248d:	01 02                	add    DWORD PTR [edx],eax
    248f:	13 01                	adc    eax,DWORD PTR [ecx]
    2491:	00 00                	add    BYTE PTR [eax],al
    2493:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2496:	83 01 00             	add    DWORD PTR [ecx],0x0
    2499:	00 04 b2             	add    BYTE PTR [edx+esi*4],al
    249c:	09 00                	or     DWORD PTR [eax],eax
    249e:	00 04 15 85 00 00 00 	add    BYTE PTR [edx*1+0x85],al
    24a5:	05 bf 03 00 00       	add    eax,0x3bf
    24aa:	04 61                	add    al,0x61
    24ac:	00 00                	add    BYTE PTR [eax],al
    24ae:	00 05 15 99 01 00    	add    BYTE PTR ds:0x19915,al
    24b4:	00 06                	add    BYTE PTR [esi],al
    24b6:	5f                   	pop    edi
    24b7:	03 00                	add    eax,DWORD PTR [eax]
    24b9:	00 00                	add    BYTE PTR [eax],al
    24bb:	06                   	push   es
    24bc:	cb                   	retf   
    24bd:	04 00                	add    al,0x0
    24bf:	00 01                	add    BYTE PTR [ecx],al
    24c1:	06                   	push   es
    24c2:	d6                   	(bad)  
    24c3:	02 00                	add    al,BYTE PTR [eax]
    24c5:	00 02                	add    BYTE PTR [edx],al
    24c7:	06                   	push   es
    24c8:	bd 04 00 00 03       	mov    ebp,0x3000004
    24cd:	06                   	push   es
    24ce:	08 03                	or     BYTE PTR [ebx],al
    24d0:	00 00                	add    BYTE PTR [eax],al
    24d2:	04 06                	add    al,0x6
    24d4:	f3 02 00             	repz add al,BYTE PTR [eax]
    24d7:	00 05 06 52 03 00    	add    BYTE PTR ds:0x35206,al
    24dd:	00 0a                	add    BYTE PTR [edx],cl
    24df:	06                   	push   es
    24e0:	33 04 00             	xor    eax,DWORD PTR [eax+eax*1]
    24e3:	00 0b                	add    BYTE PTR [ebx],cl
    24e5:	06                   	push   es
    24e6:	6f                   	outs   dx,DWORD PTR ds:[esi]
    24e7:	03 00                	add    eax,DWORD PTR [eax]
    24e9:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    24ec:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    24f1:	06                   	push   es
    24f2:	40                   	inc    eax
    24f3:	04 00                	add    al,0x0
    24f5:	00 0e                	add    BYTE PTR [esi],cl
    24f7:	06                   	push   es
    24f8:	95                   	xchg   ebp,eax
    24f9:	04 00                	add    al,0x0
    24fb:	00 0f                	add    BYTE PTR [edi],cl
    24fd:	06                   	push   es
    24fe:	3f                   	aas    
    24ff:	03 00                	add    eax,DWORD PTR [eax]
    2501:	00 10                	add    BYTE PTR [eax],dl
    2503:	06                   	push   es
    2504:	4d                   	dec    ebp
    2505:	04 00                	add    al,0x0
    2507:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    250a:	df 03                	fild   WORD PTR [ebx]
    250c:	00 00                	add    BYTE PTR [eax],al
    250e:	50                   	push   eax
    250f:	06                   	push   es
    2510:	78 04                	js     2516 <sysEnter_Vector-0x12daea>
    2512:	00 00                	add    BYTE PTR [eax],al
    2514:	59                   	pop    ecx
    2515:	06                   	push   es
    2516:	8b 02                	mov    eax,DWORD PTR [edx]
    2518:	00 00                	add    BYTE PTR [eax],al
    251a:	61                   	popa   
    251b:	06                   	push   es
    251c:	fc                   	cld    
    251d:	03 00                	add    eax,DWORD PTR [eax]
    251f:	00 97 07 94 03 00    	add    BYTE PTR [edi+0x39407],dl
    2525:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2528:	07                   	pop    es
    2529:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    252d:	64 01 07             	add    DWORD PTR fs:[edi],eax
    2530:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
    2533:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    2536:	07                   	pop    es
    2537:	af                   	scas   eax,DWORD PTR es:[edi]
    2538:	02 00                	add    al,BYTE PTR [eax]
    253a:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    253d:	07                   	pop    es
    253e:	2a 03                	sub    al,BYTE PTR [ebx]
    2540:	00 00                	add    BYTE PTR [eax],al
    2542:	67 01 07             	add    DWORD PTR [bx],eax
    2545:	1d 03 00 00 68       	sbb    eax,0x68000003
    254a:	01 07                	add    DWORD PTR [edi],eax
    254c:	e5 04                	in     eax,0x4
    254e:	00 00                	add    BYTE PTR [eax],al
    2550:	69 01 07 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e07
    2556:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2559:	07                   	pop    es
    255a:	e3 02                	jecxz  255e <sysEnter_Vector-0x12daa2>
    255c:	00 00                	add    BYTE PTR [eax],al
    255e:	71 01                	jno    2561 <sysEnter_Vector-0x12da9f>
    2560:	07                   	pop    es
    2561:	af                   	scas   eax,DWORD PTR es:[edi]
    2562:	04 00                	add    al,0x0
    2564:	00 00                	add    BYTE PTR [eax],al
    2566:	03 07                	add    eax,DWORD PTR [edi]
    2568:	5c                   	pop    esp
    2569:	04 00                	add    al,0x0
    256b:	00 01                	add    BYTE PTR [ecx],al
    256d:	03 07                	add    eax,DWORD PTR [edi]
    256f:	ab                   	stos   DWORD PTR es:[edi],eax
    2570:	03 00                	add    eax,DWORD PTR [eax]
    2572:	00 02                	add    BYTE PTR [edx],al
    2574:	03 07                	add    eax,DWORD PTR [edi]
    2576:	84 03                	test   BYTE PTR [ebx],al
    2578:	00 00                	add    BYTE PTR [eax],al
    257a:	03 03                	add    eax,DWORD PTR [ebx]
    257c:	07                   	pop    es
    257d:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    2580:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    2583:	07                   	pop    es
    2584:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    2587:	00 05 03 07 d0 03    	add    BYTE PTR ds:0x3d00703,al
    258d:	00 00                	add    BYTE PTR [eax],al
    258f:	06                   	push   es
    2590:	03 00                	add    eax,DWORD PTR [eax]
    2592:	08 bd 09 00 00 18    	or     BYTE PTR [ebp+0x18000009],bh
    2598:	05 3b ed 01 00       	add    eax,0x1ed3b
    259d:	00 09                	add    BYTE PTR [ecx],cl
    259f:	a8 09                	test   al,0x9
    25a1:	00 00                	add    BYTE PTR [eax],al
    25a3:	05 3d ed 01 00       	add    eax,0x1ed3d
    25a8:	00 00                	add    BYTE PTR [eax],al
    25aa:	0a 6c 65 6e          	or     ch,BYTE PTR [ebp+eiz*2+0x6e]
    25ae:	00 05 3e 3a 00 00    	add    BYTE PTR ds:0x3a3e,al
    25b4:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    25b7:	b8 09 00 00 05       	mov    eax,0x5000009
    25bc:	3f                   	aas    
    25bd:	3a 00                	cmp    al,BYTE PTR [eax]
    25bf:	00 00                	add    BYTE PTR [eax],al
    25c1:	08 09                	or     BYTE PTR [ecx],cl
    25c3:	e0 09                	loopne 25ce <sysEnter_Vector-0x12da32>
    25c5:	00 00                	add    BYTE PTR [eax],al
    25c7:	05 40 3a 00 00       	add    eax,0x3a40
    25cc:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    25cf:	66                   	data16
    25d0:	64 00 05 41 3a 00 00 	add    BYTE PTR fs:0x3a41,al
    25d7:	00 10                	add    BYTE PTR [eax],dl
    25d9:	09 57 0e             	or     DWORD PTR [edi+0xe],edx
    25dc:	00 00                	add    BYTE PTR [eax],al
    25de:	05 42 3a 00 00       	add    eax,0x3a42
    25e3:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    25e6:	0b 04 04             	or     eax,DWORD PTR [esp+eax*1]
    25e9:	e6 09                	out    0x9,al
    25eb:	00 00                	add    BYTE PTR [eax],al
    25ed:	05 43 99 01 00       	add    eax,0x19943
    25f2:	00 02                	add    BYTE PTR [edx],al
    25f4:	04 07                	add    al,0x7
    25f6:	5c                   	pop    esp
    25f7:	00 00                	add    BYTE PTR [eax],al
    25f9:	00 0c 04             	add    BYTE PTR [esp+eax*1],cl
    25fc:	25 00 00 00 0d       	and    eax,0xd000000
    2601:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2602:	09 00                	or     DWORD PTR [eax],eax
    2604:	00 01                	add    BYTE PTR [ecx],al
    2606:	0d ed 01 00 00       	or     eax,0x1ed
    260b:	f0 1e                	lock push ds
    260d:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    2613:	01 9c 74 02 00 00 0e 	add    DWORD PTR [esp+esi*2+0xe000002],ebx
    261a:	a8 09                	test   al,0x9
    261c:	00 00                	add    BYTE PTR [eax],al
    261e:	01 0d ed 01 00 00    	add    DWORD PTR ds:0x1ed,ecx
    2624:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    262a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    262b:	00 01                	add    BYTE PTR [ecx],al
    262d:	0d 7a 00 00 00       	or     eax,0x7a
    2632:	02 91 04 0e b8 09    	add    dl,BYTE PTR [ecx+0x9b80e04]
    2638:	00 00                	add    BYTE PTR [eax],al
    263a:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    2640:	02 91 08 0e e0 09    	add    dl,BYTE PTR [ecx+0x9e00e08]
    2646:	00 00                	add    BYTE PTR [eax],al
    2648:	01 0d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ecx
    264e:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    2654:	00 01                	add    BYTE PTR [ecx],al
    2656:	0d 3a 00 00 00       	or     eax,0x3a
    265b:	02 91 10 0e 57 0e    	add    dl,BYTE PTR [ecx+0xe570e10]
    2661:	00 00                	add    BYTE PTR [eax],al
    2663:	01 0d a1 00 00 00    	add    DWORD PTR ds:0xa1,ecx
    2669:	02 91 14 00 10 a3    	add    dl,BYTE PTR [ecx-0x5cefffec]
    266f:	00 00                	add    BYTE PTR [eax],al
    2671:	00 06                	add    BYTE PTR [esi],al
    2673:	37                   	aaa    
    2674:	56                   	push   esi
    2675:	00 00                	add    BYTE PTR [eax],al
    2677:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    267d:	9f                   	lahf   
    267e:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
    2681:	00 00                	add    BYTE PTR [eax],al
    2683:	06                   	push   es
    2684:	38 56 00             	cmp    BYTE PTR [esi+0x0],dl
    2687:	00 00                	add    BYTE PTR [eax],al
    2689:	05 03 70 71 00       	add    eax,0x717003
    268e:	9f                   	lahf   
    268f:	10 7b 00             	adc    BYTE PTR [ebx+0x0],bh
    2692:	00 00                	add    BYTE PTR [eax],al
    2694:	06                   	push   es
    2695:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    2698:	00 00                	add    BYTE PTR [eax],al
    269a:	05 03 68 71 00       	add    eax,0x716803
    269f:	9f                   	lahf   
    26a0:	10 7c 01 00          	adc    BYTE PTR [ecx+eax*1+0x0],bh
    26a4:	00 06                	add    BYTE PTR [esi],al
    26a6:	3a 85 00 00 00 05    	cmp    al,BYTE PTR [ebp+0x5000000]
    26ac:	03 78 71             	add    edi,DWORD PTR [eax+0x71]
    26af:	00 9f 10 6e 00 00    	add    BYTE PTR [edi+0x6e10],bl
    26b5:	00 07                	add    BYTE PTR [edi],al
    26b7:	34 c9                	xor    al,0xc9
    26b9:	02 00                	add    al,BYTE PTR [eax]
    26bb:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    26c1:	9f                   	lahf   
    26c2:	0c 04                	or     al,0x4
    26c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    26c5:	00 00                	add    BYTE PTR [eax],al
    26c7:	00 10                	add    BYTE PTR [eax],dl
    26c9:	91                   	xchg   ecx,eax
    26ca:	00 00                	add    BYTE PTR [eax],al
    26cc:	00 07                	add    BYTE PTR [edi],al
    26ce:	35 56 00 00 00       	xor    eax,0x56
    26d3:	05 03 60 71 00       	add    eax,0x716003
    26d8:	9f                   	lahf   
    26d9:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    26dc:	00 00                	add    BYTE PTR [eax],al
    26de:	08 58 f1             	or     BYTE PTR [eax-0xf],bl
    26e1:	02 00                	add    al,BYTE PTR [eax]
    26e3:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    26e9:	9f                   	lahf   
    26ea:	0c 04                	or     al,0x4
    26ec:	01 02                	add    DWORD PTR [edx],eax
    26ee:	00 00                	add    BYTE PTR [eax],al
    26f0:	10 ca                	adc    dl,cl
    26f2:	09 00                	or     DWORD PTR [eax],eax
    26f4:	00 01                	add    BYTE PTR [ecx],al
    26f6:	0b ef                	or     ebp,edi
    26f8:	01 00                	add    DWORD PTR [eax],eax
    26fa:	00 05 03 9c 71 00    	add    BYTE PTR ds:0x719c03,al
    2700:	9f                   	lahf   
    2701:	00 43 05             	add    BYTE PTR [ebx+0x5],al
    2704:	00 00                	add    BYTE PTR [eax],al
    2706:	04 00                	add    al,0x0
    2708:	b0 09                	mov    al,0x9
    270a:	00 00                	add    BYTE PTR [eax],al
    270c:	04 01                	add    al,0x1
    270e:	ac                   	lods   al,BYTE PTR ds:[esi]
    270f:	00 00                	add    BYTE PTR [eax],al
    2711:	00 0c da             	add    BYTE PTR [edx+ebx*8],cl
    2714:	0a 00                	or     al,BYTE PTR [eax]
    2716:	00 1e                	add    BYTE PTR [esi],bl
    2718:	00 00                	add    BYTE PTR [eax],al
    271a:	00 64 1f 00          	add    BYTE PTR [edi+ebx*1+0x0],ah
    271e:	9f                   	lahf   
    271f:	15 06 00 00 0a       	adc    eax,0xa000006
    2724:	0d 00 00 02 01       	or     eax,0x1020000
    2729:	06                   	push   es
    272a:	85 00                	test   DWORD PTR [eax],eax
    272c:	00 00                	add    BYTE PTR [eax],al
    272e:	02 02                	add    al,BYTE PTR [edx]
    2730:	05 72 01 00 00       	add    eax,0x172
    2735:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    273c:	02 08                	add    cl,BYTE PTR [eax]
    273e:	05 00 00 00 00       	add    eax,0x0
    2743:	04 9d                	add    al,0x9d
    2745:	06                   	push   es
    2746:	00 00                	add    BYTE PTR [eax],al
    2748:	02 2e                	add    ch,BYTE PTR [esi]
    274a:	4c                   	dec    esp
    274b:	00 00                	add    BYTE PTR [eax],al
    274d:	00 02                	add    BYTE PTR [edx],al
    274f:	01 08                	add    DWORD PTR [eax],ecx
    2751:	83 00 00             	add    DWORD PTR [eax],0x0
    2754:	00 04 8d 05 00 00 02 	add    BYTE PTR [ecx*4+0x2000005],al
    275b:	31 5e 00             	xor    DWORD PTR [esi+0x0],ebx
    275e:	00 00                	add    BYTE PTR [eax],al
    2760:	02 02                	add    al,BYTE PTR [edx]
    2762:	07                   	pop    es
    2763:	19 01                	sbb    DWORD PTR [ecx],eax
    2765:	00 00                	add    BYTE PTR [eax],al
    2767:	04 0e                	add    al,0xe
    2769:	00 00                	add    BYTE PTR [eax],al
    276b:	00 02                	add    BYTE PTR [edx],al
    276d:	34 70                	xor    al,0x70
    276f:	00 00                	add    BYTE PTR [eax],al
    2771:	00 02                	add    BYTE PTR [edx],al
    2773:	04 07                	add    al,0x7
    2775:	61                   	popa   
    2776:	00 00                	add    BYTE PTR [eax],al
    2778:	00 02                	add    BYTE PTR [edx],al
    277a:	08 07                	or     BYTE PTR [edi],al
    277c:	57                   	push   edi
    277d:	00 00                	add    BYTE PTR [eax],al
    277f:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    2786:	56                   	push   esi
    2787:	70 00                	jo     2789 <sysEnter_Vector-0x12d877>
    2789:	00 00                	add    BYTE PTR [eax],al
    278b:	04 bd                	add    al,0xbd
    278d:	02 00                	add    al,BYTE PTR [eax]
    278f:	00 03                	add    BYTE PTR [ebx],al
    2791:	d8 70 00             	fdiv   DWORD PTR [eax+0x0]
    2794:	00 00                	add    BYTE PTR [eax],al
    2796:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    279d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    27a0:	66 01 00             	add    WORD PTR [eax],ax
    27a3:	00 02                	add    BYTE PTR [edx],al
    27a5:	01 06                	add    DWORD PTR [esi],eax
    27a7:	8c 00                	mov    WORD PTR [eax],es
    27a9:	00 00                	add    BYTE PTR [eax],al
    27ab:	05 59 0a 00 00       	add    eax,0xa59
    27b0:	18 04 2d 0a 01 00 00 	sbb    BYTE PTR [ebp*1+0x10a],al
    27b7:	06                   	push   es
    27b8:	25 0a 00 00 04       	and    eax,0x400000a
    27bd:	2f                   	das    
    27be:	65 00 00             	add    BYTE PTR gs:[eax],al
    27c1:	00 00                	add    BYTE PTR [eax],al
    27c3:	07                   	pop    es
    27c4:	6c                   	ins    BYTE PTR es:[edi],dx
    27c5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    27c7:	00 04 30             	add    BYTE PTR [eax+esi*1],al
    27ca:	65 00 00             	add    BYTE PTR gs:[eax],al
    27cd:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    27d0:	53                   	push   ebx
    27d1:	0a 00                	or     al,BYTE PTR [eax]
    27d3:	00 04 31             	add    BYTE PTR [ecx+esi*1],al
    27d6:	0a 01                	or     al,BYTE PTR [ecx]
    27d8:	00 00                	add    BYTE PTR [eax],al
    27da:	08 06                	or     BYTE PTR [esi],al
    27dc:	c5 0a                	lds    ecx,FWORD PTR [edx]
    27de:	00 00                	add    BYTE PTR [eax],al
    27e0:	04 32                	add    al,0x32
    27e2:	53                   	push   ebx
    27e3:	00 00                	add    BYTE PTR [eax],al
    27e5:	00 0a                	add    BYTE PTR [edx],cl
    27e7:	06                   	push   es
    27e8:	4c                   	dec    esp
    27e9:	0a 00                	or     al,BYTE PTR [eax]
    27eb:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    27ee:	11 01                	adc    DWORD PTR [ecx],eax
    27f0:	00 00                	add    BYTE PTR [eax],al
    27f2:	0c 06                	or     al,0x6
    27f4:	fd                   	std    
    27f5:	09 00                	or     DWORD PTR [eax],eax
    27f7:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    27fa:	28 01                	sub    BYTE PTR [ecx],al
    27fc:	00 00                	add    BYTE PTR [eax],al
    27fe:	10 06                	adc    BYTE PTR [esi],al
    2800:	10 0a                	adc    BYTE PTR [edx],cl
    2802:	00 00                	add    BYTE PTR [eax],al
    2804:	04 34                	add    al,0x34
    2806:	28 01                	sub    BYTE PTR [ecx],al
    2808:	00 00                	add    BYTE PTR [eax],al
    280a:	14 00                	adc    al,0x0
    280c:	02 01                	add    al,BYTE PTR [ecx]
    280e:	02 13                	add    dl,BYTE PTR [ebx]
    2810:	01 00                	add    DWORD PTR [eax],eax
    2812:	00 08                	add    BYTE PTR [eax],cl
    2814:	41                   	inc    ecx
    2815:	00 00                	add    BYTE PTR [eax],al
    2817:	00 21                	add    BYTE PTR [ecx],ah
    2819:	01 00                	add    DWORD PTR [eax],eax
    281b:	00 09                	add    BYTE PTR [ecx],cl
    281d:	21 01                	and    DWORD PTR [ecx],eax
    281f:	00 00                	add    BYTE PTR [eax],al
    2821:	00 00                	add    BYTE PTR [eax],al
    2823:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2826:	83 01 00             	add    DWORD PTR [ecx],0x0
    2829:	00 0a                	add    BYTE PTR [edx],cl
    282b:	04 a9                	add    al,0xa9
    282d:	00 00                	add    BYTE PTR [eax],al
    282f:	00 04 15 0a 00 00 04 	add    BYTE PTR [edx*1+0x400000a],al
    2836:	35 a9 00 00 00       	xor    eax,0xa9
    283b:	0b bf 03 00 00 04    	or     edi,DWORD PTR [edi+0x4000003]
    2841:	70 00                	jo     2843 <sysEnter_Vector-0x12d7bd>
    2843:	00 00                	add    BYTE PTR [eax],al
    2845:	07                   	pop    es
    2846:	15 26 02 00 00       	adc    eax,0x226
    284b:	0c 5f                	or     al,0x5f
    284d:	03 00                	add    eax,DWORD PTR [eax]
    284f:	00 00                	add    BYTE PTR [eax],al
    2851:	0c cb                	or     al,0xcb
    2853:	04 00                	add    al,0x0
    2855:	00 01                	add    BYTE PTR [ecx],al
    2857:	0c d6                	or     al,0xd6
    2859:	02 00                	add    al,BYTE PTR [eax]
    285b:	00 02                	add    BYTE PTR [edx],al
    285d:	0c bd                	or     al,0xbd
    285f:	04 00                	add    al,0x0
    2861:	00 03                	add    BYTE PTR [ebx],al
    2863:	0c 08                	or     al,0x8
    2865:	03 00                	add    eax,DWORD PTR [eax]
    2867:	00 04 0c             	add    BYTE PTR [esp+ecx*1],al
    286a:	f3 02 00             	repz add al,BYTE PTR [eax]
    286d:	00 05 0c 52 03 00    	add    BYTE PTR ds:0x3520c,al
    2873:	00 0a                	add    BYTE PTR [edx],cl
    2875:	0c 33                	or     al,0x33
    2877:	04 00                	add    al,0x0
    2879:	00 0b                	add    BYTE PTR [ebx],cl
    287b:	0c 6f                	or     al,0x6f
    287d:	03 00                	add    eax,DWORD PTR [eax]
    287f:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    2882:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    2887:	0c 40                	or     al,0x40
    2889:	04 00                	add    al,0x0
    288b:	00 0e                	add    BYTE PTR [esi],cl
    288d:	0c 95                	or     al,0x95
    288f:	04 00                	add    al,0x0
    2891:	00 0f                	add    BYTE PTR [edi],cl
    2893:	0c 3f                	or     al,0x3f
    2895:	03 00                	add    eax,DWORD PTR [eax]
    2897:	00 10                	add    BYTE PTR [eax],dl
    2899:	0c 4d                	or     al,0x4d
    289b:	04 00                	add    al,0x0
    289d:	00 4f 0c             	add    BYTE PTR [edi+0xc],cl
    28a0:	df 03                	fild   WORD PTR [ebx]
    28a2:	00 00                	add    BYTE PTR [eax],al
    28a4:	50                   	push   eax
    28a5:	0c 78                	or     al,0x78
    28a7:	04 00                	add    al,0x0
    28a9:	00 59 0c             	add    BYTE PTR [ecx+0xc],bl
    28ac:	8b 02                	mov    eax,DWORD PTR [edx]
    28ae:	00 00                	add    BYTE PTR [eax],al
    28b0:	61                   	popa   
    28b1:	0c fc                	or     al,0xfc
    28b3:	03 00                	add    eax,DWORD PTR [eax]
    28b5:	00 97 0d 94 03 00    	add    BYTE PTR [edi+0x3940d],dl
    28bb:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    28be:	0d 6b 04 00 00       	or     eax,0x46b
    28c3:	64 01 0d 10 04 00 00 	add    DWORD PTR fs:0x410,ecx
    28ca:	65 01 0d af 02 00 00 	add    DWORD PTR gs:0x2af,ecx
    28d1:	66 01 0d 2a 03 00 00 	add    WORD PTR ds:0x32a,cx
    28d8:	67 01 0d             	add    DWORD PTR [di],ecx
    28db:	1d 03 00 00 68       	sbb    eax,0x68000003
    28e0:	01 0d e5 04 00 00    	add    DWORD PTR ds:0x4e5,ecx
    28e6:	69 01 0d 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e0d
    28ec:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    28ef:	0d e3 02 00 00       	or     eax,0x2e3
    28f4:	71 01                	jno    28f7 <sysEnter_Vector-0x12d709>
    28f6:	0d af 04 00 00       	or     eax,0x4af
    28fb:	00 03                	add    BYTE PTR [ebx],al
    28fd:	0d 5c 04 00 00       	or     eax,0x45c
    2902:	01 03                	add    DWORD PTR [ebx],eax
    2904:	0d ab 03 00 00       	or     eax,0x3ab
    2909:	02 03                	add    al,BYTE PTR [ebx]
    290b:	0d 84 03 00 00       	or     eax,0x384
    2910:	03 03                	add    eax,DWORD PTR [ebx]
    2912:	0d 22 04 00 00       	or     eax,0x422
    2917:	04 03                	add    al,0x3
    2919:	0d 85 04 00 00       	or     eax,0x485
    291e:	05 03 0d d0 03       	add    eax,0x3d00d03
    2923:	00 00                	add    BYTE PTR [eax],al
    2925:	06                   	push   es
    2926:	03 00                	add    eax,DWORD PTR [eax]
    2928:	0e                   	push   cs
    2929:	04 02                	add    al,0x2
    292b:	04 07                	add    al,0x7
    292d:	5c                   	pop    esp
    292e:	00 00                	add    BYTE PTR [eax],al
    2930:	00 0a                	add    BYTE PTR [edx],cl
    2932:	04 a2                	add    al,0xa2
    2934:	00 00                	add    BYTE PTR [eax],al
    2936:	00 0f                	add    BYTE PTR [edi],cl
    2938:	5f                   	pop    edi
    2939:	0a 00                	or     al,BYTE PTR [eax]
    293b:	00 01                	add    BYTE PTR [ecx],al
    293d:	0e                   	push   cs
    293e:	64                   	fs
    293f:	1f                   	pop    ds
    2940:	00 9f 6c 00 00 00    	add    BYTE PTR [edi+0x6c],bl
    2946:	01 9c 10 2c 0a 00 00 	add    DWORD PTR [eax+edx*1+0xa2c],ebx
    294d:	01 18                	add    DWORD PTR [eax],ebx
    294f:	65 00 00             	add    BYTE PTR gs:[eax],al
    2952:	00 d0                	add    al,dl
    2954:	1f                   	pop    ds
    2955:	00 9f 87 00 00 00    	add    BYTE PTR [edi+0x87],bl
    295b:	01 9c 7c 02 00 00 11 	add    DWORD PTR [esp+edi*2+0x11000002],ebx
    2962:	a8 06                	test   al,0x6
    2964:	00 00                	add    BYTE PTR [eax],al
    2966:	01 18                	add    DWORD PTR [eax],ebx
    2968:	89 00                	mov    DWORD PTR [eax],eax
    296a:	00 00                	add    BYTE PTR [eax],al
    296c:	02 91 00 12 a4 0a    	add    dl,BYTE PTR [ecx+0xaa41200]
    2972:	00 00                	add    BYTE PTR [eax],al
    2974:	01 1c 65 00 00 00 02 	add    DWORD PTR [eiz*2+0x2000000],ebx
    297b:	91                   	xchg   ecx,eax
    297c:	74 00                	je     297e <sysEnter_Vector-0x12d682>
    297e:	13 1f                	adc    ebx,DWORD PTR [edi]
    2980:	0a 00                	or     al,BYTE PTR [eax]
    2982:	00 01                	add    BYTE PTR [ecx],al
    2984:	30 57 20             	xor    BYTE PTR [edi+0x20],dl
    2987:	00 9f 5b 00 00 00    	add    BYTE PTR [edi+0x5b],bl
    298d:	01 9c ad 02 00 00 11 	add    DWORD PTR [ebp+ebp*4+0x11000002],ebx
    2994:	fc                   	cld    
    2995:	0a 00                	or     al,BYTE PTR [eax]
    2997:	00 01                	add    BYTE PTR [ecx],al
    2999:	30 26                	xor    BYTE PTR [esi],ah
    299b:	02 00                	add    al,BYTE PTR [eax]
    299d:	00 02                	add    BYTE PTR [edx],al
    299f:	91                   	xchg   ecx,eax
    29a0:	00 14 6d 70 00 01 32 	add    BYTE PTR [ebp*2+0x32010070],dl
    29a7:	ad                   	lods   eax,DWORD PTR ds:[esi]
    29a8:	02 00                	add    al,BYTE PTR [eax]
    29aa:	00 02                	add    BYTE PTR [edx],al
    29ac:	91                   	xchg   ecx,eax
    29ad:	74 00                	je     29af <sysEnter_Vector-0x12d651>
    29af:	0a 04 2e             	or     al,BYTE PTR [esi+ebp*1]
    29b2:	01 00                	add    DWORD PTR [eax],eax
    29b4:	00 10                	add    BYTE PTR [eax],dl
    29b6:	11 0b                	adc    DWORD PTR [ebx],ecx
    29b8:	00 00                	add    BYTE PTR [eax],al
    29ba:	01 44 ad 02          	add    DWORD PTR [ebp+ebp*4+0x2],eax
    29be:	00 00                	add    BYTE PTR [eax],al
    29c0:	b2 20                	mov    dl,0x20
    29c2:	00 9f 7a 00 00 00    	add    BYTE PTR [edi+0x7a],bl
    29c8:	01 9c 04 03 00 00 11 	add    DWORD PTR [esp+eax*1+0x11000003],ebx
    29cf:	a8 06                	test   al,0x6
    29d1:	00 00                	add    BYTE PTR [eax],al
    29d3:	01 44 89 00          	add    DWORD PTR [ecx+ecx*4+0x0],eax
    29d7:	00 00                	add    BYTE PTR [eax],al
    29d9:	02 91 00 12 e7 0a    	add    dl,BYTE PTR [ecx+0xae71200]
    29df:	00 00                	add    BYTE PTR [eax],al
    29e1:	01 46 ad             	add    DWORD PTR [esi-0x53],eax
    29e4:	02 00                	add    al,BYTE PTR [eax]
    29e6:	00 02                	add    BYTE PTR [edx],al
    29e8:	91                   	xchg   ecx,eax
    29e9:	74 14                	je     29ff <sysEnter_Vector-0x12d601>
    29eb:	70 74                	jo     2a61 <sysEnter_Vector-0x12d59f>
    29ed:	72 00                	jb     29ef <sysEnter_Vector-0x12d611>
    29ef:	01 47 04             	add    DWORD PTR [edi+0x4],eax
    29f2:	03 00                	add    eax,DWORD PTR [eax]
    29f4:	00 02                	add    BYTE PTR [edx],al
    29f6:	91                   	xchg   ecx,eax
    29f7:	70 14                	jo     2a0d <sysEnter_Vector-0x12d5f3>
    29f9:	68 65 00 01 48       	push   0x48010065
    29fe:	ad                   	lods   eax,DWORD PTR ds:[esi]
    29ff:	02 00                	add    al,BYTE PTR [eax]
    2a01:	00 02                	add    BYTE PTR [edx],al
    2a03:	91                   	xchg   ecx,eax
    2a04:	6c                   	ins    BYTE PTR es:[edi],dx
    2a05:	00 0a                	add    BYTE PTR [edx],cl
    2a07:	04 41                	add    al,0x41
    2a09:	00 00                	add    BYTE PTR [eax],al
    2a0b:	00 15 33 0b 00 00    	add    BYTE PTR ds:0xb33,dl
    2a11:	01 56 2c             	add    DWORD PTR [esi+0x2c],edx
    2a14:	21 00                	and    DWORD PTR [eax],eax
    2a16:	9f                   	lahf   
    2a17:	63 00                	arpl   WORD PTR [eax],ax
    2a19:	00 00                	add    BYTE PTR [eax],al
    2a1b:	01 9c 47 03 00 00 11 	add    DWORD PTR [edi+eax*2+0x11000003],ebx
    2a22:	ca 0a 00             	retf   0xa
    2a25:	00 01                	add    BYTE PTR [ecx],al
    2a27:	56                   	push   esi
    2a28:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2a29:	02 00                	add    al,BYTE PTR [eax]
    2a2b:	00 02                	add    BYTE PTR [edx],al
    2a2d:	91                   	xchg   ecx,eax
    2a2e:	00 12                	add    BYTE PTR [edx],dl
    2a30:	e7 0a                	out    0xa,eax
    2a32:	00 00                	add    BYTE PTR [eax],al
    2a34:	01 58 ad             	add    DWORD PTR [eax-0x53],ebx
    2a37:	02 00                	add    al,BYTE PTR [eax]
    2a39:	00 02                	add    BYTE PTR [edx],al
    2a3b:	91                   	xchg   ecx,eax
    2a3c:	6c                   	ins    BYTE PTR es:[edi],dx
    2a3d:	16                   	push   ss
    2a3e:	99                   	cdq    
    2a3f:	0a 00                	or     al,BYTE PTR [eax]
    2a41:	00 01                	add    BYTE PTR [ecx],al
    2a43:	5e                   	pop    esi
    2a44:	66 21 00             	and    WORD PTR [eax],ax
    2a47:	9f                   	lahf   
    2a48:	00 17                	add    BYTE PTR [edi],dl
    2a4a:	f5                   	cmc    
    2a4b:	09 00                	or     DWORD PTR [eax],eax
    2a4d:	00 01                	add    BYTE PTR [ecx],al
    2a4f:	65 26 02 00          	gs add al,BYTE PTR es:gs:[eax]
    2a53:	00 8f 21 00 9f 82    	add    BYTE PTR [edi-0x7d60ffdf],cl
    2a59:	02 00                	add    al,BYTE PTR [eax]
    2a5b:	00 01                	add    BYTE PTR [ecx],al
    2a5d:	9c                   	pushf  
    2a5e:	d1 03                	rol    DWORD PTR [ebx],1
    2a60:	00 00                	add    BYTE PTR [eax],al
    2a62:	11 a8 06 00 00 01    	adc    DWORD PTR [eax+0x1000006],ebp
    2a68:	65 89 00             	mov    DWORD PTR gs:[eax],eax
    2a6b:	00 00                	add    BYTE PTR [eax],al
    2a6d:	02 91 00 12 f4 04    	add    dl,BYTE PTR [ecx+0x4f41200]
    2a73:	00 00                	add    BYTE PTR [eax],al
    2a75:	01 67 26             	add    DWORD PTR [edi+0x26],esp
    2a78:	02 00                	add    al,BYTE PTR [eax]
    2a7a:	00 02                	add    BYTE PTR [edx],al
    2a7c:	91                   	xchg   ecx,eax
    2a7d:	5c                   	pop    esp
    2a7e:	12 b5 0a 00 00 01    	adc    dh,BYTE PTR [ebp+0x100000a]
    2a84:	69 65 00 00 00 02 91 	imul   esp,DWORD PTR [ebp+0x0],0x91020000
    2a8b:	64 12 85 0a 00 00 01 	adc    al,BYTE PTR fs:[ebp+0x100000a]
    2a92:	6a 65                	push   0x65
    2a94:	00 00                	add    BYTE PTR [eax],al
    2a96:	00 02                	add    BYTE PTR [edx],al
    2a98:	91                   	xchg   ecx,eax
    2a99:	60                   	pusha  
    2a9a:	12 e7                	adc    ah,bh
    2a9c:	0a 00                	or     al,BYTE PTR [eax]
    2a9e:	00 01                	add    BYTE PTR [ecx],al
    2aa0:	6b ad 02 00 00 02 91 	imul   ebp,DWORD PTR [ebp+0x2000002],0xffffff91
    2aa7:	68 12 6a 0a 00       	push   0xa6a12
    2aac:	00 01                	add    BYTE PTR [ecx],al
    2aae:	6c                   	ins    BYTE PTR es:[edi],dx
    2aaf:	89 00                	mov    DWORD PTR [eax],eax
    2ab1:	00 00                	add    BYTE PTR [eax],al
    2ab3:	02 91 6c 18 05 0b    	add    dl,BYTE PTR [ecx+0xb05186c]
    2ab9:	00 00                	add    BYTE PTR [eax],al
    2abb:	01 6d 04             	add    DWORD PTR [ebp+0x4],ebp
    2abe:	03 00                	add    eax,DWORD PTR [eax]
    2ac0:	00 12                	add    BYTE PTR [edx],dl
    2ac2:	02 0a                	add    cl,BYTE PTR [edx]
    2ac4:	00 00                	add    BYTE PTR [eax],al
    2ac6:	01 6e ad             	add    DWORD PTR [esi-0x53],ebp
    2ac9:	02 00                	add    al,BYTE PTR [eax]
    2acb:	00 05 03 b4 71 00    	add    BYTE PTR ds:0x71b403,al
    2ad1:	9f                   	lahf   
    2ad2:	00 17                	add    BYTE PTR [edi],dl
    2ad4:	63 0a                	arpl   WORD PTR [edx],cx
    2ad6:	00 00                	add    BYTE PTR [eax],al
    2ad8:	01 a4 26 02 00 00 11 	add    DWORD PTR [esi+eiz*1+0x11000002],esp
    2adf:	24 00                	and    al,0x0
    2ae1:	9f                   	lahf   
    2ae2:	20 00                	and    BYTE PTR [eax],al
    2ae4:	00 00                	add    BYTE PTR [eax],al
    2ae6:	01 9c f9 03 00 00 11 	add    DWORD PTR [ecx+edi*8+0x11000003],ebx
    2aed:	a8 06                	test   al,0x6
    2aef:	00 00                	add    BYTE PTR [eax],al
    2af1:	01 a4 89 00 00 00 02 	add    DWORD PTR [ecx+ecx*4+0x2000000],esp
    2af8:	91                   	xchg   ecx,eax
    2af9:	00 00                	add    BYTE PTR [eax],al
    2afb:	17                   	pop    ss
    2afc:	bc 0a 00 00 01       	mov    esp,0x100000a
    2b01:	a9 26 02 00 00       	test   eax,0x226
    2b06:	31 24 00             	xor    DWORD PTR [eax+eax*1],esp
    2b09:	9f                   	lahf   
    2b0a:	d8 00                	fadd   DWORD PTR [eax]
    2b0c:	00 00                	add    BYTE PTR [eax],al
    2b0e:	01 9c 58 04 00 00 11 	add    DWORD PTR [eax+ebx*2+0x11000004],ebx
    2b15:	ef                   	out    dx,eax
    2b16:	0a 00                	or     al,BYTE PTR [eax]
    2b18:	00 01                	add    BYTE PTR [ecx],al
    2b1a:	a9 26 02 00 00       	test   eax,0x226
    2b1f:	02 91 00 11 92 0a    	add    dl,BYTE PTR [ecx+0xa921100]
    2b25:	00 00                	add    BYTE PTR [eax],al
    2b27:	01 a9 65 00 00 00    	add    DWORD PTR [ecx+0x65],ebp
    2b2d:	02 91 04 12 ac 0a    	add    dl,BYTE PTR [ecx+0xaac1204]
    2b33:	00 00                	add    BYTE PTR [eax],al
    2b35:	01 b1 65 00 00 00    	add    DWORD PTR [ecx+0x65],esi
    2b3b:	02 91 6c 14 6d 70    	add    dl,BYTE PTR [ecx+0x706d146c]
    2b41:	00 01                	add    BYTE PTR [ecx],al
    2b43:	b2 ad                	mov    dl,0xad
    2b45:	02 00                	add    al,BYTE PTR [eax]
    2b47:	00 02                	add    BYTE PTR [edx],al
    2b49:	91                   	xchg   ecx,eax
    2b4a:	68 12 d2 0a 00       	push   0xad212
    2b4f:	00 01                	add    BYTE PTR [ecx],al
    2b51:	b9 58 04 00 00       	mov    ecx,0x458
    2b56:	02 91 64 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a0064]
    2b5c:	7e 00                	jle    2b5e <sysEnter_Vector-0x12d4a2>
    2b5e:	00 00                	add    BYTE PTR [eax],al
    2b60:	17                   	pop    ss
    2b61:	2b 0b                	sub    ecx,DWORD PTR [ebx]
    2b63:	00 00                	add    BYTE PTR [eax],al
    2b65:	01 c7                	add    edi,eax
    2b67:	26 02 00             	add    al,BYTE PTR es:[eax]
    2b6a:	00 09                	add    BYTE PTR [ecx],cl
    2b6c:	25 00 9f 23 00       	and    eax,0x239f00
    2b71:	00 00                	add    BYTE PTR [eax],al
    2b73:	01 9c 94 04 00 00 11 	add    DWORD PTR [esp+edx*4+0x11000004],ebx
    2b7a:	ef                   	out    dx,eax
    2b7b:	0a 00                	or     al,BYTE PTR [eax]
    2b7d:	00 01                	add    BYTE PTR [ecx],al
    2b7f:	c7                   	(bad)  
    2b80:	26 02 00             	add    al,BYTE PTR es:[eax]
    2b83:	00 02                	add    BYTE PTR [edx],al
    2b85:	91                   	xchg   ecx,eax
    2b86:	00 11                	add    BYTE PTR [ecx],dl
    2b88:	92                   	xchg   edx,eax
    2b89:	0a 00                	or     al,BYTE PTR [eax]
    2b8b:	00 01                	add    BYTE PTR [ecx],al
    2b8d:	c7                   	(bad)  
    2b8e:	65 00 00             	add    BYTE PTR gs:[eax],al
    2b91:	00 02                	add    BYTE PTR [edx],al
    2b93:	91                   	xchg   ecx,eax
    2b94:	04 00                	add    al,0x0
    2b96:	15 f7 0a 00 00       	adc    eax,0xaf7
    2b9b:	01 cc                	add    esp,ecx
    2b9d:	2c 25                	sub    al,0x25
    2b9f:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    2ba5:	01 9c b8 04 00 00 11 	add    DWORD PTR [eax+edi*4+0x11000004],ebx
    2bac:	fc                   	cld    
    2bad:	0a 00                	or     al,BYTE PTR [eax]
    2baf:	00 01                	add    BYTE PTR [ecx],al
    2bb1:	cc                   	int3   
    2bb2:	26 02 00             	add    al,BYTE PTR es:[eax]
    2bb5:	00 02                	add    BYTE PTR [edx],al
    2bb7:	91                   	xchg   ecx,eax
    2bb8:	00 00                	add    BYTE PTR [eax],al
    2bba:	0f 76 0a             	pcmpeqd mm1,QWORD PTR [edx]
    2bbd:	00 00                	add    BYTE PTR [eax],al
    2bbf:	01 d1                	add    ecx,edx
    2bc1:	47                   	inc    edi
    2bc2:	25 00 9f 32 00       	and    eax,0x329f00
    2bc7:	00 00                	add    BYTE PTR [eax],al
    2bc9:	01 9c 19 a3 00 00 00 	add    DWORD PTR [ecx+ebx*1+0xa3],ebx
    2bd0:	04 37                	add    al,0x37
    2bd2:	65 00 00             	add    BYTE PTR gs:[eax],al
    2bd5:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    2bdb:	9f                   	lahf   
    2bdc:	19 34 01             	sbb    DWORD PTR [ecx+eax*1],esi
    2bdf:	00 00                	add    BYTE PTR [eax],al
    2be1:	04 38                	add    al,0x38
    2be3:	65 00 00             	add    BYTE PTR gs:[eax],al
    2be6:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    2bec:	9f                   	lahf   
    2bed:	19 7b 00             	sbb    DWORD PTR [ebx+0x0],edi
    2bf0:	00 00                	add    BYTE PTR [eax],al
    2bf2:	04 39                	add    al,0x39
    2bf4:	65 00 00             	add    BYTE PTR gs:[eax],al
    2bf7:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    2bfd:	9f                   	lahf   
    2bfe:	19 7c 01 00          	sbb    DWORD PTR [ecx+eax*1+0x0],edi
    2c02:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    2c05:	94                   	xchg   esp,eax
    2c06:	00 00                	add    BYTE PTR [eax],al
    2c08:	00 05 03 78 71 00    	add    BYTE PTR ds:0x717803,al
    2c0e:	9f                   	lahf   
    2c0f:	19 6e 00             	sbb    DWORD PTR [esi+0x0],ebp
    2c12:	00 00                	add    BYTE PTR [eax],al
    2c14:	05 34 58 04 00       	add    eax,0x45834
    2c19:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    2c1f:	9f                   	lahf   
    2c20:	19 91 00 00 00 05    	sbb    DWORD PTR [ecx+0x5000000],edx
    2c26:	35 65 00 00 00       	xor    eax,0x65
    2c2b:	05 03 60 71 00       	add    eax,0x716003
    2c30:	9f                   	lahf   
    2c31:	19 41 00             	sbb    DWORD PTR [ecx+0x0],eax
    2c34:	00 00                	add    BYTE PTR [eax],al
    2c36:	06                   	push   es
    2c37:	58                   	pop    eax
    2c38:	40                   	inc    eax
    2c39:	05 00 00 05 03       	add    eax,0x3050000
    2c3e:	74 71                	je     2cb1 <sysEnter_Vector-0x12d34f>
    2c40:	00 9f 0a 04 2f 02    	add    BYTE PTR [edi+0x22f040a],bl
    2c46:	00 00                	add    BYTE PTR [eax],al
    2c48:	00 5f 02             	add    BYTE PTR [edi+0x2],bl
    2c4b:	00 00                	add    BYTE PTR [eax],al
    2c4d:	04 00                	add    al,0x0
    2c4f:	33 0b                	xor    ecx,DWORD PTR [ebx]
    2c51:	00 00                	add    BYTE PTR [eax],al
    2c53:	04 01                	add    al,0x1
    2c55:	ac                   	lods   al,BYTE PTR ds:[esi]
    2c56:	00 00                	add    BYTE PTR [eax],al
    2c58:	00 0c 45 0b 00 00 1e 	add    BYTE PTR [eax*2+0x1e00000b],cl
    2c5f:	00 00                	add    BYTE PTR [eax],al
    2c61:	00 7c 25 00          	add    BYTE PTR [ebp+eiz*1+0x0],bh
    2c65:	9f                   	lahf   
    2c66:	bb 01 00 00 ca       	mov    ebx,0xca000001
    2c6b:	0e                   	push   cs
    2c6c:	00 00                	add    BYTE PTR [eax],al
    2c6e:	02 01                	add    al,BYTE PTR [ecx]
    2c70:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    2c76:	02 07                	add    al,BYTE PTR [edi]
    2c78:	19 01                	sbb    DWORD PTR [ecx],eax
    2c7a:	00 00                	add    BYTE PTR [eax],al
    2c7c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2c7f:	61                   	popa   
    2c80:	00 00                	add    BYTE PTR [eax],al
    2c82:	00 02                	add    BYTE PTR [edx],al
    2c84:	04 07                	add    al,0x7
    2c86:	5c                   	pop    esp
    2c87:	00 00                	add    BYTE PTR [eax],al
    2c89:	00 02                	add    BYTE PTR [edx],al
    2c8b:	01 06                	add    DWORD PTR [esi],eax
    2c8d:	85 00                	test   DWORD PTR [eax],eax
    2c8f:	00 00                	add    BYTE PTR [eax],al
    2c91:	02 02                	add    al,BYTE PTR [edx]
    2c93:	05 72 01 00 00       	add    eax,0x172
    2c98:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2c9f:	02 08                	add    cl,BYTE PTR [eax]
    2ca1:	05 00 00 00 00       	add    eax,0x0
    2ca6:	02 08                	add    cl,BYTE PTR [eax]
    2ca8:	07                   	pop    es
    2ca9:	57                   	push   edi
    2caa:	00 00                	add    BYTE PTR [eax],al
    2cac:	00 02                	add    BYTE PTR [edx],al
    2cae:	04 05                	add    al,0x5
    2cb0:	05 00 00 00 02       	add    eax,0x2000000
    2cb5:	04 07                	add    al,0x7
    2cb7:	83 01 00             	add    DWORD PTR [ecx],0x0
    2cba:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2cbd:	05 04 7a 00 00       	add    eax,0x7a04
    2cc2:	00 02                	add    BYTE PTR [edx],al
    2cc4:	01 06                	add    DWORD PTR [esi],eax
    2cc6:	8c 00                	mov    WORD PTR [eax],es
    2cc8:	00 00                	add    BYTE PTR [eax],al
    2cca:	06                   	push   es
    2ccb:	0e                   	push   cs
    2ccc:	00 00                	add    BYTE PTR [eax],al
    2cce:	00 02                	add    BYTE PTR [edx],al
    2cd0:	34 33                	xor    al,0x33
    2cd2:	00 00                	add    BYTE PTR [eax],al
    2cd4:	00 06                	add    BYTE PTR [esi],al
    2cd6:	4d                   	dec    ebp
    2cd7:	00 00                	add    BYTE PTR [eax],al
    2cd9:	00 02                	add    BYTE PTR [edx],al
    2cdb:	56                   	push   esi
    2cdc:	33 00                	xor    eax,DWORD PTR [eax]
    2cde:	00 00                	add    BYTE PTR [eax],al
    2ce0:	05 04 9d 00 00       	add    eax,0x9d04
    2ce5:	00 07                	add    BYTE PTR [edi],al
    2ce7:	7a 00                	jp     2ce9 <sysEnter_Vector-0x12d317>
    2ce9:	00 00                	add    BYTE PTR [eax],al
    2ceb:	06                   	push   es
    2cec:	bd 02 00 00 03       	mov    ebp,0x3000002
    2cf1:	d8 33                	fdiv   DWORD PTR [ebx]
    2cf3:	00 00                	add    BYTE PTR [eax],al
    2cf5:	00 02                	add    BYTE PTR [edx],al
    2cf7:	0c 04                	or     al,0x4
    2cf9:	66 01 00             	add    WORD PTR [eax],ax
    2cfc:	00 02                	add    BYTE PTR [edx],al
    2cfe:	01 02                	add    DWORD PTR [edx],eax
    2d00:	13 01                	adc    eax,DWORD PTR [ecx]
    2d02:	00 00                	add    BYTE PTR [eax],al
    2d04:	08 57 0b             	or     BYTE PTR [edi+0xb],dl
    2d07:	00 00                	add    BYTE PTR [eax],al
    2d09:	01 0b                	add    DWORD PTR [ebx],ecx
    2d0b:	72 00                	jb     2d0d <sysEnter_Vector-0x12d2f3>
    2d0d:	00 00                	add    BYTE PTR [eax],al
    2d0f:	7c 25                	jl     2d36 <sysEnter_Vector-0x12d2ca>
    2d11:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    2d17:	01 9c 85 01 00 00 09 	add    DWORD PTR [ebp+eax*4+0x9000001],ebx
    2d1e:	52                   	push   edx
    2d1f:	0b 00                	or     eax,DWORD PTR [eax]
    2d21:	00 01                	add    BYTE PTR [ecx],al
    2d23:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    2d26:	00 00                	add    BYTE PTR [eax],al
    2d28:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2d2e:	63 00                	arpl   WORD PTR [eax],ax
    2d30:	01 0b                	add    DWORD PTR [ebx],ecx
    2d32:	85 01                	test   DWORD PTR [ecx],eax
    2d34:	00 00                	add    BYTE PTR [eax],al
    2d36:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2d3c:	01 0b                	add    DWORD PTR [ebx],ecx
    2d3e:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2d43:	91                   	xchg   ecx,eax
    2d44:	08 0b                	or     BYTE PTR [ebx],cl
    2d46:	64                   	fs
    2d47:	77 00                	ja     2d49 <sysEnter_Vector-0x12d2b7>
    2d49:	01 0d b4 00 00 00    	add    DWORD PTR ds:0xb4,ecx
    2d4f:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2d55:	00 01                	add    BYTE PTR [ecx],al
    2d57:	0d b4 00 00 00       	or     eax,0xb4
    2d5c:	02 91 5f 0c ae 25    	add    dl,BYTE PTR [ecx+0x25ae0c5f]
    2d62:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    2d68:	3c 01                	cmp    al,0x1
    2d6a:	00 00                	add    BYTE PTR [eax],al
    2d6c:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2d6f:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    2d72:	01 00                	add    DWORD PTR [eax],eax
    2d74:	00 02                	add    BYTE PTR [edx],al
    2d76:	91                   	xchg   ecx,eax
    2d77:	74 0b                	je     2d84 <sysEnter_Vector-0x12d27c>
    2d79:	74 00                	je     2d7b <sysEnter_Vector-0x12d285>
    2d7b:	01 15 97 01 00 00    	add    DWORD PTR ds:0x197,edx
    2d81:	02 91 70 00 0c 31    	add    dl,BYTE PTR [ecx+0x310c0070]
    2d87:	26 00 9f 79 00 00 00 	add    BYTE PTR es:[edi+0x79],bl
    2d8e:	62 01                	bound  eax,QWORD PTR [ecx]
    2d90:	00 00                	add    BYTE PTR [eax],al
    2d92:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2d95:	01 24 8c             	add    DWORD PTR [esp+ecx*4],esp
    2d98:	01 00                	add    DWORD PTR [eax],eax
    2d9a:	00 02                	add    BYTE PTR [edx],al
    2d9c:	91                   	xchg   ecx,eax
    2d9d:	6c                   	ins    BYTE PTR es:[edi],dx
    2d9e:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2da2:	25 97 01 00 00       	and    eax,0x197
    2da7:	02 91 68 00 0d aa    	add    dl,BYTE PTR [ecx-0x55f2ff98]
    2dad:	26 00 9f 6b 00 00 00 	add    BYTE PTR es:[edi+0x6b],bl
    2db4:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2db7:	01 33                	add    DWORD PTR [ebx],esi
    2db9:	97                   	xchg   edi,eax
    2dba:	00 00                	add    BYTE PTR [eax],al
    2dbc:	00 02                	add    BYTE PTR [edx],al
    2dbe:	91                   	xchg   ecx,eax
    2dbf:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    2dc4:	34 74                	xor    al,0x74
    2dc6:	00 00                	add    BYTE PTR [eax],al
    2dc8:	00 02                	add    BYTE PTR [edx],al
    2dca:	91                   	xchg   ecx,eax
    2dcb:	60                   	pusha  
    2dcc:	00 00                	add    BYTE PTR [eax],al
    2dce:	05 04 8b 01 00       	add    eax,0x18b04
    2dd3:	00 0e                	add    BYTE PTR [esi],cl
    2dd5:	05 04 92 01 00       	add    eax,0x19204
    2dda:	00 07                	add    BYTE PTR [edi],al
    2ddc:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2de2:	81 00 00 00 0f 5f    	add    DWORD PTR [eax],0x5f0f0000
    2de8:	0b 00                	or     eax,DWORD PTR [eax]
    2dea:	00 01                	add    BYTE PTR [ecx],al
    2dec:	42                   	inc    edx
    2ded:	72 00                	jb     2def <sysEnter_Vector-0x12d211>
    2def:	00 00                	add    BYTE PTR [eax],al
    2df1:	17                   	pop    ss
    2df2:	27                   	daa    
    2df3:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2df9:	01 9c df 01 00 00 09 	add    DWORD PTR [edi+ebx*8+0x9000001],ebx
    2e00:	52                   	push   edx
    2e01:	0b 00                	or     eax,DWORD PTR [eax]
    2e03:	00 01                	add    BYTE PTR [ecx],al
    2e05:	42                   	inc    edx
    2e06:	72 00                	jb     2e08 <sysEnter_Vector-0x12d1f8>
    2e08:	00 00                	add    BYTE PTR [eax],al
    2e0a:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2e10:	63 00                	arpl   WORD PTR [eax],ax
    2e12:	01 42 85             	add    DWORD PTR [edx-0x7b],eax
    2e15:	01 00                	add    DWORD PTR [eax],eax
    2e17:	00 02                	add    BYTE PTR [edx],al
    2e19:	91                   	xchg   ecx,eax
    2e1a:	04 0a                	add    al,0xa
    2e1c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2e1d:	00 01                	add    BYTE PTR [ecx],al
    2e1f:	42                   	inc    edx
    2e20:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2e25:	91                   	xchg   ecx,eax
    2e26:	08 00                	or     BYTE PTR [eax],al
    2e28:	10 a3 00 00 00 04    	adc    BYTE PTR [ebx+0x4000000],ah
    2e2e:	37                   	aaa    
    2e2f:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e35:	6c                   	ins    BYTE PTR es:[edi],dx
    2e36:	71 00                	jno    2e38 <sysEnter_Vector-0x12d1c8>
    2e38:	9f                   	lahf   
    2e39:	10 34 01             	adc    BYTE PTR [ecx+eax*1],dh
    2e3c:	00 00                	add    BYTE PTR [eax],al
    2e3e:	04 38                	add    al,0x38
    2e40:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e46:	70 71                	jo     2eb9 <sysEnter_Vector-0x12d147>
    2e48:	00 9f 10 7b 00 00    	add    BYTE PTR [edi+0x7b10],bl
    2e4e:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    2e51:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    2e57:	68 71 00 9f 10       	push   0x109f0071
    2e5c:	7c 01                	jl     2e5f <sysEnter_Vector-0x12d1a1>
    2e5e:	00 00                	add    BYTE PTR [eax],al
    2e60:	04 3a                	add    al,0x3a
    2e62:	64 00 00             	add    BYTE PTR fs:[eax],al
    2e65:	00 05 03 78 71 00    	add    BYTE PTR ds:0x717803,al
    2e6b:	9f                   	lahf   
    2e6c:	10 6e 00             	adc    BYTE PTR [esi+0x0],ch
    2e6f:	00 00                	add    BYTE PTR [eax],al
    2e71:	05 34 34 02 00       	add    eax,0x23434
    2e76:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    2e7c:	9f                   	lahf   
    2e7d:	05 04 8c 00 00       	add    eax,0x8c04
    2e82:	00 10                	add    BYTE PTR [eax],dl
    2e84:	91                   	xchg   ecx,eax
    2e85:	00 00                	add    BYTE PTR [eax],al
    2e87:	00 05 35 81 00 00    	add    BYTE PTR ds:0x8135,al
    2e8d:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    2e93:	9f                   	lahf   
    2e94:	10 41 00             	adc    BYTE PTR [ecx+0x0],al
    2e97:	00 00                	add    BYTE PTR [eax],al
    2e99:	06                   	push   es
    2e9a:	58                   	pop    eax
    2e9b:	5c                   	pop    esp
    2e9c:	02 00                	add    al,BYTE PTR [eax]
    2e9e:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    2ea4:	9f                   	lahf   
    2ea5:	05 04 74 00 00       	add    eax,0x7404
    2eaa:	00 00                	add    BYTE PTR [eax],al
    2eac:	1e                   	push   ds
    2ead:	02 00                	add    al,BYTE PTR [eax]
    2eaf:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2eb2:	10 0c 00             	adc    BYTE PTR [eax+eax*1],cl
    2eb5:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2eb8:	ac                   	lods   al,BYTE PTR ds:[esi]
    2eb9:	00 00                	add    BYTE PTR [eax],al
    2ebb:	00 0c 66             	add    BYTE PTR [esi+eiz*2],cl
    2ebe:	0b 00                	or     eax,DWORD PTR [eax]
    2ec0:	00 1e                	add    BYTE PTR [esi],bl
    2ec2:	00 00                	add    BYTE PTR [eax],al
    2ec4:	00 38                	add    BYTE PTR [eax],bh
    2ec6:	27                   	daa    
    2ec7:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
    2ecd:	bf 0f 00 00 02       	mov    edi,0x200000f
    2ed2:	01 06                	add    DWORD PTR [esi],eax
    2ed4:	8c 00                	mov    WORD PTR [eax],es
    2ed6:	00 00                	add    BYTE PTR [eax],al
    2ed8:	02 01                	add    al,BYTE PTR [ecx]
    2eda:	06                   	push   es
    2edb:	85 00                	test   DWORD PTR [eax],eax
    2edd:	00 00                	add    BYTE PTR [eax],al
    2edf:	02 02                	add    al,BYTE PTR [edx]
    2ee1:	05 72 01 00 00       	add    eax,0x172
    2ee6:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2eed:	02 08                	add    cl,BYTE PTR [eax]
    2eef:	05 00 00 00 00       	add    eax,0x0
    2ef4:	04 9d                	add    al,0x9d
    2ef6:	06                   	push   es
    2ef7:	00 00                	add    BYTE PTR [eax],al
    2ef9:	02 2e                	add    ch,BYTE PTR [esi]
    2efb:	53                   	push   ebx
    2efc:	00 00                	add    BYTE PTR [eax],al
    2efe:	00 02                	add    BYTE PTR [edx],al
    2f00:	01 08                	add    DWORD PTR [eax],ecx
    2f02:	83 00 00             	add    DWORD PTR [eax],0x0
    2f05:	00 04 8d 05 00 00 02 	add    BYTE PTR [ecx*4+0x2000005],al
    2f0c:	31 65 00             	xor    DWORD PTR [ebp+0x0],esp
    2f0f:	00 00                	add    BYTE PTR [eax],al
    2f11:	02 02                	add    al,BYTE PTR [edx]
    2f13:	07                   	pop    es
    2f14:	19 01                	sbb    DWORD PTR [ecx],eax
    2f16:	00 00                	add    BYTE PTR [eax],al
    2f18:	04 0e                	add    al,0xe
    2f1a:	00 00                	add    BYTE PTR [eax],al
    2f1c:	00 02                	add    BYTE PTR [edx],al
    2f1e:	34 77                	xor    al,0x77
    2f20:	00 00                	add    BYTE PTR [eax],al
    2f22:	00 02                	add    BYTE PTR [edx],al
    2f24:	04 07                	add    al,0x7
    2f26:	61                   	popa   
    2f27:	00 00                	add    BYTE PTR [eax],al
    2f29:	00 02                	add    BYTE PTR [edx],al
    2f2b:	08 07                	or     BYTE PTR [edi],al
    2f2d:	57                   	push   edi
    2f2e:	00 00                	add    BYTE PTR [eax],al
    2f30:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    2f37:	56                   	push   esi
    2f38:	77 00                	ja     2f3a <sysEnter_Vector-0x12d0c6>
    2f3a:	00 00                	add    BYTE PTR [eax],al
    2f3c:	04 bd                	add    al,0xbd
    2f3e:	02 00                	add    al,BYTE PTR [eax]
    2f40:	00 03                	add    BYTE PTR [ebx],al
    2f42:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    2f45:	00 00                	add    BYTE PTR [eax],al
    2f47:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f4e:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f51:	66 01 00             	add    WORD PTR [eax],ax
    2f54:	00 02                	add    BYTE PTR [edx],al
    2f56:	01 02                	add    DWORD PTR [edx],eax
    2f58:	13 01                	adc    eax,DWORD PTR [ecx]
    2f5a:	00 00                	add    BYTE PTR [eax],al
    2f5c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f5f:	83 01 00             	add    DWORD PTR [ecx],0x0
    2f62:	00 05 04 02 04 07    	add    BYTE PTR ds:0x7040204,al
    2f68:	5c                   	pop    esp
    2f69:	00 00                	add    BYTE PTR [eax],al
    2f6b:	00 06                	add    BYTE PTR [esi],al
    2f6d:	04 25                	add    al,0x25
    2f6f:	00 00                	add    BYTE PTR [eax],al
    2f71:	00 07                	add    BYTE PTR [edi],al
    2f73:	7a 0b                	jp     2f80 <sysEnter_Vector-0x12d080>
    2f75:	00 00                	add    BYTE PTR [eax],al
    2f77:	01 08                	add    DWORD PTR [eax],ecx
    2f79:	b7 00                	mov    bh,0x0
    2f7b:	00 00                	add    BYTE PTR [eax],al
    2f7d:	38 27                	cmp    BYTE PTR [edi],ah
    2f7f:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2f85:	01 9c 49 01 00 00 08 	add    DWORD PTR [ecx+ecx*2+0x8000001],ebx
    2f8c:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2f8f:	01 08                	add    DWORD PTR [eax],ecx
    2f91:	b7 00                	mov    bh,0x0
    2f93:	00 00                	add    BYTE PTR [eax],al
    2f95:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2f9b:	6c                   	ins    BYTE PTR es:[edi],dx
    2f9c:	00 01                	add    BYTE PTR [ecx],al
    2f9e:	08 3a                	or     BYTE PTR [edx],bh
    2fa0:	00 00                	add    BYTE PTR [eax],al
    2fa2:	00 02                	add    BYTE PTR [edx],al
    2fa4:	91                   	xchg   ecx,eax
    2fa5:	04 08                	add    al,0x8
    2fa7:	6c                   	ins    BYTE PTR es:[edi],dx
    2fa8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2faa:	00 01                	add    BYTE PTR [ecx],al
    2fac:	08 90 00 00 00 02    	or     BYTE PTR [eax+0x2000000],dl
    2fb2:	91                   	xchg   ecx,eax
    2fb3:	08 09                	or     BYTE PTR [ecx],cl
    2fb5:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2fb8:	0a 49 01             	or     cl,BYTE PTR [ecx+0x1]
    2fbb:	00 00                	add    BYTE PTR [eax],al
    2fbd:	02 91 74 09 65 00    	add    dl,BYTE PTR [ecx+0x650974]
    2fc3:	01 0b                	add    DWORD PTR [ebx],ecx
    2fc5:	4f                   	dec    edi
    2fc6:	01 00                	add    DWORD PTR [eax],eax
    2fc8:	00 02                	add    BYTE PTR [edx],al
    2fca:	91                   	xchg   ecx,eax
    2fcb:	70 0a                	jo     2fd7 <sysEnter_Vector-0x12d029>
    2fcd:	82                   	(bad)  
    2fce:	0b 00                	or     eax,DWORD PTR [eax]
    2fd0:	00 01                	add    BYTE PTR [ecx],al
    2fd2:	0c 5a                	or     al,0x5a
    2fd4:	00 00                	add    BYTE PTR [eax],al
    2fd6:	00 02                	add    BYTE PTR [edx],al
    2fd8:	91                   	xchg   ecx,eax
    2fd9:	6a 09                	push   0x9
    2fdb:	66                   	data16
    2fdc:	00 01                	add    BYTE PTR [ecx],al
    2fde:	0d 55 01 00 00       	or     eax,0x155
    2fe3:	02 91 6c 0a 87 0b    	add    dl,BYTE PTR [ecx+0xb870a6c]
    2fe9:	00 00                	add    BYTE PTR [eax],al
    2feb:	01 0e                	add    DWORD PTR [esi],ecx
    2fed:	6c                   	ins    BYTE PTR es:[edi],dx
    2fee:	00 00                	add    BYTE PTR [eax],al
    2ff0:	00 02                	add    BYTE PTR [edx],al
    2ff2:	91                   	xchg   ecx,eax
    2ff3:	64 00 06             	add    BYTE PTR fs:[esi],al
    2ff6:	04 48                	add    al,0x48
    2ff8:	00 00                	add    BYTE PTR [eax],al
    2ffa:	00 06                	add    BYTE PTR [esi],al
    2ffc:	04 5a                	add    al,0x5a
    2ffe:	00 00                	add    BYTE PTR [eax],al
    3000:	00 06                	add    BYTE PTR [esi],al
    3002:	04 6c                	add    al,0x6c
    3004:	00 00                	add    BYTE PTR [eax],al
    3006:	00 0b                	add    BYTE PTR [ebx],cl
    3008:	73 0b                	jae    3015 <sysEnter_Vector-0x12cfeb>
    300a:	00 00                	add    BYTE PTR [eax],al
    300c:	01 1f                	add    DWORD PTR [edi],ebx
    300e:	b7 00                	mov    bh,0x0
    3010:	00 00                	add    BYTE PTR [eax],al
    3012:	ff 27                	jmp    DWORD PTR [edi]
    3014:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    301a:	01 9c 9e 01 00 00 08 	add    DWORD PTR [esi+ebx*4+0x8000001],ebx
    3021:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    3024:	01 1f                	add    DWORD PTR [edi],ebx
    3026:	b7 00                	mov    bh,0x0
    3028:	00 00                	add    BYTE PTR [eax],al
    302a:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    3030:	6c                   	ins    BYTE PTR es:[edi],dx
    3031:	00 01                	add    BYTE PTR [ecx],al
    3033:	1f                   	pop    ds
    3034:	3a 00                	cmp    al,BYTE PTR [eax]
    3036:	00 00                	add    BYTE PTR [eax],al
    3038:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    303e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    303f:	00 01                	add    BYTE PTR [ecx],al
    3041:	1f                   	pop    ds
    3042:	90                   	nop
    3043:	00 00                	add    BYTE PTR [eax],al
    3045:	00 02                	add    BYTE PTR [edx],al
    3047:	91                   	xchg   ecx,eax
    3048:	08 00                	or     BYTE PTR [eax],al
    304a:	0c a3                	or     al,0xa3
    304c:	00 00                	add    BYTE PTR [eax],al
    304e:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3051:	6c                   	ins    BYTE PTR es:[edi],dx
    3052:	00 00                	add    BYTE PTR [eax],al
    3054:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    305a:	9f                   	lahf   
    305b:	0c 34                	or     al,0x34
    305d:	01 00                	add    DWORD PTR [eax],eax
    305f:	00 04 38             	add    BYTE PTR [eax+edi*1],al
    3062:	6c                   	ins    BYTE PTR es:[edi],dx
    3063:	00 00                	add    BYTE PTR [eax],al
    3065:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    306b:	9f                   	lahf   
    306c:	0c 7b                	or     al,0x7b
    306e:	00 00                	add    BYTE PTR [eax],al
    3070:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    3073:	6c                   	ins    BYTE PTR es:[edi],dx
    3074:	00 00                	add    BYTE PTR [eax],al
    3076:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    307c:	9f                   	lahf   
    307d:	0c 7c                	or     al,0x7c
    307f:	01 00                	add    DWORD PTR [eax],eax
    3081:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    3084:	9b                   	fwait
    3085:	00 00                	add    BYTE PTR [eax],al
    3087:	00 05 03 78 71 00    	add    BYTE PTR ds:0x717803,al
    308d:	9f                   	lahf   
    308e:	0c 6e                	or     al,0x6e
    3090:	00 00                	add    BYTE PTR [eax],al
    3092:	00 05 34 f3 01 00    	add    BYTE PTR ds:0x1f334,al
    3098:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    309e:	9f                   	lahf   
    309f:	06                   	push   es
    30a0:	04 85                	add    al,0x85
    30a2:	00 00                	add    BYTE PTR [eax],al
    30a4:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    30a7:	00 00                	add    BYTE PTR [eax],al
    30a9:	00 05 35 6c 00 00    	add    BYTE PTR ds:0x6c35,al
    30af:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    30b5:	9f                   	lahf   
    30b6:	0c 41                	or     al,0x41
    30b8:	00 00                	add    BYTE PTR [eax],al
    30ba:	00 06                	add    BYTE PTR [esi],al
    30bc:	58                   	pop    eax
    30bd:	1b 02                	sbb    eax,DWORD PTR [edx]
    30bf:	00 00                	add    BYTE PTR [eax],al
    30c1:	05 03 74 71 00       	add    eax,0x717403
    30c6:	9f                   	lahf   
    30c7:	06                   	push   es
    30c8:	04 c0                	add    al,0xc0
    30ca:	00 00                	add    BYTE PTR [eax],al
    30cc:	00 00                	add    BYTE PTR [eax],al
    30ce:	82                   	(bad)  
    30cf:	02 00                	add    al,BYTE PTR [eax]
    30d1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    30d4:	cd 0c                	int    0xc
    30d6:	00 00                	add    BYTE PTR [eax],al
    30d8:	04 01                	add    al,0x1
    30da:	ac                   	lods   al,BYTE PTR ds:[esi]
    30db:	00 00                	add    BYTE PTR [eax],al
    30dd:	00 0c 8c             	add    BYTE PTR [esp+ecx*4],cl
    30e0:	0b 00                	or     eax,DWORD PTR [eax]
    30e2:	00 1e                	add    BYTE PTR [esi],bl
    30e4:	00 00                	add    BYTE PTR [eax],al
    30e6:	00 20                	add    BYTE PTR [eax],ah
    30e8:	28 00                	sub    BYTE PTR [eax],al
    30ea:	9f                   	lahf   
    30eb:	57                   	push   edi
    30ec:	00 00                	add    BYTE PTR [eax],al
    30ee:	00 97 10 00 00 02    	add    BYTE PTR [edi+0x2000010],dl
    30f4:	01 06                	add    DWORD PTR [esi],eax
    30f6:	8c 00                	mov    WORD PTR [eax],es
    30f8:	00 00                	add    BYTE PTR [eax],al
    30fa:	02 01                	add    al,BYTE PTR [ecx]
    30fc:	06                   	push   es
    30fd:	85 00                	test   DWORD PTR [eax],eax
    30ff:	00 00                	add    BYTE PTR [eax],al
    3101:	02 02                	add    al,BYTE PTR [edx]
    3103:	05 72 01 00 00       	add    eax,0x172
    3108:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    310f:	02 08                	add    cl,BYTE PTR [eax]
    3111:	05 00 00 00 00       	add    eax,0x0
    3116:	02 01                	add    al,BYTE PTR [ecx]
    3118:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    311e:	02 07                	add    al,BYTE PTR [edi]
    3120:	19 01                	sbb    DWORD PTR [ecx],eax
    3122:	00 00                	add    BYTE PTR [eax],al
    3124:	04 0e                	add    al,0xe
    3126:	00 00                	add    BYTE PTR [eax],al
    3128:	00 02                	add    BYTE PTR [edx],al
    312a:	34 61                	xor    al,0x61
    312c:	00 00                	add    BYTE PTR [eax],al
    312e:	00 02                	add    BYTE PTR [edx],al
    3130:	04 07                	add    al,0x7
    3132:	61                   	popa   
    3133:	00 00                	add    BYTE PTR [eax],al
    3135:	00 02                	add    BYTE PTR [edx],al
    3137:	08 07                	or     BYTE PTR [edi],al
    3139:	57                   	push   edi
    313a:	00 00                	add    BYTE PTR [eax],al
    313c:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3143:	56                   	push   esi
    3144:	61                   	popa   
    3145:	00 00                	add    BYTE PTR [eax],al
    3147:	00 02                	add    BYTE PTR [edx],al
    3149:	04 05                	add    al,0x5
    314b:	05 00 00 00 02       	add    eax,0x2000000
    3150:	0c 04                	or     al,0x4
    3152:	66 01 00             	add    WORD PTR [eax],ax
    3155:	00 02                	add    BYTE PTR [edx],al
    3157:	01 02                	add    DWORD PTR [edx],eax
    3159:	13 01                	adc    eax,DWORD PTR [ecx]
    315b:	00 00                	add    BYTE PTR [eax],al
    315d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3160:	83 01 00             	add    DWORD PTR [ecx],0x0
    3163:	00 05 bf 03 00 00    	add    BYTE PTR ds:0x3bf,al
    3169:	04 61                	add    al,0x61
    316b:	00 00                	add    BYTE PTR [eax],al
    316d:	00 06                	add    BYTE PTR [esi],al
    316f:	15 83 01 00 00       	adc    eax,0x183
    3174:	06                   	push   es
    3175:	5f                   	pop    edi
    3176:	03 00                	add    eax,DWORD PTR [eax]
    3178:	00 00                	add    BYTE PTR [eax],al
    317a:	06                   	push   es
    317b:	cb                   	retf   
    317c:	04 00                	add    al,0x0
    317e:	00 01                	add    BYTE PTR [ecx],al
    3180:	06                   	push   es
    3181:	d6                   	(bad)  
    3182:	02 00                	add    al,BYTE PTR [eax]
    3184:	00 02                	add    BYTE PTR [edx],al
    3186:	06                   	push   es
    3187:	bd 04 00 00 03       	mov    ebp,0x3000004
    318c:	06                   	push   es
    318d:	08 03                	or     BYTE PTR [ebx],al
    318f:	00 00                	add    BYTE PTR [eax],al
    3191:	04 06                	add    al,0x6
    3193:	f3 02 00             	repz add al,BYTE PTR [eax]
    3196:	00 05 06 52 03 00    	add    BYTE PTR ds:0x35206,al
    319c:	00 0a                	add    BYTE PTR [edx],cl
    319e:	06                   	push   es
    319f:	33 04 00             	xor    eax,DWORD PTR [eax+eax*1]
    31a2:	00 0b                	add    BYTE PTR [ebx],cl
    31a4:	06                   	push   es
    31a5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    31a6:	03 00                	add    eax,DWORD PTR [eax]
    31a8:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    31ab:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    31b0:	06                   	push   es
    31b1:	40                   	inc    eax
    31b2:	04 00                	add    al,0x0
    31b4:	00 0e                	add    BYTE PTR [esi],cl
    31b6:	06                   	push   es
    31b7:	95                   	xchg   ebp,eax
    31b8:	04 00                	add    al,0x0
    31ba:	00 0f                	add    BYTE PTR [edi],cl
    31bc:	06                   	push   es
    31bd:	3f                   	aas    
    31be:	03 00                	add    eax,DWORD PTR [eax]
    31c0:	00 10                	add    BYTE PTR [eax],dl
    31c2:	06                   	push   es
    31c3:	4d                   	dec    ebp
    31c4:	04 00                	add    al,0x0
    31c6:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    31c9:	df 03                	fild   WORD PTR [ebx]
    31cb:	00 00                	add    BYTE PTR [eax],al
    31cd:	50                   	push   eax
    31ce:	06                   	push   es
    31cf:	78 04                	js     31d5 <sysEnter_Vector-0x12ce2b>
    31d1:	00 00                	add    BYTE PTR [eax],al
    31d3:	59                   	pop    ecx
    31d4:	06                   	push   es
    31d5:	8b 02                	mov    eax,DWORD PTR [edx]
    31d7:	00 00                	add    BYTE PTR [eax],al
    31d9:	61                   	popa   
    31da:	06                   	push   es
    31db:	fc                   	cld    
    31dc:	03 00                	add    eax,DWORD PTR [eax]
    31de:	00 97 07 94 03 00    	add    BYTE PTR [edi+0x39407],dl
    31e4:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    31e7:	07                   	pop    es
    31e8:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    31ec:	64 01 07             	add    DWORD PTR fs:[edi],eax
    31ef:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
    31f2:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    31f5:	07                   	pop    es
    31f6:	af                   	scas   eax,DWORD PTR es:[edi]
    31f7:	02 00                	add    al,BYTE PTR [eax]
    31f9:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    31fc:	07                   	pop    es
    31fd:	2a 03                	sub    al,BYTE PTR [ebx]
    31ff:	00 00                	add    BYTE PTR [eax],al
    3201:	67 01 07             	add    DWORD PTR [bx],eax
    3204:	1d 03 00 00 68       	sbb    eax,0x68000003
    3209:	01 07                	add    DWORD PTR [edi],eax
    320b:	e5 04                	in     eax,0x4
    320d:	00 00                	add    BYTE PTR [eax],al
    320f:	69 01 07 9e 02 00    	imul   eax,DWORD PTR [ecx],0x29e07
    3215:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3218:	07                   	pop    es
    3219:	e3 02                	jecxz  321d <sysEnter_Vector-0x12cde3>
    321b:	00 00                	add    BYTE PTR [eax],al
    321d:	71 01                	jno    3220 <sysEnter_Vector-0x12cde0>
    321f:	07                   	pop    es
    3220:	af                   	scas   eax,DWORD PTR es:[edi]
    3221:	04 00                	add    al,0x0
    3223:	00 00                	add    BYTE PTR [eax],al
    3225:	03 07                	add    eax,DWORD PTR [edi]
    3227:	5c                   	pop    esp
    3228:	04 00                	add    al,0x0
    322a:	00 01                	add    BYTE PTR [ecx],al
    322c:	03 07                	add    eax,DWORD PTR [edi]
    322e:	ab                   	stos   DWORD PTR es:[edi],eax
    322f:	03 00                	add    eax,DWORD PTR [eax]
    3231:	00 02                	add    BYTE PTR [edx],al
    3233:	03 07                	add    eax,DWORD PTR [edi]
    3235:	84 03                	test   BYTE PTR [ebx],al
    3237:	00 00                	add    BYTE PTR [eax],al
    3239:	03 03                	add    eax,DWORD PTR [ebx]
    323b:	07                   	pop    es
    323c:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    323f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    3242:	07                   	pop    es
    3243:	85 04 00             	test   DWORD PTR [eax+eax*1],eax
    3246:	00 05 03 07 d0 03    	add    BYTE PTR ds:0x3d00703,al
    324c:	00 00                	add    BYTE PTR [eax],al
    324e:	06                   	push   es
    324f:	03 00                	add    eax,DWORD PTR [eax]
    3251:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3254:	5c                   	pop    esp
    3255:	00 00                	add    BYTE PTR [eax],al
    3257:	00 08                	add    BYTE PTR [eax],cl
    3259:	04 25                	add    al,0x25
    325b:	00 00                	add    BYTE PTR [eax],al
    325d:	00 09                	add    BYTE PTR [ecx],cl
    325f:	9b                   	fwait
    3260:	0b 00                	or     eax,DWORD PTR [eax]
    3262:	00 01                	add    BYTE PTR [ecx],al
    3264:	0a 3a                	or     bh,BYTE PTR [edx]
    3266:	00 00                	add    BYTE PTR [eax],al
    3268:	00 20                	add    BYTE PTR [eax],ah
    326a:	28 00                	sub    BYTE PTR [eax],al
    326c:	9f                   	lahf   
    326d:	29 00                	sub    DWORD PTR [eax],eax
    326f:	00 00                	add    BYTE PTR [eax],al
    3271:	01 9c b8 01 00 00 0a 	add    DWORD PTR [eax+edi*4+0xa000001],ebx
    3278:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3279:	0b 00                	or     eax,DWORD PTR [eax]
    327b:	00 01                	add    BYTE PTR [ecx],al
    327d:	0a b8 01 00 00 02    	or     bh,BYTE PTR [eax+0x2000001]
    3283:	91                   	xchg   ecx,eax
    3284:	00 00                	add    BYTE PTR [eax],al
    3286:	08 04 3a             	or     BYTE PTR [edx+edi*1],al
    3289:	00 00                	add    BYTE PTR [eax],al
    328b:	00 09                	add    BYTE PTR [ecx],cl
    328d:	a0 0b 00 00 01       	mov    al,ds:0x100000b
    3292:	0f 3a 00             	(bad)  
    3295:	00 00                	add    BYTE PTR [eax],al
    3297:	49                   	dec    ecx
    3298:	28 00                	sub    BYTE PTR [eax],al
    329a:	9f                   	lahf   
    329b:	2e 00 00             	add    BYTE PTR cs:[eax],al
    329e:	00 01                	add    BYTE PTR [ecx],al
    32a0:	9c                   	pushf  
    32a1:	02 02                	add    al,BYTE PTR [edx]
    32a3:	00 00                	add    BYTE PTR [eax],al
    32a5:	0a b2 0b 00 00 01    	or     dh,BYTE PTR [edx+0x100000b]
    32ab:	0f 3a 00             	(bad)  
    32ae:	00 00                	add    BYTE PTR [eax],al
    32b0:	02 91 00 0a ac 0b    	add    dl,BYTE PTR [ecx+0xbac0a00]
    32b6:	00 00                	add    BYTE PTR [eax],al
    32b8:	01 0f                	add    DWORD PTR [edi],ecx
    32ba:	3a 00                	cmp    al,BYTE PTR [eax]
    32bc:	00 00                	add    BYTE PTR [eax],al
    32be:	02 91 04 0a e0 09    	add    dl,BYTE PTR [ecx+0x9e00a04]
    32c4:	00 00                	add    BYTE PTR [eax],al
    32c6:	01 0f                	add    DWORD PTR [edi],ecx
    32c8:	3a 00                	cmp    al,BYTE PTR [eax]
    32ca:	00 00                	add    BYTE PTR [eax],al
    32cc:	02 91 08 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff8]
    32d2:	00 00                	add    BYTE PTR [eax],al
    32d4:	00 03                	add    BYTE PTR [ebx],al
    32d6:	37                   	aaa    
    32d7:	56                   	push   esi
    32d8:	00 00                	add    BYTE PTR [eax],al
    32da:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    32e0:	9f                   	lahf   
    32e1:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    32e4:	00 00                	add    BYTE PTR [eax],al
    32e6:	03 38                	add    edi,DWORD PTR [eax]
    32e8:	56                   	push   esi
    32e9:	00 00                	add    BYTE PTR [eax],al
    32eb:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    32f1:	9f                   	lahf   
    32f2:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    32f5:	00 00                	add    BYTE PTR [eax],al
    32f7:	03 39                	add    edi,DWORD PTR [ecx]
    32f9:	56                   	push   esi
    32fa:	00 00                	add    BYTE PTR [eax],al
    32fc:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    3302:	9f                   	lahf   
    3303:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3307:	00 03                	add    BYTE PTR [ebx],al
    3309:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    330c:	00 00                	add    BYTE PTR [eax],al
    330e:	05 03 78 71 00       	add    eax,0x717803
    3313:	9f                   	lahf   
    3314:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3317:	00 00                	add    BYTE PTR [eax],al
    3319:	04 34                	add    al,0x34
    331b:	57                   	push   edi
    331c:	02 00                	add    al,BYTE PTR [eax]
    331e:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    3324:	9f                   	lahf   
    3325:	08 04 6f             	or     BYTE PTR [edi+ebp*2],al
    3328:	00 00                	add    BYTE PTR [eax],al
    332a:	00 0b                	add    BYTE PTR [ebx],cl
    332c:	91                   	xchg   ecx,eax
    332d:	00 00                	add    BYTE PTR [eax],al
    332f:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3336:	05 03 60 71 00       	add    eax,0x716003
    333b:	9f                   	lahf   
    333c:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    333f:	00 00                	add    BYTE PTR [eax],al
    3341:	05 58 7f 02 00       	add    eax,0x27f58
    3346:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    334c:	9f                   	lahf   
    334d:	08 04 8a             	or     BYTE PTR [edx+ecx*4],al
    3350:	01 00                	add    DWORD PTR [eax],eax
    3352:	00 00                	add    BYTE PTR [eax],al
    3354:	f0 03 00             	lock add eax,DWORD PTR [eax]
    3357:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    335a:	6c                   	ins    BYTE PTR es:[edi],dx
    335b:	0d 00 00 04 01       	or     eax,0x1040000
    3360:	ac                   	lods   al,BYTE PTR ds:[esi]
    3361:	00 00                	add    BYTE PTR [eax],al
    3363:	00 0c c9             	add    BYTE PTR [ecx+ecx*8],cl
    3366:	0b 00                	or     eax,DWORD PTR [eax]
    3368:	00 1e                	add    BYTE PTR [esi],bl
    336a:	00 00                	add    BYTE PTR [eax],al
    336c:	00 78 28             	add    BYTE PTR [eax+0x28],bh
    336f:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
    3375:	94                   	xchg   esp,eax
    3376:	11 00                	adc    DWORD PTR [eax],eax
    3378:	00 02                	add    BYTE PTR [edx],al
    337a:	80 08 00             	or     BYTE PTR [eax],0x0
    337d:	00 02                	add    BYTE PTR [edx],al
    337f:	28 30                	sub    BYTE PTR [eax],dh
    3381:	00 00                	add    BYTE PTR [eax],al
    3383:	00 03                	add    BYTE PTR [ebx],al
    3385:	04 b4                	add    al,0xb4
    3387:	07                   	pop    es
    3388:	00 00                	add    BYTE PTR [eax],al
    338a:	3a 00                	cmp    al,BYTE PTR [eax]
    338c:	00 00                	add    BYTE PTR [eax],al
    338e:	04 01                	add    al,0x1
    3390:	06                   	push   es
    3391:	8c 00                	mov    WORD PTR [eax],es
    3393:	00 00                	add    BYTE PTR [eax],al
    3395:	02 87 08 00 00 02    	add    al,BYTE PTR [edi+0x2000008]
    339b:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    33a1:	01 06                	add    DWORD PTR [esi],eax
    33a3:	85 00                	test   DWORD PTR [eax],eax
    33a5:	00 00                	add    BYTE PTR [eax],al
    33a7:	04 02                	add    al,0x2
    33a9:	05 72 01 00 00       	add    eax,0x172
    33ae:	05 04 05 69 6e       	add    eax,0x6e690504
    33b3:	74 00                	je     33b5 <sysEnter_Vector-0x12cc4b>
    33b5:	04 08                	add    al,0x8
    33b7:	05 00 00 00 00       	add    eax,0x0
    33bc:	04 01                	add    al,0x1
    33be:	08 83 00 00 00 04    	or     BYTE PTR [ebx+0x4000000],al
    33c4:	02 07                	add    al,BYTE PTR [edi]
    33c6:	19 01                	sbb    DWORD PTR [ecx],eax
    33c8:	00 00                	add    BYTE PTR [eax],al
    33ca:	02 0e                	add    cl,BYTE PTR [esi]
    33cc:	00 00                	add    BYTE PTR [eax],al
    33ce:	00 03                	add    BYTE PTR [ebx],al
    33d0:	34 81                	xor    al,0x81
    33d2:	00 00                	add    BYTE PTR [eax],al
    33d4:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    33d7:	07                   	pop    es
    33d8:	61                   	popa   
    33d9:	00 00                	add    BYTE PTR [eax],al
    33db:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    33de:	07                   	pop    es
    33df:	57                   	push   edi
    33e0:	00 00                	add    BYTE PTR [eax],al
    33e2:	00 02                	add    BYTE PTR [edx],al
    33e4:	4d                   	dec    ebp
    33e5:	00 00                	add    BYTE PTR [eax],al
    33e7:	00 03                	add    BYTE PTR [ebx],al
    33e9:	56                   	push   esi
    33ea:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    33f0:	05 05 00 00 00       	add    eax,0x5
    33f5:	04 0c                	add    al,0xc
    33f7:	04 66                	add    al,0x66
    33f9:	01 00                	add    DWORD PTR [eax],eax
    33fb:	00 06                	add    BYTE PTR [esi],al
    33fd:	04 ae                	add    al,0xae
    33ff:	00 00                	add    BYTE PTR [eax],al
    3401:	00 07                	add    BYTE PTR [edi],al
    3403:	3a 00                	cmp    al,BYTE PTR [eax]
    3405:	00 00                	add    BYTE PTR [eax],al
    3407:	04 01                	add    al,0x1
    3409:	02 13                	add    dl,BYTE PTR [ebx]
    340b:	01 00                	add    DWORD PTR [eax],eax
    340d:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3410:	07                   	pop    es
    3411:	83 01 00             	add    DWORD PTR [ecx],0x0
    3414:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3417:	07                   	pop    es
    3418:	5c                   	pop    esp
    3419:	00 00                	add    BYTE PTR [eax],al
    341b:	00 06                	add    BYTE PTR [esi],al
    341d:	04 3a                	add    al,0x3a
    341f:	00 00                	add    BYTE PTR [eax],al
    3421:	00 08                	add    BYTE PTR [eax],cl
    3423:	b8 0b 00 00 01       	mov    eax,0x100000b
    3428:	0a 5a 00             	or     bl,BYTE PTR [edx+0x0]
    342b:	00 00                	add    BYTE PTR [eax],al
    342d:	78 28                	js     3457 <sysEnter_Vector-0x12cba9>
    342f:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
    3435:	01 9c 00 01 00 00 09 	add    DWORD PTR [eax+eax*1+0x9000001],ebx
    343c:	73 00                	jae    343e <sysEnter_Vector-0x12cbc2>
    343e:	01 0a                	add    DWORD PTR [edx],ecx
    3440:	00 01                	add    BYTE PTR [ecx],al
    3442:	00 00                	add    BYTE PTR [eax],al
    3444:	02 91 00 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a00]
    344a:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    344d:	00 00                	add    BYTE PTR [eax],al
    344f:	00 02                	add    BYTE PTR [edx],al
    3451:	91                   	xchg   ecx,eax
    3452:	70 00                	jo     3454 <sysEnter_Vector-0x12cbac>
    3454:	06                   	push   es
    3455:	04 a8                	add    al,0xa8
    3457:	00 00                	add    BYTE PTR [eax],al
    3459:	00 08                	add    BYTE PTR [eax],cl
    345b:	ed                   	in     eax,dx
    345c:	0b 00                	or     eax,DWORD PTR [eax]
    345e:	00 01                	add    BYTE PTR [ecx],al
    3460:	21 c8                	and    eax,ecx
    3462:	00 00                	add    BYTE PTR [eax],al
    3464:	00 d7                	add    bh,dl
    3466:	28 00                	sub    BYTE PTR [eax],al
    3468:	9f                   	lahf   
    3469:	3e 02 00             	add    al,BYTE PTR ds:[eax]
    346c:	00 01                	add    BYTE PTR [ecx],al
    346e:	9c                   	pushf  
    346f:	e0 01                	loopne 3472 <sysEnter_Vector-0x12cb8e>
    3471:	00 00                	add    BYTE PTR [eax],al
    3473:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    3476:	72 00                	jb     3478 <sysEnter_Vector-0x12cb88>
    3478:	01 21                	add    DWORD PTR [ecx],esp
    347a:	c8 00 00 00          	enter  0x0,0x0
    347e:	02 91 00 09 6e 75    	add    dl,BYTE PTR [ecx+0x756e0900]
    3484:	6d                   	ins    DWORD PTR es:[edi],dx
    3485:	00 01                	add    BYTE PTR [ecx],al
    3487:	21 9a 00 00 00 02    	and    DWORD PTR [edx+0x2000000],ebx
    348d:	91                   	xchg   ecx,eax
    348e:	04 0b                	add    al,0xb
    3490:	d7                   	xlat   BYTE PTR ds:[ebx]
    3491:	0b 00                	or     eax,DWORD PTR [eax]
    3493:	00 01                	add    BYTE PTR [ecx],al
    3495:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    3498:	00 00                	add    BYTE PTR [eax],al
    349a:	02 91 08 0b a8 06    	add    dl,BYTE PTR [ecx+0x6a80b08]
    34a0:	00 00                	add    BYTE PTR [eax],al
    34a2:	01 21                	add    DWORD PTR [ecx],esp
    34a4:	5a                   	pop    edx
    34a5:	00 00                	add    BYTE PTR [eax],al
    34a7:	00 02                	add    BYTE PTR [edx],al
    34a9:	91                   	xchg   ecx,eax
    34aa:	0c 0b                	or     al,0xb
    34ac:	f4                   	hlt    
    34ad:	0b 00                	or     eax,DWORD PTR [eax]
    34af:	00 01                	add    BYTE PTR [ecx],al
    34b1:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    34b4:	00 00                	add    BYTE PTR [eax],al
    34b6:	02 91 10 0b 87 01    	add    dl,BYTE PTR [ecx+0x1870b10]
    34bc:	00 00                	add    BYTE PTR [eax],al
    34be:	01 22                	add    DWORD PTR [edx],esp
    34c0:	5a                   	pop    edx
    34c1:	00 00                	add    BYTE PTR [eax],al
    34c3:	00 02                	add    BYTE PTR [edx],al
    34c5:	91                   	xchg   ecx,eax
    34c6:	14 0c                	adc    al,0xc
    34c8:	fe 0b                	dec    BYTE PTR [ebx]
    34ca:	00 00                	add    BYTE PTR [eax],al
    34cc:	01 25 f0 01 00 00    	add    DWORD PTR ds:0x1f0,esp
    34d2:	05 03 fc 6d 00       	add    eax,0x6dfc03
    34d7:	9f                   	lahf   
    34d8:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    34dc:	00 01                	add    BYTE PTR [ecx],al
    34de:	27                   	daa    
    34df:	f5                   	cmc    
    34e0:	01 00                	add    DWORD PTR [eax],eax
    34e2:	00 03                	add    BYTE PTR [ebx],al
    34e4:	91                   	xchg   ecx,eax
    34e5:	9e                   	sahf   
    34e6:	7f 0a                	jg     34f2 <sysEnter_Vector-0x12cb0e>
    34e8:	63 00                	arpl   WORD PTR [eax],ax
    34ea:	01 28                	add    DWORD PTR [eax],ebp
    34ec:	3a 00                	cmp    al,BYTE PTR [eax]
    34ee:	00 00                	add    BYTE PTR [eax],al
    34f0:	02 91 66 0c 31 02    	add    dl,BYTE PTR [ecx+0x2310c66]
    34f6:	00 00                	add    BYTE PTR [eax],al
    34f8:	01 28                	add    DWORD PTR [eax],ebp
    34fa:	3a 00                	cmp    al,BYTE PTR [eax]
    34fc:	00 00                	add    BYTE PTR [eax],al
    34fe:	02 91 6f 0c c2 0b    	add    dl,BYTE PTR [ecx+0xbc20c6f]
    3504:	00 00                	add    BYTE PTR [eax],al
    3506:	01 28                	add    DWORD PTR [eax],ebp
    3508:	3a 00                	cmp    al,BYTE PTR [eax]
    350a:	00 00                	add    BYTE PTR [eax],al
    350c:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    3512:	01 29                	add    DWORD PTR [ecx],ebp
    3514:	5a                   	pop    edx
    3515:	00 00                	add    BYTE PTR [eax],al
    3517:	00 02                	add    BYTE PTR [edx],al
    3519:	91                   	xchg   ecx,eax
    351a:	68 0d bd 29 00       	push   0x29bd0d
    351f:	9f                   	lahf   
    3520:	25 00 00 00 0c       	and    eax,0xc000000
    3525:	11 0c 00             	adc    DWORD PTR [eax+eax*1],ecx
    3528:	00 01                	add    BYTE PTR [ecx],al
    352a:	4c                   	dec    esp
    352b:	5a                   	pop    edx
    352c:	00 00                	add    BYTE PTR [eax],al
    352e:	00 02                	add    BYTE PTR [edx],al
    3530:	91                   	xchg   ecx,eax
    3531:	60                   	pusha  
    3532:	00 00                	add    BYTE PTR [eax],al
    3534:	0e                   	push   cs
    3535:	3a 00                	cmp    al,BYTE PTR [eax]
    3537:	00 00                	add    BYTE PTR [eax],al
    3539:	f0 01 00             	lock add DWORD PTR [eax],eax
    353c:	00 0f                	add    BYTE PTR [edi],cl
    353e:	ba 00 00 00 0f       	mov    edx,0xf000000
    3543:	00 07                	add    BYTE PTR [edi],al
    3545:	e0 01                	loopne 3548 <sysEnter_Vector-0x12cab8>
    3547:	00 00                	add    BYTE PTR [eax],al
    3549:	0e                   	push   cs
    354a:	3a 00                	cmp    al,BYTE PTR [eax]
    354c:	00 00                	add    BYTE PTR [eax],al
    354e:	05 02 00 00 0f       	add    eax,0xf000002
    3553:	ba 00 00 00 41       	mov    edx,0x41000000
    3558:	00 10                	add    BYTE PTR [eax],dl
    355a:	17                   	pop    ss
    355b:	0c 00                	or     al,0x0
    355d:	00 01                	add    BYTE PTR [ecx],al
    355f:	68 5a 00 00 00       	push   0x5a
    3564:	15 2b 00 9f 48       	adc    eax,0x489f002b
    3569:	04 00                	add    al,0x0
    356b:	00 01                	add    BYTE PTR [ecx],al
    356d:	9c                   	pushf  
    356e:	0e                   	push   cs
    356f:	03 00                	add    eax,DWORD PTR [eax]
    3571:	00 09                	add    BYTE PTR [ecx],cl
    3573:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    3576:	00 01                	add    BYTE PTR [ecx],al
    3578:	68 c8 00 00 00       	push   0xc8
    357d:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    3583:	74 00                	je     3585 <sysEnter_Vector-0x12ca7b>
    3585:	01 68 a8             	add    DWORD PTR [eax-0x58],ebp
    3588:	00 00                	add    BYTE PTR [eax],al
    358a:	00 02                	add    BYTE PTR [edx],al
    358c:	91                   	xchg   ecx,eax
    358d:	04 0b                	add    al,0xb
    358f:	90                   	nop
    3590:	09 00                	or     DWORD PTR [eax],eax
    3592:	00 01                	add    BYTE PTR [ecx],al
    3594:	68 41 00 00 00       	push   0x41
    3599:	02 91 08 0a 6c 65    	add    dl,BYTE PTR [ecx+0x656c0a08]
    359f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    35a0:	00 01                	add    BYTE PTR [ecx],al
    35a2:	6a 5a                	push   0x5a
    35a4:	00 00                	add    BYTE PTR [eax],al
    35a6:	00 02                	add    BYTE PTR [edx],al
    35a8:	91                   	xchg   ecx,eax
    35a9:	6c                   	ins    BYTE PTR es:[edi],dx
    35aa:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    35ad:	6d                   	ins    DWORD PTR es:[edi],dx
    35ae:	00 01                	add    BYTE PTR [ecx],al
    35b0:	6b c1 00             	imul   eax,ecx,0x0
    35b3:	00 00                	add    BYTE PTR [eax],al
    35b5:	02 91 68 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a68]
    35bb:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    35bf:	00 00                	add    BYTE PTR [eax],al
    35c1:	02 91 64 0c d7 0b    	add    dl,BYTE PTR [ecx+0xbd70c64]
    35c7:	00 00                	add    BYTE PTR [eax],al
    35c9:	01 6c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ebp
    35cd:	00 00                	add    BYTE PTR [eax],al
    35cf:	02 91 60 0a 73 74    	add    dl,BYTE PTR [ecx+0x74730a60]
    35d5:	72 00                	jb     35d7 <sysEnter_Vector-0x12ca29>
    35d7:	01 6d c8             	add    DWORD PTR [ebp-0x38],ebp
    35da:	00 00                	add    BYTE PTR [eax],al
    35dc:	00 02                	add    BYTE PTR [edx],al
    35de:	91                   	xchg   ecx,eax
    35df:	5c                   	pop    esp
    35e0:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    35e3:	01 6e a8             	add    DWORD PTR [esi-0x58],ebp
    35e6:	00 00                	add    BYTE PTR [eax],al
    35e8:	00 02                	add    BYTE PTR [edx],al
    35ea:	91                   	xchg   ecx,eax
    35eb:	58                   	pop    eax
    35ec:	0c e0                	or     al,0xe0
    35ee:	09 00                	or     DWORD PTR [eax],eax
    35f0:	00 01                	add    BYTE PTR [ecx],al
    35f2:	70 5a                	jo     364e <sysEnter_Vector-0x12c9b2>
    35f4:	00 00                	add    BYTE PTR [eax],al
    35f6:	00 02                	add    BYTE PTR [edx],al
    35f8:	91                   	xchg   ecx,eax
    35f9:	54                   	push   esp
    35fa:	0c 05                	or     al,0x5
    35fc:	0c 00                	or     al,0x0
    35fe:	00 01                	add    BYTE PTR [ecx],al
    3600:	72 5a                	jb     365c <sysEnter_Vector-0x12c9a4>
    3602:	00 00                	add    BYTE PTR [eax],al
    3604:	00 02                	add    BYTE PTR [edx],al
    3606:	91                   	xchg   ecx,eax
    3607:	50                   	push   eax
    3608:	0c f4                	or     al,0xf4
    360a:	0b 00                	or     eax,DWORD PTR [eax]
    360c:	00 01                	add    BYTE PTR [ecx],al
    360e:	73 5a                	jae    366a <sysEnter_Vector-0x12c996>
    3610:	00 00                	add    BYTE PTR [eax],al
    3612:	00 02                	add    BYTE PTR [edx],al
    3614:	91                   	xchg   ecx,eax
    3615:	4c                   	dec    esp
    3616:	0c dc                	or     al,0xdc
    3618:	0b 00                	or     eax,DWORD PTR [eax]
    361a:	00 01                	add    BYTE PTR [ecx],al
    361c:	75 5a                	jne    3678 <sysEnter_Vector-0x12c988>
    361e:	00 00                	add    BYTE PTR [eax],al
    3620:	00 02                	add    BYTE PTR [edx],al
    3622:	91                   	xchg   ecx,eax
    3623:	48                   	dec    eax
    3624:	11 e6                	adc    esi,esp
    3626:	0b 00                	or     eax,DWORD PTR [eax]
    3628:	00 01                	add    BYTE PTR [ecx],al
    362a:	7f 59                	jg     3685 <sysEnter_Vector-0x12c97b>
    362c:	2b 00                	sub    eax,DWORD PTR [eax]
    362e:	9f                   	lahf   
    362f:	12 fe                	adc    bh,dh
    3631:	2d 00 9f 1b 00       	sub    eax,0x1b9f00
    3636:	00 00                	add    BYTE PTR [eax],al
    3638:	f6 02 00             	test   BYTE PTR [edx],0x0
    363b:	00 0a                	add    BYTE PTR [edx],cl
    363d:	69 70 00 01 e0 0e 03 	imul   esi,DWORD PTR [eax+0x0],0x30ee001
    3644:	00 00                	add    BYTE PTR [eax],al
    3646:	02 91 44 00 0d 1e    	add    dl,BYTE PTR [ecx+0x1e0d0044]
    364c:	2e 00 9f 1b 00 00 00 	add    BYTE PTR cs:[edi+0x1b],bl
    3653:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    3656:	00 01                	add    BYTE PTR [ecx],al
    3658:	e3 14                	jecxz  366e <sysEnter_Vector-0x12c992>
    365a:	03 00                	add    eax,DWORD PTR [eax]
    365c:	00 02                	add    BYTE PTR [edx],al
    365e:	91                   	xchg   ecx,eax
    365f:	40                   	inc    eax
    3660:	00 00                	add    BYTE PTR [eax],al
    3662:	06                   	push   es
    3663:	04 9a                	add    al,0x9a
    3665:	00 00                	add    BYTE PTR [eax],al
    3667:	00 06                	add    BYTE PTR [esi],al
    3669:	04 5a                	add    al,0x5a
    366b:	00 00                	add    BYTE PTR [eax],al
    366d:	00 13                	add    BYTE PTR [ebx],dl
    366f:	18 0c 00             	sbb    BYTE PTR [eax+eax*1],cl
    3672:	00 01                	add    BYTE PTR [ecx],al
    3674:	15 01 5a 00 00       	adc    eax,0x5a01
    3679:	00 5d 2f             	add    BYTE PTR [ebp+0x2f],bl
    367c:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
    3682:	01 9c 70 03 00 00 14 	add    DWORD PTR [eax+esi*2+0x14000003],ebx
    3689:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    368c:	00 01                	add    BYTE PTR [ecx],al
    368e:	15 01 c8 00 00       	adc    eax,0xc801
    3693:	00 02                	add    BYTE PTR [edx],al
    3695:	91                   	xchg   ecx,eax
    3696:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    3699:	6d                   	ins    DWORD PTR es:[edi],dx
    369a:	74 00                	je     369c <sysEnter_Vector-0x12c964>
    369c:	01 15 01 a8 00 00    	add    DWORD PTR ds:0xa801,edx
    36a2:	00 02                	add    BYTE PTR [edx],al
    36a4:	91                   	xchg   ecx,eax
    36a5:	04 15                	add    al,0x15
    36a7:	16                   	push   ss
    36a8:	90                   	nop
    36a9:	09 00                	or     DWORD PTR [eax],eax
    36ab:	00 01                	add    BYTE PTR [ecx],al
    36ad:	17                   	pop    ss
    36ae:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    36b1:	00 00                	add    BYTE PTR [eax],al
    36b3:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    36b9:	01 18                	add    DWORD PTR [eax],ebx
    36bb:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    36be:	00 00                	add    BYTE PTR [eax],al
    36c0:	02 91 6c 00 18 a3    	add    dl,BYTE PTR [ecx-0x5ce7ff94]
    36c6:	00 00                	add    BYTE PTR [eax],al
    36c8:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    36cb:	76 00                	jbe    36cd <sysEnter_Vector-0x12c933>
    36cd:	00 00                	add    BYTE PTR [eax],al
    36cf:	05 03 6c 71 00       	add    eax,0x716c03
    36d4:	9f                   	lahf   
    36d5:	18 34 01             	sbb    BYTE PTR [ecx+eax*1],dh
    36d8:	00 00                	add    BYTE PTR [eax],al
    36da:	04 38                	add    al,0x38
    36dc:	76 00                	jbe    36de <sysEnter_Vector-0x12c922>
    36de:	00 00                	add    BYTE PTR [eax],al
    36e0:	05 03 70 71 00       	add    eax,0x717003
    36e5:	9f                   	lahf   
    36e6:	18 7b 00             	sbb    BYTE PTR [ebx+0x0],bh
    36e9:	00 00                	add    BYTE PTR [eax],al
    36eb:	04 39                	add    al,0x39
    36ed:	76 00                	jbe    36ef <sysEnter_Vector-0x12c911>
    36ef:	00 00                	add    BYTE PTR [eax],al
    36f1:	05 03 68 71 00       	add    eax,0x716803
    36f6:	9f                   	lahf   
    36f7:	18 7c 01 00          	sbb    BYTE PTR [ecx+eax*1+0x0],bh
    36fb:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    36fe:	9a 00 00 00 05 03 78 	call   0x7803:0x5000000
    3705:	71 00                	jno    3707 <sysEnter_Vector-0x12c8f9>
    3707:	9f                   	lahf   
    3708:	18 6e 00             	sbb    BYTE PTR [esi+0x0],ch
    370b:	00 00                	add    BYTE PTR [eax],al
    370d:	05 34 c5 03 00       	add    eax,0x3c534
    3712:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    3718:	9f                   	lahf   
    3719:	06                   	push   es
    371a:	04 8f                	add    al,0x8f
    371c:	00 00                	add    BYTE PTR [eax],al
    371e:	00 18                	add    BYTE PTR [eax],bl
    3720:	91                   	xchg   ecx,eax
    3721:	00 00                	add    BYTE PTR [eax],al
    3723:	00 05 35 76 00 00    	add    BYTE PTR ds:0x7635,al
    3729:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    372f:	9f                   	lahf   
    3730:	18 41 00             	sbb    BYTE PTR [ecx+0x0],al
    3733:	00 00                	add    BYTE PTR [eax],al
    3735:	06                   	push   es
    3736:	58                   	pop    eax
    3737:	ed                   	in     eax,dx
    3738:	03 00                	add    eax,DWORD PTR [eax]
    373a:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    3740:	9f                   	lahf   
    3741:	06                   	push   es
    3742:	04 c8                	add    al,0xc8
    3744:	00 00                	add    BYTE PTR [eax],al
    3746:	00 00                	add    BYTE PTR [eax],al
    3748:	65 01 00             	add    DWORD PTR gs:[eax],eax
    374b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    374e:	c2 0e 00             	ret    0xe
    3751:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3754:	ac                   	lods   al,BYTE PTR ds:[esi]
    3755:	00 00                	add    BYTE PTR [eax],al
    3757:	00 0c 20             	add    BYTE PTR [eax+eiz*1],cl
    375a:	0c 00                	or     al,0x0
    375c:	00 1e                	add    BYTE PTR [esi],bl
    375e:	00 00                	add    BYTE PTR [eax],al
    3760:	00 90 2f 00 9f 84    	add    BYTE PTR [eax-0x7b60ffd1],dl
    3766:	00 00                	add    BYTE PTR [eax],al
    3768:	00 80 13 00 00 02    	add    BYTE PTR [eax+0x2000013],al
    376e:	01 06                	add    DWORD PTR [esi],eax
    3770:	8c 00                	mov    WORD PTR [eax],es
    3772:	00 00                	add    BYTE PTR [eax],al
    3774:	02 01                	add    al,BYTE PTR [ecx]
    3776:	06                   	push   es
    3777:	85 00                	test   DWORD PTR [eax],eax
    3779:	00 00                	add    BYTE PTR [eax],al
    377b:	02 02                	add    al,BYTE PTR [edx]
    377d:	05 72 01 00 00       	add    eax,0x172
    3782:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3789:	02 08                	add    cl,BYTE PTR [eax]
    378b:	05 00 00 00 00       	add    eax,0x0
    3790:	02 01                	add    al,BYTE PTR [ecx]
    3792:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3798:	02 07                	add    al,BYTE PTR [edi]
    379a:	19 01                	sbb    DWORD PTR [ecx],eax
    379c:	00 00                	add    BYTE PTR [eax],al
    379e:	04 0e                	add    al,0xe
    37a0:	00 00                	add    BYTE PTR [eax],al
    37a2:	00 02                	add    BYTE PTR [edx],al
    37a4:	34 61                	xor    al,0x61
    37a6:	00 00                	add    BYTE PTR [eax],al
    37a8:	00 02                	add    BYTE PTR [edx],al
    37aa:	04 07                	add    al,0x7
    37ac:	61                   	popa   
    37ad:	00 00                	add    BYTE PTR [eax],al
    37af:	00 02                	add    BYTE PTR [edx],al
    37b1:	08 07                	or     BYTE PTR [edi],al
    37b3:	57                   	push   edi
    37b4:	00 00                	add    BYTE PTR [eax],al
    37b6:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    37bd:	56                   	push   esi
    37be:	61                   	popa   
    37bf:	00 00                	add    BYTE PTR [eax],al
    37c1:	00 02                	add    BYTE PTR [edx],al
    37c3:	04 05                	add    al,0x5
    37c5:	05 00 00 00 02       	add    eax,0x2000000
    37ca:	0c 04                	or     al,0x4
    37cc:	66 01 00             	add    WORD PTR [eax],ax
    37cf:	00 02                	add    BYTE PTR [edx],al
    37d1:	01 02                	add    DWORD PTR [edx],eax
    37d3:	13 01                	adc    eax,DWORD PTR [ecx]
    37d5:	00 00                	add    BYTE PTR [eax],al
    37d7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    37da:	83 01 00             	add    DWORD PTR [ecx],0x0
    37dd:	00 02                	add    BYTE PTR [edx],al
    37df:	04 07                	add    al,0x7
    37e1:	5c                   	pop    esp
    37e2:	00 00                	add    BYTE PTR [eax],al
    37e4:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    37ea:	00 06                	add    BYTE PTR [esi],al
    37ec:	31 0c 00             	xor    DWORD PTR [eax+eax*1],ecx
    37ef:	00 01                	add    BYTE PTR [ecx],al
    37f1:	10 90 2f 00 9f 84    	adc    BYTE PTR [eax-0x7b60ffd1],dl
    37f7:	00 00                	add    BYTE PTR [eax],al
    37f9:	00 01                	add    BYTE PTR [ecx],al
    37fb:	9c                   	pushf  
    37fc:	d5 00                	aad    0x0
    37fe:	00 00                	add    BYTE PTR [eax],al
    3800:	07                   	pop    es
    3801:	2c 0c                	sub    al,0xc
    3803:	00 00                	add    BYTE PTR [eax],al
    3805:	01 12                	add    DWORD PTR [edx],edx
    3807:	d5 00                	aad    0x0
    3809:	00 00                	add    BYTE PTR [eax],al
    380b:	02 91 67 07 3a 0c    	add    dl,BYTE PTR [ecx+0xc3a0767]
    3811:	00 00                	add    BYTE PTR [eax],al
    3813:	01 13                	add    DWORD PTR [ebx],edx
    3815:	3a 00                	cmp    al,BYTE PTR [eax]
    3817:	00 00                	add    BYTE PTR [eax],al
    3819:	02 91 6c 00 08 25    	add    dl,BYTE PTR [ecx+0x2508006c]
    381f:	00 00                	add    BYTE PTR [eax],al
    3821:	00 e5                	add    ch,ah
    3823:	00 00                	add    BYTE PTR [eax],al
    3825:	00 09                	add    BYTE PTR [ecx],cl
    3827:	8f 00                	pop    DWORD PTR [eax]
    3829:	00 00                	add    BYTE PTR [eax],al
    382b:	04 00                	add    al,0x0
    382d:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    3833:	37                   	aaa    
    3834:	56                   	push   esi
    3835:	00 00                	add    BYTE PTR [eax],al
    3837:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    383d:	9f                   	lahf   
    383e:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    3841:	00 00                	add    BYTE PTR [eax],al
    3843:	03 38                	add    edi,DWORD PTR [eax]
    3845:	56                   	push   esi
    3846:	00 00                	add    BYTE PTR [eax],al
    3848:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    384e:	9f                   	lahf   
    384f:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    3852:	00 00                	add    BYTE PTR [eax],al
    3854:	03 39                	add    edi,DWORD PTR [ecx]
    3856:	56                   	push   esi
    3857:	00 00                	add    BYTE PTR [eax],al
    3859:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    385f:	9f                   	lahf   
    3860:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    3864:	00 03                	add    BYTE PTR [ebx],al
    3866:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    3869:	00 00                	add    BYTE PTR [eax],al
    386b:	05 03 78 71 00       	add    eax,0x717803
    3870:	9f                   	lahf   
    3871:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    3874:	00 00                	add    BYTE PTR [eax],al
    3876:	04 34                	add    al,0x34
    3878:	3a 01                	cmp    al,BYTE PTR [ecx]
    387a:	00 00                	add    BYTE PTR [eax],al
    387c:	05 03 64 71 00       	add    eax,0x716403
    3881:	9f                   	lahf   
    3882:	05 04 6f 00 00       	add    eax,0x6f04
    3887:	00 0a                	add    BYTE PTR [edx],cl
    3889:	91                   	xchg   ecx,eax
    388a:	00 00                	add    BYTE PTR [eax],al
    388c:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3893:	05 03 60 71 00       	add    eax,0x716003
    3898:	9f                   	lahf   
    3899:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    389c:	00 00                	add    BYTE PTR [eax],al
    389e:	05 58 62 01 00       	add    eax,0x16258
    38a3:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    38a9:	9f                   	lahf   
    38aa:	05 04 9d 00 00       	add    eax,0x9d04
    38af:	00 00                	add    BYTE PTR [eax],al
    38b1:	45                   	inc    ebp
    38b2:	02 00                	add    al,BYTE PTR [eax]
    38b4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    38b7:	4c                   	dec    esp
    38b8:	0f 00 00             	sldt   WORD PTR [eax]
    38bb:	04 01                	add    al,0x1
    38bd:	ac                   	lods   al,BYTE PTR ds:[esi]
    38be:	00 00                	add    BYTE PTR [eax],al
    38c0:	00 0c 7b             	add    BYTE PTR [ebx+edi*2],cl
    38c3:	0c 00                	or     al,0x0
    38c5:	00 1e                	add    BYTE PTR [esi],bl
    38c7:	00 00                	add    BYTE PTR [eax],al
    38c9:	00 14 30             	add    BYTE PTR [eax+esi*1],dl
    38cc:	00 9f 11 01 00 00    	add    BYTE PTR [edi+0x111],bl
    38d2:	42                   	inc    edx
    38d3:	14 00                	adc    al,0x0
    38d5:	00 02                	add    BYTE PTR [edx],al
    38d7:	01 06                	add    DWORD PTR [esi],eax
    38d9:	8c 00                	mov    WORD PTR [eax],es
    38db:	00 00                	add    BYTE PTR [eax],al
    38dd:	02 01                	add    al,BYTE PTR [ecx]
    38df:	06                   	push   es
    38e0:	85 00                	test   DWORD PTR [eax],eax
    38e2:	00 00                	add    BYTE PTR [eax],al
    38e4:	02 02                	add    al,BYTE PTR [edx]
    38e6:	05 72 01 00 00       	add    eax,0x172
    38eb:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    38f2:	02 08                	add    cl,BYTE PTR [eax]
    38f4:	05 00 00 00 00       	add    eax,0x0
    38f9:	02 01                	add    al,BYTE PTR [ecx]
    38fb:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3901:	02 07                	add    al,BYTE PTR [edi]
    3903:	19 01                	sbb    DWORD PTR [ecx],eax
    3905:	00 00                	add    BYTE PTR [eax],al
    3907:	04 0e                	add    al,0xe
    3909:	00 00                	add    BYTE PTR [eax],al
    390b:	00 02                	add    BYTE PTR [edx],al
    390d:	34 61                	xor    al,0x61
    390f:	00 00                	add    BYTE PTR [eax],al
    3911:	00 02                	add    BYTE PTR [edx],al
    3913:	04 07                	add    al,0x7
    3915:	61                   	popa   
    3916:	00 00                	add    BYTE PTR [eax],al
    3918:	00 02                	add    BYTE PTR [edx],al
    391a:	08 07                	or     BYTE PTR [edi],al
    391c:	57                   	push   edi
    391d:	00 00                	add    BYTE PTR [eax],al
    391f:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3926:	56                   	push   esi
    3927:	61                   	popa   
    3928:	00 00                	add    BYTE PTR [eax],al
    392a:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    3931:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    3934:	00 00                	add    BYTE PTR [eax],al
    3936:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    393d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3940:	66 01 00             	add    WORD PTR [eax],ax
    3943:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    3949:	00 06                	add    BYTE PTR [esi],al
    394b:	25 00 00 00 02       	and    eax,0x2000000
    3950:	01 02                	add    DWORD PTR [edx],eax
    3952:	13 01                	adc    eax,DWORD PTR [ecx]
    3954:	00 00                	add    BYTE PTR [eax],al
    3956:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3959:	83 01 00             	add    DWORD PTR [ecx],0x0
    395c:	00 02                	add    BYTE PTR [edx],al
    395e:	04 07                	add    al,0x7
    3960:	5c                   	pop    esp
    3961:	00 00                	add    BYTE PTR [eax],al
    3963:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3969:	00 07                	add    BYTE PTR [edi],al
    396b:	4a                   	dec    edx
    396c:	0c 00                	or     al,0x0
    396e:	00 01                	add    BYTE PTR [ecx],al
    3970:	1d b3 00 00 00       	sbb    eax,0xb3
    3975:	14 30                	adc    al,0x30
    3977:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    397d:	01 9c ef 00 00 00 08 	add    DWORD PTR [edi+ebp*8+0x8000000],ebx
    3984:	52                   	push   edx
    3985:	0b 00                	or     eax,DWORD PTR [eax]
    3987:	00 01                	add    BYTE PTR [ecx],al
    3989:	1d b3 00 00 00       	sbb    eax,0xb3
    398e:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    3994:	63 00                	arpl   WORD PTR [eax],ax
    3996:	01 1d 93 00 00 00    	add    DWORD PTR ds:0x93,ebx
    399c:	02 91 04 00 07 42    	add    dl,BYTE PTR [ecx+0x42070004]
    39a2:	0c 00                	or     al,0x0
    39a4:	00 01                	add    BYTE PTR [ecx],al
    39a6:	23 b3 00 00 00 52    	and    esi,DWORD PTR [ebx+0x52000000]
    39ac:	30 00                	xor    BYTE PTR [eax],al
    39ae:	9f                   	lahf   
    39af:	3e 00 00             	add    BYTE PTR ds:[eax],al
    39b2:	00 01                	add    BYTE PTR [ecx],al
    39b4:	9c                   	pushf  
    39b5:	25 01 00 00 08       	and    eax,0x8000001
    39ba:	52                   	push   edx
    39bb:	0b 00                	or     eax,DWORD PTR [eax]
    39bd:	00 01                	add    BYTE PTR [ecx],al
    39bf:	23 b3 00 00 00 02    	and    esi,DWORD PTR [ebx+0x2000000]
    39c5:	91                   	xchg   ecx,eax
    39c6:	00 09                	add    BYTE PTR [ecx],cl
    39c8:	73 72                	jae    3a3c <sysEnter_Vector-0x12c5c4>
    39ca:	63 00                	arpl   WORD PTR [eax],ax
    39cc:	01 23                	add    DWORD PTR [ebx],esp
    39ce:	93                   	xchg   ebx,eax
    39cf:	00 00                	add    BYTE PTR [eax],al
    39d1:	00 02                	add    BYTE PTR [edx],al
    39d3:	91                   	xchg   ecx,eax
    39d4:	04 00                	add    al,0x0
    39d6:	07                   	pop    es
    39d7:	65                   	gs
    39d8:	0c 00                	or     al,0x0
    39da:	00 01                	add    BYTE PTR [ecx],al
    39dc:	29 b3 00 00 00 90    	sub    DWORD PTR [ebx-0x70000000],esi
    39e2:	30 00                	xor    BYTE PTR [eax],al
    39e4:	9f                   	lahf   
    39e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    39e6:	00 00                	add    BYTE PTR [eax],al
    39e8:	00 01                	add    BYTE PTR [ecx],al
    39ea:	9c                   	pushf  
    39eb:	83 01 00             	add    DWORD PTR [ecx],0x0
    39ee:	00 08                	add    BYTE PTR [eax],cl
    39f0:	52                   	push   edx
    39f1:	0b 00                	or     eax,DWORD PTR [eax]
    39f3:	00 01                	add    BYTE PTR [ecx],al
    39f5:	29 b3 00 00 00 02    	sub    DWORD PTR [ebx+0x2000000],esi
    39fb:	91                   	xchg   ecx,eax
    39fc:	00 09                	add    BYTE PTR [ecx],cl
    39fe:	73 72                	jae    3a72 <sysEnter_Vector-0x12c58e>
    3a00:	63 00                	arpl   WORD PTR [eax],ax
    3a02:	01 29                	add    DWORD PTR [ecx],ebp
    3a04:	93                   	xchg   ebx,eax
    3a05:	00 00                	add    BYTE PTR [eax],al
    3a07:	00 02                	add    BYTE PTR [edx],al
    3a09:	91                   	xchg   ecx,eax
    3a0a:	04 09                	add    al,0x9
    3a0c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a0d:	00 01                	add    BYTE PTR [ecx],al
    3a0f:	29 7a 00             	sub    DWORD PTR [edx+0x0],edi
    3a12:	00 00                	add    BYTE PTR [eax],al
    3a14:	02 91 08 0a 59 0c    	add    dl,BYTE PTR [ecx+0xc590a08]
    3a1a:	00 00                	add    BYTE PTR [eax],al
    3a1c:	01 2b                	add    DWORD PTR [ebx],ebp
    3a1e:	7a 00                	jp     3a20 <sysEnter_Vector-0x12c5e0>
    3a20:	00 00                	add    BYTE PTR [eax],al
    3a22:	02 91 6c 0a 6e 0c    	add    dl,BYTE PTR [ecx+0xc6e0a6c]
    3a28:	00 00                	add    BYTE PTR [eax],al
    3a2a:	01 2c 7a             	add    DWORD PTR [edx+edi*2],ebp
    3a2d:	00 00                	add    BYTE PTR [eax],al
    3a2f:	00 02                	add    BYTE PTR [edx],al
    3a31:	91                   	xchg   ecx,eax
    3a32:	68 00 07 51 0c       	push   0xc510700
    3a37:	00 00                	add    BYTE PTR [eax],al
    3a39:	01 37                	add    DWORD PTR [edi],esi
    3a3b:	b3 00                	mov    bl,0x0
    3a3d:	00 00                	add    BYTE PTR [eax],al
    3a3f:	ff 30                	push   DWORD PTR [eax]
    3a41:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    3a47:	01 9c c5 01 00 00 08 	add    DWORD PTR [ebp+eax*8+0x8000001],ebx
    3a4e:	52                   	push   edx
    3a4f:	0b 00                	or     eax,DWORD PTR [eax]
    3a51:	00 01                	add    BYTE PTR [ecx],al
    3a53:	37                   	aaa    
    3a54:	b3 00                	mov    bl,0x0
    3a56:	00 00                	add    BYTE PTR [eax],al
    3a58:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    3a5e:	63 00                	arpl   WORD PTR [eax],ax
    3a60:	01 37                	add    DWORD PTR [edi],esi
    3a62:	93                   	xchg   ebx,eax
    3a63:	00 00                	add    BYTE PTR [eax],al
    3a65:	00 02                	add    BYTE PTR [edx],al
    3a67:	91                   	xchg   ecx,eax
    3a68:	04 09                	add    al,0x9
    3a6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a6b:	00 01                	add    BYTE PTR [ecx],al
    3a6d:	37                   	aaa    
    3a6e:	7a 00                	jp     3a70 <sysEnter_Vector-0x12c590>
    3a70:	00 00                	add    BYTE PTR [eax],al
    3a72:	02 91 08 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4fff8]
    3a78:	00 00                	add    BYTE PTR [eax],al
    3a7a:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3a7d:	56                   	push   esi
    3a7e:	00 00                	add    BYTE PTR [eax],al
    3a80:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    3a86:	9f                   	lahf   
    3a87:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3a8a:	00 00                	add    BYTE PTR [eax],al
    3a8c:	04 38                	add    al,0x38
    3a8e:	56                   	push   esi
    3a8f:	00 00                	add    BYTE PTR [eax],al
    3a91:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    3a97:	9f                   	lahf   
    3a98:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3a9b:	00 00                	add    BYTE PTR [eax],al
    3a9d:	04 39                	add    al,0x39
    3a9f:	56                   	push   esi
    3aa0:	00 00                	add    BYTE PTR [eax],al
    3aa2:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    3aa8:	9f                   	lahf   
    3aa9:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3aad:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    3ab0:	85 00                	test   DWORD PTR [eax],eax
    3ab2:	00 00                	add    BYTE PTR [eax],al
    3ab4:	05 03 78 71 00       	add    eax,0x717803
    3ab9:	9f                   	lahf   
    3aba:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3abd:	00 00                	add    BYTE PTR [eax],al
    3abf:	05 34 1a 02 00       	add    eax,0x21a34
    3ac4:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    3aca:	9f                   	lahf   
    3acb:	05 04 6f 00 00       	add    eax,0x6f04
    3ad0:	00 0b                	add    BYTE PTR [ebx],cl
    3ad2:	91                   	xchg   ecx,eax
    3ad3:	00 00                	add    BYTE PTR [eax],al
    3ad5:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    3adb:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    3ae1:	9f                   	lahf   
    3ae2:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3ae5:	00 00                	add    BYTE PTR [eax],al
    3ae7:	06                   	push   es
    3ae8:	58                   	pop    eax
    3ae9:	42                   	inc    edx
    3aea:	02 00                	add    al,BYTE PTR [eax]
    3aec:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    3af2:	9f                   	lahf   
    3af3:	05 04 b3 00 00       	add    eax,0xb304
    3af8:	00 00                	add    BYTE PTR [eax],al
    3afa:	d3 01                	rol    DWORD PTR [ecx],cl
    3afc:	00 00                	add    BYTE PTR [eax],al
    3afe:	04 00                	add    al,0x0
    3b00:	ed                   	in     eax,dx
    3b01:	0f 00 00             	sldt   WORD PTR [eax]
    3b04:	04 01                	add    al,0x1
    3b06:	ac                   	lods   al,BYTE PTR ds:[esi]
    3b07:	00 00                	add    BYTE PTR [eax],al
    3b09:	00 0c 9f             	add    BYTE PTR [edi+ebx*4],cl
    3b0c:	0c 00                	or     al,0x0
    3b0e:	00 1e                	add    BYTE PTR [esi],bl
    3b10:	00 00                	add    BYTE PTR [eax],al
    3b12:	00 28                	add    BYTE PTR [eax],ch
    3b14:	31 00                	xor    DWORD PTR [eax],eax
    3b16:	9f                   	lahf   
    3b17:	7b 00                	jnp    3b19 <sysEnter_Vector-0x12c4e7>
    3b19:	00 00                	add    BYTE PTR [eax],al
    3b1b:	2b 15 00 00 02 01    	sub    edx,DWORD PTR ds:0x1020000
    3b21:	06                   	push   es
    3b22:	8c 00                	mov    WORD PTR [eax],es
    3b24:	00 00                	add    BYTE PTR [eax],al
    3b26:	02 01                	add    al,BYTE PTR [ecx]
    3b28:	06                   	push   es
    3b29:	85 00                	test   DWORD PTR [eax],eax
    3b2b:	00 00                	add    BYTE PTR [eax],al
    3b2d:	02 02                	add    al,BYTE PTR [edx]
    3b2f:	05 72 01 00 00       	add    eax,0x172
    3b34:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3b3b:	02 08                	add    cl,BYTE PTR [eax]
    3b3d:	05 00 00 00 00       	add    eax,0x0
    3b42:	02 01                	add    al,BYTE PTR [ecx]
    3b44:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3b4a:	02 07                	add    al,BYTE PTR [edi]
    3b4c:	19 01                	sbb    DWORD PTR [ecx],eax
    3b4e:	00 00                	add    BYTE PTR [eax],al
    3b50:	04 0e                	add    al,0xe
    3b52:	00 00                	add    BYTE PTR [eax],al
    3b54:	00 02                	add    BYTE PTR [edx],al
    3b56:	34 61                	xor    al,0x61
    3b58:	00 00                	add    BYTE PTR [eax],al
    3b5a:	00 02                	add    BYTE PTR [edx],al
    3b5c:	04 07                	add    al,0x7
    3b5e:	61                   	popa   
    3b5f:	00 00                	add    BYTE PTR [eax],al
    3b61:	00 02                	add    BYTE PTR [edx],al
    3b63:	08 07                	or     BYTE PTR [edi],al
    3b65:	57                   	push   edi
    3b66:	00 00                	add    BYTE PTR [eax],al
    3b68:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3b6f:	56                   	push   esi
    3b70:	61                   	popa   
    3b71:	00 00                	add    BYTE PTR [eax],al
    3b73:	00 02                	add    BYTE PTR [edx],al
    3b75:	04 05                	add    al,0x5
    3b77:	05 00 00 00 02       	add    eax,0x2000000
    3b7c:	0c 04                	or     al,0x4
    3b7e:	66 01 00             	add    WORD PTR [eax],ax
    3b81:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3b87:	00 06                	add    BYTE PTR [esi],al
    3b89:	25 00 00 00 02       	and    eax,0x2000000
    3b8e:	01 02                	add    DWORD PTR [edx],eax
    3b90:	13 01                	adc    eax,DWORD PTR [ecx]
    3b92:	00 00                	add    BYTE PTR [eax],al
    3b94:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3b97:	83 01 00             	add    DWORD PTR [ecx],0x0
    3b9a:	00 02                	add    BYTE PTR [edx],al
    3b9c:	04 07                	add    al,0x7
    3b9e:	5c                   	pop    esp
    3b9f:	00 00                	add    BYTE PTR [eax],al
    3ba1:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3ba7:	00 07                	add    BYTE PTR [edi],al
    3ba9:	90                   	nop
    3baa:	0c 00                	or     al,0x0
    3bac:	00 01                	add    BYTE PTR [ecx],al
    3bae:	1a 3a                	sbb    bh,BYTE PTR [edx]
    3bb0:	00 00                	add    BYTE PTR [eax],al
    3bb2:	00 28                	add    BYTE PTR [eax],ch
    3bb4:	31 00                	xor    DWORD PTR [eax],eax
    3bb6:	9f                   	lahf   
    3bb7:	5e                   	pop    esi
    3bb8:	00 00                	add    BYTE PTR [eax],al
    3bba:	00 01                	add    BYTE PTR [ecx],al
    3bbc:	9c                   	pushf  
    3bbd:	14 01                	adc    al,0x1
    3bbf:	00 00                	add    BYTE PTR [eax],al
    3bc1:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    3bc4:	00 01                	add    BYTE PTR [ecx],al
    3bc6:	1a 88 00 00 00 02    	sbb    cl,BYTE PTR [eax+0x2000000]
    3bcc:	91                   	xchg   ecx,eax
    3bcd:	00 08                	add    BYTE PTR [eax],cl
    3bcf:	70 32                	jo     3c03 <sysEnter_Vector-0x12c3fd>
    3bd1:	00 01                	add    BYTE PTR [ecx],al
    3bd3:	1a 88 00 00 00 02    	sbb    cl,BYTE PTR [eax+0x2000000]
    3bd9:	91                   	xchg   ecx,eax
    3bda:	04 09                	add    al,0x9
    3bdc:	73 31                	jae    3c0f <sysEnter_Vector-0x12c3f1>
    3bde:	00 01                	add    BYTE PTR [ecx],al
    3be0:	1c 14                	sbb    al,0x14
    3be2:	01 00                	add    DWORD PTR [eax],eax
    3be4:	00 01                	add    BYTE PTR [ecx],al
    3be6:	53                   	push   ebx
    3be7:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    3bea:	00 01                	add    BYTE PTR [ecx],al
    3bec:	1d 14 01 00 00       	sbb    eax,0x114
    3bf1:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3bf4:	63 31                	arpl   WORD PTR [ecx],si
    3bf6:	00 01                	add    BYTE PTR [ecx],al
    3bf8:	1e                   	push   ds
    3bf9:	48                   	dec    eax
    3bfa:	00 00                	add    BYTE PTR [eax],al
    3bfc:	00 02                	add    BYTE PTR [edx],al
    3bfe:	91                   	xchg   ecx,eax
    3bff:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3c00:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    3c03:	00 01                	add    BYTE PTR [ecx],al
    3c05:	1e                   	push   ds
    3c06:	48                   	dec    eax
    3c07:	00 00                	add    BYTE PTR [eax],al
    3c09:	00 02                	add    BYTE PTR [edx],al
    3c0b:	91                   	xchg   ecx,eax
    3c0c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3c0d:	00 05 04 1a 01 00    	add    BYTE PTR ds:0x11a04,al
    3c13:	00 06                	add    BYTE PTR [esi],al
    3c15:	48                   	dec    eax
    3c16:	00 00                	add    BYTE PTR [eax],al
    3c18:	00 0a                	add    BYTE PTR [edx],cl
    3c1a:	98                   	cwde   
    3c1b:	0c 00                	or     al,0x0
    3c1d:	00 01                	add    BYTE PTR [ecx],al
    3c1f:	2c 3a                	sub    al,0x3a
    3c21:	00 00                	add    BYTE PTR [eax],al
    3c23:	00 86 31 00 9f 1d    	add    BYTE PTR [esi+0x1d9f0031],al
    3c29:	00 00                	add    BYTE PTR [eax],al
    3c2b:	00 01                	add    BYTE PTR [ecx],al
    3c2d:	9c                   	pushf  
    3c2e:	53                   	push   ebx
    3c2f:	01 00                	add    DWORD PTR [eax],eax
    3c31:	00 08                	add    BYTE PTR [eax],cl
    3c33:	70 31                	jo     3c66 <sysEnter_Vector-0x12c39a>
    3c35:	00 01                	add    BYTE PTR [ecx],al
    3c37:	2c 88                	sub    al,0x88
    3c39:	00 00                	add    BYTE PTR [eax],al
    3c3b:	00 02                	add    BYTE PTR [edx],al
    3c3d:	91                   	xchg   ecx,eax
    3c3e:	00 08                	add    BYTE PTR [eax],cl
    3c40:	70 32                	jo     3c74 <sysEnter_Vector-0x12c38c>
    3c42:	00 01                	add    BYTE PTR [ecx],al
    3c44:	2c 88                	sub    al,0x88
    3c46:	00 00                	add    BYTE PTR [eax],al
    3c48:	00 02                	add    BYTE PTR [edx],al
    3c4a:	91                   	xchg   ecx,eax
    3c4b:	04 00                	add    al,0x0
    3c4d:	0b a3 00 00 00 03    	or     esp,DWORD PTR [ebx+0x3000000]
    3c53:	37                   	aaa    
    3c54:	56                   	push   esi
    3c55:	00 00                	add    BYTE PTR [eax],al
    3c57:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    3c5d:	9f                   	lahf   
    3c5e:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3c61:	00 00                	add    BYTE PTR [eax],al
    3c63:	03 38                	add    edi,DWORD PTR [eax]
    3c65:	56                   	push   esi
    3c66:	00 00                	add    BYTE PTR [eax],al
    3c68:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    3c6e:	9f                   	lahf   
    3c6f:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3c72:	00 00                	add    BYTE PTR [eax],al
    3c74:	03 39                	add    edi,DWORD PTR [ecx]
    3c76:	56                   	push   esi
    3c77:	00 00                	add    BYTE PTR [eax],al
    3c79:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    3c7f:	9f                   	lahf   
    3c80:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3c84:	00 03                	add    BYTE PTR [ebx],al
    3c86:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    3c89:	00 00                	add    BYTE PTR [eax],al
    3c8b:	05 03 78 71 00       	add    eax,0x717803
    3c90:	9f                   	lahf   
    3c91:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3c94:	00 00                	add    BYTE PTR [eax],al
    3c96:	04 34                	add    al,0x34
    3c98:	a8 01                	test   al,0x1
    3c9a:	00 00                	add    BYTE PTR [eax],al
    3c9c:	05 03 64 71 00       	add    eax,0x716403
    3ca1:	9f                   	lahf   
    3ca2:	05 04 6f 00 00       	add    eax,0x6f04
    3ca7:	00 0b                	add    BYTE PTR [ebx],cl
    3ca9:	91                   	xchg   ecx,eax
    3caa:	00 00                	add    BYTE PTR [eax],al
    3cac:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3cb3:	05 03 60 71 00       	add    eax,0x716003
    3cb8:	9f                   	lahf   
    3cb9:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3cbc:	00 00                	add    BYTE PTR [eax],al
    3cbe:	05 58 d0 01 00       	add    eax,0x1d058
    3cc3:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    3cc9:	9f                   	lahf   
    3cca:	05 04 a8 00 00       	add    eax,0xa804
    3ccf:	00 00                	add    BYTE PTR [eax],al
    3cd1:	fc                   	cld    
    3cd2:	01 00                	add    DWORD PTR [eax],eax
    3cd4:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3cd7:	9b                   	fwait
    3cd8:	10 00                	adc    BYTE PTR [eax],al
    3cda:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3cdd:	ac                   	lods   al,BYTE PTR ds:[esi]
    3cde:	00 00                	add    BYTE PTR [eax],al
    3ce0:	00 0c c9             	add    BYTE PTR [ecx+ecx*8],cl
    3ce3:	0c 00                	or     al,0x0
    3ce5:	00 1e                	add    BYTE PTR [esi],bl
    3ce7:	00 00                	add    BYTE PTR [eax],al
    3ce9:	00 a4 31 00 9f c7 00 	add    BYTE PTR [ecx+esi*1+0xc79f00],ah
    3cf0:	00 00                	add    BYTE PTR [eax],al
    3cf2:	f7 15 00 00 02 01    	not    DWORD PTR ds:0x1020000
    3cf8:	06                   	push   es
    3cf9:	8c 00                	mov    WORD PTR [eax],es
    3cfb:	00 00                	add    BYTE PTR [eax],al
    3cfd:	02 01                	add    al,BYTE PTR [ecx]
    3cff:	06                   	push   es
    3d00:	85 00                	test   DWORD PTR [eax],eax
    3d02:	00 00                	add    BYTE PTR [eax],al
    3d04:	02 02                	add    al,BYTE PTR [edx]
    3d06:	05 72 01 00 00       	add    eax,0x172
    3d0b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3d12:	02 08                	add    cl,BYTE PTR [eax]
    3d14:	05 00 00 00 00       	add    eax,0x0
    3d19:	02 01                	add    al,BYTE PTR [ecx]
    3d1b:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3d21:	02 07                	add    al,BYTE PTR [edi]
    3d23:	19 01                	sbb    DWORD PTR [ecx],eax
    3d25:	00 00                	add    BYTE PTR [eax],al
    3d27:	04 0e                	add    al,0xe
    3d29:	00 00                	add    BYTE PTR [eax],al
    3d2b:	00 02                	add    BYTE PTR [edx],al
    3d2d:	34 61                	xor    al,0x61
    3d2f:	00 00                	add    BYTE PTR [eax],al
    3d31:	00 02                	add    BYTE PTR [edx],al
    3d33:	04 07                	add    al,0x7
    3d35:	61                   	popa   
    3d36:	00 00                	add    BYTE PTR [eax],al
    3d38:	00 02                	add    BYTE PTR [edx],al
    3d3a:	08 07                	or     BYTE PTR [edi],al
    3d3c:	57                   	push   edi
    3d3d:	00 00                	add    BYTE PTR [eax],al
    3d3f:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3d46:	56                   	push   esi
    3d47:	61                   	popa   
    3d48:	00 00                	add    BYTE PTR [eax],al
    3d4a:	00 02                	add    BYTE PTR [edx],al
    3d4c:	04 05                	add    al,0x5
    3d4e:	05 00 00 00 02       	add    eax,0x2000000
    3d53:	0c 04                	or     al,0x4
    3d55:	66 01 00             	add    WORD PTR [eax],ax
    3d58:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    3d5e:	00 06                	add    BYTE PTR [esi],al
    3d60:	25 00 00 00 02       	and    eax,0x2000000
    3d65:	01 02                	add    DWORD PTR [edx],eax
    3d67:	13 01                	adc    eax,DWORD PTR [ecx]
    3d69:	00 00                	add    BYTE PTR [eax],al
    3d6b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3d6e:	83 01 00             	add    DWORD PTR [ecx],0x0
    3d71:	00 02                	add    BYTE PTR [edx],al
    3d73:	04 07                	add    al,0x7
    3d75:	5c                   	pop    esp
    3d76:	00 00                	add    BYTE PTR [eax],al
    3d78:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3d7e:	00 07                	add    BYTE PTR [edi],al
    3d80:	c2 0c 00             	ret    0xc
    3d83:	00 01                	add    BYTE PTR [ecx],al
    3d85:	04 a8                	add    al,0xa8
    3d87:	00 00                	add    BYTE PTR [eax],al
    3d89:	00 a4 31 00 9f 40 00 	add    BYTE PTR [ecx+esi*1+0x409f00],ah
    3d90:	00 00                	add    BYTE PTR [eax],al
    3d92:	01 9c ee 00 00 00 08 	add    DWORD PTR [esi+ebp*8+0x8000000],ebx
    3d99:	73 31                	jae    3dcc <sysEnter_Vector-0x12c234>
    3d9b:	00 01                	add    BYTE PTR [ecx],al
    3d9d:	04 a8                	add    al,0xa8
    3d9f:	00 00                	add    BYTE PTR [eax],al
    3da1:	00 02                	add    BYTE PTR [edx],al
    3da3:	91                   	xchg   ecx,eax
    3da4:	00 08                	add    BYTE PTR [eax],cl
    3da6:	73 32                	jae    3dda <sysEnter_Vector-0x12c226>
    3da8:	00 01                	add    BYTE PTR [ecx],al
    3daa:	04 88                	add    al,0x88
    3dac:	00 00                	add    BYTE PTR [eax],al
    3dae:	00 02                	add    BYTE PTR [edx],al
    3db0:	91                   	xchg   ecx,eax
    3db1:	04 09                	add    al,0x9
    3db3:	73 00                	jae    3db5 <sysEnter_Vector-0x12c24b>
    3db5:	01 06                	add    DWORD PTR [esi],eax
    3db7:	a8 00                	test   al,0x0
    3db9:	00 00                	add    BYTE PTR [eax],al
    3dbb:	02 91 74 00 07 de    	add    dl,BYTE PTR [ecx-0x21f8ff8c]
    3dc1:	0c 00                	or     al,0x0
    3dc3:	00 01                	add    BYTE PTR [ecx],al
    3dc5:	0e                   	push   cs
    3dc6:	a8 00                	test   al,0x0
    3dc8:	00 00                	add    BYTE PTR [eax],al
    3dca:	e4 31                	in     al,0x31
    3dcc:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    3dd2:	01 9c 2e 01 00 00 08 	add    DWORD PTR [esi+ebp*1+0x8000001],ebx
    3dd9:	73 31                	jae    3e0c <sysEnter_Vector-0x12c1f4>
    3ddb:	00 01                	add    BYTE PTR [ecx],al
    3ddd:	0e                   	push   cs
    3dde:	a8 00                	test   al,0x0
    3de0:	00 00                	add    BYTE PTR [eax],al
    3de2:	02 91 00 08 73 32    	add    dl,BYTE PTR [ecx+0x32730800]
    3de8:	00 01                	add    BYTE PTR [ecx],al
    3dea:	0e                   	push   cs
    3deb:	88 00                	mov    BYTE PTR [eax],al
    3ded:	00 00                	add    BYTE PTR [eax],al
    3def:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    3df5:	01 10                	add    DWORD PTR [eax],edx
    3df7:	a8 00                	test   al,0x0
    3df9:	00 00                	add    BYTE PTR [eax],al
    3dfb:	02 91 74 00 07 ba    	add    dl,BYTE PTR [ecx-0x45f8ff8c]
    3e01:	0c 00                	or     al,0x0
    3e03:	00 01                	add    BYTE PTR [ecx],al
    3e05:	18 a8 00 00 00 24    	sbb    BYTE PTR [eax+0x24000000],ch
    3e0b:	32 00                	xor    al,BYTE PTR [eax]
    3e0d:	9f                   	lahf   
    3e0e:	47                   	inc    edi
    3e0f:	00 00                	add    BYTE PTR [eax],al
    3e11:	00 01                	add    BYTE PTR [ecx],al
    3e13:	9c                   	pushf  
    3e14:	7c 01                	jl     3e17 <sysEnter_Vector-0x12c1e9>
    3e16:	00 00                	add    BYTE PTR [eax],al
    3e18:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    3e1b:	00 01                	add    BYTE PTR [ecx],al
    3e1d:	18 a8 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],ch
    3e23:	91                   	xchg   ecx,eax
    3e24:	00 08                	add    BYTE PTR [eax],cl
    3e26:	73 32                	jae    3e5a <sysEnter_Vector-0x12c1a6>
    3e28:	00 01                	add    BYTE PTR [ecx],al
    3e2a:	18 88 00 00 00 02    	sbb    BYTE PTR [eax+0x2000000],cl
    3e30:	91                   	xchg   ecx,eax
    3e31:	04 0a                	add    al,0xa
    3e33:	b4 0c                	mov    ah,0xc
    3e35:	00 00                	add    BYTE PTR [eax],al
    3e37:	01 18                	add    DWORD PTR [eax],ebx
    3e39:	61                   	popa   
    3e3a:	00 00                	add    BYTE PTR [eax],al
    3e3c:	00 02                	add    BYTE PTR [edx],al
    3e3e:	91                   	xchg   ecx,eax
    3e3f:	08 09                	or     BYTE PTR [ecx],cl
    3e41:	73 00                	jae    3e43 <sysEnter_Vector-0x12c1bd>
    3e43:	01 1a                	add    DWORD PTR [edx],ebx
    3e45:	a8 00                	test   al,0x0
    3e47:	00 00                	add    BYTE PTR [eax],al
    3e49:	02 91 74 00 0b a3    	add    dl,BYTE PTR [ecx-0x5cf4ff8c]
    3e4f:	00 00                	add    BYTE PTR [eax],al
    3e51:	00 03                	add    BYTE PTR [ebx],al
    3e53:	37                   	aaa    
    3e54:	56                   	push   esi
    3e55:	00 00                	add    BYTE PTR [eax],al
    3e57:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    3e5d:	9f                   	lahf   
    3e5e:	0b 34 01             	or     esi,DWORD PTR [ecx+eax*1]
    3e61:	00 00                	add    BYTE PTR [eax],al
    3e63:	03 38                	add    edi,DWORD PTR [eax]
    3e65:	56                   	push   esi
    3e66:	00 00                	add    BYTE PTR [eax],al
    3e68:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    3e6e:	9f                   	lahf   
    3e6f:	0b 7b 00             	or     edi,DWORD PTR [ebx+0x0]
    3e72:	00 00                	add    BYTE PTR [eax],al
    3e74:	03 39                	add    edi,DWORD PTR [ecx]
    3e76:	56                   	push   esi
    3e77:	00 00                	add    BYTE PTR [eax],al
    3e79:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    3e7f:	9f                   	lahf   
    3e80:	0b 7c 01 00          	or     edi,DWORD PTR [ecx+eax*1+0x0]
    3e84:	00 03                	add    BYTE PTR [ebx],al
    3e86:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    3e89:	00 00                	add    BYTE PTR [eax],al
    3e8b:	05 03 78 71 00       	add    eax,0x717803
    3e90:	9f                   	lahf   
    3e91:	0b 6e 00             	or     ebp,DWORD PTR [esi+0x0]
    3e94:	00 00                	add    BYTE PTR [eax],al
    3e96:	04 34                	add    al,0x34
    3e98:	d1 01                	rol    DWORD PTR [ecx],1
    3e9a:	00 00                	add    BYTE PTR [eax],al
    3e9c:	05 03 64 71 00       	add    eax,0x716403
    3ea1:	9f                   	lahf   
    3ea2:	05 04 6f 00 00       	add    eax,0x6f04
    3ea7:	00 0b                	add    BYTE PTR [ebx],cl
    3ea9:	91                   	xchg   ecx,eax
    3eaa:	00 00                	add    BYTE PTR [eax],al
    3eac:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    3eb3:	05 03 60 71 00       	add    eax,0x716003
    3eb8:	9f                   	lahf   
    3eb9:	0b 41 00             	or     eax,DWORD PTR [ecx+0x0]
    3ebc:	00 00                	add    BYTE PTR [eax],al
    3ebe:	05 58 f9 01 00       	add    eax,0x1f958
    3ec3:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    3ec9:	9f                   	lahf   
    3eca:	05 04 a8 00 00       	add    eax,0xa804
    3ecf:	00 00                	add    BYTE PTR [eax],al
    3ed1:	7f 01                	jg     3ed4 <sysEnter_Vector-0x12c12c>
    3ed3:	00 00                	add    BYTE PTR [eax],al
    3ed5:	04 00                	add    al,0x0
    3ed7:	3c 11                	cmp    al,0x11
    3ed9:	00 00                	add    BYTE PTR [eax],al
    3edb:	04 01                	add    al,0x1
    3edd:	ac                   	lods   al,BYTE PTR ds:[esi]
    3ede:	00 00                	add    BYTE PTR [eax],al
    3ee0:	00 0c ef             	add    BYTE PTR [edi+ebp*8],cl
    3ee3:	0c 00                	or     al,0x0
    3ee5:	00 1e                	add    BYTE PTR [esi],bl
    3ee7:	00 00                	add    BYTE PTR [eax],al
    3ee9:	00 6c 32 00          	add    BYTE PTR [edx+esi*1+0x0],ch
    3eed:	9f                   	lahf   
    3eee:	89 00                	mov    DWORD PTR [eax],eax
    3ef0:	00 00                	add    BYTE PTR [eax],al
    3ef2:	e1 16                	loope  3f0a <sysEnter_Vector-0x12c0f6>
    3ef4:	00 00                	add    BYTE PTR [eax],al
    3ef6:	02 01                	add    al,BYTE PTR [ecx]
    3ef8:	06                   	push   es
    3ef9:	8c 00                	mov    WORD PTR [eax],es
    3efb:	00 00                	add    BYTE PTR [eax],al
    3efd:	02 01                	add    al,BYTE PTR [ecx]
    3eff:	06                   	push   es
    3f00:	85 00                	test   DWORD PTR [eax],eax
    3f02:	00 00                	add    BYTE PTR [eax],al
    3f04:	02 02                	add    al,BYTE PTR [edx]
    3f06:	05 72 01 00 00       	add    eax,0x172
    3f0b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3f12:	02 08                	add    cl,BYTE PTR [eax]
    3f14:	05 00 00 00 00       	add    eax,0x0
    3f19:	02 01                	add    al,BYTE PTR [ecx]
    3f1b:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    3f21:	02 07                	add    al,BYTE PTR [edi]
    3f23:	19 01                	sbb    DWORD PTR [ecx],eax
    3f25:	00 00                	add    BYTE PTR [eax],al
    3f27:	04 0e                	add    al,0xe
    3f29:	00 00                	add    BYTE PTR [eax],al
    3f2b:	00 02                	add    BYTE PTR [edx],al
    3f2d:	34 61                	xor    al,0x61
    3f2f:	00 00                	add    BYTE PTR [eax],al
    3f31:	00 02                	add    BYTE PTR [edx],al
    3f33:	04 07                	add    al,0x7
    3f35:	61                   	popa   
    3f36:	00 00                	add    BYTE PTR [eax],al
    3f38:	00 02                	add    BYTE PTR [edx],al
    3f3a:	08 07                	or     BYTE PTR [edi],al
    3f3c:	57                   	push   edi
    3f3d:	00 00                	add    BYTE PTR [eax],al
    3f3f:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    3f46:	56                   	push   esi
    3f47:	61                   	popa   
    3f48:	00 00                	add    BYTE PTR [eax],al
    3f4a:	00 02                	add    BYTE PTR [edx],al
    3f4c:	04 05                	add    al,0x5
    3f4e:	05 00 00 00 02       	add    eax,0x2000000
    3f53:	0c 04                	or     al,0x4
    3f55:	66 01 00             	add    WORD PTR [eax],ax
    3f58:	00 02                	add    BYTE PTR [edx],al
    3f5a:	01 02                	add    DWORD PTR [edx],eax
    3f5c:	13 01                	adc    eax,DWORD PTR [ecx]
    3f5e:	00 00                	add    BYTE PTR [eax],al
    3f60:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3f63:	83 01 00             	add    DWORD PTR [ecx],0x0
    3f66:	00 02                	add    BYTE PTR [edx],al
    3f68:	04 07                	add    al,0x7
    3f6a:	5c                   	pop    esp
    3f6b:	00 00                	add    BYTE PTR [eax],al
    3f6d:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    3f73:	00 06                	add    BYTE PTR [esi],al
    3f75:	06                   	push   es
    3f76:	0d 00 00 01 09       	or     eax,0x9010000
    3f7b:	88 00                	mov    BYTE PTR [eax],al
    3f7d:	00 00                	add    BYTE PTR [eax],al
    3f7f:	6c                   	ins    BYTE PTR es:[edi],dx
    3f80:	32 00                	xor    al,BYTE PTR [eax]
    3f82:	9f                   	lahf   
    3f83:	30 00                	xor    BYTE PTR [eax],al
    3f85:	00 00                	add    BYTE PTR [eax],al
    3f87:	01 9c c9 00 00 00 07 	add    DWORD PTR [ecx+ecx*8+0x7000000],ebx
    3f8e:	63 00                	arpl   WORD PTR [eax],ax
    3f90:	01 09                	add    DWORD PTR [ecx],ecx
    3f92:	25 00 00 00 02       	and    eax,0x2000000
    3f97:	91                   	xchg   ecx,eax
    3f98:	74 00                	je     3f9a <sysEnter_Vector-0x12c066>
    3f9a:	08 e6                	or     dh,ah
    3f9c:	0c 00                	or     al,0x0
    3f9e:	00 01                	add    BYTE PTR [ecx],al
    3fa0:	0e                   	push   cs
    3fa1:	88 00                	mov    BYTE PTR [eax],al
    3fa3:	00 00                	add    BYTE PTR [eax],al
    3fa5:	9c                   	pushf  
    3fa6:	32 00                	xor    al,BYTE PTR [eax]
    3fa8:	9f                   	lahf   
    3fa9:	59                   	pop    ecx
    3faa:	00 00                	add    BYTE PTR [eax],al
    3fac:	00 01                	add    BYTE PTR [ecx],al
    3fae:	9c                   	pushf  
    3faf:	ff 00                	inc    DWORD PTR [eax]
    3fb1:	00 00                	add    BYTE PTR [eax],al
    3fb3:	07                   	pop    es
    3fb4:	73 74                	jae    402a <sysEnter_Vector-0x12bfd6>
    3fb6:	72 00                	jb     3fb8 <sysEnter_Vector-0x12c048>
    3fb8:	01 0e                	add    DWORD PTR [esi],ecx
    3fba:	9d                   	popf   
    3fbb:	00 00                	add    BYTE PTR [eax],al
    3fbd:	00 02                	add    BYTE PTR [edx],al
    3fbf:	91                   	xchg   ecx,eax
    3fc0:	00 09                	add    BYTE PTR [ecx],cl
    3fc2:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    3fc5:	00 01                	add    BYTE PTR [ecx],al
    3fc7:	10 3a                	adc    BYTE PTR [edx],bh
    3fc9:	00 00                	add    BYTE PTR [eax],al
    3fcb:	00 02                	add    BYTE PTR [edx],al
    3fcd:	91                   	xchg   ecx,eax
    3fce:	74 00                	je     3fd0 <sysEnter_Vector-0x12c030>
    3fd0:	0a a3 00 00 00 03    	or     ah,BYTE PTR [ebx+0x3000000]
    3fd6:	37                   	aaa    
    3fd7:	56                   	push   esi
    3fd8:	00 00                	add    BYTE PTR [eax],al
    3fda:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    3fe0:	9f                   	lahf   
    3fe1:	0a 34 01             	or     dh,BYTE PTR [ecx+eax*1]
    3fe4:	00 00                	add    BYTE PTR [eax],al
    3fe6:	03 38                	add    edi,DWORD PTR [eax]
    3fe8:	56                   	push   esi
    3fe9:	00 00                	add    BYTE PTR [eax],al
    3feb:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    3ff1:	9f                   	lahf   
    3ff2:	0a 7b 00             	or     bh,BYTE PTR [ebx+0x0]
    3ff5:	00 00                	add    BYTE PTR [eax],al
    3ff7:	03 39                	add    edi,DWORD PTR [ecx]
    3ff9:	56                   	push   esi
    3ffa:	00 00                	add    BYTE PTR [eax],al
    3ffc:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    4002:	9f                   	lahf   
    4003:	0a 7c 01 00          	or     bh,BYTE PTR [ecx+eax*1+0x0]
    4007:	00 03                	add    BYTE PTR [ebx],al
    4009:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    400c:	00 00                	add    BYTE PTR [eax],al
    400e:	05 03 78 71 00       	add    eax,0x717803
    4013:	9f                   	lahf   
    4014:	0a 6e 00             	or     ch,BYTE PTR [esi+0x0]
    4017:	00 00                	add    BYTE PTR [eax],al
    4019:	04 34                	add    al,0x34
    401b:	54                   	push   esp
    401c:	01 00                	add    DWORD PTR [eax],eax
    401e:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    4024:	9f                   	lahf   
    4025:	05 04 6f 00 00       	add    eax,0x6f04
    402a:	00 0a                	add    BYTE PTR [edx],cl
    402c:	91                   	xchg   ecx,eax
    402d:	00 00                	add    BYTE PTR [eax],al
    402f:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4036:	05 03 60 71 00       	add    eax,0x716003
    403b:	9f                   	lahf   
    403c:	0a 41 00             	or     al,BYTE PTR [ecx+0x0]
    403f:	00 00                	add    BYTE PTR [eax],al
    4041:	05 58 7c 01 00       	add    eax,0x17c58
    4046:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    404c:	9f                   	lahf   
    404d:	05 04 9d 00 00       	add    eax,0x9d04
    4052:	00 00                	add    BYTE PTR [eax],al
    4054:	11 02                	adc    DWORD PTR [edx],eax
    4056:	00 00                	add    BYTE PTR [eax],al
    4058:	04 00                	add    al,0x0
    405a:	e3 11                	jecxz  406d <sysEnter_Vector-0x12bf93>
    405c:	00 00                	add    BYTE PTR [eax],al
    405e:	04 01                	add    al,0x1
    4060:	ac                   	lods   al,BYTE PTR ds:[esi]
    4061:	00 00                	add    BYTE PTR [eax],al
    4063:	00 0c 32             	add    BYTE PTR [edx+esi*1],cl
    4066:	0d 00 00 1e 00       	or     eax,0x1e0000
    406b:	00 00                	add    BYTE PTR [eax],al
    406d:	f8                   	clc    
    406e:	32 00                	xor    al,BYTE PTR [eax]
    4070:	9f                   	lahf   
    4071:	a2 00 00 00 ba       	mov    ds:0xba000000,al
    4076:	17                   	pop    ss
    4077:	00 00                	add    BYTE PTR [eax],al
    4079:	02 01                	add    al,BYTE PTR [ecx]
    407b:	06                   	push   es
    407c:	8c 00                	mov    WORD PTR [eax],es
    407e:	00 00                	add    BYTE PTR [eax],al
    4080:	02 01                	add    al,BYTE PTR [ecx]
    4082:	06                   	push   es
    4083:	85 00                	test   DWORD PTR [eax],eax
    4085:	00 00                	add    BYTE PTR [eax],al
    4087:	02 02                	add    al,BYTE PTR [edx]
    4089:	05 72 01 00 00       	add    eax,0x172
    408e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4095:	02 08                	add    cl,BYTE PTR [eax]
    4097:	05 00 00 00 00       	add    eax,0x0
    409c:	02 01                	add    al,BYTE PTR [ecx]
    409e:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    40a4:	02 07                	add    al,BYTE PTR [edi]
    40a6:	19 01                	sbb    DWORD PTR [ecx],eax
    40a8:	00 00                	add    BYTE PTR [eax],al
    40aa:	04 0e                	add    al,0xe
    40ac:	00 00                	add    BYTE PTR [eax],al
    40ae:	00 02                	add    BYTE PTR [edx],al
    40b0:	34 61                	xor    al,0x61
    40b2:	00 00                	add    BYTE PTR [eax],al
    40b4:	00 02                	add    BYTE PTR [edx],al
    40b6:	04 07                	add    al,0x7
    40b8:	61                   	popa   
    40b9:	00 00                	add    BYTE PTR [eax],al
    40bb:	00 02                	add    BYTE PTR [edx],al
    40bd:	08 07                	or     BYTE PTR [edi],al
    40bf:	57                   	push   edi
    40c0:	00 00                	add    BYTE PTR [eax],al
    40c2:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    40c9:	56                   	push   esi
    40ca:	61                   	popa   
    40cb:	00 00                	add    BYTE PTR [eax],al
    40cd:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    40d4:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    40d7:	00 00                	add    BYTE PTR [eax],al
    40d9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    40e0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    40e3:	66 01 00             	add    WORD PTR [eax],ax
    40e6:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    40ec:	00 06                	add    BYTE PTR [esi],al
    40ee:	25 00 00 00 02       	and    eax,0x2000000
    40f3:	01 02                	add    DWORD PTR [edx],eax
    40f5:	13 01                	adc    eax,DWORD PTR [ecx]
    40f7:	00 00                	add    BYTE PTR [eax],al
    40f9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    40fc:	83 01 00             	add    DWORD PTR [ecx],0x0
    40ff:	00 02                	add    BYTE PTR [edx],al
    4101:	04 07                	add    al,0x7
    4103:	5c                   	pop    esp
    4104:	00 00                	add    BYTE PTR [eax],al
    4106:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    410c:	00 07                	add    BYTE PTR [edi],al
    410e:	12 0d 00 00 01 04    	adc    cl,BYTE PTR ds:0x4010000
    4114:	7a 00                	jp     4116 <sysEnter_Vector-0x12beea>
    4116:	00 00                	add    BYTE PTR [eax],al
    4118:	f8                   	clc    
    4119:	32 00                	xor    al,BYTE PTR [eax]
    411b:	9f                   	lahf   
    411c:	31 00                	xor    DWORD PTR [eax],eax
    411e:	00 00                	add    BYTE PTR [eax],al
    4120:	01 9c ef 00 00 00 08 	add    DWORD PTR [edi+ebp*8+0x8000000],ebx
    4127:	73 74                	jae    419d <sysEnter_Vector-0x12be63>
    4129:	72 00                	jb     412b <sysEnter_Vector-0x12bed5>
    412b:	01 04 93             	add    DWORD PTR [ebx+edx*4],eax
    412e:	00 00                	add    BYTE PTR [eax],al
    4130:	00 02                	add    BYTE PTR [edx],al
    4132:	91                   	xchg   ecx,eax
    4133:	00 09                	add    BYTE PTR [ecx],cl
    4135:	72 65                	jb     419c <sysEnter_Vector-0x12be64>
    4137:	74 00                	je     4139 <sysEnter_Vector-0x12bec7>
    4139:	01 05 7a 00 00 00    	add    DWORD PTR ds:0x7a,eax
    413f:	02 91 74 00 0a 1a    	add    dl,BYTE PTR [ecx+0x1a0a0074]
    4145:	0d 00 00 01 0b       	or     eax,0xb010000
    414a:	7a 00                	jp     414c <sysEnter_Vector-0x12beb4>
    414c:	00 00                	add    BYTE PTR [eax],al
    414e:	29 33                	sub    DWORD PTR [ebx],esi
    4150:	00 9f 1a 00 00 00    	add    BYTE PTR [edi+0x1a],bl
    4156:	01 9c 17 01 00 00 08 	add    DWORD PTR [edi+edx*1+0x8000001],ebx
    415d:	73 74                	jae    41d3 <sysEnter_Vector-0x12be2d>
    415f:	72 00                	jb     4161 <sysEnter_Vector-0x12be9f>
    4161:	01 0b                	add    DWORD PTR [ebx],ecx
    4163:	93                   	xchg   ebx,eax
    4164:	00 00                	add    BYTE PTR [eax],al
    4166:	00 02                	add    BYTE PTR [edx],al
    4168:	91                   	xchg   ecx,eax
    4169:	00 00                	add    BYTE PTR [eax],al
    416b:	07                   	pop    es
    416c:	21 0d 00 00 01 10    	and    DWORD PTR ds:0x10010000,ecx
    4172:	7a 00                	jp     4174 <sysEnter_Vector-0x12be8c>
    4174:	00 00                	add    BYTE PTR [eax],al
    4176:	43                   	inc    ebx
    4177:	33 00                	xor    eax,DWORD PTR [eax]
    4179:	9f                   	lahf   
    417a:	39 00                	cmp    DWORD PTR [eax],eax
    417c:	00 00                	add    BYTE PTR [eax],al
    417e:	01 9c 5b 01 00 00 08 	add    DWORD PTR [ebx+ebx*2+0x8000001],ebx
    4185:	73 74                	jae    41fb <sysEnter_Vector-0x12be05>
    4187:	72 00                	jb     4189 <sysEnter_Vector-0x12be77>
    4189:	01 10                	add    DWORD PTR [eax],edx
    418b:	93                   	xchg   ebx,eax
    418c:	00 00                	add    BYTE PTR [eax],al
    418e:	00 02                	add    BYTE PTR [edx],al
    4190:	91                   	xchg   ecx,eax
    4191:	00 0b                	add    BYTE PTR [ebx],cl
    4193:	2f                   	das    
    4194:	07                   	pop    es
    4195:	00 00                	add    BYTE PTR [eax],al
    4197:	01 10                	add    DWORD PTR [eax],edx
    4199:	7a 00                	jp     419b <sysEnter_Vector-0x12be65>
    419b:	00 00                	add    BYTE PTR [eax],al
    419d:	02 91 04 09 72 65    	add    dl,BYTE PTR [ecx+0x65720904]
    41a3:	74 00                	je     41a5 <sysEnter_Vector-0x12be5b>
    41a5:	01 12                	add    DWORD PTR [edx],edx
    41a7:	7a 00                	jp     41a9 <sysEnter_Vector-0x12be57>
    41a9:	00 00                	add    BYTE PTR [eax],al
    41ab:	02 91 74 00 0a 2a    	add    dl,BYTE PTR [ecx+0x2a0a0074]
    41b1:	0d 00 00 01 18       	or     eax,0x18010000
    41b6:	7a 00                	jp     41b8 <sysEnter_Vector-0x12be48>
    41b8:	00 00                	add    BYTE PTR [eax],al
    41ba:	7c 33                	jl     41ef <sysEnter_Vector-0x12be11>
    41bc:	00 9f 1e 00 00 00    	add    BYTE PTR [edi+0x1e],bl
    41c2:	01 9c 91 01 00 00 08 	add    DWORD PTR [ecx+edx*4+0x8000001],ebx
    41c9:	73 74                	jae    423f <sysEnter_Vector-0x12bdc1>
    41cb:	72 00                	jb     41cd <sysEnter_Vector-0x12be33>
    41cd:	01 18                	add    DWORD PTR [eax],ebx
    41cf:	93                   	xchg   ebx,eax
    41d0:	00 00                	add    BYTE PTR [eax],al
    41d2:	00 02                	add    BYTE PTR [edx],al
    41d4:	91                   	xchg   ecx,eax
    41d5:	00 0b                	add    BYTE PTR [ebx],cl
    41d7:	2f                   	das    
    41d8:	07                   	pop    es
    41d9:	00 00                	add    BYTE PTR [eax],al
    41db:	01 18                	add    DWORD PTR [eax],ebx
    41dd:	3a 00                	cmp    al,BYTE PTR [eax]
    41df:	00 00                	add    BYTE PTR [eax],al
    41e1:	02 91 04 00 0c a3    	add    dl,BYTE PTR [ecx-0x5cf3fffc]
    41e7:	00 00                	add    BYTE PTR [eax],al
    41e9:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    41ec:	56                   	push   esi
    41ed:	00 00                	add    BYTE PTR [eax],al
    41ef:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    41f5:	9f                   	lahf   
    41f6:	0c 34                	or     al,0x34
    41f8:	01 00                	add    DWORD PTR [eax],eax
    41fa:	00 04 38             	add    BYTE PTR [eax+edi*1],al
    41fd:	56                   	push   esi
    41fe:	00 00                	add    BYTE PTR [eax],al
    4200:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    4206:	9f                   	lahf   
    4207:	0c 7b                	or     al,0x7b
    4209:	00 00                	add    BYTE PTR [eax],al
    420b:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    420e:	56                   	push   esi
    420f:	00 00                	add    BYTE PTR [eax],al
    4211:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    4217:	9f                   	lahf   
    4218:	0c 7c                	or     al,0x7c
    421a:	01 00                	add    DWORD PTR [eax],eax
    421c:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    421f:	85 00                	test   DWORD PTR [eax],eax
    4221:	00 00                	add    BYTE PTR [eax],al
    4223:	05 03 78 71 00       	add    eax,0x717803
    4228:	9f                   	lahf   
    4229:	0c 6e                	or     al,0x6e
    422b:	00 00                	add    BYTE PTR [eax],al
    422d:	00 05 34 e6 01 00    	add    BYTE PTR ds:0x1e634,al
    4233:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    4239:	9f                   	lahf   
    423a:	05 04 6f 00 00       	add    eax,0x6f04
    423f:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    4242:	00 00                	add    BYTE PTR [eax],al
    4244:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    424a:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    4250:	9f                   	lahf   
    4251:	0c 41                	or     al,0x41
    4253:	00 00                	add    BYTE PTR [eax],al
    4255:	00 06                	add    BYTE PTR [esi],al
    4257:	58                   	pop    eax
    4258:	0e                   	push   cs
    4259:	02 00                	add    al,BYTE PTR [eax]
    425b:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    4261:	9f                   	lahf   
    4262:	05 04 b3 00 00       	add    eax,0xb304
    4267:	00 00                	add    BYTE PTR [eax],al
    4269:	de 00                	fiadd  WORD PTR [eax]
    426b:	00 00                	add    BYTE PTR [eax],al
    426d:	04 00                	add    al,0x0
    426f:	a0 12 00 00 04       	mov    al,ds:0x4000012
    4274:	01 ac 00 00 00 0c 58 	add    DWORD PTR [eax+eax*1+0x580c0000],ebp
    427b:	0d 00 00 1e 00       	or     eax,0x1e0000
    4280:	00 00                	add    BYTE PTR [eax],al
    4282:	9c                   	pushf  
    4283:	33 00                	xor    eax,DWORD PTR [eax]
    4285:	9f                   	lahf   
    4286:	ce                   	into   
    4287:	00 00                	add    BYTE PTR [eax],al
    4289:	00 9d 18 00 00 02    	add    BYTE PTR [ebp+0x2000018],bl
    428f:	04 05                	add    al,0x5
    4291:	69 6e 74 00 03 bd 02 	imul   ebp,DWORD PTR [esi+0x74],0x2bd0300
    4298:	00 00                	add    BYTE PTR [eax],al
    429a:	02 d8                	add    bl,al
    429c:	37                   	aaa    
    429d:	00 00                	add    BYTE PTR [eax],al
    429f:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    42a2:	07                   	pop    es
    42a3:	61                   	popa   
    42a4:	00 00                	add    BYTE PTR [eax],al
    42a6:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    42a9:	05 05 00 00 00       	add    eax,0x5
    42ae:	04 08                	add    al,0x8
    42b0:	05 00 00 00 00       	add    eax,0x0
    42b5:	04 0c                	add    al,0xc
    42b7:	04 66                	add    al,0x66
    42b9:	01 00                	add    DWORD PTR [eax],eax
    42bb:	00 05 50 0d 00 00    	add    BYTE PTR ds:0xd50,al
    42c1:	01 0c 25 00 00 00 9c 	add    DWORD PTR [eiz*1-0x64000000],ecx
    42c8:	33 00                	xor    eax,DWORD PTR [eax]
    42ca:	9f                   	lahf   
    42cb:	67 00 00             	add    BYTE PTR [bx+si],al
    42ce:	00 01                	add    BYTE PTR [ecx],al
    42d0:	9c                   	pushf  
    42d1:	93                   	xchg   ebx,eax
    42d2:	00 00                	add    BYTE PTR [eax],al
    42d4:	00 06                	add    BYTE PTR [esi],al
    42d6:	73 31                	jae    4309 <sysEnter_Vector-0x12bcf7>
    42d8:	00 01                	add    BYTE PTR [ecx],al
    42da:	0c 93                	or     al,0x93
    42dc:	00 00                	add    BYTE PTR [eax],al
    42de:	00 02                	add    BYTE PTR [edx],al
    42e0:	91                   	xchg   ecx,eax
    42e1:	00 06                	add    BYTE PTR [esi],al
    42e3:	73 32                	jae    4317 <sysEnter_Vector-0x12bce9>
    42e5:	00 01                	add    BYTE PTR [ecx],al
    42e7:	0c 93                	or     al,0x93
    42e9:	00 00                	add    BYTE PTR [eax],al
    42eb:	00 02                	add    BYTE PTR [edx],al
    42ed:	91                   	xchg   ecx,eax
    42ee:	04 06                	add    al,0x6
    42f0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    42f1:	00 01                	add    BYTE PTR [ecx],al
    42f3:	0c 2c                	or     al,0x2c
    42f5:	00 00                	add    BYTE PTR [eax],al
    42f7:	00 02                	add    BYTE PTR [edx],al
    42f9:	91                   	xchg   ecx,eax
    42fa:	08 00                	or     BYTE PTR [eax],al
    42fc:	07                   	pop    es
    42fd:	04 a0                	add    al,0xa0
    42ff:	00 00                	add    BYTE PTR [eax],al
    4301:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4304:	06                   	push   es
    4305:	8c 00                	mov    WORD PTR [eax],es
    4307:	00 00                	add    BYTE PTR [eax],al
    4309:	08 99 00 00 00 09    	or     BYTE PTR [ecx+0x9000000],bl
    430f:	47                   	inc    edi
    4310:	0d 00 00 01 16       	or     eax,0x16010000
    4315:	25 00 00 00 03       	and    eax,0x3000000
    431a:	34 00                	xor    al,0x0
    431c:	9f                   	lahf   
    431d:	67 00 00             	add    BYTE PTR [bx+si],al
    4320:	00 01                	add    BYTE PTR [ecx],al
    4322:	9c                   	pushf  
    4323:	06                   	push   es
    4324:	73 31                	jae    4357 <sysEnter_Vector-0x12bca9>
    4326:	00 01                	add    BYTE PTR [ecx],al
    4328:	16                   	push   ss
    4329:	93                   	xchg   ebx,eax
    432a:	00 00                	add    BYTE PTR [eax],al
    432c:	00 02                	add    BYTE PTR [edx],al
    432e:	91                   	xchg   ecx,eax
    432f:	00 06                	add    BYTE PTR [esi],al
    4331:	73 32                	jae    4365 <sysEnter_Vector-0x12bc9b>
    4333:	00 01                	add    BYTE PTR [ecx],al
    4335:	16                   	push   ss
    4336:	93                   	xchg   ebx,eax
    4337:	00 00                	add    BYTE PTR [eax],al
    4339:	00 02                	add    BYTE PTR [edx],al
    433b:	91                   	xchg   ecx,eax
    433c:	04 06                	add    al,0x6
    433e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    433f:	00 01                	add    BYTE PTR [ecx],al
    4341:	16                   	push   ss
    4342:	2c 00                	sub    al,0x0
    4344:	00 00                	add    BYTE PTR [eax],al
    4346:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    434c:	00 00                	add    BYTE PTR [eax],al
    434e:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4351:	2c 13                	sub    al,0x13
    4353:	00 00                	add    BYTE PTR [eax],al
    4355:	04 01                	add    al,0x1
    4357:	ac                   	lods   al,BYTE PTR ds:[esi]
    4358:	00 00                	add    BYTE PTR [eax],al
    435a:	00 0c 6e             	add    BYTE PTR [esi+ebp*2],cl
    435d:	0d 00 00 1e 00       	or     eax,0x1e0000
    4362:	00 00                	add    BYTE PTR [eax],al
    4364:	6c                   	ins    BYTE PTR es:[edi],dx
    4365:	34 00                	xor    al,0x0
    4367:	9f                   	lahf   
    4368:	8c 00                	mov    WORD PTR [eax],es
    436a:	00 00                	add    BYTE PTR [eax],al
    436c:	62 19                	bound  ebx,QWORD PTR [ecx]
    436e:	00 00                	add    BYTE PTR [eax],al
    4370:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    4377:	03 bd 02 00 00 02    	add    edi,DWORD PTR [ebp+0x2000002]
    437d:	d8 37                	fdiv   DWORD PTR [edi]
    437f:	00 00                	add    BYTE PTR [eax],al
    4381:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4384:	07                   	pop    es
    4385:	61                   	popa   
    4386:	00 00                	add    BYTE PTR [eax],al
    4388:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    438b:	05 05 00 00 00       	add    eax,0x5
    4390:	04 08                	add    al,0x8
    4392:	05 00 00 00 00       	add    eax,0x0
    4397:	04 0c                	add    al,0xc
    4399:	04 66                	add    al,0x66
    439b:	01 00                	add    DWORD PTR [eax],eax
    439d:	00 05 84 0d 00 00    	add    BYTE PTR ds:0xd84,al
    43a3:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    43a9:	6c                   	ins    BYTE PTR es:[edi],dx
    43aa:	34 00                	xor    al,0x0
    43ac:	9f                   	lahf   
    43ad:	6c                   	ins    BYTE PTR es:[edi],dx
    43ae:	00 00                	add    BYTE PTR [eax],al
    43b0:	00 01                	add    BYTE PTR [ecx],al
    43b2:	9c                   	pushf  
    43b3:	9f                   	lahf   
    43b4:	00 00                	add    BYTE PTR [eax],al
    43b6:	00 06                	add    BYTE PTR [esi],al
    43b8:	73 31                	jae    43eb <sysEnter_Vector-0x12bc15>
    43ba:	00 01                	add    BYTE PTR [ecx],al
    43bc:	0d 9f 00 00 00       	or     eax,0x9f
    43c1:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    43c7:	00 01                	add    BYTE PTR [ecx],al
    43c9:	0d ac 00 00 00       	or     eax,0xac
    43ce:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    43d4:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    43da:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    43e0:	01 0f                	add    DWORD PTR [edi],ecx
    43e2:	9f                   	lahf   
    43e3:	00 00                	add    BYTE PTR [eax],al
    43e5:	00 02                	add    BYTE PTR [edx],al
    43e7:	91                   	xchg   ecx,eax
    43e8:	74 00                	je     43ea <sysEnter_Vector-0x12bc16>
    43ea:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    43f1:	01 06                	add    DWORD PTR [esi],eax
    43f3:	8c 00                	mov    WORD PTR [eax],es
    43f5:	00 00                	add    BYTE PTR [eax],al
    43f7:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    43fa:	00 00                	add    BYTE PTR [eax],al
    43fc:	00 09                	add    BYTE PTR [ecx],cl
    43fe:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    43ff:	00 00                	add    BYTE PTR [eax],al
    4401:	00 0a                	add    BYTE PTR [edx],cl
    4403:	8d 0d 00 00 01 1d    	lea    ecx,ds:0x1d010000
    4409:	9f                   	lahf   
    440a:	00 00                	add    BYTE PTR [eax],al
    440c:	00 d8                	add    al,bl
    440e:	34 00                	xor    al,0x0
    4410:	9f                   	lahf   
    4411:	20 00                	and    BYTE PTR [eax],al
    4413:	00 00                	add    BYTE PTR [eax],al
    4415:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    441c:	1d 9f 00 00 00       	sbb    eax,0x9f
    4421:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    4427:	00 01                	add    BYTE PTR [ecx],al
    4429:	1d ac 00 00 00       	sbb    eax,0xac
    442e:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    4434:	01 1d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebx
    443a:	02 91 08 00 00 c5    	add    dl,BYTE PTR [ecx-0x3afffff8]
    4440:	01 00                	add    DWORD PTR [eax],eax
    4442:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4445:	c7                   	(bad)  
    4446:	13 00                	adc    eax,DWORD PTR [eax]
    4448:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    444b:	ac                   	lods   al,BYTE PTR ds:[esi]
    444c:	00 00                	add    BYTE PTR [eax],al
    444e:	00 0c ab             	add    BYTE PTR [ebx+ebp*4],cl
    4451:	0d 00 00 1e 00       	or     eax,0x1e0000
    4456:	00 00                	add    BYTE PTR [eax],al
    4458:	f8                   	clc    
    4459:	34 00                	xor    al,0x0
    445b:	9f                   	lahf   
    445c:	7d 01                	jge    445f <sysEnter_Vector-0x12bba1>
    445e:	00 00                	add    BYTE PTR [eax],al
    4460:	09 1a                	or     DWORD PTR [edx],ebx
    4462:	00 00                	add    BYTE PTR [eax],al
    4464:	02 01                	add    al,BYTE PTR [ecx]
    4466:	06                   	push   es
    4467:	8c 00                	mov    WORD PTR [eax],es
    4469:	00 00                	add    BYTE PTR [eax],al
    446b:	02 01                	add    al,BYTE PTR [ecx]
    446d:	06                   	push   es
    446e:	85 00                	test   DWORD PTR [eax],eax
    4470:	00 00                	add    BYTE PTR [eax],al
    4472:	02 02                	add    al,BYTE PTR [edx]
    4474:	05 72 01 00 00       	add    eax,0x172
    4479:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4480:	02 08                	add    cl,BYTE PTR [eax]
    4482:	05 00 00 00 00       	add    eax,0x0
    4487:	02 01                	add    al,BYTE PTR [ecx]
    4489:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    448f:	02 07                	add    al,BYTE PTR [edi]
    4491:	19 01                	sbb    DWORD PTR [ecx],eax
    4493:	00 00                	add    BYTE PTR [eax],al
    4495:	04 0e                	add    al,0xe
    4497:	00 00                	add    BYTE PTR [eax],al
    4499:	00 02                	add    BYTE PTR [edx],al
    449b:	34 61                	xor    al,0x61
    449d:	00 00                	add    BYTE PTR [eax],al
    449f:	00 02                	add    BYTE PTR [edx],al
    44a1:	04 07                	add    al,0x7
    44a3:	61                   	popa   
    44a4:	00 00                	add    BYTE PTR [eax],al
    44a6:	00 02                	add    BYTE PTR [edx],al
    44a8:	08 07                	or     BYTE PTR [edi],al
    44aa:	57                   	push   edi
    44ab:	00 00                	add    BYTE PTR [eax],al
    44ad:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    44b4:	56                   	push   esi
    44b5:	61                   	popa   
    44b6:	00 00                	add    BYTE PTR [eax],al
    44b8:	00 02                	add    BYTE PTR [edx],al
    44ba:	04 05                	add    al,0x5
    44bc:	05 00 00 00 02       	add    eax,0x2000000
    44c1:	0c 04                	or     al,0x4
    44c3:	66 01 00             	add    WORD PTR [eax],ax
    44c6:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    44cc:	00 06                	add    BYTE PTR [esi],al
    44ce:	25 00 00 00 02       	and    eax,0x2000000
    44d3:	01 02                	add    DWORD PTR [edx],eax
    44d5:	13 01                	adc    eax,DWORD PTR [ecx]
    44d7:	00 00                	add    BYTE PTR [eax],al
    44d9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    44dc:	83 01 00             	add    DWORD PTR [ecx],0x0
    44df:	00 02                	add    BYTE PTR [edx],al
    44e1:	04 07                	add    al,0x7
    44e3:	5c                   	pop    esp
    44e4:	00 00                	add    BYTE PTR [eax],al
    44e6:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    44ec:	00 07                	add    BYTE PTR [edi],al
    44ee:	a3 0d 00 00 01       	mov    ds:0x100000d,eax
    44f3:	3b a1 00 00 00 f8    	cmp    esp,DWORD PTR [ecx-0x8000000]
    44f9:	34 00                	xor    al,0x0
    44fb:	9f                   	lahf   
    44fc:	7d 01                	jge    44ff <sysEnter_Vector-0x12bb01>
    44fe:	00 00                	add    BYTE PTR [eax],al
    4500:	01 9c 45 01 00 00 08 	add    DWORD PTR [ebp+eax*2+0x8000001],ebx
    4507:	c7                   	(bad)  
    4508:	0d 00 00 01 3b       	or     eax,0x3b010000
    450d:	88 00                	mov    BYTE PTR [eax],al
    450f:	00 00                	add    BYTE PTR [eax],al
    4511:	02 91 00 08 95 0d    	add    dl,BYTE PTR [ecx+0xd950800]
    4517:	00 00                	add    BYTE PTR [eax],al
    4519:	01 3b                	add    DWORD PTR [ebx],edi
    451b:	45                   	inc    ebp
    451c:	01 00                	add    DWORD PTR [eax],eax
    451e:	00 02                	add    BYTE PTR [edx],al
    4520:	91                   	xchg   ecx,eax
    4521:	04 08                	add    al,0x8
    4523:	d7                   	xlat   BYTE PTR ds:[ebx]
    4524:	0b 00                	or     eax,DWORD PTR [eax]
    4526:	00 01                	add    BYTE PTR [ecx],al
    4528:	3b 3a                	cmp    edi,DWORD PTR [edx]
    452a:	00 00                	add    BYTE PTR [eax],al
    452c:	00 02                	add    BYTE PTR [edx],al
    452e:	91                   	xchg   ecx,eax
    452f:	08 09                	or     BYTE PTR [ecx],cl
    4531:	73 00                	jae    4533 <sysEnter_Vector-0x12bacd>
    4533:	01 3d 88 00 00 00    	add    DWORD PTR ds:0x88,edi
    4539:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    453c:	61                   	popa   
    453d:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4540:	01 3e                	add    DWORD PTR [esi],edi
    4542:	a1 00 00 00 01       	mov    eax,ds:0x1000000
    4547:	57                   	push   edi
    4548:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    454b:	01 3f                	add    DWORD PTR [edi],edi
    454d:	3a 00                	cmp    al,BYTE PTR [eax]
    454f:	00 00                	add    BYTE PTR [eax],al
    4551:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    4554:	c0 0d 00 00 01 40 a1 	ror    BYTE PTR ds:0x40010000,0xa1
    455b:	00 00                	add    BYTE PTR [eax],al
    455d:	00 0b                	add    BYTE PTR [ebx],cl
    455f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4560:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    4564:	41                   	inc    ecx
    4565:	3a 00                	cmp    al,BYTE PTR [eax]
    4567:	00 00                	add    BYTE PTR [eax],al
    4569:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    456c:	79 00                	jns    456e <sysEnter_Vector-0x12ba92>
    456e:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    4571:	00 00                	add    BYTE PTR [eax],al
    4573:	00 01                	add    BYTE PTR [ecx],al
    4575:	51                   	push   ecx
    4576:	0c 9c                	or     al,0x9c
    4578:	0d 00 00 01 41       	or     eax,0x41010000
    457d:	3a 00                	cmp    al,BYTE PTR [eax]
    457f:	00 00                	add    BYTE PTR [eax],al
    4581:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    4584:	05 04 a8 00 00       	add    eax,0xa804
    4589:	00 0d a3 00 00 00    	add    BYTE PTR ds:0xa3,cl
    458f:	03 37                	add    esi,DWORD PTR [edi]
    4591:	56                   	push   esi
    4592:	00 00                	add    BYTE PTR [eax],al
    4594:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    459a:	9f                   	lahf   
    459b:	0d 34 01 00 00       	or     eax,0x134
    45a0:	03 38                	add    edi,DWORD PTR [eax]
    45a2:	56                   	push   esi
    45a3:	00 00                	add    BYTE PTR [eax],al
    45a5:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    45ab:	9f                   	lahf   
    45ac:	0d 7b 00 00 00       	or     eax,0x7b
    45b1:	03 39                	add    edi,DWORD PTR [ecx]
    45b3:	56                   	push   esi
    45b4:	00 00                	add    BYTE PTR [eax],al
    45b6:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    45bc:	9f                   	lahf   
    45bd:	0d 7c 01 00 00       	or     eax,0x17c
    45c2:	03 3a                	add    edi,DWORD PTR [edx]
    45c4:	7a 00                	jp     45c6 <sysEnter_Vector-0x12ba3a>
    45c6:	00 00                	add    BYTE PTR [eax],al
    45c8:	05 03 78 71 00       	add    eax,0x717803
    45cd:	9f                   	lahf   
    45ce:	0d 6e 00 00 00       	or     eax,0x6e
    45d3:	04 34                	add    al,0x34
    45d5:	a0 01 00 00 05       	mov    al,ds:0x5000001
    45da:	03 64 71 00          	add    esp,DWORD PTR [ecx+esi*2+0x0]
    45de:	9f                   	lahf   
    45df:	05 04 6f 00 00       	add    eax,0x6f04
    45e4:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
    45ea:	04 35                	add    al,0x35
    45ec:	56                   	push   esi
    45ed:	00 00                	add    BYTE PTR [eax],al
    45ef:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    45f5:	9f                   	lahf   
    45f6:	0d 41 00 00 00       	or     eax,0x41
    45fb:	05 58 45 01 00       	add    eax,0x14558
    4600:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    4606:	9f                   	lahf   
    4607:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    460b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    460e:	82                   	(bad)  
    460f:	14 00                	adc    al,0x0
    4611:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4614:	ac                   	lods   al,BYTE PTR ds:[esi]
    4615:	00 00                	add    BYTE PTR [eax],al
    4617:	00 0c cc             	add    BYTE PTR [esp+ecx*8],cl
    461a:	0d 00 00 1e 00       	or     eax,0x1e0000
    461f:	00 00                	add    BYTE PTR [eax],al
    4621:	78 36                	js     4659 <sysEnter_Vector-0x12b9a7>
    4623:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    4629:	60                   	pusha  
    462a:	1b 00                	sbb    eax,DWORD PTR [eax]
    462c:	00 02                	add    BYTE PTR [edx],al
    462e:	e3 0d                	jecxz  463d <sysEnter_Vector-0x12b9c3>
    4630:	00 00                	add    BYTE PTR [eax],al
    4632:	01 01                	add    DWORD PTR [ecx],eax
    4634:	5b                   	pop    ebx
    4635:	00 00                	add    BYTE PTR [eax],al
    4637:	00 78 36             	add    BYTE PTR [eax+0x36],bh
    463a:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    4640:	01 9c 5b 00 00 00 03 	add    DWORD PTR [ebx+ebx*2+0x3000000],ebx
    4647:	76 61                	jbe    46aa <sysEnter_Vector-0x12b956>
    4649:	6c                   	ins    BYTE PTR es:[edi],dx
    464a:	00 01                	add    BYTE PTR [ecx],al
    464c:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    464f:	00 00                	add    BYTE PTR [eax],al
    4651:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    4657:	74 00                	je     4659 <sysEnter_Vector-0x12b9a7>
    4659:	01 01                	add    DWORD PTR [ecx],eax
    465b:	68 00 00 00 02       	push   0x2000000
    4660:	91                   	xchg   ecx,eax
    4661:	04 00                	add    al,0x0
    4663:	04 04                	add    al,0x4
    4665:	61                   	popa   
    4666:	00 00                	add    BYTE PTR [eax],al
    4668:	00 05 01 06 8c 00    	add    BYTE PTR ds:0x8c0601,al
    466e:	00 00                	add    BYTE PTR [eax],al
    4670:	06                   	push   es
    4671:	04 05                	add    al,0x5
    4673:	69 6e 74 00 00 c3 01 	imul   ebp,DWORD PTR [esi+0x74],0x1c30000
    467a:	00 00                	add    BYTE PTR [eax],al
    467c:	04 00                	add    al,0x0
    467e:	e0 14                	loopne 4694 <sysEnter_Vector-0x12b96c>
    4680:	00 00                	add    BYTE PTR [eax],al
    4682:	04 01                	add    al,0x1
    4684:	ac                   	lods   al,BYTE PTR ds:[esi]
    4685:	00 00                	add    BYTE PTR [eax],al
    4687:	00 0c eb             	add    BYTE PTR [ebx+ebp*8],cl
    468a:	0d 00 00 1e 00       	or     eax,0x1e0000
    468f:	00 00                	add    BYTE PTR [eax],al
    4691:	98                   	cwde   
    4692:	36 00 9f 9c 01 00 00 	add    BYTE PTR ss:[edi+0x19c],bl
    4699:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    469a:	1b 00                	sbb    eax,DWORD PTR [eax]
    469c:	00 02                	add    BYTE PTR [edx],al
    469e:	01 06                	add    DWORD PTR [esi],eax
    46a0:	8c 00                	mov    WORD PTR [eax],es
    46a2:	00 00                	add    BYTE PTR [eax],al
    46a4:	02 01                	add    al,BYTE PTR [ecx]
    46a6:	06                   	push   es
    46a7:	85 00                	test   DWORD PTR [eax],eax
    46a9:	00 00                	add    BYTE PTR [eax],al
    46ab:	02 02                	add    al,BYTE PTR [edx]
    46ad:	05 72 01 00 00       	add    eax,0x172
    46b2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    46b9:	02 08                	add    cl,BYTE PTR [eax]
    46bb:	05 00 00 00 00       	add    eax,0x0
    46c0:	02 01                	add    al,BYTE PTR [ecx]
    46c2:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    46c8:	02 07                	add    al,BYTE PTR [edi]
    46ca:	19 01                	sbb    DWORD PTR [ecx],eax
    46cc:	00 00                	add    BYTE PTR [eax],al
    46ce:	04 0e                	add    al,0xe
    46d0:	00 00                	add    BYTE PTR [eax],al
    46d2:	00 02                	add    BYTE PTR [edx],al
    46d4:	34 61                	xor    al,0x61
    46d6:	00 00                	add    BYTE PTR [eax],al
    46d8:	00 02                	add    BYTE PTR [edx],al
    46da:	04 07                	add    al,0x7
    46dc:	61                   	popa   
    46dd:	00 00                	add    BYTE PTR [eax],al
    46df:	00 02                	add    BYTE PTR [edx],al
    46e1:	08 07                	or     BYTE PTR [edi],al
    46e3:	57                   	push   edi
    46e4:	00 00                	add    BYTE PTR [eax],al
    46e6:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    46ed:	56                   	push   esi
    46ee:	61                   	popa   
    46ef:	00 00                	add    BYTE PTR [eax],al
    46f1:	00 02                	add    BYTE PTR [edx],al
    46f3:	04 05                	add    al,0x5
    46f5:	05 00 00 00 02       	add    eax,0x2000000
    46fa:	0c 04                	or     al,0x4
    46fc:	66 01 00             	add    WORD PTR [eax],ax
    46ff:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    4705:	00 06                	add    BYTE PTR [esi],al
    4707:	25 00 00 00 02       	and    eax,0x2000000
    470c:	01 02                	add    DWORD PTR [edx],eax
    470e:	13 01                	adc    eax,DWORD PTR [ecx]
    4710:	00 00                	add    BYTE PTR [eax],al
    4712:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4715:	83 01 00             	add    DWORD PTR [ecx],0x0
    4718:	00 02                	add    BYTE PTR [edx],al
    471a:	04 07                	add    al,0x7
    471c:	5c                   	pop    esp
    471d:	00 00                	add    BYTE PTR [eax],al
    471f:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4725:	00 07                	add    BYTE PTR [edi],al
    4727:	00 0e                	add    BYTE PTR [esi],cl
    4729:	00 00                	add    BYTE PTR [eax],al
    472b:	01 57 7a             	add    DWORD PTR [edi+0x7a],edx
    472e:	00 00                	add    BYTE PTR [eax],al
    4730:	00 98 36 00 9f 9c    	add    BYTE PTR [eax-0x6360ffca],bl
    4736:	01 00                	add    DWORD PTR [eax],eax
    4738:	00 01                	add    BYTE PTR [ecx],al
    473a:	9c                   	pushf  
    473b:	43                   	inc    ebx
    473c:	01 00                	add    DWORD PTR [eax],eax
    473e:	00 08                	add    BYTE PTR [eax],cl
    4740:	c7                   	(bad)  
    4741:	0d 00 00 01 57       	or     eax,0x57010000
    4746:	88 00                	mov    BYTE PTR [eax],al
    4748:	00 00                	add    BYTE PTR [eax],al
    474a:	02 91 00 08 95 0d    	add    dl,BYTE PTR [ecx+0xd950800]
    4750:	00 00                	add    BYTE PTR [eax],al
    4752:	01 57 43             	add    DWORD PTR [edi+0x43],edx
    4755:	01 00                	add    DWORD PTR [eax],eax
    4757:	00 02                	add    BYTE PTR [edx],al
    4759:	91                   	xchg   ecx,eax
    475a:	04 08                	add    al,0x8
    475c:	d7                   	xlat   BYTE PTR ds:[ebx]
    475d:	0b 00                	or     eax,DWORD PTR [eax]
    475f:	00 01                	add    BYTE PTR [ecx],al
    4761:	57                   	push   edi
    4762:	3a 00                	cmp    al,BYTE PTR [eax]
    4764:	00 00                	add    BYTE PTR [eax],al
    4766:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    476c:	01 59 88             	add    DWORD PTR [ecx-0x78],ebx
    476f:	00 00                	add    BYTE PTR [eax],al
    4771:	00 01                	add    BYTE PTR [ecx],al
    4773:	56                   	push   esi
    4774:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    4777:	63 00                	arpl   WORD PTR [eax],ax
    4779:	01 5a a1             	add    DWORD PTR [edx-0x5f],ebx
    477c:	00 00                	add    BYTE PTR [eax],al
    477e:	00 01                	add    BYTE PTR [ecx],al
    4780:	57                   	push   edi
    4781:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    4784:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    4787:	00 00                	add    BYTE PTR [eax],al
    4789:	00 01                	add    BYTE PTR [ecx],al
    478b:	53                   	push   ebx
    478c:	0a c0                	or     al,al
    478e:	0d 00 00 01 5c       	or     eax,0x5c010000
    4793:	a1 00 00 00 0b       	mov    eax,ds:0xb000000
    4798:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4799:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    479d:	5d                   	pop    ebp
    479e:	3a 00                	cmp    al,BYTE PTR [eax]
    47a0:	00 00                	add    BYTE PTR [eax],al
    47a2:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    47a5:	79 00                	jns    47a7 <sysEnter_Vector-0x12b859>
    47a7:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    47aa:	00 00                	add    BYTE PTR [eax],al
    47ac:	00 01                	add    BYTE PTR [ecx],al
    47ae:	51                   	push   ecx
    47af:	0a 9c 0d 00 00 01 5d 	or     bl,BYTE PTR [ebp+ecx*1+0x5d010000]
    47b6:	3a 00                	cmp    al,BYTE PTR [eax]
    47b8:	00 00                	add    BYTE PTR [eax],al
    47ba:	00 05 04 a8 00 00    	add    BYTE PTR ds:0xa804,al
    47c0:	00 0c a3             	add    BYTE PTR [ebx+eiz*4],cl
    47c3:	00 00                	add    BYTE PTR [eax],al
    47c5:	00 03                	add    BYTE PTR [ebx],al
    47c7:	37                   	aaa    
    47c8:	56                   	push   esi
    47c9:	00 00                	add    BYTE PTR [eax],al
    47cb:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    47d1:	9f                   	lahf   
    47d2:	0c 34                	or     al,0x34
    47d4:	01 00                	add    DWORD PTR [eax],eax
    47d6:	00 03                	add    BYTE PTR [ebx],al
    47d8:	38 56 00             	cmp    BYTE PTR [esi+0x0],dl
    47db:	00 00                	add    BYTE PTR [eax],al
    47dd:	05 03 70 71 00       	add    eax,0x717003
    47e2:	9f                   	lahf   
    47e3:	0c 7b                	or     al,0x7b
    47e5:	00 00                	add    BYTE PTR [eax],al
    47e7:	00 03                	add    BYTE PTR [ebx],al
    47e9:	39 56 00             	cmp    DWORD PTR [esi+0x0],edx
    47ec:	00 00                	add    BYTE PTR [eax],al
    47ee:	05 03 68 71 00       	add    eax,0x716803
    47f3:	9f                   	lahf   
    47f4:	0c 7c                	or     al,0x7c
    47f6:	01 00                	add    DWORD PTR [eax],eax
    47f8:	00 03                	add    BYTE PTR [ebx],al
    47fa:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    47fd:	00 00                	add    BYTE PTR [eax],al
    47ff:	05 03 78 71 00       	add    eax,0x717803
    4804:	9f                   	lahf   
    4805:	0c 6e                	or     al,0x6e
    4807:	00 00                	add    BYTE PTR [eax],al
    4809:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    480c:	9e                   	sahf   
    480d:	01 00                	add    DWORD PTR [eax],eax
    480f:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    4815:	9f                   	lahf   
    4816:	05 04 6f 00 00       	add    eax,0x6f04
    481b:	00 0c 91             	add    BYTE PTR [ecx+edx*4],cl
    481e:	00 00                	add    BYTE PTR [eax],al
    4820:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4827:	05 03 60 71 00       	add    eax,0x716003
    482c:	9f                   	lahf   
    482d:	0c 41                	or     al,0x41
    482f:	00 00                	add    BYTE PTR [eax],al
    4831:	00 05 58 43 01 00    	add    BYTE PTR ds:0x14358,al
    4837:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    483d:	9f                   	lahf   
    483e:	00 95 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],dl
    4844:	00 8c 15 00 00 04 01 	add    BYTE PTR [ebp+edx*1+0x1040000],cl
    484b:	ac                   	lods   al,BYTE PTR ds:[esi]
    484c:	00 00                	add    BYTE PTR [eax],al
    484e:	00 0c 16             	add    BYTE PTR [esi+edx*1],cl
    4851:	0e                   	push   cs
    4852:	00 00                	add    BYTE PTR [eax],al
    4854:	1e                   	push   ds
    4855:	00 00                	add    BYTE PTR [eax],al
    4857:	00 34 38             	add    BYTE PTR [eax+edi*1],dh
    485a:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
    4860:	2a 1d 00 00 02 01    	sub    bl,BYTE PTR ds:0x1020000
    4866:	06                   	push   es
    4867:	8c 00                	mov    WORD PTR [eax],es
    4869:	00 00                	add    BYTE PTR [eax],al
    486b:	02 01                	add    al,BYTE PTR [ecx]
    486d:	06                   	push   es
    486e:	85 00                	test   DWORD PTR [eax],eax
    4870:	00 00                	add    BYTE PTR [eax],al
    4872:	02 02                	add    al,BYTE PTR [edx]
    4874:	05 72 01 00 00       	add    eax,0x172
    4879:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4880:	02 08                	add    cl,BYTE PTR [eax]
    4882:	05 00 00 00 00       	add    eax,0x0
    4887:	02 01                	add    al,BYTE PTR [ecx]
    4889:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    488f:	02 07                	add    al,BYTE PTR [edi]
    4891:	19 01                	sbb    DWORD PTR [ecx],eax
    4893:	00 00                	add    BYTE PTR [eax],al
    4895:	04 0e                	add    al,0xe
    4897:	00 00                	add    BYTE PTR [eax],al
    4899:	00 02                	add    BYTE PTR [edx],al
    489b:	34 61                	xor    al,0x61
    489d:	00 00                	add    BYTE PTR [eax],al
    489f:	00 02                	add    BYTE PTR [edx],al
    48a1:	04 07                	add    al,0x7
    48a3:	61                   	popa   
    48a4:	00 00                	add    BYTE PTR [eax],al
    48a6:	00 02                	add    BYTE PTR [edx],al
    48a8:	08 07                	or     BYTE PTR [edi],al
    48aa:	57                   	push   edi
    48ab:	00 00                	add    BYTE PTR [eax],al
    48ad:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    48b4:	56                   	push   esi
    48b5:	61                   	popa   
    48b6:	00 00                	add    BYTE PTR [eax],al
    48b8:	00 02                	add    BYTE PTR [edx],al
    48ba:	04 05                	add    al,0x5
    48bc:	05 00 00 00 02       	add    eax,0x2000000
    48c1:	0c 04                	or     al,0x4
    48c3:	66 01 00             	add    WORD PTR [eax],ax
    48c6:	00 02                	add    BYTE PTR [edx],al
    48c8:	01 02                	add    DWORD PTR [edx],eax
    48ca:	13 01                	adc    eax,DWORD PTR [ecx]
    48cc:	00 00                	add    BYTE PTR [eax],al
    48ce:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    48d1:	83 01 00             	add    DWORD PTR [ecx],0x0
    48d4:	00 02                	add    BYTE PTR [edx],al
    48d6:	04 07                	add    al,0x7
    48d8:	5c                   	pop    esp
    48d9:	00 00                	add    BYTE PTR [eax],al
    48db:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    48e1:	00 06                	add    BYTE PTR [esi],al
    48e3:	07                   	pop    es
    48e4:	0e                   	push   cs
    48e5:	00 00                	add    BYTE PTR [eax],al
    48e7:	01 03                	add    DWORD PTR [ebx],eax
    48e9:	34 38                	xor    al,0x38
    48eb:	00 9f 96 00 00 00    	add    BYTE PTR [edi+0x96],bl
    48f1:	01 9c f1 00 00 00 07 	add    DWORD PTR [ecx+esi*8+0x7000000],ebx
    48f8:	10 0e                	adc    BYTE PTR [esi],cl
    48fa:	00 00                	add    BYTE PTR [eax],al
    48fc:	01 03                	add    DWORD PTR [ebx],eax
    48fe:	9d                   	popf   
    48ff:	00 00                	add    BYTE PTR [eax],al
    4901:	00 02                	add    BYTE PTR [edx],al
    4903:	91                   	xchg   ecx,eax
    4904:	00 08                	add    BYTE PTR [eax],cl
    4906:	64                   	fs
    4907:	73 74                	jae    497d <sysEnter_Vector-0x12b683>
    4909:	00 01                	add    BYTE PTR [ecx],al
    490b:	05 9d 00 00 00       	add    eax,0x9d
    4910:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    4916:	63 00                	arpl   WORD PTR [eax],ax
    4918:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    491e:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    4924:	64 00 01             	add    BYTE PTR fs:[ecx],al
    4927:	06                   	push   es
    4928:	9d                   	popf   
    4929:	00 00                	add    BYTE PTR [eax],al
    492b:	00 02                	add    BYTE PTR [edx],al
    492d:	91                   	xchg   ecx,eax
    492e:	64 00 06             	add    BYTE PTR fs:[esi],al
    4931:	2c 0e                	sub    al,0xe
    4933:	00 00                	add    BYTE PTR [eax],al
    4935:	01 1f                	add    DWORD PTR [edi],ebx
    4937:	ca 38 00             	retf   0x38
    493a:	9f                   	lahf   
    493b:	20 00                	and    BYTE PTR [eax],al
    493d:	00 00                	add    BYTE PTR [eax],al
    493f:	01 9c 15 01 00 00 07 	add    DWORD PTR [ebp+edx*1+0x7000001],ebx
    4946:	10 0e                	adc    BYTE PTR [esi],cl
    4948:	00 00                	add    BYTE PTR [eax],al
    494a:	01 1f                	add    DWORD PTR [edi],ebx
    494c:	9d                   	popf   
    494d:	00 00                	add    BYTE PTR [eax],al
    494f:	00 02                	add    BYTE PTR [edx],al
    4951:	91                   	xchg   ecx,eax
    4952:	00 00                	add    BYTE PTR [eax],al
    4954:	09 a3 00 00 00 03    	or     DWORD PTR [ebx+0x3000000],esp
    495a:	37                   	aaa    
    495b:	56                   	push   esi
    495c:	00 00                	add    BYTE PTR [eax],al
    495e:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    4964:	9f                   	lahf   
    4965:	09 34 01             	or     DWORD PTR [ecx+eax*1],esi
    4968:	00 00                	add    BYTE PTR [eax],al
    496a:	03 38                	add    edi,DWORD PTR [eax]
    496c:	56                   	push   esi
    496d:	00 00                	add    BYTE PTR [eax],al
    496f:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    4975:	9f                   	lahf   
    4976:	09 7b 00             	or     DWORD PTR [ebx+0x0],edi
    4979:	00 00                	add    BYTE PTR [eax],al
    497b:	03 39                	add    edi,DWORD PTR [ecx]
    497d:	56                   	push   esi
    497e:	00 00                	add    BYTE PTR [eax],al
    4980:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    4986:	9f                   	lahf   
    4987:	09 7c 01 00          	or     DWORD PTR [ecx+eax*1+0x0],edi
    498b:	00 03                	add    BYTE PTR [ebx],al
    498d:	3a 7a 00             	cmp    bh,BYTE PTR [edx+0x0]
    4990:	00 00                	add    BYTE PTR [eax],al
    4992:	05 03 78 71 00       	add    eax,0x717803
    4997:	9f                   	lahf   
    4998:	09 6e 00             	or     DWORD PTR [esi+0x0],ebp
    499b:	00 00                	add    BYTE PTR [eax],al
    499d:	04 34                	add    al,0x34
    499f:	6a 01                	push   0x1
    49a1:	00 00                	add    BYTE PTR [eax],al
    49a3:	05 03 64 71 00       	add    eax,0x716403
    49a8:	9f                   	lahf   
    49a9:	05 04 6f 00 00       	add    eax,0x6f04
    49ae:	00 09                	add    BYTE PTR [ecx],cl
    49b0:	91                   	xchg   ecx,eax
    49b1:	00 00                	add    BYTE PTR [eax],al
    49b3:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    49ba:	05 03 60 71 00       	add    eax,0x716003
    49bf:	9f                   	lahf   
    49c0:	09 41 00             	or     DWORD PTR [ecx+0x0],eax
    49c3:	00 00                	add    BYTE PTR [eax],al
    49c5:	05 58 92 01 00       	add    eax,0x19258
    49ca:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    49d0:	9f                   	lahf   
    49d1:	05 04 9d 00 00       	add    eax,0x9d04
    49d6:	00 00                	add    BYTE PTR [eax],al
    49d8:	f5                   	cmc    
    49d9:	01 00                	add    DWORD PTR [eax],eax
    49db:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    49de:	15 16 00 00 04       	adc    eax,0x4000016
    49e3:	01 ac 00 00 00 0c 3c 	add    DWORD PTR [eax+eax*1+0x3c0c0000],ebp
    49ea:	0e                   	push   cs
    49eb:	00 00                	add    BYTE PTR [eax],al
    49ed:	1e                   	push   ds
    49ee:	00 00                	add    BYTE PTR [eax],al
    49f0:	00 ec                	add    ah,ch
    49f2:	38 00                	cmp    BYTE PTR [eax],al
    49f4:	9f                   	lahf   
    49f5:	69 01 00 00 07 1e    	imul   eax,DWORD PTR [ecx],0x1e070000
    49fb:	00 00                	add    BYTE PTR [eax],al
    49fd:	02 01                	add    al,BYTE PTR [ecx]
    49ff:	06                   	push   es
    4a00:	8c 00                	mov    WORD PTR [eax],es
    4a02:	00 00                	add    BYTE PTR [eax],al
    4a04:	02 01                	add    al,BYTE PTR [ecx]
    4a06:	06                   	push   es
    4a07:	85 00                	test   DWORD PTR [eax],eax
    4a09:	00 00                	add    BYTE PTR [eax],al
    4a0b:	02 02                	add    al,BYTE PTR [edx]
    4a0d:	05 72 01 00 00       	add    eax,0x172
    4a12:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4a19:	02 08                	add    cl,BYTE PTR [eax]
    4a1b:	05 00 00 00 00       	add    eax,0x0
    4a20:	02 01                	add    al,BYTE PTR [ecx]
    4a22:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    4a28:	02 07                	add    al,BYTE PTR [edi]
    4a2a:	19 01                	sbb    DWORD PTR [ecx],eax
    4a2c:	00 00                	add    BYTE PTR [eax],al
    4a2e:	04 0e                	add    al,0xe
    4a30:	00 00                	add    BYTE PTR [eax],al
    4a32:	00 02                	add    BYTE PTR [edx],al
    4a34:	34 61                	xor    al,0x61
    4a36:	00 00                	add    BYTE PTR [eax],al
    4a38:	00 02                	add    BYTE PTR [edx],al
    4a3a:	04 07                	add    al,0x7
    4a3c:	61                   	popa   
    4a3d:	00 00                	add    BYTE PTR [eax],al
    4a3f:	00 02                	add    BYTE PTR [edx],al
    4a41:	08 07                	or     BYTE PTR [edi],al
    4a43:	57                   	push   edi
    4a44:	00 00                	add    BYTE PTR [eax],al
    4a46:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    4a4d:	56                   	push   esi
    4a4e:	61                   	popa   
    4a4f:	00 00                	add    BYTE PTR [eax],al
    4a51:	00 04 bd 02 00 00 03 	add    BYTE PTR [edi*4+0x3000002],al
    4a58:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    4a5b:	00 00                	add    BYTE PTR [eax],al
    4a5d:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    4a64:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    4a67:	66 01 00             	add    WORD PTR [eax],ax
    4a6a:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    4a70:	00 06                	add    BYTE PTR [esi],al
    4a72:	25 00 00 00 02       	and    eax,0x2000000
    4a77:	01 02                	add    DWORD PTR [edx],eax
    4a79:	13 01                	adc    eax,DWORD PTR [ecx]
    4a7b:	00 00                	add    BYTE PTR [eax],al
    4a7d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4a80:	83 01 00             	add    DWORD PTR [ecx],0x0
    4a83:	00 02                	add    BYTE PTR [edx],al
    4a85:	04 07                	add    al,0x7
    4a87:	5c                   	pop    esp
    4a88:	00 00                	add    BYTE PTR [eax],al
    4a8a:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4a90:	00 07                	add    BYTE PTR [edi],al
    4a92:	71 0e                	jno    4aa2 <sysEnter_Vector-0x12b55e>
    4a94:	00 00                	add    BYTE PTR [eax],al
    4a96:	01 0a                	add    DWORD PTR [edx],ecx
    4a98:	b3 00                	mov    bl,0x0
    4a9a:	00 00                	add    BYTE PTR [eax],al
    4a9c:	ec                   	in     al,dx
    4a9d:	38 00                	cmp    BYTE PTR [eax],al
    4a9f:	9f                   	lahf   
    4aa0:	43                   	inc    ebx
    4aa1:	01 00                	add    DWORD PTR [eax],eax
    4aa3:	00 01                	add    BYTE PTR [ecx],al
    4aa5:	9c                   	pushf  
    4aa6:	33 01                	xor    eax,DWORD PTR [ecx]
    4aa8:	00 00                	add    BYTE PTR [eax],al
    4aaa:	08 69 6e             	or     BYTE PTR [ecx+0x6e],ch
    4aad:	00 01                	add    BYTE PTR [ecx],al
    4aaf:	0a 93 00 00 00 02    	or     dl,BYTE PTR [ebx+0x2000000]
    4ab5:	91                   	xchg   ecx,eax
    4ab6:	00 09                	add    BYTE PTR [ecx],cl
    4ab8:	69 0e 00 00 01 0a    	imul   ecx,DWORD PTR [esi],0xa010000
    4abe:	93                   	xchg   ebx,eax
    4abf:	00 00                	add    BYTE PTR [eax],al
    4ac1:	00 02                	add    BYTE PTR [edx],al
    4ac3:	91                   	xchg   ecx,eax
    4ac4:	04 08                	add    al,0x8
    4ac6:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4ac9:	01 0a                	add    DWORD PTR [edx],ecx
    4acb:	93                   	xchg   ebx,eax
    4acc:	00 00                	add    BYTE PTR [eax],al
    4ace:	00 02                	add    BYTE PTR [edx],al
    4ad0:	91                   	xchg   ecx,eax
    4ad1:	08 0a                	or     BYTE PTR [edx],cl
    4ad3:	34 0e                	xor    al,0xe
    4ad5:	00 00                	add    BYTE PTR [eax],al
    4ad7:	01 0c 7a             	add    DWORD PTR [edx+edi*2],ecx
    4ada:	00 00                	add    BYTE PTR [eax],al
    4adc:	00 02                	add    BYTE PTR [edx],al
    4ade:	91                   	xchg   ecx,eax
    4adf:	6c                   	ins    BYTE PTR es:[edi],dx
    4ae0:	0b 72 65             	or     esi,DWORD PTR [edx+0x65]
    4ae3:	73 00                	jae    4ae5 <sysEnter_Vector-0x12b51b>
    4ae5:	01 0e                	add    DWORD PTR [esi],ecx
    4ae7:	b3 00                	mov    bl,0x0
    4ae9:	00 00                	add    BYTE PTR [eax],al
    4aeb:	02 91 68 0a 54 0e    	add    dl,BYTE PTR [ecx+0xe540a68]
    4af1:	00 00                	add    BYTE PTR [eax],al
    4af3:	01 10                	add    DWORD PTR [eax],edx
    4af5:	7a 00                	jp     4af7 <sysEnter_Vector-0x12b509>
    4af7:	00 00                	add    BYTE PTR [eax],al
    4af9:	02 91 64 0a 4d 0e    	add    dl,BYTE PTR [ecx+0xe4d0a64]
    4aff:	00 00                	add    BYTE PTR [eax],al
    4b01:	01 12                	add    DWORD PTR [edx],edx
    4b03:	b3 00                	mov    bl,0x0
    4b05:	00 00                	add    BYTE PTR [eax],al
    4b07:	02 91 60 00 0c 5e    	add    dl,BYTE PTR [ecx+0x5e0c0060]
    4b0d:	0e                   	push   cs
    4b0e:	00 00                	add    BYTE PTR [eax],al
    4b10:	01 2a                	add    DWORD PTR [edx],ebp
    4b12:	b3 00                	mov    bl,0x0
    4b14:	00 00                	add    BYTE PTR [eax],al
    4b16:	2f                   	das    
    4b17:	3a 00                	cmp    al,BYTE PTR [eax]
    4b19:	9f                   	lahf   
    4b1a:	26 00 00             	add    BYTE PTR es:[eax],al
    4b1d:	00 01                	add    BYTE PTR [ecx],al
    4b1f:	9c                   	pushf  
    4b20:	75 01                	jne    4b23 <sysEnter_Vector-0x12b4dd>
    4b22:	00 00                	add    BYTE PTR [eax],al
    4b24:	08 69 6e             	or     BYTE PTR [ecx+0x6e],ch
    4b27:	00 01                	add    BYTE PTR [ecx],al
    4b29:	2a 93 00 00 00 02    	sub    dl,BYTE PTR [ebx+0x2000000]
    4b2f:	91                   	xchg   ecx,eax
    4b30:	00 09                	add    BYTE PTR [ecx],cl
    4b32:	69 0e 00 00 01 2a    	imul   ecx,DWORD PTR [esi],0x2a010000
    4b38:	93                   	xchg   ebx,eax
    4b39:	00 00                	add    BYTE PTR [eax],al
    4b3b:	00 02                	add    BYTE PTR [edx],al
    4b3d:	91                   	xchg   ecx,eax
    4b3e:	04 08                	add    al,0x8
    4b40:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4b43:	01 2a                	add    DWORD PTR [edx],ebp
    4b45:	93                   	xchg   ebx,eax
    4b46:	00 00                	add    BYTE PTR [eax],al
    4b48:	00 02                	add    BYTE PTR [edx],al
    4b4a:	91                   	xchg   ecx,eax
    4b4b:	08 00                	or     BYTE PTR [eax],al
    4b4d:	0d a3 00 00 00       	or     eax,0xa3
    4b52:	04 37                	add    al,0x37
    4b54:	56                   	push   esi
    4b55:	00 00                	add    BYTE PTR [eax],al
    4b57:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    4b5d:	9f                   	lahf   
    4b5e:	0d 34 01 00 00       	or     eax,0x134
    4b63:	04 38                	add    al,0x38
    4b65:	56                   	push   esi
    4b66:	00 00                	add    BYTE PTR [eax],al
    4b68:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    4b6e:	9f                   	lahf   
    4b6f:	0d 7b 00 00 00       	or     eax,0x7b
    4b74:	04 39                	add    al,0x39
    4b76:	56                   	push   esi
    4b77:	00 00                	add    BYTE PTR [eax],al
    4b79:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    4b7f:	9f                   	lahf   
    4b80:	0d 7c 01 00 00       	or     eax,0x17c
    4b85:	04 3a                	add    al,0x3a
    4b87:	85 00                	test   DWORD PTR [eax],eax
    4b89:	00 00                	add    BYTE PTR [eax],al
    4b8b:	05 03 78 71 00       	add    eax,0x717803
    4b90:	9f                   	lahf   
    4b91:	0d 6e 00 00 00       	or     eax,0x6e
    4b96:	05 34 ca 01 00       	add    eax,0x1ca34
    4b9b:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    4ba1:	9f                   	lahf   
    4ba2:	05 04 6f 00 00       	add    eax,0x6f04
    4ba7:	00 0d 91 00 00 00    	add    BYTE PTR ds:0x91,cl
    4bad:	05 35 56 00 00       	add    eax,0x5635
    4bb2:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    4bb8:	9f                   	lahf   
    4bb9:	0d 41 00 00 00       	or     eax,0x41
    4bbe:	06                   	push   es
    4bbf:	58                   	pop    eax
    4bc0:	f2 01 00             	repnz add DWORD PTR [eax],eax
    4bc3:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    4bc9:	9f                   	lahf   
    4bca:	05 04 b3 00 00       	add    eax,0xb304
    4bcf:	00 00                	add    BYTE PTR [eax],al
    4bd1:	39 02                	cmp    DWORD PTR [edx],eax
    4bd3:	00 00                	add    BYTE PTR [eax],al
    4bd5:	04 00                	add    al,0x0
    4bd7:	df 16                	fist   WORD PTR [esi]
    4bd9:	00 00                	add    BYTE PTR [eax],al
    4bdb:	04 01                	add    al,0x1
    4bdd:	ac                   	lods   al,BYTE PTR ds:[esi]
    4bde:	00 00                	add    BYTE PTR [eax],al
    4be0:	00 0c 8e             	add    BYTE PTR [esi+ecx*4],cl
    4be3:	0e                   	push   cs
    4be4:	00 00                	add    BYTE PTR [eax],al
    4be6:	1e                   	push   ds
    4be7:	00 00                	add    BYTE PTR [eax],al
    4be9:	00 58 3a             	add    BYTE PTR [eax+0x3a],bl
    4bec:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
    4bf2:	f3 1e                	repz push ds
    4bf4:	00 00                	add    BYTE PTR [eax],al
    4bf6:	02 01                	add    al,BYTE PTR [ecx]
    4bf8:	06                   	push   es
    4bf9:	8c 00                	mov    WORD PTR [eax],es
    4bfb:	00 00                	add    BYTE PTR [eax],al
    4bfd:	02 01                	add    al,BYTE PTR [ecx]
    4bff:	06                   	push   es
    4c00:	85 00                	test   DWORD PTR [eax],eax
    4c02:	00 00                	add    BYTE PTR [eax],al
    4c04:	02 02                	add    al,BYTE PTR [edx]
    4c06:	05 72 01 00 00       	add    eax,0x172
    4c0b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    4c12:	02 08                	add    cl,BYTE PTR [eax]
    4c14:	05 00 00 00 00       	add    eax,0x0
    4c19:	02 01                	add    al,BYTE PTR [ecx]
    4c1b:	08 83 00 00 00 02    	or     BYTE PTR [ebx+0x2000000],al
    4c21:	02 07                	add    al,BYTE PTR [edi]
    4c23:	19 01                	sbb    DWORD PTR [ecx],eax
    4c25:	00 00                	add    BYTE PTR [eax],al
    4c27:	04 0e                	add    al,0xe
    4c29:	00 00                	add    BYTE PTR [eax],al
    4c2b:	00 02                	add    BYTE PTR [edx],al
    4c2d:	34 61                	xor    al,0x61
    4c2f:	00 00                	add    BYTE PTR [eax],al
    4c31:	00 02                	add    BYTE PTR [edx],al
    4c33:	04 07                	add    al,0x7
    4c35:	61                   	popa   
    4c36:	00 00                	add    BYTE PTR [eax],al
    4c38:	00 02                	add    BYTE PTR [edx],al
    4c3a:	08 07                	or     BYTE PTR [edi],al
    4c3c:	57                   	push   edi
    4c3d:	00 00                	add    BYTE PTR [eax],al
    4c3f:	00 04 4d 00 00 00 02 	add    BYTE PTR [ecx*2+0x2000000],al
    4c46:	56                   	push   esi
    4c47:	61                   	popa   
    4c48:	00 00                	add    BYTE PTR [eax],al
    4c4a:	00 02                	add    BYTE PTR [edx],al
    4c4c:	04 05                	add    al,0x5
    4c4e:	05 00 00 00 02       	add    eax,0x2000000
    4c53:	0c 04                	or     al,0x4
    4c55:	66 01 00             	add    WORD PTR [eax],ax
    4c58:	00 05 04 8e 00 00    	add    BYTE PTR ds:0x8e04,al
    4c5e:	00 06                	add    BYTE PTR [esi],al
    4c60:	25 00 00 00 02       	and    eax,0x2000000
    4c65:	01 02                	add    DWORD PTR [edx],eax
    4c67:	13 01                	adc    eax,DWORD PTR [ecx]
    4c69:	00 00                	add    BYTE PTR [eax],al
    4c6b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    4c6e:	83 01 00             	add    DWORD PTR [ecx],0x0
    4c71:	00 02                	add    BYTE PTR [edx],al
    4c73:	04 07                	add    al,0x7
    4c75:	5c                   	pop    esp
    4c76:	00 00                	add    BYTE PTR [eax],al
    4c78:	00 05 04 25 00 00    	add    BYTE PTR ds:0x2504,al
    4c7e:	00 07                	add    BYTE PTR [edi],al
    4c80:	85 0e                	test   DWORD PTR [esi],ecx
    4c82:	00 00                	add    BYTE PTR [eax],al
    4c84:	01 33                	add    DWORD PTR [ebx],esi
    4c86:	a8 00                	test   al,0x0
    4c88:	00 00                	add    BYTE PTR [eax],al
    4c8a:	58                   	pop    eax
    4c8b:	3a 00                	cmp    al,BYTE PTR [eax]
    4c8d:	9f                   	lahf   
    4c8e:	9e                   	sahf   
    4c8f:	00 00                	add    BYTE PTR [eax],al
    4c91:	00 01                	add    BYTE PTR [ecx],al
    4c93:	9c                   	pushf  
    4c94:	16                   	push   ss
    4c95:	01 00                	add    DWORD PTR [eax],eax
    4c97:	00 08                	add    BYTE PTR [eax],cl
    4c99:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    4c9a:	0e                   	push   cs
    4c9b:	00 00                	add    BYTE PTR [eax],al
    4c9d:	01 33                	add    DWORD PTR [ebx],esi
    4c9f:	a8 00                	test   al,0x0
    4ca1:	00 00                	add    BYTE PTR [eax],al
    4ca3:	02 91 00 08 a1 0e    	add    dl,BYTE PTR [ecx+0xea10800]
    4ca9:	00 00                	add    BYTE PTR [eax],al
    4cab:	01 33                	add    DWORD PTR [ebx],esi
    4cad:	a8 00                	test   al,0x0
    4caf:	00 00                	add    BYTE PTR [eax],al
    4cb1:	02 91 04 08 68 06    	add    dl,BYTE PTR [ecx+0x6680804]
    4cb7:	00 00                	add    BYTE PTR [eax],al
    4cb9:	01 33                	add    DWORD PTR [ebx],esi
    4cbb:	3a 00                	cmp    al,BYTE PTR [eax]
    4cbd:	00 00                	add    BYTE PTR [eax],al
    4cbf:	02 91 08 09 61 00    	add    dl,BYTE PTR [ecx+0x610908]
    4cc5:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4ccb:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4cce:	62 00                	bound  eax,QWORD PTR [eax]
    4cd0:	01 35 a8 00 00 00    	add    DWORD PTR ds:0xa8,esi
    4cd6:	01 53 09             	add    DWORD PTR [ebx+0x9],edx
    4cd9:	6c                   	ins    BYTE PTR es:[edi],dx
    4cda:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    4cdc:	00 01                	add    BYTE PTR [ecx],al
    4cde:	3b 3a                	cmp    edi,DWORD PTR [edx]
    4ce0:	00 00                	add    BYTE PTR [eax],al
    4ce2:	00 02                	add    BYTE PTR [edx],al
    4ce4:	91                   	xchg   ecx,eax
    4ce5:	6c                   	ins    BYTE PTR es:[edi],dx
    4ce6:	00 07                	add    BYTE PTR [edi],al
    4ce8:	7d 0e                	jge    4cf8 <sysEnter_Vector-0x12b308>
    4cea:	00 00                	add    BYTE PTR [eax],al
    4cec:	01 57 a8             	add    DWORD PTR [edi-0x58],edx
    4cef:	00 00                	add    BYTE PTR [eax],al
    4cf1:	00 f6                	add    dh,dh
    4cf3:	3a 00                	cmp    al,BYTE PTR [eax]
    4cf5:	9f                   	lahf   
    4cf6:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4cf7:	00 00                	add    BYTE PTR [eax],al
    4cf9:	00 01                	add    BYTE PTR [ecx],al
    4cfb:	9c                   	pushf  
    4cfc:	62 01                	bound  eax,QWORD PTR [ecx]
    4cfe:	00 00                	add    BYTE PTR [eax],al
    4d00:	08 a4 0e 00 00 01 57 	or     BYTE PTR [esi+ecx*1+0x57010000],ah
    4d07:	88 00                	mov    BYTE PTR [eax],al
    4d09:	00 00                	add    BYTE PTR [eax],al
    4d0b:	02 91 00 08 a1 0e    	add    dl,BYTE PTR [ecx+0xea10800]
    4d11:	00 00                	add    BYTE PTR [eax],al
    4d13:	01 57 88             	add    DWORD PTR [edi-0x78],edx
    4d16:	00 00                	add    BYTE PTR [eax],al
    4d18:	00 02                	add    BYTE PTR [edx],al
    4d1a:	91                   	xchg   ecx,eax
    4d1b:	04 09                	add    al,0x9
    4d1d:	61                   	popa   
    4d1e:	00 01                	add    BYTE PTR [ecx],al
    4d20:	59                   	pop    ecx
    4d21:	a8 00                	test   al,0x0
    4d23:	00 00                	add    BYTE PTR [eax],al
    4d25:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    4d28:	62 00                	bound  eax,QWORD PTR [eax]
    4d2a:	01 59 a8             	add    DWORD PTR [ecx-0x58],ebx
    4d2d:	00 00                	add    BYTE PTR [eax],al
    4d2f:	00 01                	add    BYTE PTR [ecx],al
    4d31:	53                   	push   ebx
    4d32:	00 0a                	add    BYTE PTR [edx],cl
    4d34:	ab                   	stos   DWORD PTR es:[edi],eax
    4d35:	0e                   	push   cs
    4d36:	00 00                	add    BYTE PTR [eax],al
    4d38:	01 76 a8             	add    DWORD PTR [esi-0x58],esi
    4d3b:	00 00                	add    BYTE PTR [eax],al
    4d3d:	00 64 3b 00          	add    BYTE PTR [ebx+edi*1+0x0],ah
    4d41:	9f                   	lahf   
    4d42:	1d 00 00 00 01       	sbb    eax,0x1000000
    4d47:	9c                   	pushf  
    4d48:	98                   	cwde   
    4d49:	01 00                	add    DWORD PTR [eax],eax
    4d4b:	00 08                	add    BYTE PTR [eax],cl
    4d4d:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    4d4e:	0e                   	push   cs
    4d4f:	00 00                	add    BYTE PTR [eax],al
    4d51:	01 76 88             	add    DWORD PTR [esi-0x78],esi
    4d54:	00 00                	add    BYTE PTR [eax],al
    4d56:	00 02                	add    BYTE PTR [edx],al
    4d58:	91                   	xchg   ecx,eax
    4d59:	00 08                	add    BYTE PTR [eax],cl
    4d5b:	a1 0e 00 00 01       	mov    eax,ds:0x100000e
    4d60:	76 88                	jbe    4cea <sysEnter_Vector-0x12b316>
    4d62:	00 00                	add    BYTE PTR [eax],al
    4d64:	00 02                	add    BYTE PTR [edx],al
    4d66:	91                   	xchg   ecx,eax
    4d67:	04 00                	add    al,0x0
    4d69:	0b 25 00 00 00 a8    	or     esp,DWORD PTR ds:0xa8000000
    4d6f:	01 00                	add    DWORD PTR [eax],eax
    4d71:	00 0c 9a             	add    BYTE PTR [edx+ebx*4],cl
    4d74:	00 00                	add    BYTE PTR [eax],al
    4d76:	00 65 00             	add    BYTE PTR [ebp+0x0],ah
    4d79:	0d 9b 0e 00 00       	or     eax,0xe9b
    4d7e:	01 19                	add    DWORD PTR [ecx],ebx
    4d80:	98                   	cwde   
    4d81:	01 00                	add    DWORD PTR [eax],eax
    4d83:	00 05 03 e0 6f 00    	add    BYTE PTR ds:0x6fe003,al
    4d89:	9f                   	lahf   
    4d8a:	0e                   	push   cs
    4d8b:	a3 00 00 00 03       	mov    ds:0x3000000,eax
    4d90:	37                   	aaa    
    4d91:	56                   	push   esi
    4d92:	00 00                	add    BYTE PTR [eax],al
    4d94:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    4d9a:	9f                   	lahf   
    4d9b:	0e                   	push   cs
    4d9c:	34 01                	xor    al,0x1
    4d9e:	00 00                	add    BYTE PTR [eax],al
    4da0:	03 38                	add    edi,DWORD PTR [eax]
    4da2:	56                   	push   esi
    4da3:	00 00                	add    BYTE PTR [eax],al
    4da5:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    4dab:	9f                   	lahf   
    4dac:	0e                   	push   cs
    4dad:	7b 00                	jnp    4daf <sysEnter_Vector-0x12b251>
    4daf:	00 00                	add    BYTE PTR [eax],al
    4db1:	03 39                	add    edi,DWORD PTR [ecx]
    4db3:	56                   	push   esi
    4db4:	00 00                	add    BYTE PTR [eax],al
    4db6:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    4dbc:	9f                   	lahf   
    4dbd:	0e                   	push   cs
    4dbe:	7c 01                	jl     4dc1 <sysEnter_Vector-0x12b23f>
    4dc0:	00 00                	add    BYTE PTR [eax],al
    4dc2:	03 3a                	add    edi,DWORD PTR [edx]
    4dc4:	7a 00                	jp     4dc6 <sysEnter_Vector-0x12b23a>
    4dc6:	00 00                	add    BYTE PTR [eax],al
    4dc8:	05 03 78 71 00       	add    eax,0x717803
    4dcd:	9f                   	lahf   
    4dce:	0e                   	push   cs
    4dcf:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4dd0:	00 00                	add    BYTE PTR [eax],al
    4dd2:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    4dd5:	0e                   	push   cs
    4dd6:	02 00                	add    al,BYTE PTR [eax]
    4dd8:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    4dde:	9f                   	lahf   
    4ddf:	05 04 6f 00 00       	add    eax,0x6f04
    4de4:	00 0e                	add    BYTE PTR [esi],cl
    4de6:	91                   	xchg   ecx,eax
    4de7:	00 00                	add    BYTE PTR [eax],al
    4de9:	00 04 35 56 00 00 00 	add    BYTE PTR [esi*1+0x56],al
    4df0:	05 03 60 71 00       	add    eax,0x716003
    4df5:	9f                   	lahf   
    4df6:	0e                   	push   cs
    4df7:	41                   	inc    ecx
    4df8:	00 00                	add    BYTE PTR [eax],al
    4dfa:	00 05 58 36 02 00    	add    BYTE PTR ds:0x23658,al
    4e00:	00 05 03 74 71 00    	add    BYTE PTR ds:0x717403,al
    4e06:	9f                   	lahf   
    4e07:	05 04 a8 00 00       	add    eax,0xa804
    4e0c:	00 00                	add    BYTE PTR [eax],al
    4e0e:	e8 05 00 00 04       	call   4004e18 <sysEnter_Vector+0x3ed4e18>
    4e13:	00 ae 17 00 00 04    	add    BYTE PTR [esi+0x4000017],ch
    4e19:	01 ac 00 00 00 0c b2 	add    DWORD PTR [eax+eax*1-0x4df40000],ebp
    4e20:	0e                   	push   cs
    4e21:	00 00                	add    BYTE PTR [eax],al
    4e23:	1e                   	push   ds
    4e24:	00 00                	add    BYTE PTR [eax],al
    4e26:	00 84 3b 00 9f 0e 0d 	add    BYTE PTR [ebx+edi*1+0xd0e9f00],al
    4e2d:	00 00                	add    BYTE PTR [eax],al
    4e2f:	ea 1f 00 00 02 bf 03 	jmp    0x3bf:0x200001f
    4e36:	00 00                	add    BYTE PTR [eax],al
    4e38:	04 12                	add    al,0x12
    4e3a:	01 00                	add    DWORD PTR [eax],eax
    4e3c:	00 07                	add    BYTE PTR [edi],al
    4e3e:	15 12 01 00 00       	adc    eax,0x112
    4e43:	03 5f 03             	add    ebx,DWORD PTR [edi+0x3]
    4e46:	00 00                	add    BYTE PTR [eax],al
    4e48:	00 03                	add    BYTE PTR [ebx],al
    4e4a:	cb                   	retf   
    4e4b:	04 00                	add    al,0x0
    4e4d:	00 01                	add    BYTE PTR [ecx],al
    4e4f:	03 d6                	add    edx,esi
    4e51:	02 00                	add    al,BYTE PTR [eax]
    4e53:	00 02                	add    BYTE PTR [edx],al
    4e55:	03 bd 04 00 00 03    	add    edi,DWORD PTR [ebp+0x3000004]
    4e5b:	03 08                	add    ecx,DWORD PTR [eax]
    4e5d:	03 00                	add    eax,DWORD PTR [eax]
    4e5f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4e62:	f3 02 00             	repz add al,BYTE PTR [eax]
    4e65:	00 05 03 52 03 00    	add    BYTE PTR ds:0x35203,al
    4e6b:	00 0a                	add    BYTE PTR [edx],cl
    4e6d:	03 33                	add    esi,DWORD PTR [ebx]
    4e6f:	04 00                	add    al,0x0
    4e71:	00 0b                	add    BYTE PTR [ebx],cl
    4e73:	03 6f 03             	add    ebp,DWORD PTR [edi+0x3]
    4e76:	00 00                	add    BYTE PTR [eax],al
    4e78:	0c 03                	or     al,0x3
    4e7a:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    4e7f:	03 40 04             	add    eax,DWORD PTR [eax+0x4]
    4e82:	00 00                	add    BYTE PTR [eax],al
    4e84:	0e                   	push   cs
    4e85:	03 95 04 00 00 0f    	add    edx,DWORD PTR [ebp+0xf000004]
    4e8b:	03 3f                	add    edi,DWORD PTR [edi]
    4e8d:	03 00                	add    eax,DWORD PTR [eax]
    4e8f:	00 10                	add    BYTE PTR [eax],dl
    4e91:	03 4d 04             	add    ecx,DWORD PTR [ebp+0x4]
    4e94:	00 00                	add    BYTE PTR [eax],al
    4e96:	4f                   	dec    edi
    4e97:	03 df                	add    ebx,edi
    4e99:	03 00                	add    eax,DWORD PTR [eax]
    4e9b:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    4e9e:	78 04                	js     4ea4 <sysEnter_Vector-0x12b15c>
    4ea0:	00 00                	add    BYTE PTR [eax],al
    4ea2:	59                   	pop    ecx
    4ea3:	03 8b 02 00 00 61    	add    ecx,DWORD PTR [ebx+0x61000002]
    4ea9:	03 fc                	add    edi,esp
    4eab:	03 00                	add    eax,DWORD PTR [eax]
    4ead:	00 97 04 94 03 00    	add    BYTE PTR [edi+0x39404],dl
    4eb3:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    4eb6:	04 6b                	add    al,0x6b
    4eb8:	04 00                	add    al,0x0
    4eba:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    4ebe:	10 04 00             	adc    BYTE PTR [eax+eax*1],al
    4ec1:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    4ec4:	04 af                	add    al,0xaf
    4ec6:	02 00                	add    al,BYTE PTR [eax]
    4ec8:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    4ecb:	04 2a                	add    al,0x2a
    4ecd:	03 00                	add    eax,DWORD PTR [eax]
    4ecf:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    4ed2:	04 1d                	add    al,0x1d
    4ed4:	03 00                	add    eax,DWORD PTR [eax]
    4ed6:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    4ed9:	04 e5                	add    al,0xe5
    4edb:	04 00                	add    al,0x0
    4edd:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    4ee0:	04 9e                	add    al,0x9e
    4ee2:	02 00                	add    al,BYTE PTR [eax]
    4ee4:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4ee7:	04 e3                	add    al,0xe3
    4ee9:	02 00                	add    al,BYTE PTR [eax]
    4eeb:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4eee:	04 af                	add    al,0xaf
    4ef0:	04 00                	add    al,0x0
    4ef2:	00 00                	add    BYTE PTR [eax],al
    4ef4:	03 04 5c             	add    eax,DWORD PTR [esp+ebx*2]
    4ef7:	04 00                	add    al,0x0
    4ef9:	00 01                	add    BYTE PTR [ecx],al
    4efb:	03 04 ab             	add    eax,DWORD PTR [ebx+ebp*4]
    4efe:	03 00                	add    eax,DWORD PTR [eax]
    4f00:	00 02                	add    BYTE PTR [edx],al
    4f02:	03 04 84             	add    eax,DWORD PTR [esp+eax*4]
    4f05:	03 00                	add    eax,DWORD PTR [eax]
    4f07:	00 03                	add    BYTE PTR [ebx],al
    4f09:	03 04 22             	add    eax,DWORD PTR [edx+eiz*1]
    4f0c:	04 00                	add    al,0x0
    4f0e:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4f11:	04 85                	add    al,0x85
    4f13:	04 00                	add    al,0x0
    4f15:	00 05 03 04 d0 03    	add    BYTE PTR ds:0x3d00403,al
    4f1b:	00 00                	add    BYTE PTR [eax],al
    4f1d:	06                   	push   es
    4f1e:	03 00                	add    eax,DWORD PTR [eax]
    4f20:	05 04 07 61 00       	add    eax,0x610704
    4f25:	00 00                	add    BYTE PTR [eax],al
    4f27:	06                   	push   es
    4f28:	04 05                	add    al,0x5
    4f2a:	69 6e 74 00 05 01 06 	imul   ebp,DWORD PTR [esi+0x74],0x6010500
    4f31:	8c 00                	mov    WORD PTR [eax],es
    4f33:	00 00                	add    BYTE PTR [eax],al
    4f35:	05 01 06 85 00       	add    eax,0x850601
    4f3a:	00 00                	add    BYTE PTR [eax],al
    4f3c:	05 02 05 72 01       	add    eax,0x1720502
    4f41:	00 00                	add    BYTE PTR [eax],al
    4f43:	05 08 05 00 00       	add    eax,0x508
    4f48:	00 00                	add    BYTE PTR [eax],al
    4f4a:	05 01 08 83 00       	add    eax,0x830801
    4f4f:	00 00                	add    BYTE PTR [eax],al
    4f51:	05 02 07 19 01       	add    eax,0x1190702
    4f56:	00 00                	add    BYTE PTR [eax],al
    4f58:	07                   	pop    es
    4f59:	0e                   	push   cs
    4f5a:	00 00                	add    BYTE PTR [eax],al
    4f5c:	00 02                	add    BYTE PTR [edx],al
    4f5e:	34 12                	xor    al,0x12
    4f60:	01 00                	add    DWORD PTR [eax],eax
    4f62:	00 05 08 07 57 00    	add    BYTE PTR ds:0x570708,al
    4f68:	00 00                	add    BYTE PTR [eax],al
    4f6a:	07                   	pop    es
    4f6b:	4d                   	dec    ebp
    4f6c:	00 00                	add    BYTE PTR [eax],al
    4f6e:	00 02                	add    BYTE PTR [edx],al
    4f70:	56                   	push   esi
    4f71:	12 01                	adc    al,BYTE PTR [ecx]
    4f73:	00 00                	add    BYTE PTR [eax],al
    4f75:	05 04 05 05 00       	add    eax,0x50504
    4f7a:	00 00                	add    BYTE PTR [eax],al
    4f7c:	05 0c 04 66 01       	add    eax,0x166040c
    4f81:	00 00                	add    BYTE PTR [eax],al
    4f83:	07                   	pop    es
    4f84:	54                   	push   esp
    4f85:	0f 00 00             	sldt   WORD PTR [eax]
    4f88:	03 2a                	add    ebp,DWORD PTR [edx]
    4f8a:	67 01 00             	add    DWORD PTR [bx+si],eax
    4f8d:	00 08                	add    BYTE PTR [eax],cl
    4f8f:	74 6d                	je     4ffe <sysEnter_Vector-0x12b002>
    4f91:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    4f94:	2c 10                	sub    al,0x10
    4f96:	02 00                	add    al,BYTE PTR [eax]
    4f98:	00 09                	add    BYTE PTR [ecx],cl
    4f9a:	97                   	xchg   edi,eax
    4f9b:	0f 00 00             	sldt   WORD PTR [eax]
    4f9e:	03 2e                	add    ebp,DWORD PTR [esi]
    4fa0:	19 01                	sbb    DWORD PTR [ecx],eax
    4fa2:	00 00                	add    BYTE PTR [eax],al
    4fa4:	00 09                	add    BYTE PTR [ecx],cl
    4fa6:	35 0f 00 00 03       	xor    eax,0x300000f
    4fab:	2f                   	das    
    4fac:	19 01                	sbb    DWORD PTR [ecx],eax
    4fae:	00 00                	add    BYTE PTR [eax],al
    4fb0:	04 09                	add    al,0x9
    4fb2:	c7                   	(bad)  
    4fb3:	0e                   	push   cs
    4fb4:	00 00                	add    BYTE PTR [eax],al
    4fb6:	03 30                	add    esi,DWORD PTR [eax]
    4fb8:	19 01                	sbb    DWORD PTR [ecx],eax
    4fba:	00 00                	add    BYTE PTR [eax],al
    4fbc:	08 09                	or     BYTE PTR [ecx],cl
    4fbe:	8f                   	(bad)  
    4fbf:	0f 00 00             	sldt   WORD PTR [eax]
    4fc2:	03 31                	add    esi,DWORD PTR [ecx]
    4fc4:	19 01                	sbb    DWORD PTR [ecx],eax
    4fc6:	00 00                	add    BYTE PTR [eax],al
    4fc8:	0c 09                	or     al,0x9
    4fca:	ff 0e                	dec    DWORD PTR [esi]
    4fcc:	00 00                	add    BYTE PTR [eax],al
    4fce:	03 32                	add    esi,DWORD PTR [edx]
    4fd0:	19 01                	sbb    DWORD PTR [ecx],eax
    4fd2:	00 00                	add    BYTE PTR [eax],al
    4fd4:	10 09                	adc    BYTE PTR [ecx],cl
    4fd6:	06                   	push   es
    4fd7:	0f 00 00             	sldt   WORD PTR [eax]
    4fda:	03 33                	add    esi,DWORD PTR [ebx]
    4fdc:	19 01                	sbb    DWORD PTR [ecx],eax
    4fde:	00 00                	add    BYTE PTR [eax],al
    4fe0:	14 09                	adc    al,0x9
    4fe2:	81 0f 00 00 03 34    	or     DWORD PTR [edi],0x34030000
    4fe8:	19 01                	sbb    DWORD PTR [ecx],eax
    4fea:	00 00                	add    BYTE PTR [eax],al
    4fec:	18 09                	sbb    BYTE PTR [ecx],cl
    4fee:	3c 0f                	cmp    al,0xf
    4ff0:	00 00                	add    BYTE PTR [eax],al
    4ff2:	03 35 19 01 00 00    	add    esi,DWORD PTR ds:0x119
    4ff8:	1c 09                	sbb    al,0x9
    4ffa:	1c 0f                	sbb    al,0xf
    4ffc:	00 00                	add    BYTE PTR [eax],al
    4ffe:	03 36                	add    esi,DWORD PTR [esi]
    5000:	19 01                	sbb    DWORD PTR [ecx],eax
    5002:	00 00                	add    BYTE PTR [eax],al
    5004:	20 09                	and    BYTE PTR [ecx],cl
    5006:	77 0f                	ja     5017 <sysEnter_Vector-0x12afe9>
    5008:	00 00                	add    BYTE PTR [eax],al
    500a:	03 37                	add    esi,DWORD PTR [edi]
    500c:	67 01 00             	add    DWORD PTR [bx+si],eax
    500f:	00 24 09             	add    BYTE PTR [ecx+ecx*1],ah
    5012:	9e                   	sahf   
    5013:	0f 00 00             	sldt   WORD PTR [eax]
    5016:	03 38                	add    edi,DWORD PTR [eax]
    5018:	10 02                	adc    BYTE PTR [edx],al
    501a:	00 00                	add    BYTE PTR [eax],al
    501c:	28 00                	sub    BYTE PTR [eax],al
    501e:	0a 04 16             	or     al,BYTE PTR [esi+edx*1]
    5021:	02 00                	add    al,BYTE PTR [eax]
    5023:	00 0b                	add    BYTE PTR [ebx],cl
    5025:	20 01                	and    BYTE PTR [ecx],al
    5027:	00 00                	add    BYTE PTR [eax],al
    5029:	05 01 02 13 01       	add    eax,0x1130201
    502e:	00 00                	add    BYTE PTR [eax],al
    5030:	05 04 07 83 01       	add    eax,0x1830704
    5035:	00 00                	add    BYTE PTR [eax],al
    5037:	05 04 07 5c 00       	add    eax,0x5c0704
    503c:	00 00                	add    BYTE PTR [eax],al
    503e:	0a 04 20             	or     al,BYTE PTR [eax+eiz*1]
    5041:	01 00                	add    DWORD PTR [eax],eax
    5043:	00 0c cf             	add    BYTE PTR [edi+ecx*8],cl
    5046:	0e                   	push   cs
    5047:	00 00                	add    BYTE PTR [eax],al
    5049:	01 17                	add    DWORD PTR [edi],edx
    504b:	75 01                	jne    504e <sysEnter_Vector-0x12afb2>
    504d:	00 00                	add    BYTE PTR [eax],al
    504f:	84 3b                	test   BYTE PTR [ebx],bh
    5051:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
    5057:	01 9c 5e 02 00 00 0d 	add    DWORD PTR [esi+ebx*2+0xd000002],ebx
    505e:	f4                   	hlt    
    505f:	04 00                	add    al,0x0
    5061:	00 01                	add    BYTE PTR [ecx],al
    5063:	19 4a 01             	sbb    DWORD PTR [edx+0x1],ecx
    5066:	00 00                	add    BYTE PTR [eax],al
    5068:	02 91 6c 00 0e 2b    	add    dl,BYTE PTR [ecx+0x2b0e006c]
    506e:	0f 00 00             	sldt   WORD PTR [eax]
    5071:	01 1f                	add    DWORD PTR [edi],ebx
    5073:	cc                   	int3   
    5074:	02 00                	add    al,BYTE PTR [eax]
    5076:	00 c8                	add    al,cl
    5078:	3b 00                	cmp    eax,DWORD PTR [eax]
    507a:	9f                   	lahf   
    507b:	19 03                	sbb    DWORD PTR [ebx],eax
    507d:	00 00                	add    BYTE PTR [eax],al
    507f:	01 9c cc 02 00 00 0f 	add    DWORD PTR [esp+ecx*8+0xf000002],ebx
    5086:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    5087:	0f 00 00             	sldt   WORD PTR [eax]
    508a:	01 1f                	add    DWORD PTR [edi],ebx
    508c:	d2 02                	rol    BYTE PTR [edx],cl
    508e:	00 00                	add    BYTE PTR [eax],al
    5090:	02 91 00 0f 4e 0f    	add    dl,BYTE PTR [ecx+0xf4e0f00]
    5096:	00 00                	add    BYTE PTR [eax],al
    5098:	01 1f                	add    DWORD PTR [edi],ebx
    509a:	cc                   	int3   
    509b:	02 00                	add    al,BYTE PTR [eax]
    509d:	00 02                	add    BYTE PTR [edx],al
    509f:	91                   	xchg   ecx,eax
    50a0:	04 0d                	add    al,0xd
    50a2:	30 05 00 00 01 21    	xor    BYTE PTR ds:0x21010000,al
    50a8:	75 01                	jne    50ab <sysEnter_Vector-0x12af55>
    50aa:	00 00                	add    BYTE PTR [eax],al
    50ac:	02 91 68 0d 67 0f    	add    dl,BYTE PTR [ecx+0xf670d68]
    50b2:	00 00                	add    BYTE PTR [eax],al
    50b4:	01 22                	add    DWORD PTR [edx],esp
    50b6:	29 02                	sub    DWORD PTR [edx],eax
    50b8:	00 00                	add    BYTE PTR [eax],al
    50ba:	02 91 64 0d 25 0f    	add    dl,BYTE PTR [ecx+0xf250d64]
    50c0:	00 00                	add    BYTE PTR [eax],al
    50c2:	01 22                	add    DWORD PTR [edx],esp
    50c4:	29 02                	sub    DWORD PTR [edx],eax
    50c6:	00 00                	add    BYTE PTR [eax],al
    50c8:	02 91 70 0d 09 0f    	add    dl,BYTE PTR [ecx+0xf090d70]
    50ce:	00 00                	add    BYTE PTR [eax],al
    50d0:	01 23                	add    DWORD PTR [ebx],esp
    50d2:	19 01                	sbb    DWORD PTR [ecx],eax
    50d4:	00 00                	add    BYTE PTR [eax],al
    50d6:	02 91 6c 00 0a 04    	add    dl,BYTE PTR [ecx+0x40a006c]
    50dc:	80 01 00             	add    BYTE PTR [ecx],0x0
    50df:	00 0a                	add    BYTE PTR [edx],cl
    50e1:	04 d8                	add    al,0xd8
    50e3:	02 00                	add    al,BYTE PTR [eax]
    50e5:	00 0b                	add    BYTE PTR [ebx],cl
    50e7:	75 01                	jne    50ea <sysEnter_Vector-0x12af16>
    50e9:	00 00                	add    BYTE PTR [eax],al
    50eb:	10 ea                	adc    dl,ch
    50ed:	0e                   	push   cs
    50ee:	00 00                	add    BYTE PTR [eax],al
    50f0:	01 3c cc             	add    DWORD PTR [esp+ecx*8],edi
    50f3:	02 00                	add    al,BYTE PTR [eax]
    50f5:	00 e1                	add    cl,ah
    50f7:	3e 00 9f 1d 00 00 00 	add    BYTE PTR ds:[edi+0x1d],bl
    50fe:	01 9c 13 03 00 00 0f 	add    DWORD PTR [ebx+edx*1+0xf000003],ebx
    5105:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    5106:	0f 00 00             	sldt   WORD PTR [eax]
    5109:	01 3c d2             	add    DWORD PTR [edx+edx*8],edi
    510c:	02 00                	add    al,BYTE PTR [eax]
    510e:	00 02                	add    BYTE PTR [edx],al
    5110:	91                   	xchg   ecx,eax
    5111:	00 0f                	add    BYTE PTR [edi],cl
    5113:	4e                   	dec    esi
    5114:	0f 00 00             	sldt   WORD PTR [eax]
    5117:	01 3c cc             	add    DWORD PTR [esp+ecx*8],edi
    511a:	02 00                	add    al,BYTE PTR [eax]
    511c:	00 02                	add    BYTE PTR [edx],al
    511e:	91                   	xchg   ecx,eax
    511f:	04 00                	add    al,0x0
    5121:	10 bd 0e 00 00 01    	adc    BYTE PTR [ebp+0x100000e],bh
    5127:	41                   	inc    ecx
    5128:	cc                   	int3   
    5129:	02 00                	add    al,BYTE PTR [eax]
    512b:	00 fe                	add    dh,bh
    512d:	3e 00 9f 3d 00 00 00 	add    BYTE PTR ds:[edi+0x3d],bl
    5134:	01 9c 47 03 00 00 0f 	add    DWORD PTR [edi+eax*2+0xf000003],ebx
    513b:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    513c:	0f 00 00             	sldt   WORD PTR [eax]
    513f:	01 41 d2             	add    DWORD PTR [ecx-0x2e],eax
    5142:	02 00                	add    al,BYTE PTR [eax]
    5144:	00 02                	add    BYTE PTR [edx],al
    5146:	91                   	xchg   ecx,eax
    5147:	00 11                	add    BYTE PTR [ecx],dl
    5149:	74 00                	je     514b <sysEnter_Vector-0x12aeb5>
    514b:	01 42 75             	add    DWORD PTR [edx+0x75],eax
    514e:	01 00                	add    DWORD PTR [eax],eax
    5150:	00 02                	add    BYTE PTR [edx],al
    5152:	91                   	xchg   ecx,eax
    5153:	74 00                	je     5155 <sysEnter_Vector-0x12aeab>
    5155:	10 ac 0f 00 00 01 48 	adc    BYTE PTR [edi+ecx*1+0x48010000],ch
    515c:	cc                   	int3   
    515d:	02 00                	add    al,BYTE PTR [eax]
    515f:	00 3b                	add    BYTE PTR [ebx],bh
    5161:	3f                   	aas    
    5162:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    5168:	01 9c 89 03 00 00 0f 	add    DWORD PTR [ecx+ecx*4+0xf000003],ebx
    516f:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    5170:	0f 00 00             	sldt   WORD PTR [eax]
    5173:	01 48 d2             	add    DWORD PTR [eax-0x2e],ecx
    5176:	02 00                	add    al,BYTE PTR [eax]
    5178:	00 02                	add    BYTE PTR [edx],al
    517a:	91                   	xchg   ecx,eax
    517b:	00 0f                	add    BYTE PTR [edi],cl
    517d:	4e                   	dec    esi
    517e:	0f 00 00             	sldt   WORD PTR [eax]
    5181:	01 48 cc             	add    DWORD PTR [eax-0x34],ecx
    5184:	02 00                	add    al,BYTE PTR [eax]
    5186:	00 02                	add    BYTE PTR [edx],al
    5188:	91                   	xchg   ecx,eax
    5189:	04 11                	add    al,0x11
    518b:	74 00                	je     518d <sysEnter_Vector-0x12ae73>
    518d:	01 4a 75             	add    DWORD PTR [edx+0x75],ecx
    5190:	01 00                	add    DWORD PTR [eax],eax
    5192:	00 02                	add    BYTE PTR [edx],al
    5194:	91                   	xchg   ecx,eax
    5195:	74 00                	je     5197 <sysEnter_Vector-0x12ae69>
    5197:	10 5b 0f             	adc    BYTE PTR [ebx+0xf],bl
    519a:	00 00                	add    BYTE PTR [eax],al
    519c:	01 50 cc             	add    DWORD PTR [eax-0x34],edx
    519f:	02 00                	add    al,BYTE PTR [eax]
    51a1:	00 70 3f             	add    BYTE PTR [eax+0x3f],dh
    51a4:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    51aa:	01 9c bf 03 00 00 0f 	add    DWORD PTR [edi+edi*4+0xf000003],ebx
    51b1:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    51b2:	0f 00 00             	sldt   WORD PTR [eax]
    51b5:	01 50 d2             	add    DWORD PTR [eax-0x2e],edx
    51b8:	02 00                	add    al,BYTE PTR [eax]
    51ba:	00 02                	add    BYTE PTR [edx],al
    51bc:	91                   	xchg   ecx,eax
    51bd:	00 0f                	add    BYTE PTR [edi],cl
    51bf:	4e                   	dec    esi
    51c0:	0f 00 00             	sldt   WORD PTR [eax]
    51c3:	01 50 cc             	add    DWORD PTR [eax-0x34],edx
    51c6:	02 00                	add    al,BYTE PTR [eax]
    51c8:	00 02                	add    BYTE PTR [edx],al
    51ca:	91                   	xchg   ecx,eax
    51cb:	04 00                	add    al,0x0
    51cd:	0e                   	push   cs
    51ce:	70 0f                	jo     51df <sysEnter_Vector-0x12ae21>
    51d0:	00 00                	add    BYTE PTR [eax],al
    51d2:	01 54 75 01          	add    DWORD PTR [ebp+esi*2+0x1],edx
    51d6:	00 00                	add    BYTE PTR [eax],al
    51d8:	8d 3f                	lea    edi,[edi]
    51da:	00 9f 57 08 00 00    	add    BYTE PTR [edi+0x857],bl
    51e0:	01 9c 57 04 00 00 0f 	add    DWORD PTR [edi+edx*2+0xf000004],ebx
    51e7:	4e                   	dec    esi
    51e8:	0f 00 00             	sldt   WORD PTR [eax]
    51eb:	01 54 cc 02          	add    DWORD PTR [esp+ecx*8+0x2],edx
    51ef:	00 00                	add    BYTE PTR [eax],al
    51f1:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    51f7:	79 00                	jns    51f9 <sysEnter_Vector-0x12ae07>
    51f9:	01 55 67             	add    DWORD PTR [ebp+0x67],edx
    51fc:	01 00                	add    DWORD PTR [eax],eax
    51fe:	00 02                	add    BYTE PTR [edx],al
    5200:	91                   	xchg   ecx,eax
    5201:	68 0d 09 0f 00       	push   0xf090d
    5206:	00 01                	add    BYTE PTR [ecx],al
    5208:	55                   	push   ebp
    5209:	67 01 00             	add    DWORD PTR [bx+si],eax
    520c:	00 02                	add    BYTE PTR [edx],al
    520e:	91                   	xchg   ecx,eax
    520f:	54                   	push   esp
    5210:	0d 06 0f 00 00       	or     eax,0xf06
    5215:	01 56 19             	add    DWORD PTR [esi+0x19],edx
    5218:	01 00                	add    DWORD PTR [eax],eax
    521a:	00 02                	add    BYTE PTR [edx],al
    521c:	91                   	xchg   ecx,eax
    521d:	4c                   	dec    esp
    521e:	0d 3f 0f 00 00       	or     eax,0xf3f
    5223:	01 57 19             	add    DWORD PTR [edi+0x19],edx
    5226:	01 00                	add    DWORD PTR [eax],eax
    5228:	00 02                	add    BYTE PTR [edx],al
    522a:	91                   	xchg   ecx,eax
    522b:	64                   	fs
    522c:	0d 0e 0f 00 00       	or     eax,0xf0e
    5231:	01 57 19             	add    DWORD PTR [edi+0x19],edx
    5234:	01 00                	add    DWORD PTR [eax],eax
    5236:	00 02                	add    BYTE PTR [edx],al
    5238:	91                   	xchg   ecx,eax
    5239:	60                   	pusha  
    523a:	0d f6 08 00 00       	or     eax,0x8f6
    523f:	01 58 67             	add    DWORD PTR [eax+0x67],ebx
    5242:	01 00                	add    DWORD PTR [eax],eax
    5244:	00 02                	add    BYTE PTR [edx],al
    5246:	91                   	xchg   ecx,eax
    5247:	50                   	push   eax
    5248:	0d c9 0f 00 00       	or     eax,0xfc9
    524d:	01 59 19             	add    DWORD PTR [ecx+0x19],ebx
    5250:	01 00                	add    DWORD PTR [eax],eax
    5252:	00 02                	add    BYTE PTR [edx],al
    5254:	91                   	xchg   ecx,eax
    5255:	5c                   	pop    esp
    5256:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    525a:	00 01                	add    BYTE PTR [ecx],al
    525c:	5a                   	pop    edx
    525d:	67 01 00             	add    DWORD PTR [bx+si],eax
    5260:	00 02                	add    BYTE PTR [edx],al
    5262:	91                   	xchg   ecx,eax
    5263:	58                   	pop    eax
    5264:	00 10                	add    BYTE PTR [eax],dl
    5266:	14 0f                	adc    al,0xf
    5268:	00 00                	add    BYTE PTR [eax],al
    526a:	01 bf cc 02 00 00    	add    DWORD PTR [edi+0x2cc],edi
    5270:	e4 47                	in     al,0x47
    5272:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    5278:	01 9c 9b 04 00 00 0f 	add    DWORD PTR [ebx+ebx*4+0xf000004],ebx
    527f:	30 05 00 00 01 bf    	xor    BYTE PTR ds:0xbf010000,al
    5285:	cc                   	int3   
    5286:	02 00                	add    al,BYTE PTR [eax]
    5288:	00 02                	add    BYTE PTR [edx],al
    528a:	91                   	xchg   ecx,eax
    528b:	00 0f                	add    BYTE PTR [edi],cl
    528d:	44                   	inc    esp
    528e:	0f 00 00             	sldt   WORD PTR [eax]
    5291:	01 bf 1b 02 00 00    	add    DWORD PTR [edi+0x21b],edi
    5297:	02 91 5c 0d d2 0e    	add    dl,BYTE PTR [ecx+0xed20d5c]
    529d:	00 00                	add    BYTE PTR [eax],al
    529f:	01 c1                	add    ecx,eax
    52a1:	75 01                	jne    52a4 <sysEnter_Vector-0x12ad5c>
    52a3:	00 00                	add    BYTE PTR [eax],al
    52a5:	02 91 6c 00 10 30    	add    dl,BYTE PTR [ecx+0x3010006c]
    52ab:	05 00 00 01 ca       	add    eax,0xca010000
    52b0:	75 01                	jne    52b3 <sysEnter_Vector-0x12ad4d>
    52b2:	00 00                	add    BYTE PTR [eax],al
    52b4:	51                   	push   ecx
    52b5:	48                   	dec    eax
    52b6:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
    52bc:	01 9c d1 04 00 00 0f 	add    DWORD PTR [ecx+edx*8+0xf000004],ebx
    52c3:	c2 0f 00             	ret    0xf
    52c6:	00 01                	add    BYTE PTR [ecx],al
    52c8:	ca d1 04             	retf   0x4d1
    52cb:	00 00                	add    BYTE PTR [eax],al
    52cd:	02 91 00 0d d2 0e    	add    dl,BYTE PTR [ecx+0xed20d00]
    52d3:	00 00                	add    BYTE PTR [eax],al
    52d5:	01 cc                	add    esp,ecx
    52d7:	4a                   	dec    edx
    52d8:	01 00                	add    DWORD PTR [eax],eax
    52da:	00 02                	add    BYTE PTR [edx],al
    52dc:	91                   	xchg   ecx,eax
    52dd:	6c                   	ins    BYTE PTR es:[edi],dx
    52de:	00 0a                	add    BYTE PTR [edx],cl
    52e0:	04 75                	add    al,0x75
    52e2:	01 00                	add    DWORD PTR [eax],eax
    52e4:	00 12                	add    BYTE PTR [edx],dl
    52e6:	a3 00 00 00 04       	mov    ds:0x4000000,eax
    52eb:	37                   	aaa    
    52ec:	4a                   	dec    edx
    52ed:	01 00                	add    DWORD PTR [eax],eax
    52ef:	00 05 03 6c 71 00    	add    BYTE PTR ds:0x716c03,al
    52f5:	9f                   	lahf   
    52f6:	12 34 01             	adc    dh,BYTE PTR [ecx+eax*1]
    52f9:	00 00                	add    BYTE PTR [eax],al
    52fb:	04 38                	add    al,0x38
    52fd:	4a                   	dec    edx
    52fe:	01 00                	add    DWORD PTR [eax],eax
    5300:	00 05 03 70 71 00    	add    BYTE PTR ds:0x717003,al
    5306:	9f                   	lahf   
    5307:	12 7b 00             	adc    bh,BYTE PTR [ebx+0x0]
    530a:	00 00                	add    BYTE PTR [eax],al
    530c:	04 39                	add    al,0x39
    530e:	4a                   	dec    edx
    530f:	01 00                	add    DWORD PTR [eax],eax
    5311:	00 05 03 68 71 00    	add    BYTE PTR ds:0x716803,al
    5317:	9f                   	lahf   
    5318:	12 7c 01 00          	adc    bh,BYTE PTR [ecx+eax*1+0x0]
    531c:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    531f:	67 01 00             	add    DWORD PTR [bx+si],eax
    5322:	00 05 03 78 71 00    	add    BYTE PTR ds:0x717803,al
    5328:	9f                   	lahf   
    5329:	12 6e 00             	adc    ch,BYTE PTR [esi+0x0]
    532c:	00 00                	add    BYTE PTR [eax],al
    532e:	05 34 2c 05 00       	add    eax,0x52c34
    5333:	00 05 03 64 71 00    	add    BYTE PTR ds:0x716403,al
    5339:	9f                   	lahf   
    533a:	0a 04 5c             	or     al,BYTE PTR [esp+ebx*2]
    533d:	01 00                	add    DWORD PTR [eax],eax
    533f:	00 12                	add    BYTE PTR [edx],dl
    5341:	91                   	xchg   ecx,eax
    5342:	00 00                	add    BYTE PTR [eax],al
    5344:	00 05 35 4a 01 00    	add    BYTE PTR ds:0x14a35,al
    534a:	00 05 03 60 71 00    	add    BYTE PTR ds:0x716003,al
    5350:	9f                   	lahf   
    5351:	12 41 00             	adc    al,BYTE PTR [ecx+0x0]
    5354:	00 00                	add    BYTE PTR [eax],al
    5356:	06                   	push   es
    5357:	58                   	pop    eax
    5358:	54                   	push   esp
    5359:	05 00 00 05 03       	add    eax,0x3050000
    535e:	74 71                	je     53d1 <sysEnter_Vector-0x12ac2f>
    5360:	00 9f 0a 04 30 02    	add    BYTE PTR [edi+0x230040a],bl
    5366:	00 00                	add    BYTE PTR [eax],al
    5368:	12 d8                	adc    bl,al
    536a:	0e                   	push   cs
    536b:	00 00                	add    BYTE PTR [eax],al
    536d:	01 0c 19             	add    DWORD PTR [ecx+ebx*1],ecx
    5370:	01 00                	add    DWORD PTR [eax],eax
    5372:	00 05 03 48 70 00    	add    BYTE PTR ds:0x704803,al
    5378:	9f                   	lahf   
    5379:	12 b9 0f 00 00 01    	adc    bh,BYTE PTR [ecx+0x100000f]
    537f:	0d 67 01 00 00       	or     eax,0x167
    5384:	05 03 b8 71 00       	add    eax,0x71b803
    5389:	9f                   	lahf   
    538a:	13 30                	adc    esi,DWORD PTR [eax]
    538c:	02 00                	add    al,BYTE PTR [eax]
    538e:	00 8c 05 00 00 14 22 	add    BYTE PTR [ebp+eax*1+0x22140000],cl
    5395:	02 00                	add    al,BYTE PTR [eax]
    5397:	00 01                	add    BYTE PTR [ecx],al
    5399:	00 12                	add    BYTE PTR [edx],dl
    539b:	e2 0e                	loop   53ab <sysEnter_Vector-0x12ac55>
    539d:	00 00                	add    BYTE PTR [eax],al
    539f:	01 0e                	add    DWORD PTR [esi],ecx
    53a1:	7c 05                	jl     53a8 <sysEnter_Vector-0x12ac58>
    53a3:	00 00                	add    BYTE PTR [eax],al
    53a5:	05 03 58 71 00       	add    eax,0x715803
    53aa:	9f                   	lahf   
    53ab:	12 f3                	adc    dh,bl
    53ad:	0e                   	push   cs
    53ae:	00 00                	add    BYTE PTR [eax],al
    53b0:	01 0f                	add    DWORD PTR [edi],ecx
    53b2:	19 01                	sbb    DWORD PTR [ecx],eax
    53b4:	00 00                	add    BYTE PTR [eax],al
    53b6:	05 03 c0 71 00       	add    eax,0x71c003
    53bb:	9f                   	lahf   
    53bc:	12 4e 0f             	adc    cl,BYTE PTR [esi+0xf]
    53bf:	00 00                	add    BYTE PTR [eax],al
    53c1:	01 10                	add    DWORD PTR [eax],edx
    53c3:	80 01 00             	add    BYTE PTR [ecx],0x0
    53c6:	00 05 03 e0 71 00    	add    BYTE PTR ds:0x71e003,al
    53cc:	9f                   	lahf   
    53cd:	13 19                	adc    ebx,DWORD PTR [ecx]
    53cf:	01 00                	add    DWORD PTR [eax],eax
    53d1:	00 d5                	add    ch,dl
    53d3:	05 00 00 14 22       	add    eax,0x22140000
    53d8:	02 00                	add    al,BYTE PTR [eax]
    53da:	00 01                	add    BYTE PTR [ecx],al
    53dc:	14 22                	adc    al,0x22
    53de:	02 00                	add    al,BYTE PTR [eax]
    53e0:	00 0b                	add    BYTE PTR [ebx],cl
    53e2:	00 12                	add    BYTE PTR [edx],dl
    53e4:	89 0f                	mov    DWORD PTR [edi],ecx
    53e6:	00 00                	add    BYTE PTR [eax],al
    53e8:	01 12                	add    DWORD PTR [edx],edx
    53ea:	e6 05                	out    0x5,al
    53ec:	00 00                	add    BYTE PTR [eax],al
    53ee:	05 03 40 6e 00       	add    eax,0x6e4003
    53f3:	9f                   	lahf   
    53f4:	0b bf 05 00 00 00    	or     edi,DWORD PTR [edi+0x5]

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 11                	sbb    DWORD PTR [ecx],edx
     2c1:	01 12                	add    DWORD PTR [edx],edx
     2c3:	06                   	push   es
     2c4:	40                   	inc    eax
     2c5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cb:	00 00                	add    BYTE PTR [eax],al
     2cd:	07                   	pop    es
     2ce:	05 00 03 08 3a       	add    eax,0x3a080300
     2d3:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2d8:	02 18                	add    bl,BYTE PTR [eax]
     2da:	00 00                	add    BYTE PTR [eax],al
     2dc:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2df:	03 08                	add    ecx,DWORD PTR [eax]
     2e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2e5:	49                   	dec    ecx
     2e6:	13 02                	adc    eax,DWORD PTR [edx]
     2e8:	18 00                	sbb    BYTE PTR [eax],al
     2ea:	00 09                	add    BYTE PTR [ecx],cl
     2ec:	34 00                	xor    al,0x0
     2ee:	03 0e                	add    ecx,DWORD PTR [esi]
     2f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f4:	49                   	dec    ecx
     2f5:	13 02                	adc    eax,DWORD PTR [edx]
     2f7:	18 00                	sbb    BYTE PTR [eax],al
     2f9:	00 0a                	add    BYTE PTR [edx],cl
     2fb:	01 01                	add    DWORD PTR [ecx],eax
     2fd:	49                   	dec    ecx
     2fe:	13 01                	adc    eax,DWORD PTR [ecx]
     300:	13 00                	adc    eax,DWORD PTR [eax]
     302:	00 0b                	add    BYTE PTR [ebx],cl
     304:	21 00                	and    DWORD PTR [eax],eax
     306:	49                   	dec    ecx
     307:	13 2f                	adc    ebp,DWORD PTR [edi]
     309:	0b 00                	or     eax,DWORD PTR [eax]
     30b:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     30e:	01 3f                	add    DWORD PTR [edi],edi
     310:	19 03                	sbb    DWORD PTR [ebx],eax
     312:	0e                   	push   cs
     313:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     315:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     317:	11 01                	adc    DWORD PTR [ecx],eax
     319:	12 06                	adc    al,BYTE PTR [esi]
     31b:	40                   	inc    eax
     31c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	0d 34 00 03 0e       	or     eax,0xe030034
     329:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     32b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     32d:	49                   	dec    ecx
     32e:	13 3f                	adc    edi,DWORD PTR [edi]
     330:	19 02                	sbb    DWORD PTR [edx],eax
     332:	18 00                	sbb    BYTE PTR [eax],al
     334:	00 0e                	add    BYTE PTR [esi],cl
     336:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	00 01                	add    BYTE PTR [ecx],al
     33e:	11 01                	adc    DWORD PTR [ecx],eax
     340:	25 0e 13 0b 03       	and    eax,0x30b130e
     345:	0e                   	push   cs
     346:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     348:	11 01                	adc    DWORD PTR [ecx],eax
     34a:	12 06                	adc    al,BYTE PTR [esi]
     34c:	10 17                	adc    BYTE PTR [edi],dl
     34e:	00 00                	add    BYTE PTR [eax],al
     350:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     353:	0b 0b                	or     ecx,DWORD PTR [ebx]
     355:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     358:	0e                   	push   cs
     359:	00 00                	add    BYTE PTR [eax],al
     35b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     360:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     363:	08 00                	or     BYTE PTR [eax],al
     365:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     368:	00 03                	add    BYTE PTR [ebx],al
     36a:	0e                   	push   cs
     36b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36f:	49                   	dec    ecx
     370:	13 00                	adc    eax,DWORD PTR [eax]
     372:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     378:	0b 0b                	or     ecx,DWORD PTR [ebx]
     37a:	49                   	dec    ecx
     37b:	13 3a                	adc    edi,DWORD PTR [edx]
     37d:	0b 3b                	or     edi,DWORD PTR [ebx]
     37f:	0b 01                	or     eax,DWORD PTR [ecx]
     381:	13 00                	adc    eax,DWORD PTR [eax]
     383:	00 06                	add    BYTE PTR [esi],al
     385:	28 00                	sub    BYTE PTR [eax],al
     387:	03 0e                	add    ecx,DWORD PTR [esi]
     389:	1c 0b                	sbb    al,0xb
     38b:	00 00                	add    BYTE PTR [eax],al
     38d:	07                   	pop    es
     38e:	28 00                	sub    BYTE PTR [eax],al
     390:	03 0e                	add    ecx,DWORD PTR [esi]
     392:	1c 05                	sbb    al,0x5
     394:	00 00                	add    BYTE PTR [eax],al
     396:	08 0f                	or     BYTE PTR [edi],cl
     398:	00 0b                	add    BYTE PTR [ebx],cl
     39a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     39d:	00 00                	add    BYTE PTR [eax],al
     39f:	09 2e                	or     DWORD PTR [esi],ebp
     3a1:	01 3f                	add    DWORD PTR [edi],edi
     3a3:	19 03                	sbb    DWORD PTR [ebx],eax
     3a5:	0e                   	push   cs
     3a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3aa:	27                   	daa    
     3ab:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3ae:	11 01                	adc    DWORD PTR [ecx],eax
     3b0:	12 06                	adc    al,BYTE PTR [esi]
     3b2:	40                   	inc    eax
     3b3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3b9:	00 00                	add    BYTE PTR [eax],al
     3bb:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     3c1:	0b 3b                	or     edi,DWORD PTR [ebx]
     3c3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3c6:	02 18                	add    bl,BYTE PTR [eax]
     3c8:	00 00                	add    BYTE PTR [eax],al
     3ca:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3cc:	01 11                	add    DWORD PTR [ecx],edx
     3ce:	01 12                	add    DWORD PTR [edx],edx
     3d0:	06                   	push   es
     3d1:	00 00                	add    BYTE PTR [eax],al
     3d3:	0c 34                	or     al,0x34
     3d5:	00 03                	add    BYTE PTR [ebx],al
     3d7:	08 3a                	or     BYTE PTR [edx],bh
     3d9:	0b 3b                	or     edi,DWORD PTR [ebx]
     3db:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3de:	02 18                	add    bl,BYTE PTR [eax]
     3e0:	00 00                	add    BYTE PTR [eax],al
     3e2:	0d 2e 01 3f 19       	or     eax,0x193f012e
     3e7:	03 0e                	add    ecx,DWORD PTR [esi]
     3e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ed:	27                   	daa    
     3ee:	19 11                	sbb    DWORD PTR [ecx],edx
     3f0:	01 12                	add    DWORD PTR [edx],edx
     3f2:	06                   	push   es
     3f3:	40                   	inc    eax
     3f4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3fa:	00 00                	add    BYTE PTR [eax],al
     3fc:	0e                   	push   cs
     3fd:	34 00                	xor    al,0x0
     3ff:	03 0e                	add    ecx,DWORD PTR [esi]
     401:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     403:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     405:	49                   	dec    ecx
     406:	13 02                	adc    eax,DWORD PTR [edx]
     408:	18 00                	sbb    BYTE PTR [eax],al
     40a:	00 0f                	add    BYTE PTR [edi],cl
     40c:	0b 01                	or     eax,DWORD PTR [ecx]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	01 13                	add    DWORD PTR [ebx],edx
     414:	00 00                	add    BYTE PTR [eax],al
     416:	10 05 00 03 08 3a    	adc    BYTE PTR ds:0x3a080300,al
     41c:	0b 3b                	or     edi,DWORD PTR [ebx]
     41e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     421:	02 18                	add    bl,BYTE PTR [eax]
     423:	00 00                	add    BYTE PTR [eax],al
     425:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
     428:	03 0e                	add    ecx,DWORD PTR [esi]
     42a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     42c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     42e:	49                   	dec    ecx
     42f:	13 3f                	adc    edi,DWORD PTR [edi]
     431:	19 02                	sbb    DWORD PTR [edx],eax
     433:	18 00                	sbb    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	01 11                	add    DWORD PTR [ecx],edx
     439:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     43f:	0e                   	push   cs
     440:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     442:	11 01                	adc    DWORD PTR [ecx],eax
     444:	12 06                	adc    al,BYTE PTR [esi]
     446:	10 17                	adc    BYTE PTR [edi],dl
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     44d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     44f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     452:	0e                   	push   cs
     453:	00 00                	add    BYTE PTR [eax],al
     455:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     458:	0b 0b                	or     ecx,DWORD PTR [ebx]
     45a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     45d:	08 00                	or     BYTE PTR [eax],al
     45f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     462:	00 03                	add    BYTE PTR [ebx],al
     464:	0e                   	push   cs
     465:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     467:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     469:	49                   	dec    ecx
     46a:	13 00                	adc    eax,DWORD PTR [eax]
     46c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     472:	49                   	dec    ecx
     473:	13 00                	adc    eax,DWORD PTR [eax]
     475:	00 06                	add    BYTE PTR [esi],al
     477:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     47b:	00 00                	add    BYTE PTR [eax],al
     47d:	07                   	pop    es
     47e:	13 01                	adc    eax,DWORD PTR [ecx]
     480:	03 0e                	add    ecx,DWORD PTR [esi]
     482:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     488:	01 13                	add    DWORD PTR [ebx],edx
     48a:	00 00                	add    BYTE PTR [eax],al
     48c:	08 0d 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,cl
     492:	0b 3b                	or     edi,DWORD PTR [ebx]
     494:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     497:	38 0b                	cmp    BYTE PTR [ebx],cl
     499:	00 00                	add    BYTE PTR [eax],al
     49b:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     4a1:	0b 3b                	or     edi,DWORD PTR [ebx]
     4a3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4a6:	38 05 00 00 0a 01    	cmp    BYTE PTR ds:0x10a0000,al
     4ac:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     4af:	01 13                	add    DWORD PTR [ebx],edx
     4b1:	00 00                	add    BYTE PTR [eax],al
     4b3:	0b 21                	or     esp,DWORD PTR [ecx]
     4b5:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     4b8:	2f                   	das    
     4b9:	05 00 00 0c 13       	add    eax,0x130c0000
     4be:	01 03                	add    DWORD PTR [ebx],eax
     4c0:	0e                   	push   cs
     4c1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c7:	01 13                	add    DWORD PTR [ebx],edx
     4c9:	00 00                	add    BYTE PTR [eax],al
     4cb:	0d 04 01 03 0e       	or     eax,0xe030104
     4d0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4d2:	49                   	dec    ecx
     4d3:	13 3a                	adc    edi,DWORD PTR [edx]
     4d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     4d7:	0b 01                	or     eax,DWORD PTR [ecx]
     4d9:	13 00                	adc    eax,DWORD PTR [eax]
     4db:	00 0e                	add    BYTE PTR [esi],cl
     4dd:	28 00                	sub    BYTE PTR [eax],al
     4df:	03 0e                	add    ecx,DWORD PTR [esi]
     4e1:	1c 0b                	sbb    al,0xb
     4e3:	00 00                	add    BYTE PTR [eax],al
     4e5:	0f 28 00             	movaps xmm0,XMMWORD PTR [eax]
     4e8:	03 0e                	add    ecx,DWORD PTR [esi]
     4ea:	1c 05                	sbb    al,0x5
     4ec:	00 00                	add    BYTE PTR [eax],al
     4ee:	10 0f                	adc    BYTE PTR [edi],cl
     4f0:	00 0b                	add    BYTE PTR [ebx],cl
     4f2:	0b 00                	or     eax,DWORD PTR [eax]
     4f4:	00 11                	add    BYTE PTR [ecx],dl
     4f6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4f9:	19 03                	sbb    DWORD PTR [ebx],eax
     4fb:	0e                   	push   cs
     4fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     500:	27                   	daa    
     501:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     504:	11 01                	adc    DWORD PTR [ecx],eax
     506:	12 06                	adc    al,BYTE PTR [esi]
     508:	40                   	inc    eax
     509:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     50f:	00 00                	add    BYTE PTR [eax],al
     511:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
     517:	0b 3b                	or     edi,DWORD PTR [ebx]
     519:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     51c:	02 18                	add    bl,BYTE PTR [eax]
     51e:	00 00                	add    BYTE PTR [eax],al
     520:	13 2e                	adc    ebp,DWORD PTR [esi]
     522:	00 3f                	add    BYTE PTR [edi],bh
     524:	19 03                	sbb    DWORD PTR [ebx],eax
     526:	0e                   	push   cs
     527:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     529:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     52b:	11 01                	adc    DWORD PTR [ecx],eax
     52d:	12 06                	adc    al,BYTE PTR [esi]
     52f:	40                   	inc    eax
     530:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     536:	14 34                	adc    al,0x34
     538:	00 03                	add    BYTE PTR [ebx],al
     53a:	0e                   	push   cs
     53b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53f:	49                   	dec    ecx
     540:	13 02                	adc    eax,DWORD PTR [edx]
     542:	18 00                	sbb    BYTE PTR [eax],al
     544:	00 15 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,dl
     54a:	03 0e                	add    ecx,DWORD PTR [esi]
     54c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     54e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     550:	27                   	daa    
     551:	19 11                	sbb    DWORD PTR [ecx],edx
     553:	01 12                	add    DWORD PTR [edx],edx
     555:	06                   	push   es
     556:	40                   	inc    eax
     557:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     55d:	00 00                	add    BYTE PTR [eax],al
     55f:	16                   	push   ss
     560:	0b 01                	or     eax,DWORD PTR [ecx]
     562:	11 01                	adc    DWORD PTR [ecx],eax
     564:	12 06                	adc    al,BYTE PTR [esi]
     566:	01 13                	add    DWORD PTR [ebx],edx
     568:	00 00                	add    BYTE PTR [eax],al
     56a:	17                   	pop    ss
     56b:	34 00                	xor    al,0x0
     56d:	03 08                	add    ecx,DWORD PTR [eax]
     56f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     571:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     573:	49                   	dec    ecx
     574:	13 02                	adc    eax,DWORD PTR [edx]
     576:	18 00                	sbb    BYTE PTR [eax],al
     578:	00 18                	add    BYTE PTR [eax],bl
     57a:	0b 01                	or     eax,DWORD PTR [ecx]
     57c:	11 01                	adc    DWORD PTR [ecx],eax
     57e:	12 06                	adc    al,BYTE PTR [esi]
     580:	00 00                	add    BYTE PTR [eax],al
     582:	19 21                	sbb    DWORD PTR [ecx],esp
     584:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     587:	2f                   	das    
     588:	0b 00                	or     eax,DWORD PTR [eax]
     58a:	00 1a                	add    BYTE PTR [edx],bl
     58c:	05 00 03 08 3a       	add    eax,0x3a080300
     591:	0b 3b                	or     edi,DWORD PTR [ebx]
     593:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     596:	02 18                	add    bl,BYTE PTR [eax]
     598:	00 00                	add    BYTE PTR [eax],al
     59a:	1b 0a                	sbb    ecx,DWORD PTR [edx]
     59c:	00 03                	add    BYTE PTR [ebx],al
     59e:	0e                   	push   cs
     59f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a3:	11 01                	adc    DWORD PTR [ecx],eax
     5a5:	00 00                	add    BYTE PTR [eax],al
     5a7:	1c 34                	sbb    al,0x34
     5a9:	00 03                	add    BYTE PTR [ebx],al
     5ab:	0e                   	push   cs
     5ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5b0:	49                   	dec    ecx
     5b1:	13 3f                	adc    edi,DWORD PTR [edi]
     5b3:	19 02                	sbb    DWORD PTR [edx],eax
     5b5:	18 00                	sbb    BYTE PTR [eax],al
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	01 11                	add    DWORD PTR [ecx],edx
     5bb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5c1:	0e                   	push   cs
     5c2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5c4:	11 01                	adc    DWORD PTR [ecx],eax
     5c6:	12 06                	adc    al,BYTE PTR [esi]
     5c8:	10 17                	adc    BYTE PTR [edi],dl
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     5cf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5d1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5d4:	0e                   	push   cs
     5d5:	00 00                	add    BYTE PTR [eax],al
     5d7:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     5da:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5dc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5df:	08 00                	or     BYTE PTR [eax],al
     5e1:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     5e4:	00 03                	add    BYTE PTR [ebx],al
     5e6:	0e                   	push   cs
     5e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5eb:	49                   	dec    ecx
     5ec:	13 00                	adc    eax,DWORD PTR [eax]
     5ee:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     5f4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5f6:	49                   	dec    ecx
     5f7:	13 3a                	adc    edi,DWORD PTR [edx]
     5f9:	0b 3b                	or     edi,DWORD PTR [ebx]
     5fb:	0b 01                	or     eax,DWORD PTR [ecx]
     5fd:	13 00                	adc    eax,DWORD PTR [eax]
     5ff:	00 06                	add    BYTE PTR [esi],al
     601:	28 00                	sub    BYTE PTR [eax],al
     603:	03 0e                	add    ecx,DWORD PTR [esi]
     605:	1c 0b                	sbb    al,0xb
     607:	00 00                	add    BYTE PTR [eax],al
     609:	07                   	pop    es
     60a:	28 00                	sub    BYTE PTR [eax],al
     60c:	03 0e                	add    ecx,DWORD PTR [esi]
     60e:	1c 05                	sbb    al,0x5
     610:	00 00                	add    BYTE PTR [eax],al
     612:	08 0f                	or     BYTE PTR [edi],cl
     614:	00 0b                	add    BYTE PTR [ebx],cl
     616:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     619:	00 00                	add    BYTE PTR [eax],al
     61b:	09 2e                	or     DWORD PTR [esi],ebp
     61d:	01 3f                	add    DWORD PTR [edi],edi
     61f:	19 03                	sbb    DWORD PTR [ebx],eax
     621:	0e                   	push   cs
     622:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     624:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     626:	27                   	daa    
     627:	19 11                	sbb    DWORD PTR [ecx],edx
     629:	01 12                	add    DWORD PTR [edx],edx
     62b:	06                   	push   es
     62c:	40                   	inc    eax
     62d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     633:	00 00                	add    BYTE PTR [eax],al
     635:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     63b:	0b 3b                	or     edi,DWORD PTR [ebx]
     63d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     640:	02 18                	add    bl,BYTE PTR [eax]
     642:	00 00                	add    BYTE PTR [eax],al
     644:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     64a:	0b 3b                	or     edi,DWORD PTR [ebx]
     64c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     64f:	02 18                	add    bl,BYTE PTR [eax]
     651:	00 00                	add    BYTE PTR [eax],al
     653:	0c 34                	or     al,0x34
     655:	00 03                	add    BYTE PTR [ebx],al
     657:	0e                   	push   cs
     658:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     65a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     65c:	49                   	dec    ecx
     65d:	13 02                	adc    eax,DWORD PTR [edx]
     65f:	18 00                	sbb    BYTE PTR [eax],al
     661:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     667:	01 13                	add    DWORD PTR [ebx],edx
     669:	00 00                	add    BYTE PTR [eax],al
     66b:	0e                   	push   cs
     66c:	21 00                	and    DWORD PTR [eax],eax
     66e:	49                   	dec    ecx
     66f:	13 2f                	adc    ebp,DWORD PTR [edi]
     671:	0b 00                	or     eax,DWORD PTR [eax]
     673:	00 0f                	add    BYTE PTR [edi],cl
     675:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     678:	19 03                	sbb    DWORD PTR [ebx],eax
     67a:	0e                   	push   cs
     67b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     67d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     67f:	49                   	dec    ecx
     680:	13 11                	adc    edx,DWORD PTR [ecx]
     682:	01 12                	add    DWORD PTR [edx],edx
     684:	06                   	push   es
     685:	40                   	inc    eax
     686:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     691:	03 08                	add    ecx,DWORD PTR [eax]
     693:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     695:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     697:	49                   	dec    ecx
     698:	13 02                	adc    eax,DWORD PTR [edx]
     69a:	18 00                	sbb    BYTE PTR [eax],al
     69c:	00 11                	add    BYTE PTR [ecx],dl
     69e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     6a1:	19 03                	sbb    DWORD PTR [ebx],eax
     6a3:	0e                   	push   cs
     6a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6a8:	27                   	daa    
     6a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     6ac:	11 01                	adc    DWORD PTR [ecx],eax
     6ae:	12 06                	adc    al,BYTE PTR [esi]
     6b0:	40                   	inc    eax
     6b1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6b7:	00 00                	add    BYTE PTR [eax],al
     6b9:	12 0a                	adc    cl,BYTE PTR [edx]
     6bb:	00 03                	add    BYTE PTR [ebx],al
     6bd:	0e                   	push   cs
     6be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c2:	11 01                	adc    DWORD PTR [ecx],eax
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     6c9:	03 0e                	add    ecx,DWORD PTR [esi]
     6cb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6cd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6cf:	49                   	dec    ecx
     6d0:	13 3f                	adc    edi,DWORD PTR [edi]
     6d2:	19 02                	sbb    DWORD PTR [edx],eax
     6d4:	18 00                	sbb    BYTE PTR [eax],al
     6d6:	00 00                	add    BYTE PTR [eax],al
     6d8:	01 11                	add    DWORD PTR [ecx],edx
     6da:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6e0:	0e                   	push   cs
     6e1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6e3:	11 01                	adc    DWORD PTR [ecx],eax
     6e5:	12 06                	adc    al,BYTE PTR [esi]
     6e7:	10 17                	adc    BYTE PTR [edi],dl
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 16                	add    dl,BYTE PTR [esi]
     6ed:	00 03                	add    BYTE PTR [ebx],al
     6ef:	0e                   	push   cs
     6f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f4:	49                   	dec    ecx
     6f5:	13 00                	adc    eax,DWORD PTR [eax]
     6f7:	00 03                	add    BYTE PTR [ebx],al
     6f9:	0f 00 0b             	str    WORD PTR [ebx]
     6fc:	0b 03                	or     eax,DWORD PTR [ebx]
     6fe:	0e                   	push   cs
     6ff:	49                   	dec    ecx
     700:	13 00                	adc    eax,DWORD PTR [eax]
     702:	00 04 24             	add    BYTE PTR [esp],al
     705:	00 0b                	add    BYTE PTR [ebx],cl
     707:	0b 3e                	or     edi,DWORD PTR [esi]
     709:	0b 03                	or     eax,DWORD PTR [ebx]
     70b:	0e                   	push   cs
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	05 24 00 0b 0b       	add    eax,0xb0b0024
     713:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     716:	08 00                	or     BYTE PTR [eax],al
     718:	00 06                	add    BYTE PTR [esi],al
     71a:	0f 00 0b             	str    WORD PTR [ebx]
     71d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     720:	00 00                	add    BYTE PTR [eax],al
     722:	07                   	pop    es
     723:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     727:	00 00                	add    BYTE PTR [eax],al
     729:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     72c:	03 0e                	add    ecx,DWORD PTR [esi]
     72e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     730:	49                   	dec    ecx
     731:	13 3a                	adc    edi,DWORD PTR [edx]
     733:	0b 3b                	or     edi,DWORD PTR [ebx]
     735:	0b 01                	or     eax,DWORD PTR [ecx]
     737:	13 00                	adc    eax,DWORD PTR [eax]
     739:	00 09                	add    BYTE PTR [ecx],cl
     73b:	28 00                	sub    BYTE PTR [eax],al
     73d:	03 0e                	add    ecx,DWORD PTR [esi]
     73f:	1c 0b                	sbb    al,0xb
     741:	00 00                	add    BYTE PTR [eax],al
     743:	0a 28                	or     ch,BYTE PTR [eax]
     745:	00 03                	add    BYTE PTR [ebx],al
     747:	0e                   	push   cs
     748:	1c 05                	sbb    al,0x5
     74a:	00 00                	add    BYTE PTR [eax],al
     74c:	0b 0f                	or     ecx,DWORD PTR [edi]
     74e:	00 0b                	add    BYTE PTR [ebx],cl
     750:	0b 00                	or     eax,DWORD PTR [eax]
     752:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     755:	01 3f                	add    DWORD PTR [edi],edi
     757:	19 03                	sbb    DWORD PTR [ebx],eax
     759:	0e                   	push   cs
     75a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     75c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     75e:	27                   	daa    
     75f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     762:	11 01                	adc    DWORD PTR [ecx],eax
     764:	12 06                	adc    al,BYTE PTR [esi]
     766:	40                   	inc    eax
     767:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     76d:	00 00                	add    BYTE PTR [eax],al
     76f:	0d 05 00 03 0e       	or     eax,0xe030005
     774:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     776:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     778:	49                   	dec    ecx
     779:	13 02                	adc    eax,DWORD PTR [edx]
     77b:	18 00                	sbb    BYTE PTR [eax],al
     77d:	00 0e                	add    BYTE PTR [esi],cl
     77f:	34 00                	xor    al,0x0
     781:	03 0e                	add    ecx,DWORD PTR [esi]
     783:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     785:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     787:	49                   	dec    ecx
     788:	13 02                	adc    eax,DWORD PTR [edx]
     78a:	18 00                	sbb    BYTE PTR [eax],al
     78c:	00 0f                	add    BYTE PTR [edi],cl
     78e:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     791:	19 03                	sbb    DWORD PTR [ebx],eax
     793:	0e                   	push   cs
     794:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     796:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     798:	11 01                	adc    DWORD PTR [ecx],eax
     79a:	12 06                	adc    al,BYTE PTR [esi]
     79c:	40                   	inc    eax
     79d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7a3:	10 2e                	adc    BYTE PTR [esi],ch
     7a5:	00 3f                	add    BYTE PTR [edi],bh
     7a7:	19 03                	sbb    DWORD PTR [ebx],eax
     7a9:	0e                   	push   cs
     7aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ae:	27                   	daa    
     7af:	19 11                	sbb    DWORD PTR [ecx],edx
     7b1:	01 12                	add    DWORD PTR [edx],edx
     7b3:	06                   	push   es
     7b4:	40                   	inc    eax
     7b5:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7bb:	11 2e                	adc    DWORD PTR [esi],ebp
     7bd:	01 3f                	add    DWORD PTR [edi],edi
     7bf:	19 03                	sbb    DWORD PTR [ebx],eax
     7c1:	0e                   	push   cs
     7c2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c6:	27                   	daa    
     7c7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7ca:	11 01                	adc    DWORD PTR [ecx],eax
     7cc:	12 06                	adc    al,BYTE PTR [esi]
     7ce:	40                   	inc    eax
     7cf:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7d5:	00 00                	add    BYTE PTR [eax],al
     7d7:	12 18                	adc    bl,BYTE PTR [eax]
     7d9:	00 00                	add    BYTE PTR [eax],al
     7db:	00 13                	add    BYTE PTR [ebx],dl
     7dd:	0b 01                	or     eax,DWORD PTR [ecx]
     7df:	11 01                	adc    DWORD PTR [ecx],eax
     7e1:	12 06                	adc    al,BYTE PTR [esi]
     7e3:	00 00                	add    BYTE PTR [eax],al
     7e5:	14 34                	adc    al,0x34
     7e7:	00 03                	add    BYTE PTR [ebx],al
     7e9:	08 3a                	or     BYTE PTR [edx],bh
     7eb:	0b 3b                	or     edi,DWORD PTR [ebx]
     7ed:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     7f0:	02 18                	add    bl,BYTE PTR [eax]
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7f9:	03 0e                	add    ecx,DWORD PTR [esi]
     7fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ff:	27                   	daa    
     800:	19 11                	sbb    DWORD PTR [ecx],edx
     802:	01 12                	add    DWORD PTR [edx],edx
     804:	06                   	push   es
     805:	40                   	inc    eax
     806:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     80c:	00 00                	add    BYTE PTR [eax],al
     80e:	16                   	push   ss
     80f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     812:	19 03                	sbb    DWORD PTR [ebx],eax
     814:	0e                   	push   cs
     815:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     817:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     819:	49                   	dec    ecx
     81a:	13 11                	adc    edx,DWORD PTR [ecx]
     81c:	01 12                	add    DWORD PTR [edx],edx
     81e:	06                   	push   es
     81f:	40                   	inc    eax
     820:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     826:	00 00                	add    BYTE PTR [eax],al
     828:	17                   	pop    ss
     829:	05 00 03 08 3a       	add    eax,0x3a080300
     82e:	0b 3b                	or     edi,DWORD PTR [ebx]
     830:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     833:	02 18                	add    bl,BYTE PTR [eax]
     835:	00 00                	add    BYTE PTR [eax],al
     837:	18 0b                	sbb    BYTE PTR [ebx],cl
     839:	01 11                	add    DWORD PTR [ecx],edx
     83b:	01 12                	add    DWORD PTR [edx],edx
     83d:	06                   	push   es
     83e:	01 13                	add    DWORD PTR [ebx],edx
     840:	00 00                	add    BYTE PTR [eax],al
     842:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     845:	03 0e                	add    ecx,DWORD PTR [esi]
     847:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     849:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     84f:	00 00                	add    BYTE PTR [eax],al
     851:	1a 2e                	sbb    ch,BYTE PTR [esi]
     853:	01 3f                	add    DWORD PTR [edi],edi
     855:	19 03                	sbb    DWORD PTR [ebx],eax
     857:	0e                   	push   cs
     858:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     85a:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     860:	11 01                	adc    DWORD PTR [ecx],eax
     862:	12 06                	adc    al,BYTE PTR [esi]
     864:	40                   	inc    eax
     865:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     86b:	00 00                	add    BYTE PTR [eax],al
     86d:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     873:	0b 3b                	or     edi,DWORD PTR [ebx]
     875:	05 49 13 02 18       	add    eax,0x18021349
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	1c 34                	sbb    al,0x34
     87e:	00 03                	add    BYTE PTR [ebx],al
     880:	08 3a                	or     BYTE PTR [edx],bh
     882:	0b 3b                	or     edi,DWORD PTR [ebx]
     884:	05 49 13 02 18       	add    eax,0x18021349
     889:	00 00                	add    BYTE PTR [eax],al
     88b:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     890:	00 00                	add    BYTE PTR [eax],al
     892:	1e                   	push   ds
     893:	01 01                	add    DWORD PTR [ecx],eax
     895:	49                   	dec    ecx
     896:	13 01                	adc    eax,DWORD PTR [ecx]
     898:	13 00                	adc    eax,DWORD PTR [eax]
     89a:	00 1f                	add    BYTE PTR [edi],bl
     89c:	21 00                	and    DWORD PTR [eax],eax
     89e:	49                   	dec    ecx
     89f:	13 2f                	adc    ebp,DWORD PTR [edi]
     8a1:	05 00 00 20 21       	add    eax,0x21200000
     8a6:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     8a9:	2f                   	das    
     8aa:	0b 00                	or     eax,DWORD PTR [eax]
     8ac:	00 21                	add    BYTE PTR [ecx],ah
     8ae:	05 00 03 08 3a       	add    eax,0x3a080300
     8b3:	0b 3b                	or     edi,DWORD PTR [ebx]
     8b5:	05 49 13 02 18       	add    eax,0x18021349
     8ba:	00 00                	add    BYTE PTR [eax],al
     8bc:	22 34 00             	and    dh,BYTE PTR [eax+eax*1]
     8bf:	03 0e                	add    ecx,DWORD PTR [esi]
     8c1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8c3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8c5:	49                   	dec    ecx
     8c6:	13 3f                	adc    edi,DWORD PTR [edi]
     8c8:	19 02                	sbb    DWORD PTR [edx],eax
     8ca:	18 00                	sbb    BYTE PTR [eax],al
     8cc:	00 00                	add    BYTE PTR [eax],al
     8ce:	01 11                	add    DWORD PTR [ecx],edx
     8d0:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8d6:	0e                   	push   cs
     8d7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8d9:	11 01                	adc    DWORD PTR [ecx],eax
     8db:	12 06                	adc    al,BYTE PTR [esi]
     8dd:	10 17                	adc    BYTE PTR [edi],dl
     8df:	00 00                	add    BYTE PTR [eax],al
     8e1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8e4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8e6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8e9:	0e                   	push   cs
     8ea:	00 00                	add    BYTE PTR [eax],al
     8ec:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8ef:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8f1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8f4:	08 00                	or     BYTE PTR [eax],al
     8f6:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8f9:	00 03                	add    BYTE PTR [ebx],al
     8fb:	0e                   	push   cs
     8fc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8fe:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     900:	49                   	dec    ecx
     901:	13 00                	adc    eax,DWORD PTR [eax]
     903:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     909:	0b 0b                	or     ecx,DWORD PTR [ebx]
     90b:	49                   	dec    ecx
     90c:	13 3a                	adc    edi,DWORD PTR [edx]
     90e:	0b 3b                	or     edi,DWORD PTR [ebx]
     910:	0b 01                	or     eax,DWORD PTR [ecx]
     912:	13 00                	adc    eax,DWORD PTR [eax]
     914:	00 06                	add    BYTE PTR [esi],al
     916:	28 00                	sub    BYTE PTR [eax],al
     918:	03 0e                	add    ecx,DWORD PTR [esi]
     91a:	1c 0b                	sbb    al,0xb
     91c:	00 00                	add    BYTE PTR [eax],al
     91e:	07                   	pop    es
     91f:	28 00                	sub    BYTE PTR [eax],al
     921:	03 0e                	add    ecx,DWORD PTR [esi]
     923:	1c 05                	sbb    al,0x5
     925:	00 00                	add    BYTE PTR [eax],al
     927:	08 13                	or     BYTE PTR [ebx],dl
     929:	01 03                	add    DWORD PTR [ebx],eax
     92b:	0e                   	push   cs
     92c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     92e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     930:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     932:	01 13                	add    DWORD PTR [ebx],edx
     934:	00 00                	add    BYTE PTR [eax],al
     936:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     93c:	0b 3b                	or     edi,DWORD PTR [ebx]
     93e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     941:	38 0b                	cmp    BYTE PTR [ebx],cl
     943:	00 00                	add    BYTE PTR [eax],al
     945:	0a 0d 00 03 08 3a    	or     cl,BYTE PTR ds:0x3a080300
     94b:	0b 3b                	or     edi,DWORD PTR [ebx]
     94d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     950:	38 0b                	cmp    BYTE PTR [ebx],cl
     952:	00 00                	add    BYTE PTR [eax],al
     954:	0b 0f                	or     ecx,DWORD PTR [edi]
     956:	00 0b                	add    BYTE PTR [ebx],cl
     958:	0b 00                	or     eax,DWORD PTR [eax]
     95a:	00 0c 0f             	add    BYTE PTR [edi+ecx*1],cl
     95d:	00 0b                	add    BYTE PTR [ebx],cl
     95f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     962:	00 00                	add    BYTE PTR [eax],al
     964:	0d 2e 01 3f 19       	or     eax,0x193f012e
     969:	03 0e                	add    ecx,DWORD PTR [esi]
     96b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     96d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96f:	27                   	daa    
     970:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     973:	11 01                	adc    DWORD PTR [ecx],eax
     975:	12 06                	adc    al,BYTE PTR [esi]
     977:	40                   	inc    eax
     978:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     97e:	00 00                	add    BYTE PTR [eax],al
     980:	0e                   	push   cs
     981:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     986:	0b 3b                	or     edi,DWORD PTR [ebx]
     988:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     98b:	02 18                	add    bl,BYTE PTR [eax]
     98d:	00 00                	add    BYTE PTR [eax],al
     98f:	0f 05                	syscall 
     991:	00 03                	add    BYTE PTR [ebx],al
     993:	08 3a                	or     BYTE PTR [edx],bh
     995:	0b 3b                	or     edi,DWORD PTR [ebx]
     997:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     99a:	02 18                	add    bl,BYTE PTR [eax]
     99c:	00 00                	add    BYTE PTR [eax],al
     99e:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     9a1:	03 0e                	add    ecx,DWORD PTR [esi]
     9a3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9a5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9a7:	49                   	dec    ecx
     9a8:	13 3f                	adc    edi,DWORD PTR [edi]
     9aa:	19 02                	sbb    DWORD PTR [edx],eax
     9ac:	18 00                	sbb    BYTE PTR [eax],al
     9ae:	00 00                	add    BYTE PTR [eax],al
     9b0:	01 11                	add    DWORD PTR [ecx],edx
     9b2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9b8:	0e                   	push   cs
     9b9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9bb:	11 01                	adc    DWORD PTR [ecx],eax
     9bd:	12 06                	adc    al,BYTE PTR [esi]
     9bf:	10 17                	adc    BYTE PTR [edi],dl
     9c1:	00 00                	add    BYTE PTR [eax],al
     9c3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9c6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9c8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9cb:	0e                   	push   cs
     9cc:	00 00                	add    BYTE PTR [eax],al
     9ce:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9d1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9d3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9d6:	08 00                	or     BYTE PTR [eax],al
     9d8:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9db:	00 03                	add    BYTE PTR [ebx],al
     9dd:	0e                   	push   cs
     9de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e2:	49                   	dec    ecx
     9e3:	13 00                	adc    eax,DWORD PTR [eax]
     9e5:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     9eb:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9f1:	01 13                	add    DWORD PTR [ebx],edx
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	06                   	push   es
     9f6:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     9fb:	0b 3b                	or     edi,DWORD PTR [ebx]
     9fd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a00:	38 0b                	cmp    BYTE PTR [ebx],cl
     a02:	00 00                	add    BYTE PTR [eax],al
     a04:	07                   	pop    es
     a05:	0d 00 03 08 3a       	or     eax,0x3a080300
     a0a:	0b 3b                	or     edi,DWORD PTR [ebx]
     a0c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a0f:	38 0b                	cmp    BYTE PTR [ebx],cl
     a11:	00 00                	add    BYTE PTR [eax],al
     a13:	08 01                	or     BYTE PTR [ecx],al
     a15:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     a18:	01 13                	add    DWORD PTR [ebx],edx
     a1a:	00 00                	add    BYTE PTR [eax],al
     a1c:	09 21                	or     DWORD PTR [ecx],esp
     a1e:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     a21:	2f                   	das    
     a22:	0b 00                	or     eax,DWORD PTR [eax]
     a24:	00 0a                	add    BYTE PTR [edx],cl
     a26:	0f 00 0b             	str    WORD PTR [ebx]
     a29:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a2c:	00 00                	add    BYTE PTR [eax],al
     a2e:	0b 04 01             	or     eax,DWORD PTR [ecx+eax*1]
     a31:	03 0e                	add    ecx,DWORD PTR [esi]
     a33:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a35:	49                   	dec    ecx
     a36:	13 3a                	adc    edi,DWORD PTR [edx]
     a38:	0b 3b                	or     edi,DWORD PTR [ebx]
     a3a:	0b 01                	or     eax,DWORD PTR [ecx]
     a3c:	13 00                	adc    eax,DWORD PTR [eax]
     a3e:	00 0c 28             	add    BYTE PTR [eax+ebp*1],cl
     a41:	00 03                	add    BYTE PTR [ebx],al
     a43:	0e                   	push   cs
     a44:	1c 0b                	sbb    al,0xb
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	0d 28 00 03 0e       	or     eax,0xe030028
     a4d:	1c 05                	sbb    al,0x5
     a4f:	00 00                	add    BYTE PTR [eax],al
     a51:	0e                   	push   cs
     a52:	0f 00 0b             	str    WORD PTR [ebx]
     a55:	0b 00                	or     eax,DWORD PTR [eax]
     a57:	00 0f                	add    BYTE PTR [edi],cl
     a59:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     a5c:	19 03                	sbb    DWORD PTR [ebx],eax
     a5e:	0e                   	push   cs
     a5f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a61:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a63:	11 01                	adc    DWORD PTR [ecx],eax
     a65:	12 06                	adc    al,BYTE PTR [esi]
     a67:	40                   	inc    eax
     a68:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     a6e:	10 2e                	adc    BYTE PTR [esi],ch
     a70:	01 3f                	add    DWORD PTR [edi],edi
     a72:	19 03                	sbb    DWORD PTR [ebx],eax
     a74:	0e                   	push   cs
     a75:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a77:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a79:	27                   	daa    
     a7a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a7d:	11 01                	adc    DWORD PTR [ecx],eax
     a7f:	12 06                	adc    al,BYTE PTR [esi]
     a81:	40                   	inc    eax
     a82:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     a88:	00 00                	add    BYTE PTR [eax],al
     a8a:	11 05 00 03 0e 3a    	adc    DWORD PTR ds:0x3a0e0300,eax
     a90:	0b 3b                	or     edi,DWORD PTR [ebx]
     a92:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a95:	02 18                	add    bl,BYTE PTR [eax]
     a97:	00 00                	add    BYTE PTR [eax],al
     a99:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     a9c:	03 0e                	add    ecx,DWORD PTR [esi]
     a9e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aa2:	49                   	dec    ecx
     aa3:	13 02                	adc    eax,DWORD PTR [edx]
     aa5:	18 00                	sbb    BYTE PTR [eax],al
     aa7:	00 13                	add    BYTE PTR [ebx],dl
     aa9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     aac:	19 03                	sbb    DWORD PTR [ebx],eax
     aae:	0e                   	push   cs
     aaf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab3:	27                   	daa    
     ab4:	19 11                	sbb    DWORD PTR [ecx],edx
     ab6:	01 12                	add    DWORD PTR [edx],edx
     ab8:	06                   	push   es
     ab9:	40                   	inc    eax
     aba:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ac0:	00 00                	add    BYTE PTR [eax],al
     ac2:	14 34                	adc    al,0x34
     ac4:	00 03                	add    BYTE PTR [ebx],al
     ac6:	08 3a                	or     BYTE PTR [edx],bh
     ac8:	0b 3b                	or     edi,DWORD PTR [ebx]
     aca:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     acd:	02 18                	add    bl,BYTE PTR [eax]
     acf:	00 00                	add    BYTE PTR [eax],al
     ad1:	15 2e 01 3f 19       	adc    eax,0x193f012e
     ad6:	03 0e                	add    ecx,DWORD PTR [esi]
     ad8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ada:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     adc:	27                   	daa    
     add:	19 11                	sbb    DWORD PTR [ecx],edx
     adf:	01 12                	add    DWORD PTR [edx],edx
     ae1:	06                   	push   es
     ae2:	40                   	inc    eax
     ae3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	16                   	push   ss
     aec:	0a 00                	or     al,BYTE PTR [eax]
     aee:	03 0e                	add    ecx,DWORD PTR [esi]
     af0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     af2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     af4:	11 01                	adc    DWORD PTR [ecx],eax
     af6:	00 00                	add    BYTE PTR [eax],al
     af8:	17                   	pop    ss
     af9:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     afc:	19 03                	sbb    DWORD PTR [ebx],eax
     afe:	0e                   	push   cs
     aff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b01:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b03:	27                   	daa    
     b04:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b07:	11 01                	adc    DWORD PTR [ecx],eax
     b09:	12 06                	adc    al,BYTE PTR [esi]
     b0b:	40                   	inc    eax
     b0c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b12:	00 00                	add    BYTE PTR [eax],al
     b14:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     b17:	03 0e                	add    ecx,DWORD PTR [esi]
     b19:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b1b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b1d:	49                   	dec    ecx
     b1e:	13 00                	adc    eax,DWORD PTR [eax]
     b20:	00 19                	add    BYTE PTR [ecx],bl
     b22:	34 00                	xor    al,0x0
     b24:	03 0e                	add    ecx,DWORD PTR [esi]
     b26:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b28:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b2a:	49                   	dec    ecx
     b2b:	13 3f                	adc    edi,DWORD PTR [edi]
     b2d:	19 02                	sbb    DWORD PTR [edx],eax
     b2f:	18 00                	sbb    BYTE PTR [eax],al
     b31:	00 00                	add    BYTE PTR [eax],al
     b33:	01 11                	add    DWORD PTR [ecx],edx
     b35:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b3b:	0e                   	push   cs
     b3c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b3e:	11 01                	adc    DWORD PTR [ecx],eax
     b40:	12 06                	adc    al,BYTE PTR [esi]
     b42:	10 17                	adc    BYTE PTR [edi],dl
     b44:	00 00                	add    BYTE PTR [eax],al
     b46:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b49:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b4b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b4e:	0e                   	push   cs
     b4f:	00 00                	add    BYTE PTR [eax],al
     b51:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b54:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b56:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b59:	08 00                	or     BYTE PTR [eax],al
     b5b:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     b5e:	00 0b                	add    BYTE PTR [ebx],cl
     b60:	0b 00                	or     eax,DWORD PTR [eax]
     b62:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b68:	49                   	dec    ecx
     b69:	13 00                	adc    eax,DWORD PTR [eax]
     b6b:	00 06                	add    BYTE PTR [esi],al
     b6d:	16                   	push   ss
     b6e:	00 03                	add    BYTE PTR [ebx],al
     b70:	0e                   	push   cs
     b71:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b73:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b75:	49                   	dec    ecx
     b76:	13 00                	adc    eax,DWORD PTR [eax]
     b78:	00 07                	add    BYTE PTR [edi],al
     b7a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b7e:	00 00                	add    BYTE PTR [eax],al
     b80:	08 2e                	or     BYTE PTR [esi],ch
     b82:	01 3f                	add    DWORD PTR [edi],edi
     b84:	19 03                	sbb    DWORD PTR [ebx],eax
     b86:	0e                   	push   cs
     b87:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b89:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b8b:	27                   	daa    
     b8c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b8f:	11 01                	adc    DWORD PTR [ecx],eax
     b91:	12 06                	adc    al,BYTE PTR [esi]
     b93:	40                   	inc    eax
     b94:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b9a:	00 00                	add    BYTE PTR [eax],al
     b9c:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     ba2:	0b 3b                	or     edi,DWORD PTR [ebx]
     ba4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ba7:	02 18                	add    bl,BYTE PTR [eax]
     ba9:	00 00                	add    BYTE PTR [eax],al
     bab:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     bb1:	0b 3b                	or     edi,DWORD PTR [ebx]
     bb3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bb6:	02 18                	add    bl,BYTE PTR [eax]
     bb8:	00 00                	add    BYTE PTR [eax],al
     bba:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     bbd:	03 08                	add    ecx,DWORD PTR [eax]
     bbf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bc1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bc3:	49                   	dec    ecx
     bc4:	13 02                	adc    eax,DWORD PTR [edx]
     bc6:	18 00                	sbb    BYTE PTR [eax],al
     bc8:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     bcb:	01 11                	add    DWORD PTR [ecx],edx
     bcd:	01 12                	add    DWORD PTR [edx],edx
     bcf:	06                   	push   es
     bd0:	01 13                	add    DWORD PTR [ebx],edx
     bd2:	00 00                	add    BYTE PTR [eax],al
     bd4:	0d 0b 01 11 01       	or     eax,0x111010b
     bd9:	12 06                	adc    al,BYTE PTR [esi]
     bdb:	00 00                	add    BYTE PTR [eax],al
     bdd:	0e                   	push   cs
     bde:	26 00 00             	add    BYTE PTR es:[eax],al
     be1:	00 0f                	add    BYTE PTR [edi],cl
     be3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     be6:	19 03                	sbb    DWORD PTR [ebx],eax
     be8:	0e                   	push   cs
     be9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     beb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bed:	27                   	daa    
     bee:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bf1:	11 01                	adc    DWORD PTR [ecx],eax
     bf3:	12 06                	adc    al,BYTE PTR [esi]
     bf5:	40                   	inc    eax
     bf6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bfc:	00 00                	add    BYTE PTR [eax],al
     bfe:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     c01:	03 0e                	add    ecx,DWORD PTR [esi]
     c03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c07:	49                   	dec    ecx
     c08:	13 3f                	adc    edi,DWORD PTR [edi]
     c0a:	19 02                	sbb    DWORD PTR [edx],eax
     c0c:	18 00                	sbb    BYTE PTR [eax],al
     c0e:	00 00                	add    BYTE PTR [eax],al
     c10:	01 11                	add    DWORD PTR [ecx],edx
     c12:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c18:	0e                   	push   cs
     c19:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c1b:	11 01                	adc    DWORD PTR [ecx],eax
     c1d:	12 06                	adc    al,BYTE PTR [esi]
     c1f:	10 17                	adc    BYTE PTR [edi],dl
     c21:	00 00                	add    BYTE PTR [eax],al
     c23:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c26:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c28:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c2b:	0e                   	push   cs
     c2c:	00 00                	add    BYTE PTR [eax],al
     c2e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c31:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c33:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c36:	08 00                	or     BYTE PTR [eax],al
     c38:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c3b:	00 03                	add    BYTE PTR [ebx],al
     c3d:	0e                   	push   cs
     c3e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c40:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c42:	49                   	dec    ecx
     c43:	13 00                	adc    eax,DWORD PTR [eax]
     c45:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c4b:	00 00                	add    BYTE PTR [eax],al
     c4d:	06                   	push   es
     c4e:	0f 00 0b             	str    WORD PTR [ebx]
     c51:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c54:	00 00                	add    BYTE PTR [eax],al
     c56:	07                   	pop    es
     c57:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c5a:	19 03                	sbb    DWORD PTR [ebx],eax
     c5c:	0e                   	push   cs
     c5d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c5f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c61:	27                   	daa    
     c62:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c65:	11 01                	adc    DWORD PTR [ecx],eax
     c67:	12 06                	adc    al,BYTE PTR [esi]
     c69:	40                   	inc    eax
     c6a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c70:	00 00                	add    BYTE PTR [eax],al
     c72:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c78:	0b 3b                	or     edi,DWORD PTR [ebx]
     c7a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c7d:	02 18                	add    bl,BYTE PTR [eax]
     c7f:	00 00                	add    BYTE PTR [eax],al
     c81:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c84:	03 08                	add    ecx,DWORD PTR [eax]
     c86:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c88:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c8a:	49                   	dec    ecx
     c8b:	13 02                	adc    eax,DWORD PTR [edx]
     c8d:	18 00                	sbb    BYTE PTR [eax],al
     c8f:	00 0a                	add    BYTE PTR [edx],cl
     c91:	34 00                	xor    al,0x0
     c93:	03 0e                	add    ecx,DWORD PTR [esi]
     c95:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c97:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c99:	49                   	dec    ecx
     c9a:	13 02                	adc    eax,DWORD PTR [edx]
     c9c:	18 00                	sbb    BYTE PTR [eax],al
     c9e:	00 0b                	add    BYTE PTR [ebx],cl
     ca0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ca3:	19 03                	sbb    DWORD PTR [ebx],eax
     ca5:	0e                   	push   cs
     ca6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ca8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     caa:	27                   	daa    
     cab:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cae:	11 01                	adc    DWORD PTR [ecx],eax
     cb0:	12 06                	adc    al,BYTE PTR [esi]
     cb2:	40                   	inc    eax
     cb3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     cb9:	00 00                	add    BYTE PTR [eax],al
     cbb:	0c 34                	or     al,0x34
     cbd:	00 03                	add    BYTE PTR [ebx],al
     cbf:	0e                   	push   cs
     cc0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cc2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cc4:	49                   	dec    ecx
     cc5:	13 3f                	adc    edi,DWORD PTR [edi]
     cc7:	19 02                	sbb    DWORD PTR [edx],eax
     cc9:	18 00                	sbb    BYTE PTR [eax],al
     ccb:	00 00                	add    BYTE PTR [eax],al
     ccd:	01 11                	add    DWORD PTR [ecx],edx
     ccf:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cd5:	0e                   	push   cs
     cd6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cd8:	11 01                	adc    DWORD PTR [ecx],eax
     cda:	12 06                	adc    al,BYTE PTR [esi]
     cdc:	10 17                	adc    BYTE PTR [edi],dl
     cde:	00 00                	add    BYTE PTR [eax],al
     ce0:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ce3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ce5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ce8:	0e                   	push   cs
     ce9:	00 00                	add    BYTE PTR [eax],al
     ceb:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cee:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cf0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cf3:	08 00                	or     BYTE PTR [eax],al
     cf5:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     cf8:	00 03                	add    BYTE PTR [ebx],al
     cfa:	0e                   	push   cs
     cfb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cfd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cff:	49                   	dec    ecx
     d00:	13 00                	adc    eax,DWORD PTR [eax]
     d02:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     d08:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d0a:	49                   	dec    ecx
     d0b:	13 3a                	adc    edi,DWORD PTR [edx]
     d0d:	0b 3b                	or     edi,DWORD PTR [ebx]
     d0f:	0b 01                	or     eax,DWORD PTR [ecx]
     d11:	13 00                	adc    eax,DWORD PTR [eax]
     d13:	00 06                	add    BYTE PTR [esi],al
     d15:	28 00                	sub    BYTE PTR [eax],al
     d17:	03 0e                	add    ecx,DWORD PTR [esi]
     d19:	1c 0b                	sbb    al,0xb
     d1b:	00 00                	add    BYTE PTR [eax],al
     d1d:	07                   	pop    es
     d1e:	28 00                	sub    BYTE PTR [eax],al
     d20:	03 0e                	add    ecx,DWORD PTR [esi]
     d22:	1c 05                	sbb    al,0x5
     d24:	00 00                	add    BYTE PTR [eax],al
     d26:	08 0f                	or     BYTE PTR [edi],cl
     d28:	00 0b                	add    BYTE PTR [ebx],cl
     d2a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d2d:	00 00                	add    BYTE PTR [eax],al
     d2f:	09 2e                	or     DWORD PTR [esi],ebp
     d31:	01 3f                	add    DWORD PTR [edi],edi
     d33:	19 03                	sbb    DWORD PTR [ebx],eax
     d35:	0e                   	push   cs
     d36:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d38:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d3a:	27                   	daa    
     d3b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d3e:	11 01                	adc    DWORD PTR [ecx],eax
     d40:	12 06                	adc    al,BYTE PTR [esi]
     d42:	40                   	inc    eax
     d43:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d49:	00 00                	add    BYTE PTR [eax],al
     d4b:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d51:	0b 3b                	or     edi,DWORD PTR [ebx]
     d53:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d56:	02 18                	add    bl,BYTE PTR [eax]
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d5d:	03 0e                	add    ecx,DWORD PTR [esi]
     d5f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d61:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d63:	49                   	dec    ecx
     d64:	13 3f                	adc    edi,DWORD PTR [edi]
     d66:	19 02                	sbb    DWORD PTR [edx],eax
     d68:	18 00                	sbb    BYTE PTR [eax],al
     d6a:	00 00                	add    BYTE PTR [eax],al
     d6c:	01 11                	add    DWORD PTR [ecx],edx
     d6e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d74:	0e                   	push   cs
     d75:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d77:	11 01                	adc    DWORD PTR [ecx],eax
     d79:	12 06                	adc    al,BYTE PTR [esi]
     d7b:	10 17                	adc    BYTE PTR [edi],dl
     d7d:	00 00                	add    BYTE PTR [eax],al
     d7f:	02 16                	add    dl,BYTE PTR [esi]
     d81:	00 03                	add    BYTE PTR [ebx],al
     d83:	0e                   	push   cs
     d84:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d86:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d88:	49                   	dec    ecx
     d89:	13 00                	adc    eax,DWORD PTR [eax]
     d8b:	00 03                	add    BYTE PTR [ebx],al
     d8d:	0f 00 0b             	str    WORD PTR [ebx]
     d90:	0b 03                	or     eax,DWORD PTR [ebx]
     d92:	0e                   	push   cs
     d93:	49                   	dec    ecx
     d94:	13 00                	adc    eax,DWORD PTR [eax]
     d96:	00 04 24             	add    BYTE PTR [esp],al
     d99:	00 0b                	add    BYTE PTR [ebx],cl
     d9b:	0b 3e                	or     edi,DWORD PTR [esi]
     d9d:	0b 03                	or     eax,DWORD PTR [ebx]
     d9f:	0e                   	push   cs
     da0:	00 00                	add    BYTE PTR [eax],al
     da2:	05 24 00 0b 0b       	add    eax,0xb0b0024
     da7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     daa:	08 00                	or     BYTE PTR [eax],al
     dac:	00 06                	add    BYTE PTR [esi],al
     dae:	0f 00 0b             	str    WORD PTR [ebx]
     db1:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     db4:	00 00                	add    BYTE PTR [eax],al
     db6:	07                   	pop    es
     db7:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     dbb:	00 00                	add    BYTE PTR [eax],al
     dbd:	08 2e                	or     BYTE PTR [esi],ch
     dbf:	01 03                	add    DWORD PTR [ebx],eax
     dc1:	0e                   	push   cs
     dc2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dc4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dc6:	27                   	daa    
     dc7:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dca:	11 01                	adc    DWORD PTR [ecx],eax
     dcc:	12 06                	adc    al,BYTE PTR [esi]
     dce:	40                   	inc    eax
     dcf:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     dd5:	00 00                	add    BYTE PTR [eax],al
     dd7:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     ddd:	0b 3b                	or     edi,DWORD PTR [ebx]
     ddf:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     de2:	02 18                	add    bl,BYTE PTR [eax]
     de4:	00 00                	add    BYTE PTR [eax],al
     de6:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     de9:	03 08                	add    ecx,DWORD PTR [eax]
     deb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ded:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     def:	49                   	dec    ecx
     df0:	13 02                	adc    eax,DWORD PTR [edx]
     df2:	18 00                	sbb    BYTE PTR [eax],al
     df4:	00 0b                	add    BYTE PTR [ebx],cl
     df6:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     dfb:	0b 3b                	or     edi,DWORD PTR [ebx]
     dfd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e00:	02 18                	add    bl,BYTE PTR [eax]
     e02:	00 00                	add    BYTE PTR [eax],al
     e04:	0c 34                	or     al,0x34
     e06:	00 03                	add    BYTE PTR [ebx],al
     e08:	0e                   	push   cs
     e09:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e0b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e0d:	49                   	dec    ecx
     e0e:	13 02                	adc    eax,DWORD PTR [edx]
     e10:	18 00                	sbb    BYTE PTR [eax],al
     e12:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     e18:	12 06                	adc    al,BYTE PTR [esi]
     e1a:	00 00                	add    BYTE PTR [eax],al
     e1c:	0e                   	push   cs
     e1d:	01 01                	add    DWORD PTR [ecx],eax
     e1f:	49                   	dec    ecx
     e20:	13 01                	adc    eax,DWORD PTR [ecx]
     e22:	13 00                	adc    eax,DWORD PTR [eax]
     e24:	00 0f                	add    BYTE PTR [edi],cl
     e26:	21 00                	and    DWORD PTR [eax],eax
     e28:	49                   	dec    ecx
     e29:	13 2f                	adc    ebp,DWORD PTR [edi]
     e2b:	0b 00                	or     eax,DWORD PTR [eax]
     e2d:	00 10                	add    BYTE PTR [eax],dl
     e2f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e32:	19 03                	sbb    DWORD PTR [ebx],eax
     e34:	0e                   	push   cs
     e35:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e37:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e39:	27                   	daa    
     e3a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e3d:	11 01                	adc    DWORD PTR [ecx],eax
     e3f:	12 06                	adc    al,BYTE PTR [esi]
     e41:	40                   	inc    eax
     e42:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e48:	00 00                	add    BYTE PTR [eax],al
     e4a:	11 0a                	adc    DWORD PTR [edx],ecx
     e4c:	00 03                	add    BYTE PTR [ebx],al
     e4e:	0e                   	push   cs
     e4f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e51:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e53:	11 01                	adc    DWORD PTR [ecx],eax
     e55:	00 00                	add    BYTE PTR [eax],al
     e57:	12 0b                	adc    cl,BYTE PTR [ebx]
     e59:	01 11                	add    DWORD PTR [ecx],edx
     e5b:	01 12                	add    DWORD PTR [edx],edx
     e5d:	06                   	push   es
     e5e:	01 13                	add    DWORD PTR [ebx],edx
     e60:	00 00                	add    BYTE PTR [eax],al
     e62:	13 2e                	adc    ebp,DWORD PTR [esi]
     e64:	01 3f                	add    DWORD PTR [edi],edi
     e66:	19 03                	sbb    DWORD PTR [ebx],eax
     e68:	0e                   	push   cs
     e69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e6b:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     e71:	11 01                	adc    DWORD PTR [ecx],eax
     e73:	12 06                	adc    al,BYTE PTR [esi]
     e75:	40                   	inc    eax
     e76:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e7c:	00 00                	add    BYTE PTR [eax],al
     e7e:	14 05                	adc    al,0x5
     e80:	00 03                	add    BYTE PTR [ebx],al
     e82:	08 3a                	or     BYTE PTR [edx],bh
     e84:	0b 3b                	or     edi,DWORD PTR [ebx]
     e86:	05 49 13 02 18       	add    eax,0x18021349
     e8b:	00 00                	add    BYTE PTR [eax],al
     e8d:	15 18 00 00 00       	adc    eax,0x18
     e92:	16                   	push   ss
     e93:	34 00                	xor    al,0x0
     e95:	03 0e                	add    ecx,DWORD PTR [esi]
     e97:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e99:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     e9f:	00 00                	add    BYTE PTR [eax],al
     ea1:	17                   	pop    ss
     ea2:	34 00                	xor    al,0x0
     ea4:	03 08                	add    ecx,DWORD PTR [eax]
     ea6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ea8:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     eae:	00 00                	add    BYTE PTR [eax],al
     eb0:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     eb3:	03 0e                	add    ecx,DWORD PTR [esi]
     eb5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eb7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb9:	49                   	dec    ecx
     eba:	13 3f                	adc    edi,DWORD PTR [edi]
     ebc:	19 02                	sbb    DWORD PTR [edx],eax
     ebe:	18 00                	sbb    BYTE PTR [eax],al
     ec0:	00 00                	add    BYTE PTR [eax],al
     ec2:	01 11                	add    DWORD PTR [ecx],edx
     ec4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     eca:	0e                   	push   cs
     ecb:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ecd:	11 01                	adc    DWORD PTR [ecx],eax
     ecf:	12 06                	adc    al,BYTE PTR [esi]
     ed1:	10 17                	adc    BYTE PTR [edi],dl
     ed3:	00 00                	add    BYTE PTR [eax],al
     ed5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ed8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     eda:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     edd:	0e                   	push   cs
     ede:	00 00                	add    BYTE PTR [eax],al
     ee0:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ee3:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ee5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ee8:	08 00                	or     BYTE PTR [eax],al
     eea:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     eed:	00 03                	add    BYTE PTR [ebx],al
     eef:	0e                   	push   cs
     ef0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ef2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ef4:	49                   	dec    ecx
     ef5:	13 00                	adc    eax,DWORD PTR [eax]
     ef7:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     efd:	49                   	dec    ecx
     efe:	13 00                	adc    eax,DWORD PTR [eax]
     f00:	00 06                	add    BYTE PTR [esi],al
     f02:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f05:	19 03                	sbb    DWORD PTR [ebx],eax
     f07:	0e                   	push   cs
     f08:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f0a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f0c:	11 01                	adc    DWORD PTR [ecx],eax
     f0e:	12 06                	adc    al,BYTE PTR [esi]
     f10:	40                   	inc    eax
     f11:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f17:	00 00                	add    BYTE PTR [eax],al
     f19:	07                   	pop    es
     f1a:	34 00                	xor    al,0x0
     f1c:	03 0e                	add    ecx,DWORD PTR [esi]
     f1e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f20:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f22:	49                   	dec    ecx
     f23:	13 02                	adc    eax,DWORD PTR [edx]
     f25:	18 00                	sbb    BYTE PTR [eax],al
     f27:	00 08                	add    BYTE PTR [eax],cl
     f29:	01 01                	add    DWORD PTR [ecx],eax
     f2b:	49                   	dec    ecx
     f2c:	13 01                	adc    eax,DWORD PTR [ecx]
     f2e:	13 00                	adc    eax,DWORD PTR [eax]
     f30:	00 09                	add    BYTE PTR [ecx],cl
     f32:	21 00                	and    DWORD PTR [eax],eax
     f34:	49                   	dec    ecx
     f35:	13 2f                	adc    ebp,DWORD PTR [edi]
     f37:	0b 00                	or     eax,DWORD PTR [eax]
     f39:	00 0a                	add    BYTE PTR [edx],cl
     f3b:	34 00                	xor    al,0x0
     f3d:	03 0e                	add    ecx,DWORD PTR [esi]
     f3f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f41:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f43:	49                   	dec    ecx
     f44:	13 3f                	adc    edi,DWORD PTR [edi]
     f46:	19 02                	sbb    DWORD PTR [edx],eax
     f48:	18 00                	sbb    BYTE PTR [eax],al
     f4a:	00 00                	add    BYTE PTR [eax],al
     f4c:	01 11                	add    DWORD PTR [ecx],edx
     f4e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f54:	0e                   	push   cs
     f55:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f57:	11 01                	adc    DWORD PTR [ecx],eax
     f59:	12 06                	adc    al,BYTE PTR [esi]
     f5b:	10 17                	adc    BYTE PTR [edi],dl
     f5d:	00 00                	add    BYTE PTR [eax],al
     f5f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f62:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f64:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f67:	0e                   	push   cs
     f68:	00 00                	add    BYTE PTR [eax],al
     f6a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f6d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f6f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f72:	08 00                	or     BYTE PTR [eax],al
     f74:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f77:	00 03                	add    BYTE PTR [ebx],al
     f79:	0e                   	push   cs
     f7a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f7c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f7e:	49                   	dec    ecx
     f7f:	13 00                	adc    eax,DWORD PTR [eax]
     f81:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f87:	49                   	dec    ecx
     f88:	13 00                	adc    eax,DWORD PTR [eax]
     f8a:	00 06                	add    BYTE PTR [esi],al
     f8c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     f90:	00 00                	add    BYTE PTR [eax],al
     f92:	07                   	pop    es
     f93:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f96:	19 03                	sbb    DWORD PTR [ebx],eax
     f98:	0e                   	push   cs
     f99:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f9b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f9d:	27                   	daa    
     f9e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fa1:	11 01                	adc    DWORD PTR [ecx],eax
     fa3:	12 06                	adc    al,BYTE PTR [esi]
     fa5:	40                   	inc    eax
     fa6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     fac:	00 00                	add    BYTE PTR [eax],al
     fae:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     fb4:	0b 3b                	or     edi,DWORD PTR [ebx]
     fb6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fb9:	02 18                	add    bl,BYTE PTR [eax]
     fbb:	00 00                	add    BYTE PTR [eax],al
     fbd:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     fc3:	0b 3b                	or     edi,DWORD PTR [ebx]
     fc5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fc8:	02 18                	add    bl,BYTE PTR [eax]
     fca:	00 00                	add    BYTE PTR [eax],al
     fcc:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     fcf:	03 0e                	add    ecx,DWORD PTR [esi]
     fd1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fd3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fd5:	49                   	dec    ecx
     fd6:	13 02                	adc    eax,DWORD PTR [edx]
     fd8:	18 00                	sbb    BYTE PTR [eax],al
     fda:	00 0b                	add    BYTE PTR [ebx],cl
     fdc:	34 00                	xor    al,0x0
     fde:	03 0e                	add    ecx,DWORD PTR [esi]
     fe0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fe2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fe4:	49                   	dec    ecx
     fe5:	13 3f                	adc    edi,DWORD PTR [edi]
     fe7:	19 02                	sbb    DWORD PTR [edx],eax
     fe9:	18 00                	sbb    BYTE PTR [eax],al
     feb:	00 00                	add    BYTE PTR [eax],al
     fed:	01 11                	add    DWORD PTR [ecx],edx
     fef:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ff5:	0e                   	push   cs
     ff6:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ff8:	11 01                	adc    DWORD PTR [ecx],eax
     ffa:	12 06                	adc    al,BYTE PTR [esi]
     ffc:	10 17                	adc    BYTE PTR [edi],dl
     ffe:	00 00                	add    BYTE PTR [eax],al
    1000:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1003:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1005:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1008:	0e                   	push   cs
    1009:	00 00                	add    BYTE PTR [eax],al
    100b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    100e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1010:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1013:	08 00                	or     BYTE PTR [eax],al
    1015:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1018:	00 03                	add    BYTE PTR [ebx],al
    101a:	0e                   	push   cs
    101b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    101d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    101f:	49                   	dec    ecx
    1020:	13 00                	adc    eax,DWORD PTR [eax]
    1022:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1028:	49                   	dec    ecx
    1029:	13 00                	adc    eax,DWORD PTR [eax]
    102b:	00 06                	add    BYTE PTR [esi],al
    102d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1031:	00 00                	add    BYTE PTR [eax],al
    1033:	07                   	pop    es
    1034:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1037:	19 03                	sbb    DWORD PTR [ebx],eax
    1039:	0e                   	push   cs
    103a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    103c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    103e:	27                   	daa    
    103f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1042:	11 01                	adc    DWORD PTR [ecx],eax
    1044:	12 06                	adc    al,BYTE PTR [esi]
    1046:	40                   	inc    eax
    1047:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    104d:	00 00                	add    BYTE PTR [eax],al
    104f:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1055:	0b 3b                	or     edi,DWORD PTR [ebx]
    1057:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    105a:	02 18                	add    bl,BYTE PTR [eax]
    105c:	00 00                	add    BYTE PTR [eax],al
    105e:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1061:	03 08                	add    ecx,DWORD PTR [eax]
    1063:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1065:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1067:	49                   	dec    ecx
    1068:	13 02                	adc    eax,DWORD PTR [edx]
    106a:	18 00                	sbb    BYTE PTR [eax],al
    106c:	00 0a                	add    BYTE PTR [edx],cl
    106e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1071:	19 03                	sbb    DWORD PTR [ebx],eax
    1073:	0e                   	push   cs
    1074:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1076:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1078:	27                   	daa    
    1079:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    107c:	11 01                	adc    DWORD PTR [ecx],eax
    107e:	12 06                	adc    al,BYTE PTR [esi]
    1080:	40                   	inc    eax
    1081:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1087:	00 00                	add    BYTE PTR [eax],al
    1089:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    108c:	03 0e                	add    ecx,DWORD PTR [esi]
    108e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1090:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1092:	49                   	dec    ecx
    1093:	13 3f                	adc    edi,DWORD PTR [edi]
    1095:	19 02                	sbb    DWORD PTR [edx],eax
    1097:	18 00                	sbb    BYTE PTR [eax],al
    1099:	00 00                	add    BYTE PTR [eax],al
    109b:	01 11                	add    DWORD PTR [ecx],edx
    109d:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10a3:	0e                   	push   cs
    10a4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10a6:	11 01                	adc    DWORD PTR [ecx],eax
    10a8:	12 06                	adc    al,BYTE PTR [esi]
    10aa:	10 17                	adc    BYTE PTR [edi],dl
    10ac:	00 00                	add    BYTE PTR [eax],al
    10ae:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10b1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10b3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10b6:	0e                   	push   cs
    10b7:	00 00                	add    BYTE PTR [eax],al
    10b9:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10bc:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10be:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10c1:	08 00                	or     BYTE PTR [eax],al
    10c3:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    10c6:	00 03                	add    BYTE PTR [ebx],al
    10c8:	0e                   	push   cs
    10c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10cd:	49                   	dec    ecx
    10ce:	13 00                	adc    eax,DWORD PTR [eax]
    10d0:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    10d6:	49                   	dec    ecx
    10d7:	13 00                	adc    eax,DWORD PTR [eax]
    10d9:	00 06                	add    BYTE PTR [esi],al
    10db:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    10df:	00 00                	add    BYTE PTR [eax],al
    10e1:	07                   	pop    es
    10e2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    10e5:	19 03                	sbb    DWORD PTR [ebx],eax
    10e7:	0e                   	push   cs
    10e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10ec:	27                   	daa    
    10ed:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10f0:	11 01                	adc    DWORD PTR [ecx],eax
    10f2:	12 06                	adc    al,BYTE PTR [esi]
    10f4:	40                   	inc    eax
    10f5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10fb:	00 00                	add    BYTE PTR [eax],al
    10fd:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1103:	0b 3b                	or     edi,DWORD PTR [ebx]
    1105:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1108:	02 18                	add    bl,BYTE PTR [eax]
    110a:	00 00                	add    BYTE PTR [eax],al
    110c:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    110f:	03 08                	add    ecx,DWORD PTR [eax]
    1111:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1113:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1115:	49                   	dec    ecx
    1116:	13 02                	adc    eax,DWORD PTR [edx]
    1118:	18 00                	sbb    BYTE PTR [eax],al
    111a:	00 0a                	add    BYTE PTR [edx],cl
    111c:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1121:	0b 3b                	or     edi,DWORD PTR [ebx]
    1123:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1126:	02 18                	add    bl,BYTE PTR [eax]
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    112d:	03 0e                	add    ecx,DWORD PTR [esi]
    112f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1131:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1133:	49                   	dec    ecx
    1134:	13 3f                	adc    edi,DWORD PTR [edi]
    1136:	19 02                	sbb    DWORD PTR [edx],eax
    1138:	18 00                	sbb    BYTE PTR [eax],al
    113a:	00 00                	add    BYTE PTR [eax],al
    113c:	01 11                	add    DWORD PTR [ecx],edx
    113e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1144:	0e                   	push   cs
    1145:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1147:	11 01                	adc    DWORD PTR [ecx],eax
    1149:	12 06                	adc    al,BYTE PTR [esi]
    114b:	10 17                	adc    BYTE PTR [edi],dl
    114d:	00 00                	add    BYTE PTR [eax],al
    114f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1152:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1154:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1157:	0e                   	push   cs
    1158:	00 00                	add    BYTE PTR [eax],al
    115a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    115d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    115f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1162:	08 00                	or     BYTE PTR [eax],al
    1164:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1167:	00 03                	add    BYTE PTR [ebx],al
    1169:	0e                   	push   cs
    116a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    116c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    116e:	49                   	dec    ecx
    116f:	13 00                	adc    eax,DWORD PTR [eax]
    1171:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1177:	49                   	dec    ecx
    1178:	13 00                	adc    eax,DWORD PTR [eax]
    117a:	00 06                	add    BYTE PTR [esi],al
    117c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    117f:	19 03                	sbb    DWORD PTR [ebx],eax
    1181:	0e                   	push   cs
    1182:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1184:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1186:	27                   	daa    
    1187:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    118a:	11 01                	adc    DWORD PTR [ecx],eax
    118c:	12 06                	adc    al,BYTE PTR [esi]
    118e:	40                   	inc    eax
    118f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1195:	00 00                	add    BYTE PTR [eax],al
    1197:	07                   	pop    es
    1198:	05 00 03 08 3a       	add    eax,0x3a080300
    119d:	0b 3b                	or     edi,DWORD PTR [ebx]
    119f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11a2:	02 18                	add    bl,BYTE PTR [eax]
    11a4:	00 00                	add    BYTE PTR [eax],al
    11a6:	08 2e                	or     BYTE PTR [esi],ch
    11a8:	01 3f                	add    DWORD PTR [edi],edi
    11aa:	19 03                	sbb    DWORD PTR [ebx],eax
    11ac:	0e                   	push   cs
    11ad:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11af:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11b1:	27                   	daa    
    11b2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11b5:	11 01                	adc    DWORD PTR [ecx],eax
    11b7:	12 06                	adc    al,BYTE PTR [esi]
    11b9:	40                   	inc    eax
    11ba:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11c0:	00 00                	add    BYTE PTR [eax],al
    11c2:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    11c5:	03 08                	add    ecx,DWORD PTR [eax]
    11c7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11c9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11cb:	49                   	dec    ecx
    11cc:	13 02                	adc    eax,DWORD PTR [edx]
    11ce:	18 00                	sbb    BYTE PTR [eax],al
    11d0:	00 0a                	add    BYTE PTR [edx],cl
    11d2:	34 00                	xor    al,0x0
    11d4:	03 0e                	add    ecx,DWORD PTR [esi]
    11d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11da:	49                   	dec    ecx
    11db:	13 3f                	adc    edi,DWORD PTR [edi]
    11dd:	19 02                	sbb    DWORD PTR [edx],eax
    11df:	18 00                	sbb    BYTE PTR [eax],al
    11e1:	00 00                	add    BYTE PTR [eax],al
    11e3:	01 11                	add    DWORD PTR [ecx],edx
    11e5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    11eb:	0e                   	push   cs
    11ec:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    11ee:	11 01                	adc    DWORD PTR [ecx],eax
    11f0:	12 06                	adc    al,BYTE PTR [esi]
    11f2:	10 17                	adc    BYTE PTR [edi],dl
    11f4:	00 00                	add    BYTE PTR [eax],al
    11f6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    11f9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11fb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11fe:	0e                   	push   cs
    11ff:	00 00                	add    BYTE PTR [eax],al
    1201:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1204:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1206:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1209:	08 00                	or     BYTE PTR [eax],al
    120b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    120e:	00 03                	add    BYTE PTR [ebx],al
    1210:	0e                   	push   cs
    1211:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1213:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1215:	49                   	dec    ecx
    1216:	13 00                	adc    eax,DWORD PTR [eax]
    1218:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    121e:	49                   	dec    ecx
    121f:	13 00                	adc    eax,DWORD PTR [eax]
    1221:	00 06                	add    BYTE PTR [esi],al
    1223:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1227:	00 00                	add    BYTE PTR [eax],al
    1229:	07                   	pop    es
    122a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    122d:	19 03                	sbb    DWORD PTR [ebx],eax
    122f:	0e                   	push   cs
    1230:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1232:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1234:	27                   	daa    
    1235:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1238:	11 01                	adc    DWORD PTR [ecx],eax
    123a:	12 06                	adc    al,BYTE PTR [esi]
    123c:	40                   	inc    eax
    123d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1243:	00 00                	add    BYTE PTR [eax],al
    1245:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    124b:	0b 3b                	or     edi,DWORD PTR [ebx]
    124d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1250:	02 18                	add    bl,BYTE PTR [eax]
    1252:	00 00                	add    BYTE PTR [eax],al
    1254:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1257:	03 08                	add    ecx,DWORD PTR [eax]
    1259:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    125b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    125d:	49                   	dec    ecx
    125e:	13 02                	adc    eax,DWORD PTR [edx]
    1260:	18 00                	sbb    BYTE PTR [eax],al
    1262:	00 0a                	add    BYTE PTR [edx],cl
    1264:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1267:	19 03                	sbb    DWORD PTR [ebx],eax
    1269:	0e                   	push   cs
    126a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    126c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    126e:	27                   	daa    
    126f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1272:	11 01                	adc    DWORD PTR [ecx],eax
    1274:	12 06                	adc    al,BYTE PTR [esi]
    1276:	40                   	inc    eax
    1277:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    127d:	00 00                	add    BYTE PTR [eax],al
    127f:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    1285:	0b 3b                	or     edi,DWORD PTR [ebx]
    1287:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    128a:	02 18                	add    bl,BYTE PTR [eax]
    128c:	00 00                	add    BYTE PTR [eax],al
    128e:	0c 34                	or     al,0x34
    1290:	00 03                	add    BYTE PTR [ebx],al
    1292:	0e                   	push   cs
    1293:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1295:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1297:	49                   	dec    ecx
    1298:	13 3f                	adc    edi,DWORD PTR [edi]
    129a:	19 02                	sbb    DWORD PTR [edx],eax
    129c:	18 00                	sbb    BYTE PTR [eax],al
    129e:	00 00                	add    BYTE PTR [eax],al
    12a0:	01 11                	add    DWORD PTR [ecx],edx
    12a2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12a8:	0e                   	push   cs
    12a9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12ab:	11 01                	adc    DWORD PTR [ecx],eax
    12ad:	12 06                	adc    al,BYTE PTR [esi]
    12af:	10 17                	adc    BYTE PTR [edi],dl
    12b1:	00 00                	add    BYTE PTR [eax],al
    12b3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12b6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12b8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12bb:	08 00                	or     BYTE PTR [eax],al
    12bd:	00 03                	add    BYTE PTR [ebx],al
    12bf:	16                   	push   ss
    12c0:	00 03                	add    BYTE PTR [ebx],al
    12c2:	0e                   	push   cs
    12c3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12c5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c7:	49                   	dec    ecx
    12c8:	13 00                	adc    eax,DWORD PTR [eax]
    12ca:	00 04 24             	add    BYTE PTR [esp],al
    12cd:	00 0b                	add    BYTE PTR [ebx],cl
    12cf:	0b 3e                	or     edi,DWORD PTR [esi]
    12d1:	0b 03                	or     eax,DWORD PTR [ebx]
    12d3:	0e                   	push   cs
    12d4:	00 00                	add    BYTE PTR [eax],al
    12d6:	05 2e 01 3f 19       	add    eax,0x193f012e
    12db:	03 0e                	add    ecx,DWORD PTR [esi]
    12dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12e1:	27                   	daa    
    12e2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12e5:	11 01                	adc    DWORD PTR [ecx],eax
    12e7:	12 06                	adc    al,BYTE PTR [esi]
    12e9:	40                   	inc    eax
    12ea:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    12f0:	00 00                	add    BYTE PTR [eax],al
    12f2:	06                   	push   es
    12f3:	05 00 03 08 3a       	add    eax,0x3a080300
    12f8:	0b 3b                	or     edi,DWORD PTR [ebx]
    12fa:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12fd:	02 18                	add    bl,BYTE PTR [eax]
    12ff:	00 00                	add    BYTE PTR [eax],al
    1301:	07                   	pop    es
    1302:	0f 00 0b             	str    WORD PTR [ebx]
    1305:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1308:	00 00                	add    BYTE PTR [eax],al
    130a:	08 26                	or     BYTE PTR [esi],ah
    130c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    130f:	00 00                	add    BYTE PTR [eax],al
    1311:	09 2e                	or     DWORD PTR [esi],ebp
    1313:	01 3f                	add    DWORD PTR [edi],edi
    1315:	19 03                	sbb    DWORD PTR [ebx],eax
    1317:	0e                   	push   cs
    1318:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    131a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    131c:	27                   	daa    
    131d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1320:	11 01                	adc    DWORD PTR [ecx],eax
    1322:	12 06                	adc    al,BYTE PTR [esi]
    1324:	40                   	inc    eax
    1325:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    132b:	00 01                	add    BYTE PTR [ecx],al
    132d:	11 01                	adc    DWORD PTR [ecx],eax
    132f:	25 0e 13 0b 03       	and    eax,0x30b130e
    1334:	0e                   	push   cs
    1335:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1337:	11 01                	adc    DWORD PTR [ecx],eax
    1339:	12 06                	adc    al,BYTE PTR [esi]
    133b:	10 17                	adc    BYTE PTR [edi],dl
    133d:	00 00                	add    BYTE PTR [eax],al
    133f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1342:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1344:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1347:	08 00                	or     BYTE PTR [eax],al
    1349:	00 03                	add    BYTE PTR [ebx],al
    134b:	16                   	push   ss
    134c:	00 03                	add    BYTE PTR [ebx],al
    134e:	0e                   	push   cs
    134f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1351:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1353:	49                   	dec    ecx
    1354:	13 00                	adc    eax,DWORD PTR [eax]
    1356:	00 04 24             	add    BYTE PTR [esp],al
    1359:	00 0b                	add    BYTE PTR [ebx],cl
    135b:	0b 3e                	or     edi,DWORD PTR [esi]
    135d:	0b 03                	or     eax,DWORD PTR [ebx]
    135f:	0e                   	push   cs
    1360:	00 00                	add    BYTE PTR [eax],al
    1362:	05 2e 01 3f 19       	add    eax,0x193f012e
    1367:	03 0e                	add    ecx,DWORD PTR [esi]
    1369:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    136b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    136d:	27                   	daa    
    136e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1371:	11 01                	adc    DWORD PTR [ecx],eax
    1373:	12 06                	adc    al,BYTE PTR [esi]
    1375:	40                   	inc    eax
    1376:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    137c:	00 00                	add    BYTE PTR [eax],al
    137e:	06                   	push   es
    137f:	05 00 03 08 3a       	add    eax,0x3a080300
    1384:	0b 3b                	or     edi,DWORD PTR [ebx]
    1386:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1389:	02 18                	add    bl,BYTE PTR [eax]
    138b:	00 00                	add    BYTE PTR [eax],al
    138d:	07                   	pop    es
    138e:	34 00                	xor    al,0x0
    1390:	03 08                	add    ecx,DWORD PTR [eax]
    1392:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1394:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1396:	49                   	dec    ecx
    1397:	13 02                	adc    eax,DWORD PTR [edx]
    1399:	18 00                	sbb    BYTE PTR [eax],al
    139b:	00 08                	add    BYTE PTR [eax],cl
    139d:	0f 00 0b             	str    WORD PTR [ebx]
    13a0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13a3:	00 00                	add    BYTE PTR [eax],al
    13a5:	09 26                	or     DWORD PTR [esi],esp
    13a7:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    13aa:	00 00                	add    BYTE PTR [eax],al
    13ac:	0a 2e                	or     ch,BYTE PTR [esi]
    13ae:	01 3f                	add    DWORD PTR [edi],edi
    13b0:	19 03                	sbb    DWORD PTR [ebx],eax
    13b2:	0e                   	push   cs
    13b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b7:	27                   	daa    
    13b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13bb:	11 01                	adc    DWORD PTR [ecx],eax
    13bd:	12 06                	adc    al,BYTE PTR [esi]
    13bf:	40                   	inc    eax
    13c0:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    13c6:	00 01                	add    BYTE PTR [ecx],al
    13c8:	11 01                	adc    DWORD PTR [ecx],eax
    13ca:	25 0e 13 0b 03       	and    eax,0x30b130e
    13cf:	0e                   	push   cs
    13d0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13d2:	11 01                	adc    DWORD PTR [ecx],eax
    13d4:	12 06                	adc    al,BYTE PTR [esi]
    13d6:	10 17                	adc    BYTE PTR [edi],dl
    13d8:	00 00                	add    BYTE PTR [eax],al
    13da:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    13dd:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13df:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13e2:	0e                   	push   cs
    13e3:	00 00                	add    BYTE PTR [eax],al
    13e5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    13e8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13ea:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13ed:	08 00                	or     BYTE PTR [eax],al
    13ef:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    13f2:	00 03                	add    BYTE PTR [ebx],al
    13f4:	0e                   	push   cs
    13f5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13f7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13f9:	49                   	dec    ecx
    13fa:	13 00                	adc    eax,DWORD PTR [eax]
    13fc:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1402:	49                   	dec    ecx
    1403:	13 00                	adc    eax,DWORD PTR [eax]
    1405:	00 06                	add    BYTE PTR [esi],al
    1407:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    140b:	00 00                	add    BYTE PTR [eax],al
    140d:	07                   	pop    es
    140e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1411:	19 03                	sbb    DWORD PTR [ebx],eax
    1413:	0e                   	push   cs
    1414:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1416:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1418:	27                   	daa    
    1419:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    141c:	11 01                	adc    DWORD PTR [ecx],eax
    141e:	12 06                	adc    al,BYTE PTR [esi]
    1420:	40                   	inc    eax
    1421:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1427:	00 00                	add    BYTE PTR [eax],al
    1429:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    142f:	0b 3b                	or     edi,DWORD PTR [ebx]
    1431:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1434:	02 18                	add    bl,BYTE PTR [eax]
    1436:	00 00                	add    BYTE PTR [eax],al
    1438:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    143b:	03 08                	add    ecx,DWORD PTR [eax]
    143d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    143f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1441:	49                   	dec    ecx
    1442:	13 02                	adc    eax,DWORD PTR [edx]
    1444:	18 00                	sbb    BYTE PTR [eax],al
    1446:	00 0a                	add    BYTE PTR [edx],cl
    1448:	34 00                	xor    al,0x0
    144a:	03 0e                	add    ecx,DWORD PTR [esi]
    144c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    144e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1450:	49                   	dec    ecx
    1451:	13 00                	adc    eax,DWORD PTR [eax]
    1453:	00 0b                	add    BYTE PTR [ebx],cl
    1455:	34 00                	xor    al,0x0
    1457:	03 08                	add    ecx,DWORD PTR [eax]
    1459:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    145b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    145d:	49                   	dec    ecx
    145e:	13 00                	adc    eax,DWORD PTR [eax]
    1460:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1463:	00 03                	add    BYTE PTR [ebx],al
    1465:	0e                   	push   cs
    1466:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1468:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    146a:	49                   	dec    ecx
    146b:	13 02                	adc    eax,DWORD PTR [edx]
    146d:	18 00                	sbb    BYTE PTR [eax],al
    146f:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1475:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1477:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1479:	49                   	dec    ecx
    147a:	13 3f                	adc    edi,DWORD PTR [edi]
    147c:	19 02                	sbb    DWORD PTR [edx],eax
    147e:	18 00                	sbb    BYTE PTR [eax],al
    1480:	00 00                	add    BYTE PTR [eax],al
    1482:	01 11                	add    DWORD PTR [ecx],edx
    1484:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    148a:	0e                   	push   cs
    148b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    148d:	11 01                	adc    DWORD PTR [ecx],eax
    148f:	12 06                	adc    al,BYTE PTR [esi]
    1491:	10 17                	adc    BYTE PTR [edi],dl
    1493:	00 00                	add    BYTE PTR [eax],al
    1495:	02 2e                	add    ch,BYTE PTR [esi]
    1497:	01 3f                	add    DWORD PTR [edi],edi
    1499:	19 03                	sbb    DWORD PTR [ebx],eax
    149b:	0e                   	push   cs
    149c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    149e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14a0:	27                   	daa    
    14a1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14a4:	11 01                	adc    DWORD PTR [ecx],eax
    14a6:	12 06                	adc    al,BYTE PTR [esi]
    14a8:	40                   	inc    eax
    14a9:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    14af:	00 00                	add    BYTE PTR [eax],al
    14b1:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    14b7:	0b 3b                	or     edi,DWORD PTR [ebx]
    14b9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14bc:	02 18                	add    bl,BYTE PTR [eax]
    14be:	00 00                	add    BYTE PTR [eax],al
    14c0:	04 0f                	add    al,0xf
    14c2:	00 0b                	add    BYTE PTR [ebx],cl
    14c4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14c7:	00 00                	add    BYTE PTR [eax],al
    14c9:	05 24 00 0b 0b       	add    eax,0xb0b0024
    14ce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14d1:	0e                   	push   cs
    14d2:	00 00                	add    BYTE PTR [eax],al
    14d4:	06                   	push   es
    14d5:	24 00                	and    al,0x0
    14d7:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14d9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14dc:	08 00                	or     BYTE PTR [eax],al
    14de:	00 00                	add    BYTE PTR [eax],al
    14e0:	01 11                	add    DWORD PTR [ecx],edx
    14e2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    14e8:	0e                   	push   cs
    14e9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14eb:	11 01                	adc    DWORD PTR [ecx],eax
    14ed:	12 06                	adc    al,BYTE PTR [esi]
    14ef:	10 17                	adc    BYTE PTR [edi],dl
    14f1:	00 00                	add    BYTE PTR [eax],al
    14f3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14f6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14f8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14fb:	0e                   	push   cs
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1501:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1503:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1506:	08 00                	or     BYTE PTR [eax],al
    1508:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    150b:	00 03                	add    BYTE PTR [ebx],al
    150d:	0e                   	push   cs
    150e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1510:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1512:	49                   	dec    ecx
    1513:	13 00                	adc    eax,DWORD PTR [eax]
    1515:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    151b:	49                   	dec    ecx
    151c:	13 00                	adc    eax,DWORD PTR [eax]
    151e:	00 06                	add    BYTE PTR [esi],al
    1520:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1524:	00 00                	add    BYTE PTR [eax],al
    1526:	07                   	pop    es
    1527:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    152a:	19 03                	sbb    DWORD PTR [ebx],eax
    152c:	0e                   	push   cs
    152d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    152f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1531:	27                   	daa    
    1532:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1535:	11 01                	adc    DWORD PTR [ecx],eax
    1537:	12 06                	adc    al,BYTE PTR [esi]
    1539:	40                   	inc    eax
    153a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1540:	00 00                	add    BYTE PTR [eax],al
    1542:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1548:	0b 3b                	or     edi,DWORD PTR [ebx]
    154a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    154d:	02 18                	add    bl,BYTE PTR [eax]
    154f:	00 00                	add    BYTE PTR [eax],al
    1551:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1554:	03 08                	add    ecx,DWORD PTR [eax]
    1556:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1558:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    155a:	49                   	dec    ecx
    155b:	13 02                	adc    eax,DWORD PTR [edx]
    155d:	18 00                	sbb    BYTE PTR [eax],al
    155f:	00 0a                	add    BYTE PTR [edx],cl
    1561:	34 00                	xor    al,0x0
    1563:	03 0e                	add    ecx,DWORD PTR [esi]
    1565:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1567:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1569:	49                   	dec    ecx
    156a:	13 00                	adc    eax,DWORD PTR [eax]
    156c:	00 0b                	add    BYTE PTR [ebx],cl
    156e:	34 00                	xor    al,0x0
    1570:	03 08                	add    ecx,DWORD PTR [eax]
    1572:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1574:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1576:	49                   	dec    ecx
    1577:	13 00                	adc    eax,DWORD PTR [eax]
    1579:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    157c:	00 03                	add    BYTE PTR [ebx],al
    157e:	0e                   	push   cs
    157f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1581:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1583:	49                   	dec    ecx
    1584:	13 3f                	adc    edi,DWORD PTR [edi]
    1586:	19 02                	sbb    DWORD PTR [edx],eax
    1588:	18 00                	sbb    BYTE PTR [eax],al
    158a:	00 00                	add    BYTE PTR [eax],al
    158c:	01 11                	add    DWORD PTR [ecx],edx
    158e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1594:	0e                   	push   cs
    1595:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1597:	11 01                	adc    DWORD PTR [ecx],eax
    1599:	12 06                	adc    al,BYTE PTR [esi]
    159b:	10 17                	adc    BYTE PTR [edi],dl
    159d:	00 00                	add    BYTE PTR [eax],al
    159f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    15a2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15a4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15a7:	0e                   	push   cs
    15a8:	00 00                	add    BYTE PTR [eax],al
    15aa:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    15ad:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15af:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15b2:	08 00                	or     BYTE PTR [eax],al
    15b4:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    15b7:	00 03                	add    BYTE PTR [ebx],al
    15b9:	0e                   	push   cs
    15ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15be:	49                   	dec    ecx
    15bf:	13 00                	adc    eax,DWORD PTR [eax]
    15c1:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    15c7:	49                   	dec    ecx
    15c8:	13 00                	adc    eax,DWORD PTR [eax]
    15ca:	00 06                	add    BYTE PTR [esi],al
    15cc:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    15cf:	19 03                	sbb    DWORD PTR [ebx],eax
    15d1:	0e                   	push   cs
    15d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15d6:	27                   	daa    
    15d7:	19 11                	sbb    DWORD PTR [ecx],edx
    15d9:	01 12                	add    DWORD PTR [edx],edx
    15db:	06                   	push   es
    15dc:	40                   	inc    eax
    15dd:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    15e3:	00 00                	add    BYTE PTR [eax],al
    15e5:	07                   	pop    es
    15e6:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    15eb:	0b 3b                	or     edi,DWORD PTR [ebx]
    15ed:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    15f0:	02 18                	add    bl,BYTE PTR [eax]
    15f2:	00 00                	add    BYTE PTR [eax],al
    15f4:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    15f7:	03 08                	add    ecx,DWORD PTR [eax]
    15f9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15fb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15fd:	49                   	dec    ecx
    15fe:	13 02                	adc    eax,DWORD PTR [edx]
    1600:	18 00                	sbb    BYTE PTR [eax],al
    1602:	00 09                	add    BYTE PTR [ecx],cl
    1604:	34 00                	xor    al,0x0
    1606:	03 0e                	add    ecx,DWORD PTR [esi]
    1608:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    160a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    160c:	49                   	dec    ecx
    160d:	13 3f                	adc    edi,DWORD PTR [edi]
    160f:	19 02                	sbb    DWORD PTR [edx],eax
    1611:	18 00                	sbb    BYTE PTR [eax],al
    1613:	00 00                	add    BYTE PTR [eax],al
    1615:	01 11                	add    DWORD PTR [ecx],edx
    1617:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    161d:	0e                   	push   cs
    161e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1620:	11 01                	adc    DWORD PTR [ecx],eax
    1622:	12 06                	adc    al,BYTE PTR [esi]
    1624:	10 17                	adc    BYTE PTR [edi],dl
    1626:	00 00                	add    BYTE PTR [eax],al
    1628:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    162b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    162d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1630:	0e                   	push   cs
    1631:	00 00                	add    BYTE PTR [eax],al
    1633:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1636:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1638:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    163b:	08 00                	or     BYTE PTR [eax],al
    163d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1640:	00 03                	add    BYTE PTR [ebx],al
    1642:	0e                   	push   cs
    1643:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1645:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1647:	49                   	dec    ecx
    1648:	13 00                	adc    eax,DWORD PTR [eax]
    164a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1650:	49                   	dec    ecx
    1651:	13 00                	adc    eax,DWORD PTR [eax]
    1653:	00 06                	add    BYTE PTR [esi],al
    1655:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1659:	00 00                	add    BYTE PTR [eax],al
    165b:	07                   	pop    es
    165c:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
    165f:	0e                   	push   cs
    1660:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1662:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1664:	27                   	daa    
    1665:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1668:	11 01                	adc    DWORD PTR [ecx],eax
    166a:	12 06                	adc    al,BYTE PTR [esi]
    166c:	40                   	inc    eax
    166d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1673:	00 00                	add    BYTE PTR [eax],al
    1675:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    167b:	0b 3b                	or     edi,DWORD PTR [ebx]
    167d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1680:	02 18                	add    bl,BYTE PTR [eax]
    1682:	00 00                	add    BYTE PTR [eax],al
    1684:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    168a:	0b 3b                	or     edi,DWORD PTR [ebx]
    168c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    168f:	02 18                	add    bl,BYTE PTR [eax]
    1691:	00 00                	add    BYTE PTR [eax],al
    1693:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    1696:	03 0e                	add    ecx,DWORD PTR [esi]
    1698:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    169a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    169c:	49                   	dec    ecx
    169d:	13 02                	adc    eax,DWORD PTR [edx]
    169f:	18 00                	sbb    BYTE PTR [eax],al
    16a1:	00 0b                	add    BYTE PTR [ebx],cl
    16a3:	34 00                	xor    al,0x0
    16a5:	03 08                	add    ecx,DWORD PTR [eax]
    16a7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16a9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16ab:	49                   	dec    ecx
    16ac:	13 02                	adc    eax,DWORD PTR [edx]
    16ae:	18 00                	sbb    BYTE PTR [eax],al
    16b0:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
    16b3:	01 3f                	add    DWORD PTR [edi],edi
    16b5:	19 03                	sbb    DWORD PTR [ebx],eax
    16b7:	0e                   	push   cs
    16b8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16ba:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16bc:	27                   	daa    
    16bd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    16c0:	11 01                	adc    DWORD PTR [ecx],eax
    16c2:	12 06                	adc    al,BYTE PTR [esi]
    16c4:	40                   	inc    eax
    16c5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    16cb:	00 00                	add    BYTE PTR [eax],al
    16cd:	0d 34 00 03 0e       	or     eax,0xe030034
    16d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16d6:	49                   	dec    ecx
    16d7:	13 3f                	adc    edi,DWORD PTR [edi]
    16d9:	19 02                	sbb    DWORD PTR [edx],eax
    16db:	18 00                	sbb    BYTE PTR [eax],al
    16dd:	00 00                	add    BYTE PTR [eax],al
    16df:	01 11                	add    DWORD PTR [ecx],edx
    16e1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    16e7:	0e                   	push   cs
    16e8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16ea:	11 01                	adc    DWORD PTR [ecx],eax
    16ec:	12 06                	adc    al,BYTE PTR [esi]
    16ee:	10 17                	adc    BYTE PTR [edi],dl
    16f0:	00 00                	add    BYTE PTR [eax],al
    16f2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    16f5:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16f7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16fa:	0e                   	push   cs
    16fb:	00 00                	add    BYTE PTR [eax],al
    16fd:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1700:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1702:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1705:	08 00                	or     BYTE PTR [eax],al
    1707:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    170a:	00 03                	add    BYTE PTR [ebx],al
    170c:	0e                   	push   cs
    170d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    170f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1711:	49                   	dec    ecx
    1712:	13 00                	adc    eax,DWORD PTR [eax]
    1714:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    171a:	49                   	dec    ecx
    171b:	13 00                	adc    eax,DWORD PTR [eax]
    171d:	00 06                	add    BYTE PTR [esi],al
    171f:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1723:	00 00                	add    BYTE PTR [eax],al
    1725:	07                   	pop    es
    1726:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1729:	19 03                	sbb    DWORD PTR [ebx],eax
    172b:	0e                   	push   cs
    172c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    172e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1730:	27                   	daa    
    1731:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1734:	11 01                	adc    DWORD PTR [ecx],eax
    1736:	12 06                	adc    al,BYTE PTR [esi]
    1738:	40                   	inc    eax
    1739:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    173f:	00 00                	add    BYTE PTR [eax],al
    1741:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1747:	0b 3b                	or     edi,DWORD PTR [ebx]
    1749:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    174c:	02 18                	add    bl,BYTE PTR [eax]
    174e:	00 00                	add    BYTE PTR [eax],al
    1750:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1753:	03 08                	add    ecx,DWORD PTR [eax]
    1755:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1757:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1759:	49                   	dec    ecx
    175a:	13 02                	adc    eax,DWORD PTR [edx]
    175c:	18 00                	sbb    BYTE PTR [eax],al
    175e:	00 0a                	add    BYTE PTR [edx],cl
    1760:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1763:	19 03                	sbb    DWORD PTR [ebx],eax
    1765:	0e                   	push   cs
    1766:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1768:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    176a:	27                   	daa    
    176b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    176e:	11 01                	adc    DWORD PTR [ecx],eax
    1770:	12 06                	adc    al,BYTE PTR [esi]
    1772:	40                   	inc    eax
    1773:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1779:	00 00                	add    BYTE PTR [eax],al
    177b:	0b 01                	or     eax,DWORD PTR [ecx]
    177d:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    1780:	01 13                	add    DWORD PTR [ebx],edx
    1782:	00 00                	add    BYTE PTR [eax],al
    1784:	0c 21                	or     al,0x21
    1786:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1789:	2f                   	das    
    178a:	0b 00                	or     eax,DWORD PTR [eax]
    178c:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1792:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1794:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1796:	49                   	dec    ecx
    1797:	13 02                	adc    eax,DWORD PTR [edx]
    1799:	18 00                	sbb    BYTE PTR [eax],al
    179b:	00 0e                	add    BYTE PTR [esi],cl
    179d:	34 00                	xor    al,0x0
    179f:	03 0e                	add    ecx,DWORD PTR [esi]
    17a1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17a3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17a5:	49                   	dec    ecx
    17a6:	13 3f                	adc    edi,DWORD PTR [edi]
    17a8:	19 02                	sbb    DWORD PTR [edx],eax
    17aa:	18 00                	sbb    BYTE PTR [eax],al
    17ac:	00 00                	add    BYTE PTR [eax],al
    17ae:	01 11                	add    DWORD PTR [ecx],edx
    17b0:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    17b6:	0e                   	push   cs
    17b7:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    17b9:	11 01                	adc    DWORD PTR [ecx],eax
    17bb:	12 06                	adc    al,BYTE PTR [esi]
    17bd:	10 17                	adc    BYTE PTR [edi],dl
    17bf:	00 00                	add    BYTE PTR [eax],al
    17c1:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17c4:	03 0e                	add    ecx,DWORD PTR [esi]
    17c6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17c8:	49                   	dec    ecx
    17c9:	13 3a                	adc    edi,DWORD PTR [edx]
    17cb:	0b 3b                	or     edi,DWORD PTR [ebx]
    17cd:	0b 01                	or     eax,DWORD PTR [ecx]
    17cf:	13 00                	adc    eax,DWORD PTR [eax]
    17d1:	00 03                	add    BYTE PTR [ebx],al
    17d3:	28 00                	sub    BYTE PTR [eax],al
    17d5:	03 0e                	add    ecx,DWORD PTR [esi]
    17d7:	1c 0b                	sbb    al,0xb
    17d9:	00 00                	add    BYTE PTR [eax],al
    17db:	04 28                	add    al,0x28
    17dd:	00 03                	add    BYTE PTR [ebx],al
    17df:	0e                   	push   cs
    17e0:	1c 05                	sbb    al,0x5
    17e2:	00 00                	add    BYTE PTR [eax],al
    17e4:	05 24 00 0b 0b       	add    eax,0xb0b0024
    17e9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    17ec:	0e                   	push   cs
    17ed:	00 00                	add    BYTE PTR [eax],al
    17ef:	06                   	push   es
    17f0:	24 00                	and    al,0x0
    17f2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    17f4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    17f7:	08 00                	or     BYTE PTR [eax],al
    17f9:	00 07                	add    BYTE PTR [edi],al
    17fb:	16                   	push   ss
    17fc:	00 03                	add    BYTE PTR [ebx],al
    17fe:	0e                   	push   cs
    17ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1801:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1803:	49                   	dec    ecx
    1804:	13 00                	adc    eax,DWORD PTR [eax]
    1806:	00 08                	add    BYTE PTR [eax],cl
    1808:	13 01                	adc    eax,DWORD PTR [ecx]
    180a:	03 08                	add    ecx,DWORD PTR [eax]
    180c:	0b 0b                	or     ecx,DWORD PTR [ebx]
    180e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1810:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1812:	01 13                	add    DWORD PTR [ebx],edx
    1814:	00 00                	add    BYTE PTR [eax],al
    1816:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    181c:	0b 3b                	or     edi,DWORD PTR [ebx]
    181e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1821:	38 0b                	cmp    BYTE PTR [ebx],cl
    1823:	00 00                	add    BYTE PTR [eax],al
    1825:	0a 0f                	or     cl,BYTE PTR [edi]
    1827:	00 0b                	add    BYTE PTR [ebx],cl
    1829:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    182c:	00 00                	add    BYTE PTR [eax],al
    182e:	0b 26                	or     esp,DWORD PTR [esi]
    1830:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1833:	00 00                	add    BYTE PTR [eax],al
    1835:	0c 2e                	or     al,0x2e
    1837:	01 3f                	add    DWORD PTR [edi],edi
    1839:	19 03                	sbb    DWORD PTR [ebx],eax
    183b:	0e                   	push   cs
    183c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    183e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1840:	49                   	dec    ecx
    1841:	13 11                	adc    edx,DWORD PTR [ecx]
    1843:	01 12                	add    DWORD PTR [edx],edx
    1845:	06                   	push   es
    1846:	40                   	inc    eax
    1847:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    184d:	00 00                	add    BYTE PTR [eax],al
    184f:	0d 34 00 03 0e       	or     eax,0xe030034
    1854:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1856:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1858:	49                   	dec    ecx
    1859:	13 02                	adc    eax,DWORD PTR [edx]
    185b:	18 00                	sbb    BYTE PTR [eax],al
    185d:	00 0e                	add    BYTE PTR [esi],cl
    185f:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1862:	19 03                	sbb    DWORD PTR [ebx],eax
    1864:	0e                   	push   cs
    1865:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1867:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1869:	27                   	daa    
    186a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    186d:	11 01                	adc    DWORD PTR [ecx],eax
    186f:	12 06                	adc    al,BYTE PTR [esi]
    1871:	40                   	inc    eax
    1872:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1878:	00 00                	add    BYTE PTR [eax],al
    187a:	0f 05                	syscall 
    187c:	00 03                	add    BYTE PTR [ebx],al
    187e:	0e                   	push   cs
    187f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1881:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1883:	49                   	dec    ecx
    1884:	13 02                	adc    eax,DWORD PTR [edx]
    1886:	18 00                	sbb    BYTE PTR [eax],al
    1888:	00 10                	add    BYTE PTR [eax],dl
    188a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    188d:	19 03                	sbb    DWORD PTR [ebx],eax
    188f:	0e                   	push   cs
    1890:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1892:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1894:	27                   	daa    
    1895:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1898:	11 01                	adc    DWORD PTR [ecx],eax
    189a:	12 06                	adc    al,BYTE PTR [esi]
    189c:	40                   	inc    eax
    189d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    18a3:	00 00                	add    BYTE PTR [eax],al
    18a5:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    18a8:	03 08                	add    ecx,DWORD PTR [eax]
    18aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18ae:	49                   	dec    ecx
    18af:	13 02                	adc    eax,DWORD PTR [edx]
    18b1:	18 00                	sbb    BYTE PTR [eax],al
    18b3:	00 12                	add    BYTE PTR [edx],dl
    18b5:	34 00                	xor    al,0x0
    18b7:	03 0e                	add    ecx,DWORD PTR [esi]
    18b9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18bb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18bd:	49                   	dec    ecx
    18be:	13 3f                	adc    edi,DWORD PTR [edi]
    18c0:	19 02                	sbb    DWORD PTR [edx],eax
    18c2:	18 00                	sbb    BYTE PTR [eax],al
    18c4:	00 13                	add    BYTE PTR [ebx],dl
    18c6:	01 01                	add    DWORD PTR [ecx],eax
    18c8:	49                   	dec    ecx
    18c9:	13 01                	adc    eax,DWORD PTR [ecx]
    18cb:	13 00                	adc    eax,DWORD PTR [eax]
    18cd:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    18d0:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    18d3:	2f                   	das    
    18d4:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	96                   	xchg   esi,eax
  27:	01 00                	add    DWORD PTR [eax],eax
  29:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	34 05                	xor    al,0x5
  68:	00 00                	add    BYTE PTR [eax],al
  6a:	04 00                	add    al,0x0
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	4c                   	dec    esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	7d 07                	jge    8f <sysEnter_Vector-0x12ff71>
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	98                   	cwde   
  91:	04 00                	add    al,0x0
  93:	9f                   	lahf   
  94:	6e                   	outs   dx,BYTE PTR ds:[esi]
  95:	01 00                	add    DWORD PTR [eax],eax
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	7a 09                	jp     b1 <sysEnter_Vector-0x12ff4f>
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	08 06                	or     BYTE PTR [esi],al
  b2:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	fd                   	std    
  c7:	0c 00                	or     al,0x0
  c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	e8 08 00 9f f2       	call   f29f00dd <tmbuf+0x539e8efd>
  d5:	07                   	pop    es
	...
  de:	00 00                	add    BYTE PTR [eax],al
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	a1 15 00 00 04       	mov    eax,ds:0x4000015
  eb:	00 00                	add    BYTE PTR [eax],al
  ed:	00 00                	add    BYTE PTR [eax],al
  ef:	00 dc                	add    ah,bl
  f1:	10 00                	adc    BYTE PTR [eax],al
  f3:	9f                   	lahf   
  f4:	69 01 00 00 00 00    	imul   eax,DWORD PTR [ecx],0x0
  fa:	00 00                	add    BYTE PTR [eax],al
  fc:	00 00                	add    BYTE PTR [eax],al
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	b8 18 00 00 04       	mov    eax,0x4000018
 10b:	00 00                	add    BYTE PTR [eax],al
 10d:	00 00                	add    BYTE PTR [eax],al
 10f:	00 48 12             	add    BYTE PTR [eax+0x12],cl
 112:	00 9f a8 0c 00 00    	add    BYTE PTR [edi+0xca8],bl
	...
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	f9                   	stc    
 127:	23 00                	and    eax,DWORD PTR [eax]
 129:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	f0 1e                	lock push ds
 132:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	02 27                	add    ah,BYTE PTR [edi]
 148:	00 00                	add    BYTE PTR [eax],al
 14a:	04 00                	add    al,0x0
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	64                   	fs
 151:	1f                   	pop    ds
 152:	00 9f 15 06 00 00    	add    BYTE PTR [edi+0x615],bl
	...
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	49                   	dec    ecx
 167:	2c 00                	sub    al,0x0
 169:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	7c 25                	jl     197 <sysEnter_Vector-0x12fe69>
 172:	00 9f bb 01 00 00    	add    BYTE PTR [edi+0x1bb],bl
	...
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	ac                   	lods   al,BYTE PTR ds:[esi]
 187:	2e 00 00             	add    BYTE PTR cs:[eax],al
 18a:	04 00                	add    al,0x0
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	38 27                	cmp    BYTE PTR [edi],ah
 192:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	ce                   	into   
 1a7:	30 00                	xor    BYTE PTR [eax],al
 1a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	20 28                	and    BYTE PTR [eax],ch
 1b2:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
	...
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	54                   	push   esp
 1c7:	33 00                	xor    eax,DWORD PTR [eax]
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	78 28                	js     1fa <sysEnter_Vector-0x12fe06>
 1d2:	00 9f 18 07 00 00    	add    BYTE PTR [edi+0x718],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	48                   	dec    eax
 1e7:	37                   	aaa    
 1e8:	00 00                	add    BYTE PTR [eax],al
 1ea:	04 00                	add    al,0x0
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	90                   	nop
 1f1:	2f                   	das    
 1f2:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
	...
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	b1 38                	mov    cl,0x38
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	14 30                	adc    al,0x30
 212:	00 9f 11 01 00 00    	add    BYTE PTR [edi+0x111],bl
	...
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	fa                   	cli    
 227:	3a 00                	cmp    al,BYTE PTR [eax]
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	28 31                	sub    BYTE PTR [ecx],dh
 232:	00 9f 7b 00 00 00    	add    BYTE PTR [edi+0x7b],bl
	...
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	d1 3c 00             	sar    DWORD PTR [eax+eax*1],1
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
 251:	31 00                	xor    DWORD PTR [eax],eax
 253:	9f                   	lahf   
 254:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 25a:	00 00                	add    BYTE PTR [eax],al
 25c:	00 00                	add    BYTE PTR [eax],al
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	d1 3e                	sar    DWORD PTR [esi],1
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	6c                   	ins    BYTE PTR es:[edi],dx
 271:	32 00                	xor    al,BYTE PTR [eax]
 273:	9f                   	lahf   
 274:	89 00                	mov    DWORD PTR [eax],eax
	...
 27e:	00 00                	add    BYTE PTR [eax],al
 280:	1c 00                	sbb    al,0x0
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	54                   	push   esp
 287:	40                   	inc    eax
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	f8                   	clc    
 291:	32 00                	xor    al,BYTE PTR [eax]
 293:	9f                   	lahf   
 294:	a2 00 00 00 00       	mov    ds:0x0,al
 299:	00 00                	add    BYTE PTR [eax],al
 29b:	00 00                	add    BYTE PTR [eax],al
 29d:	00 00                	add    BYTE PTR [eax],al
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	69 42 00 00 04 00 00 	imul   eax,DWORD PTR [edx+0x0],0x400
 2ad:	00 00                	add    BYTE PTR [eax],al
 2af:	00 9c 33 00 9f ce 00 	add    BYTE PTR [ebx+esi*1+0xce9f00],bl
	...
 2be:	00 00                	add    BYTE PTR [eax],al
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	4b                   	dec    ebx
 2c7:	43                   	inc    ebx
 2c8:	00 00                	add    BYTE PTR [eax],al
 2ca:	04 00                	add    al,0x0
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	6c                   	ins    BYTE PTR es:[edi],dx
 2d1:	34 00                	xor    al,0x0
 2d3:	9f                   	lahf   
 2d4:	8c 00                	mov    WORD PTR [eax],es
	...
 2de:	00 00                	add    BYTE PTR [eax],al
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	3f                   	aas    
 2e7:	44                   	inc    esp
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	f8                   	clc    
 2f1:	34 00                	xor    al,0x0
 2f3:	9f                   	lahf   
 2f4:	7d 01                	jge    2f7 <sysEnter_Vector-0x12fd09>
	...
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	08 46 00             	or     BYTE PTR [esi+0x0],al
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	78 36                	js     348 <sysEnter_Vector-0x12fcb8>
 312:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	78 46                	js     36e <sysEnter_Vector-0x12fc92>
 328:	00 00                	add    BYTE PTR [eax],al
 32a:	04 00                	add    al,0x0
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	98                   	cwde   
 331:	36 00 9f 9c 01 00 00 	add    BYTE PTR ss:[edi+0x19c],bl
	...
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	3f                   	aas    
 347:	48                   	dec    eax
 348:	00 00                	add    BYTE PTR [eax],al
 34a:	04 00                	add    al,0x0
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	34 38                	xor    al,0x38
 352:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	d8 49 00             	fmul   DWORD PTR [ecx+0x0]
 369:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	ec                   	in     al,dx
 371:	38 00                	cmp    BYTE PTR [eax],al
 373:	9f                   	lahf   
 374:	69 01 00 00 00 00    	imul   eax,DWORD PTR [ecx],0x0
 37a:	00 00                	add    BYTE PTR [eax],al
 37c:	00 00                	add    BYTE PTR [eax],al
 37e:	00 00                	add    BYTE PTR [eax],al
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	d1 4b 00             	ror    DWORD PTR [ebx+0x0],1
 389:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	58                   	pop    eax
 391:	3a 00                	cmp    al,BYTE PTR [eax]
 393:	9f                   	lahf   
 394:	29 01                	sub    DWORD PTR [ecx],eax
	...
 39e:	00 00                	add    BYTE PTR [eax],al
 3a0:	1c 00                	sbb    al,0x0
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	0e                   	push   cs
 3a7:	4e                   	dec    esi
 3a8:	00 00                	add    BYTE PTR [eax],al
 3aa:	04 00                	add    al,0x0
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	84 3b                	test   BYTE PTR [ebx],bh
 3b2:	00 9f 0e 0d 00 00    	add    BYTE PTR [edi+0xd0e],bl
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	da 00                	fiadd  DWORD PTR [eax]
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	ba 00 00 00 01       	mov    edx,0x1000000
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	2f                   	das    
      3c:	68 6f 6d 65 2f       	push   0x2f656d6f
      41:	79 6f                	jns    b2 <sysEnter_Vector-0x12ff4e>
      43:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      4a:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      4d:	73 73                	jae    c2 <sysEnter_Vector-0x12ff3e>
      4f:	2f                   	das    
      50:	6c                   	ins    BYTE PTR es:[edi],dx
      51:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      58:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      5e:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      64:	78 2d                	js     93 <sysEnter_Vector-0x12ff6d>
      66:	67 6e                	outs   dx,BYTE PTR ds:[si]
      68:	75 2f                	jne    99 <sysEnter_Vector-0x12ff67>
      6a:	35 2e 33 2e 30       	xor    eax,0x302e332e
      6f:	2f                   	das    
      70:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      77:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
      7a:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
      7e:	65 00 00             	add    BYTE PTR gs:[eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      8f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      96:	63 
      97:	2e                   	cs
      98:	68 00 02 00 00       	push   0x200
      9d:	6d                   	ins    DWORD PTR es:[edi],dx
      9e:	61                   	popa   
      9f:	6c                   	ins    BYTE PTR es:[edi],dx
      a0:	6c                   	ins    BYTE PTR es:[edi],dx
      a1:	6f                   	outs   dx,DWORD PTR ds:[esi]
      a2:	63 2e                	arpl   WORD PTR [esi],bp
      a4:	68 00 03 00 00       	push   0x300
      a9:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
      b0:	03 00                	add    eax,DWORD PTR [eax]
      b2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
      b6:	43                   	inc    ebx
      b7:	68 72 69 73 4f       	push   0x4f736972
      bc:	53                   	push   ebx
      bd:	2e                   	cs
      be:	68 00 03 00 00       	push   0x300
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	05 02 00 00 00       	add    eax,0x2
      ca:	9f                   	lahf   
      cb:	1a c9                	sbb    cl,cl
      cd:	2f                   	das    
      ce:	f3 72 cb             	repz jb 9c <sysEnter_Vector-0x12ff64>
      d1:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      d6:	72 cb                	jb     a3 <sysEnter_Vector-0x12ff5d>
      d8:	3d 02 02 00 01       	cmp    eax,0x1000202
      dd:	01 0d 01 00 00 02    	add    DWORD PTR ds:0x2000001,ecx
      e3:	00 bb 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],bh
      e9:	01 fb                	add    ebx,edi
      eb:	0e                   	push   cs
      ec:	0d 00 01 01 01       	or     eax,0x1010100
      f1:	01 00                	add    DWORD PTR [eax],eax
      f3:	00 00                	add    BYTE PTR [eax],al
      f5:	01 00                	add    DWORD PTR [eax],eax
      f7:	00 01                	add    BYTE PTR [ecx],al
      f9:	2e                   	cs
      fa:	2e                   	cs
      fb:	2f                   	das    
      fc:	2e                   	cs
      fd:	2e                   	cs
      fe:	2f                   	das    
      ff:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     103:	6a 2f                	push   0x2f
     105:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     108:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     10f:	63 2f                	arpl   WORD PTR [edi],bp
     111:	73 74                	jae    187 <sysEnter_Vector-0x12fe79>
     113:	72 69                	jb     17e <sysEnter_Vector-0x12fe82>
     115:	6e                   	outs   dx,BYTE PTR ds:[esi]
     116:	67 73 00             	addr16 jae 119 <sysEnter_Vector-0x12fee7>
     119:	2f                   	das    
     11a:	68 6f 6d 65 2f       	push   0x2f656d6f
     11f:	79 6f                	jns    190 <sysEnter_Vector-0x12fe70>
     121:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     128:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     12b:	73 73                	jae    1a0 <sysEnter_Vector-0x12fe60>
     12d:	2f                   	das    
     12e:	6c                   	ins    BYTE PTR es:[edi],dx
     12f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     136:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     142:	78 2d                	js     171 <sysEnter_Vector-0x12fe8f>
     144:	67 6e                	outs   dx,BYTE PTR ds:[si]
     146:	75 2f                	jne    177 <sysEnter_Vector-0x12fe89>
     148:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14d:	2f                   	das    
     14e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     155:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     158:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     15c:	65 00 00             	add    BYTE PTR gs:[eax],al
     15f:	73 74                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     161:	72 63                	jb     1c6 <sysEnter_Vector-0x12fe3a>
     163:	73 70                	jae    1d5 <sysEnter_Vector-0x12fe2b>
     165:	6e                   	outs   dx,BYTE PTR ds:[esi]
     166:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     169:	01 00                	add    DWORD PTR [eax],eax
     16b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     175:	63 
     176:	2e                   	cs
     177:	68 00 02 00 00       	push   0x200
     17c:	6d                   	ins    DWORD PTR es:[edi],dx
     17d:	61                   	popa   
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	6c                   	ins    BYTE PTR es:[edi],dx
     180:	6f                   	outs   dx,DWORD PTR ds:[esi]
     181:	63 2e                	arpl   WORD PTR [esi],bp
     183:	68 00 03 00 00       	push   0x300
     188:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     18f:	03 00                	add    eax,DWORD PTR [eax]
     191:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     195:	43                   	inc    ebx
     196:	68 72 69 73 4f       	push   0x4f736972
     19b:	53                   	push   ebx
     19c:	2e                   	cs
     19d:	68 00 03 00 00       	push   0x300
     1a2:	00 00                	add    BYTE PTR [eax],al
     1a4:	05 02 70 00 00       	add    eax,0x7002
     1a9:	9f                   	lahf   
     1aa:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     1b0:	75 00                	jne    1b2 <sysEnter_Vector-0x12fe4e>
     1b2:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1b5:	aa                   	stos   BYTE PTR es:[edi],al
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	04 01                	add    al,0x1
     1ba:	06                   	push   es
     1bb:	3c 00                	cmp    al,0x0
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	06                   	push   es
     1c1:	73 00                	jae    1c3 <sysEnter_Vector-0x12fe3d>
     1c3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1c6:	06                   	push   es
     1c7:	82                   	(bad)  
     1c8:	06                   	push   es
     1c9:	6d                   	ins    DWORD PTR es:[edi],dx
     1ca:	91                   	xchg   ecx,eax
     1cb:	4d                   	dec    ebp
     1cc:	e7 9f                	out    0x9f,eax
     1ce:	59                   	pop    ecx
     1cf:	75 00                	jne    1d1 <sysEnter_Vector-0x12fe2f>
     1d1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1d4:	aa                   	stos   BYTE PTR es:[edi],al
     1d5:	00 02                	add    BYTE PTR [edx],al
     1d7:	04 01                	add    al,0x1
     1d9:	06                   	push   es
     1da:	3c 00                	cmp    al,0x0
     1dc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1df:	06                   	push   es
     1e0:	73 00                	jae    1e2 <sysEnter_Vector-0x12fe1e>
     1e2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1e5:	06                   	push   es
     1e6:	82                   	(bad)  
     1e7:	06                   	push   es
     1e8:	6d                   	ins    DWORD PTR es:[edi],dx
     1e9:	91                   	xchg   ecx,eax
     1ea:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1ed:	01 01                	add    DWORD PTR [ecx],eax
     1ef:	ee                   	out    dx,al
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	00 02                	add    BYTE PTR [edx],al
     1f4:	00 ba 00 00 00 01    	add    BYTE PTR [edx+0x1000000],bh
     1fa:	01 fb                	add    ebx,edi
     1fc:	0e                   	push   cs
     1fd:	0d 00 01 01 01       	or     eax,0x1010100
     202:	01 00                	add    DWORD PTR [eax],eax
     204:	00 00                	add    BYTE PTR [eax],al
     206:	01 00                	add    DWORD PTR [eax],eax
     208:	00 01                	add    BYTE PTR [ecx],al
     20a:	2e                   	cs
     20b:	2e                   	cs
     20c:	2f                   	das    
     20d:	2e                   	cs
     20e:	2e                   	cs
     20f:	2f                   	das    
     210:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     214:	6a 2f                	push   0x2f
     216:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     219:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     220:	63 2f                	arpl   WORD PTR [edi],bp
     222:	73 74                	jae    298 <sysEnter_Vector-0x12fd68>
     224:	72 69                	jb     28f <sysEnter_Vector-0x12fd71>
     226:	6e                   	outs   dx,BYTE PTR ds:[esi]
     227:	67 73 00             	addr16 jae 22a <sysEnter_Vector-0x12fdd6>
     22a:	2f                   	das    
     22b:	68 6f 6d 65 2f       	push   0x2f656d6f
     230:	79 6f                	jns    2a1 <sysEnter_Vector-0x12fd5f>
     232:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     239:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     23c:	73 73                	jae    2b1 <sysEnter_Vector-0x12fd4f>
     23e:	2f                   	das    
     23f:	6c                   	ins    BYTE PTR es:[edi],dx
     240:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     247:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     24d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     253:	78 2d                	js     282 <sysEnter_Vector-0x12fd7e>
     255:	67 6e                	outs   dx,BYTE PTR ds:[si]
     257:	75 2f                	jne    288 <sysEnter_Vector-0x12fd78>
     259:	35 2e 33 2e 30       	xor    eax,0x302e332e
     25e:	2f                   	das    
     25f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     266:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     269:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     26d:	65 00 00             	add    BYTE PTR gs:[eax],al
     270:	73 74                	jae    2e6 <sysEnter_Vector-0x12fd1a>
     272:	72 74                	jb     2e8 <sysEnter_Vector-0x12fd18>
     274:	6f                   	outs   dx,DWORD PTR ds:[esi]
     275:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     278:	00 01                	add    BYTE PTR [ecx],al
     27a:	00 00                	add    BYTE PTR [eax],al
     27c:	73 74                	jae    2f2 <sysEnter_Vector-0x12fd0e>
     27e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     285:	63 
     286:	2e                   	cs
     287:	68 00 02 00 00       	push   0x200
     28c:	6d                   	ins    DWORD PTR es:[edi],dx
     28d:	61                   	popa   
     28e:	6c                   	ins    BYTE PTR es:[edi],dx
     28f:	6c                   	ins    BYTE PTR es:[edi],dx
     290:	6f                   	outs   dx,DWORD PTR ds:[esi]
     291:	63 2e                	arpl   WORD PTR [esi],bp
     293:	68 00 03 00 00       	push   0x300
     298:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     29f:	03 00                	add    eax,DWORD PTR [eax]
     2a1:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     2a5:	43                   	inc    ebx
     2a6:	68 72 69 73 4f       	push   0x4f736972
     2ab:	53                   	push   ebx
     2ac:	2e                   	cs
     2ad:	68 00 03 00 00       	push   0x300
     2b2:	00 00                	add    BYTE PTR [eax],al
     2b4:	05 02 1c 01 00       	add    eax,0x11c02
     2b9:	9f                   	lahf   
     2ba:	03 28                	add    ebp,DWORD PTR [eax]
     2bc:	01 f6                	add    esi,esi
     2be:	67 92                	addr16 xchg edx,eax
     2c0:	08 2f                	or     BYTE PTR [edi],ch
     2c2:	75 08                	jne    2cc <sysEnter_Vector-0x12fd34>
     2c4:	2f                   	das    
     2c5:	4b                   	dec    ebx
     2c6:	08 c9                	or     cl,cl
     2c8:	c9                   	leave  
     2c9:	08 21                	or     BYTE PTR [ecx],ah
     2cb:	3d 77 f6 67 92       	cmp    eax,0x9267f677
     2d0:	08 2f                	or     BYTE PTR [edi],ch
     2d2:	75 08                	jne    2dc <sysEnter_Vector-0x12fd24>
     2d4:	2f                   	das    
     2d5:	4b                   	dec    ebx
     2d6:	08 c9                	or     cl,cl
     2d8:	c9                   	leave  
     2d9:	08 21                	or     BYTE PTR [ecx],ah
     2db:	3d 02 07 00 01       	cmp    eax,0x1000702
     2e0:	01 1a                	add    DWORD PTR [edx],ebx
     2e2:	01 00                	add    DWORD PTR [eax],eax
     2e4:	00 02                	add    BYTE PTR [edx],al
     2e6:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
     2ec:	01 fb                	add    ebx,edi
     2ee:	0e                   	push   cs
     2ef:	0d 00 01 01 01       	or     eax,0x1010100
     2f4:	01 00                	add    DWORD PTR [eax],eax
     2f6:	00 00                	add    BYTE PTR [eax],al
     2f8:	01 00                	add    DWORD PTR [eax],eax
     2fa:	00 01                	add    BYTE PTR [ecx],al
     2fc:	73 72                	jae    370 <sysEnter_Vector-0x12fc90>
     2fe:	63 00                	arpl   WORD PTR [eax],ax
     300:	2f                   	das    
     301:	68 6f 6d 65 2f       	push   0x2f656d6f
     306:	79 6f                	jns    377 <sysEnter_Vector-0x12fc89>
     308:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     30f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     312:	73 73                	jae    387 <sysEnter_Vector-0x12fc79>
     314:	2f                   	das    
     315:	6c                   	ins    BYTE PTR es:[edi],dx
     316:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     31d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     323:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     329:	78 2d                	js     358 <sysEnter_Vector-0x12fca8>
     32b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     32d:	75 2f                	jne    35e <sysEnter_Vector-0x12fca2>
     32f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     334:	2f                   	das    
     335:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     33c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     33f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     343:	65 00 00             	add    BYTE PTR gs:[eax],al
     346:	61                   	popa   
     347:	73 63                	jae    3ac <sysEnter_Vector-0x12fc54>
     349:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     350:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     353:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     35a:	63 
     35b:	2e                   	cs
     35c:	68 00 02 00 00       	push   0x200
     361:	6d                   	ins    DWORD PTR es:[edi],dx
     362:	61                   	popa   
     363:	6c                   	ins    BYTE PTR es:[edi],dx
     364:	6c                   	ins    BYTE PTR es:[edi],dx
     365:	6f                   	outs   dx,DWORD PTR ds:[esi]
     366:	63 2e                	arpl   WORD PTR [esi],bp
     368:	68 00 03 00 00       	push   0x300
     36d:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     374:	03 00                	add    eax,DWORD PTR [eax]
     376:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     37a:	43                   	inc    ebx
     37b:	68 72 69 73 4f       	push   0x4f736972
     380:	53                   	push   ebx
     381:	2e                   	cs
     382:	68 00 03 00 00       	push   0x300
     387:	00 00                	add    BYTE PTR [eax],al
     389:	05 02 4c 02 00       	add    eax,0x24c02
     38e:	9f                   	lahf   
     38f:	03 09                	add    ecx,DWORD PTR [ecx]
     391:	01 08                	add    DWORD PTR [eax],ecx
     393:	16                   	push   ss
     394:	00 02                	add    BYTE PTR [edx],al
     396:	04 03                	add    al,0x3
     398:	08 d7                	or     bh,dl
     39a:	00 02                	add    BYTE PTR [edx],al
     39c:	04 03                	add    al,0x3
     39e:	d7                   	xlat   BYTE PTR ds:[ebx]
     39f:	00 02                	add    BYTE PTR [edx],al
     3a1:	04 03                	add    al,0x3
     3a3:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     3a6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3a9:	d3 00                	rol    DWORD PTR [eax],cl
     3ab:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3ae:	06                   	push   es
     3af:	82                   	(bad)  
     3b0:	06                   	push   es
     3b1:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     3b4:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     3b9:	04 01                	add    al,0x1
     3bb:	76 00                	jbe    3bd <sysEnter_Vector-0x12fc43>
     3bd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3c0:	02 3b                	add    bh,BYTE PTR [ebx]
     3c2:	13 08                	adc    ecx,DWORD PTR [eax]
     3c4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3c8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3c9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3ca:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     3d0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3d3:	76 00                	jbe    3d5 <sysEnter_Vector-0x12fc2b>
     3d5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3d8:	02 3b                	add    bh,BYTE PTR [ebx]
     3da:	13 08                	adc    ecx,DWORD PTR [eax]
     3dc:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3e0:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3e1:	d7                   	xlat   BYTE PTR ds:[ebx]
     3e2:	6a f3                	push   0xfffffff3
     3e4:	78 00                	js     3e6 <sysEnter_Vector-0x12fc1a>
     3e6:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3e9:	91                   	xchg   ecx,eax
     3ea:	00 02                	add    BYTE PTR [edx],al
     3ec:	04 03                	add    al,0x3
     3ee:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3f1:	00 02                	add    BYTE PTR [edx],al
     3f3:	04 01                	add    al,0x1
     3f5:	06                   	push   es
     3f6:	4a                   	dec    edx
     3f7:	06                   	push   es
     3f8:	e8 3d 02 02 00       	call   2063a <sysEnter_Vector-0x10f9c6>
     3fd:	01 01                	add    DWORD PTR [ecx],eax
     3ff:	d8 00                	fadd   DWORD PTR [eax]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	02 00                	add    al,BYTE PTR [eax]
     405:	9f                   	lahf   
     406:	00 00                	add    BYTE PTR [eax],al
     408:	00 01                	add    BYTE PTR [ecx],al
     40a:	01 fb                	add    ebx,edi
     40c:	0e                   	push   cs
     40d:	0d 00 01 01 01       	or     eax,0x1010100
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 00                	add    BYTE PTR [eax],al
     416:	01 00                	add    DWORD PTR [eax],eax
     418:	00 01                	add    BYTE PTR [ecx],al
     41a:	73 72                	jae    48e <sysEnter_Vector-0x12fb72>
     41c:	63 00                	arpl   WORD PTR [eax],ax
     41e:	2f                   	das    
     41f:	68 6f 6d 65 2f       	push   0x2f656d6f
     424:	79 6f                	jns    495 <sysEnter_Vector-0x12fb6b>
     426:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     42d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     430:	73 73                	jae    4a5 <sysEnter_Vector-0x12fb5b>
     432:	2f                   	das    
     433:	6c                   	ins    BYTE PTR es:[edi],dx
     434:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     43b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     441:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     447:	78 2d                	js     476 <sysEnter_Vector-0x12fb8a>
     449:	67 6e                	outs   dx,BYTE PTR ds:[si]
     44b:	75 2f                	jne    47c <sysEnter_Vector-0x12fb84>
     44d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     452:	2f                   	das    
     453:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     45a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     45d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     461:	65 00 00             	add    BYTE PTR gs:[eax],al
     464:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     467:	73 6f                	jae    4d8 <sysEnter_Vector-0x12fb28>
     469:	6c                   	ins    BYTE PTR es:[edi],dx
     46a:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     46e:	01 00                	add    DWORD PTR [eax],eax
     470:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     473:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     47a:	63 
     47b:	2e                   	cs
     47c:	68 00 02 00 00       	push   0x200
     481:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     488:	03 00                	add    eax,DWORD PTR [eax]
     48a:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     48d:	6c                   	ins    BYTE PTR es:[edi],dx
     48e:	6c                   	ins    BYTE PTR es:[edi],dx
     48f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     490:	63 2e                	arpl   WORD PTR [esi],bp
     492:	68 00 03 00 00       	push   0x300
     497:	6c                   	ins    BYTE PTR es:[edi],dx
     498:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     49f:	4f                   	dec    edi
     4a0:	53                   	push   ebx
     4a1:	2e                   	cs
     4a2:	68 00 03 00 00       	push   0x300
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	05 02 98 04 00       	add    eax,0x49802
     4ae:	9f                   	lahf   
     4af:	03 0d 01 08 24 08    	add    ecx,DWORD PTR ds:0x8240801
     4b5:	59                   	pop    ecx
     4b6:	08 21                	or     BYTE PTR [ecx],ah
     4b8:	08 2f                	or     BYTE PTR [edi],ch
     4ba:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4bd:	21 08                	and    DWORD PTR [eax],ecx
     4bf:	2f                   	das    
     4c0:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     4c3:	59                   	pop    ecx
     4c4:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     4ca:	5a                   	pop    edx
     4cb:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     4ce:	08 23                	or     BYTE PTR [ebx],ah
     4d0:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     4d3:	5a                   	pop    edx
     4d4:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     4d7:	06                   	push   es
     4d8:	00 01                	add    BYTE PTR [ecx],al
     4da:	01 64 01 00          	add    DWORD PTR [ecx+eax*1+0x0],esp
     4de:	00 02                	add    BYTE PTR [edx],al
     4e0:	00 ea                	add    dl,ch
     4e2:	00 00                	add    BYTE PTR [eax],al
     4e4:	00 01                	add    BYTE PTR [ecx],al
     4e6:	01 fb                	add    ebx,edi
     4e8:	0e                   	push   cs
     4e9:	0d 00 01 01 01       	or     eax,0x1010100
     4ee:	01 00                	add    DWORD PTR [eax],eax
     4f0:	00 00                	add    BYTE PTR [eax],al
     4f2:	01 00                	add    DWORD PTR [eax],eax
     4f4:	00 01                	add    BYTE PTR [ecx],al
     4f6:	73 72                	jae    56a <sysEnter_Vector-0x12fa96>
     4f8:	63 00                	arpl   WORD PTR [eax],ax
     4fa:	2f                   	das    
     4fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     500:	79 6f                	jns    571 <sysEnter_Vector-0x12fa8f>
     502:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     509:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50c:	73 73                	jae    581 <sysEnter_Vector-0x12fa7f>
     50e:	2f                   	das    
     50f:	6c                   	ins    BYTE PTR es:[edi],dx
     510:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     517:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     523:	78 2d                	js     552 <sysEnter_Vector-0x12faae>
     525:	67 6e                	outs   dx,BYTE PTR ds:[si]
     527:	75 2f                	jne    558 <sysEnter_Vector-0x12faa8>
     529:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52e:	2f                   	das    
     52f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     536:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     539:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53d:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     541:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     545:	65                   	gs
     546:	2f                   	das    
     547:	2e                   	cs
     548:	2e                   	cs
     549:	2f                   	das    
     54a:	2e                   	cs
     54b:	2e                   	cs
     54c:	2f                   	das    
     54d:	2e                   	cs
     54e:	2e                   	cs
     54f:	2f                   	das    
     550:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     554:	6a 2f                	push   0x2f
     556:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     559:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     560:	6e                   	outs   dx,BYTE PTR ds:[esi]
     561:	65                   	gs
     562:	6c                   	ins    BYTE PTR es:[edi],dx
     563:	2f                   	das    
     564:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     56f:	76 69                	jbe    5da <sysEnter_Vector-0x12fa26>
     571:	72 6f                	jb     5e2 <sysEnter_Vector-0x12fa1e>
     573:	6e                   	outs   dx,BYTE PTR ds:[esi]
     574:	6d                   	ins    DWORD PTR es:[edi],dx
     575:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     577:	74 2e                	je     5a7 <sysEnter_Vector-0x12fa59>
     579:	63 00                	arpl   WORD PTR [eax],ax
     57b:	01 00                	add    DWORD PTR [eax],eax
     57d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     580:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     587:	63 
     588:	2e                   	cs
     589:	68 00 02 00 00       	push   0x200
     58e:	73 74                	jae    604 <sysEnter_Vector-0x12f9fc>
     590:	64                   	fs
     591:	64                   	fs
     592:	65                   	gs
     593:	66                   	data16
     594:	2e                   	cs
     595:	68 00 02 00 00       	push   0x200
     59a:	6d                   	ins    DWORD PTR es:[edi],dx
     59b:	61                   	popa   
     59c:	6c                   	ins    BYTE PTR es:[edi],dx
     59d:	6c                   	ins    BYTE PTR es:[edi],dx
     59e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     59f:	63 2e                	arpl   WORD PTR [esi],bp
     5a1:	68 00 03 00 00       	push   0x300
     5a6:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     5ad:	03 00                	add    eax,DWORD PTR [eax]
     5af:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     5b3:	43                   	inc    ebx
     5b4:	68 72 69 73 4f       	push   0x4f736972
     5b9:	53                   	push   ebx
     5ba:	2e                   	cs
     5bb:	68 00 03 00 00       	push   0x300
     5c0:	73 79                	jae    63b <sysEnter_Vector-0x12f9c5>
     5c2:	73 63                	jae    627 <sysEnter_Vector-0x12f9d9>
     5c4:	61                   	popa   
     5c5:	6c                   	ins    BYTE PTR es:[edi],dx
     5c6:	6c                   	ins    BYTE PTR es:[edi],dx
     5c7:	73 2e                	jae    5f7 <sysEnter_Vector-0x12fa09>
     5c9:	68 00 04 00 00       	push   0x400
     5ce:	00 00                	add    BYTE PTR [eax],al
     5d0:	05 02 08 06 00       	add    eax,0x60802
     5d5:	9f                   	lahf   
     5d6:	03 09                	add    ecx,DWORD PTR [ecx]
     5d8:	01 08                	add    DWORD PTR [eax],ecx
     5da:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     5e0:	39 13                	cmp    DWORD PTR [ebx],edx
     5e2:	00 02                	add    BYTE PTR [edx],al
     5e4:	04 02                	add    al,0x2
     5e6:	7e 00                	jle    5e8 <sysEnter_Vector-0x12fa18>
     5e8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     5eb:	06                   	push   es
     5ec:	4a                   	dec    edx
     5ed:	06                   	push   es
     5ee:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     5ef:	59                   	pop    ecx
     5f0:	5b                   	pop    ebx
     5f1:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5f4:	31 08                	xor    DWORD PTR [eax],ecx
     5f6:	21 76 bb             	and    DWORD PTR [esi-0x45],esi
     5f9:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     5ff:	14 08                	adc    al,0x8
     601:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     608:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     60b:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     60e:	00 02                	add    BYTE PTR [edx],al
     610:	04 01                	add    al,0x1
     612:	06                   	push   es
     613:	4a                   	dec    edx
     614:	06                   	push   es
     615:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     618:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     61d:	08 f3                	or     bl,dh
     61f:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     625:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     628:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     62b:	00 02                	add    BYTE PTR [edx],al
     62d:	04 01                	add    al,0x1
     62f:	06                   	push   es
     630:	4a                   	dec    edx
     631:	06                   	push   es
     632:	03 0b                	add    ecx,DWORD PTR [ebx]
     634:	9e                   	sahf   
     635:	5b                   	pop    ebx
     636:	08 13                	or     BYTE PTR [ebx],dl
     638:	08 5a 5b             	or     BYTE PTR [edx+0x5b],bl
     63b:	f3 08 13             	repz or BYTE PTR [ebx],dl
     63e:	02 02                	add    al,BYTE PTR [edx]
     640:	00 01                	add    BYTE PTR [ecx],al
     642:	01 c4                	add    esp,eax
     644:	01 00                	add    DWORD PTR [eax],eax
     646:	00 02                	add    BYTE PTR [edx],al
     648:	00 e3                	add    bl,ah
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 01                	add    BYTE PTR [ecx],al
     64e:	01 fb                	add    ebx,edi
     650:	0e                   	push   cs
     651:	0d 00 01 01 01       	or     eax,0x1010100
     656:	01 00                	add    DWORD PTR [eax],eax
     658:	00 00                	add    BYTE PTR [eax],al
     65a:	01 00                	add    DWORD PTR [eax],eax
     65c:	00 01                	add    BYTE PTR [ecx],al
     65e:	73 72                	jae    6d2 <sysEnter_Vector-0x12f92e>
     660:	63 00                	arpl   WORD PTR [eax],ax
     662:	2f                   	das    
     663:	68 6f 6d 65 2f       	push   0x2f656d6f
     668:	79 6f                	jns    6d9 <sysEnter_Vector-0x12f927>
     66a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     671:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     674:	73 73                	jae    6e9 <sysEnter_Vector-0x12f917>
     676:	2f                   	das    
     677:	6c                   	ins    BYTE PTR es:[edi],dx
     678:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     67f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     685:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     68b:	78 2d                	js     6ba <sysEnter_Vector-0x12f946>
     68d:	67 6e                	outs   dx,BYTE PTR ds:[si]
     68f:	75 2f                	jne    6c0 <sysEnter_Vector-0x12f940>
     691:	35 2e 33 2e 30       	xor    eax,0x302e332e
     696:	2f                   	das    
     697:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     69e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6a1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6a5:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     6a9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6ad:	65                   	gs
     6ae:	2f                   	das    
     6af:	2e                   	cs
     6b0:	2e                   	cs
     6b1:	2f                   	das    
     6b2:	2e                   	cs
     6b3:	2e                   	cs
     6b4:	2f                   	das    
     6b5:	2e                   	cs
     6b6:	2e                   	cs
     6b7:	2f                   	das    
     6b8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     6bc:	6a 2f                	push   0x2f
     6be:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     6c1:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     6c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6c9:	65                   	gs
     6ca:	6c                   	ins    BYTE PTR es:[edi],dx
     6cb:	2f                   	das    
     6cc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6d3:	00 00                	add    BYTE PTR [eax],al
     6d5:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     6dc:	01 00                	add    DWORD PTR [eax],eax
     6de:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     6e1:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     6e8:	63 
     6e9:	2e                   	cs
     6ea:	68 00 02 00 00       	push   0x200
     6ef:	73 74                	jae    765 <sysEnter_Vector-0x12f89b>
     6f1:	64                   	fs
     6f2:	64                   	fs
     6f3:	65                   	gs
     6f4:	66                   	data16
     6f5:	2e                   	cs
     6f6:	68 00 02 00 00       	push   0x200
     6fb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     702:	03 00                	add    eax,DWORD PTR [eax]
     704:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     707:	6c                   	ins    BYTE PTR es:[edi],dx
     708:	6c                   	ins    BYTE PTR es:[edi],dx
     709:	6f                   	outs   dx,DWORD PTR ds:[esi]
     70a:	63 2e                	arpl   WORD PTR [esi],bp
     70c:	68 00 03 00 00       	push   0x300
     711:	6c                   	ins    BYTE PTR es:[edi],dx
     712:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     719:	4f                   	dec    edi
     71a:	53                   	push   ebx
     71b:	2e                   	cs
     71c:	68 00 03 00 00       	push   0x300
     721:	73 79                	jae    79c <sysEnter_Vector-0x12f864>
     723:	73 63                	jae    788 <sysEnter_Vector-0x12f878>
     725:	61                   	popa   
     726:	6c                   	ins    BYTE PTR es:[edi],dx
     727:	6c                   	ins    BYTE PTR es:[edi],dx
     728:	73 2e                	jae    758 <sysEnter_Vector-0x12f8a8>
     72a:	68 00 04 00 00       	push   0x400
     72f:	00 00                	add    BYTE PTR [eax],al
     731:	05 02 e8 08 00       	add    eax,0x8e802
     736:	9f                   	lahf   
     737:	03 0e                	add    ecx,DWORD PTR [esi]
     739:	01 08                	add    DWORD PTR [eax],ecx
     73b:	13 08                	adc    ecx,DWORD PTR [eax]
     73d:	9f                   	lahf   
     73e:	5b                   	pop    ebx
     73f:	08 14 08             	or     BYTE PTR [eax+ecx*1],dl
     742:	59                   	pop    ecx
     743:	5b                   	pop    ebx
     744:	08 21                	or     BYTE PTR [ecx],ah
     746:	2f                   	das    
     747:	08 d5                	or     ch,dl
     749:	bc 08 3d 69 08       	mov    esp,0x8693d08
     74e:	2f                   	das    
     74f:	75 08                	jne    759 <sysEnter_Vector-0x12f8a7>
     751:	83 67 75 bc          	and    DWORD PTR [edi+0x75],0xffffffbc
     755:	08 68 02             	or     BYTE PTR [eax+0x2],ch
     758:	26 13 3d 77 08 13 08 	adc    edi,DWORD PTR es:0x8130877
     75f:	2f                   	das    
     760:	69 e5 08 d7 77 f3    	imul   esp,ebp,0xf377d708
     766:	08 3d 31 e5 08 d7    	or     BYTE PTR ds:0xd708e531,bh
     76c:	77 f3                	ja     761 <sysEnter_Vector-0x12f89f>
     76e:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     774:	75 5b                	jne    7d1 <sysEnter_Vector-0x12f82f>
     776:	f3 08 3d 30 08 13 08 	repz or BYTE PTR ds:0x8130830,bh
     77d:	67 5b                	addr16 pop ebx
     77f:	f3 08 13             	repz or BYTE PTR [ebx],dl
     782:	31 08                	xor    DWORD PTR [eax],ecx
     784:	21 68 77             	and    DWORD PTR [eax+0x77],ebp
     787:	bb 08 91 bb 08       	mov    ebx,0x8bb9108
     78c:	91                   	xchg   ecx,eax
     78d:	bb 08 91 bb 08       	mov    ebx,0x8bb9108
     792:	95                   	xchg   ebp,eax
     793:	08 a0 08 84 08 84    	or     BYTE PTR [eax-0x7bf77bf8],ah
     799:	a0 08 67 08 4c       	mov    al,ds:0x4c086708
     79e:	08 13                	or     BYTE PTR [ebx],dl
     7a0:	be 08 67 08 9f       	mov    esi,0x9f086708
     7a5:	5a                   	pop    edx
     7a6:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     7a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     7aa:	08 9f 08 67 08 9f    	or     BYTE PTR [edi-0x60f798f8],bl
     7b0:	68 08 67 75 30       	push   0x30756708
     7b5:	03 73 08             	add    esi,DWORD PTR [ebx+0x8]
     7b8:	3c 03                	cmp    al,0x3
     7ba:	10 9e a0 08 bb 08    	adc    BYTE PTR [esi+0x8bb08a0],bl
     7c0:	9f                   	lahf   
     7c1:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     7c4:	9f                   	lahf   
     7c5:	68 08 67 79 3d       	push   0x3d796708
     7ca:	5b                   	pop    ebx
     7cb:	08 13                	or     BYTE PTR [ebx],dl
     7cd:	08 2f                	or     BYTE PTR [edi],ch
     7cf:	5b                   	pop    ebx
     7d0:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     7d2:	31 08                	xor    DWORD PTR [eax],ecx
     7d4:	22 75 75             	and    dh,BYTE PTR [ebp+0x75]
     7d7:	75 83                	jne    75c <sysEnter_Vector-0x12f8a4>
     7d9:	83 08 13             	or     DWORD PTR [eax],0x13
     7dc:	76 08                	jbe    7e6 <sysEnter_Vector-0x12f81a>
     7de:	30 5a 08             	xor    BYTE PTR [edx+0x8],bl
     7e1:	ca 08 91             	retf   0x9108
     7e4:	08 d7                	or     bh,dl
     7e6:	08 91 08 f3 08 d7    	or     BYTE PTR [ecx-0x28f70cf8],dl
     7ec:	c9                   	leave  
     7ed:	08 83 83 67 67 32    	or     BYTE PTR [ebx+0x32676783],al
     7f3:	67 67 08 21          	addr32 or BYTE PTR [bx+di],ah
     7f7:	03 6b 08             	add    ebp,DWORD PTR [ebx+0x8]
     7fa:	66 03 1a             	add    bx,WORD PTR [edx]
     7fd:	02 22                	add    ah,BYTE PTR [edx]
     7ff:	01 d7                	add    edi,edx
     801:	3d 5b f3 08 3d       	cmp    eax,0x3d08f35b
     806:	02 02                	add    al,BYTE PTR [edx]
     808:	00 01                	add    BYTE PTR [ecx],al
     80a:	01 33                	add    DWORD PTR [ebx],esi
     80c:	01 00                	add    DWORD PTR [eax],eax
     80e:	00 02                	add    BYTE PTR [edx],al
     810:	00 de                	add    dh,bl
     812:	00 00                	add    BYTE PTR [eax],al
     814:	00 01                	add    BYTE PTR [ecx],al
     816:	01 fb                	add    ebx,edi
     818:	0e                   	push   cs
     819:	0d 00 01 01 01       	or     eax,0x1010100
     81e:	01 00                	add    DWORD PTR [eax],eax
     820:	00 00                	add    BYTE PTR [eax],al
     822:	01 00                	add    DWORD PTR [eax],eax
     824:	00 01                	add    BYTE PTR [ecx],al
     826:	73 72                	jae    89a <sysEnter_Vector-0x12f766>
     828:	63 2f                	arpl   WORD PTR [edi],bp
     82a:	69 6e 70 75 74 00 2f 	imul   ebp,DWORD PTR [esi+0x70],0x2f007475
     831:	68 6f 6d 65 2f       	push   0x2f656d6f
     836:	79 6f                	jns    8a7 <sysEnter_Vector-0x12f759>
     838:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     83f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     842:	73 73                	jae    8b7 <sysEnter_Vector-0x12f749>
     844:	2f                   	das    
     845:	6c                   	ins    BYTE PTR es:[edi],dx
     846:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     84d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     853:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     859:	78 2d                	js     888 <sysEnter_Vector-0x12f778>
     85b:	67 6e                	outs   dx,BYTE PTR ds:[si]
     85d:	75 2f                	jne    88e <sysEnter_Vector-0x12f772>
     85f:	35 2e 33 2e 30       	xor    eax,0x302e332e
     864:	2f                   	das    
     865:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     86c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     86f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     873:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     877:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     87b:	65                   	gs
     87c:	2f                   	das    
     87d:	2e                   	cs
     87e:	2e                   	cs
     87f:	2f                   	das    
     880:	2e                   	cs
     881:	2e                   	cs
     882:	2f                   	das    
     883:	2e                   	cs
     884:	2e                   	cs
     885:	2f                   	das    
     886:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     88a:	6a 2f                	push   0x2f
     88c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     88f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     896:	6e                   	outs   dx,BYTE PTR ds:[esi]
     897:	65                   	gs
     898:	6c                   	ins    BYTE PTR es:[edi],dx
     899:	2f                   	das    
     89a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     8a1:	00 00                	add    BYTE PTR [eax],al
     8a3:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     8aa:	00 01                	add    BYTE PTR [ecx],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	73 74                	jae    924 <sysEnter_Vector-0x12f6dc>
     8b0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     8b7:	63 
     8b8:	2e                   	cs
     8b9:	68 00 02 00 00       	push   0x200
     8be:	6d                   	ins    DWORD PTR es:[edi],dx
     8bf:	61                   	popa   
     8c0:	6c                   	ins    BYTE PTR es:[edi],dx
     8c1:	6c                   	ins    BYTE PTR es:[edi],dx
     8c2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8c3:	63 2e                	arpl   WORD PTR [esi],bp
     8c5:	68 00 03 00 00       	push   0x300
     8ca:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     8d1:	03 00                	add    eax,DWORD PTR [eax]
     8d3:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     8d7:	43                   	inc    ebx
     8d8:	68 72 69 73 4f       	push   0x4f736972
     8dd:	53                   	push   ebx
     8de:	2e                   	cs
     8df:	68 00 03 00 00       	push   0x300
     8e4:	73 79                	jae    95f <sysEnter_Vector-0x12f6a1>
     8e6:	73 63                	jae    94b <sysEnter_Vector-0x12f6b5>
     8e8:	61                   	popa   
     8e9:	6c                   	ins    BYTE PTR es:[edi],dx
     8ea:	6c                   	ins    BYTE PTR es:[edi],dx
     8eb:	73 2e                	jae    91b <sysEnter_Vector-0x12f6e5>
     8ed:	68 00 04 00 00       	push   0x400
     8f2:	00 00                	add    BYTE PTR [eax],al
     8f4:	05 02 dc 10 00       	add    eax,0x10dc02
     8f9:	9f                   	lahf   
     8fa:	03 0f                	add    ecx,DWORD PTR [edi]
     8fc:	01 d7                	add    edi,edx
     8fe:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     904:	75 4b                	jne    951 <sysEnter_Vector-0x12f6af>
     906:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     90c:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     911:	6a 08                	push   0x8
     913:	14 77                	adc    al,0x77
     915:	ad                   	lods   eax,DWORD PTR ds:[esi]
     916:	68 00 02 04 01       	push   0x1040200
     91b:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     91e:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     924:	06                   	push   es
     925:	66 06                	pushw  es
     927:	68 ad 68 68 76       	push   0x766868ad
     92c:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     92f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     932:	06                   	push   es
     933:	ac                   	lods   al,BYTE PTR ds:[esi]
     934:	06                   	push   es
     935:	68 5b 00 02 04       	push   0x402005b
     93a:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     940:	01 01                	add    DWORD PTR [ecx],eax
     942:	af                   	scas   eax,DWORD PTR es:[edi]
     943:	02 00                	add    al,BYTE PTR [eax]
     945:	00 02                	add    BYTE PTR [edx],al
     947:	00 f5                	add    ch,dh
     949:	00 00                	add    BYTE PTR [eax],al
     94b:	00 01                	add    BYTE PTR [ecx],al
     94d:	01 fb                	add    ebx,edi
     94f:	0e                   	push   cs
     950:	0d 00 01 01 01       	or     eax,0x1010100
     955:	01 00                	add    DWORD PTR [eax],eax
     957:	00 00                	add    BYTE PTR [eax],al
     959:	01 00                	add    DWORD PTR [eax],eax
     95b:	00 01                	add    BYTE PTR [ecx],al
     95d:	73 72                	jae    9d1 <sysEnter_Vector-0x12f62f>
     95f:	63 00                	arpl   WORD PTR [eax],ax
     961:	2f                   	das    
     962:	68 6f 6d 65 2f       	push   0x2f656d6f
     967:	79 6f                	jns    9d8 <sysEnter_Vector-0x12f628>
     969:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     970:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     973:	73 73                	jae    9e8 <sysEnter_Vector-0x12f618>
     975:	2f                   	das    
     976:	6c                   	ins    BYTE PTR es:[edi],dx
     977:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     97e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     984:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     98a:	78 2d                	js     9b9 <sysEnter_Vector-0x12f647>
     98c:	67 6e                	outs   dx,BYTE PTR ds:[si]
     98e:	75 2f                	jne    9bf <sysEnter_Vector-0x12f641>
     990:	35 2e 33 2e 30       	xor    eax,0x302e332e
     995:	2f                   	das    
     996:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     99d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9a0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9a4:	65                   	gs
     9a5:	2f                   	das    
     9a6:	2e                   	cs
     9a7:	2e                   	cs
     9a8:	2f                   	das    
     9a9:	2e                   	cs
     9aa:	2e                   	cs
     9ab:	2f                   	das    
     9ac:	2e                   	cs
     9ad:	2e                   	cs
     9ae:	2f                   	das    
     9af:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     9b3:	6a 2f                	push   0x2f
     9b5:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     9b8:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     9bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9c0:	65                   	gs
     9c1:	6c                   	ins    BYTE PTR es:[edi],dx
     9c2:	2f                   	das    
     9c3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9ca:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9cd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9d1:	65 00 00             	add    BYTE PTR gs:[eax],al
     9d4:	6c                   	ins    BYTE PTR es:[edi],dx
     9d5:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     9dc:	4f                   	dec    edi
     9dd:	53                   	push   ebx
     9de:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     9e1:	01 00                	add    DWORD PTR [eax],eax
     9e3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     9e6:	64                   	fs
     9e7:	61                   	popa   
     9e8:	72 67                	jb     a51 <sysEnter_Vector-0x12f5af>
     9ea:	2e                   	cs
     9eb:	68 00 02 00 00       	push   0x200
     9f0:	73 74                	jae    a66 <sysEnter_Vector-0x12f59a>
     9f2:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     9f9:	63 
     9fa:	2e                   	cs
     9fb:	68 00 02 00 00       	push   0x200
     a00:	73 74                	jae    a76 <sysEnter_Vector-0x12f58a>
     a02:	64                   	fs
     a03:	64                   	fs
     a04:	65                   	gs
     a05:	66                   	data16
     a06:	2e                   	cs
     a07:	68 00 02 00 00       	push   0x200
     a0c:	73 79                	jae    a87 <sysEnter_Vector-0x12f579>
     a0e:	73 63                	jae    a73 <sysEnter_Vector-0x12f58d>
     a10:	61                   	popa   
     a11:	6c                   	ins    BYTE PTR es:[edi],dx
     a12:	6c                   	ins    BYTE PTR es:[edi],dx
     a13:	73 2e                	jae    a43 <sysEnter_Vector-0x12f5bd>
     a15:	68 00 03 00 00       	push   0x300
     a1a:	6d                   	ins    DWORD PTR es:[edi],dx
     a1b:	61                   	popa   
     a1c:	6c                   	ins    BYTE PTR es:[edi],dx
     a1d:	6c                   	ins    BYTE PTR es:[edi],dx
     a1e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a1f:	63 2e                	arpl   WORD PTR [esi],bp
     a21:	68 00 04 00 00       	push   0x400
     a26:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     a2d:	04 00                	add    al,0x0
     a2f:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     a33:	43                   	inc    ebx
     a34:	68 72 69 73 4f       	push   0x4f736972
     a39:	53                   	push   ebx
     a3a:	2e                   	cs
     a3b:	68 00 04 00 00       	push   0x400
     a40:	00 00                	add    BYTE PTR [eax],al
     a42:	05 02 48 12 00       	add    eax,0x124802
     a47:	9f                   	lahf   
     a48:	03 11                	add    edx,DWORD PTR [ecx]
     a4a:	01 08                	add    DWORD PTR [eax],ecx
     a4c:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     a4f:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     a55:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     a5b:	75 08                	jne    a65 <sysEnter_Vector-0x12f59b>
     a5d:	9f                   	lahf   
     a5e:	3d 77 08 21 75       	cmp    eax,0x75210877
     a63:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     a69:	75 08                	jne    a73 <sysEnter_Vector-0x12f58d>
     a6b:	d7                   	xlat   BYTE PTR ds:[ebx]
     a6c:	3d 77 08 21 08       	cmp    eax,0x8210877
     a71:	67 d8 59 bd          	fcomp  DWORD PTR [bx+di-0x43]
     a75:	c9                   	leave  
     a76:	c9                   	leave  
     a77:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     a7a:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     a80:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     a83:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     a86:	77 08                	ja     a90 <sysEnter_Vector-0x12f570>
     a88:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     a8b:	c9                   	leave  
     a8c:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     a92:	68 08 c9 08 83       	push   0x8308c908
     a97:	5b                   	pop    ebx
     a98:	08 22                	or     BYTE PTR [edx],ah
     a9a:	68 08 c9 08 83       	push   0x8308c908
     a9f:	5b                   	pop    ebx
     aa0:	f4                   	hlt    
     aa1:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     aa5:	31 f4                	xor    esp,esi
     aa7:	68 08 91 5a 31       	push   0x315a9108
     aac:	f4                   	hlt    
     aad:	68 08 91 5a 31       	push   0x315a9108
     ab2:	08 21                	or     BYTE PTR [ecx],ah
     ab4:	02 57 13             	add    dl,BYTE PTR [edi+0x13]
     ab7:	77 08                	ja     ac1 <sysEnter_Vector-0x12f53f>
     ab9:	21 02                	and    DWORD PTR [edx],eax
     abb:	57                   	push   edi
     abc:	14 77                	adc    al,0x77
     abe:	c9                   	leave  
     abf:	c9                   	leave  
     ac0:	3f                   	aas    
     ac1:	c9                   	leave  
     ac2:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     ac8:	3d 31 f3 75 08       	cmp    eax,0x875f331
     acd:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     ad2:	08 21                	or     BYTE PTR [ecx],ah
     ad4:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     adb:	67 02 22             	add    ah,BYTE PTR [bp+si]
     ade:	14 08                	adc    al,0x8
     ae0:	ae                   	scas   al,BYTE PTR es:[edi]
     ae1:	4c                   	dec    esp
     ae2:	ca 08 4b             	retf   0x4b08
     ae5:	91                   	xchg   ecx,eax
     ae6:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     aec:	67 02 2f             	add    ch,BYTE PTR [bx]
     aef:	14 00                	adc    al,0x0
     af1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     af4:	02 31                	add    dh,BYTE PTR [ecx]
     af6:	13 00                	adc    eax,DWORD PTR [eax]
     af8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     afb:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     b01:	bb 00 02 04 02       	mov    ebx,0x2040200
     b06:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     b09:	00 02                	add    BYTE PTR [edx],al
     b0b:	04 01                	add    al,0x1
     b0d:	06                   	push   es
     b0e:	4a                   	dec    edx
     b0f:	06                   	push   es
     b10:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     b13:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     b19:	f3 75 08             	repz jne b24 <sysEnter_Vector-0x12f4dc>
     b1c:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     b21:	c9                   	leave  
     b22:	c9                   	leave  
     b23:	32 c9                	xor    cl,cl
     b25:	f3 3f                	repz aas 
     b27:	c9                   	leave  
     b28:	08 13                	or     BYTE PTR [ebx],dl
     b2a:	31 f5                	xor    ebp,esi
     b2c:	75 76                	jne    ba4 <sysEnter_Vector-0x12f45c>
     b2e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b2f:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     b34:	67 75 91             	addr16 jne ac8 <sysEnter_Vector-0x12f538>
     b37:	5a                   	pop    edx
     b38:	75 67                	jne    ba1 <sysEnter_Vector-0x12f45f>
     b3a:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     b3d:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     b43:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     b48:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     b4c:	3c 44                	cmp    al,0x44
     b4e:	00 02                	add    BYTE PTR [edx],al
     b50:	04 02                	add    al,0x2
     b52:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     b55:	00 02                	add    BYTE PTR [edx],al
     b57:	04 01                	add    al,0x1
     b59:	06                   	push   es
     b5a:	4a                   	dec    edx
     b5b:	00 02                	add    BYTE PTR [edx],al
     b5d:	04 03                	add    al,0x3
     b5f:	82                   	(bad)  
     b60:	06                   	push   es
     b61:	03 23                	add    esp,DWORD PTR [ebx]
     b63:	d6                   	(bad)  
     b64:	00 02                	add    BYTE PTR [edx],al
     b66:	04 01                	add    al,0x1
     b68:	06                   	push   es
     b69:	66 06                	pushw  es
     b6b:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     b6e:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     b73:	31 08                	xor    DWORD PTR [eax],ecx
     b75:	5b                   	pop    ebx
     b76:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     b7c:	08 23                	or     BYTE PTR [ebx],ah
     b7e:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     b84:	04 01                	add    al,0x1
     b86:	06                   	push   es
     b87:	66 06                	pushw  es
     b89:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     b8c:	f3 c9                	repz leave 
     b8e:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     b92:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     b95:	06                   	push   es
     b96:	66 06                	pushw  es
     b98:	9f                   	lahf   
     b99:	4c                   	dec    esp
     b9a:	00 02                	add    BYTE PTR [edx],al
     b9c:	04 01                	add    al,0x1
     b9e:	06                   	push   es
     b9f:	66 06                	pushw  es
     ba1:	d8 02                	fadd   DWORD PTR [edx]
     ba3:	27                   	daa    
     ba4:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     baa:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     bb0:	06                   	push   es
     bb1:	9e                   	sahf   
     bb2:	06                   	push   es
     bb3:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     bb6:	f3 c9                	repz leave 
     bb8:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     bbb:	79 02                	jns    bbf <sysEnter_Vector-0x12f441>
     bbd:	34 01                	xor    al,0x1
     bbf:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     bc2:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     bc5:	02 2f                	add    ch,BYTE PTR [edi]
     bc7:	14 02                	adc    al,0x2
     bc9:	31 13                	xor    DWORD PTR [ebx],edx
     bcb:	00 02                	add    BYTE PTR [edx],al
     bcd:	04 02                	add    al,0x2
     bcf:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     bd6:	00 02                	add    BYTE PTR [edx],al
     bd8:	04 02                	add    al,0x2
     bda:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     bdd:	00 02                	add    BYTE PTR [edx],al
     bdf:	04 01                	add    al,0x1
     be1:	06                   	push   es
     be2:	4a                   	dec    edx
     be3:	06                   	push   es
     be4:	03 1b                	add    ebx,DWORD PTR [ebx]
     be6:	d6                   	(bad)  
     be7:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     bec:	31 c9                	xor    ecx,ecx
     bee:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
     bf4:	01 11                	add    DWORD PTR [ecx],edx
     bf6:	01 00                	add    DWORD PTR [eax],eax
     bf8:	00 02                	add    BYTE PTR [edx],al
     bfa:	00 f2                	add    dl,dh
     bfc:	00 00                	add    BYTE PTR [eax],al
     bfe:	00 01                	add    BYTE PTR [ecx],al
     c00:	01 fb                	add    ebx,edi
     c02:	0e                   	push   cs
     c03:	0d 00 01 01 01       	or     eax,0x1010100
     c08:	01 00                	add    DWORD PTR [eax],eax
     c0a:	00 00                	add    BYTE PTR [eax],al
     c0c:	01 00                	add    DWORD PTR [eax],eax
     c0e:	00 01                	add    BYTE PTR [ecx],al
     c10:	73 72                	jae    c84 <sysEnter_Vector-0x12f37c>
     c12:	63 00                	arpl   WORD PTR [eax],ax
     c14:	2f                   	das    
     c15:	68 6f 6d 65 2f       	push   0x2f656d6f
     c1a:	79 6f                	jns    c8b <sysEnter_Vector-0x12f375>
     c1c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     c23:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     c26:	73 73                	jae    c9b <sysEnter_Vector-0x12f365>
     c28:	2f                   	das    
     c29:	6c                   	ins    BYTE PTR es:[edi],dx
     c2a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     c31:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     c37:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     c3d:	78 2d                	js     c6c <sysEnter_Vector-0x12f394>
     c3f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c41:	75 2f                	jne    c72 <sysEnter_Vector-0x12f38e>
     c43:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c48:	2f                   	das    
     c49:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c50:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c53:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c57:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     c5b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c5f:	65                   	gs
     c60:	2f                   	das    
     c61:	2e                   	cs
     c62:	2e                   	cs
     c63:	2f                   	das    
     c64:	2e                   	cs
     c65:	2e                   	cs
     c66:	2f                   	das    
     c67:	2e                   	cs
     c68:	2e                   	cs
     c69:	2f                   	das    
     c6a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     c6e:	6a 2f                	push   0x2f
     c70:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     c73:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     c7a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c7b:	65                   	gs
     c7c:	6c                   	ins    BYTE PTR es:[edi],dx
     c7d:	2f                   	das    
     c7e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c85:	00 00                	add    BYTE PTR [eax],al
     c87:	6c                   	ins    BYTE PTR es:[edi],dx
     c88:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     c8f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c92:	01 00                	add    DWORD PTR [eax],eax
     c94:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c97:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c9e:	63 
     c9f:	2e                   	cs
     ca0:	68 00 02 00 00       	push   0x200
     ca5:	73 74                	jae    d1b <sysEnter_Vector-0x12f2e5>
     ca7:	64                   	fs
     ca8:	64                   	fs
     ca9:	65                   	gs
     caa:	66                   	data16
     cab:	2e                   	cs
     cac:	68 00 02 00 00       	push   0x200
     cb1:	74 79                	je     d2c <sysEnter_Vector-0x12f2d4>
     cb3:	70 65                	jo     d1a <sysEnter_Vector-0x12f2e6>
     cb5:	73 2e                	jae    ce5 <sysEnter_Vector-0x12f31b>
     cb7:	68 00 03 00 00       	push   0x300
     cbc:	73 79                	jae    d37 <sysEnter_Vector-0x12f2c9>
     cbe:	73 63                	jae    d23 <sysEnter_Vector-0x12f2dd>
     cc0:	61                   	popa   
     cc1:	6c                   	ins    BYTE PTR es:[edi],dx
     cc2:	6c                   	ins    BYTE PTR es:[edi],dx
     cc3:	73 2e                	jae    cf3 <sysEnter_Vector-0x12f30d>
     cc5:	68 00 04 00 00       	push   0x400
     cca:	6d                   	ins    DWORD PTR es:[edi],dx
     ccb:	61                   	popa   
     ccc:	6c                   	ins    BYTE PTR es:[edi],dx
     ccd:	6c                   	ins    BYTE PTR es:[edi],dx
     cce:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ccf:	63 2e                	arpl   WORD PTR [esi],bp
     cd1:	68 00 03 00 00       	push   0x300
     cd6:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     cdd:	03 00                	add    eax,DWORD PTR [eax]
     cdf:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     ce3:	43                   	inc    ebx
     ce4:	68 72 69 73 4f       	push   0x4f736972
     ce9:	53                   	push   ebx
     cea:	2e                   	cs
     ceb:	68 00 03 00 00       	push   0x300
     cf0:	00 00                	add    BYTE PTR [eax],al
     cf2:	05 02 f0 1e 00       	add    eax,0x1ef002
     cf7:	9f                   	lahf   
     cf8:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     cfe:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     d03:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     d06:	05 00 01 01 bc       	add    eax,0xbc010100
     d0b:	01 00                	add    DWORD PTR [eax],eax
     d0d:	00 02                	add    BYTE PTR [edx],al
     d0f:	00 e5                	add    ch,ah
     d11:	00 00                	add    BYTE PTR [eax],al
     d13:	00 01                	add    BYTE PTR [ecx],al
     d15:	01 fb                	add    ebx,edi
     d17:	0e                   	push   cs
     d18:	0d 00 01 01 01       	or     eax,0x1010100
     d1d:	01 00                	add    DWORD PTR [eax],eax
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	01 00                	add    DWORD PTR [eax],eax
     d23:	00 01                	add    BYTE PTR [ecx],al
     d25:	73 72                	jae    d99 <sysEnter_Vector-0x12f267>
     d27:	63 00                	arpl   WORD PTR [eax],ax
     d29:	2f                   	das    
     d2a:	68 6f 6d 65 2f       	push   0x2f656d6f
     d2f:	79 6f                	jns    da0 <sysEnter_Vector-0x12f260>
     d31:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d38:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d3b:	73 73                	jae    db0 <sysEnter_Vector-0x12f250>
     d3d:	2f                   	das    
     d3e:	6c                   	ins    BYTE PTR es:[edi],dx
     d3f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d46:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d4c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d52:	78 2d                	js     d81 <sysEnter_Vector-0x12f27f>
     d54:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d56:	75 2f                	jne    d87 <sysEnter_Vector-0x12f279>
     d58:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d5d:	2f                   	das    
     d5e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d65:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d68:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d6c:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     d70:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d74:	65                   	gs
     d75:	2f                   	das    
     d76:	2e                   	cs
     d77:	2e                   	cs
     d78:	2f                   	das    
     d79:	2e                   	cs
     d7a:	2e                   	cs
     d7b:	2f                   	das    
     d7c:	2e                   	cs
     d7d:	2e                   	cs
     d7e:	2f                   	das    
     d7f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d83:	6a 2f                	push   0x2f
     d85:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d88:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d90:	65                   	gs
     d91:	6c                   	ins    BYTE PTR es:[edi],dx
     d92:	2f                   	das    
     d93:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d9a:	00 00                	add    BYTE PTR [eax],al
     d9c:	6d                   	ins    DWORD PTR es:[edi],dx
     d9d:	61                   	popa   
     d9e:	6c                   	ins    BYTE PTR es:[edi],dx
     d9f:	6c                   	ins    BYTE PTR es:[edi],dx
     da0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     da1:	63 2e                	arpl   WORD PTR [esi],bp
     da3:	63 00                	arpl   WORD PTR [eax],ax
     da5:	01 00                	add    DWORD PTR [eax],eax
     da7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     daa:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     db1:	63 
     db2:	2e                   	cs
     db3:	68 00 02 00 00       	push   0x200
     db8:	73 74                	jae    e2e <sysEnter_Vector-0x12f1d2>
     dba:	64                   	fs
     dbb:	64                   	fs
     dbc:	65                   	gs
     dbd:	66                   	data16
     dbe:	2e                   	cs
     dbf:	68 00 02 00 00       	push   0x200
     dc4:	6d                   	ins    DWORD PTR es:[edi],dx
     dc5:	61                   	popa   
     dc6:	6c                   	ins    BYTE PTR es:[edi],dx
     dc7:	6c                   	ins    BYTE PTR es:[edi],dx
     dc8:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dc9:	63 2e                	arpl   WORD PTR [esi],bp
     dcb:	68 00 03 00 00       	push   0x300
     dd0:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     dd7:	03 00                	add    eax,DWORD PTR [eax]
     dd9:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     ddd:	43                   	inc    ebx
     dde:	68 72 69 73 4f       	push   0x4f736972
     de3:	53                   	push   ebx
     de4:	2e                   	cs
     de5:	68 00 03 00 00       	push   0x300
     dea:	73 79                	jae    e65 <sysEnter_Vector-0x12f19b>
     dec:	73 63                	jae    e51 <sysEnter_Vector-0x12f1af>
     dee:	61                   	popa   
     def:	6c                   	ins    BYTE PTR es:[edi],dx
     df0:	6c                   	ins    BYTE PTR es:[edi],dx
     df1:	73 2e                	jae    e21 <sysEnter_Vector-0x12f1df>
     df3:	68 00 04 00 00       	push   0x400
     df8:	00 00                	add    BYTE PTR [eax],al
     dfa:	05 02 64 1f 00       	add    eax,0x1f6402
     dff:	9f                   	lahf   
     e00:	03 0e                	add    ecx,DWORD PTR [esi]
     e02:	01 08                	add    DWORD PTR [eax],ecx
     e04:	21 02                	and    DWORD PTR [edx],eax
     e06:	24 13                	and    al,0x13
     e08:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     e0d:	f5                   	cmc    
     e0e:	92                   	xchg   edx,eax
     e0f:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     e15:	04 01                	add    al,0x1
     e17:	06                   	push   es
     e18:	66 06                	pushw  es
     e1a:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     e1f:	59                   	pop    ecx
     e20:	31 f5                	xor    ebp,esi
     e22:	00 02                	add    BYTE PTR [edx],al
     e24:	04 01                	add    al,0x1
     e26:	06                   	push   es
     e27:	e4 06                	in     al,0x6
     e29:	e7 68                	out    0x68,eax
     e2b:	93                   	xchg   ebx,eax
     e2c:	bf 03 74 90 3f       	mov    edi,0x3f907403
     e31:	43                   	inc    ebx
     e32:	23 31                	and    esi,DWORD PTR [ecx]
     e34:	f3 ad                	rep lods eax,DWORD PTR ds:[esi]
     e36:	67 af                	scas   eax,DWORD PTR es:[di]
     e38:	00 02                	add    BYTE PTR [edx],al
     e3a:	04 01                	add    al,0x1
     e3c:	06                   	push   es
     e3d:	d6                   	(bad)  
     e3e:	06                   	push   es
     e3f:	ad                   	lods   eax,DWORD PTR ds:[esi]
     e40:	59                   	pop    ecx
     e41:	9f                   	lahf   
     e42:	93                   	xchg   ebx,eax
     e43:	00 02                	add    BYTE PTR [edx],al
     e45:	04 01                	add    al,0x1
     e47:	06                   	push   es
     e48:	9e                   	sahf   
     e49:	06                   	push   es
     e4a:	bc 59 31 08 13       	mov    esp,0x13083159
     e4f:	67 30 ca             	addr16 xor dl,cl
     e52:	00 02                	add    BYTE PTR [edx],al
     e54:	04 01                	add    al,0x1
     e56:	08 3e                	or     BYTE PTR [esi],bh
     e58:	30 03                	xor    BYTE PTR [ebx],al
     e5a:	78 90                	js     dec <sysEnter_Vector-0x12f214>
     e5c:	00 02                	add    BYTE PTR [edx],al
     e5e:	04 01                	add    al,0x1
     e60:	06                   	push   es
     e61:	c8 06 03 0a          	enter  0x306,0xa
     e65:	ac                   	lods   al,BYTE PTR ds:[esi]
     e66:	69 08 25 75 6a 67    	imul   ecx,DWORD PTR [eax],0x676a7525
     e6c:	75 08                	jne    e76 <sysEnter_Vector-0x12f18a>
     e6e:	92                   	xchg   edx,eax
     e6f:	bc 08 13 68 75       	mov    esp,0x75681308
     e74:	08 13                	or     BYTE PTR [ebx],dl
     e76:	f6                   	(bad)  
     e77:	08 13                	or     BYTE PTR [ebx],dl
     e79:	08 91 a0 bb 08 67    	or     BYTE PTR [ecx+0x6708bba0],dl
     e7f:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     e82:	3d 08 e5 f3 02       	cmp    eax,0x2f3e508
     e87:	26 13 bc ad ad 08 e7 	adc    edi,DWORD PTR es:[ebp+ebp*4+0x8e708ad]
     e8e:	08 
     e8f:	e5 ad                	in     eax,0xad
     e91:	91                   	xchg   ecx,eax
     e92:	91                   	xchg   ecx,eax
     e93:	75 08                	jne    e9d <sysEnter_Vector-0x12f163>
     e95:	e5 d7                	in     eax,0xd7
     e97:	a0 bb bc 08 75       	mov    al,ds:0x7508bcbb
     e9c:	08 91 91 3d 5b f3    	or     BYTE PTR [ecx-0xca4c26f],dl
     ea2:	d7                   	xlat   BYTE PTR ds:[ebx]
     ea3:	31 08                	xor    DWORD PTR [eax],ecx
     ea5:	22 08                	and    cl,BYTE PTR [eax]
     ea7:	92                   	xchg   edx,eax
     ea8:	67 84 68 92          	test   BYTE PTR [bx+si-0x6e],ch
     eac:	67 77 08             	addr16 ja eb7 <sysEnter_Vector-0x12f149>
     eaf:	13 02                	adc    eax,DWORD PTR [edx]
     eb1:	24 17                	and    al,0x17
     eb3:	08 e5                	or     ch,ah
     eb5:	08 69 d7             	or     BYTE PTR [ecx-0x29],ch
     eb8:	3d 5b f3 08 13       	cmp    eax,0x1308f35b
     ebd:	31 c9                	xor    ecx,ecx
     ebf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     ec0:	3f                   	aas    
     ec1:	08 13                	or     BYTE PTR [ebx],dl
     ec3:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     ec9:	01 f1                	add    ecx,esi
     ecb:	00 00                	add    BYTE PTR [eax],al
     ecd:	00 02                	add    BYTE PTR [edx],al
     ecf:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     ed5:	01 fb                	add    ebx,edi
     ed7:	0e                   	push   cs
     ed8:	0d 00 01 01 01       	or     eax,0x1010100
     edd:	01 00                	add    DWORD PTR [eax],eax
     edf:	00 00                	add    BYTE PTR [eax],al
     ee1:	01 00                	add    DWORD PTR [eax],eax
     ee3:	00 01                	add    BYTE PTR [ecx],al
     ee5:	73 72                	jae    f59 <sysEnter_Vector-0x12f0a7>
     ee7:	63 00                	arpl   WORD PTR [eax],ax
     ee9:	2f                   	das    
     eea:	68 6f 6d 65 2f       	push   0x2f656d6f
     eef:	79 6f                	jns    f60 <sysEnter_Vector-0x12f0a0>
     ef1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ef8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     efb:	73 73                	jae    f70 <sysEnter_Vector-0x12f090>
     efd:	2f                   	das    
     efe:	6c                   	ins    BYTE PTR es:[edi],dx
     eff:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f06:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f0c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f12:	78 2d                	js     f41 <sysEnter_Vector-0x12f0bf>
     f14:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f16:	75 2f                	jne    f47 <sysEnter_Vector-0x12f0b9>
     f18:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f1d:	2f                   	das    
     f1e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f25:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     f28:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     f2c:	65 00 00             	add    BYTE PTR gs:[eax],al
     f2f:	6d                   	ins    DWORD PTR es:[edi],dx
     f30:	65                   	gs
     f31:	6d                   	ins    DWORD PTR es:[edi],dx
     f32:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     f35:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f38:	01 00                	add    DWORD PTR [eax],eax
     f3a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f3d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     f44:	63 
     f45:	2e                   	cs
     f46:	68 00 02 00 00       	push   0x200
     f4b:	73 74                	jae    fc1 <sysEnter_Vector-0x12f03f>
     f4d:	64                   	fs
     f4e:	64                   	fs
     f4f:	65                   	gs
     f50:	66                   	data16
     f51:	2e                   	cs
     f52:	68 00 02 00 00       	push   0x200
     f57:	6d                   	ins    DWORD PTR es:[edi],dx
     f58:	61                   	popa   
     f59:	6c                   	ins    BYTE PTR es:[edi],dx
     f5a:	6c                   	ins    BYTE PTR es:[edi],dx
     f5b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f5c:	63 2e                	arpl   WORD PTR [esi],bp
     f5e:	68 00 03 00 00       	push   0x300
     f63:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     f6a:	03 00                	add    eax,DWORD PTR [eax]
     f6c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     f70:	43                   	inc    ebx
     f71:	68 72 69 73 4f       	push   0x4f736972
     f76:	53                   	push   ebx
     f77:	2e                   	cs
     f78:	68 00 03 00 00       	push   0x300
     f7d:	00 00                	add    BYTE PTR [eax],al
     f7f:	05 02 7c 25 00       	add    eax,0x257c02
     f84:	9f                   	lahf   
     f85:	03 0b                	add    ecx,DWORD PTR [ebx]
     f87:	01 f5                	add    ebp,esi
     f89:	d7                   	xlat   BYTE PTR ds:[ebx]
     f8a:	d7                   	xlat   BYTE PTR ds:[ebx]
     f8b:	68 91 67 68 83       	push   0x83686791
     f90:	91                   	xchg   ecx,eax
     f91:	91                   	xchg   ecx,eax
     f92:	2f                   	das    
     f93:	08 1f                	or     BYTE PTR [edi],bl
     f95:	e8 08 57 ca 84       	call   84ca66a2 <sysEnter_Vector+0x84b766a2>
     f9a:	68 83 67 68 83       	push   0x83686783
     f9f:	91                   	xchg   ecx,eax
     fa0:	91                   	xchg   ecx,eax
     fa1:	2f                   	das    
     fa2:	08 1f                	or     BYTE PTR [edi],bl
     fa4:	e8 08 57 ca 5c       	call   5cca66b1 <sysEnter_Vector+0x5cb766b1>
     fa9:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     faf:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     fb5:	3e                   	ds
     fb6:	31 c9                	xor    ecx,ecx
     fb8:	08 13                	or     BYTE PTR [ebx],dl
     fba:	02 02                	add    al,BYTE PTR [edx]
     fbc:	00 01                	add    BYTE PTR [ecx],al
     fbe:	01 d4                	add    esp,edx
     fc0:	00 00                	add    BYTE PTR [eax],al
     fc2:	00 02                	add    BYTE PTR [edx],al
     fc4:	00 aa 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ch
     fca:	01 fb                	add    ebx,edi
     fcc:	0e                   	push   cs
     fcd:	0d 00 01 01 01       	or     eax,0x1010100
     fd2:	01 00                	add    DWORD PTR [eax],eax
     fd4:	00 00                	add    BYTE PTR [eax],al
     fd6:	01 00                	add    DWORD PTR [eax],eax
     fd8:	00 01                	add    BYTE PTR [ecx],al
     fda:	73 72                	jae    104e <sysEnter_Vector-0x12efb2>
     fdc:	63 00                	arpl   WORD PTR [eax],ax
     fde:	2f                   	das    
     fdf:	68 6f 6d 65 2f       	push   0x2f656d6f
     fe4:	79 6f                	jns    1055 <sysEnter_Vector-0x12efab>
     fe6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     fed:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ff0:	73 73                	jae    1065 <sysEnter_Vector-0x12ef9b>
     ff2:	2f                   	das    
     ff3:	6c                   	ins    BYTE PTR es:[edi],dx
     ff4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     ffb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1001:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1007:	78 2d                	js     1036 <sysEnter_Vector-0x12efca>
    1009:	67 6e                	outs   dx,BYTE PTR ds:[si]
    100b:	75 2f                	jne    103c <sysEnter_Vector-0x12efc4>
    100d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1012:	2f                   	das    
    1013:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    101a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    101d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1021:	65 00 00             	add    BYTE PTR gs:[eax],al
    1024:	6d                   	ins    DWORD PTR es:[edi],dx
    1025:	65                   	gs
    1026:	6d                   	ins    DWORD PTR es:[edi],dx
    1027:	73 65                	jae    108e <sysEnter_Vector-0x12ef72>
    1029:	74 2e                	je     1059 <sysEnter_Vector-0x12efa7>
    102b:	63 00                	arpl   WORD PTR [eax],ax
    102d:	01 00                	add    DWORD PTR [eax],eax
    102f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1032:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1039:	63 
    103a:	2e                   	cs
    103b:	68 00 02 00 00       	push   0x200
    1040:	73 74                	jae    10b6 <sysEnter_Vector-0x12ef4a>
    1042:	64                   	fs
    1043:	64                   	fs
    1044:	65                   	gs
    1045:	66                   	data16
    1046:	2e                   	cs
    1047:	68 00 02 00 00       	push   0x200
    104c:	6d                   	ins    DWORD PTR es:[edi],dx
    104d:	61                   	popa   
    104e:	6c                   	ins    BYTE PTR es:[edi],dx
    104f:	6c                   	ins    BYTE PTR es:[edi],dx
    1050:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1051:	63 2e                	arpl   WORD PTR [esi],bp
    1053:	68 00 03 00 00       	push   0x300
    1058:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    105f:	03 00                	add    eax,DWORD PTR [eax]
    1061:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1065:	43                   	inc    ebx
    1066:	68 72 69 73 4f       	push   0x4f736972
    106b:	53                   	push   ebx
    106c:	2e                   	cs
    106d:	68 00 03 00 00       	push   0x300
    1072:	00 00                	add    BYTE PTR [eax],al
    1074:	05 02 38 27 00       	add    eax,0x273802
    1079:	9f                   	lahf   
    107a:	1a f3                	sbb    dh,bl
    107c:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
    1082:	ca 9f 2f             	retf   0x2f9f
    1085:	d5 bd                	aad    0xbd
    1087:	9f                   	lahf   
    1088:	2f                   	das    
    1089:	f1                   	icebp  
    108a:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
    108f:	c9                   	leave  
    1090:	08 13                	or     BYTE PTR [ebx],dl
    1092:	02 02                	add    al,BYTE PTR [edx]
    1094:	00 01                	add    BYTE PTR [ecx],al
    1096:	01 f9                	add    ecx,edi
    1098:	00 00                	add    BYTE PTR [eax],al
    109a:	00 02                	add    BYTE PTR [edx],al
    109c:	00 db                	add    bl,bl
    109e:	00 00                	add    BYTE PTR [eax],al
    10a0:	00 01                	add    BYTE PTR [ecx],al
    10a2:	01 fb                	add    ebx,edi
    10a4:	0e                   	push   cs
    10a5:	0d 00 01 01 01       	or     eax,0x1010100
    10aa:	01 00                	add    DWORD PTR [eax],eax
    10ac:	00 00                	add    BYTE PTR [eax],al
    10ae:	01 00                	add    DWORD PTR [eax],eax
    10b0:	00 01                	add    BYTE PTR [ecx],al
    10b2:	73 72                	jae    1126 <sysEnter_Vector-0x12eeda>
    10b4:	63 00                	arpl   WORD PTR [eax],ax
    10b6:	2f                   	das    
    10b7:	68 6f 6d 65 2f       	push   0x2f656d6f
    10bc:	79 6f                	jns    112d <sysEnter_Vector-0x12eed3>
    10be:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    10c5:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    10c8:	73 73                	jae    113d <sysEnter_Vector-0x12eec3>
    10ca:	2f                   	das    
    10cb:	6c                   	ins    BYTE PTR es:[edi],dx
    10cc:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10d3:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10d9:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10df:	78 2d                	js     110e <sysEnter_Vector-0x12eef2>
    10e1:	67 6e                	outs   dx,BYTE PTR ds:[si]
    10e3:	75 2f                	jne    1114 <sysEnter_Vector-0x12eeec>
    10e5:	35 2e 33 2e 30       	xor    eax,0x302e332e
    10ea:	2f                   	das    
    10eb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10f2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    10f5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    10f9:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
    10fd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1101:	65                   	gs
    1102:	2f                   	das    
    1103:	2e                   	cs
    1104:	2e                   	cs
    1105:	2f                   	das    
    1106:	2e                   	cs
    1107:	2e                   	cs
    1108:	2f                   	das    
    1109:	2e                   	cs
    110a:	2e                   	cs
    110b:	2f                   	das    
    110c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1110:	6a 2f                	push   0x2f
    1112:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1115:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    111c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    111d:	65                   	gs
    111e:	6c                   	ins    BYTE PTR es:[edi],dx
    111f:	2f                   	das    
    1120:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1127:	00 00                	add    BYTE PTR [eax],al
    1129:	70 69                	jo     1194 <sysEnter_Vector-0x12ee6c>
    112b:	70 65                	jo     1192 <sysEnter_Vector-0x12ee6e>
    112d:	5f                   	pop    edi
    112e:	6c                   	ins    BYTE PTR es:[edi],dx
    112f:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
    1136:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1139:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1140:	63 
    1141:	2e                   	cs
    1142:	68 00 02 00 00       	push   0x200
    1147:	6d                   	ins    DWORD PTR es:[edi],dx
    1148:	61                   	popa   
    1149:	6c                   	ins    BYTE PTR es:[edi],dx
    114a:	6c                   	ins    BYTE PTR es:[edi],dx
    114b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    114c:	63 2e                	arpl   WORD PTR [esi],bp
    114e:	68 00 03 00 00       	push   0x300
    1153:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    115a:	03 00                	add    eax,DWORD PTR [eax]
    115c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1160:	43                   	inc    ebx
    1161:	68 72 69 73 4f       	push   0x4f736972
    1166:	53                   	push   ebx
    1167:	2e                   	cs
    1168:	68 00 03 00 00       	push   0x300
    116d:	73 79                	jae    11e8 <sysEnter_Vector-0x12ee18>
    116f:	73 63                	jae    11d4 <sysEnter_Vector-0x12ee2c>
    1171:	61                   	popa   
    1172:	6c                   	ins    BYTE PTR es:[edi],dx
    1173:	6c                   	ins    BYTE PTR es:[edi],dx
    1174:	73 2e                	jae    11a4 <sysEnter_Vector-0x12ee5c>
    1176:	68 00 04 00 00       	push   0x400
    117b:	00 00                	add    BYTE PTR [eax],al
    117d:	05 02 20 28 00       	add    eax,0x282002
    1182:	9f                   	lahf   
    1183:	03 0a                	add    ecx,DWORD PTR [edx]
    1185:	01 08                	add    DWORD PTR [eax],ecx
    1187:	13 08                	adc    ecx,DWORD PTR [eax]
    1189:	2f                   	das    
    118a:	5b                   	pop    ebx
    118b:	08 13                	or     BYTE PTR [ebx],dl
    118d:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
    1190:	05 00 01 01 e8       	add    eax,0xe8010100
    1195:	01 00                	add    DWORD PTR [eax],eax
    1197:	00 02                	add    BYTE PTR [edx],al
    1199:	00 ab 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],ch
    119f:	01 fb                	add    ebx,edi
    11a1:	0e                   	push   cs
    11a2:	0d 00 01 01 01       	or     eax,0x1010100
    11a7:	01 00                	add    DWORD PTR [eax],eax
    11a9:	00 00                	add    BYTE PTR [eax],al
    11ab:	01 00                	add    DWORD PTR [eax],eax
    11ad:	00 01                	add    BYTE PTR [ecx],al
    11af:	73 72                	jae    1223 <sysEnter_Vector-0x12eddd>
    11b1:	63 00                	arpl   WORD PTR [eax],ax
    11b3:	2f                   	das    
    11b4:	68 6f 6d 65 2f       	push   0x2f656d6f
    11b9:	79 6f                	jns    122a <sysEnter_Vector-0x12edd6>
    11bb:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11c2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11c5:	73 73                	jae    123a <sysEnter_Vector-0x12edc6>
    11c7:	2f                   	das    
    11c8:	6c                   	ins    BYTE PTR es:[edi],dx
    11c9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11d0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11d6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11dc:	78 2d                	js     120b <sysEnter_Vector-0x12edf5>
    11de:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11e0:	75 2f                	jne    1211 <sysEnter_Vector-0x12edef>
    11e2:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11e7:	2f                   	das    
    11e8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11ef:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    11f2:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    11f6:	65 00 00             	add    BYTE PTR gs:[eax],al
    11f9:	73 70                	jae    126b <sysEnter_Vector-0x12ed95>
    11fb:	72 69                	jb     1266 <sysEnter_Vector-0x12ed9a>
    11fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11fe:	74 66                	je     1266 <sysEnter_Vector-0x12ed9a>
    1200:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1203:	01 00                	add    DWORD PTR [eax],eax
    1205:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1208:	64                   	fs
    1209:	61                   	popa   
    120a:	72 67                	jb     1273 <sysEnter_Vector-0x12ed8d>
    120c:	2e                   	cs
    120d:	68 00 02 00 00       	push   0x200
    1212:	73 74                	jae    1288 <sysEnter_Vector-0x12ed78>
    1214:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    121b:	63 
    121c:	2e                   	cs
    121d:	68 00 02 00 00       	push   0x200
    1222:	6d                   	ins    DWORD PTR es:[edi],dx
    1223:	61                   	popa   
    1224:	6c                   	ins    BYTE PTR es:[edi],dx
    1225:	6c                   	ins    BYTE PTR es:[edi],dx
    1226:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1227:	63 2e                	arpl   WORD PTR [esi],bp
    1229:	68 00 03 00 00       	push   0x300
    122e:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1235:	03 00                	add    eax,DWORD PTR [eax]
    1237:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    123b:	43                   	inc    ebx
    123c:	68 72 69 73 4f       	push   0x4f736972
    1241:	53                   	push   ebx
    1242:	2e                   	cs
    1243:	68 00 03 00 00       	push   0x300
    1248:	00 00                	add    BYTE PTR [eax],al
    124a:	05 02 78 28 00       	add    eax,0x287802
    124f:	9f                   	lahf   
    1250:	03 0a                	add    ecx,DWORD PTR [edx]
    1252:	01 08                	add    DWORD PTR [eax],ecx
    1254:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    1257:	02 29                	add    ch,BYTE PTR [ecx]
    1259:	11 08                	adc    DWORD PTR [eax],ecx
    125b:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    1261:	0a 08                	or     cl,BYTE PTR [eax]
    1263:	2e                   	cs
    1264:	91                   	xchg   ecx,eax
    1265:	9f                   	lahf   
    1266:	4b                   	dec    ebx
    1267:	00 02                	add    BYTE PTR [edx],al
    1269:	04 01                	add    al,0x1
    126b:	06                   	push   es
    126c:	66 06                	pushw  es
    126e:	67 9f                	addr16 lahf 
    1270:	00 02                	add    BYTE PTR [edx],al
    1272:	04 01                	add    al,0x1
    1274:	06                   	push   es
    1275:	9e                   	sahf   
    1276:	00 02                	add    BYTE PTR [edx],al
    1278:	04 02                	add    al,0x2
    127a:	74 00                	je     127c <sysEnter_Vector-0x12ed84>
    127c:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    127f:	58                   	pop    eax
    1280:	00 02                	add    BYTE PTR [edx],al
    1282:	04 04                	add    al,0x4
    1284:	06                   	push   es
    1285:	3d 00 02 04 04       	cmp    eax,0x4040200
    128a:	4b                   	dec    ebx
    128b:	9f                   	lahf   
    128c:	67 4b                	addr16 dec ebx
    128e:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    1293:	9f                   	lahf   
    1294:	4b                   	dec    ebx
    1295:	4d                   	dec    ebp
    1296:	9f                   	lahf   
    1297:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    129b:	75 67                	jne    1304 <sysEnter_Vector-0x12ecfc>
    129d:	f5                   	cmc    
    129e:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    12a4:	67 9f                	addr16 lahf 
    12a6:	2f                   	das    
    12a7:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    12ac:	67 d7                	xlat   BYTE PTR ds:[bx]
    12ae:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    12b4:	e3 ca                	jecxz  1280 <sysEnter_Vector-0x12ed80>
    12b6:	2f                   	das    
    12b7:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    12bc:	ca 2f b9             	retf   0xb92f
    12bf:	ca 00 02             	retf   0x200
    12c2:	04 01                	add    al,0x1
    12c4:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    12c9:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    12cf:	76 91                	jbe    1262 <sysEnter_Vector-0x12ed9e>
    12d1:	08 d8                	or     al,bl
    12d3:	4b                   	dec    ebx
    12d4:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    12d7:	4b                   	dec    ebx
    12d8:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    12db:	4b                   	dec    ebx
    12dc:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    12df:	13 08                	adc    ecx,DWORD PTR [eax]
    12e1:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    12e7:	4f                   	dec    edi
    12e8:	75 9f                	jne    1289 <sysEnter_Vector-0x12ed77>
    12ea:	91                   	xchg   ecx,eax
    12eb:	08 13                	or     BYTE PTR [ebx],dl
    12ed:	08 13                	or     BYTE PTR [ebx],dl
    12ef:	9f                   	lahf   
    12f0:	92                   	xchg   edx,eax
    12f1:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    12f4:	75 00                	jne    12f6 <sysEnter_Vector-0x12ed0a>
    12f6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12f9:	06                   	push   es
    12fa:	9e                   	sahf   
    12fb:	00 02                	add    BYTE PTR [edx],al
    12fd:	04 02                	add    al,0x2
    12ff:	9e                   	sahf   
    1300:	06                   	push   es
    1301:	9f                   	lahf   
    1302:	bb 94 76 02 23       	mov    ebx,0x23027694
    1307:	14 9f                	adc    al,0x9f
    1309:	2f                   	das    
    130a:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    130f:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    1314:	08 30                	or     BYTE PTR [eax],dh
    1316:	76 9f                	jbe    12b7 <sysEnter_Vector-0x12ed49>
    1318:	2f                   	das    
    1319:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    131e:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    1324:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    1327:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    132a:	06                   	push   es
    132b:	4a                   	dec    edx
    132c:	06                   	push   es
    132d:	84 2f                	test   BYTE PTR [edi],ch
    132f:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    1334:	4d                   	dec    ebp
    1335:	ab                   	stos   DWORD PTR es:[edi],eax
    1336:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    133c:	55                   	push   ebp
    133d:	d7                   	xlat   BYTE PTR ds:[ebx]
    133e:	ca 5b bb             	retf   0xbb5b
    1341:	5c                   	pop    esp
    1342:	75 31                	jne    1375 <sysEnter_Vector-0x12ec8b>
    1344:	4c                   	dec    esp
    1345:	75 32                	jne    1379 <sysEnter_Vector-0x12ec87>
    1347:	4c                   	dec    esp
    1348:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    134e:	91                   	xchg   ecx,eax
    134f:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    1352:	03 0a                	add    ecx,DWORD PTR [edx]
    1354:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    1357:	67 08 2f             	or     BYTE PTR [bx],ch
    135a:	9f                   	lahf   
    135b:	91                   	xchg   ecx,eax
    135c:	9f                   	lahf   
    135d:	f4                   	hlt    
    135e:	d7                   	xlat   BYTE PTR ds:[ebx]
    135f:	00 02                	add    BYTE PTR [edx],al
    1361:	04 02                	add    al,0x2
    1363:	03 e8                	add    ebp,eax
    1365:	7e 08                	jle    136f <sysEnter_Vector-0x12ec91>
    1367:	f2 00 02             	repnz add BYTE PTR [edx],al
    136a:	04 01                	add    al,0x1
    136c:	06                   	push   es
    136d:	90                   	nop
    136e:	06                   	push   es
    136f:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    1375:	5b                   	pop    ebx
    1376:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    1379:	76 3d                	jbe    13b8 <sysEnter_Vector-0x12ec48>
    137b:	02 02                	add    al,BYTE PTR [edx]
    137d:	00 01                	add    BYTE PTR [ecx],al
    137f:	01 be 00 00 00 02    	add    DWORD PTR [esi+0x2000000],edi
    1385:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    138b:	01 fb                	add    ebx,edi
    138d:	0e                   	push   cs
    138e:	0d 00 01 01 01       	or     eax,0x1010100
    1393:	01 00                	add    DWORD PTR [eax],eax
    1395:	00 00                	add    BYTE PTR [eax],al
    1397:	01 00                	add    DWORD PTR [eax],eax
    1399:	00 01                	add    BYTE PTR [ecx],al
    139b:	73 72                	jae    140f <sysEnter_Vector-0x12ebf1>
    139d:	63 00                	arpl   WORD PTR [eax],ax
    139f:	2f                   	das    
    13a0:	68 6f 6d 65 2f       	push   0x2f656d6f
    13a5:	79 6f                	jns    1416 <sysEnter_Vector-0x12ebea>
    13a7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13ae:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13b1:	73 73                	jae    1426 <sysEnter_Vector-0x12ebda>
    13b3:	2f                   	das    
    13b4:	6c                   	ins    BYTE PTR es:[edi],dx
    13b5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13bc:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13c2:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13c8:	78 2d                	js     13f7 <sysEnter_Vector-0x12ec09>
    13ca:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13cc:	75 2f                	jne    13fd <sysEnter_Vector-0x12ec03>
    13ce:	35 2e 33 2e 30       	xor    eax,0x302e332e
    13d3:	2f                   	das    
    13d4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13db:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    13de:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    13e2:	65 00 00             	add    BYTE PTR gs:[eax],al
    13e5:	73 74                	jae    145b <sysEnter_Vector-0x12eba5>
    13e7:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    13ee:	00 
    13ef:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    13f2:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    13f9:	63 
    13fa:	2e                   	cs
    13fb:	68 00 02 00 00       	push   0x200
    1400:	6d                   	ins    DWORD PTR es:[edi],dx
    1401:	61                   	popa   
    1402:	6c                   	ins    BYTE PTR es:[edi],dx
    1403:	6c                   	ins    BYTE PTR es:[edi],dx
    1404:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1405:	63 2e                	arpl   WORD PTR [esi],bp
    1407:	68 00 03 00 00       	push   0x300
    140c:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1413:	03 00                	add    eax,DWORD PTR [eax]
    1415:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1419:	43                   	inc    ebx
    141a:	68 72 69 73 4f       	push   0x4f736972
    141f:	53                   	push   ebx
    1420:	2e                   	cs
    1421:	68 00 03 00 00       	push   0x300
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	05 02 90 2f 00       	add    eax,0x2f9002
    142d:	9f                   	lahf   
    142e:	03 10                	add    edx,DWORD PTR [eax]
    1430:	01 08                	add    DWORD PTR [eax],ecx
    1432:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    1435:	31 d7                	xor    edi,edx
    1437:	d7                   	xlat   BYTE PTR ds:[ebx]
    1438:	d7                   	xlat   BYTE PTR ds:[ebx]
    1439:	d7                   	xlat   BYTE PTR ds:[ebx]
    143a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    143b:	e6 21                	out    0x21,al
    143d:	02 05 00 01 01 e5    	add    al,BYTE PTR ds:0xe5010100
    1443:	00 00                	add    BYTE PTR [eax],al
    1445:	00 02                	add    BYTE PTR [edx],al
    1447:	00 b2 00 00 00 01    	add    BYTE PTR [edx+0x1000000],dh
    144d:	01 fb                	add    ebx,edi
    144f:	0e                   	push   cs
    1450:	0d 00 01 01 01       	or     eax,0x1010100
    1455:	01 00                	add    DWORD PTR [eax],eax
    1457:	00 00                	add    BYTE PTR [eax],al
    1459:	01 00                	add    DWORD PTR [eax],eax
    145b:	00 01                	add    BYTE PTR [ecx],al
    145d:	73 72                	jae    14d1 <sysEnter_Vector-0x12eb2f>
    145f:	63 2f                	arpl   WORD PTR [edi],bp
    1461:	73 74                	jae    14d7 <sysEnter_Vector-0x12eb29>
    1463:	72 69                	jb     14ce <sysEnter_Vector-0x12eb32>
    1465:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1466:	67 73 00             	addr16 jae 1469 <sysEnter_Vector-0x12eb97>
    1469:	2f                   	das    
    146a:	68 6f 6d 65 2f       	push   0x2f656d6f
    146f:	79 6f                	jns    14e0 <sysEnter_Vector-0x12eb20>
    1471:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1478:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    147b:	73 73                	jae    14f0 <sysEnter_Vector-0x12eb10>
    147d:	2f                   	das    
    147e:	6c                   	ins    BYTE PTR es:[edi],dx
    147f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1486:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    148c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1492:	78 2d                	js     14c1 <sysEnter_Vector-0x12eb3f>
    1494:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1496:	75 2f                	jne    14c7 <sysEnter_Vector-0x12eb39>
    1498:	35 2e 33 2e 30       	xor    eax,0x302e332e
    149d:	2f                   	das    
    149e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14a5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    14a8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    14ac:	65 00 00             	add    BYTE PTR gs:[eax],al
    14af:	73 74                	jae    1525 <sysEnter_Vector-0x12eadb>
    14b1:	72 63                	jb     1516 <sysEnter_Vector-0x12eaea>
    14b3:	61                   	popa   
    14b4:	74 2e                	je     14e4 <sysEnter_Vector-0x12eb1c>
    14b6:	63 00                	arpl   WORD PTR [eax],ax
    14b8:	01 00                	add    DWORD PTR [eax],eax
    14ba:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    14bd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    14c4:	63 
    14c5:	2e                   	cs
    14c6:	68 00 02 00 00       	push   0x200
    14cb:	73 74                	jae    1541 <sysEnter_Vector-0x12eabf>
    14cd:	64                   	fs
    14ce:	64                   	fs
    14cf:	65                   	gs
    14d0:	66                   	data16
    14d1:	2e                   	cs
    14d2:	68 00 02 00 00       	push   0x200
    14d7:	6d                   	ins    DWORD PTR es:[edi],dx
    14d8:	61                   	popa   
    14d9:	6c                   	ins    BYTE PTR es:[edi],dx
    14da:	6c                   	ins    BYTE PTR es:[edi],dx
    14db:	6f                   	outs   dx,DWORD PTR ds:[esi]
    14dc:	63 2e                	arpl   WORD PTR [esi],bp
    14de:	68 00 03 00 00       	push   0x300
    14e3:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    14ea:	03 00                	add    eax,DWORD PTR [eax]
    14ec:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    14f0:	43                   	inc    ebx
    14f1:	68 72 69 73 4f       	push   0x4f736972
    14f6:	53                   	push   ebx
    14f7:	2e                   	cs
    14f8:	68 00 03 00 00       	push   0x300
    14fd:	00 00                	add    BYTE PTR [eax],al
    14ff:	05 02 14 30 00       	add    eax,0x301402
    1504:	9f                   	lahf   
    1505:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    150b:	24 13                	and    al,0x13
    150d:	3d 5b 08 21 02       	cmp    eax,0x221085b
    1512:	24 13                	and    al,0x13
    1514:	3d 5b 08 21 75       	cmp    eax,0x7521085b
    1519:	08 14 83             	or     BYTE PTR [ebx+eax*4],dl
    151c:	84 68 02             	test   BYTE PTR [eax+0x2],ch
    151f:	27                   	daa    
    1520:	13 3d 5b f3 08 3d    	adc    edi,DWORD PTR ds:0x3d08f35b
    1526:	02 02                	add    al,BYTE PTR [edx]
    1528:	00 01                	add    BYTE PTR [ecx],al
    152a:	01 c8                	add    eax,ecx
    152c:	00 00                	add    BYTE PTR [eax],al
    152e:	00 02                	add    BYTE PTR [edx],al
    1530:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
    1536:	01 fb                	add    ebx,edi
    1538:	0e                   	push   cs
    1539:	0d 00 01 01 01       	or     eax,0x1010100
    153e:	01 00                	add    DWORD PTR [eax],eax
    1540:	00 00                	add    BYTE PTR [eax],al
    1542:	01 00                	add    DWORD PTR [eax],eax
    1544:	00 01                	add    BYTE PTR [ecx],al
    1546:	73 72                	jae    15ba <sysEnter_Vector-0x12ea46>
    1548:	63 2f                	arpl   WORD PTR [edi],bp
    154a:	73 74                	jae    15c0 <sysEnter_Vector-0x12ea40>
    154c:	72 69                	jb     15b7 <sysEnter_Vector-0x12ea49>
    154e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    154f:	67 73 00             	addr16 jae 1552 <sysEnter_Vector-0x12eaae>
    1552:	2f                   	das    
    1553:	68 6f 6d 65 2f       	push   0x2f656d6f
    1558:	79 6f                	jns    15c9 <sysEnter_Vector-0x12ea37>
    155a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1561:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1564:	73 73                	jae    15d9 <sysEnter_Vector-0x12ea27>
    1566:	2f                   	das    
    1567:	6c                   	ins    BYTE PTR es:[edi],dx
    1568:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    156f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1575:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    157b:	78 2d                	js     15aa <sysEnter_Vector-0x12ea56>
    157d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    157f:	75 2f                	jne    15b0 <sysEnter_Vector-0x12ea50>
    1581:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1586:	2f                   	das    
    1587:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    158e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1591:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1595:	65 00 00             	add    BYTE PTR gs:[eax],al
    1598:	73 74                	jae    160e <sysEnter_Vector-0x12e9f2>
    159a:	72 63                	jb     15ff <sysEnter_Vector-0x12ea01>
    159c:	6d                   	ins    DWORD PTR es:[edi],dx
    159d:	70 2e                	jo     15cd <sysEnter_Vector-0x12ea33>
    159f:	63 00                	arpl   WORD PTR [eax],ax
    15a1:	01 00                	add    DWORD PTR [eax],eax
    15a3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15a6:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15ad:	63 
    15ae:	2e                   	cs
    15af:	68 00 02 00 00       	push   0x200
    15b4:	6d                   	ins    DWORD PTR es:[edi],dx
    15b5:	61                   	popa   
    15b6:	6c                   	ins    BYTE PTR es:[edi],dx
    15b7:	6c                   	ins    BYTE PTR es:[edi],dx
    15b8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15b9:	63 2e                	arpl   WORD PTR [esi],bp
    15bb:	68 00 03 00 00       	push   0x300
    15c0:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    15c7:	03 00                	add    eax,DWORD PTR [eax]
    15c9:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    15cd:	43                   	inc    ebx
    15ce:	68 72 69 73 4f       	push   0x4f736972
    15d3:	53                   	push   ebx
    15d4:	2e                   	cs
    15d5:	68 00 03 00 00       	push   0x300
    15da:	00 00                	add    BYTE PTR [eax],al
    15dc:	05 02 28 31 00       	add    eax,0x312802
    15e1:	9f                   	lahf   
    15e2:	03 1a                	add    ebx,DWORD PTR [edx]
    15e4:	01 08                	add    DWORD PTR [eax],ecx
    15e6:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    15ec:	d8 92 bb 77 c9 d7    	fcom   DWORD PTR [edx-0x28368845]
    15f2:	02 02                	add    al,BYTE PTR [edx]
    15f4:	00 01                	add    BYTE PTR [ecx],al
    15f6:	01 e6                	add    esi,esp
    15f8:	00 00                	add    BYTE PTR [eax],al
    15fa:	00 02                	add    BYTE PTR [edx],al
    15fc:	00 a6 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ah
    1602:	01 fb                	add    ebx,edi
    1604:	0e                   	push   cs
    1605:	0d 00 01 01 01       	or     eax,0x1010100
    160a:	01 00                	add    DWORD PTR [eax],eax
    160c:	00 00                	add    BYTE PTR [eax],al
    160e:	01 00                	add    DWORD PTR [eax],eax
    1610:	00 01                	add    BYTE PTR [ecx],al
    1612:	73 72                	jae    1686 <sysEnter_Vector-0x12e97a>
    1614:	63 2f                	arpl   WORD PTR [edi],bp
    1616:	73 74                	jae    168c <sysEnter_Vector-0x12e974>
    1618:	72 69                	jb     1683 <sysEnter_Vector-0x12e97d>
    161a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    161b:	67 73 00             	addr16 jae 161e <sysEnter_Vector-0x12e9e2>
    161e:	2f                   	das    
    161f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1624:	79 6f                	jns    1695 <sysEnter_Vector-0x12e96b>
    1626:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    162d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1630:	73 73                	jae    16a5 <sysEnter_Vector-0x12e95b>
    1632:	2f                   	das    
    1633:	6c                   	ins    BYTE PTR es:[edi],dx
    1634:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    163b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1641:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1647:	78 2d                	js     1676 <sysEnter_Vector-0x12e98a>
    1649:	67 6e                	outs   dx,BYTE PTR ds:[si]
    164b:	75 2f                	jne    167c <sysEnter_Vector-0x12e984>
    164d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1652:	2f                   	das    
    1653:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    165a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    165d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1661:	65 00 00             	add    BYTE PTR gs:[eax],al
    1664:	73 74                	jae    16da <sysEnter_Vector-0x12e926>
    1666:	72 63                	jb     16cb <sysEnter_Vector-0x12e935>
    1668:	70 79                	jo     16e3 <sysEnter_Vector-0x12e91d>
    166a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    166d:	01 00                	add    DWORD PTR [eax],eax
    166f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1672:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1679:	63 
    167a:	2e                   	cs
    167b:	68 00 02 00 00       	push   0x200
    1680:	6d                   	ins    DWORD PTR es:[edi],dx
    1681:	61                   	popa   
    1682:	6c                   	ins    BYTE PTR es:[edi],dx
    1683:	6c                   	ins    BYTE PTR es:[edi],dx
    1684:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1685:	63 2e                	arpl   WORD PTR [esi],bp
    1687:	68 00 03 00 00       	push   0x300
    168c:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1693:	03 00                	add    eax,DWORD PTR [eax]
    1695:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1699:	43                   	inc    ebx
    169a:	68 72 69 73 4f       	push   0x4f736972
    169f:	53                   	push   ebx
    16a0:	2e                   	cs
    16a1:	68 00 03 00 00       	push   0x300
    16a6:	00 00                	add    BYTE PTR [eax],al
    16a8:	05 02 a4 31 00       	add    eax,0x31a402
    16ad:	9f                   	lahf   
    16ae:	16                   	push   ss
    16af:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    16b3:	04 01                	add    al,0x1
    16b5:	06                   	push   es
    16b6:	20 06                	and    BYTE PTR [esi],al
    16b8:	08 ca                	or     dl,cl
    16ba:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    16c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16c3:	06                   	push   es
    16c4:	20 06                	and    BYTE PTR [esi],al
    16c6:	08 ca                	or     dl,cl
    16c8:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    16ce:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    16d1:	06                   	push   es
    16d2:	20 00                	and    BYTE PTR [eax],al
    16d4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16d7:	08 c8                	or     al,cl
    16d9:	06                   	push   es
    16da:	ca 3d 02             	retf   0x23d
    16dd:	02 00                	add    al,BYTE PTR [eax]
    16df:	01 01                	add    DWORD PTR [ecx],eax
    16e1:	d5 00                	aad    0x0
    16e3:	00 00                	add    BYTE PTR [eax],al
    16e5:	02 00                	add    al,BYTE PTR [eax]
    16e7:	a8 00                	test   al,0x0
    16e9:	00 00                	add    BYTE PTR [eax],al
    16eb:	01 01                	add    DWORD PTR [ecx],eax
    16ed:	fb                   	sti    
    16ee:	0e                   	push   cs
    16ef:	0d 00 01 01 01       	or     eax,0x1010100
    16f4:	01 00                	add    DWORD PTR [eax],eax
    16f6:	00 00                	add    BYTE PTR [eax],al
    16f8:	01 00                	add    DWORD PTR [eax],eax
    16fa:	00 01                	add    BYTE PTR [ecx],al
    16fc:	73 72                	jae    1770 <sysEnter_Vector-0x12e890>
    16fe:	63 2f                	arpl   WORD PTR [edi],bp
    1700:	73 74                	jae    1776 <sysEnter_Vector-0x12e88a>
    1702:	72 69                	jb     176d <sysEnter_Vector-0x12e893>
    1704:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1705:	67 73 00             	addr16 jae 1708 <sysEnter_Vector-0x12e8f8>
    1708:	2f                   	das    
    1709:	68 6f 6d 65 2f       	push   0x2f656d6f
    170e:	79 6f                	jns    177f <sysEnter_Vector-0x12e881>
    1710:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1717:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    171a:	73 73                	jae    178f <sysEnter_Vector-0x12e871>
    171c:	2f                   	das    
    171d:	6c                   	ins    BYTE PTR es:[edi],dx
    171e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1725:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    172b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1731:	78 2d                	js     1760 <sysEnter_Vector-0x12e8a0>
    1733:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1735:	75 2f                	jne    1766 <sysEnter_Vector-0x12e89a>
    1737:	35 2e 33 2e 30       	xor    eax,0x302e332e
    173c:	2f                   	das    
    173d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1744:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1747:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    174b:	65 00 00             	add    BYTE PTR gs:[eax],al
    174e:	73 74                	jae    17c4 <sysEnter_Vector-0x12e83c>
    1750:	72 69                	jb     17bb <sysEnter_Vector-0x12e845>
    1752:	73 6e                	jae    17c2 <sysEnter_Vector-0x12e83e>
    1754:	75 6d                	jne    17c3 <sysEnter_Vector-0x12e83d>
    1756:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1759:	01 00                	add    DWORD PTR [eax],eax
    175b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    175e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1765:	63 
    1766:	2e                   	cs
    1767:	68 00 02 00 00       	push   0x200
    176c:	6d                   	ins    DWORD PTR es:[edi],dx
    176d:	61                   	popa   
    176e:	6c                   	ins    BYTE PTR es:[edi],dx
    176f:	6c                   	ins    BYTE PTR es:[edi],dx
    1770:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1771:	63 2e                	arpl   WORD PTR [esi],bp
    1773:	68 00 03 00 00       	push   0x300
    1778:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    177f:	03 00                	add    eax,DWORD PTR [eax]
    1781:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1785:	43                   	inc    ebx
    1786:	68 72 69 73 4f       	push   0x4f736972
    178b:	53                   	push   ebx
    178c:	2e                   	cs
    178d:	68 00 03 00 00       	push   0x300
    1792:	00 00                	add    BYTE PTR [eax],al
    1794:	05 02 6c 32 00       	add    eax,0x326c02
    1799:	9f                   	lahf   
    179a:	1a 08                	sbb    cl,BYTE PTR [eax]
    179c:	59                   	pop    ecx
    179d:	00 02                	add    BYTE PTR [edx],al
    179f:	04 01                	add    al,0x1
    17a1:	06                   	push   es
    17a2:	66                   	data16
    17a3:	00 02                	add    BYTE PTR [edx],al
    17a5:	04 02                	add    al,0x2
    17a7:	66 06                	pushw  es
    17a9:	75 59                	jne    1804 <sysEnter_Vector-0x12e7fc>
    17ab:	31 f3                	xor    ebx,esi
    17ad:	76 2f                	jbe    17de <sysEnter_Vector-0x12e822>
    17af:	08 e5                	or     ch,ah
    17b1:	72 08                	jb     17bb <sysEnter_Vector-0x12e845>
    17b3:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    17b6:	02 00                	add    al,BYTE PTR [eax]
    17b8:	01 01                	add    DWORD PTR [ecx],eax
    17ba:	df 00                	fild   WORD PTR [eax]
    17bc:	00 00                	add    BYTE PTR [eax],al
    17be:	02 00                	add    al,BYTE PTR [eax]
    17c0:	b2 00                	mov    dl,0x0
    17c2:	00 00                	add    BYTE PTR [eax],al
    17c4:	01 01                	add    DWORD PTR [ecx],eax
    17c6:	fb                   	sti    
    17c7:	0e                   	push   cs
    17c8:	0d 00 01 01 01       	or     eax,0x1010100
    17cd:	01 00                	add    DWORD PTR [eax],eax
    17cf:	00 00                	add    BYTE PTR [eax],al
    17d1:	01 00                	add    DWORD PTR [eax],eax
    17d3:	00 01                	add    BYTE PTR [ecx],al
    17d5:	73 72                	jae    1849 <sysEnter_Vector-0x12e7b7>
    17d7:	63 2f                	arpl   WORD PTR [edi],bp
    17d9:	73 74                	jae    184f <sysEnter_Vector-0x12e7b1>
    17db:	72 69                	jb     1846 <sysEnter_Vector-0x12e7ba>
    17dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17de:	67 73 00             	addr16 jae 17e1 <sysEnter_Vector-0x12e81f>
    17e1:	2f                   	das    
    17e2:	68 6f 6d 65 2f       	push   0x2f656d6f
    17e7:	79 6f                	jns    1858 <sysEnter_Vector-0x12e7a8>
    17e9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17f0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17f3:	73 73                	jae    1868 <sysEnter_Vector-0x12e798>
    17f5:	2f                   	das    
    17f6:	6c                   	ins    BYTE PTR es:[edi],dx
    17f7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17fe:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1804:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    180a:	78 2d                	js     1839 <sysEnter_Vector-0x12e7c7>
    180c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    180e:	75 2f                	jne    183f <sysEnter_Vector-0x12e7c1>
    1810:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1815:	2f                   	das    
    1816:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    181d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1820:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1824:	65 00 00             	add    BYTE PTR gs:[eax],al
    1827:	73 74                	jae    189d <sysEnter_Vector-0x12e763>
    1829:	72 6c                	jb     1897 <sysEnter_Vector-0x12e769>
    182b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    182d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1830:	01 00                	add    DWORD PTR [eax],eax
    1832:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1835:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    183c:	63 
    183d:	2e                   	cs
    183e:	68 00 02 00 00       	push   0x200
    1843:	73 74                	jae    18b9 <sysEnter_Vector-0x12e747>
    1845:	64                   	fs
    1846:	64                   	fs
    1847:	65                   	gs
    1848:	66                   	data16
    1849:	2e                   	cs
    184a:	68 00 02 00 00       	push   0x200
    184f:	6d                   	ins    DWORD PTR es:[edi],dx
    1850:	61                   	popa   
    1851:	6c                   	ins    BYTE PTR es:[edi],dx
    1852:	6c                   	ins    BYTE PTR es:[edi],dx
    1853:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1854:	63 2e                	arpl   WORD PTR [esi],bp
    1856:	68 00 03 00 00       	push   0x300
    185b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1862:	03 00                	add    eax,DWORD PTR [eax]
    1864:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1868:	43                   	inc    ebx
    1869:	68 72 69 73 4f       	push   0x4f736972
    186e:	53                   	push   ebx
    186f:	2e                   	cs
    1870:	68 00 03 00 00       	push   0x300
    1875:	00 00                	add    BYTE PTR [eax],al
    1877:	05 02 f8 32 00       	add    eax,0x32f802
    187c:	9f                   	lahf   
    187d:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    1882:	e6 3d                	out    0x3d,al
    1884:	31 c9                	xor    ecx,ecx
    1886:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1887:	31 f3                	xor    ebx,esi
    1889:	75 2f                	jne    18ba <sysEnter_Vector-0x12e746>
    188b:	49                   	dec    ecx
    188c:	00 02                	add    BYTE PTR [edx],al
    188e:	04 01                	add    al,0x1
    1890:	06                   	push   es
    1891:	e4 06                	in     al,0x6
    1893:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    1899:	02 00                	add    al,BYTE PTR [eax]
    189b:	01 01                	add    DWORD PTR [ecx],eax
    189d:	c1 00 00             	rol    DWORD PTR [eax],0x0
    18a0:	00 02                	add    BYTE PTR [edx],al
    18a2:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    18a5:	00 00                	add    BYTE PTR [eax],al
    18a7:	01 01                	add    DWORD PTR [ecx],eax
    18a9:	fb                   	sti    
    18aa:	0e                   	push   cs
    18ab:	0d 00 01 01 01       	or     eax,0x1010100
    18b0:	01 00                	add    DWORD PTR [eax],eax
    18b2:	00 00                	add    BYTE PTR [eax],al
    18b4:	01 00                	add    DWORD PTR [eax],eax
    18b6:	00 01                	add    BYTE PTR [ecx],al
    18b8:	73 72                	jae    192c <sysEnter_Vector-0x12e6d4>
    18ba:	63 2f                	arpl   WORD PTR [edi],bp
    18bc:	73 74                	jae    1932 <sysEnter_Vector-0x12e6ce>
    18be:	72 69                	jb     1929 <sysEnter_Vector-0x12e6d7>
    18c0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18c1:	67 73 00             	addr16 jae 18c4 <sysEnter_Vector-0x12e73c>
    18c4:	2f                   	das    
    18c5:	68 6f 6d 65 2f       	push   0x2f656d6f
    18ca:	79 6f                	jns    193b <sysEnter_Vector-0x12e6c5>
    18cc:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    18d3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    18d6:	73 73                	jae    194b <sysEnter_Vector-0x12e6b5>
    18d8:	2f                   	das    
    18d9:	6c                   	ins    BYTE PTR es:[edi],dx
    18da:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    18e1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    18e7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    18ed:	78 2d                	js     191c <sysEnter_Vector-0x12e6e4>
    18ef:	67 6e                	outs   dx,BYTE PTR ds:[si]
    18f1:	75 2f                	jne    1922 <sysEnter_Vector-0x12e6de>
    18f3:	35 2e 33 2e 30       	xor    eax,0x302e332e
    18f8:	2f                   	das    
    18f9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1900:	00 00                	add    BYTE PTR [eax],al
    1902:	73 74                	jae    1978 <sysEnter_Vector-0x12e688>
    1904:	72 6e                	jb     1974 <sysEnter_Vector-0x12e68c>
    1906:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1909:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    190c:	01 00                	add    DWORD PTR [eax],eax
    190e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1911:	64                   	fs
    1912:	64                   	fs
    1913:	65                   	gs
    1914:	66                   	data16
    1915:	2e                   	cs
    1916:	68 00 02 00 00       	push   0x200
    191b:	00 00                	add    BYTE PTR [eax],al
    191d:	05 02 9c 33 00       	add    eax,0x339c02
    1922:	9f                   	lahf   
    1923:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    1926:	c9                   	leave  
    1927:	2f                   	das    
    1928:	f3 00 02             	repz add BYTE PTR [edx],al
    192b:	04 01                	add    al,0x1
    192d:	06                   	push   es
    192e:	f2 00 02             	repnz add BYTE PTR [edx],al
    1931:	04 02                	add    al,0x2
    1933:	74 06                	je     193b <sysEnter_Vector-0x12e6c5>
    1935:	75 9f                	jne    18d6 <sysEnter_Vector-0x12e72a>
    1937:	70 00                	jo     1939 <sysEnter_Vector-0x12e6c7>
    1939:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    193c:	06                   	push   es
    193d:	ba 06 6b 59 31       	mov    edx,0x31596b06
    1942:	c9                   	leave  
    1943:	2f                   	das    
    1944:	f3 00 02             	repz add BYTE PTR [edx],al
    1947:	04 01                	add    al,0x1
    1949:	06                   	push   es
    194a:	f2 00 02             	repnz add BYTE PTR [edx],al
    194d:	04 02                	add    al,0x2
    194f:	74 06                	je     1957 <sysEnter_Vector-0x12e6a9>
    1951:	75 9f                	jne    18f2 <sysEnter_Vector-0x12e70e>
    1953:	70 00                	jo     1955 <sysEnter_Vector-0x12e6ab>
    1955:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1958:	06                   	push   es
    1959:	ba 06 6b 59 02       	mov    edx,0x2596b06
    195e:	02 00                	add    al,BYTE PTR [eax]
    1960:	01 01                	add    DWORD PTR [ecx],eax
    1962:	a3 00 00 00 02       	mov    ds:0x2000000,eax
    1967:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    196a:	00 00                	add    BYTE PTR [eax],al
    196c:	01 01                	add    DWORD PTR [ecx],eax
    196e:	fb                   	sti    
    196f:	0e                   	push   cs
    1970:	0d 00 01 01 01       	or     eax,0x1010100
    1975:	01 00                	add    DWORD PTR [eax],eax
    1977:	00 00                	add    BYTE PTR [eax],al
    1979:	01 00                	add    DWORD PTR [eax],eax
    197b:	00 01                	add    BYTE PTR [ecx],al
    197d:	73 72                	jae    19f1 <sysEnter_Vector-0x12e60f>
    197f:	63 2f                	arpl   WORD PTR [edi],bp
    1981:	73 74                	jae    19f7 <sysEnter_Vector-0x12e609>
    1983:	72 69                	jb     19ee <sysEnter_Vector-0x12e612>
    1985:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1986:	67 73 00             	addr16 jae 1989 <sysEnter_Vector-0x12e677>
    1989:	2f                   	das    
    198a:	68 6f 6d 65 2f       	push   0x2f656d6f
    198f:	79 6f                	jns    1a00 <sysEnter_Vector-0x12e600>
    1991:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1998:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    199b:	73 73                	jae    1a10 <sysEnter_Vector-0x12e5f0>
    199d:	2f                   	das    
    199e:	6c                   	ins    BYTE PTR es:[edi],dx
    199f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    19a6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    19ac:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    19b2:	78 2d                	js     19e1 <sysEnter_Vector-0x12e61f>
    19b4:	67 6e                	outs   dx,BYTE PTR ds:[si]
    19b6:	75 2f                	jne    19e7 <sysEnter_Vector-0x12e619>
    19b8:	35 2e 33 2e 30       	xor    eax,0x302e332e
    19bd:	2f                   	das    
    19be:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    19c5:	00 00                	add    BYTE PTR [eax],al
    19c7:	73 74                	jae    1a3d <sysEnter_Vector-0x12e5c3>
    19c9:	72 6e                	jb     1a39 <sysEnter_Vector-0x12e5c7>
    19cb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    19ce:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19d1:	01 00                	add    DWORD PTR [eax],eax
    19d3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    19d6:	64                   	fs
    19d7:	64                   	fs
    19d8:	65                   	gs
    19d9:	66                   	data16
    19da:	2e                   	cs
    19db:	68 00 02 00 00       	push   0x200
    19e0:	00 00                	add    BYTE PTR [eax],al
    19e2:	05 02 6c 34 00       	add    eax,0x346c02
    19e7:	9f                   	lahf   
    19e8:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    19ee:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    19f1:	00 02                	add    BYTE PTR [edx],al
    19f3:	04 01                	add    al,0x1
    19f5:	06                   	push   es
    19f6:	66 06                	pushw  es
    19f8:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    19fd:	67 67 3d 31 c9 08 13 	addr32 addr16 cmp eax,0x1308c931
    1a04:	02 02                	add    al,BYTE PTR [edx]
    1a06:	00 01                	add    BYTE PTR [ecx],al
    1a08:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    1a0b:	00 00                	add    BYTE PTR [eax],al
    1a0d:	02 00                	add    al,BYTE PTR [eax]
    1a0f:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1a10:	00 00                	add    BYTE PTR [eax],al
    1a12:	00 01                	add    BYTE PTR [ecx],al
    1a14:	01 fb                	add    ebx,edi
    1a16:	0e                   	push   cs
    1a17:	0d 00 01 01 01       	or     eax,0x1010100
    1a1c:	01 00                	add    DWORD PTR [eax],eax
    1a1e:	00 00                	add    BYTE PTR [eax],al
    1a20:	01 00                	add    DWORD PTR [eax],eax
    1a22:	00 01                	add    BYTE PTR [ecx],al
    1a24:	73 72                	jae    1a98 <sysEnter_Vector-0x12e568>
    1a26:	63 2f                	arpl   WORD PTR [edi],bp
    1a28:	73 74                	jae    1a9e <sysEnter_Vector-0x12e562>
    1a2a:	72 69                	jb     1a95 <sysEnter_Vector-0x12e56b>
    1a2c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1a2d:	67 73 00             	addr16 jae 1a30 <sysEnter_Vector-0x12e5d0>
    1a30:	2f                   	das    
    1a31:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a36:	79 6f                	jns    1aa7 <sysEnter_Vector-0x12e559>
    1a38:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a3f:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a42:	73 73                	jae    1ab7 <sysEnter_Vector-0x12e549>
    1a44:	2f                   	das    
    1a45:	6c                   	ins    BYTE PTR es:[edi],dx
    1a46:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a4d:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a53:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a59:	78 2d                	js     1a88 <sysEnter_Vector-0x12e578>
    1a5b:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a5d:	75 2f                	jne    1a8e <sysEnter_Vector-0x12e572>
    1a5f:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a64:	2f                   	das    
    1a65:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a6c:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a6f:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a73:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a76:	73 74                	jae    1aec <sysEnter_Vector-0x12e514>
    1a78:	72 6f                	jb     1ae9 <sysEnter_Vector-0x12e517>
    1a7a:	75 6c                	jne    1ae8 <sysEnter_Vector-0x12e518>
    1a7c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1a7f:	01 00                	add    DWORD PTR [eax],eax
    1a81:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1a84:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1a8b:	63 
    1a8c:	2e                   	cs
    1a8d:	68 00 02 00 00       	push   0x200
    1a92:	6d                   	ins    DWORD PTR es:[edi],dx
    1a93:	61                   	popa   
    1a94:	6c                   	ins    BYTE PTR es:[edi],dx
    1a95:	6c                   	ins    BYTE PTR es:[edi],dx
    1a96:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a97:	63 2e                	arpl   WORD PTR [esi],bp
    1a99:	68 00 03 00 00       	push   0x300
    1a9e:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1aa5:	03 00                	add    eax,DWORD PTR [eax]
    1aa7:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1aab:	43                   	inc    ebx
    1aac:	68 72 69 73 4f       	push   0x4f736972
    1ab1:	53                   	push   ebx
    1ab2:	2e                   	cs
    1ab3:	68 00 03 00 00       	push   0x300
    1ab8:	00 00                	add    BYTE PTR [eax],al
    1aba:	05 02 f8 34 00       	add    eax,0x34f802
    1abf:	9f                   	lahf   
    1ac0:	03 3b                	add    edi,DWORD PTR [ebx]
    1ac2:	01 08                	add    DWORD PTR [eax],ecx
    1ac4:	2f                   	das    
    1ac5:	40                   	inc    eax
    1ac6:	00 02                	add    BYTE PTR [edx],al
    1ac8:	04 01                	add    al,0x1
    1aca:	7a 00                	jp     1acc <sysEnter_Vector-0x12e534>
    1acc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1acf:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1ad0:	59                   	pop    ecx
    1ad1:	59                   	pop    ecx
    1ad2:	75 c9                	jne    1a9d <sysEnter_Vector-0x12e563>
    1ad4:	59                   	pop    ecx
    1ad5:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1ad6:	00 02                	add    BYTE PTR [edx],al
    1ad8:	04 02                	add    al,0x2
    1ada:	06                   	push   es
    1adb:	66                   	data16
    1adc:	00 02                	add    BYTE PTR [edx],al
    1ade:	04 03                	add    al,0x3
    1ae0:	66 06                	pushw  es
    1ae2:	59                   	pop    ecx
    1ae3:	00 02                	add    BYTE PTR [edx],al
    1ae5:	04 01                	add    al,0x1
    1ae7:	06                   	push   es
    1ae8:	74 06                	je     1af0 <sysEnter_Vector-0x12e510>
    1aea:	75 91                	jne    1a7d <sysEnter_Vector-0x12e583>
    1aec:	3d 76 67 00 02       	cmp    eax,0x2006776
    1af1:	04 01                	add    al,0x1
    1af3:	06                   	push   es
    1af4:	58                   	pop    eax
    1af5:	00 02                	add    BYTE PTR [edx],al
    1af7:	04 02                	add    al,0x2
    1af9:	74 00                	je     1afb <sysEnter_Vector-0x12e505>
    1afb:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1afe:	58                   	pop    eax
    1aff:	06                   	push   es
    1b00:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1b05:	9f                   	lahf   
    1b06:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1b0a:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b0d:	06                   	push   es
    1b0e:	58                   	pop    eax
    1b0f:	00 02                	add    BYTE PTR [edx],al
    1b11:	04 03                	add    al,0x3
    1b13:	58                   	pop    eax
    1b14:	00 02                	add    BYTE PTR [edx],al
    1b16:	04 04                	add    al,0x4
    1b18:	74 00                	je     1b1a <sysEnter_Vector-0x12e4e6>
    1b1a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b1d:	58                   	pop    eax
    1b1e:	06                   	push   es
    1b1f:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1b22:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b25:	06                   	push   es
    1b26:	66                   	data16
    1b27:	00 02                	add    BYTE PTR [edx],al
    1b29:	04 02                	add    al,0x2
    1b2b:	58                   	pop    eax
    1b2c:	00 02                	add    BYTE PTR [edx],al
    1b2e:	04 03                	add    al,0x3
    1b30:	58                   	pop    eax
    1b31:	06                   	push   es
    1b32:	67 76 59             	addr16 jbe 1b8e <sysEnter_Vector-0x12e472>
    1b35:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1b39:	03 10                	add    edx,DWORD PTR [eax]
    1b3b:	ac                   	lods   al,BYTE PTR ds:[esi]
    1b3c:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1b3f:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1b42:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1b45:	67 2f                	addr16 das 
    1b47:	67 00 02             	add    BYTE PTR [bp+si],al
    1b4a:	04 01                	add    al,0x1
    1b4c:	06                   	push   es
    1b4d:	66                   	data16
    1b4e:	00 02                	add    BYTE PTR [edx],al
    1b50:	04 02                	add    al,0x2
    1b52:	58                   	pop    eax
    1b53:	00 02                	add    BYTE PTR [edx],al
    1b55:	04 04                	add    al,0x4
    1b57:	3c 06                	cmp    al,0x6
    1b59:	59                   	pop    ecx
    1b5a:	2f                   	das    
    1b5b:	02 08                	add    cl,BYTE PTR [eax]
    1b5d:	00 01                	add    BYTE PTR [ecx],al
    1b5f:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1b62:	00 00                	add    BYTE PTR [eax],al
    1b64:	02 00                	add    al,BYTE PTR [eax]
    1b66:	2d 00 00 00 01       	sub    eax,0x1000000
    1b6b:	01 fb                	add    ebx,edi
    1b6d:	0e                   	push   cs
    1b6e:	0d 00 01 01 01       	or     eax,0x1010100
    1b73:	01 00                	add    DWORD PTR [eax],eax
    1b75:	00 00                	add    BYTE PTR [eax],al
    1b77:	01 00                	add    DWORD PTR [eax],eax
    1b79:	00 01                	add    BYTE PTR [ecx],al
    1b7b:	73 72                	jae    1bef <sysEnter_Vector-0x12e411>
    1b7d:	63 2f                	arpl   WORD PTR [edi],bp
    1b7f:	73 74                	jae    1bf5 <sysEnter_Vector-0x12e40b>
    1b81:	72 69                	jb     1bec <sysEnter_Vector-0x12e414>
    1b83:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b84:	67 73 00             	addr16 jae 1b87 <sysEnter_Vector-0x12e479>
    1b87:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1b8a:	72 70                	jb     1bfc <sysEnter_Vector-0x12e404>
    1b8c:	61                   	popa   
    1b8d:	72 74                	jb     1c03 <sysEnter_Vector-0x12e3fd>
    1b8f:	73 2e                	jae    1bbf <sysEnter_Vector-0x12e441>
    1b91:	63 00                	arpl   WORD PTR [eax],ax
    1b93:	01 00                	add    DWORD PTR [eax],eax
    1b95:	00 00                	add    BYTE PTR [eax],al
    1b97:	00 05 02 78 36 00    	add    BYTE PTR ds:0x367802,al
    1b9d:	9f                   	lahf   
    1b9e:	13 c9                	adc    ecx,ecx
    1ba0:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1ba1:	3d 02 02 00 01       	cmp    eax,0x1000202
    1ba6:	01 7f 01             	add    DWORD PTR [edi+0x1],edi
    1ba9:	00 00                	add    BYTE PTR [eax],al
    1bab:	02 00                	add    al,BYTE PTR [eax]
    1bad:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    1bae:	00 00                	add    BYTE PTR [eax],al
    1bb0:	00 01                	add    BYTE PTR [ecx],al
    1bb2:	01 fb                	add    ebx,edi
    1bb4:	0e                   	push   cs
    1bb5:	0d 00 01 01 01       	or     eax,0x1010100
    1bba:	01 00                	add    DWORD PTR [eax],eax
    1bbc:	00 00                	add    BYTE PTR [eax],al
    1bbe:	01 00                	add    DWORD PTR [eax],eax
    1bc0:	00 01                	add    BYTE PTR [ecx],al
    1bc2:	73 72                	jae    1c36 <sysEnter_Vector-0x12e3ca>
    1bc4:	63 2f                	arpl   WORD PTR [edi],bp
    1bc6:	73 74                	jae    1c3c <sysEnter_Vector-0x12e3c4>
    1bc8:	72 69                	jb     1c33 <sysEnter_Vector-0x12e3cd>
    1bca:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1bcb:	67 73 00             	addr16 jae 1bce <sysEnter_Vector-0x12e432>
    1bce:	2f                   	das    
    1bcf:	68 6f 6d 65 2f       	push   0x2f656d6f
    1bd4:	79 6f                	jns    1c45 <sysEnter_Vector-0x12e3bb>
    1bd6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1bdd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1be0:	73 73                	jae    1c55 <sysEnter_Vector-0x12e3ab>
    1be2:	2f                   	das    
    1be3:	6c                   	ins    BYTE PTR es:[edi],dx
    1be4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1beb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1bf1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1bf7:	78 2d                	js     1c26 <sysEnter_Vector-0x12e3da>
    1bf9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1bfb:	75 2f                	jne    1c2c <sysEnter_Vector-0x12e3d4>
    1bfd:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1c02:	2f                   	das    
    1c03:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1c0a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1c0d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1c11:	65 00 00             	add    BYTE PTR gs:[eax],al
    1c14:	73 74                	jae    1c8a <sysEnter_Vector-0x12e376>
    1c16:	72 74                	jb     1c8c <sysEnter_Vector-0x12e374>
    1c18:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c19:	6c                   	ins    BYTE PTR es:[edi],dx
    1c1a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1c1d:	01 00                	add    DWORD PTR [eax],eax
    1c1f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c22:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1c29:	63 
    1c2a:	2e                   	cs
    1c2b:	68 00 02 00 00       	push   0x200
    1c30:	6d                   	ins    DWORD PTR es:[edi],dx
    1c31:	61                   	popa   
    1c32:	6c                   	ins    BYTE PTR es:[edi],dx
    1c33:	6c                   	ins    BYTE PTR es:[edi],dx
    1c34:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c35:	63 2e                	arpl   WORD PTR [esi],bp
    1c37:	68 00 03 00 00       	push   0x300
    1c3c:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1c43:	03 00                	add    eax,DWORD PTR [eax]
    1c45:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1c49:	43                   	inc    ebx
    1c4a:	68 72 69 73 4f       	push   0x4f736972
    1c4f:	53                   	push   ebx
    1c50:	2e                   	cs
    1c51:	68 00 03 00 00       	push   0x300
    1c56:	00 00                	add    BYTE PTR [eax],al
    1c58:	05 02 98 36 00       	add    eax,0x369802
    1c5d:	9f                   	lahf   
    1c5e:	03 d7                	add    edx,edi
    1c60:	00 01                	add    BYTE PTR [ecx],al
    1c62:	08 2f                	or     BYTE PTR [edi],ch
    1c64:	40                   	inc    eax
    1c65:	00 02                	add    BYTE PTR [edx],al
    1c67:	04 01                	add    al,0x1
    1c69:	7c 00                	jl     1c6b <sysEnter_Vector-0x12e395>
    1c6b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1c6e:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c6f:	59                   	pop    ecx
    1c70:	59                   	pop    ecx
    1c71:	75 c9                	jne    1c3c <sysEnter_Vector-0x12e3c4>
    1c73:	59                   	pop    ecx
    1c74:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1c75:	00 02                	add    BYTE PTR [edx],al
    1c77:	04 02                	add    al,0x2
    1c79:	06                   	push   es
    1c7a:	66                   	data16
    1c7b:	00 02                	add    BYTE PTR [edx],al
    1c7d:	04 03                	add    al,0x3
    1c7f:	66 06                	pushw  es
    1c81:	59                   	pop    ecx
    1c82:	00 02                	add    BYTE PTR [edx],al
    1c84:	04 01                	add    al,0x1
    1c86:	06                   	push   es
    1c87:	74 06                	je     1c8f <sysEnter_Vector-0x12e371>
    1c89:	75 91                	jne    1c1c <sysEnter_Vector-0x12e3e4>
    1c8b:	3d 76 67 00 02       	cmp    eax,0x2006776
    1c90:	04 01                	add    al,0x1
    1c92:	06                   	push   es
    1c93:	58                   	pop    eax
    1c94:	00 02                	add    BYTE PTR [edx],al
    1c96:	04 02                	add    al,0x2
    1c98:	74 00                	je     1c9a <sysEnter_Vector-0x12e366>
    1c9a:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1c9d:	58                   	pop    eax
    1c9e:	06                   	push   es
    1c9f:	03 13                	add    edx,DWORD PTR [ebx]
    1ca1:	3c 00                	cmp    al,0x0
    1ca3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1ca6:	06                   	push   es
    1ca7:	66                   	data16
    1ca8:	00 02                	add    BYTE PTR [edx],al
    1caa:	04 02                	add    al,0x2
    1cac:	74 00                	je     1cae <sysEnter_Vector-0x12e352>
    1cae:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1cb1:	06                   	push   es
    1cb2:	59                   	pop    ecx
    1cb3:	00 02                	add    BYTE PTR [edx],al
    1cb5:	04 04                	add    al,0x4
    1cb7:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1cbd:	f3 9f                	repz lahf 
    1cbf:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1cc3:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1cc6:	06                   	push   es
    1cc7:	58                   	pop    eax
    1cc8:	00 02                	add    BYTE PTR [edx],al
    1cca:	04 03                	add    al,0x3
    1ccc:	58                   	pop    eax
    1ccd:	00 02                	add    BYTE PTR [edx],al
    1ccf:	04 04                	add    al,0x4
    1cd1:	74 00                	je     1cd3 <sysEnter_Vector-0x12e32d>
    1cd3:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cd6:	58                   	pop    eax
    1cd7:	06                   	push   es
    1cd8:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1cdb:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1cde:	06                   	push   es
    1cdf:	66                   	data16
    1ce0:	00 02                	add    BYTE PTR [edx],al
    1ce2:	04 02                	add    al,0x2
    1ce4:	58                   	pop    eax
    1ce5:	00 02                	add    BYTE PTR [edx],al
    1ce7:	04 03                	add    al,0x3
    1ce9:	58                   	pop    eax
    1cea:	06                   	push   es
    1ceb:	59                   	pop    ecx
    1cec:	76 59                	jbe    1d47 <sysEnter_Vector-0x12e2b9>
    1cee:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1cf2:	03 10                	add    edx,DWORD PTR [eax]
    1cf4:	ac                   	lods   al,BYTE PTR ds:[esi]
    1cf5:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1cf8:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1cfb:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1cfe:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1d01:	06                   	push   es
    1d02:	66                   	data16
    1d03:	00 02                	add    BYTE PTR [edx],al
    1d05:	04 02                	add    al,0x2
    1d07:	74 00                	je     1d09 <sysEnter_Vector-0x12e2f7>
    1d09:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1d0c:	58                   	pop    eax
    1d0d:	06                   	push   es
    1d0e:	4b                   	dec    ebx
    1d0f:	67 2f                	addr16 das 
    1d11:	67 00 02             	add    BYTE PTR [bp+si],al
    1d14:	04 01                	add    al,0x1
    1d16:	06                   	push   es
    1d17:	66                   	data16
    1d18:	00 02                	add    BYTE PTR [edx],al
    1d1a:	04 02                	add    al,0x2
    1d1c:	58                   	pop    eax
    1d1d:	00 02                	add    BYTE PTR [edx],al
    1d1f:	04 04                	add    al,0x4
    1d21:	3c 06                	cmp    al,0x6
    1d23:	59                   	pop    ecx
    1d24:	2f                   	das    
    1d25:	02 08                	add    cl,BYTE PTR [eax]
    1d27:	00 01                	add    BYTE PTR [ecx],al
    1d29:	01 d9                	add    ecx,ebx
    1d2b:	00 00                	add    BYTE PTR [eax],al
    1d2d:	00 02                	add    BYTE PTR [edx],al
    1d2f:	00 a7 00 00 00 01    	add    BYTE PTR [edi+0x1000000],ah
    1d35:	01 fb                	add    ebx,edi
    1d37:	0e                   	push   cs
    1d38:	0d 00 01 01 01       	or     eax,0x1010100
    1d3d:	01 00                	add    DWORD PTR [eax],eax
    1d3f:	00 00                	add    BYTE PTR [eax],al
    1d41:	01 00                	add    DWORD PTR [eax],eax
    1d43:	00 01                	add    BYTE PTR [ecx],al
    1d45:	73 72                	jae    1db9 <sysEnter_Vector-0x12e247>
    1d47:	63 2f                	arpl   WORD PTR [edi],bp
    1d49:	73 74                	jae    1dbf <sysEnter_Vector-0x12e241>
    1d4b:	72 69                	jb     1db6 <sysEnter_Vector-0x12e24a>
    1d4d:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1d4e:	67 73 00             	addr16 jae 1d51 <sysEnter_Vector-0x12e2af>
    1d51:	2f                   	das    
    1d52:	68 6f 6d 65 2f       	push   0x2f656d6f
    1d57:	79 6f                	jns    1dc8 <sysEnter_Vector-0x12e238>
    1d59:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1d60:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1d63:	73 73                	jae    1dd8 <sysEnter_Vector-0x12e228>
    1d65:	2f                   	das    
    1d66:	6c                   	ins    BYTE PTR es:[edi],dx
    1d67:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1d6e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1d74:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1d7a:	78 2d                	js     1da9 <sysEnter_Vector-0x12e257>
    1d7c:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1d7e:	75 2f                	jne    1daf <sysEnter_Vector-0x12e251>
    1d80:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1d85:	2f                   	das    
    1d86:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1d8d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1d90:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1d94:	65 00 00             	add    BYTE PTR gs:[eax],al
    1d97:	73 74                	jae    1e0d <sysEnter_Vector-0x12e1f3>
    1d99:	72 74                	jb     1e0f <sysEnter_Vector-0x12e1f1>
    1d9b:	72 69                	jb     1e06 <sysEnter_Vector-0x12e1fa>
    1d9d:	6d                   	ins    DWORD PTR es:[edi],dx
    1d9e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1da1:	01 00                	add    DWORD PTR [eax],eax
    1da3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1da6:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1dad:	63 
    1dae:	2e                   	cs
    1daf:	68 00 02 00 00       	push   0x200
    1db4:	6d                   	ins    DWORD PTR es:[edi],dx
    1db5:	61                   	popa   
    1db6:	6c                   	ins    BYTE PTR es:[edi],dx
    1db7:	6c                   	ins    BYTE PTR es:[edi],dx
    1db8:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1db9:	63 2e                	arpl   WORD PTR [esi],bp
    1dbb:	68 00 03 00 00       	push   0x300
    1dc0:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1dc7:	03 00                	add    eax,DWORD PTR [eax]
    1dc9:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1dcd:	43                   	inc    ebx
    1dce:	68 72 69 73 4f       	push   0x4f736972
    1dd3:	53                   	push   ebx
    1dd4:	2e                   	cs
    1dd5:	68 00 03 00 00       	push   0x300
    1dda:	00 00                	add    BYTE PTR [eax],al
    1ddc:	05 02 34 38 00       	add    eax,0x383402
    1de1:	9f                   	lahf   
    1de2:	15 08 13 bf 30       	adc    eax,0x30bf1308
    1de7:	48                   	dec    eax
    1de8:	b3 08                	mov    bl,0x8
    1dea:	9f                   	lahf   
    1deb:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1df1:	06                   	push   es
    1df2:	82                   	(bad)  
    1df3:	06                   	push   es
    1df4:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1df5:	84 00                	test   BYTE PTR [eax],al
    1df7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dfa:	06                   	push   es
    1dfb:	20 06                	and    BYTE PTR [esi],al
    1dfd:	08 ca                	or     dl,cl
    1dff:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1e05:	01 01                	add    DWORD PTR [ecx],eax
    1e07:	e8 00 00 00 02       	call   2001e0c <sysEnter_Vector+0x1ed1e0c>
    1e0c:	00 ae 00 00 00 01    	add    BYTE PTR [esi+0x1000000],ch
    1e12:	01 fb                	add    ebx,edi
    1e14:	0e                   	push   cs
    1e15:	0d 00 01 01 01       	or     eax,0x1010100
    1e1a:	01 00                	add    DWORD PTR [eax],eax
    1e1c:	00 00                	add    BYTE PTR [eax],al
    1e1e:	01 00                	add    DWORD PTR [eax],eax
    1e20:	00 01                	add    BYTE PTR [ecx],al
    1e22:	73 72                	jae    1e96 <sysEnter_Vector-0x12e16a>
    1e24:	63 00                	arpl   WORD PTR [eax],ax
    1e26:	2f                   	das    
    1e27:	68 6f 6d 65 2f       	push   0x2f656d6f
    1e2c:	79 6f                	jns    1e9d <sysEnter_Vector-0x12e163>
    1e2e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1e35:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1e38:	73 73                	jae    1ead <sysEnter_Vector-0x12e153>
    1e3a:	2f                   	das    
    1e3b:	6c                   	ins    BYTE PTR es:[edi],dx
    1e3c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1e43:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1e49:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1e4f:	78 2d                	js     1e7e <sysEnter_Vector-0x12e182>
    1e51:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1e53:	75 2f                	jne    1e84 <sysEnter_Vector-0x12e17c>
    1e55:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1e5a:	2f                   	das    
    1e5b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1e62:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1e65:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1e69:	65 00 00             	add    BYTE PTR gs:[eax],al
    1e6c:	73 74                	jae    1ee2 <sysEnter_Vector-0x12e11e>
    1e6e:	72 72                	jb     1ee2 <sysEnter_Vector-0x12e11e>
    1e70:	65                   	gs
    1e71:	70 6c                	jo     1edf <sysEnter_Vector-0x12e121>
    1e73:	61                   	popa   
    1e74:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1e77:	63 00                	arpl   WORD PTR [eax],ax
    1e79:	01 00                	add    DWORD PTR [eax],eax
    1e7b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1e7e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1e85:	63 
    1e86:	2e                   	cs
    1e87:	68 00 02 00 00       	push   0x200
    1e8c:	73 74                	jae    1f02 <sysEnter_Vector-0x12e0fe>
    1e8e:	64                   	fs
    1e8f:	64                   	fs
    1e90:	65                   	gs
    1e91:	66                   	data16
    1e92:	2e                   	cs
    1e93:	68 00 02 00 00       	push   0x200
    1e98:	6d                   	ins    DWORD PTR es:[edi],dx
    1e99:	61                   	popa   
    1e9a:	6c                   	ins    BYTE PTR es:[edi],dx
    1e9b:	6c                   	ins    BYTE PTR es:[edi],dx
    1e9c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1e9d:	63 2e                	arpl   WORD PTR [esi],bp
    1e9f:	68 00 03 00 00       	push   0x300
    1ea4:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1eab:	03 00                	add    eax,DWORD PTR [eax]
    1ead:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1eb1:	43                   	inc    ebx
    1eb2:	68 72 69 73 4f       	push   0x4f736972
    1eb7:	53                   	push   ebx
    1eb8:	2e                   	cs
    1eb9:	68 00 03 00 00       	push   0x300
    1ebe:	00 00                	add    BYTE PTR [eax],al
    1ec0:	05 02 ec 38 00       	add    eax,0x38ec02
    1ec5:	9f                   	lahf   
    1ec6:	03 0a                	add    ecx,DWORD PTR [edx]
    1ec8:	01 08                	add    DWORD PTR [eax],ecx
    1eca:	2f                   	das    
    1ecb:	08 3e                	or     BYTE PTR [esi],bh
    1ecd:	08 14 77             	or     BYTE PTR [edi+esi*2],dl
    1ed0:	5a                   	pop    edx
    1ed1:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1ed4:	cb                   	retf   
    1ed5:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1ed8:	2a 13                	sub    dl,BYTE PTR [ebx]
    1eda:	08 3f                	or     BYTE PTR [edi],bh
    1edc:	02 28                	add    ch,BYTE PTR [eax]
    1ede:	13 03                	adc    eax,DWORD PTR [ebx]
    1ee0:	72 08                	jb     1eea <sysEnter_Vector-0x12e116>
    1ee2:	12 03                	adc    al,BYTE PTR [ebx]
    1ee4:	12 08                	adc    cl,BYTE PTR [eax]
    1ee6:	c8 08 68 3d          	enter  0x6808,0x3d
    1eea:	77 f3                	ja     1edf <sysEnter_Vector-0x12e121>
    1eec:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1ef2:	01 f3                	add    ebx,esi
    1ef4:	00 00                	add    BYTE PTR [eax],al
    1ef6:	00 02                	add    BYTE PTR [edx],al
    1ef8:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    1efe:	01 fb                	add    ebx,edi
    1f00:	0e                   	push   cs
    1f01:	0d 00 01 01 01       	or     eax,0x1010100
    1f06:	01 00                	add    DWORD PTR [eax],eax
    1f08:	00 00                	add    BYTE PTR [eax],al
    1f0a:	01 00                	add    DWORD PTR [eax],eax
    1f0c:	00 01                	add    BYTE PTR [ecx],al
    1f0e:	73 72                	jae    1f82 <sysEnter_Vector-0x12e07e>
    1f10:	63 00                	arpl   WORD PTR [eax],ax
    1f12:	2f                   	das    
    1f13:	68 6f 6d 65 2f       	push   0x2f656d6f
    1f18:	79 6f                	jns    1f89 <sysEnter_Vector-0x12e077>
    1f1a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1f21:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1f24:	73 73                	jae    1f99 <sysEnter_Vector-0x12e067>
    1f26:	2f                   	das    
    1f27:	6c                   	ins    BYTE PTR es:[edi],dx
    1f28:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1f2f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1f35:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1f3b:	78 2d                	js     1f6a <sysEnter_Vector-0x12e096>
    1f3d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1f3f:	75 2f                	jne    1f70 <sysEnter_Vector-0x12e090>
    1f41:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1f46:	2f                   	das    
    1f47:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1f4e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1f51:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1f55:	65 00 00             	add    BYTE PTR gs:[eax],al
    1f58:	73 74                	jae    1fce <sysEnter_Vector-0x12e032>
    1f5a:	72 73                	jb     1fcf <sysEnter_Vector-0x12e031>
    1f5c:	74 72                	je     1fd0 <sysEnter_Vector-0x12e030>
    1f5e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1f61:	01 00                	add    DWORD PTR [eax],eax
    1f63:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1f66:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1f6d:	63 
    1f6e:	2e                   	cs
    1f6f:	68 00 02 00 00       	push   0x200
    1f74:	6d                   	ins    DWORD PTR es:[edi],dx
    1f75:	61                   	popa   
    1f76:	6c                   	ins    BYTE PTR es:[edi],dx
    1f77:	6c                   	ins    BYTE PTR es:[edi],dx
    1f78:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1f79:	63 2e                	arpl   WORD PTR [esi],bp
    1f7b:	68 00 03 00 00       	push   0x300
    1f80:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1f87:	03 00                	add    eax,DWORD PTR [eax]
    1f89:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    1f8d:	43                   	inc    ebx
    1f8e:	68 72 69 73 4f       	push   0x4f736972
    1f93:	53                   	push   ebx
    1f94:	2e                   	cs
    1f95:	68 00 03 00 00       	push   0x300
    1f9a:	00 00                	add    BYTE PTR [eax],al
    1f9c:	05 02 58 3a 00       	add    eax,0x3a5802
    1fa1:	9f                   	lahf   
    1fa2:	03 33                	add    esi,DWORD PTR [ebx]
    1fa4:	01 08                	add    DWORD PTR [eax],ecx
    1fa6:	27                   	daa    
    1fa7:	68 3d 75 5b c9       	push   0xc95b753d
    1fac:	c9                   	leave  
    1fad:	5b                   	pop    ebx
    1fae:	3e                   	ds
    1faf:	75 5a                	jne    200b <sysEnter_Vector-0x12dff5>
    1fb1:	c9                   	leave  
    1fb2:	59                   	pop    ecx
    1fb3:	08 3f                	or     BYTE PTR [edi],bh
    1fb5:	2c 23                	sub    al,0x23
    1fb7:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1fba:	1c 00                	sbb    al,0x0
    1fbc:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1fbf:	06                   	push   es
    1fc0:	4a                   	dec    edx
    1fc1:	06                   	push   es
    1fc2:	03 13                	add    edx,DWORD PTR [ebx]
    1fc4:	9e                   	sahf   
    1fc5:	59                   	pop    ecx
    1fc6:	77 ec                	ja     1fb4 <sysEnter_Vector-0x12e04c>
    1fc8:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1fcd:	75 5a                	jne    2029 <sysEnter_Vector-0x12dfd7>
    1fcf:	08 3f                	or     BYTE PTR [edi],bh
    1fd1:	2c 23                	sub    al,0x23
    1fd3:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1fd6:	1e                   	push   ds
    1fd7:	00 02                	add    BYTE PTR [edx],al
    1fd9:	04 01                	add    al,0x1
    1fdb:	06                   	push   es
    1fdc:	4a                   	dec    edx
    1fdd:	06                   	push   es
    1fde:	03 0f                	add    ecx,DWORD PTR [edi]
    1fe0:	9e                   	sahf   
    1fe1:	59                   	pop    ecx
    1fe2:	4d                   	dec    ebp
    1fe3:	c9                   	leave  
    1fe4:	d7                   	xlat   BYTE PTR ds:[ebx]
    1fe5:	02 02                	add    al,BYTE PTR [edx]
    1fe7:	00 01                	add    BYTE PTR [ecx],al
    1fe9:	01 4c 03 00          	add    DWORD PTR [ebx+eax*1+0x0],ecx
    1fed:	00 02                	add    BYTE PTR [edx],al
    1fef:	00 d6                	add    dh,dl
    1ff1:	00 00                	add    BYTE PTR [eax],al
    1ff3:	00 01                	add    BYTE PTR [ecx],al
    1ff5:	01 fb                	add    ebx,edi
    1ff7:	0e                   	push   cs
    1ff8:	0d 00 01 01 01       	or     eax,0x1010100
    1ffd:	01 00                	add    DWORD PTR [eax],eax
    1fff:	00 00                	add    BYTE PTR [eax],al
    2001:	01 00                	add    DWORD PTR [eax],eax
    2003:	00 01                	add    BYTE PTR [ecx],al
    2005:	73 72                	jae    2079 <sysEnter_Vector-0x12df87>
    2007:	63 00                	arpl   WORD PTR [eax],ax
    2009:	2f                   	das    
    200a:	68 6f 6d 65 2f       	push   0x2f656d6f
    200f:	79 6f                	jns    2080 <sysEnter_Vector-0x12df80>
    2011:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    2018:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    201b:	73 73                	jae    2090 <sysEnter_Vector-0x12df70>
    201d:	2f                   	das    
    201e:	6c                   	ins    BYTE PTR es:[edi],dx
    201f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    2026:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    202c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    2032:	78 2d                	js     2061 <sysEnter_Vector-0x12df9f>
    2034:	67 6e                	outs   dx,BYTE PTR ds:[si]
    2036:	75 2f                	jne    2067 <sysEnter_Vector-0x12df99>
    2038:	35 2e 33 2e 30       	xor    eax,0x302e332e
    203d:	2f                   	das    
    203e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    2045:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    2048:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    204c:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    204f:	2e                   	cs
    2050:	2f                   	das    
    2051:	2e                   	cs
    2052:	2e                   	cs
    2053:	2f                   	das    
    2054:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    2058:	6a 2f                	push   0x2f
    205a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    205d:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    2064:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2065:	65                   	gs
    2066:	6c                   	ins    BYTE PTR es:[edi],dx
    2067:	2f                   	das    
    2068:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    206f:	00 00                	add    BYTE PTR [eax],al
    2071:	74 69                	je     20dc <sysEnter_Vector-0x12df24>
    2073:	6d                   	ins    DWORD PTR es:[edi],dx
    2074:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    2078:	01 00                	add    DWORD PTR [eax],eax
    207a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    207d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    2084:	63 
    2085:	2e                   	cs
    2086:	68 00 02 00 00       	push   0x200
    208b:	74 69                	je     20f6 <sysEnter_Vector-0x12df0a>
    208d:	6d                   	ins    DWORD PTR es:[edi],dx
    208e:	65                   	gs
    208f:	2e                   	cs
    2090:	68 00 03 00 00       	push   0x300
    2095:	6d                   	ins    DWORD PTR es:[edi],dx
    2096:	61                   	popa   
    2097:	6c                   	ins    BYTE PTR es:[edi],dx
    2098:	6c                   	ins    BYTE PTR es:[edi],dx
    2099:	6f                   	outs   dx,DWORD PTR ds:[esi]
    209a:	63 2e                	arpl   WORD PTR [esi],bp
    209c:	68 00 03 00 00       	push   0x300
    20a1:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    20a8:	03 00                	add    eax,DWORD PTR [eax]
    20aa:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
    20ae:	43                   	inc    ebx
    20af:	68 72 69 73 4f       	push   0x4f736972
    20b4:	53                   	push   ebx
    20b5:	2e                   	cs
    20b6:	68 00 03 00 00       	push   0x300
    20bb:	73 79                	jae    2136 <sysEnter_Vector-0x12deca>
    20bd:	73 63                	jae    2122 <sysEnter_Vector-0x12dede>
    20bf:	61                   	popa   
    20c0:	6c                   	ins    BYTE PTR es:[edi],dx
    20c1:	6c                   	ins    BYTE PTR es:[edi],dx
    20c2:	73 2e                	jae    20f2 <sysEnter_Vector-0x12df0e>
    20c4:	68 00 04 00 00       	push   0x400
    20c9:	00 00                	add    BYTE PTR [eax],al
    20cb:	05 02 84 3b 00       	add    eax,0x3b8402
    20d0:	9f                   	lahf   
    20d1:	03 17                	add    edx,DWORD PTR [edi]
    20d3:	01 08                	add    DWORD PTR [eax],ecx
    20d5:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    20d8:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    20de:	76 02                	jbe    20e2 <sysEnter_Vector-0x12df1e>
    20e0:	24 13                	and    al,0x13
    20e2:	08 22                	or     BYTE PTR [edx],ah
    20e4:	02 2e                	add    ch,BYTE PTR [esi]
    20e6:	13 02                	adc    eax,DWORD PTR [edx]
    20e8:	2f                   	das    
    20e9:	13 08                	adc    ecx,DWORD PTR [eax]
    20eb:	67 02 2d             	add    ch,BYTE PTR [di]
    20ee:	13 2f                	adc    ebp,DWORD PTR [edi]
    20f0:	00 02                	add    BYTE PTR [edx],al
    20f2:	04 01                	add    al,0x1
    20f4:	06                   	push   es
    20f5:	9e                   	sahf   
    20f6:	00 02                	add    BYTE PTR [edx],al
    20f8:	04 04                	add    al,0x4
    20fa:	02 23                	add    ah,BYTE PTR [ebx]
    20fc:	12 00                	adc    al,BYTE PTR [eax]
    20fe:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2105:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2108:	74 00                	je     210a <sysEnter_Vector-0x12def6>
    210a:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    210d:	58                   	pop    eax
    210e:	00 02                	add    BYTE PTR [edx],al
    2110:	04 08                	add    al,0x8
    2112:	06                   	push   es
    2113:	3d 48 00 02 04       	cmp    eax,0x4020048
    2118:	01 06                	add    DWORD PTR [esi],eax
    211a:	9e                   	sahf   
    211b:	00 02                	add    BYTE PTR [edx],al
    211d:	04 04                	add    al,0x4
    211f:	02 23                	add    ah,BYTE PTR [ebx]
    2121:	12 00                	adc    al,BYTE PTR [eax]
    2123:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    212a:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    212d:	74 00                	je     212f <sysEnter_Vector-0x12ded1>
    212f:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2132:	58                   	pop    eax
    2133:	06                   	push   es
    2134:	94                   	xchg   esp,eax
    2135:	e5 91                	in     eax,0x91
    2137:	9f                   	lahf   
    2138:	59                   	pop    ecx
    2139:	00 02                	add    BYTE PTR [edx],al
    213b:	04 01                	add    al,0x1
    213d:	06                   	push   es
    213e:	9e                   	sahf   
    213f:	00 02                	add    BYTE PTR [edx],al
    2141:	04 04                	add    al,0x4
    2143:	02 23                	add    ah,BYTE PTR [ebx]
    2145:	12 00                	adc    al,BYTE PTR [eax]
    2147:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    214e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2151:	74 00                	je     2153 <sysEnter_Vector-0x12dead>
    2153:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2156:	58                   	pop    eax
    2157:	00 02                	add    BYTE PTR [edx],al
    2159:	04 08                	add    al,0x8
    215b:	06                   	push   es
    215c:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    2162:	01 06                	add    DWORD PTR [esi],eax
    2164:	9e                   	sahf   
    2165:	00 02                	add    BYTE PTR [edx],al
    2167:	04 04                	add    al,0x4
    2169:	02 23                	add    ah,BYTE PTR [ebx]
    216b:	12 00                	adc    al,BYTE PTR [eax]
    216d:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    2174:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2177:	74 00                	je     2179 <sysEnter_Vector-0x12de87>
    2179:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    217c:	58                   	pop    eax
    217d:	06                   	push   es
    217e:	08 f6                	or     dh,dh
    2180:	d7                   	xlat   BYTE PTR ds:[ebx]
    2181:	9f                   	lahf   
    2182:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    2187:	f5                   	cmc    
    2188:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
    218b:	2f                   	das    
    218c:	31 f5                	xor    ebp,esi
    218e:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    2194:	30 08                	xor    BYTE PTR [eax],cl
    2196:	44                   	inc    esp
    2197:	02 2e                	add    ch,BYTE PTR [esi]
    2199:	13 02                	adc    eax,DWORD PTR [edx]
    219b:	3a 13                	cmp    dl,BYTE PTR [ebx]
    219d:	91                   	xchg   ecx,eax
    219e:	c9                   	leave  
    219f:	e6 02                	out    0x2,al
    21a1:	2f                   	das    
    21a2:	13 02                	adc    eax,DWORD PTR [edx]
    21a4:	3c 13                	cmp    al,0x13
    21a6:	9f                   	lahf   
    21a7:	e5 e6                	in     eax,0xe6
    21a9:	08 c9                	or     cl,cl
    21ab:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    21ae:	9f                   	lahf   
    21af:	e5 4c                	in     eax,0x4c
    21b1:	02 29                	add    ch,BYTE PTR [ecx]
    21b3:	13 02                	adc    eax,DWORD PTR [edx]
    21b5:	2b 13                	sub    edx,DWORD PTR [ebx]
    21b7:	9f                   	lahf   
    21b8:	e5 e6                	in     eax,0xe6
    21ba:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    21bf:	a0 00 02 04 01       	mov    al,ds:0x1040200
    21c4:	06                   	push   es
    21c5:	c8 00 02 04          	enter  0x200,0x4
    21c9:	04 02                	add    al,0x2
    21cb:	2c 12                	sub    al,0x12
    21cd:	00 02                	add    BYTE PTR [edx],al
    21cf:	04 05                	add    al,0x5
    21d1:	02 2f                	add    ch,BYTE PTR [edi]
    21d3:	12 00                	adc    al,BYTE PTR [eax]
    21d5:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21d8:	74 00                	je     21da <sysEnter_Vector-0x12de26>
    21da:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    21dd:	58                   	pop    eax
    21de:	06                   	push   es
    21df:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    21e5:	04 01                	add    al,0x1
    21e7:	06                   	push   es
    21e8:	c8 00 02 04          	enter  0x200,0x4
    21ec:	04 02                	add    al,0x2
    21ee:	2c 12                	sub    al,0x12
    21f0:	00 02                	add    BYTE PTR [edx],al
    21f2:	04 05                	add    al,0x5
    21f4:	02 2f                	add    ch,BYTE PTR [edi]
    21f6:	12 00                	adc    al,BYTE PTR [eax]
    21f8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    21fb:	74 00                	je     21fd <sysEnter_Vector-0x12de03>
    21fd:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2200:	58                   	pop    eax
    2201:	00 02                	add    BYTE PTR [edx],al
    2203:	04 08                	add    al,0x8
    2205:	06                   	push   es
    2206:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    220c:	00 02                	add    BYTE PTR [edx],al
    220e:	04 01                	add    al,0x1
    2210:	06                   	push   es
    2211:	c8 00 02 04          	enter  0x200,0x4
    2215:	04 02                	add    al,0x2
    2217:	2c 12                	sub    al,0x12
    2219:	00 02                	add    BYTE PTR [edx],al
    221b:	04 05                	add    al,0x5
    221d:	02 2f                	add    ch,BYTE PTR [edi]
    221f:	12 00                	adc    al,BYTE PTR [eax]
    2221:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2224:	74 00                	je     2226 <sysEnter_Vector-0x12ddda>
    2226:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    2229:	58                   	pop    eax
    222a:	06                   	push   es
    222b:	08 f9                	or     cl,bh
    222d:	bb 75 00 02 04       	mov    ebx,0x4020075
    2232:	01 06                	add    DWORD PTR [esi],eax
    2234:	08 2e                	or     BYTE PTR [esi],ch
    2236:	06                   	push   es
    2237:	9f                   	lahf   
    2238:	75 75                	jne    22af <sysEnter_Vector-0x12dd51>
    223a:	7b d8                	jnp    2214 <sysEnter_Vector-0x12ddec>
    223c:	00 02                	add    BYTE PTR [edx],al
    223e:	04 01                	add    al,0x1
    2240:	06                   	push   es
    2241:	c8 06 75 e5          	enter  0x7506,0xe5
    2245:	00 02                	add    BYTE PTR [edx],al
    2247:	04 01                	add    al,0x1
    2249:	06                   	push   es
    224a:	02 22                	add    ah,BYTE PTR [edx]
    224c:	12 06                	adc    al,BYTE PTR [esi]
    224e:	4b                   	dec    ebx
    224f:	00 02                	add    BYTE PTR [edx],al
    2251:	04 01                	add    al,0x1
    2253:	06                   	push   es
    2254:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    225a:	02 22                	add    ah,BYTE PTR [edx]
    225c:	12 00                	adc    al,BYTE PTR [eax]
    225e:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    2261:	74 00                	je     2263 <sysEnter_Vector-0x12dd9d>
    2263:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2266:	58                   	pop    eax
    2267:	00 02                	add    BYTE PTR [edx],al
    2269:	04 06                	add    al,0x6
    226b:	06                   	push   es
    226c:	59                   	pop    ecx
    226d:	00 02                	add    BYTE PTR [edx],al
    226f:	04 01                	add    al,0x1
    2271:	06                   	push   es
    2272:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    2275:	00 02                	add    BYTE PTR [edx],al
    2277:	04 03                	add    al,0x3
    2279:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    227c:	00 02                	add    BYTE PTR [edx],al
    227e:	04 04                	add    al,0x4
    2280:	74 00                	je     2282 <sysEnter_Vector-0x12dd7e>
    2282:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    2285:	58                   	pop    eax
    2286:	00 02                	add    BYTE PTR [edx],al
    2288:	04 06                	add    al,0x6
    228a:	06                   	push   es
    228b:	59                   	pop    ecx
    228c:	00 02                	add    BYTE PTR [edx],al
    228e:	04 01                	add    al,0x1
    2290:	06                   	push   es
    2291:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    2294:	00 02                	add    BYTE PTR [edx],al
    2296:	04 03                	add    al,0x3
    2298:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    229b:	00 02                	add    BYTE PTR [edx],al
    229d:	04 04                	add    al,0x4
    229f:	74 00                	je     22a1 <sysEnter_Vector-0x12dd5f>
    22a1:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22a4:	58                   	pop    eax
    22a5:	00 02                	add    BYTE PTR [edx],al
    22a7:	04 06                	add    al,0x6
    22a9:	06                   	push   es
    22aa:	5a                   	pop    edx
    22ab:	00 02                	add    BYTE PTR [edx],al
    22ad:	04 06                	add    al,0x6
    22af:	c9                   	leave  
    22b0:	2f                   	das    
    22b1:	00 02                	add    BYTE PTR [edx],al
    22b3:	04 01                	add    al,0x1
    22b5:	06                   	push   es
    22b6:	9e                   	sahf   
    22b7:	00 02                	add    BYTE PTR [edx],al
    22b9:	04 04                	add    al,0x4
    22bb:	02 23                	add    ah,BYTE PTR [ebx]
    22bd:	12 00                	adc    al,BYTE PTR [eax]
    22bf:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    22c6:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    22c9:	74 00                	je     22cb <sysEnter_Vector-0x12dd35>
    22cb:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    22ce:	58                   	pop    eax
    22cf:	00 02                	add    BYTE PTR [edx],al
    22d1:	04 08                	add    al,0x8
    22d3:	06                   	push   es
    22d4:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    22d7:	e8 bb 00 02 04       	call   4022397 <sysEnter_Vector+0x3ef2397>
    22dc:	01 06                	add    DWORD PTR [esi],eax
    22de:	ba 06 4b 68 91       	mov    edx,0x91684b06
    22e3:	02 31                	add    dh,BYTE PTR [ecx]
    22e5:	14 02                	adc    al,0x2
    22e7:	2c 14                	sub    al,0x14
    22e9:	00 02                	add    BYTE PTR [edx],al
    22eb:	04 01                	add    al,0x1
    22ed:	06                   	push   es
    22ee:	02 29                	add    ch,BYTE PTR [ecx]
    22f0:	12 06                	adc    al,BYTE PTR [esi]
    22f2:	4b                   	dec    ebx
    22f3:	bd 00 02 04 01       	mov    ebp,0x1040200
    22f8:	06                   	push   es
    22f9:	ba 00 02 04 03       	mov    edx,0x3040200
    22fe:	06                   	push   es
    22ff:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    2302:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    2305:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    230c:	77 00                	ja     230e <sysEnter_Vector-0x12dcf2>
    230e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    2311:	06                   	push   es
    2312:	82                   	(bad)  
    2313:	06                   	push   es
    2314:	4b                   	dec    ebx
    2315:	68 00 02 04 01       	push   0x1040200
    231a:	06                   	push   es
    231b:	66 06                	pushw  es
    231d:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    2323:	08 f3                	or     bl,dh
    2325:	67 08 14             	or     BYTE PTR [si],dl
    2328:	00 02                	add    BYTE PTR [edx],al
    232a:	04 01                	add    al,0x1
    232c:	e5 77                	in     eax,0x77
    232e:	08 21                	or     BYTE PTR [ecx],ah
    2330:	08 2f                	or     BYTE PTR [edi],ch
    2332:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    2338:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	75 69                	jne    79 <sysEnter_Vector-0x12ff87>
  10:	6e                   	outs   dx,BYTE PTR ds:[esi]
  11:	74 33                	je     46 <sysEnter_Vector-0x12ffba>
  13:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  16:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
  19:	72 63                	jb     7e <sysEnter_Vector-0x12ff82>
  1b:	68 72 00 2f 68       	push   0x682f0072
  20:	6f                   	outs   dx,DWORD PTR ds:[esi]
  21:	6d                   	ins    DWORD PTR es:[edi],dx
  22:	65                   	gs
  23:	2f                   	das    
  24:	79 6f                	jns    95 <sysEnter_Vector-0x12ff6b>
  26:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2e:	73 2f                	jae    5f <sysEnter_Vector-0x12ffa1>
  30:	61                   	popa   
  31:	70 72                	jo     a5 <sysEnter_Vector-0x12ff5b>
  33:	6f                   	outs   dx,DWORD PTR ds:[esi]
  34:	6a 2f                	push   0x2f
  36:	6c                   	ins    BYTE PTR es:[edi],dx
  37:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  3e:	4f                   	dec    edi
  3f:	53                   	push   ebx
  40:	00 70 72             	add    BYTE PTR [eax+0x72],dh
  43:	6f                   	outs   dx,DWORD PTR ds:[esi]
  44:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  47:	73 45                	jae    8e <sysEnter_Vector-0x12ff72>
  49:	6e                   	outs   dx,BYTE PTR ds:[esi]
  4a:	76 70                	jbe    bc <sysEnter_Vector-0x12ff44>
  4c:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
  4f:	6e                   	outs   dx,BYTE PTR ds:[esi]
  50:	74 70                	je     c2 <sysEnter_Vector-0x12ff3e>
  52:	74 72                	je     c6 <sysEnter_Vector-0x12ff3a>
  54:	5f                   	pop    edi
  55:	74 00                	je     57 <sysEnter_Vector-0x12ffa9>
  57:	6c                   	ins    BYTE PTR es:[edi],dx
  58:	6f                   	outs   dx,DWORD PTR ds:[esi]
  59:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5a:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
  5f:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  63:	73 69                	jae    ce <sysEnter_Vector-0x12ff32>
  65:	67 6e                	outs   dx,BYTE PTR ds:[si]
  67:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  6c:	74 00                	je     6e <sysEnter_Vector-0x12ff92>
  6e:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  75:	43                   	inc    ebx
  76:	6c                   	ins    BYTE PTR es:[edi],dx
  77:	6f                   	outs   dx,DWORD PTR ds:[esi]
  78:	73 65                	jae    df <sysEnter_Vector-0x12ff21>
  7a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
  7d:	61                   	popa   
  7e:	70 45                	jo     c5 <sysEnter_Vector-0x12ff3b>
  80:	6e                   	outs   dx,BYTE PTR ds:[esi]
  81:	64 00 75 6e          	add    BYTE PTR fs:[ebp+0x6e],dh
  85:	73 69                	jae    f0 <sysEnter_Vector-0x12ff10>
  87:	67 6e                	outs   dx,BYTE PTR ds:[si]
  89:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  8e:	61                   	popa   
  8f:	72 00                	jb     91 <sysEnter_Vector-0x12ff6f>
  91:	66 69 6c 65 73 54 6f 	imul   bp,WORD PTR [ebp+eiz*2+0x73],0x6f54
  98:	43                   	inc    ebx
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9b:	73 65                	jae    102 <sysEnter_Vector-0x12fefe>
  9d:	43                   	inc    ebx
  9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
  9f:	75 6e                	jne    10f <sysEnter_Vector-0x12fef1>
  a1:	74 00                	je     a3 <sysEnter_Vector-0x12ff5d>
  a3:	68 65 61 70 42       	push   0x42706165
  a8:	61                   	popa   
  a9:	73 65                	jae    110 <sysEnter_Vector-0x12fef0>
  ab:	00 47 4e             	add    BYTE PTR [edi+0x4e],al
  ae:	55                   	push   ebp
  af:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  b2:	31 20                	xor    DWORD PTR [eax],esp
  b4:	35 2e 33 2e 30       	xor    eax,0x302e332e
  b9:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
  bf:	3d 69 6e 74 65       	cmp    eax,0x65746e69
  c4:	6c                   	ins    BYTE PTR es:[edi],dx
  c5:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
  cb:	65                   	gs
  cc:	3d 67 65 6e 65       	cmp    eax,0x656e6567
  d1:	72 69                	jb     13c <sysEnter_Vector-0x12fec4>
  d3:	63 20                	arpl   WORD PTR [eax],sp
  d5:	2d 6d 61 72 63       	sub    eax,0x6372616d
  da:	68 3d 70 65 6e       	push   0x6e65703d
  df:	74 69                	je     14a <sysEnter_Vector-0x12feb6>
  e1:	75 6d                	jne    150 <sysEnter_Vector-0x12feb0>
  e3:	70 72                	jo     157 <sysEnter_Vector-0x12fea9>
  e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
  e6:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
  ec:	66                   	data16
  ed:	72 65                	jb     154 <sysEnter_Vector-0x12feac>
  ef:	65                   	gs
  f0:	73 74                	jae    166 <sysEnter_Vector-0x12fe9a>
  f2:	61                   	popa   
  f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
  f4:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
  fb:	76 
  fc:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 103:	74 79                	je     17e <sysEnter_Vector-0x12fe82>
 105:	3d 68 69 64 64       	cmp    eax,0x64646968
 10a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 10c:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 112:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
 115:	6f                   	outs   dx,DWORD PTR ds:[esi]
 116:	6f                   	outs   dx,DWORD PTR ds:[esi]
 117:	6c                   	ins    BYTE PTR es:[edi],dx
 118:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
 11b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 11c:	72 74                	jb     192 <sysEnter_Vector-0x12fe6e>
 11e:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
 121:	73 69                	jae    18c <sysEnter_Vector-0x12fe74>
 123:	67 6e                	outs   dx,BYTE PTR ds:[si]
 125:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
 12a:	74 00                	je     12c <sysEnter_Vector-0x12fed4>
 12c:	73 74                	jae    1a2 <sysEnter_Vector-0x12fe5e>
 12e:	72 63                	jb     193 <sysEnter_Vector-0x12fe6d>
 130:	68 72 49 00 68       	push   0x68004972
 135:	65                   	gs
 136:	61                   	popa   
 137:	70 43                	jo     17c <sysEnter_Vector-0x12fe84>
 139:	75 72                	jne    1ad <sysEnter_Vector-0x12fe53>
 13b:	72 00                	jb     13d <sysEnter_Vector-0x12fec3>
 13d:	2e                   	cs
 13e:	2e                   	cs
 13f:	2f                   	das    
 140:	2e                   	cs
 141:	2e                   	cs
 142:	2f                   	das    
 143:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 147:	6a 2f                	push   0x2f
 149:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 14c:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 153:	63 2f                	arpl   WORD PTR [edi],bp
 155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
 157:	72 69                	jb     1c2 <sysEnter_Vector-0x12fe3e>
 159:	6e                   	outs   dx,BYTE PTR ds:[esi]
 15a:	67 73 2f             	addr16 jae 18c <sysEnter_Vector-0x12fe74>
 15d:	73 74                	jae    1d3 <sysEnter_Vector-0x12fe2d>
 15f:	72 63                	jb     1c4 <sysEnter_Vector-0x12fe3c>
 161:	68 72 2e 63 00       	push   0x632e72
 166:	6c                   	ins    BYTE PTR es:[edi],dx
 167:	6f                   	outs   dx,DWORD PTR ds:[esi]
 168:	6e                   	outs   dx,BYTE PTR ds:[esi]
 169:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
 16d:	75 62                	jne    1d1 <sysEnter_Vector-0x12fe2f>
 16f:	6c                   	ins    BYTE PTR es:[edi],dx
 170:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
 174:	6f                   	outs   dx,DWORD PTR ds:[esi]
 175:	72 74                	jb     1eb <sysEnter_Vector-0x12fe15>
 177:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
 17a:	74 00                	je     17c <sysEnter_Vector-0x12fe84>
 17c:	6c                   	ins    BYTE PTR es:[edi],dx
 17d:	69 62 63 54 5a 00 73 	imul   esp,DWORD PTR [edx+0x63],0x73005a54
 184:	69 7a 65 74 79 70 65 	imul   edi,DWORD PTR [edx+0x65],0x65707974
 18b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 18e:	72 63                	jb     1f3 <sysEnter_Vector-0x12fe0d>
 190:	73 70                	jae    202 <sysEnter_Vector-0x12fdfe>
 192:	6e                   	outs   dx,BYTE PTR ds:[esi]
 193:	49                   	dec    ecx
 194:	00 2e                	add    BYTE PTR [esi],ch
 196:	2e                   	cs
 197:	2f                   	das    
 198:	2e                   	cs
 199:	2e                   	cs
 19a:	2f                   	das    
 19b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 19f:	6a 2f                	push   0x2f
 1a1:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1a4:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1ab:	63 2f                	arpl   WORD PTR [edi],bp
 1ad:	73 74                	jae    223 <sysEnter_Vector-0x12fddd>
 1af:	72 69                	jb     21a <sysEnter_Vector-0x12fde6>
 1b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1b2:	67 73 2f             	addr16 jae 1e4 <sysEnter_Vector-0x12fe1c>
 1b5:	73 74                	jae    22b <sysEnter_Vector-0x12fdd5>
 1b7:	72 63                	jb     21c <sysEnter_Vector-0x12fde4>
 1b9:	73 70                	jae    22b <sysEnter_Vector-0x12fdd5>
 1bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1bc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 1bf:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
 1c2:	72 73                	jb     237 <sysEnter_Vector-0x12fdc9>
 1c4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1c7:	72 63                	jb     22c <sysEnter_Vector-0x12fdd4>
 1c9:	73 70                	jae    23b <sysEnter_Vector-0x12fdc5>
 1cb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1cc:	00 2e                	add    BYTE PTR [esi],ch
 1ce:	2e                   	cs
 1cf:	2f                   	das    
 1d0:	2e                   	cs
 1d1:	2e                   	cs
 1d2:	2f                   	das    
 1d3:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1d7:	6a 2f                	push   0x2f
 1d9:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1dc:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1e3:	63 2f                	arpl   WORD PTR [edi],bp
 1e5:	73 74                	jae    25b <sysEnter_Vector-0x12fda5>
 1e7:	72 69                	jb     252 <sysEnter_Vector-0x12fdae>
 1e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1ea:	67 73 2f             	addr16 jae 21c <sysEnter_Vector-0x12fde4>
 1ed:	73 74                	jae    263 <sysEnter_Vector-0x12fd9d>
 1ef:	72 74                	jb     265 <sysEnter_Vector-0x12fd9b>
 1f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f2:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1f5:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1f9:	74 73                	je     26e <sysEnter_Vector-0x12fd92>
 1fb:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1ff:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 206:	6f                   	outs   dx,DWORD PTR ds:[esi]
 207:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 20a:	74 72                	je     27e <sysEnter_Vector-0x12fd82>
 20c:	74 6f                	je     27d <sysEnter_Vector-0x12fd83>
 20e:	6b 49 00 73          	imul   ecx,DWORD PTR [ecx+0x0],0x73
 212:	72 63                	jb     277 <sysEnter_Vector-0x12fd89>
 214:	2f                   	das    
 215:	61                   	popa   
 216:	73 63                	jae    27b <sysEnter_Vector-0x12fd85>
 218:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 21f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 220:	61                   	popa   
 221:	49                   	dec    ecx
 222:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
 225:	6f                   	outs   dx,DWORD PTR ds:[esi]
 226:	61                   	popa   
 227:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 22a:	76 65                	jbe    291 <sysEnter_Vector-0x12fd6f>
 22c:	72 73                	jb     2a1 <sysEnter_Vector-0x12fd5f>
 22e:	65                   	gs
 22f:	49                   	dec    ecx
 230:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 233:	67 6e                	outs   dx,BYTE PTR ds:[si]
 235:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 238:	63 2f                	arpl   WORD PTR [edi],bp
 23a:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 23d:	73 6f                	jae    2ae <sysEnter_Vector-0x12fd52>
 23f:	6c                   	ins    BYTE PTR es:[edi],dx
 240:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 244:	6d                   	ins    DWORD PTR es:[edi],dx
 245:	6f                   	outs   dx,DWORD PTR ds:[esi]
 246:	76 65                	jbe    2ad <sysEnter_Vector-0x12fd53>
 248:	54                   	push   esp
 249:	6f                   	outs   dx,DWORD PTR ds:[esi]
 24a:	58                   	pop    eax
 24b:	59                   	pop    ecx
 24c:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
 24f:	76 65                	jbe    2b6 <sysEnter_Vector-0x12fd4a>
 251:	43                   	inc    ebx
 252:	75 72                	jne    2c6 <sysEnter_Vector-0x12fd3a>
 254:	73 6f                	jae    2c5 <sysEnter_Vector-0x12fd3b>
 256:	72 50                	jb     2a8 <sysEnter_Vector-0x12fd58>
 258:	6f                   	outs   dx,DWORD PTR ds:[esi]
 259:	73 69                	jae    2c4 <sysEnter_Vector-0x12fd3c>
 25b:	74 69                	je     2c6 <sysEnter_Vector-0x12fd3a>
 25d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 25e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 25f:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 262:	73 74                	jae    2d8 <sysEnter_Vector-0x12fd28>
 264:	6f                   	outs   dx,DWORD PTR ds:[esi]
 265:	72 65                	jb     2cc <sysEnter_Vector-0x12fd34>
 267:	43                   	inc    ebx
 268:	75 72                	jne    2dc <sysEnter_Vector-0x12fd24>
 26a:	73 6f                	jae    2db <sysEnter_Vector-0x12fd25>
 26c:	72 50                	jb     2be <sysEnter_Vector-0x12fd42>
 26e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 26f:	73 69                	jae    2da <sysEnter_Vector-0x12fd26>
 271:	74 69                	je     2dc <sysEnter_Vector-0x12fd24>
 273:	6f                   	outs   dx,DWORD PTR ds:[esi]
 274:	6e                   	outs   dx,BYTE PTR ds:[esi]
 275:	00 78 73             	add    BYTE PTR [eax+0x73],bh
 278:	74 72                	je     2ec <sysEnter_Vector-0x12fd14>
 27a:	00 61 6e             	add    BYTE PTR [ecx+0x6e],ah
 27d:	73 69                	jae    2e8 <sysEnter_Vector-0x12fd18>
 27f:	45                   	inc    ebp
 280:	73 63                	jae    2e5 <sysEnter_Vector-0x12fd1b>
 282:	53                   	push   ebx
 283:	65                   	gs
 284:	71 00                	jno    286 <sysEnter_Vector-0x12fd7a>
 286:	79 73                	jns    2fb <sysEnter_Vector-0x12fd05>
 288:	74 72                	je     2fc <sysEnter_Vector-0x12fd04>
 28a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 28d:	53                   	push   ebx
 28e:	43                   	inc    ebx
 28f:	41                   	inc    ecx
 290:	4c                   	dec    esp
 291:	4c                   	dec    esp
 292:	5f                   	pop    edi
 293:	57                   	push   edi
 294:	41                   	inc    ecx
 295:	49                   	dec    ecx
 296:	54                   	push   esp
 297:	46                   	inc    esi
 298:	4f                   	dec    edi
 299:	52                   	push   edx
 29a:	50                   	push   eax
 29b:	49                   	dec    ecx
 29c:	44                   	inc    esp
 29d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2a0:	53                   	push   ebx
 2a1:	43                   	inc    ebx
 2a2:	41                   	inc    ecx
 2a3:	4c                   	dec    esp
 2a4:	4c                   	dec    esp
 2a5:	5f                   	pop    edi
 2a6:	47                   	inc    edi
 2a7:	45                   	inc    ebp
 2a8:	54                   	push   esp
 2a9:	54                   	push   esp
 2aa:	49                   	dec    ecx
 2ab:	43                   	inc    ebx
 2ac:	4b                   	dec    ebx
 2ad:	53                   	push   ebx
 2ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b1:	53                   	push   ebx
 2b2:	43                   	inc    ebx
 2b3:	41                   	inc    ecx
 2b4:	4c                   	dec    esp
 2b5:	4c                   	dec    esp
 2b6:	5f                   	pop    edi
 2b7:	53                   	push   ebx
 2b8:	4c                   	dec    esp
 2b9:	45                   	inc    ebp
 2ba:	45                   	inc    ebp
 2bb:	50                   	push   eax
 2bc:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 2bf:	7a 65                	jp     326 <sysEnter_Vector-0x12fcda>
 2c1:	5f                   	pop    edi
 2c2:	74 00                	je     2c4 <sysEnter_Vector-0x12fd3c>
 2c4:	73 72                	jae    338 <sysEnter_Vector-0x12fcc8>
 2c6:	63 2f                	arpl   WORD PTR [edi],bp
 2c8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2ca:	76 69                	jbe    335 <sysEnter_Vector-0x12fccb>
 2cc:	72 6f                	jb     33d <sysEnter_Vector-0x12fcc3>
 2ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
 2cf:	6d                   	ins    DWORD PTR es:[edi],dx
 2d0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 2d2:	74 2e                	je     302 <sysEnter_Vector-0x12fcfe>
 2d4:	63 00                	arpl   WORD PTR [eax],ax
 2d6:	53                   	push   ebx
 2d7:	59                   	pop    ecx
 2d8:	53                   	push   ebx
 2d9:	43                   	inc    ebx
 2da:	41                   	inc    ecx
 2db:	4c                   	dec    esp
 2dc:	4c                   	dec    esp
 2dd:	5f                   	pop    edi
 2de:	4f                   	dec    edi
 2df:	50                   	push   eax
 2e0:	45                   	inc    ebp
 2e1:	4e                   	dec    esi
 2e2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e5:	53                   	push   ebx
 2e6:	43                   	inc    ebx
 2e7:	41                   	inc    ecx
 2e8:	4c                   	dec    esp
 2e9:	4c                   	dec    esp
 2ea:	5f                   	pop    edi
 2eb:	47                   	inc    edi
 2ec:	45                   	inc    ebp
 2ed:	54                   	push   esp
 2ee:	54                   	push   esp
 2ef:	49                   	dec    ecx
 2f0:	4d                   	dec    ebp
 2f1:	45                   	inc    ebp
 2f2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f5:	53                   	push   ebx
 2f6:	43                   	inc    ebx
 2f7:	41                   	inc    ecx
 2f8:	4c                   	dec    esp
 2f9:	4c                   	dec    esp
 2fa:	5f                   	pop    edi
 2fb:	57                   	push   edi
 2fc:	52                   	push   edx
 2fd:	49                   	dec    ecx
 2fe:	54                   	push   esp
 2ff:	45                   	inc    ebp
 300:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
 303:	74 65                	je     36a <sysEnter_Vector-0x12fc96>
 305:	6e                   	outs   dx,BYTE PTR ds:[esi]
 306:	76 00                	jbe    308 <sysEnter_Vector-0x12fcf8>
 308:	53                   	push   ebx
 309:	59                   	pop    ecx
 30a:	53                   	push   ebx
 30b:	43                   	inc    ebx
 30c:	41                   	inc    ecx
 30d:	4c                   	dec    esp
 30e:	4c                   	dec    esp
 30f:	5f                   	pop    edi
 310:	52                   	push   edx
 311:	45                   	inc    ebp
 312:	41                   	inc    ecx
 313:	44                   	inc    esp
 314:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 317:	74 65                	je     37e <sysEnter_Vector-0x12fc82>
 319:	6e                   	outs   dx,BYTE PTR ds:[esi]
 31a:	76 49                	jbe    365 <sysEnter_Vector-0x12fc9b>
 31c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 31f:	53                   	push   ebx
 320:	43                   	inc    ebx
 321:	41                   	inc    ecx
 322:	4c                   	dec    esp
 323:	4c                   	dec    esp
 324:	5f                   	pop    edi
 325:	53                   	push   ebx
 326:	54                   	push   esp
 327:	4f                   	dec    edi
 328:	50                   	push   eax
 329:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 32c:	53                   	push   ebx
 32d:	43                   	inc    ebx
 32e:	41                   	inc    ecx
 32f:	4c                   	dec    esp
 330:	4c                   	dec    esp
 331:	5f                   	pop    edi
 332:	53                   	push   ebx
 333:	45                   	inc    ebp
 334:	54                   	push   esp
 335:	53                   	push   ebx
 336:	49                   	dec    ecx
 337:	47                   	inc    edi
 338:	41                   	inc    ecx
 339:	43                   	inc    ebx
 33a:	54                   	push   esp
 33b:	49                   	dec    ecx
 33c:	4f                   	dec    edi
 33d:	4e                   	dec    esi
 33e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 341:	53                   	push   ebx
 342:	43                   	inc    ebx
 343:	41                   	inc    ecx
 344:	4c                   	dec    esp
 345:	4c                   	dec    esp
 346:	5f                   	pop    edi
 347:	4d                   	dec    ebp
 348:	4d                   	dec    ebp
 349:	41                   	inc    ecx
 34a:	50                   	push   eax
 34b:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 34e:	6c                   	ins    BYTE PTR es:[edi],dx
 34f:	75 65                	jne    3b6 <sysEnter_Vector-0x12fc4a>
 351:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 354:	53                   	push   ebx
 355:	43                   	inc    ebx
 356:	41                   	inc    ecx
 357:	4c                   	dec    esp
 358:	4c                   	dec    esp
 359:	5f                   	pop    edi
 35a:	53                   	push   ebx
 35b:	54                   	push   esp
 35c:	41                   	inc    ecx
 35d:	54                   	push   esp
 35e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 361:	53                   	push   ebx
 362:	43                   	inc    ebx
 363:	41                   	inc    ecx
 364:	4c                   	dec    esp
 365:	4c                   	dec    esp
 366:	5f                   	pop    edi
 367:	49                   	dec    ecx
 368:	4e                   	dec    esi
 369:	56                   	push   esi
 36a:	41                   	inc    ecx
 36b:	4c                   	dec    esp
 36c:	49                   	dec    ecx
 36d:	44                   	inc    esp
 36e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 371:	53                   	push   ebx
 372:	43                   	inc    ebx
 373:	41                   	inc    ecx
 374:	4c                   	dec    esp
 375:	4c                   	dec    esp
 376:	5f                   	pop    edi
 377:	54                   	push   esp
 378:	45                   	inc    ebp
 379:	4c                   	dec    esp
 37a:	4c                   	dec    esp
 37b:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 37e:	72 6e                	jb     3ee <sysEnter_Vector-0x12fc12>
 380:	61                   	popa   
 381:	6d                   	ins    DWORD PTR es:[edi],dx
 382:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 386:	53                   	push   ebx
 387:	43                   	inc    ebx
 388:	41                   	inc    ecx
 389:	4c                   	dec    esp
 38a:	4c                   	dec    esp
 38b:	5f                   	pop    edi
 38c:	4d                   	dec    ebp
 38d:	41                   	inc    ecx
 38e:	53                   	push   ebx
 38f:	4b                   	dec    ebx
 390:	53                   	push   ebx
 391:	49                   	dec    ecx
 392:	47                   	inc    edi
 393:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 396:	53                   	push   ebx
 397:	43                   	inc    ebx
 398:	41                   	inc    ecx
 399:	4c                   	dec    esp
 39a:	4c                   	dec    esp
 39b:	5f                   	pop    edi
 39c:	52                   	push   edx
 39d:	45                   	inc    ebp
 39e:	47                   	inc    edi
 39f:	45                   	inc    ebp
 3a0:	58                   	pop    eax
 3a1:	49                   	dec    ecx
 3a2:	54                   	push   esp
 3a3:	48                   	dec    eax
 3a4:	41                   	inc    ecx
 3a5:	4e                   	dec    esi
 3a6:	44                   	inc    esp
 3a7:	4c                   	dec    esp
 3a8:	45                   	inc    ebp
 3a9:	52                   	push   edx
 3aa:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3ad:	53                   	push   ebx
 3ae:	43                   	inc    ebx
 3af:	41                   	inc    ecx
 3b0:	4c                   	dec    esp
 3b1:	4c                   	dec    esp
 3b2:	5f                   	pop    edi
 3b3:	48                   	dec    eax
 3b4:	4c                   	dec    esp
 3b5:	54                   	push   esp
 3b6:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 3b9:	74 63                	je     41e <sysEnter_Vector-0x12fbe2>
 3bb:	77 64                	ja     421 <sysEnter_Vector-0x12fbdf>
 3bd:	49                   	dec    ecx
 3be:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 3c1:	79 73                	jns    436 <sysEnter_Vector-0x12fbca>
 3c3:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 3c6:	6c                   	ins    BYTE PTR es:[edi],dx
 3c7:	73 00                	jae    3c9 <sysEnter_Vector-0x12fc37>
 3c9:	67                   	addr16
 3ca:	65                   	gs
 3cb:	74 65                	je     432 <sysEnter_Vector-0x12fbce>
 3cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3ce:	76 00                	jbe    3d0 <sysEnter_Vector-0x12fc30>
 3d0:	53                   	push   ebx
 3d1:	59                   	pop    ecx
 3d2:	53                   	push   ebx
 3d3:	43                   	inc    ebx
 3d4:	41                   	inc    ecx
 3d5:	4c                   	dec    esp
 3d6:	4c                   	dec    esp
 3d7:	5f                   	pop    edi
 3d8:	53                   	push   ebx
 3d9:	45                   	inc    ebp
 3da:	54                   	push   esp
 3db:	53                   	push   ebx
 3dc:	54                   	push   esp
 3dd:	44                   	inc    esp
 3de:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3e1:	53                   	push   ebx
 3e2:	43                   	inc    ebx
 3e3:	41                   	inc    ecx
 3e4:	4c                   	dec    esp
 3e5:	4c                   	dec    esp
 3e6:	5f                   	pop    edi
 3e7:	53                   	push   ebx
 3e8:	45                   	inc    ebp
 3e9:	54                   	push   esp
 3ea:	43                   	inc    ebx
 3eb:	57                   	push   edi
 3ec:	44                   	inc    esp
 3ed:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 3f1:	74 50                	je     443 <sysEnter_Vector-0x12fbbd>
 3f3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 3f4:	70 75                	jo     46b <sysEnter_Vector-0x12fb95>
 3f6:	6c                   	ins    BYTE PTR es:[edi],dx
 3f7:	61                   	popa   
 3f8:	74 65                	je     45f <sysEnter_Vector-0x12fba1>
 3fa:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 3fe:	53                   	push   ebx
 3ff:	43                   	inc    ebx
 400:	41                   	inc    ecx
 401:	4c                   	dec    esp
 402:	4c                   	dec    esp
 403:	5f                   	pop    edi
 404:	53                   	push   ebx
 405:	45                   	inc    ebp
 406:	54                   	push   esp
 407:	50                   	push   eax
 408:	52                   	push   edx
 409:	49                   	dec    ecx
 40a:	4f                   	dec    edi
 40b:	52                   	push   edx
 40c:	49                   	dec    ecx
 40d:	54                   	push   esp
 40e:	59                   	pop    ecx
 40f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 412:	53                   	push   ebx
 413:	43                   	inc    ebx
 414:	41                   	inc    ecx
 415:	4c                   	dec    esp
 416:	4c                   	dec    esp
 417:	5f                   	pop    edi
 418:	41                   	inc    ecx
 419:	4c                   	dec    esp
 41a:	4c                   	dec    esp
 41b:	4f                   	dec    edi
 41c:	43                   	inc    ebx
 41d:	48                   	dec    eax
 41e:	45                   	inc    ebp
 41f:	41                   	inc    ecx
 420:	50                   	push   eax
 421:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 424:	53                   	push   ebx
 425:	43                   	inc    ebx
 426:	41                   	inc    ecx
 427:	4c                   	dec    esp
 428:	4c                   	dec    esp
 429:	5f                   	pop    edi
 42a:	47                   	inc    edi
 42b:	45                   	inc    ebp
 42c:	54                   	push   esp
 42d:	44                   	inc    esp
 42e:	45                   	inc    ebp
 42f:	4e                   	dec    esi
 430:	54                   	push   esp
 431:	53                   	push   ebx
 432:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 435:	53                   	push   ebx
 436:	43                   	inc    ebx
 437:	41                   	inc    ecx
 438:	4c                   	dec    esp
 439:	4c                   	dec    esp
 43a:	5f                   	pop    edi
 43b:	53                   	push   ebx
 43c:	45                   	inc    ebp
 43d:	45                   	inc    ebp
 43e:	4b                   	dec    ebx
 43f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 442:	53                   	push   ebx
 443:	43                   	inc    ebx
 444:	41                   	inc    ecx
 445:	4c                   	dec    esp
 446:	4c                   	dec    esp
 447:	5f                   	pop    edi
 448:	50                   	push   eax
 449:	49                   	dec    ecx
 44a:	50                   	push   eax
 44b:	45                   	inc    ebp
 44c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 44f:	53                   	push   ebx
 450:	43                   	inc    ebx
 451:	41                   	inc    ecx
 452:	4c                   	dec    esp
 453:	4c                   	dec    esp
 454:	5f                   	pop    edi
 455:	47                   	inc    edi
 456:	45                   	inc    ebp
 457:	54                   	push   esp
 458:	43                   	inc    ebx
 459:	57                   	push   edi
 45a:	44                   	inc    esp
 45b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 45e:	53                   	push   ebx
 45f:	43                   	inc    ebx
 460:	41                   	inc    ecx
 461:	4c                   	dec    esp
 462:	4c                   	dec    esp
 463:	5f                   	pop    edi
 464:	50                   	push   eax
 465:	52                   	push   edx
 466:	49                   	dec    ecx
 467:	4e                   	dec    esi
 468:	54                   	push   esp
 469:	44                   	inc    esp
 46a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 46d:	53                   	push   ebx
 46e:	43                   	inc    ebx
 46f:	41                   	inc    ecx
 470:	4c                   	dec    esp
 471:	4c                   	dec    esp
 472:	5f                   	pop    edi
 473:	46                   	inc    esi
 474:	52                   	push   edx
 475:	45                   	inc    ebp
 476:	45                   	inc    ebp
 477:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 47a:	53                   	push   ebx
 47b:	43                   	inc    ebx
 47c:	41                   	inc    ecx
 47d:	4c                   	dec    esp
 47e:	4c                   	dec    esp
 47f:	5f                   	pop    edi
 480:	45                   	inc    ebp
 481:	58                   	pop    eax
 482:	45                   	inc    ebp
 483:	43                   	inc    ebx
 484:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 487:	53                   	push   ebx
 488:	43                   	inc    ebx
 489:	41                   	inc    ecx
 48a:	4c                   	dec    esp
 48b:	4c                   	dec    esp
 48c:	5f                   	pop    edi
 48d:	45                   	inc    ebp
 48e:	58                   	pop    eax
 48f:	45                   	inc    ebp
 490:	43                   	inc    ebx
 491:	4e                   	dec    esi
 492:	45                   	inc    ebp
 493:	57                   	push   edi
 494:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 497:	53                   	push   ebx
 498:	43                   	inc    ebx
 499:	41                   	inc    ecx
 49a:	4c                   	dec    esp
 49b:	4c                   	dec    esp
 49c:	5f                   	pop    edi
 49d:	44                   	inc    esp
 49e:	55                   	push   ebp
 49f:	50                   	push   eax
 4a0:	33 00                	xor    eax,DWORD PTR [eax]
 4a2:	53                   	push   ebx
 4a3:	59                   	pop    ecx
 4a4:	53                   	push   ebx
 4a5:	43                   	inc    ebx
 4a6:	41                   	inc    ecx
 4a7:	4c                   	dec    esp
 4a8:	4c                   	dec    esp
 4a9:	5f                   	pop    edi
 4aa:	46                   	inc    esi
 4ab:	4f                   	dec    edi
 4ac:	52                   	push   edx
 4ad:	4b                   	dec    ebx
 4ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4b1:	53                   	push   ebx
 4b2:	43                   	inc    ebx
 4b3:	41                   	inc    ecx
 4b4:	4c                   	dec    esp
 4b5:	4c                   	dec    esp
 4b6:	5f                   	pop    edi
 4b7:	50                   	push   eax
 4b8:	52                   	push   edx
 4b9:	49                   	dec    ecx
 4ba:	4e                   	dec    esi
 4bb:	54                   	push   esp
 4bc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4bf:	53                   	push   ebx
 4c0:	43                   	inc    ebx
 4c1:	41                   	inc    ecx
 4c2:	4c                   	dec    esp
 4c3:	4c                   	dec    esp
 4c4:	5f                   	pop    edi
 4c5:	43                   	inc    ebx
 4c6:	4c                   	dec    esp
 4c7:	4f                   	dec    edi
 4c8:	53                   	push   ebx
 4c9:	45                   	inc    ebp
 4ca:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4cd:	53                   	push   ebx
 4ce:	43                   	inc    ebx
 4cf:	41                   	inc    ecx
 4d0:	4c                   	dec    esp
 4d1:	4c                   	dec    esp
 4d2:	5f                   	pop    edi
 4d3:	45                   	inc    ebp
 4d4:	4e                   	dec    esi
 4d5:	44                   	inc    esp
 4d6:	50                   	push   eax
 4d7:	52                   	push   edx
 4d8:	4f                   	dec    edi
 4d9:	43                   	inc    ebx
 4da:	45                   	inc    ebp
 4db:	53                   	push   ebx
 4dc:	53                   	push   ebx
 4dd:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 4e0:	74 63                	je     545 <sysEnter_Vector-0x12fabb>
 4e2:	77 64                	ja     548 <sysEnter_Vector-0x12fab8>
 4e4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 4e7:	53                   	push   ebx
 4e8:	43                   	inc    ebx
 4e9:	41                   	inc    ecx
 4ea:	4c                   	dec    esp
 4eb:	4c                   	dec    esp
 4ec:	5f                   	pop    edi
 4ed:	52                   	push   edx
 4ee:	45                   	inc    ebp
 4ef:	42                   	inc    edx
 4f0:	4f                   	dec    edi
 4f1:	4f                   	dec    edi
 4f2:	54                   	push   esp
 4f3:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 4f6:	74 56                	je     54e <sysEnter_Vector-0x12fab2>
 4f8:	61                   	popa   
 4f9:	6c                   	ins    BYTE PTR es:[edi],dx
 4fa:	00 66 73             	add    BYTE PTR [esi+0x73],ah
 4fd:	74 61                	je     560 <sysEnter_Vector-0x12faa0>
 4ff:	74 5f                	je     560 <sysEnter_Vector-0x12faa0>
 501:	74 00                	je     503 <sysEnter_Vector-0x12fafd>
 503:	63 6c 6f 73          	arpl   WORD PTR [edi+ebp*2+0x73],bp
 507:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 50b:	73 6f                	jae    57c <sysEnter_Vector-0x12fa84>
 50d:	6c                   	ins    BYTE PTR es:[edi],dx
 50e:	76 65                	jbe    575 <sysEnter_Vector-0x12fa8b>
 510:	50                   	push   eax
 511:	61                   	popa   
 512:	74 68                	je     57c <sysEnter_Vector-0x12fa84>
 514:	5f                   	pop    edi
 515:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 517:	76 50                	jbe    569 <sysEnter_Vector-0x12fa97>
 519:	61                   	popa   
 51a:	74 68                	je     584 <sysEnter_Vector-0x12fa7c>
 51c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 51f:	72 65                	jb     586 <sysEnter_Vector-0x12fa7a>
 521:	61                   	popa   
 522:	6d                   	ins    DWORD PTR es:[edi],dx
 523:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 526:	74 68                	je     590 <sysEnter_Vector-0x12fa70>
 528:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 52b:	65                   	gs
 52c:	61                   	popa   
 52d:	74 65                	je     594 <sysEnter_Vector-0x12fa6c>
 52f:	5f                   	pop    edi
 530:	74 69                	je     59b <sysEnter_Vector-0x12fa65>
 532:	6d                   	ins    DWORD PTR es:[edi],dx
 533:	65 00 77 72          	add    BYTE PTR gs:[edi+0x72],dh
 537:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
 53e:	65 
 53f:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
 543:	6c                   	ins    BYTE PTR es:[edi],dx
 544:	49                   	dec    ecx
 545:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 548:	61                   	popa   
 549:	72 74                	jb     5bf <sysEnter_Vector-0x12fa41>
 54b:	46                   	inc    esi
 54c:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
 553:	73 
 554:	74 61                	je     5b7 <sysEnter_Vector-0x12fa49>
 556:	74 49                	je     5a1 <sysEnter_Vector-0x12fa5f>
 558:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 55b:	50                   	push   eax
 55c:	74 72                	je     5d0 <sysEnter_Vector-0x12fa30>
 55e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 561:	73 6f                	jae    5d2 <sysEnter_Vector-0x12fa2e>
 563:	6c                   	ins    BYTE PTR es:[edi],dx
 564:	76 65                	jbe    5cb <sysEnter_Vector-0x12fa35>
 566:	50                   	push   eax
 567:	61                   	popa   
 568:	74 68                	je     5d2 <sysEnter_Vector-0x12fa2e>
 56a:	5f                   	pop    edi
 56b:	72 65                	jb     5d2 <sysEnter_Vector-0x12fa2e>
 56d:	73 50                	jae    5bf <sysEnter_Vector-0x12fa41>
 56f:	61                   	popa   
 570:	74 68                	je     5da <sysEnter_Vector-0x12fa26>
 572:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
 576:	6c                   	ins    BYTE PTR es:[edi],dx
 577:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 57a:	65                   	gs
 57b:	61                   	popa   
 57c:	74 65                	je     5e3 <sysEnter_Vector-0x12fa1d>
 57e:	5f                   	pop    edi
 57f:	64                   	fs
 580:	61                   	popa   
 581:	74 65                	je     5e8 <sysEnter_Vector-0x12fa18>
 583:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 586:	74 6c                	je     5f4 <sysEnter_Vector-0x12fa0c>
 588:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
 58f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 590:	74 31                	je     5c3 <sysEnter_Vector-0x12fa3d>
 592:	36                   	ss
 593:	5f                   	pop    edi
 594:	74 00                	je     596 <sysEnter_Vector-0x12fa6a>
 596:	77 72                	ja     60a <sysEnter_Vector-0x12f9f6>
 598:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
 59f:	65 
 5a0:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 5a3:	73 6f                	jae    614 <sysEnter_Vector-0x12f9ec>
 5a5:	6c                   	ins    BYTE PTR es:[edi],dx
 5a6:	76 65                	jbe    60d <sysEnter_Vector-0x12f9f3>
 5a8:	50                   	push   eax
 5a9:	61                   	popa   
 5aa:	74 68                	je     614 <sysEnter_Vector-0x12f9ec>
 5ac:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 5af:	5f                   	pop    edi
 5b0:	6c                   	ins    BYTE PTR es:[edi],dx
 5b1:	61                   	popa   
 5b2:	73 74                	jae    628 <sysEnter_Vector-0x12f9d8>
 5b4:	6d                   	ins    DWORD PTR es:[edi],dx
 5b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5b6:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
 5ba:	73 69                	jae    625 <sysEnter_Vector-0x12f9db>
 5bc:	74 69                	je     627 <sysEnter_Vector-0x12f9d9>
 5be:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5c0:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 5c3:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
 5ca:	65 
 5cb:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
 5ce:	68 65 6e 63 65       	push   0x65636e65
 5d3:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 5d6:	74 6c                	je     644 <sysEnter_Vector-0x12f9bc>
 5d8:	69 6e 65 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x65],0x74656700
 5df:	6c                   	ins    BYTE PTR es:[edi],dx
 5e0:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
 5e7:	72 6e                	jb     657 <sysEnter_Vector-0x12f9a9>
 5e9:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 5ec:	65 6f                	outs   dx,DWORD PTR gs:[esi]
 5ee:	70 65                	jo     655 <sysEnter_Vector-0x12f9ab>
 5f0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5f1:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
 5f5:	65                   	gs
 5f6:	54                   	push   esp
 5f7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5f8:	4f                   	dec    edi
 5f9:	75 74                	jne    66f <sysEnter_Vector-0x12f991>
 5fb:	70 75                	jo     672 <sysEnter_Vector-0x12f98e>
 5fd:	74 00                	je     5ff <sysEnter_Vector-0x12fa01>
 5ff:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
 603:	74 65                	je     66a <sysEnter_Vector-0x12f996>
 605:	72 00                	jb     607 <sysEnter_Vector-0x12f9f9>
 607:	61                   	popa   
 608:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
 60b:	73 73                	jae    680 <sysEnter_Vector-0x12f980>
 60d:	5f                   	pop    edi
 60e:	64                   	fs
 60f:	61                   	popa   
 610:	74 65                	je     677 <sysEnter_Vector-0x12f989>
 612:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
 615:	73 74                	jae    68b <sysEnter_Vector-0x12f975>
 617:	61                   	popa   
 618:	74 00                	je     61a <sysEnter_Vector-0x12f9e6>
 61a:	77 72                	ja     68e <sysEnter_Vector-0x12f972>
 61c:	69 74 65 00 65 6e 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x72746e65
 623:	72 
 624:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
 62b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 62d:	61                   	popa   
 62e:	6d                   	ins    DWORD PTR es:[edi],dx
 62f:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
 633:	74 50                	je     685 <sysEnter_Vector-0x12f97b>
 635:	61                   	popa   
 636:	74 68                	je     6a0 <sysEnter_Vector-0x12f960>
 638:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
 63c:	65                   	gs
 63d:	70 74                	jo     6b3 <sysEnter_Vector-0x12f94d>
 63f:	72 00                	jb     641 <sysEnter_Vector-0x12f9bf>
 641:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
 648:	79 
 649:	5f                   	pop    edi
 64a:	74 00                	je     64c <sysEnter_Vector-0x12f9b4>
 64c:	74 6f                	je     6bd <sysEnter_Vector-0x12f943>
 64e:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
 652:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
 659:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
 660:	79 
 661:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 664:	61                   	popa   
 665:	64                   	fs
 666:	49                   	dec    ecx
 667:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
 66b:	67 74 68             	addr16 je 6d6 <sysEnter_Vector-0x12f92a>
 66e:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 671:	61                   	popa   
 672:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
 676:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
 67b:	66                   	data16
 67c:	66                   	data16
 67d:	65                   	gs
 67e:	72 00                	jb     680 <sysEnter_Vector-0x12f980>
 680:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
 683:	65                   	gs
 684:	73 50                	jae    6d6 <sysEnter_Vector-0x12f92a>
 686:	61                   	popa   
 687:	72 73                	jb     6fc <sysEnter_Vector-0x12f904>
 689:	65 64 00 73 65       	gs add BYTE PTR fs:gs:[ebx+0x65],dh
 68e:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
 693:	72 63                	jb     6f8 <sysEnter_Vector-0x12f908>
 695:	2f                   	das    
 696:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 69d:	75 69                	jne    708 <sysEnter_Vector-0x12f8f8>
 69f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6a0:	74 38                	je     6da <sysEnter_Vector-0x12f926>
 6a2:	5f                   	pop    edi
 6a3:	74 00                	je     6a5 <sysEnter_Vector-0x12f95b>
 6a5:	73 74                	jae    71b <sysEnter_Vector-0x12f8e5>
 6a7:	5f                   	pop    edi
 6a8:	73 69                	jae    713 <sysEnter_Vector-0x12f8ed>
 6aa:	7a 65                	jp     711 <sysEnter_Vector-0x12f8ef>
 6ac:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 6af:	73 6f                	jae    720 <sysEnter_Vector-0x12f8e0>
 6b1:	6c                   	ins    BYTE PTR es:[edi],dx
 6b2:	76 65                	jbe    719 <sysEnter_Vector-0x12f8e7>
 6b4:	50                   	push   eax
 6b5:	61                   	popa   
 6b6:	74 68                	je     720 <sysEnter_Vector-0x12f8e0>
 6b8:	5f                   	pop    edi
 6b9:	63 77 64             	arpl   WORD PTR [edi+0x64],si
 6bc:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 6bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6c0:	64                   	fs
 6c1:	6c                   	ins    BYTE PTR es:[edi],dx
 6c2:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 6c6:	73 6f                	jae    737 <sysEnter_Vector-0x12f8c9>
 6c8:	6c                   	ins    BYTE PTR es:[edi],dx
 6c9:	76 65                	jbe    730 <sysEnter_Vector-0x12f8d0>
 6cb:	50                   	push   eax
 6cc:	61                   	popa   
 6cd:	74 68                	je     737 <sysEnter_Vector-0x12f8c9>
 6cf:	5f                   	pop    edi
 6d0:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
 6d7:	6c                   	ins    BYTE PTR es:[edi],dx
 6d8:	4c                   	dec    esp
 6d9:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
 6e0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 6e2:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 6e5:	6c                   	ins    BYTE PTR es:[edi],dx
 6e6:	65                   	gs
 6e7:	5f                   	pop    edi
 6e8:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
 6ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6ed:	75 70                	jne    75f <sysEnter_Vector-0x12f8a1>
 6ef:	00 62 79             	add    BYTE PTR [edx+0x79],ah
 6f2:	74 65                	je     759 <sysEnter_Vector-0x12f8a7>
 6f4:	73 52                	jae    748 <sysEnter_Vector-0x12f8b8>
 6f6:	65                   	gs
 6f7:	74 75                	je     76e <sysEnter_Vector-0x12f892>
 6f9:	72 6e                	jb     769 <sysEnter_Vector-0x12f897>
 6fb:	65 64 00 67 65       	gs add BYTE PTR fs:gs:[edi+0x65],ah
 700:	74 64                	je     766 <sysEnter_Vector-0x12f89a>
 702:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
 709:	65                   	gs
 70a:	72 43                	jb     74f <sysEnter_Vector-0x12f8b1>
 70c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 70d:	75 6e                	jne    77d <sysEnter_Vector-0x12f883>
 70f:	74 00                	je     711 <sysEnter_Vector-0x12f8ef>
 711:	73 72                	jae    785 <sysEnter_Vector-0x12f87b>
 713:	63 2f                	arpl   WORD PTR [edi],bp
 715:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 71c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 71d:	70 75                	jo     794 <sysEnter_Vector-0x12f86c>
 71f:	74 2e                	je     74f <sysEnter_Vector-0x12f8b1>
 721:	63 00                	arpl   WORD PTR [eax],ax
 723:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 72a:	67                   	addr16
 72b:	65                   	gs
 72c:	74 73                	je     7a1 <sysEnter_Vector-0x12f85f>
 72e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 731:	78 6c                	js     79f <sysEnter_Vector-0x12f861>
 733:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 735:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 738:	74 73                	je     7ad <sysEnter_Vector-0x12f853>
 73a:	45                   	inc    ebp
 73b:	72 72                	jb     7af <sysEnter_Vector-0x12f851>
 73d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 73e:	72 00                	jb     740 <sysEnter_Vector-0x12f8c0>
 740:	70 75                	jo     7b7 <sysEnter_Vector-0x12f849>
 742:	74 63                	je     7a7 <sysEnter_Vector-0x12f859>
 744:	00 6c 62 75          	add    BYTE PTR [edx+eiz*2+0x75],ch
 748:	66                   	data16
 749:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 74c:	74 73                	je     7c1 <sysEnter_Vector-0x12f83f>
 74e:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 751:	74 63                	je     7b6 <sysEnter_Vector-0x12f84a>
 753:	68 61 72 00 70       	push   0x70007261
 758:	72 69                	jb     7c3 <sysEnter_Vector-0x12f83d>
 75a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 75b:	74 00                	je     75d <sysEnter_Vector-0x12f8a3>
 75d:	6c                   	ins    BYTE PTR es:[edi],dx
 75e:	61                   	popa   
 75f:	73 74                	jae    7d5 <sysEnter_Vector-0x12f82b>
 761:	53                   	push   ebx
 762:	70 61                	jo     7c5 <sysEnter_Vector-0x12f83b>
 764:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 767:	74 72                	je     7db <sysEnter_Vector-0x12f825>
 769:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 76c:	67 44                	addr16 inc esp
 76e:	61                   	popa   
 76f:	74 61                	je     7d2 <sysEnter_Vector-0x12f82e>
 771:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 774:	65                   	gs
 775:	65                   	gs
 776:	70 54                	jo     7cc <sysEnter_Vector-0x12f834>
 778:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
 77f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 780:	74 65                	je     7e7 <sysEnter_Vector-0x12f819>
 782:	50                   	push   eax
 783:	74 72                	je     7f7 <sysEnter_Vector-0x12f809>
 785:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 788:	67 76 50             	addr16 jbe 7db <sysEnter_Vector-0x12f825>
 78b:	74 72                	je     7ff <sysEnter_Vector-0x12f801>
 78d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 790:	61                   	popa   
 791:	72 74                	jb     807 <sysEnter_Vector-0x12f7f9>
 793:	5f                   	pop    edi
 794:	6f                   	outs   dx,DWORD PTR ds:[esi]
 795:	66 5f                	pop    di
 797:	77 6f                	ja     808 <sysEnter_Vector-0x12f7f8>
 799:	72 64                	jb     7ff <sysEnter_Vector-0x12f801>
 79b:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 79e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 79f:	67 72 61             	addr16 jb 803 <sysEnter_Vector-0x12f7fd>
 7a2:	6d                   	ins    DWORD PTR es:[edi],dx
 7a3:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 7a7:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 7aa:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7ab:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
 7b2:	65 
 7b3:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 7b6:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 7b9:	6c                   	ins    BYTE PTR es:[edi],dx
 7ba:	74 69                	je     825 <sysEnter_Vector-0x12f7db>
 7bc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7bd:	5f                   	pop    edi
 7be:	76 61                	jbe    821 <sysEnter_Vector-0x12f7df>
 7c0:	5f                   	pop    edi
 7c1:	6c                   	ins    BYTE PTR es:[edi],dx
 7c2:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 7c9:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 7d0:	00 
 7d1:	73 70                	jae    843 <sysEnter_Vector-0x12f7bd>
 7d3:	61                   	popa   
 7d4:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 7d7:	74 72                	je     84b <sysEnter_Vector-0x12f7b5>
 7d9:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
 7dd:	70 00                	jo     7df <sysEnter_Vector-0x12f821>
 7df:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 7e2:	6c                   	ins    BYTE PTR es:[edi],dx
 7e3:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 7ea:	67 76 00             	addr16 jbe 7ed <sysEnter_Vector-0x12f813>
 7ed:	77 61                	ja     850 <sysEnter_Vector-0x12f7b0>
 7ef:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 7f6:	65 
 7f7:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 7fa:	4c                   	dec    esp
 7fb:	65                   	gs
 7fc:	76 65                	jbe    863 <sysEnter_Vector-0x12f79d>
 7fe:	6c                   	ins    BYTE PTR es:[edi],dx
 7ff:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 802:	6c                   	ins    BYTE PTR es:[edi],dx
 803:	6c                   	ins    BYTE PTR es:[edi],dx
 804:	6e                   	outs   dx,BYTE PTR ds:[esi]
 805:	75 6d                	jne    874 <sysEnter_Vector-0x12f78c>
 807:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
 80b:	71 75                	jno    882 <sysEnter_Vector-0x12f77e>
 80d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 80e:	74 65                	je     875 <sysEnter_Vector-0x12f78b>
 810:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 813:	65                   	gs
 814:	65                   	gs
 815:	70 00                	jo     817 <sysEnter_Vector-0x12f7e9>
 817:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 81a:	6c                   	ins    BYTE PTR es:[edi],dx
 81b:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 822:	67 76 49             	addr16 jbe 86e <sysEnter_Vector-0x12f792>
 825:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 829:	73 79                	jae    8a4 <sysEnter_Vector-0x12f75c>
 82b:	73 63                	jae    890 <sysEnter_Vector-0x12f770>
 82d:	61                   	popa   
 82e:	6c                   	ins    BYTE PTR es:[edi],dx
 82f:	6c                   	ins    BYTE PTR es:[edi],dx
 830:	31 00                	xor    DWORD PTR [eax],eax
 832:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 834:	5f                   	pop    edi
 835:	73 79                	jae    8b0 <sysEnter_Vector-0x12f750>
 837:	73 63                	jae    89c <sysEnter_Vector-0x12f764>
 839:	61                   	popa   
 83a:	6c                   	ins    BYTE PTR es:[edi],dx
 83b:	6c                   	ins    BYTE PTR es:[edi],dx
 83c:	32 00                	xor    al,BYTE PTR [eax]
 83e:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 840:	5f                   	pop    edi
 841:	73 79                	jae    8bc <sysEnter_Vector-0x12f744>
 843:	73 63                	jae    8a8 <sysEnter_Vector-0x12f758>
 845:	61                   	popa   
 846:	6c                   	ins    BYTE PTR es:[edi],dx
 847:	6c                   	ins    BYTE PTR es:[edi],dx
 848:	33 00                	xor    eax,DWORD PTR [eax]
 84a:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 84c:	5f                   	pop    edi
 84d:	73 79                	jae    8c8 <sysEnter_Vector-0x12f738>
 84f:	73 63                	jae    8b4 <sysEnter_Vector-0x12f74c>
 851:	61                   	popa   
 852:	6c                   	ins    BYTE PTR es:[edi],dx
 853:	6c                   	ins    BYTE PTR es:[edi],dx
 854:	34 00                	xor    al,0x0
 856:	49                   	dec    ecx
 857:	4e                   	dec    esi
 858:	5f                   	pop    edi
 859:	57                   	push   edi
 85a:	4f                   	dec    edi
 85b:	52                   	push   edx
 85c:	44                   	inc    esp
 85d:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 860:	67 76 5f             	addr16 jbe 8c2 <sysEnter_Vector-0x12f73e>
 863:	73 69                	jae    8ce <sysEnter_Vector-0x12f732>
 865:	7a 65                	jp     8cc <sysEnter_Vector-0x12f734>
 867:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 86b:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 86e:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 875:	65 
 876:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 87a:	73 70                	jae    8ec <sysEnter_Vector-0x12f714>
 87c:	61                   	popa   
 87d:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 880:	5f                   	pop    edi
 881:	5f                   	pop    edi
 882:	67 6e                	outs   dx,BYTE PTR ds:[si]
 884:	75 63                	jne    8e9 <sysEnter_Vector-0x12f717>
 886:	5f                   	pop    edi
 887:	76 61                	jbe    8ea <sysEnter_Vector-0x12f716>
 889:	5f                   	pop    edi
 88a:	6c                   	ins    BYTE PTR es:[edi],dx
 88b:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 892:	6e                   	outs   dx,BYTE PTR ds:[esi]
 893:	74 64                	je     8f9 <sysEnter_Vector-0x12f707>
 895:	49                   	dec    ecx
 896:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 899:	6d                   	ins    DWORD PTR es:[edi],dx
 89a:	69 6c 6c 69 73 65 63 	imul   ebp,DWORD PTR [esp+ebp*2+0x69],0x6f636573
 8a1:	6f 
 8a2:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a3:	64                   	fs
 8a4:	73 00                	jae    8a6 <sysEnter_Vector-0x12f75a>
 8a6:	70 61                	jo     909 <sysEnter_Vector-0x12f6f7>
 8a8:	72 61                	jb     90b <sysEnter_Vector-0x12f6f5>
 8aa:	6d                   	ins    DWORD PTR es:[edi],dx
 8ab:	31 00                	xor    DWORD PTR [eax],eax
 8ad:	70 61                	jo     910 <sysEnter_Vector-0x12f6f0>
 8af:	72 61                	jb     912 <sysEnter_Vector-0x12f6ee>
 8b1:	6d                   	ins    DWORD PTR es:[edi],dx
 8b2:	32 00                	xor    al,BYTE PTR [eax]
 8b4:	70 61                	jo     917 <sysEnter_Vector-0x12f6e9>
 8b6:	72 61                	jb     919 <sysEnter_Vector-0x12f6e7>
 8b8:	6d                   	ins    DWORD PTR es:[edi],dx
 8b9:	33 00                	xor    eax,DWORD PTR [eax]
 8bb:	70 61                	jo     91e <sysEnter_Vector-0x12f6e2>
 8bd:	72 61                	jb     920 <sysEnter_Vector-0x12f6e0>
 8bf:	6d                   	ins    DWORD PTR es:[edi],dx
 8c0:	34 00                	xor    al,0x0
 8c2:	73 65                	jae    929 <sysEnter_Vector-0x12f6d7>
 8c4:	74 63                	je     929 <sysEnter_Vector-0x12f6d7>
 8c6:	77 64                	ja     92c <sysEnter_Vector-0x12f6d4>
 8c8:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 8cb:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
 8cf:	65                   	gs
 8d0:	78 65                	js     937 <sysEnter_Vector-0x12f6c9>
 8d2:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 8d5:	66 6f                	outs   dx,WORD PTR ds:[esi]
 8d7:	72 6d                	jb     946 <sysEnter_Vector-0x12f6ba>
 8d9:	61                   	popa   
 8da:	74 00                	je     8dc <sysEnter_Vector-0x12f724>
 8dc:	70 72                	jo     950 <sysEnter_Vector-0x12f6b0>
 8de:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 8e5:	65                   	gs
 8e6:	72 00                	jb     8e8 <sysEnter_Vector-0x12f718>
 8e8:	73 69                	jae    953 <sysEnter_Vector-0x12f6ad>
 8ea:	67 6e                	outs   dx,BYTE PTR ds:[si]
 8ec:	61                   	popa   
 8ed:	6c                   	ins    BYTE PTR es:[edi],dx
 8ee:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 8f1:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 8f4:	5f                   	pop    edi
 8f5:	5f                   	pop    edi
 8f6:	73 65                	jae    95d <sysEnter_Vector-0x12f6a3>
 8f8:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 8fb:	64                   	fs
 8fc:	73 00                	jae    8fe <sysEnter_Vector-0x12f702>
 8fe:	44                   	inc    esp
 8ff:	55                   	push   ebp
 900:	4c                   	dec    esp
 901:	4c                   	dec    esp
 902:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 905:	61                   	popa   
 906:	74 65                	je     96d <sysEnter_Vector-0x12f693>
 908:	73 00                	jae    90a <sysEnter_Vector-0x12f6f6>
 90a:	49                   	dec    ecx
 90b:	4e                   	dec    esi
 90c:	5f                   	pop    edi
 90d:	53                   	push   ebx
 90e:	54                   	push   esp
 90f:	52                   	push   edx
 910:	49                   	dec    ecx
 911:	4e                   	dec    esi
 912:	47                   	inc    edi
 913:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 916:	63 2f                	arpl   WORD PTR [edi],bp
 918:	6c                   	ins    BYTE PTR es:[edi],dx
 919:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 920:	4f                   	dec    edi
 921:	53                   	push   ebx
 922:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 925:	61                   	popa   
 926:	72 67                	jb     98f <sysEnter_Vector-0x12f671>
 928:	63 00                	arpl   WORD PTR [eax],ax
 92a:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 92d:	6c                   	ins    BYTE PTR es:[edi],dx
 92e:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
 935:	73 79                	jae    9b0 <sysEnter_Vector-0x12f650>
 937:	73 63                	jae    99c <sysEnter_Vector-0x12f664>
 939:	61                   	popa   
 93a:	6c                   	ins    BYTE PTR es:[edi],dx
 93b:	6c                   	ins    BYTE PTR es:[edi],dx
 93c:	30 00                	xor    BYTE PTR [eax],al
 93e:	73 70                	jae    9b0 <sysEnter_Vector-0x12f650>
 940:	6c                   	ins    BYTE PTR es:[edi],dx
 941:	69 74 49 00 70 72 69 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6e697270
 948:	6e 
 949:	74 66                	je     9b1 <sysEnter_Vector-0x12f64f>
 94b:	49                   	dec    ecx
 94c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 950:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 953:	6c                   	ins    BYTE PTR es:[edi],dx
 954:	65                   	gs
 955:	61                   	popa   
 956:	6e                   	outs   dx,BYTE PTR ds:[esi]
 957:	75 70                	jne    9c9 <sysEnter_Vector-0x12f637>
 959:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 95c:	67 76 00             	addr16 jbe 95f <sysEnter_Vector-0x12f6a1>
 95f:	65                   	gs
 960:	78 69                	js     9cb <sysEnter_Vector-0x12f635>
 962:	74 00                	je     964 <sysEnter_Vector-0x12f69c>
 964:	73 74                	jae    9da <sysEnter_Vector-0x12f626>
 966:	61                   	popa   
 967:	74 75                	je     9de <sysEnter_Vector-0x12f622>
 969:	73 00                	jae    96b <sysEnter_Vector-0x12f695>
 96b:	73 65                	jae    9d2 <sysEnter_Vector-0x12f62e>
 96d:	74 53                	je     9c2 <sysEnter_Vector-0x12f63e>
 96f:	54                   	push   esp
 970:	44                   	inc    esp
 971:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 974:	67 48                	addr16 dec eax
 976:	61                   	popa   
 977:	6e                   	outs   dx,BYTE PTR ds:[esi]
 978:	64                   	fs
 979:	6c                   	ins    BYTE PTR es:[edi],dx
 97a:	65                   	gs
 97b:	72 00                	jb     97d <sysEnter_Vector-0x12f683>
 97d:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
 984:	6f                   	outs   dx,DWORD PTR ds:[esi]
 985:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 98c:	6e 
 98d:	61                   	popa   
 98e:	6c                   	ins    BYTE PTR es:[edi],dx
 98f:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 992:	67 73 00             	addr16 jae 995 <sysEnter_Vector-0x12f66b>
 995:	70 72                	jo     a09 <sysEnter_Vector-0x12f5f7>
 997:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 99e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 99f:	70 00                	jo     9a1 <sysEnter_Vector-0x12f65f>
 9a1:	70 72                	jo     a15 <sysEnter_Vector-0x12f5eb>
 9a3:	69 6e 74 64 00 61 64 	imul   ebp,DWORD PTR [esi+0x74],0x64610064
 9aa:	64                   	fs
 9ab:	72 00                	jb     9ad <sysEnter_Vector-0x12f653>
 9ad:	6d                   	ins    DWORD PTR es:[edi],dx
 9ae:	6d                   	ins    DWORD PTR es:[edi],dx
 9af:	61                   	popa   
 9b0:	70 00                	jo     9b2 <sysEnter_Vector-0x12f64e>
 9b2:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9b3:	66 66 5f             	data32 pop di
 9b6:	74 00                	je     9b8 <sysEnter_Vector-0x12f648>
 9b8:	70 72                	jo     a2c <sysEnter_Vector-0x12f5d4>
 9ba:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9bb:	74 00                	je     9bd <sysEnter_Vector-0x12f643>
 9bd:	73 4d                	jae    a0c <sysEnter_Vector-0x12f5f4>
 9bf:	4d                   	dec    ebp
 9c0:	61                   	popa   
 9c1:	70 53                	jo     a16 <sysEnter_Vector-0x12f5ea>
 9c3:	79 73                	jns    a38 <sysEnter_Vector-0x12f5c8>
 9c5:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 9c8:	6c                   	ins    BYTE PTR es:[edi],dx
 9c9:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 9cc:	72 61                	jb     a2f <sysEnter_Vector-0x12f5d1>
 9ce:	6d                   	ins    DWORD PTR es:[edi],dx
 9cf:	73 00                	jae    9d1 <sysEnter_Vector-0x12f62f>
 9d1:	73 72                	jae    a45 <sysEnter_Vector-0x12f5bb>
 9d3:	63 2f                	arpl   WORD PTR [edi],bp
 9d5:	6c                   	ins    BYTE PTR es:[edi],dx
 9d6:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
 9dd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9e0:	66                   	data16
 9e1:	6c                   	ins    BYTE PTR es:[edi],dx
 9e2:	61                   	popa   
 9e3:	67 73 00             	addr16 jae 9e6 <sysEnter_Vector-0x12f61a>
 9e6:	73 79                	jae    a61 <sysEnter_Vector-0x12f59f>
 9e8:	73 63                	jae    a4d <sysEnter_Vector-0x12f5b3>
 9ea:	61                   	popa   
 9eb:	6c                   	ins    BYTE PTR es:[edi],dx
 9ec:	6c                   	ins    BYTE PTR es:[edi],dx
 9ed:	5f                   	pop    edi
 9ee:	6d                   	ins    DWORD PTR es:[edi],dx
 9ef:	6d                   	ins    DWORD PTR es:[edi],dx
 9f0:	61                   	popa   
 9f1:	70 5f                	jo     a52 <sysEnter_Vector-0x12f5ae>
 9f3:	74 00                	je     9f5 <sysEnter_Vector-0x12f60b>
 9f5:	6d                   	ins    DWORD PTR es:[edi],dx
 9f6:	61                   	popa   
 9f7:	6c                   	ins    BYTE PTR es:[edi],dx
 9f8:	6c                   	ins    BYTE PTR es:[edi],dx
 9f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9fa:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 9fd:	70 72                	jo     a71 <sysEnter_Vector-0x12f58f>
 9ff:	65                   	gs
 a00:	76 00                	jbe    a02 <sysEnter_Vector-0x12f5fe>
 a02:	6c                   	ins    BYTE PTR es:[edi],dx
 a03:	61                   	popa   
 a04:	73 74                	jae    a7a <sysEnter_Vector-0x12f586>
 a06:	48                   	dec    eax
 a07:	52                   	push   edx
 a08:	43                   	inc    ebx
 a09:	72 65                	jb     a70 <sysEnter_Vector-0x12f590>
 a0b:	61                   	popa   
 a0c:	74 65                	je     a73 <sysEnter_Vector-0x12f58d>
 a0e:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 a12:	78 74                	js     a88 <sysEnter_Vector-0x12f578>
 a14:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 a17:	61                   	popa   
 a18:	70 72                	jo     a8c <sysEnter_Vector-0x12f574>
 a1a:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 a1e:	00 66 72             	add    BYTE PTR [esi+0x72],ah
 a21:	65                   	gs
 a22:	65                   	gs
 a23:	49                   	dec    ecx
 a24:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 a27:	72 6b                	jb     a94 <sysEnter_Vector-0x12f56c>
 a29:	65                   	gs
 a2a:	72 00                	jb     a2c <sysEnter_Vector-0x12f5d4>
 a2c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a2d:	65                   	gs
 a2e:	77 48                	ja     a78 <sysEnter_Vector-0x12f588>
 a30:	65                   	gs
 a31:	61                   	popa   
 a32:	70 52                	jo     a86 <sysEnter_Vector-0x12f57a>
 a34:	65                   	gs
 a35:	71 75                	jno    aac <sysEnter_Vector-0x12f554>
 a37:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 a3e:	75 6c                	jne    aac <sysEnter_Vector-0x12f554>
 a40:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 a47:	75 65                	jne    aae <sysEnter_Vector-0x12f552>
 a49:	73 74                	jae    abf <sysEnter_Vector-0x12f541>
 a4b:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 a4e:	6c                   	ins    BYTE PTR es:[edi],dx
 a4f:	6c                   	ins    BYTE PTR es:[edi],dx
 a50:	65                   	gs
 a51:	72 00                	jb     a53 <sysEnter_Vector-0x12f5ad>
 a53:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
 a5a:	68 65 61 70 00       	push   0x706165
 a5f:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
 a66:	6c                   	ins    BYTE PTR es:[edi],dx
 a67:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a68:	63 00                	arpl   WORD PTR [eax],ax
 a6a:	72 65                	jb     ad1 <sysEnter_Vector-0x12f52f>
 a6c:	71 75                	jno    ae3 <sysEnter_Vector-0x12f51d>
 a6e:	65                   	gs
 a6f:	73 74                	jae    ae5 <sysEnter_Vector-0x12f51b>
 a71:	53                   	push   ebx
 a72:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 a79:	6c                   	ins    BYTE PTR es:[edi],dx
 a7a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a7b:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 a7e:	6c                   	ins    BYTE PTR es:[edi],dx
 a7f:	65                   	gs
 a80:	61                   	popa   
 a81:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a82:	75 70                	jne    af4 <sysEnter_Vector-0x12f50c>
 a84:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 a87:	6c                   	ins    BYTE PTR es:[edi],dx
 a88:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a89:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 a8c:	65                   	gs
 a8d:	64                   	fs
 a8e:	50                   	push   eax
 a8f:	74 72                	je     b03 <sysEnter_Vector-0x12f4fd>
 a91:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 a94:	77 6c                	ja     b02 <sysEnter_Vector-0x12f4fe>
 a96:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a98:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
 a9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a9c:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
 aa3:	00 
 aa4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 aa5:	65                   	gs
 aa6:	77 53                	ja     afb <sysEnter_Vector-0x12f505>
 aa8:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
 aaf:	6c                   	ins    BYTE PTR es:[edi],dx
 ab0:	53                   	push   ebx
 ab1:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
 ab8:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
 abe:	61                   	popa   
 abf:	6c                   	ins    BYTE PTR es:[edi],dx
 ac0:	6c                   	ins    BYTE PTR es:[edi],dx
 ac1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ac2:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 ac5:	75 73                	jne    b3a <sysEnter_Vector-0x12f4c6>
 ac7:	65                   	gs
 ac8:	73 00                	jae    aca <sysEnter_Vector-0x12f536>
 aca:	68 65 61 70 72       	push   0x72706165
 acf:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 ad2:	66                   	data16
 ad3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ad4:	65                   	gs
 ad5:	77 70                	ja     b47 <sysEnter_Vector-0x12f4b9>
 ad7:	74 72                	je     b4b <sysEnter_Vector-0x12f4b5>
 ad9:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 adc:	63 2f                	arpl   WORD PTR [edi],bp
 ade:	6d                   	ins    DWORD PTR es:[edi],dx
 adf:	61                   	popa   
 ae0:	6c                   	ins    BYTE PTR es:[edi],dx
 ae1:	6c                   	ins    BYTE PTR es:[edi],dx
 ae2:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ae3:	63 2e                	arpl   WORD PTR [esi],bp
 ae5:	63 00                	arpl   WORD PTR [eax],ax
 ae7:	68 65 61 70 50       	push   0x50706165
 aec:	74 72                	je     b60 <sysEnter_Vector-0x12f4a0>
 aee:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
 af1:	6c                   	ins    BYTE PTR es:[edi],dx
 af2:	64                   	fs
 af3:	70 74                	jo     b69 <sysEnter_Vector-0x12f497>
 af5:	72 00                	jb     af7 <sysEnter_Vector-0x12f509>
 af7:	66                   	data16
 af8:	72 65                	jb     b5f <sysEnter_Vector-0x12f4a1>
 afa:	65 00 66 70          	add    BYTE PTR gs:[esi+0x70],ah
 afe:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aff:	69 6e 74 65 72 00 68 	imul   ebp,DWORD PTR [esi+0x74],0x68007265
 b06:	65                   	gs
 b07:	61                   	popa   
 b08:	70 50                	jo     b5a <sysEnter_Vector-0x12f4a6>
 b0a:	74 72                	je     b7e <sysEnter_Vector-0x12f482>
 b0c:	4e                   	dec    esi
 b0d:	65                   	gs
 b0e:	78 74                	js     b84 <sysEnter_Vector-0x12f47c>
 b10:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 b13:	6c                   	ins    BYTE PTR es:[edi],dx
 b14:	6c                   	ins    BYTE PTR es:[edi],dx
 b15:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b16:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
 b19:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b1a:	64                   	fs
 b1b:	41                   	inc    ecx
 b1c:	76 61                	jbe    b7f <sysEnter_Vector-0x12f481>
 b1e:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
 b25:	65 
 b26:	6d                   	ins    DWORD PTR es:[edi],dx
 b27:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b28:	72 79                	jb     ba3 <sysEnter_Vector-0x12f45d>
 b2a:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 b2d:	61                   	popa   
 b2e:	6c                   	ins    BYTE PTR es:[edi],dx
 b2f:	6c                   	ins    BYTE PTR es:[edi],dx
 b30:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b31:	63 00                	arpl   WORD PTR [eax],ax
 b33:	6d                   	ins    DWORD PTR es:[edi],dx
 b34:	61                   	popa   
 b35:	6c                   	ins    BYTE PTR es:[edi],dx
 b36:	6c                   	ins    BYTE PTR es:[edi],dx
 b37:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b38:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
 b3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b3c:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
 b43:	6b 
 b44:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b47:	63 2f                	arpl   WORD PTR [edi],bp
 b49:	6d                   	ins    DWORD PTR es:[edi],dx
 b4a:	65                   	gs
 b4b:	6d                   	ins    DWORD PTR es:[edi],dx
 b4c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b4f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b52:	64                   	fs
 b53:	65                   	gs
 b54:	73 74                	jae    bca <sysEnter_Vector-0x12f436>
 b56:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 b59:	6d                   	ins    DWORD PTR es:[edi],dx
 b5a:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b5d:	49                   	dec    ecx
 b5e:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 b61:	6d                   	ins    DWORD PTR es:[edi],dx
 b62:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 b65:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b68:	63 2f                	arpl   WORD PTR [edi],bp
 b6a:	6d                   	ins    DWORD PTR es:[edi],dx
 b6b:	65                   	gs
 b6c:	6d                   	ins    DWORD PTR es:[edi],dx
 b6d:	73 65                	jae    bd4 <sysEnter_Vector-0x12f42c>
 b6f:	74 2e                	je     b9f <sysEnter_Vector-0x12f461>
 b71:	63 00                	arpl   WORD PTR [eax],ax
 b73:	6d                   	ins    DWORD PTR es:[edi],dx
 b74:	65                   	gs
 b75:	6d                   	ins    DWORD PTR es:[edi],dx
 b76:	73 65                	jae    bdd <sysEnter_Vector-0x12f423>
 b78:	74 00                	je     b7a <sysEnter_Vector-0x12f486>
 b7a:	6d                   	ins    DWORD PTR es:[edi],dx
 b7b:	65                   	gs
 b7c:	6d                   	ins    DWORD PTR es:[edi],dx
 b7d:	73 65                	jae    be4 <sysEnter_Vector-0x12f41c>
 b7f:	74 49                	je     bca <sysEnter_Vector-0x12f436>
 b81:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 b84:	61                   	popa   
 b85:	6c                   	ins    BYTE PTR es:[edi],dx
 b86:	00 66 56             	add    BYTE PTR [esi+0x56],ah
 b89:	61                   	popa   
 b8a:	6c                   	ins    BYTE PTR es:[edi],dx
 b8b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b8e:	63 2f                	arpl   WORD PTR [edi],bp
 b90:	70 69                	jo     bfb <sysEnter_Vector-0x12f405>
 b92:	70 65                	jo     bf9 <sysEnter_Vector-0x12f407>
 b94:	5f                   	pop    edi
 b95:	6c                   	ins    BYTE PTR es:[edi],dx
 b96:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
 b9d:	70 65                	jo     c04 <sysEnter_Vector-0x12f3fc>
 b9f:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
 ba3:	33 00                	xor    eax,DWORD PTR [eax]
 ba5:	70 69                	jo     c10 <sysEnter_Vector-0x12f3f0>
 ba7:	70 65                	jo     c0e <sysEnter_Vector-0x12f3f2>
 ba9:	66                   	data16
 baa:	64 00 6e 65          	add    BYTE PTR fs:[esi+0x65],ch
 bae:	77 66                	ja     c16 <sysEnter_Vector-0x12f3ea>
 bb0:	64 00 6f 6c          	add    BYTE PTR fs:[edi+0x6c],ch
 bb4:	64                   	fs
 bb5:	66                   	data16
 bb6:	64 00 73 6b          	add    BYTE PTR fs:[ebx+0x6b],dh
 bba:	69 70 5f 61 74 6f 69 	imul   esi,DWORD PTR [eax+0x5f],0x696f7461
 bc1:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
 bc5:	61                   	popa   
 bc6:	73 65                	jae    c2d <sysEnter_Vector-0x12f3d3>
 bc8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 bcb:	63 2f                	arpl   WORD PTR [edi],bp
 bcd:	73 70                	jae    c3f <sysEnter_Vector-0x12f3c1>
 bcf:	72 69                	jb     c3a <sysEnter_Vector-0x12f3c6>
 bd1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bd2:	74 66                	je     c3a <sysEnter_Vector-0x12f3c6>
 bd4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 bd7:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 bda:	65 00 71 75          	add    BYTE PTR gs:[ecx+0x75],dh
 bde:	61                   	popa   
 bdf:	6c                   	ins    BYTE PTR es:[edi],dx
 be0:	69 66 69 65 72 00 72 	imul   esp,DWORD PTR [esi+0x69],0x72007265
 be7:	65                   	gs
 be8:	70 65                	jo     c4f <sysEnter_Vector-0x12f3b1>
 bea:	61                   	popa   
 beb:	74 00                	je     bed <sysEnter_Vector-0x12f413>
 bed:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bee:	75 6d                	jne    c5d <sysEnter_Vector-0x12f3a3>
 bf0:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
 bf3:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 bf6:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 bfa:	69 6f 6e 00 64 69 67 	imul   ebp,DWORD PTR [edi+0x6e],0x67696400
 c01:	69 74 73 00 66 69 65 	imul   esi,DWORD PTR [ebx+esi*2+0x0],0x6c656966
 c08:	6c 
 c09:	64                   	fs
 c0a:	5f                   	pop    edi
 c0b:	77 69                	ja     c76 <sysEnter_Vector-0x12f38a>
 c0d:	64                   	fs
 c0e:	74 68                	je     c78 <sysEnter_Vector-0x12f388>
 c10:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 c13:	72 65                	jb     c7a <sysEnter_Vector-0x12f386>
 c15:	73 00                	jae    c17 <sysEnter_Vector-0x12f3e9>
 c17:	76 73                	jbe    c8c <sysEnter_Vector-0x12f374>
 c19:	70 72                	jo     c8d <sysEnter_Vector-0x12f373>
 c1b:	69 6e 74 66 00 73 72 	imul   ebp,DWORD PTR [esi+0x74],0x72730066
 c22:	63 2f                	arpl   WORD PTR [edi],bp
 c24:	73 74                	jae    c9a <sysEnter_Vector-0x12f366>
 c26:	64 69 6f 2e 63 00 62 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x75620063
 c2d:	75 
 c2e:	66                   	data16
 c2f:	66                   	data16
 c30:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 c33:	73 65                	jae    c9a <sysEnter_Vector-0x12f366>
 c35:	74 52                	je     c89 <sysEnter_Vector-0x12f377>
 c37:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c38:	77 00                	ja     c3a <sysEnter_Vector-0x12f3c6>
 c3a:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 c3d:	66 50                	push   ax
 c3f:	74 72                	je     cb3 <sysEnter_Vector-0x12f34d>
 c41:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c44:	72 63                	jb     ca9 <sysEnter_Vector-0x12f357>
 c46:	61                   	popa   
 c47:	74 49                	je     c92 <sysEnter_Vector-0x12f36e>
 c49:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c4c:	72 63                	jb     cb1 <sysEnter_Vector-0x12f34f>
 c4e:	61                   	popa   
 c4f:	74 00                	je     c51 <sysEnter_Vector-0x12f3af>
 c51:	73 74                	jae    cc7 <sysEnter_Vector-0x12f339>
 c53:	72 6e                	jb     cc3 <sysEnter_Vector-0x12f33d>
 c55:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 c58:	00 62 79             	add    BYTE PTR [edx+0x79],ah
 c5b:	74 65                	je     cc2 <sysEnter_Vector-0x12f33e>
 c5d:	73 54                	jae    cb3 <sysEnter_Vector-0x12f34d>
 c5f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c60:	43                   	inc    ebx
 c61:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c62:	70 79                	jo     cdd <sysEnter_Vector-0x12f323>
 c64:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c67:	72 6e                	jb     cd7 <sysEnter_Vector-0x12f329>
 c69:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 c6c:	49                   	dec    ecx
 c6d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c70:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
 c73:	72 69                	jb     cde <sysEnter_Vector-0x12f322>
 c75:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c76:	67 4c                	addr16 dec esp
 c78:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 c7a:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 c7d:	63 2f                	arpl   WORD PTR [edi],bp
 c7f:	73 74                	jae    cf5 <sysEnter_Vector-0x12f30b>
 c81:	72 69                	jb     cec <sysEnter_Vector-0x12f314>
 c83:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c84:	67 73 2f             	addr16 jae cb6 <sysEnter_Vector-0x12f34a>
 c87:	73 74                	jae    cfd <sysEnter_Vector-0x12f303>
 c89:	72 63                	jb     cee <sysEnter_Vector-0x12f312>
 c8b:	61                   	popa   
 c8c:	74 2e                	je     cbc <sysEnter_Vector-0x12f344>
 c8e:	63 00                	arpl   WORD PTR [eax],ax
 c90:	73 74                	jae    d06 <sysEnter_Vector-0x12f2fa>
 c92:	72 63                	jb     cf7 <sysEnter_Vector-0x12f309>
 c94:	6d                   	ins    DWORD PTR es:[edi],dx
 c95:	70 49                	jo     ce0 <sysEnter_Vector-0x12f320>
 c97:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 c9a:	72 63                	jb     cff <sysEnter_Vector-0x12f301>
 c9c:	6d                   	ins    DWORD PTR es:[edi],dx
 c9d:	70 00                	jo     c9f <sysEnter_Vector-0x12f361>
 c9f:	73 72                	jae    d13 <sysEnter_Vector-0x12f2ed>
 ca1:	63 2f                	arpl   WORD PTR [edi],bp
 ca3:	73 74                	jae    d19 <sysEnter_Vector-0x12f2e7>
 ca5:	72 69                	jb     d10 <sysEnter_Vector-0x12f2f0>
 ca7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ca8:	67 73 2f             	addr16 jae cda <sysEnter_Vector-0x12f326>
 cab:	73 74                	jae    d21 <sysEnter_Vector-0x12f2df>
 cad:	72 63                	jb     d12 <sysEnter_Vector-0x12f2ee>
 caf:	6d                   	ins    DWORD PTR es:[edi],dx
 cb0:	70 2e                	jo     ce0 <sysEnter_Vector-0x12f320>
 cb2:	63 00                	arpl   WORD PTR [eax],ax
 cb4:	63 6f 75             	arpl   WORD PTR [edi+0x75],bp
 cb7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cb8:	74 00                	je     cba <sysEnter_Vector-0x12f346>
 cba:	73 74                	jae    d30 <sysEnter_Vector-0x12f2d0>
 cbc:	72 63                	jb     d21 <sysEnter_Vector-0x12f2df>
 cbe:	70 79                	jo     d39 <sysEnter_Vector-0x12f2c7>
 cc0:	63 00                	arpl   WORD PTR [eax],ax
 cc2:	73 74                	jae    d38 <sysEnter_Vector-0x12f2c8>
 cc4:	72 63                	jb     d29 <sysEnter_Vector-0x12f2d7>
 cc6:	70 79                	jo     d41 <sysEnter_Vector-0x12f2bf>
 cc8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 ccb:	63 2f                	arpl   WORD PTR [edi],bp
 ccd:	73 74                	jae    d43 <sysEnter_Vector-0x12f2bd>
 ccf:	72 69                	jb     d3a <sysEnter_Vector-0x12f2c6>
 cd1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cd2:	67 73 2f             	addr16 jae d04 <sysEnter_Vector-0x12f2fc>
 cd5:	73 74                	jae    d4b <sysEnter_Vector-0x12f2b5>
 cd7:	72 63                	jb     d3c <sysEnter_Vector-0x12f2c4>
 cd9:	70 79                	jo     d54 <sysEnter_Vector-0x12f2ac>
 cdb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 cde:	73 74                	jae    d54 <sysEnter_Vector-0x12f2ac>
 ce0:	72 63                	jb     d45 <sysEnter_Vector-0x12f2bb>
 ce2:	70 79                	jo     d5d <sysEnter_Vector-0x12f2a3>
 ce4:	49                   	dec    ecx
 ce5:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 ce8:	72 69                	jb     d53 <sysEnter_Vector-0x12f2ad>
 cea:	73 6e                	jae    d5a <sysEnter_Vector-0x12f2a6>
 cec:	75 6d                	jne    d5b <sysEnter_Vector-0x12f2a5>
 cee:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 cf1:	63 2f                	arpl   WORD PTR [edi],bp
 cf3:	73 74                	jae    d69 <sysEnter_Vector-0x12f297>
 cf5:	72 69                	jb     d60 <sysEnter_Vector-0x12f2a0>
 cf7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 cf8:	67 73 2f             	addr16 jae d2a <sysEnter_Vector-0x12f2d6>
 cfb:	73 74                	jae    d71 <sysEnter_Vector-0x12f28f>
 cfd:	72 69                	jb     d68 <sysEnter_Vector-0x12f298>
 cff:	73 6e                	jae    d6f <sysEnter_Vector-0x12f291>
 d01:	75 6d                	jne    d70 <sysEnter_Vector-0x12f290>
 d03:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d06:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 d09:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 d0c:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 d13:	74 
 d14:	72 6c                	jb     d82 <sysEnter_Vector-0x12f27e>
 d16:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d18:	49                   	dec    ecx
 d19:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d1c:	72 6c                	jb     d8a <sysEnter_Vector-0x12f276>
 d1e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d20:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d23:	72 6e                	jb     d93 <sysEnter_Vector-0x12f26d>
 d25:	6c                   	ins    BYTE PTR es:[edi],dx
 d26:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d28:	49                   	dec    ecx
 d29:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d2c:	72 6e                	jb     d9c <sysEnter_Vector-0x12f264>
 d2e:	6c                   	ins    BYTE PTR es:[edi],dx
 d2f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d31:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d34:	63 2f                	arpl   WORD PTR [edi],bp
 d36:	73 74                	jae    dac <sysEnter_Vector-0x12f254>
 d38:	72 69                	jb     da3 <sysEnter_Vector-0x12f25d>
 d3a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d3b:	67 73 2f             	addr16 jae d6d <sysEnter_Vector-0x12f293>
 d3e:	73 74                	jae    db4 <sysEnter_Vector-0x12f24c>
 d40:	72 6c                	jb     dae <sysEnter_Vector-0x12f252>
 d42:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 d44:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d47:	73 74                	jae    dbd <sysEnter_Vector-0x12f243>
 d49:	72 6e                	jb     db9 <sysEnter_Vector-0x12f247>
 d4b:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d4e:	49                   	dec    ecx
 d4f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d52:	72 6e                	jb     dc2 <sysEnter_Vector-0x12f23e>
 d54:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d57:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 d5a:	63 2f                	arpl   WORD PTR [edi],bp
 d5c:	73 74                	jae    dd2 <sysEnter_Vector-0x12f22e>
 d5e:	72 69                	jb     dc9 <sysEnter_Vector-0x12f237>
 d60:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d61:	67 73 2f             	addr16 jae d93 <sysEnter_Vector-0x12f26d>
 d64:	73 74                	jae    dda <sysEnter_Vector-0x12f226>
 d66:	72 6e                	jb     dd6 <sysEnter_Vector-0x12f22a>
 d68:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 d6b:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d6e:	73 72                	jae    de2 <sysEnter_Vector-0x12f21e>
 d70:	63 2f                	arpl   WORD PTR [edi],bp
 d72:	73 74                	jae    de8 <sysEnter_Vector-0x12f218>
 d74:	72 69                	jb     ddf <sysEnter_Vector-0x12f221>
 d76:	6e                   	outs   dx,BYTE PTR ds:[esi]
 d77:	67 73 2f             	addr16 jae da9 <sysEnter_Vector-0x12f257>
 d7a:	73 74                	jae    df0 <sysEnter_Vector-0x12f210>
 d7c:	72 6e                	jb     dec <sysEnter_Vector-0x12f214>
 d7e:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 d81:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 d84:	73 74                	jae    dfa <sysEnter_Vector-0x12f206>
 d86:	72 6e                	jb     df6 <sysEnter_Vector-0x12f20a>
 d88:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 d8b:	49                   	dec    ecx
 d8c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 d8f:	72 6e                	jb     dff <sysEnter_Vector-0x12f201>
 d91:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 d94:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 d97:	64                   	fs
 d98:	70 74                	jo     e0e <sysEnter_Vector-0x12f1f2>
 d9a:	72 00                	jb     d9c <sysEnter_Vector-0x12f264>
 d9c:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 d9f:	6c                   	ins    BYTE PTR es:[edi],dx
 da0:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 da7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 da8:	75 6c                	jne    e16 <sysEnter_Vector-0x12f1ea>
 daa:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 dad:	63 2f                	arpl   WORD PTR [edi],bp
 daf:	73 74                	jae    e25 <sysEnter_Vector-0x12f1db>
 db1:	72 69                	jb     e1c <sysEnter_Vector-0x12f1e4>
 db3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 db4:	67 73 2f             	addr16 jae de6 <sysEnter_Vector-0x12f21a>
 db7:	73 74                	jae    e2d <sysEnter_Vector-0x12f1d3>
 db9:	72 6f                	jb     e2a <sysEnter_Vector-0x12f1d6>
 dbb:	75 6c                	jne    e29 <sysEnter_Vector-0x12f1d7>
 dbd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 dc0:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 dc3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 dc4:	66                   	data16
 dc5:	66                   	data16
 dc6:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
 dc9:	74 72                	je     e3d <sysEnter_Vector-0x12f1c3>
 dcb:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 dce:	63 2f                	arpl   WORD PTR [edi],bp
 dd0:	73 74                	jae    e46 <sysEnter_Vector-0x12f1ba>
 dd2:	72 69                	jb     e3d <sysEnter_Vector-0x12f1c3>
 dd4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 dd5:	67 73 2f             	addr16 jae e07 <sysEnter_Vector-0x12f1f9>
 dd8:	73 74                	jae    e4e <sysEnter_Vector-0x12f1b2>
 dda:	72 70                	jb     e4c <sysEnter_Vector-0x12f1b4>
 ddc:	61                   	popa   
 ddd:	72 74                	jb     e53 <sysEnter_Vector-0x12f1ad>
 ddf:	73 2e                	jae    e0f <sysEnter_Vector-0x12f1f1>
 de1:	63 00                	arpl   WORD PTR [eax],ax
 de3:	73 74                	jae    e59 <sysEnter_Vector-0x12f1a7>
 de5:	72 6c                	jb     e53 <sysEnter_Vector-0x12f1ad>
 de7:	65                   	gs
 de8:	66                   	data16
 de9:	74 00                	je     deb <sysEnter_Vector-0x12f215>
 deb:	73 72                	jae    e5f <sysEnter_Vector-0x12f1a1>
 ded:	63 2f                	arpl   WORD PTR [edi],bp
 def:	73 74                	jae    e65 <sysEnter_Vector-0x12f19b>
 df1:	72 69                	jb     e5c <sysEnter_Vector-0x12f1a4>
 df3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 df4:	67 73 2f             	addr16 jae e26 <sysEnter_Vector-0x12f1da>
 df7:	73 74                	jae    e6d <sysEnter_Vector-0x12f193>
 df9:	72 74                	jb     e6f <sysEnter_Vector-0x12f191>
 dfb:	6f                   	outs   dx,DWORD PTR ds:[esi]
 dfc:	6c                   	ins    BYTE PTR es:[edi],dx
 dfd:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 e00:	73 74                	jae    e76 <sysEnter_Vector-0x12f18a>
 e02:	72 74                	jb     e78 <sysEnter_Vector-0x12f188>
 e04:	6f                   	outs   dx,DWORD PTR ds:[esi]
 e05:	6c                   	ins    BYTE PTR es:[edi],dx
 e06:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e09:	72 74                	jb     e7f <sysEnter_Vector-0x12f181>
 e0b:	72 69                	jb     e76 <sysEnter_Vector-0x12f18a>
 e0d:	6d                   	ins    DWORD PTR es:[edi],dx
 e0e:	49                   	dec    ecx
 e0f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 e12:	70 75                	jo     e89 <sysEnter_Vector-0x12f177>
 e14:	74 00                	je     e16 <sysEnter_Vector-0x12f1ea>
 e16:	73 72                	jae    e8a <sysEnter_Vector-0x12f176>
 e18:	63 2f                	arpl   WORD PTR [edi],bp
 e1a:	73 74                	jae    e90 <sysEnter_Vector-0x12f170>
 e1c:	72 69                	jb     e87 <sysEnter_Vector-0x12f179>
 e1e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e1f:	67 73 2f             	addr16 jae e51 <sysEnter_Vector-0x12f1af>
 e22:	73 74                	jae    e98 <sysEnter_Vector-0x12f168>
 e24:	72 74                	jb     e9a <sysEnter_Vector-0x12f166>
 e26:	72 69                	jb     e91 <sysEnter_Vector-0x12f16f>
 e28:	6d                   	ins    DWORD PTR es:[edi],dx
 e29:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 e2c:	73 74                	jae    ea2 <sysEnter_Vector-0x12f15e>
 e2e:	72 74                	jb     ea4 <sysEnter_Vector-0x12f15c>
 e30:	72 69                	jb     e9b <sysEnter_Vector-0x12f165>
 e32:	6d                   	ins    DWORD PTR es:[edi],dx
 e33:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
 e36:	74 73                	je     eab <sysEnter_Vector-0x12f155>
 e38:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
 e3f:	2f                   	das    
 e40:	73 74                	jae    eb6 <sysEnter_Vector-0x12f14a>
 e42:	72 72                	jb     eb6 <sysEnter_Vector-0x12f14a>
 e44:	65                   	gs
 e45:	70 6c                	jo     eb3 <sysEnter_Vector-0x12f14d>
 e47:	61                   	popa   
 e48:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
 e4b:	63 00                	arpl   WORD PTR [eax],ax
 e4d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 e4e:	65                   	gs
 e4f:	65                   	gs
 e50:	64                   	fs
 e51:	6c                   	ins    BYTE PTR es:[edi],dx
 e52:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
 e56:	73 6f                	jae    ec7 <sysEnter_Vector-0x12f139>
 e58:	66                   	data16
 e59:	66                   	data16
 e5a:	73 65                	jae    ec1 <sysEnter_Vector-0x12f13f>
 e5c:	74 00                	je     e5e <sysEnter_Vector-0x12f1a2>
 e5e:	73 74                	jae    ed4 <sysEnter_Vector-0x12f12c>
 e60:	72 72                	jb     ed4 <sysEnter_Vector-0x12f12c>
 e62:	65                   	gs
 e63:	70 6c                	jo     ed1 <sysEnter_Vector-0x12f12f>
 e65:	61                   	popa   
 e66:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 e69:	70 61                	jo     ecc <sysEnter_Vector-0x12f134>
 e6b:	74 74                	je     ee1 <sysEnter_Vector-0x12f11f>
 e6d:	65                   	gs
 e6e:	72 6e                	jb     ede <sysEnter_Vector-0x12f122>
 e70:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e73:	72 72                	jb     ee7 <sysEnter_Vector-0x12f119>
 e75:	65                   	gs
 e76:	70 6c                	jo     ee4 <sysEnter_Vector-0x12f11c>
 e78:	61                   	popa   
 e79:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
 e7c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e7f:	72 73                	jb     ef4 <sysEnter_Vector-0x12f10c>
 e81:	74 72                	je     ef5 <sysEnter_Vector-0x12f10b>
 e83:	49                   	dec    ecx
 e84:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 e87:	72 6e                	jb     ef7 <sysEnter_Vector-0x12f109>
 e89:	73 74                	jae    eff <sysEnter_Vector-0x12f101>
 e8b:	72 49                	jb     ed6 <sysEnter_Vector-0x12f12a>
 e8d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 e90:	63 2f                	arpl   WORD PTR [edi],bp
 e92:	73 74                	jae    f08 <sysEnter_Vector-0x12f0f8>
 e94:	72 73                	jb     f09 <sysEnter_Vector-0x12f0f7>
 e96:	74 72                	je     f0a <sysEnter_Vector-0x12f0f6>
 e98:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 e9b:	72 63                	jb     f00 <sysEnter_Vector-0x12f100>
 e9d:	73 69                	jae    f08 <sysEnter_Vector-0x12f0f8>
 e9f:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 ea3:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 ea6:	72 69                	jb     f11 <sysEnter_Vector-0x12f0ef>
 ea8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ea9:	67 00 73 74          	add    BYTE PTR [bp+di+0x74],dh
 ead:	72 73                	jb     f22 <sysEnter_Vector-0x12f0de>
 eaf:	74 72                	je     f23 <sysEnter_Vector-0x12f0dd>
 eb1:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 eb4:	63 2f                	arpl   WORD PTR [edi],bp
 eb6:	74 69                	je     f21 <sysEnter_Vector-0x12f0df>
 eb8:	6d                   	ins    DWORD PTR es:[edi],dx
 eb9:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 ebd:	6c                   	ins    BYTE PTR es:[edi],dx
 ebe:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ebf:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ec2:	74 69                	je     f2d <sysEnter_Vector-0x12f0d3>
 ec4:	6d                   	ins    DWORD PTR es:[edi],dx
 ec5:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 eca:	68 6f 75 72 00       	push   0x72756f
 ecf:	67                   	addr16
 ed0:	65                   	gs
 ed1:	74 74                	je     f47 <sysEnter_Vector-0x12f0b9>
 ed3:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 eda:	61                   	popa   
 edb:	79 6c                	jns    f49 <sysEnter_Vector-0x12f0b7>
 edd:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 ee4:	7a 6e                	jp     f54 <sysEnter_Vector-0x12f0ac>
 ee6:	61                   	popa   
 ee7:	6d                   	ins    DWORD PTR es:[edi],dx
 ee8:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 eec:	74 69                	je     f57 <sysEnter_Vector-0x12f0a9>
 eee:	6d                   	ins    DWORD PTR es:[edi],dx
 eef:	65                   	gs
 ef0:	5f                   	pop    edi
 ef1:	72 00                	jb     ef3 <sysEnter_Vector-0x12f10d>
 ef3:	74 69                	je     f5e <sysEnter_Vector-0x12f0a2>
 ef5:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 ef8:	54                   	push   esp
 ef9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 efa:	57                   	push   edi
 efb:	61                   	popa   
 efc:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 f03:	6f 
 f04:	6e                   	outs   dx,BYTE PTR ds:[esi]
 f05:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f09:	79 65                	jns    f70 <sysEnter_Vector-0x12f090>
 f0b:	61                   	popa   
 f0c:	72 00                	jb     f0e <sysEnter_Vector-0x12f0f2>
 f0e:	6d                   	ins    DWORD PTR es:[edi],dx
 f0f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f10:	6e                   	outs   dx,BYTE PTR ds:[esi]
 f11:	74 68                	je     f7b <sysEnter_Vector-0x12f085>
 f13:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 f16:	74 74                	je     f8c <sysEnter_Vector-0x12f074>
 f18:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 f1f:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 f26:	61                   	popa   
 f27:	79 6e                	jns    f97 <sysEnter_Vector-0x12f069>
 f29:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f2a:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 f2d:	74 69                	je     f98 <sysEnter_Vector-0x12f068>
 f2f:	6d                   	ins    DWORD PTR es:[edi],dx
 f30:	65                   	gs
 f31:	5f                   	pop    edi
 f32:	72 49                	jb     f7d <sysEnter_Vector-0x12f083>
 f34:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f38:	6d                   	ins    DWORD PTR es:[edi],dx
 f39:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 f40:	64                   	fs
 f41:	61                   	popa   
 f42:	79 00                	jns    f44 <sysEnter_Vector-0x12f0bc>
 f44:	6c                   	ins    BYTE PTR es:[edi],dx
 f45:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f46:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 f49:	54                   	push   esp
 f4a:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 f51:	75 66                	jne    fb9 <sysEnter_Vector-0x12f047>
 f53:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 f57:	65                   	gs
 f58:	5f                   	pop    edi
 f59:	74 00                	je     f5b <sysEnter_Vector-0x12f0a5>
 f5b:	6c                   	ins    BYTE PTR es:[edi],dx
 f5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f5d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 f60:	74 69                	je     fcb <sysEnter_Vector-0x12f035>
 f62:	6d                   	ins    DWORD PTR es:[edi],dx
 f63:	65                   	gs
 f64:	5f                   	pop    edi
 f65:	72 00                	jb     f67 <sysEnter_Vector-0x12f099>
 f67:	64                   	fs
 f68:	61                   	popa   
 f69:	79 63                	jns    fce <sysEnter_Vector-0x12f032>
 f6b:	6c                   	ins    BYTE PTR es:[edi],dx
 f6c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 f6d:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 f70:	6d                   	ins    DWORD PTR es:[edi],dx
 f71:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 f76:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f7a:	67 6d                	ins    DWORD PTR es:[di],dx
 f7c:	74 6f                	je     fed <sysEnter_Vector-0x12f013>
 f7e:	66                   	data16
 f7f:	66                   	data16
 f80:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 f84:	77 64                	ja     fea <sysEnter_Vector-0x12f016>
 f86:	61                   	popa   
 f87:	79 00                	jns    f89 <sysEnter_Vector-0x12f077>
 f89:	5f                   	pop    edi
 f8a:	79 74                	jns    1000 <sysEnter_Vector-0x12f000>
 f8c:	61                   	popa   
 f8d:	62 00                	bound  eax,QWORD PTR [eax]
 f8f:	74 6d                	je     ffe <sysEnter_Vector-0x12f002>
 f91:	5f                   	pop    edi
 f92:	6d                   	ins    DWORD PTR es:[edi],dx
 f93:	64                   	fs
 f94:	61                   	popa   
 f95:	79 00                	jns    f97 <sysEnter_Vector-0x12f069>
 f97:	74 6d                	je     1006 <sysEnter_Vector-0x12effa>
 f99:	5f                   	pop    edi
 f9a:	73 65                	jae    1001 <sysEnter_Vector-0x12efff>
 f9c:	63 00                	arpl   WORD PTR [eax],ax
 f9e:	74 6d                	je     100d <sysEnter_Vector-0x12eff3>
 fa0:	5f                   	pop    edi
 fa1:	7a 6f                	jp     1012 <sysEnter_Vector-0x12efee>
 fa3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 fa4:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 fa9:	65                   	gs
 faa:	72 00                	jb     fac <sysEnter_Vector-0x12f054>
 fac:	6c                   	ins    BYTE PTR es:[edi],dx
 fad:	6f                   	outs   dx,DWORD PTR ds:[esi]
 fae:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 fb1:	74 69                	je     101c <sysEnter_Vector-0x12efe4>
 fb3:	6d                   	ins    DWORD PTR es:[edi],dx
 fb4:	65                   	gs
 fb5:	5f                   	pop    edi
 fb6:	72 49                	jb     1001 <sysEnter_Vector-0x12efff>
 fb8:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 fbb:	73 74                	jae    1031 <sysEnter_Vector-0x12efcf>
 fbd:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 fc0:	73 00                	jae    fc2 <sysEnter_Vector-0x12f03e>
 fc2:	72 65                	jb     1029 <sysEnter_Vector-0x12efd7>
 fc4:	73 75                	jae    103b <sysEnter_Vector-0x12efc5>
 fc6:	6c                   	ins    BYTE PTR es:[edi],dx
 fc7:	74 00                	je     fc9 <sysEnter_Vector-0x12f037>
 fc9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 fca:	76 65                	jbe    1031 <sysEnter_Vector-0x12efcf>
 fcc:	72 66                	jb     1034 <sysEnter_Vector-0x12efcc>
 fce:	6c                   	ins    BYTE PTR es:[edi],dx
 fcf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 fd0:	77 00                	ja     fd2 <sysEnter_Vector-0x12f02e>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20 0b                	and    BYTE PTR [ebx],cl
   2:	00 00                	add    BYTE PTR [eax],al
   4:	5a                   	pop    edx
   5:	0b 00                	or     eax,DWORD PTR [eax]
   7:	00 5f 0b             	add    BYTE PTR [edi+0xb],bl
   a:	00 00                	add    BYTE PTR [eax],al
   c:	93                   	xchg   ebx,eax
   d:	0b 00                	or     eax,DWORD PTR [eax]
	...
